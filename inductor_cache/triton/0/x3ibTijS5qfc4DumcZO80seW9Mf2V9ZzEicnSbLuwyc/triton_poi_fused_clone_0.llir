; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_clone_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 10, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 1020, !dbg !12
  %11 = and i32 %8, 255, !dbg !12
  %12 = or disjoint i32 %11, 256, !dbg !12
  %13 = or disjoint i32 %11, 512, !dbg !12
  %14 = or disjoint i32 %11, 768, !dbg !12
  %15 = or disjoint i32 %7, %10, !dbg !13
  %16 = or disjoint i32 %7, %11, !dbg !13
  %17 = or disjoint i32 %7, %12, !dbg !13
  %18 = or disjoint i32 %7, %13, !dbg !13
  %19 = or disjoint i32 %7, %14, !dbg !13
  %20 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %21 = shl i32 %20, 2, !dbg !15
  %22 = or disjoint i32 %21, 1, !dbg !16
  %23 = or disjoint i32 %21, 2, !dbg !16
  %24 = or disjoint i32 %21, 3, !dbg !16
  %25 = icmp slt i32 %21, 4, !dbg !17
  %26 = icmp slt i32 %22, 4, !dbg !17
  %27 = icmp slt i32 %23, 4, !dbg !17
  %28 = icmp slt i32 %24, 4, !dbg !17
  %29 = shl i32 %20, 4, !dbg !18
  %30 = shl i32 %15, 2, !dbg !19
  %31 = add i32 %30, %29, !dbg !20
  %32 = add i32 %22, %15, !dbg !20
  %33 = shl i32 %32, 2, !dbg !20
  %34 = add i32 %23, %15, !dbg !20
  %35 = shl i32 %34, 2, !dbg !20
  %36 = add i32 %24, %15, !dbg !20
  %37 = shl i32 %36, 2, !dbg !20
  %38 = sext i32 %31 to i64, !dbg !21
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !21
  %40 = sext i32 %33 to i64, !dbg !21
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !21
  %42 = sext i32 %35 to i64, !dbg !21
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !21
  %44 = sext i32 %37 to i64, !dbg !21
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !21
  %46 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %39, i1 %25) #2, !dbg !22
  %47 = extractvalue { i32, i32, i32, i32 } %46, 0, !dbg !22
  %48 = extractvalue { i32, i32, i32, i32 } %46, 1, !dbg !22
  %49 = extractvalue { i32, i32, i32, i32 } %46, 2, !dbg !22
  %50 = extractvalue { i32, i32, i32, i32 } %46, 3, !dbg !22
  %51 = bitcast i32 %47 to float, !dbg !22
  %52 = bitcast i32 %48 to float, !dbg !22
  %53 = bitcast i32 %49 to float, !dbg !22
  %54 = bitcast i32 %50 to float, !dbg !22
  %55 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %41, i1 %26) #2, !dbg !22
  %56 = extractvalue { i32, i32, i32, i32 } %55, 0, !dbg !22
  %57 = extractvalue { i32, i32, i32, i32 } %55, 1, !dbg !22
  %58 = extractvalue { i32, i32, i32, i32 } %55, 2, !dbg !22
  %59 = extractvalue { i32, i32, i32, i32 } %55, 3, !dbg !22
  %60 = bitcast i32 %56 to float, !dbg !22
  %61 = bitcast i32 %57 to float, !dbg !22
  %62 = bitcast i32 %58 to float, !dbg !22
  %63 = bitcast i32 %59 to float, !dbg !22
  %64 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %43, i1 %27) #2, !dbg !22
  %65 = extractvalue { i32, i32, i32, i32 } %64, 0, !dbg !22
  %66 = extractvalue { i32, i32, i32, i32 } %64, 1, !dbg !22
  %67 = extractvalue { i32, i32, i32, i32 } %64, 2, !dbg !22
  %68 = extractvalue { i32, i32, i32, i32 } %64, 3, !dbg !22
  %69 = bitcast i32 %65 to float, !dbg !22
  %70 = bitcast i32 %66 to float, !dbg !22
  %71 = bitcast i32 %67 to float, !dbg !22
  %72 = bitcast i32 %68 to float, !dbg !22
  %73 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %45, i1 %28) #2, !dbg !22
  %74 = extractvalue { i32, i32, i32, i32 } %73, 0, !dbg !22
  %75 = extractvalue { i32, i32, i32, i32 } %73, 1, !dbg !22
  %76 = extractvalue { i32, i32, i32, i32 } %73, 2, !dbg !22
  %77 = extractvalue { i32, i32, i32, i32 } %73, 3, !dbg !22
  %78 = bitcast i32 %74 to float, !dbg !22
  %79 = bitcast i32 %75 to float, !dbg !22
  %80 = bitcast i32 %76 to float, !dbg !22
  %81 = bitcast i32 %77 to float, !dbg !22
  %82 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %1, i1 true) #2, !dbg !23
  %83 = extractvalue { i32, i32, i32, i32 } %82, 0, !dbg !23
  %84 = extractvalue { i32, i32, i32, i32 } %82, 1, !dbg !23
  %85 = extractvalue { i32, i32, i32, i32 } %82, 2, !dbg !23
  %86 = extractvalue { i32, i32, i32, i32 } %82, 3, !dbg !23
  %87 = bitcast i32 %83 to float, !dbg !23
  %88 = bitcast i32 %84 to float, !dbg !23
  %89 = bitcast i32 %85 to float, !dbg !23
  %90 = bitcast i32 %86 to float, !dbg !23
  %91 = fadd float %51, %87, !dbg !24
  %92 = fadd float %52, %88, !dbg !24
  %93 = fadd float %53, %89, !dbg !24
  %94 = fadd float %54, %90, !dbg !24
  %95 = fadd float %60, %87, !dbg !24
  %96 = fadd float %61, %88, !dbg !24
  %97 = fadd float %62, %89, !dbg !24
  %98 = fadd float %63, %90, !dbg !24
  %99 = fadd float %69, %87, !dbg !24
  %100 = fadd float %70, %88, !dbg !24
  %101 = fadd float %71, %89, !dbg !24
  %102 = fadd float %72, %90, !dbg !24
  %103 = fadd float %78, %87, !dbg !24
  %104 = fadd float %79, %88, !dbg !24
  %105 = fadd float %80, %89, !dbg !24
  %106 = fadd float %81, %90, !dbg !24
  %107 = add i32 %16, %20, !dbg !25
  %108 = shl i32 %107, 2, !dbg !25
  %109 = add i32 %17, %20, !dbg !25
  %110 = shl i32 %109, 2, !dbg !25
  %111 = add i32 %18, %20, !dbg !25
  %112 = shl i32 %111, 2, !dbg !25
  %113 = add i32 %19, %20, !dbg !25
  %114 = shl i32 %113, 2, !dbg !25
  %115 = sext i32 %108 to i64, !dbg !26
  %116 = getelementptr float, ptr addrspace(1) %2, i64 %115, !dbg !26
  %117 = sext i32 %110 to i64, !dbg !26
  %118 = getelementptr float, ptr addrspace(1) %2, i64 %117, !dbg !26
  %119 = sext i32 %112 to i64, !dbg !26
  %120 = getelementptr float, ptr addrspace(1) %2, i64 %119, !dbg !26
  %121 = sext i32 %114 to i64, !dbg !26
  %122 = getelementptr float, ptr addrspace(1) %2, i64 %121, !dbg !26
  %123 = shl i32 %8, 4, !dbg !27
  %124 = and i32 %123, 4080, !dbg !27
  %125 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %124, !dbg !27
  %126 = getelementptr float, ptr addrspace(3) %125, i32 %124, !dbg !27
  %127 = bitcast float %91 to <1 x i32>, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %126, <1 x i32> %127, i1 true) #2, !dbg !27
  %128 = or disjoint i32 %124, 4, !dbg !27
  %129 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %128, !dbg !27
  %130 = getelementptr float, ptr addrspace(3) %129, i32 %128, !dbg !27
  %131 = bitcast float %92 to <1 x i32>, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %130, <1 x i32> %131, i1 true) #2, !dbg !27
  %132 = or disjoint i32 %124, 8, !dbg !27
  %133 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %132, !dbg !27
  %134 = getelementptr float, ptr addrspace(3) %133, i32 %132, !dbg !27
  %135 = bitcast float %93 to <1 x i32>, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %134, <1 x i32> %135, i1 true) #2, !dbg !27
  %136 = or disjoint i32 %124, 12, !dbg !27
  %137 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %136, !dbg !27
  %138 = getelementptr float, ptr addrspace(3) %137, i32 %136, !dbg !27
  %139 = bitcast float %94 to <1 x i32>, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %138, <1 x i32> %139, i1 true) #2, !dbg !27
  %140 = or disjoint i32 %124, 1, !dbg !27
  %141 = getelementptr float, ptr addrspace(3) %125, i32 %140, !dbg !27
  %142 = bitcast float %95 to <1 x i32>, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %141, <1 x i32> %142, i1 true) #2, !dbg !27
  %143 = or disjoint i32 %124, 5, !dbg !27
  %144 = lshr i32 %143, 2, !dbg !27
  %145 = getelementptr float, ptr addrspace(3) @global_smem, i32 %144, !dbg !27
  %146 = getelementptr float, ptr addrspace(3) %145, i32 %143, !dbg !27
  %147 = bitcast float %96 to <1 x i32>, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %146, <1 x i32> %147, i1 true) #2, !dbg !27
  %148 = or disjoint i32 %124, 9, !dbg !27
  %149 = lshr i32 %148, 2, !dbg !27
  %150 = getelementptr float, ptr addrspace(3) @global_smem, i32 %149, !dbg !27
  %151 = getelementptr float, ptr addrspace(3) %150, i32 %148, !dbg !27
  %152 = bitcast float %97 to <1 x i32>, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %151, <1 x i32> %152, i1 true) #2, !dbg !27
  %153 = or disjoint i32 %124, 13, !dbg !27
  %154 = lshr i32 %153, 2, !dbg !27
  %155 = getelementptr float, ptr addrspace(3) @global_smem, i32 %154, !dbg !27
  %156 = getelementptr float, ptr addrspace(3) %155, i32 %153, !dbg !27
  %157 = bitcast float %98 to <1 x i32>, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %156, <1 x i32> %157, i1 true) #2, !dbg !27
  %158 = or disjoint i32 %124, 2, !dbg !27
  %159 = getelementptr float, ptr addrspace(3) %125, i32 %158, !dbg !27
  %160 = bitcast float %99 to <1 x i32>, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %159, <1 x i32> %160, i1 true) #2, !dbg !27
  %161 = or disjoint i32 %124, 6, !dbg !27
  %162 = lshr i32 %161, 2, !dbg !27
  %163 = getelementptr float, ptr addrspace(3) @global_smem, i32 %162, !dbg !27
  %164 = getelementptr float, ptr addrspace(3) %163, i32 %161, !dbg !27
  %165 = bitcast float %100 to <1 x i32>, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %164, <1 x i32> %165, i1 true) #2, !dbg !27
  %166 = or disjoint i32 %124, 10, !dbg !27
  %167 = lshr i32 %166, 2, !dbg !27
  %168 = getelementptr float, ptr addrspace(3) @global_smem, i32 %167, !dbg !27
  %169 = getelementptr float, ptr addrspace(3) %168, i32 %166, !dbg !27
  %170 = bitcast float %101 to <1 x i32>, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %169, <1 x i32> %170, i1 true) #2, !dbg !27
  %171 = or disjoint i32 %124, 14, !dbg !27
  %172 = lshr i32 %171, 2, !dbg !27
  %173 = getelementptr float, ptr addrspace(3) @global_smem, i32 %172, !dbg !27
  %174 = getelementptr float, ptr addrspace(3) %173, i32 %171, !dbg !27
  %175 = bitcast float %102 to <1 x i32>, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %174, <1 x i32> %175, i1 true) #2, !dbg !27
  %176 = or disjoint i32 %124, 3, !dbg !27
  %177 = getelementptr float, ptr addrspace(3) %125, i32 %176, !dbg !27
  %178 = bitcast float %103 to <1 x i32>, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %177, <1 x i32> %178, i1 true) #2, !dbg !27
  %179 = or disjoint i32 %124, 7, !dbg !27
  %180 = lshr i32 %179, 2, !dbg !27
  %181 = getelementptr float, ptr addrspace(3) @global_smem, i32 %180, !dbg !27
  %182 = getelementptr float, ptr addrspace(3) %181, i32 %179, !dbg !27
  %183 = bitcast float %104 to <1 x i32>, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %182, <1 x i32> %183, i1 true) #2, !dbg !27
  %184 = or disjoint i32 %124, 11, !dbg !27
  %185 = lshr i32 %184, 2, !dbg !27
  %186 = getelementptr float, ptr addrspace(3) @global_smem, i32 %185, !dbg !27
  %187 = getelementptr float, ptr addrspace(3) %186, i32 %184, !dbg !27
  %188 = bitcast float %105 to <1 x i32>, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %187, <1 x i32> %188, i1 true) #2, !dbg !27
  %189 = or disjoint i32 %124, 15, !dbg !27
  %190 = lshr i32 %189, 2, !dbg !27
  %191 = getelementptr float, ptr addrspace(3) @global_smem, i32 %190, !dbg !27
  %192 = getelementptr float, ptr addrspace(3) %191, i32 %189, !dbg !27
  %193 = bitcast float %106 to <1 x i32>, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %192, <1 x i32> %193, i1 true) #2, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %194 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %10, !dbg !27
  %195 = getelementptr inbounds float, ptr addrspace(3) %194, i32 %10, !dbg !27
  %196 = load i32, ptr addrspace(3) %195, align 4, !dbg !27
  %197 = or disjoint i32 %10, 1, !dbg !27
  %198 = getelementptr inbounds float, ptr addrspace(3) %194, i32 %197, !dbg !27
  %199 = load i32, ptr addrspace(3) %198, align 4, !dbg !27
  %200 = or disjoint i32 %10, 2, !dbg !27
  %201 = getelementptr inbounds float, ptr addrspace(3) %194, i32 %200, !dbg !27
  %202 = load i32, ptr addrspace(3) %201, align 4, !dbg !27
  %203 = or disjoint i32 %10, 3, !dbg !27
  %204 = getelementptr inbounds float, ptr addrspace(3) %194, i32 %203, !dbg !27
  %205 = load i32, ptr addrspace(3) %204, align 4, !dbg !27
  %206 = or disjoint i32 %10, 1024, !dbg !27
  %207 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %206, !dbg !27
  %208 = getelementptr inbounds float, ptr addrspace(3) %207, i32 %206, !dbg !27
  %209 = load i32, ptr addrspace(3) %208, align 4, !dbg !27
  %210 = or disjoint i32 %10, 1025, !dbg !27
  %211 = lshr i32 %210, 2, !dbg !27
  %212 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %211, !dbg !27
  %213 = getelementptr inbounds float, ptr addrspace(3) %212, i32 %210, !dbg !27
  %214 = load i32, ptr addrspace(3) %213, align 4, !dbg !27
  %215 = or disjoint i32 %10, 1026, !dbg !27
  %216 = lshr i32 %215, 2, !dbg !27
  %217 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %216, !dbg !27
  %218 = getelementptr inbounds float, ptr addrspace(3) %217, i32 %215, !dbg !27
  %219 = load i32, ptr addrspace(3) %218, align 4, !dbg !27
  %220 = or disjoint i32 %10, 1027, !dbg !27
  %221 = lshr i32 %220, 2, !dbg !27
  %222 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %221, !dbg !27
  %223 = getelementptr inbounds float, ptr addrspace(3) %222, i32 %220, !dbg !27
  %224 = load i32, ptr addrspace(3) %223, align 4, !dbg !27
  %225 = or disjoint i32 %10, 2048, !dbg !27
  %226 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %225, !dbg !27
  %227 = getelementptr inbounds float, ptr addrspace(3) %226, i32 %225, !dbg !27
  %228 = load i32, ptr addrspace(3) %227, align 4, !dbg !27
  %229 = or disjoint i32 %10, 2049, !dbg !27
  %230 = lshr i32 %229, 2, !dbg !27
  %231 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %230, !dbg !27
  %232 = getelementptr inbounds float, ptr addrspace(3) %231, i32 %229, !dbg !27
  %233 = load i32, ptr addrspace(3) %232, align 4, !dbg !27
  %234 = or disjoint i32 %10, 2050, !dbg !27
  %235 = lshr i32 %234, 2, !dbg !27
  %236 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %235, !dbg !27
  %237 = getelementptr inbounds float, ptr addrspace(3) %236, i32 %234, !dbg !27
  %238 = load i32, ptr addrspace(3) %237, align 4, !dbg !27
  %239 = or disjoint i32 %10, 2051, !dbg !27
  %240 = lshr i32 %239, 2, !dbg !27
  %241 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %240, !dbg !27
  %242 = getelementptr inbounds float, ptr addrspace(3) %241, i32 %239, !dbg !27
  %243 = load i32, ptr addrspace(3) %242, align 4, !dbg !27
  %244 = or disjoint i32 %10, 3072, !dbg !27
  %245 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %244, !dbg !27
  %246 = getelementptr inbounds float, ptr addrspace(3) %245, i32 %244, !dbg !27
  %247 = load i32, ptr addrspace(3) %246, align 4, !dbg !27
  %248 = or disjoint i32 %10, 3073, !dbg !27
  %249 = lshr i32 %248, 2, !dbg !27
  %250 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %249, !dbg !27
  %251 = getelementptr inbounds float, ptr addrspace(3) %250, i32 %248, !dbg !27
  %252 = load i32, ptr addrspace(3) %251, align 4, !dbg !27
  %253 = or disjoint i32 %10, 3074, !dbg !27
  %254 = lshr i32 %253, 2, !dbg !27
  %255 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %254, !dbg !27
  %256 = getelementptr inbounds float, ptr addrspace(3) %255, i32 %253, !dbg !27
  %257 = load i32, ptr addrspace(3) %256, align 4, !dbg !27
  %258 = or disjoint i32 %10, 3075, !dbg !27
  %259 = lshr i32 %258, 2, !dbg !27
  %260 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %259, !dbg !27
  %261 = getelementptr inbounds float, ptr addrspace(3) %260, i32 %258, !dbg !27
  %262 = load i32, ptr addrspace(3) %261, align 4, !dbg !27
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %196, i32 %199, i32 %202, i32 %205, ptr addrspace(1) %116, i1 %25) #2, !dbg !27
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %209, i32 %214, i32 %219, i32 %224, ptr addrspace(1) %118, i1 %25) #2, !dbg !27
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %228, i32 %233, i32 %238, i32 %243, ptr addrspace(1) %120, i1 %25) #2, !dbg !27
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %247, i32 %252, i32 %257, i32 %262, ptr addrspace(1) %122, i1 %25) #2, !dbg !27
  ret void, !dbg !28
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cp3cr4li5drh2nlcjy245o6k25sjybkxwpql7xxlaniigi3mdy53.py", directory: "inductor_cache/p3")
!4 = !{ptr @triton_poi_fused_clone_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_clone_0, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_clone_0", linkageName: "triton_poi_fused_clone_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 23, scope: !7)
!17 = !DILocation(line: 27, column: 21, scope: !7)
!18 = !DILocation(line: 32, column: 37, scope: !7)
!19 = !DILocation(line: 32, column: 45, scope: !7)
!20 = !DILocation(line: 32, column: 42, scope: !7)
!21 = !DILocation(line: 32, column: 30, scope: !7)
!22 = !DILocation(line: 32, column: 50, scope: !7)
!23 = !DILocation(line: 33, column: 35, scope: !7)
!24 = !DILocation(line: 34, column: 18, scope: !7)
!25 = !DILocation(line: 35, column: 30, scope: !7)
!26 = !DILocation(line: 35, column: 25, scope: !7)
!27 = !DILocation(line: 35, column: 43, scope: !7)
!28 = !DILocation(line: 35, column: 4, scope: !7)
