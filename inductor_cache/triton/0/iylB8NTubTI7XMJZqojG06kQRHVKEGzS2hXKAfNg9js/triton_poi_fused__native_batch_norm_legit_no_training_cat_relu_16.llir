; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_16(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, i32 %12) local_unnamed_addr !dbg !7 {
  %14 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %15 = shl i32 %14, 10, !dbg !11
  %16 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %17 = shl i32 %16, 2, !dbg !12
  %18 = and i32 %17, 508, !dbg !12
  %19 = or disjoint i32 %15, %18, !dbg !13
  %20 = or disjoint i32 %19, 512, !dbg !13
  %21 = srem i32 %19, 64, !dbg !14
  %.frozen = freeze i32 %19, !dbg !15
  %22 = sdiv i32 %.frozen, 18432, !dbg !15
  %.frozen83 = freeze i32 %20, !dbg !15
  %23 = sdiv i32 %.frozen83, 18432, !dbg !15
  %24 = mul i32 %22, 18432, !dbg !16
  %srem.decomposed = sub i32 %.frozen, %24, !dbg !16
  %25 = mul i32 %23, 18432, !dbg !16
  %srem1.decomposed = sub i32 %.frozen83, %25, !dbg !16
  %26 = shl nsw i32 %22, 13, !dbg !17
  %27 = shl nsw i32 %23, 13, !dbg !17
  %28 = add nsw i32 %26, %srem.decomposed, !dbg !18
  %29 = add nsw i32 %27, %srem1.decomposed, !dbg !18
  %30 = sext i32 %28 to i64, !dbg !19
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !19
  %32 = sext i32 %29 to i64, !dbg !19
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !19
  %34 = shl nsw i32 %22, 11, !dbg !20
  %35 = shl nsw i32 %23, 11, !dbg !20
  %36 = add nsw i32 %34, %21, !dbg !21
  %37 = add nsw i32 %36, -8192, !dbg !22
  %38 = add nsw i32 %35, %21, !dbg !21
  %39 = add nsw i32 %38, -8192, !dbg !22
  %40 = add nsw i32 %36, -10240, !dbg !23
  %41 = add nsw i32 %38, -10240, !dbg !23
  %42 = add nsw i32 %36, -12288, !dbg !24
  %43 = add nsw i32 %38, -12288, !dbg !24
  %44 = insertelement <2 x i32> poison, i32 %20, i64 0, !dbg !25
  %45 = insertelement <2 x i32> %44, i32 %19, i64 1, !dbg !25
  %46 = sdiv <2 x i32> %45, splat (i32 64), !dbg !25
  %47 = srem <2 x i32> %46, splat (i32 288), !dbg !26
  %48 = extractelement <2 x i32> %47, i64 1, !dbg !27
  %49 = sext i32 %48 to i64, !dbg !28
  %50 = getelementptr float, ptr addrspace(1) %6, i64 %49, !dbg !28
  %51 = extractelement <2 x i32> %47, i64 0, !dbg !27
  %52 = sext i32 %51 to i64, !dbg !28
  %53 = getelementptr float, ptr addrspace(1) %6, i64 %52, !dbg !28
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 true) #3, !dbg !29
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 true) #3, !dbg !29
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 true) #3, !dbg !29
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 true) #3, !dbg !29
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 true) #3, !dbg !29
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 true) #3, !dbg !29
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 true) #3, !dbg !29
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 true) #3, !dbg !29
  %62 = getelementptr float, ptr addrspace(1) %7, i64 %49, !dbg !30
  %63 = getelementptr float, ptr addrspace(1) %7, i64 %52, !dbg !30
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 true) #3, !dbg !31
  %65 = bitcast i32 %64 to float, !dbg !31
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 true) #3, !dbg !31
  %67 = bitcast i32 %66 to float, !dbg !31
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 true) #3, !dbg !31
  %69 = bitcast i32 %68 to float, !dbg !31
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 true) #3, !dbg !31
  %71 = bitcast i32 %70 to float, !dbg !31
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 true) #3, !dbg !31
  %73 = bitcast i32 %72 to float, !dbg !31
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 true) #3, !dbg !31
  %75 = bitcast i32 %74 to float, !dbg !31
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 true) #3, !dbg !31
  %77 = bitcast i32 %76 to float, !dbg !31
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 true) #3, !dbg !31
  %79 = bitcast i32 %78 to float, !dbg !31
  %80 = getelementptr float, ptr addrspace(1) %8, i64 %49, !dbg !32
  %81 = getelementptr float, ptr addrspace(1) %8, i64 %52, !dbg !32
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %80, i1 true) #3, !dbg !33
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %80, i1 true) #3, !dbg !33
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %80, i1 true) #3, !dbg !33
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %80, i1 true) #3, !dbg !33
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 true) #3, !dbg !33
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 true) #3, !dbg !33
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 true) #3, !dbg !33
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 true) #3, !dbg !33
  %90 = getelementptr float, ptr addrspace(1) %9, i64 %49, !dbg !34
  %91 = getelementptr float, ptr addrspace(1) %9, i64 %52, !dbg !34
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %90, i1 true) #3, !dbg !35
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %90, i1 true) #3, !dbg !35
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %90, i1 true) #3, !dbg !35
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %90, i1 true) #3, !dbg !35
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %91, i1 true) #3, !dbg !35
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %91, i1 true) #3, !dbg !35
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %91, i1 true) #3, !dbg !35
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %91, i1 true) #3, !dbg !35
  %100 = icmp slt <2 x i32> %47, splat (i32 128), !dbg !36
  %101 = extractelement <2 x i1> %100, i64 1, !dbg !37
  %102 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %31, i1 %101, i32 0, i1 %101, i32 0, i1 %101, i32 0, i1 %101, i32 0, i1 %101) #3, !dbg !37
  %103 = extractelement <2 x i1> %100, i64 0, !dbg !37
  %104 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %33, i1 %103, i32 0, i1 %103, i32 0, i1 %103, i32 0, i1 %103, i32 0, i1 %103) #3, !dbg !37
  %105 = and <2 x i32> %47, splat (i32 -32), !dbg !38
  %106 = icmp eq <2 x i32> %105, splat (i32 128), !dbg !38
  %107 = shl nsw i32 %48, 6, !dbg !21
  %108 = shl nsw i32 %51, 6, !dbg !21
  %109 = add nsw i32 %37, %107, !dbg !39
  %110 = add nsw i32 %39, %108, !dbg !39
  %111 = sext i32 %109 to i64, !dbg !40
  %112 = getelementptr float, ptr addrspace(1) %1, i64 %111, !dbg !40
  %113 = sext i32 %110 to i64, !dbg !40
  %114 = getelementptr float, ptr addrspace(1) %1, i64 %113, !dbg !40
  %115 = extractelement <2 x i1> %106, i64 1, !dbg !41
  %116 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %112, i1 %115, i32 0, i1 %115, i32 0, i1 %115, i32 0, i1 %115, i32 0, i1 %115) #3, !dbg !41
  %117 = extractelement <2 x i1> %106, i64 0, !dbg !41
  %118 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %114, i1 %117, i32 0, i1 %117, i32 0, i1 %117, i32 0, i1 %117, i32 0, i1 %117) #3, !dbg !41
  %119 = icmp eq <2 x i32> %105, splat (i32 160), !dbg !42
  %120 = add nsw i32 %40, %107, !dbg !43
  %121 = add nsw i32 %41, %108, !dbg !43
  %122 = sext i32 %120 to i64, !dbg !44
  %123 = getelementptr float, ptr addrspace(1) %2, i64 %122, !dbg !44
  %124 = sext i32 %121 to i64, !dbg !44
  %125 = getelementptr float, ptr addrspace(1) %2, i64 %124, !dbg !44
  %126 = extractelement <2 x i1> %119, i64 1, !dbg !45
  %127 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %123, i1 %126, i32 0, i1 %126, i32 0, i1 %126, i32 0, i1 %126, i32 0, i1 %126) #3, !dbg !45
  %128 = extractelement <2 x i1> %119, i64 0, !dbg !45
  %129 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %125, i1 %128, i32 0, i1 %128, i32 0, i1 %128, i32 0, i1 %128, i32 0, i1 %128) #3, !dbg !45
  %130 = icmp eq <2 x i32> %105, splat (i32 192), !dbg !46
  %131 = add nsw i32 %42, %107, !dbg !47
  %132 = add nsw i32 %43, %108, !dbg !47
  %133 = sext i32 %131 to i64, !dbg !48
  %134 = getelementptr float, ptr addrspace(1) %3, i64 %133, !dbg !48
  %135 = sext i32 %132 to i64, !dbg !48
  %136 = getelementptr float, ptr addrspace(1) %3, i64 %135, !dbg !48
  %137 = extractelement <2 x i1> %130, i64 1, !dbg !49
  %138 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %134, i1 %137, i32 0, i1 %137, i32 0, i1 %137, i32 0, i1 %137, i32 0, i1 %137) #3, !dbg !49
  %139 = extractelement <2 x i1> %130, i64 0, !dbg !49
  %140 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %136, i1 %139, i32 0, i1 %139, i32 0, i1 %139, i32 0, i1 %139, i32 0, i1 %139) #3, !dbg !49
  %141 = icmp eq <2 x i32> %105, splat (i32 224), !dbg !50
  %142 = add nsw i32 %36, -14336, !dbg !51
  %143 = add nsw i32 %142, %107, !dbg !52
  %144 = add nsw i32 %38, -14336, !dbg !51
  %145 = add nsw i32 %144, %108, !dbg !52
  %146 = sext i32 %143 to i64, !dbg !53
  %147 = getelementptr float, ptr addrspace(1) %4, i64 %146, !dbg !53
  %148 = sext i32 %145 to i64, !dbg !53
  %149 = getelementptr float, ptr addrspace(1) %4, i64 %148, !dbg !53
  %150 = extractelement <2 x i1> %141, i64 1, !dbg !54
  %151 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %147, i1 %150, i32 0, i1 %150, i32 0, i1 %150, i32 0, i1 %150, i32 0, i1 %150) #3, !dbg !54
  %152 = extractelement <2 x i1> %141, i64 0, !dbg !54
  %153 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %149, i1 %152, i32 0, i1 %152, i32 0, i1 %152, i32 0, i1 %152, i32 0, i1 %152) #3, !dbg !54
  %154 = icmp sgt i32 %48, 255, !dbg !27
  %155 = icmp sgt i32 %51, 255, !dbg !27
  %156 = add nsw i32 %36, -16384, !dbg !55
  %157 = add nsw i32 %156, %107, !dbg !56
  %158 = add nsw i32 %38, -16384, !dbg !55
  %159 = add nsw i32 %158, %108, !dbg !56
  %160 = sext i32 %157 to i64, !dbg !57
  %161 = getelementptr float, ptr addrspace(1) %5, i64 %160, !dbg !57
  %162 = sext i32 %159 to i64, !dbg !57
  %163 = getelementptr float, ptr addrspace(1) %5, i64 %162, !dbg !57
  %164 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %161, i1 %154, i32 0, i1 %154, i32 0, i1 %154, i32 0, i1 %154, i32 0, i1 %154) #3, !dbg !58
  %165 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %163, i1 %155, i32 0, i1 %155, i32 0, i1 %155, i32 0, i1 %155, i32 0, i1 %155) #3, !dbg !58
  %166 = fadd float %65, 0x3EE4F8B580000000, !dbg !59
  %167 = fadd float %67, 0x3EE4F8B580000000, !dbg !59
  %168 = fadd float %69, 0x3EE4F8B580000000, !dbg !59
  %169 = fadd float %71, 0x3EE4F8B580000000, !dbg !59
  %170 = fadd float %73, 0x3EE4F8B580000000, !dbg !59
  %171 = fadd float %75, 0x3EE4F8B580000000, !dbg !59
  %172 = fadd float %77, 0x3EE4F8B580000000, !dbg !59
  %173 = fadd float %79, 0x3EE4F8B580000000, !dbg !59
  %174 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !60
  %.not.i = icmp eq i32 %174, 0, !dbg !60
  %175 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !60
  %.not1.i = icmp eq i32 %175, 0, !dbg !60
  br i1 %.not.i, label %181, label %176, !dbg !60

176:                                              ; preds = %13
  br i1 %.not1.i, label %179, label %177, !dbg !60

177:                                              ; preds = %176
  %178 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %166) #3, !dbg !60
  br label %__nv_sqrtf.exit, !dbg !60

179:                                              ; preds = %176
  %180 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %166) #3, !dbg !60
  br label %__nv_sqrtf.exit, !dbg !60

181:                                              ; preds = %13
  br i1 %.not1.i, label %184, label %182, !dbg !60

182:                                              ; preds = %181
  %183 = tail call float @llvm.nvvm.sqrt.rn.f(float %166) #3, !dbg !60
  br label %__nv_sqrtf.exit, !dbg !60

184:                                              ; preds = %181
  %185 = tail call float @llvm.nvvm.sqrt.approx.f(float %166) #3, !dbg !60
  br label %__nv_sqrtf.exit, !dbg !60

__nv_sqrtf.exit:                                  ; preds = %177, %179, %182, %184
  %.0.i = phi float [ %178, %177 ], [ %180, %179 ], [ %183, %182 ], [ %185, %184 ], !dbg !60
  %186 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !60
  %.not.i41 = icmp eq i32 %186, 0, !dbg !60
  %187 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !60
  %.not1.i44 = icmp eq i32 %187, 0, !dbg !60
  br i1 %.not.i41, label %193, label %188, !dbg !60

188:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i44, label %191, label %189, !dbg !60

189:                                              ; preds = %188
  %190 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %167) #3, !dbg !60
  br label %__nv_sqrtf.exit45, !dbg !60

191:                                              ; preds = %188
  %192 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %167) #3, !dbg !60
  br label %__nv_sqrtf.exit45, !dbg !60

193:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i44, label %196, label %194, !dbg !60

194:                                              ; preds = %193
  %195 = tail call float @llvm.nvvm.sqrt.rn.f(float %167) #3, !dbg !60
  br label %__nv_sqrtf.exit45, !dbg !60

196:                                              ; preds = %193
  %197 = tail call float @llvm.nvvm.sqrt.approx.f(float %167) #3, !dbg !60
  br label %__nv_sqrtf.exit45, !dbg !60

__nv_sqrtf.exit45:                                ; preds = %189, %191, %194, %196
  %.0.i43 = phi float [ %190, %189 ], [ %192, %191 ], [ %195, %194 ], [ %197, %196 ], !dbg !60
  %198 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !60
  %.not.i46 = icmp eq i32 %198, 0, !dbg !60
  %199 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !60
  %.not1.i49 = icmp eq i32 %199, 0, !dbg !60
  br i1 %.not.i46, label %205, label %200, !dbg !60

200:                                              ; preds = %__nv_sqrtf.exit45
  br i1 %.not1.i49, label %203, label %201, !dbg !60

201:                                              ; preds = %200
  %202 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %168) #3, !dbg !60
  br label %__nv_sqrtf.exit50, !dbg !60

203:                                              ; preds = %200
  %204 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %168) #3, !dbg !60
  br label %__nv_sqrtf.exit50, !dbg !60

205:                                              ; preds = %__nv_sqrtf.exit45
  br i1 %.not1.i49, label %208, label %206, !dbg !60

206:                                              ; preds = %205
  %207 = tail call float @llvm.nvvm.sqrt.rn.f(float %168) #3, !dbg !60
  br label %__nv_sqrtf.exit50, !dbg !60

208:                                              ; preds = %205
  %209 = tail call float @llvm.nvvm.sqrt.approx.f(float %168) #3, !dbg !60
  br label %__nv_sqrtf.exit50, !dbg !60

__nv_sqrtf.exit50:                                ; preds = %201, %203, %206, %208
  %.0.i48 = phi float [ %202, %201 ], [ %204, %203 ], [ %207, %206 ], [ %209, %208 ], !dbg !60
  %210 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !60
  %.not.i51 = icmp eq i32 %210, 0, !dbg !60
  %211 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !60
  %.not1.i54 = icmp eq i32 %211, 0, !dbg !60
  br i1 %.not.i51, label %217, label %212, !dbg !60

212:                                              ; preds = %__nv_sqrtf.exit50
  br i1 %.not1.i54, label %215, label %213, !dbg !60

213:                                              ; preds = %212
  %214 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %169) #3, !dbg !60
  br label %__nv_sqrtf.exit55, !dbg !60

215:                                              ; preds = %212
  %216 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %169) #3, !dbg !60
  br label %__nv_sqrtf.exit55, !dbg !60

217:                                              ; preds = %__nv_sqrtf.exit50
  br i1 %.not1.i54, label %220, label %218, !dbg !60

218:                                              ; preds = %217
  %219 = tail call float @llvm.nvvm.sqrt.rn.f(float %169) #3, !dbg !60
  br label %__nv_sqrtf.exit55, !dbg !60

220:                                              ; preds = %217
  %221 = tail call float @llvm.nvvm.sqrt.approx.f(float %169) #3, !dbg !60
  br label %__nv_sqrtf.exit55, !dbg !60

__nv_sqrtf.exit55:                                ; preds = %213, %215, %218, %220
  %.0.i53 = phi float [ %214, %213 ], [ %216, %215 ], [ %219, %218 ], [ %221, %220 ], !dbg !60
  %222 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !60
  %.not.i56 = icmp eq i32 %222, 0, !dbg !60
  %223 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !60
  %.not1.i59 = icmp eq i32 %223, 0, !dbg !60
  br i1 %.not.i56, label %229, label %224, !dbg !60

224:                                              ; preds = %__nv_sqrtf.exit55
  br i1 %.not1.i59, label %227, label %225, !dbg !60

225:                                              ; preds = %224
  %226 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %170) #3, !dbg !60
  br label %__nv_sqrtf.exit60, !dbg !60

227:                                              ; preds = %224
  %228 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %170) #3, !dbg !60
  br label %__nv_sqrtf.exit60, !dbg !60

229:                                              ; preds = %__nv_sqrtf.exit55
  br i1 %.not1.i59, label %232, label %230, !dbg !60

230:                                              ; preds = %229
  %231 = tail call float @llvm.nvvm.sqrt.rn.f(float %170) #3, !dbg !60
  br label %__nv_sqrtf.exit60, !dbg !60

232:                                              ; preds = %229
  %233 = tail call float @llvm.nvvm.sqrt.approx.f(float %170) #3, !dbg !60
  br label %__nv_sqrtf.exit60, !dbg !60

__nv_sqrtf.exit60:                                ; preds = %225, %227, %230, %232
  %.0.i58 = phi float [ %226, %225 ], [ %228, %227 ], [ %231, %230 ], [ %233, %232 ], !dbg !60
  %234 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !60
  %.not.i61 = icmp eq i32 %234, 0, !dbg !60
  %235 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !60
  %.not1.i64 = icmp eq i32 %235, 0, !dbg !60
  br i1 %.not.i61, label %241, label %236, !dbg !60

236:                                              ; preds = %__nv_sqrtf.exit60
  br i1 %.not1.i64, label %239, label %237, !dbg !60

237:                                              ; preds = %236
  %238 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %171) #3, !dbg !60
  br label %__nv_sqrtf.exit65, !dbg !60

239:                                              ; preds = %236
  %240 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %171) #3, !dbg !60
  br label %__nv_sqrtf.exit65, !dbg !60

241:                                              ; preds = %__nv_sqrtf.exit60
  br i1 %.not1.i64, label %244, label %242, !dbg !60

242:                                              ; preds = %241
  %243 = tail call float @llvm.nvvm.sqrt.rn.f(float %171) #3, !dbg !60
  br label %__nv_sqrtf.exit65, !dbg !60

244:                                              ; preds = %241
  %245 = tail call float @llvm.nvvm.sqrt.approx.f(float %171) #3, !dbg !60
  br label %__nv_sqrtf.exit65, !dbg !60

__nv_sqrtf.exit65:                                ; preds = %237, %239, %242, %244
  %.0.i63 = phi float [ %238, %237 ], [ %240, %239 ], [ %243, %242 ], [ %245, %244 ], !dbg !60
  %246 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !60
  %.not.i66 = icmp eq i32 %246, 0, !dbg !60
  %247 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !60
  %.not1.i69 = icmp eq i32 %247, 0, !dbg !60
  br i1 %.not.i66, label %253, label %248, !dbg !60

248:                                              ; preds = %__nv_sqrtf.exit65
  br i1 %.not1.i69, label %251, label %249, !dbg !60

249:                                              ; preds = %248
  %250 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %172) #3, !dbg !60
  br label %__nv_sqrtf.exit70, !dbg !60

251:                                              ; preds = %248
  %252 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %172) #3, !dbg !60
  br label %__nv_sqrtf.exit70, !dbg !60

253:                                              ; preds = %__nv_sqrtf.exit65
  br i1 %.not1.i69, label %256, label %254, !dbg !60

254:                                              ; preds = %253
  %255 = tail call float @llvm.nvvm.sqrt.rn.f(float %172) #3, !dbg !60
  br label %__nv_sqrtf.exit70, !dbg !60

256:                                              ; preds = %253
  %257 = tail call float @llvm.nvvm.sqrt.approx.f(float %172) #3, !dbg !60
  br label %__nv_sqrtf.exit70, !dbg !60

__nv_sqrtf.exit70:                                ; preds = %249, %251, %254, %256
  %.0.i68 = phi float [ %250, %249 ], [ %252, %251 ], [ %255, %254 ], [ %257, %256 ], !dbg !60
  %258 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !60
  %.not.i71 = icmp eq i32 %258, 0, !dbg !60
  %259 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !60
  %.not1.i74 = icmp eq i32 %259, 0, !dbg !60
  br i1 %.not.i71, label %265, label %260, !dbg !60

260:                                              ; preds = %__nv_sqrtf.exit70
  br i1 %.not1.i74, label %263, label %261, !dbg !60

261:                                              ; preds = %260
  %262 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %173) #3, !dbg !60
  br label %__nv_sqrtf.exit75, !dbg !60

263:                                              ; preds = %260
  %264 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %173) #3, !dbg !60
  br label %__nv_sqrtf.exit75, !dbg !60

265:                                              ; preds = %__nv_sqrtf.exit70
  br i1 %.not1.i74, label %268, label %266, !dbg !60

266:                                              ; preds = %265
  %267 = tail call float @llvm.nvvm.sqrt.rn.f(float %173) #3, !dbg !60
  br label %__nv_sqrtf.exit75, !dbg !60

268:                                              ; preds = %265
  %269 = tail call float @llvm.nvvm.sqrt.approx.f(float %173) #3, !dbg !60
  br label %__nv_sqrtf.exit75, !dbg !60

__nv_sqrtf.exit75:                                ; preds = %261, %263, %266, %268
  %.0.i73 = phi float [ %262, %261 ], [ %264, %263 ], [ %267, %266 ], [ %269, %268 ], !dbg !60
  %270 = shufflevector <2 x i1> %141, <2 x i1> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !50
  %271 = shufflevector <2 x i1> %130, <2 x i1> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !46
  %272 = shufflevector <2 x i1> %119, <2 x i1> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !42
  %273 = shufflevector <2 x i1> %106, <2 x i1> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !38
  %274 = shufflevector <2 x i1> %100, <2 x i1> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !36
  %275 = extractvalue { i32, i32, i32, i32 } %104, 3, !dbg !37
  %276 = extractvalue { i32, i32, i32, i32 } %118, 3, !dbg !41
  %277 = extractvalue { i32, i32, i32, i32 } %129, 3, !dbg !45
  %278 = extractvalue { i32, i32, i32, i32 } %140, 3, !dbg !49
  %279 = extractvalue { i32, i32, i32, i32 } %153, 3, !dbg !54
  %280 = extractvalue { i32, i32, i32, i32 } %165, 3, !dbg !58
  %281 = insertelement <8 x i32> poison, i32 %61, i64 0, !dbg !29
  %282 = insertelement <8 x i32> %281, i32 %60, i64 1, !dbg !29
  %283 = insertelement <8 x i32> %282, i32 %59, i64 2, !dbg !29
  %284 = insertelement <8 x i32> %283, i32 %58, i64 3, !dbg !29
  %285 = insertelement <8 x i32> %284, i32 %57, i64 4, !dbg !29
  %286 = insertelement <8 x i32> %285, i32 %56, i64 5, !dbg !29
  %287 = insertelement <8 x i32> %286, i32 %55, i64 6, !dbg !29
  %288 = insertelement <8 x i32> %287, i32 %54, i64 7, !dbg !29
  %289 = bitcast <8 x i32> %288 to <8 x float>, !dbg !29
  %290 = extractvalue { i32, i32, i32, i32 } %104, 2, !dbg !37
  %291 = extractvalue { i32, i32, i32, i32 } %118, 2, !dbg !41
  %292 = extractvalue { i32, i32, i32, i32 } %129, 2, !dbg !45
  %293 = extractvalue { i32, i32, i32, i32 } %140, 2, !dbg !49
  %294 = extractvalue { i32, i32, i32, i32 } %153, 2, !dbg !54
  %295 = extractvalue { i32, i32, i32, i32 } %165, 2, !dbg !58
  %296 = extractvalue { i32, i32, i32, i32 } %104, 1, !dbg !37
  %297 = extractvalue { i32, i32, i32, i32 } %118, 1, !dbg !41
  %298 = extractvalue { i32, i32, i32, i32 } %129, 1, !dbg !45
  %299 = extractvalue { i32, i32, i32, i32 } %140, 1, !dbg !49
  %300 = extractvalue { i32, i32, i32, i32 } %153, 1, !dbg !54
  %301 = extractvalue { i32, i32, i32, i32 } %165, 1, !dbg !58
  %302 = extractvalue { i32, i32, i32, i32 } %104, 0, !dbg !37
  %303 = extractvalue { i32, i32, i32, i32 } %118, 0, !dbg !41
  %304 = extractvalue { i32, i32, i32, i32 } %129, 0, !dbg !45
  %305 = extractvalue { i32, i32, i32, i32 } %140, 0, !dbg !49
  %306 = extractvalue { i32, i32, i32, i32 } %153, 0, !dbg !54
  %307 = extractvalue { i32, i32, i32, i32 } %165, 0, !dbg !58
  %308 = extractvalue { i32, i32, i32, i32 } %102, 3, !dbg !37
  %309 = extractvalue { i32, i32, i32, i32 } %116, 3, !dbg !41
  %310 = extractvalue { i32, i32, i32, i32 } %127, 3, !dbg !45
  %311 = extractvalue { i32, i32, i32, i32 } %138, 3, !dbg !49
  %312 = extractvalue { i32, i32, i32, i32 } %151, 3, !dbg !54
  %313 = extractvalue { i32, i32, i32, i32 } %164, 3, !dbg !58
  %314 = extractvalue { i32, i32, i32, i32 } %102, 2, !dbg !37
  %315 = extractvalue { i32, i32, i32, i32 } %116, 2, !dbg !41
  %316 = extractvalue { i32, i32, i32, i32 } %127, 2, !dbg !45
  %317 = extractvalue { i32, i32, i32, i32 } %138, 2, !dbg !49
  %318 = extractvalue { i32, i32, i32, i32 } %151, 2, !dbg !54
  %319 = extractvalue { i32, i32, i32, i32 } %164, 2, !dbg !58
  %320 = extractvalue { i32, i32, i32, i32 } %102, 1, !dbg !37
  %321 = extractvalue { i32, i32, i32, i32 } %116, 1, !dbg !41
  %322 = extractvalue { i32, i32, i32, i32 } %127, 1, !dbg !45
  %323 = extractvalue { i32, i32, i32, i32 } %138, 1, !dbg !49
  %324 = extractvalue { i32, i32, i32, i32 } %151, 1, !dbg !54
  %325 = extractvalue { i32, i32, i32, i32 } %164, 1, !dbg !58
  %326 = extractvalue { i32, i32, i32, i32 } %102, 0, !dbg !37
  %327 = extractvalue { i32, i32, i32, i32 } %116, 0, !dbg !41
  %328 = extractvalue { i32, i32, i32, i32 } %127, 0, !dbg !45
  %329 = extractvalue { i32, i32, i32, i32 } %138, 0, !dbg !49
  %330 = extractvalue { i32, i32, i32, i32 } %151, 0, !dbg !54
  %331 = extractvalue { i32, i32, i32, i32 } %164, 0, !dbg !58
  %332 = insertelement <8 x i32> poison, i32 %99, i64 0, !dbg !35
  %333 = insertelement <8 x i32> %332, i32 %98, i64 1, !dbg !35
  %334 = insertelement <8 x i32> %333, i32 %97, i64 2, !dbg !35
  %335 = insertelement <8 x i32> %334, i32 %96, i64 3, !dbg !35
  %336 = insertelement <8 x i32> %335, i32 %95, i64 4, !dbg !35
  %337 = insertelement <8 x i32> %336, i32 %94, i64 5, !dbg !35
  %338 = insertelement <8 x i32> %337, i32 %93, i64 6, !dbg !35
  %339 = insertelement <8 x i32> %338, i32 %92, i64 7, !dbg !35
  %340 = bitcast <8 x i32> %339 to <8 x float>, !dbg !35
  %341 = insertelement <8 x i32> poison, i32 %89, i64 0, !dbg !33
  %342 = insertelement <8 x i32> %341, i32 %88, i64 1, !dbg !33
  %343 = insertelement <8 x i32> %342, i32 %87, i64 2, !dbg !33
  %344 = insertelement <8 x i32> %343, i32 %86, i64 3, !dbg !33
  %345 = insertelement <8 x i32> %344, i32 %85, i64 4, !dbg !33
  %346 = insertelement <8 x i32> %345, i32 %84, i64 5, !dbg !33
  %347 = insertelement <8 x i32> %346, i32 %83, i64 6, !dbg !33
  %348 = insertelement <8 x i32> %347, i32 %82, i64 7, !dbg !33
  %349 = bitcast <8 x i32> %348 to <8 x float>, !dbg !33
  %350 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !61
  %351 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i43) #3, !dbg !61
  %352 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i48) #3, !dbg !61
  %353 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i53) #3, !dbg !61
  %354 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i58) #3, !dbg !61
  %355 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i63) #3, !dbg !61
  %356 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i68) #3, !dbg !61
  %357 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i73) #3, !dbg !61
  %358 = insertelement <8 x i32> poison, i32 %279, i64 0, !dbg !62
  %359 = insertelement <8 x i32> %358, i32 %294, i64 1, !dbg !62
  %360 = insertelement <8 x i32> %359, i32 %300, i64 2, !dbg !62
  %361 = insertelement <8 x i32> %360, i32 %306, i64 3, !dbg !62
  %362 = insertelement <8 x i32> %361, i32 %312, i64 4, !dbg !62
  %363 = insertelement <8 x i32> %362, i32 %318, i64 5, !dbg !62
  %364 = insertelement <8 x i32> %363, i32 %324, i64 6, !dbg !62
  %365 = insertelement <8 x i32> %364, i32 %330, i64 7, !dbg !62
  %366 = insertelement <8 x i32> poison, i32 %280, i64 0, !dbg !62
  %367 = insertelement <8 x i32> %366, i32 %295, i64 1, !dbg !62
  %368 = insertelement <8 x i32> %367, i32 %301, i64 2, !dbg !62
  %369 = insertelement <8 x i32> %368, i32 %307, i64 3, !dbg !62
  %370 = insertelement <8 x i32> %369, i32 %313, i64 4, !dbg !62
  %371 = insertelement <8 x i32> %370, i32 %319, i64 5, !dbg !62
  %372 = insertelement <8 x i32> %371, i32 %325, i64 6, !dbg !62
  %373 = insertelement <8 x i32> %372, i32 %331, i64 7, !dbg !62
  %374 = select <8 x i1> %270, <8 x i32> %365, <8 x i32> %373, !dbg !62
  %375 = insertelement <8 x i32> poison, i32 %278, i64 0, !dbg !63
  %376 = insertelement <8 x i32> %375, i32 %293, i64 1, !dbg !63
  %377 = insertelement <8 x i32> %376, i32 %299, i64 2, !dbg !63
  %378 = insertelement <8 x i32> %377, i32 %305, i64 3, !dbg !63
  %379 = insertelement <8 x i32> %378, i32 %311, i64 4, !dbg !63
  %380 = insertelement <8 x i32> %379, i32 %317, i64 5, !dbg !63
  %381 = insertelement <8 x i32> %380, i32 %323, i64 6, !dbg !63
  %382 = insertelement <8 x i32> %381, i32 %329, i64 7, !dbg !63
  %383 = select <8 x i1> %271, <8 x i32> %382, <8 x i32> %374, !dbg !63
  %384 = insertelement <8 x i32> poison, i32 %277, i64 0, !dbg !64
  %385 = insertelement <8 x i32> %384, i32 %292, i64 1, !dbg !64
  %386 = insertelement <8 x i32> %385, i32 %298, i64 2, !dbg !64
  %387 = insertelement <8 x i32> %386, i32 %304, i64 3, !dbg !64
  %388 = insertelement <8 x i32> %387, i32 %310, i64 4, !dbg !64
  %389 = insertelement <8 x i32> %388, i32 %316, i64 5, !dbg !64
  %390 = insertelement <8 x i32> %389, i32 %322, i64 6, !dbg !64
  %391 = insertelement <8 x i32> %390, i32 %328, i64 7, !dbg !64
  %392 = select <8 x i1> %272, <8 x i32> %391, <8 x i32> %383, !dbg !64
  %393 = insertelement <8 x i32> poison, i32 %276, i64 0, !dbg !65
  %394 = insertelement <8 x i32> %393, i32 %291, i64 1, !dbg !65
  %395 = insertelement <8 x i32> %394, i32 %297, i64 2, !dbg !65
  %396 = insertelement <8 x i32> %395, i32 %303, i64 3, !dbg !65
  %397 = insertelement <8 x i32> %396, i32 %309, i64 4, !dbg !65
  %398 = insertelement <8 x i32> %397, i32 %315, i64 5, !dbg !65
  %399 = insertelement <8 x i32> %398, i32 %321, i64 6, !dbg !65
  %400 = insertelement <8 x i32> %399, i32 %327, i64 7, !dbg !65
  %401 = select <8 x i1> %273, <8 x i32> %400, <8 x i32> %392, !dbg !65
  %402 = insertelement <8 x i32> poison, i32 %275, i64 0, !dbg !66
  %403 = insertelement <8 x i32> %402, i32 %290, i64 1, !dbg !66
  %404 = insertelement <8 x i32> %403, i32 %296, i64 2, !dbg !66
  %405 = insertelement <8 x i32> %404, i32 %302, i64 3, !dbg !66
  %406 = insertelement <8 x i32> %405, i32 %308, i64 4, !dbg !66
  %407 = insertelement <8 x i32> %406, i32 %314, i64 5, !dbg !66
  %408 = insertelement <8 x i32> %407, i32 %320, i64 6, !dbg !66
  %409 = insertelement <8 x i32> %408, i32 %326, i64 7, !dbg !66
  %410 = select <8 x i1> %274, <8 x i32> %409, <8 x i32> %401, !dbg !66
  %411 = bitcast <8 x i32> %410 to <8 x float>, !dbg !66
  %412 = fsub <8 x float> %411, %289, !dbg !67
  %413 = insertelement <8 x float> poison, float %357, i64 0, !dbg !68
  %414 = insertelement <8 x float> %413, float %356, i64 1, !dbg !68
  %415 = insertelement <8 x float> %414, float %355, i64 2, !dbg !68
  %416 = insertelement <8 x float> %415, float %354, i64 3, !dbg !68
  %417 = insertelement <8 x float> %416, float %353, i64 4, !dbg !68
  %418 = insertelement <8 x float> %417, float %352, i64 5, !dbg !68
  %419 = insertelement <8 x float> %418, float %351, i64 6, !dbg !68
  %420 = insertelement <8 x float> %419, float %350, i64 7, !dbg !68
  %421 = fmul <8 x float> %412, %420, !dbg !68
  %422 = fmul <8 x float> %421, %349, !dbg !69
  %423 = fadd <8 x float> %422, %340, !dbg !70
  %424 = fcmp olt <8 x float> %423, zeroinitializer, !dbg !71
  %425 = extractelement <8 x i1> %424, i64 7, !dbg !75
  %426 = extractelement <8 x i1> %424, i64 6, !dbg !75
  %427 = extractelement <8 x i1> %424, i64 5, !dbg !75
  %428 = extractelement <8 x i1> %424, i64 4, !dbg !75
  %429 = extractelement <8 x i1> %424, i64 3, !dbg !75
  %430 = extractelement <8 x i1> %424, i64 2, !dbg !75
  %431 = extractelement <8 x i1> %424, i64 1, !dbg !75
  %432 = extractelement <8 x i1> %424, i64 0, !dbg !75
  %433 = sext i32 %19 to i64, !dbg !76
  %434 = getelementptr float, ptr addrspace(1) %10, i64 %433, !dbg !76
  %435 = sext i32 %20 to i64, !dbg !76
  %436 = getelementptr float, ptr addrspace(1) %10, i64 %435, !dbg !76
  %437 = extractelement <8 x i32> %410, i64 4, !dbg !77
  %438 = extractelement <8 x i32> %410, i64 5, !dbg !77
  %439 = extractelement <8 x i32> %410, i64 6, !dbg !77
  %440 = extractelement <8 x i32> %410, i64 7, !dbg !77
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %440, i32 %439, i32 %438, i32 %437, ptr addrspace(1) %434, i1 true) #3, !dbg !77
  %441 = extractelement <8 x i32> %410, i64 0, !dbg !77
  %442 = extractelement <8 x i32> %410, i64 1, !dbg !77
  %443 = extractelement <8 x i32> %410, i64 2, !dbg !77
  %444 = extractelement <8 x i32> %410, i64 3, !dbg !77
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %444, i32 %443, i32 %442, i32 %441, ptr addrspace(1) %436, i1 true) #3, !dbg !77
  %445 = getelementptr float, ptr addrspace(1) %11, i64 %433, !dbg !78
  %446 = getelementptr float, ptr addrspace(1) %11, i64 %435, !dbg !78
  %bc = bitcast <8 x float> %423 to <8 x i32>, !dbg !79
  %447 = extractelement <8 x i32> %bc, i64 7, !dbg !79
  %448 = select i1 %425, i32 0, i32 %447, !dbg !75
  %bc76 = bitcast <8 x float> %423 to <8 x i32>, !dbg !79
  %449 = extractelement <8 x i32> %bc76, i64 6, !dbg !79
  %450 = select i1 %426, i32 0, i32 %449, !dbg !75
  %bc77 = bitcast <8 x float> %423 to <8 x i32>, !dbg !79
  %451 = extractelement <8 x i32> %bc77, i64 5, !dbg !79
  %452 = select i1 %427, i32 0, i32 %451, !dbg !75
  %bc78 = bitcast <8 x float> %423 to <8 x i32>, !dbg !79
  %453 = extractelement <8 x i32> %bc78, i64 4, !dbg !79
  %454 = select i1 %428, i32 0, i32 %453, !dbg !75
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %448, i32 %450, i32 %452, i32 %454, ptr addrspace(1) %445, i1 true) #3, !dbg !79
  %bc79 = bitcast <8 x float> %423 to <8 x i32>, !dbg !79
  %455 = extractelement <8 x i32> %bc79, i64 3, !dbg !79
  %456 = select i1 %429, i32 0, i32 %455, !dbg !75
  %bc80 = bitcast <8 x float> %423 to <8 x i32>, !dbg !79
  %457 = extractelement <8 x i32> %bc80, i64 2, !dbg !79
  %458 = select i1 %430, i32 0, i32 %457, !dbg !75
  %bc81 = bitcast <8 x float> %423 to <8 x i32>, !dbg !79
  %459 = extractelement <8 x i32> %bc81, i64 1, !dbg !79
  %460 = select i1 %431, i32 0, i32 %459, !dbg !75
  %bc82 = bitcast <8 x float> %423 to <8 x i32>, !dbg !79
  %461 = extractelement <8 x i32> %bc82, i64 0, !dbg !79
  %462 = select i1 %432, i32 0, i32 %461, !dbg !75
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %456, i32 %458, i32 %460, i32 %462, ptr addrspace(1) %446, i1 true) #3, !dbg !79
  ret void, !dbg !80
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cgfbhchhknooxt4dvjxoqeegnv6eqyocay4y3pbquoakuhgwjela.py", directory: "inductor_cache/gf")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_16, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_16, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_16", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_16", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 19, scope: !7)
!16 = !DILocation(line: 37, column: 35, scope: !7)
!17 = !DILocation(line: 37, column: 50, scope: !7)
!18 = !DILocation(line: 37, column: 45, scope: !7)
!19 = !DILocation(line: 37, column: 30, scope: !7)
!20 = !DILocation(line: 42, column: 60, scope: !7)
!21 = !DILocation(line: 42, column: 40, scope: !7)
!22 = !DILocation(line: 42, column: 36, scope: !7)
!23 = !DILocation(line: 47, column: 36, scope: !7)
!24 = !DILocation(line: 52, column: 36, scope: !7)
!25 = !DILocation(line: 24, column: 21, scope: !7)
!26 = !DILocation(line: 24, column: 27, scope: !7)
!27 = !DILocation(line: 58, column: 20, scope: !7)
!28 = !DILocation(line: 28, column: 31, scope: !7)
!29 = !DILocation(line: 28, column: 36, scope: !7)
!30 = !DILocation(line: 29, column: 31, scope: !7)
!31 = !DILocation(line: 29, column: 36, scope: !7)
!32 = !DILocation(line: 30, column: 31, scope: !7)
!33 = !DILocation(line: 30, column: 36, scope: !7)
!34 = !DILocation(line: 31, column: 31, scope: !7)
!35 = !DILocation(line: 31, column: 36, scope: !7)
!36 = !DILocation(line: 36, column: 18, scope: !7)
!37 = !DILocation(line: 37, column: 55, scope: !7)
!38 = !DILocation(line: 41, column: 18, scope: !7)
!39 = !DILocation(line: 42, column: 55, scope: !7)
!40 = !DILocation(line: 42, column: 31, scope: !7)
!41 = !DILocation(line: 42, column: 65, scope: !7)
!42 = !DILocation(line: 46, column: 20, scope: !7)
!43 = !DILocation(line: 47, column: 55, scope: !7)
!44 = !DILocation(line: 47, column: 31, scope: !7)
!45 = !DILocation(line: 47, column: 65, scope: !7)
!46 = !DILocation(line: 51, column: 20, scope: !7)
!47 = !DILocation(line: 52, column: 55, scope: !7)
!48 = !DILocation(line: 52, column: 31, scope: !7)
!49 = !DILocation(line: 52, column: 65, scope: !7)
!50 = !DILocation(line: 56, column: 20, scope: !7)
!51 = !DILocation(line: 57, column: 36, scope: !7)
!52 = !DILocation(line: 57, column: 55, scope: !7)
!53 = !DILocation(line: 57, column: 31, scope: !7)
!54 = !DILocation(line: 57, column: 65, scope: !7)
!55 = !DILocation(line: 61, column: 36, scope: !7)
!56 = !DILocation(line: 61, column: 55, scope: !7)
!57 = !DILocation(line: 61, column: 31, scope: !7)
!58 = !DILocation(line: 61, column: 65, scope: !7)
!59 = !DILocation(line: 69, column: 20, scope: !7)
!60 = !DILocation(line: 70, column: 27, scope: !7)
!61 = !DILocation(line: 72, column: 20, scope: !7)
!62 = !DILocation(line: 62, column: 35, scope: !7)
!63 = !DILocation(line: 63, column: 35, scope: !7)
!64 = !DILocation(line: 64, column: 35, scope: !7)
!65 = !DILocation(line: 65, column: 34, scope: !7)
!66 = !DILocation(line: 66, column: 33, scope: !7)
!67 = !DILocation(line: 67, column: 20, scope: !7)
!68 = !DILocation(line: 75, column: 20, scope: !7)
!69 = !DILocation(line: 76, column: 20, scope: !7)
!70 = !DILocation(line: 77, column: 20, scope: !7)
!71 = !DILocation(line: 118, column: 15, scope: !72, inlinedAt: !74)
!72 = distinct !DILexicalBlockFile(scope: !7, file: !73, discriminator: 0)
!73 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!74 = !DILocation(line: 79, column: 42, scope: !7)
!75 = !DILocation(line: 121, column: 29, scope: !72, inlinedAt: !74)
!76 = !DILocation(line: 80, column: 25, scope: !7)
!77 = !DILocation(line: 80, column: 37, scope: !7)
!78 = !DILocation(line: 81, column: 25, scope: !7)
!79 = !DILocation(line: 81, column: 37, scope: !7)
!80 = !DILocation(line: 81, column: 4, scope: !7)
