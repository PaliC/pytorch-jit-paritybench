; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_13(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %12 = shl i32 %11, 9, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = shl i32 %13, 2, !dbg !12
  %15 = and i32 %14, 508, !dbg !12
  %16 = or disjoint i32 %12, %15, !dbg !13
  %.frozen = freeze i32 %16, !dbg !14
  %17 = sdiv i32 %.frozen, 64, !dbg !14
  %18 = srem i32 %17, 192, !dbg !15
  %19 = mul i32 %17, 64, !dbg !16
  %.decomposed = sub i32 %.frozen, %19, !dbg !16
  %.frozen26 = freeze i32 %16, !dbg !17
  %20 = sdiv i32 %.frozen26, 12288, !dbg !17
  %21 = sext i32 %18 to i64, !dbg !18
  %22 = getelementptr float, ptr addrspace(1) %3, i64 %21, !dbg !18
  %23 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %22, i1 true) #3, !dbg !19
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %22, i1 true) #3, !dbg !19
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %22, i1 true) #3, !dbg !19
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %22, i1 true) #3, !dbg !19
  %27 = getelementptr float, ptr addrspace(1) %4, i64 %21, !dbg !20
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 true) #3, !dbg !21
  %29 = bitcast i32 %28 to float, !dbg !21
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 true) #3, !dbg !21
  %31 = bitcast i32 %30 to float, !dbg !21
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 true) #3, !dbg !21
  %33 = bitcast i32 %32 to float, !dbg !21
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 true) #3, !dbg !21
  %35 = bitcast i32 %34 to float, !dbg !21
  %36 = getelementptr float, ptr addrspace(1) %5, i64 %21, !dbg !22
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #3, !dbg !23
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #3, !dbg !23
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #3, !dbg !23
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #3, !dbg !23
  %41 = getelementptr float, ptr addrspace(1) %6, i64 %21, !dbg !24
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 true) #3, !dbg !25
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 true) #3, !dbg !25
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 true) #3, !dbg !25
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 true) #3, !dbg !25
  %46 = icmp slt i32 %18, 128, !dbg !26
  %47 = mul i32 %20, 12288, !dbg !27
  %srem.decomposed = sub i32 %.frozen26, %47, !dbg !27
  %48 = shl nsw i32 %20, 13, !dbg !28
  %49 = add nsw i32 %48, %srem.decomposed, !dbg !29
  %50 = sext i32 %49 to i64, !dbg !30
  %51 = getelementptr float, ptr addrspace(1) %0, i64 %50, !dbg !30
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %51, i1 %46, i32 0, i1 %46, i32 0, i1 %46, i32 0, i1 %46, i32 0, i1 %46) #3, !dbg !31
  %53 = and i32 %18, -32, !dbg !32
  %54 = icmp eq i32 %53, 128, !dbg !32
  %55 = shl nsw i32 %18, 6, !dbg !33
  %56 = shl nsw i32 %20, 11, !dbg !34
  %57 = add nsw i32 %56, %.decomposed, !dbg !33
  %58 = add nsw i32 %57, -8192, !dbg !35
  %59 = add nsw i32 %58, %55, !dbg !36
  %60 = sext i32 %59 to i64, !dbg !37
  %61 = getelementptr float, ptr addrspace(1) %1, i64 %60, !dbg !37
  %62 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %61, i1 %54, i32 0, i1 %54, i32 0, i1 %54, i32 0, i1 %54, i32 0, i1 %54) #3, !dbg !38
  %63 = icmp sgt i32 %18, 159, !dbg !39
  %64 = add nsw i32 %57, -10240, !dbg !40
  %65 = add nsw i32 %64, %55, !dbg !41
  %66 = sext i32 %65 to i64, !dbg !42
  %67 = getelementptr float, ptr addrspace(1) %2, i64 %66, !dbg !42
  %68 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %67, i1 %63, i32 0, i1 %63, i32 0, i1 %63, i32 0, i1 %63, i32 0, i1 %63) #3, !dbg !43
  %69 = fadd float %29, 0x3EE4F8B580000000, !dbg !44
  %70 = fadd float %31, 0x3EE4F8B580000000, !dbg !44
  %71 = fadd float %33, 0x3EE4F8B580000000, !dbg !44
  %72 = fadd float %35, 0x3EE4F8B580000000, !dbg !44
  %73 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !45
  %.not.i = icmp eq i32 %73, 0, !dbg !45
  %74 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !45
  %.not1.i = icmp eq i32 %74, 0, !dbg !45
  br i1 %.not.i, label %80, label %75, !dbg !45

75:                                               ; preds = %10
  br i1 %.not1.i, label %78, label %76, !dbg !45

76:                                               ; preds = %75
  %77 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %69) #3, !dbg !45
  br label %__nv_sqrtf.exit, !dbg !45

78:                                               ; preds = %75
  %79 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %69) #3, !dbg !45
  br label %__nv_sqrtf.exit, !dbg !45

80:                                               ; preds = %10
  br i1 %.not1.i, label %83, label %81, !dbg !45

81:                                               ; preds = %80
  %82 = tail call float @llvm.nvvm.sqrt.rn.f(float %69) #3, !dbg !45
  br label %__nv_sqrtf.exit, !dbg !45

83:                                               ; preds = %80
  %84 = tail call float @llvm.nvvm.sqrt.approx.f(float %69) #3, !dbg !45
  br label %__nv_sqrtf.exit, !dbg !45

__nv_sqrtf.exit:                                  ; preds = %76, %78, %81, %83
  %.0.i = phi float [ %77, %76 ], [ %79, %78 ], [ %82, %81 ], [ %84, %83 ], !dbg !45
  %85 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !45
  %.not.i8 = icmp eq i32 %85, 0, !dbg !45
  %86 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !45
  %.not1.i11 = icmp eq i32 %86, 0, !dbg !45
  br i1 %.not.i8, label %92, label %87, !dbg !45

87:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i11, label %90, label %88, !dbg !45

88:                                               ; preds = %87
  %89 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %70) #3, !dbg !45
  br label %__nv_sqrtf.exit12, !dbg !45

90:                                               ; preds = %87
  %91 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %70) #3, !dbg !45
  br label %__nv_sqrtf.exit12, !dbg !45

92:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i11, label %95, label %93, !dbg !45

93:                                               ; preds = %92
  %94 = tail call float @llvm.nvvm.sqrt.rn.f(float %70) #3, !dbg !45
  br label %__nv_sqrtf.exit12, !dbg !45

95:                                               ; preds = %92
  %96 = tail call float @llvm.nvvm.sqrt.approx.f(float %70) #3, !dbg !45
  br label %__nv_sqrtf.exit12, !dbg !45

__nv_sqrtf.exit12:                                ; preds = %88, %90, %93, %95
  %.0.i10 = phi float [ %89, %88 ], [ %91, %90 ], [ %94, %93 ], [ %96, %95 ], !dbg !45
  %97 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !45
  %.not.i13 = icmp eq i32 %97, 0, !dbg !45
  %98 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !45
  %.not1.i16 = icmp eq i32 %98, 0, !dbg !45
  br i1 %.not.i13, label %104, label %99, !dbg !45

99:                                               ; preds = %__nv_sqrtf.exit12
  br i1 %.not1.i16, label %102, label %100, !dbg !45

100:                                              ; preds = %99
  %101 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %71) #3, !dbg !45
  br label %__nv_sqrtf.exit17, !dbg !45

102:                                              ; preds = %99
  %103 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %71) #3, !dbg !45
  br label %__nv_sqrtf.exit17, !dbg !45

104:                                              ; preds = %__nv_sqrtf.exit12
  br i1 %.not1.i16, label %107, label %105, !dbg !45

105:                                              ; preds = %104
  %106 = tail call float @llvm.nvvm.sqrt.rn.f(float %71) #3, !dbg !45
  br label %__nv_sqrtf.exit17, !dbg !45

107:                                              ; preds = %104
  %108 = tail call float @llvm.nvvm.sqrt.approx.f(float %71) #3, !dbg !45
  br label %__nv_sqrtf.exit17, !dbg !45

__nv_sqrtf.exit17:                                ; preds = %100, %102, %105, %107
  %.0.i15 = phi float [ %101, %100 ], [ %103, %102 ], [ %106, %105 ], [ %108, %107 ], !dbg !45
  %109 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !45
  %.not.i18 = icmp eq i32 %109, 0, !dbg !45
  %110 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !45
  %.not1.i21 = icmp eq i32 %110, 0, !dbg !45
  br i1 %.not.i18, label %116, label %111, !dbg !45

111:                                              ; preds = %__nv_sqrtf.exit17
  br i1 %.not1.i21, label %114, label %112, !dbg !45

112:                                              ; preds = %111
  %113 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %72) #3, !dbg !45
  br label %__nv_sqrtf.exit22, !dbg !45

114:                                              ; preds = %111
  %115 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %72) #3, !dbg !45
  br label %__nv_sqrtf.exit22, !dbg !45

116:                                              ; preds = %__nv_sqrtf.exit17
  br i1 %.not1.i21, label %119, label %117, !dbg !45

117:                                              ; preds = %116
  %118 = tail call float @llvm.nvvm.sqrt.rn.f(float %72) #3, !dbg !45
  br label %__nv_sqrtf.exit22, !dbg !45

119:                                              ; preds = %116
  %120 = tail call float @llvm.nvvm.sqrt.approx.f(float %72) #3, !dbg !45
  br label %__nv_sqrtf.exit22, !dbg !45

__nv_sqrtf.exit22:                                ; preds = %112, %114, %117, %119
  %.0.i20 = phi float [ %113, %112 ], [ %115, %114 ], [ %118, %117 ], [ %120, %119 ], !dbg !45
  %121 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !31
  %122 = extractvalue { i32, i32, i32, i32 } %62, 3, !dbg !38
  %123 = extractvalue { i32, i32, i32, i32 } %68, 3, !dbg !43
  %124 = insertelement <4 x i32> poison, i32 %26, i64 0, !dbg !19
  %125 = insertelement <4 x i32> %124, i32 %25, i64 1, !dbg !19
  %126 = insertelement <4 x i32> %125, i32 %24, i64 2, !dbg !19
  %127 = insertelement <4 x i32> %126, i32 %23, i64 3, !dbg !19
  %128 = bitcast <4 x i32> %127 to <4 x float>, !dbg !19
  %129 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !31
  %130 = extractvalue { i32, i32, i32, i32 } %62, 2, !dbg !38
  %131 = extractvalue { i32, i32, i32, i32 } %68, 2, !dbg !43
  %132 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !31
  %133 = extractvalue { i32, i32, i32, i32 } %62, 1, !dbg !38
  %134 = extractvalue { i32, i32, i32, i32 } %68, 1, !dbg !43
  %135 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !31
  %136 = extractvalue { i32, i32, i32, i32 } %62, 0, !dbg !38
  %137 = extractvalue { i32, i32, i32, i32 } %68, 0, !dbg !43
  %138 = insertelement <4 x i32> poison, i32 %45, i64 0, !dbg !25
  %139 = insertelement <4 x i32> %138, i32 %44, i64 1, !dbg !25
  %140 = insertelement <4 x i32> %139, i32 %43, i64 2, !dbg !25
  %141 = insertelement <4 x i32> %140, i32 %42, i64 3, !dbg !25
  %142 = bitcast <4 x i32> %141 to <4 x float>, !dbg !25
  %143 = insertelement <4 x i32> poison, i32 %40, i64 0, !dbg !23
  %144 = insertelement <4 x i32> %143, i32 %39, i64 1, !dbg !23
  %145 = insertelement <4 x i32> %144, i32 %38, i64 2, !dbg !23
  %146 = insertelement <4 x i32> %145, i32 %37, i64 3, !dbg !23
  %147 = bitcast <4 x i32> %146 to <4 x float>, !dbg !23
  %148 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !46
  %149 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i10) #3, !dbg !46
  %150 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i15) #3, !dbg !46
  %151 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i20) #3, !dbg !46
  %152 = insertelement <4 x i1> poison, i1 %54, i64 0, !dbg !47
  %153 = shufflevector <4 x i1> %152, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !47
  %154 = insertelement <4 x i32> poison, i32 %122, i64 0, !dbg !47
  %155 = insertelement <4 x i32> %154, i32 %130, i64 1, !dbg !47
  %156 = insertelement <4 x i32> %155, i32 %133, i64 2, !dbg !47
  %157 = insertelement <4 x i32> %156, i32 %136, i64 3, !dbg !47
  %158 = insertelement <4 x i32> poison, i32 %123, i64 0, !dbg !47
  %159 = insertelement <4 x i32> %158, i32 %131, i64 1, !dbg !47
  %160 = insertelement <4 x i32> %159, i32 %134, i64 2, !dbg !47
  %161 = insertelement <4 x i32> %160, i32 %137, i64 3, !dbg !47
  %162 = select <4 x i1> %153, <4 x i32> %157, <4 x i32> %161, !dbg !47
  %163 = insertelement <4 x i1> poison, i1 %46, i64 0, !dbg !48
  %164 = shufflevector <4 x i1> %163, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !48
  %165 = insertelement <4 x i32> poison, i32 %121, i64 0, !dbg !48
  %166 = insertelement <4 x i32> %165, i32 %129, i64 1, !dbg !48
  %167 = insertelement <4 x i32> %166, i32 %132, i64 2, !dbg !48
  %168 = insertelement <4 x i32> %167, i32 %135, i64 3, !dbg !48
  %169 = select <4 x i1> %164, <4 x i32> %168, <4 x i32> %162, !dbg !48
  %170 = bitcast <4 x i32> %169 to <4 x float>, !dbg !48
  %171 = fsub <4 x float> %170, %128, !dbg !49
  %172 = insertelement <4 x float> poison, float %151, i64 0, !dbg !50
  %173 = insertelement <4 x float> %172, float %150, i64 1, !dbg !50
  %174 = insertelement <4 x float> %173, float %149, i64 2, !dbg !50
  %175 = insertelement <4 x float> %174, float %148, i64 3, !dbg !50
  %176 = fmul <4 x float> %171, %175, !dbg !50
  %177 = fmul <4 x float> %176, %147, !dbg !51
  %178 = fadd <4 x float> %177, %142, !dbg !52
  %179 = fcmp olt <4 x float> %178, zeroinitializer, !dbg !53
  %180 = extractelement <4 x i1> %179, i64 3, !dbg !57
  %181 = extractelement <4 x i1> %179, i64 2, !dbg !57
  %182 = extractelement <4 x i1> %179, i64 1, !dbg !57
  %183 = extractelement <4 x i1> %179, i64 0, !dbg !57
  %184 = sext i32 %16 to i64, !dbg !58
  %185 = getelementptr float, ptr addrspace(1) %7, i64 %184, !dbg !58
  %186 = extractelement <4 x i32> %169, i64 0, !dbg !59
  %187 = extractelement <4 x i32> %169, i64 1, !dbg !59
  %188 = extractelement <4 x i32> %169, i64 2, !dbg !59
  %189 = extractelement <4 x i32> %169, i64 3, !dbg !59
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %189, i32 %188, i32 %187, i32 %186, ptr addrspace(1) %185, i1 true) #3, !dbg !59
  %190 = getelementptr float, ptr addrspace(1) %8, i64 %184, !dbg !60
  %bc = bitcast <4 x float> %178 to <4 x i32>, !dbg !61
  %191 = extractelement <4 x i32> %bc, i64 3, !dbg !61
  %192 = select i1 %180, i32 0, i32 %191, !dbg !57
  %bc23 = bitcast <4 x float> %178 to <4 x i32>, !dbg !61
  %193 = extractelement <4 x i32> %bc23, i64 2, !dbg !61
  %194 = select i1 %181, i32 0, i32 %193, !dbg !57
  %bc24 = bitcast <4 x float> %178 to <4 x i32>, !dbg !61
  %195 = extractelement <4 x i32> %bc24, i64 1, !dbg !61
  %196 = select i1 %182, i32 0, i32 %195, !dbg !57
  %bc25 = bitcast <4 x float> %178 to <4 x i32>, !dbg !61
  %197 = extractelement <4 x i32> %bc25, i64 0, !dbg !61
  %198 = select i1 %183, i32 0, i32 %197, !dbg !57
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %192, i32 %194, i32 %196, i32 %198, ptr addrspace(1) %190, i1 true) #3, !dbg !61
  ret void, !dbg !62
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c4zincntexjrqrujmxwrd6zqlldoo4gbg3hwluopjg6xtn3ohblu.py", directory: "inductor_cache/4z")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_13, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_13, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_13", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_13", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 27, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 31, scope: !7)
!19 = !DILocation(line: 28, column: 36, scope: !7)
!20 = !DILocation(line: 29, column: 31, scope: !7)
!21 = !DILocation(line: 29, column: 36, scope: !7)
!22 = !DILocation(line: 30, column: 31, scope: !7)
!23 = !DILocation(line: 30, column: 36, scope: !7)
!24 = !DILocation(line: 31, column: 31, scope: !7)
!25 = !DILocation(line: 31, column: 36, scope: !7)
!26 = !DILocation(line: 36, column: 18, scope: !7)
!27 = !DILocation(line: 37, column: 35, scope: !7)
!28 = !DILocation(line: 37, column: 50, scope: !7)
!29 = !DILocation(line: 37, column: 45, scope: !7)
!30 = !DILocation(line: 37, column: 30, scope: !7)
!31 = !DILocation(line: 37, column: 55, scope: !7)
!32 = !DILocation(line: 41, column: 18, scope: !7)
!33 = !DILocation(line: 42, column: 40, scope: !7)
!34 = !DILocation(line: 42, column: 60, scope: !7)
!35 = !DILocation(line: 42, column: 36, scope: !7)
!36 = !DILocation(line: 42, column: 55, scope: !7)
!37 = !DILocation(line: 42, column: 31, scope: !7)
!38 = !DILocation(line: 42, column: 65, scope: !7)
!39 = !DILocation(line: 43, column: 20, scope: !7)
!40 = !DILocation(line: 46, column: 36, scope: !7)
!41 = !DILocation(line: 46, column: 55, scope: !7)
!42 = !DILocation(line: 46, column: 31, scope: !7)
!43 = !DILocation(line: 46, column: 65, scope: !7)
!44 = !DILocation(line: 51, column: 20, scope: !7)
!45 = !DILocation(line: 52, column: 27, scope: !7)
!46 = !DILocation(line: 54, column: 20, scope: !7)
!47 = !DILocation(line: 47, column: 34, scope: !7)
!48 = !DILocation(line: 48, column: 33, scope: !7)
!49 = !DILocation(line: 49, column: 20, scope: !7)
!50 = !DILocation(line: 57, column: 20, scope: !7)
!51 = !DILocation(line: 58, column: 20, scope: !7)
!52 = !DILocation(line: 59, column: 20, scope: !7)
!53 = !DILocation(line: 118, column: 15, scope: !54, inlinedAt: !56)
!54 = distinct !DILexicalBlockFile(scope: !7, file: !55, discriminator: 0)
!55 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!56 = !DILocation(line: 61, column: 42, scope: !7)
!57 = !DILocation(line: 121, column: 29, scope: !54, inlinedAt: !56)
!58 = !DILocation(line: 62, column: 25, scope: !7)
!59 = !DILocation(line: 62, column: 37, scope: !7)
!60 = !DILocation(line: 63, column: 25, scope: !7)
!61 = !DILocation(line: 63, column: 37, scope: !7)
!62 = !DILocation(line: 63, column: 4, scope: !7)
