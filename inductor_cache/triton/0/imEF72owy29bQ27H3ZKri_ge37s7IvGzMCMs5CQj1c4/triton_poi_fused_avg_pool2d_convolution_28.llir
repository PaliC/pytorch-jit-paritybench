; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_avg_pool2d_convolution_28(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %9 = shl i32 %8, 6, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = lshr i32 %10, 6, !dbg !12
  %12 = and i32 %11, 3, !dbg !12
  %13 = shl i32 %10, 2, !dbg !12
  %14 = and i32 %13, 60, !dbg !12
  %15 = or disjoint i32 %9, %12, !dbg !13
  %16 = or disjoint i32 %9, %14, !dbg !13
  %17 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %18 = shl i32 %17, 6, !dbg !15
  %19 = and i32 %10, 63, !dbg !16
  %20 = lshr i32 %10, 4, !dbg !16
  %21 = and i32 %20, 15, !dbg !16
  %22 = or disjoint i32 %18, %19, !dbg !17
  %23 = or disjoint i32 %18, %21, !dbg !17
  %24 = or disjoint i32 %23, 16, !dbg !17
  %25 = or disjoint i32 %23, 32, !dbg !17
  %26 = or disjoint i32 %23, 48, !dbg !17
  %27 = icmp slt i32 %22, 289, !dbg !18
  %28 = icmp slt i32 %23, 289, !dbg !18
  %29 = icmp slt i32 %24, 289, !dbg !18
  %30 = icmp slt i32 %25, 289, !dbg !18
  %31 = icmp slt i32 %26, 289, !dbg !18
  %.frozen = freeze i32 %16, !dbg !19
  %32 = sdiv i32 %.frozen, 768, !dbg !19
  %33 = mul i32 %32, 768, !dbg !20
  %.decomposed = sub i32 %.frozen, %33, !dbg !20
  %.frozen72 = freeze i32 %22, !dbg !21
  %34 = sdiv i32 %.frozen72, 17, !dbg !21
  %35 = mul i32 %34, 17, !dbg !22
  %.decomposed73 = sub i32 %.frozen72, %35, !dbg !22
  %36 = mul i32 %15, 289, !dbg !23
  %37 = add i32 %36, 1156, !dbg !23
  %38 = add i32 %36, 2312, !dbg !23
  %39 = add i32 %36, 3468, !dbg !23
  %40 = add i32 %36, 4624, !dbg !23
  %41 = add i32 %36, 5780, !dbg !23
  %42 = add i32 %36, 6936, !dbg !23
  %43 = add i32 %36, 8092, !dbg !23
  %44 = add i32 %36, 9248, !dbg !23
  %45 = add i32 %36, 10404, !dbg !23
  %46 = add i32 %36, 11560, !dbg !23
  %47 = add i32 %36, 12716, !dbg !23
  %48 = add i32 %36, 13872, !dbg !23
  %49 = add i32 %36, 15028, !dbg !23
  %50 = add i32 %36, 16184, !dbg !23
  %51 = add i32 %36, 17340, !dbg !23
  %52 = add i32 %22, %36, !dbg !24
  %53 = add i32 %22, %37, !dbg !24
  %54 = add i32 %22, %38, !dbg !24
  %55 = add i32 %22, %39, !dbg !24
  %56 = add i32 %22, %40, !dbg !24
  %57 = add i32 %22, %41, !dbg !24
  %58 = add i32 %22, %42, !dbg !24
  %59 = add i32 %22, %43, !dbg !24
  %60 = add i32 %22, %44, !dbg !24
  %61 = add i32 %22, %45, !dbg !24
  %62 = add i32 %22, %46, !dbg !24
  %63 = add i32 %22, %47, !dbg !24
  %64 = add i32 %22, %48, !dbg !24
  %65 = add i32 %22, %49, !dbg !24
  %66 = add i32 %22, %50, !dbg !24
  %67 = add i32 %22, %51, !dbg !24
  %68 = sext i32 %52 to i64, !dbg !25
  %69 = getelementptr float, ptr addrspace(1) %0, i64 %68, !dbg !25
  %70 = sext i32 %53 to i64, !dbg !25
  %71 = getelementptr float, ptr addrspace(1) %0, i64 %70, !dbg !25
  %72 = sext i32 %54 to i64, !dbg !25
  %73 = getelementptr float, ptr addrspace(1) %0, i64 %72, !dbg !25
  %74 = sext i32 %55 to i64, !dbg !25
  %75 = getelementptr float, ptr addrspace(1) %0, i64 %74, !dbg !25
  %76 = sext i32 %56 to i64, !dbg !25
  %77 = getelementptr float, ptr addrspace(1) %0, i64 %76, !dbg !25
  %78 = sext i32 %57 to i64, !dbg !25
  %79 = getelementptr float, ptr addrspace(1) %0, i64 %78, !dbg !25
  %80 = sext i32 %58 to i64, !dbg !25
  %81 = getelementptr float, ptr addrspace(1) %0, i64 %80, !dbg !25
  %82 = sext i32 %59 to i64, !dbg !25
  %83 = getelementptr float, ptr addrspace(1) %0, i64 %82, !dbg !25
  %84 = sext i32 %60 to i64, !dbg !25
  %85 = getelementptr float, ptr addrspace(1) %0, i64 %84, !dbg !25
  %86 = sext i32 %61 to i64, !dbg !25
  %87 = getelementptr float, ptr addrspace(1) %0, i64 %86, !dbg !25
  %88 = sext i32 %62 to i64, !dbg !25
  %89 = getelementptr float, ptr addrspace(1) %0, i64 %88, !dbg !25
  %90 = sext i32 %63 to i64, !dbg !25
  %91 = getelementptr float, ptr addrspace(1) %0, i64 %90, !dbg !25
  %92 = sext i32 %64 to i64, !dbg !25
  %93 = getelementptr float, ptr addrspace(1) %0, i64 %92, !dbg !25
  %94 = sext i32 %65 to i64, !dbg !25
  %95 = getelementptr float, ptr addrspace(1) %0, i64 %94, !dbg !25
  %96 = sext i32 %66 to i64, !dbg !25
  %97 = getelementptr float, ptr addrspace(1) %0, i64 %96, !dbg !25
  %98 = sext i32 %67 to i64, !dbg !25
  %99 = getelementptr float, ptr addrspace(1) %0, i64 %98, !dbg !25
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 %27) #2, !dbg !26
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %71, i1 %27) #2, !dbg !26
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 %27) #2, !dbg !26
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 %27) #2, !dbg !26
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 %27) #2, !dbg !26
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %79, i1 %27) #2, !dbg !26
  %106 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 %27) #2, !dbg !26
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %83, i1 %27) #2, !dbg !26
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 %27) #2, !dbg !26
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %87, i1 %27) #2, !dbg !26
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %89, i1 %27) #2, !dbg !26
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %91, i1 %27) #2, !dbg !26
  %112 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 %27) #2, !dbg !26
  %113 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %95, i1 %27) #2, !dbg !26
  %114 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %97, i1 %27) #2, !dbg !26
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %99, i1 %27) #2, !dbg !26
  %116 = icmp sgt i32 %.decomposed73, 0, !dbg !27
  %117 = add i32 %22, -18, !dbg !28
  %118 = add i32 %117, %36, !dbg !29
  %119 = add i32 %117, %37, !dbg !29
  %120 = add i32 %117, %38, !dbg !29
  %121 = add i32 %117, %39, !dbg !29
  %122 = add i32 %117, %40, !dbg !29
  %123 = add i32 %117, %41, !dbg !29
  %124 = add i32 %117, %42, !dbg !29
  %125 = add i32 %117, %43, !dbg !29
  %126 = add i32 %117, %44, !dbg !29
  %127 = add i32 %117, %45, !dbg !29
  %128 = add i32 %117, %46, !dbg !29
  %129 = add i32 %117, %47, !dbg !29
  %130 = add i32 %117, %48, !dbg !29
  %131 = add i32 %117, %49, !dbg !29
  %132 = add i32 %117, %50, !dbg !29
  %133 = add i32 %117, %51, !dbg !29
  %134 = sext i32 %118 to i64, !dbg !30
  %135 = getelementptr float, ptr addrspace(1) %0, i64 %134, !dbg !30
  %136 = sext i32 %119 to i64, !dbg !30
  %137 = getelementptr float, ptr addrspace(1) %0, i64 %136, !dbg !30
  %138 = sext i32 %120 to i64, !dbg !30
  %139 = getelementptr float, ptr addrspace(1) %0, i64 %138, !dbg !30
  %140 = sext i32 %121 to i64, !dbg !30
  %141 = getelementptr float, ptr addrspace(1) %0, i64 %140, !dbg !30
  %142 = sext i32 %122 to i64, !dbg !30
  %143 = getelementptr float, ptr addrspace(1) %0, i64 %142, !dbg !30
  %144 = sext i32 %123 to i64, !dbg !30
  %145 = getelementptr float, ptr addrspace(1) %0, i64 %144, !dbg !30
  %146 = sext i32 %124 to i64, !dbg !30
  %147 = getelementptr float, ptr addrspace(1) %0, i64 %146, !dbg !30
  %148 = sext i32 %125 to i64, !dbg !30
  %149 = getelementptr float, ptr addrspace(1) %0, i64 %148, !dbg !30
  %150 = sext i32 %126 to i64, !dbg !30
  %151 = getelementptr float, ptr addrspace(1) %0, i64 %150, !dbg !30
  %152 = sext i32 %127 to i64, !dbg !30
  %153 = getelementptr float, ptr addrspace(1) %0, i64 %152, !dbg !30
  %154 = sext i32 %128 to i64, !dbg !30
  %155 = getelementptr float, ptr addrspace(1) %0, i64 %154, !dbg !30
  %156 = sext i32 %129 to i64, !dbg !30
  %157 = getelementptr float, ptr addrspace(1) %0, i64 %156, !dbg !30
  %158 = sext i32 %130 to i64, !dbg !30
  %159 = getelementptr float, ptr addrspace(1) %0, i64 %158, !dbg !30
  %160 = sext i32 %131 to i64, !dbg !30
  %161 = getelementptr float, ptr addrspace(1) %0, i64 %160, !dbg !30
  %162 = sext i32 %132 to i64, !dbg !30
  %163 = getelementptr float, ptr addrspace(1) %0, i64 %162, !dbg !30
  %164 = sext i32 %133 to i64, !dbg !30
  %165 = getelementptr float, ptr addrspace(1) %0, i64 %164, !dbg !30
  %166 = add i32 %22, -17, !dbg !31
  %167 = icmp ult i32 %166, 272, !dbg !31
  %168 = and i1 %167, %116, !dbg !31
  %169 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %135, i1 %168, i32 0, i1 %168) #2, !dbg !32
  %170 = bitcast i32 %169 to float, !dbg !32
  %171 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %137, i1 %168, i32 0, i1 %168) #2, !dbg !32
  %172 = bitcast i32 %171 to float, !dbg !32
  %173 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %139, i1 %168, i32 0, i1 %168) #2, !dbg !32
  %174 = bitcast i32 %173 to float, !dbg !32
  %175 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %141, i1 %168, i32 0, i1 %168) #2, !dbg !32
  %176 = bitcast i32 %175 to float, !dbg !32
  %177 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %143, i1 %168, i32 0, i1 %168) #2, !dbg !32
  %178 = bitcast i32 %177 to float, !dbg !32
  %179 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %145, i1 %168, i32 0, i1 %168) #2, !dbg !32
  %180 = bitcast i32 %179 to float, !dbg !32
  %181 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %147, i1 %168, i32 0, i1 %168) #2, !dbg !32
  %182 = bitcast i32 %181 to float, !dbg !32
  %183 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %149, i1 %168, i32 0, i1 %168) #2, !dbg !32
  %184 = bitcast i32 %183 to float, !dbg !32
  %185 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %151, i1 %168, i32 0, i1 %168) #2, !dbg !32
  %186 = bitcast i32 %185 to float, !dbg !32
  %187 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %153, i1 %168, i32 0, i1 %168) #2, !dbg !32
  %188 = bitcast i32 %187 to float, !dbg !32
  %189 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %155, i1 %168, i32 0, i1 %168) #2, !dbg !32
  %190 = bitcast i32 %189 to float, !dbg !32
  %191 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %157, i1 %168, i32 0, i1 %168) #2, !dbg !32
  %192 = bitcast i32 %191 to float, !dbg !32
  %193 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %159, i1 %168, i32 0, i1 %168) #2, !dbg !32
  %194 = bitcast i32 %193 to float, !dbg !32
  %195 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %161, i1 %168, i32 0, i1 %168) #2, !dbg !32
  %196 = bitcast i32 %195 to float, !dbg !32
  %197 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %163, i1 %168, i32 0, i1 %168) #2, !dbg !32
  %198 = bitcast i32 %197 to float, !dbg !32
  %199 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %165, i1 %168, i32 0, i1 %168) #2, !dbg !32
  %200 = bitcast i32 %199 to float, !dbg !32
  %201 = icmp sgt i32 %.decomposed73, -1, !dbg !33
  %202 = add i32 %166, %36, !dbg !34
  %203 = add i32 %166, %37, !dbg !34
  %204 = add i32 %166, %38, !dbg !34
  %205 = add i32 %166, %39, !dbg !34
  %206 = add i32 %166, %40, !dbg !34
  %207 = add i32 %166, %41, !dbg !34
  %208 = add i32 %166, %42, !dbg !34
  %209 = add i32 %166, %43, !dbg !34
  %210 = add i32 %166, %44, !dbg !34
  %211 = add i32 %166, %45, !dbg !34
  %212 = add i32 %166, %46, !dbg !34
  %213 = add i32 %166, %47, !dbg !34
  %214 = add i32 %166, %48, !dbg !34
  %215 = add i32 %166, %49, !dbg !34
  %216 = add i32 %166, %50, !dbg !34
  %217 = add i32 %166, %51, !dbg !34
  %218 = sext i32 %202 to i64, !dbg !35
  %219 = getelementptr float, ptr addrspace(1) %0, i64 %218, !dbg !35
  %220 = sext i32 %203 to i64, !dbg !35
  %221 = getelementptr float, ptr addrspace(1) %0, i64 %220, !dbg !35
  %222 = sext i32 %204 to i64, !dbg !35
  %223 = getelementptr float, ptr addrspace(1) %0, i64 %222, !dbg !35
  %224 = sext i32 %205 to i64, !dbg !35
  %225 = getelementptr float, ptr addrspace(1) %0, i64 %224, !dbg !35
  %226 = sext i32 %206 to i64, !dbg !35
  %227 = getelementptr float, ptr addrspace(1) %0, i64 %226, !dbg !35
  %228 = sext i32 %207 to i64, !dbg !35
  %229 = getelementptr float, ptr addrspace(1) %0, i64 %228, !dbg !35
  %230 = sext i32 %208 to i64, !dbg !35
  %231 = getelementptr float, ptr addrspace(1) %0, i64 %230, !dbg !35
  %232 = sext i32 %209 to i64, !dbg !35
  %233 = getelementptr float, ptr addrspace(1) %0, i64 %232, !dbg !35
  %234 = sext i32 %210 to i64, !dbg !35
  %235 = getelementptr float, ptr addrspace(1) %0, i64 %234, !dbg !35
  %236 = sext i32 %211 to i64, !dbg !35
  %237 = getelementptr float, ptr addrspace(1) %0, i64 %236, !dbg !35
  %238 = sext i32 %212 to i64, !dbg !35
  %239 = getelementptr float, ptr addrspace(1) %0, i64 %238, !dbg !35
  %240 = sext i32 %213 to i64, !dbg !35
  %241 = getelementptr float, ptr addrspace(1) %0, i64 %240, !dbg !35
  %242 = sext i32 %214 to i64, !dbg !35
  %243 = getelementptr float, ptr addrspace(1) %0, i64 %242, !dbg !35
  %244 = sext i32 %215 to i64, !dbg !35
  %245 = getelementptr float, ptr addrspace(1) %0, i64 %244, !dbg !35
  %246 = sext i32 %216 to i64, !dbg !35
  %247 = getelementptr float, ptr addrspace(1) %0, i64 %246, !dbg !35
  %248 = sext i32 %217 to i64, !dbg !35
  %249 = getelementptr float, ptr addrspace(1) %0, i64 %248, !dbg !35
  %250 = and i1 %167, %201, !dbg !36
  %251 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %219, i1 %250, i32 0, i1 %250) #2, !dbg !37
  %252 = bitcast i32 %251 to float, !dbg !37
  %253 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %221, i1 %250, i32 0, i1 %250) #2, !dbg !37
  %254 = bitcast i32 %253 to float, !dbg !37
  %255 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %223, i1 %250, i32 0, i1 %250) #2, !dbg !37
  %256 = bitcast i32 %255 to float, !dbg !37
  %257 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %225, i1 %250, i32 0, i1 %250) #2, !dbg !37
  %258 = bitcast i32 %257 to float, !dbg !37
  %259 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %227, i1 %250, i32 0, i1 %250) #2, !dbg !37
  %260 = bitcast i32 %259 to float, !dbg !37
  %261 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %229, i1 %250, i32 0, i1 %250) #2, !dbg !37
  %262 = bitcast i32 %261 to float, !dbg !37
  %263 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %231, i1 %250, i32 0, i1 %250) #2, !dbg !37
  %264 = bitcast i32 %263 to float, !dbg !37
  %265 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %233, i1 %250, i32 0, i1 %250) #2, !dbg !37
  %266 = bitcast i32 %265 to float, !dbg !37
  %267 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %235, i1 %250, i32 0, i1 %250) #2, !dbg !37
  %268 = bitcast i32 %267 to float, !dbg !37
  %269 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %237, i1 %250, i32 0, i1 %250) #2, !dbg !37
  %270 = bitcast i32 %269 to float, !dbg !37
  %271 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %239, i1 %250, i32 0, i1 %250) #2, !dbg !37
  %272 = bitcast i32 %271 to float, !dbg !37
  %273 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %241, i1 %250, i32 0, i1 %250) #2, !dbg !37
  %274 = bitcast i32 %273 to float, !dbg !37
  %275 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %243, i1 %250, i32 0, i1 %250) #2, !dbg !37
  %276 = bitcast i32 %275 to float, !dbg !37
  %277 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %245, i1 %250, i32 0, i1 %250) #2, !dbg !37
  %278 = bitcast i32 %277 to float, !dbg !37
  %279 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %247, i1 %250, i32 0, i1 %250) #2, !dbg !37
  %280 = bitcast i32 %279 to float, !dbg !37
  %281 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %249, i1 %250, i32 0, i1 %250) #2, !dbg !37
  %282 = bitcast i32 %281 to float, !dbg !37
  %283 = fadd float %170, %252, !dbg !38
  %284 = fadd float %172, %254, !dbg !38
  %285 = fadd float %174, %256, !dbg !38
  %286 = fadd float %176, %258, !dbg !38
  %287 = fadd float %178, %260, !dbg !38
  %288 = fadd float %180, %262, !dbg !38
  %289 = fadd float %182, %264, !dbg !38
  %290 = fadd float %184, %266, !dbg !38
  %291 = fadd float %186, %268, !dbg !38
  %292 = fadd float %188, %270, !dbg !38
  %293 = fadd float %190, %272, !dbg !38
  %294 = fadd float %192, %274, !dbg !38
  %295 = fadd float %194, %276, !dbg !38
  %296 = fadd float %196, %278, !dbg !38
  %297 = fadd float %198, %280, !dbg !38
  %298 = fadd float %200, %282, !dbg !38
  %299 = add nsw i32 %.decomposed73, 1, !dbg !39
  %300 = icmp ult i32 %299, 17, !dbg !39
  %301 = add i32 %22, -16, !dbg !40
  %302 = add i32 %301, %36, !dbg !41
  %303 = add i32 %301, %37, !dbg !41
  %304 = add i32 %301, %38, !dbg !41
  %305 = add i32 %301, %39, !dbg !41
  %306 = add i32 %301, %40, !dbg !41
  %307 = add i32 %301, %41, !dbg !41
  %308 = add i32 %301, %42, !dbg !41
  %309 = add i32 %301, %43, !dbg !41
  %310 = add i32 %301, %44, !dbg !41
  %311 = add i32 %301, %45, !dbg !41
  %312 = add i32 %301, %46, !dbg !41
  %313 = add i32 %301, %47, !dbg !41
  %314 = add i32 %301, %48, !dbg !41
  %315 = add i32 %301, %49, !dbg !41
  %316 = add i32 %301, %50, !dbg !41
  %317 = add i32 %301, %51, !dbg !41
  %318 = sext i32 %302 to i64, !dbg !42
  %319 = getelementptr float, ptr addrspace(1) %0, i64 %318, !dbg !42
  %320 = sext i32 %303 to i64, !dbg !42
  %321 = getelementptr float, ptr addrspace(1) %0, i64 %320, !dbg !42
  %322 = sext i32 %304 to i64, !dbg !42
  %323 = getelementptr float, ptr addrspace(1) %0, i64 %322, !dbg !42
  %324 = sext i32 %305 to i64, !dbg !42
  %325 = getelementptr float, ptr addrspace(1) %0, i64 %324, !dbg !42
  %326 = sext i32 %306 to i64, !dbg !42
  %327 = getelementptr float, ptr addrspace(1) %0, i64 %326, !dbg !42
  %328 = sext i32 %307 to i64, !dbg !42
  %329 = getelementptr float, ptr addrspace(1) %0, i64 %328, !dbg !42
  %330 = sext i32 %308 to i64, !dbg !42
  %331 = getelementptr float, ptr addrspace(1) %0, i64 %330, !dbg !42
  %332 = sext i32 %309 to i64, !dbg !42
  %333 = getelementptr float, ptr addrspace(1) %0, i64 %332, !dbg !42
  %334 = sext i32 %310 to i64, !dbg !42
  %335 = getelementptr float, ptr addrspace(1) %0, i64 %334, !dbg !42
  %336 = sext i32 %311 to i64, !dbg !42
  %337 = getelementptr float, ptr addrspace(1) %0, i64 %336, !dbg !42
  %338 = sext i32 %312 to i64, !dbg !42
  %339 = getelementptr float, ptr addrspace(1) %0, i64 %338, !dbg !42
  %340 = sext i32 %313 to i64, !dbg !42
  %341 = getelementptr float, ptr addrspace(1) %0, i64 %340, !dbg !42
  %342 = sext i32 %314 to i64, !dbg !42
  %343 = getelementptr float, ptr addrspace(1) %0, i64 %342, !dbg !42
  %344 = sext i32 %315 to i64, !dbg !42
  %345 = getelementptr float, ptr addrspace(1) %0, i64 %344, !dbg !42
  %346 = sext i32 %316 to i64, !dbg !42
  %347 = getelementptr float, ptr addrspace(1) %0, i64 %346, !dbg !42
  %348 = sext i32 %317 to i64, !dbg !42
  %349 = getelementptr float, ptr addrspace(1) %0, i64 %348, !dbg !42
  %350 = and i1 %167, %300, !dbg !43
  %351 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %319, i1 %350, i32 0, i1 %350) #2, !dbg !44
  %352 = bitcast i32 %351 to float, !dbg !44
  %353 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %321, i1 %350, i32 0, i1 %350) #2, !dbg !44
  %354 = bitcast i32 %353 to float, !dbg !44
  %355 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %323, i1 %350, i32 0, i1 %350) #2, !dbg !44
  %356 = bitcast i32 %355 to float, !dbg !44
  %357 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %325, i1 %350, i32 0, i1 %350) #2, !dbg !44
  %358 = bitcast i32 %357 to float, !dbg !44
  %359 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %327, i1 %350, i32 0, i1 %350) #2, !dbg !44
  %360 = bitcast i32 %359 to float, !dbg !44
  %361 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %329, i1 %350, i32 0, i1 %350) #2, !dbg !44
  %362 = bitcast i32 %361 to float, !dbg !44
  %363 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %331, i1 %350, i32 0, i1 %350) #2, !dbg !44
  %364 = bitcast i32 %363 to float, !dbg !44
  %365 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %333, i1 %350, i32 0, i1 %350) #2, !dbg !44
  %366 = bitcast i32 %365 to float, !dbg !44
  %367 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %335, i1 %350, i32 0, i1 %350) #2, !dbg !44
  %368 = bitcast i32 %367 to float, !dbg !44
  %369 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %337, i1 %350, i32 0, i1 %350) #2, !dbg !44
  %370 = bitcast i32 %369 to float, !dbg !44
  %371 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %339, i1 %350, i32 0, i1 %350) #2, !dbg !44
  %372 = bitcast i32 %371 to float, !dbg !44
  %373 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %341, i1 %350, i32 0, i1 %350) #2, !dbg !44
  %374 = bitcast i32 %373 to float, !dbg !44
  %375 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %343, i1 %350, i32 0, i1 %350) #2, !dbg !44
  %376 = bitcast i32 %375 to float, !dbg !44
  %377 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %345, i1 %350, i32 0, i1 %350) #2, !dbg !44
  %378 = bitcast i32 %377 to float, !dbg !44
  %379 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %347, i1 %350, i32 0, i1 %350) #2, !dbg !44
  %380 = bitcast i32 %379 to float, !dbg !44
  %381 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %349, i1 %350, i32 0, i1 %350) #2, !dbg !44
  %382 = bitcast i32 %381 to float, !dbg !44
  %383 = fadd float %283, %352, !dbg !45
  %384 = fadd float %284, %354, !dbg !45
  %385 = fadd float %285, %356, !dbg !45
  %386 = fadd float %286, %358, !dbg !45
  %387 = fadd float %287, %360, !dbg !45
  %388 = fadd float %288, %362, !dbg !45
  %389 = fadd float %289, %364, !dbg !45
  %390 = fadd float %290, %366, !dbg !45
  %391 = fadd float %291, %368, !dbg !45
  %392 = fadd float %292, %370, !dbg !45
  %393 = fadd float %293, %372, !dbg !45
  %394 = fadd float %294, %374, !dbg !45
  %395 = fadd float %295, %376, !dbg !45
  %396 = fadd float %296, %378, !dbg !45
  %397 = fadd float %297, %380, !dbg !45
  %398 = fadd float %298, %382, !dbg !45
  %399 = add i32 %22, -1, !dbg !46
  %400 = add i32 %399, %36, !dbg !47
  %401 = add i32 %399, %37, !dbg !47
  %402 = add i32 %399, %38, !dbg !47
  %403 = add i32 %399, %39, !dbg !47
  %404 = add i32 %399, %40, !dbg !47
  %405 = add i32 %399, %41, !dbg !47
  %406 = add i32 %399, %42, !dbg !47
  %407 = add i32 %399, %43, !dbg !47
  %408 = add i32 %399, %44, !dbg !47
  %409 = add i32 %399, %45, !dbg !47
  %410 = add i32 %399, %46, !dbg !47
  %411 = add i32 %399, %47, !dbg !47
  %412 = add i32 %399, %48, !dbg !47
  %413 = add i32 %399, %49, !dbg !47
  %414 = add i32 %399, %50, !dbg !47
  %415 = add i32 %399, %51, !dbg !47
  %416 = sext i32 %400 to i64, !dbg !48
  %417 = getelementptr float, ptr addrspace(1) %0, i64 %416, !dbg !48
  %418 = sext i32 %401 to i64, !dbg !48
  %419 = getelementptr float, ptr addrspace(1) %0, i64 %418, !dbg !48
  %420 = sext i32 %402 to i64, !dbg !48
  %421 = getelementptr float, ptr addrspace(1) %0, i64 %420, !dbg !48
  %422 = sext i32 %403 to i64, !dbg !48
  %423 = getelementptr float, ptr addrspace(1) %0, i64 %422, !dbg !48
  %424 = sext i32 %404 to i64, !dbg !48
  %425 = getelementptr float, ptr addrspace(1) %0, i64 %424, !dbg !48
  %426 = sext i32 %405 to i64, !dbg !48
  %427 = getelementptr float, ptr addrspace(1) %0, i64 %426, !dbg !48
  %428 = sext i32 %406 to i64, !dbg !48
  %429 = getelementptr float, ptr addrspace(1) %0, i64 %428, !dbg !48
  %430 = sext i32 %407 to i64, !dbg !48
  %431 = getelementptr float, ptr addrspace(1) %0, i64 %430, !dbg !48
  %432 = sext i32 %408 to i64, !dbg !48
  %433 = getelementptr float, ptr addrspace(1) %0, i64 %432, !dbg !48
  %434 = sext i32 %409 to i64, !dbg !48
  %435 = getelementptr float, ptr addrspace(1) %0, i64 %434, !dbg !48
  %436 = sext i32 %410 to i64, !dbg !48
  %437 = getelementptr float, ptr addrspace(1) %0, i64 %436, !dbg !48
  %438 = sext i32 %411 to i64, !dbg !48
  %439 = getelementptr float, ptr addrspace(1) %0, i64 %438, !dbg !48
  %440 = sext i32 %412 to i64, !dbg !48
  %441 = getelementptr float, ptr addrspace(1) %0, i64 %440, !dbg !48
  %442 = sext i32 %413 to i64, !dbg !48
  %443 = getelementptr float, ptr addrspace(1) %0, i64 %442, !dbg !48
  %444 = sext i32 %414 to i64, !dbg !48
  %445 = getelementptr float, ptr addrspace(1) %0, i64 %444, !dbg !48
  %446 = sext i32 %415 to i64, !dbg !48
  %447 = getelementptr float, ptr addrspace(1) %0, i64 %446, !dbg !48
  %448 = add i32 %22, 16, !dbg !49
  %449 = icmp ult i32 %448, 305, !dbg !49
  %450 = and i1 %449, %116, !dbg !49
  %451 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %417, i1 %450, i32 0, i1 %450) #2, !dbg !50
  %452 = bitcast i32 %451 to float, !dbg !50
  %453 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %419, i1 %450, i32 0, i1 %450) #2, !dbg !50
  %454 = bitcast i32 %453 to float, !dbg !50
  %455 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %421, i1 %450, i32 0, i1 %450) #2, !dbg !50
  %456 = bitcast i32 %455 to float, !dbg !50
  %457 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %423, i1 %450, i32 0, i1 %450) #2, !dbg !50
  %458 = bitcast i32 %457 to float, !dbg !50
  %459 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %425, i1 %450, i32 0, i1 %450) #2, !dbg !50
  %460 = bitcast i32 %459 to float, !dbg !50
  %461 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %427, i1 %450, i32 0, i1 %450) #2, !dbg !50
  %462 = bitcast i32 %461 to float, !dbg !50
  %463 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %429, i1 %450, i32 0, i1 %450) #2, !dbg !50
  %464 = bitcast i32 %463 to float, !dbg !50
  %465 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %431, i1 %450, i32 0, i1 %450) #2, !dbg !50
  %466 = bitcast i32 %465 to float, !dbg !50
  %467 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %433, i1 %450, i32 0, i1 %450) #2, !dbg !50
  %468 = bitcast i32 %467 to float, !dbg !50
  %469 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %435, i1 %450, i32 0, i1 %450) #2, !dbg !50
  %470 = bitcast i32 %469 to float, !dbg !50
  %471 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %437, i1 %450, i32 0, i1 %450) #2, !dbg !50
  %472 = bitcast i32 %471 to float, !dbg !50
  %473 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %439, i1 %450, i32 0, i1 %450) #2, !dbg !50
  %474 = bitcast i32 %473 to float, !dbg !50
  %475 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %441, i1 %450, i32 0, i1 %450) #2, !dbg !50
  %476 = bitcast i32 %475 to float, !dbg !50
  %477 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %443, i1 %450, i32 0, i1 %450) #2, !dbg !50
  %478 = bitcast i32 %477 to float, !dbg !50
  %479 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %445, i1 %450, i32 0, i1 %450) #2, !dbg !50
  %480 = bitcast i32 %479 to float, !dbg !50
  %481 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %447, i1 %450, i32 0, i1 %450) #2, !dbg !50
  %482 = bitcast i32 %481 to float, !dbg !50
  %483 = fadd float %383, %452, !dbg !51
  %484 = fadd float %384, %454, !dbg !51
  %485 = fadd float %385, %456, !dbg !51
  %486 = fadd float %386, %458, !dbg !51
  %487 = fadd float %387, %460, !dbg !51
  %488 = fadd float %388, %462, !dbg !51
  %489 = fadd float %389, %464, !dbg !51
  %490 = fadd float %390, %466, !dbg !51
  %491 = fadd float %391, %468, !dbg !51
  %492 = fadd float %392, %470, !dbg !51
  %493 = fadd float %393, %472, !dbg !51
  %494 = fadd float %394, %474, !dbg !51
  %495 = fadd float %395, %476, !dbg !51
  %496 = fadd float %396, %478, !dbg !51
  %497 = fadd float %397, %480, !dbg !51
  %498 = fadd float %398, %482, !dbg !51
  %499 = and i1 %449, %201, !dbg !52
  %500 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %69, i1 %499, i32 0, i1 %499) #2, !dbg !53
  %501 = bitcast i32 %500 to float, !dbg !53
  %502 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %71, i1 %499, i32 0, i1 %499) #2, !dbg !53
  %503 = bitcast i32 %502 to float, !dbg !53
  %504 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %73, i1 %499, i32 0, i1 %499) #2, !dbg !53
  %505 = bitcast i32 %504 to float, !dbg !53
  %506 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %75, i1 %499, i32 0, i1 %499) #2, !dbg !53
  %507 = bitcast i32 %506 to float, !dbg !53
  %508 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %77, i1 %499, i32 0, i1 %499) #2, !dbg !53
  %509 = bitcast i32 %508 to float, !dbg !53
  %510 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %79, i1 %499, i32 0, i1 %499) #2, !dbg !53
  %511 = bitcast i32 %510 to float, !dbg !53
  %512 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %81, i1 %499, i32 0, i1 %499) #2, !dbg !53
  %513 = bitcast i32 %512 to float, !dbg !53
  %514 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %83, i1 %499, i32 0, i1 %499) #2, !dbg !53
  %515 = bitcast i32 %514 to float, !dbg !53
  %516 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %85, i1 %499, i32 0, i1 %499) #2, !dbg !53
  %517 = bitcast i32 %516 to float, !dbg !53
  %518 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %87, i1 %499, i32 0, i1 %499) #2, !dbg !53
  %519 = bitcast i32 %518 to float, !dbg !53
  %520 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %89, i1 %499, i32 0, i1 %499) #2, !dbg !53
  %521 = bitcast i32 %520 to float, !dbg !53
  %522 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %91, i1 %499, i32 0, i1 %499) #2, !dbg !53
  %523 = bitcast i32 %522 to float, !dbg !53
  %524 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %93, i1 %499, i32 0, i1 %499) #2, !dbg !53
  %525 = bitcast i32 %524 to float, !dbg !53
  %526 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %95, i1 %499, i32 0, i1 %499) #2, !dbg !53
  %527 = bitcast i32 %526 to float, !dbg !53
  %528 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %97, i1 %499, i32 0, i1 %499) #2, !dbg !53
  %529 = bitcast i32 %528 to float, !dbg !53
  %530 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %99, i1 %499, i32 0, i1 %499) #2, !dbg !53
  %531 = bitcast i32 %530 to float, !dbg !53
  %532 = fadd float %483, %501, !dbg !54
  %533 = fadd float %484, %503, !dbg !54
  %534 = fadd float %485, %505, !dbg !54
  %535 = fadd float %486, %507, !dbg !54
  %536 = fadd float %487, %509, !dbg !54
  %537 = fadd float %488, %511, !dbg !54
  %538 = fadd float %489, %513, !dbg !54
  %539 = fadd float %490, %515, !dbg !54
  %540 = fadd float %491, %517, !dbg !54
  %541 = fadd float %492, %519, !dbg !54
  %542 = fadd float %493, %521, !dbg !54
  %543 = fadd float %494, %523, !dbg !54
  %544 = fadd float %495, %525, !dbg !54
  %545 = fadd float %496, %527, !dbg !54
  %546 = fadd float %497, %529, !dbg !54
  %547 = fadd float %498, %531, !dbg !54
  %548 = add i32 %22, 1, !dbg !55
  %549 = add i32 %548, %36, !dbg !56
  %550 = add i32 %548, %37, !dbg !56
  %551 = add i32 %548, %38, !dbg !56
  %552 = add i32 %548, %39, !dbg !56
  %553 = add i32 %548, %40, !dbg !56
  %554 = add i32 %548, %41, !dbg !56
  %555 = add i32 %548, %42, !dbg !56
  %556 = add i32 %548, %43, !dbg !56
  %557 = add i32 %548, %44, !dbg !56
  %558 = add i32 %548, %45, !dbg !56
  %559 = add i32 %548, %46, !dbg !56
  %560 = add i32 %548, %47, !dbg !56
  %561 = add i32 %548, %48, !dbg !56
  %562 = add i32 %548, %49, !dbg !56
  %563 = add i32 %548, %50, !dbg !56
  %564 = add i32 %548, %51, !dbg !56
  %565 = sext i32 %549 to i64, !dbg !57
  %566 = getelementptr float, ptr addrspace(1) %0, i64 %565, !dbg !57
  %567 = sext i32 %550 to i64, !dbg !57
  %568 = getelementptr float, ptr addrspace(1) %0, i64 %567, !dbg !57
  %569 = sext i32 %551 to i64, !dbg !57
  %570 = getelementptr float, ptr addrspace(1) %0, i64 %569, !dbg !57
  %571 = sext i32 %552 to i64, !dbg !57
  %572 = getelementptr float, ptr addrspace(1) %0, i64 %571, !dbg !57
  %573 = sext i32 %553 to i64, !dbg !57
  %574 = getelementptr float, ptr addrspace(1) %0, i64 %573, !dbg !57
  %575 = sext i32 %554 to i64, !dbg !57
  %576 = getelementptr float, ptr addrspace(1) %0, i64 %575, !dbg !57
  %577 = sext i32 %555 to i64, !dbg !57
  %578 = getelementptr float, ptr addrspace(1) %0, i64 %577, !dbg !57
  %579 = sext i32 %556 to i64, !dbg !57
  %580 = getelementptr float, ptr addrspace(1) %0, i64 %579, !dbg !57
  %581 = sext i32 %557 to i64, !dbg !57
  %582 = getelementptr float, ptr addrspace(1) %0, i64 %581, !dbg !57
  %583 = sext i32 %558 to i64, !dbg !57
  %584 = getelementptr float, ptr addrspace(1) %0, i64 %583, !dbg !57
  %585 = sext i32 %559 to i64, !dbg !57
  %586 = getelementptr float, ptr addrspace(1) %0, i64 %585, !dbg !57
  %587 = sext i32 %560 to i64, !dbg !57
  %588 = getelementptr float, ptr addrspace(1) %0, i64 %587, !dbg !57
  %589 = sext i32 %561 to i64, !dbg !57
  %590 = getelementptr float, ptr addrspace(1) %0, i64 %589, !dbg !57
  %591 = sext i32 %562 to i64, !dbg !57
  %592 = getelementptr float, ptr addrspace(1) %0, i64 %591, !dbg !57
  %593 = sext i32 %563 to i64, !dbg !57
  %594 = getelementptr float, ptr addrspace(1) %0, i64 %593, !dbg !57
  %595 = sext i32 %564 to i64, !dbg !57
  %596 = getelementptr float, ptr addrspace(1) %0, i64 %595, !dbg !57
  %597 = and i1 %449, %300, !dbg !58
  %598 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %566, i1 %597, i32 0, i1 %597) #2, !dbg !59
  %599 = bitcast i32 %598 to float, !dbg !59
  %600 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %568, i1 %597, i32 0, i1 %597) #2, !dbg !59
  %601 = bitcast i32 %600 to float, !dbg !59
  %602 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %570, i1 %597, i32 0, i1 %597) #2, !dbg !59
  %603 = bitcast i32 %602 to float, !dbg !59
  %604 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %572, i1 %597, i32 0, i1 %597) #2, !dbg !59
  %605 = bitcast i32 %604 to float, !dbg !59
  %606 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %574, i1 %597, i32 0, i1 %597) #2, !dbg !59
  %607 = bitcast i32 %606 to float, !dbg !59
  %608 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %576, i1 %597, i32 0, i1 %597) #2, !dbg !59
  %609 = bitcast i32 %608 to float, !dbg !59
  %610 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %578, i1 %597, i32 0, i1 %597) #2, !dbg !59
  %611 = bitcast i32 %610 to float, !dbg !59
  %612 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %580, i1 %597, i32 0, i1 %597) #2, !dbg !59
  %613 = bitcast i32 %612 to float, !dbg !59
  %614 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %582, i1 %597, i32 0, i1 %597) #2, !dbg !59
  %615 = bitcast i32 %614 to float, !dbg !59
  %616 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %584, i1 %597, i32 0, i1 %597) #2, !dbg !59
  %617 = bitcast i32 %616 to float, !dbg !59
  %618 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %586, i1 %597, i32 0, i1 %597) #2, !dbg !59
  %619 = bitcast i32 %618 to float, !dbg !59
  %620 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %588, i1 %597, i32 0, i1 %597) #2, !dbg !59
  %621 = bitcast i32 %620 to float, !dbg !59
  %622 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %590, i1 %597, i32 0, i1 %597) #2, !dbg !59
  %623 = bitcast i32 %622 to float, !dbg !59
  %624 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %592, i1 %597, i32 0, i1 %597) #2, !dbg !59
  %625 = bitcast i32 %624 to float, !dbg !59
  %626 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %594, i1 %597, i32 0, i1 %597) #2, !dbg !59
  %627 = bitcast i32 %626 to float, !dbg !59
  %628 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %596, i1 %597, i32 0, i1 %597) #2, !dbg !59
  %629 = bitcast i32 %628 to float, !dbg !59
  %630 = fadd float %532, %599, !dbg !60
  %631 = fadd float %533, %601, !dbg !60
  %632 = fadd float %534, %603, !dbg !60
  %633 = fadd float %535, %605, !dbg !60
  %634 = fadd float %536, %607, !dbg !60
  %635 = fadd float %537, %609, !dbg !60
  %636 = fadd float %538, %611, !dbg !60
  %637 = fadd float %539, %613, !dbg !60
  %638 = fadd float %540, %615, !dbg !60
  %639 = fadd float %541, %617, !dbg !60
  %640 = fadd float %542, %619, !dbg !60
  %641 = fadd float %543, %621, !dbg !60
  %642 = fadd float %544, %623, !dbg !60
  %643 = fadd float %545, %625, !dbg !60
  %644 = fadd float %546, %627, !dbg !60
  %645 = fadd float %547, %629, !dbg !60
  %646 = add i32 %448, %36, !dbg !61
  %647 = add i32 %448, %37, !dbg !61
  %648 = add i32 %448, %38, !dbg !61
  %649 = add i32 %448, %39, !dbg !61
  %650 = add i32 %448, %40, !dbg !61
  %651 = add i32 %448, %41, !dbg !61
  %652 = add i32 %448, %42, !dbg !61
  %653 = add i32 %448, %43, !dbg !61
  %654 = add i32 %448, %44, !dbg !61
  %655 = add i32 %448, %45, !dbg !61
  %656 = add i32 %448, %46, !dbg !61
  %657 = add i32 %448, %47, !dbg !61
  %658 = add i32 %448, %48, !dbg !61
  %659 = add i32 %448, %49, !dbg !61
  %660 = add i32 %448, %50, !dbg !61
  %661 = add i32 %448, %51, !dbg !61
  %662 = sext i32 %646 to i64, !dbg !62
  %663 = getelementptr float, ptr addrspace(1) %0, i64 %662, !dbg !62
  %664 = sext i32 %647 to i64, !dbg !62
  %665 = getelementptr float, ptr addrspace(1) %0, i64 %664, !dbg !62
  %666 = sext i32 %648 to i64, !dbg !62
  %667 = getelementptr float, ptr addrspace(1) %0, i64 %666, !dbg !62
  %668 = sext i32 %649 to i64, !dbg !62
  %669 = getelementptr float, ptr addrspace(1) %0, i64 %668, !dbg !62
  %670 = sext i32 %650 to i64, !dbg !62
  %671 = getelementptr float, ptr addrspace(1) %0, i64 %670, !dbg !62
  %672 = sext i32 %651 to i64, !dbg !62
  %673 = getelementptr float, ptr addrspace(1) %0, i64 %672, !dbg !62
  %674 = sext i32 %652 to i64, !dbg !62
  %675 = getelementptr float, ptr addrspace(1) %0, i64 %674, !dbg !62
  %676 = sext i32 %653 to i64, !dbg !62
  %677 = getelementptr float, ptr addrspace(1) %0, i64 %676, !dbg !62
  %678 = sext i32 %654 to i64, !dbg !62
  %679 = getelementptr float, ptr addrspace(1) %0, i64 %678, !dbg !62
  %680 = sext i32 %655 to i64, !dbg !62
  %681 = getelementptr float, ptr addrspace(1) %0, i64 %680, !dbg !62
  %682 = sext i32 %656 to i64, !dbg !62
  %683 = getelementptr float, ptr addrspace(1) %0, i64 %682, !dbg !62
  %684 = sext i32 %657 to i64, !dbg !62
  %685 = getelementptr float, ptr addrspace(1) %0, i64 %684, !dbg !62
  %686 = sext i32 %658 to i64, !dbg !62
  %687 = getelementptr float, ptr addrspace(1) %0, i64 %686, !dbg !62
  %688 = sext i32 %659 to i64, !dbg !62
  %689 = getelementptr float, ptr addrspace(1) %0, i64 %688, !dbg !62
  %690 = sext i32 %660 to i64, !dbg !62
  %691 = getelementptr float, ptr addrspace(1) %0, i64 %690, !dbg !62
  %692 = sext i32 %661 to i64, !dbg !62
  %693 = getelementptr float, ptr addrspace(1) %0, i64 %692, !dbg !62
  %694 = add i32 %22, 33, !dbg !63
  %695 = icmp ult i32 %694, 305, !dbg !63
  %696 = and i1 %695, %116, !dbg !63
  %697 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %663, i1 %696, i32 0, i1 %696) #2, !dbg !64
  %698 = bitcast i32 %697 to float, !dbg !64
  %699 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %665, i1 %696, i32 0, i1 %696) #2, !dbg !64
  %700 = bitcast i32 %699 to float, !dbg !64
  %701 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %667, i1 %696, i32 0, i1 %696) #2, !dbg !64
  %702 = bitcast i32 %701 to float, !dbg !64
  %703 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %669, i1 %696, i32 0, i1 %696) #2, !dbg !64
  %704 = bitcast i32 %703 to float, !dbg !64
  %705 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %671, i1 %696, i32 0, i1 %696) #2, !dbg !64
  %706 = bitcast i32 %705 to float, !dbg !64
  %707 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %673, i1 %696, i32 0, i1 %696) #2, !dbg !64
  %708 = bitcast i32 %707 to float, !dbg !64
  %709 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %675, i1 %696, i32 0, i1 %696) #2, !dbg !64
  %710 = bitcast i32 %709 to float, !dbg !64
  %711 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %677, i1 %696, i32 0, i1 %696) #2, !dbg !64
  %712 = bitcast i32 %711 to float, !dbg !64
  %713 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %679, i1 %696, i32 0, i1 %696) #2, !dbg !64
  %714 = bitcast i32 %713 to float, !dbg !64
  %715 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %681, i1 %696, i32 0, i1 %696) #2, !dbg !64
  %716 = bitcast i32 %715 to float, !dbg !64
  %717 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %683, i1 %696, i32 0, i1 %696) #2, !dbg !64
  %718 = bitcast i32 %717 to float, !dbg !64
  %719 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %685, i1 %696, i32 0, i1 %696) #2, !dbg !64
  %720 = bitcast i32 %719 to float, !dbg !64
  %721 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %687, i1 %696, i32 0, i1 %696) #2, !dbg !64
  %722 = bitcast i32 %721 to float, !dbg !64
  %723 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %689, i1 %696, i32 0, i1 %696) #2, !dbg !64
  %724 = bitcast i32 %723 to float, !dbg !64
  %725 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %691, i1 %696, i32 0, i1 %696) #2, !dbg !64
  %726 = bitcast i32 %725 to float, !dbg !64
  %727 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %693, i1 %696, i32 0, i1 %696) #2, !dbg !64
  %728 = bitcast i32 %727 to float, !dbg !64
  %729 = fadd float %630, %698, !dbg !65
  %730 = fadd float %631, %700, !dbg !65
  %731 = fadd float %632, %702, !dbg !65
  %732 = fadd float %633, %704, !dbg !65
  %733 = fadd float %634, %706, !dbg !65
  %734 = fadd float %635, %708, !dbg !65
  %735 = fadd float %636, %710, !dbg !65
  %736 = fadd float %637, %712, !dbg !65
  %737 = fadd float %638, %714, !dbg !65
  %738 = fadd float %639, %716, !dbg !65
  %739 = fadd float %640, %718, !dbg !65
  %740 = fadd float %641, %720, !dbg !65
  %741 = fadd float %642, %722, !dbg !65
  %742 = fadd float %643, %724, !dbg !65
  %743 = fadd float %644, %726, !dbg !65
  %744 = fadd float %645, %728, !dbg !65
  %745 = add i32 %22, 17, !dbg !66
  %746 = add i32 %745, %36, !dbg !67
  %747 = add i32 %745, %37, !dbg !67
  %748 = add i32 %745, %38, !dbg !67
  %749 = add i32 %745, %39, !dbg !67
  %750 = add i32 %745, %40, !dbg !67
  %751 = add i32 %745, %41, !dbg !67
  %752 = add i32 %745, %42, !dbg !67
  %753 = add i32 %745, %43, !dbg !67
  %754 = add i32 %745, %44, !dbg !67
  %755 = add i32 %745, %45, !dbg !67
  %756 = add i32 %745, %46, !dbg !67
  %757 = add i32 %745, %47, !dbg !67
  %758 = add i32 %745, %48, !dbg !67
  %759 = add i32 %745, %49, !dbg !67
  %760 = add i32 %745, %50, !dbg !67
  %761 = add i32 %745, %51, !dbg !67
  %762 = sext i32 %746 to i64, !dbg !68
  %763 = getelementptr float, ptr addrspace(1) %0, i64 %762, !dbg !68
  %764 = sext i32 %747 to i64, !dbg !68
  %765 = getelementptr float, ptr addrspace(1) %0, i64 %764, !dbg !68
  %766 = sext i32 %748 to i64, !dbg !68
  %767 = getelementptr float, ptr addrspace(1) %0, i64 %766, !dbg !68
  %768 = sext i32 %749 to i64, !dbg !68
  %769 = getelementptr float, ptr addrspace(1) %0, i64 %768, !dbg !68
  %770 = sext i32 %750 to i64, !dbg !68
  %771 = getelementptr float, ptr addrspace(1) %0, i64 %770, !dbg !68
  %772 = sext i32 %751 to i64, !dbg !68
  %773 = getelementptr float, ptr addrspace(1) %0, i64 %772, !dbg !68
  %774 = sext i32 %752 to i64, !dbg !68
  %775 = getelementptr float, ptr addrspace(1) %0, i64 %774, !dbg !68
  %776 = sext i32 %753 to i64, !dbg !68
  %777 = getelementptr float, ptr addrspace(1) %0, i64 %776, !dbg !68
  %778 = sext i32 %754 to i64, !dbg !68
  %779 = getelementptr float, ptr addrspace(1) %0, i64 %778, !dbg !68
  %780 = sext i32 %755 to i64, !dbg !68
  %781 = getelementptr float, ptr addrspace(1) %0, i64 %780, !dbg !68
  %782 = sext i32 %756 to i64, !dbg !68
  %783 = getelementptr float, ptr addrspace(1) %0, i64 %782, !dbg !68
  %784 = sext i32 %757 to i64, !dbg !68
  %785 = getelementptr float, ptr addrspace(1) %0, i64 %784, !dbg !68
  %786 = sext i32 %758 to i64, !dbg !68
  %787 = getelementptr float, ptr addrspace(1) %0, i64 %786, !dbg !68
  %788 = sext i32 %759 to i64, !dbg !68
  %789 = getelementptr float, ptr addrspace(1) %0, i64 %788, !dbg !68
  %790 = sext i32 %760 to i64, !dbg !68
  %791 = getelementptr float, ptr addrspace(1) %0, i64 %790, !dbg !68
  %792 = sext i32 %761 to i64, !dbg !68
  %793 = getelementptr float, ptr addrspace(1) %0, i64 %792, !dbg !68
  %794 = and i1 %695, %201, !dbg !69
  %795 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %763, i1 %794, i32 0, i1 %794) #2, !dbg !70
  %796 = bitcast i32 %795 to float, !dbg !70
  %797 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %765, i1 %794, i32 0, i1 %794) #2, !dbg !70
  %798 = bitcast i32 %797 to float, !dbg !70
  %799 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %767, i1 %794, i32 0, i1 %794) #2, !dbg !70
  %800 = bitcast i32 %799 to float, !dbg !70
  %801 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %769, i1 %794, i32 0, i1 %794) #2, !dbg !70
  %802 = bitcast i32 %801 to float, !dbg !70
  %803 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %771, i1 %794, i32 0, i1 %794) #2, !dbg !70
  %804 = bitcast i32 %803 to float, !dbg !70
  %805 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %773, i1 %794, i32 0, i1 %794) #2, !dbg !70
  %806 = bitcast i32 %805 to float, !dbg !70
  %807 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %775, i1 %794, i32 0, i1 %794) #2, !dbg !70
  %808 = bitcast i32 %807 to float, !dbg !70
  %809 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %777, i1 %794, i32 0, i1 %794) #2, !dbg !70
  %810 = bitcast i32 %809 to float, !dbg !70
  %811 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %779, i1 %794, i32 0, i1 %794) #2, !dbg !70
  %812 = bitcast i32 %811 to float, !dbg !70
  %813 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %781, i1 %794, i32 0, i1 %794) #2, !dbg !70
  %814 = bitcast i32 %813 to float, !dbg !70
  %815 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %783, i1 %794, i32 0, i1 %794) #2, !dbg !70
  %816 = bitcast i32 %815 to float, !dbg !70
  %817 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %785, i1 %794, i32 0, i1 %794) #2, !dbg !70
  %818 = bitcast i32 %817 to float, !dbg !70
  %819 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %787, i1 %794, i32 0, i1 %794) #2, !dbg !70
  %820 = bitcast i32 %819 to float, !dbg !70
  %821 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %789, i1 %794, i32 0, i1 %794) #2, !dbg !70
  %822 = bitcast i32 %821 to float, !dbg !70
  %823 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %791, i1 %794, i32 0, i1 %794) #2, !dbg !70
  %824 = bitcast i32 %823 to float, !dbg !70
  %825 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %793, i1 %794, i32 0, i1 %794) #2, !dbg !70
  %826 = bitcast i32 %825 to float, !dbg !70
  %827 = fadd float %729, %796, !dbg !71
  %828 = fadd float %730, %798, !dbg !71
  %829 = fadd float %731, %800, !dbg !71
  %830 = fadd float %732, %802, !dbg !71
  %831 = fadd float %733, %804, !dbg !71
  %832 = fadd float %734, %806, !dbg !71
  %833 = fadd float %735, %808, !dbg !71
  %834 = fadd float %736, %810, !dbg !71
  %835 = fadd float %737, %812, !dbg !71
  %836 = fadd float %738, %814, !dbg !71
  %837 = fadd float %739, %816, !dbg !71
  %838 = fadd float %740, %818, !dbg !71
  %839 = fadd float %741, %820, !dbg !71
  %840 = fadd float %742, %822, !dbg !71
  %841 = fadd float %743, %824, !dbg !71
  %842 = fadd float %744, %826, !dbg !71
  %843 = add i32 %22, 18, !dbg !72
  %844 = add i32 %843, %36, !dbg !73
  %845 = add i32 %843, %37, !dbg !73
  %846 = add i32 %843, %38, !dbg !73
  %847 = add i32 %843, %39, !dbg !73
  %848 = add i32 %843, %40, !dbg !73
  %849 = add i32 %843, %41, !dbg !73
  %850 = add i32 %843, %42, !dbg !73
  %851 = add i32 %843, %43, !dbg !73
  %852 = add i32 %843, %44, !dbg !73
  %853 = add i32 %843, %45, !dbg !73
  %854 = add i32 %843, %46, !dbg !73
  %855 = add i32 %843, %47, !dbg !73
  %856 = add i32 %843, %48, !dbg !73
  %857 = add i32 %843, %49, !dbg !73
  %858 = add i32 %843, %50, !dbg !73
  %859 = add i32 %843, %51, !dbg !73
  %860 = sext i32 %844 to i64, !dbg !74
  %861 = getelementptr float, ptr addrspace(1) %0, i64 %860, !dbg !74
  %862 = sext i32 %845 to i64, !dbg !74
  %863 = getelementptr float, ptr addrspace(1) %0, i64 %862, !dbg !74
  %864 = sext i32 %846 to i64, !dbg !74
  %865 = getelementptr float, ptr addrspace(1) %0, i64 %864, !dbg !74
  %866 = sext i32 %847 to i64, !dbg !74
  %867 = getelementptr float, ptr addrspace(1) %0, i64 %866, !dbg !74
  %868 = sext i32 %848 to i64, !dbg !74
  %869 = getelementptr float, ptr addrspace(1) %0, i64 %868, !dbg !74
  %870 = sext i32 %849 to i64, !dbg !74
  %871 = getelementptr float, ptr addrspace(1) %0, i64 %870, !dbg !74
  %872 = sext i32 %850 to i64, !dbg !74
  %873 = getelementptr float, ptr addrspace(1) %0, i64 %872, !dbg !74
  %874 = sext i32 %851 to i64, !dbg !74
  %875 = getelementptr float, ptr addrspace(1) %0, i64 %874, !dbg !74
  %876 = sext i32 %852 to i64, !dbg !74
  %877 = getelementptr float, ptr addrspace(1) %0, i64 %876, !dbg !74
  %878 = sext i32 %853 to i64, !dbg !74
  %879 = getelementptr float, ptr addrspace(1) %0, i64 %878, !dbg !74
  %880 = sext i32 %854 to i64, !dbg !74
  %881 = getelementptr float, ptr addrspace(1) %0, i64 %880, !dbg !74
  %882 = sext i32 %855 to i64, !dbg !74
  %883 = getelementptr float, ptr addrspace(1) %0, i64 %882, !dbg !74
  %884 = sext i32 %856 to i64, !dbg !74
  %885 = getelementptr float, ptr addrspace(1) %0, i64 %884, !dbg !74
  %886 = sext i32 %857 to i64, !dbg !74
  %887 = getelementptr float, ptr addrspace(1) %0, i64 %886, !dbg !74
  %888 = sext i32 %858 to i64, !dbg !74
  %889 = getelementptr float, ptr addrspace(1) %0, i64 %888, !dbg !74
  %890 = sext i32 %859 to i64, !dbg !74
  %891 = getelementptr float, ptr addrspace(1) %0, i64 %890, !dbg !74
  %892 = and i1 %695, %300, !dbg !75
  %893 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %861, i1 %892, i32 0, i1 %892) #2, !dbg !76
  %894 = bitcast i32 %893 to float, !dbg !76
  %895 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %863, i1 %892, i32 0, i1 %892) #2, !dbg !76
  %896 = bitcast i32 %895 to float, !dbg !76
  %897 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %865, i1 %892, i32 0, i1 %892) #2, !dbg !76
  %898 = bitcast i32 %897 to float, !dbg !76
  %899 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %867, i1 %892, i32 0, i1 %892) #2, !dbg !76
  %900 = bitcast i32 %899 to float, !dbg !76
  %901 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %869, i1 %892, i32 0, i1 %892) #2, !dbg !76
  %902 = bitcast i32 %901 to float, !dbg !76
  %903 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %871, i1 %892, i32 0, i1 %892) #2, !dbg !76
  %904 = bitcast i32 %903 to float, !dbg !76
  %905 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %873, i1 %892, i32 0, i1 %892) #2, !dbg !76
  %906 = bitcast i32 %905 to float, !dbg !76
  %907 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %875, i1 %892, i32 0, i1 %892) #2, !dbg !76
  %908 = bitcast i32 %907 to float, !dbg !76
  %909 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %877, i1 %892, i32 0, i1 %892) #2, !dbg !76
  %910 = bitcast i32 %909 to float, !dbg !76
  %911 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %879, i1 %892, i32 0, i1 %892) #2, !dbg !76
  %912 = bitcast i32 %911 to float, !dbg !76
  %913 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %881, i1 %892, i32 0, i1 %892) #2, !dbg !76
  %914 = bitcast i32 %913 to float, !dbg !76
  %915 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %883, i1 %892, i32 0, i1 %892) #2, !dbg !76
  %916 = bitcast i32 %915 to float, !dbg !76
  %917 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %885, i1 %892, i32 0, i1 %892) #2, !dbg !76
  %918 = bitcast i32 %917 to float, !dbg !76
  %919 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %887, i1 %892, i32 0, i1 %892) #2, !dbg !76
  %920 = bitcast i32 %919 to float, !dbg !76
  %921 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %889, i1 %892, i32 0, i1 %892) #2, !dbg !76
  %922 = bitcast i32 %921 to float, !dbg !76
  %923 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %891, i1 %892, i32 0, i1 %892) #2, !dbg !76
  %924 = bitcast i32 %923 to float, !dbg !76
  %925 = fadd float %827, %894, !dbg !77
  %926 = fadd float %828, %896, !dbg !77
  %927 = fadd float %829, %898, !dbg !77
  %928 = fadd float %830, %900, !dbg !77
  %929 = fadd float %831, %902, !dbg !77
  %930 = fadd float %832, %904, !dbg !77
  %931 = fadd float %833, %906, !dbg !77
  %932 = fadd float %834, %908, !dbg !77
  %933 = fadd float %835, %910, !dbg !77
  %934 = fadd float %836, %912, !dbg !77
  %935 = fadd float %837, %914, !dbg !77
  %936 = fadd float %838, %916, !dbg !77
  %937 = fadd float %839, %918, !dbg !77
  %938 = fadd float %840, %920, !dbg !77
  %939 = fadd float %841, %922, !dbg !77
  %940 = fadd float %842, %924, !dbg !77
  %941 = mul nsw i32 %.decomposed73, %34, !dbg !78
  %942 = add nsw i32 %.decomposed73, 2, !dbg !79
  %943 = add nsw i32 %34, 2, !dbg !80
  %944 = insertelement <2 x i32> <i32 poison, i32 271>, i32 %.decomposed73, i64 0, !dbg !81
  %945 = insertelement <2 x i32> <i32 16, i32 poison>, i32 %22, i64 1, !dbg !81
  %946 = icmp slt <2 x i32> %944, %945, !dbg !81
  %947 = insertelement <2 x i32> <i32 poison, i32 18>, i32 %942, i64 0, !dbg !82
  %948 = select <2 x i1> %946, <2 x i32> %947, <2 x i32> zeroinitializer, !dbg !82
  %949 = insertelement <2 x i32> %944, i32 272, i64 1, !dbg !83
  %950 = insertelement <2 x i32> %945, i32 15, i64 0, !dbg !83
  %951 = icmp sgt <2 x i32> %949, %950, !dbg !83
  %952 = insertelement <2 x i32> <i32 18, i32 poison>, i32 %943, i64 1, !dbg !84
  %953 = select <2 x i1> %951, <2 x i32> %952, <2 x i32> zeroinitializer, !dbg !84
  %954 = add nsw <2 x i32> %953, %948, !dbg !85
  %955 = extractelement <2 x i32> %954, i64 0, !dbg !86
  %956 = extractelement <2 x i32> %954, i64 1, !dbg !87
  %957 = mul i32 %955, %956, !dbg !88
  %.neg68 = mul nsw i32 %956, %.decomposed73, !dbg !87
  %.neg69 = mul i32 %955, %34, !dbg !87
  %reass.add = add i32 %.neg68, %.neg69
  %958 = add nsw i32 %34, %.decomposed73, !dbg !89
  %reass.sub71 = sub i32 %941, %958, !dbg !89
  %959 = add i32 %reass.sub71, 1, !dbg !89
  %960 = add i32 %959, %955, !dbg !86
  %961 = add i32 %960, %956, !dbg !87
  %962 = add i32 %961, %957, !dbg !90
  %963 = sub i32 %962, %reass.add, !dbg !91
  %964 = sitofp i32 %963 to float, !dbg !92
  %965 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %925, float %964) #2, !dbg !92
  %966 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %926, float %964) #2, !dbg !92
  %967 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %927, float %964) #2, !dbg !92
  %968 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %928, float %964) #2, !dbg !92
  %969 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %929, float %964) #2, !dbg !92
  %970 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %930, float %964) #2, !dbg !92
  %971 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %931, float %964) #2, !dbg !92
  %972 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %932, float %964) #2, !dbg !92
  %973 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %933, float %964) #2, !dbg !92
  %974 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %934, float %964) #2, !dbg !92
  %975 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %935, float %964) #2, !dbg !92
  %976 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %936, float %964) #2, !dbg !92
  %977 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %937, float %964) #2, !dbg !92
  %978 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %938, float %964) #2, !dbg !92
  %979 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %939, float %964) #2, !dbg !92
  %980 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %940, float %964) #2, !dbg !92
  %981 = mul i32 %23, 768, !dbg !93
  %982 = mul i32 %24, 768, !dbg !93
  %983 = mul i32 %25, 768, !dbg !93
  %984 = mul i32 %26, 768, !dbg !93
  %985 = mul i32 %32, 221952, !dbg !94
  %986 = add i32 %985, %.decomposed, !dbg !95
  %987 = add i32 %986, %981, !dbg !96
  %988 = add i32 %986, %982, !dbg !96
  %989 = add i32 %986, %983, !dbg !96
  %990 = add i32 %986, %984, !dbg !96
  %991 = sext i32 %987 to i64, !dbg !97
  %992 = getelementptr float, ptr addrspace(1) %1, i64 %991, !dbg !97
  %993 = sext i32 %988 to i64, !dbg !97
  %994 = getelementptr float, ptr addrspace(1) %1, i64 %993, !dbg !97
  %995 = sext i32 %989 to i64, !dbg !97
  %996 = getelementptr float, ptr addrspace(1) %1, i64 %995, !dbg !97
  %997 = sext i32 %990 to i64, !dbg !97
  %998 = getelementptr float, ptr addrspace(1) %1, i64 %997, !dbg !97
  %999 = shl i32 %10, 6, !dbg !98
  %1000 = and i32 %999, 4032, !dbg !98
  %1001 = or disjoint i32 %1000, %12, !dbg !98
  %1002 = and i32 %13, 1020, !dbg !98
  %1003 = lshr exact i32 %1000, 2, !dbg !98
  %1004 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %1003, !dbg !98
  %1005 = getelementptr float, ptr addrspace(3) %1004, i32 %1001, !dbg !98
  %1006 = insertelement <1 x i32> poison, i32 %100, i64 0, !dbg !98
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1005, <1 x i32> %1006, i1 true) #2, !dbg !98
  %1007 = or disjoint i32 %1001, 4, !dbg !98
  %1008 = getelementptr float, ptr addrspace(3) %1004, i32 %1007, !dbg !98
  %1009 = insertelement <1 x i32> poison, i32 %101, i64 0, !dbg !98
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1008, <1 x i32> %1009, i1 true) #2, !dbg !98
  %1010 = or disjoint i32 %1001, 8, !dbg !98
  %1011 = getelementptr float, ptr addrspace(3) %1004, i32 %1010, !dbg !98
  %1012 = insertelement <1 x i32> poison, i32 %102, i64 0, !dbg !98
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1011, <1 x i32> %1012, i1 true) #2, !dbg !98
  %1013 = or disjoint i32 %1001, 12, !dbg !98
  %1014 = getelementptr float, ptr addrspace(3) %1004, i32 %1013, !dbg !98
  %1015 = insertelement <1 x i32> poison, i32 %103, i64 0, !dbg !98
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1014, <1 x i32> %1015, i1 true) #2, !dbg !98
  %1016 = or disjoint i32 %1001, 16, !dbg !98
  %1017 = getelementptr float, ptr addrspace(3) %1004, i32 %1016, !dbg !98
  %1018 = insertelement <1 x i32> poison, i32 %104, i64 0, !dbg !98
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1017, <1 x i32> %1018, i1 true) #2, !dbg !98
  %1019 = or disjoint i32 %1001, 20, !dbg !98
  %1020 = getelementptr float, ptr addrspace(3) %1004, i32 %1019, !dbg !98
  %1021 = insertelement <1 x i32> poison, i32 %105, i64 0, !dbg !98
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1020, <1 x i32> %1021, i1 true) #2, !dbg !98
  %1022 = or disjoint i32 %1001, 24, !dbg !98
  %1023 = getelementptr float, ptr addrspace(3) %1004, i32 %1022, !dbg !98
  %1024 = insertelement <1 x i32> poison, i32 %106, i64 0, !dbg !98
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1023, <1 x i32> %1024, i1 true) #2, !dbg !98
  %1025 = or disjoint i32 %1001, 28, !dbg !98
  %1026 = getelementptr float, ptr addrspace(3) %1004, i32 %1025, !dbg !98
  %1027 = insertelement <1 x i32> poison, i32 %107, i64 0, !dbg !98
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1026, <1 x i32> %1027, i1 true) #2, !dbg !98
  %1028 = or disjoint i32 %1001, 32, !dbg !98
  %1029 = getelementptr float, ptr addrspace(3) %1004, i32 %1028, !dbg !98
  %1030 = insertelement <1 x i32> poison, i32 %108, i64 0, !dbg !98
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1029, <1 x i32> %1030, i1 true) #2, !dbg !98
  %1031 = or disjoint i32 %1001, 36, !dbg !98
  %1032 = getelementptr float, ptr addrspace(3) %1004, i32 %1031, !dbg !98
  %1033 = insertelement <1 x i32> poison, i32 %109, i64 0, !dbg !98
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1032, <1 x i32> %1033, i1 true) #2, !dbg !98
  %1034 = or disjoint i32 %1001, 40, !dbg !98
  %1035 = getelementptr float, ptr addrspace(3) %1004, i32 %1034, !dbg !98
  %1036 = insertelement <1 x i32> poison, i32 %110, i64 0, !dbg !98
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1035, <1 x i32> %1036, i1 true) #2, !dbg !98
  %1037 = or disjoint i32 %1001, 44, !dbg !98
  %1038 = getelementptr float, ptr addrspace(3) %1004, i32 %1037, !dbg !98
  %1039 = insertelement <1 x i32> poison, i32 %111, i64 0, !dbg !98
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1038, <1 x i32> %1039, i1 true) #2, !dbg !98
  %1040 = or disjoint i32 %1001, 48, !dbg !98
  %1041 = getelementptr float, ptr addrspace(3) %1004, i32 %1040, !dbg !98
  %1042 = insertelement <1 x i32> poison, i32 %112, i64 0, !dbg !98
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1041, <1 x i32> %1042, i1 true) #2, !dbg !98
  %1043 = or disjoint i32 %1001, 52, !dbg !98
  %1044 = getelementptr float, ptr addrspace(3) %1004, i32 %1043, !dbg !98
  %1045 = insertelement <1 x i32> poison, i32 %113, i64 0, !dbg !98
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1044, <1 x i32> %1045, i1 true) #2, !dbg !98
  %1046 = or disjoint i32 %1001, 56, !dbg !98
  %1047 = getelementptr float, ptr addrspace(3) %1004, i32 %1046, !dbg !98
  %1048 = insertelement <1 x i32> poison, i32 %114, i64 0, !dbg !98
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1047, <1 x i32> %1048, i1 true) #2, !dbg !98
  %1049 = or disjoint i32 %1001, 60, !dbg !98
  %1050 = getelementptr float, ptr addrspace(3) %1004, i32 %1049, !dbg !98
  %1051 = insertelement <1 x i32> poison, i32 %115, i64 0, !dbg !98
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1050, <1 x i32> %1051, i1 true) #2, !dbg !98
  tail call void @llvm.nvvm.barrier0(), !dbg !98
  %1052 = lshr i32 %13, 4, !dbg !98
  %1053 = and i32 %1052, 60, !dbg !98
  %1054 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1053, !dbg !98
  %1055 = getelementptr inbounds float, ptr addrspace(3) %1054, i32 %1002, !dbg !98
  %1056 = or disjoint i32 %1002, 1024, !dbg !98
  %1057 = lshr i32 %1056, 4, !dbg !98
  %1058 = and i32 %1057, 124, !dbg !98
  %1059 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1058, !dbg !98
  %1060 = getelementptr inbounds float, ptr addrspace(3) %1059, i32 %1056, !dbg !98
  %1061 = load <4 x i32>, ptr addrspace(3) %1060, align 16, !dbg !98
  %1062 = or disjoint i32 %1002, 2048, !dbg !98
  %1063 = lshr i32 %1062, 4, !dbg !98
  %1064 = and i32 %1063, 188, !dbg !98
  %1065 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1064, !dbg !98
  %1066 = getelementptr inbounds float, ptr addrspace(3) %1065, i32 %1062, !dbg !98
  %1067 = load <4 x i32>, ptr addrspace(3) %1066, align 16, !dbg !98
  %1068 = or disjoint i32 %1002, 3072, !dbg !98
  %1069 = lshr i32 %1068, 4, !dbg !98
  %1070 = and i32 %1069, 252, !dbg !98
  %1071 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1070, !dbg !98
  %1072 = getelementptr inbounds float, ptr addrspace(3) %1071, i32 %1068, !dbg !98
  %1073 = load <4 x i32>, ptr addrspace(3) %1072, align 16, !dbg !98
  %.extract = load i32, ptr addrspace(3) %1055, align 16, !dbg !98
  %1074 = getelementptr inbounds i8, ptr addrspace(3) %1055, i32 4, !dbg !98
  %.extract20 = load i32, ptr addrspace(3) %1074, align 4, !dbg !98
  %1075 = getelementptr inbounds i8, ptr addrspace(3) %1055, i32 8, !dbg !98
  %.extract21 = load i32, ptr addrspace(3) %1075, align 8, !dbg !98
  %1076 = getelementptr inbounds i8, ptr addrspace(3) %1055, i32 12, !dbg !98
  %.extract22 = load i32, ptr addrspace(3) %1076, align 4, !dbg !98
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract20, i32 %.extract21, i32 %.extract22, ptr addrspace(1) %992, i1 %28) #2, !dbg !98
  %.extract23 = extractelement <4 x i32> %1061, i64 0, !dbg !98
  %.extract24 = extractelement <4 x i32> %1061, i64 1, !dbg !98
  %.extract25 = extractelement <4 x i32> %1061, i64 2, !dbg !98
  %.extract26 = extractelement <4 x i32> %1061, i64 3, !dbg !98
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract23, i32 %.extract24, i32 %.extract25, i32 %.extract26, ptr addrspace(1) %994, i1 %29) #2, !dbg !98
  %.extract27 = extractelement <4 x i32> %1067, i64 0, !dbg !98
  %.extract28 = extractelement <4 x i32> %1067, i64 1, !dbg !98
  %.extract29 = extractelement <4 x i32> %1067, i64 2, !dbg !98
  %.extract30 = extractelement <4 x i32> %1067, i64 3, !dbg !98
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract27, i32 %.extract28, i32 %.extract29, i32 %.extract30, ptr addrspace(1) %996, i1 %30) #2, !dbg !98
  %.extract31 = extractelement <4 x i32> %1073, i64 0, !dbg !98
  %.extract32 = extractelement <4 x i32> %1073, i64 1, !dbg !98
  %.extract33 = extractelement <4 x i32> %1073, i64 2, !dbg !98
  %.extract34 = extractelement <4 x i32> %1073, i64 3, !dbg !98
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract31, i32 %.extract32, i32 %.extract33, i32 %.extract34, ptr addrspace(1) %998, i1 %31) #2, !dbg !98
  %1077 = getelementptr float, ptr addrspace(1) %2, i64 %991, !dbg !99
  %1078 = getelementptr float, ptr addrspace(1) %2, i64 %993, !dbg !99
  %1079 = getelementptr float, ptr addrspace(1) %2, i64 %995, !dbg !99
  %1080 = getelementptr float, ptr addrspace(1) %2, i64 %997, !dbg !99
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract20, i32 %.extract21, i32 %.extract22, ptr addrspace(1) %1077, i1 %28) #2, !dbg !100
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract23, i32 %.extract24, i32 %.extract25, i32 %.extract26, ptr addrspace(1) %1078, i1 %29) #2, !dbg !100
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract27, i32 %.extract28, i32 %.extract29, i32 %.extract30, ptr addrspace(1) %1079, i1 %30) #2, !dbg !100
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract31, i32 %.extract32, i32 %.extract33, i32 %.extract34, ptr addrspace(1) %1080, i1 %31) #2, !dbg !100
  %1081 = getelementptr float, ptr addrspace(1) %3, i64 %991, !dbg !101
  %1082 = getelementptr float, ptr addrspace(1) %3, i64 %993, !dbg !101
  %1083 = getelementptr float, ptr addrspace(1) %3, i64 %995, !dbg !101
  %1084 = getelementptr float, ptr addrspace(1) %3, i64 %997, !dbg !101
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract20, i32 %.extract21, i32 %.extract22, ptr addrspace(1) %1081, i1 %28) #2, !dbg !102
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract23, i32 %.extract24, i32 %.extract25, i32 %.extract26, ptr addrspace(1) %1082, i1 %29) #2, !dbg !102
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract27, i32 %.extract28, i32 %.extract29, i32 %.extract30, ptr addrspace(1) %1083, i1 %30) #2, !dbg !102
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract31, i32 %.extract32, i32 %.extract33, i32 %.extract34, ptr addrspace(1) %1084, i1 %31) #2, !dbg !102
  %1085 = getelementptr float, ptr addrspace(1) %4, i64 %991, !dbg !103
  %1086 = getelementptr float, ptr addrspace(1) %4, i64 %993, !dbg !103
  %1087 = getelementptr float, ptr addrspace(1) %4, i64 %995, !dbg !103
  %1088 = getelementptr float, ptr addrspace(1) %4, i64 %997, !dbg !103
  tail call void @llvm.nvvm.barrier0(), !dbg !104
  %1089 = bitcast float %965 to <1 x i32>, !dbg !104
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1005, <1 x i32> %1089, i1 true) #2, !dbg !104
  %1090 = bitcast float %966 to <1 x i32>, !dbg !104
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1008, <1 x i32> %1090, i1 true) #2, !dbg !104
  %1091 = bitcast float %967 to <1 x i32>, !dbg !104
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1011, <1 x i32> %1091, i1 true) #2, !dbg !104
  %1092 = bitcast float %968 to <1 x i32>, !dbg !104
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1014, <1 x i32> %1092, i1 true) #2, !dbg !104
  %1093 = bitcast float %969 to <1 x i32>, !dbg !104
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1017, <1 x i32> %1093, i1 true) #2, !dbg !104
  %1094 = bitcast float %970 to <1 x i32>, !dbg !104
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1020, <1 x i32> %1094, i1 true) #2, !dbg !104
  %1095 = bitcast float %971 to <1 x i32>, !dbg !104
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1023, <1 x i32> %1095, i1 true) #2, !dbg !104
  %1096 = bitcast float %972 to <1 x i32>, !dbg !104
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1026, <1 x i32> %1096, i1 true) #2, !dbg !104
  %1097 = bitcast float %973 to <1 x i32>, !dbg !104
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1029, <1 x i32> %1097, i1 true) #2, !dbg !104
  %1098 = bitcast float %974 to <1 x i32>, !dbg !104
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1032, <1 x i32> %1098, i1 true) #2, !dbg !104
  %1099 = bitcast float %975 to <1 x i32>, !dbg !104
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1035, <1 x i32> %1099, i1 true) #2, !dbg !104
  %1100 = bitcast float %976 to <1 x i32>, !dbg !104
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1038, <1 x i32> %1100, i1 true) #2, !dbg !104
  %1101 = bitcast float %977 to <1 x i32>, !dbg !104
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1041, <1 x i32> %1101, i1 true) #2, !dbg !104
  %1102 = bitcast float %978 to <1 x i32>, !dbg !104
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1044, <1 x i32> %1102, i1 true) #2, !dbg !104
  %1103 = bitcast float %979 to <1 x i32>, !dbg !104
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1047, <1 x i32> %1103, i1 true) #2, !dbg !104
  %1104 = bitcast float %980 to <1 x i32>, !dbg !104
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1050, <1 x i32> %1104, i1 true) #2, !dbg !104
  tail call void @llvm.nvvm.barrier0(), !dbg !104
  %1105 = load <4 x i32>, ptr addrspace(3) %1060, align 16, !dbg !104
  %1106 = load <4 x i32>, ptr addrspace(3) %1066, align 16, !dbg !104
  %1107 = load <4 x i32>, ptr addrspace(3) %1072, align 16, !dbg !104
  %.extract50 = load i32, ptr addrspace(3) %1055, align 16, !dbg !104
  %.extract51 = load i32, ptr addrspace(3) %1074, align 4, !dbg !104
  %.extract52 = load i32, ptr addrspace(3) %1075, align 8, !dbg !104
  %.extract53 = load i32, ptr addrspace(3) %1076, align 4, !dbg !104
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract50, i32 %.extract51, i32 %.extract52, i32 %.extract53, ptr addrspace(1) %1085, i1 %28) #2, !dbg !104
  %.extract54 = extractelement <4 x i32> %1105, i64 0, !dbg !104
  %.extract55 = extractelement <4 x i32> %1105, i64 1, !dbg !104
  %.extract56 = extractelement <4 x i32> %1105, i64 2, !dbg !104
  %.extract57 = extractelement <4 x i32> %1105, i64 3, !dbg !104
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract54, i32 %.extract55, i32 %.extract56, i32 %.extract57, ptr addrspace(1) %1086, i1 %29) #2, !dbg !104
  %.extract58 = extractelement <4 x i32> %1106, i64 0, !dbg !104
  %.extract59 = extractelement <4 x i32> %1106, i64 1, !dbg !104
  %.extract60 = extractelement <4 x i32> %1106, i64 2, !dbg !104
  %.extract61 = extractelement <4 x i32> %1106, i64 3, !dbg !104
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract58, i32 %.extract59, i32 %.extract60, i32 %.extract61, ptr addrspace(1) %1087, i1 %30) #2, !dbg !104
  %.extract62 = extractelement <4 x i32> %1107, i64 0, !dbg !104
  %.extract63 = extractelement <4 x i32> %1107, i64 1, !dbg !104
  %.extract64 = extractelement <4 x i32> %1107, i64 2, !dbg !104
  %.extract65 = extractelement <4 x i32> %1107, i64 3, !dbg !104
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract62, i32 %.extract63, i32 %.extract64, i32 %.extract65, ptr addrspace(1) %1088, i1 %31) #2, !dbg !104
  ret void, !dbg !105
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cs2j5royqnc2fmua5gkrzqppc2lacurnryxspqfkcbmgxxnegkel.py", directory: "inductor_cache/s2")
!4 = !{ptr @triton_poi_fused_avg_pool2d_convolution_28, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_avg_pool2d_convolution_28, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_avg_pool2d_convolution_28", linkageName: "triton_poi_fused_avg_pool2d_convolution_28", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 31, column: 19, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 19, scope: !7)
!22 = !DILocation(line: 33, column: 19, scope: !7)
!23 = !DILocation(line: 34, column: 39, scope: !7)
!24 = !DILocation(line: 34, column: 35, scope: !7)
!25 = !DILocation(line: 34, column: 30, scope: !7)
!26 = !DILocation(line: 34, column: 44, scope: !7)
!27 = !DILocation(line: 42, column: 19, scope: !7)
!28 = !DILocation(line: 46, column: 39, scope: !7)
!29 = !DILocation(line: 46, column: 44, scope: !7)
!30 = !DILocation(line: 46, column: 31, scope: !7)
!31 = !DILocation(line: 46, column: 61, scope: !7)
!32 = !DILocation(line: 46, column: 53, scope: !7)
!33 = !DILocation(line: 48, column: 21, scope: !7)
!34 = !DILocation(line: 52, column: 44, scope: !7)
!35 = !DILocation(line: 52, column: 31, scope: !7)
!36 = !DILocation(line: 52, column: 61, scope: !7)
!37 = !DILocation(line: 52, column: 53, scope: !7)
!38 = !DILocation(line: 53, column: 20, scope: !7)
!39 = !DILocation(line: 57, column: 20, scope: !7)
!40 = !DILocation(line: 59, column: 39, scope: !7)
!41 = !DILocation(line: 59, column: 44, scope: !7)
!42 = !DILocation(line: 59, column: 31, scope: !7)
!43 = !DILocation(line: 59, column: 61, scope: !7)
!44 = !DILocation(line: 59, column: 53, scope: !7)
!45 = !DILocation(line: 60, column: 20, scope: !7)
!46 = !DILocation(line: 66, column: 38, scope: !7)
!47 = !DILocation(line: 66, column: 43, scope: !7)
!48 = !DILocation(line: 66, column: 31, scope: !7)
!49 = !DILocation(line: 66, column: 60, scope: !7)
!50 = !DILocation(line: 66, column: 52, scope: !7)
!51 = !DILocation(line: 67, column: 20, scope: !7)
!52 = !DILocation(line: 69, column: 53, scope: !7)
!53 = !DILocation(line: 69, column: 45, scope: !7)
!54 = !DILocation(line: 70, column: 20, scope: !7)
!55 = !DILocation(line: 72, column: 35, scope: !7)
!56 = !DILocation(line: 72, column: 40, scope: !7)
!57 = !DILocation(line: 72, column: 31, scope: !7)
!58 = !DILocation(line: 72, column: 57, scope: !7)
!59 = !DILocation(line: 72, column: 49, scope: !7)
!60 = !DILocation(line: 73, column: 20, scope: !7)
!61 = !DILocation(line: 79, column: 41, scope: !7)
!62 = !DILocation(line: 79, column: 31, scope: !7)
!63 = !DILocation(line: 79, column: 58, scope: !7)
!64 = !DILocation(line: 79, column: 50, scope: !7)
!65 = !DILocation(line: 80, column: 20, scope: !7)
!66 = !DILocation(line: 82, column: 36, scope: !7)
!67 = !DILocation(line: 82, column: 41, scope: !7)
!68 = !DILocation(line: 82, column: 31, scope: !7)
!69 = !DILocation(line: 82, column: 58, scope: !7)
!70 = !DILocation(line: 82, column: 50, scope: !7)
!71 = !DILocation(line: 83, column: 20, scope: !7)
!72 = !DILocation(line: 85, column: 36, scope: !7)
!73 = !DILocation(line: 85, column: 41, scope: !7)
!74 = !DILocation(line: 85, column: 31, scope: !7)
!75 = !DILocation(line: 85, column: 58, scope: !7)
!76 = !DILocation(line: 85, column: 50, scope: !7)
!77 = !DILocation(line: 86, column: 20, scope: !7)
!78 = !DILocation(line: 87, column: 43, scope: !7)
!79 = !DILocation(line: 87, column: 70, scope: !7)
!80 = !DILocation(line: 87, column: 129, scope: !7)
!81 = !DILocation(line: 87, column: 101, scope: !7)
!82 = !DILocation(line: 87, column: 89, scope: !7)
!83 = !DILocation(line: 87, column: 66, scope: !7)
!84 = !DILocation(line: 87, column: 57, scope: !7)
!85 = !DILocation(line: 87, column: 77, scope: !7)
!86 = !DILocation(line: 87, column: 48, scope: !7)
!87 = !DILocation(line: 87, column: 240, scope: !7)
!88 = !DILocation(line: 87, column: 108, scope: !7)
!89 = !DILocation(line: 87, column: 40, scope: !7)
!90 = !DILocation(line: 87, column: 311, scope: !7)
!91 = !DILocation(line: 87, column: 372, scope: !7)
!92 = !DILocation(line: 88, column: 20, scope: !7)
!93 = !DILocation(line: 89, column: 34, scope: !7)
!94 = !DILocation(line: 89, column: 46, scope: !7)
!95 = !DILocation(line: 89, column: 30, scope: !7)
!96 = !DILocation(line: 89, column: 39, scope: !7)
!97 = !DILocation(line: 89, column: 25, scope: !7)
!98 = !DILocation(line: 89, column: 57, scope: !7)
!99 = !DILocation(line: 90, column: 25, scope: !7)
!100 = !DILocation(line: 90, column: 57, scope: !7)
!101 = !DILocation(line: 91, column: 25, scope: !7)
!102 = !DILocation(line: 91, column: 57, scope: !7)
!103 = !DILocation(line: 92, column: 25, scope: !7)
!104 = !DILocation(line: 92, column: 58, scope: !7)
!105 = !DILocation(line: 92, column: 4, scope: !7)
