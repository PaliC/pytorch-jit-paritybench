; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_red_fused_convolution_native_layer_norm_32(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %11 = icmp slt i32 %10, 16, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = and i32 %12, 31, !dbg !12
  %14 = lshr i32 %12, 5, !dbg !12
  %15 = shl i32 %12, 2, !dbg !12
  %16 = and i32 %15, 1020, !dbg !12
  %17 = sdiv i32 %10, 2, !dbg !13
  %18 = insertelement <2 x i32> poison, i32 %17, i64 0, !dbg !14
  %19 = insertelement <2 x i32> %18, i32 %10, i64 1, !dbg !14
  %20 = srem <2 x i32> %19, splat (i32 2), !dbg !14
  %21 = sdiv i32 %10, 4, !dbg !15
  %22 = icmp samesign ult i32 %16, 768, !dbg !16
  %23 = mul i32 %10, 768, !dbg !17
  %24 = add i32 %23, %16, !dbg !18
  %25 = sext i32 %24 to i64, !dbg !19
  %26 = getelementptr float, ptr addrspace(1) %0, i64 %25, !dbg !19
  %27 = and i1 %22, %11, !dbg !20
  %28 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %26, i1 %27, i32 0, i1 %27, i32 0, i1 %27, i32 0, i1 %27, i32 0, i1 %27) #5, !dbg !21
  %29 = extractvalue { i32, i32, i32, i32 } %28, 0, !dbg !21
  %30 = extractvalue { i32, i32, i32, i32 } %28, 1, !dbg !21
  %31 = extractvalue { i32, i32, i32, i32 } %28, 2, !dbg !21
  %32 = extractvalue { i32, i32, i32, i32 } %28, 3, !dbg !21
  %33 = bitcast i32 %29 to float, !dbg !21
  %34 = bitcast i32 %30 to float, !dbg !21
  %35 = bitcast i32 %31 to float, !dbg !21
  %36 = bitcast i32 %32 to float, !dbg !21
  %37 = zext nneg i32 %16 to i64, !dbg !22
  %38 = getelementptr float, ptr addrspace(1) %1, i64 %37, !dbg !22
  %39 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %38, i1 %22, i32 0, i1 %22, i32 0, i1 %22, i32 0, i1 %22, i32 0, i1 %22) #5, !dbg !23
  %40 = extractvalue { i32, i32, i32, i32 } %39, 0, !dbg !23
  %41 = extractvalue { i32, i32, i32, i32 } %39, 1, !dbg !23
  %42 = extractvalue { i32, i32, i32, i32 } %39, 2, !dbg !23
  %43 = extractvalue { i32, i32, i32, i32 } %39, 3, !dbg !23
  %44 = bitcast i32 %40 to float, !dbg !23
  %45 = bitcast i32 %41 to float, !dbg !23
  %46 = bitcast i32 %42 to float, !dbg !23
  %47 = bitcast i32 %43 to float, !dbg !23
  %48 = fadd float %33, %44, !dbg !24
  %49 = fadd float %34, %45, !dbg !24
  %50 = fadd float %35, %46, !dbg !24
  %51 = fadd float %36, %47, !dbg !24
  %52 = select i1 %27, float %48, float 0.000000e+00, !dbg !25
  %53 = select i1 %27, float %49, float 0.000000e+00, !dbg !25
  %54 = select i1 %27, float %50, float 0.000000e+00, !dbg !25
  %55 = select i1 %27, float %51, float 0.000000e+00, !dbg !25
  %56 = select i1 %27, float 1.000000e+00, float 0.000000e+00, !dbg !26
  %57 = bitcast float %48 to i32, !dbg !27
  %58 = bitcast float %49 to i32, !dbg !27
  %59 = bitcast float %50 to i32, !dbg !27
  %60 = bitcast float %51 to i32, !dbg !27
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %57, i32 %58, i32 %59, i32 %60, ptr addrspace(1) %26, i1 %27) #5, !dbg !27
  %61 = fsub float %53, %52, !dbg !28
  %62 = select i1 %27, float 2.000000e+00, float 0.000000e+00, !dbg !33
  %63 = fcmp oeq float %62, 0.000000e+00, !dbg !34
  %64 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %56, float %62) #5, !dbg !35
  %65 = select i1 %63, float 0.000000e+00, float %64, !dbg !36
  %66 = fmul float %65, %61, !dbg !37
  %67 = fadd float %52, %66, !dbg !38
  %68 = fmul float %61, %61, !dbg !39
  %69 = fmul float %56, %68, !dbg !40
  %70 = fmul float %65, %69, !dbg !41
  %71 = fadd float %70, 0.000000e+00, !dbg !42
  %72 = fsub float %54, %67, !dbg !28
  %73 = select i1 %27, float 3.000000e+00, float 0.000000e+00, !dbg !33
  %74 = fcmp oeq float %73, 0.000000e+00, !dbg !34
  %75 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %56, float %73) #5, !dbg !35
  %76 = select i1 %74, float 0.000000e+00, float %75, !dbg !36
  %77 = fmul float %76, %72, !dbg !37
  %78 = fadd float %67, %77, !dbg !38
  %79 = fmul float %72, %72, !dbg !39
  %80 = fmul float %62, %79, !dbg !40
  %81 = fmul float %76, %80, !dbg !41
  %82 = fadd float %71, %81, !dbg !42
  %83 = fsub float %55, %78, !dbg !28
  %84 = select i1 %27, float 4.000000e+00, float 0.000000e+00, !dbg !33
  %85 = fcmp oeq float %84, 0.000000e+00, !dbg !34
  %86 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %56, float %84) #5, !dbg !35
  %87 = select i1 %85, float 0.000000e+00, float %86, !dbg !36
  %88 = fmul float %87, %83, !dbg !37
  %89 = fadd float %78, %88, !dbg !38
  %90 = fmul float %83, %83, !dbg !39
  %91 = fmul float %73, %90, !dbg !40
  %92 = fmul float %87, %91, !dbg !41
  %93 = fadd float %82, %92, !dbg !42
  %94 = bitcast float %89 to i32, !dbg !43
  %95 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %94, i32 16, i32 31), !dbg !43
  %96 = bitcast i32 %95 to float, !dbg !43
  %97 = bitcast float %93 to i32, !dbg !43
  %98 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %97, i32 16, i32 31), !dbg !43
  %99 = bitcast i32 %98 to float, !dbg !43
  %100 = bitcast float %84 to i32, !dbg !43
  %101 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %100, i32 16, i32 31), !dbg !43
  %102 = bitcast i32 %101 to float, !dbg !43
  %103 = fsub float %96, %89, !dbg !28
  %104 = fadd float %84, %102, !dbg !33
  %105 = fcmp oeq float %104, 0.000000e+00, !dbg !34
  %106 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %102, float %104) #5, !dbg !35
  %107 = select i1 %105, float 0.000000e+00, float %106, !dbg !36
  %108 = fmul float %107, %103, !dbg !37
  %109 = fadd float %89, %108, !dbg !38
  %110 = fadd float %93, %99, !dbg !44
  %111 = fmul float %103, %103, !dbg !39
  %112 = fmul float %84, %111, !dbg !40
  %113 = fmul float %107, %112, !dbg !41
  %114 = fadd float %110, %113, !dbg !42
  %115 = bitcast float %109 to i32, !dbg !43
  %116 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %115, i32 8, i32 31), !dbg !43
  %117 = bitcast i32 %116 to float, !dbg !43
  %118 = bitcast float %114 to i32, !dbg !43
  %119 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %118, i32 8, i32 31), !dbg !43
  %120 = bitcast i32 %119 to float, !dbg !43
  %121 = bitcast float %104 to i32, !dbg !43
  %122 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %121, i32 8, i32 31), !dbg !43
  %123 = bitcast i32 %122 to float, !dbg !43
  %124 = fsub float %117, %109, !dbg !28
  %125 = fadd float %104, %123, !dbg !33
  %126 = fcmp oeq float %125, 0.000000e+00, !dbg !34
  %127 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %123, float %125) #5, !dbg !35
  %128 = select i1 %126, float 0.000000e+00, float %127, !dbg !36
  %129 = fmul float %128, %124, !dbg !37
  %130 = fadd float %109, %129, !dbg !38
  %131 = fadd float %114, %120, !dbg !44
  %132 = fmul float %124, %124, !dbg !39
  %133 = fmul float %104, %132, !dbg !40
  %134 = fmul float %128, %133, !dbg !41
  %135 = fadd float %131, %134, !dbg !42
  %136 = bitcast float %130 to i32, !dbg !43
  %137 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %136, i32 4, i32 31), !dbg !43
  %138 = bitcast i32 %137 to float, !dbg !43
  %139 = bitcast float %135 to i32, !dbg !43
  %140 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %139, i32 4, i32 31), !dbg !43
  %141 = bitcast i32 %140 to float, !dbg !43
  %142 = bitcast float %125 to i32, !dbg !43
  %143 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %142, i32 4, i32 31), !dbg !43
  %144 = bitcast i32 %143 to float, !dbg !43
  %145 = fsub float %138, %130, !dbg !28
  %146 = fadd float %125, %144, !dbg !33
  %147 = fcmp oeq float %146, 0.000000e+00, !dbg !34
  %148 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %144, float %146) #5, !dbg !35
  %149 = select i1 %147, float 0.000000e+00, float %148, !dbg !36
  %150 = fmul float %149, %145, !dbg !37
  %151 = fadd float %130, %150, !dbg !38
  %152 = fadd float %135, %141, !dbg !44
  %153 = fmul float %145, %145, !dbg !39
  %154 = fmul float %125, %153, !dbg !40
  %155 = fmul float %149, %154, !dbg !41
  %156 = fadd float %152, %155, !dbg !42
  %157 = bitcast float %151 to i32, !dbg !43
  %158 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %157, i32 2, i32 31), !dbg !43
  %159 = bitcast i32 %158 to float, !dbg !43
  %160 = bitcast float %156 to i32, !dbg !43
  %161 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %160, i32 2, i32 31), !dbg !43
  %162 = bitcast i32 %161 to float, !dbg !43
  %163 = bitcast float %146 to i32, !dbg !43
  %164 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %163, i32 2, i32 31), !dbg !43
  %165 = bitcast i32 %164 to float, !dbg !43
  %166 = fsub float %159, %151, !dbg !28
  %167 = fadd float %146, %165, !dbg !33
  %168 = fcmp oeq float %167, 0.000000e+00, !dbg !34
  %169 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %165, float %167) #5, !dbg !35
  %170 = select i1 %168, float 0.000000e+00, float %169, !dbg !36
  %171 = fmul float %166, %170, !dbg !37
  %172 = fadd float %151, %171, !dbg !38
  %173 = fadd float %156, %162, !dbg !44
  %174 = fmul float %166, %166, !dbg !39
  %175 = fmul float %146, %174, !dbg !40
  %176 = fmul float %170, %175, !dbg !41
  %177 = fadd float %173, %176, !dbg !42
  %178 = bitcast float %172 to i32, !dbg !43
  %179 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %178, i32 1, i32 31), !dbg !43
  %180 = bitcast i32 %179 to float, !dbg !43
  %181 = bitcast float %177 to i32, !dbg !43
  %182 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %181, i32 1, i32 31), !dbg !43
  %183 = bitcast i32 %182 to float, !dbg !43
  %184 = bitcast float %167 to i32, !dbg !43
  %185 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %184, i32 1, i32 31), !dbg !43
  %186 = bitcast i32 %185 to float, !dbg !43
  %187 = fsub float %180, %172, !dbg !28
  %188 = fadd float %167, %186, !dbg !33
  %189 = fcmp oeq float %188, 0.000000e+00, !dbg !34
  %190 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %186, float %188) #5, !dbg !35
  %191 = select i1 %189, float 0.000000e+00, float %190, !dbg !36
  %192 = fmul float %187, %191, !dbg !37
  %193 = fadd float %172, %192, !dbg !38
  %194 = fadd float %177, %183, !dbg !44
  %195 = fmul float %187, %187, !dbg !39
  %196 = fmul float %167, %195, !dbg !40
  %197 = fmul float %191, %196, !dbg !41
  %198 = fadd float %194, %197, !dbg !42
  %199 = icmp eq i32 %13, 0, !dbg !43
  %200 = and i32 %14, 7, !dbg !43
  %201 = zext nneg i32 %200 to i64, !dbg !43
  %202 = getelementptr float, ptr addrspace(3) @global_smem, i64 %201, !dbg !43
  %203 = bitcast float %193 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %202, <1 x i32> %203, i1 %199) #5, !dbg !43
  %204 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32), i64 %201, !dbg !43
  %205 = bitcast float %198 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %204, <1 x i32> %205, i1 %199) #5, !dbg !43
  %206 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %201, !dbg !43
  %207 = bitcast float %188 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %206, <1 x i32> %207, i1 %199) #5, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %208 = icmp slt i32 %12, 8, !dbg !43
  %209 = sext i32 %12 to i64, !dbg !43
  %210 = getelementptr float, ptr addrspace(3) @global_smem, i64 %209, !dbg !43
  %211 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %210, i1 %208) #5, !dbg !43
  %212 = bitcast i32 %211 to float, !dbg !43
  %213 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32), i64 %209, !dbg !43
  %214 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %213, i1 %208) #5, !dbg !43
  %215 = bitcast i32 %214 to float, !dbg !43
  %216 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %209, !dbg !43
  %217 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %216, i1 %208) #5, !dbg !43
  %218 = bitcast i32 %217 to float, !dbg !43
  %219 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %211, i32 4, i32 31), !dbg !43
  %220 = bitcast i32 %219 to float, !dbg !43
  %221 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %214, i32 4, i32 31), !dbg !43
  %222 = bitcast i32 %221 to float, !dbg !43
  %223 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %217, i32 4, i32 31), !dbg !43
  %224 = bitcast i32 %223 to float, !dbg !43
  %225 = fsub float %220, %212, !dbg !28
  %226 = fadd float %218, %224, !dbg !33
  %227 = fcmp oeq float %226, 0.000000e+00, !dbg !34
  %228 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %224, float %226) #5, !dbg !35
  %229 = select i1 %227, float 0.000000e+00, float %228, !dbg !36
  %230 = fmul float %225, %229, !dbg !37
  %231 = fadd float %230, %212, !dbg !38
  %232 = fadd float %215, %222, !dbg !44
  %233 = fmul float %225, %225, !dbg !39
  %234 = fmul float %233, %218, !dbg !40
  %235 = fmul float %234, %229, !dbg !41
  %236 = fadd float %232, %235, !dbg !42
  %237 = bitcast float %231 to i32, !dbg !43
  %238 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %237, i32 2, i32 31), !dbg !43
  %239 = bitcast i32 %238 to float, !dbg !43
  %240 = bitcast float %236 to i32, !dbg !43
  %241 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %240, i32 2, i32 31), !dbg !43
  %242 = bitcast i32 %241 to float, !dbg !43
  %243 = bitcast float %226 to i32, !dbg !43
  %244 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %243, i32 2, i32 31), !dbg !43
  %245 = bitcast i32 %244 to float, !dbg !43
  %246 = fsub float %239, %231, !dbg !28
  %247 = fadd float %226, %245, !dbg !33
  %248 = fcmp oeq float %247, 0.000000e+00, !dbg !34
  %249 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %245, float %247) #5, !dbg !35
  %250 = select i1 %248, float 0.000000e+00, float %249, !dbg !36
  %251 = fmul float %246, %250, !dbg !37
  %252 = fadd float %231, %251, !dbg !38
  %253 = fadd float %236, %242, !dbg !44
  %254 = fmul float %246, %246, !dbg !39
  %255 = fmul float %226, %254, !dbg !40
  %256 = fmul float %250, %255, !dbg !41
  %257 = fadd float %253, %256, !dbg !42
  %258 = bitcast float %252 to i32, !dbg !43
  %259 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %258, i32 1, i32 31), !dbg !43
  %260 = bitcast i32 %259 to float, !dbg !43
  %261 = bitcast float %257 to i32, !dbg !43
  %262 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %261, i32 1, i32 31), !dbg !43
  %263 = bitcast i32 %262 to float, !dbg !43
  %264 = bitcast float %247 to i32, !dbg !43
  %265 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %264, i32 1, i32 31), !dbg !43
  %266 = bitcast i32 %265 to float, !dbg !43
  %267 = fsub float %260, %252, !dbg !28
  %268 = fadd float %247, %266, !dbg !33
  %269 = fcmp oeq float %268, 0.000000e+00, !dbg !34
  %270 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %266, float %268) #5, !dbg !35
  %271 = select i1 %269, float 0.000000e+00, float %270, !dbg !36
  %272 = fmul float %267, %271, !dbg !37
  %273 = fadd float %252, %272, !dbg !38
  %274 = fadd float %257, %263, !dbg !44
  %275 = fmul float %267, %267, !dbg !39
  %276 = fmul float %247, %275, !dbg !40
  %277 = fmul float %271, %276, !dbg !41
  %278 = fadd float %274, %277, !dbg !42
  %279 = and i32 %12, 7, !dbg !43
  %280 = icmp eq i32 %279, 0, !dbg !43
  %281 = and i1 %208, %280, !dbg !43
  %282 = bitcast float %273 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %210, <1 x i32> %282, i1 %281) #5, !dbg !43
  %283 = bitcast float %278 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %213, <1 x i32> %283, i1 %281) #5, !dbg !43
  %284 = bitcast float %268 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %216, <1 x i32> %284, i1 %281) #5, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %285 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !43
  %286 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 32), align 16, !dbg !43
  %287 = extractelement <2 x i32> %20, i64 1, !dbg !45
  %288 = shl nsw i32 %287, 1, !dbg !45
  %289 = extractelement <2 x i32> %20, i64 0, !dbg !46
  %290 = add nsw i32 %289, %288, !dbg !46
  %291 = shl nsw i32 %21, 2, !dbg !47
  %292 = add i32 %290, %291, !dbg !48
  %293 = sext i32 %292 to i64, !dbg !49
  %294 = getelementptr float, ptr addrspace(1) %4, i64 %293, !dbg !49
  %urem = and i32 %12, 255, !dbg !50
  %295 = icmp eq i32 %urem, 0, !dbg !50
  %296 = bitcast float %285 to i32, !dbg !50
  %297 = and i1 %295, %11, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %296, ptr addrspace(1) %294, i1 %297) #5, !dbg !50
  %298 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %286, float 7.680000e+02) #5, !dbg !51
  %299 = fadd float %298, 0x3EB0C6F7A0000000, !dbg !52
  %300 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %.not.i = icmp eq i32 %300, 0, !dbg !53
  br i1 %.not.i, label %303, label %301, !dbg !53

301:                                              ; preds = %9
  %302 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %299), !dbg !53
  br label %__nv_rsqrtf.exit, !dbg !53

303:                                              ; preds = %9
  %304 = tail call float @llvm.nvvm.rsqrt.approx.f(float %299), !dbg !53
  br label %__nv_rsqrtf.exit, !dbg !53

__nv_rsqrtf.exit:                                 ; preds = %301, %303
  %.0.i = phi float [ %302, %301 ], [ %304, %303 ], !dbg !53
  %305 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %306 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %307 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %308 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %.not.i10 = icmp eq i32 %308, 0, !dbg !53
  br i1 %.not.i10, label %311, label %309, !dbg !53

309:                                              ; preds = %__nv_rsqrtf.exit
  %310 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %299), !dbg !53
  br label %__nv_rsqrtf.exit12, !dbg !53

311:                                              ; preds = %__nv_rsqrtf.exit
  %312 = tail call float @llvm.nvvm.rsqrt.approx.f(float %299), !dbg !53
  br label %__nv_rsqrtf.exit12, !dbg !53

__nv_rsqrtf.exit12:                               ; preds = %309, %311
  %.0.i11 = phi float [ %310, %309 ], [ %312, %311 ], !dbg !53
  %313 = getelementptr float, ptr addrspace(1) %5, i64 %293, !dbg !54
  %314 = bitcast float %.0.i to i32, !dbg !55
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %314, ptr addrspace(1) %313, i1 %297) #5, !dbg !55
  %315 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %26, i1 %27, i32 0, i1 %27, i32 0, i1 %27, i32 0, i1 %27, i32 0, i1 %27) #5, !dbg !56
  %316 = extractvalue { i32, i32, i32, i32 } %315, 0, !dbg !56
  %317 = extractvalue { i32, i32, i32, i32 } %315, 1, !dbg !56
  %318 = extractvalue { i32, i32, i32, i32 } %315, 2, !dbg !56
  %319 = extractvalue { i32, i32, i32, i32 } %315, 3, !dbg !56
  %320 = bitcast i32 %316 to float, !dbg !56
  %321 = bitcast i32 %317 to float, !dbg !56
  %322 = bitcast i32 %318 to float, !dbg !56
  %323 = bitcast i32 %319 to float, !dbg !56
  %324 = getelementptr float, ptr addrspace(1) %2, i64 %37, !dbg !57
  %325 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %324, i1 %22, i32 0, i1 %22, i32 0, i1 %22, i32 0, i1 %22, i32 0, i1 %22) #5, !dbg !58
  %326 = extractvalue { i32, i32, i32, i32 } %325, 0, !dbg !58
  %327 = extractvalue { i32, i32, i32, i32 } %325, 1, !dbg !58
  %328 = extractvalue { i32, i32, i32, i32 } %325, 2, !dbg !58
  %329 = extractvalue { i32, i32, i32, i32 } %325, 3, !dbg !58
  %330 = bitcast i32 %326 to float, !dbg !58
  %331 = bitcast i32 %327 to float, !dbg !58
  %332 = bitcast i32 %328 to float, !dbg !58
  %333 = bitcast i32 %329 to float, !dbg !58
  %334 = getelementptr float, ptr addrspace(1) %3, i64 %37, !dbg !59
  %335 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %334, i1 %22, i32 0, i1 %22, i32 0, i1 %22, i32 0, i1 %22, i32 0, i1 %22) #5, !dbg !60
  %336 = extractvalue { i32, i32, i32, i32 } %335, 0, !dbg !60
  %337 = extractvalue { i32, i32, i32, i32 } %335, 1, !dbg !60
  %338 = extractvalue { i32, i32, i32, i32 } %335, 2, !dbg !60
  %339 = extractvalue { i32, i32, i32, i32 } %335, 3, !dbg !60
  %340 = bitcast i32 %336 to float, !dbg !60
  %341 = bitcast i32 %337 to float, !dbg !60
  %342 = bitcast i32 %338 to float, !dbg !60
  %343 = bitcast i32 %339 to float, !dbg !60
  %344 = fsub float %320, %285, !dbg !61
  %345 = fsub float %321, %285, !dbg !61
  %346 = fsub float %322, %285, !dbg !61
  %347 = fsub float %323, %285, !dbg !61
  %348 = fmul float %.0.i11, %344, !dbg !62
  %349 = fmul float %.0.i11, %345, !dbg !62
  %350 = fmul float %.0.i11, %346, !dbg !62
  %351 = fmul float %.0.i11, %347, !dbg !62
  %352 = fmul float %348, %330, !dbg !63
  %353 = fmul float %349, %331, !dbg !63
  %354 = fmul float %350, %332, !dbg !63
  %355 = fmul float %351, %333, !dbg !63
  %356 = fadd float %352, %340, !dbg !64
  %357 = fadd float %353, %341, !dbg !64
  %358 = fadd float %354, %342, !dbg !64
  %359 = fadd float %355, %343, !dbg !64
  %360 = getelementptr float, ptr addrspace(1) %6, i64 %25, !dbg !65
  %361 = bitcast float %356 to i32, !dbg !66
  %362 = bitcast float %357 to i32, !dbg !66
  %363 = bitcast float %358 to i32, !dbg !66
  %364 = bitcast float %359 to i32, !dbg !66
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %361, i32 %362, i32 %363, i32 %364, ptr addrspace(1) %360, i1 %27) #5, !dbg !66
  ret void, !dbg !67
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "coliphs4rxgj6boypzskjfdo22bgsfzzx6b7vmweokh2m4uncwi6.py", directory: "inductor_cache/ol")
!4 = !{ptr @triton_red_fused_convolution_native_layer_norm_32, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_convolution_native_layer_norm_32, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_convolution_native_layer_norm_32", linkageName: "triton_red_fused_convolution_native_layer_norm_32", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 33, scope: !7)
!13 = !DILocation(line: 31, column: 21, scope: !7)
!14 = !DILocation(line: 31, column: 26, scope: !7)
!15 = !DILocation(line: 32, column: 19, scope: !7)
!16 = !DILocation(line: 35, column: 25, scope: !7)
!17 = !DILocation(line: 37, column: 47, scope: !7)
!18 = !DILocation(line: 37, column: 43, scope: !7)
!19 = !DILocation(line: 37, column: 38, scope: !7)
!20 = !DILocation(line: 37, column: 60, scope: !7)
!21 = !DILocation(line: 37, column: 52, scope: !7)
!22 = !DILocation(line: 38, column: 34, scope: !7)
!23 = !DILocation(line: 38, column: 39, scope: !7)
!24 = !DILocation(line: 39, column: 22, scope: !7)
!25 = !DILocation(line: 44, column: 60, scope: !7)
!26 = !DILocation(line: 46, column: 64, scope: !7)
!27 = !DILocation(line: 47, column: 52, scope: !7)
!28 = !DILocation(line: 192, column: 21, scope: !29, inlinedAt: !32)
!29 = distinct !DILexicalBlockFile(scope: !31, file: !30, discriminator: 0)
!30 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!31 = distinct !DILexicalBlockFile(scope: !7, file: !30, discriminator: 0)
!32 = !DILocation(line: 49, column: 41, scope: !7)
!33 = !DILocation(line: 193, column: 28, scope: !29, inlinedAt: !32)
!34 = !DILocation(line: 194, column: 39, scope: !29, inlinedAt: !32)
!35 = !DILocation(line: 194, column: 60, scope: !29, inlinedAt: !32)
!36 = !DILocation(line: 194, column: 49, scope: !29, inlinedAt: !32)
!37 = !DILocation(line: 196, column: 25, scope: !29, inlinedAt: !32)
!38 = !DILocation(line: 196, column: 17, scope: !29, inlinedAt: !32)
!39 = !DILocation(line: 197, column: 30, scope: !29, inlinedAt: !32)
!40 = !DILocation(line: 197, column: 38, scope: !29, inlinedAt: !32)
!41 = !DILocation(line: 197, column: 49, scope: !29, inlinedAt: !32)
!42 = !DILocation(line: 197, column: 22, scope: !29, inlinedAt: !32)
!43 = !DILocation(line: 204, column: 46, scope: !31, inlinedAt: !32)
!44 = !DILocation(line: 197, column: 15, scope: !29, inlinedAt: !32)
!45 = !DILocation(line: 54, column: 32, scope: !7)
!46 = !DILocation(line: 54, column: 30, scope: !7)
!47 = !DILocation(line: 54, column: 39, scope: !7)
!48 = !DILocation(line: 54, column: 37, scope: !7)
!49 = !DILocation(line: 54, column: 25, scope: !7)
!50 = !DILocation(line: 54, column: 50, scope: !7)
!51 = !DILocation(line: 56, column: 18, scope: !7)
!52 = !DILocation(line: 58, column: 19, scope: !7)
!53 = !DILocation(line: 59, column: 28, scope: !7)
!54 = !DILocation(line: 60, column: 25, scope: !7)
!55 = !DILocation(line: 60, column: 51, scope: !7)
!56 = !DILocation(line: 65, column: 53, scope: !7)
!57 = !DILocation(line: 66, column: 35, scope: !7)
!58 = !DILocation(line: 66, column: 40, scope: !7)
!59 = !DILocation(line: 67, column: 35, scope: !7)
!60 = !DILocation(line: 67, column: 40, scope: !7)
!61 = !DILocation(line: 68, column: 24, scope: !7)
!62 = !DILocation(line: 69, column: 24, scope: !7)
!63 = !DILocation(line: 70, column: 24, scope: !7)
!64 = !DILocation(line: 71, column: 24, scope: !7)
!65 = !DILocation(line: 72, column: 29, scope: !7)
!66 = !DILocation(line: 72, column: 50, scope: !7)
!67 = !DILocation(line: 61, column: 4, scope: !7)
