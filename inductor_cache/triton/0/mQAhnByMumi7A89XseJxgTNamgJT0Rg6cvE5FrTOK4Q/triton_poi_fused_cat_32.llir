; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_cat_32(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %10 = shl i32 %9, 9, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 1, !dbg !12
  %13 = and i32 %12, 510, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %.frozen6 = freeze i32 %14, !dbg !14
  %15 = sdiv i32 %.frozen6, 4096, !dbg !14
  %16 = srem i32 %15, 128, !dbg !15
  %.frozen = freeze i32 %14, !dbg !16
  %17 = sdiv i32 %.frozen, 524288, !dbg !16
  %18 = icmp slt i32 %16, 64, !dbg !17
  %19 = mul i32 %17, 524288, !dbg !18
  %srem.decomposed = sub i32 %.frozen, %19, !dbg !18
  %20 = shl nsw i32 %17, 18, !dbg !19
  %21 = add nsw i32 %20, %srem.decomposed, !dbg !20
  %22 = sext i32 %21 to i64, !dbg !21
  %23 = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !21
  %24 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %23, i1 %18, i32 0, i1 %18, i32 0, i1 %18) #3, !dbg !22
  %25 = sext i32 %16 to i64, !dbg !23
  %26 = getelementptr float, ptr addrspace(1) %1, i64 %25, !dbg !23
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %26, i1 %18, i32 0, i1 %18) #3, !dbg !24
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %26, i1 %18, i32 0, i1 %18) #3, !dbg !24
  %29 = getelementptr float, ptr addrspace(1) %2, i64 %25, !dbg !25
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %29, i1 %18, i32 0, i1 %18) #3, !dbg !26
  %31 = bitcast i32 %30 to float, !dbg !26
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %29, i1 %18, i32 0, i1 %18) #3, !dbg !26
  %33 = bitcast i32 %32 to float, !dbg !26
  %34 = fadd float %31, 0x3EE4F8B580000000, !dbg !27
  %35 = fadd float %33, 0x3EE4F8B580000000, !dbg !27
  %36 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i = icmp eq i32 %36, 0, !dbg !28
  %37 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i = icmp eq i32 %37, 0, !dbg !28
  br i1 %.not.i, label %43, label %38, !dbg !28

38:                                               ; preds = %8
  br i1 %.not1.i, label %41, label %39, !dbg !28

39:                                               ; preds = %38
  %40 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %34) #3, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

41:                                               ; preds = %38
  %42 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %34) #3, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

43:                                               ; preds = %8
  br i1 %.not1.i, label %46, label %44, !dbg !28

44:                                               ; preds = %43
  %45 = tail call float @llvm.nvvm.sqrt.rn.f(float %34) #3, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

46:                                               ; preds = %43
  %47 = tail call float @llvm.nvvm.sqrt.approx.f(float %34) #3, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

__nv_sqrtf.exit:                                  ; preds = %39, %41, %44, %46
  %.0.i = phi float [ %40, %39 ], [ %42, %41 ], [ %45, %44 ], [ %47, %46 ], !dbg !28
  %48 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i1 = icmp eq i32 %48, 0, !dbg !28
  %49 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i4 = icmp eq i32 %49, 0, !dbg !28
  br i1 %.not.i1, label %55, label %50, !dbg !28

50:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %53, label %51, !dbg !28

51:                                               ; preds = %50
  %52 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %35) #3, !dbg !28
  br label %__nv_sqrtf.exit5, !dbg !28

53:                                               ; preds = %50
  %54 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %35) #3, !dbg !28
  br label %__nv_sqrtf.exit5, !dbg !28

55:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %58, label %56, !dbg !28

56:                                               ; preds = %55
  %57 = tail call float @llvm.nvvm.sqrt.rn.f(float %35) #3, !dbg !28
  br label %__nv_sqrtf.exit5, !dbg !28

58:                                               ; preds = %55
  %59 = tail call float @llvm.nvvm.sqrt.approx.f(float %35) #3, !dbg !28
  br label %__nv_sqrtf.exit5, !dbg !28

__nv_sqrtf.exit5:                                 ; preds = %51, %53, %56, %58
  %.0.i3 = phi float [ %52, %51 ], [ %54, %53 ], [ %57, %56 ], [ %59, %58 ], !dbg !28
  %60 = extractvalue { i32, i32 } %24, 1, !dbg !22
  %61 = bitcast i32 %60 to float, !dbg !22
  %62 = bitcast i32 %28 to float, !dbg !24
  %63 = fsub float %61, %62, !dbg !29
  %64 = extractvalue { i32, i32 } %24, 0, !dbg !22
  %65 = bitcast i32 %64 to float, !dbg !22
  %66 = bitcast i32 %27 to float, !dbg !24
  %67 = fsub float %65, %66, !dbg !29
  %68 = mul i32 %15, 4096, !dbg !30
  %.decomposed = sub i32 %.frozen6, %68, !dbg !30
  %69 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !31
  %70 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !31
  %71 = fmul float %67, %69, !dbg !32
  %72 = fmul float %63, %70, !dbg !32
  %73 = getelementptr float, ptr addrspace(1) %3, i64 %25, !dbg !33
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %73, i1 %18, i32 0, i1 %18) #3, !dbg !34
  %75 = bitcast i32 %74 to float, !dbg !34
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %73, i1 %18, i32 0, i1 %18) #3, !dbg !34
  %77 = bitcast i32 %76 to float, !dbg !34
  %78 = fmul float %71, %75, !dbg !35
  %79 = fmul float %72, %77, !dbg !35
  %80 = getelementptr float, ptr addrspace(1) %4, i64 %25, !dbg !36
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %80, i1 %18, i32 0, i1 %18) #3, !dbg !37
  %82 = bitcast i32 %81 to float, !dbg !37
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %80, i1 %18, i32 0, i1 %18) #3, !dbg !37
  %84 = bitcast i32 %83 to float, !dbg !37
  %85 = fadd float %78, %82, !dbg !38
  %86 = fadd float %79, %84, !dbg !38
  %87 = fcmp olt float %85, 0.000000e+00, !dbg !39
  %88 = fcmp olt float %86, 0.000000e+00, !dbg !39
  %89 = select i1 %87, float 0.000000e+00, float %85, !dbg !43
  %90 = select i1 %88, float 0.000000e+00, float %86, !dbg !43
  %91 = icmp sgt i32 %16, 63, !dbg !44
  %92 = shl nsw i32 %16, 12, !dbg !45
  %93 = add nsw i32 %.decomposed, -262144, !dbg !45
  %94 = add nsw i32 %93, %20, !dbg !46
  %95 = add nsw i32 %94, %92, !dbg !47
  %96 = sext i32 %95 to i64, !dbg !48
  %97 = getelementptr float, ptr addrspace(1) %5, i64 %96, !dbg !48
  %98 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %97, i1 %91, i32 0, i1 %91, i32 0, i1 %91) #3, !dbg !49
  %99 = extractvalue { i32, i32 } %98, 0, !dbg !49
  %100 = extractvalue { i32, i32 } %98, 1, !dbg !49
  %101 = sext i32 %14 to i64, !dbg !50
  %102 = getelementptr float, ptr addrspace(1) %6, i64 %101, !dbg !50
  %103 = bitcast float %89 to i32, !dbg !51
  %104 = select i1 %18, i32 %103, i32 %99, !dbg !52
  %105 = bitcast float %90 to i32, !dbg !51
  %106 = select i1 %18, i32 %105, i32 %100, !dbg !52
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %104, i32 %106, ptr addrspace(1) %102, i1 true) #3, !dbg !51
  ret void, !dbg !53
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cnycnmmzds3af7ysl732ipsdns2pcdsj4lae2j5cr3h6ustzxgr4.py", directory: "inductor_cache/ny")
!4 = !{ptr @triton_poi_fused_cat_32, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_32, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_32", linkageName: "triton_poi_fused_cat_32", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 29, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 32, column: 18, scope: !7)
!18 = !DILocation(line: 33, column: 35, scope: !7)
!19 = !DILocation(line: 33, column: 54, scope: !7)
!20 = !DILocation(line: 33, column: 47, scope: !7)
!21 = !DILocation(line: 33, column: 30, scope: !7)
!22 = !DILocation(line: 33, column: 59, scope: !7)
!23 = !DILocation(line: 34, column: 30, scope: !7)
!24 = !DILocation(line: 34, column: 35, scope: !7)
!25 = !DILocation(line: 36, column: 30, scope: !7)
!26 = !DILocation(line: 36, column: 35, scope: !7)
!27 = !DILocation(line: 38, column: 19, scope: !7)
!28 = !DILocation(line: 39, column: 27, scope: !7)
!29 = !DILocation(line: 35, column: 18, scope: !7)
!30 = !DILocation(line: 25, column: 19, scope: !7)
!31 = !DILocation(line: 41, column: 20, scope: !7)
!32 = !DILocation(line: 44, column: 19, scope: !7)
!33 = !DILocation(line: 45, column: 31, scope: !7)
!34 = !DILocation(line: 45, column: 36, scope: !7)
!35 = !DILocation(line: 46, column: 20, scope: !7)
!36 = !DILocation(line: 47, column: 31, scope: !7)
!37 = !DILocation(line: 47, column: 36, scope: !7)
!38 = !DILocation(line: 48, column: 20, scope: !7)
!39 = !DILocation(line: 118, column: 15, scope: !40, inlinedAt: !42)
!40 = distinct !DILexicalBlockFile(scope: !7, file: !41, discriminator: 0)
!41 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!42 = !DILocation(line: 50, column: 42, scope: !7)
!43 = !DILocation(line: 121, column: 29, scope: !40, inlinedAt: !42)
!44 = !DILocation(line: 53, column: 20, scope: !7)
!45 = !DILocation(line: 56, column: 42, scope: !7)
!46 = !DILocation(line: 56, column: 36, scope: !7)
!47 = !DILocation(line: 56, column: 56, scope: !7)
!48 = !DILocation(line: 56, column: 31, scope: !7)
!49 = !DILocation(line: 56, column: 68, scope: !7)
!50 = !DILocation(line: 58, column: 25, scope: !7)
!51 = !DILocation(line: 58, column: 37, scope: !7)
!52 = !DILocation(line: 0, scope: !7)
!53 = !DILocation(line: 58, column: 4, scope: !7)
