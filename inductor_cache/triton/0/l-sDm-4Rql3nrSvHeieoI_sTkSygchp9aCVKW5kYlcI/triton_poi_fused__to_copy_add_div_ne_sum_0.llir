; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__to_copy_add_div_ne_sum_0(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %5 = shl i32 %4, 6, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 1, !dbg !12
  %8 = and i32 %7, 62, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = icmp slt i32 %9, 64, !dbg !14
  %.frozen = freeze i32 %9, !dbg !15
  %11 = sdiv i32 %.frozen, 16, !dbg !15
  %12 = mul i32 %11, 16, !dbg !16
  %.decomposed = sub i32 %.frozen, %12, !dbg !16
  %13 = shl i32 %11, 6, !dbg !17
  %14 = add i32 %13, %.decomposed, !dbg !18
  %15 = sext i32 %14 to i64, !dbg !19
  %16 = getelementptr float, ptr addrspace(1) %0, i64 %15, !dbg !19
  %17 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %16, i1 %10) #2, !dbg !20
  %18 = extractvalue { i32, i32 } %17, 0, !dbg !20
  %19 = extractvalue { i32, i32 } %17, 1, !dbg !20
  %20 = add i32 %14, 16, !dbg !21
  %21 = sext i32 %20 to i64, !dbg !22
  %22 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !22
  %23 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %22, i1 %10) #2, !dbg !23
  %24 = extractvalue { i32, i32 } %23, 0, !dbg !23
  %25 = extractvalue { i32, i32 } %23, 1, !dbg !23
  %26 = add i32 %14, 32, !dbg !24
  %27 = sext i32 %26 to i64, !dbg !25
  %28 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !25
  %29 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %28, i1 %10) #2, !dbg !26
  %30 = extractvalue { i32, i32 } %29, 0, !dbg !26
  %31 = extractvalue { i32, i32 } %29, 1, !dbg !26
  %32 = add i32 %14, 48, !dbg !27
  %33 = sext i32 %32 to i64, !dbg !28
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !28
  %35 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %34, i1 %10) #2, !dbg !29
  %36 = extractvalue { i32, i32 } %35, 0, !dbg !29
  %37 = extractvalue { i32, i32 } %35, 1, !dbg !29
  %38 = insertelement <4 x i32> poison, i32 %24, i64 0, !dbg !23
  %39 = insertelement <4 x i32> %38, i32 %18, i64 1, !dbg !23
  %40 = insertelement <4 x i32> %39, i32 %30, i64 2, !dbg !23
  %41 = insertelement <4 x i32> %40, i32 %36, i64 3, !dbg !23
  %42 = bitcast <4 x i32> %41 to <4 x float>, !dbg !23
  %shift = shufflevector <4 x float> %42, <4 x float> poison, <4 x i32> <i32 1, i32 poison, i32 poison, i32 poison>, !dbg !30
  %43 = fadd <4 x float> %shift, %42, !dbg !30
  %shift1 = shufflevector <4 x float> %42, <4 x float> poison, <4 x i32> <i32 2, i32 poison, i32 poison, i32 poison>, !dbg !31
  %44 = fadd <4 x float> %43, %shift1, !dbg !31
  %shift2 = shufflevector <4 x float> %42, <4 x float> poison, <4 x i32> <i32 3, i32 poison, i32 poison, i32 poison>, !dbg !32
  %45 = fadd <4 x float> %44, %shift2, !dbg !32
  %46 = extractelement <4 x float> %45, i64 0, !dbg !32
  %47 = fcmp une <4 x float> %42, zeroinitializer, !dbg !33
  %48 = insertelement <4 x i32> poison, i32 %25, i64 0, !dbg !23
  %49 = insertelement <4 x i32> %48, i32 %19, i64 1, !dbg !23
  %50 = insertelement <4 x i32> %49, i32 %31, i64 2, !dbg !23
  %51 = insertelement <4 x i32> %50, i32 %37, i64 3, !dbg !23
  %52 = bitcast <4 x i32> %51 to <4 x float>, !dbg !23
  %shift3 = shufflevector <4 x float> %52, <4 x float> poison, <4 x i32> <i32 1, i32 poison, i32 poison, i32 poison>, !dbg !30
  %53 = fadd <4 x float> %shift3, %52, !dbg !30
  %shift4 = shufflevector <4 x float> %52, <4 x float> poison, <4 x i32> <i32 2, i32 poison, i32 poison, i32 poison>, !dbg !31
  %54 = fadd <4 x float> %53, %shift4, !dbg !31
  %shift5 = shufflevector <4 x float> %52, <4 x float> poison, <4 x i32> <i32 3, i32 poison, i32 poison, i32 poison>, !dbg !32
  %55 = fadd <4 x float> %54, %shift5, !dbg !32
  %56 = extractelement <4 x float> %55, i64 0, !dbg !32
  %57 = fcmp une <4 x float> %52, zeroinitializer, !dbg !33
  %58 = bitcast <4 x i1> %47 to i4, !dbg !34
  %59 = tail call range(i4 0, 5) i4 @llvm.ctpop.i4(i4 %58), !dbg !34
  %60 = bitcast <4 x i1> %57 to i4, !dbg !34
  %61 = tail call range(i4 0, 5) i4 @llvm.ctpop.i4(i4 %60), !dbg !34
  %62 = uitofp nneg i4 %59 to float, !dbg !35
  %63 = uitofp nneg i4 %61 to float, !dbg !35
  %64 = fadd float %62, 0x3C9CD2B2A0000000, !dbg !36
  %65 = fadd float %63, 0x3C9CD2B2A0000000, !dbg !36
  %66 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %46, float %64) #2, !dbg !37
  %67 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %56, float %65) #2, !dbg !37
  %68 = sext i32 %9 to i64, !dbg !38
  %69 = getelementptr float, ptr addrspace(1) %1, i64 %68, !dbg !38
  %70 = bitcast float %66 to i32, !dbg !39
  %71 = bitcast float %67 to i32, !dbg !39
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %70, i32 %71, ptr addrspace(1) %69, i1 %10) #2, !dbg !39
  ret void, !dbg !40
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i4 @llvm.ctpop.i4(i4) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cnttprloqbziqrzzouzmvv7zp5tht3xnojkyqu7nr35nchop6flt.py", directory: "inductor_cache/nt")
!4 = !{ptr @triton_poi_fused__to_copy_add_div_ne_sum_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__to_copy_add_div_ne_sum_0, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__to_copy_add_div_ne_sum_0", linkageName: "triton_poi_fused__to_copy_add_div_ne_sum_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 24, column: 19, scope: !7)
!17 = !DILocation(line: 27, column: 38, scope: !7)
!18 = !DILocation(line: 27, column: 35, scope: !7)
!19 = !DILocation(line: 27, column: 30, scope: !7)
!20 = !DILocation(line: 27, column: 43, scope: !7)
!21 = !DILocation(line: 28, column: 40, scope: !7)
!22 = !DILocation(line: 28, column: 30, scope: !7)
!23 = !DILocation(line: 28, column: 48, scope: !7)
!24 = !DILocation(line: 29, column: 40, scope: !7)
!25 = !DILocation(line: 29, column: 30, scope: !7)
!26 = !DILocation(line: 29, column: 48, scope: !7)
!27 = !DILocation(line: 30, column: 40, scope: !7)
!28 = !DILocation(line: 30, column: 30, scope: !7)
!29 = !DILocation(line: 30, column: 48, scope: !7)
!30 = !DILocation(line: 31, column: 18, scope: !7)
!31 = !DILocation(line: 32, column: 18, scope: !7)
!32 = !DILocation(line: 33, column: 18, scope: !7)
!33 = !DILocation(line: 37, column: 20, scope: !7)
!34 = !DILocation(line: 45, column: 20, scope: !7)
!35 = !DILocation(line: 46, column: 21, scope: !7)
!36 = !DILocation(line: 48, column: 20, scope: !7)
!37 = !DILocation(line: 49, column: 19, scope: !7)
!38 = !DILocation(line: 50, column: 25, scope: !7)
!39 = !DILocation(line: 50, column: 37, scope: !7)
!40 = !DILocation(line: 50, column: 4, scope: !7)
