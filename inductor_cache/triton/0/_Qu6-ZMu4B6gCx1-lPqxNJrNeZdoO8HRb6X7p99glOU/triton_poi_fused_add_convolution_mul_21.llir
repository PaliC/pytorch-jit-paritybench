; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_add_convolution_mul_21(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %10 = shl i32 %9, 8, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = lshr i32 %11, 2, !dbg !12
  %13 = and i32 %12, 15, !dbg !12
  %14 = lshr i32 %11, 2, !dbg !12
  %15 = and i32 %14, 16, !dbg !12
  %16 = or disjoint i32 %13, %15, !dbg !12
  %17 = lshr i32 %11, 2, !dbg !12
  %18 = and i32 %17, 32, !dbg !12
  %19 = or disjoint i32 %16, %18, !dbg !12
  %20 = or disjoint i32 %19, 64, !dbg !12
  %21 = or disjoint i32 %19, 128, !dbg !12
  %22 = or disjoint i32 %19, 192, !dbg !12
  %23 = shl i32 %11, 2, !dbg !12
  %24 = and i32 %23, 12, !dbg !12
  %25 = and i32 %23, 252, !dbg !12
  %26 = and i32 %11, 255, !dbg !12
  %27 = or disjoint i32 %10, %19, !dbg !13
  %28 = or disjoint i32 %10, %20, !dbg !13
  %29 = or disjoint i32 %10, %21, !dbg !13
  %30 = or disjoint i32 %10, %22, !dbg !13
  %31 = or disjoint i32 %10, %25, !dbg !13
  %32 = or disjoint i32 %10, %26, !dbg !13
  %33 = icmp slt i32 %27, 512, !dbg !14
  %34 = icmp slt i32 %28, 512, !dbg !14
  %35 = icmp slt i32 %29, 512, !dbg !14
  %36 = icmp slt i32 %30, 512, !dbg !14
  %37 = icmp slt i32 %31, 512, !dbg !14
  %38 = icmp slt i32 %32, 512, !dbg !14
  %39 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %40 = shl i32 %39, 4, !dbg !16
  %.lobit231 = lshr i32 %11, 6, !dbg !17
  %41 = and i32 %.lobit231, 3, !dbg !17
  %42 = or disjoint i32 %40, %24, !dbg !18
  %43 = or disjoint i32 %40, %41, !dbg !18
  %44 = or disjoint i32 %43, 4, !dbg !18
  %45 = or disjoint i32 %43, 8, !dbg !18
  %46 = or disjoint i32 %43, 12, !dbg !18
  %47 = icmp slt i32 %42, 1024, !dbg !19
  %48 = icmp slt i32 %43, 1024, !dbg !19
  %49 = icmp slt i32 %44, 1024, !dbg !19
  %50 = icmp slt i32 %45, 1024, !dbg !19
  %51 = icmp slt i32 %46, 1024, !dbg !19
  %.frozen = freeze i32 %31, !dbg !20
  %52 = sdiv i32 %.frozen, 128, !dbg !20
  %53 = mul i32 %52, 128, !dbg !21
  %.decomposed = sub i32 %.frozen, %53, !dbg !21
  %54 = srem i32 %32, 128, !dbg !21
  %55 = shl i32 %27, 10, !dbg !22
  %56 = shl i32 %28, 10, !dbg !22
  %57 = shl i32 %29, 10, !dbg !22
  %58 = shl i32 %30, 10, !dbg !22
  %59 = add i32 %42, %55, !dbg !23
  %60 = add i32 %42, %56, !dbg !23
  %61 = add i32 %42, %57, !dbg !23
  %62 = add i32 %42, %58, !dbg !23
  %63 = sext i32 %59 to i64, !dbg !24
  %64 = getelementptr float, ptr addrspace(1) %0, i64 %63, !dbg !24
  %65 = sext i32 %60 to i64, !dbg !24
  %66 = getelementptr float, ptr addrspace(1) %0, i64 %65, !dbg !24
  %67 = sext i32 %61 to i64, !dbg !24
  %68 = getelementptr float, ptr addrspace(1) %0, i64 %67, !dbg !24
  %69 = sext i32 %62 to i64, !dbg !24
  %70 = getelementptr float, ptr addrspace(1) %0, i64 %69, !dbg !24
  %71 = and i1 %33, %47, !dbg !25
  %72 = and i1 %34, %47, !dbg !25
  %73 = and i1 %35, %47, !dbg !25
  %74 = and i1 %36, %47, !dbg !25
  %75 = and i1 %37, %48, !dbg !25
  %76 = and i1 %49, %37, !dbg !25
  %77 = and i1 %50, %37, !dbg !25
  %78 = and i1 %51, %37, !dbg !25
  %79 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %64, i1 %71) #2, !dbg !26
  %80 = extractvalue { i32, i32, i32, i32 } %79, 0, !dbg !26
  %81 = extractvalue { i32, i32, i32, i32 } %79, 1, !dbg !26
  %82 = extractvalue { i32, i32, i32, i32 } %79, 2, !dbg !26
  %83 = extractvalue { i32, i32, i32, i32 } %79, 3, !dbg !26
  %84 = bitcast i32 %80 to float, !dbg !26
  %85 = bitcast i32 %81 to float, !dbg !26
  %86 = bitcast i32 %82 to float, !dbg !26
  %87 = bitcast i32 %83 to float, !dbg !26
  %88 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %66, i1 %72) #2, !dbg !26
  %89 = extractvalue { i32, i32, i32, i32 } %88, 0, !dbg !26
  %90 = extractvalue { i32, i32, i32, i32 } %88, 1, !dbg !26
  %91 = extractvalue { i32, i32, i32, i32 } %88, 2, !dbg !26
  %92 = extractvalue { i32, i32, i32, i32 } %88, 3, !dbg !26
  %93 = bitcast i32 %89 to float, !dbg !26
  %94 = bitcast i32 %90 to float, !dbg !26
  %95 = bitcast i32 %91 to float, !dbg !26
  %96 = bitcast i32 %92 to float, !dbg !26
  %97 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %68, i1 %73) #2, !dbg !26
  %98 = extractvalue { i32, i32, i32, i32 } %97, 0, !dbg !26
  %99 = extractvalue { i32, i32, i32, i32 } %97, 1, !dbg !26
  %100 = extractvalue { i32, i32, i32, i32 } %97, 2, !dbg !26
  %101 = extractvalue { i32, i32, i32, i32 } %97, 3, !dbg !26
  %102 = bitcast i32 %98 to float, !dbg !26
  %103 = bitcast i32 %99 to float, !dbg !26
  %104 = bitcast i32 %100 to float, !dbg !26
  %105 = bitcast i32 %101 to float, !dbg !26
  %106 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %70, i1 %74) #2, !dbg !26
  %107 = extractvalue { i32, i32, i32, i32 } %106, 0, !dbg !26
  %108 = extractvalue { i32, i32, i32, i32 } %106, 1, !dbg !26
  %109 = extractvalue { i32, i32, i32, i32 } %106, 2, !dbg !26
  %110 = extractvalue { i32, i32, i32, i32 } %106, 3, !dbg !26
  %111 = bitcast i32 %107 to float, !dbg !26
  %112 = bitcast i32 %108 to float, !dbg !26
  %113 = bitcast i32 %109 to float, !dbg !26
  %114 = bitcast i32 %110 to float, !dbg !26
  %115 = shl i32 %11, 10, !dbg !26
  %116 = and i32 %115, 3072, !dbg !26
  %117 = and i32 %12, 15, !dbg !26
  %118 = or disjoint i32 %117, %116, !dbg !26
  %119 = or disjoint i32 %15, %118, !dbg !26
  %120 = or disjoint i32 %119, %18, !dbg !26
  %121 = and i32 %23, 1020, !dbg !26
  %122 = lshr exact i32 %116, 4, !dbg !26
  %123 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %122, !dbg !26
  %124 = getelementptr float, ptr addrspace(3) %123, i32 %120, !dbg !26
  %125 = insertelement <1 x i32> poison, i32 %80, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %124, <1 x i32> %125, i1 true) #2, !dbg !26
  %126 = or disjoint i32 %120, 256, !dbg !26
  %127 = lshr i32 %126, 6, !dbg !26
  %128 = and i32 %127, 67108860, !dbg !26
  %129 = getelementptr float, ptr addrspace(3) @global_smem, i32 %128, !dbg !26
  %130 = getelementptr float, ptr addrspace(3) %129, i32 %126, !dbg !26
  %131 = insertelement <1 x i32> poison, i32 %81, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %130, <1 x i32> %131, i1 true) #2, !dbg !26
  %132 = or disjoint i32 %120, 512, !dbg !26
  %133 = lshr i32 %132, 6, !dbg !26
  %134 = and i32 %133, 67108860, !dbg !26
  %135 = getelementptr float, ptr addrspace(3) @global_smem, i32 %134, !dbg !26
  %136 = getelementptr float, ptr addrspace(3) %135, i32 %132, !dbg !26
  %137 = insertelement <1 x i32> poison, i32 %82, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %136, <1 x i32> %137, i1 true) #2, !dbg !26
  %138 = or disjoint i32 %120, 768, !dbg !26
  %139 = lshr i32 %138, 6, !dbg !26
  %140 = and i32 %139, 67108860, !dbg !26
  %141 = getelementptr float, ptr addrspace(3) @global_smem, i32 %140, !dbg !26
  %142 = getelementptr float, ptr addrspace(3) %141, i32 %138, !dbg !26
  %143 = insertelement <1 x i32> poison, i32 %83, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %142, <1 x i32> %143, i1 true) #2, !dbg !26
  %144 = or disjoint i32 %120, 64, !dbg !26
  %145 = getelementptr float, ptr addrspace(3) %123, i32 %144, !dbg !26
  %146 = insertelement <1 x i32> poison, i32 %89, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %145, <1 x i32> %146, i1 true) #2, !dbg !26
  %147 = or disjoint i32 %120, 320, !dbg !26
  %148 = lshr i32 %147, 6, !dbg !26
  %149 = and i32 %148, 67108860, !dbg !26
  %150 = getelementptr float, ptr addrspace(3) @global_smem, i32 %149, !dbg !26
  %151 = getelementptr float, ptr addrspace(3) %150, i32 %147, !dbg !26
  %152 = insertelement <1 x i32> poison, i32 %90, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %151, <1 x i32> %152, i1 true) #2, !dbg !26
  %153 = or disjoint i32 %120, 576, !dbg !26
  %154 = lshr i32 %153, 6, !dbg !26
  %155 = and i32 %154, 67108860, !dbg !26
  %156 = getelementptr float, ptr addrspace(3) @global_smem, i32 %155, !dbg !26
  %157 = getelementptr float, ptr addrspace(3) %156, i32 %153, !dbg !26
  %158 = insertelement <1 x i32> poison, i32 %91, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %157, <1 x i32> %158, i1 true) #2, !dbg !26
  %159 = or disjoint i32 %120, 832, !dbg !26
  %160 = lshr i32 %159, 6, !dbg !26
  %161 = and i32 %160, 67108860, !dbg !26
  %162 = getelementptr float, ptr addrspace(3) @global_smem, i32 %161, !dbg !26
  %163 = getelementptr float, ptr addrspace(3) %162, i32 %159, !dbg !26
  %164 = insertelement <1 x i32> poison, i32 %92, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %163, <1 x i32> %164, i1 true) #2, !dbg !26
  %165 = or disjoint i32 %120, 128, !dbg !26
  %166 = getelementptr float, ptr addrspace(3) %123, i32 %165, !dbg !26
  %167 = insertelement <1 x i32> poison, i32 %98, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %166, <1 x i32> %167, i1 true) #2, !dbg !26
  %168 = or disjoint i32 %120, 384, !dbg !26
  %169 = lshr i32 %168, 6, !dbg !26
  %170 = and i32 %169, 67108860, !dbg !26
  %171 = getelementptr float, ptr addrspace(3) @global_smem, i32 %170, !dbg !26
  %172 = getelementptr float, ptr addrspace(3) %171, i32 %168, !dbg !26
  %173 = insertelement <1 x i32> poison, i32 %99, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %172, <1 x i32> %173, i1 true) #2, !dbg !26
  %174 = or disjoint i32 %120, 640, !dbg !26
  %175 = lshr i32 %174, 6, !dbg !26
  %176 = and i32 %175, 67108860, !dbg !26
  %177 = getelementptr float, ptr addrspace(3) @global_smem, i32 %176, !dbg !26
  %178 = getelementptr float, ptr addrspace(3) %177, i32 %174, !dbg !26
  %179 = insertelement <1 x i32> poison, i32 %100, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %178, <1 x i32> %179, i1 true) #2, !dbg !26
  %180 = or disjoint i32 %120, 896, !dbg !26
  %181 = lshr i32 %180, 6, !dbg !26
  %182 = and i32 %181, 67108860, !dbg !26
  %183 = getelementptr float, ptr addrspace(3) @global_smem, i32 %182, !dbg !26
  %184 = getelementptr float, ptr addrspace(3) %183, i32 %180, !dbg !26
  %185 = insertelement <1 x i32> poison, i32 %101, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %184, <1 x i32> %185, i1 true) #2, !dbg !26
  %186 = or disjoint i32 %120, 192, !dbg !26
  %187 = getelementptr float, ptr addrspace(3) %123, i32 %186, !dbg !26
  %188 = insertelement <1 x i32> poison, i32 %107, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %187, <1 x i32> %188, i1 true) #2, !dbg !26
  %189 = or disjoint i32 %120, 448, !dbg !26
  %190 = lshr i32 %189, 6, !dbg !26
  %191 = and i32 %190, 67108860, !dbg !26
  %192 = getelementptr float, ptr addrspace(3) @global_smem, i32 %191, !dbg !26
  %193 = getelementptr float, ptr addrspace(3) %192, i32 %189, !dbg !26
  %194 = insertelement <1 x i32> poison, i32 %108, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %193, <1 x i32> %194, i1 true) #2, !dbg !26
  %195 = or disjoint i32 %120, 704, !dbg !26
  %196 = lshr i32 %195, 6, !dbg !26
  %197 = and i32 %196, 67108860, !dbg !26
  %198 = getelementptr float, ptr addrspace(3) @global_smem, i32 %197, !dbg !26
  %199 = getelementptr float, ptr addrspace(3) %198, i32 %195, !dbg !26
  %200 = insertelement <1 x i32> poison, i32 %109, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %199, <1 x i32> %200, i1 true) #2, !dbg !26
  %201 = or disjoint i32 %120, 960, !dbg !26
  %202 = lshr i32 %201, 6, !dbg !26
  %203 = and i32 %202, 67108860, !dbg !26
  %204 = getelementptr float, ptr addrspace(3) @global_smem, i32 %203, !dbg !26
  %205 = getelementptr float, ptr addrspace(3) %204, i32 %201, !dbg !26
  %206 = insertelement <1 x i32> poison, i32 %110, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %205, <1 x i32> %206, i1 true) #2, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %207 = lshr i32 %23, 6, !dbg !26
  %208 = and i32 %207, 12, !dbg !26
  %209 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %208, !dbg !26
  %210 = getelementptr inbounds float, ptr addrspace(3) %209, i32 %121, !dbg !26
  %211 = load float, ptr addrspace(3) %210, align 16, !dbg !26
  %212 = getelementptr inbounds i8, ptr addrspace(3) %210, i32 4, !dbg !26
  %213 = load float, ptr addrspace(3) %212, align 4, !dbg !26
  %214 = getelementptr inbounds i8, ptr addrspace(3) %210, i32 8, !dbg !26
  %215 = load float, ptr addrspace(3) %214, align 8, !dbg !26
  %216 = getelementptr inbounds i8, ptr addrspace(3) %210, i32 12, !dbg !26
  %217 = load float, ptr addrspace(3) %216, align 4, !dbg !26
  %218 = or disjoint i32 %121, 1024, !dbg !26
  %219 = lshr i32 %218, 6, !dbg !26
  %220 = and i32 %219, 28, !dbg !26
  %221 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %220, !dbg !26
  %222 = getelementptr inbounds float, ptr addrspace(3) %221, i32 %218, !dbg !26
  %223 = load float, ptr addrspace(3) %222, align 16, !dbg !26
  %224 = getelementptr inbounds i8, ptr addrspace(3) %222, i32 4, !dbg !26
  %225 = load float, ptr addrspace(3) %224, align 4, !dbg !26
  %226 = getelementptr inbounds i8, ptr addrspace(3) %222, i32 8, !dbg !26
  %227 = load float, ptr addrspace(3) %226, align 8, !dbg !26
  %228 = getelementptr inbounds i8, ptr addrspace(3) %222, i32 12, !dbg !26
  %229 = load float, ptr addrspace(3) %228, align 4, !dbg !26
  %230 = or disjoint i32 %121, 2048, !dbg !26
  %231 = lshr i32 %230, 6, !dbg !26
  %232 = and i32 %231, 44, !dbg !26
  %233 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %232, !dbg !26
  %234 = getelementptr inbounds float, ptr addrspace(3) %233, i32 %230, !dbg !26
  %235 = load float, ptr addrspace(3) %234, align 16, !dbg !26
  %236 = getelementptr inbounds i8, ptr addrspace(3) %234, i32 4, !dbg !26
  %237 = load float, ptr addrspace(3) %236, align 4, !dbg !26
  %238 = getelementptr inbounds i8, ptr addrspace(3) %234, i32 8, !dbg !26
  %239 = load float, ptr addrspace(3) %238, align 8, !dbg !26
  %240 = getelementptr inbounds i8, ptr addrspace(3) %234, i32 12, !dbg !26
  %241 = load float, ptr addrspace(3) %240, align 4, !dbg !26
  %242 = or disjoint i32 %121, 3072, !dbg !26
  %243 = lshr i32 %242, 6, !dbg !26
  %244 = and i32 %243, 60, !dbg !26
  %245 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %244, !dbg !26
  %246 = getelementptr inbounds float, ptr addrspace(3) %245, i32 %242, !dbg !26
  %247 = load float, ptr addrspace(3) %246, align 16, !dbg !26
  %248 = getelementptr inbounds i8, ptr addrspace(3) %246, i32 4, !dbg !26
  %249 = load float, ptr addrspace(3) %248, align 4, !dbg !26
  %250 = getelementptr inbounds i8, ptr addrspace(3) %246, i32 8, !dbg !26
  %251 = load float, ptr addrspace(3) %250, align 8, !dbg !26
  %252 = getelementptr inbounds i8, ptr addrspace(3) %246, i32 12, !dbg !26
  %253 = load float, ptr addrspace(3) %252, align 4, !dbg !26
  %254 = sext i32 %54 to i64, !dbg !27
  %255 = getelementptr float, ptr addrspace(1) %1, i64 %254, !dbg !27
  %256 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %255, i1 %38) #2, !dbg !28
  %257 = shl i32 %43, 7, !dbg !29
  %258 = shl i32 %44, 7, !dbg !29
  %259 = shl i32 %45, 7, !dbg !29
  %260 = shl i32 %46, 7, !dbg !29
  %261 = shl i32 %52, 17, !dbg !30
  %262 = add i32 %261, %.decomposed, !dbg !31
  %263 = add i32 %262, %257, !dbg !32
  %264 = add i32 %262, %258, !dbg !32
  %265 = add i32 %262, %259, !dbg !32
  %266 = add i32 %262, %260, !dbg !32
  %267 = sext i32 %263 to i64, !dbg !33
  %268 = getelementptr float, ptr addrspace(1) %2, i64 %267, !dbg !33
  %269 = sext i32 %264 to i64, !dbg !33
  %270 = getelementptr float, ptr addrspace(1) %2, i64 %269, !dbg !33
  %271 = sext i32 %265 to i64, !dbg !33
  %272 = getelementptr float, ptr addrspace(1) %2, i64 %271, !dbg !33
  %273 = sext i32 %266 to i64, !dbg !33
  %274 = getelementptr float, ptr addrspace(1) %2, i64 %273, !dbg !33
  %275 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %268, i1 %75) #2, !dbg !34
  %276 = extractvalue { i32, i32, i32, i32 } %275, 0, !dbg !34
  %277 = extractvalue { i32, i32, i32, i32 } %275, 1, !dbg !34
  %278 = extractvalue { i32, i32, i32, i32 } %275, 2, !dbg !34
  %279 = extractvalue { i32, i32, i32, i32 } %275, 3, !dbg !34
  %280 = bitcast i32 %276 to float, !dbg !34
  %281 = bitcast i32 %277 to float, !dbg !34
  %282 = bitcast i32 %278 to float, !dbg !34
  %283 = bitcast i32 %279 to float, !dbg !34
  %284 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %270, i1 %76) #2, !dbg !34
  %285 = extractvalue { i32, i32, i32, i32 } %284, 0, !dbg !34
  %286 = extractvalue { i32, i32, i32, i32 } %284, 1, !dbg !34
  %287 = extractvalue { i32, i32, i32, i32 } %284, 2, !dbg !34
  %288 = extractvalue { i32, i32, i32, i32 } %284, 3, !dbg !34
  %289 = bitcast i32 %285 to float, !dbg !34
  %290 = bitcast i32 %286 to float, !dbg !34
  %291 = bitcast i32 %287 to float, !dbg !34
  %292 = bitcast i32 %288 to float, !dbg !34
  %293 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %272, i1 %77) #2, !dbg !34
  %294 = extractvalue { i32, i32, i32, i32 } %293, 0, !dbg !34
  %295 = extractvalue { i32, i32, i32, i32 } %293, 1, !dbg !34
  %296 = extractvalue { i32, i32, i32, i32 } %293, 2, !dbg !34
  %297 = extractvalue { i32, i32, i32, i32 } %293, 3, !dbg !34
  %298 = bitcast i32 %294 to float, !dbg !34
  %299 = bitcast i32 %295 to float, !dbg !34
  %300 = bitcast i32 %296 to float, !dbg !34
  %301 = bitcast i32 %297 to float, !dbg !34
  %302 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %274, i1 %78) #2, !dbg !34
  %303 = extractvalue { i32, i32, i32, i32 } %302, 0, !dbg !34
  %304 = extractvalue { i32, i32, i32, i32 } %302, 1, !dbg !34
  %305 = extractvalue { i32, i32, i32, i32 } %302, 2, !dbg !34
  %306 = extractvalue { i32, i32, i32, i32 } %302, 3, !dbg !34
  %307 = bitcast i32 %303 to float, !dbg !34
  %308 = bitcast i32 %304 to float, !dbg !34
  %309 = bitcast i32 %305 to float, !dbg !34
  %310 = bitcast i32 %306 to float, !dbg !34
  %311 = getelementptr float, ptr addrspace(1) %3, i64 %254, !dbg !35
  %312 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %311, i1 %38) #2, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %313 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %26, !dbg !37
  %314 = insertelement <1 x i32> poison, i32 %256, i64 0, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %313, <1 x i32> %314, i1 true) #2, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %315 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %25, !dbg !37
  %316 = load float, ptr addrspace(3) %315, align 16, !dbg !37
  %317 = getelementptr inbounds i8, ptr addrspace(3) %315, i32 4, !dbg !37
  %318 = load float, ptr addrspace(3) %317, align 4, !dbg !37
  %319 = getelementptr inbounds i8, ptr addrspace(3) %315, i32 8, !dbg !37
  %320 = load float, ptr addrspace(3) %319, align 8, !dbg !37
  %321 = getelementptr inbounds i8, ptr addrspace(3) %315, i32 12, !dbg !37
  %322 = load float, ptr addrspace(3) %321, align 4, !dbg !37
  %323 = fmul float %316, %280, !dbg !37
  %324 = fmul float %318, %281, !dbg !37
  %325 = fmul float %320, %282, !dbg !37
  %326 = fmul float %322, %283, !dbg !37
  %327 = fmul float %316, %289, !dbg !37
  %328 = fmul float %318, %290, !dbg !37
  %329 = fmul float %320, %291, !dbg !37
  %330 = fmul float %322, %292, !dbg !37
  %331 = fmul float %316, %298, !dbg !37
  %332 = fmul float %318, %299, !dbg !37
  %333 = fmul float %320, %300, !dbg !37
  %334 = fmul float %322, %301, !dbg !37
  %335 = fmul float %316, %307, !dbg !37
  %336 = fmul float %318, %308, !dbg !37
  %337 = fmul float %320, %309, !dbg !37
  %338 = fmul float %322, %310, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %339 = shl i32 %11, 6, !dbg !37
  %340 = and i32 %339, 4032, !dbg !37
  %341 = or disjoint i32 %41, %340, !dbg !37
  %342 = lshr exact i32 %340, 2, !dbg !37
  %343 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %342, !dbg !37
  %344 = getelementptr float, ptr addrspace(3) %343, i32 %341, !dbg !37
  %345 = bitcast float %323 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %344, <1 x i32> %345, i1 true) #2, !dbg !37
  %346 = or disjoint i32 %341, 16, !dbg !37
  %347 = lshr i32 %346, 4, !dbg !37
  %348 = getelementptr float, ptr addrspace(3) @global_smem, i32 %347, !dbg !37
  %349 = getelementptr float, ptr addrspace(3) %348, i32 %346, !dbg !37
  %350 = bitcast float %324 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %349, <1 x i32> %350, i1 true) #2, !dbg !37
  %351 = or disjoint i32 %341, 32, !dbg !37
  %352 = lshr i32 %351, 4, !dbg !37
  %353 = getelementptr float, ptr addrspace(3) @global_smem, i32 %352, !dbg !37
  %354 = getelementptr float, ptr addrspace(3) %353, i32 %351, !dbg !37
  %355 = bitcast float %325 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %354, <1 x i32> %355, i1 true) #2, !dbg !37
  %356 = or disjoint i32 %341, 48, !dbg !37
  %357 = lshr i32 %356, 4, !dbg !37
  %358 = getelementptr float, ptr addrspace(3) @global_smem, i32 %357, !dbg !37
  %359 = getelementptr float, ptr addrspace(3) %358, i32 %356, !dbg !37
  %360 = bitcast float %326 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %359, <1 x i32> %360, i1 true) #2, !dbg !37
  %361 = or disjoint i32 %341, 4, !dbg !37
  %362 = getelementptr float, ptr addrspace(3) %343, i32 %361, !dbg !37
  %363 = bitcast float %327 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %362, <1 x i32> %363, i1 true) #2, !dbg !37
  %364 = or disjoint i32 %341, 20, !dbg !37
  %365 = lshr i32 %364, 4, !dbg !37
  %366 = getelementptr float, ptr addrspace(3) @global_smem, i32 %365, !dbg !37
  %367 = getelementptr float, ptr addrspace(3) %366, i32 %364, !dbg !37
  %368 = bitcast float %328 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %367, <1 x i32> %368, i1 true) #2, !dbg !37
  %369 = or disjoint i32 %341, 36, !dbg !37
  %370 = lshr i32 %369, 4, !dbg !37
  %371 = getelementptr float, ptr addrspace(3) @global_smem, i32 %370, !dbg !37
  %372 = getelementptr float, ptr addrspace(3) %371, i32 %369, !dbg !37
  %373 = bitcast float %329 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %372, <1 x i32> %373, i1 true) #2, !dbg !37
  %374 = or disjoint i32 %341, 52, !dbg !37
  %375 = lshr i32 %374, 4, !dbg !37
  %376 = getelementptr float, ptr addrspace(3) @global_smem, i32 %375, !dbg !37
  %377 = getelementptr float, ptr addrspace(3) %376, i32 %374, !dbg !37
  %378 = bitcast float %330 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %377, <1 x i32> %378, i1 true) #2, !dbg !37
  %379 = or disjoint i32 %341, 8, !dbg !37
  %380 = getelementptr float, ptr addrspace(3) %343, i32 %379, !dbg !37
  %381 = bitcast float %331 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %380, <1 x i32> %381, i1 true) #2, !dbg !37
  %382 = or disjoint i32 %341, 24, !dbg !37
  %383 = lshr i32 %382, 4, !dbg !37
  %384 = getelementptr float, ptr addrspace(3) @global_smem, i32 %383, !dbg !37
  %385 = getelementptr float, ptr addrspace(3) %384, i32 %382, !dbg !37
  %386 = bitcast float %332 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %385, <1 x i32> %386, i1 true) #2, !dbg !37
  %387 = or disjoint i32 %341, 40, !dbg !37
  %388 = lshr i32 %387, 4, !dbg !37
  %389 = getelementptr float, ptr addrspace(3) @global_smem, i32 %388, !dbg !37
  %390 = getelementptr float, ptr addrspace(3) %389, i32 %387, !dbg !37
  %391 = bitcast float %333 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %390, <1 x i32> %391, i1 true) #2, !dbg !37
  %392 = or disjoint i32 %341, 56, !dbg !37
  %393 = lshr i32 %392, 4, !dbg !37
  %394 = getelementptr float, ptr addrspace(3) @global_smem, i32 %393, !dbg !37
  %395 = getelementptr float, ptr addrspace(3) %394, i32 %392, !dbg !37
  %396 = bitcast float %334 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %395, <1 x i32> %396, i1 true) #2, !dbg !37
  %397 = or disjoint i32 %341, 12, !dbg !37
  %398 = getelementptr float, ptr addrspace(3) %343, i32 %397, !dbg !37
  %399 = bitcast float %335 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %398, <1 x i32> %399, i1 true) #2, !dbg !37
  %400 = or disjoint i32 %341, 28, !dbg !37
  %401 = lshr i32 %400, 4, !dbg !37
  %402 = getelementptr float, ptr addrspace(3) @global_smem, i32 %401, !dbg !37
  %403 = getelementptr float, ptr addrspace(3) %402, i32 %400, !dbg !37
  %404 = bitcast float %336 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %403, <1 x i32> %404, i1 true) #2, !dbg !37
  %405 = or disjoint i32 %341, 44, !dbg !37
  %406 = lshr i32 %405, 4, !dbg !37
  %407 = getelementptr float, ptr addrspace(3) @global_smem, i32 %406, !dbg !37
  %408 = getelementptr float, ptr addrspace(3) %407, i32 %405, !dbg !37
  %409 = bitcast float %337 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %408, <1 x i32> %409, i1 true) #2, !dbg !37
  %410 = or disjoint i32 %341, 60, !dbg !37
  %411 = lshr i32 %410, 4, !dbg !37
  %412 = getelementptr float, ptr addrspace(3) @global_smem, i32 %411, !dbg !37
  %413 = getelementptr float, ptr addrspace(3) %412, i32 %410, !dbg !37
  %414 = bitcast float %338 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %413, <1 x i32> %414, i1 true) #2, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %415 = lshr i32 %121, 4, !dbg !37
  %416 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %415, !dbg !37
  %417 = getelementptr inbounds float, ptr addrspace(3) %416, i32 %121, !dbg !37
  %418 = load float, ptr addrspace(3) %417, align 4, !dbg !37
  %419 = or disjoint i32 %121, 1, !dbg !37
  %420 = getelementptr inbounds float, ptr addrspace(3) %416, i32 %419, !dbg !37
  %421 = load float, ptr addrspace(3) %420, align 4, !dbg !37
  %422 = or disjoint i32 %121, 2, !dbg !37
  %423 = getelementptr inbounds float, ptr addrspace(3) %416, i32 %422, !dbg !37
  %424 = load float, ptr addrspace(3) %423, align 4, !dbg !37
  %425 = or disjoint i32 %121, 3, !dbg !37
  %426 = getelementptr inbounds float, ptr addrspace(3) %416, i32 %425, !dbg !37
  %427 = load float, ptr addrspace(3) %426, align 4, !dbg !37
  %428 = lshr i32 %218, 4, !dbg !37
  %429 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %428, !dbg !37
  %430 = getelementptr inbounds float, ptr addrspace(3) %429, i32 %218, !dbg !37
  %431 = load float, ptr addrspace(3) %430, align 4, !dbg !37
  %432 = or disjoint i32 %121, 1025, !dbg !37
  %433 = lshr i32 %432, 4, !dbg !37
  %434 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %433, !dbg !37
  %435 = getelementptr inbounds float, ptr addrspace(3) %434, i32 %432, !dbg !37
  %436 = load float, ptr addrspace(3) %435, align 4, !dbg !37
  %437 = or disjoint i32 %121, 1026, !dbg !37
  %438 = lshr i32 %437, 4, !dbg !37
  %439 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %438, !dbg !37
  %440 = getelementptr inbounds float, ptr addrspace(3) %439, i32 %437, !dbg !37
  %441 = load float, ptr addrspace(3) %440, align 4, !dbg !37
  %442 = or disjoint i32 %121, 1027, !dbg !37
  %443 = lshr i32 %442, 4, !dbg !37
  %444 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %443, !dbg !37
  %445 = getelementptr inbounds float, ptr addrspace(3) %444, i32 %442, !dbg !37
  %446 = load float, ptr addrspace(3) %445, align 4, !dbg !37
  %447 = lshr i32 %230, 4, !dbg !37
  %448 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %447, !dbg !37
  %449 = getelementptr inbounds float, ptr addrspace(3) %448, i32 %230, !dbg !37
  %450 = load float, ptr addrspace(3) %449, align 4, !dbg !37
  %451 = or disjoint i32 %121, 2049, !dbg !37
  %452 = lshr i32 %451, 4, !dbg !37
  %453 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %452, !dbg !37
  %454 = getelementptr inbounds float, ptr addrspace(3) %453, i32 %451, !dbg !37
  %455 = load float, ptr addrspace(3) %454, align 4, !dbg !37
  %456 = or disjoint i32 %121, 2050, !dbg !37
  %457 = lshr i32 %456, 4, !dbg !37
  %458 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %457, !dbg !37
  %459 = getelementptr inbounds float, ptr addrspace(3) %458, i32 %456, !dbg !37
  %460 = load float, ptr addrspace(3) %459, align 4, !dbg !37
  %461 = or disjoint i32 %121, 2051, !dbg !37
  %462 = lshr i32 %461, 4, !dbg !37
  %463 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %462, !dbg !37
  %464 = getelementptr inbounds float, ptr addrspace(3) %463, i32 %461, !dbg !37
  %465 = load float, ptr addrspace(3) %464, align 4, !dbg !37
  %466 = lshr i32 %242, 4, !dbg !37
  %467 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %466, !dbg !37
  %468 = getelementptr inbounds float, ptr addrspace(3) %467, i32 %242, !dbg !37
  %469 = load float, ptr addrspace(3) %468, align 4, !dbg !37
  %470 = or disjoint i32 %121, 3073, !dbg !37
  %471 = lshr i32 %470, 4, !dbg !37
  %472 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %471, !dbg !37
  %473 = getelementptr inbounds float, ptr addrspace(3) %472, i32 %470, !dbg !37
  %474 = load float, ptr addrspace(3) %473, align 4, !dbg !37
  %475 = or disjoint i32 %121, 3074, !dbg !37
  %476 = lshr i32 %475, 4, !dbg !37
  %477 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %476, !dbg !37
  %478 = getelementptr inbounds float, ptr addrspace(3) %477, i32 %475, !dbg !37
  %479 = load float, ptr addrspace(3) %478, align 4, !dbg !37
  %480 = or disjoint i32 %121, 3075, !dbg !37
  %481 = lshr i32 %480, 4, !dbg !37
  %482 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %481, !dbg !37
  %483 = getelementptr inbounds float, ptr addrspace(3) %482, i32 %480, !dbg !37
  %484 = load float, ptr addrspace(3) %483, align 4, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %.idx = shl nuw nsw i32 %26, 3, !dbg !38
  %485 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !38
  %486 = insertelement <1 x i32> poison, i32 %312, i64 0, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %485, <1 x i32> %486, i1 true) #2, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %.idx23 = shl nuw nsw i32 %19, 3, !dbg !38
  %487 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx23, !dbg !38
  %488 = load float, ptr addrspace(3) %487, align 8, !dbg !38
  %.idx24 = shl nuw nsw i32 %20, 3, !dbg !38
  %489 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx24, !dbg !38
  %490 = load float, ptr addrspace(3) %489, align 8, !dbg !38
  %.idx25 = shl nuw nsw i32 %21, 3, !dbg !38
  %491 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx25, !dbg !38
  %492 = load float, ptr addrspace(3) %491, align 8, !dbg !38
  %.idx26 = shl nuw nsw i32 %22, 3, !dbg !38
  %493 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx26, !dbg !38
  %494 = load float, ptr addrspace(3) %493, align 8, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %313, <1 x i32> %486, i1 true) #2, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %495 = load float, ptr addrspace(3) %315, align 16, !dbg !38
  %496 = load float, ptr addrspace(3) %317, align 4, !dbg !38
  %497 = load float, ptr addrspace(3) %319, align 8, !dbg !38
  %498 = load float, ptr addrspace(3) %321, align 4, !dbg !38
  %499 = fadd float %418, %488, !dbg !39
  %500 = fadd float %421, %488, !dbg !39
  %501 = fadd float %424, %488, !dbg !39
  %502 = fadd float %427, %488, !dbg !39
  %503 = fadd float %431, %490, !dbg !39
  %504 = fadd float %436, %490, !dbg !39
  %505 = fadd float %441, %490, !dbg !39
  %506 = fadd float %446, %490, !dbg !39
  %507 = fadd float %450, %492, !dbg !39
  %508 = fadd float %455, %492, !dbg !39
  %509 = fadd float %460, %492, !dbg !39
  %510 = fadd float %465, %492, !dbg !39
  %511 = fadd float %469, %494, !dbg !39
  %512 = fadd float %474, %494, !dbg !39
  %513 = fadd float %479, %494, !dbg !39
  %514 = fadd float %484, %494, !dbg !39
  %515 = fadd float %323, %495, !dbg !39
  %516 = fadd float %324, %496, !dbg !39
  %517 = fadd float %325, %497, !dbg !39
  %518 = fadd float %326, %498, !dbg !39
  %519 = fadd float %327, %495, !dbg !39
  %520 = fadd float %328, %496, !dbg !39
  %521 = fadd float %329, %497, !dbg !39
  %522 = fadd float %330, %498, !dbg !39
  %523 = fadd float %331, %495, !dbg !39
  %524 = fadd float %332, %496, !dbg !39
  %525 = fadd float %333, %497, !dbg !39
  %526 = fadd float %334, %498, !dbg !39
  %527 = fadd float %335, %495, !dbg !39
  %528 = fadd float %336, %496, !dbg !39
  %529 = fadd float %337, %497, !dbg !39
  %530 = fadd float %338, %498, !dbg !39
  %531 = fadd float %499, %84, !dbg !38
  %532 = fadd float %500, %85, !dbg !38
  %533 = fadd float %501, %86, !dbg !38
  %534 = fadd float %502, %87, !dbg !38
  %535 = fadd float %503, %93, !dbg !38
  %536 = fadd float %504, %94, !dbg !38
  %537 = fadd float %505, %95, !dbg !38
  %538 = fadd float %506, %96, !dbg !38
  %539 = fadd float %507, %102, !dbg !38
  %540 = fadd float %508, %103, !dbg !38
  %541 = fadd float %509, %104, !dbg !38
  %542 = fadd float %510, %105, !dbg !38
  %543 = fadd float %511, %111, !dbg !38
  %544 = fadd float %512, %112, !dbg !38
  %545 = fadd float %513, %113, !dbg !38
  %546 = fadd float %514, %114, !dbg !38
  %547 = fadd float %211, %515, !dbg !38
  %548 = fadd float %213, %516, !dbg !38
  %549 = fadd float %215, %517, !dbg !38
  %550 = fadd float %217, %518, !dbg !38
  %551 = fadd float %223, %519, !dbg !38
  %552 = fadd float %225, %520, !dbg !38
  %553 = fadd float %227, %521, !dbg !38
  %554 = fadd float %229, %522, !dbg !38
  %555 = fadd float %235, %523, !dbg !38
  %556 = fadd float %237, %524, !dbg !38
  %557 = fadd float %239, %525, !dbg !38
  %558 = fadd float %241, %526, !dbg !38
  %559 = fadd float %247, %527, !dbg !38
  %560 = fadd float %249, %528, !dbg !38
  %561 = fadd float %251, %529, !dbg !38
  %562 = fadd float %253, %530, !dbg !38
  %563 = getelementptr float, ptr addrspace(1) %4, i64 %63, !dbg !40
  %564 = getelementptr float, ptr addrspace(1) %4, i64 %65, !dbg !40
  %565 = getelementptr float, ptr addrspace(1) %4, i64 %67, !dbg !40
  %566 = getelementptr float, ptr addrspace(1) %4, i64 %69, !dbg !40
  %567 = bitcast float %531 to i32, !dbg !41
  %568 = bitcast float %532 to i32, !dbg !41
  %569 = bitcast float %533 to i32, !dbg !41
  %570 = bitcast float %534 to i32, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %567, i32 %568, i32 %569, i32 %570, ptr addrspace(1) %563, i1 %71) #2, !dbg !41
  %571 = bitcast float %535 to i32, !dbg !41
  %572 = bitcast float %536 to i32, !dbg !41
  %573 = bitcast float %537 to i32, !dbg !41
  %574 = bitcast float %538 to i32, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %571, i32 %572, i32 %573, i32 %574, ptr addrspace(1) %564, i1 %72) #2, !dbg !41
  %575 = bitcast float %539 to i32, !dbg !41
  %576 = bitcast float %540 to i32, !dbg !41
  %577 = bitcast float %541 to i32, !dbg !41
  %578 = bitcast float %542 to i32, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %575, i32 %576, i32 %577, i32 %578, ptr addrspace(1) %565, i1 %73) #2, !dbg !41
  %579 = bitcast float %543 to i32, !dbg !41
  %580 = bitcast float %544 to i32, !dbg !41
  %581 = bitcast float %545 to i32, !dbg !41
  %582 = bitcast float %546 to i32, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %579, i32 %580, i32 %581, i32 %582, ptr addrspace(1) %566, i1 %74) #2, !dbg !41
  %583 = getelementptr float, ptr addrspace(1) %5, i64 %267, !dbg !42
  %584 = getelementptr float, ptr addrspace(1) %5, i64 %269, !dbg !42
  %585 = getelementptr float, ptr addrspace(1) %5, i64 %271, !dbg !42
  %586 = getelementptr float, ptr addrspace(1) %5, i64 %273, !dbg !42
  %587 = bitcast float %547 to i32, !dbg !43
  %588 = bitcast float %548 to i32, !dbg !43
  %589 = bitcast float %549 to i32, !dbg !43
  %590 = bitcast float %550 to i32, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %587, i32 %588, i32 %589, i32 %590, ptr addrspace(1) %583, i1 %75) #2, !dbg !43
  %591 = bitcast float %551 to i32, !dbg !43
  %592 = bitcast float %552 to i32, !dbg !43
  %593 = bitcast float %553 to i32, !dbg !43
  %594 = bitcast float %554 to i32, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %591, i32 %592, i32 %593, i32 %594, ptr addrspace(1) %584, i1 %76) #2, !dbg !43
  %595 = bitcast float %555 to i32, !dbg !43
  %596 = bitcast float %556 to i32, !dbg !43
  %597 = bitcast float %557 to i32, !dbg !43
  %598 = bitcast float %558 to i32, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %595, i32 %596, i32 %597, i32 %598, ptr addrspace(1) %585, i1 %77) #2, !dbg !43
  %599 = bitcast float %559 to i32, !dbg !43
  %600 = bitcast float %560 to i32, !dbg !43
  %601 = bitcast float %561 to i32, !dbg !43
  %602 = bitcast float %562 to i32, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %599, i32 %600, i32 %601, i32 %602, ptr addrspace(1) %586, i1 %78) #2, !dbg !43
  ret void, !dbg !44
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cdrlbqqscvjc5otaqvxjix4lrth3ao4bd4z7duknnptca2gicz3p.py", directory: "inductor_cache/dr")
!4 = !{ptr @triton_poi_fused_add_convolution_mul_21, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_convolution_mul_21, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_convolution_mul_21", linkageName: "triton_poi_fused_add_convolution_mul_21", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 31, column: 19, scope: !7)
!21 = !DILocation(line: 30, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 40, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 30, scope: !7)
!25 = !DILocation(line: 32, column: 53, scope: !7)
!26 = !DILocation(line: 32, column: 45, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 33, column: 35, scope: !7)
!29 = !DILocation(line: 34, column: 39, scope: !7)
!30 = !DILocation(line: 34, column: 51, scope: !7)
!31 = !DILocation(line: 34, column: 35, scope: !7)
!32 = !DILocation(line: 34, column: 44, scope: !7)
!33 = !DILocation(line: 34, column: 30, scope: !7)
!34 = !DILocation(line: 34, column: 56, scope: !7)
!35 = !DILocation(line: 35, column: 30, scope: !7)
!36 = !DILocation(line: 35, column: 35, scope: !7)
!37 = !DILocation(line: 36, column: 18, scope: !7)
!38 = !DILocation(line: 38, column: 18, scope: !7)
!39 = !DILocation(line: 37, column: 18, scope: !7)
!40 = !DILocation(line: 39, column: 25, scope: !7)
!41 = !DILocation(line: 39, column: 46, scope: !7)
!42 = !DILocation(line: 40, column: 25, scope: !7)
!43 = !DILocation(line: 40, column: 57, scope: !7)
!44 = !DILocation(line: 40, column: 4, scope: !7)
