; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_17(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, i32 %12) local_unnamed_addr !dbg !7 {
  %14 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %15 = shl i32 %14, 10, !dbg !11
  %16 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %17 = shl i32 %16, 2, !dbg !12
  %18 = and i32 %17, 508, !dbg !12
  %19 = or disjoint i32 %15, %18, !dbg !13
  %20 = or disjoint i32 %19, 512, !dbg !13
  %21 = srem i32 %19, 512, !dbg !14
  %22 = sext i32 %19 to i64, !dbg !15
  %23 = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !15
  %24 = sext i32 %20 to i64, !dbg !15
  %25 = getelementptr float, ptr addrspace(1) %0, i64 %24, !dbg !15
  %26 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %23, i1 true) #3, !dbg !16
  %27 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %25, i1 true) #3, !dbg !16
  %28 = sext i32 %21 to i64, !dbg !17
  %29 = getelementptr float, ptr addrspace(1) %2, i64 %28, !dbg !17
  %30 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %29, i1 true) #3, !dbg !18
  %31 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %29, i1 true) #3, !dbg !18
  %32 = getelementptr float, ptr addrspace(1) %3, i64 %28, !dbg !19
  %33 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %32, i1 true) #3, !dbg !20
  %34 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %32, i1 true) #3, !dbg !20
  %35 = getelementptr float, ptr addrspace(1) %4, i64 %28, !dbg !21
  %36 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %35, i1 true) #3, !dbg !22
  %37 = extractvalue { i32, i32, i32, i32 } %36, 0, !dbg !22
  %38 = extractvalue { i32, i32, i32, i32 } %36, 1, !dbg !22
  %39 = extractvalue { i32, i32, i32, i32 } %36, 2, !dbg !22
  %40 = extractvalue { i32, i32, i32, i32 } %36, 3, !dbg !22
  %41 = bitcast i32 %37 to float, !dbg !22
  %42 = bitcast i32 %38 to float, !dbg !22
  %43 = bitcast i32 %39 to float, !dbg !22
  %44 = bitcast i32 %40 to float, !dbg !22
  %45 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %35, i1 true) #3, !dbg !22
  %46 = extractvalue { i32, i32, i32, i32 } %45, 0, !dbg !22
  %47 = extractvalue { i32, i32, i32, i32 } %45, 1, !dbg !22
  %48 = extractvalue { i32, i32, i32, i32 } %45, 2, !dbg !22
  %49 = extractvalue { i32, i32, i32, i32 } %45, 3, !dbg !22
  %50 = bitcast i32 %46 to float, !dbg !22
  %51 = bitcast i32 %47 to float, !dbg !22
  %52 = bitcast i32 %48 to float, !dbg !22
  %53 = bitcast i32 %49 to float, !dbg !22
  %54 = getelementptr float, ptr addrspace(1) %5, i64 %28, !dbg !23
  %55 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %54, i1 true) #3, !dbg !24
  %56 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %54, i1 true) #3, !dbg !24
  %57 = getelementptr float, ptr addrspace(1) %6, i64 %28, !dbg !25
  %58 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %57, i1 true) #3, !dbg !26
  %59 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %57, i1 true) #3, !dbg !26
  %60 = getelementptr float, ptr addrspace(1) %7, i64 %22, !dbg !27
  %61 = getelementptr float, ptr addrspace(1) %7, i64 %24, !dbg !27
  %62 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %60, i1 true) #3, !dbg !28
  %63 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %61, i1 true) #3, !dbg !28
  %64 = getelementptr float, ptr addrspace(1) %8, i64 %28, !dbg !29
  %65 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %64, i1 true) #3, !dbg !30
  %66 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %64, i1 true) #3, !dbg !30
  %67 = getelementptr float, ptr addrspace(1) %9, i64 %28, !dbg !31
  %68 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %67, i1 true) #3, !dbg !32
  %69 = extractvalue { i32, i32, i32, i32 } %68, 0, !dbg !32
  %70 = extractvalue { i32, i32, i32, i32 } %68, 1, !dbg !32
  %71 = extractvalue { i32, i32, i32, i32 } %68, 2, !dbg !32
  %72 = extractvalue { i32, i32, i32, i32 } %68, 3, !dbg !32
  %73 = bitcast i32 %69 to float, !dbg !32
  %74 = bitcast i32 %70 to float, !dbg !32
  %75 = bitcast i32 %71 to float, !dbg !32
  %76 = bitcast i32 %72 to float, !dbg !32
  %77 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %67, i1 true) #3, !dbg !32
  %78 = extractvalue { i32, i32, i32, i32 } %77, 0, !dbg !32
  %79 = extractvalue { i32, i32, i32, i32 } %77, 1, !dbg !32
  %80 = extractvalue { i32, i32, i32, i32 } %77, 2, !dbg !32
  %81 = extractvalue { i32, i32, i32, i32 } %77, 3, !dbg !32
  %82 = bitcast i32 %78 to float, !dbg !32
  %83 = bitcast i32 %79 to float, !dbg !32
  %84 = bitcast i32 %80 to float, !dbg !32
  %85 = bitcast i32 %81 to float, !dbg !32
  %86 = getelementptr float, ptr addrspace(1) %10, i64 %28, !dbg !33
  %87 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %86, i1 true) #3, !dbg !34
  %88 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %86, i1 true) #3, !dbg !34
  %89 = getelementptr float, ptr addrspace(1) %11, i64 %28, !dbg !35
  %90 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %89, i1 true) #3, !dbg !36
  %91 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %89, i1 true) #3, !dbg !36
  %92 = fadd float %41, 0x3EE4F8B580000000, !dbg !37
  %93 = fadd float %42, 0x3EE4F8B580000000, !dbg !37
  %94 = fadd float %43, 0x3EE4F8B580000000, !dbg !37
  %95 = fadd float %44, 0x3EE4F8B580000000, !dbg !37
  %96 = fadd float %50, 0x3EE4F8B580000000, !dbg !37
  %97 = fadd float %51, 0x3EE4F8B580000000, !dbg !37
  %98 = fadd float %52, 0x3EE4F8B580000000, !dbg !37
  %99 = fadd float %53, 0x3EE4F8B580000000, !dbg !37
  %100 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %.not.i = icmp eq i32 %100, 0, !dbg !38
  %101 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !38
  %.not1.i = icmp eq i32 %101, 0, !dbg !38
  br i1 %.not.i, label %107, label %102, !dbg !38

102:                                              ; preds = %13
  br i1 %.not1.i, label %105, label %103, !dbg !38

103:                                              ; preds = %102
  %104 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %92) #3, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

105:                                              ; preds = %102
  %106 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %92) #3, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

107:                                              ; preds = %13
  br i1 %.not1.i, label %110, label %108, !dbg !38

108:                                              ; preds = %107
  %109 = tail call float @llvm.nvvm.sqrt.rn.f(float %92) #3, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

110:                                              ; preds = %107
  %111 = tail call float @llvm.nvvm.sqrt.approx.f(float %92) #3, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

__nv_sqrtf.exit:                                  ; preds = %103, %105, %108, %110
  %.0.i = phi float [ %104, %103 ], [ %106, %105 ], [ %109, %108 ], [ %111, %110 ], !dbg !38
  %112 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %.not.i1 = icmp eq i32 %112, 0, !dbg !38
  %113 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !38
  %.not1.i4 = icmp eq i32 %113, 0, !dbg !38
  br i1 %.not.i1, label %119, label %114, !dbg !38

114:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %117, label %115, !dbg !38

115:                                              ; preds = %114
  %116 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %93) #3, !dbg !38
  br label %__nv_sqrtf.exit5, !dbg !38

117:                                              ; preds = %114
  %118 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %93) #3, !dbg !38
  br label %__nv_sqrtf.exit5, !dbg !38

119:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %122, label %120, !dbg !38

120:                                              ; preds = %119
  %121 = tail call float @llvm.nvvm.sqrt.rn.f(float %93) #3, !dbg !38
  br label %__nv_sqrtf.exit5, !dbg !38

122:                                              ; preds = %119
  %123 = tail call float @llvm.nvvm.sqrt.approx.f(float %93) #3, !dbg !38
  br label %__nv_sqrtf.exit5, !dbg !38

__nv_sqrtf.exit5:                                 ; preds = %115, %117, %120, %122
  %.0.i3 = phi float [ %116, %115 ], [ %118, %117 ], [ %121, %120 ], [ %123, %122 ], !dbg !38
  %124 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %.not.i6 = icmp eq i32 %124, 0, !dbg !38
  %125 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !38
  %.not1.i9 = icmp eq i32 %125, 0, !dbg !38
  br i1 %.not.i6, label %131, label %126, !dbg !38

126:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %129, label %127, !dbg !38

127:                                              ; preds = %126
  %128 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %94) #3, !dbg !38
  br label %__nv_sqrtf.exit10, !dbg !38

129:                                              ; preds = %126
  %130 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %94) #3, !dbg !38
  br label %__nv_sqrtf.exit10, !dbg !38

131:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %134, label %132, !dbg !38

132:                                              ; preds = %131
  %133 = tail call float @llvm.nvvm.sqrt.rn.f(float %94) #3, !dbg !38
  br label %__nv_sqrtf.exit10, !dbg !38

134:                                              ; preds = %131
  %135 = tail call float @llvm.nvvm.sqrt.approx.f(float %94) #3, !dbg !38
  br label %__nv_sqrtf.exit10, !dbg !38

__nv_sqrtf.exit10:                                ; preds = %127, %129, %132, %134
  %.0.i8 = phi float [ %128, %127 ], [ %130, %129 ], [ %133, %132 ], [ %135, %134 ], !dbg !38
  %136 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %.not.i11 = icmp eq i32 %136, 0, !dbg !38
  %137 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !38
  %.not1.i14 = icmp eq i32 %137, 0, !dbg !38
  br i1 %.not.i11, label %143, label %138, !dbg !38

138:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %141, label %139, !dbg !38

139:                                              ; preds = %138
  %140 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %95) #3, !dbg !38
  br label %__nv_sqrtf.exit15, !dbg !38

141:                                              ; preds = %138
  %142 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %95) #3, !dbg !38
  br label %__nv_sqrtf.exit15, !dbg !38

143:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %146, label %144, !dbg !38

144:                                              ; preds = %143
  %145 = tail call float @llvm.nvvm.sqrt.rn.f(float %95) #3, !dbg !38
  br label %__nv_sqrtf.exit15, !dbg !38

146:                                              ; preds = %143
  %147 = tail call float @llvm.nvvm.sqrt.approx.f(float %95) #3, !dbg !38
  br label %__nv_sqrtf.exit15, !dbg !38

__nv_sqrtf.exit15:                                ; preds = %139, %141, %144, %146
  %.0.i13 = phi float [ %140, %139 ], [ %142, %141 ], [ %145, %144 ], [ %147, %146 ], !dbg !38
  %148 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %.not.i16 = icmp eq i32 %148, 0, !dbg !38
  %149 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !38
  %.not1.i19 = icmp eq i32 %149, 0, !dbg !38
  br i1 %.not.i16, label %155, label %150, !dbg !38

150:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %153, label %151, !dbg !38

151:                                              ; preds = %150
  %152 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %96) #3, !dbg !38
  br label %__nv_sqrtf.exit20, !dbg !38

153:                                              ; preds = %150
  %154 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %96) #3, !dbg !38
  br label %__nv_sqrtf.exit20, !dbg !38

155:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %158, label %156, !dbg !38

156:                                              ; preds = %155
  %157 = tail call float @llvm.nvvm.sqrt.rn.f(float %96) #3, !dbg !38
  br label %__nv_sqrtf.exit20, !dbg !38

158:                                              ; preds = %155
  %159 = tail call float @llvm.nvvm.sqrt.approx.f(float %96) #3, !dbg !38
  br label %__nv_sqrtf.exit20, !dbg !38

__nv_sqrtf.exit20:                                ; preds = %151, %153, %156, %158
  %.0.i18 = phi float [ %152, %151 ], [ %154, %153 ], [ %157, %156 ], [ %159, %158 ], !dbg !38
  %160 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %.not.i21 = icmp eq i32 %160, 0, !dbg !38
  %161 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !38
  %.not1.i24 = icmp eq i32 %161, 0, !dbg !38
  br i1 %.not.i21, label %167, label %162, !dbg !38

162:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %165, label %163, !dbg !38

163:                                              ; preds = %162
  %164 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %97) #3, !dbg !38
  br label %__nv_sqrtf.exit25, !dbg !38

165:                                              ; preds = %162
  %166 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %97) #3, !dbg !38
  br label %__nv_sqrtf.exit25, !dbg !38

167:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %170, label %168, !dbg !38

168:                                              ; preds = %167
  %169 = tail call float @llvm.nvvm.sqrt.rn.f(float %97) #3, !dbg !38
  br label %__nv_sqrtf.exit25, !dbg !38

170:                                              ; preds = %167
  %171 = tail call float @llvm.nvvm.sqrt.approx.f(float %97) #3, !dbg !38
  br label %__nv_sqrtf.exit25, !dbg !38

__nv_sqrtf.exit25:                                ; preds = %163, %165, %168, %170
  %.0.i23 = phi float [ %164, %163 ], [ %166, %165 ], [ %169, %168 ], [ %171, %170 ], !dbg !38
  %172 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %.not.i26 = icmp eq i32 %172, 0, !dbg !38
  %173 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !38
  %.not1.i29 = icmp eq i32 %173, 0, !dbg !38
  br i1 %.not.i26, label %179, label %174, !dbg !38

174:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %177, label %175, !dbg !38

175:                                              ; preds = %174
  %176 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %98) #3, !dbg !38
  br label %__nv_sqrtf.exit30, !dbg !38

177:                                              ; preds = %174
  %178 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %98) #3, !dbg !38
  br label %__nv_sqrtf.exit30, !dbg !38

179:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %182, label %180, !dbg !38

180:                                              ; preds = %179
  %181 = tail call float @llvm.nvvm.sqrt.rn.f(float %98) #3, !dbg !38
  br label %__nv_sqrtf.exit30, !dbg !38

182:                                              ; preds = %179
  %183 = tail call float @llvm.nvvm.sqrt.approx.f(float %98) #3, !dbg !38
  br label %__nv_sqrtf.exit30, !dbg !38

__nv_sqrtf.exit30:                                ; preds = %175, %177, %180, %182
  %.0.i28 = phi float [ %176, %175 ], [ %178, %177 ], [ %181, %180 ], [ %183, %182 ], !dbg !38
  %184 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %.not.i31 = icmp eq i32 %184, 0, !dbg !38
  %185 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !38
  %.not1.i34 = icmp eq i32 %185, 0, !dbg !38
  br i1 %.not.i31, label %191, label %186, !dbg !38

186:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %189, label %187, !dbg !38

187:                                              ; preds = %186
  %188 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %99) #3, !dbg !38
  br label %__nv_sqrtf.exit35, !dbg !38

189:                                              ; preds = %186
  %190 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %99) #3, !dbg !38
  br label %__nv_sqrtf.exit35, !dbg !38

191:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %194, label %192, !dbg !38

192:                                              ; preds = %191
  %193 = tail call float @llvm.nvvm.sqrt.rn.f(float %99) #3, !dbg !38
  br label %__nv_sqrtf.exit35, !dbg !38

194:                                              ; preds = %191
  %195 = tail call float @llvm.nvvm.sqrt.approx.f(float %99) #3, !dbg !38
  br label %__nv_sqrtf.exit35, !dbg !38

__nv_sqrtf.exit35:                                ; preds = %187, %189, %192, %194
  %.0.i33 = phi float [ %188, %187 ], [ %190, %189 ], [ %193, %192 ], [ %195, %194 ], !dbg !38
  %196 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !39
  %197 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !39
  %198 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !39
  %199 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !39
  %200 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !39
  %201 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !39
  %202 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !39
  %203 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !39
  %204 = fadd float %73, 0x3EE4F8B580000000, !dbg !40
  %205 = fadd float %74, 0x3EE4F8B580000000, !dbg !40
  %206 = fadd float %75, 0x3EE4F8B580000000, !dbg !40
  %207 = fadd float %76, 0x3EE4F8B580000000, !dbg !40
  %208 = fadd float %82, 0x3EE4F8B580000000, !dbg !40
  %209 = fadd float %83, 0x3EE4F8B580000000, !dbg !40
  %210 = fadd float %84, 0x3EE4F8B580000000, !dbg !40
  %211 = fadd float %85, 0x3EE4F8B580000000, !dbg !40
  %212 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !41
  %.not.i36 = icmp eq i32 %212, 0, !dbg !41
  %213 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !41
  %.not1.i39 = icmp eq i32 %213, 0, !dbg !41
  br i1 %.not.i36, label %219, label %214, !dbg !41

214:                                              ; preds = %__nv_sqrtf.exit35
  br i1 %.not1.i39, label %217, label %215, !dbg !41

215:                                              ; preds = %214
  %216 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %204) #3, !dbg !41
  br label %__nv_sqrtf.exit40, !dbg !41

217:                                              ; preds = %214
  %218 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %204) #3, !dbg !41
  br label %__nv_sqrtf.exit40, !dbg !41

219:                                              ; preds = %__nv_sqrtf.exit35
  br i1 %.not1.i39, label %222, label %220, !dbg !41

220:                                              ; preds = %219
  %221 = tail call float @llvm.nvvm.sqrt.rn.f(float %204) #3, !dbg !41
  br label %__nv_sqrtf.exit40, !dbg !41

222:                                              ; preds = %219
  %223 = tail call float @llvm.nvvm.sqrt.approx.f(float %204) #3, !dbg !41
  br label %__nv_sqrtf.exit40, !dbg !41

__nv_sqrtf.exit40:                                ; preds = %215, %217, %220, %222
  %.0.i38 = phi float [ %216, %215 ], [ %218, %217 ], [ %221, %220 ], [ %223, %222 ], !dbg !41
  %224 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !41
  %.not.i41 = icmp eq i32 %224, 0, !dbg !41
  %225 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !41
  %.not1.i44 = icmp eq i32 %225, 0, !dbg !41
  br i1 %.not.i41, label %231, label %226, !dbg !41

226:                                              ; preds = %__nv_sqrtf.exit40
  br i1 %.not1.i44, label %229, label %227, !dbg !41

227:                                              ; preds = %226
  %228 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %205) #3, !dbg !41
  br label %__nv_sqrtf.exit45, !dbg !41

229:                                              ; preds = %226
  %230 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %205) #3, !dbg !41
  br label %__nv_sqrtf.exit45, !dbg !41

231:                                              ; preds = %__nv_sqrtf.exit40
  br i1 %.not1.i44, label %234, label %232, !dbg !41

232:                                              ; preds = %231
  %233 = tail call float @llvm.nvvm.sqrt.rn.f(float %205) #3, !dbg !41
  br label %__nv_sqrtf.exit45, !dbg !41

234:                                              ; preds = %231
  %235 = tail call float @llvm.nvvm.sqrt.approx.f(float %205) #3, !dbg !41
  br label %__nv_sqrtf.exit45, !dbg !41

__nv_sqrtf.exit45:                                ; preds = %227, %229, %232, %234
  %.0.i43 = phi float [ %228, %227 ], [ %230, %229 ], [ %233, %232 ], [ %235, %234 ], !dbg !41
  %236 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !41
  %.not.i46 = icmp eq i32 %236, 0, !dbg !41
  %237 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !41
  %.not1.i49 = icmp eq i32 %237, 0, !dbg !41
  br i1 %.not.i46, label %243, label %238, !dbg !41

238:                                              ; preds = %__nv_sqrtf.exit45
  br i1 %.not1.i49, label %241, label %239, !dbg !41

239:                                              ; preds = %238
  %240 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %206) #3, !dbg !41
  br label %__nv_sqrtf.exit50, !dbg !41

241:                                              ; preds = %238
  %242 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %206) #3, !dbg !41
  br label %__nv_sqrtf.exit50, !dbg !41

243:                                              ; preds = %__nv_sqrtf.exit45
  br i1 %.not1.i49, label %246, label %244, !dbg !41

244:                                              ; preds = %243
  %245 = tail call float @llvm.nvvm.sqrt.rn.f(float %206) #3, !dbg !41
  br label %__nv_sqrtf.exit50, !dbg !41

246:                                              ; preds = %243
  %247 = tail call float @llvm.nvvm.sqrt.approx.f(float %206) #3, !dbg !41
  br label %__nv_sqrtf.exit50, !dbg !41

__nv_sqrtf.exit50:                                ; preds = %239, %241, %244, %246
  %.0.i48 = phi float [ %240, %239 ], [ %242, %241 ], [ %245, %244 ], [ %247, %246 ], !dbg !41
  %248 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !41
  %.not.i51 = icmp eq i32 %248, 0, !dbg !41
  %249 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !41
  %.not1.i54 = icmp eq i32 %249, 0, !dbg !41
  br i1 %.not.i51, label %255, label %250, !dbg !41

250:                                              ; preds = %__nv_sqrtf.exit50
  br i1 %.not1.i54, label %253, label %251, !dbg !41

251:                                              ; preds = %250
  %252 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %207) #3, !dbg !41
  br label %__nv_sqrtf.exit55, !dbg !41

253:                                              ; preds = %250
  %254 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %207) #3, !dbg !41
  br label %__nv_sqrtf.exit55, !dbg !41

255:                                              ; preds = %__nv_sqrtf.exit50
  br i1 %.not1.i54, label %258, label %256, !dbg !41

256:                                              ; preds = %255
  %257 = tail call float @llvm.nvvm.sqrt.rn.f(float %207) #3, !dbg !41
  br label %__nv_sqrtf.exit55, !dbg !41

258:                                              ; preds = %255
  %259 = tail call float @llvm.nvvm.sqrt.approx.f(float %207) #3, !dbg !41
  br label %__nv_sqrtf.exit55, !dbg !41

__nv_sqrtf.exit55:                                ; preds = %251, %253, %256, %258
  %.0.i53 = phi float [ %252, %251 ], [ %254, %253 ], [ %257, %256 ], [ %259, %258 ], !dbg !41
  %260 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !41
  %.not.i56 = icmp eq i32 %260, 0, !dbg !41
  %261 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !41
  %.not1.i59 = icmp eq i32 %261, 0, !dbg !41
  br i1 %.not.i56, label %267, label %262, !dbg !41

262:                                              ; preds = %__nv_sqrtf.exit55
  br i1 %.not1.i59, label %265, label %263, !dbg !41

263:                                              ; preds = %262
  %264 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %208) #3, !dbg !41
  br label %__nv_sqrtf.exit60, !dbg !41

265:                                              ; preds = %262
  %266 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %208) #3, !dbg !41
  br label %__nv_sqrtf.exit60, !dbg !41

267:                                              ; preds = %__nv_sqrtf.exit55
  br i1 %.not1.i59, label %270, label %268, !dbg !41

268:                                              ; preds = %267
  %269 = tail call float @llvm.nvvm.sqrt.rn.f(float %208) #3, !dbg !41
  br label %__nv_sqrtf.exit60, !dbg !41

270:                                              ; preds = %267
  %271 = tail call float @llvm.nvvm.sqrt.approx.f(float %208) #3, !dbg !41
  br label %__nv_sqrtf.exit60, !dbg !41

__nv_sqrtf.exit60:                                ; preds = %263, %265, %268, %270
  %.0.i58 = phi float [ %264, %263 ], [ %266, %265 ], [ %269, %268 ], [ %271, %270 ], !dbg !41
  %272 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !41
  %.not.i61 = icmp eq i32 %272, 0, !dbg !41
  %273 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !41
  %.not1.i64 = icmp eq i32 %273, 0, !dbg !41
  br i1 %.not.i61, label %279, label %274, !dbg !41

274:                                              ; preds = %__nv_sqrtf.exit60
  br i1 %.not1.i64, label %277, label %275, !dbg !41

275:                                              ; preds = %274
  %276 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %209) #3, !dbg !41
  br label %__nv_sqrtf.exit65, !dbg !41

277:                                              ; preds = %274
  %278 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %209) #3, !dbg !41
  br label %__nv_sqrtf.exit65, !dbg !41

279:                                              ; preds = %__nv_sqrtf.exit60
  br i1 %.not1.i64, label %282, label %280, !dbg !41

280:                                              ; preds = %279
  %281 = tail call float @llvm.nvvm.sqrt.rn.f(float %209) #3, !dbg !41
  br label %__nv_sqrtf.exit65, !dbg !41

282:                                              ; preds = %279
  %283 = tail call float @llvm.nvvm.sqrt.approx.f(float %209) #3, !dbg !41
  br label %__nv_sqrtf.exit65, !dbg !41

__nv_sqrtf.exit65:                                ; preds = %275, %277, %280, %282
  %.0.i63 = phi float [ %276, %275 ], [ %278, %277 ], [ %281, %280 ], [ %283, %282 ], !dbg !41
  %284 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !41
  %.not.i66 = icmp eq i32 %284, 0, !dbg !41
  %285 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !41
  %.not1.i69 = icmp eq i32 %285, 0, !dbg !41
  br i1 %.not.i66, label %291, label %286, !dbg !41

286:                                              ; preds = %__nv_sqrtf.exit65
  br i1 %.not1.i69, label %289, label %287, !dbg !41

287:                                              ; preds = %286
  %288 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %210) #3, !dbg !41
  br label %__nv_sqrtf.exit70, !dbg !41

289:                                              ; preds = %286
  %290 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %210) #3, !dbg !41
  br label %__nv_sqrtf.exit70, !dbg !41

291:                                              ; preds = %__nv_sqrtf.exit65
  br i1 %.not1.i69, label %294, label %292, !dbg !41

292:                                              ; preds = %291
  %293 = tail call float @llvm.nvvm.sqrt.rn.f(float %210) #3, !dbg !41
  br label %__nv_sqrtf.exit70, !dbg !41

294:                                              ; preds = %291
  %295 = tail call float @llvm.nvvm.sqrt.approx.f(float %210) #3, !dbg !41
  br label %__nv_sqrtf.exit70, !dbg !41

__nv_sqrtf.exit70:                                ; preds = %287, %289, %292, %294
  %.0.i68 = phi float [ %288, %287 ], [ %290, %289 ], [ %293, %292 ], [ %295, %294 ], !dbg !41
  %296 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !41
  %.not.i71 = icmp eq i32 %296, 0, !dbg !41
  %297 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !41
  %.not1.i74 = icmp eq i32 %297, 0, !dbg !41
  br i1 %.not.i71, label %303, label %298, !dbg !41

298:                                              ; preds = %__nv_sqrtf.exit70
  br i1 %.not1.i74, label %301, label %299, !dbg !41

299:                                              ; preds = %298
  %300 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %211) #3, !dbg !41
  br label %__nv_sqrtf.exit75, !dbg !41

301:                                              ; preds = %298
  %302 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %211) #3, !dbg !41
  br label %__nv_sqrtf.exit75, !dbg !41

303:                                              ; preds = %__nv_sqrtf.exit70
  br i1 %.not1.i74, label %306, label %304, !dbg !41

304:                                              ; preds = %303
  %305 = tail call float @llvm.nvvm.sqrt.rn.f(float %211) #3, !dbg !41
  br label %__nv_sqrtf.exit75, !dbg !41

306:                                              ; preds = %303
  %307 = tail call float @llvm.nvvm.sqrt.approx.f(float %211) #3, !dbg !41
  br label %__nv_sqrtf.exit75, !dbg !41

__nv_sqrtf.exit75:                                ; preds = %299, %301, %304, %306
  %.0.i73 = phi float [ %300, %299 ], [ %302, %301 ], [ %305, %304 ], [ %307, %306 ], !dbg !41
  %308 = extractvalue { i32, i32, i32, i32 } %63, 3, !dbg !28
  %309 = bitcast i32 %308 to float, !dbg !28
  %310 = extractvalue { i32, i32, i32, i32 } %66, 3, !dbg !30
  %311 = extractvalue { i32, i32, i32, i32 } %63, 2, !dbg !28
  %312 = bitcast i32 %311 to float, !dbg !28
  %313 = extractvalue { i32, i32, i32, i32 } %66, 2, !dbg !30
  %314 = extractvalue { i32, i32, i32, i32 } %63, 1, !dbg !28
  %315 = bitcast i32 %314 to float, !dbg !28
  %316 = extractvalue { i32, i32, i32, i32 } %66, 1, !dbg !30
  %317 = extractvalue { i32, i32, i32, i32 } %63, 0, !dbg !28
  %318 = bitcast i32 %317 to float, !dbg !28
  %319 = extractvalue { i32, i32, i32, i32 } %66, 0, !dbg !30
  %320 = extractvalue { i32, i32, i32, i32 } %62, 3, !dbg !28
  %321 = bitcast i32 %320 to float, !dbg !28
  %322 = extractvalue { i32, i32, i32, i32 } %65, 3, !dbg !30
  %323 = extractvalue { i32, i32, i32, i32 } %62, 2, !dbg !28
  %324 = bitcast i32 %323 to float, !dbg !28
  %325 = extractvalue { i32, i32, i32, i32 } %65, 2, !dbg !30
  %326 = extractvalue { i32, i32, i32, i32 } %62, 1, !dbg !28
  %327 = bitcast i32 %326 to float, !dbg !28
  %328 = extractvalue { i32, i32, i32, i32 } %65, 1, !dbg !30
  %329 = extractvalue { i32, i32, i32, i32 } %62, 0, !dbg !28
  %330 = bitcast i32 %329 to float, !dbg !28
  %331 = extractvalue { i32, i32, i32, i32 } %65, 0, !dbg !30
  %332 = extractvalue { i32, i32, i32, i32 } %27, 3, !dbg !16
  %333 = bitcast i32 %332 to float, !dbg !16
  %334 = extractvalue { i32, i32, i32, i32 } %31, 3, !dbg !18
  %335 = bitcast i32 %334 to float, !dbg !18
  %336 = fadd float %333, %335, !dbg !42
  %337 = extractvalue { i32, i32, i32, i32 } %34, 3, !dbg !20
  %338 = extractvalue { i32, i32, i32, i32 } %56, 3, !dbg !24
  %339 = extractvalue { i32, i32, i32, i32 } %59, 3, !dbg !26
  %340 = extractvalue { i32, i32, i32, i32 } %27, 2, !dbg !16
  %341 = bitcast i32 %340 to float, !dbg !16
  %342 = extractvalue { i32, i32, i32, i32 } %31, 2, !dbg !18
  %343 = bitcast i32 %342 to float, !dbg !18
  %344 = fadd float %341, %343, !dbg !42
  %345 = extractvalue { i32, i32, i32, i32 } %34, 2, !dbg !20
  %346 = extractvalue { i32, i32, i32, i32 } %56, 2, !dbg !24
  %347 = extractvalue { i32, i32, i32, i32 } %59, 2, !dbg !26
  %348 = extractvalue { i32, i32, i32, i32 } %27, 1, !dbg !16
  %349 = bitcast i32 %348 to float, !dbg !16
  %350 = extractvalue { i32, i32, i32, i32 } %31, 1, !dbg !18
  %351 = bitcast i32 %350 to float, !dbg !18
  %352 = fadd float %349, %351, !dbg !42
  %353 = extractvalue { i32, i32, i32, i32 } %34, 1, !dbg !20
  %354 = extractvalue { i32, i32, i32, i32 } %56, 1, !dbg !24
  %355 = extractvalue { i32, i32, i32, i32 } %59, 1, !dbg !26
  %356 = extractvalue { i32, i32, i32, i32 } %27, 0, !dbg !16
  %357 = bitcast i32 %356 to float, !dbg !16
  %358 = extractvalue { i32, i32, i32, i32 } %31, 0, !dbg !18
  %359 = bitcast i32 %358 to float, !dbg !18
  %360 = fadd float %357, %359, !dbg !42
  %361 = extractvalue { i32, i32, i32, i32 } %34, 0, !dbg !20
  %362 = extractvalue { i32, i32, i32, i32 } %56, 0, !dbg !24
  %363 = extractvalue { i32, i32, i32, i32 } %59, 0, !dbg !26
  %364 = extractvalue { i32, i32, i32, i32 } %26, 3, !dbg !16
  %365 = bitcast i32 %364 to float, !dbg !16
  %366 = extractvalue { i32, i32, i32, i32 } %30, 3, !dbg !18
  %367 = bitcast i32 %366 to float, !dbg !18
  %368 = fadd float %365, %367, !dbg !42
  %369 = extractvalue { i32, i32, i32, i32 } %33, 3, !dbg !20
  %370 = extractvalue { i32, i32, i32, i32 } %55, 3, !dbg !24
  %371 = extractvalue { i32, i32, i32, i32 } %58, 3, !dbg !26
  %372 = extractvalue { i32, i32, i32, i32 } %26, 2, !dbg !16
  %373 = bitcast i32 %372 to float, !dbg !16
  %374 = extractvalue { i32, i32, i32, i32 } %30, 2, !dbg !18
  %375 = bitcast i32 %374 to float, !dbg !18
  %376 = fadd float %373, %375, !dbg !42
  %377 = extractvalue { i32, i32, i32, i32 } %33, 2, !dbg !20
  %378 = extractvalue { i32, i32, i32, i32 } %55, 2, !dbg !24
  %379 = extractvalue { i32, i32, i32, i32 } %58, 2, !dbg !26
  %380 = extractvalue { i32, i32, i32, i32 } %26, 1, !dbg !16
  %381 = bitcast i32 %380 to float, !dbg !16
  %382 = extractvalue { i32, i32, i32, i32 } %30, 1, !dbg !18
  %383 = bitcast i32 %382 to float, !dbg !18
  %384 = fadd float %381, %383, !dbg !42
  %385 = extractvalue { i32, i32, i32, i32 } %33, 1, !dbg !20
  %386 = extractvalue { i32, i32, i32, i32 } %55, 1, !dbg !24
  %387 = extractvalue { i32, i32, i32, i32 } %58, 1, !dbg !26
  %388 = extractvalue { i32, i32, i32, i32 } %26, 0, !dbg !16
  %389 = bitcast i32 %388 to float, !dbg !16
  %390 = extractvalue { i32, i32, i32, i32 } %30, 0, !dbg !18
  %391 = bitcast i32 %390 to float, !dbg !18
  %392 = fadd float %389, %391, !dbg !42
  %393 = extractvalue { i32, i32, i32, i32 } %33, 0, !dbg !20
  %394 = extractvalue { i32, i32, i32, i32 } %55, 0, !dbg !24
  %395 = extractvalue { i32, i32, i32, i32 } %58, 0, !dbg !26
  %396 = extractvalue { i32, i32, i32, i32 } %91, 3, !dbg !36
  %397 = extractvalue { i32, i32, i32, i32 } %91, 2, !dbg !36
  %398 = extractvalue { i32, i32, i32, i32 } %91, 1, !dbg !36
  %399 = extractvalue { i32, i32, i32, i32 } %91, 0, !dbg !36
  %400 = extractvalue { i32, i32, i32, i32 } %90, 3, !dbg !36
  %401 = extractvalue { i32, i32, i32, i32 } %90, 2, !dbg !36
  %402 = extractvalue { i32, i32, i32, i32 } %90, 1, !dbg !36
  %403 = extractvalue { i32, i32, i32, i32 } %90, 0, !dbg !36
  %404 = extractvalue { i32, i32, i32, i32 } %88, 3, !dbg !34
  %405 = extractvalue { i32, i32, i32, i32 } %88, 2, !dbg !34
  %406 = extractvalue { i32, i32, i32, i32 } %88, 1, !dbg !34
  %407 = extractvalue { i32, i32, i32, i32 } %88, 0, !dbg !34
  %408 = extractvalue { i32, i32, i32, i32 } %87, 3, !dbg !34
  %409 = extractvalue { i32, i32, i32, i32 } %87, 2, !dbg !34
  %410 = extractvalue { i32, i32, i32, i32 } %87, 1, !dbg !34
  %411 = extractvalue { i32, i32, i32, i32 } %87, 0, !dbg !34
  %412 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i38) #3, !dbg !43
  %413 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i43) #3, !dbg !43
  %414 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i48) #3, !dbg !43
  %415 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i53) #3, !dbg !43
  %416 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i58) #3, !dbg !43
  %417 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i63) #3, !dbg !43
  %418 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i68) #3, !dbg !43
  %419 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i73) #3, !dbg !43
  %420 = insertelement <2 x i32> poison, i32 %393, i64 0, !dbg !20
  %421 = insertelement <2 x i32> %420, i32 %331, i64 1, !dbg !20
  %422 = bitcast <2 x i32> %421 to <2 x float>, !dbg !20
  %423 = insertelement <2 x float> poison, float %392, i64 0, !dbg !44
  %424 = insertelement <2 x float> %423, float %330, i64 1, !dbg !44
  %425 = fsub <2 x float> %424, %422, !dbg !44
  %426 = insertelement <2 x i32> poison, i32 %395, i64 0, !dbg !26
  %427 = insertelement <2 x i32> %426, i32 %403, i64 1, !dbg !26
  %428 = bitcast <2 x i32> %427 to <2 x float>, !dbg !26
  %429 = insertelement <2 x i32> poison, i32 %394, i64 0, !dbg !24
  %430 = insertelement <2 x i32> %429, i32 %411, i64 1, !dbg !24
  %431 = bitcast <2 x i32> %430 to <2 x float>, !dbg !24
  %432 = insertelement <2 x float> poison, float %196, i64 0, !dbg !45
  %433 = insertelement <2 x float> %432, float %412, i64 1, !dbg !45
  %434 = fmul <2 x float> %425, %433, !dbg !45
  %435 = fmul <2 x float> %434, %431, !dbg !46
  %436 = fadd <2 x float> %435, %428, !dbg !47
  %437 = insertelement <2 x i32> poison, i32 %385, i64 0, !dbg !20
  %438 = insertelement <2 x i32> %437, i32 %328, i64 1, !dbg !20
  %439 = bitcast <2 x i32> %438 to <2 x float>, !dbg !20
  %440 = insertelement <2 x float> poison, float %384, i64 0, !dbg !44
  %441 = insertelement <2 x float> %440, float %327, i64 1, !dbg !44
  %442 = fsub <2 x float> %441, %439, !dbg !44
  %443 = insertelement <2 x i32> poison, i32 %387, i64 0, !dbg !26
  %444 = insertelement <2 x i32> %443, i32 %402, i64 1, !dbg !26
  %445 = bitcast <2 x i32> %444 to <2 x float>, !dbg !26
  %446 = insertelement <2 x i32> poison, i32 %386, i64 0, !dbg !24
  %447 = insertelement <2 x i32> %446, i32 %410, i64 1, !dbg !24
  %448 = bitcast <2 x i32> %447 to <2 x float>, !dbg !24
  %449 = insertelement <2 x float> poison, float %197, i64 0, !dbg !45
  %450 = insertelement <2 x float> %449, float %413, i64 1, !dbg !45
  %451 = fmul <2 x float> %442, %450, !dbg !45
  %452 = fmul <2 x float> %451, %448, !dbg !46
  %453 = fadd <2 x float> %452, %445, !dbg !47
  %454 = insertelement <2 x i32> poison, i32 %377, i64 0, !dbg !20
  %455 = insertelement <2 x i32> %454, i32 %325, i64 1, !dbg !20
  %456 = bitcast <2 x i32> %455 to <2 x float>, !dbg !20
  %457 = insertelement <2 x float> poison, float %376, i64 0, !dbg !44
  %458 = insertelement <2 x float> %457, float %324, i64 1, !dbg !44
  %459 = fsub <2 x float> %458, %456, !dbg !44
  %460 = insertelement <2 x i32> poison, i32 %379, i64 0, !dbg !26
  %461 = insertelement <2 x i32> %460, i32 %401, i64 1, !dbg !26
  %462 = bitcast <2 x i32> %461 to <2 x float>, !dbg !26
  %463 = insertelement <2 x i32> poison, i32 %378, i64 0, !dbg !24
  %464 = insertelement <2 x i32> %463, i32 %409, i64 1, !dbg !24
  %465 = bitcast <2 x i32> %464 to <2 x float>, !dbg !24
  %466 = insertelement <2 x float> poison, float %198, i64 0, !dbg !45
  %467 = insertelement <2 x float> %466, float %414, i64 1, !dbg !45
  %468 = fmul <2 x float> %459, %467, !dbg !45
  %469 = fmul <2 x float> %468, %465, !dbg !46
  %470 = fadd <2 x float> %469, %462, !dbg !47
  %471 = insertelement <2 x i32> poison, i32 %369, i64 0, !dbg !20
  %472 = insertelement <2 x i32> %471, i32 %322, i64 1, !dbg !20
  %473 = bitcast <2 x i32> %472 to <2 x float>, !dbg !20
  %474 = insertelement <2 x float> poison, float %368, i64 0, !dbg !44
  %475 = insertelement <2 x float> %474, float %321, i64 1, !dbg !44
  %476 = fsub <2 x float> %475, %473, !dbg !44
  %477 = insertelement <2 x i32> poison, i32 %371, i64 0, !dbg !26
  %478 = insertelement <2 x i32> %477, i32 %400, i64 1, !dbg !26
  %479 = bitcast <2 x i32> %478 to <2 x float>, !dbg !26
  %480 = insertelement <2 x i32> poison, i32 %370, i64 0, !dbg !24
  %481 = insertelement <2 x i32> %480, i32 %408, i64 1, !dbg !24
  %482 = bitcast <2 x i32> %481 to <2 x float>, !dbg !24
  %483 = insertelement <2 x float> poison, float %199, i64 0, !dbg !45
  %484 = insertelement <2 x float> %483, float %415, i64 1, !dbg !45
  %485 = fmul <2 x float> %476, %484, !dbg !45
  %486 = fmul <2 x float> %485, %482, !dbg !46
  %487 = fadd <2 x float> %486, %479, !dbg !47
  %488 = insertelement <2 x i32> poison, i32 %361, i64 0, !dbg !20
  %489 = insertelement <2 x i32> %488, i32 %319, i64 1, !dbg !20
  %490 = bitcast <2 x i32> %489 to <2 x float>, !dbg !20
  %491 = insertelement <2 x float> poison, float %360, i64 0, !dbg !44
  %492 = insertelement <2 x float> %491, float %318, i64 1, !dbg !44
  %493 = fsub <2 x float> %492, %490, !dbg !44
  %494 = insertelement <2 x i32> poison, i32 %363, i64 0, !dbg !26
  %495 = insertelement <2 x i32> %494, i32 %399, i64 1, !dbg !26
  %496 = bitcast <2 x i32> %495 to <2 x float>, !dbg !26
  %497 = insertelement <2 x i32> poison, i32 %362, i64 0, !dbg !24
  %498 = insertelement <2 x i32> %497, i32 %407, i64 1, !dbg !24
  %499 = bitcast <2 x i32> %498 to <2 x float>, !dbg !24
  %500 = insertelement <2 x float> poison, float %200, i64 0, !dbg !45
  %501 = insertelement <2 x float> %500, float %416, i64 1, !dbg !45
  %502 = fmul <2 x float> %493, %501, !dbg !45
  %503 = fmul <2 x float> %502, %499, !dbg !46
  %504 = fadd <2 x float> %503, %496, !dbg !47
  %505 = insertelement <2 x i32> poison, i32 %353, i64 0, !dbg !20
  %506 = insertelement <2 x i32> %505, i32 %316, i64 1, !dbg !20
  %507 = bitcast <2 x i32> %506 to <2 x float>, !dbg !20
  %508 = insertelement <2 x float> poison, float %352, i64 0, !dbg !44
  %509 = insertelement <2 x float> %508, float %315, i64 1, !dbg !44
  %510 = fsub <2 x float> %509, %507, !dbg !44
  %511 = insertelement <2 x i32> poison, i32 %355, i64 0, !dbg !26
  %512 = insertelement <2 x i32> %511, i32 %398, i64 1, !dbg !26
  %513 = bitcast <2 x i32> %512 to <2 x float>, !dbg !26
  %514 = insertelement <2 x i32> poison, i32 %354, i64 0, !dbg !24
  %515 = insertelement <2 x i32> %514, i32 %406, i64 1, !dbg !24
  %516 = bitcast <2 x i32> %515 to <2 x float>, !dbg !24
  %517 = insertelement <2 x float> poison, float %201, i64 0, !dbg !45
  %518 = insertelement <2 x float> %517, float %417, i64 1, !dbg !45
  %519 = fmul <2 x float> %510, %518, !dbg !45
  %520 = fmul <2 x float> %519, %516, !dbg !46
  %521 = fadd <2 x float> %520, %513, !dbg !47
  %522 = insertelement <2 x i32> poison, i32 %345, i64 0, !dbg !20
  %523 = insertelement <2 x i32> %522, i32 %313, i64 1, !dbg !20
  %524 = bitcast <2 x i32> %523 to <2 x float>, !dbg !20
  %525 = insertelement <2 x float> poison, float %344, i64 0, !dbg !44
  %526 = insertelement <2 x float> %525, float %312, i64 1, !dbg !44
  %527 = fsub <2 x float> %526, %524, !dbg !44
  %528 = insertelement <2 x i32> poison, i32 %347, i64 0, !dbg !26
  %529 = insertelement <2 x i32> %528, i32 %397, i64 1, !dbg !26
  %530 = bitcast <2 x i32> %529 to <2 x float>, !dbg !26
  %531 = insertelement <2 x i32> poison, i32 %346, i64 0, !dbg !24
  %532 = insertelement <2 x i32> %531, i32 %405, i64 1, !dbg !24
  %533 = bitcast <2 x i32> %532 to <2 x float>, !dbg !24
  %534 = insertelement <2 x float> poison, float %202, i64 0, !dbg !45
  %535 = insertelement <2 x float> %534, float %418, i64 1, !dbg !45
  %536 = fmul <2 x float> %527, %535, !dbg !45
  %537 = fmul <2 x float> %536, %533, !dbg !46
  %538 = fadd <2 x float> %537, %530, !dbg !47
  %539 = insertelement <2 x i32> poison, i32 %337, i64 0, !dbg !20
  %540 = insertelement <2 x i32> %539, i32 %310, i64 1, !dbg !20
  %541 = bitcast <2 x i32> %540 to <2 x float>, !dbg !20
  %542 = insertelement <2 x float> poison, float %336, i64 0, !dbg !44
  %543 = insertelement <2 x float> %542, float %309, i64 1, !dbg !44
  %544 = fsub <2 x float> %543, %541, !dbg !44
  %545 = insertelement <2 x i32> poison, i32 %339, i64 0, !dbg !26
  %546 = insertelement <2 x i32> %545, i32 %396, i64 1, !dbg !26
  %547 = bitcast <2 x i32> %546 to <2 x float>, !dbg !26
  %548 = insertelement <2 x i32> poison, i32 %338, i64 0, !dbg !24
  %549 = insertelement <2 x i32> %548, i32 %404, i64 1, !dbg !24
  %550 = bitcast <2 x i32> %549 to <2 x float>, !dbg !24
  %551 = insertelement <2 x float> poison, float %203, i64 0, !dbg !45
  %552 = insertelement <2 x float> %551, float %419, i64 1, !dbg !45
  %553 = fmul <2 x float> %544, %552, !dbg !45
  %554 = fmul <2 x float> %553, %550, !dbg !46
  %555 = fadd <2 x float> %554, %547, !dbg !47
  %shift = shufflevector <2 x float> %436, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !48
  %556 = fadd <2 x float> %436, %shift, !dbg !48
  %557 = extractelement <2 x float> %556, i64 0, !dbg !48
  %shift76 = shufflevector <2 x float> %453, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !48
  %558 = fadd <2 x float> %453, %shift76, !dbg !48
  %559 = extractelement <2 x float> %558, i64 0, !dbg !48
  %shift77 = shufflevector <2 x float> %470, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !48
  %560 = fadd <2 x float> %470, %shift77, !dbg !48
  %561 = extractelement <2 x float> %560, i64 0, !dbg !48
  %shift78 = shufflevector <2 x float> %487, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !48
  %562 = fadd <2 x float> %487, %shift78, !dbg !48
  %563 = extractelement <2 x float> %562, i64 0, !dbg !48
  %shift79 = shufflevector <2 x float> %504, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !48
  %564 = fadd <2 x float> %504, %shift79, !dbg !48
  %565 = extractelement <2 x float> %564, i64 0, !dbg !48
  %shift80 = shufflevector <2 x float> %521, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !48
  %566 = fadd <2 x float> %521, %shift80, !dbg !48
  %567 = extractelement <2 x float> %566, i64 0, !dbg !48
  %shift81 = shufflevector <2 x float> %538, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !48
  %568 = fadd <2 x float> %538, %shift81, !dbg !48
  %569 = extractelement <2 x float> %568, i64 0, !dbg !48
  %shift82 = shufflevector <2 x float> %555, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !48
  %570 = fadd <2 x float> %555, %shift82, !dbg !48
  %571 = extractelement <2 x float> %570, i64 0, !dbg !48
  %572 = fcmp olt float %557, 0.000000e+00, !dbg !49
  %573 = fcmp olt float %559, 0.000000e+00, !dbg !49
  %574 = fcmp olt float %561, 0.000000e+00, !dbg !49
  %575 = fcmp olt float %563, 0.000000e+00, !dbg !49
  %576 = fcmp olt float %565, 0.000000e+00, !dbg !49
  %577 = fcmp olt float %567, 0.000000e+00, !dbg !49
  %578 = fcmp olt float %569, 0.000000e+00, !dbg !49
  %579 = fcmp olt float %571, 0.000000e+00, !dbg !49
  %580 = select i1 %572, float 0.000000e+00, float %557, !dbg !53
  %581 = select i1 %573, float 0.000000e+00, float %559, !dbg !53
  %582 = select i1 %574, float 0.000000e+00, float %561, !dbg !53
  %583 = select i1 %575, float 0.000000e+00, float %563, !dbg !53
  %584 = select i1 %576, float 0.000000e+00, float %565, !dbg !53
  %585 = select i1 %577, float 0.000000e+00, float %567, !dbg !53
  %586 = select i1 %578, float 0.000000e+00, float %569, !dbg !53
  %587 = select i1 %579, float 0.000000e+00, float %571, !dbg !53
  %588 = bitcast float %392 to i32, !dbg !54
  %589 = bitcast float %384 to i32, !dbg !54
  %590 = bitcast float %376 to i32, !dbg !54
  %591 = bitcast float %368 to i32, !dbg !54
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %588, i32 %589, i32 %590, i32 %591, ptr addrspace(1) %23, i1 true) #3, !dbg !54
  %592 = bitcast float %360 to i32, !dbg !54
  %593 = bitcast float %352 to i32, !dbg !54
  %594 = bitcast float %344 to i32, !dbg !54
  %595 = bitcast float %336 to i32, !dbg !54
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %592, i32 %593, i32 %594, i32 %595, ptr addrspace(1) %25, i1 true) #3, !dbg !54
  %596 = getelementptr float, ptr addrspace(1) %1, i64 %22, !dbg !55
  %597 = getelementptr float, ptr addrspace(1) %1, i64 %24, !dbg !55
  %598 = bitcast float %580 to i32, !dbg !56
  %599 = bitcast float %581 to i32, !dbg !56
  %600 = bitcast float %582 to i32, !dbg !56
  %601 = bitcast float %583 to i32, !dbg !56
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %598, i32 %599, i32 %600, i32 %601, ptr addrspace(1) %596, i1 true) #3, !dbg !56
  %602 = bitcast float %584 to i32, !dbg !56
  %603 = bitcast float %585 to i32, !dbg !56
  %604 = bitcast float %586 to i32, !dbg !56
  %605 = bitcast float %587 to i32, !dbg !56
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %602, i32 %603, i32 %604, i32 %605, ptr addrspace(1) %597, i1 true) #3, !dbg !56
  ret void, !dbg !57
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ct3vusnvkbjqyxjwnvlaksvuoipaorz23vrv7pv52o6ri3xmbbzh.py", directory: "inductor_cache/t3")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_17, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_17, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_17", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_17", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 26, column: 39, scope: !7)
!17 = !DILocation(line: 27, column: 30, scope: !7)
!18 = !DILocation(line: 27, column: 35, scope: !7)
!19 = !DILocation(line: 28, column: 30, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 29, column: 30, scope: !7)
!22 = !DILocation(line: 29, column: 35, scope: !7)
!23 = !DILocation(line: 30, column: 31, scope: !7)
!24 = !DILocation(line: 30, column: 36, scope: !7)
!25 = !DILocation(line: 31, column: 31, scope: !7)
!26 = !DILocation(line: 31, column: 36, scope: !7)
!27 = !DILocation(line: 32, column: 31, scope: !7)
!28 = !DILocation(line: 32, column: 36, scope: !7)
!29 = !DILocation(line: 33, column: 31, scope: !7)
!30 = !DILocation(line: 33, column: 36, scope: !7)
!31 = !DILocation(line: 34, column: 31, scope: !7)
!32 = !DILocation(line: 34, column: 36, scope: !7)
!33 = !DILocation(line: 35, column: 31, scope: !7)
!34 = !DILocation(line: 35, column: 36, scope: !7)
!35 = !DILocation(line: 36, column: 31, scope: !7)
!36 = !DILocation(line: 36, column: 36, scope: !7)
!37 = !DILocation(line: 40, column: 18, scope: !7)
!38 = !DILocation(line: 41, column: 26, scope: !7)
!39 = !DILocation(line: 43, column: 19, scope: !7)
!40 = !DILocation(line: 50, column: 20, scope: !7)
!41 = !DILocation(line: 51, column: 27, scope: !7)
!42 = !DILocation(line: 37, column: 18, scope: !7)
!43 = !DILocation(line: 52, column: 19, scope: !7)
!44 = !DILocation(line: 38, column: 18, scope: !7)
!45 = !DILocation(line: 46, column: 19, scope: !7)
!46 = !DILocation(line: 47, column: 20, scope: !7)
!47 = !DILocation(line: 48, column: 20, scope: !7)
!48 = !DILocation(line: 57, column: 20, scope: !7)
!49 = !DILocation(line: 118, column: 15, scope: !50, inlinedAt: !52)
!50 = distinct !DILexicalBlockFile(scope: !7, file: !51, discriminator: 0)
!51 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!52 = !DILocation(line: 59, column: 42, scope: !7)
!53 = !DILocation(line: 121, column: 29, scope: !50, inlinedAt: !52)
!54 = !DILocation(line: 60, column: 39, scope: !7)
!55 = !DILocation(line: 61, column: 28, scope: !7)
!56 = !DILocation(line: 61, column: 40, scope: !7)
!57 = !DILocation(line: 61, column: 4, scope: !7)
