; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_convolution_14(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #1, !dbg !10
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %8 = lshr i32 %7, 4, !dbg !11
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !12
  %10 = shl i32 %7, 2, !dbg !13
  %11 = insertelement <2 x i32> poison, i32 %9, i64 0, !dbg !14
  %12 = insertelement <2 x i32> %11, i32 %6, i64 1, !dbg !14
  %13 = shl <2 x i32> %12, splat (i32 6), !dbg !14
  %14 = insertelement <2 x i32> poison, i32 %10, i64 0, !dbg !13
  %15 = insertelement <2 x i32> %14, i32 %8, i64 1, !dbg !13
  %16 = and <2 x i32> %15, <i32 60, i32 15>, !dbg !13
  %17 = or disjoint <2 x i32> %13, %16, !dbg !15
  %18 = extractelement <2 x i32> %17, i64 1, !dbg !16
  %19 = or disjoint i32 %18, 16, !dbg !16
  %20 = or disjoint i32 %18, 32, !dbg !16
  %21 = or disjoint i32 %18, 48, !dbg !16
  %22 = icmp slt i32 %18, 76, !dbg !17
  %23 = icmp slt i32 %19, 76, !dbg !17
  %24 = icmp slt i32 %20, 76, !dbg !17
  %25 = icmp slt i32 %21, 76, !dbg !17
  %26 = extractelement <2 x i32> %17, i64 0, !dbg !18
  %27 = icmp slt i32 %26, 64, !dbg !18
  %.frozen = freeze i32 %18, !dbg !19
  %28 = sdiv i32 %.frozen, 19, !dbg !19
  %29 = mul i32 %28, 19, !dbg !20
  %.decomposed = sub i32 %.frozen, %29, !dbg !20
  %.frozen1 = freeze i32 %19, !dbg !19
  %30 = sdiv i32 %.frozen1, 19, !dbg !19
  %31 = mul i32 %30, 19, !dbg !20
  %.decomposed2 = sub i32 %.frozen1, %31, !dbg !20
  %.frozen3 = freeze i32 %20, !dbg !19
  %32 = sdiv i32 %.frozen3, 19, !dbg !19
  %33 = mul i32 %32, 19, !dbg !20
  %.decomposed4 = sub i32 %.frozen3, %33, !dbg !20
  %.frozen5 = freeze i32 %21, !dbg !19
  %34 = sdiv i32 %.frozen5, 19, !dbg !19
  %35 = mul i32 %34, 19, !dbg !20
  %.decomposed6 = sub i32 %.frozen5, %35, !dbg !20
  %36 = mul i32 %26, 19, !dbg !21
  %37 = add i32 %36, 19, !dbg !21
  %38 = add i32 %36, 38, !dbg !21
  %39 = add i32 %36, 57, !dbg !21
  %40 = mul i32 %28, 1216, !dbg !22
  %41 = mul i32 %30, 1216, !dbg !22
  %42 = mul i32 %32, 1216, !dbg !22
  %43 = mul i32 %34, 1216, !dbg !22
  %44 = add i32 %40, %.decomposed, !dbg !23
  %45 = add i32 %44, %36, !dbg !24
  %46 = add i32 %44, %37, !dbg !24
  %47 = add i32 %44, %38, !dbg !24
  %48 = add i32 %44, %39, !dbg !24
  %49 = add i32 %41, %.decomposed2, !dbg !23
  %50 = add i32 %49, %36, !dbg !24
  %51 = add i32 %49, %37, !dbg !24
  %52 = add i32 %49, %38, !dbg !24
  %53 = add i32 %49, %39, !dbg !24
  %54 = add i32 %42, %.decomposed4, !dbg !23
  %55 = add i32 %54, %36, !dbg !24
  %56 = add i32 %54, %37, !dbg !24
  %57 = add i32 %54, %38, !dbg !24
  %58 = add i32 %54, %39, !dbg !24
  %59 = add i32 %43, %.decomposed6, !dbg !23
  %60 = add i32 %59, %36, !dbg !24
  %61 = add i32 %59, %37, !dbg !24
  %62 = add i32 %59, %38, !dbg !24
  %63 = add i32 %59, %39, !dbg !24
  %64 = sext i32 %45 to i64, !dbg !25
  %65 = getelementptr float, ptr addrspace(1) %0, i64 %64, !dbg !25
  %66 = sext i32 %46 to i64, !dbg !25
  %67 = getelementptr float, ptr addrspace(1) %0, i64 %66, !dbg !25
  %68 = sext i32 %47 to i64, !dbg !25
  %69 = getelementptr float, ptr addrspace(1) %0, i64 %68, !dbg !25
  %70 = sext i32 %48 to i64, !dbg !25
  %71 = getelementptr float, ptr addrspace(1) %0, i64 %70, !dbg !25
  %72 = sext i32 %50 to i64, !dbg !25
  %73 = getelementptr float, ptr addrspace(1) %0, i64 %72, !dbg !25
  %74 = sext i32 %51 to i64, !dbg !25
  %75 = getelementptr float, ptr addrspace(1) %0, i64 %74, !dbg !25
  %76 = sext i32 %52 to i64, !dbg !25
  %77 = getelementptr float, ptr addrspace(1) %0, i64 %76, !dbg !25
  %78 = sext i32 %53 to i64, !dbg !25
  %79 = getelementptr float, ptr addrspace(1) %0, i64 %78, !dbg !25
  %80 = sext i32 %55 to i64, !dbg !25
  %81 = getelementptr float, ptr addrspace(1) %0, i64 %80, !dbg !25
  %82 = sext i32 %56 to i64, !dbg !25
  %83 = getelementptr float, ptr addrspace(1) %0, i64 %82, !dbg !25
  %84 = sext i32 %57 to i64, !dbg !25
  %85 = getelementptr float, ptr addrspace(1) %0, i64 %84, !dbg !25
  %86 = sext i32 %58 to i64, !dbg !25
  %87 = getelementptr float, ptr addrspace(1) %0, i64 %86, !dbg !25
  %88 = sext i32 %60 to i64, !dbg !25
  %89 = getelementptr float, ptr addrspace(1) %0, i64 %88, !dbg !25
  %90 = sext i32 %61 to i64, !dbg !25
  %91 = getelementptr float, ptr addrspace(1) %0, i64 %90, !dbg !25
  %92 = sext i32 %62 to i64, !dbg !25
  %93 = getelementptr float, ptr addrspace(1) %0, i64 %92, !dbg !25
  %94 = sext i32 %63 to i64, !dbg !25
  %95 = getelementptr float, ptr addrspace(1) %0, i64 %94, !dbg !25
  %96 = and i1 %22, %27, !dbg !26
  %97 = and i1 %23, %27, !dbg !26
  %98 = and i1 %24, %27, !dbg !26
  %99 = and i1 %25, %27, !dbg !26
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 %96) #1, !dbg !27
  %101 = bitcast i32 %100 to float, !dbg !27
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 %96) #1, !dbg !27
  %103 = bitcast i32 %102 to float, !dbg !27
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 %96) #1, !dbg !27
  %105 = bitcast i32 %104 to float, !dbg !27
  %106 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %71, i1 %96) #1, !dbg !27
  %107 = bitcast i32 %106 to float, !dbg !27
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 %97) #1, !dbg !27
  %109 = bitcast i32 %108 to float, !dbg !27
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 %97) #1, !dbg !27
  %111 = bitcast i32 %110 to float, !dbg !27
  %112 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 %97) #1, !dbg !27
  %113 = bitcast i32 %112 to float, !dbg !27
  %114 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %79, i1 %97) #1, !dbg !27
  %115 = bitcast i32 %114 to float, !dbg !27
  %116 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 %98) #1, !dbg !27
  %117 = bitcast i32 %116 to float, !dbg !27
  %118 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %83, i1 %98) #1, !dbg !27
  %119 = bitcast i32 %118 to float, !dbg !27
  %120 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 %98) #1, !dbg !27
  %121 = bitcast i32 %120 to float, !dbg !27
  %122 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %87, i1 %98) #1, !dbg !27
  %123 = bitcast i32 %122 to float, !dbg !27
  %124 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %89, i1 %99) #1, !dbg !27
  %125 = bitcast i32 %124 to float, !dbg !27
  %126 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %91, i1 %99) #1, !dbg !27
  %127 = bitcast i32 %126 to float, !dbg !27
  %128 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 %99) #1, !dbg !27
  %129 = bitcast i32 %128 to float, !dbg !27
  %130 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %95, i1 %99) #1, !dbg !27
  %131 = bitcast i32 %130 to float, !dbg !27
  %132 = sext i32 %.decomposed to i64, !dbg !28
  %133 = getelementptr float, ptr addrspace(1) %1, i64 %132, !dbg !28
  %134 = sext i32 %.decomposed2 to i64, !dbg !28
  %135 = getelementptr float, ptr addrspace(1) %1, i64 %134, !dbg !28
  %136 = sext i32 %.decomposed4 to i64, !dbg !28
  %137 = getelementptr float, ptr addrspace(1) %1, i64 %136, !dbg !28
  %138 = sext i32 %.decomposed6 to i64, !dbg !28
  %139 = getelementptr float, ptr addrspace(1) %1, i64 %138, !dbg !28
  %140 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %133, i1 %22) #1, !dbg !29
  %141 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %133, i1 %22) #1, !dbg !29
  %142 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %133, i1 %22) #1, !dbg !29
  %143 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %133, i1 %22) #1, !dbg !29
  %144 = bitcast i32 %143 to float, !dbg !29
  %145 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %135, i1 %23) #1, !dbg !29
  %146 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %135, i1 %23) #1, !dbg !29
  %147 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %135, i1 %23) #1, !dbg !29
  %148 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %135, i1 %23) #1, !dbg !29
  %149 = bitcast i32 %148 to float, !dbg !29
  %150 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %137, i1 %24) #1, !dbg !29
  %151 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %137, i1 %24) #1, !dbg !29
  %152 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %137, i1 %24) #1, !dbg !29
  %153 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %137, i1 %24) #1, !dbg !29
  %154 = bitcast i32 %153 to float, !dbg !29
  %155 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %139, i1 %25) #1, !dbg !29
  %156 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %139, i1 %25) #1, !dbg !29
  %157 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %139, i1 %25) #1, !dbg !29
  %158 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %139, i1 %25) #1, !dbg !29
  %159 = bitcast i32 %158 to float, !dbg !29
  %160 = fadd float %101, %144, !dbg !30
  %161 = fadd float %103, %144, !dbg !30
  %162 = fadd float %105, %144, !dbg !30
  %163 = fadd float %107, %144, !dbg !30
  %164 = fadd float %109, %149, !dbg !30
  %165 = fadd float %111, %149, !dbg !30
  %166 = fadd float %113, %149, !dbg !30
  %167 = fadd float %115, %149, !dbg !30
  %168 = fadd float %117, %154, !dbg !30
  %169 = fadd float %119, %154, !dbg !30
  %170 = fadd float %121, %154, !dbg !30
  %171 = fadd float %123, %154, !dbg !30
  %172 = fadd float %125, %159, !dbg !30
  %173 = fadd float %127, %159, !dbg !30
  %174 = fadd float %129, %159, !dbg !30
  %175 = fadd float %131, %159, !dbg !30
  %176 = shl i32 %18, 6, !dbg !31
  %177 = shl i32 %19, 6, !dbg !31
  %178 = shl i32 %20, 6, !dbg !31
  %179 = shl i32 %21, 6, !dbg !31
  %180 = add i32 %26, %176, !dbg !32
  %181 = add i32 %26, %177, !dbg !32
  %182 = add i32 %26, %178, !dbg !32
  %183 = add i32 %26, %179, !dbg !32
  %184 = sext i32 %180 to i64, !dbg !33
  %185 = getelementptr float, ptr addrspace(1) %2, i64 %184, !dbg !33
  %186 = sext i32 %181 to i64, !dbg !33
  %187 = getelementptr float, ptr addrspace(1) %2, i64 %186, !dbg !33
  %188 = sext i32 %182 to i64, !dbg !33
  %189 = getelementptr float, ptr addrspace(1) %2, i64 %188, !dbg !33
  %190 = sext i32 %183 to i64, !dbg !33
  %191 = getelementptr float, ptr addrspace(1) %2, i64 %190, !dbg !33
  %192 = bitcast float %160 to i32, !dbg !34
  %193 = bitcast float %161 to i32, !dbg !34
  %194 = bitcast float %162 to i32, !dbg !34
  %195 = bitcast float %163 to i32, !dbg !34
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %192, i32 %193, i32 %194, i32 %195, ptr addrspace(1) %185, i1 %96) #1, !dbg !34
  %196 = bitcast float %164 to i32, !dbg !34
  %197 = bitcast float %165 to i32, !dbg !34
  %198 = bitcast float %166 to i32, !dbg !34
  %199 = bitcast float %167 to i32, !dbg !34
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %196, i32 %197, i32 %198, i32 %199, ptr addrspace(1) %187, i1 %97) #1, !dbg !34
  %200 = bitcast float %168 to i32, !dbg !34
  %201 = bitcast float %169 to i32, !dbg !34
  %202 = bitcast float %170 to i32, !dbg !34
  %203 = bitcast float %171 to i32, !dbg !34
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %200, i32 %201, i32 %202, i32 %203, ptr addrspace(1) %189, i1 %98) #1, !dbg !34
  %204 = bitcast float %172 to i32, !dbg !34
  %205 = bitcast float %173 to i32, !dbg !34
  %206 = bitcast float %174 to i32, !dbg !34
  %207 = bitcast float %175 to i32, !dbg !34
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %204, i32 %205, i32 %206, i32 %207, ptr addrspace(1) %191, i1 %99) #1, !dbg !34
  ret void, !dbg !35
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "chqmasgfrza4lxsxq5bdtnzfcfiqhlij4s36k4gsg56elh3k4tuj.py", directory: "inductor_cache/hq")
!4 = !{ptr @triton_poi_fused_convolution_14, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_14, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_14", linkageName: "triton_poi_fused_convolution_14", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 44, scope: !7)
!12 = !DILocation(line: 25, column: 28, scope: !7)
!13 = !DILocation(line: 26, column: 44, scope: !7)
!14 = !DILocation(line: 25, column: 33, scope: !7)
!15 = !DILocation(line: 26, column: 23, scope: !7)
!16 = !DILocation(line: 23, column: 23, scope: !7)
!17 = !DILocation(line: 24, column: 21, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 38, scope: !7)
!22 = !DILocation(line: 32, column: 48, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 43, scope: !7)
!25 = !DILocation(line: 32, column: 30, scope: !7)
!26 = !DILocation(line: 32, column: 61, scope: !7)
!27 = !DILocation(line: 32, column: 53, scope: !7)
!28 = !DILocation(line: 33, column: 30, scope: !7)
!29 = !DILocation(line: 33, column: 35, scope: !7)
!30 = !DILocation(line: 34, column: 18, scope: !7)
!31 = !DILocation(line: 35, column: 33, scope: !7)
!32 = !DILocation(line: 35, column: 30, scope: !7)
!33 = !DILocation(line: 35, column: 25, scope: !7)
!34 = !DILocation(line: 35, column: 44, scope: !7)
!35 = !DILocation(line: 35, column: 4, scope: !7)
