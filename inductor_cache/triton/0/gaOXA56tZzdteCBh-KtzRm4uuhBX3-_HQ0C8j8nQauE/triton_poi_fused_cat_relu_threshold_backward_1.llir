; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_cat_relu_threshold_backward_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, ptr addrspace(1) %16, i32 %17) local_unnamed_addr !dbg !7 {
  %19 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %20 = shl i32 %19, 8, !dbg !11
  %21 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %22 = shl i32 %21, 1, !dbg !12
  %23 = and i32 %22, 254, !dbg !12
  %24 = or disjoint i32 %20, %23, !dbg !13
  %25 = icmp slt i32 %24, 256, !dbg !14
  %.frozen = freeze i32 %24, !dbg !15
  %26 = sdiv i32 %.frozen, 16, !dbg !15
  %27 = srem i32 %26, 4, !dbg !16
  %28 = mul i32 %26, 16, !dbg !17
  %.decomposed = sub i32 %.frozen, %28, !dbg !17
  %.frozen16 = freeze i32 %24, !dbg !18
  %29 = sdiv i32 %.frozen16, 64, !dbg !18
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %7, i1 true) #3, !dbg !19
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %8, i1 true) #3, !dbg !20
  %32 = bitcast i32 %31 to float, !dbg !20
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %9, i1 true) #3, !dbg !21
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %10, i1 true) #3, !dbg !22
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %12, i1 true) #3, !dbg !23
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %13, i1 true) #3, !dbg !24
  %37 = bitcast i32 %36 to float, !dbg !24
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %14, i1 true) #3, !dbg !25
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %15, i1 true) #3, !dbg !26
  %40 = icmp slt i32 %27, 2, !dbg !27
  %41 = mul i32 %29, 64, !dbg !28
  %srem.decomposed = sub i32 %.frozen16, %41, !dbg !28
  %42 = shl nsw i32 %29, 5, !dbg !29
  %43 = add nsw i32 %42, %srem.decomposed, !dbg !30
  %44 = sext i32 %43 to i64, !dbg !31
  %45 = getelementptr float, ptr addrspace(1) %1, i64 %44, !dbg !31
  %46 = and i1 %25, %40, !dbg !32
  %47 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %45, i1 %46, i32 0, i1 %46, i32 0, i1 %46) #3, !dbg !33
  %48 = sext i32 %27 to i64, !dbg !34
  %49 = getelementptr float, ptr addrspace(1) %2, i64 %48, !dbg !34
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %49, i1 %46, i32 0, i1 %46) #3, !dbg !35
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %49, i1 %46, i32 0, i1 %46) #3, !dbg !35
  %52 = getelementptr float, ptr addrspace(1) %3, i64 %48, !dbg !36
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %52, i1 %46, i32 0, i1 %46) #3, !dbg !37
  %54 = bitcast i32 %53 to float, !dbg !37
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %52, i1 %46, i32 0, i1 %46) #3, !dbg !37
  %56 = bitcast i32 %55 to float, !dbg !37
  %57 = fadd float %54, 0x3EE4F8B580000000, !dbg !38
  %58 = fadd float %56, 0x3EE4F8B580000000, !dbg !38
  %59 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !39
  %.not.i = icmp eq i32 %59, 0, !dbg !39
  %60 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !39
  %.not1.i = icmp eq i32 %60, 0, !dbg !39
  br i1 %.not.i, label %66, label %61, !dbg !39

61:                                               ; preds = %18
  br i1 %.not1.i, label %64, label %62, !dbg !39

62:                                               ; preds = %61
  %63 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %57) #3, !dbg !39
  br label %__nv_sqrtf.exit, !dbg !39

64:                                               ; preds = %61
  %65 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %57) #3, !dbg !39
  br label %__nv_sqrtf.exit, !dbg !39

66:                                               ; preds = %18
  br i1 %.not1.i, label %69, label %67, !dbg !39

67:                                               ; preds = %66
  %68 = tail call float @llvm.nvvm.sqrt.rn.f(float %57) #3, !dbg !39
  br label %__nv_sqrtf.exit, !dbg !39

69:                                               ; preds = %66
  %70 = tail call float @llvm.nvvm.sqrt.approx.f(float %57) #3, !dbg !39
  br label %__nv_sqrtf.exit, !dbg !39

__nv_sqrtf.exit:                                  ; preds = %62, %64, %67, %69
  %.0.i = phi float [ %63, %62 ], [ %65, %64 ], [ %68, %67 ], [ %70, %69 ], !dbg !39
  %71 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !39
  %.not.i1 = icmp eq i32 %71, 0, !dbg !39
  %72 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !39
  %.not1.i4 = icmp eq i32 %72, 0, !dbg !39
  br i1 %.not.i1, label %78, label %73, !dbg !39

73:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %76, label %74, !dbg !39

74:                                               ; preds = %73
  %75 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %58) #3, !dbg !39
  br label %__nv_sqrtf.exit5, !dbg !39

76:                                               ; preds = %73
  %77 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %58) #3, !dbg !39
  br label %__nv_sqrtf.exit5, !dbg !39

78:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %81, label %79, !dbg !39

79:                                               ; preds = %78
  %80 = tail call float @llvm.nvvm.sqrt.rn.f(float %58) #3, !dbg !39
  br label %__nv_sqrtf.exit5, !dbg !39

81:                                               ; preds = %78
  %82 = tail call float @llvm.nvvm.sqrt.approx.f(float %58) #3, !dbg !39
  br label %__nv_sqrtf.exit5, !dbg !39

__nv_sqrtf.exit5:                                 ; preds = %74, %76, %79, %81
  %.0.i3 = phi float [ %75, %74 ], [ %77, %76 ], [ %80, %79 ], [ %82, %81 ], !dbg !39
  %83 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !40
  %84 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !40
  %85 = getelementptr float, ptr addrspace(1) %4, i64 %48, !dbg !41
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %85, i1 %46, i32 0, i1 %46) #3, !dbg !42
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %85, i1 %46, i32 0, i1 %46) #3, !dbg !42
  %88 = getelementptr float, ptr addrspace(1) %5, i64 %48, !dbg !43
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %88, i1 %46, i32 0, i1 %46) #3, !dbg !44
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %88, i1 %46, i32 0, i1 %46) #3, !dbg !44
  %91 = icmp eq i32 %27, 2, !dbg !45
  %92 = shl nsw i32 %29, 4, !dbg !46
  %93 = add nsw i32 %92, %.decomposed, !dbg !47
  %94 = sext i32 %93 to i64, !dbg !48
  %95 = getelementptr float, ptr addrspace(1) %6, i64 %94, !dbg !48
  %96 = and i1 %25, %91, !dbg !49
  %97 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %95, i1 %96, i32 0, i1 %96, i32 0, i1 %96) #3, !dbg !50
  %98 = fadd float %32, 0x3EE4F8B580000000, !dbg !51
  %99 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !52
  %.not.i6 = icmp eq i32 %99, 0, !dbg !52
  %100 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !52
  %.not1.i9 = icmp eq i32 %100, 0, !dbg !52
  br i1 %.not.i6, label %106, label %101, !dbg !52

101:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %104, label %102, !dbg !52

102:                                              ; preds = %101
  %103 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %98) #3, !dbg !52
  br label %__nv_sqrtf.exit10, !dbg !52

104:                                              ; preds = %101
  %105 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %98) #3, !dbg !52
  br label %__nv_sqrtf.exit10, !dbg !52

106:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %109, label %107, !dbg !52

107:                                              ; preds = %106
  %108 = tail call float @llvm.nvvm.sqrt.rn.f(float %98) #3, !dbg !52
  br label %__nv_sqrtf.exit10, !dbg !52

109:                                              ; preds = %106
  %110 = tail call float @llvm.nvvm.sqrt.approx.f(float %98) #3, !dbg !52
  br label %__nv_sqrtf.exit10, !dbg !52

__nv_sqrtf.exit10:                                ; preds = %102, %104, %107, %109
  %.0.i8 = phi float [ %103, %102 ], [ %105, %104 ], [ %108, %107 ], [ %110, %109 ], !dbg !52
  %111 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !53
  %112 = icmp sgt i32 %27, 2, !dbg !54
  %113 = getelementptr float, ptr addrspace(1) %11, i64 %94, !dbg !55
  %114 = and i1 %25, %112, !dbg !56
  %115 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %113, i1 %114, i32 0, i1 %114, i32 0, i1 %114) #3, !dbg !57
  %116 = fadd float %37, 0x3EE4F8B580000000, !dbg !58
  %117 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !59
  %.not.i11 = icmp eq i32 %117, 0, !dbg !59
  %118 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !59
  %.not1.i14 = icmp eq i32 %118, 0, !dbg !59
  br i1 %.not.i11, label %124, label %119, !dbg !59

119:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %122, label %120, !dbg !59

120:                                              ; preds = %119
  %121 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %116) #3, !dbg !59
  br label %__nv_sqrtf.exit15, !dbg !59

122:                                              ; preds = %119
  %123 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %116) #3, !dbg !59
  br label %__nv_sqrtf.exit15, !dbg !59

124:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %127, label %125, !dbg !59

125:                                              ; preds = %124
  %126 = tail call float @llvm.nvvm.sqrt.rn.f(float %116) #3, !dbg !59
  br label %__nv_sqrtf.exit15, !dbg !59

127:                                              ; preds = %124
  %128 = tail call float @llvm.nvvm.sqrt.approx.f(float %116) #3, !dbg !59
  br label %__nv_sqrtf.exit15, !dbg !59

__nv_sqrtf.exit15:                                ; preds = %120, %122, %125, %127
  %.0.i13 = phi float [ %121, %120 ], [ %123, %122 ], [ %126, %125 ], [ %128, %127 ], !dbg !59
  %129 = extractvalue { i32, i32 } %115, 1, !dbg !57
  %130 = bitcast i32 %129 to float, !dbg !57
  %131 = bitcast i32 %35 to float, !dbg !23
  %132 = fsub float %130, %131, !dbg !60
  %133 = extractvalue { i32, i32 } %115, 0, !dbg !57
  %134 = bitcast i32 %133 to float, !dbg !57
  %135 = fsub float %134, %131, !dbg !60
  %136 = extractvalue { i32, i32 } %97, 1, !dbg !50
  %137 = bitcast i32 %136 to float, !dbg !50
  %138 = bitcast i32 %30 to float, !dbg !19
  %139 = fsub float %137, %138, !dbg !61
  %140 = fmul float %139, %111, !dbg !62
  %141 = bitcast i32 %33 to float, !dbg !21
  %142 = fmul float %140, %141, !dbg !63
  %143 = bitcast i32 %34 to float, !dbg !22
  %144 = fadd float %142, %143, !dbg !64
  %145 = extractvalue { i32, i32 } %97, 0, !dbg !50
  %146 = bitcast i32 %145 to float, !dbg !50
  %147 = fsub float %146, %138, !dbg !61
  %148 = fmul float %147, %111, !dbg !62
  %149 = fmul float %148, %141, !dbg !63
  %150 = fadd float %149, %143, !dbg !64
  %151 = extractvalue { i32, i32 } %47, 1, !dbg !33
  %152 = bitcast i32 %151 to float, !dbg !33
  %153 = bitcast i32 %51 to float, !dbg !35
  %154 = fsub float %152, %153, !dbg !65
  %155 = fmul float %154, %84, !dbg !66
  %156 = bitcast i32 %87 to float, !dbg !42
  %157 = fmul float %155, %156, !dbg !67
  %158 = bitcast i32 %90 to float, !dbg !44
  %159 = fadd float %157, %158, !dbg !68
  %160 = extractvalue { i32, i32 } %47, 0, !dbg !33
  %161 = bitcast i32 %160 to float, !dbg !33
  %162 = bitcast i32 %50 to float, !dbg !35
  %163 = fsub float %161, %162, !dbg !65
  %164 = fmul float %163, %83, !dbg !66
  %165 = bitcast i32 %86 to float, !dbg !42
  %166 = fmul float %164, %165, !dbg !67
  %167 = bitcast i32 %89 to float, !dbg !44
  %168 = fadd float %166, %167, !dbg !68
  %169 = bitcast i32 %39 to float, !dbg !26
  %170 = bitcast i32 %38 to float, !dbg !25
  %171 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !69
  %172 = fmul float %135, %171, !dbg !70
  %173 = fmul float %132, %171, !dbg !70
  %174 = fmul float %172, %170, !dbg !71
  %175 = fmul float %173, %170, !dbg !71
  %176 = fadd float %174, %169, !dbg !72
  %177 = fadd float %175, %169, !dbg !72
  %178 = select i1 %112, float %176, float 0.000000e+00, !dbg !73
  %179 = select i1 %112, float %177, float 0.000000e+00, !dbg !73
  %180 = select i1 %91, float %150, float %178, !dbg !74
  %181 = select i1 %91, float %144, float %179, !dbg !74
  %182 = select i1 %40, float %168, float %180, !dbg !74
  %183 = select i1 %40, float %159, float %181, !dbg !74
  %184 = fcmp olt float %182, 0.000000e+00, !dbg !75
  %185 = fcmp olt float %183, 0.000000e+00, !dbg !75
  %186 = select i1 %184, float 0.000000e+00, float %182, !dbg !79
  %187 = select i1 %185, float 0.000000e+00, float %183, !dbg !79
  %188 = fcmp ole float %186, 0.000000e+00, !dbg !80
  %189 = fcmp ole float %187, 0.000000e+00, !dbg !80
  %190 = sext i32 %24 to i64, !dbg !81
  %191 = getelementptr float, ptr addrspace(1) %0, i64 %190, !dbg !81
  %192 = bitcast float %186 to i32, !dbg !82
  %193 = bitcast float %187 to i32, !dbg !82
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %192, i32 %193, ptr addrspace(1) %191, i1 %25) #3, !dbg !82
  %194 = getelementptr i1, ptr addrspace(1) %16, i64 %190, !dbg !83
  %195 = zext i1 %188 to i8, !dbg !84
  %196 = zext i1 %189 to i8, !dbg !84
  %197 = insertelement <2 x i8> poison, i8 %195, i64 0, !dbg !84
  %198 = insertelement <2 x i8> %197, i8 %196, i64 1, !dbg !84
  %199 = bitcast <2 x i8> %198 to i16, !dbg !84
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %199, ptr addrspace(1) %194, i1 %25) #3, !dbg !84
  ret void, !dbg !85
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c4ghquzjyf3e3wvvq3nkta44273irigqvnsux6s4vvazcbbmx2zb.py", directory: "inductor_cache/4g")
!4 = !{ptr @triton_poi_fused_cat_relu_threshold_backward_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_relu_threshold_backward_1, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_relu_threshold_backward_1", linkageName: "triton_poi_fused_cat_relu_threshold_backward_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 27, scope: !7)
!17 = !DILocation(line: 25, column: 19, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 28, column: 20, scope: !7)
!20 = !DILocation(line: 30, column: 20, scope: !7)
!21 = !DILocation(line: 32, column: 20, scope: !7)
!22 = !DILocation(line: 34, column: 20, scope: !7)
!23 = !DILocation(line: 36, column: 20, scope: !7)
!24 = !DILocation(line: 38, column: 20, scope: !7)
!25 = !DILocation(line: 40, column: 20, scope: !7)
!26 = !DILocation(line: 42, column: 20, scope: !7)
!27 = !DILocation(line: 48, column: 18, scope: !7)
!28 = !DILocation(line: 49, column: 35, scope: !7)
!29 = !DILocation(line: 49, column: 48, scope: !7)
!30 = !DILocation(line: 49, column: 45, scope: !7)
!31 = !DILocation(line: 49, column: 30, scope: !7)
!32 = !DILocation(line: 49, column: 60, scope: !7)
!33 = !DILocation(line: 49, column: 53, scope: !7)
!34 = !DILocation(line: 50, column: 30, scope: !7)
!35 = !DILocation(line: 50, column: 35, scope: !7)
!36 = !DILocation(line: 52, column: 30, scope: !7)
!37 = !DILocation(line: 52, column: 35, scope: !7)
!38 = !DILocation(line: 54, column: 19, scope: !7)
!39 = !DILocation(line: 55, column: 27, scope: !7)
!40 = !DILocation(line: 57, column: 20, scope: !7)
!41 = !DILocation(line: 61, column: 31, scope: !7)
!42 = !DILocation(line: 61, column: 36, scope: !7)
!43 = !DILocation(line: 63, column: 31, scope: !7)
!44 = !DILocation(line: 63, column: 36, scope: !7)
!45 = !DILocation(line: 70, column: 20, scope: !7)
!46 = !DILocation(line: 71, column: 39, scope: !7)
!47 = !DILocation(line: 71, column: 36, scope: !7)
!48 = !DILocation(line: 71, column: 31, scope: !7)
!49 = !DILocation(line: 71, column: 52, scope: !7)
!50 = !DILocation(line: 71, column: 44, scope: !7)
!51 = !DILocation(line: 74, column: 20, scope: !7)
!52 = !DILocation(line: 75, column: 27, scope: !7)
!53 = !DILocation(line: 77, column: 20, scope: !7)
!54 = !DILocation(line: 85, column: 20, scope: !7)
!55 = !DILocation(line: 88, column: 32, scope: !7)
!56 = !DILocation(line: 88, column: 53, scope: !7)
!57 = !DILocation(line: 88, column: 45, scope: !7)
!58 = !DILocation(line: 91, column: 20, scope: !7)
!59 = !DILocation(line: 92, column: 27, scope: !7)
!60 = !DILocation(line: 89, column: 20, scope: !7)
!61 = !DILocation(line: 72, column: 20, scope: !7)
!62 = !DILocation(line: 80, column: 20, scope: !7)
!63 = !DILocation(line: 81, column: 20, scope: !7)
!64 = !DILocation(line: 82, column: 20, scope: !7)
!65 = !DILocation(line: 51, column: 18, scope: !7)
!66 = !DILocation(line: 60, column: 19, scope: !7)
!67 = !DILocation(line: 62, column: 20, scope: !7)
!68 = !DILocation(line: 64, column: 20, scope: !7)
!69 = !DILocation(line: 94, column: 20, scope: !7)
!70 = !DILocation(line: 97, column: 20, scope: !7)
!71 = !DILocation(line: 98, column: 20, scope: !7)
!72 = !DILocation(line: 99, column: 20, scope: !7)
!73 = !DILocation(line: 101, column: 35, scope: !7)
!74 = !DILocation(line: 0, scope: !7)
!75 = !DILocation(line: 118, column: 15, scope: !76, inlinedAt: !78)
!76 = distinct !DILexicalBlockFile(scope: !7, file: !77, discriminator: 0)
!77 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!78 = !DILocation(line: 105, column: 42, scope: !7)
!79 = !DILocation(line: 121, column: 29, scope: !76, inlinedAt: !78)
!80 = !DILocation(line: 107, column: 21, scope: !7)
!81 = !DILocation(line: 108, column: 28, scope: !7)
!82 = !DILocation(line: 108, column: 40, scope: !7)
!83 = !DILocation(line: 109, column: 25, scope: !7)
!84 = !DILocation(line: 109, column: 37, scope: !7)
!85 = !DILocation(line: 109, column: 4, scope: !7)
