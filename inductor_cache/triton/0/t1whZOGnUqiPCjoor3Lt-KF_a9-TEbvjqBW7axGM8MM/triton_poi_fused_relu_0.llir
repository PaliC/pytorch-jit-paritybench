; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_relu_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 4, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 6, !dbg !12
  %10 = and i32 %9, 3, !dbg !12
  %11 = shl i32 %8, 2, !dbg !12
  %12 = and i32 %11, 12, !dbg !12
  %13 = or disjoint i32 %7, %10, !dbg !13
  %14 = or disjoint i32 %13, 4, !dbg !13
  %15 = or disjoint i32 %13, 8, !dbg !13
  %16 = or disjoint i32 %13, 12, !dbg !13
  %17 = or disjoint i32 %7, %12, !dbg !13
  %18 = icmp slt i32 %13, 2912, !dbg !14
  %19 = icmp slt i32 %14, 2912, !dbg !14
  %20 = icmp slt i32 %15, 2912, !dbg !14
  %21 = icmp slt i32 %16, 2912, !dbg !14
  %22 = icmp slt i32 %17, 2912, !dbg !14
  %23 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %24 = shl i32 %23, 8, !dbg !16
  %25 = and i32 %11, 252, !dbg !17
  %26 = lshr i32 %8, 2, !dbg !17
  %27 = and i32 %26, 63, !dbg !17
  %28 = or disjoint i32 %27, 64, !dbg !17
  %29 = or disjoint i32 %27, 128, !dbg !17
  %30 = or disjoint i32 %27, 192, !dbg !17
  %31 = or disjoint i32 %24, %25, !dbg !18
  %32 = or disjoint i32 %24, %27, !dbg !18
  %33 = or disjoint i32 %24, %28, !dbg !18
  %34 = or disjoint i32 %24, %29, !dbg !18
  %35 = or disjoint i32 %24, %30, !dbg !18
  %.frozen = freeze i32 %17, !dbg !19
  %36 = sdiv i32 %.frozen, 728, !dbg !19
  %37 = mul i32 %36, 728, !dbg !20
  %.decomposed = sub i32 %.frozen, %37, !dbg !20
  %38 = shl i32 %13, 12, !dbg !21
  %39 = shl i32 %14, 12, !dbg !21
  %40 = shl i32 %15, 12, !dbg !21
  %41 = shl i32 %16, 12, !dbg !21
  %42 = add i32 %31, %38, !dbg !22
  %43 = add i32 %31, %39, !dbg !22
  %44 = add i32 %31, %40, !dbg !22
  %45 = add i32 %31, %41, !dbg !22
  %46 = sext i32 %42 to i64, !dbg !23
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !23
  %48 = sext i32 %43 to i64, !dbg !23
  %49 = getelementptr float, ptr addrspace(1) %0, i64 %48, !dbg !23
  %50 = sext i32 %44 to i64, !dbg !23
  %51 = getelementptr float, ptr addrspace(1) %0, i64 %50, !dbg !23
  %52 = sext i32 %45 to i64, !dbg !23
  %53 = getelementptr float, ptr addrspace(1) %0, i64 %52, !dbg !23
  %54 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %47, i1 %18) #2, !dbg !24
  %55 = extractvalue { i32, i32, i32, i32 } %54, 0, !dbg !24
  %56 = extractvalue { i32, i32, i32, i32 } %54, 1, !dbg !24
  %57 = extractvalue { i32, i32, i32, i32 } %54, 2, !dbg !24
  %58 = extractvalue { i32, i32, i32, i32 } %54, 3, !dbg !24
  %59 = bitcast i32 %55 to float, !dbg !24
  %60 = bitcast i32 %56 to float, !dbg !24
  %61 = bitcast i32 %57 to float, !dbg !24
  %62 = bitcast i32 %58 to float, !dbg !24
  %63 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %49, i1 %19) #2, !dbg !24
  %64 = extractvalue { i32, i32, i32, i32 } %63, 0, !dbg !24
  %65 = extractvalue { i32, i32, i32, i32 } %63, 1, !dbg !24
  %66 = extractvalue { i32, i32, i32, i32 } %63, 2, !dbg !24
  %67 = extractvalue { i32, i32, i32, i32 } %63, 3, !dbg !24
  %68 = bitcast i32 %64 to float, !dbg !24
  %69 = bitcast i32 %65 to float, !dbg !24
  %70 = bitcast i32 %66 to float, !dbg !24
  %71 = bitcast i32 %67 to float, !dbg !24
  %72 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %51, i1 %20) #2, !dbg !24
  %73 = extractvalue { i32, i32, i32, i32 } %72, 0, !dbg !24
  %74 = extractvalue { i32, i32, i32, i32 } %72, 1, !dbg !24
  %75 = extractvalue { i32, i32, i32, i32 } %72, 2, !dbg !24
  %76 = extractvalue { i32, i32, i32, i32 } %72, 3, !dbg !24
  %77 = bitcast i32 %73 to float, !dbg !24
  %78 = bitcast i32 %74 to float, !dbg !24
  %79 = bitcast i32 %75 to float, !dbg !24
  %80 = bitcast i32 %76 to float, !dbg !24
  %81 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %53, i1 %21) #2, !dbg !24
  %82 = extractvalue { i32, i32, i32, i32 } %81, 0, !dbg !24
  %83 = extractvalue { i32, i32, i32, i32 } %81, 1, !dbg !24
  %84 = extractvalue { i32, i32, i32, i32 } %81, 2, !dbg !24
  %85 = extractvalue { i32, i32, i32, i32 } %81, 3, !dbg !24
  %86 = bitcast i32 %82 to float, !dbg !24
  %87 = bitcast i32 %83 to float, !dbg !24
  %88 = bitcast i32 %84 to float, !dbg !24
  %89 = bitcast i32 %85 to float, !dbg !24
  %90 = fcmp olt float %59, 0.000000e+00, !dbg !25
  %91 = fcmp olt float %60, 0.000000e+00, !dbg !25
  %92 = fcmp olt float %61, 0.000000e+00, !dbg !25
  %93 = fcmp olt float %62, 0.000000e+00, !dbg !25
  %94 = fcmp olt float %68, 0.000000e+00, !dbg !25
  %95 = fcmp olt float %69, 0.000000e+00, !dbg !25
  %96 = fcmp olt float %70, 0.000000e+00, !dbg !25
  %97 = fcmp olt float %71, 0.000000e+00, !dbg !25
  %98 = fcmp olt float %77, 0.000000e+00, !dbg !25
  %99 = fcmp olt float %78, 0.000000e+00, !dbg !25
  %100 = fcmp olt float %79, 0.000000e+00, !dbg !25
  %101 = fcmp olt float %80, 0.000000e+00, !dbg !25
  %102 = fcmp olt float %86, 0.000000e+00, !dbg !25
  %103 = fcmp olt float %87, 0.000000e+00, !dbg !25
  %104 = fcmp olt float %88, 0.000000e+00, !dbg !25
  %105 = fcmp olt float %89, 0.000000e+00, !dbg !25
  %106 = select i1 %90, float 0.000000e+00, float %59, !dbg !29
  %107 = select i1 %91, float 0.000000e+00, float %60, !dbg !29
  %108 = select i1 %92, float 0.000000e+00, float %61, !dbg !29
  %109 = select i1 %93, float 0.000000e+00, float %62, !dbg !29
  %110 = select i1 %94, float 0.000000e+00, float %68, !dbg !29
  %111 = select i1 %95, float 0.000000e+00, float %69, !dbg !29
  %112 = select i1 %96, float 0.000000e+00, float %70, !dbg !29
  %113 = select i1 %97, float 0.000000e+00, float %71, !dbg !29
  %114 = select i1 %98, float 0.000000e+00, float %77, !dbg !29
  %115 = select i1 %99, float 0.000000e+00, float %78, !dbg !29
  %116 = select i1 %100, float 0.000000e+00, float %79, !dbg !29
  %117 = select i1 %101, float 0.000000e+00, float %80, !dbg !29
  %118 = select i1 %102, float 0.000000e+00, float %86, !dbg !29
  %119 = select i1 %103, float 0.000000e+00, float %87, !dbg !29
  %120 = select i1 %104, float 0.000000e+00, float %88, !dbg !29
  %121 = select i1 %105, float 0.000000e+00, float %89, !dbg !29
  %122 = mul i32 %32, 728, !dbg !30
  %123 = mul i32 %33, 728, !dbg !30
  %124 = mul i32 %34, 728, !dbg !30
  %125 = mul i32 %35, 728, !dbg !30
  %126 = mul i32 %36, 2981888, !dbg !31
  %127 = add i32 %126, %.decomposed, !dbg !32
  %128 = add i32 %127, %122, !dbg !33
  %129 = add i32 %127, %123, !dbg !33
  %130 = add i32 %127, %124, !dbg !33
  %131 = add i32 %127, %125, !dbg !33
  %132 = sext i32 %128 to i64, !dbg !34
  %133 = getelementptr float, ptr addrspace(1) %1, i64 %132, !dbg !34
  %134 = sext i32 %129 to i64, !dbg !34
  %135 = getelementptr float, ptr addrspace(1) %1, i64 %134, !dbg !34
  %136 = sext i32 %130 to i64, !dbg !34
  %137 = getelementptr float, ptr addrspace(1) %1, i64 %136, !dbg !34
  %138 = sext i32 %131 to i64, !dbg !34
  %139 = getelementptr float, ptr addrspace(1) %1, i64 %138, !dbg !34
  %140 = shl i32 %8, 6, !dbg !35
  %141 = and i32 %140, 4032, !dbg !35
  %142 = or disjoint i32 %141, %10, !dbg !35
  %143 = and i32 %11, 1020, !dbg !35
  %144 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %141, !dbg !35
  %145 = getelementptr float, ptr addrspace(3) %144, i32 %142, !dbg !35
  %146 = bitcast float %106 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %145, <1 x i32> %146, i1 true) #2, !dbg !35
  %147 = or disjoint i32 %142, 16, !dbg !35
  %148 = lshr i32 %147, 2, !dbg !35
  %149 = getelementptr float, ptr addrspace(3) @global_smem, i32 %148, !dbg !35
  %150 = getelementptr float, ptr addrspace(3) %149, i32 %147, !dbg !35
  %151 = bitcast float %107 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %150, <1 x i32> %151, i1 true) #2, !dbg !35
  %152 = or disjoint i32 %142, 32, !dbg !35
  %153 = lshr i32 %152, 2, !dbg !35
  %154 = getelementptr float, ptr addrspace(3) @global_smem, i32 %153, !dbg !35
  %155 = getelementptr float, ptr addrspace(3) %154, i32 %152, !dbg !35
  %156 = bitcast float %108 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %155, <1 x i32> %156, i1 true) #2, !dbg !35
  %157 = or disjoint i32 %142, 48, !dbg !35
  %158 = lshr i32 %157, 2, !dbg !35
  %159 = getelementptr float, ptr addrspace(3) @global_smem, i32 %158, !dbg !35
  %160 = getelementptr float, ptr addrspace(3) %159, i32 %157, !dbg !35
  %161 = bitcast float %109 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %160, <1 x i32> %161, i1 true) #2, !dbg !35
  %162 = or disjoint i32 %142, 4, !dbg !35
  %163 = getelementptr float, ptr addrspace(3) %144, i32 %162, !dbg !35
  %164 = bitcast float %110 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %163, <1 x i32> %164, i1 true) #2, !dbg !35
  %165 = or disjoint i32 %142, 20, !dbg !35
  %166 = lshr i32 %165, 2, !dbg !35
  %167 = and i32 %166, 1012, !dbg !35
  %168 = getelementptr float, ptr addrspace(3) @global_smem, i32 %167, !dbg !35
  %169 = getelementptr float, ptr addrspace(3) %168, i32 %165, !dbg !35
  %170 = bitcast float %111 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %169, <1 x i32> %170, i1 true) #2, !dbg !35
  %171 = or disjoint i32 %142, 36, !dbg !35
  %172 = lshr i32 %171, 2, !dbg !35
  %173 = and i32 %172, 1016, !dbg !35
  %174 = getelementptr float, ptr addrspace(3) @global_smem, i32 %173, !dbg !35
  %175 = getelementptr float, ptr addrspace(3) %174, i32 %171, !dbg !35
  %176 = bitcast float %112 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %175, <1 x i32> %176, i1 true) #2, !dbg !35
  %177 = or disjoint i32 %142, 52, !dbg !35
  %178 = lshr i32 %177, 2, !dbg !35
  %179 = and i32 %178, 1020, !dbg !35
  %180 = getelementptr float, ptr addrspace(3) @global_smem, i32 %179, !dbg !35
  %181 = getelementptr float, ptr addrspace(3) %180, i32 %177, !dbg !35
  %182 = bitcast float %113 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %181, <1 x i32> %182, i1 true) #2, !dbg !35
  %183 = or disjoint i32 %142, 8, !dbg !35
  %184 = getelementptr float, ptr addrspace(3) %144, i32 %183, !dbg !35
  %185 = bitcast float %114 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %184, <1 x i32> %185, i1 true) #2, !dbg !35
  %186 = or disjoint i32 %142, 24, !dbg !35
  %187 = lshr i32 %186, 2, !dbg !35
  %188 = and i32 %187, 1012, !dbg !35
  %189 = getelementptr float, ptr addrspace(3) @global_smem, i32 %188, !dbg !35
  %190 = getelementptr float, ptr addrspace(3) %189, i32 %186, !dbg !35
  %191 = bitcast float %115 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %190, <1 x i32> %191, i1 true) #2, !dbg !35
  %192 = or disjoint i32 %142, 40, !dbg !35
  %193 = lshr i32 %192, 2, !dbg !35
  %194 = and i32 %193, 1016, !dbg !35
  %195 = getelementptr float, ptr addrspace(3) @global_smem, i32 %194, !dbg !35
  %196 = getelementptr float, ptr addrspace(3) %195, i32 %192, !dbg !35
  %197 = bitcast float %116 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %196, <1 x i32> %197, i1 true) #2, !dbg !35
  %198 = or disjoint i32 %142, 56, !dbg !35
  %199 = lshr i32 %198, 2, !dbg !35
  %200 = and i32 %199, 1020, !dbg !35
  %201 = getelementptr float, ptr addrspace(3) @global_smem, i32 %200, !dbg !35
  %202 = getelementptr float, ptr addrspace(3) %201, i32 %198, !dbg !35
  %203 = bitcast float %117 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %202, <1 x i32> %203, i1 true) #2, !dbg !35
  %204 = or disjoint i32 %142, 12, !dbg !35
  %205 = getelementptr float, ptr addrspace(3) %144, i32 %204, !dbg !35
  %206 = bitcast float %118 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %205, <1 x i32> %206, i1 true) #2, !dbg !35
  %207 = or disjoint i32 %142, 28, !dbg !35
  %208 = lshr i32 %207, 2, !dbg !35
  %209 = and i32 %208, 1012, !dbg !35
  %210 = getelementptr float, ptr addrspace(3) @global_smem, i32 %209, !dbg !35
  %211 = getelementptr float, ptr addrspace(3) %210, i32 %207, !dbg !35
  %212 = bitcast float %119 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %211, <1 x i32> %212, i1 true) #2, !dbg !35
  %213 = or disjoint i32 %142, 44, !dbg !35
  %214 = lshr i32 %213, 2, !dbg !35
  %215 = and i32 %214, 1016, !dbg !35
  %216 = getelementptr float, ptr addrspace(3) @global_smem, i32 %215, !dbg !35
  %217 = getelementptr float, ptr addrspace(3) %216, i32 %213, !dbg !35
  %218 = bitcast float %120 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %217, <1 x i32> %218, i1 true) #2, !dbg !35
  %219 = or disjoint i32 %142, 60, !dbg !35
  %220 = lshr i32 %219, 2, !dbg !35
  %221 = and i32 %220, 1020, !dbg !35
  %222 = getelementptr float, ptr addrspace(3) @global_smem, i32 %221, !dbg !35
  %223 = getelementptr float, ptr addrspace(3) %222, i32 %219, !dbg !35
  %224 = bitcast float %121 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %223, <1 x i32> %224, i1 true) #2, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %225 = and i32 %8, 252, !dbg !35
  %226 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %225, !dbg !35
  %227 = getelementptr inbounds float, ptr addrspace(3) %226, i32 %143, !dbg !35
  %228 = or disjoint i32 %143, 1024, !dbg !35
  %229 = lshr exact i32 %228, 2, !dbg !35
  %230 = and i32 %229, 508, !dbg !35
  %231 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %230, !dbg !35
  %232 = getelementptr inbounds float, ptr addrspace(3) %231, i32 %228, !dbg !35
  %233 = load <4 x i32>, ptr addrspace(3) %232, align 16, !dbg !35
  %234 = or disjoint i32 %143, 2048, !dbg !35
  %235 = lshr exact i32 %234, 2, !dbg !35
  %236 = and i32 %235, 764, !dbg !35
  %237 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %236, !dbg !35
  %238 = getelementptr inbounds float, ptr addrspace(3) %237, i32 %234, !dbg !35
  %239 = load <4 x i32>, ptr addrspace(3) %238, align 16, !dbg !35
  %240 = or disjoint i32 %143, 3072, !dbg !35
  %241 = lshr exact i32 %240, 2, !dbg !35
  %242 = and i32 %241, 1020, !dbg !35
  %243 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %242, !dbg !35
  %244 = getelementptr inbounds float, ptr addrspace(3) %243, i32 %240, !dbg !35
  %245 = load <4 x i32>, ptr addrspace(3) %244, align 16, !dbg !35
  %.extract = load i32, ptr addrspace(3) %227, align 16, !dbg !35
  %246 = getelementptr inbounds i8, ptr addrspace(3) %227, i32 4, !dbg !35
  %.extract19 = load i32, ptr addrspace(3) %246, align 4, !dbg !35
  %247 = getelementptr inbounds i8, ptr addrspace(3) %227, i32 8, !dbg !35
  %.extract20 = load i32, ptr addrspace(3) %247, align 8, !dbg !35
  %248 = getelementptr inbounds i8, ptr addrspace(3) %227, i32 12, !dbg !35
  %.extract21 = load i32, ptr addrspace(3) %248, align 4, !dbg !35
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract19, i32 %.extract20, i32 %.extract21, ptr addrspace(1) %133, i1 %22) #2, !dbg !35
  %.extract22 = extractelement <4 x i32> %233, i64 0, !dbg !35
  %.extract23 = extractelement <4 x i32> %233, i64 1, !dbg !35
  %.extract24 = extractelement <4 x i32> %233, i64 2, !dbg !35
  %.extract25 = extractelement <4 x i32> %233, i64 3, !dbg !35
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract22, i32 %.extract23, i32 %.extract24, i32 %.extract25, ptr addrspace(1) %135, i1 %22) #2, !dbg !35
  %.extract26 = extractelement <4 x i32> %239, i64 0, !dbg !35
  %.extract27 = extractelement <4 x i32> %239, i64 1, !dbg !35
  %.extract28 = extractelement <4 x i32> %239, i64 2, !dbg !35
  %.extract29 = extractelement <4 x i32> %239, i64 3, !dbg !35
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract26, i32 %.extract27, i32 %.extract28, i32 %.extract29, ptr addrspace(1) %137, i1 %22) #2, !dbg !35
  %.extract30 = extractelement <4 x i32> %245, i64 0, !dbg !35
  %.extract31 = extractelement <4 x i32> %245, i64 1, !dbg !35
  %.extract32 = extractelement <4 x i32> %245, i64 2, !dbg !35
  %.extract33 = extractelement <4 x i32> %245, i64 3, !dbg !35
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract30, i32 %.extract31, i32 %.extract32, i32 %.extract33, ptr addrspace(1) %139, i1 %22) #2, !dbg !35
  %249 = getelementptr float, ptr addrspace(1) %2, i64 %46, !dbg !36
  %250 = getelementptr float, ptr addrspace(1) %2, i64 %48, !dbg !36
  %251 = getelementptr float, ptr addrspace(1) %2, i64 %50, !dbg !36
  %252 = getelementptr float, ptr addrspace(1) %2, i64 %52, !dbg !36
  %253 = bitcast float %106 to i32, !dbg !37
  %254 = bitcast float %107 to i32, !dbg !37
  %255 = bitcast float %108 to i32, !dbg !37
  %256 = bitcast float %109 to i32, !dbg !37
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %253, i32 %254, i32 %255, i32 %256, ptr addrspace(1) %249, i1 %18) #2, !dbg !37
  %257 = bitcast float %110 to i32, !dbg !37
  %258 = bitcast float %111 to i32, !dbg !37
  %259 = bitcast float %112 to i32, !dbg !37
  %260 = bitcast float %113 to i32, !dbg !37
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %257, i32 %258, i32 %259, i32 %260, ptr addrspace(1) %250, i1 %19) #2, !dbg !37
  %261 = bitcast float %114 to i32, !dbg !37
  %262 = bitcast float %115 to i32, !dbg !37
  %263 = bitcast float %116 to i32, !dbg !37
  %264 = bitcast float %117 to i32, !dbg !37
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %261, i32 %262, i32 %263, i32 %264, ptr addrspace(1) %251, i1 %20) #2, !dbg !37
  %265 = bitcast float %118 to i32, !dbg !37
  %266 = bitcast float %119 to i32, !dbg !37
  %267 = bitcast float %120 to i32, !dbg !37
  %268 = bitcast float %121 to i32, !dbg !37
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %265, i32 %266, i32 %267, i32 %268, ptr addrspace(1) %252, i1 %21) #2, !dbg !37
  ret void, !dbg !38
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ckcof3gaunu5ylnxoaek7ds6miywrb2a57hmj6ec4mi2nwsfa3sm.py", directory: "inductor_cache/kc")
!4 = !{ptr @triton_poi_fused_relu_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_relu_0, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_relu_0", linkageName: "triton_poi_fused_relu_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 31, column: 19, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 40, scope: !7)
!22 = !DILocation(line: 32, column: 35, scope: !7)
!23 = !DILocation(line: 32, column: 30, scope: !7)
!24 = !DILocation(line: 32, column: 45, scope: !7)
!25 = !DILocation(line: 118, column: 15, scope: !26, inlinedAt: !28)
!26 = distinct !DILexicalBlockFile(scope: !7, file: !27, discriminator: 0)
!27 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!28 = !DILocation(line: 34, column: 40, scope: !7)
!29 = !DILocation(line: 121, column: 29, scope: !26, inlinedAt: !28)
!30 = !DILocation(line: 35, column: 34, scope: !7)
!31 = !DILocation(line: 35, column: 47, scope: !7)
!32 = !DILocation(line: 35, column: 30, scope: !7)
!33 = !DILocation(line: 35, column: 39, scope: !7)
!34 = !DILocation(line: 35, column: 25, scope: !7)
!35 = !DILocation(line: 35, column: 58, scope: !7)
!36 = !DILocation(line: 36, column: 25, scope: !7)
!37 = !DILocation(line: 36, column: 46, scope: !7)
!38 = !DILocation(line: 36, column: 4, scope: !7)
