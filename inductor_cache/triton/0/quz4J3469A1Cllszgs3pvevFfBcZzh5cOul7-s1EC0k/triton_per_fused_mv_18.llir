; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_mv_18(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %6 = shl i32 %5, 5, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = lshr i32 %7, 4, !dbg !12
  %9 = and i32 %8, 7, !dbg !12
  %10 = or disjoint i32 %9, 8, !dbg !12
  %11 = or disjoint i32 %9, 16, !dbg !12
  %12 = or disjoint i32 %9, 24, !dbg !12
  %13 = and i32 %7, 15, !dbg !12
  %14 = and i32 %7, 31, !dbg !12
  %15 = or disjoint i32 %6, %9, !dbg !13
  %16 = or disjoint i32 %6, %10, !dbg !13
  %17 = or disjoint i32 %6, %11, !dbg !13
  %18 = or disjoint i32 %6, %12, !dbg !13
  %19 = or disjoint i32 %6, %14, !dbg !13
  %20 = icmp slt i32 %15, 256, !dbg !14
  %21 = icmp slt i32 %16, 256, !dbg !14
  %22 = icmp slt i32 %17, 256, !dbg !14
  %23 = icmp slt i32 %18, 256, !dbg !14
  %24 = icmp slt i32 %19, 256, !dbg !14
  %25 = icmp samesign ult i32 %13, 9, !dbg !15
  %26 = mul i32 %15, 9, !dbg !16
  %27 = mul i32 %16, 9, !dbg !16
  %28 = mul i32 %17, 9, !dbg !16
  %29 = mul i32 %18, 9, !dbg !16
  %30 = add i32 %26, %13, !dbg !17
  %31 = add i32 %27, %13, !dbg !17
  %32 = add i32 %28, %13, !dbg !17
  %33 = add i32 %29, %13, !dbg !17
  %34 = sext i32 %30 to i64, !dbg !18
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !18
  %36 = sext i32 %31 to i64, !dbg !18
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !18
  %38 = sext i32 %32 to i64, !dbg !18
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !18
  %40 = sext i32 %33 to i64, !dbg !18
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !18
  %42 = and i1 %25, %20, !dbg !19
  %43 = and i1 %25, %21, !dbg !19
  %44 = and i1 %25, %22, !dbg !19
  %45 = and i1 %25, %23, !dbg !19
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %35, i1 %42, i32 0, i1 %42) #3, !dbg !20
  %47 = bitcast i32 %46 to float, !dbg !20
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %37, i1 %43, i32 0, i1 %43) #3, !dbg !20
  %49 = bitcast i32 %48 to float, !dbg !20
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %39, i1 %44, i32 0, i1 %44) #3, !dbg !20
  %51 = bitcast i32 %50 to float, !dbg !20
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %41, i1 %45, i32 0, i1 %45) #3, !dbg !20
  %53 = bitcast i32 %52 to float, !dbg !20
  %54 = select i1 %42, float %47, float 0.000000e+00, !dbg !21
  %55 = select i1 %43, float %49, float 0.000000e+00, !dbg !21
  %56 = select i1 %44, float %51, float 0.000000e+00, !dbg !21
  %57 = select i1 %45, float %53, float 0.000000e+00, !dbg !21
  %58 = bitcast float %54 to i32, !dbg !22
  %59 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %58, i32 8, i32 31), !dbg !22
  %60 = bitcast i32 %59 to float, !dbg !22
  %61 = fadd float %54, %60, !dbg !26
  %62 = bitcast float %61 to i32, !dbg !22
  %63 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %62, i32 4, i32 31), !dbg !22
  %64 = bitcast i32 %63 to float, !dbg !22
  %65 = fadd float %61, %64, !dbg !26
  %66 = bitcast float %65 to i32, !dbg !22
  %67 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %66, i32 2, i32 31), !dbg !22
  %68 = bitcast i32 %67 to float, !dbg !22
  %69 = fadd float %65, %68, !dbg !26
  %70 = bitcast float %69 to i32, !dbg !22
  %71 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %70, i32 1, i32 31), !dbg !22
  %72 = bitcast i32 %71 to float, !dbg !22
  %73 = fadd float %69, %72, !dbg !26
  %74 = bitcast float %55 to i32, !dbg !22
  %75 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %74, i32 8, i32 31), !dbg !22
  %76 = bitcast i32 %75 to float, !dbg !22
  %77 = fadd float %55, %76, !dbg !26
  %78 = bitcast float %77 to i32, !dbg !22
  %79 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %78, i32 4, i32 31), !dbg !22
  %80 = bitcast i32 %79 to float, !dbg !22
  %81 = fadd float %77, %80, !dbg !26
  %82 = bitcast float %81 to i32, !dbg !22
  %83 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %82, i32 2, i32 31), !dbg !22
  %84 = bitcast i32 %83 to float, !dbg !22
  %85 = fadd float %81, %84, !dbg !26
  %86 = bitcast float %85 to i32, !dbg !22
  %87 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %86, i32 1, i32 31), !dbg !22
  %88 = bitcast i32 %87 to float, !dbg !22
  %89 = fadd float %85, %88, !dbg !26
  %90 = bitcast float %56 to i32, !dbg !22
  %91 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %90, i32 8, i32 31), !dbg !22
  %92 = bitcast i32 %91 to float, !dbg !22
  %93 = fadd float %56, %92, !dbg !26
  %94 = bitcast float %93 to i32, !dbg !22
  %95 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %94, i32 4, i32 31), !dbg !22
  %96 = bitcast i32 %95 to float, !dbg !22
  %97 = fadd float %93, %96, !dbg !26
  %98 = bitcast float %97 to i32, !dbg !22
  %99 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %98, i32 2, i32 31), !dbg !22
  %100 = bitcast i32 %99 to float, !dbg !22
  %101 = fadd float %97, %100, !dbg !26
  %102 = bitcast float %101 to i32, !dbg !22
  %103 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %102, i32 1, i32 31), !dbg !22
  %104 = bitcast i32 %103 to float, !dbg !22
  %105 = fadd float %101, %104, !dbg !26
  %106 = bitcast float %57 to i32, !dbg !22
  %107 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %106, i32 8, i32 31), !dbg !22
  %108 = bitcast i32 %107 to float, !dbg !22
  %109 = fadd float %57, %108, !dbg !26
  %110 = bitcast float %109 to i32, !dbg !22
  %111 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %110, i32 4, i32 31), !dbg !22
  %112 = bitcast i32 %111 to float, !dbg !22
  %113 = fadd float %109, %112, !dbg !26
  %114 = bitcast float %113 to i32, !dbg !22
  %115 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %114, i32 2, i32 31), !dbg !22
  %116 = bitcast i32 %115 to float, !dbg !22
  %117 = fadd float %113, %116, !dbg !26
  %118 = bitcast float %117 to i32, !dbg !22
  %119 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %118, i32 1, i32 31), !dbg !22
  %120 = bitcast i32 %119 to float, !dbg !22
  %121 = fadd float %117, %120, !dbg !26
  %122 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %9, !dbg !28
  %123 = bitcast float %73 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %122, <1 x i32> %123, i1 true) #3, !dbg !28
  %124 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %10, !dbg !28
  %125 = bitcast float %89 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %124, <1 x i32> %125, i1 true) #3, !dbg !28
  %126 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !28
  %127 = bitcast float %105 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %126, <1 x i32> %127, i1 true) #3, !dbg !28
  %128 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !28
  %129 = bitcast float %121 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %128, <1 x i32> %129, i1 true) #3, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %130 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !28
  %131 = load i32, ptr addrspace(3) %130, align 4, !dbg !28
  %132 = sext i32 %19 to i64, !dbg !29
  %133 = getelementptr float, ptr addrspace(1) %1, i64 %132, !dbg !29
  %134 = and i32 %7, 96, !dbg !30
  %135 = icmp eq i32 %134, 0, !dbg !30
  %136 = and i1 %135, %24, !dbg !30
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %131, ptr addrspace(1) %133, i1 %136) #3, !dbg !30
  ret void, !dbg !31
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "chwl32g5f4s4i6tkyuzmlme55jj3aag4b3v62oqaz6dmwszr3lv4.py", directory: "inductor_cache/hw")
!4 = !{ptr @triton_per_fused_mv_18, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_mv_18, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_mv_18", linkageName: "triton_per_fused_mv_18", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 28, column: 21, scope: !7)
!16 = !DILocation(line: 31, column: 37, scope: !7)
!17 = !DILocation(line: 31, column: 35, scope: !7)
!18 = !DILocation(line: 31, column: 30, scope: !7)
!19 = !DILocation(line: 31, column: 50, scope: !7)
!20 = !DILocation(line: 31, column: 42, scope: !7)
!21 = !DILocation(line: 33, column: 41, scope: !7)
!22 = !DILocation(line: 267, column: 36, scope: !23, inlinedAt: !25)
!23 = distinct !DILexicalBlockFile(scope: !7, file: !24, discriminator: 0)
!24 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!25 = !DILocation(line: 34, column: 24, scope: !7)
!26 = !DILocation(line: 256, column: 15, scope: !27, inlinedAt: !25)
!27 = distinct !DILexicalBlockFile(scope: !23, file: !24, discriminator: 0)
!28 = !DILocation(line: 34, column: 27, scope: !7)
!29 = !DILocation(line: 35, column: 25, scope: !7)
!30 = !DILocation(line: 35, column: 36, scope: !7)
!31 = !DILocation(line: 35, column: 4, scope: !7)
