; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_convolution_relu_35(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, i32 %16) local_unnamed_addr !dbg !7 {
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %19 = shl i32 %18, 7, !dbg !11
  %20 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %21 = and i32 %20, 127, !dbg !12
  %22 = or disjoint i32 %19, %21, !dbg !13
  %23 = sdiv i32 %22, 256, !dbg !14
  %24 = srem i32 %23, 4, !dbg !15
  %.frozen = freeze i32 %22, !dbg !16
  %25 = sdiv i32 %.frozen, 16, !dbg !16
  %26 = srem i32 %25, 16, !dbg !17
  %27 = mul i32 %25, 16, !dbg !18
  %.decomposed = sub i32 %.frozen, %27, !dbg !18
  %28 = sext i32 %22 to i64, !dbg !19
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !19
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 true) #3, !dbg !20
  %31 = sext i32 %24 to i64, !dbg !21
  %32 = getelementptr float, ptr addrspace(1) %1, i64 %31, !dbg !21
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #3, !dbg !22
  %34 = getelementptr float, ptr addrspace(1) %2, i64 %28, !dbg !23
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #3, !dbg !24
  %36 = getelementptr float, ptr addrspace(1) %3, i64 %31, !dbg !25
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #3, !dbg !26
  %38 = getelementptr float, ptr addrspace(1) %4, i64 %28, !dbg !27
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 true) #3, !dbg !28
  %40 = sext i32 %26 to i64, !dbg !29
  %41 = getelementptr i64, ptr addrspace(1) %5, i64 %40, !dbg !29
  %42 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %41, i1 true) #3, !dbg !30
  %43 = sext i32 %.decomposed to i64, !dbg !31
  %44 = getelementptr i64, ptr addrspace(1) %5, i64 %43, !dbg !31
  %45 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %44, i1 true) #3, !dbg !32
  %46 = getelementptr float, ptr addrspace(1) %7, i64 %31, !dbg !33
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 true) #3, !dbg !34
  %48 = getelementptr float, ptr addrspace(1) %9, i64 %31, !dbg !35
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #3, !dbg !36
  %50 = getelementptr float, ptr addrspace(1) %11, i64 %31, !dbg !37
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 true) #3, !dbg !38
  %52 = getelementptr float, ptr addrspace(1) %12, i64 %31, !dbg !39
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 true) #3, !dbg !40
  %54 = bitcast i32 %53 to float, !dbg !40
  %55 = getelementptr float, ptr addrspace(1) %13, i64 %31, !dbg !41
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 true) #3, !dbg !42
  %57 = getelementptr float, ptr addrspace(1) %14, i64 %31, !dbg !43
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 true) #3, !dbg !44
  %59 = lshr i64 %42, 60, !dbg !45
  %60 = and i64 %59, 8, !dbg !45
  %61 = add i64 %60, %42, !dbg !45
  %62 = lshr i64 %45, 60, !dbg !46
  %63 = and i64 %62, 8, !dbg !46
  %64 = shl i64 %61, 3, !dbg !47
  %65 = shl nsw i32 %23, 6, !dbg !48
  %66 = sext i32 %65 to i64, !dbg !49
  %67 = add i64 %45, %66, !dbg !46
  %68 = add i64 %67, %63, !dbg !50
  %69 = add i64 %68, %64, !dbg !49
  %70 = getelementptr float, ptr addrspace(1) %6, i64 %69, !dbg !51
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 true) #3, !dbg !52
  %72 = getelementptr float, ptr addrspace(1) %8, i64 %69, !dbg !53
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 true) #3, !dbg !54
  %74 = getelementptr float, ptr addrspace(1) %10, i64 %69, !dbg !55
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 true) #3, !dbg !56
  %76 = fadd float %54, 0x3EE4F8B580000000, !dbg !57
  %77 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !58
  %.not.i = icmp eq i32 %77, 0, !dbg !58
  %78 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !58
  %.not1.i = icmp eq i32 %78, 0, !dbg !58
  br i1 %.not.i, label %84, label %79, !dbg !58

79:                                               ; preds = %17
  br i1 %.not1.i, label %82, label %80, !dbg !58

80:                                               ; preds = %79
  %81 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %76) #3, !dbg !58
  br label %__nv_sqrtf.exit, !dbg !58

82:                                               ; preds = %79
  %83 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %76) #3, !dbg !58
  br label %__nv_sqrtf.exit, !dbg !58

84:                                               ; preds = %17
  br i1 %.not1.i, label %87, label %85, !dbg !58

85:                                               ; preds = %84
  %86 = tail call float @llvm.nvvm.sqrt.rn.f(float %76) #3, !dbg !58
  br label %__nv_sqrtf.exit, !dbg !58

87:                                               ; preds = %84
  %88 = tail call float @llvm.nvvm.sqrt.approx.f(float %76) #3, !dbg !58
  br label %__nv_sqrtf.exit, !dbg !58

__nv_sqrtf.exit:                                  ; preds = %80, %82, %85, %87
  %.0.i = phi float [ %81, %80 ], [ %83, %82 ], [ %86, %85 ], [ %88, %87 ], !dbg !58
  %89 = insertelement <2 x i32> poison, i32 %30, i64 0, !dbg !20
  %90 = insertelement <2 x i32> %89, i32 %47, i64 1, !dbg !20
  %91 = bitcast <2 x i32> %90 to <2 x float>, !dbg !20
  %92 = insertelement <2 x i32> poison, i32 %33, i64 0, !dbg !22
  %93 = insertelement <2 x i32> %92, i32 %71, i64 1, !dbg !22
  %94 = bitcast <2 x i32> %93 to <2 x float>, !dbg !22
  %95 = insertelement <2 x i32> poison, i32 %35, i64 0, !dbg !24
  %96 = insertelement <2 x i32> %95, i32 %49, i64 1, !dbg !24
  %97 = bitcast <2 x i32> %96 to <2 x float>, !dbg !24
  %98 = insertelement <2 x i32> poison, i32 %37, i64 0, !dbg !26
  %99 = insertelement <2 x i32> %98, i32 %73, i64 1, !dbg !26
  %100 = bitcast <2 x i32> %99 to <2 x float>, !dbg !26
  %101 = insertelement <2 x i32> poison, i32 %39, i64 0, !dbg !28
  %102 = insertelement <2 x i32> %101, i32 %75, i64 1, !dbg !28
  %103 = bitcast <2 x i32> %102 to <2 x float>, !dbg !28
  %104 = fadd <2 x float> %91, %94, !dbg !59
  %105 = fadd <2 x float> %97, %100, !dbg !60
  %106 = fadd <2 x float> %105, %103, !dbg !61
  %107 = fadd <2 x float> %104, %106, !dbg !62
  %shift = shufflevector <2 x float> %107, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !63
  %108 = fadd <2 x float> %107, %shift, !dbg !63
  %109 = extractelement <2 x float> %108, i64 0, !dbg !63
  %110 = bitcast i32 %51 to float, !dbg !38
  %111 = fsub float %109, %110, !dbg !64
  %112 = bitcast i32 %58 to float, !dbg !44
  %113 = bitcast i32 %56 to float, !dbg !42
  %114 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !65
  %115 = fmul float %111, %114, !dbg !66
  %116 = fmul float %115, %113, !dbg !67
  %117 = fadd float %116, %112, !dbg !68
  %118 = fcmp olt float %117, 0.000000e+00, !dbg !69
  %119 = select i1 %118, float 0.000000e+00, float %117, !dbg !73
  %120 = bitcast float %109 to i32, !dbg !74
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %120, ptr addrspace(1) %29, i1 true) #3, !dbg !74
  %121 = getelementptr float, ptr addrspace(1) %15, i64 %28, !dbg !75
  %122 = bitcast float %119 to i32, !dbg !76
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %122, ptr addrspace(1) %121, i1 true) #3, !dbg !76
  ret void, !dbg !77
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cfe5jihs2eund4hh5twjvrmk2hbmey2sb6tgwpbnxuhxagyufyt2.py", directory: "inductor_cache/fe")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_convolution_relu_35, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_convolution_relu_35, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_convolution_relu_35", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_convolution_relu_35", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 26, column: 21, scope: !7)
!17 = !DILocation(line: 26, column: 27, scope: !7)
!18 = !DILocation(line: 27, column: 19, scope: !7)
!19 = !DILocation(line: 29, column: 34, scope: !7)
!20 = !DILocation(line: 29, column: 39, scope: !7)
!21 = !DILocation(line: 30, column: 30, scope: !7)
!22 = !DILocation(line: 30, column: 35, scope: !7)
!23 = !DILocation(line: 31, column: 30, scope: !7)
!24 = !DILocation(line: 31, column: 35, scope: !7)
!25 = !DILocation(line: 32, column: 30, scope: !7)
!26 = !DILocation(line: 32, column: 35, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 33, column: 35, scope: !7)
!29 = !DILocation(line: 34, column: 30, scope: !7)
!30 = !DILocation(line: 34, column: 35, scope: !7)
!31 = !DILocation(line: 35, column: 31, scope: !7)
!32 = !DILocation(line: 35, column: 36, scope: !7)
!33 = !DILocation(line: 36, column: 31, scope: !7)
!34 = !DILocation(line: 36, column: 36, scope: !7)
!35 = !DILocation(line: 37, column: 31, scope: !7)
!36 = !DILocation(line: 37, column: 36, scope: !7)
!37 = !DILocation(line: 38, column: 32, scope: !7)
!38 = !DILocation(line: 38, column: 37, scope: !7)
!39 = !DILocation(line: 39, column: 32, scope: !7)
!40 = !DILocation(line: 39, column: 37, scope: !7)
!41 = !DILocation(line: 40, column: 32, scope: !7)
!42 = !DILocation(line: 40, column: 37, scope: !7)
!43 = !DILocation(line: 41, column: 32, scope: !7)
!44 = !DILocation(line: 41, column: 37, scope: !7)
!45 = !DILocation(line: 49, column: 35, scope: !7)
!46 = !DILocation(line: 52, column: 35, scope: !7)
!47 = !DILocation(line: 53, column: 41, scope: !7)
!48 = !DILocation(line: 53, column: 52, scope: !7)
!49 = !DILocation(line: 53, column: 49, scope: !7)
!50 = !DILocation(line: 53, column: 39, scope: !7)
!51 = !DILocation(line: 53, column: 31, scope: !7)
!52 = !DILocation(line: 53, column: 57, scope: !7)
!53 = !DILocation(line: 55, column: 31, scope: !7)
!54 = !DILocation(line: 55, column: 57, scope: !7)
!55 = !DILocation(line: 57, column: 31, scope: !7)
!56 = !DILocation(line: 57, column: 57, scope: !7)
!57 = !DILocation(line: 63, column: 20, scope: !7)
!58 = !DILocation(line: 64, column: 27, scope: !7)
!59 = !DILocation(line: 42, column: 18, scope: !7)
!60 = !DILocation(line: 43, column: 18, scope: !7)
!61 = !DILocation(line: 44, column: 18, scope: !7)
!62 = !DILocation(line: 45, column: 18, scope: !7)
!63 = !DILocation(line: 60, column: 19, scope: !7)
!64 = !DILocation(line: 61, column: 20, scope: !7)
!65 = !DILocation(line: 66, column: 20, scope: !7)
!66 = !DILocation(line: 69, column: 20, scope: !7)
!67 = !DILocation(line: 70, column: 20, scope: !7)
!68 = !DILocation(line: 71, column: 20, scope: !7)
!69 = !DILocation(line: 118, column: 15, scope: !70, inlinedAt: !72)
!70 = distinct !DILexicalBlockFile(scope: !7, file: !71, discriminator: 0)
!71 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!72 = !DILocation(line: 73, column: 42, scope: !7)
!73 = !DILocation(line: 121, column: 29, scope: !70, inlinedAt: !72)
!74 = !DILocation(line: 74, column: 40, scope: !7)
!75 = !DILocation(line: 75, column: 25, scope: !7)
!76 = !DILocation(line: 75, column: 37, scope: !7)
!77 = !DILocation(line: 75, column: 4, scope: !7)
