; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused_add_clamp_mean_mul_rsqrt_sub_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %10 = icmp slt i32 %9, 16, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = and i32 %11, 15, !dbg !12
  %.frozen = freeze i32 %9, !dbg !13
  %13 = sdiv i32 %.frozen, 4, !dbg !13
  %14 = mul i32 %13, 4, !dbg !14
  %.decomposed = sub i32 %.frozen, %14, !dbg !14
  %15 = shl i32 %9, 4, !dbg !15
  %16 = or disjoint i32 %15, %12, !dbg !16
  %17 = sext i32 %16 to i64, !dbg !17
  %18 = getelementptr float, ptr addrspace(1) %2, i64 %17, !dbg !17
  %19 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %18, i1 %10, i32 0, i1 %10) #5, !dbg !18
  %20 = bitcast i32 %19 to float, !dbg !18
  %21 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %18, i1 %10, i32 0, i1 %10) #5, !dbg !18
  %22 = bitcast i32 %21 to float, !dbg !18
  %23 = shl i32 %13, 3, !dbg !19
  %24 = add i32 %23, %.decomposed, !dbg !20
  %25 = sext i32 %24 to i64, !dbg !21
  %26 = getelementptr float, ptr addrspace(1) %3, i64 %25, !dbg !21
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 %10) #5, !dbg !22
  %28 = sext i32 %.decomposed to i64, !dbg !23
  %29 = getelementptr float, ptr addrspace(1) %4, i64 %28, !dbg !23
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 %10) #5, !dbg !24
  %31 = add nsw i32 %.decomposed, 4, !dbg !25
  %32 = add nuw i32 %31, %23, !dbg !26
  %33 = sext i32 %32 to i64, !dbg !27
  %34 = getelementptr float, ptr addrspace(1) %3, i64 %33, !dbg !27
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 %10) #5, !dbg !28
  %36 = zext nneg i32 %31 to i64, !dbg !29
  %37 = getelementptr float, ptr addrspace(1) %4, i64 %36, !dbg !29
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %10) #5, !dbg !30
  %39 = select i1 %10, float %20, float 0.000000e+00, !dbg !31
  %40 = select i1 %10, float %22, float 0.000000e+00, !dbg !31
  %41 = bitcast float %39 to i32, !dbg !32
  %42 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %41, i32 8, i32 31), !dbg !32
  %43 = bitcast i32 %42 to float, !dbg !32
  %44 = fadd float %39, %43, !dbg !36
  %45 = bitcast float %44 to i32, !dbg !32
  %46 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %45, i32 4, i32 31), !dbg !32
  %47 = bitcast i32 %46 to float, !dbg !32
  %48 = fadd float %44, %47, !dbg !36
  %49 = bitcast float %48 to i32, !dbg !32
  %50 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %49, i32 2, i32 31), !dbg !32
  %51 = bitcast i32 %50 to float, !dbg !32
  %52 = fadd float %48, %51, !dbg !36
  %53 = bitcast float %52 to i32, !dbg !32
  %54 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %53, i32 1, i32 31), !dbg !32
  %55 = bitcast i32 %54 to float, !dbg !32
  %56 = fadd float %52, %55, !dbg !36
  %57 = bitcast float %40 to i32, !dbg !32
  %58 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %57, i32 8, i32 31), !dbg !32
  %59 = bitcast i32 %58 to float, !dbg !32
  %60 = fadd float %40, %59, !dbg !36
  %61 = bitcast float %60 to i32, !dbg !32
  %62 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %61, i32 4, i32 31), !dbg !32
  %63 = bitcast i32 %62 to float, !dbg !32
  %64 = fadd float %60, %63, !dbg !36
  %65 = bitcast float %64 to i32, !dbg !32
  %66 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %65, i32 2, i32 31), !dbg !32
  %67 = bitcast i32 %66 to float, !dbg !32
  %68 = fadd float %64, %67, !dbg !36
  %69 = bitcast float %68 to i32, !dbg !32
  %70 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %69, i32 1, i32 31), !dbg !32
  %71 = bitcast i32 %70 to float, !dbg !32
  %72 = fadd float %68, %71, !dbg !36
  %73 = fmul float %20, %20, !dbg !38
  %74 = fmul float %22, %22, !dbg !38
  %75 = select i1 %10, float %73, float 0.000000e+00, !dbg !39
  %76 = select i1 %10, float %74, float 0.000000e+00, !dbg !39
  %77 = bitcast float %75 to i32, !dbg !40
  %78 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %77, i32 8, i32 31), !dbg !40
  %79 = bitcast i32 %78 to float, !dbg !40
  %80 = fadd float %75, %79, !dbg !42
  %81 = bitcast float %80 to i32, !dbg !40
  %82 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %81, i32 4, i32 31), !dbg !40
  %83 = bitcast i32 %82 to float, !dbg !40
  %84 = fadd float %80, %83, !dbg !42
  %85 = bitcast float %84 to i32, !dbg !40
  %86 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %85, i32 2, i32 31), !dbg !40
  %87 = bitcast i32 %86 to float, !dbg !40
  %88 = fadd float %84, %87, !dbg !42
  %89 = bitcast float %88 to i32, !dbg !40
  %90 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %89, i32 1, i32 31), !dbg !40
  %91 = bitcast i32 %90 to float, !dbg !40
  %92 = fadd float %88, %91, !dbg !42
  %93 = bitcast float %76 to i32, !dbg !40
  %94 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %93, i32 8, i32 31), !dbg !40
  %95 = bitcast i32 %94 to float, !dbg !40
  %96 = fadd float %76, %95, !dbg !42
  %97 = bitcast float %96 to i32, !dbg !40
  %98 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %97, i32 4, i32 31), !dbg !40
  %99 = bitcast i32 %98 to float, !dbg !40
  %100 = fadd float %96, %99, !dbg !42
  %101 = bitcast float %100 to i32, !dbg !40
  %102 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %101, i32 2, i32 31), !dbg !40
  %103 = bitcast i32 %102 to float, !dbg !40
  %104 = fadd float %100, %103, !dbg !42
  %105 = bitcast float %104 to i32, !dbg !40
  %106 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %105, i32 1, i32 31), !dbg !40
  %107 = bitcast i32 %106 to float, !dbg !40
  %108 = fadd float %104, %107, !dbg !42
  %109 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %56, float 1.600000e+01) #5, !dbg !43
  %110 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %72, float 1.600000e+01) #5, !dbg !43
  %111 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %92, float 1.600000e+01) #5, !dbg !44
  %112 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %108, float 1.600000e+01) #5, !dbg !44
  %113 = fmul float %109, %109, !dbg !45
  %114 = fmul float %110, %110, !dbg !45
  %115 = fsub float %111, %113, !dbg !46
  %116 = fsub float %112, %114, !dbg !46
  %.inv = fcmp ole float %115, 0.000000e+00, !dbg !47
  %117 = select i1 %.inv, float 0.000000e+00, float %115, !dbg !47
  %.inv1 = fcmp ole float %116, 0.000000e+00, !dbg !47
  %118 = select i1 %.inv1, float 0.000000e+00, float %116, !dbg !47
  %119 = fadd float %117, 0x3E45798EE0000000, !dbg !51
  %120 = fadd float %118, 0x3E45798EE0000000, !dbg !51
  %121 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !52
  %.not.i = icmp eq i32 %121, 0, !dbg !52
  br i1 %.not.i, label %124, label %122, !dbg !52

122:                                              ; preds = %8
  %123 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %119), !dbg !52
  br label %__nv_rsqrtf.exit, !dbg !52

124:                                              ; preds = %8
  %125 = tail call float @llvm.nvvm.rsqrt.approx.f(float %119), !dbg !52
  br label %__nv_rsqrtf.exit, !dbg !52

__nv_rsqrtf.exit:                                 ; preds = %122, %124
  %.0.i = phi float [ %123, %122 ], [ %125, %124 ], !dbg !52
  %126 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !52
  %.not.i2 = icmp eq i32 %126, 0, !dbg !52
  br i1 %.not.i2, label %129, label %127, !dbg !52

127:                                              ; preds = %__nv_rsqrtf.exit
  %128 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %120), !dbg !52
  br label %__nv_rsqrtf.exit4, !dbg !52

129:                                              ; preds = %__nv_rsqrtf.exit
  %130 = tail call float @llvm.nvvm.rsqrt.approx.f(float %120), !dbg !52
  br label %__nv_rsqrtf.exit4, !dbg !52

__nv_rsqrtf.exit4:                                ; preds = %127, %129
  %.0.i3 = phi float [ %128, %127 ], [ %130, %129 ], !dbg !52
  %131 = insertelement <2 x i32> poison, i32 %38, i64 0, !dbg !30
  %132 = insertelement <2 x i32> %131, i32 %30, i64 1, !dbg !30
  %133 = bitcast <2 x i32> %132 to <2 x float>, !dbg !30
  %134 = insertelement <2 x i32> poison, i32 %35, i64 0, !dbg !28
  %135 = insertelement <2 x i32> %134, i32 %27, i64 1, !dbg !28
  %136 = bitcast <2 x i32> %135 to <2 x float>, !dbg !28
  %137 = fsub float %20, %109, !dbg !53
  %138 = fmul float %137, %.0.i, !dbg !54
  %139 = fadd <2 x float> %136, %133, !dbg !55
  %140 = fmul <2 x float> %139, splat (float 0x3FE6A09E60000000), !dbg !56
  %141 = extractelement <2 x float> %140, i64 1, !dbg !57
  %142 = fmul float %141, %138, !dbg !57
  %143 = extractelement <2 x float> %140, i64 0, !dbg !58
  %144 = fadd float %143, %142, !dbg !58
  tail call void @llvm.nvvm.barrier0(), !dbg !59
  %145 = sext i32 %9 to i64, !dbg !60
  %146 = getelementptr float, ptr addrspace(1) %0, i64 %145, !dbg !60
  %urem = and i32 %11, 63, !dbg !61
  %147 = icmp eq i32 %urem, 0, !dbg !61
  %148 = bitcast float %110 to i32, !dbg !61
  %149 = and i1 %147, %10, !dbg !61
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %148, ptr addrspace(1) %146, i1 %149) #5, !dbg !61
  tail call void @llvm.nvvm.barrier0(), !dbg !62
  %150 = getelementptr float, ptr addrspace(1) %1, i64 %145, !dbg !63
  %151 = bitcast float %.0.i3 to i32, !dbg !64
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %151, ptr addrspace(1) %150, i1 %149) #5, !dbg !64
  %152 = getelementptr float, ptr addrspace(1) %5, i64 %17, !dbg !65
  %153 = and i32 %11, 48, !dbg !66
  %154 = icmp eq i32 %153, 0, !dbg !66
  %155 = bitcast float %144 to i32, !dbg !66
  %156 = and i1 %154, %10, !dbg !66
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %155, ptr addrspace(1) %152, i1 %156) #5, !dbg !66
  ret void, !dbg !67
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cajkqfqbha23z4jblf5kldtx6jjcavodnrfngv3gj6i7lzwxqvbj.py", directory: "inductor_cache/aj")
!4 = !{ptr @triton_per_fused_add_clamp_mean_mul_rsqrt_sub_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_clamp_mean_mul_rsqrt_sub_0, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_clamp_mean_mul_rsqrt_sub_0", linkageName: "triton_per_fused_add_clamp_mean_mul_rsqrt_sub_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 21, scope: !7)
!12 = !DILocation(line: 26, column: 34, scope: !7)
!13 = !DILocation(line: 32, column: 19, scope: !7)
!14 = !DILocation(line: 31, column: 19, scope: !7)
!15 = !DILocation(line: 33, column: 38, scope: !7)
!16 = !DILocation(line: 33, column: 35, scope: !7)
!17 = !DILocation(line: 33, column: 30, scope: !7)
!18 = !DILocation(line: 33, column: 43, scope: !7)
!19 = !DILocation(line: 34, column: 38, scope: !7)
!20 = !DILocation(line: 34, column: 36, scope: !7)
!21 = !DILocation(line: 34, column: 31, scope: !7)
!22 = !DILocation(line: 34, column: 43, scope: !7)
!23 = !DILocation(line: 35, column: 31, scope: !7)
!24 = !DILocation(line: 35, column: 36, scope: !7)
!25 = !DILocation(line: 36, column: 35, scope: !7)
!26 = !DILocation(line: 36, column: 40, scope: !7)
!27 = !DILocation(line: 36, column: 31, scope: !7)
!28 = !DILocation(line: 36, column: 47, scope: !7)
!29 = !DILocation(line: 37, column: 31, scope: !7)
!30 = !DILocation(line: 37, column: 40, scope: !7)
!31 = !DILocation(line: 39, column: 33, scope: !7)
!32 = !DILocation(line: 267, column: 36, scope: !33, inlinedAt: !35)
!33 = distinct !DILexicalBlockFile(scope: !7, file: !34, discriminator: 0)
!34 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!35 = !DILocation(line: 40, column: 24, scope: !7)
!36 = !DILocation(line: 256, column: 15, scope: !37, inlinedAt: !35)
!37 = distinct !DILexicalBlockFile(scope: !33, file: !34, discriminator: 0)
!38 = !DILocation(line: 41, column: 18, scope: !7)
!39 = !DILocation(line: 43, column: 33, scope: !7)
!40 = !DILocation(line: 267, column: 36, scope: !33, inlinedAt: !41)
!41 = !DILocation(line: 44, column: 24, scope: !7)
!42 = !DILocation(line: 256, column: 15, scope: !37, inlinedAt: !41)
!43 = !DILocation(line: 46, column: 19, scope: !7)
!44 = !DILocation(line: 47, column: 19, scope: !7)
!45 = !DILocation(line: 48, column: 20, scope: !7)
!46 = !DILocation(line: 49, column: 20, scope: !7)
!47 = !DILocation(line: 121, column: 29, scope: !48, inlinedAt: !50)
!48 = distinct !DILexicalBlockFile(scope: !7, file: !49, discriminator: 0)
!49 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!50 = !DILocation(line: 51, column: 42, scope: !7)
!51 = !DILocation(line: 53, column: 20, scope: !7)
!52 = !DILocation(line: 54, column: 28, scope: !7)
!53 = !DILocation(line: 58, column: 19, scope: !7)
!54 = !DILocation(line: 59, column: 20, scope: !7)
!55 = !DILocation(line: 61, column: 20, scope: !7)
!56 = !DILocation(line: 62, column: 20, scope: !7)
!57 = !DILocation(line: 60, column: 20, scope: !7)
!58 = !DILocation(line: 63, column: 20, scope: !7)
!59 = !DILocation(line: 64, column: 4, scope: !7)
!60 = !DILocation(line: 65, column: 28, scope: !7)
!61 = !DILocation(line: 65, column: 40, scope: !7)
!62 = !DILocation(line: 66, column: 4, scope: !7)
!63 = !DILocation(line: 67, column: 28, scope: !7)
!64 = !DILocation(line: 67, column: 40, scope: !7)
!65 = !DILocation(line: 68, column: 25, scope: !7)
!66 = !DILocation(line: 68, column: 45, scope: !7)
!67 = !DILocation(line: 68, column: 4, scope: !7)
