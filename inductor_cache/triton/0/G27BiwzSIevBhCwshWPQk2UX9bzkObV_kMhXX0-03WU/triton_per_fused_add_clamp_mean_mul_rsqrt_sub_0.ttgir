#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [2, 1], order = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 2], order = [0, 1]}>
#loc = loc("inductor_cache/aj/cajkqfqbha23z4jblf5kldtx6jjcavodnrfngv3gj6i7lzwxqvbj.py":19:0)
#loc1 = loc(unknown)
#loc25 = loc("inductor_cache/aj/cajkqfqbha23z4jblf5kldtx6jjcavodnrfngv3gj6i7lzwxqvbj.py":40:24)
#loc30 = loc("inductor_cache/aj/cajkqfqbha23z4jblf5kldtx6jjcavodnrfngv3gj6i7lzwxqvbj.py":44:24)
#loc61 = loc(callsite(#loc1 at #loc25))
#loc64 = loc(callsite(#loc1 at #loc30))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 2 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_per_fused_add_clamp_mean_mul_rsqrt_sub_0(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/aj/cajkqfqbha23z4jblf5kldtx6jjcavodnrfngv3gj6i7lzwxqvbj.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/aj/cajkqfqbha23z4jblf5kldtx6jjcavodnrfngv3gj6i7lzwxqvbj.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/aj/cajkqfqbha23z4jblf5kldtx6jjcavodnrfngv3gj6i7lzwxqvbj.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/aj/cajkqfqbha23z4jblf5kldtx6jjcavodnrfngv3gj6i7lzwxqvbj.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/aj/cajkqfqbha23z4jblf5kldtx6jjcavodnrfngv3gj6i7lzwxqvbj.py":19:0), %arg5: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/aj/cajkqfqbha23z4jblf5kldtx6jjcavodnrfngv3gj6i7lzwxqvbj.py":19:0), %arg6: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/aj/cajkqfqbha23z4jblf5kldtx6jjcavodnrfngv3gj6i7lzwxqvbj.py":19:0), %arg7: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/aj/cajkqfqbha23z4jblf5kldtx6jjcavodnrfngv3gj6i7lzwxqvbj.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<1x16xf32, #blocked> loc(#loc1)
    %c8_i32 = arith.constant 8 : i32 loc(#loc1)
    %c4_i32 = arith.constant 4 : i32 loc(#loc1)
    %c16_i32 = arith.constant 16 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<1x1xf32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<0.000000e+00> : tensor<1x1xf32, #blocked1> loc(#loc1)
    %cst_2 = arith.constant dense<0.707106769> : tensor<1x1xf32, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<9.99999993E-9> : tensor<1x1xf32, #blocked> loc(#loc1)
    %cst_4 = arith.constant dense<9.99999993E-9> : tensor<1x1xf32, #blocked1> loc(#loc1)
    %cst_5 = arith.constant dense<1.600000e+01> : tensor<1x1xf32, #blocked> loc(#loc1)
    %cst_6 = arith.constant dense<1.600000e+01> : tensor<1x1xf32, #blocked1> loc(#loc1)
    %cst_7 = arith.constant dense<0.000000e+00> : tensor<1x16xf32, #blocked1> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.cmpi slt, %0, %c16_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc4)
    %3 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc4)
    %4 = tt.expand_dims %2 {axis = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x16xi32, #blocked> loc(#loc4)
    %5 = tt.expand_dims %3 {axis = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x16xi32, #blocked1> loc(#loc4)
    %6 = arith.remsi %0, %c4_i32 : i32 loc(#loc5)
    %7 = arith.divsi %0, %c4_i32 : i32 loc(#loc6)
    %8 = arith.muli %0, %c16_i32 : i32 loc(#loc7)
    %9 = tt.splat %8 : i32 -> tensor<1x16xi32, #blocked> loc(#loc8)
    %10 = tt.splat %8 : i32 -> tensor<1x16xi32, #blocked1> loc(#loc8)
    %11 = arith.addi %4, %9 : tensor<1x16xi32, #blocked> loc(#loc8)
    %12 = arith.addi %5, %10 : tensor<1x16xi32, #blocked1> loc(#loc8)
    %13 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc9)
    %14 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1x16x!tt.ptr<f32>, #blocked1> loc(#loc9)
    %15 = tt.addptr %13, %11 : tensor<1x16x!tt.ptr<f32>, #blocked>, tensor<1x16xi32, #blocked> loc(#loc9)
    %16 = tt.addptr %14, %12 : tensor<1x16x!tt.ptr<f32>, #blocked1>, tensor<1x16xi32, #blocked1> loc(#loc9)
    %17 = tt.splat %1 : i1 -> tensor<1x16xi1, #blocked> loc(#loc10)
    %18 = tt.splat %1 : i1 -> tensor<1x16xi1, #blocked1> loc(#loc10)
    %19 = tt.load %15, %17, %cst : tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc10)
    %20 = tt.load %16, %18, %cst_7 : tensor<1x16x!tt.ptr<f32>, #blocked1> loc(#loc10)
    %21 = arith.muli %7, %c8_i32 : i32 loc(#loc11)
    %22 = arith.addi %6, %21 : i32 loc(#loc12)
    %23 = tt.addptr %arg3, %22 : !tt.ptr<f32>, i32 loc(#loc13)
    %24 = tt.splat %23 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc14)
    %25 = tt.splat %1 : i1 -> tensor<1x1xi1, #blocked> loc(#loc14)
    %26 = tt.load %24, %25 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc14)
    %27 = tt.addptr %arg4, %6 : !tt.ptr<f32>, i32 loc(#loc15)
    %28 = tt.splat %27 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc16)
    %29 = tt.load %28, %25 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc16)
    %30 = arith.addi %6, %c4_i32 : i32 loc(#loc17)
    %31 = arith.addi %30, %21 : i32 loc(#loc18)
    %32 = tt.addptr %arg3, %31 : !tt.ptr<f32>, i32 loc(#loc19)
    %33 = tt.splat %32 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc20)
    %34 = tt.load %33, %25 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc20)
    %35 = tt.addptr %arg4, %30 : !tt.ptr<f32>, i32 loc(#loc21)
    %36 = tt.splat %35 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc22)
    %37 = tt.load %36, %25 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc22)
    %38 = arith.select %17, %19, %cst : tensor<1x16xi1, #blocked>, tensor<1x16xf32, #blocked> loc(#loc23)
    %39 = arith.select %18, %20, %cst_7 : tensor<1x16xi1, #blocked1>, tensor<1x16xf32, #blocked1> loc(#loc23)
    %40 = "tt.reduce"(%38) <{axis = 1 : i32}> ({
    ^bb0(%arg8: f32 loc(callsite(#loc1 at #loc25)), %arg9: f32 loc(callsite(#loc1 at #loc25))):
      %91 = arith.addf %arg8, %arg9 : f32 loc(#loc69)
      tt.reduce.return %91 : f32 loc(#loc60)
    }) : (tensor<1x16xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc60)
    %41 = "tt.reduce"(%39) <{axis = 1 : i32}> ({
    ^bb0(%arg8: f32 loc(callsite(#loc1 at #loc25)), %arg9: f32 loc(callsite(#loc1 at #loc25))):
      %91 = arith.addf %arg8, %arg9 : f32 loc(#loc69)
      tt.reduce.return %91 : f32 loc(#loc60)
    }) : (tensor<1x16xf32, #blocked1>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc60)
    %42 = tt.expand_dims %40 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1x1xf32, #blocked> loc(#loc27)
    %43 = tt.expand_dims %41 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<1x1xf32, #blocked1> loc(#loc27)
    %44 = arith.mulf %19, %19 : tensor<1x16xf32, #blocked> loc(#loc28)
    %45 = arith.mulf %20, %20 : tensor<1x16xf32, #blocked1> loc(#loc28)
    %46 = arith.select %17, %44, %cst : tensor<1x16xi1, #blocked>, tensor<1x16xf32, #blocked> loc(#loc29)
    %47 = arith.select %18, %45, %cst_7 : tensor<1x16xi1, #blocked1>, tensor<1x16xf32, #blocked1> loc(#loc29)
    %48 = "tt.reduce"(%46) <{axis = 1 : i32}> ({
    ^bb0(%arg8: f32 loc(callsite(#loc1 at #loc30)), %arg9: f32 loc(callsite(#loc1 at #loc30))):
      %91 = arith.addf %arg8, %arg9 : f32 loc(#loc70)
      tt.reduce.return %91 : f32 loc(#loc63)
    }) : (tensor<1x16xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc63)
    %49 = "tt.reduce"(%47) <{axis = 1 : i32}> ({
    ^bb0(%arg8: f32 loc(callsite(#loc1 at #loc30)), %arg9: f32 loc(callsite(#loc1 at #loc30))):
      %91 = arith.addf %arg8, %arg9 : f32 loc(#loc70)
      tt.reduce.return %91 : f32 loc(#loc63)
    }) : (tensor<1x16xf32, #blocked1>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc63)
    %50 = tt.expand_dims %48 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1x1xf32, #blocked> loc(#loc31)
    %51 = tt.expand_dims %49 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<1x1xf32, #blocked1> loc(#loc31)
    %52 = arith.divf %42, %cst_5 : tensor<1x1xf32, #blocked> loc(#loc32)
    %53 = arith.divf %43, %cst_6 : tensor<1x1xf32, #blocked1> loc(#loc32)
    %54 = arith.divf %50, %cst_5 : tensor<1x1xf32, #blocked> loc(#loc33)
    %55 = arith.divf %51, %cst_6 : tensor<1x1xf32, #blocked1> loc(#loc33)
    %56 = arith.mulf %52, %52 : tensor<1x1xf32, #blocked> loc(#loc34)
    %57 = arith.mulf %53, %53 : tensor<1x1xf32, #blocked1> loc(#loc34)
    %58 = arith.subf %54, %56 : tensor<1x1xf32, #blocked> loc(#loc35)
    %59 = arith.subf %55, %57 : tensor<1x1xf32, #blocked1> loc(#loc35)
    %60 = arith.cmpf ogt, %58, %cst_0 : tensor<1x1xf32, #blocked> loc(#loc65)
    %61 = arith.cmpf ogt, %59, %cst_1 : tensor<1x1xf32, #blocked1> loc(#loc65)
    %62 = arith.cmpf une, %58, %58 : tensor<1x1xf32, #blocked> loc(#loc66)
    %63 = arith.cmpf une, %59, %59 : tensor<1x1xf32, #blocked1> loc(#loc66)
    %64 = arith.ori %60, %62 : tensor<1x1xi1, #blocked> loc(#loc67)
    %65 = arith.ori %61, %63 : tensor<1x1xi1, #blocked1> loc(#loc67)
    %66 = arith.select %64, %58, %cst_0 : tensor<1x1xi1, #blocked>, tensor<1x1xf32, #blocked> loc(#loc68)
    %67 = arith.select %65, %59, %cst_1 : tensor<1x1xi1, #blocked1>, tensor<1x1xf32, #blocked1> loc(#loc68)
    %68 = arith.addf %66, %cst_3 : tensor<1x1xf32, #blocked> loc(#loc41)
    %69 = arith.addf %67, %cst_4 : tensor<1x1xf32, #blocked1> loc(#loc41)
    %70 = tt.extern_elementwise %68 {libname = "", libpath = "", pure = true, symbol = "__nv_rsqrtf"} : (tensor<1x1xf32, #blocked>) -> tensor<1x1xf32, #blocked> loc(#loc42)
    %71 = tt.extern_elementwise %69 {libname = "", libpath = "", pure = true, symbol = "__nv_rsqrtf"} : (tensor<1x1xf32, #blocked1>) -> tensor<1x1xf32, #blocked1> loc(#loc42)
    %72 = arith.addf %26, %29 : tensor<1x1xf32, #blocked> loc(#loc43)
    %73 = arith.mulf %72, %cst_2 : tensor<1x1xf32, #blocked> loc(#loc44)
    %74 = tt.broadcast %52 : tensor<1x1xf32, #blocked> -> tensor<1x16xf32, #blocked> loc(#loc45)
    %75 = arith.subf %19, %74 : tensor<1x16xf32, #blocked> loc(#loc45)
    %76 = tt.broadcast %70 : tensor<1x1xf32, #blocked> -> tensor<1x16xf32, #blocked> loc(#loc46)
    %77 = arith.mulf %75, %76 : tensor<1x16xf32, #blocked> loc(#loc46)
    %78 = tt.broadcast %73 : tensor<1x1xf32, #blocked> -> tensor<1x16xf32, #blocked> loc(#loc47)
    %79 = arith.mulf %78, %77 : tensor<1x16xf32, #blocked> loc(#loc47)
    %80 = arith.addf %34, %37 : tensor<1x1xf32, #blocked> loc(#loc48)
    %81 = arith.mulf %80, %cst_2 : tensor<1x1xf32, #blocked> loc(#loc49)
    %82 = tt.broadcast %81 : tensor<1x1xf32, #blocked> -> tensor<1x16xf32, #blocked> loc(#loc50)
    %83 = arith.addf %79, %82 : tensor<1x16xf32, #blocked> loc(#loc50)
    gpu.barrier loc(#loc51)
    %84 = tt.addptr %arg0, %0 : !tt.ptr<f32>, i32 loc(#loc52)
    %85 = tt.splat %84 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc53)
    %86 = tt.splat %1 : i1 -> tensor<1x1xi1, #blocked1> loc(#loc53)
    tt.store %85, %53, %86 : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc53)
    gpu.barrier loc(#loc54)
    %87 = tt.addptr %arg1, %0 : !tt.ptr<f32>, i32 loc(#loc55)
    %88 = tt.splat %87 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc56)
    tt.store %88, %71, %86 : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc56)
    %89 = tt.splat %arg5 : !tt.ptr<f32> -> tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc57)
    %90 = tt.addptr %89, %11 : tensor<1x16x!tt.ptr<f32>, #blocked>, tensor<1x16xi32, #blocked> loc(#loc57)
    tt.store %90, %83, %17 : tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc58)
    tt.return loc(#loc59)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/aj/cajkqfqbha23z4jblf5kldtx6jjcavodnrfngv3gj6i7lzwxqvbj.py":23:28)
#loc3 = loc("inductor_cache/aj/cajkqfqbha23z4jblf5kldtx6jjcavodnrfngv3gj6i7lzwxqvbj.py":25:21)
#loc4 = loc("inductor_cache/aj/cajkqfqbha23z4jblf5kldtx6jjcavodnrfngv3gj6i7lzwxqvbj.py":26:34)
#loc5 = loc("inductor_cache/aj/cajkqfqbha23z4jblf5kldtx6jjcavodnrfngv3gj6i7lzwxqvbj.py":31:19)
#loc6 = loc("inductor_cache/aj/cajkqfqbha23z4jblf5kldtx6jjcavodnrfngv3gj6i7lzwxqvbj.py":32:19)
#loc7 = loc("inductor_cache/aj/cajkqfqbha23z4jblf5kldtx6jjcavodnrfngv3gj6i7lzwxqvbj.py":33:38)
#loc8 = loc("inductor_cache/aj/cajkqfqbha23z4jblf5kldtx6jjcavodnrfngv3gj6i7lzwxqvbj.py":33:35)
#loc9 = loc("inductor_cache/aj/cajkqfqbha23z4jblf5kldtx6jjcavodnrfngv3gj6i7lzwxqvbj.py":33:30)
#loc10 = loc("inductor_cache/aj/cajkqfqbha23z4jblf5kldtx6jjcavodnrfngv3gj6i7lzwxqvbj.py":33:43)
#loc11 = loc("inductor_cache/aj/cajkqfqbha23z4jblf5kldtx6jjcavodnrfngv3gj6i7lzwxqvbj.py":34:38)
#loc12 = loc("inductor_cache/aj/cajkqfqbha23z4jblf5kldtx6jjcavodnrfngv3gj6i7lzwxqvbj.py":34:36)
#loc13 = loc("inductor_cache/aj/cajkqfqbha23z4jblf5kldtx6jjcavodnrfngv3gj6i7lzwxqvbj.py":34:31)
#loc14 = loc("inductor_cache/aj/cajkqfqbha23z4jblf5kldtx6jjcavodnrfngv3gj6i7lzwxqvbj.py":34:43)
#loc15 = loc("inductor_cache/aj/cajkqfqbha23z4jblf5kldtx6jjcavodnrfngv3gj6i7lzwxqvbj.py":35:31)
#loc16 = loc("inductor_cache/aj/cajkqfqbha23z4jblf5kldtx6jjcavodnrfngv3gj6i7lzwxqvbj.py":35:36)
#loc17 = loc("inductor_cache/aj/cajkqfqbha23z4jblf5kldtx6jjcavodnrfngv3gj6i7lzwxqvbj.py":36:35)
#loc18 = loc("inductor_cache/aj/cajkqfqbha23z4jblf5kldtx6jjcavodnrfngv3gj6i7lzwxqvbj.py":36:40)
#loc19 = loc("inductor_cache/aj/cajkqfqbha23z4jblf5kldtx6jjcavodnrfngv3gj6i7lzwxqvbj.py":36:31)
#loc20 = loc("inductor_cache/aj/cajkqfqbha23z4jblf5kldtx6jjcavodnrfngv3gj6i7lzwxqvbj.py":36:47)
#loc21 = loc("inductor_cache/aj/cajkqfqbha23z4jblf5kldtx6jjcavodnrfngv3gj6i7lzwxqvbj.py":37:31)
#loc22 = loc("inductor_cache/aj/cajkqfqbha23z4jblf5kldtx6jjcavodnrfngv3gj6i7lzwxqvbj.py":37:40)
#loc23 = loc("inductor_cache/aj/cajkqfqbha23z4jblf5kldtx6jjcavodnrfngv3gj6i7lzwxqvbj.py":39:33)
#loc24 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc26 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc27 = loc("inductor_cache/aj/cajkqfqbha23z4jblf5kldtx6jjcavodnrfngv3gj6i7lzwxqvbj.py":40:27)
#loc28 = loc("inductor_cache/aj/cajkqfqbha23z4jblf5kldtx6jjcavodnrfngv3gj6i7lzwxqvbj.py":41:18)
#loc29 = loc("inductor_cache/aj/cajkqfqbha23z4jblf5kldtx6jjcavodnrfngv3gj6i7lzwxqvbj.py":43:33)
#loc31 = loc("inductor_cache/aj/cajkqfqbha23z4jblf5kldtx6jjcavodnrfngv3gj6i7lzwxqvbj.py":44:27)
#loc32 = loc("inductor_cache/aj/cajkqfqbha23z4jblf5kldtx6jjcavodnrfngv3gj6i7lzwxqvbj.py":46:19)
#loc33 = loc("inductor_cache/aj/cajkqfqbha23z4jblf5kldtx6jjcavodnrfngv3gj6i7lzwxqvbj.py":47:19)
#loc34 = loc("inductor_cache/aj/cajkqfqbha23z4jblf5kldtx6jjcavodnrfngv3gj6i7lzwxqvbj.py":48:20)
#loc35 = loc("inductor_cache/aj/cajkqfqbha23z4jblf5kldtx6jjcavodnrfngv3gj6i7lzwxqvbj.py":49:20)
#loc36 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":118:15)
#loc37 = loc("inductor_cache/aj/cajkqfqbha23z4jblf5kldtx6jjcavodnrfngv3gj6i7lzwxqvbj.py":51:42)
#loc38 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":120:21)
#loc39 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":120:16)
#loc40 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":121:29)
#loc41 = loc("inductor_cache/aj/cajkqfqbha23z4jblf5kldtx6jjcavodnrfngv3gj6i7lzwxqvbj.py":53:20)
#loc42 = loc("inductor_cache/aj/cajkqfqbha23z4jblf5kldtx6jjcavodnrfngv3gj6i7lzwxqvbj.py":54:28)
#loc43 = loc("inductor_cache/aj/cajkqfqbha23z4jblf5kldtx6jjcavodnrfngv3gj6i7lzwxqvbj.py":55:20)
#loc44 = loc("inductor_cache/aj/cajkqfqbha23z4jblf5kldtx6jjcavodnrfngv3gj6i7lzwxqvbj.py":57:20)
#loc45 = loc("inductor_cache/aj/cajkqfqbha23z4jblf5kldtx6jjcavodnrfngv3gj6i7lzwxqvbj.py":58:19)
#loc46 = loc("inductor_cache/aj/cajkqfqbha23z4jblf5kldtx6jjcavodnrfngv3gj6i7lzwxqvbj.py":59:20)
#loc47 = loc("inductor_cache/aj/cajkqfqbha23z4jblf5kldtx6jjcavodnrfngv3gj6i7lzwxqvbj.py":60:20)
#loc48 = loc("inductor_cache/aj/cajkqfqbha23z4jblf5kldtx6jjcavodnrfngv3gj6i7lzwxqvbj.py":61:20)
#loc49 = loc("inductor_cache/aj/cajkqfqbha23z4jblf5kldtx6jjcavodnrfngv3gj6i7lzwxqvbj.py":62:20)
#loc50 = loc("inductor_cache/aj/cajkqfqbha23z4jblf5kldtx6jjcavodnrfngv3gj6i7lzwxqvbj.py":63:20)
#loc51 = loc("inductor_cache/aj/cajkqfqbha23z4jblf5kldtx6jjcavodnrfngv3gj6i7lzwxqvbj.py":64:4)
#loc52 = loc("inductor_cache/aj/cajkqfqbha23z4jblf5kldtx6jjcavodnrfngv3gj6i7lzwxqvbj.py":65:28)
#loc53 = loc("inductor_cache/aj/cajkqfqbha23z4jblf5kldtx6jjcavodnrfngv3gj6i7lzwxqvbj.py":65:40)
#loc54 = loc("inductor_cache/aj/cajkqfqbha23z4jblf5kldtx6jjcavodnrfngv3gj6i7lzwxqvbj.py":66:4)
#loc55 = loc("inductor_cache/aj/cajkqfqbha23z4jblf5kldtx6jjcavodnrfngv3gj6i7lzwxqvbj.py":67:28)
#loc56 = loc("inductor_cache/aj/cajkqfqbha23z4jblf5kldtx6jjcavodnrfngv3gj6i7lzwxqvbj.py":67:40)
#loc57 = loc("inductor_cache/aj/cajkqfqbha23z4jblf5kldtx6jjcavodnrfngv3gj6i7lzwxqvbj.py":68:25)
#loc58 = loc("inductor_cache/aj/cajkqfqbha23z4jblf5kldtx6jjcavodnrfngv3gj6i7lzwxqvbj.py":68:45)
#loc59 = loc("inductor_cache/aj/cajkqfqbha23z4jblf5kldtx6jjcavodnrfngv3gj6i7lzwxqvbj.py":68:4)
#loc60 = loc(callsite(#loc24 at #loc25))
#loc62 = loc(callsite(#loc26 at #loc24))
#loc63 = loc(callsite(#loc24 at #loc30))
#loc65 = loc(callsite(#loc36 at #loc37))
#loc66 = loc(callsite(#loc38 at #loc37))
#loc67 = loc(callsite(#loc39 at #loc37))
#loc68 = loc(callsite(#loc40 at #loc37))
#loc69 = loc(callsite(#loc62 at #loc25))
#loc70 = loc(callsite(#loc62 at #loc30))
