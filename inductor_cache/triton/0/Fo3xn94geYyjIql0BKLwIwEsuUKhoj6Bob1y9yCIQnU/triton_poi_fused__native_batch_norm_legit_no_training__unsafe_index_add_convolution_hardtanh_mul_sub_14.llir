; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_convolution_hardtanh_mul_sub_14(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) nocapture readnone %11, ptr addrspace(1) nocapture readnone %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) nocapture readnone %15, ptr addrspace(1) %16, ptr addrspace(1) %17, ptr addrspace(1) %18, ptr addrspace(1) %19, ptr addrspace(1) %20, ptr addrspace(1) nocapture readnone %21, ptr addrspace(1) %22, i32 %23) local_unnamed_addr !dbg !7 {
  %25 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %26 = shl i32 %25, 8, !dbg !11
  %27 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %28 = shl i32 %27, 1, !dbg !12
  %29 = and i32 %28, 254, !dbg !12
  %30 = or disjoint i32 %26, %29, !dbg !13
  %31 = icmp slt i32 %30, 256, !dbg !14
  %.frozen = freeze i32 %30, !dbg !15
  %32 = sdiv i32 %.frozen, 4, !dbg !15
  %33 = srem i32 %32, 4, !dbg !16
  %34 = mul i32 %32, 4, !dbg !17
  %.decomposed = sub i32 %.frozen, %34, !dbg !17
  %35 = sdiv i32 %30, 16, !dbg !18
  %36 = srem i32 %35, 4, !dbg !19
  %37 = sext i32 %33 to i64, !dbg !20
  %38 = getelementptr i64, ptr addrspace(1) %3, i64 %37, !dbg !20
  %39 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %38, i1 %31) #3, !dbg !21
  %40 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %38, i1 %31) #3, !dbg !21
  %41 = sext i32 %.decomposed to i64, !dbg !22
  %42 = getelementptr i64, ptr addrspace(1) %4, i64 %41, !dbg !22
  %43 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %42, i1 %31) #3, !dbg !23
  %44 = extractvalue { i64, i64 } %43, 0, !dbg !23
  %45 = extractvalue { i64, i64 } %43, 1, !dbg !23
  %46 = getelementptr i64, ptr addrspace(1) %6, i64 %41, !dbg !24
  %47 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %46, i1 %31) #3, !dbg !25
  %48 = extractvalue { i64, i64 } %47, 0, !dbg !25
  %49 = extractvalue { i64, i64 } %47, 1, !dbg !25
  %50 = getelementptr float, ptr addrspace(1) %7, i64 %41, !dbg !26
  %51 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %50, i1 %31) #3, !dbg !27
  %52 = getelementptr i64, ptr addrspace(1) %8, i64 %37, !dbg !28
  %53 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %52, i1 %31) #3, !dbg !29
  %54 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %52, i1 %31) #3, !dbg !29
  %55 = getelementptr float, ptr addrspace(1) %9, i64 %37, !dbg !30
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 %31) #3, !dbg !31
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 %31) #3, !dbg !31
  %58 = sext i32 %30 to i64, !dbg !32
  %59 = getelementptr float, ptr addrspace(1) %1, i64 %58, !dbg !32
  %60 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %59, i1 %31) #3, !dbg !33
  %61 = sext i32 %36 to i64, !dbg !34
  %62 = getelementptr float, ptr addrspace(1) %10, i64 %61, !dbg !34
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 %31) #3, !dbg !35
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 %31) #3, !dbg !35
  %65 = sext i32 %35 to i64, !dbg !36
  %66 = getelementptr float, ptr addrspace(1) %13, i64 %65, !dbg !36
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 %31) #3, !dbg !37
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 %31) #3, !dbg !37
  %69 = getelementptr float, ptr addrspace(1) %14, i64 %61, !dbg !38
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 %31) #3, !dbg !39
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 %31) #3, !dbg !39
  %72 = getelementptr float, ptr addrspace(1) %16, i64 %41, !dbg !40
  %73 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %72, i1 %31) #3, !dbg !41
  %74 = getelementptr float, ptr addrspace(1) %17, i64 %61, !dbg !42
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 %31) #3, !dbg !43
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 %31) #3, !dbg !43
  %77 = getelementptr float, ptr addrspace(1) %18, i64 %61, !dbg !44
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 %31) #3, !dbg !45
  %79 = bitcast i32 %78 to float, !dbg !45
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 %31) #3, !dbg !45
  %81 = bitcast i32 %80 to float, !dbg !45
  %82 = getelementptr float, ptr addrspace(1) %19, i64 %61, !dbg !46
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 %31) #3, !dbg !47
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 %31) #3, !dbg !47
  %85 = getelementptr float, ptr addrspace(1) %20, i64 %61, !dbg !48
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 %31) #3, !dbg !49
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 %31) #3, !dbg !49
  %88 = getelementptr float, ptr addrspace(1) %22, i64 %37, !dbg !50
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %88, i1 %31) #3, !dbg !51
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %88, i1 %31) #3, !dbg !51
  %91 = lshr i64 %39, 62, !dbg !52
  %92 = and i64 %91, 2, !dbg !52
  %93 = add i64 %92, %39, !dbg !52
  %94 = lshr i64 %44, 62, !dbg !53
  %95 = and i64 %94, 2, !dbg !53
  %96 = lshr i64 %45, 62, !dbg !53
  %97 = and i64 %96, 2, !dbg !53
  %98 = shl i64 %93, 1, !dbg !54
  %99 = shl nsw i32 %35, 2, !dbg !55
  %100 = sext i32 %99 to i64, !dbg !56
  %101 = getelementptr float, ptr addrspace(1) %5, i64 %44, !dbg !57
  %102 = getelementptr float, ptr addrspace(1) %101, i64 %95, !dbg !57
  %103 = getelementptr float, ptr addrspace(1) %102, i64 %98, !dbg !57
  %104 = getelementptr float, ptr addrspace(1) %103, i64 %100, !dbg !57
  %105 = getelementptr float, ptr addrspace(1) %5, i64 %45, !dbg !57
  %106 = getelementptr float, ptr addrspace(1) %105, i64 %97, !dbg !57
  %107 = getelementptr float, ptr addrspace(1) %106, i64 %98, !dbg !57
  %108 = getelementptr float, ptr addrspace(1) %107, i64 %100, !dbg !57
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %104, i1 %31) #3, !dbg !58
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %108, i1 %31) #3, !dbg !58
  %111 = lshr i64 %48, 62, !dbg !59
  %112 = and i64 %111, 2, !dbg !59
  %113 = lshr i64 %49, 62, !dbg !59
  %114 = and i64 %113, 2, !dbg !59
  %115 = getelementptr float, ptr addrspace(1) %5, i64 %48, !dbg !60
  %116 = getelementptr float, ptr addrspace(1) %115, i64 %112, !dbg !60
  %117 = getelementptr float, ptr addrspace(1) %116, i64 %98, !dbg !60
  %118 = getelementptr float, ptr addrspace(1) %117, i64 %100, !dbg !60
  %119 = getelementptr float, ptr addrspace(1) %5, i64 %49, !dbg !60
  %120 = getelementptr float, ptr addrspace(1) %119, i64 %114, !dbg !60
  %121 = getelementptr float, ptr addrspace(1) %120, i64 %98, !dbg !60
  %122 = getelementptr float, ptr addrspace(1) %121, i64 %100, !dbg !60
  %123 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %118, i1 %31) #3, !dbg !61
  %124 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %122, i1 %31) #3, !dbg !61
  %125 = lshr i64 %53, 62, !dbg !62
  %126 = and i64 %125, 2, !dbg !62
  %127 = add i64 %126, %53, !dbg !62
  %128 = shl i64 %127, 1, !dbg !63
  %129 = getelementptr float, ptr addrspace(1) %102, i64 %128, !dbg !64
  %130 = getelementptr float, ptr addrspace(1) %129, i64 %100, !dbg !64
  %131 = getelementptr float, ptr addrspace(1) %106, i64 %128, !dbg !64
  %132 = getelementptr float, ptr addrspace(1) %131, i64 %100, !dbg !64
  %133 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %130, i1 %31) #3, !dbg !65
  %134 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %132, i1 %31) #3, !dbg !65
  %135 = getelementptr float, ptr addrspace(1) %116, i64 %128, !dbg !66
  %136 = getelementptr float, ptr addrspace(1) %135, i64 %100, !dbg !66
  %137 = getelementptr float, ptr addrspace(1) %120, i64 %128, !dbg !66
  %138 = getelementptr float, ptr addrspace(1) %137, i64 %100, !dbg !66
  %139 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %136, i1 %31) #3, !dbg !67
  %140 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %138, i1 %31) #3, !dbg !67
  %141 = fadd float %79, 0x3EE4F8B580000000, !dbg !68
  %142 = fadd float %81, 0x3EE4F8B580000000, !dbg !68
  %143 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !69
  %.not.i = icmp eq i32 %143, 0, !dbg !69
  %144 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !69
  %.not1.i = icmp eq i32 %144, 0, !dbg !69
  br i1 %.not.i, label %150, label %145, !dbg !69

145:                                              ; preds = %24
  br i1 %.not1.i, label %148, label %146, !dbg !69

146:                                              ; preds = %145
  %147 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %141) #3, !dbg !69
  br label %__nv_sqrtf.exit, !dbg !69

148:                                              ; preds = %145
  %149 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %141) #3, !dbg !69
  br label %__nv_sqrtf.exit, !dbg !69

150:                                              ; preds = %24
  br i1 %.not1.i, label %153, label %151, !dbg !69

151:                                              ; preds = %150
  %152 = tail call float @llvm.nvvm.sqrt.rn.f(float %141) #3, !dbg !69
  br label %__nv_sqrtf.exit, !dbg !69

153:                                              ; preds = %150
  %154 = tail call float @llvm.nvvm.sqrt.approx.f(float %141) #3, !dbg !69
  br label %__nv_sqrtf.exit, !dbg !69

__nv_sqrtf.exit:                                  ; preds = %146, %148, %151, %153
  %.0.i = phi float [ %147, %146 ], [ %149, %148 ], [ %152, %151 ], [ %154, %153 ], !dbg !69
  %155 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !69
  %.not.i2 = icmp eq i32 %155, 0, !dbg !69
  %156 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !69
  %.not1.i5 = icmp eq i32 %156, 0, !dbg !69
  br i1 %.not.i2, label %162, label %157, !dbg !69

157:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i5, label %160, label %158, !dbg !69

158:                                              ; preds = %157
  %159 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %142) #3, !dbg !69
  br label %__nv_sqrtf.exit6, !dbg !69

160:                                              ; preds = %157
  %161 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %142) #3, !dbg !69
  br label %__nv_sqrtf.exit6, !dbg !69

162:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i5, label %165, label %163, !dbg !69

163:                                              ; preds = %162
  %164 = tail call float @llvm.nvvm.sqrt.rn.f(float %142) #3, !dbg !69
  br label %__nv_sqrtf.exit6, !dbg !69

165:                                              ; preds = %162
  %166 = tail call float @llvm.nvvm.sqrt.approx.f(float %142) #3, !dbg !69
  br label %__nv_sqrtf.exit6, !dbg !69

__nv_sqrtf.exit6:                                 ; preds = %158, %160, %163, %165
  %.0.i4 = phi float [ %159, %158 ], [ %161, %160 ], [ %164, %163 ], [ %166, %165 ], !dbg !69
  %167 = extractvalue { i32, i32 } %60, 1, !dbg !33
  %168 = bitcast i32 %167 to float, !dbg !33
  %169 = bitcast i32 %64 to float, !dbg !35
  %170 = fadd float %168, %169, !dbg !70
  %171 = bitcast i32 %76 to float, !dbg !43
  %172 = fsub float %170, %171, !dbg !71
  %173 = extractvalue { i32, i32 } %60, 0, !dbg !33
  %174 = bitcast i32 %173 to float, !dbg !33
  %175 = bitcast i32 %63 to float, !dbg !35
  %176 = fadd float %174, %175, !dbg !70
  %177 = bitcast i32 %75 to float, !dbg !43
  %178 = fsub float %176, %177, !dbg !71
  %179 = bitcast i32 %68 to float, !dbg !37
  %180 = bitcast i32 %71 to float, !dbg !39
  %181 = fadd float %179, %180, !dbg !72
  %182 = fsub float %181, %181, !dbg !73
  %183 = extractvalue { i32, i32 } %73, 1, !dbg !41
  %184 = bitcast i32 %183 to float, !dbg !41
  %185 = fmul float %182, %184, !dbg !74
  %186 = fadd float %181, %185, !dbg !75
  %187 = bitcast i32 %67 to float, !dbg !37
  %188 = bitcast i32 %70 to float, !dbg !39
  %189 = fadd float %187, %188, !dbg !72
  %190 = fsub float %189, %189, !dbg !73
  %191 = extractvalue { i32, i32 } %73, 0, !dbg !41
  %192 = bitcast i32 %191 to float, !dbg !41
  %193 = fmul float %190, %192, !dbg !74
  %194 = fadd float %189, %193, !dbg !75
  %195 = insertelement <2 x i32> poison, i32 %140, i64 0, !dbg !67
  %196 = insertelement <2 x i32> %195, i32 %124, i64 1, !dbg !67
  %197 = bitcast <2 x i32> %196 to <2 x float>, !dbg !67
  %198 = insertelement <2 x i32> poison, i32 %134, i64 0, !dbg !65
  %199 = insertelement <2 x i32> %198, i32 %110, i64 1, !dbg !65
  %200 = bitcast <2 x i32> %199 to <2 x float>, !dbg !65
  %201 = extractvalue { i32, i32 } %51, 1, !dbg !27
  %202 = fsub <2 x float> %197, %200, !dbg !76
  %203 = insertelement <2 x i32> poison, i32 %201, i64 0, !dbg !77
  %204 = bitcast <2 x i32> %203 to <2 x float>, !dbg !77
  %205 = shufflevector <2 x float> %204, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !77
  %206 = fmul <2 x float> %202, %205, !dbg !77
  %207 = fadd <2 x float> %206, %200, !dbg !78
  %208 = extractelement <2 x float> %207, i64 0, !dbg !79
  %209 = extractelement <2 x float> %207, i64 1, !dbg !80
  %210 = fsub float %208, %209, !dbg !79
  %211 = bitcast i32 %57 to float, !dbg !31
  %212 = fmul float %210, %211, !dbg !81
  %213 = fadd float %209, %212, !dbg !80
  %214 = insertelement <2 x i32> poison, i32 %139, i64 0, !dbg !67
  %215 = insertelement <2 x i32> %214, i32 %123, i64 1, !dbg !67
  %216 = bitcast <2 x i32> %215 to <2 x float>, !dbg !67
  %217 = insertelement <2 x i32> poison, i32 %133, i64 0, !dbg !65
  %218 = insertelement <2 x i32> %217, i32 %109, i64 1, !dbg !65
  %219 = bitcast <2 x i32> %218 to <2 x float>, !dbg !65
  %220 = extractvalue { i32, i32 } %51, 0, !dbg !27
  %221 = fsub <2 x float> %216, %219, !dbg !76
  %222 = insertelement <2 x i32> poison, i32 %220, i64 0, !dbg !77
  %223 = bitcast <2 x i32> %222 to <2 x float>, !dbg !77
  %224 = shufflevector <2 x float> %223, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !77
  %225 = fmul <2 x float> %221, %224, !dbg !77
  %226 = fadd <2 x float> %225, %219, !dbg !78
  %227 = extractelement <2 x float> %226, i64 0, !dbg !79
  %228 = extractelement <2 x float> %226, i64 1, !dbg !80
  %229 = fsub float %227, %228, !dbg !79
  %230 = bitcast i32 %56 to float, !dbg !31
  %231 = fmul float %229, %230, !dbg !81
  %232 = fadd float %228, %231, !dbg !80
  %233 = bitcast i32 %90 to float, !dbg !51
  %234 = bitcast i32 %89 to float, !dbg !51
  %235 = bitcast i32 %87 to float, !dbg !49
  %236 = bitcast i32 %86 to float, !dbg !49
  %237 = bitcast i32 %84 to float, !dbg !47
  %238 = bitcast i32 %83 to float, !dbg !47
  %239 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !82
  %240 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i4) #3, !dbg !82
  %241 = fmul float %178, %239, !dbg !83
  %242 = fmul float %172, %240, !dbg !83
  %243 = fmul float %241, %238, !dbg !84
  %244 = fmul float %242, %237, !dbg !84
  %245 = fadd float %243, %236, !dbg !85
  %246 = fadd float %244, %235, !dbg !85
  %.inv = fcmp ole float %245, 0.000000e+00, !dbg !86
  %247 = select i1 %.inv, float 0.000000e+00, float %245, !dbg !86
  %.inv1 = fcmp ole float %246, 0.000000e+00, !dbg !86
  %248 = select i1 %.inv1, float 0.000000e+00, float %246, !dbg !86
  %249 = fcmp olt float %247, 6.000000e+00, !dbg !90
  %250 = fcmp olt float %248, 6.000000e+00, !dbg !90
  %251 = fcmp uno float %247, 0.000000e+00, !dbg !92
  %252 = fcmp uno float %248, 0.000000e+00, !dbg !92
  %253 = or i1 %249, %251, !dbg !93
  %254 = or i1 %250, %252, !dbg !93
  %255 = select i1 %253, float %247, float 6.000000e+00, !dbg !94
  %256 = select i1 %254, float %248, float 6.000000e+00, !dbg !94
  %257 = fmul float %232, %255, !dbg !95
  %258 = fmul float %213, %256, !dbg !95
  %259 = fsub float %194, %194, !dbg !96
  %260 = fsub float %186, %186, !dbg !96
  %261 = fmul float %259, %234, !dbg !97
  %262 = fmul float %260, %233, !dbg !97
  %263 = fadd float %194, %261, !dbg !98
  %264 = fadd float %186, %262, !dbg !98
  %265 = fadd float %263, %257, !dbg !99
  %266 = fadd float %264, %258, !dbg !99
  %267 = getelementptr float, ptr addrspace(1) %0, i64 %58, !dbg !100
  %268 = bitcast float %232 to i32, !dbg !101
  %269 = bitcast float %213 to i32, !dbg !101
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %268, i32 %269, ptr addrspace(1) %267, i1 %31) #3, !dbg !101
  %270 = bitcast float %176 to i32, !dbg !102
  %271 = bitcast float %170 to i32, !dbg !102
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %270, i32 %271, ptr addrspace(1) %59, i1 %31) #3, !dbg !102
  %272 = getelementptr float, ptr addrspace(1) %2, i64 %58, !dbg !103
  %273 = bitcast float %265 to i32, !dbg !104
  %274 = bitcast float %266 to i32, !dbg !104
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %273, i32 %274, ptr addrspace(1) %272, i1 %31) #3, !dbg !104
  ret void, !dbg !105
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cylpdmhzj6xziqno3hwn47kdkkvngov6eiphceqixypcr7krrelg.py", directory: "inductor_cache/yl")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_convolution_hardtanh_mul_sub_14, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_convolution_hardtanh_mul_sub_14, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_convolution_hardtanh_mul_sub_14", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_convolution_hardtanh_mul_sub_14", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 26, scope: !7)
!17 = !DILocation(line: 25, column: 19, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 28, column: 27, scope: !7)
!20 = !DILocation(line: 29, column: 30, scope: !7)
!21 = !DILocation(line: 29, column: 35, scope: !7)
!22 = !DILocation(line: 30, column: 30, scope: !7)
!23 = !DILocation(line: 30, column: 35, scope: !7)
!24 = !DILocation(line: 31, column: 31, scope: !7)
!25 = !DILocation(line: 31, column: 36, scope: !7)
!26 = !DILocation(line: 32, column: 31, scope: !7)
!27 = !DILocation(line: 32, column: 36, scope: !7)
!28 = !DILocation(line: 33, column: 31, scope: !7)
!29 = !DILocation(line: 33, column: 36, scope: !7)
!30 = !DILocation(line: 34, column: 31, scope: !7)
!31 = !DILocation(line: 34, column: 36, scope: !7)
!32 = !DILocation(line: 35, column: 35, scope: !7)
!33 = !DILocation(line: 35, column: 40, scope: !7)
!34 = !DILocation(line: 36, column: 31, scope: !7)
!35 = !DILocation(line: 36, column: 36, scope: !7)
!36 = !DILocation(line: 39, column: 32, scope: !7)
!37 = !DILocation(line: 39, column: 37, scope: !7)
!38 = !DILocation(line: 40, column: 32, scope: !7)
!39 = !DILocation(line: 40, column: 37, scope: !7)
!40 = !DILocation(line: 42, column: 32, scope: !7)
!41 = !DILocation(line: 42, column: 37, scope: !7)
!42 = !DILocation(line: 43, column: 32, scope: !7)
!43 = !DILocation(line: 43, column: 37, scope: !7)
!44 = !DILocation(line: 44, column: 32, scope: !7)
!45 = !DILocation(line: 44, column: 37, scope: !7)
!46 = !DILocation(line: 45, column: 32, scope: !7)
!47 = !DILocation(line: 45, column: 37, scope: !7)
!48 = !DILocation(line: 46, column: 32, scope: !7)
!49 = !DILocation(line: 46, column: 37, scope: !7)
!50 = !DILocation(line: 48, column: 32, scope: !7)
!51 = !DILocation(line: 48, column: 37, scope: !7)
!52 = !DILocation(line: 52, column: 32, scope: !7)
!53 = !DILocation(line: 55, column: 32, scope: !7)
!54 = !DILocation(line: 56, column: 39, scope: !7)
!55 = !DILocation(line: 56, column: 48, scope: !7)
!56 = !DILocation(line: 56, column: 46, scope: !7)
!57 = !DILocation(line: 56, column: 30, scope: !7)
!58 = !DILocation(line: 56, column: 53, scope: !7)
!59 = !DILocation(line: 59, column: 35, scope: !7)
!60 = !DILocation(line: 60, column: 31, scope: !7)
!61 = !DILocation(line: 60, column: 55, scope: !7)
!62 = !DILocation(line: 66, column: 35, scope: !7)
!63 = !DILocation(line: 67, column: 40, scope: !7)
!64 = !DILocation(line: 67, column: 31, scope: !7)
!65 = !DILocation(line: 67, column: 55, scope: !7)
!66 = !DILocation(line: 68, column: 31, scope: !7)
!67 = !DILocation(line: 68, column: 56, scope: !7)
!68 = !DILocation(line: 92, column: 20, scope: !7)
!69 = !DILocation(line: 93, column: 27, scope: !7)
!70 = !DILocation(line: 75, column: 20, scope: !7)
!71 = !DILocation(line: 90, column: 20, scope: !7)
!72 = !DILocation(line: 83, column: 20, scope: !7)
!73 = !DILocation(line: 87, column: 20, scope: !7)
!74 = !DILocation(line: 88, column: 20, scope: !7)
!75 = !DILocation(line: 89, column: 20, scope: !7)
!76 = !DILocation(line: 69, column: 20, scope: !7)
!77 = !DILocation(line: 70, column: 20, scope: !7)
!78 = !DILocation(line: 71, column: 20, scope: !7)
!79 = !DILocation(line: 72, column: 20, scope: !7)
!80 = !DILocation(line: 74, column: 20, scope: !7)
!81 = !DILocation(line: 73, column: 20, scope: !7)
!82 = !DILocation(line: 95, column: 20, scope: !7)
!83 = !DILocation(line: 98, column: 20, scope: !7)
!84 = !DILocation(line: 99, column: 20, scope: !7)
!85 = !DILocation(line: 100, column: 20, scope: !7)
!86 = !DILocation(line: 121, column: 29, scope: !87, inlinedAt: !89)
!87 = distinct !DILexicalBlockFile(scope: !7, file: !88, discriminator: 0)
!88 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!89 = !DILocation(line: 102, column: 42, scope: !7)
!90 = !DILocation(line: 110, column: 15, scope: !87, inlinedAt: !91)
!91 = !DILocation(line: 104, column: 42, scope: !7)
!92 = !DILocation(line: 112, column: 21, scope: !87, inlinedAt: !91)
!93 = !DILocation(line: 112, column: 16, scope: !87, inlinedAt: !91)
!94 = !DILocation(line: 113, column: 29, scope: !87, inlinedAt: !91)
!95 = !DILocation(line: 105, column: 20, scope: !7)
!96 = !DILocation(line: 109, column: 20, scope: !7)
!97 = !DILocation(line: 110, column: 20, scope: !7)
!98 = !DILocation(line: 111, column: 20, scope: !7)
!99 = !DILocation(line: 112, column: 20, scope: !7)
!100 = !DILocation(line: 113, column: 28, scope: !7)
!101 = !DILocation(line: 113, column: 40, scope: !7)
!102 = !DILocation(line: 114, column: 40, scope: !7)
!103 = !DILocation(line: 115, column: 28, scope: !7)
!104 = !DILocation(line: 115, column: 40, scope: !7)
!105 = !DILocation(line: 115, column: 4, scope: !7)
