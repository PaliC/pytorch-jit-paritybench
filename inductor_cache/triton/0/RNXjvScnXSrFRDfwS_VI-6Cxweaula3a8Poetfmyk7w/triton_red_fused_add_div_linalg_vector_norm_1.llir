; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_red_fused_add_div_linalg_vector_norm_1(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
__nv_sqrtf.exit:
  %3 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %4 = and i32 %3, 31, !dbg !10
  %5 = shl i32 %3, 2, !dbg !10
  %6 = and i32 %5, 2044, !dbg !10
  %7 = zext nneg i32 %6 to i64, !dbg !11
  %8 = getelementptr float, ptr addrspace(1) %0, i64 %7, !dbg !12
  %9 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %8, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !13
  %10 = extractvalue { i32, i32, i32, i32 } %9, 0, !dbg !13
  %11 = extractvalue { i32, i32, i32, i32 } %9, 1, !dbg !13
  %12 = extractvalue { i32, i32, i32, i32 } %9, 2, !dbg !13
  %13 = extractvalue { i32, i32, i32, i32 } %9, 3, !dbg !13
  %14 = or disjoint i64 %7, 2048, !dbg !14
  %15 = getelementptr float, ptr addrspace(1) %0, i64 %14, !dbg !12
  %16 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %15, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !13
  %17 = extractvalue { i32, i32, i32, i32 } %16, 0, !dbg !13
  %18 = extractvalue { i32, i32, i32, i32 } %16, 1, !dbg !13
  %19 = extractvalue { i32, i32, i32, i32 } %16, 2, !dbg !13
  %20 = extractvalue { i32, i32, i32, i32 } %16, 3, !dbg !13
  %21 = or disjoint i64 %7, 4096, !dbg !14
  %22 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !12
  %23 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %22, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !13
  %24 = extractvalue { i32, i32, i32, i32 } %23, 0, !dbg !13
  %25 = extractvalue { i32, i32, i32, i32 } %23, 1, !dbg !13
  %26 = extractvalue { i32, i32, i32, i32 } %23, 2, !dbg !13
  %27 = extractvalue { i32, i32, i32, i32 } %23, 3, !dbg !13
  %28 = or disjoint i64 %7, 6144, !dbg !14
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !12
  %30 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %29, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !13
  %31 = extractvalue { i32, i32, i32, i32 } %30, 0, !dbg !13
  %32 = extractvalue { i32, i32, i32, i32 } %30, 1, !dbg !13
  %33 = extractvalue { i32, i32, i32, i32 } %30, 2, !dbg !13
  %34 = extractvalue { i32, i32, i32, i32 } %30, 3, !dbg !13
  %35 = insertelement <2 x i32> poison, i32 %10, i64 0, !dbg !13
  %36 = insertelement <2 x i32> %35, i32 %11, i64 1, !dbg !13
  %37 = bitcast <2 x i32> %36 to <2 x float>, !dbg !13
  %38 = fmul <2 x float> %37, %37, !dbg !15
  %39 = insertelement <2 x i32> poison, i32 %17, i64 0, !dbg !13
  %40 = insertelement <2 x i32> %39, i32 %18, i64 1, !dbg !13
  %41 = bitcast <2 x i32> %40 to <2 x float>, !dbg !13
  %42 = fmul <2 x float> %41, %41, !dbg !15
  %43 = fadd <2 x float> %38, %42, !dbg !16
  %44 = insertelement <2 x i32> poison, i32 %24, i64 0, !dbg !13
  %45 = insertelement <2 x i32> %44, i32 %25, i64 1, !dbg !13
  %46 = bitcast <2 x i32> %45 to <2 x float>, !dbg !13
  %47 = fmul <2 x float> %46, %46, !dbg !15
  %48 = fadd <2 x float> %43, %47, !dbg !16
  %49 = insertelement <2 x i32> poison, i32 %31, i64 0, !dbg !13
  %50 = insertelement <2 x i32> %49, i32 %32, i64 1, !dbg !13
  %51 = bitcast <2 x i32> %50 to <2 x float>, !dbg !13
  %52 = fmul <2 x float> %51, %51, !dbg !15
  %53 = fadd <2 x float> %48, %52, !dbg !16
  %54 = insertelement <2 x i32> poison, i32 %13, i64 0, !dbg !13
  %55 = insertelement <2 x i32> %54, i32 %12, i64 1, !dbg !13
  %56 = bitcast <2 x i32> %55 to <2 x float>, !dbg !13
  %57 = fmul <2 x float> %56, %56, !dbg !15
  %58 = insertelement <2 x i32> poison, i32 %20, i64 0, !dbg !13
  %59 = insertelement <2 x i32> %58, i32 %19, i64 1, !dbg !13
  %60 = bitcast <2 x i32> %59 to <2 x float>, !dbg !13
  %61 = fmul <2 x float> %60, %60, !dbg !15
  %62 = fadd <2 x float> %57, %61, !dbg !16
  %63 = insertelement <2 x i32> poison, i32 %27, i64 0, !dbg !13
  %64 = insertelement <2 x i32> %63, i32 %26, i64 1, !dbg !13
  %65 = bitcast <2 x i32> %64 to <2 x float>, !dbg !13
  %66 = fmul <2 x float> %65, %65, !dbg !15
  %67 = fadd <2 x float> %62, %66, !dbg !16
  %68 = insertelement <2 x i32> poison, i32 %34, i64 0, !dbg !13
  %69 = insertelement <2 x i32> %68, i32 %33, i64 1, !dbg !13
  %70 = bitcast <2 x i32> %69 to <2 x float>, !dbg !13
  %71 = fmul <2 x float> %70, %70, !dbg !15
  %72 = fadd <2 x float> %67, %71, !dbg !16
  %73 = lshr i32 %3, 5, !dbg !10
  %shift = shufflevector <2 x float> %53, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !17
  %74 = fadd <2 x float> %53, %shift, !dbg !17
  %shift20 = shufflevector <2 x float> %72, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !17
  %75 = fadd <2 x float> %shift20, %74, !dbg !17
  %76 = fadd <2 x float> %72, %75, !dbg !17
  %77 = extractelement <2 x float> %76, i64 0, !dbg !17
  %78 = bitcast float %77 to i32, !dbg !22
  %79 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %78, i32 16, i32 31), !dbg !22
  %80 = bitcast i32 %79 to float, !dbg !22
  %81 = fadd float %77, %80, !dbg !17
  %82 = bitcast float %81 to i32, !dbg !22
  %83 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %82, i32 8, i32 31), !dbg !22
  %84 = bitcast i32 %83 to float, !dbg !22
  %85 = fadd float %81, %84, !dbg !17
  %86 = bitcast float %85 to i32, !dbg !22
  %87 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %86, i32 4, i32 31), !dbg !22
  %88 = bitcast i32 %87 to float, !dbg !22
  %89 = fadd float %85, %88, !dbg !17
  %90 = bitcast float %89 to i32, !dbg !22
  %91 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %90, i32 2, i32 31), !dbg !22
  %92 = bitcast i32 %91 to float, !dbg !22
  %93 = fadd float %89, %92, !dbg !17
  %94 = bitcast float %93 to i32, !dbg !22
  %95 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %94, i32 1, i32 31), !dbg !22
  %96 = bitcast i32 %95 to float, !dbg !22
  %97 = fadd float %93, %96, !dbg !17
  %98 = icmp eq i32 %4, 0, !dbg !22
  %99 = and i32 %73, 15, !dbg !22
  %100 = zext nneg i32 %99 to i64, !dbg !22
  %101 = getelementptr float, ptr addrspace(3) @global_smem, i64 %100, !dbg !22
  %102 = bitcast float %97 to <1 x i32>, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %101, <1 x i32> %102, i1 %98) #5, !dbg !22
  tail call void @llvm.nvvm.barrier0(), !dbg !22
  %103 = icmp slt i32 %3, 16, !dbg !22
  %104 = sext i32 %3 to i64, !dbg !22
  %105 = getelementptr float, ptr addrspace(3) @global_smem, i64 %104, !dbg !22
  %106 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %105, i1 %103) #5, !dbg !22
  %107 = bitcast i32 %106 to float, !dbg !22
  %108 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %106, i32 8, i32 31), !dbg !22
  %109 = bitcast i32 %108 to float, !dbg !22
  %110 = fadd float %107, %109, !dbg !17
  %111 = bitcast float %110 to i32, !dbg !22
  %112 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %111, i32 4, i32 31), !dbg !22
  %113 = bitcast i32 %112 to float, !dbg !22
  %114 = fadd float %110, %113, !dbg !17
  %115 = bitcast float %114 to i32, !dbg !22
  %116 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %115, i32 2, i32 31), !dbg !22
  %117 = bitcast i32 %116 to float, !dbg !22
  %118 = fadd float %114, %117, !dbg !17
  %119 = bitcast float %118 to i32, !dbg !22
  %120 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %119, i32 1, i32 31), !dbg !22
  %121 = bitcast i32 %120 to float, !dbg !22
  %122 = fadd float %118, %121, !dbg !17
  %123 = and i32 %3, 15, !dbg !22
  %124 = icmp eq i32 %123, 0, !dbg !22
  %125 = and i1 %103, %124, !dbg !22
  %126 = bitcast float %122 to <1 x i32>, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %105, <1 x i32> %126, i1 %125) #5, !dbg !22
  tail call void @llvm.nvvm.barrier0(), !dbg !22
  %127 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !22
  %128 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !23
  %129 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !23
  %130 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !23
  %131 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !23
  %132 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !23
  %133 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !23
  %134 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !23
  %.not.i12 = icmp eq i32 %134, 0, !dbg !23
  %135 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !23
  %.not1.i15 = icmp eq i32 %135, 0, !dbg !23
  br i1 %.not.i12, label %141, label %136, !dbg !23

136:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i15, label %139, label %137, !dbg !23

137:                                              ; preds = %136
  %138 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %127) #5, !dbg !23
  br label %__nv_sqrtf.exit16, !dbg !23

139:                                              ; preds = %136
  %140 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %127) #5, !dbg !23
  br label %__nv_sqrtf.exit16, !dbg !23

141:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i15, label %144, label %142, !dbg !23

142:                                              ; preds = %141
  %143 = tail call float @llvm.nvvm.sqrt.rn.f(float %127) #5, !dbg !23
  br label %__nv_sqrtf.exit16, !dbg !23

144:                                              ; preds = %141
  %145 = tail call float @llvm.nvvm.sqrt.approx.f(float %127) #5, !dbg !23
  br label %__nv_sqrtf.exit16, !dbg !23

__nv_sqrtf.exit16:                                ; preds = %137, %139, %142, %144
  %.0.i14 = phi float [ %138, %137 ], [ %140, %139 ], [ %143, %142 ], [ %145, %144 ], !dbg !23
  %146 = fadd float %.0.i14, 0x3D71979980000000, !dbg !24
  %147 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %8, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !25
  %148 = extractvalue { i32, i32, i32, i32 } %147, 0, !dbg !25
  %149 = extractvalue { i32, i32, i32, i32 } %147, 1, !dbg !25
  %150 = extractvalue { i32, i32, i32, i32 } %147, 2, !dbg !25
  %151 = extractvalue { i32, i32, i32, i32 } %147, 3, !dbg !25
  %152 = bitcast i32 %148 to float, !dbg !25
  %153 = bitcast i32 %149 to float, !dbg !25
  %154 = bitcast i32 %150 to float, !dbg !25
  %155 = bitcast i32 %151 to float, !dbg !25
  %156 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %152, float %146) #5, !dbg !26
  %157 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %153, float %146) #5, !dbg !26
  %158 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %154, float %146) #5, !dbg !26
  %159 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %155, float %146) #5, !dbg !26
  %160 = getelementptr float, ptr addrspace(1) %1, i64 %7, !dbg !27
  %161 = bitcast float %156 to i32, !dbg !28
  %162 = bitcast float %157 to i32, !dbg !28
  %163 = bitcast float %158 to i32, !dbg !28
  %164 = bitcast float %159 to i32, !dbg !28
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %161, i32 %162, i32 %163, i32 %164, ptr addrspace(1) %160, i1 true) #5, !dbg !28
  %165 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %15, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !25
  %166 = extractvalue { i32, i32, i32, i32 } %165, 0, !dbg !25
  %167 = extractvalue { i32, i32, i32, i32 } %165, 1, !dbg !25
  %168 = extractvalue { i32, i32, i32, i32 } %165, 2, !dbg !25
  %169 = extractvalue { i32, i32, i32, i32 } %165, 3, !dbg !25
  %170 = bitcast i32 %166 to float, !dbg !25
  %171 = bitcast i32 %167 to float, !dbg !25
  %172 = bitcast i32 %168 to float, !dbg !25
  %173 = bitcast i32 %169 to float, !dbg !25
  %174 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %170, float %146) #5, !dbg !26
  %175 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %171, float %146) #5, !dbg !26
  %176 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %172, float %146) #5, !dbg !26
  %177 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %173, float %146) #5, !dbg !26
  %178 = getelementptr float, ptr addrspace(1) %1, i64 %14, !dbg !27
  %179 = bitcast float %174 to i32, !dbg !28
  %180 = bitcast float %175 to i32, !dbg !28
  %181 = bitcast float %176 to i32, !dbg !28
  %182 = bitcast float %177 to i32, !dbg !28
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %179, i32 %180, i32 %181, i32 %182, ptr addrspace(1) %178, i1 true) #5, !dbg !28
  %183 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %22, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !25
  %184 = extractvalue { i32, i32, i32, i32 } %183, 0, !dbg !25
  %185 = extractvalue { i32, i32, i32, i32 } %183, 1, !dbg !25
  %186 = extractvalue { i32, i32, i32, i32 } %183, 2, !dbg !25
  %187 = extractvalue { i32, i32, i32, i32 } %183, 3, !dbg !25
  %188 = bitcast i32 %184 to float, !dbg !25
  %189 = bitcast i32 %185 to float, !dbg !25
  %190 = bitcast i32 %186 to float, !dbg !25
  %191 = bitcast i32 %187 to float, !dbg !25
  %192 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %188, float %146) #5, !dbg !26
  %193 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %189, float %146) #5, !dbg !26
  %194 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %190, float %146) #5, !dbg !26
  %195 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %191, float %146) #5, !dbg !26
  %196 = getelementptr float, ptr addrspace(1) %1, i64 %21, !dbg !27
  %197 = bitcast float %192 to i32, !dbg !28
  %198 = bitcast float %193 to i32, !dbg !28
  %199 = bitcast float %194 to i32, !dbg !28
  %200 = bitcast float %195 to i32, !dbg !28
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %197, i32 %198, i32 %199, i32 %200, ptr addrspace(1) %196, i1 true) #5, !dbg !28
  %201 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %29, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !25
  %202 = extractvalue { i32, i32, i32, i32 } %201, 0, !dbg !25
  %203 = extractvalue { i32, i32, i32, i32 } %201, 1, !dbg !25
  %204 = extractvalue { i32, i32, i32, i32 } %201, 2, !dbg !25
  %205 = extractvalue { i32, i32, i32, i32 } %201, 3, !dbg !25
  %206 = bitcast i32 %202 to float, !dbg !25
  %207 = bitcast i32 %203 to float, !dbg !25
  %208 = bitcast i32 %204 to float, !dbg !25
  %209 = bitcast i32 %205 to float, !dbg !25
  %210 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %206, float %146) #5, !dbg !26
  %211 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %207, float %146) #5, !dbg !26
  %212 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %208, float %146) #5, !dbg !26
  %213 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %209, float %146) #5, !dbg !26
  %214 = getelementptr float, ptr addrspace(1) %1, i64 %28, !dbg !27
  %215 = bitcast float %210 to i32, !dbg !28
  %216 = bitcast float %211 to i32, !dbg !28
  %217 = bitcast float %212 to i32, !dbg !28
  %218 = bitcast float %213 to i32, !dbg !28
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %215, i32 %216, i32 %217, i32 %218, ptr addrspace(1) %214, i1 true) #5, !dbg !28
  ret void, !dbg !29
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cf5dkxhn4l5coxxreb46r32yii2ktcgtgegvb7gnflhdmgqr7k32.py", directory: "inductor_cache/f5")
!4 = !{ptr @triton_red_fused_add_div_linalg_vector_norm_1, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_add_div_linalg_vector_norm_1, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_add_div_linalg_vector_norm_1", linkageName: "triton_red_fused_add_div_linalg_vector_norm_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 25, column: 33, scope: !7)
!11 = !DILocation(line: 27, column: 36, scope: !7)
!12 = !DILocation(line: 31, column: 34, scope: !7)
!13 = !DILocation(line: 31, column: 39, scope: !7)
!14 = !DILocation(line: 28, column: 27, scope: !7)
!15 = !DILocation(line: 32, column: 22, scope: !7)
!16 = !DILocation(line: 34, column: 23, scope: !7)
!17 = !DILocation(line: 256, column: 15, scope: !18, inlinedAt: !21)
!18 = distinct !DILexicalBlockFile(scope: !20, file: !19, discriminator: 0)
!19 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!20 = distinct !DILexicalBlockFile(scope: !7, file: !19, discriminator: 0)
!21 = !DILocation(line: 36, column: 25, scope: !7)
!22 = !DILocation(line: 267, column: 36, scope: !20, inlinedAt: !21)
!23 = !DILocation(line: 42, column: 30, scope: !7)
!24 = !DILocation(line: 44, column: 22, scope: !7)
!25 = !DILocation(line: 41, column: 39, scope: !7)
!26 = !DILocation(line: 45, column: 22, scope: !7)
!27 = !DILocation(line: 46, column: 29, scope: !7)
!28 = !DILocation(line: 46, column: 75, scope: !7)
!29 = !DILocation(line: 37, column: 4, scope: !7)
