; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_mul_sub_sum_3(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %8 = shl i32 %7, 3, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = and i32 %9, 7, !dbg !12
  %11 = lshr i32 %9, 3, !dbg !12
  %12 = and i32 %11, 7, !dbg !12
  %13 = or disjoint i32 %8, %10, !dbg !13
  %14 = or disjoint i32 %8, %12, !dbg !13
  %15 = icmp slt i32 %14, 64, !dbg !14
  %16 = icmp slt i32 %13, 64, !dbg !14
  %17 = shl i32 %9, 1, !dbg !15
  %18 = and i32 %17, 14, !dbg !15
  %19 = sdiv i32 %13, 4, !dbg !16
  %20 = srem i32 %19, 4, !dbg !17
  %21 = sdiv i32 %13, 16, !dbg !18
  %.frozen = freeze i32 %14, !dbg !18
  %22 = sdiv i32 %.frozen, 16, !dbg !18
  %23 = srem i32 %14, 4, !dbg !19
  %24 = mul i32 %22, 16, !dbg !20
  %.decomposed = sub i32 %.frozen, %24, !dbg !20
  %25 = shl nuw nsw i32 %12, 2, !dbg !21
  %26 = shl i32 %21, 6, !dbg !22
  %27 = shl i32 %22, 6, !dbg !22
  %28 = add i32 %26, %20, !dbg !23
  %29 = add i32 %28, %25, !dbg !24
  %30 = add i32 %28, 32, !dbg !23
  %31 = add nuw i32 %30, %25, !dbg !24
  %32 = sext i32 %29 to i64, !dbg !25
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !25
  %34 = sext i32 %31 to i64, !dbg !25
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !25
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %33, i1 %16, i32 0, i1 %16) #3, !dbg !26
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %35, i1 %16, i32 0, i1 %16) #3, !dbg !26
  %38 = shl i32 %9, 4, !dbg !26
  %39 = and i32 %38, 112, !dbg !26
  %40 = or disjoint i32 %39, %12, !dbg !26
  %41 = and i32 %17, 126, !dbg !26
  %42 = lshr exact i32 %39, 1, !dbg !26
  %43 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %42, !dbg !26
  %44 = getelementptr inbounds float, ptr addrspace(3) %43, i32 %40, !dbg !26
  %45 = insertelement <1 x i32> poison, i32 %36, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %44, <1 x i32> %45, i1 true) #3, !dbg !26
  %46 = or disjoint i32 %40, 8, !dbg !26
  %47 = getelementptr float, ptr addrspace(3) %43, i32 %46, !dbg !26
  %48 = insertelement <1 x i32> poison, i32 %37, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %47, <1 x i32> %48, i1 true) #3, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %49 = lshr i32 %17, 3, !dbg !26
  %50 = and i32 %49, 14, !dbg !26
  %51 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %50, !dbg !26
  %52 = getelementptr inbounds float, ptr addrspace(3) %51, i32 %41, !dbg !26
  %53 = load float, ptr addrspace(3) %52, align 8, !dbg !26
  %54 = getelementptr inbounds i8, ptr addrspace(3) %52, i32 4, !dbg !26
  %55 = load float, ptr addrspace(3) %54, align 4, !dbg !26
  %56 = shl nsw i32 %23, 4, !dbg !27
  %57 = or disjoint i32 %56, %18, !dbg !28
  %58 = add i32 %57, %27, !dbg !29
  %59 = sext i32 %58 to i64, !dbg !30
  %60 = getelementptr float, ptr addrspace(1) %1, i64 %59, !dbg !30
  %61 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %60, i1 %15, i32 0, i1 %15, i32 0, i1 %15) #3, !dbg !31
  %62 = extractvalue { i32, i32 } %61, 0, !dbg !31
  %63 = extractvalue { i32, i32 } %61, 1, !dbg !31
  %64 = bitcast i32 %62 to float, !dbg !31
  %65 = bitcast i32 %63 to float, !dbg !31
  %66 = sext i32 %.decomposed to i64, !dbg !32
  %67 = getelementptr float, ptr addrspace(1) %2, i64 %66, !dbg !32
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 %15) #3, !dbg !33
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 %15) #3, !dbg !33
  %70 = bitcast i32 %69 to float, !dbg !33
  %71 = fsub float %64, %70, !dbg !34
  %72 = fsub float %65, %70, !dbg !34
  %73 = fmul float %53, %71, !dbg !35
  %74 = fmul float %55, %72, !dbg !35
  %75 = fadd float %73, %74, !dbg !36
  %76 = select i1 %15, float %75, float 0.000000e+00, !dbg !36
  %77 = bitcast float %76 to i32, !dbg !41
  %78 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %77, i32 4, i32 31), !dbg !41
  %79 = bitcast i32 %78 to float, !dbg !41
  %80 = fadd float %76, %79, !dbg !36
  %81 = bitcast float %80 to i32, !dbg !41
  %82 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %81, i32 2, i32 31), !dbg !41
  %83 = bitcast i32 %82 to float, !dbg !41
  %84 = fadd float %80, %83, !dbg !36
  %85 = bitcast float %84 to i32, !dbg !41
  %86 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %85, i32 1, i32 31), !dbg !41
  %87 = bitcast i32 %86 to float, !dbg !41
  %88 = fadd float %84, %87, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %89 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !42
  %90 = bitcast float %88 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %89, <1 x i32> %90, i1 true) #3, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %91 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %10, !dbg !42
  %92 = load i32, ptr addrspace(3) %91, align 4, !dbg !42
  %93 = sext i32 %13 to i64, !dbg !43
  %94 = getelementptr float, ptr addrspace(1) %3, i64 %93, !dbg !43
  %95 = and i32 %9, 56, !dbg !44
  %96 = icmp eq i32 %95, 0, !dbg !44
  %97 = and i1 %96, %16, !dbg !44
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %92, ptr addrspace(1) %94, i1 %97) #3, !dbg !44
  ret void, !dbg !45
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cfifqvbzsrbmpgcwlzybe23pvr2fdzpg4bxh4qxo7lf6c5l3ypse.py", directory: "inductor_cache/fi")
!4 = !{ptr @triton_per_fused_mul_sub_sum_3, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_mul_sub_sum_3, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_mul_sub_sum_3", linkageName: "triton_per_fused_mul_sub_sum_3", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 30, column: 21, scope: !7)
!17 = !DILocation(line: 30, column: 26, scope: !7)
!18 = !DILocation(line: 31, column: 19, scope: !7)
!19 = !DILocation(line: 32, column: 19, scope: !7)
!20 = !DILocation(line: 33, column: 19, scope: !7)
!21 = !DILocation(line: 35, column: 37, scope: !7)
!22 = !DILocation(line: 35, column: 45, scope: !7)
!23 = !DILocation(line: 35, column: 35, scope: !7)
!24 = !DILocation(line: 35, column: 42, scope: !7)
!25 = !DILocation(line: 35, column: 30, scope: !7)
!26 = !DILocation(line: 35, column: 50, scope: !7)
!27 = !DILocation(line: 36, column: 38, scope: !7)
!28 = !DILocation(line: 36, column: 35, scope: !7)
!29 = !DILocation(line: 36, column: 43, scope: !7)
!30 = !DILocation(line: 36, column: 30, scope: !7)
!31 = !DILocation(line: 36, column: 51, scope: !7)
!32 = !DILocation(line: 37, column: 30, scope: !7)
!33 = !DILocation(line: 37, column: 35, scope: !7)
!34 = !DILocation(line: 38, column: 18, scope: !7)
!35 = !DILocation(line: 39, column: 18, scope: !7)
!36 = !DILocation(line: 256, column: 15, scope: !37, inlinedAt: !40)
!37 = distinct !DILexicalBlockFile(scope: !39, file: !38, discriminator: 0)
!38 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!39 = distinct !DILexicalBlockFile(scope: !7, file: !38, discriminator: 0)
!40 = !DILocation(line: 42, column: 24, scope: !7)
!41 = !DILocation(line: 267, column: 36, scope: !39, inlinedAt: !40)
!42 = !DILocation(line: 42, column: 27, scope: !7)
!43 = !DILocation(line: 43, column: 25, scope: !7)
!44 = !DILocation(line: 43, column: 36, scope: !7)
!45 = !DILocation(line: 43, column: 4, scope: !7)
