; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_per_fused__softmax_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 5, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 4, !dbg !12
  %10 = and i32 %9, 7, !dbg !12
  %11 = or disjoint i32 %7, %10, !dbg !13
  %12 = or disjoint i32 %11, 8, !dbg !13
  %13 = or disjoint i32 %11, 16, !dbg !13
  %14 = or disjoint i32 %11, 24, !dbg !13
  %15 = icmp slt i32 %11, 576, !dbg !14
  %16 = icmp slt i32 %12, 576, !dbg !14
  %17 = icmp slt i32 %13, 576, !dbg !14
  %18 = icmp slt i32 %14, 576, !dbg !14
  %19 = and i32 %8, 15, !dbg !15
  %20 = icmp samesign ult i32 %19, 9, !dbg !16
  %21 = srem i32 %11, 9, !dbg !17
  %22 = srem i32 %12, 9, !dbg !17
  %23 = srem i32 %13, 9, !dbg !17
  %24 = srem i32 %14, 9, !dbg !17
  %.frozen = freeze i32 %11, !dbg !18
  %25 = sdiv i32 %.frozen, 144, !dbg !18
  %.frozen1 = freeze i32 %12, !dbg !18
  %26 = sdiv i32 %.frozen1, 144, !dbg !18
  %.frozen3 = freeze i32 %13, !dbg !18
  %27 = sdiv i32 %.frozen3, 144, !dbg !18
  %.frozen5 = freeze i32 %14, !dbg !18
  %28 = sdiv i32 %.frozen5, 144, !dbg !18
  %29 = mul i32 %25, 144, !dbg !19
  %.decomposed = sub i32 %.frozen, %29, !dbg !19
  %30 = mul i32 %26, 144, !dbg !19
  %.decomposed2 = sub i32 %.frozen1, %30, !dbg !19
  %31 = mul i32 %27, 144, !dbg !19
  %.decomposed4 = sub i32 %.frozen3, %31, !dbg !19
  %32 = mul i32 %28, 144, !dbg !19
  %.decomposed6 = sub i32 %.frozen5, %32, !dbg !19
  %33 = mul i32 %11, 9, !dbg !20
  %34 = mul i32 %12, 9, !dbg !20
  %35 = mul i32 %13, 9, !dbg !20
  %36 = mul i32 %14, 9, !dbg !20
  %37 = add i32 %33, %19, !dbg !21
  %38 = add i32 %34, %19, !dbg !21
  %39 = add i32 %35, %19, !dbg !21
  %40 = add i32 %36, %19, !dbg !21
  %41 = sext i32 %37 to i64, !dbg !22
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !22
  %43 = sext i32 %38 to i64, !dbg !22
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !22
  %45 = sext i32 %39 to i64, !dbg !22
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !22
  %47 = sext i32 %40 to i64, !dbg !22
  %48 = getelementptr float, ptr addrspace(1) %0, i64 %47, !dbg !22
  %49 = and i1 %20, %15, !dbg !23
  %50 = and i1 %20, %16, !dbg !23
  %51 = and i1 %20, %17, !dbg !23
  %52 = and i1 %20, %18, !dbg !23
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %42, i1 %49, i32 0, i1 %49) #2, !dbg !24
  %54 = bitcast i32 %53 to float, !dbg !24
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %44, i1 %50, i32 0, i1 %50) #2, !dbg !24
  %56 = bitcast i32 %55 to float, !dbg !24
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %46, i1 %51, i32 0, i1 %51) #2, !dbg !24
  %58 = bitcast i32 %57 to float, !dbg !24
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %48, i1 %52, i32 0, i1 %52) #2, !dbg !24
  %60 = bitcast i32 %59 to float, !dbg !24
  %61 = mul nsw i32 %21, 9, !dbg !25
  %62 = mul nsw i32 %22, 9, !dbg !25
  %63 = mul nsw i32 %23, 9, !dbg !25
  %64 = mul nsw i32 %24, 9, !dbg !25
  %65 = add nsw i32 %61, %19, !dbg !26
  %66 = add nsw i32 %62, %19, !dbg !26
  %67 = add nsw i32 %63, %19, !dbg !26
  %68 = add nsw i32 %64, %19, !dbg !26
  %69 = sext i32 %65 to i64, !dbg !27
  %70 = getelementptr float, ptr addrspace(1) %1, i64 %69, !dbg !27
  %71 = sext i32 %66 to i64, !dbg !27
  %72 = getelementptr float, ptr addrspace(1) %1, i64 %71, !dbg !27
  %73 = sext i32 %67 to i64, !dbg !27
  %74 = getelementptr float, ptr addrspace(1) %1, i64 %73, !dbg !27
  %75 = sext i32 %68 to i64, !dbg !27
  %76 = getelementptr float, ptr addrspace(1) %1, i64 %75, !dbg !27
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %70, i1 %49, i32 0, i1 %49) #2, !dbg !28
  %78 = bitcast i32 %77 to float, !dbg !28
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %72, i1 %50, i32 0, i1 %50) #2, !dbg !28
  %80 = bitcast i32 %79 to float, !dbg !28
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %74, i1 %51, i32 0, i1 %51) #2, !dbg !28
  %82 = bitcast i32 %81 to float, !dbg !28
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %76, i1 %52, i32 0, i1 %52) #2, !dbg !28
  %84 = bitcast i32 %83 to float, !dbg !28
  %85 = fadd float %54, %78, !dbg !29
  %86 = fadd float %56, %80, !dbg !29
  %87 = fadd float %58, %82, !dbg !29
  %88 = fadd float %60, %84, !dbg !29
  %89 = select i1 %49, float %85, float 0xFFF0000000000000, !dbg !30
  %90 = select i1 %50, float %86, float 0xFFF0000000000000, !dbg !30
  %91 = select i1 %51, float %87, float 0xFFF0000000000000, !dbg !30
  %92 = select i1 %52, float %88, float 0xFFF0000000000000, !dbg !30
  %93 = bitcast float %89 to i32, !dbg !31
  %94 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %93, i32 8, i32 31), !dbg !31
  %95 = bitcast i32 %94 to float, !dbg !31
  %96 = fcmp ogt float %89, %95, !dbg !35
  %97 = fcmp uno float %89, 0.000000e+00, !dbg !37
  %98 = or i1 %97, %96, !dbg !38
  %99 = select i1 %98, float %89, float %95, !dbg !39
  %100 = bitcast float %99 to i32, !dbg !31
  %101 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %100, i32 4, i32 31), !dbg !31
  %102 = bitcast i32 %101 to float, !dbg !31
  %103 = fcmp ogt float %99, %102, !dbg !35
  %104 = fcmp uno float %99, 0.000000e+00, !dbg !37
  %105 = or i1 %103, %104, !dbg !38
  %106 = select i1 %105, float %99, float %102, !dbg !39
  %107 = bitcast float %106 to i32, !dbg !31
  %108 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %107, i32 2, i32 31), !dbg !31
  %109 = bitcast i32 %108 to float, !dbg !31
  %110 = fcmp ogt float %106, %109, !dbg !35
  %111 = fcmp uno float %106, 0.000000e+00, !dbg !37
  %112 = or i1 %110, %111, !dbg !38
  %113 = select i1 %112, float %106, float %109, !dbg !39
  %114 = bitcast float %113 to i32, !dbg !31
  %115 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %114, i32 1, i32 31), !dbg !31
  %116 = bitcast i32 %115 to float, !dbg !31
  %117 = fcmp ogt float %113, %116, !dbg !35
  %118 = fcmp uno float %113, 0.000000e+00, !dbg !37
  %119 = or i1 %117, %118, !dbg !38
  %120 = select i1 %119, float %113, float %116, !dbg !39
  %121 = bitcast float %90 to i32, !dbg !31
  %122 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %121, i32 8, i32 31), !dbg !31
  %123 = bitcast i32 %122 to float, !dbg !31
  %124 = fcmp ogt float %90, %123, !dbg !35
  %125 = fcmp uno float %90, 0.000000e+00, !dbg !37
  %126 = or i1 %125, %124, !dbg !38
  %127 = select i1 %126, float %90, float %123, !dbg !39
  %128 = bitcast float %127 to i32, !dbg !31
  %129 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %128, i32 4, i32 31), !dbg !31
  %130 = bitcast i32 %129 to float, !dbg !31
  %131 = fcmp ogt float %127, %130, !dbg !35
  %132 = fcmp uno float %127, 0.000000e+00, !dbg !37
  %133 = or i1 %131, %132, !dbg !38
  %134 = select i1 %133, float %127, float %130, !dbg !39
  %135 = bitcast float %134 to i32, !dbg !31
  %136 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %135, i32 2, i32 31), !dbg !31
  %137 = bitcast i32 %136 to float, !dbg !31
  %138 = fcmp ogt float %134, %137, !dbg !35
  %139 = fcmp uno float %134, 0.000000e+00, !dbg !37
  %140 = or i1 %138, %139, !dbg !38
  %141 = select i1 %140, float %134, float %137, !dbg !39
  %142 = bitcast float %141 to i32, !dbg !31
  %143 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %142, i32 1, i32 31), !dbg !31
  %144 = bitcast i32 %143 to float, !dbg !31
  %145 = fcmp ogt float %141, %144, !dbg !35
  %146 = fcmp uno float %141, 0.000000e+00, !dbg !37
  %147 = or i1 %145, %146, !dbg !38
  %148 = select i1 %147, float %141, float %144, !dbg !39
  %149 = bitcast float %91 to i32, !dbg !31
  %150 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %149, i32 8, i32 31), !dbg !31
  %151 = bitcast i32 %150 to float, !dbg !31
  %152 = fcmp ogt float %91, %151, !dbg !35
  %153 = fcmp uno float %91, 0.000000e+00, !dbg !37
  %154 = or i1 %153, %152, !dbg !38
  %155 = select i1 %154, float %91, float %151, !dbg !39
  %156 = bitcast float %155 to i32, !dbg !31
  %157 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %156, i32 4, i32 31), !dbg !31
  %158 = bitcast i32 %157 to float, !dbg !31
  %159 = fcmp ogt float %155, %158, !dbg !35
  %160 = fcmp uno float %155, 0.000000e+00, !dbg !37
  %161 = or i1 %159, %160, !dbg !38
  %162 = select i1 %161, float %155, float %158, !dbg !39
  %163 = bitcast float %162 to i32, !dbg !31
  %164 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %163, i32 2, i32 31), !dbg !31
  %165 = bitcast i32 %164 to float, !dbg !31
  %166 = fcmp ogt float %162, %165, !dbg !35
  %167 = fcmp uno float %162, 0.000000e+00, !dbg !37
  %168 = or i1 %166, %167, !dbg !38
  %169 = select i1 %168, float %162, float %165, !dbg !39
  %170 = bitcast float %169 to i32, !dbg !31
  %171 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %170, i32 1, i32 31), !dbg !31
  %172 = bitcast i32 %171 to float, !dbg !31
  %173 = fcmp ogt float %169, %172, !dbg !35
  %174 = fcmp uno float %169, 0.000000e+00, !dbg !37
  %175 = or i1 %173, %174, !dbg !38
  %176 = select i1 %175, float %169, float %172, !dbg !39
  %177 = bitcast float %92 to i32, !dbg !31
  %178 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %177, i32 8, i32 31), !dbg !31
  %179 = bitcast i32 %178 to float, !dbg !31
  %180 = fcmp ogt float %92, %179, !dbg !35
  %181 = fcmp uno float %92, 0.000000e+00, !dbg !37
  %182 = or i1 %181, %180, !dbg !38
  %183 = select i1 %182, float %92, float %179, !dbg !39
  %184 = bitcast float %183 to i32, !dbg !31
  %185 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %184, i32 4, i32 31), !dbg !31
  %186 = bitcast i32 %185 to float, !dbg !31
  %187 = fcmp ogt float %183, %186, !dbg !35
  %188 = fcmp uno float %183, 0.000000e+00, !dbg !37
  %189 = or i1 %187, %188, !dbg !38
  %190 = select i1 %189, float %183, float %186, !dbg !39
  %191 = bitcast float %190 to i32, !dbg !31
  %192 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %191, i32 2, i32 31), !dbg !31
  %193 = bitcast i32 %192 to float, !dbg !31
  %194 = fcmp ogt float %190, %193, !dbg !35
  %195 = fcmp uno float %190, 0.000000e+00, !dbg !37
  %196 = or i1 %194, %195, !dbg !38
  %197 = select i1 %196, float %190, float %193, !dbg !39
  %198 = bitcast float %197 to i32, !dbg !31
  %199 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %198, i32 1, i32 31), !dbg !31
  %200 = bitcast i32 %199 to float, !dbg !31
  %201 = fcmp ogt float %197, %200, !dbg !35
  %202 = fcmp uno float %197, 0.000000e+00, !dbg !37
  %203 = or i1 %201, %202, !dbg !38
  %204 = select i1 %203, float %197, float %200, !dbg !39
  %205 = fsub float %85, %120, !dbg !40
  %206 = fsub float %86, %148, !dbg !40
  %207 = fsub float %87, %176, !dbg !40
  %208 = fsub float %88, %204, !dbg !40
  %209 = fmul float %205, 5.000000e-01, !dbg !41
  %210 = fmul float %206, 5.000000e-01, !dbg !41
  %211 = fmul float %207, 5.000000e-01, !dbg !41
  %212 = fmul float %208, 5.000000e-01, !dbg !41
  %213 = fmul float %209, 0x3FF7154760000000, !dbg !42
  %214 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %213) #2, !dbg !42
  %215 = fmul float %210, 0x3FF7154760000000, !dbg !42
  %216 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %215) #2, !dbg !42
  %217 = fmul float %211, 0x3FF7154760000000, !dbg !42
  %218 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %217) #2, !dbg !42
  %219 = fmul float %212, 0x3FF7154760000000, !dbg !42
  %220 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %219) #2, !dbg !42
  %221 = select i1 %49, float %214, float 0.000000e+00, !dbg !43
  %222 = select i1 %50, float %216, float 0.000000e+00, !dbg !43
  %223 = select i1 %51, float %218, float 0.000000e+00, !dbg !43
  %224 = select i1 %52, float %220, float 0.000000e+00, !dbg !43
  %225 = bitcast float %221 to i32, !dbg !44
  %226 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %225, i32 8, i32 31), !dbg !44
  %227 = bitcast i32 %226 to float, !dbg !44
  %228 = fadd float %221, %227, !dbg !48
  %229 = bitcast float %228 to i32, !dbg !44
  %230 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %229, i32 4, i32 31), !dbg !44
  %231 = bitcast i32 %230 to float, !dbg !44
  %232 = fadd float %228, %231, !dbg !48
  %233 = bitcast float %232 to i32, !dbg !44
  %234 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %233, i32 2, i32 31), !dbg !44
  %235 = bitcast i32 %234 to float, !dbg !44
  %236 = fadd float %232, %235, !dbg !48
  %237 = bitcast float %236 to i32, !dbg !44
  %238 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %237, i32 1, i32 31), !dbg !44
  %239 = bitcast i32 %238 to float, !dbg !44
  %240 = fadd float %236, %239, !dbg !48
  %241 = bitcast float %222 to i32, !dbg !44
  %242 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %241, i32 8, i32 31), !dbg !44
  %243 = bitcast i32 %242 to float, !dbg !44
  %244 = fadd float %222, %243, !dbg !48
  %245 = bitcast float %244 to i32, !dbg !44
  %246 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %245, i32 4, i32 31), !dbg !44
  %247 = bitcast i32 %246 to float, !dbg !44
  %248 = fadd float %244, %247, !dbg !48
  %249 = bitcast float %248 to i32, !dbg !44
  %250 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %249, i32 2, i32 31), !dbg !44
  %251 = bitcast i32 %250 to float, !dbg !44
  %252 = fadd float %248, %251, !dbg !48
  %253 = bitcast float %252 to i32, !dbg !44
  %254 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %253, i32 1, i32 31), !dbg !44
  %255 = bitcast i32 %254 to float, !dbg !44
  %256 = fadd float %252, %255, !dbg !48
  %257 = bitcast float %223 to i32, !dbg !44
  %258 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %257, i32 8, i32 31), !dbg !44
  %259 = bitcast i32 %258 to float, !dbg !44
  %260 = fadd float %223, %259, !dbg !48
  %261 = bitcast float %260 to i32, !dbg !44
  %262 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %261, i32 4, i32 31), !dbg !44
  %263 = bitcast i32 %262 to float, !dbg !44
  %264 = fadd float %260, %263, !dbg !48
  %265 = bitcast float %264 to i32, !dbg !44
  %266 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %265, i32 2, i32 31), !dbg !44
  %267 = bitcast i32 %266 to float, !dbg !44
  %268 = fadd float %264, %267, !dbg !48
  %269 = bitcast float %268 to i32, !dbg !44
  %270 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %269, i32 1, i32 31), !dbg !44
  %271 = bitcast i32 %270 to float, !dbg !44
  %272 = fadd float %268, %271, !dbg !48
  %273 = bitcast float %224 to i32, !dbg !44
  %274 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %273, i32 8, i32 31), !dbg !44
  %275 = bitcast i32 %274 to float, !dbg !44
  %276 = fadd float %224, %275, !dbg !48
  %277 = bitcast float %276 to i32, !dbg !44
  %278 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %277, i32 4, i32 31), !dbg !44
  %279 = bitcast i32 %278 to float, !dbg !44
  %280 = fadd float %276, %279, !dbg !48
  %281 = bitcast float %280 to i32, !dbg !44
  %282 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %281, i32 2, i32 31), !dbg !44
  %283 = bitcast i32 %282 to float, !dbg !44
  %284 = fadd float %280, %283, !dbg !48
  %285 = bitcast float %284 to i32, !dbg !44
  %286 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %285, i32 1, i32 31), !dbg !44
  %287 = bitcast i32 %286 to float, !dbg !44
  %288 = fadd float %284, %287, !dbg !48
  %289 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %214, float %240) #2, !dbg !50
  %290 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %216, float %256) #2, !dbg !50
  %291 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %218, float %272) #2, !dbg !50
  %292 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %220, float %288) #2, !dbg !50
  %293 = mul nsw i32 %.decomposed, 9, !dbg !51
  %294 = mul nsw i32 %.decomposed2, 9, !dbg !51
  %295 = mul nsw i32 %.decomposed4, 9, !dbg !51
  %296 = mul nsw i32 %.decomposed6, 9, !dbg !51
  %297 = add nsw i32 %293, %19, !dbg !52
  %298 = add nsw i32 %294, %19, !dbg !52
  %299 = add nsw i32 %295, %19, !dbg !52
  %300 = add nsw i32 %296, %19, !dbg !52
  %301 = mul i32 %25, 1312, !dbg !53
  %302 = mul i32 %26, 1312, !dbg !53
  %303 = mul i32 %27, 1312, !dbg !53
  %304 = mul i32 %28, 1312, !dbg !53
  %305 = add i32 %297, %301, !dbg !54
  %306 = add i32 %298, %302, !dbg !54
  %307 = add i32 %299, %303, !dbg !54
  %308 = add i32 %300, %304, !dbg !54
  %309 = sext i32 %305 to i64, !dbg !55
  %310 = getelementptr float, ptr addrspace(1) %2, i64 %309, !dbg !55
  %311 = sext i32 %306 to i64, !dbg !55
  %312 = getelementptr float, ptr addrspace(1) %2, i64 %311, !dbg !55
  %313 = sext i32 %307 to i64, !dbg !55
  %314 = getelementptr float, ptr addrspace(1) %2, i64 %313, !dbg !55
  %315 = sext i32 %308 to i64, !dbg !55
  %316 = getelementptr float, ptr addrspace(1) %2, i64 %315, !dbg !55
  %317 = bitcast float %289 to i32, !dbg !56
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %317, ptr addrspace(1) %310, i1 %49) #2, !dbg !56
  %318 = bitcast float %290 to i32, !dbg !56
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %318, ptr addrspace(1) %312, i1 %50) #2, !dbg !56
  %319 = bitcast float %291 to i32, !dbg !56
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %319, ptr addrspace(1) %314, i1 %51) #2, !dbg !56
  %320 = bitcast float %292 to i32, !dbg !56
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %320, ptr addrspace(1) %316, i1 %52) #2, !dbg !56
  ret void, !dbg !57
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cm24beoylaw6rnmk6nwat23o2tqr6wa5mmujgmz5kbjozqh72vfa.py", directory: "inductor_cache/m2")
!4 = !{ptr @triton_per_fused__softmax_2, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__softmax_2, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__softmax_2", linkageName: "triton_per_fused__softmax_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 28, column: 21, scope: !7)
!17 = !DILocation(line: 31, column: 19, scope: !7)
!18 = !DILocation(line: 32, column: 19, scope: !7)
!19 = !DILocation(line: 33, column: 19, scope: !7)
!20 = !DILocation(line: 34, column: 37, scope: !7)
!21 = !DILocation(line: 34, column: 35, scope: !7)
!22 = !DILocation(line: 34, column: 30, scope: !7)
!23 = !DILocation(line: 34, column: 50, scope: !7)
!24 = !DILocation(line: 34, column: 42, scope: !7)
!25 = !DILocation(line: 35, column: 37, scope: !7)
!26 = !DILocation(line: 35, column: 35, scope: !7)
!27 = !DILocation(line: 35, column: 30, scope: !7)
!28 = !DILocation(line: 35, column: 42, scope: !7)
!29 = !DILocation(line: 36, column: 18, scope: !7)
!30 = !DILocation(line: 40, column: 41, scope: !7)
!31 = !DILocation(line: 131, column: 29, scope: !32, inlinedAt: !34)
!32 = distinct !DILexicalBlockFile(scope: !7, file: !33, discriminator: 0)
!33 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!34 = !DILocation(line: 41, column: 37, scope: !7)
!35 = !DILocation(line: 118, column: 15, scope: !36, inlinedAt: !34)
!36 = distinct !DILexicalBlockFile(scope: !32, file: !33, discriminator: 0)
!37 = !DILocation(line: 120, column: 21, scope: !36, inlinedAt: !34)
!38 = !DILocation(line: 120, column: 16, scope: !36, inlinedAt: !34)
!39 = !DILocation(line: 121, column: 29, scope: !36, inlinedAt: !34)
!40 = !DILocation(line: 42, column: 18, scope: !7)
!41 = !DILocation(line: 44, column: 19, scope: !7)
!42 = !DILocation(line: 45, column: 24, scope: !7)
!43 = !DILocation(line: 47, column: 43, scope: !7)
!44 = !DILocation(line: 267, column: 36, scope: !45, inlinedAt: !47)
!45 = distinct !DILexicalBlockFile(scope: !7, file: !46, discriminator: 0)
!46 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!47 = !DILocation(line: 48, column: 26, scope: !7)
!48 = !DILocation(line: 256, column: 15, scope: !49, inlinedAt: !47)
!49 = distinct !DILexicalBlockFile(scope: !45, file: !46, discriminator: 0)
!50 = !DILocation(line: 49, column: 20, scope: !7)
!51 = !DILocation(line: 50, column: 32, scope: !7)
!52 = !DILocation(line: 50, column: 30, scope: !7)
!53 = !DILocation(line: 50, column: 42, scope: !7)
!54 = !DILocation(line: 50, column: 37, scope: !7)
!55 = !DILocation(line: 50, column: 25, scope: !7)
!56 = !DILocation(line: 50, column: 54, scope: !7)
!57 = !DILocation(line: 50, column: 4, scope: !7)
