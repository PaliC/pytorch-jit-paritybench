; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_max_pool2d_with_indices_17(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 8, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = and i32 %8, 127, !dbg !12
  %10 = or disjoint i32 %9, 128, !dbg !12
  %11 = shl i32 %8, 1, !dbg !12
  %12 = and i32 %11, 254, !dbg !12
  %13 = or disjoint i32 %7, %9, !dbg !13
  %14 = or disjoint i32 %7, %10, !dbg !13
  %15 = or disjoint i32 %7, %12, !dbg !13
  %16 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %17 = icmp slt i32 %16, 16, !dbg !15
  %.frozen = freeze i32 %16, !dbg !16
  %18 = sdiv i32 %.frozen, 4, !dbg !16
  %19 = mul i32 %18, 4, !dbg !17
  %.decomposed = sub i32 %.frozen, %19, !dbg !17
  %.frozen3 = freeze i32 %15, !dbg !18
  %20 = sdiv i32 %.frozen3, 512, !dbg !18
  %21 = mul i32 %20, 512, !dbg !19
  %.decomposed4 = sub i32 %.frozen3, %21, !dbg !19
  %22 = shl nsw i32 %.decomposed, 1, !dbg !20
  %23 = shl i32 %18, 4, !dbg !21
  %24 = add i32 %22, %23, !dbg !22
  %25 = shl i32 %13, 6, !dbg !23
  %26 = shl i32 %14, 6, !dbg !23
  %27 = add i32 %24, %25, !dbg !24
  %28 = add i32 %24, %26, !dbg !24
  %29 = sext i32 %27 to i64, !dbg !25
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !25
  %31 = sext i32 %28 to i64, !dbg !25
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !25
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 %17) #2, !dbg !26
  %34 = bitcast i32 %33 to float, !dbg !26
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 %17) #2, !dbg !26
  %36 = bitcast i32 %35 to float, !dbg !26
  %37 = or disjoint i32 %22, 1, !dbg !27
  %38 = add i32 %37, %23, !dbg !28
  %39 = add i32 %38, %25, !dbg !29
  %40 = add i32 %38, %26, !dbg !29
  %41 = sext i32 %39 to i64, !dbg !30
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !30
  %43 = sext i32 %40 to i64, !dbg !30
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !30
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 %17) #2, !dbg !31
  %46 = bitcast i32 %45 to float, !dbg !31
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 %17) #2, !dbg !31
  %48 = bitcast i32 %47 to float, !dbg !31
  %49 = add i32 %24, 8, !dbg !32
  %50 = add i32 %49, %25, !dbg !33
  %51 = add i32 %49, %26, !dbg !33
  %52 = sext i32 %50 to i64, !dbg !34
  %53 = getelementptr float, ptr addrspace(1) %0, i64 %52, !dbg !34
  %54 = sext i32 %51 to i64, !dbg !34
  %55 = getelementptr float, ptr addrspace(1) %0, i64 %54, !dbg !34
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 %17) #2, !dbg !35
  %57 = bitcast i32 %56 to float, !dbg !35
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 %17) #2, !dbg !35
  %59 = bitcast i32 %58 to float, !dbg !35
  %60 = add i32 %24, 9, !dbg !36
  %61 = add i32 %60, %25, !dbg !37
  %62 = add i32 %60, %26, !dbg !37
  %63 = sext i32 %61 to i64, !dbg !38
  %64 = getelementptr float, ptr addrspace(1) %0, i64 %63, !dbg !38
  %65 = sext i32 %62 to i64, !dbg !38
  %66 = getelementptr float, ptr addrspace(1) %0, i64 %65, !dbg !38
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 %17) #2, !dbg !39
  %68 = bitcast i32 %67 to float, !dbg !39
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 %17) #2, !dbg !39
  %70 = bitcast i32 %69 to float, !dbg !39
  %71 = fcmp ogt float %46, %34, !dbg !40
  %72 = fcmp ogt float %48, %36, !dbg !40
  %73 = fcmp uno float %46, 0.000000e+00, !dbg !44
  %74 = fcmp uno float %48, 0.000000e+00, !dbg !44
  %75 = or i1 %71, %73, !dbg !45
  %76 = or i1 %72, %74, !dbg !45
  %77 = select i1 %75, float %46, float %34, !dbg !46
  %78 = select i1 %76, float %48, float %36, !dbg !46
  %79 = fcmp olt float %77, %57, !dbg !47
  %80 = fcmp olt float %78, %59, !dbg !47
  %81 = fcmp uno float %57, 0.000000e+00, !dbg !49
  %82 = fcmp uno float %59, 0.000000e+00, !dbg !49
  %83 = or i1 %81, %79, !dbg !50
  %84 = or i1 %82, %80, !dbg !50
  %85 = select i1 %83, float %57, float %77, !dbg !51
  %86 = select i1 %84, float %59, float %78, !dbg !51
  %87 = fcmp olt float %85, %68, !dbg !52
  %88 = fcmp olt float %86, %70, !dbg !52
  %89 = fcmp uno float %68, 0.000000e+00, !dbg !54
  %90 = fcmp uno float %70, 0.000000e+00, !dbg !54
  %91 = or i1 %89, %87, !dbg !55
  %92 = or i1 %90, %88, !dbg !55
  %93 = zext i1 %71 to i8, !dbg !56
  %94 = zext i1 %72 to i8, !dbg !56
  %95 = select i1 %79, i8 2, i8 %93, !dbg !57
  %96 = select i1 %80, i8 2, i8 %94, !dbg !57
  %97 = select i1 %87, i8 3, i8 %95, !dbg !58
  %98 = select i1 %88, i8 3, i8 %96, !dbg !58
  %99 = shl i32 %16, 9, !dbg !59
  %100 = add i32 %.decomposed4, %99, !dbg !60
  %101 = shl i32 %20, 13, !dbg !61
  %102 = add i32 %100, %101, !dbg !62
  %103 = sext i32 %102 to i64, !dbg !63
  %104 = getelementptr float, ptr addrspace(1) %1, i64 %103, !dbg !63
  %105 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %9, !dbg !64
  %106 = bitcast float %85 to i32, !dbg !64
  %107 = select i1 %91, i32 %67, i32 %106, !dbg !65
  %108 = insertelement <1 x i32> poison, i32 %107, i64 0, !dbg !64
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %105, <1 x i32> %108, i1 true) #2, !dbg !64
  %109 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %10, !dbg !64
  %110 = bitcast float %86 to i32, !dbg !64
  %111 = select i1 %92, i32 %69, i32 %110, !dbg !65
  %112 = insertelement <1 x i32> poison, i32 %111, i64 0, !dbg !64
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %109, <1 x i32> %112, i1 true) #2, !dbg !64
  tail call void @llvm.nvvm.barrier0(), !dbg !64
  %113 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !64
  %.extract = load i32, ptr addrspace(3) %113, align 8, !dbg !64
  %114 = getelementptr inbounds i8, ptr addrspace(3) %113, i32 4, !dbg !64
  %.extract2 = load i32, ptr addrspace(3) %114, align 4, !dbg !64
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract, i32 %.extract2, ptr addrspace(1) %104, i1 %17) #2, !dbg !64
  %115 = getelementptr i8, ptr addrspace(1) %2, i64 %103, !dbg !66
  tail call void @llvm.nvvm.barrier0(), !dbg !67
  %116 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %9, !dbg !67
  %117 = insertelement <1 x i8> poison, i8 %97, i64 0, !dbg !67
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %116, <1 x i8> %117, i1 true) #2, !dbg !67
  %118 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %10, !dbg !67
  %119 = insertelement <1 x i8> poison, i8 %98, i64 0, !dbg !67
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %118, <1 x i8> %119, i1 true) #2, !dbg !67
  tail call void @llvm.nvvm.barrier0(), !dbg !67
  %120 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %12, !dbg !67
  %121 = load i16, ptr addrspace(3) %120, align 2, !dbg !67
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %121, ptr addrspace(1) %115, i1 %17) #2, !dbg !67
  ret void, !dbg !68
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c2zp6b5uehzfukfphpkqbkiisfjayny25ci6ttiymnk342uacxf4.py", directory: "inductor_cache/2z")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_17, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_17, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_17", linkageName: "triton_poi_fused_max_pool2d_with_indices_17", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 27, column: 21, scope: !7)
!16 = !DILocation(line: 29, column: 19, scope: !7)
!17 = !DILocation(line: 28, column: 19, scope: !7)
!18 = !DILocation(line: 33, column: 19, scope: !7)
!19 = !DILocation(line: 32, column: 19, scope: !7)
!20 = !DILocation(line: 34, column: 32, scope: !7)
!21 = !DILocation(line: 34, column: 40, scope: !7)
!22 = !DILocation(line: 34, column: 37, scope: !7)
!23 = !DILocation(line: 34, column: 48, scope: !7)
!24 = !DILocation(line: 34, column: 45, scope: !7)
!25 = !DILocation(line: 34, column: 30, scope: !7)
!26 = !DILocation(line: 34, column: 53, scope: !7)
!27 = !DILocation(line: 35, column: 34, scope: !7)
!28 = !DILocation(line: 35, column: 41, scope: !7)
!29 = !DILocation(line: 35, column: 49, scope: !7)
!30 = !DILocation(line: 35, column: 30, scope: !7)
!31 = !DILocation(line: 35, column: 57, scope: !7)
!32 = !DILocation(line: 36, column: 41, scope: !7)
!33 = !DILocation(line: 36, column: 49, scope: !7)
!34 = !DILocation(line: 36, column: 30, scope: !7)
!35 = !DILocation(line: 36, column: 57, scope: !7)
!36 = !DILocation(line: 37, column: 41, scope: !7)
!37 = !DILocation(line: 37, column: 49, scope: !7)
!38 = !DILocation(line: 37, column: 30, scope: !7)
!39 = !DILocation(line: 37, column: 57, scope: !7)
!40 = !DILocation(line: 118, column: 15, scope: !41, inlinedAt: !43)
!41 = distinct !DILexicalBlockFile(scope: !7, file: !42, discriminator: 0)
!42 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!43 = !DILocation(line: 38, column: 40, scope: !7)
!44 = !DILocation(line: 120, column: 21, scope: !41, inlinedAt: !43)
!45 = !DILocation(line: 120, column: 16, scope: !41, inlinedAt: !43)
!46 = !DILocation(line: 121, column: 29, scope: !41, inlinedAt: !43)
!47 = !DILocation(line: 118, column: 15, scope: !41, inlinedAt: !48)
!48 = !DILocation(line: 39, column: 40, scope: !7)
!49 = !DILocation(line: 120, column: 21, scope: !41, inlinedAt: !48)
!50 = !DILocation(line: 120, column: 16, scope: !41, inlinedAt: !48)
!51 = !DILocation(line: 121, column: 29, scope: !41, inlinedAt: !48)
!52 = !DILocation(line: 118, column: 15, scope: !41, inlinedAt: !53)
!53 = !DILocation(line: 40, column: 40, scope: !7)
!54 = !DILocation(line: 120, column: 21, scope: !41, inlinedAt: !53)
!55 = !DILocation(line: 120, column: 16, scope: !41, inlinedAt: !53)
!56 = !DILocation(line: 44, column: 33, scope: !7)
!57 = !DILocation(line: 47, column: 35, scope: !7)
!58 = !DILocation(line: 50, column: 35, scope: !7)
!59 = !DILocation(line: 51, column: 34, scope: !7)
!60 = !DILocation(line: 51, column: 30, scope: !7)
!61 = !DILocation(line: 51, column: 44, scope: !7)
!62 = !DILocation(line: 51, column: 39, scope: !7)
!63 = !DILocation(line: 51, column: 25, scope: !7)
!64 = !DILocation(line: 51, column: 55, scope: !7)
!65 = !DILocation(line: 121, column: 29, scope: !41, inlinedAt: !53)
!66 = !DILocation(line: 52, column: 25, scope: !7)
!67 = !DILocation(line: 52, column: 56, scope: !7)
!68 = !DILocation(line: 52, column: 4, scope: !7)
