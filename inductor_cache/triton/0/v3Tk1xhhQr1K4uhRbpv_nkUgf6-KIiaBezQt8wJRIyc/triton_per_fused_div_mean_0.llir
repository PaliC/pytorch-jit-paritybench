; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused_div_mean_0(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !10
  %6 = icmp slt i32 %5, 16, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = and i32 %7, 15, !dbg !12
  %9 = sdiv i32 %5, 4, !dbg !13
  %10 = shl i32 %5, 4, !dbg !14
  %11 = or disjoint i32 %10, %8, !dbg !15
  %12 = sext i32 %11 to i64, !dbg !16
  %13 = getelementptr float, ptr addrspace(1) %0, i64 %12, !dbg !16
  %14 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %13, i1 %6, i32 0, i1 %6) #4, !dbg !17
  %15 = shl i32 %9, 6, !dbg !18
  %16 = or disjoint i32 %15, %8, !dbg !19
  %17 = sext i32 %16 to i64, !dbg !20
  %18 = getelementptr float, ptr addrspace(1) %0, i64 %17, !dbg !20
  %19 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %18, i1 %6, i32 0, i1 %6) #4, !dbg !21
  %20 = bitcast i32 %19 to float, !dbg !21
  %21 = or disjoint i32 %16, 16, !dbg !22
  %22 = sext i32 %21 to i64, !dbg !23
  %23 = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !23
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %23, i1 %6, i32 0, i1 %6) #4, !dbg !24
  %25 = bitcast i32 %24 to float, !dbg !24
  %26 = or disjoint i32 %16, 32, !dbg !25
  %27 = sext i32 %26 to i64, !dbg !26
  %28 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !26
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %28, i1 %6, i32 0, i1 %6) #4, !dbg !27
  %30 = bitcast i32 %29 to float, !dbg !27
  %31 = or disjoint i32 %16, 48, !dbg !28
  %32 = sext i32 %31 to i64, !dbg !29
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !29
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %33, i1 %6, i32 0, i1 %6) #4, !dbg !30
  %35 = bitcast i32 %34 to float, !dbg !30
  %36 = fmul float %20, %20, !dbg !31
  %37 = fmul float %25, %25, !dbg !32
  %38 = fadd float %36, %37, !dbg !33
  %39 = fmul float %30, %30, !dbg !34
  %40 = fadd float %38, %39, !dbg !35
  %41 = fmul float %35, %35, !dbg !36
  %42 = fadd float %40, %41, !dbg !37
  %43 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i = icmp eq i32 %43, 0, !dbg !38
  %44 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !38
  %.not1.i = icmp eq i32 %44, 0, !dbg !38
  br i1 %.not.i, label %50, label %45, !dbg !38

45:                                               ; preds = %4
  br i1 %.not1.i, label %48, label %46, !dbg !38

46:                                               ; preds = %45
  %47 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %42) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

48:                                               ; preds = %45
  %49 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %42) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

50:                                               ; preds = %4
  br i1 %.not1.i, label %53, label %51, !dbg !38

51:                                               ; preds = %50
  %52 = tail call float @llvm.nvvm.sqrt.rn.f(float %42) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

53:                                               ; preds = %50
  %54 = tail call float @llvm.nvvm.sqrt.approx.f(float %42) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

__nv_sqrtf.exit:                                  ; preds = %46, %48, %51, %53
  %.0.i = phi float [ %47, %46 ], [ %49, %48 ], [ %52, %51 ], [ %54, %53 ], !dbg !38
  %55 = bitcast i32 %14 to float, !dbg !17
  %56 = fcmp ogt float %.0.i, 0x3D71979980000000, !dbg !39
  %57 = fcmp uno float %.0.i, 0.000000e+00, !dbg !43
  %58 = or i1 %56, %57, !dbg !44
  %59 = select i1 %58, float %.0.i, float 0x3D71979980000000, !dbg !45
  %60 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %55, float %59) #4, !dbg !46
  %61 = select i1 %6, float %60, float 0.000000e+00, !dbg !47
  %62 = bitcast float %61 to i32, !dbg !48
  %63 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %62, i32 8, i32 31), !dbg !48
  %64 = bitcast i32 %63 to float, !dbg !48
  %65 = fadd float %61, %64, !dbg !52
  %66 = bitcast float %65 to i32, !dbg !48
  %67 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %66, i32 4, i32 31), !dbg !48
  %68 = bitcast i32 %67 to float, !dbg !48
  %69 = fadd float %65, %68, !dbg !52
  %70 = bitcast float %69 to i32, !dbg !48
  %71 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %70, i32 2, i32 31), !dbg !48
  %72 = bitcast i32 %71 to float, !dbg !48
  %73 = fadd float %69, %72, !dbg !52
  %74 = bitcast float %73 to i32, !dbg !48
  %75 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %74, i32 1, i32 31), !dbg !48
  %76 = bitcast i32 %75 to float, !dbg !48
  %77 = fadd float %73, %76, !dbg !52
  %78 = sext i32 %5 to i64, !dbg !54
  %79 = getelementptr float, ptr addrspace(1) %1, i64 %78, !dbg !54
  %80 = and i32 %7, 63, !dbg !55
  %81 = icmp eq i32 %80, 0, !dbg !55
  %82 = bitcast float %77 to i32, !dbg !55
  %83 = and i1 %81, %6, !dbg !55
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %82, ptr addrspace(1) %79, i1 %83) #4, !dbg !55
  ret void, !dbg !56
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cwchxmjwnmcdhxem2wkiytjbygxzfyfan5mner2vn4ubha57l6bt.py", directory: "inductor_cache/wc")
!4 = !{ptr @triton_per_fused_div_mean_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_div_mean_0, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_div_mean_0", linkageName: "triton_per_fused_div_mean_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 21, scope: !7)
!12 = !DILocation(line: 26, column: 34, scope: !7)
!13 = !DILocation(line: 31, column: 19, scope: !7)
!14 = !DILocation(line: 32, column: 38, scope: !7)
!15 = !DILocation(line: 32, column: 35, scope: !7)
!16 = !DILocation(line: 32, column: 30, scope: !7)
!17 = !DILocation(line: 32, column: 43, scope: !7)
!18 = !DILocation(line: 33, column: 38, scope: !7)
!19 = !DILocation(line: 33, column: 35, scope: !7)
!20 = !DILocation(line: 33, column: 30, scope: !7)
!21 = !DILocation(line: 33, column: 43, scope: !7)
!22 = !DILocation(line: 34, column: 40, scope: !7)
!23 = !DILocation(line: 34, column: 30, scope: !7)
!24 = !DILocation(line: 34, column: 48, scope: !7)
!25 = !DILocation(line: 35, column: 40, scope: !7)
!26 = !DILocation(line: 35, column: 30, scope: !7)
!27 = !DILocation(line: 35, column: 48, scope: !7)
!28 = !DILocation(line: 36, column: 40, scope: !7)
!29 = !DILocation(line: 36, column: 30, scope: !7)
!30 = !DILocation(line: 36, column: 48, scope: !7)
!31 = !DILocation(line: 37, column: 18, scope: !7)
!32 = !DILocation(line: 38, column: 18, scope: !7)
!33 = !DILocation(line: 39, column: 18, scope: !7)
!34 = !DILocation(line: 40, column: 18, scope: !7)
!35 = !DILocation(line: 41, column: 18, scope: !7)
!36 = !DILocation(line: 42, column: 19, scope: !7)
!37 = !DILocation(line: 43, column: 19, scope: !7)
!38 = !DILocation(line: 44, column: 27, scope: !7)
!39 = !DILocation(line: 118, column: 15, scope: !40, inlinedAt: !42)
!40 = distinct !DILexicalBlockFile(scope: !7, file: !41, discriminator: 0)
!41 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!42 = !DILocation(line: 46, column: 42, scope: !7)
!43 = !DILocation(line: 120, column: 21, scope: !40, inlinedAt: !42)
!44 = !DILocation(line: 120, column: 16, scope: !40, inlinedAt: !42)
!45 = !DILocation(line: 121, column: 29, scope: !40, inlinedAt: !42)
!46 = !DILocation(line: 47, column: 19, scope: !7)
!47 = !DILocation(line: 49, column: 35, scope: !7)
!48 = !DILocation(line: 267, column: 36, scope: !49, inlinedAt: !51)
!49 = distinct !DILexicalBlockFile(scope: !7, file: !50, discriminator: 0)
!50 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!51 = !DILocation(line: 50, column: 26, scope: !7)
!52 = !DILocation(line: 256, column: 15, scope: !53, inlinedAt: !51)
!53 = distinct !DILexicalBlockFile(scope: !49, file: !50, discriminator: 0)
!54 = !DILocation(line: 51, column: 25, scope: !7)
!55 = !DILocation(line: 51, column: 37, scope: !7)
!56 = !DILocation(line: 51, column: 4, scope: !7)
