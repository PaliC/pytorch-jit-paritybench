; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused__weight_norm_interface_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %8 = shl i32 %7, 5, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %.lobit1 = lshr i32 %9, 3, !dbg !12
  %10 = and i32 %.lobit1, 31, !dbg !12
  %11 = and i32 %9, 31, !dbg !12
  %12 = or disjoint i32 %8, %10, !dbg !13
  %13 = icmp slt i32 %12, 32, !dbg !14
  %14 = shl i32 %9, 2, !dbg !15
  %15 = and i32 %14, 28, !dbg !15
  %16 = shl i32 %12, 5, !dbg !16
  %17 = or disjoint i32 %16, %15, !dbg !17
  %18 = sext i32 %17 to i64, !dbg !18
  %19 = getelementptr float, ptr addrspace(1) %1, i64 %18, !dbg !18
  %20 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %19, i1 %13, i32 0, i1 %13, i32 0, i1 %13, i32 0, i1 %13, i32 0, i1 %13) #5, !dbg !19
  %21 = extractvalue { i32, i32, i32, i32 } %20, 0, !dbg !19
  %22 = extractvalue { i32, i32, i32, i32 } %20, 1, !dbg !19
  %23 = extractvalue { i32, i32, i32, i32 } %20, 2, !dbg !19
  %24 = extractvalue { i32, i32, i32, i32 } %20, 3, !dbg !19
  %25 = bitcast i32 %21 to float, !dbg !19
  %26 = bitcast i32 %22 to float, !dbg !19
  %27 = bitcast i32 %23 to float, !dbg !19
  %28 = bitcast i32 %24 to float, !dbg !19
  %29 = sext i32 %12 to i64, !dbg !20
  %30 = getelementptr float, ptr addrspace(1) %2, i64 %29, !dbg !20
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 %13) #5, !dbg !21
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 %13) #5, !dbg !21
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 %13) #5, !dbg !21
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 %13) #5, !dbg !21
  %35 = fmul float %25, %25, !dbg !22
  %36 = fmul float %26, %26, !dbg !22
  %37 = fmul float %27, %27, !dbg !22
  %38 = fmul float %28, %28, !dbg !22
  %39 = fadd float %35, %36, !dbg !23
  %40 = fadd float %37, %39, !dbg !23
  %41 = fadd float %38, %40, !dbg !23
  %42 = select i1 %13, float %41, float 0.000000e+00, !dbg !23
  %43 = bitcast float %42 to i32, !dbg !28
  %44 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %43, i32 4, i32 31), !dbg !28
  %45 = bitcast i32 %44 to float, !dbg !28
  %46 = fadd float %42, %45, !dbg !23
  %47 = bitcast float %46 to i32, !dbg !28
  %48 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %47, i32 2, i32 31), !dbg !28
  %49 = bitcast i32 %48 to float, !dbg !28
  %50 = fadd float %46, %49, !dbg !23
  %51 = bitcast float %50 to i32, !dbg !28
  %52 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %51, i32 1, i32 31), !dbg !28
  %53 = bitcast i32 %52 to float, !dbg !28
  %54 = fadd float %50, %53, !dbg !23
  %55 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %10, !dbg !29
  %56 = bitcast float %54 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %55, <1 x i32> %56, i1 true) #5, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %57 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !29
  %58 = load float, ptr addrspace(3) %57, align 4, !dbg !29
  %59 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !29
  %.not.i = icmp eq i32 %59, 0, !dbg !29
  %60 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !29
  %.not1.i = icmp eq i32 %60, 0, !dbg !29
  br i1 %.not.i, label %66, label %61, !dbg !29

61:                                               ; preds = %6
  br i1 %.not1.i, label %64, label %62, !dbg !29

62:                                               ; preds = %61
  %63 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %58) #5, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

64:                                               ; preds = %61
  %65 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %58) #5, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

66:                                               ; preds = %6
  br i1 %.not1.i, label %69, label %67, !dbg !29

67:                                               ; preds = %66
  %68 = tail call float @llvm.nvvm.sqrt.rn.f(float %58) #5, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

69:                                               ; preds = %66
  %70 = tail call float @llvm.nvvm.sqrt.approx.f(float %58) #5, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

__nv_sqrtf.exit:                                  ; preds = %62, %64, %67, %69
  %.0.i = phi float [ %63, %62 ], [ %65, %64 ], [ %68, %67 ], [ %70, %69 ], !dbg !29
  %71 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !29
  %72 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !29
  %73 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !29
  %74 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !29
  %75 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !29
  %76 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !29
  %77 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !29
  %.not.i18 = icmp eq i32 %77, 0, !dbg !29
  %78 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !29
  %.not1.i21 = icmp eq i32 %78, 0, !dbg !29
  br i1 %.not.i18, label %84, label %79, !dbg !29

79:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i21, label %82, label %80, !dbg !29

80:                                               ; preds = %79
  %81 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %54) #5, !dbg !29
  br label %__nv_sqrtf.exit22, !dbg !29

82:                                               ; preds = %79
  %83 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %54) #5, !dbg !29
  br label %__nv_sqrtf.exit22, !dbg !29

84:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i21, label %87, label %85, !dbg !29

85:                                               ; preds = %84
  %86 = tail call float @llvm.nvvm.sqrt.rn.f(float %54) #5, !dbg !29
  br label %__nv_sqrtf.exit22, !dbg !29

87:                                               ; preds = %84
  %88 = tail call float @llvm.nvvm.sqrt.approx.f(float %54) #5, !dbg !29
  br label %__nv_sqrtf.exit22, !dbg !29

__nv_sqrtf.exit22:                                ; preds = %80, %82, %85, %87
  %.0.i20 = phi float [ %81, %80 ], [ %83, %82 ], [ %86, %85 ], [ %88, %87 ], !dbg !29
  %89 = bitcast i32 %34 to float, !dbg !21
  %90 = or disjoint i32 %8, %11, !dbg !13
  %91 = icmp slt i32 %90, 32, !dbg !14
  %92 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %89, float %.0.i20) #5, !dbg !30
  %93 = fmul float %92, %25, !dbg !31
  %94 = fmul float %92, %26, !dbg !31
  %95 = fmul float %92, %27, !dbg !31
  %96 = fmul float %92, %28, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %97 = sext i32 %90 to i64, !dbg !33
  %98 = getelementptr float, ptr addrspace(1) %0, i64 %97, !dbg !33
  %99 = and i32 %9, 224, !dbg !34
  %100 = icmp eq i32 %99, 0, !dbg !34
  %101 = bitcast float %.0.i to i32, !dbg !34
  %102 = and i1 %100, %91, !dbg !34
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %101, ptr addrspace(1) %98, i1 %102) #5, !dbg !34
  %103 = getelementptr float, ptr addrspace(1) %3, i64 %18, !dbg !35
  %104 = bitcast float %93 to i32, !dbg !36
  %105 = bitcast float %94 to i32, !dbg !36
  %106 = bitcast float %95 to i32, !dbg !36
  %107 = bitcast float %96 to i32, !dbg !36
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %104, i32 %105, i32 %106, i32 %107, ptr addrspace(1) %103, i1 %13) #5, !dbg !36
  ret void, !dbg !37
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cferyw6v7pa4bcweitnxtjhtfe4upc6h4g7dgpir5my34scs3wxq.py", directory: "inductor_cache/fe")
!4 = !{ptr @triton_per_fused__weight_norm_interface_4, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__weight_norm_interface_4, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__weight_norm_interface_4", linkageName: "triton_per_fused__weight_norm_interface_4", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 38, scope: !7)
!17 = !DILocation(line: 31, column: 35, scope: !7)
!18 = !DILocation(line: 31, column: 30, scope: !7)
!19 = !DILocation(line: 31, column: 43, scope: !7)
!20 = !DILocation(line: 32, column: 30, scope: !7)
!21 = !DILocation(line: 32, column: 35, scope: !7)
!22 = !DILocation(line: 33, column: 18, scope: !7)
!23 = !DILocation(line: 256, column: 15, scope: !24, inlinedAt: !27)
!24 = distinct !DILexicalBlockFile(scope: !26, file: !25, discriminator: 0)
!25 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!26 = distinct !DILexicalBlockFile(scope: !7, file: !25, discriminator: 0)
!27 = !DILocation(line: 36, column: 24, scope: !7)
!28 = !DILocation(line: 267, column: 36, scope: !26, inlinedAt: !27)
!29 = !DILocation(line: 37, column: 26, scope: !7)
!30 = !DILocation(line: 38, column: 18, scope: !7)
!31 = !DILocation(line: 39, column: 18, scope: !7)
!32 = !DILocation(line: 40, column: 4, scope: !7)
!33 = !DILocation(line: 41, column: 28, scope: !7)
!34 = !DILocation(line: 41, column: 39, scope: !7)
!35 = !DILocation(line: 42, column: 25, scope: !7)
!36 = !DILocation(line: 42, column: 44, scope: !7)
!37 = !DILocation(line: 42, column: 4, scope: !7)
