; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_add_div_native_layer_norm_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %8 = shl i32 %7, 6, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = shl i32 %9, 1, !dbg !12
  %11 = and i32 %10, 62, !dbg !12
  %12 = or disjoint i32 %8, %11, !dbg !13
  %13 = icmp slt i32 %12, 64, !dbg !14
  %14 = shl i32 %12, 2, !dbg !15
  %15 = or disjoint i32 %14, 4, !dbg !15
  %16 = sext i32 %14 to i64, !dbg !16
  %17 = getelementptr float, ptr addrspace(1) %0, i64 %16, !dbg !16
  %18 = sext i32 %15 to i64, !dbg !16
  %19 = getelementptr float, ptr addrspace(1) %0, i64 %18, !dbg !16
  %20 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %17, i1 %13) #1, !dbg !17
  %21 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %19, i1 %13) #1, !dbg !17
  %22 = getelementptr float, ptr addrspace(1) %1, i64 %16, !dbg !18
  %23 = getelementptr float, ptr addrspace(1) %1, i64 %18, !dbg !18
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %22, i1 %13) #1, !dbg !19
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 %13) #1, !dbg !19
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %2, i1 true) #1, !dbg !20
  %27 = or disjoint i32 %14, 1, !dbg !21
  %28 = or disjoint i32 %14, 5, !dbg !21
  %29 = sext i32 %27 to i64, !dbg !22
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !22
  %31 = sext i32 %28 to i64, !dbg !22
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !22
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 %13) #1, !dbg !23
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 %13) #1, !dbg !23
  %35 = getelementptr float, ptr addrspace(1) %1, i64 %29, !dbg !24
  %36 = getelementptr float, ptr addrspace(1) %1, i64 %31, !dbg !24
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 %13) #1, !dbg !25
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 %13) #1, !dbg !25
  %39 = getelementptr i8, ptr addrspace(1) %2, i64 4, !dbg !26
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #1, !dbg !27
  %41 = or disjoint i32 %14, 2, !dbg !28
  %42 = or disjoint i32 %14, 6, !dbg !28
  %43 = sext i32 %41 to i64, !dbg !29
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !29
  %45 = sext i32 %42 to i64, !dbg !29
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !29
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 %13) #1, !dbg !30
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 %13) #1, !dbg !30
  %49 = getelementptr float, ptr addrspace(1) %1, i64 %43, !dbg !31
  %50 = getelementptr float, ptr addrspace(1) %1, i64 %45, !dbg !31
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 %13) #1, !dbg !32
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 %13) #1, !dbg !32
  %53 = getelementptr i8, ptr addrspace(1) %2, i64 8, !dbg !33
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 true) #1, !dbg !34
  %55 = or disjoint i32 %14, 3, !dbg !35
  %56 = or disjoint i32 %14, 7, !dbg !35
  %57 = sext i32 %55 to i64, !dbg !36
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !36
  %59 = sext i32 %56 to i64, !dbg !36
  %60 = getelementptr float, ptr addrspace(1) %0, i64 %59, !dbg !36
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %13) #1, !dbg !37
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 %13) #1, !dbg !37
  %63 = getelementptr float, ptr addrspace(1) %1, i64 %57, !dbg !38
  %64 = getelementptr float, ptr addrspace(1) %1, i64 %59, !dbg !38
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 %13) #1, !dbg !39
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 %13) #1, !dbg !39
  %67 = getelementptr i8, ptr addrspace(1) %2, i64 12, !dbg !40
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 true) #1, !dbg !41
  %69 = insertelement <2 x i32> poison, i32 %20, i64 0, !dbg !17
  %70 = insertelement <2 x i32> %69, i32 %33, i64 1, !dbg !17
  %71 = bitcast <2 x i32> %70 to <2 x float>, !dbg !17
  %72 = insertelement <2 x i32> poison, i32 %24, i64 0, !dbg !19
  %73 = insertelement <2 x i32> %72, i32 %37, i64 1, !dbg !19
  %74 = bitcast <2 x i32> %73 to <2 x float>, !dbg !19
  %75 = insertelement <2 x i32> poison, i32 %26, i64 0, !dbg !20
  %76 = insertelement <2 x i32> %75, i32 %40, i64 1, !dbg !20
  %77 = bitcast <2 x i32> %76 to <2 x float>, !dbg !20
  %78 = fadd <2 x float> %74, %77, !dbg !42
  %79 = fadd <2 x float> %78, %71, !dbg !43
  %80 = insertelement <2 x i32> poison, i32 %21, i64 0, !dbg !17
  %81 = insertelement <2 x i32> %80, i32 %34, i64 1, !dbg !17
  %82 = bitcast <2 x i32> %81 to <2 x float>, !dbg !17
  %83 = insertelement <2 x i32> poison, i32 %25, i64 0, !dbg !19
  %84 = insertelement <2 x i32> %83, i32 %38, i64 1, !dbg !19
  %85 = bitcast <2 x i32> %84 to <2 x float>, !dbg !19
  %86 = fadd <2 x float> %85, %77, !dbg !42
  %87 = fadd <2 x float> %86, %82, !dbg !43
  %88 = extractelement <2 x float> %79, i64 0, !dbg !44
  %89 = extractelement <2 x float> %79, i64 1, !dbg !45
  %90 = fadd float %88, %89, !dbg !46
  %91 = extractelement <2 x float> %87, i64 0, !dbg !44
  %92 = extractelement <2 x float> %87, i64 1, !dbg !45
  %93 = fadd float %91, %92, !dbg !46
  %94 = insertelement <2 x i32> poison, i32 %47, i64 0, !dbg !30
  %95 = insertelement <2 x i32> %94, i32 %61, i64 1, !dbg !30
  %96 = bitcast <2 x i32> %95 to <2 x float>, !dbg !30
  %97 = insertelement <2 x i32> poison, i32 %51, i64 0, !dbg !32
  %98 = insertelement <2 x i32> %97, i32 %65, i64 1, !dbg !32
  %99 = bitcast <2 x i32> %98 to <2 x float>, !dbg !32
  %100 = insertelement <2 x i32> poison, i32 %54, i64 0, !dbg !34
  %101 = insertelement <2 x i32> %100, i32 %68, i64 1, !dbg !34
  %102 = bitcast <2 x i32> %101 to <2 x float>, !dbg !34
  %103 = fadd <2 x float> %99, %102, !dbg !47
  %104 = fadd <2 x float> %103, %96, !dbg !48
  %105 = extractelement <2 x float> %104, i64 0, !dbg !49
  %106 = fadd float %90, %105, !dbg !50
  %107 = insertelement <2 x i32> poison, i32 %48, i64 0, !dbg !30
  %108 = insertelement <2 x i32> %107, i32 %62, i64 1, !dbg !30
  %109 = bitcast <2 x i32> %108 to <2 x float>, !dbg !30
  %110 = insertelement <2 x i32> poison, i32 %52, i64 0, !dbg !32
  %111 = insertelement <2 x i32> %110, i32 %66, i64 1, !dbg !32
  %112 = bitcast <2 x i32> %111 to <2 x float>, !dbg !32
  %113 = fadd <2 x float> %112, %102, !dbg !47
  %114 = fadd <2 x float> %113, %109, !dbg !48
  %115 = extractelement <2 x float> %114, i64 0, !dbg !49
  %116 = fadd float %93, %115, !dbg !50
  %117 = extractelement <2 x float> %104, i64 1, !dbg !51
  %118 = fadd float %106, %117, !dbg !52
  %119 = extractelement <2 x float> %114, i64 1, !dbg !51
  %120 = fadd float %116, %119, !dbg !52
  %121 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %118, float 4.000000e+00) #1, !dbg !53
  %122 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %120, float 4.000000e+00) #1, !dbg !53
  %123 = fsub float %88, %121, !dbg !44
  %124 = fsub float %91, %122, !dbg !44
  %125 = fmul float %123, %123, !dbg !54
  %126 = fmul float %124, %124, !dbg !54
  %127 = fsub float %89, %121, !dbg !45
  %128 = fsub float %92, %122, !dbg !45
  %129 = fmul float %127, %127, !dbg !55
  %130 = fmul float %128, %128, !dbg !55
  %131 = fadd float %125, %129, !dbg !56
  %132 = fadd float %126, %130, !dbg !56
  %133 = fsub float %105, %121, !dbg !49
  %134 = fsub float %115, %122, !dbg !49
  %135 = fmul float %133, %133, !dbg !57
  %136 = fmul float %134, %134, !dbg !57
  %137 = fadd float %135, %131, !dbg !58
  %138 = fadd float %136, %132, !dbg !58
  %139 = fsub float %117, %121, !dbg !51
  %140 = fsub float %119, %122, !dbg !51
  %141 = fmul float %139, %139, !dbg !59
  %142 = fmul float %140, %140, !dbg !59
  %143 = fadd float %137, %141, !dbg !60
  %144 = fadd float %142, %138, !dbg !60
  %145 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %143, float 4.000000e+00) #1, !dbg !61
  %146 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %144, float 4.000000e+00) #1, !dbg !61
  %147 = sext i32 %12 to i64, !dbg !62
  %148 = getelementptr float, ptr addrspace(1) %3, i64 %147, !dbg !62
  %149 = bitcast float %121 to i32, !dbg !63
  %150 = bitcast float %122 to i32, !dbg !63
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %149, i32 %150, ptr addrspace(1) %148, i1 %13) #1, !dbg !63
  %151 = getelementptr float, ptr addrspace(1) %4, i64 %147, !dbg !64
  %152 = bitcast float %145 to i32, !dbg !65
  %153 = bitcast float %146 to i32, !dbg !65
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %152, i32 %153, ptr addrspace(1) %151, i1 %13) #1, !dbg !65
  ret void, !dbg !66
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "czxshshzeyiiytaqe56r2534mvxo572pxmxfqdbow64coqfk7sun.py", directory: "inductor_cache/zx")
!4 = !{ptr @triton_poi_fused_add_div_native_layer_norm_7, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_div_native_layer_norm_7, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_div_native_layer_norm_7", linkageName: "triton_poi_fused_add_div_native_layer_norm_7", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 32, scope: !7)
!16 = !DILocation(line: 25, column: 30, scope: !7)
!17 = !DILocation(line: 25, column: 37, scope: !7)
!18 = !DILocation(line: 26, column: 30, scope: !7)
!19 = !DILocation(line: 26, column: 37, scope: !7)
!20 = !DILocation(line: 27, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 34, scope: !7)
!22 = !DILocation(line: 29, column: 30, scope: !7)
!23 = !DILocation(line: 29, column: 41, scope: !7)
!24 = !DILocation(line: 30, column: 30, scope: !7)
!25 = !DILocation(line: 30, column: 41, scope: !7)
!26 = !DILocation(line: 31, column: 31, scope: !7)
!27 = !DILocation(line: 31, column: 20, scope: !7)
!28 = !DILocation(line: 33, column: 35, scope: !7)
!29 = !DILocation(line: 33, column: 31, scope: !7)
!30 = !DILocation(line: 33, column: 42, scope: !7)
!31 = !DILocation(line: 34, column: 31, scope: !7)
!32 = !DILocation(line: 34, column: 42, scope: !7)
!33 = !DILocation(line: 35, column: 31, scope: !7)
!34 = !DILocation(line: 35, column: 20, scope: !7)
!35 = !DILocation(line: 37, column: 35, scope: !7)
!36 = !DILocation(line: 37, column: 31, scope: !7)
!37 = !DILocation(line: 37, column: 42, scope: !7)
!38 = !DILocation(line: 38, column: 31, scope: !7)
!39 = !DILocation(line: 38, column: 42, scope: !7)
!40 = !DILocation(line: 39, column: 31, scope: !7)
!41 = !DILocation(line: 39, column: 20, scope: !7)
!42 = !DILocation(line: 41, column: 18, scope: !7)
!43 = !DILocation(line: 44, column: 18, scope: !7)
!44 = !DILocation(line: 59, column: 19, scope: !7)
!45 = !DILocation(line: 61, column: 20, scope: !7)
!46 = !DILocation(line: 48, column: 19, scope: !7)
!47 = !DILocation(line: 49, column: 20, scope: !7)
!48 = !DILocation(line: 51, column: 20, scope: !7)
!49 = !DILocation(line: 64, column: 20, scope: !7)
!50 = !DILocation(line: 52, column: 20, scope: !7)
!51 = !DILocation(line: 67, column: 20, scope: !7)
!52 = !DILocation(line: 56, column: 20, scope: !7)
!53 = !DILocation(line: 58, column: 20, scope: !7)
!54 = !DILocation(line: 60, column: 20, scope: !7)
!55 = !DILocation(line: 62, column: 20, scope: !7)
!56 = !DILocation(line: 63, column: 20, scope: !7)
!57 = !DILocation(line: 65, column: 20, scope: !7)
!58 = !DILocation(line: 66, column: 20, scope: !7)
!59 = !DILocation(line: 68, column: 20, scope: !7)
!60 = !DILocation(line: 69, column: 20, scope: !7)
!61 = !DILocation(line: 70, column: 20, scope: !7)
!62 = !DILocation(line: 71, column: 25, scope: !7)
!63 = !DILocation(line: 71, column: 37, scope: !7)
!64 = !DILocation(line: 72, column: 25, scope: !7)
!65 = !DILocation(line: 72, column: 37, scope: !7)
!66 = !DILocation(line: 72, column: 4, scope: !7)
