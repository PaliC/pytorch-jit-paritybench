; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused_add_native_layer_norm_native_layer_norm_backward_10(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %11 = shl i32 %10, 5, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = lshr i32 %12, 5, !dbg !12
  %14 = and i32 %13, 7, !dbg !12
  %15 = or disjoint i32 %14, 8, !dbg !12
  %16 = or disjoint i32 %14, 16, !dbg !12
  %17 = or disjoint i32 %14, 24, !dbg !12
  %18 = and i32 %12, 31, !dbg !12
  %19 = or disjoint i32 %11, %14, !dbg !13
  %20 = or disjoint i32 %11, %15, !dbg !13
  %21 = or disjoint i32 %11, %16, !dbg !13
  %22 = or disjoint i32 %11, %17, !dbg !13
  %23 = icmp slt i32 %19, 144, !dbg !14
  %24 = icmp slt i32 %20, 144, !dbg !14
  %25 = icmp slt i32 %21, 144, !dbg !14
  %26 = icmp slt i32 %22, 144, !dbg !14
  %27 = shl i32 %12, 2, !dbg !15
  %28 = and i32 %27, 124, !dbg !15
  %29 = shl i32 %19, 7, !dbg !16
  %30 = shl i32 %20, 7, !dbg !16
  %31 = shl i32 %21, 7, !dbg !16
  %32 = shl i32 %22, 7, !dbg !16
  %33 = or disjoint i32 %29, %28, !dbg !17
  %34 = or disjoint i32 %30, %28, !dbg !17
  %35 = or disjoint i32 %31, %28, !dbg !17
  %36 = or disjoint i32 %32, %28, !dbg !17
  %37 = sext i32 %33 to i64, !dbg !18
  %38 = getelementptr float, ptr addrspace(1) %1, i64 %37, !dbg !18
  %39 = sext i32 %34 to i64, !dbg !18
  %40 = getelementptr float, ptr addrspace(1) %1, i64 %39, !dbg !18
  %41 = sext i32 %35 to i64, !dbg !18
  %42 = getelementptr float, ptr addrspace(1) %1, i64 %41, !dbg !18
  %43 = sext i32 %36 to i64, !dbg !18
  %44 = getelementptr float, ptr addrspace(1) %1, i64 %43, !dbg !18
  %45 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %38, i1 %23, i32 0, i1 %23, i32 0, i1 %23, i32 0, i1 %23, i32 0, i1 %23) #5, !dbg !19
  %46 = extractvalue { i32, i32, i32, i32 } %45, 0, !dbg !19
  %47 = extractvalue { i32, i32, i32, i32 } %45, 1, !dbg !19
  %48 = extractvalue { i32, i32, i32, i32 } %45, 2, !dbg !19
  %49 = extractvalue { i32, i32, i32, i32 } %45, 3, !dbg !19
  %50 = bitcast i32 %46 to float, !dbg !19
  %51 = bitcast i32 %47 to float, !dbg !19
  %52 = bitcast i32 %48 to float, !dbg !19
  %53 = bitcast i32 %49 to float, !dbg !19
  %54 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %40, i1 %24, i32 0, i1 %24, i32 0, i1 %24, i32 0, i1 %24, i32 0, i1 %24) #5, !dbg !19
  %55 = extractvalue { i32, i32, i32, i32 } %54, 0, !dbg !19
  %56 = extractvalue { i32, i32, i32, i32 } %54, 1, !dbg !19
  %57 = extractvalue { i32, i32, i32, i32 } %54, 2, !dbg !19
  %58 = extractvalue { i32, i32, i32, i32 } %54, 3, !dbg !19
  %59 = bitcast i32 %55 to float, !dbg !19
  %60 = bitcast i32 %56 to float, !dbg !19
  %61 = bitcast i32 %57 to float, !dbg !19
  %62 = bitcast i32 %58 to float, !dbg !19
  %63 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %42, i1 %25, i32 0, i1 %25, i32 0, i1 %25, i32 0, i1 %25, i32 0, i1 %25) #5, !dbg !19
  %64 = extractvalue { i32, i32, i32, i32 } %63, 0, !dbg !19
  %65 = extractvalue { i32, i32, i32, i32 } %63, 1, !dbg !19
  %66 = extractvalue { i32, i32, i32, i32 } %63, 2, !dbg !19
  %67 = extractvalue { i32, i32, i32, i32 } %63, 3, !dbg !19
  %68 = bitcast i32 %64 to float, !dbg !19
  %69 = bitcast i32 %65 to float, !dbg !19
  %70 = bitcast i32 %66 to float, !dbg !19
  %71 = bitcast i32 %67 to float, !dbg !19
  %72 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %44, i1 %26, i32 0, i1 %26, i32 0, i1 %26, i32 0, i1 %26, i32 0, i1 %26) #5, !dbg !19
  %73 = extractvalue { i32, i32, i32, i32 } %72, 0, !dbg !19
  %74 = extractvalue { i32, i32, i32, i32 } %72, 1, !dbg !19
  %75 = extractvalue { i32, i32, i32, i32 } %72, 2, !dbg !19
  %76 = extractvalue { i32, i32, i32, i32 } %72, 3, !dbg !19
  %77 = bitcast i32 %73 to float, !dbg !19
  %78 = bitcast i32 %74 to float, !dbg !19
  %79 = bitcast i32 %75 to float, !dbg !19
  %80 = bitcast i32 %76 to float, !dbg !19
  %81 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !20
  %82 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !20
  %83 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !20
  %84 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !20
  %85 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %81, i1 %23, i32 0, i1 %23, i32 0, i1 %23, i32 0, i1 %23, i32 0, i1 %23) #5, !dbg !21
  %86 = extractvalue { i32, i32, i32, i32 } %85, 0, !dbg !21
  %87 = extractvalue { i32, i32, i32, i32 } %85, 1, !dbg !21
  %88 = extractvalue { i32, i32, i32, i32 } %85, 2, !dbg !21
  %89 = extractvalue { i32, i32, i32, i32 } %85, 3, !dbg !21
  %90 = bitcast i32 %86 to float, !dbg !21
  %91 = bitcast i32 %87 to float, !dbg !21
  %92 = bitcast i32 %88 to float, !dbg !21
  %93 = bitcast i32 %89 to float, !dbg !21
  %94 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %82, i1 %24, i32 0, i1 %24, i32 0, i1 %24, i32 0, i1 %24, i32 0, i1 %24) #5, !dbg !21
  %95 = extractvalue { i32, i32, i32, i32 } %94, 0, !dbg !21
  %96 = extractvalue { i32, i32, i32, i32 } %94, 1, !dbg !21
  %97 = extractvalue { i32, i32, i32, i32 } %94, 2, !dbg !21
  %98 = extractvalue { i32, i32, i32, i32 } %94, 3, !dbg !21
  %99 = bitcast i32 %95 to float, !dbg !21
  %100 = bitcast i32 %96 to float, !dbg !21
  %101 = bitcast i32 %97 to float, !dbg !21
  %102 = bitcast i32 %98 to float, !dbg !21
  %103 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %83, i1 %25, i32 0, i1 %25, i32 0, i1 %25, i32 0, i1 %25, i32 0, i1 %25) #5, !dbg !21
  %104 = extractvalue { i32, i32, i32, i32 } %103, 0, !dbg !21
  %105 = extractvalue { i32, i32, i32, i32 } %103, 1, !dbg !21
  %106 = extractvalue { i32, i32, i32, i32 } %103, 2, !dbg !21
  %107 = extractvalue { i32, i32, i32, i32 } %103, 3, !dbg !21
  %108 = bitcast i32 %104 to float, !dbg !21
  %109 = bitcast i32 %105 to float, !dbg !21
  %110 = bitcast i32 %106 to float, !dbg !21
  %111 = bitcast i32 %107 to float, !dbg !21
  %112 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %84, i1 %26, i32 0, i1 %26, i32 0, i1 %26, i32 0, i1 %26, i32 0, i1 %26) #5, !dbg !21
  %113 = extractvalue { i32, i32, i32, i32 } %112, 0, !dbg !21
  %114 = extractvalue { i32, i32, i32, i32 } %112, 1, !dbg !21
  %115 = extractvalue { i32, i32, i32, i32 } %112, 2, !dbg !21
  %116 = extractvalue { i32, i32, i32, i32 } %112, 3, !dbg !21
  %117 = bitcast i32 %113 to float, !dbg !21
  %118 = bitcast i32 %114 to float, !dbg !21
  %119 = bitcast i32 %115 to float, !dbg !21
  %120 = bitcast i32 %116 to float, !dbg !21
  %121 = zext nneg i32 %28 to i64, !dbg !22
  %122 = getelementptr float, ptr addrspace(1) %2, i64 %121, !dbg !22
  %123 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %122, i1 true) #5, !dbg !23
  %124 = extractvalue { i32, i32, i32, i32 } %123, 0, !dbg !23
  %125 = extractvalue { i32, i32, i32, i32 } %123, 1, !dbg !23
  %126 = extractvalue { i32, i32, i32, i32 } %123, 2, !dbg !23
  %127 = extractvalue { i32, i32, i32, i32 } %123, 3, !dbg !23
  %128 = bitcast i32 %124 to float, !dbg !23
  %129 = bitcast i32 %125 to float, !dbg !23
  %130 = bitcast i32 %126 to float, !dbg !23
  %131 = bitcast i32 %127 to float, !dbg !23
  %132 = getelementptr float, ptr addrspace(1) %3, i64 %121, !dbg !24
  %133 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %132, i1 true) #5, !dbg !25
  %134 = getelementptr float, ptr addrspace(1) %4, i64 %121, !dbg !26
  %135 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %134, i1 true) #5, !dbg !27
  %136 = fadd float %90, %128, !dbg !28
  %137 = fadd float %91, %129, !dbg !28
  %138 = fadd float %92, %130, !dbg !28
  %139 = fadd float %93, %131, !dbg !28
  %140 = fadd float %99, %128, !dbg !28
  %141 = fadd float %100, %129, !dbg !28
  %142 = fadd float %101, %130, !dbg !28
  %143 = fadd float %102, %131, !dbg !28
  %144 = fadd float %108, %128, !dbg !28
  %145 = fadd float %109, %129, !dbg !28
  %146 = fadd float %110, %130, !dbg !28
  %147 = fadd float %111, %131, !dbg !28
  %148 = fadd float %117, %128, !dbg !28
  %149 = fadd float %118, %129, !dbg !28
  %150 = fadd float %119, %130, !dbg !28
  %151 = fadd float %120, %131, !dbg !28
  %152 = fadd float %136, %50, !dbg !29
  %153 = fadd float %137, %51, !dbg !29
  %154 = fadd float %138, %52, !dbg !29
  %155 = fadd float %139, %53, !dbg !29
  %156 = fadd float %140, %59, !dbg !29
  %157 = fadd float %141, %60, !dbg !29
  %158 = fadd float %142, %61, !dbg !29
  %159 = fadd float %143, %62, !dbg !29
  %160 = fadd float %144, %68, !dbg !29
  %161 = fadd float %145, %69, !dbg !29
  %162 = fadd float %146, %70, !dbg !29
  %163 = fadd float %147, %71, !dbg !29
  %164 = fadd float %148, %77, !dbg !29
  %165 = fadd float %149, %78, !dbg !29
  %166 = fadd float %150, %79, !dbg !29
  %167 = fadd float %151, %80, !dbg !29
  %168 = fadd float %152, %153, !dbg !30
  %169 = fadd float %154, %168, !dbg !30
  %170 = fadd float %155, %169, !dbg !30
  %171 = select i1 %23, float %170, float 0.000000e+00, !dbg !30
  %172 = fadd float %156, %157, !dbg !30
  %173 = fadd float %158, %172, !dbg !30
  %174 = fadd float %159, %173, !dbg !30
  %175 = select i1 %24, float %174, float 0.000000e+00, !dbg !30
  %176 = fadd float %160, %161, !dbg !30
  %177 = fadd float %162, %176, !dbg !30
  %178 = fadd float %163, %177, !dbg !30
  %179 = select i1 %25, float %178, float 0.000000e+00, !dbg !30
  %180 = fadd float %164, %165, !dbg !30
  %181 = fadd float %166, %180, !dbg !30
  %182 = fadd float %167, %181, !dbg !30
  %183 = select i1 %26, float %182, float 0.000000e+00, !dbg !30
  %184 = bitcast float %171 to i32, !dbg !35
  %185 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %184, i32 16, i32 31), !dbg !35
  %186 = bitcast i32 %185 to float, !dbg !35
  %187 = fadd float %171, %186, !dbg !30
  %188 = bitcast float %187 to i32, !dbg !35
  %189 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %188, i32 8, i32 31), !dbg !35
  %190 = bitcast i32 %189 to float, !dbg !35
  %191 = fadd float %187, %190, !dbg !30
  %192 = bitcast float %191 to i32, !dbg !35
  %193 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %192, i32 4, i32 31), !dbg !35
  %194 = bitcast i32 %193 to float, !dbg !35
  %195 = fadd float %191, %194, !dbg !30
  %196 = bitcast float %195 to i32, !dbg !35
  %197 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %196, i32 2, i32 31), !dbg !35
  %198 = bitcast i32 %197 to float, !dbg !35
  %199 = fadd float %195, %198, !dbg !30
  %200 = bitcast float %199 to i32, !dbg !35
  %201 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %200, i32 1, i32 31), !dbg !35
  %202 = bitcast i32 %201 to float, !dbg !35
  %203 = fadd float %199, %202, !dbg !30
  %204 = bitcast float %175 to i32, !dbg !35
  %205 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %204, i32 16, i32 31), !dbg !35
  %206 = bitcast i32 %205 to float, !dbg !35
  %207 = fadd float %175, %206, !dbg !30
  %208 = bitcast float %207 to i32, !dbg !35
  %209 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %208, i32 8, i32 31), !dbg !35
  %210 = bitcast i32 %209 to float, !dbg !35
  %211 = fadd float %207, %210, !dbg !30
  %212 = bitcast float %211 to i32, !dbg !35
  %213 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %212, i32 4, i32 31), !dbg !35
  %214 = bitcast i32 %213 to float, !dbg !35
  %215 = fadd float %211, %214, !dbg !30
  %216 = bitcast float %215 to i32, !dbg !35
  %217 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %216, i32 2, i32 31), !dbg !35
  %218 = bitcast i32 %217 to float, !dbg !35
  %219 = fadd float %215, %218, !dbg !30
  %220 = bitcast float %219 to i32, !dbg !35
  %221 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %220, i32 1, i32 31), !dbg !35
  %222 = bitcast i32 %221 to float, !dbg !35
  %223 = fadd float %219, %222, !dbg !30
  %224 = bitcast float %179 to i32, !dbg !35
  %225 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %224, i32 16, i32 31), !dbg !35
  %226 = bitcast i32 %225 to float, !dbg !35
  %227 = fadd float %179, %226, !dbg !30
  %228 = bitcast float %227 to i32, !dbg !35
  %229 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %228, i32 8, i32 31), !dbg !35
  %230 = bitcast i32 %229 to float, !dbg !35
  %231 = fadd float %227, %230, !dbg !30
  %232 = bitcast float %231 to i32, !dbg !35
  %233 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %232, i32 4, i32 31), !dbg !35
  %234 = bitcast i32 %233 to float, !dbg !35
  %235 = fadd float %231, %234, !dbg !30
  %236 = bitcast float %235 to i32, !dbg !35
  %237 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %236, i32 2, i32 31), !dbg !35
  %238 = bitcast i32 %237 to float, !dbg !35
  %239 = fadd float %235, %238, !dbg !30
  %240 = bitcast float %239 to i32, !dbg !35
  %241 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %240, i32 1, i32 31), !dbg !35
  %242 = bitcast i32 %241 to float, !dbg !35
  %243 = fadd float %239, %242, !dbg !30
  %244 = bitcast float %183 to i32, !dbg !35
  %245 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %244, i32 16, i32 31), !dbg !35
  %246 = bitcast i32 %245 to float, !dbg !35
  %247 = fadd float %183, %246, !dbg !30
  %248 = bitcast float %247 to i32, !dbg !35
  %249 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %248, i32 8, i32 31), !dbg !35
  %250 = bitcast i32 %249 to float, !dbg !35
  %251 = fadd float %247, %250, !dbg !30
  %252 = bitcast float %251 to i32, !dbg !35
  %253 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %252, i32 4, i32 31), !dbg !35
  %254 = bitcast i32 %253 to float, !dbg !35
  %255 = fadd float %251, %254, !dbg !30
  %256 = bitcast float %255 to i32, !dbg !35
  %257 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %256, i32 2, i32 31), !dbg !35
  %258 = bitcast i32 %257 to float, !dbg !35
  %259 = fadd float %255, %258, !dbg !30
  %260 = bitcast float %259 to i32, !dbg !35
  %261 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %260, i32 1, i32 31), !dbg !35
  %262 = bitcast i32 %261 to float, !dbg !35
  %263 = fadd float %259, %262, !dbg !30
  %264 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %203, float 1.280000e+02) #5, !dbg !36
  %265 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %223, float 1.280000e+02) #5, !dbg !36
  %266 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %243, float 1.280000e+02) #5, !dbg !36
  %267 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %263, float 1.280000e+02) #5, !dbg !36
  %268 = fsub float %152, %264, !dbg !37
  %269 = fsub float %153, %264, !dbg !37
  %270 = fsub float %154, %264, !dbg !37
  %271 = fsub float %155, %264, !dbg !37
  %272 = fsub float %156, %265, !dbg !37
  %273 = fsub float %157, %265, !dbg !37
  %274 = fsub float %158, %265, !dbg !37
  %275 = fsub float %159, %265, !dbg !37
  %276 = fsub float %160, %266, !dbg !37
  %277 = fsub float %161, %266, !dbg !37
  %278 = fsub float %162, %266, !dbg !37
  %279 = fsub float %163, %266, !dbg !37
  %280 = fsub float %164, %267, !dbg !37
  %281 = fsub float %165, %267, !dbg !37
  %282 = fsub float %166, %267, !dbg !37
  %283 = fsub float %167, %267, !dbg !37
  %284 = fmul float %268, %268, !dbg !38
  %285 = fmul float %269, %269, !dbg !38
  %286 = fmul float %270, %270, !dbg !38
  %287 = fmul float %271, %271, !dbg !38
  %288 = fmul float %272, %272, !dbg !38
  %289 = fmul float %273, %273, !dbg !38
  %290 = fmul float %274, %274, !dbg !38
  %291 = fmul float %275, %275, !dbg !38
  %292 = fmul float %276, %276, !dbg !38
  %293 = fmul float %277, %277, !dbg !38
  %294 = fmul float %278, %278, !dbg !38
  %295 = fmul float %279, %279, !dbg !38
  %296 = fmul float %280, %280, !dbg !38
  %297 = fmul float %281, %281, !dbg !38
  %298 = fmul float %282, %282, !dbg !38
  %299 = fmul float %283, %283, !dbg !38
  %300 = fadd float %284, %285, !dbg !39
  %301 = fadd float %286, %300, !dbg !39
  %302 = fadd float %287, %301, !dbg !39
  %303 = select i1 %23, float %302, float 0.000000e+00, !dbg !39
  %304 = fadd float %288, %289, !dbg !39
  %305 = fadd float %290, %304, !dbg !39
  %306 = fadd float %291, %305, !dbg !39
  %307 = select i1 %24, float %306, float 0.000000e+00, !dbg !39
  %308 = fadd float %292, %293, !dbg !39
  %309 = fadd float %294, %308, !dbg !39
  %310 = fadd float %295, %309, !dbg !39
  %311 = select i1 %25, float %310, float 0.000000e+00, !dbg !39
  %312 = fadd float %296, %297, !dbg !39
  %313 = fadd float %298, %312, !dbg !39
  %314 = fadd float %299, %313, !dbg !39
  %315 = select i1 %26, float %314, float 0.000000e+00, !dbg !39
  %316 = bitcast float %303 to i32, !dbg !41
  %317 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %316, i32 16, i32 31), !dbg !41
  %318 = bitcast i32 %317 to float, !dbg !41
  %319 = fadd float %303, %318, !dbg !39
  %320 = bitcast float %319 to i32, !dbg !41
  %321 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %320, i32 8, i32 31), !dbg !41
  %322 = bitcast i32 %321 to float, !dbg !41
  %323 = fadd float %319, %322, !dbg !39
  %324 = bitcast float %323 to i32, !dbg !41
  %325 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %324, i32 4, i32 31), !dbg !41
  %326 = bitcast i32 %325 to float, !dbg !41
  %327 = fadd float %323, %326, !dbg !39
  %328 = bitcast float %327 to i32, !dbg !41
  %329 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %328, i32 2, i32 31), !dbg !41
  %330 = bitcast i32 %329 to float, !dbg !41
  %331 = fadd float %327, %330, !dbg !39
  %332 = bitcast float %331 to i32, !dbg !41
  %333 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %332, i32 1, i32 31), !dbg !41
  %334 = bitcast i32 %333 to float, !dbg !41
  %335 = fadd float %331, %334, !dbg !39
  %336 = bitcast float %307 to i32, !dbg !41
  %337 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %336, i32 16, i32 31), !dbg !41
  %338 = bitcast i32 %337 to float, !dbg !41
  %339 = fadd float %307, %338, !dbg !39
  %340 = bitcast float %339 to i32, !dbg !41
  %341 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %340, i32 8, i32 31), !dbg !41
  %342 = bitcast i32 %341 to float, !dbg !41
  %343 = fadd float %339, %342, !dbg !39
  %344 = bitcast float %343 to i32, !dbg !41
  %345 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %344, i32 4, i32 31), !dbg !41
  %346 = bitcast i32 %345 to float, !dbg !41
  %347 = fadd float %343, %346, !dbg !39
  %348 = bitcast float %347 to i32, !dbg !41
  %349 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %348, i32 2, i32 31), !dbg !41
  %350 = bitcast i32 %349 to float, !dbg !41
  %351 = fadd float %347, %350, !dbg !39
  %352 = bitcast float %351 to i32, !dbg !41
  %353 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %352, i32 1, i32 31), !dbg !41
  %354 = bitcast i32 %353 to float, !dbg !41
  %355 = fadd float %351, %354, !dbg !39
  %356 = bitcast float %311 to i32, !dbg !41
  %357 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %356, i32 16, i32 31), !dbg !41
  %358 = bitcast i32 %357 to float, !dbg !41
  %359 = fadd float %311, %358, !dbg !39
  %360 = bitcast float %359 to i32, !dbg !41
  %361 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %360, i32 8, i32 31), !dbg !41
  %362 = bitcast i32 %361 to float, !dbg !41
  %363 = fadd float %359, %362, !dbg !39
  %364 = bitcast float %363 to i32, !dbg !41
  %365 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %364, i32 4, i32 31), !dbg !41
  %366 = bitcast i32 %365 to float, !dbg !41
  %367 = fadd float %363, %366, !dbg !39
  %368 = bitcast float %367 to i32, !dbg !41
  %369 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %368, i32 2, i32 31), !dbg !41
  %370 = bitcast i32 %369 to float, !dbg !41
  %371 = fadd float %367, %370, !dbg !39
  %372 = bitcast float %371 to i32, !dbg !41
  %373 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %372, i32 1, i32 31), !dbg !41
  %374 = bitcast i32 %373 to float, !dbg !41
  %375 = fadd float %371, %374, !dbg !39
  %376 = bitcast float %315 to i32, !dbg !41
  %377 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %376, i32 16, i32 31), !dbg !41
  %378 = bitcast i32 %377 to float, !dbg !41
  %379 = fadd float %315, %378, !dbg !39
  %380 = bitcast float %379 to i32, !dbg !41
  %381 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %380, i32 8, i32 31), !dbg !41
  %382 = bitcast i32 %381 to float, !dbg !41
  %383 = fadd float %379, %382, !dbg !39
  %384 = bitcast float %383 to i32, !dbg !41
  %385 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %384, i32 4, i32 31), !dbg !41
  %386 = bitcast i32 %385 to float, !dbg !41
  %387 = fadd float %383, %386, !dbg !39
  %388 = bitcast float %387 to i32, !dbg !41
  %389 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %388, i32 2, i32 31), !dbg !41
  %390 = bitcast i32 %389 to float, !dbg !41
  %391 = fadd float %387, %390, !dbg !39
  %392 = bitcast float %391 to i32, !dbg !41
  %393 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %392, i32 1, i32 31), !dbg !41
  %394 = bitcast i32 %393 to float, !dbg !41
  %395 = fadd float %391, %394, !dbg !39
  %396 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !42
  %397 = bitcast float %335 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %396, <1 x i32> %397, i1 true) #5, !dbg !42
  %398 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !42
  %399 = bitcast float %355 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %398, <1 x i32> %399, i1 true) #5, !dbg !42
  %400 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %16, !dbg !42
  %401 = bitcast float %375 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %400, <1 x i32> %401, i1 true) #5, !dbg !42
  %402 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %17, !dbg !42
  %403 = bitcast float %395 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %402, <1 x i32> %403, i1 true) #5, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %404 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %18, !dbg !42
  %405 = load float, ptr addrspace(3) %404, align 4, !dbg !42
  %406 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %405, float 1.280000e+02) #5, !dbg !43
  %407 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %335, float 1.280000e+02) #5, !dbg !43
  %408 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %355, float 1.280000e+02) #5, !dbg !43
  %409 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %375, float 1.280000e+02) #5, !dbg !43
  %410 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %395, float 1.280000e+02) #5, !dbg !43
  %411 = fadd float %406, 0x3EE4F8B580000000, !dbg !44
  %412 = fadd float %407, 0x3EE4F8B580000000, !dbg !44
  %413 = fadd float %408, 0x3EE4F8B580000000, !dbg !44
  %414 = fadd float %409, 0x3EE4F8B580000000, !dbg !44
  %415 = fadd float %410, 0x3EE4F8B580000000, !dbg !44
  %416 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !45
  %.not.i = icmp eq i32 %416, 0, !dbg !45
  br i1 %.not.i, label %419, label %417, !dbg !45

417:                                              ; preds = %9
  %418 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %411), !dbg !45
  br label %__nv_rsqrtf.exit, !dbg !45

419:                                              ; preds = %9
  %420 = tail call float @llvm.nvvm.rsqrt.approx.f(float %411), !dbg !45
  br label %__nv_rsqrtf.exit, !dbg !45

__nv_rsqrtf.exit:                                 ; preds = %417, %419
  %.0.i = phi float [ %418, %417 ], [ %420, %419 ], !dbg !45
  %421 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !45
  %422 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !45
  %423 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !45
  %424 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !45
  %.not.i10 = icmp eq i32 %424, 0, !dbg !45
  br i1 %.not.i10, label %427, label %425, !dbg !45

425:                                              ; preds = %__nv_rsqrtf.exit
  %426 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %412), !dbg !45
  br label %__nv_rsqrtf.exit12, !dbg !45

427:                                              ; preds = %__nv_rsqrtf.exit
  %428 = tail call float @llvm.nvvm.rsqrt.approx.f(float %412), !dbg !45
  br label %__nv_rsqrtf.exit12, !dbg !45

__nv_rsqrtf.exit12:                               ; preds = %425, %427
  %.0.i11 = phi float [ %426, %425 ], [ %428, %427 ], !dbg !45
  %429 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !45
  %430 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !45
  %431 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !45
  %432 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !45
  %.not.i22 = icmp eq i32 %432, 0, !dbg !45
  br i1 %.not.i22, label %435, label %433, !dbg !45

433:                                              ; preds = %__nv_rsqrtf.exit12
  %434 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %413), !dbg !45
  br label %__nv_rsqrtf.exit24, !dbg !45

435:                                              ; preds = %__nv_rsqrtf.exit12
  %436 = tail call float @llvm.nvvm.rsqrt.approx.f(float %413), !dbg !45
  br label %__nv_rsqrtf.exit24, !dbg !45

__nv_rsqrtf.exit24:                               ; preds = %433, %435
  %.0.i23 = phi float [ %434, %433 ], [ %436, %435 ], !dbg !45
  %437 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !45
  %438 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !45
  %439 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !45
  %440 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !45
  %.not.i34 = icmp eq i32 %440, 0, !dbg !45
  br i1 %.not.i34, label %443, label %441, !dbg !45

441:                                              ; preds = %__nv_rsqrtf.exit24
  %442 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %414), !dbg !45
  br label %__nv_rsqrtf.exit36, !dbg !45

443:                                              ; preds = %__nv_rsqrtf.exit24
  %444 = tail call float @llvm.nvvm.rsqrt.approx.f(float %414), !dbg !45
  br label %__nv_rsqrtf.exit36, !dbg !45

__nv_rsqrtf.exit36:                               ; preds = %441, %443
  %.0.i35 = phi float [ %442, %441 ], [ %444, %443 ], !dbg !45
  %445 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !45
  %446 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !45
  %447 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !45
  %448 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !45
  %.not.i46 = icmp eq i32 %448, 0, !dbg !45
  br i1 %.not.i46, label %451, label %449, !dbg !45

449:                                              ; preds = %__nv_rsqrtf.exit36
  %450 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %415), !dbg !45
  br label %__nv_rsqrtf.exit48, !dbg !45

451:                                              ; preds = %__nv_rsqrtf.exit36
  %452 = tail call float @llvm.nvvm.rsqrt.approx.f(float %415), !dbg !45
  br label %__nv_rsqrtf.exit48, !dbg !45

__nv_rsqrtf.exit48:                               ; preds = %449, %451
  %.0.i47 = phi float [ %450, %449 ], [ %452, %451 ], !dbg !45
  %453 = extractvalue { i32, i32, i32, i32 } %135, 3, !dbg !27
  %454 = bitcast i32 %453 to float, !dbg !27
  %455 = extractvalue { i32, i32, i32, i32 } %135, 2, !dbg !27
  %456 = bitcast i32 %455 to float, !dbg !27
  %457 = extractvalue { i32, i32, i32, i32 } %135, 1, !dbg !27
  %458 = bitcast i32 %457 to float, !dbg !27
  %459 = extractvalue { i32, i32, i32, i32 } %135, 0, !dbg !27
  %460 = bitcast i32 %459 to float, !dbg !27
  %461 = extractvalue { i32, i32, i32, i32 } %133, 3, !dbg !25
  %462 = bitcast i32 %461 to float, !dbg !25
  %463 = extractvalue { i32, i32, i32, i32 } %133, 2, !dbg !25
  %464 = bitcast i32 %463 to float, !dbg !25
  %465 = extractvalue { i32, i32, i32, i32 } %133, 1, !dbg !25
  %466 = bitcast i32 %465 to float, !dbg !25
  %467 = extractvalue { i32, i32, i32, i32 } %133, 0, !dbg !25
  %468 = bitcast i32 %467 to float, !dbg !25
  %469 = or disjoint i32 %11, %18, !dbg !13
  %470 = icmp slt i32 %469, 144, !dbg !14
  %471 = fmul float %268, %.0.i11, !dbg !46
  %472 = fmul float %269, %.0.i11, !dbg !46
  %473 = fmul float %270, %.0.i11, !dbg !46
  %474 = fmul float %271, %.0.i11, !dbg !46
  %475 = fmul float %272, %.0.i23, !dbg !46
  %476 = fmul float %273, %.0.i23, !dbg !46
  %477 = fmul float %274, %.0.i23, !dbg !46
  %478 = fmul float %275, %.0.i23, !dbg !46
  %479 = fmul float %276, %.0.i35, !dbg !46
  %480 = fmul float %277, %.0.i35, !dbg !46
  %481 = fmul float %278, %.0.i35, !dbg !46
  %482 = fmul float %279, %.0.i35, !dbg !46
  %483 = fmul float %280, %.0.i47, !dbg !46
  %484 = fmul float %281, %.0.i47, !dbg !46
  %485 = fmul float %282, %.0.i47, !dbg !46
  %486 = fmul float %283, %.0.i47, !dbg !46
  %487 = fmul float %471, %468, !dbg !47
  %488 = fmul float %472, %466, !dbg !47
  %489 = fmul float %473, %464, !dbg !47
  %490 = fmul float %474, %462, !dbg !47
  %491 = fmul float %475, %468, !dbg !47
  %492 = fmul float %476, %466, !dbg !47
  %493 = fmul float %477, %464, !dbg !47
  %494 = fmul float %478, %462, !dbg !47
  %495 = fmul float %479, %468, !dbg !47
  %496 = fmul float %480, %466, !dbg !47
  %497 = fmul float %481, %464, !dbg !47
  %498 = fmul float %482, %462, !dbg !47
  %499 = fmul float %483, %468, !dbg !47
  %500 = fmul float %484, %466, !dbg !47
  %501 = fmul float %485, %464, !dbg !47
  %502 = fmul float %486, %462, !dbg !47
  %503 = fadd float %487, %460, !dbg !48
  %504 = fadd float %488, %458, !dbg !48
  %505 = fadd float %489, %456, !dbg !48
  %506 = fadd float %490, %454, !dbg !48
  %507 = fadd float %491, %460, !dbg !48
  %508 = fadd float %492, %458, !dbg !48
  %509 = fadd float %493, %456, !dbg !48
  %510 = fadd float %494, %454, !dbg !48
  %511 = fadd float %495, %460, !dbg !48
  %512 = fadd float %496, %458, !dbg !48
  %513 = fadd float %497, %456, !dbg !48
  %514 = fadd float %498, %454, !dbg !48
  %515 = fadd float %499, %460, !dbg !48
  %516 = fadd float %500, %458, !dbg !48
  %517 = fadd float %501, %456, !dbg !48
  %518 = fadd float %502, %454, !dbg !48
  %519 = fmul float %.0.i, 7.812500e-03, !dbg !42
  %520 = bitcast float %471 to i32, !dbg !49
  %521 = bitcast float %472 to i32, !dbg !49
  %522 = bitcast float %473 to i32, !dbg !49
  %523 = bitcast float %474 to i32, !dbg !49
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %520, i32 %521, i32 %522, i32 %523, ptr addrspace(1) %81, i1 %23) #5, !dbg !49
  %524 = bitcast float %475 to i32, !dbg !49
  %525 = bitcast float %476 to i32, !dbg !49
  %526 = bitcast float %477 to i32, !dbg !49
  %527 = bitcast float %478 to i32, !dbg !49
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %524, i32 %525, i32 %526, i32 %527, ptr addrspace(1) %82, i1 %24) #5, !dbg !49
  %528 = bitcast float %479 to i32, !dbg !49
  %529 = bitcast float %480 to i32, !dbg !49
  %530 = bitcast float %481 to i32, !dbg !49
  %531 = bitcast float %482 to i32, !dbg !49
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %528, i32 %529, i32 %530, i32 %531, ptr addrspace(1) %83, i1 %25) #5, !dbg !49
  %532 = bitcast float %483 to i32, !dbg !49
  %533 = bitcast float %484 to i32, !dbg !49
  %534 = bitcast float %485 to i32, !dbg !49
  %535 = bitcast float %486 to i32, !dbg !49
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %532, i32 %533, i32 %534, i32 %535, ptr addrspace(1) %84, i1 %26) #5, !dbg !49
  %536 = getelementptr float, ptr addrspace(1) %5, i64 %37, !dbg !50
  %537 = getelementptr float, ptr addrspace(1) %5, i64 %39, !dbg !50
  %538 = getelementptr float, ptr addrspace(1) %5, i64 %41, !dbg !50
  %539 = getelementptr float, ptr addrspace(1) %5, i64 %43, !dbg !50
  %540 = bitcast float %503 to i32, !dbg !51
  %541 = bitcast float %504 to i32, !dbg !51
  %542 = bitcast float %505 to i32, !dbg !51
  %543 = bitcast float %506 to i32, !dbg !51
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %540, i32 %541, i32 %542, i32 %543, ptr addrspace(1) %536, i1 %23) #5, !dbg !51
  %544 = bitcast float %507 to i32, !dbg !51
  %545 = bitcast float %508 to i32, !dbg !51
  %546 = bitcast float %509 to i32, !dbg !51
  %547 = bitcast float %510 to i32, !dbg !51
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %544, i32 %545, i32 %546, i32 %547, ptr addrspace(1) %537, i1 %24) #5, !dbg !51
  %548 = bitcast float %511 to i32, !dbg !51
  %549 = bitcast float %512 to i32, !dbg !51
  %550 = bitcast float %513 to i32, !dbg !51
  %551 = bitcast float %514 to i32, !dbg !51
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %548, i32 %549, i32 %550, i32 %551, ptr addrspace(1) %538, i1 %25) #5, !dbg !51
  %552 = bitcast float %515 to i32, !dbg !51
  %553 = bitcast float %516 to i32, !dbg !51
  %554 = bitcast float %517 to i32, !dbg !51
  %555 = bitcast float %518 to i32, !dbg !51
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %552, i32 %553, i32 %554, i32 %555, ptr addrspace(1) %539, i1 %26) #5, !dbg !51
  %556 = sext i32 %469 to i64, !dbg !52
  %557 = getelementptr float, ptr addrspace(1) %6, i64 %556, !dbg !52
  %558 = and i32 %12, 224, !dbg !53
  %559 = icmp eq i32 %558, 0, !dbg !53
  %560 = bitcast float %519 to i32, !dbg !53
  %561 = and i1 %559, %470, !dbg !53
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %560, ptr addrspace(1) %557, i1 %561) #5, !dbg !53
  ret void, !dbg !54
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ciiccb2fxvswssixbphpjmpxa7k24toswtmiu6drmnguqajjqnoc.py", directory: "inductor_cache/ii")
!4 = !{ptr @triton_per_fused_add_native_layer_norm_native_layer_norm_backward_10, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_native_layer_norm_native_layer_norm_backward_10, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_native_layer_norm_native_layer_norm_backward_10", linkageName: "triton_per_fused_add_native_layer_norm_native_layer_norm_backward_10", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 39, scope: !7)
!17 = !DILocation(line: 31, column: 35, scope: !7)
!18 = !DILocation(line: 31, column: 30, scope: !7)
!19 = !DILocation(line: 31, column: 44, scope: !7)
!20 = !DILocation(line: 32, column: 34, scope: !7)
!21 = !DILocation(line: 32, column: 48, scope: !7)
!22 = !DILocation(line: 33, column: 30, scope: !7)
!23 = !DILocation(line: 33, column: 35, scope: !7)
!24 = !DILocation(line: 34, column: 31, scope: !7)
!25 = !DILocation(line: 34, column: 36, scope: !7)
!26 = !DILocation(line: 35, column: 31, scope: !7)
!27 = !DILocation(line: 35, column: 36, scope: !7)
!28 = !DILocation(line: 36, column: 18, scope: !7)
!29 = !DILocation(line: 37, column: 18, scope: !7)
!30 = !DILocation(line: 256, column: 15, scope: !31, inlinedAt: !34)
!31 = distinct !DILexicalBlockFile(scope: !33, file: !32, discriminator: 0)
!32 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!33 = distinct !DILexicalBlockFile(scope: !7, file: !32, discriminator: 0)
!34 = !DILocation(line: 42, column: 26, scope: !7)
!35 = !DILocation(line: 267, column: 36, scope: !33, inlinedAt: !34)
!36 = !DILocation(line: 45, column: 20, scope: !7)
!37 = !DILocation(line: 46, column: 19, scope: !7)
!38 = !DILocation(line: 47, column: 20, scope: !7)
!39 = !DILocation(line: 256, column: 15, scope: !31, inlinedAt: !40)
!40 = !DILocation(line: 50, column: 26, scope: !7)
!41 = !DILocation(line: 267, column: 36, scope: !33, inlinedAt: !40)
!42 = !DILocation(line: 61, column: 20, scope: !7)
!43 = !DILocation(line: 53, column: 20, scope: !7)
!44 = !DILocation(line: 55, column: 20, scope: !7)
!45 = !DILocation(line: 56, column: 28, scope: !7)
!46 = !DILocation(line: 57, column: 20, scope: !7)
!47 = !DILocation(line: 58, column: 20, scope: !7)
!48 = !DILocation(line: 59, column: 20, scope: !7)
!49 = !DILocation(line: 62, column: 49, scope: !7)
!50 = !DILocation(line: 63, column: 25, scope: !7)
!51 = !DILocation(line: 63, column: 46, scope: !7)
!52 = !DILocation(line: 64, column: 25, scope: !7)
!53 = !DILocation(line: 64, column: 37, scope: !7)
!54 = !DILocation(line: 64, column: 4, scope: !7)
