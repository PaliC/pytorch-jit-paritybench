; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_add_convolution_div_sqrt_25(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %8 = shl i32 %7, 6, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = lshr i32 %9, 4, !dbg !12
  %11 = and i32 %10, 7, !dbg !12
  %12 = or disjoint i32 %11, 8, !dbg !12
  %13 = or disjoint i32 %8, %11, !dbg !13
  %14 = or disjoint i32 %8, %12, !dbg !13
  %15 = or disjoint i32 %13, 16, !dbg !13
  %16 = or disjoint i32 %13, 24, !dbg !13
  %17 = or disjoint i32 %13, 32, !dbg !13
  %18 = or disjoint i32 %13, 40, !dbg !13
  %19 = or disjoint i32 %13, 48, !dbg !13
  %20 = or disjoint i32 %13, 56, !dbg !13
  %21 = icmp slt i32 %13, 1536, !dbg !14
  %22 = icmp slt i32 %14, 1536, !dbg !14
  %23 = icmp slt i32 %15, 1536, !dbg !14
  %24 = icmp slt i32 %16, 1536, !dbg !14
  %25 = icmp slt i32 %17, 1536, !dbg !14
  %26 = icmp slt i32 %18, 1536, !dbg !14
  %27 = icmp slt i32 %19, 1536, !dbg !14
  %28 = icmp slt i32 %20, 1536, !dbg !14
  %29 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %30 = shl i32 %29, 4, !dbg !16
  %31 = and i32 %9, 15, !dbg !17
  %32 = or disjoint i32 %30, %31, !dbg !18
  %33 = icmp slt i32 %32, 9, !dbg !19
  %34 = sdiv i32 %13, 384, !dbg !20
  %35 = sdiv i32 %14, 384, !dbg !20
  %36 = sdiv i32 %15, 384, !dbg !20
  %37 = sdiv i32 %16, 384, !dbg !20
  %38 = sdiv i32 %17, 384, !dbg !20
  %39 = sdiv i32 %18, 384, !dbg !20
  %40 = sdiv i32 %19, 384, !dbg !20
  %41 = sdiv i32 %20, 384, !dbg !20
  %42 = mul i32 %13, 9, !dbg !21
  %43 = mul i32 %14, 9, !dbg !21
  %44 = mul i32 %15, 9, !dbg !21
  %45 = mul i32 %16, 9, !dbg !21
  %46 = mul i32 %17, 9, !dbg !21
  %47 = mul i32 %18, 9, !dbg !21
  %48 = mul i32 %19, 9, !dbg !21
  %49 = mul i32 %20, 9, !dbg !21
  %50 = add i32 %32, %42, !dbg !22
  %51 = add i32 %32, %43, !dbg !22
  %52 = add i32 %32, %44, !dbg !22
  %53 = add i32 %32, %45, !dbg !22
  %54 = add i32 %32, %46, !dbg !22
  %55 = add i32 %32, %47, !dbg !22
  %56 = add i32 %32, %48, !dbg !22
  %57 = add i32 %32, %49, !dbg !22
  %58 = sext i32 %50 to i64, !dbg !23
  %59 = getelementptr float, ptr addrspace(1) %0, i64 %58, !dbg !23
  %60 = sext i32 %51 to i64, !dbg !23
  %61 = getelementptr float, ptr addrspace(1) %0, i64 %60, !dbg !23
  %62 = sext i32 %52 to i64, !dbg !23
  %63 = getelementptr float, ptr addrspace(1) %0, i64 %62, !dbg !23
  %64 = sext i32 %53 to i64, !dbg !23
  %65 = getelementptr float, ptr addrspace(1) %0, i64 %64, !dbg !23
  %66 = sext i32 %54 to i64, !dbg !23
  %67 = getelementptr float, ptr addrspace(1) %0, i64 %66, !dbg !23
  %68 = sext i32 %55 to i64, !dbg !23
  %69 = getelementptr float, ptr addrspace(1) %0, i64 %68, !dbg !23
  %70 = sext i32 %56 to i64, !dbg !23
  %71 = getelementptr float, ptr addrspace(1) %0, i64 %70, !dbg !23
  %72 = sext i32 %57 to i64, !dbg !23
  %73 = getelementptr float, ptr addrspace(1) %0, i64 %72, !dbg !23
  %74 = and i1 %21, %33, !dbg !24
  %75 = and i1 %22, %33, !dbg !24
  %76 = and i1 %23, %33, !dbg !24
  %77 = and i1 %24, %33, !dbg !24
  %78 = and i1 %25, %33, !dbg !24
  %79 = and i1 %26, %33, !dbg !24
  %80 = and i1 %27, %33, !dbg !24
  %81 = and i1 %28, %33, !dbg !24
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 %74) #4, !dbg !25
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 %75) #4, !dbg !25
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 %76) #4, !dbg !25
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 %77) #4, !dbg !25
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 %78) #4, !dbg !25
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 %79) #4, !dbg !25
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %71, i1 %80) #4, !dbg !25
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 %81) #4, !dbg !25
  %90 = mul nsw i32 %34, 9, !dbg !26
  %91 = mul nsw i32 %35, 9, !dbg !26
  %92 = mul nsw i32 %36, 9, !dbg !26
  %93 = mul nsw i32 %37, 9, !dbg !26
  %94 = mul nsw i32 %38, 9, !dbg !26
  %95 = mul nsw i32 %39, 9, !dbg !26
  %96 = mul nsw i32 %40, 9, !dbg !26
  %97 = mul nsw i32 %41, 9, !dbg !26
  %98 = add i32 %90, %32, !dbg !27
  %99 = add i32 %91, %32, !dbg !27
  %100 = add i32 %32, %92, !dbg !27
  %101 = add i32 %32, %93, !dbg !27
  %102 = add i32 %32, %94, !dbg !27
  %103 = add i32 %32, %95, !dbg !27
  %104 = add i32 %32, %96, !dbg !27
  %105 = add i32 %32, %97, !dbg !27
  %106 = sext i32 %98 to i64, !dbg !28
  %107 = getelementptr float, ptr addrspace(1) %1, i64 %106, !dbg !28
  %108 = sext i32 %99 to i64, !dbg !28
  %109 = getelementptr float, ptr addrspace(1) %1, i64 %108, !dbg !28
  %110 = sext i32 %100 to i64, !dbg !28
  %111 = getelementptr float, ptr addrspace(1) %1, i64 %110, !dbg !28
  %112 = sext i32 %101 to i64, !dbg !28
  %113 = getelementptr float, ptr addrspace(1) %1, i64 %112, !dbg !28
  %114 = sext i32 %102 to i64, !dbg !28
  %115 = getelementptr float, ptr addrspace(1) %1, i64 %114, !dbg !28
  %116 = sext i32 %103 to i64, !dbg !28
  %117 = getelementptr float, ptr addrspace(1) %1, i64 %116, !dbg !28
  %118 = sext i32 %104 to i64, !dbg !28
  %119 = getelementptr float, ptr addrspace(1) %1, i64 %118, !dbg !28
  %120 = sext i32 %105 to i64, !dbg !28
  %121 = getelementptr float, ptr addrspace(1) %1, i64 %120, !dbg !28
  %122 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %107, i1 %74) #4, !dbg !29
  %123 = bitcast i32 %122 to float, !dbg !29
  %124 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %109, i1 %75) #4, !dbg !29
  %125 = bitcast i32 %124 to float, !dbg !29
  %126 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %111, i1 %76) #4, !dbg !29
  %127 = bitcast i32 %126 to float, !dbg !29
  %128 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %113, i1 %77) #4, !dbg !29
  %129 = bitcast i32 %128 to float, !dbg !29
  %130 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %115, i1 %78) #4, !dbg !29
  %131 = bitcast i32 %130 to float, !dbg !29
  %132 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %117, i1 %79) #4, !dbg !29
  %133 = bitcast i32 %132 to float, !dbg !29
  %134 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %119, i1 %80) #4, !dbg !29
  %135 = bitcast i32 %134 to float, !dbg !29
  %136 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %121, i1 %81) #4, !dbg !29
  %137 = bitcast i32 %136 to float, !dbg !29
  %138 = fadd float %123, 0x3E112E0BE0000000, !dbg !30
  %139 = fadd float %125, 0x3E112E0BE0000000, !dbg !30
  %140 = fadd float %127, 0x3E112E0BE0000000, !dbg !30
  %141 = fadd float %129, 0x3E112E0BE0000000, !dbg !30
  %142 = fadd float %131, 0x3E112E0BE0000000, !dbg !30
  %143 = fadd float %133, 0x3E112E0BE0000000, !dbg !30
  %144 = fadd float %135, 0x3E112E0BE0000000, !dbg !30
  %145 = fadd float %137, 0x3E112E0BE0000000, !dbg !30
  %146 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i = icmp eq i32 %146, 0, !dbg !31
  %147 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !31
  %.not1.i = icmp eq i32 %147, 0, !dbg !31
  br i1 %.not.i, label %153, label %148, !dbg !31

148:                                              ; preds = %6
  br i1 %.not1.i, label %151, label %149, !dbg !31

149:                                              ; preds = %148
  %150 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %138) #4, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

151:                                              ; preds = %148
  %152 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %138) #4, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

153:                                              ; preds = %6
  br i1 %.not1.i, label %156, label %154, !dbg !31

154:                                              ; preds = %153
  %155 = tail call float @llvm.nvvm.sqrt.rn.f(float %138) #4, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

156:                                              ; preds = %153
  %157 = tail call float @llvm.nvvm.sqrt.approx.f(float %138) #4, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

__nv_sqrtf.exit:                                  ; preds = %149, %151, %154, %156
  %.0.i = phi float [ %150, %149 ], [ %152, %151 ], [ %155, %154 ], [ %157, %156 ], !dbg !31
  %158 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i16 = icmp eq i32 %158, 0, !dbg !31
  %159 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !31
  %.not1.i19 = icmp eq i32 %159, 0, !dbg !31
  br i1 %.not.i16, label %165, label %160, !dbg !31

160:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i19, label %163, label %161, !dbg !31

161:                                              ; preds = %160
  %162 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %139) #4, !dbg !31
  br label %__nv_sqrtf.exit20, !dbg !31

163:                                              ; preds = %160
  %164 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %139) #4, !dbg !31
  br label %__nv_sqrtf.exit20, !dbg !31

165:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i19, label %168, label %166, !dbg !31

166:                                              ; preds = %165
  %167 = tail call float @llvm.nvvm.sqrt.rn.f(float %139) #4, !dbg !31
  br label %__nv_sqrtf.exit20, !dbg !31

168:                                              ; preds = %165
  %169 = tail call float @llvm.nvvm.sqrt.approx.f(float %139) #4, !dbg !31
  br label %__nv_sqrtf.exit20, !dbg !31

__nv_sqrtf.exit20:                                ; preds = %161, %163, %166, %168
  %.0.i18 = phi float [ %162, %161 ], [ %164, %163 ], [ %167, %166 ], [ %169, %168 ], !dbg !31
  %170 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i21 = icmp eq i32 %170, 0, !dbg !31
  %171 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !31
  %.not1.i24 = icmp eq i32 %171, 0, !dbg !31
  br i1 %.not.i21, label %177, label %172, !dbg !31

172:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %175, label %173, !dbg !31

173:                                              ; preds = %172
  %174 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %140) #4, !dbg !31
  br label %__nv_sqrtf.exit25, !dbg !31

175:                                              ; preds = %172
  %176 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %140) #4, !dbg !31
  br label %__nv_sqrtf.exit25, !dbg !31

177:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %180, label %178, !dbg !31

178:                                              ; preds = %177
  %179 = tail call float @llvm.nvvm.sqrt.rn.f(float %140) #4, !dbg !31
  br label %__nv_sqrtf.exit25, !dbg !31

180:                                              ; preds = %177
  %181 = tail call float @llvm.nvvm.sqrt.approx.f(float %140) #4, !dbg !31
  br label %__nv_sqrtf.exit25, !dbg !31

__nv_sqrtf.exit25:                                ; preds = %173, %175, %178, %180
  %.0.i23 = phi float [ %174, %173 ], [ %176, %175 ], [ %179, %178 ], [ %181, %180 ], !dbg !31
  %182 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i26 = icmp eq i32 %182, 0, !dbg !31
  %183 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !31
  %.not1.i29 = icmp eq i32 %183, 0, !dbg !31
  br i1 %.not.i26, label %189, label %184, !dbg !31

184:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %187, label %185, !dbg !31

185:                                              ; preds = %184
  %186 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %141) #4, !dbg !31
  br label %__nv_sqrtf.exit30, !dbg !31

187:                                              ; preds = %184
  %188 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %141) #4, !dbg !31
  br label %__nv_sqrtf.exit30, !dbg !31

189:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %192, label %190, !dbg !31

190:                                              ; preds = %189
  %191 = tail call float @llvm.nvvm.sqrt.rn.f(float %141) #4, !dbg !31
  br label %__nv_sqrtf.exit30, !dbg !31

192:                                              ; preds = %189
  %193 = tail call float @llvm.nvvm.sqrt.approx.f(float %141) #4, !dbg !31
  br label %__nv_sqrtf.exit30, !dbg !31

__nv_sqrtf.exit30:                                ; preds = %185, %187, %190, %192
  %.0.i28 = phi float [ %186, %185 ], [ %188, %187 ], [ %191, %190 ], [ %193, %192 ], !dbg !31
  %194 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i31 = icmp eq i32 %194, 0, !dbg !31
  %195 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !31
  %.not1.i34 = icmp eq i32 %195, 0, !dbg !31
  br i1 %.not.i31, label %201, label %196, !dbg !31

196:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %199, label %197, !dbg !31

197:                                              ; preds = %196
  %198 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %142) #4, !dbg !31
  br label %__nv_sqrtf.exit35, !dbg !31

199:                                              ; preds = %196
  %200 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %142) #4, !dbg !31
  br label %__nv_sqrtf.exit35, !dbg !31

201:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %204, label %202, !dbg !31

202:                                              ; preds = %201
  %203 = tail call float @llvm.nvvm.sqrt.rn.f(float %142) #4, !dbg !31
  br label %__nv_sqrtf.exit35, !dbg !31

204:                                              ; preds = %201
  %205 = tail call float @llvm.nvvm.sqrt.approx.f(float %142) #4, !dbg !31
  br label %__nv_sqrtf.exit35, !dbg !31

__nv_sqrtf.exit35:                                ; preds = %197, %199, %202, %204
  %.0.i33 = phi float [ %198, %197 ], [ %200, %199 ], [ %203, %202 ], [ %205, %204 ], !dbg !31
  %206 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i36 = icmp eq i32 %206, 0, !dbg !31
  %207 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !31
  %.not1.i39 = icmp eq i32 %207, 0, !dbg !31
  br i1 %.not.i36, label %213, label %208, !dbg !31

208:                                              ; preds = %__nv_sqrtf.exit35
  br i1 %.not1.i39, label %211, label %209, !dbg !31

209:                                              ; preds = %208
  %210 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %143) #4, !dbg !31
  br label %__nv_sqrtf.exit40, !dbg !31

211:                                              ; preds = %208
  %212 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %143) #4, !dbg !31
  br label %__nv_sqrtf.exit40, !dbg !31

213:                                              ; preds = %__nv_sqrtf.exit35
  br i1 %.not1.i39, label %216, label %214, !dbg !31

214:                                              ; preds = %213
  %215 = tail call float @llvm.nvvm.sqrt.rn.f(float %143) #4, !dbg !31
  br label %__nv_sqrtf.exit40, !dbg !31

216:                                              ; preds = %213
  %217 = tail call float @llvm.nvvm.sqrt.approx.f(float %143) #4, !dbg !31
  br label %__nv_sqrtf.exit40, !dbg !31

__nv_sqrtf.exit40:                                ; preds = %209, %211, %214, %216
  %.0.i38 = phi float [ %210, %209 ], [ %212, %211 ], [ %215, %214 ], [ %217, %216 ], !dbg !31
  %218 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i41 = icmp eq i32 %218, 0, !dbg !31
  %219 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !31
  %.not1.i44 = icmp eq i32 %219, 0, !dbg !31
  br i1 %.not.i41, label %225, label %220, !dbg !31

220:                                              ; preds = %__nv_sqrtf.exit40
  br i1 %.not1.i44, label %223, label %221, !dbg !31

221:                                              ; preds = %220
  %222 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %144) #4, !dbg !31
  br label %__nv_sqrtf.exit45, !dbg !31

223:                                              ; preds = %220
  %224 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %144) #4, !dbg !31
  br label %__nv_sqrtf.exit45, !dbg !31

225:                                              ; preds = %__nv_sqrtf.exit40
  br i1 %.not1.i44, label %228, label %226, !dbg !31

226:                                              ; preds = %225
  %227 = tail call float @llvm.nvvm.sqrt.rn.f(float %144) #4, !dbg !31
  br label %__nv_sqrtf.exit45, !dbg !31

228:                                              ; preds = %225
  %229 = tail call float @llvm.nvvm.sqrt.approx.f(float %144) #4, !dbg !31
  br label %__nv_sqrtf.exit45, !dbg !31

__nv_sqrtf.exit45:                                ; preds = %221, %223, %226, %228
  %.0.i43 = phi float [ %222, %221 ], [ %224, %223 ], [ %227, %226 ], [ %229, %228 ], !dbg !31
  %230 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i46 = icmp eq i32 %230, 0, !dbg !31
  %231 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !31
  %.not1.i49 = icmp eq i32 %231, 0, !dbg !31
  br i1 %.not.i46, label %237, label %232, !dbg !31

232:                                              ; preds = %__nv_sqrtf.exit45
  br i1 %.not1.i49, label %235, label %233, !dbg !31

233:                                              ; preds = %232
  %234 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %145) #4, !dbg !31
  br label %__nv_sqrtf.exit50, !dbg !31

235:                                              ; preds = %232
  %236 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %145) #4, !dbg !31
  br label %__nv_sqrtf.exit50, !dbg !31

237:                                              ; preds = %__nv_sqrtf.exit45
  br i1 %.not1.i49, label %240, label %238, !dbg !31

238:                                              ; preds = %237
  %239 = tail call float @llvm.nvvm.sqrt.rn.f(float %145) #4, !dbg !31
  br label %__nv_sqrtf.exit50, !dbg !31

240:                                              ; preds = %237
  %241 = tail call float @llvm.nvvm.sqrt.approx.f(float %145) #4, !dbg !31
  br label %__nv_sqrtf.exit50, !dbg !31

__nv_sqrtf.exit50:                                ; preds = %233, %235, %238, %240
  %.0.i48 = phi float [ %234, %233 ], [ %236, %235 ], [ %239, %238 ], [ %241, %240 ], !dbg !31
  %242 = bitcast i32 %89 to float, !dbg !25
  %243 = bitcast i32 %88 to float, !dbg !25
  %244 = bitcast i32 %87 to float, !dbg !25
  %245 = bitcast i32 %86 to float, !dbg !25
  %246 = bitcast i32 %85 to float, !dbg !25
  %247 = bitcast i32 %84 to float, !dbg !25
  %248 = bitcast i32 %83 to float, !dbg !25
  %249 = bitcast i32 %82 to float, !dbg !25
  %250 = or disjoint i32 %30, %12, !dbg !18
  %251 = icmp slt i32 %250, 9, !dbg !19
  %252 = shl i32 %9, 2, !dbg !12
  %253 = and i32 %252, 60, !dbg !12
  %254 = or disjoint i32 %8, %253, !dbg !13
  %255 = icmp slt i32 %254, 1536, !dbg !14
  %256 = and i1 %255, %251, !dbg !24
  %257 = or disjoint i32 %30, %11, !dbg !18
  %258 = icmp slt i32 %257, 9, !dbg !19
  %259 = and i1 %255, %258, !dbg !24
  %.frozen = freeze i32 %254, !dbg !20
  %260 = sdiv i32 %.frozen, 384, !dbg !20
  %261 = mul i32 %260, 384, !dbg !32
  %.decomposed = sub i32 %.frozen, %261, !dbg !32
  %262 = fadd float %.0.i, 0x3DDB7CDFE0000000, !dbg !33
  %263 = fadd float %.0.i18, 0x3DDB7CDFE0000000, !dbg !33
  %264 = fadd float %.0.i23, 0x3DDB7CDFE0000000, !dbg !33
  %265 = fadd float %.0.i28, 0x3DDB7CDFE0000000, !dbg !33
  %266 = fadd float %.0.i33, 0x3DDB7CDFE0000000, !dbg !33
  %267 = fadd float %.0.i38, 0x3DDB7CDFE0000000, !dbg !33
  %268 = fadd float %.0.i43, 0x3DDB7CDFE0000000, !dbg !33
  %269 = fadd float %.0.i48, 0x3DDB7CDFE0000000, !dbg !33
  %270 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %249, float %262) #4, !dbg !34
  %271 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %248, float %263) #4, !dbg !34
  %272 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %247, float %264) #4, !dbg !34
  %273 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %246, float %265) #4, !dbg !34
  %274 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %245, float %266) #4, !dbg !34
  %275 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %244, float %267) #4, !dbg !34
  %276 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %243, float %268) #4, !dbg !34
  %277 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %242, float %269) #4, !dbg !34
  %278 = getelementptr float, ptr addrspace(1) %2, i64 %58, !dbg !35
  %279 = getelementptr float, ptr addrspace(1) %2, i64 %60, !dbg !35
  %280 = getelementptr float, ptr addrspace(1) %2, i64 %62, !dbg !35
  %281 = getelementptr float, ptr addrspace(1) %2, i64 %64, !dbg !35
  %282 = getelementptr float, ptr addrspace(1) %2, i64 %66, !dbg !35
  %283 = getelementptr float, ptr addrspace(1) %2, i64 %68, !dbg !35
  %284 = getelementptr float, ptr addrspace(1) %2, i64 %70, !dbg !35
  %285 = getelementptr float, ptr addrspace(1) %2, i64 %72, !dbg !35
  %286 = bitcast float %270 to i32, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %286, ptr addrspace(1) %278, i1 %74) #4, !dbg !36
  %287 = bitcast float %271 to i32, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %287, ptr addrspace(1) %279, i1 %75) #4, !dbg !36
  %288 = bitcast float %272 to i32, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %288, ptr addrspace(1) %280, i1 %76) #4, !dbg !36
  %289 = bitcast float %273 to i32, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %289, ptr addrspace(1) %281, i1 %77) #4, !dbg !36
  %290 = bitcast float %274 to i32, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %290, ptr addrspace(1) %282, i1 %78) #4, !dbg !36
  %291 = bitcast float %275 to i32, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %291, ptr addrspace(1) %283, i1 %79) #4, !dbg !36
  %292 = bitcast float %276 to i32, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %292, ptr addrspace(1) %284, i1 %80) #4, !dbg !36
  %293 = bitcast float %277 to i32, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %293, ptr addrspace(1) %285, i1 %81) #4, !dbg !36
  %294 = mul i32 %257, 384, !dbg !37
  %295 = mul i32 %250, 384, !dbg !37
  %296 = mul i32 %260, 3456, !dbg !38
  %297 = add i32 %296, %.decomposed, !dbg !39
  %298 = add i32 %297, %294, !dbg !40
  %299 = add i32 %297, %295, !dbg !40
  %300 = sext i32 %298 to i64, !dbg !41
  %301 = getelementptr float, ptr addrspace(1) %3, i64 %300, !dbg !41
  %302 = sext i32 %299 to i64, !dbg !41
  %303 = getelementptr float, ptr addrspace(1) %3, i64 %302, !dbg !41
  %304 = shl i32 %9, 6, !dbg !42
  %305 = and i32 %304, 960, !dbg !42
  %306 = or disjoint i32 %305, %11, !dbg !42
  %307 = and i32 %252, 508, !dbg !42
  %308 = lshr exact i32 %305, 4, !dbg !42
  %309 = add nuw nsw i32 %308, %306, !dbg !42
  %310 = zext nneg i32 %309 to i64, !dbg !42
  %311 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %310, !dbg !42
  %312 = insertelement <1 x i32> poison, i32 %82, i64 0, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %311, <1 x i32> %312, i1 true) #4, !dbg !42
  %313 = or disjoint i32 %306, 8, !dbg !42
  %314 = add nuw nsw i32 %313, %308, !dbg !42
  %315 = zext nneg i32 %314 to i64, !dbg !42
  %316 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %315, !dbg !42
  %317 = insertelement <1 x i32> poison, i32 %83, i64 0, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %316, <1 x i32> %317, i1 true) #4, !dbg !42
  %318 = or disjoint i32 %306, 16, !dbg !42
  %319 = add nuw nsw i32 %318, %308, !dbg !42
  %320 = zext nneg i32 %319 to i64, !dbg !42
  %321 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %320, !dbg !42
  %322 = insertelement <1 x i32> poison, i32 %84, i64 0, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %321, <1 x i32> %322, i1 true) #4, !dbg !42
  %323 = or disjoint i32 %306, 24, !dbg !42
  %324 = add nuw nsw i32 %323, %308, !dbg !42
  %325 = zext nneg i32 %324 to i64, !dbg !42
  %326 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %325, !dbg !42
  %327 = insertelement <1 x i32> poison, i32 %85, i64 0, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %326, <1 x i32> %327, i1 true) #4, !dbg !42
  %328 = or disjoint i32 %306, 32, !dbg !42
  %329 = add nuw nsw i32 %328, %308, !dbg !42
  %330 = zext nneg i32 %329 to i64, !dbg !42
  %331 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %330, !dbg !42
  %332 = insertelement <1 x i32> poison, i32 %86, i64 0, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %331, <1 x i32> %332, i1 true) #4, !dbg !42
  %333 = or disjoint i32 %306, 40, !dbg !42
  %334 = add nuw nsw i32 %333, %308, !dbg !42
  %335 = zext nneg i32 %334 to i64, !dbg !42
  %336 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %335, !dbg !42
  %337 = insertelement <1 x i32> poison, i32 %87, i64 0, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %336, <1 x i32> %337, i1 true) #4, !dbg !42
  %338 = or disjoint i32 %306, 48, !dbg !42
  %339 = add nuw nsw i32 %338, %308, !dbg !42
  %340 = zext nneg i32 %339 to i64, !dbg !42
  %341 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %340, !dbg !42
  %342 = insertelement <1 x i32> poison, i32 %88, i64 0, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %341, <1 x i32> %342, i1 true) #4, !dbg !42
  %343 = or disjoint i32 %306, 56, !dbg !42
  %344 = add nuw nsw i32 %343, %308, !dbg !42
  %345 = zext nneg i32 %344 to i64, !dbg !42
  %346 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %345, !dbg !42
  %347 = insertelement <1 x i32> poison, i32 %89, i64 0, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %346, <1 x i32> %347, i1 true) #4, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %348 = lshr i32 %252, 4, !dbg !42
  %349 = and i32 %348, 28, !dbg !42
  %350 = add nuw nsw i32 %349, %307, !dbg !42
  %351 = zext nneg i32 %350 to i64, !dbg !42
  %352 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %351, !dbg !42
  %353 = or disjoint i32 %307, 512, !dbg !42
  %354 = lshr i32 %353, 4, !dbg !42
  %355 = and i32 %354, 60, !dbg !42
  %356 = add nuw nsw i32 %355, %353, !dbg !42
  %357 = zext nneg i32 %356 to i64, !dbg !42
  %358 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %357, !dbg !42
  %359 = load <4 x i32>, ptr addrspace(3) %358, align 16, !dbg !42
  %.extract = load i32, ptr addrspace(3) %352, align 16, !dbg !42
  %360 = getelementptr inbounds i8, ptr addrspace(3) %352, i64 4, !dbg !42
  %.extract9 = load i32, ptr addrspace(3) %360, align 4, !dbg !42
  %361 = getelementptr inbounds i8, ptr addrspace(3) %352, i64 8, !dbg !42
  %.extract10 = load i32, ptr addrspace(3) %361, align 8, !dbg !42
  %362 = getelementptr inbounds i8, ptr addrspace(3) %352, i64 12, !dbg !42
  %.extract11 = load i32, ptr addrspace(3) %362, align 4, !dbg !42
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract9, i32 %.extract10, i32 %.extract11, ptr addrspace(1) %301, i1 %259) #4, !dbg !42
  %.extract12 = extractelement <4 x i32> %359, i64 0, !dbg !42
  %.extract13 = extractelement <4 x i32> %359, i64 1, !dbg !42
  %.extract14 = extractelement <4 x i32> %359, i64 2, !dbg !42
  %.extract15 = extractelement <4 x i32> %359, i64 3, !dbg !42
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract12, i32 %.extract13, i32 %.extract14, i32 %.extract15, ptr addrspace(1) %303, i1 %256) #4, !dbg !42
  ret void, !dbg !43
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cdvuhjwd6e5fwikxsykcegooshh5i3w66grisz4a5ashtmni5j6e.py", directory: "inductor_cache/dv")
!4 = !{ptr @triton_poi_fused_add_convolution_div_sqrt_25, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_convolution_div_sqrt_25, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_convolution_div_sqrt_25", linkageName: "triton_poi_fused_add_convolution_div_sqrt_25", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 37, scope: !7)
!22 = !DILocation(line: 32, column: 35, scope: !7)
!23 = !DILocation(line: 32, column: 30, scope: !7)
!24 = !DILocation(line: 32, column: 50, scope: !7)
!25 = !DILocation(line: 32, column: 42, scope: !7)
!26 = !DILocation(line: 33, column: 37, scope: !7)
!27 = !DILocation(line: 33, column: 35, scope: !7)
!28 = !DILocation(line: 33, column: 30, scope: !7)
!29 = !DILocation(line: 33, column: 42, scope: !7)
!30 = !DILocation(line: 35, column: 18, scope: !7)
!31 = !DILocation(line: 36, column: 26, scope: !7)
!32 = !DILocation(line: 31, column: 19, scope: !7)
!33 = !DILocation(line: 38, column: 18, scope: !7)
!34 = !DILocation(line: 39, column: 18, scope: !7)
!35 = !DILocation(line: 40, column: 25, scope: !7)
!36 = !DILocation(line: 40, column: 43, scope: !7)
!37 = !DILocation(line: 41, column: 34, scope: !7)
!38 = !DILocation(line: 41, column: 44, scope: !7)
!39 = !DILocation(line: 41, column: 30, scope: !7)
!40 = !DILocation(line: 41, column: 39, scope: !7)
!41 = !DILocation(line: 41, column: 25, scope: !7)
!42 = !DILocation(line: 41, column: 55, scope: !7)
!43 = !DILocation(line: 41, column: 4, scope: !7)
