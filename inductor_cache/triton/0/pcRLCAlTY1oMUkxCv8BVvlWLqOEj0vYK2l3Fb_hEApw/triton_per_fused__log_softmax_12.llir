; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused__log_softmax_12(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !10
  %6 = shl i32 %5, 3, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = and i32 %7, 28, !dbg !12
  %9 = shl i32 %7, 1, !dbg !12
  %10 = and i32 %9, 6, !dbg !12
  %11 = lshr i32 %7, 5, !dbg !12
  %12 = or disjoint i32 %6, %10, !dbg !13
  %13 = icmp slt i32 %12, 400, !dbg !14
  %14 = lshr i32 %7, 2, !dbg !15
  %15 = and i32 %14, 15, !dbg !15
  %16 = icmp samesign ult i32 %15, 10, !dbg !16
  %.frozen = freeze i32 %12, !dbg !17
  %17 = sdiv i32 %.frozen, 10, !dbg !17
  %18 = mul i32 %17, 10, !dbg !18
  %.decomposed = sub i32 %.frozen, %18, !dbg !18
  %19 = mul nuw nsw i32 %15, 10, !dbg !19
  %20 = add nsw i32 %.decomposed, %19, !dbg !20
  %21 = mul i32 %17, 100, !dbg !21
  %22 = add i32 %20, %21, !dbg !22
  %23 = sext i32 %22 to i64, !dbg !23
  %24 = getelementptr float, ptr addrspace(1) %0, i64 %23, !dbg !23
  %25 = and i1 %16, %13, !dbg !24
  %26 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %24, i1 %25, i32 0, i1 %25, i32 0, i1 %25) #4, !dbg !25
  %27 = extractvalue { i32, i32 } %26, 0, !dbg !25
  %28 = extractvalue { i32, i32 } %26, 1, !dbg !25
  %29 = bitcast i32 %27 to float, !dbg !25
  %30 = bitcast i32 %28 to float, !dbg !25
  %31 = select i1 %25, float %29, float 0xFFF0000000000000, !dbg !26
  %32 = select i1 %25, float %30, float 0xFFF0000000000000, !dbg !26
  %33 = bitcast float %31 to i32, !dbg !27
  %34 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %33, i32 16, i32 31), !dbg !27
  %35 = bitcast i32 %34 to float, !dbg !27
  %36 = fcmp ogt float %31, %35, !dbg !31
  %37 = fcmp uno float %31, 0.000000e+00, !dbg !33
  %38 = or i1 %36, %37, !dbg !34
  %39 = select i1 %38, float %31, float %35, !dbg !35
  %40 = bitcast float %39 to i32, !dbg !27
  %41 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %40, i32 8, i32 31), !dbg !27
  %42 = bitcast i32 %41 to float, !dbg !27
  %43 = fcmp ogt float %39, %42, !dbg !31
  %44 = fcmp uno float %39, 0.000000e+00, !dbg !33
  %45 = or i1 %43, %44, !dbg !34
  %46 = select i1 %45, float %39, float %42, !dbg !35
  %47 = bitcast float %46 to i32, !dbg !27
  %48 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %47, i32 4, i32 31), !dbg !27
  %49 = bitcast i32 %48 to float, !dbg !27
  %50 = fcmp ogt float %46, %49, !dbg !31
  %51 = fcmp uno float %46, 0.000000e+00, !dbg !33
  %52 = or i1 %50, %51, !dbg !34
  %53 = bitcast float %32 to i32, !dbg !27
  %54 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %53, i32 16, i32 31), !dbg !27
  %55 = bitcast i32 %54 to float, !dbg !27
  %56 = fcmp ogt float %32, %55, !dbg !31
  %57 = fcmp uno float %32, 0.000000e+00, !dbg !33
  %58 = or i1 %57, %56, !dbg !34
  %59 = select i1 %58, float %32, float %55, !dbg !35
  %60 = bitcast float %59 to i32, !dbg !27
  %61 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %60, i32 8, i32 31), !dbg !27
  %62 = bitcast i32 %61 to float, !dbg !27
  %63 = fcmp ogt float %59, %62, !dbg !31
  %64 = fcmp uno float %59, 0.000000e+00, !dbg !33
  %65 = or i1 %63, %64, !dbg !34
  %66 = select i1 %65, float %59, float %62, !dbg !35
  %67 = bitcast float %66 to i32, !dbg !27
  %68 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %67, i32 4, i32 31), !dbg !27
  %69 = bitcast i32 %68 to float, !dbg !27
  %70 = fcmp ogt float %66, %69, !dbg !31
  %71 = fcmp uno float %66, 0.000000e+00, !dbg !33
  %72 = or i1 %70, %71, !dbg !34
  %73 = icmp eq i32 %8, 0, !dbg !27
  %74 = and i32 %11, 1, !dbg !27
  %75 = shl nuw nsw i32 %10, 1, !dbg !27
  %76 = or disjoint i32 %75, %74, !dbg !27
  %77 = getelementptr float, ptr addrspace(3) @global_smem, i32 %76, !dbg !27
  %78 = select i1 %52, i32 %47, i32 %48, !dbg !35
  %79 = insertelement <1 x i32> poison, i32 %78, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %77, <1 x i32> %79, i1 %73) #4, !dbg !27
  %80 = or disjoint i32 %75, 2, !dbg !27
  %81 = or disjoint i32 %80, %74, !dbg !27
  %82 = getelementptr float, ptr addrspace(3) @global_smem, i32 %81, !dbg !27
  %83 = select i1 %72, i32 %67, i32 %68, !dbg !35
  %84 = insertelement <1 x i32> poison, i32 %83, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %82, <1 x i32> %84, i1 %73) #4, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %85 = icmp slt i32 %7, 16, !dbg !27
  %86 = getelementptr float, ptr addrspace(3) @global_smem, i32 %7, !dbg !27
  %87 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %86, i1 %85) #4, !dbg !27
  %88 = bitcast i32 %87 to float, !dbg !27
  %89 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %87, i32 1, i32 31), !dbg !27
  %90 = bitcast i32 %89 to float, !dbg !27
  %91 = fcmp ogt float %88, %90, !dbg !31
  %92 = fcmp uno float %88, 0.000000e+00, !dbg !33
  %93 = or i1 %92, %91, !dbg !34
  %94 = and i32 %7, 1, !dbg !27
  %95 = icmp eq i32 %94, 0, !dbg !27
  %96 = and i1 %85, %95, !dbg !27
  %97 = select i1 %93, i32 %87, i32 %89, !dbg !35
  %98 = insertelement <1 x i32> poison, i32 %97, i64 0, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %86, <1 x i32> %98, i1 %96) #4, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %99 = getelementptr float, ptr addrspace(3) @global_smem, i32 %75, !dbg !27
  %100 = load float, ptr addrspace(3) %99, align 16, !dbg !27
  %101 = getelementptr float, ptr addrspace(3) @global_smem, i32 %80, !dbg !27
  %102 = load float, ptr addrspace(3) %101, align 8, !dbg !27
  %103 = fsub float %29, %100, !dbg !36
  %104 = fsub float %30, %102, !dbg !36
  %105 = fmul float %103, 0x3FF7154760000000, !dbg !37
  %106 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %105) #4, !dbg !37
  %107 = fmul float %104, 0x3FF7154760000000, !dbg !37
  %108 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %107) #4, !dbg !37
  %109 = select i1 %25, float %106, float 0.000000e+00, !dbg !38
  %110 = select i1 %25, float %108, float 0.000000e+00, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %111 = bitcast float %109 to i32, !dbg !39
  %112 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %111, i32 16, i32 31), !dbg !39
  %113 = bitcast i32 %112 to float, !dbg !39
  %114 = fadd float %109, %113, !dbg !43
  %115 = bitcast float %114 to i32, !dbg !39
  %116 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %115, i32 8, i32 31), !dbg !39
  %117 = bitcast i32 %116 to float, !dbg !39
  %118 = fadd float %114, %117, !dbg !43
  %119 = bitcast float %118 to i32, !dbg !39
  %120 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %119, i32 4, i32 31), !dbg !39
  %121 = bitcast i32 %120 to float, !dbg !39
  %122 = fadd float %118, %121, !dbg !43
  %123 = bitcast float %110 to i32, !dbg !39
  %124 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %123, i32 16, i32 31), !dbg !39
  %125 = bitcast i32 %124 to float, !dbg !39
  %126 = fadd float %110, %125, !dbg !43
  %127 = bitcast float %126 to i32, !dbg !39
  %128 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %127, i32 8, i32 31), !dbg !39
  %129 = bitcast i32 %128 to float, !dbg !39
  %130 = fadd float %126, %129, !dbg !43
  %131 = bitcast float %130 to i32, !dbg !39
  %132 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %131, i32 4, i32 31), !dbg !39
  %133 = bitcast i32 %132 to float, !dbg !39
  %134 = fadd float %130, %133, !dbg !43
  %135 = bitcast float %122 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %77, <1 x i32> %135, i1 %73) #4, !dbg !39
  %136 = bitcast float %134 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %82, <1 x i32> %136, i1 %73) #4, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %137 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %86, i1 %85) #4, !dbg !39
  %138 = bitcast i32 %137 to float, !dbg !39
  %139 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %137, i32 1, i32 31), !dbg !39
  %140 = bitcast i32 %139 to float, !dbg !39
  %141 = fadd float %138, %140, !dbg !43
  %142 = bitcast float %141 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %86, <1 x i32> %142, i1 %96) #4, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %143 = load float, ptr addrspace(3) %99, align 16, !dbg !39
  %144 = load float, ptr addrspace(3) %101, align 8, !dbg !39
  %145 = fcmp olt float %143, 0x3810000000000000, !dbg !45
  %146 = fmul float %143, 0x4160000000000000, !dbg !45
  %.02.i = select i1 %145, float %146, float %143, !dbg !45
  %i.i.0.i = select i1 %145, float -2.300000e+01, float 0.000000e+00, !dbg !45
  %147 = bitcast float %.02.i to i32, !dbg !45
  %148 = add i32 %147, -1059760811, !dbg !45
  %149 = and i32 %148, -8388608, !dbg !45
  %150 = sub i32 %147, %149, !dbg !45
  %151 = bitcast i32 %150 to float, !dbg !45
  %152 = sitofp i32 %149 to float, !dbg !45
  %153 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not.i = icmp eq i32 %153, 0, !dbg !45
  %154 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %152, float 0x3E80000000000000, float %i.i.0.i) #4, !dbg !45
  %155 = tail call float @llvm.nvvm.fma.rn.f(float %152, float 0x3E80000000000000, float %i.i.0.i) #4, !dbg !45
  %.08.i = select i1 %.not.i, float %155, float %154, !dbg !45
  %156 = fadd float %151, -1.000000e+00, !dbg !45
  %157 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not1.i = icmp eq i32 %157, 0, !dbg !45
  %158 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0xBFC0AA04E0000000, float %156, float 0x3FC2073EC0000000) #4, !dbg !45
  %159 = tail call float @llvm.nvvm.fma.rn.f(float 0xBFC0AA04E0000000, float %156, float 0x3FC2073EC0000000) #4, !dbg !45
  %.010.i = select i1 %.not1.i, float %159, float %158, !dbg !45
  %160 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not2.i = icmp eq i32 %160, 0, !dbg !45
  %161 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.010.i, float %156, float 0xBFBF19B980000000) #4, !dbg !45
  %162 = tail call float @llvm.nvvm.fma.rn.f(float %.010.i, float %156, float 0xBFBF19B980000000) #4, !dbg !45
  %.011.i = select i1 %.not2.i, float %162, float %161, !dbg !45
  %163 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not3.i = icmp eq i32 %163, 0, !dbg !45
  %164 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.011.i, float %156, float 0x3FC1E52AA0000000) #4, !dbg !45
  %165 = tail call float @llvm.nvvm.fma.rn.f(float %.011.i, float %156, float 0x3FC1E52AA0000000) #4, !dbg !45
  %.012.i = select i1 %.not3.i, float %165, float %164, !dbg !45
  %166 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not4.i = icmp eq i32 %166, 0, !dbg !45
  %167 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.012.i, float %156, float 0xBFC55B1720000000) #4, !dbg !45
  %168 = tail call float @llvm.nvvm.fma.rn.f(float %.012.i, float %156, float 0xBFC55B1720000000) #4, !dbg !45
  %.09.i = select i1 %.not4.i, float %168, float %167, !dbg !45
  %169 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not5.i = icmp eq i32 %169, 0, !dbg !45
  %170 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.09.i, float %156, float 0x3FC99DA160000000) #4, !dbg !45
  %171 = tail call float @llvm.nvvm.fma.rn.f(float %.09.i, float %156, float 0x3FC99DA160000000) #4, !dbg !45
  %.05.i = select i1 %.not5.i, float %171, float %170, !dbg !45
  %172 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not6.i = icmp eq i32 %172, 0, !dbg !45
  %173 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i, float %156, float 0xBFCFFFE440000000) #4, !dbg !45
  %174 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i, float %156, float 0xBFCFFFE440000000) #4, !dbg !45
  %.01.i = select i1 %.not6.i, float %174, float %173, !dbg !45
  %175 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not7.i = icmp eq i32 %175, 0, !dbg !45
  %176 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.01.i, float %156, float 0x3FD5554F00000000) #4, !dbg !45
  %177 = tail call float @llvm.nvvm.fma.rn.f(float %.01.i, float %156, float 0x3FD5554F00000000) #4, !dbg !45
  %.0.i = select i1 %.not7.i, float %177, float %176, !dbg !45
  %178 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not8.i = icmp eq i32 %178, 0, !dbg !45
  %179 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i, float %156, float -5.000000e-01) #4, !dbg !45
  %180 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i, float %156, float -5.000000e-01) #4, !dbg !45
  %.07.i = select i1 %.not8.i, float %180, float %179, !dbg !45
  %181 = fmul float %156, %.07.i, !dbg !45
  %182 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not9.i = icmp eq i32 %182, 0, !dbg !45
  %183 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %181, float %156, float %156) #4, !dbg !45
  %184 = tail call float @llvm.nvvm.fma.rn.f(float %181, float %156, float %156) #4, !dbg !45
  %.06.i = select i1 %.not9.i, float %184, float %183, !dbg !45
  %185 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not10.i = icmp eq i32 %185, 0, !dbg !45
  %186 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.08.i, float 0x3FE62E4300000000, float %.06.i) #4, !dbg !45
  %187 = tail call float @llvm.nvvm.fma.rn.f(float %.08.i, float 0x3FE62E4300000000, float %.06.i) #4, !dbg !45
  %.04.i = select i1 %.not10.i, float %187, float %186, !dbg !45
  %188 = icmp ugt i32 %147, 2139095039, !dbg !45
  br i1 %188, label %__nv_fmaf_rn.exit.i.i, label %__nv_logf.exit, !dbg !45

__nv_fmaf_rn.exit.i.i:                            ; preds = %4
  %189 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not11.i = icmp eq i32 %189, 0, !dbg !45
  %190 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i, float 0x7FF0000000000000, float 0x7FF0000000000000) #4, !dbg !45
  %191 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i, float 0x7FF0000000000000, float 0x7FF0000000000000) #4, !dbg !45
  %.03.i = select i1 %.not11.i, float %191, float %190, !dbg !45
  br label %__nv_logf.exit, !dbg !45

__nv_logf.exit:                                   ; preds = %4, %__nv_fmaf_rn.exit.i.i
  %r.i.0.i = phi float [ %.03.i, %__nv_fmaf_rn.exit.i.i ], [ %.04.i, %4 ], !dbg !45
  %192 = fcmp olt float %144, 0x3810000000000000, !dbg !45
  %193 = fmul float %144, 0x4160000000000000, !dbg !45
  %.02.i5 = select i1 %192, float %193, float %144, !dbg !45
  %i.i.0.i6 = select i1 %192, float -2.300000e+01, float 0.000000e+00, !dbg !45
  %194 = bitcast float %.02.i5 to i32, !dbg !45
  %195 = add i32 %194, -1059760811, !dbg !45
  %196 = and i32 %195, -8388608, !dbg !45
  %197 = sub i32 %194, %196, !dbg !45
  %198 = bitcast i32 %197 to float, !dbg !45
  %199 = sitofp i32 %196 to float, !dbg !45
  %200 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not.i7 = icmp eq i32 %200, 0, !dbg !45
  %201 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %199, float 0x3E80000000000000, float %i.i.0.i6) #4, !dbg !45
  %202 = tail call float @llvm.nvvm.fma.rn.f(float %199, float 0x3E80000000000000, float %i.i.0.i6) #4, !dbg !45
  %.08.i8 = select i1 %.not.i7, float %202, float %201, !dbg !45
  %203 = fadd float %198, -1.000000e+00, !dbg !45
  %204 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not1.i9 = icmp eq i32 %204, 0, !dbg !45
  %205 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0xBFC0AA04E0000000, float %203, float 0x3FC2073EC0000000) #4, !dbg !45
  %206 = tail call float @llvm.nvvm.fma.rn.f(float 0xBFC0AA04E0000000, float %203, float 0x3FC2073EC0000000) #4, !dbg !45
  %.010.i10 = select i1 %.not1.i9, float %206, float %205, !dbg !45
  %207 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not2.i11 = icmp eq i32 %207, 0, !dbg !45
  %208 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.010.i10, float %203, float 0xBFBF19B980000000) #4, !dbg !45
  %209 = tail call float @llvm.nvvm.fma.rn.f(float %.010.i10, float %203, float 0xBFBF19B980000000) #4, !dbg !45
  %.011.i12 = select i1 %.not2.i11, float %209, float %208, !dbg !45
  %210 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not3.i13 = icmp eq i32 %210, 0, !dbg !45
  %211 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.011.i12, float %203, float 0x3FC1E52AA0000000) #4, !dbg !45
  %212 = tail call float @llvm.nvvm.fma.rn.f(float %.011.i12, float %203, float 0x3FC1E52AA0000000) #4, !dbg !45
  %.012.i14 = select i1 %.not3.i13, float %212, float %211, !dbg !45
  %213 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not4.i15 = icmp eq i32 %213, 0, !dbg !45
  %214 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.012.i14, float %203, float 0xBFC55B1720000000) #4, !dbg !45
  %215 = tail call float @llvm.nvvm.fma.rn.f(float %.012.i14, float %203, float 0xBFC55B1720000000) #4, !dbg !45
  %.09.i16 = select i1 %.not4.i15, float %215, float %214, !dbg !45
  %216 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not5.i17 = icmp eq i32 %216, 0, !dbg !45
  %217 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.09.i16, float %203, float 0x3FC99DA160000000) #4, !dbg !45
  %218 = tail call float @llvm.nvvm.fma.rn.f(float %.09.i16, float %203, float 0x3FC99DA160000000) #4, !dbg !45
  %.05.i18 = select i1 %.not5.i17, float %218, float %217, !dbg !45
  %219 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not6.i19 = icmp eq i32 %219, 0, !dbg !45
  %220 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i18, float %203, float 0xBFCFFFE440000000) #4, !dbg !45
  %221 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i18, float %203, float 0xBFCFFFE440000000) #4, !dbg !45
  %.01.i20 = select i1 %.not6.i19, float %221, float %220, !dbg !45
  %222 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not7.i21 = icmp eq i32 %222, 0, !dbg !45
  %223 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.01.i20, float %203, float 0x3FD5554F00000000) #4, !dbg !45
  %224 = tail call float @llvm.nvvm.fma.rn.f(float %.01.i20, float %203, float 0x3FD5554F00000000) #4, !dbg !45
  %.0.i22 = select i1 %.not7.i21, float %224, float %223, !dbg !45
  %225 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not8.i23 = icmp eq i32 %225, 0, !dbg !45
  %226 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i22, float %203, float -5.000000e-01) #4, !dbg !45
  %227 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i22, float %203, float -5.000000e-01) #4, !dbg !45
  %.07.i24 = select i1 %.not8.i23, float %227, float %226, !dbg !45
  %228 = fmul float %203, %.07.i24, !dbg !45
  %229 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not9.i25 = icmp eq i32 %229, 0, !dbg !45
  %230 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %228, float %203, float %203) #4, !dbg !45
  %231 = tail call float @llvm.nvvm.fma.rn.f(float %228, float %203, float %203) #4, !dbg !45
  %.06.i26 = select i1 %.not9.i25, float %231, float %230, !dbg !45
  %232 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not10.i27 = icmp eq i32 %232, 0, !dbg !45
  %233 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.08.i8, float 0x3FE62E4300000000, float %.06.i26) #4, !dbg !45
  %234 = tail call float @llvm.nvvm.fma.rn.f(float %.08.i8, float 0x3FE62E4300000000, float %.06.i26) #4, !dbg !45
  %.04.i28 = select i1 %.not10.i27, float %234, float %233, !dbg !45
  %235 = icmp ugt i32 %194, 2139095039, !dbg !45
  br i1 %235, label %__nv_fmaf_rn.exit.i.i31, label %__nv_logf.exit34, !dbg !45

__nv_fmaf_rn.exit.i.i31:                          ; preds = %__nv_logf.exit
  %236 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not11.i32 = icmp eq i32 %236, 0, !dbg !45
  %237 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i5, float 0x7FF0000000000000, float 0x7FF0000000000000) #4, !dbg !45
  %238 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i5, float 0x7FF0000000000000, float 0x7FF0000000000000) #4, !dbg !45
  %.03.i33 = select i1 %.not11.i32, float %238, float %237, !dbg !45
  br label %__nv_logf.exit34, !dbg !45

__nv_logf.exit34:                                 ; preds = %__nv_logf.exit, %__nv_fmaf_rn.exit.i.i31
  %r.i.0.i29 = phi float [ %.03.i33, %__nv_fmaf_rn.exit.i.i31 ], [ %.04.i28, %__nv_logf.exit ], !dbg !45
  %239 = fcmp oeq float %.02.i, 0.000000e+00, !dbg !45
  %r.i.1.i = select i1 %239, float 0xFFF0000000000000, float %r.i.0.i, !dbg !45
  %240 = and i32 %9, 14, !dbg !15
  %241 = icmp samesign ult i32 %240, 10, !dbg !16
  %242 = lshr i32 %7, 3, !dbg !12
  %243 = and i32 %242, 7, !dbg !12
  %244 = or disjoint i32 %6, %243, !dbg !13
  %245 = icmp slt i32 %244, 400, !dbg !14
  %246 = and i1 %241, %245, !dbg !24
  %247 = sdiv i32 %244, 100, !dbg !46
  %.frozen35 = freeze i32 %244, !dbg !17
  %248 = sdiv i32 %.frozen35, 10, !dbg !17
  %249 = srem i32 %248, 10, !dbg !47
  %250 = mul i32 %248, 10, !dbg !18
  %.decomposed36 = sub i32 %.frozen35, %250, !dbg !18
  %251 = fcmp oeq float %.02.i5, 0.000000e+00, !dbg !45
  %r.i.1.i30 = select i1 %251, float 0xFFF0000000000000, float %r.i.0.i29, !dbg !45
  %252 = fsub float %103, %r.i.1.i, !dbg !48
  %253 = fsub float %104, %r.i.1.i30, !dbg !48
  %254 = mul nsw i32 %249, 10, !dbg !49
  %255 = mul nsw i32 %.decomposed36, 100, !dbg !50
  %256 = mul i32 %247, 1000, !dbg !51
  %257 = add nsw i32 %255, %240, !dbg !52
  %258 = add i32 %257, %256, !dbg !53
  %259 = add i32 %258, %254, !dbg !54
  %260 = sext i32 %259 to i64, !dbg !55
  %261 = getelementptr float, ptr addrspace(1) %1, i64 %260, !dbg !55
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  %262 = shl i32 %7, 5, !dbg !56
  %263 = and i32 %262, 96, !dbg !56
  %264 = or disjoint i32 %263, %15, !dbg !56
  %265 = and i32 %9, 126, !dbg !56
  %266 = lshr exact i32 %263, 1, !dbg !56
  %267 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %266, !dbg !56
  %268 = getelementptr inbounds float, ptr addrspace(3) %267, i32 %264, !dbg !56
  %269 = bitcast float %252 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %268, <1 x i32> %269, i1 true) #4, !dbg !56
  %270 = or disjoint i32 %264, 16, !dbg !56
  %271 = lshr i32 %270, 3, !dbg !56
  %272 = and i32 %271, 14, !dbg !56
  %273 = getelementptr float, ptr addrspace(3) @global_smem, i32 %272, !dbg !56
  %274 = getelementptr float, ptr addrspace(3) %273, i32 %270, !dbg !56
  %275 = bitcast float %253 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %274, <1 x i32> %275, i1 true) #4, !dbg !56
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  %276 = lshr i32 %9, 3, !dbg !56
  %277 = and i32 %276, 14, !dbg !56
  %278 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %277, !dbg !56
  %279 = getelementptr inbounds float, ptr addrspace(3) %278, i32 %265, !dbg !56
  %.extract = load i32, ptr addrspace(3) %279, align 8, !dbg !56
  %280 = getelementptr inbounds i8, ptr addrspace(3) %279, i32 4, !dbg !56
  %.extract4 = load i32, ptr addrspace(3) %280, align 4, !dbg !56
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract, i32 %.extract4, ptr addrspace(1) %261, i1 %246) #4, !dbg !56
  ret void, !dbg !57
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cl5qdgzbjrig5bbojivrthwbvd4i3ou5ysya2c2c7mpuf5mz4yjz.py", directory: "inductor_cache/l5")
!4 = !{ptr @triton_per_fused__log_softmax_12, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__log_softmax_12, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__log_softmax_12", linkageName: "triton_per_fused__log_softmax_12", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 28, column: 21, scope: !7)
!17 = !DILocation(line: 31, column: 19, scope: !7)
!18 = !DILocation(line: 30, column: 19, scope: !7)
!19 = !DILocation(line: 35, column: 38, scope: !7)
!20 = !DILocation(line: 35, column: 35, scope: !7)
!21 = !DILocation(line: 35, column: 47, scope: !7)
!22 = !DILocation(line: 35, column: 43, scope: !7)
!23 = !DILocation(line: 35, column: 30, scope: !7)
!24 = !DILocation(line: 35, column: 60, scope: !7)
!25 = !DILocation(line: 35, column: 52, scope: !7)
!26 = !DILocation(line: 37, column: 41, scope: !7)
!27 = !DILocation(line: 131, column: 29, scope: !28, inlinedAt: !30)
!28 = distinct !DILexicalBlockFile(scope: !7, file: !29, discriminator: 0)
!29 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!30 = !DILocation(line: 38, column: 37, scope: !7)
!31 = !DILocation(line: 118, column: 15, scope: !32, inlinedAt: !30)
!32 = distinct !DILexicalBlockFile(scope: !28, file: !29, discriminator: 0)
!33 = !DILocation(line: 120, column: 21, scope: !32, inlinedAt: !30)
!34 = !DILocation(line: 120, column: 16, scope: !32, inlinedAt: !30)
!35 = !DILocation(line: 121, column: 29, scope: !32, inlinedAt: !30)
!36 = !DILocation(line: 39, column: 18, scope: !7)
!37 = !DILocation(line: 40, column: 23, scope: !7)
!38 = !DILocation(line: 42, column: 41, scope: !7)
!39 = !DILocation(line: 267, column: 36, scope: !40, inlinedAt: !42)
!40 = distinct !DILexicalBlockFile(scope: !7, file: !41, discriminator: 0)
!41 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!42 = !DILocation(line: 43, column: 25, scope: !7)
!43 = !DILocation(line: 256, column: 15, scope: !44, inlinedAt: !42)
!44 = distinct !DILexicalBlockFile(scope: !40, file: !41, discriminator: 0)
!45 = !DILocation(line: 44, column: 24, scope: !7)
!46 = !DILocation(line: 34, column: 19, scope: !7)
!47 = !DILocation(line: 33, column: 27, scope: !7)
!48 = !DILocation(line: 45, column: 19, scope: !7)
!49 = !DILocation(line: 46, column: 33, scope: !7)
!50 = !DILocation(line: 46, column: 42, scope: !7)
!51 = !DILocation(line: 46, column: 52, scope: !7)
!52 = !DILocation(line: 46, column: 30, scope: !7)
!53 = !DILocation(line: 46, column: 38, scope: !7)
!54 = !DILocation(line: 46, column: 47, scope: !7)
!55 = !DILocation(line: 46, column: 25, scope: !7)
!56 = !DILocation(line: 46, column: 64, scope: !7)
!57 = !DILocation(line: 46, column: 4, scope: !7)
