; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_37(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %7 = shl i32 %6, 10, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 508, !dbg !12
  %11 = or disjoint i32 %7, %10, !dbg !13
  %12 = or disjoint i32 %11, 512, !dbg !13
  %.frozen = freeze i32 %11, !dbg !14
  %13 = sdiv i32 %.frozen, 32, !dbg !14
  %14 = mul i32 %13, 32, !dbg !15
  %.decomposed = sub i32 %.frozen, %14, !dbg !15
  %15 = sdiv i32 %11, 32768, !dbg !16
  %16 = sdiv i32 %12, 32768, !dbg !16
  %17 = sdiv i32 %12, 32, !dbg !14
  %18 = sext i32 %11 to i64, !dbg !17
  %19 = getelementptr float, ptr addrspace(1) %0, i64 %18, !dbg !17
  %20 = sext i32 %12 to i64, !dbg !17
  %21 = getelementptr float, ptr addrspace(1) %0, i64 %20, !dbg !17
  %22 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %19, i1 true) #1, !dbg !18
  %23 = extractvalue { i32, i32, i32, i32 } %22, 0, !dbg !18
  %24 = extractvalue { i32, i32, i32, i32 } %22, 1, !dbg !18
  %25 = extractvalue { i32, i32, i32, i32 } %22, 2, !dbg !18
  %26 = extractvalue { i32, i32, i32, i32 } %22, 3, !dbg !18
  %27 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %21, i1 true) #1, !dbg !18
  %28 = extractvalue { i32, i32, i32, i32 } %27, 0, !dbg !18
  %29 = extractvalue { i32, i32, i32, i32 } %27, 1, !dbg !18
  %30 = extractvalue { i32, i32, i32, i32 } %27, 2, !dbg !18
  %31 = extractvalue { i32, i32, i32, i32 } %27, 3, !dbg !18
  %32 = shl nsw i32 %15, 5, !dbg !19
  %33 = shl nsw i32 %16, 5, !dbg !19
  %34 = add nsw i32 %32, %.decomposed, !dbg !20
  %35 = add nsw i32 %33, %.decomposed, !dbg !20
  %36 = sext i32 %34 to i64, !dbg !21
  %37 = getelementptr float, ptr addrspace(1) %1, i64 %36, !dbg !21
  %38 = sext i32 %35 to i64, !dbg !21
  %39 = getelementptr float, ptr addrspace(1) %1, i64 %38, !dbg !21
  %40 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %37, i1 true) #1, !dbg !22
  %41 = extractvalue { i32, i32, i32, i32 } %40, 0, !dbg !22
  %42 = extractvalue { i32, i32, i32, i32 } %40, 1, !dbg !22
  %43 = extractvalue { i32, i32, i32, i32 } %40, 2, !dbg !22
  %44 = extractvalue { i32, i32, i32, i32 } %40, 3, !dbg !22
  %45 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %39, i1 true) #1, !dbg !22
  %46 = extractvalue { i32, i32, i32, i32 } %45, 0, !dbg !22
  %47 = extractvalue { i32, i32, i32, i32 } %45, 1, !dbg !22
  %48 = extractvalue { i32, i32, i32, i32 } %45, 2, !dbg !22
  %49 = extractvalue { i32, i32, i32, i32 } %45, 3, !dbg !22
  %50 = getelementptr float, ptr addrspace(1) %2, i64 %36, !dbg !23
  %51 = getelementptr float, ptr addrspace(1) %2, i64 %38, !dbg !23
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %50, i1 true) #1, !dbg !24
  %53 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !24
  %54 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !24
  %55 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !24
  %56 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !24
  %57 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %51, i1 true) #1, !dbg !24
  %58 = extractvalue { i32, i32, i32, i32 } %57, 0, !dbg !24
  %59 = extractvalue { i32, i32, i32, i32 } %57, 1, !dbg !24
  %60 = extractvalue { i32, i32, i32, i32 } %57, 2, !dbg !24
  %61 = extractvalue { i32, i32, i32, i32 } %57, 3, !dbg !24
  %62 = insertelement <8 x i32> poison, i32 %31, i64 0, !dbg !18
  %63 = insertelement <8 x i32> %62, i32 %30, i64 1, !dbg !18
  %64 = insertelement <8 x i32> %63, i32 %29, i64 2, !dbg !18
  %65 = insertelement <8 x i32> %64, i32 %28, i64 3, !dbg !18
  %66 = insertelement <8 x i32> %65, i32 %26, i64 4, !dbg !18
  %67 = insertelement <8 x i32> %66, i32 %25, i64 5, !dbg !18
  %68 = insertelement <8 x i32> %67, i32 %24, i64 6, !dbg !18
  %69 = insertelement <8 x i32> %68, i32 %23, i64 7, !dbg !18
  %70 = bitcast <8 x i32> %69 to <8 x float>, !dbg !18
  %71 = insertelement <8 x i32> poison, i32 %49, i64 0, !dbg !22
  %72 = insertelement <8 x i32> %71, i32 %48, i64 1, !dbg !22
  %73 = insertelement <8 x i32> %72, i32 %47, i64 2, !dbg !22
  %74 = insertelement <8 x i32> %73, i32 %46, i64 3, !dbg !22
  %75 = insertelement <8 x i32> %74, i32 %44, i64 4, !dbg !22
  %76 = insertelement <8 x i32> %75, i32 %43, i64 5, !dbg !22
  %77 = insertelement <8 x i32> %76, i32 %42, i64 6, !dbg !22
  %78 = insertelement <8 x i32> %77, i32 %41, i64 7, !dbg !22
  %79 = bitcast <8 x i32> %78 to <8 x float>, !dbg !22
  %80 = insertelement <8 x i32> poison, i32 %61, i64 0, !dbg !24
  %81 = insertelement <8 x i32> %80, i32 %60, i64 1, !dbg !24
  %82 = insertelement <8 x i32> %81, i32 %59, i64 2, !dbg !24
  %83 = insertelement <8 x i32> %82, i32 %58, i64 3, !dbg !24
  %84 = insertelement <8 x i32> %83, i32 %56, i64 4, !dbg !24
  %85 = insertelement <8 x i32> %84, i32 %55, i64 5, !dbg !24
  %86 = insertelement <8 x i32> %85, i32 %54, i64 6, !dbg !24
  %87 = insertelement <8 x i32> %86, i32 %53, i64 7, !dbg !24
  %88 = bitcast <8 x i32> %87 to <8 x float>, !dbg !24
  %89 = fsub <8 x float> %70, %79, !dbg !25
  %90 = fmul <8 x float> %89, %88, !dbg !26
  %91 = fcmp ogt <8 x float> %90, zeroinitializer, !dbg !27
  %92 = extractelement <8 x float> %90, i64 7, !dbg !28
  %93 = fmul float %92, 0x3FB99999A0000000, !dbg !29
  %94 = extractelement <8 x float> %90, i64 6, !dbg !28
  %95 = fmul float %94, 0x3FB99999A0000000, !dbg !29
  %96 = extractelement <8 x float> %90, i64 5, !dbg !28
  %97 = fmul float %96, 0x3FB99999A0000000, !dbg !29
  %98 = extractelement <8 x float> %90, i64 4, !dbg !28
  %99 = fmul float %98, 0x3FB99999A0000000, !dbg !29
  %100 = extractelement <8 x float> %90, i64 3, !dbg !28
  %101 = fmul float %100, 0x3FB99999A0000000, !dbg !29
  %102 = extractelement <8 x float> %90, i64 2, !dbg !28
  %103 = fmul float %102, 0x3FB99999A0000000, !dbg !29
  %104 = extractelement <8 x float> %90, i64 1, !dbg !28
  %105 = fmul float %104, 0x3FB99999A0000000, !dbg !29
  %106 = extractelement <8 x float> %90, i64 0, !dbg !28
  %107 = fmul float %106, 0x3FB99999A0000000, !dbg !29
  %108 = extractelement <8 x i1> %91, i64 7, !dbg !28
  %109 = select i1 %108, float %92, float %93, !dbg !28
  %110 = extractelement <8 x i1> %91, i64 6, !dbg !28
  %111 = select i1 %110, float %94, float %95, !dbg !28
  %112 = extractelement <8 x i1> %91, i64 5, !dbg !28
  %113 = select i1 %112, float %96, float %97, !dbg !28
  %114 = extractelement <8 x i1> %91, i64 4, !dbg !28
  %115 = select i1 %114, float %98, float %99, !dbg !28
  %116 = extractelement <8 x i1> %91, i64 3, !dbg !28
  %117 = select i1 %116, float %100, float %101, !dbg !28
  %118 = extractelement <8 x i1> %91, i64 2, !dbg !28
  %119 = select i1 %118, float %102, float %103, !dbg !28
  %120 = extractelement <8 x i1> %91, i64 1, !dbg !28
  %121 = select i1 %120, float %104, float %105, !dbg !28
  %122 = extractelement <8 x i1> %91, i64 0, !dbg !28
  %123 = select i1 %122, float %106, float %107, !dbg !28
  %124 = shl i32 %13, 6, !dbg !30
  %125 = shl i32 %17, 6, !dbg !30
  %126 = add i32 %124, %.decomposed, !dbg !31
  %127 = add i32 %125, %.decomposed, !dbg !31
  %128 = sext i32 %126 to i64, !dbg !32
  %129 = getelementptr float, ptr addrspace(1) %3, i64 %128, !dbg !32
  %130 = sext i32 %127 to i64, !dbg !32
  %131 = getelementptr float, ptr addrspace(1) %3, i64 %130, !dbg !32
  %132 = bitcast float %109 to i32, !dbg !33
  %133 = bitcast float %111 to i32, !dbg !33
  %134 = bitcast float %113 to i32, !dbg !33
  %135 = bitcast float %115 to i32, !dbg !33
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %132, i32 %133, i32 %134, i32 %135, ptr addrspace(1) %129, i1 true) #1, !dbg !33
  %136 = bitcast float %117 to i32, !dbg !33
  %137 = bitcast float %119 to i32, !dbg !33
  %138 = bitcast float %121 to i32, !dbg !33
  %139 = bitcast float %123 to i32, !dbg !33
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %136, i32 %137, i32 %138, i32 %139, ptr addrspace(1) %131, i1 true) #1, !dbg !33
  ret void, !dbg !34
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "csmswvvd5vmoa7fqeo3vzsjrx4dgdtyupptbadxmmatj32not4b2.py", directory: "inductor_cache/sm")
!4 = !{ptr @triton_poi_fused_cat_37, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_37, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_37", linkageName: "triton_poi_fused_cat_37", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 27, column: 19, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 28, column: 30, scope: !7)
!18 = !DILocation(line: 28, column: 35, scope: !7)
!19 = !DILocation(line: 29, column: 38, scope: !7)
!20 = !DILocation(line: 29, column: 35, scope: !7)
!21 = !DILocation(line: 29, column: 30, scope: !7)
!22 = !DILocation(line: 29, column: 43, scope: !7)
!23 = !DILocation(line: 30, column: 30, scope: !7)
!24 = !DILocation(line: 30, column: 43, scope: !7)
!25 = !DILocation(line: 31, column: 18, scope: !7)
!26 = !DILocation(line: 32, column: 18, scope: !7)
!27 = !DILocation(line: 34, column: 18, scope: !7)
!28 = !DILocation(line: 37, column: 32, scope: !7)
!29 = !DILocation(line: 36, column: 18, scope: !7)
!30 = !DILocation(line: 38, column: 33, scope: !7)
!31 = !DILocation(line: 38, column: 30, scope: !7)
!32 = !DILocation(line: 38, column: 25, scope: !7)
!33 = !DILocation(line: 38, column: 44, scope: !7)
!34 = !DILocation(line: 38, column: 4, scope: !7)
