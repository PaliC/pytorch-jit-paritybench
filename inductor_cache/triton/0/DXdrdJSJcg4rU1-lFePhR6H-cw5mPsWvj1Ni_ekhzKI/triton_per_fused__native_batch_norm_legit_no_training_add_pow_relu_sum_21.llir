; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused__native_batch_norm_legit_no_training_add_pow_relu_sum_21(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %13 = shl i32 %12, 2, !dbg !11
  %14 = and i32 %13, 508, !dbg !11
  %15 = shl i32 %11, 9, !dbg !12
  %16 = or disjoint i32 %15, %14, !dbg !13
  %17 = sext i32 %16 to i64, !dbg !14
  %18 = getelementptr float, ptr addrspace(1) %1, i64 %17, !dbg !14
  %19 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %18, i1 true) #5, !dbg !15
  %20 = zext nneg i32 %14 to i64, !dbg !16
  %21 = getelementptr float, ptr addrspace(1) %2, i64 %20, !dbg !16
  %22 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %21, i1 true) #5, !dbg !17
  %23 = getelementptr float, ptr addrspace(1) %3, i64 %20, !dbg !18
  %24 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %23, i1 true) #5, !dbg !19
  %25 = extractvalue { i32, i32, i32, i32 } %24, 0, !dbg !19
  %26 = extractvalue { i32, i32, i32, i32 } %24, 1, !dbg !19
  %27 = extractvalue { i32, i32, i32, i32 } %24, 2, !dbg !19
  %28 = extractvalue { i32, i32, i32, i32 } %24, 3, !dbg !19
  %29 = bitcast i32 %25 to float, !dbg !19
  %30 = bitcast i32 %26 to float, !dbg !19
  %31 = bitcast i32 %27 to float, !dbg !19
  %32 = bitcast i32 %28 to float, !dbg !19
  %33 = getelementptr float, ptr addrspace(1) %4, i64 %20, !dbg !20
  %34 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %33, i1 true) #5, !dbg !21
  %35 = getelementptr float, ptr addrspace(1) %5, i64 %20, !dbg !22
  %36 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %35, i1 true) #5, !dbg !23
  %37 = getelementptr float, ptr addrspace(1) %6, i64 %17, !dbg !24
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %37, i1 true) #5, !dbg !25
  %39 = fadd float %29, 0x3EE4F8B580000000, !dbg !26
  %40 = fadd float %30, 0x3EE4F8B580000000, !dbg !26
  %41 = fadd float %31, 0x3EE4F8B580000000, !dbg !26
  %42 = fadd float %32, 0x3EE4F8B580000000, !dbg !26
  %43 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !27
  %.not.i = icmp eq i32 %43, 0, !dbg !27
  %44 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !27
  %.not1.i = icmp eq i32 %44, 0, !dbg !27
  br i1 %.not.i, label %50, label %45, !dbg !27

45:                                               ; preds = %10
  br i1 %.not1.i, label %48, label %46, !dbg !27

46:                                               ; preds = %45
  %47 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %39) #5, !dbg !27
  br label %__nv_sqrtf.exit, !dbg !27

48:                                               ; preds = %45
  %49 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %39) #5, !dbg !27
  br label %__nv_sqrtf.exit, !dbg !27

50:                                               ; preds = %10
  br i1 %.not1.i, label %53, label %51, !dbg !27

51:                                               ; preds = %50
  %52 = tail call float @llvm.nvvm.sqrt.rn.f(float %39) #5, !dbg !27
  br label %__nv_sqrtf.exit, !dbg !27

53:                                               ; preds = %50
  %54 = tail call float @llvm.nvvm.sqrt.approx.f(float %39) #5, !dbg !27
  br label %__nv_sqrtf.exit, !dbg !27

__nv_sqrtf.exit:                                  ; preds = %46, %48, %51, %53
  %.0.i = phi float [ %47, %46 ], [ %49, %48 ], [ %52, %51 ], [ %54, %53 ], !dbg !27
  %55 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !27
  %.not.i1 = icmp eq i32 %55, 0, !dbg !27
  %56 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !27
  %.not1.i4 = icmp eq i32 %56, 0, !dbg !27
  br i1 %.not.i1, label %62, label %57, !dbg !27

57:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %60, label %58, !dbg !27

58:                                               ; preds = %57
  %59 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %40) #5, !dbg !27
  br label %__nv_sqrtf.exit5, !dbg !27

60:                                               ; preds = %57
  %61 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %40) #5, !dbg !27
  br label %__nv_sqrtf.exit5, !dbg !27

62:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %65, label %63, !dbg !27

63:                                               ; preds = %62
  %64 = tail call float @llvm.nvvm.sqrt.rn.f(float %40) #5, !dbg !27
  br label %__nv_sqrtf.exit5, !dbg !27

65:                                               ; preds = %62
  %66 = tail call float @llvm.nvvm.sqrt.approx.f(float %40) #5, !dbg !27
  br label %__nv_sqrtf.exit5, !dbg !27

__nv_sqrtf.exit5:                                 ; preds = %58, %60, %63, %65
  %.0.i3 = phi float [ %59, %58 ], [ %61, %60 ], [ %64, %63 ], [ %66, %65 ], !dbg !27
  %67 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !27
  %.not.i6 = icmp eq i32 %67, 0, !dbg !27
  %68 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !27
  %.not1.i9 = icmp eq i32 %68, 0, !dbg !27
  br i1 %.not.i6, label %74, label %69, !dbg !27

69:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %72, label %70, !dbg !27

70:                                               ; preds = %69
  %71 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %41) #5, !dbg !27
  br label %__nv_sqrtf.exit10, !dbg !27

72:                                               ; preds = %69
  %73 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %41) #5, !dbg !27
  br label %__nv_sqrtf.exit10, !dbg !27

74:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %77, label %75, !dbg !27

75:                                               ; preds = %74
  %76 = tail call float @llvm.nvvm.sqrt.rn.f(float %41) #5, !dbg !27
  br label %__nv_sqrtf.exit10, !dbg !27

77:                                               ; preds = %74
  %78 = tail call float @llvm.nvvm.sqrt.approx.f(float %41) #5, !dbg !27
  br label %__nv_sqrtf.exit10, !dbg !27

__nv_sqrtf.exit10:                                ; preds = %70, %72, %75, %77
  %.0.i8 = phi float [ %71, %70 ], [ %73, %72 ], [ %76, %75 ], [ %78, %77 ], !dbg !27
  %79 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !27
  %.not.i11 = icmp eq i32 %79, 0, !dbg !27
  %80 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !27
  %.not1.i14 = icmp eq i32 %80, 0, !dbg !27
  br i1 %.not.i11, label %86, label %81, !dbg !27

81:                                               ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %84, label %82, !dbg !27

82:                                               ; preds = %81
  %83 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %42) #5, !dbg !27
  br label %__nv_sqrtf.exit15, !dbg !27

84:                                               ; preds = %81
  %85 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %42) #5, !dbg !27
  br label %__nv_sqrtf.exit15, !dbg !27

86:                                               ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %89, label %87, !dbg !27

87:                                               ; preds = %86
  %88 = tail call float @llvm.nvvm.sqrt.rn.f(float %42) #5, !dbg !27
  br label %__nv_sqrtf.exit15, !dbg !27

89:                                               ; preds = %86
  %90 = tail call float @llvm.nvvm.sqrt.approx.f(float %42) #5, !dbg !27
  br label %__nv_sqrtf.exit15, !dbg !27

__nv_sqrtf.exit15:                                ; preds = %82, %84, %87, %89
  %.0.i13 = phi float [ %83, %82 ], [ %85, %84 ], [ %88, %87 ], [ %90, %89 ], !dbg !27
  %91 = extractvalue { i32, i32, i32, i32 } %19, 3, !dbg !15
  %92 = extractvalue { i32, i32, i32, i32 } %22, 3, !dbg !17
  %93 = extractvalue { i32, i32, i32, i32 } %19, 2, !dbg !15
  %94 = extractvalue { i32, i32, i32, i32 } %22, 2, !dbg !17
  %95 = extractvalue { i32, i32, i32, i32 } %19, 1, !dbg !15
  %96 = extractvalue { i32, i32, i32, i32 } %22, 1, !dbg !17
  %97 = extractvalue { i32, i32, i32, i32 } %19, 0, !dbg !15
  %98 = extractvalue { i32, i32, i32, i32 } %22, 0, !dbg !17
  %99 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !25
  %100 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !25
  %101 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !25
  %102 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !25
  %103 = extractvalue { i32, i32, i32, i32 } %36, 3, !dbg !23
  %104 = extractvalue { i32, i32, i32, i32 } %36, 2, !dbg !23
  %105 = extractvalue { i32, i32, i32, i32 } %36, 1, !dbg !23
  %106 = extractvalue { i32, i32, i32, i32 } %36, 0, !dbg !23
  %107 = extractvalue { i32, i32, i32, i32 } %34, 3, !dbg !21
  %108 = extractvalue { i32, i32, i32, i32 } %34, 2, !dbg !21
  %109 = extractvalue { i32, i32, i32, i32 } %34, 1, !dbg !21
  %110 = extractvalue { i32, i32, i32, i32 } %34, 0, !dbg !21
  %111 = lshr i32 %12, 5, !dbg !11
  %112 = and i32 %12, 31, !dbg !11
  %113 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #5, !dbg !28
  %114 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #5, !dbg !28
  %115 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #5, !dbg !28
  %116 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #5, !dbg !28
  %117 = insertelement <2 x i32> poison, i32 %97, i64 0, !dbg !15
  %118 = insertelement <2 x i32> %117, i32 %95, i64 1, !dbg !15
  %119 = bitcast <2 x i32> %118 to <2 x float>, !dbg !15
  %120 = insertelement <2 x i32> poison, i32 %98, i64 0, !dbg !17
  %121 = insertelement <2 x i32> %120, i32 %96, i64 1, !dbg !17
  %122 = bitcast <2 x i32> %121 to <2 x float>, !dbg !17
  %123 = fsub <2 x float> %119, %122, !dbg !29
  %124 = insertelement <2 x i32> poison, i32 %102, i64 0, !dbg !25
  %125 = insertelement <2 x i32> %124, i32 %101, i64 1, !dbg !25
  %126 = bitcast <2 x i32> %125 to <2 x float>, !dbg !25
  %127 = insertelement <2 x i32> poison, i32 %106, i64 0, !dbg !23
  %128 = insertelement <2 x i32> %127, i32 %105, i64 1, !dbg !23
  %129 = bitcast <2 x i32> %128 to <2 x float>, !dbg !23
  %130 = insertelement <2 x i32> poison, i32 %110, i64 0, !dbg !21
  %131 = insertelement <2 x i32> %130, i32 %109, i64 1, !dbg !21
  %132 = bitcast <2 x i32> %131 to <2 x float>, !dbg !21
  %133 = insertelement <2 x float> poison, float %113, i64 0, !dbg !30
  %134 = insertelement <2 x float> %133, float %114, i64 1, !dbg !30
  %135 = fmul <2 x float> %123, %134, !dbg !30
  %136 = fmul <2 x float> %135, %132, !dbg !31
  %137 = fadd <2 x float> %136, %129, !dbg !32
  %138 = fadd <2 x float> %137, %126, !dbg !33
  %139 = fcmp olt <2 x float> %138, zeroinitializer, !dbg !34
  %140 = select <2 x i1> %139, <2 x float> zeroinitializer, <2 x float> %138, !dbg !38
  %141 = fmul <2 x float> %140, %140, !dbg !39
  %142 = insertelement <2 x i32> poison, i32 %93, i64 0, !dbg !15
  %143 = insertelement <2 x i32> %142, i32 %91, i64 1, !dbg !15
  %144 = bitcast <2 x i32> %143 to <2 x float>, !dbg !15
  %145 = insertelement <2 x i32> poison, i32 %94, i64 0, !dbg !17
  %146 = insertelement <2 x i32> %145, i32 %92, i64 1, !dbg !17
  %147 = bitcast <2 x i32> %146 to <2 x float>, !dbg !17
  %148 = fsub <2 x float> %144, %147, !dbg !29
  %149 = insertelement <2 x i32> poison, i32 %100, i64 0, !dbg !25
  %150 = insertelement <2 x i32> %149, i32 %99, i64 1, !dbg !25
  %151 = bitcast <2 x i32> %150 to <2 x float>, !dbg !25
  %152 = insertelement <2 x i32> poison, i32 %104, i64 0, !dbg !23
  %153 = insertelement <2 x i32> %152, i32 %103, i64 1, !dbg !23
  %154 = bitcast <2 x i32> %153 to <2 x float>, !dbg !23
  %155 = insertelement <2 x i32> poison, i32 %108, i64 0, !dbg !21
  %156 = insertelement <2 x i32> %155, i32 %107, i64 1, !dbg !21
  %157 = bitcast <2 x i32> %156 to <2 x float>, !dbg !21
  %158 = insertelement <2 x float> poison, float %115, i64 0, !dbg !30
  %159 = insertelement <2 x float> %158, float %116, i64 1, !dbg !30
  %160 = fmul <2 x float> %148, %159, !dbg !30
  %161 = fmul <2 x float> %160, %157, !dbg !31
  %162 = fadd <2 x float> %161, %154, !dbg !32
  %163 = fadd <2 x float> %162, %151, !dbg !33
  %164 = fcmp olt <2 x float> %163, zeroinitializer, !dbg !34
  %165 = select <2 x i1> %164, <2 x float> zeroinitializer, <2 x float> %163, !dbg !38
  %166 = fmul <2 x float> %165, %165, !dbg !39
  %shift = shufflevector <2 x float> %141, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !40
  %167 = fadd <2 x float> %141, %shift, !dbg !40
  %168 = fadd <2 x float> %167, %166, !dbg !40
  %shift16 = shufflevector <2 x float> %166, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !40
  %169 = fadd <2 x float> %168, %shift16, !dbg !40
  %170 = extractelement <2 x float> %169, i64 0, !dbg !40
  %171 = bitcast float %170 to i32, !dbg !45
  %172 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %171, i32 16, i32 31), !dbg !45
  %173 = bitcast i32 %172 to float, !dbg !45
  %174 = fadd float %170, %173, !dbg !40
  %175 = bitcast float %174 to i32, !dbg !45
  %176 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %175, i32 8, i32 31), !dbg !45
  %177 = bitcast i32 %176 to float, !dbg !45
  %178 = fadd float %174, %177, !dbg !40
  %179 = bitcast float %178 to i32, !dbg !45
  %180 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %179, i32 4, i32 31), !dbg !45
  %181 = bitcast i32 %180 to float, !dbg !45
  %182 = fadd float %178, %181, !dbg !40
  %183 = bitcast float %182 to i32, !dbg !45
  %184 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %183, i32 2, i32 31), !dbg !45
  %185 = bitcast i32 %184 to float, !dbg !45
  %186 = fadd float %182, %185, !dbg !40
  %187 = bitcast float %186 to i32, !dbg !45
  %188 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %187, i32 1, i32 31), !dbg !45
  %189 = bitcast i32 %188 to float, !dbg !45
  %190 = fadd float %186, %189, !dbg !40
  %191 = icmp eq i32 %112, 0, !dbg !45
  %192 = and i32 %111, 3, !dbg !45
  %193 = getelementptr float, ptr addrspace(3) @global_smem, i32 %192, !dbg !45
  %194 = bitcast float %190 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %193, <1 x i32> %194, i1 %191) #5, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %195 = icmp slt i32 %12, 4, !dbg !45
  %196 = getelementptr float, ptr addrspace(3) @global_smem, i32 %12, !dbg !45
  %197 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %196, i1 %195) #5, !dbg !45
  %198 = bitcast i32 %197 to float, !dbg !45
  %199 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %197, i32 2, i32 31), !dbg !45
  %200 = bitcast i32 %199 to float, !dbg !45
  %201 = fadd float %198, %200, !dbg !40
  %202 = bitcast float %201 to i32, !dbg !45
  %203 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %202, i32 1, i32 31), !dbg !45
  %204 = bitcast i32 %203 to float, !dbg !45
  %205 = fadd float %201, %204, !dbg !40
  %206 = and i32 %12, 3, !dbg !45
  %207 = icmp eq i32 %206, 0, !dbg !45
  %208 = and i1 %195, %207, !dbg !45
  %209 = bitcast float %205 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %196, <1 x i32> %209, i1 %208) #5, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %210 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !45
  %211 = fadd float %210, 0.000000e+00, !dbg !46
  %212 = fadd float %211, 0x3EB0C6F7A0000000, !dbg !48
  %213 = getelementptr float, ptr addrspace(1) %7, i64 %17, !dbg !49
  %bc = bitcast <2 x float> %140 to <2 x i32>, !dbg !50
  %214 = extractelement <2 x i32> %bc, i64 0, !dbg !50
  %bc17 = bitcast <2 x float> %140 to <2 x i32>, !dbg !50
  %215 = extractelement <2 x i32> %bc17, i64 1, !dbg !50
  %bc18 = bitcast <2 x float> %165 to <2 x i32>, !dbg !50
  %216 = extractelement <2 x i32> %bc18, i64 0, !dbg !50
  %bc19 = bitcast <2 x float> %165 to <2 x i32>, !dbg !50
  %217 = extractelement <2 x i32> %bc19, i64 1, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %214, i32 %215, i32 %216, i32 %217, ptr addrspace(1) %213, i1 true) #5, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %218 = sext i32 %11 to i64, !dbg !52
  %219 = getelementptr float, ptr addrspace(1) %0, i64 %218, !dbg !52
  %urem = and i32 %12, 127, !dbg !53
  %220 = icmp eq i32 %urem, 0, !dbg !53
  %221 = bitcast float %212 to i32, !dbg !53
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %221, ptr addrspace(1) %219, i1 %220) #5, !dbg !53
  ret void, !dbg !54
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c7nnfqtmm6ck427i6mtytis72harcrh6xaje5zbo4e66ax5ltjlo.py", directory: "inductor_cache/7n")
!4 = !{ptr @triton_per_fused__native_batch_norm_legit_no_training_add_pow_relu_sum_21, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__native_batch_norm_legit_no_training_add_pow_relu_sum_21, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__native_batch_norm_legit_no_training_add_pow_relu_sum_21", linkageName: "triton_per_fused__native_batch_norm_legit_no_training_add_pow_relu_sum_21", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 24, column: 28, scope: !7)
!11 = !DILocation(line: 27, column: 26, scope: !7)
!12 = !DILocation(line: 32, column: 39, scope: !7)
!13 = !DILocation(line: 32, column: 35, scope: !7)
!14 = !DILocation(line: 32, column: 30, scope: !7)
!15 = !DILocation(line: 32, column: 44, scope: !7)
!16 = !DILocation(line: 33, column: 30, scope: !7)
!17 = !DILocation(line: 33, column: 35, scope: !7)
!18 = !DILocation(line: 34, column: 30, scope: !7)
!19 = !DILocation(line: 34, column: 35, scope: !7)
!20 = !DILocation(line: 35, column: 31, scope: !7)
!21 = !DILocation(line: 35, column: 36, scope: !7)
!22 = !DILocation(line: 36, column: 31, scope: !7)
!23 = !DILocation(line: 36, column: 36, scope: !7)
!24 = !DILocation(line: 37, column: 31, scope: !7)
!25 = !DILocation(line: 37, column: 45, scope: !7)
!26 = !DILocation(line: 40, column: 18, scope: !7)
!27 = !DILocation(line: 41, column: 26, scope: !7)
!28 = !DILocation(line: 43, column: 18, scope: !7)
!29 = !DILocation(line: 38, column: 18, scope: !7)
!30 = !DILocation(line: 46, column: 19, scope: !7)
!31 = !DILocation(line: 47, column: 20, scope: !7)
!32 = !DILocation(line: 48, column: 20, scope: !7)
!33 = !DILocation(line: 49, column: 20, scope: !7)
!34 = !DILocation(line: 118, column: 15, scope: !35, inlinedAt: !37)
!35 = distinct !DILexicalBlockFile(scope: !7, file: !36, discriminator: 0)
!36 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!37 = !DILocation(line: 51, column: 42, scope: !7)
!38 = !DILocation(line: 121, column: 29, scope: !35, inlinedAt: !37)
!39 = !DILocation(line: 52, column: 20, scope: !7)
!40 = !DILocation(line: 256, column: 15, scope: !41, inlinedAt: !44)
!41 = distinct !DILexicalBlockFile(scope: !43, file: !42, discriminator: 0)
!42 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!43 = distinct !DILexicalBlockFile(scope: !7, file: !42, discriminator: 0)
!44 = !DILocation(line: 54, column: 59, scope: !7)
!45 = !DILocation(line: 267, column: 36, scope: !43, inlinedAt: !44)
!46 = !DILocation(line: 73, column: 15, scope: !35, inlinedAt: !47)
!47 = !DILocation(line: 54, column: 45, scope: !7)
!48 = !DILocation(line: 56, column: 20, scope: !7)
!49 = !DILocation(line: 57, column: 25, scope: !7)
!50 = !DILocation(line: 57, column: 46, scope: !7)
!51 = !DILocation(line: 58, column: 4, scope: !7)
!52 = !DILocation(line: 59, column: 28, scope: !7)
!53 = !DILocation(line: 59, column: 40, scope: !7)
!54 = !DILocation(line: 59, column: 4, scope: !7)
