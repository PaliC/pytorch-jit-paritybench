#loc = loc("inductor_cache/7n/c7nnfqtmm6ck427i6mtytis72harcrh6xaje5zbo4e66ax5ltjlo.py":19:0)
#loc1 = loc(unknown)
#loc31 = loc("inductor_cache/7n/c7nnfqtmm6ck427i6mtytis72harcrh6xaje5zbo4e66ax5ltjlo.py":54:59)
#loc45 = loc(callsite(#loc1 at #loc31))
module {
  tt.func public @triton_per_fused__native_batch_norm_legit_no_training_add_pow_relu_sum_21(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/7n/c7nnfqtmm6ck427i6mtytis72harcrh6xaje5zbo4e66ax5ltjlo.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/7n/c7nnfqtmm6ck427i6mtytis72harcrh6xaje5zbo4e66ax5ltjlo.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/7n/c7nnfqtmm6ck427i6mtytis72harcrh6xaje5zbo4e66ax5ltjlo.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/7n/c7nnfqtmm6ck427i6mtytis72harcrh6xaje5zbo4e66ax5ltjlo.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/7n/c7nnfqtmm6ck427i6mtytis72harcrh6xaje5zbo4e66ax5ltjlo.py":19:0), %arg5: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/7n/c7nnfqtmm6ck427i6mtytis72harcrh6xaje5zbo4e66ax5ltjlo.py":19:0), %arg6: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/7n/c7nnfqtmm6ck427i6mtytis72harcrh6xaje5zbo4e66ax5ltjlo.py":19:0), %arg7: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/7n/c7nnfqtmm6ck427i6mtytis72harcrh6xaje5zbo4e66ax5ltjlo.py":19:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/7n/c7nnfqtmm6ck427i6mtytis72harcrh6xaje5zbo4e66ax5ltjlo.py":19:0), %arg9: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/7n/c7nnfqtmm6ck427i6mtytis72harcrh6xaje5zbo4e66ax5ltjlo.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant 9.99999997E-7 : f32 loc(#loc1)
    %cst_0 = arith.constant 0.000000e+00 : f32 loc(#loc1)
    %c512_i32 = arith.constant 512 : i32 loc(#loc1)
    %cst_1 = arith.constant dense<0.000000e+00> : tensor<512xf32> loc(#loc1)
    %cst_2 = arith.constant dense<1.000000e+00> : tensor<512xf32> loc(#loc1)
    %cst_3 = arith.constant dense<9.99999974E-6> : tensor<512xf32> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = tt.make_range {end = 512 : i32, start = 0 : i32} : tensor<512xi32> loc(#loc3)
    %2 = arith.muli %0, %c512_i32 : i32 loc(#loc4)
    %3 = tt.splat %2 : i32 -> tensor<512xi32> loc(#loc5)
    %4 = arith.addi %1, %3 : tensor<512xi32> loc(#loc5)
    %5 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<512x!tt.ptr<f32>> loc(#loc6)
    %6 = tt.addptr %5, %4 : tensor<512x!tt.ptr<f32>>, tensor<512xi32> loc(#loc6)
    %7 = tt.load %6 : tensor<512x!tt.ptr<f32>> loc(#loc7)
    %8 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<512x!tt.ptr<f32>> loc(#loc8)
    %9 = tt.addptr %8, %1 : tensor<512x!tt.ptr<f32>>, tensor<512xi32> loc(#loc8)
    %10 = tt.load %9 evictionPolicy = evict_last : tensor<512x!tt.ptr<f32>> loc(#loc9)
    %11 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<512x!tt.ptr<f32>> loc(#loc10)
    %12 = tt.addptr %11, %1 : tensor<512x!tt.ptr<f32>>, tensor<512xi32> loc(#loc10)
    %13 = tt.load %12 evictionPolicy = evict_last : tensor<512x!tt.ptr<f32>> loc(#loc11)
    %14 = tt.splat %arg4 : !tt.ptr<f32> -> tensor<512x!tt.ptr<f32>> loc(#loc12)
    %15 = tt.addptr %14, %1 : tensor<512x!tt.ptr<f32>>, tensor<512xi32> loc(#loc12)
    %16 = tt.load %15 evictionPolicy = evict_last : tensor<512x!tt.ptr<f32>> loc(#loc13)
    %17 = tt.splat %arg5 : !tt.ptr<f32> -> tensor<512x!tt.ptr<f32>> loc(#loc14)
    %18 = tt.addptr %17, %1 : tensor<512x!tt.ptr<f32>>, tensor<512xi32> loc(#loc14)
    %19 = tt.load %18 evictionPolicy = evict_last : tensor<512x!tt.ptr<f32>> loc(#loc15)
    %20 = tt.splat %arg6 : !tt.ptr<f32> -> tensor<512x!tt.ptr<f32>> loc(#loc16)
    %21 = tt.addptr %20, %4 : tensor<512x!tt.ptr<f32>>, tensor<512xi32> loc(#loc16)
    %22 = tt.load %21 : tensor<512x!tt.ptr<f32>> loc(#loc17)
    %23 = arith.subf %7, %10 : tensor<512xf32> loc(#loc18)
    %24 = arith.addf %13, %cst_3 : tensor<512xf32> loc(#loc19)
    %25 = tt.extern_elementwise %24 {libname = "", libpath = "", pure = true, symbol = "__nv_sqrtf"} : (tensor<512xf32>) -> tensor<512xf32> loc(#loc20)
    %26 = arith.divf %cst_2, %25 : tensor<512xf32> loc(#loc21)
    %27 = arith.mulf %23, %26 : tensor<512xf32> loc(#loc22)
    %28 = arith.mulf %27, %16 : tensor<512xf32> loc(#loc23)
    %29 = arith.addf %28, %19 : tensor<512xf32> loc(#loc24)
    %30 = arith.addf %29, %22 : tensor<512xf32> loc(#loc25)
    %31 = arith.cmpf ogt, %cst_1, %30 : tensor<512xf32> loc(#loc42)
    %32 = arith.select %31, %cst_1, %30 : tensor<512xi1>, tensor<512xf32> loc(#loc43)
    %33 = arith.mulf %32, %32 : tensor<512xf32> loc(#loc29)
    %34 = "tt.reduce"(%33) <{axis = 0 : i32}> ({
    ^bb0(%arg10: f32 loc(callsite(#loc1 at #loc31)), %arg11: f32 loc(callsite(#loc1 at #loc31))):
      %42 = arith.addf %arg10, %arg11 : f32 loc(#loc48)
      tt.reduce.return %42 : f32 loc(#loc44)
    }) : (tensor<512xf32>) -> f32 loc(#loc44)
    %35 = arith.addf %34, %cst_0 : f32 loc(#loc47)
    %36 = arith.addf %35, %cst : f32 loc(#loc35)
    %37 = tt.splat %36 : f32 -> tensor<1xf32> loc(#loc35)
    %38 = tt.splat %arg7 : !tt.ptr<f32> -> tensor<512x!tt.ptr<f32>> loc(#loc36)
    %39 = tt.addptr %38, %4 : tensor<512x!tt.ptr<f32>>, tensor<512xi32> loc(#loc36)
    tt.store %39, %32 : tensor<512x!tt.ptr<f32>> loc(#loc37)
    gpu.barrier loc(#loc38)
    %40 = tt.addptr %arg0, %0 : !tt.ptr<f32>, i32 loc(#loc39)
    %41 = tt.splat %40 : !tt.ptr<f32> -> tensor<1x!tt.ptr<f32>> loc(#loc39)
    tt.store %41, %37 : tensor<1x!tt.ptr<f32>> loc(#loc40)
    tt.return loc(#loc41)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/7n/c7nnfqtmm6ck427i6mtytis72harcrh6xaje5zbo4e66ax5ltjlo.py":24:28)
#loc3 = loc("inductor_cache/7n/c7nnfqtmm6ck427i6mtytis72harcrh6xaje5zbo4e66ax5ltjlo.py":27:26)
#loc4 = loc("inductor_cache/7n/c7nnfqtmm6ck427i6mtytis72harcrh6xaje5zbo4e66ax5ltjlo.py":32:39)
#loc5 = loc("inductor_cache/7n/c7nnfqtmm6ck427i6mtytis72harcrh6xaje5zbo4e66ax5ltjlo.py":32:35)
#loc6 = loc("inductor_cache/7n/c7nnfqtmm6ck427i6mtytis72harcrh6xaje5zbo4e66ax5ltjlo.py":32:30)
#loc7 = loc("inductor_cache/7n/c7nnfqtmm6ck427i6mtytis72harcrh6xaje5zbo4e66ax5ltjlo.py":32:44)
#loc8 = loc("inductor_cache/7n/c7nnfqtmm6ck427i6mtytis72harcrh6xaje5zbo4e66ax5ltjlo.py":33:30)
#loc9 = loc("inductor_cache/7n/c7nnfqtmm6ck427i6mtytis72harcrh6xaje5zbo4e66ax5ltjlo.py":33:35)
#loc10 = loc("inductor_cache/7n/c7nnfqtmm6ck427i6mtytis72harcrh6xaje5zbo4e66ax5ltjlo.py":34:30)
#loc11 = loc("inductor_cache/7n/c7nnfqtmm6ck427i6mtytis72harcrh6xaje5zbo4e66ax5ltjlo.py":34:35)
#loc12 = loc("inductor_cache/7n/c7nnfqtmm6ck427i6mtytis72harcrh6xaje5zbo4e66ax5ltjlo.py":35:31)
#loc13 = loc("inductor_cache/7n/c7nnfqtmm6ck427i6mtytis72harcrh6xaje5zbo4e66ax5ltjlo.py":35:36)
#loc14 = loc("inductor_cache/7n/c7nnfqtmm6ck427i6mtytis72harcrh6xaje5zbo4e66ax5ltjlo.py":36:31)
#loc15 = loc("inductor_cache/7n/c7nnfqtmm6ck427i6mtytis72harcrh6xaje5zbo4e66ax5ltjlo.py":36:36)
#loc16 = loc("inductor_cache/7n/c7nnfqtmm6ck427i6mtytis72harcrh6xaje5zbo4e66ax5ltjlo.py":37:31)
#loc17 = loc("inductor_cache/7n/c7nnfqtmm6ck427i6mtytis72harcrh6xaje5zbo4e66ax5ltjlo.py":37:45)
#loc18 = loc("inductor_cache/7n/c7nnfqtmm6ck427i6mtytis72harcrh6xaje5zbo4e66ax5ltjlo.py":38:18)
#loc19 = loc("inductor_cache/7n/c7nnfqtmm6ck427i6mtytis72harcrh6xaje5zbo4e66ax5ltjlo.py":40:18)
#loc20 = loc("inductor_cache/7n/c7nnfqtmm6ck427i6mtytis72harcrh6xaje5zbo4e66ax5ltjlo.py":41:26)
#loc21 = loc("inductor_cache/7n/c7nnfqtmm6ck427i6mtytis72harcrh6xaje5zbo4e66ax5ltjlo.py":43:18)
#loc22 = loc("inductor_cache/7n/c7nnfqtmm6ck427i6mtytis72harcrh6xaje5zbo4e66ax5ltjlo.py":46:19)
#loc23 = loc("inductor_cache/7n/c7nnfqtmm6ck427i6mtytis72harcrh6xaje5zbo4e66ax5ltjlo.py":47:20)
#loc24 = loc("inductor_cache/7n/c7nnfqtmm6ck427i6mtytis72harcrh6xaje5zbo4e66ax5ltjlo.py":48:20)
#loc25 = loc("inductor_cache/7n/c7nnfqtmm6ck427i6mtytis72harcrh6xaje5zbo4e66ax5ltjlo.py":49:20)
#loc26 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":118:15)
#loc27 = loc("inductor_cache/7n/c7nnfqtmm6ck427i6mtytis72harcrh6xaje5zbo4e66ax5ltjlo.py":51:42)
#loc28 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":121:29)
#loc29 = loc("inductor_cache/7n/c7nnfqtmm6ck427i6mtytis72harcrh6xaje5zbo4e66ax5ltjlo.py":52:20)
#loc30 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc32 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc33 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":73:15)
#loc34 = loc("inductor_cache/7n/c7nnfqtmm6ck427i6mtytis72harcrh6xaje5zbo4e66ax5ltjlo.py":54:45)
#loc35 = loc("inductor_cache/7n/c7nnfqtmm6ck427i6mtytis72harcrh6xaje5zbo4e66ax5ltjlo.py":56:20)
#loc36 = loc("inductor_cache/7n/c7nnfqtmm6ck427i6mtytis72harcrh6xaje5zbo4e66ax5ltjlo.py":57:25)
#loc37 = loc("inductor_cache/7n/c7nnfqtmm6ck427i6mtytis72harcrh6xaje5zbo4e66ax5ltjlo.py":57:46)
#loc38 = loc("inductor_cache/7n/c7nnfqtmm6ck427i6mtytis72harcrh6xaje5zbo4e66ax5ltjlo.py":58:4)
#loc39 = loc("inductor_cache/7n/c7nnfqtmm6ck427i6mtytis72harcrh6xaje5zbo4e66ax5ltjlo.py":59:28)
#loc40 = loc("inductor_cache/7n/c7nnfqtmm6ck427i6mtytis72harcrh6xaje5zbo4e66ax5ltjlo.py":59:40)
#loc41 = loc("inductor_cache/7n/c7nnfqtmm6ck427i6mtytis72harcrh6xaje5zbo4e66ax5ltjlo.py":59:4)
#loc42 = loc(callsite(#loc26 at #loc27))
#loc43 = loc(callsite(#loc28 at #loc27))
#loc44 = loc(callsite(#loc30 at #loc31))
#loc46 = loc(callsite(#loc32 at #loc30))
#loc47 = loc(callsite(#loc33 at #loc34))
#loc48 = loc(callsite(#loc46 at #loc31))
