; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_2(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %6 = shl i32 %5, 5, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = lshr i32 %7, 4, !dbg !12
  %9 = and i32 %8, 7, !dbg !12
  %10 = shl i32 %7, 2, !dbg !12
  %11 = and i32 %10, 28, !dbg !12
  %12 = or disjoint i32 %6, %9, !dbg !13
  %13 = or disjoint i32 %12, 8, !dbg !13
  %14 = or disjoint i32 %12, 16, !dbg !13
  %15 = or disjoint i32 %12, 24, !dbg !13
  %16 = or disjoint i32 %6, %11, !dbg !13
  %17 = icmp slt i32 %12, 32, !dbg !14
  %18 = icmp slt i32 %13, 32, !dbg !14
  %19 = icmp slt i32 %14, 32, !dbg !14
  %20 = icmp slt i32 %15, 32, !dbg !14
  %21 = icmp slt i32 %16, 32, !dbg !14
  %22 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %23 = shl i32 %22, 4, !dbg !16
  %24 = and i32 %7, 15, !dbg !17
  %25 = lshr i32 %7, 3, !dbg !17
  %26 = and i32 %25, 15, !dbg !17
  %27 = or disjoint i32 %23, %24, !dbg !18
  %28 = or disjoint i32 %23, %26, !dbg !18
  %29 = icmp slt i32 %27, 9, !dbg !19
  %30 = icmp slt i32 %28, 9, !dbg !19
  %31 = ashr exact i32 %16, 2, !dbg !20
  %32 = mul i32 %12, 9, !dbg !21
  %33 = mul i32 %13, 9, !dbg !21
  %34 = mul i32 %14, 9, !dbg !21
  %35 = mul i32 %15, 9, !dbg !21
  %36 = add i32 %27, %32, !dbg !22
  %37 = add i32 %27, %33, !dbg !22
  %38 = add i32 %27, %34, !dbg !22
  %39 = add i32 %27, %35, !dbg !22
  %40 = sext i32 %36 to i64, !dbg !23
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !23
  %42 = sext i32 %37 to i64, !dbg !23
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !23
  %44 = sext i32 %38 to i64, !dbg !23
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !23
  %46 = sext i32 %39 to i64, !dbg !23
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !23
  %48 = and i1 %17, %29, !dbg !24
  %49 = and i1 %18, %29, !dbg !24
  %50 = and i1 %19, %29, !dbg !24
  %51 = and i1 %20, %29, !dbg !24
  %52 = and i1 %21, %30, !dbg !24
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 %48) #2, !dbg !25
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 %49) #2, !dbg !25
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 %50) #2, !dbg !25
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 %51) #2, !dbg !25
  %57 = shl i32 %28, 2, !dbg !26
  %58 = mul i32 %31, 36, !dbg !27
  %59 = add i32 %57, %58, !dbg !28
  %60 = sext i32 %59 to i64, !dbg !29
  %61 = getelementptr float, ptr addrspace(1) %1, i64 %60, !dbg !29
  %62 = shl i32 %7, 5, !dbg !30
  %63 = and i32 %62, 480, !dbg !30
  %64 = or disjoint i32 %63, %9, !dbg !30
  %65 = and i32 %10, 508, !dbg !30
  %66 = lshr exact i32 %63, 3, !dbg !30
  %67 = add nuw nsw i32 %66, %64, !dbg !30
  %68 = zext nneg i32 %67 to i64, !dbg !30
  %69 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %68, !dbg !30
  %70 = insertelement <1 x i32> poison, i32 %53, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %69, <1 x i32> %70, i1 true) #2, !dbg !30
  %71 = or disjoint i32 %64, 8, !dbg !30
  %72 = add nuw nsw i32 %71, %66, !dbg !30
  %73 = zext nneg i32 %72 to i64, !dbg !30
  %74 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %73, !dbg !30
  %75 = insertelement <1 x i32> poison, i32 %54, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %74, <1 x i32> %75, i1 true) #2, !dbg !30
  %76 = or disjoint i32 %64, 16, !dbg !30
  %77 = add nuw nsw i32 %76, %66, !dbg !30
  %78 = zext nneg i32 %77 to i64, !dbg !30
  %79 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %78, !dbg !30
  %80 = insertelement <1 x i32> poison, i32 %55, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %79, <1 x i32> %80, i1 true) #2, !dbg !30
  %81 = or disjoint i32 %64, 24, !dbg !30
  %82 = add nuw nsw i32 %81, %66, !dbg !30
  %83 = zext nneg i32 %82 to i64, !dbg !30
  %84 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %83, !dbg !30
  %85 = insertelement <1 x i32> poison, i32 %56, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %84, <1 x i32> %85, i1 true) #2, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %86 = lshr i32 %10, 3, !dbg !30
  %87 = and i32 %86, 60, !dbg !30
  %88 = add nuw nsw i32 %87, %65, !dbg !30
  %89 = zext nneg i32 %88 to i64, !dbg !30
  %90 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %89, !dbg !30
  %.extract = load i32, ptr addrspace(3) %90, align 16, !dbg !30
  %91 = getelementptr inbounds i8, ptr addrspace(3) %90, i64 4, !dbg !30
  %.extract8 = load i32, ptr addrspace(3) %91, align 4, !dbg !30
  %92 = getelementptr inbounds i8, ptr addrspace(3) %90, i64 8, !dbg !30
  %.extract9 = load i32, ptr addrspace(3) %92, align 8, !dbg !30
  %93 = getelementptr inbounds i8, ptr addrspace(3) %90, i64 12, !dbg !30
  %.extract10 = load i32, ptr addrspace(3) %93, align 4, !dbg !30
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %61, i1 %52) #2, !dbg !30
  ret void, !dbg !31
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cwkdhe2tg6vqtl6p27oilhteolq3ulijuh54id32zawapypep2je.py", directory: "inductor_cache/wk")
!4 = !{ptr @triton_poi_fused_2, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_2, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_2", linkageName: "triton_poi_fused_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 31, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 37, scope: !7)
!22 = !DILocation(line: 32, column: 35, scope: !7)
!23 = !DILocation(line: 32, column: 30, scope: !7)
!24 = !DILocation(line: 32, column: 50, scope: !7)
!25 = !DILocation(line: 32, column: 42, scope: !7)
!26 = !DILocation(line: 33, column: 32, scope: !7)
!27 = !DILocation(line: 33, column: 40, scope: !7)
!28 = !DILocation(line: 33, column: 37, scope: !7)
!29 = !DILocation(line: 33, column: 25, scope: !7)
!30 = !DILocation(line: 33, column: 51, scope: !7)
!31 = !DILocation(line: 33, column: 4, scope: !7)
