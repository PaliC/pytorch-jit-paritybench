; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_11(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, i32 %13) local_unnamed_addr !dbg !7 {
  %15 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %16 = shl i32 %15, 10, !dbg !11
  %17 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %18 = shl i32 %17, 2, !dbg !12
  %19 = and i32 %18, 508, !dbg !12
  %20 = or disjoint i32 %16, %19, !dbg !13
  %21 = or disjoint i32 %20, 512, !dbg !13
  %22 = srem i32 %20, 96, !dbg !14
  %23 = srem i32 %21, 96, !dbg !14
  %24 = sext i32 %20 to i64, !dbg !15
  %25 = getelementptr float, ptr addrspace(1) %0, i64 %24, !dbg !15
  %26 = sext i32 %21 to i64, !dbg !15
  %27 = getelementptr float, ptr addrspace(1) %0, i64 %26, !dbg !15
  %28 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %25, i1 true) #3, !dbg !16
  %29 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %27, i1 true) #3, !dbg !16
  %30 = sext i32 %22 to i64, !dbg !17
  %31 = getelementptr float, ptr addrspace(1) %3, i64 %30, !dbg !17
  %32 = sext i32 %23 to i64, !dbg !17
  %33 = getelementptr float, ptr addrspace(1) %3, i64 %32, !dbg !17
  %34 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %31, i1 true) #3, !dbg !18
  %35 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %33, i1 true) #3, !dbg !18
  %36 = getelementptr float, ptr addrspace(1) %1, i64 %24, !dbg !19
  %37 = getelementptr float, ptr addrspace(1) %1, i64 %26, !dbg !19
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %36, i1 true) #3, !dbg !20
  %39 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %37, i1 true) #3, !dbg !20
  %40 = getelementptr float, ptr addrspace(1) %4, i64 %30, !dbg !21
  %41 = getelementptr float, ptr addrspace(1) %4, i64 %32, !dbg !21
  %42 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %40, i1 true) #3, !dbg !22
  %43 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %41, i1 true) #3, !dbg !22
  %44 = getelementptr float, ptr addrspace(1) %5, i64 %30, !dbg !23
  %45 = getelementptr float, ptr addrspace(1) %5, i64 %32, !dbg !23
  %46 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %44, i1 true) #3, !dbg !24
  %47 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %45, i1 true) #3, !dbg !24
  %48 = getelementptr float, ptr addrspace(1) %6, i64 %30, !dbg !25
  %49 = getelementptr float, ptr addrspace(1) %6, i64 %32, !dbg !25
  %50 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %48, i1 true) #3, !dbg !26
  %51 = extractvalue { i32, i32, i32, i32 } %50, 0, !dbg !26
  %52 = extractvalue { i32, i32, i32, i32 } %50, 1, !dbg !26
  %53 = extractvalue { i32, i32, i32, i32 } %50, 2, !dbg !26
  %54 = extractvalue { i32, i32, i32, i32 } %50, 3, !dbg !26
  %55 = bitcast i32 %51 to float, !dbg !26
  %56 = bitcast i32 %52 to float, !dbg !26
  %57 = bitcast i32 %53 to float, !dbg !26
  %58 = bitcast i32 %54 to float, !dbg !26
  %59 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %49, i1 true) #3, !dbg !26
  %60 = extractvalue { i32, i32, i32, i32 } %59, 0, !dbg !26
  %61 = extractvalue { i32, i32, i32, i32 } %59, 1, !dbg !26
  %62 = extractvalue { i32, i32, i32, i32 } %59, 2, !dbg !26
  %63 = extractvalue { i32, i32, i32, i32 } %59, 3, !dbg !26
  %64 = bitcast i32 %60 to float, !dbg !26
  %65 = bitcast i32 %61 to float, !dbg !26
  %66 = bitcast i32 %62 to float, !dbg !26
  %67 = bitcast i32 %63 to float, !dbg !26
  %68 = getelementptr float, ptr addrspace(1) %7, i64 %30, !dbg !27
  %69 = getelementptr float, ptr addrspace(1) %7, i64 %32, !dbg !27
  %70 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %68, i1 true) #3, !dbg !28
  %71 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %69, i1 true) #3, !dbg !28
  %72 = getelementptr float, ptr addrspace(1) %8, i64 %30, !dbg !29
  %73 = getelementptr float, ptr addrspace(1) %8, i64 %32, !dbg !29
  %74 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %72, i1 true) #3, !dbg !30
  %75 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %73, i1 true) #3, !dbg !30
  %76 = getelementptr float, ptr addrspace(1) %9, i64 %30, !dbg !31
  %77 = getelementptr float, ptr addrspace(1) %9, i64 %32, !dbg !31
  %78 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %76, i1 true) #3, !dbg !32
  %79 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %77, i1 true) #3, !dbg !32
  %80 = getelementptr float, ptr addrspace(1) %10, i64 %30, !dbg !33
  %81 = getelementptr float, ptr addrspace(1) %10, i64 %32, !dbg !33
  %82 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %80, i1 true) #3, !dbg !34
  %83 = extractvalue { i32, i32, i32, i32 } %82, 0, !dbg !34
  %84 = extractvalue { i32, i32, i32, i32 } %82, 1, !dbg !34
  %85 = extractvalue { i32, i32, i32, i32 } %82, 2, !dbg !34
  %86 = extractvalue { i32, i32, i32, i32 } %82, 3, !dbg !34
  %87 = bitcast i32 %83 to float, !dbg !34
  %88 = bitcast i32 %84 to float, !dbg !34
  %89 = bitcast i32 %85 to float, !dbg !34
  %90 = bitcast i32 %86 to float, !dbg !34
  %91 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %81, i1 true) #3, !dbg !34
  %92 = extractvalue { i32, i32, i32, i32 } %91, 0, !dbg !34
  %93 = extractvalue { i32, i32, i32, i32 } %91, 1, !dbg !34
  %94 = extractvalue { i32, i32, i32, i32 } %91, 2, !dbg !34
  %95 = extractvalue { i32, i32, i32, i32 } %91, 3, !dbg !34
  %96 = bitcast i32 %92 to float, !dbg !34
  %97 = bitcast i32 %93 to float, !dbg !34
  %98 = bitcast i32 %94 to float, !dbg !34
  %99 = bitcast i32 %95 to float, !dbg !34
  %100 = getelementptr float, ptr addrspace(1) %11, i64 %30, !dbg !35
  %101 = getelementptr float, ptr addrspace(1) %11, i64 %32, !dbg !35
  %102 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %100, i1 true) #3, !dbg !36
  %103 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %101, i1 true) #3, !dbg !36
  %104 = getelementptr float, ptr addrspace(1) %12, i64 %30, !dbg !37
  %105 = getelementptr float, ptr addrspace(1) %12, i64 %32, !dbg !37
  %106 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %104, i1 true) #3, !dbg !38
  %107 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %105, i1 true) #3, !dbg !38
  %108 = fadd float %55, 0x3EE4F8B580000000, !dbg !39
  %109 = fadd float %56, 0x3EE4F8B580000000, !dbg !39
  %110 = fadd float %57, 0x3EE4F8B580000000, !dbg !39
  %111 = fadd float %58, 0x3EE4F8B580000000, !dbg !39
  %112 = fadd float %64, 0x3EE4F8B580000000, !dbg !39
  %113 = fadd float %65, 0x3EE4F8B580000000, !dbg !39
  %114 = fadd float %66, 0x3EE4F8B580000000, !dbg !39
  %115 = fadd float %67, 0x3EE4F8B580000000, !dbg !39
  %116 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not.i = icmp eq i32 %116, 0, !dbg !40
  %117 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !40
  %.not1.i = icmp eq i32 %117, 0, !dbg !40
  br i1 %.not.i, label %123, label %118, !dbg !40

118:                                              ; preds = %14
  br i1 %.not1.i, label %121, label %119, !dbg !40

119:                                              ; preds = %118
  %120 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %108) #3, !dbg !40
  br label %__nv_sqrtf.exit, !dbg !40

121:                                              ; preds = %118
  %122 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %108) #3, !dbg !40
  br label %__nv_sqrtf.exit, !dbg !40

123:                                              ; preds = %14
  br i1 %.not1.i, label %126, label %124, !dbg !40

124:                                              ; preds = %123
  %125 = tail call float @llvm.nvvm.sqrt.rn.f(float %108) #3, !dbg !40
  br label %__nv_sqrtf.exit, !dbg !40

126:                                              ; preds = %123
  %127 = tail call float @llvm.nvvm.sqrt.approx.f(float %108) #3, !dbg !40
  br label %__nv_sqrtf.exit, !dbg !40

__nv_sqrtf.exit:                                  ; preds = %119, %121, %124, %126
  %.0.i = phi float [ %120, %119 ], [ %122, %121 ], [ %125, %124 ], [ %127, %126 ], !dbg !40
  %128 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not.i1 = icmp eq i32 %128, 0, !dbg !40
  %129 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !40
  %.not1.i4 = icmp eq i32 %129, 0, !dbg !40
  br i1 %.not.i1, label %135, label %130, !dbg !40

130:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %133, label %131, !dbg !40

131:                                              ; preds = %130
  %132 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %109) #3, !dbg !40
  br label %__nv_sqrtf.exit5, !dbg !40

133:                                              ; preds = %130
  %134 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %109) #3, !dbg !40
  br label %__nv_sqrtf.exit5, !dbg !40

135:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %138, label %136, !dbg !40

136:                                              ; preds = %135
  %137 = tail call float @llvm.nvvm.sqrt.rn.f(float %109) #3, !dbg !40
  br label %__nv_sqrtf.exit5, !dbg !40

138:                                              ; preds = %135
  %139 = tail call float @llvm.nvvm.sqrt.approx.f(float %109) #3, !dbg !40
  br label %__nv_sqrtf.exit5, !dbg !40

__nv_sqrtf.exit5:                                 ; preds = %131, %133, %136, %138
  %.0.i3 = phi float [ %132, %131 ], [ %134, %133 ], [ %137, %136 ], [ %139, %138 ], !dbg !40
  %140 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not.i6 = icmp eq i32 %140, 0, !dbg !40
  %141 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !40
  %.not1.i9 = icmp eq i32 %141, 0, !dbg !40
  br i1 %.not.i6, label %147, label %142, !dbg !40

142:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %145, label %143, !dbg !40

143:                                              ; preds = %142
  %144 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %110) #3, !dbg !40
  br label %__nv_sqrtf.exit10, !dbg !40

145:                                              ; preds = %142
  %146 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %110) #3, !dbg !40
  br label %__nv_sqrtf.exit10, !dbg !40

147:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %150, label %148, !dbg !40

148:                                              ; preds = %147
  %149 = tail call float @llvm.nvvm.sqrt.rn.f(float %110) #3, !dbg !40
  br label %__nv_sqrtf.exit10, !dbg !40

150:                                              ; preds = %147
  %151 = tail call float @llvm.nvvm.sqrt.approx.f(float %110) #3, !dbg !40
  br label %__nv_sqrtf.exit10, !dbg !40

__nv_sqrtf.exit10:                                ; preds = %143, %145, %148, %150
  %.0.i8 = phi float [ %144, %143 ], [ %146, %145 ], [ %149, %148 ], [ %151, %150 ], !dbg !40
  %152 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not.i11 = icmp eq i32 %152, 0, !dbg !40
  %153 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !40
  %.not1.i14 = icmp eq i32 %153, 0, !dbg !40
  br i1 %.not.i11, label %159, label %154, !dbg !40

154:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %157, label %155, !dbg !40

155:                                              ; preds = %154
  %156 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %111) #3, !dbg !40
  br label %__nv_sqrtf.exit15, !dbg !40

157:                                              ; preds = %154
  %158 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %111) #3, !dbg !40
  br label %__nv_sqrtf.exit15, !dbg !40

159:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %162, label %160, !dbg !40

160:                                              ; preds = %159
  %161 = tail call float @llvm.nvvm.sqrt.rn.f(float %111) #3, !dbg !40
  br label %__nv_sqrtf.exit15, !dbg !40

162:                                              ; preds = %159
  %163 = tail call float @llvm.nvvm.sqrt.approx.f(float %111) #3, !dbg !40
  br label %__nv_sqrtf.exit15, !dbg !40

__nv_sqrtf.exit15:                                ; preds = %155, %157, %160, %162
  %.0.i13 = phi float [ %156, %155 ], [ %158, %157 ], [ %161, %160 ], [ %163, %162 ], !dbg !40
  %164 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not.i16 = icmp eq i32 %164, 0, !dbg !40
  %165 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !40
  %.not1.i19 = icmp eq i32 %165, 0, !dbg !40
  br i1 %.not.i16, label %171, label %166, !dbg !40

166:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %169, label %167, !dbg !40

167:                                              ; preds = %166
  %168 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %112) #3, !dbg !40
  br label %__nv_sqrtf.exit20, !dbg !40

169:                                              ; preds = %166
  %170 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %112) #3, !dbg !40
  br label %__nv_sqrtf.exit20, !dbg !40

171:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %174, label %172, !dbg !40

172:                                              ; preds = %171
  %173 = tail call float @llvm.nvvm.sqrt.rn.f(float %112) #3, !dbg !40
  br label %__nv_sqrtf.exit20, !dbg !40

174:                                              ; preds = %171
  %175 = tail call float @llvm.nvvm.sqrt.approx.f(float %112) #3, !dbg !40
  br label %__nv_sqrtf.exit20, !dbg !40

__nv_sqrtf.exit20:                                ; preds = %167, %169, %172, %174
  %.0.i18 = phi float [ %168, %167 ], [ %170, %169 ], [ %173, %172 ], [ %175, %174 ], !dbg !40
  %176 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not.i21 = icmp eq i32 %176, 0, !dbg !40
  %177 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !40
  %.not1.i24 = icmp eq i32 %177, 0, !dbg !40
  br i1 %.not.i21, label %183, label %178, !dbg !40

178:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %181, label %179, !dbg !40

179:                                              ; preds = %178
  %180 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %113) #3, !dbg !40
  br label %__nv_sqrtf.exit25, !dbg !40

181:                                              ; preds = %178
  %182 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %113) #3, !dbg !40
  br label %__nv_sqrtf.exit25, !dbg !40

183:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %186, label %184, !dbg !40

184:                                              ; preds = %183
  %185 = tail call float @llvm.nvvm.sqrt.rn.f(float %113) #3, !dbg !40
  br label %__nv_sqrtf.exit25, !dbg !40

186:                                              ; preds = %183
  %187 = tail call float @llvm.nvvm.sqrt.approx.f(float %113) #3, !dbg !40
  br label %__nv_sqrtf.exit25, !dbg !40

__nv_sqrtf.exit25:                                ; preds = %179, %181, %184, %186
  %.0.i23 = phi float [ %180, %179 ], [ %182, %181 ], [ %185, %184 ], [ %187, %186 ], !dbg !40
  %188 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not.i26 = icmp eq i32 %188, 0, !dbg !40
  %189 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !40
  %.not1.i29 = icmp eq i32 %189, 0, !dbg !40
  br i1 %.not.i26, label %195, label %190, !dbg !40

190:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %193, label %191, !dbg !40

191:                                              ; preds = %190
  %192 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %114) #3, !dbg !40
  br label %__nv_sqrtf.exit30, !dbg !40

193:                                              ; preds = %190
  %194 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %114) #3, !dbg !40
  br label %__nv_sqrtf.exit30, !dbg !40

195:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %198, label %196, !dbg !40

196:                                              ; preds = %195
  %197 = tail call float @llvm.nvvm.sqrt.rn.f(float %114) #3, !dbg !40
  br label %__nv_sqrtf.exit30, !dbg !40

198:                                              ; preds = %195
  %199 = tail call float @llvm.nvvm.sqrt.approx.f(float %114) #3, !dbg !40
  br label %__nv_sqrtf.exit30, !dbg !40

__nv_sqrtf.exit30:                                ; preds = %191, %193, %196, %198
  %.0.i28 = phi float [ %192, %191 ], [ %194, %193 ], [ %197, %196 ], [ %199, %198 ], !dbg !40
  %200 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not.i31 = icmp eq i32 %200, 0, !dbg !40
  %201 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !40
  %.not1.i34 = icmp eq i32 %201, 0, !dbg !40
  br i1 %.not.i31, label %207, label %202, !dbg !40

202:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %205, label %203, !dbg !40

203:                                              ; preds = %202
  %204 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %115) #3, !dbg !40
  br label %__nv_sqrtf.exit35, !dbg !40

205:                                              ; preds = %202
  %206 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %115) #3, !dbg !40
  br label %__nv_sqrtf.exit35, !dbg !40

207:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %210, label %208, !dbg !40

208:                                              ; preds = %207
  %209 = tail call float @llvm.nvvm.sqrt.rn.f(float %115) #3, !dbg !40
  br label %__nv_sqrtf.exit35, !dbg !40

210:                                              ; preds = %207
  %211 = tail call float @llvm.nvvm.sqrt.approx.f(float %115) #3, !dbg !40
  br label %__nv_sqrtf.exit35, !dbg !40

__nv_sqrtf.exit35:                                ; preds = %203, %205, %208, %210
  %.0.i33 = phi float [ %204, %203 ], [ %206, %205 ], [ %209, %208 ], [ %211, %210 ], !dbg !40
  %212 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !41
  %213 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !41
  %214 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !41
  %215 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !41
  %216 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !41
  %217 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !41
  %218 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !41
  %219 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !41
  %220 = fadd float %87, 0x3EE4F8B580000000, !dbg !42
  %221 = fadd float %88, 0x3EE4F8B580000000, !dbg !42
  %222 = fadd float %89, 0x3EE4F8B580000000, !dbg !42
  %223 = fadd float %90, 0x3EE4F8B580000000, !dbg !42
  %224 = fadd float %96, 0x3EE4F8B580000000, !dbg !42
  %225 = fadd float %97, 0x3EE4F8B580000000, !dbg !42
  %226 = fadd float %98, 0x3EE4F8B580000000, !dbg !42
  %227 = fadd float %99, 0x3EE4F8B580000000, !dbg !42
  %228 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !43
  %.not.i36 = icmp eq i32 %228, 0, !dbg !43
  %229 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !43
  %.not1.i39 = icmp eq i32 %229, 0, !dbg !43
  br i1 %.not.i36, label %235, label %230, !dbg !43

230:                                              ; preds = %__nv_sqrtf.exit35
  br i1 %.not1.i39, label %233, label %231, !dbg !43

231:                                              ; preds = %230
  %232 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %220) #3, !dbg !43
  br label %__nv_sqrtf.exit40, !dbg !43

233:                                              ; preds = %230
  %234 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %220) #3, !dbg !43
  br label %__nv_sqrtf.exit40, !dbg !43

235:                                              ; preds = %__nv_sqrtf.exit35
  br i1 %.not1.i39, label %238, label %236, !dbg !43

236:                                              ; preds = %235
  %237 = tail call float @llvm.nvvm.sqrt.rn.f(float %220) #3, !dbg !43
  br label %__nv_sqrtf.exit40, !dbg !43

238:                                              ; preds = %235
  %239 = tail call float @llvm.nvvm.sqrt.approx.f(float %220) #3, !dbg !43
  br label %__nv_sqrtf.exit40, !dbg !43

__nv_sqrtf.exit40:                                ; preds = %231, %233, %236, %238
  %.0.i38 = phi float [ %232, %231 ], [ %234, %233 ], [ %237, %236 ], [ %239, %238 ], !dbg !43
  %240 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !43
  %.not.i41 = icmp eq i32 %240, 0, !dbg !43
  %241 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !43
  %.not1.i44 = icmp eq i32 %241, 0, !dbg !43
  br i1 %.not.i41, label %247, label %242, !dbg !43

242:                                              ; preds = %__nv_sqrtf.exit40
  br i1 %.not1.i44, label %245, label %243, !dbg !43

243:                                              ; preds = %242
  %244 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %221) #3, !dbg !43
  br label %__nv_sqrtf.exit45, !dbg !43

245:                                              ; preds = %242
  %246 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %221) #3, !dbg !43
  br label %__nv_sqrtf.exit45, !dbg !43

247:                                              ; preds = %__nv_sqrtf.exit40
  br i1 %.not1.i44, label %250, label %248, !dbg !43

248:                                              ; preds = %247
  %249 = tail call float @llvm.nvvm.sqrt.rn.f(float %221) #3, !dbg !43
  br label %__nv_sqrtf.exit45, !dbg !43

250:                                              ; preds = %247
  %251 = tail call float @llvm.nvvm.sqrt.approx.f(float %221) #3, !dbg !43
  br label %__nv_sqrtf.exit45, !dbg !43

__nv_sqrtf.exit45:                                ; preds = %243, %245, %248, %250
  %.0.i43 = phi float [ %244, %243 ], [ %246, %245 ], [ %249, %248 ], [ %251, %250 ], !dbg !43
  %252 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !43
  %.not.i46 = icmp eq i32 %252, 0, !dbg !43
  %253 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !43
  %.not1.i49 = icmp eq i32 %253, 0, !dbg !43
  br i1 %.not.i46, label %259, label %254, !dbg !43

254:                                              ; preds = %__nv_sqrtf.exit45
  br i1 %.not1.i49, label %257, label %255, !dbg !43

255:                                              ; preds = %254
  %256 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %222) #3, !dbg !43
  br label %__nv_sqrtf.exit50, !dbg !43

257:                                              ; preds = %254
  %258 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %222) #3, !dbg !43
  br label %__nv_sqrtf.exit50, !dbg !43

259:                                              ; preds = %__nv_sqrtf.exit45
  br i1 %.not1.i49, label %262, label %260, !dbg !43

260:                                              ; preds = %259
  %261 = tail call float @llvm.nvvm.sqrt.rn.f(float %222) #3, !dbg !43
  br label %__nv_sqrtf.exit50, !dbg !43

262:                                              ; preds = %259
  %263 = tail call float @llvm.nvvm.sqrt.approx.f(float %222) #3, !dbg !43
  br label %__nv_sqrtf.exit50, !dbg !43

__nv_sqrtf.exit50:                                ; preds = %255, %257, %260, %262
  %.0.i48 = phi float [ %256, %255 ], [ %258, %257 ], [ %261, %260 ], [ %263, %262 ], !dbg !43
  %264 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !43
  %.not.i51 = icmp eq i32 %264, 0, !dbg !43
  %265 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !43
  %.not1.i54 = icmp eq i32 %265, 0, !dbg !43
  br i1 %.not.i51, label %271, label %266, !dbg !43

266:                                              ; preds = %__nv_sqrtf.exit50
  br i1 %.not1.i54, label %269, label %267, !dbg !43

267:                                              ; preds = %266
  %268 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %223) #3, !dbg !43
  br label %__nv_sqrtf.exit55, !dbg !43

269:                                              ; preds = %266
  %270 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %223) #3, !dbg !43
  br label %__nv_sqrtf.exit55, !dbg !43

271:                                              ; preds = %__nv_sqrtf.exit50
  br i1 %.not1.i54, label %274, label %272, !dbg !43

272:                                              ; preds = %271
  %273 = tail call float @llvm.nvvm.sqrt.rn.f(float %223) #3, !dbg !43
  br label %__nv_sqrtf.exit55, !dbg !43

274:                                              ; preds = %271
  %275 = tail call float @llvm.nvvm.sqrt.approx.f(float %223) #3, !dbg !43
  br label %__nv_sqrtf.exit55, !dbg !43

__nv_sqrtf.exit55:                                ; preds = %267, %269, %272, %274
  %.0.i53 = phi float [ %268, %267 ], [ %270, %269 ], [ %273, %272 ], [ %275, %274 ], !dbg !43
  %276 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !43
  %.not.i56 = icmp eq i32 %276, 0, !dbg !43
  %277 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !43
  %.not1.i59 = icmp eq i32 %277, 0, !dbg !43
  br i1 %.not.i56, label %283, label %278, !dbg !43

278:                                              ; preds = %__nv_sqrtf.exit55
  br i1 %.not1.i59, label %281, label %279, !dbg !43

279:                                              ; preds = %278
  %280 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %224) #3, !dbg !43
  br label %__nv_sqrtf.exit60, !dbg !43

281:                                              ; preds = %278
  %282 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %224) #3, !dbg !43
  br label %__nv_sqrtf.exit60, !dbg !43

283:                                              ; preds = %__nv_sqrtf.exit55
  br i1 %.not1.i59, label %286, label %284, !dbg !43

284:                                              ; preds = %283
  %285 = tail call float @llvm.nvvm.sqrt.rn.f(float %224) #3, !dbg !43
  br label %__nv_sqrtf.exit60, !dbg !43

286:                                              ; preds = %283
  %287 = tail call float @llvm.nvvm.sqrt.approx.f(float %224) #3, !dbg !43
  br label %__nv_sqrtf.exit60, !dbg !43

__nv_sqrtf.exit60:                                ; preds = %279, %281, %284, %286
  %.0.i58 = phi float [ %280, %279 ], [ %282, %281 ], [ %285, %284 ], [ %287, %286 ], !dbg !43
  %288 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !43
  %.not.i61 = icmp eq i32 %288, 0, !dbg !43
  %289 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !43
  %.not1.i64 = icmp eq i32 %289, 0, !dbg !43
  br i1 %.not.i61, label %295, label %290, !dbg !43

290:                                              ; preds = %__nv_sqrtf.exit60
  br i1 %.not1.i64, label %293, label %291, !dbg !43

291:                                              ; preds = %290
  %292 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %225) #3, !dbg !43
  br label %__nv_sqrtf.exit65, !dbg !43

293:                                              ; preds = %290
  %294 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %225) #3, !dbg !43
  br label %__nv_sqrtf.exit65, !dbg !43

295:                                              ; preds = %__nv_sqrtf.exit60
  br i1 %.not1.i64, label %298, label %296, !dbg !43

296:                                              ; preds = %295
  %297 = tail call float @llvm.nvvm.sqrt.rn.f(float %225) #3, !dbg !43
  br label %__nv_sqrtf.exit65, !dbg !43

298:                                              ; preds = %295
  %299 = tail call float @llvm.nvvm.sqrt.approx.f(float %225) #3, !dbg !43
  br label %__nv_sqrtf.exit65, !dbg !43

__nv_sqrtf.exit65:                                ; preds = %291, %293, %296, %298
  %.0.i63 = phi float [ %292, %291 ], [ %294, %293 ], [ %297, %296 ], [ %299, %298 ], !dbg !43
  %300 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !43
  %.not.i66 = icmp eq i32 %300, 0, !dbg !43
  %301 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !43
  %.not1.i69 = icmp eq i32 %301, 0, !dbg !43
  br i1 %.not.i66, label %307, label %302, !dbg !43

302:                                              ; preds = %__nv_sqrtf.exit65
  br i1 %.not1.i69, label %305, label %303, !dbg !43

303:                                              ; preds = %302
  %304 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %226) #3, !dbg !43
  br label %__nv_sqrtf.exit70, !dbg !43

305:                                              ; preds = %302
  %306 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %226) #3, !dbg !43
  br label %__nv_sqrtf.exit70, !dbg !43

307:                                              ; preds = %__nv_sqrtf.exit65
  br i1 %.not1.i69, label %310, label %308, !dbg !43

308:                                              ; preds = %307
  %309 = tail call float @llvm.nvvm.sqrt.rn.f(float %226) #3, !dbg !43
  br label %__nv_sqrtf.exit70, !dbg !43

310:                                              ; preds = %307
  %311 = tail call float @llvm.nvvm.sqrt.approx.f(float %226) #3, !dbg !43
  br label %__nv_sqrtf.exit70, !dbg !43

__nv_sqrtf.exit70:                                ; preds = %303, %305, %308, %310
  %.0.i68 = phi float [ %304, %303 ], [ %306, %305 ], [ %309, %308 ], [ %311, %310 ], !dbg !43
  %312 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !43
  %.not.i71 = icmp eq i32 %312, 0, !dbg !43
  %313 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !43
  %.not1.i74 = icmp eq i32 %313, 0, !dbg !43
  br i1 %.not.i71, label %319, label %314, !dbg !43

314:                                              ; preds = %__nv_sqrtf.exit70
  br i1 %.not1.i74, label %317, label %315, !dbg !43

315:                                              ; preds = %314
  %316 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %227) #3, !dbg !43
  br label %__nv_sqrtf.exit75, !dbg !43

317:                                              ; preds = %314
  %318 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %227) #3, !dbg !43
  br label %__nv_sqrtf.exit75, !dbg !43

319:                                              ; preds = %__nv_sqrtf.exit70
  br i1 %.not1.i74, label %322, label %320, !dbg !43

320:                                              ; preds = %319
  %321 = tail call float @llvm.nvvm.sqrt.rn.f(float %227) #3, !dbg !43
  br label %__nv_sqrtf.exit75, !dbg !43

322:                                              ; preds = %319
  %323 = tail call float @llvm.nvvm.sqrt.approx.f(float %227) #3, !dbg !43
  br label %__nv_sqrtf.exit75, !dbg !43

__nv_sqrtf.exit75:                                ; preds = %315, %317, %320, %322
  %.0.i73 = phi float [ %316, %315 ], [ %318, %317 ], [ %321, %320 ], [ %323, %322 ], !dbg !43
  %324 = extractvalue { i32, i32, i32, i32 } %29, 3, !dbg !16
  %325 = bitcast i32 %324 to float, !dbg !16
  %326 = extractvalue { i32, i32, i32, i32 } %35, 3, !dbg !18
  %327 = bitcast i32 %326 to float, !dbg !18
  %328 = fadd float %325, %327, !dbg !44
  %329 = extractvalue { i32, i32, i32, i32 } %79, 3, !dbg !32
  %330 = bitcast i32 %329 to float, !dbg !32
  %331 = fsub float %328, %330, !dbg !45
  %332 = extractvalue { i32, i32, i32, i32 } %29, 2, !dbg !16
  %333 = bitcast i32 %332 to float, !dbg !16
  %334 = extractvalue { i32, i32, i32, i32 } %35, 2, !dbg !18
  %335 = bitcast i32 %334 to float, !dbg !18
  %336 = fadd float %333, %335, !dbg !44
  %337 = extractvalue { i32, i32, i32, i32 } %79, 2, !dbg !32
  %338 = bitcast i32 %337 to float, !dbg !32
  %339 = fsub float %336, %338, !dbg !45
  %340 = extractvalue { i32, i32, i32, i32 } %29, 1, !dbg !16
  %341 = bitcast i32 %340 to float, !dbg !16
  %342 = extractvalue { i32, i32, i32, i32 } %35, 1, !dbg !18
  %343 = bitcast i32 %342 to float, !dbg !18
  %344 = fadd float %341, %343, !dbg !44
  %345 = extractvalue { i32, i32, i32, i32 } %79, 1, !dbg !32
  %346 = bitcast i32 %345 to float, !dbg !32
  %347 = fsub float %344, %346, !dbg !45
  %348 = extractvalue { i32, i32, i32, i32 } %29, 0, !dbg !16
  %349 = bitcast i32 %348 to float, !dbg !16
  %350 = extractvalue { i32, i32, i32, i32 } %35, 0, !dbg !18
  %351 = bitcast i32 %350 to float, !dbg !18
  %352 = fadd float %349, %351, !dbg !44
  %353 = extractvalue { i32, i32, i32, i32 } %79, 0, !dbg !32
  %354 = bitcast i32 %353 to float, !dbg !32
  %355 = fsub float %352, %354, !dbg !45
  %356 = extractvalue { i32, i32, i32, i32 } %28, 3, !dbg !16
  %357 = bitcast i32 %356 to float, !dbg !16
  %358 = extractvalue { i32, i32, i32, i32 } %34, 3, !dbg !18
  %359 = bitcast i32 %358 to float, !dbg !18
  %360 = fadd float %357, %359, !dbg !44
  %361 = extractvalue { i32, i32, i32, i32 } %78, 3, !dbg !32
  %362 = bitcast i32 %361 to float, !dbg !32
  %363 = fsub float %360, %362, !dbg !45
  %364 = extractvalue { i32, i32, i32, i32 } %28, 2, !dbg !16
  %365 = bitcast i32 %364 to float, !dbg !16
  %366 = extractvalue { i32, i32, i32, i32 } %34, 2, !dbg !18
  %367 = bitcast i32 %366 to float, !dbg !18
  %368 = fadd float %365, %367, !dbg !44
  %369 = extractvalue { i32, i32, i32, i32 } %78, 2, !dbg !32
  %370 = bitcast i32 %369 to float, !dbg !32
  %371 = fsub float %368, %370, !dbg !45
  %372 = extractvalue { i32, i32, i32, i32 } %28, 1, !dbg !16
  %373 = bitcast i32 %372 to float, !dbg !16
  %374 = extractvalue { i32, i32, i32, i32 } %34, 1, !dbg !18
  %375 = bitcast i32 %374 to float, !dbg !18
  %376 = fadd float %373, %375, !dbg !44
  %377 = extractvalue { i32, i32, i32, i32 } %78, 1, !dbg !32
  %378 = bitcast i32 %377 to float, !dbg !32
  %379 = fsub float %376, %378, !dbg !45
  %380 = extractvalue { i32, i32, i32, i32 } %28, 0, !dbg !16
  %381 = bitcast i32 %380 to float, !dbg !16
  %382 = extractvalue { i32, i32, i32, i32 } %34, 0, !dbg !18
  %383 = bitcast i32 %382 to float, !dbg !18
  %384 = fadd float %381, %383, !dbg !44
  %385 = extractvalue { i32, i32, i32, i32 } %78, 0, !dbg !32
  %386 = bitcast i32 %385 to float, !dbg !32
  %387 = fsub float %384, %386, !dbg !45
  %388 = extractvalue { i32, i32, i32, i32 } %39, 3, !dbg !20
  %389 = bitcast i32 %388 to float, !dbg !20
  %390 = extractvalue { i32, i32, i32, i32 } %43, 3, !dbg !22
  %391 = bitcast i32 %390 to float, !dbg !22
  %392 = fadd float %389, %391, !dbg !46
  %393 = extractvalue { i32, i32, i32, i32 } %47, 3, !dbg !24
  %394 = bitcast i32 %393 to float, !dbg !24
  %395 = fsub float %392, %394, !dbg !47
  %396 = fmul float %395, %219, !dbg !48
  %397 = extractvalue { i32, i32, i32, i32 } %71, 3, !dbg !28
  %398 = bitcast i32 %397 to float, !dbg !28
  %399 = fmul float %396, %398, !dbg !49
  %400 = extractvalue { i32, i32, i32, i32 } %75, 3, !dbg !30
  %401 = bitcast i32 %400 to float, !dbg !30
  %402 = fadd float %399, %401, !dbg !50
  %403 = extractvalue { i32, i32, i32, i32 } %39, 2, !dbg !20
  %404 = bitcast i32 %403 to float, !dbg !20
  %405 = extractvalue { i32, i32, i32, i32 } %43, 2, !dbg !22
  %406 = bitcast i32 %405 to float, !dbg !22
  %407 = fadd float %404, %406, !dbg !46
  %408 = extractvalue { i32, i32, i32, i32 } %47, 2, !dbg !24
  %409 = bitcast i32 %408 to float, !dbg !24
  %410 = fsub float %407, %409, !dbg !47
  %411 = fmul float %410, %218, !dbg !48
  %412 = extractvalue { i32, i32, i32, i32 } %71, 2, !dbg !28
  %413 = bitcast i32 %412 to float, !dbg !28
  %414 = fmul float %411, %413, !dbg !49
  %415 = extractvalue { i32, i32, i32, i32 } %75, 2, !dbg !30
  %416 = bitcast i32 %415 to float, !dbg !30
  %417 = fadd float %414, %416, !dbg !50
  %418 = extractvalue { i32, i32, i32, i32 } %39, 1, !dbg !20
  %419 = bitcast i32 %418 to float, !dbg !20
  %420 = extractvalue { i32, i32, i32, i32 } %43, 1, !dbg !22
  %421 = bitcast i32 %420 to float, !dbg !22
  %422 = fadd float %419, %421, !dbg !46
  %423 = extractvalue { i32, i32, i32, i32 } %47, 1, !dbg !24
  %424 = bitcast i32 %423 to float, !dbg !24
  %425 = fsub float %422, %424, !dbg !47
  %426 = fmul float %425, %217, !dbg !48
  %427 = extractvalue { i32, i32, i32, i32 } %71, 1, !dbg !28
  %428 = bitcast i32 %427 to float, !dbg !28
  %429 = fmul float %426, %428, !dbg !49
  %430 = extractvalue { i32, i32, i32, i32 } %75, 1, !dbg !30
  %431 = bitcast i32 %430 to float, !dbg !30
  %432 = fadd float %429, %431, !dbg !50
  %433 = extractvalue { i32, i32, i32, i32 } %39, 0, !dbg !20
  %434 = bitcast i32 %433 to float, !dbg !20
  %435 = extractvalue { i32, i32, i32, i32 } %43, 0, !dbg !22
  %436 = bitcast i32 %435 to float, !dbg !22
  %437 = fadd float %434, %436, !dbg !46
  %438 = extractvalue { i32, i32, i32, i32 } %47, 0, !dbg !24
  %439 = bitcast i32 %438 to float, !dbg !24
  %440 = fsub float %437, %439, !dbg !47
  %441 = fmul float %440, %216, !dbg !48
  %442 = extractvalue { i32, i32, i32, i32 } %71, 0, !dbg !28
  %443 = bitcast i32 %442 to float, !dbg !28
  %444 = fmul float %441, %443, !dbg !49
  %445 = extractvalue { i32, i32, i32, i32 } %75, 0, !dbg !30
  %446 = bitcast i32 %445 to float, !dbg !30
  %447 = fadd float %444, %446, !dbg !50
  %448 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !20
  %449 = bitcast i32 %448 to float, !dbg !20
  %450 = extractvalue { i32, i32, i32, i32 } %42, 3, !dbg !22
  %451 = bitcast i32 %450 to float, !dbg !22
  %452 = fadd float %449, %451, !dbg !46
  %453 = extractvalue { i32, i32, i32, i32 } %46, 3, !dbg !24
  %454 = bitcast i32 %453 to float, !dbg !24
  %455 = fsub float %452, %454, !dbg !47
  %456 = fmul float %455, %215, !dbg !48
  %457 = extractvalue { i32, i32, i32, i32 } %70, 3, !dbg !28
  %458 = bitcast i32 %457 to float, !dbg !28
  %459 = fmul float %456, %458, !dbg !49
  %460 = extractvalue { i32, i32, i32, i32 } %74, 3, !dbg !30
  %461 = bitcast i32 %460 to float, !dbg !30
  %462 = fadd float %459, %461, !dbg !50
  %463 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !20
  %464 = bitcast i32 %463 to float, !dbg !20
  %465 = extractvalue { i32, i32, i32, i32 } %42, 2, !dbg !22
  %466 = bitcast i32 %465 to float, !dbg !22
  %467 = fadd float %464, %466, !dbg !46
  %468 = extractvalue { i32, i32, i32, i32 } %46, 2, !dbg !24
  %469 = bitcast i32 %468 to float, !dbg !24
  %470 = fsub float %467, %469, !dbg !47
  %471 = fmul float %470, %214, !dbg !48
  %472 = extractvalue { i32, i32, i32, i32 } %70, 2, !dbg !28
  %473 = bitcast i32 %472 to float, !dbg !28
  %474 = fmul float %471, %473, !dbg !49
  %475 = extractvalue { i32, i32, i32, i32 } %74, 2, !dbg !30
  %476 = bitcast i32 %475 to float, !dbg !30
  %477 = fadd float %474, %476, !dbg !50
  %478 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !20
  %479 = bitcast i32 %478 to float, !dbg !20
  %480 = extractvalue { i32, i32, i32, i32 } %42, 1, !dbg !22
  %481 = bitcast i32 %480 to float, !dbg !22
  %482 = fadd float %479, %481, !dbg !46
  %483 = extractvalue { i32, i32, i32, i32 } %46, 1, !dbg !24
  %484 = bitcast i32 %483 to float, !dbg !24
  %485 = fsub float %482, %484, !dbg !47
  %486 = fmul float %485, %213, !dbg !48
  %487 = extractvalue { i32, i32, i32, i32 } %70, 1, !dbg !28
  %488 = bitcast i32 %487 to float, !dbg !28
  %489 = fmul float %486, %488, !dbg !49
  %490 = extractvalue { i32, i32, i32, i32 } %74, 1, !dbg !30
  %491 = bitcast i32 %490 to float, !dbg !30
  %492 = fadd float %489, %491, !dbg !50
  %493 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !20
  %494 = bitcast i32 %493 to float, !dbg !20
  %495 = extractvalue { i32, i32, i32, i32 } %42, 0, !dbg !22
  %496 = bitcast i32 %495 to float, !dbg !22
  %497 = fadd float %494, %496, !dbg !46
  %498 = extractvalue { i32, i32, i32, i32 } %46, 0, !dbg !24
  %499 = bitcast i32 %498 to float, !dbg !24
  %500 = fsub float %497, %499, !dbg !47
  %501 = fmul float %500, %212, !dbg !48
  %502 = extractvalue { i32, i32, i32, i32 } %70, 0, !dbg !28
  %503 = bitcast i32 %502 to float, !dbg !28
  %504 = fmul float %501, %503, !dbg !49
  %505 = extractvalue { i32, i32, i32, i32 } %74, 0, !dbg !30
  %506 = bitcast i32 %505 to float, !dbg !30
  %507 = fadd float %504, %506, !dbg !50
  %508 = extractvalue { i32, i32, i32, i32 } %107, 3, !dbg !38
  %509 = bitcast i32 %508 to float, !dbg !38
  %510 = extractvalue { i32, i32, i32, i32 } %107, 2, !dbg !38
  %511 = bitcast i32 %510 to float, !dbg !38
  %512 = extractvalue { i32, i32, i32, i32 } %107, 1, !dbg !38
  %513 = bitcast i32 %512 to float, !dbg !38
  %514 = extractvalue { i32, i32, i32, i32 } %107, 0, !dbg !38
  %515 = bitcast i32 %514 to float, !dbg !38
  %516 = extractvalue { i32, i32, i32, i32 } %106, 3, !dbg !38
  %517 = bitcast i32 %516 to float, !dbg !38
  %518 = extractvalue { i32, i32, i32, i32 } %106, 2, !dbg !38
  %519 = bitcast i32 %518 to float, !dbg !38
  %520 = extractvalue { i32, i32, i32, i32 } %106, 1, !dbg !38
  %521 = bitcast i32 %520 to float, !dbg !38
  %522 = extractvalue { i32, i32, i32, i32 } %106, 0, !dbg !38
  %523 = bitcast i32 %522 to float, !dbg !38
  %524 = extractvalue { i32, i32, i32, i32 } %103, 3, !dbg !36
  %525 = bitcast i32 %524 to float, !dbg !36
  %526 = extractvalue { i32, i32, i32, i32 } %103, 2, !dbg !36
  %527 = bitcast i32 %526 to float, !dbg !36
  %528 = extractvalue { i32, i32, i32, i32 } %103, 1, !dbg !36
  %529 = bitcast i32 %528 to float, !dbg !36
  %530 = extractvalue { i32, i32, i32, i32 } %103, 0, !dbg !36
  %531 = bitcast i32 %530 to float, !dbg !36
  %532 = extractvalue { i32, i32, i32, i32 } %102, 3, !dbg !36
  %533 = bitcast i32 %532 to float, !dbg !36
  %534 = extractvalue { i32, i32, i32, i32 } %102, 2, !dbg !36
  %535 = bitcast i32 %534 to float, !dbg !36
  %536 = extractvalue { i32, i32, i32, i32 } %102, 1, !dbg !36
  %537 = bitcast i32 %536 to float, !dbg !36
  %538 = extractvalue { i32, i32, i32, i32 } %102, 0, !dbg !36
  %539 = bitcast i32 %538 to float, !dbg !36
  %540 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i38) #3, !dbg !51
  %541 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i43) #3, !dbg !51
  %542 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i48) #3, !dbg !51
  %543 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i53) #3, !dbg !51
  %544 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i58) #3, !dbg !51
  %545 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i63) #3, !dbg !51
  %546 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i68) #3, !dbg !51
  %547 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i73) #3, !dbg !51
  %548 = fmul float %387, %540, !dbg !52
  %549 = fmul float %379, %541, !dbg !52
  %550 = fmul float %371, %542, !dbg !52
  %551 = fmul float %363, %543, !dbg !52
  %552 = fmul float %355, %544, !dbg !52
  %553 = fmul float %347, %545, !dbg !52
  %554 = fmul float %339, %546, !dbg !52
  %555 = fmul float %331, %547, !dbg !52
  %556 = fmul float %548, %539, !dbg !53
  %557 = fmul float %549, %537, !dbg !53
  %558 = fmul float %550, %535, !dbg !53
  %559 = fmul float %551, %533, !dbg !53
  %560 = fmul float %552, %531, !dbg !53
  %561 = fmul float %553, %529, !dbg !53
  %562 = fmul float %554, %527, !dbg !53
  %563 = fmul float %555, %525, !dbg !53
  %564 = fadd float %556, %523, !dbg !54
  %565 = fadd float %557, %521, !dbg !54
  %566 = fadd float %558, %519, !dbg !54
  %567 = fadd float %559, %517, !dbg !54
  %568 = fadd float %560, %515, !dbg !54
  %569 = fadd float %561, %513, !dbg !54
  %570 = fadd float %562, %511, !dbg !54
  %571 = fadd float %563, %509, !dbg !54
  %572 = fcmp olt float %564, 0.000000e+00, !dbg !55
  %573 = fcmp olt float %565, 0.000000e+00, !dbg !55
  %574 = fcmp olt float %566, 0.000000e+00, !dbg !55
  %575 = fcmp olt float %567, 0.000000e+00, !dbg !55
  %576 = fcmp olt float %568, 0.000000e+00, !dbg !55
  %577 = fcmp olt float %569, 0.000000e+00, !dbg !55
  %578 = fcmp olt float %570, 0.000000e+00, !dbg !55
  %579 = fcmp olt float %571, 0.000000e+00, !dbg !55
  %580 = select i1 %572, float 0.000000e+00, float %564, !dbg !59
  %581 = select i1 %573, float 0.000000e+00, float %565, !dbg !59
  %582 = select i1 %574, float 0.000000e+00, float %566, !dbg !59
  %583 = select i1 %575, float 0.000000e+00, float %567, !dbg !59
  %584 = select i1 %576, float 0.000000e+00, float %568, !dbg !59
  %585 = select i1 %577, float 0.000000e+00, float %569, !dbg !59
  %586 = select i1 %578, float 0.000000e+00, float %570, !dbg !59
  %587 = select i1 %579, float 0.000000e+00, float %571, !dbg !59
  %588 = fadd float %507, %580, !dbg !60
  %589 = fadd float %492, %581, !dbg !60
  %590 = fadd float %477, %582, !dbg !60
  %591 = fadd float %462, %583, !dbg !60
  %592 = fadd float %447, %584, !dbg !60
  %593 = fadd float %432, %585, !dbg !60
  %594 = fadd float %417, %586, !dbg !60
  %595 = fadd float %402, %587, !dbg !60
  %596 = fcmp olt float %588, 0.000000e+00, !dbg !61
  %597 = fcmp olt float %589, 0.000000e+00, !dbg !61
  %598 = fcmp olt float %590, 0.000000e+00, !dbg !61
  %599 = fcmp olt float %591, 0.000000e+00, !dbg !61
  %600 = fcmp olt float %592, 0.000000e+00, !dbg !61
  %601 = fcmp olt float %593, 0.000000e+00, !dbg !61
  %602 = fcmp olt float %594, 0.000000e+00, !dbg !61
  %603 = fcmp olt float %595, 0.000000e+00, !dbg !61
  %604 = select i1 %596, float 0.000000e+00, float %588, !dbg !63
  %605 = select i1 %597, float 0.000000e+00, float %589, !dbg !63
  %606 = select i1 %598, float 0.000000e+00, float %590, !dbg !63
  %607 = select i1 %599, float 0.000000e+00, float %591, !dbg !63
  %608 = select i1 %600, float 0.000000e+00, float %592, !dbg !63
  %609 = select i1 %601, float 0.000000e+00, float %593, !dbg !63
  %610 = select i1 %602, float 0.000000e+00, float %594, !dbg !63
  %611 = select i1 %603, float 0.000000e+00, float %595, !dbg !63
  %612 = bitcast float %384 to i32, !dbg !64
  %613 = bitcast float %376 to i32, !dbg !64
  %614 = bitcast float %368 to i32, !dbg !64
  %615 = bitcast float %360 to i32, !dbg !64
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %612, i32 %613, i32 %614, i32 %615, ptr addrspace(1) %25, i1 true) #3, !dbg !64
  %616 = bitcast float %352 to i32, !dbg !64
  %617 = bitcast float %344 to i32, !dbg !64
  %618 = bitcast float %336 to i32, !dbg !64
  %619 = bitcast float %328 to i32, !dbg !64
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %616, i32 %617, i32 %618, i32 %619, ptr addrspace(1) %27, i1 true) #3, !dbg !64
  %620 = bitcast float %497 to i32, !dbg !65
  %621 = bitcast float %482 to i32, !dbg !65
  %622 = bitcast float %467 to i32, !dbg !65
  %623 = bitcast float %452 to i32, !dbg !65
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %620, i32 %621, i32 %622, i32 %623, ptr addrspace(1) %36, i1 true) #3, !dbg !65
  %624 = bitcast float %437 to i32, !dbg !65
  %625 = bitcast float %422 to i32, !dbg !65
  %626 = bitcast float %407 to i32, !dbg !65
  %627 = bitcast float %392 to i32, !dbg !65
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %624, i32 %625, i32 %626, i32 %627, ptr addrspace(1) %37, i1 true) #3, !dbg !65
  %628 = getelementptr float, ptr addrspace(1) %2, i64 %24, !dbg !66
  %629 = getelementptr float, ptr addrspace(1) %2, i64 %26, !dbg !66
  %630 = bitcast float %604 to i32, !dbg !67
  %631 = bitcast float %605 to i32, !dbg !67
  %632 = bitcast float %606 to i32, !dbg !67
  %633 = bitcast float %607 to i32, !dbg !67
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %630, i32 %631, i32 %632, i32 %633, ptr addrspace(1) %628, i1 true) #3, !dbg !67
  %634 = bitcast float %608 to i32, !dbg !67
  %635 = bitcast float %609 to i32, !dbg !67
  %636 = bitcast float %610 to i32, !dbg !67
  %637 = bitcast float %611 to i32, !dbg !67
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %634, i32 %635, i32 %636, i32 %637, ptr addrspace(1) %629, i1 true) #3, !dbg !67
  ret void, !dbg !68
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c52bdfrwalh72hxpv2iunybcoez7mfyark3cr7dvm3bknskjqaqx.py", directory: "inductor_cache/52")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_11, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_11, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_11", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_11", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 26, column: 39, scope: !7)
!17 = !DILocation(line: 27, column: 30, scope: !7)
!18 = !DILocation(line: 27, column: 35, scope: !7)
!19 = !DILocation(line: 28, column: 34, scope: !7)
!20 = !DILocation(line: 28, column: 39, scope: !7)
!21 = !DILocation(line: 29, column: 30, scope: !7)
!22 = !DILocation(line: 29, column: 35, scope: !7)
!23 = !DILocation(line: 30, column: 30, scope: !7)
!24 = !DILocation(line: 30, column: 35, scope: !7)
!25 = !DILocation(line: 31, column: 30, scope: !7)
!26 = !DILocation(line: 31, column: 35, scope: !7)
!27 = !DILocation(line: 32, column: 31, scope: !7)
!28 = !DILocation(line: 32, column: 36, scope: !7)
!29 = !DILocation(line: 33, column: 31, scope: !7)
!30 = !DILocation(line: 33, column: 36, scope: !7)
!31 = !DILocation(line: 34, column: 31, scope: !7)
!32 = !DILocation(line: 34, column: 36, scope: !7)
!33 = !DILocation(line: 35, column: 31, scope: !7)
!34 = !DILocation(line: 35, column: 36, scope: !7)
!35 = !DILocation(line: 36, column: 31, scope: !7)
!36 = !DILocation(line: 36, column: 36, scope: !7)
!37 = !DILocation(line: 37, column: 31, scope: !7)
!38 = !DILocation(line: 37, column: 36, scope: !7)
!39 = !DILocation(line: 42, column: 19, scope: !7)
!40 = !DILocation(line: 43, column: 27, scope: !7)
!41 = !DILocation(line: 45, column: 20, scope: !7)
!42 = !DILocation(line: 52, column: 20, scope: !7)
!43 = !DILocation(line: 53, column: 27, scope: !7)
!44 = !DILocation(line: 38, column: 18, scope: !7)
!45 = !DILocation(line: 51, column: 19, scope: !7)
!46 = !DILocation(line: 39, column: 18, scope: !7)
!47 = !DILocation(line: 40, column: 18, scope: !7)
!48 = !DILocation(line: 48, column: 19, scope: !7)
!49 = !DILocation(line: 49, column: 20, scope: !7)
!50 = !DILocation(line: 50, column: 20, scope: !7)
!51 = !DILocation(line: 54, column: 20, scope: !7)
!52 = !DILocation(line: 56, column: 20, scope: !7)
!53 = !DILocation(line: 57, column: 20, scope: !7)
!54 = !DILocation(line: 58, column: 20, scope: !7)
!55 = !DILocation(line: 118, column: 15, scope: !56, inlinedAt: !58)
!56 = distinct !DILexicalBlockFile(scope: !7, file: !57, discriminator: 0)
!57 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!58 = !DILocation(line: 60, column: 42, scope: !7)
!59 = !DILocation(line: 121, column: 29, scope: !56, inlinedAt: !58)
!60 = !DILocation(line: 61, column: 20, scope: !7)
!61 = !DILocation(line: 118, column: 15, scope: !56, inlinedAt: !62)
!62 = !DILocation(line: 62, column: 42, scope: !7)
!63 = !DILocation(line: 121, column: 29, scope: !56, inlinedAt: !62)
!64 = !DILocation(line: 63, column: 39, scope: !7)
!65 = !DILocation(line: 64, column: 39, scope: !7)
!66 = !DILocation(line: 65, column: 28, scope: !7)
!67 = !DILocation(line: 65, column: 40, scope: !7)
!68 = !DILocation(line: 65, column: 4, scope: !7)
