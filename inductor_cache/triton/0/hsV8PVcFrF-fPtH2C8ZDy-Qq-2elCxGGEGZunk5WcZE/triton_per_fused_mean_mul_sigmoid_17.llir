; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_mean_mul_sigmoid_17(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %6 = shl i32 %5, 5, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = and i32 %7, 24, !dbg !12
  %9 = shl i32 %7, 2, !dbg !12
  %10 = and i32 %9, 28, !dbg !12
  %11 = and i32 %7, 31, !dbg !12
  %12 = or disjoint i32 %6, %10, !dbg !13
  %13 = or disjoint i32 %6, %11, !dbg !13
  %14 = icmp slt i32 %12, 1024, !dbg !14
  %15 = icmp slt i32 %13, 1024, !dbg !14
  %16 = lshr i32 %7, 5, !dbg !15
  %.frozen = freeze i32 %12, !dbg !16
  %17 = sdiv i32 %.frozen, 256, !dbg !16
  %18 = mul i32 %17, 256, !dbg !17
  %.decomposed = sub i32 %.frozen, %18, !dbg !17
  %19 = shl i32 %7, 5, !dbg !18
  %20 = and i32 %19, 3840, !dbg !18
  %21 = add nsw i32 %.decomposed, %20, !dbg !19
  %22 = shl i32 %17, 12, !dbg !20
  %23 = add i32 %21, %22, !dbg !21
  %24 = sext i32 %23 to i64, !dbg !22
  %25 = getelementptr float, ptr addrspace(1) %1, i64 %24, !dbg !22
  %26 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %25, i1 %14, i32 0, i1 %14, i32 0, i1 %14, i32 0, i1 %14, i32 0, i1 %14) #3, !dbg !23
  %27 = extractvalue { i32, i32, i32, i32 } %26, 0, !dbg !23
  %28 = extractvalue { i32, i32, i32, i32 } %26, 1, !dbg !23
  %29 = extractvalue { i32, i32, i32, i32 } %26, 2, !dbg !23
  %30 = extractvalue { i32, i32, i32, i32 } %26, 3, !dbg !23
  %31 = bitcast i32 %27 to float, !dbg !23
  %32 = bitcast i32 %28 to float, !dbg !23
  %33 = bitcast i32 %29 to float, !dbg !23
  %34 = bitcast i32 %30 to float, !dbg !23
  %35 = fsub float 0.000000e+00, %31, !dbg !24
  %36 = fsub float 0.000000e+00, %32, !dbg !24
  %37 = fsub float 0.000000e+00, %33, !dbg !24
  %38 = fsub float 0.000000e+00, %34, !dbg !24
  %39 = fmul float %35, 0x3FF7154760000000, !dbg !28
  %40 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %39) #3, !dbg !28
  %41 = fmul float %36, 0x3FF7154760000000, !dbg !28
  %42 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %41) #3, !dbg !28
  %43 = fmul float %37, 0x3FF7154760000000, !dbg !28
  %44 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %43) #3, !dbg !28
  %45 = fmul float %38, 0x3FF7154760000000, !dbg !28
  %46 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %45) #3, !dbg !28
  %47 = fadd float %40, 1.000000e+00, !dbg !29
  %48 = fadd float %42, 1.000000e+00, !dbg !29
  %49 = fadd float %44, 1.000000e+00, !dbg !29
  %50 = fadd float %46, 1.000000e+00, !dbg !29
  %51 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %47) #3, !dbg !30
  %52 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %48) #3, !dbg !30
  %53 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %49) #3, !dbg !30
  %54 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %50) #3, !dbg !30
  %55 = fmul float %51, %31, !dbg !31
  %56 = fmul float %52, %32, !dbg !31
  %57 = fmul float %53, %33, !dbg !31
  %58 = fmul float %54, %34, !dbg !31
  %59 = select i1 %14, float %55, float 0.000000e+00, !dbg !32
  %60 = select i1 %14, float %56, float 0.000000e+00, !dbg !32
  %61 = select i1 %14, float %57, float 0.000000e+00, !dbg !32
  %62 = select i1 %14, float %58, float 0.000000e+00, !dbg !32
  %63 = bitcast float %59 to i32, !dbg !33
  %64 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %63, i32 16, i32 31), !dbg !33
  %65 = bitcast i32 %64 to float, !dbg !33
  %66 = fadd float %59, %65, !dbg !35
  %67 = bitcast float %66 to i32, !dbg !33
  %68 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %67, i32 8, i32 31), !dbg !33
  %69 = bitcast i32 %68 to float, !dbg !33
  %70 = fadd float %66, %69, !dbg !35
  %71 = bitcast float %60 to i32, !dbg !33
  %72 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %71, i32 16, i32 31), !dbg !33
  %73 = bitcast i32 %72 to float, !dbg !33
  %74 = fadd float %60, %73, !dbg !35
  %75 = bitcast float %74 to i32, !dbg !33
  %76 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %75, i32 8, i32 31), !dbg !33
  %77 = bitcast i32 %76 to float, !dbg !33
  %78 = fadd float %74, %77, !dbg !35
  %79 = bitcast float %61 to i32, !dbg !33
  %80 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %79, i32 16, i32 31), !dbg !33
  %81 = bitcast i32 %80 to float, !dbg !33
  %82 = fadd float %61, %81, !dbg !35
  %83 = bitcast float %82 to i32, !dbg !33
  %84 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %83, i32 8, i32 31), !dbg !33
  %85 = bitcast i32 %84 to float, !dbg !33
  %86 = fadd float %82, %85, !dbg !35
  %87 = bitcast float %62 to i32, !dbg !33
  %88 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %87, i32 16, i32 31), !dbg !33
  %89 = bitcast i32 %88 to float, !dbg !33
  %90 = fadd float %62, %89, !dbg !35
  %91 = bitcast float %90 to i32, !dbg !33
  %92 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %91, i32 8, i32 31), !dbg !33
  %93 = bitcast i32 %92 to float, !dbg !33
  %94 = fadd float %90, %93, !dbg !35
  %95 = icmp eq i32 %8, 0, !dbg !33
  %96 = and i32 %16, 3, !dbg !33
  %97 = shl nuw nsw i32 %10, 2, !dbg !33
  %98 = or disjoint i32 %97, %96, !dbg !33
  %99 = getelementptr float, ptr addrspace(3) @global_smem, i32 %98, !dbg !33
  %100 = bitcast float %70 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %99, <1 x i32> %100, i1 %95) #3, !dbg !33
  %101 = or disjoint i32 %97, 4, !dbg !33
  %102 = or disjoint i32 %101, %96, !dbg !33
  %103 = getelementptr float, ptr addrspace(3) @global_smem, i32 %102, !dbg !33
  %104 = bitcast float %78 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %103, <1 x i32> %104, i1 %95) #3, !dbg !33
  %105 = or disjoint i32 %97, 8, !dbg !33
  %106 = or disjoint i32 %105, %96, !dbg !33
  %107 = getelementptr float, ptr addrspace(3) @global_smem, i32 %106, !dbg !33
  %108 = bitcast float %86 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %107, <1 x i32> %108, i1 %95) #3, !dbg !33
  %109 = or disjoint i32 %97, 12, !dbg !33
  %110 = or disjoint i32 %109, %96, !dbg !33
  %111 = getelementptr float, ptr addrspace(3) @global_smem, i32 %110, !dbg !33
  %112 = bitcast float %94 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %111, <1 x i32> %112, i1 %95) #3, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %113 = icmp slt i32 %7, 128, !dbg !33
  %114 = getelementptr float, ptr addrspace(3) @global_smem, i32 %7, !dbg !33
  %115 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %114, i1 %113) #3, !dbg !33
  %116 = bitcast i32 %115 to float, !dbg !33
  %117 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %115, i32 2, i32 31), !dbg !33
  %118 = bitcast i32 %117 to float, !dbg !33
  %119 = fadd float %116, %118, !dbg !35
  %120 = bitcast float %119 to i32, !dbg !33
  %121 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %120, i32 1, i32 31), !dbg !33
  %122 = bitcast i32 %121 to float, !dbg !33
  %123 = fadd float %119, %122, !dbg !35
  %124 = and i32 %7, 3, !dbg !33
  %125 = icmp eq i32 %124, 0, !dbg !33
  %126 = and i1 %113, %125, !dbg !33
  %127 = bitcast float %123 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %114, <1 x i32> %127, i1 %126) #3, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %128 = getelementptr float, ptr addrspace(3) @global_smem, i32 %97, !dbg !33
  %129 = load i32, ptr addrspace(3) %128, align 16, !dbg !33
  %130 = getelementptr float, ptr addrspace(3) @global_smem, i32 %101, !dbg !33
  %131 = load i32, ptr addrspace(3) %130, align 16, !dbg !33
  %132 = getelementptr float, ptr addrspace(3) @global_smem, i32 %105, !dbg !33
  %133 = load i32, ptr addrspace(3) %132, align 16, !dbg !33
  %134 = getelementptr float, ptr addrspace(3) @global_smem, i32 %109, !dbg !33
  %135 = load i32, ptr addrspace(3) %134, align 16, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %136 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %10, !dbg !37
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %136, i32 %129, i32 %131, i32 %133, i32 %135, i1 true) #3, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %137 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !37
  %138 = load float, ptr addrspace(3) %137, align 4, !dbg !37
  %139 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %138, float 1.600000e+01) #3, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %140 = sext i32 %13 to i64, !dbg !39
  %141 = getelementptr float, ptr addrspace(1) %0, i64 %140, !dbg !39
  %142 = icmp eq i32 %96, 0, !dbg !40
  %143 = bitcast float %139 to i32, !dbg !40
  %144 = and i1 %142, %15, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %143, ptr addrspace(1) %141, i1 %144) #3, !dbg !40
  ret void, !dbg !41
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cbgupxie6wpwco4fayqq7rk2zyhuecwwbzvnliyasnxefkrl7erk.py", directory: "inductor_cache/bg")
!4 = !{ptr @triton_per_fused_mean_mul_sigmoid_17, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_mean_mul_sigmoid_17, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_mean_mul_sigmoid_17", linkageName: "triton_per_fused_mean_mul_sigmoid_17", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 19, scope: !7)
!17 = !DILocation(line: 30, column: 19, scope: !7)
!18 = !DILocation(line: 33, column: 39, scope: !7)
!19 = !DILocation(line: 33, column: 35, scope: !7)
!20 = !DILocation(line: 33, column: 49, scope: !7)
!21 = !DILocation(line: 33, column: 44, scope: !7)
!22 = !DILocation(line: 33, column: 30, scope: !7)
!23 = !DILocation(line: 33, column: 54, scope: !7)
!24 = !DILocation(line: 47, column: 30, scope: !25, inlinedAt: !27)
!25 = distinct !DILexicalBlockFile(scope: !7, file: !26, discriminator: 0)
!26 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!27 = !DILocation(line: 34, column: 22, scope: !7)
!28 = !DILocation(line: 47, column: 29, scope: !25, inlinedAt: !27)
!29 = !DILocation(line: 47, column: 20, scope: !25, inlinedAt: !27)
!30 = !DILocation(line: 47, column: 16, scope: !25, inlinedAt: !27)
!31 = !DILocation(line: 35, column: 18, scope: !7)
!32 = !DILocation(line: 37, column: 33, scope: !7)
!33 = !DILocation(line: 267, column: 36, scope: !25, inlinedAt: !34)
!34 = !DILocation(line: 38, column: 24, scope: !7)
!35 = !DILocation(line: 256, column: 15, scope: !36, inlinedAt: !34)
!36 = distinct !DILexicalBlockFile(scope: !25, file: !26, discriminator: 0)
!37 = !DILocation(line: 40, column: 18, scope: !7)
!38 = !DILocation(line: 41, column: 4, scope: !7)
!39 = !DILocation(line: 42, column: 28, scope: !7)
!40 = !DILocation(line: 42, column: 39, scope: !7)
!41 = !DILocation(line: 42, column: 4, scope: !7)
