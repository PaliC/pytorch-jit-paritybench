; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_red_fused_convolution_native_group_norm_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %9 = icmp slt i32 %8, 128, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = and i32 %10, 31, !dbg !12
  %12 = lshr i32 %10, 5, !dbg !12
  %13 = and i32 %10, 511, !dbg !12
  %14 = or disjoint i32 %13, 512, !dbg !12
  %15 = or disjoint i32 %13, 1024, !dbg !12
  %16 = or disjoint i32 %13, 1536, !dbg !12
  %17 = shl i32 %10, 2, !dbg !12
  %18 = and i32 %17, 2044, !dbg !12
  %19 = srem i32 %8, 32, !dbg !13
  %20 = shl i32 %8, 11, !dbg !14
  %21 = or disjoint i32 %20, %18, !dbg !15
  %22 = sext i32 %21 to i64, !dbg !16
  %23 = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !16
  %24 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %23, i1 %9, i32 0, i1 %9, i32 0, i1 %9, i32 0, i1 %9, i32 0, i1 %9) #5, !dbg !17
  %25 = extractvalue { i32, i32, i32, i32 } %24, 0, !dbg !17
  %26 = extractvalue { i32, i32, i32, i32 } %24, 1, !dbg !17
  %27 = extractvalue { i32, i32, i32, i32 } %24, 2, !dbg !17
  %28 = extractvalue { i32, i32, i32, i32 } %24, 3, !dbg !17
  %29 = shl nuw nsw i32 %18, 1, !dbg !17
  %30 = zext nneg i32 %29 to i64, !dbg !17
  %31 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %30, !dbg !17
  %32 = insertelement <1 x i32> poison, i32 %25, i64 0, !dbg !17
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %31, <1 x i32> %32, i1 true) #5, !dbg !17
  %33 = or disjoint i32 %29, 2, !dbg !17
  %34 = zext nneg i32 %33 to i64, !dbg !17
  %35 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %34, !dbg !17
  %36 = insertelement <1 x i32> poison, i32 %26, i64 0, !dbg !17
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %35, <1 x i32> %36, i1 true) #5, !dbg !17
  %37 = or disjoint i32 %29, 4, !dbg !17
  %38 = zext nneg i32 %37 to i64, !dbg !17
  %39 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %38, !dbg !17
  %40 = insertelement <1 x i32> poison, i32 %27, i64 0, !dbg !17
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %39, <1 x i32> %40, i1 true) #5, !dbg !17
  %41 = or disjoint i32 %29, 6, !dbg !17
  %42 = zext nneg i32 %41 to i64, !dbg !17
  %43 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %42, !dbg !17
  %44 = insertelement <1 x i32> poison, i32 %28, i64 0, !dbg !17
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %43, <1 x i32> %44, i1 true) #5, !dbg !17
  tail call void @llvm.nvvm.barrier0(), !dbg !17
  %45 = shl nuw nsw i32 %13, 1, !dbg !17
  %46 = zext nneg i32 %45 to i64, !dbg !17
  %47 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %46, !dbg !17
  %48 = load float, ptr addrspace(3) %47, align 8, !dbg !17
  %49 = shl nuw nsw i32 %14, 1, !dbg !17
  %50 = zext nneg i32 %49 to i64, !dbg !17
  %51 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %50, !dbg !17
  %52 = load float, ptr addrspace(3) %51, align 8, !dbg !17
  %53 = shl nuw nsw i32 %15, 1, !dbg !17
  %54 = zext nneg i32 %53 to i64, !dbg !17
  %55 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %54, !dbg !17
  %56 = load float, ptr addrspace(3) %55, align 8, !dbg !17
  %57 = shl nuw nsw i32 %16, 1, !dbg !17
  %58 = zext nneg i32 %57 to i64, !dbg !17
  %59 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %58, !dbg !17
  %60 = load float, ptr addrspace(3) %59, align 8, !dbg !17
  %61 = shl nsw i32 %19, 1, !dbg !18
  %62 = or disjoint i32 %61, 1, !dbg !19
  %63 = sext i32 %61 to i64, !dbg !20
  %64 = getelementptr float, ptr addrspace(1) %1, i64 %63, !dbg !20
  %65 = sext i32 %62 to i64, !dbg !20
  %66 = getelementptr float, ptr addrspace(1) %1, i64 %65, !dbg !20
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %64, i1 %9, i32 0, i1 %9) #5, !dbg !21
  %68 = bitcast i32 %67 to float, !dbg !21
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %64, i1 %9, i32 0, i1 %9) #5, !dbg !21
  %70 = bitcast i32 %69 to float, !dbg !21
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %66, i1 %9, i32 0, i1 %9) #5, !dbg !21
  %72 = bitcast i32 %71 to float, !dbg !21
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %66, i1 %9, i32 0, i1 %9) #5, !dbg !21
  %74 = bitcast i32 %73 to float, !dbg !21
  %75 = fadd float %48, %68, !dbg !22
  %76 = fadd float %52, %70, !dbg !22
  %77 = fadd float %56, %72, !dbg !22
  %78 = fadd float %60, %74, !dbg !22
  %79 = select i1 %9, float %75, float 0.000000e+00, !dbg !23
  %80 = select i1 %9, float %76, float 0.000000e+00, !dbg !23
  %81 = select i1 %9, float %77, float 0.000000e+00, !dbg !23
  %82 = select i1 %9, float %78, float 0.000000e+00, !dbg !23
  %83 = select i1 %9, float 1.000000e+00, float 0.000000e+00, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %84 = zext nneg i32 %13 to i64, !dbg !25
  %85 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %84, !dbg !25
  %86 = bitcast float %75 to <1 x i32>, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %85, <1 x i32> %86, i1 true) #5, !dbg !25
  %87 = zext nneg i32 %14 to i64, !dbg !25
  %88 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %87, !dbg !25
  %89 = bitcast float %76 to <1 x i32>, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %88, <1 x i32> %89, i1 true) #5, !dbg !25
  %90 = zext nneg i32 %15 to i64, !dbg !25
  %91 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %90, !dbg !25
  %92 = bitcast float %77 to <1 x i32>, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %91, <1 x i32> %92, i1 true) #5, !dbg !25
  %93 = zext nneg i32 %16 to i64, !dbg !25
  %94 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %93, !dbg !25
  %95 = bitcast float %78 to <1 x i32>, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %94, <1 x i32> %95, i1 true) #5, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %96 = zext nneg i32 %18 to i64, !dbg !25
  %97 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %96, !dbg !25
  %.extract = load i32, ptr addrspace(3) %97, align 16, !dbg !25
  %98 = getelementptr inbounds i8, ptr addrspace(3) %97, i64 4, !dbg !25
  %.extract4 = load i32, ptr addrspace(3) %98, align 4, !dbg !25
  %99 = getelementptr inbounds i8, ptr addrspace(3) %97, i64 8, !dbg !25
  %.extract5 = load i32, ptr addrspace(3) %99, align 8, !dbg !25
  %100 = getelementptr inbounds i8, ptr addrspace(3) %97, i64 12, !dbg !25
  %.extract6 = load i32, ptr addrspace(3) %100, align 4, !dbg !25
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract4, i32 %.extract5, i32 %.extract6, ptr addrspace(1) %23, i1 %9) #5, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %101 = fsub float %80, %79, !dbg !30
  %102 = select i1 %9, float 2.000000e+00, float 0.000000e+00, !dbg !32
  %103 = fcmp oeq float %102, 0.000000e+00, !dbg !33
  %104 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %83, float %102) #5, !dbg !34
  %105 = select i1 %103, float 0.000000e+00, float %104, !dbg !35
  %106 = fmul float %101, %105, !dbg !36
  %107 = fadd float %79, %106, !dbg !37
  %108 = fmul float %101, %101, !dbg !38
  %109 = fmul float %83, %108, !dbg !39
  %110 = fmul float %109, %105, !dbg !40
  %111 = fadd float %110, 0.000000e+00, !dbg !41
  %112 = fsub float %81, %107, !dbg !30
  %113 = select i1 %9, float 3.000000e+00, float 0.000000e+00, !dbg !32
  %114 = fcmp oeq float %113, 0.000000e+00, !dbg !33
  %115 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %83, float %113) #5, !dbg !34
  %116 = select i1 %114, float 0.000000e+00, float %115, !dbg !35
  %117 = fmul float %116, %112, !dbg !36
  %118 = fadd float %107, %117, !dbg !37
  %119 = fmul float %112, %112, !dbg !38
  %120 = fmul float %102, %119, !dbg !39
  %121 = fmul float %116, %120, !dbg !40
  %122 = fadd float %111, %121, !dbg !41
  %123 = fsub float %82, %118, !dbg !30
  %124 = select i1 %9, float 4.000000e+00, float 0.000000e+00, !dbg !32
  %125 = fcmp oeq float %124, 0.000000e+00, !dbg !33
  %126 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %83, float %124) #5, !dbg !34
  %127 = select i1 %125, float 0.000000e+00, float %126, !dbg !35
  %128 = fmul float %127, %123, !dbg !36
  %129 = fadd float %118, %128, !dbg !37
  %130 = fmul float %123, %123, !dbg !38
  %131 = fmul float %113, %130, !dbg !39
  %132 = fmul float %127, %131, !dbg !40
  %133 = fadd float %122, %132, !dbg !41
  %134 = bitcast float %129 to i32, !dbg !26
  %135 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %134, i32 16, i32 31), !dbg !26
  %136 = bitcast i32 %135 to float, !dbg !26
  %137 = bitcast float %133 to i32, !dbg !26
  %138 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %137, i32 16, i32 31), !dbg !26
  %139 = bitcast i32 %138 to float, !dbg !26
  %140 = bitcast float %124 to i32, !dbg !26
  %141 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %140, i32 16, i32 31), !dbg !26
  %142 = bitcast i32 %141 to float, !dbg !26
  %143 = fsub float %136, %129, !dbg !30
  %144 = fadd float %124, %142, !dbg !32
  %145 = fcmp oeq float %144, 0.000000e+00, !dbg !33
  %146 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %142, float %144) #5, !dbg !34
  %147 = select i1 %145, float 0.000000e+00, float %146, !dbg !35
  %148 = fmul float %147, %143, !dbg !36
  %149 = fadd float %129, %148, !dbg !37
  %150 = fadd float %133, %139, !dbg !42
  %151 = fmul float %143, %143, !dbg !38
  %152 = fmul float %124, %151, !dbg !39
  %153 = fmul float %147, %152, !dbg !40
  %154 = fadd float %150, %153, !dbg !41
  %155 = bitcast float %149 to i32, !dbg !26
  %156 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %155, i32 8, i32 31), !dbg !26
  %157 = bitcast i32 %156 to float, !dbg !26
  %158 = bitcast float %154 to i32, !dbg !26
  %159 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %158, i32 8, i32 31), !dbg !26
  %160 = bitcast i32 %159 to float, !dbg !26
  %161 = bitcast float %144 to i32, !dbg !26
  %162 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %161, i32 8, i32 31), !dbg !26
  %163 = bitcast i32 %162 to float, !dbg !26
  %164 = fsub float %157, %149, !dbg !30
  %165 = fadd float %144, %163, !dbg !32
  %166 = fcmp oeq float %165, 0.000000e+00, !dbg !33
  %167 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %163, float %165) #5, !dbg !34
  %168 = select i1 %166, float 0.000000e+00, float %167, !dbg !35
  %169 = fmul float %164, %168, !dbg !36
  %170 = fadd float %149, %169, !dbg !37
  %171 = fadd float %154, %160, !dbg !42
  %172 = fmul float %164, %164, !dbg !38
  %173 = fmul float %144, %172, !dbg !39
  %174 = fmul float %168, %173, !dbg !40
  %175 = fadd float %171, %174, !dbg !41
  %176 = bitcast float %170 to i32, !dbg !26
  %177 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %176, i32 4, i32 31), !dbg !26
  %178 = bitcast i32 %177 to float, !dbg !26
  %179 = bitcast float %175 to i32, !dbg !26
  %180 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %179, i32 4, i32 31), !dbg !26
  %181 = bitcast i32 %180 to float, !dbg !26
  %182 = bitcast float %165 to i32, !dbg !26
  %183 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %182, i32 4, i32 31), !dbg !26
  %184 = bitcast i32 %183 to float, !dbg !26
  %185 = fsub float %178, %170, !dbg !30
  %186 = fadd float %165, %184, !dbg !32
  %187 = fcmp oeq float %186, 0.000000e+00, !dbg !33
  %188 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %184, float %186) #5, !dbg !34
  %189 = select i1 %187, float 0.000000e+00, float %188, !dbg !35
  %190 = fmul float %185, %189, !dbg !36
  %191 = fadd float %170, %190, !dbg !37
  %192 = fadd float %175, %181, !dbg !42
  %193 = fmul float %185, %185, !dbg !38
  %194 = fmul float %165, %193, !dbg !39
  %195 = fmul float %189, %194, !dbg !40
  %196 = fadd float %192, %195, !dbg !41
  %197 = bitcast float %191 to i32, !dbg !26
  %198 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %197, i32 2, i32 31), !dbg !26
  %199 = bitcast i32 %198 to float, !dbg !26
  %200 = bitcast float %196 to i32, !dbg !26
  %201 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %200, i32 2, i32 31), !dbg !26
  %202 = bitcast i32 %201 to float, !dbg !26
  %203 = bitcast float %186 to i32, !dbg !26
  %204 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %203, i32 2, i32 31), !dbg !26
  %205 = bitcast i32 %204 to float, !dbg !26
  %206 = fsub float %199, %191, !dbg !30
  %207 = fadd float %186, %205, !dbg !32
  %208 = fcmp oeq float %207, 0.000000e+00, !dbg !33
  %209 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %205, float %207) #5, !dbg !34
  %210 = select i1 %208, float 0.000000e+00, float %209, !dbg !35
  %211 = fmul float %206, %210, !dbg !36
  %212 = fadd float %191, %211, !dbg !37
  %213 = fadd float %196, %202, !dbg !42
  %214 = fmul float %206, %206, !dbg !38
  %215 = fmul float %186, %214, !dbg !39
  %216 = fmul float %210, %215, !dbg !40
  %217 = fadd float %213, %216, !dbg !41
  %218 = bitcast float %212 to i32, !dbg !26
  %219 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %218, i32 1, i32 31), !dbg !26
  %220 = bitcast i32 %219 to float, !dbg !26
  %221 = bitcast float %217 to i32, !dbg !26
  %222 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %221, i32 1, i32 31), !dbg !26
  %223 = bitcast i32 %222 to float, !dbg !26
  %224 = bitcast float %207 to i32, !dbg !26
  %225 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %224, i32 1, i32 31), !dbg !26
  %226 = bitcast i32 %225 to float, !dbg !26
  %227 = fsub float %220, %212, !dbg !30
  %228 = fadd float %207, %226, !dbg !32
  %229 = fcmp oeq float %228, 0.000000e+00, !dbg !33
  %230 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %226, float %228) #5, !dbg !34
  %231 = select i1 %229, float 0.000000e+00, float %230, !dbg !35
  %232 = fmul float %227, %231, !dbg !36
  %233 = fadd float %212, %232, !dbg !37
  %234 = fadd float %217, %223, !dbg !42
  %235 = fmul float %227, %227, !dbg !38
  %236 = fmul float %207, %235, !dbg !39
  %237 = fmul float %231, %236, !dbg !40
  %238 = fadd float %234, %237, !dbg !41
  %239 = icmp eq i32 %11, 0, !dbg !26
  %240 = and i32 %12, 15, !dbg !26
  %241 = zext nneg i32 %240 to i64, !dbg !26
  %242 = getelementptr float, ptr addrspace(3) @global_smem, i64 %241, !dbg !26
  %243 = bitcast float %233 to <1 x i32>, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %242, <1 x i32> %243, i1 %239) #5, !dbg !26
  %244 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %241, !dbg !26
  %245 = bitcast float %238 to <1 x i32>, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %244, <1 x i32> %245, i1 %239) #5, !dbg !26
  %246 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 128), i64 %241, !dbg !26
  %247 = bitcast float %228 to <1 x i32>, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %246, <1 x i32> %247, i1 %239) #5, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %248 = icmp slt i32 %10, 16, !dbg !26
  %249 = sext i32 %10 to i64, !dbg !26
  %250 = getelementptr float, ptr addrspace(3) @global_smem, i64 %249, !dbg !26
  %251 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %250, i1 %248) #5, !dbg !26
  %252 = bitcast i32 %251 to float, !dbg !26
  %253 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %249, !dbg !26
  %254 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %253, i1 %248) #5, !dbg !26
  %255 = bitcast i32 %254 to float, !dbg !26
  %256 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 128), i64 %249, !dbg !26
  %257 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %256, i1 %248) #5, !dbg !26
  %258 = bitcast i32 %257 to float, !dbg !26
  %259 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %251, i32 8, i32 31), !dbg !26
  %260 = bitcast i32 %259 to float, !dbg !26
  %261 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %254, i32 8, i32 31), !dbg !26
  %262 = bitcast i32 %261 to float, !dbg !26
  %263 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %257, i32 8, i32 31), !dbg !26
  %264 = bitcast i32 %263 to float, !dbg !26
  %265 = fsub float %260, %252, !dbg !30
  %266 = fadd float %258, %264, !dbg !32
  %267 = fcmp oeq float %266, 0.000000e+00, !dbg !33
  %268 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %264, float %266) #5, !dbg !34
  %269 = select i1 %267, float 0.000000e+00, float %268, !dbg !35
  %270 = fmul float %265, %269, !dbg !36
  %271 = fadd float %270, %252, !dbg !37
  %272 = fadd float %255, %262, !dbg !42
  %273 = fmul float %265, %265, !dbg !38
  %274 = fmul float %273, %258, !dbg !39
  %275 = fmul float %274, %269, !dbg !40
  %276 = fadd float %272, %275, !dbg !41
  %277 = bitcast float %271 to i32, !dbg !26
  %278 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %277, i32 4, i32 31), !dbg !26
  %279 = bitcast i32 %278 to float, !dbg !26
  %280 = bitcast float %276 to i32, !dbg !26
  %281 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %280, i32 4, i32 31), !dbg !26
  %282 = bitcast i32 %281 to float, !dbg !26
  %283 = bitcast float %266 to i32, !dbg !26
  %284 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %283, i32 4, i32 31), !dbg !26
  %285 = bitcast i32 %284 to float, !dbg !26
  %286 = fsub float %279, %271, !dbg !30
  %287 = fadd float %266, %285, !dbg !32
  %288 = fcmp oeq float %287, 0.000000e+00, !dbg !33
  %289 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %285, float %287) #5, !dbg !34
  %290 = select i1 %288, float 0.000000e+00, float %289, !dbg !35
  %291 = fmul float %286, %290, !dbg !36
  %292 = fadd float %271, %291, !dbg !37
  %293 = fadd float %276, %282, !dbg !42
  %294 = fmul float %286, %286, !dbg !38
  %295 = fmul float %266, %294, !dbg !39
  %296 = fmul float %290, %295, !dbg !40
  %297 = fadd float %293, %296, !dbg !41
  %298 = bitcast float %292 to i32, !dbg !26
  %299 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %298, i32 2, i32 31), !dbg !26
  %300 = bitcast i32 %299 to float, !dbg !26
  %301 = bitcast float %297 to i32, !dbg !26
  %302 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %301, i32 2, i32 31), !dbg !26
  %303 = bitcast i32 %302 to float, !dbg !26
  %304 = bitcast float %287 to i32, !dbg !26
  %305 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %304, i32 2, i32 31), !dbg !26
  %306 = bitcast i32 %305 to float, !dbg !26
  %307 = fsub float %300, %292, !dbg !30
  %308 = fadd float %287, %306, !dbg !32
  %309 = fcmp oeq float %308, 0.000000e+00, !dbg !33
  %310 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %306, float %308) #5, !dbg !34
  %311 = select i1 %309, float 0.000000e+00, float %310, !dbg !35
  %312 = fmul float %307, %311, !dbg !36
  %313 = fadd float %292, %312, !dbg !37
  %314 = fadd float %297, %303, !dbg !42
  %315 = fmul float %307, %307, !dbg !38
  %316 = fmul float %287, %315, !dbg !39
  %317 = fmul float %311, %316, !dbg !40
  %318 = fadd float %314, %317, !dbg !41
  %319 = bitcast float %313 to i32, !dbg !26
  %320 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %319, i32 1, i32 31), !dbg !26
  %321 = bitcast i32 %320 to float, !dbg !26
  %322 = bitcast float %318 to i32, !dbg !26
  %323 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %322, i32 1, i32 31), !dbg !26
  %324 = bitcast i32 %323 to float, !dbg !26
  %325 = bitcast float %308 to i32, !dbg !26
  %326 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %325, i32 1, i32 31), !dbg !26
  %327 = bitcast i32 %326 to float, !dbg !26
  %328 = fsub float %321, %313, !dbg !30
  %329 = fadd float %308, %327, !dbg !32
  %330 = fcmp oeq float %329, 0.000000e+00, !dbg !33
  %331 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %327, float %329) #5, !dbg !34
  %332 = select i1 %330, float 0.000000e+00, float %331, !dbg !35
  %333 = fmul float %328, %332, !dbg !36
  %334 = fadd float %313, %333, !dbg !37
  %335 = fadd float %318, %324, !dbg !42
  %336 = fmul float %328, %328, !dbg !38
  %337 = fmul float %308, %336, !dbg !39
  %338 = fmul float %332, %337, !dbg !40
  %339 = fadd float %335, %338, !dbg !41
  %340 = and i32 %10, 15, !dbg !26
  %341 = icmp eq i32 %340, 0, !dbg !26
  %342 = and i1 %248, %341, !dbg !26
  %343 = bitcast float %334 to <1 x i32>, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %250, <1 x i32> %343, i1 %342) #5, !dbg !26
  %344 = bitcast float %339 to <1 x i32>, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %253, <1 x i32> %344, i1 %342) #5, !dbg !26
  %345 = bitcast float %329 to <1 x i32>, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %256, <1 x i32> %345, i1 %342) #5, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %346 = load i32, ptr addrspace(3) @global_smem, align 16, !dbg !26
  %347 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), align 16, !dbg !26
  %348 = sext i32 %8 to i64, !dbg !43
  %349 = getelementptr float, ptr addrspace(1) %2, i64 %348, !dbg !43
  %350 = icmp eq i32 %13, 0, !dbg !44
  %351 = and i1 %350, %9, !dbg !44
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %346, ptr addrspace(1) %349, i1 %351) #5, !dbg !44
  %352 = getelementptr float, ptr addrspace(1) %3, i64 %348, !dbg !45
  %353 = bitcast float %347 to i32, !dbg !46
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %353, ptr addrspace(1) %352, i1 %351) #5, !dbg !46
  %354 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %347, float 2.048000e+03) #5, !dbg !47
  %355 = fadd float %354, 0x3EE4F8B580000000, !dbg !48
  %356 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !49
  %.not.i = icmp eq i32 %356, 0, !dbg !49
  br i1 %.not.i, label %359, label %357, !dbg !49

357:                                              ; preds = %7
  %358 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %355), !dbg !49
  br label %__nv_rsqrtf.exit, !dbg !49

359:                                              ; preds = %7
  %360 = tail call float @llvm.nvvm.rsqrt.approx.f(float %355), !dbg !49
  br label %__nv_rsqrtf.exit, !dbg !49

__nv_rsqrtf.exit:                                 ; preds = %357, %359
  %.0.i = phi float [ %358, %357 ], [ %360, %359 ], !dbg !49
  %361 = getelementptr float, ptr addrspace(1) %4, i64 %348, !dbg !50
  %362 = bitcast float %.0.i to i32, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %362, ptr addrspace(1) %361, i1 %351) #5, !dbg !51
  ret void, !dbg !52
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c2gysfxrf5d77vpntzaiyxcw44zsg4rae25jzggzl65u7tgreig4.py", directory: "inductor_cache/2g")
!4 = !{ptr @triton_red_fused_convolution_native_group_norm_0, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_convolution_native_group_norm_0, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_convolution_native_group_norm_0", linkageName: "triton_red_fused_convolution_native_group_norm_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 33, scope: !7)
!13 = !DILocation(line: 27, column: 19, scope: !7)
!14 = !DILocation(line: 36, column: 48, scope: !7)
!15 = !DILocation(line: 36, column: 43, scope: !7)
!16 = !DILocation(line: 36, column: 38, scope: !7)
!17 = !DILocation(line: 36, column: 53, scope: !7)
!18 = !DILocation(line: 37, column: 41, scope: !7)
!19 = !DILocation(line: 37, column: 39, scope: !7)
!20 = !DILocation(line: 37, column: 34, scope: !7)
!21 = !DILocation(line: 37, column: 46, scope: !7)
!22 = !DILocation(line: 38, column: 22, scope: !7)
!23 = !DILocation(line: 43, column: 60, scope: !7)
!24 = !DILocation(line: 45, column: 64, scope: !7)
!25 = !DILocation(line: 46, column: 53, scope: !7)
!26 = !DILocation(line: 204, column: 46, scope: !27, inlinedAt: !29)
!27 = distinct !DILexicalBlockFile(scope: !7, file: !28, discriminator: 0)
!28 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!29 = !DILocation(line: 48, column: 41, scope: !7)
!30 = !DILocation(line: 192, column: 21, scope: !31, inlinedAt: !29)
!31 = distinct !DILexicalBlockFile(scope: !27, file: !28, discriminator: 0)
!32 = !DILocation(line: 193, column: 28, scope: !31, inlinedAt: !29)
!33 = !DILocation(line: 194, column: 39, scope: !31, inlinedAt: !29)
!34 = !DILocation(line: 194, column: 60, scope: !31, inlinedAt: !29)
!35 = !DILocation(line: 194, column: 49, scope: !31, inlinedAt: !29)
!36 = !DILocation(line: 196, column: 25, scope: !31, inlinedAt: !29)
!37 = !DILocation(line: 196, column: 17, scope: !31, inlinedAt: !29)
!38 = !DILocation(line: 197, column: 30, scope: !31, inlinedAt: !29)
!39 = !DILocation(line: 197, column: 38, scope: !31, inlinedAt: !29)
!40 = !DILocation(line: 197, column: 49, scope: !31, inlinedAt: !29)
!41 = !DILocation(line: 197, column: 22, scope: !31, inlinedAt: !29)
!42 = !DILocation(line: 197, column: 15, scope: !31, inlinedAt: !29)
!43 = !DILocation(line: 53, column: 25, scope: !7)
!44 = !DILocation(line: 53, column: 36, scope: !7)
!45 = !DILocation(line: 54, column: 25, scope: !7)
!46 = !DILocation(line: 54, column: 36, scope: !7)
!47 = !DILocation(line: 56, column: 18, scope: !7)
!48 = !DILocation(line: 58, column: 19, scope: !7)
!49 = !DILocation(line: 59, column: 28, scope: !7)
!50 = !DILocation(line: 60, column: 25, scope: !7)
!51 = !DILocation(line: 60, column: 37, scope: !7)
!52 = !DILocation(line: 60, column: 4, scope: !7)
