; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused__weight_norm_interface_26(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %9 = shl i32 %8, 7, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = lshr i32 %10, 4, !dbg !12
  %12 = and i32 %11, 15, !dbg !12
  %13 = or disjoint i32 %12, 16, !dbg !12
  %14 = or disjoint i32 %12, 32, !dbg !12
  %15 = or disjoint i32 %12, 48, !dbg !12
  %16 = or disjoint i32 %12, 64, !dbg !12
  %17 = or disjoint i32 %12, 80, !dbg !12
  %18 = or disjoint i32 %12, 96, !dbg !12
  %19 = or disjoint i32 %12, 112, !dbg !12
  %20 = and i32 %10, 15, !dbg !12
  %21 = and i32 %10, 127, !dbg !12
  %22 = or disjoint i32 %9, %12, !dbg !13
  %23 = or disjoint i32 %9, %13, !dbg !13
  %24 = or disjoint i32 %9, %14, !dbg !13
  %25 = or disjoint i32 %9, %15, !dbg !13
  %26 = or disjoint i32 %9, %16, !dbg !13
  %27 = or disjoint i32 %9, %17, !dbg !13
  %28 = or disjoint i32 %9, %18, !dbg !13
  %29 = or disjoint i32 %9, %19, !dbg !13
  %30 = icmp slt i32 %22, 128, !dbg !14
  %31 = icmp slt i32 %23, 128, !dbg !14
  %32 = icmp slt i32 %24, 128, !dbg !14
  %33 = icmp slt i32 %25, 128, !dbg !14
  %34 = icmp slt i32 %26, 128, !dbg !14
  %35 = icmp slt i32 %27, 128, !dbg !14
  %36 = icmp slt i32 %28, 128, !dbg !14
  %37 = icmp slt i32 %29, 128, !dbg !14
  %38 = icmp ne i32 %20, 15, !dbg !15
  %39 = mul i32 %22, 15, !dbg !16
  %40 = mul i32 %23, 15, !dbg !16
  %41 = mul i32 %24, 15, !dbg !16
  %42 = mul i32 %25, 15, !dbg !16
  %43 = mul i32 %26, 15, !dbg !16
  %44 = mul i32 %27, 15, !dbg !16
  %45 = mul i32 %28, 15, !dbg !16
  %46 = mul i32 %29, 15, !dbg !16
  %47 = add i32 %39, %20, !dbg !17
  %48 = add i32 %40, %20, !dbg !17
  %49 = add i32 %41, %20, !dbg !17
  %50 = add i32 %42, %20, !dbg !17
  %51 = add i32 %43, %20, !dbg !17
  %52 = add i32 %44, %20, !dbg !17
  %53 = add i32 %45, %20, !dbg !17
  %54 = add i32 %46, %20, !dbg !17
  %55 = sext i32 %47 to i64, !dbg !18
  %56 = getelementptr float, ptr addrspace(1) %1, i64 %55, !dbg !18
  %57 = sext i32 %48 to i64, !dbg !18
  %58 = getelementptr float, ptr addrspace(1) %1, i64 %57, !dbg !18
  %59 = sext i32 %49 to i64, !dbg !18
  %60 = getelementptr float, ptr addrspace(1) %1, i64 %59, !dbg !18
  %61 = sext i32 %50 to i64, !dbg !18
  %62 = getelementptr float, ptr addrspace(1) %1, i64 %61, !dbg !18
  %63 = sext i32 %51 to i64, !dbg !18
  %64 = getelementptr float, ptr addrspace(1) %1, i64 %63, !dbg !18
  %65 = sext i32 %52 to i64, !dbg !18
  %66 = getelementptr float, ptr addrspace(1) %1, i64 %65, !dbg !18
  %67 = sext i32 %53 to i64, !dbg !18
  %68 = getelementptr float, ptr addrspace(1) %1, i64 %67, !dbg !18
  %69 = sext i32 %54 to i64, !dbg !18
  %70 = getelementptr float, ptr addrspace(1) %1, i64 %69, !dbg !18
  %71 = and i1 %38, %30, !dbg !19
  %72 = and i1 %38, %31, !dbg !19
  %73 = and i1 %38, %32, !dbg !19
  %74 = and i1 %38, %33, !dbg !19
  %75 = and i1 %38, %34, !dbg !19
  %76 = and i1 %38, %35, !dbg !19
  %77 = and i1 %38, %36, !dbg !19
  %78 = and i1 %38, %37, !dbg !19
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %56, i1 %71, i32 0, i1 %71) #5, !dbg !20
  %80 = bitcast i32 %79 to float, !dbg !20
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %58, i1 %72, i32 0, i1 %72) #5, !dbg !20
  %82 = bitcast i32 %81 to float, !dbg !20
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %60, i1 %73, i32 0, i1 %73) #5, !dbg !20
  %84 = bitcast i32 %83 to float, !dbg !20
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %62, i1 %74, i32 0, i1 %74) #5, !dbg !20
  %86 = bitcast i32 %85 to float, !dbg !20
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %64, i1 %75, i32 0, i1 %75) #5, !dbg !20
  %88 = bitcast i32 %87 to float, !dbg !20
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %66, i1 %76, i32 0, i1 %76) #5, !dbg !20
  %90 = bitcast i32 %89 to float, !dbg !20
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %68, i1 %77, i32 0, i1 %77) #5, !dbg !20
  %92 = bitcast i32 %91 to float, !dbg !20
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %70, i1 %78, i32 0, i1 %78) #5, !dbg !20
  %94 = bitcast i32 %93 to float, !dbg !20
  %95 = sext i32 %22 to i64, !dbg !21
  %96 = getelementptr float, ptr addrspace(1) %2, i64 %95, !dbg !21
  %97 = sext i32 %23 to i64, !dbg !21
  %98 = getelementptr float, ptr addrspace(1) %2, i64 %97, !dbg !21
  %99 = sext i32 %24 to i64, !dbg !21
  %100 = getelementptr float, ptr addrspace(1) %2, i64 %99, !dbg !21
  %101 = sext i32 %25 to i64, !dbg !21
  %102 = getelementptr float, ptr addrspace(1) %2, i64 %101, !dbg !21
  %103 = sext i32 %26 to i64, !dbg !21
  %104 = getelementptr float, ptr addrspace(1) %2, i64 %103, !dbg !21
  %105 = sext i32 %27 to i64, !dbg !21
  %106 = getelementptr float, ptr addrspace(1) %2, i64 %105, !dbg !21
  %107 = sext i32 %28 to i64, !dbg !21
  %108 = getelementptr float, ptr addrspace(1) %2, i64 %107, !dbg !21
  %109 = sext i32 %29 to i64, !dbg !21
  %110 = getelementptr float, ptr addrspace(1) %2, i64 %109, !dbg !21
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 %30) #5, !dbg !22
  %112 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %98, i1 %31) #5, !dbg !22
  %113 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %100, i1 %32) #5, !dbg !22
  %114 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %102, i1 %33) #5, !dbg !22
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %104, i1 %34) #5, !dbg !22
  %116 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %106, i1 %35) #5, !dbg !22
  %117 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %108, i1 %36) #5, !dbg !22
  %118 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %110, i1 %37) #5, !dbg !22
  %119 = fmul float %80, %80, !dbg !23
  %120 = fmul float %82, %82, !dbg !23
  %121 = fmul float %84, %84, !dbg !23
  %122 = fmul float %86, %86, !dbg !23
  %123 = fmul float %88, %88, !dbg !23
  %124 = fmul float %90, %90, !dbg !23
  %125 = fmul float %92, %92, !dbg !23
  %126 = fmul float %94, %94, !dbg !23
  %127 = select i1 %71, float %119, float 0.000000e+00, !dbg !24
  %128 = select i1 %72, float %120, float 0.000000e+00, !dbg !24
  %129 = select i1 %73, float %121, float 0.000000e+00, !dbg !24
  %130 = select i1 %74, float %122, float 0.000000e+00, !dbg !24
  %131 = select i1 %75, float %123, float 0.000000e+00, !dbg !24
  %132 = select i1 %76, float %124, float 0.000000e+00, !dbg !24
  %133 = select i1 %77, float %125, float 0.000000e+00, !dbg !24
  %134 = select i1 %78, float %126, float 0.000000e+00, !dbg !24
  %135 = bitcast float %127 to i32, !dbg !25
  %136 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %135, i32 8, i32 31), !dbg !25
  %137 = bitcast i32 %136 to float, !dbg !25
  %138 = fadd float %127, %137, !dbg !29
  %139 = bitcast float %138 to i32, !dbg !25
  %140 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %139, i32 4, i32 31), !dbg !25
  %141 = bitcast i32 %140 to float, !dbg !25
  %142 = fadd float %138, %141, !dbg !29
  %143 = bitcast float %142 to i32, !dbg !25
  %144 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %143, i32 2, i32 31), !dbg !25
  %145 = bitcast i32 %144 to float, !dbg !25
  %146 = fadd float %142, %145, !dbg !29
  %147 = bitcast float %146 to i32, !dbg !25
  %148 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %147, i32 1, i32 31), !dbg !25
  %149 = bitcast i32 %148 to float, !dbg !25
  %150 = fadd float %146, %149, !dbg !29
  %151 = bitcast float %128 to i32, !dbg !25
  %152 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %151, i32 8, i32 31), !dbg !25
  %153 = bitcast i32 %152 to float, !dbg !25
  %154 = fadd float %128, %153, !dbg !29
  %155 = bitcast float %154 to i32, !dbg !25
  %156 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %155, i32 4, i32 31), !dbg !25
  %157 = bitcast i32 %156 to float, !dbg !25
  %158 = fadd float %154, %157, !dbg !29
  %159 = bitcast float %158 to i32, !dbg !25
  %160 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %159, i32 2, i32 31), !dbg !25
  %161 = bitcast i32 %160 to float, !dbg !25
  %162 = fadd float %158, %161, !dbg !29
  %163 = bitcast float %162 to i32, !dbg !25
  %164 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %163, i32 1, i32 31), !dbg !25
  %165 = bitcast i32 %164 to float, !dbg !25
  %166 = fadd float %162, %165, !dbg !29
  %167 = bitcast float %129 to i32, !dbg !25
  %168 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %167, i32 8, i32 31), !dbg !25
  %169 = bitcast i32 %168 to float, !dbg !25
  %170 = fadd float %129, %169, !dbg !29
  %171 = bitcast float %170 to i32, !dbg !25
  %172 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %171, i32 4, i32 31), !dbg !25
  %173 = bitcast i32 %172 to float, !dbg !25
  %174 = fadd float %170, %173, !dbg !29
  %175 = bitcast float %174 to i32, !dbg !25
  %176 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %175, i32 2, i32 31), !dbg !25
  %177 = bitcast i32 %176 to float, !dbg !25
  %178 = fadd float %174, %177, !dbg !29
  %179 = bitcast float %178 to i32, !dbg !25
  %180 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %179, i32 1, i32 31), !dbg !25
  %181 = bitcast i32 %180 to float, !dbg !25
  %182 = fadd float %178, %181, !dbg !29
  %183 = bitcast float %130 to i32, !dbg !25
  %184 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %183, i32 8, i32 31), !dbg !25
  %185 = bitcast i32 %184 to float, !dbg !25
  %186 = fadd float %130, %185, !dbg !29
  %187 = bitcast float %186 to i32, !dbg !25
  %188 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %187, i32 4, i32 31), !dbg !25
  %189 = bitcast i32 %188 to float, !dbg !25
  %190 = fadd float %186, %189, !dbg !29
  %191 = bitcast float %190 to i32, !dbg !25
  %192 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %191, i32 2, i32 31), !dbg !25
  %193 = bitcast i32 %192 to float, !dbg !25
  %194 = fadd float %190, %193, !dbg !29
  %195 = bitcast float %194 to i32, !dbg !25
  %196 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %195, i32 1, i32 31), !dbg !25
  %197 = bitcast i32 %196 to float, !dbg !25
  %198 = fadd float %194, %197, !dbg !29
  %199 = bitcast float %131 to i32, !dbg !25
  %200 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %199, i32 8, i32 31), !dbg !25
  %201 = bitcast i32 %200 to float, !dbg !25
  %202 = fadd float %131, %201, !dbg !29
  %203 = bitcast float %202 to i32, !dbg !25
  %204 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %203, i32 4, i32 31), !dbg !25
  %205 = bitcast i32 %204 to float, !dbg !25
  %206 = fadd float %202, %205, !dbg !29
  %207 = bitcast float %206 to i32, !dbg !25
  %208 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %207, i32 2, i32 31), !dbg !25
  %209 = bitcast i32 %208 to float, !dbg !25
  %210 = fadd float %206, %209, !dbg !29
  %211 = bitcast float %210 to i32, !dbg !25
  %212 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %211, i32 1, i32 31), !dbg !25
  %213 = bitcast i32 %212 to float, !dbg !25
  %214 = fadd float %210, %213, !dbg !29
  %215 = bitcast float %132 to i32, !dbg !25
  %216 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %215, i32 8, i32 31), !dbg !25
  %217 = bitcast i32 %216 to float, !dbg !25
  %218 = fadd float %132, %217, !dbg !29
  %219 = bitcast float %218 to i32, !dbg !25
  %220 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %219, i32 4, i32 31), !dbg !25
  %221 = bitcast i32 %220 to float, !dbg !25
  %222 = fadd float %218, %221, !dbg !29
  %223 = bitcast float %222 to i32, !dbg !25
  %224 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %223, i32 2, i32 31), !dbg !25
  %225 = bitcast i32 %224 to float, !dbg !25
  %226 = fadd float %222, %225, !dbg !29
  %227 = bitcast float %226 to i32, !dbg !25
  %228 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %227, i32 1, i32 31), !dbg !25
  %229 = bitcast i32 %228 to float, !dbg !25
  %230 = fadd float %226, %229, !dbg !29
  %231 = bitcast float %133 to i32, !dbg !25
  %232 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %231, i32 8, i32 31), !dbg !25
  %233 = bitcast i32 %232 to float, !dbg !25
  %234 = fadd float %133, %233, !dbg !29
  %235 = bitcast float %234 to i32, !dbg !25
  %236 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %235, i32 4, i32 31), !dbg !25
  %237 = bitcast i32 %236 to float, !dbg !25
  %238 = fadd float %234, %237, !dbg !29
  %239 = bitcast float %238 to i32, !dbg !25
  %240 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %239, i32 2, i32 31), !dbg !25
  %241 = bitcast i32 %240 to float, !dbg !25
  %242 = fadd float %238, %241, !dbg !29
  %243 = bitcast float %242 to i32, !dbg !25
  %244 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %243, i32 1, i32 31), !dbg !25
  %245 = bitcast i32 %244 to float, !dbg !25
  %246 = fadd float %242, %245, !dbg !29
  %247 = bitcast float %134 to i32, !dbg !25
  %248 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %247, i32 8, i32 31), !dbg !25
  %249 = bitcast i32 %248 to float, !dbg !25
  %250 = fadd float %134, %249, !dbg !29
  %251 = bitcast float %250 to i32, !dbg !25
  %252 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %251, i32 4, i32 31), !dbg !25
  %253 = bitcast i32 %252 to float, !dbg !25
  %254 = fadd float %250, %253, !dbg !29
  %255 = bitcast float %254 to i32, !dbg !25
  %256 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %255, i32 2, i32 31), !dbg !25
  %257 = bitcast i32 %256 to float, !dbg !25
  %258 = fadd float %254, %257, !dbg !29
  %259 = bitcast float %258 to i32, !dbg !25
  %260 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %259, i32 1, i32 31), !dbg !25
  %261 = bitcast i32 %260 to float, !dbg !25
  %262 = fadd float %258, %261, !dbg !29
  %263 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !31
  %264 = bitcast float %150 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %263, <1 x i32> %264, i1 true) #5, !dbg !31
  %265 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !31
  %266 = bitcast float %166 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %265, <1 x i32> %266, i1 true) #5, !dbg !31
  %267 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !31
  %268 = bitcast float %182 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %267, <1 x i32> %268, i1 true) #5, !dbg !31
  %269 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !31
  %270 = bitcast float %198 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %269, <1 x i32> %270, i1 true) #5, !dbg !31
  %271 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %16, !dbg !31
  %272 = bitcast float %214 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %271, <1 x i32> %272, i1 true) #5, !dbg !31
  %273 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %17, !dbg !31
  %274 = bitcast float %230 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %273, <1 x i32> %274, i1 true) #5, !dbg !31
  %275 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %18, !dbg !31
  %276 = bitcast float %246 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %275, <1 x i32> %276, i1 true) #5, !dbg !31
  %277 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %19, !dbg !31
  %278 = bitcast float %262 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %277, <1 x i32> %278, i1 true) #5, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %279 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %21, !dbg !31
  %280 = load float, ptr addrspace(3) %279, align 4, !dbg !31
  %281 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !31
  %.not.i = icmp eq i32 %281, 0, !dbg !31
  %282 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !31
  %.not1.i = icmp eq i32 %282, 0, !dbg !31
  br i1 %.not.i, label %288, label %283, !dbg !31

283:                                              ; preds = %7
  br i1 %.not1.i, label %286, label %284, !dbg !31

284:                                              ; preds = %283
  %285 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %280) #5, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

286:                                              ; preds = %283
  %287 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %280) #5, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

288:                                              ; preds = %7
  br i1 %.not1.i, label %291, label %289, !dbg !31

289:                                              ; preds = %288
  %290 = tail call float @llvm.nvvm.sqrt.rn.f(float %280) #5, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

291:                                              ; preds = %288
  %292 = tail call float @llvm.nvvm.sqrt.approx.f(float %280) #5, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

__nv_sqrtf.exit:                                  ; preds = %284, %286, %289, %291
  %.0.i = phi float [ %285, %284 ], [ %287, %286 ], [ %290, %289 ], [ %292, %291 ], !dbg !31
  %293 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !31
  %.not.i2 = icmp eq i32 %293, 0, !dbg !31
  %294 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !31
  %.not1.i5 = icmp eq i32 %294, 0, !dbg !31
  br i1 %.not.i2, label %300, label %295, !dbg !31

295:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i5, label %298, label %296, !dbg !31

296:                                              ; preds = %295
  %297 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %150) #5, !dbg !31
  br label %__nv_sqrtf.exit6, !dbg !31

298:                                              ; preds = %295
  %299 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %150) #5, !dbg !31
  br label %__nv_sqrtf.exit6, !dbg !31

300:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i5, label %303, label %301, !dbg !31

301:                                              ; preds = %300
  %302 = tail call float @llvm.nvvm.sqrt.rn.f(float %150) #5, !dbg !31
  br label %__nv_sqrtf.exit6, !dbg !31

303:                                              ; preds = %300
  %304 = tail call float @llvm.nvvm.sqrt.approx.f(float %150) #5, !dbg !31
  br label %__nv_sqrtf.exit6, !dbg !31

__nv_sqrtf.exit6:                                 ; preds = %296, %298, %301, %303
  %.0.i4 = phi float [ %297, %296 ], [ %299, %298 ], [ %302, %301 ], [ %304, %303 ], !dbg !31
  %305 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !31
  %.not.i7 = icmp eq i32 %305, 0, !dbg !31
  %306 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !31
  %.not1.i10 = icmp eq i32 %306, 0, !dbg !31
  br i1 %.not.i7, label %312, label %307, !dbg !31

307:                                              ; preds = %__nv_sqrtf.exit6
  br i1 %.not1.i10, label %310, label %308, !dbg !31

308:                                              ; preds = %307
  %309 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %166) #5, !dbg !31
  br label %__nv_sqrtf.exit11, !dbg !31

310:                                              ; preds = %307
  %311 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %166) #5, !dbg !31
  br label %__nv_sqrtf.exit11, !dbg !31

312:                                              ; preds = %__nv_sqrtf.exit6
  br i1 %.not1.i10, label %315, label %313, !dbg !31

313:                                              ; preds = %312
  %314 = tail call float @llvm.nvvm.sqrt.rn.f(float %166) #5, !dbg !31
  br label %__nv_sqrtf.exit11, !dbg !31

315:                                              ; preds = %312
  %316 = tail call float @llvm.nvvm.sqrt.approx.f(float %166) #5, !dbg !31
  br label %__nv_sqrtf.exit11, !dbg !31

__nv_sqrtf.exit11:                                ; preds = %308, %310, %313, %315
  %.0.i9 = phi float [ %309, %308 ], [ %311, %310 ], [ %314, %313 ], [ %316, %315 ], !dbg !31
  %317 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !31
  %.not.i12 = icmp eq i32 %317, 0, !dbg !31
  %318 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !31
  %.not1.i15 = icmp eq i32 %318, 0, !dbg !31
  br i1 %.not.i12, label %324, label %319, !dbg !31

319:                                              ; preds = %__nv_sqrtf.exit11
  br i1 %.not1.i15, label %322, label %320, !dbg !31

320:                                              ; preds = %319
  %321 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %182) #5, !dbg !31
  br label %__nv_sqrtf.exit16, !dbg !31

322:                                              ; preds = %319
  %323 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %182) #5, !dbg !31
  br label %__nv_sqrtf.exit16, !dbg !31

324:                                              ; preds = %__nv_sqrtf.exit11
  br i1 %.not1.i15, label %327, label %325, !dbg !31

325:                                              ; preds = %324
  %326 = tail call float @llvm.nvvm.sqrt.rn.f(float %182) #5, !dbg !31
  br label %__nv_sqrtf.exit16, !dbg !31

327:                                              ; preds = %324
  %328 = tail call float @llvm.nvvm.sqrt.approx.f(float %182) #5, !dbg !31
  br label %__nv_sqrtf.exit16, !dbg !31

__nv_sqrtf.exit16:                                ; preds = %320, %322, %325, %327
  %.0.i14 = phi float [ %321, %320 ], [ %323, %322 ], [ %326, %325 ], [ %328, %327 ], !dbg !31
  %329 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !31
  %.not.i17 = icmp eq i32 %329, 0, !dbg !31
  %330 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !31
  %.not1.i20 = icmp eq i32 %330, 0, !dbg !31
  br i1 %.not.i17, label %336, label %331, !dbg !31

331:                                              ; preds = %__nv_sqrtf.exit16
  br i1 %.not1.i20, label %334, label %332, !dbg !31

332:                                              ; preds = %331
  %333 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %198) #5, !dbg !31
  br label %__nv_sqrtf.exit21, !dbg !31

334:                                              ; preds = %331
  %335 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %198) #5, !dbg !31
  br label %__nv_sqrtf.exit21, !dbg !31

336:                                              ; preds = %__nv_sqrtf.exit16
  br i1 %.not1.i20, label %339, label %337, !dbg !31

337:                                              ; preds = %336
  %338 = tail call float @llvm.nvvm.sqrt.rn.f(float %198) #5, !dbg !31
  br label %__nv_sqrtf.exit21, !dbg !31

339:                                              ; preds = %336
  %340 = tail call float @llvm.nvvm.sqrt.approx.f(float %198) #5, !dbg !31
  br label %__nv_sqrtf.exit21, !dbg !31

__nv_sqrtf.exit21:                                ; preds = %332, %334, %337, %339
  %.0.i19 = phi float [ %333, %332 ], [ %335, %334 ], [ %338, %337 ], [ %340, %339 ], !dbg !31
  %341 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !31
  %.not.i22 = icmp eq i32 %341, 0, !dbg !31
  %342 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !31
  %.not1.i25 = icmp eq i32 %342, 0, !dbg !31
  br i1 %.not.i22, label %348, label %343, !dbg !31

343:                                              ; preds = %__nv_sqrtf.exit21
  br i1 %.not1.i25, label %346, label %344, !dbg !31

344:                                              ; preds = %343
  %345 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %214) #5, !dbg !31
  br label %__nv_sqrtf.exit26, !dbg !31

346:                                              ; preds = %343
  %347 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %214) #5, !dbg !31
  br label %__nv_sqrtf.exit26, !dbg !31

348:                                              ; preds = %__nv_sqrtf.exit21
  br i1 %.not1.i25, label %351, label %349, !dbg !31

349:                                              ; preds = %348
  %350 = tail call float @llvm.nvvm.sqrt.rn.f(float %214) #5, !dbg !31
  br label %__nv_sqrtf.exit26, !dbg !31

351:                                              ; preds = %348
  %352 = tail call float @llvm.nvvm.sqrt.approx.f(float %214) #5, !dbg !31
  br label %__nv_sqrtf.exit26, !dbg !31

__nv_sqrtf.exit26:                                ; preds = %344, %346, %349, %351
  %.0.i24 = phi float [ %345, %344 ], [ %347, %346 ], [ %350, %349 ], [ %352, %351 ], !dbg !31
  %353 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !31
  %.not.i27 = icmp eq i32 %353, 0, !dbg !31
  %354 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !31
  %.not1.i30 = icmp eq i32 %354, 0, !dbg !31
  br i1 %.not.i27, label %360, label %355, !dbg !31

355:                                              ; preds = %__nv_sqrtf.exit26
  br i1 %.not1.i30, label %358, label %356, !dbg !31

356:                                              ; preds = %355
  %357 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %230) #5, !dbg !31
  br label %__nv_sqrtf.exit31, !dbg !31

358:                                              ; preds = %355
  %359 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %230) #5, !dbg !31
  br label %__nv_sqrtf.exit31, !dbg !31

360:                                              ; preds = %__nv_sqrtf.exit26
  br i1 %.not1.i30, label %363, label %361, !dbg !31

361:                                              ; preds = %360
  %362 = tail call float @llvm.nvvm.sqrt.rn.f(float %230) #5, !dbg !31
  br label %__nv_sqrtf.exit31, !dbg !31

363:                                              ; preds = %360
  %364 = tail call float @llvm.nvvm.sqrt.approx.f(float %230) #5, !dbg !31
  br label %__nv_sqrtf.exit31, !dbg !31

__nv_sqrtf.exit31:                                ; preds = %356, %358, %361, %363
  %.0.i29 = phi float [ %357, %356 ], [ %359, %358 ], [ %362, %361 ], [ %364, %363 ], !dbg !31
  %365 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !31
  %.not.i32 = icmp eq i32 %365, 0, !dbg !31
  %366 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !31
  %.not1.i35 = icmp eq i32 %366, 0, !dbg !31
  br i1 %.not.i32, label %372, label %367, !dbg !31

367:                                              ; preds = %__nv_sqrtf.exit31
  br i1 %.not1.i35, label %370, label %368, !dbg !31

368:                                              ; preds = %367
  %369 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %246) #5, !dbg !31
  br label %__nv_sqrtf.exit36, !dbg !31

370:                                              ; preds = %367
  %371 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %246) #5, !dbg !31
  br label %__nv_sqrtf.exit36, !dbg !31

372:                                              ; preds = %__nv_sqrtf.exit31
  br i1 %.not1.i35, label %375, label %373, !dbg !31

373:                                              ; preds = %372
  %374 = tail call float @llvm.nvvm.sqrt.rn.f(float %246) #5, !dbg !31
  br label %__nv_sqrtf.exit36, !dbg !31

375:                                              ; preds = %372
  %376 = tail call float @llvm.nvvm.sqrt.approx.f(float %246) #5, !dbg !31
  br label %__nv_sqrtf.exit36, !dbg !31

__nv_sqrtf.exit36:                                ; preds = %368, %370, %373, %375
  %.0.i34 = phi float [ %369, %368 ], [ %371, %370 ], [ %374, %373 ], [ %376, %375 ], !dbg !31
  %377 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !31
  %.not.i37 = icmp eq i32 %377, 0, !dbg !31
  %378 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !31
  %.not1.i40 = icmp eq i32 %378, 0, !dbg !31
  br i1 %.not.i37, label %384, label %379, !dbg !31

379:                                              ; preds = %__nv_sqrtf.exit36
  br i1 %.not1.i40, label %382, label %380, !dbg !31

380:                                              ; preds = %379
  %381 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %262) #5, !dbg !31
  br label %__nv_sqrtf.exit41, !dbg !31

382:                                              ; preds = %379
  %383 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %262) #5, !dbg !31
  br label %__nv_sqrtf.exit41, !dbg !31

384:                                              ; preds = %__nv_sqrtf.exit36
  br i1 %.not1.i40, label %387, label %385, !dbg !31

385:                                              ; preds = %384
  %386 = tail call float @llvm.nvvm.sqrt.rn.f(float %262) #5, !dbg !31
  br label %__nv_sqrtf.exit41, !dbg !31

387:                                              ; preds = %384
  %388 = tail call float @llvm.nvvm.sqrt.approx.f(float %262) #5, !dbg !31
  br label %__nv_sqrtf.exit41, !dbg !31

__nv_sqrtf.exit41:                                ; preds = %380, %382, %385, %387
  %.0.i39 = phi float [ %381, %380 ], [ %383, %382 ], [ %386, %385 ], [ %388, %387 ], !dbg !31
  %389 = bitcast i32 %118 to float, !dbg !22
  %390 = bitcast i32 %117 to float, !dbg !22
  %391 = bitcast i32 %116 to float, !dbg !22
  %392 = bitcast i32 %115 to float, !dbg !22
  %393 = bitcast i32 %114 to float, !dbg !22
  %394 = bitcast i32 %113 to float, !dbg !22
  %395 = bitcast i32 %112 to float, !dbg !22
  %396 = bitcast i32 %111 to float, !dbg !22
  %397 = or disjoint i32 %9, %21, !dbg !13
  %398 = icmp slt i32 %397, 128, !dbg !14
  %399 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %396, float %.0.i4) #5, !dbg !32
  %400 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %395, float %.0.i9) #5, !dbg !32
  %401 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %394, float %.0.i14) #5, !dbg !32
  %402 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %393, float %.0.i19) #5, !dbg !32
  %403 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %392, float %.0.i24) #5, !dbg !32
  %404 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %391, float %.0.i29) #5, !dbg !32
  %405 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %390, float %.0.i34) #5, !dbg !32
  %406 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %389, float %.0.i39) #5, !dbg !32
  %407 = fmul float %399, %80, !dbg !33
  %408 = fmul float %400, %82, !dbg !33
  %409 = fmul float %401, %84, !dbg !33
  %410 = fmul float %402, %86, !dbg !33
  %411 = fmul float %403, %88, !dbg !33
  %412 = fmul float %404, %90, !dbg !33
  %413 = fmul float %405, %92, !dbg !33
  %414 = fmul float %406, %94, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %415 = sext i32 %397 to i64, !dbg !35
  %416 = getelementptr float, ptr addrspace(1) %0, i64 %415, !dbg !35
  %417 = and i32 %10, 128, !dbg !36
  %418 = icmp eq i32 %417, 0, !dbg !36
  %419 = bitcast float %.0.i to i32, !dbg !36
  %420 = and i1 %418, %398, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %419, ptr addrspace(1) %416, i1 %420) #5, !dbg !36
  %421 = getelementptr float, ptr addrspace(1) %3, i64 %55, !dbg !37
  %422 = getelementptr float, ptr addrspace(1) %3, i64 %57, !dbg !37
  %423 = getelementptr float, ptr addrspace(1) %3, i64 %59, !dbg !37
  %424 = getelementptr float, ptr addrspace(1) %3, i64 %61, !dbg !37
  %425 = getelementptr float, ptr addrspace(1) %3, i64 %63, !dbg !37
  %426 = getelementptr float, ptr addrspace(1) %3, i64 %65, !dbg !37
  %427 = getelementptr float, ptr addrspace(1) %3, i64 %67, !dbg !37
  %428 = getelementptr float, ptr addrspace(1) %3, i64 %69, !dbg !37
  %429 = bitcast float %407 to i32, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %429, ptr addrspace(1) %421, i1 %71) #5, !dbg !38
  %430 = bitcast float %408 to i32, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %430, ptr addrspace(1) %422, i1 %72) #5, !dbg !38
  %431 = bitcast float %409 to i32, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %431, ptr addrspace(1) %423, i1 %73) #5, !dbg !38
  %432 = bitcast float %410 to i32, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %432, ptr addrspace(1) %424, i1 %74) #5, !dbg !38
  %433 = bitcast float %411 to i32, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %433, ptr addrspace(1) %425, i1 %75) #5, !dbg !38
  %434 = bitcast float %412 to i32, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %434, ptr addrspace(1) %426, i1 %76) #5, !dbg !38
  %435 = bitcast float %413 to i32, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %435, ptr addrspace(1) %427, i1 %77) #5, !dbg !38
  %436 = bitcast float %414 to i32, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %436, ptr addrspace(1) %428, i1 %78) #5, !dbg !38
  %437 = getelementptr float, ptr addrspace(1) %4, i64 %55, !dbg !39
  %438 = getelementptr float, ptr addrspace(1) %4, i64 %57, !dbg !39
  %439 = getelementptr float, ptr addrspace(1) %4, i64 %59, !dbg !39
  %440 = getelementptr float, ptr addrspace(1) %4, i64 %61, !dbg !39
  %441 = getelementptr float, ptr addrspace(1) %4, i64 %63, !dbg !39
  %442 = getelementptr float, ptr addrspace(1) %4, i64 %65, !dbg !39
  %443 = getelementptr float, ptr addrspace(1) %4, i64 %67, !dbg !39
  %444 = getelementptr float, ptr addrspace(1) %4, i64 %69, !dbg !39
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %429, ptr addrspace(1) %437, i1 %71) #5, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %430, ptr addrspace(1) %438, i1 %72) #5, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %431, ptr addrspace(1) %439, i1 %73) #5, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %432, ptr addrspace(1) %440, i1 %74) #5, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %433, ptr addrspace(1) %441, i1 %75) #5, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %434, ptr addrspace(1) %442, i1 %76) #5, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %435, ptr addrspace(1) %443, i1 %77) #5, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %436, ptr addrspace(1) %444, i1 %78) #5, !dbg !40
  ret void, !dbg !41
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cjoyn6gnd44g2qpeopfmcj5ihra5uny4uovjo422ppa46s24ojn4.py", directory: "inductor_cache/jo")
!4 = !{ptr @triton_per_fused__weight_norm_interface_26, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__weight_norm_interface_26, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__weight_norm_interface_26", linkageName: "triton_per_fused__weight_norm_interface_26", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 28, column: 21, scope: !7)
!16 = !DILocation(line: 31, column: 38, scope: !7)
!17 = !DILocation(line: 31, column: 35, scope: !7)
!18 = !DILocation(line: 31, column: 30, scope: !7)
!19 = !DILocation(line: 31, column: 51, scope: !7)
!20 = !DILocation(line: 31, column: 43, scope: !7)
!21 = !DILocation(line: 32, column: 30, scope: !7)
!22 = !DILocation(line: 32, column: 35, scope: !7)
!23 = !DILocation(line: 33, column: 18, scope: !7)
!24 = !DILocation(line: 35, column: 41, scope: !7)
!25 = !DILocation(line: 267, column: 36, scope: !26, inlinedAt: !28)
!26 = distinct !DILexicalBlockFile(scope: !7, file: !27, discriminator: 0)
!27 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!28 = !DILocation(line: 36, column: 24, scope: !7)
!29 = !DILocation(line: 256, column: 15, scope: !30, inlinedAt: !28)
!30 = distinct !DILexicalBlockFile(scope: !26, file: !27, discriminator: 0)
!31 = !DILocation(line: 37, column: 26, scope: !7)
!32 = !DILocation(line: 38, column: 18, scope: !7)
!33 = !DILocation(line: 39, column: 18, scope: !7)
!34 = !DILocation(line: 40, column: 4, scope: !7)
!35 = !DILocation(line: 41, column: 28, scope: !7)
!36 = !DILocation(line: 41, column: 39, scope: !7)
!37 = !DILocation(line: 42, column: 25, scope: !7)
!38 = !DILocation(line: 42, column: 44, scope: !7)
!39 = !DILocation(line: 43, column: 25, scope: !7)
!40 = !DILocation(line: 43, column: 44, scope: !7)
!41 = !DILocation(line: 43, column: 4, scope: !7)
