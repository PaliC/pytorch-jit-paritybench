; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_red_fused__native_batch_norm_legit_convolution_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %8 = icmp slt i32 %7, 128, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = shl i32 %9, 2, !dbg !12
  %11 = and i32 %10, 2044, !dbg !12
  %12 = srem i32 %7, 32, !dbg !13
  %13 = sext i32 %12 to i64, !dbg !14
  %14 = getelementptr float, ptr addrspace(1) %2, i64 %13, !dbg !14
  %15 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %14, i1 %8) #5, !dbg !15
  %16 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %14, i1 %8) #5, !dbg !15
  %17 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %14, i1 %8) #5, !dbg !15
  %18 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %14, i1 %8) #5, !dbg !15
  %19 = shl i32 %7, 12, !dbg !16
  %20 = or disjoint i32 %19, %11
  %21 = sext i32 %20 to i64, !dbg !17
  %22 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !18
  %23 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %22, i1 %8, i32 0, i1 %8, i32 0, i1 %8, i32 0, i1 %8, i32 0, i1 %8) #5, !dbg !19
  %24 = bitcast i32 %18 to float, !dbg !15
  %25 = extractvalue { i32, i32, i32, i32 } %23, 3, !dbg !19
  %26 = bitcast i32 %25 to float, !dbg !19
  %27 = fadd float %24, %26, !dbg !20
  %28 = extractvalue { i32, i32, i32, i32 } %23, 2, !dbg !19
  %29 = bitcast i32 %28 to float, !dbg !19
  %30 = fadd float %24, %29, !dbg !20
  %31 = extractvalue { i32, i32, i32, i32 } %23, 1, !dbg !19
  %32 = bitcast i32 %31 to float, !dbg !19
  %33 = fadd float %24, %32, !dbg !20
  %34 = extractvalue { i32, i32, i32, i32 } %23, 0, !dbg !19
  %35 = bitcast i32 %34 to float, !dbg !19
  %36 = fadd float %24, %35, !dbg !20
  %37 = select i1 %8, float %36, float 0.000000e+00, !dbg !21
  %38 = select i1 %8, float %33, float 0.000000e+00, !dbg !21
  %39 = select i1 %8, float %30, float 0.000000e+00, !dbg !21
  %40 = select i1 %8, float %27, float 0.000000e+00, !dbg !21
  %41 = bitcast float %36 to i32, !dbg !22
  %42 = bitcast float %33 to i32, !dbg !22
  %43 = bitcast float %30 to i32, !dbg !22
  %44 = bitcast float %27 to i32, !dbg !22
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %41, i32 %42, i32 %43, i32 %44, ptr addrspace(1) %22, i1 %8) #5, !dbg !22
  %45 = or disjoint i64 %21, 2048, !dbg !23
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !18
  %47 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %46, i1 %8, i32 0, i1 %8, i32 0, i1 %8, i32 0, i1 %8, i32 0, i1 %8) #5, !dbg !19
  %48 = extractvalue { i32, i32, i32, i32 } %47, 0, !dbg !19
  %49 = extractvalue { i32, i32, i32, i32 } %47, 1, !dbg !19
  %50 = extractvalue { i32, i32, i32, i32 } %47, 2, !dbg !19
  %51 = extractvalue { i32, i32, i32, i32 } %47, 3, !dbg !19
  %52 = bitcast i32 %48 to float, !dbg !19
  %53 = bitcast i32 %49 to float, !dbg !19
  %54 = bitcast i32 %50 to float, !dbg !19
  %55 = bitcast i32 %51 to float, !dbg !19
  %56 = fadd float %24, %52, !dbg !20
  %57 = fadd float %24, %53, !dbg !20
  %58 = fadd float %24, %54, !dbg !20
  %59 = fadd float %24, %55, !dbg !20
  %60 = fsub float %56, %37, !dbg !24
  %61 = fsub float %57, %38, !dbg !24
  %62 = fsub float %58, %39, !dbg !24
  %63 = fsub float %59, %40, !dbg !24
  %64 = select i1 %8, float 2.000000e+00, float 1.000000e+00, !dbg !28
  %65 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %60, float %64) #5, !dbg !29
  %66 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %61, float %64) #5, !dbg !29
  %67 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %62, float %64) #5, !dbg !29
  %68 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %63, float %64) #5, !dbg !29
  %69 = fadd float %37, %65, !dbg !30
  %70 = fsub float %56, %69, !dbg !31
  %71 = fmul float %60, %70, !dbg !32
  %72 = fadd float %71, 0.000000e+00, !dbg !33
  %73 = fadd float %38, %66, !dbg !30
  %74 = fsub float %57, %73, !dbg !31
  %75 = fmul float %61, %74, !dbg !32
  %76 = fadd float %75, 0.000000e+00, !dbg !33
  %77 = fadd float %39, %67, !dbg !30
  %78 = fsub float %58, %77, !dbg !31
  %79 = fmul float %62, %78, !dbg !32
  %80 = fadd float %79, 0.000000e+00, !dbg !33
  %81 = fadd float %40, %68, !dbg !30
  %82 = fsub float %59, %81, !dbg !31
  %83 = fmul float %63, %82, !dbg !32
  %84 = fadd float %83, 0.000000e+00, !dbg !33
  %85 = select i1 %8, float %69, float 0.000000e+00, !dbg !21
  %86 = select i1 %8, float %73, float 0.000000e+00, !dbg !21
  %87 = select i1 %8, float %77, float 0.000000e+00, !dbg !21
  %88 = select i1 %8, float %81, float 0.000000e+00, !dbg !21
  %89 = select i1 %8, float %80, float 0.000000e+00, !dbg !34
  %90 = select i1 %8, float %84, float 0.000000e+00, !dbg !34
  %91 = select i1 %8, float 2.000000e+00, float 0.000000e+00, !dbg !28
  %92 = select i1 %8, float 2.000000e+00, float 0.000000e+00, !dbg !28
  %93 = select i1 %8, float 2.000000e+00, float 0.000000e+00, !dbg !28
  %94 = select i1 %8, float 2.000000e+00, float 0.000000e+00, !dbg !28
  %95 = bitcast float %56 to i32, !dbg !22
  %96 = bitcast float %57 to i32, !dbg !22
  %97 = bitcast float %58 to i32, !dbg !22
  %98 = bitcast float %59 to i32, !dbg !22
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %95, i32 %96, i32 %97, i32 %98, ptr addrspace(1) %46, i1 %8) #5, !dbg !22
  %99 = lshr i32 %9, 5, !dbg !12
  %100 = and i32 %9, 31, !dbg !12
  %101 = fsub float %86, %85, !dbg !35
  %102 = select i1 %8, float 4.000000e+00, float 0.000000e+00, !dbg !38
  %103 = fcmp oeq float %102, 0.000000e+00, !dbg !39
  %104 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %92, float %102) #5, !dbg !40
  %105 = select i1 %103, float 0.000000e+00, float %104, !dbg !41
  %106 = fmul float %101, %105, !dbg !42
  %107 = fadd float %85, %106, !dbg !43
  %108 = fadd float %72, %76, !dbg !44
  %109 = select i1 %8, float %108, float 0.000000e+00, !dbg !44
  %110 = fmul float %101, %101, !dbg !45
  %111 = fmul float %110, %91, !dbg !46
  %112 = fmul float %111, %105, !dbg !47
  %113 = fadd float %109, %112, !dbg !48
  %114 = fsub float %87, %107, !dbg !35
  %115 = select i1 %8, float 6.000000e+00, float 0.000000e+00, !dbg !38
  %116 = fcmp oeq float %115, 0.000000e+00, !dbg !39
  %117 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %93, float %115) #5, !dbg !40
  %118 = select i1 %116, float 0.000000e+00, float %117, !dbg !41
  %119 = fmul float %118, %114, !dbg !42
  %120 = fadd float %107, %119, !dbg !43
  %121 = fadd float %89, %113, !dbg !44
  %122 = fmul float %114, %114, !dbg !45
  %123 = fmul float %102, %122, !dbg !46
  %124 = fmul float %118, %123, !dbg !47
  %125 = fadd float %121, %124, !dbg !48
  %126 = fsub float %88, %120, !dbg !35
  %127 = select i1 %8, float 8.000000e+00, float 0.000000e+00, !dbg !38
  %128 = fcmp oeq float %127, 0.000000e+00, !dbg !39
  %129 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %94, float %127) #5, !dbg !40
  %130 = select i1 %128, float 0.000000e+00, float %129, !dbg !41
  %131 = fmul float %130, %126, !dbg !42
  %132 = fadd float %120, %131, !dbg !43
  %133 = fadd float %90, %125, !dbg !44
  %134 = fmul float %126, %126, !dbg !45
  %135 = fmul float %115, %134, !dbg !46
  %136 = fmul float %130, %135, !dbg !47
  %137 = fadd float %133, %136, !dbg !48
  %138 = bitcast float %132 to i32, !dbg !49
  %139 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %138, i32 16, i32 31), !dbg !49
  %140 = bitcast i32 %139 to float, !dbg !49
  %141 = bitcast float %137 to i32, !dbg !49
  %142 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %141, i32 16, i32 31), !dbg !49
  %143 = bitcast i32 %142 to float, !dbg !49
  %144 = bitcast float %127 to i32, !dbg !49
  %145 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %144, i32 16, i32 31), !dbg !49
  %146 = bitcast i32 %145 to float, !dbg !49
  %147 = fsub float %140, %132, !dbg !35
  %148 = fadd float %127, %146, !dbg !38
  %149 = fcmp oeq float %148, 0.000000e+00, !dbg !39
  %150 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %146, float %148) #5, !dbg !40
  %151 = select i1 %149, float 0.000000e+00, float %150, !dbg !41
  %152 = fmul float %151, %147, !dbg !42
  %153 = fadd float %132, %152, !dbg !43
  %154 = fadd float %137, %143, !dbg !44
  %155 = fmul float %147, %147, !dbg !45
  %156 = fmul float %127, %155, !dbg !46
  %157 = fmul float %151, %156, !dbg !47
  %158 = fadd float %154, %157, !dbg !48
  %159 = bitcast float %153 to i32, !dbg !49
  %160 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %159, i32 8, i32 31), !dbg !49
  %161 = bitcast i32 %160 to float, !dbg !49
  %162 = bitcast float %158 to i32, !dbg !49
  %163 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %162, i32 8, i32 31), !dbg !49
  %164 = bitcast i32 %163 to float, !dbg !49
  %165 = bitcast float %148 to i32, !dbg !49
  %166 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %165, i32 8, i32 31), !dbg !49
  %167 = bitcast i32 %166 to float, !dbg !49
  %168 = fsub float %161, %153, !dbg !35
  %169 = fadd float %148, %167, !dbg !38
  %170 = fcmp oeq float %169, 0.000000e+00, !dbg !39
  %171 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %167, float %169) #5, !dbg !40
  %172 = select i1 %170, float 0.000000e+00, float %171, !dbg !41
  %173 = fmul float %168, %172, !dbg !42
  %174 = fadd float %153, %173, !dbg !43
  %175 = fadd float %158, %164, !dbg !44
  %176 = fmul float %168, %168, !dbg !45
  %177 = fmul float %148, %176, !dbg !46
  %178 = fmul float %172, %177, !dbg !47
  %179 = fadd float %175, %178, !dbg !48
  %180 = bitcast float %174 to i32, !dbg !49
  %181 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %180, i32 4, i32 31), !dbg !49
  %182 = bitcast i32 %181 to float, !dbg !49
  %183 = bitcast float %179 to i32, !dbg !49
  %184 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %183, i32 4, i32 31), !dbg !49
  %185 = bitcast i32 %184 to float, !dbg !49
  %186 = bitcast float %169 to i32, !dbg !49
  %187 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %186, i32 4, i32 31), !dbg !49
  %188 = bitcast i32 %187 to float, !dbg !49
  %189 = fsub float %182, %174, !dbg !35
  %190 = fadd float %169, %188, !dbg !38
  %191 = fcmp oeq float %190, 0.000000e+00, !dbg !39
  %192 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %188, float %190) #5, !dbg !40
  %193 = select i1 %191, float 0.000000e+00, float %192, !dbg !41
  %194 = fmul float %189, %193, !dbg !42
  %195 = fadd float %174, %194, !dbg !43
  %196 = fadd float %179, %185, !dbg !44
  %197 = fmul float %189, %189, !dbg !45
  %198 = fmul float %169, %197, !dbg !46
  %199 = fmul float %193, %198, !dbg !47
  %200 = fadd float %196, %199, !dbg !48
  %201 = bitcast float %195 to i32, !dbg !49
  %202 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %201, i32 2, i32 31), !dbg !49
  %203 = bitcast i32 %202 to float, !dbg !49
  %204 = bitcast float %200 to i32, !dbg !49
  %205 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %204, i32 2, i32 31), !dbg !49
  %206 = bitcast i32 %205 to float, !dbg !49
  %207 = bitcast float %190 to i32, !dbg !49
  %208 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %207, i32 2, i32 31), !dbg !49
  %209 = bitcast i32 %208 to float, !dbg !49
  %210 = fsub float %203, %195, !dbg !35
  %211 = fadd float %190, %209, !dbg !38
  %212 = fcmp oeq float %211, 0.000000e+00, !dbg !39
  %213 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %209, float %211) #5, !dbg !40
  %214 = select i1 %212, float 0.000000e+00, float %213, !dbg !41
  %215 = fmul float %210, %214, !dbg !42
  %216 = fadd float %195, %215, !dbg !43
  %217 = fadd float %200, %206, !dbg !44
  %218 = fmul float %210, %210, !dbg !45
  %219 = fmul float %190, %218, !dbg !46
  %220 = fmul float %214, %219, !dbg !47
  %221 = fadd float %217, %220, !dbg !48
  %222 = bitcast float %216 to i32, !dbg !49
  %223 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %222, i32 1, i32 31), !dbg !49
  %224 = bitcast i32 %223 to float, !dbg !49
  %225 = bitcast float %221 to i32, !dbg !49
  %226 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %225, i32 1, i32 31), !dbg !49
  %227 = bitcast i32 %226 to float, !dbg !49
  %228 = bitcast float %211 to i32, !dbg !49
  %229 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %228, i32 1, i32 31), !dbg !49
  %230 = bitcast i32 %229 to float, !dbg !49
  %231 = fsub float %224, %216, !dbg !35
  %232 = fadd float %211, %230, !dbg !38
  %233 = fcmp oeq float %232, 0.000000e+00, !dbg !39
  %234 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %230, float %232) #5, !dbg !40
  %235 = select i1 %233, float 0.000000e+00, float %234, !dbg !41
  %236 = fmul float %231, %235, !dbg !42
  %237 = fadd float %216, %236, !dbg !43
  %238 = fadd float %221, %227, !dbg !44
  %239 = fmul float %231, %231, !dbg !45
  %240 = fmul float %211, %239, !dbg !46
  %241 = fmul float %235, %240, !dbg !47
  %242 = fadd float %238, %241, !dbg !48
  %243 = icmp eq i32 %100, 0, !dbg !49
  %244 = and i32 %99, 15, !dbg !49
  %245 = zext nneg i32 %244 to i64, !dbg !49
  %246 = getelementptr float, ptr addrspace(3) @global_smem, i64 %245, !dbg !49
  %247 = bitcast float %237 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %246, <1 x i32> %247, i1 %243) #5, !dbg !49
  %248 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %245, !dbg !49
  %249 = bitcast float %242 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %248, <1 x i32> %249, i1 %243) #5, !dbg !49
  %250 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 128), i64 %245, !dbg !49
  %251 = bitcast float %232 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %250, <1 x i32> %251, i1 %243) #5, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %252 = icmp slt i32 %9, 16, !dbg !49
  %253 = sext i32 %9 to i64, !dbg !49
  %254 = getelementptr float, ptr addrspace(3) @global_smem, i64 %253, !dbg !49
  %255 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %254, i1 %252) #5, !dbg !49
  %256 = bitcast i32 %255 to float, !dbg !49
  %257 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %253, !dbg !49
  %258 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %257, i1 %252) #5, !dbg !49
  %259 = bitcast i32 %258 to float, !dbg !49
  %260 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 128), i64 %253, !dbg !49
  %261 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %260, i1 %252) #5, !dbg !49
  %262 = bitcast i32 %261 to float, !dbg !49
  %263 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %255, i32 8, i32 31), !dbg !49
  %264 = bitcast i32 %263 to float, !dbg !49
  %265 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %258, i32 8, i32 31), !dbg !49
  %266 = bitcast i32 %265 to float, !dbg !49
  %267 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %261, i32 8, i32 31), !dbg !49
  %268 = bitcast i32 %267 to float, !dbg !49
  %269 = fsub float %264, %256, !dbg !35
  %270 = fadd float %262, %268, !dbg !38
  %271 = fcmp oeq float %270, 0.000000e+00, !dbg !39
  %272 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %268, float %270) #5, !dbg !40
  %273 = select i1 %271, float 0.000000e+00, float %272, !dbg !41
  %274 = fmul float %269, %273, !dbg !42
  %275 = fadd float %274, %256, !dbg !43
  %276 = fadd float %259, %266, !dbg !44
  %277 = fmul float %269, %269, !dbg !45
  %278 = fmul float %277, %262, !dbg !46
  %279 = fmul float %278, %273, !dbg !47
  %280 = fadd float %276, %279, !dbg !48
  %281 = bitcast float %275 to i32, !dbg !49
  %282 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %281, i32 4, i32 31), !dbg !49
  %283 = bitcast i32 %282 to float, !dbg !49
  %284 = bitcast float %280 to i32, !dbg !49
  %285 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %284, i32 4, i32 31), !dbg !49
  %286 = bitcast i32 %285 to float, !dbg !49
  %287 = bitcast float %270 to i32, !dbg !49
  %288 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %287, i32 4, i32 31), !dbg !49
  %289 = bitcast i32 %288 to float, !dbg !49
  %290 = fsub float %283, %275, !dbg !35
  %291 = fadd float %270, %289, !dbg !38
  %292 = fcmp oeq float %291, 0.000000e+00, !dbg !39
  %293 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %289, float %291) #5, !dbg !40
  %294 = select i1 %292, float 0.000000e+00, float %293, !dbg !41
  %295 = fmul float %290, %294, !dbg !42
  %296 = fadd float %275, %295, !dbg !43
  %297 = fadd float %280, %286, !dbg !44
  %298 = fmul float %290, %290, !dbg !45
  %299 = fmul float %270, %298, !dbg !46
  %300 = fmul float %294, %299, !dbg !47
  %301 = fadd float %297, %300, !dbg !48
  %302 = bitcast float %296 to i32, !dbg !49
  %303 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %302, i32 2, i32 31), !dbg !49
  %304 = bitcast i32 %303 to float, !dbg !49
  %305 = bitcast float %301 to i32, !dbg !49
  %306 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %305, i32 2, i32 31), !dbg !49
  %307 = bitcast i32 %306 to float, !dbg !49
  %308 = bitcast float %291 to i32, !dbg !49
  %309 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %308, i32 2, i32 31), !dbg !49
  %310 = bitcast i32 %309 to float, !dbg !49
  %311 = fsub float %304, %296, !dbg !35
  %312 = fadd float %291, %310, !dbg !38
  %313 = fcmp oeq float %312, 0.000000e+00, !dbg !39
  %314 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %310, float %312) #5, !dbg !40
  %315 = select i1 %313, float 0.000000e+00, float %314, !dbg !41
  %316 = fmul float %311, %315, !dbg !42
  %317 = fadd float %296, %316, !dbg !43
  %318 = fadd float %301, %307, !dbg !44
  %319 = fmul float %311, %311, !dbg !45
  %320 = fmul float %291, %319, !dbg !46
  %321 = fmul float %315, %320, !dbg !47
  %322 = fadd float %318, %321, !dbg !48
  %323 = bitcast float %317 to i32, !dbg !49
  %324 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %323, i32 1, i32 31), !dbg !49
  %325 = bitcast i32 %324 to float, !dbg !49
  %326 = bitcast float %322 to i32, !dbg !49
  %327 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %326, i32 1, i32 31), !dbg !49
  %328 = bitcast i32 %327 to float, !dbg !49
  %329 = bitcast float %312 to i32, !dbg !49
  %330 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %329, i32 1, i32 31), !dbg !49
  %331 = bitcast i32 %330 to float, !dbg !49
  %332 = fsub float %325, %317, !dbg !35
  %333 = fadd float %312, %331, !dbg !38
  %334 = fcmp oeq float %333, 0.000000e+00, !dbg !39
  %335 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %331, float %333) #5, !dbg !40
  %336 = select i1 %334, float 0.000000e+00, float %335, !dbg !41
  %337 = fmul float %332, %336, !dbg !42
  %338 = fadd float %317, %337, !dbg !43
  %339 = fadd float %322, %328, !dbg !44
  %340 = fmul float %332, %332, !dbg !45
  %341 = fmul float %312, %340, !dbg !46
  %342 = fmul float %336, %341, !dbg !47
  %343 = fadd float %339, %342, !dbg !48
  %344 = and i32 %9, 15, !dbg !49
  %345 = icmp eq i32 %344, 0, !dbg !49
  %346 = and i1 %252, %345, !dbg !49
  %347 = bitcast float %338 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %254, <1 x i32> %347, i1 %346) #5, !dbg !49
  %348 = bitcast float %343 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %257, <1 x i32> %348, i1 %346) #5, !dbg !49
  %349 = bitcast float %333 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %260, <1 x i32> %349, i1 %346) #5, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %350 = load i32, ptr addrspace(3) @global_smem, align 16, !dbg !49
  %351 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), align 16, !dbg !49
  %352 = sext i32 %7 to i64, !dbg !50
  %353 = getelementptr float, ptr addrspace(1) %3, i64 %352, !dbg !50
  %urem = and i32 %9, 511, !dbg !51
  %354 = icmp eq i32 %urem, 0, !dbg !51
  %355 = and i1 %354, %8, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %350, ptr addrspace(1) %353, i1 %355) #5, !dbg !51
  %356 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %351, float 4.096000e+03) #5, !dbg !52
  %357 = fadd float %356, 0x3EE4F8B580000000, !dbg !53
  %358 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !54
  %.not.i = icmp eq i32 %358, 0, !dbg !54
  br i1 %.not.i, label %361, label %359, !dbg !54

359:                                              ; preds = %6
  %360 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %357), !dbg !54
  br label %__nv_rsqrtf.exit, !dbg !54

361:                                              ; preds = %6
  %362 = tail call float @llvm.nvvm.rsqrt.approx.f(float %357), !dbg !54
  br label %__nv_rsqrtf.exit, !dbg !54

__nv_rsqrtf.exit:                                 ; preds = %359, %361
  %.0.i = phi float [ %360, %359 ], [ %362, %361 ], !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !55
  %363 = getelementptr float, ptr addrspace(1) %1, i64 %352, !dbg !56
  %364 = bitcast float %.0.i to i32, !dbg !57
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %364, ptr addrspace(1) %363, i1 %355) #5, !dbg !57
  ret void, !dbg !58
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cibqgvawnhfdmtgvyuppimhbpptsvhouqrhjtbqfqvrad2jgmfd2.py", directory: "inductor_cache/ib")
!4 = !{ptr @triton_red_fused__native_batch_norm_legit_convolution_1, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused__native_batch_norm_legit_convolution_1, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused__native_batch_norm_legit_convolution_1", linkageName: "triton_red_fused__native_batch_norm_legit_convolution_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 33, scope: !7)
!13 = !DILocation(line: 27, column: 19, scope: !7)
!14 = !DILocation(line: 28, column: 30, scope: !7)
!15 = !DILocation(line: 28, column: 35, scope: !7)
!16 = !DILocation(line: 36, column: 48, scope: !7)
!17 = !DILocation(line: 32, column: 36, scope: !7)
!18 = !DILocation(line: 36, column: 38, scope: !7)
!19 = !DILocation(line: 36, column: 53, scope: !7)
!20 = !DILocation(line: 37, column: 22, scope: !7)
!21 = !DILocation(line: 42, column: 60, scope: !7)
!22 = !DILocation(line: 45, column: 53, scope: !7)
!23 = !DILocation(line: 36, column: 43, scope: !7)
!24 = !DILocation(line: 183, column: 24, scope: !25, inlinedAt: !27)
!25 = distinct !DILexicalBlockFile(scope: !7, file: !26, discriminator: 0)
!26 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!27 = !DILocation(line: 40, column: 51, scope: !7)
!28 = !DILocation(line: 44, column: 64, scope: !7)
!29 = !DILocation(line: 185, column: 34, scope: !25, inlinedAt: !27)
!30 = !DILocation(line: 185, column: 26, scope: !25, inlinedAt: !27)
!31 = !DILocation(line: 186, column: 39, scope: !25, inlinedAt: !27)
!32 = !DILocation(line: 186, column: 31, scope: !25, inlinedAt: !27)
!33 = !DILocation(line: 186, column: 22, scope: !25, inlinedAt: !27)
!34 = !DILocation(line: 43, column: 56, scope: !7)
!35 = !DILocation(line: 192, column: 21, scope: !36, inlinedAt: !37)
!36 = distinct !DILexicalBlockFile(scope: !25, file: !26, discriminator: 0)
!37 = !DILocation(line: 47, column: 41, scope: !7)
!38 = !DILocation(line: 193, column: 28, scope: !36, inlinedAt: !37)
!39 = !DILocation(line: 194, column: 39, scope: !36, inlinedAt: !37)
!40 = !DILocation(line: 194, column: 60, scope: !36, inlinedAt: !37)
!41 = !DILocation(line: 194, column: 49, scope: !36, inlinedAt: !37)
!42 = !DILocation(line: 196, column: 25, scope: !36, inlinedAt: !37)
!43 = !DILocation(line: 196, column: 17, scope: !36, inlinedAt: !37)
!44 = !DILocation(line: 197, column: 15, scope: !36, inlinedAt: !37)
!45 = !DILocation(line: 197, column: 30, scope: !36, inlinedAt: !37)
!46 = !DILocation(line: 197, column: 38, scope: !36, inlinedAt: !37)
!47 = !DILocation(line: 197, column: 49, scope: !36, inlinedAt: !37)
!48 = !DILocation(line: 197, column: 22, scope: !36, inlinedAt: !37)
!49 = !DILocation(line: 204, column: 46, scope: !25, inlinedAt: !37)
!50 = !DILocation(line: 52, column: 25, scope: !7)
!51 = !DILocation(line: 52, column: 36, scope: !7)
!52 = !DILocation(line: 54, column: 18, scope: !7)
!53 = !DILocation(line: 56, column: 19, scope: !7)
!54 = !DILocation(line: 57, column: 28, scope: !7)
!55 = !DILocation(line: 58, column: 4, scope: !7)
!56 = !DILocation(line: 59, column: 28, scope: !7)
!57 = !DILocation(line: 59, column: 40, scope: !7)
!58 = !DILocation(line: 59, column: 4, scope: !7)
