; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_convolution_mean_5(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %6 = shl i32 %5, 7, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 2, !dbg !12
  %9 = and i32 %8, 124, !dbg !12
  %10 = lshr i32 %7, 5, !dbg !12
  %11 = and i32 %7, 127, !dbg !12
  %12 = or disjoint i32 %6, %9, !dbg !13
  %13 = or disjoint i32 %6, %11, !dbg !13
  %14 = icmp slt i32 %12, 1024, !dbg !14
  %15 = icmp slt i32 %13, 1024, !dbg !14
  %.frozen = freeze i32 %12, !dbg !15
  %16 = sdiv i32 %.frozen, 256, !dbg !15
  %17 = mul i32 %16, 256, !dbg !16
  %.decomposed = sub i32 %.frozen, %17, !dbg !16
  %18 = shl i32 %10, 8, !dbg !17
  %19 = and i32 %18, 1792, !dbg !17
  %20 = shl i32 %16, 13, !dbg !18
  %21 = add i32 %20, %.decomposed, !dbg !19
  %22 = add i32 %21, %19, !dbg !20
  %23 = add i32 %21, 2048, !dbg !19
  %24 = add nuw i32 %23, %19, !dbg !20
  %25 = add i32 %21, 4096, !dbg !19
  %26 = add nuw i32 %25, %19, !dbg !20
  %27 = add i32 %21, 6144, !dbg !19
  %28 = add nuw i32 %27, %19, !dbg !20
  %29 = sext i32 %22 to i64, !dbg !21
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !21
  %31 = sext i32 %24 to i64, !dbg !21
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !21
  %33 = sext i32 %26 to i64, !dbg !21
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !21
  %35 = sext i32 %28 to i64, !dbg !21
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !21
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %30, i1 %14, i32 0, i1 %14, i32 0, i1 %14, i32 0, i1 %14, i32 0, i1 %14) #3, !dbg !22
  %38 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !22
  %39 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !22
  %40 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !22
  %41 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !22
  %42 = bitcast i32 %38 to float, !dbg !22
  %43 = bitcast i32 %39 to float, !dbg !22
  %44 = bitcast i32 %40 to float, !dbg !22
  %45 = bitcast i32 %41 to float, !dbg !22
  %46 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %32, i1 %14, i32 0, i1 %14, i32 0, i1 %14, i32 0, i1 %14, i32 0, i1 %14) #3, !dbg !22
  %47 = extractvalue { i32, i32, i32, i32 } %46, 0, !dbg !22
  %48 = extractvalue { i32, i32, i32, i32 } %46, 1, !dbg !22
  %49 = extractvalue { i32, i32, i32, i32 } %46, 2, !dbg !22
  %50 = extractvalue { i32, i32, i32, i32 } %46, 3, !dbg !22
  %51 = bitcast i32 %47 to float, !dbg !22
  %52 = bitcast i32 %48 to float, !dbg !22
  %53 = bitcast i32 %49 to float, !dbg !22
  %54 = bitcast i32 %50 to float, !dbg !22
  %55 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %34, i1 %14, i32 0, i1 %14, i32 0, i1 %14, i32 0, i1 %14, i32 0, i1 %14) #3, !dbg !22
  %56 = extractvalue { i32, i32, i32, i32 } %55, 0, !dbg !22
  %57 = extractvalue { i32, i32, i32, i32 } %55, 1, !dbg !22
  %58 = extractvalue { i32, i32, i32, i32 } %55, 2, !dbg !22
  %59 = extractvalue { i32, i32, i32, i32 } %55, 3, !dbg !22
  %60 = bitcast i32 %56 to float, !dbg !22
  %61 = bitcast i32 %57 to float, !dbg !22
  %62 = bitcast i32 %58 to float, !dbg !22
  %63 = bitcast i32 %59 to float, !dbg !22
  %64 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %36, i1 %14, i32 0, i1 %14, i32 0, i1 %14, i32 0, i1 %14, i32 0, i1 %14) #3, !dbg !22
  %65 = extractvalue { i32, i32, i32, i32 } %64, 0, !dbg !22
  %66 = extractvalue { i32, i32, i32, i32 } %64, 1, !dbg !22
  %67 = extractvalue { i32, i32, i32, i32 } %64, 2, !dbg !22
  %68 = extractvalue { i32, i32, i32, i32 } %64, 3, !dbg !22
  %69 = bitcast i32 %65 to float, !dbg !22
  %70 = bitcast i32 %66 to float, !dbg !22
  %71 = bitcast i32 %67 to float, !dbg !22
  %72 = bitcast i32 %68 to float, !dbg !22
  %73 = fadd float %42, %51, !dbg !23
  %74 = fadd float %43, %52, !dbg !23
  %75 = fadd float %44, %53, !dbg !23
  %76 = fadd float %45, %54, !dbg !23
  %77 = fadd float %73, %60, !dbg !23
  %78 = fadd float %74, %61, !dbg !23
  %79 = fadd float %75, %62, !dbg !23
  %80 = fadd float %76, %63, !dbg !23
  %81 = fadd float %77, %69, !dbg !23
  %82 = fadd float %78, %70, !dbg !23
  %83 = fadd float %79, %71, !dbg !23
  %84 = fadd float %80, %72, !dbg !23
  %85 = and i32 %10, 7, !dbg !28
  %86 = shl nuw nsw i32 %9, 3, !dbg !28
  %87 = or disjoint i32 %86, %85, !dbg !28
  %88 = getelementptr float, ptr addrspace(3) @global_smem, i32 %87, !dbg !28
  %89 = bitcast float %81 to i32, !dbg !28
  %90 = select i1 %14, i32 %89, i32 0, !dbg !23
  %91 = insertelement <1 x i32> poison, i32 %90, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %88, <1 x i32> %91, i1 true) #3, !dbg !28
  %92 = or disjoint i32 %86, 8, !dbg !28
  %93 = or disjoint i32 %92, %85, !dbg !28
  %94 = getelementptr float, ptr addrspace(3) @global_smem, i32 %93, !dbg !28
  %95 = bitcast float %82 to i32, !dbg !28
  %96 = select i1 %14, i32 %95, i32 0, !dbg !23
  %97 = insertelement <1 x i32> poison, i32 %96, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %94, <1 x i32> %97, i1 true) #3, !dbg !28
  %98 = or disjoint i32 %86, 16, !dbg !28
  %99 = or disjoint i32 %98, %85, !dbg !28
  %100 = getelementptr float, ptr addrspace(3) @global_smem, i32 %99, !dbg !28
  %101 = bitcast float %83 to i32, !dbg !28
  %102 = select i1 %14, i32 %101, i32 0, !dbg !23
  %103 = insertelement <1 x i32> poison, i32 %102, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %100, <1 x i32> %103, i1 true) #3, !dbg !28
  %104 = or disjoint i32 %86, 24, !dbg !28
  %105 = or disjoint i32 %104, %85, !dbg !28
  %106 = getelementptr float, ptr addrspace(3) @global_smem, i32 %105, !dbg !28
  %107 = bitcast float %84 to i32, !dbg !28
  %108 = select i1 %14, i32 %107, i32 0, !dbg !23
  %109 = insertelement <1 x i32> poison, i32 %108, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %106, <1 x i32> %109, i1 true) #3, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %110 = icmp slt i32 %7, 1024, !dbg !28
  %111 = getelementptr float, ptr addrspace(3) @global_smem, i32 %7, !dbg !28
  %112 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %111, i1 %110) #3, !dbg !28
  %113 = bitcast i32 %112 to float, !dbg !28
  %114 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %112, i32 4, i32 31), !dbg !28
  %115 = bitcast i32 %114 to float, !dbg !28
  %116 = fadd float %113, %115, !dbg !23
  %117 = bitcast float %116 to i32, !dbg !28
  %118 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %117, i32 2, i32 31), !dbg !28
  %119 = bitcast i32 %118 to float, !dbg !28
  %120 = fadd float %116, %119, !dbg !23
  %121 = bitcast float %120 to i32, !dbg !28
  %122 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %121, i32 1, i32 31), !dbg !28
  %123 = bitcast i32 %122 to float, !dbg !28
  %124 = fadd float %120, %123, !dbg !23
  %125 = and i32 %7, 7, !dbg !28
  %126 = icmp eq i32 %125, 0, !dbg !28
  %127 = and i1 %110, %126, !dbg !28
  %128 = bitcast float %124 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %111, <1 x i32> %128, i1 %127) #3, !dbg !28
  %129 = getelementptr i8, ptr addrspace(3) %111, i32 1024, !dbg !28
  %130 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %129, i1 %110) #3, !dbg !28
  %131 = bitcast i32 %130 to float, !dbg !28
  %132 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %130, i32 4, i32 31), !dbg !28
  %133 = bitcast i32 %132 to float, !dbg !28
  %134 = fadd float %131, %133, !dbg !23
  %135 = bitcast float %134 to i32, !dbg !28
  %136 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %135, i32 2, i32 31), !dbg !28
  %137 = bitcast i32 %136 to float, !dbg !28
  %138 = fadd float %134, %137, !dbg !23
  %139 = bitcast float %138 to i32, !dbg !28
  %140 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %139, i32 1, i32 31), !dbg !28
  %141 = bitcast i32 %140 to float, !dbg !28
  %142 = fadd float %138, %141, !dbg !23
  %143 = bitcast float %142 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %129, <1 x i32> %143, i1 %127) #3, !dbg !28
  %144 = getelementptr i8, ptr addrspace(3) %111, i32 2048, !dbg !28
  %145 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %144, i1 %110) #3, !dbg !28
  %146 = bitcast i32 %145 to float, !dbg !28
  %147 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %145, i32 4, i32 31), !dbg !28
  %148 = bitcast i32 %147 to float, !dbg !28
  %149 = fadd float %146, %148, !dbg !23
  %150 = bitcast float %149 to i32, !dbg !28
  %151 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %150, i32 2, i32 31), !dbg !28
  %152 = bitcast i32 %151 to float, !dbg !28
  %153 = fadd float %149, %152, !dbg !23
  %154 = bitcast float %153 to i32, !dbg !28
  %155 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %154, i32 1, i32 31), !dbg !28
  %156 = bitcast i32 %155 to float, !dbg !28
  %157 = fadd float %153, %156, !dbg !23
  %158 = bitcast float %157 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %144, <1 x i32> %158, i1 %127) #3, !dbg !28
  %159 = getelementptr i8, ptr addrspace(3) %111, i32 3072, !dbg !28
  %160 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %159, i1 %110) #3, !dbg !28
  %161 = bitcast i32 %160 to float, !dbg !28
  %162 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %160, i32 4, i32 31), !dbg !28
  %163 = bitcast i32 %162 to float, !dbg !28
  %164 = fadd float %161, %163, !dbg !23
  %165 = bitcast float %164 to i32, !dbg !28
  %166 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %165, i32 2, i32 31), !dbg !28
  %167 = bitcast i32 %166 to float, !dbg !28
  %168 = fadd float %164, %167, !dbg !23
  %169 = bitcast float %168 to i32, !dbg !28
  %170 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %169, i32 1, i32 31), !dbg !28
  %171 = bitcast i32 %170 to float, !dbg !28
  %172 = fadd float %168, %171, !dbg !23
  %173 = bitcast float %172 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %159, <1 x i32> %173, i1 %127) #3, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %174 = getelementptr float, ptr addrspace(3) @global_smem, i32 %86, !dbg !28
  %175 = load i32, ptr addrspace(3) %174, align 16, !dbg !28
  %176 = getelementptr float, ptr addrspace(3) @global_smem, i32 %92, !dbg !28
  %177 = load i32, ptr addrspace(3) %176, align 16, !dbg !28
  %178 = getelementptr float, ptr addrspace(3) @global_smem, i32 %98, !dbg !28
  %179 = load i32, ptr addrspace(3) %178, align 16, !dbg !28
  %180 = getelementptr float, ptr addrspace(3) @global_smem, i32 %104, !dbg !28
  %181 = load i32, ptr addrspace(3) %180, align 16, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %182 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %9, !dbg !29
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %182, i32 %175, i32 %177, i32 %179, i32 %181, i1 true) #3, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %183 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !29
  %184 = load i32, ptr addrspace(3) %183, align 4, !dbg !29
  %185 = sext i32 %13 to i64, !dbg !30
  %186 = getelementptr float, ptr addrspace(1) %1, i64 %185, !dbg !30
  %187 = and i32 %7, 128, !dbg !31
  %188 = icmp eq i32 %187, 0, !dbg !31
  %189 = and i1 %188, %15, !dbg !31
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %184, ptr addrspace(1) %186, i1 %189) #3, !dbg !31
  ret void, !dbg !32
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c7ahtqi6blhudzo6kbl2zsc26p42zjvnps3piqeqejtrr6gdwzbi.py", directory: "inductor_cache/7a")
!4 = !{ptr @triton_per_fused_convolution_mean_5, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_convolution_mean_5, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_convolution_mean_5", linkageName: "triton_per_fused_convolution_mean_5", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 31, column: 19, scope: !7)
!16 = !DILocation(line: 30, column: 19, scope: !7)
!17 = !DILocation(line: 33, column: 39, scope: !7)
!18 = !DILocation(line: 33, column: 49, scope: !7)
!19 = !DILocation(line: 33, column: 35, scope: !7)
!20 = !DILocation(line: 33, column: 44, scope: !7)
!21 = !DILocation(line: 33, column: 30, scope: !7)
!22 = !DILocation(line: 33, column: 54, scope: !7)
!23 = !DILocation(line: 256, column: 15, scope: !24, inlinedAt: !27)
!24 = distinct !DILexicalBlockFile(scope: !26, file: !25, discriminator: 0)
!25 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!26 = distinct !DILexicalBlockFile(scope: !7, file: !25, discriminator: 0)
!27 = !DILocation(line: 36, column: 24, scope: !7)
!28 = !DILocation(line: 267, column: 36, scope: !26, inlinedAt: !27)
!29 = !DILocation(line: 36, column: 27, scope: !7)
!30 = !DILocation(line: 37, column: 25, scope: !7)
!31 = !DILocation(line: 37, column: 36, scope: !7)
!32 = !DILocation(line: 37, column: 4, scope: !7)
