; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_red_fused_div_mse_loss_15(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %7 = icmp slt i32 %6, 32, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 2044, !dbg !12
  %11 = shl i32 %6, 13, !dbg !13
  %12 = or disjoint i32 %11, %10
  %13 = sext i32 %12 to i64, !dbg !14
  %14 = getelementptr float, ptr addrspace(1) %0, i64 %13, !dbg !15
  %15 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %14, i1 %7, i32 0, i1 %7, i32 0, i1 %7, i32 0, i1 %7, i32 0, i1 %7) #3, !dbg !16
  %16 = extractvalue { i32, i32, i32, i32 } %15, 0, !dbg !16
  %17 = extractvalue { i32, i32, i32, i32 } %15, 1, !dbg !16
  %18 = extractvalue { i32, i32, i32, i32 } %15, 2, !dbg !16
  %19 = extractvalue { i32, i32, i32, i32 } %15, 3, !dbg !16
  %20 = getelementptr float, ptr addrspace(1) %1, i64 %13, !dbg !17
  %21 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %20, i1 %7, i32 0, i1 %7, i32 0, i1 %7, i32 0, i1 %7, i32 0, i1 %7) #3, !dbg !18
  %22 = extractvalue { i32, i32, i32, i32 } %21, 0, !dbg !18
  %23 = extractvalue { i32, i32, i32, i32 } %21, 1, !dbg !18
  %24 = extractvalue { i32, i32, i32, i32 } %21, 2, !dbg !18
  %25 = extractvalue { i32, i32, i32, i32 } %21, 3, !dbg !18
  %26 = or disjoint i64 %13, 2048, !dbg !19
  %27 = getelementptr float, ptr addrspace(1) %0, i64 %26, !dbg !15
  %28 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %27, i1 %7, i32 0, i1 %7, i32 0, i1 %7, i32 0, i1 %7, i32 0, i1 %7) #3, !dbg !16
  %29 = extractvalue { i32, i32, i32, i32 } %28, 0, !dbg !16
  %30 = extractvalue { i32, i32, i32, i32 } %28, 1, !dbg !16
  %31 = extractvalue { i32, i32, i32, i32 } %28, 2, !dbg !16
  %32 = extractvalue { i32, i32, i32, i32 } %28, 3, !dbg !16
  %33 = getelementptr float, ptr addrspace(1) %1, i64 %26, !dbg !17
  %34 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %33, i1 %7, i32 0, i1 %7, i32 0, i1 %7, i32 0, i1 %7, i32 0, i1 %7) #3, !dbg !18
  %35 = extractvalue { i32, i32, i32, i32 } %34, 0, !dbg !18
  %36 = extractvalue { i32, i32, i32, i32 } %34, 1, !dbg !18
  %37 = extractvalue { i32, i32, i32, i32 } %34, 2, !dbg !18
  %38 = extractvalue { i32, i32, i32, i32 } %34, 3, !dbg !18
  %39 = or disjoint i64 %13, 4096, !dbg !19
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !15
  %41 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %40, i1 %7, i32 0, i1 %7, i32 0, i1 %7, i32 0, i1 %7, i32 0, i1 %7) #3, !dbg !16
  %42 = extractvalue { i32, i32, i32, i32 } %41, 0, !dbg !16
  %43 = extractvalue { i32, i32, i32, i32 } %41, 1, !dbg !16
  %44 = extractvalue { i32, i32, i32, i32 } %41, 2, !dbg !16
  %45 = extractvalue { i32, i32, i32, i32 } %41, 3, !dbg !16
  %46 = getelementptr float, ptr addrspace(1) %1, i64 %39, !dbg !17
  %47 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %46, i1 %7, i32 0, i1 %7, i32 0, i1 %7, i32 0, i1 %7, i32 0, i1 %7) #3, !dbg !18
  %48 = extractvalue { i32, i32, i32, i32 } %47, 0, !dbg !18
  %49 = extractvalue { i32, i32, i32, i32 } %47, 1, !dbg !18
  %50 = extractvalue { i32, i32, i32, i32 } %47, 2, !dbg !18
  %51 = extractvalue { i32, i32, i32, i32 } %47, 3, !dbg !18
  %52 = or disjoint i64 %13, 6144, !dbg !19
  %53 = getelementptr float, ptr addrspace(1) %0, i64 %52, !dbg !15
  %54 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %53, i1 %7, i32 0, i1 %7, i32 0, i1 %7, i32 0, i1 %7, i32 0, i1 %7) #3, !dbg !16
  %55 = extractvalue { i32, i32, i32, i32 } %54, 0, !dbg !16
  %56 = extractvalue { i32, i32, i32, i32 } %54, 1, !dbg !16
  %57 = extractvalue { i32, i32, i32, i32 } %54, 2, !dbg !16
  %58 = extractvalue { i32, i32, i32, i32 } %54, 3, !dbg !16
  %59 = getelementptr float, ptr addrspace(1) %1, i64 %52, !dbg !17
  %60 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %59, i1 %7, i32 0, i1 %7, i32 0, i1 %7, i32 0, i1 %7, i32 0, i1 %7) #3, !dbg !18
  %61 = extractvalue { i32, i32, i32, i32 } %60, 0, !dbg !18
  %62 = extractvalue { i32, i32, i32, i32 } %60, 1, !dbg !18
  %63 = extractvalue { i32, i32, i32, i32 } %60, 2, !dbg !18
  %64 = extractvalue { i32, i32, i32, i32 } %60, 3, !dbg !18
  %65 = insertelement <2 x i32> poison, i32 %16, i64 0, !dbg !16
  %66 = insertelement <2 x i32> %65, i32 %17, i64 1, !dbg !16
  %67 = bitcast <2 x i32> %66 to <2 x float>, !dbg !16
  %68 = insertelement <2 x i32> poison, i32 %22, i64 0, !dbg !18
  %69 = insertelement <2 x i32> %68, i32 %23, i64 1, !dbg !18
  %70 = bitcast <2 x i32> %69 to <2 x float>, !dbg !18
  %71 = fmul <2 x float> %67, splat (float 0x3EC0000000000000), !dbg !20
  %72 = fmul <2 x float> %70, splat (float 0x3EC0000000000000), !dbg !21
  %73 = fsub <2 x float> %71, %72, !dbg !22
  %74 = fmul <2 x float> %73, %73, !dbg !23
  %75 = insertelement <2 x i32> poison, i32 %29, i64 0, !dbg !16
  %76 = insertelement <2 x i32> %75, i32 %30, i64 1, !dbg !16
  %77 = bitcast <2 x i32> %76 to <2 x float>, !dbg !16
  %78 = insertelement <2 x i32> poison, i32 %35, i64 0, !dbg !18
  %79 = insertelement <2 x i32> %78, i32 %36, i64 1, !dbg !18
  %80 = bitcast <2 x i32> %79 to <2 x float>, !dbg !18
  %81 = fmul <2 x float> %77, splat (float 0x3EC0000000000000), !dbg !20
  %82 = fmul <2 x float> %80, splat (float 0x3EC0000000000000), !dbg !21
  %83 = fsub <2 x float> %81, %82, !dbg !22
  %84 = fmul <2 x float> %83, %83, !dbg !23
  %85 = fadd <2 x float> %74, %84, !dbg !24
  %86 = insertelement <2 x i32> poison, i32 %42, i64 0, !dbg !16
  %87 = insertelement <2 x i32> %86, i32 %43, i64 1, !dbg !16
  %88 = bitcast <2 x i32> %87 to <2 x float>, !dbg !16
  %89 = insertelement <2 x i32> poison, i32 %48, i64 0, !dbg !18
  %90 = insertelement <2 x i32> %89, i32 %49, i64 1, !dbg !18
  %91 = bitcast <2 x i32> %90 to <2 x float>, !dbg !18
  %92 = fmul <2 x float> %88, splat (float 0x3EC0000000000000), !dbg !20
  %93 = fmul <2 x float> %91, splat (float 0x3EC0000000000000), !dbg !21
  %94 = fsub <2 x float> %92, %93, !dbg !22
  %95 = fmul <2 x float> %94, %94, !dbg !23
  %96 = fadd <2 x float> %85, %95, !dbg !24
  %97 = insertelement <2 x i32> poison, i32 %55, i64 0, !dbg !16
  %98 = insertelement <2 x i32> %97, i32 %56, i64 1, !dbg !16
  %99 = bitcast <2 x i32> %98 to <2 x float>, !dbg !16
  %100 = insertelement <2 x i32> poison, i32 %61, i64 0, !dbg !18
  %101 = insertelement <2 x i32> %100, i32 %62, i64 1, !dbg !18
  %102 = bitcast <2 x i32> %101 to <2 x float>, !dbg !18
  %103 = fmul <2 x float> %99, splat (float 0x3EC0000000000000), !dbg !20
  %104 = fmul <2 x float> %102, splat (float 0x3EC0000000000000), !dbg !21
  %105 = fsub <2 x float> %103, %104, !dbg !22
  %106 = fmul <2 x float> %105, %105, !dbg !23
  %107 = fadd <2 x float> %96, %106, !dbg !24
  %108 = insertelement <2 x i32> poison, i32 %19, i64 0, !dbg !16
  %109 = insertelement <2 x i32> %108, i32 %18, i64 1, !dbg !16
  %110 = bitcast <2 x i32> %109 to <2 x float>, !dbg !16
  %111 = insertelement <2 x i32> poison, i32 %25, i64 0, !dbg !18
  %112 = insertelement <2 x i32> %111, i32 %24, i64 1, !dbg !18
  %113 = bitcast <2 x i32> %112 to <2 x float>, !dbg !18
  %114 = fmul <2 x float> %110, splat (float 0x3EC0000000000000), !dbg !20
  %115 = fmul <2 x float> %113, splat (float 0x3EC0000000000000), !dbg !21
  %116 = fsub <2 x float> %114, %115, !dbg !22
  %117 = fmul <2 x float> %116, %116, !dbg !23
  %118 = insertelement <2 x i32> poison, i32 %32, i64 0, !dbg !16
  %119 = insertelement <2 x i32> %118, i32 %31, i64 1, !dbg !16
  %120 = bitcast <2 x i32> %119 to <2 x float>, !dbg !16
  %121 = insertelement <2 x i32> poison, i32 %38, i64 0, !dbg !18
  %122 = insertelement <2 x i32> %121, i32 %37, i64 1, !dbg !18
  %123 = bitcast <2 x i32> %122 to <2 x float>, !dbg !18
  %124 = fmul <2 x float> %120, splat (float 0x3EC0000000000000), !dbg !20
  %125 = fmul <2 x float> %123, splat (float 0x3EC0000000000000), !dbg !21
  %126 = fsub <2 x float> %124, %125, !dbg !22
  %127 = fmul <2 x float> %126, %126, !dbg !23
  %128 = fadd <2 x float> %117, %127, !dbg !24
  %129 = insertelement <2 x i32> poison, i32 %45, i64 0, !dbg !16
  %130 = insertelement <2 x i32> %129, i32 %44, i64 1, !dbg !16
  %131 = bitcast <2 x i32> %130 to <2 x float>, !dbg !16
  %132 = insertelement <2 x i32> poison, i32 %51, i64 0, !dbg !18
  %133 = insertelement <2 x i32> %132, i32 %50, i64 1, !dbg !18
  %134 = bitcast <2 x i32> %133 to <2 x float>, !dbg !18
  %135 = fmul <2 x float> %131, splat (float 0x3EC0000000000000), !dbg !20
  %136 = fmul <2 x float> %134, splat (float 0x3EC0000000000000), !dbg !21
  %137 = fsub <2 x float> %135, %136, !dbg !22
  %138 = fmul <2 x float> %137, %137, !dbg !23
  %139 = fadd <2 x float> %128, %138, !dbg !24
  %140 = insertelement <2 x i32> poison, i32 %58, i64 0, !dbg !16
  %141 = insertelement <2 x i32> %140, i32 %57, i64 1, !dbg !16
  %142 = bitcast <2 x i32> %141 to <2 x float>, !dbg !16
  %143 = insertelement <2 x i32> poison, i32 %64, i64 0, !dbg !18
  %144 = insertelement <2 x i32> %143, i32 %63, i64 1, !dbg !18
  %145 = bitcast <2 x i32> %144 to <2 x float>, !dbg !18
  %146 = fmul <2 x float> %142, splat (float 0x3EC0000000000000), !dbg !20
  %147 = fmul <2 x float> %145, splat (float 0x3EC0000000000000), !dbg !21
  %148 = fsub <2 x float> %146, %147, !dbg !22
  %149 = fmul <2 x float> %148, %148, !dbg !23
  %150 = fadd <2 x float> %139, %149, !dbg !24
  %151 = lshr i32 %8, 5, !dbg !12
  %152 = and i32 %8, 31, !dbg !12
  %shift = shufflevector <2 x float> %107, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !25
  %153 = fadd <2 x float> %107, %shift, !dbg !25
  %shift4 = shufflevector <2 x float> %150, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !25
  %154 = fadd <2 x float> %shift4, %153, !dbg !25
  %155 = fadd <2 x float> %150, %154, !dbg !25
  %156 = extractelement <2 x float> %155, i64 0, !dbg !25
  %157 = select i1 %7, float %156, float 0.000000e+00, !dbg !25
  %158 = bitcast float %157 to i32, !dbg !30
  %159 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %158, i32 16, i32 31), !dbg !30
  %160 = bitcast i32 %159 to float, !dbg !30
  %161 = fadd float %157, %160, !dbg !25
  %162 = bitcast float %161 to i32, !dbg !30
  %163 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %162, i32 8, i32 31), !dbg !30
  %164 = bitcast i32 %163 to float, !dbg !30
  %165 = fadd float %161, %164, !dbg !25
  %166 = bitcast float %165 to i32, !dbg !30
  %167 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %166, i32 4, i32 31), !dbg !30
  %168 = bitcast i32 %167 to float, !dbg !30
  %169 = fadd float %165, %168, !dbg !25
  %170 = bitcast float %169 to i32, !dbg !30
  %171 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %170, i32 2, i32 31), !dbg !30
  %172 = bitcast i32 %171 to float, !dbg !30
  %173 = fadd float %169, %172, !dbg !25
  %174 = bitcast float %173 to i32, !dbg !30
  %175 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %174, i32 1, i32 31), !dbg !30
  %176 = bitcast i32 %175 to float, !dbg !30
  %177 = fadd float %173, %176, !dbg !25
  %178 = icmp eq i32 %152, 0, !dbg !30
  %179 = and i32 %151, 15, !dbg !30
  %180 = getelementptr float, ptr addrspace(3) @global_smem, i32 %179, !dbg !30
  %181 = bitcast float %177 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %180, <1 x i32> %181, i1 %178) #3, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %182 = icmp slt i32 %8, 16, !dbg !30
  %183 = getelementptr float, ptr addrspace(3) @global_smem, i32 %8, !dbg !30
  %184 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %183, i1 %182) #3, !dbg !30
  %185 = bitcast i32 %184 to float, !dbg !30
  %186 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %184, i32 8, i32 31), !dbg !30
  %187 = bitcast i32 %186 to float, !dbg !30
  %188 = fadd float %185, %187, !dbg !25
  %189 = bitcast float %188 to i32, !dbg !30
  %190 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %189, i32 4, i32 31), !dbg !30
  %191 = bitcast i32 %190 to float, !dbg !30
  %192 = fadd float %188, %191, !dbg !25
  %193 = bitcast float %192 to i32, !dbg !30
  %194 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %193, i32 2, i32 31), !dbg !30
  %195 = bitcast i32 %194 to float, !dbg !30
  %196 = fadd float %192, %195, !dbg !25
  %197 = bitcast float %196 to i32, !dbg !30
  %198 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %197, i32 1, i32 31), !dbg !30
  %199 = bitcast i32 %198 to float, !dbg !30
  %200 = fadd float %196, %199, !dbg !25
  %201 = and i32 %8, 15, !dbg !30
  %202 = icmp eq i32 %201, 0, !dbg !30
  %203 = and i1 %182, %202, !dbg !30
  %204 = bitcast float %200 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %183, <1 x i32> %204, i1 %203) #3, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %205 = load i32, ptr addrspace(3) @global_smem, align 16, !dbg !30
  %206 = sext i32 %6 to i64, !dbg !31
  %207 = getelementptr float, ptr addrspace(1) %2, i64 %206, !dbg !31
  %urem = and i32 %8, 511, !dbg !32
  %208 = icmp eq i32 %urem, 0, !dbg !32
  %209 = and i1 %208, %7, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %205, ptr addrspace(1) %207, i1 %209) #3, !dbg !32
  ret void, !dbg !33
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c3ltx74rqlpgf7ebroyvp6hm6qmrmuirz2ouxsomo5er5pp5skw2.py", directory: "inductor_cache/3l")
!4 = !{ptr @triton_red_fused_div_mse_loss_15, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_div_mse_loss_15, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_div_mse_loss_15", linkageName: "triton_red_fused_div_mse_loss_15", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 33, scope: !7)
!13 = !DILocation(line: 32, column: 44, scope: !7)
!14 = !DILocation(line: 28, column: 36, scope: !7)
!15 = !DILocation(line: 32, column: 34, scope: !7)
!16 = !DILocation(line: 32, column: 49, scope: !7)
!17 = !DILocation(line: 33, column: 34, scope: !7)
!18 = !DILocation(line: 33, column: 49, scope: !7)
!19 = !DILocation(line: 32, column: 39, scope: !7)
!20 = !DILocation(line: 35, column: 22, scope: !7)
!21 = !DILocation(line: 36, column: 22, scope: !7)
!22 = !DILocation(line: 37, column: 22, scope: !7)
!23 = !DILocation(line: 38, column: 22, scope: !7)
!24 = !DILocation(line: 40, column: 23, scope: !7)
!25 = !DILocation(line: 256, column: 15, scope: !26, inlinedAt: !29)
!26 = distinct !DILexicalBlockFile(scope: !28, file: !27, discriminator: 0)
!27 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!28 = distinct !DILexicalBlockFile(scope: !7, file: !27, discriminator: 0)
!29 = !DILocation(line: 42, column: 25, scope: !7)
!30 = !DILocation(line: 267, column: 36, scope: !28, inlinedAt: !29)
!31 = !DILocation(line: 43, column: 25, scope: !7)
!32 = !DILocation(line: 43, column: 36, scope: !7)
!33 = !DILocation(line: 43, column: 4, scope: !7)
