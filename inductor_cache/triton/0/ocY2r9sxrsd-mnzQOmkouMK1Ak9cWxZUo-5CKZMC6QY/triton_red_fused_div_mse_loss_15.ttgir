#blocked = #triton_gpu.blocked<{sizePerThread = [1, 4], threadsPerWarp = [1, 32], warpsPerCTA = [1, 16], order = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 16], order = [0, 1]}>
#loc = loc("inductor_cache/3l/c3ltx74rqlpgf7ebroyvp6hm6qmrmuirz2ouxsomo5er5pp5skw2.py":19:0)
#loc1 = loc(unknown)
#loc23 = loc("inductor_cache/3l/c3ltx74rqlpgf7ebroyvp6hm6qmrmuirz2ouxsomo5er5pp5skw2.py":42:25)
#loc30 = loc(callsite(#loc1 at #loc23))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 16 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_red_fused_div_mse_loss_15(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/3l/c3ltx74rqlpgf7ebroyvp6hm6qmrmuirz2ouxsomo5er5pp5skw2.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/3l/c3ltx74rqlpgf7ebroyvp6hm6qmrmuirz2ouxsomo5er5pp5skw2.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/3l/c3ltx74rqlpgf7ebroyvp6hm6qmrmuirz2ouxsomo5er5pp5skw2.py":19:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/3l/c3ltx74rqlpgf7ebroyvp6hm6qmrmuirz2ouxsomo5er5pp5skw2.py":19:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/3l/c3ltx74rqlpgf7ebroyvp6hm6qmrmuirz2ouxsomo5er5pp5skw2.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<1x2048xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<1.90734863E-6> : tensor<1x2048xf32, #blocked> loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %c8192_i32 = arith.constant 8192 : i32 loc(#loc1)
    %c2048_i32 = arith.constant 2048 : i32 loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %cst_1 = arith.constant dense<8192> : tensor<1x2048xi32, #blocked> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.cmpi slt, %0, %c32_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 2048 : i32, start = 0 : i32} : tensor<2048xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc4)
    %3 = tt.expand_dims %2 {axis = 0 : i32} : tensor<2048xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x2048xi32, #blocked> loc(#loc4)
    %4 = arith.muli %0, %c8192_i32 : i32 loc(#loc5)
    %5 = tt.splat %4 : i32 -> tensor<1x2048xi32, #blocked> loc(#loc6)
    %6 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1x2048x!tt.ptr<f32>, #blocked> loc(#loc7)
    %7 = tt.splat %1 : i1 -> tensor<1x2048xi1, #blocked> loc(#loc8)
    %8 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1x2048x!tt.ptr<f32>, #blocked> loc(#loc9)
    %9 = scf.for %arg5 = %c0_i32 to %c8192_i32 step %c2048_i32 iter_args(%arg6 = %cst) -> (tensor<1x2048xf32, #blocked>)  : i32 {
      %16 = tt.splat %arg5 : i32 -> tensor<1x2048xi32, #blocked> loc(#loc11)
      %17 = arith.addi %16, %3 : tensor<1x2048xi32, #blocked> loc(#loc11)
      %18 = arith.cmpi slt, %17, %cst_1 : tensor<1x2048xi32, #blocked> loc(#loc12)
      %19 = arith.addi %17, %5 : tensor<1x2048xi32, #blocked> loc(#loc6)
      %20 = tt.addptr %6, %19 : tensor<1x2048x!tt.ptr<f32>, #blocked>, tensor<1x2048xi32, #blocked> loc(#loc7)
      %21 = arith.andi %18, %7 : tensor<1x2048xi1, #blocked> loc(#loc8)
      %22 = tt.load %20, %21, %cst evictionPolicy = evict_first : tensor<1x2048x!tt.ptr<f32>, #blocked> loc(#loc13)
      %23 = tt.addptr %8, %19 : tensor<1x2048x!tt.ptr<f32>, #blocked>, tensor<1x2048xi32, #blocked> loc(#loc9)
      %24 = tt.load %23, %21, %cst evictionPolicy = evict_first : tensor<1x2048x!tt.ptr<f32>, #blocked> loc(#loc14)
      %25 = arith.mulf %22, %cst_0 : tensor<1x2048xf32, #blocked> loc(#loc15)
      %26 = arith.mulf %24, %cst_0 : tensor<1x2048xf32, #blocked> loc(#loc16)
      %27 = arith.subf %25, %26 : tensor<1x2048xf32, #blocked> loc(#loc17)
      %28 = arith.mulf %27, %27 : tensor<1x2048xf32, #blocked> loc(#loc18)
      %29 = arith.addf %arg6, %28 : tensor<1x2048xf32, #blocked> loc(#loc19)
      %30 = arith.select %21, %29, %arg6 : tensor<1x2048xi1, #blocked>, tensor<1x2048xf32, #blocked> loc(#loc20)
      scf.yield %30 : tensor<1x2048xf32, #blocked> loc(#loc21)
    } loc(#loc10)
    %10 = "tt.reduce"(%9) <{axis = 1 : i32}> ({
    ^bb0(%arg5: f32 loc(callsite(#loc1 at #loc23)), %arg6: f32 loc(callsite(#loc1 at #loc23))):
      %16 = arith.addf %arg5, %arg6 : f32 loc(#loc32)
      tt.reduce.return %16 : f32 loc(#loc29)
    }) : (tensor<1x2048xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc29)
    %11 = triton_gpu.convert_layout %10 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc25)
    %12 = tt.expand_dims %11 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<1x1xf32, #blocked1> loc(#loc25)
    %13 = tt.addptr %arg2, %0 : !tt.ptr<f32>, i32 loc(#loc26)
    %14 = tt.splat %13 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc27)
    %15 = tt.splat %1 : i1 -> tensor<1x1xi1, #blocked1> loc(#loc27)
    tt.store %14, %12, %15 : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc27)
    tt.return loc(#loc28)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/3l/c3ltx74rqlpgf7ebroyvp6hm6qmrmuirz2ouxsomo5er5pp5skw2.py":22:28)
#loc3 = loc("inductor_cache/3l/c3ltx74rqlpgf7ebroyvp6hm6qmrmuirz2ouxsomo5er5pp5skw2.py":24:21)
#loc4 = loc("inductor_cache/3l/c3ltx74rqlpgf7ebroyvp6hm6qmrmuirz2ouxsomo5er5pp5skw2.py":25:33)
#loc5 = loc("inductor_cache/3l/c3ltx74rqlpgf7ebroyvp6hm6qmrmuirz2ouxsomo5er5pp5skw2.py":32:44)
#loc6 = loc("inductor_cache/3l/c3ltx74rqlpgf7ebroyvp6hm6qmrmuirz2ouxsomo5er5pp5skw2.py":32:39)
#loc7 = loc("inductor_cache/3l/c3ltx74rqlpgf7ebroyvp6hm6qmrmuirz2ouxsomo5er5pp5skw2.py":32:34)
#loc8 = loc("inductor_cache/3l/c3ltx74rqlpgf7ebroyvp6hm6qmrmuirz2ouxsomo5er5pp5skw2.py":32:57)
#loc9 = loc("inductor_cache/3l/c3ltx74rqlpgf7ebroyvp6hm6qmrmuirz2ouxsomo5er5pp5skw2.py":33:34)
#loc10 = loc("inductor_cache/3l/c3ltx74rqlpgf7ebroyvp6hm6qmrmuirz2ouxsomo5er5pp5skw2.py":28:36)
#loc11 = loc("inductor_cache/3l/c3ltx74rqlpgf7ebroyvp6hm6qmrmuirz2ouxsomo5er5pp5skw2.py":29:27)
#loc12 = loc("inductor_cache/3l/c3ltx74rqlpgf7ebroyvp6hm6qmrmuirz2ouxsomo5er5pp5skw2.py":30:25)
#loc13 = loc("inductor_cache/3l/c3ltx74rqlpgf7ebroyvp6hm6qmrmuirz2ouxsomo5er5pp5skw2.py":32:49)
#loc14 = loc("inductor_cache/3l/c3ltx74rqlpgf7ebroyvp6hm6qmrmuirz2ouxsomo5er5pp5skw2.py":33:49)
#loc15 = loc("inductor_cache/3l/c3ltx74rqlpgf7ebroyvp6hm6qmrmuirz2ouxsomo5er5pp5skw2.py":35:22)
#loc16 = loc("inductor_cache/3l/c3ltx74rqlpgf7ebroyvp6hm6qmrmuirz2ouxsomo5er5pp5skw2.py":36:22)
#loc17 = loc("inductor_cache/3l/c3ltx74rqlpgf7ebroyvp6hm6qmrmuirz2ouxsomo5er5pp5skw2.py":37:22)
#loc18 = loc("inductor_cache/3l/c3ltx74rqlpgf7ebroyvp6hm6qmrmuirz2ouxsomo5er5pp5skw2.py":38:22)
#loc19 = loc("inductor_cache/3l/c3ltx74rqlpgf7ebroyvp6hm6qmrmuirz2ouxsomo5er5pp5skw2.py":40:23)
#loc20 = loc("inductor_cache/3l/c3ltx74rqlpgf7ebroyvp6hm6qmrmuirz2ouxsomo5er5pp5skw2.py":41:46)
#loc21 = loc("inductor_cache/3l/c3ltx74rqlpgf7ebroyvp6hm6qmrmuirz2ouxsomo5er5pp5skw2.py":41:8)
#loc22 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc24 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc25 = loc("inductor_cache/3l/c3ltx74rqlpgf7ebroyvp6hm6qmrmuirz2ouxsomo5er5pp5skw2.py":42:28)
#loc26 = loc("inductor_cache/3l/c3ltx74rqlpgf7ebroyvp6hm6qmrmuirz2ouxsomo5er5pp5skw2.py":43:25)
#loc27 = loc("inductor_cache/3l/c3ltx74rqlpgf7ebroyvp6hm6qmrmuirz2ouxsomo5er5pp5skw2.py":43:36)
#loc28 = loc("inductor_cache/3l/c3ltx74rqlpgf7ebroyvp6hm6qmrmuirz2ouxsomo5er5pp5skw2.py":43:4)
#loc29 = loc(callsite(#loc22 at #loc23))
#loc31 = loc(callsite(#loc24 at #loc22))
#loc32 = loc(callsite(#loc31 at #loc23))
