; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %10 = shl i32 %9, 8, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 1, !dbg !12
  %13 = and i32 %12, 254, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = sdiv i32 %14, 16, !dbg !14
  %16 = srem i32 %15, 64, !dbg !15
  %17 = sext i32 %14 to i64, !dbg !16
  %18 = getelementptr float, ptr addrspace(1) %0, i64 %17, !dbg !16
  %19 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %18, i1 true) #3, !dbg !17
  %20 = getelementptr float, ptr addrspace(1) %1, i64 %17, !dbg !18
  %21 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %20, i1 true) #3, !dbg !19
  %22 = sext i32 %16 to i64, !dbg !20
  %23 = getelementptr float, ptr addrspace(1) %2, i64 %22, !dbg !20
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 true) #3, !dbg !21
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 true) #3, !dbg !21
  %26 = getelementptr float, ptr addrspace(1) %3, i64 %22, !dbg !22
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 true) #3, !dbg !23
  %28 = bitcast i32 %27 to float, !dbg !23
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 true) #3, !dbg !23
  %30 = bitcast i32 %29 to float, !dbg !23
  %31 = getelementptr float, ptr addrspace(1) %4, i64 %22, !dbg !24
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 true) #3, !dbg !25
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 true) #3, !dbg !25
  %34 = getelementptr float, ptr addrspace(1) %5, i64 %22, !dbg !26
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #3, !dbg !27
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #3, !dbg !27
  %37 = fadd float %28, 0x3EE4F8B580000000, !dbg !28
  %38 = fadd float %30, 0x3EE4F8B580000000, !dbg !28
  %39 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i = icmp eq i32 %39, 0, !dbg !29
  %40 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i = icmp eq i32 %40, 0, !dbg !29
  br i1 %.not.i, label %46, label %41, !dbg !29

41:                                               ; preds = %8
  br i1 %.not1.i, label %44, label %42, !dbg !29

42:                                               ; preds = %41
  %43 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %37) #3, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

44:                                               ; preds = %41
  %45 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %37) #3, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

46:                                               ; preds = %8
  br i1 %.not1.i, label %49, label %47, !dbg !29

47:                                               ; preds = %46
  %48 = tail call float @llvm.nvvm.sqrt.rn.f(float %37) #3, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

49:                                               ; preds = %46
  %50 = tail call float @llvm.nvvm.sqrt.approx.f(float %37) #3, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

__nv_sqrtf.exit:                                  ; preds = %42, %44, %47, %49
  %.0.i = phi float [ %43, %42 ], [ %45, %44 ], [ %48, %47 ], [ %50, %49 ], !dbg !29
  %51 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i1 = icmp eq i32 %51, 0, !dbg !29
  %52 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i4 = icmp eq i32 %52, 0, !dbg !29
  br i1 %.not.i1, label %58, label %53, !dbg !29

53:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %56, label %54, !dbg !29

54:                                               ; preds = %53
  %55 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %38) #3, !dbg !29
  br label %__nv_sqrtf.exit5, !dbg !29

56:                                               ; preds = %53
  %57 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %38) #3, !dbg !29
  br label %__nv_sqrtf.exit5, !dbg !29

58:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %61, label %59, !dbg !29

59:                                               ; preds = %58
  %60 = tail call float @llvm.nvvm.sqrt.rn.f(float %38) #3, !dbg !29
  br label %__nv_sqrtf.exit5, !dbg !29

61:                                               ; preds = %58
  %62 = tail call float @llvm.nvvm.sqrt.approx.f(float %38) #3, !dbg !29
  br label %__nv_sqrtf.exit5, !dbg !29

__nv_sqrtf.exit5:                                 ; preds = %54, %56, %59, %61
  %.0.i3 = phi float [ %55, %54 ], [ %57, %56 ], [ %60, %59 ], [ %62, %61 ], !dbg !29
  %63 = extractvalue { i32, i32 } %21, 1, !dbg !19
  %64 = bitcast i32 %63 to float, !dbg !19
  %65 = bitcast i32 %25 to float, !dbg !21
  %66 = fsub float %64, %65, !dbg !30
  %67 = extractvalue { i32, i32 } %21, 0, !dbg !19
  %68 = bitcast i32 %67 to float, !dbg !19
  %69 = bitcast i32 %24 to float, !dbg !21
  %70 = fsub float %68, %69, !dbg !30
  %71 = bitcast i32 %36 to float, !dbg !27
  %72 = bitcast i32 %35 to float, !dbg !27
  %73 = bitcast i32 %33 to float, !dbg !25
  %74 = bitcast i32 %32 to float, !dbg !25
  %75 = extractvalue { i32, i32 } %19, 1, !dbg !17
  %76 = bitcast i32 %75 to float, !dbg !17
  %77 = extractvalue { i32, i32 } %19, 0, !dbg !17
  %78 = bitcast i32 %77 to float, !dbg !17
  %79 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !31
  %80 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !31
  %81 = fmul float %70, %79, !dbg !32
  %82 = fmul float %66, %80, !dbg !32
  %83 = fmul float %81, %74, !dbg !33
  %84 = fmul float %82, %73, !dbg !33
  %85 = fadd float %83, %72, !dbg !34
  %86 = fadd float %84, %71, !dbg !34
  %87 = fadd float %85, %78, !dbg !35
  %88 = fadd float %86, %76, !dbg !35
  %89 = getelementptr float, ptr addrspace(1) %6, i64 %17, !dbg !36
  %90 = bitcast float %87 to i32, !dbg !37
  %91 = bitcast float %88 to i32, !dbg !37
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %90, i32 %91, ptr addrspace(1) %89, i1 true) #3, !dbg !37
  ret void, !dbg !38
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c6gfn4ftwqaquh3fpiseuqyhao2yg5dpq3fllvw45oprhabocnld.py", directory: "inductor_cache/6g")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_8, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_8, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_8", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_8", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 27, scope: !7)
!16 = !DILocation(line: 26, column: 30, scope: !7)
!17 = !DILocation(line: 26, column: 35, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 35, scope: !7)
!20 = !DILocation(line: 28, column: 30, scope: !7)
!21 = !DILocation(line: 28, column: 35, scope: !7)
!22 = !DILocation(line: 29, column: 30, scope: !7)
!23 = !DILocation(line: 29, column: 35, scope: !7)
!24 = !DILocation(line: 30, column: 31, scope: !7)
!25 = !DILocation(line: 30, column: 36, scope: !7)
!26 = !DILocation(line: 31, column: 31, scope: !7)
!27 = !DILocation(line: 31, column: 36, scope: !7)
!28 = !DILocation(line: 34, column: 18, scope: !7)
!29 = !DILocation(line: 35, column: 26, scope: !7)
!30 = !DILocation(line: 32, column: 18, scope: !7)
!31 = !DILocation(line: 37, column: 18, scope: !7)
!32 = !DILocation(line: 40, column: 19, scope: !7)
!33 = !DILocation(line: 41, column: 20, scope: !7)
!34 = !DILocation(line: 42, column: 20, scope: !7)
!35 = !DILocation(line: 43, column: 19, scope: !7)
!36 = !DILocation(line: 44, column: 25, scope: !7)
!37 = !DILocation(line: 44, column: 37, scope: !7)
!38 = !DILocation(line: 44, column: 4, scope: !7)
