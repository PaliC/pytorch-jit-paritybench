; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_cat_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, ptr addrspace(1) %16, ptr addrspace(1) %17, ptr addrspace(1) %18, ptr addrspace(1) %19, ptr addrspace(1) %20, i32 %21) local_unnamed_addr !dbg !7 {
  %23 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %24 = shl i32 %23, 7, !dbg !11
  %25 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %26 = and i32 %25, 127, !dbg !12
  %27 = or disjoint i32 %24, %26, !dbg !13
  %28 = icmp slt i32 %27, 256, !dbg !14
  %.frozen = freeze i32 %27, !dbg !15
  %29 = sdiv i32 %.frozen, 4, !dbg !15
  %30 = srem i32 %29, 16, !dbg !16
  %31 = mul i32 %29, 4, !dbg !17
  %.decomposed = sub i32 %.frozen, %31, !dbg !17
  %.frozen16 = freeze i32 %27, !dbg !18
  %32 = sdiv i32 %.frozen16, 64, !dbg !18
  %33 = icmp slt i32 %30, 4, !dbg !19
  %34 = mul i32 %32, 64, !dbg !20
  %srem.decomposed = sub i32 %.frozen16, %34, !dbg !20
  %35 = shl nsw i32 %32, 4, !dbg !21
  %36 = add nsw i32 %35, %srem.decomposed, !dbg !22
  %37 = sext i32 %36 to i64, !dbg !23
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !23
  %39 = and i1 %28, %33, !dbg !24
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %38, i1 %39, i32 0, i1 %39) #3, !dbg !25
  %41 = sext i32 %30 to i64, !dbg !26
  %42 = getelementptr float, ptr addrspace(1) %1, i64 %41, !dbg !26
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %42, i1 %39, i32 0, i1 %39) #3, !dbg !27
  %44 = getelementptr float, ptr addrspace(1) %2, i64 %41, !dbg !28
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %44, i1 %39, i32 0, i1 %39) #3, !dbg !29
  %46 = bitcast i32 %45 to float, !dbg !29
  %47 = fadd float %46, 0x3EE4F8B580000000, !dbg !30
  %48 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %.not.i = icmp eq i32 %48, 0, !dbg !31
  %49 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !31
  %.not1.i = icmp eq i32 %49, 0, !dbg !31
  br i1 %.not.i, label %55, label %50, !dbg !31

50:                                               ; preds = %22
  br i1 %.not1.i, label %53, label %51, !dbg !31

51:                                               ; preds = %50
  %52 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %47) #3, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

53:                                               ; preds = %50
  %54 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %47) #3, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

55:                                               ; preds = %22
  br i1 %.not1.i, label %58, label %56, !dbg !31

56:                                               ; preds = %55
  %57 = tail call float @llvm.nvvm.sqrt.rn.f(float %47) #3, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

58:                                               ; preds = %55
  %59 = tail call float @llvm.nvvm.sqrt.approx.f(float %47) #3, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

__nv_sqrtf.exit:                                  ; preds = %51, %53, %56, %58
  %.0.i = phi float [ %52, %51 ], [ %54, %53 ], [ %57, %56 ], [ %59, %58 ], !dbg !31
  %60 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !32
  %61 = getelementptr float, ptr addrspace(1) %3, i64 %41, !dbg !33
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %61, i1 %39, i32 0, i1 %39) #3, !dbg !34
  %63 = getelementptr float, ptr addrspace(1) %4, i64 %41, !dbg !35
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %63, i1 %39, i32 0, i1 %39) #3, !dbg !36
  %65 = and i32 %30, -4, !dbg !37
  %66 = icmp eq i32 %65, 4, !dbg !37
  %67 = add nsw i32 %30, -4, !dbg !38
  %68 = mul nsw i32 %67, 5, !dbg !39
  %69 = mul nsw i32 %32, 20, !dbg !40
  %70 = add nsw i32 %69, %.decomposed, !dbg !41
  %71 = add nsw i32 %70, %68, !dbg !42
  %72 = sext i32 %71 to i64, !dbg !43
  %73 = getelementptr float, ptr addrspace(1) %5, i64 %72, !dbg !43
  %74 = and i1 %28, %66, !dbg !44
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %73, i1 %74, i32 0, i1 %74) #3, !dbg !45
  %76 = sext i32 %67 to i64, !dbg !46
  %77 = getelementptr float, ptr addrspace(1) %6, i64 %76, !dbg !46
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %77, i1 %74, i32 0, i1 %74) #3, !dbg !47
  %79 = getelementptr float, ptr addrspace(1) %7, i64 %76, !dbg !48
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %79, i1 %74, i32 0, i1 %74) #3, !dbg !49
  %81 = bitcast i32 %80 to float, !dbg !49
  %82 = fadd float %81, 0x3EE4F8B580000000, !dbg !50
  %83 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !51
  %.not.i1 = icmp eq i32 %83, 0, !dbg !51
  %84 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !51
  %.not1.i4 = icmp eq i32 %84, 0, !dbg !51
  br i1 %.not.i1, label %90, label %85, !dbg !51

85:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %88, label %86, !dbg !51

86:                                               ; preds = %85
  %87 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %82) #3, !dbg !51
  br label %__nv_sqrtf.exit5, !dbg !51

88:                                               ; preds = %85
  %89 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %82) #3, !dbg !51
  br label %__nv_sqrtf.exit5, !dbg !51

90:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %93, label %91, !dbg !51

91:                                               ; preds = %90
  %92 = tail call float @llvm.nvvm.sqrt.rn.f(float %82) #3, !dbg !51
  br label %__nv_sqrtf.exit5, !dbg !51

93:                                               ; preds = %90
  %94 = tail call float @llvm.nvvm.sqrt.approx.f(float %82) #3, !dbg !51
  br label %__nv_sqrtf.exit5, !dbg !51

__nv_sqrtf.exit5:                                 ; preds = %86, %88, %91, %93
  %.0.i3 = phi float [ %87, %86 ], [ %89, %88 ], [ %92, %91 ], [ %94, %93 ], !dbg !51
  %95 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !52
  %96 = getelementptr float, ptr addrspace(1) %8, i64 %76, !dbg !53
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %96, i1 %74, i32 0, i1 %74) #3, !dbg !54
  %98 = getelementptr float, ptr addrspace(1) %9, i64 %76, !dbg !55
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %98, i1 %74, i32 0, i1 %74) #3, !dbg !56
  %100 = icmp eq i32 %65, 8, !dbg !57
  %101 = add nsw i32 %30, -8, !dbg !58
  %102 = shl nsw i32 %101, 2, !dbg !59
  %103 = add nsw i32 %35, %.decomposed, !dbg !60
  %104 = add nsw i32 %103, %102, !dbg !61
  %105 = sext i32 %104 to i64, !dbg !62
  %106 = getelementptr float, ptr addrspace(1) %10, i64 %105, !dbg !62
  %107 = and i1 %28, %100, !dbg !63
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %106, i1 %107, i32 0, i1 %107) #3, !dbg !64
  %109 = sext i32 %101 to i64, !dbg !65
  %110 = getelementptr float, ptr addrspace(1) %11, i64 %109, !dbg !65
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %110, i1 %107, i32 0, i1 %107) #3, !dbg !66
  %112 = getelementptr float, ptr addrspace(1) %12, i64 %109, !dbg !67
  %113 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %112, i1 %107, i32 0, i1 %107) #3, !dbg !68
  %114 = bitcast i32 %113 to float, !dbg !68
  %115 = fadd float %114, 0x3EE4F8B580000000, !dbg !69
  %116 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !70
  %.not.i6 = icmp eq i32 %116, 0, !dbg !70
  %117 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !70
  %.not1.i9 = icmp eq i32 %117, 0, !dbg !70
  br i1 %.not.i6, label %123, label %118, !dbg !70

118:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %121, label %119, !dbg !70

119:                                              ; preds = %118
  %120 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %115) #3, !dbg !70
  br label %__nv_sqrtf.exit10, !dbg !70

121:                                              ; preds = %118
  %122 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %115) #3, !dbg !70
  br label %__nv_sqrtf.exit10, !dbg !70

123:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %126, label %124, !dbg !70

124:                                              ; preds = %123
  %125 = tail call float @llvm.nvvm.sqrt.rn.f(float %115) #3, !dbg !70
  br label %__nv_sqrtf.exit10, !dbg !70

126:                                              ; preds = %123
  %127 = tail call float @llvm.nvvm.sqrt.approx.f(float %115) #3, !dbg !70
  br label %__nv_sqrtf.exit10, !dbg !70

__nv_sqrtf.exit10:                                ; preds = %119, %121, %124, %126
  %.0.i8 = phi float [ %120, %119 ], [ %122, %121 ], [ %125, %124 ], [ %127, %126 ], !dbg !70
  %128 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !71
  %129 = getelementptr float, ptr addrspace(1) %13, i64 %109, !dbg !72
  %130 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %129, i1 %107, i32 0, i1 %107) #3, !dbg !73
  %131 = getelementptr float, ptr addrspace(1) %14, i64 %109, !dbg !74
  %132 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %131, i1 %107, i32 0, i1 %107) #3, !dbg !75
  %133 = icmp sgt i32 %30, 11, !dbg !76
  %134 = add nsw i32 %30, -12, !dbg !77
  %135 = mul nsw i32 %134, 5, !dbg !78
  %136 = add nsw i32 %70, %135, !dbg !79
  %137 = sext i32 %136 to i64, !dbg !80
  %138 = getelementptr float, ptr addrspace(1) %15, i64 %137, !dbg !80
  %139 = and i1 %28, %133, !dbg !81
  %140 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %138, i1 %139, i32 0, i1 %139) #3, !dbg !82
  %141 = sext i32 %134 to i64, !dbg !83
  %142 = getelementptr float, ptr addrspace(1) %16, i64 %141, !dbg !83
  %143 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %142, i1 %139, i32 0, i1 %139) #3, !dbg !84
  %144 = getelementptr float, ptr addrspace(1) %17, i64 %141, !dbg !85
  %145 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %144, i1 %139, i32 0, i1 %139) #3, !dbg !86
  %146 = bitcast i32 %145 to float, !dbg !86
  %147 = fadd float %146, 0x3EE4F8B580000000, !dbg !87
  %148 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !88
  %.not.i11 = icmp eq i32 %148, 0, !dbg !88
  %149 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !88
  %.not1.i14 = icmp eq i32 %149, 0, !dbg !88
  br i1 %.not.i11, label %155, label %150, !dbg !88

150:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %153, label %151, !dbg !88

151:                                              ; preds = %150
  %152 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %147) #3, !dbg !88
  br label %__nv_sqrtf.exit15, !dbg !88

153:                                              ; preds = %150
  %154 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %147) #3, !dbg !88
  br label %__nv_sqrtf.exit15, !dbg !88

155:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %158, label %156, !dbg !88

156:                                              ; preds = %155
  %157 = tail call float @llvm.nvvm.sqrt.rn.f(float %147) #3, !dbg !88
  br label %__nv_sqrtf.exit15, !dbg !88

158:                                              ; preds = %155
  %159 = tail call float @llvm.nvvm.sqrt.approx.f(float %147) #3, !dbg !88
  br label %__nv_sqrtf.exit15, !dbg !88

__nv_sqrtf.exit15:                                ; preds = %151, %153, %156, %158
  %.0.i13 = phi float [ %152, %151 ], [ %154, %153 ], [ %157, %156 ], [ %159, %158 ], !dbg !88
  %160 = bitcast i32 %140 to float, !dbg !82
  %161 = fcmp olt float %160, 0.000000e+00, !dbg !89
  %162 = select i1 %161, float 0.000000e+00, float %160, !dbg !93
  %163 = bitcast i32 %143 to float, !dbg !84
  %164 = fsub float %162, %163, !dbg !94
  %165 = bitcast i32 %108 to float, !dbg !64
  %166 = fcmp olt float %165, 0.000000e+00, !dbg !95
  %167 = select i1 %166, float 0.000000e+00, float %165, !dbg !97
  %168 = bitcast i32 %111 to float, !dbg !66
  %169 = fsub float %167, %168, !dbg !98
  %170 = fmul float %169, %128, !dbg !99
  %171 = bitcast i32 %130 to float, !dbg !73
  %172 = fmul float %170, %171, !dbg !100
  %173 = bitcast i32 %132 to float, !dbg !75
  %174 = fadd float %172, %173, !dbg !101
  %175 = bitcast i32 %75 to float, !dbg !45
  %176 = fcmp olt float %175, 0.000000e+00, !dbg !102
  %177 = select i1 %176, float 0.000000e+00, float %175, !dbg !104
  %178 = bitcast i32 %78 to float, !dbg !47
  %179 = fsub float %177, %178, !dbg !105
  %180 = fmul float %179, %95, !dbg !106
  %181 = bitcast i32 %97 to float, !dbg !54
  %182 = fmul float %180, %181, !dbg !107
  %183 = bitcast i32 %99 to float, !dbg !56
  %184 = fadd float %182, %183, !dbg !108
  %185 = bitcast i32 %40 to float, !dbg !25
  %186 = fcmp olt float %185, 0.000000e+00, !dbg !109
  %187 = select i1 %186, float 0.000000e+00, float %185, !dbg !111
  %188 = bitcast i32 %43 to float, !dbg !27
  %189 = fsub float %187, %188, !dbg !112
  %190 = fmul float %189, %60, !dbg !113
  %191 = bitcast i32 %62 to float, !dbg !34
  %192 = fmul float %190, %191, !dbg !114
  %193 = bitcast i32 %64 to float, !dbg !36
  %194 = fadd float %192, %193, !dbg !115
  %195 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !116
  %196 = fmul float %164, %195, !dbg !117
  %197 = getelementptr float, ptr addrspace(1) %18, i64 %141, !dbg !118
  %198 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %197, i1 %139, i32 0, i1 %139) #3, !dbg !119
  %199 = bitcast i32 %198 to float, !dbg !119
  %200 = fmul float %196, %199, !dbg !120
  %201 = getelementptr float, ptr addrspace(1) %19, i64 %141, !dbg !121
  %202 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %201, i1 %139, i32 0, i1 %139) #3, !dbg !122
  %203 = bitcast i32 %202 to float, !dbg !122
  %204 = fadd float %200, %203, !dbg !123
  %205 = select i1 %133, float %204, float 0.000000e+00, !dbg !124
  %206 = select i1 %100, float %174, float %205, !dbg !125
  %207 = select i1 %66, float %184, float %206, !dbg !125
  %208 = select i1 %33, float %194, float %207, !dbg !125
  %209 = sext i32 %27 to i64, !dbg !126
  %210 = getelementptr float, ptr addrspace(1) %20, i64 %209, !dbg !126
  %211 = bitcast float %208 to i32, !dbg !127
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %211, ptr addrspace(1) %210, i1 %28) #3, !dbg !127
  ret void, !dbg !128
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ctkkuixdjqehf6zrajyszwukynyevenue3m6yujkessnyru7s4lc.py", directory: "inductor_cache/tk")
!4 = !{ptr @triton_poi_fused_cat_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_0, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_0", linkageName: "triton_poi_fused_cat_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 26, scope: !7)
!17 = !DILocation(line: 25, column: 19, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 32, column: 18, scope: !7)
!20 = !DILocation(line: 33, column: 35, scope: !7)
!21 = !DILocation(line: 33, column: 47, scope: !7)
!22 = !DILocation(line: 33, column: 44, scope: !7)
!23 = !DILocation(line: 33, column: 30, scope: !7)
!24 = !DILocation(line: 33, column: 59, scope: !7)
!25 = !DILocation(line: 33, column: 52, scope: !7)
!26 = !DILocation(line: 36, column: 30, scope: !7)
!27 = !DILocation(line: 36, column: 35, scope: !7)
!28 = !DILocation(line: 38, column: 31, scope: !7)
!29 = !DILocation(line: 38, column: 36, scope: !7)
!30 = !DILocation(line: 40, column: 20, scope: !7)
!31 = !DILocation(line: 41, column: 27, scope: !7)
!32 = !DILocation(line: 43, column: 20, scope: !7)
!33 = !DILocation(line: 47, column: 31, scope: !7)
!34 = !DILocation(line: 47, column: 36, scope: !7)
!35 = !DILocation(line: 49, column: 31, scope: !7)
!36 = !DILocation(line: 49, column: 36, scope: !7)
!37 = !DILocation(line: 56, column: 20, scope: !7)
!38 = !DILocation(line: 57, column: 46, scope: !7)
!39 = !DILocation(line: 57, column: 39, scope: !7)
!40 = !DILocation(line: 57, column: 55, scope: !7)
!41 = !DILocation(line: 57, column: 36, scope: !7)
!42 = !DILocation(line: 57, column: 52, scope: !7)
!43 = !DILocation(line: 57, column: 31, scope: !7)
!44 = !DILocation(line: 57, column: 68, scope: !7)
!45 = !DILocation(line: 57, column: 60, scope: !7)
!46 = !DILocation(line: 60, column: 31, scope: !7)
!47 = !DILocation(line: 60, column: 43, scope: !7)
!48 = !DILocation(line: 62, column: 31, scope: !7)
!49 = !DILocation(line: 62, column: 43, scope: !7)
!50 = !DILocation(line: 64, column: 20, scope: !7)
!51 = !DILocation(line: 65, column: 27, scope: !7)
!52 = !DILocation(line: 67, column: 20, scope: !7)
!53 = !DILocation(line: 71, column: 31, scope: !7)
!54 = !DILocation(line: 71, column: 43, scope: !7)
!55 = !DILocation(line: 73, column: 31, scope: !7)
!56 = !DILocation(line: 73, column: 43, scope: !7)
!57 = !DILocation(line: 80, column: 20, scope: !7)
!58 = !DILocation(line: 81, column: 47, scope: !7)
!59 = !DILocation(line: 81, column: 40, scope: !7)
!60 = !DILocation(line: 81, column: 37, scope: !7)
!61 = !DILocation(line: 81, column: 53, scope: !7)
!62 = !DILocation(line: 81, column: 32, scope: !7)
!63 = !DILocation(line: 81, column: 69, scope: !7)
!64 = !DILocation(line: 81, column: 61, scope: !7)
!65 = !DILocation(line: 84, column: 32, scope: !7)
!66 = !DILocation(line: 84, column: 44, scope: !7)
!67 = !DILocation(line: 86, column: 32, scope: !7)
!68 = !DILocation(line: 86, column: 44, scope: !7)
!69 = !DILocation(line: 88, column: 20, scope: !7)
!70 = !DILocation(line: 89, column: 27, scope: !7)
!71 = !DILocation(line: 91, column: 20, scope: !7)
!72 = !DILocation(line: 95, column: 32, scope: !7)
!73 = !DILocation(line: 95, column: 44, scope: !7)
!74 = !DILocation(line: 97, column: 32, scope: !7)
!75 = !DILocation(line: 97, column: 44, scope: !7)
!76 = !DILocation(line: 101, column: 20, scope: !7)
!77 = !DILocation(line: 104, column: 48, scope: !7)
!78 = !DILocation(line: 104, column: 40, scope: !7)
!79 = !DILocation(line: 104, column: 54, scope: !7)
!80 = !DILocation(line: 104, column: 32, scope: !7)
!81 = !DILocation(line: 104, column: 70, scope: !7)
!82 = !DILocation(line: 104, column: 62, scope: !7)
!83 = !DILocation(line: 107, column: 32, scope: !7)
!84 = !DILocation(line: 107, column: 45, scope: !7)
!85 = !DILocation(line: 109, column: 32, scope: !7)
!86 = !DILocation(line: 109, column: 45, scope: !7)
!87 = !DILocation(line: 111, column: 20, scope: !7)
!88 = !DILocation(line: 112, column: 27, scope: !7)
!89 = !DILocation(line: 118, column: 15, scope: !90, inlinedAt: !92)
!90 = distinct !DILexicalBlockFile(scope: !7, file: !91, discriminator: 0)
!91 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!92 = !DILocation(line: 106, column: 42, scope: !7)
!93 = !DILocation(line: 121, column: 29, scope: !90, inlinedAt: !92)
!94 = !DILocation(line: 108, column: 20, scope: !7)
!95 = !DILocation(line: 118, column: 15, scope: !90, inlinedAt: !96)
!96 = !DILocation(line: 83, column: 42, scope: !7)
!97 = !DILocation(line: 121, column: 29, scope: !90, inlinedAt: !96)
!98 = !DILocation(line: 85, column: 20, scope: !7)
!99 = !DILocation(line: 94, column: 20, scope: !7)
!100 = !DILocation(line: 96, column: 20, scope: !7)
!101 = !DILocation(line: 98, column: 20, scope: !7)
!102 = !DILocation(line: 118, column: 15, scope: !90, inlinedAt: !103)
!103 = !DILocation(line: 59, column: 42, scope: !7)
!104 = !DILocation(line: 121, column: 29, scope: !90, inlinedAt: !103)
!105 = !DILocation(line: 61, column: 20, scope: !7)
!106 = !DILocation(line: 70, column: 20, scope: !7)
!107 = !DILocation(line: 72, column: 20, scope: !7)
!108 = !DILocation(line: 74, column: 20, scope: !7)
!109 = !DILocation(line: 118, column: 15, scope: !90, inlinedAt: !110)
!110 = !DILocation(line: 35, column: 40, scope: !7)
!111 = !DILocation(line: 121, column: 29, scope: !90, inlinedAt: !110)
!112 = !DILocation(line: 37, column: 18, scope: !7)
!113 = !DILocation(line: 46, column: 19, scope: !7)
!114 = !DILocation(line: 48, column: 20, scope: !7)
!115 = !DILocation(line: 50, column: 20, scope: !7)
!116 = !DILocation(line: 114, column: 20, scope: !7)
!117 = !DILocation(line: 117, column: 20, scope: !7)
!118 = !DILocation(line: 118, column: 32, scope: !7)
!119 = !DILocation(line: 118, column: 45, scope: !7)
!120 = !DILocation(line: 119, column: 20, scope: !7)
!121 = !DILocation(line: 120, column: 32, scope: !7)
!122 = !DILocation(line: 120, column: 45, scope: !7)
!123 = !DILocation(line: 121, column: 20, scope: !7)
!124 = !DILocation(line: 123, column: 35, scope: !7)
!125 = !DILocation(line: 0, scope: !7)
!126 = !DILocation(line: 127, column: 25, scope: !7)
!127 = !DILocation(line: 127, column: 37, scope: !7)
!128 = !DILocation(line: 127, column: 4, scope: !7)
