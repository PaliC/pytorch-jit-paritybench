; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused__weight_norm_interface_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %8 = shl i32 %7, 3, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = lshr i32 %9, 4, !dbg !12
  %11 = and i32 %10, 3, !dbg !12
  %12 = or disjoint i32 %11, 4, !dbg !12
  %13 = and i32 %9, 7, !dbg !12
  %14 = or disjoint i32 %8, %11, !dbg !13
  %15 = or disjoint i32 %8, %12, !dbg !13
  %16 = icmp slt i32 %14, 128, !dbg !14
  %17 = icmp slt i32 %15, 128, !dbg !14
  %18 = and i32 %9, 15, !dbg !15
  %19 = icmp ne i32 %18, 15, !dbg !16
  %20 = mul i32 %14, 15, !dbg !17
  %21 = mul i32 %15, 15, !dbg !17
  %22 = add i32 %20, %18, !dbg !18
  %23 = add i32 %21, %18, !dbg !18
  %24 = sext i32 %22 to i64, !dbg !19
  %25 = getelementptr float, ptr addrspace(1) %1, i64 %24, !dbg !19
  %26 = sext i32 %23 to i64, !dbg !19
  %27 = getelementptr float, ptr addrspace(1) %1, i64 %26, !dbg !19
  %28 = and i1 %19, %16, !dbg !20
  %29 = and i1 %19, %17, !dbg !20
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %25, i1 %28, i32 0, i1 %28) #5, !dbg !21
  %31 = bitcast i32 %30 to float, !dbg !21
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %27, i1 %29, i32 0, i1 %29) #5, !dbg !21
  %33 = bitcast i32 %32 to float, !dbg !21
  %34 = sext i32 %14 to i64, !dbg !22
  %35 = getelementptr float, ptr addrspace(1) %2, i64 %34, !dbg !22
  %36 = sext i32 %15 to i64, !dbg !22
  %37 = getelementptr float, ptr addrspace(1) %2, i64 %36, !dbg !22
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 %16) #5, !dbg !23
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %17) #5, !dbg !23
  %40 = fmul float %31, %31, !dbg !24
  %41 = fmul float %33, %33, !dbg !24
  %42 = select i1 %28, float %40, float 0.000000e+00, !dbg !25
  %43 = select i1 %29, float %41, float 0.000000e+00, !dbg !25
  %44 = bitcast float %42 to i32, !dbg !26
  %45 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %44, i32 8, i32 31), !dbg !26
  %46 = bitcast i32 %45 to float, !dbg !26
  %47 = fadd float %42, %46, !dbg !30
  %48 = bitcast float %47 to i32, !dbg !26
  %49 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %48, i32 4, i32 31), !dbg !26
  %50 = bitcast i32 %49 to float, !dbg !26
  %51 = fadd float %47, %50, !dbg !30
  %52 = bitcast float %51 to i32, !dbg !26
  %53 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %52, i32 2, i32 31), !dbg !26
  %54 = bitcast i32 %53 to float, !dbg !26
  %55 = fadd float %51, %54, !dbg !30
  %56 = bitcast float %55 to i32, !dbg !26
  %57 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %56, i32 1, i32 31), !dbg !26
  %58 = bitcast i32 %57 to float, !dbg !26
  %59 = fadd float %55, %58, !dbg !30
  %60 = bitcast float %43 to i32, !dbg !26
  %61 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %60, i32 8, i32 31), !dbg !26
  %62 = bitcast i32 %61 to float, !dbg !26
  %63 = fadd float %43, %62, !dbg !30
  %64 = bitcast float %63 to i32, !dbg !26
  %65 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %64, i32 4, i32 31), !dbg !26
  %66 = bitcast i32 %65 to float, !dbg !26
  %67 = fadd float %63, %66, !dbg !30
  %68 = bitcast float %67 to i32, !dbg !26
  %69 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %68, i32 2, i32 31), !dbg !26
  %70 = bitcast i32 %69 to float, !dbg !26
  %71 = fadd float %67, %70, !dbg !30
  %72 = bitcast float %71 to i32, !dbg !26
  %73 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %72, i32 1, i32 31), !dbg !26
  %74 = bitcast i32 %73 to float, !dbg !26
  %75 = fadd float %71, %74, !dbg !30
  %76 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !32
  %77 = bitcast float %59 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %76, <1 x i32> %77, i1 true) #5, !dbg !32
  %78 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !32
  %79 = bitcast float %75 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %78, <1 x i32> %79, i1 true) #5, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %80 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !32
  %81 = load float, ptr addrspace(3) %80, align 4, !dbg !32
  %82 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !32
  %.not.i = icmp eq i32 %82, 0, !dbg !32
  %83 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !32
  %.not1.i = icmp eq i32 %83, 0, !dbg !32
  br i1 %.not.i, label %89, label %84, !dbg !32

84:                                               ; preds = %6
  br i1 %.not1.i, label %87, label %85, !dbg !32

85:                                               ; preds = %84
  %86 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %81) #5, !dbg !32
  br label %__nv_sqrtf.exit, !dbg !32

87:                                               ; preds = %84
  %88 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %81) #5, !dbg !32
  br label %__nv_sqrtf.exit, !dbg !32

89:                                               ; preds = %6
  br i1 %.not1.i, label %92, label %90, !dbg !32

90:                                               ; preds = %89
  %91 = tail call float @llvm.nvvm.sqrt.rn.f(float %81) #5, !dbg !32
  br label %__nv_sqrtf.exit, !dbg !32

92:                                               ; preds = %89
  %93 = tail call float @llvm.nvvm.sqrt.approx.f(float %81) #5, !dbg !32
  br label %__nv_sqrtf.exit, !dbg !32

__nv_sqrtf.exit:                                  ; preds = %85, %87, %90, %92
  %.0.i = phi float [ %86, %85 ], [ %88, %87 ], [ %91, %90 ], [ %93, %92 ], !dbg !32
  %94 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !32
  %.not.i1 = icmp eq i32 %94, 0, !dbg !32
  %95 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !32
  %.not1.i4 = icmp eq i32 %95, 0, !dbg !32
  br i1 %.not.i1, label %101, label %96, !dbg !32

96:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %99, label %97, !dbg !32

97:                                               ; preds = %96
  %98 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %59) #5, !dbg !32
  br label %__nv_sqrtf.exit5, !dbg !32

99:                                               ; preds = %96
  %100 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %59) #5, !dbg !32
  br label %__nv_sqrtf.exit5, !dbg !32

101:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %104, label %102, !dbg !32

102:                                              ; preds = %101
  %103 = tail call float @llvm.nvvm.sqrt.rn.f(float %59) #5, !dbg !32
  br label %__nv_sqrtf.exit5, !dbg !32

104:                                              ; preds = %101
  %105 = tail call float @llvm.nvvm.sqrt.approx.f(float %59) #5, !dbg !32
  br label %__nv_sqrtf.exit5, !dbg !32

__nv_sqrtf.exit5:                                 ; preds = %97, %99, %102, %104
  %.0.i3 = phi float [ %98, %97 ], [ %100, %99 ], [ %103, %102 ], [ %105, %104 ], !dbg !32
  %106 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !32
  %.not.i6 = icmp eq i32 %106, 0, !dbg !32
  %107 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !32
  %.not1.i9 = icmp eq i32 %107, 0, !dbg !32
  br i1 %.not.i6, label %113, label %108, !dbg !32

108:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %111, label %109, !dbg !32

109:                                              ; preds = %108
  %110 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %75) #5, !dbg !32
  br label %__nv_sqrtf.exit10, !dbg !32

111:                                              ; preds = %108
  %112 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %75) #5, !dbg !32
  br label %__nv_sqrtf.exit10, !dbg !32

113:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %116, label %114, !dbg !32

114:                                              ; preds = %113
  %115 = tail call float @llvm.nvvm.sqrt.rn.f(float %75) #5, !dbg !32
  br label %__nv_sqrtf.exit10, !dbg !32

116:                                              ; preds = %113
  %117 = tail call float @llvm.nvvm.sqrt.approx.f(float %75) #5, !dbg !32
  br label %__nv_sqrtf.exit10, !dbg !32

__nv_sqrtf.exit10:                                ; preds = %109, %111, %114, %116
  %.0.i8 = phi float [ %110, %109 ], [ %112, %111 ], [ %115, %114 ], [ %117, %116 ], !dbg !32
  %118 = bitcast i32 %39 to float, !dbg !23
  %119 = bitcast i32 %38 to float, !dbg !23
  %120 = or disjoint i32 %8, %13, !dbg !13
  %121 = icmp slt i32 %120, 128, !dbg !14
  %122 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %119, float %.0.i3) #5, !dbg !33
  %123 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %118, float %.0.i8) #5, !dbg !33
  %124 = fmul float %122, %31, !dbg !34
  %125 = fmul float %123, %33, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %126 = sext i32 %120 to i64, !dbg !36
  %127 = getelementptr float, ptr addrspace(1) %0, i64 %126, !dbg !36
  %128 = and i32 %9, 56, !dbg !37
  %129 = icmp eq i32 %128, 0, !dbg !37
  %130 = bitcast float %.0.i to i32, !dbg !37
  %131 = and i1 %129, %121, !dbg !37
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %130, ptr addrspace(1) %127, i1 %131) #5, !dbg !37
  %132 = getelementptr float, ptr addrspace(1) %3, i64 %24, !dbg !38
  %133 = getelementptr float, ptr addrspace(1) %3, i64 %26, !dbg !38
  %134 = bitcast float %124 to i32, !dbg !39
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %134, ptr addrspace(1) %132, i1 %28) #5, !dbg !39
  %135 = bitcast float %125 to i32, !dbg !39
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %135, ptr addrspace(1) %133, i1 %29) #5, !dbg !39
  ret void, !dbg !40
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cz3z234fjtvgi6rocfmtfzhkseczfncbhgeh7qky3evfj2pin7gh.py", directory: "inductor_cache/z3")
!4 = !{ptr @triton_per_fused__weight_norm_interface_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__weight_norm_interface_0, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__weight_norm_interface_0", linkageName: "triton_per_fused__weight_norm_interface_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 28, column: 21, scope: !7)
!17 = !DILocation(line: 31, column: 38, scope: !7)
!18 = !DILocation(line: 31, column: 35, scope: !7)
!19 = !DILocation(line: 31, column: 30, scope: !7)
!20 = !DILocation(line: 31, column: 51, scope: !7)
!21 = !DILocation(line: 31, column: 43, scope: !7)
!22 = !DILocation(line: 32, column: 30, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 33, column: 18, scope: !7)
!25 = !DILocation(line: 35, column: 41, scope: !7)
!26 = !DILocation(line: 267, column: 36, scope: !27, inlinedAt: !29)
!27 = distinct !DILexicalBlockFile(scope: !7, file: !28, discriminator: 0)
!28 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!29 = !DILocation(line: 36, column: 24, scope: !7)
!30 = !DILocation(line: 256, column: 15, scope: !31, inlinedAt: !29)
!31 = distinct !DILexicalBlockFile(scope: !27, file: !28, discriminator: 0)
!32 = !DILocation(line: 37, column: 26, scope: !7)
!33 = !DILocation(line: 38, column: 18, scope: !7)
!34 = !DILocation(line: 39, column: 18, scope: !7)
!35 = !DILocation(line: 40, column: 4, scope: !7)
!36 = !DILocation(line: 41, column: 28, scope: !7)
!37 = !DILocation(line: 41, column: 39, scope: !7)
!38 = !DILocation(line: 42, column: 25, scope: !7)
!39 = !DILocation(line: 42, column: 44, scope: !7)
!40 = !DILocation(line: 42, column: 4, scope: !7)
