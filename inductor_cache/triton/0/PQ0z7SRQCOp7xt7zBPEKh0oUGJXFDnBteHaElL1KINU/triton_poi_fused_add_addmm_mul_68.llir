; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_add_addmm_mul_68(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %9 = shl i32 %8, 9, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 2, !dbg !12
  %12 = and i32 %11, 508, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %.frozen = freeze i32 %13, !dbg !14
  %14 = sdiv i32 %.frozen, 512, !dbg !14
  %15 = srem i32 %14, 18, !dbg !15
  %16 = mul i32 %14, 512, !dbg !16
  %.decomposed = sub i32 %.frozen, %16, !dbg !16
  %17 = sdiv i32 %13, 9216, !dbg !17
  %18 = shl nsw i32 %17, 9, !dbg !18
  %19 = add nsw i32 %18, %.decomposed, !dbg !19
  %20 = sext i32 %19 to i64, !dbg !20
  %21 = getelementptr float, ptr addrspace(1) %0, i64 %20, !dbg !20
  %22 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %21, i1 true) #1, !dbg !21
  %23 = extractvalue { i32, i32, i32, i32 } %22, 0, !dbg !21
  %24 = extractvalue { i32, i32, i32, i32 } %22, 1, !dbg !21
  %25 = extractvalue { i32, i32, i32, i32 } %22, 2, !dbg !21
  %26 = extractvalue { i32, i32, i32, i32 } %22, 3, !dbg !21
  %27 = getelementptr float, ptr addrspace(1) %1, i64 %20, !dbg !22
  %28 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %27, i1 true) #1, !dbg !23
  %29 = extractvalue { i32, i32, i32, i32 } %28, 0, !dbg !23
  %30 = extractvalue { i32, i32, i32, i32 } %28, 1, !dbg !23
  %31 = extractvalue { i32, i32, i32, i32 } %28, 2, !dbg !23
  %32 = extractvalue { i32, i32, i32, i32 } %28, 3, !dbg !23
  %33 = getelementptr float, ptr addrspace(1) %2, i64 %20, !dbg !24
  %34 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %33, i1 true) #1, !dbg !25
  %35 = extractvalue { i32, i32, i32, i32 } %34, 0, !dbg !25
  %36 = extractvalue { i32, i32, i32, i32 } %34, 1, !dbg !25
  %37 = extractvalue { i32, i32, i32, i32 } %34, 2, !dbg !25
  %38 = extractvalue { i32, i32, i32, i32 } %34, 3, !dbg !25
  %39 = bitcast i32 %35 to float, !dbg !25
  %40 = bitcast i32 %36 to float, !dbg !25
  %41 = bitcast i32 %37 to float, !dbg !25
  %42 = bitcast i32 %38 to float, !dbg !25
  %43 = getelementptr float, ptr addrspace(1) %3, i64 %20, !dbg !26
  %44 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %43, i1 true) #1, !dbg !27
  %45 = extractvalue { i32, i32, i32, i32 } %44, 0, !dbg !27
  %46 = extractvalue { i32, i32, i32, i32 } %44, 1, !dbg !27
  %47 = extractvalue { i32, i32, i32, i32 } %44, 2, !dbg !27
  %48 = extractvalue { i32, i32, i32, i32 } %44, 3, !dbg !27
  %49 = bitcast i32 %45 to float, !dbg !27
  %50 = bitcast i32 %46 to float, !dbg !27
  %51 = bitcast i32 %47 to float, !dbg !27
  %52 = bitcast i32 %48 to float, !dbg !27
  %53 = sext i32 %.decomposed to i64, !dbg !28
  %54 = getelementptr float, ptr addrspace(1) %4, i64 %53, !dbg !28
  %55 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %54, i1 true) #1, !dbg !29
  %56 = extractvalue { i32, i32, i32, i32 } %55, 0, !dbg !29
  %57 = extractvalue { i32, i32, i32, i32 } %55, 1, !dbg !29
  %58 = extractvalue { i32, i32, i32, i32 } %55, 2, !dbg !29
  %59 = extractvalue { i32, i32, i32, i32 } %55, 3, !dbg !29
  %60 = bitcast i32 %56 to float, !dbg !29
  %61 = bitcast i32 %57 to float, !dbg !29
  %62 = bitcast i32 %58 to float, !dbg !29
  %63 = bitcast i32 %59 to float, !dbg !29
  %64 = icmp eq i32 %15, 3, !dbg !30
  %65 = icmp eq i32 %15, 2, !dbg !31
  %66 = fadd float %49, %60, !dbg !32
  %67 = fadd float %50, %61, !dbg !32
  %68 = fadd float %51, %62, !dbg !32
  %69 = fadd float %52, %63, !dbg !32
  %70 = fadd float %66, %39, !dbg !33
  %71 = fadd float %67, %40, !dbg !33
  %72 = fadd float %68, %41, !dbg !33
  %73 = fadd float %69, %42, !dbg !33
  %74 = icmp eq i32 %15, 1, !dbg !34
  %75 = sext i32 %13 to i64, !dbg !35
  %76 = getelementptr float, ptr addrspace(1) %5, i64 %75, !dbg !35
  %77 = bitcast float %70 to i32, !dbg !36
  %78 = select i1 %74, i32 %77, i32 %35, !dbg !37
  %79 = select i1 %65, i32 %29, i32 %78, !dbg !37
  %80 = select i1 %64, i32 %23, i32 %79, !dbg !38
  %81 = bitcast float %71 to i32, !dbg !36
  %82 = select i1 %74, i32 %81, i32 %36, !dbg !37
  %83 = select i1 %65, i32 %30, i32 %82, !dbg !37
  %84 = select i1 %64, i32 %24, i32 %83, !dbg !38
  %85 = bitcast float %72 to i32, !dbg !36
  %86 = select i1 %74, i32 %85, i32 %37, !dbg !37
  %87 = select i1 %65, i32 %31, i32 %86, !dbg !37
  %88 = select i1 %64, i32 %25, i32 %87, !dbg !38
  %89 = bitcast float %73 to i32, !dbg !36
  %90 = select i1 %74, i32 %89, i32 %38, !dbg !37
  %91 = select i1 %65, i32 %32, i32 %90, !dbg !37
  %92 = select i1 %64, i32 %26, i32 %91, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %80, i32 %84, i32 %88, i32 %92, ptr addrspace(1) %76, i1 true) #1, !dbg !36
  ret void, !dbg !39
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cxgshkcqhykyjksvlqizzvy2xhe7ask3sild3nbhsmdkk2dp4ni3.py", directory: "inductor_cache/xg")
!4 = !{ptr @triton_poi_fused_add_addmm_mul_68, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_addmm_mul_68, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_addmm_mul_68", linkageName: "triton_poi_fused_add_addmm_mul_68", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 39, scope: !7)
!19 = !DILocation(line: 28, column: 35, scope: !7)
!20 = !DILocation(line: 28, column: 30, scope: !7)
!21 = !DILocation(line: 28, column: 44, scope: !7)
!22 = !DILocation(line: 29, column: 30, scope: !7)
!23 = !DILocation(line: 29, column: 44, scope: !7)
!24 = !DILocation(line: 30, column: 31, scope: !7)
!25 = !DILocation(line: 30, column: 45, scope: !7)
!26 = !DILocation(line: 31, column: 31, scope: !7)
!27 = !DILocation(line: 31, column: 45, scope: !7)
!28 = !DILocation(line: 32, column: 31, scope: !7)
!29 = !DILocation(line: 32, column: 36, scope: !7)
!30 = !DILocation(line: 35, column: 19, scope: !7)
!31 = !DILocation(line: 37, column: 19, scope: !7)
!32 = !DILocation(line: 44, column: 20, scope: !7)
!33 = !DILocation(line: 45, column: 20, scope: !7)
!34 = !DILocation(line: 50, column: 20, scope: !7)
!35 = !DILocation(line: 56, column: 25, scope: !7)
!36 = !DILocation(line: 56, column: 37, scope: !7)
!37 = !DILocation(line: 0, scope: !7)
!38 = !DILocation(line: 55, column: 33, scope: !7)
!39 = !DILocation(line: 56, column: 4, scope: !7)
