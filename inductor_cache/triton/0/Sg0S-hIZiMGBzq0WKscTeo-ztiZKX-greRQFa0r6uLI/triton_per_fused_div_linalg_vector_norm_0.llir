; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused_div_linalg_vector_norm_0(ptr addrspace(1) %0, i32 %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !10
  %5 = icmp slt i32 %4, 4, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = and i32 %6, 15, !dbg !12
  %8 = shl i32 %4, 4, !dbg !13
  %9 = or disjoint i32 %8, %7, !dbg !14
  %10 = sext i32 %9 to i64, !dbg !15
  %11 = getelementptr float, ptr addrspace(1) %0, i64 %10, !dbg !15
  %12 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %11, i1 %5, i32 0, i1 %5) #4, !dbg !16
  %13 = bitcast i32 %12 to float, !dbg !16
  %14 = fmul float %13, 6.250000e-02, !dbg !17
  %15 = fcmp ogt float %14, 0.000000e+00, !dbg !18
  %16 = zext i1 %15 to i8, !dbg !19
  %17 = fcmp olt float %14, 0.000000e+00, !dbg !20
  %.neg = sext i1 %17 to i8, !dbg !21
  %18 = add nsw i8 %.neg, %16, !dbg !22
  %19 = sitofp i8 %18 to float, !dbg !23
  %20 = tail call float @llvm.fabs.f32(float %14), !dbg !24
  %21 = fadd float %20, 0x3E45798EE0000000, !dbg !25
  %22 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !26
  %.not.i = icmp eq i32 %22, 0, !dbg !26
  %23 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !26
  %.not1.i = icmp eq i32 %23, 0, !dbg !26
  br i1 %.not.i, label %29, label %24, !dbg !26

24:                                               ; preds = %3
  br i1 %.not1.i, label %27, label %25, !dbg !26

25:                                               ; preds = %24
  %26 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %21) #4, !dbg !26
  br label %__nv_sqrtf.exit, !dbg !26

27:                                               ; preds = %24
  %28 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %21) #4, !dbg !26
  br label %__nv_sqrtf.exit, !dbg !26

29:                                               ; preds = %3
  br i1 %.not1.i, label %32, label %30, !dbg !26

30:                                               ; preds = %29
  %31 = tail call float @llvm.nvvm.sqrt.rn.f(float %21) #4, !dbg !26
  br label %__nv_sqrtf.exit, !dbg !26

32:                                               ; preds = %29
  %33 = tail call float @llvm.nvvm.sqrt.approx.f(float %21) #4, !dbg !26
  br label %__nv_sqrtf.exit, !dbg !26

__nv_sqrtf.exit:                                  ; preds = %25, %27, %30, %32
  %.0.i = phi float [ %26, %25 ], [ %28, %27 ], [ %31, %30 ], [ %33, %32 ], !dbg !26
  %34 = fmul float %.0.i, %19, !dbg !27
  %35 = fmul float %34, %34, !dbg !28
  %36 = select i1 %5, float %35, float 0.000000e+00, !dbg !29
  %37 = bitcast float %36 to i32, !dbg !30
  %38 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %37, i32 8, i32 31), !dbg !30
  %39 = bitcast i32 %38 to float, !dbg !30
  %40 = fadd float %36, %39, !dbg !34
  %41 = bitcast float %40 to i32, !dbg !30
  %42 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %41, i32 4, i32 31), !dbg !30
  %43 = bitcast i32 %42 to float, !dbg !30
  %44 = fadd float %40, %43, !dbg !34
  %45 = bitcast float %44 to i32, !dbg !30
  %46 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %45, i32 2, i32 31), !dbg !30
  %47 = bitcast i32 %46 to float, !dbg !30
  %48 = fadd float %44, %47, !dbg !34
  %49 = bitcast float %48 to i32, !dbg !30
  %50 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %49, i32 1, i32 31), !dbg !30
  %51 = bitcast i32 %50 to float, !dbg !30
  %52 = fadd float %48, %51, !dbg !34
  %53 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i1 = icmp eq i32 %53, 0, !dbg !36
  %54 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i4 = icmp eq i32 %54, 0, !dbg !36
  br i1 %.not.i1, label %60, label %55, !dbg !36

55:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %58, label %56, !dbg !36

56:                                               ; preds = %55
  %57 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %52) #4, !dbg !36
  br label %__nv_sqrtf.exit5, !dbg !36

58:                                               ; preds = %55
  %59 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %52) #4, !dbg !36
  br label %__nv_sqrtf.exit5, !dbg !36

60:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %63, label %61, !dbg !36

61:                                               ; preds = %60
  %62 = tail call float @llvm.nvvm.sqrt.rn.f(float %52) #4, !dbg !36
  br label %__nv_sqrtf.exit5, !dbg !36

63:                                               ; preds = %60
  %64 = tail call float @llvm.nvvm.sqrt.approx.f(float %52) #4, !dbg !36
  br label %__nv_sqrtf.exit5, !dbg !36

__nv_sqrtf.exit5:                                 ; preds = %56, %58, %61, %63
  %.0.i3 = phi float [ %57, %56 ], [ %59, %58 ], [ %62, %61 ], [ %64, %63 ], !dbg !36
  %65 = fcmp ogt float %.0.i3, 0x3D71979980000000, !dbg !37
  %66 = fcmp uno float %.0.i3, 0.000000e+00, !dbg !41
  %67 = or i1 %65, %66, !dbg !42
  %68 = select i1 %67, float %.0.i3, float 0x3D71979980000000, !dbg !43
  %69 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %34, float %68) #4, !dbg !44
  %70 = and i32 %6, 48, !dbg !45
  %71 = icmp eq i32 %70, 0, !dbg !45
  %72 = bitcast float %69 to i32, !dbg !45
  %73 = and i1 %71, %5, !dbg !45
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %72, ptr addrspace(1) %11, i1 %73) #4, !dbg !45
  ret void, !dbg !46
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.fabs.f32(float) #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "celv3xg7ou7ykxnufxx3vv3tpj6w6kaoirt7k7ccemdhmglqzvwc.py", directory: "inductor_cache/el")
!4 = !{ptr @triton_per_fused_div_linalg_vector_norm_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_div_linalg_vector_norm_0, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_div_linalg_vector_norm_0", linkageName: "triton_per_fused_div_linalg_vector_norm_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 21, scope: !7)
!12 = !DILocation(line: 26, column: 34, scope: !7)
!13 = !DILocation(line: 31, column: 42, scope: !7)
!14 = !DILocation(line: 31, column: 39, scope: !7)
!15 = !DILocation(line: 31, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 47, scope: !7)
!17 = !DILocation(line: 33, column: 18, scope: !7)
!18 = !DILocation(line: 35, column: 18, scope: !7)
!19 = !DILocation(line: 36, column: 19, scope: !7)
!20 = !DILocation(line: 37, column: 18, scope: !7)
!21 = !DILocation(line: 38, column: 19, scope: !7)
!22 = !DILocation(line: 39, column: 18, scope: !7)
!23 = !DILocation(line: 40, column: 19, scope: !7)
!24 = !DILocation(line: 41, column: 24, scope: !7)
!25 = !DILocation(line: 43, column: 20, scope: !7)
!26 = !DILocation(line: 44, column: 27, scope: !7)
!27 = !DILocation(line: 45, column: 19, scope: !7)
!28 = !DILocation(line: 46, column: 20, scope: !7)
!29 = !DILocation(line: 48, column: 35, scope: !7)
!30 = !DILocation(line: 267, column: 36, scope: !31, inlinedAt: !33)
!31 = distinct !DILexicalBlockFile(scope: !7, file: !32, discriminator: 0)
!32 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!33 = !DILocation(line: 49, column: 26, scope: !7)
!34 = !DILocation(line: 256, column: 15, scope: !35, inlinedAt: !33)
!35 = distinct !DILexicalBlockFile(scope: !31, file: !32, discriminator: 0)
!36 = !DILocation(line: 50, column: 27, scope: !7)
!37 = !DILocation(line: 118, column: 15, scope: !38, inlinedAt: !40)
!38 = distinct !DILexicalBlockFile(scope: !7, file: !39, discriminator: 0)
!39 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!40 = !DILocation(line: 52, column: 42, scope: !7)
!41 = !DILocation(line: 120, column: 21, scope: !38, inlinedAt: !40)
!42 = !DILocation(line: 120, column: 16, scope: !38, inlinedAt: !40)
!43 = !DILocation(line: 121, column: 29, scope: !38, inlinedAt: !40)
!44 = !DILocation(line: 53, column: 20, scope: !7)
!45 = !DILocation(line: 54, column: 48, scope: !7)
!46 = !DILocation(line: 54, column: 4, scope: !7)
