#blocked = #triton_gpu.blocked<{sizePerThread = [2, 1], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [0, 1]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [0, 1]}>
#loc = loc("inductor_cache/ag/cag4trztjmtbm4blicezxszon3evoustndoqeqa35rsx3pnk7b4s.py":19:0)
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_poi_fused_max_pool2d_with_indices_18(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/ag/cag4trztjmtbm4blicezxszon3evoustndoqeqa35rsx3pnk7b4s.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/ag/cag4trztjmtbm4blicezxszon3evoustndoqeqa35rsx3pnk7b4s.py":19:0), %arg2: !tt.ptr<i8> {tt.divisibility = 16 : i32} loc("inductor_cache/ag/cag4trztjmtbm4blicezxszon3evoustndoqeqa35rsx3pnk7b4s.py":19:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/ag/cag4trztjmtbm4blicezxszon3evoustndoqeqa35rsx3pnk7b4s.py":19:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/ag/cag4trztjmtbm4blicezxszon3evoustndoqeqa35rsx3pnk7b4s.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<1> : tensor<256x1xi8, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<0> : tensor<256x1xi8, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<2> : tensor<256x1xi8, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<3> : tensor<256x1xi8, #blocked> loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %c4_i32 = arith.constant 4 : i32 loc(#loc1)
    %c16_i32 = arith.constant 16 : i32 loc(#loc1)
    %c1024_i32 = arith.constant 1024 : i32 loc(#loc1)
    %c8192_i32 = arith.constant 8192 : i32 loc(#loc1)
    %c512_i32 = arith.constant 512 : i32 loc(#loc1)
    %c256_i32 = arith.constant 256 : i32 loc(#loc1)
    %cst_3 = arith.constant dense<512> : tensor<256x1xi32, #blocked> loc(#loc1)
    %cst_4 = arith.constant dense<512> : tensor<256x1xi32, #blocked1> loc(#loc1)
    %cst_5 = arith.constant dense<4096> : tensor<256x1xi32, #blocked> loc(#loc1)
    %cst_6 = arith.constant dense<4608> : tensor<256x1xi32, #blocked> loc(#loc1)
    %cst_7 = arith.constant dense<16> : tensor<256x1xi32, #blocked1> loc(#loc1)
    %0 = tt.get_program_id y : i32 loc(#loc2)
    %1 = arith.cmpi slt, %0, %c64_i32 : i32 loc(#loc3)
    %2 = tt.get_program_id x : i32 loc(#loc4)
    %3 = arith.muli %2, %c256_i32 : i32 loc(#loc5)
    %4 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc6)
    %5 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc6)
    %6 = tt.expand_dims %4 {axis = 1 : i32} : tensor<256xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<256x1xi32, #blocked> loc(#loc6)
    %7 = tt.expand_dims %5 {axis = 1 : i32} : tensor<256xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<256x1xi32, #blocked1> loc(#loc6)
    %8 = tt.splat %3 : i32 -> tensor<256x1xi32, #blocked> loc(#loc7)
    %9 = tt.splat %3 : i32 -> tensor<256x1xi32, #blocked1> loc(#loc7)
    %10 = arith.addi %8, %6 : tensor<256x1xi32, #blocked> loc(#loc7)
    %11 = arith.addi %9, %7 : tensor<256x1xi32, #blocked1> loc(#loc7)
    %12 = arith.cmpi slt, %10, %cst_3 : tensor<256x1xi32, #blocked> loc(#loc8)
    %13 = arith.cmpi slt, %11, %cst_4 : tensor<256x1xi32, #blocked1> loc(#loc8)
    %14 = arith.remsi %0, %c4_i32 : i32 loc(#loc9)
    %15 = arith.divsi %0, %c4_i32 : i32 loc(#loc10)
    %16 = arith.divsi %0, %c16_i32 : i32 loc(#loc11)
    %17 = arith.remsi %0, %c16_i32 : i32 loc(#loc12)
    %18 = arith.muli %14, %c1024_i32 : i32 loc(#loc13)
    %19 = tt.splat %18 : i32 -> tensor<256x1xi32, #blocked> loc(#loc14)
    %20 = arith.addi %10, %19 : tensor<256x1xi32, #blocked> loc(#loc14)
    %21 = arith.muli %15, %c8192_i32 : i32 loc(#loc15)
    %22 = tt.splat %21 : i32 -> tensor<256x1xi32, #blocked> loc(#loc16)
    %23 = arith.addi %20, %22 : tensor<256x1xi32, #blocked> loc(#loc16)
    %24 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<256x1x!tt.ptr<f32>, #blocked> loc(#loc17)
    %25 = tt.addptr %24, %23 : tensor<256x1x!tt.ptr<f32>, #blocked>, tensor<256x1xi32, #blocked> loc(#loc17)
    %26 = tt.splat %1 : i1 -> tensor<256x1xi1, #blocked> loc(#loc18)
    %27 = tt.splat %1 : i1 -> tensor<256x1xi1, #blocked1> loc(#loc18)
    %28 = arith.andi %12, %26 : tensor<256x1xi1, #blocked> loc(#loc18)
    %29 = arith.andi %13, %27 : tensor<256x1xi1, #blocked1> loc(#loc18)
    %30 = tt.load %25, %28 evictionPolicy = evict_last : tensor<256x1x!tt.ptr<f32>, #blocked> loc(#loc19)
    %31 = arith.addi %10, %cst_3 : tensor<256x1xi32, #blocked> loc(#loc20)
    %32 = arith.addi %31, %19 : tensor<256x1xi32, #blocked> loc(#loc21)
    %33 = arith.addi %32, %22 : tensor<256x1xi32, #blocked> loc(#loc22)
    %34 = tt.addptr %24, %33 : tensor<256x1x!tt.ptr<f32>, #blocked>, tensor<256x1xi32, #blocked> loc(#loc23)
    %35 = tt.load %34, %28 evictionPolicy = evict_last : tensor<256x1x!tt.ptr<f32>, #blocked> loc(#loc24)
    %36 = arith.addi %10, %cst_5 : tensor<256x1xi32, #blocked> loc(#loc25)
    %37 = arith.addi %36, %19 : tensor<256x1xi32, #blocked> loc(#loc26)
    %38 = arith.addi %37, %22 : tensor<256x1xi32, #blocked> loc(#loc27)
    %39 = tt.addptr %24, %38 : tensor<256x1x!tt.ptr<f32>, #blocked>, tensor<256x1xi32, #blocked> loc(#loc28)
    %40 = tt.load %39, %28 evictionPolicy = evict_last : tensor<256x1x!tt.ptr<f32>, #blocked> loc(#loc29)
    %41 = arith.addi %10, %cst_6 : tensor<256x1xi32, #blocked> loc(#loc30)
    %42 = arith.addi %41, %19 : tensor<256x1xi32, #blocked> loc(#loc31)
    %43 = arith.addi %42, %22 : tensor<256x1xi32, #blocked> loc(#loc32)
    %44 = tt.addptr %24, %43 : tensor<256x1x!tt.ptr<f32>, #blocked>, tensor<256x1xi32, #blocked> loc(#loc33)
    %45 = tt.load %44, %28 evictionPolicy = evict_last : tensor<256x1x!tt.ptr<f32>, #blocked> loc(#loc34)
    %46 = arith.cmpf ogt, %35, %30 : tensor<256x1xf32, #blocked> loc(#loc56)
    %47 = arith.cmpf une, %35, %35 : tensor<256x1xf32, #blocked> loc(#loc57)
    %48 = arith.ori %46, %47 : tensor<256x1xi1, #blocked> loc(#loc58)
    %49 = arith.select %48, %35, %30 : tensor<256x1xi1, #blocked>, tensor<256x1xf32, #blocked> loc(#loc59)
    %50 = arith.cmpf ogt, %40, %49 : tensor<256x1xf32, #blocked> loc(#loc60)
    %51 = arith.cmpf une, %40, %40 : tensor<256x1xf32, #blocked> loc(#loc61)
    %52 = arith.ori %50, %51 : tensor<256x1xi1, #blocked> loc(#loc62)
    %53 = arith.select %52, %40, %49 : tensor<256x1xi1, #blocked>, tensor<256x1xf32, #blocked> loc(#loc63)
    %54 = arith.cmpf ogt, %45, %53 : tensor<256x1xf32, #blocked> loc(#loc64)
    %55 = arith.cmpf une, %45, %45 : tensor<256x1xf32, #blocked> loc(#loc65)
    %56 = arith.ori %54, %55 : tensor<256x1xi1, #blocked> loc(#loc66)
    %57 = arith.select %56, %45, %53 : tensor<256x1xi1, #blocked>, tensor<256x1xf32, #blocked> loc(#loc67)
    %58 = arith.select %46, %cst, %cst_0 : tensor<256x1xi1, #blocked>, tensor<256x1xi8, #blocked> loc(#loc42)
    %59 = arith.select %50, %cst_1, %58 : tensor<256x1xi1, #blocked>, tensor<256x1xi8, #blocked> loc(#loc43)
    %60 = arith.select %54, %cst_2, %59 : tensor<256x1xi1, #blocked>, tensor<256x1xi8, #blocked> loc(#loc44)
    %61 = arith.muli %11, %cst_7 : tensor<256x1xi32, #blocked1> loc(#loc45)
    %62 = tt.splat %17 : i32 -> tensor<256x1xi32, #blocked1> loc(#loc46)
    %63 = arith.addi %62, %61 : tensor<256x1xi32, #blocked1> loc(#loc46)
    %64 = arith.muli %16, %c8192_i32 : i32 loc(#loc47)
    %65 = tt.splat %64 : i32 -> tensor<256x1xi32, #blocked1> loc(#loc48)
    %66 = arith.addi %63, %65 : tensor<256x1xi32, #blocked1> loc(#loc48)
    %67 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<256x1x!tt.ptr<f32>, #blocked1> loc(#loc49)
    %68 = tt.addptr %67, %66 : tensor<256x1x!tt.ptr<f32>, #blocked1>, tensor<256x1xi32, #blocked1> loc(#loc49)
    %69 = triton_gpu.convert_layout %57 : tensor<256x1xf32, #blocked> -> tensor<256x1xf32, #blocked1> loc(#loc50)
    tt.store %68, %69, %29 : tensor<256x1x!tt.ptr<f32>, #blocked1> loc(#loc50)
    %70 = arith.muli %0, %c512_i32 : i32 loc(#loc51)
    %71 = tt.splat %70 : i32 -> tensor<256x1xi32, #blocked> loc(#loc52)
    %72 = arith.addi %10, %71 : tensor<256x1xi32, #blocked> loc(#loc52)
    %73 = tt.splat %arg2 : !tt.ptr<i8> -> tensor<256x1x!tt.ptr<i8>, #blocked> loc(#loc53)
    %74 = tt.addptr %73, %72 : tensor<256x1x!tt.ptr<i8>, #blocked>, tensor<256x1xi32, #blocked> loc(#loc53)
    tt.store %74, %60, %28 : tensor<256x1x!tt.ptr<i8>, #blocked> loc(#loc54)
    tt.return loc(#loc55)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("inductor_cache/ag/cag4trztjmtbm4blicezxszon3evoustndoqeqa35rsx3pnk7b4s.py":22:28)
#loc3 = loc("inductor_cache/ag/cag4trztjmtbm4blicezxszon3evoustndoqeqa35rsx3pnk7b4s.py":24:21)
#loc4 = loc("inductor_cache/ag/cag4trztjmtbm4blicezxszon3evoustndoqeqa35rsx3pnk7b4s.py":25:28)
#loc5 = loc("inductor_cache/ag/cag4trztjmtbm4blicezxszon3evoustndoqeqa35rsx3pnk7b4s.py":25:33)
#loc6 = loc("inductor_cache/ag/cag4trztjmtbm4blicezxszon3evoustndoqeqa35rsx3pnk7b4s.py":26:44)
#loc7 = loc("inductor_cache/ag/cag4trztjmtbm4blicezxszon3evoustndoqeqa35rsx3pnk7b4s.py":26:23)
#loc8 = loc("inductor_cache/ag/cag4trztjmtbm4blicezxszon3evoustndoqeqa35rsx3pnk7b4s.py":27:21)
#loc9 = loc("inductor_cache/ag/cag4trztjmtbm4blicezxszon3evoustndoqeqa35rsx3pnk7b4s.py":29:19)
#loc10 = loc("inductor_cache/ag/cag4trztjmtbm4blicezxszon3evoustndoqeqa35rsx3pnk7b4s.py":30:19)
#loc11 = loc("inductor_cache/ag/cag4trztjmtbm4blicezxszon3evoustndoqeqa35rsx3pnk7b4s.py":31:19)
#loc12 = loc("inductor_cache/ag/cag4trztjmtbm4blicezxszon3evoustndoqeqa35rsx3pnk7b4s.py":32:19)
#loc13 = loc("inductor_cache/ag/cag4trztjmtbm4blicezxszon3evoustndoqeqa35rsx3pnk7b4s.py":34:40)
#loc14 = loc("inductor_cache/ag/cag4trztjmtbm4blicezxszon3evoustndoqeqa35rsx3pnk7b4s.py":34:35)
#loc15 = loc("inductor_cache/ag/cag4trztjmtbm4blicezxszon3evoustndoqeqa35rsx3pnk7b4s.py":34:50)
#loc16 = loc("inductor_cache/ag/cag4trztjmtbm4blicezxszon3evoustndoqeqa35rsx3pnk7b4s.py":34:45)
#loc17 = loc("inductor_cache/ag/cag4trztjmtbm4blicezxszon3evoustndoqeqa35rsx3pnk7b4s.py":34:30)
#loc18 = loc("inductor_cache/ag/cag4trztjmtbm4blicezxszon3evoustndoqeqa35rsx3pnk7b4s.py":34:63)
#loc19 = loc("inductor_cache/ag/cag4trztjmtbm4blicezxszon3evoustndoqeqa35rsx3pnk7b4s.py":34:55)
#loc20 = loc("inductor_cache/ag/cag4trztjmtbm4blicezxszon3evoustndoqeqa35rsx3pnk7b4s.py":35:36)
#loc21 = loc("inductor_cache/ag/cag4trztjmtbm4blicezxszon3evoustndoqeqa35rsx3pnk7b4s.py":35:41)
#loc22 = loc("inductor_cache/ag/cag4trztjmtbm4blicezxszon3evoustndoqeqa35rsx3pnk7b4s.py":35:51)
#loc23 = loc("inductor_cache/ag/cag4trztjmtbm4blicezxszon3evoustndoqeqa35rsx3pnk7b4s.py":35:30)
#loc24 = loc("inductor_cache/ag/cag4trztjmtbm4blicezxszon3evoustndoqeqa35rsx3pnk7b4s.py":35:61)
#loc25 = loc("inductor_cache/ag/cag4trztjmtbm4blicezxszon3evoustndoqeqa35rsx3pnk7b4s.py":36:37)
#loc26 = loc("inductor_cache/ag/cag4trztjmtbm4blicezxszon3evoustndoqeqa35rsx3pnk7b4s.py":36:42)
#loc27 = loc("inductor_cache/ag/cag4trztjmtbm4blicezxszon3evoustndoqeqa35rsx3pnk7b4s.py":36:52)
#loc28 = loc("inductor_cache/ag/cag4trztjmtbm4blicezxszon3evoustndoqeqa35rsx3pnk7b4s.py":36:30)
#loc29 = loc("inductor_cache/ag/cag4trztjmtbm4blicezxszon3evoustndoqeqa35rsx3pnk7b4s.py":36:62)
#loc30 = loc("inductor_cache/ag/cag4trztjmtbm4blicezxszon3evoustndoqeqa35rsx3pnk7b4s.py":37:37)
#loc31 = loc("inductor_cache/ag/cag4trztjmtbm4blicezxszon3evoustndoqeqa35rsx3pnk7b4s.py":37:42)
#loc32 = loc("inductor_cache/ag/cag4trztjmtbm4blicezxszon3evoustndoqeqa35rsx3pnk7b4s.py":37:52)
#loc33 = loc("inductor_cache/ag/cag4trztjmtbm4blicezxszon3evoustndoqeqa35rsx3pnk7b4s.py":37:30)
#loc34 = loc("inductor_cache/ag/cag4trztjmtbm4blicezxszon3evoustndoqeqa35rsx3pnk7b4s.py":37:62)
#loc35 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":118:15)
#loc36 = loc("inductor_cache/ag/cag4trztjmtbm4blicezxszon3evoustndoqeqa35rsx3pnk7b4s.py":38:40)
#loc37 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":120:21)
#loc38 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":120:16)
#loc39 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":121:29)
#loc40 = loc("inductor_cache/ag/cag4trztjmtbm4blicezxszon3evoustndoqeqa35rsx3pnk7b4s.py":39:40)
#loc41 = loc("inductor_cache/ag/cag4trztjmtbm4blicezxszon3evoustndoqeqa35rsx3pnk7b4s.py":40:40)
#loc42 = loc("inductor_cache/ag/cag4trztjmtbm4blicezxszon3evoustndoqeqa35rsx3pnk7b4s.py":44:33)
#loc43 = loc("inductor_cache/ag/cag4trztjmtbm4blicezxszon3evoustndoqeqa35rsx3pnk7b4s.py":47:35)
#loc44 = loc("inductor_cache/ag/cag4trztjmtbm4blicezxszon3evoustndoqeqa35rsx3pnk7b4s.py":50:35)
#loc45 = loc("inductor_cache/ag/cag4trztjmtbm4blicezxszon3evoustndoqeqa35rsx3pnk7b4s.py":51:33)
#loc46 = loc("inductor_cache/ag/cag4trztjmtbm4blicezxszon3evoustndoqeqa35rsx3pnk7b4s.py":51:30)
#loc47 = loc("inductor_cache/ag/cag4trztjmtbm4blicezxszon3evoustndoqeqa35rsx3pnk7b4s.py":51:43)
#loc48 = loc("inductor_cache/ag/cag4trztjmtbm4blicezxszon3evoustndoqeqa35rsx3pnk7b4s.py":51:38)
#loc49 = loc("inductor_cache/ag/cag4trztjmtbm4blicezxszon3evoustndoqeqa35rsx3pnk7b4s.py":51:25)
#loc50 = loc("inductor_cache/ag/cag4trztjmtbm4blicezxszon3evoustndoqeqa35rsx3pnk7b4s.py":51:54)
#loc51 = loc("inductor_cache/ag/cag4trztjmtbm4blicezxszon3evoustndoqeqa35rsx3pnk7b4s.py":52:34)
#loc52 = loc("inductor_cache/ag/cag4trztjmtbm4blicezxszon3evoustndoqeqa35rsx3pnk7b4s.py":52:30)
#loc53 = loc("inductor_cache/ag/cag4trztjmtbm4blicezxszon3evoustndoqeqa35rsx3pnk7b4s.py":52:25)
#loc54 = loc("inductor_cache/ag/cag4trztjmtbm4blicezxszon3evoustndoqeqa35rsx3pnk7b4s.py":52:46)
#loc55 = loc("inductor_cache/ag/cag4trztjmtbm4blicezxszon3evoustndoqeqa35rsx3pnk7b4s.py":52:4)
#loc56 = loc(callsite(#loc35 at #loc36))
#loc57 = loc(callsite(#loc37 at #loc36))
#loc58 = loc(callsite(#loc38 at #loc36))
#loc59 = loc(callsite(#loc39 at #loc36))
#loc60 = loc(callsite(#loc35 at #loc40))
#loc61 = loc(callsite(#loc37 at #loc40))
#loc62 = loc(callsite(#loc38 at #loc40))
#loc63 = loc(callsite(#loc39 at #loc40))
#loc64 = loc(callsite(#loc35 at #loc41))
#loc65 = loc(callsite(#loc37 at #loc41))
#loc66 = loc(callsite(#loc38 at #loc41))
#loc67 = loc(callsite(#loc39 at #loc41))
