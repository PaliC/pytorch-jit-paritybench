; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_max_pool2d_with_indices_18(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = icmp slt i32 %6, 16, !dbg !11
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !12
  %9 = shl i32 %8, 8, !dbg !13
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !14
  %11 = shl i32 %10, 1, !dbg !14
  %12 = and i32 %11, 254, !dbg !14
  %13 = and i32 %10, 127, !dbg !14
  %14 = or disjoint i32 %13, 128, !dbg !14
  %15 = or disjoint i32 %9, %12, !dbg !15
  %16 = or disjoint i32 %9, %13, !dbg !15
  %17 = or disjoint i32 %9, %14, !dbg !15
  %18 = icmp slt i32 %15, 512, !dbg !16
  %19 = icmp slt i32 %16, 512, !dbg !16
  %20 = icmp slt i32 %17, 512, !dbg !16
  %.frozen = freeze i32 %6, !dbg !17
  %21 = sdiv i32 %.frozen, 2, !dbg !17
  %22 = mul i32 %21, 2, !dbg !18
  %.decomposed = sub i32 %.frozen, %22, !dbg !18
  %.frozen2 = freeze i32 %6, !dbg !19
  %23 = sdiv i32 %.frozen2, 4, !dbg !19
  %24 = mul i32 %23, 4, !dbg !20
  %.decomposed3 = sub i32 %.frozen2, %24, !dbg !20
  %25 = shl nsw i32 %.decomposed, 10, !dbg !21
  %26 = shl i32 %21, 12, !dbg !22
  %27 = add i32 %26, %25, !dbg !23
  %28 = add i32 %27, %15, !dbg !24
  %29 = sext i32 %28 to i64, !dbg !25
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !25
  %31 = and i1 %7, %18, !dbg !26
  %32 = and i1 %7, %19, !dbg !26
  %33 = and i1 %7, %20, !dbg !26
  %34 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %30, i1 %31) #2, !dbg !27
  %35 = extractvalue { i32, i32 } %34, 0, !dbg !27
  %36 = extractvalue { i32, i32 } %34, 1, !dbg !27
  %37 = or disjoint i32 %27, 512, !dbg !28
  %38 = add i32 %37, %15, !dbg !29
  %39 = sext i32 %38 to i64, !dbg !30
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !30
  %41 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %40, i1 %31) #2, !dbg !31
  %42 = extractvalue { i32, i32 } %41, 0, !dbg !31
  %43 = extractvalue { i32, i32 } %41, 1, !dbg !31
  %44 = add i32 %27, 2048, !dbg !32
  %45 = add i32 %44, %15, !dbg !33
  %46 = sext i32 %45 to i64, !dbg !34
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !34
  %48 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %47, i1 %31) #2, !dbg !35
  %49 = extractvalue { i32, i32 } %48, 0, !dbg !35
  %50 = extractvalue { i32, i32 } %48, 1, !dbg !35
  %51 = add i32 %27, 2560, !dbg !36
  %52 = add i32 %51, %15, !dbg !37
  %53 = sext i32 %52 to i64, !dbg !38
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !38
  %55 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %54, i1 %31) #2, !dbg !39
  %56 = extractvalue { i32, i32 } %55, 0, !dbg !39
  %57 = extractvalue { i32, i32 } %55, 1, !dbg !39
  %58 = insertelement <2 x i32> poison, i32 %35, i64 0, !dbg !27
  %59 = insertelement <2 x i32> %58, i32 %36, i64 1, !dbg !27
  %60 = bitcast <2 x i32> %59 to <2 x float>, !dbg !27
  %61 = insertelement <2 x i32> poison, i32 %42, i64 0, !dbg !31
  %62 = insertelement <2 x i32> %61, i32 %43, i64 1, !dbg !31
  %63 = bitcast <2 x i32> %62 to <2 x float>, !dbg !31
  %64 = insertelement <2 x i32> poison, i32 %49, i64 0, !dbg !35
  %65 = insertelement <2 x i32> %64, i32 %50, i64 1, !dbg !35
  %66 = bitcast <2 x i32> %65 to <2 x float>, !dbg !35
  %67 = insertelement <2 x i32> poison, i32 %56, i64 0, !dbg !39
  %68 = insertelement <2 x i32> %67, i32 %57, i64 1, !dbg !39
  %69 = bitcast <2 x i32> %68 to <2 x float>, !dbg !39
  %70 = fcmp ogt <2 x float> %63, %60, !dbg !40
  %71 = fcmp uno <2 x float> %63, zeroinitializer, !dbg !44
  %72 = or <2 x i1> %70, %71, !dbg !45
  %.v = select <2 x i1> %72, <2 x i32> %62, <2 x i32> %59, !dbg !46
  %73 = bitcast <2 x i32> %.v to <2 x float>, !dbg !46
  %74 = fcmp olt <2 x float> %73, %66, !dbg !47
  %75 = fcmp uno <2 x float> %66, zeroinitializer, !dbg !49
  %76 = or <2 x i1> %75, %74, !dbg !50
  %.v1 = select <2 x i1> %76, <2 x i32> %65, <2 x i32> %.v, !dbg !51
  %77 = bitcast <2 x i32> %.v1 to <2 x float>, !dbg !51
  %78 = fcmp olt <2 x float> %77, %69, !dbg !52
  %79 = bitcast i32 %56 to float, !dbg !54
  %80 = fcmp uno float %79, 0.000000e+00, !dbg !54
  %81 = bitcast i32 %57 to float, !dbg !54
  %82 = fcmp uno float %81, 0.000000e+00, !dbg !54
  %83 = extractelement <2 x i1> %78, i64 0, !dbg !55
  %84 = or i1 %80, %83, !dbg !55
  %85 = extractelement <2 x i1> %78, i64 1, !dbg !55
  %86 = or i1 %82, %85, !dbg !55
  %87 = zext <2 x i1> %70 to <2 x i8>, !dbg !56
  %88 = select <2 x i1> %74, <2 x i8> splat (i8 2), <2 x i8> %87, !dbg !57
  %89 = select <2 x i1> %78, <2 x i8> splat (i8 3), <2 x i8> %88, !dbg !58
  %90 = shl i32 %16, 2, !dbg !59
  %91 = shl i32 %17, 2, !dbg !59
  %92 = shl i32 %23, 11, !dbg !60
  %93 = add i32 %92, %.decomposed3, !dbg !61
  %94 = add i32 %93, %90, !dbg !62
  %95 = add i32 %93, %91, !dbg !62
  %96 = sext i32 %94 to i64, !dbg !63
  %97 = getelementptr float, ptr addrspace(1) %1, i64 %96, !dbg !63
  %98 = sext i32 %95 to i64, !dbg !63
  %99 = getelementptr float, ptr addrspace(1) %1, i64 %98, !dbg !63
  %100 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !64
  %101 = extractelement <2 x i32> %.v1, i64 0, !dbg !64
  %102 = select i1 %84, i32 %56, i32 %101, !dbg !65
  %103 = insertelement <1 x i32> poison, i32 %102, i64 0, !dbg !64
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %100, <1 x i32> %103, i1 true) #2, !dbg !64
  %104 = or disjoint i32 %12, 1, !dbg !64
  %105 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %104, !dbg !64
  %106 = extractelement <2 x i32> %.v1, i64 1, !dbg !64
  %107 = select i1 %86, i32 %57, i32 %106, !dbg !65
  %108 = insertelement <1 x i32> poison, i32 %107, i64 0, !dbg !64
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %105, <1 x i32> %108, i1 true) #2, !dbg !64
  tail call void @llvm.nvvm.barrier0(), !dbg !64
  %109 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !64
  %110 = load i32, ptr addrspace(3) %109, align 4, !dbg !64
  %111 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !64
  %112 = load i32, ptr addrspace(3) %111, align 4, !dbg !64
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %110, ptr addrspace(1) %97, i1 %32) #2, !dbg !64
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %112, ptr addrspace(1) %99, i1 %33) #2, !dbg !64
  %113 = shl i32 %6, 9, !dbg !66
  %114 = add i32 %15, %113, !dbg !67
  %115 = sext i32 %114 to i64, !dbg !68
  %116 = getelementptr i8, ptr addrspace(1) %2, i64 %115, !dbg !68
  %117 = bitcast <2 x i8> %89 to i16, !dbg !69
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %117, ptr addrspace(1) %116, i1 %31) #2, !dbg !69
  ret void, !dbg !70
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cw4mtp4minipb7uxxbhskson2tncsyqw7fpx55awfmdokoylz2di.py", directory: "inductor_cache/w4")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_18, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_18, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_18", linkageName: "triton_poi_fused_max_pool2d_with_indices_18", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 28, scope: !7)
!13 = !DILocation(line: 25, column: 33, scope: !7)
!14 = !DILocation(line: 26, column: 44, scope: !7)
!15 = !DILocation(line: 26, column: 23, scope: !7)
!16 = !DILocation(line: 27, column: 21, scope: !7)
!17 = !DILocation(line: 30, column: 19, scope: !7)
!18 = !DILocation(line: 29, column: 19, scope: !7)
!19 = !DILocation(line: 31, column: 19, scope: !7)
!20 = !DILocation(line: 32, column: 19, scope: !7)
!21 = !DILocation(line: 34, column: 40, scope: !7)
!22 = !DILocation(line: 34, column: 50, scope: !7)
!23 = !DILocation(line: 34, column: 35, scope: !7)
!24 = !DILocation(line: 34, column: 45, scope: !7)
!25 = !DILocation(line: 34, column: 30, scope: !7)
!26 = !DILocation(line: 34, column: 63, scope: !7)
!27 = !DILocation(line: 34, column: 55, scope: !7)
!28 = !DILocation(line: 35, column: 41, scope: !7)
!29 = !DILocation(line: 35, column: 51, scope: !7)
!30 = !DILocation(line: 35, column: 30, scope: !7)
!31 = !DILocation(line: 35, column: 61, scope: !7)
!32 = !DILocation(line: 36, column: 42, scope: !7)
!33 = !DILocation(line: 36, column: 52, scope: !7)
!34 = !DILocation(line: 36, column: 30, scope: !7)
!35 = !DILocation(line: 36, column: 62, scope: !7)
!36 = !DILocation(line: 37, column: 42, scope: !7)
!37 = !DILocation(line: 37, column: 52, scope: !7)
!38 = !DILocation(line: 37, column: 30, scope: !7)
!39 = !DILocation(line: 37, column: 62, scope: !7)
!40 = !DILocation(line: 118, column: 15, scope: !41, inlinedAt: !43)
!41 = distinct !DILexicalBlockFile(scope: !7, file: !42, discriminator: 0)
!42 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!43 = !DILocation(line: 38, column: 40, scope: !7)
!44 = !DILocation(line: 120, column: 21, scope: !41, inlinedAt: !43)
!45 = !DILocation(line: 120, column: 16, scope: !41, inlinedAt: !43)
!46 = !DILocation(line: 121, column: 29, scope: !41, inlinedAt: !43)
!47 = !DILocation(line: 118, column: 15, scope: !41, inlinedAt: !48)
!48 = !DILocation(line: 39, column: 40, scope: !7)
!49 = !DILocation(line: 120, column: 21, scope: !41, inlinedAt: !48)
!50 = !DILocation(line: 120, column: 16, scope: !41, inlinedAt: !48)
!51 = !DILocation(line: 121, column: 29, scope: !41, inlinedAt: !48)
!52 = !DILocation(line: 118, column: 15, scope: !41, inlinedAt: !53)
!53 = !DILocation(line: 40, column: 40, scope: !7)
!54 = !DILocation(line: 120, column: 21, scope: !41, inlinedAt: !53)
!55 = !DILocation(line: 120, column: 16, scope: !41, inlinedAt: !53)
!56 = !DILocation(line: 44, column: 33, scope: !7)
!57 = !DILocation(line: 47, column: 35, scope: !7)
!58 = !DILocation(line: 50, column: 35, scope: !7)
!59 = !DILocation(line: 51, column: 32, scope: !7)
!60 = !DILocation(line: 51, column: 42, scope: !7)
!61 = !DILocation(line: 51, column: 30, scope: !7)
!62 = !DILocation(line: 51, column: 37, scope: !7)
!63 = !DILocation(line: 51, column: 25, scope: !7)
!64 = !DILocation(line: 51, column: 53, scope: !7)
!65 = !DILocation(line: 121, column: 29, scope: !41, inlinedAt: !53)
!66 = !DILocation(line: 52, column: 34, scope: !7)
!67 = !DILocation(line: 52, column: 30, scope: !7)
!68 = !DILocation(line: 52, column: 25, scope: !7)
!69 = !DILocation(line: 52, column: 46, scope: !7)
!70 = !DILocation(line: 52, column: 4, scope: !7)
