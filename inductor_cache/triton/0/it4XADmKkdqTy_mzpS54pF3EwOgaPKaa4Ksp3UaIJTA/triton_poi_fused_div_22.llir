; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_div_22(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %7 = shl i32 %6, 8, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 252, !dbg !12
  %11 = and i32 %8, 127, !dbg !12
  %12 = or disjoint i32 %7, %10, !dbg !13
  %13 = or disjoint i32 %7, %11, !dbg !13
  %14 = or disjoint i32 %13, 128, !dbg !13
  %15 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %16 = shl i32 %15, 2, !dbg !15
  %17 = lshr i32 %8, 6, !dbg !16
  %.lobit = and i32 %17, 1, !dbg !16
  %18 = or disjoint i32 %16, %.lobit, !dbg !17
  %19 = or disjoint i32 %18, 2, !dbg !17
  %20 = icmp slt i32 %18, 4, !dbg !18
  %21 = icmp slt i32 %19, 4, !dbg !18
  %22 = icmp slt i32 %16, 4, !dbg !18
  %.frozen = freeze i32 %12, !dbg !19
  %23 = sdiv i32 %.frozen, 512, !dbg !19
  %24 = mul i32 %23, 512, !dbg !20
  %.decomposed = sub i32 %.frozen, %24, !dbg !20
  %25 = sdiv i32 %13, 512, !dbg !19
  %26 = sdiv i32 %14, 512, !dbg !19
  %27 = shl i32 %18, 9, !dbg !21
  %28 = shl i32 %19, 9, !dbg !21
  %29 = shl i32 %23, 11, !dbg !22
  %30 = add i32 %29, %.decomposed, !dbg !23
  %31 = add i32 %30, %27, !dbg !24
  %32 = add i32 %30, %28, !dbg !24
  %33 = sext i32 %31 to i64, !dbg !25
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !25
  %35 = sext i32 %32 to i64, !dbg !25
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !25
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %34, i1 %20) #4, !dbg !26
  %38 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !26
  %39 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !26
  %40 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !26
  %41 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !26
  %42 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %36, i1 %21) #4, !dbg !26
  %43 = extractvalue { i32, i32, i32, i32 } %42, 0, !dbg !26
  %44 = extractvalue { i32, i32, i32, i32 } %42, 1, !dbg !26
  %45 = extractvalue { i32, i32, i32, i32 } %42, 2, !dbg !26
  %46 = extractvalue { i32, i32, i32, i32 } %42, 3, !dbg !26
  %47 = shl i32 %8, 4, !dbg !26
  %48 = and i32 %47, 1008, !dbg !26
  %49 = or disjoint i32 %48, %.lobit, !dbg !26
  %50 = and i32 %9, 508, !dbg !26
  %51 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %48, !dbg !26
  %52 = getelementptr float, ptr addrspace(3) %51, i32 %49, !dbg !26
  %53 = insertelement <1 x i32> poison, i32 %38, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %52, <1 x i32> %53, i1 true) #4, !dbg !26
  %54 = or disjoint i32 %49, 4, !dbg !26
  %55 = lshr i32 %54, 2, !dbg !26
  %56 = getelementptr float, ptr addrspace(3) @global_smem, i32 %55, !dbg !26
  %57 = getelementptr float, ptr addrspace(3) %56, i32 %54, !dbg !26
  %58 = insertelement <1 x i32> poison, i32 %39, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %57, <1 x i32> %58, i1 true) #4, !dbg !26
  %59 = or disjoint i32 %49, 8, !dbg !26
  %60 = lshr i32 %59, 2, !dbg !26
  %61 = getelementptr float, ptr addrspace(3) @global_smem, i32 %60, !dbg !26
  %62 = getelementptr float, ptr addrspace(3) %61, i32 %59, !dbg !26
  %63 = insertelement <1 x i32> poison, i32 %40, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %62, <1 x i32> %63, i1 true) #4, !dbg !26
  %64 = or disjoint i32 %49, 12, !dbg !26
  %65 = lshr i32 %64, 2, !dbg !26
  %66 = getelementptr float, ptr addrspace(3) @global_smem, i32 %65, !dbg !26
  %67 = getelementptr float, ptr addrspace(3) %66, i32 %64, !dbg !26
  %68 = insertelement <1 x i32> poison, i32 %41, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %67, <1 x i32> %68, i1 true) #4, !dbg !26
  %69 = or disjoint i32 %49, 2, !dbg !26
  %70 = getelementptr float, ptr addrspace(3) %51, i32 %69, !dbg !26
  %71 = insertelement <1 x i32> poison, i32 %43, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %70, <1 x i32> %71, i1 true) #4, !dbg !26
  %72 = or disjoint i32 %49, 6, !dbg !26
  %73 = lshr i32 %72, 2, !dbg !26
  %74 = getelementptr float, ptr addrspace(3) @global_smem, i32 %73, !dbg !26
  %75 = getelementptr float, ptr addrspace(3) %74, i32 %72, !dbg !26
  %76 = insertelement <1 x i32> poison, i32 %44, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %75, <1 x i32> %76, i1 true) #4, !dbg !26
  %77 = or disjoint i32 %49, 10, !dbg !26
  %78 = lshr i32 %77, 2, !dbg !26
  %79 = getelementptr float, ptr addrspace(3) @global_smem, i32 %78, !dbg !26
  %80 = getelementptr float, ptr addrspace(3) %79, i32 %77, !dbg !26
  %81 = insertelement <1 x i32> poison, i32 %45, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %80, <1 x i32> %81, i1 true) #4, !dbg !26
  %82 = or disjoint i32 %49, 14, !dbg !26
  %83 = lshr i32 %82, 2, !dbg !26
  %84 = getelementptr float, ptr addrspace(3) @global_smem, i32 %83, !dbg !26
  %85 = getelementptr float, ptr addrspace(3) %84, i32 %82, !dbg !26
  %86 = insertelement <1 x i32> poison, i32 %46, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %85, <1 x i32> %86, i1 true) #4, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %87 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %50, !dbg !26
  %88 = getelementptr inbounds float, ptr addrspace(3) %87, i32 %50, !dbg !26
  %89 = load float, ptr addrspace(3) %88, align 4, !dbg !26
  %90 = or disjoint i32 %50, 1, !dbg !26
  %91 = getelementptr inbounds float, ptr addrspace(3) %87, i32 %90, !dbg !26
  %92 = load float, ptr addrspace(3) %91, align 4, !dbg !26
  %93 = or disjoint i32 %50, 2, !dbg !26
  %94 = getelementptr inbounds float, ptr addrspace(3) %87, i32 %93, !dbg !26
  %95 = load float, ptr addrspace(3) %94, align 4, !dbg !26
  %96 = or disjoint i32 %50, 3, !dbg !26
  %97 = getelementptr inbounds float, ptr addrspace(3) %87, i32 %96, !dbg !26
  %98 = load float, ptr addrspace(3) %97, align 4, !dbg !26
  %99 = or disjoint i32 %50, 512, !dbg !26
  %100 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %99, !dbg !26
  %101 = getelementptr inbounds float, ptr addrspace(3) %100, i32 %99, !dbg !26
  %102 = load float, ptr addrspace(3) %101, align 4, !dbg !26
  %103 = or disjoint i32 %50, 513, !dbg !26
  %104 = lshr i32 %103, 2, !dbg !26
  %105 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %104, !dbg !26
  %106 = getelementptr inbounds float, ptr addrspace(3) %105, i32 %103, !dbg !26
  %107 = load float, ptr addrspace(3) %106, align 4, !dbg !26
  %108 = or disjoint i32 %50, 514, !dbg !26
  %109 = lshr i32 %108, 2, !dbg !26
  %110 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %109, !dbg !26
  %111 = getelementptr inbounds float, ptr addrspace(3) %110, i32 %108, !dbg !26
  %112 = load float, ptr addrspace(3) %111, align 4, !dbg !26
  %113 = or disjoint i32 %50, 515, !dbg !26
  %114 = lshr i32 %113, 2, !dbg !26
  %115 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %114, !dbg !26
  %116 = getelementptr inbounds float, ptr addrspace(3) %115, i32 %113, !dbg !26
  %117 = load float, ptr addrspace(3) %116, align 4, !dbg !26
  %118 = add i32 %25, %15, !dbg !27
  %119 = shl i32 %118, 2, !dbg !27
  %120 = add i32 %15, %26, !dbg !27
  %121 = shl i32 %120, 2, !dbg !27
  %122 = sext i32 %119 to i64, !dbg !28
  %123 = getelementptr float, ptr addrspace(1) %1, i64 %122, !dbg !28
  %124 = sext i32 %121 to i64, !dbg !28
  %125 = getelementptr float, ptr addrspace(1) %1, i64 %124, !dbg !28
  %126 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %123, i1 %22) #4, !dbg !29
  %127 = extractvalue { i32, i32, i32, i32 } %126, 0, !dbg !29
  %128 = extractvalue { i32, i32, i32, i32 } %126, 1, !dbg !29
  %129 = extractvalue { i32, i32, i32, i32 } %126, 2, !dbg !29
  %130 = extractvalue { i32, i32, i32, i32 } %126, 3, !dbg !29
  %131 = bitcast i32 %127 to float, !dbg !29
  %132 = bitcast i32 %128 to float, !dbg !29
  %133 = bitcast i32 %129 to float, !dbg !29
  %134 = bitcast i32 %130 to float, !dbg !29
  %135 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %125, i1 %22) #4, !dbg !29
  %136 = extractvalue { i32, i32, i32, i32 } %135, 0, !dbg !29
  %137 = extractvalue { i32, i32, i32, i32 } %135, 1, !dbg !29
  %138 = extractvalue { i32, i32, i32, i32 } %135, 2, !dbg !29
  %139 = extractvalue { i32, i32, i32, i32 } %135, 3, !dbg !29
  %140 = bitcast i32 %136 to float, !dbg !29
  %141 = bitcast i32 %137 to float, !dbg !29
  %142 = bitcast i32 %138 to float, !dbg !29
  %143 = bitcast i32 %139 to float, !dbg !29
  %144 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !30
  %.not.i = icmp eq i32 %144, 0, !dbg !30
  %145 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !30
  %.not1.i = icmp eq i32 %145, 0, !dbg !30
  br i1 %.not.i, label %151, label %146, !dbg !30

146:                                              ; preds = %5
  br i1 %.not1.i, label %149, label %147, !dbg !30

147:                                              ; preds = %146
  %148 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %131) #4, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

149:                                              ; preds = %146
  %150 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %131) #4, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

151:                                              ; preds = %5
  br i1 %.not1.i, label %154, label %152, !dbg !30

152:                                              ; preds = %151
  %153 = tail call float @llvm.nvvm.sqrt.rn.f(float %131) #4, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

154:                                              ; preds = %151
  %155 = tail call float @llvm.nvvm.sqrt.approx.f(float %131) #4, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

__nv_sqrtf.exit:                                  ; preds = %147, %149, %152, %154
  %.0.i = phi float [ %148, %147 ], [ %150, %149 ], [ %153, %152 ], [ %155, %154 ], !dbg !30
  %156 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !30
  %.not.i2 = icmp eq i32 %156, 0, !dbg !30
  %157 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !30
  %.not1.i5 = icmp eq i32 %157, 0, !dbg !30
  br i1 %.not.i2, label %163, label %158, !dbg !30

158:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i5, label %161, label %159, !dbg !30

159:                                              ; preds = %158
  %160 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %132) #4, !dbg !30
  br label %__nv_sqrtf.exit6, !dbg !30

161:                                              ; preds = %158
  %162 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %132) #4, !dbg !30
  br label %__nv_sqrtf.exit6, !dbg !30

163:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i5, label %166, label %164, !dbg !30

164:                                              ; preds = %163
  %165 = tail call float @llvm.nvvm.sqrt.rn.f(float %132) #4, !dbg !30
  br label %__nv_sqrtf.exit6, !dbg !30

166:                                              ; preds = %163
  %167 = tail call float @llvm.nvvm.sqrt.approx.f(float %132) #4, !dbg !30
  br label %__nv_sqrtf.exit6, !dbg !30

__nv_sqrtf.exit6:                                 ; preds = %159, %161, %164, %166
  %.0.i4 = phi float [ %160, %159 ], [ %162, %161 ], [ %165, %164 ], [ %167, %166 ], !dbg !30
  %168 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !30
  %.not.i7 = icmp eq i32 %168, 0, !dbg !30
  %169 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !30
  %.not1.i10 = icmp eq i32 %169, 0, !dbg !30
  br i1 %.not.i7, label %175, label %170, !dbg !30

170:                                              ; preds = %__nv_sqrtf.exit6
  br i1 %.not1.i10, label %173, label %171, !dbg !30

171:                                              ; preds = %170
  %172 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %133) #4, !dbg !30
  br label %__nv_sqrtf.exit11, !dbg !30

173:                                              ; preds = %170
  %174 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %133) #4, !dbg !30
  br label %__nv_sqrtf.exit11, !dbg !30

175:                                              ; preds = %__nv_sqrtf.exit6
  br i1 %.not1.i10, label %178, label %176, !dbg !30

176:                                              ; preds = %175
  %177 = tail call float @llvm.nvvm.sqrt.rn.f(float %133) #4, !dbg !30
  br label %__nv_sqrtf.exit11, !dbg !30

178:                                              ; preds = %175
  %179 = tail call float @llvm.nvvm.sqrt.approx.f(float %133) #4, !dbg !30
  br label %__nv_sqrtf.exit11, !dbg !30

__nv_sqrtf.exit11:                                ; preds = %171, %173, %176, %178
  %.0.i9 = phi float [ %172, %171 ], [ %174, %173 ], [ %177, %176 ], [ %179, %178 ], !dbg !30
  %180 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !30
  %.not.i12 = icmp eq i32 %180, 0, !dbg !30
  %181 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !30
  %.not1.i15 = icmp eq i32 %181, 0, !dbg !30
  br i1 %.not.i12, label %187, label %182, !dbg !30

182:                                              ; preds = %__nv_sqrtf.exit11
  br i1 %.not1.i15, label %185, label %183, !dbg !30

183:                                              ; preds = %182
  %184 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %134) #4, !dbg !30
  br label %__nv_sqrtf.exit16, !dbg !30

185:                                              ; preds = %182
  %186 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %134) #4, !dbg !30
  br label %__nv_sqrtf.exit16, !dbg !30

187:                                              ; preds = %__nv_sqrtf.exit11
  br i1 %.not1.i15, label %190, label %188, !dbg !30

188:                                              ; preds = %187
  %189 = tail call float @llvm.nvvm.sqrt.rn.f(float %134) #4, !dbg !30
  br label %__nv_sqrtf.exit16, !dbg !30

190:                                              ; preds = %187
  %191 = tail call float @llvm.nvvm.sqrt.approx.f(float %134) #4, !dbg !30
  br label %__nv_sqrtf.exit16, !dbg !30

__nv_sqrtf.exit16:                                ; preds = %183, %185, %188, %190
  %.0.i14 = phi float [ %184, %183 ], [ %186, %185 ], [ %189, %188 ], [ %191, %190 ], !dbg !30
  %192 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !30
  %.not.i17 = icmp eq i32 %192, 0, !dbg !30
  %193 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !30
  %.not1.i20 = icmp eq i32 %193, 0, !dbg !30
  br i1 %.not.i17, label %199, label %194, !dbg !30

194:                                              ; preds = %__nv_sqrtf.exit16
  br i1 %.not1.i20, label %197, label %195, !dbg !30

195:                                              ; preds = %194
  %196 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %140) #4, !dbg !30
  br label %__nv_sqrtf.exit21, !dbg !30

197:                                              ; preds = %194
  %198 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %140) #4, !dbg !30
  br label %__nv_sqrtf.exit21, !dbg !30

199:                                              ; preds = %__nv_sqrtf.exit16
  br i1 %.not1.i20, label %202, label %200, !dbg !30

200:                                              ; preds = %199
  %201 = tail call float @llvm.nvvm.sqrt.rn.f(float %140) #4, !dbg !30
  br label %__nv_sqrtf.exit21, !dbg !30

202:                                              ; preds = %199
  %203 = tail call float @llvm.nvvm.sqrt.approx.f(float %140) #4, !dbg !30
  br label %__nv_sqrtf.exit21, !dbg !30

__nv_sqrtf.exit21:                                ; preds = %195, %197, %200, %202
  %.0.i19 = phi float [ %196, %195 ], [ %198, %197 ], [ %201, %200 ], [ %203, %202 ], !dbg !30
  %204 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !30
  %.not.i22 = icmp eq i32 %204, 0, !dbg !30
  %205 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !30
  %.not1.i25 = icmp eq i32 %205, 0, !dbg !30
  br i1 %.not.i22, label %211, label %206, !dbg !30

206:                                              ; preds = %__nv_sqrtf.exit21
  br i1 %.not1.i25, label %209, label %207, !dbg !30

207:                                              ; preds = %206
  %208 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %141) #4, !dbg !30
  br label %__nv_sqrtf.exit26, !dbg !30

209:                                              ; preds = %206
  %210 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %141) #4, !dbg !30
  br label %__nv_sqrtf.exit26, !dbg !30

211:                                              ; preds = %__nv_sqrtf.exit21
  br i1 %.not1.i25, label %214, label %212, !dbg !30

212:                                              ; preds = %211
  %213 = tail call float @llvm.nvvm.sqrt.rn.f(float %141) #4, !dbg !30
  br label %__nv_sqrtf.exit26, !dbg !30

214:                                              ; preds = %211
  %215 = tail call float @llvm.nvvm.sqrt.approx.f(float %141) #4, !dbg !30
  br label %__nv_sqrtf.exit26, !dbg !30

__nv_sqrtf.exit26:                                ; preds = %207, %209, %212, %214
  %.0.i24 = phi float [ %208, %207 ], [ %210, %209 ], [ %213, %212 ], [ %215, %214 ], !dbg !30
  %216 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !30
  %.not.i27 = icmp eq i32 %216, 0, !dbg !30
  %217 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !30
  %.not1.i30 = icmp eq i32 %217, 0, !dbg !30
  br i1 %.not.i27, label %223, label %218, !dbg !30

218:                                              ; preds = %__nv_sqrtf.exit26
  br i1 %.not1.i30, label %221, label %219, !dbg !30

219:                                              ; preds = %218
  %220 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %142) #4, !dbg !30
  br label %__nv_sqrtf.exit31, !dbg !30

221:                                              ; preds = %218
  %222 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %142) #4, !dbg !30
  br label %__nv_sqrtf.exit31, !dbg !30

223:                                              ; preds = %__nv_sqrtf.exit26
  br i1 %.not1.i30, label %226, label %224, !dbg !30

224:                                              ; preds = %223
  %225 = tail call float @llvm.nvvm.sqrt.rn.f(float %142) #4, !dbg !30
  br label %__nv_sqrtf.exit31, !dbg !30

226:                                              ; preds = %223
  %227 = tail call float @llvm.nvvm.sqrt.approx.f(float %142) #4, !dbg !30
  br label %__nv_sqrtf.exit31, !dbg !30

__nv_sqrtf.exit31:                                ; preds = %219, %221, %224, %226
  %.0.i29 = phi float [ %220, %219 ], [ %222, %221 ], [ %225, %224 ], [ %227, %226 ], !dbg !30
  %228 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !30
  %.not.i32 = icmp eq i32 %228, 0, !dbg !30
  %229 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !30
  %.not1.i35 = icmp eq i32 %229, 0, !dbg !30
  br i1 %.not.i32, label %235, label %230, !dbg !30

230:                                              ; preds = %__nv_sqrtf.exit31
  br i1 %.not1.i35, label %233, label %231, !dbg !30

231:                                              ; preds = %230
  %232 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %143) #4, !dbg !30
  br label %__nv_sqrtf.exit36, !dbg !30

233:                                              ; preds = %230
  %234 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %143) #4, !dbg !30
  br label %__nv_sqrtf.exit36, !dbg !30

235:                                              ; preds = %__nv_sqrtf.exit31
  br i1 %.not1.i35, label %238, label %236, !dbg !30

236:                                              ; preds = %235
  %237 = tail call float @llvm.nvvm.sqrt.rn.f(float %143) #4, !dbg !30
  br label %__nv_sqrtf.exit36, !dbg !30

238:                                              ; preds = %235
  %239 = tail call float @llvm.nvvm.sqrt.approx.f(float %143) #4, !dbg !30
  br label %__nv_sqrtf.exit36, !dbg !30

__nv_sqrtf.exit36:                                ; preds = %231, %233, %236, %238
  %.0.i34 = phi float [ %232, %231 ], [ %234, %233 ], [ %237, %236 ], [ %239, %238 ], !dbg !30
  %240 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %89, float %.0.i) #4, !dbg !31
  %241 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %92, float %.0.i4) #4, !dbg !31
  %242 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %95, float %.0.i9) #4, !dbg !31
  %243 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %98, float %.0.i14) #4, !dbg !31
  %244 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %102, float %.0.i19) #4, !dbg !31
  %245 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %107, float %.0.i24) #4, !dbg !31
  %246 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %112, float %.0.i29) #4, !dbg !31
  %247 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %117, float %.0.i34) #4, !dbg !31
  %248 = add i32 %13, %15, !dbg !32
  %249 = shl i32 %248, 2, !dbg !32
  %250 = add i32 %15, %14, !dbg !32
  %251 = shl i32 %250, 2, !dbg !32
  %252 = sext i32 %249 to i64, !dbg !33
  %253 = getelementptr float, ptr addrspace(1) %2, i64 %252, !dbg !33
  %254 = sext i32 %251 to i64, !dbg !33
  %255 = getelementptr float, ptr addrspace(1) %2, i64 %254, !dbg !33
  %256 = bitcast float %240 to i32, !dbg !34
  %257 = bitcast float %241 to i32, !dbg !34
  %258 = bitcast float %242 to i32, !dbg !34
  %259 = bitcast float %243 to i32, !dbg !34
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %256, i32 %257, i32 %258, i32 %259, ptr addrspace(1) %253, i1 %22) #4, !dbg !34
  %260 = bitcast float %244 to i32, !dbg !34
  %261 = bitcast float %245 to i32, !dbg !34
  %262 = bitcast float %246 to i32, !dbg !34
  %263 = bitcast float %247 to i32, !dbg !34
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %260, i32 %261, i32 %262, i32 %263, ptr addrspace(1) %255, i1 %22) #4, !dbg !34
  ret void, !dbg !35
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "csqhdkeyr4yptxfqzkahnkfmiwkkuuys3r6oeketbvdgujvlhjcv.py", directory: "inductor_cache/sq")
!4 = !{ptr @triton_poi_fused_div_22, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_div_22, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_div_22", linkageName: "triton_poi_fused_div_22", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 39, scope: !7)
!22 = !DILocation(line: 32, column: 49, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 44, scope: !7)
!25 = !DILocation(line: 32, column: 30, scope: !7)
!26 = !DILocation(line: 32, column: 54, scope: !7)
!27 = !DILocation(line: 33, column: 35, scope: !7)
!28 = !DILocation(line: 33, column: 30, scope: !7)
!29 = !DILocation(line: 33, column: 42, scope: !7)
!30 = !DILocation(line: 34, column: 26, scope: !7)
!31 = !DILocation(line: 35, column: 18, scope: !7)
!32 = !DILocation(line: 36, column: 30, scope: !7)
!33 = !DILocation(line: 36, column: 25, scope: !7)
!34 = !DILocation(line: 36, column: 43, scope: !7)
!35 = !DILocation(line: 36, column: 4, scope: !7)
