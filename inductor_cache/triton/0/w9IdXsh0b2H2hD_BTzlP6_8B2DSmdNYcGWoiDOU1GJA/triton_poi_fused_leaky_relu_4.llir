; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused_leaky_relu_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %8 = shl i32 %7, 6, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = lshr i32 %9, 1, !dbg !12
  %11 = and i32 %10, 63, !dbg !12
  %12 = and i32 %9, 1, !dbg !12
  %13 = shl nuw nsw i32 %12, 1, !dbg !12
  %14 = or disjoint i32 %8, %11, !dbg !13
  %15 = icmp slt i32 %14, 64, !dbg !14
  %16 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %17 = shl i32 %16, 2, !dbg !16
  %18 = or disjoint i32 %17, %13, !dbg !17
  %19 = icmp slt i32 %18, 128, !dbg !18
  %20 = sdiv i32 %14, 16, !dbg !19
  %21 = shl i32 %14, 7, !dbg !20
  %22 = add i32 %18, %21, !dbg !21
  %23 = sext i32 %22 to i64, !dbg !22
  %24 = getelementptr float, ptr addrspace(1) %0, i64 %23, !dbg !22
  %25 = and i1 %15, %19, !dbg !23
  %26 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %24, i1 %25) #4, !dbg !24
  %27 = shl i32 %20, 7, !dbg !25
  %28 = add i32 %27, %18, !dbg !26
  %29 = sext i32 %28 to i64, !dbg !27
  %30 = getelementptr float, ptr addrspace(1) %1, i64 %29, !dbg !27
  %31 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %30, i1 %25) #4, !dbg !28
  %32 = getelementptr float, ptr addrspace(1) %2, i64 %29, !dbg !29
  %33 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %32, i1 %25) #4, !dbg !30
  %34 = extractvalue { i32, i32 } %33, 0, !dbg !30
  %35 = extractvalue { i32, i32 } %33, 1, !dbg !30
  %36 = bitcast i32 %34 to float, !dbg !30
  %37 = bitcast i32 %35 to float, !dbg !30
  %38 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %36, float 1.600000e+01) #4, !dbg !31
  %39 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %37, float 1.600000e+01) #4, !dbg !31
  %40 = fadd float %38, 0x3EE4F8B580000000, !dbg !32
  %41 = fadd float %39, 0x3EE4F8B580000000, !dbg !32
  %42 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i = icmp eq i32 %42, 0, !dbg !33
  br i1 %.not.i, label %45, label %43, !dbg !33

43:                                               ; preds = %6
  %44 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %40), !dbg !33
  br label %__nv_rsqrtf.exit, !dbg !33

45:                                               ; preds = %6
  %46 = tail call float @llvm.nvvm.rsqrt.approx.f(float %40), !dbg !33
  br label %__nv_rsqrtf.exit, !dbg !33

__nv_rsqrtf.exit:                                 ; preds = %43, %45
  %.0.i = phi float [ %44, %43 ], [ %46, %45 ], !dbg !33
  %47 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i5 = icmp eq i32 %47, 0, !dbg !33
  br i1 %.not.i5, label %50, label %48, !dbg !33

48:                                               ; preds = %__nv_rsqrtf.exit
  %49 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %41), !dbg !33
  br label %__nv_rsqrtf.exit7, !dbg !33

50:                                               ; preds = %__nv_rsqrtf.exit
  %51 = tail call float @llvm.nvvm.rsqrt.approx.f(float %41), !dbg !33
  br label %__nv_rsqrtf.exit7, !dbg !33

__nv_rsqrtf.exit7:                                ; preds = %48, %50
  %.0.i6 = phi float [ %49, %48 ], [ %51, %50 ], !dbg !33
  %52 = extractvalue { i32, i32 } %26, 1, !dbg !24
  %53 = bitcast i32 %52 to float, !dbg !24
  %54 = extractvalue { i32, i32 } %31, 1, !dbg !28
  %55 = bitcast i32 %54 to float, !dbg !28
  %56 = fsub float %53, %55, !dbg !34
  %57 = extractvalue { i32, i32 } %26, 0, !dbg !24
  %58 = bitcast i32 %57 to float, !dbg !24
  %59 = extractvalue { i32, i32 } %31, 0, !dbg !28
  %60 = bitcast i32 %59 to float, !dbg !28
  %61 = fsub float %58, %60, !dbg !34
  %.lobit12 = lshr i32 %9, 5, !dbg !35
  %62 = and i32 %.lobit12, 3, !dbg !35
  %63 = or disjoint i32 %17, %62, !dbg !17
  %64 = icmp slt i32 %63, 128, !dbg !18
  %65 = shl i32 %9, 1, !dbg !12
  %66 = and i32 %65, 62, !dbg !12
  %67 = or disjoint i32 %8, %66, !dbg !13
  %68 = icmp slt i32 %67, 64, !dbg !14
  %69 = and i1 %68, %64, !dbg !23
  %.frozen = freeze i32 %67, !dbg !19
  %70 = sdiv i32 %.frozen, 16, !dbg !19
  %71 = mul i32 %70, 16, !dbg !36
  %.decomposed = sub i32 %.frozen, %71, !dbg !36
  %72 = fmul float %61, %.0.i, !dbg !37
  %73 = fmul float %56, %.0.i6, !dbg !37
  %74 = fcmp ogt float %72, 0.000000e+00, !dbg !38
  %75 = fcmp ogt float %73, 0.000000e+00, !dbg !38
  %76 = fmul float %72, 0x3FC99999A0000000, !dbg !39
  %77 = fmul float %73, 0x3FC99999A0000000, !dbg !39
  %78 = select i1 %74, float %72, float %76, !dbg !40
  %79 = select i1 %75, float %73, float %77, !dbg !40
  %80 = shl i32 %63, 4, !dbg !41
  %81 = add i32 %80, %.decomposed, !dbg !42
  %82 = shl i32 %70, 11, !dbg !43
  %83 = add i32 %81, %82, !dbg !44
  %84 = sext i32 %83 to i64, !dbg !45
  %85 = getelementptr float, ptr addrspace(1) %3, i64 %84, !dbg !45
  %86 = shl nuw nsw i32 %12, 7, !dbg !46
  %87 = or disjoint i32 %86, %11, !dbg !46
  %88 = and i32 %65, 254, !dbg !46
  %.idx = shl nuw nsw i32 %12, 4, !dbg !46
  %89 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !46
  %90 = getelementptr float, ptr addrspace(3) %89, i32 %87, !dbg !46
  %91 = bitcast float %78 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %90, <1 x i32> %91, i1 true) #4, !dbg !46
  %92 = or disjoint i32 %87, 64, !dbg !46
  %93 = lshr i32 %92, 5, !dbg !46
  %94 = and i32 %93, 6, !dbg !46
  %95 = getelementptr float, ptr addrspace(3) @global_smem, i32 %94, !dbg !46
  %96 = getelementptr float, ptr addrspace(3) %95, i32 %92, !dbg !46
  %97 = bitcast float %79 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %96, <1 x i32> %97, i1 true) #4, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %98 = lshr i32 %65, 5, !dbg !46
  %99 = and i32 %98, 6, !dbg !46
  %100 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %99, !dbg !46
  %101 = getelementptr inbounds float, ptr addrspace(3) %100, i32 %88, !dbg !46
  %.extract = load i32, ptr addrspace(3) %101, align 8, !dbg !46
  %102 = getelementptr inbounds i8, ptr addrspace(3) %101, i32 4, !dbg !46
  %.extract4 = load i32, ptr addrspace(3) %102, align 4, !dbg !46
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract, i32 %.extract4, ptr addrspace(1) %85, i1 %69) #4, !dbg !46
  ret void, !dbg !47
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ctqg3p5neoavtzcww6lzw3lknaiwzozxwyo35zdn4qlovo4hlqxd.py", directory: "inductor_cache/tq")
!4 = !{ptr @triton_poi_fused_leaky_relu_4, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_leaky_relu_4, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_leaky_relu_4", linkageName: "triton_poi_fused_leaky_relu_4", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 32, column: 39, scope: !7)
!21 = !DILocation(line: 32, column: 35, scope: !7)
!22 = !DILocation(line: 32, column: 30, scope: !7)
!23 = !DILocation(line: 32, column: 52, scope: !7)
!24 = !DILocation(line: 32, column: 44, scope: !7)
!25 = !DILocation(line: 33, column: 39, scope: !7)
!26 = !DILocation(line: 33, column: 35, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 33, column: 44, scope: !7)
!29 = !DILocation(line: 34, column: 30, scope: !7)
!30 = !DILocation(line: 34, column: 44, scope: !7)
!31 = !DILocation(line: 37, column: 18, scope: !7)
!32 = !DILocation(line: 39, column: 18, scope: !7)
!33 = !DILocation(line: 40, column: 27, scope: !7)
!34 = !DILocation(line: 35, column: 18, scope: !7)
!35 = !DILocation(line: 26, column: 44, scope: !7)
!36 = !DILocation(line: 31, column: 19, scope: !7)
!37 = !DILocation(line: 41, column: 18, scope: !7)
!38 = !DILocation(line: 43, column: 19, scope: !7)
!39 = !DILocation(line: 45, column: 19, scope: !7)
!40 = !DILocation(line: 46, column: 34, scope: !7)
!41 = !DILocation(line: 47, column: 33, scope: !7)
!42 = !DILocation(line: 47, column: 30, scope: !7)
!43 = !DILocation(line: 47, column: 43, scope: !7)
!44 = !DILocation(line: 47, column: 38, scope: !7)
!45 = !DILocation(line: 47, column: 25, scope: !7)
!46 = !DILocation(line: 47, column: 55, scope: !7)
!47 = !DILocation(line: 47, column: 4, scope: !7)
