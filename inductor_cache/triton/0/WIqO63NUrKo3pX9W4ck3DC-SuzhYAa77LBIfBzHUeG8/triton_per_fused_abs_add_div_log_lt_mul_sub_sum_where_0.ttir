#loc = loc("inductor_cache/kc/ckclhrvyajbvreghqfqbqtsfz4zni3n6wwhelqgjthzvzdgnhjpq.py":19:0)
#loc1 = loc(unknown)
#loc30 = loc("inductor_cache/kc/ckclhrvyajbvreghqfqbqtsfz4zni3n6wwhelqgjthzvzdgnhjpq.py":52:26)
#loc37 = loc(callsite(#loc1 at #loc30))
module {
  tt.func public @triton_per_fused_abs_add_div_log_lt_mul_sub_sum_where_0(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/kc/ckclhrvyajbvreghqfqbqtsfz4zni3n6wwhelqgjthzvzdgnhjpq.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/kc/ckclhrvyajbvreghqfqbqtsfz4zni3n6wwhelqgjthzvzdgnhjpq.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/kc/ckclhrvyajbvreghqfqbqtsfz4zni3n6wwhelqgjthzvzdgnhjpq.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/kc/ckclhrvyajbvreghqfqbqtsfz4zni3n6wwhelqgjthzvzdgnhjpq.py":19:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/kc/ckclhrvyajbvreghqfqbqtsfz4zni3n6wwhelqgjthzvzdgnhjpq.py":19:0), %arg5: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/kc/ckclhrvyajbvreghqfqbqtsfz4zni3n6wwhelqgjthzvzdgnhjpq.py":19:0)) attributes {noinline = false} {
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %c4_i32 = arith.constant 4 : i32 loc(#loc1)
    %c16_i32 = arith.constant 16 : i32 loc(#loc1)
    %cst = arith.constant dense<-7.9175949> : tensor<1x16xf32> loc(#loc1)
    %cst_0 = arith.constant dense<1.000000e+00> : tensor<1x16xf32> loc(#loc1)
    %cst_1 = arith.constant dense<5.000000e-01> : tensor<1x16xf32> loc(#loc1)
    %cst_2 = arith.constant dense<1.000000e+01> : tensor<1x16xf32> loc(#loc1)
    %cst_3 = arith.constant dense<0.000000e+00> : tensor<1x16xf32> loc(#loc1)
    %cst_4 = arith.constant dense<4> : tensor<1x16xi32> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.cmpi slt, %0, %c16_i32 : i32 loc(#loc3)
    %2 = tt.splat %1 : i1 -> tensor<1x1xi1> loc(#loc3)
    %3 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32> loc(#loc4)
    %4 = tt.expand_dims %3 {axis = 0 : i32} : tensor<16xi32> -> tensor<1x16xi32> loc(#loc5)
    %5 = arith.remsi %0, %c4_i32 : i32 loc(#loc6)
    %6 = arith.divsi %0, %c4_i32 : i32 loc(#loc7)
    %7 = arith.muli %4, %cst_4 : tensor<1x16xi32> loc(#loc8)
    %8 = tt.splat %5 : i32 -> tensor<1x16xi32> loc(#loc9)
    %9 = arith.addi %8, %7 : tensor<1x16xi32> loc(#loc9)
    %10 = arith.muli %6, %c64_i32 : i32 loc(#loc10)
    %11 = tt.splat %10 : i32 -> tensor<1x16xi32> loc(#loc11)
    %12 = arith.addi %9, %11 : tensor<1x16xi32> loc(#loc11)
    %13 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1x16x!tt.ptr<f32>> loc(#loc12)
    %14 = tt.addptr %13, %12 : tensor<1x16x!tt.ptr<f32>>, tensor<1x16xi32> loc(#loc12)
    %15 = tt.splat %1 : i1 -> tensor<1x16xi1> loc(#loc13)
    %16 = tt.load %14, %15, %cst_3 : tensor<1x16x!tt.ptr<f32>> loc(#loc13)
    %17 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1x16x!tt.ptr<f32>> loc(#loc14)
    %18 = tt.addptr %17, %12 : tensor<1x16x!tt.ptr<f32>>, tensor<1x16xi32> loc(#loc14)
    %19 = tt.load %18, %15, %cst_3 : tensor<1x16x!tt.ptr<f32>> loc(#loc15)
    %20 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1x16x!tt.ptr<f32>> loc(#loc16)
    %21 = tt.addptr %20, %12 : tensor<1x16x!tt.ptr<f32>>, tensor<1x16xi32> loc(#loc16)
    %22 = tt.load %21, %15, %cst_3 : tensor<1x16x!tt.ptr<f32>> loc(#loc17)
    %23 = arith.subf %16, %19 : tensor<1x16xf32> loc(#loc18)
    %24 = math.absf %23 : tensor<1x16xf32> loc(#loc19)
    %25 = arith.mulf %24, %22 : tensor<1x16xf32> loc(#loc20)
    %26 = arith.cmpf olt, %25, %cst_2 : tensor<1x16xf32> loc(#loc21)
    %27 = arith.mulf %25, %cst_1 : tensor<1x16xf32> loc(#loc22)
    %28 = arith.addf %27, %cst_0 : tensor<1x16xf32> loc(#loc23)
    %29 = math.log %28 : tensor<1x16xf32> loc(#loc24)
    %30 = arith.mulf %29, %cst_2 : tensor<1x16xf32> loc(#loc25)
    %31 = arith.subf %25, %cst : tensor<1x16xf32> loc(#loc26)
    %32 = arith.select %26, %30, %31 : tensor<1x16xi1>, tensor<1x16xf32> loc(#loc27)
    %33 = arith.select %15, %32, %cst_3 : tensor<1x16xi1>, tensor<1x16xf32> loc(#loc28)
    %34 = "tt.reduce"(%33) <{axis = 1 : i32}> ({
    ^bb0(%arg6: f32 loc(callsite(#loc1 at #loc30)), %arg7: f32 loc(callsite(#loc1 at #loc30))):
      %38 = arith.addf %arg6, %arg7 : f32 loc(#loc39)
      tt.reduce.return %38 : f32 loc(#loc36)
    }) : (tensor<1x16xf32>) -> tensor<1xf32> loc(#loc36)
    %35 = tt.expand_dims %34 {axis = 1 : i32} : tensor<1xf32> -> tensor<1x1xf32> loc(#loc32)
    %36 = tt.addptr %arg3, %0 : !tt.ptr<f32>, i32 loc(#loc33)
    %37 = tt.splat %36 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>> loc(#loc33)
    tt.store %37, %35, %2 : tensor<1x1x!tt.ptr<f32>> loc(#loc34)
    tt.return loc(#loc35)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/kc/ckclhrvyajbvreghqfqbqtsfz4zni3n6wwhelqgjthzvzdgnhjpq.py":23:28)
#loc3 = loc("inductor_cache/kc/ckclhrvyajbvreghqfqbqtsfz4zni3n6wwhelqgjthzvzdgnhjpq.py":25:21)
#loc4 = loc("inductor_cache/kc/ckclhrvyajbvreghqfqbqtsfz4zni3n6wwhelqgjthzvzdgnhjpq.py":26:26)
#loc5 = loc("inductor_cache/kc/ckclhrvyajbvreghqfqbqtsfz4zni3n6wwhelqgjthzvzdgnhjpq.py":26:34)
#loc6 = loc("inductor_cache/kc/ckclhrvyajbvreghqfqbqtsfz4zni3n6wwhelqgjthzvzdgnhjpq.py":30:19)
#loc7 = loc("inductor_cache/kc/ckclhrvyajbvreghqfqbqtsfz4zni3n6wwhelqgjthzvzdgnhjpq.py":31:19)
#loc8 = loc("inductor_cache/kc/ckclhrvyajbvreghqfqbqtsfz4zni3n6wwhelqgjthzvzdgnhjpq.py":33:37)
#loc9 = loc("inductor_cache/kc/ckclhrvyajbvreghqfqbqtsfz4zni3n6wwhelqgjthzvzdgnhjpq.py":33:35)
#loc10 = loc("inductor_cache/kc/ckclhrvyajbvreghqfqbqtsfz4zni3n6wwhelqgjthzvzdgnhjpq.py":33:45)
#loc11 = loc("inductor_cache/kc/ckclhrvyajbvreghqfqbqtsfz4zni3n6wwhelqgjthzvzdgnhjpq.py":33:42)
#loc12 = loc("inductor_cache/kc/ckclhrvyajbvreghqfqbqtsfz4zni3n6wwhelqgjthzvzdgnhjpq.py":33:30)
#loc13 = loc("inductor_cache/kc/ckclhrvyajbvreghqfqbqtsfz4zni3n6wwhelqgjthzvzdgnhjpq.py":33:50)
#loc14 = loc("inductor_cache/kc/ckclhrvyajbvreghqfqbqtsfz4zni3n6wwhelqgjthzvzdgnhjpq.py":34:30)
#loc15 = loc("inductor_cache/kc/ckclhrvyajbvreghqfqbqtsfz4zni3n6wwhelqgjthzvzdgnhjpq.py":34:50)
#loc16 = loc("inductor_cache/kc/ckclhrvyajbvreghqfqbqtsfz4zni3n6wwhelqgjthzvzdgnhjpq.py":35:30)
#loc17 = loc("inductor_cache/kc/ckclhrvyajbvreghqfqbqtsfz4zni3n6wwhelqgjthzvzdgnhjpq.py":35:50)
#loc18 = loc("inductor_cache/kc/ckclhrvyajbvreghqfqbqtsfz4zni3n6wwhelqgjthzvzdgnhjpq.py":36:18)
#loc19 = loc("inductor_cache/kc/ckclhrvyajbvreghqfqbqtsfz4zni3n6wwhelqgjthzvzdgnhjpq.py":37:23)
#loc20 = loc("inductor_cache/kc/ckclhrvyajbvreghqfqbqtsfz4zni3n6wwhelqgjthzvzdgnhjpq.py":38:18)
#loc21 = loc("inductor_cache/kc/ckclhrvyajbvreghqfqbqtsfz4zni3n6wwhelqgjthzvzdgnhjpq.py":40:18)
#loc22 = loc("inductor_cache/kc/ckclhrvyajbvreghqfqbqtsfz4zni3n6wwhelqgjthzvzdgnhjpq.py":42:18)
#loc23 = loc("inductor_cache/kc/ckclhrvyajbvreghqfqbqtsfz4zni3n6wwhelqgjthzvzdgnhjpq.py":44:19)
#loc24 = loc("inductor_cache/kc/ckclhrvyajbvreghqfqbqtsfz4zni3n6wwhelqgjthzvzdgnhjpq.py":45:24)
#loc25 = loc("inductor_cache/kc/ckclhrvyajbvreghqfqbqtsfz4zni3n6wwhelqgjthzvzdgnhjpq.py":46:20)
#loc26 = loc("inductor_cache/kc/ckclhrvyajbvreghqfqbqtsfz4zni3n6wwhelqgjthzvzdgnhjpq.py":48:19)
#loc27 = loc("inductor_cache/kc/ckclhrvyajbvreghqfqbqtsfz4zni3n6wwhelqgjthzvzdgnhjpq.py":49:34)
#loc28 = loc("inductor_cache/kc/ckclhrvyajbvreghqfqbqtsfz4zni3n6wwhelqgjthzvzdgnhjpq.py":51:35)
#loc29 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc31 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc32 = loc("inductor_cache/kc/ckclhrvyajbvreghqfqbqtsfz4zni3n6wwhelqgjthzvzdgnhjpq.py":52:29)
#loc33 = loc("inductor_cache/kc/ckclhrvyajbvreghqfqbqtsfz4zni3n6wwhelqgjthzvzdgnhjpq.py":53:25)
#loc34 = loc("inductor_cache/kc/ckclhrvyajbvreghqfqbqtsfz4zni3n6wwhelqgjthzvzdgnhjpq.py":53:37)
#loc35 = loc("inductor_cache/kc/ckclhrvyajbvreghqfqbqtsfz4zni3n6wwhelqgjthzvzdgnhjpq.py":53:4)
#loc36 = loc(callsite(#loc29 at #loc30))
#loc38 = loc(callsite(#loc31 at #loc29))
#loc39 = loc(callsite(#loc38 at #loc30))
