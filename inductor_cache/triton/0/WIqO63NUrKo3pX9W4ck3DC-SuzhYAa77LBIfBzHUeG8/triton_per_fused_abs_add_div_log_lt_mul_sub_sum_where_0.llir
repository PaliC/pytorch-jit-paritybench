; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused_abs_add_div_log_lt_mul_sub_sum_where_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %8 = icmp slt i32 %7, 16, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %.frozen = freeze i32 %7, !dbg !13
  %10 = sdiv i32 %.frozen, 4, !dbg !13
  %11 = mul i32 %10, 4, !dbg !14
  %.decomposed = sub i32 %.frozen, %11, !dbg !14
  %12 = shl i32 %9, 2, !dbg !15
  %13 = and i32 %12, 60, !dbg !15
  %14 = add nsw i32 %.decomposed, %13, !dbg !16
  %15 = shl i32 %10, 6, !dbg !17
  %16 = add i32 %14, %15, !dbg !18
  %17 = sext i32 %16 to i64, !dbg !19
  %18 = getelementptr float, ptr addrspace(1) %0, i64 %17, !dbg !19
  %19 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %18, i1 %8, i32 0, i1 %8) #3, !dbg !20
  %20 = bitcast i32 %19 to float, !dbg !20
  %21 = getelementptr float, ptr addrspace(1) %1, i64 %17, !dbg !21
  %22 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %21, i1 %8, i32 0, i1 %8) #3, !dbg !22
  %23 = bitcast i32 %22 to float, !dbg !22
  %24 = getelementptr float, ptr addrspace(1) %2, i64 %17, !dbg !23
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %24, i1 %8, i32 0, i1 %8) #3, !dbg !24
  %26 = bitcast i32 %25 to float, !dbg !24
  %27 = fsub float %20, %23, !dbg !25
  %28 = tail call float @llvm.fabs.f32(float %27), !dbg !26
  %29 = fmul float %28, %26, !dbg !27
  %30 = fmul float %29, 5.000000e-01, !dbg !28
  %31 = fadd float %30, 1.000000e+00, !dbg !29
  %32 = fcmp olt float %31, 0x3810000000000000, !dbg !30
  %33 = fmul float %31, 0x4160000000000000, !dbg !30
  %.02.i = select i1 %32, float %33, float %31, !dbg !30
  %i.i.0.i = select i1 %32, float -2.300000e+01, float 0.000000e+00, !dbg !30
  %34 = bitcast float %.02.i to i32, !dbg !30
  %35 = add i32 %34, -1059760811, !dbg !30
  %36 = and i32 %35, -8388608, !dbg !30
  %37 = sub i32 %34, %36, !dbg !30
  %38 = bitcast i32 %37 to float, !dbg !30
  %39 = sitofp i32 %36 to float, !dbg !30
  %40 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i = icmp eq i32 %40, 0, !dbg !30
  %41 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %39, float 0x3E80000000000000, float %i.i.0.i) #3, !dbg !30
  %42 = tail call float @llvm.nvvm.fma.rn.f(float %39, float 0x3E80000000000000, float %i.i.0.i) #3, !dbg !30
  %.08.i = select i1 %.not.i, float %42, float %41, !dbg !30
  %43 = fadd float %38, -1.000000e+00, !dbg !30
  %44 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not1.i = icmp eq i32 %44, 0, !dbg !30
  %45 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0xBFC0AA04E0000000, float %43, float 0x3FC2073EC0000000) #3, !dbg !30
  %46 = tail call float @llvm.nvvm.fma.rn.f(float 0xBFC0AA04E0000000, float %43, float 0x3FC2073EC0000000) #3, !dbg !30
  %.010.i = select i1 %.not1.i, float %46, float %45, !dbg !30
  %47 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not2.i = icmp eq i32 %47, 0, !dbg !30
  %48 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.010.i, float %43, float 0xBFBF19B980000000) #3, !dbg !30
  %49 = tail call float @llvm.nvvm.fma.rn.f(float %.010.i, float %43, float 0xBFBF19B980000000) #3, !dbg !30
  %.011.i = select i1 %.not2.i, float %49, float %48, !dbg !30
  %50 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not3.i = icmp eq i32 %50, 0, !dbg !30
  %51 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.011.i, float %43, float 0x3FC1E52AA0000000) #3, !dbg !30
  %52 = tail call float @llvm.nvvm.fma.rn.f(float %.011.i, float %43, float 0x3FC1E52AA0000000) #3, !dbg !30
  %.012.i = select i1 %.not3.i, float %52, float %51, !dbg !30
  %53 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not4.i = icmp eq i32 %53, 0, !dbg !30
  %54 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.012.i, float %43, float 0xBFC55B1720000000) #3, !dbg !30
  %55 = tail call float @llvm.nvvm.fma.rn.f(float %.012.i, float %43, float 0xBFC55B1720000000) #3, !dbg !30
  %.09.i = select i1 %.not4.i, float %55, float %54, !dbg !30
  %56 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not5.i = icmp eq i32 %56, 0, !dbg !30
  %57 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.09.i, float %43, float 0x3FC99DA160000000) #3, !dbg !30
  %58 = tail call float @llvm.nvvm.fma.rn.f(float %.09.i, float %43, float 0x3FC99DA160000000) #3, !dbg !30
  %.05.i = select i1 %.not5.i, float %58, float %57, !dbg !30
  %59 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not6.i = icmp eq i32 %59, 0, !dbg !30
  %60 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i, float %43, float 0xBFCFFFE440000000) #3, !dbg !30
  %61 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i, float %43, float 0xBFCFFFE440000000) #3, !dbg !30
  %.01.i = select i1 %.not6.i, float %61, float %60, !dbg !30
  %62 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not7.i = icmp eq i32 %62, 0, !dbg !30
  %63 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.01.i, float %43, float 0x3FD5554F00000000) #3, !dbg !30
  %64 = tail call float @llvm.nvvm.fma.rn.f(float %.01.i, float %43, float 0x3FD5554F00000000) #3, !dbg !30
  %.0.i = select i1 %.not7.i, float %64, float %63, !dbg !30
  %65 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not8.i = icmp eq i32 %65, 0, !dbg !30
  %66 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i, float %43, float -5.000000e-01) #3, !dbg !30
  %67 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i, float %43, float -5.000000e-01) #3, !dbg !30
  %.07.i = select i1 %.not8.i, float %67, float %66, !dbg !30
  %68 = fmul float %43, %.07.i, !dbg !30
  %69 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not9.i = icmp eq i32 %69, 0, !dbg !30
  %70 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %68, float %43, float %43) #3, !dbg !30
  %71 = tail call float @llvm.nvvm.fma.rn.f(float %68, float %43, float %43) #3, !dbg !30
  %.06.i = select i1 %.not9.i, float %71, float %70, !dbg !30
  %72 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not10.i = icmp eq i32 %72, 0, !dbg !30
  %73 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.08.i, float 0x3FE62E4300000000, float %.06.i) #3, !dbg !30
  %74 = tail call float @llvm.nvvm.fma.rn.f(float %.08.i, float 0x3FE62E4300000000, float %.06.i) #3, !dbg !30
  %.04.i = select i1 %.not10.i, float %74, float %73, !dbg !30
  %75 = icmp ugt i32 %34, 2139095039, !dbg !30
  br i1 %75, label %__nv_fmaf_rn.exit.i.i, label %__nv_logf.exit, !dbg !30

__nv_fmaf_rn.exit.i.i:                            ; preds = %6
  %76 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not11.i = icmp eq i32 %76, 0, !dbg !30
  %77 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i, float 0x7FF0000000000000, float 0x7FF0000000000000) #3, !dbg !30
  %78 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i, float 0x7FF0000000000000, float 0x7FF0000000000000) #3, !dbg !30
  %.03.i = select i1 %.not11.i, float %78, float %77, !dbg !30
  br label %__nv_logf.exit, !dbg !30

__nv_logf.exit:                                   ; preds = %6, %__nv_fmaf_rn.exit.i.i
  %r.i.0.i = phi float [ %.03.i, %__nv_fmaf_rn.exit.i.i ], [ %.04.i, %6 ], !dbg !30
  %79 = fcmp olt float %29, 1.000000e+01, !dbg !31
  %80 = fcmp oeq float %.02.i, 0.000000e+00, !dbg !30
  %81 = fmul float %r.i.0.i, 1.000000e+01, !dbg !32
  %82 = select i1 %80, float 0xFFF0000000000000, float %81, !dbg !30
  %83 = fadd float %29, 0x401FAB9E00000000, !dbg !33
  %84 = select i1 %79, float %82, float %83, !dbg !34
  %85 = select i1 %8, float %84, float 0.000000e+00, !dbg !35
  %86 = bitcast float %85 to i32, !dbg !36
  %87 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %86, i32 8, i32 31), !dbg !36
  %88 = bitcast i32 %87 to float, !dbg !36
  %89 = fadd float %85, %88, !dbg !40
  %90 = bitcast float %89 to i32, !dbg !36
  %91 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %90, i32 4, i32 31), !dbg !36
  %92 = bitcast i32 %91 to float, !dbg !36
  %93 = fadd float %89, %92, !dbg !40
  %94 = bitcast float %93 to i32, !dbg !36
  %95 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %94, i32 2, i32 31), !dbg !36
  %96 = bitcast i32 %95 to float, !dbg !36
  %97 = fadd float %93, %96, !dbg !40
  %98 = bitcast float %97 to i32, !dbg !36
  %99 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %98, i32 1, i32 31), !dbg !36
  %100 = bitcast i32 %99 to float, !dbg !36
  %101 = fadd float %97, %100, !dbg !40
  %102 = sext i32 %7 to i64, !dbg !42
  %103 = getelementptr float, ptr addrspace(1) %3, i64 %102, !dbg !42
  %104 = and i32 %9, 63, !dbg !43
  %105 = icmp eq i32 %104, 0, !dbg !43
  %106 = bitcast float %101 to i32, !dbg !43
  %107 = and i1 %105, %8, !dbg !43
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %106, ptr addrspace(1) %103, i1 %107) #3, !dbg !43
  ret void, !dbg !44
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.fabs.f32(float) #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ckclhrvyajbvreghqfqbqtsfz4zni3n6wwhelqgjthzvzdgnhjpq.py", directory: "inductor_cache/kc")
!4 = !{ptr @triton_per_fused_abs_add_div_log_lt_mul_sub_sum_where_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_abs_add_div_log_lt_mul_sub_sum_where_0, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_abs_add_div_log_lt_mul_sub_sum_where_0", linkageName: "triton_per_fused_abs_add_div_log_lt_mul_sub_sum_where_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 21, scope: !7)
!12 = !DILocation(line: 26, column: 34, scope: !7)
!13 = !DILocation(line: 31, column: 19, scope: !7)
!14 = !DILocation(line: 30, column: 19, scope: !7)
!15 = !DILocation(line: 33, column: 37, scope: !7)
!16 = !DILocation(line: 33, column: 35, scope: !7)
!17 = !DILocation(line: 33, column: 45, scope: !7)
!18 = !DILocation(line: 33, column: 42, scope: !7)
!19 = !DILocation(line: 33, column: 30, scope: !7)
!20 = !DILocation(line: 33, column: 50, scope: !7)
!21 = !DILocation(line: 34, column: 30, scope: !7)
!22 = !DILocation(line: 34, column: 50, scope: !7)
!23 = !DILocation(line: 35, column: 30, scope: !7)
!24 = !DILocation(line: 35, column: 50, scope: !7)
!25 = !DILocation(line: 36, column: 18, scope: !7)
!26 = !DILocation(line: 37, column: 23, scope: !7)
!27 = !DILocation(line: 38, column: 18, scope: !7)
!28 = !DILocation(line: 42, column: 18, scope: !7)
!29 = !DILocation(line: 44, column: 19, scope: !7)
!30 = !DILocation(line: 45, column: 24, scope: !7)
!31 = !DILocation(line: 40, column: 18, scope: !7)
!32 = !DILocation(line: 46, column: 20, scope: !7)
!33 = !DILocation(line: 48, column: 19, scope: !7)
!34 = !DILocation(line: 49, column: 34, scope: !7)
!35 = !DILocation(line: 51, column: 35, scope: !7)
!36 = !DILocation(line: 267, column: 36, scope: !37, inlinedAt: !39)
!37 = distinct !DILexicalBlockFile(scope: !7, file: !38, discriminator: 0)
!38 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!39 = !DILocation(line: 52, column: 26, scope: !7)
!40 = !DILocation(line: 256, column: 15, scope: !41, inlinedAt: !39)
!41 = distinct !DILexicalBlockFile(scope: !37, file: !38, discriminator: 0)
!42 = !DILocation(line: 53, column: 25, scope: !7)
!43 = !DILocation(line: 53, column: 37, scope: !7)
!44 = !DILocation(line: 53, column: 4, scope: !7)
