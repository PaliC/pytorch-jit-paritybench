; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused_convolution_native_group_norm_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %9 = shl i32 %8, 3, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = lshr i32 %10, 5, !dbg !12
  %12 = and i32 %11, 7, !dbg !12
  %13 = and i32 %10, 31, !dbg !12
  %14 = and i32 %10, 7, !dbg !12
  %15 = or disjoint i32 %9, %12, !dbg !13
  %16 = or disjoint i32 %9, %14, !dbg !13
  %17 = icmp slt i32 %16, 64, !dbg !14
  %18 = icmp slt i32 %15, 64, !dbg !14
  %19 = shl i32 %10, 2, !dbg !15
  %20 = and i32 %19, 124, !dbg !15
  %21 = srem i32 %16, 16, !dbg !16
  %22 = shl i32 %15, 7, !dbg !17
  %23 = or disjoint i32 %22, %20, !dbg !18
  %24 = sext i32 %23 to i64, !dbg !19
  %25 = getelementptr float, ptr addrspace(1) %0, i64 %24, !dbg !19
  %26 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %25, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18) #5, !dbg !20
  %27 = extractvalue { i32, i32, i32, i32 } %26, 0, !dbg !20
  %28 = extractvalue { i32, i32, i32, i32 } %26, 1, !dbg !20
  %29 = extractvalue { i32, i32, i32, i32 } %26, 2, !dbg !20
  %30 = extractvalue { i32, i32, i32, i32 } %26, 3, !dbg !20
  %31 = shl i32 %10, 5, !dbg !20
  %32 = and i32 %31, 992, !dbg !20
  %33 = or disjoint i32 %32, %12, !dbg !20
  %34 = and i32 %10, 255, !dbg !20
  %35 = lshr exact i32 %32, 1, !dbg !20
  %36 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %35, !dbg !20
  %37 = getelementptr inbounds float, ptr addrspace(3) %36, i32 %33, !dbg !20
  %38 = insertelement <1 x i32> poison, i32 %27, i64 0, !dbg !20
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %37, <1 x i32> %38, i1 true) #5, !dbg !20
  %39 = or disjoint i32 %33, 8, !dbg !20
  %40 = lshr i32 %39, 3, !dbg !20
  %41 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %40, !dbg !20
  %42 = getelementptr inbounds float, ptr addrspace(3) %41, i32 %39, !dbg !20
  %43 = insertelement <1 x i32> poison, i32 %28, i64 0, !dbg !20
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %42, <1 x i32> %43, i1 true) #5, !dbg !20
  %44 = or disjoint i32 %33, 16, !dbg !20
  %45 = lshr i32 %44, 3, !dbg !20
  %46 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %45, !dbg !20
  %47 = getelementptr inbounds float, ptr addrspace(3) %46, i32 %44, !dbg !20
  %48 = insertelement <1 x i32> poison, i32 %29, i64 0, !dbg !20
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %47, <1 x i32> %48, i1 true) #5, !dbg !20
  %49 = or disjoint i32 %33, 24, !dbg !20
  %50 = lshr i32 %49, 3, !dbg !20
  %51 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %50, !dbg !20
  %52 = getelementptr inbounds float, ptr addrspace(3) %51, i32 %49, !dbg !20
  %53 = insertelement <1 x i32> poison, i32 %30, i64 0, !dbg !20
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %52, <1 x i32> %53, i1 true) #5, !dbg !20
  tail call void @llvm.nvvm.barrier0(), !dbg !20
  %54 = lshr i32 %34, 3, !dbg !20
  %55 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %54, !dbg !20
  %56 = getelementptr inbounds float, ptr addrspace(3) %55, i32 %34, !dbg !20
  %57 = load float, ptr addrspace(3) %56, align 4, !dbg !20
  %58 = or disjoint i32 %34, 256, !dbg !20
  %59 = lshr i32 %58, 3, !dbg !20
  %60 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %59, !dbg !20
  %61 = getelementptr inbounds float, ptr addrspace(3) %60, i32 %58, !dbg !20
  %62 = load float, ptr addrspace(3) %61, align 4, !dbg !20
  %63 = or disjoint i32 %34, 512, !dbg !20
  %64 = lshr i32 %63, 3, !dbg !20
  %65 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %64, !dbg !20
  %66 = getelementptr inbounds float, ptr addrspace(3) %65, i32 %63, !dbg !20
  %67 = load float, ptr addrspace(3) %66, align 4, !dbg !20
  %68 = or disjoint i32 %34, 768, !dbg !20
  %69 = lshr i32 %68, 3, !dbg !20
  %70 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %69, !dbg !20
  %71 = getelementptr inbounds float, ptr addrspace(3) %70, i32 %68, !dbg !20
  %72 = load float, ptr addrspace(3) %71, align 4, !dbg !20
  %73 = shl nsw i32 %21, 1, !dbg !21
  %74 = or disjoint i32 %73, 1, !dbg !22
  %75 = sext i32 %73 to i64, !dbg !23
  %76 = getelementptr float, ptr addrspace(1) %1, i64 %75, !dbg !23
  %77 = sext i32 %74 to i64, !dbg !23
  %78 = getelementptr float, ptr addrspace(1) %1, i64 %77, !dbg !23
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %76, i1 %17, i32 0, i1 %17) #5, !dbg !24
  %80 = bitcast i32 %79 to float, !dbg !24
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %76, i1 %17, i32 0, i1 %17) #5, !dbg !24
  %82 = bitcast i32 %81 to float, !dbg !24
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %78, i1 %17, i32 0, i1 %17) #5, !dbg !24
  %84 = bitcast i32 %83 to float, !dbg !24
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %78, i1 %17, i32 0, i1 %17) #5, !dbg !24
  %86 = bitcast i32 %85 to float, !dbg !24
  %87 = fadd float %57, %80, !dbg !25
  %88 = fadd float %62, %82, !dbg !25
  %89 = fadd float %67, %84, !dbg !25
  %90 = fadd float %72, %86, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %91 = fadd float %87, %88, !dbg !30
  %92 = fadd float %91, %89, !dbg !30
  %93 = fadd float %92, %90, !dbg !30
  %94 = select i1 %17, float %93, float 0.000000e+00, !dbg !30
  %95 = bitcast float %94 to i32, !dbg !26
  %96 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %95, i32 16, i32 31), !dbg !26
  %97 = bitcast i32 %96 to float, !dbg !26
  %98 = fadd float %94, %97, !dbg !30
  %99 = bitcast float %98 to i32, !dbg !26
  %100 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %99, i32 8, i32 31), !dbg !26
  %101 = bitcast i32 %100 to float, !dbg !26
  %102 = fadd float %98, %101, !dbg !30
  %103 = icmp samesign ult i32 %13, 8, !dbg !26
  %104 = shl nuw nsw i32 %14, 3, !dbg !26
  %105 = or disjoint i32 %104, %12, !dbg !26
  %106 = getelementptr float, ptr addrspace(3) @global_smem, i32 %105, !dbg !26
  %107 = bitcast float %102 to <1 x i32>, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %106, <1 x i32> %107, i1 %103) #5, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %108 = icmp slt i32 %10, 64, !dbg !26
  %109 = getelementptr float, ptr addrspace(3) @global_smem, i32 %10, !dbg !26
  %110 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %109, i1 %108) #5, !dbg !26
  %111 = bitcast i32 %110 to float, !dbg !26
  %112 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %110, i32 4, i32 31), !dbg !26
  %113 = bitcast i32 %112 to float, !dbg !26
  %114 = fadd float %111, %113, !dbg !30
  %115 = bitcast float %114 to i32, !dbg !26
  %116 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %115, i32 2, i32 31), !dbg !26
  %117 = bitcast i32 %116 to float, !dbg !26
  %118 = fadd float %114, %117, !dbg !30
  %119 = bitcast float %118 to i32, !dbg !26
  %120 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %119, i32 1, i32 31), !dbg !26
  %121 = bitcast i32 %120 to float, !dbg !26
  %122 = fadd float %118, %121, !dbg !30
  %123 = icmp eq i32 %14, 0, !dbg !26
  %124 = and i1 %108, %123, !dbg !26
  %125 = bitcast float %122 to <1 x i32>, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %109, <1 x i32> %125, i1 %124) #5, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %126 = getelementptr float, ptr addrspace(3) @global_smem, i32 %104, !dbg !26
  %127 = load float, ptr addrspace(3) %126, align 16, !dbg !26
  %128 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %127, float 1.280000e+02) #5, !dbg !32
  %129 = fsub float %87, %128, !dbg !33
  %130 = fsub float %88, %128, !dbg !33
  %131 = fsub float %89, %128, !dbg !33
  %132 = fsub float %90, %128, !dbg !33
  %133 = fmul float %129, %129, !dbg !34
  %134 = fmul float %130, %130, !dbg !34
  %135 = fmul float %131, %131, !dbg !34
  %136 = fmul float %132, %132, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %137 = fadd float %133, %134, !dbg !37
  %138 = fadd float %135, %137, !dbg !37
  %139 = fadd float %136, %138, !dbg !37
  %140 = select i1 %17, float %139, float 0.000000e+00, !dbg !37
  %141 = bitcast float %140 to i32, !dbg !35
  %142 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %141, i32 16, i32 31), !dbg !35
  %143 = bitcast i32 %142 to float, !dbg !35
  %144 = fadd float %140, %143, !dbg !37
  %145 = bitcast float %144 to i32, !dbg !35
  %146 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %145, i32 8, i32 31), !dbg !35
  %147 = bitcast i32 %146 to float, !dbg !35
  %148 = fadd float %144, %147, !dbg !37
  %149 = bitcast float %148 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %106, <1 x i32> %149, i1 %103) #5, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %150 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %109, i1 %108) #5, !dbg !35
  %151 = bitcast i32 %150 to float, !dbg !35
  %152 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %150, i32 4, i32 31), !dbg !35
  %153 = bitcast i32 %152 to float, !dbg !35
  %154 = fadd float %151, %153, !dbg !37
  %155 = bitcast float %154 to i32, !dbg !35
  %156 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %155, i32 2, i32 31), !dbg !35
  %157 = bitcast i32 %156 to float, !dbg !35
  %158 = fadd float %154, %157, !dbg !37
  %159 = bitcast float %158 to i32, !dbg !35
  %160 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %159, i32 1, i32 31), !dbg !35
  %161 = bitcast i32 %160 to float, !dbg !35
  %162 = fadd float %158, %161, !dbg !37
  %163 = bitcast float %162 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %109, <1 x i32> %163, i1 %124) #5, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %164 = load float, ptr addrspace(3) %126, align 16, !dbg !35
  %165 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %164, float 1.280000e+02) #5, !dbg !38
  %166 = fadd float %165, 0x3EE4F8B580000000, !dbg !39
  %167 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !40
  %.not.i = icmp eq i32 %167, 0, !dbg !40
  br i1 %.not.i, label %170, label %168, !dbg !40

168:                                              ; preds = %7
  %169 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %166), !dbg !40
  br label %__nv_rsqrtf.exit, !dbg !40

170:                                              ; preds = %7
  %171 = tail call float @llvm.nvvm.rsqrt.approx.f(float %166), !dbg !40
  br label %__nv_rsqrtf.exit, !dbg !40

__nv_rsqrtf.exit:                                 ; preds = %168, %170
  %.0.i = phi float [ %169, %168 ], [ %171, %170 ], !dbg !40
  %172 = lshr i32 %13, 3, !dbg !26
  %173 = lshr i32 %10, 3, !dbg !15
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %174 = shl i32 %10, 7, !dbg !41
  %175 = and i32 %174, 896, !dbg !41
  %176 = and i32 %173, 31, !dbg !41
  %177 = or disjoint i32 %175, %176, !dbg !41
  %178 = and i32 %19, 1020, !dbg !41
  %179 = lshr exact i32 %175, 3, !dbg !41
  %180 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %179, !dbg !41
  %181 = getelementptr inbounds float, ptr addrspace(3) %180, i32 %177, !dbg !41
  %182 = bitcast float %87 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %181, <1 x i32> %182, i1 true) #5, !dbg !41
  %183 = or disjoint i32 %177, 32, !dbg !41
  %184 = getelementptr inbounds float, ptr addrspace(3) %180, i32 %183, !dbg !41
  %185 = bitcast float %88 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %184, <1 x i32> %185, i1 true) #5, !dbg !41
  %186 = or disjoint i32 %177, 64, !dbg !41
  %187 = getelementptr inbounds float, ptr addrspace(3) %180, i32 %186, !dbg !41
  %188 = bitcast float %89 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %187, <1 x i32> %188, i1 true) #5, !dbg !41
  %189 = or disjoint i32 %177, 96, !dbg !41
  %190 = getelementptr inbounds float, ptr addrspace(3) %180, i32 %189, !dbg !41
  %191 = bitcast float %90 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %190, <1 x i32> %191, i1 true) #5, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %192 = lshr i32 %19, 5, !dbg !41
  %193 = and i32 %192, 28, !dbg !41
  %194 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %193, !dbg !41
  %195 = getelementptr inbounds float, ptr addrspace(3) %194, i32 %178, !dbg !41
  %.extract = load i32, ptr addrspace(3) %195, align 16, !dbg !41
  %196 = getelementptr inbounds i8, ptr addrspace(3) %195, i32 4, !dbg !41
  %.extract7 = load i32, ptr addrspace(3) %196, align 4, !dbg !41
  %197 = getelementptr inbounds i8, ptr addrspace(3) %195, i32 8, !dbg !41
  %.extract8 = load i32, ptr addrspace(3) %197, align 8, !dbg !41
  %198 = getelementptr inbounds i8, ptr addrspace(3) %195, i32 12, !dbg !41
  %.extract9 = load i32, ptr addrspace(3) %198, align 4, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract7, i32 %.extract8, i32 %.extract9, ptr addrspace(1) %25, i1 %18) #5, !dbg !41
  %199 = sext i32 %16 to i64, !dbg !42
  %200 = getelementptr float, ptr addrspace(1) %4, i64 %199, !dbg !42
  %201 = shl nuw nsw i32 %12, 2, !dbg !43
  %202 = or disjoint i32 %201, %172, !dbg !43
  %203 = icmp eq i32 %202, 0, !dbg !43
  %204 = bitcast float %.0.i to i32, !dbg !43
  %205 = and i1 %203, %17, !dbg !43
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %204, ptr addrspace(1) %200, i1 %205) #5, !dbg !43
  %206 = getelementptr float, ptr addrspace(1) %2, i64 %199, !dbg !44
  %207 = bitcast float %128 to i32, !dbg !45
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %207, ptr addrspace(1) %206, i1 %205) #5, !dbg !45
  %208 = getelementptr float, ptr addrspace(1) %3, i64 %199, !dbg !46
  %209 = bitcast float %164 to i32, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %209, ptr addrspace(1) %208, i1 %205) #5, !dbg !47
  ret void, !dbg !48
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cemfxvutksyd2efpo5qschmjbras5lkuotdig3djlwccl4hkxxi6.py", directory: "inductor_cache/em")
!4 = !{ptr @triton_per_fused_convolution_native_group_norm_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_convolution_native_group_norm_0, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_convolution_native_group_norm_0", linkageName: "triton_per_fused_convolution_native_group_norm_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 32, column: 19, scope: !7)
!17 = !DILocation(line: 33, column: 43, scope: !7)
!18 = !DILocation(line: 33, column: 39, scope: !7)
!19 = !DILocation(line: 33, column: 34, scope: !7)
!20 = !DILocation(line: 33, column: 48, scope: !7)
!21 = !DILocation(line: 34, column: 37, scope: !7)
!22 = !DILocation(line: 34, column: 35, scope: !7)
!23 = !DILocation(line: 34, column: 30, scope: !7)
!24 = !DILocation(line: 34, column: 42, scope: !7)
!25 = !DILocation(line: 35, column: 18, scope: !7)
!26 = !DILocation(line: 267, column: 36, scope: !27, inlinedAt: !29)
!27 = distinct !DILexicalBlockFile(scope: !7, file: !28, discriminator: 0)
!28 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!29 = !DILocation(line: 40, column: 24, scope: !7)
!30 = !DILocation(line: 256, column: 15, scope: !31, inlinedAt: !29)
!31 = distinct !DILexicalBlockFile(scope: !27, file: !28, discriminator: 0)
!32 = !DILocation(line: 43, column: 19, scope: !7)
!33 = !DILocation(line: 44, column: 19, scope: !7)
!34 = !DILocation(line: 45, column: 20, scope: !7)
!35 = !DILocation(line: 267, column: 36, scope: !27, inlinedAt: !36)
!36 = !DILocation(line: 48, column: 26, scope: !7)
!37 = !DILocation(line: 256, column: 15, scope: !31, inlinedAt: !36)
!38 = !DILocation(line: 50, column: 20, scope: !7)
!39 = !DILocation(line: 52, column: 20, scope: !7)
!40 = !DILocation(line: 53, column: 28, scope: !7)
!41 = !DILocation(line: 54, column: 48, scope: !7)
!42 = !DILocation(line: 55, column: 25, scope: !7)
!43 = !DILocation(line: 55, column: 37, scope: !7)
!44 = !DILocation(line: 56, column: 25, scope: !7)
!45 = !DILocation(line: 56, column: 37, scope: !7)
!46 = !DILocation(line: 57, column: 25, scope: !7)
!47 = !DILocation(line: 57, column: 37, scope: !7)
!48 = !DILocation(line: 57, column: 4, scope: !7)
