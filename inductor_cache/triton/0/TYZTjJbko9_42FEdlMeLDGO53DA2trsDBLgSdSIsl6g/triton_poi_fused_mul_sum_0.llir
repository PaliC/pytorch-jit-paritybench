; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_mul_sum_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %6 = shl i32 %5, 6, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 1, !dbg !12
  %9 = and i32 %8, 62, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = icmp slt i32 %10, 64, !dbg !14
  %.frozen = freeze i32 %10, !dbg !15
  %12 = sdiv i32 %.frozen, 4, !dbg !15
  %13 = mul i32 %12, 4, !dbg !16
  %.decomposed = sub i32 %.frozen, %13, !dbg !16
  %14 = shl i32 %12, 4, !dbg !17
  %15 = add i32 %14, %.decomposed, !dbg !18
  %16 = sext i32 %15 to i64, !dbg !19
  %17 = getelementptr float, ptr addrspace(1) %0, i64 %16, !dbg !19
  %18 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %17, i1 %11) #1, !dbg !20
  %19 = extractvalue { i32, i32 } %18, 0, !dbg !20
  %20 = extractvalue { i32, i32 } %18, 1, !dbg !20
  %21 = getelementptr float, ptr addrspace(1) %1, i64 %16, !dbg !21
  %22 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %21, i1 %11) #1, !dbg !22
  %23 = extractvalue { i32, i32 } %22, 0, !dbg !22
  %24 = extractvalue { i32, i32 } %22, 1, !dbg !22
  %25 = add i32 %15, 4, !dbg !23
  %26 = sext i32 %25 to i64, !dbg !24
  %27 = getelementptr float, ptr addrspace(1) %0, i64 %26, !dbg !24
  %28 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %27, i1 %11) #1, !dbg !25
  %29 = extractvalue { i32, i32 } %28, 0, !dbg !25
  %30 = extractvalue { i32, i32 } %28, 1, !dbg !25
  %31 = getelementptr float, ptr addrspace(1) %1, i64 %26, !dbg !26
  %32 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %31, i1 %11) #1, !dbg !27
  %33 = extractvalue { i32, i32 } %32, 0, !dbg !27
  %34 = extractvalue { i32, i32 } %32, 1, !dbg !27
  %35 = add i32 %15, 8, !dbg !28
  %36 = sext i32 %35 to i64, !dbg !29
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !29
  %38 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %37, i1 %11) #1, !dbg !30
  %39 = extractvalue { i32, i32 } %38, 0, !dbg !30
  %40 = extractvalue { i32, i32 } %38, 1, !dbg !30
  %41 = getelementptr float, ptr addrspace(1) %1, i64 %36, !dbg !31
  %42 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %41, i1 %11) #1, !dbg !32
  %43 = extractvalue { i32, i32 } %42, 0, !dbg !32
  %44 = extractvalue { i32, i32 } %42, 1, !dbg !32
  %45 = add i32 %15, 12, !dbg !33
  %46 = sext i32 %45 to i64, !dbg !34
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !34
  %48 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %47, i1 %11) #1, !dbg !35
  %49 = extractvalue { i32, i32 } %48, 0, !dbg !35
  %50 = extractvalue { i32, i32 } %48, 1, !dbg !35
  %51 = getelementptr float, ptr addrspace(1) %1, i64 %46, !dbg !36
  %52 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %51, i1 %11) #1, !dbg !37
  %53 = extractvalue { i32, i32 } %52, 0, !dbg !37
  %54 = extractvalue { i32, i32 } %52, 1, !dbg !37
  %55 = insertelement <2 x i32> poison, i32 %19, i64 0, !dbg !20
  %56 = insertelement <2 x i32> %55, i32 %29, i64 1, !dbg !20
  %57 = bitcast <2 x i32> %56 to <2 x float>, !dbg !20
  %58 = insertelement <2 x i32> poison, i32 %23, i64 0, !dbg !22
  %59 = insertelement <2 x i32> %58, i32 %33, i64 1, !dbg !22
  %60 = bitcast <2 x i32> %59 to <2 x float>, !dbg !22
  %61 = fmul <2 x float> %57, %60, !dbg !38
  %62 = insertelement <2 x i32> poison, i32 %20, i64 0, !dbg !20
  %63 = insertelement <2 x i32> %62, i32 %30, i64 1, !dbg !20
  %64 = bitcast <2 x i32> %63 to <2 x float>, !dbg !20
  %65 = insertelement <2 x i32> poison, i32 %24, i64 0, !dbg !22
  %66 = insertelement <2 x i32> %65, i32 %34, i64 1, !dbg !22
  %67 = bitcast <2 x i32> %66 to <2 x float>, !dbg !22
  %68 = fmul <2 x float> %64, %67, !dbg !38
  %shift = shufflevector <2 x float> %61, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !39
  %69 = fadd <2 x float> %61, %shift, !dbg !39
  %shift1 = shufflevector <2 x float> %68, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !39
  %70 = fadd <2 x float> %68, %shift1, !dbg !39
  %71 = insertelement <2 x i32> poison, i32 %39, i64 0, !dbg !30
  %72 = insertelement <2 x i32> %71, i32 %49, i64 1, !dbg !30
  %73 = bitcast <2 x i32> %72 to <2 x float>, !dbg !30
  %74 = insertelement <2 x i32> poison, i32 %43, i64 0, !dbg !32
  %75 = insertelement <2 x i32> %74, i32 %53, i64 1, !dbg !32
  %76 = bitcast <2 x i32> %75 to <2 x float>, !dbg !32
  %77 = fmul <2 x float> %73, %76, !dbg !40
  %78 = fadd <2 x float> %69, %77, !dbg !41
  %79 = insertelement <2 x i32> poison, i32 %40, i64 0, !dbg !30
  %80 = insertelement <2 x i32> %79, i32 %50, i64 1, !dbg !30
  %81 = bitcast <2 x i32> %80 to <2 x float>, !dbg !30
  %82 = insertelement <2 x i32> poison, i32 %44, i64 0, !dbg !32
  %83 = insertelement <2 x i32> %82, i32 %54, i64 1, !dbg !32
  %84 = bitcast <2 x i32> %83 to <2 x float>, !dbg !32
  %85 = fmul <2 x float> %81, %84, !dbg !40
  %86 = fadd <2 x float> %70, %85, !dbg !41
  %shift2 = shufflevector <2 x float> %77, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !42
  %87 = fadd <2 x float> %78, %shift2, !dbg !42
  %shift3 = shufflevector <2 x float> %85, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !42
  %88 = fadd <2 x float> %86, %shift3, !dbg !42
  %89 = sext i32 %10 to i64, !dbg !43
  %90 = getelementptr float, ptr addrspace(1) %2, i64 %89, !dbg !43
  %bc = bitcast <2 x float> %87 to <2 x i32>, !dbg !44
  %91 = extractelement <2 x i32> %bc, i64 0, !dbg !44
  %bc4 = bitcast <2 x float> %88 to <2 x i32>, !dbg !44
  %92 = extractelement <2 x i32> %bc4, i64 0, !dbg !44
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %91, i32 %92, ptr addrspace(1) %90, i1 %11) #1, !dbg !44
  ret void, !dbg !45
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cohuyjwjfb4jvhhpmmk2rqp3r2skabehrw5cyueilwh5pxmgiz34.py", directory: "inductor_cache/oh")
!4 = !{ptr @triton_poi_fused_mul_sum_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_mul_sum_0, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_mul_sum_0", linkageName: "triton_poi_fused_mul_sum_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 24, column: 19, scope: !7)
!17 = !DILocation(line: 27, column: 38, scope: !7)
!18 = !DILocation(line: 27, column: 35, scope: !7)
!19 = !DILocation(line: 27, column: 30, scope: !7)
!20 = !DILocation(line: 27, column: 43, scope: !7)
!21 = !DILocation(line: 28, column: 30, scope: !7)
!22 = !DILocation(line: 28, column: 43, scope: !7)
!23 = !DILocation(line: 29, column: 39, scope: !7)
!24 = !DILocation(line: 29, column: 30, scope: !7)
!25 = !DILocation(line: 29, column: 47, scope: !7)
!26 = !DILocation(line: 30, column: 30, scope: !7)
!27 = !DILocation(line: 30, column: 47, scope: !7)
!28 = !DILocation(line: 31, column: 39, scope: !7)
!29 = !DILocation(line: 31, column: 30, scope: !7)
!30 = !DILocation(line: 31, column: 47, scope: !7)
!31 = !DILocation(line: 32, column: 30, scope: !7)
!32 = !DILocation(line: 32, column: 47, scope: !7)
!33 = !DILocation(line: 33, column: 41, scope: !7)
!34 = !DILocation(line: 33, column: 31, scope: !7)
!35 = !DILocation(line: 33, column: 49, scope: !7)
!36 = !DILocation(line: 34, column: 31, scope: !7)
!37 = !DILocation(line: 34, column: 49, scope: !7)
!38 = !DILocation(line: 35, column: 18, scope: !7)
!39 = !DILocation(line: 37, column: 18, scope: !7)
!40 = !DILocation(line: 38, column: 18, scope: !7)
!41 = !DILocation(line: 39, column: 19, scope: !7)
!42 = !DILocation(line: 41, column: 20, scope: !7)
!43 = !DILocation(line: 42, column: 25, scope: !7)
!44 = !DILocation(line: 42, column: 37, scope: !7)
!45 = !DILocation(line: 42, column: 4, scope: !7)
