; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_20(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %6 = shl i32 %5, 5, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = lshr i32 %7, 3, !dbg !12
  %9 = and i32 %8, 15, !dbg !12
  %10 = or disjoint i32 %9, 16, !dbg !12
  %11 = shl i32 %7, 2, !dbg !12
  %12 = and i32 %11, 28, !dbg !12
  %13 = or disjoint i32 %6, %9, !dbg !13
  %14 = or disjoint i32 %6, %10, !dbg !13
  %15 = or disjoint i32 %6, %12, !dbg !13
  %16 = icmp slt i32 %13, 128, !dbg !14
  %17 = icmp slt i32 %14, 128, !dbg !14
  %18 = icmp slt i32 %15, 128, !dbg !14
  %19 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %20 = shl i32 %19, 5, !dbg !16
  %21 = or disjoint i32 %20, %12, !dbg !17
  %22 = or disjoint i32 %20, %9, !dbg !17
  %23 = or disjoint i32 %20, %10, !dbg !17
  %24 = icmp slt i32 %21, 256, !dbg !18
  %25 = icmp slt i32 %22, 256, !dbg !18
  %26 = icmp slt i32 %23, 256, !dbg !18
  %.frozen = freeze i32 %13, !dbg !19
  %27 = sdiv i32 %.frozen, 32, !dbg !19
  %28 = mul i32 %27, 32, !dbg !20
  %.decomposed = sub i32 %.frozen, %28, !dbg !20
  %.frozen15 = freeze i32 %14, !dbg !19
  %29 = sdiv i32 %.frozen15, 32, !dbg !19
  %30 = mul i32 %29, 32, !dbg !20
  %.decomposed16 = sub i32 %.frozen15, %30, !dbg !20
  %.frozen17 = freeze i32 %15, !dbg !19
  %31 = sdiv i32 %.frozen17, 32, !dbg !19
  %32 = mul i32 %31, 32, !dbg !20
  %.decomposed18 = sub i32 %.frozen17, %32, !dbg !20
  %33 = shl nsw i32 %.decomposed, 8, !dbg !21
  %34 = shl nsw i32 %.decomposed16, 8, !dbg !21
  %35 = add i32 %33, %21, !dbg !22
  %36 = add i32 %34, %21, !dbg !22
  %37 = shl i32 %27, 14, !dbg !23
  %38 = shl i32 %29, 14, !dbg !23
  %39 = add i32 %35, %37, !dbg !24
  %40 = add i32 %36, %38, !dbg !24
  %41 = sext i32 %39 to i64, !dbg !25
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !25
  %43 = sext i32 %40 to i64, !dbg !25
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !25
  %45 = and i1 %16, %24, !dbg !26
  %46 = and i1 %17, %24, !dbg !26
  %47 = and i1 %18, %25, !dbg !26
  %48 = and i1 %18, %26, !dbg !26
  %49 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %42, i1 %45) #2, !dbg !27
  %50 = extractvalue { i32, i32, i32, i32 } %49, 0, !dbg !27
  %51 = extractvalue { i32, i32, i32, i32 } %49, 1, !dbg !27
  %52 = extractvalue { i32, i32, i32, i32 } %49, 2, !dbg !27
  %53 = extractvalue { i32, i32, i32, i32 } %49, 3, !dbg !27
  %54 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %44, i1 %46) #2, !dbg !27
  %55 = extractvalue { i32, i32, i32, i32 } %54, 0, !dbg !27
  %56 = extractvalue { i32, i32, i32, i32 } %54, 1, !dbg !27
  %57 = extractvalue { i32, i32, i32, i32 } %54, 2, !dbg !27
  %58 = extractvalue { i32, i32, i32, i32 } %54, 3, !dbg !27
  %59 = shl i32 %22, 5, !dbg !28
  %60 = shl i32 %23, 5, !dbg !28
  %61 = shl i32 %31, 13, !dbg !29
  %62 = add i32 %61, %.decomposed18, !dbg !30
  %63 = add i32 %62, %59, !dbg !31
  %64 = add i32 %62, %60, !dbg !31
  %65 = sext i32 %63 to i64, !dbg !32
  %66 = getelementptr float, ptr addrspace(1) %1, i64 %65, !dbg !32
  %67 = sext i32 %64 to i64, !dbg !32
  %68 = getelementptr float, ptr addrspace(1) %1, i64 %67, !dbg !32
  %69 = shl i32 %7, 7, !dbg !33
  %70 = and i32 %69, 896, !dbg !33
  %71 = or disjoint i32 %70, %9, !dbg !33
  %72 = and i32 %11, 508, !dbg !33
  %73 = lshr exact i32 %70, 1, !dbg !33
  %74 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %73, !dbg !33
  %75 = getelementptr float, ptr addrspace(3) %74, i32 %71, !dbg !33
  %76 = insertelement <1 x i32> poison, i32 %50, i64 0, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %75, <1 x i32> %76, i1 true) #2, !dbg !33
  %77 = or disjoint i32 %71, 32, !dbg !33
  %78 = lshr i32 %77, 3, !dbg !33
  %79 = and i32 %78, 116, !dbg !33
  %80 = getelementptr float, ptr addrspace(3) @global_smem, i32 %79, !dbg !33
  %81 = getelementptr float, ptr addrspace(3) %80, i32 %77, !dbg !33
  %82 = insertelement <1 x i32> poison, i32 %51, i64 0, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %81, <1 x i32> %82, i1 true) #2, !dbg !33
  %83 = or disjoint i32 %71, 64, !dbg !33
  %84 = lshr i32 %83, 3, !dbg !33
  %85 = and i32 %84, 120, !dbg !33
  %86 = getelementptr float, ptr addrspace(3) @global_smem, i32 %85, !dbg !33
  %87 = getelementptr float, ptr addrspace(3) %86, i32 %83, !dbg !33
  %88 = insertelement <1 x i32> poison, i32 %52, i64 0, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %87, <1 x i32> %88, i1 true) #2, !dbg !33
  %89 = or disjoint i32 %71, 96, !dbg !33
  %90 = lshr i32 %89, 3, !dbg !33
  %91 = and i32 %90, 124, !dbg !33
  %92 = getelementptr float, ptr addrspace(3) @global_smem, i32 %91, !dbg !33
  %93 = getelementptr float, ptr addrspace(3) %92, i32 %89, !dbg !33
  %94 = insertelement <1 x i32> poison, i32 %53, i64 0, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %93, <1 x i32> %94, i1 true) #2, !dbg !33
  %95 = or disjoint i32 %71, 16, !dbg !33
  %96 = getelementptr float, ptr addrspace(3) %74, i32 %95, !dbg !33
  %97 = insertelement <1 x i32> poison, i32 %55, i64 0, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %96, <1 x i32> %97, i1 true) #2, !dbg !33
  %98 = or disjoint i32 %71, 48, !dbg !33
  %99 = lshr i32 %98, 3, !dbg !33
  %100 = and i32 %99, 116, !dbg !33
  %101 = getelementptr float, ptr addrspace(3) @global_smem, i32 %100, !dbg !33
  %102 = getelementptr float, ptr addrspace(3) %101, i32 %98, !dbg !33
  %103 = insertelement <1 x i32> poison, i32 %56, i64 0, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %102, <1 x i32> %103, i1 true) #2, !dbg !33
  %104 = or disjoint i32 %71, 80, !dbg !33
  %105 = lshr i32 %104, 3, !dbg !33
  %106 = and i32 %105, 120, !dbg !33
  %107 = getelementptr float, ptr addrspace(3) @global_smem, i32 %106, !dbg !33
  %108 = getelementptr float, ptr addrspace(3) %107, i32 %104, !dbg !33
  %109 = insertelement <1 x i32> poison, i32 %57, i64 0, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %108, <1 x i32> %109, i1 true) #2, !dbg !33
  %110 = or disjoint i32 %71, 112, !dbg !33
  %111 = lshr i32 %110, 3, !dbg !33
  %112 = and i32 %111, 124, !dbg !33
  %113 = getelementptr float, ptr addrspace(3) @global_smem, i32 %112, !dbg !33
  %114 = getelementptr float, ptr addrspace(3) %113, i32 %110, !dbg !33
  %115 = insertelement <1 x i32> poison, i32 %58, i64 0, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %114, <1 x i32> %115, i1 true) #2, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %116 = lshr i32 %11, 3, !dbg !33
  %117 = and i32 %116, 60, !dbg !33
  %118 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %117, !dbg !33
  %119 = getelementptr inbounds float, ptr addrspace(3) %118, i32 %72, !dbg !33
  %120 = or disjoint i32 %72, 512, !dbg !33
  %121 = lshr i32 %120, 3, !dbg !33
  %122 = and i32 %121, 124, !dbg !33
  %123 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %122, !dbg !33
  %124 = getelementptr inbounds float, ptr addrspace(3) %123, i32 %120, !dbg !33
  %125 = load <4 x i32>, ptr addrspace(3) %124, align 16, !dbg !33
  %.extract = load i32, ptr addrspace(3) %119, align 16, !dbg !33
  %126 = getelementptr inbounds i8, ptr addrspace(3) %119, i32 4, !dbg !33
  %.extract8 = load i32, ptr addrspace(3) %126, align 4, !dbg !33
  %127 = getelementptr inbounds i8, ptr addrspace(3) %119, i32 8, !dbg !33
  %.extract9 = load i32, ptr addrspace(3) %127, align 8, !dbg !33
  %128 = getelementptr inbounds i8, ptr addrspace(3) %119, i32 12, !dbg !33
  %.extract10 = load i32, ptr addrspace(3) %128, align 4, !dbg !33
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %66, i1 %47) #2, !dbg !33
  %.extract11 = extractelement <4 x i32> %125, i64 0, !dbg !33
  %.extract12 = extractelement <4 x i32> %125, i64 1, !dbg !33
  %.extract13 = extractelement <4 x i32> %125, i64 2, !dbg !33
  %.extract14 = extractelement <4 x i32> %125, i64 3, !dbg !33
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %68, i1 %48) #2, !dbg !33
  ret void, !dbg !34
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ckmks55wveu2o7vhygdldqfnviwwkaey6fdracqcrrt7ojzmpxnz.py", directory: "inductor_cache/km")
!4 = !{ptr @triton_poi_fused_convolution_20, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_20, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_20", linkageName: "triton_poi_fused_convolution_20", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 31, column: 39, scope: !7)
!22 = !DILocation(line: 31, column: 35, scope: !7)
!23 = !DILocation(line: 31, column: 50, scope: !7)
!24 = !DILocation(line: 31, column: 44, scope: !7)
!25 = !DILocation(line: 31, column: 30, scope: !7)
!26 = !DILocation(line: 31, column: 63, scope: !7)
!27 = !DILocation(line: 31, column: 55, scope: !7)
!28 = !DILocation(line: 32, column: 33, scope: !7)
!29 = !DILocation(line: 32, column: 43, scope: !7)
!30 = !DILocation(line: 32, column: 30, scope: !7)
!31 = !DILocation(line: 32, column: 38, scope: !7)
!32 = !DILocation(line: 32, column: 25, scope: !7)
!33 = !DILocation(line: 32, column: 54, scope: !7)
!34 = !DILocation(line: 32, column: 4, scope: !7)
