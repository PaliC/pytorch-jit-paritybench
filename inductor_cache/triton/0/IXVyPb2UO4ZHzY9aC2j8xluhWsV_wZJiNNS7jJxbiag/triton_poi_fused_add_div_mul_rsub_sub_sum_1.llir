; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_add_div_mul_rsub_sub_sum_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %0, i1 true) #1, !dbg !10
  %9 = bitcast i32 %8 to float, !dbg !10
  %10 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %1, i1 true) #1, !dbg !11
  %11 = bitcast i32 %10 to float, !dbg !11
  %12 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %2, i1 true) #1, !dbg !12
  %13 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %3, i1 true) #1, !dbg !13
  %14 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %4, i1 true) #1, !dbg !14
  %15 = bitcast i32 %14 to float, !dbg !14
  %16 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %5, i1 true) #1, !dbg !15
  %17 = bitcast i32 %16 to float, !dbg !15
  %18 = getelementptr i8, ptr addrspace(1) %0, i64 4, !dbg !16
  %19 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %18, i1 true) #1, !dbg !17
  %20 = bitcast i32 %19 to float, !dbg !17
  %21 = getelementptr i8, ptr addrspace(1) %1, i64 4, !dbg !18
  %22 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %21, i1 true) #1, !dbg !19
  %23 = bitcast i32 %22 to float, !dbg !19
  %24 = getelementptr i8, ptr addrspace(1) %2, i64 4, !dbg !20
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 true) #1, !dbg !21
  %26 = getelementptr i8, ptr addrspace(1) %3, i64 4, !dbg !22
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 true) #1, !dbg !23
  %28 = getelementptr i8, ptr addrspace(1) %4, i64 4, !dbg !24
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 true) #1, !dbg !25
  %30 = bitcast i32 %29 to float, !dbg !25
  %31 = getelementptr i8, ptr addrspace(1) %5, i64 4, !dbg !26
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 true) #1, !dbg !27
  %33 = bitcast i32 %32 to float, !dbg !27
  %34 = getelementptr i8, ptr addrspace(1) %0, i64 8, !dbg !28
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #1, !dbg !29
  %36 = bitcast i32 %35 to float, !dbg !29
  %37 = getelementptr i8, ptr addrspace(1) %1, i64 8, !dbg !30
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 true) #1, !dbg !31
  %39 = bitcast i32 %38 to float, !dbg !31
  %40 = getelementptr i8, ptr addrspace(1) %2, i64 8, !dbg !32
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 true) #1, !dbg !33
  %42 = getelementptr i8, ptr addrspace(1) %3, i64 8, !dbg !34
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 true) #1, !dbg !35
  %44 = getelementptr i8, ptr addrspace(1) %4, i64 8, !dbg !36
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 true) #1, !dbg !37
  %46 = bitcast i32 %45 to float, !dbg !37
  %47 = getelementptr i8, ptr addrspace(1) %5, i64 8, !dbg !38
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 true) #1, !dbg !39
  %49 = bitcast i32 %48 to float, !dbg !39
  %50 = getelementptr i8, ptr addrspace(1) %0, i64 12, !dbg !40
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 true) #1, !dbg !41
  %52 = bitcast i32 %51 to float, !dbg !41
  %53 = getelementptr i8, ptr addrspace(1) %1, i64 12, !dbg !42
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 true) #1, !dbg !43
  %55 = bitcast i32 %54 to float, !dbg !43
  %56 = getelementptr i8, ptr addrspace(1) %2, i64 12, !dbg !44
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 true) #1, !dbg !45
  %58 = getelementptr i8, ptr addrspace(1) %3, i64 12, !dbg !46
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 true) #1, !dbg !47
  %60 = getelementptr i8, ptr addrspace(1) %4, i64 12, !dbg !48
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 true) #1, !dbg !49
  %62 = bitcast i32 %61 to float, !dbg !49
  %63 = getelementptr i8, ptr addrspace(1) %5, i64 12, !dbg !50
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 true) #1, !dbg !51
  %65 = bitcast i32 %64 to float, !dbg !51
  %66 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %9, float %11) #1, !dbg !52
  %67 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %15, float %17) #1, !dbg !53
  %68 = fsub float 1.000000e+00, %67, !dbg !54
  %69 = insertelement <2 x i32> poison, i32 %12, i64 0, !dbg !12
  %70 = insertelement <2 x i32> %69, i32 %25, i64 1, !dbg !12
  %71 = bitcast <2 x i32> %70 to <2 x float>, !dbg !12
  %72 = insertelement <2 x i32> poison, i32 %13, i64 0, !dbg !13
  %73 = insertelement <2 x i32> %72, i32 %27, i64 1, !dbg !13
  %74 = bitcast <2 x i32> %73 to <2 x float>, !dbg !13
  %75 = bitcast i32 %13 to float, !dbg !55
  %76 = fadd float %68, %75, !dbg !55
  %77 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %75, float %76) #1, !dbg !56
  %78 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %20, float %23) #1, !dbg !57
  %79 = insertelement <2 x float> poison, float %66, i64 0, !dbg !58
  %80 = insertelement <2 x float> %79, float %78, i64 1, !dbg !58
  %81 = fsub <2 x float> %80, %71, !dbg !58
  %82 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %30, float %33) #1, !dbg !59
  %83 = fsub float 1.000000e+00, %82, !dbg !60
  %84 = bitcast i32 %27 to float, !dbg !61
  %85 = fadd float %83, %84, !dbg !61
  %86 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %84, float %85) #1, !dbg !62
  %87 = insertelement <2 x float> poison, float %77, i64 0, !dbg !63
  %88 = insertelement <2 x float> %87, float %86, i64 1, !dbg !63
  %89 = fmul <2 x float> %88, %74, !dbg !63
  %90 = fsub <2 x float> %89, %81, !dbg !64
  %91 = fadd <2 x float> %90, splat (float 1.000000e+00), !dbg !64
  %shift = shufflevector <2 x float> %91, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !65
  %92 = fadd <2 x float> %91, %shift, !dbg !65
  %93 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %36, float %39) #1, !dbg !66
  %94 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %46, float %49) #1, !dbg !67
  %95 = fsub float 1.000000e+00, %94, !dbg !68
  %96 = insertelement <2 x i32> poison, i32 %41, i64 0, !dbg !33
  %97 = insertelement <2 x i32> %96, i32 %57, i64 1, !dbg !33
  %98 = bitcast <2 x i32> %97 to <2 x float>, !dbg !33
  %99 = insertelement <2 x i32> poison, i32 %43, i64 0, !dbg !35
  %100 = insertelement <2 x i32> %99, i32 %59, i64 1, !dbg !35
  %101 = bitcast <2 x i32> %100 to <2 x float>, !dbg !35
  %102 = bitcast i32 %43 to float, !dbg !69
  %103 = fadd float %95, %102, !dbg !69
  %104 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %102, float %103) #1, !dbg !70
  %105 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %52, float %55) #1, !dbg !71
  %106 = insertelement <2 x float> poison, float %93, i64 0, !dbg !72
  %107 = insertelement <2 x float> %106, float %105, i64 1, !dbg !72
  %108 = fsub <2 x float> %107, %98, !dbg !72
  %109 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %62, float %65) #1, !dbg !73
  %110 = fsub float 1.000000e+00, %109, !dbg !74
  %111 = bitcast i32 %59 to float, !dbg !75
  %112 = fadd float %110, %111, !dbg !75
  %113 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %111, float %112) #1, !dbg !76
  %114 = insertelement <2 x float> poison, float %104, i64 0, !dbg !77
  %115 = insertelement <2 x float> %114, float %113, i64 1, !dbg !77
  %116 = fmul <2 x float> %115, %101, !dbg !77
  %117 = fsub <2 x float> %116, %108, !dbg !78
  %118 = fadd <2 x float> %117, splat (float 1.000000e+00), !dbg !78
  %119 = fadd <2 x float> %92, %118, !dbg !79
  %shift1 = shufflevector <2 x float> %118, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !80
  %120 = fadd <2 x float> %119, %shift1, !dbg !80
  %121 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !81
  %122 = and i32 %121, 31, !dbg !81
  %123 = icmp eq i32 %122, 0, !dbg !81
  %bc = bitcast <2 x float> %120 to <2 x i32>, !dbg !81
  %124 = extractelement <2 x i32> %bc, i64 0, !dbg !81
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %124, ptr addrspace(1) %6, i1 %123) #1, !dbg !81
  ret void, !dbg !82
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "capzqtaujn7bksdffyyioqvjiudvhvj7xmkdwjkjfsn6ddcx7mrr.py", directory: "inductor_cache/ap")
!4 = !{ptr @triton_poi_fused_add_div_mul_rsub_sub_sum_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_div_mul_rsub_sub_sum_1, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_div_mul_rsub_sub_sum_1", linkageName: "triton_poi_fused_add_div_mul_rsub_sub_sum_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 24, column: 19, scope: !7)
!11 = !DILocation(line: 26, column: 19, scope: !7)
!12 = !DILocation(line: 28, column: 19, scope: !7)
!13 = !DILocation(line: 30, column: 19, scope: !7)
!14 = !DILocation(line: 32, column: 20, scope: !7)
!15 = !DILocation(line: 34, column: 20, scope: !7)
!16 = !DILocation(line: 36, column: 31, scope: !7)
!17 = !DILocation(line: 36, column: 20, scope: !7)
!18 = !DILocation(line: 38, column: 31, scope: !7)
!19 = !DILocation(line: 38, column: 20, scope: !7)
!20 = !DILocation(line: 40, column: 31, scope: !7)
!21 = !DILocation(line: 40, column: 20, scope: !7)
!22 = !DILocation(line: 42, column: 31, scope: !7)
!23 = !DILocation(line: 42, column: 20, scope: !7)
!24 = !DILocation(line: 44, column: 31, scope: !7)
!25 = !DILocation(line: 44, column: 20, scope: !7)
!26 = !DILocation(line: 46, column: 31, scope: !7)
!27 = !DILocation(line: 46, column: 20, scope: !7)
!28 = !DILocation(line: 48, column: 31, scope: !7)
!29 = !DILocation(line: 48, column: 20, scope: !7)
!30 = !DILocation(line: 50, column: 31, scope: !7)
!31 = !DILocation(line: 50, column: 20, scope: !7)
!32 = !DILocation(line: 52, column: 31, scope: !7)
!33 = !DILocation(line: 52, column: 20, scope: !7)
!34 = !DILocation(line: 54, column: 31, scope: !7)
!35 = !DILocation(line: 54, column: 20, scope: !7)
!36 = !DILocation(line: 56, column: 31, scope: !7)
!37 = !DILocation(line: 56, column: 20, scope: !7)
!38 = !DILocation(line: 58, column: 31, scope: !7)
!39 = !DILocation(line: 58, column: 20, scope: !7)
!40 = !DILocation(line: 60, column: 31, scope: !7)
!41 = !DILocation(line: 60, column: 20, scope: !7)
!42 = !DILocation(line: 62, column: 31, scope: !7)
!43 = !DILocation(line: 62, column: 20, scope: !7)
!44 = !DILocation(line: 64, column: 31, scope: !7)
!45 = !DILocation(line: 64, column: 20, scope: !7)
!46 = !DILocation(line: 66, column: 31, scope: !7)
!47 = !DILocation(line: 66, column: 20, scope: !7)
!48 = !DILocation(line: 68, column: 31, scope: !7)
!49 = !DILocation(line: 68, column: 20, scope: !7)
!50 = !DILocation(line: 70, column: 31, scope: !7)
!51 = !DILocation(line: 70, column: 20, scope: !7)
!52 = !DILocation(line: 72, column: 18, scope: !7)
!53 = !DILocation(line: 74, column: 20, scope: !7)
!54 = !DILocation(line: 76, column: 20, scope: !7)
!55 = !DILocation(line: 77, column: 20, scope: !7)
!56 = !DILocation(line: 78, column: 19, scope: !7)
!57 = !DILocation(line: 82, column: 20, scope: !7)
!58 = !DILocation(line: 73, column: 18, scope: !7)
!59 = !DILocation(line: 84, column: 20, scope: !7)
!60 = !DILocation(line: 85, column: 20, scope: !7)
!61 = !DILocation(line: 86, column: 20, scope: !7)
!62 = !DILocation(line: 87, column: 20, scope: !7)
!63 = !DILocation(line: 79, column: 20, scope: !7)
!64 = !DILocation(line: 81, column: 20, scope: !7)
!65 = !DILocation(line: 91, column: 20, scope: !7)
!66 = !DILocation(line: 92, column: 20, scope: !7)
!67 = !DILocation(line: 94, column: 20, scope: !7)
!68 = !DILocation(line: 95, column: 20, scope: !7)
!69 = !DILocation(line: 96, column: 20, scope: !7)
!70 = !DILocation(line: 97, column: 20, scope: !7)
!71 = !DILocation(line: 102, column: 20, scope: !7)
!72 = !DILocation(line: 93, column: 20, scope: !7)
!73 = !DILocation(line: 104, column: 20, scope: !7)
!74 = !DILocation(line: 105, column: 20, scope: !7)
!75 = !DILocation(line: 106, column: 20, scope: !7)
!76 = !DILocation(line: 107, column: 20, scope: !7)
!77 = !DILocation(line: 98, column: 20, scope: !7)
!78 = !DILocation(line: 100, column: 20, scope: !7)
!79 = !DILocation(line: 101, column: 20, scope: !7)
!80 = !DILocation(line: 111, column: 20, scope: !7)
!81 = !DILocation(line: 112, column: 65, scope: !7)
!82 = !DILocation(line: 112, column: 4, scope: !7)
