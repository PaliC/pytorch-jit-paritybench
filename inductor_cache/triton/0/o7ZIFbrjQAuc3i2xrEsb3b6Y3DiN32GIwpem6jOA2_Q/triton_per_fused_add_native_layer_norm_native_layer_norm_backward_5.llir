; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused_add_native_layer_norm_native_layer_norm_backward_5(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %12 = shl i32 %11, 5, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = shl i32 %13, 2, !dbg !12
  %15 = and i32 %14, 28, !dbg !12
  %16 = lshr i32 %13, 3, !dbg !12
  %17 = and i32 %16, 31, !dbg !12
  %18 = and i32 %13, 31, !dbg !12
  %19 = or disjoint i32 %12, %15, !dbg !13
  %20 = or disjoint i32 %12, %17, !dbg !13
  %21 = icmp slt i32 %20, 256, !dbg !14
  %22 = icmp slt i32 %19, 256, !dbg !14
  %.frozen = freeze i32 %19, !dbg !15
  %23 = sdiv i32 %.frozen, 64, !dbg !15
  %24 = mul i32 %23, 64, !dbg !16
  %.decomposed = sub i32 %.frozen, %24, !dbg !16
  %25 = shl nuw nsw i32 %17, 6, !dbg !17
  %26 = add nsw i32 %.decomposed, %25, !dbg !18
  %27 = shl i32 %23, 11, !dbg !19
  %28 = add i32 %26, %27, !dbg !20
  %29 = sext i32 %28 to i64, !dbg !21
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !21
  %31 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %30, i1 %22, i32 0, i1 %22, i32 0, i1 %22, i32 0, i1 %22, i32 0, i1 %22) #5, !dbg !22
  %32 = extractvalue { i32, i32, i32, i32 } %31, 0, !dbg !22
  %33 = extractvalue { i32, i32, i32, i32 } %31, 1, !dbg !22
  %34 = extractvalue { i32, i32, i32, i32 } %31, 2, !dbg !22
  %35 = extractvalue { i32, i32, i32, i32 } %31, 3, !dbg !22
  %36 = shl i32 %13, 7, !dbg !22
  %37 = and i32 %36, 896, !dbg !22
  %38 = or disjoint i32 %37, %17, !dbg !22
  %39 = and i32 %14, 1020, !dbg !22
  %40 = lshr exact i32 %37, 1, !dbg !22
  %41 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %40, !dbg !22
  %42 = getelementptr float, ptr addrspace(3) %41, i32 %38, !dbg !22
  %43 = insertelement <1 x i32> poison, i32 %32, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %42, <1 x i32> %43, i1 true) #5, !dbg !22
  %44 = or disjoint i32 %38, 32, !dbg !22
  %45 = lshr i32 %44, 3, !dbg !22
  %46 = and i32 %45, 116, !dbg !22
  %47 = getelementptr float, ptr addrspace(3) @global_smem, i32 %46, !dbg !22
  %48 = getelementptr float, ptr addrspace(3) %47, i32 %44, !dbg !22
  %49 = insertelement <1 x i32> poison, i32 %33, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %48, <1 x i32> %49, i1 true) #5, !dbg !22
  %50 = or disjoint i32 %38, 64, !dbg !22
  %51 = lshr i32 %50, 3, !dbg !22
  %52 = and i32 %51, 120, !dbg !22
  %53 = getelementptr float, ptr addrspace(3) @global_smem, i32 %52, !dbg !22
  %54 = getelementptr float, ptr addrspace(3) %53, i32 %50, !dbg !22
  %55 = insertelement <1 x i32> poison, i32 %34, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %54, <1 x i32> %55, i1 true) #5, !dbg !22
  %56 = or disjoint i32 %38, 96, !dbg !22
  %57 = lshr i32 %56, 3, !dbg !22
  %58 = and i32 %57, 124, !dbg !22
  %59 = getelementptr float, ptr addrspace(3) @global_smem, i32 %58, !dbg !22
  %60 = getelementptr float, ptr addrspace(3) %59, i32 %56, !dbg !22
  %61 = insertelement <1 x i32> poison, i32 %35, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %60, <1 x i32> %61, i1 true) #5, !dbg !22
  tail call void @llvm.nvvm.barrier0(), !dbg !22
  %62 = lshr i32 %14, 3, !dbg !22
  %63 = and i32 %62, 124, !dbg !22
  %64 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %63, !dbg !22
  %65 = getelementptr inbounds float, ptr addrspace(3) %64, i32 %39, !dbg !22
  %66 = load float, ptr addrspace(3) %65, align 16, !dbg !22
  %67 = getelementptr inbounds i8, ptr addrspace(3) %65, i32 4, !dbg !22
  %68 = load float, ptr addrspace(3) %67, align 4, !dbg !22
  %69 = getelementptr inbounds i8, ptr addrspace(3) %65, i32 8, !dbg !22
  %70 = load float, ptr addrspace(3) %69, align 8, !dbg !22
  %71 = getelementptr inbounds i8, ptr addrspace(3) %65, i32 12, !dbg !22
  %72 = load float, ptr addrspace(3) %71, align 4, !dbg !22
  %73 = shl i32 %20, 5, !dbg !23
  %74 = or disjoint i32 %73, %15, !dbg !24
  %75 = sext i32 %74 to i64, !dbg !25
  %76 = getelementptr float, ptr addrspace(1) %1, i64 %75, !dbg !25
  %77 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %76, i1 %21, i32 0, i1 %21, i32 0, i1 %21, i32 0, i1 %21, i32 0, i1 %21) #5, !dbg !26
  %78 = extractvalue { i32, i32, i32, i32 } %77, 0, !dbg !26
  %79 = extractvalue { i32, i32, i32, i32 } %77, 1, !dbg !26
  %80 = extractvalue { i32, i32, i32, i32 } %77, 2, !dbg !26
  %81 = extractvalue { i32, i32, i32, i32 } %77, 3, !dbg !26
  %82 = bitcast i32 %78 to float, !dbg !26
  %83 = bitcast i32 %79 to float, !dbg !26
  %84 = bitcast i32 %80 to float, !dbg !26
  %85 = bitcast i32 %81 to float, !dbg !26
  %86 = zext nneg i32 %15 to i64, !dbg !27
  %87 = getelementptr float, ptr addrspace(1) %2, i64 %86, !dbg !27
  %88 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %87, i1 true) #5, !dbg !28
  %89 = extractvalue { i32, i32, i32, i32 } %88, 0, !dbg !28
  %90 = extractvalue { i32, i32, i32, i32 } %88, 1, !dbg !28
  %91 = extractvalue { i32, i32, i32, i32 } %88, 2, !dbg !28
  %92 = extractvalue { i32, i32, i32, i32 } %88, 3, !dbg !28
  %93 = bitcast i32 %89 to float, !dbg !28
  %94 = bitcast i32 %90 to float, !dbg !28
  %95 = bitcast i32 %91 to float, !dbg !28
  %96 = bitcast i32 %92 to float, !dbg !28
  %97 = getelementptr float, ptr addrspace(1) %3, i64 %86, !dbg !29
  %98 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %97, i1 true) #5, !dbg !30
  %99 = getelementptr float, ptr addrspace(1) %4, i64 %86, !dbg !31
  %100 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %99, i1 true) #5, !dbg !32
  %101 = fadd float %82, %93, !dbg !33
  %102 = fadd float %83, %94, !dbg !33
  %103 = fadd float %84, %95, !dbg !33
  %104 = fadd float %85, %96, !dbg !33
  %105 = fadd float %66, %101, !dbg !34
  %106 = fadd float %68, %102, !dbg !34
  %107 = fadd float %70, %103, !dbg !34
  %108 = fadd float %72, %104, !dbg !34
  %109 = fadd float %105, %106, !dbg !35
  %110 = fadd float %107, %109, !dbg !35
  %111 = fadd float %108, %110, !dbg !35
  %112 = select i1 %21, float %111, float 0.000000e+00, !dbg !35
  %113 = bitcast float %112 to i32, !dbg !40
  %114 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %113, i32 4, i32 31), !dbg !40
  %115 = bitcast i32 %114 to float, !dbg !40
  %116 = fadd float %112, %115, !dbg !35
  %117 = bitcast float %116 to i32, !dbg !40
  %118 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %117, i32 2, i32 31), !dbg !40
  %119 = bitcast i32 %118 to float, !dbg !40
  %120 = fadd float %116, %119, !dbg !35
  %121 = bitcast float %120 to i32, !dbg !40
  %122 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %121, i32 1, i32 31), !dbg !40
  %123 = bitcast i32 %122 to float, !dbg !40
  %124 = fadd float %120, %123, !dbg !35
  %125 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %124, float 3.200000e+01) #5, !dbg !41
  %126 = fsub float %105, %125, !dbg !42
  %127 = fsub float %106, %125, !dbg !42
  %128 = fsub float %107, %125, !dbg !42
  %129 = fsub float %108, %125, !dbg !42
  %130 = fmul float %126, %126, !dbg !43
  %131 = fmul float %127, %127, !dbg !43
  %132 = fmul float %128, %128, !dbg !43
  %133 = fmul float %129, %129, !dbg !43
  %134 = fadd float %130, %131, !dbg !44
  %135 = fadd float %132, %134, !dbg !44
  %136 = fadd float %133, %135, !dbg !44
  %137 = select i1 %21, float %136, float 0.000000e+00, !dbg !44
  %138 = bitcast float %137 to i32, !dbg !46
  %139 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %138, i32 4, i32 31), !dbg !46
  %140 = bitcast i32 %139 to float, !dbg !46
  %141 = fadd float %137, %140, !dbg !44
  %142 = bitcast float %141 to i32, !dbg !46
  %143 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %142, i32 2, i32 31), !dbg !46
  %144 = bitcast i32 %143 to float, !dbg !46
  %145 = fadd float %141, %144, !dbg !44
  %146 = bitcast float %145 to i32, !dbg !46
  %147 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %146, i32 1, i32 31), !dbg !46
  %148 = bitcast i32 %147 to float, !dbg !46
  %149 = fadd float %145, %148, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %150 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %17, !dbg !47
  %151 = bitcast float %149 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %150, <1 x i32> %151, i1 true) #5, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %152 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %18, !dbg !47
  %153 = load float, ptr addrspace(3) %152, align 4, !dbg !47
  %154 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %153, float 3.200000e+01) #5, !dbg !48
  %155 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %149, float 3.200000e+01) #5, !dbg !48
  %156 = fadd float %154, 0x3EE4F8B580000000, !dbg !49
  %157 = fadd float %155, 0x3EE4F8B580000000, !dbg !49
  %158 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %.not.i = icmp eq i32 %158, 0, !dbg !50
  br i1 %.not.i, label %161, label %159, !dbg !50

159:                                              ; preds = %10
  %160 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %156), !dbg !50
  br label %__nv_rsqrtf.exit, !dbg !50

161:                                              ; preds = %10
  %162 = tail call float @llvm.nvvm.rsqrt.approx.f(float %156), !dbg !50
  br label %__nv_rsqrtf.exit, !dbg !50

__nv_rsqrtf.exit:                                 ; preds = %159, %161
  %.0.i = phi float [ %160, %159 ], [ %162, %161 ], !dbg !50
  %163 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %164 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %165 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %166 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !50
  %.not.i14 = icmp eq i32 %166, 0, !dbg !50
  br i1 %.not.i14, label %169, label %167, !dbg !50

167:                                              ; preds = %__nv_rsqrtf.exit
  %168 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %157), !dbg !50
  br label %__nv_rsqrtf.exit16, !dbg !50

169:                                              ; preds = %__nv_rsqrtf.exit
  %170 = tail call float @llvm.nvvm.rsqrt.approx.f(float %157), !dbg !50
  br label %__nv_rsqrtf.exit16, !dbg !50

__nv_rsqrtf.exit16:                               ; preds = %167, %169
  %.0.i15 = phi float [ %168, %167 ], [ %170, %169 ], !dbg !50
  %171 = extractvalue { i32, i32, i32, i32 } %100, 3, !dbg !32
  %172 = bitcast i32 %171 to float, !dbg !32
  %173 = extractvalue { i32, i32, i32, i32 } %100, 2, !dbg !32
  %174 = bitcast i32 %173 to float, !dbg !32
  %175 = extractvalue { i32, i32, i32, i32 } %100, 1, !dbg !32
  %176 = bitcast i32 %175 to float, !dbg !32
  %177 = extractvalue { i32, i32, i32, i32 } %100, 0, !dbg !32
  %178 = bitcast i32 %177 to float, !dbg !32
  %179 = extractvalue { i32, i32, i32, i32 } %98, 3, !dbg !30
  %180 = bitcast i32 %179 to float, !dbg !30
  %181 = extractvalue { i32, i32, i32, i32 } %98, 2, !dbg !30
  %182 = bitcast i32 %181 to float, !dbg !30
  %183 = extractvalue { i32, i32, i32, i32 } %98, 1, !dbg !30
  %184 = bitcast i32 %183 to float, !dbg !30
  %185 = extractvalue { i32, i32, i32, i32 } %98, 0, !dbg !30
  %186 = bitcast i32 %185 to float, !dbg !30
  %187 = or disjoint i32 %12, %18, !dbg !13
  %188 = icmp slt i32 %187, 256, !dbg !14
  %189 = fmul float %126, %.0.i15, !dbg !51
  %190 = fmul float %127, %.0.i15, !dbg !51
  %191 = fmul float %128, %.0.i15, !dbg !51
  %192 = fmul float %129, %.0.i15, !dbg !51
  %193 = fmul float %189, %186, !dbg !52
  %194 = fmul float %190, %184, !dbg !52
  %195 = fmul float %191, %182, !dbg !52
  %196 = fmul float %192, %180, !dbg !52
  %197 = fadd float %193, %178, !dbg !53
  %198 = fadd float %194, %176, !dbg !53
  %199 = fadd float %195, %174, !dbg !53
  %200 = fadd float %196, %172, !dbg !53
  %201 = fmul float %.0.i, 3.125000e-02, !dbg !47
  %202 = getelementptr float, ptr addrspace(1) %5, i64 %75, !dbg !54
  %203 = bitcast float %189 to i32, !dbg !55
  %204 = bitcast float %190 to i32, !dbg !55
  %205 = bitcast float %191 to i32, !dbg !55
  %206 = bitcast float %192 to i32, !dbg !55
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %203, i32 %204, i32 %205, i32 %206, ptr addrspace(1) %202, i1 %21) #5, !dbg !55
  %207 = getelementptr float, ptr addrspace(1) %6, i64 %75, !dbg !56
  %208 = bitcast float %197 to i32, !dbg !57
  %209 = bitcast float %198 to i32, !dbg !57
  %210 = bitcast float %199 to i32, !dbg !57
  %211 = bitcast float %200 to i32, !dbg !57
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %208, i32 %209, i32 %210, i32 %211, ptr addrspace(1) %207, i1 %21) #5, !dbg !57
  %212 = sext i32 %187 to i64, !dbg !58
  %213 = getelementptr float, ptr addrspace(1) %7, i64 %212, !dbg !58
  %214 = and i32 %13, 224, !dbg !59
  %215 = icmp eq i32 %214, 0, !dbg !59
  %216 = bitcast float %201 to i32, !dbg !59
  %217 = and i1 %215, %188, !dbg !59
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %216, ptr addrspace(1) %213, i1 %217) #5, !dbg !59
  ret void, !dbg !60
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cuikj2fj7dthoyhdafnokwdyuhlh7dg2nrrpeedhe6yomz4lhufr.py", directory: "inductor_cache/ui")
!4 = !{ptr @triton_per_fused_add_native_layer_norm_native_layer_norm_backward_5, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_native_layer_norm_native_layer_norm_backward_5, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_native_layer_norm_native_layer_norm_backward_5", linkageName: "triton_per_fused_add_native_layer_norm_native_layer_norm_backward_5", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 31, column: 19, scope: !7)
!16 = !DILocation(line: 30, column: 19, scope: !7)
!17 = !DILocation(line: 33, column: 38, scope: !7)
!18 = !DILocation(line: 33, column: 35, scope: !7)
!19 = !DILocation(line: 33, column: 48, scope: !7)
!20 = !DILocation(line: 33, column: 43, scope: !7)
!21 = !DILocation(line: 33, column: 30, scope: !7)
!22 = !DILocation(line: 33, column: 53, scope: !7)
!23 = !DILocation(line: 34, column: 38, scope: !7)
!24 = !DILocation(line: 34, column: 35, scope: !7)
!25 = !DILocation(line: 34, column: 30, scope: !7)
!26 = !DILocation(line: 34, column: 43, scope: !7)
!27 = !DILocation(line: 35, column: 30, scope: !7)
!28 = !DILocation(line: 35, column: 35, scope: !7)
!29 = !DILocation(line: 36, column: 31, scope: !7)
!30 = !DILocation(line: 36, column: 36, scope: !7)
!31 = !DILocation(line: 37, column: 31, scope: !7)
!32 = !DILocation(line: 37, column: 36, scope: !7)
!33 = !DILocation(line: 38, column: 18, scope: !7)
!34 = !DILocation(line: 39, column: 18, scope: !7)
!35 = !DILocation(line: 256, column: 15, scope: !36, inlinedAt: !39)
!36 = distinct !DILexicalBlockFile(scope: !38, file: !37, discriminator: 0)
!37 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!38 = distinct !DILexicalBlockFile(scope: !7, file: !37, discriminator: 0)
!39 = !DILocation(line: 44, column: 26, scope: !7)
!40 = !DILocation(line: 267, column: 36, scope: !38, inlinedAt: !39)
!41 = !DILocation(line: 47, column: 20, scope: !7)
!42 = !DILocation(line: 48, column: 19, scope: !7)
!43 = !DILocation(line: 49, column: 20, scope: !7)
!44 = !DILocation(line: 256, column: 15, scope: !36, inlinedAt: !45)
!45 = !DILocation(line: 52, column: 26, scope: !7)
!46 = !DILocation(line: 267, column: 36, scope: !38, inlinedAt: !45)
!47 = !DILocation(line: 63, column: 20, scope: !7)
!48 = !DILocation(line: 55, column: 20, scope: !7)
!49 = !DILocation(line: 57, column: 20, scope: !7)
!50 = !DILocation(line: 58, column: 28, scope: !7)
!51 = !DILocation(line: 59, column: 20, scope: !7)
!52 = !DILocation(line: 60, column: 20, scope: !7)
!53 = !DILocation(line: 61, column: 20, scope: !7)
!54 = !DILocation(line: 64, column: 25, scope: !7)
!55 = !DILocation(line: 64, column: 45, scope: !7)
!56 = !DILocation(line: 65, column: 25, scope: !7)
!57 = !DILocation(line: 65, column: 45, scope: !7)
!58 = !DILocation(line: 66, column: 25, scope: !7)
!59 = !DILocation(line: 66, column: 37, scope: !7)
!60 = !DILocation(line: 66, column: 4, scope: !7)
