; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_16(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %11 = shl i32 %10, 10, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = shl i32 %12, 2, !dbg !12
  %14 = and i32 %13, 508, !dbg !12
  %15 = or disjoint i32 %11, %14, !dbg !13
  %16 = or disjoint i32 %15, 512, !dbg !13
  %17 = srem i32 %15, 512, !dbg !14
  %18 = sext i32 %15 to i64, !dbg !15
  %19 = getelementptr float, ptr addrspace(1) %0, i64 %18, !dbg !15
  %20 = sext i32 %16 to i64, !dbg !15
  %21 = getelementptr float, ptr addrspace(1) %0, i64 %20, !dbg !15
  %22 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %19, i1 true) #3, !dbg !16
  %23 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %21, i1 true) #3, !dbg !16
  %24 = sext i32 %17 to i64, !dbg !17
  %25 = getelementptr float, ptr addrspace(1) %1, i64 %24, !dbg !17
  %26 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %25, i1 true) #3, !dbg !18
  %27 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %25, i1 true) #3, !dbg !18
  %28 = getelementptr float, ptr addrspace(1) %2, i64 %24, !dbg !19
  %29 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %28, i1 true) #3, !dbg !20
  %30 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %28, i1 true) #3, !dbg !20
  %31 = getelementptr float, ptr addrspace(1) %3, i64 %24, !dbg !21
  %32 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %31, i1 true) #3, !dbg !22
  %33 = extractvalue { i32, i32, i32, i32 } %32, 0, !dbg !22
  %34 = extractvalue { i32, i32, i32, i32 } %32, 1, !dbg !22
  %35 = extractvalue { i32, i32, i32, i32 } %32, 2, !dbg !22
  %36 = extractvalue { i32, i32, i32, i32 } %32, 3, !dbg !22
  %37 = bitcast i32 %33 to float, !dbg !22
  %38 = bitcast i32 %34 to float, !dbg !22
  %39 = bitcast i32 %35 to float, !dbg !22
  %40 = bitcast i32 %36 to float, !dbg !22
  %41 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %31, i1 true) #3, !dbg !22
  %42 = extractvalue { i32, i32, i32, i32 } %41, 0, !dbg !22
  %43 = extractvalue { i32, i32, i32, i32 } %41, 1, !dbg !22
  %44 = extractvalue { i32, i32, i32, i32 } %41, 2, !dbg !22
  %45 = extractvalue { i32, i32, i32, i32 } %41, 3, !dbg !22
  %46 = bitcast i32 %42 to float, !dbg !22
  %47 = bitcast i32 %43 to float, !dbg !22
  %48 = bitcast i32 %44 to float, !dbg !22
  %49 = bitcast i32 %45 to float, !dbg !22
  %50 = getelementptr float, ptr addrspace(1) %4, i64 %24, !dbg !23
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %50, i1 true) #3, !dbg !24
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %50, i1 true) #3, !dbg !24
  %53 = getelementptr float, ptr addrspace(1) %5, i64 %24, !dbg !25
  %54 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %53, i1 true) #3, !dbg !26
  %55 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %53, i1 true) #3, !dbg !26
  %56 = getelementptr float, ptr addrspace(1) %6, i64 %18, !dbg !27
  %57 = getelementptr float, ptr addrspace(1) %6, i64 %20, !dbg !27
  %58 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %56, i1 true) #3, !dbg !28
  %59 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %57, i1 true) #3, !dbg !28
  %60 = fadd float %37, 0x3EE4F8B580000000, !dbg !29
  %61 = fadd float %38, 0x3EE4F8B580000000, !dbg !29
  %62 = fadd float %39, 0x3EE4F8B580000000, !dbg !29
  %63 = fadd float %40, 0x3EE4F8B580000000, !dbg !29
  %64 = fadd float %46, 0x3EE4F8B580000000, !dbg !29
  %65 = fadd float %47, 0x3EE4F8B580000000, !dbg !29
  %66 = fadd float %48, 0x3EE4F8B580000000, !dbg !29
  %67 = fadd float %49, 0x3EE4F8B580000000, !dbg !29
  %68 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i = icmp eq i32 %68, 0, !dbg !30
  %69 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i = icmp eq i32 %69, 0, !dbg !30
  br i1 %.not.i, label %75, label %70, !dbg !30

70:                                               ; preds = %9
  br i1 %.not1.i, label %73, label %71, !dbg !30

71:                                               ; preds = %70
  %72 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %60) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

73:                                               ; preds = %70
  %74 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %60) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

75:                                               ; preds = %9
  br i1 %.not1.i, label %78, label %76, !dbg !30

76:                                               ; preds = %75
  %77 = tail call float @llvm.nvvm.sqrt.rn.f(float %60) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

78:                                               ; preds = %75
  %79 = tail call float @llvm.nvvm.sqrt.approx.f(float %60) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

__nv_sqrtf.exit:                                  ; preds = %71, %73, %76, %78
  %.0.i = phi float [ %72, %71 ], [ %74, %73 ], [ %77, %76 ], [ %79, %78 ], !dbg !30
  %80 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i1 = icmp eq i32 %80, 0, !dbg !30
  %81 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i4 = icmp eq i32 %81, 0, !dbg !30
  br i1 %.not.i1, label %87, label %82, !dbg !30

82:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %85, label %83, !dbg !30

83:                                               ; preds = %82
  %84 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %61) #3, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

85:                                               ; preds = %82
  %86 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %61) #3, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

87:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %90, label %88, !dbg !30

88:                                               ; preds = %87
  %89 = tail call float @llvm.nvvm.sqrt.rn.f(float %61) #3, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

90:                                               ; preds = %87
  %91 = tail call float @llvm.nvvm.sqrt.approx.f(float %61) #3, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

__nv_sqrtf.exit5:                                 ; preds = %83, %85, %88, %90
  %.0.i3 = phi float [ %84, %83 ], [ %86, %85 ], [ %89, %88 ], [ %91, %90 ], !dbg !30
  %92 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i6 = icmp eq i32 %92, 0, !dbg !30
  %93 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i9 = icmp eq i32 %93, 0, !dbg !30
  br i1 %.not.i6, label %99, label %94, !dbg !30

94:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %97, label %95, !dbg !30

95:                                               ; preds = %94
  %96 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %62) #3, !dbg !30
  br label %__nv_sqrtf.exit10, !dbg !30

97:                                               ; preds = %94
  %98 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %62) #3, !dbg !30
  br label %__nv_sqrtf.exit10, !dbg !30

99:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %102, label %100, !dbg !30

100:                                              ; preds = %99
  %101 = tail call float @llvm.nvvm.sqrt.rn.f(float %62) #3, !dbg !30
  br label %__nv_sqrtf.exit10, !dbg !30

102:                                              ; preds = %99
  %103 = tail call float @llvm.nvvm.sqrt.approx.f(float %62) #3, !dbg !30
  br label %__nv_sqrtf.exit10, !dbg !30

__nv_sqrtf.exit10:                                ; preds = %95, %97, %100, %102
  %.0.i8 = phi float [ %96, %95 ], [ %98, %97 ], [ %101, %100 ], [ %103, %102 ], !dbg !30
  %104 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i11 = icmp eq i32 %104, 0, !dbg !30
  %105 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i14 = icmp eq i32 %105, 0, !dbg !30
  br i1 %.not.i11, label %111, label %106, !dbg !30

106:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %109, label %107, !dbg !30

107:                                              ; preds = %106
  %108 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %63) #3, !dbg !30
  br label %__nv_sqrtf.exit15, !dbg !30

109:                                              ; preds = %106
  %110 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %63) #3, !dbg !30
  br label %__nv_sqrtf.exit15, !dbg !30

111:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %114, label %112, !dbg !30

112:                                              ; preds = %111
  %113 = tail call float @llvm.nvvm.sqrt.rn.f(float %63) #3, !dbg !30
  br label %__nv_sqrtf.exit15, !dbg !30

114:                                              ; preds = %111
  %115 = tail call float @llvm.nvvm.sqrt.approx.f(float %63) #3, !dbg !30
  br label %__nv_sqrtf.exit15, !dbg !30

__nv_sqrtf.exit15:                                ; preds = %107, %109, %112, %114
  %.0.i13 = phi float [ %108, %107 ], [ %110, %109 ], [ %113, %112 ], [ %115, %114 ], !dbg !30
  %116 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i16 = icmp eq i32 %116, 0, !dbg !30
  %117 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i19 = icmp eq i32 %117, 0, !dbg !30
  br i1 %.not.i16, label %123, label %118, !dbg !30

118:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %121, label %119, !dbg !30

119:                                              ; preds = %118
  %120 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %64) #3, !dbg !30
  br label %__nv_sqrtf.exit20, !dbg !30

121:                                              ; preds = %118
  %122 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %64) #3, !dbg !30
  br label %__nv_sqrtf.exit20, !dbg !30

123:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %126, label %124, !dbg !30

124:                                              ; preds = %123
  %125 = tail call float @llvm.nvvm.sqrt.rn.f(float %64) #3, !dbg !30
  br label %__nv_sqrtf.exit20, !dbg !30

126:                                              ; preds = %123
  %127 = tail call float @llvm.nvvm.sqrt.approx.f(float %64) #3, !dbg !30
  br label %__nv_sqrtf.exit20, !dbg !30

__nv_sqrtf.exit20:                                ; preds = %119, %121, %124, %126
  %.0.i18 = phi float [ %120, %119 ], [ %122, %121 ], [ %125, %124 ], [ %127, %126 ], !dbg !30
  %128 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i21 = icmp eq i32 %128, 0, !dbg !30
  %129 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i24 = icmp eq i32 %129, 0, !dbg !30
  br i1 %.not.i21, label %135, label %130, !dbg !30

130:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %133, label %131, !dbg !30

131:                                              ; preds = %130
  %132 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %65) #3, !dbg !30
  br label %__nv_sqrtf.exit25, !dbg !30

133:                                              ; preds = %130
  %134 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %65) #3, !dbg !30
  br label %__nv_sqrtf.exit25, !dbg !30

135:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %138, label %136, !dbg !30

136:                                              ; preds = %135
  %137 = tail call float @llvm.nvvm.sqrt.rn.f(float %65) #3, !dbg !30
  br label %__nv_sqrtf.exit25, !dbg !30

138:                                              ; preds = %135
  %139 = tail call float @llvm.nvvm.sqrt.approx.f(float %65) #3, !dbg !30
  br label %__nv_sqrtf.exit25, !dbg !30

__nv_sqrtf.exit25:                                ; preds = %131, %133, %136, %138
  %.0.i23 = phi float [ %132, %131 ], [ %134, %133 ], [ %137, %136 ], [ %139, %138 ], !dbg !30
  %140 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i26 = icmp eq i32 %140, 0, !dbg !30
  %141 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i29 = icmp eq i32 %141, 0, !dbg !30
  br i1 %.not.i26, label %147, label %142, !dbg !30

142:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %145, label %143, !dbg !30

143:                                              ; preds = %142
  %144 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %66) #3, !dbg !30
  br label %__nv_sqrtf.exit30, !dbg !30

145:                                              ; preds = %142
  %146 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %66) #3, !dbg !30
  br label %__nv_sqrtf.exit30, !dbg !30

147:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %150, label %148, !dbg !30

148:                                              ; preds = %147
  %149 = tail call float @llvm.nvvm.sqrt.rn.f(float %66) #3, !dbg !30
  br label %__nv_sqrtf.exit30, !dbg !30

150:                                              ; preds = %147
  %151 = tail call float @llvm.nvvm.sqrt.approx.f(float %66) #3, !dbg !30
  br label %__nv_sqrtf.exit30, !dbg !30

__nv_sqrtf.exit30:                                ; preds = %143, %145, %148, %150
  %.0.i28 = phi float [ %144, %143 ], [ %146, %145 ], [ %149, %148 ], [ %151, %150 ], !dbg !30
  %152 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i31 = icmp eq i32 %152, 0, !dbg !30
  %153 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i34 = icmp eq i32 %153, 0, !dbg !30
  br i1 %.not.i31, label %159, label %154, !dbg !30

154:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %157, label %155, !dbg !30

155:                                              ; preds = %154
  %156 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %67) #3, !dbg !30
  br label %__nv_sqrtf.exit35, !dbg !30

157:                                              ; preds = %154
  %158 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %67) #3, !dbg !30
  br label %__nv_sqrtf.exit35, !dbg !30

159:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %162, label %160, !dbg !30

160:                                              ; preds = %159
  %161 = tail call float @llvm.nvvm.sqrt.rn.f(float %67) #3, !dbg !30
  br label %__nv_sqrtf.exit35, !dbg !30

162:                                              ; preds = %159
  %163 = tail call float @llvm.nvvm.sqrt.approx.f(float %67) #3, !dbg !30
  br label %__nv_sqrtf.exit35, !dbg !30

__nv_sqrtf.exit35:                                ; preds = %155, %157, %160, %162
  %.0.i33 = phi float [ %156, %155 ], [ %158, %157 ], [ %161, %160 ], [ %163, %162 ], !dbg !30
  %164 = extractvalue { i32, i32, i32, i32 } %23, 3, !dbg !16
  %165 = extractvalue { i32, i32, i32, i32 } %27, 3, !dbg !18
  %166 = extractvalue { i32, i32, i32, i32 } %30, 3, !dbg !20
  %167 = extractvalue { i32, i32, i32, i32 } %23, 2, !dbg !16
  %168 = extractvalue { i32, i32, i32, i32 } %27, 2, !dbg !18
  %169 = extractvalue { i32, i32, i32, i32 } %30, 2, !dbg !20
  %170 = extractvalue { i32, i32, i32, i32 } %23, 1, !dbg !16
  %171 = extractvalue { i32, i32, i32, i32 } %27, 1, !dbg !18
  %172 = extractvalue { i32, i32, i32, i32 } %30, 1, !dbg !20
  %173 = extractvalue { i32, i32, i32, i32 } %23, 0, !dbg !16
  %174 = extractvalue { i32, i32, i32, i32 } %27, 0, !dbg !18
  %175 = extractvalue { i32, i32, i32, i32 } %30, 0, !dbg !20
  %176 = extractvalue { i32, i32, i32, i32 } %22, 3, !dbg !16
  %177 = extractvalue { i32, i32, i32, i32 } %26, 3, !dbg !18
  %178 = extractvalue { i32, i32, i32, i32 } %29, 3, !dbg !20
  %179 = extractvalue { i32, i32, i32, i32 } %22, 2, !dbg !16
  %180 = extractvalue { i32, i32, i32, i32 } %26, 2, !dbg !18
  %181 = extractvalue { i32, i32, i32, i32 } %29, 2, !dbg !20
  %182 = extractvalue { i32, i32, i32, i32 } %22, 1, !dbg !16
  %183 = extractvalue { i32, i32, i32, i32 } %26, 1, !dbg !18
  %184 = extractvalue { i32, i32, i32, i32 } %29, 1, !dbg !20
  %185 = extractvalue { i32, i32, i32, i32 } %22, 0, !dbg !16
  %186 = extractvalue { i32, i32, i32, i32 } %26, 0, !dbg !18
  %187 = extractvalue { i32, i32, i32, i32 } %29, 0, !dbg !20
  %188 = extractvalue { i32, i32, i32, i32 } %59, 3, !dbg !28
  %189 = extractvalue { i32, i32, i32, i32 } %59, 2, !dbg !28
  %190 = extractvalue { i32, i32, i32, i32 } %59, 1, !dbg !28
  %191 = extractvalue { i32, i32, i32, i32 } %59, 0, !dbg !28
  %192 = extractvalue { i32, i32, i32, i32 } %58, 3, !dbg !28
  %193 = extractvalue { i32, i32, i32, i32 } %58, 2, !dbg !28
  %194 = extractvalue { i32, i32, i32, i32 } %58, 1, !dbg !28
  %195 = extractvalue { i32, i32, i32, i32 } %58, 0, !dbg !28
  %196 = extractvalue { i32, i32, i32, i32 } %55, 3, !dbg !26
  %197 = extractvalue { i32, i32, i32, i32 } %55, 2, !dbg !26
  %198 = extractvalue { i32, i32, i32, i32 } %55, 1, !dbg !26
  %199 = extractvalue { i32, i32, i32, i32 } %55, 0, !dbg !26
  %200 = extractvalue { i32, i32, i32, i32 } %54, 3, !dbg !26
  %201 = extractvalue { i32, i32, i32, i32 } %54, 2, !dbg !26
  %202 = extractvalue { i32, i32, i32, i32 } %54, 1, !dbg !26
  %203 = extractvalue { i32, i32, i32, i32 } %54, 0, !dbg !26
  %204 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !24
  %205 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !24
  %206 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !24
  %207 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !24
  %208 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !24
  %209 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !24
  %210 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !24
  %211 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !24
  %212 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !31
  %213 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !31
  %214 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !31
  %215 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !31
  %216 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !31
  %217 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !31
  %218 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !31
  %219 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !31
  %220 = insertelement <8 x i32> poison, i32 %164, i64 0, !dbg !16
  %221 = insertelement <8 x i32> %220, i32 %167, i64 1, !dbg !16
  %222 = insertelement <8 x i32> %221, i32 %170, i64 2, !dbg !16
  %223 = insertelement <8 x i32> %222, i32 %173, i64 3, !dbg !16
  %224 = insertelement <8 x i32> %223, i32 %176, i64 4, !dbg !16
  %225 = insertelement <8 x i32> %224, i32 %179, i64 5, !dbg !16
  %226 = insertelement <8 x i32> %225, i32 %182, i64 6, !dbg !16
  %227 = insertelement <8 x i32> %226, i32 %185, i64 7, !dbg !16
  %228 = bitcast <8 x i32> %227 to <8 x float>, !dbg !16
  %229 = insertelement <8 x i32> poison, i32 %165, i64 0, !dbg !18
  %230 = insertelement <8 x i32> %229, i32 %168, i64 1, !dbg !18
  %231 = insertelement <8 x i32> %230, i32 %171, i64 2, !dbg !18
  %232 = insertelement <8 x i32> %231, i32 %174, i64 3, !dbg !18
  %233 = insertelement <8 x i32> %232, i32 %177, i64 4, !dbg !18
  %234 = insertelement <8 x i32> %233, i32 %180, i64 5, !dbg !18
  %235 = insertelement <8 x i32> %234, i32 %183, i64 6, !dbg !18
  %236 = insertelement <8 x i32> %235, i32 %186, i64 7, !dbg !18
  %237 = bitcast <8 x i32> %236 to <8 x float>, !dbg !18
  %238 = fadd <8 x float> %228, %237, !dbg !32
  %239 = insertelement <8 x i32> poison, i32 %166, i64 0, !dbg !20
  %240 = insertelement <8 x i32> %239, i32 %169, i64 1, !dbg !20
  %241 = insertelement <8 x i32> %240, i32 %172, i64 2, !dbg !20
  %242 = insertelement <8 x i32> %241, i32 %175, i64 3, !dbg !20
  %243 = insertelement <8 x i32> %242, i32 %178, i64 4, !dbg !20
  %244 = insertelement <8 x i32> %243, i32 %181, i64 5, !dbg !20
  %245 = insertelement <8 x i32> %244, i32 %184, i64 6, !dbg !20
  %246 = insertelement <8 x i32> %245, i32 %187, i64 7, !dbg !20
  %247 = bitcast <8 x i32> %246 to <8 x float>, !dbg !20
  %248 = fsub <8 x float> %238, %247, !dbg !33
  %249 = insertelement <8 x i32> poison, i32 %188, i64 0, !dbg !28
  %250 = insertelement <8 x i32> %249, i32 %189, i64 1, !dbg !28
  %251 = insertelement <8 x i32> %250, i32 %190, i64 2, !dbg !28
  %252 = insertelement <8 x i32> %251, i32 %191, i64 3, !dbg !28
  %253 = insertelement <8 x i32> %252, i32 %192, i64 4, !dbg !28
  %254 = insertelement <8 x i32> %253, i32 %193, i64 5, !dbg !28
  %255 = insertelement <8 x i32> %254, i32 %194, i64 6, !dbg !28
  %256 = insertelement <8 x i32> %255, i32 %195, i64 7, !dbg !28
  %257 = bitcast <8 x i32> %256 to <8 x float>, !dbg !28
  %258 = insertelement <8 x i32> poison, i32 %196, i64 0, !dbg !26
  %259 = insertelement <8 x i32> %258, i32 %197, i64 1, !dbg !26
  %260 = insertelement <8 x i32> %259, i32 %198, i64 2, !dbg !26
  %261 = insertelement <8 x i32> %260, i32 %199, i64 3, !dbg !26
  %262 = insertelement <8 x i32> %261, i32 %200, i64 4, !dbg !26
  %263 = insertelement <8 x i32> %262, i32 %201, i64 5, !dbg !26
  %264 = insertelement <8 x i32> %263, i32 %202, i64 6, !dbg !26
  %265 = insertelement <8 x i32> %264, i32 %203, i64 7, !dbg !26
  %266 = bitcast <8 x i32> %265 to <8 x float>, !dbg !26
  %267 = insertelement <8 x i32> poison, i32 %204, i64 0, !dbg !24
  %268 = insertelement <8 x i32> %267, i32 %205, i64 1, !dbg !24
  %269 = insertelement <8 x i32> %268, i32 %206, i64 2, !dbg !24
  %270 = insertelement <8 x i32> %269, i32 %207, i64 3, !dbg !24
  %271 = insertelement <8 x i32> %270, i32 %208, i64 4, !dbg !24
  %272 = insertelement <8 x i32> %271, i32 %209, i64 5, !dbg !24
  %273 = insertelement <8 x i32> %272, i32 %210, i64 6, !dbg !24
  %274 = insertelement <8 x i32> %273, i32 %211, i64 7, !dbg !24
  %275 = bitcast <8 x i32> %274 to <8 x float>, !dbg !24
  %276 = insertelement <8 x float> poison, float %219, i64 0, !dbg !34
  %277 = insertelement <8 x float> %276, float %218, i64 1, !dbg !34
  %278 = insertelement <8 x float> %277, float %217, i64 2, !dbg !34
  %279 = insertelement <8 x float> %278, float %216, i64 3, !dbg !34
  %280 = insertelement <8 x float> %279, float %215, i64 4, !dbg !34
  %281 = insertelement <8 x float> %280, float %214, i64 5, !dbg !34
  %282 = insertelement <8 x float> %281, float %213, i64 6, !dbg !34
  %283 = insertelement <8 x float> %282, float %212, i64 7, !dbg !34
  %284 = fmul <8 x float> %248, %283, !dbg !34
  %285 = fmul <8 x float> %284, %275, !dbg !35
  %286 = fadd <8 x float> %285, %266, !dbg !36
  %287 = fadd <8 x float> %286, %257, !dbg !37
  %288 = fcmp olt <8 x float> %287, zeroinitializer, !dbg !38
  %289 = extractelement <8 x i1> %288, i64 7, !dbg !42
  %290 = extractelement <8 x i1> %288, i64 6, !dbg !42
  %291 = extractelement <8 x i1> %288, i64 5, !dbg !42
  %292 = extractelement <8 x i1> %288, i64 4, !dbg !42
  %293 = extractelement <8 x i1> %288, i64 3, !dbg !42
  %294 = extractelement <8 x i1> %288, i64 2, !dbg !42
  %295 = extractelement <8 x i1> %288, i64 1, !dbg !42
  %296 = extractelement <8 x i1> %288, i64 0, !dbg !42
  %bc = bitcast <8 x float> %238 to <8 x i32>, !dbg !43
  %297 = extractelement <8 x i32> %bc, i64 7, !dbg !43
  %bc36 = bitcast <8 x float> %238 to <8 x i32>, !dbg !43
  %298 = extractelement <8 x i32> %bc36, i64 6, !dbg !43
  %bc37 = bitcast <8 x float> %238 to <8 x i32>, !dbg !43
  %299 = extractelement <8 x i32> %bc37, i64 5, !dbg !43
  %bc38 = bitcast <8 x float> %238 to <8 x i32>, !dbg !43
  %300 = extractelement <8 x i32> %bc38, i64 4, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %297, i32 %298, i32 %299, i32 %300, ptr addrspace(1) %19, i1 true) #3, !dbg !43
  %bc39 = bitcast <8 x float> %238 to <8 x i32>, !dbg !43
  %301 = extractelement <8 x i32> %bc39, i64 3, !dbg !43
  %bc40 = bitcast <8 x float> %238 to <8 x i32>, !dbg !43
  %302 = extractelement <8 x i32> %bc40, i64 2, !dbg !43
  %bc41 = bitcast <8 x float> %238 to <8 x i32>, !dbg !43
  %303 = extractelement <8 x i32> %bc41, i64 1, !dbg !43
  %bc42 = bitcast <8 x float> %238 to <8 x i32>, !dbg !43
  %304 = extractelement <8 x i32> %bc42, i64 0, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %301, i32 %302, i32 %303, i32 %304, ptr addrspace(1) %21, i1 true) #3, !dbg !43
  %305 = getelementptr float, ptr addrspace(1) %7, i64 %18, !dbg !44
  %306 = getelementptr float, ptr addrspace(1) %7, i64 %20, !dbg !44
  %bc43 = bitcast <8 x float> %287 to <8 x i32>, !dbg !45
  %307 = extractelement <8 x i32> %bc43, i64 7, !dbg !45
  %308 = select i1 %289, i32 0, i32 %307, !dbg !42
  %bc44 = bitcast <8 x float> %287 to <8 x i32>, !dbg !45
  %309 = extractelement <8 x i32> %bc44, i64 6, !dbg !45
  %310 = select i1 %290, i32 0, i32 %309, !dbg !42
  %bc45 = bitcast <8 x float> %287 to <8 x i32>, !dbg !45
  %311 = extractelement <8 x i32> %bc45, i64 5, !dbg !45
  %312 = select i1 %291, i32 0, i32 %311, !dbg !42
  %bc46 = bitcast <8 x float> %287 to <8 x i32>, !dbg !45
  %313 = extractelement <8 x i32> %bc46, i64 4, !dbg !45
  %314 = select i1 %292, i32 0, i32 %313, !dbg !42
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %308, i32 %310, i32 %312, i32 %314, ptr addrspace(1) %305, i1 true) #3, !dbg !45
  %bc47 = bitcast <8 x float> %287 to <8 x i32>, !dbg !45
  %315 = extractelement <8 x i32> %bc47, i64 3, !dbg !45
  %316 = select i1 %293, i32 0, i32 %315, !dbg !42
  %bc48 = bitcast <8 x float> %287 to <8 x i32>, !dbg !45
  %317 = extractelement <8 x i32> %bc48, i64 2, !dbg !45
  %318 = select i1 %294, i32 0, i32 %317, !dbg !42
  %bc49 = bitcast <8 x float> %287 to <8 x i32>, !dbg !45
  %319 = extractelement <8 x i32> %bc49, i64 1, !dbg !45
  %320 = select i1 %295, i32 0, i32 %319, !dbg !42
  %bc50 = bitcast <8 x float> %287 to <8 x i32>, !dbg !45
  %321 = extractelement <8 x i32> %bc50, i64 0, !dbg !45
  %322 = select i1 %296, i32 0, i32 %321, !dbg !42
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %316, i32 %318, i32 %320, i32 %322, ptr addrspace(1) %306, i1 true) #3, !dbg !45
  ret void, !dbg !46
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c6yuhfgahg6dog54bkqmab7cbestcstvdmcdzsas2q23uc5nrued.py", directory: "inductor_cache/6y")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_16, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_16, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_16", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_16", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 26, column: 39, scope: !7)
!17 = !DILocation(line: 27, column: 30, scope: !7)
!18 = !DILocation(line: 27, column: 35, scope: !7)
!19 = !DILocation(line: 28, column: 30, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 29, column: 30, scope: !7)
!22 = !DILocation(line: 29, column: 35, scope: !7)
!23 = !DILocation(line: 30, column: 31, scope: !7)
!24 = !DILocation(line: 30, column: 36, scope: !7)
!25 = !DILocation(line: 31, column: 31, scope: !7)
!26 = !DILocation(line: 31, column: 36, scope: !7)
!27 = !DILocation(line: 32, column: 31, scope: !7)
!28 = !DILocation(line: 32, column: 36, scope: !7)
!29 = !DILocation(line: 36, column: 18, scope: !7)
!30 = !DILocation(line: 37, column: 26, scope: !7)
!31 = !DILocation(line: 39, column: 19, scope: !7)
!32 = !DILocation(line: 33, column: 18, scope: !7)
!33 = !DILocation(line: 34, column: 18, scope: !7)
!34 = !DILocation(line: 42, column: 19, scope: !7)
!35 = !DILocation(line: 43, column: 20, scope: !7)
!36 = !DILocation(line: 44, column: 20, scope: !7)
!37 = !DILocation(line: 45, column: 20, scope: !7)
!38 = !DILocation(line: 118, column: 15, scope: !39, inlinedAt: !41)
!39 = distinct !DILexicalBlockFile(scope: !7, file: !40, discriminator: 0)
!40 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!41 = !DILocation(line: 47, column: 42, scope: !7)
!42 = !DILocation(line: 121, column: 29, scope: !39, inlinedAt: !41)
!43 = !DILocation(line: 48, column: 39, scope: !7)
!44 = !DILocation(line: 49, column: 25, scope: !7)
!45 = !DILocation(line: 49, column: 37, scope: !7)
!46 = !DILocation(line: 49, column: 4, scope: !7)
