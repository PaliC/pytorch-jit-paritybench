; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_add_div_mul_sub_20(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %10 = shl i32 %9, 5, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = lshr i32 %11, 3, !dbg !12
  %13 = and i32 %12, 15, !dbg !12
  %14 = or disjoint i32 %13, 16, !dbg !12
  %15 = shl i32 %11, 2, !dbg !12
  %16 = and i32 %15, 28, !dbg !12
  %17 = or disjoint i32 %10, %13, !dbg !13
  %18 = or disjoint i32 %10, %14, !dbg !13
  %19 = or disjoint i32 %10, %16, !dbg !13
  %20 = icmp slt i32 %17, 768, !dbg !14
  %21 = icmp slt i32 %18, 768, !dbg !14
  %22 = icmp slt i32 %19, 768, !dbg !14
  %23 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %24 = shl i32 %23, 5, !dbg !16
  %25 = or disjoint i32 %24, %16, !dbg !17
  %26 = or disjoint i32 %24, %13, !dbg !17
  %27 = or disjoint i32 %24, %14, !dbg !17
  %28 = icmp slt i32 %25, 64, !dbg !18
  %29 = icmp slt i32 %26, 64, !dbg !18
  %30 = icmp slt i32 %27, 64, !dbg !18
  %.frozen = freeze i32 %17, !dbg !19
  %31 = sdiv i32 %.frozen, 192, !dbg !19
  %32 = mul i32 %31, 192, !dbg !20
  %.decomposed = sub i32 %.frozen, %32, !dbg !20
  %.frozen15 = freeze i32 %18, !dbg !19
  %33 = sdiv i32 %.frozen15, 192, !dbg !19
  %34 = mul i32 %33, 192, !dbg !20
  %.decomposed16 = sub i32 %.frozen15, %34, !dbg !20
  %.frozen17 = freeze i32 %19, !dbg !19
  %35 = sdiv i32 %.frozen17, 192, !dbg !19
  %36 = mul i32 %35, 192, !dbg !20
  %.decomposed18 = sub i32 %.frozen17, %36, !dbg !20
  %37 = sext i32 %.decomposed to i64, !dbg !21
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !21
  %39 = sext i32 %.decomposed16 to i64, !dbg !21
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !21
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 %20) #2, !dbg !22
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 %20) #2, !dbg !22
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 %20) #2, !dbg !22
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 %20) #2, !dbg !22
  %45 = bitcast i32 %44 to float, !dbg !22
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 %21) #2, !dbg !22
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 %21) #2, !dbg !22
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 %21) #2, !dbg !22
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 %21) #2, !dbg !22
  %50 = bitcast i32 %49 to float, !dbg !22
  %51 = shl i32 %17, 6, !dbg !23
  %52 = shl i32 %18, 6, !dbg !23
  %53 = add i32 %25, %51, !dbg !24
  %54 = add i32 %25, %52, !dbg !24
  %55 = sext i32 %53 to i64, !dbg !25
  %56 = getelementptr float, ptr addrspace(1) %1, i64 %55, !dbg !25
  %57 = sext i32 %54 to i64, !dbg !25
  %58 = getelementptr float, ptr addrspace(1) %1, i64 %57, !dbg !25
  %59 = and i1 %20, %28, !dbg !26
  %60 = and i1 %21, %28, !dbg !26
  %61 = and i1 %22, %29, !dbg !26
  %62 = and i1 %22, %30, !dbg !26
  %63 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %56, i1 %59) #2, !dbg !27
  %64 = extractvalue { i32, i32, i32, i32 } %63, 0, !dbg !27
  %65 = extractvalue { i32, i32, i32, i32 } %63, 1, !dbg !27
  %66 = extractvalue { i32, i32, i32, i32 } %63, 2, !dbg !27
  %67 = extractvalue { i32, i32, i32, i32 } %63, 3, !dbg !27
  %68 = bitcast i32 %64 to float, !dbg !27
  %69 = bitcast i32 %65 to float, !dbg !27
  %70 = bitcast i32 %66 to float, !dbg !27
  %71 = bitcast i32 %67 to float, !dbg !27
  %72 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %58, i1 %60) #2, !dbg !27
  %73 = extractvalue { i32, i32, i32, i32 } %72, 0, !dbg !27
  %74 = extractvalue { i32, i32, i32, i32 } %72, 1, !dbg !27
  %75 = extractvalue { i32, i32, i32, i32 } %72, 2, !dbg !27
  %76 = extractvalue { i32, i32, i32, i32 } %72, 3, !dbg !27
  %77 = bitcast i32 %73 to float, !dbg !27
  %78 = bitcast i32 %74 to float, !dbg !27
  %79 = bitcast i32 %75 to float, !dbg !27
  %80 = bitcast i32 %76 to float, !dbg !27
  %81 = shl nsw i32 %31, 6, !dbg !28
  %82 = shl nsw i32 %33, 6, !dbg !28
  %83 = add i32 %81, %25, !dbg !29
  %84 = add i32 %82, %25, !dbg !29
  %85 = sext i32 %83 to i64, !dbg !30
  %86 = getelementptr float, ptr addrspace(1) %2, i64 %85, !dbg !30
  %87 = sext i32 %84 to i64, !dbg !30
  %88 = getelementptr float, ptr addrspace(1) %2, i64 %87, !dbg !30
  %89 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %86, i1 %59) #2, !dbg !31
  %90 = extractvalue { i32, i32, i32, i32 } %89, 0, !dbg !31
  %91 = extractvalue { i32, i32, i32, i32 } %89, 1, !dbg !31
  %92 = extractvalue { i32, i32, i32, i32 } %89, 2, !dbg !31
  %93 = extractvalue { i32, i32, i32, i32 } %89, 3, !dbg !31
  %94 = bitcast i32 %90 to float, !dbg !31
  %95 = bitcast i32 %91 to float, !dbg !31
  %96 = bitcast i32 %92 to float, !dbg !31
  %97 = bitcast i32 %93 to float, !dbg !31
  %98 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %88, i1 %60) #2, !dbg !31
  %99 = extractvalue { i32, i32, i32, i32 } %98, 0, !dbg !31
  %100 = extractvalue { i32, i32, i32, i32 } %98, 1, !dbg !31
  %101 = extractvalue { i32, i32, i32, i32 } %98, 2, !dbg !31
  %102 = extractvalue { i32, i32, i32, i32 } %98, 3, !dbg !31
  %103 = bitcast i32 %99 to float, !dbg !31
  %104 = bitcast i32 %100 to float, !dbg !31
  %105 = bitcast i32 %101 to float, !dbg !31
  %106 = bitcast i32 %102 to float, !dbg !31
  %107 = getelementptr float, ptr addrspace(1) %3, i64 %85, !dbg !32
  %108 = getelementptr float, ptr addrspace(1) %3, i64 %87, !dbg !32
  %109 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %107, i1 %59) #2, !dbg !33
  %110 = extractvalue { i32, i32, i32, i32 } %109, 0, !dbg !33
  %111 = extractvalue { i32, i32, i32, i32 } %109, 1, !dbg !33
  %112 = extractvalue { i32, i32, i32, i32 } %109, 2, !dbg !33
  %113 = extractvalue { i32, i32, i32, i32 } %109, 3, !dbg !33
  %114 = bitcast i32 %110 to float, !dbg !33
  %115 = bitcast i32 %111 to float, !dbg !33
  %116 = bitcast i32 %112 to float, !dbg !33
  %117 = bitcast i32 %113 to float, !dbg !33
  %118 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %108, i1 %60) #2, !dbg !33
  %119 = extractvalue { i32, i32, i32, i32 } %118, 0, !dbg !33
  %120 = extractvalue { i32, i32, i32, i32 } %118, 1, !dbg !33
  %121 = extractvalue { i32, i32, i32, i32 } %118, 2, !dbg !33
  %122 = extractvalue { i32, i32, i32, i32 } %118, 3, !dbg !33
  %123 = bitcast i32 %119 to float, !dbg !33
  %124 = bitcast i32 %120 to float, !dbg !33
  %125 = bitcast i32 %121 to float, !dbg !33
  %126 = bitcast i32 %122 to float, !dbg !33
  %127 = getelementptr float, ptr addrspace(1) %4, i64 %37, !dbg !34
  %128 = getelementptr float, ptr addrspace(1) %4, i64 %39, !dbg !34
  %129 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %127, i1 %20) #2, !dbg !35
  %130 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %127, i1 %20) #2, !dbg !35
  %131 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %127, i1 %20) #2, !dbg !35
  %132 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %127, i1 %20) #2, !dbg !35
  %133 = bitcast i32 %132 to float, !dbg !35
  %134 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %128, i1 %21) #2, !dbg !35
  %135 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %128, i1 %21) #2, !dbg !35
  %136 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %128, i1 %21) #2, !dbg !35
  %137 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %128, i1 %21) #2, !dbg !35
  %138 = bitcast i32 %137 to float, !dbg !35
  %139 = fsub float %68, %94, !dbg !36
  %140 = fsub float %69, %95, !dbg !36
  %141 = fsub float %70, %96, !dbg !36
  %142 = fsub float %71, %97, !dbg !36
  %143 = fsub float %77, %103, !dbg !36
  %144 = fsub float %78, %104, !dbg !36
  %145 = fsub float %79, %105, !dbg !36
  %146 = fsub float %80, %106, !dbg !36
  %147 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %139, float %114) #2, !dbg !37
  %148 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %140, float %115) #2, !dbg !37
  %149 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %141, float %116) #2, !dbg !37
  %150 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %142, float %117) #2, !dbg !37
  %151 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %143, float %123) #2, !dbg !37
  %152 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %144, float %124) #2, !dbg !37
  %153 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %145, float %125) #2, !dbg !37
  %154 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %146, float %126) #2, !dbg !37
  %155 = fmul float %147, %45, !dbg !38
  %156 = fmul float %148, %45, !dbg !38
  %157 = fmul float %149, %45, !dbg !38
  %158 = fmul float %150, %45, !dbg !38
  %159 = fmul float %151, %50, !dbg !38
  %160 = fmul float %152, %50, !dbg !38
  %161 = fmul float %153, %50, !dbg !38
  %162 = fmul float %154, %50, !dbg !38
  %163 = fadd float %155, %133, !dbg !39
  %164 = fadd float %156, %133, !dbg !39
  %165 = fadd float %157, %133, !dbg !39
  %166 = fadd float %158, %133, !dbg !39
  %167 = fadd float %159, %138, !dbg !39
  %168 = fadd float %160, %138, !dbg !39
  %169 = fadd float %161, %138, !dbg !39
  %170 = fadd float %162, %138, !dbg !39
  %171 = mul i32 %26, 192, !dbg !40
  %172 = mul i32 %27, 192, !dbg !40
  %173 = mul i32 %35, 12288, !dbg !41
  %174 = add i32 %173, %.decomposed18, !dbg !42
  %175 = add i32 %174, %171, !dbg !43
  %176 = add i32 %174, %172, !dbg !43
  %177 = sext i32 %175 to i64, !dbg !44
  %178 = getelementptr float, ptr addrspace(1) %5, i64 %177, !dbg !44
  %179 = sext i32 %176 to i64, !dbg !44
  %180 = getelementptr float, ptr addrspace(1) %5, i64 %179, !dbg !44
  %181 = shl i32 %11, 7, !dbg !45
  %182 = and i32 %181, 896, !dbg !45
  %183 = or disjoint i32 %182, %13, !dbg !45
  %184 = and i32 %15, 508, !dbg !45
  %185 = lshr exact i32 %182, 1, !dbg !45
  %186 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %185, !dbg !45
  %187 = getelementptr float, ptr addrspace(3) %186, i32 %183, !dbg !45
  %188 = bitcast float %163 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %187, <1 x i32> %188, i1 true) #2, !dbg !45
  %189 = or disjoint i32 %183, 32, !dbg !45
  %190 = lshr i32 %189, 3, !dbg !45
  %191 = and i32 %190, 116, !dbg !45
  %192 = getelementptr float, ptr addrspace(3) @global_smem, i32 %191, !dbg !45
  %193 = getelementptr float, ptr addrspace(3) %192, i32 %189, !dbg !45
  %194 = bitcast float %164 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %193, <1 x i32> %194, i1 true) #2, !dbg !45
  %195 = or disjoint i32 %183, 64, !dbg !45
  %196 = lshr i32 %195, 3, !dbg !45
  %197 = and i32 %196, 120, !dbg !45
  %198 = getelementptr float, ptr addrspace(3) @global_smem, i32 %197, !dbg !45
  %199 = getelementptr float, ptr addrspace(3) %198, i32 %195, !dbg !45
  %200 = bitcast float %165 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %199, <1 x i32> %200, i1 true) #2, !dbg !45
  %201 = or disjoint i32 %183, 96, !dbg !45
  %202 = lshr i32 %201, 3, !dbg !45
  %203 = and i32 %202, 124, !dbg !45
  %204 = getelementptr float, ptr addrspace(3) @global_smem, i32 %203, !dbg !45
  %205 = getelementptr float, ptr addrspace(3) %204, i32 %201, !dbg !45
  %206 = bitcast float %166 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %205, <1 x i32> %206, i1 true) #2, !dbg !45
  %207 = or disjoint i32 %183, 16, !dbg !45
  %208 = getelementptr float, ptr addrspace(3) %186, i32 %207, !dbg !45
  %209 = bitcast float %167 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %208, <1 x i32> %209, i1 true) #2, !dbg !45
  %210 = or disjoint i32 %183, 48, !dbg !45
  %211 = lshr i32 %210, 3, !dbg !45
  %212 = and i32 %211, 116, !dbg !45
  %213 = getelementptr float, ptr addrspace(3) @global_smem, i32 %212, !dbg !45
  %214 = getelementptr float, ptr addrspace(3) %213, i32 %210, !dbg !45
  %215 = bitcast float %168 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %214, <1 x i32> %215, i1 true) #2, !dbg !45
  %216 = or disjoint i32 %183, 80, !dbg !45
  %217 = lshr i32 %216, 3, !dbg !45
  %218 = and i32 %217, 120, !dbg !45
  %219 = getelementptr float, ptr addrspace(3) @global_smem, i32 %218, !dbg !45
  %220 = getelementptr float, ptr addrspace(3) %219, i32 %216, !dbg !45
  %221 = bitcast float %169 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %220, <1 x i32> %221, i1 true) #2, !dbg !45
  %222 = or disjoint i32 %183, 112, !dbg !45
  %223 = lshr i32 %222, 3, !dbg !45
  %224 = and i32 %223, 124, !dbg !45
  %225 = getelementptr float, ptr addrspace(3) @global_smem, i32 %224, !dbg !45
  %226 = getelementptr float, ptr addrspace(3) %225, i32 %222, !dbg !45
  %227 = bitcast float %170 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %226, <1 x i32> %227, i1 true) #2, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %228 = lshr i32 %15, 3, !dbg !45
  %229 = and i32 %228, 60, !dbg !45
  %230 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %229, !dbg !45
  %231 = getelementptr inbounds float, ptr addrspace(3) %230, i32 %184, !dbg !45
  %232 = or disjoint i32 %184, 512, !dbg !45
  %233 = lshr i32 %232, 3, !dbg !45
  %234 = and i32 %233, 124, !dbg !45
  %235 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %234, !dbg !45
  %236 = getelementptr inbounds float, ptr addrspace(3) %235, i32 %232, !dbg !45
  %237 = load <4 x i32>, ptr addrspace(3) %236, align 16, !dbg !45
  %.extract = load i32, ptr addrspace(3) %231, align 16, !dbg !45
  %238 = getelementptr inbounds i8, ptr addrspace(3) %231, i32 4, !dbg !45
  %.extract8 = load i32, ptr addrspace(3) %238, align 4, !dbg !45
  %239 = getelementptr inbounds i8, ptr addrspace(3) %231, i32 8, !dbg !45
  %.extract9 = load i32, ptr addrspace(3) %239, align 8, !dbg !45
  %240 = getelementptr inbounds i8, ptr addrspace(3) %231, i32 12, !dbg !45
  %.extract10 = load i32, ptr addrspace(3) %240, align 4, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %178, i1 %61) #2, !dbg !45
  %.extract11 = extractelement <4 x i32> %237, i64 0, !dbg !45
  %.extract12 = extractelement <4 x i32> %237, i64 1, !dbg !45
  %.extract13 = extractelement <4 x i32> %237, i64 2, !dbg !45
  %.extract14 = extractelement <4 x i32> %237, i64 3, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %180, i1 %62) #2, !dbg !45
  ret void, !dbg !46
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "czljpydhichoxdexmxala4vbl7kni7botlf6dwbzhy44njbbgmma.py", directory: "inductor_cache/zl")
!4 = !{ptr @triton_poi_fused_add_div_mul_sub_20, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_div_mul_sub_20, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_div_mul_sub_20", linkageName: "triton_poi_fused_add_div_mul_sub_20", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 31, column: 19, scope: !7)
!20 = !DILocation(line: 28, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 30, scope: !7)
!22 = !DILocation(line: 32, column: 35, scope: !7)
!23 = !DILocation(line: 33, column: 38, scope: !7)
!24 = !DILocation(line: 33, column: 35, scope: !7)
!25 = !DILocation(line: 33, column: 30, scope: !7)
!26 = !DILocation(line: 33, column: 51, scope: !7)
!27 = !DILocation(line: 33, column: 43, scope: !7)
!28 = !DILocation(line: 34, column: 38, scope: !7)
!29 = !DILocation(line: 34, column: 35, scope: !7)
!30 = !DILocation(line: 34, column: 30, scope: !7)
!31 = !DILocation(line: 34, column: 43, scope: !7)
!32 = !DILocation(line: 35, column: 30, scope: !7)
!33 = !DILocation(line: 35, column: 43, scope: !7)
!34 = !DILocation(line: 36, column: 30, scope: !7)
!35 = !DILocation(line: 36, column: 35, scope: !7)
!36 = !DILocation(line: 37, column: 18, scope: !7)
!37 = !DILocation(line: 38, column: 18, scope: !7)
!38 = !DILocation(line: 39, column: 18, scope: !7)
!39 = !DILocation(line: 40, column: 18, scope: !7)
!40 = !DILocation(line: 41, column: 34, scope: !7)
!41 = !DILocation(line: 41, column: 45, scope: !7)
!42 = !DILocation(line: 41, column: 30, scope: !7)
!43 = !DILocation(line: 41, column: 39, scope: !7)
!44 = !DILocation(line: 41, column: 25, scope: !7)
!45 = !DILocation(line: 41, column: 56, scope: !7)
!46 = !DILocation(line: 41, column: 4, scope: !7)
