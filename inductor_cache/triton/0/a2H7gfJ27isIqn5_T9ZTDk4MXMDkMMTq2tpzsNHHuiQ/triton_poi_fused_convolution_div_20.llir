; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_div_20(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %8 = shl i32 %7, 10, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = shl i32 %9, 2, !dbg !12
  %11 = and i32 %10, 508, !dbg !12
  %12 = and i32 %9, 127, !dbg !12
  %13 = or disjoint i32 %12, 128, !dbg !12
  %14 = or disjoint i32 %12, 256, !dbg !12
  %15 = or disjoint i32 %12, 384, !dbg !12
  %16 = or disjoint i32 %12, 512, !dbg !12
  %17 = or disjoint i32 %12, 640, !dbg !12
  %18 = or disjoint i32 %12, 768, !dbg !12
  %19 = or disjoint i32 %12, 896, !dbg !12
  %20 = or disjoint i32 %8, %11, !dbg !13
  %21 = or disjoint i32 %20, 512, !dbg !13
  %22 = or disjoint i32 %8, %12, !dbg !13
  %23 = or disjoint i32 %8, %13, !dbg !13
  %24 = or disjoint i32 %8, %14, !dbg !13
  %25 = or disjoint i32 %8, %15, !dbg !13
  %26 = or disjoint i32 %8, %16, !dbg !13
  %27 = or disjoint i32 %8, %17, !dbg !13
  %28 = or disjoint i32 %8, %18, !dbg !13
  %29 = or disjoint i32 %8, %19, !dbg !13
  %30 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %31 = icmp slt i32 %30, 9, !dbg !15
  %.frozen = freeze i32 %20, !dbg !16
  %32 = sdiv i32 %.frozen, 128, !dbg !16
  %33 = mul i32 %32, 128, !dbg !17
  %.decomposed = sub i32 %.frozen, %33, !dbg !17
  %34 = sdiv i32 %21, 128, !dbg !16
  %35 = shl i32 %30, 7, !dbg !18
  %36 = add i32 %.decomposed, %35, !dbg !19
  %37 = mul i32 %32, 1152, !dbg !20
  %38 = mul i32 %34, 1152, !dbg !20
  %39 = add i32 %36, %37, !dbg !21
  %40 = add i32 %38, %.decomposed, !dbg !19
  %41 = add i32 %40, %35, !dbg !21
  %42 = sext i32 %39 to i64, !dbg !22
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !22
  %44 = sext i32 %41 to i64, !dbg !22
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !22
  %46 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %43, i1 %31) #2, !dbg !23
  %47 = extractvalue { i32, i32, i32, i32 } %46, 0, !dbg !23
  %48 = extractvalue { i32, i32, i32, i32 } %46, 1, !dbg !23
  %49 = extractvalue { i32, i32, i32, i32 } %46, 2, !dbg !23
  %50 = extractvalue { i32, i32, i32, i32 } %46, 3, !dbg !23
  %51 = bitcast i32 %47 to float, !dbg !23
  %52 = bitcast i32 %48 to float, !dbg !23
  %53 = bitcast i32 %49 to float, !dbg !23
  %54 = bitcast i32 %50 to float, !dbg !23
  %55 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %45, i1 %31) #2, !dbg !23
  %56 = extractvalue { i32, i32, i32, i32 } %55, 0, !dbg !23
  %57 = extractvalue { i32, i32, i32, i32 } %55, 1, !dbg !23
  %58 = extractvalue { i32, i32, i32, i32 } %55, 2, !dbg !23
  %59 = extractvalue { i32, i32, i32, i32 } %55, 3, !dbg !23
  %60 = bitcast i32 %56 to float, !dbg !23
  %61 = bitcast i32 %57 to float, !dbg !23
  %62 = bitcast i32 %58 to float, !dbg !23
  %63 = bitcast i32 %59 to float, !dbg !23
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %1, i1 true) #2, !dbg !24
  %65 = bitcast i32 %64 to float, !dbg !24
  %66 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %51, float %65) #2, !dbg !25
  %67 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %52, float %65) #2, !dbg !25
  %68 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %53, float %65) #2, !dbg !25
  %69 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %54, float %65) #2, !dbg !25
  %70 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %60, float %65) #2, !dbg !25
  %71 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %61, float %65) #2, !dbg !25
  %72 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %62, float %65) #2, !dbg !25
  %73 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %63, float %65) #2, !dbg !25
  %74 = mul i32 %22, 9, !dbg !26
  %75 = mul i32 %23, 9, !dbg !26
  %76 = mul i32 %24, 9, !dbg !26
  %77 = mul i32 %25, 9, !dbg !26
  %78 = mul i32 %26, 9, !dbg !26
  %79 = mul i32 %27, 9, !dbg !26
  %80 = mul i32 %28, 9, !dbg !26
  %81 = mul i32 %29, 9, !dbg !26
  %82 = add i32 %74, %30, !dbg !27
  %83 = add i32 %75, %30, !dbg !27
  %84 = add i32 %76, %30, !dbg !27
  %85 = add i32 %77, %30, !dbg !27
  %86 = add i32 %78, %30, !dbg !27
  %87 = add i32 %79, %30, !dbg !27
  %88 = add i32 %80, %30, !dbg !27
  %89 = add i32 %81, %30, !dbg !27
  %90 = sext i32 %82 to i64, !dbg !28
  %91 = getelementptr float, ptr addrspace(1) %2, i64 %90, !dbg !28
  %92 = sext i32 %83 to i64, !dbg !28
  %93 = getelementptr float, ptr addrspace(1) %2, i64 %92, !dbg !28
  %94 = sext i32 %84 to i64, !dbg !28
  %95 = getelementptr float, ptr addrspace(1) %2, i64 %94, !dbg !28
  %96 = sext i32 %85 to i64, !dbg !28
  %97 = getelementptr float, ptr addrspace(1) %2, i64 %96, !dbg !28
  %98 = sext i32 %86 to i64, !dbg !28
  %99 = getelementptr float, ptr addrspace(1) %2, i64 %98, !dbg !28
  %100 = sext i32 %87 to i64, !dbg !28
  %101 = getelementptr float, ptr addrspace(1) %2, i64 %100, !dbg !28
  %102 = sext i32 %88 to i64, !dbg !28
  %103 = getelementptr float, ptr addrspace(1) %2, i64 %102, !dbg !28
  %104 = sext i32 %89 to i64, !dbg !28
  %105 = getelementptr float, ptr addrspace(1) %2, i64 %104, !dbg !28
  %.idx = shl nuw nsw i32 %11, 3, !dbg !29
  %106 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !29
  %107 = bitcast float %66 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %106, <1 x i32> %107, i1 true) #2, !dbg !29
  %108 = shl nuw nsw i32 %11, 1, !dbg !29
  %109 = or disjoint i32 %108, 2, !dbg !29
  %110 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %109, !dbg !29
  %111 = bitcast float %67 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %110, <1 x i32> %111, i1 true) #2, !dbg !29
  %112 = or disjoint i32 %108, 4, !dbg !29
  %113 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %112, !dbg !29
  %114 = bitcast float %68 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %113, <1 x i32> %114, i1 true) #2, !dbg !29
  %115 = or disjoint i32 %108, 6, !dbg !29
  %116 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %115, !dbg !29
  %117 = bitcast float %69 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %116, <1 x i32> %117, i1 true) #2, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %.idx1 = shl nuw nsw i32 %12, 3, !dbg !29
  %118 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx1, !dbg !29
  %119 = load i32, ptr addrspace(3) %118, align 8, !dbg !29
  %.idx2 = shl nuw nsw i32 %13, 3, !dbg !29
  %120 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx2, !dbg !29
  %121 = load i32, ptr addrspace(3) %120, align 8, !dbg !29
  %.idx3 = shl nuw nsw i32 %14, 3, !dbg !29
  %122 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx3, !dbg !29
  %123 = load i32, ptr addrspace(3) %122, align 8, !dbg !29
  %.idx4 = shl nuw nsw i32 %15, 3, !dbg !29
  %124 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx4, !dbg !29
  %125 = load i32, ptr addrspace(3) %124, align 8, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %126 = bitcast float %70 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %106, <1 x i32> %126, i1 true) #2, !dbg !29
  %127 = bitcast float %71 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %110, <1 x i32> %127, i1 true) #2, !dbg !29
  %128 = bitcast float %72 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %113, <1 x i32> %128, i1 true) #2, !dbg !29
  %129 = bitcast float %73 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %116, <1 x i32> %129, i1 true) #2, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %130 = load i32, ptr addrspace(3) %118, align 8, !dbg !29
  %131 = load i32, ptr addrspace(3) %120, align 8, !dbg !29
  %132 = load i32, ptr addrspace(3) %122, align 8, !dbg !29
  %133 = load i32, ptr addrspace(3) %124, align 8, !dbg !29
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %119, ptr addrspace(1) %91, i1 %31) #2, !dbg !29
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %121, ptr addrspace(1) %93, i1 %31) #2, !dbg !29
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %123, ptr addrspace(1) %95, i1 %31) #2, !dbg !29
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %125, ptr addrspace(1) %97, i1 %31) #2, !dbg !29
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %130, ptr addrspace(1) %99, i1 %31) #2, !dbg !29
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %131, ptr addrspace(1) %101, i1 %31) #2, !dbg !29
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %132, ptr addrspace(1) %103, i1 %31) #2, !dbg !29
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %133, ptr addrspace(1) %105, i1 %31) #2, !dbg !29
  %134 = getelementptr float, ptr addrspace(1) %3, i64 %42, !dbg !30
  %135 = getelementptr float, ptr addrspace(1) %3, i64 %44, !dbg !30
  %136 = bitcast float %66 to i32, !dbg !31
  %137 = bitcast float %67 to i32, !dbg !31
  %138 = bitcast float %68 to i32, !dbg !31
  %139 = bitcast float %69 to i32, !dbg !31
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %136, i32 %137, i32 %138, i32 %139, ptr addrspace(1) %134, i1 %31) #2, !dbg !31
  %140 = bitcast float %70 to i32, !dbg !31
  %141 = bitcast float %71 to i32, !dbg !31
  %142 = bitcast float %72 to i32, !dbg !31
  %143 = bitcast float %73 to i32, !dbg !31
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %140, i32 %141, i32 %142, i32 %143, ptr addrspace(1) %135, i1 %31) #2, !dbg !31
  ret void, !dbg !32
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cz3y5mukpjyhvr5frybp6jwkbxmskzeumqp3k7mcwbkzyveaecps.py", directory: "inductor_cache/z3")
!4 = !{ptr @triton_poi_fused_convolution_div_20, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_div_20, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_div_20", linkageName: "triton_poi_fused_convolution_div_20", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 27, column: 21, scope: !7)
!16 = !DILocation(line: 30, column: 19, scope: !7)
!17 = !DILocation(line: 29, column: 19, scope: !7)
!18 = !DILocation(line: 32, column: 39, scope: !7)
!19 = !DILocation(line: 32, column: 35, scope: !7)
!20 = !DILocation(line: 32, column: 49, scope: !7)
!21 = !DILocation(line: 32, column: 44, scope: !7)
!22 = !DILocation(line: 32, column: 30, scope: !7)
!23 = !DILocation(line: 32, column: 54, scope: !7)
!24 = !DILocation(line: 33, column: 19, scope: !7)
!25 = !DILocation(line: 35, column: 18, scope: !7)
!26 = !DILocation(line: 36, column: 32, scope: !7)
!27 = !DILocation(line: 36, column: 30, scope: !7)
!28 = !DILocation(line: 36, column: 25, scope: !7)
!29 = !DILocation(line: 36, column: 43, scope: !7)
!30 = !DILocation(line: 37, column: 25, scope: !7)
!31 = !DILocation(line: 37, column: 55, scope: !7)
!32 = !DILocation(line: 37, column: 4, scope: !7)
