; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_64(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, i32 %14) local_unnamed_addr !dbg !7 {
  %16 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %17 = shl i32 %16, 10, !dbg !11
  %18 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %19 = shl i32 %18, 2, !dbg !12
  %20 = and i32 %19, 508, !dbg !12
  %21 = or disjoint i32 %17, %20, !dbg !13
  %22 = or disjoint i32 %21, 512, !dbg !13
  %23 = icmp slt i32 %21, 239616, !dbg !14
  %24 = icmp slt i32 %22, 239616, !dbg !14
  %25 = srem i32 %21, 256, !dbg !15
  %.frozen = freeze i32 %21, !dbg !16
  %26 = sdiv i32 %.frozen, 59904, !dbg !16
  %.frozen99 = freeze i32 %22, !dbg !16
  %27 = sdiv i32 %.frozen99, 59904, !dbg !16
  %28 = mul i32 %26, 59904, !dbg !17
  %srem.decomposed = sub i32 %.frozen, %28, !dbg !17
  %29 = mul i32 %27, 59904, !dbg !17
  %srem1.decomposed = sub i32 %.frozen99, %29, !dbg !17
  %30 = mul nsw i32 %26, 38400, !dbg !18
  %31 = mul nsw i32 %27, 38400, !dbg !18
  %32 = add nsw i32 %30, %srem.decomposed, !dbg !19
  %33 = add nsw i32 %31, %srem1.decomposed, !dbg !19
  %34 = sext i32 %32 to i64, !dbg !20
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !20
  %36 = sext i32 %33 to i64, !dbg !20
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !20
  %38 = mul nsw i32 %26, 3072, !dbg !21
  %39 = mul nsw i32 %27, 3072, !dbg !21
  %40 = add nsw i32 %38, %25, !dbg !22
  %41 = add nsw i32 %40, -38400, !dbg !23
  %42 = add nsw i32 %39, %25, !dbg !22
  %43 = add nsw i32 %42, -38400, !dbg !23
  %44 = add nsw i32 %40, -41472, !dbg !24
  %45 = add nsw i32 %42, -41472, !dbg !24
  %46 = add nsw i32 %40, -44544, !dbg !25
  %47 = add nsw i32 %42, -44544, !dbg !25
  %48 = insertelement <2 x i32> poison, i32 %22, i64 0, !dbg !26
  %49 = insertelement <2 x i32> %48, i32 %21, i64 1, !dbg !26
  %50 = sdiv <2 x i32> %49, splat (i32 256), !dbg !26
  %51 = srem <2 x i32> %50, splat (i32 234), !dbg !27
  %52 = extractelement <2 x i32> %51, i64 1, !dbg !28
  %53 = sext i32 %52 to i64, !dbg !29
  %54 = getelementptr float, ptr addrspace(1) %8, i64 %53, !dbg !29
  %55 = extractelement <2 x i32> %51, i64 0, !dbg !28
  %56 = sext i32 %55 to i64, !dbg !29
  %57 = getelementptr float, ptr addrspace(1) %8, i64 %56, !dbg !29
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 %23) #3, !dbg !30
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 %23) #3, !dbg !30
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 %23) #3, !dbg !30
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 %23) #3, !dbg !30
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 %24) #3, !dbg !30
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 %24) #3, !dbg !30
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 %24) #3, !dbg !30
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 %24) #3, !dbg !30
  %66 = getelementptr float, ptr addrspace(1) %9, i64 %53, !dbg !31
  %67 = getelementptr float, ptr addrspace(1) %9, i64 %56, !dbg !31
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 %23) #3, !dbg !32
  %69 = bitcast i32 %68 to float, !dbg !32
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 %23) #3, !dbg !32
  %71 = bitcast i32 %70 to float, !dbg !32
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 %23) #3, !dbg !32
  %73 = bitcast i32 %72 to float, !dbg !32
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 %23) #3, !dbg !32
  %75 = bitcast i32 %74 to float, !dbg !32
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 %24) #3, !dbg !32
  %77 = bitcast i32 %76 to float, !dbg !32
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 %24) #3, !dbg !32
  %79 = bitcast i32 %78 to float, !dbg !32
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 %24) #3, !dbg !32
  %81 = bitcast i32 %80 to float, !dbg !32
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 %24) #3, !dbg !32
  %83 = bitcast i32 %82 to float, !dbg !32
  %84 = getelementptr float, ptr addrspace(1) %10, i64 %53, !dbg !33
  %85 = getelementptr float, ptr addrspace(1) %10, i64 %56, !dbg !33
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 %23) #3, !dbg !34
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 %23) #3, !dbg !34
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 %23) #3, !dbg !34
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 %23) #3, !dbg !34
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 %24) #3, !dbg !34
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 %24) #3, !dbg !34
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 %24) #3, !dbg !34
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 %24) #3, !dbg !34
  %94 = getelementptr float, ptr addrspace(1) %11, i64 %53, !dbg !35
  %95 = getelementptr float, ptr addrspace(1) %11, i64 %56, !dbg !35
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 %23) #3, !dbg !36
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 %23) #3, !dbg !36
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 %23) #3, !dbg !36
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 %23) #3, !dbg !36
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %95, i1 %24) #3, !dbg !36
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %95, i1 %24) #3, !dbg !36
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %95, i1 %24) #3, !dbg !36
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %95, i1 %24) #3, !dbg !36
  %104 = icmp slt <2 x i32> %51, splat (i32 150), !dbg !37
  %105 = extractelement <2 x i1> %104, i64 1, !dbg !38
  %106 = and i1 %23, %105, !dbg !38
  %107 = extractelement <2 x i1> %104, i64 0, !dbg !38
  %108 = and i1 %24, %107, !dbg !38
  %109 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %35, i1 %106, i32 0, i1 %106, i32 0, i1 %106, i32 0, i1 %106, i32 0, i1 %106) #3, !dbg !39
  %110 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %37, i1 %108, i32 0, i1 %108, i32 0, i1 %108, i32 0, i1 %108, i32 0, i1 %108) #3, !dbg !39
  %111 = add nsw <2 x i32> %51, splat (i32 -150), !dbg !40
  %112 = icmp ult <2 x i32> %111, splat (i32 12), !dbg !40
  %113 = shl nsw i32 %52, 8, !dbg !22
  %114 = shl nsw i32 %55, 8, !dbg !22
  %115 = add nsw i32 %41, %113, !dbg !41
  %116 = add nsw i32 %43, %114, !dbg !41
  %117 = sext i32 %115 to i64, !dbg !42
  %118 = getelementptr float, ptr addrspace(1) %1, i64 %117, !dbg !42
  %119 = sext i32 %116 to i64, !dbg !42
  %120 = getelementptr float, ptr addrspace(1) %1, i64 %119, !dbg !42
  %121 = extractelement <2 x i1> %112, i64 1, !dbg !43
  %122 = and i1 %23, %121, !dbg !43
  %123 = extractelement <2 x i1> %112, i64 0, !dbg !43
  %124 = and i1 %24, %123, !dbg !43
  %125 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %118, i1 %122, i32 0, i1 %122, i32 0, i1 %122, i32 0, i1 %122, i32 0, i1 %122) #3, !dbg !44
  %126 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %120, i1 %124, i32 0, i1 %124, i32 0, i1 %124, i32 0, i1 %124, i32 0, i1 %124) #3, !dbg !44
  %127 = add nsw <2 x i32> %51, splat (i32 -162), !dbg !45
  %128 = icmp ult <2 x i32> %127, splat (i32 12), !dbg !45
  %129 = add nsw i32 %44, %113, !dbg !46
  %130 = add nsw i32 %45, %114, !dbg !46
  %131 = sext i32 %129 to i64, !dbg !47
  %132 = getelementptr float, ptr addrspace(1) %2, i64 %131, !dbg !47
  %133 = sext i32 %130 to i64, !dbg !47
  %134 = getelementptr float, ptr addrspace(1) %2, i64 %133, !dbg !47
  %135 = extractelement <2 x i1> %128, i64 1, !dbg !48
  %136 = and i1 %23, %135, !dbg !48
  %137 = extractelement <2 x i1> %128, i64 0, !dbg !48
  %138 = and i1 %24, %137, !dbg !48
  %139 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %132, i1 %136, i32 0, i1 %136, i32 0, i1 %136, i32 0, i1 %136, i32 0, i1 %136) #3, !dbg !49
  %140 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %134, i1 %138, i32 0, i1 %138, i32 0, i1 %138, i32 0, i1 %138, i32 0, i1 %138) #3, !dbg !49
  %141 = add nsw <2 x i32> %51, splat (i32 -174), !dbg !50
  %142 = icmp ult <2 x i32> %141, splat (i32 12), !dbg !50
  %143 = add nsw i32 %46, %113, !dbg !51
  %144 = add nsw i32 %47, %114, !dbg !51
  %145 = sext i32 %143 to i64, !dbg !52
  %146 = getelementptr float, ptr addrspace(1) %3, i64 %145, !dbg !52
  %147 = sext i32 %144 to i64, !dbg !52
  %148 = getelementptr float, ptr addrspace(1) %3, i64 %147, !dbg !52
  %149 = extractelement <2 x i1> %142, i64 1, !dbg !53
  %150 = and i1 %23, %149, !dbg !53
  %151 = extractelement <2 x i1> %142, i64 0, !dbg !53
  %152 = and i1 %24, %151, !dbg !53
  %153 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %146, i1 %150, i32 0, i1 %150, i32 0, i1 %150, i32 0, i1 %150, i32 0, i1 %150) #3, !dbg !54
  %154 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %148, i1 %152, i32 0, i1 %152, i32 0, i1 %152, i32 0, i1 %152, i32 0, i1 %152) #3, !dbg !54
  %155 = add nsw <2 x i32> %51, splat (i32 -186), !dbg !55
  %156 = icmp ult <2 x i32> %155, splat (i32 12), !dbg !55
  %157 = add nsw i32 %40, -47616, !dbg !56
  %158 = add nsw i32 %157, %113, !dbg !57
  %159 = add nsw i32 %42, -47616, !dbg !56
  %160 = add nsw i32 %159, %114, !dbg !57
  %161 = sext i32 %158 to i64, !dbg !58
  %162 = getelementptr float, ptr addrspace(1) %4, i64 %161, !dbg !58
  %163 = sext i32 %160 to i64, !dbg !58
  %164 = getelementptr float, ptr addrspace(1) %4, i64 %163, !dbg !58
  %165 = extractelement <2 x i1> %156, i64 1, !dbg !59
  %166 = and i1 %23, %165, !dbg !59
  %167 = extractelement <2 x i1> %156, i64 0, !dbg !59
  %168 = and i1 %24, %167, !dbg !59
  %169 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %162, i1 %166, i32 0, i1 %166, i32 0, i1 %166, i32 0, i1 %166, i32 0, i1 %166) #3, !dbg !60
  %170 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %164, i1 %168, i32 0, i1 %168, i32 0, i1 %168, i32 0, i1 %168, i32 0, i1 %168) #3, !dbg !60
  %171 = add nsw i32 %52, -198, !dbg !61
  %172 = icmp ult i32 %171, 12, !dbg !61
  %173 = add nsw i32 %55, -198, !dbg !61
  %174 = icmp ult i32 %173, 12, !dbg !61
  %175 = add nsw i32 %40, -50688, !dbg !62
  %176 = add nsw i32 %175, %113, !dbg !63
  %177 = add nsw i32 %42, -50688, !dbg !62
  %178 = add nsw i32 %177, %114, !dbg !63
  %179 = sext i32 %176 to i64, !dbg !64
  %180 = getelementptr float, ptr addrspace(1) %5, i64 %179, !dbg !64
  %181 = sext i32 %178 to i64, !dbg !64
  %182 = getelementptr float, ptr addrspace(1) %5, i64 %181, !dbg !64
  %183 = and i1 %23, %172, !dbg !65
  %184 = and i1 %24, %174, !dbg !65
  %185 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %180, i1 %183, i32 0, i1 %183, i32 0, i1 %183, i32 0, i1 %183, i32 0, i1 %183) #3, !dbg !66
  %186 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %182, i1 %184, i32 0, i1 %184, i32 0, i1 %184, i32 0, i1 %184, i32 0, i1 %184) #3, !dbg !66
  %187 = add nsw <2 x i32> %51, splat (i32 -210), !dbg !67
  %188 = icmp ult <2 x i32> %187, splat (i32 12), !dbg !67
  %189 = add nsw i32 %40, -53760, !dbg !68
  %190 = add nsw i32 %189, %113, !dbg !69
  %191 = add nsw i32 %42, -53760, !dbg !68
  %192 = add nsw i32 %191, %114, !dbg !69
  %193 = sext i32 %190 to i64, !dbg !70
  %194 = getelementptr float, ptr addrspace(1) %6, i64 %193, !dbg !70
  %195 = sext i32 %192 to i64, !dbg !70
  %196 = getelementptr float, ptr addrspace(1) %6, i64 %195, !dbg !70
  %197 = extractelement <2 x i1> %188, i64 1, !dbg !71
  %198 = and i1 %23, %197, !dbg !71
  %199 = extractelement <2 x i1> %188, i64 0, !dbg !71
  %200 = and i1 %24, %199, !dbg !71
  %201 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %194, i1 %198, i32 0, i1 %198, i32 0, i1 %198, i32 0, i1 %198, i32 0, i1 %198) #3, !dbg !72
  %202 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %196, i1 %200, i32 0, i1 %200, i32 0, i1 %200, i32 0, i1 %200, i32 0, i1 %200) #3, !dbg !72
  %203 = icmp sgt i32 %52, 221, !dbg !28
  %204 = icmp sgt i32 %55, 221, !dbg !28
  %205 = add nsw i32 %40, -56832, !dbg !73
  %206 = add nsw i32 %205, %113, !dbg !74
  %207 = add nsw i32 %42, -56832, !dbg !73
  %208 = add nsw i32 %207, %114, !dbg !74
  %209 = sext i32 %206 to i64, !dbg !75
  %210 = getelementptr float, ptr addrspace(1) %7, i64 %209, !dbg !75
  %211 = sext i32 %208 to i64, !dbg !75
  %212 = getelementptr float, ptr addrspace(1) %7, i64 %211, !dbg !75
  %213 = and i1 %23, %203, !dbg !76
  %214 = and i1 %24, %204, !dbg !76
  %215 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %210, i1 %213, i32 0, i1 %213, i32 0, i1 %213, i32 0, i1 %213, i32 0, i1 %213) #3, !dbg !77
  %216 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %212, i1 %214, i32 0, i1 %214, i32 0, i1 %214, i32 0, i1 %214, i32 0, i1 %214) #3, !dbg !77
  %217 = fadd float %69, 0x3EE4F8B580000000, !dbg !78
  %218 = fadd float %71, 0x3EE4F8B580000000, !dbg !78
  %219 = fadd float %73, 0x3EE4F8B580000000, !dbg !78
  %220 = fadd float %75, 0x3EE4F8B580000000, !dbg !78
  %221 = fadd float %77, 0x3EE4F8B580000000, !dbg !78
  %222 = fadd float %79, 0x3EE4F8B580000000, !dbg !78
  %223 = fadd float %81, 0x3EE4F8B580000000, !dbg !78
  %224 = fadd float %83, 0x3EE4F8B580000000, !dbg !78
  %225 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !79
  %.not.i = icmp eq i32 %225, 0, !dbg !79
  %226 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !79
  %.not1.i = icmp eq i32 %226, 0, !dbg !79
  br i1 %.not.i, label %232, label %227, !dbg !79

227:                                              ; preds = %15
  br i1 %.not1.i, label %230, label %228, !dbg !79

228:                                              ; preds = %227
  %229 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %217) #3, !dbg !79
  br label %__nv_sqrtf.exit, !dbg !79

230:                                              ; preds = %227
  %231 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %217) #3, !dbg !79
  br label %__nv_sqrtf.exit, !dbg !79

232:                                              ; preds = %15
  br i1 %.not1.i, label %235, label %233, !dbg !79

233:                                              ; preds = %232
  %234 = tail call float @llvm.nvvm.sqrt.rn.f(float %217) #3, !dbg !79
  br label %__nv_sqrtf.exit, !dbg !79

235:                                              ; preds = %232
  %236 = tail call float @llvm.nvvm.sqrt.approx.f(float %217) #3, !dbg !79
  br label %__nv_sqrtf.exit, !dbg !79

__nv_sqrtf.exit:                                  ; preds = %228, %230, %233, %235
  %.0.i = phi float [ %229, %228 ], [ %231, %230 ], [ %234, %233 ], [ %236, %235 ], !dbg !79
  %237 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !79
  %.not.i57 = icmp eq i32 %237, 0, !dbg !79
  %238 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !79
  %.not1.i60 = icmp eq i32 %238, 0, !dbg !79
  br i1 %.not.i57, label %244, label %239, !dbg !79

239:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i60, label %242, label %240, !dbg !79

240:                                              ; preds = %239
  %241 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %218) #3, !dbg !79
  br label %__nv_sqrtf.exit61, !dbg !79

242:                                              ; preds = %239
  %243 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %218) #3, !dbg !79
  br label %__nv_sqrtf.exit61, !dbg !79

244:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i60, label %247, label %245, !dbg !79

245:                                              ; preds = %244
  %246 = tail call float @llvm.nvvm.sqrt.rn.f(float %218) #3, !dbg !79
  br label %__nv_sqrtf.exit61, !dbg !79

247:                                              ; preds = %244
  %248 = tail call float @llvm.nvvm.sqrt.approx.f(float %218) #3, !dbg !79
  br label %__nv_sqrtf.exit61, !dbg !79

__nv_sqrtf.exit61:                                ; preds = %240, %242, %245, %247
  %.0.i59 = phi float [ %241, %240 ], [ %243, %242 ], [ %246, %245 ], [ %248, %247 ], !dbg !79
  %249 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !79
  %.not.i62 = icmp eq i32 %249, 0, !dbg !79
  %250 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !79
  %.not1.i65 = icmp eq i32 %250, 0, !dbg !79
  br i1 %.not.i62, label %256, label %251, !dbg !79

251:                                              ; preds = %__nv_sqrtf.exit61
  br i1 %.not1.i65, label %254, label %252, !dbg !79

252:                                              ; preds = %251
  %253 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %219) #3, !dbg !79
  br label %__nv_sqrtf.exit66, !dbg !79

254:                                              ; preds = %251
  %255 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %219) #3, !dbg !79
  br label %__nv_sqrtf.exit66, !dbg !79

256:                                              ; preds = %__nv_sqrtf.exit61
  br i1 %.not1.i65, label %259, label %257, !dbg !79

257:                                              ; preds = %256
  %258 = tail call float @llvm.nvvm.sqrt.rn.f(float %219) #3, !dbg !79
  br label %__nv_sqrtf.exit66, !dbg !79

259:                                              ; preds = %256
  %260 = tail call float @llvm.nvvm.sqrt.approx.f(float %219) #3, !dbg !79
  br label %__nv_sqrtf.exit66, !dbg !79

__nv_sqrtf.exit66:                                ; preds = %252, %254, %257, %259
  %.0.i64 = phi float [ %253, %252 ], [ %255, %254 ], [ %258, %257 ], [ %260, %259 ], !dbg !79
  %261 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !79
  %.not.i67 = icmp eq i32 %261, 0, !dbg !79
  %262 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !79
  %.not1.i70 = icmp eq i32 %262, 0, !dbg !79
  br i1 %.not.i67, label %268, label %263, !dbg !79

263:                                              ; preds = %__nv_sqrtf.exit66
  br i1 %.not1.i70, label %266, label %264, !dbg !79

264:                                              ; preds = %263
  %265 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %220) #3, !dbg !79
  br label %__nv_sqrtf.exit71, !dbg !79

266:                                              ; preds = %263
  %267 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %220) #3, !dbg !79
  br label %__nv_sqrtf.exit71, !dbg !79

268:                                              ; preds = %__nv_sqrtf.exit66
  br i1 %.not1.i70, label %271, label %269, !dbg !79

269:                                              ; preds = %268
  %270 = tail call float @llvm.nvvm.sqrt.rn.f(float %220) #3, !dbg !79
  br label %__nv_sqrtf.exit71, !dbg !79

271:                                              ; preds = %268
  %272 = tail call float @llvm.nvvm.sqrt.approx.f(float %220) #3, !dbg !79
  br label %__nv_sqrtf.exit71, !dbg !79

__nv_sqrtf.exit71:                                ; preds = %264, %266, %269, %271
  %.0.i69 = phi float [ %265, %264 ], [ %267, %266 ], [ %270, %269 ], [ %272, %271 ], !dbg !79
  %273 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !79
  %.not.i72 = icmp eq i32 %273, 0, !dbg !79
  %274 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !79
  %.not1.i75 = icmp eq i32 %274, 0, !dbg !79
  br i1 %.not.i72, label %280, label %275, !dbg !79

275:                                              ; preds = %__nv_sqrtf.exit71
  br i1 %.not1.i75, label %278, label %276, !dbg !79

276:                                              ; preds = %275
  %277 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %221) #3, !dbg !79
  br label %__nv_sqrtf.exit76, !dbg !79

278:                                              ; preds = %275
  %279 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %221) #3, !dbg !79
  br label %__nv_sqrtf.exit76, !dbg !79

280:                                              ; preds = %__nv_sqrtf.exit71
  br i1 %.not1.i75, label %283, label %281, !dbg !79

281:                                              ; preds = %280
  %282 = tail call float @llvm.nvvm.sqrt.rn.f(float %221) #3, !dbg !79
  br label %__nv_sqrtf.exit76, !dbg !79

283:                                              ; preds = %280
  %284 = tail call float @llvm.nvvm.sqrt.approx.f(float %221) #3, !dbg !79
  br label %__nv_sqrtf.exit76, !dbg !79

__nv_sqrtf.exit76:                                ; preds = %276, %278, %281, %283
  %.0.i74 = phi float [ %277, %276 ], [ %279, %278 ], [ %282, %281 ], [ %284, %283 ], !dbg !79
  %285 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !79
  %.not.i77 = icmp eq i32 %285, 0, !dbg !79
  %286 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !79
  %.not1.i80 = icmp eq i32 %286, 0, !dbg !79
  br i1 %.not.i77, label %292, label %287, !dbg !79

287:                                              ; preds = %__nv_sqrtf.exit76
  br i1 %.not1.i80, label %290, label %288, !dbg !79

288:                                              ; preds = %287
  %289 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %222) #3, !dbg !79
  br label %__nv_sqrtf.exit81, !dbg !79

290:                                              ; preds = %287
  %291 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %222) #3, !dbg !79
  br label %__nv_sqrtf.exit81, !dbg !79

292:                                              ; preds = %__nv_sqrtf.exit76
  br i1 %.not1.i80, label %295, label %293, !dbg !79

293:                                              ; preds = %292
  %294 = tail call float @llvm.nvvm.sqrt.rn.f(float %222) #3, !dbg !79
  br label %__nv_sqrtf.exit81, !dbg !79

295:                                              ; preds = %292
  %296 = tail call float @llvm.nvvm.sqrt.approx.f(float %222) #3, !dbg !79
  br label %__nv_sqrtf.exit81, !dbg !79

__nv_sqrtf.exit81:                                ; preds = %288, %290, %293, %295
  %.0.i79 = phi float [ %289, %288 ], [ %291, %290 ], [ %294, %293 ], [ %296, %295 ], !dbg !79
  %297 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !79
  %.not.i82 = icmp eq i32 %297, 0, !dbg !79
  %298 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !79
  %.not1.i85 = icmp eq i32 %298, 0, !dbg !79
  br i1 %.not.i82, label %304, label %299, !dbg !79

299:                                              ; preds = %__nv_sqrtf.exit81
  br i1 %.not1.i85, label %302, label %300, !dbg !79

300:                                              ; preds = %299
  %301 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %223) #3, !dbg !79
  br label %__nv_sqrtf.exit86, !dbg !79

302:                                              ; preds = %299
  %303 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %223) #3, !dbg !79
  br label %__nv_sqrtf.exit86, !dbg !79

304:                                              ; preds = %__nv_sqrtf.exit81
  br i1 %.not1.i85, label %307, label %305, !dbg !79

305:                                              ; preds = %304
  %306 = tail call float @llvm.nvvm.sqrt.rn.f(float %223) #3, !dbg !79
  br label %__nv_sqrtf.exit86, !dbg !79

307:                                              ; preds = %304
  %308 = tail call float @llvm.nvvm.sqrt.approx.f(float %223) #3, !dbg !79
  br label %__nv_sqrtf.exit86, !dbg !79

__nv_sqrtf.exit86:                                ; preds = %300, %302, %305, %307
  %.0.i84 = phi float [ %301, %300 ], [ %303, %302 ], [ %306, %305 ], [ %308, %307 ], !dbg !79
  %309 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !79
  %.not.i87 = icmp eq i32 %309, 0, !dbg !79
  %310 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !79
  %.not1.i90 = icmp eq i32 %310, 0, !dbg !79
  br i1 %.not.i87, label %316, label %311, !dbg !79

311:                                              ; preds = %__nv_sqrtf.exit86
  br i1 %.not1.i90, label %314, label %312, !dbg !79

312:                                              ; preds = %311
  %313 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %224) #3, !dbg !79
  br label %__nv_sqrtf.exit91, !dbg !79

314:                                              ; preds = %311
  %315 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %224) #3, !dbg !79
  br label %__nv_sqrtf.exit91, !dbg !79

316:                                              ; preds = %__nv_sqrtf.exit86
  br i1 %.not1.i90, label %319, label %317, !dbg !79

317:                                              ; preds = %316
  %318 = tail call float @llvm.nvvm.sqrt.rn.f(float %224) #3, !dbg !79
  br label %__nv_sqrtf.exit91, !dbg !79

319:                                              ; preds = %316
  %320 = tail call float @llvm.nvvm.sqrt.approx.f(float %224) #3, !dbg !79
  br label %__nv_sqrtf.exit91, !dbg !79

__nv_sqrtf.exit91:                                ; preds = %312, %314, %317, %319
  %.0.i89 = phi float [ %313, %312 ], [ %315, %314 ], [ %318, %317 ], [ %320, %319 ], !dbg !79
  %321 = shufflevector <2 x i1> %188, <2 x i1> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !67
  %322 = shufflevector <2 x i1> %156, <2 x i1> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !55
  %323 = shufflevector <2 x i1> %142, <2 x i1> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !50
  %324 = shufflevector <2 x i1> %128, <2 x i1> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !45
  %325 = shufflevector <2 x i1> %112, <2 x i1> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !40
  %326 = shufflevector <2 x i1> %104, <2 x i1> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !37
  %327 = extractvalue { i32, i32, i32, i32 } %110, 3, !dbg !39
  %328 = extractvalue { i32, i32, i32, i32 } %126, 3, !dbg !44
  %329 = extractvalue { i32, i32, i32, i32 } %140, 3, !dbg !49
  %330 = extractvalue { i32, i32, i32, i32 } %154, 3, !dbg !54
  %331 = extractvalue { i32, i32, i32, i32 } %170, 3, !dbg !60
  %332 = extractvalue { i32, i32, i32, i32 } %186, 3, !dbg !66
  %333 = extractvalue { i32, i32, i32, i32 } %202, 3, !dbg !72
  %334 = extractvalue { i32, i32, i32, i32 } %216, 3, !dbg !77
  %335 = insertelement <8 x i32> poison, i32 %65, i64 0, !dbg !30
  %336 = insertelement <8 x i32> %335, i32 %64, i64 1, !dbg !30
  %337 = insertelement <8 x i32> %336, i32 %63, i64 2, !dbg !30
  %338 = insertelement <8 x i32> %337, i32 %62, i64 3, !dbg !30
  %339 = insertelement <8 x i32> %338, i32 %61, i64 4, !dbg !30
  %340 = insertelement <8 x i32> %339, i32 %60, i64 5, !dbg !30
  %341 = insertelement <8 x i32> %340, i32 %59, i64 6, !dbg !30
  %342 = insertelement <8 x i32> %341, i32 %58, i64 7, !dbg !30
  %343 = bitcast <8 x i32> %342 to <8 x float>, !dbg !30
  %344 = extractvalue { i32, i32, i32, i32 } %110, 2, !dbg !39
  %345 = extractvalue { i32, i32, i32, i32 } %126, 2, !dbg !44
  %346 = extractvalue { i32, i32, i32, i32 } %140, 2, !dbg !49
  %347 = extractvalue { i32, i32, i32, i32 } %154, 2, !dbg !54
  %348 = extractvalue { i32, i32, i32, i32 } %170, 2, !dbg !60
  %349 = extractvalue { i32, i32, i32, i32 } %186, 2, !dbg !66
  %350 = extractvalue { i32, i32, i32, i32 } %202, 2, !dbg !72
  %351 = extractvalue { i32, i32, i32, i32 } %216, 2, !dbg !77
  %352 = extractvalue { i32, i32, i32, i32 } %110, 1, !dbg !39
  %353 = extractvalue { i32, i32, i32, i32 } %126, 1, !dbg !44
  %354 = extractvalue { i32, i32, i32, i32 } %140, 1, !dbg !49
  %355 = extractvalue { i32, i32, i32, i32 } %154, 1, !dbg !54
  %356 = extractvalue { i32, i32, i32, i32 } %170, 1, !dbg !60
  %357 = extractvalue { i32, i32, i32, i32 } %186, 1, !dbg !66
  %358 = extractvalue { i32, i32, i32, i32 } %202, 1, !dbg !72
  %359 = extractvalue { i32, i32, i32, i32 } %216, 1, !dbg !77
  %360 = extractvalue { i32, i32, i32, i32 } %110, 0, !dbg !39
  %361 = extractvalue { i32, i32, i32, i32 } %126, 0, !dbg !44
  %362 = extractvalue { i32, i32, i32, i32 } %140, 0, !dbg !49
  %363 = extractvalue { i32, i32, i32, i32 } %154, 0, !dbg !54
  %364 = extractvalue { i32, i32, i32, i32 } %170, 0, !dbg !60
  %365 = extractvalue { i32, i32, i32, i32 } %186, 0, !dbg !66
  %366 = extractvalue { i32, i32, i32, i32 } %202, 0, !dbg !72
  %367 = extractvalue { i32, i32, i32, i32 } %216, 0, !dbg !77
  %368 = extractvalue { i32, i32, i32, i32 } %109, 3, !dbg !39
  %369 = extractvalue { i32, i32, i32, i32 } %125, 3, !dbg !44
  %370 = extractvalue { i32, i32, i32, i32 } %139, 3, !dbg !49
  %371 = extractvalue { i32, i32, i32, i32 } %153, 3, !dbg !54
  %372 = extractvalue { i32, i32, i32, i32 } %169, 3, !dbg !60
  %373 = extractvalue { i32, i32, i32, i32 } %185, 3, !dbg !66
  %374 = extractvalue { i32, i32, i32, i32 } %201, 3, !dbg !72
  %375 = extractvalue { i32, i32, i32, i32 } %215, 3, !dbg !77
  %376 = extractvalue { i32, i32, i32, i32 } %109, 2, !dbg !39
  %377 = extractvalue { i32, i32, i32, i32 } %125, 2, !dbg !44
  %378 = extractvalue { i32, i32, i32, i32 } %139, 2, !dbg !49
  %379 = extractvalue { i32, i32, i32, i32 } %153, 2, !dbg !54
  %380 = extractvalue { i32, i32, i32, i32 } %169, 2, !dbg !60
  %381 = extractvalue { i32, i32, i32, i32 } %185, 2, !dbg !66
  %382 = extractvalue { i32, i32, i32, i32 } %201, 2, !dbg !72
  %383 = extractvalue { i32, i32, i32, i32 } %215, 2, !dbg !77
  %384 = extractvalue { i32, i32, i32, i32 } %109, 1, !dbg !39
  %385 = extractvalue { i32, i32, i32, i32 } %125, 1, !dbg !44
  %386 = extractvalue { i32, i32, i32, i32 } %139, 1, !dbg !49
  %387 = extractvalue { i32, i32, i32, i32 } %153, 1, !dbg !54
  %388 = extractvalue { i32, i32, i32, i32 } %169, 1, !dbg !60
  %389 = extractvalue { i32, i32, i32, i32 } %185, 1, !dbg !66
  %390 = extractvalue { i32, i32, i32, i32 } %201, 1, !dbg !72
  %391 = extractvalue { i32, i32, i32, i32 } %215, 1, !dbg !77
  %392 = extractvalue { i32, i32, i32, i32 } %109, 0, !dbg !39
  %393 = extractvalue { i32, i32, i32, i32 } %125, 0, !dbg !44
  %394 = extractvalue { i32, i32, i32, i32 } %139, 0, !dbg !49
  %395 = extractvalue { i32, i32, i32, i32 } %153, 0, !dbg !54
  %396 = extractvalue { i32, i32, i32, i32 } %169, 0, !dbg !60
  %397 = extractvalue { i32, i32, i32, i32 } %185, 0, !dbg !66
  %398 = extractvalue { i32, i32, i32, i32 } %201, 0, !dbg !72
  %399 = extractvalue { i32, i32, i32, i32 } %215, 0, !dbg !77
  %400 = insertelement <8 x i32> poison, i32 %333, i64 0, !dbg !80
  %401 = insertelement <8 x i32> %400, i32 %350, i64 1, !dbg !80
  %402 = insertelement <8 x i32> %401, i32 %358, i64 2, !dbg !80
  %403 = insertelement <8 x i32> %402, i32 %366, i64 3, !dbg !80
  %404 = insertelement <8 x i32> %403, i32 %374, i64 4, !dbg !80
  %405 = insertelement <8 x i32> %404, i32 %382, i64 5, !dbg !80
  %406 = insertelement <8 x i32> %405, i32 %390, i64 6, !dbg !80
  %407 = insertelement <8 x i32> %406, i32 %398, i64 7, !dbg !80
  %408 = insertelement <8 x i32> poison, i32 %334, i64 0, !dbg !80
  %409 = insertelement <8 x i32> %408, i32 %351, i64 1, !dbg !80
  %410 = insertelement <8 x i32> %409, i32 %359, i64 2, !dbg !80
  %411 = insertelement <8 x i32> %410, i32 %367, i64 3, !dbg !80
  %412 = insertelement <8 x i32> %411, i32 %375, i64 4, !dbg !80
  %413 = insertelement <8 x i32> %412, i32 %383, i64 5, !dbg !80
  %414 = insertelement <8 x i32> %413, i32 %391, i64 6, !dbg !80
  %415 = insertelement <8 x i32> %414, i32 %399, i64 7, !dbg !80
  %416 = select <8 x i1> %321, <8 x i32> %407, <8 x i32> %415, !dbg !80
  %417 = insertelement <8 x i32> poison, i32 %103, i64 0, !dbg !36
  %418 = insertelement <8 x i32> %417, i32 %102, i64 1, !dbg !36
  %419 = insertelement <8 x i32> %418, i32 %101, i64 2, !dbg !36
  %420 = insertelement <8 x i32> %419, i32 %100, i64 3, !dbg !36
  %421 = insertelement <8 x i32> %420, i32 %99, i64 4, !dbg !36
  %422 = insertelement <8 x i32> %421, i32 %98, i64 5, !dbg !36
  %423 = insertelement <8 x i32> %422, i32 %97, i64 6, !dbg !36
  %424 = insertelement <8 x i32> %423, i32 %96, i64 7, !dbg !36
  %425 = bitcast <8 x i32> %424 to <8 x float>, !dbg !36
  %426 = insertelement <8 x i32> poison, i32 %93, i64 0, !dbg !34
  %427 = insertelement <8 x i32> %426, i32 %92, i64 1, !dbg !34
  %428 = insertelement <8 x i32> %427, i32 %91, i64 2, !dbg !34
  %429 = insertelement <8 x i32> %428, i32 %90, i64 3, !dbg !34
  %430 = insertelement <8 x i32> %429, i32 %89, i64 4, !dbg !34
  %431 = insertelement <8 x i32> %430, i32 %88, i64 5, !dbg !34
  %432 = insertelement <8 x i32> %431, i32 %87, i64 6, !dbg !34
  %433 = insertelement <8 x i32> %432, i32 %86, i64 7, !dbg !34
  %434 = bitcast <8 x i32> %433 to <8 x float>, !dbg !34
  %435 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !81
  %436 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i59) #3, !dbg !81
  %437 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i64) #3, !dbg !81
  %438 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i69) #3, !dbg !81
  %439 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i74) #3, !dbg !81
  %440 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i79) #3, !dbg !81
  %441 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i84) #3, !dbg !81
  %442 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i89) #3, !dbg !81
  %443 = insertelement <8 x i1> poison, i1 %174, i64 0, !dbg !82
  %444 = insertelement <8 x i1> %443, i1 %172, i64 1, !dbg !82
  %445 = shufflevector <8 x i1> %444, <8 x i1> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !82
  %446 = insertelement <8 x i32> poison, i32 %332, i64 0, !dbg !82
  %447 = insertelement <8 x i32> %446, i32 %349, i64 1, !dbg !82
  %448 = insertelement <8 x i32> %447, i32 %357, i64 2, !dbg !82
  %449 = insertelement <8 x i32> %448, i32 %365, i64 3, !dbg !82
  %450 = insertelement <8 x i32> %449, i32 %373, i64 4, !dbg !82
  %451 = insertelement <8 x i32> %450, i32 %381, i64 5, !dbg !82
  %452 = insertelement <8 x i32> %451, i32 %389, i64 6, !dbg !82
  %453 = insertelement <8 x i32> %452, i32 %397, i64 7, !dbg !82
  %454 = select <8 x i1> %445, <8 x i32> %453, <8 x i32> %416, !dbg !82
  %455 = insertelement <8 x i32> poison, i32 %331, i64 0, !dbg !83
  %456 = insertelement <8 x i32> %455, i32 %348, i64 1, !dbg !83
  %457 = insertelement <8 x i32> %456, i32 %356, i64 2, !dbg !83
  %458 = insertelement <8 x i32> %457, i32 %364, i64 3, !dbg !83
  %459 = insertelement <8 x i32> %458, i32 %372, i64 4, !dbg !83
  %460 = insertelement <8 x i32> %459, i32 %380, i64 5, !dbg !83
  %461 = insertelement <8 x i32> %460, i32 %388, i64 6, !dbg !83
  %462 = insertelement <8 x i32> %461, i32 %396, i64 7, !dbg !83
  %463 = select <8 x i1> %322, <8 x i32> %462, <8 x i32> %454, !dbg !83
  %464 = insertelement <8 x i32> poison, i32 %330, i64 0, !dbg !84
  %465 = insertelement <8 x i32> %464, i32 %347, i64 1, !dbg !84
  %466 = insertelement <8 x i32> %465, i32 %355, i64 2, !dbg !84
  %467 = insertelement <8 x i32> %466, i32 %363, i64 3, !dbg !84
  %468 = insertelement <8 x i32> %467, i32 %371, i64 4, !dbg !84
  %469 = insertelement <8 x i32> %468, i32 %379, i64 5, !dbg !84
  %470 = insertelement <8 x i32> %469, i32 %387, i64 6, !dbg !84
  %471 = insertelement <8 x i32> %470, i32 %395, i64 7, !dbg !84
  %472 = select <8 x i1> %323, <8 x i32> %471, <8 x i32> %463, !dbg !84
  %473 = insertelement <8 x i32> poison, i32 %329, i64 0, !dbg !85
  %474 = insertelement <8 x i32> %473, i32 %346, i64 1, !dbg !85
  %475 = insertelement <8 x i32> %474, i32 %354, i64 2, !dbg !85
  %476 = insertelement <8 x i32> %475, i32 %362, i64 3, !dbg !85
  %477 = insertelement <8 x i32> %476, i32 %370, i64 4, !dbg !85
  %478 = insertelement <8 x i32> %477, i32 %378, i64 5, !dbg !85
  %479 = insertelement <8 x i32> %478, i32 %386, i64 6, !dbg !85
  %480 = insertelement <8 x i32> %479, i32 %394, i64 7, !dbg !85
  %481 = select <8 x i1> %324, <8 x i32> %480, <8 x i32> %472, !dbg !85
  %482 = insertelement <8 x i32> poison, i32 %328, i64 0, !dbg !86
  %483 = insertelement <8 x i32> %482, i32 %345, i64 1, !dbg !86
  %484 = insertelement <8 x i32> %483, i32 %353, i64 2, !dbg !86
  %485 = insertelement <8 x i32> %484, i32 %361, i64 3, !dbg !86
  %486 = insertelement <8 x i32> %485, i32 %369, i64 4, !dbg !86
  %487 = insertelement <8 x i32> %486, i32 %377, i64 5, !dbg !86
  %488 = insertelement <8 x i32> %487, i32 %385, i64 6, !dbg !86
  %489 = insertelement <8 x i32> %488, i32 %393, i64 7, !dbg !86
  %490 = select <8 x i1> %325, <8 x i32> %489, <8 x i32> %481, !dbg !86
  %491 = insertelement <8 x i32> poison, i32 %327, i64 0, !dbg !87
  %492 = insertelement <8 x i32> %491, i32 %344, i64 1, !dbg !87
  %493 = insertelement <8 x i32> %492, i32 %352, i64 2, !dbg !87
  %494 = insertelement <8 x i32> %493, i32 %360, i64 3, !dbg !87
  %495 = insertelement <8 x i32> %494, i32 %368, i64 4, !dbg !87
  %496 = insertelement <8 x i32> %495, i32 %376, i64 5, !dbg !87
  %497 = insertelement <8 x i32> %496, i32 %384, i64 6, !dbg !87
  %498 = insertelement <8 x i32> %497, i32 %392, i64 7, !dbg !87
  %499 = select <8 x i1> %326, <8 x i32> %498, <8 x i32> %490, !dbg !87
  %500 = bitcast <8 x i32> %499 to <8 x float>, !dbg !87
  %501 = fsub <8 x float> %500, %343, !dbg !88
  %502 = insertelement <8 x float> poison, float %442, i64 0, !dbg !89
  %503 = insertelement <8 x float> %502, float %441, i64 1, !dbg !89
  %504 = insertelement <8 x float> %503, float %440, i64 2, !dbg !89
  %505 = insertelement <8 x float> %504, float %439, i64 3, !dbg !89
  %506 = insertelement <8 x float> %505, float %438, i64 4, !dbg !89
  %507 = insertelement <8 x float> %506, float %437, i64 5, !dbg !89
  %508 = insertelement <8 x float> %507, float %436, i64 6, !dbg !89
  %509 = insertelement <8 x float> %508, float %435, i64 7, !dbg !89
  %510 = fmul <8 x float> %501, %509, !dbg !89
  %511 = fmul <8 x float> %510, %434, !dbg !90
  %512 = fadd <8 x float> %511, %425, !dbg !91
  %513 = fcmp olt <8 x float> %512, zeroinitializer, !dbg !92
  %514 = extractelement <8 x i1> %513, i64 7, !dbg !96
  %515 = extractelement <8 x i1> %513, i64 6, !dbg !96
  %516 = extractelement <8 x i1> %513, i64 5, !dbg !96
  %517 = extractelement <8 x i1> %513, i64 4, !dbg !96
  %518 = extractelement <8 x i1> %513, i64 3, !dbg !96
  %519 = extractelement <8 x i1> %513, i64 2, !dbg !96
  %520 = extractelement <8 x i1> %513, i64 1, !dbg !96
  %521 = extractelement <8 x i1> %513, i64 0, !dbg !96
  %522 = sext i32 %21 to i64, !dbg !97
  %523 = getelementptr float, ptr addrspace(1) %12, i64 %522, !dbg !97
  %524 = sext i32 %22 to i64, !dbg !97
  %525 = getelementptr float, ptr addrspace(1) %12, i64 %524, !dbg !97
  %526 = extractelement <8 x i32> %499, i64 4, !dbg !98
  %527 = extractelement <8 x i32> %499, i64 5, !dbg !98
  %528 = extractelement <8 x i32> %499, i64 6, !dbg !98
  %529 = extractelement <8 x i32> %499, i64 7, !dbg !98
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %529, i32 %528, i32 %527, i32 %526, ptr addrspace(1) %523, i1 %23) #3, !dbg !98
  %530 = extractelement <8 x i32> %499, i64 0, !dbg !98
  %531 = extractelement <8 x i32> %499, i64 1, !dbg !98
  %532 = extractelement <8 x i32> %499, i64 2, !dbg !98
  %533 = extractelement <8 x i32> %499, i64 3, !dbg !98
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %533, i32 %532, i32 %531, i32 %530, ptr addrspace(1) %525, i1 %24) #3, !dbg !98
  %534 = getelementptr float, ptr addrspace(1) %13, i64 %522, !dbg !99
  %535 = getelementptr float, ptr addrspace(1) %13, i64 %524, !dbg !99
  %bc = bitcast <8 x float> %512 to <8 x i32>, !dbg !100
  %536 = extractelement <8 x i32> %bc, i64 7, !dbg !100
  %537 = select i1 %514, i32 0, i32 %536, !dbg !96
  %bc92 = bitcast <8 x float> %512 to <8 x i32>, !dbg !100
  %538 = extractelement <8 x i32> %bc92, i64 6, !dbg !100
  %539 = select i1 %515, i32 0, i32 %538, !dbg !96
  %bc93 = bitcast <8 x float> %512 to <8 x i32>, !dbg !100
  %540 = extractelement <8 x i32> %bc93, i64 5, !dbg !100
  %541 = select i1 %516, i32 0, i32 %540, !dbg !96
  %bc94 = bitcast <8 x float> %512 to <8 x i32>, !dbg !100
  %542 = extractelement <8 x i32> %bc94, i64 4, !dbg !100
  %543 = select i1 %517, i32 0, i32 %542, !dbg !96
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %537, i32 %539, i32 %541, i32 %543, ptr addrspace(1) %534, i1 %23) #3, !dbg !100
  %bc95 = bitcast <8 x float> %512 to <8 x i32>, !dbg !100
  %544 = extractelement <8 x i32> %bc95, i64 3, !dbg !100
  %545 = select i1 %518, i32 0, i32 %544, !dbg !96
  %bc96 = bitcast <8 x float> %512 to <8 x i32>, !dbg !100
  %546 = extractelement <8 x i32> %bc96, i64 2, !dbg !100
  %547 = select i1 %519, i32 0, i32 %546, !dbg !96
  %bc97 = bitcast <8 x float> %512 to <8 x i32>, !dbg !100
  %548 = extractelement <8 x i32> %bc97, i64 1, !dbg !100
  %549 = select i1 %520, i32 0, i32 %548, !dbg !96
  %bc98 = bitcast <8 x float> %512 to <8 x i32>, !dbg !100
  %550 = extractelement <8 x i32> %bc98, i64 0, !dbg !100
  %551 = select i1 %521, i32 0, i32 %550, !dbg !96
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %545, i32 %547, i32 %549, i32 %551, ptr addrspace(1) %535, i1 %24) #3, !dbg !100
  ret void, !dbg !101
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cqhtc6fugipwr26wsuf5aos6dpxu5qooi6p5y2btdzqycmu6qhmt.py", directory: "inductor_cache/qh")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_64, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_64, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_64", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_64", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 37, column: 35, scope: !7)
!18 = !DILocation(line: 37, column: 52, scope: !7)
!19 = !DILocation(line: 37, column: 46, scope: !7)
!20 = !DILocation(line: 37, column: 30, scope: !7)
!21 = !DILocation(line: 42, column: 61, scope: !7)
!22 = !DILocation(line: 42, column: 41, scope: !7)
!23 = !DILocation(line: 42, column: 36, scope: !7)
!24 = !DILocation(line: 47, column: 36, scope: !7)
!25 = !DILocation(line: 52, column: 36, scope: !7)
!26 = !DILocation(line: 24, column: 21, scope: !7)
!27 = !DILocation(line: 24, column: 28, scope: !7)
!28 = !DILocation(line: 68, column: 20, scope: !7)
!29 = !DILocation(line: 28, column: 31, scope: !7)
!30 = !DILocation(line: 28, column: 36, scope: !7)
!31 = !DILocation(line: 29, column: 31, scope: !7)
!32 = !DILocation(line: 29, column: 36, scope: !7)
!33 = !DILocation(line: 30, column: 32, scope: !7)
!34 = !DILocation(line: 30, column: 37, scope: !7)
!35 = !DILocation(line: 31, column: 32, scope: !7)
!36 = !DILocation(line: 31, column: 37, scope: !7)
!37 = !DILocation(line: 36, column: 18, scope: !7)
!38 = !DILocation(line: 37, column: 64, scope: !7)
!39 = !DILocation(line: 37, column: 57, scope: !7)
!40 = !DILocation(line: 41, column: 18, scope: !7)
!41 = !DILocation(line: 42, column: 56, scope: !7)
!42 = !DILocation(line: 42, column: 31, scope: !7)
!43 = !DILocation(line: 42, column: 73, scope: !7)
!44 = !DILocation(line: 42, column: 66, scope: !7)
!45 = !DILocation(line: 46, column: 20, scope: !7)
!46 = !DILocation(line: 47, column: 56, scope: !7)
!47 = !DILocation(line: 47, column: 31, scope: !7)
!48 = !DILocation(line: 47, column: 74, scope: !7)
!49 = !DILocation(line: 47, column: 66, scope: !7)
!50 = !DILocation(line: 51, column: 20, scope: !7)
!51 = !DILocation(line: 52, column: 56, scope: !7)
!52 = !DILocation(line: 52, column: 31, scope: !7)
!53 = !DILocation(line: 52, column: 74, scope: !7)
!54 = !DILocation(line: 52, column: 66, scope: !7)
!55 = !DILocation(line: 56, column: 20, scope: !7)
!56 = !DILocation(line: 57, column: 36, scope: !7)
!57 = !DILocation(line: 57, column: 56, scope: !7)
!58 = !DILocation(line: 57, column: 31, scope: !7)
!59 = !DILocation(line: 57, column: 74, scope: !7)
!60 = !DILocation(line: 57, column: 66, scope: !7)
!61 = !DILocation(line: 61, column: 20, scope: !7)
!62 = !DILocation(line: 62, column: 36, scope: !7)
!63 = !DILocation(line: 62, column: 56, scope: !7)
!64 = !DILocation(line: 62, column: 31, scope: !7)
!65 = !DILocation(line: 62, column: 74, scope: !7)
!66 = !DILocation(line: 62, column: 66, scope: !7)
!67 = !DILocation(line: 66, column: 20, scope: !7)
!68 = !DILocation(line: 67, column: 36, scope: !7)
!69 = !DILocation(line: 67, column: 56, scope: !7)
!70 = !DILocation(line: 67, column: 31, scope: !7)
!71 = !DILocation(line: 67, column: 74, scope: !7)
!72 = !DILocation(line: 67, column: 66, scope: !7)
!73 = !DILocation(line: 71, column: 36, scope: !7)
!74 = !DILocation(line: 71, column: 56, scope: !7)
!75 = !DILocation(line: 71, column: 31, scope: !7)
!76 = !DILocation(line: 71, column: 74, scope: !7)
!77 = !DILocation(line: 71, column: 66, scope: !7)
!78 = !DILocation(line: 81, column: 20, scope: !7)
!79 = !DILocation(line: 82, column: 27, scope: !7)
!80 = !DILocation(line: 72, column: 35, scope: !7)
!81 = !DILocation(line: 84, column: 20, scope: !7)
!82 = !DILocation(line: 73, column: 35, scope: !7)
!83 = !DILocation(line: 74, column: 35, scope: !7)
!84 = !DILocation(line: 75, column: 35, scope: !7)
!85 = !DILocation(line: 76, column: 35, scope: !7)
!86 = !DILocation(line: 77, column: 34, scope: !7)
!87 = !DILocation(line: 78, column: 33, scope: !7)
!88 = !DILocation(line: 79, column: 20, scope: !7)
!89 = !DILocation(line: 87, column: 20, scope: !7)
!90 = !DILocation(line: 88, column: 20, scope: !7)
!91 = !DILocation(line: 89, column: 20, scope: !7)
!92 = !DILocation(line: 118, column: 15, scope: !93, inlinedAt: !95)
!93 = distinct !DILexicalBlockFile(scope: !7, file: !94, discriminator: 0)
!94 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!95 = !DILocation(line: 91, column: 42, scope: !7)
!96 = !DILocation(line: 121, column: 29, scope: !93, inlinedAt: !95)
!97 = !DILocation(line: 92, column: 25, scope: !7)
!98 = !DILocation(line: 92, column: 37, scope: !7)
!99 = !DILocation(line: 93, column: 25, scope: !7)
!100 = !DILocation(line: 93, column: 37, scope: !7)
!101 = !DILocation(line: 93, column: 4, scope: !7)
