; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused__weight_norm_interface_11(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %8 = shl i32 %7, 3, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = lshr i32 %9, 3, !dbg !12
  %11 = and i32 %10, 7, !dbg !12
  %12 = and i32 %9, 7, !dbg !12
  %13 = or disjoint i32 %8, %11, !dbg !13
  %14 = icmp slt i32 %13, 16, !dbg !14
  %15 = shl i32 %9, 1, !dbg !15
  %16 = and i32 %15, 14, !dbg !15
  %17 = shl i32 %13, 4, !dbg !16
  %18 = or disjoint i32 %17, %16, !dbg !17
  %19 = sext i32 %18 to i64, !dbg !18
  %20 = getelementptr float, ptr addrspace(1) %1, i64 %19, !dbg !18
  %21 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %20, i1 %14, i32 0, i1 %14, i32 0, i1 %14) #5, !dbg !19
  %22 = extractvalue { i32, i32 } %21, 0, !dbg !19
  %23 = extractvalue { i32, i32 } %21, 1, !dbg !19
  %24 = bitcast i32 %22 to float, !dbg !19
  %25 = bitcast i32 %23 to float, !dbg !19
  %26 = sext i32 %13 to i64, !dbg !20
  %27 = getelementptr float, ptr addrspace(1) %2, i64 %26, !dbg !20
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 %14) #5, !dbg !21
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 %14) #5, !dbg !21
  %30 = fmul float %24, %24, !dbg !22
  %31 = fmul float %25, %25, !dbg !22
  %32 = fadd float %30, %31, !dbg !23
  %33 = select i1 %14, float %32, float 0.000000e+00, !dbg !23
  %34 = bitcast float %33 to i32, !dbg !28
  %35 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %34, i32 4, i32 31), !dbg !28
  %36 = bitcast i32 %35 to float, !dbg !28
  %37 = fadd float %33, %36, !dbg !23
  %38 = bitcast float %37 to i32, !dbg !28
  %39 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %38, i32 2, i32 31), !dbg !28
  %40 = bitcast i32 %39 to float, !dbg !28
  %41 = fadd float %37, %40, !dbg !23
  %42 = bitcast float %41 to i32, !dbg !28
  %43 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %42, i32 1, i32 31), !dbg !28
  %44 = bitcast i32 %43 to float, !dbg !28
  %45 = fadd float %41, %44, !dbg !23
  %46 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !29
  %47 = bitcast float %45 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %46, <1 x i32> %47, i1 true) #5, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %48 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !29
  %49 = load float, ptr addrspace(3) %48, align 4, !dbg !29
  %50 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !29
  %.not.i = icmp eq i32 %50, 0, !dbg !29
  %51 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !29
  %.not1.i = icmp eq i32 %51, 0, !dbg !29
  br i1 %.not.i, label %57, label %52, !dbg !29

52:                                               ; preds = %6
  br i1 %.not1.i, label %55, label %53, !dbg !29

53:                                               ; preds = %52
  %54 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %49) #5, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

55:                                               ; preds = %52
  %56 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %49) #5, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

57:                                               ; preds = %6
  br i1 %.not1.i, label %60, label %58, !dbg !29

58:                                               ; preds = %57
  %59 = tail call float @llvm.nvvm.sqrt.rn.f(float %49) #5, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

60:                                               ; preds = %57
  %61 = tail call float @llvm.nvvm.sqrt.approx.f(float %49) #5, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

__nv_sqrtf.exit:                                  ; preds = %53, %55, %58, %60
  %.0.i = phi float [ %54, %53 ], [ %56, %55 ], [ %59, %58 ], [ %61, %60 ], !dbg !29
  %62 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !29
  %63 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !29
  %64 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !29
  %.not.i6 = icmp eq i32 %64, 0, !dbg !29
  %65 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !29
  %.not1.i9 = icmp eq i32 %65, 0, !dbg !29
  br i1 %.not.i6, label %71, label %66, !dbg !29

66:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i9, label %69, label %67, !dbg !29

67:                                               ; preds = %66
  %68 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %45) #5, !dbg !29
  br label %__nv_sqrtf.exit10, !dbg !29

69:                                               ; preds = %66
  %70 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %45) #5, !dbg !29
  br label %__nv_sqrtf.exit10, !dbg !29

71:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i9, label %74, label %72, !dbg !29

72:                                               ; preds = %71
  %73 = tail call float @llvm.nvvm.sqrt.rn.f(float %45) #5, !dbg !29
  br label %__nv_sqrtf.exit10, !dbg !29

74:                                               ; preds = %71
  %75 = tail call float @llvm.nvvm.sqrt.approx.f(float %45) #5, !dbg !29
  br label %__nv_sqrtf.exit10, !dbg !29

__nv_sqrtf.exit10:                                ; preds = %67, %69, %72, %74
  %.0.i8 = phi float [ %68, %67 ], [ %70, %69 ], [ %73, %72 ], [ %75, %74 ], !dbg !29
  %76 = bitcast i32 %29 to float, !dbg !21
  %77 = or disjoint i32 %8, %12, !dbg !13
  %78 = icmp slt i32 %77, 16, !dbg !14
  %79 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %76, float %.0.i8) #5, !dbg !30
  %80 = fmul float %79, %24, !dbg !31
  %81 = fmul float %79, %25, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %82 = sext i32 %77 to i64, !dbg !33
  %83 = getelementptr float, ptr addrspace(1) %0, i64 %82, !dbg !33
  %84 = and i32 %9, 56, !dbg !34
  %85 = icmp eq i32 %84, 0, !dbg !34
  %86 = bitcast float %.0.i to i32, !dbg !34
  %87 = and i1 %85, %78, !dbg !34
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %86, ptr addrspace(1) %83, i1 %87) #5, !dbg !34
  %88 = getelementptr float, ptr addrspace(1) %3, i64 %19, !dbg !35
  %89 = bitcast float %80 to i32, !dbg !36
  %90 = bitcast float %81 to i32, !dbg !36
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %89, i32 %90, ptr addrspace(1) %88, i1 %14) #5, !dbg !36
  ret void, !dbg !37
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c3l5ug6emeoxijonkfx33q5drsluoktdmkdprikrehcmy7ca4hom.py", directory: "inductor_cache/3l")
!4 = !{ptr @triton_per_fused__weight_norm_interface_11, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__weight_norm_interface_11, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__weight_norm_interface_11", linkageName: "triton_per_fused__weight_norm_interface_11", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 38, scope: !7)
!17 = !DILocation(line: 31, column: 35, scope: !7)
!18 = !DILocation(line: 31, column: 30, scope: !7)
!19 = !DILocation(line: 31, column: 43, scope: !7)
!20 = !DILocation(line: 32, column: 30, scope: !7)
!21 = !DILocation(line: 32, column: 35, scope: !7)
!22 = !DILocation(line: 33, column: 18, scope: !7)
!23 = !DILocation(line: 256, column: 15, scope: !24, inlinedAt: !27)
!24 = distinct !DILexicalBlockFile(scope: !26, file: !25, discriminator: 0)
!25 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!26 = distinct !DILexicalBlockFile(scope: !7, file: !25, discriminator: 0)
!27 = !DILocation(line: 36, column: 24, scope: !7)
!28 = !DILocation(line: 267, column: 36, scope: !26, inlinedAt: !27)
!29 = !DILocation(line: 37, column: 26, scope: !7)
!30 = !DILocation(line: 38, column: 18, scope: !7)
!31 = !DILocation(line: 39, column: 18, scope: !7)
!32 = !DILocation(line: 40, column: 4, scope: !7)
!33 = !DILocation(line: 41, column: 28, scope: !7)
!34 = !DILocation(line: 41, column: 39, scope: !7)
!35 = !DILocation(line: 42, column: 25, scope: !7)
!36 = !DILocation(line: 42, column: 44, scope: !7)
!37 = !DILocation(line: 42, column: 4, scope: !7)
