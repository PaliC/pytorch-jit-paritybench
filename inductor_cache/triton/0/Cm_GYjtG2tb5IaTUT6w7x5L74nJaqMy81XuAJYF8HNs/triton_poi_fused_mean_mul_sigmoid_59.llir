; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_mean_mul_sigmoid_59(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 8, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 1, !dbg !12
  %8 = and i32 %7, 254, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = icmp slt i32 %9, 7168, !dbg !14
  %.frozen = freeze i32 %9, !dbg !15
  %11 = sdiv i32 %.frozen, 1792, !dbg !15
  %12 = mul i32 %11, 1792, !dbg !16
  %.decomposed = sub i32 %.frozen, %12, !dbg !16
  %13 = mul i32 %11, 7168, !dbg !17
  %14 = add i32 %13, %.decomposed, !dbg !18
  %15 = sext i32 %14 to i64, !dbg !19
  %16 = getelementptr float, ptr addrspace(1) %0, i64 %15, !dbg !19
  %17 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %16, i1 %10) #1, !dbg !20
  %18 = extractvalue { i32, i32 } %17, 0, !dbg !20
  %19 = extractvalue { i32, i32 } %17, 1, !dbg !20
  %20 = bitcast i32 %18 to float, !dbg !20
  %21 = bitcast i32 %19 to float, !dbg !20
  %22 = add i32 %14, 1792, !dbg !21
  %23 = sext i32 %22 to i64, !dbg !22
  %24 = getelementptr float, ptr addrspace(1) %0, i64 %23, !dbg !22
  %25 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %24, i1 %10) #1, !dbg !23
  %26 = extractvalue { i32, i32 } %25, 0, !dbg !23
  %27 = extractvalue { i32, i32 } %25, 1, !dbg !23
  %28 = bitcast i32 %26 to float, !dbg !23
  %29 = bitcast i32 %27 to float, !dbg !23
  %30 = add i32 %14, 3584, !dbg !24
  %31 = sext i32 %30 to i64, !dbg !25
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !25
  %33 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %32, i1 %10) #1, !dbg !26
  %34 = extractvalue { i32, i32 } %33, 0, !dbg !26
  %35 = extractvalue { i32, i32 } %33, 1, !dbg !26
  %36 = bitcast i32 %34 to float, !dbg !26
  %37 = bitcast i32 %35 to float, !dbg !26
  %38 = add i32 %14, 5376, !dbg !27
  %39 = sext i32 %38 to i64, !dbg !28
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !28
  %41 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %40, i1 %10) #1, !dbg !29
  %42 = extractvalue { i32, i32 } %41, 0, !dbg !29
  %43 = extractvalue { i32, i32 } %41, 1, !dbg !29
  %44 = bitcast i32 %42 to float, !dbg !29
  %45 = bitcast i32 %43 to float, !dbg !29
  %46 = fsub float 0.000000e+00, %20, !dbg !30
  %47 = fsub float 0.000000e+00, %21, !dbg !30
  %48 = fmul float %46, 0x3FF7154760000000, !dbg !34
  %49 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %48) #1, !dbg !34
  %50 = fmul float %47, 0x3FF7154760000000, !dbg !34
  %51 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %50) #1, !dbg !34
  %52 = fadd float %49, 1.000000e+00, !dbg !35
  %53 = fadd float %51, 1.000000e+00, !dbg !35
  %54 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %52) #1, !dbg !36
  %55 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %53) #1, !dbg !36
  %56 = fmul float %54, %20, !dbg !37
  %57 = fmul float %55, %21, !dbg !37
  %58 = fsub float 0.000000e+00, %28, !dbg !38
  %59 = fsub float 0.000000e+00, %29, !dbg !38
  %60 = fmul float %58, 0x3FF7154760000000, !dbg !40
  %61 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %60) #1, !dbg !40
  %62 = fmul float %59, 0x3FF7154760000000, !dbg !40
  %63 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %62) #1, !dbg !40
  %64 = fadd float %61, 1.000000e+00, !dbg !41
  %65 = fadd float %63, 1.000000e+00, !dbg !41
  %66 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %64) #1, !dbg !42
  %67 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %65) #1, !dbg !42
  %68 = fmul float %66, %28, !dbg !43
  %69 = fmul float %67, %29, !dbg !43
  %70 = fadd float %56, %68, !dbg !44
  %71 = fadd float %57, %69, !dbg !44
  %72 = fsub float 0.000000e+00, %36, !dbg !45
  %73 = fsub float 0.000000e+00, %37, !dbg !45
  %74 = fmul float %72, 0x3FF7154760000000, !dbg !47
  %75 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %74) #1, !dbg !47
  %76 = fmul float %73, 0x3FF7154760000000, !dbg !47
  %77 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %76) #1, !dbg !47
  %78 = fadd float %75, 1.000000e+00, !dbg !48
  %79 = fadd float %77, 1.000000e+00, !dbg !48
  %80 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %78) #1, !dbg !49
  %81 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %79) #1, !dbg !49
  %82 = fmul float %80, %36, !dbg !50
  %83 = fmul float %81, %37, !dbg !50
  %84 = fadd float %70, %82, !dbg !51
  %85 = fadd float %71, %83, !dbg !51
  %86 = fsub float 0.000000e+00, %44, !dbg !52
  %87 = fsub float 0.000000e+00, %45, !dbg !52
  %88 = fmul float %86, 0x3FF7154760000000, !dbg !54
  %89 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %88) #1, !dbg !54
  %90 = fmul float %87, 0x3FF7154760000000, !dbg !54
  %91 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %90) #1, !dbg !54
  %92 = fadd float %89, 1.000000e+00, !dbg !55
  %93 = fadd float %91, 1.000000e+00, !dbg !55
  %94 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %92) #1, !dbg !56
  %95 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %93) #1, !dbg !56
  %96 = fmul float %94, %44, !dbg !57
  %97 = fmul float %95, %45, !dbg !57
  %98 = fadd float %84, %96, !dbg !58
  %99 = fadd float %85, %97, !dbg !58
  %100 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %98, float 4.000000e+00) #1, !dbg !59
  %101 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %99, float 4.000000e+00) #1, !dbg !59
  %102 = sext i32 %9 to i64, !dbg !60
  %103 = getelementptr float, ptr addrspace(1) %1, i64 %102, !dbg !60
  %104 = bitcast float %100 to i32, !dbg !61
  %105 = bitcast float %101 to i32, !dbg !61
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %104, i32 %105, ptr addrspace(1) %103, i1 %10) #1, !dbg !61
  ret void, !dbg !62
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cpnxwddrrfb7nqlhkmjocqw3mh2ysxqayfi6qsmjbz5tyau6oomv.py", directory: "inductor_cache/pn")
!4 = !{ptr @triton_poi_fused_mean_mul_sigmoid_59, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_mean_mul_sigmoid_59, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_mean_mul_sigmoid_59", linkageName: "triton_poi_fused_mean_mul_sigmoid_59", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 24, column: 19, scope: !7)
!17 = !DILocation(line: 27, column: 40, scope: !7)
!18 = !DILocation(line: 27, column: 35, scope: !7)
!19 = !DILocation(line: 27, column: 30, scope: !7)
!20 = !DILocation(line: 27, column: 45, scope: !7)
!21 = !DILocation(line: 28, column: 42, scope: !7)
!22 = !DILocation(line: 28, column: 30, scope: !7)
!23 = !DILocation(line: 28, column: 52, scope: !7)
!24 = !DILocation(line: 29, column: 42, scope: !7)
!25 = !DILocation(line: 29, column: 30, scope: !7)
!26 = !DILocation(line: 29, column: 52, scope: !7)
!27 = !DILocation(line: 30, column: 43, scope: !7)
!28 = !DILocation(line: 30, column: 31, scope: !7)
!29 = !DILocation(line: 30, column: 53, scope: !7)
!30 = !DILocation(line: 47, column: 30, scope: !31, inlinedAt: !33)
!31 = distinct !DILexicalBlockFile(scope: !7, file: !32, discriminator: 0)
!32 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!33 = !DILocation(line: 31, column: 22, scope: !7)
!34 = !DILocation(line: 47, column: 29, scope: !31, inlinedAt: !33)
!35 = !DILocation(line: 47, column: 20, scope: !31, inlinedAt: !33)
!36 = !DILocation(line: 47, column: 16, scope: !31, inlinedAt: !33)
!37 = !DILocation(line: 32, column: 18, scope: !7)
!38 = !DILocation(line: 47, column: 30, scope: !31, inlinedAt: !39)
!39 = !DILocation(line: 33, column: 22, scope: !7)
!40 = !DILocation(line: 47, column: 29, scope: !31, inlinedAt: !39)
!41 = !DILocation(line: 47, column: 20, scope: !31, inlinedAt: !39)
!42 = !DILocation(line: 47, column: 16, scope: !31, inlinedAt: !39)
!43 = !DILocation(line: 34, column: 18, scope: !7)
!44 = !DILocation(line: 35, column: 18, scope: !7)
!45 = !DILocation(line: 47, column: 30, scope: !31, inlinedAt: !46)
!46 = !DILocation(line: 36, column: 22, scope: !7)
!47 = !DILocation(line: 47, column: 29, scope: !31, inlinedAt: !46)
!48 = !DILocation(line: 47, column: 20, scope: !31, inlinedAt: !46)
!49 = !DILocation(line: 47, column: 16, scope: !31, inlinedAt: !46)
!50 = !DILocation(line: 37, column: 18, scope: !7)
!51 = !DILocation(line: 38, column: 19, scope: !7)
!52 = !DILocation(line: 47, column: 30, scope: !31, inlinedAt: !53)
!53 = !DILocation(line: 39, column: 23, scope: !7)
!54 = !DILocation(line: 47, column: 29, scope: !31, inlinedAt: !53)
!55 = !DILocation(line: 47, column: 20, scope: !31, inlinedAt: !53)
!56 = !DILocation(line: 47, column: 16, scope: !31, inlinedAt: !53)
!57 = !DILocation(line: 40, column: 20, scope: !7)
!58 = !DILocation(line: 41, column: 20, scope: !7)
!59 = !DILocation(line: 43, column: 20, scope: !7)
!60 = !DILocation(line: 44, column: 25, scope: !7)
!61 = !DILocation(line: 44, column: 37, scope: !7)
!62 = !DILocation(line: 44, column: 4, scope: !7)
