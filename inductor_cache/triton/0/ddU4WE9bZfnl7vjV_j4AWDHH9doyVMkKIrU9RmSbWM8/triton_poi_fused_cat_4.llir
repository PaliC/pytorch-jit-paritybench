; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %11 = shl i32 %10, 8, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = shl i32 %12, 1, !dbg !12
  %14 = and i32 %13, 254, !dbg !12
  %15 = or disjoint i32 %11, %14, !dbg !13
  %16 = icmp slt i32 %15, 5120, !dbg !14
  %17 = sdiv i32 %15, 16, !dbg !15
  %.frozen = freeze i32 %15, !dbg !16
  %18 = sdiv i32 %.frozen, 1280, !dbg !16
  %19 = mul i32 %18, 1280, !dbg !17
  %srem.decomposed = sub i32 %.frozen, %19, !dbg !17
  %20 = shl nsw i32 %18, 9, !dbg !18
  %21 = add nsw i32 %20, %srem.decomposed, !dbg !19
  %22 = sext i32 %21 to i64, !dbg !20
  %23 = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !20
  %24 = shl nsw i32 %18, 8, !dbg !21
  %25 = insertelement <2 x i32> poison, i32 %15, i64 0, !dbg !22
  %26 = insertelement <2 x i32> %25, i32 %17, i64 1, !dbg !22
  %27 = srem <2 x i32> %26, <i32 16, i32 80>, !dbg !22
  %28 = extractelement <2 x i32> %27, i64 1, !dbg !23
  %29 = icmp slt i32 %28, 32, !dbg !24
  %30 = and i1 %16, %29, !dbg !25
  %31 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %23, i1 %30, i32 0, i1 %30, i32 0, i1 %30) #1, !dbg !26
  %32 = extractvalue { i32, i32 } %31, 0, !dbg !26
  %33 = extractvalue { i32, i32 } %31, 1, !dbg !26
  %34 = and i32 %28, -16, !dbg !27
  %35 = icmp eq i32 %34, 32, !dbg !27
  %36 = insertelement <2 x i32> <i32 poison, i32 -32>, i32 %24, i64 0, !dbg !28
  %37 = add nsw <2 x i32> %36, %27, !dbg !28
  %38 = extractelement <2 x i32> %37, i64 1, !dbg !29
  %39 = shl nsw i32 %38, 4, !dbg !29
  %40 = extractelement <2 x i32> %37, i64 0, !dbg !30
  %41 = add nsw i32 %40, %39, !dbg !31
  %42 = sext i32 %41 to i64, !dbg !32
  %43 = getelementptr float, ptr addrspace(1) %1, i64 %42, !dbg !32
  %44 = and i1 %16, %35, !dbg !33
  %45 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %43, i1 %44, i32 0, i1 %44, i32 0, i1 %44) #1, !dbg !34
  %46 = extractvalue { i32, i32 } %45, 0, !dbg !34
  %47 = extractvalue { i32, i32 } %45, 1, !dbg !34
  %48 = bitcast i32 %46 to float, !dbg !34
  %49 = bitcast i32 %47 to float, !dbg !34
  %50 = sext i32 %38 to i64, !dbg !35
  %51 = getelementptr float, ptr addrspace(1) %2, i64 %50, !dbg !35
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %51, i1 %44, i32 0, i1 %44) #1, !dbg !36
  %53 = bitcast i32 %52 to float, !dbg !36
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %51, i1 %44, i32 0, i1 %44) #1, !dbg !36
  %55 = bitcast i32 %54 to float, !dbg !36
  %56 = fadd float %48, %53, !dbg !37
  %57 = fadd float %49, %55, !dbg !37
  %58 = fcmp ogt float %56, 0.000000e+00, !dbg !38
  %59 = fcmp ogt float %57, 0.000000e+00, !dbg !38
  %60 = fmul float %56, 0x3FC99999A0000000, !dbg !39
  %61 = fmul float %57, 0x3FC99999A0000000, !dbg !39
  %62 = select i1 %58, float %56, float %60, !dbg !40
  %63 = select i1 %59, float %57, float %61, !dbg !40
  %64 = icmp eq i32 %34, 48, !dbg !41
  %65 = add nsw i32 %28, -48, !dbg !42
  %66 = shl nsw i32 %65, 4, !dbg !43
  %67 = add nsw i32 %40, %66, !dbg !44
  %68 = sext i32 %67 to i64, !dbg !45
  %69 = getelementptr float, ptr addrspace(1) %3, i64 %68, !dbg !45
  %70 = and i1 %16, %64, !dbg !46
  %71 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %69, i1 %70, i32 0, i1 %70, i32 0, i1 %70) #1, !dbg !47
  %72 = extractvalue { i32, i32 } %71, 0, !dbg !47
  %73 = extractvalue { i32, i32 } %71, 1, !dbg !47
  %74 = sext i32 %65 to i64, !dbg !48
  %75 = getelementptr float, ptr addrspace(1) %4, i64 %74, !dbg !48
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %75, i1 %70, i32 0, i1 %70) #1, !dbg !49
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %75, i1 %70, i32 0, i1 %70) #1, !dbg !49
  %78 = icmp sgt i32 %28, 63, !dbg !23
  %79 = add nsw i32 %28, -64, !dbg !50
  %80 = shl nsw i32 %79, 4, !dbg !51
  %81 = add nsw i32 %40, %80, !dbg !30
  %82 = sext i32 %81 to i64, !dbg !52
  %83 = getelementptr float, ptr addrspace(1) %5, i64 %82, !dbg !52
  %84 = and i1 %16, %78, !dbg !53
  %85 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %83, i1 %84, i32 0, i1 %84, i32 0, i1 %84) #1, !dbg !54
  %86 = extractvalue { i32, i32 } %85, 0, !dbg !54
  %87 = extractvalue { i32, i32 } %85, 1, !dbg !54
  %88 = sext i32 %79 to i64, !dbg !55
  %89 = getelementptr float, ptr addrspace(1) %6, i64 %88, !dbg !55
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %89, i1 %84, i32 0, i1 %84) #1, !dbg !56
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %89, i1 %84, i32 0, i1 %84) #1, !dbg !56
  %92 = insertelement <4 x i32> poison, i32 %87, i64 0, !dbg !54
  %93 = insertelement <4 x i32> %92, i32 %86, i64 1, !dbg !54
  %94 = insertelement <4 x i32> %93, i32 %73, i64 2, !dbg !54
  %95 = insertelement <4 x i32> %94, i32 %72, i64 3, !dbg !54
  %96 = bitcast <4 x i32> %95 to <4 x float>, !dbg !54
  %97 = insertelement <4 x i32> poison, i32 %91, i64 0, !dbg !56
  %98 = insertelement <4 x i32> %97, i32 %90, i64 1, !dbg !56
  %99 = insertelement <4 x i32> %98, i32 %77, i64 2, !dbg !56
  %100 = insertelement <4 x i32> %99, i32 %76, i64 3, !dbg !56
  %101 = bitcast <4 x i32> %100 to <4 x float>, !dbg !56
  %102 = fadd <4 x float> %96, %101, !dbg !57
  %103 = extractelement <4 x float> %102, i64 3, !dbg !58
  %104 = fmul float %103, 0x3FC99999A0000000, !dbg !59
  %105 = extractelement <4 x float> %102, i64 2, !dbg !58
  %106 = fmul float %105, 0x3FC99999A0000000, !dbg !59
  %107 = fcmp ogt <4 x float> %102, zeroinitializer, !dbg !60
  %108 = extractelement <4 x i1> %107, i64 3, !dbg !58
  %109 = select i1 %108, float %103, float %104, !dbg !58
  %110 = extractelement <4 x i1> %107, i64 2, !dbg !58
  %111 = select i1 %110, float %105, float %106, !dbg !58
  %112 = extractelement <4 x float> %102, i64 1, !dbg !61
  %113 = fmul float %112, 0x3FC99999A0000000, !dbg !62
  %114 = extractelement <4 x float> %102, i64 0, !dbg !61
  %115 = fmul float %114, 0x3FC99999A0000000, !dbg !62
  %116 = extractelement <4 x i1> %107, i64 1, !dbg !61
  %117 = select i1 %116, float %112, float %113, !dbg !61
  %118 = extractelement <4 x i1> %107, i64 0, !dbg !61
  %119 = select i1 %118, float %114, float %115, !dbg !61
  %120 = select i1 %78, float %117, float 0.000000e+00, !dbg !63
  %121 = select i1 %78, float %119, float 0.000000e+00, !dbg !63
  %122 = select i1 %64, float %109, float %120, !dbg !64
  %123 = select i1 %64, float %111, float %121, !dbg !64
  %124 = select i1 %35, float %62, float %122, !dbg !64
  %125 = select i1 %35, float %63, float %123, !dbg !64
  %126 = sext i32 %15 to i64, !dbg !65
  %127 = getelementptr float, ptr addrspace(1) %7, i64 %126, !dbg !65
  %128 = bitcast float %124 to i32, !dbg !66
  %129 = select i1 %29, i32 %32, i32 %128, !dbg !67
  %130 = bitcast float %125 to i32, !dbg !66
  %131 = select i1 %29, i32 %33, i32 %130, !dbg !67
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %129, i32 %131, ptr addrspace(1) %127, i1 %16) #1, !dbg !66
  ret void, !dbg !68
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ck6u6cmulmjg2u2a7qyuye5yqe3lzr47l7ndfxf57zqn5qf4xzm6.py", directory: "inductor_cache/k6")
!4 = !{ptr @triton_poi_fused_cat_4, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_4, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_4", linkageName: "triton_poi_fused_cat_4", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 33, column: 35, scope: !7)
!18 = !DILocation(line: 33, column: 49, scope: !7)
!19 = !DILocation(line: 33, column: 45, scope: !7)
!20 = !DILocation(line: 33, column: 30, scope: !7)
!21 = !DILocation(line: 38, column: 58, scope: !7)
!22 = !DILocation(line: 25, column: 19, scope: !7)
!23 = !DILocation(line: 62, column: 20, scope: !7)
!24 = !DILocation(line: 32, column: 18, scope: !7)
!25 = !DILocation(line: 33, column: 61, scope: !7)
!26 = !DILocation(line: 33, column: 54, scope: !7)
!27 = !DILocation(line: 37, column: 18, scope: !7)
!28 = !DILocation(line: 38, column: 36, scope: !7)
!29 = !DILocation(line: 38, column: 40, scope: !7)
!30 = !DILocation(line: 65, column: 54, scope: !7)
!31 = !DILocation(line: 38, column: 54, scope: !7)
!32 = !DILocation(line: 38, column: 31, scope: !7)
!33 = !DILocation(line: 38, column: 70, scope: !7)
!34 = !DILocation(line: 38, column: 63, scope: !7)
!35 = !DILocation(line: 39, column: 31, scope: !7)
!36 = !DILocation(line: 39, column: 44, scope: !7)
!37 = !DILocation(line: 40, column: 20, scope: !7)
!38 = !DILocation(line: 42, column: 20, scope: !7)
!39 = !DILocation(line: 44, column: 20, scope: !7)
!40 = !DILocation(line: 45, column: 35, scope: !7)
!41 = !DILocation(line: 51, column: 20, scope: !7)
!42 = !DILocation(line: 52, column: 48, scope: !7)
!43 = !DILocation(line: 52, column: 40, scope: !7)
!44 = !DILocation(line: 52, column: 54, scope: !7)
!45 = !DILocation(line: 52, column: 31, scope: !7)
!46 = !DILocation(line: 52, column: 71, scope: !7)
!47 = !DILocation(line: 52, column: 63, scope: !7)
!48 = !DILocation(line: 53, column: 31, scope: !7)
!49 = !DILocation(line: 53, column: 44, scope: !7)
!50 = !DILocation(line: 65, column: 48, scope: !7)
!51 = !DILocation(line: 65, column: 40, scope: !7)
!52 = !DILocation(line: 65, column: 31, scope: !7)
!53 = !DILocation(line: 65, column: 71, scope: !7)
!54 = !DILocation(line: 65, column: 63, scope: !7)
!55 = !DILocation(line: 66, column: 31, scope: !7)
!56 = !DILocation(line: 66, column: 44, scope: !7)
!57 = !DILocation(line: 67, column: 20, scope: !7)
!58 = !DILocation(line: 59, column: 35, scope: !7)
!59 = !DILocation(line: 58, column: 20, scope: !7)
!60 = !DILocation(line: 69, column: 20, scope: !7)
!61 = !DILocation(line: 72, column: 35, scope: !7)
!62 = !DILocation(line: 71, column: 20, scope: !7)
!63 = !DILocation(line: 74, column: 35, scope: !7)
!64 = !DILocation(line: 0, scope: !7)
!65 = !DILocation(line: 78, column: 25, scope: !7)
!66 = !DILocation(line: 78, column: 37, scope: !7)
!67 = !DILocation(line: 77, column: 33, scope: !7)
!68 = !DILocation(line: 78, column: 4, scope: !7)
