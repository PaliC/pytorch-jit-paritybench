; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [74 x i8] c"inductor_cache/hz/chz3s4khgzv3hqflkhsfd2oygqzhyqha2g33q72kgrfs7xwzdw4l.py\00"
@assertMessage_0 = internal constant [38 x i8] c"index out of bounds: 0 <= tmp7 < 1024\00"

; Function Attrs: noreturn
declare !dbg !7 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define void @triton_poi_fused_add_embedding_permute_sub_11(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !11 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !12
  %9 = shl i32 %8, 1, !dbg !13
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !14
  %11 = lshr i32 %10, 6, !dbg !14
  %.lobit = and i32 %11, 1, !dbg !14
  %12 = or disjoint i32 %9, %.lobit, !dbg !15
  %13 = icmp slt i32 %12, 256, !dbg !16
  %14 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !17
  %15 = shl i32 %14, 8, !dbg !18
  %16 = shl i32 %10, 2, !dbg !19
  %17 = and i32 %16, 252, !dbg !19
  %18 = or disjoint i32 %17, 2, !dbg !19
  %19 = or disjoint i32 %15, %17, !dbg !20
  %20 = or disjoint i32 %15, %18, !dbg !20
  %21 = icmp slt i32 %19, 256, !dbg !21
  %.frozen = freeze i32 %12, !dbg !22
  %22 = sdiv i32 %.frozen, 64, !dbg !22
  %23 = mul i32 %22, 64, !dbg !23
  %.decomposed = sub i32 %.frozen, %23, !dbg !23
  %24 = shl i32 %12, 8, !dbg !24
  %25 = add i32 %19, %24, !dbg !25
  %26 = sext i32 %25 to i64, !dbg !26
  %27 = getelementptr float, ptr addrspace(1) %0, i64 %26, !dbg !26
  %28 = and i1 %13, %21, !dbg !27
  %29 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %27, i1 %28) #4, !dbg !28
  %30 = sext i32 %.decomposed to i64, !dbg !29
  %31 = getelementptr float, ptr addrspace(1) %1, i64 %30, !dbg !29
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 %13) #4, !dbg !30
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 %13) #4, !dbg !30
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 %13) #4, !dbg !30
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 %13) #4, !dbg !30
  %36 = shl i32 %22, 8, !dbg !31
  %37 = add i32 %36, %19, !dbg !32
  %38 = add i32 %20, %36, !dbg !32
  %39 = sext i32 %37 to i64, !dbg !33
  %40 = getelementptr i64, ptr addrspace(1) %2, i64 %39, !dbg !33
  %41 = sext i32 %38 to i64, !dbg !33
  %42 = getelementptr i64, ptr addrspace(1) %2, i64 %41, !dbg !33
  %43 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %40, i1 %28) #4, !dbg !34
  %44 = extractvalue { i64, i64 } %43, 0, !dbg !34
  %45 = extractvalue { i64, i64 } %43, 1, !dbg !34
  %46 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %42, i1 %28) #4, !dbg !34
  %47 = extractvalue { i64, i64 } %46, 0, !dbg !34
  %48 = extractvalue { i64, i64 } %46, 1, !dbg !34
  %49 = insertelement <4 x i64> poison, i64 %44, i64 0, !dbg !35
  %50 = insertelement <4 x i64> %49, i64 %45, i64 1, !dbg !35
  %51 = insertelement <4 x i64> %50, i64 %47, i64 2, !dbg !35
  %52 = insertelement <4 x i64> %51, i64 %48, i64 3, !dbg !35
  %53 = lshr <4 x i64> %52, splat (i64 53), !dbg !35
  %54 = and <4 x i64> %53, splat (i64 1024), !dbg !35
  %55 = add <4 x i64> %54, %52, !dbg !35
  %56 = tail call i64 @llvm.vector.reduce.or.v4i64(<4 x i64> %55), !dbg !36
  %57 = icmp ugt i64 %56, 1023, !dbg !36
  %58 = and i1 %28, %57, !dbg !36
  br i1 %58, label %59, label %60, !dbg !36

59:                                               ; preds = %7
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 40, ptr nonnull @assertFunc_0, i64 1), !dbg !36
  unreachable, !dbg !36

60:                                               ; preds = %7
  %61 = extractvalue { i32, i32, i32, i32 } %29, 3, !dbg !28
  %62 = bitcast i32 %61 to float, !dbg !28
  %63 = bitcast i32 %35 to float, !dbg !30
  %64 = fadd float %62, %63, !dbg !37
  %65 = extractvalue { i32, i32, i32, i32 } %29, 2, !dbg !28
  %66 = bitcast i32 %65 to float, !dbg !28
  %67 = fadd float %66, %63, !dbg !37
  %68 = extractvalue { i32, i32, i32, i32 } %29, 1, !dbg !28
  %69 = bitcast i32 %68 to float, !dbg !28
  %70 = fadd float %69, %63, !dbg !37
  %71 = extractvalue { i32, i32, i32, i32 } %29, 0, !dbg !28
  %72 = bitcast i32 %71 to float, !dbg !28
  %73 = fadd float %72, %63, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %74 = shl nsw i32 %.decomposed, 10, !dbg !38
  %75 = sext i32 %74 to i64, !dbg !39
  %76 = extractelement <4 x i64> %55, i64 0, !dbg !40
  %77 = getelementptr float, ptr addrspace(1) %3, i64 %76, !dbg !40
  %78 = getelementptr float, ptr addrspace(1) %77, i64 %75, !dbg !40
  %79 = extractelement <4 x i64> %55, i64 1, !dbg !40
  %80 = getelementptr float, ptr addrspace(1) %3, i64 %79, !dbg !40
  %81 = getelementptr float, ptr addrspace(1) %80, i64 %75, !dbg !40
  %82 = extractelement <4 x i64> %55, i64 2, !dbg !40
  %83 = getelementptr float, ptr addrspace(1) %3, i64 %82, !dbg !40
  %84 = getelementptr float, ptr addrspace(1) %83, i64 %75, !dbg !40
  %85 = extractelement <4 x i64> %55, i64 3, !dbg !40
  %86 = getelementptr float, ptr addrspace(1) %3, i64 %85, !dbg !40
  %87 = getelementptr float, ptr addrspace(1) %86, i64 %75, !dbg !40
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 %28) #4, !dbg !41
  %89 = bitcast i32 %88 to float, !dbg !41
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 %28) #4, !dbg !41
  %91 = bitcast i32 %90 to float, !dbg !41
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 %28) #4, !dbg !41
  %93 = bitcast i32 %92 to float, !dbg !41
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %87, i1 %28) #4, !dbg !41
  %95 = bitcast i32 %94 to float, !dbg !41
  %96 = fsub float %89, %73, !dbg !42
  %97 = fsub float %91, %70, !dbg !42
  %98 = fsub float %93, %67, !dbg !42
  %99 = fsub float %95, %64, !dbg !42
  %100 = fadd float %73, %96, !dbg !43
  %101 = fadd float %70, %97, !dbg !43
  %102 = fadd float %67, %98, !dbg !43
  %103 = fadd float %64, %99, !dbg !43
  %104 = getelementptr float, ptr addrspace(1) %4, i64 %26, !dbg !44
  %105 = bitcast float %100 to i32, !dbg !45
  %106 = bitcast float %101 to i32, !dbg !45
  %107 = bitcast float %102 to i32, !dbg !45
  %108 = bitcast float %103 to i32, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %105, i32 %106, i32 %107, i32 %108, ptr addrspace(1) %104, i1 %28) #4, !dbg !45
  ret void, !dbg !46
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.vector.reduce.or.v4i64(<4 x i64>) #3

attributes #0 = { noreturn }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "chz3s4khgzv3hqflkhsfd2oygqzhyqha2g33q72kgrfs7xwzdw4l.py", directory: "inductor_cache/hz")
!4 = !{ptr @triton_poi_fused_add_embedding_permute_sub_11, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_embedding_permute_sub_11, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !8, file: !8, type: !9, spFlags: DISPFlagOptimized)
!8 = !DIFile(filename: "<unknown>", directory: "")
!9 = !DISubroutineType(cc: DW_CC_normal, types: !10)
!10 = !{}
!11 = distinct !DISubprogram(name: "triton_poi_fused_add_embedding_permute_sub_11", linkageName: "triton_poi_fused_add_embedding_permute_sub_11", scope: !3, file: !3, line: 19, type: !9, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!12 = !DILocation(line: 22, column: 28, scope: !11)
!13 = !DILocation(line: 22, column: 33, scope: !11)
!14 = !DILocation(line: 23, column: 44, scope: !11)
!15 = !DILocation(line: 23, column: 23, scope: !11)
!16 = !DILocation(line: 24, column: 21, scope: !11)
!17 = !DILocation(line: 25, column: 28, scope: !11)
!18 = !DILocation(line: 25, column: 33, scope: !11)
!19 = !DILocation(line: 26, column: 44, scope: !11)
!20 = !DILocation(line: 26, column: 23, scope: !11)
!21 = !DILocation(line: 27, column: 21, scope: !11)
!22 = !DILocation(line: 31, column: 19, scope: !11)
!23 = !DILocation(line: 30, column: 19, scope: !11)
!24 = !DILocation(line: 32, column: 39, scope: !11)
!25 = !DILocation(line: 32, column: 35, scope: !11)
!26 = !DILocation(line: 32, column: 30, scope: !11)
!27 = !DILocation(line: 32, column: 52, scope: !11)
!28 = !DILocation(line: 32, column: 44, scope: !11)
!29 = !DILocation(line: 33, column: 30, scope: !11)
!30 = !DILocation(line: 33, column: 35, scope: !11)
!31 = !DILocation(line: 34, column: 39, scope: !11)
!32 = !DILocation(line: 34, column: 35, scope: !11)
!33 = !DILocation(line: 34, column: 30, scope: !11)
!34 = !DILocation(line: 34, column: 44, scope: !11)
!35 = !DILocation(line: 39, column: 32, scope: !11)
!36 = !DILocation(line: 40, column: 71, scope: !11)
!37 = !DILocation(line: 35, column: 18, scope: !11)
!38 = !DILocation(line: 41, column: 42, scope: !11)
!39 = !DILocation(line: 41, column: 37, scope: !11)
!40 = !DILocation(line: 41, column: 30, scope: !11)
!41 = !DILocation(line: 41, column: 47, scope: !11)
!42 = !DILocation(line: 42, column: 19, scope: !11)
!43 = !DILocation(line: 43, column: 19, scope: !11)
!44 = !DILocation(line: 44, column: 25, scope: !11)
!45 = !DILocation(line: 44, column: 46, scope: !11)
!46 = !DILocation(line: 44, column: 4, scope: !11)
