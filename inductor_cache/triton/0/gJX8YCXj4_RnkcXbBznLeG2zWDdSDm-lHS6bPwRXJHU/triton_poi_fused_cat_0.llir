; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_cat_0(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %5 = shl i32 %4, 7, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = and i32 %6, 127, !dbg !12
  %8 = or disjoint i32 %5, %7, !dbg !13
  %9 = icmp slt i32 %8, 128, !dbg !14
  %.frozen = freeze i32 %8, !dbg !15
  %10 = sdiv i32 %.frozen, 32, !dbg !15
  %11 = mul i32 %10, 32, !dbg !16
  %.decomposed = sub i32 %.frozen, %11, !dbg !16
  %12 = icmp slt i32 %.decomposed, 16, !dbg !17
  %.lhs.trunc = trunc nsw i32 %.decomposed to i8, !dbg !18
  %13 = srem i8 %.lhs.trunc, 16, !dbg !18
  %.sext = sext i8 %13 to i32, !dbg !18
  %14 = shl nsw i32 %.sext, 2, !dbg !19
  %15 = shl i32 %10, 6, !dbg !20
  %16 = add i32 %14, %15, !dbg !21
  %17 = sext i32 %16 to i64, !dbg !22
  %18 = getelementptr float, ptr addrspace(1) %0, i64 %17, !dbg !22
  %19 = and i1 %9, %12, !dbg !23
  %20 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %18, i1 %19, i32 0, i1 %19) #3, !dbg !24
  %21 = bitcast i32 %20 to float, !dbg !24
  %22 = or disjoint i32 %15, 1, !dbg !25
  %23 = add i32 %22, %14, !dbg !26
  %24 = sext i32 %23 to i64, !dbg !27
  %25 = getelementptr float, ptr addrspace(1) %0, i64 %24, !dbg !27
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %25, i1 %19, i32 0, i1 %19) #3, !dbg !28
  %27 = bitcast i32 %26 to float, !dbg !28
  %28 = fadd float %21, %27, !dbg !29
  %29 = or disjoint i32 %15, 2, !dbg !30
  %30 = add i32 %29, %14, !dbg !31
  %31 = sext i32 %30 to i64, !dbg !32
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !32
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %32, i1 %19, i32 0, i1 %19) #3, !dbg !33
  %34 = bitcast i32 %33 to float, !dbg !33
  %35 = fadd float %28, %34, !dbg !34
  %36 = or disjoint i32 %15, 3, !dbg !35
  %37 = add i32 %36, %14, !dbg !36
  %38 = sext i32 %37 to i64, !dbg !37
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !37
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %39, i1 %19, i32 0, i1 %19) #3, !dbg !38
  %41 = bitcast i32 %40 to float, !dbg !38
  %42 = fadd float %35, %41, !dbg !39
  %43 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %42, float 4.000000e+00) #3, !dbg !40
  %44 = icmp sgt i32 %.decomposed, 15, !dbg !41
  %.lhs.trunc1 = add nsw i8 %.lhs.trunc, -16, !dbg !42
  %45 = srem i8 %.lhs.trunc1, 16, !dbg !42
  %.sext2 = sext i8 %45 to i32, !dbg !42
  %46 = shl nsw i32 %.sext2, 2, !dbg !43
  %47 = add i32 %46, %15, !dbg !44
  %48 = sext i32 %47 to i64, !dbg !45
  %49 = getelementptr float, ptr addrspace(1) %0, i64 %48, !dbg !45
  %50 = and i1 %9, %44, !dbg !46
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %49, i1 %50, i32 0, i1 %50) #3, !dbg !47
  %52 = bitcast i32 %51 to float, !dbg !47
  %53 = add i32 %22, %46, !dbg !48
  %54 = sext i32 %53 to i64, !dbg !49
  %55 = getelementptr float, ptr addrspace(1) %0, i64 %54, !dbg !49
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %55, i1 %50, i32 0, i1 %50) #3, !dbg !50
  %57 = bitcast i32 %56 to float, !dbg !50
  %58 = fadd float %52, %57, !dbg !51
  %59 = add i32 %29, %46, !dbg !52
  %60 = sext i32 %59 to i64, !dbg !53
  %61 = getelementptr float, ptr addrspace(1) %0, i64 %60, !dbg !53
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %61, i1 %50, i32 0, i1 %50) #3, !dbg !54
  %63 = bitcast i32 %62 to float, !dbg !54
  %64 = fadd float %58, %63, !dbg !55
  %65 = add i32 %36, %46, !dbg !56
  %66 = sext i32 %65 to i64, !dbg !57
  %67 = getelementptr float, ptr addrspace(1) %0, i64 %66, !dbg !57
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %67, i1 %50, i32 0, i1 %50) #3, !dbg !58
  %69 = bitcast i32 %68 to float, !dbg !58
  %70 = fadd float %64, %69, !dbg !59
  %71 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %70, float 4.000000e+00) #3, !dbg !60
  %72 = fsub float %52, %71, !dbg !61
  %73 = fmul float %72, %72, !dbg !62
  %74 = fsub float %57, %71, !dbg !63
  %75 = fmul float %74, %74, !dbg !64
  %76 = fadd float %73, %75, !dbg !65
  %77 = fsub float %63, %71, !dbg !66
  %78 = fmul float %77, %77, !dbg !67
  %79 = fadd float %78, %76, !dbg !68
  %80 = fsub float %69, %71, !dbg !69
  %81 = fmul float %80, %80, !dbg !70
  %82 = fadd float %81, %79, !dbg !71
  %83 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %82, float 3.000000e+00) #3, !dbg !72
  %84 = fadd float %83, 0x3E7AD7F2A0000000, !dbg !73
  %85 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !74
  %.not.i = icmp eq i32 %85, 0, !dbg !74
  %86 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !74
  %.not1.i = icmp eq i32 %86, 0, !dbg !74
  br i1 %.not.i, label %92, label %87, !dbg !74

87:                                               ; preds = %3
  br i1 %.not1.i, label %90, label %88, !dbg !74

88:                                               ; preds = %87
  %89 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %84) #3, !dbg !74
  br label %__nv_sqrtf.exit, !dbg !74

90:                                               ; preds = %87
  %91 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %84) #3, !dbg !74
  br label %__nv_sqrtf.exit, !dbg !74

92:                                               ; preds = %3
  br i1 %.not1.i, label %95, label %93, !dbg !74

93:                                               ; preds = %92
  %94 = tail call float @llvm.nvvm.sqrt.rn.f(float %84) #3, !dbg !74
  br label %__nv_sqrtf.exit, !dbg !74

95:                                               ; preds = %92
  %96 = tail call float @llvm.nvvm.sqrt.approx.f(float %84) #3, !dbg !74
  br label %__nv_sqrtf.exit, !dbg !74

__nv_sqrtf.exit:                                  ; preds = %88, %90, %93, %95
  %.0.i = phi float [ %89, %88 ], [ %91, %90 ], [ %94, %93 ], [ %96, %95 ], !dbg !74
  %97 = select i1 %12, float %43, float %.0.i, !dbg !75
  %98 = sext i32 %8 to i64, !dbg !76
  %99 = getelementptr float, ptr addrspace(1) %1, i64 %98, !dbg !76
  %100 = bitcast float %97 to i32, !dbg !77
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %100, ptr addrspace(1) %99, i1 %9) #3, !dbg !77
  ret void, !dbg !78
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "csktwj6rb6pjlp3gaxxoj7is5hwhxsr6hjha7sbzs4l7pudr62t3.py", directory: "inductor_cache/sk")
!4 = !{ptr @triton_poi_fused_cat_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_0, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_0", linkageName: "triton_poi_fused_cat_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 24, column: 19, scope: !7)
!17 = !DILocation(line: 31, column: 18, scope: !7)
!18 = !DILocation(line: 32, column: 41, scope: !7)
!19 = !DILocation(line: 32, column: 34, scope: !7)
!20 = !DILocation(line: 32, column: 51, scope: !7)
!21 = !DILocation(line: 32, column: 48, scope: !7)
!22 = !DILocation(line: 32, column: 30, scope: !7)
!23 = !DILocation(line: 32, column: 63, scope: !7)
!24 = !DILocation(line: 32, column: 56, scope: !7)
!25 = !DILocation(line: 33, column: 34, scope: !7)
!26 = !DILocation(line: 33, column: 52, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 33, column: 60, scope: !7)
!29 = !DILocation(line: 34, column: 18, scope: !7)
!30 = !DILocation(line: 35, column: 34, scope: !7)
!31 = !DILocation(line: 35, column: 52, scope: !7)
!32 = !DILocation(line: 35, column: 30, scope: !7)
!33 = !DILocation(line: 35, column: 60, scope: !7)
!34 = !DILocation(line: 36, column: 18, scope: !7)
!35 = !DILocation(line: 37, column: 35, scope: !7)
!36 = !DILocation(line: 37, column: 53, scope: !7)
!37 = !DILocation(line: 37, column: 31, scope: !7)
!38 = !DILocation(line: 37, column: 61, scope: !7)
!39 = !DILocation(line: 38, column: 19, scope: !7)
!40 = !DILocation(line: 40, column: 20, scope: !7)
!41 = !DILocation(line: 43, column: 20, scope: !7)
!42 = !DILocation(line: 46, column: 50, scope: !7)
!43 = !DILocation(line: 46, column: 35, scope: !7)
!44 = !DILocation(line: 46, column: 57, scope: !7)
!45 = !DILocation(line: 46, column: 31, scope: !7)
!46 = !DILocation(line: 46, column: 73, scope: !7)
!47 = !DILocation(line: 46, column: 65, scope: !7)
!48 = !DILocation(line: 47, column: 61, scope: !7)
!49 = !DILocation(line: 47, column: 31, scope: !7)
!50 = !DILocation(line: 47, column: 69, scope: !7)
!51 = !DILocation(line: 48, column: 20, scope: !7)
!52 = !DILocation(line: 49, column: 61, scope: !7)
!53 = !DILocation(line: 49, column: 31, scope: !7)
!54 = !DILocation(line: 49, column: 69, scope: !7)
!55 = !DILocation(line: 50, column: 20, scope: !7)
!56 = !DILocation(line: 51, column: 61, scope: !7)
!57 = !DILocation(line: 51, column: 31, scope: !7)
!58 = !DILocation(line: 51, column: 69, scope: !7)
!59 = !DILocation(line: 52, column: 20, scope: !7)
!60 = !DILocation(line: 54, column: 20, scope: !7)
!61 = !DILocation(line: 55, column: 20, scope: !7)
!62 = !DILocation(line: 56, column: 20, scope: !7)
!63 = !DILocation(line: 57, column: 20, scope: !7)
!64 = !DILocation(line: 58, column: 20, scope: !7)
!65 = !DILocation(line: 59, column: 20, scope: !7)
!66 = !DILocation(line: 60, column: 20, scope: !7)
!67 = !DILocation(line: 61, column: 20, scope: !7)
!68 = !DILocation(line: 62, column: 20, scope: !7)
!69 = !DILocation(line: 63, column: 20, scope: !7)
!70 = !DILocation(line: 64, column: 20, scope: !7)
!71 = !DILocation(line: 65, column: 20, scope: !7)
!72 = !DILocation(line: 67, column: 20, scope: !7)
!73 = !DILocation(line: 69, column: 20, scope: !7)
!74 = !DILocation(line: 70, column: 27, scope: !7)
!75 = !DILocation(line: 0, scope: !7)
!76 = !DILocation(line: 74, column: 25, scope: !7)
!77 = !DILocation(line: 74, column: 37, scope: !7)
!78 = !DILocation(line: 74, column: 4, scope: !7)
