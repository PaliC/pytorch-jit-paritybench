; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused_abs_div_pow_sqrt_sum_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %6 = and i32 %5, 15, !dbg !10
  %7 = zext nneg i32 %6 to i64, !dbg !11
  %8 = getelementptr float, ptr addrspace(1) %1, i64 %7, !dbg !11
  %9 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %8, i1 true) #5, !dbg !12
  %10 = bitcast i32 %9 to float, !dbg !12
  %11 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %8, i1 true) #5, !dbg !12
  %12 = bitcast i32 %11 to float, !dbg !12
  %13 = fmul float %10, %10, !dbg !13
  %14 = fmul float %12, %12, !dbg !13
  %15 = bitcast float %13 to i32, !dbg !14
  %16 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %15, i32 8, i32 31), !dbg !14
  %17 = bitcast i32 %16 to float, !dbg !14
  %18 = fadd float %13, %17, !dbg !18
  %19 = bitcast float %18 to i32, !dbg !14
  %20 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %19, i32 4, i32 31), !dbg !14
  %21 = bitcast i32 %20 to float, !dbg !14
  %22 = fadd float %18, %21, !dbg !18
  %23 = bitcast float %22 to i32, !dbg !14
  %24 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %23, i32 2, i32 31), !dbg !14
  %25 = bitcast i32 %24 to float, !dbg !14
  %26 = fadd float %22, %25, !dbg !18
  %27 = bitcast float %26 to i32, !dbg !14
  %28 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %27, i32 1, i32 31), !dbg !14
  %29 = bitcast i32 %28 to float, !dbg !14
  %30 = fadd float %26, %29, !dbg !18
  %31 = bitcast float %14 to i32, !dbg !14
  %32 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %31, i32 8, i32 31), !dbg !14
  %33 = bitcast i32 %32 to float, !dbg !14
  %34 = fadd float %14, %33, !dbg !18
  %35 = bitcast float %34 to i32, !dbg !14
  %36 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %35, i32 4, i32 31), !dbg !14
  %37 = bitcast i32 %36 to float, !dbg !14
  %38 = fadd float %34, %37, !dbg !18
  %39 = bitcast float %38 to i32, !dbg !14
  %40 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %39, i32 2, i32 31), !dbg !14
  %41 = bitcast i32 %40 to float, !dbg !14
  %42 = fadd float %38, %41, !dbg !18
  %43 = bitcast float %42 to i32, !dbg !14
  %44 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %43, i32 1, i32 31), !dbg !14
  %45 = bitcast i32 %44 to float, !dbg !14
  %46 = fadd float %42, %45, !dbg !18
  %47 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !20
  %.not.i = icmp eq i32 %47, 0, !dbg !20
  %48 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !20
  %.not1.i = icmp eq i32 %48, 0, !dbg !20
  br i1 %.not.i, label %54, label %49, !dbg !20

49:                                               ; preds = %4
  br i1 %.not1.i, label %52, label %50, !dbg !20

50:                                               ; preds = %49
  %51 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %30) #5, !dbg !20
  br label %__nv_sqrtf.exit, !dbg !20

52:                                               ; preds = %49
  %53 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %30) #5, !dbg !20
  br label %__nv_sqrtf.exit, !dbg !20

54:                                               ; preds = %4
  br i1 %.not1.i, label %57, label %55, !dbg !20

55:                                               ; preds = %54
  %56 = tail call float @llvm.nvvm.sqrt.rn.f(float %30) #5, !dbg !20
  br label %__nv_sqrtf.exit, !dbg !20

57:                                               ; preds = %54
  %58 = tail call float @llvm.nvvm.sqrt.approx.f(float %30) #5, !dbg !20
  br label %__nv_sqrtf.exit, !dbg !20

__nv_sqrtf.exit:                                  ; preds = %50, %52, %55, %57
  %.0.i = phi float [ %51, %50 ], [ %53, %52 ], [ %56, %55 ], [ %58, %57 ], !dbg !20
  %59 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !20
  %.not.i1 = icmp eq i32 %59, 0, !dbg !20
  %60 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !20
  %.not1.i4 = icmp eq i32 %60, 0, !dbg !20
  br i1 %.not.i1, label %66, label %61, !dbg !20

61:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %64, label %62, !dbg !20

62:                                               ; preds = %61
  %63 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %46) #5, !dbg !20
  br label %__nv_sqrtf.exit5, !dbg !20

64:                                               ; preds = %61
  %65 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %46) #5, !dbg !20
  br label %__nv_sqrtf.exit5, !dbg !20

66:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %69, label %67, !dbg !20

67:                                               ; preds = %66
  %68 = tail call float @llvm.nvvm.sqrt.rn.f(float %46) #5, !dbg !20
  br label %__nv_sqrtf.exit5, !dbg !20

69:                                               ; preds = %66
  %70 = tail call float @llvm.nvvm.sqrt.approx.f(float %46) #5, !dbg !20
  br label %__nv_sqrtf.exit5, !dbg !20

__nv_sqrtf.exit5:                                 ; preds = %62, %64, %67, %69
  %.0.i3 = phi float [ %63, %62 ], [ %65, %64 ], [ %68, %67 ], [ %70, %69 ], !dbg !20
  %71 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %10, float %.0.i) #5, !dbg !21
  tail call void @llvm.nvvm.barrier0(), !dbg !22
  %urem = and i32 %5, 63, !dbg !23
  %72 = icmp eq i32 %urem, 0, !dbg !23
  %73 = bitcast float %.0.i3 to i32, !dbg !23
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %73, ptr addrspace(1) %0, i1 %72) #5, !dbg !23
  %74 = getelementptr float, ptr addrspace(1) %2, i64 %7, !dbg !24
  %75 = and i32 %5, 48, !dbg !25
  %76 = icmp eq i32 %75, 0, !dbg !25
  %77 = bitcast float %71 to i32, !dbg !25
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %77, ptr addrspace(1) %74, i1 %76) #5, !dbg !25
  ret void, !dbg !26
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cp3w45mvle4tlqdm2pz64vdcjbcamui44m6xvztteonfes5qobre.py", directory: "inductor_cache/p3")
!4 = !{ptr @triton_per_fused_abs_div_pow_sqrt_sum_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_abs_div_pow_sqrt_sum_0, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_abs_div_pow_sqrt_sum_0", linkageName: "triton_per_fused_abs_div_pow_sqrt_sum_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 26, column: 34, scope: !7)
!11 = !DILocation(line: 30, column: 30, scope: !7)
!12 = !DILocation(line: 30, column: 35, scope: !7)
!13 = !DILocation(line: 32, column: 18, scope: !7)
!14 = !DILocation(line: 267, column: 36, scope: !15, inlinedAt: !17)
!15 = distinct !DILexicalBlockFile(scope: !7, file: !16, discriminator: 0)
!16 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!17 = !DILocation(line: 34, column: 24, scope: !7)
!18 = !DILocation(line: 256, column: 15, scope: !19, inlinedAt: !17)
!19 = distinct !DILexicalBlockFile(scope: !15, file: !16, discriminator: 0)
!20 = !DILocation(line: 35, column: 26, scope: !7)
!21 = !DILocation(line: 36, column: 18, scope: !7)
!22 = !DILocation(line: 37, column: 4, scope: !7)
!23 = !DILocation(line: 38, column: 70, scope: !7)
!24 = !DILocation(line: 39, column: 25, scope: !7)
!25 = !DILocation(line: 39, column: 71, scope: !7)
!26 = !DILocation(line: 39, column: 4, scope: !7)
