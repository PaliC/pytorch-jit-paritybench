; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %11 = shl i32 %10, 9, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = shl i32 %12, 2, !dbg !12
  %14 = and i32 %13, 508, !dbg !12
  %15 = or disjoint i32 %11, %14, !dbg !13
  %16 = sdiv i32 %15, 4096, !dbg !14
  %17 = srem i32 %16, 4, !dbg !15
  %18 = sext i32 %15 to i64, !dbg !16
  %19 = getelementptr float, ptr addrspace(1) %0, i64 %18, !dbg !16
  %20 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %19, i1 true) #3, !dbg !17
  %21 = sext i32 %17 to i64, !dbg !18
  %22 = getelementptr float, ptr addrspace(1) %1, i64 %21, !dbg !18
  %23 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %22, i1 true) #3, !dbg !19
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %22, i1 true) #3, !dbg !19
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %22, i1 true) #3, !dbg !19
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %22, i1 true) #3, !dbg !19
  %27 = getelementptr float, ptr addrspace(1) %2, i64 %18, !dbg !20
  %28 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %27, i1 true) #3, !dbg !21
  %29 = getelementptr float, ptr addrspace(1) %3, i64 %21, !dbg !22
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 true) #3, !dbg !23
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 true) #3, !dbg !23
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 true) #3, !dbg !23
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 true) #3, !dbg !23
  %34 = getelementptr float, ptr addrspace(1) %4, i64 %21, !dbg !24
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #3, !dbg !25
  %36 = bitcast i32 %35 to float, !dbg !25
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #3, !dbg !25
  %38 = bitcast i32 %37 to float, !dbg !25
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #3, !dbg !25
  %40 = bitcast i32 %39 to float, !dbg !25
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #3, !dbg !25
  %42 = bitcast i32 %41 to float, !dbg !25
  %43 = getelementptr float, ptr addrspace(1) %5, i64 %21, !dbg !26
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 true) #3, !dbg !27
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 true) #3, !dbg !27
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 true) #3, !dbg !27
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 true) #3, !dbg !27
  %48 = getelementptr float, ptr addrspace(1) %6, i64 %21, !dbg !28
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #3, !dbg !29
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #3, !dbg !29
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #3, !dbg !29
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #3, !dbg !29
  %53 = fadd float %36, 0x3EE4F8B580000000, !dbg !30
  %54 = fadd float %38, 0x3EE4F8B580000000, !dbg !30
  %55 = fadd float %40, 0x3EE4F8B580000000, !dbg !30
  %56 = fadd float %42, 0x3EE4F8B580000000, !dbg !30
  %57 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %.not.i = icmp eq i32 %57, 0, !dbg !31
  %58 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !31
  %.not1.i = icmp eq i32 %58, 0, !dbg !31
  br i1 %.not.i, label %64, label %59, !dbg !31

59:                                               ; preds = %9
  br i1 %.not1.i, label %62, label %60, !dbg !31

60:                                               ; preds = %59
  %61 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %53) #3, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

62:                                               ; preds = %59
  %63 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %53) #3, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

64:                                               ; preds = %9
  br i1 %.not1.i, label %67, label %65, !dbg !31

65:                                               ; preds = %64
  %66 = tail call float @llvm.nvvm.sqrt.rn.f(float %53) #3, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

67:                                               ; preds = %64
  %68 = tail call float @llvm.nvvm.sqrt.approx.f(float %53) #3, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

__nv_sqrtf.exit:                                  ; preds = %60, %62, %65, %67
  %.0.i = phi float [ %61, %60 ], [ %63, %62 ], [ %66, %65 ], [ %68, %67 ], !dbg !31
  %69 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %.not.i1 = icmp eq i32 %69, 0, !dbg !31
  %70 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !31
  %.not1.i4 = icmp eq i32 %70, 0, !dbg !31
  br i1 %.not.i1, label %76, label %71, !dbg !31

71:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %74, label %72, !dbg !31

72:                                               ; preds = %71
  %73 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %54) #3, !dbg !31
  br label %__nv_sqrtf.exit5, !dbg !31

74:                                               ; preds = %71
  %75 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %54) #3, !dbg !31
  br label %__nv_sqrtf.exit5, !dbg !31

76:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %79, label %77, !dbg !31

77:                                               ; preds = %76
  %78 = tail call float @llvm.nvvm.sqrt.rn.f(float %54) #3, !dbg !31
  br label %__nv_sqrtf.exit5, !dbg !31

79:                                               ; preds = %76
  %80 = tail call float @llvm.nvvm.sqrt.approx.f(float %54) #3, !dbg !31
  br label %__nv_sqrtf.exit5, !dbg !31

__nv_sqrtf.exit5:                                 ; preds = %72, %74, %77, %79
  %.0.i3 = phi float [ %73, %72 ], [ %75, %74 ], [ %78, %77 ], [ %80, %79 ], !dbg !31
  %81 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %.not.i6 = icmp eq i32 %81, 0, !dbg !31
  %82 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !31
  %.not1.i9 = icmp eq i32 %82, 0, !dbg !31
  br i1 %.not.i6, label %88, label %83, !dbg !31

83:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %86, label %84, !dbg !31

84:                                               ; preds = %83
  %85 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %55) #3, !dbg !31
  br label %__nv_sqrtf.exit10, !dbg !31

86:                                               ; preds = %83
  %87 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %55) #3, !dbg !31
  br label %__nv_sqrtf.exit10, !dbg !31

88:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %91, label %89, !dbg !31

89:                                               ; preds = %88
  %90 = tail call float @llvm.nvvm.sqrt.rn.f(float %55) #3, !dbg !31
  br label %__nv_sqrtf.exit10, !dbg !31

91:                                               ; preds = %88
  %92 = tail call float @llvm.nvvm.sqrt.approx.f(float %55) #3, !dbg !31
  br label %__nv_sqrtf.exit10, !dbg !31

__nv_sqrtf.exit10:                                ; preds = %84, %86, %89, %91
  %.0.i8 = phi float [ %85, %84 ], [ %87, %86 ], [ %90, %89 ], [ %92, %91 ], !dbg !31
  %93 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %.not.i11 = icmp eq i32 %93, 0, !dbg !31
  %94 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !31
  %.not1.i14 = icmp eq i32 %94, 0, !dbg !31
  br i1 %.not.i11, label %100, label %95, !dbg !31

95:                                               ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %98, label %96, !dbg !31

96:                                               ; preds = %95
  %97 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %56) #3, !dbg !31
  br label %__nv_sqrtf.exit15, !dbg !31

98:                                               ; preds = %95
  %99 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %56) #3, !dbg !31
  br label %__nv_sqrtf.exit15, !dbg !31

100:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %103, label %101, !dbg !31

101:                                              ; preds = %100
  %102 = tail call float @llvm.nvvm.sqrt.rn.f(float %56) #3, !dbg !31
  br label %__nv_sqrtf.exit15, !dbg !31

103:                                              ; preds = %100
  %104 = tail call float @llvm.nvvm.sqrt.approx.f(float %56) #3, !dbg !31
  br label %__nv_sqrtf.exit15, !dbg !31

__nv_sqrtf.exit15:                                ; preds = %96, %98, %101, %103
  %.0.i13 = phi float [ %97, %96 ], [ %99, %98 ], [ %102, %101 ], [ %104, %103 ], !dbg !31
  %105 = extractvalue { i32, i32, i32, i32 } %20, 3, !dbg !17
  %106 = bitcast i32 %105 to float, !dbg !17
  %107 = bitcast i32 %26 to float, !dbg !19
  %108 = fadd float %106, %107, !dbg !32
  %109 = bitcast i32 %33 to float, !dbg !23
  %110 = fsub float %108, %109, !dbg !33
  %111 = extractvalue { i32, i32, i32, i32 } %20, 2, !dbg !17
  %112 = bitcast i32 %111 to float, !dbg !17
  %113 = bitcast i32 %25 to float, !dbg !19
  %114 = fadd float %112, %113, !dbg !32
  %115 = bitcast i32 %32 to float, !dbg !23
  %116 = fsub float %114, %115, !dbg !33
  %117 = extractvalue { i32, i32, i32, i32 } %20, 1, !dbg !17
  %118 = bitcast i32 %117 to float, !dbg !17
  %119 = bitcast i32 %24 to float, !dbg !19
  %120 = fadd float %118, %119, !dbg !32
  %121 = bitcast i32 %31 to float, !dbg !23
  %122 = fsub float %120, %121, !dbg !33
  %123 = extractvalue { i32, i32, i32, i32 } %20, 0, !dbg !17
  %124 = bitcast i32 %123 to float, !dbg !17
  %125 = bitcast i32 %23 to float, !dbg !19
  %126 = fadd float %124, %125, !dbg !32
  %127 = bitcast i32 %30 to float, !dbg !23
  %128 = fsub float %126, %127, !dbg !33
  %129 = bitcast i32 %52 to float, !dbg !29
  %130 = bitcast i32 %51 to float, !dbg !29
  %131 = bitcast i32 %50 to float, !dbg !29
  %132 = bitcast i32 %49 to float, !dbg !29
  %133 = bitcast i32 %47 to float, !dbg !27
  %134 = bitcast i32 %46 to float, !dbg !27
  %135 = bitcast i32 %45 to float, !dbg !27
  %136 = bitcast i32 %44 to float, !dbg !27
  %137 = extractvalue { i32, i32, i32, i32 } %28, 3, !dbg !21
  %138 = bitcast i32 %137 to float, !dbg !21
  %139 = extractvalue { i32, i32, i32, i32 } %28, 2, !dbg !21
  %140 = bitcast i32 %139 to float, !dbg !21
  %141 = extractvalue { i32, i32, i32, i32 } %28, 1, !dbg !21
  %142 = bitcast i32 %141 to float, !dbg !21
  %143 = extractvalue { i32, i32, i32, i32 } %28, 0, !dbg !21
  %144 = bitcast i32 %143 to float, !dbg !21
  %145 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !34
  %146 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !34
  %147 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !34
  %148 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !34
  %149 = fmul float %128, %145, !dbg !35
  %150 = fmul float %122, %146, !dbg !35
  %151 = fmul float %116, %147, !dbg !35
  %152 = fmul float %110, %148, !dbg !35
  %153 = fmul float %149, %136, !dbg !36
  %154 = fmul float %150, %135, !dbg !36
  %155 = fmul float %151, %134, !dbg !36
  %156 = fmul float %152, %133, !dbg !36
  %157 = fadd float %153, %132, !dbg !37
  %158 = fadd float %154, %131, !dbg !37
  %159 = fadd float %155, %130, !dbg !37
  %160 = fadd float %156, %129, !dbg !37
  %161 = fadd float %157, %144, !dbg !38
  %162 = fadd float %158, %142, !dbg !38
  %163 = fadd float %159, %140, !dbg !38
  %164 = fadd float %160, %138, !dbg !38
  %165 = bitcast float %126 to i32, !dbg !39
  %166 = bitcast float %120 to i32, !dbg !39
  %167 = bitcast float %114 to i32, !dbg !39
  %168 = bitcast float %108 to i32, !dbg !39
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %165, i32 %166, i32 %167, i32 %168, ptr addrspace(1) %19, i1 true) #3, !dbg !39
  %169 = getelementptr float, ptr addrspace(1) %7, i64 %18, !dbg !40
  %170 = bitcast float %161 to i32, !dbg !41
  %171 = bitcast float %162 to i32, !dbg !41
  %172 = bitcast float %163 to i32, !dbg !41
  %173 = bitcast float %164 to i32, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %170, i32 %171, i32 %172, i32 %173, ptr addrspace(1) %169, i1 true) #3, !dbg !41
  ret void, !dbg !42
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c6ohuutmjbl5y3pann6el53glk32d5xuhtvy5z7yfoucst77xbza.py", directory: "inductor_cache/6o")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_1, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_1", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 29, scope: !7)
!16 = !DILocation(line: 26, column: 34, scope: !7)
!17 = !DILocation(line: 26, column: 39, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 35, scope: !7)
!20 = !DILocation(line: 28, column: 30, scope: !7)
!21 = !DILocation(line: 28, column: 35, scope: !7)
!22 = !DILocation(line: 29, column: 30, scope: !7)
!23 = !DILocation(line: 29, column: 35, scope: !7)
!24 = !DILocation(line: 30, column: 30, scope: !7)
!25 = !DILocation(line: 30, column: 35, scope: !7)
!26 = !DILocation(line: 31, column: 31, scope: !7)
!27 = !DILocation(line: 31, column: 36, scope: !7)
!28 = !DILocation(line: 32, column: 31, scope: !7)
!29 = !DILocation(line: 32, column: 36, scope: !7)
!30 = !DILocation(line: 36, column: 18, scope: !7)
!31 = !DILocation(line: 37, column: 26, scope: !7)
!32 = !DILocation(line: 33, column: 18, scope: !7)
!33 = !DILocation(line: 34, column: 18, scope: !7)
!34 = !DILocation(line: 39, column: 20, scope: !7)
!35 = !DILocation(line: 42, column: 19, scope: !7)
!36 = !DILocation(line: 43, column: 20, scope: !7)
!37 = !DILocation(line: 44, column: 20, scope: !7)
!38 = !DILocation(line: 45, column: 19, scope: !7)
!39 = !DILocation(line: 46, column: 39, scope: !7)
!40 = !DILocation(line: 47, column: 25, scope: !7)
!41 = !DILocation(line: 47, column: 37, scope: !7)
!42 = !DILocation(line: 47, column: 4, scope: !7)
