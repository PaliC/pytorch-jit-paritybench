; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__unsafe_index_add_convolution_mul_sub_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, i32 %12) local_unnamed_addr !dbg !7 {
  %14 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %15 = shl i32 %14, 10, !dbg !11
  %16 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %17 = shl i32 %16, 2, !dbg !12
  %18 = and i32 %17, 508, !dbg !12
  %19 = or disjoint i32 %15, %18, !dbg !13
  %20 = or disjoint i32 %19, 2, !dbg !13
  %21 = or disjoint i32 %19, 512, !dbg !13
  %.frozen = freeze i32 %19, !dbg !14
  %22 = sdiv i32 %.frozen, 32, !dbg !14
  %23 = sdiv i32 %21, 32, !dbg !14
  %24 = srem i32 %22, 32, !dbg !15
  %25 = srem i32 %23, 32, !dbg !15
  %26 = mul i32 %22, 32, !dbg !16
  %.decomposed = sub i32 %.frozen, %26, !dbg !16
  %27 = srem i32 %20, 32, !dbg !16
  %28 = sdiv i32 %19, 1024, !dbg !17
  %29 = sdiv i32 %21, 1024, !dbg !17
  %30 = srem i32 %28, 64, !dbg !18
  %31 = srem i32 %29, 64, !dbg !18
  %32 = sext i32 %24 to i64, !dbg !19
  %33 = getelementptr i64, ptr addrspace(1) %1, i64 %32, !dbg !19
  %34 = sext i32 %25 to i64, !dbg !19
  %35 = getelementptr i64, ptr addrspace(1) %1, i64 %34, !dbg !19
  %36 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %33, i1 true) #1, !dbg !20
  %37 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %33, i1 true) #1, !dbg !20
  %38 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %33, i1 true) #1, !dbg !20
  %39 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %33, i1 true) #1, !dbg !20
  %40 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %35, i1 true) #1, !dbg !20
  %41 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %35, i1 true) #1, !dbg !20
  %42 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %35, i1 true) #1, !dbg !20
  %43 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %35, i1 true) #1, !dbg !20
  %44 = sext i32 %.decomposed to i64, !dbg !21
  %45 = getelementptr i64, ptr addrspace(1) %2, i64 %44, !dbg !21
  %46 = sext i32 %27 to i64, !dbg !21
  %47 = getelementptr i64, ptr addrspace(1) %2, i64 %46, !dbg !21
  %48 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %45, i1 true) #1, !dbg !22
  %49 = extractvalue { i64, i64 } %48, 0, !dbg !22
  %50 = extractvalue { i64, i64 } %48, 1, !dbg !22
  %51 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %47, i1 true) #1, !dbg !22
  %52 = extractvalue { i64, i64 } %51, 0, !dbg !22
  %53 = extractvalue { i64, i64 } %51, 1, !dbg !22
  %54 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %45, i1 true) #1, !dbg !22
  %55 = extractvalue { i64, i64 } %54, 0, !dbg !22
  %56 = extractvalue { i64, i64 } %54, 1, !dbg !22
  %57 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %47, i1 true) #1, !dbg !22
  %58 = extractvalue { i64, i64 } %57, 0, !dbg !22
  %59 = extractvalue { i64, i64 } %57, 1, !dbg !22
  %60 = sext i32 %30 to i64, !dbg !23
  %61 = getelementptr float, ptr addrspace(1) %5, i64 %60, !dbg !23
  %62 = sext i32 %31 to i64, !dbg !23
  %63 = getelementptr float, ptr addrspace(1) %5, i64 %62, !dbg !23
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 true) #1, !dbg !24
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 true) #1, !dbg !24
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 true) #1, !dbg !24
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 true) #1, !dbg !24
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 true) #1, !dbg !24
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 true) #1, !dbg !24
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 true) #1, !dbg !24
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 true) #1, !dbg !24
  %72 = getelementptr i64, ptr addrspace(1) %6, i64 %32, !dbg !25
  %73 = getelementptr i64, ptr addrspace(1) %6, i64 %34, !dbg !25
  %74 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %72, i1 true) #1, !dbg !26
  %75 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %72, i1 true) #1, !dbg !26
  %76 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %72, i1 true) #1, !dbg !26
  %77 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %72, i1 true) #1, !dbg !26
  %78 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %73, i1 true) #1, !dbg !26
  %79 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %73, i1 true) #1, !dbg !26
  %80 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %73, i1 true) #1, !dbg !26
  %81 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %73, i1 true) #1, !dbg !26
  %82 = getelementptr i64, ptr addrspace(1) %7, i64 %44, !dbg !27
  %83 = getelementptr i64, ptr addrspace(1) %7, i64 %46, !dbg !27
  %84 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %82, i1 true) #1, !dbg !28
  %85 = extractvalue { i64, i64 } %84, 0, !dbg !28
  %86 = extractvalue { i64, i64 } %84, 1, !dbg !28
  %87 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %83, i1 true) #1, !dbg !28
  %88 = extractvalue { i64, i64 } %87, 0, !dbg !28
  %89 = extractvalue { i64, i64 } %87, 1, !dbg !28
  %90 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %82, i1 true) #1, !dbg !28
  %91 = extractvalue { i64, i64 } %90, 0, !dbg !28
  %92 = extractvalue { i64, i64 } %90, 1, !dbg !28
  %93 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %83, i1 true) #1, !dbg !28
  %94 = extractvalue { i64, i64 } %93, 0, !dbg !28
  %95 = extractvalue { i64, i64 } %93, 1, !dbg !28
  %96 = getelementptr float, ptr addrspace(1) %8, i64 %44, !dbg !29
  %97 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %96, i1 true) #1, !dbg !30
  %98 = extractvalue { i32, i32, i32, i32 } %97, 0, !dbg !30
  %99 = extractvalue { i32, i32, i32, i32 } %97, 1, !dbg !30
  %100 = extractvalue { i32, i32, i32, i32 } %97, 2, !dbg !30
  %101 = extractvalue { i32, i32, i32, i32 } %97, 3, !dbg !30
  %102 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %96, i1 true) #1, !dbg !30
  %103 = extractvalue { i32, i32, i32, i32 } %102, 0, !dbg !30
  %104 = extractvalue { i32, i32, i32, i32 } %102, 1, !dbg !30
  %105 = extractvalue { i32, i32, i32, i32 } %102, 2, !dbg !30
  %106 = extractvalue { i32, i32, i32, i32 } %102, 3, !dbg !30
  %107 = getelementptr float, ptr addrspace(1) %9, i64 %32, !dbg !31
  %108 = getelementptr float, ptr addrspace(1) %9, i64 %34, !dbg !31
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %107, i1 true) #1, !dbg !32
  %110 = bitcast i32 %109 to float, !dbg !32
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %107, i1 true) #1, !dbg !32
  %112 = bitcast i32 %111 to float, !dbg !32
  %113 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %107, i1 true) #1, !dbg !32
  %114 = bitcast i32 %113 to float, !dbg !32
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %107, i1 true) #1, !dbg !32
  %116 = bitcast i32 %115 to float, !dbg !32
  %117 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %108, i1 true) #1, !dbg !32
  %118 = bitcast i32 %117 to float, !dbg !32
  %119 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %108, i1 true) #1, !dbg !32
  %120 = bitcast i32 %119 to float, !dbg !32
  %121 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %108, i1 true) #1, !dbg !32
  %122 = bitcast i32 %121 to float, !dbg !32
  %123 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %108, i1 true) #1, !dbg !32
  %124 = bitcast i32 %123 to float, !dbg !32
  %125 = sext i32 %19 to i64, !dbg !33
  %126 = getelementptr float, ptr addrspace(1) %10, i64 %125, !dbg !33
  %127 = sext i32 %21 to i64, !dbg !33
  %128 = getelementptr float, ptr addrspace(1) %10, i64 %127, !dbg !33
  %129 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %126, i1 true) #1, !dbg !34
  %130 = extractvalue { i32, i32, i32, i32 } %129, 0, !dbg !34
  %131 = extractvalue { i32, i32, i32, i32 } %129, 1, !dbg !34
  %132 = extractvalue { i32, i32, i32, i32 } %129, 2, !dbg !34
  %133 = extractvalue { i32, i32, i32, i32 } %129, 3, !dbg !34
  %134 = bitcast i32 %130 to float, !dbg !34
  %135 = bitcast i32 %131 to float, !dbg !34
  %136 = bitcast i32 %132 to float, !dbg !34
  %137 = bitcast i32 %133 to float, !dbg !34
  %138 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %128, i1 true) #1, !dbg !34
  %139 = extractvalue { i32, i32, i32, i32 } %138, 0, !dbg !34
  %140 = extractvalue { i32, i32, i32, i32 } %138, 1, !dbg !34
  %141 = extractvalue { i32, i32, i32, i32 } %138, 2, !dbg !34
  %142 = extractvalue { i32, i32, i32, i32 } %138, 3, !dbg !34
  %143 = bitcast i32 %139 to float, !dbg !34
  %144 = bitcast i32 %140 to float, !dbg !34
  %145 = bitcast i32 %141 to float, !dbg !34
  %146 = bitcast i32 %142 to float, !dbg !34
  %147 = getelementptr float, ptr addrspace(1) %0, i64 %125, !dbg !35
  %148 = getelementptr float, ptr addrspace(1) %0, i64 %127, !dbg !35
  %149 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %147, i1 true) #1, !dbg !36
  %150 = extractvalue { i32, i32, i32, i32 } %149, 0, !dbg !36
  %151 = extractvalue { i32, i32, i32, i32 } %149, 1, !dbg !36
  %152 = extractvalue { i32, i32, i32, i32 } %149, 2, !dbg !36
  %153 = extractvalue { i32, i32, i32, i32 } %149, 3, !dbg !36
  %154 = bitcast i32 %150 to float, !dbg !36
  %155 = bitcast i32 %151 to float, !dbg !36
  %156 = bitcast i32 %152 to float, !dbg !36
  %157 = bitcast i32 %153 to float, !dbg !36
  %158 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %148, i1 true) #1, !dbg !36
  %159 = extractvalue { i32, i32, i32, i32 } %158, 0, !dbg !36
  %160 = extractvalue { i32, i32, i32, i32 } %158, 1, !dbg !36
  %161 = extractvalue { i32, i32, i32, i32 } %158, 2, !dbg !36
  %162 = extractvalue { i32, i32, i32, i32 } %158, 3, !dbg !36
  %163 = bitcast i32 %159 to float, !dbg !36
  %164 = bitcast i32 %160 to float, !dbg !36
  %165 = bitcast i32 %161 to float, !dbg !36
  %166 = bitcast i32 %162 to float, !dbg !36
  %167 = getelementptr float, ptr addrspace(1) %11, i64 %60, !dbg !37
  %168 = getelementptr float, ptr addrspace(1) %11, i64 %62, !dbg !37
  %169 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %167, i1 true) #1, !dbg !38
  %170 = bitcast i32 %169 to float, !dbg !38
  %171 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %167, i1 true) #1, !dbg !38
  %172 = bitcast i32 %171 to float, !dbg !38
  %173 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %167, i1 true) #1, !dbg !38
  %174 = bitcast i32 %173 to float, !dbg !38
  %175 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %167, i1 true) #1, !dbg !38
  %176 = bitcast i32 %175 to float, !dbg !38
  %177 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %168, i1 true) #1, !dbg !38
  %178 = bitcast i32 %177 to float, !dbg !38
  %179 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %168, i1 true) #1, !dbg !38
  %180 = bitcast i32 %179 to float, !dbg !38
  %181 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %168, i1 true) #1, !dbg !38
  %182 = bitcast i32 %181 to float, !dbg !38
  %183 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %168, i1 true) #1, !dbg !38
  %184 = bitcast i32 %183 to float, !dbg !38
  %185 = lshr i64 %36, 59, !dbg !39
  %186 = and i64 %185, 16, !dbg !39
  %187 = add i64 %186, %36, !dbg !39
  %188 = lshr i64 %40, 59, !dbg !39
  %189 = and i64 %188, 16, !dbg !39
  %190 = add i64 %189, %40, !dbg !39
  %191 = lshr i64 %49, 59, !dbg !40
  %192 = and i64 %191, 16, !dbg !40
  %193 = add i64 %192, %49, !dbg !40
  %194 = lshr i64 %50, 59, !dbg !40
  %195 = and i64 %194, 16, !dbg !40
  %196 = add i64 %195, %50, !dbg !40
  %197 = lshr i64 %52, 59, !dbg !40
  %198 = and i64 %197, 16, !dbg !40
  %199 = add i64 %198, %52, !dbg !40
  %200 = lshr i64 %53, 59, !dbg !40
  %201 = and i64 %200, 16, !dbg !40
  %202 = add i64 %201, %53, !dbg !40
  %203 = lshr i64 %55, 59, !dbg !40
  %204 = and i64 %203, 16, !dbg !40
  %205 = add i64 %204, %55, !dbg !40
  %206 = lshr i64 %56, 59, !dbg !40
  %207 = and i64 %206, 16, !dbg !40
  %208 = add i64 %207, %56, !dbg !40
  %209 = lshr i64 %58, 59, !dbg !40
  %210 = and i64 %209, 16, !dbg !40
  %211 = add i64 %210, %58, !dbg !40
  %212 = lshr i64 %59, 59, !dbg !40
  %213 = and i64 %212, 16, !dbg !40
  %214 = add i64 %213, %59, !dbg !40
  %215 = shl i64 %187, 4, !dbg !41
  %216 = shl i64 %190, 4, !dbg !41
  %217 = shl nsw i32 %28, 8, !dbg !42
  %218 = shl nsw i32 %29, 8, !dbg !42
  %219 = sext i32 %217 to i64, !dbg !43
  %220 = sext i32 %218 to i64, !dbg !43
  %221 = add i64 %215, %219, !dbg !44
  %222 = add i64 %221, %193, !dbg !43
  %223 = add i64 %221, %196, !dbg !43
  %224 = add i64 %221, %199, !dbg !43
  %225 = add i64 %221, %202, !dbg !43
  %226 = add i64 %216, %220, !dbg !44
  %227 = add i64 %226, %205, !dbg !43
  %228 = add i64 %226, %208, !dbg !43
  %229 = add i64 %226, %211, !dbg !43
  %230 = add i64 %226, %214, !dbg !43
  %231 = getelementptr float, ptr addrspace(1) %3, i64 %222, !dbg !45
  %232 = getelementptr float, ptr addrspace(1) %3, i64 %223, !dbg !45
  %233 = getelementptr float, ptr addrspace(1) %3, i64 %224, !dbg !45
  %234 = getelementptr float, ptr addrspace(1) %3, i64 %225, !dbg !45
  %235 = getelementptr float, ptr addrspace(1) %3, i64 %227, !dbg !45
  %236 = getelementptr float, ptr addrspace(1) %3, i64 %228, !dbg !45
  %237 = getelementptr float, ptr addrspace(1) %3, i64 %229, !dbg !45
  %238 = getelementptr float, ptr addrspace(1) %3, i64 %230, !dbg !45
  %239 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %231, i1 true) #1, !dbg !46
  %240 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %232, i1 true) #1, !dbg !46
  %241 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %233, i1 true) #1, !dbg !46
  %242 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %234, i1 true) #1, !dbg !46
  %243 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %235, i1 true) #1, !dbg !46
  %244 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %236, i1 true) #1, !dbg !46
  %245 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %237, i1 true) #1, !dbg !46
  %246 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %238, i1 true) #1, !dbg !46
  %247 = getelementptr float, ptr addrspace(1) %4, i64 %222, !dbg !47
  %248 = getelementptr float, ptr addrspace(1) %4, i64 %223, !dbg !47
  %249 = getelementptr float, ptr addrspace(1) %4, i64 %224, !dbg !47
  %250 = getelementptr float, ptr addrspace(1) %4, i64 %225, !dbg !47
  %251 = getelementptr float, ptr addrspace(1) %4, i64 %227, !dbg !47
  %252 = getelementptr float, ptr addrspace(1) %4, i64 %228, !dbg !47
  %253 = getelementptr float, ptr addrspace(1) %4, i64 %229, !dbg !47
  %254 = getelementptr float, ptr addrspace(1) %4, i64 %230, !dbg !47
  %255 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %247, i1 true) #1, !dbg !48
  %256 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %248, i1 true) #1, !dbg !48
  %257 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %249, i1 true) #1, !dbg !48
  %258 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %250, i1 true) #1, !dbg !48
  %259 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %251, i1 true) #1, !dbg !48
  %260 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %252, i1 true) #1, !dbg !48
  %261 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %253, i1 true) #1, !dbg !48
  %262 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %254, i1 true) #1, !dbg !48
  %263 = lshr i64 %74, 59, !dbg !49
  %264 = and i64 %263, 16, !dbg !49
  %265 = add i64 %264, %74, !dbg !49
  %266 = lshr i64 %78, 59, !dbg !49
  %267 = and i64 %266, 16, !dbg !49
  %268 = add i64 %267, %78, !dbg !49
  %269 = shl i64 %265, 4, !dbg !50
  %270 = shl i64 %268, 4, !dbg !50
  %271 = add i64 %269, %219, !dbg !51
  %272 = add i64 %271, %193, !dbg !52
  %273 = add i64 %271, %196, !dbg !52
  %274 = add i64 %271, %199, !dbg !52
  %275 = add i64 %271, %202, !dbg !52
  %276 = add i64 %270, %220, !dbg !51
  %277 = add i64 %276, %205, !dbg !52
  %278 = add i64 %276, %208, !dbg !52
  %279 = add i64 %276, %211, !dbg !52
  %280 = add i64 %276, %214, !dbg !52
  %281 = getelementptr float, ptr addrspace(1) %3, i64 %272, !dbg !53
  %282 = getelementptr float, ptr addrspace(1) %3, i64 %273, !dbg !53
  %283 = getelementptr float, ptr addrspace(1) %3, i64 %274, !dbg !53
  %284 = getelementptr float, ptr addrspace(1) %3, i64 %275, !dbg !53
  %285 = getelementptr float, ptr addrspace(1) %3, i64 %277, !dbg !53
  %286 = getelementptr float, ptr addrspace(1) %3, i64 %278, !dbg !53
  %287 = getelementptr float, ptr addrspace(1) %3, i64 %279, !dbg !53
  %288 = getelementptr float, ptr addrspace(1) %3, i64 %280, !dbg !53
  %289 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %281, i1 true) #1, !dbg !54
  %290 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %282, i1 true) #1, !dbg !54
  %291 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %283, i1 true) #1, !dbg !54
  %292 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %284, i1 true) #1, !dbg !54
  %293 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %285, i1 true) #1, !dbg !54
  %294 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %286, i1 true) #1, !dbg !54
  %295 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %287, i1 true) #1, !dbg !54
  %296 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %288, i1 true) #1, !dbg !54
  %297 = getelementptr float, ptr addrspace(1) %4, i64 %272, !dbg !55
  %298 = getelementptr float, ptr addrspace(1) %4, i64 %273, !dbg !55
  %299 = getelementptr float, ptr addrspace(1) %4, i64 %274, !dbg !55
  %300 = getelementptr float, ptr addrspace(1) %4, i64 %275, !dbg !55
  %301 = getelementptr float, ptr addrspace(1) %4, i64 %277, !dbg !55
  %302 = getelementptr float, ptr addrspace(1) %4, i64 %278, !dbg !55
  %303 = getelementptr float, ptr addrspace(1) %4, i64 %279, !dbg !55
  %304 = getelementptr float, ptr addrspace(1) %4, i64 %280, !dbg !55
  %305 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %297, i1 true) #1, !dbg !56
  %306 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %298, i1 true) #1, !dbg !56
  %307 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %299, i1 true) #1, !dbg !56
  %308 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %300, i1 true) #1, !dbg !56
  %309 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %301, i1 true) #1, !dbg !56
  %310 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %302, i1 true) #1, !dbg !56
  %311 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %303, i1 true) #1, !dbg !56
  %312 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %304, i1 true) #1, !dbg !56
  %313 = lshr i64 %85, 59, !dbg !57
  %314 = and i64 %313, 16, !dbg !57
  %315 = add i64 %314, %85, !dbg !57
  %316 = lshr i64 %86, 59, !dbg !57
  %317 = and i64 %316, 16, !dbg !57
  %318 = add i64 %317, %86, !dbg !57
  %319 = lshr i64 %88, 59, !dbg !57
  %320 = and i64 %319, 16, !dbg !57
  %321 = add i64 %320, %88, !dbg !57
  %322 = lshr i64 %89, 59, !dbg !57
  %323 = and i64 %322, 16, !dbg !57
  %324 = add i64 %323, %89, !dbg !57
  %325 = lshr i64 %91, 59, !dbg !57
  %326 = and i64 %325, 16, !dbg !57
  %327 = add i64 %326, %91, !dbg !57
  %328 = lshr i64 %92, 59, !dbg !57
  %329 = and i64 %328, 16, !dbg !57
  %330 = add i64 %329, %92, !dbg !57
  %331 = lshr i64 %94, 59, !dbg !57
  %332 = and i64 %331, 16, !dbg !57
  %333 = add i64 %332, %94, !dbg !57
  %334 = lshr i64 %95, 59, !dbg !57
  %335 = and i64 %334, 16, !dbg !57
  %336 = add i64 %335, %95, !dbg !57
  %337 = add i64 %271, %315, !dbg !58
  %338 = add i64 %271, %318, !dbg !58
  %339 = add i64 %271, %321, !dbg !58
  %340 = add i64 %271, %324, !dbg !58
  %341 = add i64 %276, %327, !dbg !58
  %342 = add i64 %276, %330, !dbg !58
  %343 = add i64 %276, %333, !dbg !58
  %344 = add i64 %276, %336, !dbg !58
  %345 = getelementptr float, ptr addrspace(1) %3, i64 %337, !dbg !59
  %346 = getelementptr float, ptr addrspace(1) %3, i64 %338, !dbg !59
  %347 = getelementptr float, ptr addrspace(1) %3, i64 %339, !dbg !59
  %348 = getelementptr float, ptr addrspace(1) %3, i64 %340, !dbg !59
  %349 = getelementptr float, ptr addrspace(1) %3, i64 %341, !dbg !59
  %350 = getelementptr float, ptr addrspace(1) %3, i64 %342, !dbg !59
  %351 = getelementptr float, ptr addrspace(1) %3, i64 %343, !dbg !59
  %352 = getelementptr float, ptr addrspace(1) %3, i64 %344, !dbg !59
  %353 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %345, i1 true) #1, !dbg !60
  %354 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %346, i1 true) #1, !dbg !60
  %355 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %347, i1 true) #1, !dbg !60
  %356 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %348, i1 true) #1, !dbg !60
  %357 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %349, i1 true) #1, !dbg !60
  %358 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %350, i1 true) #1, !dbg !60
  %359 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %351, i1 true) #1, !dbg !60
  %360 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %352, i1 true) #1, !dbg !60
  %361 = getelementptr float, ptr addrspace(1) %4, i64 %337, !dbg !61
  %362 = getelementptr float, ptr addrspace(1) %4, i64 %338, !dbg !61
  %363 = getelementptr float, ptr addrspace(1) %4, i64 %339, !dbg !61
  %364 = getelementptr float, ptr addrspace(1) %4, i64 %340, !dbg !61
  %365 = getelementptr float, ptr addrspace(1) %4, i64 %341, !dbg !61
  %366 = getelementptr float, ptr addrspace(1) %4, i64 %342, !dbg !61
  %367 = getelementptr float, ptr addrspace(1) %4, i64 %343, !dbg !61
  %368 = getelementptr float, ptr addrspace(1) %4, i64 %344, !dbg !61
  %369 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %361, i1 true) #1, !dbg !62
  %370 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %362, i1 true) #1, !dbg !62
  %371 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %363, i1 true) #1, !dbg !62
  %372 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %364, i1 true) #1, !dbg !62
  %373 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %365, i1 true) #1, !dbg !62
  %374 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %366, i1 true) #1, !dbg !62
  %375 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %367, i1 true) #1, !dbg !62
  %376 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %368, i1 true) #1, !dbg !62
  %377 = add i64 %221, %315, !dbg !63
  %378 = add i64 %221, %318, !dbg !63
  %379 = add i64 %221, %321, !dbg !63
  %380 = add i64 %221, %324, !dbg !63
  %381 = add i64 %226, %327, !dbg !63
  %382 = add i64 %226, %330, !dbg !63
  %383 = add i64 %226, %333, !dbg !63
  %384 = add i64 %226, %336, !dbg !63
  %385 = getelementptr float, ptr addrspace(1) %3, i64 %377, !dbg !64
  %386 = getelementptr float, ptr addrspace(1) %3, i64 %378, !dbg !64
  %387 = getelementptr float, ptr addrspace(1) %3, i64 %379, !dbg !64
  %388 = getelementptr float, ptr addrspace(1) %3, i64 %380, !dbg !64
  %389 = getelementptr float, ptr addrspace(1) %3, i64 %381, !dbg !64
  %390 = getelementptr float, ptr addrspace(1) %3, i64 %382, !dbg !64
  %391 = getelementptr float, ptr addrspace(1) %3, i64 %383, !dbg !64
  %392 = getelementptr float, ptr addrspace(1) %3, i64 %384, !dbg !64
  %393 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %385, i1 true) #1, !dbg !65
  %394 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %386, i1 true) #1, !dbg !65
  %395 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %387, i1 true) #1, !dbg !65
  %396 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %388, i1 true) #1, !dbg !65
  %397 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %389, i1 true) #1, !dbg !65
  %398 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %390, i1 true) #1, !dbg !65
  %399 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %391, i1 true) #1, !dbg !65
  %400 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %392, i1 true) #1, !dbg !65
  %401 = getelementptr float, ptr addrspace(1) %4, i64 %377, !dbg !66
  %402 = getelementptr float, ptr addrspace(1) %4, i64 %378, !dbg !66
  %403 = getelementptr float, ptr addrspace(1) %4, i64 %379, !dbg !66
  %404 = getelementptr float, ptr addrspace(1) %4, i64 %380, !dbg !66
  %405 = getelementptr float, ptr addrspace(1) %4, i64 %381, !dbg !66
  %406 = getelementptr float, ptr addrspace(1) %4, i64 %382, !dbg !66
  %407 = getelementptr float, ptr addrspace(1) %4, i64 %383, !dbg !66
  %408 = getelementptr float, ptr addrspace(1) %4, i64 %384, !dbg !66
  %409 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %401, i1 true) #1, !dbg !67
  %410 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %402, i1 true) #1, !dbg !67
  %411 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %403, i1 true) #1, !dbg !67
  %412 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %404, i1 true) #1, !dbg !67
  %413 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %405, i1 true) #1, !dbg !67
  %414 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %406, i1 true) #1, !dbg !67
  %415 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %407, i1 true) #1, !dbg !67
  %416 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %408, i1 true) #1, !dbg !67
  %417 = insertelement <2 x i32> poison, i32 %239, i64 0, !dbg !46
  %418 = insertelement <2 x i32> %417, i32 %289, i64 1, !dbg !46
  %419 = bitcast <2 x i32> %418 to <2 x float>, !dbg !46
  %420 = insertelement <2 x i32> poison, i32 %255, i64 0, !dbg !48
  %421 = insertelement <2 x i32> %420, i32 %305, i64 1, !dbg !48
  %422 = bitcast <2 x i32> %421 to <2 x float>, !dbg !48
  %423 = insertelement <2 x i32> poison, i32 %64, i64 0, !dbg !68
  %424 = bitcast <2 x i32> %423 to <2 x float>, !dbg !68
  %425 = shufflevector <2 x float> %424, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !68
  %426 = fadd <2 x float> %425, %422, !dbg !68
  %427 = fadd <2 x float> %426, %419, !dbg !69
  %428 = insertelement <2 x i32> poison, i32 %393, i64 0, !dbg !65
  %429 = insertelement <2 x i32> %428, i32 %353, i64 1, !dbg !65
  %430 = bitcast <2 x i32> %429 to <2 x float>, !dbg !65
  %431 = insertelement <2 x i32> poison, i32 %409, i64 0, !dbg !67
  %432 = insertelement <2 x i32> %431, i32 %369, i64 1, !dbg !67
  %433 = bitcast <2 x i32> %432 to <2 x float>, !dbg !67
  %434 = fadd <2 x float> %425, %433, !dbg !70
  %435 = fadd <2 x float> %434, %430, !dbg !71
  %436 = fsub <2 x float> %435, %427, !dbg !72
  %437 = insertelement <2 x i32> poison, i32 %98, i64 0, !dbg !73
  %438 = bitcast <2 x i32> %437 to <2 x float>, !dbg !73
  %439 = shufflevector <2 x float> %438, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !73
  %440 = fmul <2 x float> %436, %439, !dbg !73
  %441 = fadd <2 x float> %427, %440, !dbg !74
  %442 = insertelement <2 x i32> poison, i32 %240, i64 0, !dbg !46
  %443 = insertelement <2 x i32> %442, i32 %290, i64 1, !dbg !46
  %444 = bitcast <2 x i32> %443 to <2 x float>, !dbg !46
  %445 = insertelement <2 x i32> poison, i32 %256, i64 0, !dbg !48
  %446 = insertelement <2 x i32> %445, i32 %306, i64 1, !dbg !48
  %447 = bitcast <2 x i32> %446 to <2 x float>, !dbg !48
  %448 = insertelement <2 x i32> poison, i32 %65, i64 0, !dbg !68
  %449 = bitcast <2 x i32> %448 to <2 x float>, !dbg !68
  %450 = shufflevector <2 x float> %449, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !68
  %451 = fadd <2 x float> %450, %447, !dbg !68
  %452 = fadd <2 x float> %451, %444, !dbg !69
  %453 = insertelement <2 x i32> poison, i32 %394, i64 0, !dbg !65
  %454 = insertelement <2 x i32> %453, i32 %354, i64 1, !dbg !65
  %455 = bitcast <2 x i32> %454 to <2 x float>, !dbg !65
  %456 = insertelement <2 x i32> poison, i32 %410, i64 0, !dbg !67
  %457 = insertelement <2 x i32> %456, i32 %370, i64 1, !dbg !67
  %458 = bitcast <2 x i32> %457 to <2 x float>, !dbg !67
  %459 = fadd <2 x float> %450, %458, !dbg !70
  %460 = fadd <2 x float> %459, %455, !dbg !71
  %461 = fsub <2 x float> %460, %452, !dbg !72
  %462 = insertelement <2 x i32> poison, i32 %99, i64 0, !dbg !73
  %463 = bitcast <2 x i32> %462 to <2 x float>, !dbg !73
  %464 = shufflevector <2 x float> %463, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !73
  %465 = fmul <2 x float> %461, %464, !dbg !73
  %466 = fadd <2 x float> %452, %465, !dbg !74
  %467 = insertelement <2 x i32> poison, i32 %241, i64 0, !dbg !46
  %468 = insertelement <2 x i32> %467, i32 %291, i64 1, !dbg !46
  %469 = bitcast <2 x i32> %468 to <2 x float>, !dbg !46
  %470 = insertelement <2 x i32> poison, i32 %257, i64 0, !dbg !48
  %471 = insertelement <2 x i32> %470, i32 %307, i64 1, !dbg !48
  %472 = bitcast <2 x i32> %471 to <2 x float>, !dbg !48
  %473 = insertelement <2 x i32> poison, i32 %66, i64 0, !dbg !68
  %474 = bitcast <2 x i32> %473 to <2 x float>, !dbg !68
  %475 = shufflevector <2 x float> %474, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !68
  %476 = fadd <2 x float> %475, %472, !dbg !68
  %477 = fadd <2 x float> %476, %469, !dbg !69
  %478 = insertelement <2 x i32> poison, i32 %395, i64 0, !dbg !65
  %479 = insertelement <2 x i32> %478, i32 %355, i64 1, !dbg !65
  %480 = bitcast <2 x i32> %479 to <2 x float>, !dbg !65
  %481 = insertelement <2 x i32> poison, i32 %411, i64 0, !dbg !67
  %482 = insertelement <2 x i32> %481, i32 %371, i64 1, !dbg !67
  %483 = bitcast <2 x i32> %482 to <2 x float>, !dbg !67
  %484 = fadd <2 x float> %475, %483, !dbg !70
  %485 = fadd <2 x float> %484, %480, !dbg !71
  %486 = fsub <2 x float> %485, %477, !dbg !72
  %487 = insertelement <2 x i32> poison, i32 %100, i64 0, !dbg !73
  %488 = bitcast <2 x i32> %487 to <2 x float>, !dbg !73
  %489 = shufflevector <2 x float> %488, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !73
  %490 = fmul <2 x float> %486, %489, !dbg !73
  %491 = fadd <2 x float> %477, %490, !dbg !74
  %492 = insertelement <2 x i32> poison, i32 %242, i64 0, !dbg !46
  %493 = insertelement <2 x i32> %492, i32 %292, i64 1, !dbg !46
  %494 = bitcast <2 x i32> %493 to <2 x float>, !dbg !46
  %495 = insertelement <2 x i32> poison, i32 %258, i64 0, !dbg !48
  %496 = insertelement <2 x i32> %495, i32 %308, i64 1, !dbg !48
  %497 = bitcast <2 x i32> %496 to <2 x float>, !dbg !48
  %498 = insertelement <2 x i32> poison, i32 %67, i64 0, !dbg !68
  %499 = bitcast <2 x i32> %498 to <2 x float>, !dbg !68
  %500 = shufflevector <2 x float> %499, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !68
  %501 = fadd <2 x float> %500, %497, !dbg !68
  %502 = fadd <2 x float> %501, %494, !dbg !69
  %503 = insertelement <2 x i32> poison, i32 %396, i64 0, !dbg !65
  %504 = insertelement <2 x i32> %503, i32 %356, i64 1, !dbg !65
  %505 = bitcast <2 x i32> %504 to <2 x float>, !dbg !65
  %506 = insertelement <2 x i32> poison, i32 %412, i64 0, !dbg !67
  %507 = insertelement <2 x i32> %506, i32 %372, i64 1, !dbg !67
  %508 = bitcast <2 x i32> %507 to <2 x float>, !dbg !67
  %509 = fadd <2 x float> %500, %508, !dbg !70
  %510 = fadd <2 x float> %509, %505, !dbg !71
  %511 = fsub <2 x float> %510, %502, !dbg !72
  %512 = insertelement <2 x i32> poison, i32 %101, i64 0, !dbg !73
  %513 = bitcast <2 x i32> %512 to <2 x float>, !dbg !73
  %514 = shufflevector <2 x float> %513, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !73
  %515 = fmul <2 x float> %511, %514, !dbg !73
  %516 = fadd <2 x float> %502, %515, !dbg !74
  %517 = insertelement <2 x i32> poison, i32 %243, i64 0, !dbg !46
  %518 = insertelement <2 x i32> %517, i32 %293, i64 1, !dbg !46
  %519 = bitcast <2 x i32> %518 to <2 x float>, !dbg !46
  %520 = insertelement <2 x i32> poison, i32 %259, i64 0, !dbg !48
  %521 = insertelement <2 x i32> %520, i32 %309, i64 1, !dbg !48
  %522 = bitcast <2 x i32> %521 to <2 x float>, !dbg !48
  %523 = insertelement <2 x i32> poison, i32 %68, i64 0, !dbg !68
  %524 = bitcast <2 x i32> %523 to <2 x float>, !dbg !68
  %525 = shufflevector <2 x float> %524, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !68
  %526 = fadd <2 x float> %525, %522, !dbg !68
  %527 = fadd <2 x float> %526, %519, !dbg !69
  %528 = insertelement <2 x i32> poison, i32 %397, i64 0, !dbg !65
  %529 = insertelement <2 x i32> %528, i32 %357, i64 1, !dbg !65
  %530 = bitcast <2 x i32> %529 to <2 x float>, !dbg !65
  %531 = insertelement <2 x i32> poison, i32 %413, i64 0, !dbg !67
  %532 = insertelement <2 x i32> %531, i32 %373, i64 1, !dbg !67
  %533 = bitcast <2 x i32> %532 to <2 x float>, !dbg !67
  %534 = fadd <2 x float> %525, %533, !dbg !70
  %535 = fadd <2 x float> %534, %530, !dbg !71
  %536 = fsub <2 x float> %535, %527, !dbg !72
  %537 = insertelement <2 x i32> poison, i32 %103, i64 0, !dbg !73
  %538 = bitcast <2 x i32> %537 to <2 x float>, !dbg !73
  %539 = shufflevector <2 x float> %538, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !73
  %540 = fmul <2 x float> %536, %539, !dbg !73
  %541 = fadd <2 x float> %527, %540, !dbg !74
  %542 = insertelement <2 x i32> poison, i32 %244, i64 0, !dbg !46
  %543 = insertelement <2 x i32> %542, i32 %294, i64 1, !dbg !46
  %544 = bitcast <2 x i32> %543 to <2 x float>, !dbg !46
  %545 = insertelement <2 x i32> poison, i32 %260, i64 0, !dbg !48
  %546 = insertelement <2 x i32> %545, i32 %310, i64 1, !dbg !48
  %547 = bitcast <2 x i32> %546 to <2 x float>, !dbg !48
  %548 = insertelement <2 x i32> poison, i32 %69, i64 0, !dbg !68
  %549 = bitcast <2 x i32> %548 to <2 x float>, !dbg !68
  %550 = shufflevector <2 x float> %549, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !68
  %551 = fadd <2 x float> %550, %547, !dbg !68
  %552 = fadd <2 x float> %551, %544, !dbg !69
  %553 = insertelement <2 x i32> poison, i32 %398, i64 0, !dbg !65
  %554 = insertelement <2 x i32> %553, i32 %358, i64 1, !dbg !65
  %555 = bitcast <2 x i32> %554 to <2 x float>, !dbg !65
  %556 = insertelement <2 x i32> poison, i32 %414, i64 0, !dbg !67
  %557 = insertelement <2 x i32> %556, i32 %374, i64 1, !dbg !67
  %558 = bitcast <2 x i32> %557 to <2 x float>, !dbg !67
  %559 = fadd <2 x float> %550, %558, !dbg !70
  %560 = fadd <2 x float> %559, %555, !dbg !71
  %561 = fsub <2 x float> %560, %552, !dbg !72
  %562 = insertelement <2 x i32> poison, i32 %104, i64 0, !dbg !73
  %563 = bitcast <2 x i32> %562 to <2 x float>, !dbg !73
  %564 = shufflevector <2 x float> %563, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !73
  %565 = fmul <2 x float> %561, %564, !dbg !73
  %566 = fadd <2 x float> %552, %565, !dbg !74
  %567 = insertelement <2 x i32> poison, i32 %245, i64 0, !dbg !46
  %568 = insertelement <2 x i32> %567, i32 %295, i64 1, !dbg !46
  %569 = bitcast <2 x i32> %568 to <2 x float>, !dbg !46
  %570 = insertelement <2 x i32> poison, i32 %261, i64 0, !dbg !48
  %571 = insertelement <2 x i32> %570, i32 %311, i64 1, !dbg !48
  %572 = bitcast <2 x i32> %571 to <2 x float>, !dbg !48
  %573 = insertelement <2 x i32> poison, i32 %70, i64 0, !dbg !68
  %574 = bitcast <2 x i32> %573 to <2 x float>, !dbg !68
  %575 = shufflevector <2 x float> %574, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !68
  %576 = fadd <2 x float> %575, %572, !dbg !68
  %577 = fadd <2 x float> %576, %569, !dbg !69
  %578 = insertelement <2 x i32> poison, i32 %399, i64 0, !dbg !65
  %579 = insertelement <2 x i32> %578, i32 %359, i64 1, !dbg !65
  %580 = bitcast <2 x i32> %579 to <2 x float>, !dbg !65
  %581 = insertelement <2 x i32> poison, i32 %415, i64 0, !dbg !67
  %582 = insertelement <2 x i32> %581, i32 %375, i64 1, !dbg !67
  %583 = bitcast <2 x i32> %582 to <2 x float>, !dbg !67
  %584 = fadd <2 x float> %575, %583, !dbg !70
  %585 = fadd <2 x float> %584, %580, !dbg !71
  %586 = fsub <2 x float> %585, %577, !dbg !72
  %587 = insertelement <2 x i32> poison, i32 %105, i64 0, !dbg !73
  %588 = bitcast <2 x i32> %587 to <2 x float>, !dbg !73
  %589 = shufflevector <2 x float> %588, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !73
  %590 = fmul <2 x float> %586, %589, !dbg !73
  %591 = fadd <2 x float> %577, %590, !dbg !74
  %592 = insertelement <2 x i32> poison, i32 %246, i64 0, !dbg !46
  %593 = insertelement <2 x i32> %592, i32 %296, i64 1, !dbg !46
  %594 = bitcast <2 x i32> %593 to <2 x float>, !dbg !46
  %595 = insertelement <2 x i32> poison, i32 %262, i64 0, !dbg !48
  %596 = insertelement <2 x i32> %595, i32 %312, i64 1, !dbg !48
  %597 = bitcast <2 x i32> %596 to <2 x float>, !dbg !48
  %598 = insertelement <2 x i32> poison, i32 %71, i64 0, !dbg !68
  %599 = bitcast <2 x i32> %598 to <2 x float>, !dbg !68
  %600 = shufflevector <2 x float> %599, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !68
  %601 = fadd <2 x float> %600, %597, !dbg !68
  %602 = fadd <2 x float> %601, %594, !dbg !69
  %603 = insertelement <2 x i32> poison, i32 %400, i64 0, !dbg !65
  %604 = insertelement <2 x i32> %603, i32 %360, i64 1, !dbg !65
  %605 = bitcast <2 x i32> %604 to <2 x float>, !dbg !65
  %606 = insertelement <2 x i32> poison, i32 %416, i64 0, !dbg !67
  %607 = insertelement <2 x i32> %606, i32 %376, i64 1, !dbg !67
  %608 = bitcast <2 x i32> %607 to <2 x float>, !dbg !67
  %609 = fadd <2 x float> %600, %608, !dbg !70
  %610 = fadd <2 x float> %609, %605, !dbg !71
  %611 = fsub <2 x float> %610, %602, !dbg !72
  %612 = insertelement <2 x i32> poison, i32 %106, i64 0, !dbg !73
  %613 = bitcast <2 x i32> %612 to <2 x float>, !dbg !73
  %614 = shufflevector <2 x float> %613, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !73
  %615 = fmul <2 x float> %611, %614, !dbg !73
  %616 = fadd <2 x float> %602, %615, !dbg !74
  %617 = extractelement <2 x float> %441, i64 0, !dbg !75
  %618 = extractelement <2 x float> %441, i64 1, !dbg !76
  %619 = fsub float %617, %618, !dbg !75
  %620 = extractelement <2 x float> %466, i64 0, !dbg !75
  %621 = extractelement <2 x float> %466, i64 1, !dbg !76
  %622 = fsub float %620, %621, !dbg !75
  %623 = extractelement <2 x float> %491, i64 0, !dbg !75
  %624 = extractelement <2 x float> %491, i64 1, !dbg !76
  %625 = fsub float %623, %624, !dbg !75
  %626 = extractelement <2 x float> %516, i64 0, !dbg !75
  %627 = extractelement <2 x float> %516, i64 1, !dbg !76
  %628 = fsub float %626, %627, !dbg !75
  %629 = extractelement <2 x float> %541, i64 0, !dbg !75
  %630 = extractelement <2 x float> %541, i64 1, !dbg !76
  %631 = fsub float %629, %630, !dbg !75
  %632 = extractelement <2 x float> %566, i64 0, !dbg !75
  %633 = extractelement <2 x float> %566, i64 1, !dbg !76
  %634 = fsub float %632, %633, !dbg !75
  %635 = extractelement <2 x float> %591, i64 0, !dbg !75
  %636 = extractelement <2 x float> %591, i64 1, !dbg !76
  %637 = fsub float %635, %636, !dbg !75
  %638 = extractelement <2 x float> %616, i64 0, !dbg !75
  %639 = extractelement <2 x float> %616, i64 1, !dbg !76
  %640 = fsub float %638, %639, !dbg !75
  %641 = fmul float %619, %110, !dbg !77
  %642 = fmul float %622, %112, !dbg !77
  %643 = fmul float %625, %114, !dbg !77
  %644 = fmul float %628, %116, !dbg !77
  %645 = fmul float %631, %118, !dbg !77
  %646 = fmul float %634, %120, !dbg !77
  %647 = fmul float %637, %122, !dbg !77
  %648 = fmul float %640, %124, !dbg !77
  %649 = fadd float %154, %170, !dbg !78
  %650 = fadd float %155, %172, !dbg !78
  %651 = fadd float %156, %174, !dbg !78
  %652 = fadd float %157, %176, !dbg !78
  %653 = fadd float %163, %178, !dbg !78
  %654 = fadd float %164, %180, !dbg !78
  %655 = fadd float %165, %182, !dbg !78
  %656 = fadd float %166, %184, !dbg !78
  %657 = fadd float %649, %134, !dbg !79
  %658 = fadd float %650, %135, !dbg !79
  %659 = fadd float %651, %136, !dbg !79
  %660 = fadd float %652, %137, !dbg !79
  %661 = fadd float %653, %143, !dbg !79
  %662 = fadd float %654, %144, !dbg !79
  %663 = fadd float %655, %145, !dbg !79
  %664 = fadd float %656, %146, !dbg !79
  %665 = fadd float %618, %641, !dbg !76
  %666 = fadd float %621, %642, !dbg !76
  %667 = fadd float %624, %643, !dbg !76
  %668 = fadd float %627, %644, !dbg !76
  %669 = fadd float %630, %645, !dbg !76
  %670 = fadd float %633, %646, !dbg !76
  %671 = fadd float %636, %647, !dbg !76
  %672 = fadd float %639, %648, !dbg !76
  %673 = fadd float %657, %665, !dbg !80
  %674 = fadd float %658, %666, !dbg !80
  %675 = fadd float %659, %667, !dbg !80
  %676 = fadd float %660, %668, !dbg !80
  %677 = fadd float %661, %669, !dbg !80
  %678 = fadd float %662, %670, !dbg !80
  %679 = fadd float %663, %671, !dbg !80
  %680 = fadd float %664, %672, !dbg !80
  %681 = bitcast float %673 to i32, !dbg !81
  %682 = bitcast float %674 to i32, !dbg !81
  %683 = bitcast float %675 to i32, !dbg !81
  %684 = bitcast float %676 to i32, !dbg !81
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %681, i32 %682, i32 %683, i32 %684, ptr addrspace(1) %147, i1 true) #1, !dbg !81
  %685 = bitcast float %677 to i32, !dbg !81
  %686 = bitcast float %678 to i32, !dbg !81
  %687 = bitcast float %679 to i32, !dbg !81
  %688 = bitcast float %680 to i32, !dbg !81
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %685, i32 %686, i32 %687, i32 %688, ptr addrspace(1) %148, i1 true) #1, !dbg !81
  ret void, !dbg !82
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cpjxtjxo3pvis2cu4nwj7uq37nuw3ooc2qde2el6c4ctiefzrbci.py", directory: "inductor_cache/pj")
!4 = !{ptr @triton_poi_fused__unsafe_index_add_convolution_mul_sub_8, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__unsafe_index_add_convolution_mul_sub_8, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__unsafe_index_add_convolution_mul_sub_8", linkageName: "triton_poi_fused__unsafe_index_add_convolution_mul_sub_8", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 27, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 27, column: 29, scope: !7)
!19 = !DILocation(line: 29, column: 30, scope: !7)
!20 = !DILocation(line: 29, column: 35, scope: !7)
!21 = !DILocation(line: 30, column: 30, scope: !7)
!22 = !DILocation(line: 30, column: 35, scope: !7)
!23 = !DILocation(line: 31, column: 31, scope: !7)
!24 = !DILocation(line: 31, column: 36, scope: !7)
!25 = !DILocation(line: 32, column: 31, scope: !7)
!26 = !DILocation(line: 32, column: 36, scope: !7)
!27 = !DILocation(line: 33, column: 31, scope: !7)
!28 = !DILocation(line: 33, column: 36, scope: !7)
!29 = !DILocation(line: 34, column: 31, scope: !7)
!30 = !DILocation(line: 34, column: 36, scope: !7)
!31 = !DILocation(line: 35, column: 31, scope: !7)
!32 = !DILocation(line: 35, column: 36, scope: !7)
!33 = !DILocation(line: 36, column: 31, scope: !7)
!34 = !DILocation(line: 36, column: 36, scope: !7)
!35 = !DILocation(line: 37, column: 35, scope: !7)
!36 = !DILocation(line: 37, column: 40, scope: !7)
!37 = !DILocation(line: 38, column: 32, scope: !7)
!38 = !DILocation(line: 38, column: 37, scope: !7)
!39 = !DILocation(line: 42, column: 32, scope: !7)
!40 = !DILocation(line: 45, column: 32, scope: !7)
!41 = !DILocation(line: 46, column: 40, scope: !7)
!42 = !DILocation(line: 46, column: 51, scope: !7)
!43 = !DILocation(line: 46, column: 47, scope: !7)
!44 = !DILocation(line: 46, column: 37, scope: !7)
!45 = !DILocation(line: 46, column: 30, scope: !7)
!46 = !DILocation(line: 46, column: 56, scope: !7)
!47 = !DILocation(line: 47, column: 31, scope: !7)
!48 = !DILocation(line: 47, column: 57, scope: !7)
!49 = !DILocation(line: 54, column: 35, scope: !7)
!50 = !DILocation(line: 55, column: 41, scope: !7)
!51 = !DILocation(line: 55, column: 38, scope: !7)
!52 = !DILocation(line: 55, column: 49, scope: !7)
!53 = !DILocation(line: 55, column: 31, scope: !7)
!54 = !DILocation(line: 55, column: 58, scope: !7)
!55 = !DILocation(line: 56, column: 31, scope: !7)
!56 = !DILocation(line: 56, column: 58, scope: !7)
!57 = !DILocation(line: 62, column: 35, scope: !7)
!58 = !DILocation(line: 63, column: 50, scope: !7)
!59 = !DILocation(line: 63, column: 31, scope: !7)
!60 = !DILocation(line: 63, column: 59, scope: !7)
!61 = !DILocation(line: 64, column: 31, scope: !7)
!62 = !DILocation(line: 64, column: 59, scope: !7)
!63 = !DILocation(line: 71, column: 49, scope: !7)
!64 = !DILocation(line: 71, column: 31, scope: !7)
!65 = !DILocation(line: 71, column: 58, scope: !7)
!66 = !DILocation(line: 72, column: 31, scope: !7)
!67 = !DILocation(line: 72, column: 58, scope: !7)
!68 = !DILocation(line: 48, column: 20, scope: !7)
!69 = !DILocation(line: 51, column: 19, scope: !7)
!70 = !DILocation(line: 73, column: 20, scope: !7)
!71 = !DILocation(line: 75, column: 20, scope: !7)
!72 = !DILocation(line: 76, column: 20, scope: !7)
!73 = !DILocation(line: 77, column: 20, scope: !7)
!74 = !DILocation(line: 78, column: 20, scope: !7)
!75 = !DILocation(line: 79, column: 20, scope: !7)
!76 = !DILocation(line: 84, column: 20, scope: !7)
!77 = !DILocation(line: 80, column: 20, scope: !7)
!78 = !DILocation(line: 81, column: 20, scope: !7)
!79 = !DILocation(line: 83, column: 20, scope: !7)
!80 = !DILocation(line: 85, column: 20, scope: !7)
!81 = !DILocation(line: 86, column: 40, scope: !7)
!82 = !DILocation(line: 86, column: 4, scope: !7)
