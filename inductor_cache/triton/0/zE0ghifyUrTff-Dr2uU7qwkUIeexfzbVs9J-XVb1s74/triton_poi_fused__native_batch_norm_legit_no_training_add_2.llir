; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, i32 %11) local_unnamed_addr !dbg !7 {
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %14 = shl i32 %13, 6, !dbg !11
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %16 = shl i32 %15, 1, !dbg !12
  %17 = and i32 %16, 62, !dbg !12
  %18 = or disjoint i32 %14, %17, !dbg !13
  %19 = icmp slt i32 %18, 64, !dbg !14
  %20 = sext i32 %18 to i64, !dbg !15
  %21 = getelementptr float, ptr addrspace(1) %0, i64 %20, !dbg !15
  %22 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %21, i1 %19) #3, !dbg !16
  %23 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %1, i1 true) #3, !dbg !17
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %2, i1 true) #3, !dbg !18
  %25 = bitcast i32 %24 to float, !dbg !18
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %3, i1 true) #3, !dbg !19
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %4, i1 true) #3, !dbg !20
  %28 = getelementptr float, ptr addrspace(1) %5, i64 %20, !dbg !21
  %29 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %28, i1 %19) #3, !dbg !22
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %6, i1 true) #3, !dbg !23
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %7, i1 true) #3, !dbg !24
  %32 = bitcast i32 %31 to float, !dbg !24
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %8, i1 true) #3, !dbg !25
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %9, i1 true) #3, !dbg !26
  %35 = fadd float %25, 0x3EE4F8B580000000, !dbg !27
  %36 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i = icmp eq i32 %36, 0, !dbg !28
  %37 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i = icmp eq i32 %37, 0, !dbg !28
  br i1 %.not.i, label %43, label %38, !dbg !28

38:                                               ; preds = %12
  br i1 %.not1.i, label %41, label %39, !dbg !28

39:                                               ; preds = %38
  %40 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %35) #3, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

41:                                               ; preds = %38
  %42 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %35) #3, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

43:                                               ; preds = %12
  br i1 %.not1.i, label %46, label %44, !dbg !28

44:                                               ; preds = %43
  %45 = tail call float @llvm.nvvm.sqrt.rn.f(float %35) #3, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

46:                                               ; preds = %43
  %47 = tail call float @llvm.nvvm.sqrt.approx.f(float %35) #3, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

__nv_sqrtf.exit:                                  ; preds = %39, %41, %44, %46
  %.0.i = phi float [ %40, %39 ], [ %42, %41 ], [ %45, %44 ], [ %47, %46 ], !dbg !28
  %48 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !29
  %49 = fadd float %32, 0x3EE4F8B580000000, !dbg !30
  %50 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %.not.i1 = icmp eq i32 %50, 0, !dbg !31
  %51 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !31
  %.not1.i4 = icmp eq i32 %51, 0, !dbg !31
  br i1 %.not.i1, label %57, label %52, !dbg !31

52:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %55, label %53, !dbg !31

53:                                               ; preds = %52
  %54 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %49) #3, !dbg !31
  br label %__nv_sqrtf.exit5, !dbg !31

55:                                               ; preds = %52
  %56 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %49) #3, !dbg !31
  br label %__nv_sqrtf.exit5, !dbg !31

57:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %60, label %58, !dbg !31

58:                                               ; preds = %57
  %59 = tail call float @llvm.nvvm.sqrt.rn.f(float %49) #3, !dbg !31
  br label %__nv_sqrtf.exit5, !dbg !31

60:                                               ; preds = %57
  %61 = tail call float @llvm.nvvm.sqrt.approx.f(float %49) #3, !dbg !31
  br label %__nv_sqrtf.exit5, !dbg !31

__nv_sqrtf.exit5:                                 ; preds = %53, %55, %58, %60
  %.0.i3 = phi float [ %54, %53 ], [ %56, %55 ], [ %59, %58 ], [ %61, %60 ], !dbg !31
  %62 = extractvalue { i32, i32 } %29, 1, !dbg !22
  %63 = bitcast i32 %62 to float, !dbg !22
  %64 = bitcast i32 %30 to float, !dbg !23
  %65 = fsub float %63, %64, !dbg !32
  %66 = extractvalue { i32, i32 } %29, 0, !dbg !22
  %67 = bitcast i32 %66 to float, !dbg !22
  %68 = fsub float %67, %64, !dbg !32
  %69 = extractvalue { i32, i32 } %22, 1, !dbg !16
  %70 = bitcast i32 %69 to float, !dbg !16
  %71 = bitcast i32 %23 to float, !dbg !17
  %72 = fsub float %70, %71, !dbg !33
  %73 = fmul float %72, %48, !dbg !34
  %74 = bitcast i32 %26 to float, !dbg !19
  %75 = fmul float %73, %74, !dbg !35
  %76 = bitcast i32 %27 to float, !dbg !20
  %77 = fadd float %75, %76, !dbg !36
  %78 = extractvalue { i32, i32 } %22, 0, !dbg !16
  %79 = bitcast i32 %78 to float, !dbg !16
  %80 = fsub float %79, %71, !dbg !33
  %81 = fmul float %80, %48, !dbg !34
  %82 = fmul float %81, %74, !dbg !35
  %83 = fadd float %82, %76, !dbg !36
  %84 = bitcast i32 %34 to float, !dbg !26
  %85 = bitcast i32 %33 to float, !dbg !25
  %86 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !37
  %87 = fmul float %68, %86, !dbg !38
  %88 = fmul float %65, %86, !dbg !38
  %89 = fmul float %87, %85, !dbg !39
  %90 = fmul float %88, %85, !dbg !39
  %91 = fadd float %89, %84, !dbg !40
  %92 = fadd float %90, %84, !dbg !40
  %93 = fadd float %83, %91, !dbg !41
  %94 = fadd float %77, %92, !dbg !41
  %95 = getelementptr float, ptr addrspace(1) %10, i64 %20, !dbg !42
  %96 = bitcast float %93 to i32, !dbg !43
  %97 = bitcast float %94 to i32, !dbg !43
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %96, i32 %97, ptr addrspace(1) %95, i1 %19) #3, !dbg !43
  ret void, !dbg !44
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cdxlu4uin3yw5g5ayew7hkakl4hgyu5wshtd2wjtyszkpajk7iax.py", directory: "inductor_cache/dx")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_2, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_2, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_2", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 30, scope: !7)
!16 = !DILocation(line: 25, column: 35, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 19, scope: !7)
!19 = !DILocation(line: 30, column: 20, scope: !7)
!20 = !DILocation(line: 32, column: 20, scope: !7)
!21 = !DILocation(line: 34, column: 31, scope: !7)
!22 = !DILocation(line: 34, column: 36, scope: !7)
!23 = !DILocation(line: 35, column: 20, scope: !7)
!24 = !DILocation(line: 37, column: 20, scope: !7)
!25 = !DILocation(line: 39, column: 20, scope: !7)
!26 = !DILocation(line: 41, column: 20, scope: !7)
!27 = !DILocation(line: 45, column: 18, scope: !7)
!28 = !DILocation(line: 46, column: 26, scope: !7)
!29 = !DILocation(line: 48, column: 19, scope: !7)
!30 = !DILocation(line: 55, column: 20, scope: !7)
!31 = !DILocation(line: 56, column: 27, scope: !7)
!32 = !DILocation(line: 54, column: 20, scope: !7)
!33 = !DILocation(line: 43, column: 18, scope: !7)
!34 = !DILocation(line: 51, column: 19, scope: !7)
!35 = !DILocation(line: 52, column: 20, scope: !7)
!36 = !DILocation(line: 53, column: 20, scope: !7)
!37 = !DILocation(line: 57, column: 19, scope: !7)
!38 = !DILocation(line: 59, column: 20, scope: !7)
!39 = !DILocation(line: 60, column: 20, scope: !7)
!40 = !DILocation(line: 61, column: 20, scope: !7)
!41 = !DILocation(line: 62, column: 20, scope: !7)
!42 = !DILocation(line: 63, column: 25, scope: !7)
!43 = !DILocation(line: 63, column: 37, scope: !7)
!44 = !DILocation(line: 63, column: 4, scope: !7)
