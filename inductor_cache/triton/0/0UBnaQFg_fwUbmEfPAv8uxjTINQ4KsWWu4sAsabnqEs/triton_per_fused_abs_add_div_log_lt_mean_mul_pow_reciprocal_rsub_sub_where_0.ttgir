#blocked = #triton_gpu.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [2], order = [0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [2], order = [0]}>
#loc = loc("inductor_cache/f3/cf3m2wsdqlw7oz4p7x3lsp4vng4tvzzsiypmequmq5umk23bvskx.py":19:0)
#loc1 = loc(unknown)
#loc31 = loc("inductor_cache/f3/cf3m2wsdqlw7oz4p7x3lsp4vng4tvzzsiypmequmq5umk23bvskx.py":65:59)
#loc41 = loc(callsite(#loc1 at #loc31))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 2 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_per_fused_abs_add_div_log_lt_mean_mul_pow_reciprocal_rsub_sub_where_0(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/f3/cf3m2wsdqlw7oz4p7x3lsp4vng4tvzzsiypmequmq5umk23bvskx.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/f3/cf3m2wsdqlw7oz4p7x3lsp4vng4tvzzsiypmequmq5umk23bvskx.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/f3/cf3m2wsdqlw7oz4p7x3lsp4vng4tvzzsiypmequmq5umk23bvskx.py":19:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/f3/cf3m2wsdqlw7oz4p7x3lsp4vng4tvzzsiypmequmq5umk23bvskx.py":19:0)) attributes {noinline = false} {
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst = arith.constant 2.560000e+02 : f32 loc(#loc1)
    %cst_0 = arith.constant 0.000000e+00 : f32 loc(#loc1)
    %cst_1 = arith.constant dense<1.400000e+01> : tensor<256xf32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<2.100000e+00> : tensor<256xf32, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<1.000000e+00> : tensor<256xf32, #blocked> loc(#loc1)
    %cst_4 = arith.constant dense<5.000000e-01> : tensor<256xf32, #blocked> loc(#loc1)
    %0 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #blocked> loc(#loc2)
    %1 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc3)
    %2 = tt.addptr %1, %0 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc3)
    %3 = tt.load %2 : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc4)
    %4 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc5)
    %5 = tt.addptr %4, %0 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc5)
    %6 = tt.load %5 : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc6)
    %7 = arith.subf %3, %6 : tensor<256xf32, #blocked> loc(#loc7)
    %8 = math.absf %7 : tensor<256xf32, #blocked> loc(#loc8)
    %9 = arith.cmpf olt, %8, %cst_4 : tensor<256xf32, #blocked> loc(#loc9)
    %10 = arith.subf %cst_2, %3 : tensor<256xf32, #blocked> loc(#loc10)
    %11 = tt.extern_elementwise %8, %10 {libname = "", libpath = "", pure = true, symbol = "__nv_powf"} : (tensor<256xf32, #blocked>, tensor<256xf32, #blocked>) -> tensor<256xf32, #blocked> loc(#loc11)
    %12 = arith.addf %11, %cst_3 : tensor<256xf32, #blocked> loc(#loc12)
    %13 = math.log %12 : tensor<256xf32, #blocked> loc(#loc13)
    %14 = arith.mulf %13, %cst_1 : tensor<256xf32, #blocked> loc(#loc14)
    %15 = tt.extern_elementwise %cst_4, %10 {libname = "", libpath = "", pure = true, symbol = "__nv_powf"} : (tensor<256xf32, #blocked>, tensor<256xf32, #blocked>) -> tensor<256xf32, #blocked> loc(#loc15)
    %16 = arith.addf %15, %cst_3 : tensor<256xf32, #blocked> loc(#loc16)
    %17 = arith.divf %cst_3, %16 : tensor<256xf32, #blocked> loc(#loc17)
    %18 = arith.mulf %17, %cst_1 : tensor<256xf32, #blocked> loc(#loc18)
    %19 = arith.mulf %18, %10 : tensor<256xf32, #blocked> loc(#loc19)
    %20 = arith.subf %10, %cst_3 : tensor<256xf32, #blocked> loc(#loc20)
    %21 = tt.extern_elementwise %cst_4, %20 {libname = "", libpath = "", pure = true, symbol = "__nv_powf"} : (tensor<256xf32, #blocked>, tensor<256xf32, #blocked>) -> tensor<256xf32, #blocked> loc(#loc21)
    %22 = arith.mulf %19, %21 : tensor<256xf32, #blocked> loc(#loc22)
    %23 = arith.mulf %22, %8 : tensor<256xf32, #blocked> loc(#loc23)
    %24 = arith.mulf %22, %cst_4 : tensor<256xf32, #blocked> loc(#loc24)
    %25 = math.log %16 : tensor<256xf32, #blocked> loc(#loc25)
    %26 = arith.mulf %25, %cst_1 : tensor<256xf32, #blocked> loc(#loc26)
    %27 = arith.subf %24, %26 : tensor<256xf32, #blocked> loc(#loc27)
    %28 = arith.subf %23, %27 : tensor<256xf32, #blocked> loc(#loc28)
    %29 = arith.select %9, %14, %28 : tensor<256xi1, #blocked>, tensor<256xf32, #blocked> loc(#loc29)
    %30 = "tt.reduce"(%29) <{axis = 0 : i32}> ({
    ^bb0(%arg4: f32 loc(callsite(#loc1 at #loc31)), %arg5: f32 loc(callsite(#loc1 at #loc31))):
      %36 = arith.addf %arg4, %arg5 : f32 loc(#loc44)
      tt.reduce.return %36 : f32 loc(#loc40)
    }) : (tensor<256xf32, #blocked>) -> f32 loc(#loc40)
    %31 = arith.addf %30, %cst_0 : f32 loc(#loc43)
    %32 = arith.divf %31, %cst : f32 loc(#loc35)
    %33 = tt.splat %32 : f32 -> tensor<1xf32, #blocked1> loc(#loc35)
    gpu.barrier loc(#loc36)
    %34 = tt.addptr %arg0, %c0_i32 : !tt.ptr<f32>, i32 loc(#loc37)
    %35 = tt.splat %34 : !tt.ptr<f32> -> tensor<1x!tt.ptr<f32>, #blocked1> loc(#loc37)
    tt.store %35, %33 : tensor<1x!tt.ptr<f32>, #blocked1> loc(#loc38)
    tt.return loc(#loc39)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/f3/cf3m2wsdqlw7oz4p7x3lsp4vng4tvzzsiypmequmq5umk23bvskx.py":27:26)
#loc3 = loc("inductor_cache/f3/cf3m2wsdqlw7oz4p7x3lsp4vng4tvzzsiypmequmq5umk23bvskx.py":31:30)
#loc4 = loc("inductor_cache/f3/cf3m2wsdqlw7oz4p7x3lsp4vng4tvzzsiypmequmq5umk23bvskx.py":31:35)
#loc5 = loc("inductor_cache/f3/cf3m2wsdqlw7oz4p7x3lsp4vng4tvzzsiypmequmq5umk23bvskx.py":32:30)
#loc6 = loc("inductor_cache/f3/cf3m2wsdqlw7oz4p7x3lsp4vng4tvzzsiypmequmq5umk23bvskx.py":32:35)
#loc7 = loc("inductor_cache/f3/cf3m2wsdqlw7oz4p7x3lsp4vng4tvzzsiypmequmq5umk23bvskx.py":33:18)
#loc8 = loc("inductor_cache/f3/cf3m2wsdqlw7oz4p7x3lsp4vng4tvzzsiypmequmq5umk23bvskx.py":34:23)
#loc9 = loc("inductor_cache/f3/cf3m2wsdqlw7oz4p7x3lsp4vng4tvzzsiypmequmq5umk23bvskx.py":36:18)
#loc10 = loc("inductor_cache/f3/cf3m2wsdqlw7oz4p7x3lsp4vng4tvzzsiypmequmq5umk23bvskx.py":40:18)
#loc11 = loc("inductor_cache/f3/cf3m2wsdqlw7oz4p7x3lsp4vng4tvzzsiypmequmq5umk23bvskx.py":41:32)
#loc12 = loc("inductor_cache/f3/cf3m2wsdqlw7oz4p7x3lsp4vng4tvzzsiypmequmq5umk23bvskx.py":42:20)
#loc13 = loc("inductor_cache/f3/cf3m2wsdqlw7oz4p7x3lsp4vng4tvzzsiypmequmq5umk23bvskx.py":43:24)
#loc14 = loc("inductor_cache/f3/cf3m2wsdqlw7oz4p7x3lsp4vng4tvzzsiypmequmq5umk23bvskx.py":45:20)
#loc15 = loc("inductor_cache/f3/cf3m2wsdqlw7oz4p7x3lsp4vng4tvzzsiypmequmq5umk23bvskx.py":46:32)
#loc16 = loc("inductor_cache/f3/cf3m2wsdqlw7oz4p7x3lsp4vng4tvzzsiypmequmq5umk23bvskx.py":47:20)
#loc17 = loc("inductor_cache/f3/cf3m2wsdqlw7oz4p7x3lsp4vng4tvzzsiypmequmq5umk23bvskx.py":49:20)
#loc18 = loc("inductor_cache/f3/cf3m2wsdqlw7oz4p7x3lsp4vng4tvzzsiypmequmq5umk23bvskx.py":51:20)
#loc19 = loc("inductor_cache/f3/cf3m2wsdqlw7oz4p7x3lsp4vng4tvzzsiypmequmq5umk23bvskx.py":52:20)
#loc20 = loc("inductor_cache/f3/cf3m2wsdqlw7oz4p7x3lsp4vng4tvzzsiypmequmq5umk23bvskx.py":53:19)
#loc21 = loc("inductor_cache/f3/cf3m2wsdqlw7oz4p7x3lsp4vng4tvzzsiypmequmq5umk23bvskx.py":54:32)
#loc22 = loc("inductor_cache/f3/cf3m2wsdqlw7oz4p7x3lsp4vng4tvzzsiypmequmq5umk23bvskx.py":55:20)
#loc23 = loc("inductor_cache/f3/cf3m2wsdqlw7oz4p7x3lsp4vng4tvzzsiypmequmq5umk23bvskx.py":57:20)
#loc24 = loc("inductor_cache/f3/cf3m2wsdqlw7oz4p7x3lsp4vng4tvzzsiypmequmq5umk23bvskx.py":58:20)
#loc25 = loc("inductor_cache/f3/cf3m2wsdqlw7oz4p7x3lsp4vng4tvzzsiypmequmq5umk23bvskx.py":59:24)
#loc26 = loc("inductor_cache/f3/cf3m2wsdqlw7oz4p7x3lsp4vng4tvzzsiypmequmq5umk23bvskx.py":60:20)
#loc27 = loc("inductor_cache/f3/cf3m2wsdqlw7oz4p7x3lsp4vng4tvzzsiypmequmq5umk23bvskx.py":61:20)
#loc28 = loc("inductor_cache/f3/cf3m2wsdqlw7oz4p7x3lsp4vng4tvzzsiypmequmq5umk23bvskx.py":62:20)
#loc29 = loc("inductor_cache/f3/cf3m2wsdqlw7oz4p7x3lsp4vng4tvzzsiypmequmq5umk23bvskx.py":63:34)
#loc30 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc32 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc33 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":73:15)
#loc34 = loc("inductor_cache/f3/cf3m2wsdqlw7oz4p7x3lsp4vng4tvzzsiypmequmq5umk23bvskx.py":65:45)
#loc35 = loc("inductor_cache/f3/cf3m2wsdqlw7oz4p7x3lsp4vng4tvzzsiypmequmq5umk23bvskx.py":67:20)
#loc36 = loc("inductor_cache/f3/cf3m2wsdqlw7oz4p7x3lsp4vng4tvzzsiypmequmq5umk23bvskx.py":69:4)
#loc37 = loc("inductor_cache/f3/cf3m2wsdqlw7oz4p7x3lsp4vng4tvzzsiypmequmq5umk23bvskx.py":70:28)
#loc38 = loc("inductor_cache/f3/cf3m2wsdqlw7oz4p7x3lsp4vng4tvzzsiypmequmq5umk23bvskx.py":70:63)
#loc39 = loc("inductor_cache/f3/cf3m2wsdqlw7oz4p7x3lsp4vng4tvzzsiypmequmq5umk23bvskx.py":70:4)
#loc40 = loc(callsite(#loc30 at #loc31))
#loc42 = loc(callsite(#loc32 at #loc30))
#loc43 = loc(callsite(#loc33 at #loc34))
#loc44 = loc(callsite(#loc42 at #loc31))
