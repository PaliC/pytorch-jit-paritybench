; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_div_mul_sum_5(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 4, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 3, !dbg !12
  %10 = and i32 %9, 15, !dbg !12
  %11 = shl i32 %8, 1, !dbg !12
  %12 = and i32 %11, 14, !dbg !12
  %13 = or disjoint i32 %7, %10, !dbg !13
  %14 = or disjoint i32 %7, %12, !dbg !13
  %15 = icmp slt i32 %13, 32, !dbg !14
  %16 = icmp slt i32 %14, 32, !dbg !14
  %17 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %18 = shl i32 %17, 4, !dbg !16
  %19 = or disjoint i32 %18, %12, !dbg !17
  %20 = or disjoint i32 %18, %10, !dbg !17
  %21 = icmp slt i32 %19, 16, !dbg !18
  %22 = icmp slt i32 %20, 16, !dbg !18
  %23 = sdiv i32 %13, 2, !dbg !19
  %.frozen = freeze i32 %14, !dbg !20
  %24 = sdiv i32 %.frozen, 8, !dbg !20
  %25 = sdiv i32 %13, 8, !dbg !20
  %26 = mul i32 %24, 8, !dbg !21
  %.decomposed = sub i32 %.frozen, %26, !dbg !21
  %27 = srem i32 %23, 4, !dbg !22
  %28 = shl i32 %23, 4, !dbg !23
  %29 = add i32 %28, %19, !dbg !24
  %30 = sext i32 %29 to i64, !dbg !25
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !25
  %32 = and i1 %15, %21, !dbg !26
  %33 = and i1 %16, %22, !dbg !26
  %34 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %31, i1 %32) #2, !dbg !27
  %35 = extractvalue { i32, i32 } %34, 0, !dbg !27
  %36 = extractvalue { i32, i32 } %34, 1, !dbg !27
  %37 = bitcast i32 %35 to float, !dbg !27
  %38 = bitcast i32 %36 to float, !dbg !27
  %39 = shl i32 %20, 3, !dbg !28
  %40 = shl i32 %19, 3, !dbg !28
  %41 = or disjoint i32 %40, 8, !dbg !28
  %42 = add i32 %39, %.decomposed, !dbg !29
  %43 = shl i32 %24, 7, !dbg !30
  %44 = shl i32 %25, 7, !dbg !30
  %45 = add i32 %42, %43, !dbg !31
  %46 = sext i32 %45 to i64, !dbg !32
  %47 = getelementptr float, ptr addrspace(1) %1, i64 %46, !dbg !32
  %48 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %47, i1 %33) #2, !dbg !33
  %49 = extractvalue { i32, i32 } %48, 0, !dbg !33
  %50 = extractvalue { i32, i32 } %48, 1, !dbg !33
  %51 = bitcast i32 %49 to float, !dbg !33
  %52 = bitcast i32 %50 to float, !dbg !33
  %53 = shl nsw i32 %27, 1, !dbg !34
  %54 = add i32 %44, %40, !dbg !35
  %55 = add i32 %54, %53, !dbg !36
  %56 = add i32 %44, %41, !dbg !35
  %57 = add i32 %56, %53, !dbg !36
  %58 = sext i32 %55 to i64, !dbg !37
  %59 = getelementptr float, ptr addrspace(1) %1, i64 %58, !dbg !37
  %60 = sext i32 %57 to i64, !dbg !37
  %61 = getelementptr float, ptr addrspace(1) %1, i64 %60, !dbg !37
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 %32) #2, !dbg !38
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 %32) #2, !dbg !38
  %64 = or disjoint i32 %53, 1, !dbg !39
  %65 = add i32 %54, %64, !dbg !40
  %66 = add i32 %56, %64, !dbg !40
  %67 = sext i32 %65 to i64, !dbg !41
  %68 = getelementptr float, ptr addrspace(1) %1, i64 %67, !dbg !41
  %69 = sext i32 %66 to i64, !dbg !41
  %70 = getelementptr float, ptr addrspace(1) %1, i64 %69, !dbg !41
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 %32) #2, !dbg !42
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 %32) #2, !dbg !42
  %73 = fcmp olt float %51, 0.000000e+00, !dbg !43
  %74 = fcmp olt float %52, 0.000000e+00, !dbg !43
  %75 = select i1 %73, float 0.000000e+00, float %51, !dbg !47
  %76 = select i1 %74, float 0.000000e+00, float %52, !dbg !47
  %77 = fadd float %75, 0x3F50624DE0000000, !dbg !48
  %78 = fadd float %76, 0x3F50624DE0000000, !dbg !48
  %79 = shl i32 %8, 5, !dbg !48
  %80 = and i32 %79, 224, !dbg !48
  %81 = or disjoint i32 %80, %10, !dbg !48
  %82 = and i32 %11, 254, !dbg !48
  %83 = lshr exact i32 %80, 2, !dbg !48
  %84 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %83, !dbg !48
  %85 = getelementptr float, ptr addrspace(3) %84, i32 %81, !dbg !48
  %86 = bitcast float %77 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %85, <1 x i32> %86, i1 true) #2, !dbg !48
  %87 = or disjoint i32 %81, 16, !dbg !48
  %88 = lshr i32 %87, 4, !dbg !48
  %89 = getelementptr float, ptr addrspace(3) @global_smem, i32 %88, !dbg !48
  %90 = getelementptr float, ptr addrspace(3) %89, i32 %87, !dbg !48
  %91 = bitcast float %78 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %90, <1 x i32> %91, i1 true) #2, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %92 = lshr i32 %82, 4, !dbg !48
  %93 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %92, !dbg !48
  %94 = getelementptr inbounds float, ptr addrspace(3) %93, i32 %82, !dbg !48
  %95 = load float, ptr addrspace(3) %94, align 4, !dbg !48
  %96 = or disjoint i32 %82, 1, !dbg !48
  %97 = getelementptr inbounds float, ptr addrspace(3) %93, i32 %96, !dbg !48
  %98 = load float, ptr addrspace(3) %97, align 4, !dbg !48
  %99 = insertelement <2 x i32> poison, i32 %62, i64 0, !dbg !38
  %100 = insertelement <2 x i32> %99, i32 %71, i64 1, !dbg !38
  %101 = bitcast <2 x i32> %100 to <2 x float>, !dbg !38
  %102 = fcmp olt <2 x float> %101, zeroinitializer, !dbg !49
  %103 = select <2 x i1> %102, <2 x float> zeroinitializer, <2 x float> %101, !dbg !51
  %104 = fadd <2 x float> %103, splat (float 0x3F50624DE0000000), !dbg !52
  %105 = insertelement <2 x i32> poison, i32 %63, i64 0, !dbg !38
  %106 = insertelement <2 x i32> %105, i32 %72, i64 1, !dbg !38
  %107 = bitcast <2 x i32> %106 to <2 x float>, !dbg !38
  %108 = fcmp olt <2 x float> %107, zeroinitializer, !dbg !49
  %109 = select <2 x i1> %108, <2 x float> zeroinitializer, <2 x float> %107, !dbg !51
  %110 = fadd <2 x float> %109, splat (float 0x3F50624DE0000000), !dbg !52
  %shift = shufflevector <2 x float> %104, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !53
  %111 = fadd <2 x float> %104, %shift, !dbg !53
  %112 = extractelement <2 x float> %111, i64 0, !dbg !53
  %shift1 = shufflevector <2 x float> %110, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !53
  %113 = fadd <2 x float> %110, %shift1, !dbg !53
  %114 = extractelement <2 x float> %113, i64 0, !dbg !53
  %115 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %95, float %112) #2, !dbg !54
  %116 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %98, float %114) #2, !dbg !54
  %117 = fmul float %115, %37, !dbg !55
  %118 = fmul float %116, %38, !dbg !55
  %119 = shl i32 %13, 4, !dbg !56
  %120 = add i32 %19, %119, !dbg !57
  %121 = sext i32 %120 to i64, !dbg !58
  %122 = getelementptr float, ptr addrspace(1) %2, i64 %121, !dbg !58
  %123 = bitcast float %117 to i32, !dbg !59
  %124 = bitcast float %118 to i32, !dbg !59
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %123, i32 %124, ptr addrspace(1) %122, i1 %32) #2, !dbg !59
  ret void, !dbg !60
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c5nacvdeet766izfdcdaumifvuwqxrvwxndmxk2ghniseo7pvcla.py", directory: "inductor_cache/5n")
!4 = !{ptr @triton_poi_fused_div_mul_sum_5, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_div_mul_sum_5, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_div_mul_sum_5", linkageName: "triton_poi_fused_div_mul_sum_5", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 29, column: 19, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 31, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 26, scope: !7)
!23 = !DILocation(line: 34, column: 38, scope: !7)
!24 = !DILocation(line: 34, column: 35, scope: !7)
!25 = !DILocation(line: 34, column: 30, scope: !7)
!26 = !DILocation(line: 34, column: 51, scope: !7)
!27 = !DILocation(line: 34, column: 43, scope: !7)
!28 = !DILocation(line: 35, column: 37, scope: !7)
!29 = !DILocation(line: 35, column: 35, scope: !7)
!30 = !DILocation(line: 35, column: 46, scope: !7)
!31 = !DILocation(line: 35, column: 42, scope: !7)
!32 = !DILocation(line: 35, column: 30, scope: !7)
!33 = !DILocation(line: 35, column: 51, scope: !7)
!34 = !DILocation(line: 36, column: 32, scope: !7)
!35 = !DILocation(line: 36, column: 37, scope: !7)
!36 = !DILocation(line: 36, column: 44, scope: !7)
!37 = !DILocation(line: 36, column: 30, scope: !7)
!38 = !DILocation(line: 36, column: 53, scope: !7)
!39 = !DILocation(line: 37, column: 34, scope: !7)
!40 = !DILocation(line: 37, column: 48, scope: !7)
!41 = !DILocation(line: 37, column: 30, scope: !7)
!42 = !DILocation(line: 37, column: 57, scope: !7)
!43 = !DILocation(line: 118, column: 15, scope: !44, inlinedAt: !46)
!44 = distinct !DILexicalBlockFile(scope: !7, file: !45, discriminator: 0)
!45 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!46 = !DILocation(line: 39, column: 40, scope: !7)
!47 = !DILocation(line: 121, column: 29, scope: !44, inlinedAt: !46)
!48 = !DILocation(line: 41, column: 18, scope: !7)
!49 = !DILocation(line: 118, column: 15, scope: !44, inlinedAt: !50)
!50 = !DILocation(line: 42, column: 40, scope: !7)
!51 = !DILocation(line: 121, column: 29, scope: !44, inlinedAt: !50)
!52 = !DILocation(line: 43, column: 18, scope: !7)
!53 = !DILocation(line: 46, column: 19, scope: !7)
!54 = !DILocation(line: 47, column: 19, scope: !7)
!55 = !DILocation(line: 48, column: 19, scope: !7)
!56 = !DILocation(line: 49, column: 33, scope: !7)
!57 = !DILocation(line: 49, column: 30, scope: !7)
!58 = !DILocation(line: 49, column: 25, scope: !7)
!59 = !DILocation(line: 49, column: 45, scope: !7)
!60 = !DILocation(line: 49, column: 4, scope: !7)
