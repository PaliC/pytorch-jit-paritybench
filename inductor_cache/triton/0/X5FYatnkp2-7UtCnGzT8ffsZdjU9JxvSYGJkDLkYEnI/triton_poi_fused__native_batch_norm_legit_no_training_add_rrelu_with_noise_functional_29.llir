; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_rrelu_with_noise_functional_29(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %11 = shl i32 %10, 9, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = shl i32 %12, 2, !dbg !12
  %14 = and i32 %13, 508, !dbg !12
  %15 = or disjoint i32 %11, %14, !dbg !13
  %16 = srem i32 %15, 16, !dbg !14
  %17 = sext i32 %15 to i64, !dbg !15
  %18 = getelementptr float, ptr addrspace(1) %1, i64 %17, !dbg !15
  %19 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %18, i1 true) #3, !dbg !16
  %20 = sext i32 %16 to i64, !dbg !17
  %21 = getelementptr float, ptr addrspace(1) %2, i64 %20, !dbg !17
  %22 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %21, i1 true) #3, !dbg !18
  %23 = getelementptr float, ptr addrspace(1) %3, i64 %20, !dbg !19
  %24 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %23, i1 true) #3, !dbg !20
  %25 = extractvalue { i32, i32, i32, i32 } %24, 0, !dbg !20
  %26 = extractvalue { i32, i32, i32, i32 } %24, 1, !dbg !20
  %27 = extractvalue { i32, i32, i32, i32 } %24, 2, !dbg !20
  %28 = extractvalue { i32, i32, i32, i32 } %24, 3, !dbg !20
  %29 = bitcast i32 %25 to float, !dbg !20
  %30 = bitcast i32 %26 to float, !dbg !20
  %31 = bitcast i32 %27 to float, !dbg !20
  %32 = bitcast i32 %28 to float, !dbg !20
  %33 = getelementptr float, ptr addrspace(1) %4, i64 %20, !dbg !21
  %34 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %33, i1 true) #3, !dbg !22
  %35 = getelementptr float, ptr addrspace(1) %5, i64 %20, !dbg !23
  %36 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %35, i1 true) #3, !dbg !24
  %37 = getelementptr float, ptr addrspace(1) %6, i64 %17, !dbg !25
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %37, i1 true) #3, !dbg !26
  %39 = fadd float %29, 0x3EE4F8B580000000, !dbg !27
  %40 = fadd float %30, 0x3EE4F8B580000000, !dbg !27
  %41 = fadd float %31, 0x3EE4F8B580000000, !dbg !27
  %42 = fadd float %32, 0x3EE4F8B580000000, !dbg !27
  %43 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i = icmp eq i32 %43, 0, !dbg !28
  %44 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i = icmp eq i32 %44, 0, !dbg !28
  br i1 %.not.i, label %50, label %45, !dbg !28

45:                                               ; preds = %9
  br i1 %.not1.i, label %48, label %46, !dbg !28

46:                                               ; preds = %45
  %47 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %39) #3, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

48:                                               ; preds = %45
  %49 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %39) #3, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

50:                                               ; preds = %9
  br i1 %.not1.i, label %53, label %51, !dbg !28

51:                                               ; preds = %50
  %52 = tail call float @llvm.nvvm.sqrt.rn.f(float %39) #3, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

53:                                               ; preds = %50
  %54 = tail call float @llvm.nvvm.sqrt.approx.f(float %39) #3, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

__nv_sqrtf.exit:                                  ; preds = %46, %48, %51, %53
  %.0.i = phi float [ %47, %46 ], [ %49, %48 ], [ %52, %51 ], [ %54, %53 ], !dbg !28
  %55 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i1 = icmp eq i32 %55, 0, !dbg !28
  %56 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i4 = icmp eq i32 %56, 0, !dbg !28
  br i1 %.not.i1, label %62, label %57, !dbg !28

57:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %60, label %58, !dbg !28

58:                                               ; preds = %57
  %59 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %40) #3, !dbg !28
  br label %__nv_sqrtf.exit5, !dbg !28

60:                                               ; preds = %57
  %61 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %40) #3, !dbg !28
  br label %__nv_sqrtf.exit5, !dbg !28

62:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %65, label %63, !dbg !28

63:                                               ; preds = %62
  %64 = tail call float @llvm.nvvm.sqrt.rn.f(float %40) #3, !dbg !28
  br label %__nv_sqrtf.exit5, !dbg !28

65:                                               ; preds = %62
  %66 = tail call float @llvm.nvvm.sqrt.approx.f(float %40) #3, !dbg !28
  br label %__nv_sqrtf.exit5, !dbg !28

__nv_sqrtf.exit5:                                 ; preds = %58, %60, %63, %65
  %.0.i3 = phi float [ %59, %58 ], [ %61, %60 ], [ %64, %63 ], [ %66, %65 ], !dbg !28
  %67 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i6 = icmp eq i32 %67, 0, !dbg !28
  %68 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i9 = icmp eq i32 %68, 0, !dbg !28
  br i1 %.not.i6, label %74, label %69, !dbg !28

69:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %72, label %70, !dbg !28

70:                                               ; preds = %69
  %71 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %41) #3, !dbg !28
  br label %__nv_sqrtf.exit10, !dbg !28

72:                                               ; preds = %69
  %73 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %41) #3, !dbg !28
  br label %__nv_sqrtf.exit10, !dbg !28

74:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %77, label %75, !dbg !28

75:                                               ; preds = %74
  %76 = tail call float @llvm.nvvm.sqrt.rn.f(float %41) #3, !dbg !28
  br label %__nv_sqrtf.exit10, !dbg !28

77:                                               ; preds = %74
  %78 = tail call float @llvm.nvvm.sqrt.approx.f(float %41) #3, !dbg !28
  br label %__nv_sqrtf.exit10, !dbg !28

__nv_sqrtf.exit10:                                ; preds = %70, %72, %75, %77
  %.0.i8 = phi float [ %71, %70 ], [ %73, %72 ], [ %76, %75 ], [ %78, %77 ], !dbg !28
  %79 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i11 = icmp eq i32 %79, 0, !dbg !28
  %80 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i14 = icmp eq i32 %80, 0, !dbg !28
  br i1 %.not.i11, label %86, label %81, !dbg !28

81:                                               ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %84, label %82, !dbg !28

82:                                               ; preds = %81
  %83 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %42) #3, !dbg !28
  br label %__nv_sqrtf.exit15, !dbg !28

84:                                               ; preds = %81
  %85 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %42) #3, !dbg !28
  br label %__nv_sqrtf.exit15, !dbg !28

86:                                               ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %89, label %87, !dbg !28

87:                                               ; preds = %86
  %88 = tail call float @llvm.nvvm.sqrt.rn.f(float %42) #3, !dbg !28
  br label %__nv_sqrtf.exit15, !dbg !28

89:                                               ; preds = %86
  %90 = tail call float @llvm.nvvm.sqrt.approx.f(float %42) #3, !dbg !28
  br label %__nv_sqrtf.exit15, !dbg !28

__nv_sqrtf.exit15:                                ; preds = %82, %84, %87, %89
  %.0.i13 = phi float [ %83, %82 ], [ %85, %84 ], [ %88, %87 ], [ %90, %89 ], !dbg !28
  %91 = extractvalue { i32, i32, i32, i32 } %19, 3, !dbg !16
  %92 = extractvalue { i32, i32, i32, i32 } %22, 3, !dbg !18
  %93 = extractvalue { i32, i32, i32, i32 } %19, 2, !dbg !16
  %94 = extractvalue { i32, i32, i32, i32 } %22, 2, !dbg !18
  %95 = extractvalue { i32, i32, i32, i32 } %19, 1, !dbg !16
  %96 = extractvalue { i32, i32, i32, i32 } %22, 1, !dbg !18
  %97 = extractvalue { i32, i32, i32, i32 } %19, 0, !dbg !16
  %98 = extractvalue { i32, i32, i32, i32 } %22, 0, !dbg !18
  %99 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !26
  %100 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !26
  %101 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !26
  %102 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !26
  %103 = extractvalue { i32, i32, i32, i32 } %36, 3, !dbg !24
  %104 = extractvalue { i32, i32, i32, i32 } %36, 2, !dbg !24
  %105 = extractvalue { i32, i32, i32, i32 } %36, 1, !dbg !24
  %106 = extractvalue { i32, i32, i32, i32 } %36, 0, !dbg !24
  %107 = extractvalue { i32, i32, i32, i32 } %34, 3, !dbg !22
  %108 = extractvalue { i32, i32, i32, i32 } %34, 2, !dbg !22
  %109 = extractvalue { i32, i32, i32, i32 } %34, 1, !dbg !22
  %110 = extractvalue { i32, i32, i32, i32 } %34, 0, !dbg !22
  %111 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !29
  %112 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !29
  %113 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !29
  %114 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !29
  %115 = getelementptr i1, ptr addrspace(1) %7, i64 %17, !dbg !30
  %116 = insertelement <4 x i32> poison, i32 %97, i64 0, !dbg !16
  %117 = insertelement <4 x i32> %116, i32 %95, i64 1, !dbg !16
  %118 = insertelement <4 x i32> %117, i32 %93, i64 2, !dbg !16
  %119 = insertelement <4 x i32> %118, i32 %91, i64 3, !dbg !16
  %120 = bitcast <4 x i32> %119 to <4 x float>, !dbg !16
  %121 = insertelement <4 x i32> poison, i32 %98, i64 0, !dbg !18
  %122 = insertelement <4 x i32> %121, i32 %96, i64 1, !dbg !18
  %123 = insertelement <4 x i32> %122, i32 %94, i64 2, !dbg !18
  %124 = insertelement <4 x i32> %123, i32 %92, i64 3, !dbg !18
  %125 = bitcast <4 x i32> %124 to <4 x float>, !dbg !18
  %126 = fsub <4 x float> %120, %125, !dbg !31
  %127 = insertelement <4 x i32> poison, i32 %102, i64 0, !dbg !26
  %128 = insertelement <4 x i32> %127, i32 %101, i64 1, !dbg !26
  %129 = insertelement <4 x i32> %128, i32 %100, i64 2, !dbg !26
  %130 = insertelement <4 x i32> %129, i32 %99, i64 3, !dbg !26
  %131 = bitcast <4 x i32> %130 to <4 x float>, !dbg !26
  %132 = insertelement <4 x i32> poison, i32 %106, i64 0, !dbg !24
  %133 = insertelement <4 x i32> %132, i32 %105, i64 1, !dbg !24
  %134 = insertelement <4 x i32> %133, i32 %104, i64 2, !dbg !24
  %135 = insertelement <4 x i32> %134, i32 %103, i64 3, !dbg !24
  %136 = bitcast <4 x i32> %135 to <4 x float>, !dbg !24
  %137 = insertelement <4 x i32> poison, i32 %110, i64 0, !dbg !22
  %138 = insertelement <4 x i32> %137, i32 %109, i64 1, !dbg !22
  %139 = insertelement <4 x i32> %138, i32 %108, i64 2, !dbg !22
  %140 = insertelement <4 x i32> %139, i32 %107, i64 3, !dbg !22
  %141 = bitcast <4 x i32> %140 to <4 x float>, !dbg !22
  %142 = insertelement <4 x float> poison, float %111, i64 0, !dbg !32
  %143 = insertelement <4 x float> %142, float %112, i64 1, !dbg !32
  %144 = insertelement <4 x float> %143, float %113, i64 2, !dbg !32
  %145 = insertelement <4 x float> %144, float %114, i64 3, !dbg !32
  %146 = fmul <4 x float> %126, %145, !dbg !32
  %147 = fmul <4 x float> %146, %141, !dbg !33
  %148 = fadd <4 x float> %147, %136, !dbg !34
  %149 = fadd <4 x float> %148, %131, !dbg !35
  %150 = fcmp ogt <4 x float> %149, zeroinitializer, !dbg !36
  %151 = extractelement <4 x float> %149, i64 0, !dbg !37
  %152 = fmul float %151, 0x3FCD555560000000, !dbg !38
  %153 = extractelement <4 x float> %149, i64 1, !dbg !37
  %154 = fmul float %153, 0x3FCD555560000000, !dbg !38
  %155 = extractelement <4 x float> %149, i64 2, !dbg !37
  %156 = fmul float %155, 0x3FCD555560000000, !dbg !38
  %157 = extractelement <4 x float> %149, i64 3, !dbg !37
  %158 = fmul float %157, 0x3FCD555560000000, !dbg !38
  %159 = extractelement <4 x i1> %150, i64 0, !dbg !37
  %160 = select i1 %159, float %151, float %152, !dbg !37
  %161 = extractelement <4 x i1> %150, i64 1, !dbg !37
  %162 = select i1 %161, float %153, float %154, !dbg !37
  %163 = extractelement <4 x i1> %150, i64 2, !dbg !37
  %164 = select i1 %163, float %155, float %156, !dbg !37
  %165 = extractelement <4 x i1> %150, i64 3, !dbg !37
  %166 = select i1 %165, float %157, float %158, !dbg !37
  %167 = zext <4 x i1> %150 to <4 x i8>, !dbg !39
  %168 = bitcast <4 x i8> %167 to i32, !dbg !39
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %168, ptr addrspace(1) %115, i1 true) #3, !dbg !39
  %169 = getelementptr float, ptr addrspace(1) %0, i64 %17, !dbg !40
  %170 = bitcast float %160 to i32, !dbg !41
  %171 = bitcast float %162 to i32, !dbg !41
  %172 = bitcast float %164 to i32, !dbg !41
  %173 = bitcast float %166 to i32, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %170, i32 %171, i32 %172, i32 %173, ptr addrspace(1) %169, i1 true) #3, !dbg !41
  ret void, !dbg !42
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cctshsmolypxapuufrpsopv4nkkh5gu55pebo2hwvtpkf364x3zo.py", directory: "inductor_cache/ct")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_rrelu_with_noise_functional_29, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_rrelu_with_noise_functional_29, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_rrelu_with_noise_functional_29", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_rrelu_with_noise_functional_29", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 30, scope: !7)
!16 = !DILocation(line: 26, column: 35, scope: !7)
!17 = !DILocation(line: 27, column: 30, scope: !7)
!18 = !DILocation(line: 27, column: 35, scope: !7)
!19 = !DILocation(line: 28, column: 30, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 29, column: 31, scope: !7)
!22 = !DILocation(line: 29, column: 36, scope: !7)
!23 = !DILocation(line: 30, column: 31, scope: !7)
!24 = !DILocation(line: 30, column: 36, scope: !7)
!25 = !DILocation(line: 31, column: 31, scope: !7)
!26 = !DILocation(line: 31, column: 36, scope: !7)
!27 = !DILocation(line: 34, column: 18, scope: !7)
!28 = !DILocation(line: 35, column: 26, scope: !7)
!29 = !DILocation(line: 37, column: 18, scope: !7)
!30 = !DILocation(line: 49, column: 25, scope: !7)
!31 = !DILocation(line: 32, column: 18, scope: !7)
!32 = !DILocation(line: 40, column: 19, scope: !7)
!33 = !DILocation(line: 41, column: 20, scope: !7)
!34 = !DILocation(line: 42, column: 20, scope: !7)
!35 = !DILocation(line: 43, column: 20, scope: !7)
!36 = !DILocation(line: 45, column: 20, scope: !7)
!37 = !DILocation(line: 48, column: 35, scope: !7)
!38 = !DILocation(line: 47, column: 20, scope: !7)
!39 = !DILocation(line: 49, column: 37, scope: !7)
!40 = !DILocation(line: 50, column: 28, scope: !7)
!41 = !DILocation(line: 50, column: 40, scope: !7)
!42 = !DILocation(line: 50, column: 4, scope: !7)
