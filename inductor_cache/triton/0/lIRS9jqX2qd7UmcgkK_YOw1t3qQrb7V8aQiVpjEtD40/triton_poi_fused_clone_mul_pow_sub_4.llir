; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [74 x i8] c"inductor_cache/wr/cwr6wkbzak7jyvcodbfs7auiyyrcs3odgn6snuxwmszk3svk35oy.py\00"
@assertMessage_0 = internal constant [35 x i8] c"index out of bounds: 0 <= tmp4 < 4\00"
@global_smem = external addrspace(3) global [0 x i8], align 16

; Function Attrs: noreturn
declare !dbg !7 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define void @triton_poi_fused_clone_mul_pow_sub_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !11 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #3, !dbg !12
  %8 = shl i32 %7, 5, !dbg !13
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !14
  %10 = lshr i32 %9, 2, !dbg !14
  %11 = and i32 %10, 31, !dbg !14
  %12 = and i32 %9, 31, !dbg !14
  %13 = or disjoint i32 %8, %11, !dbg !15
  %14 = or disjoint i32 %8, %12, !dbg !15
  %15 = icmp slt i32 %13, 64, !dbg !16
  %16 = icmp slt i32 %14, 64, !dbg !16
  %17 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !17
  %18 = shl i32 %17, 2, !dbg !18
  %19 = lshr i32 %9, 5, !dbg !19
  %20 = and i32 %19, 3, !dbg !19
  %21 = or disjoint i32 %18, %20, !dbg !20
  %22 = icmp slt i32 %21, 4, !dbg !21
  %.frozen = freeze i32 %14, !dbg !22
  %23 = sdiv i32 %.frozen, 16, !dbg !22
  %24 = mul i32 %23, 16, !dbg !23
  %.decomposed = sub i32 %.frozen, %24, !dbg !23
  %25 = sext i32 %13 to i64, !dbg !24
  %26 = getelementptr i64, ptr addrspace(1) %0, i64 %25, !dbg !24
  %27 = sext i32 %14 to i64, !dbg !24
  %28 = getelementptr i64, ptr addrspace(1) %0, i64 %27, !dbg !24
  %29 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %26, i1 %15) #3, !dbg !25
  %30 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %28, i1 %16) #3, !dbg !25
  %31 = shl i32 %21, 4, !dbg !26
  %32 = add i32 %31, %.decomposed, !dbg !27
  %33 = shl i32 %23, 6, !dbg !28
  %34 = add i32 %32, %33, !dbg !29
  %35 = sext i32 %34 to i64, !dbg !30
  %36 = getelementptr float, ptr addrspace(1) %2, i64 %35, !dbg !30
  %37 = and i1 %16, %22, !dbg !31
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 %37) #3, !dbg !32
  %39 = shl i32 %9, 2, !dbg !32
  %40 = and i32 %39, 124, !dbg !32
  %41 = or disjoint i32 %40, %20, !dbg !32
  %42 = lshr exact i32 %40, 2, !dbg !32
  %43 = add nuw nsw i32 %41, %42, !dbg !32
  %44 = zext nneg i32 %43 to i64, !dbg !32
  %45 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %44, !dbg !32
  %46 = insertelement <1 x i32> poison, i32 %38, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %45, <1 x i32> %46, i1 true) #3, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %47 = lshr i64 %30, 61, !dbg !33
  %48 = and i64 %47, 4, !dbg !33
  %49 = add i64 %48, %30, !dbg !33
  %50 = icmp ugt i64 %49, 3, !dbg !34
  %.not4 = and i1 %16, %50, !dbg !35
  br i1 %.not4, label %51, label %52, !dbg !35

51:                                               ; preds = %6
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 38, ptr nonnull @assertFunc_0, i64 1), !dbg !35
  unreachable, !dbg !35

52:                                               ; preds = %6
  %53 = lshr i64 %29, 61, !dbg !33
  %54 = and i64 %53, 4, !dbg !33
  %55 = add i64 %54, %29, !dbg !33
  %56 = and i32 %9, 127, !dbg !32
  %57 = lshr i32 %56, 2, !dbg !32
  %58 = add nuw nsw i32 %57, %56, !dbg !32
  %59 = zext nneg i32 %58 to i64, !dbg !32
  %60 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %59, !dbg !32
  %61 = load float, ptr addrspace(3) %60, align 4, !dbg !32
  %62 = and i32 %9, 3, !dbg !14
  %63 = or disjoint i32 %18, %62, !dbg !20
  %64 = icmp slt i32 %63, 4, !dbg !21
  %65 = and i1 %15, %64, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %66 = sext i32 %63 to i64, !dbg !36
  %.idx = shl i64 %55, 4, !dbg !37
  %67 = getelementptr i8, ptr addrspace(1) %1, i64 %.idx, !dbg !37
  %68 = getelementptr float, ptr addrspace(1) %67, i64 %66, !dbg !37
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 %65) #3, !dbg !38
  %70 = bitcast i32 %69 to float, !dbg !38
  %71 = fsub float %70, %61, !dbg !39
  %72 = fmul float %71, 2.000000e+00, !dbg !40
  %73 = shl i32 %13, 2, !dbg !41
  %74 = add i32 %63, %73, !dbg !42
  %75 = sext i32 %74 to i64, !dbg !43
  %76 = getelementptr float, ptr addrspace(1) %3, i64 %75, !dbg !43
  %77 = bitcast float %72 to i32, !dbg !44
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %77, ptr addrspace(1) %76, i1 %65) #3, !dbg !44
  ret void, !dbg !45
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { noreturn }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cwr6wkbzak7jyvcodbfs7auiyyrcs3odgn6snuxwmszk3svk35oy.py", directory: "inductor_cache/wr")
!4 = !{ptr @triton_poi_fused_clone_mul_pow_sub_4, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_clone_mul_pow_sub_4, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !8, file: !8, type: !9, spFlags: DISPFlagOptimized)
!8 = !DIFile(filename: "<unknown>", directory: "")
!9 = !DISubroutineType(cc: DW_CC_normal, types: !10)
!10 = !{}
!11 = distinct !DISubprogram(name: "triton_poi_fused_clone_mul_pow_sub_4", linkageName: "triton_poi_fused_clone_mul_pow_sub_4", scope: !3, file: !3, line: 19, type: !9, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!12 = !DILocation(line: 22, column: 28, scope: !11)
!13 = !DILocation(line: 22, column: 33, scope: !11)
!14 = !DILocation(line: 23, column: 44, scope: !11)
!15 = !DILocation(line: 23, column: 23, scope: !11)
!16 = !DILocation(line: 24, column: 21, scope: !11)
!17 = !DILocation(line: 25, column: 28, scope: !11)
!18 = !DILocation(line: 25, column: 33, scope: !11)
!19 = !DILocation(line: 26, column: 44, scope: !11)
!20 = !DILocation(line: 26, column: 23, scope: !11)
!21 = !DILocation(line: 27, column: 21, scope: !11)
!22 = !DILocation(line: 31, column: 19, scope: !11)
!23 = !DILocation(line: 30, column: 19, scope: !11)
!24 = !DILocation(line: 32, column: 30, scope: !11)
!25 = !DILocation(line: 32, column: 35, scope: !11)
!26 = !DILocation(line: 33, column: 38, scope: !11)
!27 = !DILocation(line: 33, column: 35, scope: !11)
!28 = !DILocation(line: 33, column: 46, scope: !11)
!29 = !DILocation(line: 33, column: 43, scope: !11)
!30 = !DILocation(line: 33, column: 30, scope: !11)
!31 = !DILocation(line: 33, column: 59, scope: !11)
!32 = !DILocation(line: 33, column: 51, scope: !11)
!33 = !DILocation(line: 37, column: 32, scope: !11)
!34 = !DILocation(line: 38, column: 37, scope: !11)
!35 = !DILocation(line: 38, column: 60, scope: !11)
!36 = !DILocation(line: 39, column: 35, scope: !11)
!37 = !DILocation(line: 39, column: 30, scope: !11)
!38 = !DILocation(line: 39, column: 44, scope: !11)
!39 = !DILocation(line: 40, column: 18, scope: !11)
!40 = !DILocation(line: 42, column: 19, scope: !11)
!41 = !DILocation(line: 43, column: 32, scope: !11)
!42 = !DILocation(line: 43, column: 30, scope: !11)
!43 = !DILocation(line: 43, column: 25, scope: !11)
!44 = !DILocation(line: 43, column: 44, scope: !11)
!45 = !DILocation(line: 43, column: 4, scope: !11)
