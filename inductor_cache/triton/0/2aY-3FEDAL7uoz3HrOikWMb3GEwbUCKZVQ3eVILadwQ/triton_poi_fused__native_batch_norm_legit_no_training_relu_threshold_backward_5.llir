; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_5(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %11 = shl i32 %10, 8, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = shl i32 %12, 4, !dbg !12
  %14 = and i32 %13, 240, !dbg !12
  %15 = and i32 %12, 255, !dbg !12
  %16 = or disjoint i32 %11, %14, !dbg !13
  %17 = or disjoint i32 %16, 4, !dbg !13
  %18 = or disjoint i32 %16, 8, !dbg !13
  %19 = or disjoint i32 %16, 12, !dbg !13
  %20 = or disjoint i32 %11, %15, !dbg !13
  %21 = icmp slt i32 %16, 512, !dbg !14
  %22 = icmp slt i32 %20, 512, !dbg !14
  %23 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %24 = shl i32 %23, 4, !dbg !16
  %25 = lshr i32 %12, 4, !dbg !17
  %26 = and i32 %25, 15, !dbg !17
  %27 = or disjoint i32 %24, %26, !dbg !18
  %.frozen = freeze i32 %16, !dbg !19
  %28 = sdiv i32 %.frozen, 128, !dbg !19
  %29 = mul i32 %28, 128, !dbg !20
  %.decomposed = sub i32 %.frozen, %29, !dbg !20
  %30 = srem i32 %17, 128, !dbg !20
  %31 = srem i32 %18, 128, !dbg !20
  %32 = srem i32 %19, 128, !dbg !20
  %33 = srem i32 %20, 128, !dbg !20
  %34 = shl i32 %27, 7, !dbg !21
  %35 = shl i32 %28, 19, !dbg !22
  %36 = add i32 %35, %34, !dbg !23
  %37 = add i32 %36, %.decomposed, !dbg !24
  %38 = add i32 %36, %30, !dbg !24
  %39 = add i32 %36, %31, !dbg !24
  %40 = add i32 %36, %32, !dbg !24
  %41 = sext i32 %37 to i64, !dbg !25
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !25
  %43 = sext i32 %38 to i64, !dbg !25
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !25
  %45 = sext i32 %39 to i64, !dbg !25
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !25
  %47 = sext i32 %40 to i64, !dbg !25
  %48 = getelementptr float, ptr addrspace(1) %0, i64 %47, !dbg !25
  %49 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %42, i1 %21) #4, !dbg !26
  %50 = extractvalue { i32, i32, i32, i32 } %49, 0, !dbg !26
  %51 = extractvalue { i32, i32, i32, i32 } %49, 1, !dbg !26
  %52 = extractvalue { i32, i32, i32, i32 } %49, 2, !dbg !26
  %53 = extractvalue { i32, i32, i32, i32 } %49, 3, !dbg !26
  %54 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %44, i1 %21) #4, !dbg !26
  %55 = extractvalue { i32, i32, i32, i32 } %54, 0, !dbg !26
  %56 = extractvalue { i32, i32, i32, i32 } %54, 1, !dbg !26
  %57 = extractvalue { i32, i32, i32, i32 } %54, 2, !dbg !26
  %58 = extractvalue { i32, i32, i32, i32 } %54, 3, !dbg !26
  %59 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %46, i1 %21) #4, !dbg !26
  %60 = extractvalue { i32, i32, i32, i32 } %59, 0, !dbg !26
  %61 = extractvalue { i32, i32, i32, i32 } %59, 1, !dbg !26
  %62 = extractvalue { i32, i32, i32, i32 } %59, 2, !dbg !26
  %63 = extractvalue { i32, i32, i32, i32 } %59, 3, !dbg !26
  %64 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %48, i1 %21) #4, !dbg !26
  %65 = extractvalue { i32, i32, i32, i32 } %64, 0, !dbg !26
  %66 = extractvalue { i32, i32, i32, i32 } %64, 1, !dbg !26
  %67 = extractvalue { i32, i32, i32, i32 } %64, 2, !dbg !26
  %68 = extractvalue { i32, i32, i32, i32 } %64, 3, !dbg !26
  %69 = and i32 %13, 4080, !dbg !26
  %70 = and i32 %12, 240, !dbg !26
  %71 = add nuw nsw i32 %69, %70, !dbg !26
  %72 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %71, !dbg !26
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %72, i32 %50, i32 %51, i32 %52, i32 %53, i1 true) #4, !dbg !26
  %73 = getelementptr inbounds i8, ptr addrspace(3) %72, i32 16, !dbg !26
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %73, i32 %55, i32 %56, i32 %57, i32 %58, i1 true) #4, !dbg !26
  %74 = getelementptr inbounds i8, ptr addrspace(3) %72, i32 32, !dbg !26
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %74, i32 %60, i32 %61, i32 %62, i32 %63, i1 true) #4, !dbg !26
  %75 = getelementptr inbounds i8, ptr addrspace(3) %72, i32 48, !dbg !26
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %75, i32 %65, i32 %66, i32 %67, i32 %68, i1 true) #4, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %76 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !26
  %77 = load float, ptr addrspace(3) %76, align 4, !dbg !26
  %78 = add nuw nsw i32 %15, 272, !dbg !26
  %79 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %78, !dbg !26
  %80 = load float, ptr addrspace(3) %79, align 4, !dbg !26
  %81 = add nuw nsw i32 %15, 544, !dbg !26
  %82 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %81, !dbg !26
  %83 = load float, ptr addrspace(3) %82, align 4, !dbg !26
  %84 = add nuw nsw i32 %15, 816, !dbg !26
  %85 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %84, !dbg !26
  %86 = load float, ptr addrspace(3) %85, align 4, !dbg !26
  %87 = add nuw nsw i32 %15, 1088, !dbg !26
  %88 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %87, !dbg !26
  %89 = load float, ptr addrspace(3) %88, align 4, !dbg !26
  %90 = add nuw nsw i32 %15, 1360, !dbg !26
  %91 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %90, !dbg !26
  %92 = load float, ptr addrspace(3) %91, align 4, !dbg !26
  %93 = add nuw nsw i32 %15, 1632, !dbg !26
  %94 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %93, !dbg !26
  %95 = load float, ptr addrspace(3) %94, align 4, !dbg !26
  %96 = add nuw nsw i32 %15, 1904, !dbg !26
  %97 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %96, !dbg !26
  %98 = load float, ptr addrspace(3) %97, align 4, !dbg !26
  %99 = add nuw nsw i32 %15, 2176, !dbg !26
  %100 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %99, !dbg !26
  %101 = load float, ptr addrspace(3) %100, align 4, !dbg !26
  %102 = add nuw nsw i32 %15, 2448, !dbg !26
  %103 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %102, !dbg !26
  %104 = load float, ptr addrspace(3) %103, align 4, !dbg !26
  %105 = add nuw nsw i32 %15, 2720, !dbg !26
  %106 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %105, !dbg !26
  %107 = load float, ptr addrspace(3) %106, align 4, !dbg !26
  %108 = add nuw nsw i32 %15, 2992, !dbg !26
  %109 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %108, !dbg !26
  %110 = load float, ptr addrspace(3) %109, align 4, !dbg !26
  %111 = add nuw nsw i32 %15, 3264, !dbg !26
  %112 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %111, !dbg !26
  %113 = load float, ptr addrspace(3) %112, align 4, !dbg !26
  %114 = add nuw nsw i32 %15, 3536, !dbg !26
  %115 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %114, !dbg !26
  %116 = load float, ptr addrspace(3) %115, align 4, !dbg !26
  %117 = add nuw nsw i32 %15, 3808, !dbg !26
  %118 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %117, !dbg !26
  %119 = load float, ptr addrspace(3) %118, align 4, !dbg !26
  %120 = add nuw nsw i32 %15, 4080, !dbg !26
  %121 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %120, !dbg !26
  %122 = load float, ptr addrspace(3) %121, align 4, !dbg !26
  %123 = sext i32 %33 to i64, !dbg !27
  %124 = getelementptr float, ptr addrspace(1) %1, i64 %123, !dbg !27
  %125 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %124, i1 %22) #4, !dbg !28
  %126 = getelementptr float, ptr addrspace(1) %2, i64 %123, !dbg !29
  %127 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %126, i1 %22) #4, !dbg !30
  %128 = bitcast i32 %127 to float, !dbg !30
  %129 = getelementptr float, ptr addrspace(1) %3, i64 %123, !dbg !31
  %130 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %129, i1 %22) #4, !dbg !32
  %131 = getelementptr float, ptr addrspace(1) %4, i64 %123, !dbg !33
  %132 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %131, i1 %22) #4, !dbg !34
  %133 = fadd float %128, 0x3EE4F8B580000000, !dbg !35
  %134 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i = icmp eq i32 %134, 0, !dbg !36
  %135 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i = icmp eq i32 %135, 0, !dbg !36
  br i1 %.not.i, label %141, label %136, !dbg !36

136:                                              ; preds = %9
  br i1 %.not1.i, label %139, label %137, !dbg !36

137:                                              ; preds = %136
  %138 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %133) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

139:                                              ; preds = %136
  %140 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %133) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

141:                                              ; preds = %9
  br i1 %.not1.i, label %144, label %142, !dbg !36

142:                                              ; preds = %141
  %143 = tail call float @llvm.nvvm.sqrt.rn.f(float %133) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

144:                                              ; preds = %141
  %145 = tail call float @llvm.nvvm.sqrt.approx.f(float %133) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

__nv_sqrtf.exit:                                  ; preds = %137, %139, %142, %144
  %.0.i = phi float [ %138, %137 ], [ %140, %139 ], [ %143, %142 ], [ %145, %144 ], !dbg !36
  %146 = shl i32 %12, 2, !dbg !17
  %147 = and i32 %146, 12, !dbg !17
  %148 = or disjoint i32 %24, %147, !dbg !18
  %149 = lshr i32 %12, 2, !dbg !12
  %150 = and i32 %149, 63, !dbg !12
  %151 = or disjoint i32 %150, %11, !dbg !13
  %152 = or disjoint i32 %151, 192, !dbg !13
  %153 = icmp slt i32 %152, 512, !dbg !14
  %154 = or disjoint i32 %151, 128, !dbg !13
  %155 = icmp slt i32 %154, 512, !dbg !14
  %156 = or disjoint i32 %151, 64, !dbg !13
  %157 = icmp slt i32 %156, 512, !dbg !14
  %158 = icmp slt i32 %151, 512, !dbg !14
  %159 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !37
  %160 = insertelement <16 x float> poison, float %122, i64 0, !dbg !38
  %161 = insertelement <16 x float> %160, float %119, i64 1, !dbg !38
  %162 = insertelement <16 x float> %161, float %116, i64 2, !dbg !38
  %163 = insertelement <16 x float> %162, float %113, i64 3, !dbg !38
  %164 = insertelement <16 x float> %163, float %110, i64 4, !dbg !38
  %165 = insertelement <16 x float> %164, float %107, i64 5, !dbg !38
  %166 = insertelement <16 x float> %165, float %104, i64 6, !dbg !38
  %167 = insertelement <16 x float> %166, float %101, i64 7, !dbg !38
  %168 = insertelement <16 x float> %167, float %98, i64 8, !dbg !38
  %169 = insertelement <16 x float> %168, float %95, i64 9, !dbg !38
  %170 = insertelement <16 x float> %169, float %92, i64 10, !dbg !38
  %171 = insertelement <16 x float> %170, float %89, i64 11, !dbg !38
  %172 = insertelement <16 x float> %171, float %86, i64 12, !dbg !38
  %173 = insertelement <16 x float> %172, float %83, i64 13, !dbg !38
  %174 = insertelement <16 x float> %173, float %80, i64 14, !dbg !38
  %175 = insertelement <16 x float> %174, float %77, i64 15, !dbg !38
  %176 = insertelement <16 x i32> poison, i32 %125, i64 0, !dbg !38
  %177 = bitcast <16 x i32> %176 to <16 x float>, !dbg !38
  %178 = shufflevector <16 x float> %177, <16 x float> poison, <16 x i32> zeroinitializer, !dbg !38
  %179 = fsub <16 x float> %175, %178, !dbg !38
  %180 = insertelement <16 x float> poison, float %159, i64 0, !dbg !39
  %181 = shufflevector <16 x float> %180, <16 x float> poison, <16 x i32> zeroinitializer, !dbg !39
  %182 = fmul <16 x float> %179, %181, !dbg !39
  %183 = insertelement <16 x i32> poison, i32 %130, i64 0, !dbg !40
  %184 = bitcast <16 x i32> %183 to <16 x float>, !dbg !40
  %185 = shufflevector <16 x float> %184, <16 x float> poison, <16 x i32> zeroinitializer, !dbg !40
  %186 = fmul <16 x float> %182, %185, !dbg !40
  %187 = insertelement <16 x i32> poison, i32 %132, i64 0, !dbg !41
  %188 = bitcast <16 x i32> %187 to <16 x float>, !dbg !41
  %189 = shufflevector <16 x float> %188, <16 x float> poison, <16 x i32> zeroinitializer, !dbg !41
  %190 = fadd <16 x float> %186, %189, !dbg !41
  %191 = fcmp olt <16 x float> %190, zeroinitializer, !dbg !42
  %192 = select <16 x i1> %191, <16 x float> zeroinitializer, <16 x float> %190, !dbg !46
  %193 = fcmp ole <16 x float> %192, zeroinitializer, !dbg !47
  %194 = shl i32 %151, 12, !dbg !48
  %195 = shl i32 %156, 12, !dbg !48
  %196 = shl i32 %154, 12, !dbg !48
  %197 = shl i32 %152, 12, !dbg !48
  %198 = add i32 %148, %194, !dbg !49
  %199 = add i32 %148, %195, !dbg !49
  %200 = add i32 %148, %196, !dbg !49
  %201 = add i32 %148, %197, !dbg !49
  %202 = sext i32 %198 to i64, !dbg !50
  %203 = getelementptr float, ptr addrspace(1) %5, i64 %202, !dbg !50
  %204 = sext i32 %199 to i64, !dbg !50
  %205 = getelementptr float, ptr addrspace(1) %5, i64 %204, !dbg !50
  %206 = sext i32 %200 to i64, !dbg !50
  %207 = getelementptr float, ptr addrspace(1) %5, i64 %206, !dbg !50
  %208 = sext i32 %201 to i64, !dbg !50
  %209 = getelementptr float, ptr addrspace(1) %5, i64 %208, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %210 = and i32 %146, 1020, !dbg !51
  %211 = lshr exact i32 %69, 2, !dbg !51
  %212 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %211, !dbg !51
  %213 = getelementptr inbounds float, ptr addrspace(3) %212, i32 %69, !dbg !51
  %214 = extractelement <16 x float> %192, i64 15, !dbg !51
  %215 = bitcast float %214 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %213, <1 x i32> %215, i1 true) #4, !dbg !51
  %216 = or disjoint i32 %69, 1, !dbg !51
  %217 = getelementptr inbounds float, ptr addrspace(3) %212, i32 %216, !dbg !51
  %218 = extractelement <16 x float> %192, i64 14, !dbg !51
  %219 = bitcast float %218 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %217, <1 x i32> %219, i1 true) #4, !dbg !51
  %220 = or disjoint i32 %69, 2, !dbg !51
  %221 = getelementptr inbounds float, ptr addrspace(3) %212, i32 %220, !dbg !51
  %222 = extractelement <16 x float> %192, i64 13, !dbg !51
  %223 = bitcast float %222 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %221, <1 x i32> %223, i1 true) #4, !dbg !51
  %224 = or disjoint i32 %69, 3, !dbg !51
  %225 = getelementptr inbounds float, ptr addrspace(3) %212, i32 %224, !dbg !51
  %226 = extractelement <16 x float> %192, i64 12, !dbg !51
  %227 = bitcast float %226 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %225, <1 x i32> %227, i1 true) #4, !dbg !51
  %228 = or disjoint i32 %69, 4, !dbg !51
  %229 = getelementptr inbounds float, ptr addrspace(3) %212, i32 %228, !dbg !51
  %230 = extractelement <16 x float> %192, i64 11, !dbg !51
  %231 = bitcast float %230 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %229, <1 x i32> %231, i1 true) #4, !dbg !51
  %232 = or disjoint i32 %69, 5, !dbg !51
  %233 = getelementptr inbounds float, ptr addrspace(3) %212, i32 %232, !dbg !51
  %234 = extractelement <16 x float> %192, i64 10, !dbg !51
  %235 = bitcast float %234 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %233, <1 x i32> %235, i1 true) #4, !dbg !51
  %236 = or disjoint i32 %69, 6, !dbg !51
  %237 = getelementptr inbounds float, ptr addrspace(3) %212, i32 %236, !dbg !51
  %238 = extractelement <16 x float> %192, i64 9, !dbg !51
  %239 = bitcast float %238 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %237, <1 x i32> %239, i1 true) #4, !dbg !51
  %240 = or disjoint i32 %69, 7, !dbg !51
  %241 = getelementptr inbounds float, ptr addrspace(3) %212, i32 %240, !dbg !51
  %242 = extractelement <16 x float> %192, i64 8, !dbg !51
  %243 = bitcast float %242 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %241, <1 x i32> %243, i1 true) #4, !dbg !51
  %244 = or disjoint i32 %69, 8, !dbg !51
  %245 = getelementptr inbounds float, ptr addrspace(3) %212, i32 %244, !dbg !51
  %246 = extractelement <16 x float> %192, i64 7, !dbg !51
  %247 = bitcast float %246 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %245, <1 x i32> %247, i1 true) #4, !dbg !51
  %248 = or disjoint i32 %69, 9, !dbg !51
  %249 = getelementptr inbounds float, ptr addrspace(3) %212, i32 %248, !dbg !51
  %250 = extractelement <16 x float> %192, i64 6, !dbg !51
  %251 = bitcast float %250 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %249, <1 x i32> %251, i1 true) #4, !dbg !51
  %252 = or disjoint i32 %69, 10, !dbg !51
  %253 = getelementptr inbounds float, ptr addrspace(3) %212, i32 %252, !dbg !51
  %254 = extractelement <16 x float> %192, i64 5, !dbg !51
  %255 = bitcast float %254 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %253, <1 x i32> %255, i1 true) #4, !dbg !51
  %256 = or disjoint i32 %69, 11, !dbg !51
  %257 = getelementptr inbounds float, ptr addrspace(3) %212, i32 %256, !dbg !51
  %258 = extractelement <16 x float> %192, i64 4, !dbg !51
  %259 = bitcast float %258 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %257, <1 x i32> %259, i1 true) #4, !dbg !51
  %260 = or disjoint i32 %69, 12, !dbg !51
  %261 = getelementptr inbounds float, ptr addrspace(3) %212, i32 %260, !dbg !51
  %262 = extractelement <16 x float> %192, i64 3, !dbg !51
  %263 = bitcast float %262 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %261, <1 x i32> %263, i1 true) #4, !dbg !51
  %264 = or disjoint i32 %69, 13, !dbg !51
  %265 = getelementptr inbounds float, ptr addrspace(3) %212, i32 %264, !dbg !51
  %266 = extractelement <16 x float> %192, i64 2, !dbg !51
  %267 = bitcast float %266 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %265, <1 x i32> %267, i1 true) #4, !dbg !51
  %268 = or disjoint i32 %69, 14, !dbg !51
  %269 = getelementptr inbounds float, ptr addrspace(3) %212, i32 %268, !dbg !51
  %270 = extractelement <16 x float> %192, i64 1, !dbg !51
  %271 = bitcast float %270 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %269, <1 x i32> %271, i1 true) #4, !dbg !51
  %272 = or disjoint i32 %69, 15, !dbg !51
  %273 = getelementptr inbounds float, ptr addrspace(3) %212, i32 %272, !dbg !51
  %274 = extractelement <16 x float> %192, i64 0, !dbg !51
  %275 = bitcast float %274 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %273, <1 x i32> %275, i1 true) #4, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %276 = lshr i32 %210, 4, !dbg !51
  %277 = getelementptr float, ptr addrspace(3) @global_smem, i32 %276, !dbg !51
  %278 = getelementptr float, ptr addrspace(3) %277, i32 %210, !dbg !51
  %279 = load i32, ptr addrspace(3) %278, align 4, !dbg !51
  %280 = or disjoint i32 %210, 1, !dbg !51
  %281 = getelementptr float, ptr addrspace(3) %277, i32 %280, !dbg !51
  %282 = load i32, ptr addrspace(3) %281, align 4, !dbg !51
  %283 = or disjoint i32 %210, 2, !dbg !51
  %284 = getelementptr float, ptr addrspace(3) %277, i32 %283, !dbg !51
  %285 = load i32, ptr addrspace(3) %284, align 4, !dbg !51
  %286 = or disjoint i32 %210, 3, !dbg !51
  %287 = getelementptr float, ptr addrspace(3) %277, i32 %286, !dbg !51
  %288 = load i32, ptr addrspace(3) %287, align 4, !dbg !51
  %289 = or disjoint i32 %210, 1024, !dbg !51
  %290 = lshr i32 %289, 4, !dbg !51
  %291 = getelementptr float, ptr addrspace(3) @global_smem, i32 %290, !dbg !51
  %292 = getelementptr float, ptr addrspace(3) %291, i32 %289, !dbg !51
  %293 = load i32, ptr addrspace(3) %292, align 4, !dbg !51
  %294 = or disjoint i32 %210, 1025, !dbg !51
  %295 = lshr i32 %294, 4, !dbg !51
  %296 = getelementptr float, ptr addrspace(3) @global_smem, i32 %295, !dbg !51
  %297 = getelementptr float, ptr addrspace(3) %296, i32 %294, !dbg !51
  %298 = load i32, ptr addrspace(3) %297, align 4, !dbg !51
  %299 = or disjoint i32 %210, 1026, !dbg !51
  %300 = lshr i32 %299, 4, !dbg !51
  %301 = getelementptr float, ptr addrspace(3) @global_smem, i32 %300, !dbg !51
  %302 = getelementptr float, ptr addrspace(3) %301, i32 %299, !dbg !51
  %303 = load i32, ptr addrspace(3) %302, align 4, !dbg !51
  %304 = or disjoint i32 %210, 1027, !dbg !51
  %305 = lshr i32 %304, 4, !dbg !51
  %306 = getelementptr float, ptr addrspace(3) @global_smem, i32 %305, !dbg !51
  %307 = getelementptr float, ptr addrspace(3) %306, i32 %304, !dbg !51
  %308 = load i32, ptr addrspace(3) %307, align 4, !dbg !51
  %309 = or disjoint i32 %210, 2048, !dbg !51
  %310 = lshr i32 %309, 4, !dbg !51
  %311 = getelementptr float, ptr addrspace(3) @global_smem, i32 %310, !dbg !51
  %312 = getelementptr float, ptr addrspace(3) %311, i32 %309, !dbg !51
  %313 = load i32, ptr addrspace(3) %312, align 4, !dbg !51
  %314 = or disjoint i32 %210, 2049, !dbg !51
  %315 = lshr i32 %314, 4, !dbg !51
  %316 = getelementptr float, ptr addrspace(3) @global_smem, i32 %315, !dbg !51
  %317 = getelementptr float, ptr addrspace(3) %316, i32 %314, !dbg !51
  %318 = load i32, ptr addrspace(3) %317, align 4, !dbg !51
  %319 = or disjoint i32 %210, 2050, !dbg !51
  %320 = lshr i32 %319, 4, !dbg !51
  %321 = getelementptr float, ptr addrspace(3) @global_smem, i32 %320, !dbg !51
  %322 = getelementptr float, ptr addrspace(3) %321, i32 %319, !dbg !51
  %323 = load i32, ptr addrspace(3) %322, align 4, !dbg !51
  %324 = or disjoint i32 %210, 2051, !dbg !51
  %325 = lshr i32 %324, 4, !dbg !51
  %326 = getelementptr float, ptr addrspace(3) @global_smem, i32 %325, !dbg !51
  %327 = getelementptr float, ptr addrspace(3) %326, i32 %324, !dbg !51
  %328 = load i32, ptr addrspace(3) %327, align 4, !dbg !51
  %329 = or disjoint i32 %210, 3072, !dbg !51
  %330 = lshr i32 %329, 4, !dbg !51
  %331 = getelementptr float, ptr addrspace(3) @global_smem, i32 %330, !dbg !51
  %332 = getelementptr float, ptr addrspace(3) %331, i32 %329, !dbg !51
  %333 = load i32, ptr addrspace(3) %332, align 4, !dbg !51
  %334 = or disjoint i32 %210, 3073, !dbg !51
  %335 = lshr i32 %334, 4, !dbg !51
  %336 = getelementptr float, ptr addrspace(3) @global_smem, i32 %335, !dbg !51
  %337 = getelementptr float, ptr addrspace(3) %336, i32 %334, !dbg !51
  %338 = load i32, ptr addrspace(3) %337, align 4, !dbg !51
  %339 = or disjoint i32 %210, 3074, !dbg !51
  %340 = lshr i32 %339, 4, !dbg !51
  %341 = getelementptr float, ptr addrspace(3) @global_smem, i32 %340, !dbg !51
  %342 = getelementptr float, ptr addrspace(3) %341, i32 %339, !dbg !51
  %343 = load i32, ptr addrspace(3) %342, align 4, !dbg !51
  %344 = or disjoint i32 %210, 3075, !dbg !51
  %345 = lshr i32 %344, 4, !dbg !51
  %346 = getelementptr float, ptr addrspace(3) @global_smem, i32 %345, !dbg !51
  %347 = getelementptr float, ptr addrspace(3) %346, i32 %344, !dbg !51
  %348 = load i32, ptr addrspace(3) %347, align 4, !dbg !51
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %279, i32 %282, i32 %285, i32 %288, ptr addrspace(1) %203, i1 %158) #4, !dbg !51
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %293, i32 %298, i32 %303, i32 %308, ptr addrspace(1) %205, i1 %157) #4, !dbg !51
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %313, i32 %318, i32 %323, i32 %328, ptr addrspace(1) %207, i1 %155) #4, !dbg !51
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %333, i32 %338, i32 %343, i32 %348, ptr addrspace(1) %209, i1 %153) #4, !dbg !51
  %349 = getelementptr i1, ptr addrspace(1) %6, i64 %41, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %350 = extractelement <16 x i1> %193, i64 15, !dbg !53
  %351 = zext i1 %350 to i8, !dbg !53
  %352 = extractelement <16 x i1> %193, i64 14, !dbg !53
  %353 = zext i1 %352 to i8, !dbg !53
  %354 = extractelement <16 x i1> %193, i64 13, !dbg !53
  %355 = zext i1 %354 to i8, !dbg !53
  %356 = extractelement <16 x i1> %193, i64 12, !dbg !53
  %357 = zext i1 %356 to i8, !dbg !53
  %358 = extractelement <16 x i1> %193, i64 11, !dbg !53
  %359 = zext i1 %358 to i8, !dbg !53
  %360 = extractelement <16 x i1> %193, i64 10, !dbg !53
  %361 = zext i1 %360 to i8, !dbg !53
  %362 = extractelement <16 x i1> %193, i64 9, !dbg !53
  %363 = zext i1 %362 to i8, !dbg !53
  %364 = extractelement <16 x i1> %193, i64 8, !dbg !53
  %365 = zext i1 %364 to i8, !dbg !53
  %366 = extractelement <16 x i1> %193, i64 7, !dbg !53
  %367 = zext i1 %366 to i8, !dbg !53
  %368 = extractelement <16 x i1> %193, i64 6, !dbg !53
  %369 = zext i1 %368 to i8, !dbg !53
  %370 = extractelement <16 x i1> %193, i64 5, !dbg !53
  %371 = zext i1 %370 to i8, !dbg !53
  %372 = extractelement <16 x i1> %193, i64 4, !dbg !53
  %373 = zext i1 %372 to i8, !dbg !53
  %374 = extractelement <16 x i1> %193, i64 3, !dbg !53
  %375 = zext i1 %374 to i8, !dbg !53
  %376 = extractelement <16 x i1> %193, i64 2, !dbg !53
  %377 = zext i1 %376 to i8, !dbg !53
  %378 = extractelement <16 x i1> %193, i64 1, !dbg !53
  %379 = zext i1 %378 to i8, !dbg !53
  %380 = extractelement <16 x i1> %193, i64 0, !dbg !53
  %381 = zext i1 %380 to i8, !dbg !53
  %382 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %15, !dbg !53
  %383 = insertelement <1 x i8> poison, i8 %351, i64 0, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %382, <1 x i8> %383, i1 true) #4, !dbg !53
  %384 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %78, !dbg !53
  %385 = insertelement <1 x i8> poison, i8 %353, i64 0, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %384, <1 x i8> %385, i1 true) #4, !dbg !53
  %386 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %81, !dbg !53
  %387 = insertelement <1 x i8> poison, i8 %355, i64 0, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %386, <1 x i8> %387, i1 true) #4, !dbg !53
  %388 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %84, !dbg !53
  %389 = insertelement <1 x i8> poison, i8 %357, i64 0, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %388, <1 x i8> %389, i1 true) #4, !dbg !53
  %390 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %87, !dbg !53
  %391 = insertelement <1 x i8> poison, i8 %359, i64 0, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %390, <1 x i8> %391, i1 true) #4, !dbg !53
  %392 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %90, !dbg !53
  %393 = insertelement <1 x i8> poison, i8 %361, i64 0, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %392, <1 x i8> %393, i1 true) #4, !dbg !53
  %394 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %93, !dbg !53
  %395 = insertelement <1 x i8> poison, i8 %363, i64 0, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %394, <1 x i8> %395, i1 true) #4, !dbg !53
  %396 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %96, !dbg !53
  %397 = insertelement <1 x i8> poison, i8 %365, i64 0, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %396, <1 x i8> %397, i1 true) #4, !dbg !53
  %398 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %99, !dbg !53
  %399 = insertelement <1 x i8> poison, i8 %367, i64 0, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %398, <1 x i8> %399, i1 true) #4, !dbg !53
  %400 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %102, !dbg !53
  %401 = insertelement <1 x i8> poison, i8 %369, i64 0, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %400, <1 x i8> %401, i1 true) #4, !dbg !53
  %402 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %105, !dbg !53
  %403 = insertelement <1 x i8> poison, i8 %371, i64 0, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %402, <1 x i8> %403, i1 true) #4, !dbg !53
  %404 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %108, !dbg !53
  %405 = insertelement <1 x i8> poison, i8 %373, i64 0, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %404, <1 x i8> %405, i1 true) #4, !dbg !53
  %406 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %111, !dbg !53
  %407 = insertelement <1 x i8> poison, i8 %375, i64 0, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %406, <1 x i8> %407, i1 true) #4, !dbg !53
  %408 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %114, !dbg !53
  %409 = insertelement <1 x i8> poison, i8 %377, i64 0, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %408, <1 x i8> %409, i1 true) #4, !dbg !53
  %410 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %117, !dbg !53
  %411 = insertelement <1 x i8> poison, i8 %379, i64 0, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %410, <1 x i8> %411, i1 true) #4, !dbg !53
  %412 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %120, !dbg !53
  %413 = insertelement <1 x i8> poison, i8 %381, i64 0, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %412, <1 x i8> %413, i1 true) #4, !dbg !53
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %414 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %71, !dbg !53
  %415 = load <4 x i32>, ptr addrspace(3) %414, align 16, !dbg !53
  %416 = bitcast <4 x i32> %415 to <128 x i1>, !dbg !53
  %417 = extractelement <128 x i1> %416, i64 24, !dbg !53
  %418 = extractelement <128 x i1> %416, i64 56, !dbg !53
  %419 = extractelement <128 x i1> %416, i64 88, !dbg !53
  %420 = extractelement <128 x i1> %416, i64 120, !dbg !53
  %421 = bitcast <4 x i32> %415 to <16 x i8>, !dbg !53
  %422 = extractelement <16 x i8> %421, i64 0, !dbg !53
  %423 = and i8 %422, 1, !dbg !53
  %424 = shufflevector <16 x i8> %421, <16 x i8> poison, <2 x i32> <i32 1, i32 2>, !dbg !53
  %425 = and <2 x i8> %424, splat (i8 1), !dbg !53
  %426 = zext i1 %417 to i8, !dbg !53
  %427 = extractelement <16 x i8> %421, i64 4, !dbg !53
  %428 = and i8 %427, 1, !dbg !53
  %429 = shufflevector <16 x i8> %421, <16 x i8> poison, <2 x i32> <i32 5, i32 6>, !dbg !53
  %430 = and <2 x i8> %429, splat (i8 1), !dbg !53
  %431 = zext i1 %418 to i8, !dbg !53
  %432 = extractelement <16 x i8> %421, i64 8, !dbg !53
  %433 = and i8 %432, 1, !dbg !53
  %434 = shufflevector <16 x i8> %421, <16 x i8> poison, <2 x i32> <i32 9, i32 10>, !dbg !53
  %435 = and <2 x i8> %434, splat (i8 1), !dbg !53
  %436 = zext i1 %419 to i8, !dbg !53
  %437 = extractelement <16 x i8> %421, i64 12, !dbg !53
  %438 = and i8 %437, 1, !dbg !53
  %439 = shufflevector <16 x i8> %421, <16 x i8> poison, <2 x i32> <i32 13, i32 14>, !dbg !53
  %440 = and <2 x i8> %439, splat (i8 1), !dbg !53
  %441 = zext i1 %420 to i8, !dbg !53
  %442 = insertelement <4 x i8> poison, i8 %423, i64 0, !dbg !53
  %443 = shufflevector <2 x i8> %425, <2 x i8> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !53
  %444 = shufflevector <4 x i8> %442, <4 x i8> %443, <4 x i32> <i32 0, i32 4, i32 5, i32 poison>, !dbg !53
  %445 = insertelement <4 x i8> %444, i8 %426, i64 3, !dbg !53
  %446 = bitcast <4 x i8> %445 to i32, !dbg !53
  %447 = insertelement <4 x i8> poison, i8 %428, i64 0, !dbg !53
  %448 = shufflevector <2 x i8> %430, <2 x i8> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !53
  %449 = shufflevector <4 x i8> %447, <4 x i8> %448, <4 x i32> <i32 0, i32 4, i32 5, i32 poison>, !dbg !53
  %450 = insertelement <4 x i8> %449, i8 %431, i64 3, !dbg !53
  %451 = bitcast <4 x i8> %450 to i32, !dbg !53
  %452 = insertelement <4 x i8> poison, i8 %433, i64 0, !dbg !53
  %453 = shufflevector <2 x i8> %435, <2 x i8> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !53
  %454 = shufflevector <4 x i8> %452, <4 x i8> %453, <4 x i32> <i32 0, i32 4, i32 5, i32 poison>, !dbg !53
  %455 = insertelement <4 x i8> %454, i8 %436, i64 3, !dbg !53
  %456 = bitcast <4 x i8> %455 to i32, !dbg !53
  %457 = insertelement <4 x i8> poison, i8 %438, i64 0, !dbg !53
  %458 = shufflevector <2 x i8> %440, <2 x i8> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !53
  %459 = shufflevector <4 x i8> %457, <4 x i8> %458, <4 x i32> <i32 0, i32 4, i32 5, i32 poison>, !dbg !53
  %460 = insertelement <4 x i8> %459, i8 %441, i64 3, !dbg !53
  %461 = bitcast <4 x i8> %460 to i32, !dbg !53
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %446, i32 %451, i32 %456, i32 %461, ptr addrspace(1) %349, i1 %21) #4, !dbg !53
  ret void, !dbg !54
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "crok7bpymkf7mdejpl4kfrlwkyvrj6qr4fxnzeldeqy5232r2d3g.py", directory: "inductor_cache/ro")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_5, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_5, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_5", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_5", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 39, scope: !7)
!22 = !DILocation(line: 32, column: 51, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 44, scope: !7)
!25 = !DILocation(line: 32, column: 30, scope: !7)
!26 = !DILocation(line: 32, column: 56, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 33, column: 35, scope: !7)
!29 = !DILocation(line: 34, column: 30, scope: !7)
!30 = !DILocation(line: 34, column: 35, scope: !7)
!31 = !DILocation(line: 35, column: 31, scope: !7)
!32 = !DILocation(line: 35, column: 36, scope: !7)
!33 = !DILocation(line: 36, column: 31, scope: !7)
!34 = !DILocation(line: 36, column: 36, scope: !7)
!35 = !DILocation(line: 39, column: 18, scope: !7)
!36 = !DILocation(line: 40, column: 26, scope: !7)
!37 = !DILocation(line: 42, column: 18, scope: !7)
!38 = !DILocation(line: 37, column: 18, scope: !7)
!39 = !DILocation(line: 45, column: 19, scope: !7)
!40 = !DILocation(line: 46, column: 20, scope: !7)
!41 = !DILocation(line: 47, column: 20, scope: !7)
!42 = !DILocation(line: 118, column: 15, scope: !43, inlinedAt: !45)
!43 = distinct !DILexicalBlockFile(scope: !7, file: !44, discriminator: 0)
!44 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!45 = !DILocation(line: 49, column: 42, scope: !7)
!46 = !DILocation(line: 121, column: 29, scope: !43, inlinedAt: !45)
!47 = !DILocation(line: 51, column: 21, scope: !7)
!48 = !DILocation(line: 52, column: 35, scope: !7)
!49 = !DILocation(line: 52, column: 30, scope: !7)
!50 = !DILocation(line: 52, column: 25, scope: !7)
!51 = !DILocation(line: 52, column: 47, scope: !7)
!52 = !DILocation(line: 53, column: 25, scope: !7)
!53 = !DILocation(line: 53, column: 58, scope: !7)
!54 = !DILocation(line: 53, column: 4, scope: !7)
