; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %10 = shl i32 %9, 9, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 1, !dbg !12
  %13 = and i32 %12, 510, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = sdiv i32 %14, 16384, !dbg !14
  %16 = srem i32 %15, 32, !dbg !15
  %17 = sext i32 %14 to i64, !dbg !16
  %18 = getelementptr float, ptr addrspace(1) %0, i64 %17, !dbg !16
  %19 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %18, i1 true) #3, !dbg !17
  %20 = sext i32 %16 to i64, !dbg !18
  %21 = getelementptr float, ptr addrspace(1) %1, i64 %20, !dbg !18
  %22 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %21, i1 true) #3, !dbg !19
  %23 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %21, i1 true) #3, !dbg !19
  %24 = getelementptr float, ptr addrspace(1) %2, i64 %20, !dbg !20
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 true) #3, !dbg !21
  %26 = bitcast i32 %25 to float, !dbg !21
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 true) #3, !dbg !21
  %28 = bitcast i32 %27 to float, !dbg !21
  %29 = getelementptr float, ptr addrspace(1) %3, i64 %20, !dbg !22
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 true) #3, !dbg !23
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 true) #3, !dbg !23
  %32 = getelementptr float, ptr addrspace(1) %4, i64 %20, !dbg !24
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #3, !dbg !25
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #3, !dbg !25
  %35 = fadd float %26, 0x3EE4F8B580000000, !dbg !26
  %36 = fadd float %28, 0x3EE4F8B580000000, !dbg !26
  %37 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !27
  %.not.i = icmp eq i32 %37, 0, !dbg !27
  %38 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !27
  %.not1.i = icmp eq i32 %38, 0, !dbg !27
  br i1 %.not.i, label %44, label %39, !dbg !27

39:                                               ; preds = %8
  br i1 %.not1.i, label %42, label %40, !dbg !27

40:                                               ; preds = %39
  %41 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %35) #3, !dbg !27
  br label %__nv_sqrtf.exit, !dbg !27

42:                                               ; preds = %39
  %43 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %35) #3, !dbg !27
  br label %__nv_sqrtf.exit, !dbg !27

44:                                               ; preds = %8
  br i1 %.not1.i, label %47, label %45, !dbg !27

45:                                               ; preds = %44
  %46 = tail call float @llvm.nvvm.sqrt.rn.f(float %35) #3, !dbg !27
  br label %__nv_sqrtf.exit, !dbg !27

47:                                               ; preds = %44
  %48 = tail call float @llvm.nvvm.sqrt.approx.f(float %35) #3, !dbg !27
  br label %__nv_sqrtf.exit, !dbg !27

__nv_sqrtf.exit:                                  ; preds = %40, %42, %45, %47
  %.0.i = phi float [ %41, %40 ], [ %43, %42 ], [ %46, %45 ], [ %48, %47 ], !dbg !27
  %49 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !27
  %.not.i1 = icmp eq i32 %49, 0, !dbg !27
  %50 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !27
  %.not1.i4 = icmp eq i32 %50, 0, !dbg !27
  br i1 %.not.i1, label %56, label %51, !dbg !27

51:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %54, label %52, !dbg !27

52:                                               ; preds = %51
  %53 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %36) #3, !dbg !27
  br label %__nv_sqrtf.exit5, !dbg !27

54:                                               ; preds = %51
  %55 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %36) #3, !dbg !27
  br label %__nv_sqrtf.exit5, !dbg !27

56:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %59, label %57, !dbg !27

57:                                               ; preds = %56
  %58 = tail call float @llvm.nvvm.sqrt.rn.f(float %36) #3, !dbg !27
  br label %__nv_sqrtf.exit5, !dbg !27

59:                                               ; preds = %56
  %60 = tail call float @llvm.nvvm.sqrt.approx.f(float %36) #3, !dbg !27
  br label %__nv_sqrtf.exit5, !dbg !27

__nv_sqrtf.exit5:                                 ; preds = %52, %54, %57, %59
  %.0.i3 = phi float [ %53, %52 ], [ %55, %54 ], [ %58, %57 ], [ %60, %59 ], !dbg !27
  %61 = extractvalue { i32, i32 } %19, 1, !dbg !17
  %62 = insertelement <2 x i32> poison, i32 %22, i64 0, !dbg !19
  %63 = insertelement <2 x i32> %62, i32 %23, i64 1, !dbg !19
  %64 = bitcast <2 x i32> %63 to <2 x float>, !dbg !19
  %65 = extractvalue { i32, i32 } %19, 0, !dbg !17
  %66 = insertelement <2 x i32> poison, i32 %33, i64 0, !dbg !25
  %67 = insertelement <2 x i32> %66, i32 %34, i64 1, !dbg !25
  %68 = bitcast <2 x i32> %67 to <2 x float>, !dbg !25
  %69 = insertelement <2 x i32> poison, i32 %30, i64 0, !dbg !23
  %70 = insertelement <2 x i32> %69, i32 %31, i64 1, !dbg !23
  %71 = bitcast <2 x i32> %70 to <2 x float>, !dbg !23
  %72 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !28
  %73 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !28
  %74 = getelementptr float, ptr addrspace(1) %5, i64 %17, !dbg !29
  %75 = getelementptr i1, ptr addrspace(1) %6, i64 %17, !dbg !30
  %76 = insertelement <2 x i32> poison, i32 %65, i64 0, !dbg !17
  %77 = insertelement <2 x i32> %76, i32 %61, i64 1, !dbg !17
  %78 = bitcast <2 x i32> %77 to <2 x float>, !dbg !17
  %79 = fsub <2 x float> %78, %64, !dbg !31
  %80 = insertelement <2 x float> poison, float %72, i64 0, !dbg !32
  %81 = insertelement <2 x float> %80, float %73, i64 1, !dbg !32
  %82 = fmul <2 x float> %79, %81, !dbg !32
  %83 = fmul <2 x float> %82, %71, !dbg !33
  %84 = fadd <2 x float> %83, %68, !dbg !34
  %85 = fcmp olt <2 x float> %84, zeroinitializer, !dbg !35
  %86 = select <2 x i1> %85, <2 x float> zeroinitializer, <2 x float> %84, !dbg !39
  %87 = fcmp ole <2 x float> %86, zeroinitializer, !dbg !40
  %bc = bitcast <2 x float> %86 to <2 x i32>, !dbg !41
  %88 = extractelement <2 x i32> %bc, i64 0, !dbg !41
  %bc6 = bitcast <2 x float> %86 to <2 x i32>, !dbg !41
  %89 = extractelement <2 x i32> %bc6, i64 1, !dbg !41
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %88, i32 %89, ptr addrspace(1) %74, i1 true) #3, !dbg !41
  %90 = zext <2 x i1> %87 to <2 x i8>, !dbg !42
  %91 = bitcast <2 x i8> %90 to i16, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %91, ptr addrspace(1) %75, i1 true) #3, !dbg !42
  ret void, !dbg !43
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "chlzll37glxiioyy5d3nl4ecsrvbbbeit3b4ujqblzzwlr3pklfn.py", directory: "inductor_cache/hl")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_1, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_1", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 30, scope: !7)
!16 = !DILocation(line: 26, column: 30, scope: !7)
!17 = !DILocation(line: 26, column: 35, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 35, scope: !7)
!20 = !DILocation(line: 28, column: 30, scope: !7)
!21 = !DILocation(line: 28, column: 35, scope: !7)
!22 = !DILocation(line: 29, column: 31, scope: !7)
!23 = !DILocation(line: 29, column: 36, scope: !7)
!24 = !DILocation(line: 30, column: 31, scope: !7)
!25 = !DILocation(line: 30, column: 36, scope: !7)
!26 = !DILocation(line: 33, column: 18, scope: !7)
!27 = !DILocation(line: 34, column: 26, scope: !7)
!28 = !DILocation(line: 36, column: 18, scope: !7)
!29 = !DILocation(line: 46, column: 25, scope: !7)
!30 = !DILocation(line: 47, column: 25, scope: !7)
!31 = !DILocation(line: 31, column: 18, scope: !7)
!32 = !DILocation(line: 39, column: 19, scope: !7)
!33 = !DILocation(line: 40, column: 20, scope: !7)
!34 = !DILocation(line: 41, column: 20, scope: !7)
!35 = !DILocation(line: 118, column: 15, scope: !36, inlinedAt: !38)
!36 = distinct !DILexicalBlockFile(scope: !7, file: !37, discriminator: 0)
!37 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!38 = !DILocation(line: 43, column: 42, scope: !7)
!39 = !DILocation(line: 121, column: 29, scope: !36, inlinedAt: !38)
!40 = !DILocation(line: 45, column: 21, scope: !7)
!41 = !DILocation(line: 46, column: 37, scope: !7)
!42 = !DILocation(line: 47, column: 37, scope: !7)
!43 = !DILocation(line: 47, column: 4, scope: !7)
