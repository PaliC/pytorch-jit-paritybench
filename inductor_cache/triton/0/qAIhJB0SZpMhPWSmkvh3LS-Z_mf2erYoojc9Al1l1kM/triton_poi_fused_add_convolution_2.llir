; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_add_convolution_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %8 = shl i32 %7, 6, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = shl i32 %9, 2, !dbg !12
  %11 = and i32 %10, 60, !dbg !12
  %12 = lshr i32 %9, 4, !dbg !12
  %13 = and i32 %12, 15, !dbg !12
  %14 = or disjoint i32 %13, 16, !dbg !12
  %15 = or disjoint i32 %13, 32, !dbg !12
  %16 = or disjoint i32 %13, 48, !dbg !12
  %17 = or disjoint i32 %8, %11, !dbg !13
  %18 = or disjoint i32 %8, %13, !dbg !13
  %19 = or disjoint i32 %8, %14, !dbg !13
  %20 = or disjoint i32 %8, %15, !dbg !13
  %21 = or disjoint i32 %8, %16, !dbg !13
  %22 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %23 = shl i32 %22, 6, !dbg !15
  %24 = or disjoint i32 %23, %13, !dbg !16
  %25 = or disjoint i32 %23, %14, !dbg !16
  %26 = or disjoint i32 %23, %15, !dbg !16
  %27 = or disjoint i32 %23, %16, !dbg !16
  %28 = or disjoint i32 %23, %11, !dbg !16
  %.frozen = freeze i32 %17, !dbg !17
  %29 = sdiv i32 %.frozen, 256, !dbg !17
  %30 = mul i32 %29, 256, !dbg !18
  %.decomposed = sub i32 %.frozen, %30, !dbg !18
  %31 = shl i32 %24, 8, !dbg !19
  %32 = shl i32 %25, 8, !dbg !19
  %33 = shl i32 %26, 8, !dbg !19
  %34 = shl i32 %27, 8, !dbg !19
  %35 = shl i32 %29, 20, !dbg !20
  %36 = add i32 %35, %.decomposed, !dbg !21
  %37 = add i32 %36, %31, !dbg !22
  %38 = add i32 %36, %32, !dbg !22
  %39 = add i32 %36, %33, !dbg !22
  %40 = add i32 %36, %34, !dbg !22
  %41 = sext i32 %37 to i64, !dbg !23
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !23
  %43 = sext i32 %38 to i64, !dbg !23
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !23
  %45 = sext i32 %39 to i64, !dbg !23
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !23
  %47 = sext i32 %40 to i64, !dbg !23
  %48 = getelementptr float, ptr addrspace(1) %0, i64 %47, !dbg !23
  %49 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %42, i1 true) #2, !dbg !24
  %50 = extractvalue { i32, i32, i32, i32 } %49, 0, !dbg !24
  %51 = extractvalue { i32, i32, i32, i32 } %49, 1, !dbg !24
  %52 = extractvalue { i32, i32, i32, i32 } %49, 2, !dbg !24
  %53 = extractvalue { i32, i32, i32, i32 } %49, 3, !dbg !24
  %54 = bitcast i32 %50 to float, !dbg !24
  %55 = bitcast i32 %51 to float, !dbg !24
  %56 = bitcast i32 %52 to float, !dbg !24
  %57 = bitcast i32 %53 to float, !dbg !24
  %58 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %44, i1 true) #2, !dbg !24
  %59 = extractvalue { i32, i32, i32, i32 } %58, 0, !dbg !24
  %60 = extractvalue { i32, i32, i32, i32 } %58, 1, !dbg !24
  %61 = extractvalue { i32, i32, i32, i32 } %58, 2, !dbg !24
  %62 = extractvalue { i32, i32, i32, i32 } %58, 3, !dbg !24
  %63 = bitcast i32 %59 to float, !dbg !24
  %64 = bitcast i32 %60 to float, !dbg !24
  %65 = bitcast i32 %61 to float, !dbg !24
  %66 = bitcast i32 %62 to float, !dbg !24
  %67 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %46, i1 true) #2, !dbg !24
  %68 = extractvalue { i32, i32, i32, i32 } %67, 0, !dbg !24
  %69 = extractvalue { i32, i32, i32, i32 } %67, 1, !dbg !24
  %70 = extractvalue { i32, i32, i32, i32 } %67, 2, !dbg !24
  %71 = extractvalue { i32, i32, i32, i32 } %67, 3, !dbg !24
  %72 = bitcast i32 %68 to float, !dbg !24
  %73 = bitcast i32 %69 to float, !dbg !24
  %74 = bitcast i32 %70 to float, !dbg !24
  %75 = bitcast i32 %71 to float, !dbg !24
  %76 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %48, i1 true) #2, !dbg !24
  %77 = extractvalue { i32, i32, i32, i32 } %76, 0, !dbg !24
  %78 = extractvalue { i32, i32, i32, i32 } %76, 1, !dbg !24
  %79 = extractvalue { i32, i32, i32, i32 } %76, 2, !dbg !24
  %80 = extractvalue { i32, i32, i32, i32 } %76, 3, !dbg !24
  %81 = bitcast i32 %77 to float, !dbg !24
  %82 = bitcast i32 %78 to float, !dbg !24
  %83 = bitcast i32 %79 to float, !dbg !24
  %84 = bitcast i32 %80 to float, !dbg !24
  %85 = sext i32 %.decomposed to i64, !dbg !25
  %86 = getelementptr float, ptr addrspace(1) %1, i64 %85, !dbg !25
  %87 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %86, i1 true) #2, !dbg !26
  %88 = extractvalue { i32, i32, i32, i32 } %87, 0, !dbg !26
  %89 = extractvalue { i32, i32, i32, i32 } %87, 1, !dbg !26
  %90 = extractvalue { i32, i32, i32, i32 } %87, 2, !dbg !26
  %91 = extractvalue { i32, i32, i32, i32 } %87, 3, !dbg !26
  %92 = bitcast i32 %88 to float, !dbg !26
  %93 = bitcast i32 %89 to float, !dbg !26
  %94 = bitcast i32 %90 to float, !dbg !26
  %95 = bitcast i32 %91 to float, !dbg !26
  %96 = shl i32 %18, 12, !dbg !27
  %97 = shl i32 %19, 12, !dbg !27
  %98 = shl i32 %20, 12, !dbg !27
  %99 = shl i32 %21, 12, !dbg !27
  %100 = add i32 %28, %96, !dbg !28
  %101 = add i32 %28, %97, !dbg !28
  %102 = add i32 %28, %98, !dbg !28
  %103 = add i32 %28, %99, !dbg !28
  %104 = sext i32 %100 to i64, !dbg !29
  %105 = getelementptr float, ptr addrspace(1) %2, i64 %104, !dbg !29
  %106 = sext i32 %101 to i64, !dbg !29
  %107 = getelementptr float, ptr addrspace(1) %2, i64 %106, !dbg !29
  %108 = sext i32 %102 to i64, !dbg !29
  %109 = getelementptr float, ptr addrspace(1) %2, i64 %108, !dbg !29
  %110 = sext i32 %103 to i64, !dbg !29
  %111 = getelementptr float, ptr addrspace(1) %2, i64 %110, !dbg !29
  %112 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %105, i1 true) #2, !dbg !30
  %113 = extractvalue { i32, i32, i32, i32 } %112, 0, !dbg !30
  %114 = extractvalue { i32, i32, i32, i32 } %112, 1, !dbg !30
  %115 = extractvalue { i32, i32, i32, i32 } %112, 2, !dbg !30
  %116 = extractvalue { i32, i32, i32, i32 } %112, 3, !dbg !30
  %117 = bitcast i32 %113 to float, !dbg !30
  %118 = bitcast i32 %114 to float, !dbg !30
  %119 = bitcast i32 %115 to float, !dbg !30
  %120 = bitcast i32 %116 to float, !dbg !30
  %121 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %107, i1 true) #2, !dbg !30
  %122 = extractvalue { i32, i32, i32, i32 } %121, 0, !dbg !30
  %123 = extractvalue { i32, i32, i32, i32 } %121, 1, !dbg !30
  %124 = extractvalue { i32, i32, i32, i32 } %121, 2, !dbg !30
  %125 = extractvalue { i32, i32, i32, i32 } %121, 3, !dbg !30
  %126 = bitcast i32 %122 to float, !dbg !30
  %127 = bitcast i32 %123 to float, !dbg !30
  %128 = bitcast i32 %124 to float, !dbg !30
  %129 = bitcast i32 %125 to float, !dbg !30
  %130 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %109, i1 true) #2, !dbg !30
  %131 = extractvalue { i32, i32, i32, i32 } %130, 0, !dbg !30
  %132 = extractvalue { i32, i32, i32, i32 } %130, 1, !dbg !30
  %133 = extractvalue { i32, i32, i32, i32 } %130, 2, !dbg !30
  %134 = extractvalue { i32, i32, i32, i32 } %130, 3, !dbg !30
  %135 = bitcast i32 %131 to float, !dbg !30
  %136 = bitcast i32 %132 to float, !dbg !30
  %137 = bitcast i32 %133 to float, !dbg !30
  %138 = bitcast i32 %134 to float, !dbg !30
  %139 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %111, i1 true) #2, !dbg !30
  %140 = extractvalue { i32, i32, i32, i32 } %139, 0, !dbg !30
  %141 = extractvalue { i32, i32, i32, i32 } %139, 1, !dbg !30
  %142 = extractvalue { i32, i32, i32, i32 } %139, 2, !dbg !30
  %143 = extractvalue { i32, i32, i32, i32 } %139, 3, !dbg !30
  %144 = bitcast i32 %140 to float, !dbg !30
  %145 = bitcast i32 %141 to float, !dbg !30
  %146 = bitcast i32 %142 to float, !dbg !30
  %147 = bitcast i32 %143 to float, !dbg !30
  %148 = fadd float %54, %92, !dbg !31
  %149 = fadd float %55, %93, !dbg !31
  %150 = fadd float %56, %94, !dbg !31
  %151 = fadd float %57, %95, !dbg !31
  %152 = fadd float %63, %92, !dbg !31
  %153 = fadd float %64, %93, !dbg !31
  %154 = fadd float %65, %94, !dbg !31
  %155 = fadd float %66, %95, !dbg !31
  %156 = fadd float %72, %92, !dbg !31
  %157 = fadd float %73, %93, !dbg !31
  %158 = fadd float %74, %94, !dbg !31
  %159 = fadd float %75, %95, !dbg !31
  %160 = fadd float %81, %92, !dbg !31
  %161 = fadd float %82, %93, !dbg !31
  %162 = fadd float %83, %94, !dbg !31
  %163 = fadd float %84, %95, !dbg !31
  %164 = shl i32 %9, 8, !dbg !31
  %165 = and i32 %164, 3840, !dbg !31
  %166 = or disjoint i32 %165, %13, !dbg !31
  %167 = and i32 %10, 1020, !dbg !31
  %168 = lshr exact i32 %165, 4, !dbg !31
  %169 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %168, !dbg !31
  %170 = getelementptr float, ptr addrspace(3) %169, i32 %166, !dbg !31
  %171 = bitcast float %148 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %170, <1 x i32> %171, i1 true) #2, !dbg !31
  %172 = or disjoint i32 %166, 64, !dbg !31
  %173 = lshr i32 %172, 6, !dbg !31
  %174 = getelementptr float, ptr addrspace(3) @global_smem, i32 %173, !dbg !31
  %175 = getelementptr float, ptr addrspace(3) %174, i32 %172, !dbg !31
  %176 = bitcast float %149 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %175, <1 x i32> %176, i1 true) #2, !dbg !31
  %177 = or disjoint i32 %166, 128, !dbg !31
  %178 = lshr i32 %177, 6, !dbg !31
  %179 = getelementptr float, ptr addrspace(3) @global_smem, i32 %178, !dbg !31
  %180 = getelementptr float, ptr addrspace(3) %179, i32 %177, !dbg !31
  %181 = bitcast float %150 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %180, <1 x i32> %181, i1 true) #2, !dbg !31
  %182 = or disjoint i32 %166, 192, !dbg !31
  %183 = lshr i32 %182, 6, !dbg !31
  %184 = getelementptr float, ptr addrspace(3) @global_smem, i32 %183, !dbg !31
  %185 = getelementptr float, ptr addrspace(3) %184, i32 %182, !dbg !31
  %186 = bitcast float %151 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %185, <1 x i32> %186, i1 true) #2, !dbg !31
  %187 = or disjoint i32 %166, 16, !dbg !31
  %188 = getelementptr float, ptr addrspace(3) %169, i32 %187, !dbg !31
  %189 = bitcast float %152 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %188, <1 x i32> %189, i1 true) #2, !dbg !31
  %190 = or disjoint i32 %166, 80, !dbg !31
  %191 = lshr i32 %190, 6, !dbg !31
  %192 = getelementptr float, ptr addrspace(3) @global_smem, i32 %191, !dbg !31
  %193 = getelementptr float, ptr addrspace(3) %192, i32 %190, !dbg !31
  %194 = bitcast float %153 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %193, <1 x i32> %194, i1 true) #2, !dbg !31
  %195 = or disjoint i32 %166, 144, !dbg !31
  %196 = lshr i32 %195, 6, !dbg !31
  %197 = getelementptr float, ptr addrspace(3) @global_smem, i32 %196, !dbg !31
  %198 = getelementptr float, ptr addrspace(3) %197, i32 %195, !dbg !31
  %199 = bitcast float %154 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %198, <1 x i32> %199, i1 true) #2, !dbg !31
  %200 = or disjoint i32 %166, 208, !dbg !31
  %201 = lshr i32 %200, 6, !dbg !31
  %202 = getelementptr float, ptr addrspace(3) @global_smem, i32 %201, !dbg !31
  %203 = getelementptr float, ptr addrspace(3) %202, i32 %200, !dbg !31
  %204 = bitcast float %155 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %203, <1 x i32> %204, i1 true) #2, !dbg !31
  %205 = or disjoint i32 %166, 32, !dbg !31
  %206 = getelementptr float, ptr addrspace(3) %169, i32 %205, !dbg !31
  %207 = bitcast float %156 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %206, <1 x i32> %207, i1 true) #2, !dbg !31
  %208 = or disjoint i32 %166, 96, !dbg !31
  %209 = lshr i32 %208, 6, !dbg !31
  %210 = getelementptr float, ptr addrspace(3) @global_smem, i32 %209, !dbg !31
  %211 = getelementptr float, ptr addrspace(3) %210, i32 %208, !dbg !31
  %212 = bitcast float %157 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %211, <1 x i32> %212, i1 true) #2, !dbg !31
  %213 = or disjoint i32 %166, 160, !dbg !31
  %214 = lshr i32 %213, 6, !dbg !31
  %215 = getelementptr float, ptr addrspace(3) @global_smem, i32 %214, !dbg !31
  %216 = getelementptr float, ptr addrspace(3) %215, i32 %213, !dbg !31
  %217 = bitcast float %158 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %216, <1 x i32> %217, i1 true) #2, !dbg !31
  %218 = or disjoint i32 %166, 224, !dbg !31
  %219 = lshr i32 %218, 6, !dbg !31
  %220 = getelementptr float, ptr addrspace(3) @global_smem, i32 %219, !dbg !31
  %221 = getelementptr float, ptr addrspace(3) %220, i32 %218, !dbg !31
  %222 = bitcast float %159 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %221, <1 x i32> %222, i1 true) #2, !dbg !31
  %223 = or disjoint i32 %166, 48, !dbg !31
  %224 = getelementptr float, ptr addrspace(3) %169, i32 %223, !dbg !31
  %225 = bitcast float %160 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %224, <1 x i32> %225, i1 true) #2, !dbg !31
  %226 = or disjoint i32 %166, 112, !dbg !31
  %227 = lshr i32 %226, 6, !dbg !31
  %228 = getelementptr float, ptr addrspace(3) @global_smem, i32 %227, !dbg !31
  %229 = getelementptr float, ptr addrspace(3) %228, i32 %226, !dbg !31
  %230 = bitcast float %161 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %229, <1 x i32> %230, i1 true) #2, !dbg !31
  %231 = or disjoint i32 %166, 176, !dbg !31
  %232 = lshr i32 %231, 6, !dbg !31
  %233 = getelementptr float, ptr addrspace(3) @global_smem, i32 %232, !dbg !31
  %234 = getelementptr float, ptr addrspace(3) %233, i32 %231, !dbg !31
  %235 = bitcast float %162 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %234, <1 x i32> %235, i1 true) #2, !dbg !31
  %236 = or disjoint i32 %166, 240, !dbg !31
  %237 = lshr i32 %236, 6, !dbg !31
  %238 = getelementptr float, ptr addrspace(3) @global_smem, i32 %237, !dbg !31
  %239 = getelementptr float, ptr addrspace(3) %238, i32 %236, !dbg !31
  %240 = bitcast float %163 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %239, <1 x i32> %240, i1 true) #2, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %241 = lshr i32 %167, 6, !dbg !31
  %242 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %241, !dbg !31
  %243 = getelementptr inbounds float, ptr addrspace(3) %242, i32 %167, !dbg !31
  %244 = load float, ptr addrspace(3) %243, align 4, !dbg !31
  %245 = or disjoint i32 %167, 1, !dbg !31
  %246 = getelementptr inbounds float, ptr addrspace(3) %242, i32 %245, !dbg !31
  %247 = load float, ptr addrspace(3) %246, align 4, !dbg !31
  %248 = or disjoint i32 %167, 2, !dbg !31
  %249 = getelementptr inbounds float, ptr addrspace(3) %242, i32 %248, !dbg !31
  %250 = load float, ptr addrspace(3) %249, align 4, !dbg !31
  %251 = or disjoint i32 %167, 3, !dbg !31
  %252 = getelementptr inbounds float, ptr addrspace(3) %242, i32 %251, !dbg !31
  %253 = load float, ptr addrspace(3) %252, align 4, !dbg !31
  %254 = or disjoint i32 %167, 1024, !dbg !31
  %255 = lshr i32 %254, 6, !dbg !31
  %256 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %255, !dbg !31
  %257 = getelementptr inbounds float, ptr addrspace(3) %256, i32 %254, !dbg !31
  %258 = load float, ptr addrspace(3) %257, align 4, !dbg !31
  %259 = or disjoint i32 %167, 1025, !dbg !31
  %260 = lshr i32 %259, 6, !dbg !31
  %261 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %260, !dbg !31
  %262 = getelementptr inbounds float, ptr addrspace(3) %261, i32 %259, !dbg !31
  %263 = load float, ptr addrspace(3) %262, align 4, !dbg !31
  %264 = or disjoint i32 %167, 1026, !dbg !31
  %265 = lshr i32 %264, 6, !dbg !31
  %266 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %265, !dbg !31
  %267 = getelementptr inbounds float, ptr addrspace(3) %266, i32 %264, !dbg !31
  %268 = load float, ptr addrspace(3) %267, align 4, !dbg !31
  %269 = or disjoint i32 %167, 1027, !dbg !31
  %270 = lshr i32 %269, 6, !dbg !31
  %271 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %270, !dbg !31
  %272 = getelementptr inbounds float, ptr addrspace(3) %271, i32 %269, !dbg !31
  %273 = load float, ptr addrspace(3) %272, align 4, !dbg !31
  %274 = or disjoint i32 %167, 2048, !dbg !31
  %275 = lshr i32 %274, 6, !dbg !31
  %276 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %275, !dbg !31
  %277 = getelementptr inbounds float, ptr addrspace(3) %276, i32 %274, !dbg !31
  %278 = load float, ptr addrspace(3) %277, align 4, !dbg !31
  %279 = or disjoint i32 %167, 2049, !dbg !31
  %280 = lshr i32 %279, 6, !dbg !31
  %281 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %280, !dbg !31
  %282 = getelementptr inbounds float, ptr addrspace(3) %281, i32 %279, !dbg !31
  %283 = load float, ptr addrspace(3) %282, align 4, !dbg !31
  %284 = or disjoint i32 %167, 2050, !dbg !31
  %285 = lshr i32 %284, 6, !dbg !31
  %286 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %285, !dbg !31
  %287 = getelementptr inbounds float, ptr addrspace(3) %286, i32 %284, !dbg !31
  %288 = load float, ptr addrspace(3) %287, align 4, !dbg !31
  %289 = or disjoint i32 %167, 2051, !dbg !31
  %290 = lshr i32 %289, 6, !dbg !31
  %291 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %290, !dbg !31
  %292 = getelementptr inbounds float, ptr addrspace(3) %291, i32 %289, !dbg !31
  %293 = load float, ptr addrspace(3) %292, align 4, !dbg !31
  %294 = or disjoint i32 %167, 3072, !dbg !31
  %295 = lshr i32 %294, 6, !dbg !31
  %296 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %295, !dbg !31
  %297 = getelementptr inbounds float, ptr addrspace(3) %296, i32 %294, !dbg !31
  %298 = load float, ptr addrspace(3) %297, align 4, !dbg !31
  %299 = or disjoint i32 %167, 3073, !dbg !31
  %300 = lshr i32 %299, 6, !dbg !31
  %301 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %300, !dbg !31
  %302 = getelementptr inbounds float, ptr addrspace(3) %301, i32 %299, !dbg !31
  %303 = load float, ptr addrspace(3) %302, align 4, !dbg !31
  %304 = or disjoint i32 %167, 3074, !dbg !31
  %305 = lshr i32 %304, 6, !dbg !31
  %306 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %305, !dbg !31
  %307 = getelementptr inbounds float, ptr addrspace(3) %306, i32 %304, !dbg !31
  %308 = load float, ptr addrspace(3) %307, align 4, !dbg !31
  %309 = or disjoint i32 %167, 3075, !dbg !31
  %310 = lshr i32 %309, 6, !dbg !31
  %311 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %310, !dbg !31
  %312 = getelementptr inbounds float, ptr addrspace(3) %311, i32 %309, !dbg !31
  %313 = load float, ptr addrspace(3) %312, align 4, !dbg !31
  %314 = fadd float %244, %117, !dbg !32
  %315 = fadd float %247, %118, !dbg !32
  %316 = fadd float %250, %119, !dbg !32
  %317 = fadd float %253, %120, !dbg !32
  %318 = fadd float %258, %126, !dbg !32
  %319 = fadd float %263, %127, !dbg !32
  %320 = fadd float %268, %128, !dbg !32
  %321 = fadd float %273, %129, !dbg !32
  %322 = fadd float %278, %135, !dbg !32
  %323 = fadd float %283, %136, !dbg !32
  %324 = fadd float %288, %137, !dbg !32
  %325 = fadd float %293, %138, !dbg !32
  %326 = fadd float %298, %144, !dbg !32
  %327 = fadd float %303, %145, !dbg !32
  %328 = fadd float %308, %146, !dbg !32
  %329 = fadd float %313, %147, !dbg !32
  %330 = getelementptr float, ptr addrspace(1) %3, i64 %104, !dbg !33
  %331 = getelementptr float, ptr addrspace(1) %3, i64 %106, !dbg !33
  %332 = getelementptr float, ptr addrspace(1) %3, i64 %108, !dbg !33
  %333 = getelementptr float, ptr addrspace(1) %3, i64 %110, !dbg !33
  %334 = bitcast float %314 to i32, !dbg !34
  %335 = bitcast float %315 to i32, !dbg !34
  %336 = bitcast float %316 to i32, !dbg !34
  %337 = bitcast float %317 to i32, !dbg !34
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %334, i32 %335, i32 %336, i32 %337, ptr addrspace(1) %330, i1 true) #2, !dbg !34
  %338 = bitcast float %318 to i32, !dbg !34
  %339 = bitcast float %319 to i32, !dbg !34
  %340 = bitcast float %320 to i32, !dbg !34
  %341 = bitcast float %321 to i32, !dbg !34
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %338, i32 %339, i32 %340, i32 %341, ptr addrspace(1) %331, i1 true) #2, !dbg !34
  %342 = bitcast float %322 to i32, !dbg !34
  %343 = bitcast float %323 to i32, !dbg !34
  %344 = bitcast float %324 to i32, !dbg !34
  %345 = bitcast float %325 to i32, !dbg !34
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %342, i32 %343, i32 %344, i32 %345, ptr addrspace(1) %332, i1 true) #2, !dbg !34
  %346 = bitcast float %326 to i32, !dbg !34
  %347 = bitcast float %327 to i32, !dbg !34
  %348 = bitcast float %328 to i32, !dbg !34
  %349 = bitcast float %329 to i32, !dbg !34
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %346, i32 %347, i32 %348, i32 %349, ptr addrspace(1) %333, i1 true) #2, !dbg !34
  ret void, !dbg !35
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cqhxr5ldvh2o7fan7xvkhp5bggmj2bfszo5w7y35dkjxcsniz4ns.py", directory: "inductor_cache/qh")
!4 = !{ptr @triton_poi_fused_add_convolution_2, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_convolution_2, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_convolution_2", linkageName: "triton_poi_fused_add_convolution_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 23, scope: !7)
!17 = !DILocation(line: 30, column: 19, scope: !7)
!18 = !DILocation(line: 29, column: 19, scope: !7)
!19 = !DILocation(line: 32, column: 39, scope: !7)
!20 = !DILocation(line: 32, column: 52, scope: !7)
!21 = !DILocation(line: 32, column: 35, scope: !7)
!22 = !DILocation(line: 32, column: 44, scope: !7)
!23 = !DILocation(line: 32, column: 30, scope: !7)
!24 = !DILocation(line: 32, column: 57, scope: !7)
!25 = !DILocation(line: 33, column: 30, scope: !7)
!26 = !DILocation(line: 33, column: 35, scope: !7)
!27 = !DILocation(line: 34, column: 40, scope: !7)
!28 = !DILocation(line: 34, column: 35, scope: !7)
!29 = !DILocation(line: 34, column: 30, scope: !7)
!30 = !DILocation(line: 34, column: 45, scope: !7)
!31 = !DILocation(line: 35, column: 18, scope: !7)
!32 = !DILocation(line: 36, column: 18, scope: !7)
!33 = !DILocation(line: 37, column: 25, scope: !7)
!34 = !DILocation(line: 37, column: 46, scope: !7)
!35 = !DILocation(line: 37, column: 4, scope: !7)
