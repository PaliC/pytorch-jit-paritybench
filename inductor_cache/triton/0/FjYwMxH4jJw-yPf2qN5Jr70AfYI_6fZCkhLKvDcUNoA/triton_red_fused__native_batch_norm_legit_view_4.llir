; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_red_fused__native_batch_norm_legit_view_4(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
.peel.begin:
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %5 = shl i32 %4, 4, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = lshr i32 %6, 6, !dbg !12
  %8 = and i32 %7, 7, !dbg !12
  %9 = or disjoint i32 %8, 8, !dbg !12
  %10 = and i32 %6, 31, !dbg !12
  %11 = or disjoint i32 %5, %8, !dbg !13
  %12 = or disjoint i32 %5, %9, !dbg !13
  %13 = icmp slt i32 %11, 12, !dbg !14
  %14 = icmp slt i32 %12, 12, !dbg !14
  %15 = shl i32 %6, 2, !dbg !15
  %16 = and i32 %15, 252, !dbg !15
  %17 = lshr i32 %6, 4, !dbg !15
  %18 = and i32 %17, 31, !dbg !15
  %19 = shl i32 %11, 12, !dbg !16
  %20 = shl i32 %12, 12, !dbg !16
  %invariant.op = or disjoint i32 %16, %19, !dbg !17
  %invariant.op44 = or disjoint i32 %16, %20, !dbg !17
  %21 = sext i32 %invariant.op to i64, !dbg !18
  %22 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !18
  %23 = sext i32 %invariant.op44 to i64, !dbg !18
  %24 = getelementptr float, ptr addrspace(1) %0, i64 %23, !dbg !18
  %25 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %22, i1 %13, i32 0, i1 %13, i32 0, i1 %13, i32 0, i1 %13, i32 0, i1 %13) #5, !dbg !19
  %26 = extractvalue { i32, i32, i32, i32 } %25, 0, !dbg !19
  %27 = extractvalue { i32, i32, i32, i32 } %25, 1, !dbg !19
  %28 = extractvalue { i32, i32, i32, i32 } %25, 2, !dbg !19
  %29 = extractvalue { i32, i32, i32, i32 } %25, 3, !dbg !19
  %30 = bitcast i32 %26 to float, !dbg !19
  %31 = bitcast i32 %27 to float, !dbg !19
  %32 = bitcast i32 %28 to float, !dbg !19
  %33 = bitcast i32 %29 to float, !dbg !19
  %34 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %24, i1 %14, i32 0, i1 %14, i32 0, i1 %14, i32 0, i1 %14, i32 0, i1 %14) #5, !dbg !19
  %35 = extractvalue { i32, i32, i32, i32 } %34, 0, !dbg !19
  %36 = extractvalue { i32, i32, i32, i32 } %34, 1, !dbg !19
  %37 = extractvalue { i32, i32, i32, i32 } %34, 2, !dbg !19
  %38 = extractvalue { i32, i32, i32, i32 } %34, 3, !dbg !19
  %39 = bitcast i32 %35 to float, !dbg !19
  %40 = bitcast i32 %36 to float, !dbg !19
  %41 = bitcast i32 %37 to float, !dbg !19
  %42 = bitcast i32 %38 to float, !dbg !19
  %43 = select i1 %13, float %30, float 0.000000e+00, !dbg !20
  %44 = select i1 %13, float %31, float 0.000000e+00, !dbg !20
  %45 = select i1 %13, float %32, float 0.000000e+00, !dbg !20
  %46 = select i1 %13, float %33, float 0.000000e+00, !dbg !20
  %47 = select i1 %14, float %39, float 0.000000e+00, !dbg !20
  %48 = select i1 %14, float %40, float 0.000000e+00, !dbg !20
  %49 = select i1 %14, float %41, float 0.000000e+00, !dbg !20
  %50 = select i1 %14, float %42, float 0.000000e+00, !dbg !20
  %51 = select i1 %13, float 1.000000e+00, float 0.000000e+00, !dbg !21
  %52 = select i1 %13, float 1.000000e+00, float 0.000000e+00, !dbg !21
  %53 = select i1 %13, float 1.000000e+00, float 0.000000e+00, !dbg !21
  %54 = select i1 %13, float 1.000000e+00, float 0.000000e+00, !dbg !21
  %55 = select i1 %14, float 1.000000e+00, float 0.000000e+00, !dbg !21
  %56 = select i1 %14, float 1.000000e+00, float 0.000000e+00, !dbg !21
  %57 = select i1 %14, float 1.000000e+00, float 0.000000e+00, !dbg !21
  %58 = select i1 %14, float 1.000000e+00, float 0.000000e+00, !dbg !21
  br label %._crit_edge, !dbg !17

._crit_edge:                                      ; preds = %.peel.begin, %._crit_edge
  %59 = phi float [ %51, %.peel.begin ], [ %178, %._crit_edge ]
  %60 = phi float [ %52, %.peel.begin ], [ %179, %._crit_edge ]
  %61 = phi float [ %53, %.peel.begin ], [ %180, %._crit_edge ]
  %62 = phi float [ %54, %.peel.begin ], [ %181, %._crit_edge ]
  %63 = phi float [ %55, %.peel.begin ], [ %182, %._crit_edge ]
  %64 = phi float [ %56, %.peel.begin ], [ %183, %._crit_edge ]
  %65 = phi float [ %57, %.peel.begin ], [ %184, %._crit_edge ]
  %66 = phi float [ %58, %.peel.begin ], [ %185, %._crit_edge ]
  %67 = phi float [ 0.000000e+00, %.peel.begin ], [ %170, %._crit_edge ]
  %68 = phi float [ 0.000000e+00, %.peel.begin ], [ %171, %._crit_edge ]
  %69 = phi float [ 0.000000e+00, %.peel.begin ], [ %172, %._crit_edge ]
  %70 = phi float [ 0.000000e+00, %.peel.begin ], [ %173, %._crit_edge ]
  %71 = phi float [ 0.000000e+00, %.peel.begin ], [ %174, %._crit_edge ]
  %72 = phi float [ 0.000000e+00, %.peel.begin ], [ %175, %._crit_edge ]
  %73 = phi float [ 0.000000e+00, %.peel.begin ], [ %176, %._crit_edge ]
  %74 = phi float [ 0.000000e+00, %.peel.begin ], [ %177, %._crit_edge ]
  %75 = phi float [ %43, %.peel.begin ], [ %162, %._crit_edge ]
  %76 = phi float [ %44, %.peel.begin ], [ %163, %._crit_edge ]
  %77 = phi float [ %45, %.peel.begin ], [ %164, %._crit_edge ]
  %78 = phi float [ %46, %.peel.begin ], [ %165, %._crit_edge ]
  %79 = phi float [ %47, %.peel.begin ], [ %166, %._crit_edge ]
  %80 = phi float [ %48, %.peel.begin ], [ %167, %._crit_edge ]
  %81 = phi float [ %49, %.peel.begin ], [ %168, %._crit_edge ]
  %82 = phi float [ %50, %.peel.begin ], [ %169, %._crit_edge ]
  %83 = phi i32 [ 256, %.peel.begin ], [ %186, %._crit_edge ]
  %.reass = or i32 %83, %invariant.op
  %.reass45 = or i32 %83, %invariant.op44
  %84 = sext i32 %.reass to i64, !dbg !18
  %85 = getelementptr float, ptr addrspace(1) %0, i64 %84, !dbg !18
  %86 = sext i32 %.reass45 to i64, !dbg !18
  %87 = getelementptr float, ptr addrspace(1) %0, i64 %86, !dbg !18
  %88 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %85, i1 %13, i32 0, i1 %13, i32 0, i1 %13, i32 0, i1 %13, i32 0, i1 %13) #5, !dbg !19
  %89 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %87, i1 %14, i32 0, i1 %14, i32 0, i1 %14, i32 0, i1 %14, i32 0, i1 %14) #5, !dbg !19
  %90 = extractvalue { i32, i32, i32, i32 } %89, 3, !dbg !19
  %91 = bitcast i32 %90 to float, !dbg !19
  %92 = extractvalue { i32, i32, i32, i32 } %89, 2, !dbg !19
  %93 = bitcast i32 %92 to float, !dbg !19
  %94 = extractvalue { i32, i32, i32, i32 } %89, 1, !dbg !19
  %95 = bitcast i32 %94 to float, !dbg !19
  %96 = extractvalue { i32, i32, i32, i32 } %89, 0, !dbg !19
  %97 = bitcast i32 %96 to float, !dbg !19
  %98 = extractvalue { i32, i32, i32, i32 } %88, 3, !dbg !19
  %99 = bitcast i32 %98 to float, !dbg !19
  %100 = extractvalue { i32, i32, i32, i32 } %88, 2, !dbg !19
  %101 = bitcast i32 %100 to float, !dbg !19
  %102 = extractvalue { i32, i32, i32, i32 } %88, 1, !dbg !19
  %103 = bitcast i32 %102 to float, !dbg !19
  %104 = extractvalue { i32, i32, i32, i32 } %88, 0, !dbg !19
  %105 = bitcast i32 %104 to float, !dbg !19
  %106 = fsub float %105, %75, !dbg !22
  %107 = fsub float %103, %76, !dbg !22
  %108 = fsub float %101, %77, !dbg !22
  %109 = fsub float %99, %78, !dbg !22
  %110 = fsub float %97, %79, !dbg !22
  %111 = fsub float %95, %80, !dbg !22
  %112 = fsub float %93, %81, !dbg !22
  %113 = fsub float %91, %82, !dbg !22
  %114 = fadd float %59, 1.000000e+00, !dbg !26
  %115 = fadd float %60, 1.000000e+00, !dbg !26
  %116 = fadd float %61, 1.000000e+00, !dbg !26
  %117 = fadd float %62, 1.000000e+00, !dbg !26
  %118 = fadd float %63, 1.000000e+00, !dbg !26
  %119 = fadd float %64, 1.000000e+00, !dbg !26
  %120 = fadd float %65, 1.000000e+00, !dbg !26
  %121 = fadd float %66, 1.000000e+00, !dbg !26
  %122 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %106, float %114) #5, !dbg !27
  %123 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %107, float %115) #5, !dbg !27
  %124 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %108, float %116) #5, !dbg !27
  %125 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %109, float %117) #5, !dbg !27
  %126 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %110, float %118) #5, !dbg !27
  %127 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %111, float %119) #5, !dbg !27
  %128 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %112, float %120) #5, !dbg !27
  %129 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %113, float %121) #5, !dbg !27
  %130 = fadd float %75, %122, !dbg !28
  %131 = fadd float %76, %123, !dbg !28
  %132 = fadd float %77, %124, !dbg !28
  %133 = fadd float %78, %125, !dbg !28
  %134 = fadd float %79, %126, !dbg !28
  %135 = fadd float %80, %127, !dbg !28
  %136 = fadd float %81, %128, !dbg !28
  %137 = fadd float %82, %129, !dbg !28
  %138 = fsub float %105, %130, !dbg !29
  %139 = fsub float %103, %131, !dbg !29
  %140 = fsub float %101, %132, !dbg !29
  %141 = fsub float %99, %133, !dbg !29
  %142 = fsub float %97, %134, !dbg !29
  %143 = fsub float %95, %135, !dbg !29
  %144 = fsub float %93, %136, !dbg !29
  %145 = fsub float %91, %137, !dbg !29
  %146 = fmul float %106, %138, !dbg !30
  %147 = fmul float %107, %139, !dbg !30
  %148 = fmul float %108, %140, !dbg !30
  %149 = fmul float %109, %141, !dbg !30
  %150 = fmul float %110, %142, !dbg !30
  %151 = fmul float %111, %143, !dbg !30
  %152 = fmul float %112, %144, !dbg !30
  %153 = fmul float %113, %145, !dbg !30
  %154 = fadd float %67, %146, !dbg !31
  %155 = fadd float %68, %147, !dbg !31
  %156 = fadd float %69, %148, !dbg !31
  %157 = fadd float %70, %149, !dbg !31
  %158 = fadd float %71, %150, !dbg !31
  %159 = fadd float %72, %151, !dbg !31
  %160 = fadd float %73, %152, !dbg !31
  %161 = fadd float %74, %153, !dbg !31
  %162 = select i1 %13, float %130, float %75, !dbg !20
  %163 = select i1 %13, float %131, float %76, !dbg !20
  %164 = select i1 %13, float %132, float %77, !dbg !20
  %165 = select i1 %13, float %133, float %78, !dbg !20
  %166 = select i1 %14, float %134, float %79, !dbg !20
  %167 = select i1 %14, float %135, float %80, !dbg !20
  %168 = select i1 %14, float %136, float %81, !dbg !20
  %169 = select i1 %14, float %137, float %82, !dbg !20
  %170 = select i1 %13, float %154, float %67, !dbg !32
  %171 = select i1 %13, float %155, float %68, !dbg !32
  %172 = select i1 %13, float %156, float %69, !dbg !32
  %173 = select i1 %13, float %157, float %70, !dbg !32
  %174 = select i1 %14, float %158, float %71, !dbg !32
  %175 = select i1 %14, float %159, float %72, !dbg !32
  %176 = select i1 %14, float %160, float %73, !dbg !32
  %177 = select i1 %14, float %161, float %74, !dbg !32
  %178 = select i1 %13, float %114, float %59, !dbg !21
  %179 = select i1 %13, float %115, float %60, !dbg !21
  %180 = select i1 %13, float %116, float %61, !dbg !21
  %181 = select i1 %13, float %117, float %62, !dbg !21
  %182 = select i1 %14, float %118, float %63, !dbg !21
  %183 = select i1 %14, float %119, float %64, !dbg !21
  %184 = select i1 %14, float %120, float %65, !dbg !21
  %185 = select i1 %14, float %121, float %66, !dbg !21
  %186 = add nuw nsw i32 %83, 256, !dbg !17
  %187 = icmp samesign ult i32 %83, 3840, !dbg !17
  br i1 %187, label %._crit_edge, label %__nv_rsqrtf.exit, !dbg !17, !llvm.loop !33

__nv_rsqrtf.exit:                                 ; preds = %._crit_edge
  %188 = lshr i32 %6, 5, !dbg !12
  %189 = and i32 %6, 15, !dbg !12
  %190 = or disjoint i32 %5, %189, !dbg !13
  %191 = icmp slt i32 %190, 12, !dbg !14
  %192 = fsub float %163, %162, !dbg !35
  %193 = fadd float %178, %179, !dbg !38
  %194 = fcmp oeq float %193, 0.000000e+00, !dbg !39
  %195 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %179, float %193) #5, !dbg !40
  %196 = select i1 %194, float 0.000000e+00, float %195, !dbg !41
  %197 = fmul float %192, %196, !dbg !42
  %198 = fadd float %162, %197, !dbg !43
  %199 = fadd float %170, %171, !dbg !44
  %200 = fmul float %192, %192, !dbg !45
  %201 = fmul float %200, %178, !dbg !46
  %202 = fmul float %201, %196, !dbg !47
  %203 = fadd float %199, %202, !dbg !48
  %204 = fsub float %164, %198, !dbg !35
  %205 = fadd float %180, %193, !dbg !38
  %206 = fcmp oeq float %205, 0.000000e+00, !dbg !39
  %207 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %180, float %205) #5, !dbg !40
  %208 = select i1 %206, float 0.000000e+00, float %207, !dbg !41
  %209 = fmul float %208, %204, !dbg !42
  %210 = fadd float %198, %209, !dbg !43
  %211 = fadd float %172, %203, !dbg !44
  %212 = fmul float %204, %204, !dbg !45
  %213 = fmul float %193, %212, !dbg !46
  %214 = fmul float %208, %213, !dbg !47
  %215 = fadd float %211, %214, !dbg !48
  %216 = fsub float %165, %210, !dbg !35
  %217 = fadd float %181, %205, !dbg !38
  %218 = fcmp oeq float %217, 0.000000e+00, !dbg !39
  %219 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %181, float %217) #5, !dbg !40
  %220 = select i1 %218, float 0.000000e+00, float %219, !dbg !41
  %221 = fmul float %220, %216, !dbg !42
  %222 = fadd float %210, %221, !dbg !43
  %223 = fadd float %173, %215, !dbg !44
  %224 = fmul float %216, %216, !dbg !45
  %225 = fmul float %205, %224, !dbg !46
  %226 = fmul float %220, %225, !dbg !47
  %227 = fadd float %223, %226, !dbg !48
  %228 = fsub float %167, %166, !dbg !35
  %229 = fadd float %182, %183, !dbg !38
  %230 = fcmp oeq float %229, 0.000000e+00, !dbg !39
  %231 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %183, float %229) #5, !dbg !40
  %232 = select i1 %230, float 0.000000e+00, float %231, !dbg !41
  %233 = fmul float %228, %232, !dbg !42
  %234 = fadd float %166, %233, !dbg !43
  %235 = fadd float %174, %175, !dbg !44
  %236 = fmul float %228, %228, !dbg !45
  %237 = fmul float %236, %182, !dbg !46
  %238 = fmul float %237, %232, !dbg !47
  %239 = fadd float %235, %238, !dbg !48
  %240 = fsub float %168, %234, !dbg !35
  %241 = fadd float %184, %229, !dbg !38
  %242 = fcmp oeq float %241, 0.000000e+00, !dbg !39
  %243 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %184, float %241) #5, !dbg !40
  %244 = select i1 %242, float 0.000000e+00, float %243, !dbg !41
  %245 = fmul float %244, %240, !dbg !42
  %246 = fadd float %234, %245, !dbg !43
  %247 = fadd float %176, %239, !dbg !44
  %248 = fmul float %240, %240, !dbg !45
  %249 = fmul float %229, %248, !dbg !46
  %250 = fmul float %244, %249, !dbg !47
  %251 = fadd float %247, %250, !dbg !48
  %252 = fsub float %169, %246, !dbg !35
  %253 = fadd float %185, %241, !dbg !38
  %254 = fcmp oeq float %253, 0.000000e+00, !dbg !39
  %255 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %185, float %253) #5, !dbg !40
  %256 = select i1 %254, float 0.000000e+00, float %255, !dbg !41
  %257 = fmul float %256, %252, !dbg !42
  %258 = fadd float %246, %257, !dbg !43
  %259 = fadd float %177, %251, !dbg !44
  %260 = fmul float %252, %252, !dbg !45
  %261 = fmul float %241, %260, !dbg !46
  %262 = fmul float %256, %261, !dbg !47
  %263 = fadd float %259, %262, !dbg !48
  %264 = bitcast float %222 to i32, !dbg !49
  %265 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %264, i32 16, i32 31), !dbg !49
  %266 = bitcast i32 %265 to float, !dbg !49
  %267 = bitcast float %227 to i32, !dbg !49
  %268 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %267, i32 16, i32 31), !dbg !49
  %269 = bitcast i32 %268 to float, !dbg !49
  %270 = bitcast float %217 to i32, !dbg !49
  %271 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %270, i32 16, i32 31), !dbg !49
  %272 = bitcast i32 %271 to float, !dbg !49
  %273 = fsub float %266, %222, !dbg !35
  %274 = fadd float %217, %272, !dbg !38
  %275 = fcmp oeq float %274, 0.000000e+00, !dbg !39
  %276 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %272, float %274) #5, !dbg !40
  %277 = select i1 %275, float 0.000000e+00, float %276, !dbg !41
  %278 = fmul float %273, %277, !dbg !42
  %279 = fadd float %222, %278, !dbg !43
  %280 = fadd float %227, %269, !dbg !44
  %281 = fmul float %273, %273, !dbg !45
  %282 = fmul float %217, %281, !dbg !46
  %283 = fmul float %282, %277, !dbg !47
  %284 = fadd float %280, %283, !dbg !48
  %285 = bitcast float %279 to i32, !dbg !49
  %286 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %285, i32 8, i32 31), !dbg !49
  %287 = bitcast i32 %286 to float, !dbg !49
  %288 = bitcast float %284 to i32, !dbg !49
  %289 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %288, i32 8, i32 31), !dbg !49
  %290 = bitcast i32 %289 to float, !dbg !49
  %291 = bitcast float %274 to i32, !dbg !49
  %292 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %291, i32 8, i32 31), !dbg !49
  %293 = bitcast i32 %292 to float, !dbg !49
  %294 = fsub float %287, %279, !dbg !35
  %295 = fadd float %274, %293, !dbg !38
  %296 = fcmp oeq float %295, 0.000000e+00, !dbg !39
  %297 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %293, float %295) #5, !dbg !40
  %298 = select i1 %296, float 0.000000e+00, float %297, !dbg !41
  %299 = fmul float %294, %298, !dbg !42
  %300 = fadd float %279, %299, !dbg !43
  %301 = fadd float %284, %290, !dbg !44
  %302 = fmul float %294, %294, !dbg !45
  %303 = fmul float %274, %302, !dbg !46
  %304 = fmul float %298, %303, !dbg !47
  %305 = fadd float %301, %304, !dbg !48
  %306 = bitcast float %300 to i32, !dbg !49
  %307 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %306, i32 4, i32 31), !dbg !49
  %308 = bitcast i32 %307 to float, !dbg !49
  %309 = bitcast float %305 to i32, !dbg !49
  %310 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %309, i32 4, i32 31), !dbg !49
  %311 = bitcast i32 %310 to float, !dbg !49
  %312 = bitcast float %295 to i32, !dbg !49
  %313 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %312, i32 4, i32 31), !dbg !49
  %314 = bitcast i32 %313 to float, !dbg !49
  %315 = fsub float %308, %300, !dbg !35
  %316 = fadd float %295, %314, !dbg !38
  %317 = fcmp oeq float %316, 0.000000e+00, !dbg !39
  %318 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %314, float %316) #5, !dbg !40
  %319 = select i1 %317, float 0.000000e+00, float %318, !dbg !41
  %320 = fmul float %315, %319, !dbg !42
  %321 = fadd float %300, %320, !dbg !43
  %322 = fadd float %305, %311, !dbg !44
  %323 = fmul float %315, %315, !dbg !45
  %324 = fmul float %295, %323, !dbg !46
  %325 = fmul float %319, %324, !dbg !47
  %326 = fadd float %322, %325, !dbg !48
  %327 = bitcast float %321 to i32, !dbg !49
  %328 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %327, i32 2, i32 31), !dbg !49
  %329 = bitcast i32 %328 to float, !dbg !49
  %330 = bitcast float %326 to i32, !dbg !49
  %331 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %330, i32 2, i32 31), !dbg !49
  %332 = bitcast i32 %331 to float, !dbg !49
  %333 = bitcast float %316 to i32, !dbg !49
  %334 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %333, i32 2, i32 31), !dbg !49
  %335 = bitcast i32 %334 to float, !dbg !49
  %336 = fsub float %329, %321, !dbg !35
  %337 = fadd float %316, %335, !dbg !38
  %338 = fcmp oeq float %337, 0.000000e+00, !dbg !39
  %339 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %335, float %337) #5, !dbg !40
  %340 = select i1 %338, float 0.000000e+00, float %339, !dbg !41
  %341 = fmul float %336, %340, !dbg !42
  %342 = fadd float %321, %341, !dbg !43
  %343 = fadd float %326, %332, !dbg !44
  %344 = fmul float %336, %336, !dbg !45
  %345 = fmul float %316, %344, !dbg !46
  %346 = fmul float %340, %345, !dbg !47
  %347 = fadd float %343, %346, !dbg !48
  %348 = bitcast float %342 to i32, !dbg !49
  %349 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %348, i32 1, i32 31), !dbg !49
  %350 = bitcast i32 %349 to float, !dbg !49
  %351 = bitcast float %347 to i32, !dbg !49
  %352 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %351, i32 1, i32 31), !dbg !49
  %353 = bitcast i32 %352 to float, !dbg !49
  %354 = bitcast float %337 to i32, !dbg !49
  %355 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %354, i32 1, i32 31), !dbg !49
  %356 = bitcast i32 %355 to float, !dbg !49
  %357 = fsub float %350, %342, !dbg !35
  %358 = fadd float %337, %356, !dbg !38
  %359 = fcmp oeq float %358, 0.000000e+00, !dbg !39
  %360 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %356, float %358) #5, !dbg !40
  %361 = select i1 %359, float 0.000000e+00, float %360, !dbg !41
  %362 = fmul float %357, %361, !dbg !42
  %363 = fadd float %342, %362, !dbg !43
  %364 = fadd float %347, %353, !dbg !44
  %365 = fmul float %357, %357, !dbg !45
  %366 = fmul float %337, %365, !dbg !46
  %367 = fmul float %361, %366, !dbg !47
  %368 = fadd float %364, %367, !dbg !48
  %369 = bitcast float %258 to i32, !dbg !49
  %370 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %369, i32 16, i32 31), !dbg !49
  %371 = bitcast i32 %370 to float, !dbg !49
  %372 = bitcast float %263 to i32, !dbg !49
  %373 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %372, i32 16, i32 31), !dbg !49
  %374 = bitcast i32 %373 to float, !dbg !49
  %375 = bitcast float %253 to i32, !dbg !49
  %376 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %375, i32 16, i32 31), !dbg !49
  %377 = bitcast i32 %376 to float, !dbg !49
  %378 = fsub float %371, %258, !dbg !35
  %379 = fadd float %253, %377, !dbg !38
  %380 = fcmp oeq float %379, 0.000000e+00, !dbg !39
  %381 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %377, float %379) #5, !dbg !40
  %382 = select i1 %380, float 0.000000e+00, float %381, !dbg !41
  %383 = fmul float %378, %382, !dbg !42
  %384 = fadd float %258, %383, !dbg !43
  %385 = fadd float %263, %374, !dbg !44
  %386 = fmul float %378, %378, !dbg !45
  %387 = fmul float %253, %386, !dbg !46
  %388 = fmul float %387, %382, !dbg !47
  %389 = fadd float %385, %388, !dbg !48
  %390 = bitcast float %384 to i32, !dbg !49
  %391 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %390, i32 8, i32 31), !dbg !49
  %392 = bitcast i32 %391 to float, !dbg !49
  %393 = bitcast float %389 to i32, !dbg !49
  %394 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %393, i32 8, i32 31), !dbg !49
  %395 = bitcast i32 %394 to float, !dbg !49
  %396 = bitcast float %379 to i32, !dbg !49
  %397 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %396, i32 8, i32 31), !dbg !49
  %398 = bitcast i32 %397 to float, !dbg !49
  %399 = fsub float %392, %384, !dbg !35
  %400 = fadd float %379, %398, !dbg !38
  %401 = fcmp oeq float %400, 0.000000e+00, !dbg !39
  %402 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %398, float %400) #5, !dbg !40
  %403 = select i1 %401, float 0.000000e+00, float %402, !dbg !41
  %404 = fmul float %399, %403, !dbg !42
  %405 = fadd float %384, %404, !dbg !43
  %406 = fadd float %389, %395, !dbg !44
  %407 = fmul float %399, %399, !dbg !45
  %408 = fmul float %379, %407, !dbg !46
  %409 = fmul float %403, %408, !dbg !47
  %410 = fadd float %406, %409, !dbg !48
  %411 = bitcast float %405 to i32, !dbg !49
  %412 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %411, i32 4, i32 31), !dbg !49
  %413 = bitcast i32 %412 to float, !dbg !49
  %414 = bitcast float %410 to i32, !dbg !49
  %415 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %414, i32 4, i32 31), !dbg !49
  %416 = bitcast i32 %415 to float, !dbg !49
  %417 = bitcast float %400 to i32, !dbg !49
  %418 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %417, i32 4, i32 31), !dbg !49
  %419 = bitcast i32 %418 to float, !dbg !49
  %420 = fsub float %413, %405, !dbg !35
  %421 = fadd float %400, %419, !dbg !38
  %422 = fcmp oeq float %421, 0.000000e+00, !dbg !39
  %423 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %419, float %421) #5, !dbg !40
  %424 = select i1 %422, float 0.000000e+00, float %423, !dbg !41
  %425 = fmul float %420, %424, !dbg !42
  %426 = fadd float %405, %425, !dbg !43
  %427 = fadd float %410, %416, !dbg !44
  %428 = fmul float %420, %420, !dbg !45
  %429 = fmul float %400, %428, !dbg !46
  %430 = fmul float %424, %429, !dbg !47
  %431 = fadd float %427, %430, !dbg !48
  %432 = bitcast float %426 to i32, !dbg !49
  %433 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %432, i32 2, i32 31), !dbg !49
  %434 = bitcast i32 %433 to float, !dbg !49
  %435 = bitcast float %431 to i32, !dbg !49
  %436 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %435, i32 2, i32 31), !dbg !49
  %437 = bitcast i32 %436 to float, !dbg !49
  %438 = bitcast float %421 to i32, !dbg !49
  %439 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %438, i32 2, i32 31), !dbg !49
  %440 = bitcast i32 %439 to float, !dbg !49
  %441 = fsub float %434, %426, !dbg !35
  %442 = fadd float %421, %440, !dbg !38
  %443 = fcmp oeq float %442, 0.000000e+00, !dbg !39
  %444 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %440, float %442) #5, !dbg !40
  %445 = select i1 %443, float 0.000000e+00, float %444, !dbg !41
  %446 = fmul float %441, %445, !dbg !42
  %447 = fadd float %426, %446, !dbg !43
  %448 = fadd float %431, %437, !dbg !44
  %449 = fmul float %441, %441, !dbg !45
  %450 = fmul float %421, %449, !dbg !46
  %451 = fmul float %445, %450, !dbg !47
  %452 = fadd float %448, %451, !dbg !48
  %453 = bitcast float %447 to i32, !dbg !49
  %454 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %453, i32 1, i32 31), !dbg !49
  %455 = bitcast i32 %454 to float, !dbg !49
  %456 = bitcast float %452 to i32, !dbg !49
  %457 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %456, i32 1, i32 31), !dbg !49
  %458 = bitcast i32 %457 to float, !dbg !49
  %459 = bitcast float %442 to i32, !dbg !49
  %460 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %459, i32 1, i32 31), !dbg !49
  %461 = bitcast i32 %460 to float, !dbg !49
  %462 = fsub float %455, %447, !dbg !35
  %463 = fadd float %442, %461, !dbg !38
  %464 = fcmp oeq float %463, 0.000000e+00, !dbg !39
  %465 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %461, float %463) #5, !dbg !40
  %466 = select i1 %464, float 0.000000e+00, float %465, !dbg !41
  %467 = fmul float %462, %466, !dbg !42
  %468 = fadd float %447, %467, !dbg !43
  %469 = fadd float %452, %458, !dbg !44
  %470 = fmul float %462, %462, !dbg !45
  %471 = fmul float %442, %470, !dbg !46
  %472 = fmul float %466, %471, !dbg !47
  %473 = fadd float %469, %472, !dbg !48
  %474 = icmp eq i32 %10, 0, !dbg !49
  %475 = and i32 %188, 1, !dbg !49
  %476 = shl nuw nsw i32 %8, 1, !dbg !49
  %477 = or disjoint i32 %476, %475, !dbg !49
  %478 = getelementptr float, ptr addrspace(3) @global_smem, i32 %477, !dbg !49
  %479 = bitcast float %363 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %478, <1 x i32> %479, i1 %474) #5, !dbg !49
  %480 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %477, !dbg !49
  %481 = bitcast float %368 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %480, <1 x i32> %481, i1 %474) #5, !dbg !49
  %482 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), i32 %477, !dbg !49
  %483 = bitcast float %358 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %482, <1 x i32> %483, i1 %474) #5, !dbg !49
  %484 = shl nuw nsw i32 %9, 1, !dbg !49
  %485 = or disjoint i32 %484, %475, !dbg !49
  %486 = getelementptr float, ptr addrspace(3) @global_smem, i32 %485, !dbg !49
  %487 = bitcast float %468 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %486, <1 x i32> %487, i1 %474) #5, !dbg !49
  %488 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %485, !dbg !49
  %489 = bitcast float %473 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %488, <1 x i32> %489, i1 %474) #5, !dbg !49
  %490 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), i32 %485, !dbg !49
  %491 = bitcast float %463 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %490, <1 x i32> %491, i1 %474) #5, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %492 = icmp slt i32 %6, 32, !dbg !49
  %493 = getelementptr float, ptr addrspace(3) @global_smem, i32 %6, !dbg !49
  %494 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %493, i1 %492) #5, !dbg !49
  %495 = bitcast i32 %494 to float, !dbg !49
  %496 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %6, !dbg !49
  %497 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %496, i1 %492) #5, !dbg !49
  %498 = bitcast i32 %497 to float, !dbg !49
  %499 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), i32 %6, !dbg !49
  %500 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %499, i1 %492) #5, !dbg !49
  %501 = bitcast i32 %500 to float, !dbg !49
  %502 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %494, i32 1, i32 31), !dbg !49
  %503 = bitcast i32 %502 to float, !dbg !49
  %504 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %497, i32 1, i32 31), !dbg !49
  %505 = bitcast i32 %504 to float, !dbg !49
  %506 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %500, i32 1, i32 31), !dbg !49
  %507 = bitcast i32 %506 to float, !dbg !49
  %508 = fsub float %503, %495, !dbg !35
  %509 = fadd float %501, %507, !dbg !38
  %510 = fcmp oeq float %509, 0.000000e+00, !dbg !39
  %511 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %507, float %509) #5, !dbg !40
  %512 = select i1 %510, float 0.000000e+00, float %511, !dbg !41
  %513 = fmul float %508, %512, !dbg !42
  %514 = fadd float %513, %495, !dbg !43
  %515 = fadd float %498, %505, !dbg !44
  %516 = fmul float %508, %508, !dbg !45
  %517 = fmul float %516, %501, !dbg !46
  %518 = fmul float %517, %512, !dbg !47
  %519 = fadd float %515, %518, !dbg !48
  %520 = and i32 %6, 1, !dbg !49
  %521 = icmp eq i32 %520, 0, !dbg !49
  %522 = and i1 %492, %521, !dbg !49
  %523 = bitcast float %514 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %493, <1 x i32> %523, i1 %522) #5, !dbg !49
  %524 = bitcast float %519 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %496, <1 x i32> %524, i1 %522) #5, !dbg !49
  %525 = bitcast float %509 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %499, <1 x i32> %525, i1 %522) #5, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %526 = getelementptr float, ptr addrspace(3) @global_smem, i32 %476, !dbg !49
  %527 = load float, ptr addrspace(3) %526, align 8, !dbg !49
  %528 = getelementptr float, ptr addrspace(3) @global_smem, i32 %484, !dbg !49
  %529 = load float, ptr addrspace(3) %528, align 8, !dbg !49
  %530 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %476, !dbg !49
  %531 = load float, ptr addrspace(3) %530, align 8, !dbg !49
  %532 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %484, !dbg !49
  %533 = load float, ptr addrspace(3) %532, align 8, !dbg !49
  %.frozen = freeze i32 %190, !dbg !50
  %534 = sdiv i32 %.frozen, 3, !dbg !50
  %535 = mul i32 %534, 3, !dbg !51
  %.decomposed = sub i32 %.frozen, %535, !dbg !51
  %536 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %531, float 4.096000e+03) #5, !dbg !52
  %537 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %533, float 4.096000e+03) #5, !dbg !52
  %538 = fadd float %536, 0.000000e+00, !dbg !53
  %539 = fadd float %537, 0.000000e+00, !dbg !53
  %540 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !54
  %541 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !54
  %542 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !54
  %543 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !54
  %.not.i27 = icmp eq i32 %543, 0, !dbg !54
  br i1 %.not.i27, label %546, label %544, !dbg !54

544:                                              ; preds = %__nv_rsqrtf.exit
  %545 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %538), !dbg !54
  br label %__nv_rsqrtf.exit29, !dbg !54

546:                                              ; preds = %__nv_rsqrtf.exit
  %547 = tail call float @llvm.nvvm.rsqrt.approx.f(float %538), !dbg !54
  br label %__nv_rsqrtf.exit29, !dbg !54

__nv_rsqrtf.exit29:                               ; preds = %544, %546
  %.0.i28 = phi float [ %545, %544 ], [ %547, %546 ], !dbg !54
  %548 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !54
  %549 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !54
  %550 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !54
  %551 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !54
  %.not.i39 = icmp eq i32 %551, 0, !dbg !54
  br i1 %.not.i39, label %554, label %552, !dbg !54

552:                                              ; preds = %__nv_rsqrtf.exit29
  %553 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %539), !dbg !54
  br label %__nv_rsqrtf.exit41, !dbg !54

554:                                              ; preds = %__nv_rsqrtf.exit29
  %555 = tail call float @llvm.nvvm.rsqrt.approx.f(float %539), !dbg !54
  br label %__nv_rsqrtf.exit41, !dbg !54

__nv_rsqrtf.exit41:                               ; preds = %552, %554
  %.0.i40 = phi float [ %553, %552 ], [ %555, %554 ], !dbg !54
  %556 = mul i32 %534, 12288, !dbg !55
  %557 = add i32 %556, %.decomposed
  %558 = shl i32 %6, 6
  %559 = and i32 %558, 4032
  %560 = or disjoint i32 %559, %8
  %561 = and i32 %6, 511
  %562 = lshr exact i32 %559, 2
  %563 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %562
  %564 = getelementptr float, ptr addrspace(3) %563, i32 %560
  %565 = or disjoint i32 %560, 16
  %566 = lshr i32 %565, 4
  %567 = getelementptr float, ptr addrspace(3) @global_smem, i32 %566
  %568 = getelementptr float, ptr addrspace(3) %567, i32 %565
  %569 = or disjoint i32 %560, 32
  %570 = lshr i32 %569, 4
  %571 = getelementptr float, ptr addrspace(3) @global_smem, i32 %570
  %572 = getelementptr float, ptr addrspace(3) %571, i32 %569
  %573 = or disjoint i32 %560, 48
  %574 = lshr i32 %573, 4
  %575 = getelementptr float, ptr addrspace(3) @global_smem, i32 %574
  %576 = getelementptr float, ptr addrspace(3) %575, i32 %573
  %577 = or disjoint i32 %560, 8
  %578 = getelementptr float, ptr addrspace(3) %563, i32 %577
  %579 = or disjoint i32 %560, 24
  %580 = lshr i32 %579, 4
  %581 = getelementptr float, ptr addrspace(3) @global_smem, i32 %580
  %582 = getelementptr float, ptr addrspace(3) %581, i32 %579
  %583 = or disjoint i32 %560, 40
  %584 = lshr i32 %583, 4
  %585 = getelementptr float, ptr addrspace(3) @global_smem, i32 %584
  %586 = getelementptr float, ptr addrspace(3) %585, i32 %583
  %587 = or disjoint i32 %560, 56
  %588 = lshr i32 %587, 4
  %589 = getelementptr float, ptr addrspace(3) @global_smem, i32 %588
  %590 = getelementptr float, ptr addrspace(3) %589, i32 %587
  %591 = lshr i32 %561, 4
  %592 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %591
  %593 = getelementptr inbounds float, ptr addrspace(3) %592, i32 %561
  %594 = or disjoint i32 %561, 512
  %595 = lshr i32 %594, 4
  %596 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %595
  %597 = getelementptr inbounds float, ptr addrspace(3) %596, i32 %594
  %598 = or disjoint i32 %561, 1024
  %599 = lshr i32 %598, 4
  %600 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %599
  %601 = getelementptr inbounds float, ptr addrspace(3) %600, i32 %598
  %602 = or disjoint i32 %561, 1536
  %603 = lshr i32 %602, 4
  %604 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %603
  %605 = getelementptr inbounds float, ptr addrspace(3) %604, i32 %602
  %606 = or disjoint i32 %561, 2048
  %607 = lshr i32 %606, 4
  %608 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %607
  %609 = getelementptr inbounds float, ptr addrspace(3) %608, i32 %606
  %610 = or disjoint i32 %561, 2560
  %611 = lshr i32 %610, 4
  %612 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %611
  %613 = getelementptr inbounds float, ptr addrspace(3) %612, i32 %610
  %614 = or disjoint i32 %561, 3072
  %615 = lshr i32 %614, 4
  %616 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %615
  %617 = getelementptr inbounds float, ptr addrspace(3) %616, i32 %614
  %618 = or disjoint i32 %561, 3584
  %619 = lshr i32 %618, 4
  %620 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %619
  %621 = getelementptr inbounds float, ptr addrspace(3) %620, i32 %618
  %invariant.op142 = add i32 %557, 96, !dbg !56
  %invariant.op144 = add i32 %557, 192, !dbg !56
  %invariant.op146 = add i32 %557, 288, !dbg !56
  %invariant.op148 = add i32 %557, 384, !dbg !56
  %invariant.op150 = add i32 %557, 480, !dbg !56
  %invariant.op152 = add i32 %557, 576, !dbg !56
  %invariant.op154 = add i32 %557, 672, !dbg !56
  br label %622, !dbg !56

622:                                              ; preds = %__nv_rsqrtf.exit41, %622
  %indvars.iv = phi i64 [ 0, %__nv_rsqrtf.exit41 ], [ %indvars.iv.next, %622 ]
  %623 = trunc nuw nsw i64 %indvars.iv to i32
  %.reass47 = or i32 %invariant.op, %623
  %.reass49 = or i32 %invariant.op44, %623
  %624 = sext i32 %.reass47 to i64, !dbg !57
  %625 = getelementptr float, ptr addrspace(1) %0, i64 %624, !dbg !57
  %626 = sext i32 %.reass49 to i64, !dbg !57
  %627 = getelementptr float, ptr addrspace(1) %0, i64 %626, !dbg !57
  %628 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %625, i1 %13, i32 0, i1 %13, i32 0, i1 %13, i32 0, i1 %13, i32 0, i1 %13) #5, !dbg !58
  %629 = extractvalue { i32, i32, i32, i32 } %628, 0, !dbg !58
  %630 = extractvalue { i32, i32, i32, i32 } %628, 1, !dbg !58
  %631 = extractvalue { i32, i32, i32, i32 } %628, 2, !dbg !58
  %632 = extractvalue { i32, i32, i32, i32 } %628, 3, !dbg !58
  %633 = bitcast i32 %629 to float, !dbg !58
  %634 = bitcast i32 %630 to float, !dbg !58
  %635 = bitcast i32 %631 to float, !dbg !58
  %636 = bitcast i32 %632 to float, !dbg !58
  %637 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %627, i1 %14, i32 0, i1 %14, i32 0, i1 %14, i32 0, i1 %14, i32 0, i1 %14) #5, !dbg !58
  %638 = extractvalue { i32, i32, i32, i32 } %637, 0, !dbg !58
  %639 = extractvalue { i32, i32, i32, i32 } %637, 1, !dbg !58
  %640 = extractvalue { i32, i32, i32, i32 } %637, 2, !dbg !58
  %641 = extractvalue { i32, i32, i32, i32 } %637, 3, !dbg !58
  %642 = bitcast i32 %638 to float, !dbg !58
  %643 = bitcast i32 %639 to float, !dbg !58
  %644 = bitcast i32 %640 to float, !dbg !58
  %645 = bitcast i32 %641 to float, !dbg !58
  %646 = fsub float %633, %527, !dbg !59
  %647 = fsub float %634, %527, !dbg !59
  %648 = fsub float %635, %527, !dbg !59
  %649 = fsub float %636, %527, !dbg !59
  %650 = fsub float %642, %529, !dbg !59
  %651 = fsub float %643, %529, !dbg !59
  %652 = fsub float %644, %529, !dbg !59
  %653 = fsub float %645, %529, !dbg !59
  %654 = fmul float %.0.i28, %646, !dbg !60
  %655 = fmul float %.0.i28, %647, !dbg !60
  %656 = fmul float %.0.i28, %648, !dbg !60
  %657 = fmul float %.0.i28, %649, !dbg !60
  %658 = fmul float %.0.i40, %650, !dbg !60
  %659 = fmul float %.0.i40, %651, !dbg !60
  %660 = fmul float %.0.i40, %652, !dbg !60
  %661 = fmul float %.0.i40, %653, !dbg !60
  %662 = trunc i64 %indvars.iv to i32, !dbg !61
  %663 = or disjoint i32 %18, %662, !dbg !61
  %664 = mul i32 %663, 3, !dbg !61
  %665 = add i32 %557, %664, !dbg !61
  %666 = trunc i64 %indvars.iv to i32, !dbg !61
  %667 = or disjoint i32 %18, %666, !dbg !61
  %668 = mul i32 %667, 3, !dbg !61
  %.reass143 = add i32 %668, %invariant.op142
  %669 = trunc i64 %indvars.iv to i32, !dbg !61
  %670 = or disjoint i32 %18, %669, !dbg !61
  %671 = mul i32 %670, 3, !dbg !61
  %.reass145 = add i32 %671, %invariant.op144
  %672 = trunc i64 %indvars.iv to i32, !dbg !61
  %673 = or disjoint i32 %18, %672, !dbg !61
  %674 = mul i32 %673, 3, !dbg !61
  %.reass147 = add i32 %674, %invariant.op146
  %675 = trunc i64 %indvars.iv to i32, !dbg !61
  %676 = or disjoint i32 %18, %675, !dbg !61
  %677 = mul i32 %676, 3, !dbg !61
  %.reass149 = add i32 %677, %invariant.op148
  %678 = trunc i64 %indvars.iv to i32, !dbg !61
  %679 = or disjoint i32 %18, %678, !dbg !61
  %680 = mul i32 %679, 3, !dbg !61
  %.reass151 = add i32 %680, %invariant.op150
  %681 = trunc i64 %indvars.iv to i32, !dbg !61
  %682 = or disjoint i32 %18, %681, !dbg !61
  %683 = mul i32 %682, 3, !dbg !61
  %.reass153 = add i32 %683, %invariant.op152
  %684 = trunc i64 %indvars.iv to i32, !dbg !61
  %685 = or disjoint i32 %18, %684, !dbg !61
  %686 = mul i32 %685, 3, !dbg !61
  %.reass155 = add i32 %686, %invariant.op154
  %687 = sext i32 %665 to i64, !dbg !62
  %688 = getelementptr float, ptr addrspace(1) %1, i64 %687, !dbg !62
  %689 = sext i32 %.reass143 to i64, !dbg !62
  %690 = getelementptr float, ptr addrspace(1) %1, i64 %689, !dbg !62
  %691 = sext i32 %.reass145 to i64, !dbg !62
  %692 = getelementptr float, ptr addrspace(1) %1, i64 %691, !dbg !62
  %693 = sext i32 %.reass147 to i64, !dbg !62
  %694 = getelementptr float, ptr addrspace(1) %1, i64 %693, !dbg !62
  %695 = sext i32 %.reass149 to i64, !dbg !62
  %696 = getelementptr float, ptr addrspace(1) %1, i64 %695, !dbg !62
  %697 = sext i32 %.reass151 to i64, !dbg !62
  %698 = getelementptr float, ptr addrspace(1) %1, i64 %697, !dbg !62
  %699 = sext i32 %.reass153 to i64, !dbg !62
  %700 = getelementptr float, ptr addrspace(1) %1, i64 %699, !dbg !62
  %701 = sext i32 %.reass155 to i64, !dbg !62
  %702 = getelementptr float, ptr addrspace(1) %1, i64 %701, !dbg !62
  tail call void @llvm.nvvm.barrier0(), !dbg !63
  %703 = bitcast float %654 to <1 x i32>, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %564, <1 x i32> %703, i1 true) #5, !dbg !63
  %704 = bitcast float %655 to <1 x i32>, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %568, <1 x i32> %704, i1 true) #5, !dbg !63
  %705 = bitcast float %656 to <1 x i32>, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %572, <1 x i32> %705, i1 true) #5, !dbg !63
  %706 = bitcast float %657 to <1 x i32>, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %576, <1 x i32> %706, i1 true) #5, !dbg !63
  %707 = bitcast float %658 to <1 x i32>, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %578, <1 x i32> %707, i1 true) #5, !dbg !63
  %708 = bitcast float %659 to <1 x i32>, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %582, <1 x i32> %708, i1 true) #5, !dbg !63
  %709 = bitcast float %660 to <1 x i32>, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %586, <1 x i32> %709, i1 true) #5, !dbg !63
  %710 = bitcast float %661 to <1 x i32>, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %590, <1 x i32> %710, i1 true) #5, !dbg !63
  tail call void @llvm.nvvm.barrier0(), !dbg !63
  %711 = load i32, ptr addrspace(3) %593, align 4, !dbg !63
  %712 = load i32, ptr addrspace(3) %597, align 4, !dbg !63
  %713 = load i32, ptr addrspace(3) %601, align 4, !dbg !63
  %714 = load i32, ptr addrspace(3) %605, align 4, !dbg !63
  %715 = load i32, ptr addrspace(3) %609, align 4, !dbg !63
  %716 = load i32, ptr addrspace(3) %613, align 4, !dbg !63
  %717 = load i32, ptr addrspace(3) %617, align 4, !dbg !63
  %718 = load i32, ptr addrspace(3) %621, align 4, !dbg !63
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %711, ptr addrspace(1) %688, i1 %191) #5, !dbg !63
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %712, ptr addrspace(1) %690, i1 %191) #5, !dbg !63
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %713, ptr addrspace(1) %692, i1 %191) #5, !dbg !63
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %714, ptr addrspace(1) %694, i1 %191) #5, !dbg !63
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %715, ptr addrspace(1) %696, i1 %191) #5, !dbg !63
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %716, ptr addrspace(1) %698, i1 %191) #5, !dbg !63
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %717, ptr addrspace(1) %700, i1 %191) #5, !dbg !63
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %718, ptr addrspace(1) %702, i1 %191) #5, !dbg !63
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 256, !dbg !56
  %719 = icmp samesign ult i64 %indvars.iv, 3840, !dbg !56
  br i1 %719, label %622, label %720, !dbg !56

720:                                              ; preds = %622
  ret void, !dbg !64
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cmddf2ubutcclvflw7aspsxu4vacd5g7gugwz6bg2dz5eleh3gas.py", directory: "inductor_cache/md")
!4 = !{ptr @triton_red_fused__native_batch_norm_legit_view_4, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused__native_batch_norm_legit_view_4, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused__native_batch_norm_legit_view_4", linkageName: "triton_red_fused__native_batch_norm_legit_view_4", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 34, column: 44, scope: !7)
!17 = !DILocation(line: 30, column: 36, scope: !7)
!18 = !DILocation(line: 34, column: 34, scope: !7)
!19 = !DILocation(line: 34, column: 49, scope: !7)
!20 = !DILocation(line: 39, column: 60, scope: !7)
!21 = !DILocation(line: 41, column: 64, scope: !7)
!22 = !DILocation(line: 183, column: 24, scope: !23, inlinedAt: !25)
!23 = distinct !DILexicalBlockFile(scope: !7, file: !24, discriminator: 0)
!24 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!25 = !DILocation(line: 37, column: 51, scope: !7)
!26 = !DILocation(line: 184, column: 30, scope: !23, inlinedAt: !25)
!27 = !DILocation(line: 185, column: 34, scope: !23, inlinedAt: !25)
!28 = !DILocation(line: 185, column: 26, scope: !23, inlinedAt: !25)
!29 = !DILocation(line: 186, column: 39, scope: !23, inlinedAt: !25)
!30 = !DILocation(line: 186, column: 31, scope: !23, inlinedAt: !25)
!31 = !DILocation(line: 186, column: 22, scope: !23, inlinedAt: !25)
!32 = !DILocation(line: 40, column: 56, scope: !7)
!33 = distinct !{!33, !34}
!34 = !{!"llvm.loop.peeled.count", i32 1}
!35 = !DILocation(line: 192, column: 21, scope: !36, inlinedAt: !37)
!36 = distinct !DILexicalBlockFile(scope: !23, file: !24, discriminator: 0)
!37 = !DILocation(line: 43, column: 41, scope: !7)
!38 = !DILocation(line: 193, column: 28, scope: !36, inlinedAt: !37)
!39 = !DILocation(line: 194, column: 39, scope: !36, inlinedAt: !37)
!40 = !DILocation(line: 194, column: 60, scope: !36, inlinedAt: !37)
!41 = !DILocation(line: 194, column: 49, scope: !36, inlinedAt: !37)
!42 = !DILocation(line: 196, column: 25, scope: !36, inlinedAt: !37)
!43 = !DILocation(line: 196, column: 17, scope: !36, inlinedAt: !37)
!44 = !DILocation(line: 197, column: 15, scope: !36, inlinedAt: !37)
!45 = !DILocation(line: 197, column: 30, scope: !36, inlinedAt: !37)
!46 = !DILocation(line: 197, column: 38, scope: !36, inlinedAt: !37)
!47 = !DILocation(line: 197, column: 49, scope: !36, inlinedAt: !37)
!48 = !DILocation(line: 197, column: 22, scope: !36, inlinedAt: !37)
!49 = !DILocation(line: 204, column: 46, scope: !23, inlinedAt: !37)
!50 = !DILocation(line: 49, column: 19, scope: !7)
!51 = !DILocation(line: 48, column: 19, scope: !7)
!52 = !DILocation(line: 57, column: 22, scope: !7)
!53 = !DILocation(line: 59, column: 23, scope: !7)
!54 = !DILocation(line: 60, column: 32, scope: !7)
!55 = !DILocation(line: 62, column: 47, scope: !7)
!56 = !DILocation(line: 50, column: 36, scope: !7)
!57 = !DILocation(line: 54, column: 34, scope: !7)
!58 = !DILocation(line: 54, column: 49, scope: !7)
!59 = !DILocation(line: 55, column: 22, scope: !7)
!60 = !DILocation(line: 61, column: 23, scope: !7)
!61 = !DILocation(line: 62, column: 41, scope: !7)
!62 = !DILocation(line: 62, column: 29, scope: !7)
!63 = !DILocation(line: 62, column: 59, scope: !7)
!64 = !DILocation(line: 50, column: 4, scope: !7)
