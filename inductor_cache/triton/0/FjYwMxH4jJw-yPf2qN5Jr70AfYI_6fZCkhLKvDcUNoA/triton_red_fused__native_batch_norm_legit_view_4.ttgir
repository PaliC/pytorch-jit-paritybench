#blocked = #triton_gpu.blocked<{sizePerThread = [1, 4], threadsPerWarp = [1, 32], warpsPerCTA = [8, 2], order = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [16, 2], warpsPerCTA = [1, 16], order = [0, 1]}>
#loc = loc("inductor_cache/md/cmddf2ubutcclvflw7aspsxu4vacd5g7gugwz6bg2dz5eleh3gas.py":19:0)
#loc1 = loc(unknown)
#loc32 = loc("inductor_cache/md/cmddf2ubutcclvflw7aspsxu4vacd5g7gugwz6bg2dz5eleh3gas.py":43:41)
#loc78 = loc(callsite(#loc1 at #loc32))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 16 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_red_fused__native_batch_norm_legit_view_4(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/md/cmddf2ubutcclvflw7aspsxu4vacd5g7gugwz6bg2dz5eleh3gas.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/md/cmddf2ubutcclvflw7aspsxu4vacd5g7gugwz6bg2dz5eleh3gas.py":19:0), %arg2: i32 loc("inductor_cache/md/cmddf2ubutcclvflw7aspsxu4vacd5g7gugwz6bg2dz5eleh3gas.py":19:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/md/cmddf2ubutcclvflw7aspsxu4vacd5g7gugwz6bg2dz5eleh3gas.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<16x256xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<4.096000e+03> : tensor<16x1xf32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<0.000000e+00> : tensor<16x1xf32, #blocked> loc(#loc1)
    %c4096_i32 = arith.constant 4096 : i32 loc(#loc1)
    %c256_i32 = arith.constant 256 : i32 loc(#loc1)
    %cst_2 = arith.constant 0.000000e+00 : f32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %c16_i32 = arith.constant 16 : i32 loc(#loc1)
    %cst_3 = arith.constant dense<12> : tensor<16x1xi32, #blocked> loc(#loc1)
    %cst_4 = arith.constant dense<12> : tensor<16x1xi32, #blocked1> loc(#loc1)
    %cst_5 = arith.constant dense<4096> : tensor<1x256xi32, #blocked> loc(#loc1)
    %cst_6 = arith.constant dense<4096> : tensor<1x256xi32, #blocked1> loc(#loc1)
    %cst_7 = arith.constant dense<4096> : tensor<16x1xi32, #blocked> loc(#loc1)
    %cst_8 = arith.constant dense<3> : tensor<16x1xi32, #blocked1> loc(#loc1)
    %cst_9 = arith.constant dense<1.000000e+00> : tensor<16x256xf32, #blocked> loc(#loc1)
    %cst_10 = arith.constant dense<12288> : tensor<16x1xi32, #blocked1> loc(#loc1)
    %cst_11 = arith.constant dense<3> : tensor<1x256xi32, #blocked1> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c16_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc4)
    %3 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc4)
    %4 = tt.expand_dims %2 {axis = 1 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<16x1xi32, #blocked> loc(#loc4)
    %5 = tt.expand_dims %3 {axis = 1 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<16x1xi32, #blocked1> loc(#loc4)
    %6 = tt.splat %1 : i32 -> tensor<16x1xi32, #blocked> loc(#loc5)
    %7 = tt.splat %1 : i32 -> tensor<16x1xi32, #blocked1> loc(#loc5)
    %8 = arith.addi %6, %4 : tensor<16x1xi32, #blocked> loc(#loc5)
    %9 = arith.addi %7, %5 : tensor<16x1xi32, #blocked1> loc(#loc5)
    %10 = arith.cmpi slt, %8, %cst_3 : tensor<16x1xi32, #blocked> loc(#loc6)
    %11 = arith.cmpi slt, %9, %cst_4 : tensor<16x1xi32, #blocked1> loc(#loc6)
    %12 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc7)
    %13 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc7)
    %14 = tt.expand_dims %12 {axis = 0 : i32} : tensor<256xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x256xi32, #blocked> loc(#loc7)
    %15 = tt.expand_dims %13 {axis = 0 : i32} : tensor<256xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x256xi32, #blocked1> loc(#loc7)
    %16 = arith.muli %8, %cst_7 : tensor<16x1xi32, #blocked> loc(#loc8)
    %17 = tt.broadcast %16 : tensor<16x1xi32, #blocked> -> tensor<16x256xi32, #blocked> loc(#loc9)
    %18 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<16x256x!tt.ptr<f32>, #blocked> loc(#loc10)
    %19 = tt.broadcast %10 : tensor<16x1xi1, #blocked> -> tensor<16x256xi1, #blocked> loc(#loc11)
    %20:3 = scf.for %arg4 = %c0_i32 to %c4096_i32 step %c256_i32 iter_args(%arg5 = %cst, %arg6 = %cst, %arg7 = %cst) -> (tensor<16x256xf32, #blocked>, tensor<16x256xf32, #blocked>, tensor<16x256xf32, #blocked>)  : i32 {
      %36 = tt.splat %arg4 : i32 -> tensor<1x256xi32, #blocked> loc(#loc13)
      %37 = arith.addi %36, %14 : tensor<1x256xi32, #blocked> loc(#loc13)
      %38 = arith.cmpi slt, %37, %cst_5 : tensor<1x256xi32, #blocked> loc(#loc14)
      %39 = tt.broadcast %37 : tensor<1x256xi32, #blocked> -> tensor<16x256xi32, #blocked> loc(#loc9)
      %40 = arith.addi %39, %17 : tensor<16x256xi32, #blocked> loc(#loc9)
      %41 = tt.addptr %18, %40 : tensor<16x256x!tt.ptr<f32>, #blocked>, tensor<16x256xi32, #blocked> loc(#loc10)
      %42 = tt.broadcast %38 : tensor<1x256xi1, #blocked> -> tensor<16x256xi1, #blocked> loc(#loc11)
      %43 = arith.andi %42, %19 : tensor<16x256xi1, #blocked> loc(#loc11)
      %44 = tt.load %41, %43, %cst evictionPolicy = evict_last : tensor<16x256x!tt.ptr<f32>, #blocked> loc(#loc15)
      %45 = arith.cmpi eq, %arg4, %c0_i32 : i32 loc(#loc16)
      %46:3 = scf.if %45 -> (tensor<16x256xf32, #blocked>, tensor<16x256xf32, #blocked>, tensor<16x256xf32, #blocked>) {
        scf.yield %cst, %44, %cst_9 : tensor<16x256xf32, #blocked>, tensor<16x256xf32, #blocked>, tensor<16x256xf32, #blocked> loc(#loc69)
      } else {
        %50 = arith.subf %44, %arg5 : tensor<16x256xf32, #blocked> loc(#loc70)
        %51 = arith.addf %arg7, %cst_9 : tensor<16x256xf32, #blocked> loc(#loc71)
        %52 = arith.divf %50, %51 : tensor<16x256xf32, #blocked> loc(#loc72)
        %53 = arith.addf %arg5, %52 : tensor<16x256xf32, #blocked> loc(#loc73)
        %54 = arith.subf %44, %53 : tensor<16x256xf32, #blocked> loc(#loc74)
        %55 = arith.mulf %50, %54 : tensor<16x256xf32, #blocked> loc(#loc75)
        %56 = arith.addf %arg6, %55 : tensor<16x256xf32, #blocked> loc(#loc76)
        scf.yield %56, %53, %51 : tensor<16x256xf32, #blocked>, tensor<16x256xf32, #blocked>, tensor<16x256xf32, #blocked> loc(#loc76)
      } loc(#loc68)
      %47 = arith.select %43, %46#1, %arg5 : tensor<16x256xi1, #blocked>, tensor<16x256xf32, #blocked> loc(#loc27)
      %48 = arith.select %43, %46#0, %arg6 : tensor<16x256xi1, #blocked>, tensor<16x256xf32, #blocked> loc(#loc28)
      %49 = arith.select %43, %46#2, %arg7 : tensor<16x256xi1, #blocked>, tensor<16x256xf32, #blocked> loc(#loc29)
      scf.yield %47, %48, %49 : tensor<16x256xf32, #blocked>, tensor<16x256xf32, #blocked>, tensor<16x256xf32, #blocked> loc(#loc30)
    } loc(#loc12)
    %21:3 = "tt.reduce"(%20#0, %20#1, %20#2) <{axis = 1 : i32}> ({
    ^bb0(%arg4: f32 loc(callsite(#loc1 at #loc32)), %arg5: f32 loc(callsite(#loc1 at #loc32)), %arg6: f32 loc(callsite(#loc1 at #loc32)), %arg7: f32 loc(callsite(#loc1 at #loc32)), %arg8: f32 loc(callsite(#loc1 at #loc32)), %arg9: f32 loc(callsite(#loc1 at #loc32))):
      %36 = arith.subf %arg7, %arg4 : f32 loc(#loc91)
      %37 = arith.addf %arg6, %arg9 : f32 loc(#loc92)
      %38 = arith.cmpf oeq, %37, %cst_2 : f32 loc(#loc93)
      %39 = arith.divf %arg9, %37 : f32 loc(#loc94)
      %40 = arith.select %38, %cst_2, %39 : f32 loc(#loc95)
      %41 = arith.mulf %36, %40 : f32 loc(#loc96)
      %42 = arith.addf %arg4, %41 : f32 loc(#loc97)
      %43 = arith.addf %arg5, %arg8 : f32 loc(#loc98)
      %44 = arith.mulf %36, %36 : f32 loc(#loc99)
      %45 = arith.mulf %44, %arg6 : f32 loc(#loc100)
      %46 = arith.mulf %45, %40 : f32 loc(#loc101)
      %47 = arith.addf %43, %46 : f32 loc(#loc102)
      tt.reduce.return %42, %47, %37 : f32, f32, f32 loc(#loc77)
    }) : (tensor<16x256xf32, #blocked>, tensor<16x256xf32, #blocked>, tensor<16x256xf32, #blocked>) -> (tensor<16xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>, tensor<16xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>, tensor<16xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) loc(#loc77)
    %22 = tt.expand_dims %21#0 {axis = 1 : i32} : tensor<16xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<16x1xf32, #blocked> loc(#loc45)
    %23 = tt.expand_dims %21#1 {axis = 1 : i32} : tensor<16xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<16x1xf32, #blocked> loc(#loc46)
    %24 = arith.remsi %9, %cst_8 : tensor<16x1xi32, #blocked1> loc(#loc47)
    %25 = arith.divsi %9, %cst_8 : tensor<16x1xi32, #blocked1> loc(#loc48)
    %26 = tt.broadcast %11 : tensor<16x1xi1, #blocked1> -> tensor<16x256xi1, #blocked1> loc(#loc49)
    %27 = tt.broadcast %22 : tensor<16x1xf32, #blocked> -> tensor<16x256xf32, #blocked> loc(#loc50)
    %28 = arith.divf %23, %cst_0 : tensor<16x1xf32, #blocked> loc(#loc51)
    %29 = arith.addf %28, %cst_1 : tensor<16x1xf32, #blocked> loc(#loc52)
    %30 = tt.extern_elementwise %29 {libname = "", libpath = "", pure = true, symbol = "__nv_rsqrtf"} : (tensor<16x1xf32, #blocked>) -> tensor<16x1xf32, #blocked> loc(#loc53)
    %31 = tt.broadcast %30 : tensor<16x1xf32, #blocked> -> tensor<16x256xf32, #blocked> loc(#loc54)
    %32 = tt.broadcast %24 : tensor<16x1xi32, #blocked1> -> tensor<16x256xi32, #blocked1> loc(#loc55)
    %33 = arith.muli %25, %cst_10 : tensor<16x1xi32, #blocked1> loc(#loc56)
    %34 = tt.broadcast %33 : tensor<16x1xi32, #blocked1> -> tensor<16x256xi32, #blocked1> loc(#loc57)
    %35 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<16x256x!tt.ptr<f32>, #blocked1> loc(#loc58)
    scf.for %arg4 = %c0_i32 to %c4096_i32 step %c256_i32  : i32 {
      %36 = tt.splat %arg4 : i32 -> tensor<1x256xi32, #blocked> loc(#loc60)
      %37 = tt.splat %arg4 : i32 -> tensor<1x256xi32, #blocked1> loc(#loc60)
      %38 = arith.addi %36, %14 : tensor<1x256xi32, #blocked> loc(#loc60)
      %39 = arith.addi %37, %15 : tensor<1x256xi32, #blocked1> loc(#loc60)
      %40 = arith.cmpi slt, %38, %cst_5 : tensor<1x256xi32, #blocked> loc(#loc61)
      %41 = arith.cmpi slt, %39, %cst_6 : tensor<1x256xi32, #blocked1> loc(#loc61)
      %42 = tt.broadcast %38 : tensor<1x256xi32, #blocked> -> tensor<16x256xi32, #blocked> loc(#loc62)
      %43 = arith.addi %42, %17 : tensor<16x256xi32, #blocked> loc(#loc62)
      %44 = tt.addptr %18, %43 : tensor<16x256x!tt.ptr<f32>, #blocked>, tensor<16x256xi32, #blocked> loc(#loc63)
      %45 = tt.broadcast %40 : tensor<1x256xi1, #blocked> -> tensor<16x256xi1, #blocked> loc(#loc49)
      %46 = tt.broadcast %41 : tensor<1x256xi1, #blocked1> -> tensor<16x256xi1, #blocked1> loc(#loc49)
      %47 = arith.andi %45, %19 : tensor<16x256xi1, #blocked> loc(#loc49)
      %48 = arith.andi %46, %26 : tensor<16x256xi1, #blocked1> loc(#loc49)
      %49 = tt.load %44, %47, %cst evictionPolicy = evict_first : tensor<16x256x!tt.ptr<f32>, #blocked> loc(#loc64)
      %50 = arith.subf %49, %27 : tensor<16x256xf32, #blocked> loc(#loc50)
      %51 = arith.mulf %50, %31 : tensor<16x256xf32, #blocked> loc(#loc54)
      %52 = arith.muli %39, %cst_11 : tensor<1x256xi32, #blocked1> loc(#loc65)
      %53 = tt.broadcast %52 : tensor<1x256xi32, #blocked1> -> tensor<16x256xi32, #blocked1> loc(#loc55)
      %54 = arith.addi %32, %53 : tensor<16x256xi32, #blocked1> loc(#loc55)
      %55 = arith.addi %54, %34 : tensor<16x256xi32, #blocked1> loc(#loc57)
      %56 = tt.addptr %35, %55 : tensor<16x256x!tt.ptr<f32>, #blocked1>, tensor<16x256xi32, #blocked1> loc(#loc58)
      %57 = triton_gpu.convert_layout %51 : tensor<16x256xf32, #blocked> -> tensor<16x256xf32, #blocked1> loc(#loc66)
      tt.store %56, %57, %48 : tensor<16x256x!tt.ptr<f32>, #blocked1> loc(#loc66)
    } loc(#loc59)
    tt.return loc(#loc67)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/md/cmddf2ubutcclvflw7aspsxu4vacd5g7gugwz6bg2dz5eleh3gas.py":22:28)
#loc3 = loc("inductor_cache/md/cmddf2ubutcclvflw7aspsxu4vacd5g7gugwz6bg2dz5eleh3gas.py":22:33)
#loc4 = loc("inductor_cache/md/cmddf2ubutcclvflw7aspsxu4vacd5g7gugwz6bg2dz5eleh3gas.py":23:44)
#loc5 = loc("inductor_cache/md/cmddf2ubutcclvflw7aspsxu4vacd5g7gugwz6bg2dz5eleh3gas.py":23:23)
#loc6 = loc("inductor_cache/md/cmddf2ubutcclvflw7aspsxu4vacd5g7gugwz6bg2dz5eleh3gas.py":24:21)
#loc7 = loc("inductor_cache/md/cmddf2ubutcclvflw7aspsxu4vacd5g7gugwz6bg2dz5eleh3gas.py":25:33)
#loc8 = loc("inductor_cache/md/cmddf2ubutcclvflw7aspsxu4vacd5g7gugwz6bg2dz5eleh3gas.py":34:44)
#loc9 = loc("inductor_cache/md/cmddf2ubutcclvflw7aspsxu4vacd5g7gugwz6bg2dz5eleh3gas.py":34:39)
#loc10 = loc("inductor_cache/md/cmddf2ubutcclvflw7aspsxu4vacd5g7gugwz6bg2dz5eleh3gas.py":34:34)
#loc11 = loc("inductor_cache/md/cmddf2ubutcclvflw7aspsxu4vacd5g7gugwz6bg2dz5eleh3gas.py":34:57)
#loc12 = loc("inductor_cache/md/cmddf2ubutcclvflw7aspsxu4vacd5g7gugwz6bg2dz5eleh3gas.py":30:36)
#loc13 = loc("inductor_cache/md/cmddf2ubutcclvflw7aspsxu4vacd5g7gugwz6bg2dz5eleh3gas.py":31:27)
#loc14 = loc("inductor_cache/md/cmddf2ubutcclvflw7aspsxu4vacd5g7gugwz6bg2dz5eleh3gas.py":32:25)
#loc15 = loc("inductor_cache/md/cmddf2ubutcclvflw7aspsxu4vacd5g7gugwz6bg2dz5eleh3gas.py":34:49)
#loc16 = loc("inductor_cache/md/cmddf2ubutcclvflw7aspsxu4vacd5g7gugwz6bg2dz5eleh3gas.py":37:62)
#loc17 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":178:7)
#loc18 = loc("inductor_cache/md/cmddf2ubutcclvflw7aspsxu4vacd5g7gugwz6bg2dz5eleh3gas.py":37:51)
#loc19 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":181:31)
#loc20 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":183:24)
#loc21 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":184:30)
#loc22 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":185:34)
#loc23 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":185:26)
#loc24 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":186:39)
#loc25 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":186:31)
#loc26 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":186:22)
#loc27 = loc("inductor_cache/md/cmddf2ubutcclvflw7aspsxu4vacd5g7gugwz6bg2dz5eleh3gas.py":39:60)
#loc28 = loc("inductor_cache/md/cmddf2ubutcclvflw7aspsxu4vacd5g7gugwz6bg2dz5eleh3gas.py":40:56)
#loc29 = loc("inductor_cache/md/cmddf2ubutcclvflw7aspsxu4vacd5g7gugwz6bg2dz5eleh3gas.py":41:64)
#loc30 = loc("inductor_cache/md/cmddf2ubutcclvflw7aspsxu4vacd5g7gugwz6bg2dz5eleh3gas.py":41:8)
#loc31 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":204:46)
#loc33 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":192:21)
#loc34 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":193:28)
#loc35 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":194:39)
#loc36 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":194:60)
#loc37 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":194:49)
#loc38 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":196:25)
#loc39 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":196:17)
#loc40 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":197:15)
#loc41 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":197:30)
#loc42 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":197:38)
#loc43 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":197:49)
#loc44 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":197:22)
#loc45 = loc("inductor_cache/md/cmddf2ubutcclvflw7aspsxu4vacd5g7gugwz6bg2dz5eleh3gas.py":45:20)
#loc46 = loc("inductor_cache/md/cmddf2ubutcclvflw7aspsxu4vacd5g7gugwz6bg2dz5eleh3gas.py":46:20)
#loc47 = loc("inductor_cache/md/cmddf2ubutcclvflw7aspsxu4vacd5g7gugwz6bg2dz5eleh3gas.py":48:19)
#loc48 = loc("inductor_cache/md/cmddf2ubutcclvflw7aspsxu4vacd5g7gugwz6bg2dz5eleh3gas.py":49:19)
#loc49 = loc("inductor_cache/md/cmddf2ubutcclvflw7aspsxu4vacd5g7gugwz6bg2dz5eleh3gas.py":54:57)
#loc50 = loc("inductor_cache/md/cmddf2ubutcclvflw7aspsxu4vacd5g7gugwz6bg2dz5eleh3gas.py":55:22)
#loc51 = loc("inductor_cache/md/cmddf2ubutcclvflw7aspsxu4vacd5g7gugwz6bg2dz5eleh3gas.py":57:22)
#loc52 = loc("inductor_cache/md/cmddf2ubutcclvflw7aspsxu4vacd5g7gugwz6bg2dz5eleh3gas.py":59:23)
#loc53 = loc("inductor_cache/md/cmddf2ubutcclvflw7aspsxu4vacd5g7gugwz6bg2dz5eleh3gas.py":60:32)
#loc54 = loc("inductor_cache/md/cmddf2ubutcclvflw7aspsxu4vacd5g7gugwz6bg2dz5eleh3gas.py":61:23)
#loc55 = loc("inductor_cache/md/cmddf2ubutcclvflw7aspsxu4vacd5g7gugwz6bg2dz5eleh3gas.py":62:34)
#loc56 = loc("inductor_cache/md/cmddf2ubutcclvflw7aspsxu4vacd5g7gugwz6bg2dz5eleh3gas.py":62:47)
#loc57 = loc("inductor_cache/md/cmddf2ubutcclvflw7aspsxu4vacd5g7gugwz6bg2dz5eleh3gas.py":62:41)
#loc58 = loc("inductor_cache/md/cmddf2ubutcclvflw7aspsxu4vacd5g7gugwz6bg2dz5eleh3gas.py":62:29)
#loc59 = loc("inductor_cache/md/cmddf2ubutcclvflw7aspsxu4vacd5g7gugwz6bg2dz5eleh3gas.py":50:36)
#loc60 = loc("inductor_cache/md/cmddf2ubutcclvflw7aspsxu4vacd5g7gugwz6bg2dz5eleh3gas.py":51:27)
#loc61 = loc("inductor_cache/md/cmddf2ubutcclvflw7aspsxu4vacd5g7gugwz6bg2dz5eleh3gas.py":52:25)
#loc62 = loc("inductor_cache/md/cmddf2ubutcclvflw7aspsxu4vacd5g7gugwz6bg2dz5eleh3gas.py":54:39)
#loc63 = loc("inductor_cache/md/cmddf2ubutcclvflw7aspsxu4vacd5g7gugwz6bg2dz5eleh3gas.py":54:34)
#loc64 = loc("inductor_cache/md/cmddf2ubutcclvflw7aspsxu4vacd5g7gugwz6bg2dz5eleh3gas.py":54:49)
#loc65 = loc("inductor_cache/md/cmddf2ubutcclvflw7aspsxu4vacd5g7gugwz6bg2dz5eleh3gas.py":62:36)
#loc66 = loc("inductor_cache/md/cmddf2ubutcclvflw7aspsxu4vacd5g7gugwz6bg2dz5eleh3gas.py":62:59)
#loc67 = loc("inductor_cache/md/cmddf2ubutcclvflw7aspsxu4vacd5g7gugwz6bg2dz5eleh3gas.py":50:4)
#loc68 = loc(callsite(#loc17 at #loc18))
#loc69 = loc(callsite(#loc19 at #loc18))
#loc70 = loc(callsite(#loc20 at #loc18))
#loc71 = loc(callsite(#loc21 at #loc18))
#loc72 = loc(callsite(#loc22 at #loc18))
#loc73 = loc(callsite(#loc23 at #loc18))
#loc74 = loc(callsite(#loc24 at #loc18))
#loc75 = loc(callsite(#loc25 at #loc18))
#loc76 = loc(callsite(#loc26 at #loc18))
#loc77 = loc(callsite(#loc31 at #loc32))
#loc79 = loc(callsite(#loc33 at #loc31))
#loc80 = loc(callsite(#loc34 at #loc31))
#loc81 = loc(callsite(#loc35 at #loc31))
#loc82 = loc(callsite(#loc36 at #loc31))
#loc83 = loc(callsite(#loc37 at #loc31))
#loc84 = loc(callsite(#loc38 at #loc31))
#loc85 = loc(callsite(#loc39 at #loc31))
#loc86 = loc(callsite(#loc40 at #loc31))
#loc87 = loc(callsite(#loc41 at #loc31))
#loc88 = loc(callsite(#loc42 at #loc31))
#loc89 = loc(callsite(#loc43 at #loc31))
#loc90 = loc(callsite(#loc44 at #loc31))
#loc91 = loc(callsite(#loc79 at #loc32))
#loc92 = loc(callsite(#loc80 at #loc32))
#loc93 = loc(callsite(#loc81 at #loc32))
#loc94 = loc(callsite(#loc82 at #loc32))
#loc95 = loc(callsite(#loc83 at #loc32))
#loc96 = loc(callsite(#loc84 at #loc32))
#loc97 = loc(callsite(#loc85 at #loc32))
#loc98 = loc(callsite(#loc86 at #loc32))
#loc99 = loc(callsite(#loc87 at #loc32))
#loc100 = loc(callsite(#loc88 at #loc32))
#loc101 = loc(callsite(#loc89 at #loc32))
#loc102 = loc(callsite(#loc90 at #loc32))
