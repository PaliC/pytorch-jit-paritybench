#blocked = #triton_gpu.blocked<{sizePerThread = [1, 4], threadsPerWarp = [1, 32], warpsPerCTA = [1, 16], order = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 16], order = [0, 1]}>
#loc = loc("inductor_cache/75/c75wgoywj6rx7h65zuhyhyqr3ud3gzh7pweltg5f6twwind56ipq.py":19:0)
#loc1 = loc(unknown)
#loc46 = loc("inductor_cache/75/c75wgoywj6rx7h65zuhyhyqr3ud3gzh7pweltg5f6twwind56ipq.py":61:27)
#loc55 = loc(callsite(#loc1 at #loc46))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 16 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_red_fused__native_batch_norm_legit_no_training_add_convolution_mean_1(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/75/c75wgoywj6rx7h65zuhyhyqr3ud3gzh7pweltg5f6twwind56ipq.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/75/c75wgoywj6rx7h65zuhyhyqr3ud3gzh7pweltg5f6twwind56ipq.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/75/c75wgoywj6rx7h65zuhyhyqr3ud3gzh7pweltg5f6twwind56ipq.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/75/c75wgoywj6rx7h65zuhyhyqr3ud3gzh7pweltg5f6twwind56ipq.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/75/c75wgoywj6rx7h65zuhyhyqr3ud3gzh7pweltg5f6twwind56ipq.py":19:0), %arg5: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/75/c75wgoywj6rx7h65zuhyhyqr3ud3gzh7pweltg5f6twwind56ipq.py":19:0), %arg6: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/75/c75wgoywj6rx7h65zuhyhyqr3ud3gzh7pweltg5f6twwind56ipq.py":19:0), %arg7: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/75/c75wgoywj6rx7h65zuhyhyqr3ud3gzh7pweltg5f6twwind56ipq.py":19:0), %arg8: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/75/c75wgoywj6rx7h65zuhyhyqr3ud3gzh7pweltg5f6twwind56ipq.py":19:0), %arg9: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/75/c75wgoywj6rx7h65zuhyhyqr3ud3gzh7pweltg5f6twwind56ipq.py":19:0), %arg10: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/75/c75wgoywj6rx7h65zuhyhyqr3ud3gzh7pweltg5f6twwind56ipq.py":19:0), %arg11: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/75/c75wgoywj6rx7h65zuhyhyqr3ud3gzh7pweltg5f6twwind56ipq.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<1x2048xf32, #blocked> loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %c4096_i32 = arith.constant 4096 : i32 loc(#loc1)
    %c2048_i32 = arith.constant 2048 : i32 loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %c16_i32 = arith.constant 16 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<4096> : tensor<1x2048xi32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<9.99999974E-6> : tensor<1x1xf32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<1.000000e+00> : tensor<1x1xf32, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<4.096000e+03> : tensor<1x1xf32, #blocked1> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.cmpi slt, %0, %c64_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 2048 : i32, start = 0 : i32} : tensor<2048xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc4)
    %3 = tt.expand_dims %2 {axis = 0 : i32} : tensor<2048xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x2048xi32, #blocked> loc(#loc4)
    %4 = arith.remsi %0, %c16_i32 : i32 loc(#loc5)
    %5 = tt.addptr %arg3, %4 : !tt.ptr<f32>, i32 loc(#loc6)
    %6 = tt.splat %5 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc7)
    %7 = tt.splat %1 : i1 -> tensor<1x1xi1, #blocked> loc(#loc7)
    %8 = tt.load %6, %7 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc7)
    %9 = tt.addptr %arg4, %4 : !tt.ptr<f32>, i32 loc(#loc8)
    %10 = tt.splat %9 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc9)
    %11 = tt.load %10, %7 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc9)
    %12 = tt.addptr %arg5, %4 : !tt.ptr<f32>, i32 loc(#loc10)
    %13 = tt.splat %12 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc11)
    %14 = tt.load %13, %7 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc11)
    %15 = tt.addptr %arg6, %4 : !tt.ptr<f32>, i32 loc(#loc12)
    %16 = tt.splat %15 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc13)
    %17 = tt.load %16, %7 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc13)
    %18 = tt.addptr %arg7, %4 : !tt.ptr<f32>, i32 loc(#loc14)
    %19 = tt.splat %18 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc15)
    %20 = tt.load %19, %7 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc15)
    %21 = tt.addptr %arg8, %4 : !tt.ptr<f32>, i32 loc(#loc16)
    %22 = tt.splat %21 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc17)
    %23 = tt.load %22, %7 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc17)
    %24 = arith.muli %0, %c4096_i32 : i32 loc(#loc18)
    %25 = tt.splat %24 : i32 -> tensor<1x2048xi32, #blocked> loc(#loc19)
    %26 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1x2048x!tt.ptr<f32>, #blocked> loc(#loc20)
    %27 = tt.splat %1 : i1 -> tensor<1x2048xi1, #blocked> loc(#loc21)
    %28 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1x2048x!tt.ptr<f32>, #blocked> loc(#loc22)
    %29 = tt.broadcast %8 : tensor<1x1xf32, #blocked> -> tensor<1x2048xf32, #blocked> loc(#loc23)
    %30 = tt.broadcast %11 : tensor<1x1xf32, #blocked> -> tensor<1x2048xf32, #blocked> loc(#loc24)
    %31 = tt.broadcast %14 : tensor<1x1xf32, #blocked> -> tensor<1x2048xf32, #blocked> loc(#loc25)
    %32 = arith.addf %17, %cst_1 : tensor<1x1xf32, #blocked> loc(#loc26)
    %33 = tt.extern_elementwise %32 {libname = "", libpath = "", pure = true, symbol = "__nv_sqrtf"} : (tensor<1x1xf32, #blocked>) -> tensor<1x1xf32, #blocked> loc(#loc27)
    %34 = arith.divf %cst_2, %33 : tensor<1x1xf32, #blocked> loc(#loc28)
    %35 = tt.broadcast %34 : tensor<1x1xf32, #blocked> -> tensor<1x2048xf32, #blocked> loc(#loc29)
    %36 = tt.broadcast %20 : tensor<1x1xf32, #blocked> -> tensor<1x2048xf32, #blocked> loc(#loc30)
    %37 = tt.broadcast %23 : tensor<1x1xf32, #blocked> -> tensor<1x2048xf32, #blocked> loc(#loc31)
    %38 = tt.splat %arg9 : !tt.ptr<f32> -> tensor<1x2048x!tt.ptr<f32>, #blocked> loc(#loc32)
    %39 = scf.for %arg12 = %c0_i32 to %c4096_i32 step %c2048_i32 iter_args(%arg13 = %cst) -> (tensor<1x2048xf32, #blocked>)  : i32 {
      %47 = tt.splat %arg12 : i32 -> tensor<1x2048xi32, #blocked> loc(#loc34)
      %48 = arith.addi %47, %3 : tensor<1x2048xi32, #blocked> loc(#loc34)
      %49 = arith.cmpi slt, %48, %cst_0 : tensor<1x2048xi32, #blocked> loc(#loc35)
      %50 = arith.addi %48, %25 : tensor<1x2048xi32, #blocked> loc(#loc19)
      %51 = tt.addptr %26, %50 : tensor<1x2048x!tt.ptr<f32>, #blocked>, tensor<1x2048xi32, #blocked> loc(#loc20)
      %52 = arith.andi %49, %27 : tensor<1x2048xi1, #blocked> loc(#loc21)
      %53 = tt.load %51, %52, %cst evictionPolicy = evict_first : tensor<1x2048x!tt.ptr<f32>, #blocked> loc(#loc36)
      %54 = tt.addptr %28, %50 : tensor<1x2048x!tt.ptr<f32>, #blocked>, tensor<1x2048xi32, #blocked> loc(#loc22)
      %55 = tt.load %54, %52, %cst evictionPolicy = evict_first : tensor<1x2048x!tt.ptr<f32>, #blocked> loc(#loc37)
      %56 = arith.addf %53, %29 : tensor<1x2048xf32, #blocked> loc(#loc23)
      %57 = arith.addf %55, %30 : tensor<1x2048xf32, #blocked> loc(#loc24)
      %58 = arith.subf %57, %31 : tensor<1x2048xf32, #blocked> loc(#loc25)
      %59 = arith.mulf %58, %35 : tensor<1x2048xf32, #blocked> loc(#loc29)
      %60 = arith.mulf %59, %36 : tensor<1x2048xf32, #blocked> loc(#loc30)
      %61 = arith.addf %60, %37 : tensor<1x2048xf32, #blocked> loc(#loc31)
      %62 = arith.addf %56, %61 : tensor<1x2048xf32, #blocked> loc(#loc38)
      %63 = arith.addf %arg13, %62 : tensor<1x2048xf32, #blocked> loc(#loc39)
      %64 = arith.select %52, %63, %arg13 : tensor<1x2048xi1, #blocked>, tensor<1x2048xf32, #blocked> loc(#loc40)
      tt.store %51, %56, %52 : tensor<1x2048x!tt.ptr<f32>, #blocked> loc(#loc41)
      tt.store %54, %57, %52 : tensor<1x2048x!tt.ptr<f32>, #blocked> loc(#loc42)
      %65 = tt.addptr %38, %50 : tensor<1x2048x!tt.ptr<f32>, #blocked>, tensor<1x2048xi32, #blocked> loc(#loc32)
      tt.store %65, %62, %52 : tensor<1x2048x!tt.ptr<f32>, #blocked> loc(#loc43)
      scf.yield %64 : tensor<1x2048xf32, #blocked> loc(#loc44)
    } loc(#loc33)
    %40 = "tt.reduce"(%39) <{axis = 1 : i32}> ({
    ^bb0(%arg12: f32 loc(callsite(#loc1 at #loc46)), %arg13: f32 loc(callsite(#loc1 at #loc46))):
      %47 = arith.addf %arg12, %arg13 : f32 loc(#loc57)
      tt.reduce.return %47 : f32 loc(#loc54)
    }) : (tensor<1x2048xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc54)
    %41 = triton_gpu.convert_layout %40 {fastmath = #arith.fastmath<none>} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc48)
    %42 = tt.expand_dims %41 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<1x1xf32, #blocked1> loc(#loc49)
    %43 = arith.divf %42, %cst_3 : tensor<1x1xf32, #blocked1> loc(#loc48)
    gpu.barrier loc(#loc50)
    %44 = tt.addptr %arg2, %0 : !tt.ptr<f32>, i32 loc(#loc51)
    %45 = tt.splat %44 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc52)
    %46 = tt.splat %1 : i1 -> tensor<1x1xi1, #blocked1> loc(#loc52)
    tt.store %45, %43, %46 : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc52)
    tt.return loc(#loc53)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/75/c75wgoywj6rx7h65zuhyhyqr3ud3gzh7pweltg5f6twwind56ipq.py":22:28)
#loc3 = loc("inductor_cache/75/c75wgoywj6rx7h65zuhyhyqr3ud3gzh7pweltg5f6twwind56ipq.py":24:21)
#loc4 = loc("inductor_cache/75/c75wgoywj6rx7h65zuhyhyqr3ud3gzh7pweltg5f6twwind56ipq.py":25:33)
#loc5 = loc("inductor_cache/75/c75wgoywj6rx7h65zuhyhyqr3ud3gzh7pweltg5f6twwind56ipq.py":27:19)
#loc6 = loc("inductor_cache/75/c75wgoywj6rx7h65zuhyhyqr3ud3gzh7pweltg5f6twwind56ipq.py":28:30)
#loc7 = loc("inductor_cache/75/c75wgoywj6rx7h65zuhyhyqr3ud3gzh7pweltg5f6twwind56ipq.py":28:35)
#loc8 = loc("inductor_cache/75/c75wgoywj6rx7h65zuhyhyqr3ud3gzh7pweltg5f6twwind56ipq.py":29:30)
#loc9 = loc("inductor_cache/75/c75wgoywj6rx7h65zuhyhyqr3ud3gzh7pweltg5f6twwind56ipq.py":29:35)
#loc10 = loc("inductor_cache/75/c75wgoywj6rx7h65zuhyhyqr3ud3gzh7pweltg5f6twwind56ipq.py":30:30)
#loc11 = loc("inductor_cache/75/c75wgoywj6rx7h65zuhyhyqr3ud3gzh7pweltg5f6twwind56ipq.py":30:35)
#loc12 = loc("inductor_cache/75/c75wgoywj6rx7h65zuhyhyqr3ud3gzh7pweltg5f6twwind56ipq.py":31:30)
#loc13 = loc("inductor_cache/75/c75wgoywj6rx7h65zuhyhyqr3ud3gzh7pweltg5f6twwind56ipq.py":31:35)
#loc14 = loc("inductor_cache/75/c75wgoywj6rx7h65zuhyhyqr3ud3gzh7pweltg5f6twwind56ipq.py":32:31)
#loc15 = loc("inductor_cache/75/c75wgoywj6rx7h65zuhyhyqr3ud3gzh7pweltg5f6twwind56ipq.py":32:36)
#loc16 = loc("inductor_cache/75/c75wgoywj6rx7h65zuhyhyqr3ud3gzh7pweltg5f6twwind56ipq.py":33:31)
#loc17 = loc("inductor_cache/75/c75wgoywj6rx7h65zuhyhyqr3ud3gzh7pweltg5f6twwind56ipq.py":33:36)
#loc18 = loc("inductor_cache/75/c75wgoywj6rx7h65zuhyhyqr3ud3gzh7pweltg5f6twwind56ipq.py":39:48)
#loc19 = loc("inductor_cache/75/c75wgoywj6rx7h65zuhyhyqr3ud3gzh7pweltg5f6twwind56ipq.py":39:43)
#loc20 = loc("inductor_cache/75/c75wgoywj6rx7h65zuhyhyqr3ud3gzh7pweltg5f6twwind56ipq.py":39:38)
#loc21 = loc("inductor_cache/75/c75wgoywj6rx7h65zuhyhyqr3ud3gzh7pweltg5f6twwind56ipq.py":39:61)
#loc22 = loc("inductor_cache/75/c75wgoywj6rx7h65zuhyhyqr3ud3gzh7pweltg5f6twwind56ipq.py":40:38)
#loc23 = loc("inductor_cache/75/c75wgoywj6rx7h65zuhyhyqr3ud3gzh7pweltg5f6twwind56ipq.py":41:22)
#loc24 = loc("inductor_cache/75/c75wgoywj6rx7h65zuhyhyqr3ud3gzh7pweltg5f6twwind56ipq.py":42:22)
#loc25 = loc("inductor_cache/75/c75wgoywj6rx7h65zuhyhyqr3ud3gzh7pweltg5f6twwind56ipq.py":43:22)
#loc26 = loc("inductor_cache/75/c75wgoywj6rx7h65zuhyhyqr3ud3gzh7pweltg5f6twwind56ipq.py":45:23)
#loc27 = loc("inductor_cache/75/c75wgoywj6rx7h65zuhyhyqr3ud3gzh7pweltg5f6twwind56ipq.py":46:31)
#loc28 = loc("inductor_cache/75/c75wgoywj6rx7h65zuhyhyqr3ud3gzh7pweltg5f6twwind56ipq.py":48:24)
#loc29 = loc("inductor_cache/75/c75wgoywj6rx7h65zuhyhyqr3ud3gzh7pweltg5f6twwind56ipq.py":51:23)
#loc30 = loc("inductor_cache/75/c75wgoywj6rx7h65zuhyhyqr3ud3gzh7pweltg5f6twwind56ipq.py":52:24)
#loc31 = loc("inductor_cache/75/c75wgoywj6rx7h65zuhyhyqr3ud3gzh7pweltg5f6twwind56ipq.py":53:24)
#loc32 = loc("inductor_cache/75/c75wgoywj6rx7h65zuhyhyqr3ud3gzh7pweltg5f6twwind56ipq.py":60:29)
#loc33 = loc("inductor_cache/75/c75wgoywj6rx7h65zuhyhyqr3ud3gzh7pweltg5f6twwind56ipq.py":35:36)
#loc34 = loc("inductor_cache/75/c75wgoywj6rx7h65zuhyhyqr3ud3gzh7pweltg5f6twwind56ipq.py":36:27)
#loc35 = loc("inductor_cache/75/c75wgoywj6rx7h65zuhyhyqr3ud3gzh7pweltg5f6twwind56ipq.py":37:25)
#loc36 = loc("inductor_cache/75/c75wgoywj6rx7h65zuhyhyqr3ud3gzh7pweltg5f6twwind56ipq.py":39:53)
#loc37 = loc("inductor_cache/75/c75wgoywj6rx7h65zuhyhyqr3ud3gzh7pweltg5f6twwind56ipq.py":40:53)
#loc38 = loc("inductor_cache/75/c75wgoywj6rx7h65zuhyhyqr3ud3gzh7pweltg5f6twwind56ipq.py":54:23)
#loc39 = loc("inductor_cache/75/c75wgoywj6rx7h65zuhyhyqr3ud3gzh7pweltg5f6twwind56ipq.py":56:25)
#loc40 = loc("inductor_cache/75/c75wgoywj6rx7h65zuhyhyqr3ud3gzh7pweltg5f6twwind56ipq.py":57:48)
#loc41 = loc("inductor_cache/75/c75wgoywj6rx7h65zuhyhyqr3ud3gzh7pweltg5f6twwind56ipq.py":58:53)
#loc42 = loc("inductor_cache/75/c75wgoywj6rx7h65zuhyhyqr3ud3gzh7pweltg5f6twwind56ipq.py":59:53)
#loc43 = loc("inductor_cache/75/c75wgoywj6rx7h65zuhyhyqr3ud3gzh7pweltg5f6twwind56ipq.py":60:51)
#loc44 = loc("inductor_cache/75/c75wgoywj6rx7h65zuhyhyqr3ud3gzh7pweltg5f6twwind56ipq.py":60:8)
#loc45 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc47 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc48 = loc("inductor_cache/75/c75wgoywj6rx7h65zuhyhyqr3ud3gzh7pweltg5f6twwind56ipq.py":63:20)
#loc49 = loc("inductor_cache/75/c75wgoywj6rx7h65zuhyhyqr3ud3gzh7pweltg5f6twwind56ipq.py":61:30)
#loc50 = loc("inductor_cache/75/c75wgoywj6rx7h65zuhyhyqr3ud3gzh7pweltg5f6twwind56ipq.py":64:4)
#loc51 = loc("inductor_cache/75/c75wgoywj6rx7h65zuhyhyqr3ud3gzh7pweltg5f6twwind56ipq.py":65:28)
#loc52 = loc("inductor_cache/75/c75wgoywj6rx7h65zuhyhyqr3ud3gzh7pweltg5f6twwind56ipq.py":65:40)
#loc53 = loc("inductor_cache/75/c75wgoywj6rx7h65zuhyhyqr3ud3gzh7pweltg5f6twwind56ipq.py":65:4)
#loc54 = loc(callsite(#loc45 at #loc46))
#loc56 = loc(callsite(#loc47 at #loc45))
#loc57 = loc(callsite(#loc56 at #loc46))
