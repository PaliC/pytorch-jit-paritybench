; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_mean_pow_sub_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %7 = shl i32 %6, 5, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = and i32 %8, 31, !dbg !12
  %10 = or disjoint i32 %7, %9, !dbg !13
  %11 = lshr i32 %8, 5, !dbg !14
  %12 = and i32 %11, 7, !dbg !14
  %13 = or disjoint i32 %12, 8, !dbg !14
  %14 = or disjoint i32 %12, 16, !dbg !14
  %15 = or disjoint i32 %12, 24, !dbg !14
  %16 = or disjoint i32 %12, 32, !dbg !14
  %17 = or disjoint i32 %12, 40, !dbg !14
  %18 = or disjoint i32 %12, 48, !dbg !14
  %19 = or disjoint i32 %12, 56, !dbg !14
  %.frozen = freeze i32 %10, !dbg !15
  %20 = sdiv i32 %.frozen, 64, !dbg !15
  %21 = mul i32 %20, 64, !dbg !16
  %.decomposed = sub i32 %.frozen, %21, !dbg !16
  %22 = shl nuw nsw i32 %12, 6, !dbg !17
  %23 = shl nuw nsw i32 %13, 6, !dbg !17
  %24 = shl nuw nsw i32 %14, 6, !dbg !17
  %25 = shl nuw nsw i32 %15, 6, !dbg !17
  %26 = shl nuw nsw i32 %16, 6, !dbg !17
  %27 = shl nuw nsw i32 %17, 6, !dbg !17
  %28 = shl nuw nsw i32 %18, 6, !dbg !17
  %29 = shl nuw nsw i32 %19, 6, !dbg !17
  %30 = shl i32 %20, 7, !dbg !18
  %31 = or disjoint i32 %30, %12, !dbg !19
  %32 = or disjoint i32 %30, %13, !dbg !19
  %33 = or disjoint i32 %30, %14, !dbg !19
  %34 = or disjoint i32 %30, %15, !dbg !19
  %35 = or disjoint i32 %30, %16, !dbg !19
  %36 = or disjoint i32 %30, %17, !dbg !19
  %37 = or disjoint i32 %30, %18, !dbg !19
  %38 = or disjoint i32 %30, %19, !dbg !19
  %39 = or disjoint i32 %31, 64, !dbg !19
  %40 = or disjoint i32 %31, 72, !dbg !19
  %41 = or disjoint i32 %31, 80, !dbg !19
  %42 = or disjoint i32 %31, 88, !dbg !19
  %43 = or disjoint i32 %31, 96, !dbg !19
  %44 = or disjoint i32 %31, 104, !dbg !19
  %45 = or disjoint i32 %31, 112, !dbg !19
  %46 = or disjoint i32 %31, 120, !dbg !19
  %47 = sdiv i32 %31, 64, !dbg !20
  %48 = sdiv i32 %32, 64, !dbg !20
  %49 = sdiv i32 %33, 64, !dbg !20
  %50 = sdiv i32 %34, 64, !dbg !20
  %51 = sdiv i32 %35, 64, !dbg !20
  %52 = sdiv i32 %36, 64, !dbg !20
  %53 = sdiv i32 %37, 64, !dbg !20
  %54 = sdiv i32 %38, 64, !dbg !20
  %55 = sdiv i32 %39, 64, !dbg !20
  %56 = sdiv i32 %40, 64, !dbg !20
  %57 = sdiv i32 %41, 64, !dbg !20
  %58 = sdiv i32 %42, 64, !dbg !20
  %59 = sdiv i32 %43, 64, !dbg !20
  %60 = sdiv i32 %44, 64, !dbg !20
  %61 = sdiv i32 %45, 64, !dbg !20
  %62 = sdiv i32 %46, 64, !dbg !20
  %63 = srem i32 %47, 64, !dbg !21
  %64 = srem i32 %48, 64, !dbg !21
  %65 = srem i32 %49, 64, !dbg !21
  %66 = srem i32 %50, 64, !dbg !21
  %67 = srem i32 %51, 64, !dbg !21
  %68 = srem i32 %52, 64, !dbg !21
  %69 = srem i32 %53, 64, !dbg !21
  %70 = srem i32 %54, 64, !dbg !21
  %71 = srem i32 %55, 64, !dbg !21
  %72 = srem i32 %56, 64, !dbg !21
  %73 = srem i32 %57, 64, !dbg !21
  %74 = srem i32 %58, 64, !dbg !21
  %75 = srem i32 %59, 64, !dbg !21
  %76 = srem i32 %60, 64, !dbg !21
  %77 = srem i32 %61, 64, !dbg !21
  %78 = srem i32 %62, 64, !dbg !21
  %79 = shl nsw i32 %63, 12, !dbg !22
  %80 = shl nsw i32 %64, 12, !dbg !22
  %81 = shl nsw i32 %65, 12, !dbg !22
  %82 = shl nsw i32 %66, 12, !dbg !22
  %83 = shl nsw i32 %67, 12, !dbg !22
  %84 = shl nsw i32 %68, 12, !dbg !22
  %85 = shl nsw i32 %69, 12, !dbg !22
  %86 = shl nsw i32 %70, 12, !dbg !22
  %87 = shl nsw i32 %71, 12, !dbg !22
  %88 = shl nsw i32 %72, 12, !dbg !22
  %89 = shl nsw i32 %73, 12, !dbg !22
  %90 = shl nsw i32 %74, 12, !dbg !22
  %91 = shl nsw i32 %75, 12, !dbg !22
  %92 = shl nsw i32 %76, 12, !dbg !22
  %93 = shl nsw i32 %77, 12, !dbg !22
  %94 = shl nsw i32 %78, 12, !dbg !22
  %95 = or disjoint i32 %22, %88, !dbg !23
  %96 = or disjoint i32 %22, %89, !dbg !23
  %97 = or disjoint i32 %22, %90, !dbg !23
  %98 = or disjoint i32 %22, %91, !dbg !23
  %99 = or disjoint i32 %22, %92, !dbg !23
  %100 = or disjoint i32 %22, %93, !dbg !23
  %101 = or disjoint i32 %22, %94, !dbg !23
  %102 = shl nsw i32 %.decomposed, 13, !dbg !24
  %103 = add i32 %31, %102, !dbg !25
  %104 = add i32 %32, %102, !dbg !25
  %105 = add i32 %33, %102, !dbg !25
  %106 = add i32 %34, %102, !dbg !25
  %107 = add i32 %35, %102, !dbg !25
  %108 = add i32 %36, %102, !dbg !25
  %109 = add i32 %37, %102, !dbg !25
  %110 = add i32 %38, %102, !dbg !25
  %111 = add i32 %39, %102, !dbg !25
  %112 = add i32 %40, %102, !dbg !25
  %113 = add i32 %41, %102, !dbg !25
  %114 = add i32 %42, %102, !dbg !25
  %115 = add i32 %43, %102, !dbg !25
  %116 = add i32 %44, %102, !dbg !25
  %117 = add i32 %45, %102, !dbg !25
  %118 = add i32 %46, %102, !dbg !25
  %119 = sdiv i32 %103, 262144, !dbg !26
  %120 = sdiv i32 %104, 262144, !dbg !26
  %121 = sdiv i32 %105, 262144, !dbg !26
  %122 = sdiv i32 %106, 262144, !dbg !26
  %123 = sdiv i32 %107, 262144, !dbg !26
  %124 = sdiv i32 %108, 262144, !dbg !26
  %125 = sdiv i32 %109, 262144, !dbg !26
  %126 = sdiv i32 %110, 262144, !dbg !26
  %127 = sdiv i32 %111, 262144, !dbg !26
  %128 = sdiv i32 %112, 262144, !dbg !26
  %129 = sdiv i32 %113, 262144, !dbg !26
  %130 = sdiv i32 %114, 262144, !dbg !26
  %131 = sdiv i32 %115, 262144, !dbg !26
  %132 = sdiv i32 %116, 262144, !dbg !26
  %133 = sdiv i32 %117, 262144, !dbg !26
  %134 = sdiv i32 %118, 262144, !dbg !26
  %135 = shl nsw i32 %119, 18, !dbg !27
  %136 = shl nsw i32 %120, 18, !dbg !27
  %137 = shl nsw i32 %121, 18, !dbg !27
  %138 = shl nsw i32 %122, 18, !dbg !27
  %139 = shl nsw i32 %123, 18, !dbg !27
  %140 = shl nsw i32 %124, 18, !dbg !27
  %141 = shl nsw i32 %125, 18, !dbg !27
  %142 = shl nsw i32 %126, 18, !dbg !27
  %143 = shl nsw i32 %127, 18, !dbg !27
  %144 = shl nsw i32 %128, 18, !dbg !27
  %145 = shl nsw i32 %129, 18, !dbg !27
  %146 = shl nsw i32 %130, 18, !dbg !27
  %147 = shl nsw i32 %131, 18, !dbg !27
  %148 = shl nsw i32 %132, 18, !dbg !27
  %149 = shl nsw i32 %133, 18, !dbg !27
  %150 = shl nsw i32 %134, 18, !dbg !27
  %151 = sdiv i32 %103, 4096, !dbg !28
  %152 = sdiv i32 %104, 4096, !dbg !28
  %153 = sdiv i32 %105, 4096, !dbg !28
  %154 = sdiv i32 %106, 4096, !dbg !28
  %155 = sdiv i32 %107, 4096, !dbg !28
  %156 = sdiv i32 %108, 4096, !dbg !28
  %157 = sdiv i32 %109, 4096, !dbg !28
  %158 = sdiv i32 %110, 4096, !dbg !28
  %159 = sdiv i32 %111, 4096, !dbg !28
  %160 = sdiv i32 %112, 4096, !dbg !28
  %161 = sdiv i32 %113, 4096, !dbg !28
  %162 = sdiv i32 %114, 4096, !dbg !28
  %163 = sdiv i32 %115, 4096, !dbg !28
  %164 = sdiv i32 %116, 4096, !dbg !28
  %165 = sdiv i32 %117, 4096, !dbg !28
  %166 = sdiv i32 %118, 4096, !dbg !28
  %167 = srem i32 %151, 64, !dbg !29
  %168 = srem i32 %152, 64, !dbg !29
  %169 = srem i32 %153, 64, !dbg !29
  %170 = srem i32 %154, 64, !dbg !29
  %171 = srem i32 %155, 64, !dbg !29
  %172 = srem i32 %156, 64, !dbg !29
  %173 = srem i32 %157, 64, !dbg !29
  %174 = srem i32 %158, 64, !dbg !29
  %175 = srem i32 %159, 64, !dbg !29
  %176 = srem i32 %160, 64, !dbg !29
  %177 = srem i32 %161, 64, !dbg !29
  %178 = srem i32 %162, 64, !dbg !29
  %179 = srem i32 %163, 64, !dbg !29
  %180 = srem i32 %164, 64, !dbg !29
  %181 = srem i32 %165, 64, !dbg !29
  %182 = srem i32 %166, 64, !dbg !29
  %183 = add i32 %167, %135, !dbg !23
  %184 = add i32 %183, %22, !dbg !30
  %185 = add i32 %184, %79, !dbg !31
  %186 = add i32 %168, %136, !dbg !23
  %187 = add i32 %186, %23, !dbg !30
  %188 = add i32 %187, %80, !dbg !31
  %189 = add i32 %169, %137, !dbg !23
  %190 = add i32 %189, %24, !dbg !30
  %191 = add i32 %190, %81, !dbg !31
  %192 = add i32 %170, %138, !dbg !23
  %193 = add i32 %192, %25, !dbg !30
  %194 = add i32 %193, %82, !dbg !31
  %195 = add i32 %171, %139, !dbg !23
  %196 = add i32 %195, %26, !dbg !30
  %197 = add i32 %196, %83, !dbg !31
  %198 = add i32 %172, %140, !dbg !23
  %199 = add i32 %198, %27, !dbg !30
  %200 = add i32 %199, %84, !dbg !31
  %201 = add i32 %173, %141, !dbg !23
  %202 = add i32 %201, %28, !dbg !30
  %203 = add i32 %202, %85, !dbg !31
  %204 = add i32 %174, %142, !dbg !23
  %205 = add i32 %204, %29, !dbg !30
  %206 = add i32 %205, %86, !dbg !31
  %207 = add i32 %175, %143, !dbg !23
  %208 = add i32 %207, %22, !dbg !30
  %209 = add i32 %208, %87, !dbg !31
  %210 = add i32 %176, %144, !dbg !23
  %211 = add i32 %210, 512, !dbg !30
  %212 = add i32 %211, %95, !dbg !31
  %213 = add i32 %177, %145, !dbg !23
  %214 = add i32 %213, 1024, !dbg !30
  %215 = add i32 %214, %96, !dbg !31
  %216 = add i32 %178, %146, !dbg !23
  %217 = add i32 %216, 1536, !dbg !30
  %218 = add i32 %217, %97, !dbg !31
  %219 = add i32 %179, %147, !dbg !23
  %220 = add i32 %219, 2048, !dbg !30
  %221 = add i32 %220, %98, !dbg !31
  %222 = add i32 %180, %148, !dbg !23
  %223 = add i32 %222, 2560, !dbg !30
  %224 = add i32 %223, %99, !dbg !31
  %225 = add i32 %181, %149, !dbg !23
  %226 = add i32 %225, 3072, !dbg !30
  %227 = add i32 %226, %100, !dbg !31
  %228 = add i32 %182, %150, !dbg !23
  %229 = add i32 %228, 3584, !dbg !30
  %230 = add i32 %229, %101, !dbg !31
  %231 = sext i32 %185 to i64, !dbg !32
  %232 = getelementptr float, ptr addrspace(1) %0, i64 %231, !dbg !32
  %233 = sext i32 %188 to i64, !dbg !32
  %234 = getelementptr float, ptr addrspace(1) %0, i64 %233, !dbg !32
  %235 = sext i32 %191 to i64, !dbg !32
  %236 = getelementptr float, ptr addrspace(1) %0, i64 %235, !dbg !32
  %237 = sext i32 %194 to i64, !dbg !32
  %238 = getelementptr float, ptr addrspace(1) %0, i64 %237, !dbg !32
  %239 = sext i32 %197 to i64, !dbg !32
  %240 = getelementptr float, ptr addrspace(1) %0, i64 %239, !dbg !32
  %241 = sext i32 %200 to i64, !dbg !32
  %242 = getelementptr float, ptr addrspace(1) %0, i64 %241, !dbg !32
  %243 = sext i32 %203 to i64, !dbg !32
  %244 = getelementptr float, ptr addrspace(1) %0, i64 %243, !dbg !32
  %245 = sext i32 %206 to i64, !dbg !32
  %246 = getelementptr float, ptr addrspace(1) %0, i64 %245, !dbg !32
  %247 = sext i32 %209 to i64, !dbg !32
  %248 = getelementptr float, ptr addrspace(1) %0, i64 %247, !dbg !32
  %249 = sext i32 %212 to i64, !dbg !32
  %250 = getelementptr float, ptr addrspace(1) %0, i64 %249, !dbg !32
  %251 = sext i32 %215 to i64, !dbg !32
  %252 = getelementptr float, ptr addrspace(1) %0, i64 %251, !dbg !32
  %253 = sext i32 %218 to i64, !dbg !32
  %254 = getelementptr float, ptr addrspace(1) %0, i64 %253, !dbg !32
  %255 = sext i32 %221 to i64, !dbg !32
  %256 = getelementptr float, ptr addrspace(1) %0, i64 %255, !dbg !32
  %257 = sext i32 %224 to i64, !dbg !32
  %258 = getelementptr float, ptr addrspace(1) %0, i64 %257, !dbg !32
  %259 = sext i32 %227 to i64, !dbg !32
  %260 = getelementptr float, ptr addrspace(1) %0, i64 %259, !dbg !32
  %261 = sext i32 %230 to i64, !dbg !32
  %262 = getelementptr float, ptr addrspace(1) %0, i64 %261, !dbg !32
  %263 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %232, i1 true) #3, !dbg !33
  %264 = bitcast i32 %263 to float, !dbg !33
  %265 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %234, i1 true) #3, !dbg !33
  %266 = bitcast i32 %265 to float, !dbg !33
  %267 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %236, i1 true) #3, !dbg !33
  %268 = bitcast i32 %267 to float, !dbg !33
  %269 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %238, i1 true) #3, !dbg !33
  %270 = bitcast i32 %269 to float, !dbg !33
  %271 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %240, i1 true) #3, !dbg !33
  %272 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %242, i1 true) #3, !dbg !33
  %273 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %244, i1 true) #3, !dbg !33
  %274 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %246, i1 true) #3, !dbg !33
  %275 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %248, i1 true) #3, !dbg !33
  %276 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %250, i1 true) #3, !dbg !33
  %277 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %252, i1 true) #3, !dbg !33
  %278 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %254, i1 true) #3, !dbg !33
  %279 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %256, i1 true) #3, !dbg !33
  %280 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %258, i1 true) #3, !dbg !33
  %281 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %260, i1 true) #3, !dbg !33
  %282 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %262, i1 true) #3, !dbg !33
  %283 = sext i32 %167 to i64, !dbg !34
  %284 = getelementptr float, ptr addrspace(1) %1, i64 %283, !dbg !34
  %285 = sext i32 %168 to i64, !dbg !34
  %286 = getelementptr float, ptr addrspace(1) %1, i64 %285, !dbg !34
  %287 = sext i32 %169 to i64, !dbg !34
  %288 = getelementptr float, ptr addrspace(1) %1, i64 %287, !dbg !34
  %289 = sext i32 %170 to i64, !dbg !34
  %290 = getelementptr float, ptr addrspace(1) %1, i64 %289, !dbg !34
  %291 = sext i32 %171 to i64, !dbg !34
  %292 = getelementptr float, ptr addrspace(1) %1, i64 %291, !dbg !34
  %293 = sext i32 %172 to i64, !dbg !34
  %294 = getelementptr float, ptr addrspace(1) %1, i64 %293, !dbg !34
  %295 = sext i32 %173 to i64, !dbg !34
  %296 = getelementptr float, ptr addrspace(1) %1, i64 %295, !dbg !34
  %297 = sext i32 %174 to i64, !dbg !34
  %298 = getelementptr float, ptr addrspace(1) %1, i64 %297, !dbg !34
  %299 = sext i32 %175 to i64, !dbg !34
  %300 = getelementptr float, ptr addrspace(1) %1, i64 %299, !dbg !34
  %301 = sext i32 %176 to i64, !dbg !34
  %302 = getelementptr float, ptr addrspace(1) %1, i64 %301, !dbg !34
  %303 = sext i32 %177 to i64, !dbg !34
  %304 = getelementptr float, ptr addrspace(1) %1, i64 %303, !dbg !34
  %305 = sext i32 %178 to i64, !dbg !34
  %306 = getelementptr float, ptr addrspace(1) %1, i64 %305, !dbg !34
  %307 = sext i32 %179 to i64, !dbg !34
  %308 = getelementptr float, ptr addrspace(1) %1, i64 %307, !dbg !34
  %309 = sext i32 %180 to i64, !dbg !34
  %310 = getelementptr float, ptr addrspace(1) %1, i64 %309, !dbg !34
  %311 = sext i32 %181 to i64, !dbg !34
  %312 = getelementptr float, ptr addrspace(1) %1, i64 %311, !dbg !34
  %313 = sext i32 %182 to i64, !dbg !34
  %314 = getelementptr float, ptr addrspace(1) %1, i64 %313, !dbg !34
  %315 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %284, i1 true) #3, !dbg !35
  %316 = bitcast i32 %315 to float, !dbg !35
  %317 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %286, i1 true) #3, !dbg !35
  %318 = bitcast i32 %317 to float, !dbg !35
  %319 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %288, i1 true) #3, !dbg !35
  %320 = bitcast i32 %319 to float, !dbg !35
  %321 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %290, i1 true) #3, !dbg !35
  %322 = bitcast i32 %321 to float, !dbg !35
  %323 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %292, i1 true) #3, !dbg !35
  %324 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %294, i1 true) #3, !dbg !35
  %325 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %296, i1 true) #3, !dbg !35
  %326 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %298, i1 true) #3, !dbg !35
  %327 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %300, i1 true) #3, !dbg !35
  %328 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %302, i1 true) #3, !dbg !35
  %329 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %304, i1 true) #3, !dbg !35
  %330 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %306, i1 true) #3, !dbg !35
  %331 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %308, i1 true) #3, !dbg !35
  %332 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %310, i1 true) #3, !dbg !35
  %333 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %312, i1 true) #3, !dbg !35
  %334 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %314, i1 true) #3, !dbg !35
  %335 = or disjoint i32 %22, 524288, !dbg !36
  %336 = add i32 %183, %335, !dbg !37
  %337 = add i32 %336, %79, !dbg !38
  %338 = add i32 %186, 524288, !dbg !39
  %339 = add i32 %338, %23, !dbg !37
  %340 = add i32 %339, %80, !dbg !38
  %341 = add i32 %189, 524288, !dbg !39
  %342 = add i32 %341, %24, !dbg !37
  %343 = add i32 %342, %81, !dbg !38
  %344 = add i32 %192, 524288, !dbg !39
  %345 = add i32 %344, %25, !dbg !37
  %346 = add i32 %345, %82, !dbg !38
  %347 = add i32 %195, 524288, !dbg !39
  %348 = add i32 %347, %26, !dbg !37
  %349 = add i32 %348, %83, !dbg !38
  %350 = add i32 %198, 524288, !dbg !39
  %351 = add i32 %350, %27, !dbg !37
  %352 = add i32 %351, %84, !dbg !38
  %353 = add i32 %201, 524288, !dbg !39
  %354 = add i32 %353, %28, !dbg !37
  %355 = add i32 %354, %85, !dbg !38
  %356 = add i32 %204, 524288, !dbg !39
  %357 = add i32 %356, %29, !dbg !37
  %358 = add i32 %357, %86, !dbg !38
  %359 = add i32 %207, %335, !dbg !37
  %360 = add i32 %359, %87, !dbg !38
  %361 = add i32 %210, 524800, !dbg !39
  %362 = add i32 %361, %22, !dbg !37
  %363 = add i32 %362, %88, !dbg !38
  %364 = add i32 %213, 525312, !dbg !39
  %365 = add i32 %364, %22, !dbg !37
  %366 = add i32 %365, %89, !dbg !38
  %367 = add i32 %216, 525824, !dbg !39
  %368 = add i32 %367, %22, !dbg !37
  %369 = add i32 %368, %90, !dbg !38
  %370 = add i32 %219, 526336, !dbg !39
  %371 = add i32 %370, %22, !dbg !37
  %372 = add i32 %371, %91, !dbg !38
  %373 = add i32 %222, 526848, !dbg !39
  %374 = add i32 %373, %22, !dbg !37
  %375 = add i32 %374, %92, !dbg !38
  %376 = add i32 %225, 527360, !dbg !39
  %377 = add i32 %376, %22, !dbg !37
  %378 = add i32 %377, %93, !dbg !38
  %379 = add i32 %228, 527872, !dbg !39
  %380 = add i32 %379, %22, !dbg !37
  %381 = add i32 %380, %94, !dbg !38
  %382 = sext i32 %337 to i64, !dbg !40
  %383 = getelementptr float, ptr addrspace(1) %0, i64 %382, !dbg !40
  %384 = sext i32 %340 to i64, !dbg !40
  %385 = getelementptr float, ptr addrspace(1) %0, i64 %384, !dbg !40
  %386 = sext i32 %343 to i64, !dbg !40
  %387 = getelementptr float, ptr addrspace(1) %0, i64 %386, !dbg !40
  %388 = sext i32 %346 to i64, !dbg !40
  %389 = getelementptr float, ptr addrspace(1) %0, i64 %388, !dbg !40
  %390 = sext i32 %349 to i64, !dbg !40
  %391 = getelementptr float, ptr addrspace(1) %0, i64 %390, !dbg !40
  %392 = sext i32 %352 to i64, !dbg !40
  %393 = getelementptr float, ptr addrspace(1) %0, i64 %392, !dbg !40
  %394 = sext i32 %355 to i64, !dbg !40
  %395 = getelementptr float, ptr addrspace(1) %0, i64 %394, !dbg !40
  %396 = sext i32 %358 to i64, !dbg !40
  %397 = getelementptr float, ptr addrspace(1) %0, i64 %396, !dbg !40
  %398 = sext i32 %360 to i64, !dbg !40
  %399 = getelementptr float, ptr addrspace(1) %0, i64 %398, !dbg !40
  %400 = sext i32 %363 to i64, !dbg !40
  %401 = getelementptr float, ptr addrspace(1) %0, i64 %400, !dbg !40
  %402 = sext i32 %366 to i64, !dbg !40
  %403 = getelementptr float, ptr addrspace(1) %0, i64 %402, !dbg !40
  %404 = sext i32 %369 to i64, !dbg !40
  %405 = getelementptr float, ptr addrspace(1) %0, i64 %404, !dbg !40
  %406 = sext i32 %372 to i64, !dbg !40
  %407 = getelementptr float, ptr addrspace(1) %0, i64 %406, !dbg !40
  %408 = sext i32 %375 to i64, !dbg !40
  %409 = getelementptr float, ptr addrspace(1) %0, i64 %408, !dbg !40
  %410 = sext i32 %378 to i64, !dbg !40
  %411 = getelementptr float, ptr addrspace(1) %0, i64 %410, !dbg !40
  %412 = sext i32 %381 to i64, !dbg !40
  %413 = getelementptr float, ptr addrspace(1) %0, i64 %412, !dbg !40
  %414 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %383, i1 true) #3, !dbg !41
  %415 = bitcast i32 %414 to float, !dbg !41
  %416 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %385, i1 true) #3, !dbg !41
  %417 = bitcast i32 %416 to float, !dbg !41
  %418 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %387, i1 true) #3, !dbg !41
  %419 = bitcast i32 %418 to float, !dbg !41
  %420 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %389, i1 true) #3, !dbg !41
  %421 = bitcast i32 %420 to float, !dbg !41
  %422 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %391, i1 true) #3, !dbg !41
  %423 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %393, i1 true) #3, !dbg !41
  %424 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %395, i1 true) #3, !dbg !41
  %425 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %397, i1 true) #3, !dbg !41
  %426 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %399, i1 true) #3, !dbg !41
  %427 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %401, i1 true) #3, !dbg !41
  %428 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %403, i1 true) #3, !dbg !41
  %429 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %405, i1 true) #3, !dbg !41
  %430 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %407, i1 true) #3, !dbg !41
  %431 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %409, i1 true) #3, !dbg !41
  %432 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %411, i1 true) #3, !dbg !41
  %433 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %413, i1 true) #3, !dbg !41
  %434 = fadd float %264, %316, !dbg !42
  %435 = fadd float %266, %318, !dbg !42
  %436 = fadd float %268, %320, !dbg !42
  %437 = fadd float %270, %322, !dbg !42
  %438 = fadd float %316, %415, !dbg !43
  %439 = fadd float %318, %417, !dbg !43
  %440 = fadd float %320, %419, !dbg !43
  %441 = fadd float %322, %421, !dbg !43
  %442 = fsub float %434, %438, !dbg !44
  %443 = fsub float %435, %439, !dbg !44
  %444 = fsub float %436, %440, !dbg !44
  %445 = fsub float %437, %441, !dbg !44
  %446 = fmul float %442, %442, !dbg !45
  %447 = fmul float %443, %443, !dbg !45
  %448 = fmul float %444, %444, !dbg !45
  %449 = fmul float %445, %445, !dbg !45
  %450 = insertelement <2 x i32> poison, i32 %271, i64 0, !dbg !33
  %451 = insertelement <2 x i32> %450, i32 %272, i64 1, !dbg !33
  %452 = bitcast <2 x i32> %451 to <2 x float>, !dbg !33
  %453 = insertelement <2 x i32> poison, i32 %323, i64 0, !dbg !35
  %454 = insertelement <2 x i32> %453, i32 %324, i64 1, !dbg !35
  %455 = bitcast <2 x i32> %454 to <2 x float>, !dbg !35
  %456 = insertelement <2 x i32> poison, i32 %422, i64 0, !dbg !41
  %457 = insertelement <2 x i32> %456, i32 %423, i64 1, !dbg !41
  %458 = bitcast <2 x i32> %457 to <2 x float>, !dbg !41
  %459 = fadd <2 x float> %452, %455, !dbg !42
  %460 = fadd <2 x float> %455, %458, !dbg !43
  %461 = fsub <2 x float> %459, %460, !dbg !44
  %462 = fmul <2 x float> %461, %461, !dbg !45
  %463 = insertelement <2 x i32> poison, i32 %273, i64 0, !dbg !33
  %464 = insertelement <2 x i32> %463, i32 %274, i64 1, !dbg !33
  %465 = bitcast <2 x i32> %464 to <2 x float>, !dbg !33
  %466 = insertelement <2 x i32> poison, i32 %325, i64 0, !dbg !35
  %467 = insertelement <2 x i32> %466, i32 %326, i64 1, !dbg !35
  %468 = bitcast <2 x i32> %467 to <2 x float>, !dbg !35
  %469 = insertelement <2 x i32> poison, i32 %424, i64 0, !dbg !41
  %470 = insertelement <2 x i32> %469, i32 %425, i64 1, !dbg !41
  %471 = bitcast <2 x i32> %470 to <2 x float>, !dbg !41
  %472 = fadd <2 x float> %465, %468, !dbg !42
  %473 = fadd <2 x float> %468, %471, !dbg !43
  %474 = fsub <2 x float> %472, %473, !dbg !44
  %475 = fmul <2 x float> %474, %474, !dbg !45
  %476 = insertelement <2 x i32> poison, i32 %275, i64 0, !dbg !33
  %477 = insertelement <2 x i32> %476, i32 %276, i64 1, !dbg !33
  %478 = bitcast <2 x i32> %477 to <2 x float>, !dbg !33
  %479 = insertelement <2 x i32> poison, i32 %327, i64 0, !dbg !35
  %480 = insertelement <2 x i32> %479, i32 %328, i64 1, !dbg !35
  %481 = bitcast <2 x i32> %480 to <2 x float>, !dbg !35
  %482 = insertelement <2 x i32> poison, i32 %426, i64 0, !dbg !41
  %483 = insertelement <2 x i32> %482, i32 %427, i64 1, !dbg !41
  %484 = bitcast <2 x i32> %483 to <2 x float>, !dbg !41
  %485 = fadd <2 x float> %478, %481, !dbg !42
  %486 = fadd <2 x float> %481, %484, !dbg !43
  %487 = fsub <2 x float> %485, %486, !dbg !44
  %488 = fmul <2 x float> %487, %487, !dbg !45
  %489 = insertelement <2 x i32> poison, i32 %277, i64 0, !dbg !33
  %490 = insertelement <2 x i32> %489, i32 %278, i64 1, !dbg !33
  %491 = bitcast <2 x i32> %490 to <2 x float>, !dbg !33
  %492 = insertelement <2 x i32> poison, i32 %329, i64 0, !dbg !35
  %493 = insertelement <2 x i32> %492, i32 %330, i64 1, !dbg !35
  %494 = bitcast <2 x i32> %493 to <2 x float>, !dbg !35
  %495 = insertelement <2 x i32> poison, i32 %428, i64 0, !dbg !41
  %496 = insertelement <2 x i32> %495, i32 %429, i64 1, !dbg !41
  %497 = bitcast <2 x i32> %496 to <2 x float>, !dbg !41
  %498 = fadd <2 x float> %491, %494, !dbg !42
  %499 = fadd <2 x float> %494, %497, !dbg !43
  %500 = fsub <2 x float> %498, %499, !dbg !44
  %501 = fmul <2 x float> %500, %500, !dbg !45
  %502 = insertelement <2 x i32> poison, i32 %279, i64 0, !dbg !33
  %503 = insertelement <2 x i32> %502, i32 %280, i64 1, !dbg !33
  %504 = bitcast <2 x i32> %503 to <2 x float>, !dbg !33
  %505 = insertelement <2 x i32> poison, i32 %331, i64 0, !dbg !35
  %506 = insertelement <2 x i32> %505, i32 %332, i64 1, !dbg !35
  %507 = bitcast <2 x i32> %506 to <2 x float>, !dbg !35
  %508 = insertelement <2 x i32> poison, i32 %430, i64 0, !dbg !41
  %509 = insertelement <2 x i32> %508, i32 %431, i64 1, !dbg !41
  %510 = bitcast <2 x i32> %509 to <2 x float>, !dbg !41
  %511 = fadd <2 x float> %504, %507, !dbg !42
  %512 = fadd <2 x float> %507, %510, !dbg !43
  %513 = fsub <2 x float> %511, %512, !dbg !44
  %514 = fmul <2 x float> %513, %513, !dbg !45
  %515 = insertelement <2 x i32> poison, i32 %281, i64 0, !dbg !33
  %516 = insertelement <2 x i32> %515, i32 %282, i64 1, !dbg !33
  %517 = bitcast <2 x i32> %516 to <2 x float>, !dbg !33
  %518 = insertelement <2 x i32> poison, i32 %333, i64 0, !dbg !35
  %519 = insertelement <2 x i32> %518, i32 %334, i64 1, !dbg !35
  %520 = bitcast <2 x i32> %519 to <2 x float>, !dbg !35
  %521 = insertelement <2 x i32> poison, i32 %432, i64 0, !dbg !41
  %522 = insertelement <2 x i32> %521, i32 %433, i64 1, !dbg !41
  %523 = bitcast <2 x i32> %522 to <2 x float>, !dbg !41
  %524 = fadd <2 x float> %517, %520, !dbg !42
  %525 = fadd <2 x float> %520, %523, !dbg !43
  %526 = fsub <2 x float> %524, %525, !dbg !44
  %527 = fmul <2 x float> %526, %526, !dbg !45
  %528 = fadd float %446, %447, !dbg !46
  %529 = fadd float %528, %448, !dbg !46
  %530 = fadd float %529, %449, !dbg !46
  %531 = extractelement <2 x float> %462, i64 0, !dbg !46
  %532 = fadd float %530, %531, !dbg !46
  %533 = extractelement <2 x float> %462, i64 1, !dbg !46
  %534 = fadd float %532, %533, !dbg !46
  %535 = extractelement <2 x float> %475, i64 0, !dbg !46
  %536 = fadd float %534, %535, !dbg !46
  %537 = extractelement <2 x float> %475, i64 1, !dbg !46
  %538 = fadd float %536, %537, !dbg !46
  %539 = extractelement <2 x float> %488, i64 0, !dbg !46
  %540 = fadd float %538, %539, !dbg !46
  %541 = extractelement <2 x float> %488, i64 1, !dbg !46
  %542 = fadd float %540, %541, !dbg !46
  %543 = extractelement <2 x float> %501, i64 0, !dbg !46
  %544 = fadd float %542, %543, !dbg !46
  %545 = extractelement <2 x float> %501, i64 1, !dbg !46
  %546 = fadd float %544, %545, !dbg !46
  %547 = extractelement <2 x float> %514, i64 0, !dbg !46
  %548 = fadd float %546, %547, !dbg !46
  %549 = extractelement <2 x float> %514, i64 1, !dbg !46
  %550 = fadd float %548, %549, !dbg !46
  %551 = extractelement <2 x float> %527, i64 0, !dbg !46
  %552 = fadd float %550, %551, !dbg !46
  %553 = extractelement <2 x float> %527, i64 1, !dbg !46
  %554 = fadd float %552, %553, !dbg !46
  %555 = shl nuw nsw i32 %9, 3, !dbg !51
  %556 = or disjoint i32 %555, %12, !dbg !51
  %557 = getelementptr float, ptr addrspace(3) @global_smem, i32 %556, !dbg !51
  %558 = bitcast float %554 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %557, <1 x i32> %558, i1 true) #3, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %559 = icmp slt i32 %8, 256, !dbg !51
  %560 = getelementptr float, ptr addrspace(3) @global_smem, i32 %8, !dbg !51
  %561 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %560, i1 %559) #3, !dbg !51
  %562 = bitcast i32 %561 to float, !dbg !51
  %563 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %561, i32 4, i32 31), !dbg !51
  %564 = bitcast i32 %563 to float, !dbg !51
  %565 = fadd float %562, %564, !dbg !46
  %566 = bitcast float %565 to i32, !dbg !51
  %567 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %566, i32 2, i32 31), !dbg !51
  %568 = bitcast i32 %567 to float, !dbg !51
  %569 = fadd float %565, %568, !dbg !46
  %570 = bitcast float %569 to i32, !dbg !51
  %571 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %570, i32 1, i32 31), !dbg !51
  %572 = bitcast i32 %571 to float, !dbg !51
  %573 = fadd float %569, %572, !dbg !46
  %574 = and i32 %8, 7, !dbg !51
  %575 = icmp eq i32 %574, 0, !dbg !51
  %576 = and i1 %559, %575, !dbg !51
  %577 = bitcast float %573 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %560, <1 x i32> %577, i1 %576) #3, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %578 = getelementptr float, ptr addrspace(3) @global_smem, i32 %555, !dbg !51
  %579 = load i32, ptr addrspace(3) %578, align 16, !dbg !51
  %580 = sext i32 %10 to i64, !dbg !52
  %581 = getelementptr float, ptr addrspace(1) %2, i64 %580, !dbg !52
  %582 = icmp eq i32 %12, 0, !dbg !53
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %579, ptr addrspace(1) %581, i1 %582) #3, !dbg !53
  ret void, !dbg !54
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cxxfkvmzp6wvbrmgpthrrmlzd263grm7yj6v347vclm3wvm3qlbm.py", directory: "inductor_cache/xx")
!4 = !{ptr @triton_per_fused_mean_pow_sub_7, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_mean_pow_sub_7, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_mean_pow_sub_7", linkageName: "triton_per_fused_mean_pow_sub_7", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 26, column: 34, scope: !7)
!15 = !DILocation(line: 31, column: 19, scope: !7)
!16 = !DILocation(line: 30, column: 19, scope: !7)
!17 = !DILocation(line: 33, column: 35, scope: !7)
!18 = !DILocation(line: 33, column: 65, scope: !7)
!19 = !DILocation(line: 33, column: 61, scope: !7)
!20 = !DILocation(line: 33, column: 72, scope: !7)
!21 = !DILocation(line: 33, column: 78, scope: !7)
!22 = !DILocation(line: 33, column: 54, scope: !7)
!23 = !DILocation(line: 33, column: 47, scope: !7)
!24 = !DILocation(line: 33, column: 113, scope: !7)
!25 = !DILocation(line: 33, column: 108, scope: !7)
!26 = !DILocation(line: 33, column: 120, scope: !7)
!27 = !DILocation(line: 33, column: 93, scope: !7)
!28 = !DILocation(line: 33, column: 160, scope: !7)
!29 = !DILocation(line: 33, column: 168, scope: !7)
!30 = !DILocation(line: 33, column: 85, scope: !7)
!31 = !DILocation(line: 33, column: 132, scope: !7)
!32 = !DILocation(line: 33, column: 30, scope: !7)
!33 = !DILocation(line: 33, column: 175, scope: !7)
!34 = !DILocation(line: 34, column: 31, scope: !7)
!35 = !DILocation(line: 34, column: 73, scope: !7)
!36 = !DILocation(line: 35, column: 39, scope: !7)
!37 = !DILocation(line: 35, column: 94, scope: !7)
!38 = !DILocation(line: 35, column: 141, scope: !7)
!39 = !DILocation(line: 35, column: 56, scope: !7)
!40 = !DILocation(line: 35, column: 30, scope: !7)
!41 = !DILocation(line: 35, column: 184, scope: !7)
!42 = !DILocation(line: 36, column: 18, scope: !7)
!43 = !DILocation(line: 37, column: 18, scope: !7)
!44 = !DILocation(line: 38, column: 18, scope: !7)
!45 = !DILocation(line: 39, column: 18, scope: !7)
!46 = !DILocation(line: 256, column: 15, scope: !47, inlinedAt: !50)
!47 = distinct !DILexicalBlockFile(scope: !49, file: !48, discriminator: 0)
!48 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!49 = distinct !DILexicalBlockFile(scope: !7, file: !48, discriminator: 0)
!50 = !DILocation(line: 41, column: 24, scope: !7)
!51 = !DILocation(line: 267, column: 36, scope: !49, inlinedAt: !50)
!52 = !DILocation(line: 42, column: 25, scope: !7)
!53 = !DILocation(line: 42, column: 36, scope: !7)
!54 = !DILocation(line: 42, column: 4, scope: !7)
