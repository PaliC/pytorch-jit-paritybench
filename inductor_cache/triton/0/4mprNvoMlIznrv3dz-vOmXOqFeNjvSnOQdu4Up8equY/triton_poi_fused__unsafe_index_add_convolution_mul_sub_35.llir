; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__unsafe_index_add_convolution_mul_sub_35(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %12 = shl i32 %11, 9, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = shl i32 %13, 2, !dbg !12
  %15 = and i32 %14, 508, !dbg !12
  %16 = or disjoint i32 %12, %15, !dbg !13
  %17 = or disjoint i32 %16, 2, !dbg !13
  %.frozen = freeze i32 %16, !dbg !14
  %18 = sdiv i32 %.frozen, 64, !dbg !14
  %19 = srem i32 %18, 64, !dbg !15
  %20 = mul i32 %18, 64, !dbg !16
  %.decomposed = sub i32 %.frozen, %20, !dbg !16
  %21 = srem i32 %17, 64, !dbg !16
  %22 = sdiv i32 %16, 4096, !dbg !17
  %23 = srem i32 %22, 4, !dbg !18
  %24 = sdiv i32 %16, 16384, !dbg !19
  %25 = sext i32 %19 to i64, !dbg !20
  %26 = getelementptr i64, ptr addrspace(1) %1, i64 %25, !dbg !20
  %27 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %26, i1 true) #1, !dbg !21
  %28 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %26, i1 true) #1, !dbg !21
  %29 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %26, i1 true) #1, !dbg !21
  %30 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %26, i1 true) #1, !dbg !21
  %31 = sext i32 %.decomposed to i64, !dbg !22
  %32 = getelementptr i64, ptr addrspace(1) %2, i64 %31, !dbg !22
  %33 = sext i32 %21 to i64, !dbg !22
  %34 = getelementptr i64, ptr addrspace(1) %2, i64 %33, !dbg !22
  %35 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %32, i1 true) #1, !dbg !23
  %36 = extractvalue { i64, i64 } %35, 0, !dbg !23
  %37 = extractvalue { i64, i64 } %35, 1, !dbg !23
  %38 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %34, i1 true) #1, !dbg !23
  %39 = extractvalue { i64, i64 } %38, 0, !dbg !23
  %40 = extractvalue { i64, i64 } %38, 1, !dbg !23
  %41 = sext i32 %23 to i64, !dbg !24
  %42 = getelementptr float, ptr addrspace(1) %4, i64 %41, !dbg !24
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 true) #1, !dbg !25
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 true) #1, !dbg !25
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 true) #1, !dbg !25
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 true) #1, !dbg !25
  %47 = getelementptr i64, ptr addrspace(1) %5, i64 %31, !dbg !26
  %48 = getelementptr i64, ptr addrspace(1) %5, i64 %33, !dbg !26
  %49 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %47, i1 true) #1, !dbg !27
  %50 = extractvalue { i64, i64 } %49, 0, !dbg !27
  %51 = extractvalue { i64, i64 } %49, 1, !dbg !27
  %52 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %48, i1 true) #1, !dbg !27
  %53 = extractvalue { i64, i64 } %52, 0, !dbg !27
  %54 = extractvalue { i64, i64 } %52, 1, !dbg !27
  %55 = getelementptr float, ptr addrspace(1) %6, i64 %31, !dbg !28
  %56 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %55, i1 true) #1, !dbg !29
  %57 = extractvalue { i32, i32, i32, i32 } %56, 0, !dbg !29
  %58 = extractvalue { i32, i32, i32, i32 } %56, 1, !dbg !29
  %59 = extractvalue { i32, i32, i32, i32 } %56, 2, !dbg !29
  %60 = extractvalue { i32, i32, i32, i32 } %56, 3, !dbg !29
  %61 = getelementptr i64, ptr addrspace(1) %7, i64 %25, !dbg !30
  %62 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %61, i1 true) #1, !dbg !31
  %63 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %61, i1 true) #1, !dbg !31
  %64 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %61, i1 true) #1, !dbg !31
  %65 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %61, i1 true) #1, !dbg !31
  %66 = getelementptr float, ptr addrspace(1) %8, i64 %25, !dbg !32
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 true) #1, !dbg !33
  %68 = bitcast i32 %67 to float, !dbg !33
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 true) #1, !dbg !33
  %70 = bitcast i32 %69 to float, !dbg !33
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 true) #1, !dbg !33
  %72 = bitcast i32 %71 to float, !dbg !33
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 true) #1, !dbg !33
  %74 = bitcast i32 %73 to float, !dbg !33
  %75 = lshr i64 %27, 60, !dbg !34
  %76 = and i64 %75, 8, !dbg !34
  %77 = add i64 %76, %27, !dbg !34
  %78 = lshr i64 %36, 60, !dbg !35
  %79 = and i64 %78, 8, !dbg !35
  %80 = add i64 %79, %36, !dbg !35
  %81 = lshr i64 %37, 60, !dbg !35
  %82 = and i64 %81, 8, !dbg !35
  %83 = add i64 %82, %37, !dbg !35
  %84 = lshr i64 %39, 60, !dbg !35
  %85 = and i64 %84, 8, !dbg !35
  %86 = add i64 %85, %39, !dbg !35
  %87 = lshr i64 %40, 60, !dbg !35
  %88 = and i64 %87, 8, !dbg !35
  %89 = add i64 %88, %40, !dbg !35
  %90 = shl i64 %77, 5, !dbg !36
  %91 = shl nsw i32 %24, 8, !dbg !37
  %92 = sext i32 %91 to i64, !dbg !38
  %.idx = shl i64 %80, 4, !dbg !39
  %93 = getelementptr i8, ptr addrspace(1) %3, i64 %.idx, !dbg !39
  %94 = getelementptr float, ptr addrspace(1) %93, i64 %41, !dbg !39
  %95 = getelementptr float, ptr addrspace(1) %94, i64 %90, !dbg !39
  %96 = getelementptr float, ptr addrspace(1) %95, i64 %92, !dbg !39
  %.idx1 = shl i64 %83, 4, !dbg !39
  %97 = getelementptr i8, ptr addrspace(1) %3, i64 %.idx1, !dbg !39
  %98 = getelementptr float, ptr addrspace(1) %97, i64 %41, !dbg !39
  %99 = getelementptr float, ptr addrspace(1) %98, i64 %90, !dbg !39
  %100 = getelementptr float, ptr addrspace(1) %99, i64 %92, !dbg !39
  %.idx2 = shl i64 %86, 4, !dbg !39
  %101 = getelementptr i8, ptr addrspace(1) %3, i64 %.idx2, !dbg !39
  %102 = getelementptr float, ptr addrspace(1) %101, i64 %41, !dbg !39
  %103 = getelementptr float, ptr addrspace(1) %102, i64 %90, !dbg !39
  %104 = getelementptr float, ptr addrspace(1) %103, i64 %92, !dbg !39
  %.idx3 = shl i64 %89, 4, !dbg !39
  %105 = getelementptr i8, ptr addrspace(1) %3, i64 %.idx3, !dbg !39
  %106 = getelementptr float, ptr addrspace(1) %105, i64 %41, !dbg !39
  %107 = getelementptr float, ptr addrspace(1) %106, i64 %90, !dbg !39
  %108 = getelementptr float, ptr addrspace(1) %107, i64 %92, !dbg !39
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 true) #1, !dbg !40
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %100, i1 true) #1, !dbg !40
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %104, i1 true) #1, !dbg !40
  %112 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %108, i1 true) #1, !dbg !40
  %113 = lshr i64 %50, 60, !dbg !41
  %114 = and i64 %113, 8, !dbg !41
  %115 = add i64 %114, %50, !dbg !41
  %116 = lshr i64 %51, 60, !dbg !41
  %117 = and i64 %116, 8, !dbg !41
  %118 = add i64 %117, %51, !dbg !41
  %119 = lshr i64 %53, 60, !dbg !41
  %120 = and i64 %119, 8, !dbg !41
  %121 = add i64 %120, %53, !dbg !41
  %122 = lshr i64 %54, 60, !dbg !41
  %123 = and i64 %122, 8, !dbg !41
  %124 = add i64 %123, %54, !dbg !41
  %.idx4 = shl i64 %115, 4, !dbg !42
  %125 = getelementptr i8, ptr addrspace(1) %3, i64 %.idx4, !dbg !42
  %126 = getelementptr float, ptr addrspace(1) %125, i64 %41, !dbg !42
  %127 = getelementptr float, ptr addrspace(1) %126, i64 %90, !dbg !42
  %128 = getelementptr float, ptr addrspace(1) %127, i64 %92, !dbg !42
  %.idx5 = shl i64 %118, 4, !dbg !42
  %129 = getelementptr i8, ptr addrspace(1) %3, i64 %.idx5, !dbg !42
  %130 = getelementptr float, ptr addrspace(1) %129, i64 %41, !dbg !42
  %131 = getelementptr float, ptr addrspace(1) %130, i64 %90, !dbg !42
  %132 = getelementptr float, ptr addrspace(1) %131, i64 %92, !dbg !42
  %.idx6 = shl i64 %121, 4, !dbg !42
  %133 = getelementptr i8, ptr addrspace(1) %3, i64 %.idx6, !dbg !42
  %134 = getelementptr float, ptr addrspace(1) %133, i64 %41, !dbg !42
  %135 = getelementptr float, ptr addrspace(1) %134, i64 %90, !dbg !42
  %136 = getelementptr float, ptr addrspace(1) %135, i64 %92, !dbg !42
  %.idx7 = shl i64 %124, 4, !dbg !42
  %137 = getelementptr i8, ptr addrspace(1) %3, i64 %.idx7, !dbg !42
  %138 = getelementptr float, ptr addrspace(1) %137, i64 %41, !dbg !42
  %139 = getelementptr float, ptr addrspace(1) %138, i64 %90, !dbg !42
  %140 = getelementptr float, ptr addrspace(1) %139, i64 %92, !dbg !42
  %141 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %128, i1 true) #1, !dbg !43
  %142 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %132, i1 true) #1, !dbg !43
  %143 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %136, i1 true) #1, !dbg !43
  %144 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %140, i1 true) #1, !dbg !43
  %145 = lshr i64 %62, 60, !dbg !44
  %146 = and i64 %145, 8, !dbg !44
  %147 = add i64 %146, %62, !dbg !44
  %148 = shl i64 %147, 5, !dbg !45
  %149 = getelementptr float, ptr addrspace(1) %94, i64 %148, !dbg !46
  %150 = getelementptr float, ptr addrspace(1) %149, i64 %92, !dbg !46
  %151 = getelementptr float, ptr addrspace(1) %98, i64 %148, !dbg !46
  %152 = getelementptr float, ptr addrspace(1) %151, i64 %92, !dbg !46
  %153 = getelementptr float, ptr addrspace(1) %102, i64 %148, !dbg !46
  %154 = getelementptr float, ptr addrspace(1) %153, i64 %92, !dbg !46
  %155 = getelementptr float, ptr addrspace(1) %106, i64 %148, !dbg !46
  %156 = getelementptr float, ptr addrspace(1) %155, i64 %92, !dbg !46
  %157 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %150, i1 true) #1, !dbg !47
  %158 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %152, i1 true) #1, !dbg !47
  %159 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %154, i1 true) #1, !dbg !47
  %160 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %156, i1 true) #1, !dbg !47
  %161 = getelementptr float, ptr addrspace(1) %126, i64 %148, !dbg !48
  %162 = getelementptr float, ptr addrspace(1) %161, i64 %92, !dbg !48
  %163 = getelementptr float, ptr addrspace(1) %130, i64 %148, !dbg !48
  %164 = getelementptr float, ptr addrspace(1) %163, i64 %92, !dbg !48
  %165 = getelementptr float, ptr addrspace(1) %134, i64 %148, !dbg !48
  %166 = getelementptr float, ptr addrspace(1) %165, i64 %92, !dbg !48
  %167 = getelementptr float, ptr addrspace(1) %138, i64 %148, !dbg !48
  %168 = getelementptr float, ptr addrspace(1) %167, i64 %92, !dbg !48
  %169 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %162, i1 true) #1, !dbg !49
  %170 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %164, i1 true) #1, !dbg !49
  %171 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %166, i1 true) #1, !dbg !49
  %172 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %168, i1 true) #1, !dbg !49
  %173 = insertelement <2 x i32> poison, i32 %157, i64 0, !dbg !47
  %174 = insertelement <2 x i32> %173, i32 %109, i64 1, !dbg !47
  %175 = bitcast <2 x i32> %174 to <2 x float>, !dbg !47
  %176 = insertelement <2 x i32> poison, i32 %43, i64 0, !dbg !50
  %177 = bitcast <2 x i32> %176 to <2 x float>, !dbg !50
  %178 = shufflevector <2 x float> %177, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !50
  %179 = fadd <2 x float> %178, %175, !dbg !50
  %180 = insertelement <2 x i32> poison, i32 %169, i64 0, !dbg !49
  %181 = insertelement <2 x i32> %180, i32 %141, i64 1, !dbg !49
  %182 = bitcast <2 x i32> %181 to <2 x float>, !dbg !49
  %183 = fadd <2 x float> %178, %182, !dbg !51
  %184 = fsub <2 x float> %183, %179, !dbg !52
  %185 = insertelement <2 x i32> poison, i32 %57, i64 0, !dbg !53
  %186 = bitcast <2 x i32> %185 to <2 x float>, !dbg !53
  %187 = shufflevector <2 x float> %186, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !53
  %188 = fmul <2 x float> %184, %187, !dbg !53
  %189 = fadd <2 x float> %179, %188, !dbg !54
  %190 = insertelement <2 x i32> poison, i32 %158, i64 0, !dbg !47
  %191 = insertelement <2 x i32> %190, i32 %110, i64 1, !dbg !47
  %192 = bitcast <2 x i32> %191 to <2 x float>, !dbg !47
  %193 = insertelement <2 x i32> poison, i32 %44, i64 0, !dbg !50
  %194 = bitcast <2 x i32> %193 to <2 x float>, !dbg !50
  %195 = shufflevector <2 x float> %194, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !50
  %196 = fadd <2 x float> %195, %192, !dbg !50
  %197 = insertelement <2 x i32> poison, i32 %170, i64 0, !dbg !49
  %198 = insertelement <2 x i32> %197, i32 %142, i64 1, !dbg !49
  %199 = bitcast <2 x i32> %198 to <2 x float>, !dbg !49
  %200 = fadd <2 x float> %195, %199, !dbg !51
  %201 = fsub <2 x float> %200, %196, !dbg !52
  %202 = insertelement <2 x i32> poison, i32 %58, i64 0, !dbg !53
  %203 = bitcast <2 x i32> %202 to <2 x float>, !dbg !53
  %204 = shufflevector <2 x float> %203, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !53
  %205 = fmul <2 x float> %201, %204, !dbg !53
  %206 = fadd <2 x float> %196, %205, !dbg !54
  %207 = insertelement <2 x i32> poison, i32 %159, i64 0, !dbg !47
  %208 = insertelement <2 x i32> %207, i32 %111, i64 1, !dbg !47
  %209 = bitcast <2 x i32> %208 to <2 x float>, !dbg !47
  %210 = insertelement <2 x i32> poison, i32 %45, i64 0, !dbg !50
  %211 = bitcast <2 x i32> %210 to <2 x float>, !dbg !50
  %212 = shufflevector <2 x float> %211, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !50
  %213 = fadd <2 x float> %212, %209, !dbg !50
  %214 = insertelement <2 x i32> poison, i32 %171, i64 0, !dbg !49
  %215 = insertelement <2 x i32> %214, i32 %143, i64 1, !dbg !49
  %216 = bitcast <2 x i32> %215 to <2 x float>, !dbg !49
  %217 = fadd <2 x float> %212, %216, !dbg !51
  %218 = fsub <2 x float> %217, %213, !dbg !52
  %219 = insertelement <2 x i32> poison, i32 %59, i64 0, !dbg !53
  %220 = bitcast <2 x i32> %219 to <2 x float>, !dbg !53
  %221 = shufflevector <2 x float> %220, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !53
  %222 = fmul <2 x float> %218, %221, !dbg !53
  %223 = fadd <2 x float> %213, %222, !dbg !54
  %224 = insertelement <2 x i32> poison, i32 %160, i64 0, !dbg !47
  %225 = insertelement <2 x i32> %224, i32 %112, i64 1, !dbg !47
  %226 = bitcast <2 x i32> %225 to <2 x float>, !dbg !47
  %227 = insertelement <2 x i32> poison, i32 %46, i64 0, !dbg !50
  %228 = bitcast <2 x i32> %227 to <2 x float>, !dbg !50
  %229 = shufflevector <2 x float> %228, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !50
  %230 = fadd <2 x float> %229, %226, !dbg !50
  %231 = insertelement <2 x i32> poison, i32 %172, i64 0, !dbg !49
  %232 = insertelement <2 x i32> %231, i32 %144, i64 1, !dbg !49
  %233 = bitcast <2 x i32> %232 to <2 x float>, !dbg !49
  %234 = fadd <2 x float> %229, %233, !dbg !51
  %235 = fsub <2 x float> %234, %230, !dbg !52
  %236 = insertelement <2 x i32> poison, i32 %60, i64 0, !dbg !53
  %237 = bitcast <2 x i32> %236 to <2 x float>, !dbg !53
  %238 = shufflevector <2 x float> %237, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !53
  %239 = fmul <2 x float> %235, %238, !dbg !53
  %240 = fadd <2 x float> %230, %239, !dbg !54
  %241 = extractelement <2 x float> %189, i64 0, !dbg !55
  %242 = extractelement <2 x float> %189, i64 1, !dbg !56
  %243 = fsub float %241, %242, !dbg !55
  %244 = extractelement <2 x float> %206, i64 0, !dbg !55
  %245 = extractelement <2 x float> %206, i64 1, !dbg !56
  %246 = fsub float %244, %245, !dbg !55
  %247 = extractelement <2 x float> %223, i64 0, !dbg !55
  %248 = extractelement <2 x float> %223, i64 1, !dbg !56
  %249 = fsub float %247, %248, !dbg !55
  %250 = extractelement <2 x float> %240, i64 0, !dbg !55
  %251 = extractelement <2 x float> %240, i64 1, !dbg !56
  %252 = fsub float %250, %251, !dbg !55
  %253 = fmul float %243, %68, !dbg !57
  %254 = fmul float %246, %70, !dbg !57
  %255 = fmul float %249, %72, !dbg !57
  %256 = fmul float %252, %74, !dbg !57
  %257 = fadd float %242, %253, !dbg !56
  %258 = fadd float %245, %254, !dbg !56
  %259 = fadd float %248, %255, !dbg !56
  %260 = fadd float %251, %256, !dbg !56
  %261 = sext i32 %16 to i64, !dbg !58
  %262 = getelementptr float, ptr addrspace(1) %0, i64 %261, !dbg !58
  %263 = bitcast float %257 to i32, !dbg !59
  %264 = bitcast float %258 to i32, !dbg !59
  %265 = bitcast float %259 to i32, !dbg !59
  %266 = bitcast float %260 to i32, !dbg !59
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %263, i32 %264, i32 %265, i32 %266, ptr addrspace(1) %262, i1 true) #1, !dbg !59
  ret void, !dbg !60
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "crouzco343nawdjb27bm6alczxrmh3jim33ogxz2i6mq7kjc4pfb.py", directory: "inductor_cache/ro")
!4 = !{ptr @triton_poi_fused__unsafe_index_add_convolution_mul_sub_35, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__unsafe_index_add_convolution_mul_sub_35, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__unsafe_index_add_convolution_mul_sub_35", linkageName: "triton_poi_fused__unsafe_index_add_convolution_mul_sub_35", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 27, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 21, scope: !7)
!18 = !DILocation(line: 26, column: 29, scope: !7)
!19 = !DILocation(line: 27, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 30, scope: !7)
!21 = !DILocation(line: 29, column: 35, scope: !7)
!22 = !DILocation(line: 30, column: 30, scope: !7)
!23 = !DILocation(line: 30, column: 35, scope: !7)
!24 = !DILocation(line: 31, column: 31, scope: !7)
!25 = !DILocation(line: 31, column: 36, scope: !7)
!26 = !DILocation(line: 32, column: 31, scope: !7)
!27 = !DILocation(line: 32, column: 36, scope: !7)
!28 = !DILocation(line: 33, column: 31, scope: !7)
!29 = !DILocation(line: 33, column: 36, scope: !7)
!30 = !DILocation(line: 34, column: 31, scope: !7)
!31 = !DILocation(line: 34, column: 36, scope: !7)
!32 = !DILocation(line: 35, column: 31, scope: !7)
!33 = !DILocation(line: 35, column: 36, scope: !7)
!34 = !DILocation(line: 39, column: 32, scope: !7)
!35 = !DILocation(line: 42, column: 32, scope: !7)
!36 = !DILocation(line: 43, column: 47, scope: !7)
!37 = !DILocation(line: 43, column: 58, scope: !7)
!38 = !DILocation(line: 43, column: 54, scope: !7)
!39 = !DILocation(line: 43, column: 30, scope: !7)
!40 = !DILocation(line: 43, column: 63, scope: !7)
!41 = !DILocation(line: 47, column: 35, scope: !7)
!42 = !DILocation(line: 48, column: 31, scope: !7)
!43 = !DILocation(line: 48, column: 65, scope: !7)
!44 = !DILocation(line: 55, column: 35, scope: !7)
!45 = !DILocation(line: 56, column: 48, scope: !7)
!46 = !DILocation(line: 56, column: 31, scope: !7)
!47 = !DILocation(line: 56, column: 65, scope: !7)
!48 = !DILocation(line: 58, column: 31, scope: !7)
!49 = !DILocation(line: 58, column: 66, scope: !7)
!50 = !DILocation(line: 57, column: 20, scope: !7)
!51 = !DILocation(line: 59, column: 20, scope: !7)
!52 = !DILocation(line: 60, column: 20, scope: !7)
!53 = !DILocation(line: 61, column: 20, scope: !7)
!54 = !DILocation(line: 62, column: 20, scope: !7)
!55 = !DILocation(line: 63, column: 20, scope: !7)
!56 = !DILocation(line: 65, column: 20, scope: !7)
!57 = !DILocation(line: 64, column: 20, scope: !7)
!58 = !DILocation(line: 66, column: 28, scope: !7)
!59 = !DILocation(line: 66, column: 40, scope: !7)
!60 = !DILocation(line: 66, column: 4, scope: !7)
