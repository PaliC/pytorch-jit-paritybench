; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused__native_batch_norm_legit_no_training_add_mean_relu_34(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9) local_unnamed_addr !dbg !7 {
__nv_sqrtf.exit:
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %11 = shl i32 %10, 5, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = lshr i32 %12, 4, !dbg !12
  %14 = and i32 %13, 15, !dbg !12
  %15 = or disjoint i32 %14, 16, !dbg !12
  %16 = or disjoint i32 %11, %14, !dbg !13
  %17 = or disjoint i32 %11, %15, !dbg !13
  %18 = icmp slt i32 %16, 2048, !dbg !14
  %19 = icmp slt i32 %17, 2048, !dbg !14
  %20 = shl i32 %12, 2, !dbg !15
  %21 = and i32 %20, 60, !dbg !15
  %22 = srem i32 %16, 512, !dbg !16
  %23 = srem i32 %17, 512, !dbg !16
  %24 = shl i32 %16, 6, !dbg !17
  %25 = shl i32 %17, 6, !dbg !17
  %26 = or disjoint i32 %24, %21, !dbg !18
  %27 = or disjoint i32 %25, %21, !dbg !18
  %28 = sext i32 %26 to i64, !dbg !19
  %29 = getelementptr float, ptr addrspace(1) %1, i64 %28, !dbg !19
  %30 = sext i32 %27 to i64, !dbg !19
  %31 = getelementptr float, ptr addrspace(1) %1, i64 %30, !dbg !19
  %32 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %29, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18) #5, !dbg !20
  %33 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %31, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19) #5, !dbg !20
  %34 = sext i32 %22 to i64, !dbg !21
  %35 = getelementptr float, ptr addrspace(1) %2, i64 %34, !dbg !21
  %36 = sext i32 %23 to i64, !dbg !21
  %37 = getelementptr float, ptr addrspace(1) %2, i64 %36, !dbg !21
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 %18) #5, !dbg !22
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 %18) #5, !dbg !22
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 %18) #5, !dbg !22
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 %18) #5, !dbg !22
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %19) #5, !dbg !22
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %19) #5, !dbg !22
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %19) #5, !dbg !22
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %19) #5, !dbg !22
  %46 = getelementptr float, ptr addrspace(1) %3, i64 %34, !dbg !23
  %47 = getelementptr float, ptr addrspace(1) %3, i64 %36, !dbg !23
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 %18) #5, !dbg !24
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 %18) #5, !dbg !24
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 %18) #5, !dbg !24
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 %18) #5, !dbg !24
  %52 = bitcast i32 %51 to float, !dbg !24
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 %19) #5, !dbg !24
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 %19) #5, !dbg !24
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 %19) #5, !dbg !24
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 %19) #5, !dbg !24
  %57 = bitcast i32 %56 to float, !dbg !24
  %58 = getelementptr float, ptr addrspace(1) %4, i64 %34, !dbg !25
  %59 = getelementptr float, ptr addrspace(1) %4, i64 %36, !dbg !25
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %18) #5, !dbg !26
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %18) #5, !dbg !26
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %18) #5, !dbg !26
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %18) #5, !dbg !26
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 %19) #5, !dbg !26
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 %19) #5, !dbg !26
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 %19) #5, !dbg !26
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 %19) #5, !dbg !26
  %68 = getelementptr float, ptr addrspace(1) %5, i64 %34, !dbg !27
  %69 = getelementptr float, ptr addrspace(1) %5, i64 %36, !dbg !27
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 %18) #5, !dbg !28
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 %18) #5, !dbg !28
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 %18) #5, !dbg !28
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 %18) #5, !dbg !28
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 %19) #5, !dbg !28
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 %19) #5, !dbg !28
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 %19) #5, !dbg !28
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 %19) #5, !dbg !28
  %78 = getelementptr float, ptr addrspace(1) %6, i64 %28, !dbg !29
  %79 = getelementptr float, ptr addrspace(1) %6, i64 %30, !dbg !29
  %80 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %78, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18) #5, !dbg !30
  %81 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %79, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19) #5, !dbg !30
  %82 = fadd float %52, 0x3EE4F8B580000000, !dbg !31
  %83 = fadd float %57, 0x3EE4F8B580000000, !dbg !31
  %84 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !32
  %85 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !32
  %86 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !32
  %87 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !32
  %88 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !32
  %89 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !32
  %90 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !32
  %.not.i12 = icmp eq i32 %90, 0, !dbg !32
  %91 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !32
  %.not1.i15 = icmp eq i32 %91, 0, !dbg !32
  br i1 %.not.i12, label %97, label %92, !dbg !32

92:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i15, label %95, label %93, !dbg !32

93:                                               ; preds = %92
  %94 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %82) #5, !dbg !32
  br label %__nv_sqrtf.exit16, !dbg !32

95:                                               ; preds = %92
  %96 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %82) #5, !dbg !32
  br label %__nv_sqrtf.exit16, !dbg !32

97:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i15, label %100, label %98, !dbg !32

98:                                               ; preds = %97
  %99 = tail call float @llvm.nvvm.sqrt.rn.f(float %82) #5, !dbg !32
  br label %__nv_sqrtf.exit16, !dbg !32

100:                                              ; preds = %97
  %101 = tail call float @llvm.nvvm.sqrt.approx.f(float %82) #5, !dbg !32
  br label %__nv_sqrtf.exit16, !dbg !32

__nv_sqrtf.exit16:                                ; preds = %93, %95, %98, %100
  %.0.i14 = phi float [ %94, %93 ], [ %96, %95 ], [ %99, %98 ], [ %101, %100 ], !dbg !32
  %102 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !32
  %103 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !32
  %104 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !32
  %105 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !32
  %106 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !32
  %107 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !32
  %108 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !32
  %.not.i32 = icmp eq i32 %108, 0, !dbg !32
  %109 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !32
  %.not1.i35 = icmp eq i32 %109, 0, !dbg !32
  br i1 %.not.i32, label %115, label %110, !dbg !32

110:                                              ; preds = %__nv_sqrtf.exit16
  br i1 %.not1.i35, label %113, label %111, !dbg !32

111:                                              ; preds = %110
  %112 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %83) #5, !dbg !32
  br label %__nv_sqrtf.exit36, !dbg !32

113:                                              ; preds = %110
  %114 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %83) #5, !dbg !32
  br label %__nv_sqrtf.exit36, !dbg !32

115:                                              ; preds = %__nv_sqrtf.exit16
  br i1 %.not1.i35, label %118, label %116, !dbg !32

116:                                              ; preds = %115
  %117 = tail call float @llvm.nvvm.sqrt.rn.f(float %83) #5, !dbg !32
  br label %__nv_sqrtf.exit36, !dbg !32

118:                                              ; preds = %115
  %119 = tail call float @llvm.nvvm.sqrt.approx.f(float %83) #5, !dbg !32
  br label %__nv_sqrtf.exit36, !dbg !32

__nv_sqrtf.exit36:                                ; preds = %111, %113, %116, %118
  %.0.i34 = phi float [ %112, %111 ], [ %114, %113 ], [ %117, %116 ], [ %119, %118 ], !dbg !32
  %120 = extractvalue { i32, i32, i32, i32 } %33, 3, !dbg !20
  %121 = insertelement <2 x i32> poison, i32 %45, i64 0, !dbg !22
  %122 = insertelement <2 x i32> %121, i32 %41, i64 1, !dbg !22
  %123 = bitcast <2 x i32> %122 to <2 x float>, !dbg !22
  %124 = shufflevector <2 x float> %123, <2 x float> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !22
  %125 = extractvalue { i32, i32, i32, i32 } %33, 2, !dbg !20
  %126 = extractvalue { i32, i32, i32, i32 } %33, 1, !dbg !20
  %127 = extractvalue { i32, i32, i32, i32 } %33, 0, !dbg !20
  %128 = extractvalue { i32, i32, i32, i32 } %32, 3, !dbg !20
  %129 = extractvalue { i32, i32, i32, i32 } %32, 2, !dbg !20
  %130 = extractvalue { i32, i32, i32, i32 } %32, 1, !dbg !20
  %131 = extractvalue { i32, i32, i32, i32 } %32, 0, !dbg !20
  %132 = extractvalue { i32, i32, i32, i32 } %81, 3, !dbg !30
  %133 = extractvalue { i32, i32, i32, i32 } %81, 2, !dbg !30
  %134 = extractvalue { i32, i32, i32, i32 } %81, 1, !dbg !30
  %135 = extractvalue { i32, i32, i32, i32 } %81, 0, !dbg !30
  %136 = extractvalue { i32, i32, i32, i32 } %80, 3, !dbg !30
  %137 = extractvalue { i32, i32, i32, i32 } %80, 2, !dbg !30
  %138 = extractvalue { i32, i32, i32, i32 } %80, 1, !dbg !30
  %139 = extractvalue { i32, i32, i32, i32 } %80, 0, !dbg !30
  %140 = insertelement <2 x i32> poison, i32 %77, i64 0, !dbg !28
  %141 = insertelement <2 x i32> %140, i32 %73, i64 1, !dbg !28
  %142 = bitcast <2 x i32> %141 to <2 x float>, !dbg !28
  %143 = shufflevector <2 x float> %142, <2 x float> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !28
  %144 = insertelement <2 x i32> poison, i32 %67, i64 0, !dbg !26
  %145 = insertelement <2 x i32> %144, i32 %63, i64 1, !dbg !26
  %146 = bitcast <2 x i32> %145 to <2 x float>, !dbg !26
  %147 = shufflevector <2 x float> %146, <2 x float> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !26
  %148 = and i32 %12, 31, !dbg !12
  %149 = or disjoint i32 %11, %148, !dbg !13
  %150 = icmp slt i32 %149, 2048, !dbg !14
  %151 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i14) #5, !dbg !33
  %152 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i34) #5, !dbg !33
  %153 = insertelement <8 x i32> poison, i32 %120, i64 0, !dbg !20
  %154 = insertelement <8 x i32> %153, i32 %125, i64 1, !dbg !20
  %155 = insertelement <8 x i32> %154, i32 %126, i64 2, !dbg !20
  %156 = insertelement <8 x i32> %155, i32 %127, i64 3, !dbg !20
  %157 = insertelement <8 x i32> %156, i32 %128, i64 4, !dbg !20
  %158 = insertelement <8 x i32> %157, i32 %129, i64 5, !dbg !20
  %159 = insertelement <8 x i32> %158, i32 %130, i64 6, !dbg !20
  %160 = insertelement <8 x i32> %159, i32 %131, i64 7, !dbg !20
  %161 = bitcast <8 x i32> %160 to <8 x float>, !dbg !20
  %162 = fsub <8 x float> %161, %124, !dbg !34
  %163 = insertelement <8 x i32> poison, i32 %132, i64 0, !dbg !30
  %164 = insertelement <8 x i32> %163, i32 %133, i64 1, !dbg !30
  %165 = insertelement <8 x i32> %164, i32 %134, i64 2, !dbg !30
  %166 = insertelement <8 x i32> %165, i32 %135, i64 3, !dbg !30
  %167 = insertelement <8 x i32> %166, i32 %136, i64 4, !dbg !30
  %168 = insertelement <8 x i32> %167, i32 %137, i64 5, !dbg !30
  %169 = insertelement <8 x i32> %168, i32 %138, i64 6, !dbg !30
  %170 = insertelement <8 x i32> %169, i32 %139, i64 7, !dbg !30
  %171 = bitcast <8 x i32> %170 to <8 x float>, !dbg !30
  %172 = insertelement <8 x float> poison, float %152, i64 0, !dbg !35
  %173 = insertelement <8 x float> %172, float %151, i64 1, !dbg !35
  %174 = shufflevector <8 x float> %173, <8 x float> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !35
  %175 = fmul <8 x float> %162, %174, !dbg !35
  %176 = fmul <8 x float> %175, %147, !dbg !36
  %177 = fadd <8 x float> %176, %143, !dbg !37
  %178 = fadd <8 x float> %177, %171, !dbg !38
  %179 = fcmp olt <8 x float> %178, zeroinitializer, !dbg !39
  %180 = extractelement <8 x i1> %179, i64 7, !dbg !43
  %181 = extractelement <8 x float> %178, i64 7, !dbg !43
  %182 = select i1 %180, float 0.000000e+00, float %181, !dbg !43
  %183 = extractelement <8 x i1> %179, i64 6, !dbg !43
  %184 = extractelement <8 x float> %178, i64 6, !dbg !43
  %185 = select i1 %183, float 0.000000e+00, float %184, !dbg !43
  %186 = extractelement <8 x i1> %179, i64 5, !dbg !43
  %187 = extractelement <8 x float> %178, i64 5, !dbg !43
  %188 = select i1 %186, float 0.000000e+00, float %187, !dbg !43
  %189 = extractelement <8 x i1> %179, i64 4, !dbg !43
  %190 = extractelement <8 x float> %178, i64 4, !dbg !43
  %191 = select i1 %189, float 0.000000e+00, float %190, !dbg !43
  %192 = extractelement <8 x i1> %179, i64 3, !dbg !43
  %193 = extractelement <8 x float> %178, i64 3, !dbg !43
  %194 = select i1 %192, float 0.000000e+00, float %193, !dbg !43
  %195 = extractelement <8 x i1> %179, i64 2, !dbg !43
  %196 = extractelement <8 x float> %178, i64 2, !dbg !43
  %197 = select i1 %195, float 0.000000e+00, float %196, !dbg !43
  %198 = extractelement <8 x i1> %179, i64 1, !dbg !43
  %199 = extractelement <8 x float> %178, i64 1, !dbg !43
  %200 = select i1 %198, float 0.000000e+00, float %199, !dbg !43
  %201 = extractelement <8 x i1> %179, i64 0, !dbg !43
  %202 = extractelement <8 x float> %178, i64 0, !dbg !43
  %203 = select i1 %201, float 0.000000e+00, float %202, !dbg !43
  %204 = fadd float %182, %185, !dbg !44
  %205 = fadd float %188, %204, !dbg !44
  %206 = fadd float %191, %205, !dbg !44
  %207 = select i1 %18, float %206, float 0.000000e+00, !dbg !44
  %208 = fadd float %194, %197, !dbg !44
  %209 = fadd float %200, %208, !dbg !44
  %210 = fadd float %203, %209, !dbg !44
  %211 = select i1 %19, float %210, float 0.000000e+00, !dbg !44
  %212 = bitcast float %207 to i32, !dbg !49
  %213 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %212, i32 8, i32 31), !dbg !49
  %214 = bitcast i32 %213 to float, !dbg !49
  %215 = fadd float %207, %214, !dbg !44
  %216 = bitcast float %215 to i32, !dbg !49
  %217 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %216, i32 4, i32 31), !dbg !49
  %218 = bitcast i32 %217 to float, !dbg !49
  %219 = fadd float %215, %218, !dbg !44
  %220 = bitcast float %219 to i32, !dbg !49
  %221 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %220, i32 2, i32 31), !dbg !49
  %222 = bitcast i32 %221 to float, !dbg !49
  %223 = fadd float %219, %222, !dbg !44
  %224 = bitcast float %223 to i32, !dbg !49
  %225 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %224, i32 1, i32 31), !dbg !49
  %226 = bitcast i32 %225 to float, !dbg !49
  %227 = fadd float %223, %226, !dbg !44
  %228 = bitcast float %211 to i32, !dbg !49
  %229 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %228, i32 8, i32 31), !dbg !49
  %230 = bitcast i32 %229 to float, !dbg !49
  %231 = fadd float %211, %230, !dbg !44
  %232 = bitcast float %231 to i32, !dbg !49
  %233 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %232, i32 4, i32 31), !dbg !49
  %234 = bitcast i32 %233 to float, !dbg !49
  %235 = fadd float %231, %234, !dbg !44
  %236 = bitcast float %235 to i32, !dbg !49
  %237 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %236, i32 2, i32 31), !dbg !49
  %238 = bitcast i32 %237 to float, !dbg !49
  %239 = fadd float %235, %238, !dbg !44
  %240 = bitcast float %239 to i32, !dbg !49
  %241 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %240, i32 1, i32 31), !dbg !49
  %242 = bitcast i32 %241 to float, !dbg !49
  %243 = fadd float %239, %242, !dbg !44
  %244 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !50
  %245 = bitcast float %227 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %244, <1 x i32> %245, i1 true) #5, !dbg !50
  %246 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !50
  %247 = bitcast float %243 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %246, <1 x i32> %247, i1 true) #5, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %248 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %148, !dbg !50
  %249 = load float, ptr addrspace(3) %248, align 4, !dbg !50
  %250 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %249, float 6.400000e+01) #5, !dbg !50
  %251 = getelementptr float, ptr addrspace(1) %7, i64 %28, !dbg !51
  %252 = getelementptr float, ptr addrspace(1) %7, i64 %30, !dbg !51
  %253 = bitcast float %182 to i32, !dbg !52
  %254 = bitcast float %185 to i32, !dbg !52
  %255 = bitcast float %188 to i32, !dbg !52
  %256 = bitcast float %191 to i32, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %253, i32 %254, i32 %255, i32 %256, ptr addrspace(1) %251, i1 %18) #5, !dbg !52
  %257 = bitcast float %194 to i32, !dbg !52
  %258 = bitcast float %197 to i32, !dbg !52
  %259 = bitcast float %200 to i32, !dbg !52
  %260 = bitcast float %203 to i32, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %257, i32 %258, i32 %259, i32 %260, ptr addrspace(1) %252, i1 %19) #5, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %261 = sext i32 %149 to i64, !dbg !54
  %262 = getelementptr float, ptr addrspace(1) %0, i64 %261, !dbg !54
  %263 = and i32 %12, 224, !dbg !55
  %264 = icmp eq i32 %263, 0, !dbg !55
  %265 = bitcast float %250 to i32, !dbg !55
  %266 = and i1 %264, %150, !dbg !55
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %265, ptr addrspace(1) %262, i1 %266) #5, !dbg !55
  ret void, !dbg !56
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c7pinvyomjb4po4ijebjpjdnd2e3r2wc4dn4g3xqnn4j4o5raqlh.py", directory: "inductor_cache/7p")
!4 = !{ptr @triton_per_fused__native_batch_norm_legit_no_training_add_mean_relu_34, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__native_batch_norm_legit_no_training_add_mean_relu_34, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__native_batch_norm_legit_no_training_add_mean_relu_34", linkageName: "triton_per_fused__native_batch_norm_legit_no_training_add_mean_relu_34", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 19, scope: !7)
!17 = !DILocation(line: 32, column: 38, scope: !7)
!18 = !DILocation(line: 32, column: 35, scope: !7)
!19 = !DILocation(line: 32, column: 30, scope: !7)
!20 = !DILocation(line: 32, column: 43, scope: !7)
!21 = !DILocation(line: 33, column: 30, scope: !7)
!22 = !DILocation(line: 33, column: 35, scope: !7)
!23 = !DILocation(line: 34, column: 30, scope: !7)
!24 = !DILocation(line: 34, column: 35, scope: !7)
!25 = !DILocation(line: 35, column: 31, scope: !7)
!26 = !DILocation(line: 35, column: 36, scope: !7)
!27 = !DILocation(line: 36, column: 31, scope: !7)
!28 = !DILocation(line: 36, column: 36, scope: !7)
!29 = !DILocation(line: 37, column: 31, scope: !7)
!30 = !DILocation(line: 37, column: 44, scope: !7)
!31 = !DILocation(line: 40, column: 18, scope: !7)
!32 = !DILocation(line: 41, column: 26, scope: !7)
!33 = !DILocation(line: 43, column: 18, scope: !7)
!34 = !DILocation(line: 38, column: 18, scope: !7)
!35 = !DILocation(line: 46, column: 19, scope: !7)
!36 = !DILocation(line: 47, column: 20, scope: !7)
!37 = !DILocation(line: 48, column: 20, scope: !7)
!38 = !DILocation(line: 49, column: 20, scope: !7)
!39 = !DILocation(line: 118, column: 15, scope: !40, inlinedAt: !42)
!40 = distinct !DILexicalBlockFile(scope: !7, file: !41, discriminator: 0)
!41 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!42 = !DILocation(line: 51, column: 42, scope: !7)
!43 = !DILocation(line: 121, column: 29, scope: !40, inlinedAt: !42)
!44 = !DILocation(line: 256, column: 15, scope: !45, inlinedAt: !48)
!45 = distinct !DILexicalBlockFile(scope: !47, file: !46, discriminator: 0)
!46 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!47 = distinct !DILexicalBlockFile(scope: !7, file: !46, discriminator: 0)
!48 = !DILocation(line: 54, column: 26, scope: !7)
!49 = !DILocation(line: 267, column: 36, scope: !47, inlinedAt: !48)
!50 = !DILocation(line: 56, column: 20, scope: !7)
!51 = !DILocation(line: 57, column: 25, scope: !7)
!52 = !DILocation(line: 57, column: 45, scope: !7)
!53 = !DILocation(line: 58, column: 4, scope: !7)
!54 = !DILocation(line: 59, column: 28, scope: !7)
!55 = !DILocation(line: 59, column: 40, scope: !7)
!56 = !DILocation(line: 59, column: 4, scope: !7)
