; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_stack_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %.fr = freeze i32 %7, !dbg !11
  %8 = shl i32 %.fr, 7, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = and i32 %9, 127, !dbg !12
  %11 = or disjoint i32 %8, %10, !dbg !13
  %12 = icmp slt i32 %11, 864, !dbg !14
  %13 = sdiv i32 %11, 3, !dbg !15
  %14 = mul i32 %13, 3, !dbg !16
  %.decomposed = sub i32 %11, %14, !dbg !16
  %15 = sdiv i32 %11, 9, !dbg !17
  %16 = srem i32 %13, 3, !dbg !18
  %17 = icmp slt i32 %.decomposed, 1, !dbg !19
  %18 = sext i32 %13 to i64, !dbg !20
  %19 = getelementptr float, ptr addrspace(1) %0, i64 %18, !dbg !20
  %20 = and i1 %12, %17, !dbg !21
  %21 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %19, i1 %20, i32 0, i1 %20) #3, !dbg !22
  %22 = icmp eq i32 %.decomposed, 1, !dbg !23
  %23 = getelementptr float, ptr addrspace(1) %1, i64 %18, !dbg !24
  %24 = and i1 %12, %22, !dbg !25
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %23, i1 %24, i32 0, i1 %24) #3, !dbg !26
  %26 = bitcast i32 %25 to float, !dbg !26
  %27 = mul nsw i32 %15, 3, !dbg !27
  %28 = sext i32 %27 to i64, !dbg !28
  %29 = getelementptr float, ptr addrspace(1) %1, i64 %28, !dbg !28
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %29, i1 %24, i32 0, i1 %24) #3, !dbg !29
  %31 = bitcast i32 %30 to float, !dbg !29
  %32 = fmul float %31, %31, !dbg !30
  %33 = getelementptr i8, ptr addrspace(1) %29, i64 4, !dbg !31
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %33, i1 %24, i32 0, i1 %24) #3, !dbg !32
  %35 = bitcast i32 %34 to float, !dbg !32
  %36 = fmul float %35, %35, !dbg !33
  %37 = fadd float %32, %36, !dbg !34
  %38 = getelementptr i8, ptr addrspace(1) %29, i64 8, !dbg !35
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %38, i1 %24, i32 0, i1 %24) #3, !dbg !36
  %40 = bitcast i32 %39 to float, !dbg !36
  %41 = fmul float %40, %40, !dbg !37
  %42 = fadd float %37, %41, !dbg !38
  %43 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !39
  %.not.i = icmp eq i32 %43, 0, !dbg !39
  %44 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !39
  %.not1.i = icmp eq i32 %44, 0, !dbg !39
  br i1 %.not.i, label %50, label %45, !dbg !39

45:                                               ; preds = %6
  br i1 %.not1.i, label %48, label %46, !dbg !39

46:                                               ; preds = %45
  %47 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %42) #3, !dbg !39
  br label %__nv_sqrtf.exit, !dbg !39

48:                                               ; preds = %45
  %49 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %42) #3, !dbg !39
  br label %__nv_sqrtf.exit, !dbg !39

50:                                               ; preds = %6
  br i1 %.not1.i, label %53, label %51, !dbg !39

51:                                               ; preds = %50
  %52 = tail call float @llvm.nvvm.sqrt.rn.f(float %42) #3, !dbg !39
  br label %__nv_sqrtf.exit, !dbg !39

53:                                               ; preds = %50
  %54 = tail call float @llvm.nvvm.sqrt.approx.f(float %42) #3, !dbg !39
  br label %__nv_sqrtf.exit, !dbg !39

__nv_sqrtf.exit:                                  ; preds = %46, %48, %51, %53
  %.0.i = phi float [ %47, %46 ], [ %49, %48 ], [ %52, %51 ], [ %54, %53 ], !dbg !39
  %55 = fcmp ogt float %.0.i, 0x3D71979980000000, !dbg !40
  %56 = fcmp uno float %.0.i, 0.000000e+00, !dbg !44
  %57 = or i1 %55, %56, !dbg !45
  %58 = select i1 %57, float %.0.i, float 0x3D71979980000000, !dbg !46
  %59 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %26, float %58) #3, !dbg !47
  %60 = icmp sgt i32 %.decomposed, 1, !dbg !48
  %61 = getelementptr float, ptr addrspace(1) %2, i64 %18, !dbg !49
  %62 = and i1 %12, %60, !dbg !50
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %61, i1 %62, i32 0, i1 %62) #3, !dbg !51
  %.cmp = icmp slt i32 %16, 1, !dbg !52
  %.v = select i1 %.cmp, i32 2, i32 -1, !dbg !52
  %64 = add nsw i32 %27, %16, !dbg !52
  %65 = add nsw i32 %64, %.v, !dbg !53
  %66 = sext i32 %65 to i64, !dbg !54
  %67 = getelementptr float, ptr addrspace(1) %1, i64 %66, !dbg !54
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %67, i1 %62, i32 0, i1 %62) #3, !dbg !55
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %29, i1 %62, i32 0, i1 %62) #3, !dbg !56
  %70 = bitcast i32 %69 to float, !dbg !56
  %71 = fmul float %70, %70, !dbg !57
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %33, i1 %62, i32 0, i1 %62) #3, !dbg !58
  %73 = bitcast i32 %72 to float, !dbg !58
  %74 = fmul float %73, %73, !dbg !59
  %75 = fadd float %71, %74, !dbg !60
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %38, i1 %62, i32 0, i1 %62) #3, !dbg !61
  %77 = bitcast i32 %76 to float, !dbg !61
  %78 = fmul float %77, %77, !dbg !62
  %79 = fadd float %75, %78, !dbg !63
  %80 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !64
  %.not.i1 = icmp eq i32 %80, 0, !dbg !64
  %81 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !64
  %.not1.i4 = icmp eq i32 %81, 0, !dbg !64
  br i1 %.not.i1, label %87, label %82, !dbg !64

82:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %85, label %83, !dbg !64

83:                                               ; preds = %82
  %84 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %79) #3, !dbg !64
  br label %__nv_sqrtf.exit5, !dbg !64

85:                                               ; preds = %82
  %86 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %79) #3, !dbg !64
  br label %__nv_sqrtf.exit5, !dbg !64

87:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %90, label %88, !dbg !64

88:                                               ; preds = %87
  %89 = tail call float @llvm.nvvm.sqrt.rn.f(float %79) #3, !dbg !64
  br label %__nv_sqrtf.exit5, !dbg !64

90:                                               ; preds = %87
  %91 = tail call float @llvm.nvvm.sqrt.approx.f(float %79) #3, !dbg !64
  br label %__nv_sqrtf.exit5, !dbg !64

__nv_sqrtf.exit5:                                 ; preds = %83, %85, %88, %90
  %.0.i3 = phi float [ %84, %83 ], [ %86, %85 ], [ %89, %88 ], [ %91, %90 ], !dbg !64
  %92 = bitcast i32 %68 to float, !dbg !55
  %93 = bitcast i32 %63 to float, !dbg !51
  %94 = fcmp ogt float %.0.i3, 0x3D71979980000000, !dbg !65
  %95 = fcmp uno float %.0.i3, 0.000000e+00, !dbg !67
  %96 = or i1 %94, %95, !dbg !68
  %97 = select i1 %96, float %.0.i3, float 0x3D71979980000000, !dbg !69
  %98 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %92, float %97) #3, !dbg !70
  %99 = fmul float %98, %93, !dbg !71
  %100 = getelementptr float, ptr addrspace(1) %3, i64 %18, !dbg !72
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %100, i1 %62, i32 0, i1 %62) #3, !dbg !73
  %102 = bitcast i32 %101 to float, !dbg !73
  %103 = trunc nsw i32 %16 to i8, !dbg !74
  %.lhs.trunc = add nsw i8 %103, 1, !dbg !74
  %104 = srem i8 %.lhs.trunc, 3, !dbg !74
  %.sext = sext i8 %104 to i32, !dbg !74
  %105 = add nsw i32 %27, %.sext, !dbg !75
  %106 = sext i32 %105 to i64, !dbg !76
  %107 = getelementptr float, ptr addrspace(1) %1, i64 %106, !dbg !76
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %107, i1 %62, i32 0, i1 %62) #3, !dbg !77
  %109 = bitcast i32 %108 to float, !dbg !77
  %110 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %109, float %97) #3, !dbg !78
  %111 = fmul float %110, %102, !dbg !79
  %112 = fsub float %99, %111, !dbg !80
  %113 = select i1 %60, float %112, float 0.000000e+00, !dbg !81
  %114 = select i1 %22, float %59, float %113, !dbg !82
  %115 = sext i32 %11 to i64, !dbg !83
  %116 = getelementptr float, ptr addrspace(1) %4, i64 %115, !dbg !83
  %117 = bitcast float %114 to i32, !dbg !84
  %118 = select i1 %17, i32 %21, i32 %117, !dbg !85
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %118, ptr addrspace(1) %116, i1 %12) #3, !dbg !84
  ret void, !dbg !86
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cl27brnphirf43rwxzdlvqub4qfeov3fmqqjzhdk45o7g7zowtgg.py", directory: "inductor_cache/l2")
!4 = !{ptr @triton_poi_fused_stack_12, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_stack_12, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_stack_12", linkageName: "triton_poi_fused_stack_12", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 24, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 27, column: 26, scope: !7)
!19 = !DILocation(line: 33, column: 18, scope: !7)
!20 = !DILocation(line: 34, column: 30, scope: !7)
!21 = !DILocation(line: 34, column: 42, scope: !7)
!22 = !DILocation(line: 34, column: 35, scope: !7)
!23 = !DILocation(line: 38, column: 18, scope: !7)
!24 = !DILocation(line: 39, column: 31, scope: !7)
!25 = !DILocation(line: 39, column: 43, scope: !7)
!26 = !DILocation(line: 39, column: 36, scope: !7)
!27 = !DILocation(line: 40, column: 33, scope: !7)
!28 = !DILocation(line: 40, column: 31, scope: !7)
!29 = !DILocation(line: 40, column: 38, scope: !7)
!30 = !DILocation(line: 41, column: 20, scope: !7)
!31 = !DILocation(line: 42, column: 31, scope: !7)
!32 = !DILocation(line: 42, column: 42, scope: !7)
!33 = !DILocation(line: 43, column: 20, scope: !7)
!34 = !DILocation(line: 44, column: 20, scope: !7)
!35 = !DILocation(line: 45, column: 31, scope: !7)
!36 = !DILocation(line: 45, column: 42, scope: !7)
!37 = !DILocation(line: 46, column: 20, scope: !7)
!38 = !DILocation(line: 47, column: 20, scope: !7)
!39 = !DILocation(line: 48, column: 27, scope: !7)
!40 = !DILocation(line: 118, column: 15, scope: !41, inlinedAt: !43)
!41 = distinct !DILexicalBlockFile(scope: !7, file: !42, discriminator: 0)
!42 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!43 = !DILocation(line: 50, column: 42, scope: !7)
!44 = !DILocation(line: 120, column: 21, scope: !41, inlinedAt: !43)
!45 = !DILocation(line: 120, column: 16, scope: !41, inlinedAt: !43)
!46 = !DILocation(line: 121, column: 29, scope: !41, inlinedAt: !43)
!47 = !DILocation(line: 51, column: 20, scope: !7)
!48 = !DILocation(line: 54, column: 20, scope: !7)
!49 = !DILocation(line: 57, column: 31, scope: !7)
!50 = !DILocation(line: 57, column: 44, scope: !7)
!51 = !DILocation(line: 57, column: 36, scope: !7)
!52 = !DILocation(line: 58, column: 51, scope: !7)
!53 = !DILocation(line: 58, column: 40, scope: !7)
!54 = !DILocation(line: 58, column: 31, scope: !7)
!55 = !DILocation(line: 58, column: 57, scope: !7)
!56 = !DILocation(line: 59, column: 38, scope: !7)
!57 = !DILocation(line: 60, column: 20, scope: !7)
!58 = !DILocation(line: 61, column: 42, scope: !7)
!59 = !DILocation(line: 62, column: 20, scope: !7)
!60 = !DILocation(line: 63, column: 20, scope: !7)
!61 = !DILocation(line: 64, column: 42, scope: !7)
!62 = !DILocation(line: 65, column: 20, scope: !7)
!63 = !DILocation(line: 66, column: 20, scope: !7)
!64 = !DILocation(line: 67, column: 27, scope: !7)
!65 = !DILocation(line: 118, column: 15, scope: !41, inlinedAt: !66)
!66 = !DILocation(line: 69, column: 42, scope: !7)
!67 = !DILocation(line: 120, column: 21, scope: !41, inlinedAt: !66)
!68 = !DILocation(line: 120, column: 16, scope: !41, inlinedAt: !66)
!69 = !DILocation(line: 121, column: 29, scope: !41, inlinedAt: !66)
!70 = !DILocation(line: 70, column: 20, scope: !7)
!71 = !DILocation(line: 71, column: 20, scope: !7)
!72 = !DILocation(line: 72, column: 31, scope: !7)
!73 = !DILocation(line: 72, column: 36, scope: !7)
!74 = !DILocation(line: 73, column: 51, scope: !7)
!75 = !DILocation(line: 73, column: 40, scope: !7)
!76 = !DILocation(line: 73, column: 31, scope: !7)
!77 = !DILocation(line: 73, column: 57, scope: !7)
!78 = !DILocation(line: 74, column: 20, scope: !7)
!79 = !DILocation(line: 75, column: 20, scope: !7)
!80 = !DILocation(line: 76, column: 20, scope: !7)
!81 = !DILocation(line: 78, column: 35, scope: !7)
!82 = !DILocation(line: 0, scope: !7)
!83 = !DILocation(line: 81, column: 25, scope: !7)
!84 = !DILocation(line: 81, column: 37, scope: !7)
!85 = !DILocation(line: 80, column: 33, scope: !7)
!86 = !DILocation(line: 81, column: 4, scope: !7)
