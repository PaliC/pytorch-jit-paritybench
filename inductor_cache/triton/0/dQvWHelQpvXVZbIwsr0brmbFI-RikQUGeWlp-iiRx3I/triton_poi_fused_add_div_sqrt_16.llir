; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_add_div_sqrt_16(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %5 = shl i32 %4, 10, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 2, !dbg !12
  %8 = and i32 %7, 508, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = or disjoint i32 %9, 1, !dbg !13
  %11 = or disjoint i32 %9, 2, !dbg !13
  %12 = or disjoint i32 %9, 3, !dbg !13
  %13 = or disjoint i32 %9, 512, !dbg !13
  %14 = or disjoint i32 %9, 513, !dbg !13
  %15 = or disjoint i32 %9, 514, !dbg !13
  %16 = or disjoint i32 %9, 515, !dbg !13
  %17 = icmp slt i32 %9, 115200, !dbg !14
  %18 = icmp slt i32 %13, 115200, !dbg !14
  %19 = srem i32 %9, 225, !dbg !15
  %20 = srem i32 %10, 225, !dbg !15
  %21 = srem i32 %11, 225, !dbg !15
  %22 = srem i32 %12, 225, !dbg !15
  %23 = srem i32 %13, 225, !dbg !15
  %24 = srem i32 %14, 225, !dbg !15
  %25 = srem i32 %15, 225, !dbg !15
  %26 = srem i32 %16, 225, !dbg !15
  %27 = sdiv i32 %9, 28800, !dbg !16
  %28 = sdiv i32 %13, 28800, !dbg !16
  %29 = sext i32 %9 to i64, !dbg !17
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !17
  %31 = sext i32 %13 to i64, !dbg !17
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !17
  %33 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %30, i1 %17) #3, !dbg !18
  %34 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %32, i1 %18) #3, !dbg !18
  %35 = mul nsw i32 %27, 225, !dbg !19
  %36 = mul nsw i32 %28, 225, !dbg !19
  %37 = add nsw i32 %35, %19, !dbg !20
  %38 = add nsw i32 %35, %20, !dbg !20
  %39 = add nsw i32 %35, %21, !dbg !20
  %40 = add nsw i32 %35, %22, !dbg !20
  %41 = add nsw i32 %36, %23, !dbg !20
  %42 = add nsw i32 %36, %24, !dbg !20
  %43 = add nsw i32 %36, %25, !dbg !20
  %44 = add nsw i32 %36, %26, !dbg !20
  %45 = sext i32 %37 to i64, !dbg !21
  %46 = getelementptr float, ptr addrspace(1) %1, i64 %45, !dbg !21
  %47 = sext i32 %38 to i64, !dbg !21
  %48 = getelementptr float, ptr addrspace(1) %1, i64 %47, !dbg !21
  %49 = sext i32 %39 to i64, !dbg !21
  %50 = getelementptr float, ptr addrspace(1) %1, i64 %49, !dbg !21
  %51 = sext i32 %40 to i64, !dbg !21
  %52 = getelementptr float, ptr addrspace(1) %1, i64 %51, !dbg !21
  %53 = sext i32 %41 to i64, !dbg !21
  %54 = getelementptr float, ptr addrspace(1) %1, i64 %53, !dbg !21
  %55 = sext i32 %42 to i64, !dbg !21
  %56 = getelementptr float, ptr addrspace(1) %1, i64 %55, !dbg !21
  %57 = sext i32 %43 to i64, !dbg !21
  %58 = getelementptr float, ptr addrspace(1) %1, i64 %57, !dbg !21
  %59 = sext i32 %44 to i64, !dbg !21
  %60 = getelementptr float, ptr addrspace(1) %1, i64 %59, !dbg !21
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 %17) #3, !dbg !22
  %62 = bitcast i32 %61 to float, !dbg !22
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 %17) #3, !dbg !22
  %64 = bitcast i32 %63 to float, !dbg !22
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 %17) #3, !dbg !22
  %66 = bitcast i32 %65 to float, !dbg !22
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 %17) #3, !dbg !22
  %68 = bitcast i32 %67 to float, !dbg !22
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 %18) #3, !dbg !22
  %70 = bitcast i32 %69 to float, !dbg !22
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 %18) #3, !dbg !22
  %72 = bitcast i32 %71 to float, !dbg !22
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %18) #3, !dbg !22
  %74 = bitcast i32 %73 to float, !dbg !22
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 %18) #3, !dbg !22
  %76 = bitcast i32 %75 to float, !dbg !22
  %77 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !23
  %.not.i = icmp eq i32 %77, 0, !dbg !23
  %78 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !23
  %.not1.i = icmp eq i32 %78, 0, !dbg !23
  br i1 %.not.i, label %84, label %79, !dbg !23

79:                                               ; preds = %3
  br i1 %.not1.i, label %82, label %80, !dbg !23

80:                                               ; preds = %79
  %81 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %62) #3, !dbg !23
  br label %__nv_sqrtf.exit, !dbg !23

82:                                               ; preds = %79
  %83 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %62) #3, !dbg !23
  br label %__nv_sqrtf.exit, !dbg !23

84:                                               ; preds = %3
  br i1 %.not1.i, label %87, label %85, !dbg !23

85:                                               ; preds = %84
  %86 = tail call float @llvm.nvvm.sqrt.rn.f(float %62) #3, !dbg !23
  br label %__nv_sqrtf.exit, !dbg !23

87:                                               ; preds = %84
  %88 = tail call float @llvm.nvvm.sqrt.approx.f(float %62) #3, !dbg !23
  br label %__nv_sqrtf.exit, !dbg !23

__nv_sqrtf.exit:                                  ; preds = %80, %82, %85, %87
  %.0.i = phi float [ %81, %80 ], [ %83, %82 ], [ %86, %85 ], [ %88, %87 ], !dbg !23
  %89 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !23
  %.not.i1 = icmp eq i32 %89, 0, !dbg !23
  %90 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !23
  %.not1.i4 = icmp eq i32 %90, 0, !dbg !23
  br i1 %.not.i1, label %96, label %91, !dbg !23

91:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %94, label %92, !dbg !23

92:                                               ; preds = %91
  %93 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %64) #3, !dbg !23
  br label %__nv_sqrtf.exit5, !dbg !23

94:                                               ; preds = %91
  %95 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %64) #3, !dbg !23
  br label %__nv_sqrtf.exit5, !dbg !23

96:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %99, label %97, !dbg !23

97:                                               ; preds = %96
  %98 = tail call float @llvm.nvvm.sqrt.rn.f(float %64) #3, !dbg !23
  br label %__nv_sqrtf.exit5, !dbg !23

99:                                               ; preds = %96
  %100 = tail call float @llvm.nvvm.sqrt.approx.f(float %64) #3, !dbg !23
  br label %__nv_sqrtf.exit5, !dbg !23

__nv_sqrtf.exit5:                                 ; preds = %92, %94, %97, %99
  %.0.i3 = phi float [ %93, %92 ], [ %95, %94 ], [ %98, %97 ], [ %100, %99 ], !dbg !23
  %101 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !23
  %.not.i6 = icmp eq i32 %101, 0, !dbg !23
  %102 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !23
  %.not1.i9 = icmp eq i32 %102, 0, !dbg !23
  br i1 %.not.i6, label %108, label %103, !dbg !23

103:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %106, label %104, !dbg !23

104:                                              ; preds = %103
  %105 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %66) #3, !dbg !23
  br label %__nv_sqrtf.exit10, !dbg !23

106:                                              ; preds = %103
  %107 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %66) #3, !dbg !23
  br label %__nv_sqrtf.exit10, !dbg !23

108:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %111, label %109, !dbg !23

109:                                              ; preds = %108
  %110 = tail call float @llvm.nvvm.sqrt.rn.f(float %66) #3, !dbg !23
  br label %__nv_sqrtf.exit10, !dbg !23

111:                                              ; preds = %108
  %112 = tail call float @llvm.nvvm.sqrt.approx.f(float %66) #3, !dbg !23
  br label %__nv_sqrtf.exit10, !dbg !23

__nv_sqrtf.exit10:                                ; preds = %104, %106, %109, %111
  %.0.i8 = phi float [ %105, %104 ], [ %107, %106 ], [ %110, %109 ], [ %112, %111 ], !dbg !23
  %113 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !23
  %.not.i11 = icmp eq i32 %113, 0, !dbg !23
  %114 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !23
  %.not1.i14 = icmp eq i32 %114, 0, !dbg !23
  br i1 %.not.i11, label %120, label %115, !dbg !23

115:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %118, label %116, !dbg !23

116:                                              ; preds = %115
  %117 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %68) #3, !dbg !23
  br label %__nv_sqrtf.exit15, !dbg !23

118:                                              ; preds = %115
  %119 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %68) #3, !dbg !23
  br label %__nv_sqrtf.exit15, !dbg !23

120:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %123, label %121, !dbg !23

121:                                              ; preds = %120
  %122 = tail call float @llvm.nvvm.sqrt.rn.f(float %68) #3, !dbg !23
  br label %__nv_sqrtf.exit15, !dbg !23

123:                                              ; preds = %120
  %124 = tail call float @llvm.nvvm.sqrt.approx.f(float %68) #3, !dbg !23
  br label %__nv_sqrtf.exit15, !dbg !23

__nv_sqrtf.exit15:                                ; preds = %116, %118, %121, %123
  %.0.i13 = phi float [ %117, %116 ], [ %119, %118 ], [ %122, %121 ], [ %124, %123 ], !dbg !23
  %125 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !23
  %.not.i16 = icmp eq i32 %125, 0, !dbg !23
  %126 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !23
  %.not1.i19 = icmp eq i32 %126, 0, !dbg !23
  br i1 %.not.i16, label %132, label %127, !dbg !23

127:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %130, label %128, !dbg !23

128:                                              ; preds = %127
  %129 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %70) #3, !dbg !23
  br label %__nv_sqrtf.exit20, !dbg !23

130:                                              ; preds = %127
  %131 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %70) #3, !dbg !23
  br label %__nv_sqrtf.exit20, !dbg !23

132:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %135, label %133, !dbg !23

133:                                              ; preds = %132
  %134 = tail call float @llvm.nvvm.sqrt.rn.f(float %70) #3, !dbg !23
  br label %__nv_sqrtf.exit20, !dbg !23

135:                                              ; preds = %132
  %136 = tail call float @llvm.nvvm.sqrt.approx.f(float %70) #3, !dbg !23
  br label %__nv_sqrtf.exit20, !dbg !23

__nv_sqrtf.exit20:                                ; preds = %128, %130, %133, %135
  %.0.i18 = phi float [ %129, %128 ], [ %131, %130 ], [ %134, %133 ], [ %136, %135 ], !dbg !23
  %137 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !23
  %.not.i21 = icmp eq i32 %137, 0, !dbg !23
  %138 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !23
  %.not1.i24 = icmp eq i32 %138, 0, !dbg !23
  br i1 %.not.i21, label %144, label %139, !dbg !23

139:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %142, label %140, !dbg !23

140:                                              ; preds = %139
  %141 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %72) #3, !dbg !23
  br label %__nv_sqrtf.exit25, !dbg !23

142:                                              ; preds = %139
  %143 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %72) #3, !dbg !23
  br label %__nv_sqrtf.exit25, !dbg !23

144:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %147, label %145, !dbg !23

145:                                              ; preds = %144
  %146 = tail call float @llvm.nvvm.sqrt.rn.f(float %72) #3, !dbg !23
  br label %__nv_sqrtf.exit25, !dbg !23

147:                                              ; preds = %144
  %148 = tail call float @llvm.nvvm.sqrt.approx.f(float %72) #3, !dbg !23
  br label %__nv_sqrtf.exit25, !dbg !23

__nv_sqrtf.exit25:                                ; preds = %140, %142, %145, %147
  %.0.i23 = phi float [ %141, %140 ], [ %143, %142 ], [ %146, %145 ], [ %148, %147 ], !dbg !23
  %149 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !23
  %.not.i26 = icmp eq i32 %149, 0, !dbg !23
  %150 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !23
  %.not1.i29 = icmp eq i32 %150, 0, !dbg !23
  br i1 %.not.i26, label %156, label %151, !dbg !23

151:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %154, label %152, !dbg !23

152:                                              ; preds = %151
  %153 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %74) #3, !dbg !23
  br label %__nv_sqrtf.exit30, !dbg !23

154:                                              ; preds = %151
  %155 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %74) #3, !dbg !23
  br label %__nv_sqrtf.exit30, !dbg !23

156:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %159, label %157, !dbg !23

157:                                              ; preds = %156
  %158 = tail call float @llvm.nvvm.sqrt.rn.f(float %74) #3, !dbg !23
  br label %__nv_sqrtf.exit30, !dbg !23

159:                                              ; preds = %156
  %160 = tail call float @llvm.nvvm.sqrt.approx.f(float %74) #3, !dbg !23
  br label %__nv_sqrtf.exit30, !dbg !23

__nv_sqrtf.exit30:                                ; preds = %152, %154, %157, %159
  %.0.i28 = phi float [ %153, %152 ], [ %155, %154 ], [ %158, %157 ], [ %160, %159 ], !dbg !23
  %161 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !23
  %.not.i31 = icmp eq i32 %161, 0, !dbg !23
  %162 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !23
  %.not1.i34 = icmp eq i32 %162, 0, !dbg !23
  br i1 %.not.i31, label %168, label %163, !dbg !23

163:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %166, label %164, !dbg !23

164:                                              ; preds = %163
  %165 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %76) #3, !dbg !23
  br label %__nv_sqrtf.exit35, !dbg !23

166:                                              ; preds = %163
  %167 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %76) #3, !dbg !23
  br label %__nv_sqrtf.exit35, !dbg !23

168:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %171, label %169, !dbg !23

169:                                              ; preds = %168
  %170 = tail call float @llvm.nvvm.sqrt.rn.f(float %76) #3, !dbg !23
  br label %__nv_sqrtf.exit35, !dbg !23

171:                                              ; preds = %168
  %172 = tail call float @llvm.nvvm.sqrt.approx.f(float %76) #3, !dbg !23
  br label %__nv_sqrtf.exit35, !dbg !23

__nv_sqrtf.exit35:                                ; preds = %164, %166, %169, %171
  %.0.i33 = phi float [ %165, %164 ], [ %167, %166 ], [ %170, %169 ], [ %172, %171 ], !dbg !23
  %173 = extractvalue { i32, i32, i32, i32 } %34, 3, !dbg !18
  %174 = bitcast i32 %173 to float, !dbg !18
  %175 = extractvalue { i32, i32, i32, i32 } %34, 2, !dbg !18
  %176 = bitcast i32 %175 to float, !dbg !18
  %177 = extractvalue { i32, i32, i32, i32 } %34, 1, !dbg !18
  %178 = bitcast i32 %177 to float, !dbg !18
  %179 = extractvalue { i32, i32, i32, i32 } %34, 0, !dbg !18
  %180 = bitcast i32 %179 to float, !dbg !18
  %181 = extractvalue { i32, i32, i32, i32 } %33, 3, !dbg !18
  %182 = bitcast i32 %181 to float, !dbg !18
  %183 = extractvalue { i32, i32, i32, i32 } %33, 2, !dbg !18
  %184 = bitcast i32 %183 to float, !dbg !18
  %185 = extractvalue { i32, i32, i32, i32 } %33, 1, !dbg !18
  %186 = bitcast i32 %185 to float, !dbg !18
  %187 = extractvalue { i32, i32, i32, i32 } %33, 0, !dbg !18
  %188 = bitcast i32 %187 to float, !dbg !18
  %189 = fadd float %.0.i, 0x3DDB7CDFE0000000, !dbg !24
  %190 = fadd float %.0.i3, 0x3DDB7CDFE0000000, !dbg !24
  %191 = fadd float %.0.i8, 0x3DDB7CDFE0000000, !dbg !24
  %192 = fadd float %.0.i13, 0x3DDB7CDFE0000000, !dbg !24
  %193 = fadd float %.0.i18, 0x3DDB7CDFE0000000, !dbg !24
  %194 = fadd float %.0.i23, 0x3DDB7CDFE0000000, !dbg !24
  %195 = fadd float %.0.i28, 0x3DDB7CDFE0000000, !dbg !24
  %196 = fadd float %.0.i33, 0x3DDB7CDFE0000000, !dbg !24
  %197 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %188, float %189) #3, !dbg !25
  %198 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %186, float %190) #3, !dbg !25
  %199 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %184, float %191) #3, !dbg !25
  %200 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %182, float %192) #3, !dbg !25
  %201 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %180, float %193) #3, !dbg !25
  %202 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %178, float %194) #3, !dbg !25
  %203 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %176, float %195) #3, !dbg !25
  %204 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %174, float %196) #3, !dbg !25
  %205 = bitcast float %197 to i32, !dbg !26
  %206 = bitcast float %198 to i32, !dbg !26
  %207 = bitcast float %199 to i32, !dbg !26
  %208 = bitcast float %200 to i32, !dbg !26
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %205, i32 %206, i32 %207, i32 %208, ptr addrspace(1) %30, i1 %17) #3, !dbg !26
  %209 = bitcast float %201 to i32, !dbg !26
  %210 = bitcast float %202 to i32, !dbg !26
  %211 = bitcast float %203 to i32, !dbg !26
  %212 = bitcast float %204 to i32, !dbg !26
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %209, i32 %210, i32 %211, i32 %212, ptr addrspace(1) %32, i1 %18) #3, !dbg !26
  ret void, !dbg !27
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cxiwrrgxrz3piooc7hx5zisucchwgmmybzmvrrdrslzkhvghpgq5.py", directory: "inductor_cache/xi")
!4 = !{ptr @triton_poi_fused_add_div_sqrt_16, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_div_sqrt_16, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_div_sqrt_16", linkageName: "triton_poi_fused_add_div_sqrt_16", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 27, column: 34, scope: !7)
!18 = !DILocation(line: 27, column: 39, scope: !7)
!19 = !DILocation(line: 28, column: 39, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 28, column: 30, scope: !7)
!22 = !DILocation(line: 28, column: 44, scope: !7)
!23 = !DILocation(line: 29, column: 26, scope: !7)
!24 = !DILocation(line: 31, column: 18, scope: !7)
!25 = !DILocation(line: 32, column: 18, scope: !7)
!26 = !DILocation(line: 33, column: 39, scope: !7)
!27 = !DILocation(line: 33, column: 4, scope: !7)
