; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %11 = shl i32 %10, 10, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = shl i32 %12, 2, !dbg !12
  %14 = and i32 %13, 508, !dbg !12
  %15 = or disjoint i32 %11, %14, !dbg !13
  %16 = or disjoint i32 %15, 512, !dbg !13
  %17 = sdiv i32 %15, 65536, !dbg !14
  %18 = sdiv i32 %16, 65536, !dbg !14
  %.lhs.trunc = trunc nsw i32 %17 to i16, !dbg !15
  %19 = srem i16 %.lhs.trunc, 256, !dbg !15
  %.lhs.trunc36 = trunc nsw i32 %18 to i16, !dbg !15
  %20 = srem i16 %.lhs.trunc36, 256, !dbg !15
  %.frozen = freeze i32 %15, !dbg !16
  %21 = sdiv i32 %.frozen, 16777216, !dbg !16
  %.frozen38 = freeze i32 %16, !dbg !16
  %22 = sdiv i32 %.frozen38, 16777216, !dbg !16
  %23 = mul i32 %21, 16777216, !dbg !17
  %.decomposed = sub i32 %.frozen, %23, !dbg !17
  %24 = mul i32 %22, 16777216, !dbg !17
  %.decomposed39 = sub i32 %.frozen38, %24, !dbg !17
  %25 = sext i32 %15 to i64, !dbg !18
  %26 = getelementptr float, ptr addrspace(1) %0, i64 %25, !dbg !18
  %27 = sext i32 %16 to i64, !dbg !18
  %28 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !18
  %29 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %26, i1 true) #3, !dbg !19
  %30 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %28, i1 true) #3, !dbg !19
  %31 = sext i16 %19 to i64, !dbg !20
  %32 = getelementptr float, ptr addrspace(1) %1, i64 %31, !dbg !20
  %33 = sext i16 %20 to i64, !dbg !20
  %34 = getelementptr float, ptr addrspace(1) %1, i64 %33, !dbg !20
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #3, !dbg !21
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #3, !dbg !21
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #3, !dbg !21
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #3, !dbg !21
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #3, !dbg !21
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #3, !dbg !21
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #3, !dbg !21
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #3, !dbg !21
  %43 = shl i32 %21, 25, !dbg !22
  %44 = shl i32 %22, 25, !dbg !22
  %45 = add i32 %43, %.decomposed, !dbg !23
  %46 = add i32 %44, %.decomposed39, !dbg !23
  %47 = sext i32 %45 to i64, !dbg !24
  %48 = getelementptr float, ptr addrspace(1) %2, i64 %47, !dbg !24
  %49 = sext i32 %46 to i64, !dbg !24
  %50 = getelementptr float, ptr addrspace(1) %2, i64 %49, !dbg !24
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %48, i1 true) #3, !dbg !25
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %50, i1 true) #3, !dbg !25
  %53 = getelementptr float, ptr addrspace(1) %3, i64 %31, !dbg !26
  %54 = getelementptr float, ptr addrspace(1) %3, i64 %33, !dbg !26
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 true) #3, !dbg !27
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 true) #3, !dbg !27
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 true) #3, !dbg !27
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 true) #3, !dbg !27
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 true) #3, !dbg !27
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 true) #3, !dbg !27
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 true) #3, !dbg !27
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 true) #3, !dbg !27
  %63 = getelementptr float, ptr addrspace(1) %4, i64 %31, !dbg !28
  %64 = getelementptr float, ptr addrspace(1) %4, i64 %33, !dbg !28
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 true) #3, !dbg !29
  %66 = bitcast i32 %65 to float, !dbg !29
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 true) #3, !dbg !29
  %68 = bitcast i32 %67 to float, !dbg !29
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 true) #3, !dbg !29
  %70 = bitcast i32 %69 to float, !dbg !29
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 true) #3, !dbg !29
  %72 = bitcast i32 %71 to float, !dbg !29
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 true) #3, !dbg !29
  %74 = bitcast i32 %73 to float, !dbg !29
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 true) #3, !dbg !29
  %76 = bitcast i32 %75 to float, !dbg !29
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 true) #3, !dbg !29
  %78 = bitcast i32 %77 to float, !dbg !29
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 true) #3, !dbg !29
  %80 = bitcast i32 %79 to float, !dbg !29
  %81 = getelementptr float, ptr addrspace(1) %5, i64 %31, !dbg !30
  %82 = getelementptr float, ptr addrspace(1) %5, i64 %33, !dbg !30
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 true) #3, !dbg !31
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 true) #3, !dbg !31
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 true) #3, !dbg !31
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 true) #3, !dbg !31
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 true) #3, !dbg !31
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 true) #3, !dbg !31
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 true) #3, !dbg !31
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 true) #3, !dbg !31
  %91 = getelementptr float, ptr addrspace(1) %6, i64 %31, !dbg !32
  %92 = getelementptr float, ptr addrspace(1) %6, i64 %33, !dbg !32
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %91, i1 true) #3, !dbg !33
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %91, i1 true) #3, !dbg !33
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %91, i1 true) #3, !dbg !33
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %91, i1 true) #3, !dbg !33
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 true) #3, !dbg !33
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 true) #3, !dbg !33
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 true) #3, !dbg !33
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 true) #3, !dbg !33
  %101 = fadd float %66, 0x3F1A36E2E0000000, !dbg !34
  %102 = fadd float %68, 0x3F1A36E2E0000000, !dbg !34
  %103 = fadd float %70, 0x3F1A36E2E0000000, !dbg !34
  %104 = fadd float %72, 0x3F1A36E2E0000000, !dbg !34
  %105 = fadd float %74, 0x3F1A36E2E0000000, !dbg !34
  %106 = fadd float %76, 0x3F1A36E2E0000000, !dbg !34
  %107 = fadd float %78, 0x3F1A36E2E0000000, !dbg !34
  %108 = fadd float %80, 0x3F1A36E2E0000000, !dbg !34
  %109 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !35
  %.not.i = icmp eq i32 %109, 0, !dbg !35
  %110 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !35
  %.not1.i = icmp eq i32 %110, 0, !dbg !35
  br i1 %.not.i, label %116, label %111, !dbg !35

111:                                              ; preds = %9
  br i1 %.not1.i, label %114, label %112, !dbg !35

112:                                              ; preds = %111
  %113 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %101) #3, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

114:                                              ; preds = %111
  %115 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %101) #3, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

116:                                              ; preds = %9
  br i1 %.not1.i, label %119, label %117, !dbg !35

117:                                              ; preds = %116
  %118 = tail call float @llvm.nvvm.sqrt.rn.f(float %101) #3, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

119:                                              ; preds = %116
  %120 = tail call float @llvm.nvvm.sqrt.approx.f(float %101) #3, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

__nv_sqrtf.exit:                                  ; preds = %112, %114, %117, %119
  %.0.i = phi float [ %113, %112 ], [ %115, %114 ], [ %118, %117 ], [ %120, %119 ], !dbg !35
  %121 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !35
  %.not.i1 = icmp eq i32 %121, 0, !dbg !35
  %122 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !35
  %.not1.i4 = icmp eq i32 %122, 0, !dbg !35
  br i1 %.not.i1, label %128, label %123, !dbg !35

123:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %126, label %124, !dbg !35

124:                                              ; preds = %123
  %125 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %102) #3, !dbg !35
  br label %__nv_sqrtf.exit5, !dbg !35

126:                                              ; preds = %123
  %127 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %102) #3, !dbg !35
  br label %__nv_sqrtf.exit5, !dbg !35

128:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %131, label %129, !dbg !35

129:                                              ; preds = %128
  %130 = tail call float @llvm.nvvm.sqrt.rn.f(float %102) #3, !dbg !35
  br label %__nv_sqrtf.exit5, !dbg !35

131:                                              ; preds = %128
  %132 = tail call float @llvm.nvvm.sqrt.approx.f(float %102) #3, !dbg !35
  br label %__nv_sqrtf.exit5, !dbg !35

__nv_sqrtf.exit5:                                 ; preds = %124, %126, %129, %131
  %.0.i3 = phi float [ %125, %124 ], [ %127, %126 ], [ %130, %129 ], [ %132, %131 ], !dbg !35
  %133 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !35
  %.not.i6 = icmp eq i32 %133, 0, !dbg !35
  %134 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !35
  %.not1.i9 = icmp eq i32 %134, 0, !dbg !35
  br i1 %.not.i6, label %140, label %135, !dbg !35

135:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %138, label %136, !dbg !35

136:                                              ; preds = %135
  %137 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %103) #3, !dbg !35
  br label %__nv_sqrtf.exit10, !dbg !35

138:                                              ; preds = %135
  %139 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %103) #3, !dbg !35
  br label %__nv_sqrtf.exit10, !dbg !35

140:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %143, label %141, !dbg !35

141:                                              ; preds = %140
  %142 = tail call float @llvm.nvvm.sqrt.rn.f(float %103) #3, !dbg !35
  br label %__nv_sqrtf.exit10, !dbg !35

143:                                              ; preds = %140
  %144 = tail call float @llvm.nvvm.sqrt.approx.f(float %103) #3, !dbg !35
  br label %__nv_sqrtf.exit10, !dbg !35

__nv_sqrtf.exit10:                                ; preds = %136, %138, %141, %143
  %.0.i8 = phi float [ %137, %136 ], [ %139, %138 ], [ %142, %141 ], [ %144, %143 ], !dbg !35
  %145 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !35
  %.not.i11 = icmp eq i32 %145, 0, !dbg !35
  %146 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !35
  %.not1.i14 = icmp eq i32 %146, 0, !dbg !35
  br i1 %.not.i11, label %152, label %147, !dbg !35

147:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %150, label %148, !dbg !35

148:                                              ; preds = %147
  %149 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %104) #3, !dbg !35
  br label %__nv_sqrtf.exit15, !dbg !35

150:                                              ; preds = %147
  %151 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %104) #3, !dbg !35
  br label %__nv_sqrtf.exit15, !dbg !35

152:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %155, label %153, !dbg !35

153:                                              ; preds = %152
  %154 = tail call float @llvm.nvvm.sqrt.rn.f(float %104) #3, !dbg !35
  br label %__nv_sqrtf.exit15, !dbg !35

155:                                              ; preds = %152
  %156 = tail call float @llvm.nvvm.sqrt.approx.f(float %104) #3, !dbg !35
  br label %__nv_sqrtf.exit15, !dbg !35

__nv_sqrtf.exit15:                                ; preds = %148, %150, %153, %155
  %.0.i13 = phi float [ %149, %148 ], [ %151, %150 ], [ %154, %153 ], [ %156, %155 ], !dbg !35
  %157 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !35
  %.not.i16 = icmp eq i32 %157, 0, !dbg !35
  %158 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !35
  %.not1.i19 = icmp eq i32 %158, 0, !dbg !35
  br i1 %.not.i16, label %164, label %159, !dbg !35

159:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %162, label %160, !dbg !35

160:                                              ; preds = %159
  %161 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %105) #3, !dbg !35
  br label %__nv_sqrtf.exit20, !dbg !35

162:                                              ; preds = %159
  %163 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %105) #3, !dbg !35
  br label %__nv_sqrtf.exit20, !dbg !35

164:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %167, label %165, !dbg !35

165:                                              ; preds = %164
  %166 = tail call float @llvm.nvvm.sqrt.rn.f(float %105) #3, !dbg !35
  br label %__nv_sqrtf.exit20, !dbg !35

167:                                              ; preds = %164
  %168 = tail call float @llvm.nvvm.sqrt.approx.f(float %105) #3, !dbg !35
  br label %__nv_sqrtf.exit20, !dbg !35

__nv_sqrtf.exit20:                                ; preds = %160, %162, %165, %167
  %.0.i18 = phi float [ %161, %160 ], [ %163, %162 ], [ %166, %165 ], [ %168, %167 ], !dbg !35
  %169 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !35
  %.not.i21 = icmp eq i32 %169, 0, !dbg !35
  %170 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !35
  %.not1.i24 = icmp eq i32 %170, 0, !dbg !35
  br i1 %.not.i21, label %176, label %171, !dbg !35

171:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %174, label %172, !dbg !35

172:                                              ; preds = %171
  %173 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %106) #3, !dbg !35
  br label %__nv_sqrtf.exit25, !dbg !35

174:                                              ; preds = %171
  %175 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %106) #3, !dbg !35
  br label %__nv_sqrtf.exit25, !dbg !35

176:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %179, label %177, !dbg !35

177:                                              ; preds = %176
  %178 = tail call float @llvm.nvvm.sqrt.rn.f(float %106) #3, !dbg !35
  br label %__nv_sqrtf.exit25, !dbg !35

179:                                              ; preds = %176
  %180 = tail call float @llvm.nvvm.sqrt.approx.f(float %106) #3, !dbg !35
  br label %__nv_sqrtf.exit25, !dbg !35

__nv_sqrtf.exit25:                                ; preds = %172, %174, %177, %179
  %.0.i23 = phi float [ %173, %172 ], [ %175, %174 ], [ %178, %177 ], [ %180, %179 ], !dbg !35
  %181 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !35
  %.not.i26 = icmp eq i32 %181, 0, !dbg !35
  %182 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !35
  %.not1.i29 = icmp eq i32 %182, 0, !dbg !35
  br i1 %.not.i26, label %188, label %183, !dbg !35

183:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %186, label %184, !dbg !35

184:                                              ; preds = %183
  %185 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %107) #3, !dbg !35
  br label %__nv_sqrtf.exit30, !dbg !35

186:                                              ; preds = %183
  %187 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %107) #3, !dbg !35
  br label %__nv_sqrtf.exit30, !dbg !35

188:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %191, label %189, !dbg !35

189:                                              ; preds = %188
  %190 = tail call float @llvm.nvvm.sqrt.rn.f(float %107) #3, !dbg !35
  br label %__nv_sqrtf.exit30, !dbg !35

191:                                              ; preds = %188
  %192 = tail call float @llvm.nvvm.sqrt.approx.f(float %107) #3, !dbg !35
  br label %__nv_sqrtf.exit30, !dbg !35

__nv_sqrtf.exit30:                                ; preds = %184, %186, %189, %191
  %.0.i28 = phi float [ %185, %184 ], [ %187, %186 ], [ %190, %189 ], [ %192, %191 ], !dbg !35
  %193 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !35
  %.not.i31 = icmp eq i32 %193, 0, !dbg !35
  %194 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !35
  %.not1.i34 = icmp eq i32 %194, 0, !dbg !35
  br i1 %.not.i31, label %200, label %195, !dbg !35

195:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %198, label %196, !dbg !35

196:                                              ; preds = %195
  %197 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %108) #3, !dbg !35
  br label %__nv_sqrtf.exit35, !dbg !35

198:                                              ; preds = %195
  %199 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %108) #3, !dbg !35
  br label %__nv_sqrtf.exit35, !dbg !35

200:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %203, label %201, !dbg !35

201:                                              ; preds = %200
  %202 = tail call float @llvm.nvvm.sqrt.rn.f(float %108) #3, !dbg !35
  br label %__nv_sqrtf.exit35, !dbg !35

203:                                              ; preds = %200
  %204 = tail call float @llvm.nvvm.sqrt.approx.f(float %108) #3, !dbg !35
  br label %__nv_sqrtf.exit35, !dbg !35

__nv_sqrtf.exit35:                                ; preds = %196, %198, %201, %203
  %.0.i33 = phi float [ %197, %196 ], [ %199, %198 ], [ %202, %201 ], [ %204, %203 ], !dbg !35
  %205 = extractvalue { i32, i32, i32, i32 } %30, 3, !dbg !19
  %206 = bitcast i32 %205 to float, !dbg !19
  %207 = bitcast i32 %42 to float, !dbg !21
  %208 = fadd float %206, %207, !dbg !36
  %209 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !25
  %210 = bitcast i32 %209 to float, !dbg !25
  %211 = fadd float %208, %210, !dbg !37
  %212 = bitcast i32 %62 to float, !dbg !27
  %213 = fsub float %211, %212, !dbg !38
  %214 = extractvalue { i32, i32, i32, i32 } %30, 2, !dbg !19
  %215 = bitcast i32 %214 to float, !dbg !19
  %216 = bitcast i32 %41 to float, !dbg !21
  %217 = fadd float %215, %216, !dbg !36
  %218 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !25
  %219 = bitcast i32 %218 to float, !dbg !25
  %220 = fadd float %217, %219, !dbg !37
  %221 = bitcast i32 %61 to float, !dbg !27
  %222 = fsub float %220, %221, !dbg !38
  %223 = extractvalue { i32, i32, i32, i32 } %30, 1, !dbg !19
  %224 = bitcast i32 %223 to float, !dbg !19
  %225 = bitcast i32 %40 to float, !dbg !21
  %226 = fadd float %224, %225, !dbg !36
  %227 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !25
  %228 = bitcast i32 %227 to float, !dbg !25
  %229 = fadd float %226, %228, !dbg !37
  %230 = bitcast i32 %60 to float, !dbg !27
  %231 = fsub float %229, %230, !dbg !38
  %232 = extractvalue { i32, i32, i32, i32 } %30, 0, !dbg !19
  %233 = bitcast i32 %232 to float, !dbg !19
  %234 = bitcast i32 %39 to float, !dbg !21
  %235 = fadd float %233, %234, !dbg !36
  %236 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !25
  %237 = bitcast i32 %236 to float, !dbg !25
  %238 = fadd float %235, %237, !dbg !37
  %239 = bitcast i32 %59 to float, !dbg !27
  %240 = fsub float %238, %239, !dbg !38
  %241 = extractvalue { i32, i32, i32, i32 } %29, 3, !dbg !19
  %242 = bitcast i32 %241 to float, !dbg !19
  %243 = bitcast i32 %38 to float, !dbg !21
  %244 = fadd float %242, %243, !dbg !36
  %245 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !25
  %246 = bitcast i32 %245 to float, !dbg !25
  %247 = fadd float %244, %246, !dbg !37
  %248 = bitcast i32 %58 to float, !dbg !27
  %249 = fsub float %247, %248, !dbg !38
  %250 = extractvalue { i32, i32, i32, i32 } %29, 2, !dbg !19
  %251 = bitcast i32 %250 to float, !dbg !19
  %252 = bitcast i32 %37 to float, !dbg !21
  %253 = fadd float %251, %252, !dbg !36
  %254 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !25
  %255 = bitcast i32 %254 to float, !dbg !25
  %256 = fadd float %253, %255, !dbg !37
  %257 = bitcast i32 %57 to float, !dbg !27
  %258 = fsub float %256, %257, !dbg !38
  %259 = extractvalue { i32, i32, i32, i32 } %29, 1, !dbg !19
  %260 = bitcast i32 %259 to float, !dbg !19
  %261 = bitcast i32 %36 to float, !dbg !21
  %262 = fadd float %260, %261, !dbg !36
  %263 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !25
  %264 = bitcast i32 %263 to float, !dbg !25
  %265 = fadd float %262, %264, !dbg !37
  %266 = bitcast i32 %56 to float, !dbg !27
  %267 = fsub float %265, %266, !dbg !38
  %268 = extractvalue { i32, i32, i32, i32 } %29, 0, !dbg !19
  %269 = bitcast i32 %268 to float, !dbg !19
  %270 = bitcast i32 %35 to float, !dbg !21
  %271 = fadd float %269, %270, !dbg !36
  %272 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !25
  %273 = bitcast i32 %272 to float, !dbg !25
  %274 = fadd float %271, %273, !dbg !37
  %275 = bitcast i32 %55 to float, !dbg !27
  %276 = fsub float %274, %275, !dbg !38
  %277 = bitcast i32 %100 to float, !dbg !33
  %278 = bitcast i32 %99 to float, !dbg !33
  %279 = bitcast i32 %98 to float, !dbg !33
  %280 = bitcast i32 %97 to float, !dbg !33
  %281 = bitcast i32 %96 to float, !dbg !33
  %282 = bitcast i32 %95 to float, !dbg !33
  %283 = bitcast i32 %94 to float, !dbg !33
  %284 = bitcast i32 %93 to float, !dbg !33
  %285 = bitcast i32 %90 to float, !dbg !31
  %286 = bitcast i32 %89 to float, !dbg !31
  %287 = bitcast i32 %88 to float, !dbg !31
  %288 = bitcast i32 %87 to float, !dbg !31
  %289 = bitcast i32 %86 to float, !dbg !31
  %290 = bitcast i32 %85 to float, !dbg !31
  %291 = bitcast i32 %84 to float, !dbg !31
  %292 = bitcast i32 %83 to float, !dbg !31
  %293 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !39
  %294 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !39
  %295 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !39
  %296 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !39
  %297 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !39
  %298 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !39
  %299 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !39
  %300 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !39
  %301 = fmul float %276, %293, !dbg !40
  %302 = fmul float %267, %294, !dbg !40
  %303 = fmul float %258, %295, !dbg !40
  %304 = fmul float %249, %296, !dbg !40
  %305 = fmul float %240, %297, !dbg !40
  %306 = fmul float %231, %298, !dbg !40
  %307 = fmul float %222, %299, !dbg !40
  %308 = fmul float %213, %300, !dbg !40
  %309 = fmul float %301, %292, !dbg !41
  %310 = fmul float %302, %291, !dbg !41
  %311 = fmul float %303, %290, !dbg !41
  %312 = fmul float %304, %289, !dbg !41
  %313 = fmul float %305, %288, !dbg !41
  %314 = fmul float %306, %287, !dbg !41
  %315 = fmul float %307, %286, !dbg !41
  %316 = fmul float %308, %285, !dbg !41
  %317 = fadd float %309, %284, !dbg !42
  %318 = fadd float %310, %283, !dbg !42
  %319 = fadd float %311, %282, !dbg !42
  %320 = fadd float %312, %281, !dbg !42
  %321 = fadd float %313, %280, !dbg !42
  %322 = fadd float %314, %279, !dbg !42
  %323 = fadd float %315, %278, !dbg !42
  %324 = fadd float %316, %277, !dbg !42
  %325 = bitcast float %271 to i32, !dbg !43
  %326 = bitcast float %262 to i32, !dbg !43
  %327 = bitcast float %253 to i32, !dbg !43
  %328 = bitcast float %244 to i32, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %325, i32 %326, i32 %327, i32 %328, ptr addrspace(1) %26, i1 true) #3, !dbg !43
  %329 = bitcast float %235 to i32, !dbg !43
  %330 = bitcast float %226 to i32, !dbg !43
  %331 = bitcast float %217 to i32, !dbg !43
  %332 = bitcast float %208 to i32, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %329, i32 %330, i32 %331, i32 %332, ptr addrspace(1) %28, i1 true) #3, !dbg !43
  %333 = getelementptr float, ptr addrspace(1) %7, i64 %25, !dbg !44
  %334 = getelementptr float, ptr addrspace(1) %7, i64 %27, !dbg !44
  %335 = bitcast float %317 to i32, !dbg !45
  %336 = bitcast float %318 to i32, !dbg !45
  %337 = bitcast float %319 to i32, !dbg !45
  %338 = bitcast float %320 to i32, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %335, i32 %336, i32 %337, i32 %338, ptr addrspace(1) %333, i1 true) #3, !dbg !45
  %339 = bitcast float %321 to i32, !dbg !45
  %340 = bitcast float %322 to i32, !dbg !45
  %341 = bitcast float %323 to i32, !dbg !45
  %342 = bitcast float %324 to i32, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %339, i32 %340, i32 %341, i32 %342, ptr addrspace(1) %334, i1 true) #3, !dbg !45
  ret void, !dbg !46
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cd6fn4qlwwbatwjtsnbi5uo3way7tz4yoxd3bv43smknbkt7cbcj.py", directory: "inductor_cache/d6")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_12, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_12, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_12", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_12", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 30, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 27, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 34, scope: !7)
!19 = !DILocation(line: 28, column: 39, scope: !7)
!20 = !DILocation(line: 29, column: 30, scope: !7)
!21 = !DILocation(line: 29, column: 35, scope: !7)
!22 = !DILocation(line: 30, column: 44, scope: !7)
!23 = !DILocation(line: 30, column: 35, scope: !7)
!24 = !DILocation(line: 30, column: 30, scope: !7)
!25 = !DILocation(line: 30, column: 49, scope: !7)
!26 = !DILocation(line: 31, column: 30, scope: !7)
!27 = !DILocation(line: 31, column: 35, scope: !7)
!28 = !DILocation(line: 32, column: 30, scope: !7)
!29 = !DILocation(line: 32, column: 35, scope: !7)
!30 = !DILocation(line: 33, column: 31, scope: !7)
!31 = !DILocation(line: 33, column: 36, scope: !7)
!32 = !DILocation(line: 34, column: 31, scope: !7)
!33 = !DILocation(line: 34, column: 36, scope: !7)
!34 = !DILocation(line: 39, column: 18, scope: !7)
!35 = !DILocation(line: 40, column: 27, scope: !7)
!36 = !DILocation(line: 35, column: 18, scope: !7)
!37 = !DILocation(line: 36, column: 18, scope: !7)
!38 = !DILocation(line: 37, column: 18, scope: !7)
!39 = !DILocation(line: 42, column: 20, scope: !7)
!40 = !DILocation(line: 45, column: 19, scope: !7)
!41 = !DILocation(line: 46, column: 20, scope: !7)
!42 = !DILocation(line: 47, column: 20, scope: !7)
!43 = !DILocation(line: 48, column: 39, scope: !7)
!44 = !DILocation(line: 49, column: 25, scope: !7)
!45 = !DILocation(line: 49, column: 37, scope: !7)
!46 = !DILocation(line: 49, column: 4, scope: !7)
