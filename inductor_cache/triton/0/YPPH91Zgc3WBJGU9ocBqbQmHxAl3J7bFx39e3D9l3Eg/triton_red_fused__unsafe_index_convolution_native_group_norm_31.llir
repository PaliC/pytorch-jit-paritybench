; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_red_fused__unsafe_index_convolution_native_group_norm_31(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %11 = shl i32 %10, 6, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = and i32 %12, 63, !dbg !12
  %14 = lshr i32 %12, 4, !dbg !12
  %15 = and i32 %14, 31, !dbg !12
  %16 = or disjoint i32 %11, %13, !dbg !13
  %17 = or disjoint i32 %11, %15, !dbg !13
  %18 = or disjoint i32 %17, 32, !dbg !13
  %19 = icmp slt i32 %16, 256, !dbg !14
  %20 = icmp slt i32 %17, 256, !dbg !14
  %21 = icmp slt i32 %18, 256, !dbg !14
  %22 = lshr i32 %12, 6, !dbg !15
  %23 = and i32 %22, 7, !dbg !15
  %24 = or disjoint i32 %23, 8, !dbg !15
  %25 = shl i32 %12, 2, !dbg !15
  %26 = and i32 %25, 60, !dbg !15
  %27 = srem i32 %16, 64, !dbg !16
  %28 = shl nsw i32 %27, 1, !dbg !17
  %29 = shl i32 %16, 10, !dbg !18
  %30 = sext i32 %29 to i64, !dbg !19
  %31 = shl i32 %17, 13, !dbg !20
  %32 = shl i32 %18, 13, !dbg !20
  %33 = zext nneg i32 %23 to i64
  %34 = getelementptr i64, ptr addrspace(1) %0, i64 %33
  %35 = zext nneg i32 %24 to i64
  %36 = getelementptr i64, ptr addrspace(1) %0, i64 %35
  %37 = shl i32 %12, 6
  %38 = and i32 %37, 4032
  %39 = or disjoint i32 %38, %23
  %40 = and i32 %25, 2044
  %41 = lshr exact i32 %38, 2
  %42 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %41
  %43 = getelementptr float, ptr addrspace(3) %42, i32 %39
  %44 = or disjoint i32 %39, 8
  %45 = getelementptr float, ptr addrspace(3) %42, i32 %44
  %46 = or disjoint i32 %39, 16
  %47 = getelementptr float, ptr addrspace(3) %42, i32 %46
  %48 = or disjoint i32 %39, 24
  %49 = getelementptr float, ptr addrspace(3) %42, i32 %48
  %50 = or disjoint i32 %39, 32
  %51 = getelementptr float, ptr addrspace(3) %42, i32 %50
  %52 = or disjoint i32 %39, 40
  %53 = getelementptr float, ptr addrspace(3) %42, i32 %52
  %54 = or disjoint i32 %39, 48
  %55 = getelementptr float, ptr addrspace(3) %42, i32 %54
  %56 = or disjoint i32 %39, 56
  %57 = getelementptr float, ptr addrspace(3) %42, i32 %56
  %58 = lshr i32 %25, 4
  %59 = and i32 %58, 124
  %60 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %59
  %61 = getelementptr inbounds float, ptr addrspace(3) %60, i32 %40
  %62 = or disjoint i32 %40, 2048
  %63 = lshr i32 %62, 4
  %64 = and i32 %63, 252
  %65 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %64
  %66 = getelementptr inbounds float, ptr addrspace(3) %65, i32 %62
  %67 = zext nneg i32 %26 to i64, !dbg !21
  %68 = sext i32 %31 to i64, !dbg !21
  %69 = sext i32 %32 to i64, !dbg !21
  %invariant.gep = getelementptr float, ptr addrspace(1) %3, i64 %68, !dbg !21
  %invariant.gep142 = getelementptr float, ptr addrspace(1) %3, i64 %69, !dbg !21
  %70 = getelementptr inbounds i8, ptr addrspace(3) %61, i32 4
  %71 = getelementptr inbounds i8, ptr addrspace(3) %61, i32 8
  %72 = getelementptr inbounds i8, ptr addrspace(3) %61, i32 12
  %73 = insertelement <8 x i1> poison, i1 %19, i64 0, !dbg !22
  %74 = shufflevector <8 x i1> %73, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !22
  br label %75, !dbg !21

75:                                               ; preds = %9, %._crit_edge
  %indvars.iv = phi i64 [ 0, %9 ], [ %indvars.iv.next, %._crit_edge ]
  %76 = phi float [ 0.000000e+00, %9 ], [ %390, %._crit_edge ]
  %77 = phi float [ 0.000000e+00, %9 ], [ %391, %._crit_edge ]
  %78 = phi float [ 0.000000e+00, %9 ], [ %392, %._crit_edge ]
  %79 = phi float [ 0.000000e+00, %9 ], [ %393, %._crit_edge ]
  %80 = phi float [ 0.000000e+00, %9 ], [ %394, %._crit_edge ]
  %81 = phi float [ 0.000000e+00, %9 ], [ %395, %._crit_edge ]
  %82 = phi float [ 0.000000e+00, %9 ], [ %396, %._crit_edge ]
  %83 = phi float [ 0.000000e+00, %9 ], [ %397, %._crit_edge ]
  %84 = phi float [ 0.000000e+00, %9 ], [ %382, %._crit_edge ]
  %85 = phi float [ 0.000000e+00, %9 ], [ %383, %._crit_edge ]
  %86 = phi float [ 0.000000e+00, %9 ], [ %384, %._crit_edge ]
  %87 = phi float [ 0.000000e+00, %9 ], [ %385, %._crit_edge ]
  %88 = phi float [ 0.000000e+00, %9 ], [ %386, %._crit_edge ]
  %89 = phi float [ 0.000000e+00, %9 ], [ %387, %._crit_edge ]
  %90 = phi float [ 0.000000e+00, %9 ], [ %388, %._crit_edge ]
  %91 = phi float [ 0.000000e+00, %9 ], [ %389, %._crit_edge ]
  %92 = phi <8 x float> [ zeroinitializer, %9 ], [ %381, %._crit_edge ]
  %93 = or disjoint i64 %indvars.iv, %67, !dbg !23
  %94 = trunc nuw nsw i64 %indvars.iv to i32, !dbg !24
  %95 = lshr i64 %indvars.iv, 8, !dbg !24
  %96 = and i64 %95, 15, !dbg !25
  %97 = trunc i64 %indvars.iv to i32, !dbg !26
  %98 = lshr exact i32 %97, 4, !dbg !26
  %99 = and i32 %98, 12, !dbg !26
  %100 = or disjoint i32 %99, 1, !dbg !26
  %101 = or disjoint i32 %99, 2, !dbg !26
  %102 = or disjoint i32 %99, 3, !dbg !26
  %103 = lshr i32 %94, 12, !dbg !27
  %104 = getelementptr i64, ptr addrspace(1) %0, i64 %96, !dbg !28
  %105 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %104, i1 true, i1 true) #3, !dbg !29
  %106 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %104, i1 true, i1 true) #3, !dbg !29
  %107 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %104, i1 true, i1 true) #3, !dbg !29
  %108 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %104, i1 true, i1 true) #3, !dbg !29
  %109 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %104, i1 true, i1 true) #3, !dbg !29
  %110 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %104, i1 true, i1 true) #3, !dbg !29
  %111 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %104, i1 true, i1 true) #3, !dbg !29
  %112 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %104, i1 true, i1 true) #3, !dbg !29
  %113 = zext nneg i32 %99 to i64, !dbg !30
  %114 = getelementptr i64, ptr addrspace(1) %0, i64 %113, !dbg !30
  %115 = zext nneg i32 %100 to i64, !dbg !30
  %116 = getelementptr i64, ptr addrspace(1) %0, i64 %115, !dbg !30
  %117 = zext nneg i32 %101 to i64, !dbg !30
  %118 = getelementptr i64, ptr addrspace(1) %0, i64 %117, !dbg !30
  %119 = zext nneg i32 %102 to i64, !dbg !30
  %120 = getelementptr i64, ptr addrspace(1) %0, i64 %119, !dbg !30
  %121 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %114, i1 true, i1 true) #3, !dbg !31
  %122 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %114, i1 true, i1 true) #3, !dbg !31
  %123 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %116, i1 true, i1 true) #3, !dbg !31
  %124 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %116, i1 true, i1 true) #3, !dbg !31
  %125 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %118, i1 true, i1 true) #3, !dbg !31
  %126 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %118, i1 true, i1 true) #3, !dbg !31
  %127 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %120, i1 true, i1 true) #3, !dbg !31
  %128 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %120, i1 true, i1 true) #3, !dbg !31
  %129 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %34, i1 true, i1 true) #3, !dbg !32
  %130 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %36, i1 true, i1 true) #3, !dbg !32
  %131 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %34, i1 true, i1 true) #3, !dbg !32
  %132 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %36, i1 true, i1 true) #3, !dbg !32
  %133 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %34, i1 true, i1 true) #3, !dbg !32
  %134 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %36, i1 true, i1 true) #3, !dbg !32
  %135 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %34, i1 true, i1 true) #3, !dbg !32
  %136 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %36, i1 true, i1 true) #3, !dbg !32
  %137 = or disjoint i32 %103, %28, !dbg !33
  %138 = sext i32 %137 to i64, !dbg !34
  %139 = getelementptr float, ptr addrspace(1) %2, i64 %138, !dbg !34
  %140 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %139, i1 %19, i32 0, i1 %19) #3, !dbg !35
  %141 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %139, i1 %19, i32 0, i1 %19) #3, !dbg !35
  %142 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %139, i1 %19, i32 0, i1 %19) #3, !dbg !35
  %143 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %139, i1 %19, i32 0, i1 %19) #3, !dbg !35
  %144 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %139, i1 %19, i32 0, i1 %19) #3, !dbg !35
  %145 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %139, i1 %19, i32 0, i1 %19) #3, !dbg !35
  %146 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %139, i1 %19, i32 0, i1 %19) #3, !dbg !35
  %147 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %139, i1 %19, i32 0, i1 %19) #3, !dbg !35
  %148 = lshr i64 %105, 60, !dbg !36
  %149 = and i64 %148, 8, !dbg !36
  %150 = add i64 %149, %105, !dbg !36
  %151 = lshr i64 %106, 60, !dbg !36
  %152 = and i64 %151, 8, !dbg !36
  %153 = add i64 %152, %106, !dbg !36
  %154 = lshr i64 %107, 60, !dbg !36
  %155 = and i64 %154, 8, !dbg !36
  %156 = add i64 %155, %107, !dbg !36
  %157 = lshr i64 %108, 60, !dbg !36
  %158 = and i64 %157, 8, !dbg !36
  %159 = add i64 %158, %108, !dbg !36
  %160 = lshr i64 %109, 60, !dbg !36
  %161 = and i64 %160, 8, !dbg !36
  %162 = add i64 %161, %109, !dbg !36
  %163 = lshr i64 %110, 60, !dbg !36
  %164 = and i64 %163, 8, !dbg !36
  %165 = add i64 %164, %110, !dbg !36
  %166 = lshr i64 %111, 60, !dbg !36
  %167 = and i64 %166, 8, !dbg !36
  %168 = add i64 %167, %111, !dbg !36
  %169 = lshr i64 %112, 60, !dbg !36
  %170 = and i64 %169, 8, !dbg !36
  %171 = add i64 %170, %112, !dbg !36
  %172 = lshr i64 %121, 60, !dbg !37
  %173 = and i64 %172, 8, !dbg !37
  %174 = add i64 %173, %121, !dbg !37
  %175 = lshr i64 %122, 60, !dbg !37
  %176 = and i64 %175, 8, !dbg !37
  %177 = add i64 %176, %122, !dbg !37
  %178 = lshr i64 %123, 60, !dbg !37
  %179 = and i64 %178, 8, !dbg !37
  %180 = add i64 %179, %123, !dbg !37
  %181 = lshr i64 %124, 60, !dbg !37
  %182 = and i64 %181, 8, !dbg !37
  %183 = add i64 %182, %124, !dbg !37
  %184 = lshr i64 %125, 60, !dbg !37
  %185 = and i64 %184, 8, !dbg !37
  %186 = add i64 %185, %125, !dbg !37
  %187 = lshr i64 %126, 60, !dbg !37
  %188 = and i64 %187, 8, !dbg !37
  %189 = add i64 %188, %126, !dbg !37
  %190 = lshr i64 %127, 60, !dbg !37
  %191 = and i64 %190, 8, !dbg !37
  %192 = add i64 %191, %127, !dbg !37
  %193 = lshr i64 %128, 60, !dbg !37
  %194 = and i64 %193, 8, !dbg !37
  %195 = add i64 %194, %128, !dbg !37
  %196 = lshr i64 %129, 60, !dbg !38
  %197 = and i64 %196, 8, !dbg !38
  %198 = lshr i64 %130, 60, !dbg !38
  %199 = and i64 %198, 8, !dbg !38
  %200 = lshr i64 %131, 60, !dbg !38
  %201 = and i64 %200, 8, !dbg !38
  %202 = lshr i64 %132, 60, !dbg !38
  %203 = and i64 %202, 8, !dbg !38
  %204 = lshr i64 %133, 60, !dbg !38
  %205 = and i64 %204, 8, !dbg !38
  %206 = lshr i64 %134, 60, !dbg !38
  %207 = and i64 %206, 8, !dbg !38
  %208 = lshr i64 %135, 60, !dbg !38
  %209 = and i64 %208, 8, !dbg !38
  %210 = lshr i64 %136, 60, !dbg !38
  %211 = and i64 %210, 8, !dbg !38
  %212 = shl nuw nsw i32 %103, 9, !dbg !39
  %213 = zext nneg i32 %212 to i64, !dbg !40
  %214 = getelementptr float, ptr addrspace(1) %1, i64 %129, !dbg !41
  %215 = getelementptr float, ptr addrspace(1) %214, i64 %197, !dbg !41
  %.idx = shl i64 %174, 5, !dbg !41
  %216 = getelementptr i8, ptr addrspace(1) %215, i64 %.idx, !dbg !41
  %.idx4 = shl i64 %150, 8, !dbg !41
  %217 = getelementptr i8, ptr addrspace(1) %216, i64 %.idx4, !dbg !41
  %218 = getelementptr float, ptr addrspace(1) %217, i64 %213, !dbg !41
  %219 = getelementptr float, ptr addrspace(1) %218, i64 %30, !dbg !41
  %220 = getelementptr float, ptr addrspace(1) %1, i64 %130, !dbg !41
  %221 = getelementptr float, ptr addrspace(1) %220, i64 %199, !dbg !41
  %.idx5 = shl i64 %177, 5, !dbg !41
  %222 = getelementptr i8, ptr addrspace(1) %221, i64 %.idx5, !dbg !41
  %.idx6 = shl i64 %153, 8, !dbg !41
  %223 = getelementptr i8, ptr addrspace(1) %222, i64 %.idx6, !dbg !41
  %224 = getelementptr float, ptr addrspace(1) %223, i64 %213, !dbg !41
  %225 = getelementptr float, ptr addrspace(1) %224, i64 %30, !dbg !41
  %226 = getelementptr float, ptr addrspace(1) %1, i64 %131, !dbg !41
  %227 = getelementptr float, ptr addrspace(1) %226, i64 %201, !dbg !41
  %.idx7 = shl i64 %180, 5, !dbg !41
  %228 = getelementptr i8, ptr addrspace(1) %227, i64 %.idx7, !dbg !41
  %.idx8 = shl i64 %156, 8, !dbg !41
  %229 = getelementptr i8, ptr addrspace(1) %228, i64 %.idx8, !dbg !41
  %230 = getelementptr float, ptr addrspace(1) %229, i64 %213, !dbg !41
  %231 = getelementptr float, ptr addrspace(1) %230, i64 %30, !dbg !41
  %232 = getelementptr float, ptr addrspace(1) %1, i64 %132, !dbg !41
  %233 = getelementptr float, ptr addrspace(1) %232, i64 %203, !dbg !41
  %.idx9 = shl i64 %183, 5, !dbg !41
  %234 = getelementptr i8, ptr addrspace(1) %233, i64 %.idx9, !dbg !41
  %.idx10 = shl i64 %159, 8, !dbg !41
  %235 = getelementptr i8, ptr addrspace(1) %234, i64 %.idx10, !dbg !41
  %236 = getelementptr float, ptr addrspace(1) %235, i64 %213, !dbg !41
  %237 = getelementptr float, ptr addrspace(1) %236, i64 %30, !dbg !41
  %238 = getelementptr float, ptr addrspace(1) %1, i64 %133, !dbg !41
  %239 = getelementptr float, ptr addrspace(1) %238, i64 %205, !dbg !41
  %.idx11 = shl i64 %186, 5, !dbg !41
  %240 = getelementptr i8, ptr addrspace(1) %239, i64 %.idx11, !dbg !41
  %.idx12 = shl i64 %162, 8, !dbg !41
  %241 = getelementptr i8, ptr addrspace(1) %240, i64 %.idx12, !dbg !41
  %242 = getelementptr float, ptr addrspace(1) %241, i64 %213, !dbg !41
  %243 = getelementptr float, ptr addrspace(1) %242, i64 %30, !dbg !41
  %244 = getelementptr float, ptr addrspace(1) %1, i64 %134, !dbg !41
  %245 = getelementptr float, ptr addrspace(1) %244, i64 %207, !dbg !41
  %.idx13 = shl i64 %189, 5, !dbg !41
  %246 = getelementptr i8, ptr addrspace(1) %245, i64 %.idx13, !dbg !41
  %.idx14 = shl i64 %165, 8, !dbg !41
  %247 = getelementptr i8, ptr addrspace(1) %246, i64 %.idx14, !dbg !41
  %248 = getelementptr float, ptr addrspace(1) %247, i64 %213, !dbg !41
  %249 = getelementptr float, ptr addrspace(1) %248, i64 %30, !dbg !41
  %250 = getelementptr float, ptr addrspace(1) %1, i64 %135, !dbg !41
  %251 = getelementptr float, ptr addrspace(1) %250, i64 %209, !dbg !41
  %.idx15 = shl i64 %192, 5, !dbg !41
  %252 = getelementptr i8, ptr addrspace(1) %251, i64 %.idx15, !dbg !41
  %.idx16 = shl i64 %168, 8, !dbg !41
  %253 = getelementptr i8, ptr addrspace(1) %252, i64 %.idx16, !dbg !41
  %254 = getelementptr float, ptr addrspace(1) %253, i64 %213, !dbg !41
  %255 = getelementptr float, ptr addrspace(1) %254, i64 %30, !dbg !41
  %256 = getelementptr float, ptr addrspace(1) %1, i64 %136, !dbg !41
  %257 = getelementptr float, ptr addrspace(1) %256, i64 %211, !dbg !41
  %.idx17 = shl i64 %195, 5, !dbg !41
  %258 = getelementptr i8, ptr addrspace(1) %257, i64 %.idx17, !dbg !41
  %.idx18 = shl i64 %171, 8, !dbg !41
  %259 = getelementptr i8, ptr addrspace(1) %258, i64 %.idx18, !dbg !41
  %260 = getelementptr float, ptr addrspace(1) %259, i64 %213, !dbg !41
  %261 = getelementptr float, ptr addrspace(1) %260, i64 %30, !dbg !41
  %262 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %219, i1 %19, i32 0, i1 %19) #3, !dbg !42
  %263 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %225, i1 %19, i32 0, i1 %19) #3, !dbg !42
  %264 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %231, i1 %19, i32 0, i1 %19) #3, !dbg !42
  %265 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %237, i1 %19, i32 0, i1 %19) #3, !dbg !42
  %266 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %243, i1 %19, i32 0, i1 %19) #3, !dbg !42
  %267 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %249, i1 %19, i32 0, i1 %19) #3, !dbg !42
  %268 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %255, i1 %19, i32 0, i1 %19) #3, !dbg !42
  %269 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %261, i1 %19, i32 0, i1 %19) #3, !dbg !42
  %270 = insertelement <8 x i32> poison, i32 %140, i64 0, !dbg !35
  %271 = insertelement <8 x i32> %270, i32 %141, i64 1, !dbg !35
  %272 = insertelement <8 x i32> %271, i32 %142, i64 2, !dbg !35
  %273 = insertelement <8 x i32> %272, i32 %143, i64 3, !dbg !35
  %274 = insertelement <8 x i32> %273, i32 %144, i64 4, !dbg !35
  %275 = insertelement <8 x i32> %274, i32 %145, i64 5, !dbg !35
  %276 = insertelement <8 x i32> %275, i32 %146, i64 6, !dbg !35
  %277 = insertelement <8 x i32> %276, i32 %147, i64 7, !dbg !35
  %278 = bitcast <8 x i32> %277 to <8 x float>, !dbg !35
  %279 = insertelement <8 x i32> poison, i32 %262, i64 0, !dbg !42
  %280 = insertelement <8 x i32> %279, i32 %263, i64 1, !dbg !42
  %281 = insertelement <8 x i32> %280, i32 %264, i64 2, !dbg !42
  %282 = insertelement <8 x i32> %281, i32 %265, i64 3, !dbg !42
  %283 = insertelement <8 x i32> %282, i32 %266, i64 4, !dbg !42
  %284 = insertelement <8 x i32> %283, i32 %267, i64 5, !dbg !42
  %285 = insertelement <8 x i32> %284, i32 %268, i64 6, !dbg !42
  %286 = insertelement <8 x i32> %285, i32 %269, i64 7, !dbg !42
  %287 = bitcast <8 x i32> %286 to <8 x float>, !dbg !42
  %288 = fadd <8 x float> %278, %287, !dbg !43
  %289 = icmp eq i64 %indvars.iv, 0, !dbg !44
  br i1 %289, label %._crit_edge, label %290, !dbg !45

290:                                              ; preds = %75
  %291 = fsub <8 x float> %288, %92, !dbg !49
  %292 = extractelement <8 x float> %291, i64 0, !dbg !49
  %293 = fsub <8 x float> %288, %92, !dbg !49
  %294 = extractelement <8 x float> %293, i64 1, !dbg !49
  %295 = fsub <8 x float> %288, %92, !dbg !49
  %296 = extractelement <8 x float> %295, i64 2, !dbg !49
  %297 = fsub <8 x float> %288, %92, !dbg !49
  %298 = extractelement <8 x float> %297, i64 3, !dbg !49
  %299 = fsub <8 x float> %288, %92, !dbg !49
  %300 = extractelement <8 x float> %299, i64 4, !dbg !49
  %301 = fsub <8 x float> %288, %92, !dbg !49
  %302 = extractelement <8 x float> %301, i64 5, !dbg !49
  %303 = fsub <8 x float> %288, %92, !dbg !49
  %304 = extractelement <8 x float> %303, i64 6, !dbg !49
  %305 = fsub <8 x float> %288, %92, !dbg !49
  %306 = extractelement <8 x float> %305, i64 7, !dbg !49
  %307 = fadd float %76, 1.000000e+00, !dbg !50
  %308 = fadd float %77, 1.000000e+00, !dbg !50
  %309 = fadd float %78, 1.000000e+00, !dbg !50
  %310 = fadd float %79, 1.000000e+00, !dbg !50
  %311 = fadd float %80, 1.000000e+00, !dbg !50
  %312 = fadd float %81, 1.000000e+00, !dbg !50
  %313 = fadd float %82, 1.000000e+00, !dbg !50
  %314 = fadd float %83, 1.000000e+00, !dbg !50
  %315 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %292, float %307) #3, !dbg !51
  %316 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %294, float %308) #3, !dbg !51
  %317 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %296, float %309) #3, !dbg !51
  %318 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %298, float %310) #3, !dbg !51
  %319 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %300, float %311) #3, !dbg !51
  %320 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %302, float %312) #3, !dbg !51
  %321 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %304, float %313) #3, !dbg !51
  %322 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %306, float %314) #3, !dbg !51
  %323 = insertelement <8 x float> poison, float %315, i64 0, !dbg !52
  %324 = insertelement <8 x float> %323, float %316, i64 1, !dbg !52
  %325 = insertelement <8 x float> %324, float %317, i64 2, !dbg !52
  %326 = insertelement <8 x float> %325, float %318, i64 3, !dbg !52
  %327 = insertelement <8 x float> %326, float %319, i64 4, !dbg !52
  %328 = insertelement <8 x float> %327, float %320, i64 5, !dbg !52
  %329 = insertelement <8 x float> %328, float %321, i64 6, !dbg !52
  %330 = insertelement <8 x float> %329, float %322, i64 7, !dbg !52
  %331 = fadd <8 x float> %92, %330, !dbg !52
  %332 = fsub <8 x float> %288, %331, !dbg !53
  %333 = fsub <8 x float> %288, %331, !dbg !53
  %334 = fsub <8 x float> %288, %331, !dbg !53
  %335 = fsub <8 x float> %288, %331, !dbg !53
  %336 = fsub <8 x float> %288, %331, !dbg !53
  %337 = fsub <8 x float> %288, %331, !dbg !53
  %338 = fsub <8 x float> %288, %331, !dbg !53
  %339 = fsub <8 x float> %288, %331, !dbg !53
  %340 = fmul <8 x float> %291, %332, !dbg !54
  %341 = extractelement <8 x float> %340, i64 0, !dbg !54
  %342 = fmul <8 x float> %293, %333, !dbg !54
  %343 = extractelement <8 x float> %342, i64 1, !dbg !54
  %344 = fmul <8 x float> %295, %334, !dbg !54
  %345 = extractelement <8 x float> %344, i64 2, !dbg !54
  %346 = fmul <8 x float> %297, %335, !dbg !54
  %347 = extractelement <8 x float> %346, i64 3, !dbg !54
  %348 = fmul <8 x float> %299, %336, !dbg !54
  %349 = extractelement <8 x float> %348, i64 4, !dbg !54
  %350 = fmul <8 x float> %301, %337, !dbg !54
  %351 = extractelement <8 x float> %350, i64 5, !dbg !54
  %352 = fmul <8 x float> %303, %338, !dbg !54
  %353 = extractelement <8 x float> %352, i64 6, !dbg !54
  %354 = fmul <8 x float> %305, %339, !dbg !54
  %355 = extractelement <8 x float> %354, i64 7, !dbg !54
  %356 = fadd float %84, %341, !dbg !55
  %357 = fadd float %85, %343, !dbg !55
  %358 = fadd float %86, %345, !dbg !55
  %359 = fadd float %87, %347, !dbg !55
  %360 = fadd float %88, %349, !dbg !55
  %361 = fadd float %89, %351, !dbg !55
  %362 = fadd float %90, %353, !dbg !55
  %363 = fadd float %91, %355, !dbg !55
  br label %._crit_edge, !dbg !45

._crit_edge:                                      ; preds = %75, %290
  %364 = phi float [ %356, %290 ], [ 0.000000e+00, %75 ], !dbg !48
  %365 = phi float [ %357, %290 ], [ 0.000000e+00, %75 ], !dbg !48
  %366 = phi float [ %358, %290 ], [ 0.000000e+00, %75 ], !dbg !48
  %367 = phi float [ %359, %290 ], [ 0.000000e+00, %75 ], !dbg !48
  %368 = phi float [ %360, %290 ], [ 0.000000e+00, %75 ], !dbg !48
  %369 = phi float [ %361, %290 ], [ 0.000000e+00, %75 ], !dbg !48
  %370 = phi float [ %362, %290 ], [ 0.000000e+00, %75 ], !dbg !48
  %371 = phi float [ %363, %290 ], [ 0.000000e+00, %75 ], !dbg !48
  %372 = phi float [ %307, %290 ], [ 1.000000e+00, %75 ], !dbg !48
  %373 = phi float [ %308, %290 ], [ 1.000000e+00, %75 ], !dbg !48
  %374 = phi float [ %309, %290 ], [ 1.000000e+00, %75 ], !dbg !48
  %375 = phi float [ %310, %290 ], [ 1.000000e+00, %75 ], !dbg !48
  %376 = phi float [ %311, %290 ], [ 1.000000e+00, %75 ], !dbg !48
  %377 = phi float [ %312, %290 ], [ 1.000000e+00, %75 ], !dbg !48
  %378 = phi float [ %313, %290 ], [ 1.000000e+00, %75 ], !dbg !48
  %379 = phi float [ %314, %290 ], [ 1.000000e+00, %75 ], !dbg !48
  %380 = phi <8 x float> [ %331, %290 ], [ %288, %75 ]
  %381 = select <8 x i1> %74, <8 x float> %380, <8 x float> %92, !dbg !22
  %382 = select i1 %19, float %364, float %84, !dbg !56
  %383 = select i1 %19, float %365, float %85, !dbg !56
  %384 = select i1 %19, float %366, float %86, !dbg !56
  %385 = select i1 %19, float %367, float %87, !dbg !56
  %386 = select i1 %19, float %368, float %88, !dbg !56
  %387 = select i1 %19, float %369, float %89, !dbg !56
  %388 = select i1 %19, float %370, float %90, !dbg !56
  %389 = select i1 %19, float %371, float %91, !dbg !56
  %390 = select i1 %19, float %372, float %76, !dbg !57
  %391 = select i1 %19, float %373, float %77, !dbg !57
  %392 = select i1 %19, float %374, float %78, !dbg !57
  %393 = select i1 %19, float %375, float %79, !dbg !57
  %394 = select i1 %19, float %376, float %80, !dbg !57
  %395 = select i1 %19, float %377, float %81, !dbg !57
  %396 = select i1 %19, float %378, float %82, !dbg !57
  %397 = select i1 %19, float %379, float %83, !dbg !57
  %gep = getelementptr float, ptr addrspace(1) %invariant.gep, i64 %93, !dbg !58
  %gep143 = getelementptr float, ptr addrspace(1) %invariant.gep142, i64 %93, !dbg !58
  tail call void @llvm.nvvm.barrier0(), !dbg !59
  %398 = extractelement <8 x float> %288, i64 0, !dbg !59
  %399 = bitcast float %398 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %43, <1 x i32> %399, i1 true) #3, !dbg !59
  %400 = extractelement <8 x float> %288, i64 1, !dbg !59
  %401 = bitcast float %400 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %45, <1 x i32> %401, i1 true) #3, !dbg !59
  %402 = extractelement <8 x float> %288, i64 2, !dbg !59
  %403 = bitcast float %402 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %47, <1 x i32> %403, i1 true) #3, !dbg !59
  %404 = extractelement <8 x float> %288, i64 3, !dbg !59
  %405 = bitcast float %404 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %49, <1 x i32> %405, i1 true) #3, !dbg !59
  %406 = extractelement <8 x float> %288, i64 4, !dbg !59
  %407 = bitcast float %406 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %51, <1 x i32> %407, i1 true) #3, !dbg !59
  %408 = extractelement <8 x float> %288, i64 5, !dbg !59
  %409 = bitcast float %408 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %53, <1 x i32> %409, i1 true) #3, !dbg !59
  %410 = extractelement <8 x float> %288, i64 6, !dbg !59
  %411 = bitcast float %410 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %55, <1 x i32> %411, i1 true) #3, !dbg !59
  %412 = extractelement <8 x float> %288, i64 7, !dbg !59
  %413 = bitcast float %412 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %57, <1 x i32> %413, i1 true) #3, !dbg !59
  tail call void @llvm.nvvm.barrier0(), !dbg !59
  %414 = load <4 x i32>, ptr addrspace(3) %66, align 16, !dbg !59
  %.extract = load i32, ptr addrspace(3) %61, align 16, !dbg !59
  %.extract41 = load i32, ptr addrspace(3) %70, align 4, !dbg !59
  %.extract42 = load i32, ptr addrspace(3) %71, align 8, !dbg !59
  %.extract43 = load i32, ptr addrspace(3) %72, align 4, !dbg !59
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract41, i32 %.extract42, i32 %.extract43, ptr addrspace(1) %gep, i1 %20) #3, !dbg !59
  %.extract44 = extractelement <4 x i32> %414, i64 0, !dbg !59
  %.extract45 = extractelement <4 x i32> %414, i64 1, !dbg !59
  %.extract46 = extractelement <4 x i32> %414, i64 2, !dbg !59
  %.extract47 = extractelement <4 x i32> %414, i64 3, !dbg !59
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract44, i32 %.extract45, i32 %.extract46, i32 %.extract47, ptr addrspace(1) %gep143, i1 %21) #3, !dbg !59
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 64, !dbg !21
  %415 = icmp samesign ult i64 %indvars.iv, 8128, !dbg !21
  br i1 %415, label %75, label %416, !dbg !21

416:                                              ; preds = %._crit_edge
  tail call void @llvm.nvvm.barrier0(), !dbg !60
  %417 = extractelement <8 x float> %381, i64 0, !dbg !62
  %418 = extractelement <8 x float> %381, i64 1, !dbg !62
  %419 = fsub float %418, %417, !dbg !62
  %420 = fadd float %390, %391, !dbg !64
  %421 = fcmp oeq float %420, 0.000000e+00, !dbg !65
  %422 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %391, float %420) #3, !dbg !66
  %423 = select i1 %421, float 0.000000e+00, float %422, !dbg !67
  %424 = fmul float %419, %423, !dbg !68
  %425 = fadd float %417, %424, !dbg !69
  %426 = fadd float %382, %383, !dbg !70
  %427 = fmul float %419, %419, !dbg !71
  %428 = fmul float %427, %390, !dbg !72
  %429 = fmul float %428, %423, !dbg !73
  %430 = fadd float %426, %429, !dbg !74
  %431 = extractelement <8 x float> %381, i64 2, !dbg !62
  %432 = fsub float %431, %425, !dbg !62
  %433 = fadd float %392, %420, !dbg !64
  %434 = fcmp oeq float %433, 0.000000e+00, !dbg !65
  %435 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %392, float %433) #3, !dbg !66
  %436 = select i1 %434, float 0.000000e+00, float %435, !dbg !67
  %437 = fmul float %436, %432, !dbg !68
  %438 = fadd float %425, %437, !dbg !69
  %439 = fadd float %384, %430, !dbg !70
  %440 = fmul float %432, %432, !dbg !71
  %441 = fmul float %420, %440, !dbg !72
  %442 = fmul float %436, %441, !dbg !73
  %443 = fadd float %439, %442, !dbg !74
  %444 = extractelement <8 x float> %381, i64 3, !dbg !62
  %445 = fsub float %444, %438, !dbg !62
  %446 = fadd float %393, %433, !dbg !64
  %447 = fcmp oeq float %446, 0.000000e+00, !dbg !65
  %448 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %393, float %446) #3, !dbg !66
  %449 = select i1 %447, float 0.000000e+00, float %448, !dbg !67
  %450 = fmul float %449, %445, !dbg !68
  %451 = fadd float %438, %450, !dbg !69
  %452 = fadd float %385, %443, !dbg !70
  %453 = fmul float %445, %445, !dbg !71
  %454 = fmul float %433, %453, !dbg !72
  %455 = fmul float %449, %454, !dbg !73
  %456 = fadd float %452, %455, !dbg !74
  %457 = extractelement <8 x float> %381, i64 4, !dbg !62
  %458 = fsub float %457, %451, !dbg !62
  %459 = fadd float %394, %446, !dbg !64
  %460 = fcmp oeq float %459, 0.000000e+00, !dbg !65
  %461 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %394, float %459) #3, !dbg !66
  %462 = select i1 %460, float 0.000000e+00, float %461, !dbg !67
  %463 = fmul float %462, %458, !dbg !68
  %464 = fadd float %451, %463, !dbg !69
  %465 = fadd float %386, %456, !dbg !70
  %466 = fmul float %458, %458, !dbg !71
  %467 = fmul float %446, %466, !dbg !72
  %468 = fmul float %462, %467, !dbg !73
  %469 = fadd float %465, %468, !dbg !74
  %470 = extractelement <8 x float> %381, i64 5, !dbg !62
  %471 = fsub float %470, %464, !dbg !62
  %472 = fadd float %395, %459, !dbg !64
  %473 = fcmp oeq float %472, 0.000000e+00, !dbg !65
  %474 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %395, float %472) #3, !dbg !66
  %475 = select i1 %473, float 0.000000e+00, float %474, !dbg !67
  %476 = fmul float %475, %471, !dbg !68
  %477 = fadd float %464, %476, !dbg !69
  %478 = fadd float %387, %469, !dbg !70
  %479 = fmul float %471, %471, !dbg !71
  %480 = fmul float %459, %479, !dbg !72
  %481 = fmul float %475, %480, !dbg !73
  %482 = fadd float %478, %481, !dbg !74
  %483 = extractelement <8 x float> %381, i64 6, !dbg !62
  %484 = fsub float %483, %477, !dbg !62
  %485 = fadd float %396, %472, !dbg !64
  %486 = fcmp oeq float %485, 0.000000e+00, !dbg !65
  %487 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %396, float %485) #3, !dbg !66
  %488 = select i1 %486, float 0.000000e+00, float %487, !dbg !67
  %489 = fmul float %488, %484, !dbg !68
  %490 = fadd float %477, %489, !dbg !69
  %491 = fadd float %388, %482, !dbg !70
  %492 = fmul float %484, %484, !dbg !71
  %493 = fmul float %472, %492, !dbg !72
  %494 = fmul float %488, %493, !dbg !73
  %495 = fadd float %491, %494, !dbg !74
  %496 = extractelement <8 x float> %381, i64 7, !dbg !62
  %497 = fsub float %496, %490, !dbg !62
  %498 = fadd float %397, %485, !dbg !64
  %499 = fcmp oeq float %498, 0.000000e+00, !dbg !65
  %500 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %397, float %498) #3, !dbg !66
  %501 = select i1 %499, float 0.000000e+00, float %500, !dbg !67
  %502 = fmul float %501, %497, !dbg !68
  %503 = fadd float %490, %502, !dbg !69
  %504 = fadd float %389, %495, !dbg !70
  %505 = fmul float %497, %497, !dbg !71
  %506 = fmul float %485, %505, !dbg !72
  %507 = fmul float %501, %506, !dbg !73
  %508 = fadd float %504, %507, !dbg !74
  %509 = shl nuw nsw i32 %13, 3, !dbg !60
  %510 = or disjoint i32 %509, %23, !dbg !60
  %511 = getelementptr float, ptr addrspace(3) @global_smem, i32 %510, !dbg !60
  %512 = bitcast float %503 to <1 x i32>, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %511, <1 x i32> %512, i1 true) #3, !dbg !60
  %513 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 2048), i32 %510, !dbg !60
  %514 = bitcast float %508 to <1 x i32>, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %513, <1 x i32> %514, i1 true) #3, !dbg !60
  %515 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 4096), i32 %510, !dbg !60
  %516 = bitcast float %498 to <1 x i32>, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %515, <1 x i32> %516, i1 true) #3, !dbg !60
  tail call void @llvm.nvvm.barrier0(), !dbg !60
  %517 = icmp slt i32 %12, 512, !dbg !60
  %518 = getelementptr float, ptr addrspace(3) @global_smem, i32 %12, !dbg !60
  %519 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %518, i1 %517) #3, !dbg !60
  %520 = bitcast i32 %519 to float, !dbg !60
  %521 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 2048), i32 %12, !dbg !60
  %522 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %521, i1 %517) #3, !dbg !60
  %523 = bitcast i32 %522 to float, !dbg !60
  %524 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 4096), i32 %12, !dbg !60
  %525 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %524, i1 %517) #3, !dbg !60
  %526 = bitcast i32 %525 to float, !dbg !60
  %527 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %519, i32 4, i32 31), !dbg !60
  %528 = bitcast i32 %527 to float, !dbg !60
  %529 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %522, i32 4, i32 31), !dbg !60
  %530 = bitcast i32 %529 to float, !dbg !60
  %531 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %525, i32 4, i32 31), !dbg !60
  %532 = bitcast i32 %531 to float, !dbg !60
  %533 = fsub float %528, %520, !dbg !62
  %534 = fadd float %526, %532, !dbg !64
  %535 = fcmp oeq float %534, 0.000000e+00, !dbg !65
  %536 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %532, float %534) #3, !dbg !66
  %537 = select i1 %535, float 0.000000e+00, float %536, !dbg !67
  %538 = fmul float %533, %537, !dbg !68
  %539 = fadd float %538, %520, !dbg !69
  %540 = fadd float %523, %530, !dbg !70
  %541 = fmul float %533, %533, !dbg !71
  %542 = fmul float %541, %526, !dbg !72
  %543 = fmul float %542, %537, !dbg !73
  %544 = fadd float %540, %543, !dbg !74
  %545 = bitcast float %539 to i32, !dbg !60
  %546 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %545, i32 2, i32 31), !dbg !60
  %547 = bitcast i32 %546 to float, !dbg !60
  %548 = bitcast float %544 to i32, !dbg !60
  %549 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %548, i32 2, i32 31), !dbg !60
  %550 = bitcast i32 %549 to float, !dbg !60
  %551 = bitcast float %534 to i32, !dbg !60
  %552 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %551, i32 2, i32 31), !dbg !60
  %553 = bitcast i32 %552 to float, !dbg !60
  %554 = fsub float %547, %539, !dbg !62
  %555 = fadd float %534, %553, !dbg !64
  %556 = fcmp oeq float %555, 0.000000e+00, !dbg !65
  %557 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %553, float %555) #3, !dbg !66
  %558 = select i1 %556, float 0.000000e+00, float %557, !dbg !67
  %559 = fmul float %554, %558, !dbg !68
  %560 = fadd float %539, %559, !dbg !69
  %561 = fadd float %544, %550, !dbg !70
  %562 = fmul float %554, %554, !dbg !71
  %563 = fmul float %534, %562, !dbg !72
  %564 = fmul float %558, %563, !dbg !73
  %565 = fadd float %561, %564, !dbg !74
  %566 = bitcast float %560 to i32, !dbg !60
  %567 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %566, i32 1, i32 31), !dbg !60
  %568 = bitcast i32 %567 to float, !dbg !60
  %569 = bitcast float %565 to i32, !dbg !60
  %570 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %569, i32 1, i32 31), !dbg !60
  %571 = bitcast i32 %570 to float, !dbg !60
  %572 = bitcast float %555 to i32, !dbg !60
  %573 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %572, i32 1, i32 31), !dbg !60
  %574 = bitcast i32 %573 to float, !dbg !60
  %575 = fsub float %568, %560, !dbg !62
  %576 = fadd float %555, %574, !dbg !64
  %577 = fcmp oeq float %576, 0.000000e+00, !dbg !65
  %578 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %574, float %576) #3, !dbg !66
  %579 = select i1 %577, float 0.000000e+00, float %578, !dbg !67
  %580 = fmul float %575, %579, !dbg !68
  %581 = fadd float %560, %580, !dbg !69
  %582 = fadd float %565, %571, !dbg !70
  %583 = fmul float %575, %575, !dbg !71
  %584 = fmul float %555, %583, !dbg !72
  %585 = fmul float %579, %584, !dbg !73
  %586 = fadd float %582, %585, !dbg !74
  %587 = and i32 %12, 7, !dbg !60
  %588 = icmp eq i32 %587, 0, !dbg !60
  %589 = and i1 %517, %588, !dbg !60
  %590 = bitcast float %581 to <1 x i32>, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %518, <1 x i32> %590, i1 %589) #3, !dbg !60
  %591 = bitcast float %586 to <1 x i32>, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %521, <1 x i32> %591, i1 %589) #3, !dbg !60
  %592 = bitcast float %576 to <1 x i32>, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %524, <1 x i32> %592, i1 %589) #3, !dbg !60
  tail call void @llvm.nvvm.barrier0(), !dbg !60
  %593 = getelementptr float, ptr addrspace(3) @global_smem, i32 %509, !dbg !60
  %594 = load i32, ptr addrspace(3) %593, align 16, !dbg !60
  %595 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 2048), i32 %509, !dbg !60
  %596 = load i32, ptr addrspace(3) %595, align 16, !dbg !60
  %597 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 4096), i32 %509, !dbg !60
  %598 = load i32, ptr addrspace(3) %597, align 16, !dbg !60
  %599 = sext i32 %16 to i64, !dbg !75
  %600 = getelementptr float, ptr addrspace(1) %4, i64 %599, !dbg !75
  %601 = icmp eq i32 %23, 0, !dbg !76
  %602 = and i1 %601, %19, !dbg !76
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %594, ptr addrspace(1) %600, i1 %602) #3, !dbg !76
  %603 = getelementptr float, ptr addrspace(1) %5, i64 %599, !dbg !77
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %596, ptr addrspace(1) %603, i1 %602) #3, !dbg !78
  %604 = getelementptr float, ptr addrspace(1) %6, i64 %599, !dbg !79
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %598, ptr addrspace(1) %604, i1 %602) #3, !dbg !80
  ret void, !dbg !81
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py", directory: "inductor_cache/7s")
!4 = !{ptr @triton_red_fused__unsafe_index_convolution_native_group_norm_31, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused__unsafe_index_convolution_native_group_norm_31, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused__unsafe_index_convolution_native_group_norm_31", linkageName: "triton_red_fused__unsafe_index_convolution_native_group_norm_31", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 27, column: 19, scope: !7)
!17 = !DILocation(line: 42, column: 42, scope: !7)
!18 = !DILocation(line: 53, column: 76, scope: !7)
!19 = !DILocation(line: 53, column: 71, scope: !7)
!20 = !DILocation(line: 62, column: 39, scope: !7)
!21 = !DILocation(line: 31, column: 36, scope: !7)
!22 = !DILocation(line: 59, column: 62, scope: !7)
!23 = !DILocation(line: 32, column: 27, scope: !7)
!24 = !DILocation(line: 34, column: 25, scope: !7)
!25 = !DILocation(line: 34, column: 32, scope: !7)
!26 = !DILocation(line: 35, column: 31, scope: !7)
!27 = !DILocation(line: 37, column: 23, scope: !7)
!28 = !DILocation(line: 39, column: 34, scope: !7)
!29 = !DILocation(line: 39, column: 39, scope: !7)
!30 = !DILocation(line: 40, column: 34, scope: !7)
!31 = !DILocation(line: 40, column: 39, scope: !7)
!32 = !DILocation(line: 41, column: 39, scope: !7)
!33 = !DILocation(line: 42, column: 40, scope: !7)
!34 = !DILocation(line: 42, column: 35, scope: !7)
!35 = !DILocation(line: 42, column: 47, scope: !7)
!36 = !DILocation(line: 46, column: 36, scope: !7)
!37 = !DILocation(line: 49, column: 36, scope: !7)
!38 = !DILocation(line: 52, column: 39, scope: !7)
!39 = !DILocation(line: 53, column: 66, scope: !7)
!40 = !DILocation(line: 53, column: 62, scope: !7)
!41 = !DILocation(line: 53, column: 35, scope: !7)
!42 = !DILocation(line: 53, column: 81, scope: !7)
!43 = !DILocation(line: 54, column: 24, scope: !7)
!44 = !DILocation(line: 57, column: 66, scope: !7)
!45 = !DILocation(line: 178, column: 7, scope: !46, inlinedAt: !48)
!46 = distinct !DILexicalBlockFile(scope: !7, file: !47, discriminator: 0)
!47 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!48 = !DILocation(line: 57, column: 55, scope: !7)
!49 = !DILocation(line: 183, column: 24, scope: !46, inlinedAt: !48)
!50 = !DILocation(line: 184, column: 30, scope: !46, inlinedAt: !48)
!51 = !DILocation(line: 185, column: 34, scope: !46, inlinedAt: !48)
!52 = !DILocation(line: 185, column: 26, scope: !46, inlinedAt: !48)
!53 = !DILocation(line: 186, column: 39, scope: !46, inlinedAt: !48)
!54 = !DILocation(line: 186, column: 31, scope: !46, inlinedAt: !48)
!55 = !DILocation(line: 186, column: 22, scope: !46, inlinedAt: !48)
!56 = !DILocation(line: 60, column: 58, scope: !7)
!57 = !DILocation(line: 61, column: 66, scope: !7)
!58 = !DILocation(line: 62, column: 29, scope: !7)
!59 = !DILocation(line: 62, column: 51, scope: !7)
!60 = !DILocation(line: 204, column: 46, scope: !46, inlinedAt: !61)
!61 = !DILocation(line: 64, column: 44, scope: !7)
!62 = !DILocation(line: 192, column: 21, scope: !63, inlinedAt: !61)
!63 = distinct !DILexicalBlockFile(scope: !46, file: !47, discriminator: 0)
!64 = !DILocation(line: 193, column: 28, scope: !63, inlinedAt: !61)
!65 = !DILocation(line: 194, column: 39, scope: !63, inlinedAt: !61)
!66 = !DILocation(line: 194, column: 60, scope: !63, inlinedAt: !61)
!67 = !DILocation(line: 194, column: 49, scope: !63, inlinedAt: !61)
!68 = !DILocation(line: 196, column: 25, scope: !63, inlinedAt: !61)
!69 = !DILocation(line: 196, column: 17, scope: !63, inlinedAt: !61)
!70 = !DILocation(line: 197, column: 15, scope: !63, inlinedAt: !61)
!71 = !DILocation(line: 197, column: 30, scope: !63, inlinedAt: !61)
!72 = !DILocation(line: 197, column: 38, scope: !63, inlinedAt: !61)
!73 = !DILocation(line: 197, column: 49, scope: !63, inlinedAt: !61)
!74 = !DILocation(line: 197, column: 22, scope: !63, inlinedAt: !61)
!75 = !DILocation(line: 69, column: 25, scope: !7)
!76 = !DILocation(line: 69, column: 37, scope: !7)
!77 = !DILocation(line: 70, column: 25, scope: !7)
!78 = !DILocation(line: 70, column: 37, scope: !7)
!79 = !DILocation(line: 71, column: 25, scope: !7)
!80 = !DILocation(line: 71, column: 37, scope: !7)
!81 = !DILocation(line: 71, column: 4, scope: !7)
