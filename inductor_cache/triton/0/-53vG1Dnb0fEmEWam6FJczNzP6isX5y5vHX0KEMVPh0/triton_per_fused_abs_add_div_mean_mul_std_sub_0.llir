; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused_abs_add_div_mean_mul_std_sub_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %6 = and i32 %5, 31, !dbg !10
  %7 = lshr i32 %5, 5, !dbg !10
  %8 = shl i32 %5, 2, !dbg !10
  %9 = and i32 %8, 252, !dbg !10
  %10 = zext nneg i32 %9 to i64, !dbg !11
  %11 = getelementptr float, ptr addrspace(1) %1, i64 %10, !dbg !11
  %12 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %11, i1 true) #5, !dbg !12
  %13 = extractvalue { i32, i32, i32, i32 } %12, 0, !dbg !12
  %14 = extractvalue { i32, i32, i32, i32 } %12, 1, !dbg !12
  %15 = extractvalue { i32, i32, i32, i32 } %12, 2, !dbg !12
  %16 = extractvalue { i32, i32, i32, i32 } %12, 3, !dbg !12
  %17 = bitcast i32 %13 to float, !dbg !12
  %18 = bitcast i32 %14 to float, !dbg !12
  %19 = bitcast i32 %15 to float, !dbg !12
  %20 = bitcast i32 %16 to float, !dbg !12
  %21 = getelementptr float, ptr addrspace(1) %2, i64 %10, !dbg !13
  %22 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %21, i1 true) #5, !dbg !14
  %23 = extractvalue { i32, i32, i32, i32 } %22, 0, !dbg !14
  %24 = extractvalue { i32, i32, i32, i32 } %22, 1, !dbg !14
  %25 = extractvalue { i32, i32, i32, i32 } %22, 2, !dbg !14
  %26 = extractvalue { i32, i32, i32, i32 } %22, 3, !dbg !14
  %27 = bitcast i32 %23 to float, !dbg !14
  %28 = bitcast i32 %24 to float, !dbg !14
  %29 = bitcast i32 %25 to float, !dbg !14
  %30 = bitcast i32 %26 to float, !dbg !14
  %31 = fsub float %17, %27, !dbg !15
  %32 = fsub float %18, %28, !dbg !15
  %33 = fsub float %19, %29, !dbg !15
  %34 = fsub float %20, %30, !dbg !15
  %35 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %31, float %17) #5, !dbg !16
  %36 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %32, float %18) #5, !dbg !16
  %37 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %33, float %19) #5, !dbg !16
  %38 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %34, float %20) #5, !dbg !16
  %39 = tail call float @llvm.fabs.f32(float %35), !dbg !17
  %40 = tail call float @llvm.fabs.f32(float %36), !dbg !17
  %41 = tail call float @llvm.fabs.f32(float %37), !dbg !17
  %42 = tail call float @llvm.fabs.f32(float %38), !dbg !17
  %43 = fadd float %39, %40, !dbg !18
  %44 = fadd float %43, %41, !dbg !18
  %45 = fadd float %44, %42, !dbg !18
  %46 = bitcast float %45 to i32, !dbg !23
  %47 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %46, i32 16, i32 31), !dbg !23
  %48 = bitcast i32 %47 to float, !dbg !23
  %49 = fadd float %45, %48, !dbg !18
  %50 = bitcast float %49 to i32, !dbg !23
  %51 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %50, i32 8, i32 31), !dbg !23
  %52 = bitcast i32 %51 to float, !dbg !23
  %53 = fadd float %49, %52, !dbg !18
  %54 = bitcast float %53 to i32, !dbg !23
  %55 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %54, i32 4, i32 31), !dbg !23
  %56 = bitcast i32 %55 to float, !dbg !23
  %57 = fadd float %53, %56, !dbg !18
  %58 = bitcast float %57 to i32, !dbg !23
  %59 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %58, i32 2, i32 31), !dbg !23
  %60 = bitcast i32 %59 to float, !dbg !23
  %61 = fadd float %57, %60, !dbg !18
  %62 = bitcast float %61 to i32, !dbg !23
  %63 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %62, i32 1, i32 31), !dbg !23
  %64 = bitcast i32 %63 to float, !dbg !23
  %65 = fadd float %61, %64, !dbg !18
  %66 = icmp eq i32 %6, 0, !dbg !23
  %67 = and i32 %7, 1, !dbg !23
  %68 = getelementptr float, ptr addrspace(3) @global_smem, i32 %67, !dbg !23
  %69 = bitcast float %65 to <1 x i32>, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %68, <1 x i32> %69, i1 %66) #5, !dbg !23
  tail call void @llvm.nvvm.barrier0(), !dbg !23
  %70 = icmp slt i32 %5, 2, !dbg !23
  %71 = getelementptr float, ptr addrspace(3) @global_smem, i32 %5, !dbg !23
  %72 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %71, i1 %70) #5, !dbg !23
  %73 = bitcast i32 %72 to float, !dbg !23
  %74 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %72, i32 1, i32 31), !dbg !23
  %75 = bitcast i32 %74 to float, !dbg !23
  %76 = fadd float %73, %75, !dbg !18
  %77 = and i32 %5, 1, !dbg !23
  %78 = icmp eq i32 %77, 0, !dbg !23
  %79 = and i1 %70, %78, !dbg !23
  %80 = bitcast float %76 to <1 x i32>, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %71, <1 x i32> %80, i1 %79) #5, !dbg !23
  tail call void @llvm.nvvm.barrier0(), !dbg !23
  %81 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !23
  %82 = fadd float %81, 0.000000e+00, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %83 = fadd float %31, %32, !dbg !30
  %84 = fadd float %33, %83, !dbg !30
  %85 = fadd float %34, %84, !dbg !30
  %86 = bitcast float %85 to i32, !dbg !28
  %87 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %86, i32 16, i32 31), !dbg !28
  %88 = bitcast i32 %87 to float, !dbg !28
  %89 = fadd float %85, %88, !dbg !30
  %90 = bitcast float %89 to i32, !dbg !28
  %91 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %90, i32 8, i32 31), !dbg !28
  %92 = bitcast i32 %91 to float, !dbg !28
  %93 = fadd float %89, %92, !dbg !30
  %94 = bitcast float %93 to i32, !dbg !28
  %95 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %94, i32 4, i32 31), !dbg !28
  %96 = bitcast i32 %95 to float, !dbg !28
  %97 = fadd float %93, %96, !dbg !30
  %98 = bitcast float %97 to i32, !dbg !28
  %99 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %98, i32 2, i32 31), !dbg !28
  %100 = bitcast i32 %99 to float, !dbg !28
  %101 = fadd float %97, %100, !dbg !30
  %102 = bitcast float %101 to i32, !dbg !28
  %103 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %102, i32 1, i32 31), !dbg !28
  %104 = bitcast i32 %103 to float, !dbg !28
  %105 = fadd float %101, %104, !dbg !30
  %106 = bitcast float %105 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %68, <1 x i32> %106, i1 %66) #5, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %107 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %71, i1 %70) #5, !dbg !28
  %108 = bitcast i32 %107 to float, !dbg !28
  %109 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %107, i32 1, i32 31), !dbg !28
  %110 = bitcast i32 %109 to float, !dbg !28
  %111 = fadd float %108, %110, !dbg !30
  %112 = bitcast float %111 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %71, <1 x i32> %112, i1 %79) #5, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %113 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !28
  %114 = fadd float %113, 0.000000e+00, !dbg !31
  %115 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %114, float 2.560000e+02) #5, !dbg !33
  %116 = fsub float %31, %115, !dbg !34
  %117 = fsub float %32, %115, !dbg !34
  %118 = fsub float %33, %115, !dbg !34
  %119 = fsub float %34, %115, !dbg !34
  %120 = fmul float %116, %116, !dbg !35
  %121 = fmul float %117, %117, !dbg !35
  %122 = fmul float %118, %118, !dbg !35
  %123 = fmul float %119, %119, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %124 = fadd float %120, %121, !dbg !38
  %125 = fadd float %122, %124, !dbg !38
  %126 = fadd float %123, %125, !dbg !38
  %127 = bitcast float %126 to i32, !dbg !36
  %128 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %127, i32 16, i32 31), !dbg !36
  %129 = bitcast i32 %128 to float, !dbg !36
  %130 = fadd float %126, %129, !dbg !38
  %131 = bitcast float %130 to i32, !dbg !36
  %132 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %131, i32 8, i32 31), !dbg !36
  %133 = bitcast i32 %132 to float, !dbg !36
  %134 = fadd float %130, %133, !dbg !38
  %135 = bitcast float %134 to i32, !dbg !36
  %136 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %135, i32 4, i32 31), !dbg !36
  %137 = bitcast i32 %136 to float, !dbg !36
  %138 = fadd float %134, %137, !dbg !38
  %139 = bitcast float %138 to i32, !dbg !36
  %140 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %139, i32 2, i32 31), !dbg !36
  %141 = bitcast i32 %140 to float, !dbg !36
  %142 = fadd float %138, %141, !dbg !38
  %143 = bitcast float %142 to i32, !dbg !36
  %144 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %143, i32 1, i32 31), !dbg !36
  %145 = bitcast i32 %144 to float, !dbg !36
  %146 = fadd float %142, %145, !dbg !38
  %147 = bitcast float %146 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %68, <1 x i32> %147, i1 %66) #5, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %148 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %71, i1 %70) #5, !dbg !36
  %149 = bitcast i32 %148 to float, !dbg !36
  %150 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %148, i32 1, i32 31), !dbg !36
  %151 = bitcast i32 %150 to float, !dbg !36
  %152 = fadd float %149, %151, !dbg !38
  %153 = bitcast float %152 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %71, <1 x i32> %153, i1 %79) #5, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %154 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !36
  %155 = fadd float %154, 0.000000e+00, !dbg !39
  %156 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %82, float 2.560000e+02) #5, !dbg !41
  %157 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %155, float 2.550000e+02) #5, !dbg !42
  %158 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !43
  %.not.i = icmp eq i32 %158, 0, !dbg !43
  %159 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !43
  %.not1.i = icmp eq i32 %159, 0, !dbg !43
  br i1 %.not.i, label %165, label %160, !dbg !43

160:                                              ; preds = %4
  br i1 %.not1.i, label %163, label %161, !dbg !43

161:                                              ; preds = %160
  %162 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %157) #5, !dbg !43
  br label %__nv_sqrtf.exit, !dbg !43

163:                                              ; preds = %160
  %164 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %157) #5, !dbg !43
  br label %__nv_sqrtf.exit, !dbg !43

165:                                              ; preds = %4
  br i1 %.not1.i, label %168, label %166, !dbg !43

166:                                              ; preds = %165
  %167 = tail call float @llvm.nvvm.sqrt.rn.f(float %157) #5, !dbg !43
  br label %__nv_sqrtf.exit, !dbg !43

168:                                              ; preds = %165
  %169 = tail call float @llvm.nvvm.sqrt.approx.f(float %157) #5, !dbg !43
  br label %__nv_sqrtf.exit, !dbg !43

__nv_sqrtf.exit:                                  ; preds = %161, %163, %166, %168
  %.0.i = phi float [ %162, %161 ], [ %164, %163 ], [ %167, %166 ], [ %169, %168 ], !dbg !43
  %170 = fmul float %.0.i, 0.000000e+00, !dbg !44
  %171 = fadd float %156, %170, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %urem = and i32 %5, 63, !dbg !47
  %172 = icmp eq i32 %urem, 0, !dbg !47
  %173 = bitcast float %171 to i32, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %173, ptr addrspace(1) %0, i1 %172) #5, !dbg !47
  ret void, !dbg !48
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.fabs.f32(float) #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c6xaa6f3ztrtwvhi37qk4224xni5xnkjtaxpkjyybkqabohavuqh.py", directory: "inductor_cache/6x")
!4 = !{ptr @triton_per_fused_abs_add_div_mean_mul_std_sub_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_abs_add_div_mean_mul_std_sub_0, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_abs_add_div_mean_mul_std_sub_0", linkageName: "triton_per_fused_abs_add_div_mean_mul_std_sub_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 27, column: 26, scope: !7)
!11 = !DILocation(line: 31, column: 30, scope: !7)
!12 = !DILocation(line: 31, column: 35, scope: !7)
!13 = !DILocation(line: 32, column: 30, scope: !7)
!14 = !DILocation(line: 32, column: 35, scope: !7)
!15 = !DILocation(line: 33, column: 18, scope: !7)
!16 = !DILocation(line: 34, column: 18, scope: !7)
!17 = !DILocation(line: 35, column: 23, scope: !7)
!18 = !DILocation(line: 256, column: 15, scope: !19, inlinedAt: !22)
!19 = distinct !DILexicalBlockFile(scope: !21, file: !20, discriminator: 0)
!20 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!21 = distinct !DILexicalBlockFile(scope: !7, file: !20, discriminator: 0)
!22 = !DILocation(line: 37, column: 57, scope: !7)
!23 = !DILocation(line: 267, column: 36, scope: !21, inlinedAt: !22)
!24 = !DILocation(line: 73, column: 15, scope: !25, inlinedAt: !27)
!25 = distinct !DILexicalBlockFile(scope: !7, file: !26, discriminator: 0)
!26 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!27 = !DILocation(line: 37, column: 44, scope: !7)
!28 = !DILocation(line: 267, column: 36, scope: !21, inlinedAt: !29)
!29 = !DILocation(line: 40, column: 59, scope: !7)
!30 = !DILocation(line: 256, column: 15, scope: !19, inlinedAt: !29)
!31 = !DILocation(line: 73, column: 15, scope: !25, inlinedAt: !32)
!32 = !DILocation(line: 40, column: 45, scope: !7)
!33 = !DILocation(line: 43, column: 20, scope: !7)
!34 = !DILocation(line: 44, column: 19, scope: !7)
!35 = !DILocation(line: 45, column: 20, scope: !7)
!36 = !DILocation(line: 267, column: 36, scope: !21, inlinedAt: !37)
!37 = !DILocation(line: 47, column: 59, scope: !7)
!38 = !DILocation(line: 256, column: 15, scope: !19, inlinedAt: !37)
!39 = !DILocation(line: 73, column: 15, scope: !25, inlinedAt: !40)
!40 = !DILocation(line: 47, column: 45, scope: !7)
!41 = !DILocation(line: 49, column: 19, scope: !7)
!42 = !DILocation(line: 51, column: 20, scope: !7)
!43 = !DILocation(line: 52, column: 27, scope: !7)
!44 = !DILocation(line: 54, column: 20, scope: !7)
!45 = !DILocation(line: 55, column: 20, scope: !7)
!46 = !DILocation(line: 56, column: 4, scope: !7)
!47 = !DILocation(line: 57, column: 63, scope: !7)
!48 = !DILocation(line: 57, column: 4, scope: !7)
