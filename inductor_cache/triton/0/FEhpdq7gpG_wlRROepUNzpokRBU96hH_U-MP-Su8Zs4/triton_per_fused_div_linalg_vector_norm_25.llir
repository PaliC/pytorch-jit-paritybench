; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused_div_linalg_vector_norm_25(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %7 = icmp slt i32 %6, 4, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = and i32 %8, 31, !dbg !12
  %10 = lshr i32 %8, 5, !dbg !12
  %11 = shl i32 %8, 1, !dbg !12
  %12 = and i32 %11, 126, !dbg !12
  %13 = shl i32 %6, 7, !dbg !13
  %14 = or disjoint i32 %13, %12, !dbg !14
  %15 = sext i32 %14 to i64, !dbg !15
  %16 = getelementptr float, ptr addrspace(1) %1, i64 %15, !dbg !15
  %17 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %16, i1 %7, i32 0, i1 %7, i32 0, i1 %7) #5, !dbg !16
  %18 = extractvalue { i32, i32 } %17, 0, !dbg !16
  %19 = extractvalue { i32, i32 } %17, 1, !dbg !16
  %20 = bitcast i32 %18 to float, !dbg !16
  %21 = bitcast i32 %19 to float, !dbg !16
  %22 = fmul float %20, %20, !dbg !17
  %23 = fmul float %21, %21, !dbg !17
  %24 = fadd float %22, %23, !dbg !18
  %25 = select i1 %7, float %24, float 0.000000e+00, !dbg !18
  %26 = bitcast float %25 to i32, !dbg !23
  %27 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %26, i32 16, i32 31), !dbg !23
  %28 = bitcast i32 %27 to float, !dbg !23
  %29 = fadd float %25, %28, !dbg !18
  %30 = bitcast float %29 to i32, !dbg !23
  %31 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %30, i32 8, i32 31), !dbg !23
  %32 = bitcast i32 %31 to float, !dbg !23
  %33 = fadd float %29, %32, !dbg !18
  %34 = bitcast float %33 to i32, !dbg !23
  %35 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %34, i32 4, i32 31), !dbg !23
  %36 = bitcast i32 %35 to float, !dbg !23
  %37 = fadd float %33, %36, !dbg !18
  %38 = bitcast float %37 to i32, !dbg !23
  %39 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %38, i32 2, i32 31), !dbg !23
  %40 = bitcast i32 %39 to float, !dbg !23
  %41 = fadd float %37, %40, !dbg !18
  %42 = bitcast float %41 to i32, !dbg !23
  %43 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %42, i32 1, i32 31), !dbg !23
  %44 = bitcast i32 %43 to float, !dbg !23
  %45 = fadd float %41, %44, !dbg !18
  %46 = icmp eq i32 %9, 0, !dbg !23
  %47 = and i32 %10, 1, !dbg !23
  %48 = zext nneg i32 %47 to i64, !dbg !23
  %49 = getelementptr float, ptr addrspace(3) @global_smem, i64 %48, !dbg !23
  %50 = bitcast float %45 to <1 x i32>, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %49, <1 x i32> %50, i1 %46) #5, !dbg !23
  tail call void @llvm.nvvm.barrier0(), !dbg !23
  %51 = icmp slt i32 %8, 2, !dbg !23
  %52 = sext i32 %8 to i64, !dbg !23
  %53 = getelementptr float, ptr addrspace(3) @global_smem, i64 %52, !dbg !23
  %54 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %53, i1 %51) #5, !dbg !23
  %55 = bitcast i32 %54 to float, !dbg !23
  %56 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %54, i32 1, i32 31), !dbg !23
  %57 = bitcast i32 %56 to float, !dbg !23
  %58 = fadd float %55, %57, !dbg !18
  %59 = and i32 %8, 1, !dbg !23
  %60 = icmp eq i32 %59, 0, !dbg !23
  %61 = and i1 %51, %60, !dbg !23
  %62 = bitcast float %58 to <1 x i32>, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %53, <1 x i32> %62, i1 %61) #5, !dbg !23
  tail call void @llvm.nvvm.barrier0(), !dbg !23
  %63 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !23
  %64 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !24
  %.not.i = icmp eq i32 %64, 0, !dbg !24
  %65 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !24
  %.not1.i = icmp eq i32 %65, 0, !dbg !24
  br i1 %.not.i, label %71, label %66, !dbg !24

66:                                               ; preds = %5
  br i1 %.not1.i, label %69, label %67, !dbg !24

67:                                               ; preds = %66
  %68 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %63) #5, !dbg !24
  br label %__nv_sqrtf.exit, !dbg !24

69:                                               ; preds = %66
  %70 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %63) #5, !dbg !24
  br label %__nv_sqrtf.exit, !dbg !24

71:                                               ; preds = %5
  br i1 %.not1.i, label %74, label %72, !dbg !24

72:                                               ; preds = %71
  %73 = tail call float @llvm.nvvm.sqrt.rn.f(float %63) #5, !dbg !24
  br label %__nv_sqrtf.exit, !dbg !24

74:                                               ; preds = %71
  %75 = tail call float @llvm.nvvm.sqrt.approx.f(float %63) #5, !dbg !24
  br label %__nv_sqrtf.exit, !dbg !24

__nv_sqrtf.exit:                                  ; preds = %67, %69, %72, %74
  %.0.i = phi float [ %68, %67 ], [ %70, %69 ], [ %73, %72 ], [ %75, %74 ], !dbg !24
  %76 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !24
  %77 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !24
  %78 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !24
  %.not.i6 = icmp eq i32 %78, 0, !dbg !24
  %79 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !24
  %.not1.i9 = icmp eq i32 %79, 0, !dbg !24
  br i1 %.not.i6, label %85, label %80, !dbg !24

80:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i9, label %83, label %81, !dbg !24

81:                                               ; preds = %80
  %82 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %63) #5, !dbg !24
  br label %__nv_sqrtf.exit10, !dbg !24

83:                                               ; preds = %80
  %84 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %63) #5, !dbg !24
  br label %__nv_sqrtf.exit10, !dbg !24

85:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i9, label %88, label %86, !dbg !24

86:                                               ; preds = %85
  %87 = tail call float @llvm.nvvm.sqrt.rn.f(float %63) #5, !dbg !24
  br label %__nv_sqrtf.exit10, !dbg !24

88:                                               ; preds = %85
  %89 = tail call float @llvm.nvvm.sqrt.approx.f(float %63) #5, !dbg !24
  br label %__nv_sqrtf.exit10, !dbg !24

__nv_sqrtf.exit10:                                ; preds = %81, %83, %86, %88
  %.0.i8 = phi float [ %82, %81 ], [ %84, %83 ], [ %87, %86 ], [ %89, %88 ], !dbg !24
  %90 = fcmp ogt float %.0.i8, 0x3D71979980000000, !dbg !25
  %91 = fcmp uno float %.0.i8, 0.000000e+00, !dbg !29
  %92 = or i1 %90, %91, !dbg !30
  %93 = select i1 %92, float %.0.i8, float 0x3D71979980000000, !dbg !31
  %94 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %20, float %93) #5, !dbg !32
  %95 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %21, float %93) #5, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %96 = sext i32 %6 to i64, !dbg !34
  %97 = getelementptr float, ptr addrspace(1) %0, i64 %96, !dbg !34
  %urem = and i32 %8, 63, !dbg !35
  %98 = icmp eq i32 %urem, 0, !dbg !35
  %99 = bitcast float %.0.i to i32, !dbg !35
  %100 = and i1 %98, %7, !dbg !35
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %99, ptr addrspace(1) %97, i1 %100) #5, !dbg !35
  %101 = getelementptr float, ptr addrspace(1) %2, i64 %15, !dbg !36
  %102 = bitcast float %94 to i32, !dbg !37
  %103 = bitcast float %95 to i32, !dbg !37
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %102, i32 %103, ptr addrspace(1) %101, i1 %7) #5, !dbg !37
  ret void, !dbg !38
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cqx3upldrtt2r5n5l32qjfef32hejatkrqb7tlwppuzn4ixd2q5m.py", directory: "inductor_cache/qx")
!4 = !{ptr @triton_per_fused_div_linalg_vector_norm_25, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_div_linalg_vector_norm_25, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_div_linalg_vector_norm_25", linkageName: "triton_per_fused_div_linalg_vector_norm_25", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 21, scope: !7)
!12 = !DILocation(line: 26, column: 34, scope: !7)
!13 = !DILocation(line: 31, column: 39, scope: !7)
!14 = !DILocation(line: 31, column: 35, scope: !7)
!15 = !DILocation(line: 31, column: 30, scope: !7)
!16 = !DILocation(line: 31, column: 44, scope: !7)
!17 = !DILocation(line: 32, column: 18, scope: !7)
!18 = !DILocation(line: 256, column: 15, scope: !19, inlinedAt: !22)
!19 = distinct !DILexicalBlockFile(scope: !21, file: !20, discriminator: 0)
!20 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!21 = distinct !DILexicalBlockFile(scope: !7, file: !20, discriminator: 0)
!22 = !DILocation(line: 35, column: 24, scope: !7)
!23 = !DILocation(line: 267, column: 36, scope: !21, inlinedAt: !22)
!24 = !DILocation(line: 36, column: 26, scope: !7)
!25 = !DILocation(line: 118, column: 15, scope: !26, inlinedAt: !28)
!26 = distinct !DILexicalBlockFile(scope: !7, file: !27, discriminator: 0)
!27 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!28 = !DILocation(line: 38, column: 40, scope: !7)
!29 = !DILocation(line: 120, column: 21, scope: !26, inlinedAt: !28)
!30 = !DILocation(line: 120, column: 16, scope: !26, inlinedAt: !28)
!31 = !DILocation(line: 121, column: 29, scope: !26, inlinedAt: !28)
!32 = !DILocation(line: 39, column: 18, scope: !7)
!33 = !DILocation(line: 40, column: 4, scope: !7)
!34 = !DILocation(line: 41, column: 28, scope: !7)
!35 = !DILocation(line: 41, column: 39, scope: !7)
!36 = !DILocation(line: 42, column: 25, scope: !7)
!37 = !DILocation(line: 42, column: 45, scope: !7)
!38 = !DILocation(line: 42, column: 4, scope: !7)
