; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_10(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %10 = shl i32 %9, 9, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 508, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = or disjoint i32 %14, 2, !dbg !13
  %16 = icmp slt i32 %14, 38912, !dbg !14
  %.frozen = freeze i32 %14, !dbg !15
  %17 = sdiv i32 %.frozen, 38, !dbg !15
  %18 = mul i32 %17, 38, !dbg !16
  %.decomposed = sub i32 %.frozen, %18, !dbg !16
  %.frozen16 = freeze i32 %15, !dbg !15
  %19 = sdiv i32 %.frozen16, 38, !dbg !15
  %20 = mul i32 %19, 38, !dbg !16
  %.decomposed17 = sub i32 %.frozen16, %20, !dbg !16
  %21 = sext i32 %14 to i64, !dbg !17
  %22 = getelementptr float, ptr addrspace(1) %1, i64 %21, !dbg !17
  %23 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %22, i1 %16) #3, !dbg !18
  %24 = sext i32 %.decomposed to i64, !dbg !19
  %25 = getelementptr float, ptr addrspace(1) %2, i64 %24, !dbg !19
  %26 = sext i32 %.decomposed17 to i64, !dbg !19
  %27 = getelementptr float, ptr addrspace(1) %2, i64 %26, !dbg !19
  %28 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %25, i1 %16) #3, !dbg !20
  %29 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %27, i1 %16) #3, !dbg !20
  %30 = getelementptr float, ptr addrspace(1) %3, i64 %24, !dbg !21
  %31 = getelementptr float, ptr addrspace(1) %3, i64 %26, !dbg !21
  %32 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %30, i1 %16) #3, !dbg !22
  %33 = extractvalue { i32, i32 } %32, 0, !dbg !22
  %34 = extractvalue { i32, i32 } %32, 1, !dbg !22
  %35 = bitcast i32 %33 to float, !dbg !22
  %36 = bitcast i32 %34 to float, !dbg !22
  %37 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %31, i1 %16) #3, !dbg !22
  %38 = extractvalue { i32, i32 } %37, 0, !dbg !22
  %39 = extractvalue { i32, i32 } %37, 1, !dbg !22
  %40 = bitcast i32 %38 to float, !dbg !22
  %41 = bitcast i32 %39 to float, !dbg !22
  %42 = getelementptr float, ptr addrspace(1) %4, i64 %24, !dbg !23
  %43 = getelementptr float, ptr addrspace(1) %4, i64 %26, !dbg !23
  %44 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %42, i1 %16) #3, !dbg !24
  %45 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %43, i1 %16) #3, !dbg !24
  %46 = getelementptr float, ptr addrspace(1) %5, i64 %24, !dbg !25
  %47 = getelementptr float, ptr addrspace(1) %5, i64 %26, !dbg !25
  %48 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %46, i1 %16) #3, !dbg !26
  %49 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %47, i1 %16) #3, !dbg !26
  %50 = fadd float %35, 0x3EE4F8B580000000, !dbg !27
  %51 = fadd float %36, 0x3EE4F8B580000000, !dbg !27
  %52 = fadd float %40, 0x3EE4F8B580000000, !dbg !27
  %53 = fadd float %41, 0x3EE4F8B580000000, !dbg !27
  %54 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i = icmp eq i32 %54, 0, !dbg !28
  %55 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i = icmp eq i32 %55, 0, !dbg !28
  br i1 %.not.i, label %61, label %56, !dbg !28

56:                                               ; preds = %8
  br i1 %.not1.i, label %59, label %57, !dbg !28

57:                                               ; preds = %56
  %58 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %50) #3, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

59:                                               ; preds = %56
  %60 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %50) #3, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

61:                                               ; preds = %8
  br i1 %.not1.i, label %64, label %62, !dbg !28

62:                                               ; preds = %61
  %63 = tail call float @llvm.nvvm.sqrt.rn.f(float %50) #3, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

64:                                               ; preds = %61
  %65 = tail call float @llvm.nvvm.sqrt.approx.f(float %50) #3, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

__nv_sqrtf.exit:                                  ; preds = %57, %59, %62, %64
  %.0.i = phi float [ %58, %57 ], [ %60, %59 ], [ %63, %62 ], [ %65, %64 ], !dbg !28
  %66 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i1 = icmp eq i32 %66, 0, !dbg !28
  %67 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i4 = icmp eq i32 %67, 0, !dbg !28
  br i1 %.not.i1, label %73, label %68, !dbg !28

68:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %71, label %69, !dbg !28

69:                                               ; preds = %68
  %70 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %51) #3, !dbg !28
  br label %__nv_sqrtf.exit5, !dbg !28

71:                                               ; preds = %68
  %72 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %51) #3, !dbg !28
  br label %__nv_sqrtf.exit5, !dbg !28

73:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %76, label %74, !dbg !28

74:                                               ; preds = %73
  %75 = tail call float @llvm.nvvm.sqrt.rn.f(float %51) #3, !dbg !28
  br label %__nv_sqrtf.exit5, !dbg !28

76:                                               ; preds = %73
  %77 = tail call float @llvm.nvvm.sqrt.approx.f(float %51) #3, !dbg !28
  br label %__nv_sqrtf.exit5, !dbg !28

__nv_sqrtf.exit5:                                 ; preds = %69, %71, %74, %76
  %.0.i3 = phi float [ %70, %69 ], [ %72, %71 ], [ %75, %74 ], [ %77, %76 ], !dbg !28
  %78 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i6 = icmp eq i32 %78, 0, !dbg !28
  %79 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i9 = icmp eq i32 %79, 0, !dbg !28
  br i1 %.not.i6, label %85, label %80, !dbg !28

80:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %83, label %81, !dbg !28

81:                                               ; preds = %80
  %82 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %52) #3, !dbg !28
  br label %__nv_sqrtf.exit10, !dbg !28

83:                                               ; preds = %80
  %84 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %52) #3, !dbg !28
  br label %__nv_sqrtf.exit10, !dbg !28

85:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %88, label %86, !dbg !28

86:                                               ; preds = %85
  %87 = tail call float @llvm.nvvm.sqrt.rn.f(float %52) #3, !dbg !28
  br label %__nv_sqrtf.exit10, !dbg !28

88:                                               ; preds = %85
  %89 = tail call float @llvm.nvvm.sqrt.approx.f(float %52) #3, !dbg !28
  br label %__nv_sqrtf.exit10, !dbg !28

__nv_sqrtf.exit10:                                ; preds = %81, %83, %86, %88
  %.0.i8 = phi float [ %82, %81 ], [ %84, %83 ], [ %87, %86 ], [ %89, %88 ], !dbg !28
  %90 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i11 = icmp eq i32 %90, 0, !dbg !28
  %91 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i14 = icmp eq i32 %91, 0, !dbg !28
  br i1 %.not.i11, label %97, label %92, !dbg !28

92:                                               ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %95, label %93, !dbg !28

93:                                               ; preds = %92
  %94 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %53) #3, !dbg !28
  br label %__nv_sqrtf.exit15, !dbg !28

95:                                               ; preds = %92
  %96 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %53) #3, !dbg !28
  br label %__nv_sqrtf.exit15, !dbg !28

97:                                               ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %100, label %98, !dbg !28

98:                                               ; preds = %97
  %99 = tail call float @llvm.nvvm.sqrt.rn.f(float %53) #3, !dbg !28
  br label %__nv_sqrtf.exit15, !dbg !28

100:                                              ; preds = %97
  %101 = tail call float @llvm.nvvm.sqrt.approx.f(float %53) #3, !dbg !28
  br label %__nv_sqrtf.exit15, !dbg !28

__nv_sqrtf.exit15:                                ; preds = %93, %95, %98, %100
  %.0.i13 = phi float [ %94, %93 ], [ %96, %95 ], [ %99, %98 ], [ %101, %100 ], !dbg !28
  %102 = extractvalue { i32, i32, i32, i32 } %23, 3, !dbg !18
  %103 = bitcast i32 %102 to float, !dbg !18
  %104 = extractvalue { i32, i32 } %29, 1, !dbg !20
  %105 = bitcast i32 %104 to float, !dbg !20
  %106 = fsub float %103, %105, !dbg !29
  %107 = extractvalue { i32, i32, i32, i32 } %23, 2, !dbg !18
  %108 = bitcast i32 %107 to float, !dbg !18
  %109 = extractvalue { i32, i32 } %29, 0, !dbg !20
  %110 = bitcast i32 %109 to float, !dbg !20
  %111 = fsub float %108, %110, !dbg !29
  %112 = extractvalue { i32, i32, i32, i32 } %23, 1, !dbg !18
  %113 = bitcast i32 %112 to float, !dbg !18
  %114 = extractvalue { i32, i32 } %28, 1, !dbg !20
  %115 = bitcast i32 %114 to float, !dbg !20
  %116 = fsub float %113, %115, !dbg !29
  %117 = extractvalue { i32, i32, i32, i32 } %23, 0, !dbg !18
  %118 = bitcast i32 %117 to float, !dbg !18
  %119 = extractvalue { i32, i32 } %28, 0, !dbg !20
  %120 = bitcast i32 %119 to float, !dbg !20
  %121 = fsub float %118, %120, !dbg !29
  %122 = extractvalue { i32, i32 } %49, 1, !dbg !26
  %123 = bitcast i32 %122 to float, !dbg !26
  %124 = extractvalue { i32, i32 } %49, 0, !dbg !26
  %125 = bitcast i32 %124 to float, !dbg !26
  %126 = extractvalue { i32, i32 } %48, 1, !dbg !26
  %127 = bitcast i32 %126 to float, !dbg !26
  %128 = extractvalue { i32, i32 } %48, 0, !dbg !26
  %129 = bitcast i32 %128 to float, !dbg !26
  %130 = extractvalue { i32, i32 } %45, 1, !dbg !24
  %131 = bitcast i32 %130 to float, !dbg !24
  %132 = extractvalue { i32, i32 } %45, 0, !dbg !24
  %133 = bitcast i32 %132 to float, !dbg !24
  %134 = extractvalue { i32, i32 } %44, 1, !dbg !24
  %135 = bitcast i32 %134 to float, !dbg !24
  %136 = extractvalue { i32, i32 } %44, 0, !dbg !24
  %137 = bitcast i32 %136 to float, !dbg !24
  %138 = or disjoint i32 %14, 3, !dbg !13
  %139 = srem i32 %138, 38, !dbg !16
  %140 = or disjoint i32 %14, 1, !dbg !13
  %141 = srem i32 %140, 38, !dbg !16
  %142 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !30
  %143 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !30
  %144 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !30
  %145 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !30
  %146 = fmul float %121, %142, !dbg !31
  %147 = fmul float %116, %143, !dbg !31
  %148 = fmul float %111, %144, !dbg !31
  %149 = fmul float %106, %145, !dbg !31
  %150 = fmul float %146, %137, !dbg !32
  %151 = fmul float %147, %135, !dbg !32
  %152 = fmul float %148, %133, !dbg !32
  %153 = fmul float %149, %131, !dbg !32
  %154 = fadd float %150, %129, !dbg !33
  %155 = fadd float %151, %127, !dbg !33
  %156 = fadd float %152, %125, !dbg !33
  %157 = fadd float %153, %123, !dbg !33
  %158 = icmp slt i32 %.decomposed, 27, !dbg !34
  %159 = icmp slt i32 %141, 27, !dbg !34
  %160 = icmp slt i32 %.decomposed17, 27, !dbg !34
  %161 = icmp slt i32 %139, 27, !dbg !34
  %162 = mul nsw i32 %17, 27, !dbg !35
  %163 = mul nsw i32 %19, 27, !dbg !35
  %164 = add nsw i32 %162, %.decomposed, !dbg !36
  %165 = add nsw i32 %162, %141, !dbg !36
  %166 = add nsw i32 %163, %.decomposed17, !dbg !36
  %167 = add nsw i32 %163, %139, !dbg !36
  %168 = sext i32 %164 to i64, !dbg !37
  %169 = getelementptr float, ptr addrspace(1) %6, i64 %168, !dbg !37
  %170 = sext i32 %165 to i64, !dbg !37
  %171 = getelementptr float, ptr addrspace(1) %6, i64 %170, !dbg !37
  %172 = sext i32 %166 to i64, !dbg !37
  %173 = getelementptr float, ptr addrspace(1) %6, i64 %172, !dbg !37
  %174 = sext i32 %167 to i64, !dbg !37
  %175 = getelementptr float, ptr addrspace(1) %6, i64 %174, !dbg !37
  %176 = and i1 %16, %158, !dbg !38
  %177 = and i1 %159, %16, !dbg !38
  %178 = and i1 %160, %16, !dbg !38
  %179 = and i1 %161, %16, !dbg !38
  %180 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %169, i1 %176, i32 0, i1 %176) #3, !dbg !39
  %181 = bitcast i32 %180 to float, !dbg !39
  %182 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %171, i1 %177, i32 0, i1 %177) #3, !dbg !39
  %183 = bitcast i32 %182 to float, !dbg !39
  %184 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %173, i1 %178, i32 0, i1 %178) #3, !dbg !39
  %185 = bitcast i32 %184 to float, !dbg !39
  %186 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %175, i1 %179, i32 0, i1 %179) #3, !dbg !39
  %187 = bitcast i32 %186 to float, !dbg !39
  %188 = fadd float %154, %181, !dbg !40
  %189 = fadd float %155, %183, !dbg !40
  %190 = fadd float %156, %185, !dbg !40
  %191 = fadd float %157, %187, !dbg !40
  %192 = select i1 %158, float %188, float %154, !dbg !41
  %193 = select i1 %159, float %189, float %155, !dbg !41
  %194 = select i1 %160, float %190, float %156, !dbg !41
  %195 = select i1 %161, float %191, float %157, !dbg !41
  %196 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !42
  %197 = bitcast float %192 to i32, !dbg !43
  %198 = bitcast float %193 to i32, !dbg !43
  %199 = bitcast float %194 to i32, !dbg !43
  %200 = bitcast float %195 to i32, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %197, i32 %198, i32 %199, i32 %200, ptr addrspace(1) %196, i1 %16) #3, !dbg !43
  ret void, !dbg !44
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cerzk5loxolwlczds6gukegnimzezdul6fx3tksq2md3k4vzjdhd.py", directory: "inductor_cache/er")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_10, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_10, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_10", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_10", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 19, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 27, column: 30, scope: !7)
!18 = !DILocation(line: 27, column: 35, scope: !7)
!19 = !DILocation(line: 28, column: 30, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 29, column: 30, scope: !7)
!22 = !DILocation(line: 29, column: 35, scope: !7)
!23 = !DILocation(line: 30, column: 31, scope: !7)
!24 = !DILocation(line: 30, column: 36, scope: !7)
!25 = !DILocation(line: 31, column: 31, scope: !7)
!26 = !DILocation(line: 31, column: 36, scope: !7)
!27 = !DILocation(line: 34, column: 18, scope: !7)
!28 = !DILocation(line: 35, column: 26, scope: !7)
!29 = !DILocation(line: 32, column: 18, scope: !7)
!30 = !DILocation(line: 37, column: 18, scope: !7)
!31 = !DILocation(line: 40, column: 19, scope: !7)
!32 = !DILocation(line: 41, column: 20, scope: !7)
!33 = !DILocation(line: 42, column: 20, scope: !7)
!34 = !DILocation(line: 45, column: 20, scope: !7)
!35 = !DILocation(line: 46, column: 39, scope: !7)
!36 = !DILocation(line: 46, column: 36, scope: !7)
!37 = !DILocation(line: 46, column: 31, scope: !7)
!38 = !DILocation(line: 46, column: 52, scope: !7)
!39 = !DILocation(line: 46, column: 44, scope: !7)
!40 = !DILocation(line: 47, column: 20, scope: !7)
!41 = !DILocation(line: 0, scope: !7)
!42 = !DILocation(line: 51, column: 28, scope: !7)
!43 = !DILocation(line: 51, column: 40, scope: !7)
!44 = !DILocation(line: 51, column: 4, scope: !7)
