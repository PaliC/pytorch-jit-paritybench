; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused_add_div_exp_log_mean_mul_neg_sum_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %9 = and i32 %8, 31, !dbg !10
  %10 = lshr i32 %8, 5, !dbg !10
  %11 = and i32 %8, 3, !dbg !11
  %12 = shl nuw nsw i32 %11, 2, !dbg !12
  %13 = zext nneg i32 %12 to i64, !dbg !13
  %14 = getelementptr float, ptr addrspace(1) %1, i64 %13, !dbg !13
  %15 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %14, i1 true) #4, !dbg !14
  %16 = bitcast i32 %15 to float, !dbg !14
  %17 = getelementptr float, ptr addrspace(1) %2, i64 %13, !dbg !15
  %18 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %17, i1 true) #4, !dbg !16
  %19 = bitcast i32 %18 to float, !dbg !16
  %20 = zext nneg i32 %11 to i64, !dbg !17
  %21 = getelementptr float, ptr addrspace(1) %3, i64 %20, !dbg !17
  %22 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %21, i1 true) #4, !dbg !18
  %23 = bitcast i32 %22 to float, !dbg !18
  %24 = shl i32 %8, 2, !dbg !19
  %25 = and i32 %24, 252, !dbg !19
  %26 = zext nneg i32 %25 to i64, !dbg !20
  %27 = getelementptr float, ptr addrspace(1) %4, i64 %26, !dbg !20
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 true) #4, !dbg !21
  %29 = bitcast i32 %28 to float, !dbg !21
  %30 = or disjoint i32 %12, 1, !dbg !22
  %31 = zext nneg i32 %30 to i64, !dbg !23
  %32 = getelementptr float, ptr addrspace(1) %1, i64 %31, !dbg !23
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #4, !dbg !24
  %34 = bitcast i32 %33 to float, !dbg !24
  %35 = getelementptr float, ptr addrspace(1) %2, i64 %31, !dbg !25
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #4, !dbg !26
  %37 = bitcast i32 %36 to float, !dbg !26
  %38 = or disjoint i32 %25, 1, !dbg !27
  %39 = zext nneg i32 %38 to i64, !dbg !28
  %40 = getelementptr float, ptr addrspace(1) %4, i64 %39, !dbg !28
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 true) #4, !dbg !29
  %42 = bitcast i32 %41 to float, !dbg !29
  %43 = or disjoint i32 %12, 2, !dbg !30
  %44 = zext nneg i32 %43 to i64, !dbg !31
  %45 = getelementptr float, ptr addrspace(1) %1, i64 %44, !dbg !31
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 true) #4, !dbg !32
  %47 = bitcast i32 %46 to float, !dbg !32
  %48 = getelementptr float, ptr addrspace(1) %2, i64 %44, !dbg !33
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #4, !dbg !34
  %50 = bitcast i32 %49 to float, !dbg !34
  %51 = or disjoint i32 %25, 2, !dbg !35
  %52 = zext nneg i32 %51 to i64, !dbg !36
  %53 = getelementptr float, ptr addrspace(1) %4, i64 %52, !dbg !36
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 true) #4, !dbg !37
  %55 = bitcast i32 %54 to float, !dbg !37
  %56 = or disjoint i32 %12, 3, !dbg !38
  %57 = zext nneg i32 %56 to i64, !dbg !39
  %58 = getelementptr float, ptr addrspace(1) %1, i64 %57, !dbg !39
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 true) #4, !dbg !40
  %60 = bitcast i32 %59 to float, !dbg !40
  %61 = getelementptr float, ptr addrspace(1) %2, i64 %57, !dbg !41
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 true) #4, !dbg !42
  %63 = bitcast i32 %62 to float, !dbg !42
  %64 = or disjoint i32 %25, 3, !dbg !43
  %65 = zext nneg i32 %64 to i64, !dbg !44
  %66 = getelementptr float, ptr addrspace(1) %4, i64 %65, !dbg !44
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 true) #4, !dbg !45
  %68 = bitcast i32 %67 to float, !dbg !45
  %69 = getelementptr float, ptr addrspace(1) %1, i64 %20, !dbg !46
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 true) #4, !dbg !47
  %71 = bitcast i32 %70 to float, !dbg !47
  %72 = getelementptr float, ptr addrspace(1) %2, i64 %20, !dbg !48
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 true) #4, !dbg !49
  %74 = bitcast i32 %73 to float, !dbg !49
  %75 = getelementptr float, ptr addrspace(1) %5, i64 %20, !dbg !50
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 true) #4, !dbg !51
  %77 = bitcast i32 %76 to float, !dbg !51
  %78 = or disjoint i32 %11, 4, !dbg !52
  %79 = zext nneg i32 %78 to i64, !dbg !53
  %80 = getelementptr float, ptr addrspace(1) %1, i64 %79, !dbg !53
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %80, i1 true) #4, !dbg !54
  %82 = bitcast i32 %81 to float, !dbg !54
  %83 = getelementptr float, ptr addrspace(1) %2, i64 %79, !dbg !55
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %83, i1 true) #4, !dbg !56
  %85 = bitcast i32 %84 to float, !dbg !56
  %86 = or disjoint i32 %11, 8, !dbg !57
  %87 = zext nneg i32 %86 to i64, !dbg !58
  %88 = getelementptr float, ptr addrspace(1) %1, i64 %87, !dbg !58
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %88, i1 true) #4, !dbg !59
  %90 = bitcast i32 %89 to float, !dbg !59
  %91 = getelementptr float, ptr addrspace(1) %2, i64 %87, !dbg !60
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %91, i1 true) #4, !dbg !61
  %93 = bitcast i32 %92 to float, !dbg !61
  %94 = or disjoint i32 %11, 12, !dbg !62
  %95 = zext nneg i32 %94 to i64, !dbg !63
  %96 = getelementptr float, ptr addrspace(1) %1, i64 %95, !dbg !63
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 true) #4, !dbg !64
  %98 = bitcast i32 %97 to float, !dbg !64
  %99 = getelementptr float, ptr addrspace(1) %2, i64 %95, !dbg !65
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %99, i1 true) #4, !dbg !66
  %101 = bitcast i32 %100 to float, !dbg !66
  %102 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %16, float %19) #4, !dbg !67
  %103 = fmul float %102, 2.500000e-01, !dbg !68
  %104 = fmul float %103, 0x3FF7154760000000, !dbg !69
  %105 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %104) #4, !dbg !69
  %106 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %105, float %23) #4, !dbg !70
  %107 = fmul float %106, %29, !dbg !71
  %108 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %34, float %37) #4, !dbg !72
  %109 = fmul float %108, 2.500000e-01, !dbg !73
  %110 = fmul float %109, 0x3FF7154760000000, !dbg !74
  %111 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %110) #4, !dbg !74
  %112 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %111, float %23) #4, !dbg !75
  %113 = fmul float %112, %42, !dbg !76
  %114 = fadd float %107, %113, !dbg !77
  %115 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %47, float %50) #4, !dbg !78
  %116 = fmul float %115, 2.500000e-01, !dbg !79
  %117 = fmul float %116, 0x3FF7154760000000, !dbg !80
  %118 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %117) #4, !dbg !80
  %119 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %118, float %23) #4, !dbg !81
  %120 = fmul float %119, %55, !dbg !82
  %121 = fadd float %114, %120, !dbg !83
  %122 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %60, float %63) #4, !dbg !84
  %123 = fmul float %122, 2.500000e-01, !dbg !85
  %124 = fmul float %123, 0x3FF7154760000000, !dbg !86
  %125 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %124) #4, !dbg !86
  %126 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %125, float %23) #4, !dbg !87
  %127 = fmul float %126, %68, !dbg !88
  %128 = fadd float %121, %127, !dbg !89
  %129 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %71, float %74) #4, !dbg !90
  %130 = fmul float %129, 2.500000e-01, !dbg !91
  %131 = fmul float %130, 0x3FF7154760000000, !dbg !92
  %132 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %131) #4, !dbg !92
  %133 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %132, float %77) #4, !dbg !93
  %134 = fmul float %133, %29, !dbg !94
  %135 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %82, float %85) #4, !dbg !95
  %136 = fmul float %135, 2.500000e-01, !dbg !96
  %137 = fmul float %136, 0x3FF7154760000000, !dbg !97
  %138 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %137) #4, !dbg !97
  %139 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %138, float %77) #4, !dbg !98
  %140 = fmul float %139, %42, !dbg !99
  %141 = fadd float %134, %140, !dbg !100
  %142 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %90, float %93) #4, !dbg !101
  %143 = fmul float %142, 2.500000e-01, !dbg !102
  %144 = fmul float %143, 0x3FF7154760000000, !dbg !103
  %145 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %144) #4, !dbg !103
  %146 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %145, float %77) #4, !dbg !104
  %147 = fmul float %146, %55, !dbg !105
  %148 = fadd float %141, %147, !dbg !106
  %149 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %98, float %101) #4, !dbg !107
  %150 = fmul float %149, 2.500000e-01, !dbg !108
  %151 = fmul float %150, 0x3FF7154760000000, !dbg !109
  %152 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %151) #4, !dbg !109
  %153 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %152, float %77) #4, !dbg !110
  %154 = fmul float %153, %68, !dbg !111
  %155 = fadd float %148, %154, !dbg !112
  %156 = fcmp olt float %128, 0x3810000000000000, !dbg !113
  %157 = fmul float %128, 0x4160000000000000, !dbg !113
  %.02.i = select i1 %156, float %157, float %128, !dbg !113
  %i.i.0.i = select i1 %156, float -2.300000e+01, float 0.000000e+00, !dbg !113
  %158 = bitcast float %.02.i to i32, !dbg !113
  %159 = add i32 %158, -1059760811, !dbg !113
  %160 = and i32 %159, -8388608, !dbg !113
  %161 = sub i32 %158, %160, !dbg !113
  %162 = bitcast i32 %161 to float, !dbg !113
  %163 = sitofp i32 %160 to float, !dbg !113
  %164 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !113
  %.not.i = icmp eq i32 %164, 0, !dbg !113
  %165 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %163, float 0x3E80000000000000, float %i.i.0.i) #4, !dbg !113
  %166 = tail call float @llvm.nvvm.fma.rn.f(float %163, float 0x3E80000000000000, float %i.i.0.i) #4, !dbg !113
  %.08.i = select i1 %.not.i, float %166, float %165, !dbg !113
  %167 = fadd float %162, -1.000000e+00, !dbg !113
  %168 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !113
  %.not1.i = icmp eq i32 %168, 0, !dbg !113
  %169 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0xBFC0AA04E0000000, float %167, float 0x3FC2073EC0000000) #4, !dbg !113
  %170 = tail call float @llvm.nvvm.fma.rn.f(float 0xBFC0AA04E0000000, float %167, float 0x3FC2073EC0000000) #4, !dbg !113
  %.010.i = select i1 %.not1.i, float %170, float %169, !dbg !113
  %171 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !113
  %.not2.i = icmp eq i32 %171, 0, !dbg !113
  %172 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.010.i, float %167, float 0xBFBF19B980000000) #4, !dbg !113
  %173 = tail call float @llvm.nvvm.fma.rn.f(float %.010.i, float %167, float 0xBFBF19B980000000) #4, !dbg !113
  %.011.i = select i1 %.not2.i, float %173, float %172, !dbg !113
  %174 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !113
  %.not3.i = icmp eq i32 %174, 0, !dbg !113
  %175 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.011.i, float %167, float 0x3FC1E52AA0000000) #4, !dbg !113
  %176 = tail call float @llvm.nvvm.fma.rn.f(float %.011.i, float %167, float 0x3FC1E52AA0000000) #4, !dbg !113
  %.012.i = select i1 %.not3.i, float %176, float %175, !dbg !113
  %177 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !113
  %.not4.i = icmp eq i32 %177, 0, !dbg !113
  %178 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.012.i, float %167, float 0xBFC55B1720000000) #4, !dbg !113
  %179 = tail call float @llvm.nvvm.fma.rn.f(float %.012.i, float %167, float 0xBFC55B1720000000) #4, !dbg !113
  %.09.i = select i1 %.not4.i, float %179, float %178, !dbg !113
  %180 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !113
  %.not5.i = icmp eq i32 %180, 0, !dbg !113
  %181 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.09.i, float %167, float 0x3FC99DA160000000) #4, !dbg !113
  %182 = tail call float @llvm.nvvm.fma.rn.f(float %.09.i, float %167, float 0x3FC99DA160000000) #4, !dbg !113
  %.05.i = select i1 %.not5.i, float %182, float %181, !dbg !113
  %183 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !113
  %.not6.i = icmp eq i32 %183, 0, !dbg !113
  %184 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i, float %167, float 0xBFCFFFE440000000) #4, !dbg !113
  %185 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i, float %167, float 0xBFCFFFE440000000) #4, !dbg !113
  %.01.i = select i1 %.not6.i, float %185, float %184, !dbg !113
  %186 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !113
  %.not7.i = icmp eq i32 %186, 0, !dbg !113
  %187 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.01.i, float %167, float 0x3FD5554F00000000) #4, !dbg !113
  %188 = tail call float @llvm.nvvm.fma.rn.f(float %.01.i, float %167, float 0x3FD5554F00000000) #4, !dbg !113
  %.0.i = select i1 %.not7.i, float %188, float %187, !dbg !113
  %189 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !113
  %.not8.i = icmp eq i32 %189, 0, !dbg !113
  %190 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i, float %167, float -5.000000e-01) #4, !dbg !113
  %191 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i, float %167, float -5.000000e-01) #4, !dbg !113
  %.07.i = select i1 %.not8.i, float %191, float %190, !dbg !113
  %192 = fmul float %167, %.07.i, !dbg !113
  %193 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !113
  %.not9.i = icmp eq i32 %193, 0, !dbg !113
  %194 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %192, float %167, float %167) #4, !dbg !113
  %195 = tail call float @llvm.nvvm.fma.rn.f(float %192, float %167, float %167) #4, !dbg !113
  %.06.i = select i1 %.not9.i, float %195, float %194, !dbg !113
  %196 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !113
  %.not10.i = icmp eq i32 %196, 0, !dbg !113
  %197 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.08.i, float 0x3FE62E4300000000, float %.06.i) #4, !dbg !113
  %198 = tail call float @llvm.nvvm.fma.rn.f(float %.08.i, float 0x3FE62E4300000000, float %.06.i) #4, !dbg !113
  %.04.i = select i1 %.not10.i, float %198, float %197, !dbg !113
  %199 = icmp ugt i32 %158, 2139095039, !dbg !113
  br i1 %199, label %__nv_fmaf_rn.exit.i.i, label %__nv_logf.exit, !dbg !113

__nv_fmaf_rn.exit.i.i:                            ; preds = %7
  %200 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !113
  %.not11.i = icmp eq i32 %200, 0, !dbg !113
  %201 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i, float 0x7FF0000000000000, float 0x7FF0000000000000) #4, !dbg !113
  %202 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i, float 0x7FF0000000000000, float 0x7FF0000000000000) #4, !dbg !113
  %.03.i = select i1 %.not11.i, float %202, float %201, !dbg !113
  br label %__nv_logf.exit, !dbg !113

__nv_logf.exit:                                   ; preds = %7, %__nv_fmaf_rn.exit.i.i
  %r.i.0.i = phi float [ %.03.i, %__nv_fmaf_rn.exit.i.i ], [ %.04.i, %7 ], !dbg !113
  %203 = fcmp oeq float %.02.i, 0.000000e+00, !dbg !113
  %r.i.1.i = select i1 %203, float 0xFFF0000000000000, float %r.i.0.i, !dbg !113
  %204 = bitcast float %r.i.1.i to i32, !dbg !114
  %205 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %204, i32 16, i32 31), !dbg !114
  %206 = bitcast i32 %205 to float, !dbg !114
  %207 = fadd float %r.i.1.i, %206, !dbg !118
  %208 = bitcast float %207 to i32, !dbg !114
  %209 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %208, i32 8, i32 31), !dbg !114
  %210 = bitcast i32 %209 to float, !dbg !114
  %211 = fadd float %207, %210, !dbg !118
  %212 = bitcast float %211 to i32, !dbg !114
  %213 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %212, i32 4, i32 31), !dbg !114
  %214 = bitcast i32 %213 to float, !dbg !114
  %215 = fadd float %211, %214, !dbg !118
  %216 = bitcast float %215 to i32, !dbg !114
  %217 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %216, i32 2, i32 31), !dbg !114
  %218 = bitcast i32 %217 to float, !dbg !114
  %219 = fadd float %215, %218, !dbg !118
  %220 = bitcast float %219 to i32, !dbg !114
  %221 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %220, i32 1, i32 31), !dbg !114
  %222 = bitcast i32 %221 to float, !dbg !114
  %223 = fadd float %219, %222, !dbg !118
  %224 = icmp eq i32 %9, 0, !dbg !114
  %225 = and i32 %10, 1, !dbg !114
  %226 = zext nneg i32 %225 to i64, !dbg !114
  %227 = getelementptr float, ptr addrspace(3) @global_smem, i64 %226, !dbg !114
  %228 = bitcast float %223 to <1 x i32>, !dbg !114
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %227, <1 x i32> %228, i1 %224) #4, !dbg !114
  tail call void @llvm.nvvm.barrier0(), !dbg !114
  %229 = icmp slt i32 %8, 2, !dbg !114
  %230 = sext i32 %8 to i64, !dbg !114
  %231 = getelementptr float, ptr addrspace(3) @global_smem, i64 %230, !dbg !114
  %232 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %231, i1 %229) #4, !dbg !114
  %233 = bitcast i32 %232 to float, !dbg !114
  %234 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %232, i32 1, i32 31), !dbg !114
  %235 = bitcast i32 %234 to float, !dbg !114
  %236 = fadd float %233, %235, !dbg !118
  %237 = and i32 %8, 1, !dbg !114
  %238 = icmp eq i32 %237, 0, !dbg !114
  %239 = and i1 %229, %238, !dbg !114
  %240 = bitcast float %236 to <1 x i32>, !dbg !114
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %231, <1 x i32> %240, i1 %239) #4, !dbg !114
  tail call void @llvm.nvvm.barrier0(), !dbg !114
  %241 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !114
  %242 = fcmp olt float %155, 0x3810000000000000, !dbg !120
  %243 = fmul float %155, 0x4160000000000000, !dbg !120
  %.02.i1 = select i1 %242, float %243, float %155, !dbg !120
  %i.i.0.i2 = select i1 %242, float -2.300000e+01, float 0.000000e+00, !dbg !120
  %244 = bitcast float %.02.i1 to i32, !dbg !120
  %245 = add i32 %244, -1059760811, !dbg !120
  %246 = and i32 %245, -8388608, !dbg !120
  %247 = sub i32 %244, %246, !dbg !120
  %248 = bitcast i32 %247 to float, !dbg !120
  %249 = sitofp i32 %246 to float, !dbg !120
  %250 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !120
  %.not.i3 = icmp eq i32 %250, 0, !dbg !120
  %251 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %249, float 0x3E80000000000000, float %i.i.0.i2) #4, !dbg !120
  %252 = tail call float @llvm.nvvm.fma.rn.f(float %249, float 0x3E80000000000000, float %i.i.0.i2) #4, !dbg !120
  %.08.i4 = select i1 %.not.i3, float %252, float %251, !dbg !120
  %253 = fadd float %248, -1.000000e+00, !dbg !120
  %254 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !120
  %.not1.i5 = icmp eq i32 %254, 0, !dbg !120
  %255 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0xBFC0AA04E0000000, float %253, float 0x3FC2073EC0000000) #4, !dbg !120
  %256 = tail call float @llvm.nvvm.fma.rn.f(float 0xBFC0AA04E0000000, float %253, float 0x3FC2073EC0000000) #4, !dbg !120
  %.010.i6 = select i1 %.not1.i5, float %256, float %255, !dbg !120
  %257 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !120
  %.not2.i7 = icmp eq i32 %257, 0, !dbg !120
  %258 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.010.i6, float %253, float 0xBFBF19B980000000) #4, !dbg !120
  %259 = tail call float @llvm.nvvm.fma.rn.f(float %.010.i6, float %253, float 0xBFBF19B980000000) #4, !dbg !120
  %.011.i8 = select i1 %.not2.i7, float %259, float %258, !dbg !120
  %260 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !120
  %.not3.i9 = icmp eq i32 %260, 0, !dbg !120
  %261 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.011.i8, float %253, float 0x3FC1E52AA0000000) #4, !dbg !120
  %262 = tail call float @llvm.nvvm.fma.rn.f(float %.011.i8, float %253, float 0x3FC1E52AA0000000) #4, !dbg !120
  %.012.i10 = select i1 %.not3.i9, float %262, float %261, !dbg !120
  %263 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !120
  %.not4.i11 = icmp eq i32 %263, 0, !dbg !120
  %264 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.012.i10, float %253, float 0xBFC55B1720000000) #4, !dbg !120
  %265 = tail call float @llvm.nvvm.fma.rn.f(float %.012.i10, float %253, float 0xBFC55B1720000000) #4, !dbg !120
  %.09.i12 = select i1 %.not4.i11, float %265, float %264, !dbg !120
  %266 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !120
  %.not5.i13 = icmp eq i32 %266, 0, !dbg !120
  %267 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.09.i12, float %253, float 0x3FC99DA160000000) #4, !dbg !120
  %268 = tail call float @llvm.nvvm.fma.rn.f(float %.09.i12, float %253, float 0x3FC99DA160000000) #4, !dbg !120
  %.05.i14 = select i1 %.not5.i13, float %268, float %267, !dbg !120
  %269 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !120
  %.not6.i15 = icmp eq i32 %269, 0, !dbg !120
  %270 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i14, float %253, float 0xBFCFFFE440000000) #4, !dbg !120
  %271 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i14, float %253, float 0xBFCFFFE440000000) #4, !dbg !120
  %.01.i16 = select i1 %.not6.i15, float %271, float %270, !dbg !120
  %272 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !120
  %.not7.i17 = icmp eq i32 %272, 0, !dbg !120
  %273 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.01.i16, float %253, float 0x3FD5554F00000000) #4, !dbg !120
  %274 = tail call float @llvm.nvvm.fma.rn.f(float %.01.i16, float %253, float 0x3FD5554F00000000) #4, !dbg !120
  %.0.i18 = select i1 %.not7.i17, float %274, float %273, !dbg !120
  %275 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !120
  %.not8.i19 = icmp eq i32 %275, 0, !dbg !120
  %276 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i18, float %253, float -5.000000e-01) #4, !dbg !120
  %277 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i18, float %253, float -5.000000e-01) #4, !dbg !120
  %.07.i20 = select i1 %.not8.i19, float %277, float %276, !dbg !120
  %278 = fmul float %253, %.07.i20, !dbg !120
  %279 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !120
  %.not9.i21 = icmp eq i32 %279, 0, !dbg !120
  %280 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %278, float %253, float %253) #4, !dbg !120
  %281 = tail call float @llvm.nvvm.fma.rn.f(float %278, float %253, float %253) #4, !dbg !120
  %.06.i22 = select i1 %.not9.i21, float %281, float %280, !dbg !120
  %282 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !120
  %.not10.i23 = icmp eq i32 %282, 0, !dbg !120
  %283 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.08.i4, float 0x3FE62E4300000000, float %.06.i22) #4, !dbg !120
  %284 = tail call float @llvm.nvvm.fma.rn.f(float %.08.i4, float 0x3FE62E4300000000, float %.06.i22) #4, !dbg !120
  %.04.i24 = select i1 %.not10.i23, float %284, float %283, !dbg !120
  %285 = icmp ugt i32 %244, 2139095039, !dbg !120
  br i1 %285, label %__nv_fmaf_rn.exit.i.i27, label %__nv_logf.exit30, !dbg !120

__nv_fmaf_rn.exit.i.i27:                          ; preds = %__nv_logf.exit
  %286 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !120
  %.not11.i28 = icmp eq i32 %286, 0, !dbg !120
  %287 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i1, float 0x7FF0000000000000, float 0x7FF0000000000000) #4, !dbg !120
  %288 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i1, float 0x7FF0000000000000, float 0x7FF0000000000000) #4, !dbg !120
  %.03.i29 = select i1 %.not11.i28, float %288, float %287, !dbg !120
  br label %__nv_logf.exit30, !dbg !120

__nv_logf.exit30:                                 ; preds = %__nv_logf.exit, %__nv_fmaf_rn.exit.i.i27
  %r.i.0.i25 = phi float [ %.03.i29, %__nv_fmaf_rn.exit.i.i27 ], [ %.04.i24, %__nv_logf.exit ], !dbg !120
  %289 = fcmp oeq float %.02.i1, 0.000000e+00, !dbg !120
  %r.i.1.i26 = select i1 %289, float 0xFFF0000000000000, float %r.i.0.i25, !dbg !120
  tail call void @llvm.nvvm.barrier0(), !dbg !121
  %290 = bitcast float %r.i.1.i26 to i32, !dbg !121
  %291 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %290, i32 16, i32 31), !dbg !121
  %292 = bitcast i32 %291 to float, !dbg !121
  %293 = fadd float %r.i.1.i26, %292, !dbg !123
  %294 = bitcast float %293 to i32, !dbg !121
  %295 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %294, i32 8, i32 31), !dbg !121
  %296 = bitcast i32 %295 to float, !dbg !121
  %297 = fadd float %293, %296, !dbg !123
  %298 = bitcast float %297 to i32, !dbg !121
  %299 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %298, i32 4, i32 31), !dbg !121
  %300 = bitcast i32 %299 to float, !dbg !121
  %301 = fadd float %297, %300, !dbg !123
  %302 = bitcast float %301 to i32, !dbg !121
  %303 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %302, i32 2, i32 31), !dbg !121
  %304 = bitcast i32 %303 to float, !dbg !121
  %305 = fadd float %301, %304, !dbg !123
  %306 = bitcast float %305 to i32, !dbg !121
  %307 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %306, i32 1, i32 31), !dbg !121
  %308 = bitcast i32 %307 to float, !dbg !121
  %309 = fadd float %305, %308, !dbg !123
  %310 = bitcast float %309 to <1 x i32>, !dbg !121
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %227, <1 x i32> %310, i1 %224) #4, !dbg !121
  tail call void @llvm.nvvm.barrier0(), !dbg !121
  %311 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %231, i1 %229) #4, !dbg !121
  %312 = bitcast i32 %311 to float, !dbg !121
  %313 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %311, i32 1, i32 31), !dbg !121
  %314 = bitcast i32 %313 to float, !dbg !121
  %315 = fadd float %312, %314, !dbg !123
  %316 = bitcast float %315 to <1 x i32>, !dbg !121
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %231, <1 x i32> %316, i1 %239) #4, !dbg !121
  tail call void @llvm.nvvm.barrier0(), !dbg !121
  %317 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !121
  %318 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %241, float 6.400000e+01) #4, !dbg !124
  %319 = fsub float 0.000000e+00, %318, !dbg !125
  %320 = fmul float %319, 4.000000e+00, !dbg !126
  %321 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %317, float 6.400000e+01) #4, !dbg !127
  %322 = fsub float 0.000000e+00, %321, !dbg !128
  %323 = fmul float %322, 3.000000e+00, !dbg !129
  %324 = fsub float %320, %323, !dbg !130
  tail call void @llvm.nvvm.barrier0(), !dbg !131
  %urem = and i32 %8, 63, !dbg !132
  %325 = icmp eq i32 %urem, 0, !dbg !132
  %326 = bitcast float %324 to i32, !dbg !132
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %326, ptr addrspace(1) %0, i1 %325) #4, !dbg !132
  ret void, !dbg !133
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cns6l44m4yb6rxd7by256qxjeq7jhymqciz2lsaeid2tbrzehqsp.py", directory: "inductor_cache/ns")
!4 = !{ptr @triton_per_fused_add_div_exp_log_mean_mul_neg_sum_4, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_div_exp_log_mean_mul_neg_sum_4, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_div_exp_log_mean_mul_neg_sum_4", linkageName: "triton_per_fused_add_div_exp_log_mean_mul_neg_sum_4", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 26, column: 34, scope: !7)
!11 = !DILocation(line: 29, column: 19, scope: !7)
!12 = !DILocation(line: 31, column: 32, scope: !7)
!13 = !DILocation(line: 31, column: 30, scope: !7)
!14 = !DILocation(line: 31, column: 37, scope: !7)
!15 = !DILocation(line: 32, column: 30, scope: !7)
!16 = !DILocation(line: 32, column: 37, scope: !7)
!17 = !DILocation(line: 33, column: 30, scope: !7)
!18 = !DILocation(line: 33, column: 35, scope: !7)
!19 = !DILocation(line: 34, column: 32, scope: !7)
!20 = !DILocation(line: 34, column: 30, scope: !7)
!21 = !DILocation(line: 34, column: 37, scope: !7)
!22 = !DILocation(line: 35, column: 35, scope: !7)
!23 = !DILocation(line: 35, column: 31, scope: !7)
!24 = !DILocation(line: 35, column: 42, scope: !7)
!25 = !DILocation(line: 36, column: 31, scope: !7)
!26 = !DILocation(line: 36, column: 42, scope: !7)
!27 = !DILocation(line: 37, column: 35, scope: !7)
!28 = !DILocation(line: 37, column: 31, scope: !7)
!29 = !DILocation(line: 37, column: 42, scope: !7)
!30 = !DILocation(line: 38, column: 35, scope: !7)
!31 = !DILocation(line: 38, column: 31, scope: !7)
!32 = !DILocation(line: 38, column: 42, scope: !7)
!33 = !DILocation(line: 39, column: 31, scope: !7)
!34 = !DILocation(line: 39, column: 42, scope: !7)
!35 = !DILocation(line: 40, column: 35, scope: !7)
!36 = !DILocation(line: 40, column: 31, scope: !7)
!37 = !DILocation(line: 40, column: 42, scope: !7)
!38 = !DILocation(line: 41, column: 35, scope: !7)
!39 = !DILocation(line: 41, column: 31, scope: !7)
!40 = !DILocation(line: 41, column: 42, scope: !7)
!41 = !DILocation(line: 42, column: 31, scope: !7)
!42 = !DILocation(line: 42, column: 42, scope: !7)
!43 = !DILocation(line: 43, column: 35, scope: !7)
!44 = !DILocation(line: 43, column: 31, scope: !7)
!45 = !DILocation(line: 43, column: 42, scope: !7)
!46 = !DILocation(line: 44, column: 31, scope: !7)
!47 = !DILocation(line: 44, column: 36, scope: !7)
!48 = !DILocation(line: 45, column: 31, scope: !7)
!49 = !DILocation(line: 45, column: 36, scope: !7)
!50 = !DILocation(line: 46, column: 31, scope: !7)
!51 = !DILocation(line: 46, column: 36, scope: !7)
!52 = !DILocation(line: 47, column: 35, scope: !7)
!53 = !DILocation(line: 47, column: 31, scope: !7)
!54 = !DILocation(line: 47, column: 40, scope: !7)
!55 = !DILocation(line: 48, column: 31, scope: !7)
!56 = !DILocation(line: 48, column: 40, scope: !7)
!57 = !DILocation(line: 49, column: 35, scope: !7)
!58 = !DILocation(line: 49, column: 31, scope: !7)
!59 = !DILocation(line: 49, column: 40, scope: !7)
!60 = !DILocation(line: 50, column: 31, scope: !7)
!61 = !DILocation(line: 50, column: 40, scope: !7)
!62 = !DILocation(line: 51, column: 36, scope: !7)
!63 = !DILocation(line: 51, column: 31, scope: !7)
!64 = !DILocation(line: 51, column: 41, scope: !7)
!65 = !DILocation(line: 52, column: 31, scope: !7)
!66 = !DILocation(line: 52, column: 41, scope: !7)
!67 = !DILocation(line: 53, column: 18, scope: !7)
!68 = !DILocation(line: 55, column: 18, scope: !7)
!69 = !DILocation(line: 56, column: 23, scope: !7)
!70 = !DILocation(line: 57, column: 18, scope: !7)
!71 = !DILocation(line: 58, column: 18, scope: !7)
!72 = !DILocation(line: 59, column: 20, scope: !7)
!73 = !DILocation(line: 60, column: 20, scope: !7)
!74 = !DILocation(line: 61, column: 24, scope: !7)
!75 = !DILocation(line: 62, column: 20, scope: !7)
!76 = !DILocation(line: 63, column: 20, scope: !7)
!77 = !DILocation(line: 64, column: 19, scope: !7)
!78 = !DILocation(line: 65, column: 20, scope: !7)
!79 = !DILocation(line: 66, column: 20, scope: !7)
!80 = !DILocation(line: 67, column: 24, scope: !7)
!81 = !DILocation(line: 68, column: 20, scope: !7)
!82 = !DILocation(line: 69, column: 20, scope: !7)
!83 = !DILocation(line: 70, column: 20, scope: !7)
!84 = !DILocation(line: 71, column: 20, scope: !7)
!85 = !DILocation(line: 72, column: 20, scope: !7)
!86 = !DILocation(line: 73, column: 24, scope: !7)
!87 = !DILocation(line: 74, column: 20, scope: !7)
!88 = !DILocation(line: 75, column: 20, scope: !7)
!89 = !DILocation(line: 76, column: 20, scope: !7)
!90 = !DILocation(line: 77, column: 20, scope: !7)
!91 = !DILocation(line: 78, column: 20, scope: !7)
!92 = !DILocation(line: 79, column: 24, scope: !7)
!93 = !DILocation(line: 80, column: 20, scope: !7)
!94 = !DILocation(line: 81, column: 20, scope: !7)
!95 = !DILocation(line: 82, column: 20, scope: !7)
!96 = !DILocation(line: 83, column: 20, scope: !7)
!97 = !DILocation(line: 84, column: 24, scope: !7)
!98 = !DILocation(line: 85, column: 20, scope: !7)
!99 = !DILocation(line: 86, column: 20, scope: !7)
!100 = !DILocation(line: 87, column: 20, scope: !7)
!101 = !DILocation(line: 88, column: 20, scope: !7)
!102 = !DILocation(line: 89, column: 20, scope: !7)
!103 = !DILocation(line: 90, column: 24, scope: !7)
!104 = !DILocation(line: 91, column: 20, scope: !7)
!105 = !DILocation(line: 92, column: 20, scope: !7)
!106 = !DILocation(line: 93, column: 20, scope: !7)
!107 = !DILocation(line: 94, column: 20, scope: !7)
!108 = !DILocation(line: 95, column: 20, scope: !7)
!109 = !DILocation(line: 96, column: 24, scope: !7)
!110 = !DILocation(line: 97, column: 20, scope: !7)
!111 = !DILocation(line: 98, column: 20, scope: !7)
!112 = !DILocation(line: 99, column: 20, scope: !7)
!113 = !DILocation(line: 100, column: 24, scope: !7)
!114 = !DILocation(line: 267, column: 36, scope: !115, inlinedAt: !117)
!115 = distinct !DILexicalBlockFile(scope: !7, file: !116, discriminator: 0)
!116 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!117 = !DILocation(line: 102, column: 26, scope: !7)
!118 = !DILocation(line: 256, column: 15, scope: !119, inlinedAt: !117)
!119 = distinct !DILexicalBlockFile(scope: !115, file: !116, discriminator: 0)
!120 = !DILocation(line: 103, column: 24, scope: !7)
!121 = !DILocation(line: 267, column: 36, scope: !115, inlinedAt: !122)
!122 = !DILocation(line: 105, column: 26, scope: !7)
!123 = !DILocation(line: 256, column: 15, scope: !119, inlinedAt: !122)
!124 = !DILocation(line: 107, column: 20, scope: !7)
!125 = !DILocation(line: 108, column: 13, scope: !7)
!126 = !DILocation(line: 110, column: 20, scope: !7)
!127 = !DILocation(line: 111, column: 20, scope: !7)
!128 = !DILocation(line: 112, column: 13, scope: !7)
!129 = !DILocation(line: 114, column: 20, scope: !7)
!130 = !DILocation(line: 115, column: 20, scope: !7)
!131 = !DILocation(line: 116, column: 4, scope: !7)
!132 = !DILocation(line: 117, column: 71, scope: !7)
!133 = !DILocation(line: 117, column: 4, scope: !7)
