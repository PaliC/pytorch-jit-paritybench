; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_14(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %12 = shl i32 %11, 6, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = lshr i32 %13, 4, !dbg !12
  %15 = and i32 %14, 15, !dbg !12
  %16 = or disjoint i32 %15, 16, !dbg !12
  %17 = or disjoint i32 %15, 32, !dbg !12
  %18 = or disjoint i32 %15, 48, !dbg !12
  %19 = shl i32 %13, 2, !dbg !12
  %20 = and i32 %19, 60, !dbg !12
  %21 = or disjoint i32 %12, %15, !dbg !13
  %22 = or disjoint i32 %12, %16, !dbg !13
  %23 = or disjoint i32 %12, %17, !dbg !13
  %24 = or disjoint i32 %12, %18, !dbg !13
  %25 = icmp slt i32 %21, 256, !dbg !14
  %26 = icmp slt i32 %22, 256, !dbg !14
  %27 = icmp slt i32 %23, 256, !dbg !14
  %28 = icmp slt i32 %24, 256, !dbg !14
  %29 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %30 = shl i32 %29, 6, !dbg !16
  %31 = or disjoint i32 %30, %20, !dbg !17
  %32 = icmp slt i32 %31, 512, !dbg !18
  %33 = shl i32 %21, 9, !dbg !19
  %34 = shl i32 %22, 9, !dbg !19
  %35 = shl i32 %23, 9, !dbg !19
  %36 = shl i32 %24, 9, !dbg !19
  %37 = add i32 %31, %33, !dbg !20
  %38 = add i32 %31, %34, !dbg !20
  %39 = add i32 %31, %35, !dbg !20
  %40 = add i32 %31, %36, !dbg !20
  %41 = sext i32 %37 to i64, !dbg !21
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !21
  %43 = sext i32 %38 to i64, !dbg !21
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !21
  %45 = sext i32 %39 to i64, !dbg !21
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !21
  %47 = sext i32 %40 to i64, !dbg !21
  %48 = getelementptr float, ptr addrspace(1) %0, i64 %47, !dbg !21
  %49 = and i1 %25, %32, !dbg !22
  %50 = and i1 %26, %32, !dbg !22
  %51 = and i1 %27, %32, !dbg !22
  %52 = and i1 %28, %32, !dbg !22
  %53 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %42, i1 %49) #4, !dbg !23
  %54 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %44, i1 %50) #4, !dbg !23
  %55 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %46, i1 %51) #4, !dbg !23
  %56 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %48, i1 %52) #4, !dbg !23
  %57 = sext i32 %31 to i64, !dbg !24
  %58 = getelementptr float, ptr addrspace(1) %1, i64 %57, !dbg !24
  %59 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %58, i1 %32) #4, !dbg !25
  %60 = getelementptr float, ptr addrspace(1) %2, i64 %41, !dbg !26
  %61 = getelementptr float, ptr addrspace(1) %2, i64 %43, !dbg !26
  %62 = getelementptr float, ptr addrspace(1) %2, i64 %45, !dbg !26
  %63 = getelementptr float, ptr addrspace(1) %2, i64 %47, !dbg !26
  %64 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %60, i1 %49) #4, !dbg !27
  %65 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %61, i1 %50) #4, !dbg !27
  %66 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %62, i1 %51) #4, !dbg !27
  %67 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %63, i1 %52) #4, !dbg !27
  %68 = getelementptr float, ptr addrspace(1) %3, i64 %57, !dbg !28
  %69 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %68, i1 %32) #4, !dbg !29
  %70 = getelementptr float, ptr addrspace(1) %4, i64 %57, !dbg !30
  %71 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %70, i1 %32) #4, !dbg !31
  %72 = extractvalue { i32, i32, i32, i32 } %71, 0, !dbg !31
  %73 = extractvalue { i32, i32, i32, i32 } %71, 1, !dbg !31
  %74 = extractvalue { i32, i32, i32, i32 } %71, 2, !dbg !31
  %75 = extractvalue { i32, i32, i32, i32 } %71, 3, !dbg !31
  %76 = bitcast i32 %72 to float, !dbg !31
  %77 = bitcast i32 %73 to float, !dbg !31
  %78 = bitcast i32 %74 to float, !dbg !31
  %79 = bitcast i32 %75 to float, !dbg !31
  %80 = getelementptr float, ptr addrspace(1) %5, i64 %57, !dbg !32
  %81 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %80, i1 %32) #4, !dbg !33
  %82 = getelementptr float, ptr addrspace(1) %6, i64 %57, !dbg !34
  %83 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %82, i1 %32) #4, !dbg !35
  %84 = fadd float %76, 0x3EE4F8B580000000, !dbg !36
  %85 = fadd float %77, 0x3EE4F8B580000000, !dbg !36
  %86 = fadd float %78, 0x3EE4F8B580000000, !dbg !36
  %87 = fadd float %79, 0x3EE4F8B580000000, !dbg !36
  %88 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !37
  %.not.i = icmp eq i32 %88, 0, !dbg !37
  %89 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !37
  %.not1.i = icmp eq i32 %89, 0, !dbg !37
  br i1 %.not.i, label %95, label %90, !dbg !37

90:                                               ; preds = %10
  br i1 %.not1.i, label %93, label %91, !dbg !37

91:                                               ; preds = %90
  %92 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %84) #4, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

93:                                               ; preds = %90
  %94 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %84) #4, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

95:                                               ; preds = %10
  br i1 %.not1.i, label %98, label %96, !dbg !37

96:                                               ; preds = %95
  %97 = tail call float @llvm.nvvm.sqrt.rn.f(float %84) #4, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

98:                                               ; preds = %95
  %99 = tail call float @llvm.nvvm.sqrt.approx.f(float %84) #4, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

__nv_sqrtf.exit:                                  ; preds = %91, %93, %96, %98
  %.0.i = phi float [ %92, %91 ], [ %94, %93 ], [ %97, %96 ], [ %99, %98 ], !dbg !37
  %100 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !37
  %.not.i31 = icmp eq i32 %100, 0, !dbg !37
  %101 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !37
  %.not1.i34 = icmp eq i32 %101, 0, !dbg !37
  br i1 %.not.i31, label %107, label %102, !dbg !37

102:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i34, label %105, label %103, !dbg !37

103:                                              ; preds = %102
  %104 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %85) #4, !dbg !37
  br label %__nv_sqrtf.exit35, !dbg !37

105:                                              ; preds = %102
  %106 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %85) #4, !dbg !37
  br label %__nv_sqrtf.exit35, !dbg !37

107:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i34, label %110, label %108, !dbg !37

108:                                              ; preds = %107
  %109 = tail call float @llvm.nvvm.sqrt.rn.f(float %85) #4, !dbg !37
  br label %__nv_sqrtf.exit35, !dbg !37

110:                                              ; preds = %107
  %111 = tail call float @llvm.nvvm.sqrt.approx.f(float %85) #4, !dbg !37
  br label %__nv_sqrtf.exit35, !dbg !37

__nv_sqrtf.exit35:                                ; preds = %103, %105, %108, %110
  %.0.i33 = phi float [ %104, %103 ], [ %106, %105 ], [ %109, %108 ], [ %111, %110 ], !dbg !37
  %112 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !37
  %.not.i36 = icmp eq i32 %112, 0, !dbg !37
  %113 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !37
  %.not1.i39 = icmp eq i32 %113, 0, !dbg !37
  br i1 %.not.i36, label %119, label %114, !dbg !37

114:                                              ; preds = %__nv_sqrtf.exit35
  br i1 %.not1.i39, label %117, label %115, !dbg !37

115:                                              ; preds = %114
  %116 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %86) #4, !dbg !37
  br label %__nv_sqrtf.exit40, !dbg !37

117:                                              ; preds = %114
  %118 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %86) #4, !dbg !37
  br label %__nv_sqrtf.exit40, !dbg !37

119:                                              ; preds = %__nv_sqrtf.exit35
  br i1 %.not1.i39, label %122, label %120, !dbg !37

120:                                              ; preds = %119
  %121 = tail call float @llvm.nvvm.sqrt.rn.f(float %86) #4, !dbg !37
  br label %__nv_sqrtf.exit40, !dbg !37

122:                                              ; preds = %119
  %123 = tail call float @llvm.nvvm.sqrt.approx.f(float %86) #4, !dbg !37
  br label %__nv_sqrtf.exit40, !dbg !37

__nv_sqrtf.exit40:                                ; preds = %115, %117, %120, %122
  %.0.i38 = phi float [ %116, %115 ], [ %118, %117 ], [ %121, %120 ], [ %123, %122 ], !dbg !37
  %124 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !37
  %.not.i41 = icmp eq i32 %124, 0, !dbg !37
  %125 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !37
  %.not1.i44 = icmp eq i32 %125, 0, !dbg !37
  br i1 %.not.i41, label %131, label %126, !dbg !37

126:                                              ; preds = %__nv_sqrtf.exit40
  br i1 %.not1.i44, label %129, label %127, !dbg !37

127:                                              ; preds = %126
  %128 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %87) #4, !dbg !37
  br label %__nv_sqrtf.exit45, !dbg !37

129:                                              ; preds = %126
  %130 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %87) #4, !dbg !37
  br label %__nv_sqrtf.exit45, !dbg !37

131:                                              ; preds = %__nv_sqrtf.exit40
  br i1 %.not1.i44, label %134, label %132, !dbg !37

132:                                              ; preds = %131
  %133 = tail call float @llvm.nvvm.sqrt.rn.f(float %87) #4, !dbg !37
  br label %__nv_sqrtf.exit45, !dbg !37

134:                                              ; preds = %131
  %135 = tail call float @llvm.nvvm.sqrt.approx.f(float %87) #4, !dbg !37
  br label %__nv_sqrtf.exit45, !dbg !37

__nv_sqrtf.exit45:                                ; preds = %127, %129, %132, %134
  %.0.i43 = phi float [ %128, %127 ], [ %130, %129 ], [ %133, %132 ], [ %135, %134 ], !dbg !37
  %136 = extractvalue { i32, i32, i32, i32 } %56, 3, !dbg !23
  %137 = bitcast i32 %136 to float, !dbg !23
  %138 = extractvalue { i32, i32, i32, i32 } %59, 3, !dbg !25
  %139 = bitcast i32 %138 to float, !dbg !25
  %140 = fadd float %137, %139, !dbg !38
  %141 = extractvalue { i32, i32, i32, i32 } %69, 3, !dbg !29
  %142 = bitcast i32 %141 to float, !dbg !29
  %143 = fsub float %140, %142, !dbg !39
  %144 = extractvalue { i32, i32, i32, i32 } %56, 2, !dbg !23
  %145 = bitcast i32 %144 to float, !dbg !23
  %146 = extractvalue { i32, i32, i32, i32 } %59, 2, !dbg !25
  %147 = bitcast i32 %146 to float, !dbg !25
  %148 = fadd float %145, %147, !dbg !38
  %149 = extractvalue { i32, i32, i32, i32 } %69, 2, !dbg !29
  %150 = bitcast i32 %149 to float, !dbg !29
  %151 = fsub float %148, %150, !dbg !39
  %152 = extractvalue { i32, i32, i32, i32 } %56, 1, !dbg !23
  %153 = bitcast i32 %152 to float, !dbg !23
  %154 = extractvalue { i32, i32, i32, i32 } %59, 1, !dbg !25
  %155 = bitcast i32 %154 to float, !dbg !25
  %156 = fadd float %153, %155, !dbg !38
  %157 = extractvalue { i32, i32, i32, i32 } %69, 1, !dbg !29
  %158 = bitcast i32 %157 to float, !dbg !29
  %159 = fsub float %156, %158, !dbg !39
  %160 = extractvalue { i32, i32, i32, i32 } %56, 0, !dbg !23
  %161 = bitcast i32 %160 to float, !dbg !23
  %162 = extractvalue { i32, i32, i32, i32 } %59, 0, !dbg !25
  %163 = bitcast i32 %162 to float, !dbg !25
  %164 = fadd float %161, %163, !dbg !38
  %165 = extractvalue { i32, i32, i32, i32 } %69, 0, !dbg !29
  %166 = bitcast i32 %165 to float, !dbg !29
  %167 = fsub float %164, %166, !dbg !39
  %168 = extractvalue { i32, i32, i32, i32 } %55, 3, !dbg !23
  %169 = bitcast i32 %168 to float, !dbg !23
  %170 = fadd float %169, %139, !dbg !38
  %171 = fsub float %170, %142, !dbg !39
  %172 = extractvalue { i32, i32, i32, i32 } %55, 2, !dbg !23
  %173 = bitcast i32 %172 to float, !dbg !23
  %174 = fadd float %173, %147, !dbg !38
  %175 = fsub float %174, %150, !dbg !39
  %176 = extractvalue { i32, i32, i32, i32 } %55, 1, !dbg !23
  %177 = bitcast i32 %176 to float, !dbg !23
  %178 = fadd float %177, %155, !dbg !38
  %179 = fsub float %178, %158, !dbg !39
  %180 = extractvalue { i32, i32, i32, i32 } %55, 0, !dbg !23
  %181 = bitcast i32 %180 to float, !dbg !23
  %182 = fadd float %181, %163, !dbg !38
  %183 = fsub float %182, %166, !dbg !39
  %184 = extractvalue { i32, i32, i32, i32 } %54, 3, !dbg !23
  %185 = bitcast i32 %184 to float, !dbg !23
  %186 = fadd float %185, %139, !dbg !38
  %187 = fsub float %186, %142, !dbg !39
  %188 = extractvalue { i32, i32, i32, i32 } %54, 2, !dbg !23
  %189 = bitcast i32 %188 to float, !dbg !23
  %190 = fadd float %189, %147, !dbg !38
  %191 = fsub float %190, %150, !dbg !39
  %192 = extractvalue { i32, i32, i32, i32 } %54, 1, !dbg !23
  %193 = bitcast i32 %192 to float, !dbg !23
  %194 = fadd float %193, %155, !dbg !38
  %195 = fsub float %194, %158, !dbg !39
  %196 = extractvalue { i32, i32, i32, i32 } %54, 0, !dbg !23
  %197 = bitcast i32 %196 to float, !dbg !23
  %198 = fadd float %197, %163, !dbg !38
  %199 = fsub float %198, %166, !dbg !39
  %200 = extractvalue { i32, i32, i32, i32 } %53, 3, !dbg !23
  %201 = bitcast i32 %200 to float, !dbg !23
  %202 = fadd float %201, %139, !dbg !38
  %203 = fsub float %202, %142, !dbg !39
  %204 = extractvalue { i32, i32, i32, i32 } %53, 2, !dbg !23
  %205 = bitcast i32 %204 to float, !dbg !23
  %206 = fadd float %205, %147, !dbg !38
  %207 = fsub float %206, %150, !dbg !39
  %208 = extractvalue { i32, i32, i32, i32 } %53, 1, !dbg !23
  %209 = bitcast i32 %208 to float, !dbg !23
  %210 = fadd float %209, %155, !dbg !38
  %211 = fsub float %210, %158, !dbg !39
  %212 = extractvalue { i32, i32, i32, i32 } %53, 0, !dbg !23
  %213 = bitcast i32 %212 to float, !dbg !23
  %214 = fadd float %213, %163, !dbg !38
  %215 = fsub float %214, %166, !dbg !39
  %216 = extractvalue { i32, i32, i32, i32 } %83, 3, !dbg !35
  %217 = bitcast i32 %216 to float, !dbg !35
  %218 = extractvalue { i32, i32, i32, i32 } %83, 2, !dbg !35
  %219 = bitcast i32 %218 to float, !dbg !35
  %220 = extractvalue { i32, i32, i32, i32 } %83, 1, !dbg !35
  %221 = bitcast i32 %220 to float, !dbg !35
  %222 = extractvalue { i32, i32, i32, i32 } %83, 0, !dbg !35
  %223 = bitcast i32 %222 to float, !dbg !35
  %224 = extractvalue { i32, i32, i32, i32 } %81, 3, !dbg !33
  %225 = bitcast i32 %224 to float, !dbg !33
  %226 = extractvalue { i32, i32, i32, i32 } %81, 2, !dbg !33
  %227 = bitcast i32 %226 to float, !dbg !33
  %228 = extractvalue { i32, i32, i32, i32 } %81, 1, !dbg !33
  %229 = bitcast i32 %228 to float, !dbg !33
  %230 = extractvalue { i32, i32, i32, i32 } %81, 0, !dbg !33
  %231 = bitcast i32 %230 to float, !dbg !33
  %232 = extractvalue { i32, i32, i32, i32 } %67, 3, !dbg !27
  %233 = bitcast i32 %232 to float, !dbg !27
  %234 = extractvalue { i32, i32, i32, i32 } %67, 2, !dbg !27
  %235 = bitcast i32 %234 to float, !dbg !27
  %236 = extractvalue { i32, i32, i32, i32 } %67, 1, !dbg !27
  %237 = bitcast i32 %236 to float, !dbg !27
  %238 = extractvalue { i32, i32, i32, i32 } %67, 0, !dbg !27
  %239 = bitcast i32 %238 to float, !dbg !27
  %240 = extractvalue { i32, i32, i32, i32 } %66, 3, !dbg !27
  %241 = bitcast i32 %240 to float, !dbg !27
  %242 = extractvalue { i32, i32, i32, i32 } %66, 2, !dbg !27
  %243 = bitcast i32 %242 to float, !dbg !27
  %244 = extractvalue { i32, i32, i32, i32 } %66, 1, !dbg !27
  %245 = bitcast i32 %244 to float, !dbg !27
  %246 = extractvalue { i32, i32, i32, i32 } %66, 0, !dbg !27
  %247 = bitcast i32 %246 to float, !dbg !27
  %248 = extractvalue { i32, i32, i32, i32 } %65, 3, !dbg !27
  %249 = bitcast i32 %248 to float, !dbg !27
  %250 = extractvalue { i32, i32, i32, i32 } %65, 2, !dbg !27
  %251 = bitcast i32 %250 to float, !dbg !27
  %252 = extractvalue { i32, i32, i32, i32 } %65, 1, !dbg !27
  %253 = bitcast i32 %252 to float, !dbg !27
  %254 = extractvalue { i32, i32, i32, i32 } %65, 0, !dbg !27
  %255 = bitcast i32 %254 to float, !dbg !27
  %256 = extractvalue { i32, i32, i32, i32 } %64, 3, !dbg !27
  %257 = bitcast i32 %256 to float, !dbg !27
  %258 = extractvalue { i32, i32, i32, i32 } %64, 2, !dbg !27
  %259 = bitcast i32 %258 to float, !dbg !27
  %260 = extractvalue { i32, i32, i32, i32 } %64, 1, !dbg !27
  %261 = bitcast i32 %260 to float, !dbg !27
  %262 = extractvalue { i32, i32, i32, i32 } %64, 0, !dbg !27
  %263 = bitcast i32 %262 to float, !dbg !27
  %264 = or disjoint i32 %30, %18, !dbg !17
  %265 = icmp slt i32 %264, 512, !dbg !18
  %266 = or disjoint i32 %12, %20, !dbg !13
  %267 = icmp slt i32 %266, 256, !dbg !14
  %268 = and i1 %267, %265, !dbg !22
  %269 = or disjoint i32 %30, %17, !dbg !17
  %270 = icmp slt i32 %269, 512, !dbg !18
  %271 = and i1 %267, %270, !dbg !22
  %272 = or disjoint i32 %30, %16, !dbg !17
  %273 = icmp slt i32 %272, 512, !dbg !18
  %274 = and i1 %267, %273, !dbg !22
  %275 = or disjoint i32 %30, %15, !dbg !17
  %276 = icmp slt i32 %275, 512, !dbg !18
  %277 = and i1 %267, %276, !dbg !22
  %.frozen = freeze i32 %266, !dbg !40
  %278 = sdiv i32 %.frozen, 64, !dbg !40
  %279 = mul i32 %278, 64, !dbg !41
  %.decomposed = sub i32 %.frozen, %279, !dbg !41
  %280 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !42
  %281 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #4, !dbg !42
  %282 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i38) #4, !dbg !42
  %283 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i43) #4, !dbg !42
  %284 = fmul float %215, %280, !dbg !43
  %285 = fmul float %211, %281, !dbg !43
  %286 = fmul float %207, %282, !dbg !43
  %287 = fmul float %203, %283, !dbg !43
  %288 = fmul float %199, %280, !dbg !43
  %289 = fmul float %195, %281, !dbg !43
  %290 = fmul float %191, %282, !dbg !43
  %291 = fmul float %187, %283, !dbg !43
  %292 = fmul float %183, %280, !dbg !43
  %293 = fmul float %179, %281, !dbg !43
  %294 = fmul float %175, %282, !dbg !43
  %295 = fmul float %171, %283, !dbg !43
  %296 = fmul float %167, %280, !dbg !43
  %297 = fmul float %159, %281, !dbg !43
  %298 = fmul float %151, %282, !dbg !43
  %299 = fmul float %143, %283, !dbg !43
  %300 = fmul float %284, %231, !dbg !44
  %301 = fmul float %285, %229, !dbg !44
  %302 = fmul float %286, %227, !dbg !44
  %303 = fmul float %287, %225, !dbg !44
  %304 = fmul float %288, %231, !dbg !44
  %305 = fmul float %289, %229, !dbg !44
  %306 = fmul float %290, %227, !dbg !44
  %307 = fmul float %291, %225, !dbg !44
  %308 = fmul float %292, %231, !dbg !44
  %309 = fmul float %293, %229, !dbg !44
  %310 = fmul float %294, %227, !dbg !44
  %311 = fmul float %295, %225, !dbg !44
  %312 = fmul float %296, %231, !dbg !44
  %313 = fmul float %297, %229, !dbg !44
  %314 = fmul float %298, %227, !dbg !44
  %315 = fmul float %299, %225, !dbg !44
  %316 = fadd float %300, %223, !dbg !45
  %317 = fadd float %301, %221, !dbg !45
  %318 = fadd float %302, %219, !dbg !45
  %319 = fadd float %303, %217, !dbg !45
  %320 = fadd float %304, %223, !dbg !45
  %321 = fadd float %305, %221, !dbg !45
  %322 = fadd float %306, %219, !dbg !45
  %323 = fadd float %307, %217, !dbg !45
  %324 = fadd float %308, %223, !dbg !45
  %325 = fadd float %309, %221, !dbg !45
  %326 = fadd float %310, %219, !dbg !45
  %327 = fadd float %311, %217, !dbg !45
  %328 = fadd float %312, %223, !dbg !45
  %329 = fadd float %313, %221, !dbg !45
  %330 = fadd float %314, %219, !dbg !45
  %331 = fadd float %315, %217, !dbg !45
  %332 = fadd float %316, %263, !dbg !46
  %333 = fadd float %317, %261, !dbg !46
  %334 = fadd float %318, %259, !dbg !46
  %335 = fadd float %319, %257, !dbg !46
  %336 = fadd float %320, %255, !dbg !46
  %337 = fadd float %321, %253, !dbg !46
  %338 = fadd float %322, %251, !dbg !46
  %339 = fadd float %323, %249, !dbg !46
  %340 = fadd float %324, %247, !dbg !46
  %341 = fadd float %325, %245, !dbg !46
  %342 = fadd float %326, %243, !dbg !46
  %343 = fadd float %327, %241, !dbg !46
  %344 = fadd float %328, %239, !dbg !46
  %345 = fadd float %329, %237, !dbg !46
  %346 = fadd float %330, %235, !dbg !46
  %347 = fadd float %331, %233, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %348 = bitcast float %214 to i32, !dbg !48
  %349 = bitcast float %210 to i32, !dbg !48
  %350 = bitcast float %206 to i32, !dbg !48
  %351 = bitcast float %202 to i32, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %348, i32 %349, i32 %350, i32 %351, ptr addrspace(1) %42, i1 %49) #4, !dbg !48
  %352 = bitcast float %198 to i32, !dbg !48
  %353 = bitcast float %194 to i32, !dbg !48
  %354 = bitcast float %190 to i32, !dbg !48
  %355 = bitcast float %186 to i32, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %352, i32 %353, i32 %354, i32 %355, ptr addrspace(1) %44, i1 %50) #4, !dbg !48
  %356 = bitcast float %182 to i32, !dbg !48
  %357 = bitcast float %178 to i32, !dbg !48
  %358 = bitcast float %174 to i32, !dbg !48
  %359 = bitcast float %170 to i32, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %356, i32 %357, i32 %358, i32 %359, ptr addrspace(1) %46, i1 %51) #4, !dbg !48
  %360 = bitcast float %164 to i32, !dbg !48
  %361 = bitcast float %156 to i32, !dbg !48
  %362 = bitcast float %148 to i32, !dbg !48
  %363 = bitcast float %140 to i32, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %360, i32 %361, i32 %362, i32 %363, ptr addrspace(1) %48, i1 %52) #4, !dbg !48
  %364 = shl i32 %275, 6, !dbg !49
  %365 = shl i32 %272, 6, !dbg !49
  %366 = shl i32 %269, 6, !dbg !49
  %367 = shl i32 %264, 6, !dbg !49
  %368 = shl i32 %278, 15, !dbg !50
  %369 = add i32 %368, %.decomposed, !dbg !51
  %370 = add i32 %369, %364, !dbg !52
  %371 = add i32 %369, %365, !dbg !52
  %372 = add i32 %369, %366, !dbg !52
  %373 = add i32 %369, %367, !dbg !52
  %374 = sext i32 %370 to i64, !dbg !53
  %375 = getelementptr float, ptr addrspace(1) %7, i64 %374, !dbg !53
  %376 = sext i32 %371 to i64, !dbg !53
  %377 = getelementptr float, ptr addrspace(1) %7, i64 %376, !dbg !53
  %378 = sext i32 %372 to i64, !dbg !53
  %379 = getelementptr float, ptr addrspace(1) %7, i64 %378, !dbg !53
  %380 = sext i32 %373 to i64, !dbg !53
  %381 = getelementptr float, ptr addrspace(1) %7, i64 %380, !dbg !53
  %382 = shl i32 %13, 8, !dbg !54
  %383 = and i32 %382, 3840, !dbg !54
  %384 = or disjoint i32 %383, %15, !dbg !54
  %385 = and i32 %19, 1020, !dbg !54
  %386 = lshr exact i32 %383, 2, !dbg !54
  %387 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %386, !dbg !54
  %388 = getelementptr float, ptr addrspace(3) %387, i32 %384, !dbg !54
  %389 = bitcast float %332 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %388, <1 x i32> %389, i1 true) #4, !dbg !54
  %390 = or disjoint i32 %384, 64, !dbg !54
  %391 = lshr i32 %390, 4, !dbg !54
  %392 = getelementptr float, ptr addrspace(3) @global_smem, i32 %391, !dbg !54
  %393 = getelementptr float, ptr addrspace(3) %392, i32 %390, !dbg !54
  %394 = bitcast float %333 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %393, <1 x i32> %394, i1 true) #4, !dbg !54
  %395 = or disjoint i32 %384, 128, !dbg !54
  %396 = lshr i32 %395, 4, !dbg !54
  %397 = getelementptr float, ptr addrspace(3) @global_smem, i32 %396, !dbg !54
  %398 = getelementptr float, ptr addrspace(3) %397, i32 %395, !dbg !54
  %399 = bitcast float %334 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %398, <1 x i32> %399, i1 true) #4, !dbg !54
  %400 = or disjoint i32 %384, 192, !dbg !54
  %401 = lshr i32 %400, 4, !dbg !54
  %402 = getelementptr float, ptr addrspace(3) @global_smem, i32 %401, !dbg !54
  %403 = getelementptr float, ptr addrspace(3) %402, i32 %400, !dbg !54
  %404 = bitcast float %335 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %403, <1 x i32> %404, i1 true) #4, !dbg !54
  %405 = or disjoint i32 %384, 16, !dbg !54
  %406 = getelementptr float, ptr addrspace(3) %387, i32 %405, !dbg !54
  %407 = bitcast float %336 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %406, <1 x i32> %407, i1 true) #4, !dbg !54
  %408 = or disjoint i32 %384, 80, !dbg !54
  %409 = lshr i32 %408, 4, !dbg !54
  %410 = and i32 %409, 244, !dbg !54
  %411 = getelementptr float, ptr addrspace(3) @global_smem, i32 %410, !dbg !54
  %412 = getelementptr float, ptr addrspace(3) %411, i32 %408, !dbg !54
  %413 = bitcast float %337 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %412, <1 x i32> %413, i1 true) #4, !dbg !54
  %414 = or disjoint i32 %384, 144, !dbg !54
  %415 = lshr i32 %414, 4, !dbg !54
  %416 = and i32 %415, 248, !dbg !54
  %417 = getelementptr float, ptr addrspace(3) @global_smem, i32 %416, !dbg !54
  %418 = getelementptr float, ptr addrspace(3) %417, i32 %414, !dbg !54
  %419 = bitcast float %338 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %418, <1 x i32> %419, i1 true) #4, !dbg !54
  %420 = or disjoint i32 %384, 208, !dbg !54
  %421 = lshr i32 %420, 4, !dbg !54
  %422 = and i32 %421, 252, !dbg !54
  %423 = getelementptr float, ptr addrspace(3) @global_smem, i32 %422, !dbg !54
  %424 = getelementptr float, ptr addrspace(3) %423, i32 %420, !dbg !54
  %425 = bitcast float %339 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %424, <1 x i32> %425, i1 true) #4, !dbg !54
  %426 = or disjoint i32 %384, 32, !dbg !54
  %427 = getelementptr float, ptr addrspace(3) %387, i32 %426, !dbg !54
  %428 = bitcast float %340 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %427, <1 x i32> %428, i1 true) #4, !dbg !54
  %429 = or disjoint i32 %384, 96, !dbg !54
  %430 = lshr i32 %429, 4, !dbg !54
  %431 = and i32 %430, 244, !dbg !54
  %432 = getelementptr float, ptr addrspace(3) @global_smem, i32 %431, !dbg !54
  %433 = getelementptr float, ptr addrspace(3) %432, i32 %429, !dbg !54
  %434 = bitcast float %341 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %433, <1 x i32> %434, i1 true) #4, !dbg !54
  %435 = or disjoint i32 %384, 160, !dbg !54
  %436 = lshr i32 %435, 4, !dbg !54
  %437 = and i32 %436, 248, !dbg !54
  %438 = getelementptr float, ptr addrspace(3) @global_smem, i32 %437, !dbg !54
  %439 = getelementptr float, ptr addrspace(3) %438, i32 %435, !dbg !54
  %440 = bitcast float %342 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %439, <1 x i32> %440, i1 true) #4, !dbg !54
  %441 = or disjoint i32 %384, 224, !dbg !54
  %442 = lshr i32 %441, 4, !dbg !54
  %443 = and i32 %442, 252, !dbg !54
  %444 = getelementptr float, ptr addrspace(3) @global_smem, i32 %443, !dbg !54
  %445 = getelementptr float, ptr addrspace(3) %444, i32 %441, !dbg !54
  %446 = bitcast float %343 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %445, <1 x i32> %446, i1 true) #4, !dbg !54
  %447 = or disjoint i32 %384, 48, !dbg !54
  %448 = getelementptr float, ptr addrspace(3) %387, i32 %447, !dbg !54
  %449 = bitcast float %344 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %448, <1 x i32> %449, i1 true) #4, !dbg !54
  %450 = or disjoint i32 %384, 112, !dbg !54
  %451 = lshr i32 %450, 4, !dbg !54
  %452 = and i32 %451, 244, !dbg !54
  %453 = getelementptr float, ptr addrspace(3) @global_smem, i32 %452, !dbg !54
  %454 = getelementptr float, ptr addrspace(3) %453, i32 %450, !dbg !54
  %455 = bitcast float %345 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %454, <1 x i32> %455, i1 true) #4, !dbg !54
  %456 = or disjoint i32 %384, 176, !dbg !54
  %457 = lshr i32 %456, 4, !dbg !54
  %458 = and i32 %457, 248, !dbg !54
  %459 = getelementptr float, ptr addrspace(3) @global_smem, i32 %458, !dbg !54
  %460 = getelementptr float, ptr addrspace(3) %459, i32 %456, !dbg !54
  %461 = bitcast float %346 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %460, <1 x i32> %461, i1 true) #4, !dbg !54
  %462 = or disjoint i32 %384, 240, !dbg !54
  %463 = lshr i32 %462, 4, !dbg !54
  %464 = and i32 %463, 252, !dbg !54
  %465 = getelementptr float, ptr addrspace(3) @global_smem, i32 %464, !dbg !54
  %466 = getelementptr float, ptr addrspace(3) %465, i32 %462, !dbg !54
  %467 = bitcast float %347 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %466, <1 x i32> %467, i1 true) #4, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %468 = lshr i32 %19, 4, !dbg !54
  %469 = and i32 %468, 60, !dbg !54
  %470 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %469, !dbg !54
  %471 = getelementptr inbounds float, ptr addrspace(3) %470, i32 %385, !dbg !54
  %472 = or disjoint i32 %385, 1024, !dbg !54
  %473 = lshr i32 %472, 4, !dbg !54
  %474 = and i32 %473, 124, !dbg !54
  %475 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %474, !dbg !54
  %476 = getelementptr inbounds float, ptr addrspace(3) %475, i32 %472, !dbg !54
  %477 = load <4 x i32>, ptr addrspace(3) %476, align 16, !dbg !54
  %478 = or disjoint i32 %385, 2048, !dbg !54
  %479 = lshr i32 %478, 4, !dbg !54
  %480 = and i32 %479, 188, !dbg !54
  %481 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %480, !dbg !54
  %482 = getelementptr inbounds float, ptr addrspace(3) %481, i32 %478, !dbg !54
  %483 = load <4 x i32>, ptr addrspace(3) %482, align 16, !dbg !54
  %484 = or disjoint i32 %385, 3072, !dbg !54
  %485 = lshr i32 %484, 4, !dbg !54
  %486 = and i32 %485, 252, !dbg !54
  %487 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %486, !dbg !54
  %488 = getelementptr inbounds float, ptr addrspace(3) %487, i32 %484, !dbg !54
  %489 = load <4 x i32>, ptr addrspace(3) %488, align 16, !dbg !54
  %.extract = load i32, ptr addrspace(3) %471, align 16, !dbg !54
  %490 = getelementptr inbounds i8, ptr addrspace(3) %471, i32 4, !dbg !54
  %.extract16 = load i32, ptr addrspace(3) %490, align 4, !dbg !54
  %491 = getelementptr inbounds i8, ptr addrspace(3) %471, i32 8, !dbg !54
  %.extract17 = load i32, ptr addrspace(3) %491, align 8, !dbg !54
  %492 = getelementptr inbounds i8, ptr addrspace(3) %471, i32 12, !dbg !54
  %.extract18 = load i32, ptr addrspace(3) %492, align 4, !dbg !54
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract16, i32 %.extract17, i32 %.extract18, ptr addrspace(1) %375, i1 %277) #4, !dbg !54
  %.extract19 = extractelement <4 x i32> %477, i64 0, !dbg !54
  %.extract20 = extractelement <4 x i32> %477, i64 1, !dbg !54
  %.extract21 = extractelement <4 x i32> %477, i64 2, !dbg !54
  %.extract22 = extractelement <4 x i32> %477, i64 3, !dbg !54
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract19, i32 %.extract20, i32 %.extract21, i32 %.extract22, ptr addrspace(1) %377, i1 %274) #4, !dbg !54
  %.extract23 = extractelement <4 x i32> %483, i64 0, !dbg !54
  %.extract24 = extractelement <4 x i32> %483, i64 1, !dbg !54
  %.extract25 = extractelement <4 x i32> %483, i64 2, !dbg !54
  %.extract26 = extractelement <4 x i32> %483, i64 3, !dbg !54
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract23, i32 %.extract24, i32 %.extract25, i32 %.extract26, ptr addrspace(1) %379, i1 %271) #4, !dbg !54
  %.extract27 = extractelement <4 x i32> %489, i64 0, !dbg !54
  %.extract28 = extractelement <4 x i32> %489, i64 1, !dbg !54
  %.extract29 = extractelement <4 x i32> %489, i64 2, !dbg !54
  %.extract30 = extractelement <4 x i32> %489, i64 3, !dbg !54
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract27, i32 %.extract28, i32 %.extract29, i32 %.extract30, ptr addrspace(1) %381, i1 %268) #4, !dbg !54
  ret void, !dbg !55
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c4p3taeuxilxplfmil5ygwgn7mkfyb3o4szrp2rw4w5c4fvrj7dm.py", directory: "inductor_cache/4p")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_14, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_14, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_14", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_14", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 32, column: 43, scope: !7)
!20 = !DILocation(line: 32, column: 39, scope: !7)
!21 = !DILocation(line: 32, column: 34, scope: !7)
!22 = !DILocation(line: 32, column: 56, scope: !7)
!23 = !DILocation(line: 32, column: 48, scope: !7)
!24 = !DILocation(line: 33, column: 30, scope: !7)
!25 = !DILocation(line: 33, column: 35, scope: !7)
!26 = !DILocation(line: 34, column: 30, scope: !7)
!27 = !DILocation(line: 34, column: 44, scope: !7)
!28 = !DILocation(line: 35, column: 30, scope: !7)
!29 = !DILocation(line: 35, column: 35, scope: !7)
!30 = !DILocation(line: 36, column: 30, scope: !7)
!31 = !DILocation(line: 36, column: 35, scope: !7)
!32 = !DILocation(line: 37, column: 31, scope: !7)
!33 = !DILocation(line: 37, column: 36, scope: !7)
!34 = !DILocation(line: 38, column: 31, scope: !7)
!35 = !DILocation(line: 38, column: 36, scope: !7)
!36 = !DILocation(line: 42, column: 18, scope: !7)
!37 = !DILocation(line: 43, column: 26, scope: !7)
!38 = !DILocation(line: 39, column: 18, scope: !7)
!39 = !DILocation(line: 40, column: 18, scope: !7)
!40 = !DILocation(line: 31, column: 19, scope: !7)
!41 = !DILocation(line: 30, column: 19, scope: !7)
!42 = !DILocation(line: 45, column: 20, scope: !7)
!43 = !DILocation(line: 48, column: 19, scope: !7)
!44 = !DILocation(line: 49, column: 20, scope: !7)
!45 = !DILocation(line: 50, column: 20, scope: !7)
!46 = !DILocation(line: 51, column: 19, scope: !7)
!47 = !DILocation(line: 52, column: 4, scope: !7)
!48 = !DILocation(line: 53, column: 48, scope: !7)
!49 = !DILocation(line: 54, column: 33, scope: !7)
!50 = !DILocation(line: 54, column: 44, scope: !7)
!51 = !DILocation(line: 54, column: 30, scope: !7)
!52 = !DILocation(line: 54, column: 38, scope: !7)
!53 = !DILocation(line: 54, column: 25, scope: !7)
!54 = !DILocation(line: 54, column: 56, scope: !7)
!55 = !DILocation(line: 54, column: 4, scope: !7)
