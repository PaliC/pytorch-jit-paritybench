#blocked = #triton_gpu.blocked<{sizePerThread = [1, 2], threadsPerWarp = [1, 32], warpsPerCTA = [1, 2], order = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 2], order = [0, 1]}>
#loc = loc("inductor_cache/6g/c6g267vgacvg3fvtnrs7d4e5qi5msljtnmxy5u5phvwgiqdiuizk.py":19:0)
#loc1 = loc(unknown)
#loc19 = loc("inductor_cache/6g/c6g267vgacvg3fvtnrs7d4e5qi5msljtnmxy5u5phvwgiqdiuizk.py":39:24)
#loc26 = loc("inductor_cache/6g/c6g267vgacvg3fvtnrs7d4e5qi5msljtnmxy5u5phvwgiqdiuizk.py":47:26)
#loc39 = loc(callsite(#loc1 at #loc19))
#loc42 = loc(callsite(#loc1 at #loc26))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 2 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_per_fused_native_group_norm_27(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/6g/c6g267vgacvg3fvtnrs7d4e5qi5msljtnmxy5u5phvwgiqdiuizk.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/6g/c6g267vgacvg3fvtnrs7d4e5qi5msljtnmxy5u5phvwgiqdiuizk.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/6g/c6g267vgacvg3fvtnrs7d4e5qi5msljtnmxy5u5phvwgiqdiuizk.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/6g/c6g267vgacvg3fvtnrs7d4e5qi5msljtnmxy5u5phvwgiqdiuizk.py":19:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/6g/c6g267vgacvg3fvtnrs7d4e5qi5msljtnmxy5u5phvwgiqdiuizk.py":19:0), %arg5: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/6g/c6g267vgacvg3fvtnrs7d4e5qi5msljtnmxy5u5phvwgiqdiuizk.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<256> : tensor<1x128xi32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<8> : tensor<1x128xi32, #blocked> loc(#loc1)
    %c4096_i32 = arith.constant 4096 : i32 loc(#loc1)
    %c8_i32 = arith.constant 8 : i32 loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %c128_i32 = arith.constant 128 : i32 loc(#loc1)
    %cst_1 = arith.constant dense<0.000000e+00> : tensor<1x128xf32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<1.280000e+02> : tensor<1x1xf32, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<1.280000e+02> : tensor<1x1xf32, #blocked1> loc(#loc1)
    %cst_4 = arith.constant dense<9.99999974E-6> : tensor<1x1xf32, #blocked1> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.cmpi slt, %0, %c128_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc4)
    %3 = tt.expand_dims %2 {axis = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x128xi32, #blocked> loc(#loc4)
    %4 = arith.remsi %3, %cst_0 : tensor<1x128xi32, #blocked> loc(#loc5)
    %5 = arith.divsi %3, %cst_0 : tensor<1x128xi32, #blocked> loc(#loc6)
    %6 = arith.remsi %0, %c32_i32 : i32 loc(#loc7)
    %7 = arith.divsi %0, %c32_i32 : i32 loc(#loc8)
    %8 = arith.muli %6, %c8_i32 : i32 loc(#loc9)
    %9 = tt.splat %8 : i32 -> tensor<1x128xi32, #blocked> loc(#loc10)
    %10 = arith.addi %4, %9 : tensor<1x128xi32, #blocked> loc(#loc10)
    %11 = arith.muli %5, %cst : tensor<1x128xi32, #blocked> loc(#loc11)
    %12 = arith.addi %10, %11 : tensor<1x128xi32, #blocked> loc(#loc12)
    %13 = arith.muli %7, %c4096_i32 : i32 loc(#loc13)
    %14 = tt.splat %13 : i32 -> tensor<1x128xi32, #blocked> loc(#loc14)
    %15 = arith.addi %12, %14 : tensor<1x128xi32, #blocked> loc(#loc14)
    %16 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1x128x!tt.ptr<f32>, #blocked> loc(#loc15)
    %17 = tt.addptr %16, %15 : tensor<1x128x!tt.ptr<f32>, #blocked>, tensor<1x128xi32, #blocked> loc(#loc15)
    %18 = tt.splat %1 : i1 -> tensor<1x128xi1, #blocked> loc(#loc16)
    %19 = tt.load %17, %18, %cst_1 : tensor<1x128x!tt.ptr<f32>, #blocked> loc(#loc16)
    %20 = arith.select %18, %19, %cst_1 : tensor<1x128xi1, #blocked>, tensor<1x128xf32, #blocked> loc(#loc17)
    %21 = "tt.reduce"(%20) <{axis = 1 : i32}> ({
    ^bb0(%arg6: f32 loc(callsite(#loc1 at #loc19)), %arg7: f32 loc(callsite(#loc1 at #loc19))):
      %46 = arith.addf %arg6, %arg7 : f32 loc(#loc43)
      tt.reduce.return %46 : f32 loc(#loc38)
    }) : (tensor<1x128xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc38)
    %22 = triton_gpu.convert_layout %21 {fastmath = #arith.fastmath<none>} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc21)
    %23 = tt.expand_dims %22 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<1x1xf32, #blocked1> loc(#loc22)
    %24 = tt.expand_dims %21 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1x1xf32, #blocked> loc(#loc22)
    %25 = arith.divf %23, %cst_3 : tensor<1x1xf32, #blocked1> loc(#loc21)
    %26 = arith.divf %24, %cst_2 : tensor<1x1xf32, #blocked> loc(#loc21)
    %27 = tt.broadcast %26 : tensor<1x1xf32, #blocked> -> tensor<1x128xf32, #blocked> loc(#loc23)
    %28 = arith.subf %19, %27 : tensor<1x128xf32, #blocked> loc(#loc23)
    %29 = arith.mulf %28, %28 : tensor<1x128xf32, #blocked> loc(#loc24)
    %30 = arith.select %18, %29, %cst_1 : tensor<1x128xi1, #blocked>, tensor<1x128xf32, #blocked> loc(#loc25)
    %31 = "tt.reduce"(%30) <{axis = 1 : i32}> ({
    ^bb0(%arg6: f32 loc(callsite(#loc1 at #loc26)), %arg7: f32 loc(callsite(#loc1 at #loc26))):
      %46 = arith.addf %arg6, %arg7 : f32 loc(#loc44)
      tt.reduce.return %46 : f32 loc(#loc41)
    }) : (tensor<1x128xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc41)
    %32 = triton_gpu.convert_layout %31 {libname = "", libpath = "", pure = true, symbol = "__nv_rsqrtf"} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc27)
    %33 = tt.expand_dims %32 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<1x1xf32, #blocked1> loc(#loc28)
    %34 = triton_gpu.convert_layout %31 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc28)
    %35 = tt.expand_dims %34 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<1x1xf32, #blocked1> loc(#loc28)
    %36 = arith.divf %33, %cst_3 : tensor<1x1xf32, #blocked1> loc(#loc29)
    %37 = arith.addf %36, %cst_4 : tensor<1x1xf32, #blocked1> loc(#loc30)
    %38 = tt.extern_elementwise %37 {libname = "", libpath = "", pure = true, symbol = "__nv_rsqrtf"} : (tensor<1x1xf32, #blocked1>) -> tensor<1x1xf32, #blocked1> loc(#loc27)
    %39 = tt.addptr %arg3, %0 : !tt.ptr<f32>, i32 loc(#loc31)
    %40 = tt.splat %39 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc32)
    %41 = tt.splat %1 : i1 -> tensor<1x1xi1, #blocked1> loc(#loc32)
    tt.store %40, %38, %41 : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc32)
    %42 = tt.addptr %arg1, %0 : !tt.ptr<f32>, i32 loc(#loc33)
    %43 = tt.splat %42 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc34)
    tt.store %43, %25, %41 : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc34)
    %44 = tt.addptr %arg2, %0 : !tt.ptr<f32>, i32 loc(#loc35)
    %45 = tt.splat %44 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc36)
    tt.store %45, %35, %41 : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc36)
    tt.return loc(#loc37)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/6g/c6g267vgacvg3fvtnrs7d4e5qi5msljtnmxy5u5phvwgiqdiuizk.py":23:28)
#loc3 = loc("inductor_cache/6g/c6g267vgacvg3fvtnrs7d4e5qi5msljtnmxy5u5phvwgiqdiuizk.py":25:21)
#loc4 = loc("inductor_cache/6g/c6g267vgacvg3fvtnrs7d4e5qi5msljtnmxy5u5phvwgiqdiuizk.py":26:34)
#loc5 = loc("inductor_cache/6g/c6g267vgacvg3fvtnrs7d4e5qi5msljtnmxy5u5phvwgiqdiuizk.py":29:19)
#loc6 = loc("inductor_cache/6g/c6g267vgacvg3fvtnrs7d4e5qi5msljtnmxy5u5phvwgiqdiuizk.py":30:19)
#loc7 = loc("inductor_cache/6g/c6g267vgacvg3fvtnrs7d4e5qi5msljtnmxy5u5phvwgiqdiuizk.py":31:19)
#loc8 = loc("inductor_cache/6g/c6g267vgacvg3fvtnrs7d4e5qi5msljtnmxy5u5phvwgiqdiuizk.py":32:19)
#loc9 = loc("inductor_cache/6g/c6g267vgacvg3fvtnrs7d4e5qi5msljtnmxy5u5phvwgiqdiuizk.py":34:37)
#loc10 = loc("inductor_cache/6g/c6g267vgacvg3fvtnrs7d4e5qi5msljtnmxy5u5phvwgiqdiuizk.py":34:35)
#loc11 = loc("inductor_cache/6g/c6g267vgacvg3fvtnrs7d4e5qi5msljtnmxy5u5phvwgiqdiuizk.py":34:46)
#loc12 = loc("inductor_cache/6g/c6g267vgacvg3fvtnrs7d4e5qi5msljtnmxy5u5phvwgiqdiuizk.py":34:42)
#loc13 = loc("inductor_cache/6g/c6g267vgacvg3fvtnrs7d4e5qi5msljtnmxy5u5phvwgiqdiuizk.py":34:56)
#loc14 = loc("inductor_cache/6g/c6g267vgacvg3fvtnrs7d4e5qi5msljtnmxy5u5phvwgiqdiuizk.py":34:51)
#loc15 = loc("inductor_cache/6g/c6g267vgacvg3fvtnrs7d4e5qi5msljtnmxy5u5phvwgiqdiuizk.py":34:30)
#loc16 = loc("inductor_cache/6g/c6g267vgacvg3fvtnrs7d4e5qi5msljtnmxy5u5phvwgiqdiuizk.py":34:61)
#loc17 = loc("inductor_cache/6g/c6g267vgacvg3fvtnrs7d4e5qi5msljtnmxy5u5phvwgiqdiuizk.py":38:33)
#loc18 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc20 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc21 = loc("inductor_cache/6g/c6g267vgacvg3fvtnrs7d4e5qi5msljtnmxy5u5phvwgiqdiuizk.py":42:19)
#loc22 = loc("inductor_cache/6g/c6g267vgacvg3fvtnrs7d4e5qi5msljtnmxy5u5phvwgiqdiuizk.py":39:27)
#loc23 = loc("inductor_cache/6g/c6g267vgacvg3fvtnrs7d4e5qi5msljtnmxy5u5phvwgiqdiuizk.py":43:19)
#loc24 = loc("inductor_cache/6g/c6g267vgacvg3fvtnrs7d4e5qi5msljtnmxy5u5phvwgiqdiuizk.py":44:20)
#loc25 = loc("inductor_cache/6g/c6g267vgacvg3fvtnrs7d4e5qi5msljtnmxy5u5phvwgiqdiuizk.py":46:35)
#loc27 = loc("inductor_cache/6g/c6g267vgacvg3fvtnrs7d4e5qi5msljtnmxy5u5phvwgiqdiuizk.py":52:28)
#loc28 = loc("inductor_cache/6g/c6g267vgacvg3fvtnrs7d4e5qi5msljtnmxy5u5phvwgiqdiuizk.py":47:29)
#loc29 = loc("inductor_cache/6g/c6g267vgacvg3fvtnrs7d4e5qi5msljtnmxy5u5phvwgiqdiuizk.py":49:20)
#loc30 = loc("inductor_cache/6g/c6g267vgacvg3fvtnrs7d4e5qi5msljtnmxy5u5phvwgiqdiuizk.py":51:20)
#loc31 = loc("inductor_cache/6g/c6g267vgacvg3fvtnrs7d4e5qi5msljtnmxy5u5phvwgiqdiuizk.py":53:25)
#loc32 = loc("inductor_cache/6g/c6g267vgacvg3fvtnrs7d4e5qi5msljtnmxy5u5phvwgiqdiuizk.py":53:37)
#loc33 = loc("inductor_cache/6g/c6g267vgacvg3fvtnrs7d4e5qi5msljtnmxy5u5phvwgiqdiuizk.py":54:25)
#loc34 = loc("inductor_cache/6g/c6g267vgacvg3fvtnrs7d4e5qi5msljtnmxy5u5phvwgiqdiuizk.py":54:37)
#loc35 = loc("inductor_cache/6g/c6g267vgacvg3fvtnrs7d4e5qi5msljtnmxy5u5phvwgiqdiuizk.py":55:25)
#loc36 = loc("inductor_cache/6g/c6g267vgacvg3fvtnrs7d4e5qi5msljtnmxy5u5phvwgiqdiuizk.py":55:37)
#loc37 = loc("inductor_cache/6g/c6g267vgacvg3fvtnrs7d4e5qi5msljtnmxy5u5phvwgiqdiuizk.py":55:4)
#loc38 = loc(callsite(#loc18 at #loc19))
#loc40 = loc(callsite(#loc20 at #loc18))
#loc41 = loc(callsite(#loc18 at #loc26))
#loc43 = loc(callsite(#loc40 at #loc19))
#loc44 = loc(callsite(#loc40 at #loc26))
