; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused_native_group_norm_27(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %8 = icmp slt i32 %7, 128, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = and i32 %9, 31, !dbg !12
  %11 = lshr i32 %9, 5, !dbg !12
  %12 = shl i32 %9, 1, !dbg !12
  %13 = and i32 %12, 6, !dbg !12
  %14 = shl i32 %9, 6, !dbg !12
  %15 = and i32 %14, 3840, !dbg !12
  %.frozen = freeze i32 %7, !dbg !13
  %16 = sdiv i32 %.frozen, 32, !dbg !13
  %17 = mul i32 %16, 32, !dbg !14
  %.decomposed = sub i32 %.frozen, %17, !dbg !14
  %18 = shl nsw i32 %.decomposed, 3, !dbg !15
  %19 = shl i32 %16, 12, !dbg !16
  %20 = or disjoint i32 %15, %13, !dbg !17
  %21 = add nsw i32 %20, %18, !dbg !18
  %22 = add i32 %21, %19, !dbg !19
  %23 = sext i32 %22 to i64, !dbg !20
  %24 = getelementptr float, ptr addrspace(1) %0, i64 %23, !dbg !20
  %25 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %24, i1 %8, i32 0, i1 %8, i32 0, i1 %8) #5, !dbg !21
  %26 = extractvalue { i32, i32 } %25, 0, !dbg !21
  %27 = extractvalue { i32, i32 } %25, 1, !dbg !21
  %28 = bitcast i32 %26 to float, !dbg !21
  %29 = bitcast i32 %27 to float, !dbg !21
  %30 = fadd float %28, %29, !dbg !22
  %31 = select i1 %8, float %30, float 0.000000e+00, !dbg !22
  %32 = bitcast float %31 to i32, !dbg !27
  %33 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %32, i32 16, i32 31), !dbg !27
  %34 = bitcast i32 %33 to float, !dbg !27
  %35 = fadd float %31, %34, !dbg !22
  %36 = bitcast float %35 to i32, !dbg !27
  %37 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %36, i32 8, i32 31), !dbg !27
  %38 = bitcast i32 %37 to float, !dbg !27
  %39 = fadd float %35, %38, !dbg !22
  %40 = bitcast float %39 to i32, !dbg !27
  %41 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %40, i32 4, i32 31), !dbg !27
  %42 = bitcast i32 %41 to float, !dbg !27
  %43 = fadd float %39, %42, !dbg !22
  %44 = bitcast float %43 to i32, !dbg !27
  %45 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %44, i32 2, i32 31), !dbg !27
  %46 = bitcast i32 %45 to float, !dbg !27
  %47 = fadd float %43, %46, !dbg !22
  %48 = bitcast float %47 to i32, !dbg !27
  %49 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %48, i32 1, i32 31), !dbg !27
  %50 = bitcast i32 %49 to float, !dbg !27
  %51 = fadd float %47, %50, !dbg !22
  %52 = icmp eq i32 %10, 0, !dbg !27
  %53 = and i32 %11, 1, !dbg !27
  %54 = getelementptr float, ptr addrspace(3) @global_smem, i32 %53, !dbg !27
  %55 = bitcast float %51 to <1 x i32>, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %54, <1 x i32> %55, i1 %52) #5, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %56 = icmp slt i32 %9, 2, !dbg !27
  %57 = getelementptr float, ptr addrspace(3) @global_smem, i32 %9, !dbg !27
  %58 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %57, i1 %56) #5, !dbg !27
  %59 = bitcast i32 %58 to float, !dbg !27
  %60 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %58, i32 1, i32 31), !dbg !27
  %61 = bitcast i32 %60 to float, !dbg !27
  %62 = fadd float %59, %61, !dbg !22
  %63 = and i32 %9, 1, !dbg !27
  %64 = icmp eq i32 %63, 0, !dbg !27
  %65 = and i1 %56, %64, !dbg !27
  %66 = bitcast float %62 to <1 x i32>, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %57, <1 x i32> %66, i1 %65) #5, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %67 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !27
  %68 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %67, float 1.280000e+02) #5, !dbg !28
  %69 = fsub float %28, %68, !dbg !29
  %70 = fsub float %29, %68, !dbg !29
  %71 = fmul float %69, %69, !dbg !30
  %72 = fmul float %70, %70, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %73 = fadd float %71, %72, !dbg !33
  %74 = select i1 %8, float %73, float 0.000000e+00, !dbg !33
  %75 = bitcast float %74 to i32, !dbg !31
  %76 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %75, i32 16, i32 31), !dbg !31
  %77 = bitcast i32 %76 to float, !dbg !31
  %78 = fadd float %74, %77, !dbg !33
  %79 = bitcast float %78 to i32, !dbg !31
  %80 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %79, i32 8, i32 31), !dbg !31
  %81 = bitcast i32 %80 to float, !dbg !31
  %82 = fadd float %78, %81, !dbg !33
  %83 = bitcast float %82 to i32, !dbg !31
  %84 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %83, i32 4, i32 31), !dbg !31
  %85 = bitcast i32 %84 to float, !dbg !31
  %86 = fadd float %82, %85, !dbg !33
  %87 = bitcast float %86 to i32, !dbg !31
  %88 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %87, i32 2, i32 31), !dbg !31
  %89 = bitcast i32 %88 to float, !dbg !31
  %90 = fadd float %86, %89, !dbg !33
  %91 = bitcast float %90 to i32, !dbg !31
  %92 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %91, i32 1, i32 31), !dbg !31
  %93 = bitcast i32 %92 to float, !dbg !31
  %94 = fadd float %90, %93, !dbg !33
  %95 = bitcast float %94 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %54, <1 x i32> %95, i1 %52) #5, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %96 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %57, i1 %56) #5, !dbg !31
  %97 = bitcast i32 %96 to float, !dbg !31
  %98 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %96, i32 1, i32 31), !dbg !31
  %99 = bitcast i32 %98 to float, !dbg !31
  %100 = fadd float %97, %99, !dbg !33
  %101 = bitcast float %100 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %57, <1 x i32> %101, i1 %65) #5, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %102 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !31
  %103 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %102, float 1.280000e+02) #5, !dbg !34
  %104 = fadd float %103, 0x3EE4F8B580000000, !dbg !35
  %105 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not.i = icmp eq i32 %105, 0, !dbg !36
  br i1 %.not.i, label %108, label %106, !dbg !36

106:                                              ; preds = %6
  %107 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %104), !dbg !36
  br label %__nv_rsqrtf.exit, !dbg !36

108:                                              ; preds = %6
  %109 = tail call float @llvm.nvvm.rsqrt.approx.f(float %104), !dbg !36
  br label %__nv_rsqrtf.exit, !dbg !36

__nv_rsqrtf.exit:                                 ; preds = %106, %108
  %.0.i = phi float [ %107, %106 ], [ %109, %108 ], !dbg !36
  %110 = sext i32 %7 to i64, !dbg !37
  %111 = getelementptr float, ptr addrspace(1) %3, i64 %110, !dbg !37
  %urem = and i32 %9, 63, !dbg !38
  %112 = icmp eq i32 %urem, 0, !dbg !38
  %113 = bitcast float %.0.i to i32, !dbg !38
  %114 = and i1 %112, %8, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %113, ptr addrspace(1) %111, i1 %114) #5, !dbg !38
  %115 = getelementptr float, ptr addrspace(1) %1, i64 %110, !dbg !39
  %116 = bitcast float %68 to i32, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %116, ptr addrspace(1) %115, i1 %114) #5, !dbg !40
  %117 = getelementptr float, ptr addrspace(1) %2, i64 %110, !dbg !41
  %118 = bitcast float %102 to i32, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %118, ptr addrspace(1) %117, i1 %114) #5, !dbg !42
  ret void, !dbg !43
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c6g267vgacvg3fvtnrs7d4e5qi5msljtnmxy5u5phvwgiqdiuizk.py", directory: "inductor_cache/6g")
!4 = !{ptr @triton_per_fused_native_group_norm_27, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_native_group_norm_27, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_native_group_norm_27", linkageName: "triton_per_fused_native_group_norm_27", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 21, scope: !7)
!12 = !DILocation(line: 26, column: 34, scope: !7)
!13 = !DILocation(line: 32, column: 19, scope: !7)
!14 = !DILocation(line: 31, column: 19, scope: !7)
!15 = !DILocation(line: 34, column: 37, scope: !7)
!16 = !DILocation(line: 34, column: 56, scope: !7)
!17 = !DILocation(line: 34, column: 35, scope: !7)
!18 = !DILocation(line: 34, column: 42, scope: !7)
!19 = !DILocation(line: 34, column: 51, scope: !7)
!20 = !DILocation(line: 34, column: 30, scope: !7)
!21 = !DILocation(line: 34, column: 61, scope: !7)
!22 = !DILocation(line: 256, column: 15, scope: !23, inlinedAt: !26)
!23 = distinct !DILexicalBlockFile(scope: !25, file: !24, discriminator: 0)
!24 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!25 = distinct !DILexicalBlockFile(scope: !7, file: !24, discriminator: 0)
!26 = !DILocation(line: 39, column: 24, scope: !7)
!27 = !DILocation(line: 267, column: 36, scope: !25, inlinedAt: !26)
!28 = !DILocation(line: 42, column: 19, scope: !7)
!29 = !DILocation(line: 43, column: 19, scope: !7)
!30 = !DILocation(line: 44, column: 20, scope: !7)
!31 = !DILocation(line: 267, column: 36, scope: !25, inlinedAt: !32)
!32 = !DILocation(line: 47, column: 26, scope: !7)
!33 = !DILocation(line: 256, column: 15, scope: !23, inlinedAt: !32)
!34 = !DILocation(line: 49, column: 20, scope: !7)
!35 = !DILocation(line: 51, column: 20, scope: !7)
!36 = !DILocation(line: 52, column: 28, scope: !7)
!37 = !DILocation(line: 53, column: 25, scope: !7)
!38 = !DILocation(line: 53, column: 37, scope: !7)
!39 = !DILocation(line: 54, column: 25, scope: !7)
!40 = !DILocation(line: 54, column: 37, scope: !7)
!41 = !DILocation(line: 55, column: 25, scope: !7)
!42 = !DILocation(line: 55, column: 37, scope: !7)
!43 = !DILocation(line: 55, column: 4, scope: !7)
