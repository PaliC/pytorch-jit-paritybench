; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused_add_clamp_div_index_put_lift_fresh_mean_mul_pow_rsub_sqrt_sub_sum_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %7 = icmp slt i32 %6, 4, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = and i32 %8, 15, !dbg !12
  %10 = shl i32 %6, 6, !dbg !13
  %11 = or disjoint i32 %10, %9, !dbg !14
  %12 = sext i32 %11 to i64, !dbg !15
  %13 = getelementptr float, ptr addrspace(1) %1, i64 %12, !dbg !15
  %14 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %13, i1 %7, i32 0, i1 %7) #5, !dbg !16
  %15 = bitcast i32 %14 to float, !dbg !16
  %16 = or disjoint i32 %11, 16, !dbg !17
  %17 = sext i32 %16 to i64, !dbg !18
  %18 = getelementptr float, ptr addrspace(1) %1, i64 %17, !dbg !18
  %19 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %18, i1 %7, i32 0, i1 %7) #5, !dbg !19
  %20 = bitcast i32 %19 to float, !dbg !19
  %21 = or disjoint i32 %11, 32, !dbg !20
  %22 = sext i32 %21 to i64, !dbg !21
  %23 = getelementptr float, ptr addrspace(1) %1, i64 %22, !dbg !21
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %23, i1 %7, i32 0, i1 %7) #5, !dbg !22
  %25 = bitcast i32 %24 to float, !dbg !22
  %26 = or disjoint i32 %11, 48, !dbg !23
  %27 = sext i32 %26 to i64, !dbg !24
  %28 = getelementptr float, ptr addrspace(1) %1, i64 %27, !dbg !24
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %28, i1 %7, i32 0, i1 %7) #5, !dbg !25
  %30 = bitcast i32 %29 to float, !dbg !25
  %31 = getelementptr float, ptr addrspace(1) %2, i64 %12, !dbg !26
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %31, i1 %7, i32 0, i1 %7) #5, !dbg !27
  %33 = bitcast i32 %32 to float, !dbg !27
  %34 = getelementptr float, ptr addrspace(1) %2, i64 %17, !dbg !28
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %34, i1 %7, i32 0, i1 %7) #5, !dbg !29
  %36 = bitcast i32 %35 to float, !dbg !29
  %37 = getelementptr float, ptr addrspace(1) %2, i64 %22, !dbg !30
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %37, i1 %7, i32 0, i1 %7) #5, !dbg !31
  %39 = bitcast i32 %38 to float, !dbg !31
  %40 = getelementptr float, ptr addrspace(1) %2, i64 %27, !dbg !32
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %40, i1 %7, i32 0, i1 %7) #5, !dbg !33
  %42 = bitcast i32 %41 to float, !dbg !33
  %43 = fadd float %15, %20, !dbg !34
  %44 = fadd float %43, %25, !dbg !35
  %45 = fadd float %44, %30, !dbg !36
  %46 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %45, float 4.000000e+00) #5, !dbg !37
  %47 = select i1 %7, float %46, float 0.000000e+00, !dbg !38
  %48 = bitcast float %47 to i32, !dbg !39
  %49 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %48, i32 8, i32 31), !dbg !39
  %50 = bitcast i32 %49 to float, !dbg !39
  %51 = fadd float %47, %50, !dbg !43
  %52 = bitcast float %51 to i32, !dbg !39
  %53 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %52, i32 4, i32 31), !dbg !39
  %54 = bitcast i32 %53 to float, !dbg !39
  %55 = fadd float %51, %54, !dbg !43
  %56 = bitcast float %55 to i32, !dbg !39
  %57 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %56, i32 2, i32 31), !dbg !39
  %58 = bitcast i32 %57 to float, !dbg !39
  %59 = fadd float %55, %58, !dbg !43
  %60 = bitcast float %59 to i32, !dbg !39
  %61 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %60, i32 1, i32 31), !dbg !39
  %62 = bitcast i32 %61 to float, !dbg !39
  %63 = fadd float %59, %62, !dbg !43
  %64 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %63, float 1.600000e+01) #5, !dbg !45
  %65 = fsub float %46, %64, !dbg !46
  %66 = fadd float %33, %36, !dbg !47
  %67 = fadd float %66, %39, !dbg !48
  %68 = fadd float %67, %42, !dbg !49
  %69 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %68, float 4.000000e+00) #5, !dbg !50
  %70 = select i1 %7, float %69, float 0.000000e+00, !dbg !51
  %71 = bitcast float %70 to i32, !dbg !52
  %72 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %71, i32 8, i32 31), !dbg !52
  %73 = bitcast i32 %72 to float, !dbg !52
  %74 = fadd float %70, %73, !dbg !54
  %75 = bitcast float %74 to i32, !dbg !52
  %76 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %75, i32 4, i32 31), !dbg !52
  %77 = bitcast i32 %76 to float, !dbg !52
  %78 = fadd float %74, %77, !dbg !54
  %79 = bitcast float %78 to i32, !dbg !52
  %80 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %79, i32 2, i32 31), !dbg !52
  %81 = bitcast i32 %80 to float, !dbg !52
  %82 = fadd float %78, %81, !dbg !54
  %83 = bitcast float %82 to i32, !dbg !52
  %84 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %83, i32 1, i32 31), !dbg !52
  %85 = bitcast i32 %84 to float, !dbg !52
  %86 = fadd float %82, %85, !dbg !54
  %87 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %86, float 1.600000e+01) #5, !dbg !55
  %88 = fsub float %69, %87, !dbg !56
  %89 = fmul float %65, %88, !dbg !57
  %90 = select i1 %7, float %89, float 0.000000e+00, !dbg !58
  %91 = bitcast float %90 to i32, !dbg !59
  %92 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %91, i32 8, i32 31), !dbg !59
  %93 = bitcast i32 %92 to float, !dbg !59
  %94 = fadd float %90, %93, !dbg !61
  %95 = bitcast float %94 to i32, !dbg !59
  %96 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %95, i32 4, i32 31), !dbg !59
  %97 = bitcast i32 %96 to float, !dbg !59
  %98 = fadd float %94, %97, !dbg !61
  %99 = bitcast float %98 to i32, !dbg !59
  %100 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %99, i32 2, i32 31), !dbg !59
  %101 = bitcast i32 %100 to float, !dbg !59
  %102 = fadd float %98, %101, !dbg !61
  %103 = bitcast float %102 to i32, !dbg !59
  %104 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %103, i32 1, i32 31), !dbg !59
  %105 = fmul float %65, %65, !dbg !62
  %106 = select i1 %7, float %105, float 0.000000e+00, !dbg !63
  %107 = bitcast float %106 to i32, !dbg !64
  %108 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %107, i32 8, i32 31), !dbg !64
  %109 = bitcast i32 %108 to float, !dbg !64
  %110 = fadd float %106, %109, !dbg !66
  %111 = bitcast float %110 to i32, !dbg !64
  %112 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %111, i32 4, i32 31), !dbg !64
  %113 = bitcast i32 %112 to float, !dbg !64
  %114 = fadd float %110, %113, !dbg !66
  %115 = bitcast float %114 to i32, !dbg !64
  %116 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %115, i32 2, i32 31), !dbg !64
  %117 = bitcast i32 %116 to float, !dbg !64
  %118 = fadd float %114, %117, !dbg !66
  %119 = bitcast float %118 to i32, !dbg !64
  %120 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %119, i32 1, i32 31), !dbg !64
  %121 = bitcast i32 %120 to float, !dbg !64
  %122 = fadd float %118, %121, !dbg !66
  %123 = fmul float %88, %88, !dbg !67
  %124 = select i1 %7, float %123, float 0.000000e+00, !dbg !68
  %125 = bitcast float %124 to i32, !dbg !69
  %126 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %125, i32 8, i32 31), !dbg !69
  %127 = bitcast i32 %126 to float, !dbg !69
  %128 = fadd float %124, %127, !dbg !71
  %129 = bitcast float %128 to i32, !dbg !69
  %130 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %129, i32 4, i32 31), !dbg !69
  %131 = bitcast i32 %130 to float, !dbg !69
  %132 = fadd float %128, %131, !dbg !71
  %133 = bitcast float %132 to i32, !dbg !69
  %134 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %133, i32 2, i32 31), !dbg !69
  %135 = bitcast i32 %134 to float, !dbg !69
  %136 = fadd float %132, %135, !dbg !71
  %137 = bitcast float %136 to i32, !dbg !69
  %138 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %137, i32 1, i32 31), !dbg !69
  %139 = bitcast i32 %138 to float, !dbg !69
  %140 = fadd float %136, %139, !dbg !71
  %141 = fmul float %122, %140, !dbg !72
  %142 = fadd float %141, 0x3EB0C6F7A0000000, !dbg !73
  %143 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !74
  %.not.i = icmp eq i32 %143, 0, !dbg !74
  %144 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !74
  %.not1.i = icmp eq i32 %144, 0, !dbg !74
  br i1 %.not.i, label %150, label %145, !dbg !74

145:                                              ; preds = %5
  br i1 %.not1.i, label %148, label %146, !dbg !74

146:                                              ; preds = %145
  %147 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %142) #5, !dbg !74
  br label %__nv_sqrtf.exit, !dbg !74

148:                                              ; preds = %145
  %149 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %142) #5, !dbg !74
  br label %__nv_sqrtf.exit, !dbg !74

150:                                              ; preds = %5
  br i1 %.not1.i, label %153, label %151, !dbg !74

151:                                              ; preds = %150
  %152 = tail call float @llvm.nvvm.sqrt.rn.f(float %142) #5, !dbg !74
  br label %__nv_sqrtf.exit, !dbg !74

153:                                              ; preds = %150
  %154 = tail call float @llvm.nvvm.sqrt.approx.f(float %142) #5, !dbg !74
  br label %__nv_sqrtf.exit, !dbg !74

__nv_sqrtf.exit:                                  ; preds = %146, %148, %151, %153
  %.0.i = phi float [ %147, %146 ], [ %149, %148 ], [ %152, %151 ], [ %154, %153 ], !dbg !74
  %155 = fcmp olt float %122, 0x3F847AE140000000, !dbg !75
  %156 = fcmp olt float %140, 0x3F847AE140000000, !dbg !76
  %157 = or i1 %155, %156, !dbg !77
  %158 = bitcast i32 %104 to float, !dbg !59
  %159 = fadd float %102, %158, !dbg !61
  %160 = fadd float %.0.i, 0x3EB0C6F7A0000000, !dbg !78
  %161 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %159, float %160) #5, !dbg !79
  %162 = select i1 %157, float 1.000000e+00, float %161, !dbg !80
  %163 = fcmp ogt float %162, -1.000000e+00, !dbg !81
  %164 = fcmp uno float %162, 0.000000e+00, !dbg !85
  %165 = or i1 %163, %164, !dbg !86
  %166 = select i1 %165, float %162, float -1.000000e+00, !dbg !87
  %167 = fcmp olt float %166, 1.000000e+00, !dbg !88
  %168 = fcmp uno float %166, 0.000000e+00, !dbg !90
  %169 = or i1 %167, %168, !dbg !91
  %170 = fsub float 1.000000e+00, %166, !dbg !92
  tail call void @llvm.nvvm.barrier0(), !dbg !93
  %171 = sext i32 %6 to i64, !dbg !94
  %172 = getelementptr float, ptr addrspace(1) %0, i64 %171, !dbg !94
  %173 = and i32 %8, 63, !dbg !95
  %174 = icmp eq i32 %173, 0, !dbg !95
  %175 = bitcast float %170 to i32, !dbg !95
  %176 = select i1 %169, i32 %175, i32 0, !dbg !96
  %177 = and i1 %174, %7, !dbg !95
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %176, ptr addrspace(1) %172, i1 %177) #5, !dbg !95
  ret void, !dbg !97
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cqvimr6vhtvhqxmux6zmhe3elyght36ulzep6vaayga4zdxcqw6z.py", directory: "inductor_cache/qv")
!4 = !{ptr @triton_per_fused_add_clamp_div_index_put_lift_fresh_mean_mul_pow_rsub_sqrt_sub_sum_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_clamp_div_index_put_lift_fresh_mean_mul_pow_rsub_sqrt_sub_sum_0, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_clamp_div_index_put_lift_fresh_mean_mul_pow_rsub_sqrt_sub_sum_0", linkageName: "triton_per_fused_add_clamp_div_index_put_lift_fresh_mean_mul_pow_rsub_sqrt_sub_sum_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 21, scope: !7)
!12 = !DILocation(line: 26, column: 34, scope: !7)
!13 = !DILocation(line: 31, column: 38, scope: !7)
!14 = !DILocation(line: 31, column: 35, scope: !7)
!15 = !DILocation(line: 31, column: 30, scope: !7)
!16 = !DILocation(line: 31, column: 43, scope: !7)
!17 = !DILocation(line: 32, column: 40, scope: !7)
!18 = !DILocation(line: 32, column: 30, scope: !7)
!19 = !DILocation(line: 32, column: 48, scope: !7)
!20 = !DILocation(line: 33, column: 40, scope: !7)
!21 = !DILocation(line: 33, column: 30, scope: !7)
!22 = !DILocation(line: 33, column: 48, scope: !7)
!23 = !DILocation(line: 34, column: 40, scope: !7)
!24 = !DILocation(line: 34, column: 30, scope: !7)
!25 = !DILocation(line: 34, column: 48, scope: !7)
!26 = !DILocation(line: 35, column: 31, scope: !7)
!27 = !DILocation(line: 35, column: 44, scope: !7)
!28 = !DILocation(line: 36, column: 31, scope: !7)
!29 = !DILocation(line: 36, column: 49, scope: !7)
!30 = !DILocation(line: 37, column: 31, scope: !7)
!31 = !DILocation(line: 37, column: 49, scope: !7)
!32 = !DILocation(line: 38, column: 31, scope: !7)
!33 = !DILocation(line: 38, column: 49, scope: !7)
!34 = !DILocation(line: 39, column: 18, scope: !7)
!35 = !DILocation(line: 40, column: 18, scope: !7)
!36 = !DILocation(line: 41, column: 18, scope: !7)
!37 = !DILocation(line: 43, column: 18, scope: !7)
!38 = !DILocation(line: 45, column: 34, scope: !7)
!39 = !DILocation(line: 267, column: 36, scope: !40, inlinedAt: !42)
!40 = distinct !DILexicalBlockFile(scope: !7, file: !41, discriminator: 0)
!41 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!42 = !DILocation(line: 46, column: 26, scope: !7)
!43 = !DILocation(line: 256, column: 15, scope: !44, inlinedAt: !42)
!44 = distinct !DILexicalBlockFile(scope: !40, file: !41, discriminator: 0)
!45 = !DILocation(line: 48, column: 20, scope: !7)
!46 = !DILocation(line: 49, column: 19, scope: !7)
!47 = !DILocation(line: 50, column: 20, scope: !7)
!48 = !DILocation(line: 51, column: 20, scope: !7)
!49 = !DILocation(line: 52, column: 20, scope: !7)
!50 = !DILocation(line: 53, column: 20, scope: !7)
!51 = !DILocation(line: 55, column: 35, scope: !7)
!52 = !DILocation(line: 267, column: 36, scope: !40, inlinedAt: !53)
!53 = !DILocation(line: 56, column: 26, scope: !7)
!54 = !DILocation(line: 256, column: 15, scope: !44, inlinedAt: !53)
!55 = !DILocation(line: 57, column: 20, scope: !7)
!56 = !DILocation(line: 58, column: 20, scope: !7)
!57 = !DILocation(line: 59, column: 20, scope: !7)
!58 = !DILocation(line: 61, column: 35, scope: !7)
!59 = !DILocation(line: 267, column: 36, scope: !40, inlinedAt: !60)
!60 = !DILocation(line: 62, column: 26, scope: !7)
!61 = !DILocation(line: 256, column: 15, scope: !44, inlinedAt: !60)
!62 = !DILocation(line: 63, column: 20, scope: !7)
!63 = !DILocation(line: 65, column: 35, scope: !7)
!64 = !DILocation(line: 267, column: 36, scope: !40, inlinedAt: !65)
!65 = !DILocation(line: 66, column: 26, scope: !7)
!66 = !DILocation(line: 256, column: 15, scope: !44, inlinedAt: !65)
!67 = !DILocation(line: 67, column: 20, scope: !7)
!68 = !DILocation(line: 69, column: 35, scope: !7)
!69 = !DILocation(line: 267, column: 36, scope: !40, inlinedAt: !70)
!70 = !DILocation(line: 70, column: 26, scope: !7)
!71 = !DILocation(line: 256, column: 15, scope: !44, inlinedAt: !70)
!72 = !DILocation(line: 75, column: 20, scope: !7)
!73 = !DILocation(line: 77, column: 20, scope: !7)
!74 = !DILocation(line: 78, column: 27, scope: !7)
!75 = !DILocation(line: 72, column: 20, scope: !7)
!76 = !DILocation(line: 73, column: 20, scope: !7)
!77 = !DILocation(line: 74, column: 20, scope: !7)
!78 = !DILocation(line: 79, column: 20, scope: !7)
!79 = !DILocation(line: 80, column: 20, scope: !7)
!80 = !DILocation(line: 82, column: 35, scope: !7)
!81 = !DILocation(line: 118, column: 15, scope: !82, inlinedAt: !84)
!82 = distinct !DILexicalBlockFile(scope: !7, file: !83, discriminator: 0)
!83 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!84 = !DILocation(line: 84, column: 42, scope: !7)
!85 = !DILocation(line: 120, column: 21, scope: !82, inlinedAt: !84)
!86 = !DILocation(line: 120, column: 16, scope: !82, inlinedAt: !84)
!87 = !DILocation(line: 121, column: 29, scope: !82, inlinedAt: !84)
!88 = !DILocation(line: 110, column: 15, scope: !82, inlinedAt: !89)
!89 = !DILocation(line: 85, column: 42, scope: !7)
!90 = !DILocation(line: 112, column: 21, scope: !82, inlinedAt: !89)
!91 = !DILocation(line: 112, column: 16, scope: !82, inlinedAt: !89)
!92 = !DILocation(line: 86, column: 20, scope: !7)
!93 = !DILocation(line: 87, column: 4, scope: !7)
!94 = !DILocation(line: 88, column: 28, scope: !7)
!95 = !DILocation(line: 88, column: 40, scope: !7)
!96 = !DILocation(line: 113, column: 29, scope: !82, inlinedAt: !89)
!97 = !DILocation(line: 88, column: 4, scope: !7)
