; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused_native_group_norm_28(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %8 = shl i32 %7, 7, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = lshr i32 %9, 3, !dbg !12
  %11 = and i32 %10, 31, !dbg !12
  %12 = or disjoint i32 %11, 32, !dbg !12
  %13 = or disjoint i32 %11, 64, !dbg !12
  %14 = or disjoint i32 %11, 96, !dbg !12
  %15 = and i32 %9, 127, !dbg !12
  %16 = or disjoint i32 %8, %11, !dbg !13
  %17 = or disjoint i32 %8, %12, !dbg !13
  %18 = or disjoint i32 %8, %13, !dbg !13
  %19 = or disjoint i32 %8, %14, !dbg !13
  %20 = icmp slt i32 %16, 128, !dbg !14
  %21 = icmp slt i32 %17, 128, !dbg !14
  %22 = icmp slt i32 %18, 128, !dbg !14
  %23 = icmp slt i32 %19, 128, !dbg !14
  %24 = shl i32 %9, 2, !dbg !15
  %25 = and i32 %24, 28, !dbg !15
  %26 = shl i32 %16, 5, !dbg !16
  %27 = shl i32 %17, 5, !dbg !16
  %28 = shl i32 %18, 5, !dbg !16
  %29 = shl i32 %19, 5, !dbg !16
  %30 = or disjoint i32 %26, %25, !dbg !17
  %31 = or disjoint i32 %27, %25, !dbg !17
  %32 = or disjoint i32 %28, %25, !dbg !17
  %33 = or disjoint i32 %29, %25, !dbg !17
  %34 = sext i32 %30 to i64, !dbg !18
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !18
  %36 = sext i32 %31 to i64, !dbg !18
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !18
  %38 = sext i32 %32 to i64, !dbg !18
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !18
  %40 = sext i32 %33 to i64, !dbg !18
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !18
  %42 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %35, i1 %20, i32 0, i1 %20, i32 0, i1 %20, i32 0, i1 %20, i32 0, i1 %20) #5, !dbg !19
  %43 = extractvalue { i32, i32, i32, i32 } %42, 0, !dbg !19
  %44 = extractvalue { i32, i32, i32, i32 } %42, 1, !dbg !19
  %45 = extractvalue { i32, i32, i32, i32 } %42, 2, !dbg !19
  %46 = extractvalue { i32, i32, i32, i32 } %42, 3, !dbg !19
  %47 = bitcast i32 %43 to float, !dbg !19
  %48 = bitcast i32 %44 to float, !dbg !19
  %49 = bitcast i32 %45 to float, !dbg !19
  %50 = bitcast i32 %46 to float, !dbg !19
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %37, i1 %21, i32 0, i1 %21, i32 0, i1 %21, i32 0, i1 %21, i32 0, i1 %21) #5, !dbg !19
  %52 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !19
  %53 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !19
  %54 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !19
  %55 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !19
  %56 = bitcast i32 %52 to float, !dbg !19
  %57 = bitcast i32 %53 to float, !dbg !19
  %58 = bitcast i32 %54 to float, !dbg !19
  %59 = bitcast i32 %55 to float, !dbg !19
  %60 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %39, i1 %22, i32 0, i1 %22, i32 0, i1 %22, i32 0, i1 %22, i32 0, i1 %22) #5, !dbg !19
  %61 = extractvalue { i32, i32, i32, i32 } %60, 0, !dbg !19
  %62 = extractvalue { i32, i32, i32, i32 } %60, 1, !dbg !19
  %63 = extractvalue { i32, i32, i32, i32 } %60, 2, !dbg !19
  %64 = extractvalue { i32, i32, i32, i32 } %60, 3, !dbg !19
  %65 = bitcast i32 %61 to float, !dbg !19
  %66 = bitcast i32 %62 to float, !dbg !19
  %67 = bitcast i32 %63 to float, !dbg !19
  %68 = bitcast i32 %64 to float, !dbg !19
  %69 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %41, i1 %23, i32 0, i1 %23, i32 0, i1 %23, i32 0, i1 %23, i32 0, i1 %23) #5, !dbg !19
  %70 = extractvalue { i32, i32, i32, i32 } %69, 0, !dbg !19
  %71 = extractvalue { i32, i32, i32, i32 } %69, 1, !dbg !19
  %72 = extractvalue { i32, i32, i32, i32 } %69, 2, !dbg !19
  %73 = extractvalue { i32, i32, i32, i32 } %69, 3, !dbg !19
  %74 = bitcast i32 %70 to float, !dbg !19
  %75 = bitcast i32 %71 to float, !dbg !19
  %76 = bitcast i32 %72 to float, !dbg !19
  %77 = bitcast i32 %73 to float, !dbg !19
  %78 = fadd float %47, %48, !dbg !20
  %79 = fadd float %78, %49, !dbg !20
  %80 = fadd float %79, %50, !dbg !20
  %81 = select i1 %20, float %80, float 0.000000e+00, !dbg !20
  %82 = fadd float %56, %57, !dbg !20
  %83 = fadd float %82, %58, !dbg !20
  %84 = fadd float %83, %59, !dbg !20
  %85 = select i1 %21, float %84, float 0.000000e+00, !dbg !20
  %86 = fadd float %65, %66, !dbg !20
  %87 = fadd float %86, %67, !dbg !20
  %88 = fadd float %87, %68, !dbg !20
  %89 = select i1 %22, float %88, float 0.000000e+00, !dbg !20
  %90 = fadd float %74, %75, !dbg !20
  %91 = fadd float %90, %76, !dbg !20
  %92 = fadd float %91, %77, !dbg !20
  %93 = select i1 %23, float %92, float 0.000000e+00, !dbg !20
  %94 = bitcast float %81 to i32, !dbg !25
  %95 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %94, i32 4, i32 31), !dbg !25
  %96 = bitcast i32 %95 to float, !dbg !25
  %97 = fadd float %81, %96, !dbg !20
  %98 = bitcast float %97 to i32, !dbg !25
  %99 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %98, i32 2, i32 31), !dbg !25
  %100 = bitcast i32 %99 to float, !dbg !25
  %101 = fadd float %97, %100, !dbg !20
  %102 = bitcast float %101 to i32, !dbg !25
  %103 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %102, i32 1, i32 31), !dbg !25
  %104 = bitcast i32 %103 to float, !dbg !25
  %105 = fadd float %101, %104, !dbg !20
  %106 = bitcast float %85 to i32, !dbg !25
  %107 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %106, i32 4, i32 31), !dbg !25
  %108 = bitcast i32 %107 to float, !dbg !25
  %109 = fadd float %85, %108, !dbg !20
  %110 = bitcast float %109 to i32, !dbg !25
  %111 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %110, i32 2, i32 31), !dbg !25
  %112 = bitcast i32 %111 to float, !dbg !25
  %113 = fadd float %109, %112, !dbg !20
  %114 = bitcast float %113 to i32, !dbg !25
  %115 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %114, i32 1, i32 31), !dbg !25
  %116 = bitcast i32 %115 to float, !dbg !25
  %117 = fadd float %113, %116, !dbg !20
  %118 = bitcast float %89 to i32, !dbg !25
  %119 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %118, i32 4, i32 31), !dbg !25
  %120 = bitcast i32 %119 to float, !dbg !25
  %121 = fadd float %89, %120, !dbg !20
  %122 = bitcast float %121 to i32, !dbg !25
  %123 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %122, i32 2, i32 31), !dbg !25
  %124 = bitcast i32 %123 to float, !dbg !25
  %125 = fadd float %121, %124, !dbg !20
  %126 = bitcast float %125 to i32, !dbg !25
  %127 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %126, i32 1, i32 31), !dbg !25
  %128 = bitcast i32 %127 to float, !dbg !25
  %129 = fadd float %125, %128, !dbg !20
  %130 = bitcast float %93 to i32, !dbg !25
  %131 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %130, i32 4, i32 31), !dbg !25
  %132 = bitcast i32 %131 to float, !dbg !25
  %133 = fadd float %93, %132, !dbg !20
  %134 = bitcast float %133 to i32, !dbg !25
  %135 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %134, i32 2, i32 31), !dbg !25
  %136 = bitcast i32 %135 to float, !dbg !25
  %137 = fadd float %133, %136, !dbg !20
  %138 = bitcast float %137 to i32, !dbg !25
  %139 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %138, i32 1, i32 31), !dbg !25
  %140 = bitcast i32 %139 to float, !dbg !25
  %141 = fadd float %137, %140, !dbg !20
  %142 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !26
  %143 = bitcast float %105 to <1 x i32>, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %142, <1 x i32> %143, i1 true) #5, !dbg !26
  %144 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !26
  %145 = bitcast float %117 to <1 x i32>, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %144, <1 x i32> %145, i1 true) #5, !dbg !26
  %146 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !26
  %147 = bitcast float %129 to <1 x i32>, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %146, <1 x i32> %147, i1 true) #5, !dbg !26
  %148 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !26
  %149 = bitcast float %141 to <1 x i32>, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %148, <1 x i32> %149, i1 true) #5, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %150 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !26
  %151 = load float, ptr addrspace(3) %150, align 4, !dbg !26
  %152 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %151, float 3.200000e+01) #5, !dbg !26
  %153 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %105, float 3.200000e+01) #5, !dbg !26
  %154 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %117, float 3.200000e+01) #5, !dbg !26
  %155 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %129, float 3.200000e+01) #5, !dbg !26
  %156 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %141, float 3.200000e+01) #5, !dbg !26
  %157 = fsub float %47, %153, !dbg !27
  %158 = fsub float %48, %153, !dbg !27
  %159 = fsub float %49, %153, !dbg !27
  %160 = fsub float %50, %153, !dbg !27
  %161 = fsub float %56, %154, !dbg !27
  %162 = fsub float %57, %154, !dbg !27
  %163 = fsub float %58, %154, !dbg !27
  %164 = fsub float %59, %154, !dbg !27
  %165 = fsub float %65, %155, !dbg !27
  %166 = fsub float %66, %155, !dbg !27
  %167 = fsub float %67, %155, !dbg !27
  %168 = fsub float %68, %155, !dbg !27
  %169 = fsub float %74, %156, !dbg !27
  %170 = fsub float %75, %156, !dbg !27
  %171 = fsub float %76, %156, !dbg !27
  %172 = fsub float %77, %156, !dbg !27
  %173 = fmul float %157, %157, !dbg !28
  %174 = fmul float %158, %158, !dbg !28
  %175 = fmul float %159, %159, !dbg !28
  %176 = fmul float %160, %160, !dbg !28
  %177 = fmul float %161, %161, !dbg !28
  %178 = fmul float %162, %162, !dbg !28
  %179 = fmul float %163, %163, !dbg !28
  %180 = fmul float %164, %164, !dbg !28
  %181 = fmul float %165, %165, !dbg !28
  %182 = fmul float %166, %166, !dbg !28
  %183 = fmul float %167, %167, !dbg !28
  %184 = fmul float %168, %168, !dbg !28
  %185 = fmul float %169, %169, !dbg !28
  %186 = fmul float %170, %170, !dbg !28
  %187 = fmul float %171, %171, !dbg !28
  %188 = fmul float %172, %172, !dbg !28
  %189 = fadd float %173, %174, !dbg !29
  %190 = fadd float %175, %189, !dbg !29
  %191 = fadd float %176, %190, !dbg !29
  %192 = select i1 %20, float %191, float 0.000000e+00, !dbg !29
  %193 = fadd float %177, %178, !dbg !29
  %194 = fadd float %179, %193, !dbg !29
  %195 = fadd float %180, %194, !dbg !29
  %196 = select i1 %21, float %195, float 0.000000e+00, !dbg !29
  %197 = fadd float %181, %182, !dbg !29
  %198 = fadd float %183, %197, !dbg !29
  %199 = fadd float %184, %198, !dbg !29
  %200 = select i1 %22, float %199, float 0.000000e+00, !dbg !29
  %201 = fadd float %185, %186, !dbg !29
  %202 = fadd float %187, %201, !dbg !29
  %203 = fadd float %188, %202, !dbg !29
  %204 = select i1 %23, float %203, float 0.000000e+00, !dbg !29
  %205 = bitcast float %192 to i32, !dbg !31
  %206 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %205, i32 4, i32 31), !dbg !31
  %207 = bitcast i32 %206 to float, !dbg !31
  %208 = fadd float %192, %207, !dbg !29
  %209 = bitcast float %208 to i32, !dbg !31
  %210 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %209, i32 2, i32 31), !dbg !31
  %211 = bitcast i32 %210 to float, !dbg !31
  %212 = fadd float %208, %211, !dbg !29
  %213 = bitcast float %212 to i32, !dbg !31
  %214 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %213, i32 1, i32 31), !dbg !31
  %215 = bitcast i32 %214 to float, !dbg !31
  %216 = fadd float %212, %215, !dbg !29
  %217 = bitcast float %196 to i32, !dbg !31
  %218 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %217, i32 4, i32 31), !dbg !31
  %219 = bitcast i32 %218 to float, !dbg !31
  %220 = fadd float %196, %219, !dbg !29
  %221 = bitcast float %220 to i32, !dbg !31
  %222 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %221, i32 2, i32 31), !dbg !31
  %223 = bitcast i32 %222 to float, !dbg !31
  %224 = fadd float %220, %223, !dbg !29
  %225 = bitcast float %224 to i32, !dbg !31
  %226 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %225, i32 1, i32 31), !dbg !31
  %227 = bitcast i32 %226 to float, !dbg !31
  %228 = fadd float %224, %227, !dbg !29
  %229 = bitcast float %200 to i32, !dbg !31
  %230 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %229, i32 4, i32 31), !dbg !31
  %231 = bitcast i32 %230 to float, !dbg !31
  %232 = fadd float %200, %231, !dbg !29
  %233 = bitcast float %232 to i32, !dbg !31
  %234 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %233, i32 2, i32 31), !dbg !31
  %235 = bitcast i32 %234 to float, !dbg !31
  %236 = fadd float %232, %235, !dbg !29
  %237 = bitcast float %236 to i32, !dbg !31
  %238 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %237, i32 1, i32 31), !dbg !31
  %239 = bitcast i32 %238 to float, !dbg !31
  %240 = fadd float %236, %239, !dbg !29
  %241 = bitcast float %204 to i32, !dbg !31
  %242 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %241, i32 4, i32 31), !dbg !31
  %243 = bitcast i32 %242 to float, !dbg !31
  %244 = fadd float %204, %243, !dbg !29
  %245 = bitcast float %244 to i32, !dbg !31
  %246 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %245, i32 2, i32 31), !dbg !31
  %247 = bitcast i32 %246 to float, !dbg !31
  %248 = fadd float %244, %247, !dbg !29
  %249 = bitcast float %248 to i32, !dbg !31
  %250 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %249, i32 1, i32 31), !dbg !31
  %251 = bitcast i32 %250 to float, !dbg !31
  %252 = fadd float %248, %251, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %253 = bitcast float %216 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %142, <1 x i32> %253, i1 true) #5, !dbg !32
  %254 = bitcast float %228 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %144, <1 x i32> %254, i1 true) #5, !dbg !32
  %255 = bitcast float %240 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %146, <1 x i32> %255, i1 true) #5, !dbg !32
  %256 = bitcast float %252 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %148, <1 x i32> %256, i1 true) #5, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %257 = load float, ptr addrspace(3) %150, align 4, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %142, <1 x i32> %253, i1 true) #5, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %144, <1 x i32> %254, i1 true) #5, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %146, <1 x i32> %255, i1 true) #5, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %148, <1 x i32> %256, i1 true) #5, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %258 = load i32, ptr addrspace(3) %150, align 4, !dbg !33
  %259 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %257, float 3.200000e+01) #5, !dbg !34
  %260 = fadd float %259, 0x3EE4F8B580000000, !dbg !35
  %261 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !32
  %.not.i = icmp eq i32 %261, 0, !dbg !32
  br i1 %.not.i, label %264, label %262, !dbg !32

262:                                              ; preds = %6
  %263 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %260), !dbg !32
  br label %__nv_rsqrtf.exit, !dbg !32

264:                                              ; preds = %6
  %265 = tail call float @llvm.nvvm.rsqrt.approx.f(float %260), !dbg !32
  br label %__nv_rsqrtf.exit, !dbg !32

__nv_rsqrtf.exit:                                 ; preds = %262, %264
  %.0.i = phi float [ %263, %262 ], [ %265, %264 ], !dbg !32
  %266 = or disjoint i32 %8, %15, !dbg !13
  %267 = icmp slt i32 %266, 128, !dbg !14
  %268 = sext i32 %266 to i64, !dbg !36
  %269 = getelementptr float, ptr addrspace(1) %3, i64 %268, !dbg !36
  %270 = and i32 %9, 128, !dbg !37
  %271 = icmp eq i32 %270, 0, !dbg !37
  %272 = bitcast float %.0.i to i32, !dbg !37
  %273 = and i1 %271, %267, !dbg !37
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %272, ptr addrspace(1) %269, i1 %273) #5, !dbg !37
  %274 = getelementptr float, ptr addrspace(1) %1, i64 %268, !dbg !38
  %275 = bitcast float %152 to i32, !dbg !39
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %275, ptr addrspace(1) %274, i1 %273) #5, !dbg !39
  %276 = getelementptr float, ptr addrspace(1) %2, i64 %268, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %258, ptr addrspace(1) %276, i1 %273) #5, !dbg !41
  ret void, !dbg !42
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cvrzc52y3f2llkmt2yfomjg3e77by66lifg6g4gs5g5btxeqjlbi.py", directory: "inductor_cache/vr")
!4 = !{ptr @triton_per_fused_native_group_norm_28, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_native_group_norm_28, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_native_group_norm_28", linkageName: "triton_per_fused_native_group_norm_28", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 38, scope: !7)
!17 = !DILocation(line: 31, column: 35, scope: !7)
!18 = !DILocation(line: 31, column: 30, scope: !7)
!19 = !DILocation(line: 31, column: 43, scope: !7)
!20 = !DILocation(line: 256, column: 15, scope: !21, inlinedAt: !24)
!21 = distinct !DILexicalBlockFile(scope: !23, file: !22, discriminator: 0)
!22 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!23 = distinct !DILexicalBlockFile(scope: !7, file: !22, discriminator: 0)
!24 = !DILocation(line: 36, column: 24, scope: !7)
!25 = !DILocation(line: 267, column: 36, scope: !23, inlinedAt: !24)
!26 = !DILocation(line: 39, column: 19, scope: !7)
!27 = !DILocation(line: 40, column: 19, scope: !7)
!28 = !DILocation(line: 41, column: 20, scope: !7)
!29 = !DILocation(line: 256, column: 15, scope: !21, inlinedAt: !30)
!30 = !DILocation(line: 44, column: 26, scope: !7)
!31 = !DILocation(line: 267, column: 36, scope: !23, inlinedAt: !30)
!32 = !DILocation(line: 49, column: 28, scope: !7)
!33 = !DILocation(line: 44, column: 29, scope: !7)
!34 = !DILocation(line: 46, column: 20, scope: !7)
!35 = !DILocation(line: 48, column: 20, scope: !7)
!36 = !DILocation(line: 50, column: 25, scope: !7)
!37 = !DILocation(line: 50, column: 37, scope: !7)
!38 = !DILocation(line: 51, column: 25, scope: !7)
!39 = !DILocation(line: 51, column: 37, scope: !7)
!40 = !DILocation(line: 52, column: 25, scope: !7)
!41 = !DILocation(line: 52, column: 37, scope: !7)
!42 = !DILocation(line: 52, column: 4, scope: !7)
