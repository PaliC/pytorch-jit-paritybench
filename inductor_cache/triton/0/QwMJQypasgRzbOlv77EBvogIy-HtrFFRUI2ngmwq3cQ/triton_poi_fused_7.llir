; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_7(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.z;", "=r"() #2, !dbg !11
  %7 = tail call i32 asm "mov.u32 $0, %nctaid.y;", "=r"() #2, !dbg !12
  %8 = mul i32 %7, %6, !dbg !13
  %9 = add i32 %8, %5, !dbg !14
  %10 = shl i32 %9, 8, !dbg !15
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !16
  %12 = lshr i32 %11, 4, !dbg !16
  %13 = and i32 %12, 15, !dbg !16
  %14 = shl i32 %11, 2, !dbg !16
  %15 = and i32 %14, 252, !dbg !16
  %16 = or disjoint i32 %10, %13, !dbg !17
  %17 = or disjoint i32 %16, 16, !dbg !17
  %18 = or disjoint i32 %16, 32, !dbg !17
  %19 = or disjoint i32 %16, 48, !dbg !17
  %20 = or disjoint i32 %16, 64, !dbg !17
  %21 = or disjoint i32 %16, 80, !dbg !17
  %22 = or disjoint i32 %16, 96, !dbg !17
  %23 = or disjoint i32 %16, 112, !dbg !17
  %24 = or disjoint i32 %16, 128, !dbg !17
  %25 = or disjoint i32 %16, 144, !dbg !17
  %26 = or disjoint i32 %16, 160, !dbg !17
  %27 = or disjoint i32 %16, 176, !dbg !17
  %28 = or disjoint i32 %16, 192, !dbg !17
  %29 = or disjoint i32 %16, 208, !dbg !17
  %30 = or disjoint i32 %16, 224, !dbg !17
  %31 = or disjoint i32 %16, 240, !dbg !17
  %32 = or disjoint i32 %10, %15, !dbg !17
  %33 = icmp slt i32 %16, 8388608, !dbg !18
  %34 = icmp slt i32 %17, 8388608, !dbg !18
  %35 = icmp slt i32 %18, 8388608, !dbg !18
  %36 = icmp slt i32 %19, 8388608, !dbg !18
  %37 = icmp slt i32 %20, 8388608, !dbg !18
  %38 = icmp slt i32 %21, 8388608, !dbg !18
  %39 = icmp slt i32 %22, 8388608, !dbg !18
  %40 = icmp slt i32 %23, 8388608, !dbg !18
  %41 = icmp slt i32 %24, 8388608, !dbg !18
  %42 = icmp slt i32 %25, 8388608, !dbg !18
  %43 = icmp slt i32 %26, 8388608, !dbg !18
  %44 = icmp slt i32 %27, 8388608, !dbg !18
  %45 = icmp slt i32 %28, 8388608, !dbg !18
  %46 = icmp slt i32 %29, 8388608, !dbg !18
  %47 = icmp slt i32 %30, 8388608, !dbg !18
  %48 = icmp slt i32 %31, 8388608, !dbg !18
  %49 = icmp slt i32 %32, 8388608, !dbg !18
  %50 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !19
  %51 = shl i32 %50, 4, !dbg !20
  %52 = and i32 %11, 15, !dbg !21
  %.lobit13 = lshr i32 %11, 6, !dbg !21
  %53 = and i32 %.lobit13, 3, !dbg !21
  %54 = or disjoint i32 %51, %52, !dbg !22
  %55 = or disjoint i32 %51, %53, !dbg !22
  %56 = or disjoint i32 %55, 4, !dbg !22
  %57 = or disjoint i32 %55, 8, !dbg !22
  %58 = icmp slt i32 %54, 9, !dbg !23
  %59 = icmp slt i32 %55, 9, !dbg !23
  %60 = icmp slt i32 %56, 9, !dbg !23
  %61 = icmp slt i32 %57, 9, !dbg !23
  %62 = icmp slt i32 %51, 0, !dbg !23
  %.frozen = freeze i32 %32, !dbg !24
  %63 = sdiv i32 %.frozen, 2048, !dbg !24
  %64 = mul i32 %63, 2048, !dbg !25
  %.decomposed = sub i32 %.frozen, %64, !dbg !25
  %65 = mul i32 %16, 9, !dbg !26
  %66 = mul i32 %17, 9, !dbg !26
  %67 = mul i32 %18, 9, !dbg !26
  %68 = mul i32 %19, 9, !dbg !26
  %69 = mul i32 %20, 9, !dbg !26
  %70 = mul i32 %21, 9, !dbg !26
  %71 = mul i32 %22, 9, !dbg !26
  %72 = mul i32 %23, 9, !dbg !26
  %73 = mul i32 %24, 9, !dbg !26
  %74 = mul i32 %25, 9, !dbg !26
  %75 = mul i32 %26, 9, !dbg !26
  %76 = mul i32 %27, 9, !dbg !26
  %77 = mul i32 %28, 9, !dbg !26
  %78 = mul i32 %29, 9, !dbg !26
  %79 = mul i32 %30, 9, !dbg !26
  %80 = mul i32 %31, 9, !dbg !26
  %81 = add i32 %65, %54, !dbg !27
  %82 = add i32 %54, %66, !dbg !27
  %83 = add i32 %54, %67, !dbg !27
  %84 = add i32 %54, %68, !dbg !27
  %85 = add i32 %54, %69, !dbg !27
  %86 = add i32 %54, %70, !dbg !27
  %87 = add i32 %54, %71, !dbg !27
  %88 = add i32 %54, %72, !dbg !27
  %89 = add i32 %54, %73, !dbg !27
  %90 = add i32 %54, %74, !dbg !27
  %91 = add i32 %54, %75, !dbg !27
  %92 = add i32 %54, %76, !dbg !27
  %93 = add i32 %54, %77, !dbg !27
  %94 = add i32 %54, %78, !dbg !27
  %95 = add i32 %54, %79, !dbg !27
  %96 = add i32 %54, %80, !dbg !27
  %97 = sext i32 %81 to i64, !dbg !28
  %98 = getelementptr float, ptr addrspace(1) %0, i64 %97, !dbg !28
  %99 = sext i32 %82 to i64, !dbg !28
  %100 = getelementptr float, ptr addrspace(1) %0, i64 %99, !dbg !28
  %101 = sext i32 %83 to i64, !dbg !28
  %102 = getelementptr float, ptr addrspace(1) %0, i64 %101, !dbg !28
  %103 = sext i32 %84 to i64, !dbg !28
  %104 = getelementptr float, ptr addrspace(1) %0, i64 %103, !dbg !28
  %105 = sext i32 %85 to i64, !dbg !28
  %106 = getelementptr float, ptr addrspace(1) %0, i64 %105, !dbg !28
  %107 = sext i32 %86 to i64, !dbg !28
  %108 = getelementptr float, ptr addrspace(1) %0, i64 %107, !dbg !28
  %109 = sext i32 %87 to i64, !dbg !28
  %110 = getelementptr float, ptr addrspace(1) %0, i64 %109, !dbg !28
  %111 = sext i32 %88 to i64, !dbg !28
  %112 = getelementptr float, ptr addrspace(1) %0, i64 %111, !dbg !28
  %113 = sext i32 %89 to i64, !dbg !28
  %114 = getelementptr float, ptr addrspace(1) %0, i64 %113, !dbg !28
  %115 = sext i32 %90 to i64, !dbg !28
  %116 = getelementptr float, ptr addrspace(1) %0, i64 %115, !dbg !28
  %117 = sext i32 %91 to i64, !dbg !28
  %118 = getelementptr float, ptr addrspace(1) %0, i64 %117, !dbg !28
  %119 = sext i32 %92 to i64, !dbg !28
  %120 = getelementptr float, ptr addrspace(1) %0, i64 %119, !dbg !28
  %121 = sext i32 %93 to i64, !dbg !28
  %122 = getelementptr float, ptr addrspace(1) %0, i64 %121, !dbg !28
  %123 = sext i32 %94 to i64, !dbg !28
  %124 = getelementptr float, ptr addrspace(1) %0, i64 %123, !dbg !28
  %125 = sext i32 %95 to i64, !dbg !28
  %126 = getelementptr float, ptr addrspace(1) %0, i64 %125, !dbg !28
  %127 = sext i32 %96 to i64, !dbg !28
  %128 = getelementptr float, ptr addrspace(1) %0, i64 %127, !dbg !28
  %129 = and i1 %58, %33, !dbg !29
  %130 = and i1 %34, %58, !dbg !29
  %131 = and i1 %35, %58, !dbg !29
  %132 = and i1 %36, %58, !dbg !29
  %133 = and i1 %37, %58, !dbg !29
  %134 = and i1 %38, %58, !dbg !29
  %135 = and i1 %39, %58, !dbg !29
  %136 = and i1 %40, %58, !dbg !29
  %137 = and i1 %41, %58, !dbg !29
  %138 = and i1 %42, %58, !dbg !29
  %139 = and i1 %43, %58, !dbg !29
  %140 = and i1 %44, %58, !dbg !29
  %141 = and i1 %45, %58, !dbg !29
  %142 = and i1 %46, %58, !dbg !29
  %143 = and i1 %47, %58, !dbg !29
  %144 = and i1 %48, %58, !dbg !29
  %145 = and i1 %59, %49, !dbg !29
  %146 = and i1 %60, %49, !dbg !29
  %147 = and i1 %61, %49, !dbg !29
  %148 = and i1 %62, %49, !dbg !29
  %149 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %98, i1 %129) #2, !dbg !30
  %150 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %100, i1 %130) #2, !dbg !30
  %151 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %102, i1 %131) #2, !dbg !30
  %152 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %104, i1 %132) #2, !dbg !30
  %153 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %106, i1 %133) #2, !dbg !30
  %154 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %108, i1 %134) #2, !dbg !30
  %155 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %110, i1 %135) #2, !dbg !30
  %156 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %112, i1 %136) #2, !dbg !30
  %157 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %114, i1 %137) #2, !dbg !30
  %158 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %116, i1 %138) #2, !dbg !30
  %159 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %118, i1 %139) #2, !dbg !30
  %160 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %120, i1 %140) #2, !dbg !30
  %161 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %122, i1 %141) #2, !dbg !30
  %162 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %124, i1 %142) #2, !dbg !30
  %163 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %126, i1 %143) #2, !dbg !30
  %164 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %128, i1 %144) #2, !dbg !30
  %165 = shl i32 %55, 11, !dbg !31
  %166 = shl i32 %56, 11, !dbg !31
  %167 = shl i32 %57, 11, !dbg !31
  %168 = or disjoint i32 %165, 24576, !dbg !31
  %169 = mul i32 %63, 18432, !dbg !32
  %170 = add i32 %169, %.decomposed, !dbg !33
  %171 = add i32 %170, %165, !dbg !34
  %172 = add i32 %170, %166, !dbg !34
  %173 = add i32 %170, %167, !dbg !34
  %174 = add i32 %170, %168, !dbg !34
  %175 = sext i32 %171 to i64, !dbg !35
  %176 = getelementptr float, ptr addrspace(1) %1, i64 %175, !dbg !35
  %177 = sext i32 %172 to i64, !dbg !35
  %178 = getelementptr float, ptr addrspace(1) %1, i64 %177, !dbg !35
  %179 = sext i32 %173 to i64, !dbg !35
  %180 = getelementptr float, ptr addrspace(1) %1, i64 %179, !dbg !35
  %181 = sext i32 %174 to i64, !dbg !35
  %182 = getelementptr float, ptr addrspace(1) %1, i64 %181, !dbg !35
  %183 = shl i32 %11, 8, !dbg !36
  %184 = and i32 %183, 3840, !dbg !36
  %185 = or disjoint i32 %184, %13, !dbg !36
  %186 = and i32 %14, 1020, !dbg !36
  %187 = lshr exact i32 %184, 6, !dbg !36
  %188 = add nuw nsw i32 %187, %185, !dbg !36
  %189 = zext nneg i32 %188 to i64, !dbg !36
  %190 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %189, !dbg !36
  %191 = insertelement <1 x i32> poison, i32 %149, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %190, <1 x i32> %191, i1 true) #2, !dbg !36
  %192 = or disjoint i32 %185, 16, !dbg !36
  %193 = add nuw nsw i32 %192, %187, !dbg !36
  %194 = zext nneg i32 %193 to i64, !dbg !36
  %195 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %194, !dbg !36
  %196 = insertelement <1 x i32> poison, i32 %150, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %195, <1 x i32> %196, i1 true) #2, !dbg !36
  %197 = or disjoint i32 %185, 32, !dbg !36
  %198 = add nuw nsw i32 %197, %187, !dbg !36
  %199 = zext nneg i32 %198 to i64, !dbg !36
  %200 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %199, !dbg !36
  %201 = insertelement <1 x i32> poison, i32 %151, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %200, <1 x i32> %201, i1 true) #2, !dbg !36
  %202 = or disjoint i32 %185, 48, !dbg !36
  %203 = add nuw nsw i32 %202, %187, !dbg !36
  %204 = zext nneg i32 %203 to i64, !dbg !36
  %205 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %204, !dbg !36
  %206 = insertelement <1 x i32> poison, i32 %152, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %205, <1 x i32> %206, i1 true) #2, !dbg !36
  %207 = or disjoint i32 %185, 64, !dbg !36
  %208 = add nuw nsw i32 %207, %187, !dbg !36
  %209 = zext nneg i32 %208 to i64, !dbg !36
  %210 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %209, !dbg !36
  %211 = insertelement <1 x i32> poison, i32 %153, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %210, <1 x i32> %211, i1 true) #2, !dbg !36
  %212 = or disjoint i32 %185, 80, !dbg !36
  %213 = add nuw nsw i32 %212, %187, !dbg !36
  %214 = zext nneg i32 %213 to i64, !dbg !36
  %215 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %214, !dbg !36
  %216 = insertelement <1 x i32> poison, i32 %154, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %215, <1 x i32> %216, i1 true) #2, !dbg !36
  %217 = or disjoint i32 %185, 96, !dbg !36
  %218 = add nuw nsw i32 %217, %187, !dbg !36
  %219 = zext nneg i32 %218 to i64, !dbg !36
  %220 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %219, !dbg !36
  %221 = insertelement <1 x i32> poison, i32 %155, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %220, <1 x i32> %221, i1 true) #2, !dbg !36
  %222 = or disjoint i32 %185, 112, !dbg !36
  %223 = add nuw nsw i32 %222, %187, !dbg !36
  %224 = zext nneg i32 %223 to i64, !dbg !36
  %225 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %224, !dbg !36
  %226 = insertelement <1 x i32> poison, i32 %156, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %225, <1 x i32> %226, i1 true) #2, !dbg !36
  %227 = or disjoint i32 %185, 128, !dbg !36
  %228 = add nuw nsw i32 %227, %187, !dbg !36
  %229 = zext nneg i32 %228 to i64, !dbg !36
  %230 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %229, !dbg !36
  %231 = insertelement <1 x i32> poison, i32 %157, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %230, <1 x i32> %231, i1 true) #2, !dbg !36
  %232 = or disjoint i32 %185, 144, !dbg !36
  %233 = add nuw nsw i32 %232, %187, !dbg !36
  %234 = zext nneg i32 %233 to i64, !dbg !36
  %235 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %234, !dbg !36
  %236 = insertelement <1 x i32> poison, i32 %158, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %235, <1 x i32> %236, i1 true) #2, !dbg !36
  %237 = or disjoint i32 %185, 160, !dbg !36
  %238 = add nuw nsw i32 %237, %187, !dbg !36
  %239 = zext nneg i32 %238 to i64, !dbg !36
  %240 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %239, !dbg !36
  %241 = insertelement <1 x i32> poison, i32 %159, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %240, <1 x i32> %241, i1 true) #2, !dbg !36
  %242 = or disjoint i32 %185, 176, !dbg !36
  %243 = add nuw nsw i32 %242, %187, !dbg !36
  %244 = zext nneg i32 %243 to i64, !dbg !36
  %245 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %244, !dbg !36
  %246 = insertelement <1 x i32> poison, i32 %160, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %245, <1 x i32> %246, i1 true) #2, !dbg !36
  %247 = or disjoint i32 %185, 192, !dbg !36
  %248 = add nuw nsw i32 %247, %187, !dbg !36
  %249 = zext nneg i32 %248 to i64, !dbg !36
  %250 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %249, !dbg !36
  %251 = insertelement <1 x i32> poison, i32 %161, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %250, <1 x i32> %251, i1 true) #2, !dbg !36
  %252 = or disjoint i32 %185, 208, !dbg !36
  %253 = add nuw nsw i32 %252, %187, !dbg !36
  %254 = zext nneg i32 %253 to i64, !dbg !36
  %255 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %254, !dbg !36
  %256 = insertelement <1 x i32> poison, i32 %162, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %255, <1 x i32> %256, i1 true) #2, !dbg !36
  %257 = or disjoint i32 %185, 224, !dbg !36
  %258 = add nuw nsw i32 %257, %187, !dbg !36
  %259 = zext nneg i32 %258 to i64, !dbg !36
  %260 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %259, !dbg !36
  %261 = insertelement <1 x i32> poison, i32 %163, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %260, <1 x i32> %261, i1 true) #2, !dbg !36
  %262 = or disjoint i32 %185, 240, !dbg !36
  %263 = add nuw nsw i32 %262, %187, !dbg !36
  %264 = zext nneg i32 %263 to i64, !dbg !36
  %265 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %264, !dbg !36
  %266 = insertelement <1 x i32> poison, i32 %164, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %265, <1 x i32> %266, i1 true) #2, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %267 = lshr i32 %14, 6, !dbg !36
  %268 = and i32 %267, 12, !dbg !36
  %269 = add nuw nsw i32 %268, %186, !dbg !36
  %270 = zext nneg i32 %269 to i64, !dbg !36
  %271 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %270, !dbg !36
  %272 = or disjoint i32 %186, 1024, !dbg !36
  %273 = lshr i32 %272, 6, !dbg !36
  %274 = and i32 %273, 28, !dbg !36
  %275 = add nuw nsw i32 %274, %272, !dbg !36
  %276 = zext nneg i32 %275 to i64, !dbg !36
  %277 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %276, !dbg !36
  %278 = load <4 x i32>, ptr addrspace(3) %277, align 16, !dbg !36
  %279 = or disjoint i32 %186, 2048, !dbg !36
  %280 = lshr i32 %279, 6, !dbg !36
  %281 = and i32 %280, 44, !dbg !36
  %282 = add nuw nsw i32 %281, %279, !dbg !36
  %283 = zext nneg i32 %282 to i64, !dbg !36
  %284 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %283, !dbg !36
  %285 = load <4 x i32>, ptr addrspace(3) %284, align 16, !dbg !36
  %286 = or disjoint i32 %186, 3072, !dbg !36
  %287 = lshr i32 %286, 6, !dbg !36
  %288 = and i32 %287, 60, !dbg !36
  %289 = add nuw nsw i32 %288, %286, !dbg !36
  %290 = zext nneg i32 %289 to i64, !dbg !36
  %291 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %290, !dbg !36
  %292 = load <4 x i32>, ptr addrspace(3) %291, align 16, !dbg !36
  %.extract = load i32, ptr addrspace(3) %271, align 16, !dbg !36
  %293 = getelementptr inbounds i8, ptr addrspace(3) %271, i64 4, !dbg !36
  %.extract19 = load i32, ptr addrspace(3) %293, align 4, !dbg !36
  %294 = getelementptr inbounds i8, ptr addrspace(3) %271, i64 8, !dbg !36
  %.extract20 = load i32, ptr addrspace(3) %294, align 8, !dbg !36
  %295 = getelementptr inbounds i8, ptr addrspace(3) %271, i64 12, !dbg !36
  %.extract21 = load i32, ptr addrspace(3) %295, align 4, !dbg !36
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract19, i32 %.extract20, i32 %.extract21, ptr addrspace(1) %176, i1 %145) #2, !dbg !36
  %.extract22 = extractelement <4 x i32> %278, i64 0, !dbg !36
  %.extract23 = extractelement <4 x i32> %278, i64 1, !dbg !36
  %.extract24 = extractelement <4 x i32> %278, i64 2, !dbg !36
  %.extract25 = extractelement <4 x i32> %278, i64 3, !dbg !36
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract22, i32 %.extract23, i32 %.extract24, i32 %.extract25, ptr addrspace(1) %178, i1 %146) #2, !dbg !36
  %.extract26 = extractelement <4 x i32> %285, i64 0, !dbg !36
  %.extract27 = extractelement <4 x i32> %285, i64 1, !dbg !36
  %.extract28 = extractelement <4 x i32> %285, i64 2, !dbg !36
  %.extract29 = extractelement <4 x i32> %285, i64 3, !dbg !36
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract26, i32 %.extract27, i32 %.extract28, i32 %.extract29, ptr addrspace(1) %180, i1 %147) #2, !dbg !36
  %.extract30 = extractelement <4 x i32> %292, i64 0, !dbg !36
  %.extract31 = extractelement <4 x i32> %292, i64 1, !dbg !36
  %.extract32 = extractelement <4 x i32> %292, i64 2, !dbg !36
  %.extract33 = extractelement <4 x i32> %292, i64 3, !dbg !36
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract30, i32 %.extract31, i32 %.extract32, i32 %.extract33, ptr addrspace(1) %182, i1 %148) #2, !dbg !36
  ret void, !dbg !37
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cxjinqx4r5kkhqielr5jyccg5eaay67tit6mglf364bpyxlip4ab.py", directory: "inductor_cache/xj")
!4 = !{ptr @triton_poi_fused_7, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_7, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_7", linkageName: "triton_poi_fused_7", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 29, scope: !7)
!11 = !DILocation(line: 22, column: 48, scope: !7)
!12 = !DILocation(line: 22, column: 69, scope: !7)
!13 = !DILocation(line: 22, column: 53, scope: !7)
!14 = !DILocation(line: 22, column: 34, scope: !7)
!15 = !DILocation(line: 22, column: 75, scope: !7)
!16 = !DILocation(line: 23, column: 44, scope: !7)
!17 = !DILocation(line: 23, column: 23, scope: !7)
!18 = !DILocation(line: 24, column: 21, scope: !7)
!19 = !DILocation(line: 25, column: 28, scope: !7)
!20 = !DILocation(line: 25, column: 33, scope: !7)
!21 = !DILocation(line: 26, column: 44, scope: !7)
!22 = !DILocation(line: 26, column: 23, scope: !7)
!23 = !DILocation(line: 27, column: 21, scope: !7)
!24 = !DILocation(line: 31, column: 19, scope: !7)
!25 = !DILocation(line: 30, column: 19, scope: !7)
!26 = !DILocation(line: 32, column: 37, scope: !7)
!27 = !DILocation(line: 32, column: 35, scope: !7)
!28 = !DILocation(line: 32, column: 30, scope: !7)
!29 = !DILocation(line: 32, column: 50, scope: !7)
!30 = !DILocation(line: 32, column: 42, scope: !7)
!31 = !DILocation(line: 33, column: 35, scope: !7)
!32 = !DILocation(line: 33, column: 46, scope: !7)
!33 = !DILocation(line: 33, column: 30, scope: !7)
!34 = !DILocation(line: 33, column: 40, scope: !7)
!35 = !DILocation(line: 33, column: 25, scope: !7)
!36 = !DILocation(line: 33, column: 57, scope: !7)
!37 = !DILocation(line: 33, column: 4, scope: !7)
