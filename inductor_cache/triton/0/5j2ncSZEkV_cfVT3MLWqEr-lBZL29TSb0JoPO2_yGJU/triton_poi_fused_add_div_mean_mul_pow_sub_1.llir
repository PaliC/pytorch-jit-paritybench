; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_add_div_mean_mul_pow_sub_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %9 = shl i32 %8, 6, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 1, !dbg !12
  %12 = and i32 %11, 62, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %14 = icmp slt i32 %13, 64, !dbg !14
  %15 = shl i32 %13, 2, !dbg !15
  %16 = or disjoint i32 %15, 4, !dbg !15
  %17 = sext i32 %15 to i64, !dbg !16
  %18 = getelementptr float, ptr addrspace(1) %0, i64 %17, !dbg !16
  %19 = sext i32 %16 to i64, !dbg !16
  %20 = getelementptr float, ptr addrspace(1) %0, i64 %19, !dbg !16
  %21 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %18, i1 %14) #1, !dbg !17
  %22 = bitcast i32 %21 to float, !dbg !17
  %23 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %20, i1 %14) #1, !dbg !17
  %24 = bitcast i32 %23 to float, !dbg !17
  %25 = getelementptr float, ptr addrspace(1) %1, i64 %17, !dbg !18
  %26 = getelementptr float, ptr addrspace(1) %1, i64 %19, !dbg !18
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 %14) #1, !dbg !19
  %28 = bitcast i32 %27 to float, !dbg !19
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 %14) #1, !dbg !19
  %30 = bitcast i32 %29 to float, !dbg !19
  %31 = getelementptr float, ptr addrspace(1) %2, i64 %17, !dbg !20
  %32 = getelementptr float, ptr addrspace(1) %2, i64 %19, !dbg !20
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 %14) #1, !dbg !21
  %34 = bitcast i32 %33 to float, !dbg !21
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 %14) #1, !dbg !21
  %36 = bitcast i32 %35 to float, !dbg !21
  %37 = getelementptr float, ptr addrspace(1) %3, i64 %17, !dbg !22
  %38 = getelementptr float, ptr addrspace(1) %3, i64 %19, !dbg !22
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %14) #1, !dbg !23
  %40 = bitcast i32 %39 to float, !dbg !23
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 %14) #1, !dbg !23
  %42 = bitcast i32 %41 to float, !dbg !23
  %43 = getelementptr float, ptr addrspace(1) %4, i64 %17, !dbg !24
  %44 = getelementptr float, ptr addrspace(1) %4, i64 %19, !dbg !24
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 %14) #1, !dbg !25
  %46 = bitcast i32 %45 to float, !dbg !25
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 %14) #1, !dbg !25
  %48 = bitcast i32 %47 to float, !dbg !25
  %49 = or disjoint i32 %15, 1, !dbg !26
  %50 = or disjoint i32 %15, 5, !dbg !26
  %51 = sext i32 %49 to i64, !dbg !27
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !27
  %53 = sext i32 %50 to i64, !dbg !27
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !27
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 %14) #1, !dbg !28
  %56 = bitcast i32 %55 to float, !dbg !28
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 %14) #1, !dbg !28
  %58 = bitcast i32 %57 to float, !dbg !28
  %59 = getelementptr float, ptr addrspace(1) %1, i64 %51, !dbg !29
  %60 = getelementptr float, ptr addrspace(1) %1, i64 %53, !dbg !29
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 %14) #1, !dbg !30
  %62 = bitcast i32 %61 to float, !dbg !30
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 %14) #1, !dbg !30
  %64 = bitcast i32 %63 to float, !dbg !30
  %65 = getelementptr float, ptr addrspace(1) %2, i64 %51, !dbg !31
  %66 = getelementptr float, ptr addrspace(1) %2, i64 %53, !dbg !31
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 %14) #1, !dbg !32
  %68 = bitcast i32 %67 to float, !dbg !32
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 %14) #1, !dbg !32
  %70 = bitcast i32 %69 to float, !dbg !32
  %71 = getelementptr float, ptr addrspace(1) %3, i64 %51, !dbg !33
  %72 = getelementptr float, ptr addrspace(1) %3, i64 %53, !dbg !33
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %71, i1 %14) #1, !dbg !34
  %74 = bitcast i32 %73 to float, !dbg !34
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 %14) #1, !dbg !34
  %76 = bitcast i32 %75 to float, !dbg !34
  %77 = getelementptr float, ptr addrspace(1) %4, i64 %51, !dbg !35
  %78 = getelementptr float, ptr addrspace(1) %4, i64 %53, !dbg !35
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 %14) #1, !dbg !36
  %80 = bitcast i32 %79 to float, !dbg !36
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 %14) #1, !dbg !36
  %82 = bitcast i32 %81 to float, !dbg !36
  %83 = or disjoint i32 %15, 2, !dbg !37
  %84 = or disjoint i32 %15, 6, !dbg !37
  %85 = sext i32 %83 to i64, !dbg !38
  %86 = getelementptr float, ptr addrspace(1) %0, i64 %85, !dbg !38
  %87 = sext i32 %84 to i64, !dbg !38
  %88 = getelementptr float, ptr addrspace(1) %0, i64 %87, !dbg !38
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 %14) #1, !dbg !39
  %90 = bitcast i32 %89 to float, !dbg !39
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %88, i1 %14) #1, !dbg !39
  %92 = bitcast i32 %91 to float, !dbg !39
  %93 = getelementptr float, ptr addrspace(1) %1, i64 %85, !dbg !40
  %94 = getelementptr float, ptr addrspace(1) %1, i64 %87, !dbg !40
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 %14) #1, !dbg !41
  %96 = bitcast i32 %95 to float, !dbg !41
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 %14) #1, !dbg !41
  %98 = bitcast i32 %97 to float, !dbg !41
  %99 = getelementptr float, ptr addrspace(1) %2, i64 %85, !dbg !42
  %100 = getelementptr float, ptr addrspace(1) %2, i64 %87, !dbg !42
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %99, i1 %14) #1, !dbg !43
  %102 = bitcast i32 %101 to float, !dbg !43
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %100, i1 %14) #1, !dbg !43
  %104 = bitcast i32 %103 to float, !dbg !43
  %105 = getelementptr float, ptr addrspace(1) %3, i64 %85, !dbg !44
  %106 = getelementptr float, ptr addrspace(1) %3, i64 %87, !dbg !44
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %105, i1 %14) #1, !dbg !45
  %108 = bitcast i32 %107 to float, !dbg !45
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %106, i1 %14) #1, !dbg !45
  %110 = bitcast i32 %109 to float, !dbg !45
  %111 = getelementptr float, ptr addrspace(1) %4, i64 %85, !dbg !46
  %112 = getelementptr float, ptr addrspace(1) %4, i64 %87, !dbg !46
  %113 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %111, i1 %14) #1, !dbg !47
  %114 = bitcast i32 %113 to float, !dbg !47
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %112, i1 %14) #1, !dbg !47
  %116 = bitcast i32 %115 to float, !dbg !47
  %117 = or disjoint i32 %15, 3, !dbg !48
  %118 = or disjoint i32 %15, 7, !dbg !48
  %119 = sext i32 %117 to i64, !dbg !49
  %120 = getelementptr float, ptr addrspace(1) %0, i64 %119, !dbg !49
  %121 = sext i32 %118 to i64, !dbg !49
  %122 = getelementptr float, ptr addrspace(1) %0, i64 %121, !dbg !49
  %123 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %120, i1 %14) #1, !dbg !50
  %124 = bitcast i32 %123 to float, !dbg !50
  %125 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %122, i1 %14) #1, !dbg !50
  %126 = bitcast i32 %125 to float, !dbg !50
  %127 = getelementptr float, ptr addrspace(1) %1, i64 %119, !dbg !51
  %128 = getelementptr float, ptr addrspace(1) %1, i64 %121, !dbg !51
  %129 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %127, i1 %14) #1, !dbg !52
  %130 = bitcast i32 %129 to float, !dbg !52
  %131 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %128, i1 %14) #1, !dbg !52
  %132 = bitcast i32 %131 to float, !dbg !52
  %133 = getelementptr float, ptr addrspace(1) %2, i64 %119, !dbg !53
  %134 = getelementptr float, ptr addrspace(1) %2, i64 %121, !dbg !53
  %135 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %133, i1 %14) #1, !dbg !54
  %136 = bitcast i32 %135 to float, !dbg !54
  %137 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %134, i1 %14) #1, !dbg !54
  %138 = bitcast i32 %137 to float, !dbg !54
  %139 = getelementptr float, ptr addrspace(1) %3, i64 %119, !dbg !55
  %140 = getelementptr float, ptr addrspace(1) %3, i64 %121, !dbg !55
  %141 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %139, i1 %14) #1, !dbg !56
  %142 = bitcast i32 %141 to float, !dbg !56
  %143 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %140, i1 %14) #1, !dbg !56
  %144 = bitcast i32 %143 to float, !dbg !56
  %145 = getelementptr float, ptr addrspace(1) %4, i64 %119, !dbg !57
  %146 = getelementptr float, ptr addrspace(1) %4, i64 %121, !dbg !57
  %147 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %145, i1 %14) #1, !dbg !58
  %148 = bitcast i32 %147 to float, !dbg !58
  %149 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %146, i1 %14) #1, !dbg !58
  %150 = bitcast i32 %149 to float, !dbg !58
  %151 = fmul float %22, %28, !dbg !59
  %152 = fmul float %24, %30, !dbg !59
  %153 = fmul float %151, 2.000000e+00, !dbg !60
  %154 = fmul float %152, 2.000000e+00, !dbg !60
  %155 = fadd float %153, 0x3F1A36E2E0000000, !dbg !61
  %156 = fadd float %154, 0x3F1A36E2E0000000, !dbg !61
  %157 = fsub float %34, %151, !dbg !62
  %158 = fsub float %36, %152, !dbg !62
  %159 = fmul float %157, 2.000000e+00, !dbg !63
  %160 = fmul float %158, 2.000000e+00, !dbg !63
  %161 = fadd float %159, 0x3F4D7DBF40000000, !dbg !64
  %162 = fadd float %160, 0x3F4D7DBF40000000, !dbg !64
  %163 = fmul float %155, %161, !dbg !65
  %164 = fmul float %156, %162, !dbg !65
  %165 = fmul float %22, %22, !dbg !66
  %166 = fmul float %24, %24, !dbg !66
  %167 = fmul float %28, %28, !dbg !67
  %168 = fmul float %30, %30, !dbg !67
  %169 = fadd float %165, %167, !dbg !68
  %170 = fadd float %166, %168, !dbg !68
  %171 = fadd float %169, 0x3F1A36E2E0000000, !dbg !69
  %172 = fadd float %170, 0x3F1A36E2E0000000, !dbg !69
  %173 = fsub float %40, %165, !dbg !70
  %174 = fsub float %42, %166, !dbg !70
  %175 = fsub float %46, %167, !dbg !71
  %176 = fsub float %48, %168, !dbg !71
  %177 = fadd float %173, %175, !dbg !72
  %178 = fadd float %174, %176, !dbg !72
  %179 = fadd float %177, 0x3F4D7DBF40000000, !dbg !73
  %180 = fadd float %178, 0x3F4D7DBF40000000, !dbg !73
  %181 = fmul float %171, %179, !dbg !74
  %182 = fmul float %172, %180, !dbg !74
  %183 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %163, float %181) #1, !dbg !75
  %184 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %164, float %182) #1, !dbg !75
  %185 = fmul float %56, %62, !dbg !76
  %186 = fmul float %58, %64, !dbg !76
  %187 = fmul float %185, 2.000000e+00, !dbg !77
  %188 = fmul float %186, 2.000000e+00, !dbg !77
  %189 = fadd float %187, 0x3F1A36E2E0000000, !dbg !78
  %190 = fadd float %188, 0x3F1A36E2E0000000, !dbg !78
  %191 = fsub float %68, %185, !dbg !79
  %192 = fsub float %70, %186, !dbg !79
  %193 = fmul float %191, 2.000000e+00, !dbg !80
  %194 = fmul float %192, 2.000000e+00, !dbg !80
  %195 = fadd float %193, 0x3F4D7DBF40000000, !dbg !81
  %196 = fadd float %194, 0x3F4D7DBF40000000, !dbg !81
  %197 = fmul float %189, %195, !dbg !82
  %198 = fmul float %190, %196, !dbg !82
  %199 = fmul float %56, %56, !dbg !83
  %200 = fmul float %58, %58, !dbg !83
  %201 = fmul float %62, %62, !dbg !84
  %202 = fmul float %64, %64, !dbg !84
  %203 = fadd float %199, %201, !dbg !85
  %204 = fadd float %200, %202, !dbg !85
  %205 = fadd float %203, 0x3F1A36E2E0000000, !dbg !86
  %206 = fadd float %204, 0x3F1A36E2E0000000, !dbg !86
  %207 = fsub float %74, %199, !dbg !87
  %208 = fsub float %76, %200, !dbg !87
  %209 = fsub float %80, %201, !dbg !88
  %210 = fsub float %82, %202, !dbg !88
  %211 = fadd float %207, %209, !dbg !89
  %212 = fadd float %208, %210, !dbg !89
  %213 = fadd float %211, 0x3F4D7DBF40000000, !dbg !90
  %214 = fadd float %212, 0x3F4D7DBF40000000, !dbg !90
  %215 = fmul float %205, %213, !dbg !91
  %216 = fmul float %206, %214, !dbg !91
  %217 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %197, float %215) #1, !dbg !92
  %218 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %198, float %216) #1, !dbg !92
  %219 = fadd float %183, %217, !dbg !93
  %220 = fadd float %184, %218, !dbg !93
  %221 = fmul float %90, %96, !dbg !94
  %222 = fmul float %92, %98, !dbg !94
  %223 = fmul float %221, 2.000000e+00, !dbg !95
  %224 = fmul float %222, 2.000000e+00, !dbg !95
  %225 = fadd float %223, 0x3F1A36E2E0000000, !dbg !96
  %226 = fadd float %224, 0x3F1A36E2E0000000, !dbg !96
  %227 = fsub float %102, %221, !dbg !97
  %228 = fsub float %104, %222, !dbg !97
  %229 = fmul float %227, 2.000000e+00, !dbg !98
  %230 = fmul float %228, 2.000000e+00, !dbg !98
  %231 = fadd float %229, 0x3F4D7DBF40000000, !dbg !99
  %232 = fadd float %230, 0x3F4D7DBF40000000, !dbg !99
  %233 = fmul float %225, %231, !dbg !100
  %234 = fmul float %226, %232, !dbg !100
  %235 = fmul float %90, %90, !dbg !101
  %236 = fmul float %92, %92, !dbg !101
  %237 = fmul float %96, %96, !dbg !102
  %238 = fmul float %98, %98, !dbg !102
  %239 = fadd float %235, %237, !dbg !103
  %240 = fadd float %236, %238, !dbg !103
  %241 = fadd float %239, 0x3F1A36E2E0000000, !dbg !104
  %242 = fadd float %240, 0x3F1A36E2E0000000, !dbg !104
  %243 = fsub float %108, %235, !dbg !105
  %244 = fsub float %110, %236, !dbg !105
  %245 = fsub float %114, %237, !dbg !106
  %246 = fsub float %116, %238, !dbg !106
  %247 = fadd float %243, %245, !dbg !107
  %248 = fadd float %244, %246, !dbg !107
  %249 = fadd float %247, 0x3F4D7DBF40000000, !dbg !108
  %250 = fadd float %248, 0x3F4D7DBF40000000, !dbg !108
  %251 = fmul float %241, %249, !dbg !109
  %252 = fmul float %242, %250, !dbg !109
  %253 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %233, float %251) #1, !dbg !110
  %254 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %234, float %252) #1, !dbg !110
  %255 = fadd float %219, %253, !dbg !111
  %256 = fadd float %220, %254, !dbg !111
  %257 = fmul float %124, %130, !dbg !112
  %258 = fmul float %126, %132, !dbg !112
  %259 = fmul float %257, 2.000000e+00, !dbg !113
  %260 = fmul float %258, 2.000000e+00, !dbg !113
  %261 = fadd float %259, 0x3F1A36E2E0000000, !dbg !114
  %262 = fadd float %260, 0x3F1A36E2E0000000, !dbg !114
  %263 = fsub float %136, %257, !dbg !115
  %264 = fsub float %138, %258, !dbg !115
  %265 = fmul float %263, 2.000000e+00, !dbg !116
  %266 = fmul float %264, 2.000000e+00, !dbg !116
  %267 = fadd float %265, 0x3F4D7DBF40000000, !dbg !117
  %268 = fadd float %266, 0x3F4D7DBF40000000, !dbg !117
  %269 = fmul float %261, %267, !dbg !118
  %270 = fmul float %262, %268, !dbg !118
  %271 = fmul float %124, %124, !dbg !119
  %272 = fmul float %126, %126, !dbg !119
  %273 = fmul float %130, %130, !dbg !120
  %274 = fmul float %132, %132, !dbg !120
  %275 = fadd float %271, %273, !dbg !121
  %276 = fadd float %272, %274, !dbg !121
  %277 = fadd float %275, 0x3F1A36E2E0000000, !dbg !122
  %278 = fadd float %276, 0x3F1A36E2E0000000, !dbg !122
  %279 = fsub float %142, %271, !dbg !123
  %280 = fsub float %144, %272, !dbg !123
  %281 = fsub float %148, %273, !dbg !124
  %282 = fsub float %150, %274, !dbg !124
  %283 = fadd float %279, %281, !dbg !125
  %284 = fadd float %280, %282, !dbg !125
  %285 = fadd float %283, 0x3F4D7DBF40000000, !dbg !126
  %286 = fadd float %284, 0x3F4D7DBF40000000, !dbg !126
  %287 = fmul float %277, %285, !dbg !127
  %288 = fmul float %278, %286, !dbg !127
  %289 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %269, float %287) #1, !dbg !128
  %290 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %270, float %288) #1, !dbg !128
  %291 = fadd float %255, %289, !dbg !129
  %292 = fadd float %256, %290, !dbg !129
  %293 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %291, float 4.000000e+00) #1, !dbg !130
  %294 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %292, float 4.000000e+00) #1, !dbg !130
  %295 = sext i32 %13 to i64, !dbg !131
  %296 = getelementptr float, ptr addrspace(1) %5, i64 %295, !dbg !131
  %297 = bitcast float %293 to i32, !dbg !132
  %298 = bitcast float %294 to i32, !dbg !132
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %297, i32 %298, ptr addrspace(1) %296, i1 %14) #1, !dbg !132
  ret void, !dbg !133
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cgi53xdhy5kunmoq36y5snft442sqwk4xx2nvien7qpvpgkdv5xa.py", directory: "inductor_cache/gi")
!4 = !{ptr @triton_poi_fused_add_div_mean_mul_pow_sub_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_div_mean_mul_pow_sub_1, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_div_mean_mul_pow_sub_1", linkageName: "triton_poi_fused_add_div_mean_mul_pow_sub_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 32, scope: !7)
!16 = !DILocation(line: 25, column: 30, scope: !7)
!17 = !DILocation(line: 25, column: 37, scope: !7)
!18 = !DILocation(line: 26, column: 30, scope: !7)
!19 = !DILocation(line: 26, column: 37, scope: !7)
!20 = !DILocation(line: 27, column: 30, scope: !7)
!21 = !DILocation(line: 27, column: 37, scope: !7)
!22 = !DILocation(line: 28, column: 31, scope: !7)
!23 = !DILocation(line: 28, column: 38, scope: !7)
!24 = !DILocation(line: 29, column: 31, scope: !7)
!25 = !DILocation(line: 29, column: 38, scope: !7)
!26 = !DILocation(line: 30, column: 35, scope: !7)
!27 = !DILocation(line: 30, column: 31, scope: !7)
!28 = !DILocation(line: 30, column: 42, scope: !7)
!29 = !DILocation(line: 31, column: 31, scope: !7)
!30 = !DILocation(line: 31, column: 42, scope: !7)
!31 = !DILocation(line: 32, column: 31, scope: !7)
!32 = !DILocation(line: 32, column: 42, scope: !7)
!33 = !DILocation(line: 33, column: 31, scope: !7)
!34 = !DILocation(line: 33, column: 42, scope: !7)
!35 = !DILocation(line: 34, column: 31, scope: !7)
!36 = !DILocation(line: 34, column: 42, scope: !7)
!37 = !DILocation(line: 35, column: 35, scope: !7)
!38 = !DILocation(line: 35, column: 31, scope: !7)
!39 = !DILocation(line: 35, column: 42, scope: !7)
!40 = !DILocation(line: 36, column: 31, scope: !7)
!41 = !DILocation(line: 36, column: 42, scope: !7)
!42 = !DILocation(line: 37, column: 31, scope: !7)
!43 = !DILocation(line: 37, column: 42, scope: !7)
!44 = !DILocation(line: 38, column: 31, scope: !7)
!45 = !DILocation(line: 38, column: 42, scope: !7)
!46 = !DILocation(line: 39, column: 31, scope: !7)
!47 = !DILocation(line: 39, column: 42, scope: !7)
!48 = !DILocation(line: 40, column: 35, scope: !7)
!49 = !DILocation(line: 40, column: 31, scope: !7)
!50 = !DILocation(line: 40, column: 42, scope: !7)
!51 = !DILocation(line: 41, column: 31, scope: !7)
!52 = !DILocation(line: 41, column: 42, scope: !7)
!53 = !DILocation(line: 42, column: 31, scope: !7)
!54 = !DILocation(line: 42, column: 42, scope: !7)
!55 = !DILocation(line: 43, column: 31, scope: !7)
!56 = !DILocation(line: 43, column: 42, scope: !7)
!57 = !DILocation(line: 44, column: 31, scope: !7)
!58 = !DILocation(line: 44, column: 42, scope: !7)
!59 = !DILocation(line: 45, column: 18, scope: !7)
!60 = !DILocation(line: 47, column: 18, scope: !7)
!61 = !DILocation(line: 49, column: 18, scope: !7)
!62 = !DILocation(line: 50, column: 18, scope: !7)
!63 = !DILocation(line: 51, column: 18, scope: !7)
!64 = !DILocation(line: 53, column: 19, scope: !7)
!65 = !DILocation(line: 54, column: 19, scope: !7)
!66 = !DILocation(line: 55, column: 19, scope: !7)
!67 = !DILocation(line: 56, column: 19, scope: !7)
!68 = !DILocation(line: 57, column: 20, scope: !7)
!69 = !DILocation(line: 58, column: 20, scope: !7)
!70 = !DILocation(line: 59, column: 20, scope: !7)
!71 = !DILocation(line: 60, column: 20, scope: !7)
!72 = !DILocation(line: 61, column: 20, scope: !7)
!73 = !DILocation(line: 62, column: 20, scope: !7)
!74 = !DILocation(line: 63, column: 20, scope: !7)
!75 = !DILocation(line: 64, column: 20, scope: !7)
!76 = !DILocation(line: 65, column: 20, scope: !7)
!77 = !DILocation(line: 66, column: 20, scope: !7)
!78 = !DILocation(line: 67, column: 20, scope: !7)
!79 = !DILocation(line: 68, column: 20, scope: !7)
!80 = !DILocation(line: 69, column: 20, scope: !7)
!81 = !DILocation(line: 70, column: 20, scope: !7)
!82 = !DILocation(line: 71, column: 20, scope: !7)
!83 = !DILocation(line: 72, column: 20, scope: !7)
!84 = !DILocation(line: 73, column: 20, scope: !7)
!85 = !DILocation(line: 74, column: 20, scope: !7)
!86 = !DILocation(line: 75, column: 20, scope: !7)
!87 = !DILocation(line: 76, column: 20, scope: !7)
!88 = !DILocation(line: 77, column: 20, scope: !7)
!89 = !DILocation(line: 78, column: 20, scope: !7)
!90 = !DILocation(line: 79, column: 20, scope: !7)
!91 = !DILocation(line: 80, column: 20, scope: !7)
!92 = !DILocation(line: 81, column: 20, scope: !7)
!93 = !DILocation(line: 82, column: 20, scope: !7)
!94 = !DILocation(line: 83, column: 20, scope: !7)
!95 = !DILocation(line: 84, column: 20, scope: !7)
!96 = !DILocation(line: 85, column: 20, scope: !7)
!97 = !DILocation(line: 86, column: 20, scope: !7)
!98 = !DILocation(line: 87, column: 20, scope: !7)
!99 = !DILocation(line: 88, column: 20, scope: !7)
!100 = !DILocation(line: 89, column: 20, scope: !7)
!101 = !DILocation(line: 90, column: 20, scope: !7)
!102 = !DILocation(line: 91, column: 20, scope: !7)
!103 = !DILocation(line: 92, column: 20, scope: !7)
!104 = !DILocation(line: 93, column: 20, scope: !7)
!105 = !DILocation(line: 94, column: 20, scope: !7)
!106 = !DILocation(line: 95, column: 20, scope: !7)
!107 = !DILocation(line: 96, column: 20, scope: !7)
!108 = !DILocation(line: 97, column: 20, scope: !7)
!109 = !DILocation(line: 98, column: 20, scope: !7)
!110 = !DILocation(line: 99, column: 20, scope: !7)
!111 = !DILocation(line: 100, column: 20, scope: !7)
!112 = !DILocation(line: 101, column: 20, scope: !7)
!113 = !DILocation(line: 102, column: 20, scope: !7)
!114 = !DILocation(line: 103, column: 20, scope: !7)
!115 = !DILocation(line: 104, column: 20, scope: !7)
!116 = !DILocation(line: 105, column: 20, scope: !7)
!117 = !DILocation(line: 106, column: 20, scope: !7)
!118 = !DILocation(line: 107, column: 20, scope: !7)
!119 = !DILocation(line: 108, column: 20, scope: !7)
!120 = !DILocation(line: 109, column: 20, scope: !7)
!121 = !DILocation(line: 110, column: 20, scope: !7)
!122 = !DILocation(line: 111, column: 20, scope: !7)
!123 = !DILocation(line: 112, column: 20, scope: !7)
!124 = !DILocation(line: 113, column: 20, scope: !7)
!125 = !DILocation(line: 114, column: 20, scope: !7)
!126 = !DILocation(line: 115, column: 20, scope: !7)
!127 = !DILocation(line: 116, column: 20, scope: !7)
!128 = !DILocation(line: 117, column: 20, scope: !7)
!129 = !DILocation(line: 118, column: 20, scope: !7)
!130 = !DILocation(line: 120, column: 20, scope: !7)
!131 = !DILocation(line: 121, column: 25, scope: !7)
!132 = !DILocation(line: 121, column: 37, scope: !7)
!133 = !DILocation(line: 121, column: 4, scope: !7)
