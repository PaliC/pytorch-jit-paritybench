; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_relu_threshold_backward_5(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 8, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 4, !dbg !12
  %10 = and i32 %9, 240, !dbg !12
  %11 = lshr i32 %8, 4, !dbg !12
  %12 = and i32 %11, 15, !dbg !12
  %13 = or disjoint i32 %12, 16, !dbg !12
  %14 = or disjoint i32 %12, 32, !dbg !12
  %15 = or disjoint i32 %12, 48, !dbg !12
  %16 = or disjoint i32 %12, 64, !dbg !12
  %17 = or disjoint i32 %12, 80, !dbg !12
  %18 = or disjoint i32 %12, 96, !dbg !12
  %19 = or disjoint i32 %12, 112, !dbg !12
  %20 = or disjoint i32 %12, 128, !dbg !12
  %21 = or disjoint i32 %12, 144, !dbg !12
  %22 = or disjoint i32 %12, 160, !dbg !12
  %23 = or disjoint i32 %12, 176, !dbg !12
  %24 = or disjoint i32 %12, 192, !dbg !12
  %25 = or disjoint i32 %12, 208, !dbg !12
  %26 = or disjoint i32 %12, 224, !dbg !12
  %27 = or disjoint i32 %12, 240, !dbg !12
  %28 = or disjoint i32 %7, %10, !dbg !13
  %29 = or disjoint i32 %28, 4, !dbg !13
  %30 = or disjoint i32 %28, 8, !dbg !13
  %31 = or disjoint i32 %28, 12, !dbg !13
  %32 = or disjoint i32 %7, %12, !dbg !13
  %33 = or disjoint i32 %7, %13, !dbg !13
  %34 = or disjoint i32 %7, %14, !dbg !13
  %35 = or disjoint i32 %7, %15, !dbg !13
  %36 = or disjoint i32 %7, %16, !dbg !13
  %37 = or disjoint i32 %7, %17, !dbg !13
  %38 = or disjoint i32 %7, %18, !dbg !13
  %39 = or disjoint i32 %7, %19, !dbg !13
  %40 = or disjoint i32 %7, %20, !dbg !13
  %41 = or disjoint i32 %7, %21, !dbg !13
  %42 = or disjoint i32 %7, %22, !dbg !13
  %43 = or disjoint i32 %7, %23, !dbg !13
  %44 = or disjoint i32 %7, %24, !dbg !13
  %45 = or disjoint i32 %7, %25, !dbg !13
  %46 = or disjoint i32 %7, %26, !dbg !13
  %47 = or disjoint i32 %7, %27, !dbg !13
  %48 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %49 = shl i32 %48, 4, !dbg !15
  %50 = and i32 %8, 15, !dbg !16
  %51 = or disjoint i32 %49, %12, !dbg !17
  %52 = or disjoint i32 %49, %50, !dbg !17
  %53 = icmp slt i32 %51, 3721, !dbg !18
  %54 = icmp slt i32 %52, 3721, !dbg !18
  %.frozen = freeze i32 %28, !dbg !19
  %55 = sdiv i32 %.frozen, 4096, !dbg !19
  %56 = mul i32 %55, 4096, !dbg !20
  %.decomposed = sub i32 %.frozen, %56, !dbg !20
  %57 = srem i32 %29, 4096, !dbg !20
  %58 = srem i32 %30, 4096, !dbg !20
  %59 = srem i32 %31, 4096, !dbg !20
  %60 = shl i32 %51, 12, !dbg !21
  %61 = mul i32 %55, 15241216, !dbg !22
  %62 = add i32 %61, %60, !dbg !23
  %63 = add i32 %62, %.decomposed, !dbg !24
  %64 = add i32 %62, %57, !dbg !24
  %65 = add i32 %62, %58, !dbg !24
  %66 = add i32 %62, %59, !dbg !24
  %67 = sext i32 %63 to i64, !dbg !25
  %68 = getelementptr float, ptr addrspace(1) %0, i64 %67, !dbg !25
  %69 = sext i32 %64 to i64, !dbg !25
  %70 = getelementptr float, ptr addrspace(1) %0, i64 %69, !dbg !25
  %71 = sext i32 %65 to i64, !dbg !25
  %72 = getelementptr float, ptr addrspace(1) %0, i64 %71, !dbg !25
  %73 = sext i32 %66 to i64, !dbg !25
  %74 = getelementptr float, ptr addrspace(1) %0, i64 %73, !dbg !25
  %75 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %68, i1 %53) #2, !dbg !26
  %76 = extractvalue { i32, i32, i32, i32 } %75, 0, !dbg !26
  %77 = extractvalue { i32, i32, i32, i32 } %75, 1, !dbg !26
  %78 = extractvalue { i32, i32, i32, i32 } %75, 2, !dbg !26
  %79 = extractvalue { i32, i32, i32, i32 } %75, 3, !dbg !26
  %80 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %70, i1 %53) #2, !dbg !26
  %81 = extractvalue { i32, i32, i32, i32 } %80, 0, !dbg !26
  %82 = extractvalue { i32, i32, i32, i32 } %80, 1, !dbg !26
  %83 = extractvalue { i32, i32, i32, i32 } %80, 2, !dbg !26
  %84 = extractvalue { i32, i32, i32, i32 } %80, 3, !dbg !26
  %85 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %72, i1 %53) #2, !dbg !26
  %86 = extractvalue { i32, i32, i32, i32 } %85, 0, !dbg !26
  %87 = extractvalue { i32, i32, i32, i32 } %85, 1, !dbg !26
  %88 = extractvalue { i32, i32, i32, i32 } %85, 2, !dbg !26
  %89 = extractvalue { i32, i32, i32, i32 } %85, 3, !dbg !26
  %90 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %74, i1 %53) #2, !dbg !26
  %91 = extractvalue { i32, i32, i32, i32 } %90, 0, !dbg !26
  %92 = extractvalue { i32, i32, i32, i32 } %90, 1, !dbg !26
  %93 = extractvalue { i32, i32, i32, i32 } %90, 2, !dbg !26
  %94 = extractvalue { i32, i32, i32, i32 } %90, 3, !dbg !26
  %95 = mul i32 %32, 3721, !dbg !27
  %96 = mul i32 %33, 3721, !dbg !27
  %97 = mul i32 %34, 3721, !dbg !27
  %98 = mul i32 %35, 3721, !dbg !27
  %99 = mul i32 %36, 3721, !dbg !27
  %100 = mul i32 %37, 3721, !dbg !27
  %101 = mul i32 %38, 3721, !dbg !27
  %102 = mul i32 %39, 3721, !dbg !27
  %103 = mul i32 %40, 3721, !dbg !27
  %104 = mul i32 %41, 3721, !dbg !27
  %105 = mul i32 %42, 3721, !dbg !27
  %106 = mul i32 %43, 3721, !dbg !27
  %107 = mul i32 %44, 3721, !dbg !27
  %108 = mul i32 %45, 3721, !dbg !27
  %109 = mul i32 %46, 3721, !dbg !27
  %110 = mul i32 %47, 3721, !dbg !27
  %111 = add i32 %52, %95, !dbg !28
  %112 = add i32 %52, %96, !dbg !28
  %113 = add i32 %52, %97, !dbg !28
  %114 = add i32 %52, %98, !dbg !28
  %115 = add i32 %52, %99, !dbg !28
  %116 = add i32 %52, %100, !dbg !28
  %117 = add i32 %52, %101, !dbg !28
  %118 = add i32 %52, %102, !dbg !28
  %119 = add i32 %52, %103, !dbg !28
  %120 = add i32 %52, %104, !dbg !28
  %121 = add i32 %52, %105, !dbg !28
  %122 = add i32 %52, %106, !dbg !28
  %123 = add i32 %52, %107, !dbg !28
  %124 = add i32 %52, %108, !dbg !28
  %125 = add i32 %52, %109, !dbg !28
  %126 = add i32 %52, %110, !dbg !28
  %127 = sext i32 %111 to i64, !dbg !29
  %128 = getelementptr float, ptr addrspace(1) %1, i64 %127, !dbg !29
  %129 = sext i32 %112 to i64, !dbg !29
  %130 = getelementptr float, ptr addrspace(1) %1, i64 %129, !dbg !29
  %131 = sext i32 %113 to i64, !dbg !29
  %132 = getelementptr float, ptr addrspace(1) %1, i64 %131, !dbg !29
  %133 = sext i32 %114 to i64, !dbg !29
  %134 = getelementptr float, ptr addrspace(1) %1, i64 %133, !dbg !29
  %135 = sext i32 %115 to i64, !dbg !29
  %136 = getelementptr float, ptr addrspace(1) %1, i64 %135, !dbg !29
  %137 = sext i32 %116 to i64, !dbg !29
  %138 = getelementptr float, ptr addrspace(1) %1, i64 %137, !dbg !29
  %139 = sext i32 %117 to i64, !dbg !29
  %140 = getelementptr float, ptr addrspace(1) %1, i64 %139, !dbg !29
  %141 = sext i32 %118 to i64, !dbg !29
  %142 = getelementptr float, ptr addrspace(1) %1, i64 %141, !dbg !29
  %143 = sext i32 %119 to i64, !dbg !29
  %144 = getelementptr float, ptr addrspace(1) %1, i64 %143, !dbg !29
  %145 = sext i32 %120 to i64, !dbg !29
  %146 = getelementptr float, ptr addrspace(1) %1, i64 %145, !dbg !29
  %147 = sext i32 %121 to i64, !dbg !29
  %148 = getelementptr float, ptr addrspace(1) %1, i64 %147, !dbg !29
  %149 = sext i32 %122 to i64, !dbg !29
  %150 = getelementptr float, ptr addrspace(1) %1, i64 %149, !dbg !29
  %151 = sext i32 %123 to i64, !dbg !29
  %152 = getelementptr float, ptr addrspace(1) %1, i64 %151, !dbg !29
  %153 = sext i32 %124 to i64, !dbg !29
  %154 = getelementptr float, ptr addrspace(1) %1, i64 %153, !dbg !29
  %155 = sext i32 %125 to i64, !dbg !29
  %156 = getelementptr float, ptr addrspace(1) %1, i64 %155, !dbg !29
  %157 = sext i32 %126 to i64, !dbg !29
  %158 = getelementptr float, ptr addrspace(1) %1, i64 %157, !dbg !29
  %159 = shl i32 %8, 8, !dbg !30
  %160 = and i32 %159, 3840, !dbg !30
  %161 = or disjoint i32 %160, %12, !dbg !30
  %162 = and i32 %8, 255, !dbg !30
  %163 = lshr exact i32 %160, 2, !dbg !30
  %164 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %163, !dbg !30
  %165 = getelementptr float, ptr addrspace(3) %164, i32 %161, !dbg !30
  %166 = or disjoint i32 %161, 16, !dbg !30
  %167 = lshr i32 %166, 4, !dbg !30
  %168 = getelementptr float, ptr addrspace(3) @global_smem, i32 %167, !dbg !30
  %169 = getelementptr float, ptr addrspace(3) %168, i32 %166, !dbg !30
  %170 = or disjoint i32 %161, 32, !dbg !30
  %171 = lshr i32 %170, 4, !dbg !30
  %172 = getelementptr float, ptr addrspace(3) @global_smem, i32 %171, !dbg !30
  %173 = getelementptr float, ptr addrspace(3) %172, i32 %170, !dbg !30
  %174 = or disjoint i32 %161, 48, !dbg !30
  %175 = lshr i32 %174, 4, !dbg !30
  %176 = getelementptr float, ptr addrspace(3) @global_smem, i32 %175, !dbg !30
  %177 = getelementptr float, ptr addrspace(3) %176, i32 %174, !dbg !30
  %178 = or disjoint i32 %161, 64, !dbg !30
  %179 = lshr i32 %178, 4, !dbg !30
  %180 = getelementptr float, ptr addrspace(3) @global_smem, i32 %179, !dbg !30
  %181 = getelementptr float, ptr addrspace(3) %180, i32 %178, !dbg !30
  %182 = or disjoint i32 %161, 80, !dbg !30
  %183 = lshr i32 %182, 4, !dbg !30
  %184 = getelementptr float, ptr addrspace(3) @global_smem, i32 %183, !dbg !30
  %185 = getelementptr float, ptr addrspace(3) %184, i32 %182, !dbg !30
  %186 = or disjoint i32 %161, 96, !dbg !30
  %187 = lshr i32 %186, 4, !dbg !30
  %188 = getelementptr float, ptr addrspace(3) @global_smem, i32 %187, !dbg !30
  %189 = getelementptr float, ptr addrspace(3) %188, i32 %186, !dbg !30
  %190 = or disjoint i32 %161, 112, !dbg !30
  %191 = lshr i32 %190, 4, !dbg !30
  %192 = getelementptr float, ptr addrspace(3) @global_smem, i32 %191, !dbg !30
  %193 = getelementptr float, ptr addrspace(3) %192, i32 %190, !dbg !30
  %194 = or disjoint i32 %161, 128, !dbg !30
  %195 = lshr i32 %194, 4, !dbg !30
  %196 = getelementptr float, ptr addrspace(3) @global_smem, i32 %195, !dbg !30
  %197 = getelementptr float, ptr addrspace(3) %196, i32 %194, !dbg !30
  %198 = or disjoint i32 %161, 144, !dbg !30
  %199 = lshr i32 %198, 4, !dbg !30
  %200 = getelementptr float, ptr addrspace(3) @global_smem, i32 %199, !dbg !30
  %201 = getelementptr float, ptr addrspace(3) %200, i32 %198, !dbg !30
  %202 = or disjoint i32 %161, 160, !dbg !30
  %203 = lshr i32 %202, 4, !dbg !30
  %204 = getelementptr float, ptr addrspace(3) @global_smem, i32 %203, !dbg !30
  %205 = getelementptr float, ptr addrspace(3) %204, i32 %202, !dbg !30
  %206 = or disjoint i32 %161, 176, !dbg !30
  %207 = lshr i32 %206, 4, !dbg !30
  %208 = getelementptr float, ptr addrspace(3) @global_smem, i32 %207, !dbg !30
  %209 = getelementptr float, ptr addrspace(3) %208, i32 %206, !dbg !30
  %210 = or disjoint i32 %161, 192, !dbg !30
  %211 = lshr i32 %210, 4, !dbg !30
  %212 = getelementptr float, ptr addrspace(3) @global_smem, i32 %211, !dbg !30
  %213 = getelementptr float, ptr addrspace(3) %212, i32 %210, !dbg !30
  %214 = or disjoint i32 %161, 208, !dbg !30
  %215 = lshr i32 %214, 4, !dbg !30
  %216 = getelementptr float, ptr addrspace(3) @global_smem, i32 %215, !dbg !30
  %217 = getelementptr float, ptr addrspace(3) %216, i32 %214, !dbg !30
  %218 = or disjoint i32 %161, 224, !dbg !30
  %219 = lshr i32 %218, 4, !dbg !30
  %220 = getelementptr float, ptr addrspace(3) @global_smem, i32 %219, !dbg !30
  %221 = getelementptr float, ptr addrspace(3) %220, i32 %218, !dbg !30
  %222 = or disjoint i32 %161, 240, !dbg !30
  %223 = lshr i32 %222, 4, !dbg !30
  %224 = getelementptr float, ptr addrspace(3) @global_smem, i32 %223, !dbg !30
  %225 = getelementptr float, ptr addrspace(3) %224, i32 %222, !dbg !30
  %226 = lshr i32 %162, 4, !dbg !30
  %227 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %226, !dbg !30
  %228 = getelementptr inbounds float, ptr addrspace(3) %227, i32 %162, !dbg !30
  %229 = or disjoint i32 %162, 256, !dbg !30
  %230 = lshr i32 %229, 4, !dbg !30
  %231 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %230, !dbg !30
  %232 = getelementptr inbounds float, ptr addrspace(3) %231, i32 %229, !dbg !30
  %233 = or disjoint i32 %162, 512, !dbg !30
  %234 = lshr i32 %233, 4, !dbg !30
  %235 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %234, !dbg !30
  %236 = getelementptr inbounds float, ptr addrspace(3) %235, i32 %233, !dbg !30
  %237 = or disjoint i32 %162, 768, !dbg !30
  %238 = lshr i32 %237, 4, !dbg !30
  %239 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %238, !dbg !30
  %240 = getelementptr inbounds float, ptr addrspace(3) %239, i32 %237, !dbg !30
  %241 = or disjoint i32 %162, 1024, !dbg !30
  %242 = lshr i32 %241, 4, !dbg !30
  %243 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %242, !dbg !30
  %244 = getelementptr inbounds float, ptr addrspace(3) %243, i32 %241, !dbg !30
  %245 = or disjoint i32 %162, 1280, !dbg !30
  %246 = lshr i32 %245, 4, !dbg !30
  %247 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %246, !dbg !30
  %248 = getelementptr inbounds float, ptr addrspace(3) %247, i32 %245, !dbg !30
  %249 = or disjoint i32 %162, 1536, !dbg !30
  %250 = lshr i32 %249, 4, !dbg !30
  %251 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %250, !dbg !30
  %252 = getelementptr inbounds float, ptr addrspace(3) %251, i32 %249, !dbg !30
  %253 = or disjoint i32 %162, 1792, !dbg !30
  %254 = lshr i32 %253, 4, !dbg !30
  %255 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %254, !dbg !30
  %256 = getelementptr inbounds float, ptr addrspace(3) %255, i32 %253, !dbg !30
  %257 = or disjoint i32 %162, 2048, !dbg !30
  %258 = lshr i32 %257, 4, !dbg !30
  %259 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %258, !dbg !30
  %260 = getelementptr inbounds float, ptr addrspace(3) %259, i32 %257, !dbg !30
  %261 = or disjoint i32 %162, 2304, !dbg !30
  %262 = lshr i32 %261, 4, !dbg !30
  %263 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %262, !dbg !30
  %264 = getelementptr inbounds float, ptr addrspace(3) %263, i32 %261, !dbg !30
  %265 = or disjoint i32 %162, 2560, !dbg !30
  %266 = lshr i32 %265, 4, !dbg !30
  %267 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %266, !dbg !30
  %268 = getelementptr inbounds float, ptr addrspace(3) %267, i32 %265, !dbg !30
  %269 = or disjoint i32 %162, 2816, !dbg !30
  %270 = lshr i32 %269, 4, !dbg !30
  %271 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %270, !dbg !30
  %272 = getelementptr inbounds float, ptr addrspace(3) %271, i32 %269, !dbg !30
  %273 = or disjoint i32 %162, 3072, !dbg !30
  %274 = lshr i32 %273, 4, !dbg !30
  %275 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %274, !dbg !30
  %276 = getelementptr inbounds float, ptr addrspace(3) %275, i32 %273, !dbg !30
  %277 = or disjoint i32 %162, 3328, !dbg !30
  %278 = lshr i32 %277, 4, !dbg !30
  %279 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %278, !dbg !30
  %280 = getelementptr inbounds float, ptr addrspace(3) %279, i32 %277, !dbg !30
  %281 = or disjoint i32 %162, 3584, !dbg !30
  %282 = lshr i32 %281, 4, !dbg !30
  %283 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %282, !dbg !30
  %284 = getelementptr inbounds float, ptr addrspace(3) %283, i32 %281, !dbg !30
  %285 = or disjoint i32 %162, 3840, !dbg !30
  %286 = lshr i32 %285, 4, !dbg !30
  %287 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %286, !dbg !30
  %288 = getelementptr inbounds float, ptr addrspace(3) %287, i32 %285, !dbg !30
  %289 = getelementptr i1, ptr addrspace(1) %2, i64 %67, !dbg !31
  %290 = insertelement <4 x i32> poison, i32 %76, i64 0, !dbg !26
  %291 = insertelement <4 x i32> %290, i32 %77, i64 1, !dbg !26
  %292 = insertelement <4 x i32> %291, i32 %78, i64 2, !dbg !26
  %293 = insertelement <4 x i32> %292, i32 %79, i64 3, !dbg !26
  %294 = bitcast <4 x i32> %293 to <4 x float>, !dbg !26
  %295 = fcmp olt <4 x float> %294, zeroinitializer, !dbg !32
  %296 = select <4 x i1> %295, <4 x float> zeroinitializer, <4 x float> %294, !dbg !36
  %297 = fcmp ole <4 x float> %296, zeroinitializer, !dbg !37
  %298 = extractelement <4 x float> %296, i64 0, !dbg !30
  %299 = bitcast float %298 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %165, <1 x i32> %299, i1 true) #2, !dbg !30
  %300 = extractelement <4 x float> %296, i64 1, !dbg !30
  %301 = bitcast float %300 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %169, <1 x i32> %301, i1 true) #2, !dbg !30
  %302 = extractelement <4 x float> %296, i64 2, !dbg !30
  %303 = bitcast float %302 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %173, <1 x i32> %303, i1 true) #2, !dbg !30
  %304 = extractelement <4 x float> %296, i64 3, !dbg !30
  %305 = bitcast float %304 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %177, <1 x i32> %305, i1 true) #2, !dbg !30
  %306 = insertelement <4 x i32> poison, i32 %81, i64 0, !dbg !26
  %307 = insertelement <4 x i32> %306, i32 %82, i64 1, !dbg !26
  %308 = insertelement <4 x i32> %307, i32 %83, i64 2, !dbg !26
  %309 = insertelement <4 x i32> %308, i32 %84, i64 3, !dbg !26
  %310 = bitcast <4 x i32> %309 to <4 x float>, !dbg !26
  %311 = fcmp olt <4 x float> %310, zeroinitializer, !dbg !32
  %312 = select <4 x i1> %311, <4 x float> zeroinitializer, <4 x float> %310, !dbg !36
  %313 = fcmp ole <4 x float> %312, zeroinitializer, !dbg !37
  %314 = extractelement <4 x float> %312, i64 0, !dbg !30
  %315 = bitcast float %314 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %181, <1 x i32> %315, i1 true) #2, !dbg !30
  %316 = extractelement <4 x float> %312, i64 1, !dbg !30
  %317 = bitcast float %316 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %185, <1 x i32> %317, i1 true) #2, !dbg !30
  %318 = extractelement <4 x float> %312, i64 2, !dbg !30
  %319 = bitcast float %318 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %189, <1 x i32> %319, i1 true) #2, !dbg !30
  %320 = extractelement <4 x float> %312, i64 3, !dbg !30
  %321 = bitcast float %320 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %193, <1 x i32> %321, i1 true) #2, !dbg !30
  %322 = insertelement <4 x i32> poison, i32 %86, i64 0, !dbg !26
  %323 = insertelement <4 x i32> %322, i32 %87, i64 1, !dbg !26
  %324 = insertelement <4 x i32> %323, i32 %88, i64 2, !dbg !26
  %325 = insertelement <4 x i32> %324, i32 %89, i64 3, !dbg !26
  %326 = bitcast <4 x i32> %325 to <4 x float>, !dbg !26
  %327 = fcmp olt <4 x float> %326, zeroinitializer, !dbg !32
  %328 = select <4 x i1> %327, <4 x float> zeroinitializer, <4 x float> %326, !dbg !36
  %329 = fcmp ole <4 x float> %328, zeroinitializer, !dbg !37
  %330 = extractelement <4 x float> %328, i64 0, !dbg !30
  %331 = bitcast float %330 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %197, <1 x i32> %331, i1 true) #2, !dbg !30
  %332 = extractelement <4 x float> %328, i64 1, !dbg !30
  %333 = bitcast float %332 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %201, <1 x i32> %333, i1 true) #2, !dbg !30
  %334 = extractelement <4 x float> %328, i64 2, !dbg !30
  %335 = bitcast float %334 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %205, <1 x i32> %335, i1 true) #2, !dbg !30
  %336 = extractelement <4 x float> %328, i64 3, !dbg !30
  %337 = bitcast float %336 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %209, <1 x i32> %337, i1 true) #2, !dbg !30
  %338 = insertelement <4 x i32> poison, i32 %91, i64 0, !dbg !26
  %339 = insertelement <4 x i32> %338, i32 %92, i64 1, !dbg !26
  %340 = insertelement <4 x i32> %339, i32 %93, i64 2, !dbg !26
  %341 = insertelement <4 x i32> %340, i32 %94, i64 3, !dbg !26
  %342 = bitcast <4 x i32> %341 to <4 x float>, !dbg !26
  %343 = fcmp olt <4 x float> %342, zeroinitializer, !dbg !32
  %344 = select <4 x i1> %343, <4 x float> zeroinitializer, <4 x float> %342, !dbg !36
  %345 = fcmp ole <4 x float> %344, zeroinitializer, !dbg !37
  %346 = extractelement <4 x float> %344, i64 0, !dbg !30
  %347 = bitcast float %346 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %213, <1 x i32> %347, i1 true) #2, !dbg !30
  %348 = extractelement <4 x float> %344, i64 1, !dbg !30
  %349 = bitcast float %348 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %217, <1 x i32> %349, i1 true) #2, !dbg !30
  %350 = extractelement <4 x float> %344, i64 2, !dbg !30
  %351 = bitcast float %350 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %221, <1 x i32> %351, i1 true) #2, !dbg !30
  %352 = extractelement <4 x float> %344, i64 3, !dbg !30
  %353 = bitcast float %352 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %225, <1 x i32> %353, i1 true) #2, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %354 = load i32, ptr addrspace(3) %228, align 4, !dbg !30
  %355 = load i32, ptr addrspace(3) %232, align 4, !dbg !30
  %356 = load i32, ptr addrspace(3) %236, align 4, !dbg !30
  %357 = load i32, ptr addrspace(3) %240, align 4, !dbg !30
  %358 = load i32, ptr addrspace(3) %244, align 4, !dbg !30
  %359 = load i32, ptr addrspace(3) %248, align 4, !dbg !30
  %360 = load i32, ptr addrspace(3) %252, align 4, !dbg !30
  %361 = load i32, ptr addrspace(3) %256, align 4, !dbg !30
  %362 = load i32, ptr addrspace(3) %260, align 4, !dbg !30
  %363 = load i32, ptr addrspace(3) %264, align 4, !dbg !30
  %364 = load i32, ptr addrspace(3) %268, align 4, !dbg !30
  %365 = load i32, ptr addrspace(3) %272, align 4, !dbg !30
  %366 = load i32, ptr addrspace(3) %276, align 4, !dbg !30
  %367 = load i32, ptr addrspace(3) %280, align 4, !dbg !30
  %368 = load i32, ptr addrspace(3) %284, align 4, !dbg !30
  %369 = load i32, ptr addrspace(3) %288, align 4, !dbg !30
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %354, ptr addrspace(1) %128, i1 %54) #2, !dbg !30
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %355, ptr addrspace(1) %130, i1 %54) #2, !dbg !30
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %356, ptr addrspace(1) %132, i1 %54) #2, !dbg !30
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %357, ptr addrspace(1) %134, i1 %54) #2, !dbg !30
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %358, ptr addrspace(1) %136, i1 %54) #2, !dbg !30
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %359, ptr addrspace(1) %138, i1 %54) #2, !dbg !30
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %360, ptr addrspace(1) %140, i1 %54) #2, !dbg !30
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %361, ptr addrspace(1) %142, i1 %54) #2, !dbg !30
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %362, ptr addrspace(1) %144, i1 %54) #2, !dbg !30
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %363, ptr addrspace(1) %146, i1 %54) #2, !dbg !30
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %364, ptr addrspace(1) %148, i1 %54) #2, !dbg !30
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %365, ptr addrspace(1) %150, i1 %54) #2, !dbg !30
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %366, ptr addrspace(1) %152, i1 %54) #2, !dbg !30
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %367, ptr addrspace(1) %154, i1 %54) #2, !dbg !30
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %368, ptr addrspace(1) %156, i1 %54) #2, !dbg !30
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %369, ptr addrspace(1) %158, i1 %54) #2, !dbg !30
  %370 = zext <4 x i1> %297 to <4 x i8>, !dbg !38
  %371 = bitcast <4 x i8> %370 to i32, !dbg !38
  %372 = zext <4 x i1> %313 to <4 x i8>, !dbg !38
  %373 = bitcast <4 x i8> %372 to i32, !dbg !38
  %374 = zext <4 x i1> %329 to <4 x i8>, !dbg !38
  %375 = bitcast <4 x i8> %374 to i32, !dbg !38
  %376 = zext <4 x i1> %345 to <4 x i8>, !dbg !38
  %377 = bitcast <4 x i8> %376 to i32, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %371, i32 %373, i32 %375, i32 %377, ptr addrspace(1) %289, i1 %53) #2, !dbg !38
  ret void, !dbg !39
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cdbuclcgsihuoleqvv56zaqbyoa447jzxe7coqyebbwpg27d6hqb.py", directory: "inductor_cache/db")
!4 = !{ptr @triton_poi_fused_relu_threshold_backward_5, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_relu_threshold_backward_5, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_relu_threshold_backward_5", linkageName: "triton_poi_fused_relu_threshold_backward_5", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 40, scope: !7)
!22 = !DILocation(line: 32, column: 54, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 45, scope: !7)
!25 = !DILocation(line: 32, column: 30, scope: !7)
!26 = !DILocation(line: 32, column: 59, scope: !7)
!27 = !DILocation(line: 37, column: 35, scope: !7)
!28 = !DILocation(line: 37, column: 30, scope: !7)
!29 = !DILocation(line: 37, column: 25, scope: !7)
!30 = !DILocation(line: 37, column: 46, scope: !7)
!31 = !DILocation(line: 38, column: 25, scope: !7)
!32 = !DILocation(line: 118, column: 15, scope: !33, inlinedAt: !35)
!33 = distinct !DILexicalBlockFile(scope: !7, file: !34, discriminator: 0)
!34 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!35 = !DILocation(line: 34, column: 40, scope: !7)
!36 = !DILocation(line: 121, column: 29, scope: !33, inlinedAt: !35)
!37 = !DILocation(line: 36, column: 19, scope: !7)
!38 = !DILocation(line: 38, column: 60, scope: !7)
!39 = !DILocation(line: 38, column: 4, scope: !7)
