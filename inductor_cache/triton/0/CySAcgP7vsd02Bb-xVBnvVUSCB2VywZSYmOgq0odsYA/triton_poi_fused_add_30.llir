; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_add_30(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %8 = shl i32 %7, 6, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = lshr i32 %9, 2, !dbg !12
  %11 = and i32 %10, 3, !dbg !12
  %12 = lshr i32 %9, 2, !dbg !12
  %13 = and i32 %12, 4, !dbg !12
  %14 = or disjoint i32 %11, %13, !dbg !12
  %15 = lshr i32 %9, 2, !dbg !12
  %16 = and i32 %15, 8, !dbg !12
  %17 = or disjoint i32 %14, %16, !dbg !12
  %18 = and i32 %9, 64, !dbg !12
  %19 = lshr exact i32 %18, 2, !dbg !12
  %20 = or disjoint i32 %17, %19, !dbg !12
  %21 = or disjoint i32 %20, 32, !dbg !12
  %22 = shl i32 %9, 2, !dbg !12
  %23 = and i32 %22, 12, !dbg !12
  %24 = and i32 %22, 60, !dbg !12
  %25 = or disjoint i32 %8, %20, !dbg !13
  %26 = or disjoint i32 %8, %21, !dbg !13
  %27 = or disjoint i32 %8, %24, !dbg !13
  %28 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %29 = shl i32 %28, 4, !dbg !15
  %.lobit110 = lshr i32 %9, 4, !dbg !16
  %30 = and i32 %.lobit110, 3, !dbg !16
  %31 = lshr exact i32 %18, 4, !dbg !16
  %32 = or disjoint i32 %30, %31, !dbg !16
  %33 = or disjoint i32 %29, %23, !dbg !17
  %34 = or disjoint i32 %29, %32, !dbg !17
  %35 = or disjoint i32 %34, 8, !dbg !17
  %36 = icmp slt i32 %33, 16, !dbg !18
  %37 = icmp slt i32 %34, 16, !dbg !18
  %38 = icmp slt i32 %35, 16, !dbg !18
  %39 = srem i32 %27, 512, !dbg !19
  %40 = shl i32 %25, 4, !dbg !20
  %41 = shl i32 %26, 4, !dbg !20
  %42 = add i32 %33, %40, !dbg !21
  %43 = add i32 %33, %41, !dbg !21
  %44 = sext i32 %42 to i64, !dbg !22
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !22
  %46 = sext i32 %43 to i64, !dbg !22
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !22
  %48 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %45, i1 %36) #2, !dbg !23
  %49 = extractvalue { i32, i32, i32, i32 } %48, 0, !dbg !23
  %50 = extractvalue { i32, i32, i32, i32 } %48, 1, !dbg !23
  %51 = extractvalue { i32, i32, i32, i32 } %48, 2, !dbg !23
  %52 = extractvalue { i32, i32, i32, i32 } %48, 3, !dbg !23
  %53 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %47, i1 %36) #2, !dbg !23
  %54 = extractvalue { i32, i32, i32, i32 } %53, 0, !dbg !23
  %55 = extractvalue { i32, i32, i32, i32 } %53, 1, !dbg !23
  %56 = extractvalue { i32, i32, i32, i32 } %53, 2, !dbg !23
  %57 = extractvalue { i32, i32, i32, i32 } %53, 3, !dbg !23
  %58 = shl i32 %9, 8, !dbg !23
  %59 = and i32 %58, 768, !dbg !23
  %60 = or disjoint i32 %11, %59, !dbg !23
  %61 = or disjoint i32 %60, %13, !dbg !23
  %62 = or disjoint i32 %61, %16, !dbg !23
  %63 = or disjoint i32 %62, %19, !dbg !23
  %64 = and i32 %22, 508, !dbg !23
  %65 = lshr exact i32 %59, 4, !dbg !23
  %66 = add nuw nsw i32 %63, %65, !dbg !23
  %67 = zext nneg i32 %66 to i64, !dbg !23
  %68 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %67, !dbg !23
  %69 = insertelement <1 x i32> poison, i32 %49, i64 0, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %68, <1 x i32> %69, i1 true) #2, !dbg !23
  %70 = or disjoint i32 %63, 64, !dbg !23
  %71 = lshr i32 %70, 4, !dbg !23
  %72 = and i32 %71, 268435452, !dbg !23
  %73 = add nuw nsw i32 %72, %70, !dbg !23
  %74 = zext nneg i32 %73 to i64, !dbg !23
  %75 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %74, !dbg !23
  %76 = insertelement <1 x i32> poison, i32 %50, i64 0, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %75, <1 x i32> %76, i1 true) #2, !dbg !23
  %77 = or disjoint i32 %63, 128, !dbg !23
  %78 = lshr i32 %77, 4, !dbg !23
  %79 = and i32 %78, 268435452, !dbg !23
  %80 = add nuw nsw i32 %79, %77, !dbg !23
  %81 = zext nneg i32 %80 to i64, !dbg !23
  %82 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %81, !dbg !23
  %83 = insertelement <1 x i32> poison, i32 %51, i64 0, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %82, <1 x i32> %83, i1 true) #2, !dbg !23
  %84 = or disjoint i32 %63, 192, !dbg !23
  %85 = lshr i32 %84, 4, !dbg !23
  %86 = and i32 %85, 268435452, !dbg !23
  %87 = add nuw nsw i32 %86, %84, !dbg !23
  %88 = zext nneg i32 %87 to i64, !dbg !23
  %89 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %88, !dbg !23
  %90 = insertelement <1 x i32> poison, i32 %52, i64 0, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %89, <1 x i32> %90, i1 true) #2, !dbg !23
  %91 = or disjoint i32 %63, 32, !dbg !23
  %92 = add nuw nsw i32 %91, %65, !dbg !23
  %93 = zext nneg i32 %92 to i64, !dbg !23
  %94 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %93, !dbg !23
  %95 = insertelement <1 x i32> poison, i32 %54, i64 0, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %94, <1 x i32> %95, i1 true) #2, !dbg !23
  %96 = or disjoint i32 %63, 96, !dbg !23
  %97 = lshr i32 %96, 4, !dbg !23
  %98 = and i32 %97, 268435452, !dbg !23
  %99 = add nuw nsw i32 %98, %96, !dbg !23
  %100 = zext nneg i32 %99 to i64, !dbg !23
  %101 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %100, !dbg !23
  %102 = insertelement <1 x i32> poison, i32 %55, i64 0, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %101, <1 x i32> %102, i1 true) #2, !dbg !23
  %103 = or disjoint i32 %63, 160, !dbg !23
  %104 = lshr i32 %103, 4, !dbg !23
  %105 = and i32 %104, 268435452, !dbg !23
  %106 = add nuw nsw i32 %105, %103, !dbg !23
  %107 = zext nneg i32 %106 to i64, !dbg !23
  %108 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %107, !dbg !23
  %109 = insertelement <1 x i32> poison, i32 %56, i64 0, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %108, <1 x i32> %109, i1 true) #2, !dbg !23
  %110 = or disjoint i32 %63, 224, !dbg !23
  %111 = lshr i32 %110, 4, !dbg !23
  %112 = and i32 %111, 268435452, !dbg !23
  %113 = add nuw nsw i32 %112, %110, !dbg !23
  %114 = zext nneg i32 %113 to i64, !dbg !23
  %115 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %114, !dbg !23
  %116 = insertelement <1 x i32> poison, i32 %57, i64 0, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %115, <1 x i32> %116, i1 true) #2, !dbg !23
  tail call void @llvm.nvvm.barrier0(), !dbg !23
  %117 = lshr i32 %22, 4, !dbg !23
  %118 = and i32 %117, 28, !dbg !23
  %119 = add nuw nsw i32 %118, %64, !dbg !23
  %120 = zext nneg i32 %119 to i64, !dbg !23
  %121 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %120, !dbg !23
  %122 = load float, ptr addrspace(3) %121, align 16, !dbg !23
  %123 = getelementptr inbounds i8, ptr addrspace(3) %121, i64 4, !dbg !23
  %124 = load float, ptr addrspace(3) %123, align 4, !dbg !23
  %125 = getelementptr inbounds i8, ptr addrspace(3) %121, i64 8, !dbg !23
  %126 = load float, ptr addrspace(3) %125, align 8, !dbg !23
  %127 = getelementptr inbounds i8, ptr addrspace(3) %121, i64 12, !dbg !23
  %128 = load float, ptr addrspace(3) %127, align 4, !dbg !23
  %129 = or disjoint i32 %64, 512, !dbg !23
  %130 = lshr i32 %129, 4, !dbg !23
  %131 = and i32 %130, 60, !dbg !23
  %132 = add nuw nsw i32 %131, %129, !dbg !23
  %133 = zext nneg i32 %132 to i64, !dbg !23
  %134 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %133, !dbg !23
  %135 = load float, ptr addrspace(3) %134, align 16, !dbg !23
  %136 = getelementptr inbounds i8, ptr addrspace(3) %134, i64 4, !dbg !23
  %137 = load float, ptr addrspace(3) %136, align 4, !dbg !23
  %138 = getelementptr inbounds i8, ptr addrspace(3) %134, i64 8, !dbg !23
  %139 = load float, ptr addrspace(3) %138, align 8, !dbg !23
  %140 = getelementptr inbounds i8, ptr addrspace(3) %134, i64 12, !dbg !23
  %141 = load float, ptr addrspace(3) %140, align 4, !dbg !23
  %142 = shl i32 %34, 11, !dbg !24
  %143 = shl i32 %35, 11, !dbg !24
  %144 = add i32 %142, %27, !dbg !25
  %145 = add i32 %27, %143, !dbg !25
  %146 = sext i32 %144 to i64, !dbg !26
  %147 = getelementptr float, ptr addrspace(1) %1, i64 %146, !dbg !26
  %148 = sext i32 %145 to i64, !dbg !26
  %149 = getelementptr float, ptr addrspace(1) %1, i64 %148, !dbg !26
  %150 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %147, i1 %37) #2, !dbg !27
  %151 = extractvalue { i32, i32, i32, i32 } %150, 0, !dbg !27
  %152 = extractvalue { i32, i32, i32, i32 } %150, 1, !dbg !27
  %153 = extractvalue { i32, i32, i32, i32 } %150, 2, !dbg !27
  %154 = extractvalue { i32, i32, i32, i32 } %150, 3, !dbg !27
  %155 = bitcast i32 %151 to float, !dbg !27
  %156 = bitcast i32 %152 to float, !dbg !27
  %157 = bitcast i32 %153 to float, !dbg !27
  %158 = bitcast i32 %154 to float, !dbg !27
  %159 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %149, i1 %38) #2, !dbg !27
  %160 = extractvalue { i32, i32, i32, i32 } %159, 0, !dbg !27
  %161 = extractvalue { i32, i32, i32, i32 } %159, 1, !dbg !27
  %162 = extractvalue { i32, i32, i32, i32 } %159, 2, !dbg !27
  %163 = extractvalue { i32, i32, i32, i32 } %159, 3, !dbg !27
  %164 = bitcast i32 %160 to float, !dbg !27
  %165 = bitcast i32 %161 to float, !dbg !27
  %166 = bitcast i32 %162 to float, !dbg !27
  %167 = bitcast i32 %163 to float, !dbg !27
  %168 = sext i32 %39 to i64, !dbg !28
  %169 = getelementptr float, ptr addrspace(1) %2, i64 %168, !dbg !28
  %170 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %169, i1 true) #2, !dbg !29
  %171 = extractvalue { i32, i32, i32, i32 } %170, 0, !dbg !29
  %172 = extractvalue { i32, i32, i32, i32 } %170, 1, !dbg !29
  %173 = extractvalue { i32, i32, i32, i32 } %170, 2, !dbg !29
  %174 = extractvalue { i32, i32, i32, i32 } %170, 3, !dbg !29
  %175 = bitcast i32 %171 to float, !dbg !29
  %176 = bitcast i32 %172 to float, !dbg !29
  %177 = bitcast i32 %173 to float, !dbg !29
  %178 = bitcast i32 %174 to float, !dbg !29
  %179 = fadd float %155, %175, !dbg !30
  %180 = fadd float %156, %176, !dbg !30
  %181 = fadd float %157, %177, !dbg !30
  %182 = fadd float %158, %178, !dbg !30
  %183 = fadd float %164, %175, !dbg !30
  %184 = fadd float %165, %176, !dbg !30
  %185 = fadd float %166, %177, !dbg !30
  %186 = fadd float %167, %178, !dbg !30
  %187 = fadd float %122, %179, !dbg !31
  %188 = fadd float %124, %180, !dbg !31
  %189 = fadd float %126, %181, !dbg !31
  %190 = fadd float %128, %182, !dbg !31
  %191 = fadd float %135, %183, !dbg !31
  %192 = fadd float %137, %184, !dbg !31
  %193 = fadd float %139, %185, !dbg !31
  %194 = fadd float %141, %186, !dbg !31
  %195 = getelementptr float, ptr addrspace(1) %3, i64 %44, !dbg !32
  %196 = getelementptr float, ptr addrspace(1) %3, i64 %46, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %197 = shl i32 %9, 6, !dbg !33
  %198 = and i32 %197, 960, !dbg !33
  %199 = or disjoint i32 %30, %198, !dbg !33
  %200 = or disjoint i32 %199, %31, !dbg !33
  %201 = lshr exact i32 %198, 4, !dbg !33
  %202 = add nuw nsw i32 %200, %201, !dbg !33
  %203 = zext nneg i32 %202 to i64, !dbg !33
  %204 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %203, !dbg !33
  %205 = bitcast float %187 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %204, <1 x i32> %205, i1 true) #2, !dbg !33
  %206 = or disjoint i32 %200, 16, !dbg !33
  %207 = lshr i32 %206, 4, !dbg !33
  %208 = add nuw nsw i32 %207, %206, !dbg !33
  %209 = zext nneg i32 %208 to i64, !dbg !33
  %210 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %209, !dbg !33
  %211 = bitcast float %188 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %210, <1 x i32> %211, i1 true) #2, !dbg !33
  %212 = or disjoint i32 %200, 32, !dbg !33
  %213 = lshr i32 %212, 4, !dbg !33
  %214 = add nuw nsw i32 %213, %212, !dbg !33
  %215 = zext nneg i32 %214 to i64, !dbg !33
  %216 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %215, !dbg !33
  %217 = bitcast float %189 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %216, <1 x i32> %217, i1 true) #2, !dbg !33
  %218 = or disjoint i32 %200, 48, !dbg !33
  %219 = lshr i32 %218, 4, !dbg !33
  %220 = add nuw nsw i32 %219, %218, !dbg !33
  %221 = zext nneg i32 %220 to i64, !dbg !33
  %222 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %221, !dbg !33
  %223 = bitcast float %190 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %222, <1 x i32> %223, i1 true) #2, !dbg !33
  %224 = add nuw nsw i32 %201, 8, !dbg !33
  %225 = add nuw nsw i32 %224, %200, !dbg !33
  %226 = zext nneg i32 %225 to i64, !dbg !33
  %227 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %226, !dbg !33
  %228 = bitcast float %191 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %227, <1 x i32> %228, i1 true) #2, !dbg !33
  %229 = or disjoint i32 %200, 24, !dbg !33
  %230 = lshr i32 %229, 4, !dbg !33
  %231 = add nuw nsw i32 %230, %229, !dbg !33
  %232 = zext nneg i32 %231 to i64, !dbg !33
  %233 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %232, !dbg !33
  %234 = bitcast float %192 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %233, <1 x i32> %234, i1 true) #2, !dbg !33
  %235 = or disjoint i32 %200, 40, !dbg !33
  %236 = lshr i32 %235, 4, !dbg !33
  %237 = add nuw nsw i32 %236, %235, !dbg !33
  %238 = zext nneg i32 %237 to i64, !dbg !33
  %239 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %238, !dbg !33
  %240 = bitcast float %193 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %239, <1 x i32> %240, i1 true) #2, !dbg !33
  %241 = or disjoint i32 %200, 56, !dbg !33
  %242 = lshr i32 %241, 4, !dbg !33
  %243 = add nuw nsw i32 %242, %241, !dbg !33
  %244 = zext nneg i32 %243 to i64, !dbg !33
  %245 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %244, !dbg !33
  %246 = bitcast float %194 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %245, <1 x i32> %246, i1 true) #2, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %247 = lshr i32 %64, 4, !dbg !33
  %248 = add nuw nsw i32 %247, %64, !dbg !33
  %249 = zext nneg i32 %248 to i64, !dbg !33
  %250 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %249, !dbg !33
  %251 = load i32, ptr addrspace(3) %250, align 4, !dbg !33
  %252 = or disjoint i32 %64, 1, !dbg !33
  %253 = add nuw nsw i32 %252, %247, !dbg !33
  %254 = zext nneg i32 %253 to i64, !dbg !33
  %255 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %254, !dbg !33
  %256 = load i32, ptr addrspace(3) %255, align 4, !dbg !33
  %257 = or disjoint i32 %64, 2, !dbg !33
  %258 = add nuw nsw i32 %257, %247, !dbg !33
  %259 = zext nneg i32 %258 to i64, !dbg !33
  %260 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %259, !dbg !33
  %261 = load i32, ptr addrspace(3) %260, align 4, !dbg !33
  %262 = or disjoint i32 %64, 3, !dbg !33
  %263 = add nuw nsw i32 %262, %247, !dbg !33
  %264 = zext nneg i32 %263 to i64, !dbg !33
  %265 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %264, !dbg !33
  %266 = load i32, ptr addrspace(3) %265, align 4, !dbg !33
  %267 = add nuw nsw i32 %130, %129, !dbg !33
  %268 = zext nneg i32 %267 to i64, !dbg !33
  %269 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %268, !dbg !33
  %270 = load i32, ptr addrspace(3) %269, align 4, !dbg !33
  %271 = or disjoint i32 %64, 513, !dbg !33
  %272 = lshr i32 %271, 4, !dbg !33
  %273 = add nuw nsw i32 %272, %271, !dbg !33
  %274 = zext nneg i32 %273 to i64, !dbg !33
  %275 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %274, !dbg !33
  %276 = load i32, ptr addrspace(3) %275, align 4, !dbg !33
  %277 = or disjoint i32 %64, 514, !dbg !33
  %278 = lshr i32 %277, 4, !dbg !33
  %279 = add nuw nsw i32 %278, %277, !dbg !33
  %280 = zext nneg i32 %279 to i64, !dbg !33
  %281 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %280, !dbg !33
  %282 = load i32, ptr addrspace(3) %281, align 4, !dbg !33
  %283 = or disjoint i32 %64, 515, !dbg !33
  %284 = lshr i32 %283, 4, !dbg !33
  %285 = add nuw nsw i32 %284, %283, !dbg !33
  %286 = zext nneg i32 %285 to i64, !dbg !33
  %287 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %286, !dbg !33
  %288 = load i32, ptr addrspace(3) %287, align 4, !dbg !33
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %251, i32 %256, i32 %261, i32 %266, ptr addrspace(1) %195, i1 %36) #2, !dbg !33
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %270, i32 %276, i32 %282, i32 %288, ptr addrspace(1) %196, i1 %36) #2, !dbg !33
  ret void, !dbg !34
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cmbqsxtocpa5jk2mgqfw3y2rmgqpsdgbesqoiacswh7l625pkfv5.py", directory: "inductor_cache/mb")
!4 = !{ptr @triton_poi_fused_add_30, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_30, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_30", linkageName: "triton_poi_fused_add_30", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 31, column: 38, scope: !7)
!21 = !DILocation(line: 31, column: 35, scope: !7)
!22 = !DILocation(line: 31, column: 30, scope: !7)
!23 = !DILocation(line: 31, column: 43, scope: !7)
!24 = !DILocation(line: 32, column: 40, scope: !7)
!25 = !DILocation(line: 32, column: 35, scope: !7)
!26 = !DILocation(line: 32, column: 30, scope: !7)
!27 = !DILocation(line: 32, column: 45, scope: !7)
!28 = !DILocation(line: 33, column: 30, scope: !7)
!29 = !DILocation(line: 33, column: 35, scope: !7)
!30 = !DILocation(line: 34, column: 18, scope: !7)
!31 = !DILocation(line: 35, column: 18, scope: !7)
!32 = !DILocation(line: 36, column: 25, scope: !7)
!33 = !DILocation(line: 36, column: 44, scope: !7)
!34 = !DILocation(line: 36, column: 4, scope: !7)
