; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_add_div_sqrt_15(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %7 = shl i32 %6, 8, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 252, !dbg !12
  %11 = and i32 %8, 127, !dbg !12
  %12 = or disjoint i32 %7, %10, !dbg !13
  %13 = or disjoint i32 %7, %11, !dbg !13
  %14 = or disjoint i32 %13, 128, !dbg !13
  %15 = icmp slt i32 %12, 256, !dbg !14
  %16 = icmp slt i32 %13, 256, !dbg !14
  %17 = icmp slt i32 %14, 256, !dbg !14
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %19 = shl i32 %18, 2, !dbg !16
  %20 = lshr i32 %8, 6, !dbg !17
  %.lobit = and i32 %20, 1, !dbg !17
  %21 = or disjoint i32 %.lobit, 2, !dbg !17
  %22 = or disjoint i32 %19, %.lobit, !dbg !18
  %23 = or disjoint i32 %19, %21, !dbg !18
  %.frozen = freeze i32 %12, !dbg !19
  %24 = sdiv i32 %.frozen, 64, !dbg !19
  %25 = mul i32 %24, 64, !dbg !20
  %.decomposed = sub i32 %.frozen, %25, !dbg !20
  %26 = sdiv i32 %13, 64, !dbg !19
  %27 = sdiv i32 %14, 64, !dbg !19
  %28 = shl i32 %22, 6, !dbg !21
  %29 = shl i32 %23, 6, !dbg !21
  %30 = shl i32 %24, 18, !dbg !22
  %31 = add i32 %30, %.decomposed, !dbg !23
  %32 = add i32 %31, %28, !dbg !24
  %33 = add i32 %31, %29, !dbg !24
  %34 = sext i32 %32 to i64, !dbg !25
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !25
  %36 = sext i32 %33 to i64, !dbg !25
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !25
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %35, i1 %15) #4, !dbg !26
  %39 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !26
  %40 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !26
  %41 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !26
  %42 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !26
  %43 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %37, i1 %15) #4, !dbg !26
  %44 = extractvalue { i32, i32, i32, i32 } %43, 0, !dbg !26
  %45 = extractvalue { i32, i32, i32, i32 } %43, 1, !dbg !26
  %46 = extractvalue { i32, i32, i32, i32 } %43, 2, !dbg !26
  %47 = extractvalue { i32, i32, i32, i32 } %43, 3, !dbg !26
  %48 = shl i32 %8, 4, !dbg !26
  %49 = and i32 %48, 1008, !dbg !26
  %50 = or disjoint i32 %49, %.lobit, !dbg !26
  %51 = and i32 %9, 508, !dbg !26
  %52 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %49, !dbg !26
  %53 = getelementptr float, ptr addrspace(3) %52, i32 %50, !dbg !26
  %54 = insertelement <1 x i32> poison, i32 %39, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %53, <1 x i32> %54, i1 true) #4, !dbg !26
  %55 = or disjoint i32 %50, 4, !dbg !26
  %56 = lshr i32 %55, 2, !dbg !26
  %57 = getelementptr float, ptr addrspace(3) @global_smem, i32 %56, !dbg !26
  %58 = getelementptr float, ptr addrspace(3) %57, i32 %55, !dbg !26
  %59 = insertelement <1 x i32> poison, i32 %40, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %58, <1 x i32> %59, i1 true) #4, !dbg !26
  %60 = or disjoint i32 %50, 8, !dbg !26
  %61 = lshr i32 %60, 2, !dbg !26
  %62 = getelementptr float, ptr addrspace(3) @global_smem, i32 %61, !dbg !26
  %63 = getelementptr float, ptr addrspace(3) %62, i32 %60, !dbg !26
  %64 = insertelement <1 x i32> poison, i32 %41, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %63, <1 x i32> %64, i1 true) #4, !dbg !26
  %65 = or disjoint i32 %50, 12, !dbg !26
  %66 = lshr i32 %65, 2, !dbg !26
  %67 = getelementptr float, ptr addrspace(3) @global_smem, i32 %66, !dbg !26
  %68 = getelementptr float, ptr addrspace(3) %67, i32 %65, !dbg !26
  %69 = insertelement <1 x i32> poison, i32 %42, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %68, <1 x i32> %69, i1 true) #4, !dbg !26
  %70 = or disjoint i32 %50, 2, !dbg !26
  %71 = getelementptr float, ptr addrspace(3) %52, i32 %70, !dbg !26
  %72 = insertelement <1 x i32> poison, i32 %44, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %71, <1 x i32> %72, i1 true) #4, !dbg !26
  %73 = or disjoint i32 %50, 6, !dbg !26
  %74 = lshr i32 %73, 2, !dbg !26
  %75 = getelementptr float, ptr addrspace(3) @global_smem, i32 %74, !dbg !26
  %76 = getelementptr float, ptr addrspace(3) %75, i32 %73, !dbg !26
  %77 = insertelement <1 x i32> poison, i32 %45, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %76, <1 x i32> %77, i1 true) #4, !dbg !26
  %78 = or disjoint i32 %50, 10, !dbg !26
  %79 = lshr i32 %78, 2, !dbg !26
  %80 = getelementptr float, ptr addrspace(3) @global_smem, i32 %79, !dbg !26
  %81 = getelementptr float, ptr addrspace(3) %80, i32 %78, !dbg !26
  %82 = insertelement <1 x i32> poison, i32 %46, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %81, <1 x i32> %82, i1 true) #4, !dbg !26
  %83 = or disjoint i32 %50, 14, !dbg !26
  %84 = lshr i32 %83, 2, !dbg !26
  %85 = getelementptr float, ptr addrspace(3) @global_smem, i32 %84, !dbg !26
  %86 = getelementptr float, ptr addrspace(3) %85, i32 %83, !dbg !26
  %87 = insertelement <1 x i32> poison, i32 %47, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %86, <1 x i32> %87, i1 true) #4, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %88 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %51, !dbg !26
  %89 = getelementptr inbounds float, ptr addrspace(3) %88, i32 %51, !dbg !26
  %90 = load float, ptr addrspace(3) %89, align 4, !dbg !26
  %91 = or disjoint i32 %51, 1, !dbg !26
  %92 = getelementptr inbounds float, ptr addrspace(3) %88, i32 %91, !dbg !26
  %93 = load float, ptr addrspace(3) %92, align 4, !dbg !26
  %94 = or disjoint i32 %51, 2, !dbg !26
  %95 = getelementptr inbounds float, ptr addrspace(3) %88, i32 %94, !dbg !26
  %96 = load float, ptr addrspace(3) %95, align 4, !dbg !26
  %97 = or disjoint i32 %51, 3, !dbg !26
  %98 = getelementptr inbounds float, ptr addrspace(3) %88, i32 %97, !dbg !26
  %99 = load float, ptr addrspace(3) %98, align 4, !dbg !26
  %100 = or disjoint i32 %51, 512, !dbg !26
  %101 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %100, !dbg !26
  %102 = getelementptr inbounds float, ptr addrspace(3) %101, i32 %100, !dbg !26
  %103 = load float, ptr addrspace(3) %102, align 4, !dbg !26
  %104 = or disjoint i32 %51, 513, !dbg !26
  %105 = lshr i32 %104, 2, !dbg !26
  %106 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %105, !dbg !26
  %107 = getelementptr inbounds float, ptr addrspace(3) %106, i32 %104, !dbg !26
  %108 = load float, ptr addrspace(3) %107, align 4, !dbg !26
  %109 = or disjoint i32 %51, 514, !dbg !26
  %110 = lshr i32 %109, 2, !dbg !26
  %111 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %110, !dbg !26
  %112 = getelementptr inbounds float, ptr addrspace(3) %111, i32 %109, !dbg !26
  %113 = load float, ptr addrspace(3) %112, align 4, !dbg !26
  %114 = or disjoint i32 %51, 515, !dbg !26
  %115 = lshr i32 %114, 2, !dbg !26
  %116 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %115, !dbg !26
  %117 = getelementptr inbounds float, ptr addrspace(3) %116, i32 %114, !dbg !26
  %118 = load float, ptr addrspace(3) %117, align 4, !dbg !26
  %119 = shl i32 %26, 12, !dbg !27
  %120 = shl i32 %27, 12, !dbg !27
  %121 = add i32 %119, %19, !dbg !28
  %122 = add i32 %19, %120, !dbg !28
  %123 = sext i32 %121 to i64, !dbg !29
  %124 = getelementptr float, ptr addrspace(1) %1, i64 %123, !dbg !29
  %125 = sext i32 %122 to i64, !dbg !29
  %126 = getelementptr float, ptr addrspace(1) %1, i64 %125, !dbg !29
  %127 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %124, i1 %16) #4, !dbg !30
  %128 = extractvalue { i32, i32, i32, i32 } %127, 0, !dbg !30
  %129 = extractvalue { i32, i32, i32, i32 } %127, 1, !dbg !30
  %130 = extractvalue { i32, i32, i32, i32 } %127, 2, !dbg !30
  %131 = extractvalue { i32, i32, i32, i32 } %127, 3, !dbg !30
  %132 = bitcast i32 %128 to float, !dbg !30
  %133 = bitcast i32 %129 to float, !dbg !30
  %134 = bitcast i32 %130 to float, !dbg !30
  %135 = bitcast i32 %131 to float, !dbg !30
  %136 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %126, i1 %17) #4, !dbg !30
  %137 = extractvalue { i32, i32, i32, i32 } %136, 0, !dbg !30
  %138 = extractvalue { i32, i32, i32, i32 } %136, 1, !dbg !30
  %139 = extractvalue { i32, i32, i32, i32 } %136, 2, !dbg !30
  %140 = extractvalue { i32, i32, i32, i32 } %136, 3, !dbg !30
  %141 = bitcast i32 %137 to float, !dbg !30
  %142 = bitcast i32 %138 to float, !dbg !30
  %143 = bitcast i32 %139 to float, !dbg !30
  %144 = bitcast i32 %140 to float, !dbg !30
  %145 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i = icmp eq i32 %145, 0, !dbg !31
  %146 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !31
  %.not1.i = icmp eq i32 %146, 0, !dbg !31
  br i1 %.not.i, label %152, label %147, !dbg !31

147:                                              ; preds = %5
  br i1 %.not1.i, label %150, label %148, !dbg !31

148:                                              ; preds = %147
  %149 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %132) #4, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

150:                                              ; preds = %147
  %151 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %132) #4, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

152:                                              ; preds = %5
  br i1 %.not1.i, label %155, label %153, !dbg !31

153:                                              ; preds = %152
  %154 = tail call float @llvm.nvvm.sqrt.rn.f(float %132) #4, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

155:                                              ; preds = %152
  %156 = tail call float @llvm.nvvm.sqrt.approx.f(float %132) #4, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

__nv_sqrtf.exit:                                  ; preds = %148, %150, %153, %155
  %.0.i = phi float [ %149, %148 ], [ %151, %150 ], [ %154, %153 ], [ %156, %155 ], !dbg !31
  %157 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i2 = icmp eq i32 %157, 0, !dbg !31
  %158 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !31
  %.not1.i5 = icmp eq i32 %158, 0, !dbg !31
  br i1 %.not.i2, label %164, label %159, !dbg !31

159:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i5, label %162, label %160, !dbg !31

160:                                              ; preds = %159
  %161 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %133) #4, !dbg !31
  br label %__nv_sqrtf.exit6, !dbg !31

162:                                              ; preds = %159
  %163 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %133) #4, !dbg !31
  br label %__nv_sqrtf.exit6, !dbg !31

164:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i5, label %167, label %165, !dbg !31

165:                                              ; preds = %164
  %166 = tail call float @llvm.nvvm.sqrt.rn.f(float %133) #4, !dbg !31
  br label %__nv_sqrtf.exit6, !dbg !31

167:                                              ; preds = %164
  %168 = tail call float @llvm.nvvm.sqrt.approx.f(float %133) #4, !dbg !31
  br label %__nv_sqrtf.exit6, !dbg !31

__nv_sqrtf.exit6:                                 ; preds = %160, %162, %165, %167
  %.0.i4 = phi float [ %161, %160 ], [ %163, %162 ], [ %166, %165 ], [ %168, %167 ], !dbg !31
  %169 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i7 = icmp eq i32 %169, 0, !dbg !31
  %170 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !31
  %.not1.i10 = icmp eq i32 %170, 0, !dbg !31
  br i1 %.not.i7, label %176, label %171, !dbg !31

171:                                              ; preds = %__nv_sqrtf.exit6
  br i1 %.not1.i10, label %174, label %172, !dbg !31

172:                                              ; preds = %171
  %173 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %134) #4, !dbg !31
  br label %__nv_sqrtf.exit11, !dbg !31

174:                                              ; preds = %171
  %175 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %134) #4, !dbg !31
  br label %__nv_sqrtf.exit11, !dbg !31

176:                                              ; preds = %__nv_sqrtf.exit6
  br i1 %.not1.i10, label %179, label %177, !dbg !31

177:                                              ; preds = %176
  %178 = tail call float @llvm.nvvm.sqrt.rn.f(float %134) #4, !dbg !31
  br label %__nv_sqrtf.exit11, !dbg !31

179:                                              ; preds = %176
  %180 = tail call float @llvm.nvvm.sqrt.approx.f(float %134) #4, !dbg !31
  br label %__nv_sqrtf.exit11, !dbg !31

__nv_sqrtf.exit11:                                ; preds = %172, %174, %177, %179
  %.0.i9 = phi float [ %173, %172 ], [ %175, %174 ], [ %178, %177 ], [ %180, %179 ], !dbg !31
  %181 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i12 = icmp eq i32 %181, 0, !dbg !31
  %182 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !31
  %.not1.i15 = icmp eq i32 %182, 0, !dbg !31
  br i1 %.not.i12, label %188, label %183, !dbg !31

183:                                              ; preds = %__nv_sqrtf.exit11
  br i1 %.not1.i15, label %186, label %184, !dbg !31

184:                                              ; preds = %183
  %185 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %135) #4, !dbg !31
  br label %__nv_sqrtf.exit16, !dbg !31

186:                                              ; preds = %183
  %187 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %135) #4, !dbg !31
  br label %__nv_sqrtf.exit16, !dbg !31

188:                                              ; preds = %__nv_sqrtf.exit11
  br i1 %.not1.i15, label %191, label %189, !dbg !31

189:                                              ; preds = %188
  %190 = tail call float @llvm.nvvm.sqrt.rn.f(float %135) #4, !dbg !31
  br label %__nv_sqrtf.exit16, !dbg !31

191:                                              ; preds = %188
  %192 = tail call float @llvm.nvvm.sqrt.approx.f(float %135) #4, !dbg !31
  br label %__nv_sqrtf.exit16, !dbg !31

__nv_sqrtf.exit16:                                ; preds = %184, %186, %189, %191
  %.0.i14 = phi float [ %185, %184 ], [ %187, %186 ], [ %190, %189 ], [ %192, %191 ], !dbg !31
  %193 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i17 = icmp eq i32 %193, 0, !dbg !31
  %194 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !31
  %.not1.i20 = icmp eq i32 %194, 0, !dbg !31
  br i1 %.not.i17, label %200, label %195, !dbg !31

195:                                              ; preds = %__nv_sqrtf.exit16
  br i1 %.not1.i20, label %198, label %196, !dbg !31

196:                                              ; preds = %195
  %197 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %141) #4, !dbg !31
  br label %__nv_sqrtf.exit21, !dbg !31

198:                                              ; preds = %195
  %199 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %141) #4, !dbg !31
  br label %__nv_sqrtf.exit21, !dbg !31

200:                                              ; preds = %__nv_sqrtf.exit16
  br i1 %.not1.i20, label %203, label %201, !dbg !31

201:                                              ; preds = %200
  %202 = tail call float @llvm.nvvm.sqrt.rn.f(float %141) #4, !dbg !31
  br label %__nv_sqrtf.exit21, !dbg !31

203:                                              ; preds = %200
  %204 = tail call float @llvm.nvvm.sqrt.approx.f(float %141) #4, !dbg !31
  br label %__nv_sqrtf.exit21, !dbg !31

__nv_sqrtf.exit21:                                ; preds = %196, %198, %201, %203
  %.0.i19 = phi float [ %197, %196 ], [ %199, %198 ], [ %202, %201 ], [ %204, %203 ], !dbg !31
  %205 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i22 = icmp eq i32 %205, 0, !dbg !31
  %206 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !31
  %.not1.i25 = icmp eq i32 %206, 0, !dbg !31
  br i1 %.not.i22, label %212, label %207, !dbg !31

207:                                              ; preds = %__nv_sqrtf.exit21
  br i1 %.not1.i25, label %210, label %208, !dbg !31

208:                                              ; preds = %207
  %209 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %142) #4, !dbg !31
  br label %__nv_sqrtf.exit26, !dbg !31

210:                                              ; preds = %207
  %211 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %142) #4, !dbg !31
  br label %__nv_sqrtf.exit26, !dbg !31

212:                                              ; preds = %__nv_sqrtf.exit21
  br i1 %.not1.i25, label %215, label %213, !dbg !31

213:                                              ; preds = %212
  %214 = tail call float @llvm.nvvm.sqrt.rn.f(float %142) #4, !dbg !31
  br label %__nv_sqrtf.exit26, !dbg !31

215:                                              ; preds = %212
  %216 = tail call float @llvm.nvvm.sqrt.approx.f(float %142) #4, !dbg !31
  br label %__nv_sqrtf.exit26, !dbg !31

__nv_sqrtf.exit26:                                ; preds = %208, %210, %213, %215
  %.0.i24 = phi float [ %209, %208 ], [ %211, %210 ], [ %214, %213 ], [ %216, %215 ], !dbg !31
  %217 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i27 = icmp eq i32 %217, 0, !dbg !31
  %218 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !31
  %.not1.i30 = icmp eq i32 %218, 0, !dbg !31
  br i1 %.not.i27, label %224, label %219, !dbg !31

219:                                              ; preds = %__nv_sqrtf.exit26
  br i1 %.not1.i30, label %222, label %220, !dbg !31

220:                                              ; preds = %219
  %221 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %143) #4, !dbg !31
  br label %__nv_sqrtf.exit31, !dbg !31

222:                                              ; preds = %219
  %223 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %143) #4, !dbg !31
  br label %__nv_sqrtf.exit31, !dbg !31

224:                                              ; preds = %__nv_sqrtf.exit26
  br i1 %.not1.i30, label %227, label %225, !dbg !31

225:                                              ; preds = %224
  %226 = tail call float @llvm.nvvm.sqrt.rn.f(float %143) #4, !dbg !31
  br label %__nv_sqrtf.exit31, !dbg !31

227:                                              ; preds = %224
  %228 = tail call float @llvm.nvvm.sqrt.approx.f(float %143) #4, !dbg !31
  br label %__nv_sqrtf.exit31, !dbg !31

__nv_sqrtf.exit31:                                ; preds = %220, %222, %225, %227
  %.0.i29 = phi float [ %221, %220 ], [ %223, %222 ], [ %226, %225 ], [ %228, %227 ], !dbg !31
  %229 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i32 = icmp eq i32 %229, 0, !dbg !31
  %230 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !31
  %.not1.i35 = icmp eq i32 %230, 0, !dbg !31
  br i1 %.not.i32, label %236, label %231, !dbg !31

231:                                              ; preds = %__nv_sqrtf.exit31
  br i1 %.not1.i35, label %234, label %232, !dbg !31

232:                                              ; preds = %231
  %233 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %144) #4, !dbg !31
  br label %__nv_sqrtf.exit36, !dbg !31

234:                                              ; preds = %231
  %235 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %144) #4, !dbg !31
  br label %__nv_sqrtf.exit36, !dbg !31

236:                                              ; preds = %__nv_sqrtf.exit31
  br i1 %.not1.i35, label %239, label %237, !dbg !31

237:                                              ; preds = %236
  %238 = tail call float @llvm.nvvm.sqrt.rn.f(float %144) #4, !dbg !31
  br label %__nv_sqrtf.exit36, !dbg !31

239:                                              ; preds = %236
  %240 = tail call float @llvm.nvvm.sqrt.approx.f(float %144) #4, !dbg !31
  br label %__nv_sqrtf.exit36, !dbg !31

__nv_sqrtf.exit36:                                ; preds = %232, %234, %237, %239
  %.0.i34 = phi float [ %233, %232 ], [ %235, %234 ], [ %238, %237 ], [ %240, %239 ], !dbg !31
  %241 = fadd float %.0.i, 0x3DDB7CDFE0000000, !dbg !32
  %242 = fadd float %.0.i4, 0x3DDB7CDFE0000000, !dbg !32
  %243 = fadd float %.0.i9, 0x3DDB7CDFE0000000, !dbg !32
  %244 = fadd float %.0.i14, 0x3DDB7CDFE0000000, !dbg !32
  %245 = fadd float %.0.i19, 0x3DDB7CDFE0000000, !dbg !32
  %246 = fadd float %.0.i24, 0x3DDB7CDFE0000000, !dbg !32
  %247 = fadd float %.0.i29, 0x3DDB7CDFE0000000, !dbg !32
  %248 = fadd float %.0.i34, 0x3DDB7CDFE0000000, !dbg !32
  %249 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %90, float %241) #4, !dbg !33
  %250 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %93, float %242) #4, !dbg !33
  %251 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %96, float %243) #4, !dbg !33
  %252 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %99, float %244) #4, !dbg !33
  %253 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %103, float %245) #4, !dbg !33
  %254 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %108, float %246) #4, !dbg !33
  %255 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %113, float %247) #4, !dbg !33
  %256 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %118, float %248) #4, !dbg !33
  %257 = shl i32 %13, 12, !dbg !34
  %258 = shl i32 %14, 12, !dbg !34
  %259 = add i32 %257, %19, !dbg !35
  %260 = add i32 %19, %258, !dbg !35
  %261 = sext i32 %259 to i64, !dbg !36
  %262 = getelementptr float, ptr addrspace(1) %2, i64 %261, !dbg !36
  %263 = sext i32 %260 to i64, !dbg !36
  %264 = getelementptr float, ptr addrspace(1) %2, i64 %263, !dbg !36
  %265 = bitcast float %249 to i32, !dbg !37
  %266 = bitcast float %250 to i32, !dbg !37
  %267 = bitcast float %251 to i32, !dbg !37
  %268 = bitcast float %252 to i32, !dbg !37
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %265, i32 %266, i32 %267, i32 %268, ptr addrspace(1) %262, i1 %16) #4, !dbg !37
  %269 = bitcast float %253 to i32, !dbg !37
  %270 = bitcast float %254 to i32, !dbg !37
  %271 = bitcast float %255 to i32, !dbg !37
  %272 = bitcast float %256 to i32, !dbg !37
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %269, i32 %270, i32 %271, i32 %272, ptr addrspace(1) %264, i1 %17) #4, !dbg !37
  ret void, !dbg !38
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c32nqvbwru636qjud3ykdwikdnfqkk2c3pqjrvpd2klyhxqybcsu.py", directory: "inductor_cache/32")
!4 = !{ptr @triton_poi_fused_add_div_sqrt_15, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_div_sqrt_15, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_div_sqrt_15", linkageName: "triton_poi_fused_add_div_sqrt_15", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 38, scope: !7)
!22 = !DILocation(line: 32, column: 50, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 43, scope: !7)
!25 = !DILocation(line: 32, column: 30, scope: !7)
!26 = !DILocation(line: 32, column: 55, scope: !7)
!27 = !DILocation(line: 33, column: 40, scope: !7)
!28 = !DILocation(line: 33, column: 35, scope: !7)
!29 = !DILocation(line: 33, column: 30, scope: !7)
!30 = !DILocation(line: 33, column: 45, scope: !7)
!31 = !DILocation(line: 34, column: 26, scope: !7)
!32 = !DILocation(line: 36, column: 18, scope: !7)
!33 = !DILocation(line: 37, column: 18, scope: !7)
!34 = !DILocation(line: 38, column: 35, scope: !7)
!35 = !DILocation(line: 38, column: 30, scope: !7)
!36 = !DILocation(line: 38, column: 25, scope: !7)
!37 = !DILocation(line: 38, column: 46, scope: !7)
!38 = !DILocation(line: 38, column: 4, scope: !7)
