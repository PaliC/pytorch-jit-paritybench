; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %12 = shl i32 %11, 5, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = shl i32 %13, 2, !dbg !12
  %15 = and i32 %14, 28, !dbg !12
  %16 = lshr i32 %13, 3, !dbg !12
  %17 = and i32 %16, 15, !dbg !12
  %18 = or disjoint i32 %17, 16, !dbg !12
  %19 = or disjoint i32 %12, %15, !dbg !13
  %20 = or disjoint i32 %12, %17, !dbg !13
  %21 = or disjoint i32 %12, %18, !dbg !13
  %22 = icmp slt i32 %19, 256, !dbg !14
  %23 = icmp slt i32 %20, 256, !dbg !14
  %24 = icmp slt i32 %21, 256, !dbg !14
  %25 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %26 = shl i32 %25, 5, !dbg !16
  %27 = or disjoint i32 %26, %17, !dbg !17
  %28 = or disjoint i32 %26, %18, !dbg !17
  %29 = or disjoint i32 %26, %15, !dbg !17
  %.frozen = freeze i32 %19, !dbg !18
  %30 = sdiv i32 %.frozen, 64, !dbg !18
  %31 = mul i32 %30, 64, !dbg !19
  %.decomposed = sub i32 %.frozen, %31, !dbg !19
  %.frozen30 = freeze i32 %20, !dbg !18
  %32 = sdiv i32 %.frozen30, 64, !dbg !18
  %33 = mul i32 %32, 64, !dbg !19
  %.decomposed31 = sub i32 %.frozen30, %33, !dbg !19
  %.frozen32 = freeze i32 %21, !dbg !18
  %34 = sdiv i32 %.frozen32, 64, !dbg !18
  %35 = mul i32 %34, 64, !dbg !19
  %.decomposed33 = sub i32 %.frozen32, %35, !dbg !19
  %36 = shl i32 %27, 6, !dbg !20
  %37 = shl i32 %28, 6, !dbg !20
  %38 = shl i32 %30, 18, !dbg !21
  %39 = add i32 %38, %.decomposed, !dbg !22
  %40 = add i32 %39, %36, !dbg !23
  %41 = add i32 %39, %37, !dbg !23
  %42 = sext i32 %40 to i64, !dbg !24
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !24
  %44 = sext i32 %41 to i64, !dbg !24
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !24
  %46 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %43, i1 %22) #4, !dbg !25
  %47 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %45, i1 %22) #4, !dbg !25
  %48 = sext i32 %.decomposed to i64, !dbg !26
  %49 = getelementptr float, ptr addrspace(1) %1, i64 %48, !dbg !26
  %50 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %49, i1 %22) #4, !dbg !27
  %51 = getelementptr float, ptr addrspace(1) %2, i64 %48, !dbg !28
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %51, i1 %22) #4, !dbg !29
  %53 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !29
  %54 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !29
  %55 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !29
  %56 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !29
  %57 = bitcast i32 %53 to float, !dbg !29
  %58 = bitcast i32 %54 to float, !dbg !29
  %59 = bitcast i32 %55 to float, !dbg !29
  %60 = bitcast i32 %56 to float, !dbg !29
  %61 = getelementptr float, ptr addrspace(1) %3, i64 %48, !dbg !30
  %62 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %61, i1 %22) #4, !dbg !31
  %63 = getelementptr float, ptr addrspace(1) %4, i64 %48, !dbg !32
  %64 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %63, i1 %22) #4, !dbg !33
  %65 = add i32 %29, 524288, !dbg !34
  %66 = shl nsw i32 %.decomposed31, 12, !dbg !35
  %67 = shl nsw i32 %.decomposed33, 12, !dbg !35
  %68 = shl i32 %32, 20, !dbg !36
  %69 = shl i32 %34, 20, !dbg !36
  %70 = add i32 %68, %66, !dbg !37
  %71 = add i32 %70, %65, !dbg !38
  %72 = add i32 %69, %67, !dbg !37
  %73 = add i32 %72, %65, !dbg !38
  %74 = sext i32 %71 to i64, !dbg !39
  %75 = getelementptr float, ptr addrspace(1) %5, i64 %74, !dbg !39
  %76 = sext i32 %73 to i64, !dbg !39
  %77 = getelementptr float, ptr addrspace(1) %5, i64 %76, !dbg !39
  %78 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %75, i1 %23) #4, !dbg !40
  %79 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %77, i1 %24) #4, !dbg !40
  %80 = fadd float %57, 0x3EE4F8B580000000, !dbg !41
  %81 = fadd float %58, 0x3EE4F8B580000000, !dbg !41
  %82 = fadd float %59, 0x3EE4F8B580000000, !dbg !41
  %83 = fadd float %60, 0x3EE4F8B580000000, !dbg !41
  %84 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !42
  %.not.i = icmp eq i32 %84, 0, !dbg !42
  %85 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !42
  %.not1.i = icmp eq i32 %85, 0, !dbg !42
  br i1 %.not.i, label %91, label %86, !dbg !42

86:                                               ; preds = %10
  br i1 %.not1.i, label %89, label %87, !dbg !42

87:                                               ; preds = %86
  %88 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %80) #4, !dbg !42
  br label %__nv_sqrtf.exit, !dbg !42

89:                                               ; preds = %86
  %90 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %80) #4, !dbg !42
  br label %__nv_sqrtf.exit, !dbg !42

91:                                               ; preds = %10
  br i1 %.not1.i, label %94, label %92, !dbg !42

92:                                               ; preds = %91
  %93 = tail call float @llvm.nvvm.sqrt.rn.f(float %80) #4, !dbg !42
  br label %__nv_sqrtf.exit, !dbg !42

94:                                               ; preds = %91
  %95 = tail call float @llvm.nvvm.sqrt.approx.f(float %80) #4, !dbg !42
  br label %__nv_sqrtf.exit, !dbg !42

__nv_sqrtf.exit:                                  ; preds = %87, %89, %92, %94
  %.0.i = phi float [ %88, %87 ], [ %90, %89 ], [ %93, %92 ], [ %95, %94 ], !dbg !42
  %96 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !42
  %.not.i15 = icmp eq i32 %96, 0, !dbg !42
  %97 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !42
  %.not1.i18 = icmp eq i32 %97, 0, !dbg !42
  br i1 %.not.i15, label %103, label %98, !dbg !42

98:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i18, label %101, label %99, !dbg !42

99:                                               ; preds = %98
  %100 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %81) #4, !dbg !42
  br label %__nv_sqrtf.exit19, !dbg !42

101:                                              ; preds = %98
  %102 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %81) #4, !dbg !42
  br label %__nv_sqrtf.exit19, !dbg !42

103:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i18, label %106, label %104, !dbg !42

104:                                              ; preds = %103
  %105 = tail call float @llvm.nvvm.sqrt.rn.f(float %81) #4, !dbg !42
  br label %__nv_sqrtf.exit19, !dbg !42

106:                                              ; preds = %103
  %107 = tail call float @llvm.nvvm.sqrt.approx.f(float %81) #4, !dbg !42
  br label %__nv_sqrtf.exit19, !dbg !42

__nv_sqrtf.exit19:                                ; preds = %99, %101, %104, %106
  %.0.i17 = phi float [ %100, %99 ], [ %102, %101 ], [ %105, %104 ], [ %107, %106 ], !dbg !42
  %108 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !42
  %.not.i20 = icmp eq i32 %108, 0, !dbg !42
  %109 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !42
  %.not1.i23 = icmp eq i32 %109, 0, !dbg !42
  br i1 %.not.i20, label %115, label %110, !dbg !42

110:                                              ; preds = %__nv_sqrtf.exit19
  br i1 %.not1.i23, label %113, label %111, !dbg !42

111:                                              ; preds = %110
  %112 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %82) #4, !dbg !42
  br label %__nv_sqrtf.exit24, !dbg !42

113:                                              ; preds = %110
  %114 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %82) #4, !dbg !42
  br label %__nv_sqrtf.exit24, !dbg !42

115:                                              ; preds = %__nv_sqrtf.exit19
  br i1 %.not1.i23, label %118, label %116, !dbg !42

116:                                              ; preds = %115
  %117 = tail call float @llvm.nvvm.sqrt.rn.f(float %82) #4, !dbg !42
  br label %__nv_sqrtf.exit24, !dbg !42

118:                                              ; preds = %115
  %119 = tail call float @llvm.nvvm.sqrt.approx.f(float %82) #4, !dbg !42
  br label %__nv_sqrtf.exit24, !dbg !42

__nv_sqrtf.exit24:                                ; preds = %111, %113, %116, %118
  %.0.i22 = phi float [ %112, %111 ], [ %114, %113 ], [ %117, %116 ], [ %119, %118 ], !dbg !42
  %120 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !42
  %.not.i25 = icmp eq i32 %120, 0, !dbg !42
  %121 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !42
  %.not1.i28 = icmp eq i32 %121, 0, !dbg !42
  br i1 %.not.i25, label %127, label %122, !dbg !42

122:                                              ; preds = %__nv_sqrtf.exit24
  br i1 %.not1.i28, label %125, label %123, !dbg !42

123:                                              ; preds = %122
  %124 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %83) #4, !dbg !42
  br label %__nv_sqrtf.exit29, !dbg !42

125:                                              ; preds = %122
  %126 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %83) #4, !dbg !42
  br label %__nv_sqrtf.exit29, !dbg !42

127:                                              ; preds = %__nv_sqrtf.exit24
  br i1 %.not1.i28, label %130, label %128, !dbg !42

128:                                              ; preds = %127
  %129 = tail call float @llvm.nvvm.sqrt.rn.f(float %83) #4, !dbg !42
  br label %__nv_sqrtf.exit29, !dbg !42

130:                                              ; preds = %127
  %131 = tail call float @llvm.nvvm.sqrt.approx.f(float %83) #4, !dbg !42
  br label %__nv_sqrtf.exit29, !dbg !42

__nv_sqrtf.exit29:                                ; preds = %123, %125, %128, %130
  %.0.i27 = phi float [ %124, %123 ], [ %126, %125 ], [ %129, %128 ], [ %131, %130 ], !dbg !42
  %132 = extractvalue { i32, i32, i32, i32 } %47, 3, !dbg !25
  %133 = extractvalue { i32, i32, i32, i32 } %50, 3, !dbg !27
  %134 = extractvalue { i32, i32, i32, i32 } %47, 2, !dbg !25
  %135 = extractvalue { i32, i32, i32, i32 } %50, 2, !dbg !27
  %136 = extractvalue { i32, i32, i32, i32 } %47, 1, !dbg !25
  %137 = extractvalue { i32, i32, i32, i32 } %50, 1, !dbg !27
  %138 = extractvalue { i32, i32, i32, i32 } %47, 0, !dbg !25
  %139 = extractvalue { i32, i32, i32, i32 } %50, 0, !dbg !27
  %140 = extractvalue { i32, i32, i32, i32 } %46, 3, !dbg !25
  %141 = extractvalue { i32, i32, i32, i32 } %46, 2, !dbg !25
  %142 = extractvalue { i32, i32, i32, i32 } %46, 1, !dbg !25
  %143 = extractvalue { i32, i32, i32, i32 } %46, 0, !dbg !25
  %144 = extractvalue { i32, i32, i32, i32 } %79, 3, !dbg !40
  %145 = bitcast i32 %144 to float, !dbg !40
  %146 = extractvalue { i32, i32, i32, i32 } %79, 2, !dbg !40
  %147 = bitcast i32 %146 to float, !dbg !40
  %148 = extractvalue { i32, i32, i32, i32 } %79, 1, !dbg !40
  %149 = bitcast i32 %148 to float, !dbg !40
  %150 = extractvalue { i32, i32, i32, i32 } %79, 0, !dbg !40
  %151 = bitcast i32 %150 to float, !dbg !40
  %152 = extractvalue { i32, i32, i32, i32 } %78, 3, !dbg !40
  %153 = bitcast i32 %152 to float, !dbg !40
  %154 = extractvalue { i32, i32, i32, i32 } %78, 2, !dbg !40
  %155 = bitcast i32 %154 to float, !dbg !40
  %156 = extractvalue { i32, i32, i32, i32 } %78, 1, !dbg !40
  %157 = bitcast i32 %156 to float, !dbg !40
  %158 = extractvalue { i32, i32, i32, i32 } %78, 0, !dbg !40
  %159 = bitcast i32 %158 to float, !dbg !40
  %160 = extractvalue { i32, i32, i32, i32 } %64, 3, !dbg !33
  %161 = extractvalue { i32, i32, i32, i32 } %64, 2, !dbg !33
  %162 = extractvalue { i32, i32, i32, i32 } %64, 1, !dbg !33
  %163 = extractvalue { i32, i32, i32, i32 } %64, 0, !dbg !33
  %164 = extractvalue { i32, i32, i32, i32 } %62, 3, !dbg !31
  %165 = extractvalue { i32, i32, i32, i32 } %62, 2, !dbg !31
  %166 = extractvalue { i32, i32, i32, i32 } %62, 1, !dbg !31
  %167 = extractvalue { i32, i32, i32, i32 } %62, 0, !dbg !31
  %168 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !43
  %169 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i17) #4, !dbg !43
  %170 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i22) #4, !dbg !43
  %171 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i27) #4, !dbg !43
  %172 = insertelement <4 x i32> poison, i32 %133, i64 0, !dbg !27
  %173 = insertelement <4 x i32> %172, i32 %135, i64 1, !dbg !27
  %174 = insertelement <4 x i32> %173, i32 %137, i64 2, !dbg !27
  %175 = insertelement <4 x i32> %174, i32 %139, i64 3, !dbg !27
  %176 = bitcast <4 x i32> %175 to <4 x float>, !dbg !27
  %177 = shufflevector <4 x float> %176, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !27
  %178 = insertelement <8 x i32> poison, i32 %132, i64 0, !dbg !25
  %179 = insertelement <8 x i32> %178, i32 %134, i64 1, !dbg !25
  %180 = insertelement <8 x i32> %179, i32 %136, i64 2, !dbg !25
  %181 = insertelement <8 x i32> %180, i32 %138, i64 3, !dbg !25
  %182 = insertelement <8 x i32> %181, i32 %140, i64 4, !dbg !25
  %183 = insertelement <8 x i32> %182, i32 %141, i64 5, !dbg !25
  %184 = insertelement <8 x i32> %183, i32 %142, i64 6, !dbg !25
  %185 = insertelement <8 x i32> %184, i32 %143, i64 7, !dbg !25
  %186 = bitcast <8 x i32> %185 to <8 x float>, !dbg !25
  %187 = fsub <8 x float> %186, %177, !dbg !44
  %188 = insertelement <4 x i32> poison, i32 %160, i64 0, !dbg !33
  %189 = insertelement <4 x i32> %188, i32 %161, i64 1, !dbg !33
  %190 = insertelement <4 x i32> %189, i32 %162, i64 2, !dbg !33
  %191 = insertelement <4 x i32> %190, i32 %163, i64 3, !dbg !33
  %192 = bitcast <4 x i32> %191 to <4 x float>, !dbg !33
  %193 = shufflevector <4 x float> %192, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !33
  %194 = insertelement <4 x i32> poison, i32 %164, i64 0, !dbg !31
  %195 = insertelement <4 x i32> %194, i32 %165, i64 1, !dbg !31
  %196 = insertelement <4 x i32> %195, i32 %166, i64 2, !dbg !31
  %197 = insertelement <4 x i32> %196, i32 %167, i64 3, !dbg !31
  %198 = bitcast <4 x i32> %197 to <4 x float>, !dbg !31
  %199 = shufflevector <4 x float> %198, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !31
  %200 = insertelement <8 x float> poison, float %171, i64 0, !dbg !45
  %201 = insertelement <8 x float> %200, float %170, i64 1, !dbg !45
  %202 = insertelement <8 x float> %201, float %169, i64 2, !dbg !45
  %203 = insertelement <8 x float> %202, float %168, i64 3, !dbg !45
  %204 = shufflevector <8 x float> %203, <8 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !45
  %205 = fmul <8 x float> %187, %204, !dbg !45
  %206 = fmul <8 x float> %205, %199, !dbg !46
  %207 = fadd <8 x float> %206, %193, !dbg !47
  %208 = fcmp olt <8 x float> %207, zeroinitializer, !dbg !48
  %209 = extractelement <8 x i1> %208, i64 7, !dbg !52
  %210 = extractelement <8 x float> %207, i64 7, !dbg !52
  %211 = select i1 %209, float 0.000000e+00, float %210, !dbg !52
  %212 = extractelement <8 x i1> %208, i64 6, !dbg !52
  %213 = extractelement <8 x float> %207, i64 6, !dbg !52
  %214 = select i1 %212, float 0.000000e+00, float %213, !dbg !52
  %215 = extractelement <8 x i1> %208, i64 5, !dbg !52
  %216 = extractelement <8 x float> %207, i64 5, !dbg !52
  %217 = select i1 %215, float 0.000000e+00, float %216, !dbg !52
  %218 = extractelement <8 x i1> %208, i64 4, !dbg !52
  %219 = extractelement <8 x float> %207, i64 4, !dbg !52
  %220 = select i1 %218, float 0.000000e+00, float %219, !dbg !52
  %221 = extractelement <8 x i1> %208, i64 3, !dbg !52
  %222 = extractelement <8 x float> %207, i64 3, !dbg !52
  %223 = select i1 %221, float 0.000000e+00, float %222, !dbg !52
  %224 = extractelement <8 x i1> %208, i64 2, !dbg !52
  %225 = extractelement <8 x float> %207, i64 2, !dbg !52
  %226 = select i1 %224, float 0.000000e+00, float %225, !dbg !52
  %227 = extractelement <8 x i1> %208, i64 1, !dbg !52
  %228 = extractelement <8 x float> %207, i64 1, !dbg !52
  %229 = select i1 %227, float 0.000000e+00, float %228, !dbg !52
  %230 = extractelement <8 x i1> %208, i64 0, !dbg !52
  %231 = extractelement <8 x float> %207, i64 0, !dbg !52
  %232 = select i1 %230, float 0.000000e+00, float %231, !dbg !52
  %233 = shl i32 %13, 7, !dbg !52
  %234 = and i32 %233, 896, !dbg !52
  %235 = or disjoint i32 %234, %17, !dbg !52
  %236 = and i32 %14, 508, !dbg !52
  %237 = lshr exact i32 %234, 5, !dbg !52
  %238 = add nuw nsw i32 %237, %235, !dbg !52
  %239 = zext nneg i32 %238 to i64, !dbg !52
  %240 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %239, !dbg !52
  %241 = bitcast float %211 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %240, <1 x i32> %241, i1 true) #4, !dbg !52
  %242 = or disjoint i32 %235, 32, !dbg !52
  %243 = lshr i32 %242, 5, !dbg !52
  %244 = add nuw nsw i32 %243, %242, !dbg !52
  %245 = zext nneg i32 %244 to i64, !dbg !52
  %246 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %245, !dbg !52
  %247 = bitcast float %214 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %246, <1 x i32> %247, i1 true) #4, !dbg !52
  %248 = or disjoint i32 %235, 64, !dbg !52
  %249 = lshr i32 %248, 5, !dbg !52
  %250 = add nuw nsw i32 %249, %248, !dbg !52
  %251 = zext nneg i32 %250 to i64, !dbg !52
  %252 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %251, !dbg !52
  %253 = bitcast float %217 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %252, <1 x i32> %253, i1 true) #4, !dbg !52
  %254 = or disjoint i32 %235, 96, !dbg !52
  %255 = lshr i32 %254, 5, !dbg !52
  %256 = add nuw nsw i32 %255, %254, !dbg !52
  %257 = zext nneg i32 %256 to i64, !dbg !52
  %258 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %257, !dbg !52
  %259 = bitcast float %220 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %258, <1 x i32> %259, i1 true) #4, !dbg !52
  %260 = or disjoint i32 %235, 16, !dbg !52
  %261 = add nuw nsw i32 %260, %237, !dbg !52
  %262 = zext nneg i32 %261 to i64, !dbg !52
  %263 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %262, !dbg !52
  %264 = bitcast float %223 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %263, <1 x i32> %264, i1 true) #4, !dbg !52
  %265 = or disjoint i32 %235, 48, !dbg !52
  %266 = lshr i32 %265, 5, !dbg !52
  %267 = add nuw nsw i32 %266, %265, !dbg !52
  %268 = zext nneg i32 %267 to i64, !dbg !52
  %269 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %268, !dbg !52
  %270 = bitcast float %226 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %269, <1 x i32> %270, i1 true) #4, !dbg !52
  %271 = or disjoint i32 %235, 80, !dbg !52
  %272 = lshr i32 %271, 5, !dbg !52
  %273 = add nuw nsw i32 %272, %271, !dbg !52
  %274 = zext nneg i32 %273 to i64, !dbg !52
  %275 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %274, !dbg !52
  %276 = bitcast float %229 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %275, <1 x i32> %276, i1 true) #4, !dbg !52
  %277 = or disjoint i32 %235, 112, !dbg !52
  %278 = lshr i32 %277, 5, !dbg !52
  %279 = add nuw nsw i32 %278, %277, !dbg !52
  %280 = zext nneg i32 %279 to i64, !dbg !52
  %281 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %280, !dbg !52
  %282 = bitcast float %232 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %281, <1 x i32> %282, i1 true) #4, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %283 = lshr i32 %236, 5, !dbg !52
  %284 = add nuw nsw i32 %283, %236, !dbg !52
  %285 = zext nneg i32 %284 to i64, !dbg !52
  %286 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %285, !dbg !52
  %287 = load float, ptr addrspace(3) %286, align 4, !dbg !52
  %288 = or disjoint i32 %236, 1, !dbg !52
  %289 = add nuw nsw i32 %288, %283, !dbg !52
  %290 = zext nneg i32 %289 to i64, !dbg !52
  %291 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %290, !dbg !52
  %292 = load float, ptr addrspace(3) %291, align 4, !dbg !52
  %293 = or disjoint i32 %236, 2, !dbg !52
  %294 = add nuw nsw i32 %293, %283, !dbg !52
  %295 = zext nneg i32 %294 to i64, !dbg !52
  %296 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %295, !dbg !52
  %297 = load float, ptr addrspace(3) %296, align 4, !dbg !52
  %298 = or disjoint i32 %236, 3, !dbg !52
  %299 = add nuw nsw i32 %298, %283, !dbg !52
  %300 = zext nneg i32 %299 to i64, !dbg !52
  %301 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %300, !dbg !52
  %302 = load float, ptr addrspace(3) %301, align 4, !dbg !52
  %303 = or disjoint i32 %236, 512, !dbg !52
  %304 = lshr i32 %303, 5, !dbg !52
  %305 = add nuw nsw i32 %304, %303, !dbg !52
  %306 = zext nneg i32 %305 to i64, !dbg !52
  %307 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %306, !dbg !52
  %308 = load float, ptr addrspace(3) %307, align 4, !dbg !52
  %309 = or disjoint i32 %236, 513, !dbg !52
  %310 = lshr i32 %309, 5, !dbg !52
  %311 = add nuw nsw i32 %310, %309, !dbg !52
  %312 = zext nneg i32 %311 to i64, !dbg !52
  %313 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %312, !dbg !52
  %314 = load float, ptr addrspace(3) %313, align 4, !dbg !52
  %315 = or disjoint i32 %236, 514, !dbg !52
  %316 = lshr i32 %315, 5, !dbg !52
  %317 = add nuw nsw i32 %316, %315, !dbg !52
  %318 = zext nneg i32 %317 to i64, !dbg !52
  %319 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %318, !dbg !52
  %320 = load float, ptr addrspace(3) %319, align 4, !dbg !52
  %321 = or disjoint i32 %236, 515, !dbg !52
  %322 = lshr i32 %321, 5, !dbg !52
  %323 = add nuw nsw i32 %322, %321, !dbg !52
  %324 = zext nneg i32 %323 to i64, !dbg !52
  %325 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %324, !dbg !52
  %326 = load float, ptr addrspace(3) %325, align 4, !dbg !52
  %327 = fadd float %287, %159, !dbg !53
  %328 = fadd float %292, %157, !dbg !53
  %329 = fadd float %297, %155, !dbg !53
  %330 = fadd float %302, %153, !dbg !53
  %331 = fadd float %308, %151, !dbg !53
  %332 = fadd float %314, %149, !dbg !53
  %333 = fadd float %320, %147, !dbg !53
  %334 = fadd float %326, %145, !dbg !53
  %335 = add i32 %70, %29, !dbg !54
  %336 = add i32 %72, %29, !dbg !54
  %337 = sext i32 %335 to i64, !dbg !55
  %338 = getelementptr float, ptr addrspace(1) %6, i64 %337, !dbg !55
  %339 = sext i32 %336 to i64, !dbg !55
  %340 = getelementptr float, ptr addrspace(1) %6, i64 %339, !dbg !55
  %341 = bitcast float %287 to i32, !dbg !56
  %342 = bitcast float %292 to i32, !dbg !56
  %343 = bitcast float %297 to i32, !dbg !56
  %344 = bitcast float %302 to i32, !dbg !56
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %341, i32 %342, i32 %343, i32 %344, ptr addrspace(1) %338, i1 %23) #4, !dbg !56
  %345 = bitcast float %308 to i32, !dbg !56
  %346 = bitcast float %314 to i32, !dbg !56
  %347 = bitcast float %320 to i32, !dbg !56
  %348 = bitcast float %326 to i32, !dbg !56
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %345, i32 %346, i32 %347, i32 %348, ptr addrspace(1) %340, i1 %24) #4, !dbg !56
  %349 = getelementptr float, ptr addrspace(1) %7, i64 %42, !dbg !57
  %350 = getelementptr float, ptr addrspace(1) %7, i64 %44, !dbg !57
  tail call void @llvm.nvvm.barrier0(), !dbg !58
  %351 = lshr exact i32 %234, 3, !dbg !58
  %352 = or disjoint i32 %351, %235, !dbg !58
  %353 = zext nneg i32 %352 to i64, !dbg !58
  %354 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %353, !dbg !58
  %355 = bitcast float %327 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %354, <1 x i32> %355, i1 true) #4, !dbg !58
  %356 = shl nuw nsw i32 %243, 2, !dbg !58
  %357 = add nuw nsw i32 %356, %242, !dbg !58
  %358 = zext nneg i32 %357 to i64, !dbg !58
  %359 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %358, !dbg !58
  %360 = bitcast float %328 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %359, <1 x i32> %360, i1 true) #4, !dbg !58
  %361 = shl nuw nsw i32 %249, 2, !dbg !58
  %362 = add nuw nsw i32 %361, %248, !dbg !58
  %363 = zext nneg i32 %362 to i64, !dbg !58
  %364 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %363, !dbg !58
  %365 = bitcast float %329 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %364, <1 x i32> %365, i1 true) #4, !dbg !58
  %366 = shl nuw nsw i32 %255, 2, !dbg !58
  %367 = add nuw nsw i32 %366, %254, !dbg !58
  %368 = zext nneg i32 %367 to i64, !dbg !58
  %369 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %368, !dbg !58
  %370 = bitcast float %330 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %369, <1 x i32> %370, i1 true) #4, !dbg !58
  %371 = add nuw nsw i32 %260, %351, !dbg !58
  %372 = zext nneg i32 %371 to i64, !dbg !58
  %373 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %372, !dbg !58
  %374 = bitcast float %331 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %373, <1 x i32> %374, i1 true) #4, !dbg !58
  %375 = shl nuw nsw i32 %266, 2, !dbg !58
  %376 = add nuw nsw i32 %375, %265, !dbg !58
  %377 = zext nneg i32 %376 to i64, !dbg !58
  %378 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %377, !dbg !58
  %379 = bitcast float %332 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %378, <1 x i32> %379, i1 true) #4, !dbg !58
  %380 = shl nuw nsw i32 %272, 2, !dbg !58
  %381 = add nuw nsw i32 %380, %271, !dbg !58
  %382 = zext nneg i32 %381 to i64, !dbg !58
  %383 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %382, !dbg !58
  %384 = bitcast float %333 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %383, <1 x i32> %384, i1 true) #4, !dbg !58
  %385 = shl nuw nsw i32 %278, 2, !dbg !58
  %386 = add nuw nsw i32 %385, %277, !dbg !58
  %387 = zext nneg i32 %386 to i64, !dbg !58
  %388 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %387, !dbg !58
  %389 = bitcast float %334 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %388, <1 x i32> %389, i1 true) #4, !dbg !58
  tail call void @llvm.nvvm.barrier0(), !dbg !58
  %390 = and i32 %13, 127, !dbg !58
  %391 = add nuw nsw i32 %283, %390, !dbg !58
  %392 = shl nuw nsw i32 %391, 2, !dbg !58
  %393 = zext nneg i32 %392 to i64, !dbg !58
  %394 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %393, !dbg !58
  %395 = shl nuw nsw i32 %304, 2, !dbg !58
  %396 = add nuw nsw i32 %395, %303, !dbg !58
  %397 = zext nneg i32 %396 to i64, !dbg !58
  %398 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %397, !dbg !58
  %399 = load <4 x i32>, ptr addrspace(3) %398, align 16, !dbg !58
  %.extract = load i32, ptr addrspace(3) %394, align 16, !dbg !58
  %400 = getelementptr inbounds i8, ptr addrspace(3) %394, i64 4, !dbg !58
  %.extract8 = load i32, ptr addrspace(3) %400, align 4, !dbg !58
  %401 = getelementptr inbounds i8, ptr addrspace(3) %394, i64 8, !dbg !58
  %.extract9 = load i32, ptr addrspace(3) %401, align 8, !dbg !58
  %402 = getelementptr inbounds i8, ptr addrspace(3) %394, i64 12, !dbg !58
  %.extract10 = load i32, ptr addrspace(3) %402, align 4, !dbg !58
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %349, i1 %22) #4, !dbg !58
  %.extract11 = extractelement <4 x i32> %399, i64 0, !dbg !58
  %.extract12 = extractelement <4 x i32> %399, i64 1, !dbg !58
  %.extract13 = extractelement <4 x i32> %399, i64 2, !dbg !58
  %.extract14 = extractelement <4 x i32> %399, i64 3, !dbg !58
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %350, i1 %22) #4, !dbg !58
  ret void, !dbg !59
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cdymlnuzyd6d2jcuevadzq6zybkz3nvfqjjg5gken5dhbe4udwku.py", directory: "inductor_cache/dy")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_8, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_8, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_relu_8", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_relu_8", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 30, column: 19, scope: !7)
!19 = !DILocation(line: 29, column: 19, scope: !7)
!20 = !DILocation(line: 31, column: 38, scope: !7)
!21 = !DILocation(line: 31, column: 50, scope: !7)
!22 = !DILocation(line: 31, column: 35, scope: !7)
!23 = !DILocation(line: 31, column: 43, scope: !7)
!24 = !DILocation(line: 31, column: 30, scope: !7)
!25 = !DILocation(line: 31, column: 55, scope: !7)
!26 = !DILocation(line: 32, column: 30, scope: !7)
!27 = !DILocation(line: 32, column: 35, scope: !7)
!28 = !DILocation(line: 33, column: 30, scope: !7)
!29 = !DILocation(line: 33, column: 35, scope: !7)
!30 = !DILocation(line: 34, column: 31, scope: !7)
!31 = !DILocation(line: 34, column: 36, scope: !7)
!32 = !DILocation(line: 35, column: 31, scope: !7)
!33 = !DILocation(line: 35, column: 36, scope: !7)
!34 = !DILocation(line: 36, column: 40, scope: !7)
!35 = !DILocation(line: 36, column: 50, scope: !7)
!36 = !DILocation(line: 36, column: 63, scope: !7)
!37 = !DILocation(line: 36, column: 45, scope: !7)
!38 = !DILocation(line: 36, column: 55, scope: !7)
!39 = !DILocation(line: 36, column: 31, scope: !7)
!40 = !DILocation(line: 36, column: 68, scope: !7)
!41 = !DILocation(line: 39, column: 18, scope: !7)
!42 = !DILocation(line: 40, column: 26, scope: !7)
!43 = !DILocation(line: 42, column: 18, scope: !7)
!44 = !DILocation(line: 37, column: 18, scope: !7)
!45 = !DILocation(line: 45, column: 19, scope: !7)
!46 = !DILocation(line: 46, column: 20, scope: !7)
!47 = !DILocation(line: 47, column: 20, scope: !7)
!48 = !DILocation(line: 118, column: 15, scope: !49, inlinedAt: !51)
!49 = distinct !DILexicalBlockFile(scope: !7, file: !50, discriminator: 0)
!50 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!51 = !DILocation(line: 49, column: 42, scope: !7)
!52 = !DILocation(line: 121, column: 29, scope: !49, inlinedAt: !51)
!53 = !DILocation(line: 50, column: 20, scope: !7)
!54 = !DILocation(line: 51, column: 40, scope: !7)
!55 = !DILocation(line: 51, column: 25, scope: !7)
!56 = !DILocation(line: 51, column: 60, scope: !7)
!57 = !DILocation(line: 52, column: 25, scope: !7)
!58 = !DILocation(line: 52, column: 57, scope: !7)
!59 = !DILocation(line: 52, column: 4, scope: !7)
