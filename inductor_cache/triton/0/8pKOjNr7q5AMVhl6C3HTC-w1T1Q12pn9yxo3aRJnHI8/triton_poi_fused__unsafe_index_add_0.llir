; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused__unsafe_index_add_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 9, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = and i32 %8, 127, !dbg !12
  %10 = or disjoint i32 %9, 128, !dbg !12
  %11 = or disjoint i32 %9, 256, !dbg !12
  %12 = or disjoint i32 %9, 384, !dbg !12
  %13 = shl i32 %8, 2, !dbg !12
  %14 = and i32 %13, 508, !dbg !12
  %15 = or disjoint i32 %7, %9, !dbg !13
  %16 = or disjoint i32 %7, %10, !dbg !13
  %17 = or disjoint i32 %7, %11, !dbg !13
  %18 = or disjoint i32 %7, %12, !dbg !13
  %19 = or disjoint i32 %7, %14, !dbg !13
  %20 = icmp slt i32 %15, 512, !dbg !14
  %21 = icmp slt i32 %16, 512, !dbg !14
  %22 = icmp slt i32 %17, 512, !dbg !14
  %23 = icmp slt i32 %18, 512, !dbg !14
  %24 = icmp slt i32 %19, 512, !dbg !14
  %25 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %26 = shl i32 %25, 1, !dbg !16
  %27 = or disjoint i32 %26, 1, !dbg !17
  %.frozen = freeze i32 %26, !dbg !18
  %28 = sdiv i32 %.frozen, 64, !dbg !18
  %29 = mul i32 %28, 64, !dbg !19
  %.decomposed = sub i32 %.frozen, %29, !dbg !19
  %30 = srem i32 %27, 64, !dbg !19
  %.frozen15 = freeze i32 %19, !dbg !20
  %31 = sdiv i32 %.frozen15, 128, !dbg !20
  %32 = mul i32 %31, 128, !dbg !21
  %.decomposed16 = sub i32 %.frozen15, %32, !dbg !21
  %33 = shl i32 %15, 12, !dbg !22
  %34 = shl i32 %16, 12, !dbg !22
  %35 = shl i32 %17, 12, !dbg !22
  %36 = shl i32 %18, 12, !dbg !22
  %37 = add i32 %33, %26, !dbg !23
  %38 = add i32 %34, %26, !dbg !23
  %39 = add i32 %35, %26, !dbg !23
  %40 = add i32 %36, %26, !dbg !23
  %41 = sext i32 %37 to i64, !dbg !24
  %42 = getelementptr float, ptr addrspace(1) %1, i64 %41, !dbg !24
  %43 = sext i32 %38 to i64, !dbg !24
  %44 = getelementptr float, ptr addrspace(1) %1, i64 %43, !dbg !24
  %45 = sext i32 %39 to i64, !dbg !24
  %46 = getelementptr float, ptr addrspace(1) %1, i64 %45, !dbg !24
  %47 = sext i32 %40 to i64, !dbg !24
  %48 = getelementptr float, ptr addrspace(1) %1, i64 %47, !dbg !24
  %49 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %42, i1 %20) #2, !dbg !25
  %50 = extractvalue { i32, i32 } %49, 0, !dbg !25
  %51 = extractvalue { i32, i32 } %49, 1, !dbg !25
  %52 = bitcast i32 %50 to float, !dbg !25
  %53 = bitcast i32 %51 to float, !dbg !25
  %54 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %44, i1 %21) #2, !dbg !25
  %55 = extractvalue { i32, i32 } %54, 0, !dbg !25
  %56 = extractvalue { i32, i32 } %54, 1, !dbg !25
  %57 = bitcast i32 %55 to float, !dbg !25
  %58 = bitcast i32 %56 to float, !dbg !25
  %59 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %46, i1 %22) #2, !dbg !25
  %60 = extractvalue { i32, i32 } %59, 0, !dbg !25
  %61 = extractvalue { i32, i32 } %59, 1, !dbg !25
  %62 = bitcast i32 %60 to float, !dbg !25
  %63 = bitcast i32 %61 to float, !dbg !25
  %64 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %48, i1 %23) #2, !dbg !25
  %65 = extractvalue { i32, i32 } %64, 0, !dbg !25
  %66 = extractvalue { i32, i32 } %64, 1, !dbg !25
  %67 = bitcast i32 %65 to float, !dbg !25
  %68 = bitcast i32 %66 to float, !dbg !25
  %69 = sitofp i32 %28 to float, !dbg !26
  %70 = fmul float %69, 6.250000e-02, !dbg !27
  %71 = fptosi float %70 to i32, !dbg !28
  %72 = sitofp i32 %.decomposed to float, !dbg !29
  %73 = sitofp i32 %30 to float, !dbg !29
  %74 = fmul float %72, 6.250000e-02, !dbg !30
  %75 = fmul float %73, 6.250000e-02, !dbg !30
  %76 = fptosi float %74 to i32, !dbg !31
  %77 = fptosi float %75 to i32, !dbg !31
  %78 = shl i32 %71, 2, !dbg !32
  %79 = add i32 %78, %76, !dbg !33
  %80 = add i32 %78, %77, !dbg !33
  %81 = shl i32 %15, 4, !dbg !34
  %82 = shl i32 %16, 4, !dbg !34
  %83 = shl i32 %17, 4, !dbg !34
  %84 = shl i32 %18, 4, !dbg !34
  %85 = add i32 %79, %81, !dbg !35
  %86 = add i32 %80, %81, !dbg !35
  %87 = add i32 %79, %82, !dbg !35
  %88 = add i32 %80, %82, !dbg !35
  %89 = add i32 %79, %83, !dbg !35
  %90 = add i32 %80, %83, !dbg !35
  %91 = add i32 %79, %84, !dbg !35
  %92 = add i32 %80, %84, !dbg !35
  %93 = sext i32 %85 to i64, !dbg !36
  %94 = getelementptr float, ptr addrspace(1) %0, i64 %93, !dbg !36
  %95 = sext i32 %86 to i64, !dbg !36
  %96 = getelementptr float, ptr addrspace(1) %0, i64 %95, !dbg !36
  %97 = sext i32 %87 to i64, !dbg !36
  %98 = getelementptr float, ptr addrspace(1) %0, i64 %97, !dbg !36
  %99 = sext i32 %88 to i64, !dbg !36
  %100 = getelementptr float, ptr addrspace(1) %0, i64 %99, !dbg !36
  %101 = sext i32 %89 to i64, !dbg !36
  %102 = getelementptr float, ptr addrspace(1) %0, i64 %101, !dbg !36
  %103 = sext i32 %90 to i64, !dbg !36
  %104 = getelementptr float, ptr addrspace(1) %0, i64 %103, !dbg !36
  %105 = sext i32 %91 to i64, !dbg !36
  %106 = getelementptr float, ptr addrspace(1) %0, i64 %105, !dbg !36
  %107 = sext i32 %92 to i64, !dbg !36
  %108 = getelementptr float, ptr addrspace(1) %0, i64 %107, !dbg !36
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 %20) #2, !dbg !37
  %110 = bitcast i32 %109 to float, !dbg !37
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 %20) #2, !dbg !37
  %112 = bitcast i32 %111 to float, !dbg !37
  %113 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %98, i1 %21) #2, !dbg !37
  %114 = bitcast i32 %113 to float, !dbg !37
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %100, i1 %21) #2, !dbg !37
  %116 = bitcast i32 %115 to float, !dbg !37
  %117 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %102, i1 %22) #2, !dbg !37
  %118 = bitcast i32 %117 to float, !dbg !37
  %119 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %104, i1 %22) #2, !dbg !37
  %120 = bitcast i32 %119 to float, !dbg !37
  %121 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %106, i1 %23) #2, !dbg !37
  %122 = bitcast i32 %121 to float, !dbg !37
  %123 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %108, i1 %23) #2, !dbg !37
  %124 = bitcast i32 %123 to float, !dbg !37
  %125 = fadd float %52, %110, !dbg !38
  %126 = fadd float %53, %112, !dbg !38
  %127 = fadd float %57, %114, !dbg !38
  %128 = fadd float %58, %116, !dbg !38
  %129 = fadd float %62, %118, !dbg !38
  %130 = fadd float %63, %120, !dbg !38
  %131 = fadd float %67, %122, !dbg !38
  %132 = fadd float %68, %124, !dbg !38
  %133 = shl i32 %25, 8, !dbg !39
  %134 = shl i32 %27, 7, !dbg !39
  %135 = shl i32 %31, 19, !dbg !40
  %136 = add i32 %135, %.decomposed16, !dbg !41
  %137 = add i32 %136, %133, !dbg !42
  %138 = add i32 %136, %134, !dbg !42
  %139 = sext i32 %137 to i64, !dbg !43
  %140 = getelementptr float, ptr addrspace(1) %2, i64 %139, !dbg !43
  %141 = sext i32 %138 to i64, !dbg !43
  %142 = getelementptr float, ptr addrspace(1) %2, i64 %141, !dbg !43
  %143 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %9, !dbg !44
  %144 = bitcast float %125 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %143, <1 x i32> %144, i1 true) #2, !dbg !44
  %145 = getelementptr inbounds i8, ptr addrspace(3) %143, i32 2064, !dbg !44
  %146 = bitcast float %126 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %145, <1 x i32> %146, i1 true) #2, !dbg !44
  %147 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %10, !dbg !44
  %148 = bitcast float %127 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %147, <1 x i32> %148, i1 true) #2, !dbg !44
  %149 = getelementptr inbounds i8, ptr addrspace(3) %143, i32 2576, !dbg !44
  %150 = bitcast float %128 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %149, <1 x i32> %150, i1 true) #2, !dbg !44
  %151 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !44
  %152 = bitcast float %129 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %151, <1 x i32> %152, i1 true) #2, !dbg !44
  %153 = getelementptr inbounds i8, ptr addrspace(3) %143, i32 3088, !dbg !44
  %154 = bitcast float %130 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %153, <1 x i32> %154, i1 true) #2, !dbg !44
  %155 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !44
  %156 = bitcast float %131 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %155, <1 x i32> %156, i1 true) #2, !dbg !44
  %157 = getelementptr inbounds i8, ptr addrspace(3) %143, i32 3600, !dbg !44
  %158 = bitcast float %132 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %157, <1 x i32> %158, i1 true) #2, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %159 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !44
  %160 = or disjoint i32 %14, 512, !dbg !44
  %161 = getelementptr float, ptr addrspace(3) @global_smem, i32 %160, !dbg !44
  %162 = getelementptr i8, ptr addrspace(3) %161, i32 16, !dbg !44
  %163 = load <4 x i32>, ptr addrspace(3) %162, align 16, !dbg !44
  %.extract = load i32, ptr addrspace(3) %159, align 16, !dbg !44
  %164 = getelementptr inbounds i8, ptr addrspace(3) %159, i32 4, !dbg !44
  %.extract8 = load i32, ptr addrspace(3) %164, align 4, !dbg !44
  %165 = getelementptr inbounds i8, ptr addrspace(3) %159, i32 8, !dbg !44
  %.extract9 = load i32, ptr addrspace(3) %165, align 8, !dbg !44
  %166 = getelementptr inbounds i8, ptr addrspace(3) %159, i32 12, !dbg !44
  %.extract10 = load i32, ptr addrspace(3) %166, align 4, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %140, i1 %24) #2, !dbg !44
  %.extract11 = extractelement <4 x i32> %163, i64 0, !dbg !44
  %.extract12 = extractelement <4 x i32> %163, i64 1, !dbg !44
  %.extract13 = extractelement <4 x i32> %163, i64 2, !dbg !44
  %.extract14 = extractelement <4 x i32> %163, i64 3, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %142, i1 %24) #2, !dbg !44
  ret void, !dbg !45
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cbzixknvbypz6iruufz3qq5iwdohfj4omjds3fudqetucvsnj6ei.py", directory: "inductor_cache/bz")
!4 = !{ptr @triton_poi_fused__unsafe_index_add_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__unsafe_index_add_0, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__unsafe_index_add_0", linkageName: "triton_poi_fused__unsafe_index_add_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 28, column: 19, scope: !7)
!19 = !DILocation(line: 29, column: 19, scope: !7)
!20 = !DILocation(line: 33, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 19, scope: !7)
!22 = !DILocation(line: 34, column: 41, scope: !7)
!23 = !DILocation(line: 34, column: 36, scope: !7)
!24 = !DILocation(line: 34, column: 31, scope: !7)
!25 = !DILocation(line: 34, column: 46, scope: !7)
!26 = !DILocation(line: 36, column: 19, scope: !7)
!27 = !DILocation(line: 38, column: 18, scope: !7)
!28 = !DILocation(line: 39, column: 19, scope: !7)
!29 = !DILocation(line: 41, column: 19, scope: !7)
!30 = !DILocation(line: 42, column: 18, scope: !7)
!31 = !DILocation(line: 43, column: 19, scope: !7)
!32 = !DILocation(line: 44, column: 39, scope: !7)
!33 = !DILocation(line: 44, column: 37, scope: !7)
!34 = !DILocation(line: 44, column: 49, scope: !7)
!35 = !DILocation(line: 44, column: 46, scope: !7)
!36 = !DILocation(line: 44, column: 30, scope: !7)
!37 = !DILocation(line: 44, column: 54, scope: !7)
!38 = !DILocation(line: 45, column: 19, scope: !7)
!39 = !DILocation(line: 46, column: 34, scope: !7)
!40 = !DILocation(line: 46, column: 46, scope: !7)
!41 = !DILocation(line: 46, column: 30, scope: !7)
!42 = !DILocation(line: 46, column: 39, scope: !7)
!43 = !DILocation(line: 46, column: 25, scope: !7)
!44 = !DILocation(line: 46, column: 58, scope: !7)
!45 = !DILocation(line: 46, column: 4, scope: !7)
