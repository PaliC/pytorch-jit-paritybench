; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_red_fused_add_div_linalg_vector_norm_9(ptr addrspace(1) %0, i32 %1) local_unnamed_addr !dbg !7 {
__nv_sqrtf.exit:
  %2 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %3 = and i32 %2, 31, !dbg !10
  %4 = shl i32 %2, 2, !dbg !10
  %5 = and i32 %4, 2044, !dbg !10
  %6 = zext nneg i32 %5 to i64, !dbg !11
  %7 = getelementptr float, ptr addrspace(1) %0, i64 %6, !dbg !12
  %8 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %7, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !13
  %9 = extractvalue { i32, i32, i32, i32 } %8, 0, !dbg !13
  %10 = extractvalue { i32, i32, i32, i32 } %8, 1, !dbg !13
  %11 = extractvalue { i32, i32, i32, i32 } %8, 2, !dbg !13
  %12 = extractvalue { i32, i32, i32, i32 } %8, 3, !dbg !13
  %13 = or disjoint i64 %6, 2048, !dbg !14
  %14 = getelementptr float, ptr addrspace(1) %0, i64 %13, !dbg !12
  %15 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %14, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !13
  %16 = extractvalue { i32, i32, i32, i32 } %15, 0, !dbg !13
  %17 = extractvalue { i32, i32, i32, i32 } %15, 1, !dbg !13
  %18 = extractvalue { i32, i32, i32, i32 } %15, 2, !dbg !13
  %19 = extractvalue { i32, i32, i32, i32 } %15, 3, !dbg !13
  %20 = insertelement <2 x i32> poison, i32 %9, i64 0, !dbg !13
  %21 = insertelement <2 x i32> %20, i32 %10, i64 1, !dbg !13
  %22 = bitcast <2 x i32> %21 to <2 x float>, !dbg !13
  %23 = fmul <2 x float> %22, %22, !dbg !15
  %24 = insertelement <2 x i32> poison, i32 %16, i64 0, !dbg !13
  %25 = insertelement <2 x i32> %24, i32 %17, i64 1, !dbg !13
  %26 = bitcast <2 x i32> %25 to <2 x float>, !dbg !13
  %27 = fmul <2 x float> %26, %26, !dbg !15
  %28 = fadd <2 x float> %23, %27, !dbg !16
  %29 = insertelement <2 x i32> poison, i32 %12, i64 0, !dbg !13
  %30 = insertelement <2 x i32> %29, i32 %11, i64 1, !dbg !13
  %31 = bitcast <2 x i32> %30 to <2 x float>, !dbg !13
  %32 = fmul <2 x float> %31, %31, !dbg !15
  %33 = insertelement <2 x i32> poison, i32 %19, i64 0, !dbg !13
  %34 = insertelement <2 x i32> %33, i32 %18, i64 1, !dbg !13
  %35 = bitcast <2 x i32> %34 to <2 x float>, !dbg !13
  %36 = fmul <2 x float> %35, %35, !dbg !15
  %37 = fadd <2 x float> %32, %36, !dbg !16
  %38 = lshr i32 %2, 5, !dbg !10
  %shift = shufflevector <2 x float> %28, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !17
  %39 = fadd <2 x float> %28, %shift, !dbg !17
  %shift20 = shufflevector <2 x float> %37, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !17
  %40 = fadd <2 x float> %shift20, %39, !dbg !17
  %41 = fadd <2 x float> %37, %40, !dbg !17
  %42 = extractelement <2 x float> %41, i64 0, !dbg !17
  %43 = bitcast float %42 to i32, !dbg !22
  %44 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %43, i32 16, i32 31), !dbg !22
  %45 = bitcast i32 %44 to float, !dbg !22
  %46 = fadd float %42, %45, !dbg !17
  %47 = bitcast float %46 to i32, !dbg !22
  %48 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %47, i32 8, i32 31), !dbg !22
  %49 = bitcast i32 %48 to float, !dbg !22
  %50 = fadd float %46, %49, !dbg !17
  %51 = bitcast float %50 to i32, !dbg !22
  %52 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %51, i32 4, i32 31), !dbg !22
  %53 = bitcast i32 %52 to float, !dbg !22
  %54 = fadd float %50, %53, !dbg !17
  %55 = bitcast float %54 to i32, !dbg !22
  %56 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %55, i32 2, i32 31), !dbg !22
  %57 = bitcast i32 %56 to float, !dbg !22
  %58 = fadd float %54, %57, !dbg !17
  %59 = bitcast float %58 to i32, !dbg !22
  %60 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %59, i32 1, i32 31), !dbg !22
  %61 = bitcast i32 %60 to float, !dbg !22
  %62 = fadd float %58, %61, !dbg !17
  %63 = icmp eq i32 %3, 0, !dbg !22
  %64 = and i32 %38, 15, !dbg !22
  %65 = zext nneg i32 %64 to i64, !dbg !22
  %66 = getelementptr float, ptr addrspace(3) @global_smem, i64 %65, !dbg !22
  %67 = bitcast float %62 to <1 x i32>, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %66, <1 x i32> %67, i1 %63) #5, !dbg !22
  tail call void @llvm.nvvm.barrier0(), !dbg !22
  %68 = icmp slt i32 %2, 16, !dbg !22
  %69 = sext i32 %2 to i64, !dbg !22
  %70 = getelementptr float, ptr addrspace(3) @global_smem, i64 %69, !dbg !22
  %71 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %70, i1 %68) #5, !dbg !22
  %72 = bitcast i32 %71 to float, !dbg !22
  %73 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %71, i32 8, i32 31), !dbg !22
  %74 = bitcast i32 %73 to float, !dbg !22
  %75 = fadd float %72, %74, !dbg !17
  %76 = bitcast float %75 to i32, !dbg !22
  %77 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %76, i32 4, i32 31), !dbg !22
  %78 = bitcast i32 %77 to float, !dbg !22
  %79 = fadd float %75, %78, !dbg !17
  %80 = bitcast float %79 to i32, !dbg !22
  %81 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %80, i32 2, i32 31), !dbg !22
  %82 = bitcast i32 %81 to float, !dbg !22
  %83 = fadd float %79, %82, !dbg !17
  %84 = bitcast float %83 to i32, !dbg !22
  %85 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %84, i32 1, i32 31), !dbg !22
  %86 = bitcast i32 %85 to float, !dbg !22
  %87 = fadd float %83, %86, !dbg !17
  %88 = and i32 %2, 15, !dbg !22
  %89 = icmp eq i32 %88, 0, !dbg !22
  %90 = and i1 %68, %89, !dbg !22
  %91 = bitcast float %87 to <1 x i32>, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %70, <1 x i32> %91, i1 %90) #5, !dbg !22
  tail call void @llvm.nvvm.barrier0(), !dbg !22
  %92 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !22
  %93 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !23
  %94 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !23
  %95 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !23
  %96 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !23
  %97 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !23
  %98 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !23
  %99 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !23
  %.not.i12 = icmp eq i32 %99, 0, !dbg !23
  %100 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !23
  %.not1.i15 = icmp eq i32 %100, 0, !dbg !23
  br i1 %.not.i12, label %106, label %101, !dbg !23

101:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i15, label %104, label %102, !dbg !23

102:                                              ; preds = %101
  %103 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %92) #5, !dbg !23
  br label %__nv_sqrtf.exit16, !dbg !23

104:                                              ; preds = %101
  %105 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %92) #5, !dbg !23
  br label %__nv_sqrtf.exit16, !dbg !23

106:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i15, label %109, label %107, !dbg !23

107:                                              ; preds = %106
  %108 = tail call float @llvm.nvvm.sqrt.rn.f(float %92) #5, !dbg !23
  br label %__nv_sqrtf.exit16, !dbg !23

109:                                              ; preds = %106
  %110 = tail call float @llvm.nvvm.sqrt.approx.f(float %92) #5, !dbg !23
  br label %__nv_sqrtf.exit16, !dbg !23

__nv_sqrtf.exit16:                                ; preds = %102, %104, %107, %109
  %.0.i14 = phi float [ %103, %102 ], [ %105, %104 ], [ %108, %107 ], [ %110, %109 ], !dbg !23
  %111 = fadd float %.0.i14, 0x3D71979980000000, !dbg !24
  %112 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %7, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !25
  %113 = extractvalue { i32, i32, i32, i32 } %112, 0, !dbg !25
  %114 = extractvalue { i32, i32, i32, i32 } %112, 1, !dbg !25
  %115 = extractvalue { i32, i32, i32, i32 } %112, 2, !dbg !25
  %116 = extractvalue { i32, i32, i32, i32 } %112, 3, !dbg !25
  %117 = bitcast i32 %113 to float, !dbg !25
  %118 = bitcast i32 %114 to float, !dbg !25
  %119 = bitcast i32 %115 to float, !dbg !25
  %120 = bitcast i32 %116 to float, !dbg !25
  %121 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %117, float %111) #5, !dbg !26
  %122 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %118, float %111) #5, !dbg !26
  %123 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %119, float %111) #5, !dbg !26
  %124 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %120, float %111) #5, !dbg !26
  %125 = bitcast float %121 to i32, !dbg !27
  %126 = bitcast float %122 to i32, !dbg !27
  %127 = bitcast float %123 to i32, !dbg !27
  %128 = bitcast float %124 to i32, !dbg !27
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %125, i32 %126, i32 %127, i32 %128, ptr addrspace(1) %7, i1 true) #5, !dbg !27
  %129 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %14, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #5, !dbg !25
  %130 = extractvalue { i32, i32, i32, i32 } %129, 0, !dbg !25
  %131 = extractvalue { i32, i32, i32, i32 } %129, 1, !dbg !25
  %132 = extractvalue { i32, i32, i32, i32 } %129, 2, !dbg !25
  %133 = extractvalue { i32, i32, i32, i32 } %129, 3, !dbg !25
  %134 = bitcast i32 %130 to float, !dbg !25
  %135 = bitcast i32 %131 to float, !dbg !25
  %136 = bitcast i32 %132 to float, !dbg !25
  %137 = bitcast i32 %133 to float, !dbg !25
  %138 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %134, float %111) #5, !dbg !26
  %139 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %135, float %111) #5, !dbg !26
  %140 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %136, float %111) #5, !dbg !26
  %141 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %137, float %111) #5, !dbg !26
  %142 = bitcast float %138 to i32, !dbg !27
  %143 = bitcast float %139 to i32, !dbg !27
  %144 = bitcast float %140 to i32, !dbg !27
  %145 = bitcast float %141 to i32, !dbg !27
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %142, i32 %143, i32 %144, i32 %145, ptr addrspace(1) %14, i1 true) #5, !dbg !27
  ret void, !dbg !28
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "csue5tk5fvxy6n3sw6xm2jhiavumbcayarwh7tocl3p66phpxhk7.py", directory: "inductor_cache/su")
!4 = !{ptr @triton_red_fused_add_div_linalg_vector_norm_9, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_add_div_linalg_vector_norm_9, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_add_div_linalg_vector_norm_9", linkageName: "triton_red_fused_add_div_linalg_vector_norm_9", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 25, column: 33, scope: !7)
!11 = !DILocation(line: 27, column: 36, scope: !7)
!12 = !DILocation(line: 31, column: 38, scope: !7)
!13 = !DILocation(line: 31, column: 43, scope: !7)
!14 = !DILocation(line: 28, column: 27, scope: !7)
!15 = !DILocation(line: 32, column: 22, scope: !7)
!16 = !DILocation(line: 34, column: 23, scope: !7)
!17 = !DILocation(line: 256, column: 15, scope: !18, inlinedAt: !21)
!18 = distinct !DILexicalBlockFile(scope: !20, file: !19, discriminator: 0)
!19 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!20 = distinct !DILexicalBlockFile(scope: !7, file: !19, discriminator: 0)
!21 = !DILocation(line: 36, column: 25, scope: !7)
!22 = !DILocation(line: 267, column: 36, scope: !20, inlinedAt: !21)
!23 = !DILocation(line: 42, column: 30, scope: !7)
!24 = !DILocation(line: 44, column: 22, scope: !7)
!25 = !DILocation(line: 41, column: 43, scope: !7)
!26 = !DILocation(line: 45, column: 22, scope: !7)
!27 = !DILocation(line: 46, column: 78, scope: !7)
!28 = !DILocation(line: 37, column: 4, scope: !7)
