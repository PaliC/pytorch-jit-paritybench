#loc = loc("inductor_cache/su/csue5tk5fvxy6n3sw6xm2jhiavumbcayarwh7tocl3p66phpxhk7.py":19:0)
#loc1 = loc(unknown)
#loc14 = loc("inductor_cache/su/csue5tk5fvxy6n3sw6xm2jhiavumbcayarwh7tocl3p66phpxhk7.py":36:25)
#loc28 = loc(callsite(#loc1 at #loc14))
module {
  tt.func public @triton_red_fused_add_div_linalg_vector_norm_9(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/su/csue5tk5fvxy6n3sw6xm2jhiavumbcayarwh7tocl3p66phpxhk7.py":19:0), %arg1: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/su/csue5tk5fvxy6n3sw6xm2jhiavumbcayarwh7tocl3p66phpxhk7.py":19:0)) attributes {noinline = false} {
    %c2048_i32 = arith.constant 2048 : i32 loc(#loc1)
    %c4096_i32 = arith.constant 4096 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst = arith.constant dense<9.99999996E-13> : tensor<1x1xf32> loc(#loc1)
    %cst_0 = arith.constant dense<4096> : tensor<1x2048xi32> loc(#loc1)
    %cst_1 = arith.constant dense<0.000000e+00> : tensor<1x2048xf32> loc(#loc1)
    %0 = tt.make_range {end = 2048 : i32, start = 0 : i32} : tensor<2048xi32> loc(#loc2)
    %1 = tt.expand_dims %0 {axis = 0 : i32} : tensor<2048xi32> -> tensor<1x2048xi32> loc(#loc3)
    %2 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1x2048x!tt.ptr<f32>> loc(#loc4)
    %3 = scf.for %arg2 = %c0_i32 to %c4096_i32 step %c2048_i32 iter_args(%arg3 = %cst_1) -> (tensor<1x2048xf32>)  : i32 {
      %10 = tt.splat %arg2 : i32 -> tensor<1x2048xi32> loc(#loc6)
      %11 = arith.addi %10, %1 : tensor<1x2048xi32> loc(#loc6)
      %12 = arith.cmpi slt, %11, %cst_0 : tensor<1x2048xi32> loc(#loc7)
      %13 = tt.addptr %2, %11 : tensor<1x2048x!tt.ptr<f32>>, tensor<1x2048xi32> loc(#loc4)
      %14 = tt.load %13, %12, %cst_1 evictionPolicy = evict_last : tensor<1x2048x!tt.ptr<f32>> loc(#loc8)
      %15 = arith.mulf %14, %14 : tensor<1x2048xf32> loc(#loc9)
      %16 = arith.addf %arg3, %15 : tensor<1x2048xf32> loc(#loc10)
      %17 = arith.select %12, %16, %arg3 : tensor<1x2048xi1>, tensor<1x2048xf32> loc(#loc11)
      scf.yield %17 : tensor<1x2048xf32> loc(#loc12)
    } loc(#loc5)
    %4 = "tt.reduce"(%3) <{axis = 1 : i32}> ({
    ^bb0(%arg2: f32 loc(callsite(#loc1 at #loc14)), %arg3: f32 loc(callsite(#loc1 at #loc14))):
      %10 = arith.addf %arg2, %arg3 : f32 loc(#loc30)
      tt.reduce.return %10 : f32 loc(#loc27)
    }) : (tensor<1x2048xf32>) -> tensor<1xf32> loc(#loc27)
    %5 = tt.expand_dims %4 {axis = 1 : i32} : tensor<1xf32> -> tensor<1x1xf32> loc(#loc16)
    %6 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1x2048x!tt.ptr<f32>> loc(#loc17)
    %7 = tt.extern_elementwise %5 {libname = "", libpath = "", pure = true, symbol = "__nv_sqrtf"} : (tensor<1x1xf32>) -> tensor<1x1xf32> loc(#loc18)
    %8 = arith.addf %7, %cst : tensor<1x1xf32> loc(#loc19)
    %9 = tt.broadcast %8 : tensor<1x1xf32> -> tensor<1x2048xf32> loc(#loc20)
    scf.for %arg2 = %c0_i32 to %c4096_i32 step %c2048_i32  : i32 {
      %10 = tt.splat %arg2 : i32 -> tensor<1x2048xi32> loc(#loc22)
      %11 = arith.addi %10, %1 : tensor<1x2048xi32> loc(#loc22)
      %12 = arith.cmpi slt, %11, %cst_0 : tensor<1x2048xi32> loc(#loc23)
      %13 = tt.addptr %6, %11 : tensor<1x2048x!tt.ptr<f32>>, tensor<1x2048xi32> loc(#loc17)
      %14 = tt.load %13, %12, %cst_1 evictionPolicy = evict_first : tensor<1x2048x!tt.ptr<f32>> loc(#loc24)
      %15 = arith.divf %14, %9 : tensor<1x2048xf32> loc(#loc20)
      tt.store %13, %15, %12 : tensor<1x2048x!tt.ptr<f32>> loc(#loc25)
    } loc(#loc21)
    tt.return loc(#loc26)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/su/csue5tk5fvxy6n3sw6xm2jhiavumbcayarwh7tocl3p66phpxhk7.py":25:25)
#loc3 = loc("inductor_cache/su/csue5tk5fvxy6n3sw6xm2jhiavumbcayarwh7tocl3p66phpxhk7.py":25:33)
#loc4 = loc("inductor_cache/su/csue5tk5fvxy6n3sw6xm2jhiavumbcayarwh7tocl3p66phpxhk7.py":31:38)
#loc5 = loc("inductor_cache/su/csue5tk5fvxy6n3sw6xm2jhiavumbcayarwh7tocl3p66phpxhk7.py":27:36)
#loc6 = loc("inductor_cache/su/csue5tk5fvxy6n3sw6xm2jhiavumbcayarwh7tocl3p66phpxhk7.py":28:27)
#loc7 = loc("inductor_cache/su/csue5tk5fvxy6n3sw6xm2jhiavumbcayarwh7tocl3p66phpxhk7.py":29:25)
#loc8 = loc("inductor_cache/su/csue5tk5fvxy6n3sw6xm2jhiavumbcayarwh7tocl3p66phpxhk7.py":31:43)
#loc9 = loc("inductor_cache/su/csue5tk5fvxy6n3sw6xm2jhiavumbcayarwh7tocl3p66phpxhk7.py":32:22)
#loc10 = loc("inductor_cache/su/csue5tk5fvxy6n3sw6xm2jhiavumbcayarwh7tocl3p66phpxhk7.py":34:23)
#loc11 = loc("inductor_cache/su/csue5tk5fvxy6n3sw6xm2jhiavumbcayarwh7tocl3p66phpxhk7.py":35:38)
#loc12 = loc("inductor_cache/su/csue5tk5fvxy6n3sw6xm2jhiavumbcayarwh7tocl3p66phpxhk7.py":35:8)
#loc13 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc15 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc16 = loc("inductor_cache/su/csue5tk5fvxy6n3sw6xm2jhiavumbcayarwh7tocl3p66phpxhk7.py":36:28)
#loc17 = loc("inductor_cache/su/csue5tk5fvxy6n3sw6xm2jhiavumbcayarwh7tocl3p66phpxhk7.py":41:38)
#loc18 = loc("inductor_cache/su/csue5tk5fvxy6n3sw6xm2jhiavumbcayarwh7tocl3p66phpxhk7.py":42:30)
#loc19 = loc("inductor_cache/su/csue5tk5fvxy6n3sw6xm2jhiavumbcayarwh7tocl3p66phpxhk7.py":44:22)
#loc20 = loc("inductor_cache/su/csue5tk5fvxy6n3sw6xm2jhiavumbcayarwh7tocl3p66phpxhk7.py":45:22)
#loc21 = loc("inductor_cache/su/csue5tk5fvxy6n3sw6xm2jhiavumbcayarwh7tocl3p66phpxhk7.py":37:36)
#loc22 = loc("inductor_cache/su/csue5tk5fvxy6n3sw6xm2jhiavumbcayarwh7tocl3p66phpxhk7.py":38:27)
#loc23 = loc("inductor_cache/su/csue5tk5fvxy6n3sw6xm2jhiavumbcayarwh7tocl3p66phpxhk7.py":39:25)
#loc24 = loc("inductor_cache/su/csue5tk5fvxy6n3sw6xm2jhiavumbcayarwh7tocl3p66phpxhk7.py":41:43)
#loc25 = loc("inductor_cache/su/csue5tk5fvxy6n3sw6xm2jhiavumbcayarwh7tocl3p66phpxhk7.py":46:78)
#loc26 = loc("inductor_cache/su/csue5tk5fvxy6n3sw6xm2jhiavumbcayarwh7tocl3p66phpxhk7.py":37:4)
#loc27 = loc(callsite(#loc13 at #loc14))
#loc29 = loc(callsite(#loc15 at #loc13))
#loc30 = loc(callsite(#loc29 at #loc14))
