; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_max_pool2d_with_indices_36(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 6, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 2, !dbg !12
  %10 = and i32 %9, 63, !dbg !12
  %11 = shl i32 %8, 2, !dbg !12
  %12 = and i32 %11, 60, !dbg !12
  %13 = or disjoint i32 %7, %10, !dbg !13
  %14 = or disjoint i32 %7, %12, !dbg !13
  %15 = icmp slt i32 %14, 64, !dbg !14
  %16 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %17 = shl i32 %16, 6, !dbg !16
  %18 = shl i32 %8, 4, !dbg !17
  %19 = and i32 %18, 48, !dbg !17
  %20 = lshr i32 %8, 4, !dbg !17
  %21 = and i32 %20, 15, !dbg !17
  %22 = or disjoint i32 %17, %19, !dbg !18
  %23 = or disjoint i32 %22, 4, !dbg !18
  %24 = or disjoint i32 %22, 8, !dbg !18
  %25 = or disjoint i32 %22, 12, !dbg !18
  %26 = or disjoint i32 %17, %21, !dbg !18
  %27 = or disjoint i32 %26, 16, !dbg !18
  %28 = or disjoint i32 %26, 32, !dbg !18
  %29 = or disjoint i32 %26, 48, !dbg !18
  %30 = icmp slt i32 %26, 320, !dbg !19
  %31 = icmp slt i32 %27, 320, !dbg !19
  %32 = icmp slt i32 %28, 320, !dbg !19
  %33 = icmp slt i32 %29, 320, !dbg !19
  %.frozen = freeze i32 %13, !dbg !20
  %34 = sdiv i32 %.frozen, 4, !dbg !20
  %35 = srem i32 %34, 4, !dbg !21
  %36 = mul i32 %34, 4, !dbg !22
  %.decomposed = sub i32 %.frozen, %36, !dbg !22
  %.frozen60 = freeze i32 %14, !dbg !23
  %37 = sdiv i32 %.frozen60, 16, !dbg !23
  %38 = mul i32 %37, 16, !dbg !24
  %.decomposed61 = sub i32 %.frozen60, %38, !dbg !24
  %39 = icmp sgt i32 %35, -1, !dbg !25
  %40 = or i32 %35, %.decomposed, !dbg !26
  %41 = icmp sgt i32 %40, -1, !dbg !26
  %42 = mul nsw i32 %.decomposed, 640, !dbg !27
  %43 = mul i32 %34, 5120, !dbg !28
  %44 = add i32 %43, %42, !dbg !29
  %45 = add i32 %44, %22, !dbg !30
  %46 = add i32 %44, %23, !dbg !30
  %47 = add i32 %44, %24, !dbg !30
  %48 = add i32 %44, %25, !dbg !30
  %49 = sext i32 %45 to i64, !dbg !31
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !31
  %51 = sext i32 %46 to i64, !dbg !31
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !31
  %53 = sext i32 %47 to i64, !dbg !31
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !31
  %55 = sext i32 %48 to i64, !dbg !31
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !31
  %57 = add i32 %44, 320, !dbg !32
  %58 = add i32 %57, %22, !dbg !33
  %59 = add i32 %57, %23, !dbg !33
  %60 = add i32 %57, %24, !dbg !33
  %61 = add i32 %57, %25, !dbg !33
  %62 = sext i32 %58 to i64, !dbg !34
  %63 = getelementptr float, ptr addrspace(1) %0, i64 %62, !dbg !34
  %64 = sext i32 %59 to i64, !dbg !34
  %65 = getelementptr float, ptr addrspace(1) %0, i64 %64, !dbg !34
  %66 = sext i32 %60 to i64, !dbg !34
  %67 = getelementptr float, ptr addrspace(1) %0, i64 %66, !dbg !34
  %68 = sext i32 %61 to i64, !dbg !34
  %69 = getelementptr float, ptr addrspace(1) %0, i64 %68, !dbg !34
  %70 = add nsw i32 %.decomposed, 1, !dbg !35
  %71 = icmp ult i32 %70, 4, !dbg !35
  %72 = and i1 %39, %71, !dbg !36
  %73 = add i32 %44, 640, !dbg !37
  %74 = add i32 %73, %22, !dbg !38
  %75 = add i32 %73, %23, !dbg !38
  %76 = add i32 %73, %24, !dbg !38
  %77 = add i32 %73, %25, !dbg !38
  %78 = sext i32 %74 to i64, !dbg !39
  %79 = getelementptr float, ptr addrspace(1) %0, i64 %78, !dbg !39
  %80 = sext i32 %75 to i64, !dbg !39
  %81 = getelementptr float, ptr addrspace(1) %0, i64 %80, !dbg !39
  %82 = sext i32 %76 to i64, !dbg !39
  %83 = getelementptr float, ptr addrspace(1) %0, i64 %82, !dbg !39
  %84 = sext i32 %77 to i64, !dbg !39
  %85 = getelementptr float, ptr addrspace(1) %0, i64 %84, !dbg !39
  %86 = add i32 %44, 2560, !dbg !40
  %87 = add i32 %86, %22, !dbg !41
  %88 = add i32 %86, %23, !dbg !41
  %89 = add i32 %86, %24, !dbg !41
  %90 = add i32 %86, %25, !dbg !41
  %91 = sext i32 %87 to i64, !dbg !42
  %92 = getelementptr float, ptr addrspace(1) %0, i64 %91, !dbg !42
  %93 = sext i32 %88 to i64, !dbg !42
  %94 = getelementptr float, ptr addrspace(1) %0, i64 %93, !dbg !42
  %95 = sext i32 %89 to i64, !dbg !42
  %96 = getelementptr float, ptr addrspace(1) %0, i64 %95, !dbg !42
  %97 = sext i32 %90 to i64, !dbg !42
  %98 = getelementptr float, ptr addrspace(1) %0, i64 %97, !dbg !42
  %99 = add i32 %44, 2880, !dbg !43
  %100 = add i32 %99, %22, !dbg !44
  %101 = add i32 %99, %23, !dbg !44
  %102 = add i32 %99, %24, !dbg !44
  %103 = add i32 %99, %25, !dbg !44
  %104 = sext i32 %100 to i64, !dbg !45
  %105 = getelementptr float, ptr addrspace(1) %0, i64 %104, !dbg !45
  %106 = sext i32 %101 to i64, !dbg !45
  %107 = getelementptr float, ptr addrspace(1) %0, i64 %106, !dbg !45
  %108 = sext i32 %102 to i64, !dbg !45
  %109 = getelementptr float, ptr addrspace(1) %0, i64 %108, !dbg !45
  %110 = sext i32 %103 to i64, !dbg !45
  %111 = getelementptr float, ptr addrspace(1) %0, i64 %110, !dbg !45
  %112 = add i32 %44, 3200, !dbg !46
  %113 = add i32 %112, %22, !dbg !47
  %114 = add i32 %112, %23, !dbg !47
  %115 = add i32 %112, %24, !dbg !47
  %116 = add i32 %112, %25, !dbg !47
  %117 = sext i32 %113 to i64, !dbg !48
  %118 = getelementptr float, ptr addrspace(1) %0, i64 %117, !dbg !48
  %119 = sext i32 %114 to i64, !dbg !48
  %120 = getelementptr float, ptr addrspace(1) %0, i64 %119, !dbg !48
  %121 = sext i32 %115 to i64, !dbg !48
  %122 = getelementptr float, ptr addrspace(1) %0, i64 %121, !dbg !48
  %123 = sext i32 %116 to i64, !dbg !48
  %124 = getelementptr float, ptr addrspace(1) %0, i64 %123, !dbg !48
  %125 = add nsw i32 %35, 1, !dbg !49
  %126 = insertelement <4 x i32> <i32 poison, i32 poison, i32 poison, i32 -1>, i32 %22, i64 0, !dbg !19
  %127 = insertelement <4 x i32> %126, i32 %13, i64 1, !dbg !19
  %128 = insertelement <4 x i32> %127, i32 %125, i64 2, !dbg !19
  %129 = insertelement <4 x i32> <i32 320, i32 64, i32 4, i32 poison>, i32 %.decomposed, i64 3, !dbg !19
  %130 = icmp slt <4 x i32> %128, %129, !dbg !19
  %131 = icmp ult <4 x i32> %128, %129, !dbg !19
  %132 = shufflevector <4 x i1> %130, <4 x i1> %131, <4 x i32> <i32 0, i32 1, i32 6, i32 3>, !dbg !19
  %133 = extractelement <4 x i1> %130, i64 0, !dbg !50
  %134 = and i1 %133, %41, !dbg !51
  %135 = extractelement <4 x i1> %130, i64 1, !dbg !50
  %136 = and i1 %135, %134, !dbg !52
  %137 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %50, i1 %136, i32 -8388608, i1 %136, i32 -8388608, i1 %136, i32 -8388608, i1 %136, i32 -8388608, i1 %136) #2, !dbg !53
  %138 = extractvalue { i32, i32, i32, i32 } %137, 0, !dbg !53
  %139 = extractvalue { i32, i32, i32, i32 } %137, 1, !dbg !53
  %140 = extractvalue { i32, i32, i32, i32 } %137, 2, !dbg !53
  %141 = extractvalue { i32, i32, i32, i32 } %137, 3, !dbg !53
  %142 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %52, i1 %136, i32 -8388608, i1 %136, i32 -8388608, i1 %136, i32 -8388608, i1 %136, i32 -8388608, i1 %136) #2, !dbg !53
  %143 = extractvalue { i32, i32, i32, i32 } %142, 0, !dbg !53
  %144 = extractvalue { i32, i32, i32, i32 } %142, 1, !dbg !53
  %145 = extractvalue { i32, i32, i32, i32 } %142, 2, !dbg !53
  %146 = extractvalue { i32, i32, i32, i32 } %142, 3, !dbg !53
  %147 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %54, i1 %136, i32 -8388608, i1 %136, i32 -8388608, i1 %136, i32 -8388608, i1 %136, i32 -8388608, i1 %136) #2, !dbg !53
  %148 = extractvalue { i32, i32, i32, i32 } %147, 0, !dbg !53
  %149 = extractvalue { i32, i32, i32, i32 } %147, 1, !dbg !53
  %150 = extractvalue { i32, i32, i32, i32 } %147, 2, !dbg !53
  %151 = extractvalue { i32, i32, i32, i32 } %147, 3, !dbg !53
  %152 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %56, i1 %136, i32 -8388608, i1 %136, i32 -8388608, i1 %136, i32 -8388608, i1 %136, i32 -8388608, i1 %136) #2, !dbg !53
  %153 = extractvalue { i32, i32, i32, i32 } %152, 0, !dbg !53
  %154 = extractvalue { i32, i32, i32, i32 } %152, 1, !dbg !53
  %155 = extractvalue { i32, i32, i32, i32 } %152, 2, !dbg !53
  %156 = extractvalue { i32, i32, i32, i32 } %152, 3, !dbg !53
  %157 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %63, i1 %136, i32 -8388608, i1 %136, i32 -8388608, i1 %136, i32 -8388608, i1 %136, i32 -8388608, i1 %136) #2, !dbg !54
  %158 = extractvalue { i32, i32, i32, i32 } %157, 0, !dbg !54
  %159 = extractvalue { i32, i32, i32, i32 } %157, 1, !dbg !54
  %160 = extractvalue { i32, i32, i32, i32 } %157, 2, !dbg !54
  %161 = extractvalue { i32, i32, i32, i32 } %157, 3, !dbg !54
  %162 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %65, i1 %136, i32 -8388608, i1 %136, i32 -8388608, i1 %136, i32 -8388608, i1 %136, i32 -8388608, i1 %136) #2, !dbg !54
  %163 = extractvalue { i32, i32, i32, i32 } %162, 0, !dbg !54
  %164 = extractvalue { i32, i32, i32, i32 } %162, 1, !dbg !54
  %165 = extractvalue { i32, i32, i32, i32 } %162, 2, !dbg !54
  %166 = extractvalue { i32, i32, i32, i32 } %162, 3, !dbg !54
  %167 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %67, i1 %136, i32 -8388608, i1 %136, i32 -8388608, i1 %136, i32 -8388608, i1 %136, i32 -8388608, i1 %136) #2, !dbg !54
  %168 = extractvalue { i32, i32, i32, i32 } %167, 0, !dbg !54
  %169 = extractvalue { i32, i32, i32, i32 } %167, 1, !dbg !54
  %170 = extractvalue { i32, i32, i32, i32 } %167, 2, !dbg !54
  %171 = extractvalue { i32, i32, i32, i32 } %167, 3, !dbg !54
  %172 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %69, i1 %136, i32 -8388608, i1 %136, i32 -8388608, i1 %136, i32 -8388608, i1 %136, i32 -8388608, i1 %136) #2, !dbg !54
  %173 = extractvalue { i32, i32, i32, i32 } %172, 0, !dbg !54
  %174 = extractvalue { i32, i32, i32, i32 } %172, 1, !dbg !54
  %175 = extractvalue { i32, i32, i32, i32 } %172, 2, !dbg !54
  %176 = extractvalue { i32, i32, i32, i32 } %172, 3, !dbg !54
  %177 = and i1 %133, %72, !dbg !55
  %178 = and i1 %135, %177, !dbg !56
  %179 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %79, i1 %178, i32 -8388608, i1 %178, i32 -8388608, i1 %178, i32 -8388608, i1 %178, i32 -8388608, i1 %178) #2, !dbg !57
  %180 = extractvalue { i32, i32, i32, i32 } %179, 0, !dbg !57
  %181 = extractvalue { i32, i32, i32, i32 } %179, 1, !dbg !57
  %182 = extractvalue { i32, i32, i32, i32 } %179, 2, !dbg !57
  %183 = extractvalue { i32, i32, i32, i32 } %179, 3, !dbg !57
  %184 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %81, i1 %178, i32 -8388608, i1 %178, i32 -8388608, i1 %178, i32 -8388608, i1 %178, i32 -8388608, i1 %178) #2, !dbg !57
  %185 = extractvalue { i32, i32, i32, i32 } %184, 0, !dbg !57
  %186 = extractvalue { i32, i32, i32, i32 } %184, 1, !dbg !57
  %187 = extractvalue { i32, i32, i32, i32 } %184, 2, !dbg !57
  %188 = extractvalue { i32, i32, i32, i32 } %184, 3, !dbg !57
  %189 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %83, i1 %178, i32 -8388608, i1 %178, i32 -8388608, i1 %178, i32 -8388608, i1 %178, i32 -8388608, i1 %178) #2, !dbg !57
  %190 = extractvalue { i32, i32, i32, i32 } %189, 0, !dbg !57
  %191 = extractvalue { i32, i32, i32, i32 } %189, 1, !dbg !57
  %192 = extractvalue { i32, i32, i32, i32 } %189, 2, !dbg !57
  %193 = extractvalue { i32, i32, i32, i32 } %189, 3, !dbg !57
  %194 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %85, i1 %178, i32 -8388608, i1 %178, i32 -8388608, i1 %178, i32 -8388608, i1 %178, i32 -8388608, i1 %178) #2, !dbg !57
  %195 = extractvalue { i32, i32, i32, i32 } %194, 0, !dbg !57
  %196 = extractvalue { i32, i32, i32, i32 } %194, 1, !dbg !57
  %197 = extractvalue { i32, i32, i32, i32 } %194, 2, !dbg !57
  %198 = extractvalue { i32, i32, i32, i32 } %194, 3, !dbg !57
  %199 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %92, i1 %136, i32 -8388608, i1 %136, i32 -8388608, i1 %136, i32 -8388608, i1 %136, i32 -8388608, i1 %136) #2, !dbg !58
  %200 = extractvalue { i32, i32, i32, i32 } %199, 0, !dbg !58
  %201 = extractvalue { i32, i32, i32, i32 } %199, 1, !dbg !58
  %202 = extractvalue { i32, i32, i32, i32 } %199, 2, !dbg !58
  %203 = extractvalue { i32, i32, i32, i32 } %199, 3, !dbg !58
  %204 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %94, i1 %136, i32 -8388608, i1 %136, i32 -8388608, i1 %136, i32 -8388608, i1 %136, i32 -8388608, i1 %136) #2, !dbg !58
  %205 = extractvalue { i32, i32, i32, i32 } %204, 0, !dbg !58
  %206 = extractvalue { i32, i32, i32, i32 } %204, 1, !dbg !58
  %207 = extractvalue { i32, i32, i32, i32 } %204, 2, !dbg !58
  %208 = extractvalue { i32, i32, i32, i32 } %204, 3, !dbg !58
  %209 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %96, i1 %136, i32 -8388608, i1 %136, i32 -8388608, i1 %136, i32 -8388608, i1 %136, i32 -8388608, i1 %136) #2, !dbg !58
  %210 = extractvalue { i32, i32, i32, i32 } %209, 0, !dbg !58
  %211 = extractvalue { i32, i32, i32, i32 } %209, 1, !dbg !58
  %212 = extractvalue { i32, i32, i32, i32 } %209, 2, !dbg !58
  %213 = extractvalue { i32, i32, i32, i32 } %209, 3, !dbg !58
  %214 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %98, i1 %136, i32 -8388608, i1 %136, i32 -8388608, i1 %136, i32 -8388608, i1 %136, i32 -8388608, i1 %136) #2, !dbg !58
  %215 = extractvalue { i32, i32, i32, i32 } %214, 0, !dbg !58
  %216 = extractvalue { i32, i32, i32, i32 } %214, 1, !dbg !58
  %217 = extractvalue { i32, i32, i32, i32 } %214, 2, !dbg !58
  %218 = extractvalue { i32, i32, i32, i32 } %214, 3, !dbg !58
  %219 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %105, i1 %136, i32 -8388608, i1 %136, i32 -8388608, i1 %136, i32 -8388608, i1 %136, i32 -8388608, i1 %136) #2, !dbg !59
  %220 = extractvalue { i32, i32, i32, i32 } %219, 0, !dbg !59
  %221 = extractvalue { i32, i32, i32, i32 } %219, 1, !dbg !59
  %222 = extractvalue { i32, i32, i32, i32 } %219, 2, !dbg !59
  %223 = extractvalue { i32, i32, i32, i32 } %219, 3, !dbg !59
  %224 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %107, i1 %136, i32 -8388608, i1 %136, i32 -8388608, i1 %136, i32 -8388608, i1 %136, i32 -8388608, i1 %136) #2, !dbg !59
  %225 = extractvalue { i32, i32, i32, i32 } %224, 0, !dbg !59
  %226 = extractvalue { i32, i32, i32, i32 } %224, 1, !dbg !59
  %227 = extractvalue { i32, i32, i32, i32 } %224, 2, !dbg !59
  %228 = extractvalue { i32, i32, i32, i32 } %224, 3, !dbg !59
  %229 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %109, i1 %136, i32 -8388608, i1 %136, i32 -8388608, i1 %136, i32 -8388608, i1 %136, i32 -8388608, i1 %136) #2, !dbg !59
  %230 = extractvalue { i32, i32, i32, i32 } %229, 0, !dbg !59
  %231 = extractvalue { i32, i32, i32, i32 } %229, 1, !dbg !59
  %232 = extractvalue { i32, i32, i32, i32 } %229, 2, !dbg !59
  %233 = extractvalue { i32, i32, i32, i32 } %229, 3, !dbg !59
  %234 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %111, i1 %136, i32 -8388608, i1 %136, i32 -8388608, i1 %136, i32 -8388608, i1 %136, i32 -8388608, i1 %136) #2, !dbg !59
  %235 = extractvalue { i32, i32, i32, i32 } %234, 0, !dbg !59
  %236 = extractvalue { i32, i32, i32, i32 } %234, 1, !dbg !59
  %237 = extractvalue { i32, i32, i32, i32 } %234, 2, !dbg !59
  %238 = extractvalue { i32, i32, i32, i32 } %234, 3, !dbg !59
  %239 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %118, i1 %178, i32 -8388608, i1 %178, i32 -8388608, i1 %178, i32 -8388608, i1 %178, i32 -8388608, i1 %178) #2, !dbg !60
  %240 = extractvalue { i32, i32, i32, i32 } %239, 0, !dbg !60
  %241 = extractvalue { i32, i32, i32, i32 } %239, 1, !dbg !60
  %242 = extractvalue { i32, i32, i32, i32 } %239, 2, !dbg !60
  %243 = extractvalue { i32, i32, i32, i32 } %239, 3, !dbg !60
  %244 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %120, i1 %178, i32 -8388608, i1 %178, i32 -8388608, i1 %178, i32 -8388608, i1 %178, i32 -8388608, i1 %178) #2, !dbg !60
  %245 = extractvalue { i32, i32, i32, i32 } %244, 0, !dbg !60
  %246 = extractvalue { i32, i32, i32, i32 } %244, 1, !dbg !60
  %247 = extractvalue { i32, i32, i32, i32 } %244, 2, !dbg !60
  %248 = extractvalue { i32, i32, i32, i32 } %244, 3, !dbg !60
  %249 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %122, i1 %178, i32 -8388608, i1 %178, i32 -8388608, i1 %178, i32 -8388608, i1 %178, i32 -8388608, i1 %178) #2, !dbg !60
  %250 = extractvalue { i32, i32, i32, i32 } %249, 0, !dbg !60
  %251 = extractvalue { i32, i32, i32, i32 } %249, 1, !dbg !60
  %252 = extractvalue { i32, i32, i32, i32 } %249, 2, !dbg !60
  %253 = extractvalue { i32, i32, i32, i32 } %249, 3, !dbg !60
  %254 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %124, i1 %178, i32 -8388608, i1 %178, i32 -8388608, i1 %178, i32 -8388608, i1 %178, i32 -8388608, i1 %178) #2, !dbg !60
  %255 = extractvalue { i32, i32, i32, i32 } %254, 0, !dbg !60
  %256 = extractvalue { i32, i32, i32, i32 } %254, 1, !dbg !60
  %257 = extractvalue { i32, i32, i32, i32 } %254, 2, !dbg !60
  %258 = extractvalue { i32, i32, i32, i32 } %254, 3, !dbg !60
  %259 = add i32 %44, 5120, !dbg !61
  %260 = add i32 %259, %22, !dbg !62
  %261 = add i32 %259, %23, !dbg !62
  %262 = add i32 %259, %24, !dbg !62
  %263 = add i32 %259, %25, !dbg !62
  %264 = sext i32 %260 to i64, !dbg !63
  %265 = getelementptr float, ptr addrspace(1) %0, i64 %264, !dbg !63
  %266 = sext i32 %261 to i64, !dbg !63
  %267 = getelementptr float, ptr addrspace(1) %0, i64 %266, !dbg !63
  %268 = sext i32 %262 to i64, !dbg !63
  %269 = getelementptr float, ptr addrspace(1) %0, i64 %268, !dbg !63
  %270 = sext i32 %263 to i64, !dbg !63
  %271 = getelementptr float, ptr addrspace(1) %0, i64 %270, !dbg !63
  %272 = bitcast <4 x i1> %132 to i4, !dbg !64
  %273 = icmp eq i4 %272, -1, !dbg !64
  %274 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %265, i1 %273, i32 -8388608, i1 %273, i32 -8388608, i1 %273, i32 -8388608, i1 %273, i32 -8388608, i1 %273) #2, !dbg !65
  %275 = extractvalue { i32, i32, i32, i32 } %274, 0, !dbg !65
  %276 = extractvalue { i32, i32, i32, i32 } %274, 1, !dbg !65
  %277 = extractvalue { i32, i32, i32, i32 } %274, 2, !dbg !65
  %278 = extractvalue { i32, i32, i32, i32 } %274, 3, !dbg !65
  %279 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %267, i1 %273, i32 -8388608, i1 %273, i32 -8388608, i1 %273, i32 -8388608, i1 %273, i32 -8388608, i1 %273) #2, !dbg !65
  %280 = extractvalue { i32, i32, i32, i32 } %279, 0, !dbg !65
  %281 = extractvalue { i32, i32, i32, i32 } %279, 1, !dbg !65
  %282 = extractvalue { i32, i32, i32, i32 } %279, 2, !dbg !65
  %283 = extractvalue { i32, i32, i32, i32 } %279, 3, !dbg !65
  %284 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %269, i1 %273, i32 -8388608, i1 %273, i32 -8388608, i1 %273, i32 -8388608, i1 %273, i32 -8388608, i1 %273) #2, !dbg !65
  %285 = extractvalue { i32, i32, i32, i32 } %284, 0, !dbg !65
  %286 = extractvalue { i32, i32, i32, i32 } %284, 1, !dbg !65
  %287 = extractvalue { i32, i32, i32, i32 } %284, 2, !dbg !65
  %288 = extractvalue { i32, i32, i32, i32 } %284, 3, !dbg !65
  %289 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %271, i1 %273, i32 -8388608, i1 %273, i32 -8388608, i1 %273, i32 -8388608, i1 %273, i32 -8388608, i1 %273) #2, !dbg !65
  %290 = extractvalue { i32, i32, i32, i32 } %289, 0, !dbg !65
  %291 = extractvalue { i32, i32, i32, i32 } %289, 1, !dbg !65
  %292 = extractvalue { i32, i32, i32, i32 } %289, 2, !dbg !65
  %293 = extractvalue { i32, i32, i32, i32 } %289, 3, !dbg !65
  %294 = add i32 %44, 5440, !dbg !66
  %295 = add i32 %294, %22, !dbg !67
  %296 = add i32 %294, %23, !dbg !67
  %297 = add i32 %294, %24, !dbg !67
  %298 = add i32 %294, %25, !dbg !67
  %299 = sext i32 %295 to i64, !dbg !68
  %300 = getelementptr float, ptr addrspace(1) %0, i64 %299, !dbg !68
  %301 = sext i32 %296 to i64, !dbg !68
  %302 = getelementptr float, ptr addrspace(1) %0, i64 %301, !dbg !68
  %303 = sext i32 %297 to i64, !dbg !68
  %304 = getelementptr float, ptr addrspace(1) %0, i64 %303, !dbg !68
  %305 = sext i32 %298 to i64, !dbg !68
  %306 = getelementptr float, ptr addrspace(1) %0, i64 %305, !dbg !68
  %307 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %300, i1 %273, i32 -8388608, i1 %273, i32 -8388608, i1 %273, i32 -8388608, i1 %273, i32 -8388608, i1 %273) #2, !dbg !69
  %308 = extractvalue { i32, i32, i32, i32 } %307, 0, !dbg !69
  %309 = extractvalue { i32, i32, i32, i32 } %307, 1, !dbg !69
  %310 = extractvalue { i32, i32, i32, i32 } %307, 2, !dbg !69
  %311 = extractvalue { i32, i32, i32, i32 } %307, 3, !dbg !69
  %312 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %302, i1 %273, i32 -8388608, i1 %273, i32 -8388608, i1 %273, i32 -8388608, i1 %273, i32 -8388608, i1 %273) #2, !dbg !69
  %313 = extractvalue { i32, i32, i32, i32 } %312, 0, !dbg !69
  %314 = extractvalue { i32, i32, i32, i32 } %312, 1, !dbg !69
  %315 = extractvalue { i32, i32, i32, i32 } %312, 2, !dbg !69
  %316 = extractvalue { i32, i32, i32, i32 } %312, 3, !dbg !69
  %317 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %304, i1 %273, i32 -8388608, i1 %273, i32 -8388608, i1 %273, i32 -8388608, i1 %273, i32 -8388608, i1 %273) #2, !dbg !69
  %318 = extractvalue { i32, i32, i32, i32 } %317, 0, !dbg !69
  %319 = extractvalue { i32, i32, i32, i32 } %317, 1, !dbg !69
  %320 = extractvalue { i32, i32, i32, i32 } %317, 2, !dbg !69
  %321 = extractvalue { i32, i32, i32, i32 } %317, 3, !dbg !69
  %322 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %306, i1 %273, i32 -8388608, i1 %273, i32 -8388608, i1 %273, i32 -8388608, i1 %273, i32 -8388608, i1 %273) #2, !dbg !69
  %323 = extractvalue { i32, i32, i32, i32 } %322, 0, !dbg !69
  %324 = extractvalue { i32, i32, i32, i32 } %322, 1, !dbg !69
  %325 = extractvalue { i32, i32, i32, i32 } %322, 2, !dbg !69
  %326 = extractvalue { i32, i32, i32, i32 } %322, 3, !dbg !69
  %327 = or i32 %125, %70, !dbg !70
  %328 = icmp ult i32 %327, 4, !dbg !70
  %329 = add i32 %44, 5760, !dbg !71
  %330 = add i32 %329, %22, !dbg !72
  %331 = add i32 %329, %23, !dbg !72
  %332 = add i32 %329, %24, !dbg !72
  %333 = add i32 %329, %25, !dbg !72
  %334 = sext i32 %330 to i64, !dbg !73
  %335 = getelementptr float, ptr addrspace(1) %0, i64 %334, !dbg !73
  %336 = sext i32 %331 to i64, !dbg !73
  %337 = getelementptr float, ptr addrspace(1) %0, i64 %336, !dbg !73
  %338 = sext i32 %332 to i64, !dbg !73
  %339 = getelementptr float, ptr addrspace(1) %0, i64 %338, !dbg !73
  %340 = sext i32 %333 to i64, !dbg !73
  %341 = getelementptr float, ptr addrspace(1) %0, i64 %340, !dbg !73
  %342 = and i1 %133, %328, !dbg !74
  %343 = and i1 %135, %342, !dbg !75
  %344 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %335, i1 %343, i32 -8388608, i1 %343, i32 -8388608, i1 %343, i32 -8388608, i1 %343, i32 -8388608, i1 %343) #2, !dbg !76
  %345 = extractvalue { i32, i32, i32, i32 } %344, 0, !dbg !76
  %346 = extractvalue { i32, i32, i32, i32 } %344, 1, !dbg !76
  %347 = extractvalue { i32, i32, i32, i32 } %344, 2, !dbg !76
  %348 = extractvalue { i32, i32, i32, i32 } %344, 3, !dbg !76
  %349 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %337, i1 %343, i32 -8388608, i1 %343, i32 -8388608, i1 %343, i32 -8388608, i1 %343, i32 -8388608, i1 %343) #2, !dbg !76
  %350 = extractvalue { i32, i32, i32, i32 } %349, 0, !dbg !76
  %351 = extractvalue { i32, i32, i32, i32 } %349, 1, !dbg !76
  %352 = extractvalue { i32, i32, i32, i32 } %349, 2, !dbg !76
  %353 = extractvalue { i32, i32, i32, i32 } %349, 3, !dbg !76
  %354 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %339, i1 %343, i32 -8388608, i1 %343, i32 -8388608, i1 %343, i32 -8388608, i1 %343, i32 -8388608, i1 %343) #2, !dbg !76
  %355 = extractvalue { i32, i32, i32, i32 } %354, 0, !dbg !76
  %356 = extractvalue { i32, i32, i32, i32 } %354, 1, !dbg !76
  %357 = extractvalue { i32, i32, i32, i32 } %354, 2, !dbg !76
  %358 = extractvalue { i32, i32, i32, i32 } %354, 3, !dbg !76
  %359 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %341, i1 %343, i32 -8388608, i1 %343, i32 -8388608, i1 %343, i32 -8388608, i1 %343, i32 -8388608, i1 %343) #2, !dbg !76
  %360 = extractvalue { i32, i32, i32, i32 } %359, 0, !dbg !76
  %361 = extractvalue { i32, i32, i32, i32 } %359, 1, !dbg !76
  %362 = extractvalue { i32, i32, i32, i32 } %359, 2, !dbg !76
  %363 = extractvalue { i32, i32, i32, i32 } %359, 3, !dbg !76
  %364 = insertelement <4 x i32> poison, i32 %138, i64 0, !dbg !53
  %365 = insertelement <4 x i32> %364, i32 %139, i64 1, !dbg !53
  %366 = insertelement <4 x i32> %365, i32 %140, i64 2, !dbg !53
  %367 = insertelement <4 x i32> %366, i32 %141, i64 3, !dbg !53
  %368 = bitcast <4 x i32> %367 to <4 x float>, !dbg !53
  %369 = insertelement <4 x i32> poison, i32 %158, i64 0, !dbg !54
  %370 = insertelement <4 x i32> %369, i32 %159, i64 1, !dbg !54
  %371 = insertelement <4 x i32> %370, i32 %160, i64 2, !dbg !54
  %372 = insertelement <4 x i32> %371, i32 %161, i64 3, !dbg !54
  %373 = bitcast <4 x i32> %372 to <4 x float>, !dbg !54
  %374 = fcmp ogt <4 x float> %373, %368, !dbg !77
  %375 = fcmp uno <4 x float> %373, zeroinitializer, !dbg !81
  %376 = or <4 x i1> %374, %375, !dbg !82
  %.v = select <4 x i1> %376, <4 x i32> %372, <4 x i32> %367, !dbg !83
  %377 = bitcast <4 x i32> %.v to <4 x float>, !dbg !83
  %378 = insertelement <4 x i32> poison, i32 %180, i64 0, !dbg !57
  %379 = insertelement <4 x i32> %378, i32 %181, i64 1, !dbg !57
  %380 = insertelement <4 x i32> %379, i32 %182, i64 2, !dbg !57
  %381 = insertelement <4 x i32> %380, i32 %183, i64 3, !dbg !57
  %382 = bitcast <4 x i32> %381 to <4 x float>, !dbg !57
  %383 = fcmp olt <4 x float> %377, %382, !dbg !84
  %384 = fcmp uno <4 x float> %382, zeroinitializer, !dbg !86
  %385 = or <4 x i1> %383, %384, !dbg !87
  %.v33 = select <4 x i1> %385, <4 x i32> %381, <4 x i32> %.v, !dbg !88
  %386 = bitcast <4 x i32> %.v33 to <4 x float>, !dbg !88
  %387 = insertelement <4 x i32> poison, i32 %200, i64 0, !dbg !58
  %388 = insertelement <4 x i32> %387, i32 %201, i64 1, !dbg !58
  %389 = insertelement <4 x i32> %388, i32 %202, i64 2, !dbg !58
  %390 = insertelement <4 x i32> %389, i32 %203, i64 3, !dbg !58
  %391 = bitcast <4 x i32> %390 to <4 x float>, !dbg !58
  %392 = fcmp olt <4 x float> %386, %391, !dbg !89
  %393 = fcmp uno <4 x float> %391, zeroinitializer, !dbg !91
  %394 = or <4 x i1> %392, %393, !dbg !92
  %.v34 = select <4 x i1> %394, <4 x i32> %390, <4 x i32> %.v33, !dbg !93
  %395 = bitcast <4 x i32> %.v34 to <4 x float>, !dbg !93
  %396 = insertelement <4 x i32> poison, i32 %220, i64 0, !dbg !59
  %397 = insertelement <4 x i32> %396, i32 %221, i64 1, !dbg !59
  %398 = insertelement <4 x i32> %397, i32 %222, i64 2, !dbg !59
  %399 = insertelement <4 x i32> %398, i32 %223, i64 3, !dbg !59
  %400 = bitcast <4 x i32> %399 to <4 x float>, !dbg !59
  %401 = fcmp olt <4 x float> %395, %400, !dbg !94
  %402 = fcmp uno <4 x float> %400, zeroinitializer, !dbg !96
  %403 = or <4 x i1> %401, %402, !dbg !97
  %.v35 = select <4 x i1> %403, <4 x i32> %399, <4 x i32> %.v34, !dbg !98
  %404 = bitcast <4 x i32> %.v35 to <4 x float>, !dbg !98
  %405 = insertelement <4 x i32> poison, i32 %240, i64 0, !dbg !60
  %406 = insertelement <4 x i32> %405, i32 %241, i64 1, !dbg !60
  %407 = insertelement <4 x i32> %406, i32 %242, i64 2, !dbg !60
  %408 = insertelement <4 x i32> %407, i32 %243, i64 3, !dbg !60
  %409 = bitcast <4 x i32> %408 to <4 x float>, !dbg !60
  %410 = fcmp olt <4 x float> %404, %409, !dbg !99
  %411 = fcmp uno <4 x float> %409, zeroinitializer, !dbg !101
  %412 = or <4 x i1> %410, %411, !dbg !102
  %.v36 = select <4 x i1> %412, <4 x i32> %408, <4 x i32> %.v35, !dbg !103
  %413 = bitcast <4 x i32> %.v36 to <4 x float>, !dbg !103
  %414 = insertelement <4 x i32> poison, i32 %275, i64 0, !dbg !65
  %415 = insertelement <4 x i32> %414, i32 %276, i64 1, !dbg !65
  %416 = insertelement <4 x i32> %415, i32 %277, i64 2, !dbg !65
  %417 = insertelement <4 x i32> %416, i32 %278, i64 3, !dbg !65
  %418 = bitcast <4 x i32> %417 to <4 x float>, !dbg !65
  %419 = fcmp olt <4 x float> %413, %418, !dbg !104
  %420 = fcmp uno <4 x float> %418, zeroinitializer, !dbg !106
  %421 = or <4 x i1> %419, %420, !dbg !107
  %.v37 = select <4 x i1> %421, <4 x i32> %417, <4 x i32> %.v36, !dbg !108
  %422 = bitcast <4 x i32> %.v37 to <4 x float>, !dbg !108
  %423 = insertelement <4 x i32> poison, i32 %308, i64 0, !dbg !69
  %424 = insertelement <4 x i32> %423, i32 %309, i64 1, !dbg !69
  %425 = insertelement <4 x i32> %424, i32 %310, i64 2, !dbg !69
  %426 = insertelement <4 x i32> %425, i32 %311, i64 3, !dbg !69
  %427 = bitcast <4 x i32> %426 to <4 x float>, !dbg !69
  %428 = fcmp olt <4 x float> %422, %427, !dbg !109
  %429 = fcmp uno <4 x float> %427, zeroinitializer, !dbg !111
  %430 = or <4 x i1> %428, %429, !dbg !112
  %.v38 = select <4 x i1> %430, <4 x i32> %426, <4 x i32> %.v37, !dbg !113
  %431 = bitcast <4 x i32> %.v38 to <4 x float>, !dbg !113
  %432 = insertelement <4 x i32> poison, i32 %345, i64 0, !dbg !76
  %433 = insertelement <4 x i32> %432, i32 %346, i64 1, !dbg !76
  %434 = insertelement <4 x i32> %433, i32 %347, i64 2, !dbg !76
  %435 = insertelement <4 x i32> %434, i32 %348, i64 3, !dbg !76
  %436 = bitcast <4 x i32> %435 to <4 x float>, !dbg !76
  %437 = fcmp olt <4 x float> %431, %436, !dbg !114
  %438 = bitcast i32 %345 to float, !dbg !116
  %439 = fcmp uno float %438, 0.000000e+00, !dbg !116
  %440 = bitcast i32 %346 to float, !dbg !116
  %441 = fcmp uno float %440, 0.000000e+00, !dbg !116
  %442 = bitcast i32 %347 to float, !dbg !116
  %443 = fcmp uno float %442, 0.000000e+00, !dbg !116
  %444 = bitcast i32 %348 to float, !dbg !116
  %445 = fcmp uno float %444, 0.000000e+00, !dbg !116
  %446 = extractelement <4 x i1> %437, i64 0, !dbg !117
  %447 = or i1 %446, %439, !dbg !117
  %448 = extractelement <4 x i1> %437, i64 1, !dbg !117
  %449 = or i1 %448, %441, !dbg !117
  %450 = extractelement <4 x i1> %437, i64 2, !dbg !117
  %451 = or i1 %450, %443, !dbg !117
  %452 = extractelement <4 x i1> %437, i64 3, !dbg !117
  %453 = or i1 %452, %445, !dbg !117
  %454 = zext <4 x i1> %374 to <4 x i8>, !dbg !118
  %455 = select <4 x i1> %383, <4 x i8> splat (i8 2), <4 x i8> %454, !dbg !119
  %456 = select <4 x i1> %392, <4 x i8> splat (i8 3), <4 x i8> %455, !dbg !120
  %457 = select <4 x i1> %401, <4 x i8> splat (i8 4), <4 x i8> %456, !dbg !121
  %458 = select <4 x i1> %410, <4 x i8> splat (i8 5), <4 x i8> %457, !dbg !122
  %459 = select <4 x i1> %419, <4 x i8> splat (i8 6), <4 x i8> %458, !dbg !123
  %460 = select <4 x i1> %428, <4 x i8> splat (i8 7), <4 x i8> %459, !dbg !124
  %461 = select <4 x i1> %437, <4 x i8> splat (i8 8), <4 x i8> %460, !dbg !125
  %462 = insertelement <4 x i32> poison, i32 %143, i64 0, !dbg !53
  %463 = insertelement <4 x i32> %462, i32 %144, i64 1, !dbg !53
  %464 = insertelement <4 x i32> %463, i32 %145, i64 2, !dbg !53
  %465 = insertelement <4 x i32> %464, i32 %146, i64 3, !dbg !53
  %466 = bitcast <4 x i32> %465 to <4 x float>, !dbg !53
  %467 = insertelement <4 x i32> poison, i32 %163, i64 0, !dbg !54
  %468 = insertelement <4 x i32> %467, i32 %164, i64 1, !dbg !54
  %469 = insertelement <4 x i32> %468, i32 %165, i64 2, !dbg !54
  %470 = insertelement <4 x i32> %469, i32 %166, i64 3, !dbg !54
  %471 = bitcast <4 x i32> %470 to <4 x float>, !dbg !54
  %472 = fcmp ogt <4 x float> %471, %466, !dbg !77
  %473 = fcmp uno <4 x float> %471, zeroinitializer, !dbg !81
  %474 = or <4 x i1> %472, %473, !dbg !82
  %.v39 = select <4 x i1> %474, <4 x i32> %470, <4 x i32> %465, !dbg !83
  %475 = bitcast <4 x i32> %.v39 to <4 x float>, !dbg !83
  %476 = insertelement <4 x i32> poison, i32 %185, i64 0, !dbg !57
  %477 = insertelement <4 x i32> %476, i32 %186, i64 1, !dbg !57
  %478 = insertelement <4 x i32> %477, i32 %187, i64 2, !dbg !57
  %479 = insertelement <4 x i32> %478, i32 %188, i64 3, !dbg !57
  %480 = bitcast <4 x i32> %479 to <4 x float>, !dbg !57
  %481 = fcmp olt <4 x float> %475, %480, !dbg !84
  %482 = fcmp uno <4 x float> %480, zeroinitializer, !dbg !86
  %483 = or <4 x i1> %481, %482, !dbg !87
  %.v40 = select <4 x i1> %483, <4 x i32> %479, <4 x i32> %.v39, !dbg !88
  %484 = bitcast <4 x i32> %.v40 to <4 x float>, !dbg !88
  %485 = insertelement <4 x i32> poison, i32 %205, i64 0, !dbg !58
  %486 = insertelement <4 x i32> %485, i32 %206, i64 1, !dbg !58
  %487 = insertelement <4 x i32> %486, i32 %207, i64 2, !dbg !58
  %488 = insertelement <4 x i32> %487, i32 %208, i64 3, !dbg !58
  %489 = bitcast <4 x i32> %488 to <4 x float>, !dbg !58
  %490 = fcmp olt <4 x float> %484, %489, !dbg !89
  %491 = fcmp uno <4 x float> %489, zeroinitializer, !dbg !91
  %492 = or <4 x i1> %490, %491, !dbg !92
  %.v41 = select <4 x i1> %492, <4 x i32> %488, <4 x i32> %.v40, !dbg !93
  %493 = bitcast <4 x i32> %.v41 to <4 x float>, !dbg !93
  %494 = insertelement <4 x i32> poison, i32 %225, i64 0, !dbg !59
  %495 = insertelement <4 x i32> %494, i32 %226, i64 1, !dbg !59
  %496 = insertelement <4 x i32> %495, i32 %227, i64 2, !dbg !59
  %497 = insertelement <4 x i32> %496, i32 %228, i64 3, !dbg !59
  %498 = bitcast <4 x i32> %497 to <4 x float>, !dbg !59
  %499 = fcmp olt <4 x float> %493, %498, !dbg !94
  %500 = fcmp uno <4 x float> %498, zeroinitializer, !dbg !96
  %501 = or <4 x i1> %499, %500, !dbg !97
  %.v42 = select <4 x i1> %501, <4 x i32> %497, <4 x i32> %.v41, !dbg !98
  %502 = bitcast <4 x i32> %.v42 to <4 x float>, !dbg !98
  %503 = insertelement <4 x i32> poison, i32 %245, i64 0, !dbg !60
  %504 = insertelement <4 x i32> %503, i32 %246, i64 1, !dbg !60
  %505 = insertelement <4 x i32> %504, i32 %247, i64 2, !dbg !60
  %506 = insertelement <4 x i32> %505, i32 %248, i64 3, !dbg !60
  %507 = bitcast <4 x i32> %506 to <4 x float>, !dbg !60
  %508 = fcmp olt <4 x float> %502, %507, !dbg !99
  %509 = fcmp uno <4 x float> %507, zeroinitializer, !dbg !101
  %510 = or <4 x i1> %508, %509, !dbg !102
  %.v43 = select <4 x i1> %510, <4 x i32> %506, <4 x i32> %.v42, !dbg !103
  %511 = bitcast <4 x i32> %.v43 to <4 x float>, !dbg !103
  %512 = insertelement <4 x i32> poison, i32 %280, i64 0, !dbg !65
  %513 = insertelement <4 x i32> %512, i32 %281, i64 1, !dbg !65
  %514 = insertelement <4 x i32> %513, i32 %282, i64 2, !dbg !65
  %515 = insertelement <4 x i32> %514, i32 %283, i64 3, !dbg !65
  %516 = bitcast <4 x i32> %515 to <4 x float>, !dbg !65
  %517 = fcmp olt <4 x float> %511, %516, !dbg !104
  %518 = fcmp uno <4 x float> %516, zeroinitializer, !dbg !106
  %519 = or <4 x i1> %517, %518, !dbg !107
  %.v44 = select <4 x i1> %519, <4 x i32> %515, <4 x i32> %.v43, !dbg !108
  %520 = bitcast <4 x i32> %.v44 to <4 x float>, !dbg !108
  %521 = insertelement <4 x i32> poison, i32 %313, i64 0, !dbg !69
  %522 = insertelement <4 x i32> %521, i32 %314, i64 1, !dbg !69
  %523 = insertelement <4 x i32> %522, i32 %315, i64 2, !dbg !69
  %524 = insertelement <4 x i32> %523, i32 %316, i64 3, !dbg !69
  %525 = bitcast <4 x i32> %524 to <4 x float>, !dbg !69
  %526 = fcmp olt <4 x float> %520, %525, !dbg !109
  %527 = fcmp uno <4 x float> %525, zeroinitializer, !dbg !111
  %528 = or <4 x i1> %526, %527, !dbg !112
  %.v45 = select <4 x i1> %528, <4 x i32> %524, <4 x i32> %.v44, !dbg !113
  %529 = bitcast <4 x i32> %.v45 to <4 x float>, !dbg !113
  %530 = insertelement <4 x i32> poison, i32 %350, i64 0, !dbg !76
  %531 = insertelement <4 x i32> %530, i32 %351, i64 1, !dbg !76
  %532 = insertelement <4 x i32> %531, i32 %352, i64 2, !dbg !76
  %533 = insertelement <4 x i32> %532, i32 %353, i64 3, !dbg !76
  %534 = bitcast <4 x i32> %533 to <4 x float>, !dbg !76
  %535 = fcmp olt <4 x float> %529, %534, !dbg !114
  %536 = bitcast i32 %350 to float, !dbg !116
  %537 = fcmp uno float %536, 0.000000e+00, !dbg !116
  %538 = bitcast i32 %351 to float, !dbg !116
  %539 = fcmp uno float %538, 0.000000e+00, !dbg !116
  %540 = bitcast i32 %352 to float, !dbg !116
  %541 = fcmp uno float %540, 0.000000e+00, !dbg !116
  %542 = bitcast i32 %353 to float, !dbg !116
  %543 = fcmp uno float %542, 0.000000e+00, !dbg !116
  %544 = extractelement <4 x i1> %535, i64 0, !dbg !117
  %545 = or i1 %544, %537, !dbg !117
  %546 = extractelement <4 x i1> %535, i64 1, !dbg !117
  %547 = or i1 %546, %539, !dbg !117
  %548 = extractelement <4 x i1> %535, i64 2, !dbg !117
  %549 = or i1 %548, %541, !dbg !117
  %550 = extractelement <4 x i1> %535, i64 3, !dbg !117
  %551 = or i1 %550, %543, !dbg !117
  %552 = zext <4 x i1> %472 to <4 x i8>, !dbg !118
  %553 = select <4 x i1> %481, <4 x i8> splat (i8 2), <4 x i8> %552, !dbg !119
  %554 = select <4 x i1> %490, <4 x i8> splat (i8 3), <4 x i8> %553, !dbg !120
  %555 = select <4 x i1> %499, <4 x i8> splat (i8 4), <4 x i8> %554, !dbg !121
  %556 = select <4 x i1> %508, <4 x i8> splat (i8 5), <4 x i8> %555, !dbg !122
  %557 = select <4 x i1> %517, <4 x i8> splat (i8 6), <4 x i8> %556, !dbg !123
  %558 = select <4 x i1> %526, <4 x i8> splat (i8 7), <4 x i8> %557, !dbg !124
  %559 = select <4 x i1> %535, <4 x i8> splat (i8 8), <4 x i8> %558, !dbg !125
  %560 = insertelement <4 x i32> poison, i32 %148, i64 0, !dbg !53
  %561 = insertelement <4 x i32> %560, i32 %149, i64 1, !dbg !53
  %562 = insertelement <4 x i32> %561, i32 %150, i64 2, !dbg !53
  %563 = insertelement <4 x i32> %562, i32 %151, i64 3, !dbg !53
  %564 = bitcast <4 x i32> %563 to <4 x float>, !dbg !53
  %565 = insertelement <4 x i32> poison, i32 %168, i64 0, !dbg !54
  %566 = insertelement <4 x i32> %565, i32 %169, i64 1, !dbg !54
  %567 = insertelement <4 x i32> %566, i32 %170, i64 2, !dbg !54
  %568 = insertelement <4 x i32> %567, i32 %171, i64 3, !dbg !54
  %569 = bitcast <4 x i32> %568 to <4 x float>, !dbg !54
  %570 = fcmp ogt <4 x float> %569, %564, !dbg !77
  %571 = fcmp uno <4 x float> %569, zeroinitializer, !dbg !81
  %572 = or <4 x i1> %570, %571, !dbg !82
  %.v46 = select <4 x i1> %572, <4 x i32> %568, <4 x i32> %563, !dbg !83
  %573 = bitcast <4 x i32> %.v46 to <4 x float>, !dbg !83
  %574 = insertelement <4 x i32> poison, i32 %190, i64 0, !dbg !57
  %575 = insertelement <4 x i32> %574, i32 %191, i64 1, !dbg !57
  %576 = insertelement <4 x i32> %575, i32 %192, i64 2, !dbg !57
  %577 = insertelement <4 x i32> %576, i32 %193, i64 3, !dbg !57
  %578 = bitcast <4 x i32> %577 to <4 x float>, !dbg !57
  %579 = fcmp olt <4 x float> %573, %578, !dbg !84
  %580 = fcmp uno <4 x float> %578, zeroinitializer, !dbg !86
  %581 = or <4 x i1> %579, %580, !dbg !87
  %.v47 = select <4 x i1> %581, <4 x i32> %577, <4 x i32> %.v46, !dbg !88
  %582 = bitcast <4 x i32> %.v47 to <4 x float>, !dbg !88
  %583 = insertelement <4 x i32> poison, i32 %210, i64 0, !dbg !58
  %584 = insertelement <4 x i32> %583, i32 %211, i64 1, !dbg !58
  %585 = insertelement <4 x i32> %584, i32 %212, i64 2, !dbg !58
  %586 = insertelement <4 x i32> %585, i32 %213, i64 3, !dbg !58
  %587 = bitcast <4 x i32> %586 to <4 x float>, !dbg !58
  %588 = fcmp olt <4 x float> %582, %587, !dbg !89
  %589 = fcmp uno <4 x float> %587, zeroinitializer, !dbg !91
  %590 = or <4 x i1> %588, %589, !dbg !92
  %.v48 = select <4 x i1> %590, <4 x i32> %586, <4 x i32> %.v47, !dbg !93
  %591 = bitcast <4 x i32> %.v48 to <4 x float>, !dbg !93
  %592 = insertelement <4 x i32> poison, i32 %230, i64 0, !dbg !59
  %593 = insertelement <4 x i32> %592, i32 %231, i64 1, !dbg !59
  %594 = insertelement <4 x i32> %593, i32 %232, i64 2, !dbg !59
  %595 = insertelement <4 x i32> %594, i32 %233, i64 3, !dbg !59
  %596 = bitcast <4 x i32> %595 to <4 x float>, !dbg !59
  %597 = fcmp olt <4 x float> %591, %596, !dbg !94
  %598 = fcmp uno <4 x float> %596, zeroinitializer, !dbg !96
  %599 = or <4 x i1> %597, %598, !dbg !97
  %.v49 = select <4 x i1> %599, <4 x i32> %595, <4 x i32> %.v48, !dbg !98
  %600 = bitcast <4 x i32> %.v49 to <4 x float>, !dbg !98
  %601 = insertelement <4 x i32> poison, i32 %250, i64 0, !dbg !60
  %602 = insertelement <4 x i32> %601, i32 %251, i64 1, !dbg !60
  %603 = insertelement <4 x i32> %602, i32 %252, i64 2, !dbg !60
  %604 = insertelement <4 x i32> %603, i32 %253, i64 3, !dbg !60
  %605 = bitcast <4 x i32> %604 to <4 x float>, !dbg !60
  %606 = fcmp olt <4 x float> %600, %605, !dbg !99
  %607 = fcmp uno <4 x float> %605, zeroinitializer, !dbg !101
  %608 = or <4 x i1> %606, %607, !dbg !102
  %.v50 = select <4 x i1> %608, <4 x i32> %604, <4 x i32> %.v49, !dbg !103
  %609 = bitcast <4 x i32> %.v50 to <4 x float>, !dbg !103
  %610 = insertelement <4 x i32> poison, i32 %285, i64 0, !dbg !65
  %611 = insertelement <4 x i32> %610, i32 %286, i64 1, !dbg !65
  %612 = insertelement <4 x i32> %611, i32 %287, i64 2, !dbg !65
  %613 = insertelement <4 x i32> %612, i32 %288, i64 3, !dbg !65
  %614 = bitcast <4 x i32> %613 to <4 x float>, !dbg !65
  %615 = fcmp olt <4 x float> %609, %614, !dbg !104
  %616 = fcmp uno <4 x float> %614, zeroinitializer, !dbg !106
  %617 = or <4 x i1> %615, %616, !dbg !107
  %.v51 = select <4 x i1> %617, <4 x i32> %613, <4 x i32> %.v50, !dbg !108
  %618 = bitcast <4 x i32> %.v51 to <4 x float>, !dbg !108
  %619 = insertelement <4 x i32> poison, i32 %318, i64 0, !dbg !69
  %620 = insertelement <4 x i32> %619, i32 %319, i64 1, !dbg !69
  %621 = insertelement <4 x i32> %620, i32 %320, i64 2, !dbg !69
  %622 = insertelement <4 x i32> %621, i32 %321, i64 3, !dbg !69
  %623 = bitcast <4 x i32> %622 to <4 x float>, !dbg !69
  %624 = fcmp olt <4 x float> %618, %623, !dbg !109
  %625 = fcmp uno <4 x float> %623, zeroinitializer, !dbg !111
  %626 = or <4 x i1> %624, %625, !dbg !112
  %.v52 = select <4 x i1> %626, <4 x i32> %622, <4 x i32> %.v51, !dbg !113
  %627 = bitcast <4 x i32> %.v52 to <4 x float>, !dbg !113
  %628 = insertelement <4 x i32> poison, i32 %355, i64 0, !dbg !76
  %629 = insertelement <4 x i32> %628, i32 %356, i64 1, !dbg !76
  %630 = insertelement <4 x i32> %629, i32 %357, i64 2, !dbg !76
  %631 = insertelement <4 x i32> %630, i32 %358, i64 3, !dbg !76
  %632 = bitcast <4 x i32> %631 to <4 x float>, !dbg !76
  %633 = fcmp olt <4 x float> %627, %632, !dbg !114
  %634 = bitcast i32 %355 to float, !dbg !116
  %635 = fcmp uno float %634, 0.000000e+00, !dbg !116
  %636 = bitcast i32 %356 to float, !dbg !116
  %637 = fcmp uno float %636, 0.000000e+00, !dbg !116
  %638 = bitcast i32 %357 to float, !dbg !116
  %639 = fcmp uno float %638, 0.000000e+00, !dbg !116
  %640 = bitcast i32 %358 to float, !dbg !116
  %641 = fcmp uno float %640, 0.000000e+00, !dbg !116
  %642 = extractelement <4 x i1> %633, i64 0, !dbg !117
  %643 = or i1 %642, %635, !dbg !117
  %644 = extractelement <4 x i1> %633, i64 1, !dbg !117
  %645 = or i1 %644, %637, !dbg !117
  %646 = extractelement <4 x i1> %633, i64 2, !dbg !117
  %647 = or i1 %646, %639, !dbg !117
  %648 = extractelement <4 x i1> %633, i64 3, !dbg !117
  %649 = or i1 %648, %641, !dbg !117
  %650 = zext <4 x i1> %570 to <4 x i8>, !dbg !118
  %651 = select <4 x i1> %579, <4 x i8> splat (i8 2), <4 x i8> %650, !dbg !119
  %652 = select <4 x i1> %588, <4 x i8> splat (i8 3), <4 x i8> %651, !dbg !120
  %653 = select <4 x i1> %597, <4 x i8> splat (i8 4), <4 x i8> %652, !dbg !121
  %654 = select <4 x i1> %606, <4 x i8> splat (i8 5), <4 x i8> %653, !dbg !122
  %655 = select <4 x i1> %615, <4 x i8> splat (i8 6), <4 x i8> %654, !dbg !123
  %656 = select <4 x i1> %624, <4 x i8> splat (i8 7), <4 x i8> %655, !dbg !124
  %657 = select <4 x i1> %633, <4 x i8> splat (i8 8), <4 x i8> %656, !dbg !125
  %658 = insertelement <4 x i32> poison, i32 %153, i64 0, !dbg !53
  %659 = insertelement <4 x i32> %658, i32 %154, i64 1, !dbg !53
  %660 = insertelement <4 x i32> %659, i32 %155, i64 2, !dbg !53
  %661 = insertelement <4 x i32> %660, i32 %156, i64 3, !dbg !53
  %662 = bitcast <4 x i32> %661 to <4 x float>, !dbg !53
  %663 = insertelement <4 x i32> poison, i32 %173, i64 0, !dbg !54
  %664 = insertelement <4 x i32> %663, i32 %174, i64 1, !dbg !54
  %665 = insertelement <4 x i32> %664, i32 %175, i64 2, !dbg !54
  %666 = insertelement <4 x i32> %665, i32 %176, i64 3, !dbg !54
  %667 = bitcast <4 x i32> %666 to <4 x float>, !dbg !54
  %668 = fcmp ogt <4 x float> %667, %662, !dbg !77
  %669 = fcmp uno <4 x float> %667, zeroinitializer, !dbg !81
  %670 = or <4 x i1> %668, %669, !dbg !82
  %.v53 = select <4 x i1> %670, <4 x i32> %666, <4 x i32> %661, !dbg !83
  %671 = bitcast <4 x i32> %.v53 to <4 x float>, !dbg !83
  %672 = insertelement <4 x i32> poison, i32 %195, i64 0, !dbg !57
  %673 = insertelement <4 x i32> %672, i32 %196, i64 1, !dbg !57
  %674 = insertelement <4 x i32> %673, i32 %197, i64 2, !dbg !57
  %675 = insertelement <4 x i32> %674, i32 %198, i64 3, !dbg !57
  %676 = bitcast <4 x i32> %675 to <4 x float>, !dbg !57
  %677 = fcmp olt <4 x float> %671, %676, !dbg !84
  %678 = fcmp uno <4 x float> %676, zeroinitializer, !dbg !86
  %679 = or <4 x i1> %677, %678, !dbg !87
  %.v54 = select <4 x i1> %679, <4 x i32> %675, <4 x i32> %.v53, !dbg !88
  %680 = bitcast <4 x i32> %.v54 to <4 x float>, !dbg !88
  %681 = insertelement <4 x i32> poison, i32 %215, i64 0, !dbg !58
  %682 = insertelement <4 x i32> %681, i32 %216, i64 1, !dbg !58
  %683 = insertelement <4 x i32> %682, i32 %217, i64 2, !dbg !58
  %684 = insertelement <4 x i32> %683, i32 %218, i64 3, !dbg !58
  %685 = bitcast <4 x i32> %684 to <4 x float>, !dbg !58
  %686 = fcmp olt <4 x float> %680, %685, !dbg !89
  %687 = fcmp uno <4 x float> %685, zeroinitializer, !dbg !91
  %688 = or <4 x i1> %686, %687, !dbg !92
  %.v55 = select <4 x i1> %688, <4 x i32> %684, <4 x i32> %.v54, !dbg !93
  %689 = bitcast <4 x i32> %.v55 to <4 x float>, !dbg !93
  %690 = insertelement <4 x i32> poison, i32 %235, i64 0, !dbg !59
  %691 = insertelement <4 x i32> %690, i32 %236, i64 1, !dbg !59
  %692 = insertelement <4 x i32> %691, i32 %237, i64 2, !dbg !59
  %693 = insertelement <4 x i32> %692, i32 %238, i64 3, !dbg !59
  %694 = bitcast <4 x i32> %693 to <4 x float>, !dbg !59
  %695 = fcmp olt <4 x float> %689, %694, !dbg !94
  %696 = fcmp uno <4 x float> %694, zeroinitializer, !dbg !96
  %697 = or <4 x i1> %695, %696, !dbg !97
  %.v56 = select <4 x i1> %697, <4 x i32> %693, <4 x i32> %.v55, !dbg !98
  %698 = bitcast <4 x i32> %.v56 to <4 x float>, !dbg !98
  %699 = insertelement <4 x i32> poison, i32 %255, i64 0, !dbg !60
  %700 = insertelement <4 x i32> %699, i32 %256, i64 1, !dbg !60
  %701 = insertelement <4 x i32> %700, i32 %257, i64 2, !dbg !60
  %702 = insertelement <4 x i32> %701, i32 %258, i64 3, !dbg !60
  %703 = bitcast <4 x i32> %702 to <4 x float>, !dbg !60
  %704 = fcmp olt <4 x float> %698, %703, !dbg !99
  %705 = fcmp uno <4 x float> %703, zeroinitializer, !dbg !101
  %706 = or <4 x i1> %704, %705, !dbg !102
  %.v57 = select <4 x i1> %706, <4 x i32> %702, <4 x i32> %.v56, !dbg !103
  %707 = bitcast <4 x i32> %.v57 to <4 x float>, !dbg !103
  %708 = insertelement <4 x i32> poison, i32 %290, i64 0, !dbg !65
  %709 = insertelement <4 x i32> %708, i32 %291, i64 1, !dbg !65
  %710 = insertelement <4 x i32> %709, i32 %292, i64 2, !dbg !65
  %711 = insertelement <4 x i32> %710, i32 %293, i64 3, !dbg !65
  %712 = bitcast <4 x i32> %711 to <4 x float>, !dbg !65
  %713 = fcmp olt <4 x float> %707, %712, !dbg !104
  %714 = fcmp uno <4 x float> %712, zeroinitializer, !dbg !106
  %715 = or <4 x i1> %713, %714, !dbg !107
  %.v58 = select <4 x i1> %715, <4 x i32> %711, <4 x i32> %.v57, !dbg !108
  %716 = bitcast <4 x i32> %.v58 to <4 x float>, !dbg !108
  %717 = insertelement <4 x i32> poison, i32 %323, i64 0, !dbg !69
  %718 = insertelement <4 x i32> %717, i32 %324, i64 1, !dbg !69
  %719 = insertelement <4 x i32> %718, i32 %325, i64 2, !dbg !69
  %720 = insertelement <4 x i32> %719, i32 %326, i64 3, !dbg !69
  %721 = bitcast <4 x i32> %720 to <4 x float>, !dbg !69
  %722 = fcmp olt <4 x float> %716, %721, !dbg !109
  %723 = fcmp uno <4 x float> %721, zeroinitializer, !dbg !111
  %724 = or <4 x i1> %722, %723, !dbg !112
  %.v59 = select <4 x i1> %724, <4 x i32> %720, <4 x i32> %.v58, !dbg !113
  %725 = bitcast <4 x i32> %.v59 to <4 x float>, !dbg !113
  %726 = insertelement <4 x i32> poison, i32 %360, i64 0, !dbg !76
  %727 = insertelement <4 x i32> %726, i32 %361, i64 1, !dbg !76
  %728 = insertelement <4 x i32> %727, i32 %362, i64 2, !dbg !76
  %729 = insertelement <4 x i32> %728, i32 %363, i64 3, !dbg !76
  %730 = bitcast <4 x i32> %729 to <4 x float>, !dbg !76
  %731 = fcmp olt <4 x float> %725, %730, !dbg !114
  %732 = bitcast i32 %360 to float, !dbg !116
  %733 = fcmp uno float %732, 0.000000e+00, !dbg !116
  %734 = bitcast i32 %361 to float, !dbg !116
  %735 = fcmp uno float %734, 0.000000e+00, !dbg !116
  %736 = bitcast i32 %362 to float, !dbg !116
  %737 = fcmp uno float %736, 0.000000e+00, !dbg !116
  %738 = bitcast i32 %363 to float, !dbg !116
  %739 = fcmp uno float %738, 0.000000e+00, !dbg !116
  %740 = extractelement <4 x i1> %731, i64 0, !dbg !117
  %741 = or i1 %740, %733, !dbg !117
  %742 = extractelement <4 x i1> %731, i64 1, !dbg !117
  %743 = or i1 %742, %735, !dbg !117
  %744 = extractelement <4 x i1> %731, i64 2, !dbg !117
  %745 = or i1 %744, %737, !dbg !117
  %746 = extractelement <4 x i1> %731, i64 3, !dbg !117
  %747 = or i1 %746, %739, !dbg !117
  %748 = zext <4 x i1> %668 to <4 x i8>, !dbg !118
  %749 = select <4 x i1> %677, <4 x i8> splat (i8 2), <4 x i8> %748, !dbg !119
  %750 = select <4 x i1> %686, <4 x i8> splat (i8 3), <4 x i8> %749, !dbg !120
  %751 = select <4 x i1> %695, <4 x i8> splat (i8 4), <4 x i8> %750, !dbg !121
  %752 = select <4 x i1> %704, <4 x i8> splat (i8 5), <4 x i8> %751, !dbg !122
  %753 = select <4 x i1> %713, <4 x i8> splat (i8 6), <4 x i8> %752, !dbg !123
  %754 = select <4 x i1> %722, <4 x i8> splat (i8 7), <4 x i8> %753, !dbg !124
  %755 = select <4 x i1> %731, <4 x i8> splat (i8 8), <4 x i8> %754, !dbg !125
  %756 = shl i32 %26, 4, !dbg !126
  %757 = shl i32 %27, 4, !dbg !126
  %758 = shl i32 %28, 4, !dbg !126
  %759 = shl i32 %29, 4, !dbg !126
  %760 = mul i32 %37, 9216, !dbg !127
  %761 = add i32 %760, %.decomposed61, !dbg !128
  %762 = add i32 %761, %756, !dbg !129
  %763 = add i32 %761, %757, !dbg !129
  %764 = add i32 %761, %758, !dbg !129
  %765 = add i32 %761, %759, !dbg !129
  %766 = sext i32 %762 to i64, !dbg !130
  %767 = getelementptr float, ptr addrspace(1) %1, i64 %766, !dbg !130
  %768 = sext i32 %763 to i64, !dbg !130
  %769 = getelementptr float, ptr addrspace(1) %1, i64 %768, !dbg !130
  %770 = sext i32 %764 to i64, !dbg !130
  %771 = getelementptr float, ptr addrspace(1) %1, i64 %770, !dbg !130
  %772 = sext i32 %765 to i64, !dbg !130
  %773 = getelementptr float, ptr addrspace(1) %1, i64 %772, !dbg !130
  %774 = and i1 %15, %30, !dbg !50
  %775 = and i1 %31, %15, !dbg !50
  %776 = and i1 %32, %15, !dbg !50
  %777 = and i1 %33, %15, !dbg !50
  %778 = and i1 %135, %133, !dbg !50
  %779 = shl i32 %8, 10, !dbg !131
  %780 = and i32 %779, 3072, !dbg !131
  %781 = or disjoint i32 %780, %10, !dbg !131
  %782 = and i32 %11, 1020, !dbg !131
  %783 = lshr exact i32 %780, 2, !dbg !131
  %784 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %783, !dbg !131
  %785 = getelementptr float, ptr addrspace(3) %784, i32 %781, !dbg !131
  %786 = extractelement <4 x i32> %.v38, i64 0, !dbg !131
  %787 = select i1 %447, i32 %345, i32 %786, !dbg !132
  %788 = insertelement <1 x i32> poison, i32 %787, i64 0, !dbg !131
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %785, <1 x i32> %788, i1 true) #2, !dbg !131
  %789 = or disjoint i32 %781, 64, !dbg !131
  %790 = lshr i32 %789, 4, !dbg !131
  %791 = and i32 %790, 196, !dbg !131
  %792 = getelementptr float, ptr addrspace(3) @global_smem, i32 %791, !dbg !131
  %793 = getelementptr float, ptr addrspace(3) %792, i32 %789, !dbg !131
  %794 = extractelement <4 x i32> %.v38, i64 1, !dbg !131
  %795 = select i1 %449, i32 %346, i32 %794, !dbg !132
  %796 = insertelement <1 x i32> poison, i32 %795, i64 0, !dbg !131
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %793, <1 x i32> %796, i1 true) #2, !dbg !131
  %797 = or disjoint i32 %781, 128, !dbg !131
  %798 = lshr i32 %797, 4, !dbg !131
  %799 = and i32 %798, 200, !dbg !131
  %800 = getelementptr float, ptr addrspace(3) @global_smem, i32 %799, !dbg !131
  %801 = getelementptr float, ptr addrspace(3) %800, i32 %797, !dbg !131
  %802 = extractelement <4 x i32> %.v38, i64 2, !dbg !131
  %803 = select i1 %451, i32 %347, i32 %802, !dbg !132
  %804 = insertelement <1 x i32> poison, i32 %803, i64 0, !dbg !131
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %801, <1 x i32> %804, i1 true) #2, !dbg !131
  %805 = or disjoint i32 %781, 192, !dbg !131
  %806 = lshr i32 %805, 4, !dbg !131
  %807 = and i32 %806, 204, !dbg !131
  %808 = getelementptr float, ptr addrspace(3) @global_smem, i32 %807, !dbg !131
  %809 = getelementptr float, ptr addrspace(3) %808, i32 %805, !dbg !131
  %810 = extractelement <4 x i32> %.v38, i64 3, !dbg !131
  %811 = select i1 %453, i32 %348, i32 %810, !dbg !132
  %812 = insertelement <1 x i32> poison, i32 %811, i64 0, !dbg !131
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %809, <1 x i32> %812, i1 true) #2, !dbg !131
  %813 = or disjoint i32 %781, 256, !dbg !131
  %814 = lshr i32 %813, 4, !dbg !131
  %815 = and i32 %814, 208, !dbg !131
  %816 = getelementptr float, ptr addrspace(3) @global_smem, i32 %815, !dbg !131
  %817 = getelementptr float, ptr addrspace(3) %816, i32 %813, !dbg !131
  %818 = extractelement <4 x i32> %.v45, i64 0, !dbg !131
  %819 = select i1 %545, i32 %350, i32 %818, !dbg !132
  %820 = insertelement <1 x i32> poison, i32 %819, i64 0, !dbg !131
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %817, <1 x i32> %820, i1 true) #2, !dbg !131
  %821 = or disjoint i32 %781, 320, !dbg !131
  %822 = lshr i32 %821, 4, !dbg !131
  %823 = and i32 %822, 212, !dbg !131
  %824 = getelementptr float, ptr addrspace(3) @global_smem, i32 %823, !dbg !131
  %825 = getelementptr float, ptr addrspace(3) %824, i32 %821, !dbg !131
  %826 = extractelement <4 x i32> %.v45, i64 1, !dbg !131
  %827 = select i1 %547, i32 %351, i32 %826, !dbg !132
  %828 = insertelement <1 x i32> poison, i32 %827, i64 0, !dbg !131
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %825, <1 x i32> %828, i1 true) #2, !dbg !131
  %829 = or disjoint i32 %781, 384, !dbg !131
  %830 = lshr i32 %829, 4, !dbg !131
  %831 = and i32 %830, 216, !dbg !131
  %832 = getelementptr float, ptr addrspace(3) @global_smem, i32 %831, !dbg !131
  %833 = getelementptr float, ptr addrspace(3) %832, i32 %829, !dbg !131
  %834 = extractelement <4 x i32> %.v45, i64 2, !dbg !131
  %835 = select i1 %549, i32 %352, i32 %834, !dbg !132
  %836 = insertelement <1 x i32> poison, i32 %835, i64 0, !dbg !131
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %833, <1 x i32> %836, i1 true) #2, !dbg !131
  %837 = or disjoint i32 %781, 448, !dbg !131
  %838 = lshr i32 %837, 4, !dbg !131
  %839 = and i32 %838, 220, !dbg !131
  %840 = getelementptr float, ptr addrspace(3) @global_smem, i32 %839, !dbg !131
  %841 = getelementptr float, ptr addrspace(3) %840, i32 %837, !dbg !131
  %842 = extractelement <4 x i32> %.v45, i64 3, !dbg !131
  %843 = select i1 %551, i32 %353, i32 %842, !dbg !132
  %844 = insertelement <1 x i32> poison, i32 %843, i64 0, !dbg !131
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %841, <1 x i32> %844, i1 true) #2, !dbg !131
  %845 = or disjoint i32 %781, 512, !dbg !131
  %846 = lshr i32 %845, 4, !dbg !131
  %847 = and i32 %846, 224, !dbg !131
  %848 = getelementptr float, ptr addrspace(3) @global_smem, i32 %847, !dbg !131
  %849 = getelementptr float, ptr addrspace(3) %848, i32 %845, !dbg !131
  %850 = extractelement <4 x i32> %.v52, i64 0, !dbg !131
  %851 = select i1 %643, i32 %355, i32 %850, !dbg !132
  %852 = insertelement <1 x i32> poison, i32 %851, i64 0, !dbg !131
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %849, <1 x i32> %852, i1 true) #2, !dbg !131
  %853 = or disjoint i32 %781, 576, !dbg !131
  %854 = lshr i32 %853, 4, !dbg !131
  %855 = and i32 %854, 228, !dbg !131
  %856 = getelementptr float, ptr addrspace(3) @global_smem, i32 %855, !dbg !131
  %857 = getelementptr float, ptr addrspace(3) %856, i32 %853, !dbg !131
  %858 = extractelement <4 x i32> %.v52, i64 1, !dbg !131
  %859 = select i1 %645, i32 %356, i32 %858, !dbg !132
  %860 = insertelement <1 x i32> poison, i32 %859, i64 0, !dbg !131
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %857, <1 x i32> %860, i1 true) #2, !dbg !131
  %861 = or disjoint i32 %781, 640, !dbg !131
  %862 = lshr i32 %861, 4, !dbg !131
  %863 = and i32 %862, 232, !dbg !131
  %864 = getelementptr float, ptr addrspace(3) @global_smem, i32 %863, !dbg !131
  %865 = getelementptr float, ptr addrspace(3) %864, i32 %861, !dbg !131
  %866 = extractelement <4 x i32> %.v52, i64 2, !dbg !131
  %867 = select i1 %647, i32 %357, i32 %866, !dbg !132
  %868 = insertelement <1 x i32> poison, i32 %867, i64 0, !dbg !131
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %865, <1 x i32> %868, i1 true) #2, !dbg !131
  %869 = or disjoint i32 %781, 704, !dbg !131
  %870 = lshr i32 %869, 4, !dbg !131
  %871 = and i32 %870, 236, !dbg !131
  %872 = getelementptr float, ptr addrspace(3) @global_smem, i32 %871, !dbg !131
  %873 = getelementptr float, ptr addrspace(3) %872, i32 %869, !dbg !131
  %874 = extractelement <4 x i32> %.v52, i64 3, !dbg !131
  %875 = select i1 %649, i32 %358, i32 %874, !dbg !132
  %876 = insertelement <1 x i32> poison, i32 %875, i64 0, !dbg !131
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %873, <1 x i32> %876, i1 true) #2, !dbg !131
  %877 = or disjoint i32 %781, 768, !dbg !131
  %878 = lshr i32 %877, 4, !dbg !131
  %879 = and i32 %878, 240, !dbg !131
  %880 = getelementptr float, ptr addrspace(3) @global_smem, i32 %879, !dbg !131
  %881 = getelementptr float, ptr addrspace(3) %880, i32 %877, !dbg !131
  %882 = extractelement <4 x i32> %.v59, i64 0, !dbg !131
  %883 = select i1 %741, i32 %360, i32 %882, !dbg !132
  %884 = insertelement <1 x i32> poison, i32 %883, i64 0, !dbg !131
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %881, <1 x i32> %884, i1 true) #2, !dbg !131
  %885 = or disjoint i32 %781, 832, !dbg !131
  %886 = lshr i32 %885, 4, !dbg !131
  %887 = and i32 %886, 244, !dbg !131
  %888 = getelementptr float, ptr addrspace(3) @global_smem, i32 %887, !dbg !131
  %889 = getelementptr float, ptr addrspace(3) %888, i32 %885, !dbg !131
  %890 = extractelement <4 x i32> %.v59, i64 1, !dbg !131
  %891 = select i1 %743, i32 %361, i32 %890, !dbg !132
  %892 = insertelement <1 x i32> poison, i32 %891, i64 0, !dbg !131
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %889, <1 x i32> %892, i1 true) #2, !dbg !131
  %893 = or disjoint i32 %781, 896, !dbg !131
  %894 = lshr i32 %893, 4, !dbg !131
  %895 = and i32 %894, 248, !dbg !131
  %896 = getelementptr float, ptr addrspace(3) @global_smem, i32 %895, !dbg !131
  %897 = getelementptr float, ptr addrspace(3) %896, i32 %893, !dbg !131
  %898 = extractelement <4 x i32> %.v59, i64 2, !dbg !131
  %899 = select i1 %745, i32 %362, i32 %898, !dbg !132
  %900 = insertelement <1 x i32> poison, i32 %899, i64 0, !dbg !131
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %897, <1 x i32> %900, i1 true) #2, !dbg !131
  %901 = or disjoint i32 %781, 960, !dbg !131
  %902 = lshr i32 %901, 4, !dbg !131
  %903 = and i32 %902, 252, !dbg !131
  %904 = getelementptr float, ptr addrspace(3) @global_smem, i32 %903, !dbg !131
  %905 = getelementptr float, ptr addrspace(3) %904, i32 %901, !dbg !131
  %906 = extractelement <4 x i32> %.v59, i64 3, !dbg !131
  %907 = select i1 %747, i32 %363, i32 %906, !dbg !132
  %908 = insertelement <1 x i32> poison, i32 %907, i64 0, !dbg !131
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %905, <1 x i32> %908, i1 true) #2, !dbg !131
  tail call void @llvm.nvvm.barrier0(), !dbg !131
  %909 = lshr i32 %11, 4, !dbg !131
  %910 = and i32 %909, 60, !dbg !131
  %911 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %910, !dbg !131
  %912 = getelementptr inbounds float, ptr addrspace(3) %911, i32 %782, !dbg !131
  %913 = or disjoint i32 %782, 1024, !dbg !131
  %914 = lshr i32 %913, 4, !dbg !131
  %915 = and i32 %914, 124, !dbg !131
  %916 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %915, !dbg !131
  %917 = getelementptr inbounds float, ptr addrspace(3) %916, i32 %913, !dbg !131
  %918 = load <4 x i32>, ptr addrspace(3) %917, align 16, !dbg !131
  %919 = or disjoint i32 %782, 2048, !dbg !131
  %920 = lshr i32 %919, 4, !dbg !131
  %921 = and i32 %920, 188, !dbg !131
  %922 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %921, !dbg !131
  %923 = getelementptr inbounds float, ptr addrspace(3) %922, i32 %919, !dbg !131
  %924 = load <4 x i32>, ptr addrspace(3) %923, align 16, !dbg !131
  %925 = or disjoint i32 %782, 3072, !dbg !131
  %926 = lshr i32 %925, 4, !dbg !131
  %927 = and i32 %926, 252, !dbg !131
  %928 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %927, !dbg !131
  %929 = getelementptr inbounds float, ptr addrspace(3) %928, i32 %925, !dbg !131
  %930 = load <4 x i32>, ptr addrspace(3) %929, align 16, !dbg !131
  %.extract = load i32, ptr addrspace(3) %912, align 16, !dbg !131
  %931 = getelementptr inbounds i8, ptr addrspace(3) %912, i32 4, !dbg !131
  %.extract18 = load i32, ptr addrspace(3) %931, align 4, !dbg !131
  %932 = getelementptr inbounds i8, ptr addrspace(3) %912, i32 8, !dbg !131
  %.extract19 = load i32, ptr addrspace(3) %932, align 8, !dbg !131
  %933 = getelementptr inbounds i8, ptr addrspace(3) %912, i32 12, !dbg !131
  %.extract20 = load i32, ptr addrspace(3) %933, align 4, !dbg !131
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract18, i32 %.extract19, i32 %.extract20, ptr addrspace(1) %767, i1 %774) #2, !dbg !131
  %.extract21 = extractelement <4 x i32> %918, i64 0, !dbg !131
  %.extract22 = extractelement <4 x i32> %918, i64 1, !dbg !131
  %.extract23 = extractelement <4 x i32> %918, i64 2, !dbg !131
  %.extract24 = extractelement <4 x i32> %918, i64 3, !dbg !131
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract21, i32 %.extract22, i32 %.extract23, i32 %.extract24, ptr addrspace(1) %769, i1 %775) #2, !dbg !131
  %.extract25 = extractelement <4 x i32> %924, i64 0, !dbg !131
  %.extract26 = extractelement <4 x i32> %924, i64 1, !dbg !131
  %.extract27 = extractelement <4 x i32> %924, i64 2, !dbg !131
  %.extract28 = extractelement <4 x i32> %924, i64 3, !dbg !131
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract25, i32 %.extract26, i32 %.extract27, i32 %.extract28, ptr addrspace(1) %771, i1 %776) #2, !dbg !131
  %.extract29 = extractelement <4 x i32> %930, i64 0, !dbg !131
  %.extract30 = extractelement <4 x i32> %930, i64 1, !dbg !131
  %.extract31 = extractelement <4 x i32> %930, i64 2, !dbg !131
  %.extract32 = extractelement <4 x i32> %930, i64 3, !dbg !131
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract29, i32 %.extract30, i32 %.extract31, i32 %.extract32, ptr addrspace(1) %773, i1 %777) #2, !dbg !131
  %934 = mul i32 %13, 320, !dbg !133
  %935 = add i32 %22, %934, !dbg !134
  %936 = sext i32 %935 to i64, !dbg !135
  %937 = getelementptr i8, ptr addrspace(1) %2, i64 %936, !dbg !135
  %938 = bitcast <4 x i8> %461 to i32, !dbg !136
  %939 = bitcast <4 x i8> %559 to i32, !dbg !136
  %940 = bitcast <4 x i8> %657 to i32, !dbg !136
  %941 = bitcast <4 x i8> %755 to i32, !dbg !136
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %938, i32 %939, i32 %940, i32 %941, ptr addrspace(1) %937, i1 %778) #2, !dbg !136
  ret void, !dbg !137
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c6ijtva23cuteqkec5iksnu4hqrsf2ow6ntv6gac2t7rd5w6uwha.py", directory: "inductor_cache/6i")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_36, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_36, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_36", linkageName: "triton_poi_fused_max_pool2d_with_indices_36", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 28, column: 21, scope: !7)
!21 = !DILocation(line: 28, column: 26, scope: !7)
!22 = !DILocation(line: 29, column: 19, scope: !7)
!23 = !DILocation(line: 32, column: 19, scope: !7)
!24 = !DILocation(line: 33, column: 19, scope: !7)
!25 = !DILocation(line: 37, column: 19, scope: !7)
!26 = !DILocation(line: 45, column: 19, scope: !7)
!27 = !DILocation(line: 46, column: 40, scope: !7)
!28 = !DILocation(line: 46, column: 50, scope: !7)
!29 = !DILocation(line: 46, column: 36, scope: !7)
!30 = !DILocation(line: 46, column: 45, scope: !7)
!31 = !DILocation(line: 46, column: 31, scope: !7)
!32 = !DILocation(line: 52, column: 42, scope: !7)
!33 = !DILocation(line: 52, column: 51, scope: !7)
!34 = !DILocation(line: 52, column: 31, scope: !7)
!35 = !DILocation(line: 57, column: 20, scope: !7)
!36 = !DILocation(line: 58, column: 19, scope: !7)
!37 = !DILocation(line: 59, column: 42, scope: !7)
!38 = !DILocation(line: 59, column: 51, scope: !7)
!39 = !DILocation(line: 59, column: 31, scope: !7)
!40 = !DILocation(line: 66, column: 43, scope: !7)
!41 = !DILocation(line: 66, column: 52, scope: !7)
!42 = !DILocation(line: 66, column: 31, scope: !7)
!43 = !DILocation(line: 69, column: 43, scope: !7)
!44 = !DILocation(line: 69, column: 52, scope: !7)
!45 = !DILocation(line: 69, column: 31, scope: !7)
!46 = !DILocation(line: 72, column: 43, scope: !7)
!47 = !DILocation(line: 72, column: 52, scope: !7)
!48 = !DILocation(line: 72, column: 31, scope: !7)
!49 = !DILocation(line: 77, column: 20, scope: !7)
!50 = !DILocation(line: 112, column: 63, scope: !7)
!51 = !DILocation(line: 46, column: 63, scope: !7)
!52 = !DILocation(line: 46, column: 71, scope: !7)
!53 = !DILocation(line: 46, column: 55, scope: !7)
!54 = !DILocation(line: 52, column: 61, scope: !7)
!55 = !DILocation(line: 59, column: 69, scope: !7)
!56 = !DILocation(line: 59, column: 77, scope: !7)
!57 = !DILocation(line: 59, column: 61, scope: !7)
!58 = !DILocation(line: 66, column: 62, scope: !7)
!59 = !DILocation(line: 69, column: 62, scope: !7)
!60 = !DILocation(line: 72, column: 62, scope: !7)
!61 = !DILocation(line: 79, column: 43, scope: !7)
!62 = !DILocation(line: 79, column: 52, scope: !7)
!63 = !DILocation(line: 79, column: 31, scope: !7)
!64 = !DILocation(line: 79, column: 78, scope: !7)
!65 = !DILocation(line: 79, column: 62, scope: !7)
!66 = !DILocation(line: 82, column: 43, scope: !7)
!67 = !DILocation(line: 82, column: 52, scope: !7)
!68 = !DILocation(line: 82, column: 31, scope: !7)
!69 = !DILocation(line: 82, column: 62, scope: !7)
!70 = !DILocation(line: 84, column: 20, scope: !7)
!71 = !DILocation(line: 85, column: 43, scope: !7)
!72 = !DILocation(line: 85, column: 52, scope: !7)
!73 = !DILocation(line: 85, column: 31, scope: !7)
!74 = !DILocation(line: 85, column: 70, scope: !7)
!75 = !DILocation(line: 85, column: 78, scope: !7)
!76 = !DILocation(line: 85, column: 62, scope: !7)
!77 = !DILocation(line: 118, column: 15, scope: !78, inlinedAt: !80)
!78 = distinct !DILexicalBlockFile(scope: !7, file: !79, discriminator: 0)
!79 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!80 = !DILocation(line: 53, column: 42, scope: !7)
!81 = !DILocation(line: 120, column: 21, scope: !78, inlinedAt: !80)
!82 = !DILocation(line: 120, column: 16, scope: !78, inlinedAt: !80)
!83 = !DILocation(line: 121, column: 29, scope: !78, inlinedAt: !80)
!84 = !DILocation(line: 118, column: 15, scope: !78, inlinedAt: !85)
!85 = !DILocation(line: 60, column: 42, scope: !7)
!86 = !DILocation(line: 120, column: 21, scope: !78, inlinedAt: !85)
!87 = !DILocation(line: 120, column: 16, scope: !78, inlinedAt: !85)
!88 = !DILocation(line: 121, column: 29, scope: !78, inlinedAt: !85)
!89 = !DILocation(line: 118, column: 15, scope: !78, inlinedAt: !90)
!90 = !DILocation(line: 67, column: 42, scope: !7)
!91 = !DILocation(line: 120, column: 21, scope: !78, inlinedAt: !90)
!92 = !DILocation(line: 120, column: 16, scope: !78, inlinedAt: !90)
!93 = !DILocation(line: 121, column: 29, scope: !78, inlinedAt: !90)
!94 = !DILocation(line: 118, column: 15, scope: !78, inlinedAt: !95)
!95 = !DILocation(line: 70, column: 42, scope: !7)
!96 = !DILocation(line: 120, column: 21, scope: !78, inlinedAt: !95)
!97 = !DILocation(line: 120, column: 16, scope: !78, inlinedAt: !95)
!98 = !DILocation(line: 121, column: 29, scope: !78, inlinedAt: !95)
!99 = !DILocation(line: 118, column: 15, scope: !78, inlinedAt: !100)
!100 = !DILocation(line: 73, column: 42, scope: !7)
!101 = !DILocation(line: 120, column: 21, scope: !78, inlinedAt: !100)
!102 = !DILocation(line: 120, column: 16, scope: !78, inlinedAt: !100)
!103 = !DILocation(line: 121, column: 29, scope: !78, inlinedAt: !100)
!104 = !DILocation(line: 118, column: 15, scope: !78, inlinedAt: !105)
!105 = !DILocation(line: 80, column: 42, scope: !7)
!106 = !DILocation(line: 120, column: 21, scope: !78, inlinedAt: !105)
!107 = !DILocation(line: 120, column: 16, scope: !78, inlinedAt: !105)
!108 = !DILocation(line: 121, column: 29, scope: !78, inlinedAt: !105)
!109 = !DILocation(line: 118, column: 15, scope: !78, inlinedAt: !110)
!110 = !DILocation(line: 83, column: 42, scope: !7)
!111 = !DILocation(line: 120, column: 21, scope: !78, inlinedAt: !110)
!112 = !DILocation(line: 120, column: 16, scope: !78, inlinedAt: !110)
!113 = !DILocation(line: 121, column: 29, scope: !78, inlinedAt: !110)
!114 = !DILocation(line: 118, column: 15, scope: !78, inlinedAt: !115)
!115 = !DILocation(line: 86, column: 42, scope: !7)
!116 = !DILocation(line: 120, column: 21, scope: !78, inlinedAt: !115)
!117 = !DILocation(line: 120, column: 16, scope: !78, inlinedAt: !115)
!118 = !DILocation(line: 90, column: 35, scope: !7)
!119 = !DILocation(line: 93, column: 35, scope: !7)
!120 = !DILocation(line: 96, column: 35, scope: !7)
!121 = !DILocation(line: 99, column: 35, scope: !7)
!122 = !DILocation(line: 102, column: 35, scope: !7)
!123 = !DILocation(line: 105, column: 35, scope: !7)
!124 = !DILocation(line: 108, column: 35, scope: !7)
!125 = !DILocation(line: 111, column: 35, scope: !7)
!126 = !DILocation(line: 112, column: 33, scope: !7)
!127 = !DILocation(line: 112, column: 43, scope: !7)
!128 = !DILocation(line: 112, column: 30, scope: !7)
!129 = !DILocation(line: 112, column: 38, scope: !7)
!130 = !DILocation(line: 112, column: 25, scope: !7)
!131 = !DILocation(line: 112, column: 55, scope: !7)
!132 = !DILocation(line: 121, column: 29, scope: !78, inlinedAt: !115)
!133 = !DILocation(line: 113, column: 34, scope: !7)
!134 = !DILocation(line: 113, column: 30, scope: !7)
!135 = !DILocation(line: 113, column: 25, scope: !7)
!136 = !DILocation(line: 113, column: 46, scope: !7)
!137 = !DILocation(line: 113, column: 4, scope: !7)
