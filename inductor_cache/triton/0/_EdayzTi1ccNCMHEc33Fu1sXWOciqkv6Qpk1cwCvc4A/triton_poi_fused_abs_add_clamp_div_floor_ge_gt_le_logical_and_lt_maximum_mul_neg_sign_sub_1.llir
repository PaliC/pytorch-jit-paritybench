; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused_abs_add_clamp_div_floor_ge_gt_le_logical_and_lt_maximum_mul_neg_sign_sub_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, i32 %11) local_unnamed_addr !dbg !7 {
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %14 = shl i32 %13, 8, !dbg !11
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %16 = shl i32 %15, 1, !dbg !12
  %17 = and i32 %16, 254, !dbg !12
  %18 = or disjoint i32 %14, %17, !dbg !13
  %19 = icmp slt i32 %18, 256, !dbg !14
  %20 = sext i32 %18 to i64, !dbg !15
  %21 = getelementptr float, ptr addrspace(1) %0, i64 %20, !dbg !15
  %22 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %21, i1 %19) #2, !dbg !16
  %23 = extractvalue { i32, i32 } %22, 0, !dbg !16
  %24 = extractvalue { i32, i32 } %22, 1, !dbg !16
  %25 = bitcast i32 %23 to float, !dbg !16
  %26 = bitcast i32 %24 to float, !dbg !16
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %1, i1 true) #2, !dbg !17
  %28 = bitcast i32 %27 to float, !dbg !17
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %2, i1 true) #2, !dbg !18
  %30 = bitcast i32 %29 to float, !dbg !18
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %3, i1 true) #2, !dbg !19
  %32 = bitcast i32 %31 to float, !dbg !19
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %4, i1 true) #2, !dbg !20
  %34 = bitcast i32 %33 to float, !dbg !20
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %5, i1 true) #2, !dbg !21
  %36 = bitcast i32 %35 to float, !dbg !21
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %6, i1 true) #2, !dbg !22
  %38 = bitcast i32 %37 to float, !dbg !22
  %39 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %25, float %28) #2, !dbg !23
  %40 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %26, float %28) #2, !dbg !23
  %41 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !24
  %42 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #2, !dbg !24
  %43 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %36, float %28) #2, !dbg !25
  %44 = fsub float %43, %30, !dbg !26
  %45 = tail call float @llvm.fabs.f32(float %44), !dbg !27
  %46 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %38, float %28) #2, !dbg !28
  %47 = fsub float %46, %30, !dbg !29
  %48 = tail call float @llvm.fabs.f32(float %47), !dbg !30
  %49 = fcmp ogt float %45, %48, !dbg !31
  %50 = fcmp uno float %44, 0.000000e+00, !dbg !35
  %51 = or i1 %50, %49, !dbg !36
  %52 = select i1 %51, float %45, float %48, !dbg !37
  %53 = fsub float 0.000000e+00, %52, !dbg !38
  %54 = getelementptr float, ptr addrspace(1) %7, i64 %20, !dbg !39
  %55 = getelementptr i1, ptr addrspace(1) %8, i64 %20, !dbg !40
  %56 = insertelement <2 x float> poison, float %39, i64 0, !dbg !41
  %57 = insertelement <2 x float> %56, float %40, i64 1, !dbg !41
  %58 = insertelement <2 x float> poison, float %30, i64 0, !dbg !41
  %59 = shufflevector <2 x float> %58, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !41
  %60 = fsub <2 x float> %57, %59, !dbg !41
  %61 = fcmp ogt <2 x float> %60, zeroinitializer, !dbg !42
  %62 = zext <2 x i1> %61 to <2 x i8>, !dbg !43
  %63 = fcmp olt <2 x float> %60, zeroinitializer, !dbg !44
  %64 = sext <2 x i1> %63 to <2 x i8>, !dbg !45
  %65 = add nsw <2 x i8> %64, %62, !dbg !46
  %66 = sitofp <2 x i8> %65 to <2 x float>, !dbg !47
  %67 = extractelement <2 x float> %60, i64 0, !dbg !48
  %68 = tail call float @llvm.fabs.f32(float %67), !dbg !48
  %69 = extractelement <2 x float> %60, i64 1, !dbg !48
  %70 = tail call float @llvm.fabs.f32(float %69), !dbg !48
  %71 = fadd float %68, 5.000000e-01, !dbg !49
  %72 = fadd float %70, 5.000000e-01, !dbg !49
  %73 = tail call float @llvm.nvvm.floor.ftz.f(float %71), !dbg !24
  %74 = tail call float @llvm.nvvm.floor.f(float %71), !dbg !24
  %75 = insertelement <2 x i32> poison, i32 %41, i64 0, !dbg !24
  %76 = insertelement <2 x i32> %75, i32 %42, i64 1, !dbg !24
  %77 = icmp eq <2 x i32> %76, zeroinitializer, !dbg !24
  %78 = tail call float @llvm.nvvm.floor.ftz.f(float %72), !dbg !24
  %79 = tail call float @llvm.nvvm.floor.f(float %72), !dbg !24
  %80 = insertelement <2 x float> poison, float %74, i64 0, !dbg !24
  %81 = insertelement <2 x float> %80, float %79, i64 1, !dbg !24
  %82 = insertelement <2 x float> poison, float %73, i64 0, !dbg !24
  %83 = insertelement <2 x float> %82, float %78, i64 1, !dbg !24
  %84 = select <2 x i1> %77, <2 x float> %81, <2 x float> %83, !dbg !24
  %85 = fmul <2 x float> %84, %66, !dbg !50
  %86 = extractelement <2 x float> %85, i64 0, !dbg !51
  %87 = fcmp ogt float %86, %32, !dbg !53
  %88 = extractelement <2 x float> %85, i64 1, !dbg !51
  %89 = fcmp ogt float %88, %32, !dbg !53
  %90 = fcmp uno float %86, 0.000000e+00, !dbg !54
  %91 = fcmp uno float %88, 0.000000e+00, !dbg !54
  %92 = or i1 %87, %90, !dbg !55
  %93 = or i1 %89, %91, !dbg !55
  %94 = select i1 %92, float %86, float %32, !dbg !51
  %95 = select i1 %93, float %88, float %32, !dbg !51
  %96 = fcmp olt float %94, %34, !dbg !56
  %97 = fcmp olt float %95, %34, !dbg !56
  %98 = fcmp uno float %94, 0.000000e+00, !dbg !58
  %99 = fcmp uno float %95, 0.000000e+00, !dbg !58
  %100 = or i1 %96, %98, !dbg !59
  %101 = or i1 %97, %99, !dbg !59
  %102 = select i1 %100, float %94, float %34, !dbg !60
  %103 = select i1 %101, float %95, float %34, !dbg !60
  %104 = fadd float %102, %30, !dbg !61
  %105 = fadd float %103, %30, !dbg !61
  %106 = fmul float %104, %28, !dbg !62
  %107 = fmul float %105, %28, !dbg !62
  %108 = insertelement <2 x float> poison, float %32, i64 0, !dbg !63
  %109 = shufflevector <2 x float> %108, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !63
  %110 = fcmp oge <2 x float> %85, %109, !dbg !63
  %111 = insertelement <2 x float> poison, float %34, i64 0, !dbg !64
  %112 = shufflevector <2 x float> %111, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !64
  %113 = fcmp ole <2 x float> %85, %112, !dbg !64
  %114 = and <2 x i1> %110, %113, !dbg !65
  %115 = bitcast float %106 to i32, !dbg !66
  %116 = bitcast float %107 to i32, !dbg !66
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %115, i32 %116, ptr addrspace(1) %54, i1 %19) #2, !dbg !66
  %117 = zext <2 x i1> %114 to <2 x i8>, !dbg !67
  %118 = bitcast <2 x i8> %117 to i16, !dbg !67
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %118, ptr addrspace(1) %55, i1 %19) #2, !dbg !67
  %119 = getelementptr i1, ptr addrspace(1) %9, i64 %20, !dbg !68
  %120 = insertelement <2 x float> poison, float %52, i64 0, !dbg !69
  %121 = shufflevector <2 x float> %120, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !69
  %122 = fcmp ogt <2 x float> %60, %121, !dbg !69
  %123 = zext <2 x i1> %122 to <2 x i8>, !dbg !70
  %124 = bitcast <2 x i8> %123 to i16, !dbg !70
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %124, ptr addrspace(1) %119, i1 %19) #2, !dbg !70
  %125 = getelementptr i1, ptr addrspace(1) %10, i64 %20, !dbg !71
  %126 = insertelement <2 x float> poison, float %53, i64 0, !dbg !72
  %127 = shufflevector <2 x float> %126, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !72
  %128 = fcmp olt <2 x float> %60, %127, !dbg !72
  %129 = zext <2 x i1> %128 to <2 x i8>, !dbg !73
  %130 = bitcast <2 x i8> %129 to i16, !dbg !73
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %130, ptr addrspace(1) %125, i1 %19) #2, !dbg !73
  ret void, !dbg !74
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.fabs.f32(float) #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.floor.ftz.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.floor.f(float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cz5ujh3hnth5mngwtz7ll3z5x7rodr4h2snt3xmw27glw3t2r4xo.py", directory: "inductor_cache/z5")
!4 = !{ptr @triton_poi_fused_abs_add_clamp_div_floor_ge_gt_le_logical_and_lt_maximum_mul_neg_sign_sub_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_abs_add_clamp_div_floor_ge_gt_le_logical_and_lt_maximum_mul_neg_sign_sub_1, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_abs_add_clamp_div_floor_ge_gt_le_logical_and_lt_maximum_mul_neg_sign_sub_1", linkageName: "triton_poi_fused_abs_add_clamp_div_floor_ge_gt_le_logical_and_lt_maximum_mul_neg_sign_sub_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 30, scope: !7)
!16 = !DILocation(line: 25, column: 35, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 19, scope: !7)
!19 = !DILocation(line: 30, column: 20, scope: !7)
!20 = !DILocation(line: 32, column: 20, scope: !7)
!21 = !DILocation(line: 34, column: 20, scope: !7)
!22 = !DILocation(line: 36, column: 20, scope: !7)
!23 = !DILocation(line: 38, column: 18, scope: !7)
!24 = !DILocation(line: 50, column: 28, scope: !7)
!25 = !DILocation(line: 59, column: 20, scope: !7)
!26 = !DILocation(line: 60, column: 20, scope: !7)
!27 = !DILocation(line: 61, column: 24, scope: !7)
!28 = !DILocation(line: 62, column: 20, scope: !7)
!29 = !DILocation(line: 63, column: 20, scope: !7)
!30 = !DILocation(line: 64, column: 24, scope: !7)
!31 = !DILocation(line: 118, column: 15, scope: !32, inlinedAt: !34)
!32 = distinct !DILexicalBlockFile(scope: !7, file: !33, discriminator: 0)
!33 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!34 = !DILocation(line: 65, column: 42, scope: !7)
!35 = !DILocation(line: 120, column: 21, scope: !32, inlinedAt: !34)
!36 = !DILocation(line: 120, column: 16, scope: !32, inlinedAt: !34)
!37 = !DILocation(line: 121, column: 29, scope: !32, inlinedAt: !34)
!38 = !DILocation(line: 67, column: 13, scope: !7)
!39 = !DILocation(line: 69, column: 25, scope: !7)
!40 = !DILocation(line: 70, column: 25, scope: !7)
!41 = !DILocation(line: 39, column: 18, scope: !7)
!42 = !DILocation(line: 41, column: 18, scope: !7)
!43 = !DILocation(line: 42, column: 19, scope: !7)
!44 = !DILocation(line: 43, column: 19, scope: !7)
!45 = !DILocation(line: 44, column: 21, scope: !7)
!46 = !DILocation(line: 45, column: 19, scope: !7)
!47 = !DILocation(line: 46, column: 21, scope: !7)
!48 = !DILocation(line: 47, column: 24, scope: !7)
!49 = !DILocation(line: 49, column: 20, scope: !7)
!50 = !DILocation(line: 51, column: 20, scope: !7)
!51 = !DILocation(line: 121, column: 29, scope: !32, inlinedAt: !52)
!52 = !DILocation(line: 52, column: 42, scope: !7)
!53 = !DILocation(line: 118, column: 15, scope: !32, inlinedAt: !52)
!54 = !DILocation(line: 120, column: 21, scope: !32, inlinedAt: !52)
!55 = !DILocation(line: 120, column: 16, scope: !32, inlinedAt: !52)
!56 = !DILocation(line: 110, column: 15, scope: !32, inlinedAt: !57)
!57 = !DILocation(line: 53, column: 42, scope: !7)
!58 = !DILocation(line: 112, column: 21, scope: !32, inlinedAt: !57)
!59 = !DILocation(line: 112, column: 16, scope: !32, inlinedAt: !57)
!60 = !DILocation(line: 113, column: 29, scope: !32, inlinedAt: !57)
!61 = !DILocation(line: 54, column: 20, scope: !7)
!62 = !DILocation(line: 55, column: 20, scope: !7)
!63 = !DILocation(line: 56, column: 21, scope: !7)
!64 = !DILocation(line: 57, column: 21, scope: !7)
!65 = !DILocation(line: 58, column: 20, scope: !7)
!66 = !DILocation(line: 69, column: 37, scope: !7)
!67 = !DILocation(line: 70, column: 37, scope: !7)
!68 = !DILocation(line: 71, column: 25, scope: !7)
!69 = !DILocation(line: 66, column: 19, scope: !7)
!70 = !DILocation(line: 71, column: 37, scope: !7)
!71 = !DILocation(line: 72, column: 25, scope: !7)
!72 = !DILocation(line: 68, column: 19, scope: !7)
!73 = !DILocation(line: 72, column: 37, scope: !7)
!74 = !DILocation(line: 72, column: 4, scope: !7)
