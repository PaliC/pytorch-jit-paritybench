; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_relu_9(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %6 = shl i32 %5, 10, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 2, !dbg !12
  %9 = and i32 %8, 508, !dbg !12
  %10 = and i32 %7, 127, !dbg !12
  %11 = or disjoint i32 %10, 128, !dbg !12
  %12 = or disjoint i32 %10, 256, !dbg !12
  %13 = or disjoint i32 %10, 384, !dbg !12
  %14 = or disjoint i32 %6, %9, !dbg !13
  %15 = or disjoint i32 %14, 1, !dbg !13
  %16 = or disjoint i32 %14, 2, !dbg !13
  %17 = or disjoint i32 %14, 3, !dbg !13
  %18 = or disjoint i32 %14, 512, !dbg !13
  %19 = or disjoint i32 %14, 513, !dbg !13
  %20 = or disjoint i32 %14, 514, !dbg !13
  %21 = or disjoint i32 %14, 515, !dbg !13
  %22 = or disjoint i32 %6, %10, !dbg !13
  %23 = or disjoint i32 %6, %11, !dbg !13
  %24 = or disjoint i32 %6, %12, !dbg !13
  %25 = or disjoint i32 %6, %13, !dbg !13
  %26 = or disjoint i32 %22, 512, !dbg !13
  %27 = or disjoint i32 %22, 640, !dbg !13
  %28 = or disjoint i32 %22, 768, !dbg !13
  %29 = or disjoint i32 %22, 896, !dbg !13
  %30 = icmp slt i32 %14, 864000, !dbg !14
  %31 = icmp slt i32 %18, 864000, !dbg !14
  %32 = icmp slt i32 %22, 864000, !dbg !14
  %33 = icmp slt i32 %23, 864000, !dbg !14
  %34 = icmp slt i32 %24, 864000, !dbg !14
  %35 = icmp slt i32 %25, 864000, !dbg !14
  %36 = icmp slt i32 %26, 864000, !dbg !14
  %37 = icmp slt i32 %27, 864000, !dbg !14
  %38 = icmp slt i32 %28, 864000, !dbg !14
  %39 = icmp slt i32 %29, 864000, !dbg !14
  %40 = sdiv i32 %14, 3375, !dbg !15
  %41 = sdiv i32 %15, 3375, !dbg !15
  %42 = sdiv i32 %16, 3375, !dbg !15
  %43 = sdiv i32 %17, 3375, !dbg !15
  %44 = sdiv i32 %18, 3375, !dbg !15
  %45 = sdiv i32 %19, 3375, !dbg !15
  %46 = sdiv i32 %20, 3375, !dbg !15
  %47 = sdiv i32 %21, 3375, !dbg !15
  %.frozen = freeze i32 %22, !dbg !15
  %48 = sdiv i32 %.frozen, 3375, !dbg !15
  %.frozen8 = freeze i32 %23, !dbg !15
  %49 = sdiv i32 %.frozen8, 3375, !dbg !15
  %.frozen10 = freeze i32 %24, !dbg !15
  %50 = sdiv i32 %.frozen10, 3375, !dbg !15
  %.frozen12 = freeze i32 %25, !dbg !15
  %51 = sdiv i32 %.frozen12, 3375, !dbg !15
  %.frozen14 = freeze i32 %26, !dbg !15
  %52 = sdiv i32 %.frozen14, 3375, !dbg !15
  %.frozen16 = freeze i32 %27, !dbg !15
  %53 = sdiv i32 %.frozen16, 3375, !dbg !15
  %.frozen18 = freeze i32 %28, !dbg !15
  %54 = sdiv i32 %.frozen18, 3375, !dbg !15
  %.frozen20 = freeze i32 %29, !dbg !15
  %55 = sdiv i32 %.frozen20, 3375, !dbg !15
  %56 = srem i32 %40, 64, !dbg !16
  %57 = srem i32 %41, 64, !dbg !16
  %58 = srem i32 %42, 64, !dbg !16
  %59 = srem i32 %43, 64, !dbg !16
  %60 = srem i32 %44, 64, !dbg !16
  %61 = srem i32 %45, 64, !dbg !16
  %62 = srem i32 %46, 64, !dbg !16
  %63 = srem i32 %47, 64, !dbg !16
  %64 = mul i32 %48, 3375, !dbg !17
  %.decomposed = sub i32 %.frozen, %64, !dbg !17
  %65 = mul i32 %49, 3375, !dbg !17
  %.decomposed9 = sub i32 %.frozen8, %65, !dbg !17
  %66 = mul i32 %50, 3375, !dbg !17
  %.decomposed11 = sub i32 %.frozen10, %66, !dbg !17
  %67 = mul i32 %51, 3375, !dbg !17
  %.decomposed13 = sub i32 %.frozen12, %67, !dbg !17
  %68 = mul i32 %52, 3375, !dbg !17
  %.decomposed15 = sub i32 %.frozen14, %68, !dbg !17
  %69 = mul i32 %53, 3375, !dbg !17
  %.decomposed17 = sub i32 %.frozen16, %69, !dbg !17
  %70 = mul i32 %54, 3375, !dbg !17
  %.decomposed19 = sub i32 %.frozen18, %70, !dbg !17
  %71 = mul i32 %55, 3375, !dbg !17
  %.decomposed21 = sub i32 %.frozen20, %71, !dbg !17
  %72 = sext i32 %14 to i64, !dbg !18
  %73 = getelementptr float, ptr addrspace(1) %0, i64 %72, !dbg !18
  %74 = sext i32 %18 to i64, !dbg !18
  %75 = getelementptr float, ptr addrspace(1) %0, i64 %74, !dbg !18
  %76 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %73, i1 %30) #2, !dbg !19
  %77 = extractvalue { i32, i32, i32, i32 } %76, 0, !dbg !19
  %78 = extractvalue { i32, i32, i32, i32 } %76, 1, !dbg !19
  %79 = extractvalue { i32, i32, i32, i32 } %76, 2, !dbg !19
  %80 = extractvalue { i32, i32, i32, i32 } %76, 3, !dbg !19
  %81 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %75, i1 %31) #2, !dbg !19
  %82 = extractvalue { i32, i32, i32, i32 } %81, 0, !dbg !19
  %83 = extractvalue { i32, i32, i32, i32 } %81, 1, !dbg !19
  %84 = extractvalue { i32, i32, i32, i32 } %81, 2, !dbg !19
  %85 = extractvalue { i32, i32, i32, i32 } %81, 3, !dbg !19
  %86 = sext i32 %56 to i64, !dbg !20
  %87 = getelementptr float, ptr addrspace(1) %1, i64 %86, !dbg !20
  %88 = sext i32 %57 to i64, !dbg !20
  %89 = getelementptr float, ptr addrspace(1) %1, i64 %88, !dbg !20
  %90 = sext i32 %58 to i64, !dbg !20
  %91 = getelementptr float, ptr addrspace(1) %1, i64 %90, !dbg !20
  %92 = sext i32 %59 to i64, !dbg !20
  %93 = getelementptr float, ptr addrspace(1) %1, i64 %92, !dbg !20
  %94 = sext i32 %60 to i64, !dbg !20
  %95 = getelementptr float, ptr addrspace(1) %1, i64 %94, !dbg !20
  %96 = sext i32 %61 to i64, !dbg !20
  %97 = getelementptr float, ptr addrspace(1) %1, i64 %96, !dbg !20
  %98 = sext i32 %62 to i64, !dbg !20
  %99 = getelementptr float, ptr addrspace(1) %1, i64 %98, !dbg !20
  %100 = sext i32 %63 to i64, !dbg !20
  %101 = getelementptr float, ptr addrspace(1) %1, i64 %100, !dbg !20
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %87, i1 %30) #2, !dbg !21
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %89, i1 %30) #2, !dbg !21
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %91, i1 %30) #2, !dbg !21
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 %30) #2, !dbg !21
  %106 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %95, i1 %31) #2, !dbg !21
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %97, i1 %31) #2, !dbg !21
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %99, i1 %31) #2, !dbg !21
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %101, i1 %31) #2, !dbg !21
  %110 = insertelement <8 x i32> poison, i32 %85, i64 0, !dbg !19
  %111 = insertelement <8 x i32> %110, i32 %84, i64 1, !dbg !19
  %112 = insertelement <8 x i32> %111, i32 %83, i64 2, !dbg !19
  %113 = insertelement <8 x i32> %112, i32 %82, i64 3, !dbg !19
  %114 = insertelement <8 x i32> %113, i32 %80, i64 4, !dbg !19
  %115 = insertelement <8 x i32> %114, i32 %79, i64 5, !dbg !19
  %116 = insertelement <8 x i32> %115, i32 %78, i64 6, !dbg !19
  %117 = insertelement <8 x i32> %116, i32 %77, i64 7, !dbg !19
  %118 = bitcast <8 x i32> %117 to <8 x float>, !dbg !19
  %119 = insertelement <8 x i32> poison, i32 %109, i64 0, !dbg !21
  %120 = insertelement <8 x i32> %119, i32 %108, i64 1, !dbg !21
  %121 = insertelement <8 x i32> %120, i32 %107, i64 2, !dbg !21
  %122 = insertelement <8 x i32> %121, i32 %106, i64 3, !dbg !21
  %123 = insertelement <8 x i32> %122, i32 %105, i64 4, !dbg !21
  %124 = insertelement <8 x i32> %123, i32 %104, i64 5, !dbg !21
  %125 = insertelement <8 x i32> %124, i32 %103, i64 6, !dbg !21
  %126 = insertelement <8 x i32> %125, i32 %102, i64 7, !dbg !21
  %127 = bitcast <8 x i32> %126 to <8 x float>, !dbg !21
  %128 = fadd <8 x float> %118, %127, !dbg !22
  %129 = fcmp olt <8 x float> %128, zeroinitializer, !dbg !23
  %130 = extractelement <8 x i1> %129, i64 7, !dbg !27
  %131 = extractelement <8 x i1> %129, i64 6, !dbg !27
  %132 = extractelement <8 x i1> %129, i64 5, !dbg !27
  %133 = extractelement <8 x i1> %129, i64 4, !dbg !27
  %134 = extractelement <8 x i1> %129, i64 3, !dbg !27
  %135 = extractelement <8 x i1> %129, i64 2, !dbg !27
  %136 = extractelement <8 x i1> %129, i64 1, !dbg !27
  %137 = extractelement <8 x i1> %129, i64 0, !dbg !27
  %138 = mul i32 %48, 3392, !dbg !28
  %139 = mul i32 %49, 3392, !dbg !28
  %140 = mul i32 %50, 3392, !dbg !28
  %141 = mul i32 %51, 3392, !dbg !28
  %142 = mul i32 %52, 3392, !dbg !28
  %143 = mul i32 %53, 3392, !dbg !28
  %144 = mul i32 %54, 3392, !dbg !28
  %145 = mul i32 %55, 3392, !dbg !28
  %146 = add i32 %138, %.decomposed, !dbg !29
  %147 = add i32 %139, %.decomposed9, !dbg !29
  %148 = add i32 %140, %.decomposed11, !dbg !29
  %149 = add i32 %141, %.decomposed13, !dbg !29
  %150 = add i32 %142, %.decomposed15, !dbg !29
  %151 = add i32 %143, %.decomposed17, !dbg !29
  %152 = add i32 %144, %.decomposed19, !dbg !29
  %153 = add i32 %145, %.decomposed21, !dbg !29
  %154 = sext i32 %146 to i64, !dbg !30
  %155 = getelementptr float, ptr addrspace(1) %2, i64 %154, !dbg !30
  %156 = sext i32 %147 to i64, !dbg !30
  %157 = getelementptr float, ptr addrspace(1) %2, i64 %156, !dbg !30
  %158 = sext i32 %148 to i64, !dbg !30
  %159 = getelementptr float, ptr addrspace(1) %2, i64 %158, !dbg !30
  %160 = sext i32 %149 to i64, !dbg !30
  %161 = getelementptr float, ptr addrspace(1) %2, i64 %160, !dbg !30
  %162 = sext i32 %150 to i64, !dbg !30
  %163 = getelementptr float, ptr addrspace(1) %2, i64 %162, !dbg !30
  %164 = sext i32 %151 to i64, !dbg !30
  %165 = getelementptr float, ptr addrspace(1) %2, i64 %164, !dbg !30
  %166 = sext i32 %152 to i64, !dbg !30
  %167 = getelementptr float, ptr addrspace(1) %2, i64 %166, !dbg !30
  %168 = sext i32 %153 to i64, !dbg !30
  %169 = getelementptr float, ptr addrspace(1) %2, i64 %168, !dbg !30
  %170 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %9, !dbg !31
  %bc = bitcast <8 x float> %128 to <8 x i32>, !dbg !31
  %171 = extractelement <8 x i32> %bc, i64 7, !dbg !31
  %172 = select i1 %130, i32 0, i32 %171, !dbg !27
  %bc1 = bitcast <8 x float> %128 to <8 x i32>, !dbg !31
  %173 = extractelement <8 x i32> %bc1, i64 6, !dbg !31
  %174 = select i1 %131, i32 0, i32 %173, !dbg !27
  %bc2 = bitcast <8 x float> %128 to <8 x i32>, !dbg !31
  %175 = extractelement <8 x i32> %bc2, i64 5, !dbg !31
  %176 = select i1 %132, i32 0, i32 %175, !dbg !27
  %bc3 = bitcast <8 x float> %128 to <8 x i32>, !dbg !31
  %177 = extractelement <8 x i32> %bc3, i64 4, !dbg !31
  %178 = select i1 %133, i32 0, i32 %177, !dbg !27
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %170, i32 %172, i32 %174, i32 %176, i32 %178, i1 true) #2, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %179 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %10, !dbg !31
  %180 = load i32, ptr addrspace(3) %179, align 4, !dbg !31
  %181 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !31
  %182 = load i32, ptr addrspace(3) %181, align 4, !dbg !31
  %183 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !31
  %184 = load i32, ptr addrspace(3) %183, align 4, !dbg !31
  %185 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !31
  %186 = load i32, ptr addrspace(3) %185, align 4, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %bc4 = bitcast <8 x float> %128 to <8 x i32>, !dbg !31
  %187 = extractelement <8 x i32> %bc4, i64 3, !dbg !31
  %188 = select i1 %134, i32 0, i32 %187, !dbg !27
  %bc5 = bitcast <8 x float> %128 to <8 x i32>, !dbg !31
  %189 = extractelement <8 x i32> %bc5, i64 2, !dbg !31
  %190 = select i1 %135, i32 0, i32 %189, !dbg !27
  %bc6 = bitcast <8 x float> %128 to <8 x i32>, !dbg !31
  %191 = extractelement <8 x i32> %bc6, i64 1, !dbg !31
  %192 = select i1 %136, i32 0, i32 %191, !dbg !27
  %bc7 = bitcast <8 x float> %128 to <8 x i32>, !dbg !31
  %193 = extractelement <8 x i32> %bc7, i64 0, !dbg !31
  %194 = select i1 %137, i32 0, i32 %193, !dbg !27
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %170, i32 %188, i32 %190, i32 %192, i32 %194, i1 true) #2, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %195 = load i32, ptr addrspace(3) %179, align 4, !dbg !31
  %196 = load i32, ptr addrspace(3) %181, align 4, !dbg !31
  %197 = load i32, ptr addrspace(3) %183, align 4, !dbg !31
  %198 = load i32, ptr addrspace(3) %185, align 4, !dbg !31
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %180, ptr addrspace(1) %155, i1 %32) #2, !dbg !31
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %182, ptr addrspace(1) %157, i1 %33) #2, !dbg !31
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %184, ptr addrspace(1) %159, i1 %34) #2, !dbg !31
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %186, ptr addrspace(1) %161, i1 %35) #2, !dbg !31
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %195, ptr addrspace(1) %163, i1 %36) #2, !dbg !31
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %196, ptr addrspace(1) %165, i1 %37) #2, !dbg !31
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %197, ptr addrspace(1) %167, i1 %38) #2, !dbg !31
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %198, ptr addrspace(1) %169, i1 %39) #2, !dbg !31
  ret void, !dbg !32
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cpgpu4ij5n4ro6n5k5zbhbjdxgix55ktsafhh3lp572i7quedc54.py", directory: "inductor_cache/pg")
!4 = !{ptr @triton_poi_fused_convolution_relu_9, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_relu_9, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_relu_9", linkageName: "triton_poi_fused_convolution_relu_9", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 21, scope: !7)
!16 = !DILocation(line: 25, column: 29, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 30, scope: !7)
!19 = !DILocation(line: 28, column: 35, scope: !7)
!20 = !DILocation(line: 29, column: 30, scope: !7)
!21 = !DILocation(line: 29, column: 35, scope: !7)
!22 = !DILocation(line: 30, column: 18, scope: !7)
!23 = !DILocation(line: 118, column: 15, scope: !24, inlinedAt: !26)
!24 = distinct !DILexicalBlockFile(scope: !7, file: !25, discriminator: 0)
!25 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!26 = !DILocation(line: 32, column: 40, scope: !7)
!27 = !DILocation(line: 121, column: 29, scope: !24, inlinedAt: !26)
!28 = !DILocation(line: 33, column: 35, scope: !7)
!29 = !DILocation(line: 33, column: 30, scope: !7)
!30 = !DILocation(line: 33, column: 25, scope: !7)
!31 = !DILocation(line: 33, column: 46, scope: !7)
!32 = !DILocation(line: 33, column: 4, scope: !7)
