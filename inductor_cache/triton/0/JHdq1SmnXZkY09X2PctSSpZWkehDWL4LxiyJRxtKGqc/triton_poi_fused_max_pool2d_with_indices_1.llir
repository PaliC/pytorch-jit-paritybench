; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_max_pool2d_with_indices_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %6 = shl i32 %5, 8, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 1, !dbg !12
  %9 = and i32 %8, 254, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = or disjoint i32 %10, 1, !dbg !13
  %12 = icmp slt i32 %10, 3600, !dbg !14
  %13 = sdiv i32 %10, 15, !dbg !15
  %14 = sdiv i32 %11, 15, !dbg !15
  %15 = sdiv i32 %10, 900, !dbg !16
  %16 = srem i32 %13, 60, !dbg !17
  %17 = srem i32 %14, 60, !dbg !17
  %18 = mul nsw i32 %16, 60, !dbg !18
  %19 = mul nsw i32 %17, 60, !dbg !18
  %20 = mul i32 %15, 3616, !dbg !19
  %21 = add i32 %18, %20, !dbg !20
  %22 = add i32 %20, %19, !dbg !20
  %23 = or disjoint i32 %21, 1, !dbg !21
  %24 = or disjoint i32 %22, 1, !dbg !21
  %25 = or disjoint i32 %21, 2, !dbg !22
  %26 = or disjoint i32 %22, 2, !dbg !22
  %27 = add i32 %21, 30, !dbg !23
  %28 = add i32 %22, 30, !dbg !23
  %29 = add i32 %21, 31, !dbg !24
  %30 = add i32 %22, 31, !dbg !24
  %31 = add i32 %21, 32, !dbg !25
  %32 = add i32 %22, 32, !dbg !25
  %33 = insertelement <2 x i32> poison, i32 %10, i64 0, !dbg !26
  %34 = insertelement <2 x i32> %33, i32 %13, i64 1, !dbg !26
  %35 = srem <2 x i32> %34, splat (i32 15), !dbg !26
  %36 = extractelement <2 x i32> %35, i64 1, !dbg !27
  %37 = icmp sgt i32 %36, -1, !dbg !28
  %38 = extractelement <2 x i32> %35, i64 0, !dbg !27
  %39 = shl nsw i32 %38, 1, !dbg !29
  %40 = icmp sgt i32 %38, -1, !dbg !30
  %41 = or i32 %36, %38, !dbg !27
  %42 = icmp sgt i32 %41, -1, !dbg !27
  %43 = add i32 %21, %39, !dbg !31
  %44 = sext i32 %43 to i64, !dbg !32
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !32
  %46 = and i1 %12, %42, !dbg !33
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %45, i1 %46, i32 -8388608, i1 %46) #1, !dbg !34
  %48 = add i32 %23, %39, !dbg !35
  %49 = sext i32 %48 to i64, !dbg !36
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !36
  %51 = add nsw <2 x i32> %35, splat (i32 1), !dbg !37
  %52 = icmp ult <2 x i32> %51, splat (i32 15), !dbg !37
  %53 = extractelement <2 x i1> %52, i64 0, !dbg !38
  %54 = and i1 %37, %53, !dbg !38
  %55 = add i32 %25, %39, !dbg !39
  %56 = sext i32 %55 to i64, !dbg !40
  %57 = getelementptr float, ptr addrspace(1) %0, i64 %56, !dbg !40
  %58 = and i1 %12, %54, !dbg !41
  %59 = add i32 %27, %39, !dbg !42
  %60 = sext i32 %59 to i64, !dbg !43
  %61 = getelementptr float, ptr addrspace(1) %0, i64 %60, !dbg !43
  %62 = add i32 %29, %39, !dbg !44
  %63 = sext i32 %62 to i64, !dbg !45
  %64 = getelementptr float, ptr addrspace(1) %0, i64 %63, !dbg !45
  %65 = add i32 %31, %39, !dbg !46
  %66 = sext i32 %65 to i64, !dbg !47
  %67 = getelementptr float, ptr addrspace(1) %0, i64 %66, !dbg !47
  %68 = insertelement <2 x i32> poison, i32 %11, i64 0, !dbg !26
  %69 = insertelement <2 x i32> %68, i32 %14, i64 1, !dbg !26
  %70 = srem <2 x i32> %69, splat (i32 15), !dbg !26
  %71 = extractelement <2 x i32> %70, i64 1, !dbg !27
  %72 = icmp sgt i32 %71, -1, !dbg !28
  %73 = extractelement <2 x i32> %70, i64 0, !dbg !27
  %74 = shl nsw i32 %73, 1, !dbg !29
  %75 = icmp sgt i32 %73, -1, !dbg !30
  %76 = or i32 %71, %73, !dbg !27
  %77 = icmp sgt i32 %76, -1, !dbg !27
  %78 = add i32 %22, %74, !dbg !31
  %79 = sext i32 %78 to i64, !dbg !32
  %80 = getelementptr float, ptr addrspace(1) %0, i64 %79, !dbg !32
  %81 = and i1 %77, %12, !dbg !33
  %82 = add i32 %24, %74, !dbg !35
  %83 = sext i32 %82 to i64, !dbg !36
  %84 = getelementptr float, ptr addrspace(1) %0, i64 %83, !dbg !36
  %85 = add nsw <2 x i32> %70, splat (i32 1), !dbg !37
  %86 = icmp ult <2 x i32> %85, splat (i32 15), !dbg !37
  %87 = extractelement <2 x i1> %86, i64 0, !dbg !38
  %88 = and i1 %72, %87, !dbg !38
  %89 = add i32 %26, %74, !dbg !39
  %90 = sext i32 %89 to i64, !dbg !40
  %91 = getelementptr float, ptr addrspace(1) %0, i64 %90, !dbg !40
  %92 = and i1 %88, %12, !dbg !41
  %93 = add i32 %28, %74, !dbg !42
  %94 = sext i32 %93 to i64, !dbg !43
  %95 = getelementptr float, ptr addrspace(1) %0, i64 %94, !dbg !43
  %96 = add i32 %30, %74, !dbg !44
  %97 = sext i32 %96 to i64, !dbg !45
  %98 = getelementptr float, ptr addrspace(1) %0, i64 %97, !dbg !45
  %99 = add i32 %32, %74, !dbg !46
  %100 = sext i32 %99 to i64, !dbg !47
  %101 = getelementptr float, ptr addrspace(1) %0, i64 %100, !dbg !47
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %80, i1 %81, i32 -8388608, i1 %81) #1, !dbg !34
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %50, i1 %46, i32 -8388608, i1 %46) #1, !dbg !48
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %84, i1 %81, i32 -8388608, i1 %81) #1, !dbg !48
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %57, i1 %58, i32 -8388608, i1 %58) #1, !dbg !49
  %106 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %91, i1 %92, i32 -8388608, i1 %92) #1, !dbg !49
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %61, i1 %46, i32 -8388608, i1 %46) #1, !dbg !50
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %95, i1 %81, i32 -8388608, i1 %81) #1, !dbg !50
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %64, i1 %46, i32 -8388608, i1 %46) #1, !dbg !51
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %98, i1 %81, i32 -8388608, i1 %81) #1, !dbg !51
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %67, i1 %58, i32 -8388608, i1 %58) #1, !dbg !52
  %112 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %101, i1 %92, i32 -8388608, i1 %92) #1, !dbg !52
  %113 = extractelement <2 x i1> %52, i64 1, !dbg !53
  %114 = and i1 %40, %113, !dbg !53
  %115 = extractelement <2 x i1> %86, i64 1, !dbg !53
  %116 = and i1 %75, %115, !dbg !53
  %117 = add i32 %21, 60, !dbg !54
  %118 = add i32 %117, %39, !dbg !55
  %119 = add i32 %22, 60, !dbg !54
  %120 = add i32 %119, %74, !dbg !55
  %121 = sext i32 %118 to i64, !dbg !56
  %122 = getelementptr float, ptr addrspace(1) %0, i64 %121, !dbg !56
  %123 = sext i32 %120 to i64, !dbg !56
  %124 = getelementptr float, ptr addrspace(1) %0, i64 %123, !dbg !56
  %125 = and i1 %12, %114, !dbg !57
  %126 = and i1 %116, %12, !dbg !57
  %127 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %122, i1 %125, i32 -8388608, i1 %125) #1, !dbg !58
  %128 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %124, i1 %126, i32 -8388608, i1 %126) #1, !dbg !58
  %129 = add i32 %21, 61, !dbg !59
  %130 = add i32 %129, %39, !dbg !60
  %131 = add i32 %22, 61, !dbg !59
  %132 = add i32 %131, %74, !dbg !60
  %133 = sext i32 %130 to i64, !dbg !61
  %134 = getelementptr float, ptr addrspace(1) %0, i64 %133, !dbg !61
  %135 = sext i32 %132 to i64, !dbg !61
  %136 = getelementptr float, ptr addrspace(1) %0, i64 %135, !dbg !61
  %137 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %134, i1 %125, i32 -8388608, i1 %125) #1, !dbg !62
  %138 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %136, i1 %126, i32 -8388608, i1 %126) #1, !dbg !62
  %139 = and i1 %53, %113, !dbg !63
  %140 = and i1 %87, %115, !dbg !63
  %141 = add i32 %21, 62, !dbg !64
  %142 = add i32 %141, %39, !dbg !65
  %143 = add i32 %22, 62, !dbg !64
  %144 = add i32 %143, %74, !dbg !65
  %145 = sext i32 %142 to i64, !dbg !66
  %146 = getelementptr float, ptr addrspace(1) %0, i64 %145, !dbg !66
  %147 = sext i32 %144 to i64, !dbg !66
  %148 = getelementptr float, ptr addrspace(1) %0, i64 %147, !dbg !66
  %149 = and i1 %12, %139, !dbg !67
  %150 = and i1 %140, %12, !dbg !67
  %151 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %146, i1 %149, i32 -8388608, i1 %149) #1, !dbg !68
  %152 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %148, i1 %150, i32 -8388608, i1 %150) #1, !dbg !68
  %153 = insertelement <2 x i32> poison, i32 %47, i64 0, !dbg !34
  %154 = insertelement <2 x i32> %153, i32 %102, i64 1, !dbg !34
  %155 = bitcast <2 x i32> %154 to <2 x float>, !dbg !34
  %156 = insertelement <2 x i32> poison, i32 %103, i64 0, !dbg !48
  %157 = insertelement <2 x i32> %156, i32 %104, i64 1, !dbg !48
  %158 = bitcast <2 x i32> %157 to <2 x float>, !dbg !48
  %159 = fcmp ogt <2 x float> %158, %155, !dbg !69
  %160 = fcmp uno <2 x float> %158, zeroinitializer, !dbg !73
  %161 = or <2 x i1> %159, %160, !dbg !74
  %.v = select <2 x i1> %161, <2 x i32> %157, <2 x i32> %154, !dbg !75
  %162 = bitcast <2 x i32> %.v to <2 x float>, !dbg !75
  %163 = insertelement <2 x i32> poison, i32 %105, i64 0, !dbg !49
  %164 = insertelement <2 x i32> %163, i32 %106, i64 1, !dbg !49
  %165 = bitcast <2 x i32> %164 to <2 x float>, !dbg !49
  %166 = fcmp olt <2 x float> %162, %165, !dbg !76
  %167 = fcmp uno <2 x float> %165, zeroinitializer, !dbg !78
  %168 = or <2 x i1> %167, %166, !dbg !79
  %.v1 = select <2 x i1> %168, <2 x i32> %164, <2 x i32> %.v, !dbg !80
  %169 = bitcast <2 x i32> %.v1 to <2 x float>, !dbg !80
  %170 = insertelement <2 x i32> poison, i32 %107, i64 0, !dbg !50
  %171 = insertelement <2 x i32> %170, i32 %108, i64 1, !dbg !50
  %172 = bitcast <2 x i32> %171 to <2 x float>, !dbg !50
  %173 = fcmp olt <2 x float> %169, %172, !dbg !81
  %174 = fcmp uno <2 x float> %172, zeroinitializer, !dbg !83
  %175 = or <2 x i1> %174, %173, !dbg !84
  %.v2 = select <2 x i1> %175, <2 x i32> %171, <2 x i32> %.v1, !dbg !85
  %176 = bitcast <2 x i32> %.v2 to <2 x float>, !dbg !85
  %177 = insertelement <2 x i32> poison, i32 %109, i64 0, !dbg !51
  %178 = insertelement <2 x i32> %177, i32 %110, i64 1, !dbg !51
  %179 = bitcast <2 x i32> %178 to <2 x float>, !dbg !51
  %180 = fcmp olt <2 x float> %176, %179, !dbg !86
  %181 = fcmp uno <2 x float> %179, zeroinitializer, !dbg !88
  %182 = or <2 x i1> %181, %180, !dbg !89
  %.v3 = select <2 x i1> %182, <2 x i32> %178, <2 x i32> %.v2, !dbg !90
  %183 = bitcast <2 x i32> %.v3 to <2 x float>, !dbg !90
  %184 = insertelement <2 x i32> poison, i32 %111, i64 0, !dbg !52
  %185 = insertelement <2 x i32> %184, i32 %112, i64 1, !dbg !52
  %186 = bitcast <2 x i32> %185 to <2 x float>, !dbg !52
  %187 = fcmp olt <2 x float> %183, %186, !dbg !91
  %188 = fcmp uno <2 x float> %186, zeroinitializer, !dbg !93
  %189 = or <2 x i1> %188, %187, !dbg !94
  %.v4 = select <2 x i1> %189, <2 x i32> %185, <2 x i32> %.v3, !dbg !95
  %190 = bitcast <2 x i32> %.v4 to <2 x float>, !dbg !95
  %191 = insertelement <2 x i32> poison, i32 %127, i64 0, !dbg !58
  %192 = insertelement <2 x i32> %191, i32 %128, i64 1, !dbg !58
  %193 = bitcast <2 x i32> %192 to <2 x float>, !dbg !58
  %194 = fcmp olt <2 x float> %190, %193, !dbg !96
  %195 = fcmp uno <2 x float> %193, zeroinitializer, !dbg !98
  %196 = or <2 x i1> %195, %194, !dbg !99
  %.v5 = select <2 x i1> %196, <2 x i32> %192, <2 x i32> %.v4, !dbg !100
  %197 = bitcast <2 x i32> %.v5 to <2 x float>, !dbg !100
  %198 = insertelement <2 x i32> poison, i32 %137, i64 0, !dbg !62
  %199 = insertelement <2 x i32> %198, i32 %138, i64 1, !dbg !62
  %200 = bitcast <2 x i32> %199 to <2 x float>, !dbg !62
  %201 = fcmp olt <2 x float> %197, %200, !dbg !101
  %202 = fcmp uno <2 x float> %200, zeroinitializer, !dbg !103
  %203 = or <2 x i1> %202, %201, !dbg !104
  %.v6 = select <2 x i1> %203, <2 x i32> %199, <2 x i32> %.v5, !dbg !105
  %204 = bitcast <2 x i32> %.v6 to <2 x float>, !dbg !105
  %205 = insertelement <2 x i32> poison, i32 %151, i64 0, !dbg !68
  %206 = insertelement <2 x i32> %205, i32 %152, i64 1, !dbg !68
  %207 = bitcast <2 x i32> %206 to <2 x float>, !dbg !68
  %208 = fcmp olt <2 x float> %204, %207, !dbg !106
  %209 = bitcast i32 %151 to float, !dbg !108
  %210 = fcmp uno float %209, 0.000000e+00, !dbg !108
  %211 = bitcast i32 %152 to float, !dbg !108
  %212 = fcmp uno float %211, 0.000000e+00, !dbg !108
  %213 = extractelement <2 x i1> %208, i64 0, !dbg !109
  %214 = or i1 %210, %213, !dbg !109
  %215 = extractelement <2 x i1> %208, i64 1, !dbg !109
  %216 = or i1 %212, %215, !dbg !109
  %217 = zext <2 x i1> %159 to <2 x i8>, !dbg !110
  %218 = select <2 x i1> %166, <2 x i8> splat (i8 2), <2 x i8> %217, !dbg !111
  %219 = select <2 x i1> %173, <2 x i8> splat (i8 3), <2 x i8> %218, !dbg !112
  %220 = select <2 x i1> %180, <2 x i8> splat (i8 4), <2 x i8> %219, !dbg !113
  %221 = select <2 x i1> %187, <2 x i8> splat (i8 5), <2 x i8> %220, !dbg !114
  %222 = select <2 x i1> %194, <2 x i8> splat (i8 6), <2 x i8> %221, !dbg !115
  %223 = select <2 x i1> %201, <2 x i8> splat (i8 7), <2 x i8> %222, !dbg !116
  %224 = select <2 x i1> %208, <2 x i8> splat (i8 8), <2 x i8> %223, !dbg !117
  %225 = sext i32 %10 to i64, !dbg !118
  %226 = getelementptr float, ptr addrspace(1) %1, i64 %225, !dbg !118
  %227 = extractelement <2 x i32> %.v6, i64 0, !dbg !119
  %228 = select i1 %214, i32 %151, i32 %227, !dbg !120
  %229 = extractelement <2 x i32> %.v6, i64 1, !dbg !119
  %230 = select i1 %216, i32 %152, i32 %229, !dbg !120
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %228, i32 %230, ptr addrspace(1) %226, i1 %12) #1, !dbg !119
  %231 = getelementptr i8, ptr addrspace(1) %2, i64 %225, !dbg !121
  %232 = bitcast <2 x i8> %224 to i16, !dbg !122
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %232, ptr addrspace(1) %231, i1 %12) #1, !dbg !122
  ret void, !dbg !123
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ce5hmblhslqvdnm5pdece46vw25hxkpxyzbp4v5g6eiyssagy2zw.py", directory: "inductor_cache/e5")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_1, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_1", linkageName: "triton_poi_fused_max_pool2d_with_indices_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 27, column: 27, scope: !7)
!18 = !DILocation(line: 40, column: 41, scope: !7)
!19 = !DILocation(line: 40, column: 51, scope: !7)
!20 = !DILocation(line: 40, column: 38, scope: !7)
!21 = !DILocation(line: 46, column: 42, scope: !7)
!22 = !DILocation(line: 53, column: 42, scope: !7)
!23 = !DILocation(line: 60, column: 43, scope: !7)
!24 = !DILocation(line: 63, column: 43, scope: !7)
!25 = !DILocation(line: 66, column: 43, scope: !7)
!26 = !DILocation(line: 25, column: 19, scope: !7)
!27 = !DILocation(line: 39, column: 19, scope: !7)
!28 = !DILocation(line: 31, column: 19, scope: !7)
!29 = !DILocation(line: 35, column: 13, scope: !7)
!30 = !DILocation(line: 36, column: 19, scope: !7)
!31 = !DILocation(line: 40, column: 46, scope: !7)
!32 = !DILocation(line: 40, column: 31, scope: !7)
!33 = !DILocation(line: 40, column: 64, scope: !7)
!34 = !DILocation(line: 40, column: 56, scope: !7)
!35 = !DILocation(line: 46, column: 50, scope: !7)
!36 = !DILocation(line: 46, column: 31, scope: !7)
!37 = !DILocation(line: 51, column: 20, scope: !7)
!38 = !DILocation(line: 52, column: 19, scope: !7)
!39 = !DILocation(line: 53, column: 50, scope: !7)
!40 = !DILocation(line: 53, column: 31, scope: !7)
!41 = !DILocation(line: 53, column: 68, scope: !7)
!42 = !DILocation(line: 60, column: 51, scope: !7)
!43 = !DILocation(line: 60, column: 31, scope: !7)
!44 = !DILocation(line: 63, column: 51, scope: !7)
!45 = !DILocation(line: 63, column: 31, scope: !7)
!46 = !DILocation(line: 66, column: 51, scope: !7)
!47 = !DILocation(line: 66, column: 31, scope: !7)
!48 = !DILocation(line: 46, column: 60, scope: !7)
!49 = !DILocation(line: 53, column: 60, scope: !7)
!50 = !DILocation(line: 60, column: 61, scope: !7)
!51 = !DILocation(line: 63, column: 61, scope: !7)
!52 = !DILocation(line: 66, column: 61, scope: !7)
!53 = !DILocation(line: 72, column: 20, scope: !7)
!54 = !DILocation(line: 73, column: 43, scope: !7)
!55 = !DILocation(line: 73, column: 51, scope: !7)
!56 = !DILocation(line: 73, column: 31, scope: !7)
!57 = !DILocation(line: 73, column: 69, scope: !7)
!58 = !DILocation(line: 73, column: 61, scope: !7)
!59 = !DILocation(line: 76, column: 43, scope: !7)
!60 = !DILocation(line: 76, column: 51, scope: !7)
!61 = !DILocation(line: 76, column: 31, scope: !7)
!62 = !DILocation(line: 76, column: 61, scope: !7)
!63 = !DILocation(line: 78, column: 20, scope: !7)
!64 = !DILocation(line: 79, column: 43, scope: !7)
!65 = !DILocation(line: 79, column: 51, scope: !7)
!66 = !DILocation(line: 79, column: 31, scope: !7)
!67 = !DILocation(line: 79, column: 69, scope: !7)
!68 = !DILocation(line: 79, column: 61, scope: !7)
!69 = !DILocation(line: 118, column: 15, scope: !70, inlinedAt: !72)
!70 = distinct !DILexicalBlockFile(scope: !7, file: !71, discriminator: 0)
!71 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!72 = !DILocation(line: 47, column: 42, scope: !7)
!73 = !DILocation(line: 120, column: 21, scope: !70, inlinedAt: !72)
!74 = !DILocation(line: 120, column: 16, scope: !70, inlinedAt: !72)
!75 = !DILocation(line: 121, column: 29, scope: !70, inlinedAt: !72)
!76 = !DILocation(line: 118, column: 15, scope: !70, inlinedAt: !77)
!77 = !DILocation(line: 54, column: 42, scope: !7)
!78 = !DILocation(line: 120, column: 21, scope: !70, inlinedAt: !77)
!79 = !DILocation(line: 120, column: 16, scope: !70, inlinedAt: !77)
!80 = !DILocation(line: 121, column: 29, scope: !70, inlinedAt: !77)
!81 = !DILocation(line: 118, column: 15, scope: !70, inlinedAt: !82)
!82 = !DILocation(line: 61, column: 42, scope: !7)
!83 = !DILocation(line: 120, column: 21, scope: !70, inlinedAt: !82)
!84 = !DILocation(line: 120, column: 16, scope: !70, inlinedAt: !82)
!85 = !DILocation(line: 121, column: 29, scope: !70, inlinedAt: !82)
!86 = !DILocation(line: 118, column: 15, scope: !70, inlinedAt: !87)
!87 = !DILocation(line: 64, column: 42, scope: !7)
!88 = !DILocation(line: 120, column: 21, scope: !70, inlinedAt: !87)
!89 = !DILocation(line: 120, column: 16, scope: !70, inlinedAt: !87)
!90 = !DILocation(line: 121, column: 29, scope: !70, inlinedAt: !87)
!91 = !DILocation(line: 118, column: 15, scope: !70, inlinedAt: !92)
!92 = !DILocation(line: 67, column: 42, scope: !7)
!93 = !DILocation(line: 120, column: 21, scope: !70, inlinedAt: !92)
!94 = !DILocation(line: 120, column: 16, scope: !70, inlinedAt: !92)
!95 = !DILocation(line: 121, column: 29, scope: !70, inlinedAt: !92)
!96 = !DILocation(line: 118, column: 15, scope: !70, inlinedAt: !97)
!97 = !DILocation(line: 74, column: 42, scope: !7)
!98 = !DILocation(line: 120, column: 21, scope: !70, inlinedAt: !97)
!99 = !DILocation(line: 120, column: 16, scope: !70, inlinedAt: !97)
!100 = !DILocation(line: 121, column: 29, scope: !70, inlinedAt: !97)
!101 = !DILocation(line: 118, column: 15, scope: !70, inlinedAt: !102)
!102 = !DILocation(line: 77, column: 42, scope: !7)
!103 = !DILocation(line: 120, column: 21, scope: !70, inlinedAt: !102)
!104 = !DILocation(line: 120, column: 16, scope: !70, inlinedAt: !102)
!105 = !DILocation(line: 121, column: 29, scope: !70, inlinedAt: !102)
!106 = !DILocation(line: 118, column: 15, scope: !70, inlinedAt: !107)
!107 = !DILocation(line: 80, column: 42, scope: !7)
!108 = !DILocation(line: 120, column: 21, scope: !70, inlinedAt: !107)
!109 = !DILocation(line: 120, column: 16, scope: !70, inlinedAt: !107)
!110 = !DILocation(line: 84, column: 35, scope: !7)
!111 = !DILocation(line: 87, column: 35, scope: !7)
!112 = !DILocation(line: 90, column: 35, scope: !7)
!113 = !DILocation(line: 93, column: 35, scope: !7)
!114 = !DILocation(line: 96, column: 35, scope: !7)
!115 = !DILocation(line: 99, column: 35, scope: !7)
!116 = !DILocation(line: 102, column: 35, scope: !7)
!117 = !DILocation(line: 105, column: 35, scope: !7)
!118 = !DILocation(line: 106, column: 25, scope: !7)
!119 = !DILocation(line: 106, column: 37, scope: !7)
!120 = !DILocation(line: 121, column: 29, scope: !70, inlinedAt: !107)
!121 = !DILocation(line: 107, column: 25, scope: !7)
!122 = !DILocation(line: 107, column: 37, scope: !7)
!123 = !DILocation(line: 107, column: 4, scope: !7)
