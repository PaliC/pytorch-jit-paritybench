; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_3(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %6 = shl i32 %5, 5, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 2, !dbg !12
  %9 = and i32 %8, 28, !dbg !12
  %10 = lshr i32 %7, 3, !dbg !12
  %11 = and i32 %10, 15, !dbg !12
  %12 = or disjoint i32 %11, 16, !dbg !12
  %13 = or disjoint i32 %6, %9, !dbg !13
  %14 = or disjoint i32 %6, %11, !dbg !13
  %15 = or disjoint i32 %6, %12, !dbg !13
  %16 = icmp slt i32 %13, 512, !dbg !14
  %17 = icmp slt i32 %14, 512, !dbg !14
  %18 = icmp slt i32 %15, 512, !dbg !14
  %19 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %20 = shl i32 %19, 5, !dbg !16
  %21 = or disjoint i32 %20, %11, !dbg !17
  %22 = or disjoint i32 %20, %12, !dbg !17
  %23 = or disjoint i32 %20, %9, !dbg !17
  %24 = icmp slt i32 %21, 64, !dbg !18
  %25 = icmp slt i32 %22, 64, !dbg !18
  %26 = icmp slt i32 %23, 64, !dbg !18
  %.frozen = freeze i32 %13, !dbg !19
  %27 = sdiv i32 %.frozen, 128, !dbg !19
  %28 = mul i32 %27, 128, !dbg !20
  %.decomposed = sub i32 %.frozen, %28, !dbg !20
  %29 = shl i32 %21, 7, !dbg !21
  %30 = shl i32 %22, 7, !dbg !21
  %31 = shl i32 %27, 13, !dbg !22
  %32 = add i32 %31, %.decomposed, !dbg !23
  %33 = add i32 %32, %29, !dbg !24
  %34 = add i32 %32, %30, !dbg !24
  %35 = sext i32 %33 to i64, !dbg !25
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !25
  %37 = sext i32 %34 to i64, !dbg !25
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !25
  %39 = and i1 %16, %24, !dbg !26
  %40 = and i1 %16, %25, !dbg !26
  %41 = and i1 %17, %26, !dbg !26
  %42 = and i1 %18, %26, !dbg !26
  %43 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %36, i1 %39) #2, !dbg !27
  %44 = extractvalue { i32, i32, i32, i32 } %43, 0, !dbg !27
  %45 = extractvalue { i32, i32, i32, i32 } %43, 1, !dbg !27
  %46 = extractvalue { i32, i32, i32, i32 } %43, 2, !dbg !27
  %47 = extractvalue { i32, i32, i32, i32 } %43, 3, !dbg !27
  %48 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %38, i1 %40) #2, !dbg !27
  %49 = extractvalue { i32, i32, i32, i32 } %48, 0, !dbg !27
  %50 = extractvalue { i32, i32, i32, i32 } %48, 1, !dbg !27
  %51 = extractvalue { i32, i32, i32, i32 } %48, 2, !dbg !27
  %52 = extractvalue { i32, i32, i32, i32 } %48, 3, !dbg !27
  %53 = shl i32 %14, 6, !dbg !28
  %54 = shl i32 %15, 6, !dbg !28
  %55 = add i32 %23, %53, !dbg !29
  %56 = add i32 %23, %54, !dbg !29
  %57 = sext i32 %55 to i64, !dbg !30
  %58 = getelementptr float, ptr addrspace(1) %1, i64 %57, !dbg !30
  %59 = sext i32 %56 to i64, !dbg !30
  %60 = getelementptr float, ptr addrspace(1) %1, i64 %59, !dbg !30
  %61 = shl i32 %7, 7, !dbg !31
  %62 = and i32 %61, 896, !dbg !31
  %63 = or disjoint i32 %62, %11, !dbg !31
  %64 = and i32 %8, 508, !dbg !31
  %65 = lshr exact i32 %62, 3, !dbg !31
  %66 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %65, !dbg !31
  %67 = getelementptr float, ptr addrspace(3) %66, i32 %63, !dbg !31
  %68 = insertelement <1 x i32> poison, i32 %44, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %67, <1 x i32> %68, i1 true) #2, !dbg !31
  %69 = or disjoint i32 %63, 32, !dbg !31
  %70 = lshr i32 %69, 5, !dbg !31
  %71 = getelementptr float, ptr addrspace(3) @global_smem, i32 %70, !dbg !31
  %72 = getelementptr float, ptr addrspace(3) %71, i32 %69, !dbg !31
  %73 = insertelement <1 x i32> poison, i32 %45, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %72, <1 x i32> %73, i1 true) #2, !dbg !31
  %74 = or disjoint i32 %63, 64, !dbg !31
  %75 = lshr i32 %74, 5, !dbg !31
  %76 = getelementptr float, ptr addrspace(3) @global_smem, i32 %75, !dbg !31
  %77 = getelementptr float, ptr addrspace(3) %76, i32 %74, !dbg !31
  %78 = insertelement <1 x i32> poison, i32 %46, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %77, <1 x i32> %78, i1 true) #2, !dbg !31
  %79 = or disjoint i32 %63, 96, !dbg !31
  %80 = lshr i32 %79, 5, !dbg !31
  %81 = getelementptr float, ptr addrspace(3) @global_smem, i32 %80, !dbg !31
  %82 = getelementptr float, ptr addrspace(3) %81, i32 %79, !dbg !31
  %83 = insertelement <1 x i32> poison, i32 %47, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %82, <1 x i32> %83, i1 true) #2, !dbg !31
  %84 = or disjoint i32 %63, 16, !dbg !31
  %85 = getelementptr float, ptr addrspace(3) %66, i32 %84, !dbg !31
  %86 = insertelement <1 x i32> poison, i32 %49, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %85, <1 x i32> %86, i1 true) #2, !dbg !31
  %87 = or disjoint i32 %63, 48, !dbg !31
  %88 = lshr i32 %87, 5, !dbg !31
  %89 = getelementptr float, ptr addrspace(3) @global_smem, i32 %88, !dbg !31
  %90 = getelementptr float, ptr addrspace(3) %89, i32 %87, !dbg !31
  %91 = insertelement <1 x i32> poison, i32 %50, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %90, <1 x i32> %91, i1 true) #2, !dbg !31
  %92 = or disjoint i32 %63, 80, !dbg !31
  %93 = lshr i32 %92, 5, !dbg !31
  %94 = getelementptr float, ptr addrspace(3) @global_smem, i32 %93, !dbg !31
  %95 = getelementptr float, ptr addrspace(3) %94, i32 %92, !dbg !31
  %96 = insertelement <1 x i32> poison, i32 %51, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %95, <1 x i32> %96, i1 true) #2, !dbg !31
  %97 = or disjoint i32 %63, 112, !dbg !31
  %98 = lshr i32 %97, 5, !dbg !31
  %99 = getelementptr float, ptr addrspace(3) @global_smem, i32 %98, !dbg !31
  %100 = getelementptr float, ptr addrspace(3) %99, i32 %97, !dbg !31
  %101 = insertelement <1 x i32> poison, i32 %52, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %100, <1 x i32> %101, i1 true) #2, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %102 = lshr i32 %64, 5, !dbg !31
  %103 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %102, !dbg !31
  %104 = getelementptr inbounds float, ptr addrspace(3) %103, i32 %64, !dbg !31
  %105 = load i32, ptr addrspace(3) %104, align 4, !dbg !31
  %106 = or disjoint i32 %64, 1, !dbg !31
  %107 = getelementptr inbounds float, ptr addrspace(3) %103, i32 %106, !dbg !31
  %108 = load i32, ptr addrspace(3) %107, align 4, !dbg !31
  %109 = or disjoint i32 %64, 2, !dbg !31
  %110 = getelementptr inbounds float, ptr addrspace(3) %103, i32 %109, !dbg !31
  %111 = load i32, ptr addrspace(3) %110, align 4, !dbg !31
  %112 = or disjoint i32 %64, 3, !dbg !31
  %113 = getelementptr inbounds float, ptr addrspace(3) %103, i32 %112, !dbg !31
  %114 = load i32, ptr addrspace(3) %113, align 4, !dbg !31
  %115 = or disjoint i32 %64, 512, !dbg !31
  %116 = lshr i32 %115, 5, !dbg !31
  %117 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %116, !dbg !31
  %118 = getelementptr inbounds float, ptr addrspace(3) %117, i32 %115, !dbg !31
  %119 = load i32, ptr addrspace(3) %118, align 4, !dbg !31
  %120 = or disjoint i32 %64, 513, !dbg !31
  %121 = lshr i32 %120, 5, !dbg !31
  %122 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %121, !dbg !31
  %123 = getelementptr inbounds float, ptr addrspace(3) %122, i32 %120, !dbg !31
  %124 = load i32, ptr addrspace(3) %123, align 4, !dbg !31
  %125 = or disjoint i32 %64, 514, !dbg !31
  %126 = lshr i32 %125, 5, !dbg !31
  %127 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %126, !dbg !31
  %128 = getelementptr inbounds float, ptr addrspace(3) %127, i32 %125, !dbg !31
  %129 = load i32, ptr addrspace(3) %128, align 4, !dbg !31
  %130 = or disjoint i32 %64, 515, !dbg !31
  %131 = lshr i32 %130, 5, !dbg !31
  %132 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %131, !dbg !31
  %133 = getelementptr inbounds float, ptr addrspace(3) %132, i32 %130, !dbg !31
  %134 = load i32, ptr addrspace(3) %133, align 4, !dbg !31
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %105, i32 %108, i32 %111, i32 %114, ptr addrspace(1) %58, i1 %41) #2, !dbg !31
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %119, i32 %124, i32 %129, i32 %134, ptr addrspace(1) %60, i1 %42) #2, !dbg !31
  ret void, !dbg !32
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cbi6ghtojphvozrbxlmnqjnbzwhon3wpvcz4r3r7zau2p6gyhevh.py", directory: "inductor_cache/bi")
!4 = !{ptr @triton_poi_fused_convolution_3, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_3, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_3", linkageName: "triton_poi_fused_convolution_3", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 39, scope: !7)
!22 = !DILocation(line: 32, column: 49, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 44, scope: !7)
!25 = !DILocation(line: 32, column: 30, scope: !7)
!26 = !DILocation(line: 32, column: 62, scope: !7)
!27 = !DILocation(line: 32, column: 54, scope: !7)
!28 = !DILocation(line: 33, column: 33, scope: !7)
!29 = !DILocation(line: 33, column: 30, scope: !7)
!30 = !DILocation(line: 33, column: 25, scope: !7)
!31 = !DILocation(line: 33, column: 44, scope: !7)
!32 = !DILocation(line: 33, column: 4, scope: !7)
