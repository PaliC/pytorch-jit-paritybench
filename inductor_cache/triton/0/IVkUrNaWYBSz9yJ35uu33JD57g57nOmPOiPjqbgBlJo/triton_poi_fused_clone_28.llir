; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_clone_28(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %6 = shl i32 %5, 10, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 2, !dbg !12
  %9 = and i32 %8, 508, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = or disjoint i32 %10, 512, !dbg !13
  %.frozen = freeze i32 %10, !dbg !14
  %12 = sdiv i32 %.frozen, 512, !dbg !14
  %13 = mul i32 %12, 512, !dbg !15
  %.decomposed = sub i32 %.frozen, %13, !dbg !15
  %14 = sdiv i32 %11, 512, !dbg !14
  %15 = srem i32 %12, 64, !dbg !16
  %16 = srem i32 %14, 64, !dbg !16
  %17 = sdiv i32 %10, 32768, !dbg !17
  %18 = sdiv i32 %11, 32768, !dbg !17
  %19 = shl nsw i32 %17, 9, !dbg !18
  %20 = shl nsw i32 %18, 9, !dbg !18
  %21 = add nsw i32 %19, %.decomposed, !dbg !19
  %22 = add nsw i32 %20, %.decomposed, !dbg !19
  %23 = mul nsw i32 %15, 1536, !dbg !20
  %24 = mul nsw i32 %16, 1536, !dbg !20
  %25 = add nsw i32 %21, %23, !dbg !21
  %26 = add nsw i32 %22, %24, !dbg !21
  %27 = sext i32 %25 to i64, !dbg !22
  %28 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !22
  %29 = sext i32 %26 to i64, !dbg !22
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !22
  %31 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %28, i1 true) #1, !dbg !23
  %32 = extractvalue { i32, i32, i32, i32 } %31, 0, !dbg !23
  %33 = extractvalue { i32, i32, i32, i32 } %31, 1, !dbg !23
  %34 = extractvalue { i32, i32, i32, i32 } %31, 2, !dbg !23
  %35 = extractvalue { i32, i32, i32, i32 } %31, 3, !dbg !23
  %36 = bitcast i32 %32 to float, !dbg !23
  %37 = bitcast i32 %33 to float, !dbg !23
  %38 = bitcast i32 %34 to float, !dbg !23
  %39 = bitcast i32 %35 to float, !dbg !23
  %40 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %30, i1 true) #1, !dbg !23
  %41 = extractvalue { i32, i32, i32, i32 } %40, 0, !dbg !23
  %42 = extractvalue { i32, i32, i32, i32 } %40, 1, !dbg !23
  %43 = extractvalue { i32, i32, i32, i32 } %40, 2, !dbg !23
  %44 = extractvalue { i32, i32, i32, i32 } %40, 3, !dbg !23
  %45 = bitcast i32 %41 to float, !dbg !23
  %46 = bitcast i32 %42 to float, !dbg !23
  %47 = bitcast i32 %43 to float, !dbg !23
  %48 = bitcast i32 %44 to float, !dbg !23
  %49 = sext i32 %21 to i64, !dbg !24
  %50 = getelementptr float, ptr addrspace(1) %1, i64 %49, !dbg !24
  %51 = sext i32 %22 to i64, !dbg !24
  %52 = getelementptr float, ptr addrspace(1) %1, i64 %51, !dbg !24
  %53 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %50, i1 true) #1, !dbg !25
  %54 = extractvalue { i32, i32, i32, i32 } %53, 0, !dbg !25
  %55 = extractvalue { i32, i32, i32, i32 } %53, 1, !dbg !25
  %56 = extractvalue { i32, i32, i32, i32 } %53, 2, !dbg !25
  %57 = extractvalue { i32, i32, i32, i32 } %53, 3, !dbg !25
  %58 = bitcast i32 %54 to float, !dbg !25
  %59 = bitcast i32 %55 to float, !dbg !25
  %60 = bitcast i32 %56 to float, !dbg !25
  %61 = bitcast i32 %57 to float, !dbg !25
  %62 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %52, i1 true) #1, !dbg !25
  %63 = extractvalue { i32, i32, i32, i32 } %62, 0, !dbg !25
  %64 = extractvalue { i32, i32, i32, i32 } %62, 1, !dbg !25
  %65 = extractvalue { i32, i32, i32, i32 } %62, 2, !dbg !25
  %66 = extractvalue { i32, i32, i32, i32 } %62, 3, !dbg !25
  %67 = bitcast i32 %63 to float, !dbg !25
  %68 = bitcast i32 %64 to float, !dbg !25
  %69 = bitcast i32 %65 to float, !dbg !25
  %70 = bitcast i32 %66 to float, !dbg !25
  %71 = fadd float %36, %58, !dbg !26
  %72 = fadd float %37, %59, !dbg !26
  %73 = fadd float %38, %60, !dbg !26
  %74 = fadd float %39, %61, !dbg !26
  %75 = fadd float %45, %67, !dbg !26
  %76 = fadd float %46, %68, !dbg !26
  %77 = fadd float %47, %69, !dbg !26
  %78 = fadd float %48, %70, !dbg !26
  %79 = sext i32 %10 to i64, !dbg !27
  %80 = getelementptr float, ptr addrspace(1) %2, i64 %79, !dbg !27
  %81 = sext i32 %11 to i64, !dbg !27
  %82 = getelementptr float, ptr addrspace(1) %2, i64 %81, !dbg !27
  %83 = bitcast float %71 to i32, !dbg !28
  %84 = bitcast float %72 to i32, !dbg !28
  %85 = bitcast float %73 to i32, !dbg !28
  %86 = bitcast float %74 to i32, !dbg !28
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %83, i32 %84, i32 %85, i32 %86, ptr addrspace(1) %80, i1 true) #1, !dbg !28
  %87 = bitcast float %75 to i32, !dbg !28
  %88 = bitcast float %76 to i32, !dbg !28
  %89 = bitcast float %77 to i32, !dbg !28
  %90 = bitcast float %78 to i32, !dbg !28
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %87, i32 %88, i32 %89, i32 %90, ptr addrspace(1) %82, i1 true) #1, !dbg !28
  ret void, !dbg !29
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cctcdg2ertgdsu7tpr4c2jxiqzxt5fc4v3mrot5dxgrgxeuess2y.py", directory: "inductor_cache/ct")
!4 = !{ptr @triton_poi_fused_clone_28, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_clone_28, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_clone_28", linkageName: "triton_poi_fused_clone_28", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 25, column: 28, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 39, scope: !7)
!19 = !DILocation(line: 28, column: 35, scope: !7)
!20 = !DILocation(line: 28, column: 49, scope: !7)
!21 = !DILocation(line: 28, column: 44, scope: !7)
!22 = !DILocation(line: 28, column: 30, scope: !7)
!23 = !DILocation(line: 28, column: 54, scope: !7)
!24 = !DILocation(line: 29, column: 30, scope: !7)
!25 = !DILocation(line: 29, column: 44, scope: !7)
!26 = !DILocation(line: 30, column: 18, scope: !7)
!27 = !DILocation(line: 31, column: 25, scope: !7)
!28 = !DILocation(line: 31, column: 36, scope: !7)
!29 = !DILocation(line: 31, column: 4, scope: !7)
