; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_stack_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, i32 %12) local_unnamed_addr !dbg !7 {
  %14 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %15 = shl i32 %14, 8, !dbg !11
  %16 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %17 = shl i32 %16, 1, !dbg !12
  %18 = and i32 %17, 254, !dbg !12
  %19 = or disjoint i32 %15, %18, !dbg !13
  %20 = icmp slt i32 %19, 256, !dbg !14
  %.frozen = freeze i32 %19, !dbg !15
  %21 = sdiv i32 %.frozen, 16, !dbg !15
  %22 = mul i32 %21, 16, !dbg !16
  %.decomposed = sub i32 %.frozen, %22, !dbg !16
  %23 = sdiv i32 %19, 4, !dbg !17
  %24 = srem i32 %23, 4, !dbg !18
  %25 = icmp slt i32 %19, 64, !dbg !19
  %26 = shl nsw i32 %21, 4, !dbg !20
  %27 = add i32 %26, %.decomposed, !dbg !21
  %28 = sext i32 %27 to i64, !dbg !22
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !22
  %30 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %29, i1 %25, i32 0, i1 %25, i32 0, i1 %25) #3, !dbg !23
  %31 = sext i32 %24 to i64, !dbg !24
  %32 = getelementptr float, ptr addrspace(1) %1, i64 %31, !dbg !24
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %32, i1 %25, i32 0, i1 %25) #3, !dbg !25
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %32, i1 %25, i32 0, i1 %25) #3, !dbg !25
  %35 = getelementptr float, ptr addrspace(1) %2, i64 %31, !dbg !26
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %35, i1 %25, i32 0, i1 %25) #3, !dbg !27
  %37 = bitcast i32 %36 to float, !dbg !27
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %35, i1 %25, i32 0, i1 %25) #3, !dbg !27
  %39 = bitcast i32 %38 to float, !dbg !27
  %40 = fadd float %37, 0x3EE4F8B580000000, !dbg !28
  %41 = fadd float %39, 0x3EE4F8B580000000, !dbg !28
  %42 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i = icmp eq i32 %42, 0, !dbg !29
  %43 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i = icmp eq i32 %43, 0, !dbg !29
  br i1 %.not.i, label %49, label %44, !dbg !29

44:                                               ; preds = %13
  br i1 %.not1.i, label %47, label %45, !dbg !29

45:                                               ; preds = %44
  %46 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %40) #3, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

47:                                               ; preds = %44
  %48 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %40) #3, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

49:                                               ; preds = %13
  br i1 %.not1.i, label %52, label %50, !dbg !29

50:                                               ; preds = %49
  %51 = tail call float @llvm.nvvm.sqrt.rn.f(float %40) #3, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

52:                                               ; preds = %49
  %53 = tail call float @llvm.nvvm.sqrt.approx.f(float %40) #3, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

__nv_sqrtf.exit:                                  ; preds = %45, %47, %50, %52
  %.0.i = phi float [ %46, %45 ], [ %48, %47 ], [ %51, %50 ], [ %53, %52 ], !dbg !29
  %54 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i1 = icmp eq i32 %54, 0, !dbg !29
  %55 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i4 = icmp eq i32 %55, 0, !dbg !29
  br i1 %.not.i1, label %61, label %56, !dbg !29

56:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %59, label %57, !dbg !29

57:                                               ; preds = %56
  %58 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %41) #3, !dbg !29
  br label %__nv_sqrtf.exit5, !dbg !29

59:                                               ; preds = %56
  %60 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %41) #3, !dbg !29
  br label %__nv_sqrtf.exit5, !dbg !29

61:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %64, label %62, !dbg !29

62:                                               ; preds = %61
  %63 = tail call float @llvm.nvvm.sqrt.rn.f(float %41) #3, !dbg !29
  br label %__nv_sqrtf.exit5, !dbg !29

64:                                               ; preds = %61
  %65 = tail call float @llvm.nvvm.sqrt.approx.f(float %41) #3, !dbg !29
  br label %__nv_sqrtf.exit5, !dbg !29

__nv_sqrtf.exit5:                                 ; preds = %57, %59, %62, %64
  %.0.i3 = phi float [ %58, %57 ], [ %60, %59 ], [ %63, %62 ], [ %65, %64 ], !dbg !29
  %66 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !30
  %67 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !30
  %68 = getelementptr float, ptr addrspace(1) %3, i64 %31, !dbg !31
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %68, i1 %25, i32 0, i1 %25) #3, !dbg !32
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %68, i1 %25, i32 0, i1 %25) #3, !dbg !32
  %71 = getelementptr float, ptr addrspace(1) %4, i64 %31, !dbg !33
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %71, i1 %25, i32 0, i1 %25) #3, !dbg !34
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %71, i1 %25, i32 0, i1 %25) #3, !dbg !34
  %74 = and i32 %19, -64, !dbg !35
  %75 = icmp eq i32 %74, 64, !dbg !35
  %76 = and i1 %20, %75, !dbg !36
  %77 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %29, i1 %76, i32 0, i1 %76, i32 0, i1 %76) #3, !dbg !37
  %78 = getelementptr float, ptr addrspace(1) %5, i64 %31, !dbg !38
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %78, i1 %76, i32 0, i1 %76) #3, !dbg !39
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %78, i1 %76, i32 0, i1 %76) #3, !dbg !39
  %81 = getelementptr float, ptr addrspace(1) %6, i64 %31, !dbg !40
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %81, i1 %76, i32 0, i1 %76) #3, !dbg !41
  %83 = bitcast i32 %82 to float, !dbg !41
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %81, i1 %76, i32 0, i1 %76) #3, !dbg !41
  %85 = bitcast i32 %84 to float, !dbg !41
  %86 = fadd float %83, 0x3EE4F8B580000000, !dbg !42
  %87 = fadd float %85, 0x3EE4F8B580000000, !dbg !42
  %88 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !43
  %.not.i6 = icmp eq i32 %88, 0, !dbg !43
  %89 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !43
  %.not1.i9 = icmp eq i32 %89, 0, !dbg !43
  br i1 %.not.i6, label %95, label %90, !dbg !43

90:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %93, label %91, !dbg !43

91:                                               ; preds = %90
  %92 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %86) #3, !dbg !43
  br label %__nv_sqrtf.exit10, !dbg !43

93:                                               ; preds = %90
  %94 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %86) #3, !dbg !43
  br label %__nv_sqrtf.exit10, !dbg !43

95:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %98, label %96, !dbg !43

96:                                               ; preds = %95
  %97 = tail call float @llvm.nvvm.sqrt.rn.f(float %86) #3, !dbg !43
  br label %__nv_sqrtf.exit10, !dbg !43

98:                                               ; preds = %95
  %99 = tail call float @llvm.nvvm.sqrt.approx.f(float %86) #3, !dbg !43
  br label %__nv_sqrtf.exit10, !dbg !43

__nv_sqrtf.exit10:                                ; preds = %91, %93, %96, %98
  %.0.i8 = phi float [ %92, %91 ], [ %94, %93 ], [ %97, %96 ], [ %99, %98 ], !dbg !43
  %100 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !43
  %.not.i11 = icmp eq i32 %100, 0, !dbg !43
  %101 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !43
  %.not1.i14 = icmp eq i32 %101, 0, !dbg !43
  br i1 %.not.i11, label %107, label %102, !dbg !43

102:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %105, label %103, !dbg !43

103:                                              ; preds = %102
  %104 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %87) #3, !dbg !43
  br label %__nv_sqrtf.exit15, !dbg !43

105:                                              ; preds = %102
  %106 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %87) #3, !dbg !43
  br label %__nv_sqrtf.exit15, !dbg !43

107:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %110, label %108, !dbg !43

108:                                              ; preds = %107
  %109 = tail call float @llvm.nvvm.sqrt.rn.f(float %87) #3, !dbg !43
  br label %__nv_sqrtf.exit15, !dbg !43

110:                                              ; preds = %107
  %111 = tail call float @llvm.nvvm.sqrt.approx.f(float %87) #3, !dbg !43
  br label %__nv_sqrtf.exit15, !dbg !43

__nv_sqrtf.exit15:                                ; preds = %103, %105, %108, %110
  %.0.i13 = phi float [ %104, %103 ], [ %106, %105 ], [ %109, %108 ], [ %111, %110 ], !dbg !43
  %112 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !44
  %113 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !44
  %114 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %68, i1 %76, i32 0, i1 %76) #3, !dbg !45
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %68, i1 %76, i32 0, i1 %76) #3, !dbg !45
  %116 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %71, i1 %76, i32 0, i1 %76) #3, !dbg !46
  %117 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %71, i1 %76, i32 0, i1 %76) #3, !dbg !46
  %118 = icmp eq i32 %74, 128, !dbg !47
  %119 = and i1 %20, %118, !dbg !48
  %120 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %29, i1 %119, i32 0, i1 %119, i32 0, i1 %119) #3, !dbg !49
  %121 = getelementptr float, ptr addrspace(1) %7, i64 %31, !dbg !50
  %122 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %121, i1 %119, i32 0, i1 %119) #3, !dbg !51
  %123 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %121, i1 %119, i32 0, i1 %119) #3, !dbg !51
  %124 = getelementptr float, ptr addrspace(1) %8, i64 %31, !dbg !52
  %125 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %124, i1 %119, i32 0, i1 %119) #3, !dbg !53
  %126 = bitcast i32 %125 to float, !dbg !53
  %127 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %124, i1 %119, i32 0, i1 %119) #3, !dbg !53
  %128 = bitcast i32 %127 to float, !dbg !53
  %129 = fadd float %126, 0x3EE4F8B580000000, !dbg !54
  %130 = fadd float %128, 0x3EE4F8B580000000, !dbg !54
  %131 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !55
  %.not.i16 = icmp eq i32 %131, 0, !dbg !55
  %132 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !55
  %.not1.i19 = icmp eq i32 %132, 0, !dbg !55
  br i1 %.not.i16, label %138, label %133, !dbg !55

133:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %136, label %134, !dbg !55

134:                                              ; preds = %133
  %135 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %129) #3, !dbg !55
  br label %__nv_sqrtf.exit20, !dbg !55

136:                                              ; preds = %133
  %137 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %129) #3, !dbg !55
  br label %__nv_sqrtf.exit20, !dbg !55

138:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %141, label %139, !dbg !55

139:                                              ; preds = %138
  %140 = tail call float @llvm.nvvm.sqrt.rn.f(float %129) #3, !dbg !55
  br label %__nv_sqrtf.exit20, !dbg !55

141:                                              ; preds = %138
  %142 = tail call float @llvm.nvvm.sqrt.approx.f(float %129) #3, !dbg !55
  br label %__nv_sqrtf.exit20, !dbg !55

__nv_sqrtf.exit20:                                ; preds = %134, %136, %139, %141
  %.0.i18 = phi float [ %135, %134 ], [ %137, %136 ], [ %140, %139 ], [ %142, %141 ], !dbg !55
  %143 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !55
  %.not.i21 = icmp eq i32 %143, 0, !dbg !55
  %144 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !55
  %.not1.i24 = icmp eq i32 %144, 0, !dbg !55
  br i1 %.not.i21, label %150, label %145, !dbg !55

145:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %148, label %146, !dbg !55

146:                                              ; preds = %145
  %147 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %130) #3, !dbg !55
  br label %__nv_sqrtf.exit25, !dbg !55

148:                                              ; preds = %145
  %149 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %130) #3, !dbg !55
  br label %__nv_sqrtf.exit25, !dbg !55

150:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %153, label %151, !dbg !55

151:                                              ; preds = %150
  %152 = tail call float @llvm.nvvm.sqrt.rn.f(float %130) #3, !dbg !55
  br label %__nv_sqrtf.exit25, !dbg !55

153:                                              ; preds = %150
  %154 = tail call float @llvm.nvvm.sqrt.approx.f(float %130) #3, !dbg !55
  br label %__nv_sqrtf.exit25, !dbg !55

__nv_sqrtf.exit25:                                ; preds = %146, %148, %151, %153
  %.0.i23 = phi float [ %147, %146 ], [ %149, %148 ], [ %152, %151 ], [ %154, %153 ], !dbg !55
  %155 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !56
  %156 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !56
  %157 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %68, i1 %119, i32 0, i1 %119) #3, !dbg !57
  %158 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %68, i1 %119, i32 0, i1 %119) #3, !dbg !57
  %159 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %71, i1 %119, i32 0, i1 %119) #3, !dbg !58
  %160 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %71, i1 %119, i32 0, i1 %119) #3, !dbg !58
  %161 = icmp eq i32 %74, 192, !dbg !59
  %162 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %29, i1 %161, i32 0, i1 %161, i32 0, i1 %161) #3, !dbg !60
  %163 = getelementptr float, ptr addrspace(1) %9, i64 %31, !dbg !61
  %164 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %163, i1 %161, i32 0, i1 %161) #3, !dbg !62
  %165 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %163, i1 %161, i32 0, i1 %161) #3, !dbg !62
  %166 = getelementptr float, ptr addrspace(1) %10, i64 %31, !dbg !63
  %167 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %166, i1 %161, i32 0, i1 %161) #3, !dbg !64
  %168 = bitcast i32 %167 to float, !dbg !64
  %169 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %166, i1 %161, i32 0, i1 %161) #3, !dbg !64
  %170 = bitcast i32 %169 to float, !dbg !64
  %171 = fadd float %168, 0x3EE4F8B580000000, !dbg !65
  %172 = fadd float %170, 0x3EE4F8B580000000, !dbg !65
  %173 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !66
  %.not.i26 = icmp eq i32 %173, 0, !dbg !66
  %174 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !66
  %.not1.i29 = icmp eq i32 %174, 0, !dbg !66
  br i1 %.not.i26, label %180, label %175, !dbg !66

175:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %178, label %176, !dbg !66

176:                                              ; preds = %175
  %177 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %171) #3, !dbg !66
  br label %__nv_sqrtf.exit30, !dbg !66

178:                                              ; preds = %175
  %179 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %171) #3, !dbg !66
  br label %__nv_sqrtf.exit30, !dbg !66

180:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %183, label %181, !dbg !66

181:                                              ; preds = %180
  %182 = tail call float @llvm.nvvm.sqrt.rn.f(float %171) #3, !dbg !66
  br label %__nv_sqrtf.exit30, !dbg !66

183:                                              ; preds = %180
  %184 = tail call float @llvm.nvvm.sqrt.approx.f(float %171) #3, !dbg !66
  br label %__nv_sqrtf.exit30, !dbg !66

__nv_sqrtf.exit30:                                ; preds = %176, %178, %181, %183
  %.0.i28 = phi float [ %177, %176 ], [ %179, %178 ], [ %182, %181 ], [ %184, %183 ], !dbg !66
  %185 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !66
  %.not.i31 = icmp eq i32 %185, 0, !dbg !66
  %186 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !66
  %.not1.i34 = icmp eq i32 %186, 0, !dbg !66
  br i1 %.not.i31, label %192, label %187, !dbg !66

187:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %190, label %188, !dbg !66

188:                                              ; preds = %187
  %189 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %172) #3, !dbg !66
  br label %__nv_sqrtf.exit35, !dbg !66

190:                                              ; preds = %187
  %191 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %172) #3, !dbg !66
  br label %__nv_sqrtf.exit35, !dbg !66

192:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %195, label %193, !dbg !66

193:                                              ; preds = %192
  %194 = tail call float @llvm.nvvm.sqrt.rn.f(float %172) #3, !dbg !66
  br label %__nv_sqrtf.exit35, !dbg !66

195:                                              ; preds = %192
  %196 = tail call float @llvm.nvvm.sqrt.approx.f(float %172) #3, !dbg !66
  br label %__nv_sqrtf.exit35, !dbg !66

__nv_sqrtf.exit35:                                ; preds = %188, %190, %193, %195
  %.0.i33 = phi float [ %189, %188 ], [ %191, %190 ], [ %194, %193 ], [ %196, %195 ], !dbg !66
  %197 = extractvalue { i32, i32 } %162, 1, !dbg !60
  %198 = bitcast i32 %197 to float, !dbg !60
  %199 = bitcast i32 %165 to float, !dbg !62
  %200 = fsub float %198, %199, !dbg !67
  %201 = extractvalue { i32, i32 } %162, 0, !dbg !60
  %202 = bitcast i32 %201 to float, !dbg !60
  %203 = bitcast i32 %164 to float, !dbg !62
  %204 = fsub float %202, %203, !dbg !67
  %205 = icmp sgt i32 %19, 191, !dbg !68
  %206 = extractvalue { i32, i32 } %120, 1, !dbg !49
  %207 = bitcast i32 %206 to float, !dbg !49
  %208 = bitcast i32 %123 to float, !dbg !51
  %209 = fsub float %207, %208, !dbg !69
  %210 = fmul float %209, %156, !dbg !70
  %211 = bitcast i32 %158 to float, !dbg !57
  %212 = fmul float %210, %211, !dbg !71
  %213 = bitcast i32 %160 to float, !dbg !58
  %214 = fadd float %212, %213, !dbg !72
  %215 = extractvalue { i32, i32 } %120, 0, !dbg !49
  %216 = bitcast i32 %215 to float, !dbg !49
  %217 = bitcast i32 %122 to float, !dbg !51
  %218 = fsub float %216, %217, !dbg !69
  %219 = fmul float %218, %155, !dbg !70
  %220 = bitcast i32 %157 to float, !dbg !57
  %221 = fmul float %219, %220, !dbg !71
  %222 = bitcast i32 %159 to float, !dbg !58
  %223 = fadd float %221, %222, !dbg !72
  %224 = extractvalue { i32, i32 } %77, 1, !dbg !37
  %225 = bitcast i32 %224 to float, !dbg !37
  %226 = bitcast i32 %80 to float, !dbg !39
  %227 = fsub float %225, %226, !dbg !73
  %228 = fmul float %227, %113, !dbg !74
  %229 = bitcast i32 %115 to float, !dbg !45
  %230 = fmul float %228, %229, !dbg !75
  %231 = bitcast i32 %117 to float, !dbg !46
  %232 = fadd float %230, %231, !dbg !76
  %233 = extractvalue { i32, i32 } %77, 0, !dbg !37
  %234 = bitcast i32 %233 to float, !dbg !37
  %235 = bitcast i32 %79 to float, !dbg !39
  %236 = fsub float %234, %235, !dbg !73
  %237 = fmul float %236, %112, !dbg !74
  %238 = bitcast i32 %114 to float, !dbg !45
  %239 = fmul float %237, %238, !dbg !75
  %240 = bitcast i32 %116 to float, !dbg !46
  %241 = fadd float %239, %240, !dbg !76
  %242 = extractvalue { i32, i32 } %30, 1, !dbg !23
  %243 = bitcast i32 %242 to float, !dbg !23
  %244 = bitcast i32 %34 to float, !dbg !25
  %245 = fsub float %243, %244, !dbg !77
  %246 = fmul float %245, %67, !dbg !78
  %247 = bitcast i32 %70 to float, !dbg !32
  %248 = fmul float %246, %247, !dbg !79
  %249 = bitcast i32 %73 to float, !dbg !34
  %250 = fadd float %248, %249, !dbg !80
  %251 = extractvalue { i32, i32 } %30, 0, !dbg !23
  %252 = bitcast i32 %251 to float, !dbg !23
  %253 = bitcast i32 %33 to float, !dbg !25
  %254 = fsub float %252, %253, !dbg !77
  %255 = fmul float %254, %66, !dbg !78
  %256 = bitcast i32 %69 to float, !dbg !32
  %257 = fmul float %255, %256, !dbg !79
  %258 = bitcast i32 %72 to float, !dbg !34
  %259 = fadd float %257, %258, !dbg !80
  %260 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !81
  %261 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !81
  %262 = fmul float %204, %260, !dbg !82
  %263 = fmul float %200, %261, !dbg !82
  %264 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %68, i1 %161, i32 0, i1 %161) #3, !dbg !83
  %265 = bitcast i32 %264 to float, !dbg !83
  %266 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %68, i1 %161, i32 0, i1 %161) #3, !dbg !83
  %267 = bitcast i32 %266 to float, !dbg !83
  %268 = fmul float %262, %265, !dbg !84
  %269 = fmul float %263, %267, !dbg !84
  %270 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %71, i1 %161, i32 0, i1 %161) #3, !dbg !85
  %271 = bitcast i32 %270 to float, !dbg !85
  %272 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %71, i1 %161, i32 0, i1 %161) #3, !dbg !85
  %273 = bitcast i32 %272 to float, !dbg !85
  %274 = fadd float %268, %271, !dbg !86
  %275 = fadd float %269, %273, !dbg !86
  %276 = select i1 %205, float %274, float 0.000000e+00, !dbg !87
  %277 = select i1 %205, float %275, float 0.000000e+00, !dbg !87
  %278 = select i1 %118, float %223, float %276, !dbg !88
  %279 = select i1 %118, float %214, float %277, !dbg !88
  %280 = select i1 %75, float %241, float %278, !dbg !88
  %281 = select i1 %75, float %232, float %279, !dbg !88
  %282 = select i1 %25, float %259, float %280, !dbg !88
  %283 = select i1 %25, float %250, float %281, !dbg !88
  %284 = sext i32 %19 to i64, !dbg !89
  %285 = getelementptr float, ptr addrspace(1) %11, i64 %284, !dbg !89
  %286 = bitcast float %282 to i32, !dbg !90
  %287 = bitcast float %283 to i32, !dbg !90
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %286, i32 %287, ptr addrspace(1) %285, i1 %20) #3, !dbg !90
  ret void, !dbg !91
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c37yslo6irp2kogg2sfjrhr5fa4arrpbfflfnpngxlrjoem7bojo.py", directory: "inductor_cache/37")
!4 = !{ptr @triton_poi_fused_stack_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_stack_0, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_stack_0", linkageName: "triton_poi_fused_stack_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 21, scope: !7)
!18 = !DILocation(line: 26, column: 26, scope: !7)
!19 = !DILocation(line: 32, column: 18, scope: !7)
!20 = !DILocation(line: 33, column: 39, scope: !7)
!21 = !DILocation(line: 33, column: 35, scope: !7)
!22 = !DILocation(line: 33, column: 30, scope: !7)
!23 = !DILocation(line: 33, column: 45, scope: !7)
!24 = !DILocation(line: 34, column: 30, scope: !7)
!25 = !DILocation(line: 34, column: 35, scope: !7)
!26 = !DILocation(line: 36, column: 30, scope: !7)
!27 = !DILocation(line: 36, column: 35, scope: !7)
!28 = !DILocation(line: 38, column: 19, scope: !7)
!29 = !DILocation(line: 39, column: 27, scope: !7)
!30 = !DILocation(line: 41, column: 20, scope: !7)
!31 = !DILocation(line: 45, column: 31, scope: !7)
!32 = !DILocation(line: 45, column: 36, scope: !7)
!33 = !DILocation(line: 47, column: 31, scope: !7)
!34 = !DILocation(line: 47, column: 36, scope: !7)
!35 = !DILocation(line: 54, column: 20, scope: !7)
!36 = !DILocation(line: 55, column: 66, scope: !7)
!37 = !DILocation(line: 55, column: 58, scope: !7)
!38 = !DILocation(line: 56, column: 31, scope: !7)
!39 = !DILocation(line: 56, column: 36, scope: !7)
!40 = !DILocation(line: 58, column: 31, scope: !7)
!41 = !DILocation(line: 58, column: 36, scope: !7)
!42 = !DILocation(line: 60, column: 20, scope: !7)
!43 = !DILocation(line: 61, column: 27, scope: !7)
!44 = !DILocation(line: 63, column: 20, scope: !7)
!45 = !DILocation(line: 67, column: 36, scope: !7)
!46 = !DILocation(line: 69, column: 36, scope: !7)
!47 = !DILocation(line: 76, column: 20, scope: !7)
!48 = !DILocation(line: 77, column: 67, scope: !7)
!49 = !DILocation(line: 77, column: 59, scope: !7)
!50 = !DILocation(line: 78, column: 31, scope: !7)
!51 = !DILocation(line: 78, column: 36, scope: !7)
!52 = !DILocation(line: 80, column: 31, scope: !7)
!53 = !DILocation(line: 80, column: 36, scope: !7)
!54 = !DILocation(line: 82, column: 20, scope: !7)
!55 = !DILocation(line: 83, column: 27, scope: !7)
!56 = !DILocation(line: 85, column: 20, scope: !7)
!57 = !DILocation(line: 89, column: 36, scope: !7)
!58 = !DILocation(line: 91, column: 36, scope: !7)
!59 = !DILocation(line: 98, column: 68, scope: !7)
!60 = !DILocation(line: 98, column: 60, scope: !7)
!61 = !DILocation(line: 99, column: 31, scope: !7)
!62 = !DILocation(line: 99, column: 36, scope: !7)
!63 = !DILocation(line: 101, column: 32, scope: !7)
!64 = !DILocation(line: 101, column: 37, scope: !7)
!65 = !DILocation(line: 103, column: 20, scope: !7)
!66 = !DILocation(line: 104, column: 27, scope: !7)
!67 = !DILocation(line: 100, column: 20, scope: !7)
!68 = !DILocation(line: 95, column: 20, scope: !7)
!69 = !DILocation(line: 79, column: 20, scope: !7)
!70 = !DILocation(line: 88, column: 20, scope: !7)
!71 = !DILocation(line: 90, column: 20, scope: !7)
!72 = !DILocation(line: 92, column: 20, scope: !7)
!73 = !DILocation(line: 57, column: 20, scope: !7)
!74 = !DILocation(line: 66, column: 20, scope: !7)
!75 = !DILocation(line: 68, column: 20, scope: !7)
!76 = !DILocation(line: 70, column: 20, scope: !7)
!77 = !DILocation(line: 35, column: 18, scope: !7)
!78 = !DILocation(line: 44, column: 19, scope: !7)
!79 = !DILocation(line: 46, column: 20, scope: !7)
!80 = !DILocation(line: 48, column: 20, scope: !7)
!81 = !DILocation(line: 106, column: 20, scope: !7)
!82 = !DILocation(line: 109, column: 20, scope: !7)
!83 = !DILocation(line: 110, column: 36, scope: !7)
!84 = !DILocation(line: 111, column: 20, scope: !7)
!85 = !DILocation(line: 112, column: 36, scope: !7)
!86 = !DILocation(line: 113, column: 20, scope: !7)
!87 = !DILocation(line: 115, column: 35, scope: !7)
!88 = !DILocation(line: 0, scope: !7)
!89 = !DILocation(line: 119, column: 25, scope: !7)
!90 = !DILocation(line: 119, column: 37, scope: !7)
!91 = !DILocation(line: 119, column: 4, scope: !7)
