; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_27(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 8, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 252, !dbg !12
  %11 = shl i32 %8, 1, !dbg !12
  %12 = and i32 %11, 254, !dbg !12
  %13 = and i32 %8, 127, !dbg !12
  %14 = or disjoint i32 %13, 128, !dbg !12
  %15 = or disjoint i32 %7, %10, !dbg !13
  %16 = or disjoint i32 %7, %12, !dbg !13
  %17 = or disjoint i32 %7, %13, !dbg !13
  %18 = or disjoint i32 %7, %14, !dbg !13
  %19 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %20 = shl i32 %19, 2, !dbg !15
  %21 = lshr i32 %8, 6, !dbg !16
  %.lobit = and i32 %21, 1, !dbg !16
  %22 = or disjoint i32 %20, %.lobit, !dbg !17
  %23 = or disjoint i32 %22, 2, !dbg !17
  %24 = icmp slt i32 %22, 4, !dbg !18
  %25 = icmp slt i32 %23, 4, !dbg !18
  %26 = icmp slt i32 %20, 4, !dbg !18
  %.frozen = freeze i32 %15, !dbg !19
  %27 = sdiv i32 %.frozen, 256, !dbg !19
  %28 = mul i32 %27, 256, !dbg !20
  %.decomposed = sub i32 %.frozen, %28, !dbg !20
  %29 = srem i32 %16, 256, !dbg !20
  %30 = shl i32 %22, 8, !dbg !21
  %31 = shl i32 %23, 8, !dbg !21
  %32 = shl i32 %27, 10, !dbg !22
  %33 = add i32 %32, %.decomposed, !dbg !23
  %34 = add i32 %33, %30, !dbg !24
  %35 = add i32 %33, %31, !dbg !24
  %36 = sext i32 %34 to i64, !dbg !25
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !25
  %38 = sext i32 %35 to i64, !dbg !25
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !25
  %40 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %37, i1 %24) #2, !dbg !26
  %41 = extractvalue { i32, i32, i32, i32 } %40, 0, !dbg !26
  %42 = extractvalue { i32, i32, i32, i32 } %40, 1, !dbg !26
  %43 = extractvalue { i32, i32, i32, i32 } %40, 2, !dbg !26
  %44 = extractvalue { i32, i32, i32, i32 } %40, 3, !dbg !26
  %45 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %39, i1 %25) #2, !dbg !26
  %46 = extractvalue { i32, i32, i32, i32 } %45, 0, !dbg !26
  %47 = extractvalue { i32, i32, i32, i32 } %45, 1, !dbg !26
  %48 = extractvalue { i32, i32, i32, i32 } %45, 2, !dbg !26
  %49 = extractvalue { i32, i32, i32, i32 } %45, 3, !dbg !26
  %50 = shl i32 %8, 4, !dbg !26
  %51 = and i32 %50, 1008, !dbg !26
  %52 = or disjoint i32 %51, %.lobit, !dbg !26
  %53 = and i32 %9, 508, !dbg !26
  %54 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %51, !dbg !26
  %55 = getelementptr float, ptr addrspace(3) %54, i32 %52, !dbg !26
  %56 = insertelement <1 x i32> poison, i32 %41, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %55, <1 x i32> %56, i1 true) #2, !dbg !26
  %57 = or disjoint i32 %52, 4, !dbg !26
  %58 = lshr i32 %57, 2, !dbg !26
  %59 = getelementptr float, ptr addrspace(3) @global_smem, i32 %58, !dbg !26
  %60 = getelementptr float, ptr addrspace(3) %59, i32 %57, !dbg !26
  %61 = insertelement <1 x i32> poison, i32 %42, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %60, <1 x i32> %61, i1 true) #2, !dbg !26
  %62 = or disjoint i32 %52, 8, !dbg !26
  %63 = lshr i32 %62, 2, !dbg !26
  %64 = getelementptr float, ptr addrspace(3) @global_smem, i32 %63, !dbg !26
  %65 = getelementptr float, ptr addrspace(3) %64, i32 %62, !dbg !26
  %66 = insertelement <1 x i32> poison, i32 %43, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %65, <1 x i32> %66, i1 true) #2, !dbg !26
  %67 = or disjoint i32 %52, 12, !dbg !26
  %68 = lshr i32 %67, 2, !dbg !26
  %69 = getelementptr float, ptr addrspace(3) @global_smem, i32 %68, !dbg !26
  %70 = getelementptr float, ptr addrspace(3) %69, i32 %67, !dbg !26
  %71 = insertelement <1 x i32> poison, i32 %44, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %70, <1 x i32> %71, i1 true) #2, !dbg !26
  %72 = or disjoint i32 %52, 2, !dbg !26
  %73 = getelementptr float, ptr addrspace(3) %54, i32 %72, !dbg !26
  %74 = insertelement <1 x i32> poison, i32 %46, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %73, <1 x i32> %74, i1 true) #2, !dbg !26
  %75 = or disjoint i32 %52, 6, !dbg !26
  %76 = lshr i32 %75, 2, !dbg !26
  %77 = getelementptr float, ptr addrspace(3) @global_smem, i32 %76, !dbg !26
  %78 = getelementptr float, ptr addrspace(3) %77, i32 %75, !dbg !26
  %79 = insertelement <1 x i32> poison, i32 %47, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %78, <1 x i32> %79, i1 true) #2, !dbg !26
  %80 = or disjoint i32 %52, 10, !dbg !26
  %81 = lshr i32 %80, 2, !dbg !26
  %82 = getelementptr float, ptr addrspace(3) @global_smem, i32 %81, !dbg !26
  %83 = getelementptr float, ptr addrspace(3) %82, i32 %80, !dbg !26
  %84 = insertelement <1 x i32> poison, i32 %48, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %83, <1 x i32> %84, i1 true) #2, !dbg !26
  %85 = or disjoint i32 %52, 14, !dbg !26
  %86 = lshr i32 %85, 2, !dbg !26
  %87 = getelementptr float, ptr addrspace(3) @global_smem, i32 %86, !dbg !26
  %88 = getelementptr float, ptr addrspace(3) %87, i32 %85, !dbg !26
  %89 = insertelement <1 x i32> poison, i32 %49, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %88, <1 x i32> %89, i1 true) #2, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %90 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %53, !dbg !26
  %91 = getelementptr inbounds float, ptr addrspace(3) %90, i32 %53, !dbg !26
  %92 = load float, ptr addrspace(3) %91, align 4, !dbg !26
  %93 = or disjoint i32 %53, 1, !dbg !26
  %94 = getelementptr inbounds float, ptr addrspace(3) %90, i32 %93, !dbg !26
  %95 = load float, ptr addrspace(3) %94, align 4, !dbg !26
  %96 = or disjoint i32 %53, 2, !dbg !26
  %97 = getelementptr inbounds float, ptr addrspace(3) %90, i32 %96, !dbg !26
  %98 = load float, ptr addrspace(3) %97, align 4, !dbg !26
  %99 = or disjoint i32 %53, 3, !dbg !26
  %100 = getelementptr inbounds float, ptr addrspace(3) %90, i32 %99, !dbg !26
  %101 = load float, ptr addrspace(3) %100, align 4, !dbg !26
  %102 = or disjoint i32 %53, 512, !dbg !26
  %103 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %102, !dbg !26
  %104 = getelementptr inbounds float, ptr addrspace(3) %103, i32 %102, !dbg !26
  %105 = load float, ptr addrspace(3) %104, align 4, !dbg !26
  %106 = or disjoint i32 %53, 513, !dbg !26
  %107 = lshr i32 %106, 2, !dbg !26
  %108 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %107, !dbg !26
  %109 = getelementptr inbounds float, ptr addrspace(3) %108, i32 %106, !dbg !26
  %110 = load float, ptr addrspace(3) %109, align 4, !dbg !26
  %111 = or disjoint i32 %53, 514, !dbg !26
  %112 = lshr i32 %111, 2, !dbg !26
  %113 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %112, !dbg !26
  %114 = getelementptr inbounds float, ptr addrspace(3) %113, i32 %111, !dbg !26
  %115 = load float, ptr addrspace(3) %114, align 4, !dbg !26
  %116 = or disjoint i32 %53, 515, !dbg !26
  %117 = lshr i32 %116, 2, !dbg !26
  %118 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %117, !dbg !26
  %119 = getelementptr inbounds float, ptr addrspace(3) %118, i32 %116, !dbg !26
  %120 = load float, ptr addrspace(3) %119, align 4, !dbg !26
  %121 = sext i32 %29 to i64, !dbg !27
  %122 = getelementptr float, ptr addrspace(1) %1, i64 %121, !dbg !27
  %123 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %122, i1 true) #2, !dbg !28
  %124 = extractvalue { i32, i32 } %123, 0, !dbg !28
  %125 = extractvalue { i32, i32 } %123, 1, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %.idx = shl nuw nsw i32 %12, 3, !dbg !29
  %126 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !29
  %127 = insertelement <1 x i32> poison, i32 %124, i64 0, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %126, <1 x i32> %127, i1 true) #2, !dbg !29
  %128 = shl nuw nsw i32 %12, 1, !dbg !29
  %129 = or disjoint i32 %128, 2, !dbg !29
  %130 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %129, !dbg !29
  %131 = insertelement <1 x i32> poison, i32 %125, i64 0, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %130, <1 x i32> %131, i1 true) #2, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %.idx2 = shl nuw nsw i32 %13, 3, !dbg !29
  %132 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx2, !dbg !29
  %133 = load float, ptr addrspace(3) %132, align 8, !dbg !29
  %.idx3 = shl nuw nsw i32 %14, 3, !dbg !29
  %134 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx3, !dbg !29
  %135 = load float, ptr addrspace(3) %134, align 8, !dbg !29
  %136 = fadd float %92, %133, !dbg !29
  %137 = fadd float %95, %133, !dbg !29
  %138 = fadd float %98, %133, !dbg !29
  %139 = fadd float %101, %133, !dbg !29
  %140 = fadd float %105, %135, !dbg !29
  %141 = fadd float %110, %135, !dbg !29
  %142 = fadd float %115, %135, !dbg !29
  %143 = fadd float %120, %135, !dbg !29
  %144 = add i32 %17, %19, !dbg !30
  %145 = shl i32 %144, 2, !dbg !30
  %146 = add i32 %18, %19, !dbg !30
  %147 = shl i32 %146, 2, !dbg !30
  %148 = sext i32 %145 to i64, !dbg !31
  %149 = getelementptr float, ptr addrspace(1) %2, i64 %148, !dbg !31
  %150 = sext i32 %147 to i64, !dbg !31
  %151 = getelementptr float, ptr addrspace(1) %2, i64 %150, !dbg !31
  %152 = bitcast float %136 to i32, !dbg !32
  %153 = bitcast float %137 to i32, !dbg !32
  %154 = bitcast float %138 to i32, !dbg !32
  %155 = bitcast float %139 to i32, !dbg !32
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %152, i32 %153, i32 %154, i32 %155, ptr addrspace(1) %149, i1 %26) #2, !dbg !32
  %156 = bitcast float %140 to i32, !dbg !32
  %157 = bitcast float %141 to i32, !dbg !32
  %158 = bitcast float %142 to i32, !dbg !32
  %159 = bitcast float %143 to i32, !dbg !32
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %156, i32 %157, i32 %158, i32 %159, ptr addrspace(1) %151, i1 %26) #2, !dbg !32
  ret void, !dbg !33
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cp34gk5nkbmwjxqqta4xgkawwfi4hw5emm7ak24e7nndvpyaav5g.py", directory: "inductor_cache/p3")
!4 = !{ptr @triton_poi_fused_convolution_27, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_27, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_27", linkageName: "triton_poi_fused_convolution_27", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 39, scope: !7)
!22 = !DILocation(line: 32, column: 49, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 44, scope: !7)
!25 = !DILocation(line: 32, column: 30, scope: !7)
!26 = !DILocation(line: 32, column: 54, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 33, column: 35, scope: !7)
!29 = !DILocation(line: 34, column: 18, scope: !7)
!30 = !DILocation(line: 35, column: 30, scope: !7)
!31 = !DILocation(line: 35, column: 25, scope: !7)
!32 = !DILocation(line: 35, column: 43, scope: !7)
!33 = !DILocation(line: 35, column: 4, scope: !7)
