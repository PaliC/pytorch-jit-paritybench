; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_cat_14(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, i32 %11) local_unnamed_addr !dbg !7 {
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %14 = shl i32 %13, 9, !dbg !11
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %16 = shl i32 %15, 1, !dbg !12
  %17 = and i32 %16, 510, !dbg !12
  %18 = or disjoint i32 %14, %17, !dbg !13
  %.frozen = freeze i32 %18, !dbg !14
  %19 = sdiv i32 %.frozen, 192, !dbg !14
  %20 = mul i32 %19, 192, !dbg !15
  %.decomposed = sub i32 %.frozen, %20, !dbg !15
  %21 = icmp slt i32 %.decomposed, 96, !dbg !16
  %22 = mul nsw i32 %19, 96, !dbg !17
  %23 = add nsw i32 %22, %.decomposed, !dbg !18
  %24 = sext i32 %23 to i64, !dbg !19
  %25 = getelementptr float, ptr addrspace(1) %0, i64 %24, !dbg !19
  %26 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %25, i1 %21, i32 0, i1 %21, i32 0, i1 %21) #3, !dbg !20
  %27 = sext i32 %.decomposed to i64, !dbg !21
  %28 = getelementptr float, ptr addrspace(1) %1, i64 %27, !dbg !21
  %29 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %28, i1 %21, i32 0, i1 %21, i32 0, i1 %21) #3, !dbg !22
  %30 = getelementptr float, ptr addrspace(1) %2, i64 %27, !dbg !23
  %31 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %30, i1 %21, i32 0, i1 %21, i32 0, i1 %21) #3, !dbg !24
  %32 = extractvalue { i32, i32 } %31, 0, !dbg !24
  %33 = extractvalue { i32, i32 } %31, 1, !dbg !24
  %34 = bitcast i32 %32 to float, !dbg !24
  %35 = bitcast i32 %33 to float, !dbg !24
  %36 = fadd float %34, 0x3EE4F8B580000000, !dbg !25
  %37 = fadd float %35, 0x3EE4F8B580000000, !dbg !25
  %38 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !26
  %.not.i = icmp eq i32 %38, 0, !dbg !26
  %39 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !26
  %.not1.i = icmp eq i32 %39, 0, !dbg !26
  br i1 %.not.i, label %45, label %40, !dbg !26

40:                                               ; preds = %12
  br i1 %.not1.i, label %43, label %41, !dbg !26

41:                                               ; preds = %40
  %42 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %36) #3, !dbg !26
  br label %__nv_sqrtf.exit, !dbg !26

43:                                               ; preds = %40
  %44 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %36) #3, !dbg !26
  br label %__nv_sqrtf.exit, !dbg !26

45:                                               ; preds = %12
  br i1 %.not1.i, label %48, label %46, !dbg !26

46:                                               ; preds = %45
  %47 = tail call float @llvm.nvvm.sqrt.rn.f(float %36) #3, !dbg !26
  br label %__nv_sqrtf.exit, !dbg !26

48:                                               ; preds = %45
  %49 = tail call float @llvm.nvvm.sqrt.approx.f(float %36) #3, !dbg !26
  br label %__nv_sqrtf.exit, !dbg !26

__nv_sqrtf.exit:                                  ; preds = %41, %43, %46, %48
  %.0.i = phi float [ %42, %41 ], [ %44, %43 ], [ %47, %46 ], [ %49, %48 ], !dbg !26
  %50 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !26
  %.not.i1 = icmp eq i32 %50, 0, !dbg !26
  %51 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !26
  %.not1.i4 = icmp eq i32 %51, 0, !dbg !26
  br i1 %.not.i1, label %57, label %52, !dbg !26

52:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %55, label %53, !dbg !26

53:                                               ; preds = %52
  %54 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %37) #3, !dbg !26
  br label %__nv_sqrtf.exit5, !dbg !26

55:                                               ; preds = %52
  %56 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %37) #3, !dbg !26
  br label %__nv_sqrtf.exit5, !dbg !26

57:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %60, label %58, !dbg !26

58:                                               ; preds = %57
  %59 = tail call float @llvm.nvvm.sqrt.rn.f(float %37) #3, !dbg !26
  br label %__nv_sqrtf.exit5, !dbg !26

60:                                               ; preds = %57
  %61 = tail call float @llvm.nvvm.sqrt.approx.f(float %37) #3, !dbg !26
  br label %__nv_sqrtf.exit5, !dbg !26

__nv_sqrtf.exit5:                                 ; preds = %53, %55, %58, %60
  %.0.i3 = phi float [ %54, %53 ], [ %56, %55 ], [ %59, %58 ], [ %61, %60 ], !dbg !26
  %62 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !27
  %63 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !27
  %64 = getelementptr float, ptr addrspace(1) %3, i64 %27, !dbg !28
  %65 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %64, i1 %21, i32 0, i1 %21, i32 0, i1 %21) #3, !dbg !29
  %66 = getelementptr float, ptr addrspace(1) %4, i64 %27, !dbg !30
  %67 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %66, i1 %21, i32 0, i1 %21, i32 0, i1 %21) #3, !dbg !31
  %68 = icmp sgt i32 %.decomposed, 95, !dbg !32
  %69 = add nsw i32 %.decomposed, -96, !dbg !33
  %70 = add nsw i32 %22, %69, !dbg !34
  %71 = sext i32 %70 to i64, !dbg !35
  %72 = getelementptr float, ptr addrspace(1) %5, i64 %71, !dbg !35
  %73 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %72, i1 %68, i32 0, i1 %68, i32 0, i1 %68) #3, !dbg !36
  %74 = sext i32 %69 to i64, !dbg !37
  %75 = getelementptr float, ptr addrspace(1) %6, i64 %74, !dbg !37
  %76 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %75, i1 %68, i32 0, i1 %68, i32 0, i1 %68) #3, !dbg !38
  %77 = getelementptr float, ptr addrspace(1) %7, i64 %74, !dbg !39
  %78 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %77, i1 %68, i32 0, i1 %68, i32 0, i1 %68) #3, !dbg !40
  %79 = extractvalue { i32, i32 } %78, 0, !dbg !40
  %80 = extractvalue { i32, i32 } %78, 1, !dbg !40
  %81 = bitcast i32 %79 to float, !dbg !40
  %82 = bitcast i32 %80 to float, !dbg !40
  %83 = fadd float %81, 0x3EE4F8B580000000, !dbg !41
  %84 = fadd float %82, 0x3EE4F8B580000000, !dbg !41
  %85 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !42
  %.not.i6 = icmp eq i32 %85, 0, !dbg !42
  %86 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !42
  %.not1.i9 = icmp eq i32 %86, 0, !dbg !42
  br i1 %.not.i6, label %92, label %87, !dbg !42

87:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %90, label %88, !dbg !42

88:                                               ; preds = %87
  %89 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %83) #3, !dbg !42
  br label %__nv_sqrtf.exit10, !dbg !42

90:                                               ; preds = %87
  %91 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %83) #3, !dbg !42
  br label %__nv_sqrtf.exit10, !dbg !42

92:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %95, label %93, !dbg !42

93:                                               ; preds = %92
  %94 = tail call float @llvm.nvvm.sqrt.rn.f(float %83) #3, !dbg !42
  br label %__nv_sqrtf.exit10, !dbg !42

95:                                               ; preds = %92
  %96 = tail call float @llvm.nvvm.sqrt.approx.f(float %83) #3, !dbg !42
  br label %__nv_sqrtf.exit10, !dbg !42

__nv_sqrtf.exit10:                                ; preds = %88, %90, %93, %95
  %.0.i8 = phi float [ %89, %88 ], [ %91, %90 ], [ %94, %93 ], [ %96, %95 ], !dbg !42
  %97 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !42
  %.not.i11 = icmp eq i32 %97, 0, !dbg !42
  %98 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !42
  %.not1.i14 = icmp eq i32 %98, 0, !dbg !42
  br i1 %.not.i11, label %104, label %99, !dbg !42

99:                                               ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %102, label %100, !dbg !42

100:                                              ; preds = %99
  %101 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %84) #3, !dbg !42
  br label %__nv_sqrtf.exit15, !dbg !42

102:                                              ; preds = %99
  %103 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %84) #3, !dbg !42
  br label %__nv_sqrtf.exit15, !dbg !42

104:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %107, label %105, !dbg !42

105:                                              ; preds = %104
  %106 = tail call float @llvm.nvvm.sqrt.rn.f(float %84) #3, !dbg !42
  br label %__nv_sqrtf.exit15, !dbg !42

107:                                              ; preds = %104
  %108 = tail call float @llvm.nvvm.sqrt.approx.f(float %84) #3, !dbg !42
  br label %__nv_sqrtf.exit15, !dbg !42

__nv_sqrtf.exit15:                                ; preds = %100, %102, %105, %107
  %.0.i13 = phi float [ %101, %100 ], [ %103, %102 ], [ %106, %105 ], [ %108, %107 ], !dbg !42
  %109 = extractvalue { i32, i32 } %73, 1, !dbg !36
  %110 = extractvalue { i32, i32 } %76, 1, !dbg !38
  %111 = extractvalue { i32, i32 } %73, 0, !dbg !36
  %112 = extractvalue { i32, i32 } %76, 0, !dbg !38
  %113 = extractvalue { i32, i32 } %26, 1, !dbg !20
  %114 = extractvalue { i32, i32 } %29, 1, !dbg !22
  %115 = extractvalue { i32, i32 } %65, 1, !dbg !29
  %116 = extractvalue { i32, i32 } %67, 1, !dbg !31
  %117 = extractvalue { i32, i32 } %26, 0, !dbg !20
  %118 = extractvalue { i32, i32 } %29, 0, !dbg !22
  %119 = extractvalue { i32, i32 } %65, 0, !dbg !29
  %120 = extractvalue { i32, i32 } %67, 0, !dbg !31
  %121 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !43
  %122 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !43
  %123 = getelementptr float, ptr addrspace(1) %8, i64 %74, !dbg !44
  %124 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %123, i1 %68, i32 0, i1 %68, i32 0, i1 %68) #3, !dbg !45
  %125 = extractvalue { i32, i32 } %124, 0, !dbg !45
  %126 = extractvalue { i32, i32 } %124, 1, !dbg !45
  %127 = getelementptr float, ptr addrspace(1) %9, i64 %74, !dbg !46
  %128 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %127, i1 %68, i32 0, i1 %68, i32 0, i1 %68) #3, !dbg !47
  %129 = extractvalue { i32, i32 } %128, 0, !dbg !47
  %130 = extractvalue { i32, i32 } %128, 1, !dbg !47
  %131 = insertelement <4 x i32> poison, i32 %109, i64 0, !dbg !36
  %132 = insertelement <4 x i32> %131, i32 %111, i64 1, !dbg !36
  %133 = insertelement <4 x i32> %132, i32 %117, i64 2, !dbg !36
  %134 = insertelement <4 x i32> %133, i32 %113, i64 3, !dbg !36
  %135 = bitcast <4 x i32> %134 to <4 x float>, !dbg !36
  %136 = insertelement <4 x i32> poison, i32 %110, i64 0, !dbg !38
  %137 = insertelement <4 x i32> %136, i32 %112, i64 1, !dbg !38
  %138 = insertelement <4 x i32> %137, i32 %118, i64 2, !dbg !38
  %139 = insertelement <4 x i32> %138, i32 %114, i64 3, !dbg !38
  %140 = bitcast <4 x i32> %139 to <4 x float>, !dbg !38
  %141 = fsub <4 x float> %135, %140, !dbg !48
  %142 = insertelement <4 x float> poison, float %122, i64 0, !dbg !49
  %143 = insertelement <4 x float> %142, float %121, i64 1, !dbg !49
  %144 = insertelement <4 x float> %143, float %62, i64 2, !dbg !49
  %145 = insertelement <4 x float> %144, float %63, i64 3, !dbg !49
  %146 = fmul <4 x float> %141, %145, !dbg !49
  %147 = insertelement <4 x i32> poison, i32 %126, i64 0, !dbg !45
  %148 = insertelement <4 x i32> %147, i32 %125, i64 1, !dbg !45
  %149 = insertelement <4 x i32> %148, i32 %119, i64 2, !dbg !45
  %150 = insertelement <4 x i32> %149, i32 %115, i64 3, !dbg !45
  %151 = bitcast <4 x i32> %150 to <4 x float>, !dbg !45
  %152 = fmul <4 x float> %146, %151, !dbg !50
  %153 = insertelement <4 x i32> poison, i32 %130, i64 0, !dbg !47
  %154 = insertelement <4 x i32> %153, i32 %129, i64 1, !dbg !47
  %155 = insertelement <4 x i32> %154, i32 %120, i64 2, !dbg !47
  %156 = insertelement <4 x i32> %155, i32 %116, i64 3, !dbg !47
  %157 = bitcast <4 x i32> %156 to <4 x float>, !dbg !47
  %158 = fadd <4 x float> %152, %157, !dbg !51
  %159 = fcmp olt <4 x float> %158, zeroinitializer, !dbg !52
  %160 = extractelement <4 x i1> %159, i64 3, !dbg !56
  %161 = extractelement <4 x float> %158, i64 3, !dbg !56
  %162 = select i1 %160, float 0.000000e+00, float %161, !dbg !56
  %163 = extractelement <4 x i1> %159, i64 2, !dbg !56
  %164 = extractelement <4 x float> %158, i64 2, !dbg !56
  %165 = select i1 %163, float 0.000000e+00, float %164, !dbg !56
  %166 = extractelement <4 x i1> %159, i64 1, !dbg !58
  %167 = extractelement <4 x float> %158, i64 1, !dbg !58
  %168 = select i1 %166, float 0.000000e+00, float %167, !dbg !58
  %169 = extractelement <4 x i1> %159, i64 0, !dbg !58
  %170 = extractelement <4 x float> %158, i64 0, !dbg !58
  %171 = select i1 %169, float 0.000000e+00, float %170, !dbg !58
  %172 = select i1 %21, float %165, float %168, !dbg !59
  %173 = select i1 %21, float %162, float %171, !dbg !59
  %174 = sext i32 %18 to i64, !dbg !60
  %175 = getelementptr float, ptr addrspace(1) %10, i64 %174, !dbg !60
  %176 = bitcast float %172 to i32, !dbg !61
  %177 = bitcast float %173 to i32, !dbg !61
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %176, i32 %177, ptr addrspace(1) %175, i1 true) #3, !dbg !61
  ret void, !dbg !62
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cn7fymcrbyqzz6ff7rd3idffqezib2dtl73utbkpor7nq2n3veyp.py", directory: "inductor_cache/n7")
!4 = !{ptr @triton_poi_fused_cat_14, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_14, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_14", linkageName: "triton_poi_fused_cat_14", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 31, column: 18, scope: !7)
!17 = !DILocation(line: 32, column: 33, scope: !7)
!18 = !DILocation(line: 32, column: 39, scope: !7)
!19 = !DILocation(line: 32, column: 30, scope: !7)
!20 = !DILocation(line: 32, column: 45, scope: !7)
!21 = !DILocation(line: 33, column: 30, scope: !7)
!22 = !DILocation(line: 33, column: 35, scope: !7)
!23 = !DILocation(line: 35, column: 30, scope: !7)
!24 = !DILocation(line: 35, column: 35, scope: !7)
!25 = !DILocation(line: 37, column: 19, scope: !7)
!26 = !DILocation(line: 38, column: 27, scope: !7)
!27 = !DILocation(line: 40, column: 20, scope: !7)
!28 = !DILocation(line: 44, column: 31, scope: !7)
!29 = !DILocation(line: 44, column: 36, scope: !7)
!30 = !DILocation(line: 46, column: 31, scope: !7)
!31 = !DILocation(line: 46, column: 36, scope: !7)
!32 = !DILocation(line: 52, column: 20, scope: !7)
!33 = !DILocation(line: 55, column: 48, scope: !7)
!34 = !DILocation(line: 55, column: 40, scope: !7)
!35 = !DILocation(line: 55, column: 31, scope: !7)
!36 = !DILocation(line: 55, column: 54, scope: !7)
!37 = !DILocation(line: 56, column: 31, scope: !7)
!38 = !DILocation(line: 56, column: 44, scope: !7)
!39 = !DILocation(line: 58, column: 31, scope: !7)
!40 = !DILocation(line: 58, column: 44, scope: !7)
!41 = !DILocation(line: 60, column: 20, scope: !7)
!42 = !DILocation(line: 61, column: 27, scope: !7)
!43 = !DILocation(line: 63, column: 20, scope: !7)
!44 = !DILocation(line: 67, column: 31, scope: !7)
!45 = !DILocation(line: 67, column: 44, scope: !7)
!46 = !DILocation(line: 69, column: 31, scope: !7)
!47 = !DILocation(line: 69, column: 44, scope: !7)
!48 = !DILocation(line: 57, column: 20, scope: !7)
!49 = !DILocation(line: 66, column: 20, scope: !7)
!50 = !DILocation(line: 68, column: 20, scope: !7)
!51 = !DILocation(line: 70, column: 20, scope: !7)
!52 = !DILocation(line: 118, column: 15, scope: !53, inlinedAt: !55)
!53 = distinct !DILexicalBlockFile(scope: !7, file: !54, discriminator: 0)
!54 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!55 = !DILocation(line: 72, column: 42, scope: !7)
!56 = !DILocation(line: 121, column: 29, scope: !53, inlinedAt: !57)
!57 = !DILocation(line: 49, column: 42, scope: !7)
!58 = !DILocation(line: 121, column: 29, scope: !53, inlinedAt: !55)
!59 = !DILocation(line: 0, scope: !7)
!60 = !DILocation(line: 76, column: 25, scope: !7)
!61 = !DILocation(line: 76, column: 37, scope: !7)
!62 = !DILocation(line: 76, column: 4, scope: !7)
