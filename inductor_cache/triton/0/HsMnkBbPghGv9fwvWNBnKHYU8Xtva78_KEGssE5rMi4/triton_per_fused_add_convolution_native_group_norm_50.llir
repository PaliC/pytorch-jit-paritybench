; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused_add_convolution_native_group_norm_50(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %11 = and i32 %10, 31, !dbg !11
  %12 = lshr i32 %10, 5, !dbg !11
  %13 = shl i32 %10, 2, !dbg !11
  %14 = and i32 %13, 508, !dbg !11
  %15 = lshr i32 %14, 6, !dbg !12
  %16 = srem i32 %9, 32, !dbg !13
  %17 = shl i32 %9, 9, !dbg !14
  %18 = or disjoint i32 %17, %14, !dbg !15
  %19 = sext i32 %18 to i64, !dbg !16
  %20 = getelementptr float, ptr addrspace(1) %0, i64 %19, !dbg !16
  %21 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %20, i1 true) #5, !dbg !17
  %22 = extractvalue { i32, i32, i32, i32 } %21, 0, !dbg !17
  %23 = extractvalue { i32, i32, i32, i32 } %21, 1, !dbg !17
  %24 = extractvalue { i32, i32, i32, i32 } %21, 2, !dbg !17
  %25 = extractvalue { i32, i32, i32, i32 } %21, 3, !dbg !17
  %26 = shl nsw i32 %16, 3, !dbg !18
  %27 = or disjoint i32 %26, %15, !dbg !19
  %28 = sext i32 %27 to i64, !dbg !20
  %29 = getelementptr float, ptr addrspace(1) %2, i64 %28, !dbg !20
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 true) #5, !dbg !21
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 true) #5, !dbg !21
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 true) #5, !dbg !21
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 true) #5, !dbg !21
  %34 = getelementptr float, ptr addrspace(1) %3, i64 %19, !dbg !22
  %35 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %34, i1 true) #5, !dbg !23
  %36 = extractvalue { i32, i32, i32, i32 } %35, 0, !dbg !23
  %37 = extractvalue { i32, i32, i32, i32 } %35, 1, !dbg !23
  %38 = extractvalue { i32, i32, i32, i32 } %35, 2, !dbg !23
  %39 = extractvalue { i32, i32, i32, i32 } %35, 3, !dbg !23
  %40 = getelementptr float, ptr addrspace(1) %4, i64 %28, !dbg !24
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 true) #5, !dbg !25
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 true) #5, !dbg !25
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 true) #5, !dbg !25
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 true) #5, !dbg !25
  %45 = insertelement <2 x i32> poison, i32 %24, i64 0, !dbg !17
  %46 = insertelement <2 x i32> %45, i32 %38, i64 1, !dbg !17
  %47 = bitcast <2 x i32> %46 to <2 x float>, !dbg !17
  %48 = insertelement <2 x i32> poison, i32 %32, i64 0, !dbg !21
  %49 = insertelement <2 x i32> %48, i32 %43, i64 1, !dbg !21
  %50 = bitcast <2 x i32> %49 to <2 x float>, !dbg !21
  %51 = fadd <2 x float> %47, %50, !dbg !26
  %52 = insertelement <2 x i32> poison, i32 %25, i64 0, !dbg !17
  %53 = insertelement <2 x i32> %52, i32 %39, i64 1, !dbg !17
  %54 = bitcast <2 x i32> %53 to <2 x float>, !dbg !17
  %55 = insertelement <2 x i32> poison, i32 %33, i64 0, !dbg !21
  %56 = insertelement <2 x i32> %55, i32 %44, i64 1, !dbg !21
  %57 = bitcast <2 x i32> %56 to <2 x float>, !dbg !21
  %58 = fadd <2 x float> %54, %57, !dbg !26
  %59 = insertelement <2 x i32> poison, i32 %22, i64 0, !dbg !17
  %60 = insertelement <2 x i32> %59, i32 %23, i64 1, !dbg !17
  %61 = bitcast <2 x i32> %60 to <2 x float>, !dbg !17
  %62 = insertelement <2 x i32> poison, i32 %30, i64 0, !dbg !21
  %63 = insertelement <2 x i32> %62, i32 %31, i64 1, !dbg !21
  %64 = bitcast <2 x i32> %63 to <2 x float>, !dbg !21
  %65 = insertelement <2 x i32> poison, i32 %36, i64 0, !dbg !23
  %66 = insertelement <2 x i32> %65, i32 %37, i64 1, !dbg !23
  %67 = bitcast <2 x i32> %66 to <2 x float>, !dbg !23
  %68 = insertelement <2 x i32> poison, i32 %41, i64 0, !dbg !25
  %69 = insertelement <2 x i32> %68, i32 %42, i64 1, !dbg !25
  %70 = bitcast <2 x i32> %69 to <2 x float>, !dbg !25
  %71 = fadd <2 x float> %61, %64, !dbg !26
  %72 = fadd <2 x float> %67, %70, !dbg !27
  %73 = fadd <2 x float> %71, %72, !dbg !28
  %shift = shufflevector <2 x float> %51, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !28
  %74 = fadd <2 x float> %51, %shift, !dbg !28
  %75 = extractelement <2 x float> %74, i64 0, !dbg !28
  %shift1 = shufflevector <2 x float> %58, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !28
  %76 = fadd <2 x float> %58, %shift1, !dbg !28
  %77 = extractelement <2 x float> %76, i64 0, !dbg !28
  %78 = extractelement <2 x float> %73, i64 0, !dbg !29
  %79 = extractelement <2 x float> %73, i64 1, !dbg !29
  %80 = fadd float %78, %79, !dbg !30
  %81 = fadd float %80, %75, !dbg !30
  %82 = fadd float %81, %77, !dbg !30
  %83 = bitcast float %82 to i32, !dbg !35
  %84 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %83, i32 16, i32 31), !dbg !35
  %85 = bitcast i32 %84 to float, !dbg !35
  %86 = fadd float %82, %85, !dbg !30
  %87 = bitcast float %86 to i32, !dbg !35
  %88 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %87, i32 8, i32 31), !dbg !35
  %89 = bitcast i32 %88 to float, !dbg !35
  %90 = fadd float %86, %89, !dbg !30
  %91 = bitcast float %90 to i32, !dbg !35
  %92 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %91, i32 4, i32 31), !dbg !35
  %93 = bitcast i32 %92 to float, !dbg !35
  %94 = fadd float %90, %93, !dbg !30
  %95 = bitcast float %94 to i32, !dbg !35
  %96 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %95, i32 2, i32 31), !dbg !35
  %97 = bitcast i32 %96 to float, !dbg !35
  %98 = fadd float %94, %97, !dbg !30
  %99 = bitcast float %98 to i32, !dbg !35
  %100 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %99, i32 1, i32 31), !dbg !35
  %101 = bitcast i32 %100 to float, !dbg !35
  %102 = fadd float %98, %101, !dbg !30
  %103 = icmp eq i32 %11, 0, !dbg !35
  %104 = and i32 %12, 3, !dbg !35
  %105 = getelementptr float, ptr addrspace(3) @global_smem, i32 %104, !dbg !35
  %106 = bitcast float %102 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %105, <1 x i32> %106, i1 %103) #5, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %107 = icmp slt i32 %10, 4, !dbg !35
  %108 = getelementptr float, ptr addrspace(3) @global_smem, i32 %10, !dbg !35
  %109 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %108, i1 %107) #5, !dbg !35
  %110 = bitcast i32 %109 to float, !dbg !35
  %111 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %109, i32 2, i32 31), !dbg !35
  %112 = bitcast i32 %111 to float, !dbg !35
  %113 = fadd float %110, %112, !dbg !30
  %114 = bitcast float %113 to i32, !dbg !35
  %115 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %114, i32 1, i32 31), !dbg !35
  %116 = bitcast i32 %115 to float, !dbg !35
  %117 = fadd float %113, %116, !dbg !30
  %118 = and i32 %10, 3, !dbg !35
  %119 = icmp eq i32 %118, 0, !dbg !35
  %120 = and i1 %107, %119, !dbg !35
  %121 = bitcast float %117 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %108, <1 x i32> %121, i1 %120) #5, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %122 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !35
  %123 = fadd float %122, 0.000000e+00, !dbg !36
  %124 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %123, float 5.120000e+02) #5, !dbg !40
  %125 = fsub float %78, %124, !dbg !29
  %126 = fsub float %79, %124, !dbg !29
  %127 = fsub float %75, %124, !dbg !29
  %128 = fsub float %77, %124, !dbg !29
  %129 = fmul float %125, %125, !dbg !41
  %130 = fmul float %126, %126, !dbg !41
  %131 = fmul float %127, %127, !dbg !41
  %132 = fmul float %128, %128, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %133 = fadd float %129, %130, !dbg !44
  %134 = fadd float %131, %133, !dbg !44
  %135 = fadd float %132, %134, !dbg !44
  %136 = bitcast float %135 to i32, !dbg !42
  %137 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %136, i32 16, i32 31), !dbg !42
  %138 = bitcast i32 %137 to float, !dbg !42
  %139 = fadd float %135, %138, !dbg !44
  %140 = bitcast float %139 to i32, !dbg !42
  %141 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %140, i32 8, i32 31), !dbg !42
  %142 = bitcast i32 %141 to float, !dbg !42
  %143 = fadd float %139, %142, !dbg !44
  %144 = bitcast float %143 to i32, !dbg !42
  %145 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %144, i32 4, i32 31), !dbg !42
  %146 = bitcast i32 %145 to float, !dbg !42
  %147 = fadd float %143, %146, !dbg !44
  %148 = bitcast float %147 to i32, !dbg !42
  %149 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %148, i32 2, i32 31), !dbg !42
  %150 = bitcast i32 %149 to float, !dbg !42
  %151 = fadd float %147, %150, !dbg !44
  %152 = bitcast float %151 to i32, !dbg !42
  %153 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %152, i32 1, i32 31), !dbg !42
  %154 = bitcast i32 %153 to float, !dbg !42
  %155 = fadd float %151, %154, !dbg !44
  %156 = bitcast float %155 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %105, <1 x i32> %156, i1 %103) #5, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %157 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %108, i1 %107) #5, !dbg !42
  %158 = bitcast i32 %157 to float, !dbg !42
  %159 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %157, i32 2, i32 31), !dbg !42
  %160 = bitcast i32 %159 to float, !dbg !42
  %161 = fadd float %158, %160, !dbg !44
  %162 = bitcast float %161 to i32, !dbg !42
  %163 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %162, i32 1, i32 31), !dbg !42
  %164 = bitcast i32 %163 to float, !dbg !42
  %165 = fadd float %161, %164, !dbg !44
  %166 = bitcast float %165 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %108, <1 x i32> %166, i1 %120) #5, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %167 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !42
  %168 = fadd float %167, 0.000000e+00, !dbg !45
  %169 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %168, float 5.120000e+02) #5, !dbg !47
  %170 = fadd float %169, 0x3EE4F8B580000000, !dbg !48
  %171 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !49
  %.not.i = icmp eq i32 %171, 0, !dbg !49
  br i1 %.not.i, label %174, label %172, !dbg !49

172:                                              ; preds = %8
  %173 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %170), !dbg !49
  br label %__nv_rsqrtf.exit, !dbg !49

174:                                              ; preds = %8
  %175 = tail call float @llvm.nvvm.rsqrt.approx.f(float %170), !dbg !49
  br label %__nv_rsqrtf.exit, !dbg !49

__nv_rsqrtf.exit:                                 ; preds = %172, %174
  %.0.i = phi float [ %173, %172 ], [ %175, %174 ], !dbg !49
  %176 = bitcast float %78 to i32, !dbg !50
  %177 = bitcast float %79 to i32, !dbg !50
  %178 = bitcast float %75 to i32, !dbg !50
  %179 = bitcast float %77 to i32, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %176, i32 %177, i32 %178, i32 %179, ptr addrspace(1) %20, i1 true) #5, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %180 = sext i32 %9 to i64, !dbg !52
  %181 = getelementptr float, ptr addrspace(1) %1, i64 %180, !dbg !52
  %urem = and i32 %10, 127, !dbg !53
  %182 = icmp eq i32 %urem, 0, !dbg !53
  %183 = bitcast float %.0.i to i32, !dbg !53
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %183, ptr addrspace(1) %181, i1 %182) #5, !dbg !53
  %184 = getelementptr float, ptr addrspace(1) %5, i64 %180, !dbg !54
  %185 = bitcast float %124 to i32, !dbg !55
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %185, ptr addrspace(1) %184, i1 %182) #5, !dbg !55
  ret void, !dbg !56
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cfkyjefhfw3licpk7agvdvm3wnh3yazi3oupqaowmiud4fm2mvzz.py", directory: "inductor_cache/fk")
!4 = !{ptr @triton_per_fused_add_convolution_native_group_norm_50, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_convolution_native_group_norm_50, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_convolution_native_group_norm_50", linkageName: "triton_per_fused_add_convolution_native_group_norm_50", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 24, column: 28, scope: !7)
!11 = !DILocation(line: 27, column: 26, scope: !7)
!12 = !DILocation(line: 32, column: 19, scope: !7)
!13 = !DILocation(line: 33, column: 19, scope: !7)
!14 = !DILocation(line: 34, column: 43, scope: !7)
!15 = !DILocation(line: 34, column: 39, scope: !7)
!16 = !DILocation(line: 34, column: 34, scope: !7)
!17 = !DILocation(line: 34, column: 48, scope: !7)
!18 = !DILocation(line: 35, column: 37, scope: !7)
!19 = !DILocation(line: 35, column: 35, scope: !7)
!20 = !DILocation(line: 35, column: 30, scope: !7)
!21 = !DILocation(line: 35, column: 42, scope: !7)
!22 = !DILocation(line: 36, column: 30, scope: !7)
!23 = !DILocation(line: 36, column: 44, scope: !7)
!24 = !DILocation(line: 37, column: 30, scope: !7)
!25 = !DILocation(line: 37, column: 42, scope: !7)
!26 = !DILocation(line: 38, column: 18, scope: !7)
!27 = !DILocation(line: 39, column: 18, scope: !7)
!28 = !DILocation(line: 40, column: 18, scope: !7)
!29 = !DILocation(line: 47, column: 19, scope: !7)
!30 = !DILocation(line: 256, column: 15, scope: !31, inlinedAt: !34)
!31 = distinct !DILexicalBlockFile(scope: !33, file: !32, discriminator: 0)
!32 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!33 = distinct !DILexicalBlockFile(scope: !7, file: !32, discriminator: 0)
!34 = !DILocation(line: 43, column: 58, scope: !7)
!35 = !DILocation(line: 267, column: 36, scope: !33, inlinedAt: !34)
!36 = !DILocation(line: 73, column: 15, scope: !37, inlinedAt: !39)
!37 = distinct !DILexicalBlockFile(scope: !7, file: !38, discriminator: 0)
!38 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!39 = !DILocation(line: 43, column: 45, scope: !7)
!40 = !DILocation(line: 46, column: 20, scope: !7)
!41 = !DILocation(line: 48, column: 20, scope: !7)
!42 = !DILocation(line: 267, column: 36, scope: !33, inlinedAt: !43)
!43 = !DILocation(line: 50, column: 59, scope: !7)
!44 = !DILocation(line: 256, column: 15, scope: !31, inlinedAt: !43)
!45 = !DILocation(line: 73, column: 15, scope: !37, inlinedAt: !46)
!46 = !DILocation(line: 50, column: 45, scope: !7)
!47 = !DILocation(line: 52, column: 20, scope: !7)
!48 = !DILocation(line: 54, column: 20, scope: !7)
!49 = !DILocation(line: 55, column: 28, scope: !7)
!50 = !DILocation(line: 56, column: 48, scope: !7)
!51 = !DILocation(line: 57, column: 4, scope: !7)
!52 = !DILocation(line: 58, column: 28, scope: !7)
!53 = !DILocation(line: 58, column: 40, scope: !7)
!54 = !DILocation(line: 59, column: 25, scope: !7)
!55 = !DILocation(line: 59, column: 37, scope: !7)
!56 = !DILocation(line: 59, column: 4, scope: !7)
