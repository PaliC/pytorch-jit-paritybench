; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_sigmoid_24(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %8 = shl i32 %7, 8, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = shl i32 %9, 1, !dbg !12
  %11 = and i32 %10, 254, !dbg !12
  %12 = or disjoint i32 %8, %11, !dbg !13
  %.frozen = freeze i32 %12, !dbg !14
  %13 = sdiv i32 %.frozen, 8, !dbg !14
  %14 = srem i32 %13, 8, !dbg !15
  %15 = mul i32 %13, 8, !dbg !16
  %.decomposed = sub i32 %.frozen, %15, !dbg !16
  %16 = sdiv i32 %12, 64, !dbg !17
  %17 = sext i32 %14 to i64, !dbg !18
  %18 = getelementptr i64, ptr addrspace(1) %0, i64 %17, !dbg !18
  %19 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %18, i1 true) #1, !dbg !19
  %20 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %18, i1 true) #1, !dbg !19
  %21 = sext i32 %.decomposed to i64, !dbg !20
  %22 = getelementptr i64, ptr addrspace(1) %0, i64 %21, !dbg !20
  %23 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %22, i1 true) #1, !dbg !21
  %24 = extractvalue { i64, i64 } %23, 0, !dbg !21
  %25 = extractvalue { i64, i64 } %23, 1, !dbg !21
  %26 = sext i32 %16 to i64, !dbg !22
  %27 = getelementptr float, ptr addrspace(1) %2, i64 %26, !dbg !22
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 true) #1, !dbg !23
  %29 = bitcast i32 %28 to float, !dbg !23
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 true) #1, !dbg !23
  %31 = bitcast i32 %30 to float, !dbg !23
  %32 = lshr i64 %19, 61, !dbg !24
  %33 = and i64 %32, 4, !dbg !24
  %34 = add i64 %33, %19, !dbg !24
  %35 = lshr i64 %24, 61, !dbg !25
  %36 = and i64 %35, 4, !dbg !25
  %37 = lshr i64 %25, 61, !dbg !25
  %38 = and i64 %37, 4, !dbg !25
  %39 = shl i64 %34, 2, !dbg !26
  %40 = shl nsw i32 %16, 4, !dbg !27
  %41 = sext i32 %40 to i64, !dbg !28
  %42 = add i64 %39, %41, !dbg !25
  %43 = add i64 %42, %24, !dbg !29
  %44 = add i64 %43, %36, !dbg !28
  %45 = add i64 %42, %25, !dbg !29
  %46 = add i64 %45, %38, !dbg !28
  %47 = getelementptr float, ptr addrspace(1) %1, i64 %44, !dbg !30
  %48 = getelementptr float, ptr addrspace(1) %1, i64 %46, !dbg !30
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 true) #1, !dbg !31
  %50 = bitcast i32 %49 to float, !dbg !31
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #1, !dbg !31
  %52 = bitcast i32 %51 to float, !dbg !31
  %53 = fmul float %29, %50, !dbg !32
  %54 = fmul float %31, %52, !dbg !32
  %55 = getelementptr float, ptr addrspace(1) %3, i64 %44, !dbg !33
  %56 = getelementptr float, ptr addrspace(1) %3, i64 %46, !dbg !33
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 true) #1, !dbg !34
  %58 = bitcast i32 %57 to float, !dbg !34
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 true) #1, !dbg !34
  %60 = bitcast i32 %59 to float, !dbg !34
  %61 = fadd float %53, %58, !dbg !35
  %62 = fadd float %54, %60, !dbg !35
  %63 = sext i32 %12 to i64, !dbg !36
  %64 = getelementptr float, ptr addrspace(1) %4, i64 %63, !dbg !36
  %65 = bitcast float %61 to i32, !dbg !37
  %66 = bitcast float %62 to i32, !dbg !37
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %65, i32 %66, ptr addrspace(1) %64, i1 true) #1, !dbg !37
  ret void, !dbg !38
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cpevsd7oj63uu4wl4fava5imfb4ptwvwj2i3vcrbwiat3do3vdqr.py", directory: "inductor_cache/pe")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_sigmoid_24, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_sigmoid_24, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_sigmoid_24", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_sigmoid_24", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 26, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 30, scope: !7)
!19 = !DILocation(line: 28, column: 35, scope: !7)
!20 = !DILocation(line: 29, column: 30, scope: !7)
!21 = !DILocation(line: 29, column: 35, scope: !7)
!22 = !DILocation(line: 30, column: 31, scope: !7)
!23 = !DILocation(line: 30, column: 36, scope: !7)
!24 = !DILocation(line: 34, column: 32, scope: !7)
!25 = !DILocation(line: 37, column: 32, scope: !7)
!26 = !DILocation(line: 38, column: 39, scope: !7)
!27 = !DILocation(line: 38, column: 49, scope: !7)
!28 = !DILocation(line: 38, column: 46, scope: !7)
!29 = !DILocation(line: 38, column: 37, scope: !7)
!30 = !DILocation(line: 38, column: 30, scope: !7)
!31 = !DILocation(line: 38, column: 54, scope: !7)
!32 = !DILocation(line: 39, column: 19, scope: !7)
!33 = !DILocation(line: 40, column: 31, scope: !7)
!34 = !DILocation(line: 40, column: 55, scope: !7)
!35 = !DILocation(line: 41, column: 20, scope: !7)
!36 = !DILocation(line: 42, column: 25, scope: !7)
!37 = !DILocation(line: 42, column: 37, scope: !7)
!38 = !DILocation(line: 42, column: 4, scope: !7)
