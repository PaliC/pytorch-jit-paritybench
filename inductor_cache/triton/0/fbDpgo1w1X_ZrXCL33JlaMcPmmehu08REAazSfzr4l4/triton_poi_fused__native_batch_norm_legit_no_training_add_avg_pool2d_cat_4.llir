; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_avg_pool2d_cat_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, i32 %11) local_unnamed_addr !dbg !7 {
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %14 = shl i32 %13, 7, !dbg !11
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %16 = and i32 %15, 127, !dbg !12
  %17 = or disjoint i32 %14, %16, !dbg !13
  %18 = icmp slt i32 %17, 256, !dbg !14
  %19 = sdiv i32 %17, 4, !dbg !15
  %20 = sdiv i32 %17, 16, !dbg !16
  %21 = srem i32 %20, 4, !dbg !17
  %22 = sext i32 %17 to i64, !dbg !18
  %23 = getelementptr float, ptr addrspace(1) %1, i64 %22, !dbg !18
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 %18) #3, !dbg !19
  %25 = getelementptr float, ptr addrspace(1) %2, i64 %22, !dbg !20
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 %18) #3, !dbg !21
  %27 = sext i32 %21 to i64, !dbg !22
  %28 = getelementptr float, ptr addrspace(1) %3, i64 %27, !dbg !22
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 %18) #3, !dbg !23
  %30 = getelementptr float, ptr addrspace(1) %4, i64 %27, !dbg !24
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 %18) #3, !dbg !25
  %32 = bitcast i32 %31 to float, !dbg !25
  %33 = getelementptr float, ptr addrspace(1) %5, i64 %27, !dbg !26
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 %18) #3, !dbg !27
  %35 = getelementptr float, ptr addrspace(1) %6, i64 %27, !dbg !28
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 %18) #3, !dbg !29
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !30
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %18) #3, !dbg !31
  %39 = add i32 %17, -5, !dbg !32
  %40 = sext i32 %39 to i64, !dbg !33
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !33
  %42 = add i32 %17, -4, !dbg !34
  %43 = sext i32 %42 to i64, !dbg !35
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !35
  %45 = add i32 %17, -3, !dbg !36
  %46 = sext i32 %45 to i64, !dbg !37
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !37
  %48 = add i32 %17, -1, !dbg !38
  %49 = sext i32 %48 to i64, !dbg !39
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !39
  %51 = add i32 %17, 1, !dbg !40
  %52 = sext i32 %51 to i64, !dbg !41
  %53 = getelementptr float, ptr addrspace(1) %0, i64 %52, !dbg !41
  %54 = insertelement <2 x i32> poison, i32 %19, i64 0, !dbg !42
  %55 = insertelement <2 x i32> %54, i32 %17, i64 1, !dbg !42
  %56 = srem <2 x i32> %55, splat (i32 4), !dbg !42
  %57 = extractelement <2 x i32> %56, i64 0, !dbg !43
  %58 = add nsw i32 %57, -1, !dbg !44
  %59 = icmp sgt i32 %57, 0, !dbg !45
  %60 = extractelement <2 x i32> %56, i64 1, !dbg !46
  %61 = add nsw i32 %60, -1, !dbg !47
  %62 = icmp sgt i32 %60, 0, !dbg !48
  %63 = and i1 %62, %59, !dbg !49
  %64 = and i1 %18, %63, !dbg !50
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %41, i1 %64, i32 0, i1 %64) #3, !dbg !51
  %66 = bitcast i32 %65 to float, !dbg !51
  %67 = icmp sgt i32 %60, -1, !dbg !52
  %68 = and i1 %67, %59, !dbg !53
  %69 = and i1 %18, %68, !dbg !54
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %44, i1 %69, i32 0, i1 %69) #3, !dbg !55
  %71 = bitcast i32 %70 to float, !dbg !55
  %72 = fadd float %66, %71, !dbg !56
  %73 = add nsw <2 x i32> %56, splat (i32 1), !dbg !57
  %74 = extractelement <2 x i32> %73, i64 1, !dbg !58
  %75 = icmp ult i32 %74, 4, !dbg !59
  %76 = and i1 %59, %75, !dbg !60
  %77 = and i1 %18, %76, !dbg !61
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %47, i1 %77, i32 0, i1 %77) #3, !dbg !62
  %79 = bitcast i32 %78 to float, !dbg !62
  %80 = fadd float %72, %79, !dbg !63
  %81 = icmp sgt i32 %57, -1, !dbg !64
  %82 = and i1 %62, %81, !dbg !65
  %83 = and i1 %18, %82, !dbg !66
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %50, i1 %83, i32 0, i1 %83) #3, !dbg !67
  %85 = bitcast i32 %84 to float, !dbg !67
  %86 = fadd float %80, %85, !dbg !68
  %87 = or i32 %57, %60, !dbg !69
  %88 = icmp sgt i32 %87, -1, !dbg !69
  %89 = and i1 %18, %88, !dbg !70
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %37, i1 %89, i32 0, i1 %89) #3, !dbg !71
  %91 = bitcast i32 %90 to float, !dbg !71
  %92 = fadd float %86, %91, !dbg !72
  %93 = and i1 %81, %75, !dbg !73
  %94 = and i1 %18, %93, !dbg !74
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %53, i1 %94, i32 0, i1 %94) #3, !dbg !75
  %96 = bitcast i32 %95 to float, !dbg !75
  %97 = fadd float %92, %96, !dbg !76
  %98 = extractelement <2 x i32> %73, i64 0, !dbg !58
  %99 = icmp ult i32 %98, 4, !dbg !57
  %100 = and i1 %62, %99, !dbg !77
  %101 = add i32 %17, 3, !dbg !78
  %102 = sext i32 %101 to i64, !dbg !79
  %103 = getelementptr float, ptr addrspace(1) %0, i64 %102, !dbg !79
  %104 = and i1 %18, %100, !dbg !80
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %103, i1 %104, i32 0, i1 %104) #3, !dbg !81
  %106 = bitcast i32 %105 to float, !dbg !81
  %107 = fadd float %97, %106, !dbg !82
  %108 = and i1 %67, %99, !dbg !83
  %109 = add i32 %17, 4, !dbg !84
  %110 = sext i32 %109 to i64, !dbg !85
  %111 = getelementptr float, ptr addrspace(1) %0, i64 %110, !dbg !85
  %112 = and i1 %18, %108, !dbg !86
  %113 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %111, i1 %112, i32 0, i1 %112) #3, !dbg !87
  %114 = bitcast i32 %113 to float, !dbg !87
  %115 = fadd float %107, %114, !dbg !88
  %116 = or i32 %98, %74, !dbg !58
  %117 = icmp ult i32 %116, 4, !dbg !58
  %118 = add i32 %17, 5, !dbg !89
  %119 = sext i32 %118 to i64, !dbg !90
  %120 = getelementptr float, ptr addrspace(1) %0, i64 %119, !dbg !90
  %121 = and i1 %18, %117, !dbg !91
  %122 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %120, i1 %121, i32 0, i1 %121) #3, !dbg !92
  %123 = bitcast i32 %122 to float, !dbg !92
  %124 = fadd float %115, %123, !dbg !93
  %125 = icmp sgt i32 %60, 1, !dbg !94
  %126 = select i1 %125, i32 %61, i32 0, !dbg !95
  %127 = icmp sgt i32 %57, 1, !dbg !96
  %128 = select i1 %127, i32 %58, i32 0, !dbg !97
  %129 = add nsw i32 %60, 2, !dbg !98
  %130 = select i1 %125, i32 4, i32 0, !dbg !99
  %131 = icmp slt i32 %60, 2, !dbg !46
  %132 = select i1 %131, i32 %129, i32 0, !dbg !100
  %133 = add nsw i32 %130, %132, !dbg !101
  %134 = add nsw i32 %57, 2, !dbg !102
  %135 = select i1 %127, i32 4, i32 0, !dbg !103
  %136 = icmp slt i32 %57, 2, !dbg !43
  %137 = select i1 %136, i32 %134, i32 0, !dbg !104
  %138 = add nsw i32 %135, %137, !dbg !105
  %reass.add = sub nsw i32 %133, %126
  %reass.mul = mul nsw i32 %reass.add, %138
  %reass.add3 = sub nsw i32 %126, %133
  %reass.mul4 = mul nsw i32 %reass.add3, %128
  %139 = add nsw i32 %reass.mul4, %reass.mul, !dbg !106
  %140 = sitofp i32 %139 to float, !dbg !107
  %141 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %124, float %140) #3, !dbg !107
  %142 = getelementptr float, ptr addrspace(1) %1, i64 %40, !dbg !108
  %143 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %142, i1 %64, i32 0, i1 %64) #3, !dbg !109
  %144 = bitcast i32 %143 to float, !dbg !109
  %145 = getelementptr float, ptr addrspace(1) %1, i64 %43, !dbg !110
  %146 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %145, i1 %69, i32 0, i1 %69) #3, !dbg !111
  %147 = bitcast i32 %146 to float, !dbg !111
  %148 = fadd float %144, %147, !dbg !112
  %149 = getelementptr float, ptr addrspace(1) %1, i64 %46, !dbg !113
  %150 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %149, i1 %77, i32 0, i1 %77) #3, !dbg !114
  %151 = bitcast i32 %150 to float, !dbg !114
  %152 = fadd float %148, %151, !dbg !115
  %153 = getelementptr float, ptr addrspace(1) %1, i64 %49, !dbg !116
  %154 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %153, i1 %83, i32 0, i1 %83) #3, !dbg !117
  %155 = bitcast i32 %154 to float, !dbg !117
  %156 = fadd float %152, %155, !dbg !118
  %157 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %23, i1 %89, i32 0, i1 %89) #3, !dbg !119
  %158 = bitcast i32 %157 to float, !dbg !119
  %159 = fadd float %156, %158, !dbg !120
  %160 = getelementptr float, ptr addrspace(1) %1, i64 %52, !dbg !121
  %161 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %160, i1 %94, i32 0, i1 %94) #3, !dbg !122
  %162 = bitcast i32 %161 to float, !dbg !122
  %163 = fadd float %159, %162, !dbg !123
  %164 = getelementptr float, ptr addrspace(1) %1, i64 %102, !dbg !124
  %165 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %164, i1 %104, i32 0, i1 %104) #3, !dbg !125
  %166 = bitcast i32 %165 to float, !dbg !125
  %167 = fadd float %163, %166, !dbg !126
  %168 = getelementptr float, ptr addrspace(1) %1, i64 %110, !dbg !127
  %169 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %168, i1 %112, i32 0, i1 %112) #3, !dbg !128
  %170 = bitcast i32 %169 to float, !dbg !128
  %171 = fadd float %167, %170, !dbg !129
  %172 = getelementptr float, ptr addrspace(1) %1, i64 %119, !dbg !130
  %173 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %172, i1 %121, i32 0, i1 %121) #3, !dbg !131
  %174 = bitcast i32 %173 to float, !dbg !131
  %175 = fadd float %171, %174, !dbg !132
  %176 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %175, float %140) #3, !dbg !133
  %177 = fadd float %32, 0x3F50624DE0000000, !dbg !134
  %178 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !135
  %.not.i = icmp eq i32 %178, 0, !dbg !135
  %179 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !135
  %.not1.i = icmp eq i32 %179, 0, !dbg !135
  br i1 %.not.i, label %185, label %180, !dbg !135

180:                                              ; preds = %12
  br i1 %.not1.i, label %183, label %181, !dbg !135

181:                                              ; preds = %180
  %182 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %177) #3, !dbg !135
  br label %__nv_sqrtf.exit, !dbg !135

183:                                              ; preds = %180
  %184 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %177) #3, !dbg !135
  br label %__nv_sqrtf.exit, !dbg !135

185:                                              ; preds = %12
  br i1 %.not1.i, label %188, label %186, !dbg !135

186:                                              ; preds = %185
  %187 = tail call float @llvm.nvvm.sqrt.rn.f(float %177) #3, !dbg !135
  br label %__nv_sqrtf.exit, !dbg !135

188:                                              ; preds = %185
  %189 = tail call float @llvm.nvvm.sqrt.approx.f(float %177) #3, !dbg !135
  br label %__nv_sqrtf.exit, !dbg !135

__nv_sqrtf.exit:                                  ; preds = %181, %183, %186, %188
  %.0.i = phi float [ %182, %181 ], [ %184, %183 ], [ %187, %186 ], [ %189, %188 ], !dbg !135
  %190 = bitcast i32 %26 to float, !dbg !21
  %191 = bitcast i32 %29 to float, !dbg !23
  %192 = fsub float %190, %191, !dbg !136
  %193 = fadd float %176, %176, !dbg !137
  %194 = bitcast i32 %24 to float, !dbg !19
  %195 = fadd float %141, %194, !dbg !138
  %196 = bitcast i32 %38 to float, !dbg !31
  %197 = bitcast i32 %36 to float, !dbg !29
  %198 = bitcast i32 %34 to float, !dbg !27
  %.frozen = freeze i32 %17, !dbg !139
  %199 = sdiv i32 %.frozen, 64, !dbg !139
  %200 = mul i32 %199, 64, !dbg !140
  %.decomposed = sub i32 %.frozen, %200, !dbg !140
  %201 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !141
  %202 = fmul float %192, %201, !dbg !142
  %203 = fmul float %202, %198, !dbg !143
  %204 = fadd float %203, %197, !dbg !144
  %205 = fadd float %204, %196, !dbg !145
  %206 = mul i32 %199, 384, !dbg !146
  %207 = add i32 %206, %.decomposed, !dbg !147
  %208 = sext i32 %207 to i64, !dbg !148
  %209 = getelementptr float, ptr addrspace(1) %7, i64 %208, !dbg !148
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %24, ptr addrspace(1) %209, i1 %18) #3, !dbg !149
  %210 = getelementptr float, ptr addrspace(1) %8, i64 %208, !dbg !150
  %211 = bitcast float %195 to i32, !dbg !151
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %211, ptr addrspace(1) %210, i1 %18) #3, !dbg !151
  %212 = getelementptr float, ptr addrspace(1) %9, i64 %208, !dbg !152
  %213 = bitcast float %193 to i32, !dbg !153
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %213, ptr addrspace(1) %212, i1 %18) #3, !dbg !153
  %214 = getelementptr float, ptr addrspace(1) %10, i64 %208, !dbg !154
  %215 = bitcast float %205 to i32, !dbg !155
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %215, ptr addrspace(1) %214, i1 %18) #3, !dbg !155
  ret void, !dbg !156
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cyd2mwxe7egr3renivsfv6huiim3h3ahfw42hyt3saapidgdv3ak.py", directory: "inductor_cache/yd")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_avg_pool2d_cat_4, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_avg_pool2d_cat_4, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_avg_pool2d_cat_4", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_avg_pool2d_cat_4", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 29, column: 21, scope: !7)
!17 = !DILocation(line: 29, column: 27, scope: !7)
!18 = !DILocation(line: 30, column: 31, scope: !7)
!19 = !DILocation(line: 30, column: 36, scope: !7)
!20 = !DILocation(line: 31, column: 31, scope: !7)
!21 = !DILocation(line: 31, column: 36, scope: !7)
!22 = !DILocation(line: 32, column: 31, scope: !7)
!23 = !DILocation(line: 32, column: 36, scope: !7)
!24 = !DILocation(line: 33, column: 31, scope: !7)
!25 = !DILocation(line: 33, column: 36, scope: !7)
!26 = !DILocation(line: 34, column: 31, scope: !7)
!27 = !DILocation(line: 34, column: 36, scope: !7)
!28 = !DILocation(line: 35, column: 31, scope: !7)
!29 = !DILocation(line: 35, column: 36, scope: !7)
!30 = !DILocation(line: 36, column: 31, scope: !7)
!31 = !DILocation(line: 36, column: 36, scope: !7)
!32 = !DILocation(line: 48, column: 38, scope: !7)
!33 = !DILocation(line: 48, column: 31, scope: !7)
!34 = !DILocation(line: 54, column: 38, scope: !7)
!35 = !DILocation(line: 54, column: 31, scope: !7)
!36 = !DILocation(line: 61, column: 38, scope: !7)
!37 = !DILocation(line: 61, column: 31, scope: !7)
!38 = !DILocation(line: 68, column: 38, scope: !7)
!39 = !DILocation(line: 68, column: 31, scope: !7)
!40 = !DILocation(line: 74, column: 35, scope: !7)
!41 = !DILocation(line: 74, column: 31, scope: !7)
!42 = !DILocation(line: 24, column: 26, scope: !7)
!43 = !DILocation(line: 89, column: 251, scope: !7)
!44 = !DILocation(line: 37, column: 18, scope: !7)
!45 = !DILocation(line: 39, column: 19, scope: !7)
!46 = !DILocation(line: 89, column: 195, scope: !7)
!47 = !DILocation(line: 43, column: 18, scope: !7)
!48 = !DILocation(line: 44, column: 19, scope: !7)
!49 = !DILocation(line: 47, column: 19, scope: !7)
!50 = !DILocation(line: 48, column: 51, scope: !7)
!51 = !DILocation(line: 48, column: 43, scope: !7)
!52 = !DILocation(line: 50, column: 21, scope: !7)
!53 = !DILocation(line: 53, column: 19, scope: !7)
!54 = !DILocation(line: 54, column: 51, scope: !7)
!55 = !DILocation(line: 54, column: 43, scope: !7)
!56 = !DILocation(line: 55, column: 20, scope: !7)
!57 = !DILocation(line: 79, column: 20, scope: !7)
!58 = !DILocation(line: 86, column: 20, scope: !7)
!59 = !DILocation(line: 59, column: 20, scope: !7)
!60 = !DILocation(line: 60, column: 19, scope: !7)
!61 = !DILocation(line: 61, column: 51, scope: !7)
!62 = !DILocation(line: 61, column: 43, scope: !7)
!63 = !DILocation(line: 62, column: 20, scope: !7)
!64 = !DILocation(line: 64, column: 21, scope: !7)
!65 = !DILocation(line: 67, column: 20, scope: !7)
!66 = !DILocation(line: 68, column: 51, scope: !7)
!67 = !DILocation(line: 68, column: 43, scope: !7)
!68 = !DILocation(line: 69, column: 20, scope: !7)
!69 = !DILocation(line: 70, column: 20, scope: !7)
!70 = !DILocation(line: 71, column: 44, scope: !7)
!71 = !DILocation(line: 71, column: 36, scope: !7)
!72 = !DILocation(line: 72, column: 20, scope: !7)
!73 = !DILocation(line: 73, column: 20, scope: !7)
!74 = !DILocation(line: 74, column: 48, scope: !7)
!75 = !DILocation(line: 74, column: 40, scope: !7)
!76 = !DILocation(line: 75, column: 20, scope: !7)
!77 = !DILocation(line: 80, column: 20, scope: !7)
!78 = !DILocation(line: 81, column: 35, scope: !7)
!79 = !DILocation(line: 81, column: 31, scope: !7)
!80 = !DILocation(line: 81, column: 48, scope: !7)
!81 = !DILocation(line: 81, column: 40, scope: !7)
!82 = !DILocation(line: 82, column: 20, scope: !7)
!83 = !DILocation(line: 83, column: 20, scope: !7)
!84 = !DILocation(line: 84, column: 35, scope: !7)
!85 = !DILocation(line: 84, column: 31, scope: !7)
!86 = !DILocation(line: 84, column: 48, scope: !7)
!87 = !DILocation(line: 84, column: 40, scope: !7)
!88 = !DILocation(line: 85, column: 20, scope: !7)
!89 = !DILocation(line: 87, column: 35, scope: !7)
!90 = !DILocation(line: 87, column: 31, scope: !7)
!91 = !DILocation(line: 87, column: 48, scope: !7)
!92 = !DILocation(line: 87, column: 40, scope: !7)
!93 = !DILocation(line: 88, column: 20, scope: !7)
!94 = !DILocation(line: 89, column: 72, scope: !7)
!95 = !DILocation(line: 89, column: 57, scope: !7)
!96 = !DILocation(line: 89, column: 137, scope: !7)
!97 = !DILocation(line: 89, column: 122, scope: !7)
!98 = !DILocation(line: 89, column: 164, scope: !7)
!99 = !DILocation(line: 89, column: 152, scope: !7)
!100 = !DILocation(line: 89, column: 183, scope: !7)
!101 = !DILocation(line: 89, column: 171, scope: !7)
!102 = !DILocation(line: 89, column: 220, scope: !7)
!103 = !DILocation(line: 89, column: 208, scope: !7)
!104 = !DILocation(line: 89, column: 239, scope: !7)
!105 = !DILocation(line: 89, column: 227, scope: !7)
!106 = !DILocation(line: 89, column: 389, scope: !7)
!107 = !DILocation(line: 90, column: 20, scope: !7)
!108 = !DILocation(line: 91, column: 31, scope: !7)
!109 = !DILocation(line: 91, column: 43, scope: !7)
!110 = !DILocation(line: 92, column: 31, scope: !7)
!111 = !DILocation(line: 92, column: 43, scope: !7)
!112 = !DILocation(line: 93, column: 20, scope: !7)
!113 = !DILocation(line: 94, column: 31, scope: !7)
!114 = !DILocation(line: 94, column: 43, scope: !7)
!115 = !DILocation(line: 95, column: 20, scope: !7)
!116 = !DILocation(line: 96, column: 31, scope: !7)
!117 = !DILocation(line: 96, column: 43, scope: !7)
!118 = !DILocation(line: 97, column: 20, scope: !7)
!119 = !DILocation(line: 98, column: 36, scope: !7)
!120 = !DILocation(line: 99, column: 20, scope: !7)
!121 = !DILocation(line: 100, column: 31, scope: !7)
!122 = !DILocation(line: 100, column: 40, scope: !7)
!123 = !DILocation(line: 101, column: 20, scope: !7)
!124 = !DILocation(line: 102, column: 31, scope: !7)
!125 = !DILocation(line: 102, column: 40, scope: !7)
!126 = !DILocation(line: 103, column: 20, scope: !7)
!127 = !DILocation(line: 104, column: 31, scope: !7)
!128 = !DILocation(line: 104, column: 40, scope: !7)
!129 = !DILocation(line: 105, column: 20, scope: !7)
!130 = !DILocation(line: 106, column: 31, scope: !7)
!131 = !DILocation(line: 106, column: 40, scope: !7)
!132 = !DILocation(line: 107, column: 20, scope: !7)
!133 = !DILocation(line: 108, column: 20, scope: !7)
!134 = !DILocation(line: 113, column: 20, scope: !7)
!135 = !DILocation(line: 114, column: 27, scope: !7)
!136 = !DILocation(line: 111, column: 20, scope: !7)
!137 = !DILocation(line: 110, column: 20, scope: !7)
!138 = !DILocation(line: 109, column: 20, scope: !7)
!139 = !DILocation(line: 28, column: 19, scope: !7)
!140 = !DILocation(line: 27, column: 19, scope: !7)
!141 = !DILocation(line: 116, column: 20, scope: !7)
!142 = !DILocation(line: 119, column: 20, scope: !7)
!143 = !DILocation(line: 120, column: 20, scope: !7)
!144 = !DILocation(line: 121, column: 20, scope: !7)
!145 = !DILocation(line: 122, column: 20, scope: !7)
!146 = !DILocation(line: 123, column: 34, scope: !7)
!147 = !DILocation(line: 123, column: 30, scope: !7)
!148 = !DILocation(line: 123, column: 25, scope: !7)
!149 = !DILocation(line: 123, column: 46, scope: !7)
!150 = !DILocation(line: 124, column: 25, scope: !7)
!151 = !DILocation(line: 124, column: 46, scope: !7)
!152 = !DILocation(line: 125, column: 25, scope: !7)
!153 = !DILocation(line: 125, column: 46, scope: !7)
!154 = !DILocation(line: 126, column: 25, scope: !7)
!155 = !DILocation(line: 126, column: 46, scope: !7)
!156 = !DILocation(line: 126, column: 4, scope: !7)
