; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused_add_convolution_div_max_pool2d_with_indices_pow_relu_sqrt_sub_sum_9(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
__nv_sqrtf.exit:
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %8 = and i32 %7, 31, !dbg !11
  %9 = lshr i32 %7, 5, !dbg !11
  %10 = shl i32 %7, 1, !dbg !11
  %11 = and i32 %10, 126, !dbg !11
  %12 = shl i32 %6, 7, !dbg !12
  %13 = or disjoint i32 %12, %11, !dbg !13
  %14 = sext i32 %13 to i64, !dbg !14
  %15 = getelementptr float, ptr addrspace(1) %0, i64 %14, !dbg !14
  %16 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %15, i1 true) #5, !dbg !15
  %17 = extractvalue { i32, i32 } %16, 0, !dbg !15
  %18 = extractvalue { i32, i32 } %16, 1, !dbg !15
  %19 = bitcast i32 %17 to float, !dbg !15
  %20 = bitcast i32 %18 to float, !dbg !15
  %21 = zext nneg i32 %11 to i64, !dbg !16
  %22 = getelementptr float, ptr addrspace(1) %2, i64 %21, !dbg !16
  %23 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %22, i1 true) #5, !dbg !17
  %24 = extractvalue { i32, i32 } %23, 0, !dbg !17
  %25 = extractvalue { i32, i32 } %23, 1, !dbg !17
  %26 = bitcast i32 %24 to float, !dbg !17
  %27 = bitcast i32 %25 to float, !dbg !17
  %28 = getelementptr float, ptr addrspace(1) %1, i64 %14, !dbg !18
  %29 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %28, i1 true) #5, !dbg !19
  %30 = extractvalue { i32, i32 } %29, 0, !dbg !19
  %31 = extractvalue { i32, i32 } %29, 1, !dbg !19
  %32 = bitcast i32 %30 to float, !dbg !19
  %33 = bitcast i32 %31 to float, !dbg !19
  %34 = fadd float %19, %26, !dbg !20
  %35 = fadd float %20, %27, !dbg !20
  %36 = fcmp olt float %34, 0.000000e+00, !dbg !21
  %37 = fcmp olt float %35, 0.000000e+00, !dbg !21
  %38 = select i1 %36, float 0.000000e+00, float %34, !dbg !25
  %39 = select i1 %37, float 0.000000e+00, float %35, !dbg !25
  %40 = fadd float %26, %32, !dbg !26
  %41 = fadd float %27, %33, !dbg !26
  %42 = fcmp olt float %40, 0.000000e+00, !dbg !27
  %43 = fcmp olt float %41, 0.000000e+00, !dbg !27
  %44 = select i1 %42, float 0.000000e+00, float %40, !dbg !29
  %45 = select i1 %43, float 0.000000e+00, float %41, !dbg !29
  %46 = fmul float %38, %38, !dbg !30
  %47 = fmul float %39, %39, !dbg !30
  %48 = fadd float %46, %47, !dbg !31
  %49 = bitcast float %48 to i32, !dbg !36
  %50 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %49, i32 16, i32 31), !dbg !36
  %51 = bitcast i32 %50 to float, !dbg !36
  %52 = fadd float %48, %51, !dbg !31
  %53 = bitcast float %52 to i32, !dbg !36
  %54 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %53, i32 8, i32 31), !dbg !36
  %55 = bitcast i32 %54 to float, !dbg !36
  %56 = fadd float %52, %55, !dbg !31
  %57 = bitcast float %56 to i32, !dbg !36
  %58 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %57, i32 4, i32 31), !dbg !36
  %59 = bitcast i32 %58 to float, !dbg !36
  %60 = fadd float %56, %59, !dbg !31
  %61 = bitcast float %60 to i32, !dbg !36
  %62 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %61, i32 2, i32 31), !dbg !36
  %63 = bitcast i32 %62 to float, !dbg !36
  %64 = fadd float %60, %63, !dbg !31
  %65 = bitcast float %64 to i32, !dbg !36
  %66 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %65, i32 1, i32 31), !dbg !36
  %67 = bitcast i32 %66 to float, !dbg !36
  %68 = fadd float %64, %67, !dbg !31
  %69 = icmp eq i32 %8, 0, !dbg !36
  %70 = and i32 %9, 1, !dbg !36
  %71 = getelementptr float, ptr addrspace(3) @global_smem, i32 %70, !dbg !36
  %72 = bitcast float %68 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %71, <1 x i32> %72, i1 %69) #5, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %73 = icmp slt i32 %7, 2, !dbg !36
  %74 = getelementptr float, ptr addrspace(3) @global_smem, i32 %7, !dbg !36
  %75 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %74, i1 %73) #5, !dbg !36
  %76 = bitcast i32 %75 to float, !dbg !36
  %77 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %75, i32 1, i32 31), !dbg !36
  %78 = bitcast i32 %77 to float, !dbg !36
  %79 = fadd float %76, %78, !dbg !31
  %80 = and i32 %7, 1, !dbg !36
  %81 = icmp eq i32 %80, 0, !dbg !36
  %82 = and i1 %73, %81, !dbg !36
  %83 = bitcast float %79 to <1 x i32>, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %74, <1 x i32> %83, i1 %82) #5, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %84 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !36
  %85 = fmul float %44, %44, !dbg !37
  %86 = fmul float %45, %45, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %87 = fadd float %85, %86, !dbg !40
  %88 = bitcast float %87 to i32, !dbg !38
  %89 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %88, i32 16, i32 31), !dbg !38
  %90 = bitcast i32 %89 to float, !dbg !38
  %91 = fadd float %87, %90, !dbg !40
  %92 = bitcast float %91 to i32, !dbg !38
  %93 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %92, i32 8, i32 31), !dbg !38
  %94 = bitcast i32 %93 to float, !dbg !38
  %95 = fadd float %91, %94, !dbg !40
  %96 = bitcast float %95 to i32, !dbg !38
  %97 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %96, i32 4, i32 31), !dbg !38
  %98 = bitcast i32 %97 to float, !dbg !38
  %99 = fadd float %95, %98, !dbg !40
  %100 = bitcast float %99 to i32, !dbg !38
  %101 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %100, i32 2, i32 31), !dbg !38
  %102 = bitcast i32 %101 to float, !dbg !38
  %103 = fadd float %99, %102, !dbg !40
  %104 = bitcast float %103 to i32, !dbg !38
  %105 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %104, i32 1, i32 31), !dbg !38
  %106 = bitcast i32 %105 to float, !dbg !38
  %107 = fadd float %103, %106, !dbg !40
  %108 = bitcast float %107 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %71, <1 x i32> %108, i1 %69) #5, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %109 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %74, i1 %73) #5, !dbg !38
  %110 = bitcast i32 %109 to float, !dbg !38
  %111 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %109, i32 1, i32 31), !dbg !38
  %112 = bitcast i32 %111 to float, !dbg !38
  %113 = fadd float %110, %112, !dbg !40
  %114 = bitcast float %113 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %74, <1 x i32> %114, i1 %82) #5, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %115 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !38
  %116 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !41
  %117 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !41
  %118 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !41
  %.not.i1 = icmp eq i32 %118, 0, !dbg !41
  %119 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !41
  %.not1.i4 = icmp eq i32 %119, 0, !dbg !41
  br i1 %.not.i1, label %125, label %120, !dbg !41

120:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %123, label %121, !dbg !41

121:                                              ; preds = %120
  %122 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %84) #5, !dbg !41
  br label %__nv_sqrtf.exit5, !dbg !41

123:                                              ; preds = %120
  %124 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %84) #5, !dbg !41
  br label %__nv_sqrtf.exit5, !dbg !41

125:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %128, label %126, !dbg !41

126:                                              ; preds = %125
  %127 = tail call float @llvm.nvvm.sqrt.rn.f(float %84) #5, !dbg !41
  br label %__nv_sqrtf.exit5, !dbg !41

128:                                              ; preds = %125
  %129 = tail call float @llvm.nvvm.sqrt.approx.f(float %84) #5, !dbg !41
  br label %__nv_sqrtf.exit5, !dbg !41

__nv_sqrtf.exit5:                                 ; preds = %121, %123, %126, %128
  %.0.i3 = phi float [ %122, %121 ], [ %124, %123 ], [ %127, %126 ], [ %129, %128 ], !dbg !41
  %130 = fadd float %.0.i3, 0x3DDB7CDFE0000000, !dbg !42
  %131 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %38, float %130) #5, !dbg !43
  %132 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %39, float %130) #5, !dbg !43
  %133 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !44
  %134 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !44
  %135 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !44
  %.not.i11 = icmp eq i32 %135, 0, !dbg !44
  %136 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !44
  %.not1.i14 = icmp eq i32 %136, 0, !dbg !44
  br i1 %.not.i11, label %142, label %137, !dbg !44

137:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i14, label %140, label %138, !dbg !44

138:                                              ; preds = %137
  %139 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %115) #5, !dbg !44
  br label %__nv_sqrtf.exit15, !dbg !44

140:                                              ; preds = %137
  %141 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %115) #5, !dbg !44
  br label %__nv_sqrtf.exit15, !dbg !44

142:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i14, label %145, label %143, !dbg !44

143:                                              ; preds = %142
  %144 = tail call float @llvm.nvvm.sqrt.rn.f(float %115) #5, !dbg !44
  br label %__nv_sqrtf.exit15, !dbg !44

145:                                              ; preds = %142
  %146 = tail call float @llvm.nvvm.sqrt.approx.f(float %115) #5, !dbg !44
  br label %__nv_sqrtf.exit15, !dbg !44

__nv_sqrtf.exit15:                                ; preds = %138, %140, %143, %145
  %.0.i13 = phi float [ %139, %138 ], [ %141, %140 ], [ %144, %143 ], [ %146, %145 ], !dbg !44
  %147 = fadd float %.0.i13, 0x3DDB7CDFE0000000, !dbg !45
  %148 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %44, float %147) #5, !dbg !46
  %149 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %45, float %147) #5, !dbg !46
  %150 = fsub float %131, %148, !dbg !47
  %151 = fsub float %132, %149, !dbg !47
  %152 = fmul float %150, %150, !dbg !48
  %153 = fmul float %151, %151, !dbg !48
  %154 = bitcast float %38 to i32, !dbg !49
  %155 = bitcast float %39 to i32, !dbg !49
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %154, i32 %155, ptr addrspace(1) %15, i1 true) #5, !dbg !49
  %156 = bitcast float %44 to i32, !dbg !50
  %157 = bitcast float %45 to i32, !dbg !50
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %156, i32 %157, ptr addrspace(1) %28, i1 true) #5, !dbg !50
  %158 = getelementptr float, ptr addrspace(1) %3, i64 %14, !dbg !51
  %159 = bitcast float %152 to i32, !dbg !52
  %160 = bitcast float %153 to i32, !dbg !52
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %159, i32 %160, ptr addrspace(1) %158, i1 true) #5, !dbg !52
  ret void, !dbg !53
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "czis5by4mjhtu7sxzklep434catysk7efeyqdayxi7iveiqovenz.py", directory: "inductor_cache/zi")
!4 = !{ptr @triton_per_fused_add_convolution_div_max_pool2d_with_indices_pow_relu_sqrt_sub_sum_9, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_convolution_div_max_pool2d_with_indices_pow_relu_sqrt_sub_sum_9, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_convolution_div_max_pool2d_with_indices_pow_relu_sqrt_sub_sum_9", linkageName: "triton_per_fused_add_convolution_div_max_pool2d_with_indices_pow_relu_sqrt_sub_sum_9", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 26, column: 34, scope: !7)
!12 = !DILocation(line: 31, column: 43, scope: !7)
!13 = !DILocation(line: 31, column: 39, scope: !7)
!14 = !DILocation(line: 31, column: 34, scope: !7)
!15 = !DILocation(line: 31, column: 48, scope: !7)
!16 = !DILocation(line: 32, column: 30, scope: !7)
!17 = !DILocation(line: 32, column: 35, scope: !7)
!18 = !DILocation(line: 33, column: 34, scope: !7)
!19 = !DILocation(line: 33, column: 48, scope: !7)
!20 = !DILocation(line: 34, column: 18, scope: !7)
!21 = !DILocation(line: 118, column: 15, scope: !22, inlinedAt: !24)
!22 = distinct !DILexicalBlockFile(scope: !7, file: !23, discriminator: 0)
!23 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!24 = !DILocation(line: 36, column: 40, scope: !7)
!25 = !DILocation(line: 121, column: 29, scope: !22, inlinedAt: !24)
!26 = !DILocation(line: 37, column: 18, scope: !7)
!27 = !DILocation(line: 118, column: 15, scope: !22, inlinedAt: !28)
!28 = !DILocation(line: 38, column: 40, scope: !7)
!29 = !DILocation(line: 121, column: 29, scope: !22, inlinedAt: !28)
!30 = !DILocation(line: 39, column: 18, scope: !7)
!31 = !DILocation(line: 256, column: 15, scope: !32, inlinedAt: !35)
!32 = distinct !DILexicalBlockFile(scope: !34, file: !33, discriminator: 0)
!33 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!34 = distinct !DILexicalBlockFile(scope: !7, file: !33, discriminator: 0)
!35 = !DILocation(line: 41, column: 25, scope: !7)
!36 = !DILocation(line: 267, column: 36, scope: !34, inlinedAt: !35)
!37 = !DILocation(line: 42, column: 19, scope: !7)
!38 = !DILocation(line: 267, column: 36, scope: !34, inlinedAt: !39)
!39 = !DILocation(line: 44, column: 26, scope: !7)
!40 = !DILocation(line: 256, column: 15, scope: !32, inlinedAt: !39)
!41 = !DILocation(line: 45, column: 27, scope: !7)
!42 = !DILocation(line: 47, column: 20, scope: !7)
!43 = !DILocation(line: 48, column: 19, scope: !7)
!44 = !DILocation(line: 49, column: 27, scope: !7)
!45 = !DILocation(line: 50, column: 20, scope: !7)
!46 = !DILocation(line: 51, column: 19, scope: !7)
!47 = !DILocation(line: 52, column: 20, scope: !7)
!48 = !DILocation(line: 53, column: 20, scope: !7)
!49 = !DILocation(line: 54, column: 48, scope: !7)
!50 = !DILocation(line: 55, column: 48, scope: !7)
!51 = !DILocation(line: 56, column: 25, scope: !7)
!52 = !DILocation(line: 56, column: 46, scope: !7)
!53 = !DILocation(line: 56, column: 4, scope: !7)
