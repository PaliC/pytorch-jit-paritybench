; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_constant_pad_nd_21(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %6 = shl i32 %5, 5, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 2, !dbg !12
  %9 = and i32 %8, 28, !dbg !12
  %10 = lshr i32 %7, 3, !dbg !12
  %11 = and i32 %10, 15, !dbg !12
  %12 = or disjoint i32 %11, 16, !dbg !12
  %13 = or disjoint i32 %6, %9, !dbg !13
  %14 = or disjoint i32 %6, %11, !dbg !13
  %15 = or disjoint i32 %6, %12, !dbg !13
  %16 = icmp slt i32 %13, 128, !dbg !14
  %17 = icmp slt i32 %14, 128, !dbg !14
  %18 = icmp slt i32 %15, 128, !dbg !14
  %19 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %20 = shl i32 %19, 5, !dbg !16
  %21 = or disjoint i32 %20, %11, !dbg !17
  %22 = or disjoint i32 %20, %12, !dbg !17
  %23 = or disjoint i32 %20, %9, !dbg !17
  %24 = icmp slt i32 %23, 1024, !dbg !18
  %.frozen = freeze i32 %21, !dbg !19
  %25 = sdiv i32 %.frozen, 32, !dbg !19
  %.frozen1 = freeze i32 %22, !dbg !19
  %26 = sdiv i32 %.frozen1, 32, !dbg !19
  %27 = mul i32 %25, 32, !dbg !20
  %.decomposed = sub i32 %.frozen, %27, !dbg !20
  %28 = mul i32 %26, 32, !dbg !20
  %.decomposed2 = sub i32 %.frozen1, %28, !dbg !20
  %.frozen3 = freeze i32 %13, !dbg !21
  %29 = sdiv i32 %.frozen3, 32, !dbg !21
  %30 = mul i32 %29, 32, !dbg !22
  %.decomposed4 = sub i32 %.frozen3, %30, !dbg !22
  %31 = icmp slt i32 %21, 992, !dbg !23
  %32 = icmp slt i32 %22, 992, !dbg !23
  %33 = icmp slt i32 %.decomposed, 31, !dbg !24
  %34 = icmp slt i32 %.decomposed2, 31, !dbg !24
  %35 = and i1 %31, %33, !dbg !25
  %36 = and i1 %32, %34, !dbg !25
  %37 = shl nsw i32 %.decomposed, 5, !dbg !26
  %38 = shl nsw i32 %.decomposed2, 5, !dbg !26
  %39 = mul i32 %25, 992, !dbg !27
  %40 = mul i32 %26, 992, !dbg !27
  %41 = mul i32 %29, 30752, !dbg !28
  %42 = add i32 %41, %.decomposed4, !dbg !29
  %43 = add i32 %42, %37, !dbg !30
  %44 = add i32 %43, %39, !dbg !31
  %45 = add i32 %42, %38, !dbg !30
  %46 = add i32 %45, %40, !dbg !31
  %47 = sext i32 %44 to i64, !dbg !32
  %48 = getelementptr float, ptr addrspace(1) %0, i64 %47, !dbg !32
  %49 = sext i32 %46 to i64, !dbg !32
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !32
  %51 = and i1 %16, %35, !dbg !33
  %52 = and i1 %16, %36, !dbg !33
  %53 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %48, i1 %51, i32 0, i1 %51, i32 0, i1 %51, i32 0, i1 %51, i32 0, i1 %51) #2, !dbg !34
  %54 = extractvalue { i32, i32, i32, i32 } %53, 0, !dbg !34
  %55 = extractvalue { i32, i32, i32, i32 } %53, 1, !dbg !34
  %56 = extractvalue { i32, i32, i32, i32 } %53, 2, !dbg !34
  %57 = extractvalue { i32, i32, i32, i32 } %53, 3, !dbg !34
  %58 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %50, i1 %52, i32 0, i1 %52, i32 0, i1 %52, i32 0, i1 %52, i32 0, i1 %52) #2, !dbg !34
  %59 = extractvalue { i32, i32, i32, i32 } %58, 0, !dbg !34
  %60 = extractvalue { i32, i32, i32, i32 } %58, 1, !dbg !34
  %61 = extractvalue { i32, i32, i32, i32 } %58, 2, !dbg !34
  %62 = extractvalue { i32, i32, i32, i32 } %58, 3, !dbg !34
  %63 = shl i32 %14, 10, !dbg !35
  %64 = shl i32 %15, 10, !dbg !35
  %65 = add i32 %23, %63, !dbg !36
  %66 = add i32 %23, %64, !dbg !36
  %67 = sext i32 %65 to i64, !dbg !37
  %68 = getelementptr float, ptr addrspace(1) %1, i64 %67, !dbg !37
  %69 = sext i32 %66 to i64, !dbg !37
  %70 = getelementptr float, ptr addrspace(1) %1, i64 %69, !dbg !37
  %71 = and i1 %17, %24, !dbg !38
  %72 = and i1 %18, %24, !dbg !38
  %73 = shl i32 %7, 7, !dbg !39
  %74 = and i32 %73, 896, !dbg !39
  %75 = or disjoint i32 %74, %11, !dbg !39
  %76 = and i32 %8, 508, !dbg !39
  %77 = lshr exact i32 %74, 3, !dbg !39
  %78 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %77, !dbg !39
  %79 = getelementptr float, ptr addrspace(3) %78, i32 %75, !dbg !39
  %80 = insertelement <1 x i32> poison, i32 %54, i64 0, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %79, <1 x i32> %80, i1 true) #2, !dbg !39
  %81 = or disjoint i32 %75, 32, !dbg !39
  %82 = lshr i32 %81, 5, !dbg !39
  %83 = getelementptr float, ptr addrspace(3) @global_smem, i32 %82, !dbg !39
  %84 = getelementptr float, ptr addrspace(3) %83, i32 %81, !dbg !39
  %85 = insertelement <1 x i32> poison, i32 %55, i64 0, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %84, <1 x i32> %85, i1 true) #2, !dbg !39
  %86 = or disjoint i32 %75, 64, !dbg !39
  %87 = lshr i32 %86, 5, !dbg !39
  %88 = getelementptr float, ptr addrspace(3) @global_smem, i32 %87, !dbg !39
  %89 = getelementptr float, ptr addrspace(3) %88, i32 %86, !dbg !39
  %90 = insertelement <1 x i32> poison, i32 %56, i64 0, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %89, <1 x i32> %90, i1 true) #2, !dbg !39
  %91 = or disjoint i32 %75, 96, !dbg !39
  %92 = lshr i32 %91, 5, !dbg !39
  %93 = getelementptr float, ptr addrspace(3) @global_smem, i32 %92, !dbg !39
  %94 = getelementptr float, ptr addrspace(3) %93, i32 %91, !dbg !39
  %95 = insertelement <1 x i32> poison, i32 %57, i64 0, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %94, <1 x i32> %95, i1 true) #2, !dbg !39
  %96 = or disjoint i32 %75, 16, !dbg !39
  %97 = getelementptr float, ptr addrspace(3) %78, i32 %96, !dbg !39
  %98 = insertelement <1 x i32> poison, i32 %59, i64 0, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %97, <1 x i32> %98, i1 true) #2, !dbg !39
  %99 = or disjoint i32 %75, 48, !dbg !39
  %100 = lshr i32 %99, 5, !dbg !39
  %101 = getelementptr float, ptr addrspace(3) @global_smem, i32 %100, !dbg !39
  %102 = getelementptr float, ptr addrspace(3) %101, i32 %99, !dbg !39
  %103 = insertelement <1 x i32> poison, i32 %60, i64 0, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %102, <1 x i32> %103, i1 true) #2, !dbg !39
  %104 = or disjoint i32 %75, 80, !dbg !39
  %105 = lshr i32 %104, 5, !dbg !39
  %106 = getelementptr float, ptr addrspace(3) @global_smem, i32 %105, !dbg !39
  %107 = getelementptr float, ptr addrspace(3) %106, i32 %104, !dbg !39
  %108 = insertelement <1 x i32> poison, i32 %61, i64 0, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %107, <1 x i32> %108, i1 true) #2, !dbg !39
  %109 = or disjoint i32 %75, 112, !dbg !39
  %110 = lshr i32 %109, 5, !dbg !39
  %111 = getelementptr float, ptr addrspace(3) @global_smem, i32 %110, !dbg !39
  %112 = getelementptr float, ptr addrspace(3) %111, i32 %109, !dbg !39
  %113 = insertelement <1 x i32> poison, i32 %62, i64 0, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %112, <1 x i32> %113, i1 true) #2, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %114 = lshr i32 %76, 5, !dbg !39
  %115 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %114, !dbg !39
  %116 = getelementptr inbounds float, ptr addrspace(3) %115, i32 %76, !dbg !39
  %117 = load i32, ptr addrspace(3) %116, align 4, !dbg !39
  %118 = or disjoint i32 %76, 1, !dbg !39
  %119 = getelementptr inbounds float, ptr addrspace(3) %115, i32 %118, !dbg !39
  %120 = load i32, ptr addrspace(3) %119, align 4, !dbg !39
  %121 = or disjoint i32 %76, 2, !dbg !39
  %122 = getelementptr inbounds float, ptr addrspace(3) %115, i32 %121, !dbg !39
  %123 = load i32, ptr addrspace(3) %122, align 4, !dbg !39
  %124 = or disjoint i32 %76, 3, !dbg !39
  %125 = getelementptr inbounds float, ptr addrspace(3) %115, i32 %124, !dbg !39
  %126 = load i32, ptr addrspace(3) %125, align 4, !dbg !39
  %127 = or disjoint i32 %76, 512, !dbg !39
  %128 = lshr i32 %127, 5, !dbg !39
  %129 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %128, !dbg !39
  %130 = getelementptr inbounds float, ptr addrspace(3) %129, i32 %127, !dbg !39
  %131 = load i32, ptr addrspace(3) %130, align 4, !dbg !39
  %132 = or disjoint i32 %76, 513, !dbg !39
  %133 = lshr i32 %132, 5, !dbg !39
  %134 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %133, !dbg !39
  %135 = getelementptr inbounds float, ptr addrspace(3) %134, i32 %132, !dbg !39
  %136 = load i32, ptr addrspace(3) %135, align 4, !dbg !39
  %137 = or disjoint i32 %76, 514, !dbg !39
  %138 = lshr i32 %137, 5, !dbg !39
  %139 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %138, !dbg !39
  %140 = getelementptr inbounds float, ptr addrspace(3) %139, i32 %137, !dbg !39
  %141 = load i32, ptr addrspace(3) %140, align 4, !dbg !39
  %142 = or disjoint i32 %76, 515, !dbg !39
  %143 = lshr i32 %142, 5, !dbg !39
  %144 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %143, !dbg !39
  %145 = getelementptr inbounds float, ptr addrspace(3) %144, i32 %142, !dbg !39
  %146 = load i32, ptr addrspace(3) %145, align 4, !dbg !39
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %117, i32 %120, i32 %123, i32 %126, ptr addrspace(1) %68, i1 %71) #2, !dbg !39
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %131, i32 %136, i32 %141, i32 %146, ptr addrspace(1) %70, i1 %72) #2, !dbg !39
  ret void, !dbg !40
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cw5jxiualjzvaamvqtkkbh7sntquv2lqrw3tqulgbwv7be52gtal.py", directory: "inductor_cache/w5")
!4 = !{ptr @triton_poi_fused_constant_pad_nd_21, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_constant_pad_nd_21, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_constant_pad_nd_21", linkageName: "triton_poi_fused_constant_pad_nd_21", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 28, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 31, column: 19, scope: !7)
!22 = !DILocation(line: 30, column: 19, scope: !7)
!23 = !DILocation(line: 36, column: 18, scope: !7)
!24 = !DILocation(line: 38, column: 18, scope: !7)
!25 = !DILocation(line: 39, column: 18, scope: !7)
!26 = !DILocation(line: 40, column: 38, scope: !7)
!27 = !DILocation(line: 40, column: 47, scope: !7)
!28 = !DILocation(line: 40, column: 58, scope: !7)
!29 = !DILocation(line: 40, column: 35, scope: !7)
!30 = !DILocation(line: 40, column: 43, scope: !7)
!31 = !DILocation(line: 40, column: 52, scope: !7)
!32 = !DILocation(line: 40, column: 30, scope: !7)
!33 = !DILocation(line: 40, column: 78, scope: !7)
!34 = !DILocation(line: 40, column: 63, scope: !7)
!35 = !DILocation(line: 41, column: 35, scope: !7)
!36 = !DILocation(line: 41, column: 30, scope: !7)
!37 = !DILocation(line: 41, column: 25, scope: !7)
!38 = !DILocation(line: 41, column: 54, scope: !7)
!39 = !DILocation(line: 41, column: 46, scope: !7)
!40 = !DILocation(line: 41, column: 4, scope: !7)
