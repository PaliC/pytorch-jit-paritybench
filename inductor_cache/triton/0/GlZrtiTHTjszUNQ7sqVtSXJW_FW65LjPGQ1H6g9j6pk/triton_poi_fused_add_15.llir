; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_add_15(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %8 = shl i32 %7, 6, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = lshr i32 %9, 4, !dbg !12
  %11 = and i32 %10, 15, !dbg !12
  %12 = or disjoint i32 %11, 16, !dbg !12
  %13 = or disjoint i32 %11, 32, !dbg !12
  %14 = or disjoint i32 %11, 48, !dbg !12
  %15 = shl i32 %9, 2, !dbg !12
  %16 = and i32 %15, 60, !dbg !12
  %17 = or disjoint i32 %8, %11, !dbg !13
  %18 = or disjoint i32 %8, %12, !dbg !13
  %19 = or disjoint i32 %8, %13, !dbg !13
  %20 = or disjoint i32 %8, %14, !dbg !13
  %21 = or disjoint i32 %8, %16, !dbg !13
  %22 = icmp slt i32 %17, 256, !dbg !14
  %23 = icmp slt i32 %18, 256, !dbg !14
  %24 = icmp slt i32 %19, 256, !dbg !14
  %25 = icmp slt i32 %20, 256, !dbg !14
  %26 = icmp slt i32 %21, 256, !dbg !14
  %27 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %28 = shl i32 %27, 6, !dbg !16
  %29 = or disjoint i32 %28, %16, !dbg !17
  %30 = or disjoint i32 %28, %11, !dbg !17
  %31 = or disjoint i32 %28, %12, !dbg !17
  %32 = or disjoint i32 %28, %13, !dbg !17
  %33 = or disjoint i32 %28, %14, !dbg !17
  %34 = icmp slt i32 %29, 192, !dbg !18
  %35 = icmp slt i32 %30, 192, !dbg !18
  %36 = icmp slt i32 %31, 192, !dbg !18
  %37 = icmp slt i32 %32, 192, !dbg !18
  %38 = icmp slt i32 %33, 192, !dbg !18
  %.frozen = freeze i32 %21, !dbg !19
  %39 = sdiv i32 %.frozen, 64, !dbg !19
  %40 = mul i32 %39, 64, !dbg !20
  %.decomposed = sub i32 %.frozen, %40, !dbg !20
  %41 = mul i32 %17, 192, !dbg !21
  %42 = mul i32 %18, 192, !dbg !21
  %43 = mul i32 %19, 192, !dbg !21
  %44 = mul i32 %20, 192, !dbg !21
  %45 = add i32 %29, %41, !dbg !22
  %46 = add i32 %29, %42, !dbg !22
  %47 = add i32 %29, %43, !dbg !22
  %48 = add i32 %29, %44, !dbg !22
  %49 = sext i32 %45 to i64, !dbg !23
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !23
  %51 = sext i32 %46 to i64, !dbg !23
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !23
  %53 = sext i32 %47 to i64, !dbg !23
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !23
  %55 = sext i32 %48 to i64, !dbg !23
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !23
  %57 = and i1 %22, %34, !dbg !24
  %58 = and i1 %23, %34, !dbg !24
  %59 = and i1 %24, %34, !dbg !24
  %60 = and i1 %25, %34, !dbg !24
  %61 = and i1 %26, %35, !dbg !24
  %62 = and i1 %26, %36, !dbg !24
  %63 = and i1 %26, %37, !dbg !24
  %64 = and i1 %26, %38, !dbg !24
  %65 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %50, i1 %57) #2, !dbg !25
  %66 = extractvalue { i32, i32, i32, i32 } %65, 0, !dbg !25
  %67 = extractvalue { i32, i32, i32, i32 } %65, 1, !dbg !25
  %68 = extractvalue { i32, i32, i32, i32 } %65, 2, !dbg !25
  %69 = extractvalue { i32, i32, i32, i32 } %65, 3, !dbg !25
  %70 = bitcast i32 %66 to float, !dbg !25
  %71 = bitcast i32 %67 to float, !dbg !25
  %72 = bitcast i32 %68 to float, !dbg !25
  %73 = bitcast i32 %69 to float, !dbg !25
  %74 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %52, i1 %58) #2, !dbg !25
  %75 = extractvalue { i32, i32, i32, i32 } %74, 0, !dbg !25
  %76 = extractvalue { i32, i32, i32, i32 } %74, 1, !dbg !25
  %77 = extractvalue { i32, i32, i32, i32 } %74, 2, !dbg !25
  %78 = extractvalue { i32, i32, i32, i32 } %74, 3, !dbg !25
  %79 = bitcast i32 %75 to float, !dbg !25
  %80 = bitcast i32 %76 to float, !dbg !25
  %81 = bitcast i32 %77 to float, !dbg !25
  %82 = bitcast i32 %78 to float, !dbg !25
  %83 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %54, i1 %59) #2, !dbg !25
  %84 = extractvalue { i32, i32, i32, i32 } %83, 0, !dbg !25
  %85 = extractvalue { i32, i32, i32, i32 } %83, 1, !dbg !25
  %86 = extractvalue { i32, i32, i32, i32 } %83, 2, !dbg !25
  %87 = extractvalue { i32, i32, i32, i32 } %83, 3, !dbg !25
  %88 = bitcast i32 %84 to float, !dbg !25
  %89 = bitcast i32 %85 to float, !dbg !25
  %90 = bitcast i32 %86 to float, !dbg !25
  %91 = bitcast i32 %87 to float, !dbg !25
  %92 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %56, i1 %60) #2, !dbg !25
  %93 = extractvalue { i32, i32, i32, i32 } %92, 0, !dbg !25
  %94 = extractvalue { i32, i32, i32, i32 } %92, 1, !dbg !25
  %95 = extractvalue { i32, i32, i32, i32 } %92, 2, !dbg !25
  %96 = extractvalue { i32, i32, i32, i32 } %92, 3, !dbg !25
  %97 = bitcast i32 %93 to float, !dbg !25
  %98 = bitcast i32 %94 to float, !dbg !25
  %99 = bitcast i32 %95 to float, !dbg !25
  %100 = bitcast i32 %96 to float, !dbg !25
  %101 = sext i32 %29 to i64, !dbg !26
  %102 = getelementptr float, ptr addrspace(1) %1, i64 %101, !dbg !26
  %103 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %102, i1 %34) #2, !dbg !27
  %104 = extractvalue { i32, i32, i32, i32 } %103, 0, !dbg !27
  %105 = extractvalue { i32, i32, i32, i32 } %103, 1, !dbg !27
  %106 = extractvalue { i32, i32, i32, i32 } %103, 2, !dbg !27
  %107 = extractvalue { i32, i32, i32, i32 } %103, 3, !dbg !27
  %108 = bitcast i32 %104 to float, !dbg !27
  %109 = bitcast i32 %105 to float, !dbg !27
  %110 = bitcast i32 %106 to float, !dbg !27
  %111 = bitcast i32 %107 to float, !dbg !27
  %112 = getelementptr float, ptr addrspace(1) %2, i64 %49, !dbg !28
  %113 = getelementptr float, ptr addrspace(1) %2, i64 %51, !dbg !28
  %114 = getelementptr float, ptr addrspace(1) %2, i64 %53, !dbg !28
  %115 = getelementptr float, ptr addrspace(1) %2, i64 %55, !dbg !28
  %116 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %112, i1 %57) #2, !dbg !29
  %117 = extractvalue { i32, i32, i32, i32 } %116, 0, !dbg !29
  %118 = extractvalue { i32, i32, i32, i32 } %116, 1, !dbg !29
  %119 = extractvalue { i32, i32, i32, i32 } %116, 2, !dbg !29
  %120 = extractvalue { i32, i32, i32, i32 } %116, 3, !dbg !29
  %121 = bitcast i32 %117 to float, !dbg !29
  %122 = bitcast i32 %118 to float, !dbg !29
  %123 = bitcast i32 %119 to float, !dbg !29
  %124 = bitcast i32 %120 to float, !dbg !29
  %125 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %113, i1 %58) #2, !dbg !29
  %126 = extractvalue { i32, i32, i32, i32 } %125, 0, !dbg !29
  %127 = extractvalue { i32, i32, i32, i32 } %125, 1, !dbg !29
  %128 = extractvalue { i32, i32, i32, i32 } %125, 2, !dbg !29
  %129 = extractvalue { i32, i32, i32, i32 } %125, 3, !dbg !29
  %130 = bitcast i32 %126 to float, !dbg !29
  %131 = bitcast i32 %127 to float, !dbg !29
  %132 = bitcast i32 %128 to float, !dbg !29
  %133 = bitcast i32 %129 to float, !dbg !29
  %134 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %114, i1 %59) #2, !dbg !29
  %135 = extractvalue { i32, i32, i32, i32 } %134, 0, !dbg !29
  %136 = extractvalue { i32, i32, i32, i32 } %134, 1, !dbg !29
  %137 = extractvalue { i32, i32, i32, i32 } %134, 2, !dbg !29
  %138 = extractvalue { i32, i32, i32, i32 } %134, 3, !dbg !29
  %139 = bitcast i32 %135 to float, !dbg !29
  %140 = bitcast i32 %136 to float, !dbg !29
  %141 = bitcast i32 %137 to float, !dbg !29
  %142 = bitcast i32 %138 to float, !dbg !29
  %143 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %115, i1 %60) #2, !dbg !29
  %144 = extractvalue { i32, i32, i32, i32 } %143, 0, !dbg !29
  %145 = extractvalue { i32, i32, i32, i32 } %143, 1, !dbg !29
  %146 = extractvalue { i32, i32, i32, i32 } %143, 2, !dbg !29
  %147 = extractvalue { i32, i32, i32, i32 } %143, 3, !dbg !29
  %148 = bitcast i32 %144 to float, !dbg !29
  %149 = bitcast i32 %145 to float, !dbg !29
  %150 = bitcast i32 %146 to float, !dbg !29
  %151 = bitcast i32 %147 to float, !dbg !29
  %152 = fmul float %108, %121, !dbg !30
  %153 = fmul float %109, %122, !dbg !30
  %154 = fmul float %110, %123, !dbg !30
  %155 = fmul float %111, %124, !dbg !30
  %156 = fmul float %108, %130, !dbg !30
  %157 = fmul float %109, %131, !dbg !30
  %158 = fmul float %110, %132, !dbg !30
  %159 = fmul float %111, %133, !dbg !30
  %160 = fmul float %108, %139, !dbg !30
  %161 = fmul float %109, %140, !dbg !30
  %162 = fmul float %110, %141, !dbg !30
  %163 = fmul float %111, %142, !dbg !30
  %164 = fmul float %108, %148, !dbg !30
  %165 = fmul float %109, %149, !dbg !30
  %166 = fmul float %110, %150, !dbg !30
  %167 = fmul float %111, %151, !dbg !30
  %168 = fadd float %152, %70, !dbg !31
  %169 = fadd float %153, %71, !dbg !31
  %170 = fadd float %154, %72, !dbg !31
  %171 = fadd float %155, %73, !dbg !31
  %172 = fadd float %156, %79, !dbg !31
  %173 = fadd float %157, %80, !dbg !31
  %174 = fadd float %158, %81, !dbg !31
  %175 = fadd float %159, %82, !dbg !31
  %176 = fadd float %160, %88, !dbg !31
  %177 = fadd float %161, %89, !dbg !31
  %178 = fadd float %162, %90, !dbg !31
  %179 = fadd float %163, %91, !dbg !31
  %180 = fadd float %164, %97, !dbg !31
  %181 = fadd float %165, %98, !dbg !31
  %182 = fadd float %166, %99, !dbg !31
  %183 = fadd float %167, %100, !dbg !31
  %184 = shl i32 %30, 6, !dbg !32
  %185 = shl i32 %31, 6, !dbg !32
  %186 = shl i32 %32, 6, !dbg !32
  %187 = shl i32 %33, 6, !dbg !32
  %188 = mul i32 %39, 12288, !dbg !33
  %189 = add i32 %188, %.decomposed, !dbg !34
  %190 = add i32 %189, %184, !dbg !35
  %191 = add i32 %189, %185, !dbg !35
  %192 = add i32 %189, %186, !dbg !35
  %193 = add i32 %189, %187, !dbg !35
  %194 = sext i32 %190 to i64, !dbg !36
  %195 = getelementptr float, ptr addrspace(1) %3, i64 %194, !dbg !36
  %196 = sext i32 %191 to i64, !dbg !36
  %197 = getelementptr float, ptr addrspace(1) %3, i64 %196, !dbg !36
  %198 = sext i32 %192 to i64, !dbg !36
  %199 = getelementptr float, ptr addrspace(1) %3, i64 %198, !dbg !36
  %200 = sext i32 %193 to i64, !dbg !36
  %201 = getelementptr float, ptr addrspace(1) %3, i64 %200, !dbg !36
  %202 = shl i32 %9, 8, !dbg !37
  %203 = and i32 %202, 3840, !dbg !37
  %204 = or disjoint i32 %203, %11, !dbg !37
  %205 = and i32 %15, 1020, !dbg !37
  %206 = lshr exact i32 %203, 2, !dbg !37
  %207 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %206, !dbg !37
  %208 = getelementptr float, ptr addrspace(3) %207, i32 %204, !dbg !37
  %209 = bitcast float %168 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %208, <1 x i32> %209, i1 true) #2, !dbg !37
  %210 = or disjoint i32 %204, 64, !dbg !37
  %211 = lshr i32 %210, 4, !dbg !37
  %212 = getelementptr float, ptr addrspace(3) @global_smem, i32 %211, !dbg !37
  %213 = getelementptr float, ptr addrspace(3) %212, i32 %210, !dbg !37
  %214 = bitcast float %169 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %213, <1 x i32> %214, i1 true) #2, !dbg !37
  %215 = or disjoint i32 %204, 128, !dbg !37
  %216 = lshr i32 %215, 4, !dbg !37
  %217 = getelementptr float, ptr addrspace(3) @global_smem, i32 %216, !dbg !37
  %218 = getelementptr float, ptr addrspace(3) %217, i32 %215, !dbg !37
  %219 = bitcast float %170 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %218, <1 x i32> %219, i1 true) #2, !dbg !37
  %220 = or disjoint i32 %204, 192, !dbg !37
  %221 = lshr i32 %220, 4, !dbg !37
  %222 = getelementptr float, ptr addrspace(3) @global_smem, i32 %221, !dbg !37
  %223 = getelementptr float, ptr addrspace(3) %222, i32 %220, !dbg !37
  %224 = bitcast float %171 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %223, <1 x i32> %224, i1 true) #2, !dbg !37
  %225 = or disjoint i32 %204, 16, !dbg !37
  %226 = getelementptr float, ptr addrspace(3) %207, i32 %225, !dbg !37
  %227 = bitcast float %172 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %226, <1 x i32> %227, i1 true) #2, !dbg !37
  %228 = or disjoint i32 %204, 80, !dbg !37
  %229 = lshr i32 %228, 4, !dbg !37
  %230 = and i32 %229, 244, !dbg !37
  %231 = getelementptr float, ptr addrspace(3) @global_smem, i32 %230, !dbg !37
  %232 = getelementptr float, ptr addrspace(3) %231, i32 %228, !dbg !37
  %233 = bitcast float %173 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %232, <1 x i32> %233, i1 true) #2, !dbg !37
  %234 = or disjoint i32 %204, 144, !dbg !37
  %235 = lshr i32 %234, 4, !dbg !37
  %236 = and i32 %235, 248, !dbg !37
  %237 = getelementptr float, ptr addrspace(3) @global_smem, i32 %236, !dbg !37
  %238 = getelementptr float, ptr addrspace(3) %237, i32 %234, !dbg !37
  %239 = bitcast float %174 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %238, <1 x i32> %239, i1 true) #2, !dbg !37
  %240 = or disjoint i32 %204, 208, !dbg !37
  %241 = lshr i32 %240, 4, !dbg !37
  %242 = and i32 %241, 252, !dbg !37
  %243 = getelementptr float, ptr addrspace(3) @global_smem, i32 %242, !dbg !37
  %244 = getelementptr float, ptr addrspace(3) %243, i32 %240, !dbg !37
  %245 = bitcast float %175 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %244, <1 x i32> %245, i1 true) #2, !dbg !37
  %246 = or disjoint i32 %204, 32, !dbg !37
  %247 = getelementptr float, ptr addrspace(3) %207, i32 %246, !dbg !37
  %248 = bitcast float %176 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %247, <1 x i32> %248, i1 true) #2, !dbg !37
  %249 = or disjoint i32 %204, 96, !dbg !37
  %250 = lshr i32 %249, 4, !dbg !37
  %251 = and i32 %250, 244, !dbg !37
  %252 = getelementptr float, ptr addrspace(3) @global_smem, i32 %251, !dbg !37
  %253 = getelementptr float, ptr addrspace(3) %252, i32 %249, !dbg !37
  %254 = bitcast float %177 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %253, <1 x i32> %254, i1 true) #2, !dbg !37
  %255 = or disjoint i32 %204, 160, !dbg !37
  %256 = lshr i32 %255, 4, !dbg !37
  %257 = and i32 %256, 248, !dbg !37
  %258 = getelementptr float, ptr addrspace(3) @global_smem, i32 %257, !dbg !37
  %259 = getelementptr float, ptr addrspace(3) %258, i32 %255, !dbg !37
  %260 = bitcast float %178 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %259, <1 x i32> %260, i1 true) #2, !dbg !37
  %261 = or disjoint i32 %204, 224, !dbg !37
  %262 = lshr i32 %261, 4, !dbg !37
  %263 = and i32 %262, 252, !dbg !37
  %264 = getelementptr float, ptr addrspace(3) @global_smem, i32 %263, !dbg !37
  %265 = getelementptr float, ptr addrspace(3) %264, i32 %261, !dbg !37
  %266 = bitcast float %179 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %265, <1 x i32> %266, i1 true) #2, !dbg !37
  %267 = or disjoint i32 %204, 48, !dbg !37
  %268 = getelementptr float, ptr addrspace(3) %207, i32 %267, !dbg !37
  %269 = bitcast float %180 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %268, <1 x i32> %269, i1 true) #2, !dbg !37
  %270 = or disjoint i32 %204, 112, !dbg !37
  %271 = lshr i32 %270, 4, !dbg !37
  %272 = and i32 %271, 244, !dbg !37
  %273 = getelementptr float, ptr addrspace(3) @global_smem, i32 %272, !dbg !37
  %274 = getelementptr float, ptr addrspace(3) %273, i32 %270, !dbg !37
  %275 = bitcast float %181 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %274, <1 x i32> %275, i1 true) #2, !dbg !37
  %276 = or disjoint i32 %204, 176, !dbg !37
  %277 = lshr i32 %276, 4, !dbg !37
  %278 = and i32 %277, 248, !dbg !37
  %279 = getelementptr float, ptr addrspace(3) @global_smem, i32 %278, !dbg !37
  %280 = getelementptr float, ptr addrspace(3) %279, i32 %276, !dbg !37
  %281 = bitcast float %182 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %280, <1 x i32> %281, i1 true) #2, !dbg !37
  %282 = or disjoint i32 %204, 240, !dbg !37
  %283 = lshr i32 %282, 4, !dbg !37
  %284 = and i32 %283, 252, !dbg !37
  %285 = getelementptr float, ptr addrspace(3) @global_smem, i32 %284, !dbg !37
  %286 = getelementptr float, ptr addrspace(3) %285, i32 %282, !dbg !37
  %287 = bitcast float %183 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %286, <1 x i32> %287, i1 true) #2, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %288 = lshr i32 %15, 4, !dbg !37
  %289 = and i32 %288, 60, !dbg !37
  %290 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %289, !dbg !37
  %291 = getelementptr inbounds float, ptr addrspace(3) %290, i32 %205, !dbg !37
  %292 = or disjoint i32 %205, 1024, !dbg !37
  %293 = lshr i32 %292, 4, !dbg !37
  %294 = and i32 %293, 124, !dbg !37
  %295 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %294, !dbg !37
  %296 = getelementptr inbounds float, ptr addrspace(3) %295, i32 %292, !dbg !37
  %297 = load <4 x i32>, ptr addrspace(3) %296, align 16, !dbg !37
  %298 = or disjoint i32 %205, 2048, !dbg !37
  %299 = lshr i32 %298, 4, !dbg !37
  %300 = and i32 %299, 188, !dbg !37
  %301 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %300, !dbg !37
  %302 = getelementptr inbounds float, ptr addrspace(3) %301, i32 %298, !dbg !37
  %303 = load <4 x i32>, ptr addrspace(3) %302, align 16, !dbg !37
  %304 = or disjoint i32 %205, 3072, !dbg !37
  %305 = lshr i32 %304, 4, !dbg !37
  %306 = and i32 %305, 252, !dbg !37
  %307 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %306, !dbg !37
  %308 = getelementptr inbounds float, ptr addrspace(3) %307, i32 %304, !dbg !37
  %309 = load <4 x i32>, ptr addrspace(3) %308, align 16, !dbg !37
  %.extract = load i32, ptr addrspace(3) %291, align 16, !dbg !37
  %310 = getelementptr inbounds i8, ptr addrspace(3) %291, i32 4, !dbg !37
  %.extract16 = load i32, ptr addrspace(3) %310, align 4, !dbg !37
  %311 = getelementptr inbounds i8, ptr addrspace(3) %291, i32 8, !dbg !37
  %.extract17 = load i32, ptr addrspace(3) %311, align 8, !dbg !37
  %312 = getelementptr inbounds i8, ptr addrspace(3) %291, i32 12, !dbg !37
  %.extract18 = load i32, ptr addrspace(3) %312, align 4, !dbg !37
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract16, i32 %.extract17, i32 %.extract18, ptr addrspace(1) %195, i1 %61) #2, !dbg !37
  %.extract19 = extractelement <4 x i32> %297, i64 0, !dbg !37
  %.extract20 = extractelement <4 x i32> %297, i64 1, !dbg !37
  %.extract21 = extractelement <4 x i32> %297, i64 2, !dbg !37
  %.extract22 = extractelement <4 x i32> %297, i64 3, !dbg !37
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract19, i32 %.extract20, i32 %.extract21, i32 %.extract22, ptr addrspace(1) %197, i1 %62) #2, !dbg !37
  %.extract23 = extractelement <4 x i32> %303, i64 0, !dbg !37
  %.extract24 = extractelement <4 x i32> %303, i64 1, !dbg !37
  %.extract25 = extractelement <4 x i32> %303, i64 2, !dbg !37
  %.extract26 = extractelement <4 x i32> %303, i64 3, !dbg !37
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract23, i32 %.extract24, i32 %.extract25, i32 %.extract26, ptr addrspace(1) %199, i1 %63) #2, !dbg !37
  %.extract27 = extractelement <4 x i32> %309, i64 0, !dbg !37
  %.extract28 = extractelement <4 x i32> %309, i64 1, !dbg !37
  %.extract29 = extractelement <4 x i32> %309, i64 2, !dbg !37
  %.extract30 = extractelement <4 x i32> %309, i64 3, !dbg !37
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract27, i32 %.extract28, i32 %.extract29, i32 %.extract30, ptr addrspace(1) %201, i1 %64) #2, !dbg !37
  ret void, !dbg !38
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cvayp6s5bavubqbryraprshz53yzxvofehvouejxbfstdd5lesxp.py", directory: "inductor_cache/va")
!4 = !{ptr @triton_poi_fused_add_15, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_15, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_15", linkageName: "triton_poi_fused_add_15", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 31, column: 19, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 39, scope: !7)
!22 = !DILocation(line: 32, column: 35, scope: !7)
!23 = !DILocation(line: 32, column: 30, scope: !7)
!24 = !DILocation(line: 32, column: 52, scope: !7)
!25 = !DILocation(line: 32, column: 44, scope: !7)
!26 = !DILocation(line: 33, column: 30, scope: !7)
!27 = !DILocation(line: 33, column: 35, scope: !7)
!28 = !DILocation(line: 34, column: 30, scope: !7)
!29 = !DILocation(line: 34, column: 44, scope: !7)
!30 = !DILocation(line: 35, column: 18, scope: !7)
!31 = !DILocation(line: 36, column: 18, scope: !7)
!32 = !DILocation(line: 37, column: 33, scope: !7)
!33 = !DILocation(line: 37, column: 44, scope: !7)
!34 = !DILocation(line: 37, column: 30, scope: !7)
!35 = !DILocation(line: 37, column: 38, scope: !7)
!36 = !DILocation(line: 37, column: 25, scope: !7)
!37 = !DILocation(line: 37, column: 55, scope: !7)
!38 = !DILocation(line: 37, column: 4, scope: !7)
