; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__to_copy__unsafe_index_add_clamp_mul_sub_1(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %5 = shl i32 %4, 9, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 2, !dbg !12
  %8 = and i32 %7, 508, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = or disjoint i32 %9, 3, !dbg !13
  %.frozen = freeze i32 %9, !dbg !14
  %11 = sdiv i32 %.frozen, 64, !dbg !14
  %12 = mul i32 %11, 64, !dbg !15
  %.decomposed = sub i32 %.frozen, %12, !dbg !15
  %13 = sdiv i32 %9, 4096, !dbg !16
  %14 = sitofp i32 %.decomposed to float, !dbg !17
  %15 = fadd float %14, 5.000000e-01, !dbg !18
  %16 = fadd float %15, -5.000000e-01, !dbg !19
  %17 = fcmp ogt float %16, 0.000000e+00, !dbg !20
  %18 = select i1 %17, float %16, float 0.000000e+00, !dbg !24
  %19 = fptosi float %18 to i32, !dbg !25
  %20 = sext i32 %19 to i64, !dbg !26
  %21 = tail call i64 @llvm.smin.i64(i64 %20, i64 62), !dbg !27
  %22 = shl nsw i32 %13, 12, !dbg !29
  %23 = sext i32 %22 to i64, !dbg !30
  %24 = getelementptr float, ptr addrspace(1) %1, i64 %21, !dbg !31
  %25 = getelementptr i8, ptr addrspace(1) %24, i64 4, !dbg !31
  %26 = sitofp i32 %19 to float, !dbg !32
  %27 = fsub float %18, %26, !dbg !33
  %28 = fcmp ogt float %27, 0.000000e+00, !dbg !34
  %29 = select i1 %28, float %27, float 0.000000e+00, !dbg !36
  %30 = fcmp olt float %29, 1.000000e+00, !dbg !37
  %31 = select i1 %30, float %29, float 1.000000e+00, !dbg !39
  %32 = insertelement <2 x float> poison, float %31, i64 0, !dbg !40
  %33 = shufflevector <2 x float> %32, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !40
  %34 = insertelement <2 x i32> poison, i32 %9, i64 0, !dbg !13
  %35 = shufflevector <2 x i32> %34, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !13
  %36 = or disjoint <2 x i32> %35, <i32 2, i32 1>, !dbg !13
  %37 = insertelement <4 x i32> poison, i32 %11, i64 0, !dbg !41
  %38 = insertelement <4 x i32> %37, i32 %10, i64 1, !dbg !41
  %39 = shufflevector <2 x i32> %36, <2 x i32> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !41
  %40 = shufflevector <4 x i32> %38, <4 x i32> %39, <4 x i32> <i32 0, i32 1, i32 4, i32 5>, !dbg !41
  %41 = srem <4 x i32> %40, splat (i32 64), !dbg !41
  %42 = sitofp <4 x i32> %41 to <4 x float>, !dbg !42
  %43 = fadd <4 x float> %42, splat (float 5.000000e-01), !dbg !43
  %44 = fadd <4 x float> %43, splat (float -5.000000e-01), !dbg !44
  %45 = fcmp ogt <4 x float> %44, zeroinitializer, !dbg !45
  %46 = select <4 x i1> %45, <4 x float> %44, <4 x float> zeroinitializer, !dbg !47
  %47 = fptosi <4 x float> %46 to <4 x i32>, !dbg !48
  %48 = extractelement <4 x i32> %47, i64 0, !dbg !49
  %49 = tail call i32 @llvm.smin.i32(i32 %48, i32 62), !dbg !50
  %narrow = add nsw i32 %49, 1, !dbg !50
  %50 = sext i32 %narrow to i64, !dbg !50
  %51 = extractelement <4 x i32> %47, i64 3, !dbg !52
  %52 = sext i32 %51 to i64, !dbg !26
  %53 = extractelement <4 x i32> %47, i64 2, !dbg !52
  %54 = sext i32 %53 to i64, !dbg !26
  %55 = extractelement <4 x i32> %47, i64 1, !dbg !52
  %56 = sext i32 %55 to i64, !dbg !26
  %57 = tail call i64 @llvm.smin.i64(i64 %52, i64 62), !dbg !27
  %58 = tail call i64 @llvm.smin.i64(i64 %54, i64 62), !dbg !27
  %59 = tail call i64 @llvm.smin.i64(i64 %56, i64 62), !dbg !27
  %60 = shl nsw i64 %50, 6, !dbg !53
  %61 = getelementptr float, ptr addrspace(1) %25, i64 %60, !dbg !31
  %62 = getelementptr float, ptr addrspace(1) %61, i64 %23, !dbg !31
  %63 = getelementptr float, ptr addrspace(1) %1, i64 %57, !dbg !31
  %64 = getelementptr i8, ptr addrspace(1) %63, i64 4, !dbg !31
  %65 = getelementptr float, ptr addrspace(1) %64, i64 %60, !dbg !31
  %66 = getelementptr float, ptr addrspace(1) %65, i64 %23, !dbg !31
  %67 = getelementptr float, ptr addrspace(1) %1, i64 %58, !dbg !31
  %68 = getelementptr i8, ptr addrspace(1) %67, i64 4, !dbg !31
  %69 = getelementptr float, ptr addrspace(1) %68, i64 %60, !dbg !31
  %70 = getelementptr float, ptr addrspace(1) %69, i64 %23, !dbg !31
  %71 = getelementptr float, ptr addrspace(1) %1, i64 %59, !dbg !31
  %72 = getelementptr i8, ptr addrspace(1) %71, i64 4, !dbg !31
  %73 = getelementptr float, ptr addrspace(1) %72, i64 %60, !dbg !31
  %74 = getelementptr float, ptr addrspace(1) %73, i64 %23, !dbg !31
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 true) #2, !dbg !54
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 true) #2, !dbg !54
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 true) #2, !dbg !54
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 true) #2, !dbg !54
  %79 = getelementptr float, ptr addrspace(1) %1, i64 %60, !dbg !55
  %80 = getelementptr float, ptr addrspace(1) %79, i64 %20, !dbg !55
  %81 = getelementptr float, ptr addrspace(1) %80, i64 %23, !dbg !55
  %82 = getelementptr float, ptr addrspace(1) %79, i64 %52, !dbg !55
  %83 = getelementptr float, ptr addrspace(1) %82, i64 %23, !dbg !55
  %84 = getelementptr float, ptr addrspace(1) %79, i64 %54, !dbg !55
  %85 = getelementptr float, ptr addrspace(1) %84, i64 %23, !dbg !55
  %86 = getelementptr float, ptr addrspace(1) %79, i64 %56, !dbg !55
  %87 = getelementptr float, ptr addrspace(1) %86, i64 %23, !dbg !55
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 true) #2, !dbg !56
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %83, i1 true) #2, !dbg !56
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 true) #2, !dbg !56
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %87, i1 true) #2, !dbg !56
  %92 = sitofp <4 x i32> %47 to <4 x float>, !dbg !57
  %93 = fsub <4 x float> %46, %92, !dbg !58
  %94 = fcmp ogt <4 x float> %93, zeroinitializer, !dbg !59
  %95 = select <4 x i1> %94, <4 x float> %93, <4 x float> zeroinitializer, !dbg !61
  %96 = fcmp olt <4 x float> %95, splat (float 1.000000e+00), !dbg !62
  %97 = extractelement <4 x i1> %96, i64 3, !dbg !39
  %98 = extractelement <4 x float> %95, i64 3, !dbg !39
  %99 = select i1 %97, float %98, float 1.000000e+00, !dbg !39
  %100 = extractelement <4 x i1> %96, i64 2, !dbg !39
  %101 = extractelement <4 x float> %95, i64 2, !dbg !39
  %102 = select i1 %100, float %101, float 1.000000e+00, !dbg !39
  %103 = extractelement <4 x i1> %96, i64 1, !dbg !39
  %104 = extractelement <4 x float> %95, i64 1, !dbg !39
  %105 = select i1 %103, float %104, float 1.000000e+00, !dbg !39
  %106 = shl i32 %48, 6, !dbg !49
  %107 = add i32 %106, %22, !dbg !64
  %108 = add i32 %107, %19, !dbg !52
  %109 = add i32 %107, %51, !dbg !52
  %110 = add i32 %107, %53, !dbg !52
  %111 = add i32 %107, %55, !dbg !52
  %112 = sext i32 %108 to i64, !dbg !65
  %113 = getelementptr float, ptr addrspace(1) %1, i64 %112, !dbg !65
  %114 = sext i32 %109 to i64, !dbg !65
  %115 = getelementptr float, ptr addrspace(1) %1, i64 %114, !dbg !65
  %116 = sext i32 %110 to i64, !dbg !65
  %117 = getelementptr float, ptr addrspace(1) %1, i64 %116, !dbg !65
  %118 = sext i32 %111 to i64, !dbg !65
  %119 = getelementptr float, ptr addrspace(1) %1, i64 %118, !dbg !65
  %120 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %113, i1 true) #2, !dbg !66
  %121 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %115, i1 true) #2, !dbg !66
  %122 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %117, i1 true) #2, !dbg !66
  %123 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %119, i1 true) #2, !dbg !66
  %124 = sext i32 %106 to i64, !dbg !67
  %125 = getelementptr float, ptr addrspace(1) %25, i64 %124, !dbg !68
  %126 = getelementptr float, ptr addrspace(1) %125, i64 %23, !dbg !68
  %127 = getelementptr float, ptr addrspace(1) %64, i64 %124, !dbg !68
  %128 = getelementptr float, ptr addrspace(1) %127, i64 %23, !dbg !68
  %129 = getelementptr float, ptr addrspace(1) %68, i64 %124, !dbg !68
  %130 = getelementptr float, ptr addrspace(1) %129, i64 %23, !dbg !68
  %131 = getelementptr float, ptr addrspace(1) %72, i64 %124, !dbg !68
  %132 = getelementptr float, ptr addrspace(1) %131, i64 %23, !dbg !68
  %133 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %126, i1 true) #2, !dbg !69
  %134 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %128, i1 true) #2, !dbg !69
  %135 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %130, i1 true) #2, !dbg !69
  %136 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %132, i1 true) #2, !dbg !69
  %137 = insertelement <2 x i32> poison, i32 %88, i64 0, !dbg !56
  %138 = insertelement <2 x i32> %137, i32 %120, i64 1, !dbg !56
  %139 = bitcast <2 x i32> %138 to <2 x float>, !dbg !56
  %140 = insertelement <2 x i32> poison, i32 %75, i64 0, !dbg !54
  %141 = insertelement <2 x i32> %140, i32 %133, i64 1, !dbg !54
  %142 = bitcast <2 x i32> %141 to <2 x float>, !dbg !54
  %143 = fsub <2 x float> %142, %139, !dbg !70
  %144 = fmul <2 x float> %143, %33, !dbg !40
  %145 = fadd <2 x float> %144, %139, !dbg !71
  %146 = insertelement <2 x i32> poison, i32 %89, i64 0, !dbg !56
  %147 = insertelement <2 x i32> %146, i32 %121, i64 1, !dbg !56
  %148 = bitcast <2 x i32> %147 to <2 x float>, !dbg !56
  %149 = insertelement <2 x i32> poison, i32 %76, i64 0, !dbg !54
  %150 = insertelement <2 x i32> %149, i32 %134, i64 1, !dbg !54
  %151 = bitcast <2 x i32> %150 to <2 x float>, !dbg !54
  %152 = fsub <2 x float> %151, %148, !dbg !70
  %153 = insertelement <2 x float> poison, float %99, i64 0, !dbg !40
  %154 = shufflevector <2 x float> %153, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !40
  %155 = fmul <2 x float> %154, %152, !dbg !40
  %156 = fadd <2 x float> %155, %148, !dbg !71
  %157 = insertelement <2 x i32> poison, i32 %90, i64 0, !dbg !56
  %158 = insertelement <2 x i32> %157, i32 %122, i64 1, !dbg !56
  %159 = bitcast <2 x i32> %158 to <2 x float>, !dbg !56
  %160 = insertelement <2 x i32> poison, i32 %77, i64 0, !dbg !54
  %161 = insertelement <2 x i32> %160, i32 %135, i64 1, !dbg !54
  %162 = bitcast <2 x i32> %161 to <2 x float>, !dbg !54
  %163 = fsub <2 x float> %162, %159, !dbg !70
  %164 = insertelement <2 x float> poison, float %102, i64 0, !dbg !40
  %165 = shufflevector <2 x float> %164, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !40
  %166 = fmul <2 x float> %165, %163, !dbg !40
  %167 = fadd <2 x float> %166, %159, !dbg !71
  %168 = insertelement <2 x i32> poison, i32 %91, i64 0, !dbg !56
  %169 = insertelement <2 x i32> %168, i32 %123, i64 1, !dbg !56
  %170 = bitcast <2 x i32> %169 to <2 x float>, !dbg !56
  %171 = insertelement <2 x i32> poison, i32 %78, i64 0, !dbg !54
  %172 = insertelement <2 x i32> %171, i32 %136, i64 1, !dbg !54
  %173 = bitcast <2 x i32> %172 to <2 x float>, !dbg !54
  %174 = fsub <2 x float> %173, %170, !dbg !70
  %175 = insertelement <2 x float> poison, float %105, i64 0, !dbg !40
  %176 = shufflevector <2 x float> %175, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !40
  %177 = fmul <2 x float> %176, %174, !dbg !40
  %178 = fadd <2 x float> %177, %170, !dbg !71
  %179 = extractelement <2 x float> %145, i64 0, !dbg !72
  %180 = extractelement <2 x float> %145, i64 1, !dbg !73
  %181 = fsub float %179, %180, !dbg !72
  %182 = extractelement <2 x float> %156, i64 0, !dbg !72
  %183 = extractelement <2 x float> %156, i64 1, !dbg !73
  %184 = fsub float %182, %183, !dbg !72
  %185 = extractelement <2 x float> %167, i64 0, !dbg !72
  %186 = extractelement <2 x float> %167, i64 1, !dbg !73
  %187 = fsub float %185, %186, !dbg !72
  %188 = extractelement <2 x float> %178, i64 0, !dbg !72
  %189 = extractelement <2 x float> %178, i64 1, !dbg !73
  %190 = fsub float %188, %189, !dbg !72
  %191 = extractelement <4 x i1> %96, i64 0, !dbg !74
  %192 = extractelement <4 x float> %95, i64 0, !dbg !74
  %193 = select i1 %191, float %192, float 1.000000e+00, !dbg !74
  %194 = fmul float %193, %181, !dbg !75
  %195 = fmul float %193, %184, !dbg !75
  %196 = fmul float %193, %187, !dbg !75
  %197 = fmul float %193, %190, !dbg !75
  %198 = fadd float %180, %194, !dbg !73
  %199 = fadd float %183, %195, !dbg !73
  %200 = fadd float %186, %196, !dbg !73
  %201 = fadd float %189, %197, !dbg !73
  %202 = sext i32 %9 to i64, !dbg !76
  %203 = getelementptr float, ptr addrspace(1) %0, i64 %202, !dbg !76
  %204 = bitcast float %198 to i32, !dbg !77
  %205 = bitcast float %199 to i32, !dbg !77
  %206 = bitcast float %200 to i32, !dbg !77
  %207 = bitcast float %201 to i32, !dbg !77
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %204, i32 %205, i32 %206, i32 %207, ptr addrspace(1) %203, i1 true) #2, !dbg !77
  ret void, !dbg !78
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.smin.i64(i64, i64) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ciaslww3ryrort4sgrxrlpu72psz7zreadeijopmikma6ib6msyu.py", directory: "inductor_cache/ia")
!4 = !{ptr @triton_poi_fused__to_copy__unsafe_index_add_clamp_mul_sub_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__to_copy__unsafe_index_add_clamp_mul_sub_1, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__to_copy__unsafe_index_add_clamp_mul_sub_1", linkageName: "triton_poi_fused__to_copy__unsafe_index_add_clamp_mul_sub_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 43, column: 21, scope: !7)
!18 = !DILocation(line: 44, column: 20, scope: !7)
!19 = !DILocation(line: 46, column: 20, scope: !7)
!20 = !DILocation(line: 118, column: 15, scope: !21, inlinedAt: !23)
!21 = distinct !DILexicalBlockFile(scope: !7, file: !22, discriminator: 0)
!22 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!23 = !DILocation(line: 47, column: 42, scope: !7)
!24 = !DILocation(line: 121, column: 29, scope: !21, inlinedAt: !23)
!25 = !DILocation(line: 48, column: 21, scope: !7)
!26 = !DILocation(line: 49, column: 20, scope: !7)
!27 = !DILocation(line: 113, column: 29, scope: !21, inlinedAt: !28)
!28 = !DILocation(line: 50, column: 42, scope: !7)
!29 = !DILocation(line: 51, column: 55, scope: !7)
!30 = !DILocation(line: 51, column: 50, scope: !7)
!31 = !DILocation(line: 51, column: 31, scope: !7)
!32 = !DILocation(line: 54, column: 21, scope: !7)
!33 = !DILocation(line: 55, column: 20, scope: !7)
!34 = !DILocation(line: 118, column: 15, scope: !21, inlinedAt: !35)
!35 = !DILocation(line: 56, column: 42, scope: !7)
!36 = !DILocation(line: 121, column: 29, scope: !21, inlinedAt: !35)
!37 = !DILocation(line: 110, column: 15, scope: !21, inlinedAt: !38)
!38 = !DILocation(line: 57, column: 42, scope: !7)
!39 = !DILocation(line: 113, column: 29, scope: !21, inlinedAt: !38)
!40 = !DILocation(line: 58, column: 20, scope: !7)
!41 = !DILocation(line: 24, column: 27, scope: !7)
!42 = !DILocation(line: 29, column: 19, scope: !7)
!43 = !DILocation(line: 31, column: 18, scope: !7)
!44 = !DILocation(line: 34, column: 18, scope: !7)
!45 = !DILocation(line: 118, column: 15, scope: !21, inlinedAt: !46)
!46 = !DILocation(line: 36, column: 40, scope: !7)
!47 = !DILocation(line: 121, column: 29, scope: !21, inlinedAt: !46)
!48 = !DILocation(line: 37, column: 19, scope: !7)
!49 = !DILocation(line: 60, column: 42, scope: !7)
!50 = !DILocation(line: 113, column: 29, scope: !21, inlinedAt: !51)
!51 = !DILocation(line: 41, column: 42, scope: !7)
!52 = !DILocation(line: 60, column: 49, scope: !7)
!53 = !DILocation(line: 51, column: 42, scope: !7)
!54 = !DILocation(line: 51, column: 60, scope: !7)
!55 = !DILocation(line: 52, column: 31, scope: !7)
!56 = !DILocation(line: 52, column: 60, scope: !7)
!57 = !DILocation(line: 66, column: 20, scope: !7)
!58 = !DILocation(line: 67, column: 19, scope: !7)
!59 = !DILocation(line: 118, column: 15, scope: !21, inlinedAt: !60)
!60 = !DILocation(line: 68, column: 42, scope: !7)
!61 = !DILocation(line: 121, column: 29, scope: !21, inlinedAt: !60)
!62 = !DILocation(line: 110, column: 15, scope: !21, inlinedAt: !63)
!63 = !DILocation(line: 69, column: 42, scope: !7)
!64 = !DILocation(line: 60, column: 39, scope: !7)
!65 = !DILocation(line: 60, column: 31, scope: !7)
!66 = !DILocation(line: 60, column: 59, scope: !7)
!67 = !DILocation(line: 61, column: 39, scope: !7)
!68 = !DILocation(line: 61, column: 31, scope: !7)
!69 = !DILocation(line: 61, column: 59, scope: !7)
!70 = !DILocation(line: 53, column: 20, scope: !7)
!71 = !DILocation(line: 59, column: 20, scope: !7)
!72 = !DILocation(line: 65, column: 20, scope: !7)
!73 = !DILocation(line: 71, column: 20, scope: !7)
!74 = !DILocation(line: 113, column: 29, scope: !21, inlinedAt: !63)
!75 = !DILocation(line: 70, column: 20, scope: !7)
!76 = !DILocation(line: 72, column: 28, scope: !7)
!77 = !DILocation(line: 72, column: 40, scope: !7)
!78 = !DILocation(line: 72, column: 4, scope: !7)
