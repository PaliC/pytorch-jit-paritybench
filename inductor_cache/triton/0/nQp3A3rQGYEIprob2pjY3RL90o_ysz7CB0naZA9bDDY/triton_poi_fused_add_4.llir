; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_add_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %9 = shl i32 %8, 4, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = lshr i32 %10, 3, !dbg !12
  %12 = and i32 %11, 15, !dbg !12
  %13 = shl i32 %10, 1, !dbg !12
  %14 = and i32 %13, 14, !dbg !12
  %15 = or disjoint i32 %9, %12, !dbg !13
  %16 = or disjoint i32 %9, %14, !dbg !13
  %17 = icmp slt i32 %15, 16, !dbg !14
  %18 = icmp slt i32 %16, 16, !dbg !14
  %19 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %20 = shl i32 %19, 4, !dbg !16
  %21 = or disjoint i32 %20, %14, !dbg !17
  %22 = or disjoint i32 %20, %12, !dbg !17
  %23 = icmp slt i32 %21, 16, !dbg !18
  %24 = icmp slt i32 %22, 16, !dbg !18
  %25 = srem i32 %21, 4, !dbg !19
  %26 = shl i32 %15, 4, !dbg !20
  %27 = add i32 %21, %26, !dbg !21
  %28 = sext i32 %27 to i64, !dbg !22
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !22
  %30 = and i1 %17, %23, !dbg !23
  %31 = and i1 %18, %24, !dbg !23
  %32 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %29, i1 %30) #2, !dbg !24
  %33 = extractvalue { i32, i32 } %32, 0, !dbg !24
  %34 = extractvalue { i32, i32 } %32, 1, !dbg !24
  %35 = sext i32 %25 to i64, !dbg !25
  %36 = getelementptr float, ptr addrspace(1) %1, i64 %35, !dbg !25
  %37 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %36, i1 %23) #2, !dbg !26
  %38 = extractvalue { i32, i32 } %37, 0, !dbg !26
  %39 = extractvalue { i32, i32 } %37, 1, !dbg !26
  %40 = shl i32 %22, 4, !dbg !27
  %41 = add i32 %40, %16, !dbg !28
  %42 = sext i32 %41 to i64, !dbg !29
  %43 = getelementptr float, ptr addrspace(1) %2, i64 %42, !dbg !29
  %44 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %43, i1 %31) #2, !dbg !30
  %45 = extractvalue { i32, i32 } %44, 0, !dbg !30
  %46 = extractvalue { i32, i32 } %44, 1, !dbg !30
  %47 = shl i32 %10, 5, !dbg !30
  %48 = and i32 %47, 224, !dbg !30
  %49 = or disjoint i32 %48, %12, !dbg !30
  %50 = and i32 %13, 254, !dbg !30
  %51 = lshr exact i32 %48, 4, !dbg !30
  %52 = add nuw nsw i32 %51, %49, !dbg !30
  %53 = zext nneg i32 %52 to i64, !dbg !30
  %54 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %53, !dbg !30
  %55 = insertelement <1 x i32> poison, i32 %45, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %54, <1 x i32> %55, i1 true) #2, !dbg !30
  %56 = or disjoint i32 %49, 16, !dbg !30
  %57 = lshr i32 %56, 4, !dbg !30
  %58 = add nuw nsw i32 %57, %56, !dbg !30
  %59 = zext nneg i32 %58 to i64, !dbg !30
  %60 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %59, !dbg !30
  %61 = insertelement <1 x i32> poison, i32 %46, i64 0, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %60, <1 x i32> %61, i1 true) #2, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %62 = lshr i32 %50, 4, !dbg !30
  %63 = add nuw nsw i32 %62, %50, !dbg !30
  %64 = zext nneg i32 %63 to i64, !dbg !30
  %65 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %64, !dbg !30
  %66 = load float, ptr addrspace(3) %65, align 4, !dbg !30
  %67 = or disjoint i32 %50, 1, !dbg !30
  %68 = add nuw nsw i32 %67, %62, !dbg !30
  %69 = zext nneg i32 %68 to i64, !dbg !30
  %70 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %69, !dbg !30
  %71 = load float, ptr addrspace(3) %70, align 4, !dbg !30
  %72 = getelementptr float, ptr addrspace(1) %3, i64 %28, !dbg !31
  %73 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %72, i1 %30) #2, !dbg !32
  %74 = extractvalue { i32, i32 } %73, 0, !dbg !32
  %75 = extractvalue { i32, i32 } %73, 1, !dbg !32
  %76 = getelementptr float, ptr addrspace(1) %4, i64 %35, !dbg !33
  %77 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %76, i1 %23) #2, !dbg !34
  %78 = extractvalue { i32, i32 } %77, 0, !dbg !34
  %79 = extractvalue { i32, i32 } %77, 1, !dbg !34
  %80 = insertelement <2 x i32> poison, i32 %33, i64 0, !dbg !24
  %81 = insertelement <2 x i32> %80, i32 %74, i64 1, !dbg !24
  %82 = bitcast <2 x i32> %81 to <2 x float>, !dbg !24
  %83 = insertelement <2 x i32> poison, i32 %38, i64 0, !dbg !26
  %84 = insertelement <2 x i32> %83, i32 %78, i64 1, !dbg !26
  %85 = bitcast <2 x i32> %84 to <2 x float>, !dbg !26
  %86 = fadd <2 x float> %82, %85, !dbg !35
  %87 = insertelement <2 x i32> poison, i32 %34, i64 0, !dbg !24
  %88 = insertelement <2 x i32> %87, i32 %75, i64 1, !dbg !24
  %89 = bitcast <2 x i32> %88 to <2 x float>, !dbg !24
  %90 = insertelement <2 x i32> poison, i32 %39, i64 0, !dbg !26
  %91 = insertelement <2 x i32> %90, i32 %79, i64 1, !dbg !26
  %92 = bitcast <2 x i32> %91 to <2 x float>, !dbg !26
  %93 = fadd <2 x float> %89, %92, !dbg !35
  %94 = extractelement <2 x float> %86, i64 1, !dbg !36
  %95 = fadd float %66, %94, !dbg !36
  %96 = extractelement <2 x float> %93, i64 1, !dbg !36
  %97 = fadd float %71, %96, !dbg !36
  %98 = extractelement <2 x float> %86, i64 0, !dbg !37
  %99 = fadd float %98, %95, !dbg !37
  %100 = extractelement <2 x float> %93, i64 0, !dbg !37
  %101 = fadd float %100, %97, !dbg !37
  %102 = bitcast float %99 to i32, !dbg !38
  %103 = bitcast float %101 to i32, !dbg !38
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %102, i32 %103, ptr addrspace(1) %29, i1 %30) #2, !dbg !38
  ret void, !dbg !39
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cvxpjuwkqcnc57sdultyc2demfy4xvvxp3h3dvrdvlznjt277arw.py", directory: "inductor_cache/vx")
!4 = !{ptr @triton_poi_fused_add_4, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_4, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_4", linkageName: "triton_poi_fused_add_4", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 31, column: 42, scope: !7)
!21 = !DILocation(line: 31, column: 39, scope: !7)
!22 = !DILocation(line: 31, column: 34, scope: !7)
!23 = !DILocation(line: 31, column: 55, scope: !7)
!24 = !DILocation(line: 31, column: 47, scope: !7)
!25 = !DILocation(line: 32, column: 30, scope: !7)
!26 = !DILocation(line: 32, column: 35, scope: !7)
!27 = !DILocation(line: 33, column: 38, scope: !7)
!28 = !DILocation(line: 33, column: 35, scope: !7)
!29 = !DILocation(line: 33, column: 30, scope: !7)
!30 = !DILocation(line: 33, column: 43, scope: !7)
!31 = !DILocation(line: 34, column: 30, scope: !7)
!32 = !DILocation(line: 34, column: 43, scope: !7)
!33 = !DILocation(line: 35, column: 30, scope: !7)
!34 = !DILocation(line: 35, column: 35, scope: !7)
!35 = !DILocation(line: 36, column: 18, scope: !7)
!36 = !DILocation(line: 38, column: 18, scope: !7)
!37 = !DILocation(line: 39, column: 18, scope: !7)
!38 = !DILocation(line: 40, column: 47, scope: !7)
!39 = !DILocation(line: 40, column: 4, scope: !7)
