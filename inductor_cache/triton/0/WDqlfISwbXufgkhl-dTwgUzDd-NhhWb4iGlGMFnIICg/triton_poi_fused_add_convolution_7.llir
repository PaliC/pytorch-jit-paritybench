; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_add_convolution_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9, i32 %10) local_unnamed_addr !dbg !7 {
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %13 = shl i32 %12, 4, !dbg !11
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %15 = lshr i32 %14, 1, !dbg !12
  %16 = and i32 %15, 7, !dbg !12
  %17 = and i32 %14, 16, !dbg !12
  %18 = lshr exact i32 %17, 1, !dbg !12
  %19 = or disjoint i32 %16, %18, !dbg !12
  %20 = and i32 %14, 1, !dbg !12
  %21 = and i32 %14, 15, !dbg !12
  %22 = or disjoint i32 %19, %13, !dbg !13
  %23 = or disjoint i32 %13, %21, !dbg !13
  %24 = icmp slt i32 %22, 16, !dbg !14
  %25 = icmp slt i32 %23, 16, !dbg !14
  %26 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %27 = shl i32 %26, 1, !dbg !16
  %.lobit2 = lshr exact i32 %17, 4, !dbg !17
  %28 = or disjoint i32 %27, %20, !dbg !18
  %29 = or disjoint i32 %27, %.lobit2, !dbg !18
  %30 = icmp slt i32 %28, 4, !dbg !19
  %31 = icmp slt i32 %29, 4, !dbg !19
  %32 = srem i32 %22, 4, !dbg !20
  %.frozen = freeze i32 %23, !dbg !21
  %33 = sdiv i32 %.frozen, 4, !dbg !21
  %34 = mul i32 %33, 4, !dbg !20
  %.decomposed = sub i32 %.frozen, %34, !dbg !20
  %35 = shl i32 %22, 2, !dbg !22
  %36 = add i32 %28, %35, !dbg !23
  %37 = sext i32 %36 to i64, !dbg !24
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !24
  %39 = and i1 %24, %30, !dbg !25
  %40 = and i1 %25, %31, !dbg !25
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 %39) #2, !dbg !26
  %42 = sext i32 %32 to i64, !dbg !27
  %43 = getelementptr float, ptr addrspace(1) %4, i64 %42, !dbg !27
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 %24) #2, !dbg !28
  %45 = getelementptr float, ptr addrspace(1) %1, i64 %37, !dbg !29
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 %39) #2, !dbg !30
  %47 = bitcast i32 %46 to float, !dbg !30
  %48 = getelementptr float, ptr addrspace(1) %5, i64 %42, !dbg !31
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 %24) #2, !dbg !32
  %50 = bitcast i32 %49 to float, !dbg !32
  %51 = getelementptr float, ptr addrspace(1) %2, i64 %37, !dbg !33
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 %39) #2, !dbg !34
  %53 = getelementptr float, ptr addrspace(1) %6, i64 %42, !dbg !35
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 %24) #2, !dbg !36
  %55 = shl i32 %29, 2, !dbg !37
  %56 = add i32 %55, %.decomposed, !dbg !38
  %57 = shl i32 %33, 4, !dbg !39
  %58 = add i32 %56, %57, !dbg !40
  %59 = sext i32 %58 to i64, !dbg !41
  %60 = getelementptr float, ptr addrspace(1) %3, i64 %59, !dbg !41
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 %40) #2, !dbg !42
  %62 = bitcast i32 %61 to float, !dbg !42
  %63 = sext i32 %.decomposed to i64, !dbg !43
  %64 = getelementptr float, ptr addrspace(1) %7, i64 %63, !dbg !43
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 %25) #2, !dbg !44
  %66 = bitcast i32 %65 to float, !dbg !44
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %8, i1 true) #2, !dbg !45
  %68 = getelementptr i8, ptr addrspace(1) %8, i64 4, !dbg !46
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 true) #2, !dbg !47
  %70 = bitcast i32 %69 to float, !dbg !47
  %71 = getelementptr i8, ptr addrspace(1) %8, i64 8, !dbg !48
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %71, i1 true) #2, !dbg !49
  %73 = fadd float %47, %50, !dbg !50
  %74 = fadd float %62, %66, !dbg !51
  %75 = fmul float %73, %70, !dbg !52
  %76 = insertelement <2 x i32> poison, i32 %41, i64 0, !dbg !26
  %77 = insertelement <2 x i32> %76, i32 %52, i64 1, !dbg !26
  %78 = bitcast <2 x i32> %77 to <2 x float>, !dbg !26
  %79 = insertelement <2 x i32> poison, i32 %44, i64 0, !dbg !28
  %80 = insertelement <2 x i32> %79, i32 %54, i64 1, !dbg !28
  %81 = bitcast <2 x i32> %80 to <2 x float>, !dbg !28
  %82 = insertelement <2 x i32> poison, i32 %67, i64 0, !dbg !45
  %83 = insertelement <2 x i32> %82, i32 %72, i64 1, !dbg !45
  %84 = bitcast <2 x i32> %83 to <2 x float>, !dbg !45
  %85 = fadd <2 x float> %78, %81, !dbg !53
  %86 = fmul <2 x float> %85, %84, !dbg !54
  %87 = extractelement <2 x float> %86, i64 0, !dbg !55
  %88 = fadd float %87, %75, !dbg !55
  %89 = extractelement <2 x float> %86, i64 1, !dbg !56
  %90 = fadd float %88, %89, !dbg !56
  %91 = shl nuw nsw i32 %20, 4, !dbg !56
  %92 = or disjoint i32 %91, %16, !dbg !56
  %93 = or disjoint i32 %92, %18, !dbg !56
  %94 = and i32 %14, 31, !dbg !56
  %95 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %20, !dbg !56
  %96 = getelementptr inbounds float, ptr addrspace(3) %95, i32 %93, !dbg !56
  %97 = bitcast float %90 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %96, <1 x i32> %97, i1 true) #2, !dbg !56
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  %98 = lshr i32 %94, 4, !dbg !56
  %99 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %98, !dbg !56
  %100 = getelementptr inbounds float, ptr addrspace(3) %99, i32 %94, !dbg !56
  %101 = load float, ptr addrspace(3) %100, align 4, !dbg !56
  %102 = fadd float %74, %101, !dbg !57
  tail call void @llvm.nvvm.barrier0(), !dbg !58
  %bc = bitcast <2 x float> %85 to <2 x i32>, !dbg !59
  %103 = extractelement <2 x i32> %bc, i64 0, !dbg !59
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %103, ptr addrspace(1) %38, i1 %39) #2, !dbg !59
  tail call void @llvm.nvvm.barrier0(), !dbg !60
  %104 = bitcast float %73 to i32, !dbg !61
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %104, ptr addrspace(1) %45, i1 %39) #2, !dbg !61
  tail call void @llvm.nvvm.barrier0(), !dbg !62
  %bc3 = bitcast <2 x float> %85 to <2 x i32>, !dbg !63
  %105 = extractelement <2 x i32> %bc3, i64 1, !dbg !63
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %105, ptr addrspace(1) %51, i1 %39) #2, !dbg !63
  tail call void @llvm.nvvm.barrier0(), !dbg !64
  %106 = bitcast float %102 to i32, !dbg !65
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %106, ptr addrspace(1) %60, i1 %40) #2, !dbg !65
  ret void, !dbg !66
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c3eu5qgo355wzomlv2sjsnpnb34hz2l7cow53aei7blq7fkizck4.py", directory: "inductor_cache/3e")
!4 = !{ptr @triton_poi_fused_add_convolution_7, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_convolution_7, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_convolution_7", linkageName: "triton_poi_fused_add_convolution_7", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 31, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 41, scope: !7)
!23 = !DILocation(line: 32, column: 39, scope: !7)
!24 = !DILocation(line: 32, column: 34, scope: !7)
!25 = !DILocation(line: 32, column: 54, scope: !7)
!26 = !DILocation(line: 32, column: 46, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 33, column: 35, scope: !7)
!29 = !DILocation(line: 34, column: 34, scope: !7)
!30 = !DILocation(line: 34, column: 46, scope: !7)
!31 = !DILocation(line: 35, column: 30, scope: !7)
!32 = !DILocation(line: 35, column: 35, scope: !7)
!33 = !DILocation(line: 36, column: 34, scope: !7)
!34 = !DILocation(line: 36, column: 46, scope: !7)
!35 = !DILocation(line: 37, column: 30, scope: !7)
!36 = !DILocation(line: 37, column: 35, scope: !7)
!37 = !DILocation(line: 38, column: 41, scope: !7)
!38 = !DILocation(line: 38, column: 39, scope: !7)
!39 = !DILocation(line: 38, column: 49, scope: !7)
!40 = !DILocation(line: 38, column: 46, scope: !7)
!41 = !DILocation(line: 38, column: 34, scope: !7)
!42 = !DILocation(line: 38, column: 54, scope: !7)
!43 = !DILocation(line: 39, column: 31, scope: !7)
!44 = !DILocation(line: 39, column: 36, scope: !7)
!45 = !DILocation(line: 40, column: 20, scope: !7)
!46 = !DILocation(line: 42, column: 31, scope: !7)
!47 = !DILocation(line: 42, column: 20, scope: !7)
!48 = !DILocation(line: 44, column: 31, scope: !7)
!49 = !DILocation(line: 44, column: 20, scope: !7)
!50 = !DILocation(line: 47, column: 18, scope: !7)
!51 = !DILocation(line: 49, column: 19, scope: !7)
!52 = !DILocation(line: 51, column: 20, scope: !7)
!53 = !DILocation(line: 46, column: 18, scope: !7)
!54 = !DILocation(line: 50, column: 20, scope: !7)
!55 = !DILocation(line: 52, column: 20, scope: !7)
!56 = !DILocation(line: 54, column: 20, scope: !7)
!57 = !DILocation(line: 55, column: 20, scope: !7)
!58 = !DILocation(line: 56, column: 4, scope: !7)
!59 = !DILocation(line: 57, column: 46, scope: !7)
!60 = !DILocation(line: 58, column: 4, scope: !7)
!61 = !DILocation(line: 59, column: 46, scope: !7)
!62 = !DILocation(line: 60, column: 4, scope: !7)
!63 = !DILocation(line: 61, column: 46, scope: !7)
!64 = !DILocation(line: 62, column: 4, scope: !7)
!65 = !DILocation(line: 63, column: 55, scope: !7)
!66 = !DILocation(line: 63, column: 4, scope: !7)
