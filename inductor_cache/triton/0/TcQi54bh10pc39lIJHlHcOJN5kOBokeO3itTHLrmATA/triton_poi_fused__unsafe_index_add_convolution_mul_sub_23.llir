; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__unsafe_index_add_convolution_mul_sub_23(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, i32 %12) local_unnamed_addr !dbg !7 {
  %14 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %15 = shl i32 %14, 10, !dbg !11
  %16 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %17 = shl i32 %16, 2, !dbg !12
  %18 = and i32 %17, 508, !dbg !12
  %19 = or disjoint i32 %15, %18, !dbg !13
  %20 = or disjoint i32 %19, 2, !dbg !13
  %21 = or disjoint i32 %19, 512, !dbg !13
  %.frozen = freeze i32 %19, !dbg !14
  %22 = sdiv i32 %.frozen, 64, !dbg !14
  %23 = sdiv i32 %21, 64, !dbg !14
  %24 = srem i32 %22, 64, !dbg !15
  %25 = srem i32 %23, 64, !dbg !15
  %26 = mul i32 %22, 64, !dbg !16
  %.decomposed = sub i32 %.frozen, %26, !dbg !16
  %27 = srem i32 %20, 64, !dbg !16
  %28 = sdiv i32 %19, 4096, !dbg !17
  %29 = sdiv i32 %21, 4096, !dbg !17
  %30 = srem i32 %28, 512, !dbg !18
  %31 = srem i32 %29, 512, !dbg !18
  %32 = sdiv i32 %19, 2097152, !dbg !19
  %33 = sdiv i32 %21, 2097152, !dbg !19
  %34 = sext i32 %24 to i64, !dbg !20
  %35 = getelementptr i64, ptr addrspace(1) %2, i64 %34, !dbg !20
  %36 = sext i32 %25 to i64, !dbg !20
  %37 = getelementptr i64, ptr addrspace(1) %2, i64 %36, !dbg !20
  %38 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %35, i1 true) #1, !dbg !21
  %39 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %35, i1 true) #1, !dbg !21
  %40 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %35, i1 true) #1, !dbg !21
  %41 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %35, i1 true) #1, !dbg !21
  %42 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %37, i1 true) #1, !dbg !21
  %43 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %37, i1 true) #1, !dbg !21
  %44 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %37, i1 true) #1, !dbg !21
  %45 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %37, i1 true) #1, !dbg !21
  %46 = sext i32 %.decomposed to i64, !dbg !22
  %47 = getelementptr i64, ptr addrspace(1) %3, i64 %46, !dbg !22
  %48 = sext i32 %27 to i64, !dbg !22
  %49 = getelementptr i64, ptr addrspace(1) %3, i64 %48, !dbg !22
  %50 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %47, i1 true) #1, !dbg !23
  %51 = extractvalue { i64, i64 } %50, 0, !dbg !23
  %52 = extractvalue { i64, i64 } %50, 1, !dbg !23
  %53 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %49, i1 true) #1, !dbg !23
  %54 = extractvalue { i64, i64 } %53, 0, !dbg !23
  %55 = extractvalue { i64, i64 } %53, 1, !dbg !23
  %56 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %47, i1 true) #1, !dbg !23
  %57 = extractvalue { i64, i64 } %56, 0, !dbg !23
  %58 = extractvalue { i64, i64 } %56, 1, !dbg !23
  %59 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %49, i1 true) #1, !dbg !23
  %60 = extractvalue { i64, i64 } %59, 0, !dbg !23
  %61 = extractvalue { i64, i64 } %59, 1, !dbg !23
  %62 = getelementptr i64, ptr addrspace(1) %6, i64 %46, !dbg !24
  %63 = getelementptr i64, ptr addrspace(1) %6, i64 %48, !dbg !24
  %64 = getelementptr float, ptr addrspace(1) %7, i64 %46, !dbg !25
  %65 = getelementptr i64, ptr addrspace(1) %8, i64 %34, !dbg !26
  %66 = getelementptr i64, ptr addrspace(1) %8, i64 %36, !dbg !26
  %67 = getelementptr float, ptr addrspace(1) %9, i64 %34, !dbg !27
  %68 = getelementptr float, ptr addrspace(1) %9, i64 %36, !dbg !27
  %69 = lshr i64 %52, 59, !dbg !28
  %70 = and i64 %69, 16, !dbg !28
  %71 = add i64 %70, %52, !dbg !28
  %72 = lshr i64 %54, 59, !dbg !28
  %73 = and i64 %72, 16, !dbg !28
  %74 = add i64 %73, %54, !dbg !28
  %75 = lshr i64 %55, 59, !dbg !28
  %76 = and i64 %75, 16, !dbg !28
  %77 = add i64 %76, %55, !dbg !28
  %78 = lshr i64 %58, 59, !dbg !28
  %79 = and i64 %78, 16, !dbg !28
  %80 = add i64 %79, %58, !dbg !28
  %81 = lshr i64 %60, 59, !dbg !28
  %82 = and i64 %81, 16, !dbg !28
  %83 = add i64 %82, %60, !dbg !28
  %84 = lshr i64 %61, 59, !dbg !28
  %85 = and i64 %84, 16, !dbg !28
  %86 = add i64 %85, %61, !dbg !28
  %87 = shl i64 %71, 9, !dbg !29
  %88 = shl i64 %74, 9, !dbg !29
  %89 = shl i64 %77, 9, !dbg !29
  %90 = shl i64 %80, 9, !dbg !29
  %91 = shl i64 %83, 9, !dbg !29
  %92 = shl i64 %86, 9, !dbg !29
  %93 = shl nsw i32 %32, 17, !dbg !30
  %94 = shl nsw i32 %33, 17, !dbg !30
  %95 = insertelement <2 x i32> poison, i32 %93, i64 0, !dbg !31
  %96 = insertelement <2 x i32> %95, i32 %30, i64 1, !dbg !31
  %97 = sext <2 x i32> %96 to <2 x i64>, !dbg !31
  %98 = extractelement <2 x i64> %97, i64 1, !dbg !32
  %99 = getelementptr float, ptr addrspace(1) %5, i64 %98, !dbg !33
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %99, i1 true) #1, !dbg !34
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %99, i1 true) #1, !dbg !34
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %99, i1 true) #1, !dbg !34
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %99, i1 true) #1, !dbg !34
  %104 = getelementptr float, ptr addrspace(1) %11, i64 %98, !dbg !35
  %105 = insertelement <2 x i64> poison, i64 %38, i64 0, !dbg !36
  %106 = insertelement <2 x i64> %105, i64 %51, i64 1, !dbg !36
  %107 = lshr <2 x i64> %106, splat (i64 59), !dbg !36
  %108 = and <2 x i64> %107, splat (i64 16), !dbg !36
  %109 = add <2 x i64> %108, %106, !dbg !36
  %110 = add i64 %87, %98, !dbg !32
  %111 = add i64 %88, %98, !dbg !32
  %112 = add i64 %89, %98, !dbg !32
  %113 = shl <2 x i64> %109, <i64 13, i64 9>, !dbg !37
  %114 = add <2 x i64> %113, %97, !dbg !38
  %115 = extractelement <2 x i64> %114, i64 0, !dbg !39
  %116 = extractelement <2 x i64> %114, i64 1, !dbg !40
  %117 = add i64 %115, %116, !dbg !31
  %118 = add i64 %115, %110, !dbg !31
  %119 = add i64 %115, %111, !dbg !31
  %120 = add i64 %115, %112, !dbg !31
  %121 = insertelement <2 x i32> poison, i32 %94, i64 0, !dbg !31
  %122 = insertelement <2 x i32> %121, i32 %31, i64 1, !dbg !31
  %123 = sext <2 x i32> %122 to <2 x i64>, !dbg !31
  %124 = extractelement <2 x i64> %123, i64 1, !dbg !32
  %125 = getelementptr float, ptr addrspace(1) %5, i64 %124, !dbg !33
  %126 = getelementptr float, ptr addrspace(1) %11, i64 %124, !dbg !35
  %127 = insertelement <2 x i64> poison, i64 %42, i64 0, !dbg !36
  %128 = insertelement <2 x i64> %127, i64 %57, i64 1, !dbg !36
  %129 = lshr <2 x i64> %128, splat (i64 59), !dbg !36
  %130 = and <2 x i64> %129, splat (i64 16), !dbg !36
  %131 = add <2 x i64> %130, %128, !dbg !36
  %132 = add i64 %90, %124, !dbg !32
  %133 = add i64 %91, %124, !dbg !32
  %134 = add i64 %92, %124, !dbg !32
  %135 = shl <2 x i64> %131, <i64 13, i64 9>, !dbg !37
  %136 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %125, i1 true) #1, !dbg !34
  %137 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %125, i1 true) #1, !dbg !34
  %138 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %125, i1 true) #1, !dbg !34
  %139 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %125, i1 true) #1, !dbg !34
  %140 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %62, i1 true) #1, !dbg !41
  %141 = extractvalue { i64, i64 } %140, 0, !dbg !41
  %142 = extractvalue { i64, i64 } %140, 1, !dbg !41
  %143 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %63, i1 true) #1, !dbg !41
  %144 = extractvalue { i64, i64 } %143, 0, !dbg !41
  %145 = extractvalue { i64, i64 } %143, 1, !dbg !41
  %146 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %62, i1 true) #1, !dbg !41
  %147 = extractvalue { i64, i64 } %146, 0, !dbg !41
  %148 = extractvalue { i64, i64 } %146, 1, !dbg !41
  %149 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %63, i1 true) #1, !dbg !41
  %150 = extractvalue { i64, i64 } %149, 0, !dbg !41
  %151 = extractvalue { i64, i64 } %149, 1, !dbg !41
  %152 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %64, i1 true) #1, !dbg !42
  %153 = extractvalue { i32, i32, i32, i32 } %152, 0, !dbg !42
  %154 = extractvalue { i32, i32, i32, i32 } %152, 1, !dbg !42
  %155 = extractvalue { i32, i32, i32, i32 } %152, 2, !dbg !42
  %156 = extractvalue { i32, i32, i32, i32 } %152, 3, !dbg !42
  %157 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %64, i1 true) #1, !dbg !42
  %158 = extractvalue { i32, i32, i32, i32 } %157, 0, !dbg !42
  %159 = extractvalue { i32, i32, i32, i32 } %157, 1, !dbg !42
  %160 = extractvalue { i32, i32, i32, i32 } %157, 2, !dbg !42
  %161 = extractvalue { i32, i32, i32, i32 } %157, 3, !dbg !42
  %162 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %65, i1 true) #1, !dbg !43
  %163 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %65, i1 true) #1, !dbg !43
  %164 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %65, i1 true) #1, !dbg !43
  %165 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %65, i1 true) #1, !dbg !43
  %166 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %66, i1 true) #1, !dbg !43
  %167 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %66, i1 true) #1, !dbg !43
  %168 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %66, i1 true) #1, !dbg !43
  %169 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %66, i1 true) #1, !dbg !43
  %170 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 true) #1, !dbg !44
  %171 = bitcast i32 %170 to float, !dbg !44
  %172 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 true) #1, !dbg !44
  %173 = bitcast i32 %172 to float, !dbg !44
  %174 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 true) #1, !dbg !44
  %175 = bitcast i32 %174 to float, !dbg !44
  %176 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 true) #1, !dbg !44
  %177 = bitcast i32 %176 to float, !dbg !44
  %178 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 true) #1, !dbg !44
  %179 = bitcast i32 %178 to float, !dbg !44
  %180 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 true) #1, !dbg !44
  %181 = bitcast i32 %180 to float, !dbg !44
  %182 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 true) #1, !dbg !44
  %183 = bitcast i32 %182 to float, !dbg !44
  %184 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 true) #1, !dbg !44
  %185 = bitcast i32 %184 to float, !dbg !44
  %186 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %104, i1 true) #1, !dbg !45
  %187 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %104, i1 true) #1, !dbg !45
  %188 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %104, i1 true) #1, !dbg !45
  %189 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %104, i1 true) #1, !dbg !45
  %190 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %126, i1 true) #1, !dbg !45
  %191 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %126, i1 true) #1, !dbg !45
  %192 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %126, i1 true) #1, !dbg !45
  %193 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %126, i1 true) #1, !dbg !45
  %194 = add <2 x i64> %135, %123, !dbg !38
  %195 = extractelement <2 x i64> %194, i64 0, !dbg !39
  %196 = extractelement <2 x i64> %194, i64 1, !dbg !40
  %197 = add i64 %195, %196, !dbg !31
  %198 = add i64 %195, %132, !dbg !31
  %199 = add i64 %195, %133, !dbg !31
  %200 = add i64 %195, %134, !dbg !31
  %201 = getelementptr float, ptr addrspace(1) %4, i64 %117, !dbg !46
  %202 = getelementptr float, ptr addrspace(1) %4, i64 %118, !dbg !46
  %203 = getelementptr float, ptr addrspace(1) %4, i64 %119, !dbg !46
  %204 = getelementptr float, ptr addrspace(1) %4, i64 %120, !dbg !46
  %205 = getelementptr float, ptr addrspace(1) %4, i64 %197, !dbg !46
  %206 = getelementptr float, ptr addrspace(1) %4, i64 %198, !dbg !46
  %207 = getelementptr float, ptr addrspace(1) %4, i64 %199, !dbg !46
  %208 = getelementptr float, ptr addrspace(1) %4, i64 %200, !dbg !46
  %209 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %201, i1 true) #1, !dbg !47
  %210 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %202, i1 true) #1, !dbg !47
  %211 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %203, i1 true) #1, !dbg !47
  %212 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %204, i1 true) #1, !dbg !47
  %213 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %205, i1 true) #1, !dbg !47
  %214 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %206, i1 true) #1, !dbg !47
  %215 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %207, i1 true) #1, !dbg !47
  %216 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %208, i1 true) #1, !dbg !47
  %217 = lshr i64 %142, 59, !dbg !48
  %218 = and i64 %217, 16, !dbg !48
  %219 = add i64 %218, %142, !dbg !48
  %220 = lshr i64 %144, 59, !dbg !48
  %221 = and i64 %220, 16, !dbg !48
  %222 = add i64 %221, %144, !dbg !48
  %223 = lshr i64 %145, 59, !dbg !48
  %224 = and i64 %223, 16, !dbg !48
  %225 = add i64 %224, %145, !dbg !48
  %226 = lshr i64 %148, 59, !dbg !48
  %227 = and i64 %226, 16, !dbg !48
  %228 = add i64 %227, %148, !dbg !48
  %229 = lshr i64 %150, 59, !dbg !48
  %230 = and i64 %229, 16, !dbg !48
  %231 = add i64 %230, %150, !dbg !48
  %232 = lshr i64 %151, 59, !dbg !48
  %233 = and i64 %232, 16, !dbg !48
  %234 = add i64 %233, %151, !dbg !48
  %235 = shl i64 %219, 9, !dbg !49
  %236 = shl i64 %222, 9, !dbg !49
  %237 = shl i64 %225, 9, !dbg !49
  %238 = shl i64 %228, 9, !dbg !49
  %239 = shl i64 %231, 9, !dbg !49
  %240 = shl i64 %234, 9, !dbg !49
  %241 = add i64 %235, %98, !dbg !50
  %242 = add i64 %236, %98, !dbg !50
  %243 = add i64 %237, %98, !dbg !50
  %244 = add i64 %238, %124, !dbg !50
  %245 = add i64 %239, %124, !dbg !50
  %246 = add i64 %240, %124, !dbg !50
  %247 = add i64 %115, %241, !dbg !39
  %248 = add i64 %115, %242, !dbg !39
  %249 = add i64 %115, %243, !dbg !39
  %250 = add i64 %195, %244, !dbg !39
  %251 = add i64 %195, %245, !dbg !39
  %252 = add i64 %195, %246, !dbg !39
  %253 = getelementptr float, ptr addrspace(1) %4, i64 %247, !dbg !51
  %254 = getelementptr float, ptr addrspace(1) %4, i64 %248, !dbg !51
  %255 = getelementptr float, ptr addrspace(1) %4, i64 %249, !dbg !51
  %256 = getelementptr float, ptr addrspace(1) %4, i64 %250, !dbg !51
  %257 = getelementptr float, ptr addrspace(1) %4, i64 %251, !dbg !51
  %258 = getelementptr float, ptr addrspace(1) %4, i64 %252, !dbg !51
  %259 = insertelement <2 x i64> poison, i64 %162, i64 0, !dbg !52
  %260 = insertelement <2 x i64> %259, i64 %141, i64 1, !dbg !52
  %261 = lshr <2 x i64> %260, splat (i64 59), !dbg !52
  %262 = and <2 x i64> %261, splat (i64 16), !dbg !52
  %263 = add <2 x i64> %262, %260, !dbg !52
  %264 = shl <2 x i64> %263, <i64 13, i64 9>, !dbg !53
  %265 = add <2 x i64> %264, %97, !dbg !54
  %266 = extractelement <2 x i64> %265, i64 1, !dbg !55
  %267 = add i64 %115, %266, !dbg !39
  %268 = getelementptr float, ptr addrspace(1) %4, i64 %267, !dbg !51
  %269 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %268, i1 true) #1, !dbg !56
  %270 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %253, i1 true) #1, !dbg !56
  %271 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %254, i1 true) #1, !dbg !56
  %272 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %255, i1 true) #1, !dbg !56
  %273 = extractelement <2 x i64> %265, i64 0, !dbg !55
  %274 = add i64 %273, %116, !dbg !40
  %275 = add i64 %273, %110, !dbg !40
  %276 = add i64 %273, %111, !dbg !40
  %277 = add i64 %273, %112, !dbg !40
  %278 = insertelement <2 x i64> poison, i64 %166, i64 0, !dbg !52
  %279 = insertelement <2 x i64> %278, i64 %147, i64 1, !dbg !52
  %280 = lshr <2 x i64> %279, splat (i64 59), !dbg !52
  %281 = and <2 x i64> %280, splat (i64 16), !dbg !52
  %282 = add <2 x i64> %281, %279, !dbg !52
  %283 = shl <2 x i64> %282, <i64 13, i64 9>, !dbg !53
  %284 = add <2 x i64> %283, %123, !dbg !54
  %285 = extractelement <2 x i64> %284, i64 1, !dbg !55
  %286 = add i64 %195, %285, !dbg !39
  %287 = getelementptr float, ptr addrspace(1) %4, i64 %286, !dbg !51
  %288 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %287, i1 true) #1, !dbg !56
  %289 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %256, i1 true) #1, !dbg !56
  %290 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %257, i1 true) #1, !dbg !56
  %291 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %258, i1 true) #1, !dbg !56
  %292 = extractelement <2 x i64> %284, i64 0, !dbg !55
  %293 = add i64 %292, %196, !dbg !40
  %294 = add i64 %292, %132, !dbg !40
  %295 = add i64 %292, %133, !dbg !40
  %296 = add i64 %292, %134, !dbg !40
  %297 = getelementptr float, ptr addrspace(1) %4, i64 %274, !dbg !57
  %298 = getelementptr float, ptr addrspace(1) %4, i64 %275, !dbg !57
  %299 = getelementptr float, ptr addrspace(1) %4, i64 %276, !dbg !57
  %300 = getelementptr float, ptr addrspace(1) %4, i64 %277, !dbg !57
  %301 = getelementptr float, ptr addrspace(1) %4, i64 %293, !dbg !57
  %302 = getelementptr float, ptr addrspace(1) %4, i64 %294, !dbg !57
  %303 = getelementptr float, ptr addrspace(1) %4, i64 %295, !dbg !57
  %304 = getelementptr float, ptr addrspace(1) %4, i64 %296, !dbg !57
  %305 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %297, i1 true) #1, !dbg !58
  %306 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %298, i1 true) #1, !dbg !58
  %307 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %299, i1 true) #1, !dbg !58
  %308 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %300, i1 true) #1, !dbg !58
  %309 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %301, i1 true) #1, !dbg !58
  %310 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %302, i1 true) #1, !dbg !58
  %311 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %303, i1 true) #1, !dbg !58
  %312 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %304, i1 true) #1, !dbg !58
  %313 = add i64 %273, %266, !dbg !55
  %314 = add i64 %273, %241, !dbg !55
  %315 = add i64 %273, %242, !dbg !55
  %316 = add i64 %273, %243, !dbg !55
  %317 = add i64 %292, %285, !dbg !55
  %318 = add i64 %292, %244, !dbg !55
  %319 = add i64 %292, %245, !dbg !55
  %320 = add i64 %292, %246, !dbg !55
  %321 = getelementptr float, ptr addrspace(1) %4, i64 %313, !dbg !59
  %322 = getelementptr float, ptr addrspace(1) %4, i64 %314, !dbg !59
  %323 = getelementptr float, ptr addrspace(1) %4, i64 %315, !dbg !59
  %324 = getelementptr float, ptr addrspace(1) %4, i64 %316, !dbg !59
  %325 = getelementptr float, ptr addrspace(1) %4, i64 %317, !dbg !59
  %326 = getelementptr float, ptr addrspace(1) %4, i64 %318, !dbg !59
  %327 = getelementptr float, ptr addrspace(1) %4, i64 %319, !dbg !59
  %328 = getelementptr float, ptr addrspace(1) %4, i64 %320, !dbg !59
  %329 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %321, i1 true) #1, !dbg !60
  %330 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %322, i1 true) #1, !dbg !60
  %331 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %323, i1 true) #1, !dbg !60
  %332 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %324, i1 true) #1, !dbg !60
  %333 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %325, i1 true) #1, !dbg !60
  %334 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %326, i1 true) #1, !dbg !60
  %335 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %327, i1 true) #1, !dbg !60
  %336 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %328, i1 true) #1, !dbg !60
  %337 = insertelement <2 x i32> poison, i32 %305, i64 0, !dbg !58
  %338 = insertelement <2 x i32> %337, i32 %209, i64 1, !dbg !58
  %339 = bitcast <2 x i32> %338 to <2 x float>, !dbg !58
  %340 = insertelement <2 x i32> poison, i32 %100, i64 0, !dbg !61
  %341 = bitcast <2 x i32> %340 to <2 x float>, !dbg !61
  %342 = shufflevector <2 x float> %341, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !61
  %343 = fadd <2 x float> %342, %339, !dbg !61
  %344 = insertelement <2 x i32> poison, i32 %329, i64 0, !dbg !60
  %345 = insertelement <2 x i32> %344, i32 %269, i64 1, !dbg !60
  %346 = bitcast <2 x i32> %345 to <2 x float>, !dbg !60
  %347 = fadd <2 x float> %342, %346, !dbg !62
  %348 = fsub <2 x float> %347, %343, !dbg !63
  %349 = insertelement <2 x i32> poison, i32 %153, i64 0, !dbg !64
  %350 = bitcast <2 x i32> %349 to <2 x float>, !dbg !64
  %351 = shufflevector <2 x float> %350, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !64
  %352 = fmul <2 x float> %348, %351, !dbg !64
  %353 = fadd <2 x float> %343, %352, !dbg !65
  %354 = insertelement <2 x i32> poison, i32 %306, i64 0, !dbg !58
  %355 = insertelement <2 x i32> %354, i32 %210, i64 1, !dbg !58
  %356 = bitcast <2 x i32> %355 to <2 x float>, !dbg !58
  %357 = insertelement <2 x i32> poison, i32 %101, i64 0, !dbg !61
  %358 = bitcast <2 x i32> %357 to <2 x float>, !dbg !61
  %359 = shufflevector <2 x float> %358, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !61
  %360 = fadd <2 x float> %359, %356, !dbg !61
  %361 = insertelement <2 x i32> poison, i32 %330, i64 0, !dbg !60
  %362 = insertelement <2 x i32> %361, i32 %270, i64 1, !dbg !60
  %363 = bitcast <2 x i32> %362 to <2 x float>, !dbg !60
  %364 = fadd <2 x float> %359, %363, !dbg !62
  %365 = fsub <2 x float> %364, %360, !dbg !63
  %366 = insertelement <2 x i32> poison, i32 %154, i64 0, !dbg !64
  %367 = bitcast <2 x i32> %366 to <2 x float>, !dbg !64
  %368 = shufflevector <2 x float> %367, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !64
  %369 = fmul <2 x float> %365, %368, !dbg !64
  %370 = fadd <2 x float> %360, %369, !dbg !65
  %371 = insertelement <2 x i32> poison, i32 %307, i64 0, !dbg !58
  %372 = insertelement <2 x i32> %371, i32 %211, i64 1, !dbg !58
  %373 = bitcast <2 x i32> %372 to <2 x float>, !dbg !58
  %374 = insertelement <2 x i32> poison, i32 %102, i64 0, !dbg !61
  %375 = bitcast <2 x i32> %374 to <2 x float>, !dbg !61
  %376 = shufflevector <2 x float> %375, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !61
  %377 = fadd <2 x float> %376, %373, !dbg !61
  %378 = insertelement <2 x i32> poison, i32 %331, i64 0, !dbg !60
  %379 = insertelement <2 x i32> %378, i32 %271, i64 1, !dbg !60
  %380 = bitcast <2 x i32> %379 to <2 x float>, !dbg !60
  %381 = fadd <2 x float> %376, %380, !dbg !62
  %382 = fsub <2 x float> %381, %377, !dbg !63
  %383 = insertelement <2 x i32> poison, i32 %155, i64 0, !dbg !64
  %384 = bitcast <2 x i32> %383 to <2 x float>, !dbg !64
  %385 = shufflevector <2 x float> %384, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !64
  %386 = fmul <2 x float> %382, %385, !dbg !64
  %387 = fadd <2 x float> %377, %386, !dbg !65
  %388 = insertelement <2 x i32> poison, i32 %308, i64 0, !dbg !58
  %389 = insertelement <2 x i32> %388, i32 %212, i64 1, !dbg !58
  %390 = bitcast <2 x i32> %389 to <2 x float>, !dbg !58
  %391 = insertelement <2 x i32> poison, i32 %103, i64 0, !dbg !61
  %392 = bitcast <2 x i32> %391 to <2 x float>, !dbg !61
  %393 = shufflevector <2 x float> %392, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !61
  %394 = fadd <2 x float> %393, %390, !dbg !61
  %395 = insertelement <2 x i32> poison, i32 %332, i64 0, !dbg !60
  %396 = insertelement <2 x i32> %395, i32 %272, i64 1, !dbg !60
  %397 = bitcast <2 x i32> %396 to <2 x float>, !dbg !60
  %398 = fadd <2 x float> %393, %397, !dbg !62
  %399 = fsub <2 x float> %398, %394, !dbg !63
  %400 = insertelement <2 x i32> poison, i32 %156, i64 0, !dbg !64
  %401 = bitcast <2 x i32> %400 to <2 x float>, !dbg !64
  %402 = shufflevector <2 x float> %401, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !64
  %403 = fmul <2 x float> %399, %402, !dbg !64
  %404 = fadd <2 x float> %394, %403, !dbg !65
  %405 = insertelement <2 x i32> poison, i32 %309, i64 0, !dbg !58
  %406 = insertelement <2 x i32> %405, i32 %213, i64 1, !dbg !58
  %407 = bitcast <2 x i32> %406 to <2 x float>, !dbg !58
  %408 = insertelement <2 x i32> poison, i32 %136, i64 0, !dbg !61
  %409 = bitcast <2 x i32> %408 to <2 x float>, !dbg !61
  %410 = shufflevector <2 x float> %409, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !61
  %411 = fadd <2 x float> %410, %407, !dbg !61
  %412 = insertelement <2 x i32> poison, i32 %333, i64 0, !dbg !60
  %413 = insertelement <2 x i32> %412, i32 %288, i64 1, !dbg !60
  %414 = bitcast <2 x i32> %413 to <2 x float>, !dbg !60
  %415 = fadd <2 x float> %410, %414, !dbg !62
  %416 = fsub <2 x float> %415, %411, !dbg !63
  %417 = insertelement <2 x i32> poison, i32 %158, i64 0, !dbg !64
  %418 = bitcast <2 x i32> %417 to <2 x float>, !dbg !64
  %419 = shufflevector <2 x float> %418, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !64
  %420 = fmul <2 x float> %416, %419, !dbg !64
  %421 = fadd <2 x float> %411, %420, !dbg !65
  %422 = insertelement <2 x i32> poison, i32 %310, i64 0, !dbg !58
  %423 = insertelement <2 x i32> %422, i32 %214, i64 1, !dbg !58
  %424 = bitcast <2 x i32> %423 to <2 x float>, !dbg !58
  %425 = insertelement <2 x i32> poison, i32 %137, i64 0, !dbg !61
  %426 = bitcast <2 x i32> %425 to <2 x float>, !dbg !61
  %427 = shufflevector <2 x float> %426, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !61
  %428 = fadd <2 x float> %427, %424, !dbg !61
  %429 = insertelement <2 x i32> poison, i32 %334, i64 0, !dbg !60
  %430 = insertelement <2 x i32> %429, i32 %289, i64 1, !dbg !60
  %431 = bitcast <2 x i32> %430 to <2 x float>, !dbg !60
  %432 = fadd <2 x float> %427, %431, !dbg !62
  %433 = fsub <2 x float> %432, %428, !dbg !63
  %434 = insertelement <2 x i32> poison, i32 %159, i64 0, !dbg !64
  %435 = bitcast <2 x i32> %434 to <2 x float>, !dbg !64
  %436 = shufflevector <2 x float> %435, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !64
  %437 = fmul <2 x float> %433, %436, !dbg !64
  %438 = fadd <2 x float> %428, %437, !dbg !65
  %439 = insertelement <2 x i32> poison, i32 %311, i64 0, !dbg !58
  %440 = insertelement <2 x i32> %439, i32 %215, i64 1, !dbg !58
  %441 = bitcast <2 x i32> %440 to <2 x float>, !dbg !58
  %442 = insertelement <2 x i32> poison, i32 %138, i64 0, !dbg !61
  %443 = bitcast <2 x i32> %442 to <2 x float>, !dbg !61
  %444 = shufflevector <2 x float> %443, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !61
  %445 = fadd <2 x float> %444, %441, !dbg !61
  %446 = insertelement <2 x i32> poison, i32 %335, i64 0, !dbg !60
  %447 = insertelement <2 x i32> %446, i32 %290, i64 1, !dbg !60
  %448 = bitcast <2 x i32> %447 to <2 x float>, !dbg !60
  %449 = fadd <2 x float> %444, %448, !dbg !62
  %450 = fsub <2 x float> %449, %445, !dbg !63
  %451 = insertelement <2 x i32> poison, i32 %160, i64 0, !dbg !64
  %452 = bitcast <2 x i32> %451 to <2 x float>, !dbg !64
  %453 = shufflevector <2 x float> %452, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !64
  %454 = fmul <2 x float> %450, %453, !dbg !64
  %455 = fadd <2 x float> %445, %454, !dbg !65
  %456 = insertelement <2 x i32> poison, i32 %312, i64 0, !dbg !58
  %457 = insertelement <2 x i32> %456, i32 %216, i64 1, !dbg !58
  %458 = bitcast <2 x i32> %457 to <2 x float>, !dbg !58
  %459 = insertelement <2 x i32> poison, i32 %139, i64 0, !dbg !61
  %460 = bitcast <2 x i32> %459 to <2 x float>, !dbg !61
  %461 = shufflevector <2 x float> %460, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !61
  %462 = fadd <2 x float> %461, %458, !dbg !61
  %463 = insertelement <2 x i32> poison, i32 %336, i64 0, !dbg !60
  %464 = insertelement <2 x i32> %463, i32 %291, i64 1, !dbg !60
  %465 = bitcast <2 x i32> %464 to <2 x float>, !dbg !60
  %466 = fadd <2 x float> %461, %465, !dbg !62
  %467 = fsub <2 x float> %466, %462, !dbg !63
  %468 = insertelement <2 x i32> poison, i32 %161, i64 0, !dbg !64
  %469 = bitcast <2 x i32> %468 to <2 x float>, !dbg !64
  %470 = shufflevector <2 x float> %469, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !64
  %471 = fmul <2 x float> %467, %470, !dbg !64
  %472 = fadd <2 x float> %462, %471, !dbg !65
  %473 = extractelement <2 x float> %353, i64 0, !dbg !66
  %474 = extractelement <2 x float> %353, i64 1, !dbg !67
  %475 = fsub float %473, %474, !dbg !66
  %476 = extractelement <2 x float> %370, i64 0, !dbg !66
  %477 = extractelement <2 x float> %370, i64 1, !dbg !67
  %478 = fsub float %476, %477, !dbg !66
  %479 = extractelement <2 x float> %387, i64 0, !dbg !66
  %480 = extractelement <2 x float> %387, i64 1, !dbg !67
  %481 = fsub float %479, %480, !dbg !66
  %482 = extractelement <2 x float> %404, i64 0, !dbg !66
  %483 = extractelement <2 x float> %404, i64 1, !dbg !67
  %484 = fsub float %482, %483, !dbg !66
  %485 = extractelement <2 x float> %421, i64 0, !dbg !66
  %486 = extractelement <2 x float> %421, i64 1, !dbg !67
  %487 = fsub float %485, %486, !dbg !66
  %488 = extractelement <2 x float> %438, i64 0, !dbg !66
  %489 = extractelement <2 x float> %438, i64 1, !dbg !67
  %490 = fsub float %488, %489, !dbg !66
  %491 = extractelement <2 x float> %455, i64 0, !dbg !66
  %492 = extractelement <2 x float> %455, i64 1, !dbg !67
  %493 = fsub float %491, %492, !dbg !66
  %494 = extractelement <2 x float> %472, i64 0, !dbg !66
  %495 = extractelement <2 x float> %472, i64 1, !dbg !67
  %496 = fsub float %494, %495, !dbg !66
  %497 = fmul float %475, %171, !dbg !68
  %498 = fmul float %478, %173, !dbg !68
  %499 = fmul float %481, %175, !dbg !68
  %500 = fmul float %484, %177, !dbg !68
  %501 = fmul float %487, %179, !dbg !68
  %502 = fmul float %490, %181, !dbg !68
  %503 = fmul float %493, %183, !dbg !68
  %504 = fmul float %496, %185, !dbg !68
  %505 = fadd float %474, %497, !dbg !67
  %506 = fadd float %477, %498, !dbg !67
  %507 = fadd float %480, %499, !dbg !67
  %508 = fadd float %483, %500, !dbg !67
  %509 = fadd float %486, %501, !dbg !67
  %510 = fadd float %489, %502, !dbg !67
  %511 = fadd float %492, %503, !dbg !67
  %512 = fadd float %495, %504, !dbg !67
  %513 = getelementptr float, ptr addrspace(1) %10, i64 %117, !dbg !69
  %514 = getelementptr float, ptr addrspace(1) %10, i64 %118, !dbg !69
  %515 = getelementptr float, ptr addrspace(1) %10, i64 %119, !dbg !69
  %516 = getelementptr float, ptr addrspace(1) %10, i64 %120, !dbg !69
  %517 = getelementptr float, ptr addrspace(1) %10, i64 %197, !dbg !69
  %518 = getelementptr float, ptr addrspace(1) %10, i64 %198, !dbg !69
  %519 = getelementptr float, ptr addrspace(1) %10, i64 %199, !dbg !69
  %520 = getelementptr float, ptr addrspace(1) %10, i64 %200, !dbg !69
  %521 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %513, i1 true) #1, !dbg !70
  %522 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %514, i1 true) #1, !dbg !70
  %523 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %515, i1 true) #1, !dbg !70
  %524 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %516, i1 true) #1, !dbg !70
  %525 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %517, i1 true) #1, !dbg !70
  %526 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %518, i1 true) #1, !dbg !70
  %527 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %519, i1 true) #1, !dbg !70
  %528 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %520, i1 true) #1, !dbg !70
  %529 = getelementptr float, ptr addrspace(1) %10, i64 %267, !dbg !71
  %530 = getelementptr float, ptr addrspace(1) %10, i64 %247, !dbg !71
  %531 = getelementptr float, ptr addrspace(1) %10, i64 %248, !dbg !71
  %532 = getelementptr float, ptr addrspace(1) %10, i64 %249, !dbg !71
  %533 = getelementptr float, ptr addrspace(1) %10, i64 %286, !dbg !71
  %534 = getelementptr float, ptr addrspace(1) %10, i64 %250, !dbg !71
  %535 = getelementptr float, ptr addrspace(1) %10, i64 %251, !dbg !71
  %536 = getelementptr float, ptr addrspace(1) %10, i64 %252, !dbg !71
  %537 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %529, i1 true) #1, !dbg !72
  %538 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %530, i1 true) #1, !dbg !72
  %539 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %531, i1 true) #1, !dbg !72
  %540 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %532, i1 true) #1, !dbg !72
  %541 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %533, i1 true) #1, !dbg !72
  %542 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %534, i1 true) #1, !dbg !72
  %543 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %535, i1 true) #1, !dbg !72
  %544 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %536, i1 true) #1, !dbg !72
  %545 = getelementptr float, ptr addrspace(1) %10, i64 %274, !dbg !73
  %546 = getelementptr float, ptr addrspace(1) %10, i64 %275, !dbg !73
  %547 = getelementptr float, ptr addrspace(1) %10, i64 %276, !dbg !73
  %548 = getelementptr float, ptr addrspace(1) %10, i64 %277, !dbg !73
  %549 = getelementptr float, ptr addrspace(1) %10, i64 %293, !dbg !73
  %550 = getelementptr float, ptr addrspace(1) %10, i64 %294, !dbg !73
  %551 = getelementptr float, ptr addrspace(1) %10, i64 %295, !dbg !73
  %552 = getelementptr float, ptr addrspace(1) %10, i64 %296, !dbg !73
  %553 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %545, i1 true) #1, !dbg !74
  %554 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %546, i1 true) #1, !dbg !74
  %555 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %547, i1 true) #1, !dbg !74
  %556 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %548, i1 true) #1, !dbg !74
  %557 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %549, i1 true) #1, !dbg !74
  %558 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %550, i1 true) #1, !dbg !74
  %559 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %551, i1 true) #1, !dbg !74
  %560 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %552, i1 true) #1, !dbg !74
  %561 = getelementptr float, ptr addrspace(1) %10, i64 %313, !dbg !75
  %562 = getelementptr float, ptr addrspace(1) %10, i64 %314, !dbg !75
  %563 = getelementptr float, ptr addrspace(1) %10, i64 %315, !dbg !75
  %564 = getelementptr float, ptr addrspace(1) %10, i64 %316, !dbg !75
  %565 = getelementptr float, ptr addrspace(1) %10, i64 %317, !dbg !75
  %566 = getelementptr float, ptr addrspace(1) %10, i64 %318, !dbg !75
  %567 = getelementptr float, ptr addrspace(1) %10, i64 %319, !dbg !75
  %568 = getelementptr float, ptr addrspace(1) %10, i64 %320, !dbg !75
  %569 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %561, i1 true) #1, !dbg !76
  %570 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %562, i1 true) #1, !dbg !76
  %571 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %563, i1 true) #1, !dbg !76
  %572 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %564, i1 true) #1, !dbg !76
  %573 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %565, i1 true) #1, !dbg !76
  %574 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %566, i1 true) #1, !dbg !76
  %575 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %567, i1 true) #1, !dbg !76
  %576 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %568, i1 true) #1, !dbg !76
  %577 = insertelement <2 x i32> poison, i32 %553, i64 0, !dbg !74
  %578 = insertelement <2 x i32> %577, i32 %521, i64 1, !dbg !74
  %579 = bitcast <2 x i32> %578 to <2 x float>, !dbg !74
  %580 = insertelement <2 x i32> poison, i32 %186, i64 0, !dbg !77
  %581 = bitcast <2 x i32> %580 to <2 x float>, !dbg !77
  %582 = shufflevector <2 x float> %581, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !77
  %583 = fadd <2 x float> %582, %579, !dbg !77
  %584 = insertelement <2 x i32> poison, i32 %569, i64 0, !dbg !76
  %585 = insertelement <2 x i32> %584, i32 %537, i64 1, !dbg !76
  %586 = bitcast <2 x i32> %585 to <2 x float>, !dbg !76
  %587 = fadd <2 x float> %582, %586, !dbg !78
  %588 = fsub <2 x float> %587, %583, !dbg !79
  %589 = fmul <2 x float> %588, %351, !dbg !80
  %590 = fadd <2 x float> %583, %589, !dbg !81
  %591 = insertelement <2 x i32> poison, i32 %554, i64 0, !dbg !74
  %592 = insertelement <2 x i32> %591, i32 %522, i64 1, !dbg !74
  %593 = bitcast <2 x i32> %592 to <2 x float>, !dbg !74
  %594 = insertelement <2 x i32> poison, i32 %187, i64 0, !dbg !77
  %595 = bitcast <2 x i32> %594 to <2 x float>, !dbg !77
  %596 = shufflevector <2 x float> %595, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !77
  %597 = fadd <2 x float> %596, %593, !dbg !77
  %598 = insertelement <2 x i32> poison, i32 %570, i64 0, !dbg !76
  %599 = insertelement <2 x i32> %598, i32 %538, i64 1, !dbg !76
  %600 = bitcast <2 x i32> %599 to <2 x float>, !dbg !76
  %601 = fadd <2 x float> %596, %600, !dbg !78
  %602 = fsub <2 x float> %601, %597, !dbg !79
  %603 = fmul <2 x float> %602, %368, !dbg !80
  %604 = fadd <2 x float> %597, %603, !dbg !81
  %605 = insertelement <2 x i32> poison, i32 %555, i64 0, !dbg !74
  %606 = insertelement <2 x i32> %605, i32 %523, i64 1, !dbg !74
  %607 = bitcast <2 x i32> %606 to <2 x float>, !dbg !74
  %608 = insertelement <2 x i32> poison, i32 %188, i64 0, !dbg !77
  %609 = bitcast <2 x i32> %608 to <2 x float>, !dbg !77
  %610 = shufflevector <2 x float> %609, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !77
  %611 = fadd <2 x float> %610, %607, !dbg !77
  %612 = insertelement <2 x i32> poison, i32 %571, i64 0, !dbg !76
  %613 = insertelement <2 x i32> %612, i32 %539, i64 1, !dbg !76
  %614 = bitcast <2 x i32> %613 to <2 x float>, !dbg !76
  %615 = fadd <2 x float> %610, %614, !dbg !78
  %616 = fsub <2 x float> %615, %611, !dbg !79
  %617 = fmul <2 x float> %616, %385, !dbg !80
  %618 = fadd <2 x float> %611, %617, !dbg !81
  %619 = insertelement <2 x i32> poison, i32 %556, i64 0, !dbg !74
  %620 = insertelement <2 x i32> %619, i32 %524, i64 1, !dbg !74
  %621 = bitcast <2 x i32> %620 to <2 x float>, !dbg !74
  %622 = insertelement <2 x i32> poison, i32 %189, i64 0, !dbg !77
  %623 = bitcast <2 x i32> %622 to <2 x float>, !dbg !77
  %624 = shufflevector <2 x float> %623, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !77
  %625 = fadd <2 x float> %624, %621, !dbg !77
  %626 = insertelement <2 x i32> poison, i32 %572, i64 0, !dbg !76
  %627 = insertelement <2 x i32> %626, i32 %540, i64 1, !dbg !76
  %628 = bitcast <2 x i32> %627 to <2 x float>, !dbg !76
  %629 = fadd <2 x float> %624, %628, !dbg !78
  %630 = fsub <2 x float> %629, %625, !dbg !79
  %631 = fmul <2 x float> %630, %402, !dbg !80
  %632 = fadd <2 x float> %625, %631, !dbg !81
  %633 = insertelement <2 x i32> poison, i32 %557, i64 0, !dbg !74
  %634 = insertelement <2 x i32> %633, i32 %525, i64 1, !dbg !74
  %635 = bitcast <2 x i32> %634 to <2 x float>, !dbg !74
  %636 = insertelement <2 x i32> poison, i32 %190, i64 0, !dbg !77
  %637 = bitcast <2 x i32> %636 to <2 x float>, !dbg !77
  %638 = shufflevector <2 x float> %637, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !77
  %639 = fadd <2 x float> %638, %635, !dbg !77
  %640 = insertelement <2 x i32> poison, i32 %573, i64 0, !dbg !76
  %641 = insertelement <2 x i32> %640, i32 %541, i64 1, !dbg !76
  %642 = bitcast <2 x i32> %641 to <2 x float>, !dbg !76
  %643 = fadd <2 x float> %638, %642, !dbg !78
  %644 = fsub <2 x float> %643, %639, !dbg !79
  %645 = fmul <2 x float> %644, %419, !dbg !80
  %646 = fadd <2 x float> %639, %645, !dbg !81
  %647 = insertelement <2 x i32> poison, i32 %558, i64 0, !dbg !74
  %648 = insertelement <2 x i32> %647, i32 %526, i64 1, !dbg !74
  %649 = bitcast <2 x i32> %648 to <2 x float>, !dbg !74
  %650 = insertelement <2 x i32> poison, i32 %191, i64 0, !dbg !77
  %651 = bitcast <2 x i32> %650 to <2 x float>, !dbg !77
  %652 = shufflevector <2 x float> %651, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !77
  %653 = fadd <2 x float> %652, %649, !dbg !77
  %654 = insertelement <2 x i32> poison, i32 %574, i64 0, !dbg !76
  %655 = insertelement <2 x i32> %654, i32 %542, i64 1, !dbg !76
  %656 = bitcast <2 x i32> %655 to <2 x float>, !dbg !76
  %657 = fadd <2 x float> %652, %656, !dbg !78
  %658 = fsub <2 x float> %657, %653, !dbg !79
  %659 = fmul <2 x float> %658, %436, !dbg !80
  %660 = fadd <2 x float> %653, %659, !dbg !81
  %661 = insertelement <2 x i32> poison, i32 %559, i64 0, !dbg !74
  %662 = insertelement <2 x i32> %661, i32 %527, i64 1, !dbg !74
  %663 = bitcast <2 x i32> %662 to <2 x float>, !dbg !74
  %664 = insertelement <2 x i32> poison, i32 %192, i64 0, !dbg !77
  %665 = bitcast <2 x i32> %664 to <2 x float>, !dbg !77
  %666 = shufflevector <2 x float> %665, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !77
  %667 = fadd <2 x float> %666, %663, !dbg !77
  %668 = insertelement <2 x i32> poison, i32 %575, i64 0, !dbg !76
  %669 = insertelement <2 x i32> %668, i32 %543, i64 1, !dbg !76
  %670 = bitcast <2 x i32> %669 to <2 x float>, !dbg !76
  %671 = fadd <2 x float> %666, %670, !dbg !78
  %672 = fsub <2 x float> %671, %667, !dbg !79
  %673 = fmul <2 x float> %672, %453, !dbg !80
  %674 = fadd <2 x float> %667, %673, !dbg !81
  %675 = insertelement <2 x i32> poison, i32 %560, i64 0, !dbg !74
  %676 = insertelement <2 x i32> %675, i32 %528, i64 1, !dbg !74
  %677 = bitcast <2 x i32> %676 to <2 x float>, !dbg !74
  %678 = insertelement <2 x i32> poison, i32 %193, i64 0, !dbg !77
  %679 = bitcast <2 x i32> %678 to <2 x float>, !dbg !77
  %680 = shufflevector <2 x float> %679, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !77
  %681 = fadd <2 x float> %680, %677, !dbg !77
  %682 = insertelement <2 x i32> poison, i32 %576, i64 0, !dbg !76
  %683 = insertelement <2 x i32> %682, i32 %544, i64 1, !dbg !76
  %684 = bitcast <2 x i32> %683 to <2 x float>, !dbg !76
  %685 = fadd <2 x float> %680, %684, !dbg !78
  %686 = fsub <2 x float> %685, %681, !dbg !79
  %687 = fmul <2 x float> %686, %470, !dbg !80
  %688 = fadd <2 x float> %681, %687, !dbg !81
  %689 = extractelement <2 x float> %590, i64 0, !dbg !82
  %690 = extractelement <2 x float> %590, i64 1, !dbg !83
  %691 = fsub float %689, %690, !dbg !82
  %692 = extractelement <2 x float> %604, i64 0, !dbg !82
  %693 = extractelement <2 x float> %604, i64 1, !dbg !83
  %694 = fsub float %692, %693, !dbg !82
  %695 = extractelement <2 x float> %618, i64 0, !dbg !82
  %696 = extractelement <2 x float> %618, i64 1, !dbg !83
  %697 = fsub float %695, %696, !dbg !82
  %698 = extractelement <2 x float> %632, i64 0, !dbg !82
  %699 = extractelement <2 x float> %632, i64 1, !dbg !83
  %700 = fsub float %698, %699, !dbg !82
  %701 = extractelement <2 x float> %646, i64 0, !dbg !82
  %702 = extractelement <2 x float> %646, i64 1, !dbg !83
  %703 = fsub float %701, %702, !dbg !82
  %704 = extractelement <2 x float> %660, i64 0, !dbg !82
  %705 = extractelement <2 x float> %660, i64 1, !dbg !83
  %706 = fsub float %704, %705, !dbg !82
  %707 = extractelement <2 x float> %674, i64 0, !dbg !82
  %708 = extractelement <2 x float> %674, i64 1, !dbg !83
  %709 = fsub float %707, %708, !dbg !82
  %710 = extractelement <2 x float> %688, i64 0, !dbg !82
  %711 = extractelement <2 x float> %688, i64 1, !dbg !83
  %712 = fsub float %710, %711, !dbg !82
  %713 = fmul float %691, %171, !dbg !84
  %714 = fmul float %694, %173, !dbg !84
  %715 = fmul float %697, %175, !dbg !84
  %716 = fmul float %700, %177, !dbg !84
  %717 = fmul float %703, %179, !dbg !84
  %718 = fmul float %706, %181, !dbg !84
  %719 = fmul float %709, %183, !dbg !84
  %720 = fmul float %712, %185, !dbg !84
  %721 = fadd float %690, %713, !dbg !83
  %722 = fadd float %693, %714, !dbg !83
  %723 = fadd float %696, %715, !dbg !83
  %724 = fadd float %699, %716, !dbg !83
  %725 = fadd float %702, %717, !dbg !83
  %726 = fadd float %705, %718, !dbg !83
  %727 = fadd float %708, %719, !dbg !83
  %728 = fadd float %711, %720, !dbg !83
  %729 = sext i32 %19 to i64, !dbg !85
  %730 = getelementptr float, ptr addrspace(1) %0, i64 %729, !dbg !85
  %731 = sext i32 %21 to i64, !dbg !85
  %732 = getelementptr float, ptr addrspace(1) %0, i64 %731, !dbg !85
  %733 = bitcast float %505 to i32, !dbg !86
  %734 = bitcast float %506 to i32, !dbg !86
  %735 = bitcast float %507 to i32, !dbg !86
  %736 = bitcast float %508 to i32, !dbg !86
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %733, i32 %734, i32 %735, i32 %736, ptr addrspace(1) %730, i1 true) #1, !dbg !86
  %737 = bitcast float %509 to i32, !dbg !86
  %738 = bitcast float %510 to i32, !dbg !86
  %739 = bitcast float %511 to i32, !dbg !86
  %740 = bitcast float %512 to i32, !dbg !86
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %737, i32 %738, i32 %739, i32 %740, ptr addrspace(1) %732, i1 true) #1, !dbg !86
  %741 = getelementptr float, ptr addrspace(1) %1, i64 %729, !dbg !87
  %742 = getelementptr float, ptr addrspace(1) %1, i64 %731, !dbg !87
  %743 = bitcast float %721 to i32, !dbg !88
  %744 = bitcast float %722 to i32, !dbg !88
  %745 = bitcast float %723 to i32, !dbg !88
  %746 = bitcast float %724 to i32, !dbg !88
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %743, i32 %744, i32 %745, i32 %746, ptr addrspace(1) %741, i1 true) #1, !dbg !88
  %747 = bitcast float %725 to i32, !dbg !88
  %748 = bitcast float %726 to i32, !dbg !88
  %749 = bitcast float %727 to i32, !dbg !88
  %750 = bitcast float %728 to i32, !dbg !88
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %747, i32 %748, i32 %749, i32 %750, ptr addrspace(1) %742, i1 true) #1, !dbg !88
  ret void, !dbg !89
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "camx3hq6r5r3ebgsrqmwtlkhhda2rnixctyamtiel4mi4uavtf7b.py", directory: "inductor_cache/am")
!4 = !{ptr @triton_poi_fused__unsafe_index_add_convolution_mul_sub_23, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__unsafe_index_add_convolution_mul_sub_23, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__unsafe_index_add_convolution_mul_sub_23", linkageName: "triton_poi_fused__unsafe_index_add_convolution_mul_sub_23", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 27, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 21, scope: !7)
!18 = !DILocation(line: 26, column: 29, scope: !7)
!19 = !DILocation(line: 27, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 30, scope: !7)
!21 = !DILocation(line: 29, column: 35, scope: !7)
!22 = !DILocation(line: 30, column: 30, scope: !7)
!23 = !DILocation(line: 30, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 31, scope: !7)
!25 = !DILocation(line: 33, column: 31, scope: !7)
!26 = !DILocation(line: 34, column: 31, scope: !7)
!27 = !DILocation(line: 35, column: 31, scope: !7)
!28 = !DILocation(line: 43, column: 32, scope: !7)
!29 = !DILocation(line: 44, column: 39, scope: !7)
!30 = !DILocation(line: 44, column: 65, scope: !7)
!31 = !DILocation(line: 44, column: 58, scope: !7)
!32 = !DILocation(line: 44, column: 35, scope: !7)
!33 = !DILocation(line: 31, column: 31, scope: !7)
!34 = !DILocation(line: 31, column: 36, scope: !7)
!35 = !DILocation(line: 36, column: 31, scope: !7)
!36 = !DILocation(line: 40, column: 32, scope: !7)
!37 = !DILocation(line: 44, column: 51, scope: !7)
!38 = !DILocation(line: 44, column: 46, scope: !7)
!39 = !DILocation(line: 49, column: 60, scope: !7)
!40 = !DILocation(line: 57, column: 60, scope: !7)
!41 = !DILocation(line: 32, column: 36, scope: !7)
!42 = !DILocation(line: 33, column: 36, scope: !7)
!43 = !DILocation(line: 34, column: 36, scope: !7)
!44 = !DILocation(line: 35, column: 36, scope: !7)
!45 = !DILocation(line: 36, column: 36, scope: !7)
!46 = !DILocation(line: 44, column: 30, scope: !7)
!47 = !DILocation(line: 44, column: 70, scope: !7)
!48 = !DILocation(line: 48, column: 35, scope: !7)
!49 = !DILocation(line: 49, column: 40, scope: !7)
!50 = !DILocation(line: 49, column: 36, scope: !7)
!51 = !DILocation(line: 49, column: 31, scope: !7)
!52 = !DILocation(line: 56, column: 35, scope: !7)
!53 = !DILocation(line: 57, column: 52, scope: !7)
!54 = !DILocation(line: 57, column: 47, scope: !7)
!55 = !DILocation(line: 59, column: 61, scope: !7)
!56 = !DILocation(line: 49, column: 72, scope: !7)
!57 = !DILocation(line: 57, column: 31, scope: !7)
!58 = !DILocation(line: 57, column: 72, scope: !7)
!59 = !DILocation(line: 59, column: 31, scope: !7)
!60 = !DILocation(line: 59, column: 73, scope: !7)
!61 = !DILocation(line: 58, column: 20, scope: !7)
!62 = !DILocation(line: 60, column: 20, scope: !7)
!63 = !DILocation(line: 61, column: 20, scope: !7)
!64 = !DILocation(line: 62, column: 20, scope: !7)
!65 = !DILocation(line: 63, column: 20, scope: !7)
!66 = !DILocation(line: 64, column: 20, scope: !7)
!67 = !DILocation(line: 66, column: 20, scope: !7)
!68 = !DILocation(line: 65, column: 20, scope: !7)
!69 = !DILocation(line: 67, column: 31, scope: !7)
!70 = !DILocation(line: 67, column: 71, scope: !7)
!71 = !DILocation(line: 69, column: 31, scope: !7)
!72 = !DILocation(line: 69, column: 72, scope: !7)
!73 = !DILocation(line: 74, column: 31, scope: !7)
!74 = !DILocation(line: 74, column: 72, scope: !7)
!75 = !DILocation(line: 76, column: 31, scope: !7)
!76 = !DILocation(line: 76, column: 73, scope: !7)
!77 = !DILocation(line: 75, column: 20, scope: !7)
!78 = !DILocation(line: 77, column: 20, scope: !7)
!79 = !DILocation(line: 78, column: 20, scope: !7)
!80 = !DILocation(line: 79, column: 20, scope: !7)
!81 = !DILocation(line: 80, column: 20, scope: !7)
!82 = !DILocation(line: 81, column: 20, scope: !7)
!83 = !DILocation(line: 83, column: 20, scope: !7)
!84 = !DILocation(line: 82, column: 20, scope: !7)
!85 = !DILocation(line: 84, column: 28, scope: !7)
!86 = !DILocation(line: 84, column: 40, scope: !7)
!87 = !DILocation(line: 85, column: 28, scope: !7)
!88 = !DILocation(line: 85, column: 40, scope: !7)
!89 = !DILocation(line: 85, column: 4, scope: !7)
