#blocked = #triton_gpu.blocked<{sizePerThread = [2], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("inductor_cache/ta/cta44t2hfruc2nrf35zwtabyl4expjhaq7lkdxbewrz2yzg4ntc7.py":19:0)
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_53(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/ta/cta44t2hfruc2nrf35zwtabyl4expjhaq7lkdxbewrz2yzg4ntc7.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/ta/cta44t2hfruc2nrf35zwtabyl4expjhaq7lkdxbewrz2yzg4ntc7.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/ta/cta44t2hfruc2nrf35zwtabyl4expjhaq7lkdxbewrz2yzg4ntc7.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/ta/cta44t2hfruc2nrf35zwtabyl4expjhaq7lkdxbewrz2yzg4ntc7.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/ta/cta44t2hfruc2nrf35zwtabyl4expjhaq7lkdxbewrz2yzg4ntc7.py":19:0), %arg5: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/ta/cta44t2hfruc2nrf35zwtabyl4expjhaq7lkdxbewrz2yzg4ntc7.py":19:0), %arg6: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/ta/cta44t2hfruc2nrf35zwtabyl4expjhaq7lkdxbewrz2yzg4ntc7.py":19:0), %arg7: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/ta/cta44t2hfruc2nrf35zwtabyl4expjhaq7lkdxbewrz2yzg4ntc7.py":19:0), %arg8: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/ta/cta44t2hfruc2nrf35zwtabyl4expjhaq7lkdxbewrz2yzg4ntc7.py":19:0), %arg9: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/ta/cta44t2hfruc2nrf35zwtabyl4expjhaq7lkdxbewrz2yzg4ntc7.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<256xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<1.000000e-03> : tensor<256xf32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<1.000000e+00> : tensor<256xf32, #blocked> loc(#loc1)
    %c256_i32 = arith.constant 256 : i32 loc(#loc1)
    %cst_2 = arith.constant dense<4> : tensor<256xi32, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<2560> : tensor<256xi32, #blocked> loc(#loc1)
    %cst_4 = arith.constant dense<10240> : tensor<256xi32, #blocked> loc(#loc1)
    %cst_5 = arith.constant dense<2048> : tensor<256xi64, #blocked> loc(#loc1)
    %cst_6 = arith.constant dense<9216> : tensor<256xi32, #blocked> loc(#loc1)
    %cst_7 = arith.constant dense<8704> : tensor<256xi32, #blocked> loc(#loc1)
    %cst_8 = arith.constant dense<-2048> : tensor<256xi32, #blocked> loc(#loc1)
    %cst_9 = arith.constant dense<384> : tensor<256xi64, #blocked> loc(#loc1)
    %cst_10 = arith.constant dense<256> : tensor<256xi64, #blocked> loc(#loc1)
    %cst_11 = arith.constant dense<8192> : tensor<256xi32, #blocked> loc(#loc1)
    %cst_12 = arith.constant dense<-256> : tensor<256xi32, #blocked> loc(#loc1)
    %cst_13 = arith.constant dense<-384> : tensor<256xi32, #blocked> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c256_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<256xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<256xi32, #blocked> loc(#loc5)
    %5 = arith.divsi %4, %cst_2 : tensor<256xi32, #blocked> loc(#loc6)
    %6 = arith.remsi %5, %cst_3 : tensor<256xi32, #blocked> loc(#loc7)
    %7 = arith.remsi %4, %cst_2 : tensor<256xi32, #blocked> loc(#loc8)
    %8 = arith.divsi %4, %cst_4 : tensor<256xi32, #blocked> loc(#loc9)
    %9 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc10)
    %10 = tt.addptr %9, %6 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc10)
    %11 = tt.load %10 evictionPolicy = evict_last : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc11)
    %12 = tt.splat %arg4 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc12)
    %13 = tt.addptr %12, %6 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc12)
    %14 = tt.load %13 evictionPolicy = evict_last : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc13)
    %15 = tt.splat %arg5 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc14)
    %16 = tt.addptr %15, %6 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc14)
    %17 = tt.load %16 evictionPolicy = evict_last : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc15)
    %18 = tt.splat %arg6 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc16)
    %19 = tt.addptr %18, %6 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc16)
    %20 = tt.load %19 evictionPolicy = evict_last : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc17)
    %21 = arith.extsi %6 : tensor<256xi32, #blocked> to tensor<256xi64, #blocked> loc(#loc18)
    %22 = arith.cmpi slt, %21, %cst_5 : tensor<256xi64, #blocked> loc(#loc18)
    %23 = arith.muli %6, %cst_2 : tensor<256xi32, #blocked> loc(#loc19)
    %24 = arith.addi %7, %23 : tensor<256xi32, #blocked> loc(#loc20)
    %25 = arith.muli %8, %cst_6 : tensor<256xi32, #blocked> loc(#loc21)
    %26 = arith.addi %24, %25 : tensor<256xi32, #blocked> loc(#loc22)
    %27 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc23)
    %28 = tt.addptr %27, %26 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc23)
    %29 = tt.load %28, %22, %cst : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc24)
    %30 = arith.muli %8, %cst_7 : tensor<256xi32, #blocked> loc(#loc25)
    %31 = arith.addi %24, %30 : tensor<256xi32, #blocked> loc(#loc26)
    %32 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc27)
    %33 = tt.addptr %32, %31 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc27)
    %34 = tt.load %33, %22, %cst : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc28)
    %35 = arith.addf %29, %34 : tensor<256xf32, #blocked> loc(#loc29)
    %36 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc30)
    %37 = tt.addptr %36, %31 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc30)
    %38 = tt.load %37, %22, %cst : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc31)
    %39 = arith.addf %35, %38 : tensor<256xf32, #blocked> loc(#loc32)
    %40 = arith.cmpi sge, %21, %cst_5 : tensor<256xi64, #blocked> loc(#loc33)
    %41 = arith.addi %6, %cst_8 : tensor<256xi32, #blocked> loc(#loc34)
    %42 = arith.extsi %41 : tensor<256xi32, #blocked> to tensor<256xi64, #blocked> loc(#loc35)
    %43 = arith.cmpi slt, %42, %cst_9 : tensor<256xi64, #blocked> loc(#loc35)
    %44 = arith.andi %43, %40 : tensor<256xi1, #blocked> loc(#loc36)
    %45 = arith.cmpi slt, %42, %cst_10 : tensor<256xi64, #blocked> loc(#loc37)
    %46 = arith.andi %45, %44 : tensor<256xi1, #blocked> loc(#loc38)
    %47 = arith.addi %7, %cst_11 : tensor<256xi32, #blocked> loc(#loc39)
    %48 = arith.muli %41, %cst_2 : tensor<256xi32, #blocked> loc(#loc40)
    %49 = arith.addi %47, %48 : tensor<256xi32, #blocked> loc(#loc41)
    %50 = arith.addi %49, %25 : tensor<256xi32, #blocked> loc(#loc42)
    %51 = tt.addptr %27, %50 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc43)
    %52 = tt.load %51, %46, %cst : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc44)
    %53 = arith.cmpi sge, %42, %cst_10 : tensor<256xi64, #blocked> loc(#loc45)
    %54 = arith.andi %53, %44 : tensor<256xi1, #blocked> loc(#loc46)
    %55 = arith.addi %41, %cst_12 : tensor<256xi32, #blocked> loc(#loc47)
    %56 = arith.muli %55, %cst_2 : tensor<256xi32, #blocked> loc(#loc48)
    %57 = arith.addi %47, %56 : tensor<256xi32, #blocked> loc(#loc49)
    %58 = arith.addi %57, %30 : tensor<256xi32, #blocked> loc(#loc50)
    %59 = tt.addptr %32, %58 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc51)
    %60 = tt.load %59, %54, %cst : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc52)
    %61 = arith.select %45, %52, %60 : tensor<256xi1, #blocked>, tensor<256xf32, #blocked> loc(#loc53)
    %62 = arith.select %44, %61, %cst : tensor<256xi1, #blocked>, tensor<256xf32, #blocked> loc(#loc54)
    %63 = arith.cmpi sge, %42, %cst_9 : tensor<256xi64, #blocked> loc(#loc55)
    %64 = arith.andi %63, %40 : tensor<256xi1, #blocked> loc(#loc56)
    %65 = arith.addi %41, %cst_13 : tensor<256xi32, #blocked> loc(#loc57)
    %66 = arith.muli %65, %cst_2 : tensor<256xi32, #blocked> loc(#loc58)
    %67 = arith.addi %47, %66 : tensor<256xi32, #blocked> loc(#loc59)
    %68 = arith.addi %67, %30 : tensor<256xi32, #blocked> loc(#loc60)
    %69 = tt.addptr %36, %68 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc61)
    %70 = tt.load %69, %64, %cst : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc62)
    %71 = arith.select %43, %62, %70 : tensor<256xi1, #blocked>, tensor<256xf32, #blocked> loc(#loc63)
    %72 = arith.select %40, %71, %cst : tensor<256xi1, #blocked>, tensor<256xf32, #blocked> loc(#loc64)
    %73 = arith.select %22, %39, %72 : tensor<256xi1, #blocked>, tensor<256xf32, #blocked> loc(#loc82)
    %74 = arith.subf %73, %11 : tensor<256xf32, #blocked> loc(#loc67)
    %75 = arith.addf %14, %cst_0 : tensor<256xf32, #blocked> loc(#loc68)
    %76 = tt.extern_elementwise %75 {libname = "", libpath = "", pure = true, symbol = "__nv_sqrtf"} : (tensor<256xf32, #blocked>) -> tensor<256xf32, #blocked> loc(#loc69)
    %77 = arith.divf %cst_1, %76 : tensor<256xf32, #blocked> loc(#loc70)
    %78 = arith.mulf %74, %77 : tensor<256xf32, #blocked> loc(#loc71)
    %79 = arith.mulf %78, %17 : tensor<256xf32, #blocked> loc(#loc72)
    %80 = arith.addf %79, %20 : tensor<256xf32, #blocked> loc(#loc73)
    %81 = arith.cmpf ogt, %cst, %80 : tensor<256xf32, #blocked> loc(#loc83)
    %82 = arith.select %81, %cst, %80 : tensor<256xi1, #blocked>, tensor<256xf32, #blocked> loc(#loc84)
    %83 = tt.splat %arg7 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc77)
    %84 = tt.addptr %83, %4 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc77)
    tt.store %84, %73 : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc78)
    %85 = tt.splat %arg8 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc79)
    %86 = tt.addptr %85, %4 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc79)
    tt.store %86, %82 : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc80)
    tt.return loc(#loc81)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("inductor_cache/ta/cta44t2hfruc2nrf35zwtabyl4expjhaq7lkdxbewrz2yzg4ntc7.py":21:28)
#loc3 = loc("inductor_cache/ta/cta44t2hfruc2nrf35zwtabyl4expjhaq7lkdxbewrz2yzg4ntc7.py":21:33)
#loc4 = loc("inductor_cache/ta/cta44t2hfruc2nrf35zwtabyl4expjhaq7lkdxbewrz2yzg4ntc7.py":22:36)
#loc5 = loc("inductor_cache/ta/cta44t2hfruc2nrf35zwtabyl4expjhaq7lkdxbewrz2yzg4ntc7.py":22:23)
#loc6 = loc("inductor_cache/ta/cta44t2hfruc2nrf35zwtabyl4expjhaq7lkdxbewrz2yzg4ntc7.py":24:21)
#loc7 = loc("inductor_cache/ta/cta44t2hfruc2nrf35zwtabyl4expjhaq7lkdxbewrz2yzg4ntc7.py":24:26)
#loc8 = loc("inductor_cache/ta/cta44t2hfruc2nrf35zwtabyl4expjhaq7lkdxbewrz2yzg4ntc7.py":25:19)
#loc9 = loc("inductor_cache/ta/cta44t2hfruc2nrf35zwtabyl4expjhaq7lkdxbewrz2yzg4ntc7.py":26:19)
#loc10 = loc("inductor_cache/ta/cta44t2hfruc2nrf35zwtabyl4expjhaq7lkdxbewrz2yzg4ntc7.py":28:31)
#loc11 = loc("inductor_cache/ta/cta44t2hfruc2nrf35zwtabyl4expjhaq7lkdxbewrz2yzg4ntc7.py":28:36)
#loc12 = loc("inductor_cache/ta/cta44t2hfruc2nrf35zwtabyl4expjhaq7lkdxbewrz2yzg4ntc7.py":29:31)
#loc13 = loc("inductor_cache/ta/cta44t2hfruc2nrf35zwtabyl4expjhaq7lkdxbewrz2yzg4ntc7.py":29:36)
#loc14 = loc("inductor_cache/ta/cta44t2hfruc2nrf35zwtabyl4expjhaq7lkdxbewrz2yzg4ntc7.py":30:31)
#loc15 = loc("inductor_cache/ta/cta44t2hfruc2nrf35zwtabyl4expjhaq7lkdxbewrz2yzg4ntc7.py":30:36)
#loc16 = loc("inductor_cache/ta/cta44t2hfruc2nrf35zwtabyl4expjhaq7lkdxbewrz2yzg4ntc7.py":31:31)
#loc17 = loc("inductor_cache/ta/cta44t2hfruc2nrf35zwtabyl4expjhaq7lkdxbewrz2yzg4ntc7.py":31:36)
#loc18 = loc("inductor_cache/ta/cta44t2hfruc2nrf35zwtabyl4expjhaq7lkdxbewrz2yzg4ntc7.py":36:18)
#loc19 = loc("inductor_cache/ta/cta44t2hfruc2nrf35zwtabyl4expjhaq7lkdxbewrz2yzg4ntc7.py":37:38)
#loc20 = loc("inductor_cache/ta/cta44t2hfruc2nrf35zwtabyl4expjhaq7lkdxbewrz2yzg4ntc7.py":37:35)
#loc21 = loc("inductor_cache/ta/cta44t2hfruc2nrf35zwtabyl4expjhaq7lkdxbewrz2yzg4ntc7.py":37:49)
#loc22 = loc("inductor_cache/ta/cta44t2hfruc2nrf35zwtabyl4expjhaq7lkdxbewrz2yzg4ntc7.py":37:44)
#loc23 = loc("inductor_cache/ta/cta44t2hfruc2nrf35zwtabyl4expjhaq7lkdxbewrz2yzg4ntc7.py":37:30)
#loc24 = loc("inductor_cache/ta/cta44t2hfruc2nrf35zwtabyl4expjhaq7lkdxbewrz2yzg4ntc7.py":37:54)
#loc25 = loc("inductor_cache/ta/cta44t2hfruc2nrf35zwtabyl4expjhaq7lkdxbewrz2yzg4ntc7.py":38:49)
#loc26 = loc("inductor_cache/ta/cta44t2hfruc2nrf35zwtabyl4expjhaq7lkdxbewrz2yzg4ntc7.py":38:44)
#loc27 = loc("inductor_cache/ta/cta44t2hfruc2nrf35zwtabyl4expjhaq7lkdxbewrz2yzg4ntc7.py":38:30)
#loc28 = loc("inductor_cache/ta/cta44t2hfruc2nrf35zwtabyl4expjhaq7lkdxbewrz2yzg4ntc7.py":38:54)
#loc29 = loc("inductor_cache/ta/cta44t2hfruc2nrf35zwtabyl4expjhaq7lkdxbewrz2yzg4ntc7.py":39:18)
#loc30 = loc("inductor_cache/ta/cta44t2hfruc2nrf35zwtabyl4expjhaq7lkdxbewrz2yzg4ntc7.py":40:30)
#loc31 = loc("inductor_cache/ta/cta44t2hfruc2nrf35zwtabyl4expjhaq7lkdxbewrz2yzg4ntc7.py":40:54)
#loc32 = loc("inductor_cache/ta/cta44t2hfruc2nrf35zwtabyl4expjhaq7lkdxbewrz2yzg4ntc7.py":41:18)
#loc33 = loc("inductor_cache/ta/cta44t2hfruc2nrf35zwtabyl4expjhaq7lkdxbewrz2yzg4ntc7.py":44:20)
#loc34 = loc("inductor_cache/ta/cta44t2hfruc2nrf35zwtabyl4expjhaq7lkdxbewrz2yzg4ntc7.py":47:22)
#loc35 = loc("inductor_cache/ta/cta44t2hfruc2nrf35zwtabyl4expjhaq7lkdxbewrz2yzg4ntc7.py":51:20)
#loc36 = loc("inductor_cache/ta/cta44t2hfruc2nrf35zwtabyl4expjhaq7lkdxbewrz2yzg4ntc7.py":52:20)
#loc37 = loc("inductor_cache/ta/cta44t2hfruc2nrf35zwtabyl4expjhaq7lkdxbewrz2yzg4ntc7.py":57:20)
#loc38 = loc("inductor_cache/ta/cta44t2hfruc2nrf35zwtabyl4expjhaq7lkdxbewrz2yzg4ntc7.py":58:20)
#loc39 = loc("inductor_cache/ta/cta44t2hfruc2nrf35zwtabyl4expjhaq7lkdxbewrz2yzg4ntc7.py":59:38)
#loc40 = loc("inductor_cache/ta/cta44t2hfruc2nrf35zwtabyl4expjhaq7lkdxbewrz2yzg4ntc7.py":59:46)
#loc41 = loc("inductor_cache/ta/cta44t2hfruc2nrf35zwtabyl4expjhaq7lkdxbewrz2yzg4ntc7.py":59:43)
#loc42 = loc("inductor_cache/ta/cta44t2hfruc2nrf35zwtabyl4expjhaq7lkdxbewrz2yzg4ntc7.py":59:62)
#loc43 = loc("inductor_cache/ta/cta44t2hfruc2nrf35zwtabyl4expjhaq7lkdxbewrz2yzg4ntc7.py":59:31)
#loc44 = loc("inductor_cache/ta/cta44t2hfruc2nrf35zwtabyl4expjhaq7lkdxbewrz2yzg4ntc7.py":59:72)
#loc45 = loc("inductor_cache/ta/cta44t2hfruc2nrf35zwtabyl4expjhaq7lkdxbewrz2yzg4ntc7.py":60:21)
#loc46 = loc("inductor_cache/ta/cta44t2hfruc2nrf35zwtabyl4expjhaq7lkdxbewrz2yzg4ntc7.py":63:20)
#loc47 = loc("inductor_cache/ta/cta44t2hfruc2nrf35zwtabyl4expjhaq7lkdxbewrz2yzg4ntc7.py":64:56)
#loc48 = loc("inductor_cache/ta/cta44t2hfruc2nrf35zwtabyl4expjhaq7lkdxbewrz2yzg4ntc7.py":64:46)
#loc49 = loc("inductor_cache/ta/cta44t2hfruc2nrf35zwtabyl4expjhaq7lkdxbewrz2yzg4ntc7.py":64:43)
#loc50 = loc("inductor_cache/ta/cta44t2hfruc2nrf35zwtabyl4expjhaq7lkdxbewrz2yzg4ntc7.py":64:73)
#loc51 = loc("inductor_cache/ta/cta44t2hfruc2nrf35zwtabyl4expjhaq7lkdxbewrz2yzg4ntc7.py":64:31)
#loc52 = loc("inductor_cache/ta/cta44t2hfruc2nrf35zwtabyl4expjhaq7lkdxbewrz2yzg4ntc7.py":64:83)
#loc53 = loc("inductor_cache/ta/cta44t2hfruc2nrf35zwtabyl4expjhaq7lkdxbewrz2yzg4ntc7.py":65:35)
#loc54 = loc("inductor_cache/ta/cta44t2hfruc2nrf35zwtabyl4expjhaq7lkdxbewrz2yzg4ntc7.py":67:35)
#loc55 = loc("inductor_cache/ta/cta44t2hfruc2nrf35zwtabyl4expjhaq7lkdxbewrz2yzg4ntc7.py":68:21)
#loc56 = loc("inductor_cache/ta/cta44t2hfruc2nrf35zwtabyl4expjhaq7lkdxbewrz2yzg4ntc7.py":71:20)
#loc57 = loc("inductor_cache/ta/cta44t2hfruc2nrf35zwtabyl4expjhaq7lkdxbewrz2yzg4ntc7.py":72:56)
#loc58 = loc("inductor_cache/ta/cta44t2hfruc2nrf35zwtabyl4expjhaq7lkdxbewrz2yzg4ntc7.py":72:46)
#loc59 = loc("inductor_cache/ta/cta44t2hfruc2nrf35zwtabyl4expjhaq7lkdxbewrz2yzg4ntc7.py":72:43)
#loc60 = loc("inductor_cache/ta/cta44t2hfruc2nrf35zwtabyl4expjhaq7lkdxbewrz2yzg4ntc7.py":72:73)
#loc61 = loc("inductor_cache/ta/cta44t2hfruc2nrf35zwtabyl4expjhaq7lkdxbewrz2yzg4ntc7.py":72:31)
#loc62 = loc("inductor_cache/ta/cta44t2hfruc2nrf35zwtabyl4expjhaq7lkdxbewrz2yzg4ntc7.py":72:83)
#loc63 = loc("inductor_cache/ta/cta44t2hfruc2nrf35zwtabyl4expjhaq7lkdxbewrz2yzg4ntc7.py":73:35)
#loc64 = loc("inductor_cache/ta/cta44t2hfruc2nrf35zwtabyl4expjhaq7lkdxbewrz2yzg4ntc7.py":75:35)
#loc65 = loc("inductor_cache/ta/cta44t2hfruc2nrf35zwtabyl4expjhaq7lkdxbewrz2yzg4ntc7.py":76:34)
#loc66 = loc("inductor_cache/ta/cta44t2hfruc2nrf35zwtabyl4expjhaq7lkdxbewrz2yzg4ntc7.py":43:33)
#loc67 = loc("inductor_cache/ta/cta44t2hfruc2nrf35zwtabyl4expjhaq7lkdxbewrz2yzg4ntc7.py":77:20)
#loc68 = loc("inductor_cache/ta/cta44t2hfruc2nrf35zwtabyl4expjhaq7lkdxbewrz2yzg4ntc7.py":79:20)
#loc69 = loc("inductor_cache/ta/cta44t2hfruc2nrf35zwtabyl4expjhaq7lkdxbewrz2yzg4ntc7.py":80:27)
#loc70 = loc("inductor_cache/ta/cta44t2hfruc2nrf35zwtabyl4expjhaq7lkdxbewrz2yzg4ntc7.py":82:20)
#loc71 = loc("inductor_cache/ta/cta44t2hfruc2nrf35zwtabyl4expjhaq7lkdxbewrz2yzg4ntc7.py":85:20)
#loc72 = loc("inductor_cache/ta/cta44t2hfruc2nrf35zwtabyl4expjhaq7lkdxbewrz2yzg4ntc7.py":86:20)
#loc73 = loc("inductor_cache/ta/cta44t2hfruc2nrf35zwtabyl4expjhaq7lkdxbewrz2yzg4ntc7.py":87:20)
#loc74 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":118:15)
#loc75 = loc("inductor_cache/ta/cta44t2hfruc2nrf35zwtabyl4expjhaq7lkdxbewrz2yzg4ntc7.py":89:42)
#loc76 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":121:29)
#loc77 = loc("inductor_cache/ta/cta44t2hfruc2nrf35zwtabyl4expjhaq7lkdxbewrz2yzg4ntc7.py":90:25)
#loc78 = loc("inductor_cache/ta/cta44t2hfruc2nrf35zwtabyl4expjhaq7lkdxbewrz2yzg4ntc7.py":90:37)
#loc79 = loc("inductor_cache/ta/cta44t2hfruc2nrf35zwtabyl4expjhaq7lkdxbewrz2yzg4ntc7.py":91:25)
#loc80 = loc("inductor_cache/ta/cta44t2hfruc2nrf35zwtabyl4expjhaq7lkdxbewrz2yzg4ntc7.py":91:37)
#loc81 = loc("inductor_cache/ta/cta44t2hfruc2nrf35zwtabyl4expjhaq7lkdxbewrz2yzg4ntc7.py":91:4)
#loc82 = loc(fused[#loc65, #loc66])
#loc83 = loc(callsite(#loc74 at #loc75))
#loc84 = loc(callsite(#loc76 at #loc75))
