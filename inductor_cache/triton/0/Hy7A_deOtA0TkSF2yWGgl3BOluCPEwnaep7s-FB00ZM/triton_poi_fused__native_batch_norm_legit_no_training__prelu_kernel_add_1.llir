; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_add_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, ptr addrspace(1) %16, ptr addrspace(1) %17, ptr addrspace(1) %18, i32 %19) local_unnamed_addr !dbg !7 {
  %21 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %22 = shl i32 %21, 7, !dbg !11
  %23 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %24 = and i32 %23, 127, !dbg !12
  %25 = or disjoint i32 %22, %24, !dbg !13
  %26 = sdiv i32 %25, 1024, !dbg !14
  %27 = srem i32 %26, 8, !dbg !15
  %28 = sext i32 %25 to i64, !dbg !16
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !16
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 true) #3, !dbg !17
  %31 = sext i32 %27 to i64, !dbg !18
  %32 = getelementptr float, ptr addrspace(1) %1, i64 %31, !dbg !18
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #3, !dbg !19
  %34 = getelementptr float, ptr addrspace(1) %2, i64 %31, !dbg !20
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #3, !dbg !21
  %36 = bitcast i32 %35 to float, !dbg !21
  %37 = getelementptr float, ptr addrspace(1) %3, i64 %31, !dbg !22
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 true) #3, !dbg !23
  %39 = getelementptr float, ptr addrspace(1) %4, i64 %31, !dbg !24
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !25
  %41 = getelementptr float, ptr addrspace(1) %5, i64 %28, !dbg !26
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 true) #3, !dbg !27
  %43 = getelementptr float, ptr addrspace(1) %6, i64 %31, !dbg !28
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 true) #3, !dbg !29
  %45 = getelementptr float, ptr addrspace(1) %7, i64 %31, !dbg !30
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 true) #3, !dbg !31
  %47 = bitcast i32 %46 to float, !dbg !31
  %48 = getelementptr float, ptr addrspace(1) %8, i64 %31, !dbg !32
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #3, !dbg !33
  %50 = getelementptr float, ptr addrspace(1) %9, i64 %31, !dbg !34
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 true) #3, !dbg !35
  %52 = getelementptr float, ptr addrspace(1) %10, i64 %31, !dbg !36
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 true) #3, !dbg !37
  %54 = getelementptr float, ptr addrspace(1) %11, i64 %28, !dbg !38
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 true) #3, !dbg !39
  %56 = getelementptr float, ptr addrspace(1) %12, i64 %31, !dbg !40
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 true) #3, !dbg !41
  %58 = getelementptr float, ptr addrspace(1) %13, i64 %31, !dbg !42
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 true) #3, !dbg !43
  %60 = getelementptr float, ptr addrspace(1) %14, i64 %28, !dbg !44
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 true) #3, !dbg !45
  %62 = getelementptr float, ptr addrspace(1) %15, i64 %31, !dbg !46
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 true) #3, !dbg !47
  %64 = fadd float %36, 0x3EE4F8B580000000, !dbg !48
  %65 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !49
  %.not.i = icmp eq i32 %65, 0, !dbg !49
  %66 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !49
  %.not1.i = icmp eq i32 %66, 0, !dbg !49
  br i1 %.not.i, label %72, label %67, !dbg !49

67:                                               ; preds = %20
  br i1 %.not1.i, label %70, label %68, !dbg !49

68:                                               ; preds = %67
  %69 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %64) #3, !dbg !49
  br label %__nv_sqrtf.exit, !dbg !49

70:                                               ; preds = %67
  %71 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %64) #3, !dbg !49
  br label %__nv_sqrtf.exit, !dbg !49

72:                                               ; preds = %20
  br i1 %.not1.i, label %75, label %73, !dbg !49

73:                                               ; preds = %72
  %74 = tail call float @llvm.nvvm.sqrt.rn.f(float %64) #3, !dbg !49
  br label %__nv_sqrtf.exit, !dbg !49

75:                                               ; preds = %72
  %76 = tail call float @llvm.nvvm.sqrt.approx.f(float %64) #3, !dbg !49
  br label %__nv_sqrtf.exit, !dbg !49

__nv_sqrtf.exit:                                  ; preds = %68, %70, %73, %75
  %.0.i = phi float [ %69, %68 ], [ %71, %70 ], [ %74, %73 ], [ %76, %75 ], !dbg !49
  %77 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !50
  %78 = fadd float %47, 0x3EE4F8B580000000, !dbg !51
  %79 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !52
  %.not.i1 = icmp eq i32 %79, 0, !dbg !52
  %80 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !52
  %.not1.i4 = icmp eq i32 %80, 0, !dbg !52
  br i1 %.not.i1, label %86, label %81, !dbg !52

81:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %84, label %82, !dbg !52

82:                                               ; preds = %81
  %83 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %78) #3, !dbg !52
  br label %__nv_sqrtf.exit5, !dbg !52

84:                                               ; preds = %81
  %85 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %78) #3, !dbg !52
  br label %__nv_sqrtf.exit5, !dbg !52

86:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %89, label %87, !dbg !52

87:                                               ; preds = %86
  %88 = tail call float @llvm.nvvm.sqrt.rn.f(float %78) #3, !dbg !52
  br label %__nv_sqrtf.exit5, !dbg !52

89:                                               ; preds = %86
  %90 = tail call float @llvm.nvvm.sqrt.approx.f(float %78) #3, !dbg !52
  br label %__nv_sqrtf.exit5, !dbg !52

__nv_sqrtf.exit5:                                 ; preds = %82, %84, %87, %89
  %.0.i3 = phi float [ %83, %82 ], [ %85, %84 ], [ %88, %87 ], [ %90, %89 ], !dbg !52
  %91 = insertelement <2 x i32> poison, i32 %30, i64 0, !dbg !17
  %92 = insertelement <2 x i32> %91, i32 %42, i64 1, !dbg !17
  %93 = bitcast <2 x i32> %92 to <2 x float>, !dbg !17
  %94 = insertelement <2 x i32> poison, i32 %33, i64 0, !dbg !19
  %95 = insertelement <2 x i32> %94, i32 %44, i64 1, !dbg !19
  %96 = bitcast <2 x i32> %95 to <2 x float>, !dbg !19
  %97 = insertelement <2 x i32> poison, i32 %38, i64 0, !dbg !23
  %98 = insertelement <2 x i32> %97, i32 %49, i64 1, !dbg !23
  %99 = bitcast <2 x i32> %98 to <2 x float>, !dbg !23
  %100 = insertelement <2 x i32> poison, i32 %40, i64 0, !dbg !25
  %101 = insertelement <2 x i32> %100, i32 %51, i64 1, !dbg !25
  %102 = bitcast <2 x i32> %101 to <2 x float>, !dbg !25
  %103 = insertelement <2 x i32> poison, i32 %57, i64 0, !dbg !41
  %104 = insertelement <2 x i32> %103, i32 %63, i64 1, !dbg !41
  %105 = bitcast <2 x i32> %104 to <2 x float>, !dbg !41
  %106 = insertelement <2 x i32> poison, i32 %55, i64 0, !dbg !39
  %107 = insertelement <2 x i32> %106, i32 %61, i64 1, !dbg !39
  %108 = bitcast <2 x i32> %107 to <2 x float>, !dbg !39
  %109 = insertelement <2 x i32> poison, i32 %53, i64 0, !dbg !37
  %110 = insertelement <2 x i32> %109, i32 %59, i64 1, !dbg !37
  %111 = bitcast <2 x i32> %110 to <2 x float>, !dbg !37
  %112 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !53
  %113 = fsub <2 x float> %93, %96, !dbg !54
  %114 = insertelement <2 x float> poison, float %77, i64 0, !dbg !55
  %115 = insertelement <2 x float> %114, float %112, i64 1, !dbg !55
  %116 = fmul <2 x float> %113, %115, !dbg !55
  %117 = fmul <2 x float> %116, %99, !dbg !56
  %118 = fadd <2 x float> %117, %102, !dbg !57
  %119 = fcmp ogt <2 x float> %118, zeroinitializer, !dbg !58
  %120 = fmul <2 x float> %118, %111, !dbg !59
  %121 = select <2 x i1> %119, <2 x float> %118, <2 x float> %120, !dbg !60
  %122 = fcmp ogt <2 x float> %108, zeroinitializer, !dbg !61
  %123 = fmul <2 x float> %108, %105, !dbg !62
  %124 = select <2 x i1> %122, <2 x float> %108, <2 x float> %123, !dbg !63
  %125 = fadd <2 x float> %124, %121, !dbg !64
  %shift = shufflevector <2 x float> %125, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !65
  %126 = fadd <2 x float> %125, %shift, !dbg !65
  %127 = getelementptr float, ptr addrspace(1) %16, i64 %28, !dbg !66
  %bc = bitcast <2 x float> %118 to <2 x i32>, !dbg !67
  %128 = extractelement <2 x i32> %bc, i64 0, !dbg !67
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %128, ptr addrspace(1) %127, i1 true) #3, !dbg !67
  %129 = getelementptr float, ptr addrspace(1) %17, i64 %28, !dbg !68
  %bc6 = bitcast <2 x float> %118 to <2 x i32>, !dbg !69
  %130 = extractelement <2 x i32> %bc6, i64 1, !dbg !69
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %130, ptr addrspace(1) %129, i1 true) #3, !dbg !69
  %131 = getelementptr float, ptr addrspace(1) %18, i64 %28, !dbg !70
  %bc7 = bitcast <2 x float> %126 to <2 x i32>, !dbg !71
  %132 = extractelement <2 x i32> %bc7, i64 0, !dbg !71
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %132, ptr addrspace(1) %131, i1 true) #3, !dbg !71
  ret void, !dbg !72
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cb7ua7fikoalnwneh2hl37wy6mqoy6v26ibzuyg4d34r47o5eod6.py", directory: "inductor_cache/b7")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_add_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_add_1, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_add_1", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_add_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 29, scope: !7)
!16 = !DILocation(line: 26, column: 30, scope: !7)
!17 = !DILocation(line: 26, column: 35, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 35, scope: !7)
!20 = !DILocation(line: 28, column: 30, scope: !7)
!21 = !DILocation(line: 28, column: 35, scope: !7)
!22 = !DILocation(line: 29, column: 31, scope: !7)
!23 = !DILocation(line: 29, column: 36, scope: !7)
!24 = !DILocation(line: 30, column: 31, scope: !7)
!25 = !DILocation(line: 30, column: 36, scope: !7)
!26 = !DILocation(line: 31, column: 31, scope: !7)
!27 = !DILocation(line: 31, column: 36, scope: !7)
!28 = !DILocation(line: 32, column: 31, scope: !7)
!29 = !DILocation(line: 32, column: 36, scope: !7)
!30 = !DILocation(line: 33, column: 31, scope: !7)
!31 = !DILocation(line: 33, column: 36, scope: !7)
!32 = !DILocation(line: 34, column: 31, scope: !7)
!33 = !DILocation(line: 34, column: 36, scope: !7)
!34 = !DILocation(line: 35, column: 31, scope: !7)
!35 = !DILocation(line: 35, column: 36, scope: !7)
!36 = !DILocation(line: 36, column: 32, scope: !7)
!37 = !DILocation(line: 36, column: 37, scope: !7)
!38 = !DILocation(line: 37, column: 32, scope: !7)
!39 = !DILocation(line: 37, column: 37, scope: !7)
!40 = !DILocation(line: 38, column: 32, scope: !7)
!41 = !DILocation(line: 38, column: 37, scope: !7)
!42 = !DILocation(line: 39, column: 32, scope: !7)
!43 = !DILocation(line: 39, column: 37, scope: !7)
!44 = !DILocation(line: 40, column: 32, scope: !7)
!45 = !DILocation(line: 40, column: 37, scope: !7)
!46 = !DILocation(line: 41, column: 32, scope: !7)
!47 = !DILocation(line: 41, column: 37, scope: !7)
!48 = !DILocation(line: 44, column: 18, scope: !7)
!49 = !DILocation(line: 45, column: 26, scope: !7)
!50 = !DILocation(line: 47, column: 18, scope: !7)
!51 = !DILocation(line: 54, column: 20, scope: !7)
!52 = !DILocation(line: 55, column: 27, scope: !7)
!53 = !DILocation(line: 56, column: 19, scope: !7)
!54 = !DILocation(line: 42, column: 18, scope: !7)
!55 = !DILocation(line: 50, column: 19, scope: !7)
!56 = !DILocation(line: 51, column: 20, scope: !7)
!57 = !DILocation(line: 52, column: 20, scope: !7)
!58 = !DILocation(line: 62, column: 20, scope: !7)
!59 = !DILocation(line: 63, column: 20, scope: !7)
!60 = !DILocation(line: 64, column: 35, scope: !7)
!61 = !DILocation(line: 65, column: 20, scope: !7)
!62 = !DILocation(line: 66, column: 20, scope: !7)
!63 = !DILocation(line: 67, column: 35, scope: !7)
!64 = !DILocation(line: 68, column: 20, scope: !7)
!65 = !DILocation(line: 76, column: 20, scope: !7)
!66 = !DILocation(line: 77, column: 25, scope: !7)
!67 = !DILocation(line: 77, column: 37, scope: !7)
!68 = !DILocation(line: 78, column: 25, scope: !7)
!69 = !DILocation(line: 78, column: 37, scope: !7)
!70 = !DILocation(line: 79, column: 25, scope: !7)
!71 = !DILocation(line: 79, column: 37, scope: !7)
!72 = !DILocation(line: 79, column: 4, scope: !7)
