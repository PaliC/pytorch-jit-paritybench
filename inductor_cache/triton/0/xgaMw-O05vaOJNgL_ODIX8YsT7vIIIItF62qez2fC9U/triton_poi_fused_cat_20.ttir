#loc = loc("inductor_cache/6t/c6tmfrahqa5qgqdhs7qdtz6hqmanetjaq7bucx3clpoa7frj65bq.py":19:0)
module {
  tt.func public @triton_poi_fused_cat_20(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/6t/c6tmfrahqa5qgqdhs7qdtz6hqmanetjaq7bucx3clpoa7frj65bq.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/6t/c6tmfrahqa5qgqdhs7qdtz6hqmanetjaq7bucx3clpoa7frj65bq.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/6t/c6tmfrahqa5qgqdhs7qdtz6hqmanetjaq7bucx3clpoa7frj65bq.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/6t/c6tmfrahqa5qgqdhs7qdtz6hqmanetjaq7bucx3clpoa7frj65bq.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/6t/c6tmfrahqa5qgqdhs7qdtz6hqmanetjaq7bucx3clpoa7frj65bq.py":19:0), %arg5: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/6t/c6tmfrahqa5qgqdhs7qdtz6hqmanetjaq7bucx3clpoa7frj65bq.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<-18> : tensor<256xi32> loc(#loc1)
    %cst_0 = arith.constant dense<288> : tensor<256xi32> loc(#loc1)
    %cst_1 = arith.constant dense<18> : tensor<256xi64> loc(#loc1)
    %cst_2 = arith.constant dense<-96> : tensor<256xi32> loc(#loc1)
    %cst_3 = arith.constant dense<-48> : tensor<256xi32> loc(#loc1)
    %cst_4 = arith.constant dense<2.000000e-01> : tensor<256xf32> loc(#loc1)
    %cst_5 = arith.constant dense<0.000000e+00> : tensor<256xf32> loc(#loc1)
    %cst_6 = arith.constant dense<768> : tensor<256xi32> loc(#loc1)
    %cst_7 = arith.constant dense<48> : tensor<256xi64> loc(#loc1)
    %cst_8 = arith.constant dense<96> : tensor<256xi64> loc(#loc1)
    %cst_9 = arith.constant dense<2112> : tensor<256xi32> loc(#loc1)
    %cst_10 = arith.constant dense<132> : tensor<256xi32> loc(#loc1)
    %cst_11 = arith.constant dense<16> : tensor<256xi32> loc(#loc1)
    %cst_12 = arith.constant dense<8448> : tensor<256xi32> loc(#loc1)
    %c256_i32 = arith.constant 256 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c256_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<256xi32> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<256xi32> loc(#loc5)
    %5 = arith.cmpi slt, %4, %cst_12 : tensor<256xi32> loc(#loc6)
    %6 = arith.divsi %4, %cst_11 : tensor<256xi32> loc(#loc7)
    %7 = arith.remsi %6, %cst_10 : tensor<256xi32> loc(#loc8)
    %8 = arith.remsi %4, %cst_11 : tensor<256xi32> loc(#loc9)
    %9 = arith.divsi %4, %cst_9 : tensor<256xi32> loc(#loc10)
    %10 = arith.extsi %7 : tensor<256xi32> to tensor<256xi64> loc(#loc11)
    %11 = arith.cmpi slt, %10, %cst_8 : tensor<256xi64> loc(#loc11)
    %12 = arith.cmpi slt, %10, %cst_7 : tensor<256xi64> loc(#loc12)
    %13 = arith.andi %12, %11 : tensor<256xi1> loc(#loc13)
    %14 = arith.muli %7, %cst_11 : tensor<256xi32> loc(#loc14)
    %15 = arith.addi %8, %14 : tensor<256xi32> loc(#loc15)
    %16 = arith.muli %9, %cst_6 : tensor<256xi32> loc(#loc16)
    %17 = arith.addi %15, %16 : tensor<256xi32> loc(#loc17)
    %18 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>> loc(#loc18)
    %19 = tt.addptr %18, %17 : tensor<256x!tt.ptr<f32>>, tensor<256xi32> loc(#loc18)
    %20 = arith.andi %13, %5 : tensor<256xi1> loc(#loc19)
    %21 = tt.load %19, %20, %cst_5 : tensor<256x!tt.ptr<f32>> loc(#loc20)
    %22 = arith.cmpf ogt, %21, %cst_5 : tensor<256xf32> loc(#loc21)
    %23 = arith.mulf %21, %cst_4 : tensor<256xf32> loc(#loc22)
    %24 = arith.select %22, %21, %23 : tensor<256xi1>, tensor<256xf32> loc(#loc23)
    %25 = arith.select %13, %24, %cst_5 : tensor<256xi1>, tensor<256xf32> loc(#loc24)
    %26 = arith.cmpi sge, %10, %cst_7 : tensor<256xi64> loc(#loc25)
    %27 = arith.andi %26, %11 : tensor<256xi1> loc(#loc26)
    %28 = arith.addi %7, %cst_3 : tensor<256xi32> loc(#loc27)
    %29 = arith.muli %28, %cst_11 : tensor<256xi32> loc(#loc28)
    %30 = arith.addi %8, %29 : tensor<256xi32> loc(#loc29)
    %31 = arith.addi %30, %16 : tensor<256xi32> loc(#loc30)
    %32 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>> loc(#loc31)
    %33 = tt.addptr %32, %31 : tensor<256x!tt.ptr<f32>>, tensor<256xi32> loc(#loc31)
    %34 = arith.andi %27, %5 : tensor<256xi1> loc(#loc32)
    %35 = tt.load %33, %34, %cst_5 : tensor<256x!tt.ptr<f32>> loc(#loc33)
    %36 = arith.cmpf ogt, %35, %cst_5 : tensor<256xf32> loc(#loc34)
    %37 = arith.mulf %35, %cst_4 : tensor<256xf32> loc(#loc35)
    %38 = arith.select %36, %35, %37 : tensor<256xi1>, tensor<256xf32> loc(#loc36)
    %39 = arith.select %27, %38, %cst_5 : tensor<256xi1>, tensor<256xf32> loc(#loc37)
    %40 = arith.select %12, %25, %39 : tensor<256xi1>, tensor<256xf32> loc(#loc38)
    %41 = arith.cmpi sge, %10, %cst_8 : tensor<256xi64> loc(#loc39)
    %42 = arith.addi %7, %cst_2 : tensor<256xi32> loc(#loc40)
    %43 = arith.extsi %42 : tensor<256xi32> to tensor<256xi64> loc(#loc41)
    %44 = arith.cmpi slt, %43, %cst_1 : tensor<256xi64> loc(#loc41)
    %45 = arith.andi %44, %41 : tensor<256xi1> loc(#loc42)
    %46 = arith.muli %42, %cst_11 : tensor<256xi32> loc(#loc43)
    %47 = arith.addi %8, %46 : tensor<256xi32> loc(#loc44)
    %48 = arith.muli %9, %cst_0 : tensor<256xi32> loc(#loc45)
    %49 = arith.addi %47, %48 : tensor<256xi32> loc(#loc46)
    %50 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>> loc(#loc47)
    %51 = tt.addptr %50, %49 : tensor<256x!tt.ptr<f32>>, tensor<256xi32> loc(#loc47)
    %52 = arith.andi %45, %5 : tensor<256xi1> loc(#loc48)
    %53 = tt.load %51, %52, %cst_5 : tensor<256x!tt.ptr<f32>> loc(#loc49)
    %54 = arith.cmpf ogt, %53, %cst_5 : tensor<256xf32> loc(#loc50)
    %55 = arith.mulf %53, %cst_4 : tensor<256xf32> loc(#loc51)
    %56 = arith.select %54, %53, %55 : tensor<256xi1>, tensor<256xf32> loc(#loc52)
    %57 = arith.select %45, %56, %cst_5 : tensor<256xi1>, tensor<256xf32> loc(#loc53)
    %58 = arith.cmpi sge, %43, %cst_1 : tensor<256xi64> loc(#loc54)
    %59 = arith.andi %58, %41 : tensor<256xi1> loc(#loc55)
    %60 = arith.addi %42, %cst : tensor<256xi32> loc(#loc56)
    %61 = arith.muli %60, %cst_11 : tensor<256xi32> loc(#loc57)
    %62 = arith.addi %8, %61 : tensor<256xi32> loc(#loc58)
    %63 = arith.addi %62, %48 : tensor<256xi32> loc(#loc59)
    %64 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>> loc(#loc60)
    %65 = tt.addptr %64, %63 : tensor<256x!tt.ptr<f32>>, tensor<256xi32> loc(#loc60)
    %66 = arith.andi %59, %5 : tensor<256xi1> loc(#loc61)
    %67 = tt.load %65, %66, %cst_5 : tensor<256x!tt.ptr<f32>> loc(#loc62)
    %68 = arith.cmpf ogt, %67, %cst_5 : tensor<256xf32> loc(#loc63)
    %69 = arith.mulf %67, %cst_4 : tensor<256xf32> loc(#loc64)
    %70 = arith.select %68, %67, %69 : tensor<256xi1>, tensor<256xf32> loc(#loc65)
    %71 = arith.select %59, %70, %cst_5 : tensor<256xi1>, tensor<256xf32> loc(#loc66)
    %72 = arith.select %44, %57, %71 : tensor<256xi1>, tensor<256xf32> loc(#loc67)
    %73 = arith.select %41, %72, %cst_5 : tensor<256xi1>, tensor<256xf32> loc(#loc68)
    %74 = arith.select %11, %40, %73 : tensor<256xi1>, tensor<256xf32> loc(#loc74)
    %75 = tt.splat %arg4 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>> loc(#loc71)
    %76 = tt.addptr %75, %4 : tensor<256x!tt.ptr<f32>>, tensor<256xi32> loc(#loc71)
    tt.store %76, %74, %5 : tensor<256x!tt.ptr<f32>> loc(#loc72)
    tt.return loc(#loc73)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("inductor_cache/6t/c6tmfrahqa5qgqdhs7qdtz6hqmanetjaq7bucx3clpoa7frj65bq.py":21:28)
#loc3 = loc("inductor_cache/6t/c6tmfrahqa5qgqdhs7qdtz6hqmanetjaq7bucx3clpoa7frj65bq.py":21:33)
#loc4 = loc("inductor_cache/6t/c6tmfrahqa5qgqdhs7qdtz6hqmanetjaq7bucx3clpoa7frj65bq.py":22:36)
#loc5 = loc("inductor_cache/6t/c6tmfrahqa5qgqdhs7qdtz6hqmanetjaq7bucx3clpoa7frj65bq.py":22:23)
#loc6 = loc("inductor_cache/6t/c6tmfrahqa5qgqdhs7qdtz6hqmanetjaq7bucx3clpoa7frj65bq.py":23:21)
#loc7 = loc("inductor_cache/6t/c6tmfrahqa5qgqdhs7qdtz6hqmanetjaq7bucx3clpoa7frj65bq.py":24:21)
#loc8 = loc("inductor_cache/6t/c6tmfrahqa5qgqdhs7qdtz6hqmanetjaq7bucx3clpoa7frj65bq.py":24:27)
#loc9 = loc("inductor_cache/6t/c6tmfrahqa5qgqdhs7qdtz6hqmanetjaq7bucx3clpoa7frj65bq.py":25:19)
#loc10 = loc("inductor_cache/6t/c6tmfrahqa5qgqdhs7qdtz6hqmanetjaq7bucx3clpoa7frj65bq.py":26:19)
#loc11 = loc("inductor_cache/6t/c6tmfrahqa5qgqdhs7qdtz6hqmanetjaq7bucx3clpoa7frj65bq.py":32:18)
#loc12 = loc("inductor_cache/6t/c6tmfrahqa5qgqdhs7qdtz6hqmanetjaq7bucx3clpoa7frj65bq.py":37:18)
#loc13 = loc("inductor_cache/6t/c6tmfrahqa5qgqdhs7qdtz6hqmanetjaq7bucx3clpoa7frj65bq.py":38:19)
#loc14 = loc("inductor_cache/6t/c6tmfrahqa5qgqdhs7qdtz6hqmanetjaq7bucx3clpoa7frj65bq.py":39:40)
#loc15 = loc("inductor_cache/6t/c6tmfrahqa5qgqdhs7qdtz6hqmanetjaq7bucx3clpoa7frj65bq.py":39:36)
#loc16 = loc("inductor_cache/6t/c6tmfrahqa5qgqdhs7qdtz6hqmanetjaq7bucx3clpoa7frj65bq.py":39:50)
#loc17 = loc("inductor_cache/6t/c6tmfrahqa5qgqdhs7qdtz6hqmanetjaq7bucx3clpoa7frj65bq.py":39:46)
#loc18 = loc("inductor_cache/6t/c6tmfrahqa5qgqdhs7qdtz6hqmanetjaq7bucx3clpoa7frj65bq.py":39:31)
#loc19 = loc("inductor_cache/6t/c6tmfrahqa5qgqdhs7qdtz6hqmanetjaq7bucx3clpoa7frj65bq.py":39:63)
#loc20 = loc("inductor_cache/6t/c6tmfrahqa5qgqdhs7qdtz6hqmanetjaq7bucx3clpoa7frj65bq.py":39:55)
#loc21 = loc("inductor_cache/6t/c6tmfrahqa5qgqdhs7qdtz6hqmanetjaq7bucx3clpoa7frj65bq.py":41:20)
#loc22 = loc("inductor_cache/6t/c6tmfrahqa5qgqdhs7qdtz6hqmanetjaq7bucx3clpoa7frj65bq.py":43:20)
#loc23 = loc("inductor_cache/6t/c6tmfrahqa5qgqdhs7qdtz6hqmanetjaq7bucx3clpoa7frj65bq.py":44:35)
#loc24 = loc("inductor_cache/6t/c6tmfrahqa5qgqdhs7qdtz6hqmanetjaq7bucx3clpoa7frj65bq.py":46:35)
#loc25 = loc("inductor_cache/6t/c6tmfrahqa5qgqdhs7qdtz6hqmanetjaq7bucx3clpoa7frj65bq.py":47:20)
#loc26 = loc("inductor_cache/6t/c6tmfrahqa5qgqdhs7qdtz6hqmanetjaq7bucx3clpoa7frj65bq.py":50:20)
#loc27 = loc("inductor_cache/6t/c6tmfrahqa5qgqdhs7qdtz6hqmanetjaq7bucx3clpoa7frj65bq.py":51:49)
#loc28 = loc("inductor_cache/6t/c6tmfrahqa5qgqdhs7qdtz6hqmanetjaq7bucx3clpoa7frj65bq.py":51:40)
#loc29 = loc("inductor_cache/6t/c6tmfrahqa5qgqdhs7qdtz6hqmanetjaq7bucx3clpoa7frj65bq.py":51:36)
#loc30 = loc("inductor_cache/6t/c6tmfrahqa5qgqdhs7qdtz6hqmanetjaq7bucx3clpoa7frj65bq.py":51:56)
#loc31 = loc("inductor_cache/6t/c6tmfrahqa5qgqdhs7qdtz6hqmanetjaq7bucx3clpoa7frj65bq.py":51:31)
#loc32 = loc("inductor_cache/6t/c6tmfrahqa5qgqdhs7qdtz6hqmanetjaq7bucx3clpoa7frj65bq.py":51:73)
#loc33 = loc("inductor_cache/6t/c6tmfrahqa5qgqdhs7qdtz6hqmanetjaq7bucx3clpoa7frj65bq.py":51:65)
#loc34 = loc("inductor_cache/6t/c6tmfrahqa5qgqdhs7qdtz6hqmanetjaq7bucx3clpoa7frj65bq.py":53:20)
#loc35 = loc("inductor_cache/6t/c6tmfrahqa5qgqdhs7qdtz6hqmanetjaq7bucx3clpoa7frj65bq.py":55:20)
#loc36 = loc("inductor_cache/6t/c6tmfrahqa5qgqdhs7qdtz6hqmanetjaq7bucx3clpoa7frj65bq.py":56:35)
#loc37 = loc("inductor_cache/6t/c6tmfrahqa5qgqdhs7qdtz6hqmanetjaq7bucx3clpoa7frj65bq.py":58:35)
#loc38 = loc("inductor_cache/6t/c6tmfrahqa5qgqdhs7qdtz6hqmanetjaq7bucx3clpoa7frj65bq.py":59:34)
#loc39 = loc("inductor_cache/6t/c6tmfrahqa5qgqdhs7qdtz6hqmanetjaq7bucx3clpoa7frj65bq.py":62:20)
#loc40 = loc("inductor_cache/6t/c6tmfrahqa5qgqdhs7qdtz6hqmanetjaq7bucx3clpoa7frj65bq.py":65:20)
#loc41 = loc("inductor_cache/6t/c6tmfrahqa5qgqdhs7qdtz6hqmanetjaq7bucx3clpoa7frj65bq.py":69:20)
#loc42 = loc("inductor_cache/6t/c6tmfrahqa5qgqdhs7qdtz6hqmanetjaq7bucx3clpoa7frj65bq.py":70:20)
#loc43 = loc("inductor_cache/6t/c6tmfrahqa5qgqdhs7qdtz6hqmanetjaq7bucx3clpoa7frj65bq.py":71:40)
#loc44 = loc("inductor_cache/6t/c6tmfrahqa5qgqdhs7qdtz6hqmanetjaq7bucx3clpoa7frj65bq.py":71:36)
#loc45 = loc("inductor_cache/6t/c6tmfrahqa5qgqdhs7qdtz6hqmanetjaq7bucx3clpoa7frj65bq.py":71:58)
#loc46 = loc("inductor_cache/6t/c6tmfrahqa5qgqdhs7qdtz6hqmanetjaq7bucx3clpoa7frj65bq.py":71:54)
#loc47 = loc("inductor_cache/6t/c6tmfrahqa5qgqdhs7qdtz6hqmanetjaq7bucx3clpoa7frj65bq.py":71:31)
#loc48 = loc("inductor_cache/6t/c6tmfrahqa5qgqdhs7qdtz6hqmanetjaq7bucx3clpoa7frj65bq.py":71:71)
#loc49 = loc("inductor_cache/6t/c6tmfrahqa5qgqdhs7qdtz6hqmanetjaq7bucx3clpoa7frj65bq.py":71:63)
#loc50 = loc("inductor_cache/6t/c6tmfrahqa5qgqdhs7qdtz6hqmanetjaq7bucx3clpoa7frj65bq.py":73:20)
#loc51 = loc("inductor_cache/6t/c6tmfrahqa5qgqdhs7qdtz6hqmanetjaq7bucx3clpoa7frj65bq.py":75:20)
#loc52 = loc("inductor_cache/6t/c6tmfrahqa5qgqdhs7qdtz6hqmanetjaq7bucx3clpoa7frj65bq.py":76:35)
#loc53 = loc("inductor_cache/6t/c6tmfrahqa5qgqdhs7qdtz6hqmanetjaq7bucx3clpoa7frj65bq.py":78:35)
#loc54 = loc("inductor_cache/6t/c6tmfrahqa5qgqdhs7qdtz6hqmanetjaq7bucx3clpoa7frj65bq.py":79:21)
#loc55 = loc("inductor_cache/6t/c6tmfrahqa5qgqdhs7qdtz6hqmanetjaq7bucx3clpoa7frj65bq.py":82:20)
#loc56 = loc("inductor_cache/6t/c6tmfrahqa5qgqdhs7qdtz6hqmanetjaq7bucx3clpoa7frj65bq.py":83:49)
#loc57 = loc("inductor_cache/6t/c6tmfrahqa5qgqdhs7qdtz6hqmanetjaq7bucx3clpoa7frj65bq.py":83:40)
#loc58 = loc("inductor_cache/6t/c6tmfrahqa5qgqdhs7qdtz6hqmanetjaq7bucx3clpoa7frj65bq.py":83:36)
#loc59 = loc("inductor_cache/6t/c6tmfrahqa5qgqdhs7qdtz6hqmanetjaq7bucx3clpoa7frj65bq.py":83:64)
#loc60 = loc("inductor_cache/6t/c6tmfrahqa5qgqdhs7qdtz6hqmanetjaq7bucx3clpoa7frj65bq.py":83:31)
#loc61 = loc("inductor_cache/6t/c6tmfrahqa5qgqdhs7qdtz6hqmanetjaq7bucx3clpoa7frj65bq.py":83:81)
#loc62 = loc("inductor_cache/6t/c6tmfrahqa5qgqdhs7qdtz6hqmanetjaq7bucx3clpoa7frj65bq.py":83:73)
#loc63 = loc("inductor_cache/6t/c6tmfrahqa5qgqdhs7qdtz6hqmanetjaq7bucx3clpoa7frj65bq.py":85:20)
#loc64 = loc("inductor_cache/6t/c6tmfrahqa5qgqdhs7qdtz6hqmanetjaq7bucx3clpoa7frj65bq.py":87:20)
#loc65 = loc("inductor_cache/6t/c6tmfrahqa5qgqdhs7qdtz6hqmanetjaq7bucx3clpoa7frj65bq.py":88:35)
#loc66 = loc("inductor_cache/6t/c6tmfrahqa5qgqdhs7qdtz6hqmanetjaq7bucx3clpoa7frj65bq.py":90:35)
#loc67 = loc("inductor_cache/6t/c6tmfrahqa5qgqdhs7qdtz6hqmanetjaq7bucx3clpoa7frj65bq.py":91:35)
#loc68 = loc("inductor_cache/6t/c6tmfrahqa5qgqdhs7qdtz6hqmanetjaq7bucx3clpoa7frj65bq.py":93:35)
#loc69 = loc("inductor_cache/6t/c6tmfrahqa5qgqdhs7qdtz6hqmanetjaq7bucx3clpoa7frj65bq.py":94:34)
#loc70 = loc("inductor_cache/6t/c6tmfrahqa5qgqdhs7qdtz6hqmanetjaq7bucx3clpoa7frj65bq.py":61:34)
#loc71 = loc("inductor_cache/6t/c6tmfrahqa5qgqdhs7qdtz6hqmanetjaq7bucx3clpoa7frj65bq.py":95:25)
#loc72 = loc("inductor_cache/6t/c6tmfrahqa5qgqdhs7qdtz6hqmanetjaq7bucx3clpoa7frj65bq.py":95:37)
#loc73 = loc("inductor_cache/6t/c6tmfrahqa5qgqdhs7qdtz6hqmanetjaq7bucx3clpoa7frj65bq.py":95:4)
#loc74 = loc(fused[#loc69, #loc70])
