; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_red_fused_div_mean_pow_sub_11(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %6 = shl i32 %5, 2, !dbg !10
  %7 = and i32 %6, 2044, !dbg !10
  %8 = zext nneg i32 %7 to i64, !dbg !11
  %9 = getelementptr float, ptr addrspace(1) %0, i64 %8, !dbg !12
  %10 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %9, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !13
  %11 = extractvalue { i32, i32, i32, i32 } %10, 0, !dbg !13
  %12 = extractvalue { i32, i32, i32, i32 } %10, 1, !dbg !13
  %13 = extractvalue { i32, i32, i32, i32 } %10, 2, !dbg !13
  %14 = extractvalue { i32, i32, i32, i32 } %10, 3, !dbg !13
  %15 = getelementptr float, ptr addrspace(1) %1, i64 %8, !dbg !14
  %16 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %15, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !15
  %17 = extractvalue { i32, i32, i32, i32 } %16, 0, !dbg !15
  %18 = extractvalue { i32, i32, i32, i32 } %16, 1, !dbg !15
  %19 = extractvalue { i32, i32, i32, i32 } %16, 2, !dbg !15
  %20 = extractvalue { i32, i32, i32, i32 } %16, 3, !dbg !15
  %21 = or disjoint i64 %8, 2048, !dbg !16
  %22 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !12
  %23 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %22, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !13
  %24 = extractvalue { i32, i32, i32, i32 } %23, 0, !dbg !13
  %25 = extractvalue { i32, i32, i32, i32 } %23, 1, !dbg !13
  %26 = extractvalue { i32, i32, i32, i32 } %23, 2, !dbg !13
  %27 = extractvalue { i32, i32, i32, i32 } %23, 3, !dbg !13
  %28 = getelementptr float, ptr addrspace(1) %1, i64 %21, !dbg !14
  %29 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %28, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !15
  %30 = extractvalue { i32, i32, i32, i32 } %29, 0, !dbg !15
  %31 = extractvalue { i32, i32, i32, i32 } %29, 1, !dbg !15
  %32 = extractvalue { i32, i32, i32, i32 } %29, 2, !dbg !15
  %33 = extractvalue { i32, i32, i32, i32 } %29, 3, !dbg !15
  %34 = insertelement <2 x i32> poison, i32 %11, i64 0, !dbg !13
  %35 = insertelement <2 x i32> %34, i32 %12, i64 1, !dbg !13
  %36 = bitcast <2 x i32> %35 to <2 x float>, !dbg !13
  %37 = insertelement <2 x i32> poison, i32 %17, i64 0, !dbg !15
  %38 = insertelement <2 x i32> %37, i32 %18, i64 1, !dbg !15
  %39 = bitcast <2 x i32> %38 to <2 x float>, !dbg !15
  %40 = fmul <2 x float> %36, splat (float 0x3ED0000000000000), !dbg !17
  %41 = fmul <2 x float> %39, splat (float 0x3ED0000000000000), !dbg !18
  %42 = fsub <2 x float> %40, %41, !dbg !19
  %43 = fmul <2 x float> %42, %42, !dbg !20
  %44 = insertelement <2 x i32> poison, i32 %24, i64 0, !dbg !13
  %45 = insertelement <2 x i32> %44, i32 %25, i64 1, !dbg !13
  %46 = bitcast <2 x i32> %45 to <2 x float>, !dbg !13
  %47 = insertelement <2 x i32> poison, i32 %30, i64 0, !dbg !15
  %48 = insertelement <2 x i32> %47, i32 %31, i64 1, !dbg !15
  %49 = bitcast <2 x i32> %48 to <2 x float>, !dbg !15
  %50 = fmul <2 x float> %46, splat (float 0x3ED0000000000000), !dbg !17
  %51 = fmul <2 x float> %49, splat (float 0x3ED0000000000000), !dbg !18
  %52 = fsub <2 x float> %50, %51, !dbg !19
  %53 = fmul <2 x float> %52, %52, !dbg !20
  %54 = fadd <2 x float> %43, %53, !dbg !21
  %55 = insertelement <2 x i32> poison, i32 %14, i64 0, !dbg !13
  %56 = insertelement <2 x i32> %55, i32 %13, i64 1, !dbg !13
  %57 = bitcast <2 x i32> %56 to <2 x float>, !dbg !13
  %58 = insertelement <2 x i32> poison, i32 %20, i64 0, !dbg !15
  %59 = insertelement <2 x i32> %58, i32 %19, i64 1, !dbg !15
  %60 = bitcast <2 x i32> %59 to <2 x float>, !dbg !15
  %61 = fmul <2 x float> %57, splat (float 0x3ED0000000000000), !dbg !17
  %62 = fmul <2 x float> %60, splat (float 0x3ED0000000000000), !dbg !18
  %63 = fsub <2 x float> %61, %62, !dbg !19
  %64 = fmul <2 x float> %63, %63, !dbg !20
  %65 = insertelement <2 x i32> poison, i32 %27, i64 0, !dbg !13
  %66 = insertelement <2 x i32> %65, i32 %26, i64 1, !dbg !13
  %67 = bitcast <2 x i32> %66 to <2 x float>, !dbg !13
  %68 = insertelement <2 x i32> poison, i32 %33, i64 0, !dbg !15
  %69 = insertelement <2 x i32> %68, i32 %32, i64 1, !dbg !15
  %70 = bitcast <2 x i32> %69 to <2 x float>, !dbg !15
  %71 = fmul <2 x float> %67, splat (float 0x3ED0000000000000), !dbg !17
  %72 = fmul <2 x float> %70, splat (float 0x3ED0000000000000), !dbg !18
  %73 = fsub <2 x float> %71, %72, !dbg !19
  %74 = fmul <2 x float> %73, %73, !dbg !20
  %75 = fadd <2 x float> %64, %74, !dbg !21
  %76 = lshr i32 %5, 5, !dbg !10
  %77 = and i32 %5, 31, !dbg !10
  %shift = shufflevector <2 x float> %54, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !22
  %78 = fadd <2 x float> %54, %shift, !dbg !22
  %shift4 = shufflevector <2 x float> %75, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !22
  %79 = fadd <2 x float> %shift4, %78, !dbg !22
  %80 = fadd <2 x float> %75, %79, !dbg !22
  %81 = extractelement <2 x float> %80, i64 0, !dbg !22
  %82 = bitcast float %81 to i32, !dbg !27
  %83 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %82, i32 16, i32 31), !dbg !27
  %84 = bitcast i32 %83 to float, !dbg !27
  %85 = fadd float %81, %84, !dbg !22
  %86 = bitcast float %85 to i32, !dbg !27
  %87 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %86, i32 8, i32 31), !dbg !27
  %88 = bitcast i32 %87 to float, !dbg !27
  %89 = fadd float %85, %88, !dbg !22
  %90 = bitcast float %89 to i32, !dbg !27
  %91 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %90, i32 4, i32 31), !dbg !27
  %92 = bitcast i32 %91 to float, !dbg !27
  %93 = fadd float %89, %92, !dbg !22
  %94 = bitcast float %93 to i32, !dbg !27
  %95 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %94, i32 2, i32 31), !dbg !27
  %96 = bitcast i32 %95 to float, !dbg !27
  %97 = fadd float %93, %96, !dbg !22
  %98 = bitcast float %97 to i32, !dbg !27
  %99 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %98, i32 1, i32 31), !dbg !27
  %100 = bitcast i32 %99 to float, !dbg !27
  %101 = fadd float %97, %100, !dbg !22
  %102 = icmp eq i32 %77, 0, !dbg !27
  %103 = and i32 %76, 15, !dbg !27
  %104 = getelementptr float, ptr addrspace(3) @global_smem, i32 %103, !dbg !27
  %105 = bitcast float %101 to <1 x i32>, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %104, <1 x i32> %105, i1 %102) #3, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %106 = icmp slt i32 %5, 16, !dbg !27
  %107 = getelementptr float, ptr addrspace(3) @global_smem, i32 %5, !dbg !27
  %108 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %107, i1 %106) #3, !dbg !27
  %109 = bitcast i32 %108 to float, !dbg !27
  %110 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %108, i32 8, i32 31), !dbg !27
  %111 = bitcast i32 %110 to float, !dbg !27
  %112 = fadd float %109, %111, !dbg !22
  %113 = bitcast float %112 to i32, !dbg !27
  %114 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %113, i32 4, i32 31), !dbg !27
  %115 = bitcast i32 %114 to float, !dbg !27
  %116 = fadd float %112, %115, !dbg !22
  %117 = bitcast float %116 to i32, !dbg !27
  %118 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %117, i32 2, i32 31), !dbg !27
  %119 = bitcast i32 %118 to float, !dbg !27
  %120 = fadd float %116, %119, !dbg !22
  %121 = bitcast float %120 to i32, !dbg !27
  %122 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %121, i32 1, i32 31), !dbg !27
  %123 = bitcast i32 %122 to float, !dbg !27
  %124 = fadd float %120, %123, !dbg !22
  %125 = and i32 %5, 15, !dbg !27
  %126 = icmp eq i32 %125, 0, !dbg !27
  %127 = and i1 %106, %126, !dbg !27
  %128 = bitcast float %124 to <1 x i32>, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %107, <1 x i32> %128, i1 %127) #3, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %129 = load i32, ptr addrspace(3) @global_smem, align 16, !dbg !27
  %urem = and i32 %5, 511, !dbg !28
  %130 = icmp eq i32 %urem, 0, !dbg !28
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %129, ptr addrspace(1) %2, i1 %130) #3, !dbg !28
  ret void, !dbg !29
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cyrctmwrrld527byqpbepouul7bkmwxwlyf7d67m5gnjowebersm.py", directory: "inductor_cache/yr")
!4 = !{ptr @triton_red_fused_div_mean_pow_sub_11, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_div_mean_pow_sub_11, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_div_mean_pow_sub_11", linkageName: "triton_red_fused_div_mean_pow_sub_11", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 25, column: 33, scope: !7)
!11 = !DILocation(line: 27, column: 36, scope: !7)
!12 = !DILocation(line: 31, column: 34, scope: !7)
!13 = !DILocation(line: 31, column: 39, scope: !7)
!14 = !DILocation(line: 32, column: 34, scope: !7)
!15 = !DILocation(line: 32, column: 39, scope: !7)
!16 = !DILocation(line: 28, column: 27, scope: !7)
!17 = !DILocation(line: 34, column: 22, scope: !7)
!18 = !DILocation(line: 35, column: 22, scope: !7)
!19 = !DILocation(line: 36, column: 22, scope: !7)
!20 = !DILocation(line: 37, column: 22, scope: !7)
!21 = !DILocation(line: 39, column: 23, scope: !7)
!22 = !DILocation(line: 256, column: 15, scope: !23, inlinedAt: !26)
!23 = distinct !DILexicalBlockFile(scope: !25, file: !24, discriminator: 0)
!24 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!25 = distinct !DILexicalBlockFile(scope: !7, file: !24, discriminator: 0)
!26 = !DILocation(line: 41, column: 25, scope: !7)
!27 = !DILocation(line: 267, column: 36, scope: !25, inlinedAt: !26)
!28 = !DILocation(line: 42, column: 67, scope: !7)
!29 = !DILocation(line: 42, column: 4, scope: !7)
