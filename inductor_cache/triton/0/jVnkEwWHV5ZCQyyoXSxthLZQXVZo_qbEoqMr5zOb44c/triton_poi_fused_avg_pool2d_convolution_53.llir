; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_avg_pool2d_convolution_53(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #3, !dbg !10
  %9 = shl i32 %8, 4, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = lshr i32 %10, 4, !dbg !12
  %12 = and i32 %11, 7, !dbg !12
  %13 = shl i32 %10, 2, !dbg !12
  %14 = and i32 %13, 12, !dbg !12
  %15 = or disjoint i32 %9, %12, !dbg !13
  %16 = or disjoint i32 %9, %14, !dbg !13
  %17 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !14
  %18 = shl i32 %17, 6, !dbg !15
  %19 = and i32 %13, 60, !dbg !16
  %20 = lshr i32 %10, 2, !dbg !16
  %21 = and i32 %20, 31, !dbg !16
  %22 = or disjoint i32 %18, %21, !dbg !17
  %23 = or disjoint i32 %22, 32, !dbg !17
  %24 = icmp slt i32 %22, 64, !dbg !18
  %25 = icmp slt i32 %23, 64, !dbg !18
  %.frozen = freeze i32 %16, !dbg !19
  %26 = sdiv i32 %.frozen, 2048, !dbg !19
  %27 = mul i32 %26, 2048, !dbg !20
  %.decomposed = sub i32 %.frozen, %27, !dbg !20
  %28 = shl i32 %15, 6, !dbg !21
  %29 = or disjoint i32 %28, 512, !dbg !21
  %30 = or disjoint i32 %18, %19, !dbg !17
  %31 = or disjoint i32 %30, 1, !dbg !17
  %32 = or disjoint i32 %30, 2, !dbg !17
  %33 = or disjoint i32 %30, 3, !dbg !17
  %34 = icmp slt i32 %30, 64, !dbg !18
  %35 = sdiv i32 %30, 8, !dbg !22
  %36 = insertelement <4 x i32> poison, i32 %33, i64 0, !dbg !23
  %37 = insertelement <4 x i32> %36, i32 %32, i64 1, !dbg !23
  %38 = insertelement <4 x i32> %37, i32 %30, i64 2, !dbg !23
  %39 = insertelement <4 x i32> %38, i32 %31, i64 3, !dbg !23
  %40 = srem <4 x i32> %39, splat (i32 8), !dbg !23
  %41 = shufflevector <4 x i32> %40, <4 x i32> poison, <8 x i32> <i32 0, i32 1, i32 1, i32 2, i32 0, i32 1, i32 3, i32 2>, !dbg !23
  %42 = add i32 %30, %28, !dbg !24
  %43 = add i32 %30, %29, !dbg !24
  %44 = sext i32 %42 to i64, !dbg !25
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !25
  %46 = sext i32 %43 to i64, !dbg !25
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !25
  %48 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %45, i1 %34) #3, !dbg !26
  %49 = extractvalue { i32, i32, i32, i32 } %48, 0, !dbg !26
  %50 = extractvalue { i32, i32, i32, i32 } %48, 1, !dbg !26
  %51 = extractvalue { i32, i32, i32, i32 } %48, 2, !dbg !26
  %52 = extractvalue { i32, i32, i32, i32 } %48, 3, !dbg !26
  %53 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %47, i1 %34) #3, !dbg !26
  %54 = extractvalue { i32, i32, i32, i32 } %53, 0, !dbg !26
  %55 = extractvalue { i32, i32, i32, i32 } %53, 1, !dbg !26
  %56 = extractvalue { i32, i32, i32, i32 } %53, 2, !dbg !26
  %57 = extractvalue { i32, i32, i32, i32 } %53, 3, !dbg !26
  %58 = add i32 %30, -9, !dbg !27
  %59 = add i32 %30, -8, !dbg !27
  %60 = add i32 %30, -7, !dbg !27
  %61 = add i32 %30, -6, !dbg !27
  %62 = add i32 %58, %28, !dbg !28
  %63 = add i32 %28, %59, !dbg !28
  %64 = add i32 %28, %60, !dbg !28
  %65 = add i32 %28, %61, !dbg !28
  %66 = add i32 %58, %29, !dbg !28
  %67 = add i32 %59, %29, !dbg !28
  %68 = add i32 %60, %29, !dbg !28
  %69 = add i32 %61, %29, !dbg !28
  %70 = sext i32 %62 to i64, !dbg !29
  %71 = getelementptr float, ptr addrspace(1) %0, i64 %70, !dbg !29
  %72 = sext i32 %63 to i64, !dbg !29
  %73 = getelementptr float, ptr addrspace(1) %0, i64 %72, !dbg !29
  %74 = sext i32 %64 to i64, !dbg !29
  %75 = getelementptr float, ptr addrspace(1) %0, i64 %74, !dbg !29
  %76 = sext i32 %65 to i64, !dbg !29
  %77 = getelementptr float, ptr addrspace(1) %0, i64 %76, !dbg !29
  %78 = sext i32 %66 to i64, !dbg !29
  %79 = getelementptr float, ptr addrspace(1) %0, i64 %78, !dbg !29
  %80 = sext i32 %67 to i64, !dbg !29
  %81 = getelementptr float, ptr addrspace(1) %0, i64 %80, !dbg !29
  %82 = sext i32 %68 to i64, !dbg !29
  %83 = getelementptr float, ptr addrspace(1) %0, i64 %82, !dbg !29
  %84 = sext i32 %69 to i64, !dbg !29
  %85 = getelementptr float, ptr addrspace(1) %0, i64 %84, !dbg !29
  %86 = icmp ult i32 %59, 56, !dbg !30
  %87 = icmp sgt <8 x i32> %41, <i32 6, i32 6, i32 -1, i32 -1, i32 0, i32 0, i32 0, i32 0>, !dbg !31
  %88 = extractelement <8 x i1> %87, i64 7, !dbg !32
  %89 = and i1 %86, %88, !dbg !30
  %90 = extractelement <8 x i1> %87, i64 6, !dbg !32
  %91 = and i1 %90, %86, !dbg !30
  %92 = extractelement <8 x i1> %87, i64 5, !dbg !32
  %93 = and i1 %92, %86, !dbg !30
  %94 = extractelement <8 x i1> %87, i64 4, !dbg !32
  %95 = and i1 %94, %86, !dbg !30
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %71, i1 %89, i32 0, i1 %89) #3, !dbg !33
  %97 = bitcast i32 %96 to float, !dbg !33
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %73, i1 %91, i32 0, i1 %91) #3, !dbg !33
  %99 = bitcast i32 %98 to float, !dbg !33
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %75, i1 %93, i32 0, i1 %93) #3, !dbg !33
  %101 = bitcast i32 %100 to float, !dbg !33
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %77, i1 %95, i32 0, i1 %95) #3, !dbg !33
  %103 = bitcast i32 %102 to float, !dbg !33
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %79, i1 %89, i32 0, i1 %89) #3, !dbg !33
  %105 = bitcast i32 %104 to float, !dbg !33
  %106 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %81, i1 %91, i32 0, i1 %91) #3, !dbg !33
  %107 = bitcast i32 %106 to float, !dbg !33
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %83, i1 %93, i32 0, i1 %93) #3, !dbg !33
  %109 = bitcast i32 %108 to float, !dbg !33
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %85, i1 %95, i32 0, i1 %95) #3, !dbg !33
  %111 = bitcast i32 %110 to float, !dbg !33
  %112 = extractelement <8 x i1> %87, i64 3, !dbg !34
  %113 = and i1 %86, %112, !dbg !35
  %114 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %73, i1 %113, i32 0, i1 %113, i32 0, i1 %113, i32 0, i1 %113, i32 0, i1 %113) #3, !dbg !36
  %115 = extractvalue { i32, i32, i32, i32 } %114, 0, !dbg !36
  %116 = extractvalue { i32, i32, i32, i32 } %114, 1, !dbg !36
  %117 = extractvalue { i32, i32, i32, i32 } %114, 2, !dbg !36
  %118 = extractvalue { i32, i32, i32, i32 } %114, 3, !dbg !36
  %119 = bitcast i32 %115 to float, !dbg !36
  %120 = bitcast i32 %116 to float, !dbg !36
  %121 = bitcast i32 %117 to float, !dbg !36
  %122 = bitcast i32 %118 to float, !dbg !36
  %123 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %81, i1 %113, i32 0, i1 %113, i32 0, i1 %113, i32 0, i1 %113, i32 0, i1 %113) #3, !dbg !36
  %124 = extractvalue { i32, i32, i32, i32 } %123, 0, !dbg !36
  %125 = extractvalue { i32, i32, i32, i32 } %123, 1, !dbg !36
  %126 = extractvalue { i32, i32, i32, i32 } %123, 2, !dbg !36
  %127 = extractvalue { i32, i32, i32, i32 } %123, 3, !dbg !36
  %128 = bitcast i32 %124 to float, !dbg !36
  %129 = bitcast i32 %125 to float, !dbg !36
  %130 = bitcast i32 %126 to float, !dbg !36
  %131 = bitcast i32 %127 to float, !dbg !36
  %132 = fadd float %97, %119, !dbg !37
  %133 = fadd float %99, %120, !dbg !37
  %134 = fadd float %101, %121, !dbg !37
  %135 = fadd float %103, %122, !dbg !37
  %136 = fadd float %105, %128, !dbg !37
  %137 = fadd float %107, %129, !dbg !37
  %138 = fadd float %109, %130, !dbg !37
  %139 = fadd float %111, %131, !dbg !37
  %140 = extractelement <4 x i32> %40, i64 2, !dbg !38
  %141 = or disjoint i32 %140, 1, !dbg !39
  %142 = extractelement <4 x i32> %40, i64 1, !dbg !40
  %143 = or disjoint i32 %142, 1, !dbg !39
  %144 = icmp slt i32 %141, 8, !dbg !41
  %145 = icmp slt i32 %143, 8, !dbg !41
  %146 = and i1 %112, %144, !dbg !34
  %147 = extractelement <4 x i32> %40, i64 3, !dbg !38
  %148 = icmp ult i32 %147, 7, !dbg !34
  %149 = extractelement <8 x i1> %87, i64 2, !dbg !34
  %150 = and i1 %149, %145, !dbg !34
  %151 = extractelement <4 x i32> %40, i64 0, !dbg !40
  %152 = add nsw i32 %151, 1, !dbg !34
  %153 = icmp ult i32 %152, 8, !dbg !34
  %154 = add i32 %30, -5, !dbg !42
  %155 = add i32 %30, -4, !dbg !42
  %156 = add i32 %28, %154, !dbg !43
  %157 = add i32 %28, %155, !dbg !43
  %158 = add i32 %154, %29, !dbg !43
  %159 = add i32 %155, %29, !dbg !43
  %160 = sext i32 %156 to i64, !dbg !44
  %161 = getelementptr float, ptr addrspace(1) %0, i64 %160, !dbg !44
  %162 = sext i32 %157 to i64, !dbg !44
  %163 = getelementptr float, ptr addrspace(1) %0, i64 %162, !dbg !44
  %164 = sext i32 %158 to i64, !dbg !44
  %165 = getelementptr float, ptr addrspace(1) %0, i64 %164, !dbg !44
  %166 = sext i32 %159 to i64, !dbg !44
  %167 = getelementptr float, ptr addrspace(1) %0, i64 %166, !dbg !44
  %168 = and i1 %86, %146, !dbg !45
  %169 = and i1 %148, %86, !dbg !45
  %170 = and i1 %150, %86, !dbg !45
  %171 = and i1 %153, %86, !dbg !45
  %172 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %75, i1 %168, i32 0, i1 %168) #3, !dbg !46
  %173 = bitcast i32 %172 to float, !dbg !46
  %174 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %77, i1 %169, i32 0, i1 %169) #3, !dbg !46
  %175 = bitcast i32 %174 to float, !dbg !46
  %176 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %161, i1 %170, i32 0, i1 %170) #3, !dbg !46
  %177 = bitcast i32 %176 to float, !dbg !46
  %178 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %163, i1 %171, i32 0, i1 %171) #3, !dbg !46
  %179 = bitcast i32 %178 to float, !dbg !46
  %180 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %83, i1 %168, i32 0, i1 %168) #3, !dbg !46
  %181 = bitcast i32 %180 to float, !dbg !46
  %182 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %85, i1 %169, i32 0, i1 %169) #3, !dbg !46
  %183 = bitcast i32 %182 to float, !dbg !46
  %184 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %165, i1 %170, i32 0, i1 %170) #3, !dbg !46
  %185 = bitcast i32 %184 to float, !dbg !46
  %186 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %167, i1 %171, i32 0, i1 %171) #3, !dbg !46
  %187 = bitcast i32 %186 to float, !dbg !46
  %188 = fadd float %132, %173, !dbg !47
  %189 = fadd float %133, %175, !dbg !47
  %190 = fadd float %134, %177, !dbg !47
  %191 = fadd float %135, %179, !dbg !47
  %192 = fadd float %136, %181, !dbg !47
  %193 = fadd float %137, %183, !dbg !47
  %194 = fadd float %138, %185, !dbg !47
  %195 = fadd float %139, %187, !dbg !47
  %196 = add i32 %30, -1, !dbg !48
  %197 = add i32 %196, %28, !dbg !49
  %198 = add i32 %28, %31, !dbg !49
  %199 = add i32 %28, %32, !dbg !49
  %200 = add i32 %196, %29, !dbg !49
  %201 = add i32 %31, %29, !dbg !49
  %202 = add i32 %32, %29, !dbg !49
  %203 = sext i32 %197 to i64, !dbg !50
  %204 = getelementptr float, ptr addrspace(1) %0, i64 %203, !dbg !50
  %205 = sext i32 %198 to i64, !dbg !50
  %206 = getelementptr float, ptr addrspace(1) %0, i64 %205, !dbg !50
  %207 = sext i32 %199 to i64, !dbg !50
  %208 = getelementptr float, ptr addrspace(1) %0, i64 %207, !dbg !50
  %209 = sext i32 %200 to i64, !dbg !50
  %210 = getelementptr float, ptr addrspace(1) %0, i64 %209, !dbg !50
  %211 = sext i32 %201 to i64, !dbg !50
  %212 = getelementptr float, ptr addrspace(1) %0, i64 %211, !dbg !50
  %213 = sext i32 %202 to i64, !dbg !50
  %214 = getelementptr float, ptr addrspace(1) %0, i64 %213, !dbg !50
  %215 = add i32 %30, 7, !dbg !51
  %216 = icmp ult i32 %215, 71, !dbg !51
  %217 = and i1 %216, %88, !dbg !51
  %218 = and i1 %90, %216, !dbg !51
  %219 = and i1 %92, %216, !dbg !51
  %220 = and i1 %94, %216, !dbg !51
  %221 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %204, i1 %217, i32 0, i1 %217) #3, !dbg !52
  %222 = bitcast i32 %221 to float, !dbg !52
  %223 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %45, i1 %218, i32 0, i1 %218) #3, !dbg !52
  %224 = bitcast i32 %223 to float, !dbg !52
  %225 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %206, i1 %219, i32 0, i1 %219) #3, !dbg !52
  %226 = bitcast i32 %225 to float, !dbg !52
  %227 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %208, i1 %220, i32 0, i1 %220) #3, !dbg !52
  %228 = bitcast i32 %227 to float, !dbg !52
  %229 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %210, i1 %217, i32 0, i1 %217) #3, !dbg !52
  %230 = bitcast i32 %229 to float, !dbg !52
  %231 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %47, i1 %218, i32 0, i1 %218) #3, !dbg !52
  %232 = bitcast i32 %231 to float, !dbg !52
  %233 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %212, i1 %219, i32 0, i1 %219) #3, !dbg !52
  %234 = bitcast i32 %233 to float, !dbg !52
  %235 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %214, i1 %220, i32 0, i1 %220) #3, !dbg !52
  %236 = bitcast i32 %235 to float, !dbg !52
  %237 = fadd float %188, %222, !dbg !53
  %238 = fadd float %189, %224, !dbg !53
  %239 = fadd float %190, %226, !dbg !53
  %240 = fadd float %191, %228, !dbg !53
  %241 = fadd float %192, %230, !dbg !53
  %242 = fadd float %193, %232, !dbg !53
  %243 = fadd float %194, %234, !dbg !53
  %244 = fadd float %195, %236, !dbg !53
  %245 = and i1 %216, %112, !dbg !54
  %246 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %45, i1 %245, i32 0, i1 %245, i32 0, i1 %245, i32 0, i1 %245, i32 0, i1 %245) #3, !dbg !55
  %247 = extractvalue { i32, i32, i32, i32 } %246, 0, !dbg !55
  %248 = extractvalue { i32, i32, i32, i32 } %246, 1, !dbg !55
  %249 = extractvalue { i32, i32, i32, i32 } %246, 2, !dbg !55
  %250 = extractvalue { i32, i32, i32, i32 } %246, 3, !dbg !55
  %251 = bitcast i32 %247 to float, !dbg !55
  %252 = bitcast i32 %248 to float, !dbg !55
  %253 = bitcast i32 %249 to float, !dbg !55
  %254 = bitcast i32 %250 to float, !dbg !55
  %255 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %47, i1 %245, i32 0, i1 %245, i32 0, i1 %245, i32 0, i1 %245, i32 0, i1 %245) #3, !dbg !55
  %256 = extractvalue { i32, i32, i32, i32 } %255, 0, !dbg !55
  %257 = extractvalue { i32, i32, i32, i32 } %255, 1, !dbg !55
  %258 = extractvalue { i32, i32, i32, i32 } %255, 2, !dbg !55
  %259 = extractvalue { i32, i32, i32, i32 } %255, 3, !dbg !55
  %260 = bitcast i32 %256 to float, !dbg !55
  %261 = bitcast i32 %257 to float, !dbg !55
  %262 = bitcast i32 %258 to float, !dbg !55
  %263 = bitcast i32 %259 to float, !dbg !55
  %264 = fadd float %237, %251, !dbg !56
  %265 = fadd float %238, %252, !dbg !56
  %266 = fadd float %239, %253, !dbg !56
  %267 = fadd float %240, %254, !dbg !56
  %268 = fadd float %241, %260, !dbg !56
  %269 = fadd float %242, %261, !dbg !56
  %270 = fadd float %243, %262, !dbg !56
  %271 = fadd float %244, %263, !dbg !56
  %272 = add i32 %30, 4, !dbg !57
  %273 = add i32 %28, %33, !dbg !58
  %274 = add i32 %28, %272, !dbg !58
  %275 = add i32 %33, %29, !dbg !58
  %276 = add i32 %272, %29, !dbg !58
  %277 = sext i32 %273 to i64, !dbg !59
  %278 = getelementptr float, ptr addrspace(1) %0, i64 %277, !dbg !59
  %279 = sext i32 %274 to i64, !dbg !59
  %280 = getelementptr float, ptr addrspace(1) %0, i64 %279, !dbg !59
  %281 = sext i32 %275 to i64, !dbg !59
  %282 = getelementptr float, ptr addrspace(1) %0, i64 %281, !dbg !59
  %283 = sext i32 %276 to i64, !dbg !59
  %284 = getelementptr float, ptr addrspace(1) %0, i64 %283, !dbg !59
  %285 = and i1 %216, %146, !dbg !60
  %286 = and i1 %148, %216, !dbg !60
  %287 = and i1 %150, %216, !dbg !60
  %288 = and i1 %153, %216, !dbg !60
  %289 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %206, i1 %285, i32 0, i1 %285) #3, !dbg !61
  %290 = bitcast i32 %289 to float, !dbg !61
  %291 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %208, i1 %286, i32 0, i1 %286) #3, !dbg !61
  %292 = bitcast i32 %291 to float, !dbg !61
  %293 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %278, i1 %287, i32 0, i1 %287) #3, !dbg !61
  %294 = bitcast i32 %293 to float, !dbg !61
  %295 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %280, i1 %288, i32 0, i1 %288) #3, !dbg !61
  %296 = bitcast i32 %295 to float, !dbg !61
  %297 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %212, i1 %285, i32 0, i1 %285) #3, !dbg !61
  %298 = bitcast i32 %297 to float, !dbg !61
  %299 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %214, i1 %286, i32 0, i1 %286) #3, !dbg !61
  %300 = bitcast i32 %299 to float, !dbg !61
  %301 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %282, i1 %287, i32 0, i1 %287) #3, !dbg !61
  %302 = bitcast i32 %301 to float, !dbg !61
  %303 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %284, i1 %288, i32 0, i1 %288) #3, !dbg !61
  %304 = bitcast i32 %303 to float, !dbg !61
  %305 = fadd float %264, %290, !dbg !62
  %306 = fadd float %265, %292, !dbg !62
  %307 = fadd float %266, %294, !dbg !62
  %308 = fadd float %267, %296, !dbg !62
  %309 = fadd float %268, %298, !dbg !62
  %310 = fadd float %269, %300, !dbg !62
  %311 = fadd float %270, %302, !dbg !62
  %312 = fadd float %271, %304, !dbg !62
  %313 = add i32 %30, 8, !dbg !63
  %314 = add i32 %30, 9, !dbg !63
  %315 = add i32 %30, 10, !dbg !63
  %316 = add i32 %215, %28, !dbg !64
  %317 = add i32 %28, %313, !dbg !64
  %318 = add i32 %28, %314, !dbg !64
  %319 = add i32 %28, %315, !dbg !64
  %320 = add i32 %215, %29, !dbg !64
  %321 = add i32 %313, %29, !dbg !64
  %322 = add i32 %314, %29, !dbg !64
  %323 = add i32 %315, %29, !dbg !64
  %324 = sext i32 %316 to i64, !dbg !65
  %325 = getelementptr float, ptr addrspace(1) %0, i64 %324, !dbg !65
  %326 = sext i32 %317 to i64, !dbg !65
  %327 = getelementptr float, ptr addrspace(1) %0, i64 %326, !dbg !65
  %328 = sext i32 %318 to i64, !dbg !65
  %329 = getelementptr float, ptr addrspace(1) %0, i64 %328, !dbg !65
  %330 = sext i32 %319 to i64, !dbg !65
  %331 = getelementptr float, ptr addrspace(1) %0, i64 %330, !dbg !65
  %332 = sext i32 %320 to i64, !dbg !65
  %333 = getelementptr float, ptr addrspace(1) %0, i64 %332, !dbg !65
  %334 = sext i32 %321 to i64, !dbg !65
  %335 = getelementptr float, ptr addrspace(1) %0, i64 %334, !dbg !65
  %336 = sext i32 %322 to i64, !dbg !65
  %337 = getelementptr float, ptr addrspace(1) %0, i64 %336, !dbg !65
  %338 = sext i32 %323 to i64, !dbg !65
  %339 = getelementptr float, ptr addrspace(1) %0, i64 %338, !dbg !65
  %340 = add i32 %30, 15, !dbg !32
  %341 = icmp ult i32 %340, 71, !dbg !32
  %342 = and i1 %341, %88, !dbg !32
  %343 = and i1 %90, %341, !dbg !32
  %344 = and i1 %92, %341, !dbg !32
  %345 = and i1 %94, %341, !dbg !32
  %346 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %325, i1 %342, i32 0, i1 %342) #3, !dbg !66
  %347 = bitcast i32 %346 to float, !dbg !66
  %348 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %327, i1 %343, i32 0, i1 %343) #3, !dbg !66
  %349 = bitcast i32 %348 to float, !dbg !66
  %350 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %329, i1 %344, i32 0, i1 %344) #3, !dbg !66
  %351 = bitcast i32 %350 to float, !dbg !66
  %352 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %331, i1 %345, i32 0, i1 %345) #3, !dbg !66
  %353 = bitcast i32 %352 to float, !dbg !66
  %354 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %333, i1 %342, i32 0, i1 %342) #3, !dbg !66
  %355 = bitcast i32 %354 to float, !dbg !66
  %356 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %335, i1 %343, i32 0, i1 %343) #3, !dbg !66
  %357 = bitcast i32 %356 to float, !dbg !66
  %358 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %337, i1 %344, i32 0, i1 %344) #3, !dbg !66
  %359 = bitcast i32 %358 to float, !dbg !66
  %360 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %339, i1 %345, i32 0, i1 %345) #3, !dbg !66
  %361 = bitcast i32 %360 to float, !dbg !66
  %362 = fadd float %305, %347, !dbg !67
  %363 = fadd float %306, %349, !dbg !67
  %364 = fadd float %307, %351, !dbg !67
  %365 = fadd float %308, %353, !dbg !67
  %366 = fadd float %309, %355, !dbg !67
  %367 = fadd float %310, %357, !dbg !67
  %368 = fadd float %311, %359, !dbg !67
  %369 = fadd float %312, %361, !dbg !67
  %370 = and i1 %341, %112, !dbg !68
  %371 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %327, i1 %370, i32 0, i1 %370, i32 0, i1 %370, i32 0, i1 %370, i32 0, i1 %370) #3, !dbg !69
  %372 = extractvalue { i32, i32, i32, i32 } %371, 0, !dbg !69
  %373 = extractvalue { i32, i32, i32, i32 } %371, 1, !dbg !69
  %374 = extractvalue { i32, i32, i32, i32 } %371, 2, !dbg !69
  %375 = extractvalue { i32, i32, i32, i32 } %371, 3, !dbg !69
  %376 = bitcast i32 %372 to float, !dbg !69
  %377 = bitcast i32 %373 to float, !dbg !69
  %378 = bitcast i32 %374 to float, !dbg !69
  %379 = bitcast i32 %375 to float, !dbg !69
  %380 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %335, i1 %370, i32 0, i1 %370, i32 0, i1 %370, i32 0, i1 %370, i32 0, i1 %370) #3, !dbg !69
  %381 = extractvalue { i32, i32, i32, i32 } %380, 0, !dbg !69
  %382 = extractvalue { i32, i32, i32, i32 } %380, 1, !dbg !69
  %383 = extractvalue { i32, i32, i32, i32 } %380, 2, !dbg !69
  %384 = extractvalue { i32, i32, i32, i32 } %380, 3, !dbg !69
  %385 = bitcast i32 %381 to float, !dbg !69
  %386 = bitcast i32 %382 to float, !dbg !69
  %387 = bitcast i32 %383 to float, !dbg !69
  %388 = bitcast i32 %384 to float, !dbg !69
  %389 = fadd float %362, %376, !dbg !70
  %390 = fadd float %363, %377, !dbg !70
  %391 = fadd float %364, %378, !dbg !70
  %392 = fadd float %365, %379, !dbg !70
  %393 = fadd float %366, %385, !dbg !70
  %394 = fadd float %367, %386, !dbg !70
  %395 = fadd float %368, %387, !dbg !70
  %396 = fadd float %369, %388, !dbg !70
  %397 = add i32 %30, 11, !dbg !71
  %398 = add i32 %30, 12, !dbg !71
  %399 = add i32 %28, %397, !dbg !72
  %400 = add i32 %28, %398, !dbg !72
  %401 = add i32 %397, %29, !dbg !72
  %402 = add i32 %398, %29, !dbg !72
  %403 = sext i32 %399 to i64, !dbg !73
  %404 = getelementptr float, ptr addrspace(1) %0, i64 %403, !dbg !73
  %405 = sext i32 %400 to i64, !dbg !73
  %406 = getelementptr float, ptr addrspace(1) %0, i64 %405, !dbg !73
  %407 = sext i32 %401 to i64, !dbg !73
  %408 = getelementptr float, ptr addrspace(1) %0, i64 %407, !dbg !73
  %409 = sext i32 %402 to i64, !dbg !73
  %410 = getelementptr float, ptr addrspace(1) %0, i64 %409, !dbg !73
  %411 = and i1 %341, %146, !dbg !74
  %412 = and i1 %148, %341, !dbg !74
  %413 = and i1 %150, %341, !dbg !74
  %414 = and i1 %153, %341, !dbg !74
  %415 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %329, i1 %411, i32 0, i1 %411) #3, !dbg !75
  %416 = bitcast i32 %415 to float, !dbg !75
  %417 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %331, i1 %412, i32 0, i1 %412) #3, !dbg !75
  %418 = bitcast i32 %417 to float, !dbg !75
  %419 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %404, i1 %413, i32 0, i1 %413) #3, !dbg !75
  %420 = bitcast i32 %419 to float, !dbg !75
  %421 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %406, i1 %414, i32 0, i1 %414) #3, !dbg !75
  %422 = bitcast i32 %421 to float, !dbg !75
  %423 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %337, i1 %411, i32 0, i1 %411) #3, !dbg !75
  %424 = bitcast i32 %423 to float, !dbg !75
  %425 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %339, i1 %412, i32 0, i1 %412) #3, !dbg !75
  %426 = bitcast i32 %425 to float, !dbg !75
  %427 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %408, i1 %413, i32 0, i1 %413) #3, !dbg !75
  %428 = bitcast i32 %427 to float, !dbg !75
  %429 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %410, i1 %414, i32 0, i1 %414) #3, !dbg !75
  %430 = bitcast i32 %429 to float, !dbg !75
  %431 = fadd float %389, %416, !dbg !76
  %432 = fadd float %390, %418, !dbg !76
  %433 = fadd float %391, %420, !dbg !76
  %434 = fadd float %392, %422, !dbg !76
  %435 = fadd float %393, %424, !dbg !76
  %436 = fadd float %394, %426, !dbg !76
  %437 = fadd float %395, %428, !dbg !76
  %438 = fadd float %396, %430, !dbg !76
  %439 = or disjoint i32 %140, 2, !dbg !77
  %440 = or disjoint i32 %147, 2, !dbg !77
  %441 = add nsw i32 %142, 2, !dbg !77
  %442 = add nsw i32 %151, 2, !dbg !77
  %443 = extractelement <8 x i1> %87, i64 1, !dbg !78
  %444 = select i1 %443, i32 9, i32 0, !dbg !78
  %445 = extractelement <8 x i1> %87, i64 0, !dbg !78
  %446 = select i1 %445, i32 9, i32 0, !dbg !78
  %447 = icmp slt i32 %142, 7, !dbg !79
  %448 = icmp slt i32 %151, 7, !dbg !79
  %449 = select i1 %447, i32 %441, i32 0, !dbg !80
  %450 = select i1 %448, i32 %442, i32 0, !dbg !80
  %451 = tail call i32 @llvm.smin.i32(i32 %439, i32 9), !dbg !81
  %452 = tail call i32 @llvm.smin.i32(i32 %440, i32 9), !dbg !81
  %453 = add nsw i32 %444, %449, !dbg !81
  %454 = add nsw i32 %446, %450, !dbg !81
  %455 = add nsw i32 %35, 2, !dbg !82
  %456 = icmp sgt i32 %30, 55, !dbg !83
  %457 = select i1 %456, i32 9, i32 0, !dbg !84
  %458 = icmp slt i32 %30, 56, !dbg !85
  %459 = select i1 %458, i32 %455, i32 0, !dbg !86
  %460 = add nsw i32 %459, %457, !dbg !87
  %reass.add = sub nsw i32 %460, %35
  %reass.mul = mul i32 %reass.add, %451
  %reass.add54 = sub nsw i32 %35, %460
  %reass.mul55 = mul i32 %reass.add54, %140
  %461 = add nsw i32 %35, %140, !dbg !38
  %reass.sub = sub i32 %451, %461, !dbg !40
  %462 = add i32 %reass.sub, 1, !dbg !40
  %463 = add i32 %462, %460, !dbg !88
  %464 = add i32 %463, %reass.mul, !dbg !89
  %465 = add i32 %464, %reass.mul55, !dbg !90
  %reass.mul49 = mul i32 %reass.add, %452
  %reass.mul57 = mul i32 %reass.add54, %147
  %reass.sub62 = sub i32 %452, %147, !dbg !38
  %466 = or disjoint i32 %reass.sub62, 1, !dbg !38
  %467 = sub i32 %466, %35, !dbg !40
  %468 = add i32 %467, %460, !dbg !88
  %469 = add i32 %468, %reass.mul49, !dbg !89
  %470 = add i32 %469, %reass.mul57, !dbg !90
  %reass.mul51 = mul i32 %reass.add, %453
  %reass.mul59 = mul i32 %reass.add54, %142
  %471 = add nsw i32 %453, 1, !dbg !40
  %472 = add nsw i32 %142, %35, !dbg !40
  %473 = sub nsw i32 %471, %472, !dbg !40
  %474 = add nsw i32 %473, %460, !dbg !88
  %475 = add i32 %474, %reass.mul51, !dbg !89
  %476 = add i32 %475, %reass.mul59, !dbg !90
  %reass.mul53 = mul i32 %reass.add, %454
  %reass.mul61 = mul i32 %reass.add54, %151
  %477 = add nsw i32 %454, 1, !dbg !40
  %478 = add nsw i32 %151, %35, !dbg !40
  %479 = sub nsw i32 %477, %478, !dbg !40
  %480 = add nsw i32 %479, %460, !dbg !88
  %481 = add i32 %480, %reass.mul53, !dbg !89
  %482 = add i32 %481, %reass.mul61, !dbg !90
  %483 = sitofp i32 %465 to float, !dbg !91
  %484 = sitofp i32 %470 to float, !dbg !91
  %485 = sitofp i32 %476 to float, !dbg !91
  %486 = sitofp i32 %482 to float, !dbg !91
  %487 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %431, float %483) #3, !dbg !91
  %488 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %432, float %484) #3, !dbg !91
  %489 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %433, float %485) #3, !dbg !91
  %490 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %434, float %486) #3, !dbg !91
  %491 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %435, float %483) #3, !dbg !91
  %492 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %436, float %484) #3, !dbg !91
  %493 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %437, float %485) #3, !dbg !91
  %494 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %438, float %486) #3, !dbg !91
  %495 = shl i32 %22, 11, !dbg !92
  %496 = shl i32 %23, 11, !dbg !92
  %497 = shl i32 %26, 17, !dbg !93
  %498 = add i32 %497, %.decomposed, !dbg !94
  %499 = add i32 %498, %495, !dbg !95
  %500 = add i32 %498, %496, !dbg !95
  %501 = sext i32 %499 to i64, !dbg !96
  %502 = getelementptr float, ptr addrspace(1) %1, i64 %501, !dbg !96
  %503 = sext i32 %500 to i64, !dbg !96
  %504 = getelementptr float, ptr addrspace(1) %1, i64 %503, !dbg !96
  %505 = shl i32 %10, 6, !dbg !97
  %506 = and i32 %505, 960, !dbg !97
  %507 = or disjoint i32 %506, %12, !dbg !97
  %508 = and i32 %13, 508, !dbg !97
  %509 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %506, !dbg !97
  %510 = getelementptr float, ptr addrspace(3) %509, i32 %507, !dbg !97
  %511 = insertelement <1 x i32> poison, i32 %49, i64 0, !dbg !97
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %510, <1 x i32> %511, i1 true) #3, !dbg !97
  %512 = or disjoint i32 %507, 16, !dbg !97
  %513 = lshr i32 %512, 2, !dbg !97
  %514 = and i32 %513, 244, !dbg !97
  %515 = getelementptr float, ptr addrspace(3) @global_smem, i32 %514, !dbg !97
  %516 = getelementptr float, ptr addrspace(3) %515, i32 %512, !dbg !97
  %517 = insertelement <1 x i32> poison, i32 %50, i64 0, !dbg !97
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %516, <1 x i32> %517, i1 true) #3, !dbg !97
  %518 = or disjoint i32 %507, 32, !dbg !97
  %519 = lshr i32 %518, 2, !dbg !97
  %520 = and i32 %519, 248, !dbg !97
  %521 = getelementptr float, ptr addrspace(3) @global_smem, i32 %520, !dbg !97
  %522 = getelementptr float, ptr addrspace(3) %521, i32 %518, !dbg !97
  %523 = insertelement <1 x i32> poison, i32 %51, i64 0, !dbg !97
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %522, <1 x i32> %523, i1 true) #3, !dbg !97
  %524 = or disjoint i32 %507, 48, !dbg !97
  %525 = lshr i32 %524, 2, !dbg !97
  %526 = and i32 %525, 252, !dbg !97
  %527 = getelementptr float, ptr addrspace(3) @global_smem, i32 %526, !dbg !97
  %528 = getelementptr float, ptr addrspace(3) %527, i32 %524, !dbg !97
  %529 = insertelement <1 x i32> poison, i32 %52, i64 0, !dbg !97
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %528, <1 x i32> %529, i1 true) #3, !dbg !97
  %530 = or disjoint i32 %507, 8, !dbg !97
  %531 = getelementptr float, ptr addrspace(3) %509, i32 %530, !dbg !97
  %532 = insertelement <1 x i32> poison, i32 %54, i64 0, !dbg !97
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %531, <1 x i32> %532, i1 true) #3, !dbg !97
  %533 = or disjoint i32 %507, 24, !dbg !97
  %534 = lshr i32 %533, 2, !dbg !97
  %535 = and i32 %534, 244, !dbg !97
  %536 = getelementptr float, ptr addrspace(3) @global_smem, i32 %535, !dbg !97
  %537 = getelementptr float, ptr addrspace(3) %536, i32 %533, !dbg !97
  %538 = insertelement <1 x i32> poison, i32 %55, i64 0, !dbg !97
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %537, <1 x i32> %538, i1 true) #3, !dbg !97
  %539 = or disjoint i32 %507, 40, !dbg !97
  %540 = lshr i32 %539, 2, !dbg !97
  %541 = and i32 %540, 248, !dbg !97
  %542 = getelementptr float, ptr addrspace(3) @global_smem, i32 %541, !dbg !97
  %543 = getelementptr float, ptr addrspace(3) %542, i32 %539, !dbg !97
  %544 = insertelement <1 x i32> poison, i32 %56, i64 0, !dbg !97
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %543, <1 x i32> %544, i1 true) #3, !dbg !97
  %545 = or disjoint i32 %507, 56, !dbg !97
  %546 = lshr i32 %545, 2, !dbg !97
  %547 = and i32 %546, 252, !dbg !97
  %548 = getelementptr float, ptr addrspace(3) @global_smem, i32 %547, !dbg !97
  %549 = getelementptr float, ptr addrspace(3) %548, i32 %545, !dbg !97
  %550 = insertelement <1 x i32> poison, i32 %57, i64 0, !dbg !97
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %549, <1 x i32> %550, i1 true) #3, !dbg !97
  tail call void @llvm.nvvm.barrier0(), !dbg !97
  %551 = and i32 %10, 124, !dbg !97
  %552 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %551, !dbg !97
  %553 = getelementptr inbounds float, ptr addrspace(3) %552, i32 %508, !dbg !97
  %554 = or disjoint i32 %508, 512, !dbg !97
  %555 = lshr exact i32 %554, 2, !dbg !97
  %556 = and i32 %555, 252, !dbg !97
  %557 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %556, !dbg !97
  %558 = getelementptr inbounds float, ptr addrspace(3) %557, i32 %554, !dbg !97
  %559 = load <4 x i32>, ptr addrspace(3) %558, align 16, !dbg !97
  %.extract = load i32, ptr addrspace(3) %553, align 16, !dbg !97
  %560 = getelementptr inbounds i8, ptr addrspace(3) %553, i32 4, !dbg !97
  %.extract15 = load i32, ptr addrspace(3) %560, align 4, !dbg !97
  %561 = getelementptr inbounds i8, ptr addrspace(3) %553, i32 8, !dbg !97
  %.extract16 = load i32, ptr addrspace(3) %561, align 8, !dbg !97
  %562 = getelementptr inbounds i8, ptr addrspace(3) %553, i32 12, !dbg !97
  %.extract17 = load i32, ptr addrspace(3) %562, align 4, !dbg !97
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract15, i32 %.extract16, i32 %.extract17, ptr addrspace(1) %502, i1 %24) #3, !dbg !97
  %.extract18 = extractelement <4 x i32> %559, i64 0, !dbg !97
  %.extract19 = extractelement <4 x i32> %559, i64 1, !dbg !97
  %.extract20 = extractelement <4 x i32> %559, i64 2, !dbg !97
  %.extract21 = extractelement <4 x i32> %559, i64 3, !dbg !97
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract18, i32 %.extract19, i32 %.extract20, i32 %.extract21, ptr addrspace(1) %504, i1 %25) #3, !dbg !97
  %563 = getelementptr float, ptr addrspace(1) %2, i64 %501, !dbg !98
  %564 = getelementptr float, ptr addrspace(1) %2, i64 %503, !dbg !98
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract15, i32 %.extract16, i32 %.extract17, ptr addrspace(1) %563, i1 %24) #3, !dbg !99
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract18, i32 %.extract19, i32 %.extract20, i32 %.extract21, ptr addrspace(1) %564, i1 %25) #3, !dbg !99
  %565 = getelementptr float, ptr addrspace(1) %3, i64 %501, !dbg !100
  %566 = getelementptr float, ptr addrspace(1) %3, i64 %503, !dbg !100
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract15, i32 %.extract16, i32 %.extract17, ptr addrspace(1) %565, i1 %24) #3, !dbg !101
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract18, i32 %.extract19, i32 %.extract20, i32 %.extract21, ptr addrspace(1) %566, i1 %25) #3, !dbg !101
  %567 = getelementptr float, ptr addrspace(1) %4, i64 %501, !dbg !102
  %568 = getelementptr float, ptr addrspace(1) %4, i64 %503, !dbg !102
  tail call void @llvm.nvvm.barrier0(), !dbg !103
  %569 = bitcast float %487 to <1 x i32>, !dbg !103
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %510, <1 x i32> %569, i1 true) #3, !dbg !103
  %570 = bitcast float %488 to <1 x i32>, !dbg !103
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %516, <1 x i32> %570, i1 true) #3, !dbg !103
  %571 = bitcast float %489 to <1 x i32>, !dbg !103
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %522, <1 x i32> %571, i1 true) #3, !dbg !103
  %572 = bitcast float %490 to <1 x i32>, !dbg !103
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %528, <1 x i32> %572, i1 true) #3, !dbg !103
  %573 = bitcast float %491 to <1 x i32>, !dbg !103
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %531, <1 x i32> %573, i1 true) #3, !dbg !103
  %574 = bitcast float %492 to <1 x i32>, !dbg !103
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %537, <1 x i32> %574, i1 true) #3, !dbg !103
  %575 = bitcast float %493 to <1 x i32>, !dbg !103
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %543, <1 x i32> %575, i1 true) #3, !dbg !103
  %576 = bitcast float %494 to <1 x i32>, !dbg !103
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %549, <1 x i32> %576, i1 true) #3, !dbg !103
  tail call void @llvm.nvvm.barrier0(), !dbg !103
  %577 = load <4 x i32>, ptr addrspace(3) %558, align 16, !dbg !103
  %.extract29 = load i32, ptr addrspace(3) %553, align 16, !dbg !103
  %.extract30 = load i32, ptr addrspace(3) %560, align 4, !dbg !103
  %.extract31 = load i32, ptr addrspace(3) %561, align 8, !dbg !103
  %.extract32 = load i32, ptr addrspace(3) %562, align 4, !dbg !103
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract29, i32 %.extract30, i32 %.extract31, i32 %.extract32, ptr addrspace(1) %567, i1 %24) #3, !dbg !103
  %.extract33 = extractelement <4 x i32> %577, i64 0, !dbg !103
  %.extract34 = extractelement <4 x i32> %577, i64 1, !dbg !103
  %.extract35 = extractelement <4 x i32> %577, i64 2, !dbg !103
  %.extract36 = extractelement <4 x i32> %577, i64 3, !dbg !103
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract33, i32 %.extract34, i32 %.extract35, i32 %.extract36, ptr addrspace(1) %568, i1 %25) #3, !dbg !103
  ret void, !dbg !104
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "czqpaohorn336szp7eaqcmk6opgxjio5vqavqxu5udfeidarmx32.py", directory: "inductor_cache/zq")
!4 = !{ptr @triton_poi_fused_avg_pool2d_convolution_53, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_avg_pool2d_convolution_53, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_avg_pool2d_convolution_53", linkageName: "triton_poi_fused_avg_pool2d_convolution_53", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 31, column: 19, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 34, column: 38, scope: !7)
!22 = !DILocation(line: 32, column: 19, scope: !7)
!23 = !DILocation(line: 33, column: 19, scope: !7)
!24 = !DILocation(line: 34, column: 35, scope: !7)
!25 = !DILocation(line: 34, column: 30, scope: !7)
!26 = !DILocation(line: 34, column: 43, scope: !7)
!27 = !DILocation(line: 46, column: 38, scope: !7)
!28 = !DILocation(line: 46, column: 43, scope: !7)
!29 = !DILocation(line: 46, column: 31, scope: !7)
!30 = !DILocation(line: 46, column: 59, scope: !7)
!31 = !DILocation(line: 87, column: 64, scope: !7)
!32 = !DILocation(line: 79, column: 56, scope: !7)
!33 = !DILocation(line: 46, column: 51, scope: !7)
!34 = !DILocation(line: 57, column: 20, scope: !7)
!35 = !DILocation(line: 52, column: 59, scope: !7)
!36 = !DILocation(line: 52, column: 51, scope: !7)
!37 = !DILocation(line: 53, column: 20, scope: !7)
!38 = !DILocation(line: 87, column: 48, scope: !7)
!39 = !DILocation(line: 54, column: 16, scope: !7)
!40 = !DILocation(line: 87, column: 163, scope: !7)
!41 = !DILocation(line: 56, column: 20, scope: !7)
!42 = !DILocation(line: 59, column: 38, scope: !7)
!43 = !DILocation(line: 59, column: 43, scope: !7)
!44 = !DILocation(line: 59, column: 31, scope: !7)
!45 = !DILocation(line: 59, column: 59, scope: !7)
!46 = !DILocation(line: 59, column: 51, scope: !7)
!47 = !DILocation(line: 60, column: 20, scope: !7)
!48 = !DILocation(line: 66, column: 38, scope: !7)
!49 = !DILocation(line: 66, column: 43, scope: !7)
!50 = !DILocation(line: 66, column: 31, scope: !7)
!51 = !DILocation(line: 66, column: 59, scope: !7)
!52 = !DILocation(line: 66, column: 51, scope: !7)
!53 = !DILocation(line: 67, column: 20, scope: !7)
!54 = !DILocation(line: 69, column: 52, scope: !7)
!55 = !DILocation(line: 69, column: 44, scope: !7)
!56 = !DILocation(line: 70, column: 20, scope: !7)
!57 = !DILocation(line: 72, column: 35, scope: !7)
!58 = !DILocation(line: 72, column: 40, scope: !7)
!59 = !DILocation(line: 72, column: 31, scope: !7)
!60 = !DILocation(line: 72, column: 56, scope: !7)
!61 = !DILocation(line: 72, column: 48, scope: !7)
!62 = !DILocation(line: 73, column: 20, scope: !7)
!63 = !DILocation(line: 79, column: 35, scope: !7)
!64 = !DILocation(line: 79, column: 40, scope: !7)
!65 = !DILocation(line: 79, column: 31, scope: !7)
!66 = !DILocation(line: 79, column: 48, scope: !7)
!67 = !DILocation(line: 80, column: 20, scope: !7)
!68 = !DILocation(line: 82, column: 56, scope: !7)
!69 = !DILocation(line: 82, column: 48, scope: !7)
!70 = !DILocation(line: 83, column: 20, scope: !7)
!71 = !DILocation(line: 85, column: 35, scope: !7)
!72 = !DILocation(line: 85, column: 40, scope: !7)
!73 = !DILocation(line: 85, column: 31, scope: !7)
!74 = !DILocation(line: 85, column: 56, scope: !7)
!75 = !DILocation(line: 85, column: 48, scope: !7)
!76 = !DILocation(line: 86, column: 20, scope: !7)
!77 = !DILocation(line: 87, column: 68, scope: !7)
!78 = !DILocation(line: 87, column: 56, scope: !7)
!79 = !DILocation(line: 87, column: 99, scope: !7)
!80 = !DILocation(line: 87, column: 87, scope: !7)
!81 = !DILocation(line: 87, column: 75, scope: !7)
!82 = !DILocation(line: 87, column: 124, scope: !7)
!83 = !DILocation(line: 87, column: 120, scope: !7)
!84 = !DILocation(line: 87, column: 112, scope: !7)
!85 = !DILocation(line: 87, column: 155, scope: !7)
!86 = !DILocation(line: 87, column: 143, scope: !7)
!87 = !DILocation(line: 87, column: 131, scope: !7)
!88 = !DILocation(line: 87, column: 231, scope: !7)
!89 = !DILocation(line: 87, column: 299, scope: !7)
!90 = !DILocation(line: 87, column: 357, scope: !7)
!91 = !DILocation(line: 88, column: 20, scope: !7)
!92 = !DILocation(line: 89, column: 35, scope: !7)
!93 = !DILocation(line: 89, column: 47, scope: !7)
!94 = !DILocation(line: 89, column: 30, scope: !7)
!95 = !DILocation(line: 89, column: 40, scope: !7)
!96 = !DILocation(line: 89, column: 25, scope: !7)
!97 = !DILocation(line: 89, column: 58, scope: !7)
!98 = !DILocation(line: 90, column: 25, scope: !7)
!99 = !DILocation(line: 90, column: 58, scope: !7)
!100 = !DILocation(line: 91, column: 25, scope: !7)
!101 = !DILocation(line: 91, column: 58, scope: !7)
!102 = !DILocation(line: 92, column: 25, scope: !7)
!103 = !DILocation(line: 92, column: 59, scope: !7)
!104 = !DILocation(line: 92, column: 4, scope: !7)
