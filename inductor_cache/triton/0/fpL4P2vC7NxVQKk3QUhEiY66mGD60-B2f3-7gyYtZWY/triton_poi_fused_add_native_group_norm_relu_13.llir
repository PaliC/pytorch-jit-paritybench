; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused_add_native_group_norm_relu_13(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, i32 %11) local_unnamed_addr !dbg !7 {
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %14 = shl i32 %13, 10, !dbg !11
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %16 = shl i32 %15, 2, !dbg !12
  %17 = and i32 %16, 508, !dbg !12
  %18 = or disjoint i32 %14, %17, !dbg !13
  %19 = or disjoint i32 %18, 1, !dbg !13
  %20 = or disjoint i32 %18, 2, !dbg !13
  %21 = or disjoint i32 %18, 3, !dbg !13
  %22 = or disjoint i32 %18, 512, !dbg !13
  %23 = srem i32 %18, 256, !dbg !14
  %24 = srem i32 %19, 256, !dbg !14
  %25 = srem i32 %20, 256, !dbg !14
  %26 = srem i32 %21, 256, !dbg !14
  %27 = sdiv i32 %18, 262144, !dbg !15
  %28 = sdiv i32 %22, 262144, !dbg !15
  %29 = sext i32 %18 to i64, !dbg !16
  %30 = getelementptr float, ptr addrspace(1) %1, i64 %29, !dbg !16
  %31 = sext i32 %22 to i64, !dbg !16
  %32 = getelementptr float, ptr addrspace(1) %1, i64 %31, !dbg !16
  %33 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %30, i1 true) #3, !dbg !17
  %34 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %32, i1 true) #3, !dbg !17
  %35 = shl nsw i32 %27, 3, !dbg !18
  %36 = shl nsw i32 %28, 3, !dbg !18
  %.lhs.trunc = trunc nsw i32 %23 to i16, !dbg !19
  %37 = sdiv i16 %.lhs.trunc, 32, !dbg !19
  %.sext = sext i16 %37 to i32, !dbg !19
  %.lhs.trunc46 = trunc nsw i32 %24 to i16, !dbg !19
  %38 = sdiv i16 %.lhs.trunc46, 32, !dbg !19
  %.sext47 = sext i16 %38 to i32, !dbg !19
  %.lhs.trunc48 = trunc nsw i32 %25 to i16, !dbg !19
  %39 = sdiv i16 %.lhs.trunc48, 32, !dbg !19
  %.sext49 = sext i16 %39 to i32, !dbg !19
  %.lhs.trunc50 = trunc nsw i32 %26 to i16, !dbg !19
  %40 = sdiv i16 %.lhs.trunc50, 32, !dbg !19
  %.sext51 = sext i16 %40 to i32, !dbg !19
  %41 = add nsw i32 %35, %.sext, !dbg !20
  %42 = add nsw i32 %35, %.sext47, !dbg !20
  %43 = add nsw i32 %35, %.sext49, !dbg !20
  %44 = add nsw i32 %35, %.sext51, !dbg !20
  %45 = add nsw i32 %36, %.sext, !dbg !20
  %46 = add nsw i32 %36, %.sext47, !dbg !20
  %47 = add nsw i32 %36, %.sext49, !dbg !20
  %48 = add nsw i32 %36, %.sext51, !dbg !20
  %49 = sext i32 %41 to i64, !dbg !21
  %50 = getelementptr float, ptr addrspace(1) %2, i64 %49, !dbg !21
  %51 = sext i32 %42 to i64, !dbg !21
  %52 = getelementptr float, ptr addrspace(1) %2, i64 %51, !dbg !21
  %53 = sext i32 %43 to i64, !dbg !21
  %54 = getelementptr float, ptr addrspace(1) %2, i64 %53, !dbg !21
  %55 = sext i32 %44 to i64, !dbg !21
  %56 = getelementptr float, ptr addrspace(1) %2, i64 %55, !dbg !21
  %57 = sext i32 %45 to i64, !dbg !21
  %58 = getelementptr float, ptr addrspace(1) %2, i64 %57, !dbg !21
  %59 = sext i32 %46 to i64, !dbg !21
  %60 = getelementptr float, ptr addrspace(1) %2, i64 %59, !dbg !21
  %61 = sext i32 %47 to i64, !dbg !21
  %62 = getelementptr float, ptr addrspace(1) %2, i64 %61, !dbg !21
  %63 = sext i32 %48 to i64, !dbg !21
  %64 = getelementptr float, ptr addrspace(1) %2, i64 %63, !dbg !21
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 true) #3, !dbg !22
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 true) #3, !dbg !22
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 true) #3, !dbg !22
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 true) #3, !dbg !22
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 true) #3, !dbg !22
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 true) #3, !dbg !22
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 true) #3, !dbg !22
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 true) #3, !dbg !22
  %73 = getelementptr float, ptr addrspace(1) %3, i64 %49, !dbg !23
  %74 = getelementptr float, ptr addrspace(1) %3, i64 %51, !dbg !23
  %75 = getelementptr float, ptr addrspace(1) %3, i64 %53, !dbg !23
  %76 = getelementptr float, ptr addrspace(1) %3, i64 %55, !dbg !23
  %77 = getelementptr float, ptr addrspace(1) %3, i64 %57, !dbg !23
  %78 = getelementptr float, ptr addrspace(1) %3, i64 %59, !dbg !23
  %79 = getelementptr float, ptr addrspace(1) %3, i64 %61, !dbg !23
  %80 = getelementptr float, ptr addrspace(1) %3, i64 %63, !dbg !23
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 true) #3, !dbg !24
  %82 = bitcast i32 %81 to float, !dbg !24
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 true) #3, !dbg !24
  %84 = bitcast i32 %83 to float, !dbg !24
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 true) #3, !dbg !24
  %86 = bitcast i32 %85 to float, !dbg !24
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 true) #3, !dbg !24
  %88 = bitcast i32 %87 to float, !dbg !24
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 true) #3, !dbg !24
  %90 = bitcast i32 %89 to float, !dbg !24
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 true) #3, !dbg !24
  %92 = bitcast i32 %91 to float, !dbg !24
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %79, i1 true) #3, !dbg !24
  %94 = bitcast i32 %93 to float, !dbg !24
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %80, i1 true) #3, !dbg !24
  %96 = bitcast i32 %95 to float, !dbg !24
  %97 = sext i32 %23 to i64, !dbg !25
  %98 = getelementptr float, ptr addrspace(1) %4, i64 %97, !dbg !25
  %99 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %98, i1 true) #3, !dbg !26
  %100 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %98, i1 true) #3, !dbg !26
  %101 = getelementptr float, ptr addrspace(1) %5, i64 %97, !dbg !27
  %102 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %101, i1 true) #3, !dbg !28
  %103 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %101, i1 true) #3, !dbg !28
  %104 = getelementptr float, ptr addrspace(1) %6, i64 %29, !dbg !29
  %105 = getelementptr float, ptr addrspace(1) %6, i64 %31, !dbg !29
  %106 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %104, i1 true) #3, !dbg !30
  %107 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %105, i1 true) #3, !dbg !30
  %108 = getelementptr float, ptr addrspace(1) %7, i64 %49, !dbg !31
  %109 = getelementptr float, ptr addrspace(1) %7, i64 %51, !dbg !31
  %110 = getelementptr float, ptr addrspace(1) %7, i64 %53, !dbg !31
  %111 = getelementptr float, ptr addrspace(1) %7, i64 %55, !dbg !31
  %112 = getelementptr float, ptr addrspace(1) %7, i64 %57, !dbg !31
  %113 = getelementptr float, ptr addrspace(1) %7, i64 %59, !dbg !31
  %114 = getelementptr float, ptr addrspace(1) %7, i64 %61, !dbg !31
  %115 = getelementptr float, ptr addrspace(1) %7, i64 %63, !dbg !31
  %116 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %108, i1 true) #3, !dbg !32
  %117 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %109, i1 true) #3, !dbg !32
  %118 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %110, i1 true) #3, !dbg !32
  %119 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %111, i1 true) #3, !dbg !32
  %120 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %112, i1 true) #3, !dbg !32
  %121 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %113, i1 true) #3, !dbg !32
  %122 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %114, i1 true) #3, !dbg !32
  %123 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %115, i1 true) #3, !dbg !32
  %124 = getelementptr float, ptr addrspace(1) %8, i64 %49, !dbg !33
  %125 = getelementptr float, ptr addrspace(1) %8, i64 %51, !dbg !33
  %126 = getelementptr float, ptr addrspace(1) %8, i64 %53, !dbg !33
  %127 = getelementptr float, ptr addrspace(1) %8, i64 %55, !dbg !33
  %128 = getelementptr float, ptr addrspace(1) %8, i64 %57, !dbg !33
  %129 = getelementptr float, ptr addrspace(1) %8, i64 %59, !dbg !33
  %130 = getelementptr float, ptr addrspace(1) %8, i64 %61, !dbg !33
  %131 = getelementptr float, ptr addrspace(1) %8, i64 %63, !dbg !33
  %132 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %124, i1 true) #3, !dbg !34
  %133 = bitcast i32 %132 to float, !dbg !34
  %134 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %125, i1 true) #3, !dbg !34
  %135 = bitcast i32 %134 to float, !dbg !34
  %136 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %126, i1 true) #3, !dbg !34
  %137 = bitcast i32 %136 to float, !dbg !34
  %138 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %127, i1 true) #3, !dbg !34
  %139 = bitcast i32 %138 to float, !dbg !34
  %140 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %128, i1 true) #3, !dbg !34
  %141 = bitcast i32 %140 to float, !dbg !34
  %142 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %129, i1 true) #3, !dbg !34
  %143 = bitcast i32 %142 to float, !dbg !34
  %144 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %130, i1 true) #3, !dbg !34
  %145 = bitcast i32 %144 to float, !dbg !34
  %146 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %131, i1 true) #3, !dbg !34
  %147 = bitcast i32 %146 to float, !dbg !34
  %148 = getelementptr float, ptr addrspace(1) %9, i64 %97, !dbg !35
  %149 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %148, i1 true) #3, !dbg !36
  %150 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %148, i1 true) #3, !dbg !36
  %151 = getelementptr float, ptr addrspace(1) %10, i64 %97, !dbg !37
  %152 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %151, i1 true) #3, !dbg !38
  %153 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %151, i1 true) #3, !dbg !38
  %154 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %82, float 3.276800e+04) #3, !dbg !39
  %155 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %84, float 3.276800e+04) #3, !dbg !39
  %156 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %86, float 3.276800e+04) #3, !dbg !39
  %157 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %88, float 3.276800e+04) #3, !dbg !39
  %158 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %90, float 3.276800e+04) #3, !dbg !39
  %159 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %92, float 3.276800e+04) #3, !dbg !39
  %160 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %94, float 3.276800e+04) #3, !dbg !39
  %161 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %96, float 3.276800e+04) #3, !dbg !39
  %162 = fadd float %154, 0x3EE4F8B580000000, !dbg !40
  %163 = fadd float %155, 0x3EE4F8B580000000, !dbg !40
  %164 = fadd float %156, 0x3EE4F8B580000000, !dbg !40
  %165 = fadd float %157, 0x3EE4F8B580000000, !dbg !40
  %166 = fadd float %158, 0x3EE4F8B580000000, !dbg !40
  %167 = fadd float %159, 0x3EE4F8B580000000, !dbg !40
  %168 = fadd float %160, 0x3EE4F8B580000000, !dbg !40
  %169 = fadd float %161, 0x3EE4F8B580000000, !dbg !40
  %170 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !41
  %.not.i = icmp eq i32 %170, 0, !dbg !41
  br i1 %.not.i, label %173, label %171, !dbg !41

171:                                              ; preds = %12
  %172 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %162), !dbg !41
  br label %__nv_rsqrtf.exit, !dbg !41

173:                                              ; preds = %12
  %174 = tail call float @llvm.nvvm.rsqrt.approx.f(float %162), !dbg !41
  br label %__nv_rsqrtf.exit, !dbg !41

__nv_rsqrtf.exit:                                 ; preds = %171, %173
  %.0.i = phi float [ %172, %171 ], [ %174, %173 ], !dbg !41
  %175 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !41
  %.not.i1 = icmp eq i32 %175, 0, !dbg !41
  br i1 %.not.i1, label %178, label %176, !dbg !41

176:                                              ; preds = %__nv_rsqrtf.exit
  %177 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %163), !dbg !41
  br label %__nv_rsqrtf.exit3, !dbg !41

178:                                              ; preds = %__nv_rsqrtf.exit
  %179 = tail call float @llvm.nvvm.rsqrt.approx.f(float %163), !dbg !41
  br label %__nv_rsqrtf.exit3, !dbg !41

__nv_rsqrtf.exit3:                                ; preds = %176, %178
  %.0.i2 = phi float [ %177, %176 ], [ %179, %178 ], !dbg !41
  %180 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !41
  %.not.i4 = icmp eq i32 %180, 0, !dbg !41
  br i1 %.not.i4, label %183, label %181, !dbg !41

181:                                              ; preds = %__nv_rsqrtf.exit3
  %182 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %164), !dbg !41
  br label %__nv_rsqrtf.exit6, !dbg !41

183:                                              ; preds = %__nv_rsqrtf.exit3
  %184 = tail call float @llvm.nvvm.rsqrt.approx.f(float %164), !dbg !41
  br label %__nv_rsqrtf.exit6, !dbg !41

__nv_rsqrtf.exit6:                                ; preds = %181, %183
  %.0.i5 = phi float [ %182, %181 ], [ %184, %183 ], !dbg !41
  %185 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !41
  %.not.i7 = icmp eq i32 %185, 0, !dbg !41
  br i1 %.not.i7, label %188, label %186, !dbg !41

186:                                              ; preds = %__nv_rsqrtf.exit6
  %187 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %165), !dbg !41
  br label %__nv_rsqrtf.exit9, !dbg !41

188:                                              ; preds = %__nv_rsqrtf.exit6
  %189 = tail call float @llvm.nvvm.rsqrt.approx.f(float %165), !dbg !41
  br label %__nv_rsqrtf.exit9, !dbg !41

__nv_rsqrtf.exit9:                                ; preds = %186, %188
  %.0.i8 = phi float [ %187, %186 ], [ %189, %188 ], !dbg !41
  %190 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !41
  %.not.i10 = icmp eq i32 %190, 0, !dbg !41
  br i1 %.not.i10, label %193, label %191, !dbg !41

191:                                              ; preds = %__nv_rsqrtf.exit9
  %192 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %166), !dbg !41
  br label %__nv_rsqrtf.exit12, !dbg !41

193:                                              ; preds = %__nv_rsqrtf.exit9
  %194 = tail call float @llvm.nvvm.rsqrt.approx.f(float %166), !dbg !41
  br label %__nv_rsqrtf.exit12, !dbg !41

__nv_rsqrtf.exit12:                               ; preds = %191, %193
  %.0.i11 = phi float [ %192, %191 ], [ %194, %193 ], !dbg !41
  %195 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !41
  %.not.i13 = icmp eq i32 %195, 0, !dbg !41
  br i1 %.not.i13, label %198, label %196, !dbg !41

196:                                              ; preds = %__nv_rsqrtf.exit12
  %197 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %167), !dbg !41
  br label %__nv_rsqrtf.exit15, !dbg !41

198:                                              ; preds = %__nv_rsqrtf.exit12
  %199 = tail call float @llvm.nvvm.rsqrt.approx.f(float %167), !dbg !41
  br label %__nv_rsqrtf.exit15, !dbg !41

__nv_rsqrtf.exit15:                               ; preds = %196, %198
  %.0.i14 = phi float [ %197, %196 ], [ %199, %198 ], !dbg !41
  %200 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !41
  %.not.i16 = icmp eq i32 %200, 0, !dbg !41
  br i1 %.not.i16, label %203, label %201, !dbg !41

201:                                              ; preds = %__nv_rsqrtf.exit15
  %202 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %168), !dbg !41
  br label %__nv_rsqrtf.exit18, !dbg !41

203:                                              ; preds = %__nv_rsqrtf.exit15
  %204 = tail call float @llvm.nvvm.rsqrt.approx.f(float %168), !dbg !41
  br label %__nv_rsqrtf.exit18, !dbg !41

__nv_rsqrtf.exit18:                               ; preds = %201, %203
  %.0.i17 = phi float [ %202, %201 ], [ %204, %203 ], !dbg !41
  %205 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !41
  %.not.i19 = icmp eq i32 %205, 0, !dbg !41
  br i1 %.not.i19, label %208, label %206, !dbg !41

206:                                              ; preds = %__nv_rsqrtf.exit18
  %207 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %169), !dbg !41
  br label %__nv_rsqrtf.exit21, !dbg !41

208:                                              ; preds = %__nv_rsqrtf.exit18
  %209 = tail call float @llvm.nvvm.rsqrt.approx.f(float %169), !dbg !41
  br label %__nv_rsqrtf.exit21, !dbg !41

__nv_rsqrtf.exit21:                               ; preds = %206, %208
  %.0.i20 = phi float [ %207, %206 ], [ %209, %208 ], !dbg !41
  %210 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %133, float 3.276800e+04) #3, !dbg !42
  %211 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %135, float 3.276800e+04) #3, !dbg !42
  %212 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %137, float 3.276800e+04) #3, !dbg !42
  %213 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %139, float 3.276800e+04) #3, !dbg !42
  %214 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %141, float 3.276800e+04) #3, !dbg !42
  %215 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %143, float 3.276800e+04) #3, !dbg !42
  %216 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %145, float 3.276800e+04) #3, !dbg !42
  %217 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %147, float 3.276800e+04) #3, !dbg !42
  %218 = fadd float %210, 0x3EE4F8B580000000, !dbg !43
  %219 = fadd float %211, 0x3EE4F8B580000000, !dbg !43
  %220 = fadd float %212, 0x3EE4F8B580000000, !dbg !43
  %221 = fadd float %213, 0x3EE4F8B580000000, !dbg !43
  %222 = fadd float %214, 0x3EE4F8B580000000, !dbg !43
  %223 = fadd float %215, 0x3EE4F8B580000000, !dbg !43
  %224 = fadd float %216, 0x3EE4F8B580000000, !dbg !43
  %225 = fadd float %217, 0x3EE4F8B580000000, !dbg !43
  %226 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !44
  %.not.i22 = icmp eq i32 %226, 0, !dbg !44
  br i1 %.not.i22, label %229, label %227, !dbg !44

227:                                              ; preds = %__nv_rsqrtf.exit21
  %228 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %218), !dbg !44
  br label %__nv_rsqrtf.exit24, !dbg !44

229:                                              ; preds = %__nv_rsqrtf.exit21
  %230 = tail call float @llvm.nvvm.rsqrt.approx.f(float %218), !dbg !44
  br label %__nv_rsqrtf.exit24, !dbg !44

__nv_rsqrtf.exit24:                               ; preds = %227, %229
  %.0.i23 = phi float [ %228, %227 ], [ %230, %229 ], !dbg !44
  %231 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !44
  %.not.i25 = icmp eq i32 %231, 0, !dbg !44
  br i1 %.not.i25, label %234, label %232, !dbg !44

232:                                              ; preds = %__nv_rsqrtf.exit24
  %233 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %219), !dbg !44
  br label %__nv_rsqrtf.exit27, !dbg !44

234:                                              ; preds = %__nv_rsqrtf.exit24
  %235 = tail call float @llvm.nvvm.rsqrt.approx.f(float %219), !dbg !44
  br label %__nv_rsqrtf.exit27, !dbg !44

__nv_rsqrtf.exit27:                               ; preds = %232, %234
  %.0.i26 = phi float [ %233, %232 ], [ %235, %234 ], !dbg !44
  %236 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !44
  %.not.i28 = icmp eq i32 %236, 0, !dbg !44
  br i1 %.not.i28, label %239, label %237, !dbg !44

237:                                              ; preds = %__nv_rsqrtf.exit27
  %238 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %220), !dbg !44
  br label %__nv_rsqrtf.exit30, !dbg !44

239:                                              ; preds = %__nv_rsqrtf.exit27
  %240 = tail call float @llvm.nvvm.rsqrt.approx.f(float %220), !dbg !44
  br label %__nv_rsqrtf.exit30, !dbg !44

__nv_rsqrtf.exit30:                               ; preds = %237, %239
  %.0.i29 = phi float [ %238, %237 ], [ %240, %239 ], !dbg !44
  %241 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !44
  %.not.i31 = icmp eq i32 %241, 0, !dbg !44
  br i1 %.not.i31, label %244, label %242, !dbg !44

242:                                              ; preds = %__nv_rsqrtf.exit30
  %243 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %221), !dbg !44
  br label %__nv_rsqrtf.exit33, !dbg !44

244:                                              ; preds = %__nv_rsqrtf.exit30
  %245 = tail call float @llvm.nvvm.rsqrt.approx.f(float %221), !dbg !44
  br label %__nv_rsqrtf.exit33, !dbg !44

__nv_rsqrtf.exit33:                               ; preds = %242, %244
  %.0.i32 = phi float [ %243, %242 ], [ %245, %244 ], !dbg !44
  %246 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !44
  %.not.i34 = icmp eq i32 %246, 0, !dbg !44
  br i1 %.not.i34, label %249, label %247, !dbg !44

247:                                              ; preds = %__nv_rsqrtf.exit33
  %248 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %222), !dbg !44
  br label %__nv_rsqrtf.exit36, !dbg !44

249:                                              ; preds = %__nv_rsqrtf.exit33
  %250 = tail call float @llvm.nvvm.rsqrt.approx.f(float %222), !dbg !44
  br label %__nv_rsqrtf.exit36, !dbg !44

__nv_rsqrtf.exit36:                               ; preds = %247, %249
  %.0.i35 = phi float [ %248, %247 ], [ %250, %249 ], !dbg !44
  %251 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !44
  %.not.i37 = icmp eq i32 %251, 0, !dbg !44
  br i1 %.not.i37, label %254, label %252, !dbg !44

252:                                              ; preds = %__nv_rsqrtf.exit36
  %253 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %223), !dbg !44
  br label %__nv_rsqrtf.exit39, !dbg !44

254:                                              ; preds = %__nv_rsqrtf.exit36
  %255 = tail call float @llvm.nvvm.rsqrt.approx.f(float %223), !dbg !44
  br label %__nv_rsqrtf.exit39, !dbg !44

__nv_rsqrtf.exit39:                               ; preds = %252, %254
  %.0.i38 = phi float [ %253, %252 ], [ %255, %254 ], !dbg !44
  %256 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !44
  %.not.i40 = icmp eq i32 %256, 0, !dbg !44
  br i1 %.not.i40, label %259, label %257, !dbg !44

257:                                              ; preds = %__nv_rsqrtf.exit39
  %258 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %224), !dbg !44
  br label %__nv_rsqrtf.exit42, !dbg !44

259:                                              ; preds = %__nv_rsqrtf.exit39
  %260 = tail call float @llvm.nvvm.rsqrt.approx.f(float %224), !dbg !44
  br label %__nv_rsqrtf.exit42, !dbg !44

__nv_rsqrtf.exit42:                               ; preds = %257, %259
  %.0.i41 = phi float [ %258, %257 ], [ %260, %259 ], !dbg !44
  %261 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !44
  %.not.i43 = icmp eq i32 %261, 0, !dbg !44
  br i1 %.not.i43, label %264, label %262, !dbg !44

262:                                              ; preds = %__nv_rsqrtf.exit42
  %263 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %225), !dbg !44
  br label %__nv_rsqrtf.exit45, !dbg !44

264:                                              ; preds = %__nv_rsqrtf.exit42
  %265 = tail call float @llvm.nvvm.rsqrt.approx.f(float %225), !dbg !44
  br label %__nv_rsqrtf.exit45, !dbg !44

__nv_rsqrtf.exit45:                               ; preds = %262, %264
  %.0.i44 = phi float [ %263, %262 ], [ %265, %264 ], !dbg !44
  %266 = extractvalue { i32, i32, i32, i32 } %107, 3, !dbg !30
  %267 = insertelement <2 x i32> poison, i32 %72, i64 0, !dbg !22
  %268 = insertelement <2 x i32> %267, i32 %123, i64 1, !dbg !22
  %269 = bitcast <2 x i32> %268 to <2 x float>, !dbg !22
  %270 = extractvalue { i32, i32, i32, i32 } %107, 2, !dbg !30
  %271 = insertelement <2 x i32> poison, i32 %71, i64 0, !dbg !22
  %272 = insertelement <2 x i32> %271, i32 %122, i64 1, !dbg !22
  %273 = bitcast <2 x i32> %272 to <2 x float>, !dbg !22
  %274 = extractvalue { i32, i32, i32, i32 } %107, 1, !dbg !30
  %275 = insertelement <2 x i32> poison, i32 %70, i64 0, !dbg !22
  %276 = insertelement <2 x i32> %275, i32 %121, i64 1, !dbg !22
  %277 = bitcast <2 x i32> %276 to <2 x float>, !dbg !22
  %278 = extractvalue { i32, i32, i32, i32 } %107, 0, !dbg !30
  %279 = insertelement <2 x i32> poison, i32 %69, i64 0, !dbg !22
  %280 = insertelement <2 x i32> %279, i32 %120, i64 1, !dbg !22
  %281 = bitcast <2 x i32> %280 to <2 x float>, !dbg !22
  %282 = extractvalue { i32, i32, i32, i32 } %106, 3, !dbg !30
  %283 = insertelement <2 x i32> poison, i32 %68, i64 0, !dbg !22
  %284 = insertelement <2 x i32> %283, i32 %119, i64 1, !dbg !22
  %285 = bitcast <2 x i32> %284 to <2 x float>, !dbg !22
  %286 = extractvalue { i32, i32, i32, i32 } %106, 2, !dbg !30
  %287 = insertelement <2 x i32> poison, i32 %67, i64 0, !dbg !22
  %288 = insertelement <2 x i32> %287, i32 %118, i64 1, !dbg !22
  %289 = bitcast <2 x i32> %288 to <2 x float>, !dbg !22
  %290 = extractvalue { i32, i32, i32, i32 } %106, 1, !dbg !30
  %291 = insertelement <2 x i32> poison, i32 %66, i64 0, !dbg !22
  %292 = insertelement <2 x i32> %291, i32 %117, i64 1, !dbg !22
  %293 = bitcast <2 x i32> %292 to <2 x float>, !dbg !22
  %294 = extractvalue { i32, i32, i32, i32 } %106, 0, !dbg !30
  %295 = insertelement <2 x i32> poison, i32 %65, i64 0, !dbg !22
  %296 = insertelement <2 x i32> %295, i32 %116, i64 1, !dbg !22
  %297 = bitcast <2 x i32> %296 to <2 x float>, !dbg !22
  %298 = extractvalue { i32, i32, i32, i32 } %34, 3, !dbg !17
  %299 = extractvalue { i32, i32, i32, i32 } %100, 3, !dbg !26
  %300 = extractvalue { i32, i32, i32, i32 } %103, 3, !dbg !28
  %301 = extractvalue { i32, i32, i32, i32 } %34, 2, !dbg !17
  %302 = extractvalue { i32, i32, i32, i32 } %100, 2, !dbg !26
  %303 = extractvalue { i32, i32, i32, i32 } %103, 2, !dbg !28
  %304 = extractvalue { i32, i32, i32, i32 } %34, 1, !dbg !17
  %305 = extractvalue { i32, i32, i32, i32 } %100, 1, !dbg !26
  %306 = extractvalue { i32, i32, i32, i32 } %103, 1, !dbg !28
  %307 = extractvalue { i32, i32, i32, i32 } %34, 0, !dbg !17
  %308 = extractvalue { i32, i32, i32, i32 } %100, 0, !dbg !26
  %309 = extractvalue { i32, i32, i32, i32 } %103, 0, !dbg !28
  %310 = extractvalue { i32, i32, i32, i32 } %33, 3, !dbg !17
  %311 = extractvalue { i32, i32, i32, i32 } %99, 3, !dbg !26
  %312 = extractvalue { i32, i32, i32, i32 } %102, 3, !dbg !28
  %313 = extractvalue { i32, i32, i32, i32 } %33, 2, !dbg !17
  %314 = extractvalue { i32, i32, i32, i32 } %99, 2, !dbg !26
  %315 = extractvalue { i32, i32, i32, i32 } %102, 2, !dbg !28
  %316 = extractvalue { i32, i32, i32, i32 } %33, 1, !dbg !17
  %317 = extractvalue { i32, i32, i32, i32 } %99, 1, !dbg !26
  %318 = extractvalue { i32, i32, i32, i32 } %102, 1, !dbg !28
  %319 = extractvalue { i32, i32, i32, i32 } %33, 0, !dbg !17
  %320 = extractvalue { i32, i32, i32, i32 } %99, 0, !dbg !26
  %321 = extractvalue { i32, i32, i32, i32 } %102, 0, !dbg !28
  %322 = extractvalue { i32, i32, i32, i32 } %153, 3, !dbg !38
  %323 = extractvalue { i32, i32, i32, i32 } %153, 2, !dbg !38
  %324 = extractvalue { i32, i32, i32, i32 } %153, 1, !dbg !38
  %325 = extractvalue { i32, i32, i32, i32 } %153, 0, !dbg !38
  %326 = extractvalue { i32, i32, i32, i32 } %152, 3, !dbg !38
  %327 = extractvalue { i32, i32, i32, i32 } %152, 2, !dbg !38
  %328 = extractvalue { i32, i32, i32, i32 } %152, 1, !dbg !38
  %329 = extractvalue { i32, i32, i32, i32 } %152, 0, !dbg !38
  %330 = extractvalue { i32, i32, i32, i32 } %150, 3, !dbg !36
  %331 = extractvalue { i32, i32, i32, i32 } %150, 2, !dbg !36
  %332 = extractvalue { i32, i32, i32, i32 } %150, 1, !dbg !36
  %333 = extractvalue { i32, i32, i32, i32 } %150, 0, !dbg !36
  %334 = extractvalue { i32, i32, i32, i32 } %149, 3, !dbg !36
  %335 = extractvalue { i32, i32, i32, i32 } %149, 2, !dbg !36
  %336 = extractvalue { i32, i32, i32, i32 } %149, 1, !dbg !36
  %337 = extractvalue { i32, i32, i32, i32 } %149, 0, !dbg !36
  %338 = insertelement <2 x i32> poison, i32 %319, i64 0, !dbg !17
  %339 = insertelement <2 x i32> %338, i32 %294, i64 1, !dbg !17
  %340 = bitcast <2 x i32> %339 to <2 x float>, !dbg !17
  %341 = fsub <2 x float> %340, %297, !dbg !45
  %342 = insertelement <2 x i32> poison, i32 %321, i64 0, !dbg !28
  %343 = insertelement <2 x i32> %342, i32 %329, i64 1, !dbg !28
  %344 = bitcast <2 x i32> %343 to <2 x float>, !dbg !28
  %345 = insertelement <2 x i32> poison, i32 %320, i64 0, !dbg !26
  %346 = insertelement <2 x i32> %345, i32 %337, i64 1, !dbg !26
  %347 = bitcast <2 x i32> %346 to <2 x float>, !dbg !26
  %348 = insertelement <2 x float> poison, float %.0.i, i64 0, !dbg !46
  %349 = insertelement <2 x float> %348, float %.0.i23, i64 1, !dbg !46
  %350 = fmul <2 x float> %341, %349, !dbg !46
  %351 = fmul <2 x float> %350, %347, !dbg !47
  %352 = fadd <2 x float> %351, %344, !dbg !48
  %353 = insertelement <2 x i32> poison, i32 %316, i64 0, !dbg !17
  %354 = insertelement <2 x i32> %353, i32 %290, i64 1, !dbg !17
  %355 = bitcast <2 x i32> %354 to <2 x float>, !dbg !17
  %356 = fsub <2 x float> %355, %293, !dbg !45
  %357 = insertelement <2 x i32> poison, i32 %318, i64 0, !dbg !28
  %358 = insertelement <2 x i32> %357, i32 %328, i64 1, !dbg !28
  %359 = bitcast <2 x i32> %358 to <2 x float>, !dbg !28
  %360 = insertelement <2 x i32> poison, i32 %317, i64 0, !dbg !26
  %361 = insertelement <2 x i32> %360, i32 %336, i64 1, !dbg !26
  %362 = bitcast <2 x i32> %361 to <2 x float>, !dbg !26
  %363 = insertelement <2 x float> poison, float %.0.i2, i64 0, !dbg !46
  %364 = insertelement <2 x float> %363, float %.0.i26, i64 1, !dbg !46
  %365 = fmul <2 x float> %356, %364, !dbg !46
  %366 = fmul <2 x float> %365, %362, !dbg !47
  %367 = fadd <2 x float> %366, %359, !dbg !48
  %368 = insertelement <2 x i32> poison, i32 %313, i64 0, !dbg !17
  %369 = insertelement <2 x i32> %368, i32 %286, i64 1, !dbg !17
  %370 = bitcast <2 x i32> %369 to <2 x float>, !dbg !17
  %371 = fsub <2 x float> %370, %289, !dbg !45
  %372 = insertelement <2 x i32> poison, i32 %315, i64 0, !dbg !28
  %373 = insertelement <2 x i32> %372, i32 %327, i64 1, !dbg !28
  %374 = bitcast <2 x i32> %373 to <2 x float>, !dbg !28
  %375 = insertelement <2 x i32> poison, i32 %314, i64 0, !dbg !26
  %376 = insertelement <2 x i32> %375, i32 %335, i64 1, !dbg !26
  %377 = bitcast <2 x i32> %376 to <2 x float>, !dbg !26
  %378 = insertelement <2 x float> poison, float %.0.i5, i64 0, !dbg !46
  %379 = insertelement <2 x float> %378, float %.0.i29, i64 1, !dbg !46
  %380 = fmul <2 x float> %371, %379, !dbg !46
  %381 = fmul <2 x float> %380, %377, !dbg !47
  %382 = fadd <2 x float> %381, %374, !dbg !48
  %383 = insertelement <2 x i32> poison, i32 %310, i64 0, !dbg !17
  %384 = insertelement <2 x i32> %383, i32 %282, i64 1, !dbg !17
  %385 = bitcast <2 x i32> %384 to <2 x float>, !dbg !17
  %386 = fsub <2 x float> %385, %285, !dbg !45
  %387 = insertelement <2 x i32> poison, i32 %312, i64 0, !dbg !28
  %388 = insertelement <2 x i32> %387, i32 %326, i64 1, !dbg !28
  %389 = bitcast <2 x i32> %388 to <2 x float>, !dbg !28
  %390 = insertelement <2 x i32> poison, i32 %311, i64 0, !dbg !26
  %391 = insertelement <2 x i32> %390, i32 %334, i64 1, !dbg !26
  %392 = bitcast <2 x i32> %391 to <2 x float>, !dbg !26
  %393 = insertelement <2 x float> poison, float %.0.i8, i64 0, !dbg !46
  %394 = insertelement <2 x float> %393, float %.0.i32, i64 1, !dbg !46
  %395 = fmul <2 x float> %386, %394, !dbg !46
  %396 = fmul <2 x float> %395, %392, !dbg !47
  %397 = fadd <2 x float> %396, %389, !dbg !48
  %398 = insertelement <2 x i32> poison, i32 %307, i64 0, !dbg !17
  %399 = insertelement <2 x i32> %398, i32 %278, i64 1, !dbg !17
  %400 = bitcast <2 x i32> %399 to <2 x float>, !dbg !17
  %401 = fsub <2 x float> %400, %281, !dbg !45
  %402 = insertelement <2 x i32> poison, i32 %309, i64 0, !dbg !28
  %403 = insertelement <2 x i32> %402, i32 %325, i64 1, !dbg !28
  %404 = bitcast <2 x i32> %403 to <2 x float>, !dbg !28
  %405 = insertelement <2 x i32> poison, i32 %308, i64 0, !dbg !26
  %406 = insertelement <2 x i32> %405, i32 %333, i64 1, !dbg !26
  %407 = bitcast <2 x i32> %406 to <2 x float>, !dbg !26
  %408 = insertelement <2 x float> poison, float %.0.i11, i64 0, !dbg !46
  %409 = insertelement <2 x float> %408, float %.0.i35, i64 1, !dbg !46
  %410 = fmul <2 x float> %401, %409, !dbg !46
  %411 = fmul <2 x float> %410, %407, !dbg !47
  %412 = fadd <2 x float> %411, %404, !dbg !48
  %413 = insertelement <2 x i32> poison, i32 %304, i64 0, !dbg !17
  %414 = insertelement <2 x i32> %413, i32 %274, i64 1, !dbg !17
  %415 = bitcast <2 x i32> %414 to <2 x float>, !dbg !17
  %416 = fsub <2 x float> %415, %277, !dbg !45
  %417 = insertelement <2 x i32> poison, i32 %306, i64 0, !dbg !28
  %418 = insertelement <2 x i32> %417, i32 %324, i64 1, !dbg !28
  %419 = bitcast <2 x i32> %418 to <2 x float>, !dbg !28
  %420 = insertelement <2 x i32> poison, i32 %305, i64 0, !dbg !26
  %421 = insertelement <2 x i32> %420, i32 %332, i64 1, !dbg !26
  %422 = bitcast <2 x i32> %421 to <2 x float>, !dbg !26
  %423 = insertelement <2 x float> poison, float %.0.i14, i64 0, !dbg !46
  %424 = insertelement <2 x float> %423, float %.0.i38, i64 1, !dbg !46
  %425 = fmul <2 x float> %416, %424, !dbg !46
  %426 = fmul <2 x float> %425, %422, !dbg !47
  %427 = fadd <2 x float> %426, %419, !dbg !48
  %428 = insertelement <2 x i32> poison, i32 %301, i64 0, !dbg !17
  %429 = insertelement <2 x i32> %428, i32 %270, i64 1, !dbg !17
  %430 = bitcast <2 x i32> %429 to <2 x float>, !dbg !17
  %431 = fsub <2 x float> %430, %273, !dbg !45
  %432 = insertelement <2 x i32> poison, i32 %303, i64 0, !dbg !28
  %433 = insertelement <2 x i32> %432, i32 %323, i64 1, !dbg !28
  %434 = bitcast <2 x i32> %433 to <2 x float>, !dbg !28
  %435 = insertelement <2 x i32> poison, i32 %302, i64 0, !dbg !26
  %436 = insertelement <2 x i32> %435, i32 %331, i64 1, !dbg !26
  %437 = bitcast <2 x i32> %436 to <2 x float>, !dbg !26
  %438 = insertelement <2 x float> poison, float %.0.i17, i64 0, !dbg !46
  %439 = insertelement <2 x float> %438, float %.0.i41, i64 1, !dbg !46
  %440 = fmul <2 x float> %431, %439, !dbg !46
  %441 = fmul <2 x float> %440, %437, !dbg !47
  %442 = fadd <2 x float> %441, %434, !dbg !48
  %443 = insertelement <2 x i32> poison, i32 %298, i64 0, !dbg !17
  %444 = insertelement <2 x i32> %443, i32 %266, i64 1, !dbg !17
  %445 = bitcast <2 x i32> %444 to <2 x float>, !dbg !17
  %446 = fsub <2 x float> %445, %269, !dbg !45
  %447 = insertelement <2 x i32> poison, i32 %300, i64 0, !dbg !28
  %448 = insertelement <2 x i32> %447, i32 %322, i64 1, !dbg !28
  %449 = bitcast <2 x i32> %448 to <2 x float>, !dbg !28
  %450 = insertelement <2 x i32> poison, i32 %299, i64 0, !dbg !26
  %451 = insertelement <2 x i32> %450, i32 %330, i64 1, !dbg !26
  %452 = bitcast <2 x i32> %451 to <2 x float>, !dbg !26
  %453 = insertelement <2 x float> poison, float %.0.i20, i64 0, !dbg !46
  %454 = insertelement <2 x float> %453, float %.0.i44, i64 1, !dbg !46
  %455 = fmul <2 x float> %446, %454, !dbg !46
  %456 = fmul <2 x float> %455, %452, !dbg !47
  %457 = fadd <2 x float> %456, %449, !dbg !48
  %shift = shufflevector <2 x float> %352, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !49
  %458 = fadd <2 x float> %352, %shift, !dbg !49
  %459 = extractelement <2 x float> %458, i64 0, !dbg !49
  %shift60 = shufflevector <2 x float> %367, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !49
  %460 = fadd <2 x float> %367, %shift60, !dbg !49
  %461 = extractelement <2 x float> %460, i64 0, !dbg !49
  %shift61 = shufflevector <2 x float> %382, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !49
  %462 = fadd <2 x float> %382, %shift61, !dbg !49
  %463 = extractelement <2 x float> %462, i64 0, !dbg !49
  %shift62 = shufflevector <2 x float> %397, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !49
  %464 = fadd <2 x float> %397, %shift62, !dbg !49
  %465 = extractelement <2 x float> %464, i64 0, !dbg !49
  %shift63 = shufflevector <2 x float> %412, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !49
  %466 = fadd <2 x float> %412, %shift63, !dbg !49
  %467 = extractelement <2 x float> %466, i64 0, !dbg !49
  %shift64 = shufflevector <2 x float> %427, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !49
  %468 = fadd <2 x float> %427, %shift64, !dbg !49
  %469 = extractelement <2 x float> %468, i64 0, !dbg !49
  %shift65 = shufflevector <2 x float> %442, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !49
  %470 = fadd <2 x float> %442, %shift65, !dbg !49
  %471 = extractelement <2 x float> %470, i64 0, !dbg !49
  %shift66 = shufflevector <2 x float> %457, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !49
  %472 = fadd <2 x float> %457, %shift66, !dbg !49
  %473 = extractelement <2 x float> %472, i64 0, !dbg !49
  %474 = fcmp olt float %459, 0.000000e+00, !dbg !50
  %475 = fcmp olt float %461, 0.000000e+00, !dbg !50
  %476 = fcmp olt float %463, 0.000000e+00, !dbg !50
  %477 = fcmp olt float %465, 0.000000e+00, !dbg !50
  %478 = fcmp olt float %467, 0.000000e+00, !dbg !50
  %479 = fcmp olt float %469, 0.000000e+00, !dbg !50
  %480 = fcmp olt float %471, 0.000000e+00, !dbg !50
  %481 = fcmp olt float %473, 0.000000e+00, !dbg !50
  %482 = select i1 %474, float 0.000000e+00, float %459, !dbg !54
  %483 = select i1 %475, float 0.000000e+00, float %461, !dbg !54
  %484 = select i1 %476, float 0.000000e+00, float %463, !dbg !54
  %485 = select i1 %477, float 0.000000e+00, float %465, !dbg !54
  %486 = select i1 %478, float 0.000000e+00, float %467, !dbg !54
  %487 = select i1 %479, float 0.000000e+00, float %469, !dbg !54
  %488 = select i1 %480, float 0.000000e+00, float %471, !dbg !54
  %489 = select i1 %481, float 0.000000e+00, float %473, !dbg !54
  %490 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !55
  %491 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !55
  %492 = bitcast float %482 to i32, !dbg !56
  %493 = bitcast float %483 to i32, !dbg !56
  %494 = bitcast float %484 to i32, !dbg !56
  %495 = bitcast float %485 to i32, !dbg !56
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %492, i32 %493, i32 %494, i32 %495, ptr addrspace(1) %490, i1 true) #3, !dbg !56
  %496 = bitcast float %486 to i32, !dbg !56
  %497 = bitcast float %487 to i32, !dbg !56
  %498 = bitcast float %488 to i32, !dbg !56
  %499 = bitcast float %489 to i32, !dbg !56
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %496, i32 %497, i32 %498, i32 %499, ptr addrspace(1) %491, i1 true) #3, !dbg !56
  ret void, !dbg !57
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c67334yw32dglq6tuwilrmukyrwiyssfxsmomknd3vxajy6ngid6.py", directory: "inductor_cache/67")
!4 = !{ptr @triton_poi_fused_add_native_group_norm_relu_13, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_native_group_norm_relu_13, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_native_group_norm_relu_13", linkageName: "triton_poi_fused_add_native_group_norm_relu_13", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 19, scope: !7)
!16 = !DILocation(line: 27, column: 30, scope: !7)
!17 = !DILocation(line: 27, column: 35, scope: !7)
!18 = !DILocation(line: 28, column: 32, scope: !7)
!19 = !DILocation(line: 28, column: 44, scope: !7)
!20 = !DILocation(line: 28, column: 38, scope: !7)
!21 = !DILocation(line: 28, column: 30, scope: !7)
!22 = !DILocation(line: 28, column: 50, scope: !7)
!23 = !DILocation(line: 29, column: 30, scope: !7)
!24 = !DILocation(line: 29, column: 50, scope: !7)
!25 = !DILocation(line: 30, column: 31, scope: !7)
!26 = !DILocation(line: 30, column: 36, scope: !7)
!27 = !DILocation(line: 31, column: 31, scope: !7)
!28 = !DILocation(line: 31, column: 36, scope: !7)
!29 = !DILocation(line: 32, column: 31, scope: !7)
!30 = !DILocation(line: 32, column: 36, scope: !7)
!31 = !DILocation(line: 33, column: 31, scope: !7)
!32 = !DILocation(line: 33, column: 51, scope: !7)
!33 = !DILocation(line: 34, column: 31, scope: !7)
!34 = !DILocation(line: 34, column: 51, scope: !7)
!35 = !DILocation(line: 35, column: 31, scope: !7)
!36 = !DILocation(line: 35, column: 36, scope: !7)
!37 = !DILocation(line: 36, column: 31, scope: !7)
!38 = !DILocation(line: 36, column: 36, scope: !7)
!39 = !DILocation(line: 39, column: 18, scope: !7)
!40 = !DILocation(line: 41, column: 18, scope: !7)
!41 = !DILocation(line: 42, column: 27, scope: !7)
!42 = !DILocation(line: 47, column: 20, scope: !7)
!43 = !DILocation(line: 48, column: 20, scope: !7)
!44 = !DILocation(line: 49, column: 28, scope: !7)
!45 = !DILocation(line: 37, column: 18, scope: !7)
!46 = !DILocation(line: 43, column: 18, scope: !7)
!47 = !DILocation(line: 44, column: 19, scope: !7)
!48 = !DILocation(line: 45, column: 20, scope: !7)
!49 = !DILocation(line: 53, column: 20, scope: !7)
!50 = !DILocation(line: 118, column: 15, scope: !51, inlinedAt: !53)
!51 = distinct !DILexicalBlockFile(scope: !7, file: !52, discriminator: 0)
!52 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!53 = !DILocation(line: 55, column: 42, scope: !7)
!54 = !DILocation(line: 121, column: 29, scope: !51, inlinedAt: !53)
!55 = !DILocation(line: 56, column: 28, scope: !7)
!56 = !DILocation(line: 56, column: 40, scope: !7)
!57 = !DILocation(line: 56, column: 4, scope: !7)
