; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused__softmax_mul_sum_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 4, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 6, !dbg !12
  %10 = and i32 %9, 3, !dbg !12
  %11 = shl i32 %8, 2, !dbg !12
  %12 = and i32 %11, 12, !dbg !12
  %13 = or disjoint i32 %7, %10, !dbg !13
  %14 = or disjoint i32 %13, 4, !dbg !13
  %15 = or disjoint i32 %13, 8, !dbg !13
  %16 = or disjoint i32 %13, 12, !dbg !13
  %17 = or disjoint i32 %7, %12, !dbg !13
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %19 = shl i32 %18, 8, !dbg !15
  %20 = and i32 %11, 252, !dbg !16
  %21 = lshr i32 %8, 2, !dbg !16
  %22 = and i32 %21, 63, !dbg !16
  %23 = or disjoint i32 %19, %20, !dbg !17
  %24 = or disjoint i32 %19, %22, !dbg !17
  %25 = or disjoint i32 %24, 64, !dbg !17
  %26 = or disjoint i32 %24, 128, !dbg !17
  %27 = or disjoint i32 %24, 192, !dbg !17
  %28 = icmp slt i32 %23, 512, !dbg !18
  %29 = icmp slt i32 %24, 512, !dbg !18
  %30 = icmp slt i32 %25, 512, !dbg !18
  %31 = icmp slt i32 %26, 512, !dbg !18
  %32 = icmp slt i32 %27, 512, !dbg !18
  %33 = sdiv i32 %13, 4096, !dbg !19
  %34 = sdiv i32 %14, 4096, !dbg !19
  %35 = sdiv i32 %15, 4096, !dbg !19
  %36 = sdiv i32 %16, 4096, !dbg !19
  %.frozen = freeze i32 %17, !dbg !19
  %37 = sdiv i32 %.frozen, 4096, !dbg !19
  %38 = mul i32 %37, 4096, !dbg !20
  %.decomposed = sub i32 %.frozen, %38, !dbg !20
  %39 = shl nsw i32 %33, 9, !dbg !21
  %40 = shl nsw i32 %34, 9, !dbg !21
  %41 = shl nsw i32 %35, 9, !dbg !21
  %42 = shl nsw i32 %36, 9, !dbg !21
  %43 = add i32 %39, %23, !dbg !22
  %44 = add i32 %23, %40, !dbg !22
  %45 = add i32 %23, %41, !dbg !22
  %46 = add i32 %23, %42, !dbg !22
  %47 = sext i32 %43 to i64, !dbg !23
  %48 = getelementptr float, ptr addrspace(1) %0, i64 %47, !dbg !23
  %49 = sext i32 %44 to i64, !dbg !23
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !23
  %51 = sext i32 %45 to i64, !dbg !23
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !23
  %53 = sext i32 %46 to i64, !dbg !23
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !23
  %55 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %48, i1 %28) #2, !dbg !24
  %56 = extractvalue { i32, i32, i32, i32 } %55, 0, !dbg !24
  %57 = extractvalue { i32, i32, i32, i32 } %55, 1, !dbg !24
  %58 = extractvalue { i32, i32, i32, i32 } %55, 2, !dbg !24
  %59 = extractvalue { i32, i32, i32, i32 } %55, 3, !dbg !24
  %60 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %50, i1 %28) #2, !dbg !24
  %61 = extractvalue { i32, i32, i32, i32 } %60, 0, !dbg !24
  %62 = extractvalue { i32, i32, i32, i32 } %60, 1, !dbg !24
  %63 = extractvalue { i32, i32, i32, i32 } %60, 2, !dbg !24
  %64 = extractvalue { i32, i32, i32, i32 } %60, 3, !dbg !24
  %65 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %52, i1 %28) #2, !dbg !24
  %66 = extractvalue { i32, i32, i32, i32 } %65, 0, !dbg !24
  %67 = extractvalue { i32, i32, i32, i32 } %65, 1, !dbg !24
  %68 = extractvalue { i32, i32, i32, i32 } %65, 2, !dbg !24
  %69 = extractvalue { i32, i32, i32, i32 } %65, 3, !dbg !24
  %70 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %54, i1 %28) #2, !dbg !24
  %71 = extractvalue { i32, i32, i32, i32 } %70, 0, !dbg !24
  %72 = extractvalue { i32, i32, i32, i32 } %70, 1, !dbg !24
  %73 = extractvalue { i32, i32, i32, i32 } %70, 2, !dbg !24
  %74 = extractvalue { i32, i32, i32, i32 } %70, 3, !dbg !24
  %75 = shl i32 %13, 9, !dbg !25
  %76 = shl i32 %14, 9, !dbg !25
  %77 = shl i32 %15, 9, !dbg !25
  %78 = shl i32 %16, 9, !dbg !25
  %79 = add i32 %23, %75, !dbg !26
  %80 = add i32 %23, %76, !dbg !26
  %81 = add i32 %23, %77, !dbg !26
  %82 = add i32 %23, %78, !dbg !26
  %83 = sext i32 %79 to i64, !dbg !27
  %84 = getelementptr float, ptr addrspace(1) %1, i64 %83, !dbg !27
  %85 = sext i32 %80 to i64, !dbg !27
  %86 = getelementptr float, ptr addrspace(1) %1, i64 %85, !dbg !27
  %87 = sext i32 %81 to i64, !dbg !27
  %88 = getelementptr float, ptr addrspace(1) %1, i64 %87, !dbg !27
  %89 = sext i32 %82 to i64, !dbg !27
  %90 = getelementptr float, ptr addrspace(1) %1, i64 %89, !dbg !27
  %91 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %84, i1 %28) #2, !dbg !28
  %92 = extractvalue { i32, i32, i32, i32 } %91, 0, !dbg !28
  %93 = extractvalue { i32, i32, i32, i32 } %91, 1, !dbg !28
  %94 = extractvalue { i32, i32, i32, i32 } %91, 2, !dbg !28
  %95 = extractvalue { i32, i32, i32, i32 } %91, 3, !dbg !28
  %96 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %86, i1 %28) #2, !dbg !28
  %97 = extractvalue { i32, i32, i32, i32 } %96, 0, !dbg !28
  %98 = extractvalue { i32, i32, i32, i32 } %96, 1, !dbg !28
  %99 = extractvalue { i32, i32, i32, i32 } %96, 2, !dbg !28
  %100 = extractvalue { i32, i32, i32, i32 } %96, 3, !dbg !28
  %101 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %88, i1 %28) #2, !dbg !28
  %102 = extractvalue { i32, i32, i32, i32 } %101, 0, !dbg !28
  %103 = extractvalue { i32, i32, i32, i32 } %101, 1, !dbg !28
  %104 = extractvalue { i32, i32, i32, i32 } %101, 2, !dbg !28
  %105 = extractvalue { i32, i32, i32, i32 } %101, 3, !dbg !28
  %106 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %90, i1 %28) #2, !dbg !28
  %107 = extractvalue { i32, i32, i32, i32 } %106, 0, !dbg !28
  %108 = extractvalue { i32, i32, i32, i32 } %106, 1, !dbg !28
  %109 = extractvalue { i32, i32, i32, i32 } %106, 2, !dbg !28
  %110 = extractvalue { i32, i32, i32, i32 } %106, 3, !dbg !28
  %111 = add i32 %23, 2048, !dbg !29
  %112 = add i32 %111, %39, !dbg !30
  %113 = add i32 %111, %40, !dbg !30
  %114 = add i32 %111, %41, !dbg !30
  %115 = add i32 %111, %42, !dbg !30
  %116 = sext i32 %112 to i64, !dbg !31
  %117 = getelementptr float, ptr addrspace(1) %0, i64 %116, !dbg !31
  %118 = sext i32 %113 to i64, !dbg !31
  %119 = getelementptr float, ptr addrspace(1) %0, i64 %118, !dbg !31
  %120 = sext i32 %114 to i64, !dbg !31
  %121 = getelementptr float, ptr addrspace(1) %0, i64 %120, !dbg !31
  %122 = sext i32 %115 to i64, !dbg !31
  %123 = getelementptr float, ptr addrspace(1) %0, i64 %122, !dbg !31
  %124 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %117, i1 %28) #2, !dbg !32
  %125 = extractvalue { i32, i32, i32, i32 } %124, 0, !dbg !32
  %126 = extractvalue { i32, i32, i32, i32 } %124, 1, !dbg !32
  %127 = extractvalue { i32, i32, i32, i32 } %124, 2, !dbg !32
  %128 = extractvalue { i32, i32, i32, i32 } %124, 3, !dbg !32
  %129 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %119, i1 %28) #2, !dbg !32
  %130 = extractvalue { i32, i32, i32, i32 } %129, 0, !dbg !32
  %131 = extractvalue { i32, i32, i32, i32 } %129, 1, !dbg !32
  %132 = extractvalue { i32, i32, i32, i32 } %129, 2, !dbg !32
  %133 = extractvalue { i32, i32, i32, i32 } %129, 3, !dbg !32
  %134 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %121, i1 %28) #2, !dbg !32
  %135 = extractvalue { i32, i32, i32, i32 } %134, 0, !dbg !32
  %136 = extractvalue { i32, i32, i32, i32 } %134, 1, !dbg !32
  %137 = extractvalue { i32, i32, i32, i32 } %134, 2, !dbg !32
  %138 = extractvalue { i32, i32, i32, i32 } %134, 3, !dbg !32
  %139 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %123, i1 %28) #2, !dbg !32
  %140 = extractvalue { i32, i32, i32, i32 } %139, 0, !dbg !32
  %141 = extractvalue { i32, i32, i32, i32 } %139, 1, !dbg !32
  %142 = extractvalue { i32, i32, i32, i32 } %139, 2, !dbg !32
  %143 = extractvalue { i32, i32, i32, i32 } %139, 3, !dbg !32
  %144 = add i32 %23, 8388608, !dbg !33
  %145 = add i32 %144, %75, !dbg !34
  %146 = add i32 %144, %76, !dbg !34
  %147 = add i32 %144, %77, !dbg !34
  %148 = add i32 %144, %78, !dbg !34
  %149 = sext i32 %145 to i64, !dbg !35
  %150 = getelementptr float, ptr addrspace(1) %1, i64 %149, !dbg !35
  %151 = sext i32 %146 to i64, !dbg !35
  %152 = getelementptr float, ptr addrspace(1) %1, i64 %151, !dbg !35
  %153 = sext i32 %147 to i64, !dbg !35
  %154 = getelementptr float, ptr addrspace(1) %1, i64 %153, !dbg !35
  %155 = sext i32 %148 to i64, !dbg !35
  %156 = getelementptr float, ptr addrspace(1) %1, i64 %155, !dbg !35
  %157 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %150, i1 %28) #2, !dbg !36
  %158 = extractvalue { i32, i32, i32, i32 } %157, 0, !dbg !36
  %159 = extractvalue { i32, i32, i32, i32 } %157, 1, !dbg !36
  %160 = extractvalue { i32, i32, i32, i32 } %157, 2, !dbg !36
  %161 = extractvalue { i32, i32, i32, i32 } %157, 3, !dbg !36
  %162 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %152, i1 %28) #2, !dbg !36
  %163 = extractvalue { i32, i32, i32, i32 } %162, 0, !dbg !36
  %164 = extractvalue { i32, i32, i32, i32 } %162, 1, !dbg !36
  %165 = extractvalue { i32, i32, i32, i32 } %162, 2, !dbg !36
  %166 = extractvalue { i32, i32, i32, i32 } %162, 3, !dbg !36
  %167 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %154, i1 %28) #2, !dbg !36
  %168 = extractvalue { i32, i32, i32, i32 } %167, 0, !dbg !36
  %169 = extractvalue { i32, i32, i32, i32 } %167, 1, !dbg !36
  %170 = extractvalue { i32, i32, i32, i32 } %167, 2, !dbg !36
  %171 = extractvalue { i32, i32, i32, i32 } %167, 3, !dbg !36
  %172 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %156, i1 %28) #2, !dbg !36
  %173 = extractvalue { i32, i32, i32, i32 } %172, 0, !dbg !36
  %174 = extractvalue { i32, i32, i32, i32 } %172, 1, !dbg !36
  %175 = extractvalue { i32, i32, i32, i32 } %172, 2, !dbg !36
  %176 = extractvalue { i32, i32, i32, i32 } %172, 3, !dbg !36
  %177 = add i32 %23, 4096, !dbg !37
  %178 = add i32 %177, %39, !dbg !38
  %179 = add i32 %177, %40, !dbg !38
  %180 = add i32 %177, %41, !dbg !38
  %181 = add i32 %177, %42, !dbg !38
  %182 = sext i32 %178 to i64, !dbg !39
  %183 = getelementptr float, ptr addrspace(1) %0, i64 %182, !dbg !39
  %184 = sext i32 %179 to i64, !dbg !39
  %185 = getelementptr float, ptr addrspace(1) %0, i64 %184, !dbg !39
  %186 = sext i32 %180 to i64, !dbg !39
  %187 = getelementptr float, ptr addrspace(1) %0, i64 %186, !dbg !39
  %188 = sext i32 %181 to i64, !dbg !39
  %189 = getelementptr float, ptr addrspace(1) %0, i64 %188, !dbg !39
  %190 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %183, i1 %28) #2, !dbg !40
  %191 = extractvalue { i32, i32, i32, i32 } %190, 0, !dbg !40
  %192 = extractvalue { i32, i32, i32, i32 } %190, 1, !dbg !40
  %193 = extractvalue { i32, i32, i32, i32 } %190, 2, !dbg !40
  %194 = extractvalue { i32, i32, i32, i32 } %190, 3, !dbg !40
  %195 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %185, i1 %28) #2, !dbg !40
  %196 = extractvalue { i32, i32, i32, i32 } %195, 0, !dbg !40
  %197 = extractvalue { i32, i32, i32, i32 } %195, 1, !dbg !40
  %198 = extractvalue { i32, i32, i32, i32 } %195, 2, !dbg !40
  %199 = extractvalue { i32, i32, i32, i32 } %195, 3, !dbg !40
  %200 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %187, i1 %28) #2, !dbg !40
  %201 = extractvalue { i32, i32, i32, i32 } %200, 0, !dbg !40
  %202 = extractvalue { i32, i32, i32, i32 } %200, 1, !dbg !40
  %203 = extractvalue { i32, i32, i32, i32 } %200, 2, !dbg !40
  %204 = extractvalue { i32, i32, i32, i32 } %200, 3, !dbg !40
  %205 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %189, i1 %28) #2, !dbg !40
  %206 = extractvalue { i32, i32, i32, i32 } %205, 0, !dbg !40
  %207 = extractvalue { i32, i32, i32, i32 } %205, 1, !dbg !40
  %208 = extractvalue { i32, i32, i32, i32 } %205, 2, !dbg !40
  %209 = extractvalue { i32, i32, i32, i32 } %205, 3, !dbg !40
  %210 = add i32 %23, 16777216, !dbg !41
  %211 = add i32 %210, %75, !dbg !42
  %212 = add i32 %210, %76, !dbg !42
  %213 = add i32 %210, %77, !dbg !42
  %214 = add i32 %210, %78, !dbg !42
  %215 = sext i32 %211 to i64, !dbg !43
  %216 = getelementptr float, ptr addrspace(1) %1, i64 %215, !dbg !43
  %217 = sext i32 %212 to i64, !dbg !43
  %218 = getelementptr float, ptr addrspace(1) %1, i64 %217, !dbg !43
  %219 = sext i32 %213 to i64, !dbg !43
  %220 = getelementptr float, ptr addrspace(1) %1, i64 %219, !dbg !43
  %221 = sext i32 %214 to i64, !dbg !43
  %222 = getelementptr float, ptr addrspace(1) %1, i64 %221, !dbg !43
  %223 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %216, i1 %28) #2, !dbg !44
  %224 = extractvalue { i32, i32, i32, i32 } %223, 0, !dbg !44
  %225 = extractvalue { i32, i32, i32, i32 } %223, 1, !dbg !44
  %226 = extractvalue { i32, i32, i32, i32 } %223, 2, !dbg !44
  %227 = extractvalue { i32, i32, i32, i32 } %223, 3, !dbg !44
  %228 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %218, i1 %28) #2, !dbg !44
  %229 = extractvalue { i32, i32, i32, i32 } %228, 0, !dbg !44
  %230 = extractvalue { i32, i32, i32, i32 } %228, 1, !dbg !44
  %231 = extractvalue { i32, i32, i32, i32 } %228, 2, !dbg !44
  %232 = extractvalue { i32, i32, i32, i32 } %228, 3, !dbg !44
  %233 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %220, i1 %28) #2, !dbg !44
  %234 = extractvalue { i32, i32, i32, i32 } %233, 0, !dbg !44
  %235 = extractvalue { i32, i32, i32, i32 } %233, 1, !dbg !44
  %236 = extractvalue { i32, i32, i32, i32 } %233, 2, !dbg !44
  %237 = extractvalue { i32, i32, i32, i32 } %233, 3, !dbg !44
  %238 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %222, i1 %28) #2, !dbg !44
  %239 = extractvalue { i32, i32, i32, i32 } %238, 0, !dbg !44
  %240 = extractvalue { i32, i32, i32, i32 } %238, 1, !dbg !44
  %241 = extractvalue { i32, i32, i32, i32 } %238, 2, !dbg !44
  %242 = extractvalue { i32, i32, i32, i32 } %238, 3, !dbg !44
  %243 = add i32 %23, 6144, !dbg !45
  %244 = add i32 %243, %39, !dbg !46
  %245 = add i32 %243, %40, !dbg !46
  %246 = add i32 %243, %41, !dbg !46
  %247 = add i32 %243, %42, !dbg !46
  %248 = sext i32 %244 to i64, !dbg !47
  %249 = getelementptr float, ptr addrspace(1) %0, i64 %248, !dbg !47
  %250 = sext i32 %245 to i64, !dbg !47
  %251 = getelementptr float, ptr addrspace(1) %0, i64 %250, !dbg !47
  %252 = sext i32 %246 to i64, !dbg !47
  %253 = getelementptr float, ptr addrspace(1) %0, i64 %252, !dbg !47
  %254 = sext i32 %247 to i64, !dbg !47
  %255 = getelementptr float, ptr addrspace(1) %0, i64 %254, !dbg !47
  %256 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %249, i1 %28) #2, !dbg !48
  %257 = extractvalue { i32, i32, i32, i32 } %256, 0, !dbg !48
  %258 = extractvalue { i32, i32, i32, i32 } %256, 1, !dbg !48
  %259 = extractvalue { i32, i32, i32, i32 } %256, 2, !dbg !48
  %260 = extractvalue { i32, i32, i32, i32 } %256, 3, !dbg !48
  %261 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %251, i1 %28) #2, !dbg !48
  %262 = extractvalue { i32, i32, i32, i32 } %261, 0, !dbg !48
  %263 = extractvalue { i32, i32, i32, i32 } %261, 1, !dbg !48
  %264 = extractvalue { i32, i32, i32, i32 } %261, 2, !dbg !48
  %265 = extractvalue { i32, i32, i32, i32 } %261, 3, !dbg !48
  %266 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %253, i1 %28) #2, !dbg !48
  %267 = extractvalue { i32, i32, i32, i32 } %266, 0, !dbg !48
  %268 = extractvalue { i32, i32, i32, i32 } %266, 1, !dbg !48
  %269 = extractvalue { i32, i32, i32, i32 } %266, 2, !dbg !48
  %270 = extractvalue { i32, i32, i32, i32 } %266, 3, !dbg !48
  %271 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %255, i1 %28) #2, !dbg !48
  %272 = extractvalue { i32, i32, i32, i32 } %271, 0, !dbg !48
  %273 = extractvalue { i32, i32, i32, i32 } %271, 1, !dbg !48
  %274 = extractvalue { i32, i32, i32, i32 } %271, 2, !dbg !48
  %275 = extractvalue { i32, i32, i32, i32 } %271, 3, !dbg !48
  %276 = add i32 %23, 25165824, !dbg !49
  %277 = add i32 %276, %75, !dbg !50
  %278 = add i32 %276, %76, !dbg !50
  %279 = add i32 %276, %77, !dbg !50
  %280 = add i32 %276, %78, !dbg !50
  %281 = sext i32 %277 to i64, !dbg !51
  %282 = getelementptr float, ptr addrspace(1) %1, i64 %281, !dbg !51
  %283 = sext i32 %278 to i64, !dbg !51
  %284 = getelementptr float, ptr addrspace(1) %1, i64 %283, !dbg !51
  %285 = sext i32 %279 to i64, !dbg !51
  %286 = getelementptr float, ptr addrspace(1) %1, i64 %285, !dbg !51
  %287 = sext i32 %280 to i64, !dbg !51
  %288 = getelementptr float, ptr addrspace(1) %1, i64 %287, !dbg !51
  %289 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %282, i1 %28) #2, !dbg !52
  %290 = extractvalue { i32, i32, i32, i32 } %289, 0, !dbg !52
  %291 = extractvalue { i32, i32, i32, i32 } %289, 1, !dbg !52
  %292 = extractvalue { i32, i32, i32, i32 } %289, 2, !dbg !52
  %293 = extractvalue { i32, i32, i32, i32 } %289, 3, !dbg !52
  %294 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %284, i1 %28) #2, !dbg !52
  %295 = extractvalue { i32, i32, i32, i32 } %294, 0, !dbg !52
  %296 = extractvalue { i32, i32, i32, i32 } %294, 1, !dbg !52
  %297 = extractvalue { i32, i32, i32, i32 } %294, 2, !dbg !52
  %298 = extractvalue { i32, i32, i32, i32 } %294, 3, !dbg !52
  %299 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %286, i1 %28) #2, !dbg !52
  %300 = extractvalue { i32, i32, i32, i32 } %299, 0, !dbg !52
  %301 = extractvalue { i32, i32, i32, i32 } %299, 1, !dbg !52
  %302 = extractvalue { i32, i32, i32, i32 } %299, 2, !dbg !52
  %303 = extractvalue { i32, i32, i32, i32 } %299, 3, !dbg !52
  %304 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %288, i1 %28) #2, !dbg !52
  %305 = extractvalue { i32, i32, i32, i32 } %304, 0, !dbg !52
  %306 = extractvalue { i32, i32, i32, i32 } %304, 1, !dbg !52
  %307 = extractvalue { i32, i32, i32, i32 } %304, 2, !dbg !52
  %308 = extractvalue { i32, i32, i32, i32 } %304, 3, !dbg !52
  %309 = insertelement <2 x i32> poison, i32 %56, i64 0, !dbg !24
  %310 = insertelement <2 x i32> %309, i32 %125, i64 1, !dbg !24
  %311 = bitcast <2 x i32> %310 to <2 x float>, !dbg !24
  %312 = insertelement <2 x i32> poison, i32 %92, i64 0, !dbg !28
  %313 = insertelement <2 x i32> %312, i32 %158, i64 1, !dbg !28
  %314 = bitcast <2 x i32> %313 to <2 x float>, !dbg !28
  %315 = fmul <2 x float> %311, %314, !dbg !53
  %316 = insertelement <2 x i32> poison, i32 %57, i64 0, !dbg !24
  %317 = insertelement <2 x i32> %316, i32 %126, i64 1, !dbg !24
  %318 = bitcast <2 x i32> %317 to <2 x float>, !dbg !24
  %319 = insertelement <2 x i32> poison, i32 %93, i64 0, !dbg !28
  %320 = insertelement <2 x i32> %319, i32 %159, i64 1, !dbg !28
  %321 = bitcast <2 x i32> %320 to <2 x float>, !dbg !28
  %322 = fmul <2 x float> %318, %321, !dbg !53
  %323 = insertelement <2 x i32> poison, i32 %58, i64 0, !dbg !24
  %324 = insertelement <2 x i32> %323, i32 %127, i64 1, !dbg !24
  %325 = bitcast <2 x i32> %324 to <2 x float>, !dbg !24
  %326 = insertelement <2 x i32> poison, i32 %94, i64 0, !dbg !28
  %327 = insertelement <2 x i32> %326, i32 %160, i64 1, !dbg !28
  %328 = bitcast <2 x i32> %327 to <2 x float>, !dbg !28
  %329 = fmul <2 x float> %325, %328, !dbg !53
  %330 = insertelement <2 x i32> poison, i32 %59, i64 0, !dbg !24
  %331 = insertelement <2 x i32> %330, i32 %128, i64 1, !dbg !24
  %332 = bitcast <2 x i32> %331 to <2 x float>, !dbg !24
  %333 = insertelement <2 x i32> poison, i32 %95, i64 0, !dbg !28
  %334 = insertelement <2 x i32> %333, i32 %161, i64 1, !dbg !28
  %335 = bitcast <2 x i32> %334 to <2 x float>, !dbg !28
  %336 = fmul <2 x float> %332, %335, !dbg !53
  %337 = insertelement <2 x i32> poison, i32 %61, i64 0, !dbg !24
  %338 = insertelement <2 x i32> %337, i32 %130, i64 1, !dbg !24
  %339 = bitcast <2 x i32> %338 to <2 x float>, !dbg !24
  %340 = insertelement <2 x i32> poison, i32 %97, i64 0, !dbg !28
  %341 = insertelement <2 x i32> %340, i32 %163, i64 1, !dbg !28
  %342 = bitcast <2 x i32> %341 to <2 x float>, !dbg !28
  %343 = fmul <2 x float> %339, %342, !dbg !53
  %344 = insertelement <2 x i32> poison, i32 %62, i64 0, !dbg !24
  %345 = insertelement <2 x i32> %344, i32 %131, i64 1, !dbg !24
  %346 = bitcast <2 x i32> %345 to <2 x float>, !dbg !24
  %347 = insertelement <2 x i32> poison, i32 %98, i64 0, !dbg !28
  %348 = insertelement <2 x i32> %347, i32 %164, i64 1, !dbg !28
  %349 = bitcast <2 x i32> %348 to <2 x float>, !dbg !28
  %350 = fmul <2 x float> %346, %349, !dbg !53
  %351 = insertelement <2 x i32> poison, i32 %63, i64 0, !dbg !24
  %352 = insertelement <2 x i32> %351, i32 %132, i64 1, !dbg !24
  %353 = bitcast <2 x i32> %352 to <2 x float>, !dbg !24
  %354 = insertelement <2 x i32> poison, i32 %99, i64 0, !dbg !28
  %355 = insertelement <2 x i32> %354, i32 %165, i64 1, !dbg !28
  %356 = bitcast <2 x i32> %355 to <2 x float>, !dbg !28
  %357 = fmul <2 x float> %353, %356, !dbg !53
  %358 = insertelement <2 x i32> poison, i32 %64, i64 0, !dbg !24
  %359 = insertelement <2 x i32> %358, i32 %133, i64 1, !dbg !24
  %360 = bitcast <2 x i32> %359 to <2 x float>, !dbg !24
  %361 = insertelement <2 x i32> poison, i32 %100, i64 0, !dbg !28
  %362 = insertelement <2 x i32> %361, i32 %166, i64 1, !dbg !28
  %363 = bitcast <2 x i32> %362 to <2 x float>, !dbg !28
  %364 = fmul <2 x float> %360, %363, !dbg !53
  %365 = insertelement <2 x i32> poison, i32 %66, i64 0, !dbg !24
  %366 = insertelement <2 x i32> %365, i32 %135, i64 1, !dbg !24
  %367 = bitcast <2 x i32> %366 to <2 x float>, !dbg !24
  %368 = insertelement <2 x i32> poison, i32 %102, i64 0, !dbg !28
  %369 = insertelement <2 x i32> %368, i32 %168, i64 1, !dbg !28
  %370 = bitcast <2 x i32> %369 to <2 x float>, !dbg !28
  %371 = fmul <2 x float> %367, %370, !dbg !53
  %372 = insertelement <2 x i32> poison, i32 %67, i64 0, !dbg !24
  %373 = insertelement <2 x i32> %372, i32 %136, i64 1, !dbg !24
  %374 = bitcast <2 x i32> %373 to <2 x float>, !dbg !24
  %375 = insertelement <2 x i32> poison, i32 %103, i64 0, !dbg !28
  %376 = insertelement <2 x i32> %375, i32 %169, i64 1, !dbg !28
  %377 = bitcast <2 x i32> %376 to <2 x float>, !dbg !28
  %378 = fmul <2 x float> %374, %377, !dbg !53
  %379 = insertelement <2 x i32> poison, i32 %68, i64 0, !dbg !24
  %380 = insertelement <2 x i32> %379, i32 %137, i64 1, !dbg !24
  %381 = bitcast <2 x i32> %380 to <2 x float>, !dbg !24
  %382 = insertelement <2 x i32> poison, i32 %104, i64 0, !dbg !28
  %383 = insertelement <2 x i32> %382, i32 %170, i64 1, !dbg !28
  %384 = bitcast <2 x i32> %383 to <2 x float>, !dbg !28
  %385 = fmul <2 x float> %381, %384, !dbg !53
  %386 = insertelement <2 x i32> poison, i32 %69, i64 0, !dbg !24
  %387 = insertelement <2 x i32> %386, i32 %138, i64 1, !dbg !24
  %388 = bitcast <2 x i32> %387 to <2 x float>, !dbg !24
  %389 = insertelement <2 x i32> poison, i32 %105, i64 0, !dbg !28
  %390 = insertelement <2 x i32> %389, i32 %171, i64 1, !dbg !28
  %391 = bitcast <2 x i32> %390 to <2 x float>, !dbg !28
  %392 = fmul <2 x float> %388, %391, !dbg !53
  %393 = insertelement <2 x i32> poison, i32 %71, i64 0, !dbg !24
  %394 = insertelement <2 x i32> %393, i32 %140, i64 1, !dbg !24
  %395 = bitcast <2 x i32> %394 to <2 x float>, !dbg !24
  %396 = insertelement <2 x i32> poison, i32 %107, i64 0, !dbg !28
  %397 = insertelement <2 x i32> %396, i32 %173, i64 1, !dbg !28
  %398 = bitcast <2 x i32> %397 to <2 x float>, !dbg !28
  %399 = fmul <2 x float> %395, %398, !dbg !53
  %400 = insertelement <2 x i32> poison, i32 %72, i64 0, !dbg !24
  %401 = insertelement <2 x i32> %400, i32 %141, i64 1, !dbg !24
  %402 = bitcast <2 x i32> %401 to <2 x float>, !dbg !24
  %403 = insertelement <2 x i32> poison, i32 %108, i64 0, !dbg !28
  %404 = insertelement <2 x i32> %403, i32 %174, i64 1, !dbg !28
  %405 = bitcast <2 x i32> %404 to <2 x float>, !dbg !28
  %406 = fmul <2 x float> %402, %405, !dbg !53
  %407 = insertelement <2 x i32> poison, i32 %73, i64 0, !dbg !24
  %408 = insertelement <2 x i32> %407, i32 %142, i64 1, !dbg !24
  %409 = bitcast <2 x i32> %408 to <2 x float>, !dbg !24
  %410 = insertelement <2 x i32> poison, i32 %109, i64 0, !dbg !28
  %411 = insertelement <2 x i32> %410, i32 %175, i64 1, !dbg !28
  %412 = bitcast <2 x i32> %411 to <2 x float>, !dbg !28
  %413 = fmul <2 x float> %409, %412, !dbg !53
  %414 = insertelement <2 x i32> poison, i32 %74, i64 0, !dbg !24
  %415 = insertelement <2 x i32> %414, i32 %143, i64 1, !dbg !24
  %416 = bitcast <2 x i32> %415 to <2 x float>, !dbg !24
  %417 = insertelement <2 x i32> poison, i32 %110, i64 0, !dbg !28
  %418 = insertelement <2 x i32> %417, i32 %176, i64 1, !dbg !28
  %419 = bitcast <2 x i32> %418 to <2 x float>, !dbg !28
  %420 = fmul <2 x float> %416, %419, !dbg !53
  %shift = shufflevector <2 x float> %315, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !54
  %421 = fadd <2 x float> %315, %shift, !dbg !54
  %shift34 = shufflevector <2 x float> %322, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !54
  %422 = fadd <2 x float> %322, %shift34, !dbg !54
  %shift35 = shufflevector <2 x float> %329, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !54
  %423 = fadd <2 x float> %329, %shift35, !dbg !54
  %shift36 = shufflevector <2 x float> %336, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !54
  %424 = fadd <2 x float> %336, %shift36, !dbg !54
  %shift37 = shufflevector <2 x float> %343, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !54
  %425 = fadd <2 x float> %343, %shift37, !dbg !54
  %shift38 = shufflevector <2 x float> %350, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !54
  %426 = fadd <2 x float> %350, %shift38, !dbg !54
  %shift39 = shufflevector <2 x float> %357, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !54
  %427 = fadd <2 x float> %357, %shift39, !dbg !54
  %shift40 = shufflevector <2 x float> %364, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !54
  %428 = fadd <2 x float> %364, %shift40, !dbg !54
  %shift41 = shufflevector <2 x float> %371, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !54
  %429 = fadd <2 x float> %371, %shift41, !dbg !54
  %shift42 = shufflevector <2 x float> %378, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !54
  %430 = fadd <2 x float> %378, %shift42, !dbg !54
  %shift43 = shufflevector <2 x float> %385, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !54
  %431 = fadd <2 x float> %385, %shift43, !dbg !54
  %shift44 = shufflevector <2 x float> %392, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !54
  %432 = fadd <2 x float> %392, %shift44, !dbg !54
  %shift45 = shufflevector <2 x float> %399, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !54
  %433 = fadd <2 x float> %399, %shift45, !dbg !54
  %shift46 = shufflevector <2 x float> %406, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !54
  %434 = fadd <2 x float> %406, %shift46, !dbg !54
  %shift47 = shufflevector <2 x float> %413, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !54
  %435 = fadd <2 x float> %413, %shift47, !dbg !54
  %shift48 = shufflevector <2 x float> %420, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !54
  %436 = fadd <2 x float> %420, %shift48, !dbg !54
  %437 = insertelement <2 x i32> poison, i32 %191, i64 0, !dbg !40
  %438 = insertelement <2 x i32> %437, i32 %257, i64 1, !dbg !40
  %439 = bitcast <2 x i32> %438 to <2 x float>, !dbg !40
  %440 = insertelement <2 x i32> poison, i32 %224, i64 0, !dbg !44
  %441 = insertelement <2 x i32> %440, i32 %290, i64 1, !dbg !44
  %442 = bitcast <2 x i32> %441 to <2 x float>, !dbg !44
  %443 = fmul <2 x float> %439, %442, !dbg !55
  %444 = fadd <2 x float> %421, %443, !dbg !56
  %445 = insertelement <2 x i32> poison, i32 %192, i64 0, !dbg !40
  %446 = insertelement <2 x i32> %445, i32 %258, i64 1, !dbg !40
  %447 = bitcast <2 x i32> %446 to <2 x float>, !dbg !40
  %448 = insertelement <2 x i32> poison, i32 %225, i64 0, !dbg !44
  %449 = insertelement <2 x i32> %448, i32 %291, i64 1, !dbg !44
  %450 = bitcast <2 x i32> %449 to <2 x float>, !dbg !44
  %451 = fmul <2 x float> %447, %450, !dbg !55
  %452 = fadd <2 x float> %422, %451, !dbg !56
  %453 = insertelement <2 x i32> poison, i32 %193, i64 0, !dbg !40
  %454 = insertelement <2 x i32> %453, i32 %259, i64 1, !dbg !40
  %455 = bitcast <2 x i32> %454 to <2 x float>, !dbg !40
  %456 = insertelement <2 x i32> poison, i32 %226, i64 0, !dbg !44
  %457 = insertelement <2 x i32> %456, i32 %292, i64 1, !dbg !44
  %458 = bitcast <2 x i32> %457 to <2 x float>, !dbg !44
  %459 = fmul <2 x float> %455, %458, !dbg !55
  %460 = fadd <2 x float> %423, %459, !dbg !56
  %461 = insertelement <2 x i32> poison, i32 %194, i64 0, !dbg !40
  %462 = insertelement <2 x i32> %461, i32 %260, i64 1, !dbg !40
  %463 = bitcast <2 x i32> %462 to <2 x float>, !dbg !40
  %464 = insertelement <2 x i32> poison, i32 %227, i64 0, !dbg !44
  %465 = insertelement <2 x i32> %464, i32 %293, i64 1, !dbg !44
  %466 = bitcast <2 x i32> %465 to <2 x float>, !dbg !44
  %467 = fmul <2 x float> %463, %466, !dbg !55
  %468 = fadd <2 x float> %424, %467, !dbg !56
  %469 = insertelement <2 x i32> poison, i32 %196, i64 0, !dbg !40
  %470 = insertelement <2 x i32> %469, i32 %262, i64 1, !dbg !40
  %471 = bitcast <2 x i32> %470 to <2 x float>, !dbg !40
  %472 = insertelement <2 x i32> poison, i32 %229, i64 0, !dbg !44
  %473 = insertelement <2 x i32> %472, i32 %295, i64 1, !dbg !44
  %474 = bitcast <2 x i32> %473 to <2 x float>, !dbg !44
  %475 = fmul <2 x float> %471, %474, !dbg !55
  %476 = fadd <2 x float> %425, %475, !dbg !56
  %477 = insertelement <2 x i32> poison, i32 %197, i64 0, !dbg !40
  %478 = insertelement <2 x i32> %477, i32 %263, i64 1, !dbg !40
  %479 = bitcast <2 x i32> %478 to <2 x float>, !dbg !40
  %480 = insertelement <2 x i32> poison, i32 %230, i64 0, !dbg !44
  %481 = insertelement <2 x i32> %480, i32 %296, i64 1, !dbg !44
  %482 = bitcast <2 x i32> %481 to <2 x float>, !dbg !44
  %483 = fmul <2 x float> %479, %482, !dbg !55
  %484 = fadd <2 x float> %426, %483, !dbg !56
  %485 = insertelement <2 x i32> poison, i32 %198, i64 0, !dbg !40
  %486 = insertelement <2 x i32> %485, i32 %264, i64 1, !dbg !40
  %487 = bitcast <2 x i32> %486 to <2 x float>, !dbg !40
  %488 = insertelement <2 x i32> poison, i32 %231, i64 0, !dbg !44
  %489 = insertelement <2 x i32> %488, i32 %297, i64 1, !dbg !44
  %490 = bitcast <2 x i32> %489 to <2 x float>, !dbg !44
  %491 = fmul <2 x float> %487, %490, !dbg !55
  %492 = fadd <2 x float> %427, %491, !dbg !56
  %493 = insertelement <2 x i32> poison, i32 %199, i64 0, !dbg !40
  %494 = insertelement <2 x i32> %493, i32 %265, i64 1, !dbg !40
  %495 = bitcast <2 x i32> %494 to <2 x float>, !dbg !40
  %496 = insertelement <2 x i32> poison, i32 %232, i64 0, !dbg !44
  %497 = insertelement <2 x i32> %496, i32 %298, i64 1, !dbg !44
  %498 = bitcast <2 x i32> %497 to <2 x float>, !dbg !44
  %499 = fmul <2 x float> %495, %498, !dbg !55
  %500 = fadd <2 x float> %428, %499, !dbg !56
  %501 = insertelement <2 x i32> poison, i32 %201, i64 0, !dbg !40
  %502 = insertelement <2 x i32> %501, i32 %267, i64 1, !dbg !40
  %503 = bitcast <2 x i32> %502 to <2 x float>, !dbg !40
  %504 = insertelement <2 x i32> poison, i32 %234, i64 0, !dbg !44
  %505 = insertelement <2 x i32> %504, i32 %300, i64 1, !dbg !44
  %506 = bitcast <2 x i32> %505 to <2 x float>, !dbg !44
  %507 = fmul <2 x float> %503, %506, !dbg !55
  %508 = fadd <2 x float> %429, %507, !dbg !56
  %509 = insertelement <2 x i32> poison, i32 %202, i64 0, !dbg !40
  %510 = insertelement <2 x i32> %509, i32 %268, i64 1, !dbg !40
  %511 = bitcast <2 x i32> %510 to <2 x float>, !dbg !40
  %512 = insertelement <2 x i32> poison, i32 %235, i64 0, !dbg !44
  %513 = insertelement <2 x i32> %512, i32 %301, i64 1, !dbg !44
  %514 = bitcast <2 x i32> %513 to <2 x float>, !dbg !44
  %515 = fmul <2 x float> %511, %514, !dbg !55
  %516 = fadd <2 x float> %430, %515, !dbg !56
  %517 = insertelement <2 x i32> poison, i32 %203, i64 0, !dbg !40
  %518 = insertelement <2 x i32> %517, i32 %269, i64 1, !dbg !40
  %519 = bitcast <2 x i32> %518 to <2 x float>, !dbg !40
  %520 = insertelement <2 x i32> poison, i32 %236, i64 0, !dbg !44
  %521 = insertelement <2 x i32> %520, i32 %302, i64 1, !dbg !44
  %522 = bitcast <2 x i32> %521 to <2 x float>, !dbg !44
  %523 = fmul <2 x float> %519, %522, !dbg !55
  %524 = fadd <2 x float> %431, %523, !dbg !56
  %525 = insertelement <2 x i32> poison, i32 %204, i64 0, !dbg !40
  %526 = insertelement <2 x i32> %525, i32 %270, i64 1, !dbg !40
  %527 = bitcast <2 x i32> %526 to <2 x float>, !dbg !40
  %528 = insertelement <2 x i32> poison, i32 %237, i64 0, !dbg !44
  %529 = insertelement <2 x i32> %528, i32 %303, i64 1, !dbg !44
  %530 = bitcast <2 x i32> %529 to <2 x float>, !dbg !44
  %531 = fmul <2 x float> %527, %530, !dbg !55
  %532 = fadd <2 x float> %432, %531, !dbg !56
  %533 = insertelement <2 x i32> poison, i32 %206, i64 0, !dbg !40
  %534 = insertelement <2 x i32> %533, i32 %272, i64 1, !dbg !40
  %535 = bitcast <2 x i32> %534 to <2 x float>, !dbg !40
  %536 = insertelement <2 x i32> poison, i32 %239, i64 0, !dbg !44
  %537 = insertelement <2 x i32> %536, i32 %305, i64 1, !dbg !44
  %538 = bitcast <2 x i32> %537 to <2 x float>, !dbg !44
  %539 = fmul <2 x float> %535, %538, !dbg !55
  %540 = fadd <2 x float> %433, %539, !dbg !56
  %541 = insertelement <2 x i32> poison, i32 %207, i64 0, !dbg !40
  %542 = insertelement <2 x i32> %541, i32 %273, i64 1, !dbg !40
  %543 = bitcast <2 x i32> %542 to <2 x float>, !dbg !40
  %544 = insertelement <2 x i32> poison, i32 %240, i64 0, !dbg !44
  %545 = insertelement <2 x i32> %544, i32 %306, i64 1, !dbg !44
  %546 = bitcast <2 x i32> %545 to <2 x float>, !dbg !44
  %547 = fmul <2 x float> %543, %546, !dbg !55
  %548 = fadd <2 x float> %434, %547, !dbg !56
  %549 = insertelement <2 x i32> poison, i32 %208, i64 0, !dbg !40
  %550 = insertelement <2 x i32> %549, i32 %274, i64 1, !dbg !40
  %551 = bitcast <2 x i32> %550 to <2 x float>, !dbg !40
  %552 = insertelement <2 x i32> poison, i32 %241, i64 0, !dbg !44
  %553 = insertelement <2 x i32> %552, i32 %307, i64 1, !dbg !44
  %554 = bitcast <2 x i32> %553 to <2 x float>, !dbg !44
  %555 = fmul <2 x float> %551, %554, !dbg !55
  %556 = fadd <2 x float> %435, %555, !dbg !56
  %557 = insertelement <2 x i32> poison, i32 %209, i64 0, !dbg !40
  %558 = insertelement <2 x i32> %557, i32 %275, i64 1, !dbg !40
  %559 = bitcast <2 x i32> %558 to <2 x float>, !dbg !40
  %560 = insertelement <2 x i32> poison, i32 %242, i64 0, !dbg !44
  %561 = insertelement <2 x i32> %560, i32 %308, i64 1, !dbg !44
  %562 = bitcast <2 x i32> %561 to <2 x float>, !dbg !44
  %563 = fmul <2 x float> %559, %562, !dbg !55
  %564 = fadd <2 x float> %436, %563, !dbg !56
  %shift49 = shufflevector <2 x float> %443, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !57
  %565 = fadd <2 x float> %444, %shift49, !dbg !57
  %566 = extractelement <2 x float> %565, i64 0, !dbg !57
  %shift50 = shufflevector <2 x float> %451, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !57
  %567 = fadd <2 x float> %452, %shift50, !dbg !57
  %568 = extractelement <2 x float> %567, i64 0, !dbg !57
  %shift51 = shufflevector <2 x float> %459, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !57
  %569 = fadd <2 x float> %460, %shift51, !dbg !57
  %570 = extractelement <2 x float> %569, i64 0, !dbg !57
  %shift52 = shufflevector <2 x float> %467, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !57
  %571 = fadd <2 x float> %468, %shift52, !dbg !57
  %572 = extractelement <2 x float> %571, i64 0, !dbg !57
  %shift53 = shufflevector <2 x float> %475, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !57
  %573 = fadd <2 x float> %476, %shift53, !dbg !57
  %574 = extractelement <2 x float> %573, i64 0, !dbg !57
  %shift54 = shufflevector <2 x float> %483, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !57
  %575 = fadd <2 x float> %484, %shift54, !dbg !57
  %576 = extractelement <2 x float> %575, i64 0, !dbg !57
  %shift55 = shufflevector <2 x float> %491, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !57
  %577 = fadd <2 x float> %492, %shift55, !dbg !57
  %578 = extractelement <2 x float> %577, i64 0, !dbg !57
  %shift56 = shufflevector <2 x float> %499, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !57
  %579 = fadd <2 x float> %500, %shift56, !dbg !57
  %580 = extractelement <2 x float> %579, i64 0, !dbg !57
  %shift57 = shufflevector <2 x float> %507, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !57
  %581 = fadd <2 x float> %508, %shift57, !dbg !57
  %582 = extractelement <2 x float> %581, i64 0, !dbg !57
  %shift58 = shufflevector <2 x float> %515, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !57
  %583 = fadd <2 x float> %516, %shift58, !dbg !57
  %584 = extractelement <2 x float> %583, i64 0, !dbg !57
  %shift59 = shufflevector <2 x float> %523, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !57
  %585 = fadd <2 x float> %524, %shift59, !dbg !57
  %586 = extractelement <2 x float> %585, i64 0, !dbg !57
  %shift60 = shufflevector <2 x float> %531, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !57
  %587 = fadd <2 x float> %532, %shift60, !dbg !57
  %588 = extractelement <2 x float> %587, i64 0, !dbg !57
  %shift61 = shufflevector <2 x float> %539, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !57
  %589 = fadd <2 x float> %540, %shift61, !dbg !57
  %590 = extractelement <2 x float> %589, i64 0, !dbg !57
  %shift62 = shufflevector <2 x float> %547, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !57
  %591 = fadd <2 x float> %548, %shift62, !dbg !57
  %592 = extractelement <2 x float> %591, i64 0, !dbg !57
  %shift63 = shufflevector <2 x float> %555, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !57
  %593 = fadd <2 x float> %556, %shift63, !dbg !57
  %594 = extractelement <2 x float> %593, i64 0, !dbg !57
  %shift64 = shufflevector <2 x float> %563, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !57
  %595 = fadd <2 x float> %564, %shift64, !dbg !57
  %596 = extractelement <2 x float> %595, i64 0, !dbg !57
  %597 = shl i32 %24, 12, !dbg !58
  %598 = shl i32 %25, 12, !dbg !58
  %599 = shl i32 %26, 12, !dbg !58
  %600 = shl i32 %27, 12, !dbg !58
  %601 = shl i32 %37, 21, !dbg !59
  %602 = add i32 %601, %.decomposed, !dbg !60
  %603 = add i32 %602, %597, !dbg !61
  %604 = add i32 %602, %598, !dbg !61
  %605 = add i32 %602, %599, !dbg !61
  %606 = add i32 %602, %600, !dbg !61
  %607 = sext i32 %603 to i64, !dbg !62
  %608 = getelementptr float, ptr addrspace(1) %2, i64 %607, !dbg !62
  %609 = sext i32 %604 to i64, !dbg !62
  %610 = getelementptr float, ptr addrspace(1) %2, i64 %609, !dbg !62
  %611 = sext i32 %605 to i64, !dbg !62
  %612 = getelementptr float, ptr addrspace(1) %2, i64 %611, !dbg !62
  %613 = sext i32 %606 to i64, !dbg !62
  %614 = getelementptr float, ptr addrspace(1) %2, i64 %613, !dbg !62
  %615 = shl i32 %8, 6, !dbg !63
  %616 = and i32 %615, 4032, !dbg !63
  %617 = or disjoint i32 %616, %10, !dbg !63
  %618 = and i32 %11, 1020, !dbg !63
  %619 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %616, !dbg !63
  %620 = getelementptr float, ptr addrspace(3) %619, i32 %617, !dbg !63
  %621 = bitcast float %566 to <1 x i32>, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %620, <1 x i32> %621, i1 true) #2, !dbg !63
  %622 = or disjoint i32 %617, 16, !dbg !63
  %623 = lshr i32 %622, 2, !dbg !63
  %624 = getelementptr float, ptr addrspace(3) @global_smem, i32 %623, !dbg !63
  %625 = getelementptr float, ptr addrspace(3) %624, i32 %622, !dbg !63
  %626 = bitcast float %568 to <1 x i32>, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %625, <1 x i32> %626, i1 true) #2, !dbg !63
  %627 = or disjoint i32 %617, 32, !dbg !63
  %628 = lshr i32 %627, 2, !dbg !63
  %629 = getelementptr float, ptr addrspace(3) @global_smem, i32 %628, !dbg !63
  %630 = getelementptr float, ptr addrspace(3) %629, i32 %627, !dbg !63
  %631 = bitcast float %570 to <1 x i32>, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %630, <1 x i32> %631, i1 true) #2, !dbg !63
  %632 = or disjoint i32 %617, 48, !dbg !63
  %633 = lshr i32 %632, 2, !dbg !63
  %634 = getelementptr float, ptr addrspace(3) @global_smem, i32 %633, !dbg !63
  %635 = getelementptr float, ptr addrspace(3) %634, i32 %632, !dbg !63
  %636 = bitcast float %572 to <1 x i32>, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %635, <1 x i32> %636, i1 true) #2, !dbg !63
  %637 = or disjoint i32 %617, 4, !dbg !63
  %638 = getelementptr float, ptr addrspace(3) %619, i32 %637, !dbg !63
  %639 = bitcast float %574 to <1 x i32>, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %638, <1 x i32> %639, i1 true) #2, !dbg !63
  %640 = or disjoint i32 %617, 20, !dbg !63
  %641 = lshr i32 %640, 2, !dbg !63
  %642 = and i32 %641, 1012, !dbg !63
  %643 = getelementptr float, ptr addrspace(3) @global_smem, i32 %642, !dbg !63
  %644 = getelementptr float, ptr addrspace(3) %643, i32 %640, !dbg !63
  %645 = bitcast float %576 to <1 x i32>, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %644, <1 x i32> %645, i1 true) #2, !dbg !63
  %646 = or disjoint i32 %617, 36, !dbg !63
  %647 = lshr i32 %646, 2, !dbg !63
  %648 = and i32 %647, 1016, !dbg !63
  %649 = getelementptr float, ptr addrspace(3) @global_smem, i32 %648, !dbg !63
  %650 = getelementptr float, ptr addrspace(3) %649, i32 %646, !dbg !63
  %651 = bitcast float %578 to <1 x i32>, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %650, <1 x i32> %651, i1 true) #2, !dbg !63
  %652 = or disjoint i32 %617, 52, !dbg !63
  %653 = lshr i32 %652, 2, !dbg !63
  %654 = and i32 %653, 1020, !dbg !63
  %655 = getelementptr float, ptr addrspace(3) @global_smem, i32 %654, !dbg !63
  %656 = getelementptr float, ptr addrspace(3) %655, i32 %652, !dbg !63
  %657 = bitcast float %580 to <1 x i32>, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %656, <1 x i32> %657, i1 true) #2, !dbg !63
  %658 = or disjoint i32 %617, 8, !dbg !63
  %659 = getelementptr float, ptr addrspace(3) %619, i32 %658, !dbg !63
  %660 = bitcast float %582 to <1 x i32>, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %659, <1 x i32> %660, i1 true) #2, !dbg !63
  %661 = or disjoint i32 %617, 24, !dbg !63
  %662 = lshr i32 %661, 2, !dbg !63
  %663 = and i32 %662, 1012, !dbg !63
  %664 = getelementptr float, ptr addrspace(3) @global_smem, i32 %663, !dbg !63
  %665 = getelementptr float, ptr addrspace(3) %664, i32 %661, !dbg !63
  %666 = bitcast float %584 to <1 x i32>, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %665, <1 x i32> %666, i1 true) #2, !dbg !63
  %667 = or disjoint i32 %617, 40, !dbg !63
  %668 = lshr i32 %667, 2, !dbg !63
  %669 = and i32 %668, 1016, !dbg !63
  %670 = getelementptr float, ptr addrspace(3) @global_smem, i32 %669, !dbg !63
  %671 = getelementptr float, ptr addrspace(3) %670, i32 %667, !dbg !63
  %672 = bitcast float %586 to <1 x i32>, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %671, <1 x i32> %672, i1 true) #2, !dbg !63
  %673 = or disjoint i32 %617, 56, !dbg !63
  %674 = lshr i32 %673, 2, !dbg !63
  %675 = and i32 %674, 1020, !dbg !63
  %676 = getelementptr float, ptr addrspace(3) @global_smem, i32 %675, !dbg !63
  %677 = getelementptr float, ptr addrspace(3) %676, i32 %673, !dbg !63
  %678 = bitcast float %588 to <1 x i32>, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %677, <1 x i32> %678, i1 true) #2, !dbg !63
  %679 = or disjoint i32 %617, 12, !dbg !63
  %680 = getelementptr float, ptr addrspace(3) %619, i32 %679, !dbg !63
  %681 = bitcast float %590 to <1 x i32>, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %680, <1 x i32> %681, i1 true) #2, !dbg !63
  %682 = or disjoint i32 %617, 28, !dbg !63
  %683 = lshr i32 %682, 2, !dbg !63
  %684 = and i32 %683, 1012, !dbg !63
  %685 = getelementptr float, ptr addrspace(3) @global_smem, i32 %684, !dbg !63
  %686 = getelementptr float, ptr addrspace(3) %685, i32 %682, !dbg !63
  %687 = bitcast float %592 to <1 x i32>, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %686, <1 x i32> %687, i1 true) #2, !dbg !63
  %688 = or disjoint i32 %617, 44, !dbg !63
  %689 = lshr i32 %688, 2, !dbg !63
  %690 = and i32 %689, 1016, !dbg !63
  %691 = getelementptr float, ptr addrspace(3) @global_smem, i32 %690, !dbg !63
  %692 = getelementptr float, ptr addrspace(3) %691, i32 %688, !dbg !63
  %693 = bitcast float %594 to <1 x i32>, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %692, <1 x i32> %693, i1 true) #2, !dbg !63
  %694 = or disjoint i32 %617, 60, !dbg !63
  %695 = lshr i32 %694, 2, !dbg !63
  %696 = and i32 %695, 1020, !dbg !63
  %697 = getelementptr float, ptr addrspace(3) @global_smem, i32 %696, !dbg !63
  %698 = getelementptr float, ptr addrspace(3) %697, i32 %694, !dbg !63
  %699 = bitcast float %596 to <1 x i32>, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %698, <1 x i32> %699, i1 true) #2, !dbg !63
  tail call void @llvm.nvvm.barrier0(), !dbg !63
  %700 = and i32 %8, 252, !dbg !63
  %701 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %700, !dbg !63
  %702 = getelementptr inbounds float, ptr addrspace(3) %701, i32 %618, !dbg !63
  %703 = or disjoint i32 %618, 1024, !dbg !63
  %704 = lshr exact i32 %703, 2, !dbg !63
  %705 = and i32 %704, 508, !dbg !63
  %706 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %705, !dbg !63
  %707 = getelementptr inbounds float, ptr addrspace(3) %706, i32 %703, !dbg !63
  %708 = load <4 x i32>, ptr addrspace(3) %707, align 16, !dbg !63
  %709 = or disjoint i32 %618, 2048, !dbg !63
  %710 = lshr exact i32 %709, 2, !dbg !63
  %711 = and i32 %710, 764, !dbg !63
  %712 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %711, !dbg !63
  %713 = getelementptr inbounds float, ptr addrspace(3) %712, i32 %709, !dbg !63
  %714 = load <4 x i32>, ptr addrspace(3) %713, align 16, !dbg !63
  %715 = or disjoint i32 %618, 3072, !dbg !63
  %716 = lshr exact i32 %715, 2, !dbg !63
  %717 = and i32 %716, 1020, !dbg !63
  %718 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %717, !dbg !63
  %719 = getelementptr inbounds float, ptr addrspace(3) %718, i32 %715, !dbg !63
  %720 = load <4 x i32>, ptr addrspace(3) %719, align 16, !dbg !63
  %.extract = load i32, ptr addrspace(3) %702, align 16, !dbg !63
  %721 = getelementptr inbounds i8, ptr addrspace(3) %702, i32 4, !dbg !63
  %.extract19 = load i32, ptr addrspace(3) %721, align 4, !dbg !63
  %722 = getelementptr inbounds i8, ptr addrspace(3) %702, i32 8, !dbg !63
  %.extract20 = load i32, ptr addrspace(3) %722, align 8, !dbg !63
  %723 = getelementptr inbounds i8, ptr addrspace(3) %702, i32 12, !dbg !63
  %.extract21 = load i32, ptr addrspace(3) %723, align 4, !dbg !63
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract19, i32 %.extract20, i32 %.extract21, ptr addrspace(1) %608, i1 %29) #2, !dbg !63
  %.extract22 = extractelement <4 x i32> %708, i64 0, !dbg !63
  %.extract23 = extractelement <4 x i32> %708, i64 1, !dbg !63
  %.extract24 = extractelement <4 x i32> %708, i64 2, !dbg !63
  %.extract25 = extractelement <4 x i32> %708, i64 3, !dbg !63
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract22, i32 %.extract23, i32 %.extract24, i32 %.extract25, ptr addrspace(1) %610, i1 %30) #2, !dbg !63
  %.extract26 = extractelement <4 x i32> %714, i64 0, !dbg !63
  %.extract27 = extractelement <4 x i32> %714, i64 1, !dbg !63
  %.extract28 = extractelement <4 x i32> %714, i64 2, !dbg !63
  %.extract29 = extractelement <4 x i32> %714, i64 3, !dbg !63
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract26, i32 %.extract27, i32 %.extract28, i32 %.extract29, ptr addrspace(1) %612, i1 %31) #2, !dbg !63
  %.extract30 = extractelement <4 x i32> %720, i64 0, !dbg !63
  %.extract31 = extractelement <4 x i32> %720, i64 1, !dbg !63
  %.extract32 = extractelement <4 x i32> %720, i64 2, !dbg !63
  %.extract33 = extractelement <4 x i32> %720, i64 3, !dbg !63
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract30, i32 %.extract31, i32 %.extract32, i32 %.extract33, ptr addrspace(1) %614, i1 %32) #2, !dbg !63
  ret void, !dbg !64
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c3api6onjseajvp6qxcdvzkpjeo73u5r6t76ylynvqyrjhahbfcd.py", directory: "inductor_cache/3a")
!4 = !{ptr @triton_poi_fused__softmax_mul_sum_12, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__softmax_mul_sum_12, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__softmax_mul_sum_12", linkageName: "triton_poi_fused__softmax_mul_sum_12", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 29, column: 19, scope: !7)
!20 = !DILocation(line: 31, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 39, scope: !7)
!22 = !DILocation(line: 32, column: 35, scope: !7)
!23 = !DILocation(line: 32, column: 30, scope: !7)
!24 = !DILocation(line: 32, column: 44, scope: !7)
!25 = !DILocation(line: 33, column: 39, scope: !7)
!26 = !DILocation(line: 33, column: 35, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 33, column: 44, scope: !7)
!29 = !DILocation(line: 34, column: 37, scope: !7)
!30 = !DILocation(line: 34, column: 42, scope: !7)
!31 = !DILocation(line: 34, column: 30, scope: !7)
!32 = !DILocation(line: 34, column: 51, scope: !7)
!33 = !DILocation(line: 35, column: 40, scope: !7)
!34 = !DILocation(line: 35, column: 45, scope: !7)
!35 = !DILocation(line: 35, column: 30, scope: !7)
!36 = !DILocation(line: 35, column: 54, scope: !7)
!37 = !DILocation(line: 36, column: 37, scope: !7)
!38 = !DILocation(line: 36, column: 42, scope: !7)
!39 = !DILocation(line: 36, column: 30, scope: !7)
!40 = !DILocation(line: 36, column: 51, scope: !7)
!41 = !DILocation(line: 37, column: 41, scope: !7)
!42 = !DILocation(line: 37, column: 46, scope: !7)
!43 = !DILocation(line: 37, column: 30, scope: !7)
!44 = !DILocation(line: 37, column: 55, scope: !7)
!45 = !DILocation(line: 38, column: 38, scope: !7)
!46 = !DILocation(line: 38, column: 43, scope: !7)
!47 = !DILocation(line: 38, column: 31, scope: !7)
!48 = !DILocation(line: 38, column: 52, scope: !7)
!49 = !DILocation(line: 39, column: 42, scope: !7)
!50 = !DILocation(line: 39, column: 47, scope: !7)
!51 = !DILocation(line: 39, column: 31, scope: !7)
!52 = !DILocation(line: 39, column: 56, scope: !7)
!53 = !DILocation(line: 40, column: 18, scope: !7)
!54 = !DILocation(line: 42, column: 18, scope: !7)
!55 = !DILocation(line: 43, column: 18, scope: !7)
!56 = !DILocation(line: 44, column: 19, scope: !7)
!57 = !DILocation(line: 46, column: 20, scope: !7)
!58 = !DILocation(line: 47, column: 35, scope: !7)
!59 = !DILocation(line: 47, column: 48, scope: !7)
!60 = !DILocation(line: 47, column: 30, scope: !7)
!61 = !DILocation(line: 47, column: 40, scope: !7)
!62 = !DILocation(line: 47, column: 25, scope: !7)
!63 = !DILocation(line: 47, column: 60, scope: !7)
!64 = !DILocation(line: 47, column: 4, scope: !7)
