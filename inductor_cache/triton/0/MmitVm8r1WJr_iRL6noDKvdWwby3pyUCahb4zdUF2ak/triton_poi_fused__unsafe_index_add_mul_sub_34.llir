; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__unsafe_index_add_mul_sub_34(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, i32 %10) local_unnamed_addr !dbg !7 {
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %13 = shl i32 %12, 9, !dbg !11
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %15 = shl i32 %14, 2, !dbg !12
  %16 = and i32 %15, 508, !dbg !12
  %17 = or disjoint i32 %13, %16, !dbg !13
  %18 = or disjoint i32 %17, 2, !dbg !13
  %.frozen = freeze i32 %17, !dbg !14
  %19 = sdiv i32 %.frozen, 64, !dbg !14
  %20 = srem i32 %19, 64, !dbg !15
  %21 = mul i32 %19, 64, !dbg !16
  %.decomposed = sub i32 %.frozen, %21, !dbg !16
  %22 = srem i32 %18, 64, !dbg !16
  %23 = sdiv i32 %17, 4096, !dbg !17
  %24 = sext i32 %20 to i64, !dbg !18
  %25 = getelementptr i64, ptr addrspace(1) %2, i64 %24, !dbg !18
  %26 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %25, i1 true) #1, !dbg !19
  %27 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %25, i1 true) #1, !dbg !19
  %28 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %25, i1 true) #1, !dbg !19
  %29 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %25, i1 true) #1, !dbg !19
  %30 = sext i32 %.decomposed to i64, !dbg !20
  %31 = getelementptr i64, ptr addrspace(1) %3, i64 %30, !dbg !20
  %32 = sext i32 %22 to i64, !dbg !20
  %33 = getelementptr i64, ptr addrspace(1) %3, i64 %32, !dbg !20
  %34 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %31, i1 true) #1, !dbg !21
  %35 = extractvalue { i64, i64 } %34, 0, !dbg !21
  %36 = extractvalue { i64, i64 } %34, 1, !dbg !21
  %37 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %33, i1 true) #1, !dbg !21
  %38 = extractvalue { i64, i64 } %37, 0, !dbg !21
  %39 = extractvalue { i64, i64 } %37, 1, !dbg !21
  %40 = getelementptr i64, ptr addrspace(1) %5, i64 %30, !dbg !22
  %41 = getelementptr i64, ptr addrspace(1) %5, i64 %32, !dbg !22
  %42 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %40, i1 true) #1, !dbg !23
  %43 = extractvalue { i64, i64 } %42, 0, !dbg !23
  %44 = extractvalue { i64, i64 } %42, 1, !dbg !23
  %45 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %41, i1 true) #1, !dbg !23
  %46 = extractvalue { i64, i64 } %45, 0, !dbg !23
  %47 = extractvalue { i64, i64 } %45, 1, !dbg !23
  %48 = getelementptr float, ptr addrspace(1) %6, i64 %30, !dbg !24
  %49 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %48, i1 true) #1, !dbg !25
  %50 = extractvalue { i32, i32, i32, i32 } %49, 0, !dbg !25
  %51 = extractvalue { i32, i32, i32, i32 } %49, 1, !dbg !25
  %52 = extractvalue { i32, i32, i32, i32 } %49, 2, !dbg !25
  %53 = extractvalue { i32, i32, i32, i32 } %49, 3, !dbg !25
  %54 = getelementptr i64, ptr addrspace(1) %7, i64 %24, !dbg !26
  %55 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %54, i1 true) #1, !dbg !27
  %56 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %54, i1 true) #1, !dbg !27
  %57 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %54, i1 true) #1, !dbg !27
  %58 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %54, i1 true) #1, !dbg !27
  %59 = getelementptr float, ptr addrspace(1) %8, i64 %24, !dbg !28
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 true) #1, !dbg !29
  %61 = bitcast i32 %60 to float, !dbg !29
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 true) #1, !dbg !29
  %63 = bitcast i32 %62 to float, !dbg !29
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 true) #1, !dbg !29
  %65 = bitcast i32 %64 to float, !dbg !29
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 true) #1, !dbg !29
  %67 = bitcast i32 %66 to float, !dbg !29
  %68 = lshr i64 %26, 60, !dbg !30
  %69 = and i64 %68, 8, !dbg !30
  %70 = add i64 %69, %26, !dbg !30
  %71 = lshr i64 %35, 60, !dbg !31
  %72 = and i64 %71, 8, !dbg !31
  %73 = add i64 %72, %35, !dbg !31
  %74 = lshr i64 %36, 60, !dbg !31
  %75 = and i64 %74, 8, !dbg !31
  %76 = add i64 %75, %36, !dbg !31
  %77 = lshr i64 %38, 60, !dbg !31
  %78 = and i64 %77, 8, !dbg !31
  %79 = add i64 %78, %38, !dbg !31
  %80 = lshr i64 %39, 60, !dbg !31
  %81 = and i64 %80, 8, !dbg !31
  %82 = add i64 %81, %39, !dbg !31
  %83 = shl i64 %70, 3, !dbg !32
  %84 = shl nsw i32 %23, 6, !dbg !33
  %85 = sext i32 %84 to i64, !dbg !34
  %86 = add i64 %83, %85, !dbg !35
  %87 = add i64 %86, %73, !dbg !34
  %88 = add i64 %86, %76, !dbg !34
  %89 = add i64 %86, %79, !dbg !34
  %90 = add i64 %86, %82, !dbg !34
  %91 = getelementptr float, ptr addrspace(1) %4, i64 %87, !dbg !36
  %92 = getelementptr float, ptr addrspace(1) %4, i64 %88, !dbg !36
  %93 = getelementptr float, ptr addrspace(1) %4, i64 %89, !dbg !36
  %94 = getelementptr float, ptr addrspace(1) %4, i64 %90, !dbg !36
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %91, i1 true) #1, !dbg !37
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 true) #1, !dbg !37
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 true) #1, !dbg !37
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 true) #1, !dbg !37
  %99 = lshr i64 %43, 60, !dbg !38
  %100 = and i64 %99, 8, !dbg !38
  %101 = add i64 %100, %43, !dbg !38
  %102 = lshr i64 %44, 60, !dbg !38
  %103 = and i64 %102, 8, !dbg !38
  %104 = add i64 %103, %44, !dbg !38
  %105 = lshr i64 %46, 60, !dbg !38
  %106 = and i64 %105, 8, !dbg !38
  %107 = add i64 %106, %46, !dbg !38
  %108 = lshr i64 %47, 60, !dbg !38
  %109 = and i64 %108, 8, !dbg !38
  %110 = add i64 %109, %47, !dbg !38
  %111 = add i64 %86, %101, !dbg !39
  %112 = add i64 %86, %104, !dbg !39
  %113 = add i64 %86, %107, !dbg !39
  %114 = add i64 %86, %110, !dbg !39
  %115 = getelementptr float, ptr addrspace(1) %4, i64 %111, !dbg !40
  %116 = getelementptr float, ptr addrspace(1) %4, i64 %112, !dbg !40
  %117 = getelementptr float, ptr addrspace(1) %4, i64 %113, !dbg !40
  %118 = getelementptr float, ptr addrspace(1) %4, i64 %114, !dbg !40
  %119 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %115, i1 true) #1, !dbg !41
  %120 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %116, i1 true) #1, !dbg !41
  %121 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %117, i1 true) #1, !dbg !41
  %122 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %118, i1 true) #1, !dbg !41
  %123 = lshr i64 %55, 60, !dbg !42
  %124 = and i64 %123, 8, !dbg !42
  %125 = add i64 %124, %55, !dbg !42
  %126 = shl i64 %125, 3, !dbg !43
  %127 = add i64 %126, %85, !dbg !44
  %128 = add i64 %127, %73, !dbg !45
  %129 = add i64 %127, %76, !dbg !45
  %130 = add i64 %127, %79, !dbg !45
  %131 = add i64 %127, %82, !dbg !45
  %132 = getelementptr float, ptr addrspace(1) %4, i64 %128, !dbg !46
  %133 = getelementptr float, ptr addrspace(1) %4, i64 %129, !dbg !46
  %134 = getelementptr float, ptr addrspace(1) %4, i64 %130, !dbg !46
  %135 = getelementptr float, ptr addrspace(1) %4, i64 %131, !dbg !46
  %136 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %132, i1 true) #1, !dbg !47
  %137 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %133, i1 true) #1, !dbg !47
  %138 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %134, i1 true) #1, !dbg !47
  %139 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %135, i1 true) #1, !dbg !47
  %140 = add i64 %127, %101, !dbg !48
  %141 = add i64 %127, %104, !dbg !48
  %142 = add i64 %127, %107, !dbg !48
  %143 = add i64 %127, %110, !dbg !48
  %144 = getelementptr float, ptr addrspace(1) %4, i64 %140, !dbg !49
  %145 = getelementptr float, ptr addrspace(1) %4, i64 %141, !dbg !49
  %146 = getelementptr float, ptr addrspace(1) %4, i64 %142, !dbg !49
  %147 = getelementptr float, ptr addrspace(1) %4, i64 %143, !dbg !49
  %148 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %144, i1 true) #1, !dbg !50
  %149 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %145, i1 true) #1, !dbg !50
  %150 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %146, i1 true) #1, !dbg !50
  %151 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %147, i1 true) #1, !dbg !50
  %152 = insertelement <2 x i32> poison, i32 %136, i64 0, !dbg !47
  %153 = insertelement <2 x i32> %152, i32 %95, i64 1, !dbg !47
  %154 = bitcast <2 x i32> %153 to <2 x float>, !dbg !47
  %155 = insertelement <2 x i32> poison, i32 %148, i64 0, !dbg !50
  %156 = insertelement <2 x i32> %155, i32 %119, i64 1, !dbg !50
  %157 = bitcast <2 x i32> %156 to <2 x float>, !dbg !50
  %158 = fsub <2 x float> %157, %154, !dbg !51
  %159 = insertelement <2 x i32> poison, i32 %50, i64 0, !dbg !52
  %160 = bitcast <2 x i32> %159 to <2 x float>, !dbg !52
  %161 = shufflevector <2 x float> %160, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !52
  %162 = fmul <2 x float> %158, %161, !dbg !52
  %163 = fadd <2 x float> %162, %154, !dbg !53
  %164 = insertelement <2 x i32> poison, i32 %137, i64 0, !dbg !47
  %165 = insertelement <2 x i32> %164, i32 %96, i64 1, !dbg !47
  %166 = bitcast <2 x i32> %165 to <2 x float>, !dbg !47
  %167 = insertelement <2 x i32> poison, i32 %149, i64 0, !dbg !50
  %168 = insertelement <2 x i32> %167, i32 %120, i64 1, !dbg !50
  %169 = bitcast <2 x i32> %168 to <2 x float>, !dbg !50
  %170 = fsub <2 x float> %169, %166, !dbg !51
  %171 = insertelement <2 x i32> poison, i32 %51, i64 0, !dbg !52
  %172 = bitcast <2 x i32> %171 to <2 x float>, !dbg !52
  %173 = shufflevector <2 x float> %172, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !52
  %174 = fmul <2 x float> %170, %173, !dbg !52
  %175 = fadd <2 x float> %174, %166, !dbg !53
  %176 = insertelement <2 x i32> poison, i32 %138, i64 0, !dbg !47
  %177 = insertelement <2 x i32> %176, i32 %97, i64 1, !dbg !47
  %178 = bitcast <2 x i32> %177 to <2 x float>, !dbg !47
  %179 = insertelement <2 x i32> poison, i32 %150, i64 0, !dbg !50
  %180 = insertelement <2 x i32> %179, i32 %121, i64 1, !dbg !50
  %181 = bitcast <2 x i32> %180 to <2 x float>, !dbg !50
  %182 = fsub <2 x float> %181, %178, !dbg !51
  %183 = insertelement <2 x i32> poison, i32 %52, i64 0, !dbg !52
  %184 = bitcast <2 x i32> %183 to <2 x float>, !dbg !52
  %185 = shufflevector <2 x float> %184, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !52
  %186 = fmul <2 x float> %182, %185, !dbg !52
  %187 = fadd <2 x float> %186, %178, !dbg !53
  %188 = insertelement <2 x i32> poison, i32 %139, i64 0, !dbg !47
  %189 = insertelement <2 x i32> %188, i32 %98, i64 1, !dbg !47
  %190 = bitcast <2 x i32> %189 to <2 x float>, !dbg !47
  %191 = insertelement <2 x i32> poison, i32 %151, i64 0, !dbg !50
  %192 = insertelement <2 x i32> %191, i32 %122, i64 1, !dbg !50
  %193 = bitcast <2 x i32> %192 to <2 x float>, !dbg !50
  %194 = fsub <2 x float> %193, %190, !dbg !51
  %195 = insertelement <2 x i32> poison, i32 %53, i64 0, !dbg !52
  %196 = bitcast <2 x i32> %195 to <2 x float>, !dbg !52
  %197 = shufflevector <2 x float> %196, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !52
  %198 = fmul <2 x float> %194, %197, !dbg !52
  %199 = fadd <2 x float> %198, %190, !dbg !53
  %200 = extractelement <2 x float> %163, i64 0, !dbg !54
  %201 = extractelement <2 x float> %163, i64 1, !dbg !55
  %202 = fsub float %200, %201, !dbg !54
  %203 = extractelement <2 x float> %175, i64 0, !dbg !54
  %204 = extractelement <2 x float> %175, i64 1, !dbg !55
  %205 = fsub float %203, %204, !dbg !54
  %206 = extractelement <2 x float> %187, i64 0, !dbg !54
  %207 = extractelement <2 x float> %187, i64 1, !dbg !55
  %208 = fsub float %206, %207, !dbg !54
  %209 = extractelement <2 x float> %199, i64 0, !dbg !54
  %210 = extractelement <2 x float> %199, i64 1, !dbg !55
  %211 = fsub float %209, %210, !dbg !54
  %212 = fmul float %202, %61, !dbg !56
  %213 = fmul float %205, %63, !dbg !56
  %214 = fmul float %208, %65, !dbg !56
  %215 = fmul float %211, %67, !dbg !56
  %216 = fadd float %201, %212, !dbg !55
  %217 = fadd float %204, %213, !dbg !55
  %218 = fadd float %207, %214, !dbg !55
  %219 = fadd float %210, %215, !dbg !55
  %220 = getelementptr float, ptr addrspace(1) %9, i64 %87, !dbg !57
  %221 = getelementptr float, ptr addrspace(1) %9, i64 %88, !dbg !57
  %222 = getelementptr float, ptr addrspace(1) %9, i64 %89, !dbg !57
  %223 = getelementptr float, ptr addrspace(1) %9, i64 %90, !dbg !57
  %224 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %220, i1 true) #1, !dbg !58
  %225 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %221, i1 true) #1, !dbg !58
  %226 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %222, i1 true) #1, !dbg !58
  %227 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %223, i1 true) #1, !dbg !58
  %228 = getelementptr float, ptr addrspace(1) %9, i64 %111, !dbg !59
  %229 = getelementptr float, ptr addrspace(1) %9, i64 %112, !dbg !59
  %230 = getelementptr float, ptr addrspace(1) %9, i64 %113, !dbg !59
  %231 = getelementptr float, ptr addrspace(1) %9, i64 %114, !dbg !59
  %232 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %228, i1 true) #1, !dbg !60
  %233 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %229, i1 true) #1, !dbg !60
  %234 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %230, i1 true) #1, !dbg !60
  %235 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %231, i1 true) #1, !dbg !60
  %236 = getelementptr float, ptr addrspace(1) %9, i64 %128, !dbg !61
  %237 = getelementptr float, ptr addrspace(1) %9, i64 %129, !dbg !61
  %238 = getelementptr float, ptr addrspace(1) %9, i64 %130, !dbg !61
  %239 = getelementptr float, ptr addrspace(1) %9, i64 %131, !dbg !61
  %240 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %236, i1 true) #1, !dbg !62
  %241 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %237, i1 true) #1, !dbg !62
  %242 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %238, i1 true) #1, !dbg !62
  %243 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %239, i1 true) #1, !dbg !62
  %244 = getelementptr float, ptr addrspace(1) %9, i64 %140, !dbg !63
  %245 = getelementptr float, ptr addrspace(1) %9, i64 %141, !dbg !63
  %246 = getelementptr float, ptr addrspace(1) %9, i64 %142, !dbg !63
  %247 = getelementptr float, ptr addrspace(1) %9, i64 %143, !dbg !63
  %248 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %244, i1 true) #1, !dbg !64
  %249 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %245, i1 true) #1, !dbg !64
  %250 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %246, i1 true) #1, !dbg !64
  %251 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %247, i1 true) #1, !dbg !64
  %252 = insertelement <2 x i32> poison, i32 %240, i64 0, !dbg !62
  %253 = insertelement <2 x i32> %252, i32 %224, i64 1, !dbg !62
  %254 = bitcast <2 x i32> %253 to <2 x float>, !dbg !62
  %255 = insertelement <2 x i32> poison, i32 %248, i64 0, !dbg !64
  %256 = insertelement <2 x i32> %255, i32 %232, i64 1, !dbg !64
  %257 = bitcast <2 x i32> %256 to <2 x float>, !dbg !64
  %258 = fsub <2 x float> %257, %254, !dbg !65
  %259 = fmul <2 x float> %258, %161, !dbg !66
  %260 = fadd <2 x float> %259, %254, !dbg !67
  %261 = insertelement <2 x i32> poison, i32 %241, i64 0, !dbg !62
  %262 = insertelement <2 x i32> %261, i32 %225, i64 1, !dbg !62
  %263 = bitcast <2 x i32> %262 to <2 x float>, !dbg !62
  %264 = insertelement <2 x i32> poison, i32 %249, i64 0, !dbg !64
  %265 = insertelement <2 x i32> %264, i32 %233, i64 1, !dbg !64
  %266 = bitcast <2 x i32> %265 to <2 x float>, !dbg !64
  %267 = fsub <2 x float> %266, %263, !dbg !65
  %268 = fmul <2 x float> %267, %173, !dbg !66
  %269 = fadd <2 x float> %268, %263, !dbg !67
  %270 = insertelement <2 x i32> poison, i32 %242, i64 0, !dbg !62
  %271 = insertelement <2 x i32> %270, i32 %226, i64 1, !dbg !62
  %272 = bitcast <2 x i32> %271 to <2 x float>, !dbg !62
  %273 = insertelement <2 x i32> poison, i32 %250, i64 0, !dbg !64
  %274 = insertelement <2 x i32> %273, i32 %234, i64 1, !dbg !64
  %275 = bitcast <2 x i32> %274 to <2 x float>, !dbg !64
  %276 = fsub <2 x float> %275, %272, !dbg !65
  %277 = fmul <2 x float> %276, %185, !dbg !66
  %278 = fadd <2 x float> %277, %272, !dbg !67
  %279 = insertelement <2 x i32> poison, i32 %243, i64 0, !dbg !62
  %280 = insertelement <2 x i32> %279, i32 %227, i64 1, !dbg !62
  %281 = bitcast <2 x i32> %280 to <2 x float>, !dbg !62
  %282 = insertelement <2 x i32> poison, i32 %251, i64 0, !dbg !64
  %283 = insertelement <2 x i32> %282, i32 %235, i64 1, !dbg !64
  %284 = bitcast <2 x i32> %283 to <2 x float>, !dbg !64
  %285 = fsub <2 x float> %284, %281, !dbg !65
  %286 = fmul <2 x float> %285, %197, !dbg !66
  %287 = fadd <2 x float> %286, %281, !dbg !67
  %288 = extractelement <2 x float> %260, i64 0, !dbg !68
  %289 = extractelement <2 x float> %260, i64 1, !dbg !69
  %290 = fsub float %288, %289, !dbg !68
  %291 = extractelement <2 x float> %269, i64 0, !dbg !68
  %292 = extractelement <2 x float> %269, i64 1, !dbg !69
  %293 = fsub float %291, %292, !dbg !68
  %294 = extractelement <2 x float> %278, i64 0, !dbg !68
  %295 = extractelement <2 x float> %278, i64 1, !dbg !69
  %296 = fsub float %294, %295, !dbg !68
  %297 = extractelement <2 x float> %287, i64 0, !dbg !68
  %298 = extractelement <2 x float> %287, i64 1, !dbg !69
  %299 = fsub float %297, %298, !dbg !68
  %300 = fmul float %290, %61, !dbg !70
  %301 = fmul float %293, %63, !dbg !70
  %302 = fmul float %296, %65, !dbg !70
  %303 = fmul float %299, %67, !dbg !70
  %304 = fadd float %289, %300, !dbg !69
  %305 = fadd float %292, %301, !dbg !69
  %306 = fadd float %295, %302, !dbg !69
  %307 = fadd float %298, %303, !dbg !69
  %308 = sext i32 %17 to i64, !dbg !71
  %309 = getelementptr float, ptr addrspace(1) %0, i64 %308, !dbg !71
  %310 = bitcast float %216 to i32, !dbg !72
  %311 = bitcast float %217 to i32, !dbg !72
  %312 = bitcast float %218 to i32, !dbg !72
  %313 = bitcast float %219 to i32, !dbg !72
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %310, i32 %311, i32 %312, i32 %313, ptr addrspace(1) %309, i1 true) #1, !dbg !72
  %314 = getelementptr float, ptr addrspace(1) %1, i64 %308, !dbg !73
  %315 = bitcast float %304 to i32, !dbg !74
  %316 = bitcast float %305 to i32, !dbg !74
  %317 = bitcast float %306 to i32, !dbg !74
  %318 = bitcast float %307 to i32, !dbg !74
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %315, i32 %316, i32 %317, i32 %318, ptr addrspace(1) %314, i1 true) #1, !dbg !74
  ret void, !dbg !75
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cwohwcaj67y4b2ejuni2kud6cnzrbdiyibvwopzs46usf2e5yeyg.py", directory: "inductor_cache/wo")
!4 = !{ptr @triton_poi_fused__unsafe_index_add_mul_sub_34, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__unsafe_index_add_mul_sub_34, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__unsafe_index_add_mul_sub_34", linkageName: "triton_poi_fused__unsafe_index_add_mul_sub_34", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 27, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 30, scope: !7)
!19 = !DILocation(line: 28, column: 35, scope: !7)
!20 = !DILocation(line: 29, column: 30, scope: !7)
!21 = !DILocation(line: 29, column: 35, scope: !7)
!22 = !DILocation(line: 30, column: 31, scope: !7)
!23 = !DILocation(line: 30, column: 36, scope: !7)
!24 = !DILocation(line: 31, column: 31, scope: !7)
!25 = !DILocation(line: 31, column: 36, scope: !7)
!26 = !DILocation(line: 32, column: 31, scope: !7)
!27 = !DILocation(line: 32, column: 36, scope: !7)
!28 = !DILocation(line: 33, column: 31, scope: !7)
!29 = !DILocation(line: 33, column: 36, scope: !7)
!30 = !DILocation(line: 37, column: 32, scope: !7)
!31 = !DILocation(line: 40, column: 32, scope: !7)
!32 = !DILocation(line: 41, column: 39, scope: !7)
!33 = !DILocation(line: 41, column: 49, scope: !7)
!34 = !DILocation(line: 41, column: 46, scope: !7)
!35 = !DILocation(line: 41, column: 37, scope: !7)
!36 = !DILocation(line: 41, column: 30, scope: !7)
!37 = !DILocation(line: 41, column: 54, scope: !7)
!38 = !DILocation(line: 44, column: 35, scope: !7)
!39 = !DILocation(line: 45, column: 48, scope: !7)
!40 = !DILocation(line: 45, column: 31, scope: !7)
!41 = !DILocation(line: 45, column: 56, scope: !7)
!42 = !DILocation(line: 51, column: 35, scope: !7)
!43 = !DILocation(line: 52, column: 40, scope: !7)
!44 = !DILocation(line: 52, column: 38, scope: !7)
!45 = !DILocation(line: 52, column: 48, scope: !7)
!46 = !DILocation(line: 52, column: 31, scope: !7)
!47 = !DILocation(line: 52, column: 56, scope: !7)
!48 = !DILocation(line: 53, column: 49, scope: !7)
!49 = !DILocation(line: 53, column: 31, scope: !7)
!50 = !DILocation(line: 53, column: 57, scope: !7)
!51 = !DILocation(line: 54, column: 20, scope: !7)
!52 = !DILocation(line: 55, column: 20, scope: !7)
!53 = !DILocation(line: 56, column: 20, scope: !7)
!54 = !DILocation(line: 57, column: 20, scope: !7)
!55 = !DILocation(line: 59, column: 20, scope: !7)
!56 = !DILocation(line: 58, column: 20, scope: !7)
!57 = !DILocation(line: 60, column: 31, scope: !7)
!58 = !DILocation(line: 60, column: 55, scope: !7)
!59 = !DILocation(line: 61, column: 31, scope: !7)
!60 = !DILocation(line: 61, column: 56, scope: !7)
!61 = !DILocation(line: 65, column: 31, scope: !7)
!62 = !DILocation(line: 65, column: 56, scope: !7)
!63 = !DILocation(line: 66, column: 31, scope: !7)
!64 = !DILocation(line: 66, column: 57, scope: !7)
!65 = !DILocation(line: 67, column: 20, scope: !7)
!66 = !DILocation(line: 68, column: 20, scope: !7)
!67 = !DILocation(line: 69, column: 20, scope: !7)
!68 = !DILocation(line: 70, column: 20, scope: !7)
!69 = !DILocation(line: 72, column: 20, scope: !7)
!70 = !DILocation(line: 71, column: 20, scope: !7)
!71 = !DILocation(line: 73, column: 28, scope: !7)
!72 = !DILocation(line: 73, column: 40, scope: !7)
!73 = !DILocation(line: 74, column: 28, scope: !7)
!74 = !DILocation(line: 74, column: 40, scope: !7)
!75 = !DILocation(line: 74, column: 4, scope: !7)
