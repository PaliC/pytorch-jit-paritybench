; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_hardtanh_backward_mul_sigmoid_24(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %6 = shl i32 %5, 10, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 3, !dbg !12
  %9 = and i32 %8, 1016, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = or disjoint i32 %10, 4, !dbg !13
  %12 = icmp slt i32 %10, 76800, !dbg !14
  %13 = srem i32 %10, 300, !dbg !15
  %14 = srem i32 %11, 300, !dbg !15
  %15 = sdiv i32 %10, 19200, !dbg !16
  %16 = sext i32 %10 to i64, !dbg !17
  %17 = getelementptr float, ptr addrspace(1) %0, i64 %16, !dbg !17
  %18 = sext i32 %11 to i64, !dbg !17
  %19 = getelementptr float, ptr addrspace(1) %0, i64 %18, !dbg !17
  %20 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %17, i1 %12) #1, !dbg !18
  %21 = extractvalue { i32, i32, i32, i32 } %20, 0, !dbg !18
  %22 = extractvalue { i32, i32, i32, i32 } %20, 1, !dbg !18
  %23 = extractvalue { i32, i32, i32, i32 } %20, 2, !dbg !18
  %24 = extractvalue { i32, i32, i32, i32 } %20, 3, !dbg !18
  %25 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %19, i1 %12) #1, !dbg !18
  %26 = extractvalue { i32, i32, i32, i32 } %25, 0, !dbg !18
  %27 = extractvalue { i32, i32, i32, i32 } %25, 1, !dbg !18
  %28 = extractvalue { i32, i32, i32, i32 } %25, 2, !dbg !18
  %29 = extractvalue { i32, i32, i32, i32 } %25, 3, !dbg !18
  %30 = mul nsw i32 %15, 300, !dbg !19
  %31 = add nsw i32 %30, %13, !dbg !20
  %32 = add nsw i32 %30, %14, !dbg !20
  %33 = sext i32 %31 to i64, !dbg !21
  %34 = getelementptr float, ptr addrspace(1) %1, i64 %33, !dbg !21
  %35 = sext i32 %32 to i64, !dbg !21
  %36 = getelementptr float, ptr addrspace(1) %1, i64 %35, !dbg !21
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %34, i1 %12) #1, !dbg !22
  %38 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !22
  %39 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !22
  %40 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !22
  %41 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !22
  %42 = bitcast i32 %38 to float, !dbg !22
  %43 = bitcast i32 %39 to float, !dbg !22
  %44 = bitcast i32 %40 to float, !dbg !22
  %45 = bitcast i32 %41 to float, !dbg !22
  %46 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %36, i1 %12) #1, !dbg !22
  %47 = extractvalue { i32, i32, i32, i32 } %46, 0, !dbg !22
  %48 = extractvalue { i32, i32, i32, i32 } %46, 1, !dbg !22
  %49 = extractvalue { i32, i32, i32, i32 } %46, 2, !dbg !22
  %50 = extractvalue { i32, i32, i32, i32 } %46, 3, !dbg !22
  %51 = bitcast i32 %47 to float, !dbg !22
  %52 = bitcast i32 %48 to float, !dbg !22
  %53 = bitcast i32 %49 to float, !dbg !22
  %54 = bitcast i32 %50 to float, !dbg !22
  %55 = fsub float 0.000000e+00, %42, !dbg !23
  %56 = fsub float 0.000000e+00, %43, !dbg !23
  %57 = fsub float 0.000000e+00, %44, !dbg !23
  %58 = fsub float 0.000000e+00, %45, !dbg !23
  %59 = fsub float 0.000000e+00, %51, !dbg !23
  %60 = fsub float 0.000000e+00, %52, !dbg !23
  %61 = fsub float 0.000000e+00, %53, !dbg !23
  %62 = fsub float 0.000000e+00, %54, !dbg !23
  %63 = fmul float %55, 0x3FF7154760000000, !dbg !27
  %64 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %63) #1, !dbg !27
  %65 = fmul float %56, 0x3FF7154760000000, !dbg !27
  %66 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %65) #1, !dbg !27
  %67 = fmul float %57, 0x3FF7154760000000, !dbg !27
  %68 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %67) #1, !dbg !27
  %69 = fmul float %58, 0x3FF7154760000000, !dbg !27
  %70 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %69) #1, !dbg !27
  %71 = fmul float %59, 0x3FF7154760000000, !dbg !27
  %72 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %71) #1, !dbg !27
  %73 = fmul float %60, 0x3FF7154760000000, !dbg !27
  %74 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %73) #1, !dbg !27
  %75 = fmul float %61, 0x3FF7154760000000, !dbg !27
  %76 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %75) #1, !dbg !27
  %77 = fmul float %62, 0x3FF7154760000000, !dbg !27
  %78 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %77) #1, !dbg !27
  %79 = fadd float %64, 1.000000e+00, !dbg !28
  %80 = fadd float %66, 1.000000e+00, !dbg !28
  %81 = fadd float %68, 1.000000e+00, !dbg !28
  %82 = fadd float %70, 1.000000e+00, !dbg !28
  %83 = fadd float %72, 1.000000e+00, !dbg !28
  %84 = fadd float %74, 1.000000e+00, !dbg !28
  %85 = fadd float %76, 1.000000e+00, !dbg !28
  %86 = fadd float %78, 1.000000e+00, !dbg !28
  %87 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %79) #1, !dbg !29
  %88 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %80) #1, !dbg !29
  %89 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %81) #1, !dbg !29
  %90 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %82) #1, !dbg !29
  %91 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %83) #1, !dbg !29
  %92 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %84) #1, !dbg !29
  %93 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %85) #1, !dbg !29
  %94 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %86) #1, !dbg !29
  %95 = getelementptr i1, ptr addrspace(1) %2, i64 %16, !dbg !30
  %96 = insertelement <4 x i32> poison, i32 %21, i64 0, !dbg !18
  %97 = insertelement <4 x i32> %96, i32 %22, i64 1, !dbg !18
  %98 = insertelement <4 x i32> %97, i32 %23, i64 2, !dbg !18
  %99 = insertelement <4 x i32> %98, i32 %24, i64 3, !dbg !18
  %100 = bitcast <4 x i32> %99 to <4 x float>, !dbg !18
  %101 = insertelement <4 x float> poison, float %87, i64 0, !dbg !31
  %102 = insertelement <4 x float> %101, float %88, i64 1, !dbg !31
  %103 = insertelement <4 x float> %102, float %89, i64 2, !dbg !31
  %104 = insertelement <4 x float> %103, float %90, i64 3, !dbg !31
  %105 = fmul <4 x float> %104, %100, !dbg !31
  %106 = fcmp ole <4 x float> %105, zeroinitializer, !dbg !32
  %107 = fcmp oge <4 x float> %105, splat (float 6.000000e+00), !dbg !33
  %108 = or <4 x i1> %106, %107, !dbg !34
  %109 = insertelement <4 x i32> poison, i32 %26, i64 0, !dbg !18
  %110 = insertelement <4 x i32> %109, i32 %27, i64 1, !dbg !18
  %111 = insertelement <4 x i32> %110, i32 %28, i64 2, !dbg !18
  %112 = insertelement <4 x i32> %111, i32 %29, i64 3, !dbg !18
  %113 = bitcast <4 x i32> %112 to <4 x float>, !dbg !18
  %114 = insertelement <4 x float> poison, float %91, i64 0, !dbg !31
  %115 = insertelement <4 x float> %114, float %92, i64 1, !dbg !31
  %116 = insertelement <4 x float> %115, float %93, i64 2, !dbg !31
  %117 = insertelement <4 x float> %116, float %94, i64 3, !dbg !31
  %118 = fmul <4 x float> %117, %113, !dbg !31
  %119 = fcmp ole <4 x float> %118, zeroinitializer, !dbg !32
  %120 = fcmp oge <4 x float> %118, splat (float 6.000000e+00), !dbg !33
  %121 = or <4 x i1> %119, %120, !dbg !34
  %122 = zext <4 x i1> %108 to <4 x i8>, !dbg !35
  %123 = bitcast <4 x i8> %122 to i32, !dbg !35
  %124 = zext <4 x i1> %121 to <4 x i8>, !dbg !35
  %125 = bitcast <4 x i8> %124 to i32, !dbg !35
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %123, i32 %125, ptr addrspace(1) %95, i1 %12) #1, !dbg !35
  ret void, !dbg !36
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cu3panjo2fgsixf7cr4wichoc5veb35shoxskbaso56xrwoj6ypc.py", directory: "inductor_cache/u3")
!4 = !{ptr @triton_poi_fused_hardtanh_backward_mul_sigmoid_24, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_hardtanh_backward_mul_sigmoid_24, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_hardtanh_backward_mul_sigmoid_24", linkageName: "triton_poi_fused_hardtanh_backward_mul_sigmoid_24", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 27, column: 30, scope: !7)
!18 = !DILocation(line: 27, column: 35, scope: !7)
!19 = !DILocation(line: 28, column: 39, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 28, column: 30, scope: !7)
!22 = !DILocation(line: 28, column: 44, scope: !7)
!23 = !DILocation(line: 47, column: 30, scope: !24, inlinedAt: !26)
!24 = distinct !DILexicalBlockFile(scope: !7, file: !25, discriminator: 0)
!25 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!26 = !DILocation(line: 29, column: 22, scope: !7)
!27 = !DILocation(line: 47, column: 29, scope: !24, inlinedAt: !26)
!28 = !DILocation(line: 47, column: 20, scope: !24, inlinedAt: !26)
!29 = !DILocation(line: 47, column: 16, scope: !24, inlinedAt: !26)
!30 = !DILocation(line: 36, column: 25, scope: !7)
!31 = !DILocation(line: 30, column: 18, scope: !7)
!32 = !DILocation(line: 32, column: 19, scope: !7)
!33 = !DILocation(line: 34, column: 19, scope: !7)
!34 = !DILocation(line: 35, column: 18, scope: !7)
!35 = !DILocation(line: 36, column: 36, scope: !7)
!36 = !DILocation(line: 36, column: 4, scope: !7)
