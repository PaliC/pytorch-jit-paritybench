; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_max_pool2d_with_indices_44(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %6 = shl i32 %5, 10, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 3, !dbg !12
  %9 = and i32 %8, 1016, !dbg !12
  %10 = shl i32 %7, 2, !dbg !12
  %11 = and i32 %10, 508, !dbg !12
  %12 = or disjoint i32 %11, 512, !dbg !12
  %13 = or disjoint i32 %6, %9, !dbg !13
  %14 = or disjoint i32 %13, 4, !dbg !13
  %15 = or disjoint i32 %6, %11, !dbg !13
  %16 = or disjoint i32 %6, %12, !dbg !13
  %17 = add i32 %13, -8704, !dbg !14
  %18 = add i32 %13, -8700, !dbg !14
  %19 = sext i32 %17 to i64, !dbg !15
  %20 = getelementptr float, ptr addrspace(1) %0, i64 %19, !dbg !15
  %21 = sext i32 %18 to i64, !dbg !15
  %22 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !15
  %23 = add i32 %13, -8192, !dbg !16
  %24 = add i32 %13, -8188, !dbg !16
  %25 = sext i32 %23 to i64, !dbg !17
  %26 = getelementptr float, ptr addrspace(1) %0, i64 %25, !dbg !17
  %27 = sext i32 %24 to i64, !dbg !17
  %28 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !17
  %29 = add i32 %13, -7680, !dbg !18
  %30 = add i32 %13, -7676, !dbg !18
  %31 = sext i32 %29 to i64, !dbg !19
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !19
  %33 = sext i32 %30 to i64, !dbg !19
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !19
  %35 = insertelement <2 x i32> poison, i32 %13, i64 0, !dbg !20
  %36 = shufflevector <2 x i32> %35, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !20
  %37 = sdiv <2 x i32> %36, <i32 8192, i32 512>, !dbg !20
  %38 = srem <2 x i32> %37, splat (i32 16), !dbg !21
  %39 = extractelement <2 x i32> %38, i64 0, !dbg !22
  %40 = icmp sgt i32 %39, 0, !dbg !23
  %41 = icmp sgt <2 x i32> %38, <i32 -1, i32 0>, !dbg !24
  %42 = extractelement <2 x i1> %41, i64 1, !dbg !25
  %43 = and i1 %40, %42, !dbg !25
  %44 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %20, i1 %43, i32 -8388608, i1 %43, i32 -8388608, i1 %43, i32 -8388608, i1 %43, i32 -8388608, i1 %43) #2, !dbg !26
  %45 = extractvalue { i32, i32, i32, i32 } %44, 0, !dbg !26
  %46 = extractvalue { i32, i32, i32, i32 } %44, 1, !dbg !26
  %47 = extractvalue { i32, i32, i32, i32 } %44, 2, !dbg !26
  %48 = extractvalue { i32, i32, i32, i32 } %44, 3, !dbg !26
  %49 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %22, i1 %43, i32 -8388608, i1 %43, i32 -8388608, i1 %43, i32 -8388608, i1 %43, i32 -8388608, i1 %43) #2, !dbg !26
  %50 = extractvalue { i32, i32, i32, i32 } %49, 0, !dbg !26
  %51 = extractvalue { i32, i32, i32, i32 } %49, 1, !dbg !26
  %52 = extractvalue { i32, i32, i32, i32 } %49, 2, !dbg !26
  %53 = extractvalue { i32, i32, i32, i32 } %49, 3, !dbg !26
  %54 = extractelement <2 x i32> %38, i64 1, !dbg !27
  %55 = icmp sgt i32 %54, -1, !dbg !28
  %56 = and i1 %40, %55, !dbg !29
  %57 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %26, i1 %56, i32 -8388608, i1 %56, i32 -8388608, i1 %56, i32 -8388608, i1 %56, i32 -8388608, i1 %56) #2, !dbg !30
  %58 = extractvalue { i32, i32, i32, i32 } %57, 0, !dbg !30
  %59 = extractvalue { i32, i32, i32, i32 } %57, 1, !dbg !30
  %60 = extractvalue { i32, i32, i32, i32 } %57, 2, !dbg !30
  %61 = extractvalue { i32, i32, i32, i32 } %57, 3, !dbg !30
  %62 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %28, i1 %56, i32 -8388608, i1 %56, i32 -8388608, i1 %56, i32 -8388608, i1 %56, i32 -8388608, i1 %56) #2, !dbg !30
  %63 = extractvalue { i32, i32, i32, i32 } %62, 0, !dbg !30
  %64 = extractvalue { i32, i32, i32, i32 } %62, 1, !dbg !30
  %65 = extractvalue { i32, i32, i32, i32 } %62, 2, !dbg !30
  %66 = extractvalue { i32, i32, i32, i32 } %62, 3, !dbg !30
  %67 = add nsw i32 %54, 1, !dbg !31
  %68 = icmp ult i32 %67, 16, !dbg !31
  %69 = and i1 %40, %68, !dbg !32
  %70 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %32, i1 %69, i32 -8388608, i1 %69, i32 -8388608, i1 %69, i32 -8388608, i1 %69, i32 -8388608, i1 %69) #2, !dbg !33
  %71 = extractvalue { i32, i32, i32, i32 } %70, 0, !dbg !33
  %72 = extractvalue { i32, i32, i32, i32 } %70, 1, !dbg !33
  %73 = extractvalue { i32, i32, i32, i32 } %70, 2, !dbg !33
  %74 = extractvalue { i32, i32, i32, i32 } %70, 3, !dbg !33
  %75 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %34, i1 %69, i32 -8388608, i1 %69, i32 -8388608, i1 %69, i32 -8388608, i1 %69, i32 -8388608, i1 %69) #2, !dbg !33
  %76 = extractvalue { i32, i32, i32, i32 } %75, 0, !dbg !33
  %77 = extractvalue { i32, i32, i32, i32 } %75, 1, !dbg !33
  %78 = extractvalue { i32, i32, i32, i32 } %75, 2, !dbg !33
  %79 = extractvalue { i32, i32, i32, i32 } %75, 3, !dbg !33
  %80 = extractelement <2 x i1> %41, i64 0, !dbg !34
  %81 = and i1 %80, %42, !dbg !34
  %82 = add i32 %13, -512, !dbg !35
  %83 = add i32 %13, -508, !dbg !35
  %84 = sext i32 %82 to i64, !dbg !36
  %85 = getelementptr float, ptr addrspace(1) %0, i64 %84, !dbg !36
  %86 = sext i32 %83 to i64, !dbg !36
  %87 = getelementptr float, ptr addrspace(1) %0, i64 %86, !dbg !36
  %88 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %85, i1 %81, i32 -8388608, i1 %81, i32 -8388608, i1 %81, i32 -8388608, i1 %81, i32 -8388608, i1 %81) #2, !dbg !37
  %89 = extractvalue { i32, i32, i32, i32 } %88, 0, !dbg !37
  %90 = extractvalue { i32, i32, i32, i32 } %88, 1, !dbg !37
  %91 = extractvalue { i32, i32, i32, i32 } %88, 2, !dbg !37
  %92 = extractvalue { i32, i32, i32, i32 } %88, 3, !dbg !37
  %93 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %87, i1 %81, i32 -8388608, i1 %81, i32 -8388608, i1 %81, i32 -8388608, i1 %81, i32 -8388608, i1 %81) #2, !dbg !37
  %94 = extractvalue { i32, i32, i32, i32 } %93, 0, !dbg !37
  %95 = extractvalue { i32, i32, i32, i32 } %93, 1, !dbg !37
  %96 = extractvalue { i32, i32, i32, i32 } %93, 2, !dbg !37
  %97 = extractvalue { i32, i32, i32, i32 } %93, 3, !dbg !37
  %98 = or i32 %39, %54, !dbg !27
  %99 = icmp sgt i32 %98, -1, !dbg !27
  %100 = sext i32 %13 to i64, !dbg !38
  %101 = getelementptr float, ptr addrspace(1) %0, i64 %100, !dbg !38
  %102 = sext i32 %14 to i64, !dbg !38
  %103 = getelementptr float, ptr addrspace(1) %0, i64 %102, !dbg !38
  %104 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %101, i1 %99, i32 -8388608, i1 %99, i32 -8388608, i1 %99, i32 -8388608, i1 %99, i32 -8388608, i1 %99) #2, !dbg !39
  %105 = extractvalue { i32, i32, i32, i32 } %104, 0, !dbg !39
  %106 = extractvalue { i32, i32, i32, i32 } %104, 1, !dbg !39
  %107 = extractvalue { i32, i32, i32, i32 } %104, 2, !dbg !39
  %108 = extractvalue { i32, i32, i32, i32 } %104, 3, !dbg !39
  %109 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %103, i1 %99, i32 -8388608, i1 %99, i32 -8388608, i1 %99, i32 -8388608, i1 %99, i32 -8388608, i1 %99) #2, !dbg !39
  %110 = extractvalue { i32, i32, i32, i32 } %109, 0, !dbg !39
  %111 = extractvalue { i32, i32, i32, i32 } %109, 1, !dbg !39
  %112 = extractvalue { i32, i32, i32, i32 } %109, 2, !dbg !39
  %113 = extractvalue { i32, i32, i32, i32 } %109, 3, !dbg !39
  %114 = and i1 %80, %68, !dbg !40
  %115 = add i32 %13, 512, !dbg !41
  %116 = add i32 %13, 516, !dbg !41
  %117 = sext i32 %115 to i64, !dbg !42
  %118 = getelementptr float, ptr addrspace(1) %0, i64 %117, !dbg !42
  %119 = sext i32 %116 to i64, !dbg !42
  %120 = getelementptr float, ptr addrspace(1) %0, i64 %119, !dbg !42
  %121 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %118, i1 %114, i32 -8388608, i1 %114, i32 -8388608, i1 %114, i32 -8388608, i1 %114, i32 -8388608, i1 %114) #2, !dbg !43
  %122 = extractvalue { i32, i32, i32, i32 } %121, 0, !dbg !43
  %123 = extractvalue { i32, i32, i32, i32 } %121, 1, !dbg !43
  %124 = extractvalue { i32, i32, i32, i32 } %121, 2, !dbg !43
  %125 = extractvalue { i32, i32, i32, i32 } %121, 3, !dbg !43
  %126 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %120, i1 %114, i32 -8388608, i1 %114, i32 -8388608, i1 %114, i32 -8388608, i1 %114, i32 -8388608, i1 %114) #2, !dbg !43
  %127 = extractvalue { i32, i32, i32, i32 } %126, 0, !dbg !43
  %128 = extractvalue { i32, i32, i32, i32 } %126, 1, !dbg !43
  %129 = extractvalue { i32, i32, i32, i32 } %126, 2, !dbg !43
  %130 = extractvalue { i32, i32, i32, i32 } %126, 3, !dbg !43
  %131 = add nsw i32 %39, 1, !dbg !22
  %132 = icmp ult i32 %131, 16, !dbg !22
  %133 = and i1 %42, %132, !dbg !44
  %134 = add i32 %13, 7680, !dbg !45
  %135 = add i32 %13, 7684, !dbg !45
  %136 = sext i32 %134 to i64, !dbg !46
  %137 = getelementptr float, ptr addrspace(1) %0, i64 %136, !dbg !46
  %138 = sext i32 %135 to i64, !dbg !46
  %139 = getelementptr float, ptr addrspace(1) %0, i64 %138, !dbg !46
  %140 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %137, i1 %133, i32 -8388608, i1 %133, i32 -8388608, i1 %133, i32 -8388608, i1 %133, i32 -8388608, i1 %133) #2, !dbg !47
  %141 = extractvalue { i32, i32, i32, i32 } %140, 0, !dbg !47
  %142 = extractvalue { i32, i32, i32, i32 } %140, 1, !dbg !47
  %143 = extractvalue { i32, i32, i32, i32 } %140, 2, !dbg !47
  %144 = extractvalue { i32, i32, i32, i32 } %140, 3, !dbg !47
  %145 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %139, i1 %133, i32 -8388608, i1 %133, i32 -8388608, i1 %133, i32 -8388608, i1 %133, i32 -8388608, i1 %133) #2, !dbg !47
  %146 = extractvalue { i32, i32, i32, i32 } %145, 0, !dbg !47
  %147 = extractvalue { i32, i32, i32, i32 } %145, 1, !dbg !47
  %148 = extractvalue { i32, i32, i32, i32 } %145, 2, !dbg !47
  %149 = extractvalue { i32, i32, i32, i32 } %145, 3, !dbg !47
  %150 = and i1 %55, %132, !dbg !48
  %151 = add i32 %13, 8192, !dbg !49
  %152 = add i32 %13, 8196, !dbg !49
  %153 = sext i32 %151 to i64, !dbg !50
  %154 = getelementptr float, ptr addrspace(1) %0, i64 %153, !dbg !50
  %155 = sext i32 %152 to i64, !dbg !50
  %156 = getelementptr float, ptr addrspace(1) %0, i64 %155, !dbg !50
  %157 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %154, i1 %150, i32 -8388608, i1 %150, i32 -8388608, i1 %150, i32 -8388608, i1 %150, i32 -8388608, i1 %150) #2, !dbg !51
  %158 = extractvalue { i32, i32, i32, i32 } %157, 0, !dbg !51
  %159 = extractvalue { i32, i32, i32, i32 } %157, 1, !dbg !51
  %160 = extractvalue { i32, i32, i32, i32 } %157, 2, !dbg !51
  %161 = extractvalue { i32, i32, i32, i32 } %157, 3, !dbg !51
  %162 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %156, i1 %150, i32 -8388608, i1 %150, i32 -8388608, i1 %150, i32 -8388608, i1 %150, i32 -8388608, i1 %150) #2, !dbg !51
  %163 = extractvalue { i32, i32, i32, i32 } %162, 0, !dbg !51
  %164 = extractvalue { i32, i32, i32, i32 } %162, 1, !dbg !51
  %165 = extractvalue { i32, i32, i32, i32 } %162, 2, !dbg !51
  %166 = extractvalue { i32, i32, i32, i32 } %162, 3, !dbg !51
  %167 = or i32 %131, %67, !dbg !52
  %168 = icmp ult i32 %167, 16, !dbg !52
  %169 = add i32 %13, 8704, !dbg !53
  %170 = add i32 %13, 8708, !dbg !53
  %171 = sext i32 %169 to i64, !dbg !54
  %172 = getelementptr float, ptr addrspace(1) %0, i64 %171, !dbg !54
  %173 = sext i32 %170 to i64, !dbg !54
  %174 = getelementptr float, ptr addrspace(1) %0, i64 %173, !dbg !54
  %175 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %172, i1 %168, i32 -8388608, i1 %168, i32 -8388608, i1 %168, i32 -8388608, i1 %168, i32 -8388608, i1 %168) #2, !dbg !55
  %176 = extractvalue { i32, i32, i32, i32 } %175, 0, !dbg !55
  %177 = extractvalue { i32, i32, i32, i32 } %175, 1, !dbg !55
  %178 = extractvalue { i32, i32, i32, i32 } %175, 2, !dbg !55
  %179 = extractvalue { i32, i32, i32, i32 } %175, 3, !dbg !55
  %180 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %174, i1 %168, i32 -8388608, i1 %168, i32 -8388608, i1 %168, i32 -8388608, i1 %168, i32 -8388608, i1 %168) #2, !dbg !55
  %181 = extractvalue { i32, i32, i32, i32 } %180, 0, !dbg !55
  %182 = extractvalue { i32, i32, i32, i32 } %180, 1, !dbg !55
  %183 = extractvalue { i32, i32, i32, i32 } %180, 2, !dbg !55
  %184 = extractvalue { i32, i32, i32, i32 } %180, 3, !dbg !55
  %185 = insertelement <4 x i32> poison, i32 %45, i64 0, !dbg !26
  %186 = insertelement <4 x i32> %185, i32 %46, i64 1, !dbg !26
  %187 = insertelement <4 x i32> %186, i32 %47, i64 2, !dbg !26
  %188 = insertelement <4 x i32> %187, i32 %48, i64 3, !dbg !26
  %189 = bitcast <4 x i32> %188 to <4 x float>, !dbg !26
  %190 = insertelement <4 x i32> poison, i32 %58, i64 0, !dbg !30
  %191 = insertelement <4 x i32> %190, i32 %59, i64 1, !dbg !30
  %192 = insertelement <4 x i32> %191, i32 %60, i64 2, !dbg !30
  %193 = insertelement <4 x i32> %192, i32 %61, i64 3, !dbg !30
  %194 = bitcast <4 x i32> %193 to <4 x float>, !dbg !30
  %195 = fcmp ogt <4 x float> %194, %189, !dbg !56
  %196 = fcmp uno <4 x float> %194, zeroinitializer, !dbg !60
  %197 = or <4 x i1> %195, %196, !dbg !61
  %.v = select <4 x i1> %197, <4 x i32> %193, <4 x i32> %188, !dbg !62
  %198 = bitcast <4 x i32> %.v to <4 x float>, !dbg !62
  %199 = insertelement <4 x i32> poison, i32 %71, i64 0, !dbg !33
  %200 = insertelement <4 x i32> %199, i32 %72, i64 1, !dbg !33
  %201 = insertelement <4 x i32> %200, i32 %73, i64 2, !dbg !33
  %202 = insertelement <4 x i32> %201, i32 %74, i64 3, !dbg !33
  %203 = bitcast <4 x i32> %202 to <4 x float>, !dbg !33
  %204 = fcmp olt <4 x float> %198, %203, !dbg !63
  %205 = fcmp uno <4 x float> %203, zeroinitializer, !dbg !65
  %206 = or <4 x i1> %205, %204, !dbg !66
  %.v15 = select <4 x i1> %206, <4 x i32> %202, <4 x i32> %.v, !dbg !67
  %207 = bitcast <4 x i32> %.v15 to <4 x float>, !dbg !67
  %208 = insertelement <4 x i32> poison, i32 %89, i64 0, !dbg !37
  %209 = insertelement <4 x i32> %208, i32 %90, i64 1, !dbg !37
  %210 = insertelement <4 x i32> %209, i32 %91, i64 2, !dbg !37
  %211 = insertelement <4 x i32> %210, i32 %92, i64 3, !dbg !37
  %212 = bitcast <4 x i32> %211 to <4 x float>, !dbg !37
  %213 = fcmp olt <4 x float> %207, %212, !dbg !68
  %214 = fcmp uno <4 x float> %212, zeroinitializer, !dbg !70
  %215 = or <4 x i1> %214, %213, !dbg !71
  %.v16 = select <4 x i1> %215, <4 x i32> %211, <4 x i32> %.v15, !dbg !72
  %216 = bitcast <4 x i32> %.v16 to <4 x float>, !dbg !72
  %217 = insertelement <4 x i32> poison, i32 %105, i64 0, !dbg !39
  %218 = insertelement <4 x i32> %217, i32 %106, i64 1, !dbg !39
  %219 = insertelement <4 x i32> %218, i32 %107, i64 2, !dbg !39
  %220 = insertelement <4 x i32> %219, i32 %108, i64 3, !dbg !39
  %221 = bitcast <4 x i32> %220 to <4 x float>, !dbg !39
  %222 = fcmp olt <4 x float> %216, %221, !dbg !73
  %223 = fcmp uno <4 x float> %221, zeroinitializer, !dbg !75
  %224 = or <4 x i1> %223, %222, !dbg !76
  %.v17 = select <4 x i1> %224, <4 x i32> %220, <4 x i32> %.v16, !dbg !77
  %225 = bitcast <4 x i32> %.v17 to <4 x float>, !dbg !77
  %226 = insertelement <4 x i32> poison, i32 %122, i64 0, !dbg !43
  %227 = insertelement <4 x i32> %226, i32 %123, i64 1, !dbg !43
  %228 = insertelement <4 x i32> %227, i32 %124, i64 2, !dbg !43
  %229 = insertelement <4 x i32> %228, i32 %125, i64 3, !dbg !43
  %230 = bitcast <4 x i32> %229 to <4 x float>, !dbg !43
  %231 = fcmp olt <4 x float> %225, %230, !dbg !78
  %232 = fcmp uno <4 x float> %230, zeroinitializer, !dbg !80
  %233 = or <4 x i1> %232, %231, !dbg !81
  %.v18 = select <4 x i1> %233, <4 x i32> %229, <4 x i32> %.v17, !dbg !82
  %234 = bitcast <4 x i32> %.v18 to <4 x float>, !dbg !82
  %235 = insertelement <4 x i32> poison, i32 %141, i64 0, !dbg !47
  %236 = insertelement <4 x i32> %235, i32 %142, i64 1, !dbg !47
  %237 = insertelement <4 x i32> %236, i32 %143, i64 2, !dbg !47
  %238 = insertelement <4 x i32> %237, i32 %144, i64 3, !dbg !47
  %239 = bitcast <4 x i32> %238 to <4 x float>, !dbg !47
  %240 = fcmp olt <4 x float> %234, %239, !dbg !83
  %241 = fcmp uno <4 x float> %239, zeroinitializer, !dbg !85
  %242 = or <4 x i1> %241, %240, !dbg !86
  %.v19 = select <4 x i1> %242, <4 x i32> %238, <4 x i32> %.v18, !dbg !87
  %243 = bitcast <4 x i32> %.v19 to <4 x float>, !dbg !87
  %244 = insertelement <4 x i32> poison, i32 %158, i64 0, !dbg !51
  %245 = insertelement <4 x i32> %244, i32 %159, i64 1, !dbg !51
  %246 = insertelement <4 x i32> %245, i32 %160, i64 2, !dbg !51
  %247 = insertelement <4 x i32> %246, i32 %161, i64 3, !dbg !51
  %248 = bitcast <4 x i32> %247 to <4 x float>, !dbg !51
  %249 = fcmp olt <4 x float> %243, %248, !dbg !88
  %250 = fcmp uno <4 x float> %248, zeroinitializer, !dbg !90
  %251 = or <4 x i1> %250, %249, !dbg !91
  %.v20 = select <4 x i1> %251, <4 x i32> %247, <4 x i32> %.v19, !dbg !92
  %252 = bitcast <4 x i32> %.v20 to <4 x float>, !dbg !92
  %253 = insertelement <4 x i32> poison, i32 %176, i64 0, !dbg !55
  %254 = insertelement <4 x i32> %253, i32 %177, i64 1, !dbg !55
  %255 = insertelement <4 x i32> %254, i32 %178, i64 2, !dbg !55
  %256 = insertelement <4 x i32> %255, i32 %179, i64 3, !dbg !55
  %257 = bitcast <4 x i32> %256 to <4 x float>, !dbg !55
  %258 = fcmp olt <4 x float> %252, %257, !dbg !93
  %259 = extractelement <4 x i1> %258, i64 0, !dbg !95
  %260 = extractelement <4 x i1> %258, i64 1, !dbg !95
  %261 = extractelement <4 x i1> %258, i64 2, !dbg !95
  %262 = extractelement <4 x i1> %258, i64 3, !dbg !95
  %263 = zext <4 x i1> %195 to <4 x i8>, !dbg !96
  %264 = select <4 x i1> %204, <4 x i8> splat (i8 2), <4 x i8> %263, !dbg !97
  %265 = select <4 x i1> %213, <4 x i8> splat (i8 3), <4 x i8> %264, !dbg !98
  %266 = select <4 x i1> %222, <4 x i8> splat (i8 4), <4 x i8> %265, !dbg !99
  %267 = select <4 x i1> %231, <4 x i8> splat (i8 5), <4 x i8> %266, !dbg !100
  %268 = select <4 x i1> %240, <4 x i8> splat (i8 6), <4 x i8> %267, !dbg !101
  %269 = select <4 x i1> %249, <4 x i8> splat (i8 7), <4 x i8> %268, !dbg !102
  %270 = select <4 x i1> %258, <4 x i8> splat (i8 8), <4 x i8> %269, !dbg !103
  %271 = insertelement <4 x i32> poison, i32 %50, i64 0, !dbg !26
  %272 = insertelement <4 x i32> %271, i32 %51, i64 1, !dbg !26
  %273 = insertelement <4 x i32> %272, i32 %52, i64 2, !dbg !26
  %274 = insertelement <4 x i32> %273, i32 %53, i64 3, !dbg !26
  %275 = bitcast <4 x i32> %274 to <4 x float>, !dbg !26
  %276 = insertelement <4 x i32> poison, i32 %63, i64 0, !dbg !30
  %277 = insertelement <4 x i32> %276, i32 %64, i64 1, !dbg !30
  %278 = insertelement <4 x i32> %277, i32 %65, i64 2, !dbg !30
  %279 = insertelement <4 x i32> %278, i32 %66, i64 3, !dbg !30
  %280 = bitcast <4 x i32> %279 to <4 x float>, !dbg !30
  %281 = fcmp ogt <4 x float> %280, %275, !dbg !56
  %282 = fcmp uno <4 x float> %280, zeroinitializer, !dbg !60
  %283 = or <4 x i1> %281, %282, !dbg !61
  %.v21 = select <4 x i1> %283, <4 x i32> %279, <4 x i32> %274, !dbg !62
  %284 = bitcast <4 x i32> %.v21 to <4 x float>, !dbg !62
  %285 = insertelement <4 x i32> poison, i32 %76, i64 0, !dbg !33
  %286 = insertelement <4 x i32> %285, i32 %77, i64 1, !dbg !33
  %287 = insertelement <4 x i32> %286, i32 %78, i64 2, !dbg !33
  %288 = insertelement <4 x i32> %287, i32 %79, i64 3, !dbg !33
  %289 = bitcast <4 x i32> %288 to <4 x float>, !dbg !33
  %290 = fcmp olt <4 x float> %284, %289, !dbg !63
  %291 = fcmp uno <4 x float> %289, zeroinitializer, !dbg !65
  %292 = or <4 x i1> %291, %290, !dbg !66
  %.v22 = select <4 x i1> %292, <4 x i32> %288, <4 x i32> %.v21, !dbg !67
  %293 = bitcast <4 x i32> %.v22 to <4 x float>, !dbg !67
  %294 = insertelement <4 x i32> poison, i32 %94, i64 0, !dbg !37
  %295 = insertelement <4 x i32> %294, i32 %95, i64 1, !dbg !37
  %296 = insertelement <4 x i32> %295, i32 %96, i64 2, !dbg !37
  %297 = insertelement <4 x i32> %296, i32 %97, i64 3, !dbg !37
  %298 = bitcast <4 x i32> %297 to <4 x float>, !dbg !37
  %299 = fcmp olt <4 x float> %293, %298, !dbg !68
  %300 = fcmp uno <4 x float> %298, zeroinitializer, !dbg !70
  %301 = or <4 x i1> %300, %299, !dbg !71
  %.v23 = select <4 x i1> %301, <4 x i32> %297, <4 x i32> %.v22, !dbg !72
  %302 = bitcast <4 x i32> %.v23 to <4 x float>, !dbg !72
  %303 = insertelement <4 x i32> poison, i32 %110, i64 0, !dbg !39
  %304 = insertelement <4 x i32> %303, i32 %111, i64 1, !dbg !39
  %305 = insertelement <4 x i32> %304, i32 %112, i64 2, !dbg !39
  %306 = insertelement <4 x i32> %305, i32 %113, i64 3, !dbg !39
  %307 = bitcast <4 x i32> %306 to <4 x float>, !dbg !39
  %308 = fcmp olt <4 x float> %302, %307, !dbg !73
  %309 = fcmp uno <4 x float> %307, zeroinitializer, !dbg !75
  %310 = or <4 x i1> %309, %308, !dbg !76
  %.v24 = select <4 x i1> %310, <4 x i32> %306, <4 x i32> %.v23, !dbg !77
  %311 = bitcast <4 x i32> %.v24 to <4 x float>, !dbg !77
  %312 = insertelement <4 x i32> poison, i32 %127, i64 0, !dbg !43
  %313 = insertelement <4 x i32> %312, i32 %128, i64 1, !dbg !43
  %314 = insertelement <4 x i32> %313, i32 %129, i64 2, !dbg !43
  %315 = insertelement <4 x i32> %314, i32 %130, i64 3, !dbg !43
  %316 = bitcast <4 x i32> %315 to <4 x float>, !dbg !43
  %317 = fcmp olt <4 x float> %311, %316, !dbg !78
  %318 = fcmp uno <4 x float> %316, zeroinitializer, !dbg !80
  %319 = or <4 x i1> %318, %317, !dbg !81
  %.v25 = select <4 x i1> %319, <4 x i32> %315, <4 x i32> %.v24, !dbg !82
  %320 = bitcast <4 x i32> %.v25 to <4 x float>, !dbg !82
  %321 = insertelement <4 x i32> poison, i32 %146, i64 0, !dbg !47
  %322 = insertelement <4 x i32> %321, i32 %147, i64 1, !dbg !47
  %323 = insertelement <4 x i32> %322, i32 %148, i64 2, !dbg !47
  %324 = insertelement <4 x i32> %323, i32 %149, i64 3, !dbg !47
  %325 = bitcast <4 x i32> %324 to <4 x float>, !dbg !47
  %326 = fcmp olt <4 x float> %320, %325, !dbg !83
  %327 = fcmp uno <4 x float> %325, zeroinitializer, !dbg !85
  %328 = or <4 x i1> %327, %326, !dbg !86
  %.v26 = select <4 x i1> %328, <4 x i32> %324, <4 x i32> %.v25, !dbg !87
  %329 = bitcast <4 x i32> %.v26 to <4 x float>, !dbg !87
  %330 = insertelement <4 x i32> poison, i32 %163, i64 0, !dbg !51
  %331 = insertelement <4 x i32> %330, i32 %164, i64 1, !dbg !51
  %332 = insertelement <4 x i32> %331, i32 %165, i64 2, !dbg !51
  %333 = insertelement <4 x i32> %332, i32 %166, i64 3, !dbg !51
  %334 = bitcast <4 x i32> %333 to <4 x float>, !dbg !51
  %335 = fcmp olt <4 x float> %329, %334, !dbg !88
  %336 = fcmp uno <4 x float> %334, zeroinitializer, !dbg !90
  %337 = or <4 x i1> %336, %335, !dbg !91
  %.v27 = select <4 x i1> %337, <4 x i32> %333, <4 x i32> %.v26, !dbg !92
  %338 = bitcast <4 x i32> %.v27 to <4 x float>, !dbg !92
  %339 = insertelement <4 x i32> poison, i32 %181, i64 0, !dbg !55
  %340 = insertelement <4 x i32> %339, i32 %182, i64 1, !dbg !55
  %341 = insertelement <4 x i32> %340, i32 %183, i64 2, !dbg !55
  %342 = insertelement <4 x i32> %341, i32 %184, i64 3, !dbg !55
  %343 = bitcast <4 x i32> %342 to <4 x float>, !dbg !55
  %344 = fcmp olt <4 x float> %338, %343, !dbg !93
  %345 = shufflevector <4 x float> %343, <4 x float> %257, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4>, !dbg !104
  %346 = fcmp uno <8 x float> %345, zeroinitializer, !dbg !104
  %347 = extractelement <8 x i1> %346, i64 7, !dbg !95
  %348 = or i1 %347, %259, !dbg !95
  %349 = extractelement <8 x i1> %346, i64 6, !dbg !95
  %350 = or i1 %349, %260, !dbg !95
  %351 = extractelement <8 x i1> %346, i64 5, !dbg !95
  %352 = or i1 %351, %261, !dbg !95
  %353 = extractelement <8 x i1> %346, i64 4, !dbg !95
  %354 = or i1 %353, %262, !dbg !95
  %355 = extractelement <4 x i1> %344, i64 0, !dbg !95
  %356 = extractelement <8 x i1> %346, i64 3, !dbg !95
  %357 = or i1 %356, %355, !dbg !95
  %358 = extractelement <4 x i1> %344, i64 1, !dbg !95
  %359 = extractelement <8 x i1> %346, i64 2, !dbg !95
  %360 = or i1 %359, %358, !dbg !95
  %361 = extractelement <4 x i1> %344, i64 2, !dbg !95
  %362 = extractelement <8 x i1> %346, i64 1, !dbg !95
  %363 = or i1 %362, %361, !dbg !95
  %364 = extractelement <4 x i1> %344, i64 3, !dbg !95
  %365 = extractelement <8 x i1> %346, i64 0, !dbg !95
  %366 = or i1 %365, %364, !dbg !95
  %367 = zext <4 x i1> %281 to <4 x i8>, !dbg !96
  %368 = select <4 x i1> %290, <4 x i8> splat (i8 2), <4 x i8> %367, !dbg !97
  %369 = select <4 x i1> %299, <4 x i8> splat (i8 3), <4 x i8> %368, !dbg !98
  %370 = select <4 x i1> %308, <4 x i8> splat (i8 4), <4 x i8> %369, !dbg !99
  %371 = select <4 x i1> %317, <4 x i8> splat (i8 5), <4 x i8> %370, !dbg !100
  %372 = select <4 x i1> %326, <4 x i8> splat (i8 6), <4 x i8> %371, !dbg !101
  %373 = select <4 x i1> %335, <4 x i8> splat (i8 7), <4 x i8> %372, !dbg !102
  %374 = select <4 x i1> %344, <4 x i8> splat (i8 8), <4 x i8> %373, !dbg !103
  %375 = sext i32 %15 to i64, !dbg !105
  %376 = getelementptr float, ptr addrspace(1) %1, i64 %375, !dbg !105
  %377 = sext i32 %16 to i64, !dbg !105
  %378 = getelementptr float, ptr addrspace(1) %1, i64 %377, !dbg !105
  %379 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %9, !dbg !106
  %380 = extractelement <4 x i32> %.v20, i64 0, !dbg !106
  %381 = select i1 %348, i32 %176, i32 %380, !dbg !107
  %382 = extractelement <4 x i32> %.v20, i64 1, !dbg !106
  %383 = select i1 %350, i32 %177, i32 %382, !dbg !107
  %384 = extractelement <4 x i32> %.v20, i64 2, !dbg !106
  %385 = select i1 %352, i32 %178, i32 %384, !dbg !107
  %386 = extractelement <4 x i32> %.v20, i64 3, !dbg !106
  %387 = select i1 %354, i32 %179, i32 %386, !dbg !107
  %388 = extractelement <4 x i32> %.v27, i64 0, !dbg !106
  %389 = select i1 %357, i32 %181, i32 %388, !dbg !107
  %390 = extractelement <4 x i32> %.v27, i64 1, !dbg !106
  %391 = select i1 %360, i32 %182, i32 %390, !dbg !107
  %392 = extractelement <4 x i32> %.v27, i64 2, !dbg !106
  %393 = select i1 %363, i32 %183, i32 %392, !dbg !107
  %394 = extractelement <4 x i32> %.v27, i64 3, !dbg !106
  %395 = select i1 %366, i32 %184, i32 %394, !dbg !107
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %379, i32 %381, i32 %383, i32 %385, i32 %387, i1 true) #2, !dbg !106
  %396 = getelementptr inbounds i8, ptr addrspace(3) %379, i32 16, !dbg !106
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %396, i32 %389, i32 %391, i32 %393, i32 %395, i1 true) #2, !dbg !106
  tail call void @llvm.nvvm.barrier0(), !dbg !106
  %397 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !106
  %398 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !106
  %399 = load <4 x i32>, ptr addrspace(3) %398, align 16, !dbg !106
  %.extract = load i32, ptr addrspace(3) %397, align 16, !dbg !106
  %400 = getelementptr inbounds i8, ptr addrspace(3) %397, i32 4, !dbg !106
  %.extract8 = load i32, ptr addrspace(3) %400, align 4, !dbg !106
  %401 = getelementptr inbounds i8, ptr addrspace(3) %397, i32 8, !dbg !106
  %.extract9 = load i32, ptr addrspace(3) %401, align 8, !dbg !106
  %402 = getelementptr inbounds i8, ptr addrspace(3) %397, i32 12, !dbg !106
  %.extract10 = load i32, ptr addrspace(3) %402, align 4, !dbg !106
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %376, i1 true) #2, !dbg !106
  %.extract11 = extractelement <4 x i32> %399, i64 0, !dbg !106
  %.extract12 = extractelement <4 x i32> %399, i64 1, !dbg !106
  %.extract13 = extractelement <4 x i32> %399, i64 2, !dbg !106
  %.extract14 = extractelement <4 x i32> %399, i64 3, !dbg !106
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %378, i1 true) #2, !dbg !106
  %403 = getelementptr i8, ptr addrspace(1) %2, i64 %100, !dbg !108
  %404 = bitcast <4 x i8> %270 to i32, !dbg !109
  %405 = bitcast <4 x i8> %374 to i32, !dbg !109
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %404, i32 %405, ptr addrspace(1) %403, i1 true) #2, !dbg !109
  ret void, !dbg !110
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cr7e4si2cop4hbnbfjlfhwwpyfwsgunq5bszvvv6bjyxp33gym64.py", directory: "inductor_cache/r7")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_44, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_44, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_44", linkageName: "triton_poi_fused_max_pool2d_with_indices_44", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 38, column: 41, scope: !7)
!15 = !DILocation(line: 38, column: 31, scope: !7)
!16 = !DILocation(line: 44, column: 41, scope: !7)
!17 = !DILocation(line: 44, column: 31, scope: !7)
!18 = !DILocation(line: 51, column: 41, scope: !7)
!19 = !DILocation(line: 51, column: 31, scope: !7)
!20 = !DILocation(line: 24, column: 21, scope: !7)
!21 = !DILocation(line: 24, column: 29, scope: !7)
!22 = !DILocation(line: 69, column: 20, scope: !7)
!23 = !DILocation(line: 29, column: 19, scope: !7)
!24 = !DILocation(line: 54, column: 21, scope: !7)
!25 = !DILocation(line: 37, column: 19, scope: !7)
!26 = !DILocation(line: 38, column: 46, scope: !7)
!27 = !DILocation(line: 60, column: 20, scope: !7)
!28 = !DILocation(line: 40, column: 21, scope: !7)
!29 = !DILocation(line: 43, column: 19, scope: !7)
!30 = !DILocation(line: 44, column: 46, scope: !7)
!31 = !DILocation(line: 49, column: 20, scope: !7)
!32 = !DILocation(line: 50, column: 19, scope: !7)
!33 = !DILocation(line: 51, column: 46, scope: !7)
!34 = !DILocation(line: 57, column: 20, scope: !7)
!35 = !DILocation(line: 58, column: 40, scope: !7)
!36 = !DILocation(line: 58, column: 31, scope: !7)
!37 = !DILocation(line: 58, column: 45, scope: !7)
!38 = !DILocation(line: 61, column: 31, scope: !7)
!39 = !DILocation(line: 61, column: 36, scope: !7)
!40 = !DILocation(line: 63, column: 20, scope: !7)
!41 = !DILocation(line: 64, column: 37, scope: !7)
!42 = !DILocation(line: 64, column: 31, scope: !7)
!43 = !DILocation(line: 64, column: 42, scope: !7)
!44 = !DILocation(line: 70, column: 20, scope: !7)
!45 = !DILocation(line: 71, column: 38, scope: !7)
!46 = !DILocation(line: 71, column: 31, scope: !7)
!47 = !DILocation(line: 71, column: 43, scope: !7)
!48 = !DILocation(line: 73, column: 20, scope: !7)
!49 = !DILocation(line: 74, column: 38, scope: !7)
!50 = !DILocation(line: 74, column: 31, scope: !7)
!51 = !DILocation(line: 74, column: 43, scope: !7)
!52 = !DILocation(line: 76, column: 20, scope: !7)
!53 = !DILocation(line: 77, column: 38, scope: !7)
!54 = !DILocation(line: 77, column: 31, scope: !7)
!55 = !DILocation(line: 77, column: 43, scope: !7)
!56 = !DILocation(line: 118, column: 15, scope: !57, inlinedAt: !59)
!57 = distinct !DILexicalBlockFile(scope: !7, file: !58, discriminator: 0)
!58 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!59 = !DILocation(line: 45, column: 42, scope: !7)
!60 = !DILocation(line: 120, column: 21, scope: !57, inlinedAt: !59)
!61 = !DILocation(line: 120, column: 16, scope: !57, inlinedAt: !59)
!62 = !DILocation(line: 121, column: 29, scope: !57, inlinedAt: !59)
!63 = !DILocation(line: 118, column: 15, scope: !57, inlinedAt: !64)
!64 = !DILocation(line: 52, column: 42, scope: !7)
!65 = !DILocation(line: 120, column: 21, scope: !57, inlinedAt: !64)
!66 = !DILocation(line: 120, column: 16, scope: !57, inlinedAt: !64)
!67 = !DILocation(line: 121, column: 29, scope: !57, inlinedAt: !64)
!68 = !DILocation(line: 118, column: 15, scope: !57, inlinedAt: !69)
!69 = !DILocation(line: 59, column: 42, scope: !7)
!70 = !DILocation(line: 120, column: 21, scope: !57, inlinedAt: !69)
!71 = !DILocation(line: 120, column: 16, scope: !57, inlinedAt: !69)
!72 = !DILocation(line: 121, column: 29, scope: !57, inlinedAt: !69)
!73 = !DILocation(line: 118, column: 15, scope: !57, inlinedAt: !74)
!74 = !DILocation(line: 62, column: 42, scope: !7)
!75 = !DILocation(line: 120, column: 21, scope: !57, inlinedAt: !74)
!76 = !DILocation(line: 120, column: 16, scope: !57, inlinedAt: !74)
!77 = !DILocation(line: 121, column: 29, scope: !57, inlinedAt: !74)
!78 = !DILocation(line: 118, column: 15, scope: !57, inlinedAt: !79)
!79 = !DILocation(line: 65, column: 42, scope: !7)
!80 = !DILocation(line: 120, column: 21, scope: !57, inlinedAt: !79)
!81 = !DILocation(line: 120, column: 16, scope: !57, inlinedAt: !79)
!82 = !DILocation(line: 121, column: 29, scope: !57, inlinedAt: !79)
!83 = !DILocation(line: 118, column: 15, scope: !57, inlinedAt: !84)
!84 = !DILocation(line: 72, column: 42, scope: !7)
!85 = !DILocation(line: 120, column: 21, scope: !57, inlinedAt: !84)
!86 = !DILocation(line: 120, column: 16, scope: !57, inlinedAt: !84)
!87 = !DILocation(line: 121, column: 29, scope: !57, inlinedAt: !84)
!88 = !DILocation(line: 118, column: 15, scope: !57, inlinedAt: !89)
!89 = !DILocation(line: 75, column: 42, scope: !7)
!90 = !DILocation(line: 120, column: 21, scope: !57, inlinedAt: !89)
!91 = !DILocation(line: 120, column: 16, scope: !57, inlinedAt: !89)
!92 = !DILocation(line: 121, column: 29, scope: !57, inlinedAt: !89)
!93 = !DILocation(line: 118, column: 15, scope: !57, inlinedAt: !94)
!94 = !DILocation(line: 78, column: 42, scope: !7)
!95 = !DILocation(line: 120, column: 16, scope: !57, inlinedAt: !94)
!96 = !DILocation(line: 82, column: 35, scope: !7)
!97 = !DILocation(line: 85, column: 35, scope: !7)
!98 = !DILocation(line: 88, column: 35, scope: !7)
!99 = !DILocation(line: 91, column: 35, scope: !7)
!100 = !DILocation(line: 94, column: 35, scope: !7)
!101 = !DILocation(line: 97, column: 35, scope: !7)
!102 = !DILocation(line: 100, column: 35, scope: !7)
!103 = !DILocation(line: 103, column: 35, scope: !7)
!104 = !DILocation(line: 120, column: 21, scope: !57, inlinedAt: !94)
!105 = !DILocation(line: 104, column: 25, scope: !7)
!106 = !DILocation(line: 104, column: 37, scope: !7)
!107 = !DILocation(line: 121, column: 29, scope: !57, inlinedAt: !94)
!108 = !DILocation(line: 105, column: 25, scope: !7)
!109 = !DILocation(line: 105, column: 37, scope: !7)
!110 = !DILocation(line: 105, column: 4, scope: !7)
