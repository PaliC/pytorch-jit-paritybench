; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_46(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %6 = shl i32 %5, 6, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = lshr i32 %7, 2, !dbg !12
  %9 = and i32 %8, 31, !dbg !12
  %10 = shl i32 %7, 2, !dbg !12
  %11 = and i32 %10, 12, !dbg !12
  %12 = and i32 %10, 60, !dbg !12
  %13 = or disjoint i32 %6, %9, !dbg !13
  %14 = or disjoint i32 %13, 32, !dbg !13
  %15 = or disjoint i32 %6, %12, !dbg !13
  %16 = icmp slt i32 %13, 416, !dbg !14
  %17 = icmp slt i32 %14, 416, !dbg !14
  %18 = icmp slt i32 %15, 416, !dbg !14
  %19 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %20 = shl i32 %19, 4, !dbg !16
  %21 = lshr i32 %7, 4, !dbg !17
  %22 = and i32 %21, 7, !dbg !17
  %23 = or disjoint i32 %20, %11, !dbg !18
  %24 = or disjoint i32 %20, %22, !dbg !18
  %25 = or disjoint i32 %24, 8, !dbg !18
  %26 = icmp slt i32 %23, 16, !dbg !19
  %27 = icmp slt i32 %24, 16, !dbg !19
  %28 = icmp slt i32 %25, 16, !dbg !19
  %.frozen = freeze i32 %13, !dbg !20
  %29 = sdiv i32 %.frozen, 104, !dbg !20
  %30 = mul i32 %29, 104, !dbg !21
  %.decomposed = sub i32 %.frozen, %30, !dbg !21
  %.frozen17 = freeze i32 %14, !dbg !20
  %31 = sdiv i32 %.frozen17, 104, !dbg !20
  %32 = mul i32 %31, 104, !dbg !21
  %.decomposed18 = sub i32 %.frozen17, %32, !dbg !21
  %.frozen19 = freeze i32 %15, !dbg !20
  %33 = sdiv i32 %.frozen19, 104, !dbg !20
  %34 = mul i32 %33, 104, !dbg !21
  %.decomposed20 = sub i32 %.frozen19, %34, !dbg !21
  %35 = shl nsw i32 %.decomposed, 4, !dbg !22
  %36 = shl nsw i32 %.decomposed18, 4, !dbg !22
  %37 = add i32 %35, %23, !dbg !23
  %38 = mul i32 %29, 6656, !dbg !24
  %39 = mul i32 %31, 6656, !dbg !24
  %40 = add i32 %37, %38, !dbg !25
  %41 = add i32 %39, %36, !dbg !23
  %42 = add i32 %41, %23, !dbg !25
  %43 = sext i32 %40 to i64, !dbg !26
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !26
  %45 = sext i32 %42 to i64, !dbg !26
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !26
  %47 = and i1 %16, %26, !dbg !27
  %48 = and i1 %17, %26, !dbg !27
  %49 = and i1 %18, %27, !dbg !27
  %50 = and i1 %28, %18, !dbg !27
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %44, i1 %47) #2, !dbg !28
  %52 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !28
  %53 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !28
  %54 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !28
  %55 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !28
  %56 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %46, i1 %48) #2, !dbg !28
  %57 = extractvalue { i32, i32, i32, i32 } %56, 0, !dbg !28
  %58 = extractvalue { i32, i32, i32, i32 } %56, 1, !dbg !28
  %59 = extractvalue { i32, i32, i32, i32 } %56, 2, !dbg !28
  %60 = extractvalue { i32, i32, i32, i32 } %56, 3, !dbg !28
  %61 = mul i32 %24, 104, !dbg !29
  %62 = mul i32 %25, 104, !dbg !29
  %63 = mul i32 %33, 1664, !dbg !30
  %64 = add i32 %63, %.decomposed20, !dbg !31
  %65 = add i32 %64, %61, !dbg !32
  %66 = add i32 %64, %62, !dbg !32
  %67 = sext i32 %65 to i64, !dbg !33
  %68 = getelementptr float, ptr addrspace(1) %1, i64 %67, !dbg !33
  %69 = sext i32 %66 to i64, !dbg !33
  %70 = getelementptr float, ptr addrspace(1) %1, i64 %69, !dbg !33
  %71 = shl i32 %7, 8, !dbg !34
  %72 = and i32 %71, 768, !dbg !34
  %73 = or disjoint i32 %72, %9, !dbg !34
  %74 = and i32 %10, 508, !dbg !34
  %75 = lshr exact i32 %72, 2, !dbg !34
  %76 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %75, !dbg !34
  %77 = getelementptr float, ptr addrspace(3) %76, i32 %73, !dbg !34
  %78 = insertelement <1 x i32> poison, i32 %52, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %77, <1 x i32> %78, i1 true) #2, !dbg !34
  %79 = or disjoint i32 %73, 64, !dbg !34
  %80 = lshr i32 %79, 4, !dbg !34
  %81 = and i32 %80, 52, !dbg !34
  %82 = getelementptr float, ptr addrspace(3) @global_smem, i32 %81, !dbg !34
  %83 = getelementptr float, ptr addrspace(3) %82, i32 %79, !dbg !34
  %84 = insertelement <1 x i32> poison, i32 %53, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %83, <1 x i32> %84, i1 true) #2, !dbg !34
  %85 = or disjoint i32 %73, 128, !dbg !34
  %86 = lshr i32 %85, 4, !dbg !34
  %87 = and i32 %86, 56, !dbg !34
  %88 = getelementptr float, ptr addrspace(3) @global_smem, i32 %87, !dbg !34
  %89 = getelementptr float, ptr addrspace(3) %88, i32 %85, !dbg !34
  %90 = insertelement <1 x i32> poison, i32 %54, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %89, <1 x i32> %90, i1 true) #2, !dbg !34
  %91 = or disjoint i32 %73, 192, !dbg !34
  %92 = lshr i32 %91, 4, !dbg !34
  %93 = and i32 %92, 60, !dbg !34
  %94 = getelementptr float, ptr addrspace(3) @global_smem, i32 %93, !dbg !34
  %95 = getelementptr float, ptr addrspace(3) %94, i32 %91, !dbg !34
  %96 = insertelement <1 x i32> poison, i32 %55, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %95, <1 x i32> %96, i1 true) #2, !dbg !34
  %97 = or disjoint i32 %73, 32, !dbg !34
  %98 = getelementptr float, ptr addrspace(3) %76, i32 %97, !dbg !34
  %99 = insertelement <1 x i32> poison, i32 %57, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %98, <1 x i32> %99, i1 true) #2, !dbg !34
  %100 = or disjoint i32 %73, 96, !dbg !34
  %101 = lshr i32 %100, 4, !dbg !34
  %102 = and i32 %101, 52, !dbg !34
  %103 = getelementptr float, ptr addrspace(3) @global_smem, i32 %102, !dbg !34
  %104 = getelementptr float, ptr addrspace(3) %103, i32 %100, !dbg !34
  %105 = insertelement <1 x i32> poison, i32 %58, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %104, <1 x i32> %105, i1 true) #2, !dbg !34
  %106 = or disjoint i32 %73, 160, !dbg !34
  %107 = lshr i32 %106, 4, !dbg !34
  %108 = and i32 %107, 56, !dbg !34
  %109 = getelementptr float, ptr addrspace(3) @global_smem, i32 %108, !dbg !34
  %110 = getelementptr float, ptr addrspace(3) %109, i32 %106, !dbg !34
  %111 = insertelement <1 x i32> poison, i32 %59, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %110, <1 x i32> %111, i1 true) #2, !dbg !34
  %112 = or disjoint i32 %73, 224, !dbg !34
  %113 = lshr i32 %112, 4, !dbg !34
  %114 = and i32 %113, 60, !dbg !34
  %115 = getelementptr float, ptr addrspace(3) @global_smem, i32 %114, !dbg !34
  %116 = getelementptr float, ptr addrspace(3) %115, i32 %112, !dbg !34
  %117 = insertelement <1 x i32> poison, i32 %60, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %116, <1 x i32> %117, i1 true) #2, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %118 = lshr i32 %10, 4, !dbg !34
  %119 = and i32 %118, 28, !dbg !34
  %120 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %119, !dbg !34
  %121 = getelementptr inbounds float, ptr addrspace(3) %120, i32 %74, !dbg !34
  %122 = or disjoint i32 %74, 512, !dbg !34
  %123 = lshr i32 %122, 4, !dbg !34
  %124 = and i32 %123, 60, !dbg !34
  %125 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %124, !dbg !34
  %126 = getelementptr inbounds float, ptr addrspace(3) %125, i32 %122, !dbg !34
  %127 = load <4 x i32>, ptr addrspace(3) %126, align 16, !dbg !34
  %.extract = load i32, ptr addrspace(3) %121, align 16, !dbg !34
  %128 = getelementptr inbounds i8, ptr addrspace(3) %121, i32 4, !dbg !34
  %.extract10 = load i32, ptr addrspace(3) %128, align 4, !dbg !34
  %129 = getelementptr inbounds i8, ptr addrspace(3) %121, i32 8, !dbg !34
  %.extract11 = load i32, ptr addrspace(3) %129, align 8, !dbg !34
  %130 = getelementptr inbounds i8, ptr addrspace(3) %121, i32 12, !dbg !34
  %.extract12 = load i32, ptr addrspace(3) %130, align 4, !dbg !34
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract10, i32 %.extract11, i32 %.extract12, ptr addrspace(1) %68, i1 %49) #2, !dbg !34
  %.extract13 = extractelement <4 x i32> %127, i64 0, !dbg !34
  %.extract14 = extractelement <4 x i32> %127, i64 1, !dbg !34
  %.extract15 = extractelement <4 x i32> %127, i64 2, !dbg !34
  %.extract16 = extractelement <4 x i32> %127, i64 3, !dbg !34
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract13, i32 %.extract14, i32 %.extract15, i32 %.extract16, ptr addrspace(1) %70, i1 %50) #2, !dbg !34
  ret void, !dbg !35
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "caloqls2tzpsbkcjqtcyquspeem44wyjx3k7jgg55nbsmpsilnby.py", directory: "inductor_cache/al")
!4 = !{ptr @triton_poi_fused_convolution_46, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_46, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_46", linkageName: "triton_poi_fused_convolution_46", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 31, column: 38, scope: !7)
!23 = !DILocation(line: 31, column: 35, scope: !7)
!24 = !DILocation(line: 31, column: 48, scope: !7)
!25 = !DILocation(line: 31, column: 43, scope: !7)
!26 = !DILocation(line: 31, column: 30, scope: !7)
!27 = !DILocation(line: 31, column: 61, scope: !7)
!28 = !DILocation(line: 31, column: 53, scope: !7)
!29 = !DILocation(line: 32, column: 34, scope: !7)
!30 = !DILocation(line: 32, column: 44, scope: !7)
!31 = !DILocation(line: 32, column: 30, scope: !7)
!32 = !DILocation(line: 32, column: 39, scope: !7)
!33 = !DILocation(line: 32, column: 25, scope: !7)
!34 = !DILocation(line: 32, column: 55, scope: !7)
!35 = !DILocation(line: 32, column: 4, scope: !7)
