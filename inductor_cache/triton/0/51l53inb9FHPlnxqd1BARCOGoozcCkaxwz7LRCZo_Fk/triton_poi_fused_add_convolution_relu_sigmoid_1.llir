; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_add_convolution_relu_sigmoid_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 6, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 4, !dbg !12
  %10 = and i32 %9, 15, !dbg !12
  %11 = or disjoint i32 %10, 16, !dbg !12
  %12 = or disjoint i32 %10, 32, !dbg !12
  %13 = or disjoint i32 %10, 48, !dbg !12
  %14 = shl i32 %8, 2, !dbg !12
  %15 = and i32 %14, 60, !dbg !12
  %16 = or disjoint i32 %7, %10, !dbg !13
  %17 = or disjoint i32 %7, %11, !dbg !13
  %18 = or disjoint i32 %7, %12, !dbg !13
  %19 = or disjoint i32 %7, %13, !dbg !13
  %20 = or disjoint i32 %7, %15, !dbg !13
  %21 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %22 = shl i32 %21, 6, !dbg !15
  %23 = or disjoint i32 %22, %15, !dbg !16
  %24 = or disjoint i32 %22, %10, !dbg !16
  %25 = or disjoint i32 %22, %11, !dbg !16
  %26 = or disjoint i32 %22, %12, !dbg !16
  %27 = or disjoint i32 %22, %13, !dbg !16
  %28 = icmp slt i32 %23, 256, !dbg !17
  %29 = icmp slt i32 %24, 256, !dbg !17
  %30 = icmp slt i32 %25, 256, !dbg !17
  %31 = icmp slt i32 %26, 256, !dbg !17
  %32 = icmp slt i32 %27, 256, !dbg !17
  %.frozen = freeze i32 %20, !dbg !18
  %33 = sdiv i32 %.frozen, 4096, !dbg !18
  %34 = mul i32 %33, 4096, !dbg !19
  %.decomposed = sub i32 %.frozen, %34, !dbg !19
  %35 = shl i32 %16, 8, !dbg !20
  %36 = shl i32 %17, 8, !dbg !20
  %37 = shl i32 %18, 8, !dbg !20
  %38 = shl i32 %19, 8, !dbg !20
  %39 = add i32 %23, %35, !dbg !21
  %40 = add i32 %23, %36, !dbg !21
  %41 = add i32 %23, %37, !dbg !21
  %42 = add i32 %23, %38, !dbg !21
  %43 = sext i32 %39 to i64, !dbg !22
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !22
  %45 = sext i32 %40 to i64, !dbg !22
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !22
  %47 = sext i32 %41 to i64, !dbg !22
  %48 = getelementptr float, ptr addrspace(1) %0, i64 %47, !dbg !22
  %49 = sext i32 %42 to i64, !dbg !22
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !22
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %44, i1 %28) #2, !dbg !23
  %52 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !23
  %53 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !23
  %54 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !23
  %55 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !23
  %56 = bitcast i32 %52 to float, !dbg !23
  %57 = bitcast i32 %53 to float, !dbg !23
  %58 = bitcast i32 %54 to float, !dbg !23
  %59 = bitcast i32 %55 to float, !dbg !23
  %60 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %46, i1 %28) #2, !dbg !23
  %61 = extractvalue { i32, i32, i32, i32 } %60, 0, !dbg !23
  %62 = extractvalue { i32, i32, i32, i32 } %60, 1, !dbg !23
  %63 = extractvalue { i32, i32, i32, i32 } %60, 2, !dbg !23
  %64 = extractvalue { i32, i32, i32, i32 } %60, 3, !dbg !23
  %65 = bitcast i32 %61 to float, !dbg !23
  %66 = bitcast i32 %62 to float, !dbg !23
  %67 = bitcast i32 %63 to float, !dbg !23
  %68 = bitcast i32 %64 to float, !dbg !23
  %69 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %48, i1 %28) #2, !dbg !23
  %70 = extractvalue { i32, i32, i32, i32 } %69, 0, !dbg !23
  %71 = extractvalue { i32, i32, i32, i32 } %69, 1, !dbg !23
  %72 = extractvalue { i32, i32, i32, i32 } %69, 2, !dbg !23
  %73 = extractvalue { i32, i32, i32, i32 } %69, 3, !dbg !23
  %74 = bitcast i32 %70 to float, !dbg !23
  %75 = bitcast i32 %71 to float, !dbg !23
  %76 = bitcast i32 %72 to float, !dbg !23
  %77 = bitcast i32 %73 to float, !dbg !23
  %78 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %50, i1 %28) #2, !dbg !23
  %79 = extractvalue { i32, i32, i32, i32 } %78, 0, !dbg !23
  %80 = extractvalue { i32, i32, i32, i32 } %78, 1, !dbg !23
  %81 = extractvalue { i32, i32, i32, i32 } %78, 2, !dbg !23
  %82 = extractvalue { i32, i32, i32, i32 } %78, 3, !dbg !23
  %83 = bitcast i32 %79 to float, !dbg !23
  %84 = bitcast i32 %80 to float, !dbg !23
  %85 = bitcast i32 %81 to float, !dbg !23
  %86 = bitcast i32 %82 to float, !dbg !23
  %87 = sext i32 %23 to i64, !dbg !24
  %88 = getelementptr float, ptr addrspace(1) %1, i64 %87, !dbg !24
  %89 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %88, i1 %28) #2, !dbg !25
  %90 = extractvalue { i32, i32, i32, i32 } %89, 0, !dbg !25
  %91 = extractvalue { i32, i32, i32, i32 } %89, 1, !dbg !25
  %92 = extractvalue { i32, i32, i32, i32 } %89, 2, !dbg !25
  %93 = extractvalue { i32, i32, i32, i32 } %89, 3, !dbg !25
  %94 = bitcast i32 %90 to float, !dbg !25
  %95 = bitcast i32 %91 to float, !dbg !25
  %96 = bitcast i32 %92 to float, !dbg !25
  %97 = bitcast i32 %93 to float, !dbg !25
  %98 = shl i32 %24, 12, !dbg !26
  %99 = shl i32 %25, 12, !dbg !26
  %100 = shl i32 %26, 12, !dbg !26
  %101 = shl i32 %27, 12, !dbg !26
  %102 = shl i32 %33, 20, !dbg !27
  %103 = add i32 %102, %.decomposed, !dbg !28
  %104 = add i32 %103, %98, !dbg !29
  %105 = add i32 %103, %99, !dbg !29
  %106 = add i32 %103, %100, !dbg !29
  %107 = add i32 %103, %101, !dbg !29
  %108 = sext i32 %104 to i64, !dbg !30
  %109 = getelementptr float, ptr addrspace(1) %2, i64 %108, !dbg !30
  %110 = sext i32 %105 to i64, !dbg !30
  %111 = getelementptr float, ptr addrspace(1) %2, i64 %110, !dbg !30
  %112 = sext i32 %106 to i64, !dbg !30
  %113 = getelementptr float, ptr addrspace(1) %2, i64 %112, !dbg !30
  %114 = sext i32 %107 to i64, !dbg !30
  %115 = getelementptr float, ptr addrspace(1) %2, i64 %114, !dbg !30
  %116 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %109, i1 %29) #2, !dbg !31
  %117 = extractvalue { i32, i32, i32, i32 } %116, 0, !dbg !31
  %118 = extractvalue { i32, i32, i32, i32 } %116, 1, !dbg !31
  %119 = extractvalue { i32, i32, i32, i32 } %116, 2, !dbg !31
  %120 = extractvalue { i32, i32, i32, i32 } %116, 3, !dbg !31
  %121 = bitcast i32 %117 to float, !dbg !31
  %122 = bitcast i32 %118 to float, !dbg !31
  %123 = bitcast i32 %119 to float, !dbg !31
  %124 = bitcast i32 %120 to float, !dbg !31
  %125 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %111, i1 %30) #2, !dbg !31
  %126 = extractvalue { i32, i32, i32, i32 } %125, 0, !dbg !31
  %127 = extractvalue { i32, i32, i32, i32 } %125, 1, !dbg !31
  %128 = extractvalue { i32, i32, i32, i32 } %125, 2, !dbg !31
  %129 = extractvalue { i32, i32, i32, i32 } %125, 3, !dbg !31
  %130 = bitcast i32 %126 to float, !dbg !31
  %131 = bitcast i32 %127 to float, !dbg !31
  %132 = bitcast i32 %128 to float, !dbg !31
  %133 = bitcast i32 %129 to float, !dbg !31
  %134 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %113, i1 %31) #2, !dbg !31
  %135 = extractvalue { i32, i32, i32, i32 } %134, 0, !dbg !31
  %136 = extractvalue { i32, i32, i32, i32 } %134, 1, !dbg !31
  %137 = extractvalue { i32, i32, i32, i32 } %134, 2, !dbg !31
  %138 = extractvalue { i32, i32, i32, i32 } %134, 3, !dbg !31
  %139 = bitcast i32 %135 to float, !dbg !31
  %140 = bitcast i32 %136 to float, !dbg !31
  %141 = bitcast i32 %137 to float, !dbg !31
  %142 = bitcast i32 %138 to float, !dbg !31
  %143 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %115, i1 %32) #2, !dbg !31
  %144 = extractvalue { i32, i32, i32, i32 } %143, 0, !dbg !31
  %145 = extractvalue { i32, i32, i32, i32 } %143, 1, !dbg !31
  %146 = extractvalue { i32, i32, i32, i32 } %143, 2, !dbg !31
  %147 = extractvalue { i32, i32, i32, i32 } %143, 3, !dbg !31
  %148 = bitcast i32 %144 to float, !dbg !31
  %149 = bitcast i32 %145 to float, !dbg !31
  %150 = bitcast i32 %146 to float, !dbg !31
  %151 = bitcast i32 %147 to float, !dbg !31
  %152 = fadd float %56, %94, !dbg !32
  %153 = fadd float %57, %95, !dbg !32
  %154 = fadd float %58, %96, !dbg !32
  %155 = fadd float %59, %97, !dbg !32
  %156 = fadd float %65, %94, !dbg !32
  %157 = fadd float %66, %95, !dbg !32
  %158 = fadd float %67, %96, !dbg !32
  %159 = fadd float %68, %97, !dbg !32
  %160 = fadd float %74, %94, !dbg !32
  %161 = fadd float %75, %95, !dbg !32
  %162 = fadd float %76, %96, !dbg !32
  %163 = fadd float %77, %97, !dbg !32
  %164 = fadd float %83, %94, !dbg !32
  %165 = fadd float %84, %95, !dbg !32
  %166 = fadd float %85, %96, !dbg !32
  %167 = fadd float %86, %97, !dbg !32
  %168 = shl i32 %8, 8, !dbg !32
  %169 = and i32 %168, 3840, !dbg !32
  %170 = or disjoint i32 %169, %10, !dbg !32
  %171 = and i32 %14, 1020, !dbg !32
  %172 = lshr exact i32 %169, 2, !dbg !32
  %173 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %172, !dbg !32
  %174 = getelementptr float, ptr addrspace(3) %173, i32 %170, !dbg !32
  %175 = bitcast float %152 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %174, <1 x i32> %175, i1 true) #2, !dbg !32
  %176 = or disjoint i32 %170, 64, !dbg !32
  %177 = lshr i32 %176, 6, !dbg !32
  %.idx = shl nuw nsw i32 %177, 4, !dbg !32
  %178 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !32
  %179 = getelementptr float, ptr addrspace(3) %178, i32 %176, !dbg !32
  %180 = bitcast float %153 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %179, <1 x i32> %180, i1 true) #2, !dbg !32
  %181 = or disjoint i32 %170, 128, !dbg !32
  %182 = lshr i32 %181, 6, !dbg !32
  %.idx1 = shl nuw nsw i32 %182, 4, !dbg !32
  %183 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx1, !dbg !32
  %184 = getelementptr float, ptr addrspace(3) %183, i32 %181, !dbg !32
  %185 = bitcast float %154 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %184, <1 x i32> %185, i1 true) #2, !dbg !32
  %186 = or disjoint i32 %170, 192, !dbg !32
  %187 = lshr i32 %186, 6, !dbg !32
  %.idx2 = shl nuw nsw i32 %187, 4, !dbg !32
  %188 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx2, !dbg !32
  %189 = getelementptr float, ptr addrspace(3) %188, i32 %186, !dbg !32
  %190 = bitcast float %155 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %189, <1 x i32> %190, i1 true) #2, !dbg !32
  %191 = or disjoint i32 %170, 16, !dbg !32
  %192 = getelementptr float, ptr addrspace(3) %173, i32 %191, !dbg !32
  %193 = bitcast float %156 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %192, <1 x i32> %193, i1 true) #2, !dbg !32
  %194 = or disjoint i32 %170, 80, !dbg !32
  %195 = lshr i32 %194, 6, !dbg !32
  %.idx3 = shl nuw nsw i32 %195, 4, !dbg !32
  %196 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx3, !dbg !32
  %197 = getelementptr float, ptr addrspace(3) %196, i32 %194, !dbg !32
  %198 = bitcast float %157 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %197, <1 x i32> %198, i1 true) #2, !dbg !32
  %199 = or disjoint i32 %170, 144, !dbg !32
  %200 = lshr i32 %199, 6, !dbg !32
  %.idx4 = shl nuw nsw i32 %200, 4, !dbg !32
  %201 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx4, !dbg !32
  %202 = getelementptr float, ptr addrspace(3) %201, i32 %199, !dbg !32
  %203 = bitcast float %158 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %202, <1 x i32> %203, i1 true) #2, !dbg !32
  %204 = or disjoint i32 %170, 208, !dbg !32
  %205 = lshr i32 %204, 6, !dbg !32
  %.idx5 = shl nuw nsw i32 %205, 4, !dbg !32
  %206 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx5, !dbg !32
  %207 = getelementptr float, ptr addrspace(3) %206, i32 %204, !dbg !32
  %208 = bitcast float %159 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %207, <1 x i32> %208, i1 true) #2, !dbg !32
  %209 = or disjoint i32 %170, 32, !dbg !32
  %210 = getelementptr float, ptr addrspace(3) %173, i32 %209, !dbg !32
  %211 = bitcast float %160 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %210, <1 x i32> %211, i1 true) #2, !dbg !32
  %212 = or disjoint i32 %170, 96, !dbg !32
  %213 = lshr i32 %212, 6, !dbg !32
  %.idx6 = shl nuw nsw i32 %213, 4, !dbg !32
  %214 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx6, !dbg !32
  %215 = getelementptr float, ptr addrspace(3) %214, i32 %212, !dbg !32
  %216 = bitcast float %161 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %215, <1 x i32> %216, i1 true) #2, !dbg !32
  %217 = or disjoint i32 %170, 160, !dbg !32
  %218 = lshr i32 %217, 6, !dbg !32
  %.idx7 = shl nuw nsw i32 %218, 4, !dbg !32
  %219 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx7, !dbg !32
  %220 = getelementptr float, ptr addrspace(3) %219, i32 %217, !dbg !32
  %221 = bitcast float %162 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %220, <1 x i32> %221, i1 true) #2, !dbg !32
  %222 = or disjoint i32 %170, 224, !dbg !32
  %223 = lshr i32 %222, 6, !dbg !32
  %.idx8 = shl nuw nsw i32 %223, 4, !dbg !32
  %224 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx8, !dbg !32
  %225 = getelementptr float, ptr addrspace(3) %224, i32 %222, !dbg !32
  %226 = bitcast float %163 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %225, <1 x i32> %226, i1 true) #2, !dbg !32
  %227 = or disjoint i32 %170, 48, !dbg !32
  %228 = getelementptr float, ptr addrspace(3) %173, i32 %227, !dbg !32
  %229 = bitcast float %164 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %228, <1 x i32> %229, i1 true) #2, !dbg !32
  %230 = or disjoint i32 %170, 112, !dbg !32
  %231 = lshr i32 %230, 6, !dbg !32
  %.idx9 = shl nuw nsw i32 %231, 4, !dbg !32
  %232 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx9, !dbg !32
  %233 = getelementptr float, ptr addrspace(3) %232, i32 %230, !dbg !32
  %234 = bitcast float %165 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %233, <1 x i32> %234, i1 true) #2, !dbg !32
  %235 = or disjoint i32 %170, 176, !dbg !32
  %236 = lshr i32 %235, 6, !dbg !32
  %.idx10 = shl nuw nsw i32 %236, 4, !dbg !32
  %237 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx10, !dbg !32
  %238 = getelementptr float, ptr addrspace(3) %237, i32 %235, !dbg !32
  %239 = bitcast float %166 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %238, <1 x i32> %239, i1 true) #2, !dbg !32
  %240 = or disjoint i32 %170, 240, !dbg !32
  %241 = lshr i32 %240, 6, !dbg !32
  %.idx11 = shl nuw nsw i32 %241, 4, !dbg !32
  %242 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx11, !dbg !32
  %243 = getelementptr float, ptr addrspace(3) %242, i32 %240, !dbg !32
  %244 = bitcast float %167 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %243, <1 x i32> %244, i1 true) #2, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %245 = lshr i32 %171, 6, !dbg !32
  %246 = and i32 %8, 255, !dbg !32
  %247 = add nuw nsw i32 %245, %246, !dbg !32
  %.idx12 = shl nuw nsw i32 %247, 4, !dbg !32
  %248 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx12, !dbg !32
  %249 = or disjoint i32 %171, 1024, !dbg !32
  %250 = lshr i32 %249, 6, !dbg !32
  %.idx16 = shl nuw nsw i32 %250, 4, !dbg !32
  %251 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx16, !dbg !32
  %252 = getelementptr inbounds float, ptr addrspace(3) %251, i32 %249, !dbg !32
  %253 = or disjoint i32 %171, 2048, !dbg !32
  %254 = lshr i32 %253, 6, !dbg !32
  %.idx21 = shl nuw nsw i32 %254, 4, !dbg !32
  %255 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx21, !dbg !32
  %256 = getelementptr inbounds float, ptr addrspace(3) %255, i32 %253, !dbg !32
  %257 = or disjoint i32 %171, 3072, !dbg !32
  %258 = lshr i32 %257, 6, !dbg !32
  %.idx26 = shl nuw nsw i32 %258, 4, !dbg !32
  %259 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx26, !dbg !32
  %260 = getelementptr inbounds float, ptr addrspace(3) %259, i32 %257, !dbg !32
  %261 = fsub float 0.000000e+00, %121, !dbg !33
  %262 = fsub float 0.000000e+00, %122, !dbg !33
  %263 = fsub float 0.000000e+00, %123, !dbg !33
  %264 = fsub float 0.000000e+00, %124, !dbg !33
  %265 = fsub float 0.000000e+00, %130, !dbg !33
  %266 = fsub float 0.000000e+00, %131, !dbg !33
  %267 = fsub float 0.000000e+00, %132, !dbg !33
  %268 = fsub float 0.000000e+00, %133, !dbg !33
  %269 = fsub float 0.000000e+00, %139, !dbg !33
  %270 = fsub float 0.000000e+00, %140, !dbg !33
  %271 = fsub float 0.000000e+00, %141, !dbg !33
  %272 = fsub float 0.000000e+00, %142, !dbg !33
  %273 = fsub float 0.000000e+00, %148, !dbg !33
  %274 = fsub float 0.000000e+00, %149, !dbg !33
  %275 = fsub float 0.000000e+00, %150, !dbg !33
  %276 = fsub float 0.000000e+00, %151, !dbg !33
  %277 = fmul float %261, 0x3FF7154760000000, !dbg !37
  %278 = fmul float %262, 0x3FF7154760000000, !dbg !37
  %279 = fmul float %263, 0x3FF7154760000000, !dbg !37
  %280 = fmul float %264, 0x3FF7154760000000, !dbg !37
  %281 = fmul float %265, 0x3FF7154760000000, !dbg !37
  %282 = fmul float %266, 0x3FF7154760000000, !dbg !37
  %283 = fmul float %267, 0x3FF7154760000000, !dbg !37
  %284 = fmul float %268, 0x3FF7154760000000, !dbg !37
  %285 = fmul float %269, 0x3FF7154760000000, !dbg !37
  %286 = fmul float %270, 0x3FF7154760000000, !dbg !37
  %287 = fmul float %271, 0x3FF7154760000000, !dbg !37
  %288 = fmul float %272, 0x3FF7154760000000, !dbg !37
  %289 = fmul float %273, 0x3FF7154760000000, !dbg !37
  %290 = fmul float %274, 0x3FF7154760000000, !dbg !37
  %291 = fmul float %275, 0x3FF7154760000000, !dbg !37
  %292 = fmul float %276, 0x3FF7154760000000, !dbg !37
  %293 = load <4 x float>, ptr addrspace(3) %248, align 16, !dbg !32
  %294 = load <4 x float>, ptr addrspace(3) %252, align 16, !dbg !32
  %295 = load <4 x float>, ptr addrspace(3) %256, align 16, !dbg !32
  %296 = load <4 x float>, ptr addrspace(3) %260, align 16, !dbg !32
  %297 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %277) #2, !dbg !37
  %298 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %278) #2, !dbg !37
  %299 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %279) #2, !dbg !37
  %300 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %280) #2, !dbg !37
  %301 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %281) #2, !dbg !37
  %302 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %282) #2, !dbg !37
  %303 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %283) #2, !dbg !37
  %304 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %284) #2, !dbg !37
  %305 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %285) #2, !dbg !37
  %306 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %286) #2, !dbg !37
  %307 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %287) #2, !dbg !37
  %308 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %288) #2, !dbg !37
  %309 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %289) #2, !dbg !37
  %310 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %290) #2, !dbg !37
  %311 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %291) #2, !dbg !37
  %312 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %292) #2, !dbg !37
  %313 = fadd float %297, 1.000000e+00, !dbg !38
  %314 = fadd float %298, 1.000000e+00, !dbg !38
  %315 = fadd float %299, 1.000000e+00, !dbg !38
  %316 = fadd float %300, 1.000000e+00, !dbg !38
  %317 = fadd float %301, 1.000000e+00, !dbg !38
  %318 = fadd float %302, 1.000000e+00, !dbg !38
  %319 = fadd float %303, 1.000000e+00, !dbg !38
  %320 = fadd float %304, 1.000000e+00, !dbg !38
  %321 = fadd float %305, 1.000000e+00, !dbg !38
  %322 = fadd float %306, 1.000000e+00, !dbg !38
  %323 = fadd float %307, 1.000000e+00, !dbg !38
  %324 = fadd float %308, 1.000000e+00, !dbg !38
  %325 = fadd float %309, 1.000000e+00, !dbg !38
  %326 = fadd float %310, 1.000000e+00, !dbg !38
  %327 = fadd float %311, 1.000000e+00, !dbg !38
  %328 = fadd float %312, 1.000000e+00, !dbg !38
  %329 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %313) #2, !dbg !39
  %330 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %314) #2, !dbg !39
  %331 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %315) #2, !dbg !39
  %332 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %316) #2, !dbg !39
  %333 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %317) #2, !dbg !39
  %334 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %318) #2, !dbg !39
  %335 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %319) #2, !dbg !39
  %336 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %320) #2, !dbg !39
  %337 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %321) #2, !dbg !39
  %338 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %322) #2, !dbg !39
  %339 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %323) #2, !dbg !39
  %340 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %324) #2, !dbg !39
  %341 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %325) #2, !dbg !39
  %342 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %326) #2, !dbg !39
  %343 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %327) #2, !dbg !39
  %344 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %328) #2, !dbg !39
  %345 = insertelement <16 x float> poison, float %329, i64 0, !dbg !40
  %346 = insertelement <16 x float> %345, float %330, i64 1, !dbg !40
  %347 = insertelement <16 x float> %346, float %331, i64 2, !dbg !40
  %348 = insertelement <16 x float> %347, float %332, i64 3, !dbg !40
  %349 = insertelement <16 x float> %348, float %341, i64 4, !dbg !40
  %350 = insertelement <16 x float> %349, float %342, i64 5, !dbg !40
  %351 = insertelement <16 x float> %350, float %343, i64 6, !dbg !40
  %352 = insertelement <16 x float> %351, float %344, i64 7, !dbg !40
  %353 = insertelement <16 x float> %352, float %337, i64 8, !dbg !40
  %354 = insertelement <16 x float> %353, float %338, i64 9, !dbg !40
  %355 = insertelement <16 x float> %354, float %339, i64 10, !dbg !40
  %356 = insertelement <16 x float> %355, float %340, i64 11, !dbg !40
  %357 = insertelement <16 x float> %356, float %333, i64 12, !dbg !40
  %358 = insertelement <16 x float> %357, float %334, i64 13, !dbg !40
  %359 = insertelement <16 x float> %358, float %335, i64 14, !dbg !40
  %360 = insertelement <16 x float> %359, float %336, i64 15, !dbg !40
  %361 = fcmp olt <16 x float> %360, zeroinitializer, !dbg !40
  %362 = select <16 x i1> %361, <16 x float> zeroinitializer, <16 x float> %360, !dbg !44
  %363 = shufflevector <4 x float> %293, <4 x float> %296, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !45
  %364 = shufflevector <4 x float> %295, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !45
  %365 = shufflevector <16 x float> %363, <16 x float> %364, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 16, i32 17, i32 18, i32 19, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !45
  %366 = shufflevector <4 x float> %294, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !45
  %367 = shufflevector <16 x float> %365, <16 x float> %366, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 16, i32 17, i32 18, i32 19>, !dbg !45
  %368 = fadd <16 x float> %367, %362, !dbg !45
  %369 = fcmp olt <16 x float> %368, zeroinitializer, !dbg !46
  %370 = extractelement <16 x i1> %369, i64 0, !dbg !48
  %371 = extractelement <16 x float> %368, i64 0, !dbg !48
  %372 = select i1 %370, float 0.000000e+00, float %371, !dbg !48
  %373 = extractelement <16 x i1> %369, i64 1, !dbg !48
  %374 = extractelement <16 x float> %368, i64 1, !dbg !48
  %375 = select i1 %373, float 0.000000e+00, float %374, !dbg !48
  %376 = extractelement <16 x i1> %369, i64 2, !dbg !48
  %377 = extractelement <16 x float> %368, i64 2, !dbg !48
  %378 = select i1 %376, float 0.000000e+00, float %377, !dbg !48
  %379 = extractelement <16 x i1> %369, i64 3, !dbg !48
  %380 = extractelement <16 x float> %368, i64 3, !dbg !48
  %381 = select i1 %379, float 0.000000e+00, float %380, !dbg !48
  %382 = extractelement <16 x i1> %369, i64 12, !dbg !48
  %383 = extractelement <16 x float> %368, i64 12, !dbg !48
  %384 = select i1 %382, float 0.000000e+00, float %383, !dbg !48
  %385 = extractelement <16 x i1> %369, i64 13, !dbg !48
  %386 = extractelement <16 x float> %368, i64 13, !dbg !48
  %387 = select i1 %385, float 0.000000e+00, float %386, !dbg !48
  %388 = extractelement <16 x i1> %369, i64 14, !dbg !48
  %389 = extractelement <16 x float> %368, i64 14, !dbg !48
  %390 = select i1 %388, float 0.000000e+00, float %389, !dbg !48
  %391 = extractelement <16 x i1> %369, i64 15, !dbg !48
  %392 = extractelement <16 x float> %368, i64 15, !dbg !48
  %393 = select i1 %391, float 0.000000e+00, float %392, !dbg !48
  %394 = extractelement <16 x i1> %369, i64 8, !dbg !48
  %395 = extractelement <16 x float> %368, i64 8, !dbg !48
  %396 = select i1 %394, float 0.000000e+00, float %395, !dbg !48
  %397 = extractelement <16 x i1> %369, i64 9, !dbg !48
  %398 = extractelement <16 x float> %368, i64 9, !dbg !48
  %399 = select i1 %397, float 0.000000e+00, float %398, !dbg !48
  %400 = extractelement <16 x i1> %369, i64 10, !dbg !48
  %401 = extractelement <16 x float> %368, i64 10, !dbg !48
  %402 = select i1 %400, float 0.000000e+00, float %401, !dbg !48
  %403 = extractelement <16 x i1> %369, i64 11, !dbg !48
  %404 = extractelement <16 x float> %368, i64 11, !dbg !48
  %405 = select i1 %403, float 0.000000e+00, float %404, !dbg !48
  %406 = extractelement <16 x i1> %369, i64 4, !dbg !48
  %407 = extractelement <16 x float> %368, i64 4, !dbg !48
  %408 = select i1 %406, float 0.000000e+00, float %407, !dbg !48
  %409 = extractelement <16 x i1> %369, i64 5, !dbg !48
  %410 = extractelement <16 x float> %368, i64 5, !dbg !48
  %411 = select i1 %409, float 0.000000e+00, float %410, !dbg !48
  %412 = extractelement <16 x i1> %369, i64 6, !dbg !48
  %413 = extractelement <16 x float> %368, i64 6, !dbg !48
  %414 = select i1 %412, float 0.000000e+00, float %413, !dbg !48
  %415 = extractelement <16 x i1> %369, i64 7, !dbg !48
  %416 = extractelement <16 x float> %368, i64 7, !dbg !48
  %417 = select i1 %415, float 0.000000e+00, float %416, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %418 = lshr exact i32 %169, 4, !dbg !50
  %419 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %418, !dbg !50
  %420 = getelementptr float, ptr addrspace(3) %419, i32 %170, !dbg !50
  %421 = bitcast float %372 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %420, <1 x i32> %421, i1 true) #2, !dbg !50
  %422 = getelementptr float, ptr addrspace(3) @global_smem, i32 %177, !dbg !50
  %423 = getelementptr float, ptr addrspace(3) %422, i32 %176, !dbg !50
  %424 = bitcast float %375 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %423, <1 x i32> %424, i1 true) #2, !dbg !50
  %425 = getelementptr float, ptr addrspace(3) @global_smem, i32 %182, !dbg !50
  %426 = getelementptr float, ptr addrspace(3) %425, i32 %181, !dbg !50
  %427 = bitcast float %378 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %426, <1 x i32> %427, i1 true) #2, !dbg !50
  %428 = getelementptr float, ptr addrspace(3) @global_smem, i32 %187, !dbg !50
  %429 = getelementptr float, ptr addrspace(3) %428, i32 %186, !dbg !50
  %430 = bitcast float %381 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %429, <1 x i32> %430, i1 true) #2, !dbg !50
  %431 = getelementptr float, ptr addrspace(3) %419, i32 %191, !dbg !50
  %432 = bitcast float %384 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %431, <1 x i32> %432, i1 true) #2, !dbg !50
  %433 = getelementptr float, ptr addrspace(3) @global_smem, i32 %195, !dbg !50
  %434 = getelementptr float, ptr addrspace(3) %433, i32 %194, !dbg !50
  %435 = bitcast float %387 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %434, <1 x i32> %435, i1 true) #2, !dbg !50
  %436 = getelementptr float, ptr addrspace(3) @global_smem, i32 %200, !dbg !50
  %437 = getelementptr float, ptr addrspace(3) %436, i32 %199, !dbg !50
  %438 = bitcast float %390 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %437, <1 x i32> %438, i1 true) #2, !dbg !50
  %439 = getelementptr float, ptr addrspace(3) @global_smem, i32 %205, !dbg !50
  %440 = getelementptr float, ptr addrspace(3) %439, i32 %204, !dbg !50
  %441 = bitcast float %393 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %440, <1 x i32> %441, i1 true) #2, !dbg !50
  %442 = getelementptr float, ptr addrspace(3) %419, i32 %209, !dbg !50
  %443 = bitcast float %396 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %442, <1 x i32> %443, i1 true) #2, !dbg !50
  %444 = getelementptr float, ptr addrspace(3) @global_smem, i32 %213, !dbg !50
  %445 = getelementptr float, ptr addrspace(3) %444, i32 %212, !dbg !50
  %446 = bitcast float %399 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %445, <1 x i32> %446, i1 true) #2, !dbg !50
  %447 = getelementptr float, ptr addrspace(3) @global_smem, i32 %218, !dbg !50
  %448 = getelementptr float, ptr addrspace(3) %447, i32 %217, !dbg !50
  %449 = bitcast float %402 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %448, <1 x i32> %449, i1 true) #2, !dbg !50
  %450 = getelementptr float, ptr addrspace(3) @global_smem, i32 %223, !dbg !50
  %451 = getelementptr float, ptr addrspace(3) %450, i32 %222, !dbg !50
  %452 = bitcast float %405 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %451, <1 x i32> %452, i1 true) #2, !dbg !50
  %453 = getelementptr float, ptr addrspace(3) %419, i32 %227, !dbg !50
  %454 = bitcast float %408 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %453, <1 x i32> %454, i1 true) #2, !dbg !50
  %455 = getelementptr float, ptr addrspace(3) @global_smem, i32 %231, !dbg !50
  %456 = getelementptr float, ptr addrspace(3) %455, i32 %230, !dbg !50
  %457 = bitcast float %411 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %456, <1 x i32> %457, i1 true) #2, !dbg !50
  %458 = getelementptr float, ptr addrspace(3) @global_smem, i32 %236, !dbg !50
  %459 = getelementptr float, ptr addrspace(3) %458, i32 %235, !dbg !50
  %460 = bitcast float %414 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %459, <1 x i32> %460, i1 true) #2, !dbg !50
  %461 = getelementptr float, ptr addrspace(3) @global_smem, i32 %241, !dbg !50
  %462 = getelementptr float, ptr addrspace(3) %461, i32 %240, !dbg !50
  %463 = bitcast float %417 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %462, <1 x i32> %463, i1 true) #2, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %464 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %245, !dbg !50
  %465 = getelementptr inbounds float, ptr addrspace(3) %464, i32 %171, !dbg !50
  %466 = load i32, ptr addrspace(3) %465, align 4, !dbg !50
  %467 = or disjoint i32 %171, 1, !dbg !50
  %468 = getelementptr inbounds float, ptr addrspace(3) %464, i32 %467, !dbg !50
  %469 = load i32, ptr addrspace(3) %468, align 4, !dbg !50
  %470 = or disjoint i32 %171, 2, !dbg !50
  %471 = getelementptr inbounds float, ptr addrspace(3) %464, i32 %470, !dbg !50
  %472 = load i32, ptr addrspace(3) %471, align 4, !dbg !50
  %473 = or disjoint i32 %171, 3, !dbg !50
  %474 = getelementptr inbounds float, ptr addrspace(3) %464, i32 %473, !dbg !50
  %475 = load i32, ptr addrspace(3) %474, align 4, !dbg !50
  %476 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %250, !dbg !50
  %477 = getelementptr inbounds float, ptr addrspace(3) %476, i32 %249, !dbg !50
  %478 = load i32, ptr addrspace(3) %477, align 4, !dbg !50
  %479 = or disjoint i32 %171, 1025, !dbg !50
  %480 = lshr i32 %479, 6, !dbg !50
  %481 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %480, !dbg !50
  %482 = getelementptr inbounds float, ptr addrspace(3) %481, i32 %479, !dbg !50
  %483 = load i32, ptr addrspace(3) %482, align 4, !dbg !50
  %484 = or disjoint i32 %171, 1026, !dbg !50
  %485 = lshr i32 %484, 6, !dbg !50
  %486 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %485, !dbg !50
  %487 = getelementptr inbounds float, ptr addrspace(3) %486, i32 %484, !dbg !50
  %488 = load i32, ptr addrspace(3) %487, align 4, !dbg !50
  %489 = or disjoint i32 %171, 1027, !dbg !50
  %490 = lshr i32 %489, 6, !dbg !50
  %491 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %490, !dbg !50
  %492 = getelementptr inbounds float, ptr addrspace(3) %491, i32 %489, !dbg !50
  %493 = load i32, ptr addrspace(3) %492, align 4, !dbg !50
  %494 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %254, !dbg !50
  %495 = getelementptr inbounds float, ptr addrspace(3) %494, i32 %253, !dbg !50
  %496 = load i32, ptr addrspace(3) %495, align 4, !dbg !50
  %497 = or disjoint i32 %171, 2049, !dbg !50
  %498 = lshr i32 %497, 6, !dbg !50
  %499 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %498, !dbg !50
  %500 = getelementptr inbounds float, ptr addrspace(3) %499, i32 %497, !dbg !50
  %501 = load i32, ptr addrspace(3) %500, align 4, !dbg !50
  %502 = or disjoint i32 %171, 2050, !dbg !50
  %503 = lshr i32 %502, 6, !dbg !50
  %504 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %503, !dbg !50
  %505 = getelementptr inbounds float, ptr addrspace(3) %504, i32 %502, !dbg !50
  %506 = load i32, ptr addrspace(3) %505, align 4, !dbg !50
  %507 = or disjoint i32 %171, 2051, !dbg !50
  %508 = lshr i32 %507, 6, !dbg !50
  %509 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %508, !dbg !50
  %510 = getelementptr inbounds float, ptr addrspace(3) %509, i32 %507, !dbg !50
  %511 = load i32, ptr addrspace(3) %510, align 4, !dbg !50
  %512 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %258, !dbg !50
  %513 = getelementptr inbounds float, ptr addrspace(3) %512, i32 %257, !dbg !50
  %514 = load i32, ptr addrspace(3) %513, align 4, !dbg !50
  %515 = or disjoint i32 %171, 3073, !dbg !50
  %516 = lshr i32 %515, 6, !dbg !50
  %517 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %516, !dbg !50
  %518 = getelementptr inbounds float, ptr addrspace(3) %517, i32 %515, !dbg !50
  %519 = load i32, ptr addrspace(3) %518, align 4, !dbg !50
  %520 = or disjoint i32 %171, 3074, !dbg !50
  %521 = lshr i32 %520, 6, !dbg !50
  %522 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %521, !dbg !50
  %523 = getelementptr inbounds float, ptr addrspace(3) %522, i32 %520, !dbg !50
  %524 = load i32, ptr addrspace(3) %523, align 4, !dbg !50
  %525 = or disjoint i32 %171, 3075, !dbg !50
  %526 = lshr i32 %525, 6, !dbg !50
  %527 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %526, !dbg !50
  %528 = getelementptr inbounds float, ptr addrspace(3) %527, i32 %525, !dbg !50
  %529 = load i32, ptr addrspace(3) %528, align 4, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %466, i32 %469, i32 %472, i32 %475, ptr addrspace(1) %44, i1 %28) #2, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %478, i32 %483, i32 %488, i32 %493, ptr addrspace(1) %46, i1 %28) #2, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %496, i32 %501, i32 %506, i32 %511, ptr addrspace(1) %48, i1 %28) #2, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %514, i32 %519, i32 %524, i32 %529, ptr addrspace(1) %50, i1 %28) #2, !dbg !50
  ret void, !dbg !51
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "crzkju7pxyalzapwjamrwxfxoddye4j5mhcsmqoji2u3nzuyt5t2.py", directory: "inductor_cache/rz")
!4 = !{ptr @triton_poi_fused_add_convolution_relu_sigmoid_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_convolution_relu_sigmoid_1, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_convolution_relu_sigmoid_1", linkageName: "triton_poi_fused_add_convolution_relu_sigmoid_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 23, scope: !7)
!17 = !DILocation(line: 27, column: 21, scope: !7)
!18 = !DILocation(line: 31, column: 19, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 32, column: 43, scope: !7)
!21 = !DILocation(line: 32, column: 39, scope: !7)
!22 = !DILocation(line: 32, column: 34, scope: !7)
!23 = !DILocation(line: 32, column: 48, scope: !7)
!24 = !DILocation(line: 33, column: 30, scope: !7)
!25 = !DILocation(line: 33, column: 35, scope: !7)
!26 = !DILocation(line: 34, column: 40, scope: !7)
!27 = !DILocation(line: 34, column: 53, scope: !7)
!28 = !DILocation(line: 34, column: 35, scope: !7)
!29 = !DILocation(line: 34, column: 45, scope: !7)
!30 = !DILocation(line: 34, column: 30, scope: !7)
!31 = !DILocation(line: 34, column: 58, scope: !7)
!32 = !DILocation(line: 35, column: 18, scope: !7)
!33 = !DILocation(line: 47, column: 30, scope: !34, inlinedAt: !36)
!34 = distinct !DILexicalBlockFile(scope: !7, file: !35, discriminator: 0)
!35 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!36 = !DILocation(line: 36, column: 22, scope: !7)
!37 = !DILocation(line: 47, column: 29, scope: !34, inlinedAt: !36)
!38 = !DILocation(line: 47, column: 20, scope: !34, inlinedAt: !36)
!39 = !DILocation(line: 47, column: 16, scope: !34, inlinedAt: !36)
!40 = !DILocation(line: 118, column: 15, scope: !41, inlinedAt: !43)
!41 = distinct !DILexicalBlockFile(scope: !7, file: !42, discriminator: 0)
!42 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!43 = !DILocation(line: 38, column: 40, scope: !7)
!44 = !DILocation(line: 121, column: 29, scope: !41, inlinedAt: !43)
!45 = !DILocation(line: 39, column: 18, scope: !7)
!46 = !DILocation(line: 118, column: 15, scope: !41, inlinedAt: !47)
!47 = !DILocation(line: 40, column: 40, scope: !7)
!48 = !DILocation(line: 121, column: 29, scope: !41, inlinedAt: !47)
!49 = !DILocation(line: 41, column: 4, scope: !7)
!50 = !DILocation(line: 42, column: 48, scope: !7)
!51 = !DILocation(line: 42, column: 4, scope: !7)
