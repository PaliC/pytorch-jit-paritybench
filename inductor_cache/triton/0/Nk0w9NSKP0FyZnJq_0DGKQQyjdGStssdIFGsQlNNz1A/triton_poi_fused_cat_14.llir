; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_14(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %9 = shl i32 %8, 9, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 2, !dbg !12
  %12 = and i32 %11, 508, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %14 = icmp slt i32 %13, 49280, !dbg !14
  %15 = sdiv i32 %13, 16, !dbg !15
  %.frozen = freeze i32 %13, !dbg !16
  %16 = sdiv i32 %.frozen, 12320, !dbg !16
  %17 = mul i32 %16, 12320, !dbg !17
  %srem.decomposed = sub i32 %.frozen, %17, !dbg !17
  %18 = shl nsw i32 %16, 13, !dbg !18
  %19 = add nsw i32 %18, %srem.decomposed, !dbg !19
  %20 = sext i32 %19 to i64, !dbg !20
  %21 = getelementptr float, ptr addrspace(1) %0, i64 %20, !dbg !20
  %22 = shl nsw i32 %16, 12, !dbg !21
  %23 = insertelement <2 x i32> poison, i32 %13, i64 0, !dbg !22
  %24 = insertelement <2 x i32> %23, i32 %15, i64 1, !dbg !22
  %25 = srem <2 x i32> %24, <i32 16, i32 770>, !dbg !22
  %26 = extractelement <2 x i32> %25, i64 1, !dbg !23
  %27 = icmp slt i32 %26, 512, !dbg !24
  %28 = and i1 %14, %27, !dbg !25
  %29 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %21, i1 %28, i32 0, i1 %28, i32 0, i1 %28, i32 0, i1 %28, i32 0, i1 %28) #1, !dbg !26
  %30 = extractvalue { i32, i32, i32, i32 } %29, 0, !dbg !26
  %31 = extractvalue { i32, i32, i32, i32 } %29, 1, !dbg !26
  %32 = extractvalue { i32, i32, i32, i32 } %29, 2, !dbg !26
  %33 = extractvalue { i32, i32, i32, i32 } %29, 3, !dbg !26
  %34 = and i32 %26, -256, !dbg !27
  %35 = icmp eq i32 %34, 512, !dbg !27
  %36 = insertelement <2 x i32> <i32 poison, i32 -512>, i32 %22, i64 0, !dbg !28
  %37 = add nsw <2 x i32> %36, %25, !dbg !28
  %38 = extractelement <2 x i32> %37, i64 1, !dbg !29
  %39 = shl nsw i32 %38, 4, !dbg !29
  %40 = extractelement <2 x i32> %37, i64 0, !dbg !30
  %41 = add nsw i32 %40, %39, !dbg !30
  %42 = sext i32 %41 to i64, !dbg !31
  %43 = getelementptr float, ptr addrspace(1) %1, i64 %42, !dbg !31
  %44 = and i1 %14, %35, !dbg !32
  %45 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %43, i1 %44, i32 0, i1 %44, i32 0, i1 %44, i32 0, i1 %44, i32 0, i1 %44) #1, !dbg !33
  %46 = extractvalue { i32, i32, i32, i32 } %45, 0, !dbg !33
  %47 = extractvalue { i32, i32, i32, i32 } %45, 1, !dbg !33
  %48 = extractvalue { i32, i32, i32, i32 } %45, 2, !dbg !33
  %49 = extractvalue { i32, i32, i32, i32 } %45, 3, !dbg !33
  %50 = sext i32 %38 to i64, !dbg !34
  %51 = getelementptr float, ptr addrspace(1) %2, i64 %50, !dbg !34
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %51, i1 %44, i32 0, i1 %44) #1, !dbg !35
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %51, i1 %44, i32 0, i1 %44) #1, !dbg !35
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %51, i1 %44, i32 0, i1 %44) #1, !dbg !35
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %51, i1 %44, i32 0, i1 %44) #1, !dbg !35
  %56 = insertelement <4 x i32> poison, i32 %49, i64 0, !dbg !33
  %57 = insertelement <4 x i32> %56, i32 %48, i64 1, !dbg !33
  %58 = insertelement <4 x i32> %57, i32 %47, i64 2, !dbg !33
  %59 = insertelement <4 x i32> %58, i32 %46, i64 3, !dbg !33
  %60 = bitcast <4 x i32> %59 to <4 x float>, !dbg !33
  %61 = insertelement <4 x i32> poison, i32 %55, i64 0, !dbg !35
  %62 = insertelement <4 x i32> %61, i32 %54, i64 1, !dbg !35
  %63 = insertelement <4 x i32> %62, i32 %53, i64 2, !dbg !35
  %64 = insertelement <4 x i32> %63, i32 %52, i64 3, !dbg !35
  %65 = bitcast <4 x i32> %64 to <4 x float>, !dbg !35
  %66 = fadd <4 x float> %60, %65, !dbg !36
  %67 = fcmp ogt <4 x float> %66, zeroinitializer, !dbg !37
  %68 = extractelement <4 x float> %66, i64 3, !dbg !38
  %69 = fmul float %68, 0x3FB99999A0000000, !dbg !39
  %70 = extractelement <4 x float> %66, i64 2, !dbg !38
  %71 = fmul float %70, 0x3FB99999A0000000, !dbg !39
  %72 = extractelement <4 x float> %66, i64 1, !dbg !38
  %73 = fmul float %72, 0x3FB99999A0000000, !dbg !39
  %74 = extractelement <4 x float> %66, i64 0, !dbg !38
  %75 = fmul float %74, 0x3FB99999A0000000, !dbg !39
  %76 = extractelement <4 x i1> %67, i64 3, !dbg !38
  %77 = select i1 %76, float %68, float %69, !dbg !38
  %78 = extractelement <4 x i1> %67, i64 2, !dbg !38
  %79 = select i1 %78, float %70, float %71, !dbg !38
  %80 = extractelement <4 x i1> %67, i64 1, !dbg !38
  %81 = select i1 %80, float %72, float %73, !dbg !38
  %82 = extractelement <4 x i1> %67, i64 0, !dbg !38
  %83 = select i1 %82, float %74, float %75, !dbg !38
  %84 = icmp sgt i32 %26, 767, !dbg !23
  %85 = add nsw i32 %26, -768, !dbg !40
  %86 = shl nsw i32 %85, 4, !dbg !41
  %87 = shl nsw i32 %16, 5, !dbg !42
  %88 = extractelement <2 x i32> %25, i64 0, !dbg !43
  %89 = add nsw i32 %87, %88, !dbg !43
  %90 = add nsw i32 %89, %86, !dbg !44
  %91 = sext i32 %90 to i64, !dbg !45
  %92 = getelementptr float, ptr addrspace(1) %3, i64 %91, !dbg !45
  %93 = and i1 %14, %84, !dbg !46
  %94 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %92, i1 %93, i32 0, i1 %93, i32 0, i1 %93, i32 0, i1 %93, i32 0, i1 %93) #1, !dbg !47
  %95 = extractvalue { i32, i32, i32, i32 } %94, 0, !dbg !47
  %96 = extractvalue { i32, i32, i32, i32 } %94, 1, !dbg !47
  %97 = extractvalue { i32, i32, i32, i32 } %94, 2, !dbg !47
  %98 = extractvalue { i32, i32, i32, i32 } %94, 3, !dbg !47
  %99 = bitcast i32 %95 to float, !dbg !47
  %100 = bitcast i32 %96 to float, !dbg !47
  %101 = bitcast i32 %97 to float, !dbg !47
  %102 = bitcast i32 %98 to float, !dbg !47
  %103 = sext i32 %85 to i64, !dbg !48
  %104 = getelementptr float, ptr addrspace(1) %4, i64 %103, !dbg !48
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %104, i1 %93, i32 0, i1 %93) #1, !dbg !49
  %106 = bitcast i32 %105 to float, !dbg !49
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %104, i1 %93, i32 0, i1 %93) #1, !dbg !49
  %108 = bitcast i32 %107 to float, !dbg !49
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %104, i1 %93, i32 0, i1 %93) #1, !dbg !49
  %110 = bitcast i32 %109 to float, !dbg !49
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %104, i1 %93, i32 0, i1 %93) #1, !dbg !49
  %112 = bitcast i32 %111 to float, !dbg !49
  %113 = fadd float %99, %106, !dbg !50
  %114 = fadd float %100, %108, !dbg !50
  %115 = fadd float %101, %110, !dbg !50
  %116 = fadd float %102, %112, !dbg !50
  %117 = select i1 %84, float %113, float 0.000000e+00, !dbg !51
  %118 = select i1 %84, float %114, float 0.000000e+00, !dbg !51
  %119 = select i1 %84, float %115, float 0.000000e+00, !dbg !51
  %120 = select i1 %84, float %116, float 0.000000e+00, !dbg !51
  %121 = select i1 %35, float %77, float %117, !dbg !52
  %122 = select i1 %35, float %79, float %118, !dbg !52
  %123 = select i1 %35, float %81, float %119, !dbg !52
  %124 = select i1 %35, float %83, float %120, !dbg !52
  %125 = sext i32 %13 to i64, !dbg !53
  %126 = getelementptr float, ptr addrspace(1) %5, i64 %125, !dbg !53
  %127 = bitcast float %121 to i32, !dbg !54
  %128 = select i1 %27, i32 %30, i32 %127, !dbg !55
  %129 = bitcast float %122 to i32, !dbg !54
  %130 = select i1 %27, i32 %31, i32 %129, !dbg !55
  %131 = bitcast float %123 to i32, !dbg !54
  %132 = select i1 %27, i32 %32, i32 %131, !dbg !55
  %133 = bitcast float %124 to i32, !dbg !54
  %134 = select i1 %27, i32 %33, i32 %133, !dbg !55
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %128, i32 %130, i32 %132, i32 %134, ptr addrspace(1) %126, i1 %14) #1, !dbg !54
  ret void, !dbg !56
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "chwx6h2p6opjuueqqg6g2akrdq2vjkwq25yajcsxkzvsij3au55n.py", directory: "inductor_cache/hw")
!4 = !{ptr @triton_poi_fused_cat_14, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_14, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_14", linkageName: "triton_poi_fused_cat_14", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 33, column: 35, scope: !7)
!18 = !DILocation(line: 33, column: 50, scope: !7)
!19 = !DILocation(line: 33, column: 45, scope: !7)
!20 = !DILocation(line: 33, column: 30, scope: !7)
!21 = !DILocation(line: 38, column: 60, scope: !7)
!22 = !DILocation(line: 25, column: 19, scope: !7)
!23 = !DILocation(line: 48, column: 20, scope: !7)
!24 = !DILocation(line: 32, column: 18, scope: !7)
!25 = !DILocation(line: 33, column: 62, scope: !7)
!26 = !DILocation(line: 33, column: 55, scope: !7)
!27 = !DILocation(line: 37, column: 18, scope: !7)
!28 = !DILocation(line: 38, column: 36, scope: !7)
!29 = !DILocation(line: 38, column: 40, scope: !7)
!30 = !DILocation(line: 38, column: 55, scope: !7)
!31 = !DILocation(line: 38, column: 31, scope: !7)
!32 = !DILocation(line: 38, column: 72, scope: !7)
!33 = !DILocation(line: 38, column: 65, scope: !7)
!34 = !DILocation(line: 39, column: 31, scope: !7)
!35 = !DILocation(line: 39, column: 45, scope: !7)
!36 = !DILocation(line: 40, column: 20, scope: !7)
!37 = !DILocation(line: 42, column: 20, scope: !7)
!38 = !DILocation(line: 45, column: 35, scope: !7)
!39 = !DILocation(line: 44, column: 20, scope: !7)
!40 = !DILocation(line: 51, column: 49, scope: !7)
!41 = !DILocation(line: 51, column: 40, scope: !7)
!42 = !DILocation(line: 51, column: 58, scope: !7)
!43 = !DILocation(line: 51, column: 36, scope: !7)
!44 = !DILocation(line: 51, column: 55, scope: !7)
!45 = !DILocation(line: 51, column: 31, scope: !7)
!46 = !DILocation(line: 51, column: 71, scope: !7)
!47 = !DILocation(line: 51, column: 63, scope: !7)
!48 = !DILocation(line: 52, column: 31, scope: !7)
!49 = !DILocation(line: 52, column: 45, scope: !7)
!50 = !DILocation(line: 53, column: 20, scope: !7)
!51 = !DILocation(line: 55, column: 35, scope: !7)
!52 = !DILocation(line: 0, scope: !7)
!53 = !DILocation(line: 58, column: 25, scope: !7)
!54 = !DILocation(line: 58, column: 37, scope: !7)
!55 = !DILocation(line: 57, column: 33, scope: !7)
!56 = !DILocation(line: 58, column: 4, scope: !7)
