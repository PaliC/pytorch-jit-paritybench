#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [4, 8], warpsPerCTA = [2, 1], order = [1, 0]}>
#loc = loc("inductor_cache/eb/ceb5ycpkr2cfkhtng4fkctct4vxga42wfes6vk3sx7qhu4dlfbdq.py":19:0)
#loc1 = loc(unknown)
#loc23 = loc("inductor_cache/eb/ceb5ycpkr2cfkhtng4fkctct4vxga42wfes6vk3sx7qhu4dlfbdq.py":46:26)
#loc30 = loc("inductor_cache/eb/ceb5ycpkr2cfkhtng4fkctct4vxga42wfes6vk3sx7qhu4dlfbdq.py":54:26)
#loc42 = loc(callsite(#loc1 at #loc23))
#loc45 = loc(callsite(#loc1 at #loc30))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 2 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_per_fused_add_div_erf_mul_native_layer_norm_0(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/eb/ceb5ycpkr2cfkhtng4fkctct4vxga42wfes6vk3sx7qhu4dlfbdq.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/eb/ceb5ycpkr2cfkhtng4fkctct4vxga42wfes6vk3sx7qhu4dlfbdq.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/eb/ceb5ycpkr2cfkhtng4fkctct4vxga42wfes6vk3sx7qhu4dlfbdq.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/eb/ceb5ycpkr2cfkhtng4fkctct4vxga42wfes6vk3sx7qhu4dlfbdq.py":19:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/eb/ceb5ycpkr2cfkhtng4fkctct4vxga42wfes6vk3sx7qhu4dlfbdq.py":19:0), %arg5: i32 loc("inductor_cache/eb/ceb5ycpkr2cfkhtng4fkctct4vxga42wfes6vk3sx7qhu4dlfbdq.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<8.000000e+00> : tensor<8x1xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<9.99999996E-13> : tensor<8x1xf32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<1.000000e+00> : tensor<8x8xf32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<0.707106769> : tensor<8x8xf32, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<5.000000e-01> : tensor<8x8xf32, #blocked> loc(#loc1)
    %cst_4 = arith.constant dense<0.000000e+00> : tensor<8x8xf32, #blocked> loc(#loc1)
    %c8_i32 = arith.constant 8 : i32 loc(#loc1)
    %cst_5 = arith.constant dense<64> : tensor<8x1xi32, #blocked> loc(#loc1)
    %cst_6 = arith.constant dense<8> : tensor<8x1xi32, #blocked> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c8_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc4)
    %3 = tt.expand_dims %2 {axis = 1 : i32} : tensor<8xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<8x1xi32, #blocked> loc(#loc4)
    %4 = tt.splat %1 : i32 -> tensor<8x1xi32, #blocked> loc(#loc5)
    %5 = arith.addi %4, %3 : tensor<8x1xi32, #blocked> loc(#loc5)
    %6 = arith.cmpi slt, %5, %cst_5 : tensor<8x1xi32, #blocked> loc(#loc6)
    %7 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc7)
    %8 = tt.expand_dims %7 {axis = 0 : i32} : tensor<8xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x8xi32, #blocked> loc(#loc7)
    %9 = arith.muli %5, %cst_6 : tensor<8x1xi32, #blocked> loc(#loc8)
    %10 = tt.broadcast %8 : tensor<1x8xi32, #blocked> -> tensor<8x8xi32, #blocked> loc(#loc9)
    %11 = tt.broadcast %9 : tensor<8x1xi32, #blocked> -> tensor<8x8xi32, #blocked> loc(#loc9)
    %12 = arith.addi %10, %11 : tensor<8x8xi32, #blocked> loc(#loc9)
    %13 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<8x8x!tt.ptr<f32>, #blocked> loc(#loc10)
    %14 = tt.addptr %13, %12 : tensor<8x8x!tt.ptr<f32>, #blocked>, tensor<8x8xi32, #blocked> loc(#loc10)
    %15 = tt.broadcast %6 : tensor<8x1xi1, #blocked> -> tensor<8x8xi1, #blocked> loc(#loc11)
    %16 = tt.load %14, %15, %cst_4 : tensor<8x8x!tt.ptr<f32>, #blocked> loc(#loc11)
    %17 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1x8x!tt.ptr<f32>, #blocked> loc(#loc12)
    %18 = tt.addptr %17, %8 : tensor<1x8x!tt.ptr<f32>, #blocked>, tensor<1x8xi32, #blocked> loc(#loc12)
    %19 = tt.load %18 evictionPolicy = evict_last : tensor<1x8x!tt.ptr<f32>, #blocked> loc(#loc13)
    %20 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1x8x!tt.ptr<f32>, #blocked> loc(#loc14)
    %21 = tt.addptr %20, %8 : tensor<1x8x!tt.ptr<f32>, #blocked>, tensor<1x8xi32, #blocked> loc(#loc14)
    %22 = tt.load %21 evictionPolicy = evict_last : tensor<1x8x!tt.ptr<f32>, #blocked> loc(#loc15)
    %23 = arith.mulf %16, %cst_3 : tensor<8x8xf32, #blocked> loc(#loc16)
    %24 = arith.mulf %16, %cst_2 : tensor<8x8xf32, #blocked> loc(#loc17)
    %25 = tt.extern_elementwise %24 {libname = "", libpath = "", pure = true, symbol = "__nv_erff"} : (tensor<8x8xf32, #blocked>) -> tensor<8x8xf32, #blocked> loc(#loc18)
    %26 = arith.addf %25, %cst_1 : tensor<8x8xf32, #blocked> loc(#loc19)
    %27 = arith.mulf %23, %26 : tensor<8x8xf32, #blocked> loc(#loc20)
    %28 = arith.select %15, %27, %cst_4 : tensor<8x8xi1, #blocked>, tensor<8x8xf32, #blocked> loc(#loc21)
    %29 = "tt.reduce"(%28) <{axis = 1 : i32}> ({
    ^bb0(%arg6: f32 loc(callsite(#loc1 at #loc23)), %arg7: f32 loc(callsite(#loc1 at #loc23))):
      %49 = arith.addf %arg6, %arg7 : f32 loc(#loc46)
      tt.reduce.return %49 : f32 loc(#loc41)
    }) : (tensor<8x8xf32, #blocked>) -> tensor<8xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc41)
    %30 = tt.expand_dims %29 {axis = 1 : i32} : tensor<8xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<8x1xf32, #blocked> loc(#loc25)
    %31 = arith.divf %30, %cst : tensor<8x1xf32, #blocked> loc(#loc26)
    %32 = tt.broadcast %31 : tensor<8x1xf32, #blocked> -> tensor<8x8xf32, #blocked> loc(#loc27)
    %33 = arith.subf %27, %32 : tensor<8x8xf32, #blocked> loc(#loc27)
    %34 = arith.mulf %33, %33 : tensor<8x8xf32, #blocked> loc(#loc28)
    %35 = arith.select %15, %34, %cst_4 : tensor<8x8xi1, #blocked>, tensor<8x8xf32, #blocked> loc(#loc29)
    %36 = "tt.reduce"(%35) <{axis = 1 : i32}> ({
    ^bb0(%arg6: f32 loc(callsite(#loc1 at #loc30)), %arg7: f32 loc(callsite(#loc1 at #loc30))):
      %49 = arith.addf %arg6, %arg7 : f32 loc(#loc47)
      tt.reduce.return %49 : f32 loc(#loc44)
    }) : (tensor<8x8xf32, #blocked>) -> tensor<8xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc44)
    %37 = tt.expand_dims %36 {axis = 1 : i32} : tensor<8xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<8x1xf32, #blocked> loc(#loc31)
    %38 = arith.divf %37, %cst : tensor<8x1xf32, #blocked> loc(#loc32)
    %39 = arith.addf %38, %cst_0 : tensor<8x1xf32, #blocked> loc(#loc33)
    %40 = tt.extern_elementwise %39 {libname = "", libpath = "", pure = true, symbol = "__nv_rsqrtf"} : (tensor<8x1xf32, #blocked>) -> tensor<8x1xf32, #blocked> loc(#loc34)
    %41 = tt.broadcast %40 : tensor<8x1xf32, #blocked> -> tensor<8x8xf32, #blocked> loc(#loc35)
    %42 = arith.mulf %33, %41 : tensor<8x8xf32, #blocked> loc(#loc35)
    %43 = tt.broadcast %19 : tensor<1x8xf32, #blocked> -> tensor<8x8xf32, #blocked> loc(#loc36)
    %44 = arith.mulf %42, %43 : tensor<8x8xf32, #blocked> loc(#loc36)
    %45 = tt.broadcast %22 : tensor<1x8xf32, #blocked> -> tensor<8x8xf32, #blocked> loc(#loc37)
    %46 = arith.addf %44, %45 : tensor<8x8xf32, #blocked> loc(#loc37)
    %47 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<8x8x!tt.ptr<f32>, #blocked> loc(#loc38)
    %48 = tt.addptr %47, %12 : tensor<8x8x!tt.ptr<f32>, #blocked>, tensor<8x8xi32, #blocked> loc(#loc38)
    tt.store %48, %46, %15 : tensor<8x8x!tt.ptr<f32>, #blocked> loc(#loc39)
    tt.return loc(#loc40)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/eb/ceb5ycpkr2cfkhtng4fkctct4vxga42wfes6vk3sx7qhu4dlfbdq.py":23:28)
#loc3 = loc("inductor_cache/eb/ceb5ycpkr2cfkhtng4fkctct4vxga42wfes6vk3sx7qhu4dlfbdq.py":23:33)
#loc4 = loc("inductor_cache/eb/ceb5ycpkr2cfkhtng4fkctct4vxga42wfes6vk3sx7qhu4dlfbdq.py":24:44)
#loc5 = loc("inductor_cache/eb/ceb5ycpkr2cfkhtng4fkctct4vxga42wfes6vk3sx7qhu4dlfbdq.py":24:23)
#loc6 = loc("inductor_cache/eb/ceb5ycpkr2cfkhtng4fkctct4vxga42wfes6vk3sx7qhu4dlfbdq.py":25:21)
#loc7 = loc("inductor_cache/eb/ceb5ycpkr2cfkhtng4fkctct4vxga42wfes6vk3sx7qhu4dlfbdq.py":26:34)
#loc8 = loc("inductor_cache/eb/ceb5ycpkr2cfkhtng4fkctct4vxga42wfes6vk3sx7qhu4dlfbdq.py":31:37)
#loc9 = loc("inductor_cache/eb/ceb5ycpkr2cfkhtng4fkctct4vxga42wfes6vk3sx7qhu4dlfbdq.py":31:35)
#loc10 = loc("inductor_cache/eb/ceb5ycpkr2cfkhtng4fkctct4vxga42wfes6vk3sx7qhu4dlfbdq.py":31:30)
#loc11 = loc("inductor_cache/eb/ceb5ycpkr2cfkhtng4fkctct4vxga42wfes6vk3sx7qhu4dlfbdq.py":31:42)
#loc12 = loc("inductor_cache/eb/ceb5ycpkr2cfkhtng4fkctct4vxga42wfes6vk3sx7qhu4dlfbdq.py":32:31)
#loc13 = loc("inductor_cache/eb/ceb5ycpkr2cfkhtng4fkctct4vxga42wfes6vk3sx7qhu4dlfbdq.py":32:36)
#loc14 = loc("inductor_cache/eb/ceb5ycpkr2cfkhtng4fkctct4vxga42wfes6vk3sx7qhu4dlfbdq.py":33:31)
#loc15 = loc("inductor_cache/eb/ceb5ycpkr2cfkhtng4fkctct4vxga42wfes6vk3sx7qhu4dlfbdq.py":33:36)
#loc16 = loc("inductor_cache/eb/ceb5ycpkr2cfkhtng4fkctct4vxga42wfes6vk3sx7qhu4dlfbdq.py":35:18)
#loc17 = loc("inductor_cache/eb/ceb5ycpkr2cfkhtng4fkctct4vxga42wfes6vk3sx7qhu4dlfbdq.py":37:18)
#loc18 = loc("inductor_cache/eb/ceb5ycpkr2cfkhtng4fkctct4vxga42wfes6vk3sx7qhu4dlfbdq.py":38:25)
#loc19 = loc("inductor_cache/eb/ceb5ycpkr2cfkhtng4fkctct4vxga42wfes6vk3sx7qhu4dlfbdq.py":40:18)
#loc20 = loc("inductor_cache/eb/ceb5ycpkr2cfkhtng4fkctct4vxga42wfes6vk3sx7qhu4dlfbdq.py":41:18)
#loc21 = loc("inductor_cache/eb/ceb5ycpkr2cfkhtng4fkctct4vxga42wfes6vk3sx7qhu4dlfbdq.py":45:35)
#loc22 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc24 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc25 = loc("inductor_cache/eb/ceb5ycpkr2cfkhtng4fkctct4vxga42wfes6vk3sx7qhu4dlfbdq.py":46:29)
#loc26 = loc("inductor_cache/eb/ceb5ycpkr2cfkhtng4fkctct4vxga42wfes6vk3sx7qhu4dlfbdq.py":49:20)
#loc27 = loc("inductor_cache/eb/ceb5ycpkr2cfkhtng4fkctct4vxga42wfes6vk3sx7qhu4dlfbdq.py":50:19)
#loc28 = loc("inductor_cache/eb/ceb5ycpkr2cfkhtng4fkctct4vxga42wfes6vk3sx7qhu4dlfbdq.py":51:20)
#loc29 = loc("inductor_cache/eb/ceb5ycpkr2cfkhtng4fkctct4vxga42wfes6vk3sx7qhu4dlfbdq.py":53:35)
#loc31 = loc("inductor_cache/eb/ceb5ycpkr2cfkhtng4fkctct4vxga42wfes6vk3sx7qhu4dlfbdq.py":54:29)
#loc32 = loc("inductor_cache/eb/ceb5ycpkr2cfkhtng4fkctct4vxga42wfes6vk3sx7qhu4dlfbdq.py":57:20)
#loc33 = loc("inductor_cache/eb/ceb5ycpkr2cfkhtng4fkctct4vxga42wfes6vk3sx7qhu4dlfbdq.py":59:20)
#loc34 = loc("inductor_cache/eb/ceb5ycpkr2cfkhtng4fkctct4vxga42wfes6vk3sx7qhu4dlfbdq.py":60:28)
#loc35 = loc("inductor_cache/eb/ceb5ycpkr2cfkhtng4fkctct4vxga42wfes6vk3sx7qhu4dlfbdq.py":61:20)
#loc36 = loc("inductor_cache/eb/ceb5ycpkr2cfkhtng4fkctct4vxga42wfes6vk3sx7qhu4dlfbdq.py":62:20)
#loc37 = loc("inductor_cache/eb/ceb5ycpkr2cfkhtng4fkctct4vxga42wfes6vk3sx7qhu4dlfbdq.py":63:20)
#loc38 = loc("inductor_cache/eb/ceb5ycpkr2cfkhtng4fkctct4vxga42wfes6vk3sx7qhu4dlfbdq.py":64:25)
#loc39 = loc("inductor_cache/eb/ceb5ycpkr2cfkhtng4fkctct4vxga42wfes6vk3sx7qhu4dlfbdq.py":64:44)
#loc40 = loc("inductor_cache/eb/ceb5ycpkr2cfkhtng4fkctct4vxga42wfes6vk3sx7qhu4dlfbdq.py":64:4)
#loc41 = loc(callsite(#loc22 at #loc23))
#loc43 = loc(callsite(#loc24 at #loc22))
#loc44 = loc(callsite(#loc22 at #loc30))
#loc46 = loc(callsite(#loc43 at #loc23))
#loc47 = loc(callsite(#loc43 at #loc30))
