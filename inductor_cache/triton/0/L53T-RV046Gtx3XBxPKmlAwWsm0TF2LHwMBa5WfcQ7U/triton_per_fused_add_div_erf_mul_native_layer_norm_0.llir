; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused_add_div_erf_mul_native_layer_norm_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !10
  %8 = shl i32 %7, 3, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = lshr i32 %9, 3, !dbg !12
  %11 = and i32 %10, 7, !dbg !12
  %12 = or disjoint i32 %8, %11, !dbg !13
  %13 = icmp slt i32 %12, 64, !dbg !14
  %14 = and i32 %9, 7, !dbg !15
  %15 = shl i32 %12, 3, !dbg !16
  %16 = or disjoint i32 %15, %14, !dbg !17
  %17 = sext i32 %16 to i64, !dbg !18
  %18 = getelementptr float, ptr addrspace(1) %0, i64 %17, !dbg !18
  %19 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %18, i1 %13, i32 0, i1 %13) #4, !dbg !19
  %20 = bitcast i32 %19 to float, !dbg !19
  %21 = zext nneg i32 %14 to i64, !dbg !20
  %22 = getelementptr float, ptr addrspace(1) %1, i64 %21, !dbg !20
  %23 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %22, i1 true) #4, !dbg !21
  %24 = getelementptr float, ptr addrspace(1) %2, i64 %21, !dbg !22
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 true) #4, !dbg !23
  %26 = fmul float %20, 5.000000e-01, !dbg !24
  %27 = fmul float %20, 0x3FE6A09E60000000, !dbg !25
  %28 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !26
  %.not.i1 = icmp eq i32 %28, 0, !dbg !26
  %29 = tail call float @llvm.nvvm.fabs.ftz.f(float %27) #4, !dbg !26
  %30 = tail call float @llvm.nvvm.fabs.f(float %27) #4, !dbg !26
  %.0.i2 = select i1 %.not.i1, float %30, float %29, !dbg !26
  %31 = fcmp oge float %.0.i2, 0x3FF00C1FC0000000, !dbg !26
  br i1 %31, label %__nv_fabsf.exit1.i, label %33, !dbg !26

__nv_fabsf.exit1.i:                               ; preds = %6
  %32 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !26
  %.not1.i = icmp eq i32 %32, 0, !dbg !26
  %.01.i = select i1 %.not1.i, float %30, float %29, !dbg !26
  br label %__internal_fmad.exit.i, !dbg !26

33:                                               ; preds = %6
  %34 = fmul float %27, %27, !dbg !26
  br label %__internal_fmad.exit.i, !dbg !26

__internal_fmad.exit.i:                           ; preds = %33, %__nv_fabsf.exit1.i
  %35 = phi float [ 0x3FE41B0840000000, %__nv_fabsf.exit1.i ], [ 0x3FC06EBA60000000, %33 ], !dbg !26
  %36 = phi float [ 0x3FED526FC0000000, %__nv_fabsf.exit1.i ], [ 0xBFD8127580000000, %33 ], !dbg !26
  %37 = phi float [ 0x3FC39F20C0000000, %__nv_fabsf.exit1.i ], [ 0x3FBCE315E0000000, %33 ], !dbg !26
  %38 = phi float [ 0xBFA1902C40000000, %__nv_fabsf.exit1.i ], [ 0xBF9B837CE0000000, %33 ], !dbg !26
  %39 = phi float [ 0x3F75908160000000, %__nv_fabsf.exit1.i ], [ 0x3F755ABD40000000, %33 ], !dbg !26
  %40 = phi float [ 0xBF3EAC1720000000, %__nv_fabsf.exit1.i ], [ 0xBF4AE9A400000000, %33 ], !dbg !26
  %41 = phi float [ 0x3EF1394780000000, %__nv_fabsf.exit1.i ], [ 0x3F163D2D40000000, %33 ], !dbg !26
  %42 = phi float [ %.01.i, %__nv_fabsf.exit1.i ], [ %34, %33 ], !dbg !26
  %43 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !26
  %.not2.i = icmp eq i32 %43, 0, !dbg !26
  %44 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %41, float %42, float %40) #4, !dbg !26
  %45 = tail call float @llvm.nvvm.fma.rn.f(float %41, float %42, float %40) #4, !dbg !26
  %.02.i = select i1 %.not2.i, float %45, float %44, !dbg !26
  %46 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !26
  %.not3.i = icmp eq i32 %46, 0, !dbg !26
  %47 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i, float %42, float %39) #4, !dbg !26
  %48 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i, float %42, float %39) #4, !dbg !26
  %.03.i = select i1 %.not3.i, float %48, float %47, !dbg !26
  %49 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !26
  %.not4.i = icmp eq i32 %49, 0, !dbg !26
  %50 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.03.i, float %42, float %38) #4, !dbg !26
  %51 = tail call float @llvm.nvvm.fma.rn.f(float %.03.i, float %42, float %38) #4, !dbg !26
  %.04.i = select i1 %.not4.i, float %51, float %50, !dbg !26
  %52 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !26
  %.not5.i = icmp eq i32 %52, 0, !dbg !26
  %53 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i, float %42, float %37) #4, !dbg !26
  %54 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i, float %42, float %37) #4, !dbg !26
  %.05.i = select i1 %.not5.i, float %54, float %53, !dbg !26
  %55 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !26
  %.not6.i = icmp eq i32 %55, 0, !dbg !26
  %56 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i, float %42, float %36) #4, !dbg !26
  %57 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i, float %42, float %36) #4, !dbg !26
  %.06.i = select i1 %.not6.i, float %57, float %56, !dbg !26
  %58 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !26
  %.not7.i = icmp eq i32 %58, 0, !dbg !26
  %59 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i, float %42, float %35) #4, !dbg !26
  %60 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i, float %42, float %35) #4, !dbg !26
  %.07.i = select i1 %.not7.i, float %60, float %59, !dbg !26
  %61 = fneg float %42, !dbg !26
  %62 = select i1 %31, float %61, float %27, !dbg !26
  %63 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !26
  %.not8.i = icmp eq i32 %63, 0, !dbg !26
  %64 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.07.i, float %62, float %62) #4, !dbg !26
  %65 = tail call float @llvm.nvvm.fma.rn.f(float %.07.i, float %62, float %62) #4, !dbg !26
  %.08.i = select i1 %.not8.i, float %65, float %64, !dbg !26
  br i1 %31, label %66, label %__nv_erff.exit, !dbg !26

66:                                               ; preds = %__internal_fmad.exit.i
  %67 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %.08.i) #4, !dbg !26
  %68 = fsub float 1.000000e+00, %67, !dbg !26
  %69 = bitcast float %68 to i32, !dbg !26
  %70 = bitcast float %27 to i32, !dbg !26
  %71 = and i32 %70, -2147483648, !dbg !26
  %72 = or i32 %71, %69, !dbg !26
  %73 = bitcast i32 %72 to float, !dbg !26
  br label %__nv_erff.exit, !dbg !26

__nv_erff.exit:                                   ; preds = %__internal_fmad.exit.i, %66
  %r.0.i = phi float [ %73, %66 ], [ %.08.i, %__internal_fmad.exit.i ], !dbg !26
  %74 = fadd float %r.0.i, 1.000000e+00, !dbg !27
  %75 = fmul float %26, %74, !dbg !28
  %76 = select i1 %13, float %75, float 0.000000e+00, !dbg !29
  %77 = bitcast float %76 to i32, !dbg !30
  %78 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %77, i32 4, i32 31), !dbg !30
  %79 = bitcast i32 %78 to float, !dbg !30
  %80 = fadd float %76, %79, !dbg !34
  %81 = bitcast float %80 to i32, !dbg !30
  %82 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %81, i32 2, i32 31), !dbg !30
  %83 = bitcast i32 %82 to float, !dbg !30
  %84 = fadd float %80, %83, !dbg !34
  %85 = bitcast float %84 to i32, !dbg !30
  %86 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %85, i32 1, i32 31), !dbg !30
  %87 = bitcast i32 %86 to float, !dbg !30
  %88 = fadd float %84, %87, !dbg !34
  %89 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %88, float 8.000000e+00) #4, !dbg !36
  %90 = fsub float %75, %89, !dbg !37
  %91 = fmul float %90, %90, !dbg !38
  %92 = select i1 %13, float %91, float 0.000000e+00, !dbg !39
  %93 = bitcast float %92 to i32, !dbg !40
  %94 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %93, i32 4, i32 31), !dbg !40
  %95 = bitcast i32 %94 to float, !dbg !40
  %96 = fadd float %92, %95, !dbg !42
  %97 = bitcast float %96 to i32, !dbg !40
  %98 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %97, i32 2, i32 31), !dbg !40
  %99 = bitcast i32 %98 to float, !dbg !40
  %100 = fadd float %96, %99, !dbg !42
  %101 = bitcast float %100 to i32, !dbg !40
  %102 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %101, i32 1, i32 31), !dbg !40
  %103 = bitcast i32 %102 to float, !dbg !40
  %104 = fadd float %100, %103, !dbg !42
  %105 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %104, float 8.000000e+00) #4, !dbg !43
  %106 = fadd float %105, 0x3D71979980000000, !dbg !44
  %107 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not.i = icmp eq i32 %107, 0, !dbg !45
  br i1 %.not.i, label %110, label %108, !dbg !45

108:                                              ; preds = %__nv_erff.exit
  %109 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %106), !dbg !45
  br label %__nv_rsqrtf.exit, !dbg !45

110:                                              ; preds = %__nv_erff.exit
  %111 = tail call float @llvm.nvvm.rsqrt.approx.f(float %106), !dbg !45
  br label %__nv_rsqrtf.exit, !dbg !45

__nv_rsqrtf.exit:                                 ; preds = %108, %110
  %.0.i = phi float [ %109, %108 ], [ %111, %110 ], !dbg !45
  %112 = bitcast i32 %25 to float, !dbg !23
  %113 = bitcast i32 %23 to float, !dbg !21
  %114 = fmul float %90, %.0.i, !dbg !46
  %115 = fmul float %114, %113, !dbg !47
  %116 = fadd float %115, %112, !dbg !48
  %117 = getelementptr float, ptr addrspace(1) %3, i64 %17, !dbg !49
  %118 = bitcast float %116 to i32, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %118, ptr addrspace(1) %117, i1 %13) #4, !dbg !50
  ret void, !dbg !51
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.ftz.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.ftz.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ceb5ycpkr2cfkhtng4fkctct4vxga42wfes6vk3sx7qhu4dlfbdq.py", directory: "inductor_cache/eb")
!4 = !{ptr @triton_per_fused_add_div_erf_mul_native_layer_norm_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_div_erf_mul_native_layer_norm_0, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_div_erf_mul_native_layer_norm_0", linkageName: "triton_per_fused_add_div_erf_mul_native_layer_norm_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 37, scope: !7)
!17 = !DILocation(line: 31, column: 35, scope: !7)
!18 = !DILocation(line: 31, column: 30, scope: !7)
!19 = !DILocation(line: 31, column: 42, scope: !7)
!20 = !DILocation(line: 32, column: 31, scope: !7)
!21 = !DILocation(line: 32, column: 36, scope: !7)
!22 = !DILocation(line: 33, column: 31, scope: !7)
!23 = !DILocation(line: 33, column: 36, scope: !7)
!24 = !DILocation(line: 35, column: 18, scope: !7)
!25 = !DILocation(line: 37, column: 18, scope: !7)
!26 = !DILocation(line: 38, column: 25, scope: !7)
!27 = !DILocation(line: 40, column: 18, scope: !7)
!28 = !DILocation(line: 41, column: 18, scope: !7)
!29 = !DILocation(line: 45, column: 35, scope: !7)
!30 = !DILocation(line: 267, column: 36, scope: !31, inlinedAt: !33)
!31 = distinct !DILexicalBlockFile(scope: !7, file: !32, discriminator: 0)
!32 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!33 = !DILocation(line: 46, column: 26, scope: !7)
!34 = !DILocation(line: 256, column: 15, scope: !35, inlinedAt: !33)
!35 = distinct !DILexicalBlockFile(scope: !31, file: !32, discriminator: 0)
!36 = !DILocation(line: 49, column: 20, scope: !7)
!37 = !DILocation(line: 50, column: 19, scope: !7)
!38 = !DILocation(line: 51, column: 20, scope: !7)
!39 = !DILocation(line: 53, column: 35, scope: !7)
!40 = !DILocation(line: 267, column: 36, scope: !31, inlinedAt: !41)
!41 = !DILocation(line: 54, column: 26, scope: !7)
!42 = !DILocation(line: 256, column: 15, scope: !35, inlinedAt: !41)
!43 = !DILocation(line: 57, column: 20, scope: !7)
!44 = !DILocation(line: 59, column: 20, scope: !7)
!45 = !DILocation(line: 60, column: 28, scope: !7)
!46 = !DILocation(line: 61, column: 20, scope: !7)
!47 = !DILocation(line: 62, column: 20, scope: !7)
!48 = !DILocation(line: 63, column: 20, scope: !7)
!49 = !DILocation(line: 64, column: 25, scope: !7)
!50 = !DILocation(line: 64, column: 44, scope: !7)
!51 = !DILocation(line: 64, column: 4, scope: !7)
