; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_red_fused_add_mul_sub_sum_45(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, i32 %11, i32 %12) local_unnamed_addr !dbg !7 {
  %14 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %15 = icmp slt i32 %14, 128, !dbg !11
  %16 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %17 = shl i32 %16, 2, !dbg !12
  %18 = and i32 %17, 2044, !dbg !12
  %19 = shl i32 %14, 13, !dbg !13
  %20 = or disjoint i32 %19, %18
  %21 = sext i32 %20 to i64, !dbg !14
  %22 = insertelement <8 x i1> poison, i1 %15, i64 0, !dbg !15
  %23 = shufflevector <8 x i1> %22, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !15
  br label %24, !dbg !14

24:                                               ; preds = %13, %24
  %indvars.iv = phi i64 [ 0, %13 ], [ %indvars.iv.next, %24 ]
  %25 = phi float [ 0.000000e+00, %13 ], [ %133, %24 ]
  %26 = phi float [ 0.000000e+00, %13 ], [ %134, %24 ]
  %27 = phi float [ 0.000000e+00, %13 ], [ %135, %24 ]
  %28 = phi float [ 0.000000e+00, %13 ], [ %136, %24 ]
  %29 = phi <8 x float> [ zeroinitializer, %13 ], [ %139, %24 ]
  %30 = add nuw nsw i64 %indvars.iv, %21, !dbg !16
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !17
  %32 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %31, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15) #3, !dbg !18
  %33 = extractvalue { i32, i32, i32, i32 } %32, 0, !dbg !18
  %34 = extractvalue { i32, i32, i32, i32 } %32, 1, !dbg !18
  %35 = extractvalue { i32, i32, i32, i32 } %32, 2, !dbg !18
  %36 = extractvalue { i32, i32, i32, i32 } %32, 3, !dbg !18
  %37 = getelementptr float, ptr addrspace(1) %1, i64 %30, !dbg !19
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %37, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15) #3, !dbg !20
  %39 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !20
  %40 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !20
  %41 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !20
  %42 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !20
  %43 = getelementptr float, ptr addrspace(1) %2, i64 %30, !dbg !21
  %44 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %43, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15) #3, !dbg !22
  %45 = extractvalue { i32, i32, i32, i32 } %44, 0, !dbg !22
  %46 = extractvalue { i32, i32, i32, i32 } %44, 1, !dbg !22
  %47 = extractvalue { i32, i32, i32, i32 } %44, 2, !dbg !22
  %48 = extractvalue { i32, i32, i32, i32 } %44, 3, !dbg !22
  %49 = getelementptr float, ptr addrspace(1) %3, i64 %30, !dbg !23
  %50 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %49, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15) #3, !dbg !24
  %51 = extractvalue { i32, i32, i32, i32 } %50, 0, !dbg !24
  %52 = extractvalue { i32, i32, i32, i32 } %50, 1, !dbg !24
  %53 = extractvalue { i32, i32, i32, i32 } %50, 2, !dbg !24
  %54 = extractvalue { i32, i32, i32, i32 } %50, 3, !dbg !24
  %55 = getelementptr float, ptr addrspace(1) %4, i64 %30, !dbg !25
  %56 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %55, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15) #3, !dbg !26
  %57 = extractvalue { i32, i32, i32, i32 } %56, 0, !dbg !26
  %58 = extractvalue { i32, i32, i32, i32 } %56, 1, !dbg !26
  %59 = extractvalue { i32, i32, i32, i32 } %56, 2, !dbg !26
  %60 = extractvalue { i32, i32, i32, i32 } %56, 3, !dbg !26
  %61 = getelementptr float, ptr addrspace(1) %5, i64 %30, !dbg !27
  %62 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %61, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15) #3, !dbg !28
  %63 = extractvalue { i32, i32, i32, i32 } %62, 0, !dbg !28
  %64 = extractvalue { i32, i32, i32, i32 } %62, 1, !dbg !28
  %65 = extractvalue { i32, i32, i32, i32 } %62, 2, !dbg !28
  %66 = extractvalue { i32, i32, i32, i32 } %62, 3, !dbg !28
  %67 = getelementptr float, ptr addrspace(1) %6, i64 %30, !dbg !29
  %68 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %67, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15) #3, !dbg !30
  %69 = extractvalue { i32, i32, i32, i32 } %68, 0, !dbg !30
  %70 = extractvalue { i32, i32, i32, i32 } %68, 1, !dbg !30
  %71 = extractvalue { i32, i32, i32, i32 } %68, 2, !dbg !30
  %72 = extractvalue { i32, i32, i32, i32 } %68, 3, !dbg !30
  %73 = getelementptr float, ptr addrspace(1) %7, i64 %30, !dbg !31
  %74 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %73, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15) #3, !dbg !32
  %75 = extractvalue { i32, i32, i32, i32 } %74, 0, !dbg !32
  %76 = extractvalue { i32, i32, i32, i32 } %74, 1, !dbg !32
  %77 = extractvalue { i32, i32, i32, i32 } %74, 2, !dbg !32
  %78 = extractvalue { i32, i32, i32, i32 } %74, 3, !dbg !32
  %79 = insertelement <8 x i32> poison, i32 %57, i64 0, !dbg !26
  %80 = insertelement <8 x i32> %79, i32 %58, i64 1, !dbg !26
  %81 = insertelement <8 x i32> %80, i32 %59, i64 2, !dbg !26
  %82 = insertelement <8 x i32> %81, i32 %60, i64 3, !dbg !26
  %83 = insertelement <8 x i32> %82, i32 %33, i64 4, !dbg !26
  %84 = insertelement <8 x i32> %83, i32 %34, i64 5, !dbg !26
  %85 = insertelement <8 x i32> %84, i32 %35, i64 6, !dbg !26
  %86 = insertelement <8 x i32> %85, i32 %36, i64 7, !dbg !26
  %87 = bitcast <8 x i32> %86 to <8 x float>, !dbg !26
  %88 = insertelement <8 x i32> poison, i32 %63, i64 0, !dbg !28
  %89 = insertelement <8 x i32> %88, i32 %64, i64 1, !dbg !28
  %90 = insertelement <8 x i32> %89, i32 %65, i64 2, !dbg !28
  %91 = insertelement <8 x i32> %90, i32 %66, i64 3, !dbg !28
  %92 = insertelement <8 x i32> %91, i32 %39, i64 4, !dbg !28
  %93 = insertelement <8 x i32> %92, i32 %40, i64 5, !dbg !28
  %94 = insertelement <8 x i32> %93, i32 %41, i64 6, !dbg !28
  %95 = insertelement <8 x i32> %94, i32 %42, i64 7, !dbg !28
  %96 = bitcast <8 x i32> %95 to <8 x float>, !dbg !28
  %97 = insertelement <8 x i32> poison, i32 %69, i64 0, !dbg !30
  %98 = insertelement <8 x i32> %97, i32 %70, i64 1, !dbg !30
  %99 = insertelement <8 x i32> %98, i32 %71, i64 2, !dbg !30
  %100 = insertelement <8 x i32> %99, i32 %72, i64 3, !dbg !30
  %101 = insertelement <8 x i32> %100, i32 %45, i64 4, !dbg !30
  %102 = insertelement <8 x i32> %101, i32 %46, i64 5, !dbg !30
  %103 = insertelement <8 x i32> %102, i32 %47, i64 6, !dbg !30
  %104 = insertelement <8 x i32> %103, i32 %48, i64 7, !dbg !30
  %105 = bitcast <8 x i32> %104 to <8 x float>, !dbg !30
  %106 = insertelement <8 x i32> poison, i32 %75, i64 0, !dbg !32
  %107 = insertelement <8 x i32> %106, i32 %76, i64 1, !dbg !32
  %108 = insertelement <8 x i32> %107, i32 %77, i64 2, !dbg !32
  %109 = insertelement <8 x i32> %108, i32 %78, i64 3, !dbg !32
  %110 = insertelement <8 x i32> %109, i32 %51, i64 4, !dbg !32
  %111 = insertelement <8 x i32> %110, i32 %52, i64 5, !dbg !32
  %112 = insertelement <8 x i32> %111, i32 %53, i64 6, !dbg !32
  %113 = insertelement <8 x i32> %112, i32 %54, i64 7, !dbg !32
  %114 = bitcast <8 x i32> %113 to <8 x float>, !dbg !32
  %115 = fmul <8 x float> %96, splat (float 0x3F60000000000000), !dbg !33
  %116 = fsub <8 x float> %87, %115, !dbg !34
  %117 = fmul <8 x float> %105, splat (float 0x3F60000000000000), !dbg !35
  %118 = fsub <8 x float> %116, %117, !dbg !36
  %119 = fmul <8 x float> %114, splat (float 0x3ED0000000000000), !dbg !37
  %120 = fadd <8 x float> %118, %119, !dbg !38
  %shift = shufflevector <8 x float> %120, <8 x float> poison, <8 x i32> <i32 4, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !39
  %121 = fmul <8 x float> %shift, %120, !dbg !39
  %122 = extractelement <8 x float> %121, i64 0, !dbg !39
  %shift36 = shufflevector <8 x float> %120, <8 x float> poison, <8 x i32> <i32 poison, i32 5, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !39
  %123 = fmul <8 x float> %shift36, %120, !dbg !39
  %124 = extractelement <8 x float> %123, i64 1, !dbg !39
  %shift37 = shufflevector <8 x float> %120, <8 x float> poison, <8 x i32> <i32 poison, i32 poison, i32 6, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !39
  %125 = fmul <8 x float> %shift37, %120, !dbg !39
  %126 = extractelement <8 x float> %125, i64 2, !dbg !39
  %shift38 = shufflevector <8 x float> %120, <8 x float> poison, <8 x i32> <i32 poison, i32 poison, i32 poison, i32 7, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !39
  %127 = fmul <8 x float> %shift38, %120, !dbg !39
  %128 = extractelement <8 x float> %127, i64 3, !dbg !39
  %129 = fadd float %25, %122, !dbg !40
  %130 = fadd float %26, %124, !dbg !40
  %131 = fadd float %27, %126, !dbg !40
  %132 = fadd float %28, %128, !dbg !40
  %133 = select i1 %15, float %129, float %25, !dbg !41
  %134 = select i1 %15, float %130, float %26, !dbg !41
  %135 = select i1 %15, float %131, float %27, !dbg !41
  %136 = select i1 %15, float %132, float %28, !dbg !41
  %137 = fmul <8 x float> %120, %120, !dbg !42
  %138 = fadd <8 x float> %29, %137, !dbg !43
  %139 = select <8 x i1> %23, <8 x float> %138, <8 x float> %29, !dbg !15
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 2048, !dbg !14
  %140 = icmp samesign ult i64 %indvars.iv, 6144, !dbg !14
  br i1 %140, label %24, label %141, !dbg !14

141:                                              ; preds = %24
  %142 = lshr i32 %16, 5, !dbg !12
  %143 = and i32 %16, 31, !dbg !12
  %144 = fadd float %133, %134, !dbg !44
  %145 = fadd float %135, %144, !dbg !44
  %146 = fadd float %136, %145, !dbg !44
  %147 = bitcast float %146 to i32, !dbg !49
  %148 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %147, i32 16, i32 31), !dbg !49
  %149 = bitcast i32 %148 to float, !dbg !49
  %150 = fadd float %146, %149, !dbg !44
  %151 = bitcast float %150 to i32, !dbg !49
  %152 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %151, i32 8, i32 31), !dbg !49
  %153 = bitcast i32 %152 to float, !dbg !49
  %154 = fadd float %150, %153, !dbg !44
  %155 = bitcast float %154 to i32, !dbg !49
  %156 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %155, i32 4, i32 31), !dbg !49
  %157 = bitcast i32 %156 to float, !dbg !49
  %158 = fadd float %154, %157, !dbg !44
  %159 = bitcast float %158 to i32, !dbg !49
  %160 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %159, i32 2, i32 31), !dbg !49
  %161 = bitcast i32 %160 to float, !dbg !49
  %162 = fadd float %158, %161, !dbg !44
  %163 = bitcast float %162 to i32, !dbg !49
  %164 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %163, i32 1, i32 31), !dbg !49
  %165 = bitcast i32 %164 to float, !dbg !49
  %166 = fadd float %162, %165, !dbg !44
  %167 = icmp eq i32 %143, 0, !dbg !49
  %168 = and i32 %142, 15, !dbg !49
  %169 = getelementptr float, ptr addrspace(3) @global_smem, i32 %168, !dbg !49
  %170 = bitcast float %166 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %169, <1 x i32> %170, i1 %167) #3, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %171 = icmp slt i32 %16, 16, !dbg !49
  %172 = getelementptr float, ptr addrspace(3) @global_smem, i32 %16, !dbg !49
  %173 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %172, i1 %171) #3, !dbg !49
  %174 = bitcast i32 %173 to float, !dbg !49
  %175 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %173, i32 8, i32 31), !dbg !49
  %176 = bitcast i32 %175 to float, !dbg !49
  %177 = fadd float %174, %176, !dbg !44
  %178 = bitcast float %177 to i32, !dbg !49
  %179 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %178, i32 4, i32 31), !dbg !49
  %180 = bitcast i32 %179 to float, !dbg !49
  %181 = fadd float %177, %180, !dbg !44
  %182 = bitcast float %181 to i32, !dbg !49
  %183 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %182, i32 2, i32 31), !dbg !49
  %184 = bitcast i32 %183 to float, !dbg !49
  %185 = fadd float %181, %184, !dbg !44
  %186 = bitcast float %185 to i32, !dbg !49
  %187 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %186, i32 1, i32 31), !dbg !49
  %188 = bitcast i32 %187 to float, !dbg !49
  %189 = fadd float %185, %188, !dbg !44
  %190 = and i32 %16, 15, !dbg !49
  %191 = icmp eq i32 %190, 0, !dbg !49
  %192 = and i1 %171, %191, !dbg !49
  %193 = bitcast float %189 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %172, <1 x i32> %193, i1 %192) #3, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %194 = load i32, ptr addrspace(3) @global_smem, align 16, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %shift39 = shufflevector <8 x float> %139, <8 x float> poison, <8 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 5, i32 poison, i32 poison, i32 poison>, !dbg !52
  %195 = fadd <8 x float> %139, %shift39, !dbg !52
  %shift40 = shufflevector <8 x float> %139, <8 x float> poison, <8 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 6, i32 poison, i32 poison, i32 poison>, !dbg !52
  %196 = fadd <8 x float> %shift40, %195, !dbg !52
  %shift41 = shufflevector <8 x float> %139, <8 x float> poison, <8 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 7, i32 poison, i32 poison, i32 poison>, !dbg !52
  %197 = fadd <8 x float> %shift41, %196, !dbg !52
  %198 = extractelement <8 x float> %197, i64 4, !dbg !52
  %199 = bitcast float %198 to i32, !dbg !50
  %200 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %199, i32 16, i32 31), !dbg !50
  %201 = bitcast i32 %200 to float, !dbg !50
  %202 = fadd float %198, %201, !dbg !52
  %203 = bitcast float %202 to i32, !dbg !50
  %204 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %203, i32 8, i32 31), !dbg !50
  %205 = bitcast i32 %204 to float, !dbg !50
  %206 = fadd float %202, %205, !dbg !52
  %207 = bitcast float %206 to i32, !dbg !50
  %208 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %207, i32 4, i32 31), !dbg !50
  %209 = bitcast i32 %208 to float, !dbg !50
  %210 = fadd float %206, %209, !dbg !52
  %211 = bitcast float %210 to i32, !dbg !50
  %212 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %211, i32 2, i32 31), !dbg !50
  %213 = bitcast i32 %212 to float, !dbg !50
  %214 = fadd float %210, %213, !dbg !52
  %215 = bitcast float %214 to i32, !dbg !50
  %216 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %215, i32 1, i32 31), !dbg !50
  %217 = bitcast i32 %216 to float, !dbg !50
  %218 = fadd float %214, %217, !dbg !52
  %219 = bitcast float %218 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %169, <1 x i32> %219, i1 %167) #3, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %220 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %172, i1 %171) #3, !dbg !50
  %221 = bitcast i32 %220 to float, !dbg !50
  %222 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %220, i32 8, i32 31), !dbg !50
  %223 = bitcast i32 %222 to float, !dbg !50
  %224 = fadd float %221, %223, !dbg !52
  %225 = bitcast float %224 to i32, !dbg !50
  %226 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %225, i32 4, i32 31), !dbg !50
  %227 = bitcast i32 %226 to float, !dbg !50
  %228 = fadd float %224, %227, !dbg !52
  %229 = bitcast float %228 to i32, !dbg !50
  %230 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %229, i32 2, i32 31), !dbg !50
  %231 = bitcast i32 %230 to float, !dbg !50
  %232 = fadd float %228, %231, !dbg !52
  %233 = bitcast float %232 to i32, !dbg !50
  %234 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %233, i32 1, i32 31), !dbg !50
  %235 = bitcast i32 %234 to float, !dbg !50
  %236 = fadd float %232, %235, !dbg !52
  %237 = bitcast float %236 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %172, <1 x i32> %237, i1 %192) #3, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %238 = load i32, ptr addrspace(3) @global_smem, align 16, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %shift42 = shufflevector <8 x float> %139, <8 x float> poison, <8 x i32> <i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !55
  %239 = fadd <8 x float> %139, %shift42, !dbg !55
  %shift43 = shufflevector <8 x float> %139, <8 x float> poison, <8 x i32> <i32 2, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !55
  %240 = fadd <8 x float> %shift43, %239, !dbg !55
  %shift44 = shufflevector <8 x float> %139, <8 x float> poison, <8 x i32> <i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !55
  %241 = fadd <8 x float> %shift44, %240, !dbg !55
  %242 = extractelement <8 x float> %241, i64 0, !dbg !55
  %243 = bitcast float %242 to i32, !dbg !53
  %244 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %243, i32 16, i32 31), !dbg !53
  %245 = bitcast i32 %244 to float, !dbg !53
  %246 = fadd float %242, %245, !dbg !55
  %247 = bitcast float %246 to i32, !dbg !53
  %248 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %247, i32 8, i32 31), !dbg !53
  %249 = bitcast i32 %248 to float, !dbg !53
  %250 = fadd float %246, %249, !dbg !55
  %251 = bitcast float %250 to i32, !dbg !53
  %252 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %251, i32 4, i32 31), !dbg !53
  %253 = bitcast i32 %252 to float, !dbg !53
  %254 = fadd float %250, %253, !dbg !55
  %255 = bitcast float %254 to i32, !dbg !53
  %256 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %255, i32 2, i32 31), !dbg !53
  %257 = bitcast i32 %256 to float, !dbg !53
  %258 = fadd float %254, %257, !dbg !55
  %259 = bitcast float %258 to i32, !dbg !53
  %260 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %259, i32 1, i32 31), !dbg !53
  %261 = bitcast i32 %260 to float, !dbg !53
  %262 = fadd float %258, %261, !dbg !55
  %263 = bitcast float %262 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %169, <1 x i32> %263, i1 %167) #3, !dbg !53
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %264 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %172, i1 %171) #3, !dbg !53
  %265 = bitcast i32 %264 to float, !dbg !53
  %266 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %264, i32 8, i32 31), !dbg !53
  %267 = bitcast i32 %266 to float, !dbg !53
  %268 = fadd float %265, %267, !dbg !55
  %269 = bitcast float %268 to i32, !dbg !53
  %270 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %269, i32 4, i32 31), !dbg !53
  %271 = bitcast i32 %270 to float, !dbg !53
  %272 = fadd float %268, %271, !dbg !55
  %273 = bitcast float %272 to i32, !dbg !53
  %274 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %273, i32 2, i32 31), !dbg !53
  %275 = bitcast i32 %274 to float, !dbg !53
  %276 = fadd float %272, %275, !dbg !55
  %277 = bitcast float %276 to i32, !dbg !53
  %278 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %277, i32 1, i32 31), !dbg !53
  %279 = bitcast i32 %278 to float, !dbg !53
  %280 = fadd float %276, %279, !dbg !55
  %281 = bitcast float %280 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %172, <1 x i32> %281, i1 %192) #3, !dbg !53
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %282 = load i32, ptr addrspace(3) @global_smem, align 16, !dbg !53
  %283 = sext i32 %14 to i64, !dbg !56
  %284 = getelementptr float, ptr addrspace(1) %8, i64 %283, !dbg !56
  %urem = and i32 %16, 511, !dbg !57
  %285 = icmp eq i32 %urem, 0, !dbg !57
  %286 = and i1 %285, %15, !dbg !57
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %194, ptr addrspace(1) %284, i1 %286) #3, !dbg !57
  %287 = getelementptr float, ptr addrspace(1) %9, i64 %283, !dbg !58
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %238, ptr addrspace(1) %287, i1 %286) #3, !dbg !59
  %288 = getelementptr float, ptr addrspace(1) %10, i64 %283, !dbg !60
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %282, ptr addrspace(1) %288, i1 %286) #3, !dbg !61
  ret void, !dbg !62
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c2ybj64mlp5tjh6ti234lxsypxiza2du3cwgmx5trawkkmxzeole.py", directory: "inductor_cache/2y")
!4 = !{ptr @triton_red_fused_add_mul_sub_sum_45, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_add_mul_sub_sum_45, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_add_mul_sub_sum_45", linkageName: "triton_red_fused_add_mul_sub_sum_45", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 33, scope: !7)
!13 = !DILocation(line: 34, column: 44, scope: !7)
!14 = !DILocation(line: 30, column: 36, scope: !7)
!15 = !DILocation(line: 67, column: 48, scope: !7)
!16 = !DILocation(line: 34, column: 39, scope: !7)
!17 = !DILocation(line: 34, column: 34, scope: !7)
!18 = !DILocation(line: 34, column: 49, scope: !7)
!19 = !DILocation(line: 35, column: 34, scope: !7)
!20 = !DILocation(line: 35, column: 49, scope: !7)
!21 = !DILocation(line: 36, column: 34, scope: !7)
!22 = !DILocation(line: 36, column: 49, scope: !7)
!23 = !DILocation(line: 37, column: 34, scope: !7)
!24 = !DILocation(line: 37, column: 49, scope: !7)
!25 = !DILocation(line: 38, column: 35, scope: !7)
!26 = !DILocation(line: 38, column: 50, scope: !7)
!27 = !DILocation(line: 39, column: 35, scope: !7)
!28 = !DILocation(line: 39, column: 50, scope: !7)
!29 = !DILocation(line: 40, column: 35, scope: !7)
!30 = !DILocation(line: 40, column: 50, scope: !7)
!31 = !DILocation(line: 41, column: 35, scope: !7)
!32 = !DILocation(line: 41, column: 50, scope: !7)
!33 = !DILocation(line: 50, column: 24, scope: !7)
!34 = !DILocation(line: 51, column: 24, scope: !7)
!35 = !DILocation(line: 52, column: 24, scope: !7)
!36 = !DILocation(line: 53, column: 24, scope: !7)
!37 = !DILocation(line: 54, column: 24, scope: !7)
!38 = !DILocation(line: 55, column: 24, scope: !7)
!39 = !DILocation(line: 56, column: 24, scope: !7)
!40 = !DILocation(line: 58, column: 25, scope: !7)
!41 = !DILocation(line: 59, column: 48, scope: !7)
!42 = !DILocation(line: 64, column: 24, scope: !7)
!43 = !DILocation(line: 66, column: 25, scope: !7)
!44 = !DILocation(line: 256, column: 15, scope: !45, inlinedAt: !48)
!45 = distinct !DILexicalBlockFile(scope: !47, file: !46, discriminator: 0)
!46 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!47 = distinct !DILexicalBlockFile(scope: !7, file: !46, discriminator: 0)
!48 = !DILocation(line: 68, column: 27, scope: !7)
!49 = !DILocation(line: 267, column: 36, scope: !47, inlinedAt: !48)
!50 = !DILocation(line: 267, column: 36, scope: !47, inlinedAt: !51)
!51 = !DILocation(line: 69, column: 27, scope: !7)
!52 = !DILocation(line: 256, column: 15, scope: !45, inlinedAt: !51)
!53 = !DILocation(line: 267, column: 36, scope: !47, inlinedAt: !54)
!54 = !DILocation(line: 70, column: 27, scope: !7)
!55 = !DILocation(line: 256, column: 15, scope: !45, inlinedAt: !54)
!56 = !DILocation(line: 71, column: 25, scope: !7)
!57 = !DILocation(line: 71, column: 37, scope: !7)
!58 = !DILocation(line: 72, column: 25, scope: !7)
!59 = !DILocation(line: 72, column: 37, scope: !7)
!60 = !DILocation(line: 73, column: 25, scope: !7)
!61 = !DILocation(line: 73, column: 37, scope: !7)
!62 = !DILocation(line: 73, column: 4, scope: !7)
