; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_view_2(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %6 = shl i32 %5, 5, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = lshr i32 %7, 3, !dbg !12
  %9 = and i32 %8, 15, !dbg !12
  %10 = shl i32 %7, 1, !dbg !12
  %11 = and i32 %10, 30, !dbg !12
  %12 = or disjoint i32 %6, %9, !dbg !13
  %13 = or disjoint i32 %12, 16, !dbg !13
  %14 = or disjoint i32 %6, %11, !dbg !13
  %15 = icmp slt i32 %12, 88, !dbg !14
  %16 = icmp slt i32 %13, 88, !dbg !14
  %17 = icmp slt i32 %14, 88, !dbg !14
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %19 = shl i32 %18, 5, !dbg !16
  %20 = shl i32 %7, 2, !dbg !17
  %21 = and i32 %20, 28, !dbg !17
  %22 = lshr i32 %7, 4, !dbg !17
  %23 = and i32 %22, 7, !dbg !17
  %24 = or disjoint i32 %19, %21, !dbg !18
  %25 = or disjoint i32 %19, %23, !dbg !18
  %26 = or disjoint i32 %25, 8, !dbg !18
  %27 = or disjoint i32 %25, 16, !dbg !18
  %28 = or disjoint i32 %25, 24, !dbg !18
  %29 = icmp slt i32 %24, 64, !dbg !19
  %30 = icmp slt i32 %25, 64, !dbg !19
  %31 = icmp slt i32 %26, 64, !dbg !19
  %32 = icmp slt i32 %27, 64, !dbg !19
  %33 = icmp slt i32 %28, 64, !dbg !19
  %.frozen = freeze i32 %14, !dbg !20
  %34 = sdiv i32 %.frozen, 22, !dbg !20
  %35 = mul i32 %34, 22, !dbg !21
  %.decomposed = sub i32 %.frozen, %35, !dbg !21
  %36 = shl i32 %12, 6, !dbg !22
  %37 = shl i32 %13, 6, !dbg !22
  %38 = add i32 %24, %36, !dbg !23
  %39 = add i32 %24, %37, !dbg !23
  %40 = sext i32 %38 to i64, !dbg !24
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !24
  %42 = sext i32 %39 to i64, !dbg !24
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !24
  %44 = and i1 %15, %29, !dbg !25
  %45 = and i1 %16, %29, !dbg !25
  %46 = and i1 %17, %30, !dbg !25
  %47 = and i1 %31, %17, !dbg !25
  %48 = and i1 %32, %17, !dbg !25
  %49 = and i1 %33, %17, !dbg !25
  %50 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %41, i1 %44) #2, !dbg !26
  %51 = extractvalue { i32, i32, i32, i32 } %50, 0, !dbg !26
  %52 = extractvalue { i32, i32, i32, i32 } %50, 1, !dbg !26
  %53 = extractvalue { i32, i32, i32, i32 } %50, 2, !dbg !26
  %54 = extractvalue { i32, i32, i32, i32 } %50, 3, !dbg !26
  %55 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %43, i1 %45) #2, !dbg !26
  %56 = extractvalue { i32, i32, i32, i32 } %55, 0, !dbg !26
  %57 = extractvalue { i32, i32, i32, i32 } %55, 1, !dbg !26
  %58 = extractvalue { i32, i32, i32, i32 } %55, 2, !dbg !26
  %59 = extractvalue { i32, i32, i32, i32 } %55, 3, !dbg !26
  %60 = mul i32 %25, 22, !dbg !27
  %61 = mul i32 %26, 22, !dbg !27
  %62 = mul i32 %27, 22, !dbg !27
  %63 = mul i32 %28, 22, !dbg !27
  %64 = mul i32 %34, 1408, !dbg !28
  %65 = add i32 %64, %.decomposed, !dbg !29
  %66 = add i32 %65, %60, !dbg !30
  %67 = add i32 %65, %61, !dbg !30
  %68 = add i32 %65, %62, !dbg !30
  %69 = add i32 %65, %63, !dbg !30
  %70 = sext i32 %66 to i64, !dbg !31
  %71 = getelementptr float, ptr addrspace(1) %1, i64 %70, !dbg !31
  %72 = sext i32 %67 to i64, !dbg !31
  %73 = getelementptr float, ptr addrspace(1) %1, i64 %72, !dbg !31
  %74 = sext i32 %68 to i64, !dbg !31
  %75 = getelementptr float, ptr addrspace(1) %1, i64 %74, !dbg !31
  %76 = sext i32 %69 to i64, !dbg !31
  %77 = getelementptr float, ptr addrspace(1) %1, i64 %76, !dbg !31
  %78 = shl i32 %7, 7, !dbg !32
  %79 = and i32 %78, 896, !dbg !32
  %80 = or disjoint i32 %79, %9, !dbg !32
  %81 = and i32 %10, 254, !dbg !32
  %82 = lshr exact i32 %79, 4, !dbg !32
  %83 = add nuw nsw i32 %82, %80, !dbg !32
  %84 = zext nneg i32 %83 to i64, !dbg !32
  %85 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %84, !dbg !32
  %86 = insertelement <1 x i32> poison, i32 %51, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %85, <1 x i32> %86, i1 true) #2, !dbg !32
  %87 = or disjoint i32 %80, 32, !dbg !32
  %88 = lshr i32 %87, 4, !dbg !32
  %89 = add nuw nsw i32 %88, %87, !dbg !32
  %90 = zext nneg i32 %89 to i64, !dbg !32
  %91 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %90, !dbg !32
  %92 = insertelement <1 x i32> poison, i32 %52, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %91, <1 x i32> %92, i1 true) #2, !dbg !32
  %93 = or disjoint i32 %80, 64, !dbg !32
  %94 = lshr i32 %93, 4, !dbg !32
  %95 = add nuw nsw i32 %94, %93, !dbg !32
  %96 = zext nneg i32 %95 to i64, !dbg !32
  %97 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %96, !dbg !32
  %98 = insertelement <1 x i32> poison, i32 %53, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %97, <1 x i32> %98, i1 true) #2, !dbg !32
  %99 = or disjoint i32 %80, 96, !dbg !32
  %100 = lshr i32 %99, 4, !dbg !32
  %101 = add nuw nsw i32 %100, %99, !dbg !32
  %102 = zext nneg i32 %101 to i64, !dbg !32
  %103 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %102, !dbg !32
  %104 = insertelement <1 x i32> poison, i32 %54, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %103, <1 x i32> %104, i1 true) #2, !dbg !32
  %105 = or disjoint i32 %80, 16, !dbg !32
  %106 = add nuw nsw i32 %105, %82, !dbg !32
  %107 = zext nneg i32 %106 to i64, !dbg !32
  %108 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %107, !dbg !32
  %109 = insertelement <1 x i32> poison, i32 %56, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %108, <1 x i32> %109, i1 true) #2, !dbg !32
  %110 = or disjoint i32 %80, 48, !dbg !32
  %111 = lshr i32 %110, 4, !dbg !32
  %112 = and i32 %111, 58, !dbg !32
  %113 = add nuw nsw i32 %112, %110, !dbg !32
  %114 = zext nneg i32 %113 to i64, !dbg !32
  %115 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %114, !dbg !32
  %116 = insertelement <1 x i32> poison, i32 %57, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %115, <1 x i32> %116, i1 true) #2, !dbg !32
  %117 = or disjoint i32 %80, 80, !dbg !32
  %118 = lshr i32 %117, 4, !dbg !32
  %119 = and i32 %118, 60, !dbg !32
  %120 = add nuw nsw i32 %119, %117, !dbg !32
  %121 = zext nneg i32 %120 to i64, !dbg !32
  %122 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %121, !dbg !32
  %123 = insertelement <1 x i32> poison, i32 %58, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %122, <1 x i32> %123, i1 true) #2, !dbg !32
  %124 = or disjoint i32 %80, 112, !dbg !32
  %125 = lshr i32 %124, 4, !dbg !32
  %126 = and i32 %125, 62, !dbg !32
  %127 = add nuw nsw i32 %126, %124, !dbg !32
  %128 = zext nneg i32 %127 to i64, !dbg !32
  %129 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %128, !dbg !32
  %130 = insertelement <1 x i32> poison, i32 %59, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %129, <1 x i32> %130, i1 true) #2, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %131 = lshr i32 %10, 4, !dbg !32
  %132 = and i32 %131, 14, !dbg !32
  %133 = add nuw nsw i32 %132, %81, !dbg !32
  %134 = zext nneg i32 %133 to i64, !dbg !32
  %135 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %134, !dbg !32
  %136 = or disjoint i32 %81, 256, !dbg !32
  %137 = lshr i32 %136, 4, !dbg !32
  %138 = and i32 %137, 30, !dbg !32
  %139 = add nuw nsw i32 %138, %136, !dbg !32
  %140 = zext nneg i32 %139 to i64, !dbg !32
  %141 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %140, !dbg !32
  %142 = load <2 x i32>, ptr addrspace(3) %141, align 8, !dbg !32
  %143 = or disjoint i32 %81, 512, !dbg !32
  %144 = lshr i32 %143, 4, !dbg !32
  %145 = and i32 %144, 46, !dbg !32
  %146 = add nuw nsw i32 %145, %143, !dbg !32
  %147 = zext nneg i32 %146 to i64, !dbg !32
  %148 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %147, !dbg !32
  %149 = load <2 x i32>, ptr addrspace(3) %148, align 8, !dbg !32
  %150 = or disjoint i32 %81, 768, !dbg !32
  %151 = lshr i32 %150, 4, !dbg !32
  %152 = and i32 %151, 62, !dbg !32
  %153 = add nuw nsw i32 %152, %150, !dbg !32
  %154 = zext nneg i32 %153 to i64, !dbg !32
  %155 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %154, !dbg !32
  %156 = load <2 x i32>, ptr addrspace(3) %155, align 8, !dbg !32
  %.extract = load i32, ptr addrspace(3) %135, align 8, !dbg !32
  %157 = getelementptr inbounds i8, ptr addrspace(3) %135, i64 4, !dbg !32
  %.extract10 = load i32, ptr addrspace(3) %157, align 4, !dbg !32
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract, i32 %.extract10, ptr addrspace(1) %71, i1 %46) #2, !dbg !32
  %.extract11 = extractelement <2 x i32> %142, i64 0, !dbg !32
  %.extract12 = extractelement <2 x i32> %142, i64 1, !dbg !32
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract11, i32 %.extract12, ptr addrspace(1) %73, i1 %47) #2, !dbg !32
  %.extract13 = extractelement <2 x i32> %149, i64 0, !dbg !32
  %.extract14 = extractelement <2 x i32> %149, i64 1, !dbg !32
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract13, i32 %.extract14, ptr addrspace(1) %75, i1 %48) #2, !dbg !32
  %.extract15 = extractelement <2 x i32> %156, i64 0, !dbg !32
  %.extract16 = extractelement <2 x i32> %156, i64 1, !dbg !32
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract15, i32 %.extract16, ptr addrspace(1) %77, i1 %49) #2, !dbg !32
  ret void, !dbg !33
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cvul5rtbfvarvaq2fwdotjqqab6r3otbk2l2lwo7wwhg6qb5suvu.py", directory: "inductor_cache/vu")
!4 = !{ptr @triton_poi_fused_view_2, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_view_2, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_view_2", linkageName: "triton_poi_fused_view_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 31, column: 19, scope: !7)
!21 = !DILocation(line: 30, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 38, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 30, scope: !7)
!25 = !DILocation(line: 32, column: 51, scope: !7)
!26 = !DILocation(line: 32, column: 43, scope: !7)
!27 = !DILocation(line: 33, column: 33, scope: !7)
!28 = !DILocation(line: 33, column: 43, scope: !7)
!29 = !DILocation(line: 33, column: 30, scope: !7)
!30 = !DILocation(line: 33, column: 38, scope: !7)
!31 = !DILocation(line: 33, column: 25, scope: !7)
!32 = !DILocation(line: 33, column: 54, scope: !7)
!33 = !DILocation(line: 33, column: 4, scope: !7)
