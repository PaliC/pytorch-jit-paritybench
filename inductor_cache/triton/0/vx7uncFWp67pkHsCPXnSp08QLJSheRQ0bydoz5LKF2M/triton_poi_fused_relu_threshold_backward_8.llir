; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_relu_threshold_backward_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 8, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 4, !dbg !12
  %10 = and i32 %9, 240, !dbg !12
  %11 = lshr i32 %8, 2, !dbg !12
  %12 = and i32 %11, 63, !dbg !12
  %13 = or disjoint i32 %12, 64, !dbg !12
  %14 = or disjoint i32 %12, 128, !dbg !12
  %15 = or disjoint i32 %12, 192, !dbg !12
  %16 = or disjoint i32 %7, %10, !dbg !13
  %17 = or disjoint i32 %16, 4, !dbg !13
  %18 = or disjoint i32 %16, 8, !dbg !13
  %19 = or disjoint i32 %16, 12, !dbg !13
  %20 = or disjoint i32 %7, %12, !dbg !13
  %21 = or disjoint i32 %7, %13, !dbg !13
  %22 = or disjoint i32 %7, %14, !dbg !13
  %23 = or disjoint i32 %7, %15, !dbg !13
  %24 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %25 = shl i32 %24, 4, !dbg !15
  %26 = lshr i32 %8, 4, !dbg !16
  %27 = and i32 %26, 15, !dbg !16
  %28 = shl i32 %8, 2, !dbg !16
  %29 = and i32 %28, 12, !dbg !16
  %30 = or disjoint i32 %25, %27, !dbg !17
  %31 = or disjoint i32 %25, %29, !dbg !17
  %.frozen = freeze i32 %16, !dbg !18
  %32 = sdiv i32 %.frozen, 2048, !dbg !18
  %33 = mul i32 %32, 2048, !dbg !19
  %.decomposed = sub i32 %.frozen, %33, !dbg !19
  %34 = srem i32 %17, 2048, !dbg !19
  %35 = srem i32 %18, 2048, !dbg !19
  %36 = srem i32 %19, 2048, !dbg !19
  %37 = shl i32 %30, 11, !dbg !20
  %38 = shl i32 %32, 23, !dbg !21
  %39 = add i32 %38, %37, !dbg !22
  %40 = add i32 %39, %.decomposed, !dbg !23
  %41 = add i32 %39, %34, !dbg !23
  %42 = add i32 %39, %35, !dbg !23
  %43 = add i32 %39, %36, !dbg !23
  %44 = sext i32 %40 to i64, !dbg !24
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !24
  %46 = sext i32 %41 to i64, !dbg !24
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !24
  %48 = sext i32 %42 to i64, !dbg !24
  %49 = getelementptr float, ptr addrspace(1) %0, i64 %48, !dbg !24
  %50 = sext i32 %43 to i64, !dbg !24
  %51 = getelementptr float, ptr addrspace(1) %0, i64 %50, !dbg !24
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %45, i1 true) #2, !dbg !25
  %53 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !25
  %54 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !25
  %55 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !25
  %56 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !25
  %57 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %47, i1 true) #2, !dbg !25
  %58 = extractvalue { i32, i32, i32, i32 } %57, 0, !dbg !25
  %59 = extractvalue { i32, i32, i32, i32 } %57, 1, !dbg !25
  %60 = extractvalue { i32, i32, i32, i32 } %57, 2, !dbg !25
  %61 = extractvalue { i32, i32, i32, i32 } %57, 3, !dbg !25
  %62 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %49, i1 true) #2, !dbg !25
  %63 = extractvalue { i32, i32, i32, i32 } %62, 0, !dbg !25
  %64 = extractvalue { i32, i32, i32, i32 } %62, 1, !dbg !25
  %65 = extractvalue { i32, i32, i32, i32 } %62, 2, !dbg !25
  %66 = extractvalue { i32, i32, i32, i32 } %62, 3, !dbg !25
  %67 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %51, i1 true) #2, !dbg !25
  %68 = extractvalue { i32, i32, i32, i32 } %67, 0, !dbg !25
  %69 = extractvalue { i32, i32, i32, i32 } %67, 1, !dbg !25
  %70 = extractvalue { i32, i32, i32, i32 } %67, 2, !dbg !25
  %71 = extractvalue { i32, i32, i32, i32 } %67, 3, !dbg !25
  %72 = shl i32 %20, 12, !dbg !26
  %73 = shl i32 %21, 12, !dbg !26
  %74 = shl i32 %22, 12, !dbg !26
  %75 = shl i32 %23, 12, !dbg !26
  %76 = add i32 %31, %72, !dbg !27
  %77 = add i32 %31, %73, !dbg !27
  %78 = add i32 %31, %74, !dbg !27
  %79 = add i32 %31, %75, !dbg !27
  %80 = sext i32 %76 to i64, !dbg !28
  %81 = getelementptr float, ptr addrspace(1) %1, i64 %80, !dbg !28
  %82 = sext i32 %77 to i64, !dbg !28
  %83 = getelementptr float, ptr addrspace(1) %1, i64 %82, !dbg !28
  %84 = sext i32 %78 to i64, !dbg !28
  %85 = getelementptr float, ptr addrspace(1) %1, i64 %84, !dbg !28
  %86 = sext i32 %79 to i64, !dbg !28
  %87 = getelementptr float, ptr addrspace(1) %1, i64 %86, !dbg !28
  %88 = shl i32 %8, 8, !dbg !29
  %89 = and i32 %88, 3840, !dbg !29
  %90 = or disjoint i32 %89, %27, !dbg !29
  %91 = and i32 %28, 1020, !dbg !29
  %92 = lshr exact i32 %89, 2, !dbg !29
  %93 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %92, !dbg !29
  %94 = getelementptr float, ptr addrspace(3) %93, i32 %90, !dbg !29
  %95 = or disjoint i32 %90, 16, !dbg !29
  %96 = lshr i32 %95, 4, !dbg !29
  %97 = getelementptr float, ptr addrspace(3) @global_smem, i32 %96, !dbg !29
  %98 = getelementptr float, ptr addrspace(3) %97, i32 %95, !dbg !29
  %99 = or disjoint i32 %90, 32, !dbg !29
  %100 = lshr i32 %99, 4, !dbg !29
  %101 = getelementptr float, ptr addrspace(3) @global_smem, i32 %100, !dbg !29
  %102 = getelementptr float, ptr addrspace(3) %101, i32 %99, !dbg !29
  %103 = or disjoint i32 %90, 48, !dbg !29
  %104 = lshr i32 %103, 4, !dbg !29
  %105 = getelementptr float, ptr addrspace(3) @global_smem, i32 %104, !dbg !29
  %106 = getelementptr float, ptr addrspace(3) %105, i32 %103, !dbg !29
  %107 = or disjoint i32 %90, 64, !dbg !29
  %108 = lshr i32 %107, 4, !dbg !29
  %109 = getelementptr float, ptr addrspace(3) @global_smem, i32 %108, !dbg !29
  %110 = getelementptr float, ptr addrspace(3) %109, i32 %107, !dbg !29
  %111 = or disjoint i32 %90, 80, !dbg !29
  %112 = lshr i32 %111, 4, !dbg !29
  %113 = getelementptr float, ptr addrspace(3) @global_smem, i32 %112, !dbg !29
  %114 = getelementptr float, ptr addrspace(3) %113, i32 %111, !dbg !29
  %115 = or disjoint i32 %90, 96, !dbg !29
  %116 = lshr i32 %115, 4, !dbg !29
  %117 = getelementptr float, ptr addrspace(3) @global_smem, i32 %116, !dbg !29
  %118 = getelementptr float, ptr addrspace(3) %117, i32 %115, !dbg !29
  %119 = or disjoint i32 %90, 112, !dbg !29
  %120 = lshr i32 %119, 4, !dbg !29
  %121 = getelementptr float, ptr addrspace(3) @global_smem, i32 %120, !dbg !29
  %122 = getelementptr float, ptr addrspace(3) %121, i32 %119, !dbg !29
  %123 = or disjoint i32 %90, 128, !dbg !29
  %124 = lshr i32 %123, 4, !dbg !29
  %125 = getelementptr float, ptr addrspace(3) @global_smem, i32 %124, !dbg !29
  %126 = getelementptr float, ptr addrspace(3) %125, i32 %123, !dbg !29
  %127 = or disjoint i32 %90, 144, !dbg !29
  %128 = lshr i32 %127, 4, !dbg !29
  %129 = getelementptr float, ptr addrspace(3) @global_smem, i32 %128, !dbg !29
  %130 = getelementptr float, ptr addrspace(3) %129, i32 %127, !dbg !29
  %131 = or disjoint i32 %90, 160, !dbg !29
  %132 = lshr i32 %131, 4, !dbg !29
  %133 = getelementptr float, ptr addrspace(3) @global_smem, i32 %132, !dbg !29
  %134 = getelementptr float, ptr addrspace(3) %133, i32 %131, !dbg !29
  %135 = or disjoint i32 %90, 176, !dbg !29
  %136 = lshr i32 %135, 4, !dbg !29
  %137 = getelementptr float, ptr addrspace(3) @global_smem, i32 %136, !dbg !29
  %138 = getelementptr float, ptr addrspace(3) %137, i32 %135, !dbg !29
  %139 = or disjoint i32 %90, 192, !dbg !29
  %140 = lshr i32 %139, 4, !dbg !29
  %141 = getelementptr float, ptr addrspace(3) @global_smem, i32 %140, !dbg !29
  %142 = getelementptr float, ptr addrspace(3) %141, i32 %139, !dbg !29
  %143 = or disjoint i32 %90, 208, !dbg !29
  %144 = lshr i32 %143, 4, !dbg !29
  %145 = getelementptr float, ptr addrspace(3) @global_smem, i32 %144, !dbg !29
  %146 = getelementptr float, ptr addrspace(3) %145, i32 %143, !dbg !29
  %147 = or disjoint i32 %90, 224, !dbg !29
  %148 = lshr i32 %147, 4, !dbg !29
  %149 = getelementptr float, ptr addrspace(3) @global_smem, i32 %148, !dbg !29
  %150 = getelementptr float, ptr addrspace(3) %149, i32 %147, !dbg !29
  %151 = or disjoint i32 %90, 240, !dbg !29
  %152 = lshr i32 %151, 4, !dbg !29
  %153 = getelementptr float, ptr addrspace(3) @global_smem, i32 %152, !dbg !29
  %154 = getelementptr float, ptr addrspace(3) %153, i32 %151, !dbg !29
  %155 = lshr i32 %91, 4, !dbg !29
  %156 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %155, !dbg !29
  %157 = getelementptr inbounds float, ptr addrspace(3) %156, i32 %91, !dbg !29
  %158 = or disjoint i32 %91, 1, !dbg !29
  %159 = getelementptr inbounds float, ptr addrspace(3) %156, i32 %158, !dbg !29
  %160 = or disjoint i32 %91, 2, !dbg !29
  %161 = getelementptr inbounds float, ptr addrspace(3) %156, i32 %160, !dbg !29
  %162 = or disjoint i32 %91, 3, !dbg !29
  %163 = getelementptr inbounds float, ptr addrspace(3) %156, i32 %162, !dbg !29
  %164 = or disjoint i32 %91, 1024, !dbg !29
  %165 = lshr i32 %164, 4, !dbg !29
  %166 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %165, !dbg !29
  %167 = getelementptr inbounds float, ptr addrspace(3) %166, i32 %164, !dbg !29
  %168 = or disjoint i32 %91, 1025, !dbg !29
  %169 = lshr i32 %168, 4, !dbg !29
  %170 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %169, !dbg !29
  %171 = getelementptr inbounds float, ptr addrspace(3) %170, i32 %168, !dbg !29
  %172 = or disjoint i32 %91, 1026, !dbg !29
  %173 = lshr i32 %172, 4, !dbg !29
  %174 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %173, !dbg !29
  %175 = getelementptr inbounds float, ptr addrspace(3) %174, i32 %172, !dbg !29
  %176 = or disjoint i32 %91, 1027, !dbg !29
  %177 = lshr i32 %176, 4, !dbg !29
  %178 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %177, !dbg !29
  %179 = getelementptr inbounds float, ptr addrspace(3) %178, i32 %176, !dbg !29
  %180 = or disjoint i32 %91, 2048, !dbg !29
  %181 = lshr i32 %180, 4, !dbg !29
  %182 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %181, !dbg !29
  %183 = getelementptr inbounds float, ptr addrspace(3) %182, i32 %180, !dbg !29
  %184 = or disjoint i32 %91, 2049, !dbg !29
  %185 = lshr i32 %184, 4, !dbg !29
  %186 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %185, !dbg !29
  %187 = getelementptr inbounds float, ptr addrspace(3) %186, i32 %184, !dbg !29
  %188 = or disjoint i32 %91, 2050, !dbg !29
  %189 = lshr i32 %188, 4, !dbg !29
  %190 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %189, !dbg !29
  %191 = getelementptr inbounds float, ptr addrspace(3) %190, i32 %188, !dbg !29
  %192 = or disjoint i32 %91, 2051, !dbg !29
  %193 = lshr i32 %192, 4, !dbg !29
  %194 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %193, !dbg !29
  %195 = getelementptr inbounds float, ptr addrspace(3) %194, i32 %192, !dbg !29
  %196 = or disjoint i32 %91, 3072, !dbg !29
  %197 = lshr i32 %196, 4, !dbg !29
  %198 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %197, !dbg !29
  %199 = getelementptr inbounds float, ptr addrspace(3) %198, i32 %196, !dbg !29
  %200 = or disjoint i32 %91, 3073, !dbg !29
  %201 = lshr i32 %200, 4, !dbg !29
  %202 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %201, !dbg !29
  %203 = getelementptr inbounds float, ptr addrspace(3) %202, i32 %200, !dbg !29
  %204 = or disjoint i32 %91, 3074, !dbg !29
  %205 = lshr i32 %204, 4, !dbg !29
  %206 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %205, !dbg !29
  %207 = getelementptr inbounds float, ptr addrspace(3) %206, i32 %204, !dbg !29
  %208 = or disjoint i32 %91, 3075, !dbg !29
  %209 = lshr i32 %208, 4, !dbg !29
  %210 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %209, !dbg !29
  %211 = getelementptr inbounds float, ptr addrspace(3) %210, i32 %208, !dbg !29
  %212 = getelementptr i1, ptr addrspace(1) %2, i64 %44, !dbg !30
  %213 = insertelement <4 x i32> poison, i32 %53, i64 0, !dbg !25
  %214 = insertelement <4 x i32> %213, i32 %54, i64 1, !dbg !25
  %215 = insertelement <4 x i32> %214, i32 %55, i64 2, !dbg !25
  %216 = insertelement <4 x i32> %215, i32 %56, i64 3, !dbg !25
  %217 = bitcast <4 x i32> %216 to <4 x float>, !dbg !25
  %218 = fcmp olt <4 x float> %217, zeroinitializer, !dbg !31
  %219 = select <4 x i1> %218, <4 x float> zeroinitializer, <4 x float> %217, !dbg !35
  %220 = fcmp ole <4 x float> %219, zeroinitializer, !dbg !36
  %221 = extractelement <4 x float> %219, i64 0, !dbg !29
  %222 = bitcast float %221 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %94, <1 x i32> %222, i1 true) #2, !dbg !29
  %223 = extractelement <4 x float> %219, i64 1, !dbg !29
  %224 = bitcast float %223 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %98, <1 x i32> %224, i1 true) #2, !dbg !29
  %225 = extractelement <4 x float> %219, i64 2, !dbg !29
  %226 = bitcast float %225 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %102, <1 x i32> %226, i1 true) #2, !dbg !29
  %227 = extractelement <4 x float> %219, i64 3, !dbg !29
  %228 = bitcast float %227 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %106, <1 x i32> %228, i1 true) #2, !dbg !29
  %229 = insertelement <4 x i32> poison, i32 %58, i64 0, !dbg !25
  %230 = insertelement <4 x i32> %229, i32 %59, i64 1, !dbg !25
  %231 = insertelement <4 x i32> %230, i32 %60, i64 2, !dbg !25
  %232 = insertelement <4 x i32> %231, i32 %61, i64 3, !dbg !25
  %233 = bitcast <4 x i32> %232 to <4 x float>, !dbg !25
  %234 = fcmp olt <4 x float> %233, zeroinitializer, !dbg !31
  %235 = select <4 x i1> %234, <4 x float> zeroinitializer, <4 x float> %233, !dbg !35
  %236 = fcmp ole <4 x float> %235, zeroinitializer, !dbg !36
  %237 = extractelement <4 x float> %235, i64 0, !dbg !29
  %238 = bitcast float %237 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %110, <1 x i32> %238, i1 true) #2, !dbg !29
  %239 = extractelement <4 x float> %235, i64 1, !dbg !29
  %240 = bitcast float %239 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %114, <1 x i32> %240, i1 true) #2, !dbg !29
  %241 = extractelement <4 x float> %235, i64 2, !dbg !29
  %242 = bitcast float %241 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %118, <1 x i32> %242, i1 true) #2, !dbg !29
  %243 = extractelement <4 x float> %235, i64 3, !dbg !29
  %244 = bitcast float %243 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %122, <1 x i32> %244, i1 true) #2, !dbg !29
  %245 = insertelement <4 x i32> poison, i32 %63, i64 0, !dbg !25
  %246 = insertelement <4 x i32> %245, i32 %64, i64 1, !dbg !25
  %247 = insertelement <4 x i32> %246, i32 %65, i64 2, !dbg !25
  %248 = insertelement <4 x i32> %247, i32 %66, i64 3, !dbg !25
  %249 = bitcast <4 x i32> %248 to <4 x float>, !dbg !25
  %250 = fcmp olt <4 x float> %249, zeroinitializer, !dbg !31
  %251 = select <4 x i1> %250, <4 x float> zeroinitializer, <4 x float> %249, !dbg !35
  %252 = fcmp ole <4 x float> %251, zeroinitializer, !dbg !36
  %253 = extractelement <4 x float> %251, i64 0, !dbg !29
  %254 = bitcast float %253 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %126, <1 x i32> %254, i1 true) #2, !dbg !29
  %255 = extractelement <4 x float> %251, i64 1, !dbg !29
  %256 = bitcast float %255 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %130, <1 x i32> %256, i1 true) #2, !dbg !29
  %257 = extractelement <4 x float> %251, i64 2, !dbg !29
  %258 = bitcast float %257 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %134, <1 x i32> %258, i1 true) #2, !dbg !29
  %259 = extractelement <4 x float> %251, i64 3, !dbg !29
  %260 = bitcast float %259 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %138, <1 x i32> %260, i1 true) #2, !dbg !29
  %261 = insertelement <4 x i32> poison, i32 %68, i64 0, !dbg !25
  %262 = insertelement <4 x i32> %261, i32 %69, i64 1, !dbg !25
  %263 = insertelement <4 x i32> %262, i32 %70, i64 2, !dbg !25
  %264 = insertelement <4 x i32> %263, i32 %71, i64 3, !dbg !25
  %265 = bitcast <4 x i32> %264 to <4 x float>, !dbg !25
  %266 = fcmp olt <4 x float> %265, zeroinitializer, !dbg !31
  %267 = select <4 x i1> %266, <4 x float> zeroinitializer, <4 x float> %265, !dbg !35
  %268 = fcmp ole <4 x float> %267, zeroinitializer, !dbg !36
  %269 = extractelement <4 x float> %267, i64 0, !dbg !29
  %270 = bitcast float %269 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %142, <1 x i32> %270, i1 true) #2, !dbg !29
  %271 = extractelement <4 x float> %267, i64 1, !dbg !29
  %272 = bitcast float %271 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %146, <1 x i32> %272, i1 true) #2, !dbg !29
  %273 = extractelement <4 x float> %267, i64 2, !dbg !29
  %274 = bitcast float %273 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %150, <1 x i32> %274, i1 true) #2, !dbg !29
  %275 = extractelement <4 x float> %267, i64 3, !dbg !29
  %276 = bitcast float %275 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %154, <1 x i32> %276, i1 true) #2, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %277 = load i32, ptr addrspace(3) %157, align 4, !dbg !29
  %278 = load i32, ptr addrspace(3) %159, align 4, !dbg !29
  %279 = load i32, ptr addrspace(3) %161, align 4, !dbg !29
  %280 = load i32, ptr addrspace(3) %163, align 4, !dbg !29
  %281 = load i32, ptr addrspace(3) %167, align 4, !dbg !29
  %282 = load i32, ptr addrspace(3) %171, align 4, !dbg !29
  %283 = load i32, ptr addrspace(3) %175, align 4, !dbg !29
  %284 = load i32, ptr addrspace(3) %179, align 4, !dbg !29
  %285 = load i32, ptr addrspace(3) %183, align 4, !dbg !29
  %286 = load i32, ptr addrspace(3) %187, align 4, !dbg !29
  %287 = load i32, ptr addrspace(3) %191, align 4, !dbg !29
  %288 = load i32, ptr addrspace(3) %195, align 4, !dbg !29
  %289 = load i32, ptr addrspace(3) %199, align 4, !dbg !29
  %290 = load i32, ptr addrspace(3) %203, align 4, !dbg !29
  %291 = load i32, ptr addrspace(3) %207, align 4, !dbg !29
  %292 = load i32, ptr addrspace(3) %211, align 4, !dbg !29
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %277, i32 %278, i32 %279, i32 %280, ptr addrspace(1) %81, i1 true) #2, !dbg !29
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %281, i32 %282, i32 %283, i32 %284, ptr addrspace(1) %83, i1 true) #2, !dbg !29
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %285, i32 %286, i32 %287, i32 %288, ptr addrspace(1) %85, i1 true) #2, !dbg !29
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %289, i32 %290, i32 %291, i32 %292, ptr addrspace(1) %87, i1 true) #2, !dbg !29
  %293 = zext <4 x i1> %220 to <4 x i8>, !dbg !37
  %294 = bitcast <4 x i8> %293 to i32, !dbg !37
  %295 = zext <4 x i1> %236 to <4 x i8>, !dbg !37
  %296 = bitcast <4 x i8> %295 to i32, !dbg !37
  %297 = zext <4 x i1> %252 to <4 x i8>, !dbg !37
  %298 = bitcast <4 x i8> %297 to i32, !dbg !37
  %299 = zext <4 x i1> %268 to <4 x i8>, !dbg !37
  %300 = bitcast <4 x i8> %299 to i32, !dbg !37
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %294, i32 %296, i32 %298, i32 %300, ptr addrspace(1) %212, i1 true) #2, !dbg !37
  ret void, !dbg !38
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cwqqzzpfa5helhxcoj4gcfjvzgvkqsbrzzkr5z32plkussuz2ch6.py", directory: "inductor_cache/wq")
!4 = !{ptr @triton_poi_fused_relu_threshold_backward_8, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_relu_threshold_backward_8, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_relu_threshold_backward_8", linkageName: "triton_poi_fused_relu_threshold_backward_8", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 30, column: 19, scope: !7)
!19 = !DILocation(line: 29, column: 19, scope: !7)
!20 = !DILocation(line: 32, column: 40, scope: !7)
!21 = !DILocation(line: 32, column: 53, scope: !7)
!22 = !DILocation(line: 32, column: 35, scope: !7)
!23 = !DILocation(line: 32, column: 45, scope: !7)
!24 = !DILocation(line: 32, column: 30, scope: !7)
!25 = !DILocation(line: 32, column: 58, scope: !7)
!26 = !DILocation(line: 37, column: 35, scope: !7)
!27 = !DILocation(line: 37, column: 30, scope: !7)
!28 = !DILocation(line: 37, column: 25, scope: !7)
!29 = !DILocation(line: 37, column: 46, scope: !7)
!30 = !DILocation(line: 38, column: 25, scope: !7)
!31 = !DILocation(line: 118, column: 15, scope: !32, inlinedAt: !34)
!32 = distinct !DILexicalBlockFile(scope: !7, file: !33, discriminator: 0)
!33 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!34 = !DILocation(line: 34, column: 40, scope: !7)
!35 = !DILocation(line: 121, column: 29, scope: !32, inlinedAt: !34)
!36 = !DILocation(line: 36, column: 19, scope: !7)
!37 = !DILocation(line: 38, column: 59, scope: !7)
!38 = !DILocation(line: 38, column: 4, scope: !7)
