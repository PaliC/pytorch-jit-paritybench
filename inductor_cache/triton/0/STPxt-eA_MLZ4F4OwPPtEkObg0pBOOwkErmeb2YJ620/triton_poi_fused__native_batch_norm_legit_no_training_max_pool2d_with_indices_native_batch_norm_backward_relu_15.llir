; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_max_pool2d_with_indices_native_batch_norm_backward_relu_15(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %11 = shl i32 %10, 8, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = shl i32 %12, 1, !dbg !12
  %14 = and i32 %13, 254, !dbg !12
  %15 = or disjoint i32 %11, %14, !dbg !13
  %16 = or disjoint i32 %11, 1, !dbg !13
  %17 = icmp slt i32 %15, 1088, !dbg !14
  %18 = srem i32 %16, 2, !dbg !15
  %19 = sdiv i32 %15, 4, !dbg !16
  %20 = srem i32 %19, 68, !dbg !17
  %21 = shl nsw i32 %18, 1, !dbg !18
  %22 = shl i32 %15, 2, !dbg !19
  %23 = add i32 %21, %22, !dbg !20
  %24 = sext i32 %22 to i64, !dbg !21
  %25 = getelementptr float, ptr addrspace(1) %0, i64 %24, !dbg !21
  %26 = sext i32 %23 to i64, !dbg !21
  %27 = getelementptr float, ptr addrspace(1) %0, i64 %26, !dbg !21
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 %17) #3, !dbg !22
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 %17) #3, !dbg !22
  %30 = or disjoint i32 %22, 1, !dbg !23
  %31 = or disjoint i32 %23, 1, !dbg !23
  %32 = sext i32 %30 to i64, !dbg !24
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !24
  %34 = sext i32 %31 to i64, !dbg !24
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !24
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 %17) #3, !dbg !25
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 %17) #3, !dbg !25
  %38 = or disjoint i32 %22, 4, !dbg !26
  %39 = add i32 %23, 4, !dbg !26
  %40 = sext i32 %38 to i64, !dbg !27
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !27
  %42 = sext i32 %39 to i64, !dbg !27
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !27
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 %17) #3, !dbg !28
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 %17) #3, !dbg !28
  %46 = or disjoint i32 %22, 5, !dbg !29
  %47 = add i32 %23, 5, !dbg !29
  %48 = sext i32 %46 to i64, !dbg !30
  %49 = getelementptr float, ptr addrspace(1) %0, i64 %48, !dbg !30
  %50 = sext i32 %47 to i64, !dbg !30
  %51 = getelementptr float, ptr addrspace(1) %0, i64 %50, !dbg !30
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 %17) #3, !dbg !31
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 %17) #3, !dbg !31
  %54 = sext i32 %20 to i64, !dbg !32
  %55 = getelementptr float, ptr addrspace(1) %1, i64 %54, !dbg !32
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 %17) #3, !dbg !33
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 %17) #3, !dbg !33
  %58 = getelementptr float, ptr addrspace(1) %2, i64 %54, !dbg !34
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %17) #3, !dbg !35
  %60 = bitcast i32 %59 to float, !dbg !35
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %17) #3, !dbg !35
  %62 = bitcast i32 %61 to float, !dbg !35
  %63 = getelementptr float, ptr addrspace(1) %3, i64 %54, !dbg !36
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 %17) #3, !dbg !37
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 %17) #3, !dbg !37
  %66 = getelementptr float, ptr addrspace(1) %4, i64 %54, !dbg !38
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 %17) #3, !dbg !39
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 %17) #3, !dbg !39
  %69 = fadd float %60, 0x3EE4F8B580000000, !dbg !40
  %70 = fadd float %62, 0x3EE4F8B580000000, !dbg !40
  %71 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !41
  %.not.i = icmp eq i32 %71, 0, !dbg !41
  %72 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !41
  %.not1.i = icmp eq i32 %72, 0, !dbg !41
  br i1 %.not.i, label %78, label %73, !dbg !41

73:                                               ; preds = %9
  br i1 %.not1.i, label %76, label %74, !dbg !41

74:                                               ; preds = %73
  %75 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %69) #3, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

76:                                               ; preds = %73
  %77 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %69) #3, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

78:                                               ; preds = %9
  br i1 %.not1.i, label %81, label %79, !dbg !41

79:                                               ; preds = %78
  %80 = tail call float @llvm.nvvm.sqrt.rn.f(float %69) #3, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

81:                                               ; preds = %78
  %82 = tail call float @llvm.nvvm.sqrt.approx.f(float %69) #3, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

__nv_sqrtf.exit:                                  ; preds = %74, %76, %79, %81
  %.0.i = phi float [ %75, %74 ], [ %77, %76 ], [ %80, %79 ], [ %82, %81 ], !dbg !41
  %83 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !41
  %.not.i1 = icmp eq i32 %83, 0, !dbg !41
  %84 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !41
  %.not1.i4 = icmp eq i32 %84, 0, !dbg !41
  br i1 %.not.i1, label %90, label %85, !dbg !41

85:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %88, label %86, !dbg !41

86:                                               ; preds = %85
  %87 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %70) #3, !dbg !41
  br label %__nv_sqrtf.exit5, !dbg !41

88:                                               ; preds = %85
  %89 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %70) #3, !dbg !41
  br label %__nv_sqrtf.exit5, !dbg !41

90:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %93, label %91, !dbg !41

91:                                               ; preds = %90
  %92 = tail call float @llvm.nvvm.sqrt.rn.f(float %70) #3, !dbg !41
  br label %__nv_sqrtf.exit5, !dbg !41

93:                                               ; preds = %90
  %94 = tail call float @llvm.nvvm.sqrt.approx.f(float %70) #3, !dbg !41
  br label %__nv_sqrtf.exit5, !dbg !41

__nv_sqrtf.exit5:                                 ; preds = %86, %88, %91, %93
  %.0.i3 = phi float [ %87, %86 ], [ %89, %88 ], [ %92, %91 ], [ %94, %93 ], !dbg !41
  %95 = insertelement <2 x i32> poison, i32 %36, i64 0, !dbg !25
  %96 = insertelement <2 x i32> %95, i32 %37, i64 1, !dbg !25
  %97 = bitcast <2 x i32> %96 to <2 x float>, !dbg !25
  %98 = insertelement <2 x i32> poison, i32 %28, i64 0, !dbg !22
  %99 = insertelement <2 x i32> %98, i32 %29, i64 1, !dbg !22
  %100 = bitcast <2 x i32> %99 to <2 x float>, !dbg !22
  %101 = insertelement <2 x i32> poison, i32 %44, i64 0, !dbg !28
  %102 = insertelement <2 x i32> %101, i32 %45, i64 1, !dbg !28
  %103 = bitcast <2 x i32> %102 to <2 x float>, !dbg !28
  %104 = insertelement <2 x i32> poison, i32 %52, i64 0, !dbg !31
  %105 = insertelement <2 x i32> %104, i32 %53, i64 1, !dbg !31
  %106 = bitcast <2 x i32> %105 to <2 x float>, !dbg !31
  %107 = bitcast i32 %53 to float, !dbg !42
  %108 = fcmp uno float %107, 0.000000e+00, !dbg !42
  %109 = bitcast i32 %57 to float, !dbg !33
  %110 = bitcast i32 %52 to float, !dbg !42
  %111 = fcmp uno float %110, 0.000000e+00, !dbg !42
  %112 = bitcast i32 %56 to float, !dbg !33
  %113 = fcmp ogt <2 x float> %97, %100, !dbg !46
  %114 = fcmp uno <2 x float> %97, zeroinitializer, !dbg !47
  %115 = or <2 x i1> %113, %114, !dbg !49
  %.v = select <2 x i1> %115, <2 x i32> %96, <2 x i32> %99, !dbg !50
  %116 = bitcast <2 x i32> %.v to <2 x float>, !dbg !50
  %117 = fcmp olt <2 x float> %116, %103, !dbg !51
  %118 = fcmp uno <2 x float> %103, zeroinitializer, !dbg !52
  %119 = or <2 x i1> %118, %117, !dbg !54
  %.v6 = select <2 x i1> %119, <2 x i32> %102, <2 x i32> %.v, !dbg !55
  %120 = bitcast <2 x i32> %.v6 to <2 x float>, !dbg !55
  %121 = fcmp olt <2 x float> %120, %106, !dbg !56
  %122 = extractelement <2 x i1> %121, i64 1, !dbg !57
  %123 = or i1 %108, %122, !dbg !57
  %124 = extractelement <2 x float> %120, i64 1, !dbg !58
  %125 = select i1 %123, float %107, float %124, !dbg !58
  %126 = fsub float %125, %109, !dbg !59
  %127 = extractelement <2 x i1> %121, i64 0, !dbg !57
  %128 = or i1 %111, %127, !dbg !57
  %129 = extractelement <2 x float> %120, i64 0, !dbg !58
  %130 = select i1 %128, float %110, float %129, !dbg !58
  %131 = fsub float %130, %112, !dbg !59
  %132 = zext <2 x i1> %113 to <2 x i8>, !dbg !60
  %133 = select <2 x i1> %117, <2 x i8> splat (i8 2), <2 x i8> %132, !dbg !61
  %134 = select <2 x i1> %121, <2 x i8> splat (i8 3), <2 x i8> %133, !dbg !62
  %135 = bitcast i32 %68 to float, !dbg !39
  %136 = bitcast i32 %67 to float, !dbg !39
  %137 = bitcast i32 %65 to float, !dbg !37
  %138 = bitcast i32 %64 to float, !dbg !37
  %139 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !63
  %140 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !63
  %141 = fmul float %131, %139, !dbg !64
  %142 = fmul float %126, %140, !dbg !64
  %143 = fmul float %141, %138, !dbg !65
  %144 = fmul float %142, %137, !dbg !65
  %145 = fadd float %143, %136, !dbg !66
  %146 = fadd float %144, %135, !dbg !66
  %147 = fcmp olt float %145, 0.000000e+00, !dbg !67
  %148 = fcmp olt float %146, 0.000000e+00, !dbg !67
  %149 = select i1 %147, float 0.000000e+00, float %145, !dbg !69
  %150 = select i1 %148, float 0.000000e+00, float %146, !dbg !69
  %151 = sext i32 %15 to i64, !dbg !70
  %152 = getelementptr i8, ptr addrspace(1) %5, i64 %151, !dbg !70
  %153 = bitcast <2 x i8> %134 to i16, !dbg !71
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %153, ptr addrspace(1) %152, i1 %17) #3, !dbg !71
  %154 = getelementptr float, ptr addrspace(1) %6, i64 %151, !dbg !72
  %155 = bitcast float %149 to i32, !dbg !73
  %156 = bitcast float %150 to i32, !dbg !73
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %155, i32 %156, ptr addrspace(1) %154, i1 %17) #3, !dbg !73
  %157 = getelementptr float, ptr addrspace(1) %7, i64 %151, !dbg !74
  %158 = bitcast float %131 to i32, !dbg !75
  %159 = bitcast float %126 to i32, !dbg !75
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %158, i32 %159, ptr addrspace(1) %157, i1 %17) #3, !dbg !75
  ret void, !dbg !76
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cw2bbcutl3guxy2kkzgmrviw435z6p4g4mplemjivavnmbanpnbm.py", directory: "inductor_cache/w2")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_max_pool2d_with_indices_native_batch_norm_backward_relu_15, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_max_pool2d_with_indices_native_batch_norm_backward_relu_15, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_max_pool2d_with_indices_native_batch_norm_backward_relu_15", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_max_pool2d_with_indices_native_batch_norm_backward_relu_15", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 27, column: 21, scope: !7)
!17 = !DILocation(line: 27, column: 26, scope: !7)
!18 = !DILocation(line: 28, column: 32, scope: !7)
!19 = !DILocation(line: 28, column: 39, scope: !7)
!20 = !DILocation(line: 28, column: 37, scope: !7)
!21 = !DILocation(line: 28, column: 30, scope: !7)
!22 = !DILocation(line: 28, column: 44, scope: !7)
!23 = !DILocation(line: 29, column: 41, scope: !7)
!24 = !DILocation(line: 29, column: 30, scope: !7)
!25 = !DILocation(line: 29, column: 48, scope: !7)
!26 = !DILocation(line: 30, column: 41, scope: !7)
!27 = !DILocation(line: 30, column: 30, scope: !7)
!28 = !DILocation(line: 30, column: 48, scope: !7)
!29 = !DILocation(line: 31, column: 42, scope: !7)
!30 = !DILocation(line: 31, column: 31, scope: !7)
!31 = !DILocation(line: 31, column: 49, scope: !7)
!32 = !DILocation(line: 32, column: 31, scope: !7)
!33 = !DILocation(line: 32, column: 36, scope: !7)
!34 = !DILocation(line: 33, column: 31, scope: !7)
!35 = !DILocation(line: 33, column: 36, scope: !7)
!36 = !DILocation(line: 34, column: 31, scope: !7)
!37 = !DILocation(line: 34, column: 36, scope: !7)
!38 = !DILocation(line: 35, column: 31, scope: !7)
!39 = !DILocation(line: 35, column: 36, scope: !7)
!40 = !DILocation(line: 51, column: 20, scope: !7)
!41 = !DILocation(line: 52, column: 27, scope: !7)
!42 = !DILocation(line: 120, column: 21, scope: !43, inlinedAt: !45)
!43 = distinct !DILexicalBlockFile(scope: !7, file: !44, discriminator: 0)
!44 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!45 = !DILocation(line: 48, column: 42, scope: !7)
!46 = !DILocation(line: 36, column: 18, scope: !7)
!47 = !DILocation(line: 120, column: 21, scope: !43, inlinedAt: !48)
!48 = !DILocation(line: 40, column: 40, scope: !7)
!49 = !DILocation(line: 120, column: 16, scope: !43, inlinedAt: !48)
!50 = !DILocation(line: 121, column: 29, scope: !43, inlinedAt: !48)
!51 = !DILocation(line: 41, column: 18, scope: !7)
!52 = !DILocation(line: 120, column: 21, scope: !43, inlinedAt: !53)
!53 = !DILocation(line: 44, column: 41, scope: !7)
!54 = !DILocation(line: 120, column: 16, scope: !43, inlinedAt: !53)
!55 = !DILocation(line: 121, column: 29, scope: !43, inlinedAt: !53)
!56 = !DILocation(line: 45, column: 20, scope: !7)
!57 = !DILocation(line: 120, column: 16, scope: !43, inlinedAt: !45)
!58 = !DILocation(line: 121, column: 29, scope: !43, inlinedAt: !45)
!59 = !DILocation(line: 49, column: 20, scope: !7)
!60 = !DILocation(line: 39, column: 32, scope: !7)
!61 = !DILocation(line: 43, column: 33, scope: !7)
!62 = !DILocation(line: 47, column: 35, scope: !7)
!63 = !DILocation(line: 54, column: 20, scope: !7)
!64 = !DILocation(line: 57, column: 20, scope: !7)
!65 = !DILocation(line: 58, column: 20, scope: !7)
!66 = !DILocation(line: 59, column: 20, scope: !7)
!67 = !DILocation(line: 118, column: 15, scope: !43, inlinedAt: !68)
!68 = !DILocation(line: 61, column: 42, scope: !7)
!69 = !DILocation(line: 121, column: 29, scope: !43, inlinedAt: !68)
!70 = !DILocation(line: 62, column: 25, scope: !7)
!71 = !DILocation(line: 62, column: 37, scope: !7)
!72 = !DILocation(line: 63, column: 25, scope: !7)
!73 = !DILocation(line: 63, column: 37, scope: !7)
!74 = !DILocation(line: 64, column: 25, scope: !7)
!75 = !DILocation(line: 64, column: 37, scope: !7)
!76 = !DILocation(line: 64, column: 4, scope: !7)
