; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_add_mul_relu_sigmoid_19(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %9 = shl i32 %8, 10, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 2, !dbg !12
  %12 = and i32 %11, 508, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %14 = or disjoint i32 %13, 512, !dbg !13
  %15 = sdiv i32 %13, 256, !dbg !14
  %16 = sdiv i32 %14, 256, !dbg !14
  %17 = sext i32 %13 to i64, !dbg !15
  %18 = getelementptr float, ptr addrspace(1) %0, i64 %17, !dbg !15
  %19 = sext i32 %14 to i64, !dbg !15
  %20 = getelementptr float, ptr addrspace(1) %0, i64 %19, !dbg !15
  %21 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %18, i1 true) #1, !dbg !16
  %22 = extractvalue { i32, i32, i32, i32 } %21, 0, !dbg !16
  %23 = extractvalue { i32, i32, i32, i32 } %21, 1, !dbg !16
  %24 = extractvalue { i32, i32, i32, i32 } %21, 2, !dbg !16
  %25 = extractvalue { i32, i32, i32, i32 } %21, 3, !dbg !16
  %26 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %20, i1 true) #1, !dbg !16
  %27 = extractvalue { i32, i32, i32, i32 } %26, 0, !dbg !16
  %28 = extractvalue { i32, i32, i32, i32 } %26, 1, !dbg !16
  %29 = extractvalue { i32, i32, i32, i32 } %26, 2, !dbg !16
  %30 = extractvalue { i32, i32, i32, i32 } %26, 3, !dbg !16
  %31 = sext i32 %15 to i64, !dbg !17
  %32 = getelementptr float, ptr addrspace(1) %1, i64 %31, !dbg !17
  %33 = sext i32 %16 to i64, !dbg !17
  %34 = getelementptr float, ptr addrspace(1) %1, i64 %33, !dbg !17
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #1, !dbg !18
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #1, !dbg !18
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #1, !dbg !18
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #1, !dbg !18
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #1, !dbg !18
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #1, !dbg !18
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #1, !dbg !18
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #1, !dbg !18
  %43 = getelementptr float, ptr addrspace(1) %2, i64 %31, !dbg !19
  %44 = getelementptr float, ptr addrspace(1) %2, i64 %33, !dbg !19
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 true) #1, !dbg !20
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 true) #1, !dbg !20
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 true) #1, !dbg !20
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 true) #1, !dbg !20
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 true) #1, !dbg !20
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 true) #1, !dbg !20
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 true) #1, !dbg !20
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 true) #1, !dbg !20
  %53 = getelementptr float, ptr addrspace(1) %3, i64 %31, !dbg !21
  %54 = getelementptr float, ptr addrspace(1) %3, i64 %33, !dbg !21
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 true) #1, !dbg !22
  %56 = bitcast i32 %55 to float, !dbg !22
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 true) #1, !dbg !22
  %58 = bitcast i32 %57 to float, !dbg !22
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 true) #1, !dbg !22
  %60 = bitcast i32 %59 to float, !dbg !22
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 true) #1, !dbg !22
  %62 = bitcast i32 %61 to float, !dbg !22
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 true) #1, !dbg !22
  %64 = bitcast i32 %63 to float, !dbg !22
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 true) #1, !dbg !22
  %66 = bitcast i32 %65 to float, !dbg !22
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 true) #1, !dbg !22
  %68 = bitcast i32 %67 to float, !dbg !22
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 true) #1, !dbg !22
  %70 = bitcast i32 %69 to float, !dbg !22
  %71 = getelementptr float, ptr addrspace(1) %4, i64 %17, !dbg !23
  %72 = getelementptr float, ptr addrspace(1) %4, i64 %19, !dbg !23
  %73 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %71, i1 true) #1, !dbg !24
  %74 = extractvalue { i32, i32, i32, i32 } %73, 0, !dbg !24
  %75 = extractvalue { i32, i32, i32, i32 } %73, 1, !dbg !24
  %76 = extractvalue { i32, i32, i32, i32 } %73, 2, !dbg !24
  %77 = extractvalue { i32, i32, i32, i32 } %73, 3, !dbg !24
  %78 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %72, i1 true) #1, !dbg !24
  %79 = extractvalue { i32, i32, i32, i32 } %78, 0, !dbg !24
  %80 = extractvalue { i32, i32, i32, i32 } %78, 1, !dbg !24
  %81 = extractvalue { i32, i32, i32, i32 } %78, 2, !dbg !24
  %82 = extractvalue { i32, i32, i32, i32 } %78, 3, !dbg !24
  %83 = fsub float 0.000000e+00, %56, !dbg !25
  %84 = fsub float 0.000000e+00, %58, !dbg !25
  %85 = fsub float 0.000000e+00, %60, !dbg !25
  %86 = fsub float 0.000000e+00, %62, !dbg !25
  %87 = fsub float 0.000000e+00, %64, !dbg !25
  %88 = fsub float 0.000000e+00, %66, !dbg !25
  %89 = fsub float 0.000000e+00, %68, !dbg !25
  %90 = fsub float 0.000000e+00, %70, !dbg !25
  %91 = fmul float %83, 0x3FF7154760000000, !dbg !29
  %92 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %91) #1, !dbg !29
  %93 = fmul float %84, 0x3FF7154760000000, !dbg !29
  %94 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %93) #1, !dbg !29
  %95 = fmul float %85, 0x3FF7154760000000, !dbg !29
  %96 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %95) #1, !dbg !29
  %97 = fmul float %86, 0x3FF7154760000000, !dbg !29
  %98 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %97) #1, !dbg !29
  %99 = fmul float %87, 0x3FF7154760000000, !dbg !29
  %100 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %99) #1, !dbg !29
  %101 = fmul float %88, 0x3FF7154760000000, !dbg !29
  %102 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %101) #1, !dbg !29
  %103 = fmul float %89, 0x3FF7154760000000, !dbg !29
  %104 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %103) #1, !dbg !29
  %105 = fmul float %90, 0x3FF7154760000000, !dbg !29
  %106 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %105) #1, !dbg !29
  %107 = fadd float %92, 1.000000e+00, !dbg !30
  %108 = fadd float %94, 1.000000e+00, !dbg !30
  %109 = fadd float %96, 1.000000e+00, !dbg !30
  %110 = fadd float %98, 1.000000e+00, !dbg !30
  %111 = fadd float %100, 1.000000e+00, !dbg !30
  %112 = fadd float %102, 1.000000e+00, !dbg !30
  %113 = fadd float %104, 1.000000e+00, !dbg !30
  %114 = fadd float %106, 1.000000e+00, !dbg !30
  %115 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %107) #1, !dbg !31
  %116 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %108) #1, !dbg !31
  %117 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %109) #1, !dbg !31
  %118 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %110) #1, !dbg !31
  %119 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %111) #1, !dbg !31
  %120 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %112) #1, !dbg !31
  %121 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %113) #1, !dbg !31
  %122 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %114) #1, !dbg !31
  %123 = insertelement <8 x i32> poison, i32 %30, i64 0, !dbg !16
  %124 = insertelement <8 x i32> %123, i32 %29, i64 1, !dbg !16
  %125 = insertelement <8 x i32> %124, i32 %28, i64 2, !dbg !16
  %126 = insertelement <8 x i32> %125, i32 %27, i64 3, !dbg !16
  %127 = insertelement <8 x i32> %126, i32 %25, i64 4, !dbg !16
  %128 = insertelement <8 x i32> %127, i32 %24, i64 5, !dbg !16
  %129 = insertelement <8 x i32> %128, i32 %23, i64 6, !dbg !16
  %130 = insertelement <8 x i32> %129, i32 %22, i64 7, !dbg !16
  %131 = bitcast <8 x i32> %130 to <8 x float>, !dbg !16
  %132 = insertelement <8 x i32> poison, i32 %42, i64 0, !dbg !18
  %133 = insertelement <8 x i32> %132, i32 %41, i64 1, !dbg !18
  %134 = insertelement <8 x i32> %133, i32 %40, i64 2, !dbg !18
  %135 = insertelement <8 x i32> %134, i32 %39, i64 3, !dbg !18
  %136 = insertelement <8 x i32> %135, i32 %38, i64 4, !dbg !18
  %137 = insertelement <8 x i32> %136, i32 %37, i64 5, !dbg !18
  %138 = insertelement <8 x i32> %137, i32 %36, i64 6, !dbg !18
  %139 = insertelement <8 x i32> %138, i32 %35, i64 7, !dbg !18
  %140 = bitcast <8 x i32> %139 to <8 x float>, !dbg !18
  %141 = insertelement <8 x i32> poison, i32 %52, i64 0, !dbg !20
  %142 = insertelement <8 x i32> %141, i32 %51, i64 1, !dbg !20
  %143 = insertelement <8 x i32> %142, i32 %50, i64 2, !dbg !20
  %144 = insertelement <8 x i32> %143, i32 %49, i64 3, !dbg !20
  %145 = insertelement <8 x i32> %144, i32 %48, i64 4, !dbg !20
  %146 = insertelement <8 x i32> %145, i32 %47, i64 5, !dbg !20
  %147 = insertelement <8 x i32> %146, i32 %46, i64 6, !dbg !20
  %148 = insertelement <8 x i32> %147, i32 %45, i64 7, !dbg !20
  %149 = bitcast <8 x i32> %148 to <8 x float>, !dbg !20
  %150 = insertelement <8 x i32> poison, i32 %82, i64 0, !dbg !24
  %151 = insertelement <8 x i32> %150, i32 %81, i64 1, !dbg !24
  %152 = insertelement <8 x i32> %151, i32 %80, i64 2, !dbg !24
  %153 = insertelement <8 x i32> %152, i32 %79, i64 3, !dbg !24
  %154 = insertelement <8 x i32> %153, i32 %77, i64 4, !dbg !24
  %155 = insertelement <8 x i32> %154, i32 %76, i64 5, !dbg !24
  %156 = insertelement <8 x i32> %155, i32 %75, i64 6, !dbg !24
  %157 = insertelement <8 x i32> %156, i32 %74, i64 7, !dbg !24
  %158 = bitcast <8 x i32> %157 to <8 x float>, !dbg !24
  %159 = fsub <8 x float> %131, %140, !dbg !32
  %160 = fmul <8 x float> %159, %149, !dbg !33
  %161 = insertelement <8 x float> poison, float %122, i64 0, !dbg !34
  %162 = insertelement <8 x float> %161, float %121, i64 1, !dbg !34
  %163 = insertelement <8 x float> %162, float %120, i64 2, !dbg !34
  %164 = insertelement <8 x float> %163, float %119, i64 3, !dbg !34
  %165 = insertelement <8 x float> %164, float %118, i64 4, !dbg !34
  %166 = insertelement <8 x float> %165, float %117, i64 5, !dbg !34
  %167 = insertelement <8 x float> %166, float %116, i64 6, !dbg !34
  %168 = insertelement <8 x float> %167, float %115, i64 7, !dbg !34
  %169 = fmul <8 x float> %160, %168, !dbg !34
  %170 = fadd <8 x float> %169, %158, !dbg !35
  %171 = fcmp olt <8 x float> %170, zeroinitializer, !dbg !36
  %172 = extractelement <8 x i1> %171, i64 7, !dbg !40
  %173 = extractelement <8 x i1> %171, i64 6, !dbg !40
  %174 = extractelement <8 x i1> %171, i64 5, !dbg !40
  %175 = extractelement <8 x i1> %171, i64 4, !dbg !40
  %176 = extractelement <8 x i1> %171, i64 3, !dbg !40
  %177 = extractelement <8 x i1> %171, i64 2, !dbg !40
  %178 = extractelement <8 x i1> %171, i64 1, !dbg !40
  %179 = extractelement <8 x i1> %171, i64 0, !dbg !40
  %180 = getelementptr float, ptr addrspace(1) %5, i64 %17, !dbg !41
  %181 = getelementptr float, ptr addrspace(1) %5, i64 %19, !dbg !41
  %bc = bitcast <8 x float> %170 to <8 x i32>, !dbg !42
  %182 = extractelement <8 x i32> %bc, i64 7, !dbg !42
  %183 = select i1 %172, i32 0, i32 %182, !dbg !40
  %bc1 = bitcast <8 x float> %170 to <8 x i32>, !dbg !42
  %184 = extractelement <8 x i32> %bc1, i64 6, !dbg !42
  %185 = select i1 %173, i32 0, i32 %184, !dbg !40
  %bc2 = bitcast <8 x float> %170 to <8 x i32>, !dbg !42
  %186 = extractelement <8 x i32> %bc2, i64 5, !dbg !42
  %187 = select i1 %174, i32 0, i32 %186, !dbg !40
  %bc3 = bitcast <8 x float> %170 to <8 x i32>, !dbg !42
  %188 = extractelement <8 x i32> %bc3, i64 4, !dbg !42
  %189 = select i1 %175, i32 0, i32 %188, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %183, i32 %185, i32 %187, i32 %189, ptr addrspace(1) %180, i1 true) #1, !dbg !42
  %bc4 = bitcast <8 x float> %170 to <8 x i32>, !dbg !42
  %190 = extractelement <8 x i32> %bc4, i64 3, !dbg !42
  %191 = select i1 %176, i32 0, i32 %190, !dbg !40
  %bc5 = bitcast <8 x float> %170 to <8 x i32>, !dbg !42
  %192 = extractelement <8 x i32> %bc5, i64 2, !dbg !42
  %193 = select i1 %177, i32 0, i32 %192, !dbg !40
  %bc6 = bitcast <8 x float> %170 to <8 x i32>, !dbg !42
  %194 = extractelement <8 x i32> %bc6, i64 1, !dbg !42
  %195 = select i1 %178, i32 0, i32 %194, !dbg !40
  %bc7 = bitcast <8 x float> %170 to <8 x i32>, !dbg !42
  %196 = extractelement <8 x i32> %bc7, i64 0, !dbg !42
  %197 = select i1 %179, i32 0, i32 %196, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %191, i32 %193, i32 %195, i32 %197, ptr addrspace(1) %181, i1 true) #1, !dbg !42
  ret void, !dbg !43
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cqqtsaleieeh4ld3ayvvtnvysycguceutx24kl7m5fqcxpdraxtd.py", directory: "inductor_cache/qq")
!4 = !{ptr @triton_poi_fused_add_mul_relu_sigmoid_19, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_mul_relu_sigmoid_19, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_mul_relu_sigmoid_19", linkageName: "triton_poi_fused_add_mul_relu_sigmoid_19", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 30, scope: !7)
!16 = !DILocation(line: 26, column: 35, scope: !7)
!17 = !DILocation(line: 27, column: 30, scope: !7)
!18 = !DILocation(line: 27, column: 35, scope: !7)
!19 = !DILocation(line: 28, column: 30, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 29, column: 30, scope: !7)
!22 = !DILocation(line: 29, column: 35, scope: !7)
!23 = !DILocation(line: 30, column: 30, scope: !7)
!24 = !DILocation(line: 30, column: 35, scope: !7)
!25 = !DILocation(line: 47, column: 30, scope: !26, inlinedAt: !28)
!26 = distinct !DILexicalBlockFile(scope: !7, file: !27, discriminator: 0)
!27 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!28 = !DILocation(line: 33, column: 22, scope: !7)
!29 = !DILocation(line: 47, column: 29, scope: !26, inlinedAt: !28)
!30 = !DILocation(line: 47, column: 20, scope: !26, inlinedAt: !28)
!31 = !DILocation(line: 47, column: 16, scope: !26, inlinedAt: !28)
!32 = !DILocation(line: 31, column: 18, scope: !7)
!33 = !DILocation(line: 32, column: 18, scope: !7)
!34 = !DILocation(line: 34, column: 18, scope: !7)
!35 = !DILocation(line: 35, column: 18, scope: !7)
!36 = !DILocation(line: 118, column: 15, scope: !37, inlinedAt: !39)
!37 = distinct !DILexicalBlockFile(scope: !7, file: !38, discriminator: 0)
!38 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!39 = !DILocation(line: 37, column: 42, scope: !7)
!40 = !DILocation(line: 121, column: 29, scope: !37, inlinedAt: !39)
!41 = !DILocation(line: 38, column: 25, scope: !7)
!42 = !DILocation(line: 38, column: 37, scope: !7)
!43 = !DILocation(line: 38, column: 4, scope: !7)
