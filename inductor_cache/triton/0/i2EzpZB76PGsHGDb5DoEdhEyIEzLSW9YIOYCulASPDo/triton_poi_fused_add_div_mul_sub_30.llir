; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_add_div_mul_sub_30(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %10 = shl i32 %9, 6, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = lshr i32 %11, 2, !dbg !12
  %13 = and i32 %12, 31, !dbg !12
  %14 = shl i32 %11, 2, !dbg !12
  %15 = and i32 %14, 12, !dbg !12
  %16 = and i32 %14, 60, !dbg !12
  %17 = or disjoint i32 %10, %13, !dbg !13
  %18 = or disjoint i32 %17, 32, !dbg !13
  %19 = or disjoint i32 %10, %16, !dbg !13
  %20 = icmp slt i32 %17, 1536, !dbg !14
  %21 = icmp slt i32 %18, 1536, !dbg !14
  %22 = icmp slt i32 %19, 1536, !dbg !14
  %23 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %24 = shl i32 %23, 4, !dbg !16
  %25 = lshr i32 %11, 4, !dbg !17
  %26 = and i32 %25, 7, !dbg !17
  %27 = or disjoint i32 %24, %15, !dbg !18
  %28 = or disjoint i32 %24, %26, !dbg !18
  %29 = or disjoint i32 %28, 8, !dbg !18
  %30 = icmp slt i32 %27, 16, !dbg !19
  %31 = icmp slt i32 %28, 16, !dbg !19
  %32 = icmp slt i32 %29, 16, !dbg !19
  %.frozen = freeze i32 %17, !dbg !20
  %33 = sdiv i32 %.frozen, 384, !dbg !20
  %34 = mul i32 %33, 384, !dbg !21
  %.decomposed = sub i32 %.frozen, %34, !dbg !21
  %.frozen17 = freeze i32 %18, !dbg !20
  %35 = sdiv i32 %.frozen17, 384, !dbg !20
  %36 = mul i32 %35, 384, !dbg !21
  %.decomposed18 = sub i32 %.frozen17, %36, !dbg !21
  %.frozen19 = freeze i32 %19, !dbg !20
  %37 = sdiv i32 %.frozen19, 384, !dbg !20
  %38 = mul i32 %37, 384, !dbg !21
  %.decomposed20 = sub i32 %.frozen19, %38, !dbg !21
  %39 = sext i32 %.decomposed to i64, !dbg !22
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !22
  %41 = sext i32 %.decomposed18 to i64, !dbg !22
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !22
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 %20) #2, !dbg !23
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 %20) #2, !dbg !23
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 %20) #2, !dbg !23
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 %20) #2, !dbg !23
  %47 = bitcast i32 %46 to float, !dbg !23
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 %21) #2, !dbg !23
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 %21) #2, !dbg !23
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 %21) #2, !dbg !23
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 %21) #2, !dbg !23
  %52 = bitcast i32 %51 to float, !dbg !23
  %53 = shl i32 %17, 4, !dbg !24
  %54 = shl i32 %18, 4, !dbg !24
  %55 = add i32 %27, %53, !dbg !25
  %56 = add i32 %27, %54, !dbg !25
  %57 = sext i32 %55 to i64, !dbg !26
  %58 = getelementptr float, ptr addrspace(1) %1, i64 %57, !dbg !26
  %59 = sext i32 %56 to i64, !dbg !26
  %60 = getelementptr float, ptr addrspace(1) %1, i64 %59, !dbg !26
  %61 = and i1 %20, %30, !dbg !27
  %62 = and i1 %21, %30, !dbg !27
  %63 = and i1 %22, %31, !dbg !27
  %64 = and i1 %32, %22, !dbg !27
  %65 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %58, i1 %61) #2, !dbg !28
  %66 = extractvalue { i32, i32, i32, i32 } %65, 0, !dbg !28
  %67 = extractvalue { i32, i32, i32, i32 } %65, 1, !dbg !28
  %68 = extractvalue { i32, i32, i32, i32 } %65, 2, !dbg !28
  %69 = extractvalue { i32, i32, i32, i32 } %65, 3, !dbg !28
  %70 = bitcast i32 %66 to float, !dbg !28
  %71 = bitcast i32 %67 to float, !dbg !28
  %72 = bitcast i32 %68 to float, !dbg !28
  %73 = bitcast i32 %69 to float, !dbg !28
  %74 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %60, i1 %62) #2, !dbg !28
  %75 = extractvalue { i32, i32, i32, i32 } %74, 0, !dbg !28
  %76 = extractvalue { i32, i32, i32, i32 } %74, 1, !dbg !28
  %77 = extractvalue { i32, i32, i32, i32 } %74, 2, !dbg !28
  %78 = extractvalue { i32, i32, i32, i32 } %74, 3, !dbg !28
  %79 = bitcast i32 %75 to float, !dbg !28
  %80 = bitcast i32 %76 to float, !dbg !28
  %81 = bitcast i32 %77 to float, !dbg !28
  %82 = bitcast i32 %78 to float, !dbg !28
  %83 = shl nsw i32 %33, 4, !dbg !29
  %84 = shl nsw i32 %35, 4, !dbg !29
  %85 = add i32 %83, %27, !dbg !30
  %86 = add i32 %27, %84, !dbg !30
  %87 = sext i32 %85 to i64, !dbg !31
  %88 = getelementptr float, ptr addrspace(1) %2, i64 %87, !dbg !31
  %89 = sext i32 %86 to i64, !dbg !31
  %90 = getelementptr float, ptr addrspace(1) %2, i64 %89, !dbg !31
  %91 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %88, i1 %61) #2, !dbg !32
  %92 = extractvalue { i32, i32, i32, i32 } %91, 0, !dbg !32
  %93 = extractvalue { i32, i32, i32, i32 } %91, 1, !dbg !32
  %94 = extractvalue { i32, i32, i32, i32 } %91, 2, !dbg !32
  %95 = extractvalue { i32, i32, i32, i32 } %91, 3, !dbg !32
  %96 = bitcast i32 %92 to float, !dbg !32
  %97 = bitcast i32 %93 to float, !dbg !32
  %98 = bitcast i32 %94 to float, !dbg !32
  %99 = bitcast i32 %95 to float, !dbg !32
  %100 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %90, i1 %62) #2, !dbg !32
  %101 = extractvalue { i32, i32, i32, i32 } %100, 0, !dbg !32
  %102 = extractvalue { i32, i32, i32, i32 } %100, 1, !dbg !32
  %103 = extractvalue { i32, i32, i32, i32 } %100, 2, !dbg !32
  %104 = extractvalue { i32, i32, i32, i32 } %100, 3, !dbg !32
  %105 = bitcast i32 %101 to float, !dbg !32
  %106 = bitcast i32 %102 to float, !dbg !32
  %107 = bitcast i32 %103 to float, !dbg !32
  %108 = bitcast i32 %104 to float, !dbg !32
  %109 = getelementptr float, ptr addrspace(1) %3, i64 %87, !dbg !33
  %110 = getelementptr float, ptr addrspace(1) %3, i64 %89, !dbg !33
  %111 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %109, i1 %61) #2, !dbg !34
  %112 = extractvalue { i32, i32, i32, i32 } %111, 0, !dbg !34
  %113 = extractvalue { i32, i32, i32, i32 } %111, 1, !dbg !34
  %114 = extractvalue { i32, i32, i32, i32 } %111, 2, !dbg !34
  %115 = extractvalue { i32, i32, i32, i32 } %111, 3, !dbg !34
  %116 = bitcast i32 %112 to float, !dbg !34
  %117 = bitcast i32 %113 to float, !dbg !34
  %118 = bitcast i32 %114 to float, !dbg !34
  %119 = bitcast i32 %115 to float, !dbg !34
  %120 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %110, i1 %62) #2, !dbg !34
  %121 = extractvalue { i32, i32, i32, i32 } %120, 0, !dbg !34
  %122 = extractvalue { i32, i32, i32, i32 } %120, 1, !dbg !34
  %123 = extractvalue { i32, i32, i32, i32 } %120, 2, !dbg !34
  %124 = extractvalue { i32, i32, i32, i32 } %120, 3, !dbg !34
  %125 = bitcast i32 %121 to float, !dbg !34
  %126 = bitcast i32 %122 to float, !dbg !34
  %127 = bitcast i32 %123 to float, !dbg !34
  %128 = bitcast i32 %124 to float, !dbg !34
  %129 = getelementptr float, ptr addrspace(1) %4, i64 %39, !dbg !35
  %130 = getelementptr float, ptr addrspace(1) %4, i64 %41, !dbg !35
  %131 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %129, i1 %20) #2, !dbg !36
  %132 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %129, i1 %20) #2, !dbg !36
  %133 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %129, i1 %20) #2, !dbg !36
  %134 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %129, i1 %20) #2, !dbg !36
  %135 = bitcast i32 %134 to float, !dbg !36
  %136 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %130, i1 %21) #2, !dbg !36
  %137 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %130, i1 %21) #2, !dbg !36
  %138 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %130, i1 %21) #2, !dbg !36
  %139 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %130, i1 %21) #2, !dbg !36
  %140 = bitcast i32 %139 to float, !dbg !36
  %141 = fsub float %70, %96, !dbg !37
  %142 = fsub float %71, %97, !dbg !37
  %143 = fsub float %72, %98, !dbg !37
  %144 = fsub float %73, %99, !dbg !37
  %145 = fsub float %79, %105, !dbg !37
  %146 = fsub float %80, %106, !dbg !37
  %147 = fsub float %81, %107, !dbg !37
  %148 = fsub float %82, %108, !dbg !37
  %149 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %141, float %116) #2, !dbg !38
  %150 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %142, float %117) #2, !dbg !38
  %151 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %143, float %118) #2, !dbg !38
  %152 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %144, float %119) #2, !dbg !38
  %153 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %145, float %125) #2, !dbg !38
  %154 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %146, float %126) #2, !dbg !38
  %155 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %147, float %127) #2, !dbg !38
  %156 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %148, float %128) #2, !dbg !38
  %157 = fmul float %149, %47, !dbg !39
  %158 = fmul float %150, %47, !dbg !39
  %159 = fmul float %151, %47, !dbg !39
  %160 = fmul float %152, %47, !dbg !39
  %161 = fmul float %153, %52, !dbg !39
  %162 = fmul float %154, %52, !dbg !39
  %163 = fmul float %155, %52, !dbg !39
  %164 = fmul float %156, %52, !dbg !39
  %165 = fadd float %157, %135, !dbg !40
  %166 = fadd float %158, %135, !dbg !40
  %167 = fadd float %159, %135, !dbg !40
  %168 = fadd float %160, %135, !dbg !40
  %169 = fadd float %161, %140, !dbg !40
  %170 = fadd float %162, %140, !dbg !40
  %171 = fadd float %163, %140, !dbg !40
  %172 = fadd float %164, %140, !dbg !40
  %173 = mul i32 %28, 384, !dbg !41
  %174 = mul i32 %29, 384, !dbg !41
  %175 = mul i32 %37, 6144, !dbg !42
  %176 = add i32 %175, %.decomposed20, !dbg !43
  %177 = add i32 %176, %173, !dbg !44
  %178 = add i32 %176, %174, !dbg !44
  %179 = sext i32 %177 to i64, !dbg !45
  %180 = getelementptr float, ptr addrspace(1) %5, i64 %179, !dbg !45
  %181 = sext i32 %178 to i64, !dbg !45
  %182 = getelementptr float, ptr addrspace(1) %5, i64 %181, !dbg !45
  %183 = shl i32 %11, 8, !dbg !46
  %184 = and i32 %183, 768, !dbg !46
  %185 = or disjoint i32 %184, %13, !dbg !46
  %186 = and i32 %14, 508, !dbg !46
  %187 = lshr exact i32 %184, 2, !dbg !46
  %188 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %187, !dbg !46
  %189 = getelementptr float, ptr addrspace(3) %188, i32 %185, !dbg !46
  %190 = bitcast float %165 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %189, <1 x i32> %190, i1 true) #2, !dbg !46
  %191 = or disjoint i32 %185, 64, !dbg !46
  %192 = lshr i32 %191, 4, !dbg !46
  %193 = and i32 %192, 52, !dbg !46
  %194 = getelementptr float, ptr addrspace(3) @global_smem, i32 %193, !dbg !46
  %195 = getelementptr float, ptr addrspace(3) %194, i32 %191, !dbg !46
  %196 = bitcast float %166 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %195, <1 x i32> %196, i1 true) #2, !dbg !46
  %197 = or disjoint i32 %185, 128, !dbg !46
  %198 = lshr i32 %197, 4, !dbg !46
  %199 = and i32 %198, 56, !dbg !46
  %200 = getelementptr float, ptr addrspace(3) @global_smem, i32 %199, !dbg !46
  %201 = getelementptr float, ptr addrspace(3) %200, i32 %197, !dbg !46
  %202 = bitcast float %167 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %201, <1 x i32> %202, i1 true) #2, !dbg !46
  %203 = or disjoint i32 %185, 192, !dbg !46
  %204 = lshr i32 %203, 4, !dbg !46
  %205 = and i32 %204, 60, !dbg !46
  %206 = getelementptr float, ptr addrspace(3) @global_smem, i32 %205, !dbg !46
  %207 = getelementptr float, ptr addrspace(3) %206, i32 %203, !dbg !46
  %208 = bitcast float %168 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %207, <1 x i32> %208, i1 true) #2, !dbg !46
  %209 = or disjoint i32 %185, 32, !dbg !46
  %210 = getelementptr float, ptr addrspace(3) %188, i32 %209, !dbg !46
  %211 = bitcast float %169 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %210, <1 x i32> %211, i1 true) #2, !dbg !46
  %212 = or disjoint i32 %185, 96, !dbg !46
  %213 = lshr i32 %212, 4, !dbg !46
  %214 = and i32 %213, 52, !dbg !46
  %215 = getelementptr float, ptr addrspace(3) @global_smem, i32 %214, !dbg !46
  %216 = getelementptr float, ptr addrspace(3) %215, i32 %212, !dbg !46
  %217 = bitcast float %170 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %216, <1 x i32> %217, i1 true) #2, !dbg !46
  %218 = or disjoint i32 %185, 160, !dbg !46
  %219 = lshr i32 %218, 4, !dbg !46
  %220 = and i32 %219, 56, !dbg !46
  %221 = getelementptr float, ptr addrspace(3) @global_smem, i32 %220, !dbg !46
  %222 = getelementptr float, ptr addrspace(3) %221, i32 %218, !dbg !46
  %223 = bitcast float %171 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %222, <1 x i32> %223, i1 true) #2, !dbg !46
  %224 = or disjoint i32 %185, 224, !dbg !46
  %225 = lshr i32 %224, 4, !dbg !46
  %226 = and i32 %225, 60, !dbg !46
  %227 = getelementptr float, ptr addrspace(3) @global_smem, i32 %226, !dbg !46
  %228 = getelementptr float, ptr addrspace(3) %227, i32 %224, !dbg !46
  %229 = bitcast float %172 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %228, <1 x i32> %229, i1 true) #2, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %230 = lshr i32 %14, 4, !dbg !46
  %231 = and i32 %230, 28, !dbg !46
  %232 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %231, !dbg !46
  %233 = getelementptr inbounds float, ptr addrspace(3) %232, i32 %186, !dbg !46
  %234 = or disjoint i32 %186, 512, !dbg !46
  %235 = lshr i32 %234, 4, !dbg !46
  %236 = and i32 %235, 60, !dbg !46
  %237 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %236, !dbg !46
  %238 = getelementptr inbounds float, ptr addrspace(3) %237, i32 %234, !dbg !46
  %239 = load <4 x i32>, ptr addrspace(3) %238, align 16, !dbg !46
  %.extract = load i32, ptr addrspace(3) %233, align 16, !dbg !46
  %240 = getelementptr inbounds i8, ptr addrspace(3) %233, i32 4, !dbg !46
  %.extract10 = load i32, ptr addrspace(3) %240, align 4, !dbg !46
  %241 = getelementptr inbounds i8, ptr addrspace(3) %233, i32 8, !dbg !46
  %.extract11 = load i32, ptr addrspace(3) %241, align 8, !dbg !46
  %242 = getelementptr inbounds i8, ptr addrspace(3) %233, i32 12, !dbg !46
  %.extract12 = load i32, ptr addrspace(3) %242, align 4, !dbg !46
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract10, i32 %.extract11, i32 %.extract12, ptr addrspace(1) %180, i1 %63) #2, !dbg !46
  %.extract13 = extractelement <4 x i32> %239, i64 0, !dbg !46
  %.extract14 = extractelement <4 x i32> %239, i64 1, !dbg !46
  %.extract15 = extractelement <4 x i32> %239, i64 2, !dbg !46
  %.extract16 = extractelement <4 x i32> %239, i64 3, !dbg !46
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract13, i32 %.extract14, i32 %.extract15, i32 %.extract16, ptr addrspace(1) %182, i1 %64) #2, !dbg !46
  ret void, !dbg !47
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cvyithxfccjcivacam5aovzjfak26scmtvqt7lqmxqylruxdyrzk.py", directory: "inductor_cache/vy")
!4 = !{ptr @triton_poi_fused_add_div_mul_sub_30, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_div_mul_sub_30, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_div_mul_sub_30", linkageName: "triton_poi_fused_add_div_mul_sub_30", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 31, column: 19, scope: !7)
!21 = !DILocation(line: 28, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 30, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 33, column: 38, scope: !7)
!25 = !DILocation(line: 33, column: 35, scope: !7)
!26 = !DILocation(line: 33, column: 30, scope: !7)
!27 = !DILocation(line: 33, column: 51, scope: !7)
!28 = !DILocation(line: 33, column: 43, scope: !7)
!29 = !DILocation(line: 34, column: 38, scope: !7)
!30 = !DILocation(line: 34, column: 35, scope: !7)
!31 = !DILocation(line: 34, column: 30, scope: !7)
!32 = !DILocation(line: 34, column: 43, scope: !7)
!33 = !DILocation(line: 35, column: 30, scope: !7)
!34 = !DILocation(line: 35, column: 43, scope: !7)
!35 = !DILocation(line: 36, column: 30, scope: !7)
!36 = !DILocation(line: 36, column: 35, scope: !7)
!37 = !DILocation(line: 37, column: 18, scope: !7)
!38 = !DILocation(line: 38, column: 18, scope: !7)
!39 = !DILocation(line: 39, column: 18, scope: !7)
!40 = !DILocation(line: 40, column: 18, scope: !7)
!41 = !DILocation(line: 41, column: 34, scope: !7)
!42 = !DILocation(line: 41, column: 44, scope: !7)
!43 = !DILocation(line: 41, column: 30, scope: !7)
!44 = !DILocation(line: 41, column: 39, scope: !7)
!45 = !DILocation(line: 41, column: 25, scope: !7)
!46 = !DILocation(line: 41, column: 55, scope: !7)
!47 = !DILocation(line: 41, column: 4, scope: !7)
