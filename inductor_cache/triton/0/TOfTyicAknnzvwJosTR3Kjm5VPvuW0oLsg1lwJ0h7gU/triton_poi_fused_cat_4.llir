; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %7 = shl i32 %6, 8, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 1, !dbg !12
  %10 = and i32 %9, 254, !dbg !12
  %11 = or disjoint i32 %7, %10, !dbg !13
  %.frozen = freeze i32 %11, !dbg !14
  %12 = sdiv i32 %.frozen, 256, !dbg !14
  %13 = srem i32 %12, 8, !dbg !15
  %14 = mul i32 %12, 256, !dbg !16
  %.decomposed = sub i32 %.frozen, %14, !dbg !16
  %.frozen1 = freeze i32 %11, !dbg !17
  %15 = sdiv i32 %.frozen1, 2048, !dbg !17
  %16 = icmp slt i32 %13, 4, !dbg !18
  %17 = mul i32 %15, 2048, !dbg !19
  %srem.decomposed = sub i32 %.frozen1, %17, !dbg !19
  %18 = shl nsw i32 %15, 10, !dbg !20
  %19 = add nsw i32 %18, %srem.decomposed, !dbg !21
  %20 = sext i32 %19 to i64, !dbg !22
  %21 = getelementptr float, ptr addrspace(1) %0, i64 %20, !dbg !22
  %22 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %21, i1 %16, i32 0, i1 %16, i32 0, i1 %16) #1, !dbg !23
  %23 = extractvalue { i32, i32 } %22, 0, !dbg !23
  %24 = extractvalue { i32, i32 } %22, 1, !dbg !23
  %25 = bitcast i32 %23 to float, !dbg !23
  %26 = bitcast i32 %24 to float, !dbg !23
  %27 = getelementptr float, ptr addrspace(1) %1, i64 %20, !dbg !24
  %28 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %27, i1 %16, i32 0, i1 %16, i32 0, i1 %16) #1, !dbg !25
  %29 = extractvalue { i32, i32 } %28, 0, !dbg !25
  %30 = extractvalue { i32, i32 } %28, 1, !dbg !25
  %31 = bitcast i32 %29 to float, !dbg !25
  %32 = bitcast i32 %30 to float, !dbg !25
  %33 = fsub float 0.000000e+00, %31, !dbg !26
  %34 = fsub float 0.000000e+00, %32, !dbg !26
  %35 = fmul float %33, 0x3FF7154760000000, !dbg !30
  %36 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %35) #1, !dbg !30
  %37 = fmul float %34, 0x3FF7154760000000, !dbg !30
  %38 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %37) #1, !dbg !30
  %39 = fadd float %36, 1.000000e+00, !dbg !31
  %40 = fadd float %38, 1.000000e+00, !dbg !31
  %41 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %39) #1, !dbg !32
  %42 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %40) #1, !dbg !32
  %43 = fmul float %41, %31, !dbg !33
  %44 = fmul float %42, %32, !dbg !33
  %45 = fadd float %43, %25, !dbg !34
  %46 = fadd float %44, %26, !dbg !34
  %47 = icmp sgt i32 %13, 3, !dbg !35
  %48 = shl nsw i32 %13, 8, !dbg !36
  %49 = add nsw i32 %.decomposed, -1024, !dbg !36
  %50 = add nsw i32 %49, %18, !dbg !37
  %51 = add nsw i32 %50, %48, !dbg !38
  %52 = sext i32 %51 to i64, !dbg !39
  %53 = getelementptr float, ptr addrspace(1) %2, i64 %52, !dbg !39
  %54 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %53, i1 %47, i32 0, i1 %47, i32 0, i1 %47) #1, !dbg !40
  %55 = extractvalue { i32, i32 } %54, 0, !dbg !40
  %56 = extractvalue { i32, i32 } %54, 1, !dbg !40
  %57 = bitcast i32 %55 to float, !dbg !40
  %58 = bitcast i32 %56 to float, !dbg !40
  %59 = fsub float 0.000000e+00, %57, !dbg !41
  %60 = fsub float 0.000000e+00, %58, !dbg !41
  %61 = fmul float %59, 0x3FF7154760000000, !dbg !43
  %62 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %61) #1, !dbg !43
  %63 = fmul float %60, 0x3FF7154760000000, !dbg !43
  %64 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %63) #1, !dbg !43
  %65 = fadd float %62, 1.000000e+00, !dbg !44
  %66 = fadd float %64, 1.000000e+00, !dbg !44
  %67 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %65) #1, !dbg !45
  %68 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %66) #1, !dbg !45
  %69 = fmul float %67, %57, !dbg !46
  %70 = fmul float %68, %58, !dbg !46
  %71 = select i1 %16, float %45, float %69, !dbg !47
  %72 = select i1 %16, float %46, float %70, !dbg !47
  %73 = sext i32 %11 to i64, !dbg !48
  %74 = getelementptr float, ptr addrspace(1) %3, i64 %73, !dbg !48
  %75 = bitcast float %71 to i32, !dbg !49
  %76 = bitcast float %72 to i32, !dbg !49
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %75, i32 %76, ptr addrspace(1) %74, i1 true) #1, !dbg !49
  ret void, !dbg !50
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cdgezwhqnwtp72yasyr52b4b6civlkv34fssbabooxiflxeepm42.py", directory: "inductor_cache/dg")
!4 = !{ptr @triton_poi_fused_cat_4, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_4, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_4", linkageName: "triton_poi_fused_cat_4", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 32, column: 18, scope: !7)
!19 = !DILocation(line: 33, column: 35, scope: !7)
!20 = !DILocation(line: 33, column: 51, scope: !7)
!21 = !DILocation(line: 33, column: 46, scope: !7)
!22 = !DILocation(line: 33, column: 30, scope: !7)
!23 = !DILocation(line: 33, column: 56, scope: !7)
!24 = !DILocation(line: 34, column: 30, scope: !7)
!25 = !DILocation(line: 34, column: 56, scope: !7)
!26 = !DILocation(line: 47, column: 30, scope: !27, inlinedAt: !29)
!27 = distinct !DILexicalBlockFile(scope: !7, file: !28, discriminator: 0)
!28 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!29 = !DILocation(line: 35, column: 22, scope: !7)
!30 = !DILocation(line: 47, column: 29, scope: !27, inlinedAt: !29)
!31 = !DILocation(line: 47, column: 20, scope: !27, inlinedAt: !29)
!32 = !DILocation(line: 47, column: 16, scope: !27, inlinedAt: !29)
!33 = !DILocation(line: 36, column: 18, scope: !7)
!34 = !DILocation(line: 37, column: 18, scope: !7)
!35 = !DILocation(line: 40, column: 20, scope: !7)
!36 = !DILocation(line: 43, column: 41, scope: !7)
!37 = !DILocation(line: 43, column: 36, scope: !7)
!38 = !DILocation(line: 43, column: 54, scope: !7)
!39 = !DILocation(line: 43, column: 31, scope: !7)
!40 = !DILocation(line: 43, column: 64, scope: !7)
!41 = !DILocation(line: 47, column: 30, scope: !27, inlinedAt: !42)
!42 = !DILocation(line: 44, column: 23, scope: !7)
!43 = !DILocation(line: 47, column: 29, scope: !27, inlinedAt: !42)
!44 = !DILocation(line: 47, column: 20, scope: !27, inlinedAt: !42)
!45 = !DILocation(line: 47, column: 16, scope: !27, inlinedAt: !42)
!46 = !DILocation(line: 45, column: 20, scope: !7)
!47 = !DILocation(line: 0, scope: !7)
!48 = !DILocation(line: 49, column: 25, scope: !7)
!49 = !DILocation(line: 49, column: 37, scope: !7)
!50 = !DILocation(line: 49, column: 4, scope: !7)
