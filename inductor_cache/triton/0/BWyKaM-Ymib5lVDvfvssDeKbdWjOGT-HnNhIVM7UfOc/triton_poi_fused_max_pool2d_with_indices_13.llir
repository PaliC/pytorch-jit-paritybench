; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_max_pool2d_with_indices_13(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %6 = shl i32 %5, 9, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 2, !dbg !12
  %9 = and i32 %8, 508, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = or disjoint i32 %10, 1, !dbg !13
  %12 = or disjoint i32 %10, 2, !dbg !13
  %13 = or disjoint i32 %10, 3, !dbg !13
  %.frozen = freeze i32 %10, !dbg !14
  %14 = sdiv i32 %.frozen, 16, !dbg !14
  %15 = mul i32 %14, 16, !dbg !15
  %.decomposed = sub i32 %.frozen, %15, !dbg !15
  %16 = srem i32 %11, 16, !dbg !15
  %17 = srem i32 %12, 16, !dbg !15
  %18 = shl nsw i32 %.decomposed, 1, !dbg !16
  %19 = shl nsw i32 %16, 1, !dbg !16
  %20 = shl nsw i32 %17, 1, !dbg !16
  %21 = icmp sgt i32 %.decomposed, -1, !dbg !17
  %22 = icmp sgt i32 %16, -1, !dbg !17
  %23 = icmp sgt i32 %17, -1, !dbg !17
  %24 = shl i32 %14, 6, !dbg !18
  %25 = add i32 %18, %24, !dbg !19
  %26 = add i32 %24, %19, !dbg !19
  %27 = add i32 %24, %20, !dbg !19
  %28 = sext i32 %25 to i64, !dbg !20
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !20
  %30 = sext i32 %26 to i64, !dbg !20
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !20
  %32 = sext i32 %27 to i64, !dbg !20
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !20
  %34 = or disjoint i32 %25, 1, !dbg !21
  %35 = or disjoint i32 %26, 1, !dbg !21
  %36 = or disjoint i32 %27, 1, !dbg !21
  %37 = sext i32 %34 to i64, !dbg !22
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !22
  %39 = sext i32 %35 to i64, !dbg !22
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !22
  %41 = sext i32 %36 to i64, !dbg !22
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !22
  %43 = icmp ult i32 %.decomposed, 16, !dbg !23
  %44 = add nuw nsw i32 %16, 1, !dbg !23
  %45 = icmp ult i32 %16, 15, !dbg !23
  %46 = icmp ult i32 %17, 16, !dbg !23
  %47 = or disjoint i32 %25, 2, !dbg !24
  %48 = or disjoint i32 %27, 2, !dbg !24
  %49 = sext i32 %47 to i64, !dbg !25
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !25
  %51 = getelementptr i8, ptr addrspace(1) %31, i64 8, !dbg !25
  %52 = sext i32 %48 to i64, !dbg !25
  %53 = getelementptr float, ptr addrspace(1) %0, i64 %52, !dbg !25
  %54 = add i32 %25, 32, !dbg !26
  %55 = add i32 %26, 32, !dbg !26
  %56 = add i32 %27, 32, !dbg !26
  %57 = sext i32 %54 to i64, !dbg !27
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !27
  %59 = sext i32 %55 to i64, !dbg !27
  %60 = getelementptr float, ptr addrspace(1) %0, i64 %59, !dbg !27
  %61 = sext i32 %56 to i64, !dbg !27
  %62 = getelementptr float, ptr addrspace(1) %0, i64 %61, !dbg !27
  %63 = add i32 %25, 33, !dbg !28
  %64 = add i32 %26, 33, !dbg !28
  %65 = add i32 %27, 33, !dbg !28
  %66 = sext i32 %63 to i64, !dbg !29
  %67 = getelementptr float, ptr addrspace(1) %0, i64 %66, !dbg !29
  %68 = sext i32 %64 to i64, !dbg !29
  %69 = getelementptr float, ptr addrspace(1) %0, i64 %68, !dbg !29
  %70 = sext i32 %65 to i64, !dbg !29
  %71 = getelementptr float, ptr addrspace(1) %0, i64 %70, !dbg !29
  %72 = add i32 %25, 34, !dbg !30
  %73 = add i32 %26, 34, !dbg !30
  %74 = add i32 %27, 34, !dbg !30
  %75 = sext i32 %72 to i64, !dbg !31
  %76 = getelementptr float, ptr addrspace(1) %0, i64 %75, !dbg !31
  %77 = sext i32 %73 to i64, !dbg !31
  %78 = getelementptr float, ptr addrspace(1) %0, i64 %77, !dbg !31
  %79 = sext i32 %74 to i64, !dbg !31
  %80 = getelementptr float, ptr addrspace(1) %0, i64 %79, !dbg !31
  %81 = insertelement <2 x i32> poison, i32 %14, i64 0, !dbg !32
  %82 = insertelement <2 x i32> %81, i32 %13, i64 1, !dbg !32
  %83 = srem <2 x i32> %82, splat (i32 16), !dbg !32
  %84 = extractelement <2 x i32> %83, i64 0, !dbg !33
  %85 = icmp sgt i32 %84, -1, !dbg !34
  %86 = extractelement <2 x i32> %83, i64 1, !dbg !33
  %87 = shl nsw i32 %86, 1, !dbg !16
  %88 = icmp sgt i32 %86, -1, !dbg !17
  %89 = or i32 %84, %.decomposed, !dbg !33
  %90 = icmp sgt i32 %89, -1, !dbg !33
  %91 = or i32 %84, %16, !dbg !33
  %92 = icmp sgt i32 %91, -1, !dbg !33
  %93 = or i32 %84, %17, !dbg !33
  %94 = icmp sgt i32 %93, -1, !dbg !33
  %95 = or i32 %84, %86, !dbg !33
  %96 = icmp sgt i32 %95, -1, !dbg !33
  %97 = add i32 %24, %87, !dbg !19
  %98 = sext i32 %97 to i64, !dbg !20
  %99 = getelementptr float, ptr addrspace(1) %0, i64 %98, !dbg !20
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %29, i1 %90, i32 -8388608, i1 %90) #1, !dbg !35
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %31, i1 %92, i32 -8388608, i1 %92) #1, !dbg !35
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %33, i1 %94, i32 -8388608, i1 %94) #1, !dbg !35
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %99, i1 %96, i32 -8388608, i1 %96) #1, !dbg !35
  %104 = or disjoint i32 %97, 1, !dbg !21
  %105 = sext i32 %104 to i64, !dbg !22
  %106 = getelementptr float, ptr addrspace(1) %0, i64 %105, !dbg !22
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %38, i1 %90, i32 -8388608, i1 %90) #1, !dbg !36
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %40, i1 %92, i32 -8388608, i1 %92) #1, !dbg !36
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %42, i1 %94, i32 -8388608, i1 %94) #1, !dbg !36
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %106, i1 %96, i32 -8388608, i1 %96) #1, !dbg !36
  %111 = add nsw <2 x i32> %83, splat (i32 1), !dbg !37
  %112 = extractelement <2 x i32> %111, i64 1, !dbg !38
  %113 = icmp ult i32 %112, 16, !dbg !23
  %114 = and i1 %43, %85, !dbg !39
  %115 = and i1 %45, %85, !dbg !39
  %116 = and i1 %46, %85, !dbg !39
  %117 = and i1 %113, %85, !dbg !39
  %118 = add i32 %97, 2, !dbg !24
  %119 = sext i32 %118 to i64, !dbg !25
  %120 = getelementptr float, ptr addrspace(1) %0, i64 %119, !dbg !25
  %121 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %50, i1 %114, i32 -8388608, i1 %114) #1, !dbg !40
  %122 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %51, i1 %115, i32 -8388608, i1 %115) #1, !dbg !40
  %123 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %53, i1 %116, i32 -8388608, i1 %116) #1, !dbg !40
  %124 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %120, i1 %117, i32 -8388608, i1 %117) #1, !dbg !40
  %125 = add i32 %97, 32, !dbg !26
  %126 = sext i32 %125 to i64, !dbg !27
  %127 = getelementptr float, ptr addrspace(1) %0, i64 %126, !dbg !27
  %128 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %58, i1 %90, i32 -8388608, i1 %90) #1, !dbg !41
  %129 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %60, i1 %92, i32 -8388608, i1 %92) #1, !dbg !41
  %130 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %62, i1 %94, i32 -8388608, i1 %94) #1, !dbg !41
  %131 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %127, i1 %96, i32 -8388608, i1 %96) #1, !dbg !41
  %132 = add i32 %97, 33, !dbg !28
  %133 = sext i32 %132 to i64, !dbg !29
  %134 = getelementptr float, ptr addrspace(1) %0, i64 %133, !dbg !29
  %135 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %67, i1 %90, i32 -8388608, i1 %90) #1, !dbg !42
  %136 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %69, i1 %92, i32 -8388608, i1 %92) #1, !dbg !42
  %137 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %71, i1 %94, i32 -8388608, i1 %94) #1, !dbg !42
  %138 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %134, i1 %96, i32 -8388608, i1 %96) #1, !dbg !42
  %139 = add i32 %97, 34, !dbg !30
  %140 = sext i32 %139 to i64, !dbg !31
  %141 = getelementptr float, ptr addrspace(1) %0, i64 %140, !dbg !31
  %142 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %76, i1 %114, i32 -8388608, i1 %114) #1, !dbg !43
  %143 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %78, i1 %115, i32 -8388608, i1 %115) #1, !dbg !43
  %144 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %80, i1 %116, i32 -8388608, i1 %116) #1, !dbg !43
  %145 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %141, i1 %117, i32 -8388608, i1 %117) #1, !dbg !43
  %146 = extractelement <2 x i32> %111, i64 0, !dbg !38
  %147 = icmp ult i32 %146, 16, !dbg !37
  %148 = and i1 %21, %147, !dbg !44
  %149 = and i1 %22, %147, !dbg !44
  %150 = and i1 %23, %147, !dbg !44
  %151 = and i1 %88, %147, !dbg !44
  %152 = add i32 %25, 64, !dbg !45
  %153 = add i32 %26, 64, !dbg !45
  %154 = add i32 %27, 64, !dbg !45
  %155 = add i32 %97, 64, !dbg !45
  %156 = sext i32 %152 to i64, !dbg !46
  %157 = getelementptr float, ptr addrspace(1) %0, i64 %156, !dbg !46
  %158 = sext i32 %153 to i64, !dbg !46
  %159 = getelementptr float, ptr addrspace(1) %0, i64 %158, !dbg !46
  %160 = sext i32 %154 to i64, !dbg !46
  %161 = getelementptr float, ptr addrspace(1) %0, i64 %160, !dbg !46
  %162 = sext i32 %155 to i64, !dbg !46
  %163 = getelementptr float, ptr addrspace(1) %0, i64 %162, !dbg !46
  %164 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %157, i1 %148, i32 -8388608, i1 %148) #1, !dbg !47
  %165 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %159, i1 %149, i32 -8388608, i1 %149) #1, !dbg !47
  %166 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %161, i1 %150, i32 -8388608, i1 %150) #1, !dbg !47
  %167 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %163, i1 %151, i32 -8388608, i1 %151) #1, !dbg !47
  %168 = add i32 %25, 65, !dbg !48
  %169 = add i32 %26, 65, !dbg !48
  %170 = add i32 %27, 65, !dbg !48
  %171 = add i32 %97, 65, !dbg !48
  %172 = sext i32 %168 to i64, !dbg !49
  %173 = getelementptr float, ptr addrspace(1) %0, i64 %172, !dbg !49
  %174 = sext i32 %169 to i64, !dbg !49
  %175 = getelementptr float, ptr addrspace(1) %0, i64 %174, !dbg !49
  %176 = sext i32 %170 to i64, !dbg !49
  %177 = getelementptr float, ptr addrspace(1) %0, i64 %176, !dbg !49
  %178 = sext i32 %171 to i64, !dbg !49
  %179 = getelementptr float, ptr addrspace(1) %0, i64 %178, !dbg !49
  %180 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %173, i1 %148, i32 -8388608, i1 %148) #1, !dbg !50
  %181 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %175, i1 %149, i32 -8388608, i1 %149) #1, !dbg !50
  %182 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %177, i1 %150, i32 -8388608, i1 %150) #1, !dbg !50
  %183 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %179, i1 %151, i32 -8388608, i1 %151) #1, !dbg !50
  %184 = or i32 %146, %.decomposed, !dbg !38
  %185 = icmp ult i32 %184, 16, !dbg !38
  %186 = or i32 %146, %44, !dbg !38
  %187 = icmp ult i32 %186, 16, !dbg !38
  %188 = or i32 %146, %17, !dbg !38
  %189 = icmp ult i32 %188, 16, !dbg !38
  %190 = or i32 %146, %112, !dbg !38
  %191 = icmp ult i32 %190, 16, !dbg !38
  %192 = add i32 %25, 66, !dbg !51
  %193 = add i32 %26, 66, !dbg !51
  %194 = add i32 %27, 66, !dbg !51
  %195 = add i32 %97, 66, !dbg !51
  %196 = sext i32 %192 to i64, !dbg !52
  %197 = getelementptr float, ptr addrspace(1) %0, i64 %196, !dbg !52
  %198 = sext i32 %193 to i64, !dbg !52
  %199 = getelementptr float, ptr addrspace(1) %0, i64 %198, !dbg !52
  %200 = sext i32 %194 to i64, !dbg !52
  %201 = getelementptr float, ptr addrspace(1) %0, i64 %200, !dbg !52
  %202 = sext i32 %195 to i64, !dbg !52
  %203 = getelementptr float, ptr addrspace(1) %0, i64 %202, !dbg !52
  %204 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %197, i1 %185, i32 -8388608, i1 %185) #1, !dbg !53
  %205 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %199, i1 %187, i32 -8388608, i1 %187) #1, !dbg !53
  %206 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %201, i1 %189, i32 -8388608, i1 %189) #1, !dbg !53
  %207 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %203, i1 %191, i32 -8388608, i1 %191) #1, !dbg !53
  %208 = insertelement <4 x i32> poison, i32 %100, i64 0, !dbg !35
  %209 = insertelement <4 x i32> %208, i32 %101, i64 1, !dbg !35
  %210 = insertelement <4 x i32> %209, i32 %102, i64 2, !dbg !35
  %211 = insertelement <4 x i32> %210, i32 %103, i64 3, !dbg !35
  %212 = bitcast <4 x i32> %211 to <4 x float>, !dbg !35
  %213 = insertelement <4 x i32> poison, i32 %107, i64 0, !dbg !36
  %214 = insertelement <4 x i32> %213, i32 %108, i64 1, !dbg !36
  %215 = insertelement <4 x i32> %214, i32 %109, i64 2, !dbg !36
  %216 = insertelement <4 x i32> %215, i32 %110, i64 3, !dbg !36
  %217 = bitcast <4 x i32> %216 to <4 x float>, !dbg !36
  %218 = fcmp ogt <4 x float> %217, %212, !dbg !54
  %219 = fcmp uno <4 x float> %217, zeroinitializer, !dbg !58
  %220 = or <4 x i1> %218, %219, !dbg !59
  %.v = select <4 x i1> %220, <4 x i32> %216, <4 x i32> %211, !dbg !60
  %221 = bitcast <4 x i32> %.v to <4 x float>, !dbg !60
  %222 = insertelement <4 x i32> poison, i32 %121, i64 0, !dbg !40
  %223 = insertelement <4 x i32> %222, i32 %122, i64 1, !dbg !40
  %224 = insertelement <4 x i32> %223, i32 %123, i64 2, !dbg !40
  %225 = insertelement <4 x i32> %224, i32 %124, i64 3, !dbg !40
  %226 = bitcast <4 x i32> %225 to <4 x float>, !dbg !40
  %227 = fcmp olt <4 x float> %221, %226, !dbg !61
  %228 = fcmp uno <4 x float> %226, zeroinitializer, !dbg !63
  %229 = or <4 x i1> %227, %228, !dbg !64
  %.v1 = select <4 x i1> %229, <4 x i32> %225, <4 x i32> %.v, !dbg !65
  %230 = bitcast <4 x i32> %.v1 to <4 x float>, !dbg !65
  %231 = insertelement <4 x i32> poison, i32 %128, i64 0, !dbg !41
  %232 = insertelement <4 x i32> %231, i32 %129, i64 1, !dbg !41
  %233 = insertelement <4 x i32> %232, i32 %130, i64 2, !dbg !41
  %234 = insertelement <4 x i32> %233, i32 %131, i64 3, !dbg !41
  %235 = bitcast <4 x i32> %234 to <4 x float>, !dbg !41
  %236 = fcmp olt <4 x float> %230, %235, !dbg !66
  %237 = fcmp uno <4 x float> %235, zeroinitializer, !dbg !68
  %238 = or <4 x i1> %236, %237, !dbg !69
  %.v2 = select <4 x i1> %238, <4 x i32> %234, <4 x i32> %.v1, !dbg !70
  %239 = bitcast <4 x i32> %.v2 to <4 x float>, !dbg !70
  %240 = insertelement <4 x i32> poison, i32 %135, i64 0, !dbg !42
  %241 = insertelement <4 x i32> %240, i32 %136, i64 1, !dbg !42
  %242 = insertelement <4 x i32> %241, i32 %137, i64 2, !dbg !42
  %243 = insertelement <4 x i32> %242, i32 %138, i64 3, !dbg !42
  %244 = bitcast <4 x i32> %243 to <4 x float>, !dbg !42
  %245 = fcmp olt <4 x float> %239, %244, !dbg !71
  %246 = fcmp uno <4 x float> %244, zeroinitializer, !dbg !73
  %247 = or <4 x i1> %245, %246, !dbg !74
  %.v3 = select <4 x i1> %247, <4 x i32> %243, <4 x i32> %.v2, !dbg !75
  %248 = bitcast <4 x i32> %.v3 to <4 x float>, !dbg !75
  %249 = insertelement <4 x i32> poison, i32 %142, i64 0, !dbg !43
  %250 = insertelement <4 x i32> %249, i32 %143, i64 1, !dbg !43
  %251 = insertelement <4 x i32> %250, i32 %144, i64 2, !dbg !43
  %252 = insertelement <4 x i32> %251, i32 %145, i64 3, !dbg !43
  %253 = bitcast <4 x i32> %252 to <4 x float>, !dbg !43
  %254 = fcmp olt <4 x float> %248, %253, !dbg !76
  %255 = fcmp uno <4 x float> %253, zeroinitializer, !dbg !78
  %256 = or <4 x i1> %254, %255, !dbg !79
  %.v4 = select <4 x i1> %256, <4 x i32> %252, <4 x i32> %.v3, !dbg !80
  %257 = bitcast <4 x i32> %.v4 to <4 x float>, !dbg !80
  %258 = insertelement <4 x i32> poison, i32 %164, i64 0, !dbg !47
  %259 = insertelement <4 x i32> %258, i32 %165, i64 1, !dbg !47
  %260 = insertelement <4 x i32> %259, i32 %166, i64 2, !dbg !47
  %261 = insertelement <4 x i32> %260, i32 %167, i64 3, !dbg !47
  %262 = bitcast <4 x i32> %261 to <4 x float>, !dbg !47
  %263 = fcmp olt <4 x float> %257, %262, !dbg !81
  %264 = fcmp uno <4 x float> %262, zeroinitializer, !dbg !83
  %265 = or <4 x i1> %263, %264, !dbg !84
  %.v5 = select <4 x i1> %265, <4 x i32> %261, <4 x i32> %.v4, !dbg !85
  %266 = bitcast <4 x i32> %.v5 to <4 x float>, !dbg !85
  %267 = insertelement <4 x i32> poison, i32 %180, i64 0, !dbg !50
  %268 = insertelement <4 x i32> %267, i32 %181, i64 1, !dbg !50
  %269 = insertelement <4 x i32> %268, i32 %182, i64 2, !dbg !50
  %270 = insertelement <4 x i32> %269, i32 %183, i64 3, !dbg !50
  %271 = bitcast <4 x i32> %270 to <4 x float>, !dbg !50
  %272 = fcmp olt <4 x float> %266, %271, !dbg !86
  %273 = fcmp uno <4 x float> %271, zeroinitializer, !dbg !88
  %274 = or <4 x i1> %272, %273, !dbg !89
  %.v6 = select <4 x i1> %274, <4 x i32> %270, <4 x i32> %.v5, !dbg !90
  %275 = bitcast <4 x i32> %.v6 to <4 x float>, !dbg !90
  %276 = insertelement <4 x i32> poison, i32 %204, i64 0, !dbg !53
  %277 = insertelement <4 x i32> %276, i32 %205, i64 1, !dbg !53
  %278 = insertelement <4 x i32> %277, i32 %206, i64 2, !dbg !53
  %279 = insertelement <4 x i32> %278, i32 %207, i64 3, !dbg !53
  %280 = bitcast <4 x i32> %279 to <4 x float>, !dbg !53
  %281 = fcmp olt <4 x float> %275, %280, !dbg !91
  %282 = fcmp uno <4 x float> %280, zeroinitializer, !dbg !93
  %283 = or <4 x i1> %281, %282, !dbg !94
  %284 = extractelement <4 x i1> %283, i64 0, !dbg !94
  %285 = or <4 x i1> %281, %282, !dbg !94
  %286 = extractelement <4 x i1> %285, i64 1, !dbg !94
  %287 = or <4 x i1> %281, %282, !dbg !94
  %288 = extractelement <4 x i1> %287, i64 2, !dbg !94
  %289 = or <4 x i1> %281, %282, !dbg !94
  %290 = extractelement <4 x i1> %289, i64 3, !dbg !94
  %291 = zext <4 x i1> %218 to <4 x i8>, !dbg !95
  %292 = select <4 x i1> %227, <4 x i8> splat (i8 2), <4 x i8> %291, !dbg !96
  %293 = select <4 x i1> %236, <4 x i8> splat (i8 3), <4 x i8> %292, !dbg !97
  %294 = select <4 x i1> %245, <4 x i8> splat (i8 4), <4 x i8> %293, !dbg !98
  %295 = select <4 x i1> %254, <4 x i8> splat (i8 5), <4 x i8> %294, !dbg !99
  %296 = select <4 x i1> %263, <4 x i8> splat (i8 6), <4 x i8> %295, !dbg !100
  %297 = select <4 x i1> %272, <4 x i8> splat (i8 7), <4 x i8> %296, !dbg !101
  %298 = select <4 x i1> %281, <4 x i8> splat (i8 8), <4 x i8> %297, !dbg !102
  %299 = sext i32 %10 to i64, !dbg !103
  %300 = getelementptr float, ptr addrspace(1) %1, i64 %299, !dbg !103
  %301 = extractelement <4 x i32> %.v6, i64 0, !dbg !104
  %302 = select i1 %284, i32 %204, i32 %301, !dbg !105
  %303 = extractelement <4 x i32> %.v6, i64 1, !dbg !104
  %304 = select i1 %286, i32 %205, i32 %303, !dbg !105
  %305 = extractelement <4 x i32> %.v6, i64 2, !dbg !104
  %306 = select i1 %288, i32 %206, i32 %305, !dbg !105
  %307 = extractelement <4 x i32> %.v6, i64 3, !dbg !104
  %308 = select i1 %290, i32 %207, i32 %307, !dbg !105
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %302, i32 %304, i32 %306, i32 %308, ptr addrspace(1) %300, i1 true) #1, !dbg !104
  %309 = getelementptr i8, ptr addrspace(1) %2, i64 %299, !dbg !106
  %310 = bitcast <4 x i8> %298 to i32, !dbg !107
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %310, ptr addrspace(1) %309, i1 true) #1, !dbg !107
  ret void, !dbg !108
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cyby4u4aazvjfa5ugjmc4jcetcd3lohcylkjwmk3rwzqc3uxgtkf.py", directory: "inductor_cache/yb")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_13, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_13, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_13", linkageName: "triton_poi_fused_max_pool2d_with_indices_13", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 34, column: 13, scope: !7)
!17 = !DILocation(line: 35, column: 19, scope: !7)
!18 = !DILocation(line: 39, column: 41, scope: !7)
!19 = !DILocation(line: 39, column: 38, scope: !7)
!20 = !DILocation(line: 39, column: 31, scope: !7)
!21 = !DILocation(line: 45, column: 42, scope: !7)
!22 = !DILocation(line: 45, column: 31, scope: !7)
!23 = !DILocation(line: 50, column: 20, scope: !7)
!24 = !DILocation(line: 52, column: 42, scope: !7)
!25 = !DILocation(line: 52, column: 31, scope: !7)
!26 = !DILocation(line: 59, column: 43, scope: !7)
!27 = !DILocation(line: 59, column: 31, scope: !7)
!28 = !DILocation(line: 62, column: 43, scope: !7)
!29 = !DILocation(line: 62, column: 31, scope: !7)
!30 = !DILocation(line: 65, column: 43, scope: !7)
!31 = !DILocation(line: 65, column: 31, scope: !7)
!32 = !DILocation(line: 24, column: 27, scope: !7)
!33 = !DILocation(line: 38, column: 19, scope: !7)
!34 = !DILocation(line: 30, column: 19, scope: !7)
!35 = !DILocation(line: 39, column: 46, scope: !7)
!36 = !DILocation(line: 45, column: 50, scope: !7)
!37 = !DILocation(line: 70, column: 20, scope: !7)
!38 = !DILocation(line: 77, column: 20, scope: !7)
!39 = !DILocation(line: 51, column: 19, scope: !7)
!40 = !DILocation(line: 52, column: 50, scope: !7)
!41 = !DILocation(line: 59, column: 51, scope: !7)
!42 = !DILocation(line: 62, column: 51, scope: !7)
!43 = !DILocation(line: 65, column: 51, scope: !7)
!44 = !DILocation(line: 71, column: 20, scope: !7)
!45 = !DILocation(line: 72, column: 43, scope: !7)
!46 = !DILocation(line: 72, column: 31, scope: !7)
!47 = !DILocation(line: 72, column: 51, scope: !7)
!48 = !DILocation(line: 75, column: 43, scope: !7)
!49 = !DILocation(line: 75, column: 31, scope: !7)
!50 = !DILocation(line: 75, column: 51, scope: !7)
!51 = !DILocation(line: 78, column: 43, scope: !7)
!52 = !DILocation(line: 78, column: 31, scope: !7)
!53 = !DILocation(line: 78, column: 51, scope: !7)
!54 = !DILocation(line: 118, column: 15, scope: !55, inlinedAt: !57)
!55 = distinct !DILexicalBlockFile(scope: !7, file: !56, discriminator: 0)
!56 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!57 = !DILocation(line: 46, column: 42, scope: !7)
!58 = !DILocation(line: 120, column: 21, scope: !55, inlinedAt: !57)
!59 = !DILocation(line: 120, column: 16, scope: !55, inlinedAt: !57)
!60 = !DILocation(line: 121, column: 29, scope: !55, inlinedAt: !57)
!61 = !DILocation(line: 118, column: 15, scope: !55, inlinedAt: !62)
!62 = !DILocation(line: 53, column: 42, scope: !7)
!63 = !DILocation(line: 120, column: 21, scope: !55, inlinedAt: !62)
!64 = !DILocation(line: 120, column: 16, scope: !55, inlinedAt: !62)
!65 = !DILocation(line: 121, column: 29, scope: !55, inlinedAt: !62)
!66 = !DILocation(line: 118, column: 15, scope: !55, inlinedAt: !67)
!67 = !DILocation(line: 60, column: 42, scope: !7)
!68 = !DILocation(line: 120, column: 21, scope: !55, inlinedAt: !67)
!69 = !DILocation(line: 120, column: 16, scope: !55, inlinedAt: !67)
!70 = !DILocation(line: 121, column: 29, scope: !55, inlinedAt: !67)
!71 = !DILocation(line: 118, column: 15, scope: !55, inlinedAt: !72)
!72 = !DILocation(line: 63, column: 42, scope: !7)
!73 = !DILocation(line: 120, column: 21, scope: !55, inlinedAt: !72)
!74 = !DILocation(line: 120, column: 16, scope: !55, inlinedAt: !72)
!75 = !DILocation(line: 121, column: 29, scope: !55, inlinedAt: !72)
!76 = !DILocation(line: 118, column: 15, scope: !55, inlinedAt: !77)
!77 = !DILocation(line: 66, column: 42, scope: !7)
!78 = !DILocation(line: 120, column: 21, scope: !55, inlinedAt: !77)
!79 = !DILocation(line: 120, column: 16, scope: !55, inlinedAt: !77)
!80 = !DILocation(line: 121, column: 29, scope: !55, inlinedAt: !77)
!81 = !DILocation(line: 118, column: 15, scope: !55, inlinedAt: !82)
!82 = !DILocation(line: 73, column: 42, scope: !7)
!83 = !DILocation(line: 120, column: 21, scope: !55, inlinedAt: !82)
!84 = !DILocation(line: 120, column: 16, scope: !55, inlinedAt: !82)
!85 = !DILocation(line: 121, column: 29, scope: !55, inlinedAt: !82)
!86 = !DILocation(line: 118, column: 15, scope: !55, inlinedAt: !87)
!87 = !DILocation(line: 76, column: 42, scope: !7)
!88 = !DILocation(line: 120, column: 21, scope: !55, inlinedAt: !87)
!89 = !DILocation(line: 120, column: 16, scope: !55, inlinedAt: !87)
!90 = !DILocation(line: 121, column: 29, scope: !55, inlinedAt: !87)
!91 = !DILocation(line: 118, column: 15, scope: !55, inlinedAt: !92)
!92 = !DILocation(line: 79, column: 42, scope: !7)
!93 = !DILocation(line: 120, column: 21, scope: !55, inlinedAt: !92)
!94 = !DILocation(line: 120, column: 16, scope: !55, inlinedAt: !92)
!95 = !DILocation(line: 83, column: 35, scope: !7)
!96 = !DILocation(line: 86, column: 35, scope: !7)
!97 = !DILocation(line: 89, column: 35, scope: !7)
!98 = !DILocation(line: 92, column: 35, scope: !7)
!99 = !DILocation(line: 95, column: 35, scope: !7)
!100 = !DILocation(line: 98, column: 35, scope: !7)
!101 = !DILocation(line: 101, column: 35, scope: !7)
!102 = !DILocation(line: 104, column: 35, scope: !7)
!103 = !DILocation(line: 105, column: 25, scope: !7)
!104 = !DILocation(line: 105, column: 37, scope: !7)
!105 = !DILocation(line: 121, column: 29, scope: !55, inlinedAt: !92)
!106 = !DILocation(line: 106, column: 25, scope: !7)
!107 = !DILocation(line: 106, column: 37, scope: !7)
!108 = !DILocation(line: 106, column: 4, scope: !7)
