; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_native_group_norm_16(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %10 = shl i32 %9, 5, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = and i32 %11, 24, !dbg !12
  %13 = shl i32 %11, 2, !dbg !12
  %14 = and i32 %13, 28, !dbg !12
  %15 = and i32 %11, 31, !dbg !12
  %16 = or disjoint i32 %10, %14, !dbg !13
  %17 = or disjoint i32 %10, %15, !dbg !13
  %18 = icmp slt i32 %16, 64, !dbg !14
  %19 = icmp slt i32 %17, 64, !dbg !14
  %20 = lshr i32 %11, 5, !dbg !15
  %.frozen = freeze i32 %16, !dbg !16
  %21 = sdiv i32 %.frozen, 16, !dbg !16
  %22 = mul i32 %21, 16, !dbg !17
  %.decomposed = sub i32 %.frozen, %22, !dbg !17
  %23 = shl i32 %11, 1, !dbg !18
  %24 = and i32 %23, 496, !dbg !18
  %25 = shl i32 %21, 10, !dbg !19
  %26 = add i32 %25, %.decomposed, !dbg !20
  %27 = add i32 %26, %24, !dbg !21
  %28 = add i32 %26, 512, !dbg !20
  %29 = add nuw i32 %28, %24, !dbg !21
  %30 = sext i32 %27 to i64, !dbg !22
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !22
  %32 = sext i32 %29 to i64, !dbg !22
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !22
  %34 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %31, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18) #3, !dbg !23
  %35 = extractvalue { i32, i32, i32, i32 } %34, 0, !dbg !23
  %36 = extractvalue { i32, i32, i32, i32 } %34, 1, !dbg !23
  %37 = extractvalue { i32, i32, i32, i32 } %34, 2, !dbg !23
  %38 = extractvalue { i32, i32, i32, i32 } %34, 3, !dbg !23
  %39 = bitcast i32 %35 to float, !dbg !23
  %40 = bitcast i32 %36 to float, !dbg !23
  %41 = bitcast i32 %37 to float, !dbg !23
  %42 = bitcast i32 %38 to float, !dbg !23
  %43 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %33, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18) #3, !dbg !23
  %44 = extractvalue { i32, i32, i32, i32 } %43, 0, !dbg !23
  %45 = extractvalue { i32, i32, i32, i32 } %43, 1, !dbg !23
  %46 = extractvalue { i32, i32, i32, i32 } %43, 2, !dbg !23
  %47 = extractvalue { i32, i32, i32, i32 } %43, 3, !dbg !23
  %48 = bitcast i32 %44 to float, !dbg !23
  %49 = bitcast i32 %45 to float, !dbg !23
  %50 = bitcast i32 %46 to float, !dbg !23
  %51 = bitcast i32 %47 to float, !dbg !23
  %52 = getelementptr float, ptr addrspace(1) %1, i64 %30, !dbg !24
  %53 = getelementptr float, ptr addrspace(1) %1, i64 %32, !dbg !24
  %54 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %52, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18) #3, !dbg !25
  %55 = extractvalue { i32, i32, i32, i32 } %54, 0, !dbg !25
  %56 = extractvalue { i32, i32, i32, i32 } %54, 1, !dbg !25
  %57 = extractvalue { i32, i32, i32, i32 } %54, 2, !dbg !25
  %58 = extractvalue { i32, i32, i32, i32 } %54, 3, !dbg !25
  %59 = bitcast i32 %55 to float, !dbg !25
  %60 = bitcast i32 %56 to float, !dbg !25
  %61 = bitcast i32 %57 to float, !dbg !25
  %62 = bitcast i32 %58 to float, !dbg !25
  %63 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %53, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18) #3, !dbg !25
  %64 = extractvalue { i32, i32, i32, i32 } %63, 0, !dbg !25
  %65 = extractvalue { i32, i32, i32, i32 } %63, 1, !dbg !25
  %66 = extractvalue { i32, i32, i32, i32 } %63, 2, !dbg !25
  %67 = extractvalue { i32, i32, i32, i32 } %63, 3, !dbg !25
  %68 = bitcast i32 %64 to float, !dbg !25
  %69 = bitcast i32 %65 to float, !dbg !25
  %70 = bitcast i32 %66 to float, !dbg !25
  %71 = bitcast i32 %67 to float, !dbg !25
  %72 = getelementptr float, ptr addrspace(1) %2, i64 %30, !dbg !26
  %73 = getelementptr float, ptr addrspace(1) %2, i64 %32, !dbg !26
  %74 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %72, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18) #3, !dbg !27
  %75 = extractvalue { i32, i32, i32, i32 } %74, 0, !dbg !27
  %76 = extractvalue { i32, i32, i32, i32 } %74, 1, !dbg !27
  %77 = extractvalue { i32, i32, i32, i32 } %74, 2, !dbg !27
  %78 = extractvalue { i32, i32, i32, i32 } %74, 3, !dbg !27
  %79 = bitcast i32 %75 to float, !dbg !27
  %80 = bitcast i32 %76 to float, !dbg !27
  %81 = bitcast i32 %77 to float, !dbg !27
  %82 = bitcast i32 %78 to float, !dbg !27
  %83 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %73, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18) #3, !dbg !27
  %84 = extractvalue { i32, i32, i32, i32 } %83, 0, !dbg !27
  %85 = extractvalue { i32, i32, i32, i32 } %83, 1, !dbg !27
  %86 = extractvalue { i32, i32, i32, i32 } %83, 2, !dbg !27
  %87 = extractvalue { i32, i32, i32, i32 } %83, 3, !dbg !27
  %88 = bitcast i32 %84 to float, !dbg !27
  %89 = bitcast i32 %85 to float, !dbg !27
  %90 = bitcast i32 %86 to float, !dbg !27
  %91 = bitcast i32 %87 to float, !dbg !27
  %92 = select i1 %18, float %39, float 0.000000e+00, !dbg !28
  %93 = select i1 %18, float %40, float 0.000000e+00, !dbg !28
  %94 = select i1 %18, float %41, float 0.000000e+00, !dbg !28
  %95 = select i1 %18, float %42, float 0.000000e+00, !dbg !28
  %96 = select i1 %18, float %48, float 0.000000e+00, !dbg !28
  %97 = select i1 %18, float %49, float 0.000000e+00, !dbg !28
  %98 = select i1 %18, float %50, float 0.000000e+00, !dbg !28
  %99 = select i1 %18, float %51, float 0.000000e+00, !dbg !28
  %100 = select i1 %18, float %79, float 0.000000e+00, !dbg !29
  %101 = select i1 %18, float %80, float 0.000000e+00, !dbg !29
  %102 = select i1 %18, float %81, float 0.000000e+00, !dbg !29
  %103 = select i1 %18, float %82, float 0.000000e+00, !dbg !29
  %104 = select i1 %18, float %88, float 0.000000e+00, !dbg !29
  %105 = select i1 %18, float %89, float 0.000000e+00, !dbg !29
  %106 = select i1 %18, float %90, float 0.000000e+00, !dbg !29
  %107 = select i1 %18, float %91, float 0.000000e+00, !dbg !29
  %108 = fsub float %96, %92, !dbg !30
  %109 = fadd float %100, %104, !dbg !35
  %110 = fcmp oeq float %109, 0.000000e+00, !dbg !36
  %111 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %104, float %109) #3, !dbg !37
  %112 = select i1 %110, float 0.000000e+00, float %111, !dbg !38
  %113 = fmul float %108, %112, !dbg !39
  %114 = fadd float %92, %113, !dbg !40
  %115 = fadd float %59, %68, !dbg !41
  %116 = select i1 %18, float %115, float 0.000000e+00, !dbg !41
  %117 = fmul float %108, %108, !dbg !42
  %118 = fmul float %117, %100, !dbg !43
  %119 = fmul float %118, %112, !dbg !44
  %120 = fadd float %116, %119, !dbg !45
  %121 = fsub float %97, %93, !dbg !30
  %122 = fadd float %101, %105, !dbg !35
  %123 = fcmp oeq float %122, 0.000000e+00, !dbg !36
  %124 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %105, float %122) #3, !dbg !37
  %125 = select i1 %123, float 0.000000e+00, float %124, !dbg !38
  %126 = fmul float %121, %125, !dbg !39
  %127 = fadd float %93, %126, !dbg !40
  %128 = fadd float %60, %69, !dbg !41
  %129 = select i1 %18, float %128, float 0.000000e+00, !dbg !41
  %130 = fmul float %121, %121, !dbg !42
  %131 = fmul float %130, %101, !dbg !43
  %132 = fmul float %131, %125, !dbg !44
  %133 = fadd float %129, %132, !dbg !45
  %134 = fsub float %98, %94, !dbg !30
  %135 = fadd float %102, %106, !dbg !35
  %136 = fcmp oeq float %135, 0.000000e+00, !dbg !36
  %137 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %106, float %135) #3, !dbg !37
  %138 = select i1 %136, float 0.000000e+00, float %137, !dbg !38
  %139 = fmul float %134, %138, !dbg !39
  %140 = fadd float %94, %139, !dbg !40
  %141 = fadd float %61, %70, !dbg !41
  %142 = select i1 %18, float %141, float 0.000000e+00, !dbg !41
  %143 = fmul float %134, %134, !dbg !42
  %144 = fmul float %143, %102, !dbg !43
  %145 = fmul float %144, %138, !dbg !44
  %146 = fadd float %142, %145, !dbg !45
  %147 = fsub float %99, %95, !dbg !30
  %148 = fadd float %103, %107, !dbg !35
  %149 = fcmp oeq float %148, 0.000000e+00, !dbg !36
  %150 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %107, float %148) #3, !dbg !37
  %151 = select i1 %149, float 0.000000e+00, float %150, !dbg !38
  %152 = fmul float %147, %151, !dbg !39
  %153 = fadd float %95, %152, !dbg !40
  %154 = fadd float %62, %71, !dbg !41
  %155 = select i1 %18, float %154, float 0.000000e+00, !dbg !41
  %156 = fmul float %147, %147, !dbg !42
  %157 = fmul float %156, %103, !dbg !43
  %158 = fmul float %157, %151, !dbg !44
  %159 = fadd float %155, %158, !dbg !45
  %160 = bitcast float %114 to i32, !dbg !46
  %161 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %160, i32 16, i32 31), !dbg !46
  %162 = bitcast i32 %161 to float, !dbg !46
  %163 = bitcast float %120 to i32, !dbg !46
  %164 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %163, i32 16, i32 31), !dbg !46
  %165 = bitcast i32 %164 to float, !dbg !46
  %166 = bitcast float %109 to i32, !dbg !46
  %167 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %166, i32 16, i32 31), !dbg !46
  %168 = bitcast i32 %167 to float, !dbg !46
  %169 = fsub float %162, %114, !dbg !30
  %170 = fadd float %109, %168, !dbg !35
  %171 = fcmp oeq float %170, 0.000000e+00, !dbg !36
  %172 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %168, float %170) #3, !dbg !37
  %173 = select i1 %171, float 0.000000e+00, float %172, !dbg !38
  %174 = fmul float %169, %173, !dbg !39
  %175 = fadd float %114, %174, !dbg !40
  %176 = fadd float %120, %165, !dbg !41
  %177 = fmul float %169, %169, !dbg !42
  %178 = fmul float %109, %177, !dbg !43
  %179 = fmul float %178, %173, !dbg !44
  %180 = fadd float %176, %179, !dbg !45
  %181 = bitcast float %175 to i32, !dbg !46
  %182 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %181, i32 8, i32 31), !dbg !46
  %183 = bitcast i32 %182 to float, !dbg !46
  %184 = bitcast float %180 to i32, !dbg !46
  %185 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %184, i32 8, i32 31), !dbg !46
  %186 = bitcast i32 %185 to float, !dbg !46
  %187 = bitcast float %170 to i32, !dbg !46
  %188 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %187, i32 8, i32 31), !dbg !46
  %189 = bitcast i32 %188 to float, !dbg !46
  %190 = fsub float %183, %175, !dbg !30
  %191 = fadd float %170, %189, !dbg !35
  %192 = fcmp oeq float %191, 0.000000e+00, !dbg !36
  %193 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %189, float %191) #3, !dbg !37
  %194 = select i1 %192, float 0.000000e+00, float %193, !dbg !38
  %195 = fmul float %190, %194, !dbg !39
  %196 = fadd float %175, %195, !dbg !40
  %197 = fadd float %180, %186, !dbg !41
  %198 = fmul float %190, %190, !dbg !42
  %199 = fmul float %170, %198, !dbg !43
  %200 = fmul float %194, %199, !dbg !44
  %201 = fadd float %197, %200, !dbg !45
  %202 = bitcast float %127 to i32, !dbg !46
  %203 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %202, i32 16, i32 31), !dbg !46
  %204 = bitcast i32 %203 to float, !dbg !46
  %205 = bitcast float %133 to i32, !dbg !46
  %206 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %205, i32 16, i32 31), !dbg !46
  %207 = bitcast i32 %206 to float, !dbg !46
  %208 = bitcast float %122 to i32, !dbg !46
  %209 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %208, i32 16, i32 31), !dbg !46
  %210 = bitcast i32 %209 to float, !dbg !46
  %211 = fsub float %204, %127, !dbg !30
  %212 = fadd float %122, %210, !dbg !35
  %213 = fcmp oeq float %212, 0.000000e+00, !dbg !36
  %214 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %210, float %212) #3, !dbg !37
  %215 = select i1 %213, float 0.000000e+00, float %214, !dbg !38
  %216 = fmul float %211, %215, !dbg !39
  %217 = fadd float %127, %216, !dbg !40
  %218 = fadd float %133, %207, !dbg !41
  %219 = fmul float %211, %211, !dbg !42
  %220 = fmul float %122, %219, !dbg !43
  %221 = fmul float %220, %215, !dbg !44
  %222 = fadd float %218, %221, !dbg !45
  %223 = bitcast float %217 to i32, !dbg !46
  %224 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %223, i32 8, i32 31), !dbg !46
  %225 = bitcast i32 %224 to float, !dbg !46
  %226 = bitcast float %222 to i32, !dbg !46
  %227 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %226, i32 8, i32 31), !dbg !46
  %228 = bitcast i32 %227 to float, !dbg !46
  %229 = bitcast float %212 to i32, !dbg !46
  %230 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %229, i32 8, i32 31), !dbg !46
  %231 = bitcast i32 %230 to float, !dbg !46
  %232 = fsub float %225, %217, !dbg !30
  %233 = fadd float %212, %231, !dbg !35
  %234 = fcmp oeq float %233, 0.000000e+00, !dbg !36
  %235 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %231, float %233) #3, !dbg !37
  %236 = select i1 %234, float 0.000000e+00, float %235, !dbg !38
  %237 = fmul float %232, %236, !dbg !39
  %238 = fadd float %217, %237, !dbg !40
  %239 = fadd float %222, %228, !dbg !41
  %240 = fmul float %232, %232, !dbg !42
  %241 = fmul float %212, %240, !dbg !43
  %242 = fmul float %236, %241, !dbg !44
  %243 = fadd float %239, %242, !dbg !45
  %244 = bitcast float %140 to i32, !dbg !46
  %245 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %244, i32 16, i32 31), !dbg !46
  %246 = bitcast i32 %245 to float, !dbg !46
  %247 = bitcast float %146 to i32, !dbg !46
  %248 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %247, i32 16, i32 31), !dbg !46
  %249 = bitcast i32 %248 to float, !dbg !46
  %250 = bitcast float %135 to i32, !dbg !46
  %251 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %250, i32 16, i32 31), !dbg !46
  %252 = bitcast i32 %251 to float, !dbg !46
  %253 = fsub float %246, %140, !dbg !30
  %254 = fadd float %135, %252, !dbg !35
  %255 = fcmp oeq float %254, 0.000000e+00, !dbg !36
  %256 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %252, float %254) #3, !dbg !37
  %257 = select i1 %255, float 0.000000e+00, float %256, !dbg !38
  %258 = fmul float %253, %257, !dbg !39
  %259 = fadd float %140, %258, !dbg !40
  %260 = fadd float %146, %249, !dbg !41
  %261 = fmul float %253, %253, !dbg !42
  %262 = fmul float %135, %261, !dbg !43
  %263 = fmul float %262, %257, !dbg !44
  %264 = fadd float %260, %263, !dbg !45
  %265 = bitcast float %259 to i32, !dbg !46
  %266 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %265, i32 8, i32 31), !dbg !46
  %267 = bitcast i32 %266 to float, !dbg !46
  %268 = bitcast float %264 to i32, !dbg !46
  %269 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %268, i32 8, i32 31), !dbg !46
  %270 = bitcast i32 %269 to float, !dbg !46
  %271 = bitcast float %254 to i32, !dbg !46
  %272 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %271, i32 8, i32 31), !dbg !46
  %273 = bitcast i32 %272 to float, !dbg !46
  %274 = fsub float %267, %259, !dbg !30
  %275 = fadd float %254, %273, !dbg !35
  %276 = fcmp oeq float %275, 0.000000e+00, !dbg !36
  %277 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %273, float %275) #3, !dbg !37
  %278 = select i1 %276, float 0.000000e+00, float %277, !dbg !38
  %279 = fmul float %274, %278, !dbg !39
  %280 = fadd float %259, %279, !dbg !40
  %281 = fadd float %264, %270, !dbg !41
  %282 = fmul float %274, %274, !dbg !42
  %283 = fmul float %254, %282, !dbg !43
  %284 = fmul float %278, %283, !dbg !44
  %285 = fadd float %281, %284, !dbg !45
  %286 = bitcast float %153 to i32, !dbg !46
  %287 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %286, i32 16, i32 31), !dbg !46
  %288 = bitcast i32 %287 to float, !dbg !46
  %289 = bitcast float %159 to i32, !dbg !46
  %290 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %289, i32 16, i32 31), !dbg !46
  %291 = bitcast i32 %290 to float, !dbg !46
  %292 = bitcast float %148 to i32, !dbg !46
  %293 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %292, i32 16, i32 31), !dbg !46
  %294 = bitcast i32 %293 to float, !dbg !46
  %295 = fsub float %288, %153, !dbg !30
  %296 = fadd float %148, %294, !dbg !35
  %297 = fcmp oeq float %296, 0.000000e+00, !dbg !36
  %298 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %294, float %296) #3, !dbg !37
  %299 = select i1 %297, float 0.000000e+00, float %298, !dbg !38
  %300 = fmul float %295, %299, !dbg !39
  %301 = fadd float %153, %300, !dbg !40
  %302 = fadd float %159, %291, !dbg !41
  %303 = fmul float %295, %295, !dbg !42
  %304 = fmul float %148, %303, !dbg !43
  %305 = fmul float %304, %299, !dbg !44
  %306 = fadd float %302, %305, !dbg !45
  %307 = bitcast float %301 to i32, !dbg !46
  %308 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %307, i32 8, i32 31), !dbg !46
  %309 = bitcast i32 %308 to float, !dbg !46
  %310 = bitcast float %306 to i32, !dbg !46
  %311 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %310, i32 8, i32 31), !dbg !46
  %312 = bitcast i32 %311 to float, !dbg !46
  %313 = bitcast float %296 to i32, !dbg !46
  %314 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %313, i32 8, i32 31), !dbg !46
  %315 = bitcast i32 %314 to float, !dbg !46
  %316 = fsub float %309, %301, !dbg !30
  %317 = fadd float %296, %315, !dbg !35
  %318 = fcmp oeq float %317, 0.000000e+00, !dbg !36
  %319 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %315, float %317) #3, !dbg !37
  %320 = select i1 %318, float 0.000000e+00, float %319, !dbg !38
  %321 = fmul float %316, %320, !dbg !39
  %322 = fadd float %301, %321, !dbg !40
  %323 = fadd float %306, %312, !dbg !41
  %324 = fmul float %316, %316, !dbg !42
  %325 = fmul float %296, %324, !dbg !43
  %326 = fmul float %320, %325, !dbg !44
  %327 = fadd float %323, %326, !dbg !45
  %328 = icmp eq i32 %12, 0, !dbg !46
  %329 = and i32 %20, 7, !dbg !46
  %330 = shl nuw nsw i32 %14, 3, !dbg !46
  %331 = or disjoint i32 %330, %329, !dbg !46
  %332 = getelementptr float, ptr addrspace(3) @global_smem, i32 %331, !dbg !46
  %333 = bitcast float %196 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %332, <1 x i32> %333, i1 %328) #3, !dbg !46
  %334 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %331, !dbg !46
  %335 = bitcast float %201 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %334, <1 x i32> %335, i1 %328) #3, !dbg !46
  %336 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 2048), i32 %331, !dbg !46
  %337 = bitcast float %191 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %336, <1 x i32> %337, i1 %328) #3, !dbg !46
  %338 = or disjoint i32 %330, 8, !dbg !46
  %339 = or disjoint i32 %338, %329, !dbg !46
  %340 = getelementptr float, ptr addrspace(3) @global_smem, i32 %339, !dbg !46
  %341 = bitcast float %238 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %340, <1 x i32> %341, i1 %328) #3, !dbg !46
  %342 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %339, !dbg !46
  %343 = bitcast float %243 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %342, <1 x i32> %343, i1 %328) #3, !dbg !46
  %344 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 2048), i32 %339, !dbg !46
  %345 = bitcast float %233 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %344, <1 x i32> %345, i1 %328) #3, !dbg !46
  %346 = or disjoint i32 %330, 16, !dbg !46
  %347 = or disjoint i32 %346, %329, !dbg !46
  %348 = getelementptr float, ptr addrspace(3) @global_smem, i32 %347, !dbg !46
  %349 = bitcast float %280 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %348, <1 x i32> %349, i1 %328) #3, !dbg !46
  %350 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %347, !dbg !46
  %351 = bitcast float %285 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %350, <1 x i32> %351, i1 %328) #3, !dbg !46
  %352 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 2048), i32 %347, !dbg !46
  %353 = bitcast float %275 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %352, <1 x i32> %353, i1 %328) #3, !dbg !46
  %354 = or disjoint i32 %330, 24, !dbg !46
  %355 = or disjoint i32 %354, %329, !dbg !46
  %356 = getelementptr float, ptr addrspace(3) @global_smem, i32 %355, !dbg !46
  %357 = bitcast float %322 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %356, <1 x i32> %357, i1 %328) #3, !dbg !46
  %358 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %355, !dbg !46
  %359 = bitcast float %327 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %358, <1 x i32> %359, i1 %328) #3, !dbg !46
  %360 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 2048), i32 %355, !dbg !46
  %361 = bitcast float %317 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %360, <1 x i32> %361, i1 %328) #3, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %362 = icmp slt i32 %11, 256, !dbg !46
  %363 = getelementptr float, ptr addrspace(3) @global_smem, i32 %11, !dbg !46
  %364 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %363, i1 %362) #3, !dbg !46
  %365 = bitcast i32 %364 to float, !dbg !46
  %366 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %11, !dbg !46
  %367 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %366, i1 %362) #3, !dbg !46
  %368 = bitcast i32 %367 to float, !dbg !46
  %369 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 2048), i32 %11, !dbg !46
  %370 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %369, i1 %362) #3, !dbg !46
  %371 = bitcast i32 %370 to float, !dbg !46
  %372 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %364, i32 4, i32 31), !dbg !46
  %373 = bitcast i32 %372 to float, !dbg !46
  %374 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %367, i32 4, i32 31), !dbg !46
  %375 = bitcast i32 %374 to float, !dbg !46
  %376 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %370, i32 4, i32 31), !dbg !46
  %377 = bitcast i32 %376 to float, !dbg !46
  %378 = fsub float %373, %365, !dbg !30
  %379 = fadd float %371, %377, !dbg !35
  %380 = fcmp oeq float %379, 0.000000e+00, !dbg !36
  %381 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %377, float %379) #3, !dbg !37
  %382 = select i1 %380, float 0.000000e+00, float %381, !dbg !38
  %383 = fmul float %378, %382, !dbg !39
  %384 = fadd float %383, %365, !dbg !40
  %385 = fadd float %368, %375, !dbg !41
  %386 = fmul float %378, %378, !dbg !42
  %387 = fmul float %386, %371, !dbg !43
  %388 = fmul float %387, %382, !dbg !44
  %389 = fadd float %385, %388, !dbg !45
  %390 = bitcast float %384 to i32, !dbg !46
  %391 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %390, i32 2, i32 31), !dbg !46
  %392 = bitcast i32 %391 to float, !dbg !46
  %393 = bitcast float %389 to i32, !dbg !46
  %394 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %393, i32 2, i32 31), !dbg !46
  %395 = bitcast i32 %394 to float, !dbg !46
  %396 = bitcast float %379 to i32, !dbg !46
  %397 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %396, i32 2, i32 31), !dbg !46
  %398 = bitcast i32 %397 to float, !dbg !46
  %399 = fsub float %392, %384, !dbg !30
  %400 = fadd float %379, %398, !dbg !35
  %401 = fcmp oeq float %400, 0.000000e+00, !dbg !36
  %402 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %398, float %400) #3, !dbg !37
  %403 = select i1 %401, float 0.000000e+00, float %402, !dbg !38
  %404 = fmul float %399, %403, !dbg !39
  %405 = fadd float %384, %404, !dbg !40
  %406 = fadd float %389, %395, !dbg !41
  %407 = fmul float %399, %399, !dbg !42
  %408 = fmul float %379, %407, !dbg !43
  %409 = fmul float %403, %408, !dbg !44
  %410 = fadd float %406, %409, !dbg !45
  %411 = bitcast float %405 to i32, !dbg !46
  %412 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %411, i32 1, i32 31), !dbg !46
  %413 = bitcast i32 %412 to float, !dbg !46
  %414 = bitcast float %410 to i32, !dbg !46
  %415 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %414, i32 1, i32 31), !dbg !46
  %416 = bitcast i32 %415 to float, !dbg !46
  %417 = bitcast float %400 to i32, !dbg !46
  %418 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %417, i32 1, i32 31), !dbg !46
  %419 = bitcast i32 %418 to float, !dbg !46
  %420 = fsub float %413, %405, !dbg !30
  %421 = fadd float %400, %419, !dbg !35
  %422 = fcmp oeq float %421, 0.000000e+00, !dbg !36
  %423 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %419, float %421) #3, !dbg !37
  %424 = select i1 %422, float 0.000000e+00, float %423, !dbg !38
  %425 = fmul float %420, %424, !dbg !39
  %426 = fadd float %405, %425, !dbg !40
  %427 = fadd float %410, %416, !dbg !41
  %428 = fmul float %420, %420, !dbg !42
  %429 = fmul float %400, %428, !dbg !43
  %430 = fmul float %424, %429, !dbg !44
  %431 = fadd float %427, %430, !dbg !45
  %432 = and i32 %11, 7, !dbg !46
  %433 = icmp eq i32 %432, 0, !dbg !46
  %434 = and i1 %362, %433, !dbg !46
  %435 = bitcast float %426 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %363, <1 x i32> %435, i1 %434) #3, !dbg !46
  %436 = bitcast float %431 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %366, <1 x i32> %436, i1 %434) #3, !dbg !46
  %437 = bitcast float %421 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %369, <1 x i32> %437, i1 %434) #3, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %438 = getelementptr float, ptr addrspace(3) @global_smem, i32 %330, !dbg !46
  %439 = load i32, ptr addrspace(3) %438, align 16, !dbg !46
  %440 = getelementptr float, ptr addrspace(3) @global_smem, i32 %338, !dbg !46
  %441 = load i32, ptr addrspace(3) %440, align 16, !dbg !46
  %442 = getelementptr float, ptr addrspace(3) @global_smem, i32 %346, !dbg !46
  %443 = load i32, ptr addrspace(3) %442, align 16, !dbg !46
  %444 = getelementptr float, ptr addrspace(3) @global_smem, i32 %354, !dbg !46
  %445 = load i32, ptr addrspace(3) %444, align 16, !dbg !46
  %446 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %330, !dbg !46
  %447 = load i32, ptr addrspace(3) %446, align 16, !dbg !46
  %448 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %338, !dbg !46
  %449 = load i32, ptr addrspace(3) %448, align 16, !dbg !46
  %450 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %346, !dbg !46
  %451 = load i32, ptr addrspace(3) %450, align 16, !dbg !46
  %452 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %354, !dbg !46
  %453 = load i32, ptr addrspace(3) %452, align 16, !dbg !46
  %454 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 2048), i32 %330, !dbg !46
  %455 = load i32, ptr addrspace(3) %454, align 16, !dbg !46
  %456 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 2048), i32 %338, !dbg !46
  %457 = load i32, ptr addrspace(3) %456, align 16, !dbg !46
  %458 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 2048), i32 %346, !dbg !46
  %459 = load i32, ptr addrspace(3) %458, align 16, !dbg !46
  %460 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 2048), i32 %354, !dbg !46
  %461 = load i32, ptr addrspace(3) %460, align 16, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %462 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !47
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %462, i32 %439, i32 %441, i32 %443, i32 %445, i1 true) #3, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %463 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !47
  %464 = load i32, ptr addrspace(3) %463, align 4, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %462, i32 %447, i32 %449, i32 %451, i32 %453, i1 true) #3, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %465 = load i32, ptr addrspace(3) %463, align 4, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %462, i32 %455, i32 %457, i32 %459, i32 %461, i1 true) #3, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %466 = load i32, ptr addrspace(3) %463, align 4, !dbg !49
  %467 = sext i32 %17 to i64, !dbg !50
  %468 = getelementptr float, ptr addrspace(1) %3, i64 %467, !dbg !50
  %469 = icmp eq i32 %329, 0, !dbg !51
  %470 = and i1 %469, %19, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %464, ptr addrspace(1) %468, i1 %470) #3, !dbg !51
  %471 = getelementptr float, ptr addrspace(1) %4, i64 %467, !dbg !52
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %465, ptr addrspace(1) %471, i1 %470) #3, !dbg !53
  %472 = getelementptr float, ptr addrspace(1) %5, i64 %467, !dbg !54
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %466, ptr addrspace(1) %472, i1 %470) #3, !dbg !55
  ret void, !dbg !56
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cyeui2lht3knynurs52qaf2q46deivrsrrh36gte3hjzyxmcwzft.py", directory: "inductor_cache/ye")
!4 = !{ptr @triton_per_fused_native_group_norm_16, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_native_group_norm_16, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_native_group_norm_16", linkageName: "triton_per_fused_native_group_norm_16", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 19, scope: !7)
!17 = !DILocation(line: 30, column: 19, scope: !7)
!18 = !DILocation(line: 33, column: 38, scope: !7)
!19 = !DILocation(line: 33, column: 48, scope: !7)
!20 = !DILocation(line: 33, column: 35, scope: !7)
!21 = !DILocation(line: 33, column: 43, scope: !7)
!22 = !DILocation(line: 33, column: 30, scope: !7)
!23 = !DILocation(line: 33, column: 53, scope: !7)
!24 = !DILocation(line: 34, column: 30, scope: !7)
!25 = !DILocation(line: 34, column: 53, scope: !7)
!26 = !DILocation(line: 35, column: 30, scope: !7)
!27 = !DILocation(line: 35, column: 53, scope: !7)
!28 = !DILocation(line: 39, column: 33, scope: !7)
!29 = !DILocation(line: 41, column: 33, scope: !7)
!30 = !DILocation(line: 192, column: 21, scope: !31, inlinedAt: !34)
!31 = distinct !DILexicalBlockFile(scope: !33, file: !32, discriminator: 0)
!32 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!33 = distinct !DILexicalBlockFile(scope: !7, file: !32, discriminator: 0)
!34 = !DILocation(line: 42, column: 67, scope: !7)
!35 = !DILocation(line: 193, column: 28, scope: !31, inlinedAt: !34)
!36 = !DILocation(line: 194, column: 39, scope: !31, inlinedAt: !34)
!37 = !DILocation(line: 194, column: 60, scope: !31, inlinedAt: !34)
!38 = !DILocation(line: 194, column: 49, scope: !31, inlinedAt: !34)
!39 = !DILocation(line: 196, column: 25, scope: !31, inlinedAt: !34)
!40 = !DILocation(line: 196, column: 17, scope: !31, inlinedAt: !34)
!41 = !DILocation(line: 197, column: 15, scope: !31, inlinedAt: !34)
!42 = !DILocation(line: 197, column: 30, scope: !31, inlinedAt: !34)
!43 = !DILocation(line: 197, column: 38, scope: !31, inlinedAt: !34)
!44 = !DILocation(line: 197, column: 49, scope: !31, inlinedAt: !34)
!45 = !DILocation(line: 197, column: 22, scope: !31, inlinedAt: !34)
!46 = !DILocation(line: 204, column: 46, scope: !33, inlinedAt: !34)
!47 = !DILocation(line: 43, column: 18, scope: !7)
!48 = !DILocation(line: 44, column: 18, scope: !7)
!49 = !DILocation(line: 45, column: 18, scope: !7)
!50 = !DILocation(line: 46, column: 25, scope: !7)
!51 = !DILocation(line: 46, column: 37, scope: !7)
!52 = !DILocation(line: 47, column: 25, scope: !7)
!53 = !DILocation(line: 47, column: 37, scope: !7)
!54 = !DILocation(line: 48, column: 25, scope: !7)
!55 = !DILocation(line: 48, column: 37, scope: !7)
!56 = !DILocation(line: 48, column: 4, scope: !7)
