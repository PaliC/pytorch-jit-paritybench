; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_add_convolution_relu_sigmoid_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 8, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 2, !dbg !12
  %10 = and i32 %9, 15, !dbg !12
  %11 = lshr i32 %8, 2, !dbg !12
  %12 = and i32 %11, 16, !dbg !12
  %13 = or disjoint i32 %10, %12, !dbg !12
  %14 = lshr i32 %8, 2, !dbg !12
  %15 = and i32 %14, 32, !dbg !12
  %16 = or disjoint i32 %13, %15, !dbg !12
  %17 = or disjoint i32 %16, 64, !dbg !12
  %18 = or disjoint i32 %16, 128, !dbg !12
  %19 = or disjoint i32 %16, 192, !dbg !12
  %20 = shl i32 %8, 2, !dbg !12
  %21 = and i32 %20, 12, !dbg !12
  %22 = and i32 %20, 252, !dbg !12
  %23 = or disjoint i32 %7, %16, !dbg !13
  %24 = or disjoint i32 %7, %17, !dbg !13
  %25 = or disjoint i32 %7, %18, !dbg !13
  %26 = or disjoint i32 %7, %19, !dbg !13
  %27 = or disjoint i32 %7, %22, !dbg !13
  %28 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %29 = shl i32 %28, 4, !dbg !15
  %.lobit118 = lshr i32 %8, 6, !dbg !16
  %30 = and i32 %.lobit118, 3, !dbg !16
  %31 = or disjoint i32 %29, %21, !dbg !17
  %32 = or disjoint i32 %29, %30, !dbg !17
  %33 = or disjoint i32 %32, 4, !dbg !17
  %34 = or disjoint i32 %32, 8, !dbg !17
  %35 = or disjoint i32 %32, 12, !dbg !17
  %36 = icmp slt i32 %31, 256, !dbg !18
  %37 = icmp slt i32 %32, 256, !dbg !18
  %38 = icmp slt i32 %33, 256, !dbg !18
  %39 = icmp slt i32 %34, 256, !dbg !18
  %40 = icmp slt i32 %35, 256, !dbg !18
  %.frozen = freeze i32 %27, !dbg !19
  %41 = sdiv i32 %.frozen, 4096, !dbg !19
  %42 = mul i32 %41, 4096, !dbg !20
  %.decomposed = sub i32 %.frozen, %42, !dbg !20
  %43 = shl i32 %23, 8, !dbg !21
  %44 = shl i32 %24, 8, !dbg !21
  %45 = shl i32 %25, 8, !dbg !21
  %46 = shl i32 %26, 8, !dbg !21
  %47 = add i32 %31, %43, !dbg !22
  %48 = add i32 %31, %44, !dbg !22
  %49 = add i32 %31, %45, !dbg !22
  %50 = add i32 %31, %46, !dbg !22
  %51 = sext i32 %47 to i64, !dbg !23
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !23
  %53 = sext i32 %48 to i64, !dbg !23
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !23
  %55 = sext i32 %49 to i64, !dbg !23
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !23
  %57 = sext i32 %50 to i64, !dbg !23
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !23
  %59 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %52, i1 %36) #2, !dbg !24
  %60 = extractvalue { i32, i32, i32, i32 } %59, 0, !dbg !24
  %61 = extractvalue { i32, i32, i32, i32 } %59, 1, !dbg !24
  %62 = extractvalue { i32, i32, i32, i32 } %59, 2, !dbg !24
  %63 = extractvalue { i32, i32, i32, i32 } %59, 3, !dbg !24
  %64 = bitcast i32 %60 to float, !dbg !24
  %65 = bitcast i32 %61 to float, !dbg !24
  %66 = bitcast i32 %62 to float, !dbg !24
  %67 = bitcast i32 %63 to float, !dbg !24
  %68 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %54, i1 %36) #2, !dbg !24
  %69 = extractvalue { i32, i32, i32, i32 } %68, 0, !dbg !24
  %70 = extractvalue { i32, i32, i32, i32 } %68, 1, !dbg !24
  %71 = extractvalue { i32, i32, i32, i32 } %68, 2, !dbg !24
  %72 = extractvalue { i32, i32, i32, i32 } %68, 3, !dbg !24
  %73 = bitcast i32 %69 to float, !dbg !24
  %74 = bitcast i32 %70 to float, !dbg !24
  %75 = bitcast i32 %71 to float, !dbg !24
  %76 = bitcast i32 %72 to float, !dbg !24
  %77 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %56, i1 %36) #2, !dbg !24
  %78 = extractvalue { i32, i32, i32, i32 } %77, 0, !dbg !24
  %79 = extractvalue { i32, i32, i32, i32 } %77, 1, !dbg !24
  %80 = extractvalue { i32, i32, i32, i32 } %77, 2, !dbg !24
  %81 = extractvalue { i32, i32, i32, i32 } %77, 3, !dbg !24
  %82 = bitcast i32 %78 to float, !dbg !24
  %83 = bitcast i32 %79 to float, !dbg !24
  %84 = bitcast i32 %80 to float, !dbg !24
  %85 = bitcast i32 %81 to float, !dbg !24
  %86 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %58, i1 %36) #2, !dbg !24
  %87 = extractvalue { i32, i32, i32, i32 } %86, 0, !dbg !24
  %88 = extractvalue { i32, i32, i32, i32 } %86, 1, !dbg !24
  %89 = extractvalue { i32, i32, i32, i32 } %86, 2, !dbg !24
  %90 = extractvalue { i32, i32, i32, i32 } %86, 3, !dbg !24
  %91 = bitcast i32 %87 to float, !dbg !24
  %92 = bitcast i32 %88 to float, !dbg !24
  %93 = bitcast i32 %89 to float, !dbg !24
  %94 = bitcast i32 %90 to float, !dbg !24
  %95 = sext i32 %31 to i64, !dbg !25
  %96 = getelementptr float, ptr addrspace(1) %1, i64 %95, !dbg !25
  %97 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %96, i1 %36) #2, !dbg !26
  %98 = extractvalue { i32, i32, i32, i32 } %97, 0, !dbg !26
  %99 = extractvalue { i32, i32, i32, i32 } %97, 1, !dbg !26
  %100 = extractvalue { i32, i32, i32, i32 } %97, 2, !dbg !26
  %101 = extractvalue { i32, i32, i32, i32 } %97, 3, !dbg !26
  %102 = bitcast i32 %98 to float, !dbg !26
  %103 = bitcast i32 %99 to float, !dbg !26
  %104 = bitcast i32 %100 to float, !dbg !26
  %105 = bitcast i32 %101 to float, !dbg !26
  %106 = shl i32 %32, 12, !dbg !27
  %107 = shl i32 %33, 12, !dbg !27
  %108 = shl i32 %34, 12, !dbg !27
  %109 = shl i32 %35, 12, !dbg !27
  %110 = shl i32 %41, 20, !dbg !28
  %111 = add i32 %110, %.decomposed, !dbg !29
  %112 = add i32 %111, %106, !dbg !30
  %113 = add i32 %111, %107, !dbg !30
  %114 = add i32 %111, %108, !dbg !30
  %115 = add i32 %111, %109, !dbg !30
  %116 = sext i32 %112 to i64, !dbg !31
  %117 = getelementptr float, ptr addrspace(1) %2, i64 %116, !dbg !31
  %118 = sext i32 %113 to i64, !dbg !31
  %119 = getelementptr float, ptr addrspace(1) %2, i64 %118, !dbg !31
  %120 = sext i32 %114 to i64, !dbg !31
  %121 = getelementptr float, ptr addrspace(1) %2, i64 %120, !dbg !31
  %122 = sext i32 %115 to i64, !dbg !31
  %123 = getelementptr float, ptr addrspace(1) %2, i64 %122, !dbg !31
  %124 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %117, i1 %37) #2, !dbg !32
  %125 = extractvalue { i32, i32, i32, i32 } %124, 0, !dbg !32
  %126 = extractvalue { i32, i32, i32, i32 } %124, 1, !dbg !32
  %127 = extractvalue { i32, i32, i32, i32 } %124, 2, !dbg !32
  %128 = extractvalue { i32, i32, i32, i32 } %124, 3, !dbg !32
  %129 = bitcast i32 %125 to float, !dbg !32
  %130 = bitcast i32 %126 to float, !dbg !32
  %131 = bitcast i32 %127 to float, !dbg !32
  %132 = bitcast i32 %128 to float, !dbg !32
  %133 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %119, i1 %38) #2, !dbg !32
  %134 = extractvalue { i32, i32, i32, i32 } %133, 0, !dbg !32
  %135 = extractvalue { i32, i32, i32, i32 } %133, 1, !dbg !32
  %136 = extractvalue { i32, i32, i32, i32 } %133, 2, !dbg !32
  %137 = extractvalue { i32, i32, i32, i32 } %133, 3, !dbg !32
  %138 = bitcast i32 %134 to float, !dbg !32
  %139 = bitcast i32 %135 to float, !dbg !32
  %140 = bitcast i32 %136 to float, !dbg !32
  %141 = bitcast i32 %137 to float, !dbg !32
  %142 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %121, i1 %39) #2, !dbg !32
  %143 = extractvalue { i32, i32, i32, i32 } %142, 0, !dbg !32
  %144 = extractvalue { i32, i32, i32, i32 } %142, 1, !dbg !32
  %145 = extractvalue { i32, i32, i32, i32 } %142, 2, !dbg !32
  %146 = extractvalue { i32, i32, i32, i32 } %142, 3, !dbg !32
  %147 = bitcast i32 %143 to float, !dbg !32
  %148 = bitcast i32 %144 to float, !dbg !32
  %149 = bitcast i32 %145 to float, !dbg !32
  %150 = bitcast i32 %146 to float, !dbg !32
  %151 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %123, i1 %40) #2, !dbg !32
  %152 = extractvalue { i32, i32, i32, i32 } %151, 0, !dbg !32
  %153 = extractvalue { i32, i32, i32, i32 } %151, 1, !dbg !32
  %154 = extractvalue { i32, i32, i32, i32 } %151, 2, !dbg !32
  %155 = extractvalue { i32, i32, i32, i32 } %151, 3, !dbg !32
  %156 = bitcast i32 %152 to float, !dbg !32
  %157 = bitcast i32 %153 to float, !dbg !32
  %158 = bitcast i32 %154 to float, !dbg !32
  %159 = bitcast i32 %155 to float, !dbg !32
  %160 = fadd float %64, %102, !dbg !33
  %161 = fadd float %65, %103, !dbg !33
  %162 = fadd float %66, %104, !dbg !33
  %163 = fadd float %67, %105, !dbg !33
  %164 = fadd float %73, %102, !dbg !33
  %165 = fadd float %74, %103, !dbg !33
  %166 = fadd float %75, %104, !dbg !33
  %167 = fadd float %76, %105, !dbg !33
  %168 = fadd float %82, %102, !dbg !33
  %169 = fadd float %83, %103, !dbg !33
  %170 = fadd float %84, %104, !dbg !33
  %171 = fadd float %85, %105, !dbg !33
  %172 = fadd float %91, %102, !dbg !33
  %173 = fadd float %92, %103, !dbg !33
  %174 = fadd float %93, %104, !dbg !33
  %175 = fadd float %94, %105, !dbg !33
  %176 = shl i32 %8, 10, !dbg !33
  %177 = and i32 %176, 3072, !dbg !33
  %178 = and i32 %9, 15, !dbg !33
  %179 = or disjoint i32 %178, %177, !dbg !33
  %180 = or disjoint i32 %12, %179, !dbg !33
  %181 = or disjoint i32 %180, %15, !dbg !33
  %182 = and i32 %20, 1020, !dbg !33
  %183 = lshr exact i32 %177, 4, !dbg !33
  %184 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %183, !dbg !33
  %185 = getelementptr float, ptr addrspace(3) %184, i32 %181, !dbg !33
  %186 = bitcast float %160 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %185, <1 x i32> %186, i1 true) #2, !dbg !33
  %187 = or disjoint i32 %181, 256, !dbg !33
  %188 = lshr i32 %187, 6, !dbg !33
  %189 = and i32 %188, 67108860, !dbg !33
  %190 = getelementptr float, ptr addrspace(3) @global_smem, i32 %189, !dbg !33
  %191 = getelementptr float, ptr addrspace(3) %190, i32 %187, !dbg !33
  %192 = bitcast float %161 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %191, <1 x i32> %192, i1 true) #2, !dbg !33
  %193 = or disjoint i32 %181, 512, !dbg !33
  %194 = lshr i32 %193, 6, !dbg !33
  %195 = and i32 %194, 67108860, !dbg !33
  %196 = getelementptr float, ptr addrspace(3) @global_smem, i32 %195, !dbg !33
  %197 = getelementptr float, ptr addrspace(3) %196, i32 %193, !dbg !33
  %198 = bitcast float %162 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %197, <1 x i32> %198, i1 true) #2, !dbg !33
  %199 = or disjoint i32 %181, 768, !dbg !33
  %200 = lshr i32 %199, 6, !dbg !33
  %201 = and i32 %200, 67108860, !dbg !33
  %202 = getelementptr float, ptr addrspace(3) @global_smem, i32 %201, !dbg !33
  %203 = getelementptr float, ptr addrspace(3) %202, i32 %199, !dbg !33
  %204 = bitcast float %163 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %203, <1 x i32> %204, i1 true) #2, !dbg !33
  %205 = or disjoint i32 %181, 64, !dbg !33
  %206 = getelementptr float, ptr addrspace(3) %184, i32 %205, !dbg !33
  %207 = bitcast float %164 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %206, <1 x i32> %207, i1 true) #2, !dbg !33
  %208 = or disjoint i32 %181, 320, !dbg !33
  %209 = lshr i32 %208, 6, !dbg !33
  %210 = and i32 %209, 67108860, !dbg !33
  %211 = getelementptr float, ptr addrspace(3) @global_smem, i32 %210, !dbg !33
  %212 = getelementptr float, ptr addrspace(3) %211, i32 %208, !dbg !33
  %213 = bitcast float %165 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %212, <1 x i32> %213, i1 true) #2, !dbg !33
  %214 = or disjoint i32 %181, 576, !dbg !33
  %215 = lshr i32 %214, 6, !dbg !33
  %216 = and i32 %215, 67108860, !dbg !33
  %217 = getelementptr float, ptr addrspace(3) @global_smem, i32 %216, !dbg !33
  %218 = getelementptr float, ptr addrspace(3) %217, i32 %214, !dbg !33
  %219 = bitcast float %166 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %218, <1 x i32> %219, i1 true) #2, !dbg !33
  %220 = or disjoint i32 %181, 832, !dbg !33
  %221 = lshr i32 %220, 6, !dbg !33
  %222 = and i32 %221, 67108860, !dbg !33
  %223 = getelementptr float, ptr addrspace(3) @global_smem, i32 %222, !dbg !33
  %224 = getelementptr float, ptr addrspace(3) %223, i32 %220, !dbg !33
  %225 = bitcast float %167 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %224, <1 x i32> %225, i1 true) #2, !dbg !33
  %226 = or disjoint i32 %181, 128, !dbg !33
  %227 = getelementptr float, ptr addrspace(3) %184, i32 %226, !dbg !33
  %228 = bitcast float %168 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %227, <1 x i32> %228, i1 true) #2, !dbg !33
  %229 = or disjoint i32 %181, 384, !dbg !33
  %230 = lshr i32 %229, 6, !dbg !33
  %231 = and i32 %230, 67108860, !dbg !33
  %232 = getelementptr float, ptr addrspace(3) @global_smem, i32 %231, !dbg !33
  %233 = getelementptr float, ptr addrspace(3) %232, i32 %229, !dbg !33
  %234 = bitcast float %169 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %233, <1 x i32> %234, i1 true) #2, !dbg !33
  %235 = or disjoint i32 %181, 640, !dbg !33
  %236 = lshr i32 %235, 6, !dbg !33
  %237 = and i32 %236, 67108860, !dbg !33
  %238 = getelementptr float, ptr addrspace(3) @global_smem, i32 %237, !dbg !33
  %239 = getelementptr float, ptr addrspace(3) %238, i32 %235, !dbg !33
  %240 = bitcast float %170 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %239, <1 x i32> %240, i1 true) #2, !dbg !33
  %241 = or disjoint i32 %181, 896, !dbg !33
  %242 = lshr i32 %241, 6, !dbg !33
  %243 = and i32 %242, 67108860, !dbg !33
  %244 = getelementptr float, ptr addrspace(3) @global_smem, i32 %243, !dbg !33
  %245 = getelementptr float, ptr addrspace(3) %244, i32 %241, !dbg !33
  %246 = bitcast float %171 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %245, <1 x i32> %246, i1 true) #2, !dbg !33
  %247 = or disjoint i32 %181, 192, !dbg !33
  %248 = getelementptr float, ptr addrspace(3) %184, i32 %247, !dbg !33
  %249 = bitcast float %172 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %248, <1 x i32> %249, i1 true) #2, !dbg !33
  %250 = or disjoint i32 %181, 448, !dbg !33
  %251 = lshr i32 %250, 6, !dbg !33
  %252 = and i32 %251, 67108860, !dbg !33
  %253 = getelementptr float, ptr addrspace(3) @global_smem, i32 %252, !dbg !33
  %254 = getelementptr float, ptr addrspace(3) %253, i32 %250, !dbg !33
  %255 = bitcast float %173 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %254, <1 x i32> %255, i1 true) #2, !dbg !33
  %256 = or disjoint i32 %181, 704, !dbg !33
  %257 = lshr i32 %256, 6, !dbg !33
  %258 = and i32 %257, 67108860, !dbg !33
  %259 = getelementptr float, ptr addrspace(3) @global_smem, i32 %258, !dbg !33
  %260 = getelementptr float, ptr addrspace(3) %259, i32 %256, !dbg !33
  %261 = bitcast float %174 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %260, <1 x i32> %261, i1 true) #2, !dbg !33
  %262 = or disjoint i32 %181, 960, !dbg !33
  %263 = lshr i32 %262, 6, !dbg !33
  %264 = and i32 %263, 67108860, !dbg !33
  %265 = getelementptr float, ptr addrspace(3) @global_smem, i32 %264, !dbg !33
  %266 = getelementptr float, ptr addrspace(3) %265, i32 %262, !dbg !33
  %267 = bitcast float %175 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %266, <1 x i32> %267, i1 true) #2, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %268 = lshr i32 %20, 6, !dbg !33
  %269 = and i32 %268, 12, !dbg !33
  %270 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %269, !dbg !33
  %271 = getelementptr inbounds float, ptr addrspace(3) %270, i32 %182, !dbg !33
  %272 = or disjoint i32 %182, 1024, !dbg !33
  %273 = lshr i32 %272, 6, !dbg !33
  %274 = and i32 %273, 28, !dbg !33
  %275 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %274, !dbg !33
  %276 = getelementptr inbounds float, ptr addrspace(3) %275, i32 %272, !dbg !33
  %277 = or disjoint i32 %182, 2048, !dbg !33
  %278 = lshr i32 %277, 6, !dbg !33
  %279 = and i32 %278, 44, !dbg !33
  %280 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %279, !dbg !33
  %281 = getelementptr inbounds float, ptr addrspace(3) %280, i32 %277, !dbg !33
  %282 = or disjoint i32 %182, 3072, !dbg !33
  %283 = lshr i32 %282, 6, !dbg !33
  %284 = and i32 %283, 60, !dbg !33
  %285 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %284, !dbg !33
  %286 = getelementptr inbounds float, ptr addrspace(3) %285, i32 %282, !dbg !33
  %287 = fsub float 0.000000e+00, %129, !dbg !34
  %288 = fsub float 0.000000e+00, %130, !dbg !34
  %289 = fsub float 0.000000e+00, %131, !dbg !34
  %290 = fsub float 0.000000e+00, %132, !dbg !34
  %291 = fsub float 0.000000e+00, %138, !dbg !34
  %292 = fsub float 0.000000e+00, %139, !dbg !34
  %293 = fsub float 0.000000e+00, %140, !dbg !34
  %294 = fsub float 0.000000e+00, %141, !dbg !34
  %295 = fsub float 0.000000e+00, %147, !dbg !34
  %296 = fsub float 0.000000e+00, %148, !dbg !34
  %297 = fsub float 0.000000e+00, %149, !dbg !34
  %298 = fsub float 0.000000e+00, %150, !dbg !34
  %299 = fsub float 0.000000e+00, %156, !dbg !34
  %300 = fsub float 0.000000e+00, %157, !dbg !34
  %301 = fsub float 0.000000e+00, %158, !dbg !34
  %302 = fsub float 0.000000e+00, %159, !dbg !34
  %303 = fmul float %287, 0x3FF7154760000000, !dbg !38
  %304 = fmul float %288, 0x3FF7154760000000, !dbg !38
  %305 = fmul float %289, 0x3FF7154760000000, !dbg !38
  %306 = fmul float %290, 0x3FF7154760000000, !dbg !38
  %307 = fmul float %291, 0x3FF7154760000000, !dbg !38
  %308 = fmul float %292, 0x3FF7154760000000, !dbg !38
  %309 = fmul float %293, 0x3FF7154760000000, !dbg !38
  %310 = fmul float %294, 0x3FF7154760000000, !dbg !38
  %311 = fmul float %295, 0x3FF7154760000000, !dbg !38
  %312 = fmul float %296, 0x3FF7154760000000, !dbg !38
  %313 = fmul float %297, 0x3FF7154760000000, !dbg !38
  %314 = fmul float %298, 0x3FF7154760000000, !dbg !38
  %315 = fmul float %299, 0x3FF7154760000000, !dbg !38
  %316 = fmul float %300, 0x3FF7154760000000, !dbg !38
  %317 = fmul float %301, 0x3FF7154760000000, !dbg !38
  %318 = fmul float %302, 0x3FF7154760000000, !dbg !38
  %319 = load <4 x float>, ptr addrspace(3) %271, align 16, !dbg !33
  %320 = load <4 x float>, ptr addrspace(3) %276, align 16, !dbg !33
  %321 = load <4 x float>, ptr addrspace(3) %281, align 16, !dbg !33
  %322 = load <4 x float>, ptr addrspace(3) %286, align 16, !dbg !33
  %323 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %303) #2, !dbg !38
  %324 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %304) #2, !dbg !38
  %325 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %305) #2, !dbg !38
  %326 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %306) #2, !dbg !38
  %327 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %307) #2, !dbg !38
  %328 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %308) #2, !dbg !38
  %329 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %309) #2, !dbg !38
  %330 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %310) #2, !dbg !38
  %331 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %311) #2, !dbg !38
  %332 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %312) #2, !dbg !38
  %333 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %313) #2, !dbg !38
  %334 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %314) #2, !dbg !38
  %335 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %315) #2, !dbg !38
  %336 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %316) #2, !dbg !38
  %337 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %317) #2, !dbg !38
  %338 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %318) #2, !dbg !38
  %339 = fadd float %323, 1.000000e+00, !dbg !39
  %340 = fadd float %324, 1.000000e+00, !dbg !39
  %341 = fadd float %325, 1.000000e+00, !dbg !39
  %342 = fadd float %326, 1.000000e+00, !dbg !39
  %343 = fadd float %327, 1.000000e+00, !dbg !39
  %344 = fadd float %328, 1.000000e+00, !dbg !39
  %345 = fadd float %329, 1.000000e+00, !dbg !39
  %346 = fadd float %330, 1.000000e+00, !dbg !39
  %347 = fadd float %331, 1.000000e+00, !dbg !39
  %348 = fadd float %332, 1.000000e+00, !dbg !39
  %349 = fadd float %333, 1.000000e+00, !dbg !39
  %350 = fadd float %334, 1.000000e+00, !dbg !39
  %351 = fadd float %335, 1.000000e+00, !dbg !39
  %352 = fadd float %336, 1.000000e+00, !dbg !39
  %353 = fadd float %337, 1.000000e+00, !dbg !39
  %354 = fadd float %338, 1.000000e+00, !dbg !39
  %355 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %339) #2, !dbg !40
  %356 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %340) #2, !dbg !40
  %357 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %341) #2, !dbg !40
  %358 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %342) #2, !dbg !40
  %359 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %343) #2, !dbg !40
  %360 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %344) #2, !dbg !40
  %361 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %345) #2, !dbg !40
  %362 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %346) #2, !dbg !40
  %363 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %347) #2, !dbg !40
  %364 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %348) #2, !dbg !40
  %365 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %349) #2, !dbg !40
  %366 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %350) #2, !dbg !40
  %367 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %351) #2, !dbg !40
  %368 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %352) #2, !dbg !40
  %369 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %353) #2, !dbg !40
  %370 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %354) #2, !dbg !40
  %371 = insertelement <16 x float> poison, float %367, i64 0, !dbg !41
  %372 = insertelement <16 x float> %371, float %368, i64 1, !dbg !41
  %373 = insertelement <16 x float> %372, float %369, i64 2, !dbg !41
  %374 = insertelement <16 x float> %373, float %370, i64 3, !dbg !41
  %375 = insertelement <16 x float> %374, float %363, i64 4, !dbg !41
  %376 = insertelement <16 x float> %375, float %364, i64 5, !dbg !41
  %377 = insertelement <16 x float> %376, float %365, i64 6, !dbg !41
  %378 = insertelement <16 x float> %377, float %366, i64 7, !dbg !41
  %379 = insertelement <16 x float> %378, float %359, i64 8, !dbg !41
  %380 = insertelement <16 x float> %379, float %360, i64 9, !dbg !41
  %381 = insertelement <16 x float> %380, float %361, i64 10, !dbg !41
  %382 = insertelement <16 x float> %381, float %362, i64 11, !dbg !41
  %383 = insertelement <16 x float> %382, float %355, i64 12, !dbg !41
  %384 = insertelement <16 x float> %383, float %356, i64 13, !dbg !41
  %385 = insertelement <16 x float> %384, float %357, i64 14, !dbg !41
  %386 = insertelement <16 x float> %385, float %358, i64 15, !dbg !41
  %387 = fcmp olt <16 x float> %386, zeroinitializer, !dbg !41
  %388 = select <16 x i1> %387, <16 x float> zeroinitializer, <16 x float> %386, !dbg !45
  %389 = shufflevector <4 x float> %322, <4 x float> %321, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !46
  %390 = shufflevector <4 x float> %320, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !46
  %391 = shufflevector <16 x float> %389, <16 x float> %390, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 16, i32 17, i32 18, i32 19, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !46
  %392 = shufflevector <4 x float> %319, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !46
  %393 = shufflevector <16 x float> %391, <16 x float> %392, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 16, i32 17, i32 18, i32 19>, !dbg !46
  %394 = fadd <16 x float> %393, %388, !dbg !46
  %395 = fcmp olt <16 x float> %394, zeroinitializer, !dbg !47
  %396 = extractelement <16 x i1> %395, i64 12, !dbg !49
  %397 = extractelement <16 x float> %394, i64 12, !dbg !49
  %398 = select i1 %396, float 0.000000e+00, float %397, !dbg !49
  %399 = extractelement <16 x i1> %395, i64 13, !dbg !49
  %400 = extractelement <16 x float> %394, i64 13, !dbg !49
  %401 = select i1 %399, float 0.000000e+00, float %400, !dbg !49
  %402 = extractelement <16 x i1> %395, i64 14, !dbg !49
  %403 = extractelement <16 x float> %394, i64 14, !dbg !49
  %404 = select i1 %402, float 0.000000e+00, float %403, !dbg !49
  %405 = extractelement <16 x i1> %395, i64 15, !dbg !49
  %406 = extractelement <16 x float> %394, i64 15, !dbg !49
  %407 = select i1 %405, float 0.000000e+00, float %406, !dbg !49
  %408 = extractelement <16 x i1> %395, i64 8, !dbg !49
  %409 = extractelement <16 x float> %394, i64 8, !dbg !49
  %410 = select i1 %408, float 0.000000e+00, float %409, !dbg !49
  %411 = extractelement <16 x i1> %395, i64 9, !dbg !49
  %412 = extractelement <16 x float> %394, i64 9, !dbg !49
  %413 = select i1 %411, float 0.000000e+00, float %412, !dbg !49
  %414 = extractelement <16 x i1> %395, i64 10, !dbg !49
  %415 = extractelement <16 x float> %394, i64 10, !dbg !49
  %416 = select i1 %414, float 0.000000e+00, float %415, !dbg !49
  %417 = extractelement <16 x i1> %395, i64 11, !dbg !49
  %418 = extractelement <16 x float> %394, i64 11, !dbg !49
  %419 = select i1 %417, float 0.000000e+00, float %418, !dbg !49
  %420 = extractelement <16 x i1> %395, i64 4, !dbg !49
  %421 = extractelement <16 x float> %394, i64 4, !dbg !49
  %422 = select i1 %420, float 0.000000e+00, float %421, !dbg !49
  %423 = extractelement <16 x i1> %395, i64 5, !dbg !49
  %424 = extractelement <16 x float> %394, i64 5, !dbg !49
  %425 = select i1 %423, float 0.000000e+00, float %424, !dbg !49
  %426 = extractelement <16 x i1> %395, i64 6, !dbg !49
  %427 = extractelement <16 x float> %394, i64 6, !dbg !49
  %428 = select i1 %426, float 0.000000e+00, float %427, !dbg !49
  %429 = extractelement <16 x i1> %395, i64 7, !dbg !49
  %430 = extractelement <16 x float> %394, i64 7, !dbg !49
  %431 = select i1 %429, float 0.000000e+00, float %430, !dbg !49
  %432 = extractelement <16 x i1> %395, i64 0, !dbg !49
  %433 = extractelement <16 x float> %394, i64 0, !dbg !49
  %434 = select i1 %432, float 0.000000e+00, float %433, !dbg !49
  %435 = extractelement <16 x i1> %395, i64 1, !dbg !49
  %436 = extractelement <16 x float> %394, i64 1, !dbg !49
  %437 = select i1 %435, float 0.000000e+00, float %436, !dbg !49
  %438 = extractelement <16 x i1> %395, i64 2, !dbg !49
  %439 = extractelement <16 x float> %394, i64 2, !dbg !49
  %440 = select i1 %438, float 0.000000e+00, float %439, !dbg !49
  %441 = extractelement <16 x i1> %395, i64 3, !dbg !49
  %442 = extractelement <16 x float> %394, i64 3, !dbg !49
  %443 = select i1 %441, float 0.000000e+00, float %442, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %444 = shl i32 %8, 6, !dbg !51
  %445 = and i32 %444, 4032, !dbg !51
  %446 = or disjoint i32 %30, %445, !dbg !51
  %447 = lshr exact i32 %445, 2, !dbg !51
  %448 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %447, !dbg !51
  %449 = getelementptr float, ptr addrspace(3) %448, i32 %446, !dbg !51
  %450 = bitcast float %398 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %449, <1 x i32> %450, i1 true) #2, !dbg !51
  %451 = or disjoint i32 %446, 16, !dbg !51
  %452 = lshr i32 %451, 4, !dbg !51
  %453 = getelementptr float, ptr addrspace(3) @global_smem, i32 %452, !dbg !51
  %454 = getelementptr float, ptr addrspace(3) %453, i32 %451, !dbg !51
  %455 = bitcast float %401 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %454, <1 x i32> %455, i1 true) #2, !dbg !51
  %456 = or disjoint i32 %446, 32, !dbg !51
  %457 = lshr i32 %456, 4, !dbg !51
  %458 = getelementptr float, ptr addrspace(3) @global_smem, i32 %457, !dbg !51
  %459 = getelementptr float, ptr addrspace(3) %458, i32 %456, !dbg !51
  %460 = bitcast float %404 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %459, <1 x i32> %460, i1 true) #2, !dbg !51
  %461 = or disjoint i32 %446, 48, !dbg !51
  %462 = lshr i32 %461, 4, !dbg !51
  %463 = getelementptr float, ptr addrspace(3) @global_smem, i32 %462, !dbg !51
  %464 = getelementptr float, ptr addrspace(3) %463, i32 %461, !dbg !51
  %465 = bitcast float %407 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %464, <1 x i32> %465, i1 true) #2, !dbg !51
  %466 = or disjoint i32 %446, 4, !dbg !51
  %467 = getelementptr float, ptr addrspace(3) %448, i32 %466, !dbg !51
  %468 = bitcast float %410 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %467, <1 x i32> %468, i1 true) #2, !dbg !51
  %469 = or disjoint i32 %446, 20, !dbg !51
  %470 = lshr i32 %469, 4, !dbg !51
  %471 = getelementptr float, ptr addrspace(3) @global_smem, i32 %470, !dbg !51
  %472 = getelementptr float, ptr addrspace(3) %471, i32 %469, !dbg !51
  %473 = bitcast float %413 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %472, <1 x i32> %473, i1 true) #2, !dbg !51
  %474 = or disjoint i32 %446, 36, !dbg !51
  %475 = lshr i32 %474, 4, !dbg !51
  %476 = getelementptr float, ptr addrspace(3) @global_smem, i32 %475, !dbg !51
  %477 = getelementptr float, ptr addrspace(3) %476, i32 %474, !dbg !51
  %478 = bitcast float %416 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %477, <1 x i32> %478, i1 true) #2, !dbg !51
  %479 = or disjoint i32 %446, 52, !dbg !51
  %480 = lshr i32 %479, 4, !dbg !51
  %481 = getelementptr float, ptr addrspace(3) @global_smem, i32 %480, !dbg !51
  %482 = getelementptr float, ptr addrspace(3) %481, i32 %479, !dbg !51
  %483 = bitcast float %419 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %482, <1 x i32> %483, i1 true) #2, !dbg !51
  %484 = or disjoint i32 %446, 8, !dbg !51
  %485 = getelementptr float, ptr addrspace(3) %448, i32 %484, !dbg !51
  %486 = bitcast float %422 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %485, <1 x i32> %486, i1 true) #2, !dbg !51
  %487 = or disjoint i32 %446, 24, !dbg !51
  %488 = lshr i32 %487, 4, !dbg !51
  %489 = getelementptr float, ptr addrspace(3) @global_smem, i32 %488, !dbg !51
  %490 = getelementptr float, ptr addrspace(3) %489, i32 %487, !dbg !51
  %491 = bitcast float %425 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %490, <1 x i32> %491, i1 true) #2, !dbg !51
  %492 = or disjoint i32 %446, 40, !dbg !51
  %493 = lshr i32 %492, 4, !dbg !51
  %494 = getelementptr float, ptr addrspace(3) @global_smem, i32 %493, !dbg !51
  %495 = getelementptr float, ptr addrspace(3) %494, i32 %492, !dbg !51
  %496 = bitcast float %428 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %495, <1 x i32> %496, i1 true) #2, !dbg !51
  %497 = or disjoint i32 %446, 56, !dbg !51
  %498 = lshr i32 %497, 4, !dbg !51
  %499 = getelementptr float, ptr addrspace(3) @global_smem, i32 %498, !dbg !51
  %500 = getelementptr float, ptr addrspace(3) %499, i32 %497, !dbg !51
  %501 = bitcast float %431 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %500, <1 x i32> %501, i1 true) #2, !dbg !51
  %502 = or disjoint i32 %446, 12, !dbg !51
  %503 = getelementptr float, ptr addrspace(3) %448, i32 %502, !dbg !51
  %504 = bitcast float %434 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %503, <1 x i32> %504, i1 true) #2, !dbg !51
  %505 = or disjoint i32 %446, 28, !dbg !51
  %506 = lshr i32 %505, 4, !dbg !51
  %507 = getelementptr float, ptr addrspace(3) @global_smem, i32 %506, !dbg !51
  %508 = getelementptr float, ptr addrspace(3) %507, i32 %505, !dbg !51
  %509 = bitcast float %437 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %508, <1 x i32> %509, i1 true) #2, !dbg !51
  %510 = or disjoint i32 %446, 44, !dbg !51
  %511 = lshr i32 %510, 4, !dbg !51
  %512 = getelementptr float, ptr addrspace(3) @global_smem, i32 %511, !dbg !51
  %513 = getelementptr float, ptr addrspace(3) %512, i32 %510, !dbg !51
  %514 = bitcast float %440 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %513, <1 x i32> %514, i1 true) #2, !dbg !51
  %515 = or disjoint i32 %446, 60, !dbg !51
  %516 = lshr i32 %515, 4, !dbg !51
  %517 = getelementptr float, ptr addrspace(3) @global_smem, i32 %516, !dbg !51
  %518 = getelementptr float, ptr addrspace(3) %517, i32 %515, !dbg !51
  %519 = bitcast float %443 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %518, <1 x i32> %519, i1 true) #2, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %520 = lshr i32 %182, 4, !dbg !51
  %521 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %520, !dbg !51
  %522 = getelementptr inbounds float, ptr addrspace(3) %521, i32 %182, !dbg !51
  %523 = load i32, ptr addrspace(3) %522, align 4, !dbg !51
  %524 = or disjoint i32 %182, 1, !dbg !51
  %525 = getelementptr inbounds float, ptr addrspace(3) %521, i32 %524, !dbg !51
  %526 = load i32, ptr addrspace(3) %525, align 4, !dbg !51
  %527 = or disjoint i32 %182, 2, !dbg !51
  %528 = getelementptr inbounds float, ptr addrspace(3) %521, i32 %527, !dbg !51
  %529 = load i32, ptr addrspace(3) %528, align 4, !dbg !51
  %530 = or disjoint i32 %182, 3, !dbg !51
  %531 = getelementptr inbounds float, ptr addrspace(3) %521, i32 %530, !dbg !51
  %532 = load i32, ptr addrspace(3) %531, align 4, !dbg !51
  %533 = lshr i32 %272, 4, !dbg !51
  %534 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %533, !dbg !51
  %535 = getelementptr inbounds float, ptr addrspace(3) %534, i32 %272, !dbg !51
  %536 = load i32, ptr addrspace(3) %535, align 4, !dbg !51
  %537 = or disjoint i32 %182, 1025, !dbg !51
  %538 = lshr i32 %537, 4, !dbg !51
  %539 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %538, !dbg !51
  %540 = getelementptr inbounds float, ptr addrspace(3) %539, i32 %537, !dbg !51
  %541 = load i32, ptr addrspace(3) %540, align 4, !dbg !51
  %542 = or disjoint i32 %182, 1026, !dbg !51
  %543 = lshr i32 %542, 4, !dbg !51
  %544 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %543, !dbg !51
  %545 = getelementptr inbounds float, ptr addrspace(3) %544, i32 %542, !dbg !51
  %546 = load i32, ptr addrspace(3) %545, align 4, !dbg !51
  %547 = or disjoint i32 %182, 1027, !dbg !51
  %548 = lshr i32 %547, 4, !dbg !51
  %549 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %548, !dbg !51
  %550 = getelementptr inbounds float, ptr addrspace(3) %549, i32 %547, !dbg !51
  %551 = load i32, ptr addrspace(3) %550, align 4, !dbg !51
  %552 = lshr i32 %277, 4, !dbg !51
  %553 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %552, !dbg !51
  %554 = getelementptr inbounds float, ptr addrspace(3) %553, i32 %277, !dbg !51
  %555 = load i32, ptr addrspace(3) %554, align 4, !dbg !51
  %556 = or disjoint i32 %182, 2049, !dbg !51
  %557 = lshr i32 %556, 4, !dbg !51
  %558 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %557, !dbg !51
  %559 = getelementptr inbounds float, ptr addrspace(3) %558, i32 %556, !dbg !51
  %560 = load i32, ptr addrspace(3) %559, align 4, !dbg !51
  %561 = or disjoint i32 %182, 2050, !dbg !51
  %562 = lshr i32 %561, 4, !dbg !51
  %563 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %562, !dbg !51
  %564 = getelementptr inbounds float, ptr addrspace(3) %563, i32 %561, !dbg !51
  %565 = load i32, ptr addrspace(3) %564, align 4, !dbg !51
  %566 = or disjoint i32 %182, 2051, !dbg !51
  %567 = lshr i32 %566, 4, !dbg !51
  %568 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %567, !dbg !51
  %569 = getelementptr inbounds float, ptr addrspace(3) %568, i32 %566, !dbg !51
  %570 = load i32, ptr addrspace(3) %569, align 4, !dbg !51
  %571 = lshr i32 %282, 4, !dbg !51
  %572 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %571, !dbg !51
  %573 = getelementptr inbounds float, ptr addrspace(3) %572, i32 %282, !dbg !51
  %574 = load i32, ptr addrspace(3) %573, align 4, !dbg !51
  %575 = or disjoint i32 %182, 3073, !dbg !51
  %576 = lshr i32 %575, 4, !dbg !51
  %577 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %576, !dbg !51
  %578 = getelementptr inbounds float, ptr addrspace(3) %577, i32 %575, !dbg !51
  %579 = load i32, ptr addrspace(3) %578, align 4, !dbg !51
  %580 = or disjoint i32 %182, 3074, !dbg !51
  %581 = lshr i32 %580, 4, !dbg !51
  %582 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %581, !dbg !51
  %583 = getelementptr inbounds float, ptr addrspace(3) %582, i32 %580, !dbg !51
  %584 = load i32, ptr addrspace(3) %583, align 4, !dbg !51
  %585 = or disjoint i32 %182, 3075, !dbg !51
  %586 = lshr i32 %585, 4, !dbg !51
  %587 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %586, !dbg !51
  %588 = getelementptr inbounds float, ptr addrspace(3) %587, i32 %585, !dbg !51
  %589 = load i32, ptr addrspace(3) %588, align 4, !dbg !51
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %523, i32 %526, i32 %529, i32 %532, ptr addrspace(1) %52, i1 %36) #2, !dbg !51
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %536, i32 %541, i32 %546, i32 %551, ptr addrspace(1) %54, i1 %36) #2, !dbg !51
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %555, i32 %560, i32 %565, i32 %570, ptr addrspace(1) %56, i1 %36) #2, !dbg !51
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %574, i32 %579, i32 %584, i32 %589, ptr addrspace(1) %58, i1 %36) #2, !dbg !51
  ret void, !dbg !52
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "crzkju7pxyalzapwjamrwxfxoddye4j5mhcsmqoji2u3nzuyt5t2.py", directory: "inductor_cache/rz")
!4 = !{ptr @triton_poi_fused_add_convolution_relu_sigmoid_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_convolution_relu_sigmoid_1, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_convolution_relu_sigmoid_1", linkageName: "triton_poi_fused_add_convolution_relu_sigmoid_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 31, column: 19, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 43, scope: !7)
!22 = !DILocation(line: 32, column: 39, scope: !7)
!23 = !DILocation(line: 32, column: 34, scope: !7)
!24 = !DILocation(line: 32, column: 48, scope: !7)
!25 = !DILocation(line: 33, column: 30, scope: !7)
!26 = !DILocation(line: 33, column: 35, scope: !7)
!27 = !DILocation(line: 34, column: 40, scope: !7)
!28 = !DILocation(line: 34, column: 53, scope: !7)
!29 = !DILocation(line: 34, column: 35, scope: !7)
!30 = !DILocation(line: 34, column: 45, scope: !7)
!31 = !DILocation(line: 34, column: 30, scope: !7)
!32 = !DILocation(line: 34, column: 58, scope: !7)
!33 = !DILocation(line: 35, column: 18, scope: !7)
!34 = !DILocation(line: 47, column: 30, scope: !35, inlinedAt: !37)
!35 = distinct !DILexicalBlockFile(scope: !7, file: !36, discriminator: 0)
!36 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!37 = !DILocation(line: 36, column: 22, scope: !7)
!38 = !DILocation(line: 47, column: 29, scope: !35, inlinedAt: !37)
!39 = !DILocation(line: 47, column: 20, scope: !35, inlinedAt: !37)
!40 = !DILocation(line: 47, column: 16, scope: !35, inlinedAt: !37)
!41 = !DILocation(line: 118, column: 15, scope: !42, inlinedAt: !44)
!42 = distinct !DILexicalBlockFile(scope: !7, file: !43, discriminator: 0)
!43 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!44 = !DILocation(line: 38, column: 40, scope: !7)
!45 = !DILocation(line: 121, column: 29, scope: !42, inlinedAt: !44)
!46 = !DILocation(line: 39, column: 18, scope: !7)
!47 = !DILocation(line: 118, column: 15, scope: !42, inlinedAt: !48)
!48 = !DILocation(line: 40, column: 40, scope: !7)
!49 = !DILocation(line: 121, column: 29, scope: !42, inlinedAt: !48)
!50 = !DILocation(line: 41, column: 4, scope: !7)
!51 = !DILocation(line: 42, column: 48, scope: !7)
!52 = !DILocation(line: 42, column: 4, scope: !7)
