; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__adaptive_avg_pool2d_16(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 8, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 1, !dbg !12
  %8 = and i32 %7, 254, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = or disjoint i32 %9, 1, !dbg !13
  %11 = icmp slt i32 %9, 18432, !dbg !14
  %12 = sdiv i32 %9, 6, !dbg !15
  %13 = srem i32 %10, 6, !dbg !16
  %14 = sdiv i32 %9, 36, !dbg !17
  %.tr13 = trunc nsw i32 %13 to i8, !dbg !18
  %.lhs.trunc5 = shl nsw i8 %.tr13, 3, !dbg !18
  %15 = shl nsw i8 %.tr13, 4, !dbg !19
  %.lhs.trunc9 = add nsw i8 %15, 21, !dbg !19
  %16 = insertelement <2 x i8> poison, i8 %.lhs.trunc5, i64 0, !dbg !18
  %17 = insertelement <2 x i8> %16, i8 %.lhs.trunc9, i64 1, !dbg !18
  %18 = sdiv <2 x i8> %17, <i8 3, i8 6>, !dbg !18
  %19 = extractelement <2 x i8> %18, i64 0, !dbg !20
  %.sext6 = sext i8 %19 to i32, !dbg !18
  %20 = extractelement <2 x i8> %18, i64 1, !dbg !20
  %.sext10 = sext i8 %20 to i32, !dbg !19
  %21 = icmp slt i8 %19, %20, !dbg !20
  %22 = shl i32 %14, 8, !dbg !21
  %23 = add nsw i32 %.sext6, 1, !dbg !22
  %24 = icmp slt i32 %23, %.sext10, !dbg !23
  %25 = add nsw i32 %.sext6, 2, !dbg !24
  %26 = icmp slt i32 %25, %.sext10, !dbg !25
  %27 = add nsw i32 %.sext6, 3, !dbg !26
  %28 = icmp slt i32 %27, %.sext10, !dbg !27
  %29 = insertelement <2 x i32> poison, i32 %9, i64 0, !dbg !16
  %30 = insertelement <2 x i32> %29, i32 %12, i64 1, !dbg !16
  %31 = srem <2 x i32> %30, splat (i32 6), !dbg !16
  %32 = trunc nsw <2 x i32> %31 to <2 x i8>, !dbg !18
  %33 = shl nsw <2 x i8> %32, splat (i8 3), !dbg !18
  %34 = sdiv <2 x i8> %33, splat (i8 3), !dbg !18
  %35 = shl nsw <2 x i8> %32, splat (i8 4), !dbg !19
  %36 = add <2 x i8> %35, splat (i8 21), !dbg !19
  %37 = sdiv <2 x i8> %36, splat (i8 6), !dbg !19
  %38 = sext <2 x i8> %34 to <2 x i32>, !dbg !18
  %39 = icmp slt <2 x i8> %34, %37, !dbg !20
  %40 = extractelement <2 x i1> %39, i64 0, !dbg !28
  %41 = extractelement <2 x i1> %39, i64 1, !dbg !28
  %42 = and i1 %40, %41, !dbg !28
  %43 = and i1 %21, %41, !dbg !28
  %44 = extractelement <2 x i32> %38, i64 1, !dbg !29
  %45 = shl nsw i32 %44, 4, !dbg !29
  %46 = add i32 %45, %22, !dbg !30
  %47 = extractelement <2 x i32> %38, i64 0, !dbg !31
  %48 = add i32 %46, %47, !dbg !32
  %49 = add i32 %46, %.sext6, !dbg !32
  %50 = sext i32 %48 to i64, !dbg !33
  %51 = getelementptr float, ptr addrspace(1) %0, i64 %50, !dbg !33
  %52 = sext i32 %49 to i64, !dbg !33
  %53 = getelementptr float, ptr addrspace(1) %0, i64 %52, !dbg !33
  %54 = and i1 %11, %42, !dbg !34
  %55 = and i1 %11, %43, !dbg !34
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %51, i1 %54, i32 0, i1 %54) #1, !dbg !35
  %57 = bitcast i32 %56 to float, !dbg !35
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %53, i1 %55, i32 0, i1 %55) #1, !dbg !35
  %59 = bitcast i32 %58 to float, !dbg !35
  %60 = add nsw i32 %47, 1, !dbg !22
  %61 = and i1 %24, %41, !dbg !36
  %62 = or disjoint i32 %45, 1, !dbg !37
  %63 = add i32 %62, %22, !dbg !38
  %64 = add i32 %63, %47, !dbg !39
  %65 = add i32 %63, %.sext6, !dbg !39
  %66 = sext i32 %64 to i64, !dbg !40
  %67 = getelementptr float, ptr addrspace(1) %0, i64 %66, !dbg !40
  %68 = sext i32 %65 to i64, !dbg !40
  %69 = getelementptr float, ptr addrspace(1) %0, i64 %68, !dbg !40
  %70 = and i1 %11, %61, !dbg !41
  %71 = and i1 %26, %41, !dbg !42
  %72 = or disjoint i32 %45, 2, !dbg !43
  %73 = add i32 %72, %22, !dbg !44
  %74 = add i32 %73, %47, !dbg !45
  %75 = add i32 %73, %.sext6, !dbg !45
  %76 = sext i32 %74 to i64, !dbg !46
  %77 = getelementptr float, ptr addrspace(1) %0, i64 %76, !dbg !46
  %78 = sext i32 %75 to i64, !dbg !46
  %79 = getelementptr float, ptr addrspace(1) %0, i64 %78, !dbg !46
  %80 = and i1 %11, %71, !dbg !47
  %81 = add nsw <2 x i32> %38, splat (i32 3), !dbg !26
  %82 = sext <2 x i8> %37 to <2 x i32>, !dbg !27
  %83 = icmp slt <2 x i32> %81, %82, !dbg !27
  %84 = extractelement <2 x i1> %83, i64 0, !dbg !48
  %85 = and i1 %41, %84, !dbg !49
  %86 = and i1 %28, %41, !dbg !49
  %87 = or disjoint i32 %45, 3, !dbg !50
  %88 = add i32 %87, %22, !dbg !51
  %89 = add i32 %88, %47, !dbg !52
  %90 = add i32 %88, %.sext6, !dbg !52
  %91 = sext i32 %89 to i64, !dbg !53
  %92 = getelementptr float, ptr addrspace(1) %0, i64 %91, !dbg !53
  %93 = sext i32 %90 to i64, !dbg !53
  %94 = getelementptr float, ptr addrspace(1) %0, i64 %93, !dbg !53
  %95 = and i1 %11, %85, !dbg !54
  %96 = and i1 %11, %86, !dbg !54
  %97 = add nsw i32 %44, 1, !dbg !55
  %98 = add i32 %46, 16, !dbg !56
  %99 = add i32 %98, %47, !dbg !57
  %100 = add i32 %98, %.sext6, !dbg !57
  %101 = sext i32 %99 to i64, !dbg !58
  %102 = getelementptr float, ptr addrspace(1) %0, i64 %101, !dbg !58
  %103 = sext i32 %100 to i64, !dbg !58
  %104 = getelementptr float, ptr addrspace(1) %0, i64 %103, !dbg !58
  %105 = add i32 %46, 17, !dbg !59
  %106 = add i32 %105, %47, !dbg !60
  %107 = add i32 %105, %.sext6, !dbg !60
  %108 = sext i32 %106 to i64, !dbg !61
  %109 = getelementptr float, ptr addrspace(1) %0, i64 %108, !dbg !61
  %110 = sext i32 %107 to i64, !dbg !61
  %111 = getelementptr float, ptr addrspace(1) %0, i64 %110, !dbg !61
  %112 = add i32 %46, 18, !dbg !62
  %113 = add i32 %112, %47, !dbg !63
  %114 = add i32 %112, %.sext6, !dbg !63
  %115 = sext i32 %113 to i64, !dbg !64
  %116 = getelementptr float, ptr addrspace(1) %0, i64 %115, !dbg !64
  %117 = sext i32 %114 to i64, !dbg !64
  %118 = getelementptr float, ptr addrspace(1) %0, i64 %117, !dbg !64
  %119 = add i32 %46, 19, !dbg !65
  %120 = add i32 %119, %47, !dbg !66
  %121 = add i32 %119, %.sext6, !dbg !66
  %122 = sext i32 %120 to i64, !dbg !67
  %123 = getelementptr float, ptr addrspace(1) %0, i64 %122, !dbg !67
  %124 = sext i32 %121 to i64, !dbg !67
  %125 = getelementptr float, ptr addrspace(1) %0, i64 %124, !dbg !67
  %126 = extractelement <2 x i8> %37, i64 0, !dbg !23
  %127 = sext i8 %126 to i32, !dbg !23
  %128 = icmp slt i32 %60, %127, !dbg !23
  %129 = and i1 %41, %128, !dbg !36
  %130 = and i1 %11, %129, !dbg !41
  %131 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %67, i1 %130, i32 0, i1 %130) #1, !dbg !68
  %132 = bitcast i32 %131 to float, !dbg !68
  %133 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %69, i1 %70, i32 0, i1 %70) #1, !dbg !68
  %134 = bitcast i32 %133 to float, !dbg !68
  %135 = fadd float %57, %132, !dbg !69
  %136 = fadd float %59, %134, !dbg !69
  %137 = add nsw <2 x i32> %38, splat (i32 2), !dbg !24
  %138 = sext <2 x i8> %37 to <2 x i32>, !dbg !25
  %139 = icmp slt <2 x i32> %137, %138, !dbg !25
  %140 = extractelement <2 x i1> %139, i64 0, !dbg !70
  %141 = and i1 %41, %140, !dbg !42
  %142 = and i1 %11, %141, !dbg !47
  %143 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %77, i1 %142, i32 0, i1 %142) #1, !dbg !71
  %144 = bitcast i32 %143 to float, !dbg !71
  %145 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %79, i1 %80, i32 0, i1 %80) #1, !dbg !71
  %146 = bitcast i32 %145 to float, !dbg !71
  %147 = fadd float %135, %144, !dbg !72
  %148 = fadd float %136, %146, !dbg !72
  %149 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %92, i1 %95, i32 0, i1 %95) #1, !dbg !73
  %150 = bitcast i32 %149 to float, !dbg !73
  %151 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %94, i1 %96, i32 0, i1 %96) #1, !dbg !73
  %152 = bitcast i32 %151 to float, !dbg !73
  %153 = fadd float %147, %150, !dbg !74
  %154 = fadd float %148, %152, !dbg !74
  %155 = extractelement <2 x i8> %37, i64 1, !dbg !75
  %156 = sext i8 %155 to i32, !dbg !75
  %157 = icmp slt i32 %97, %156, !dbg !75
  %158 = and i1 %40, %157, !dbg !76
  %159 = and i1 %21, %157, !dbg !76
  %160 = and i1 %11, %158, !dbg !77
  %161 = and i1 %11, %159, !dbg !77
  %162 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %102, i1 %160, i32 0, i1 %160) #1, !dbg !78
  %163 = bitcast i32 %162 to float, !dbg !78
  %164 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %104, i1 %161, i32 0, i1 %161) #1, !dbg !78
  %165 = bitcast i32 %164 to float, !dbg !78
  %166 = fadd float %153, %163, !dbg !79
  %167 = fadd float %154, %165, !dbg !79
  %168 = and i1 %128, %157, !dbg !80
  %169 = and i1 %24, %157, !dbg !80
  %170 = and i1 %11, %168, !dbg !81
  %171 = and i1 %11, %169, !dbg !81
  %172 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %109, i1 %170, i32 0, i1 %170) #1, !dbg !82
  %173 = bitcast i32 %172 to float, !dbg !82
  %174 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %111, i1 %171, i32 0, i1 %171) #1, !dbg !82
  %175 = bitcast i32 %174 to float, !dbg !82
  %176 = fadd float %166, %173, !dbg !83
  %177 = fadd float %167, %175, !dbg !83
  %178 = and i1 %140, %157, !dbg !84
  %179 = and i1 %26, %157, !dbg !84
  %180 = and i1 %11, %178, !dbg !85
  %181 = and i1 %11, %179, !dbg !85
  %182 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %116, i1 %180, i32 0, i1 %180) #1, !dbg !86
  %183 = bitcast i32 %182 to float, !dbg !86
  %184 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %118, i1 %181, i32 0, i1 %181) #1, !dbg !86
  %185 = bitcast i32 %184 to float, !dbg !86
  %186 = fadd float %176, %183, !dbg !87
  %187 = fadd float %177, %185, !dbg !87
  %188 = and i1 %84, %157, !dbg !88
  %189 = and i1 %28, %157, !dbg !88
  %190 = and i1 %11, %188, !dbg !89
  %191 = and i1 %11, %189, !dbg !89
  %192 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %123, i1 %190, i32 0, i1 %190) #1, !dbg !90
  %193 = bitcast i32 %192 to float, !dbg !90
  %194 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %125, i1 %191, i32 0, i1 %191) #1, !dbg !90
  %195 = bitcast i32 %194 to float, !dbg !90
  %196 = fadd float %186, %193, !dbg !91
  %197 = fadd float %187, %195, !dbg !91
  %198 = extractelement <2 x i1> %139, i64 1, !dbg !92
  %199 = and i1 %40, %198, !dbg !93
  %200 = and i1 %21, %198, !dbg !93
  %201 = add i32 %46, 32, !dbg !94
  %202 = add i32 %201, %47, !dbg !95
  %203 = add i32 %201, %.sext6, !dbg !95
  %204 = sext i32 %202 to i64, !dbg !96
  %205 = getelementptr float, ptr addrspace(1) %0, i64 %204, !dbg !96
  %206 = sext i32 %203 to i64, !dbg !96
  %207 = getelementptr float, ptr addrspace(1) %0, i64 %206, !dbg !96
  %208 = and i1 %11, %199, !dbg !97
  %209 = and i1 %11, %200, !dbg !97
  %210 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %205, i1 %208, i32 0, i1 %208) #1, !dbg !98
  %211 = bitcast i32 %210 to float, !dbg !98
  %212 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %207, i1 %209, i32 0, i1 %209) #1, !dbg !98
  %213 = bitcast i32 %212 to float, !dbg !98
  %214 = fadd float %196, %211, !dbg !99
  %215 = fadd float %197, %213, !dbg !99
  %216 = and i1 %128, %198, !dbg !100
  %217 = and i1 %24, %198, !dbg !100
  %218 = add i32 %46, 33, !dbg !101
  %219 = add i32 %218, %47, !dbg !102
  %220 = add i32 %218, %.sext6, !dbg !102
  %221 = sext i32 %219 to i64, !dbg !103
  %222 = getelementptr float, ptr addrspace(1) %0, i64 %221, !dbg !103
  %223 = sext i32 %220 to i64, !dbg !103
  %224 = getelementptr float, ptr addrspace(1) %0, i64 %223, !dbg !103
  %225 = and i1 %11, %216, !dbg !104
  %226 = and i1 %11, %217, !dbg !104
  %227 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %222, i1 %225, i32 0, i1 %225) #1, !dbg !105
  %228 = bitcast i32 %227 to float, !dbg !105
  %229 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %224, i1 %226, i32 0, i1 %226) #1, !dbg !105
  %230 = bitcast i32 %229 to float, !dbg !105
  %231 = fadd float %214, %228, !dbg !106
  %232 = fadd float %215, %230, !dbg !106
  %233 = and i1 %140, %198, !dbg !107
  %234 = and i1 %26, %198, !dbg !107
  %235 = add i32 %46, 34, !dbg !108
  %236 = add i32 %235, %47, !dbg !109
  %237 = add i32 %235, %.sext6, !dbg !109
  %238 = sext i32 %236 to i64, !dbg !110
  %239 = getelementptr float, ptr addrspace(1) %0, i64 %238, !dbg !110
  %240 = sext i32 %237 to i64, !dbg !110
  %241 = getelementptr float, ptr addrspace(1) %0, i64 %240, !dbg !110
  %242 = and i1 %11, %233, !dbg !111
  %243 = and i1 %11, %234, !dbg !111
  %244 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %239, i1 %242, i32 0, i1 %242) #1, !dbg !112
  %245 = bitcast i32 %244 to float, !dbg !112
  %246 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %241, i1 %243, i32 0, i1 %243) #1, !dbg !112
  %247 = bitcast i32 %246 to float, !dbg !112
  %248 = fadd float %231, %245, !dbg !113
  %249 = fadd float %232, %247, !dbg !113
  %250 = and i1 %84, %198, !dbg !92
  %251 = and i1 %28, %198, !dbg !92
  %252 = add i32 %46, 35, !dbg !114
  %253 = add i32 %252, %47, !dbg !115
  %254 = add i32 %252, %.sext6, !dbg !115
  %255 = sext i32 %253 to i64, !dbg !116
  %256 = getelementptr float, ptr addrspace(1) %0, i64 %255, !dbg !116
  %257 = sext i32 %254 to i64, !dbg !116
  %258 = getelementptr float, ptr addrspace(1) %0, i64 %257, !dbg !116
  %259 = and i1 %11, %250, !dbg !117
  %260 = and i1 %11, %251, !dbg !117
  %261 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %256, i1 %259, i32 0, i1 %259) #1, !dbg !118
  %262 = bitcast i32 %261 to float, !dbg !118
  %263 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %258, i1 %260, i32 0, i1 %260) #1, !dbg !118
  %264 = bitcast i32 %263 to float, !dbg !118
  %265 = fadd float %248, %262, !dbg !119
  %266 = fadd float %249, %264, !dbg !119
  %267 = extractelement <2 x i1> %83, i64 1, !dbg !48
  %268 = and i1 %40, %267, !dbg !120
  %269 = and i1 %21, %267, !dbg !120
  %270 = add i32 %46, 48, !dbg !121
  %271 = add i32 %270, %47, !dbg !122
  %272 = add i32 %270, %.sext6, !dbg !122
  %273 = sext i32 %271 to i64, !dbg !123
  %274 = getelementptr float, ptr addrspace(1) %0, i64 %273, !dbg !123
  %275 = sext i32 %272 to i64, !dbg !123
  %276 = getelementptr float, ptr addrspace(1) %0, i64 %275, !dbg !123
  %277 = and i1 %11, %268, !dbg !124
  %278 = and i1 %11, %269, !dbg !124
  %279 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %274, i1 %277, i32 0, i1 %277) #1, !dbg !125
  %280 = bitcast i32 %279 to float, !dbg !125
  %281 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %276, i1 %278, i32 0, i1 %278) #1, !dbg !125
  %282 = bitcast i32 %281 to float, !dbg !125
  %283 = fadd float %265, %280, !dbg !126
  %284 = fadd float %266, %282, !dbg !126
  %285 = and i1 %128, %267, !dbg !127
  %286 = and i1 %24, %267, !dbg !127
  %287 = add i32 %46, 49, !dbg !128
  %288 = add i32 %287, %47, !dbg !129
  %289 = add i32 %287, %.sext6, !dbg !129
  %290 = sext i32 %288 to i64, !dbg !130
  %291 = getelementptr float, ptr addrspace(1) %0, i64 %290, !dbg !130
  %292 = sext i32 %289 to i64, !dbg !130
  %293 = getelementptr float, ptr addrspace(1) %0, i64 %292, !dbg !130
  %294 = and i1 %11, %285, !dbg !131
  %295 = and i1 %11, %286, !dbg !131
  %296 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %291, i1 %294, i32 0, i1 %294) #1, !dbg !132
  %297 = bitcast i32 %296 to float, !dbg !132
  %298 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %293, i1 %295, i32 0, i1 %295) #1, !dbg !132
  %299 = bitcast i32 %298 to float, !dbg !132
  %300 = fadd float %283, %297, !dbg !133
  %301 = fadd float %284, %299, !dbg !133
  %302 = and i1 %140, %267, !dbg !70
  %303 = and i1 %26, %267, !dbg !70
  %304 = add i32 %46, 50, !dbg !134
  %305 = add i32 %304, %47, !dbg !135
  %306 = add i32 %304, %.sext6, !dbg !135
  %307 = sext i32 %305 to i64, !dbg !136
  %308 = getelementptr float, ptr addrspace(1) %0, i64 %307, !dbg !136
  %309 = sext i32 %306 to i64, !dbg !136
  %310 = getelementptr float, ptr addrspace(1) %0, i64 %309, !dbg !136
  %311 = and i1 %11, %302, !dbg !137
  %312 = and i1 %11, %303, !dbg !137
  %313 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %308, i1 %311, i32 0, i1 %311) #1, !dbg !138
  %314 = bitcast i32 %313 to float, !dbg !138
  %315 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %310, i1 %312, i32 0, i1 %312) #1, !dbg !138
  %316 = bitcast i32 %315 to float, !dbg !138
  %317 = fadd float %300, %314, !dbg !139
  %318 = fadd float %301, %316, !dbg !139
  %319 = and i1 %84, %267, !dbg !48
  %320 = and i1 %28, %267, !dbg !48
  %321 = add i32 %46, 51, !dbg !140
  %322 = add i32 %321, %47, !dbg !31
  %323 = add i32 %321, %.sext6, !dbg !31
  %324 = sext i32 %322 to i64, !dbg !141
  %325 = getelementptr float, ptr addrspace(1) %0, i64 %324, !dbg !141
  %326 = sext i32 %323 to i64, !dbg !141
  %327 = getelementptr float, ptr addrspace(1) %0, i64 %326, !dbg !141
  %328 = and i1 %11, %319, !dbg !142
  %329 = and i1 %11, %320, !dbg !142
  %330 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %325, i1 %328, i32 0, i1 %328) #1, !dbg !143
  %331 = bitcast i32 %330 to float, !dbg !143
  %332 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %327, i1 %329, i32 0, i1 %329) #1, !dbg !143
  %333 = bitcast i32 %332 to float, !dbg !143
  %334 = fadd float %317, %331, !dbg !144
  %335 = fadd float %318, %333, !dbg !144
  %336 = select i1 %42, float 1.000000e+00, float 0.000000e+00, !dbg !145
  %337 = select i1 %43, float 1.000000e+00, float 0.000000e+00, !dbg !145
  %338 = select i1 %129, float 1.000000e+00, float 0.000000e+00, !dbg !146
  %339 = select i1 %61, float 1.000000e+00, float 0.000000e+00, !dbg !146
  %340 = fadd float %338, %336, !dbg !147
  %341 = fadd float %339, %337, !dbg !147
  %342 = select i1 %141, float 1.000000e+00, float 0.000000e+00, !dbg !148
  %343 = select i1 %71, float 1.000000e+00, float 0.000000e+00, !dbg !148
  %344 = fadd float %342, %340, !dbg !149
  %345 = fadd float %343, %341, !dbg !149
  %346 = select i1 %85, float 1.000000e+00, float 0.000000e+00, !dbg !150
  %347 = select i1 %86, float 1.000000e+00, float 0.000000e+00, !dbg !150
  %348 = fadd float %346, %344, !dbg !151
  %349 = fadd float %347, %345, !dbg !151
  %350 = select i1 %158, float 1.000000e+00, float 0.000000e+00, !dbg !152
  %351 = select i1 %159, float 1.000000e+00, float 0.000000e+00, !dbg !152
  %352 = fadd float %350, %348, !dbg !153
  %353 = fadd float %351, %349, !dbg !153
  %354 = select i1 %168, float 1.000000e+00, float 0.000000e+00, !dbg !154
  %355 = select i1 %169, float 1.000000e+00, float 0.000000e+00, !dbg !154
  %356 = fadd float %354, %352, !dbg !155
  %357 = fadd float %355, %353, !dbg !155
  %358 = select i1 %178, float 1.000000e+00, float 0.000000e+00, !dbg !156
  %359 = select i1 %179, float 1.000000e+00, float 0.000000e+00, !dbg !156
  %360 = fadd float %358, %356, !dbg !157
  %361 = fadd float %359, %357, !dbg !157
  %362 = select i1 %188, float 1.000000e+00, float 0.000000e+00, !dbg !158
  %363 = select i1 %189, float 1.000000e+00, float 0.000000e+00, !dbg !158
  %364 = fadd float %362, %360, !dbg !159
  %365 = fadd float %363, %361, !dbg !159
  %366 = select i1 %199, float 1.000000e+00, float 0.000000e+00, !dbg !160
  %367 = select i1 %200, float 1.000000e+00, float 0.000000e+00, !dbg !160
  %368 = fadd float %366, %364, !dbg !161
  %369 = fadd float %367, %365, !dbg !161
  %370 = select i1 %216, float 1.000000e+00, float 0.000000e+00, !dbg !162
  %371 = select i1 %217, float 1.000000e+00, float 0.000000e+00, !dbg !162
  %372 = fadd float %370, %368, !dbg !163
  %373 = fadd float %371, %369, !dbg !163
  %374 = select i1 %233, float 1.000000e+00, float 0.000000e+00, !dbg !164
  %375 = select i1 %234, float 1.000000e+00, float 0.000000e+00, !dbg !164
  %376 = fadd float %374, %372, !dbg !165
  %377 = fadd float %375, %373, !dbg !165
  %378 = select i1 %250, float 1.000000e+00, float 0.000000e+00, !dbg !166
  %379 = select i1 %251, float 1.000000e+00, float 0.000000e+00, !dbg !166
  %380 = fadd float %378, %376, !dbg !167
  %381 = fadd float %379, %377, !dbg !167
  %382 = select i1 %268, float 1.000000e+00, float 0.000000e+00, !dbg !168
  %383 = select i1 %269, float 1.000000e+00, float 0.000000e+00, !dbg !168
  %384 = fadd float %382, %380, !dbg !169
  %385 = fadd float %383, %381, !dbg !169
  %386 = select i1 %285, float 1.000000e+00, float 0.000000e+00, !dbg !170
  %387 = select i1 %286, float 1.000000e+00, float 0.000000e+00, !dbg !170
  %388 = fadd float %386, %384, !dbg !171
  %389 = fadd float %387, %385, !dbg !171
  %390 = select i1 %302, float 1.000000e+00, float 0.000000e+00, !dbg !172
  %391 = select i1 %303, float 1.000000e+00, float 0.000000e+00, !dbg !172
  %392 = fadd float %390, %388, !dbg !173
  %393 = fadd float %391, %389, !dbg !173
  %394 = select i1 %319, float 1.000000e+00, float 0.000000e+00, !dbg !174
  %395 = select i1 %320, float 1.000000e+00, float 0.000000e+00, !dbg !174
  %396 = fadd float %394, %392, !dbg !175
  %397 = fadd float %395, %393, !dbg !175
  %398 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %334, float %396) #1, !dbg !176
  %399 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %335, float %397) #1, !dbg !176
  %400 = sext i32 %9 to i64, !dbg !177
  %401 = getelementptr float, ptr addrspace(1) %1, i64 %400, !dbg !177
  %402 = bitcast float %398 to i32, !dbg !178
  %403 = bitcast float %399 to i32, !dbg !178
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %402, i32 %403, ptr addrspace(1) %401, i1 %11) #1, !dbg !178
  ret void, !dbg !179
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cyc4dp4wam75jgqd5vwvczidayqayoywjpqh6m3u7nnpybc5j3rj.py", directory: "inductor_cache/yc")
!4 = !{ptr @triton_poi_fused__adaptive_avg_pool2d_16, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__adaptive_avg_pool2d_16, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__adaptive_avg_pool2d_16", linkageName: "triton_poi_fused__adaptive_avg_pool2d_16", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 31, column: 21, scope: !7)
!19 = !DILocation(line: 32, column: 27, scope: !7)
!20 = !DILocation(line: 33, column: 18, scope: !7)
!21 = !DILocation(line: 35, column: 53, scope: !7)
!22 = !DILocation(line: 36, column: 16, scope: !7)
!23 = !DILocation(line: 37, column: 18, scope: !7)
!24 = !DILocation(line: 41, column: 17, scope: !7)
!25 = !DILocation(line: 42, column: 20, scope: !7)
!26 = !DILocation(line: 46, column: 17, scope: !7)
!27 = !DILocation(line: 47, column: 20, scope: !7)
!28 = !DILocation(line: 34, column: 18, scope: !7)
!29 = !DILocation(line: 35, column: 34, scope: !7)
!30 = !DILocation(line: 35, column: 49, scope: !7)
!31 = !DILocation(line: 91, column: 65, scope: !7)
!32 = !DILocation(line: 35, column: 59, scope: !7)
!33 = !DILocation(line: 35, column: 30, scope: !7)
!34 = !DILocation(line: 35, column: 81, scope: !7)
!35 = !DILocation(line: 35, column: 74, scope: !7)
!36 = !DILocation(line: 38, column: 19, scope: !7)
!37 = !DILocation(line: 39, column: 35, scope: !7)
!38 = !DILocation(line: 39, column: 54, scope: !7)
!39 = !DILocation(line: 39, column: 64, scope: !7)
!40 = !DILocation(line: 39, column: 31, scope: !7)
!41 = !DILocation(line: 39, column: 87, scope: !7)
!42 = !DILocation(line: 43, column: 19, scope: !7)
!43 = !DILocation(line: 44, column: 35, scope: !7)
!44 = !DILocation(line: 44, column: 54, scope: !7)
!45 = !DILocation(line: 44, column: 64, scope: !7)
!46 = !DILocation(line: 44, column: 31, scope: !7)
!47 = !DILocation(line: 44, column: 87, scope: !7)
!48 = !DILocation(line: 90, column: 20, scope: !7)
!49 = !DILocation(line: 48, column: 19, scope: !7)
!50 = !DILocation(line: 49, column: 35, scope: !7)
!51 = !DILocation(line: 49, column: 54, scope: !7)
!52 = !DILocation(line: 49, column: 64, scope: !7)
!53 = !DILocation(line: 49, column: 31, scope: !7)
!54 = !DILocation(line: 49, column: 87, scope: !7)
!55 = !DILocation(line: 51, column: 17, scope: !7)
!56 = !DILocation(line: 54, column: 55, scope: !7)
!57 = !DILocation(line: 54, column: 65, scope: !7)
!58 = !DILocation(line: 54, column: 31, scope: !7)
!59 = !DILocation(line: 57, column: 55, scope: !7)
!60 = !DILocation(line: 57, column: 65, scope: !7)
!61 = !DILocation(line: 57, column: 31, scope: !7)
!62 = !DILocation(line: 60, column: 55, scope: !7)
!63 = !DILocation(line: 60, column: 65, scope: !7)
!64 = !DILocation(line: 60, column: 31, scope: !7)
!65 = !DILocation(line: 63, column: 55, scope: !7)
!66 = !DILocation(line: 63, column: 65, scope: !7)
!67 = !DILocation(line: 63, column: 31, scope: !7)
!68 = !DILocation(line: 39, column: 79, scope: !7)
!69 = !DILocation(line: 40, column: 20, scope: !7)
!70 = !DILocation(line: 87, column: 20, scope: !7)
!71 = !DILocation(line: 44, column: 79, scope: !7)
!72 = !DILocation(line: 45, column: 20, scope: !7)
!73 = !DILocation(line: 49, column: 79, scope: !7)
!74 = !DILocation(line: 50, column: 20, scope: !7)
!75 = !DILocation(line: 52, column: 20, scope: !7)
!76 = !DILocation(line: 53, column: 20, scope: !7)
!77 = !DILocation(line: 54, column: 88, scope: !7)
!78 = !DILocation(line: 54, column: 80, scope: !7)
!79 = !DILocation(line: 55, column: 20, scope: !7)
!80 = !DILocation(line: 56, column: 20, scope: !7)
!81 = !DILocation(line: 57, column: 88, scope: !7)
!82 = !DILocation(line: 57, column: 80, scope: !7)
!83 = !DILocation(line: 58, column: 20, scope: !7)
!84 = !DILocation(line: 59, column: 20, scope: !7)
!85 = !DILocation(line: 60, column: 88, scope: !7)
!86 = !DILocation(line: 60, column: 80, scope: !7)
!87 = !DILocation(line: 61, column: 20, scope: !7)
!88 = !DILocation(line: 62, column: 20, scope: !7)
!89 = !DILocation(line: 63, column: 88, scope: !7)
!90 = !DILocation(line: 63, column: 80, scope: !7)
!91 = !DILocation(line: 64, column: 20, scope: !7)
!92 = !DILocation(line: 76, column: 20, scope: !7)
!93 = !DILocation(line: 67, column: 20, scope: !7)
!94 = !DILocation(line: 68, column: 55, scope: !7)
!95 = !DILocation(line: 68, column: 65, scope: !7)
!96 = !DILocation(line: 68, column: 31, scope: !7)
!97 = !DILocation(line: 68, column: 88, scope: !7)
!98 = !DILocation(line: 68, column: 80, scope: !7)
!99 = !DILocation(line: 69, column: 20, scope: !7)
!100 = !DILocation(line: 70, column: 20, scope: !7)
!101 = !DILocation(line: 71, column: 55, scope: !7)
!102 = !DILocation(line: 71, column: 65, scope: !7)
!103 = !DILocation(line: 71, column: 31, scope: !7)
!104 = !DILocation(line: 71, column: 88, scope: !7)
!105 = !DILocation(line: 71, column: 80, scope: !7)
!106 = !DILocation(line: 72, column: 20, scope: !7)
!107 = !DILocation(line: 73, column: 20, scope: !7)
!108 = !DILocation(line: 74, column: 55, scope: !7)
!109 = !DILocation(line: 74, column: 65, scope: !7)
!110 = !DILocation(line: 74, column: 31, scope: !7)
!111 = !DILocation(line: 74, column: 88, scope: !7)
!112 = !DILocation(line: 74, column: 80, scope: !7)
!113 = !DILocation(line: 75, column: 20, scope: !7)
!114 = !DILocation(line: 77, column: 55, scope: !7)
!115 = !DILocation(line: 77, column: 65, scope: !7)
!116 = !DILocation(line: 77, column: 31, scope: !7)
!117 = !DILocation(line: 77, column: 88, scope: !7)
!118 = !DILocation(line: 77, column: 80, scope: !7)
!119 = !DILocation(line: 78, column: 20, scope: !7)
!120 = !DILocation(line: 81, column: 20, scope: !7)
!121 = !DILocation(line: 82, column: 55, scope: !7)
!122 = !DILocation(line: 82, column: 65, scope: !7)
!123 = !DILocation(line: 82, column: 31, scope: !7)
!124 = !DILocation(line: 82, column: 88, scope: !7)
!125 = !DILocation(line: 82, column: 80, scope: !7)
!126 = !DILocation(line: 83, column: 20, scope: !7)
!127 = !DILocation(line: 84, column: 20, scope: !7)
!128 = !DILocation(line: 85, column: 55, scope: !7)
!129 = !DILocation(line: 85, column: 65, scope: !7)
!130 = !DILocation(line: 85, column: 31, scope: !7)
!131 = !DILocation(line: 85, column: 88, scope: !7)
!132 = !DILocation(line: 85, column: 80, scope: !7)
!133 = !DILocation(line: 86, column: 20, scope: !7)
!134 = !DILocation(line: 88, column: 55, scope: !7)
!135 = !DILocation(line: 88, column: 65, scope: !7)
!136 = !DILocation(line: 88, column: 31, scope: !7)
!137 = !DILocation(line: 88, column: 88, scope: !7)
!138 = !DILocation(line: 88, column: 80, scope: !7)
!139 = !DILocation(line: 89, column: 20, scope: !7)
!140 = !DILocation(line: 91, column: 55, scope: !7)
!141 = !DILocation(line: 91, column: 31, scope: !7)
!142 = !DILocation(line: 91, column: 88, scope: !7)
!143 = !DILocation(line: 91, column: 80, scope: !7)
!144 = !DILocation(line: 92, column: 20, scope: !7)
!145 = !DILocation(line: 95, column: 34, scope: !7)
!146 = !DILocation(line: 98, column: 35, scope: !7)
!147 = !DILocation(line: 99, column: 20, scope: !7)
!148 = !DILocation(line: 102, column: 35, scope: !7)
!149 = !DILocation(line: 103, column: 20, scope: !7)
!150 = !DILocation(line: 106, column: 35, scope: !7)
!151 = !DILocation(line: 107, column: 20, scope: !7)
!152 = !DILocation(line: 110, column: 35, scope: !7)
!153 = !DILocation(line: 111, column: 20, scope: !7)
!154 = !DILocation(line: 114, column: 35, scope: !7)
!155 = !DILocation(line: 115, column: 20, scope: !7)
!156 = !DILocation(line: 118, column: 35, scope: !7)
!157 = !DILocation(line: 119, column: 20, scope: !7)
!158 = !DILocation(line: 122, column: 35, scope: !7)
!159 = !DILocation(line: 123, column: 20, scope: !7)
!160 = !DILocation(line: 126, column: 35, scope: !7)
!161 = !DILocation(line: 127, column: 20, scope: !7)
!162 = !DILocation(line: 130, column: 37, scope: !7)
!163 = !DILocation(line: 131, column: 22, scope: !7)
!164 = !DILocation(line: 134, column: 37, scope: !7)
!165 = !DILocation(line: 135, column: 22, scope: !7)
!166 = !DILocation(line: 138, column: 37, scope: !7)
!167 = !DILocation(line: 139, column: 22, scope: !7)
!168 = !DILocation(line: 142, column: 37, scope: !7)
!169 = !DILocation(line: 143, column: 22, scope: !7)
!170 = !DILocation(line: 146, column: 37, scope: !7)
!171 = !DILocation(line: 147, column: 22, scope: !7)
!172 = !DILocation(line: 150, column: 37, scope: !7)
!173 = !DILocation(line: 151, column: 22, scope: !7)
!174 = !DILocation(line: 154, column: 37, scope: !7)
!175 = !DILocation(line: 155, column: 22, scope: !7)
!176 = !DILocation(line: 156, column: 21, scope: !7)
!177 = !DILocation(line: 157, column: 25, scope: !7)
!178 = !DILocation(line: 157, column: 38, scope: !7)
!179 = !DILocation(line: 157, column: 4, scope: !7)
