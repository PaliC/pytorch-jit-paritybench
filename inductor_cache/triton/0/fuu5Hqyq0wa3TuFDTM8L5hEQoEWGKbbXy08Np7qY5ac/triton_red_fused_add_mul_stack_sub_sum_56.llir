; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_red_fused_add_mul_stack_sub_sum_56(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9, i32 %10) local_unnamed_addr !dbg !7 {
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %13 = icmp slt i32 %12, 4, !dbg !11
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %15 = shl i32 %14, 2, !dbg !12
  %16 = and i32 %15, 2044, !dbg !12
  %17 = shl i32 %12, 12, !dbg !13
  %18 = or disjoint i32 %17, %16
  %19 = sext i32 %18 to i64, !dbg !14
  %20 = insertelement <8 x i1> poison, i1 %13, i64 0, !dbg !15
  %21 = shufflevector <8 x i1> %20, <8 x i1> poison, <8 x i32> zeroinitializer, !dbg !15
  br label %22, !dbg !14

22:                                               ; preds = %11, %22
  %23 = phi i1 [ true, %11 ], [ false, %22 ]
  %indvars.iv = phi i64 [ 0, %11 ], [ 2048, %22 ]
  %24 = phi float [ 0.000000e+00, %11 ], [ %132, %22 ]
  %25 = phi float [ 0.000000e+00, %11 ], [ %133, %22 ]
  %26 = phi float [ 0.000000e+00, %11 ], [ %134, %22 ]
  %27 = phi float [ 0.000000e+00, %11 ], [ %135, %22 ]
  %28 = phi <8 x float> [ zeroinitializer, %11 ], [ %138, %22 ]
  %29 = or disjoint i64 %indvars.iv, %19, !dbg !16
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !17
  %31 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %30, i1 %13, i32 0, i1 %13, i32 0, i1 %13, i32 0, i1 %13, i32 0, i1 %13) #5, !dbg !18
  %32 = extractvalue { i32, i32, i32, i32 } %31, 0, !dbg !18
  %33 = extractvalue { i32, i32, i32, i32 } %31, 1, !dbg !18
  %34 = extractvalue { i32, i32, i32, i32 } %31, 2, !dbg !18
  %35 = extractvalue { i32, i32, i32, i32 } %31, 3, !dbg !18
  %36 = getelementptr float, ptr addrspace(1) %1, i64 %29, !dbg !19
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %36, i1 %13, i32 0, i1 %13, i32 0, i1 %13, i32 0, i1 %13, i32 0, i1 %13) #5, !dbg !20
  %38 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !20
  %39 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !20
  %40 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !20
  %41 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !20
  %42 = getelementptr float, ptr addrspace(1) %2, i64 %29, !dbg !21
  %43 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %42, i1 %13, i32 0, i1 %13, i32 0, i1 %13, i32 0, i1 %13, i32 0, i1 %13) #5, !dbg !22
  %44 = extractvalue { i32, i32, i32, i32 } %43, 0, !dbg !22
  %45 = extractvalue { i32, i32, i32, i32 } %43, 1, !dbg !22
  %46 = extractvalue { i32, i32, i32, i32 } %43, 2, !dbg !22
  %47 = extractvalue { i32, i32, i32, i32 } %43, 3, !dbg !22
  %48 = getelementptr float, ptr addrspace(1) %3, i64 %29, !dbg !23
  %49 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %48, i1 %13, i32 0, i1 %13, i32 0, i1 %13, i32 0, i1 %13, i32 0, i1 %13) #5, !dbg !24
  %50 = extractvalue { i32, i32, i32, i32 } %49, 0, !dbg !24
  %51 = extractvalue { i32, i32, i32, i32 } %49, 1, !dbg !24
  %52 = extractvalue { i32, i32, i32, i32 } %49, 2, !dbg !24
  %53 = extractvalue { i32, i32, i32, i32 } %49, 3, !dbg !24
  %54 = getelementptr float, ptr addrspace(1) %4, i64 %29, !dbg !25
  %55 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %54, i1 %13, i32 0, i1 %13, i32 0, i1 %13, i32 0, i1 %13, i32 0, i1 %13) #5, !dbg !26
  %56 = extractvalue { i32, i32, i32, i32 } %55, 0, !dbg !26
  %57 = extractvalue { i32, i32, i32, i32 } %55, 1, !dbg !26
  %58 = extractvalue { i32, i32, i32, i32 } %55, 2, !dbg !26
  %59 = extractvalue { i32, i32, i32, i32 } %55, 3, !dbg !26
  %60 = getelementptr float, ptr addrspace(1) %5, i64 %29, !dbg !27
  %61 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %60, i1 %13, i32 0, i1 %13, i32 0, i1 %13, i32 0, i1 %13, i32 0, i1 %13) #5, !dbg !28
  %62 = extractvalue { i32, i32, i32, i32 } %61, 0, !dbg !28
  %63 = extractvalue { i32, i32, i32, i32 } %61, 1, !dbg !28
  %64 = extractvalue { i32, i32, i32, i32 } %61, 2, !dbg !28
  %65 = extractvalue { i32, i32, i32, i32 } %61, 3, !dbg !28
  %66 = getelementptr float, ptr addrspace(1) %6, i64 %29, !dbg !29
  %67 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %66, i1 %13, i32 0, i1 %13, i32 0, i1 %13, i32 0, i1 %13, i32 0, i1 %13) #5, !dbg !30
  %68 = extractvalue { i32, i32, i32, i32 } %67, 0, !dbg !30
  %69 = extractvalue { i32, i32, i32, i32 } %67, 1, !dbg !30
  %70 = extractvalue { i32, i32, i32, i32 } %67, 2, !dbg !30
  %71 = extractvalue { i32, i32, i32, i32 } %67, 3, !dbg !30
  %72 = getelementptr float, ptr addrspace(1) %7, i64 %29, !dbg !31
  %73 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %72, i1 %13, i32 0, i1 %13, i32 0, i1 %13, i32 0, i1 %13, i32 0, i1 %13) #5, !dbg !32
  %74 = extractvalue { i32, i32, i32, i32 } %73, 0, !dbg !32
  %75 = extractvalue { i32, i32, i32, i32 } %73, 1, !dbg !32
  %76 = extractvalue { i32, i32, i32, i32 } %73, 2, !dbg !32
  %77 = extractvalue { i32, i32, i32, i32 } %73, 3, !dbg !32
  %78 = insertelement <8 x i32> poison, i32 %56, i64 0, !dbg !26
  %79 = insertelement <8 x i32> %78, i32 %57, i64 1, !dbg !26
  %80 = insertelement <8 x i32> %79, i32 %58, i64 2, !dbg !26
  %81 = insertelement <8 x i32> %80, i32 %59, i64 3, !dbg !26
  %82 = insertelement <8 x i32> %81, i32 %32, i64 4, !dbg !26
  %83 = insertelement <8 x i32> %82, i32 %33, i64 5, !dbg !26
  %84 = insertelement <8 x i32> %83, i32 %34, i64 6, !dbg !26
  %85 = insertelement <8 x i32> %84, i32 %35, i64 7, !dbg !26
  %86 = bitcast <8 x i32> %85 to <8 x float>, !dbg !26
  %87 = insertelement <8 x i32> poison, i32 %62, i64 0, !dbg !28
  %88 = insertelement <8 x i32> %87, i32 %63, i64 1, !dbg !28
  %89 = insertelement <8 x i32> %88, i32 %64, i64 2, !dbg !28
  %90 = insertelement <8 x i32> %89, i32 %65, i64 3, !dbg !28
  %91 = insertelement <8 x i32> %90, i32 %38, i64 4, !dbg !28
  %92 = insertelement <8 x i32> %91, i32 %39, i64 5, !dbg !28
  %93 = insertelement <8 x i32> %92, i32 %40, i64 6, !dbg !28
  %94 = insertelement <8 x i32> %93, i32 %41, i64 7, !dbg !28
  %95 = bitcast <8 x i32> %94 to <8 x float>, !dbg !28
  %96 = insertelement <8 x i32> poison, i32 %68, i64 0, !dbg !30
  %97 = insertelement <8 x i32> %96, i32 %69, i64 1, !dbg !30
  %98 = insertelement <8 x i32> %97, i32 %70, i64 2, !dbg !30
  %99 = insertelement <8 x i32> %98, i32 %71, i64 3, !dbg !30
  %100 = insertelement <8 x i32> %99, i32 %44, i64 4, !dbg !30
  %101 = insertelement <8 x i32> %100, i32 %45, i64 5, !dbg !30
  %102 = insertelement <8 x i32> %101, i32 %46, i64 6, !dbg !30
  %103 = insertelement <8 x i32> %102, i32 %47, i64 7, !dbg !30
  %104 = bitcast <8 x i32> %103 to <8 x float>, !dbg !30
  %105 = insertelement <8 x i32> poison, i32 %74, i64 0, !dbg !32
  %106 = insertelement <8 x i32> %105, i32 %75, i64 1, !dbg !32
  %107 = insertelement <8 x i32> %106, i32 %76, i64 2, !dbg !32
  %108 = insertelement <8 x i32> %107, i32 %77, i64 3, !dbg !32
  %109 = insertelement <8 x i32> %108, i32 %50, i64 4, !dbg !32
  %110 = insertelement <8 x i32> %109, i32 %51, i64 5, !dbg !32
  %111 = insertelement <8 x i32> %110, i32 %52, i64 6, !dbg !32
  %112 = insertelement <8 x i32> %111, i32 %53, i64 7, !dbg !32
  %113 = bitcast <8 x i32> %112 to <8 x float>, !dbg !32
  %114 = fmul <8 x float> %95, splat (float 1.562500e-02), !dbg !33
  %115 = fsub <8 x float> %86, %114, !dbg !34
  %116 = fmul <8 x float> %104, splat (float 1.562500e-02), !dbg !35
  %117 = fsub <8 x float> %115, %116, !dbg !36
  %118 = fmul <8 x float> %113, splat (float 0x3F30000000000000), !dbg !37
  %119 = fadd <8 x float> %117, %118, !dbg !38
  %shift = shufflevector <8 x float> %119, <8 x float> poison, <8 x i32> <i32 4, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !39
  %120 = fmul <8 x float> %shift, %119, !dbg !39
  %121 = extractelement <8 x float> %120, i64 0, !dbg !39
  %shift51 = shufflevector <8 x float> %119, <8 x float> poison, <8 x i32> <i32 poison, i32 5, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !39
  %122 = fmul <8 x float> %shift51, %119, !dbg !39
  %123 = extractelement <8 x float> %122, i64 1, !dbg !39
  %shift52 = shufflevector <8 x float> %119, <8 x float> poison, <8 x i32> <i32 poison, i32 poison, i32 6, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !39
  %124 = fmul <8 x float> %shift52, %119, !dbg !39
  %125 = extractelement <8 x float> %124, i64 2, !dbg !39
  %shift53 = shufflevector <8 x float> %119, <8 x float> poison, <8 x i32> <i32 poison, i32 poison, i32 poison, i32 7, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !39
  %126 = fmul <8 x float> %shift53, %119, !dbg !39
  %127 = extractelement <8 x float> %126, i64 3, !dbg !39
  %128 = fadd float %24, %121, !dbg !40
  %129 = fadd float %25, %123, !dbg !40
  %130 = fadd float %26, %125, !dbg !40
  %131 = fadd float %27, %127, !dbg !40
  %132 = select i1 %13, float %128, float %24, !dbg !41
  %133 = select i1 %13, float %129, float %25, !dbg !41
  %134 = select i1 %13, float %130, float %26, !dbg !41
  %135 = select i1 %13, float %131, float %27, !dbg !41
  %136 = fmul <8 x float> %119, %119, !dbg !42
  %137 = fadd <8 x float> %28, %136, !dbg !43
  %138 = select <8 x i1> %21, <8 x float> %137, <8 x float> %28, !dbg !15
  br i1 %23, label %22, label %139, !dbg !14

139:                                              ; preds = %22
  %140 = lshr i32 %14, 5, !dbg !12
  %141 = and i32 %14, 31, !dbg !12
  %142 = fadd float %132, %133, !dbg !44
  %143 = fadd float %134, %142, !dbg !44
  %144 = fadd float %135, %143, !dbg !44
  %145 = bitcast float %144 to i32, !dbg !49
  %146 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %145, i32 16, i32 31), !dbg !49
  %147 = bitcast i32 %146 to float, !dbg !49
  %148 = fadd float %144, %147, !dbg !44
  %149 = bitcast float %148 to i32, !dbg !49
  %150 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %149, i32 8, i32 31), !dbg !49
  %151 = bitcast i32 %150 to float, !dbg !49
  %152 = fadd float %148, %151, !dbg !44
  %153 = bitcast float %152 to i32, !dbg !49
  %154 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %153, i32 4, i32 31), !dbg !49
  %155 = bitcast i32 %154 to float, !dbg !49
  %156 = fadd float %152, %155, !dbg !44
  %157 = bitcast float %156 to i32, !dbg !49
  %158 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %157, i32 2, i32 31), !dbg !49
  %159 = bitcast i32 %158 to float, !dbg !49
  %160 = fadd float %156, %159, !dbg !44
  %161 = bitcast float %160 to i32, !dbg !49
  %162 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %161, i32 1, i32 31), !dbg !49
  %163 = bitcast i32 %162 to float, !dbg !49
  %164 = fadd float %160, %163, !dbg !44
  %165 = icmp eq i32 %141, 0, !dbg !49
  %166 = and i32 %140, 15, !dbg !49
  %167 = getelementptr float, ptr addrspace(3) @global_smem, i32 %166, !dbg !49
  %168 = bitcast float %164 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %167, <1 x i32> %168, i1 %165) #5, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %169 = icmp slt i32 %14, 16, !dbg !49
  %170 = getelementptr float, ptr addrspace(3) @global_smem, i32 %14, !dbg !49
  %171 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %170, i1 %169) #5, !dbg !49
  %172 = bitcast i32 %171 to float, !dbg !49
  %173 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %171, i32 8, i32 31), !dbg !49
  %174 = bitcast i32 %173 to float, !dbg !49
  %175 = fadd float %172, %174, !dbg !44
  %176 = bitcast float %175 to i32, !dbg !49
  %177 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %176, i32 4, i32 31), !dbg !49
  %178 = bitcast i32 %177 to float, !dbg !49
  %179 = fadd float %175, %178, !dbg !44
  %180 = bitcast float %179 to i32, !dbg !49
  %181 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %180, i32 2, i32 31), !dbg !49
  %182 = bitcast i32 %181 to float, !dbg !49
  %183 = fadd float %179, %182, !dbg !44
  %184 = bitcast float %183 to i32, !dbg !49
  %185 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %184, i32 1, i32 31), !dbg !49
  %186 = bitcast i32 %185 to float, !dbg !49
  %187 = fadd float %183, %186, !dbg !44
  %188 = and i32 %14, 15, !dbg !49
  %189 = icmp eq i32 %188, 0, !dbg !49
  %190 = and i1 %169, %189, !dbg !49
  %191 = bitcast float %187 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %170, <1 x i32> %191, i1 %190) #5, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %192 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %shift54 = shufflevector <8 x float> %138, <8 x float> poison, <8 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 5, i32 poison, i32 poison, i32 poison>, !dbg !52
  %193 = fadd <8 x float> %138, %shift54, !dbg !52
  %shift55 = shufflevector <8 x float> %138, <8 x float> poison, <8 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 6, i32 poison, i32 poison, i32 poison>, !dbg !52
  %194 = fadd <8 x float> %shift55, %193, !dbg !52
  %shift56 = shufflevector <8 x float> %138, <8 x float> poison, <8 x i32> <i32 poison, i32 poison, i32 poison, i32 poison, i32 7, i32 poison, i32 poison, i32 poison>, !dbg !52
  %195 = fadd <8 x float> %shift56, %194, !dbg !52
  %196 = extractelement <8 x float> %195, i64 4, !dbg !52
  %197 = bitcast float %196 to i32, !dbg !50
  %198 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %197, i32 16, i32 31), !dbg !50
  %199 = bitcast i32 %198 to float, !dbg !50
  %200 = fadd float %196, %199, !dbg !52
  %201 = bitcast float %200 to i32, !dbg !50
  %202 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %201, i32 8, i32 31), !dbg !50
  %203 = bitcast i32 %202 to float, !dbg !50
  %204 = fadd float %200, %203, !dbg !52
  %205 = bitcast float %204 to i32, !dbg !50
  %206 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %205, i32 4, i32 31), !dbg !50
  %207 = bitcast i32 %206 to float, !dbg !50
  %208 = fadd float %204, %207, !dbg !52
  %209 = bitcast float %208 to i32, !dbg !50
  %210 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %209, i32 2, i32 31), !dbg !50
  %211 = bitcast i32 %210 to float, !dbg !50
  %212 = fadd float %208, %211, !dbg !52
  %213 = bitcast float %212 to i32, !dbg !50
  %214 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %213, i32 1, i32 31), !dbg !50
  %215 = bitcast i32 %214 to float, !dbg !50
  %216 = fadd float %212, %215, !dbg !52
  %217 = bitcast float %216 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %167, <1 x i32> %217, i1 %165) #5, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %218 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %170, i1 %169) #5, !dbg !50
  %219 = bitcast i32 %218 to float, !dbg !50
  %220 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %218, i32 8, i32 31), !dbg !50
  %221 = bitcast i32 %220 to float, !dbg !50
  %222 = fadd float %219, %221, !dbg !52
  %223 = bitcast float %222 to i32, !dbg !50
  %224 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %223, i32 4, i32 31), !dbg !50
  %225 = bitcast i32 %224 to float, !dbg !50
  %226 = fadd float %222, %225, !dbg !52
  %227 = bitcast float %226 to i32, !dbg !50
  %228 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %227, i32 2, i32 31), !dbg !50
  %229 = bitcast i32 %228 to float, !dbg !50
  %230 = fadd float %226, %229, !dbg !52
  %231 = bitcast float %230 to i32, !dbg !50
  %232 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %231, i32 1, i32 31), !dbg !50
  %233 = bitcast i32 %232 to float, !dbg !50
  %234 = fadd float %230, %233, !dbg !52
  %235 = bitcast float %234 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %170, <1 x i32> %235, i1 %190) #5, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %236 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %shift57 = shufflevector <8 x float> %138, <8 x float> poison, <8 x i32> <i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !55
  %237 = fadd <8 x float> %138, %shift57, !dbg !55
  %shift58 = shufflevector <8 x float> %138, <8 x float> poison, <8 x i32> <i32 2, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !55
  %238 = fadd <8 x float> %shift58, %237, !dbg !55
  %shift59 = shufflevector <8 x float> %138, <8 x float> poison, <8 x i32> <i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !55
  %239 = fadd <8 x float> %shift59, %238, !dbg !55
  %240 = extractelement <8 x float> %239, i64 0, !dbg !55
  %241 = bitcast float %240 to i32, !dbg !53
  %242 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %241, i32 16, i32 31), !dbg !53
  %243 = bitcast i32 %242 to float, !dbg !53
  %244 = fadd float %240, %243, !dbg !55
  %245 = bitcast float %244 to i32, !dbg !53
  %246 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %245, i32 8, i32 31), !dbg !53
  %247 = bitcast i32 %246 to float, !dbg !53
  %248 = fadd float %244, %247, !dbg !55
  %249 = bitcast float %248 to i32, !dbg !53
  %250 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %249, i32 4, i32 31), !dbg !53
  %251 = bitcast i32 %250 to float, !dbg !53
  %252 = fadd float %248, %251, !dbg !55
  %253 = bitcast float %252 to i32, !dbg !53
  %254 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %253, i32 2, i32 31), !dbg !53
  %255 = bitcast i32 %254 to float, !dbg !53
  %256 = fadd float %252, %255, !dbg !55
  %257 = bitcast float %256 to i32, !dbg !53
  %258 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %257, i32 1, i32 31), !dbg !53
  %259 = bitcast i32 %258 to float, !dbg !53
  %260 = fadd float %256, %259, !dbg !55
  %261 = bitcast float %260 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %167, <1 x i32> %261, i1 %165) #5, !dbg !53
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %262 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %170, i1 %169) #5, !dbg !53
  %263 = bitcast i32 %262 to float, !dbg !53
  %264 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %262, i32 8, i32 31), !dbg !53
  %265 = bitcast i32 %264 to float, !dbg !53
  %266 = fadd float %263, %265, !dbg !55
  %267 = bitcast float %266 to i32, !dbg !53
  %268 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %267, i32 4, i32 31), !dbg !53
  %269 = bitcast i32 %268 to float, !dbg !53
  %270 = fadd float %266, %269, !dbg !55
  %271 = bitcast float %270 to i32, !dbg !53
  %272 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %271, i32 2, i32 31), !dbg !53
  %273 = bitcast i32 %272 to float, !dbg !53
  %274 = fadd float %270, %273, !dbg !55
  %275 = bitcast float %274 to i32, !dbg !53
  %276 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %275, i32 1, i32 31), !dbg !53
  %277 = bitcast i32 %276 to float, !dbg !53
  %278 = fadd float %274, %277, !dbg !55
  %279 = bitcast float %278 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %170, <1 x i32> %279, i1 %190) #5, !dbg !53
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %280 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !53
  %281 = fmul float %236, %280, !dbg !56
  %282 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !57
  %.not.i = icmp eq i32 %282, 0, !dbg !57
  %283 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !57
  %.not1.i = icmp eq i32 %283, 0, !dbg !57
  br i1 %.not.i, label %289, label %284, !dbg !57

284:                                              ; preds = %139
  br i1 %.not1.i, label %287, label %285, !dbg !57

285:                                              ; preds = %284
  %286 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %281) #5, !dbg !57
  br label %__nv_sqrtf.exit, !dbg !57

287:                                              ; preds = %284
  %288 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %281) #5, !dbg !57
  br label %__nv_sqrtf.exit, !dbg !57

289:                                              ; preds = %139
  br i1 %.not1.i, label %292, label %290, !dbg !57

290:                                              ; preds = %289
  %291 = tail call float @llvm.nvvm.sqrt.rn.f(float %281) #5, !dbg !57
  br label %__nv_sqrtf.exit, !dbg !57

292:                                              ; preds = %289
  %293 = tail call float @llvm.nvvm.sqrt.approx.f(float %281) #5, !dbg !57
  br label %__nv_sqrtf.exit, !dbg !57

__nv_sqrtf.exit:                                  ; preds = %285, %287, %290, %292
  %.0.i = phi float [ %286, %285 ], [ %288, %287 ], [ %291, %290 ], [ %293, %292 ], !dbg !57
  %294 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !57
  %.not.i1 = icmp eq i32 %294, 0, !dbg !57
  %295 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !57
  %.not1.i4 = icmp eq i32 %295, 0, !dbg !57
  br i1 %.not.i1, label %301, label %296, !dbg !57

296:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %299, label %297, !dbg !57

297:                                              ; preds = %296
  %298 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %281) #5, !dbg !57
  br label %__nv_sqrtf.exit5, !dbg !57

299:                                              ; preds = %296
  %300 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %281) #5, !dbg !57
  br label %__nv_sqrtf.exit5, !dbg !57

301:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %304, label %302, !dbg !57

302:                                              ; preds = %301
  %303 = tail call float @llvm.nvvm.sqrt.rn.f(float %281) #5, !dbg !57
  br label %__nv_sqrtf.exit5, !dbg !57

304:                                              ; preds = %301
  %305 = tail call float @llvm.nvvm.sqrt.approx.f(float %281) #5, !dbg !57
  br label %__nv_sqrtf.exit5, !dbg !57

__nv_sqrtf.exit5:                                 ; preds = %297, %299, %302, %304
  %.0.i3 = phi float [ %298, %297 ], [ %300, %299 ], [ %303, %302 ], [ %305, %304 ], !dbg !57
  %306 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !57
  %.not.i6 = icmp eq i32 %306, 0, !dbg !57
  %307 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !57
  %.not1.i9 = icmp eq i32 %307, 0, !dbg !57
  br i1 %.not.i6, label %313, label %308, !dbg !57

308:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %311, label %309, !dbg !57

309:                                              ; preds = %308
  %310 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %281) #5, !dbg !57
  br label %__nv_sqrtf.exit10, !dbg !57

311:                                              ; preds = %308
  %312 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %281) #5, !dbg !57
  br label %__nv_sqrtf.exit10, !dbg !57

313:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %316, label %314, !dbg !57

314:                                              ; preds = %313
  %315 = tail call float @llvm.nvvm.sqrt.rn.f(float %281) #5, !dbg !57
  br label %__nv_sqrtf.exit10, !dbg !57

316:                                              ; preds = %313
  %317 = tail call float @llvm.nvvm.sqrt.approx.f(float %281) #5, !dbg !57
  br label %__nv_sqrtf.exit10, !dbg !57

__nv_sqrtf.exit10:                                ; preds = %309, %311, %314, %316
  %.0.i8 = phi float [ %310, %309 ], [ %312, %311 ], [ %315, %314 ], [ %317, %316 ], !dbg !57
  %318 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !57
  %.not.i11 = icmp eq i32 %318, 0, !dbg !57
  %319 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !57
  %.not1.i14 = icmp eq i32 %319, 0, !dbg !57
  br i1 %.not.i11, label %325, label %320, !dbg !57

320:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %323, label %321, !dbg !57

321:                                              ; preds = %320
  %322 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %281) #5, !dbg !57
  br label %__nv_sqrtf.exit15, !dbg !57

323:                                              ; preds = %320
  %324 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %281) #5, !dbg !57
  br label %__nv_sqrtf.exit15, !dbg !57

325:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %328, label %326, !dbg !57

326:                                              ; preds = %325
  %327 = tail call float @llvm.nvvm.sqrt.rn.f(float %281) #5, !dbg !57
  br label %__nv_sqrtf.exit15, !dbg !57

328:                                              ; preds = %325
  %329 = tail call float @llvm.nvvm.sqrt.approx.f(float %281) #5, !dbg !57
  br label %__nv_sqrtf.exit15, !dbg !57

__nv_sqrtf.exit15:                                ; preds = %321, %323, %326, %328
  %.0.i13 = phi float [ %322, %321 ], [ %324, %323 ], [ %327, %326 ], [ %329, %328 ], !dbg !57
  %330 = fadd float %192, 0x3EB0C6F7A0000000, !dbg !58
  %331 = fadd float %.0.i, 0x3EB0C6F7A0000000, !dbg !59
  %332 = fadd float %.0.i3, 0x3EB0C6F7A0000000, !dbg !59
  %333 = fadd float %.0.i8, 0x3EB0C6F7A0000000, !dbg !59
  %334 = fadd float %.0.i13, 0x3EB0C6F7A0000000, !dbg !59
  %335 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %330, float %331) #5, !dbg !60
  %336 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %330, float %332) #5, !dbg !60
  %337 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %330, float %333) #5, !dbg !60
  %338 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %330, float %334) #5, !dbg !60
  %339 = mul i32 %12, 5, !dbg !61
  %340 = sext i32 %339 to i64, !dbg !62
  %341 = getelementptr float, ptr addrspace(1) %8, i64 %340, !dbg !62
  tail call void @llvm.nvvm.barrier0(), !dbg !63
  %342 = bitcast float %335 to <1 x i32>, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %342, i1 true) #5, !dbg !63
  %343 = bitcast float %336 to <1 x i32>, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %343, i1 true) #5, !dbg !63
  %344 = bitcast float %337 to <1 x i32>, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %344, i1 true) #5, !dbg !63
  %345 = bitcast float %338 to <1 x i32>, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) @global_smem, <1 x i32> %345, i1 true) #5, !dbg !63
  tail call void @llvm.nvvm.barrier0(), !dbg !63
  %346 = load i32, ptr addrspace(3) @global_smem, align 16, !dbg !63
  %urem = and i32 %14, 511, !dbg !63
  %347 = icmp eq i32 %urem, 0, !dbg !63
  %348 = and i1 %347, %13, !dbg !63
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %346, ptr addrspace(1) %341, i1 %348) #5, !dbg !63
  ret void, !dbg !64
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c6n2vcodxy72aebth35l3zhk73tn4gqcqbglj6lknyqgua4d3xsv.py", directory: "inductor_cache/6n")
!4 = !{ptr @triton_red_fused_add_mul_stack_sub_sum_56, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_add_mul_stack_sub_sum_56, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_add_mul_stack_sub_sum_56", linkageName: "triton_red_fused_add_mul_stack_sub_sum_56", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 33, scope: !7)
!13 = !DILocation(line: 34, column: 44, scope: !7)
!14 = !DILocation(line: 30, column: 36, scope: !7)
!15 = !DILocation(line: 67, column: 48, scope: !7)
!16 = !DILocation(line: 34, column: 39, scope: !7)
!17 = !DILocation(line: 34, column: 34, scope: !7)
!18 = !DILocation(line: 34, column: 49, scope: !7)
!19 = !DILocation(line: 35, column: 34, scope: !7)
!20 = !DILocation(line: 35, column: 49, scope: !7)
!21 = !DILocation(line: 36, column: 34, scope: !7)
!22 = !DILocation(line: 36, column: 49, scope: !7)
!23 = !DILocation(line: 37, column: 34, scope: !7)
!24 = !DILocation(line: 37, column: 49, scope: !7)
!25 = !DILocation(line: 38, column: 35, scope: !7)
!26 = !DILocation(line: 38, column: 50, scope: !7)
!27 = !DILocation(line: 39, column: 35, scope: !7)
!28 = !DILocation(line: 39, column: 50, scope: !7)
!29 = !DILocation(line: 40, column: 35, scope: !7)
!30 = !DILocation(line: 40, column: 50, scope: !7)
!31 = !DILocation(line: 41, column: 35, scope: !7)
!32 = !DILocation(line: 41, column: 50, scope: !7)
!33 = !DILocation(line: 50, column: 24, scope: !7)
!34 = !DILocation(line: 51, column: 24, scope: !7)
!35 = !DILocation(line: 52, column: 24, scope: !7)
!36 = !DILocation(line: 53, column: 24, scope: !7)
!37 = !DILocation(line: 54, column: 24, scope: !7)
!38 = !DILocation(line: 55, column: 24, scope: !7)
!39 = !DILocation(line: 56, column: 24, scope: !7)
!40 = !DILocation(line: 58, column: 25, scope: !7)
!41 = !DILocation(line: 59, column: 48, scope: !7)
!42 = !DILocation(line: 64, column: 24, scope: !7)
!43 = !DILocation(line: 66, column: 25, scope: !7)
!44 = !DILocation(line: 256, column: 15, scope: !45, inlinedAt: !48)
!45 = distinct !DILexicalBlockFile(scope: !47, file: !46, discriminator: 0)
!46 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!47 = distinct !DILexicalBlockFile(scope: !7, file: !46, discriminator: 0)
!48 = !DILocation(line: 68, column: 27, scope: !7)
!49 = !DILocation(line: 267, column: 36, scope: !47, inlinedAt: !48)
!50 = !DILocation(line: 267, column: 36, scope: !47, inlinedAt: !51)
!51 = !DILocation(line: 69, column: 27, scope: !7)
!52 = !DILocation(line: 256, column: 15, scope: !45, inlinedAt: !51)
!53 = !DILocation(line: 267, column: 36, scope: !47, inlinedAt: !54)
!54 = !DILocation(line: 70, column: 27, scope: !7)
!55 = !DILocation(line: 256, column: 15, scope: !45, inlinedAt: !54)
!56 = !DILocation(line: 73, column: 20, scope: !7)
!57 = !DILocation(line: 74, column: 27, scope: !7)
!58 = !DILocation(line: 72, column: 20, scope: !7)
!59 = !DILocation(line: 75, column: 20, scope: !7)
!60 = !DILocation(line: 76, column: 20, scope: !7)
!61 = !DILocation(line: 77, column: 27, scope: !7)
!62 = !DILocation(line: 77, column: 25, scope: !7)
!63 = !DILocation(line: 77, column: 39, scope: !7)
!64 = !DILocation(line: 77, column: 4, scope: !7)
