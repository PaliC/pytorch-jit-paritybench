; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_5 = internal constant [8 x i8] c"unknown\00"
@assertFile_5 = internal constant [74 x i8] c"inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py\00"
@assertMessage_5 = internal constant [36 x i8] c"index out of bounds: 0 <= tmp46 < 4\00"
@assertFunc_4 = internal constant [8 x i8] c"unknown\00"
@assertFile_4 = internal constant [74 x i8] c"inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py\00"
@assertMessage_4 = internal constant [36 x i8] c"index out of bounds: 0 <= tmp38 < 4\00"
@assertFunc_2 = internal constant [8 x i8] c"unknown\00"
@assertFile_2 = internal constant [74 x i8] c"inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py\00"
@assertMessage_2 = internal constant [36 x i8] c"index out of bounds: 0 <= tmp17 < 4\00"
@assertFunc_1 = internal constant [8 x i8] c"unknown\00"
@assertFile_1 = internal constant [74 x i8] c"inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py\00"
@assertMessage_1 = internal constant [35 x i8] c"index out of bounds: 0 <= tmp9 < 4\00"
@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [74 x i8] c"inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py\00"
@assertMessage_0 = internal constant [35 x i8] c"index out of bounds: 0 <= tmp4 < 4\00"
@global_smem = external addrspace(3) global [0 x i8], align 16

; Function Attrs: noreturn
declare !dbg !7 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define void @triton_red_fused__to_copy_add_div_eq_mul_smooth_l1_loss_sum_11(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9) local_unnamed_addr !dbg !11 {
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = and i32 %11, 63, !dbg !12
  %13 = and i32 %11, 3
  %14 = lshr i32 %11, 2
  %15 = and i32 %14, 3
  %16 = zext nneg i32 %15 to i64
  %17 = zext nneg i32 %13 to i64
  %18 = zext nneg i32 %12 to i64, !dbg !13
  br label %19, !dbg !13

19:                                               ; preds = %10, %102
  %indvars.iv = phi i64 [ 0, %10 ], [ %indvars.iv.next, %102 ]
  %20 = phi float [ 0.000000e+00, %10 ], [ %124, %102 ]
  %21 = phi float [ 0.000000e+00, %10 ], [ %123, %102 ]
  %22 = or disjoint i64 %indvars.iv, %18, !dbg !14
  %23 = lshr i64 %22, 4, !dbg !15
  %24 = lshr exact i64 %indvars.iv, 4, !dbg !16
  %25 = getelementptr i64, ptr addrspace(1) %2, i64 %23, !dbg !17
  %26 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %25, i1 true, i1 true) #4, !dbg !18
  %27 = getelementptr float, ptr addrspace(1) %5, i64 %22, !dbg !19
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %27, i1 true, i32 0, i1 true) #4, !dbg !20
  %29 = bitcast i32 %28 to float, !dbg !20
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !21
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %30, i1 true, i32 0, i1 true) #4, !dbg !22
  %32 = bitcast i32 %31 to float, !dbg !22
  %33 = getelementptr float, ptr addrspace(1) %6, i64 %22, !dbg !23
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %33, i1 true, i32 0, i1 true) #4, !dbg !24
  %35 = bitcast i32 %34 to float, !dbg !24
  %36 = getelementptr float, ptr addrspace(1) %7, i64 %22, !dbg !25
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %36, i1 true, i32 0, i1 true) #4, !dbg !26
  %38 = bitcast i32 %37 to float, !dbg !26
  %39 = lshr i64 %26, 61, !dbg !27
  %40 = and i64 %39, 4, !dbg !27
  %41 = add i64 %40, %26, !dbg !27
  %42 = icmp ugt i64 %41, 3, !dbg !28
  br i1 %42, label %43, label %44, !dbg !29

43:                                               ; preds = %19
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 46, ptr nonnull @assertFunc_0, i64 1), !dbg !29
  unreachable, !dbg !29

44:                                               ; preds = %19
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %45 = shl nuw nsw i64 %41, 2, !dbg !30
  %46 = lshr exact i64 %indvars.iv, 2, !dbg !31
  %47 = or disjoint i64 %45, %46, !dbg !32
  %48 = or disjoint i64 %47, %16, !dbg !33
  %49 = getelementptr i64, ptr addrspace(1) %3, i64 %48, !dbg !34
  %50 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %49, i1 true, i1 true) #4, !dbg !35
  %51 = lshr i64 %50, 61, !dbg !36
  %52 = and i64 %51, 4, !dbg !36
  %53 = add i64 %52, %50, !dbg !36
  %54 = icmp ugt i64 %53, 3, !dbg !37
  br i1 %54, label %55, label %56, !dbg !38

55:                                               ; preds = %44
  tail call void @__assertfail(ptr nonnull @assertMessage_1, ptr nonnull @assertFile_1, i32 51, ptr nonnull @assertFunc_1, i64 1), !dbg !38
  unreachable, !dbg !38

56:                                               ; preds = %44
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %57 = or disjoint i64 %41, %24, !dbg !39
  %58 = getelementptr float, ptr addrspace(1) %4, i64 %57, !dbg !40
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %58, i1 true, i32 0, i1 true) #4, !dbg !41
  %60 = or disjoint i64 %53, %24, !dbg !42
  %61 = getelementptr float, ptr addrspace(1) %4, i64 %60, !dbg !43
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %61, i1 true, i32 0, i1 true) #4, !dbg !44
  %63 = or disjoint i64 %47, %17, !dbg !45
  %64 = getelementptr i64, ptr addrspace(1) %3, i64 %63, !dbg !46
  %65 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %64, i1 true, i1 true) #4, !dbg !47
  %66 = lshr i64 %65, 61, !dbg !48
  %67 = and i64 %66, 4, !dbg !48
  %68 = add i64 %67, %65, !dbg !48
  %69 = icmp ugt i64 %68, 3, !dbg !49
  br i1 %69, label %70, label %71, !dbg !50

70:                                               ; preds = %56
  tail call void @__assertfail(ptr nonnull @assertMessage_2, ptr nonnull @assertFile_2, i32 59, ptr nonnull @assertFunc_2, i64 1), !dbg !50
  unreachable, !dbg !50

71:                                               ; preds = %56
  %72 = bitcast i32 %59 to float, !dbg !41
  %73 = bitcast i32 %62 to float, !dbg !44
  %74 = fadd float %72, %73, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %75 = or disjoint i64 %68, %24, !dbg !52
  %76 = getelementptr float, ptr addrspace(1) %4, i64 %75, !dbg !53
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %76, i1 true, i32 0, i1 true) #4, !dbg !54
  %78 = bitcast i32 %77 to float, !dbg !54
  %79 = fadd float %72, %78, !dbg !55
  %80 = fmul float %74, %79, !dbg !56
  %81 = fcmp oeq float %80, 4.000000e+00, !dbg !57
  %82 = uitofp i1 %81 to float, !dbg !58
  %83 = fmul float %29, %82, !dbg !59
  %84 = fmul float %83, %32, !dbg !60
  tail call void @llvm.nvvm.barrier0(), !dbg !61
  %85 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %49, i1 true, i1 true) #4, !dbg !62
  %86 = lshr i64 %85, 61, !dbg !63
  %87 = and i64 %86, 4, !dbg !63
  %88 = add i64 %87, %85, !dbg !63
  %89 = icmp ugt i64 %88, 3, !dbg !64
  br i1 %89, label %90, label %91, !dbg !65

90:                                               ; preds = %71
  tail call void @__assertfail(ptr nonnull @assertMessage_4, ptr nonnull @assertFile_4, i32 76, ptr nonnull @assertFunc_4, i64 1), !dbg !65
  unreachable, !dbg !65

91:                                               ; preds = %71
  tail call void @llvm.nvvm.barrier0(), !dbg !65
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %58, i1 true, i32 0, i1 true) #4, !dbg !66
  %93 = or disjoint i64 %88, %24, !dbg !67
  %94 = getelementptr float, ptr addrspace(1) %4, i64 %93, !dbg !68
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %94, i1 true, i32 0, i1 true) #4, !dbg !69
  %96 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_first.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %64, i1 true, i1 true) #4, !dbg !70
  %97 = lshr i64 %96, 61, !dbg !71
  %98 = and i64 %97, 4, !dbg !71
  %99 = add i64 %98, %96, !dbg !71
  %100 = icmp ugt i64 %99, 3, !dbg !72
  br i1 %100, label %101, label %102, !dbg !73

101:                                              ; preds = %91
  tail call void @__assertfail(ptr nonnull @assertMessage_5, ptr nonnull @assertFile_5, i32 84, ptr nonnull @assertFunc_5, i64 1), !dbg !73
  unreachable, !dbg !73

102:                                              ; preds = %91
  %103 = bitcast i32 %92 to float, !dbg !66
  %104 = bitcast i32 %95 to float, !dbg !69
  %105 = fadd float %103, %104, !dbg !74
  tail call void @llvm.nvvm.barrier0(), !dbg !73
  %106 = or disjoint i64 %99, %24, !dbg !75
  %107 = getelementptr float, ptr addrspace(1) %4, i64 %106, !dbg !76
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %107, i1 true, i32 0, i1 true) #4, !dbg !77
  %109 = bitcast i32 %108 to float, !dbg !77
  %110 = fadd float %103, %109, !dbg !78
  %111 = fmul float %105, %110, !dbg !79
  %112 = fcmp oeq float %111, 4.000000e+00, !dbg !80
  %113 = uitofp i1 %112 to float, !dbg !81
  %114 = fmul float %38, %113, !dbg !82
  %115 = fmul float %114, %35, !dbg !83
  %116 = fsub float %84, %115, !dbg !84
  %117 = tail call float @llvm.fabs.f32(float %116), !dbg !85
  %118 = fcmp olt float %117, 1.000000e+00, !dbg !86
  %119 = fmul float %116, %116, !dbg !87
  %120 = fmul float %119, 5.000000e-01, !dbg !88
  %121 = fadd float %117, -5.000000e-01, !dbg !89
  %122 = select i1 %118, float %120, float %121, !dbg !90
  %123 = fadd float %21, %122, !dbg !91
  %124 = fadd float %20, %83, !dbg !92
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 64, !dbg !13
  %125 = icmp samesign ult i64 %indvars.iv, 192, !dbg !13
  br i1 %125, label %19, label %126, !dbg !13

126:                                              ; preds = %102
  %127 = lshr i32 %11, 5, !dbg !12
  %128 = and i32 %11, 31, !dbg !12
  %129 = bitcast float %123 to i32, !dbg !93
  %130 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %129, i32 16, i32 31), !dbg !93
  %131 = bitcast i32 %130 to float, !dbg !93
  %132 = fadd float %123, %131, !dbg !97
  %133 = bitcast float %132 to i32, !dbg !93
  %134 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %133, i32 8, i32 31), !dbg !93
  %135 = bitcast i32 %134 to float, !dbg !93
  %136 = fadd float %132, %135, !dbg !97
  %137 = bitcast float %136 to i32, !dbg !93
  %138 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %137, i32 4, i32 31), !dbg !93
  %139 = bitcast i32 %138 to float, !dbg !93
  %140 = fadd float %136, %139, !dbg !97
  %141 = bitcast float %140 to i32, !dbg !93
  %142 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %141, i32 2, i32 31), !dbg !93
  %143 = bitcast i32 %142 to float, !dbg !93
  %144 = fadd float %140, %143, !dbg !97
  %145 = bitcast float %144 to i32, !dbg !93
  %146 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %145, i32 1, i32 31), !dbg !93
  %147 = bitcast i32 %146 to float, !dbg !93
  %148 = fadd float %144, %147, !dbg !97
  %149 = icmp eq i32 %128, 0, !dbg !93
  %150 = and i32 %127, 1, !dbg !93
  %151 = getelementptr float, ptr addrspace(3) @global_smem, i32 %150, !dbg !93
  %152 = bitcast float %148 to <1 x i32>, !dbg !93
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %151, <1 x i32> %152, i1 %149) #4, !dbg !93
  tail call void @llvm.nvvm.barrier0(), !dbg !93
  %153 = icmp slt i32 %11, 2, !dbg !93
  %154 = getelementptr float, ptr addrspace(3) @global_smem, i32 %11, !dbg !93
  %155 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %154, i1 %153) #4, !dbg !93
  %156 = bitcast i32 %155 to float, !dbg !93
  %157 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %155, i32 1, i32 31), !dbg !93
  %158 = bitcast i32 %157 to float, !dbg !93
  %159 = fadd float %156, %158, !dbg !97
  %160 = and i32 %11, 1, !dbg !93
  %161 = icmp eq i32 %160, 0, !dbg !93
  %162 = and i1 %153, %161, !dbg !93
  %163 = bitcast float %159 to <1 x i32>, !dbg !93
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %154, <1 x i32> %163, i1 %162) #4, !dbg !93
  tail call void @llvm.nvvm.barrier0(), !dbg !93
  %164 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !93
  tail call void @llvm.nvvm.barrier0(), !dbg !99
  %165 = bitcast float %124 to i32, !dbg !99
  %166 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %165, i32 16, i32 31), !dbg !99
  %167 = bitcast i32 %166 to float, !dbg !99
  %168 = fadd float %124, %167, !dbg !101
  %169 = bitcast float %168 to i32, !dbg !99
  %170 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %169, i32 8, i32 31), !dbg !99
  %171 = bitcast i32 %170 to float, !dbg !99
  %172 = fadd float %168, %171, !dbg !101
  %173 = bitcast float %172 to i32, !dbg !99
  %174 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %173, i32 4, i32 31), !dbg !99
  %175 = bitcast i32 %174 to float, !dbg !99
  %176 = fadd float %172, %175, !dbg !101
  %177 = bitcast float %176 to i32, !dbg !99
  %178 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %177, i32 2, i32 31), !dbg !99
  %179 = bitcast i32 %178 to float, !dbg !99
  %180 = fadd float %176, %179, !dbg !101
  %181 = bitcast float %180 to i32, !dbg !99
  %182 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %181, i32 1, i32 31), !dbg !99
  %183 = bitcast i32 %182 to float, !dbg !99
  %184 = fadd float %180, %183, !dbg !101
  %185 = bitcast float %184 to <1 x i32>, !dbg !99
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %151, <1 x i32> %185, i1 %149) #4, !dbg !99
  tail call void @llvm.nvvm.barrier0(), !dbg !99
  %186 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %154, i1 %153) #4, !dbg !99
  %187 = bitcast i32 %186 to float, !dbg !99
  %188 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %186, i32 1, i32 31), !dbg !99
  %189 = bitcast i32 %188 to float, !dbg !99
  %190 = fadd float %187, %189, !dbg !101
  %191 = bitcast float %190 to <1 x i32>, !dbg !99
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %154, <1 x i32> %191, i1 %162) #4, !dbg !99
  tail call void @llvm.nvvm.barrier0(), !dbg !99
  %192 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !99
  %193 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %1, i1 true) #4, !dbg !102
  %194 = bitcast i32 %193 to float, !dbg !102
  %195 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %8, i1 true) #4, !dbg !103
  %196 = bitcast i32 %195 to float, !dbg !103
  %197 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %194, float %196) #4, !dbg !104
  %198 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %164, float %192) #4, !dbg !105
  %199 = fadd float %197, %198, !dbg !106
  tail call void @llvm.nvvm.barrier0(), !dbg !107
  %200 = icmp eq i32 %12, 0, !dbg !108
  %201 = bitcast float %199 to i32, !dbg !108
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %201, ptr addrspace(1) %1, i1 %200) #4, !dbg !108
  ret void, !dbg !109
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.fabs.f32(float) #1

attributes #0 = { noreturn }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { convergent nocallback nounwind }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py", directory: "inductor_cache/7c")
!4 = !{ptr @triton_red_fused__to_copy_add_div_eq_mul_smooth_l1_loss_sum_11, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused__to_copy_add_div_eq_mul_smooth_l1_loss_sum_11, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !8, file: !8, type: !9, spFlags: DISPFlagOptimized)
!8 = !DIFile(filename: "<unknown>", directory: "")
!9 = !DISubroutineType(cc: DW_CC_normal, types: !10)
!10 = !{}
!11 = distinct !DISubprogram(name: "triton_red_fused__to_copy_add_div_eq_mul_smooth_l1_loss_sum_11", linkageName: "triton_red_fused__to_copy_add_div_eq_mul_smooth_l1_loss_sum_11", scope: !3, file: !3, line: 19, type: !9, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!12 = !DILocation(line: 25, column: 33, scope: !11)
!13 = !DILocation(line: 28, column: 36, scope: !11)
!14 = !DILocation(line: 29, column: 27, scope: !11)
!15 = !DILocation(line: 31, column: 23, scope: !11)
!16 = !DILocation(line: 33, column: 23, scope: !11)
!17 = !DILocation(line: 36, column: 34, scope: !11)
!18 = !DILocation(line: 36, column: 39, scope: !11)
!19 = !DILocation(line: 37, column: 35, scope: !11)
!20 = !DILocation(line: 37, column: 40, scope: !11)
!21 = !DILocation(line: 38, column: 39, scope: !11)
!22 = !DILocation(line: 38, column: 44, scope: !11)
!23 = !DILocation(line: 39, column: 35, scope: !11)
!24 = !DILocation(line: 39, column: 40, scope: !11)
!25 = !DILocation(line: 41, column: 35, scope: !11)
!26 = !DILocation(line: 41, column: 40, scope: !11)
!27 = !DILocation(line: 45, column: 36, scope: !11)
!28 = !DILocation(line: 46, column: 41, scope: !11)
!29 = !DILocation(line: 46, column: 64, scope: !11)
!30 = !DILocation(line: 47, column: 41, scope: !11)
!31 = !DILocation(line: 47, column: 51, scope: !11)
!32 = !DILocation(line: 47, column: 39, scope: !11)
!33 = !DILocation(line: 47, column: 48, scope: !11)
!34 = !DILocation(line: 47, column: 34, scope: !11)
!35 = !DILocation(line: 47, column: 56, scope: !11)
!36 = !DILocation(line: 50, column: 36, scope: !11)
!37 = !DILocation(line: 51, column: 41, scope: !11)
!38 = !DILocation(line: 51, column: 64, scope: !11)
!39 = !DILocation(line: 52, column: 42, scope: !11)
!40 = !DILocation(line: 52, column: 35, scope: !11)
!41 = !DILocation(line: 52, column: 49, scope: !11)
!42 = !DILocation(line: 53, column: 42, scope: !11)
!43 = !DILocation(line: 53, column: 35, scope: !11)
!44 = !DILocation(line: 53, column: 49, scope: !11)
!45 = !DILocation(line: 55, column: 49, scope: !11)
!46 = !DILocation(line: 55, column: 35, scope: !11)
!47 = !DILocation(line: 55, column: 57, scope: !11)
!48 = !DILocation(line: 58, column: 39, scope: !11)
!49 = !DILocation(line: 59, column: 42, scope: !11)
!50 = !DILocation(line: 59, column: 66, scope: !11)
!51 = !DILocation(line: 54, column: 24, scope: !11)
!52 = !DILocation(line: 60, column: 43, scope: !11)
!53 = !DILocation(line: 60, column: 35, scope: !11)
!54 = !DILocation(line: 60, column: 50, scope: !11)
!55 = !DILocation(line: 61, column: 24, scope: !11)
!56 = !DILocation(line: 62, column: 24, scope: !11)
!57 = !DILocation(line: 64, column: 25, scope: !11)
!58 = !DILocation(line: 65, column: 25, scope: !11)
!59 = !DILocation(line: 66, column: 24, scope: !11)
!60 = !DILocation(line: 67, column: 24, scope: !11)
!61 = !DILocation(line: 71, column: 66, scope: !11)
!62 = !DILocation(line: 72, column: 81, scope: !11)
!63 = !DILocation(line: 75, column: 39, scope: !11)
!64 = !DILocation(line: 76, column: 42, scope: !11)
!65 = !DILocation(line: 76, column: 66, scope: !11)
!66 = !DILocation(line: 77, column: 58, scope: !11)
!67 = !DILocation(line: 78, column: 43, scope: !11)
!68 = !DILocation(line: 78, column: 35, scope: !11)
!69 = !DILocation(line: 78, column: 58, scope: !11)
!70 = !DILocation(line: 80, column: 74, scope: !11)
!71 = !DILocation(line: 83, column: 39, scope: !11)
!72 = !DILocation(line: 84, column: 42, scope: !11)
!73 = !DILocation(line: 84, column: 66, scope: !11)
!74 = !DILocation(line: 79, column: 24, scope: !11)
!75 = !DILocation(line: 85, column: 43, scope: !11)
!76 = !DILocation(line: 85, column: 35, scope: !11)
!77 = !DILocation(line: 85, column: 58, scope: !11)
!78 = !DILocation(line: 86, column: 24, scope: !11)
!79 = !DILocation(line: 87, column: 24, scope: !11)
!80 = !DILocation(line: 88, column: 25, scope: !11)
!81 = !DILocation(line: 89, column: 25, scope: !11)
!82 = !DILocation(line: 90, column: 24, scope: !11)
!83 = !DILocation(line: 91, column: 24, scope: !11)
!84 = !DILocation(line: 92, column: 24, scope: !11)
!85 = !DILocation(line: 93, column: 28, scope: !11)
!86 = !DILocation(line: 95, column: 24, scope: !11)
!87 = !DILocation(line: 96, column: 24, scope: !11)
!88 = !DILocation(line: 98, column: 24, scope: !11)
!89 = !DILocation(line: 100, column: 24, scope: !11)
!90 = !DILocation(line: 101, column: 39, scope: !11)
!91 = !DILocation(line: 103, column: 25, scope: !11)
!92 = !DILocation(line: 106, column: 25, scope: !11)
!93 = !DILocation(line: 267, column: 36, scope: !94, inlinedAt: !96)
!94 = distinct !DILexicalBlockFile(scope: !11, file: !95, discriminator: 0)
!95 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!96 = !DILocation(line: 108, column: 27, scope: !11)
!97 = !DILocation(line: 256, column: 15, scope: !98, inlinedAt: !96)
!98 = distinct !DILexicalBlockFile(scope: !94, file: !95, discriminator: 0)
!99 = !DILocation(line: 267, column: 36, scope: !94, inlinedAt: !100)
!100 = !DILocation(line: 109, column: 27, scope: !11)
!101 = !DILocation(line: 256, column: 15, scope: !98, inlinedAt: !100)
!102 = !DILocation(line: 110, column: 20, scope: !11)
!103 = !DILocation(line: 112, column: 20, scope: !11)
!104 = !DILocation(line: 114, column: 20, scope: !11)
!105 = !DILocation(line: 115, column: 20, scope: !11)
!106 = !DILocation(line: 116, column: 20, scope: !11)
!107 = !DILocation(line: 117, column: 4, scope: !11)
!108 = !DILocation(line: 118, column: 71, scope: !11)
!109 = !DILocation(line: 118, column: 4, scope: !11)
