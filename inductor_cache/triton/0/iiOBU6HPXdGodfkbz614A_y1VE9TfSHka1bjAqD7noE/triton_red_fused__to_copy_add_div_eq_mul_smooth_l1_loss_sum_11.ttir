#loc = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":19:0)
#loc1 = loc(unknown)
#loc125 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":108:27)
#loc128 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":109:27)
#loc142 = loc(callsite(#loc1 at #loc125))
#loc145 = loc(callsite(#loc1 at #loc128))
module {
  tt.func public @triton_red_fused__to_copy_add_div_eq_mul_smooth_l1_loss_sum_11(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":19:0), %arg2: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":19:0), %arg3: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":19:0), %arg5: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":19:0), %arg6: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":19:0), %arg7: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":19:0), %arg8: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":19:0), %arg9: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0> : tensor<1x64xi64> loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %c256_i32 = arith.constant 256 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<5.000000e-01> : tensor<1x64xf32> loc(#loc1)
    %cst_1 = arith.constant dense<1.000000e+00> : tensor<1x64xf32> loc(#loc1)
    %cst_2 = arith.constant dense<4.000000e+00> : tensor<1x64xf32> loc(#loc1)
    %cst_3 = arith.constant dense<4> : tensor<1x64xi64> loc(#loc1)
    %cst_4 = arith.constant dense<64> : tensor<1x64xi32> loc(#loc1)
    %cst_5 = arith.constant dense<4> : tensor<1x64xi32> loc(#loc1)
    %cst_6 = arith.constant dense<16> : tensor<1x64xi32> loc(#loc1)
    %cst_7 = arith.constant dense<256> : tensor<1x64xi32> loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst_8 = arith.constant dense<0.000000e+00> : tensor<1x64xf32> loc(#loc1)
    %cst_9 = arith.constant dense<true> : tensor<1x64xi1> loc(#loc1)
    %0 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32> loc(#loc2)
    %1 = tt.expand_dims %0 {axis = 0 : i32} : tensor<64xi32> -> tensor<1x64xi32> loc(#loc3)
    %2 = tt.splat %arg2 : !tt.ptr<i64> -> tensor<1x64x!tt.ptr<i64>> loc(#loc4)
    %3 = tt.splat %arg5 : !tt.ptr<f32> -> tensor<1x64x!tt.ptr<f32>> loc(#loc5)
    %4 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1x64x!tt.ptr<f32>> loc(#loc6)
    %5 = tt.splat %arg6 : !tt.ptr<f32> -> tensor<1x64x!tt.ptr<f32>> loc(#loc7)
    %6 = tt.splat %arg7 : !tt.ptr<f32> -> tensor<1x64x!tt.ptr<f32>> loc(#loc8)
    %7 = tt.splat %arg3 : !tt.ptr<i64> -> tensor<1x64x!tt.ptr<i64>> loc(#loc9)
    %8 = tt.splat %arg4 : !tt.ptr<f32> -> tensor<1x64x!tt.ptr<f32>> loc(#loc10)
    %9:2 = scf.for %arg10 = %c0_i32 to %c256_i32 step %c64_i32 iter_args(%arg11 = %cst_8, %arg12 = %cst_8) -> (tensor<1x64xf32>, tensor<1x64xf32>)  : i32 {
      %23 = tt.splat %arg10 : i32 -> tensor<1x64xi32> loc(#loc12)
      %24 = arith.addi %23, %1 : tensor<1x64xi32> loc(#loc12)
      %25 = arith.cmpi slt, %24, %cst_7 : tensor<1x64xi32> loc(#loc13)
      %26 = arith.divsi %24, %cst_6 : tensor<1x64xi32> loc(#loc14)
      %27 = arith.divsi %24, %cst_5 : tensor<1x64xi32> loc(#loc15)
      %28 = arith.remsi %27, %cst_5 : tensor<1x64xi32> loc(#loc16)
      %29 = arith.divsi %24, %cst_4 : tensor<1x64xi32> loc(#loc17)
      %30 = arith.remsi %24, %cst_5 : tensor<1x64xi32> loc(#loc18)
      %31 = tt.addptr %2, %26 : tensor<1x64x!tt.ptr<i64>>, tensor<1x64xi32> loc(#loc4)
      %32 = tt.load %31, %25, %cst evictionPolicy = evict_last : tensor<1x64x!tt.ptr<i64>> loc(#loc19)
      %33 = tt.addptr %3, %24 : tensor<1x64x!tt.ptr<f32>>, tensor<1x64xi32> loc(#loc5)
      %34 = tt.load %33, %25, %cst_8 evictionPolicy = evict_first : tensor<1x64x!tt.ptr<f32>> loc(#loc20)
      %35 = tt.addptr %4, %24 : tensor<1x64x!tt.ptr<f32>>, tensor<1x64xi32> loc(#loc6)
      %36 = tt.load %35, %25, %cst_8 evictionPolicy = evict_first : tensor<1x64x!tt.ptr<f32>> loc(#loc21)
      %37 = tt.addptr %5, %24 : tensor<1x64x!tt.ptr<f32>>, tensor<1x64xi32> loc(#loc7)
      %38 = tt.load %37, %25, %cst_8 evictionPolicy = evict_first : tensor<1x64x!tt.ptr<f32>> loc(#loc22)
      %39 = tt.addptr %6, %24 : tensor<1x64x!tt.ptr<f32>>, tensor<1x64xi32> loc(#loc8)
      %40 = tt.load %39, %25, %cst_8 evictionPolicy = evict_first : tensor<1x64x!tt.ptr<f32>> loc(#loc23)
      %41 = arith.addi %32, %cst_3 : tensor<1x64xi64> loc(#loc24)
      %42 = arith.cmpi slt, %32, %cst : tensor<1x64xi64> loc(#loc25)
      %43 = arith.select %42, %41, %32 : tensor<1x64xi1>, tensor<1x64xi64> loc(#loc26)
      %44 = arith.cmpi sge, %43, %cst : tensor<1x64xi64> loc(#loc27)
      %45 = arith.cmpi slt, %43, %cst_3 : tensor<1x64xi64> loc(#loc28)
      %46 = arith.andi %44, %45 : tensor<1x64xi1> loc(#loc29)
      %47 = arith.xori %25, %cst_9 : tensor<1x64xi1> loc(#loc30)
      %48 = arith.ori %46, %47 : tensor<1x64xi1> loc(#loc31)
      tt.assert %48, "index out of bounds: 0 <= tmp4 < 4" : tensor<1x64xi1> loc(#loc32)
      %49 = arith.muli %43, %cst_3 : tensor<1x64xi64> loc(#loc33)
      %50 = arith.extsi %28 : tensor<1x64xi32> to tensor<1x64xi64> loc(#loc34)
      %51 = arith.addi %50, %49 : tensor<1x64xi64> loc(#loc34)
      %52 = arith.muli %29, %cst_6 : tensor<1x64xi32> loc(#loc35)
      %53 = arith.extsi %52 : tensor<1x64xi32> to tensor<1x64xi64> loc(#loc36)
      %54 = arith.addi %51, %53 : tensor<1x64xi64> loc(#loc36)
      %55 = tt.addptr %7, %54 : tensor<1x64x!tt.ptr<i64>>, tensor<1x64xi64> loc(#loc9)
      %56 = tt.load %55, %25, %cst evictionPolicy = evict_last : tensor<1x64x!tt.ptr<i64>> loc(#loc37)
      %57 = arith.addi %56, %cst_3 : tensor<1x64xi64> loc(#loc38)
      %58 = arith.cmpi slt, %56, %cst : tensor<1x64xi64> loc(#loc39)
      %59 = arith.select %58, %57, %56 : tensor<1x64xi1>, tensor<1x64xi64> loc(#loc40)
      %60 = arith.cmpi sge, %59, %cst : tensor<1x64xi64> loc(#loc41)
      %61 = arith.cmpi slt, %59, %cst_3 : tensor<1x64xi64> loc(#loc42)
      %62 = arith.andi %60, %61 : tensor<1x64xi1> loc(#loc43)
      %63 = arith.ori %62, %47 : tensor<1x64xi1> loc(#loc44)
      tt.assert %63, "index out of bounds: 0 <= tmp9 < 4" : tensor<1x64xi1> loc(#loc45)
      %64 = arith.muli %29, %cst_5 : tensor<1x64xi32> loc(#loc46)
      %65 = arith.extsi %64 : tensor<1x64xi32> to tensor<1x64xi64> loc(#loc47)
      %66 = arith.addi %43, %65 : tensor<1x64xi64> loc(#loc47)
      %67 = tt.addptr %8, %66 : tensor<1x64x!tt.ptr<f32>>, tensor<1x64xi64> loc(#loc10)
      %68 = tt.load %67, %25, %cst_8 evictionPolicy = evict_last : tensor<1x64x!tt.ptr<f32>> loc(#loc48)
      %69 = arith.addi %59, %65 : tensor<1x64xi64> loc(#loc49)
      %70 = tt.addptr %8, %69 : tensor<1x64x!tt.ptr<f32>>, tensor<1x64xi64> loc(#loc50)
      %71 = tt.load %70, %25, %cst_8 evictionPolicy = evict_last : tensor<1x64x!tt.ptr<f32>> loc(#loc51)
      %72 = arith.addf %68, %71 : tensor<1x64xf32> loc(#loc52)
      %73 = arith.extsi %30 : tensor<1x64xi32> to tensor<1x64xi64> loc(#loc53)
      %74 = arith.addi %73, %49 : tensor<1x64xi64> loc(#loc53)
      %75 = arith.addi %74, %53 : tensor<1x64xi64> loc(#loc54)
      %76 = tt.addptr %7, %75 : tensor<1x64x!tt.ptr<i64>>, tensor<1x64xi64> loc(#loc55)
      %77 = tt.load %76, %25, %cst evictionPolicy = evict_last : tensor<1x64x!tt.ptr<i64>> loc(#loc56)
      %78 = arith.addi %77, %cst_3 : tensor<1x64xi64> loc(#loc57)
      %79 = arith.cmpi slt, %77, %cst : tensor<1x64xi64> loc(#loc58)
      %80 = arith.select %79, %78, %77 : tensor<1x64xi1>, tensor<1x64xi64> loc(#loc59)
      %81 = arith.cmpi sge, %80, %cst : tensor<1x64xi64> loc(#loc60)
      %82 = arith.cmpi slt, %80, %cst_3 : tensor<1x64xi64> loc(#loc61)
      %83 = arith.andi %81, %82 : tensor<1x64xi1> loc(#loc62)
      %84 = arith.ori %83, %47 : tensor<1x64xi1> loc(#loc63)
      tt.assert %84, "index out of bounds: 0 <= tmp17 < 4" : tensor<1x64xi1> loc(#loc64)
      %85 = arith.addi %80, %65 : tensor<1x64xi64> loc(#loc65)
      %86 = tt.addptr %8, %85 : tensor<1x64x!tt.ptr<f32>>, tensor<1x64xi64> loc(#loc66)
      %87 = tt.load %86, %25, %cst_8 evictionPolicy = evict_last : tensor<1x64x!tt.ptr<f32>> loc(#loc67)
      %88 = arith.addf %68, %87 : tensor<1x64xf32> loc(#loc68)
      %89 = arith.mulf %72, %88 : tensor<1x64xf32> loc(#loc69)
      %90 = arith.cmpf oeq, %89, %cst_2 : tensor<1x64xf32> loc(#loc70)
      %91 = arith.uitofp %90 : tensor<1x64xi1> to tensor<1x64xf32> loc(#loc71)
      %92 = arith.mulf %91, %34 : tensor<1x64xf32> loc(#loc72)
      %93 = arith.mulf %36, %92 : tensor<1x64xf32> loc(#loc73)
      tt.assert %48, "index out of bounds: 0 <= tmp33 < 4" : tensor<1x64xi1> loc(#loc74)
      %94 = arith.addi %49, %53 : tensor<1x64xi64> loc(#loc75)
      %95 = arith.addi %94, %50 : tensor<1x64xi64> loc(#loc76)
      %96 = tt.addptr %7, %95 : tensor<1x64x!tt.ptr<i64>>, tensor<1x64xi64> loc(#loc77)
      %97 = tt.load %96, %25, %cst evictionPolicy = evict_last : tensor<1x64x!tt.ptr<i64>> loc(#loc78)
      %98 = arith.addi %97, %cst_3 : tensor<1x64xi64> loc(#loc79)
      %99 = arith.cmpi slt, %97, %cst : tensor<1x64xi64> loc(#loc80)
      %100 = arith.select %99, %98, %97 : tensor<1x64xi1>, tensor<1x64xi64> loc(#loc81)
      %101 = arith.cmpi sge, %100, %cst : tensor<1x64xi64> loc(#loc82)
      %102 = arith.cmpi slt, %100, %cst_3 : tensor<1x64xi64> loc(#loc83)
      %103 = arith.andi %101, %102 : tensor<1x64xi1> loc(#loc84)
      %104 = arith.ori %103, %47 : tensor<1x64xi1> loc(#loc85)
      tt.assert %104, "index out of bounds: 0 <= tmp38 < 4" : tensor<1x64xi1> loc(#loc86)
      %105 = tt.load %67, %25, %cst_8 evictionPolicy = evict_last : tensor<1x64x!tt.ptr<f32>> loc(#loc87)
      %106 = arith.addi %100, %65 : tensor<1x64xi64> loc(#loc88)
      %107 = tt.addptr %8, %106 : tensor<1x64x!tt.ptr<f32>>, tensor<1x64xi64> loc(#loc89)
      %108 = tt.load %107, %25, %cst_8 evictionPolicy = evict_last : tensor<1x64x!tt.ptr<f32>> loc(#loc90)
      %109 = arith.addf %105, %108 : tensor<1x64xf32> loc(#loc91)
      %110 = arith.addi %94, %73 : tensor<1x64xi64> loc(#loc92)
      %111 = tt.addptr %7, %110 : tensor<1x64x!tt.ptr<i64>>, tensor<1x64xi64> loc(#loc93)
      %112 = tt.load %111, %25, %cst evictionPolicy = evict_first : tensor<1x64x!tt.ptr<i64>> loc(#loc94)
      %113 = arith.addi %112, %cst_3 : tensor<1x64xi64> loc(#loc95)
      %114 = arith.cmpi slt, %112, %cst : tensor<1x64xi64> loc(#loc96)
      %115 = arith.select %114, %113, %112 : tensor<1x64xi1>, tensor<1x64xi64> loc(#loc97)
      %116 = arith.cmpi sge, %115, %cst : tensor<1x64xi64> loc(#loc98)
      %117 = arith.cmpi slt, %115, %cst_3 : tensor<1x64xi64> loc(#loc99)
      %118 = arith.andi %116, %117 : tensor<1x64xi1> loc(#loc100)
      %119 = arith.ori %118, %47 : tensor<1x64xi1> loc(#loc101)
      tt.assert %119, "index out of bounds: 0 <= tmp46 < 4" : tensor<1x64xi1> loc(#loc102)
      %120 = arith.addi %115, %65 : tensor<1x64xi64> loc(#loc103)
      %121 = tt.addptr %8, %120 : tensor<1x64x!tt.ptr<f32>>, tensor<1x64xi64> loc(#loc104)
      %122 = tt.load %121, %25, %cst_8 evictionPolicy = evict_last : tensor<1x64x!tt.ptr<f32>> loc(#loc105)
      %123 = arith.addf %105, %122 : tensor<1x64xf32> loc(#loc106)
      %124 = arith.mulf %109, %123 : tensor<1x64xf32> loc(#loc107)
      %125 = arith.cmpf oeq, %124, %cst_2 : tensor<1x64xf32> loc(#loc108)
      %126 = arith.uitofp %125 : tensor<1x64xi1> to tensor<1x64xf32> loc(#loc109)
      %127 = arith.mulf %126, %40 : tensor<1x64xf32> loc(#loc110)
      %128 = arith.mulf %38, %127 : tensor<1x64xf32> loc(#loc111)
      %129 = arith.subf %93, %128 : tensor<1x64xf32> loc(#loc112)
      %130 = math.absf %129 : tensor<1x64xf32> loc(#loc113)
      %131 = arith.cmpf olt, %130, %cst_1 : tensor<1x64xf32> loc(#loc114)
      %132 = arith.mulf %130, %130 : tensor<1x64xf32> loc(#loc115)
      %133 = arith.mulf %132, %cst_0 : tensor<1x64xf32> loc(#loc116)
      %134 = arith.subf %130, %cst_0 : tensor<1x64xf32> loc(#loc117)
      %135 = arith.select %131, %133, %134 : tensor<1x64xi1>, tensor<1x64xf32> loc(#loc118)
      %136 = arith.addf %arg11, %135 : tensor<1x64xf32> loc(#loc119)
      %137 = arith.select %25, %136, %arg11 : tensor<1x64xi1>, tensor<1x64xf32> loc(#loc120)
      %138 = arith.addf %arg12, %92 : tensor<1x64xf32> loc(#loc121)
      %139 = arith.select %25, %138, %arg12 : tensor<1x64xi1>, tensor<1x64xf32> loc(#loc122)
      scf.yield %137, %139 : tensor<1x64xf32>, tensor<1x64xf32> loc(#loc123)
    } loc(#loc11)
    %10 = "tt.reduce"(%9#0) <{axis = 1 : i32}> ({
    ^bb0(%arg10: f32 loc(callsite(#loc1 at #loc125)), %arg11: f32 loc(callsite(#loc1 at #loc125))):
      %23 = arith.addf %arg10, %arg11 : f32 loc(#loc146)
      tt.reduce.return %23 : f32 loc(#loc141)
    }) : (tensor<1x64xf32>) -> tensor<1xf32> loc(#loc141)
    %11 = tt.expand_dims %10 {axis = 1 : i32} : tensor<1xf32> -> tensor<1x1xf32> loc(#loc127)
    %12 = "tt.reduce"(%9#1) <{axis = 1 : i32}> ({
    ^bb0(%arg10: f32 loc(callsite(#loc1 at #loc128)), %arg11: f32 loc(callsite(#loc1 at #loc128))):
      %23 = arith.addf %arg10, %arg11 : f32 loc(#loc147)
      tt.reduce.return %23 : f32 loc(#loc144)
    }) : (tensor<1x64xf32>) -> tensor<1xf32> loc(#loc144)
    %13 = tt.expand_dims %12 {axis = 1 : i32} : tensor<1xf32> -> tensor<1x1xf32> loc(#loc129)
    %14 = tt.addptr %arg1, %c0_i32 : !tt.ptr<f32>, i32 loc(#loc130)
    %15 = tt.load %14 : !tt.ptr<f32> loc(#loc131)
    %16 = tt.addptr %arg8, %c0_i32 : !tt.ptr<f32>, i32 loc(#loc132)
    %17 = tt.load %16 : !tt.ptr<f32> loc(#loc133)
    %18 = arith.divf %15, %17 : f32 loc(#loc134)
    %19 = tt.splat %18 : f32 -> tensor<1x1xf32> loc(#loc134)
    %20 = arith.divf %11, %13 : tensor<1x1xf32> loc(#loc135)
    %21 = arith.addf %19, %20 : tensor<1x1xf32> loc(#loc136)
    gpu.barrier loc(#loc137)
    %22 = tt.splat %14 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>> loc(#loc138)
    tt.store %22, %21 : tensor<1x1x!tt.ptr<f32>> loc(#loc139)
    tt.return loc(#loc140)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":25:25)
#loc3 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":25:33)
#loc4 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":36:34)
#loc5 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":37:35)
#loc6 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":38:39)
#loc7 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":39:35)
#loc8 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":41:35)
#loc9 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":47:34)
#loc10 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":52:35)
#loc11 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":28:36)
#loc12 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":29:27)
#loc13 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":30:25)
#loc14 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":31:23)
#loc15 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":32:25)
#loc16 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":32:30)
#loc17 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":33:23)
#loc18 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":34:23)
#loc19 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":36:39)
#loc20 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":37:40)
#loc21 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":38:44)
#loc22 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":39:40)
#loc23 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":41:40)
#loc24 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":43:22)
#loc25 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":44:22)
#loc26 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":45:36)
#loc27 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":46:32)
#loc28 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":46:48)
#loc29 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":46:41)
#loc30 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":46:56)
#loc31 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":46:54)
#loc32 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":46:64)
#loc33 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":47:41)
#loc34 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":47:39)
#loc35 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":47:51)
#loc36 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":47:48)
#loc37 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":47:56)
#loc38 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":48:22)
#loc39 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":49:22)
#loc40 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":50:36)
#loc41 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":51:32)
#loc42 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":51:48)
#loc43 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":51:41)
#loc44 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":51:54)
#loc45 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":51:64)
#loc46 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":52:44)
#loc47 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":52:42)
#loc48 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":52:49)
#loc49 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":53:42)
#loc50 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":53:35)
#loc51 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":53:49)
#loc52 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":54:24)
#loc53 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":55:40)
#loc54 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":55:49)
#loc55 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":55:35)
#loc56 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":55:57)
#loc57 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":56:24)
#loc58 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":57:24)
#loc59 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":58:39)
#loc60 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":59:32)
#loc61 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":59:50)
#loc62 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":59:42)
#loc63 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":59:56)
#loc64 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":59:66)
#loc65 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":60:43)
#loc66 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":60:35)
#loc67 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":60:50)
#loc68 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":61:24)
#loc69 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":62:24)
#loc70 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":64:25)
#loc71 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":65:25)
#loc72 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":66:24)
#loc73 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":67:24)
#loc74 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":71:66)
#loc75 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":72:45)
#loc76 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":72:63)
#loc77 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":72:35)
#loc78 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":72:81)
#loc79 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":73:24)
#loc80 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":74:24)
#loc81 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":75:39)
#loc82 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":76:32)
#loc83 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":76:50)
#loc84 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":76:42)
#loc85 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":76:56)
#loc86 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":76:66)
#loc87 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":77:58)
#loc88 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":78:43)
#loc89 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":78:35)
#loc90 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":78:58)
#loc91 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":79:24)
#loc92 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":80:63)
#loc93 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":80:35)
#loc94 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":80:74)
#loc95 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":81:24)
#loc96 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":82:24)
#loc97 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":83:39)
#loc98 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":84:32)
#loc99 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":84:50)
#loc100 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":84:42)
#loc101 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":84:56)
#loc102 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":84:66)
#loc103 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":85:43)
#loc104 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":85:35)
#loc105 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":85:58)
#loc106 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":86:24)
#loc107 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":87:24)
#loc108 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":88:25)
#loc109 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":89:25)
#loc110 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":90:24)
#loc111 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":91:24)
#loc112 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":92:24)
#loc113 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":93:28)
#loc114 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":95:24)
#loc115 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":96:24)
#loc116 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":98:24)
#loc117 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":100:24)
#loc118 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":101:39)
#loc119 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":103:25)
#loc120 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":104:40)
#loc121 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":106:25)
#loc122 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":107:40)
#loc123 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":107:8)
#loc124 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc126 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc127 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":108:30)
#loc129 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":109:30)
#loc130 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":110:35)
#loc131 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":110:20)
#loc132 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":112:31)
#loc133 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":112:20)
#loc134 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":114:20)
#loc135 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":115:20)
#loc136 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":116:20)
#loc137 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":117:4)
#loc138 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":118:28)
#loc139 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":118:71)
#loc140 = loc("inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py":118:4)
#loc141 = loc(callsite(#loc124 at #loc125))
#loc143 = loc(callsite(#loc126 at #loc124))
#loc144 = loc(callsite(#loc124 at #loc128))
#loc146 = loc(callsite(#loc143 at #loc125))
#loc147 = loc(callsite(#loc143 at #loc128))
