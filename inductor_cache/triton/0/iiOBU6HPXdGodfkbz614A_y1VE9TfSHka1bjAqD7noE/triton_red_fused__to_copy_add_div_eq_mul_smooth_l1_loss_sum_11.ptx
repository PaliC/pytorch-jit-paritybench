//
// Generated by LLVM NVPTX Back-End
//

.version 8.4
.target sm_90a
.address_size 64

	// .globl	triton_red_fused__to_copy_add_div_eq_mul_smooth_l1_loss_sum_11 // -- Begin function triton_red_fused__to_copy_add_div_eq_mul_smooth_l1_loss_sum_11
.extern .func __assertfail
(
	.param .b64 __assertfail_param_0,
	.param .b64 __assertfail_param_1,
	.param .b32 __assertfail_param_2,
	.param .b64 __assertfail_param_3,
	.param .b64 __assertfail_param_4
)
.noreturn;
.global .align 1 .b8 assertFunc_5[8] = {117, 110, 107, 110, 111, 119, 110};
.global .align 1 .b8 assertFile_5[74] = {105, 110, 100, 117, 99, 116, 111, 114, 95, 99, 97, 99, 104, 101, 47, 55, 99, 47, 99, 55, 99, 101, 121, 100, 54, 102, 108, 52, 119, 50, 110, 108, 102, 116, 99, 121, 111, 105, 113, 101, 50, 113, 110, 107, 105, 105, 121, 100, 99, 51, 109, 119, 115, 109, 104, 102, 113, 119, 100, 53, 55, 111, 107, 114, 98, 107, 113, 117, 50, 101, 46, 112, 121};
.global .align 1 .b8 assertMessage_5[36] = {105, 110, 100, 101, 120, 32, 111, 117, 116, 32, 111, 102, 32, 98, 111, 117, 110, 100, 115, 58, 32, 48, 32, 60, 61, 32, 116, 109, 112, 52, 54, 32, 60, 32, 52};
.global .align 1 .b8 assertFunc_4[8] = {117, 110, 107, 110, 111, 119, 110};
.global .align 1 .b8 assertFile_4[74] = {105, 110, 100, 117, 99, 116, 111, 114, 95, 99, 97, 99, 104, 101, 47, 55, 99, 47, 99, 55, 99, 101, 121, 100, 54, 102, 108, 52, 119, 50, 110, 108, 102, 116, 99, 121, 111, 105, 113, 101, 50, 113, 110, 107, 105, 105, 121, 100, 99, 51, 109, 119, 115, 109, 104, 102, 113, 119, 100, 53, 55, 111, 107, 114, 98, 107, 113, 117, 50, 101, 46, 112, 121};
.global .align 1 .b8 assertMessage_4[36] = {105, 110, 100, 101, 120, 32, 111, 117, 116, 32, 111, 102, 32, 98, 111, 117, 110, 100, 115, 58, 32, 48, 32, 60, 61, 32, 116, 109, 112, 51, 56, 32, 60, 32, 52};
.global .align 1 .b8 assertFunc_2[8] = {117, 110, 107, 110, 111, 119, 110};
.global .align 1 .b8 assertFile_2[74] = {105, 110, 100, 117, 99, 116, 111, 114, 95, 99, 97, 99, 104, 101, 47, 55, 99, 47, 99, 55, 99, 101, 121, 100, 54, 102, 108, 52, 119, 50, 110, 108, 102, 116, 99, 121, 111, 105, 113, 101, 50, 113, 110, 107, 105, 105, 121, 100, 99, 51, 109, 119, 115, 109, 104, 102, 113, 119, 100, 53, 55, 111, 107, 114, 98, 107, 113, 117, 50, 101, 46, 112, 121};
.global .align 1 .b8 assertMessage_2[36] = {105, 110, 100, 101, 120, 32, 111, 117, 116, 32, 111, 102, 32, 98, 111, 117, 110, 100, 115, 58, 32, 48, 32, 60, 61, 32, 116, 109, 112, 49, 55, 32, 60, 32, 52};
.global .align 1 .b8 assertFunc_1[8] = {117, 110, 107, 110, 111, 119, 110};
.global .align 1 .b8 assertFile_1[74] = {105, 110, 100, 117, 99, 116, 111, 114, 95, 99, 97, 99, 104, 101, 47, 55, 99, 47, 99, 55, 99, 101, 121, 100, 54, 102, 108, 52, 119, 50, 110, 108, 102, 116, 99, 121, 111, 105, 113, 101, 50, 113, 110, 107, 105, 105, 121, 100, 99, 51, 109, 119, 115, 109, 104, 102, 113, 119, 100, 53, 55, 111, 107, 114, 98, 107, 113, 117, 50, 101, 46, 112, 121};
.global .align 1 .b8 assertMessage_1[35] = {105, 110, 100, 101, 120, 32, 111, 117, 116, 32, 111, 102, 32, 98, 111, 117, 110, 100, 115, 58, 32, 48, 32, 60, 61, 32, 116, 109, 112, 57, 32, 60, 32, 52};
.global .align 1 .b8 assertFunc_0[8] = {117, 110, 107, 110, 111, 119, 110};
.global .align 1 .b8 assertFile_0[74] = {105, 110, 100, 117, 99, 116, 111, 114, 95, 99, 97, 99, 104, 101, 47, 55, 99, 47, 99, 55, 99, 101, 121, 100, 54, 102, 108, 52, 119, 50, 110, 108, 102, 116, 99, 121, 111, 105, 113, 101, 50, 113, 110, 107, 105, 105, 121, 100, 99, 51, 109, 119, 115, 109, 104, 102, 113, 119, 100, 53, 55, 111, 107, 114, 98, 107, 113, 117, 50, 101, 46, 112, 121};
.global .align 1 .b8 assertMessage_0[35] = {105, 110, 100, 101, 120, 32, 111, 117, 116, 32, 111, 102, 32, 98, 111, 117, 110, 100, 115, 58, 32, 48, 32, 60, 61, 32, 116, 109, 112, 52, 32, 60, 32, 52};
.extern .shared .align 16 .b8 global_smem[];
                                        // @triton_red_fused__to_copy_add_div_eq_mul_smooth_l1_loss_sum_11
.visible .entry triton_red_fused__to_copy_add_div_eq_mul_smooth_l1_loss_sum_11(
	.param .u64 .ptr .global .align 1 triton_red_fused__to_copy_add_div_eq_mul_smooth_l1_loss_sum_11_param_0,
	.param .u64 .ptr .global .align 1 triton_red_fused__to_copy_add_div_eq_mul_smooth_l1_loss_sum_11_param_1,
	.param .u64 .ptr .global .align 1 triton_red_fused__to_copy_add_div_eq_mul_smooth_l1_loss_sum_11_param_2,
	.param .u64 .ptr .global .align 1 triton_red_fused__to_copy_add_div_eq_mul_smooth_l1_loss_sum_11_param_3,
	.param .u64 .ptr .global .align 1 triton_red_fused__to_copy_add_div_eq_mul_smooth_l1_loss_sum_11_param_4,
	.param .u64 .ptr .global .align 1 triton_red_fused__to_copy_add_div_eq_mul_smooth_l1_loss_sum_11_param_5,
	.param .u64 .ptr .global .align 1 triton_red_fused__to_copy_add_div_eq_mul_smooth_l1_loss_sum_11_param_6,
	.param .u64 .ptr .global .align 1 triton_red_fused__to_copy_add_div_eq_mul_smooth_l1_loss_sum_11_param_7,
	.param .u64 .ptr .global .align 1 triton_red_fused__to_copy_add_div_eq_mul_smooth_l1_loss_sum_11_param_8,
	.param .u32 triton_red_fused__to_copy_add_div_eq_mul_smooth_l1_loss_sum_11_param_9
)
.reqntid 64, 1, 1
{
	.reg .pred 	%p<51>;
	.reg .b32 	%r<79>;
	.reg .f32 	%f<65>;
	.reg .b64 	%rd<135>;
	.loc	1 19 0                          // c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py:19:0
$L__func_begin0:
	.loc	1 19 0                          // c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py:19:0

// %bb.0:
	ld.param.u64 	%rd38, [triton_red_fused__to_copy_add_div_eq_mul_smooth_l1_loss_sum_11_param_8];
	ld.param.u64 	%rd37, [triton_red_fused__to_copy_add_div_eq_mul_smooth_l1_loss_sum_11_param_4];
	ld.param.u64 	%rd36, [triton_red_fused__to_copy_add_div_eq_mul_smooth_l1_loss_sum_11_param_3];
	ld.param.u64 	%rd35, [triton_red_fused__to_copy_add_div_eq_mul_smooth_l1_loss_sum_11_param_1];
	ld.param.u64 	%rd41, [triton_red_fused__to_copy_add_div_eq_mul_smooth_l1_loss_sum_11_param_0];
$L__tmp0:
	.loc	1 25 33                         // c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py:25:33
	mov.u32 	%r1, %tid.x;
	and.b32  	%r2, %r1, 63;
	ld.param.u64 	%rd42, [triton_red_fused__to_copy_add_div_eq_mul_smooth_l1_loss_sum_11_param_2];
	and.b32  	%r7, %r1, 3;
	bfe.u32 	%r8, %r1, 2, 2;
	ld.param.u64 	%rd43, [triton_red_fused__to_copy_add_div_eq_mul_smooth_l1_loss_sum_11_param_5];
	cvt.u64.u32 	%rd14, %r8;
	ld.param.u64 	%rd44, [triton_red_fused__to_copy_add_div_eq_mul_smooth_l1_loss_sum_11_param_6];
	cvt.u64.u32 	%rd15, %r7;
	ld.param.u64 	%rd45, [triton_red_fused__to_copy_add_div_eq_mul_smooth_l1_loss_sum_11_param_7];
	.loc	1 28 36                         // c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py:28:36
	shr.u32 	%r9, %r1, 1;
	mul.wide.u32 	%rd46, %r2, 4;
	add.s64 	%rd12, %rd45, %rd46;
	add.s64 	%rd11, %rd44, %rd46;
	add.s64 	%rd10, %rd41, %rd46;
	add.s64 	%rd9, %rd43, %rd46;
	cvt.u64.u32 	%rd47, %r9;
	and.b64  	%rd48, %rd47, 24;
	add.s64 	%rd8, %rd42, %rd48;
	mov.f32 	%f1, 0f00000000;
	mov.u64 	%rd16, -64;
	mov.u64 	%rd13, 0;
	mov.pred 	%p1, -1;
	mov.b32 	%r11, 0;
	mov.f32 	%f2, %f1;
$L__BB0_1:                              // =>This Inner Loop Header: Depth=1
	.loc	1 36 39                         // c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py:36:39
	// begin inline asm
	mov.u64 %rd49, 0x0;
	@%p1 ld.global.L1::evict_last.b64 { %rd49 }, [ %rd8 + 0 ];
	@!%p1 mov.u64 %rd49, 0x0;
	// end inline asm
	.loc	1 37 40                         // c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py:37:40
	// begin inline asm
	mov.u32 %r10, 0x0;
	@%p1 ld.global.L1::evict_first.b32 { %r10 }, [ %rd9 + 0 ];
	@!%p1 mov.u32 %r10, %r11;
	// end inline asm
	.loc	1 38 44                         // c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py:38:44
	// begin inline asm
	mov.u32 %r12, 0x0;
	@%p1 ld.global.L1::evict_first.b32 { %r12 }, [ %rd10 + 0 ];
	@!%p1 mov.u32 %r12, %r11;
	// end inline asm
	.loc	1 39 40                         // c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py:39:40
	// begin inline asm
	mov.u32 %r14, 0x0;
	@%p1 ld.global.L1::evict_first.b32 { %r14 }, [ %rd11 + 0 ];
	@!%p1 mov.u32 %r14, %r11;
	// end inline asm
	.loc	1 41 40                         // c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py:41:40
	// begin inline asm
	mov.u32 %r16, 0x0;
	@%p1 ld.global.L1::evict_first.b32 { %r16 }, [ %rd12 + 0 ];
	@!%p1 mov.u32 %r16, %r11;
	// end inline asm
	.loc	1 45 36                         // c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py:45:36
	shr.u64 	%rd55, %rd49, 61;
	and.b64  	%rd56, %rd55, 4;
	add.s64 	%rd17, %rd56, %rd49;
	.loc	1 46 41                         // c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py:46:41
	setp.lt.u64 	%p11, %rd17, 4;
	.loc	1 46 64                         // c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py:46:64
	@%p11 bra 	$L__BB0_3;
	bra.uni 	$L__BB0_2;
$L__BB0_3:                              //   in Loop: Header=BB0_1 Depth=1
	bar.sync 	0;
	.loc	1 47 41                         // c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py:47:41
	shl.b64 	%rd18, %rd17, 2;
	.loc	1 47 34                         // c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py:47:34
	add.s64 	%rd59, %rd14, %rd18;
	shl.b64 	%rd60, %rd59, 3;
	add.s64 	%rd58, %rd36, %rd60;
	.loc	1 47 56                         // c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py:47:56
	// begin inline asm
	mov.u64 %rd57, 0x0;
	@%p1 ld.global.L1::evict_last.b64 { %rd57 }, [ %rd58 + 0 ];
	@!%p1 mov.u64 %rd57, 0x0;
	// end inline asm
	.loc	1 50 36                         // c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py:50:36
	shr.u64 	%rd61, %rd57, 61;
	and.b64  	%rd62, %rd61, 4;
	add.s64 	%rd20, %rd62, %rd57;
	.loc	1 51 41                         // c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py:51:41
	setp.lt.u64 	%p14, %rd20, 4;
	.loc	1 51 64                         // c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py:51:64
	@%p14 bra 	$L__BB0_5;
	bra.uni 	$L__BB0_4;
$L__BB0_5:                              //   in Loop: Header=BB0_1 Depth=1
	bar.sync 	0;
	.loc	1 52 35                         // c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py:52:35
	add.s64 	%rd67, %rd13, %rd17;
	shl.b64 	%rd68, %rd67, 2;
	add.s64 	%rd63, %rd37, %rd68;
	.loc	1 52 49                         // c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py:52:49
	// begin inline asm
	mov.u32 %r18, 0x0;
	@%p1 ld.global.L1::evict_last.b32 { %r18 }, [ %rd63 + 0 ];
	@!%p1 mov.u32 %r18, %r11;
	// end inline asm
	.loc	1 53 35                         // c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py:53:35
	add.s64 	%rd69, %rd13, %rd20;
	shl.b64 	%rd70, %rd69, 2;
	add.s64 	%rd64, %rd37, %rd70;
	.loc	1 53 49                         // c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py:53:49
	// begin inline asm
	mov.u32 %r20, 0x0;
	@%p1 ld.global.L1::evict_last.b32 { %r20 }, [ %rd64 + 0 ];
	@!%p1 mov.u32 %r20, %r11;
	// end inline asm
	.loc	1 55 35                         // c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py:55:35
	add.s64 	%rd71, %rd15, %rd18;
	shl.b64 	%rd72, %rd71, 3;
	add.s64 	%rd66, %rd36, %rd72;
	.loc	1 55 57                         // c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py:55:57
	// begin inline asm
	mov.u64 %rd65, 0x0;
	@%p1 ld.global.L1::evict_last.b64 { %rd65 }, [ %rd66 + 0 ];
	@!%p1 mov.u64 %rd65, 0x0;
	// end inline asm
	.loc	1 58 39                         // c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py:58:39
	shr.u64 	%rd73, %rd65, 61;
	and.b64  	%rd74, %rd73, 4;
	add.s64 	%rd23, %rd74, %rd65;
	.loc	1 59 42                         // c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py:59:42
	setp.lt.u64 	%p21, %rd23, 4;
	.loc	1 59 66                         // c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py:59:66
	@%p21 bra 	$L__BB0_7;
	bra.uni 	$L__BB0_6;
$L__BB0_7:                              //   in Loop: Header=BB0_1 Depth=1
	bar.sync 	0;
	.loc	1 60 35                         // c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py:60:35
	add.s64 	%rd78, %rd13, %rd23;
	shl.b64 	%rd79, %rd78, 2;
	add.s64 	%rd75, %rd37, %rd79;
	.loc	1 60 50                         // c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py:60:50
	// begin inline asm
	mov.u32 %r22, 0x0;
	@%p1 ld.global.L1::evict_last.b32 { %r22 }, [ %rd75 + 0 ];
	@!%p1 mov.u32 %r22, %r11;
	// end inline asm
	.loc	1 71 66                         // c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py:71:66
	bar.sync 	0;
	.loc	1 72 81                         // c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py:72:81
	// begin inline asm
	mov.u64 %rd76, 0x0;
	@%p1 ld.global.L1::evict_last.b64 { %rd76 }, [ %rd58 + 0 ];
	@!%p1 mov.u64 %rd76, 0x0;
	// end inline asm
	.loc	1 75 39                         // c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py:75:39
	shr.u64 	%rd80, %rd76, 61;
	and.b64  	%rd81, %rd80, 4;
	add.s64 	%rd24, %rd81, %rd76;
	.loc	1 76 42                         // c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py:76:42
	setp.lt.u64 	%p27, %rd24, 4;
	.loc	1 76 66                         // c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py:76:66
	@%p27 bra 	$L__BB0_9;
	bra.uni 	$L__BB0_8;
$L__BB0_9:                              //   in Loop: Header=BB0_1 Depth=1
	bar.sync 	0;
	.loc	1 77 58                         // c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py:77:58
	// begin inline asm
	mov.u32 %r24, 0x0;
	@%p1 ld.global.L1::evict_last.b32 { %r24 }, [ %rd63 + 0 ];
	@!%p1 mov.u32 %r24, %r11;
	// end inline asm
	.loc	1 78 35                         // c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py:78:35
	add.s64 	%rd86, %rd13, %rd24;
	shl.b64 	%rd87, %rd86, 2;
	add.s64 	%rd83, %rd37, %rd87;
	.loc	1 78 58                         // c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py:78:58
	// begin inline asm
	mov.u32 %r26, 0x0;
	@%p1 ld.global.L1::evict_last.b32 { %r26 }, [ %rd83 + 0 ];
	@!%p1 mov.u32 %r26, %r11;
	// end inline asm
	.loc	1 80 74                         // c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py:80:74
	// begin inline asm
	mov.u64 %rd84, 0x0;
	@%p1 ld.global.L1::evict_first.b64 { %rd84 }, [ %rd66 + 0 ];
	@!%p1 mov.u64 %rd84, 0x0;
	// end inline asm
	.loc	1 83 39                         // c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py:83:39
	shr.u64 	%rd88, %rd84, 61;
	and.b64  	%rd89, %rd88, 4;
	add.s64 	%rd25, %rd89, %rd84;
	.loc	1 84 42                         // c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py:84:42
	setp.lt.u64 	%p34, %rd25, 4;
	.loc	1 84 66                         // c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py:84:66
	@%p34 bra 	$L__BB0_11;
	bra.uni 	$L__BB0_10;
$L__BB0_11:                             //   in Loop: Header=BB0_1 Depth=1
	.loc	1 0 0                           // c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py:0:0
	mov.b32 	%f3, %r10;
	mov.b32 	%f4, %r12;
	mov.b32 	%f5, %r14;
	mov.b32 	%f6, %r16;
	mov.b32 	%f12, %r18;
	mov.b32 	%f13, %r20;
	add.f32 	%f14, %f12, %f13;
	mov.b32 	%f15, %r22;
	add.f32 	%f16, %f12, %f15;
	mul.f32 	%f17, %f14, %f16;
	setp.eq.f32 	%p26, %f17, 0f40800000;
	selp.f32 	%f18, 0f3F800000, 0f00000000, %p26;
	mul.f32 	%f7, %f3, %f18;
	mul.f32 	%f8, %f7, %f4;
	.loc	1 77 58                         // c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py:77:58
	mov.b32 	%f19, %r24;
	.loc	1 78 58                         // c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py:78:58
	mov.b32 	%f20, %r26;
	.loc	1 79 24                         // c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py:79:24
	add.f32 	%f21, %f19, %f20;
	.loc	1 84 66                         // c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py:84:66
	bar.sync 	0;
	.loc	1 85 35                         // c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py:85:35
	add.s64 	%rd91, %rd13, %rd25;
	shl.b64 	%rd92, %rd91, 2;
	add.s64 	%rd90, %rd37, %rd92;
	.loc	1 85 58                         // c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py:85:58
	// begin inline asm
	mov.u32 %r28, 0x0;
	@%p1 ld.global.L1::evict_last.b32 { %r28 }, [ %rd90 + 0 ];
	@!%p1 mov.u32 %r28, %r11;
	// end inline asm
	mov.b32 	%f22, %r28;
	.loc	1 86 24                         // c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py:86:24
	add.f32 	%f23, %f19, %f22;
	.loc	1 87 24                         // c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py:87:24
	mul.f32 	%f24, %f21, %f23;
	.loc	1 88 25                         // c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py:88:25
	setp.eq.f32 	%p37, %f24, 0f40800000;
	.loc	1 89 25                         // c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py:89:25
	selp.f32 	%f25, 0f3F800000, 0f00000000, %p37;
	.loc	1 90 24                         // c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py:90:24
	mul.f32 	%f26, %f6, %f25;
	.loc	1 92 24                         // c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py:92:24
	neg.f32 	%f27, %f26;
	fma.rn.f32 	%f28, %f27, %f5, %f8;
	.loc	1 93 28                         // c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py:93:28
	abs.f32 	%f29, %f28;
	.loc	1 95 24                         // c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py:95:24
	setp.lt.f32 	%p38, %f29, 0f3F800000;
	.loc	1 96 24                         // c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py:96:24
	mul.f32 	%f30, %f28, %f28;
	.loc	1 98 24                         // c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py:98:24
	mul.f32 	%f31, %f30, 0f3F000000;
	.loc	1 100 24                        // c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py:100:24
	add.f32 	%f32, %f29, 0fBF000000;
	.loc	1 101 39                        // c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py:101:39
	selp.f32 	%f33, %f31, %f32, %p38;
	.loc	1 103 25                        // c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py:103:25
	add.f32 	%f2, %f2, %f33;
	.loc	1 106 25                        // c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py:106:25
	add.f32 	%f1, %f1, %f7;
	.loc	1 28 36                         // c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py:28:36
	add.s64 	%rd16, %rd16, 64;
	add.s64 	%rd15, %rd15, 16;
	add.s64 	%rd14, %rd14, 16;
	add.s64 	%rd13, %rd13, 4;
	add.s64 	%rd12, %rd12, 256;
	add.s64 	%rd11, %rd11, 256;
	add.s64 	%rd10, %rd10, 256;
	add.s64 	%rd9, %rd9, 256;
	add.s64 	%rd8, %rd8, 32;
	setp.lt.u64 	%p39, %rd16, 192;
	@%p39 bra 	$L__BB0_1;
// %bb.12:
	.loc	1 25 33                         // c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py:25:33
	and.b32  	%r51, %r1, 31;
$L__tmp1:
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r52, %f2;
	shfl.sync.bfly.b32	%r53, %r52, 16, 31, -1;
	mov.b32 	%f34, %r53;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f35, %f2, %f34;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r54, %f35;
	shfl.sync.bfly.b32	%r55, %r54, 8, 31, -1;
	mov.b32 	%f36, %r55;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f37, %f35, %f36;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r56, %f37;
	shfl.sync.bfly.b32	%r57, %r56, 4, 31, -1;
	mov.b32 	%f38, %r57;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f39, %f37, %f38;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r58, %f39;
	shfl.sync.bfly.b32	%r59, %r58, 2, 31, -1;
	mov.b32 	%f40, %r59;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f41, %f39, %f40;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r60, %f41;
	shfl.sync.bfly.b32	%r61, %r60, 1, 31, -1;
	mov.b32 	%f42, %r61;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f43, %f41, %f42;
	.loc	2 267 36                        // standard.py:267:36
	setp.eq.s32 	%p40, %r51, 0;
	shr.u32 	%r62, %r1, 3;
	and.b32  	%r63, %r62, 4;
	mov.u32 	%r64, global_smem;
	add.s32 	%r30, %r64, %r63;
	mov.b32 	%r31, %f43;
	// begin inline asm
	@%p40 st.shared.b32 [ %r30 + 0 ], %r31;
	// end inline asm
	bar.sync 	0;
	setp.lt.s32 	%p41, %r1, 2;
	shl.b32 	%r65, %r1, 2;
	add.s32 	%r33, %r64, %r65;
	// begin inline asm
	@%p41 ld.shared.b32 %r32, [ %r33 + 0 ];
	// end inline asm
	mov.b32 	%f44, %r32;
	shfl.sync.bfly.b32	%r66, %r32, 1, 31, -1;
	mov.b32 	%f45, %r66;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f46, %f44, %f45;
	.loc	2 267 36                        // standard.py:267:36
	and.b32  	%r67, %r1, 1;
	setp.eq.b32 	%p49, %r67, 1;
	not.pred 	%p50, %p49;
	and.pred  	%p42, %p41, %p50;
	mov.b32 	%r35, %f46;
	// begin inline asm
	@%p42 st.shared.b32 [ %r33 + 0 ], %r35;
	// end inline asm
	bar.sync 	0;
$L__tmp2:
	.loc	1 115 20                        // c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py:115:20
	ld.shared.u32 	%r48, [global_smem];
$L__tmp3:
	.loc	2 267 36                        // standard.py:267:36
	bar.sync 	0;
	mov.b32 	%r68, %f1;
	shfl.sync.bfly.b32	%r69, %r68, 16, 31, -1;
	mov.b32 	%f47, %r69;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f48, %f1, %f47;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r70, %f48;
	shfl.sync.bfly.b32	%r71, %r70, 8, 31, -1;
	mov.b32 	%f49, %r71;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f50, %f48, %f49;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r72, %f50;
	shfl.sync.bfly.b32	%r73, %r72, 4, 31, -1;
	mov.b32 	%f51, %r73;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f52, %f50, %f51;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r74, %f52;
	shfl.sync.bfly.b32	%r75, %r74, 2, 31, -1;
	mov.b32 	%f53, %r75;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f54, %f52, %f53;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r76, %f54;
	shfl.sync.bfly.b32	%r77, %r76, 1, 31, -1;
	mov.b32 	%f55, %r77;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f56, %f54, %f55;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r37, %f56;
	// begin inline asm
	@%p40 st.shared.b32 [ %r30 + 0 ], %r37;
	// end inline asm
	bar.sync 	0;
	// begin inline asm
	@%p41 ld.shared.b32 %r38, [ %r33 + 0 ];
	// end inline asm
	mov.b32 	%f57, %r38;
	shfl.sync.bfly.b32	%r78, %r38, 1, 31, -1;
	mov.b32 	%f58, %r78;
	.loc	2 256 15                        // standard.py:256:15
	add.f32 	%f59, %f57, %f58;
	.loc	2 267 36                        // standard.py:267:36
	mov.b32 	%r41, %f59;
	// begin inline asm
	@%p42 st.shared.b32 [ %r33 + 0 ], %r41;
	// end inline asm
	bar.sync 	0;
$L__tmp4:
	.loc	1 115 20                        // c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py:115:20
	ld.shared.u32 	%r49, [global_smem];
	.loc	1 110 20                        // c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py:110:20
	// begin inline asm
	mov.u32 %r45, 0x0;
	@%p1 ld.global.b32 { %r45 }, [ %rd35 + 0 ];
	// end inline asm
	.loc	1 112 20                        // c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py:112:20
	// begin inline asm
	mov.u32 %r46, 0x0;
	@%p1 ld.global.b32 { %r46 }, [ %rd38 + 0 ];
	// end inline asm
	.loc	1 114 20                        // c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py:114:20
	// begin inline asm
	div.full.f32 %r44, %r45, %r46;
	// end inline asm
	mov.b32 	%f60, %r44;
	.loc	1 115 20                        // c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py:115:20
	// begin inline asm
	div.full.f32 %r47, %r48, %r49;
	// end inline asm
	mov.b32 	%f61, %r47;
	.loc	1 116 20                        // c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py:116:20
	add.f32 	%f62, %f60, %f61;
	.loc	1 117 4                         // c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py:117:4
	bar.sync 	0;
	.loc	1 118 71                        // c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py:118:71
	setp.eq.s32 	%p48, %r2, 0;
	mov.b32 	%r50, %f62;
	// begin inline asm
	@%p48 st.global.b32 [ %rd35 + 0 ], { %r50 };
	// end inline asm
	.loc	1 118 4                         // c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py:118:4
	ret;
$L__BB0_10:
	.loc	1 84 66                         // c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py:84:66
	mov.u64 	%rd96, assertMessage_5;
	cvta.global.u64 	%rd97, %rd96;
	mov.u64 	%rd98, assertFile_5;
	cvta.global.u64 	%rd99, %rd98;
	mov.u64 	%rd100, assertFunc_5;
	cvta.global.u64 	%rd101, %rd100;
	{ // callseq 5, 0
	.param .b64 param0;
	st.param.b64 	[param0], %rd97;
	.param .b64 param1;
	st.param.b64 	[param1], %rd99;
	.param .b32 param2;
	st.param.b32 	[param2], 84;
	.param .b64 param3;
	st.param.b64 	[param3], %rd101;
	.param .b64 param4;
	st.param.b64 	[param4], 1;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	} // callseq 5
	trap;
$L__BB0_6:
	.loc	1 59 66                         // c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py:59:66
	mov.u64 	%rd108, assertMessage_2;
	cvta.global.u64 	%rd109, %rd108;
	mov.u64 	%rd110, assertFile_2;
	cvta.global.u64 	%rd111, %rd110;
	mov.u64 	%rd112, assertFunc_2;
	cvta.global.u64 	%rd113, %rd112;
	{ // callseq 7, 0
	.param .b64 param0;
	st.param.b64 	[param0], %rd109;
	.param .b64 param1;
	st.param.b64 	[param1], %rd111;
	.param .b32 param2;
	st.param.b32 	[param2], 59;
	.param .b64 param3;
	st.param.b64 	[param3], %rd113;
	.param .b64 param4;
	st.param.b64 	[param4], 1;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	} // callseq 7
	trap;
$L__BB0_8:
	.loc	1 76 66                         // c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py:76:66
	mov.u64 	%rd102, assertMessage_4;
	cvta.global.u64 	%rd103, %rd102;
	mov.u64 	%rd104, assertFile_4;
	cvta.global.u64 	%rd105, %rd104;
	mov.u64 	%rd106, assertFunc_4;
	cvta.global.u64 	%rd107, %rd106;
	{ // callseq 6, 0
	.param .b64 param0;
	st.param.b64 	[param0], %rd103;
	.param .b64 param1;
	st.param.b64 	[param1], %rd105;
	.param .b32 param2;
	st.param.b32 	[param2], 76;
	.param .b64 param3;
	st.param.b64 	[param3], %rd107;
	.param .b64 param4;
	st.param.b64 	[param4], 1;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	} // callseq 6
	trap;
$L__BB0_2:
	.loc	1 46 64                         // c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py:46:64
	mov.u64 	%rd120, assertMessage_0;
	cvta.global.u64 	%rd121, %rd120;
	mov.u64 	%rd122, assertFile_0;
	cvta.global.u64 	%rd123, %rd122;
	mov.u64 	%rd124, assertFunc_0;
	cvta.global.u64 	%rd125, %rd124;
	{ // callseq 9, 0
	.param .b64 param0;
	st.param.b64 	[param0], %rd121;
	.param .b64 param1;
	st.param.b64 	[param1], %rd123;
	.param .b32 param2;
	st.param.b32 	[param2], 46;
	.param .b64 param3;
	st.param.b64 	[param3], %rd125;
	.param .b64 param4;
	st.param.b64 	[param4], 1;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	} // callseq 9
	trap;
$L__BB0_4:
	.loc	1 51 64                         // c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py:51:64
	mov.u64 	%rd114, assertMessage_1;
	cvta.global.u64 	%rd115, %rd114;
	mov.u64 	%rd116, assertFile_1;
	cvta.global.u64 	%rd117, %rd116;
	mov.u64 	%rd118, assertFunc_1;
	cvta.global.u64 	%rd119, %rd118;
	{ // callseq 8, 0
	.param .b64 param0;
	st.param.b64 	[param0], %rd115;
	.param .b64 param1;
	st.param.b64 	[param1], %rd117;
	.param .b32 param2;
	st.param.b32 	[param2], 51;
	.param .b64 param3;
	st.param.b64 	[param3], %rd119;
	.param .b64 param4;
	st.param.b64 	[param4], 1;
	call.uni 
	__assertfail, 
	(
	param0, 
	param1, 
	param2, 
	param3, 
	param4
	);
	} // callseq 8
	trap;
$L__tmp5:
$L__func_end0:
                                        // -- End function
}
	.file	1 "inductor_cache/7c/c7ceyd6fl4w2nlftcyoiqe2qnkiiydc3mwsmhfqwd57okrbkqu2e.py"
	.file	2 "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py"
	.section	.debug_abbrev
	{
.b8 1                                   // Abbreviation Code
.b8 17                                  // DW_TAG_compile_unit
.b8 1                                   // DW_CHILDREN_yes
.b8 37                                  // DW_AT_producer
.b8 8                                   // DW_FORM_string
.b8 19                                  // DW_AT_language
.b8 5                                   // DW_FORM_data2
.b8 3                                   // DW_AT_name
.b8 8                                   // DW_FORM_string
.b8 16                                  // DW_AT_stmt_list
.b8 6                                   // DW_FORM_data4
.b8 27                                  // DW_AT_comp_dir
.b8 8                                   // DW_FORM_string
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 2                                   // Abbreviation Code
.b8 46                                  // DW_TAG_subprogram
.b8 0                                   // DW_CHILDREN_no
.b8 3                                   // DW_AT_name
.b8 8                                   // DW_FORM_string
.b8 32                                  // DW_AT_inline
.b8 11                                  // DW_FORM_data1
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 3                                   // Abbreviation Code
.b8 46                                  // DW_TAG_subprogram
.b8 1                                   // DW_CHILDREN_yes
.b8 17                                  // DW_AT_low_pc
.b8 1                                   // DW_FORM_addr
.b8 18                                  // DW_AT_high_pc
.b8 1                                   // DW_FORM_addr
.b8 49                                  // DW_AT_abstract_origin
.b8 19                                  // DW_FORM_ref4
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 4                                   // Abbreviation Code
.b8 29                                  // DW_TAG_inlined_subroutine
.b8 0                                   // DW_CHILDREN_no
.b8 49                                  // DW_AT_abstract_origin
.b8 19                                  // DW_FORM_ref4
.b8 17                                  // DW_AT_low_pc
.b8 1                                   // DW_FORM_addr
.b8 18                                  // DW_AT_high_pc
.b8 1                                   // DW_FORM_addr
.b8 88                                  // DW_AT_call_file
.b8 11                                  // DW_FORM_data1
.b8 89                                  // DW_AT_call_line
.b8 11                                  // DW_FORM_data1
.b8 87                                  // DW_AT_call_column
.b8 11                                  // DW_FORM_data1
.b8 0                                   // EOM(1)
.b8 0                                   // EOM(2)
.b8 0                                   // EOM(3)
	}
	.section	.debug_info
	{
.b32 231                                // Length of Unit
.b8 2                                   // DWARF version number
.b8 0
.b32 .debug_abbrev                      // Offset Into Abbrev. Section
.b8 8                                   // Address Size (in bytes)
.b8 1                                   // Abbrev [1] 0xb:0xe0 DW_TAG_compile_unit
.b8 116                                 // DW_AT_producer
.b8 114
.b8 105
.b8 116
.b8 111
.b8 110
.b8 0
.b8 2                                   // DW_AT_language
.b8 0
.b8 99                                  // DW_AT_name
.b8 55
.b8 99
.b8 101
.b8 121
.b8 100
.b8 54
.b8 102
.b8 108
.b8 52
.b8 119
.b8 50
.b8 110
.b8 108
.b8 102
.b8 116
.b8 99
.b8 121
.b8 111
.b8 105
.b8 113
.b8 101
.b8 50
.b8 113
.b8 110
.b8 107
.b8 105
.b8 105
.b8 121
.b8 100
.b8 99
.b8 51
.b8 109
.b8 119
.b8 115
.b8 109
.b8 104
.b8 102
.b8 113
.b8 119
.b8 100
.b8 53
.b8 55
.b8 111
.b8 107
.b8 114
.b8 98
.b8 107
.b8 113
.b8 117
.b8 50
.b8 101
.b8 46
.b8 112
.b8 121
.b8 0
.b32 .debug_line                        // DW_AT_stmt_list
.b8 105                                 // DW_AT_comp_dir
.b8 110
.b8 100
.b8 117
.b8 99
.b8 116
.b8 111
.b8 114
.b8 95
.b8 99
.b8 97
.b8 99
.b8 104
.b8 101
.b8 47
.b8 55
.b8 99
.b8 0
.b8 2                                   // Abbrev [2] 0x63:0x41 DW_TAG_subprogram
.b8 116                                 // DW_AT_name
.b8 114
.b8 105
.b8 116
.b8 111
.b8 110
.b8 95
.b8 114
.b8 101
.b8 100
.b8 95
.b8 102
.b8 117
.b8 115
.b8 101
.b8 100
.b8 95
.b8 95
.b8 116
.b8 111
.b8 95
.b8 99
.b8 111
.b8 112
.b8 121
.b8 95
.b8 97
.b8 100
.b8 100
.b8 95
.b8 100
.b8 105
.b8 118
.b8 95
.b8 101
.b8 113
.b8 95
.b8 109
.b8 117
.b8 108
.b8 95
.b8 115
.b8 109
.b8 111
.b8 111
.b8 116
.b8 104
.b8 95
.b8 108
.b8 49
.b8 95
.b8 108
.b8 111
.b8 115
.b8 115
.b8 95
.b8 115
.b8 117
.b8 109
.b8 95
.b8 49
.b8 49
.b8 0
.b8 1                                   // DW_AT_inline
.b8 3                                   // Abbrev [3] 0xa4:0x46 DW_TAG_subprogram
.b64 $L__func_begin0                    // DW_AT_low_pc
.b64 $L__func_end0                      // DW_AT_high_pc
.b32 99                                 // DW_AT_abstract_origin
.b8 4                                   // Abbrev [4] 0xb9:0x18 DW_TAG_inlined_subroutine
.b32 99                                 // DW_AT_abstract_origin
.b64 $L__tmp1                           // DW_AT_low_pc
.b64 $L__tmp2                           // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 108                                 // DW_AT_call_line
.b8 27                                  // DW_AT_call_column
.b8 4                                   // Abbrev [4] 0xd1:0x18 DW_TAG_inlined_subroutine
.b32 99                                 // DW_AT_abstract_origin
.b64 $L__tmp3                           // DW_AT_low_pc
.b64 $L__tmp4                           // DW_AT_high_pc
.b8 1                                   // DW_AT_call_file
.b8 109                                 // DW_AT_call_line
.b8 27                                  // DW_AT_call_column
.b8 0                                   // End Of Children Mark
.b8 0                                   // End Of Children Mark
	}
	.section	.debug_macinfo	{	}
