; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %11 = shl i32 %10, 10, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = shl i32 %12, 3, !dbg !12
  %14 = and i32 %13, 1016, !dbg !12
  %15 = or disjoint i32 %14, 4, !dbg !12
  %16 = or disjoint i32 %11, %14, !dbg !13
  %17 = or disjoint i32 %11, %15, !dbg !13
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %.frozen = freeze i32 %16, !dbg !15
  %19 = sdiv i32 %.frozen, 256, !dbg !15
  %20 = mul i32 %19, 256, !dbg !16
  %.decomposed = sub i32 %.frozen, %20, !dbg !16
  %21 = srem i32 %17, 256, !dbg !16
  %22 = shl i32 %18, 8, !dbg !17
  %23 = shl i32 %19, 20, !dbg !18
  %24 = add i32 %23, %22, !dbg !19
  %25 = add i32 %24, %.decomposed, !dbg !20
  %26 = add i32 %24, %21, !dbg !20
  %27 = sext i32 %25 to i64, !dbg !21
  %28 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !21
  %29 = sext i32 %26 to i64, !dbg !21
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !21
  %31 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %28, i1 true) #4, !dbg !22
  %32 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %30, i1 true) #4, !dbg !22
  %33 = sext i32 %.decomposed to i64, !dbg !23
  %34 = getelementptr float, ptr addrspace(1) %1, i64 %33, !dbg !23
  %35 = sext i32 %21 to i64, !dbg !23
  %36 = getelementptr float, ptr addrspace(1) %1, i64 %35, !dbg !23
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %34, i1 true) #4, !dbg !24
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %36, i1 true) #4, !dbg !24
  %39 = getelementptr float, ptr addrspace(1) %2, i64 %33, !dbg !25
  %40 = getelementptr float, ptr addrspace(1) %2, i64 %35, !dbg !25
  %41 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %39, i1 true) #4, !dbg !26
  %42 = extractvalue { i32, i32, i32, i32 } %41, 0, !dbg !26
  %43 = extractvalue { i32, i32, i32, i32 } %41, 1, !dbg !26
  %44 = extractvalue { i32, i32, i32, i32 } %41, 2, !dbg !26
  %45 = extractvalue { i32, i32, i32, i32 } %41, 3, !dbg !26
  %46 = bitcast i32 %42 to float, !dbg !26
  %47 = bitcast i32 %43 to float, !dbg !26
  %48 = bitcast i32 %44 to float, !dbg !26
  %49 = bitcast i32 %45 to float, !dbg !26
  %50 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %40, i1 true) #4, !dbg !26
  %51 = extractvalue { i32, i32, i32, i32 } %50, 0, !dbg !26
  %52 = extractvalue { i32, i32, i32, i32 } %50, 1, !dbg !26
  %53 = extractvalue { i32, i32, i32, i32 } %50, 2, !dbg !26
  %54 = extractvalue { i32, i32, i32, i32 } %50, 3, !dbg !26
  %55 = bitcast i32 %51 to float, !dbg !26
  %56 = bitcast i32 %52 to float, !dbg !26
  %57 = bitcast i32 %53 to float, !dbg !26
  %58 = bitcast i32 %54 to float, !dbg !26
  %59 = getelementptr float, ptr addrspace(1) %3, i64 %33, !dbg !27
  %60 = getelementptr float, ptr addrspace(1) %3, i64 %35, !dbg !27
  %61 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %59, i1 true) #4, !dbg !28
  %62 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %60, i1 true) #4, !dbg !28
  %63 = getelementptr float, ptr addrspace(1) %4, i64 %33, !dbg !29
  %64 = getelementptr float, ptr addrspace(1) %4, i64 %35, !dbg !29
  %65 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %63, i1 true) #4, !dbg !30
  %66 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %64, i1 true) #4, !dbg !30
  %67 = fadd float %46, 0x3EE4F8B580000000, !dbg !31
  %68 = fadd float %47, 0x3EE4F8B580000000, !dbg !31
  %69 = fadd float %48, 0x3EE4F8B580000000, !dbg !31
  %70 = fadd float %49, 0x3EE4F8B580000000, !dbg !31
  %71 = fadd float %55, 0x3EE4F8B580000000, !dbg !31
  %72 = fadd float %56, 0x3EE4F8B580000000, !dbg !31
  %73 = fadd float %57, 0x3EE4F8B580000000, !dbg !31
  %74 = fadd float %58, 0x3EE4F8B580000000, !dbg !31
  %75 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !32
  %.not.i = icmp eq i32 %75, 0, !dbg !32
  %76 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !32
  %.not1.i = icmp eq i32 %76, 0, !dbg !32
  br i1 %.not.i, label %82, label %77, !dbg !32

77:                                               ; preds = %9
  br i1 %.not1.i, label %80, label %78, !dbg !32

78:                                               ; preds = %77
  %79 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %67) #4, !dbg !32
  br label %__nv_sqrtf.exit, !dbg !32

80:                                               ; preds = %77
  %81 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %67) #4, !dbg !32
  br label %__nv_sqrtf.exit, !dbg !32

82:                                               ; preds = %9
  br i1 %.not1.i, label %85, label %83, !dbg !32

83:                                               ; preds = %82
  %84 = tail call float @llvm.nvvm.sqrt.rn.f(float %67) #4, !dbg !32
  br label %__nv_sqrtf.exit, !dbg !32

85:                                               ; preds = %82
  %86 = tail call float @llvm.nvvm.sqrt.approx.f(float %67) #4, !dbg !32
  br label %__nv_sqrtf.exit, !dbg !32

__nv_sqrtf.exit:                                  ; preds = %78, %80, %83, %85
  %.0.i = phi float [ %79, %78 ], [ %81, %80 ], [ %84, %83 ], [ %86, %85 ], !dbg !32
  %87 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !32
  %.not.i10 = icmp eq i32 %87, 0, !dbg !32
  %88 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !32
  %.not1.i13 = icmp eq i32 %88, 0, !dbg !32
  br i1 %.not.i10, label %94, label %89, !dbg !32

89:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i13, label %92, label %90, !dbg !32

90:                                               ; preds = %89
  %91 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %68) #4, !dbg !32
  br label %__nv_sqrtf.exit14, !dbg !32

92:                                               ; preds = %89
  %93 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %68) #4, !dbg !32
  br label %__nv_sqrtf.exit14, !dbg !32

94:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i13, label %97, label %95, !dbg !32

95:                                               ; preds = %94
  %96 = tail call float @llvm.nvvm.sqrt.rn.f(float %68) #4, !dbg !32
  br label %__nv_sqrtf.exit14, !dbg !32

97:                                               ; preds = %94
  %98 = tail call float @llvm.nvvm.sqrt.approx.f(float %68) #4, !dbg !32
  br label %__nv_sqrtf.exit14, !dbg !32

__nv_sqrtf.exit14:                                ; preds = %90, %92, %95, %97
  %.0.i12 = phi float [ %91, %90 ], [ %93, %92 ], [ %96, %95 ], [ %98, %97 ], !dbg !32
  %99 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !32
  %.not.i15 = icmp eq i32 %99, 0, !dbg !32
  %100 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !32
  %.not1.i18 = icmp eq i32 %100, 0, !dbg !32
  br i1 %.not.i15, label %106, label %101, !dbg !32

101:                                              ; preds = %__nv_sqrtf.exit14
  br i1 %.not1.i18, label %104, label %102, !dbg !32

102:                                              ; preds = %101
  %103 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %69) #4, !dbg !32
  br label %__nv_sqrtf.exit19, !dbg !32

104:                                              ; preds = %101
  %105 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %69) #4, !dbg !32
  br label %__nv_sqrtf.exit19, !dbg !32

106:                                              ; preds = %__nv_sqrtf.exit14
  br i1 %.not1.i18, label %109, label %107, !dbg !32

107:                                              ; preds = %106
  %108 = tail call float @llvm.nvvm.sqrt.rn.f(float %69) #4, !dbg !32
  br label %__nv_sqrtf.exit19, !dbg !32

109:                                              ; preds = %106
  %110 = tail call float @llvm.nvvm.sqrt.approx.f(float %69) #4, !dbg !32
  br label %__nv_sqrtf.exit19, !dbg !32

__nv_sqrtf.exit19:                                ; preds = %102, %104, %107, %109
  %.0.i17 = phi float [ %103, %102 ], [ %105, %104 ], [ %108, %107 ], [ %110, %109 ], !dbg !32
  %111 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !32
  %.not.i20 = icmp eq i32 %111, 0, !dbg !32
  %112 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !32
  %.not1.i23 = icmp eq i32 %112, 0, !dbg !32
  br i1 %.not.i20, label %118, label %113, !dbg !32

113:                                              ; preds = %__nv_sqrtf.exit19
  br i1 %.not1.i23, label %116, label %114, !dbg !32

114:                                              ; preds = %113
  %115 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %70) #4, !dbg !32
  br label %__nv_sqrtf.exit24, !dbg !32

116:                                              ; preds = %113
  %117 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %70) #4, !dbg !32
  br label %__nv_sqrtf.exit24, !dbg !32

118:                                              ; preds = %__nv_sqrtf.exit19
  br i1 %.not1.i23, label %121, label %119, !dbg !32

119:                                              ; preds = %118
  %120 = tail call float @llvm.nvvm.sqrt.rn.f(float %70) #4, !dbg !32
  br label %__nv_sqrtf.exit24, !dbg !32

121:                                              ; preds = %118
  %122 = tail call float @llvm.nvvm.sqrt.approx.f(float %70) #4, !dbg !32
  br label %__nv_sqrtf.exit24, !dbg !32

__nv_sqrtf.exit24:                                ; preds = %114, %116, %119, %121
  %.0.i22 = phi float [ %115, %114 ], [ %117, %116 ], [ %120, %119 ], [ %122, %121 ], !dbg !32
  %123 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !32
  %.not.i25 = icmp eq i32 %123, 0, !dbg !32
  %124 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !32
  %.not1.i28 = icmp eq i32 %124, 0, !dbg !32
  br i1 %.not.i25, label %130, label %125, !dbg !32

125:                                              ; preds = %__nv_sqrtf.exit24
  br i1 %.not1.i28, label %128, label %126, !dbg !32

126:                                              ; preds = %125
  %127 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %71) #4, !dbg !32
  br label %__nv_sqrtf.exit29, !dbg !32

128:                                              ; preds = %125
  %129 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %71) #4, !dbg !32
  br label %__nv_sqrtf.exit29, !dbg !32

130:                                              ; preds = %__nv_sqrtf.exit24
  br i1 %.not1.i28, label %133, label %131, !dbg !32

131:                                              ; preds = %130
  %132 = tail call float @llvm.nvvm.sqrt.rn.f(float %71) #4, !dbg !32
  br label %__nv_sqrtf.exit29, !dbg !32

133:                                              ; preds = %130
  %134 = tail call float @llvm.nvvm.sqrt.approx.f(float %71) #4, !dbg !32
  br label %__nv_sqrtf.exit29, !dbg !32

__nv_sqrtf.exit29:                                ; preds = %126, %128, %131, %133
  %.0.i27 = phi float [ %127, %126 ], [ %129, %128 ], [ %132, %131 ], [ %134, %133 ], !dbg !32
  %135 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !32
  %.not.i30 = icmp eq i32 %135, 0, !dbg !32
  %136 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !32
  %.not1.i33 = icmp eq i32 %136, 0, !dbg !32
  br i1 %.not.i30, label %142, label %137, !dbg !32

137:                                              ; preds = %__nv_sqrtf.exit29
  br i1 %.not1.i33, label %140, label %138, !dbg !32

138:                                              ; preds = %137
  %139 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %72) #4, !dbg !32
  br label %__nv_sqrtf.exit34, !dbg !32

140:                                              ; preds = %137
  %141 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %72) #4, !dbg !32
  br label %__nv_sqrtf.exit34, !dbg !32

142:                                              ; preds = %__nv_sqrtf.exit29
  br i1 %.not1.i33, label %145, label %143, !dbg !32

143:                                              ; preds = %142
  %144 = tail call float @llvm.nvvm.sqrt.rn.f(float %72) #4, !dbg !32
  br label %__nv_sqrtf.exit34, !dbg !32

145:                                              ; preds = %142
  %146 = tail call float @llvm.nvvm.sqrt.approx.f(float %72) #4, !dbg !32
  br label %__nv_sqrtf.exit34, !dbg !32

__nv_sqrtf.exit34:                                ; preds = %138, %140, %143, %145
  %.0.i32 = phi float [ %139, %138 ], [ %141, %140 ], [ %144, %143 ], [ %146, %145 ], !dbg !32
  %147 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !32
  %.not.i35 = icmp eq i32 %147, 0, !dbg !32
  %148 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !32
  %.not1.i38 = icmp eq i32 %148, 0, !dbg !32
  br i1 %.not.i35, label %154, label %149, !dbg !32

149:                                              ; preds = %__nv_sqrtf.exit34
  br i1 %.not1.i38, label %152, label %150, !dbg !32

150:                                              ; preds = %149
  %151 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %73) #4, !dbg !32
  br label %__nv_sqrtf.exit39, !dbg !32

152:                                              ; preds = %149
  %153 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %73) #4, !dbg !32
  br label %__nv_sqrtf.exit39, !dbg !32

154:                                              ; preds = %__nv_sqrtf.exit34
  br i1 %.not1.i38, label %157, label %155, !dbg !32

155:                                              ; preds = %154
  %156 = tail call float @llvm.nvvm.sqrt.rn.f(float %73) #4, !dbg !32
  br label %__nv_sqrtf.exit39, !dbg !32

157:                                              ; preds = %154
  %158 = tail call float @llvm.nvvm.sqrt.approx.f(float %73) #4, !dbg !32
  br label %__nv_sqrtf.exit39, !dbg !32

__nv_sqrtf.exit39:                                ; preds = %150, %152, %155, %157
  %.0.i37 = phi float [ %151, %150 ], [ %153, %152 ], [ %156, %155 ], [ %158, %157 ], !dbg !32
  %159 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !32
  %.not.i40 = icmp eq i32 %159, 0, !dbg !32
  %160 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !32
  %.not1.i43 = icmp eq i32 %160, 0, !dbg !32
  br i1 %.not.i40, label %166, label %161, !dbg !32

161:                                              ; preds = %__nv_sqrtf.exit39
  br i1 %.not1.i43, label %164, label %162, !dbg !32

162:                                              ; preds = %161
  %163 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %74) #4, !dbg !32
  br label %__nv_sqrtf.exit44, !dbg !32

164:                                              ; preds = %161
  %165 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %74) #4, !dbg !32
  br label %__nv_sqrtf.exit44, !dbg !32

166:                                              ; preds = %__nv_sqrtf.exit39
  br i1 %.not1.i43, label %169, label %167, !dbg !32

167:                                              ; preds = %166
  %168 = tail call float @llvm.nvvm.sqrt.rn.f(float %74) #4, !dbg !32
  br label %__nv_sqrtf.exit44, !dbg !32

169:                                              ; preds = %166
  %170 = tail call float @llvm.nvvm.sqrt.approx.f(float %74) #4, !dbg !32
  br label %__nv_sqrtf.exit44, !dbg !32

__nv_sqrtf.exit44:                                ; preds = %162, %164, %167, %169
  %.0.i42 = phi float [ %163, %162 ], [ %165, %164 ], [ %168, %167 ], [ %170, %169 ], !dbg !32
  %171 = extractvalue { i32, i32, i32, i32 } %32, 3, !dbg !22
  %172 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !24
  %173 = extractvalue { i32, i32, i32, i32 } %32, 2, !dbg !22
  %174 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !24
  %175 = extractvalue { i32, i32, i32, i32 } %32, 1, !dbg !22
  %176 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !24
  %177 = extractvalue { i32, i32, i32, i32 } %32, 0, !dbg !22
  %178 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !24
  %179 = extractvalue { i32, i32, i32, i32 } %31, 3, !dbg !22
  %180 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !24
  %181 = extractvalue { i32, i32, i32, i32 } %31, 2, !dbg !22
  %182 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !24
  %183 = extractvalue { i32, i32, i32, i32 } %31, 1, !dbg !22
  %184 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !24
  %185 = extractvalue { i32, i32, i32, i32 } %31, 0, !dbg !22
  %186 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !24
  %187 = extractvalue { i32, i32, i32, i32 } %66, 3, !dbg !30
  %188 = extractvalue { i32, i32, i32, i32 } %66, 2, !dbg !30
  %189 = extractvalue { i32, i32, i32, i32 } %66, 1, !dbg !30
  %190 = extractvalue { i32, i32, i32, i32 } %66, 0, !dbg !30
  %191 = extractvalue { i32, i32, i32, i32 } %65, 3, !dbg !30
  %192 = extractvalue { i32, i32, i32, i32 } %65, 2, !dbg !30
  %193 = extractvalue { i32, i32, i32, i32 } %65, 1, !dbg !30
  %194 = extractvalue { i32, i32, i32, i32 } %65, 0, !dbg !30
  %195 = extractvalue { i32, i32, i32, i32 } %62, 3, !dbg !28
  %196 = extractvalue { i32, i32, i32, i32 } %62, 2, !dbg !28
  %197 = extractvalue { i32, i32, i32, i32 } %62, 1, !dbg !28
  %198 = extractvalue { i32, i32, i32, i32 } %62, 0, !dbg !28
  %199 = extractvalue { i32, i32, i32, i32 } %61, 3, !dbg !28
  %200 = extractvalue { i32, i32, i32, i32 } %61, 2, !dbg !28
  %201 = extractvalue { i32, i32, i32, i32 } %61, 1, !dbg !28
  %202 = extractvalue { i32, i32, i32, i32 } %61, 0, !dbg !28
  %203 = and i32 %12, 127, !dbg !12
  %204 = or disjoint i32 %203, 896, !dbg !12
  %205 = or disjoint i32 %11, %204, !dbg !13
  %206 = or disjoint i32 %203, 768, !dbg !12
  %207 = or disjoint i32 %11, %206, !dbg !13
  %208 = or disjoint i32 %203, 640, !dbg !12
  %209 = or disjoint i32 %11, %208, !dbg !13
  %210 = or disjoint i32 %203, 512, !dbg !12
  %211 = or disjoint i32 %11, %210, !dbg !13
  %212 = or disjoint i32 %203, 384, !dbg !12
  %213 = or disjoint i32 %11, %212, !dbg !13
  %214 = or disjoint i32 %203, 256, !dbg !12
  %215 = or disjoint i32 %11, %214, !dbg !13
  %216 = or disjoint i32 %203, 128, !dbg !12
  %217 = or disjoint i32 %11, %216, !dbg !13
  %218 = or disjoint i32 %11, %203, !dbg !13
  %219 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !33
  %220 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i12) #4, !dbg !33
  %221 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i17) #4, !dbg !33
  %222 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i22) #4, !dbg !33
  %223 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i27) #4, !dbg !33
  %224 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i32) #4, !dbg !33
  %225 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i37) #4, !dbg !33
  %226 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i42) #4, !dbg !33
  %227 = shl i32 %218, 12, !dbg !34
  %228 = shl i32 %217, 12, !dbg !34
  %229 = shl i32 %215, 12, !dbg !34
  %230 = shl i32 %213, 12, !dbg !34
  %231 = shl i32 %211, 12, !dbg !34
  %232 = shl i32 %209, 12, !dbg !34
  %233 = shl i32 %207, 12, !dbg !34
  %234 = shl i32 %205, 12, !dbg !34
  %235 = add i32 %227, %18, !dbg !35
  %236 = add i32 %228, %18, !dbg !35
  %237 = add i32 %229, %18, !dbg !35
  %238 = add i32 %230, %18, !dbg !35
  %239 = add i32 %231, %18, !dbg !35
  %240 = add i32 %232, %18, !dbg !35
  %241 = add i32 %233, %18, !dbg !35
  %242 = add i32 %234, %18, !dbg !35
  %243 = sext i32 %235 to i64, !dbg !36
  %244 = getelementptr float, ptr addrspace(1) %5, i64 %243, !dbg !36
  %245 = sext i32 %236 to i64, !dbg !36
  %246 = getelementptr float, ptr addrspace(1) %5, i64 %245, !dbg !36
  %247 = sext i32 %237 to i64, !dbg !36
  %248 = getelementptr float, ptr addrspace(1) %5, i64 %247, !dbg !36
  %249 = sext i32 %238 to i64, !dbg !36
  %250 = getelementptr float, ptr addrspace(1) %5, i64 %249, !dbg !36
  %251 = sext i32 %239 to i64, !dbg !36
  %252 = getelementptr float, ptr addrspace(1) %5, i64 %251, !dbg !36
  %253 = sext i32 %240 to i64, !dbg !36
  %254 = getelementptr float, ptr addrspace(1) %5, i64 %253, !dbg !36
  %255 = sext i32 %241 to i64, !dbg !36
  %256 = getelementptr float, ptr addrspace(1) %5, i64 %255, !dbg !36
  %257 = sext i32 %242 to i64, !dbg !36
  %258 = getelementptr float, ptr addrspace(1) %5, i64 %257, !dbg !36
  %.idx = shl nuw nsw i32 %14, 3, !dbg !37
  %259 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !37
  %260 = shl nuw nsw i32 %14, 1, !dbg !37
  %261 = or disjoint i32 %260, 2, !dbg !37
  %262 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %261, !dbg !37
  %263 = or disjoint i32 %260, 4, !dbg !37
  %264 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %263, !dbg !37
  %265 = or disjoint i32 %260, 6, !dbg !37
  %266 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %265, !dbg !37
  %.idx1 = shl nuw nsw i32 %15, 3, !dbg !37
  %267 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx1, !dbg !37
  %268 = or disjoint i32 %260, 10, !dbg !37
  %269 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %268, !dbg !37
  %270 = or disjoint i32 %260, 12, !dbg !37
  %271 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %270, !dbg !37
  %272 = or disjoint i32 %260, 14, !dbg !37
  %273 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %272, !dbg !37
  %.idx2 = shl nuw nsw i32 %203, 3, !dbg !37
  %274 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx2, !dbg !37
  %.idx3 = shl nuw nsw i32 %216, 3, !dbg !37
  %275 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx3, !dbg !37
  %.idx4 = shl nuw nsw i32 %214, 3, !dbg !37
  %276 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx4, !dbg !37
  %.idx5 = shl nuw nsw i32 %212, 3, !dbg !37
  %277 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx5, !dbg !37
  %.idx6 = shl nuw nsw i32 %210, 3, !dbg !37
  %278 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx6, !dbg !37
  %.idx7 = shl nuw nsw i32 %208, 3, !dbg !37
  %279 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx7, !dbg !37
  %.idx8 = shl nuw nsw i32 %206, 3, !dbg !37
  %280 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx8, !dbg !37
  %.idx9 = shl nuw nsw i32 %204, 3, !dbg !37
  %281 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx9, !dbg !37
  %282 = getelementptr i1, ptr addrspace(1) %6, i64 %27, !dbg !38
  %283 = insertelement <4 x i32> poison, i32 %185, i64 0, !dbg !22
  %284 = insertelement <4 x i32> %283, i32 %183, i64 1, !dbg !22
  %285 = insertelement <4 x i32> %284, i32 %181, i64 2, !dbg !22
  %286 = insertelement <4 x i32> %285, i32 %179, i64 3, !dbg !22
  %287 = bitcast <4 x i32> %286 to <4 x float>, !dbg !22
  %288 = insertelement <4 x i32> poison, i32 %186, i64 0, !dbg !24
  %289 = insertelement <4 x i32> %288, i32 %184, i64 1, !dbg !24
  %290 = insertelement <4 x i32> %289, i32 %182, i64 2, !dbg !24
  %291 = insertelement <4 x i32> %290, i32 %180, i64 3, !dbg !24
  %292 = bitcast <4 x i32> %291 to <4 x float>, !dbg !24
  %293 = fsub <4 x float> %287, %292, !dbg !39
  %294 = insertelement <4 x i32> poison, i32 %194, i64 0, !dbg !30
  %295 = insertelement <4 x i32> %294, i32 %193, i64 1, !dbg !30
  %296 = insertelement <4 x i32> %295, i32 %192, i64 2, !dbg !30
  %297 = insertelement <4 x i32> %296, i32 %191, i64 3, !dbg !30
  %298 = bitcast <4 x i32> %297 to <4 x float>, !dbg !30
  %299 = insertelement <4 x i32> poison, i32 %202, i64 0, !dbg !28
  %300 = insertelement <4 x i32> %299, i32 %201, i64 1, !dbg !28
  %301 = insertelement <4 x i32> %300, i32 %200, i64 2, !dbg !28
  %302 = insertelement <4 x i32> %301, i32 %199, i64 3, !dbg !28
  %303 = bitcast <4 x i32> %302 to <4 x float>, !dbg !28
  %304 = insertelement <4 x float> poison, float %219, i64 0, !dbg !40
  %305 = insertelement <4 x float> %304, float %220, i64 1, !dbg !40
  %306 = insertelement <4 x float> %305, float %221, i64 2, !dbg !40
  %307 = insertelement <4 x float> %306, float %222, i64 3, !dbg !40
  %308 = fmul <4 x float> %293, %307, !dbg !40
  %309 = fmul <4 x float> %308, %303, !dbg !41
  %310 = fadd <4 x float> %309, %298, !dbg !42
  %311 = fcmp olt <4 x float> %310, zeroinitializer, !dbg !43
  %312 = select <4 x i1> %311, <4 x float> zeroinitializer, <4 x float> %310, !dbg !47
  %313 = fcmp ole <4 x float> %312, zeroinitializer, !dbg !48
  %314 = extractelement <4 x float> %312, i64 0, !dbg !37
  %315 = bitcast float %314 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %259, <1 x i32> %315, i1 true) #4, !dbg !37
  %316 = extractelement <4 x float> %312, i64 1, !dbg !37
  %317 = bitcast float %316 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %262, <1 x i32> %317, i1 true) #4, !dbg !37
  %318 = extractelement <4 x float> %312, i64 2, !dbg !37
  %319 = bitcast float %318 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %264, <1 x i32> %319, i1 true) #4, !dbg !37
  %320 = extractelement <4 x float> %312, i64 3, !dbg !37
  %321 = bitcast float %320 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %266, <1 x i32> %321, i1 true) #4, !dbg !37
  %322 = insertelement <4 x i32> poison, i32 %177, i64 0, !dbg !22
  %323 = insertelement <4 x i32> %322, i32 %175, i64 1, !dbg !22
  %324 = insertelement <4 x i32> %323, i32 %173, i64 2, !dbg !22
  %325 = insertelement <4 x i32> %324, i32 %171, i64 3, !dbg !22
  %326 = bitcast <4 x i32> %325 to <4 x float>, !dbg !22
  %327 = insertelement <4 x i32> poison, i32 %178, i64 0, !dbg !24
  %328 = insertelement <4 x i32> %327, i32 %176, i64 1, !dbg !24
  %329 = insertelement <4 x i32> %328, i32 %174, i64 2, !dbg !24
  %330 = insertelement <4 x i32> %329, i32 %172, i64 3, !dbg !24
  %331 = bitcast <4 x i32> %330 to <4 x float>, !dbg !24
  %332 = fsub <4 x float> %326, %331, !dbg !39
  %333 = insertelement <4 x i32> poison, i32 %190, i64 0, !dbg !30
  %334 = insertelement <4 x i32> %333, i32 %189, i64 1, !dbg !30
  %335 = insertelement <4 x i32> %334, i32 %188, i64 2, !dbg !30
  %336 = insertelement <4 x i32> %335, i32 %187, i64 3, !dbg !30
  %337 = bitcast <4 x i32> %336 to <4 x float>, !dbg !30
  %338 = insertelement <4 x i32> poison, i32 %198, i64 0, !dbg !28
  %339 = insertelement <4 x i32> %338, i32 %197, i64 1, !dbg !28
  %340 = insertelement <4 x i32> %339, i32 %196, i64 2, !dbg !28
  %341 = insertelement <4 x i32> %340, i32 %195, i64 3, !dbg !28
  %342 = bitcast <4 x i32> %341 to <4 x float>, !dbg !28
  %343 = insertelement <4 x float> poison, float %223, i64 0, !dbg !40
  %344 = insertelement <4 x float> %343, float %224, i64 1, !dbg !40
  %345 = insertelement <4 x float> %344, float %225, i64 2, !dbg !40
  %346 = insertelement <4 x float> %345, float %226, i64 3, !dbg !40
  %347 = fmul <4 x float> %332, %346, !dbg !40
  %348 = fmul <4 x float> %347, %342, !dbg !41
  %349 = fadd <4 x float> %348, %337, !dbg !42
  %350 = fcmp olt <4 x float> %349, zeroinitializer, !dbg !43
  %351 = select <4 x i1> %350, <4 x float> zeroinitializer, <4 x float> %349, !dbg !47
  %352 = fcmp ole <4 x float> %351, zeroinitializer, !dbg !48
  %353 = extractelement <4 x float> %351, i64 0, !dbg !37
  %354 = bitcast float %353 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %267, <1 x i32> %354, i1 true) #4, !dbg !37
  %355 = extractelement <4 x float> %351, i64 1, !dbg !37
  %356 = bitcast float %355 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %269, <1 x i32> %356, i1 true) #4, !dbg !37
  %357 = extractelement <4 x float> %351, i64 2, !dbg !37
  %358 = bitcast float %357 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %271, <1 x i32> %358, i1 true) #4, !dbg !37
  %359 = extractelement <4 x float> %351, i64 3, !dbg !37
  %360 = bitcast float %359 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %273, <1 x i32> %360, i1 true) #4, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %361 = load i32, ptr addrspace(3) %274, align 8, !dbg !37
  %362 = load i32, ptr addrspace(3) %275, align 8, !dbg !37
  %363 = load i32, ptr addrspace(3) %276, align 8, !dbg !37
  %364 = load i32, ptr addrspace(3) %277, align 8, !dbg !37
  %365 = load i32, ptr addrspace(3) %278, align 8, !dbg !37
  %366 = load i32, ptr addrspace(3) %279, align 8, !dbg !37
  %367 = load i32, ptr addrspace(3) %280, align 8, !dbg !37
  %368 = load i32, ptr addrspace(3) %281, align 8, !dbg !37
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %361, ptr addrspace(1) %244, i1 true) #4, !dbg !37
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %362, ptr addrspace(1) %246, i1 true) #4, !dbg !37
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %363, ptr addrspace(1) %248, i1 true) #4, !dbg !37
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %364, ptr addrspace(1) %250, i1 true) #4, !dbg !37
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %365, ptr addrspace(1) %252, i1 true) #4, !dbg !37
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %366, ptr addrspace(1) %254, i1 true) #4, !dbg !37
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %367, ptr addrspace(1) %256, i1 true) #4, !dbg !37
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %368, ptr addrspace(1) %258, i1 true) #4, !dbg !37
  %369 = zext <4 x i1> %313 to <4 x i8>, !dbg !49
  %370 = bitcast <4 x i8> %369 to i32, !dbg !49
  %371 = zext <4 x i1> %352 to <4 x i8>, !dbg !49
  %372 = bitcast <4 x i8> %371 to i32, !dbg !49
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %370, i32 %372, ptr addrspace(1) %282, i1 true) #4, !dbg !49
  ret void, !dbg !50
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c5blinwla3d5xeprhk4bri4yjnj3dojlpefg6ltuyuonxdum4se2.py", directory: "inductor_cache/5b")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_7, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_7, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_7", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_7", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 30, column: 19, scope: !7)
!16 = !DILocation(line: 29, column: 19, scope: !7)
!17 = !DILocation(line: 32, column: 39, scope: !7)
!18 = !DILocation(line: 32, column: 52, scope: !7)
!19 = !DILocation(line: 32, column: 35, scope: !7)
!20 = !DILocation(line: 32, column: 44, scope: !7)
!21 = !DILocation(line: 32, column: 30, scope: !7)
!22 = !DILocation(line: 32, column: 57, scope: !7)
!23 = !DILocation(line: 33, column: 30, scope: !7)
!24 = !DILocation(line: 33, column: 35, scope: !7)
!25 = !DILocation(line: 34, column: 30, scope: !7)
!26 = !DILocation(line: 34, column: 35, scope: !7)
!27 = !DILocation(line: 35, column: 31, scope: !7)
!28 = !DILocation(line: 35, column: 36, scope: !7)
!29 = !DILocation(line: 36, column: 31, scope: !7)
!30 = !DILocation(line: 36, column: 36, scope: !7)
!31 = !DILocation(line: 39, column: 18, scope: !7)
!32 = !DILocation(line: 40, column: 26, scope: !7)
!33 = !DILocation(line: 42, column: 18, scope: !7)
!34 = !DILocation(line: 52, column: 35, scope: !7)
!35 = !DILocation(line: 52, column: 30, scope: !7)
!36 = !DILocation(line: 52, column: 25, scope: !7)
!37 = !DILocation(line: 52, column: 47, scope: !7)
!38 = !DILocation(line: 53, column: 25, scope: !7)
!39 = !DILocation(line: 37, column: 18, scope: !7)
!40 = !DILocation(line: 45, column: 19, scope: !7)
!41 = !DILocation(line: 46, column: 20, scope: !7)
!42 = !DILocation(line: 47, column: 20, scope: !7)
!43 = !DILocation(line: 118, column: 15, scope: !44, inlinedAt: !46)
!44 = distinct !DILexicalBlockFile(scope: !7, file: !45, discriminator: 0)
!45 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!46 = !DILocation(line: 49, column: 42, scope: !7)
!47 = !DILocation(line: 121, column: 29, scope: !44, inlinedAt: !46)
!48 = !DILocation(line: 51, column: 21, scope: !7)
!49 = !DILocation(line: 53, column: 59, scope: !7)
!50 = !DILocation(line: 53, column: 4, scope: !7)
