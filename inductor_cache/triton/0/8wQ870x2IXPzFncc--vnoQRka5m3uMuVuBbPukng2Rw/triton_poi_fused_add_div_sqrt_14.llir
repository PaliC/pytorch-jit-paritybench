; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_add_div_sqrt_14(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #3, !dbg !10
  %7 = icmp slt i32 %6, 256, !dbg !11
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !12
  %9 = shl i32 %8, 10, !dbg !13
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !14
  %11 = and i32 %10, 127, !dbg !14
  %12 = or disjoint i32 %9, %11, !dbg !15
  %13 = or disjoint i32 %12, 128, !dbg !15
  %14 = or disjoint i32 %12, 256, !dbg !15
  %15 = or disjoint i32 %12, 384, !dbg !15
  %16 = or disjoint i32 %12, 512, !dbg !15
  %17 = or disjoint i32 %12, 640, !dbg !15
  %18 = or disjoint i32 %12, 768, !dbg !15
  %19 = or disjoint i32 %12, 896, !dbg !15
  %20 = icmp slt i32 %12, 961, !dbg !16
  %21 = icmp slt i32 %13, 961, !dbg !16
  %22 = icmp slt i32 %14, 961, !dbg !16
  %23 = icmp slt i32 %15, 961, !dbg !16
  %24 = icmp slt i32 %16, 961, !dbg !16
  %25 = icmp slt i32 %17, 961, !dbg !16
  %26 = icmp slt i32 %18, 961, !dbg !16
  %27 = icmp slt i32 %19, 961, !dbg !16
  %.frozen = freeze i32 %6, !dbg !17
  %28 = sdiv i32 %.frozen, 64, !dbg !17
  %29 = mul i32 %28, 64, !dbg !18
  %.decomposed = sub i32 %.frozen, %29, !dbg !18
  %30 = shl i32 %12, 6, !dbg !19
  %31 = shl i32 %13, 6, !dbg !19
  %32 = shl i32 %14, 6, !dbg !19
  %33 = shl i32 %15, 6, !dbg !19
  %34 = shl i32 %16, 6, !dbg !19
  %35 = shl i32 %17, 6, !dbg !19
  %36 = shl i32 %18, 6, !dbg !19
  %37 = shl i32 %19, 6, !dbg !19
  %38 = mul i32 %28, 61504, !dbg !20
  %39 = add i32 %38, %.decomposed, !dbg !21
  %40 = add i32 %39, %30, !dbg !22
  %41 = add i32 %39, %31, !dbg !22
  %42 = add i32 %39, %32, !dbg !22
  %43 = add i32 %39, %33, !dbg !22
  %44 = add i32 %39, %34, !dbg !22
  %45 = add i32 %39, %35, !dbg !22
  %46 = add i32 %39, %36, !dbg !22
  %47 = add i32 %39, %37, !dbg !22
  %48 = sext i32 %40 to i64, !dbg !23
  %49 = getelementptr float, ptr addrspace(1) %0, i64 %48, !dbg !23
  %50 = sext i32 %41 to i64, !dbg !23
  %51 = getelementptr float, ptr addrspace(1) %0, i64 %50, !dbg !23
  %52 = sext i32 %42 to i64, !dbg !23
  %53 = getelementptr float, ptr addrspace(1) %0, i64 %52, !dbg !23
  %54 = sext i32 %43 to i64, !dbg !23
  %55 = getelementptr float, ptr addrspace(1) %0, i64 %54, !dbg !23
  %56 = sext i32 %44 to i64, !dbg !23
  %57 = getelementptr float, ptr addrspace(1) %0, i64 %56, !dbg !23
  %58 = sext i32 %45 to i64, !dbg !23
  %59 = getelementptr float, ptr addrspace(1) %0, i64 %58, !dbg !23
  %60 = sext i32 %46 to i64, !dbg !23
  %61 = getelementptr float, ptr addrspace(1) %0, i64 %60, !dbg !23
  %62 = sext i32 %47 to i64, !dbg !23
  %63 = getelementptr float, ptr addrspace(1) %0, i64 %62, !dbg !23
  %64 = and i1 %7, %20, !dbg !24
  %65 = and i1 %21, %7, !dbg !24
  %66 = and i1 %22, %7, !dbg !24
  %67 = and i1 %23, %7, !dbg !24
  %68 = and i1 %24, %7, !dbg !24
  %69 = and i1 %25, %7, !dbg !24
  %70 = and i1 %26, %7, !dbg !24
  %71 = and i1 %27, %7, !dbg !24
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 %64) #3, !dbg !25
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 %65) #3, !dbg !25
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 %66) #3, !dbg !25
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 %67) #3, !dbg !25
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 %68) #3, !dbg !25
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 %69) #3, !dbg !25
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 %70) #3, !dbg !25
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 %71) #3, !dbg !25
  %80 = mul i32 %28, 961, !dbg !26
  %81 = add i32 %12, %80, !dbg !27
  %82 = add i32 %80, %13, !dbg !27
  %83 = add i32 %80, %14, !dbg !27
  %84 = add i32 %80, %15, !dbg !27
  %85 = add i32 %80, %16, !dbg !27
  %86 = add i32 %80, %17, !dbg !27
  %87 = add i32 %80, %18, !dbg !27
  %88 = add i32 %80, %19, !dbg !27
  %89 = sext i32 %81 to i64, !dbg !28
  %90 = getelementptr float, ptr addrspace(1) %1, i64 %89, !dbg !28
  %91 = sext i32 %82 to i64, !dbg !28
  %92 = getelementptr float, ptr addrspace(1) %1, i64 %91, !dbg !28
  %93 = sext i32 %83 to i64, !dbg !28
  %94 = getelementptr float, ptr addrspace(1) %1, i64 %93, !dbg !28
  %95 = sext i32 %84 to i64, !dbg !28
  %96 = getelementptr float, ptr addrspace(1) %1, i64 %95, !dbg !28
  %97 = sext i32 %85 to i64, !dbg !28
  %98 = getelementptr float, ptr addrspace(1) %1, i64 %97, !dbg !28
  %99 = sext i32 %86 to i64, !dbg !28
  %100 = getelementptr float, ptr addrspace(1) %1, i64 %99, !dbg !28
  %101 = sext i32 %87 to i64, !dbg !28
  %102 = getelementptr float, ptr addrspace(1) %1, i64 %101, !dbg !28
  %103 = sext i32 %88 to i64, !dbg !28
  %104 = getelementptr float, ptr addrspace(1) %1, i64 %103, !dbg !28
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %90, i1 %64) #3, !dbg !29
  %106 = bitcast i32 %105 to float, !dbg !29
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 %65) #3, !dbg !29
  %108 = bitcast i32 %107 to float, !dbg !29
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 %66) #3, !dbg !29
  %110 = bitcast i32 %109 to float, !dbg !29
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 %67) #3, !dbg !29
  %112 = bitcast i32 %111 to float, !dbg !29
  %113 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %98, i1 %68) #3, !dbg !29
  %114 = bitcast i32 %113 to float, !dbg !29
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %100, i1 %69) #3, !dbg !29
  %116 = bitcast i32 %115 to float, !dbg !29
  %117 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %102, i1 %70) #3, !dbg !29
  %118 = bitcast i32 %117 to float, !dbg !29
  %119 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %104, i1 %71) #3, !dbg !29
  %120 = bitcast i32 %119 to float, !dbg !29
  %121 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i = icmp eq i32 %121, 0, !dbg !30
  %122 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i = icmp eq i32 %122, 0, !dbg !30
  br i1 %.not.i, label %128, label %123, !dbg !30

123:                                              ; preds = %5
  br i1 %.not1.i, label %126, label %124, !dbg !30

124:                                              ; preds = %123
  %125 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %106) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

126:                                              ; preds = %123
  %127 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %106) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

128:                                              ; preds = %5
  br i1 %.not1.i, label %131, label %129, !dbg !30

129:                                              ; preds = %128
  %130 = tail call float @llvm.nvvm.sqrt.rn.f(float %106) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

131:                                              ; preds = %128
  %132 = tail call float @llvm.nvvm.sqrt.approx.f(float %106) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

__nv_sqrtf.exit:                                  ; preds = %124, %126, %129, %131
  %.0.i = phi float [ %125, %124 ], [ %127, %126 ], [ %130, %129 ], [ %132, %131 ], !dbg !30
  %133 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i1 = icmp eq i32 %133, 0, !dbg !30
  %134 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i4 = icmp eq i32 %134, 0, !dbg !30
  br i1 %.not.i1, label %140, label %135, !dbg !30

135:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %138, label %136, !dbg !30

136:                                              ; preds = %135
  %137 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %108) #3, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

138:                                              ; preds = %135
  %139 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %108) #3, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

140:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %143, label %141, !dbg !30

141:                                              ; preds = %140
  %142 = tail call float @llvm.nvvm.sqrt.rn.f(float %108) #3, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

143:                                              ; preds = %140
  %144 = tail call float @llvm.nvvm.sqrt.approx.f(float %108) #3, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

__nv_sqrtf.exit5:                                 ; preds = %136, %138, %141, %143
  %.0.i3 = phi float [ %137, %136 ], [ %139, %138 ], [ %142, %141 ], [ %144, %143 ], !dbg !30
  %145 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i6 = icmp eq i32 %145, 0, !dbg !30
  %146 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i9 = icmp eq i32 %146, 0, !dbg !30
  br i1 %.not.i6, label %152, label %147, !dbg !30

147:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %150, label %148, !dbg !30

148:                                              ; preds = %147
  %149 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %110) #3, !dbg !30
  br label %__nv_sqrtf.exit10, !dbg !30

150:                                              ; preds = %147
  %151 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %110) #3, !dbg !30
  br label %__nv_sqrtf.exit10, !dbg !30

152:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %155, label %153, !dbg !30

153:                                              ; preds = %152
  %154 = tail call float @llvm.nvvm.sqrt.rn.f(float %110) #3, !dbg !30
  br label %__nv_sqrtf.exit10, !dbg !30

155:                                              ; preds = %152
  %156 = tail call float @llvm.nvvm.sqrt.approx.f(float %110) #3, !dbg !30
  br label %__nv_sqrtf.exit10, !dbg !30

__nv_sqrtf.exit10:                                ; preds = %148, %150, %153, %155
  %.0.i8 = phi float [ %149, %148 ], [ %151, %150 ], [ %154, %153 ], [ %156, %155 ], !dbg !30
  %157 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i11 = icmp eq i32 %157, 0, !dbg !30
  %158 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i14 = icmp eq i32 %158, 0, !dbg !30
  br i1 %.not.i11, label %164, label %159, !dbg !30

159:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %162, label %160, !dbg !30

160:                                              ; preds = %159
  %161 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %112) #3, !dbg !30
  br label %__nv_sqrtf.exit15, !dbg !30

162:                                              ; preds = %159
  %163 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %112) #3, !dbg !30
  br label %__nv_sqrtf.exit15, !dbg !30

164:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %167, label %165, !dbg !30

165:                                              ; preds = %164
  %166 = tail call float @llvm.nvvm.sqrt.rn.f(float %112) #3, !dbg !30
  br label %__nv_sqrtf.exit15, !dbg !30

167:                                              ; preds = %164
  %168 = tail call float @llvm.nvvm.sqrt.approx.f(float %112) #3, !dbg !30
  br label %__nv_sqrtf.exit15, !dbg !30

__nv_sqrtf.exit15:                                ; preds = %160, %162, %165, %167
  %.0.i13 = phi float [ %161, %160 ], [ %163, %162 ], [ %166, %165 ], [ %168, %167 ], !dbg !30
  %169 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i16 = icmp eq i32 %169, 0, !dbg !30
  %170 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i19 = icmp eq i32 %170, 0, !dbg !30
  br i1 %.not.i16, label %176, label %171, !dbg !30

171:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %174, label %172, !dbg !30

172:                                              ; preds = %171
  %173 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %114) #3, !dbg !30
  br label %__nv_sqrtf.exit20, !dbg !30

174:                                              ; preds = %171
  %175 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %114) #3, !dbg !30
  br label %__nv_sqrtf.exit20, !dbg !30

176:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %179, label %177, !dbg !30

177:                                              ; preds = %176
  %178 = tail call float @llvm.nvvm.sqrt.rn.f(float %114) #3, !dbg !30
  br label %__nv_sqrtf.exit20, !dbg !30

179:                                              ; preds = %176
  %180 = tail call float @llvm.nvvm.sqrt.approx.f(float %114) #3, !dbg !30
  br label %__nv_sqrtf.exit20, !dbg !30

__nv_sqrtf.exit20:                                ; preds = %172, %174, %177, %179
  %.0.i18 = phi float [ %173, %172 ], [ %175, %174 ], [ %178, %177 ], [ %180, %179 ], !dbg !30
  %181 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i21 = icmp eq i32 %181, 0, !dbg !30
  %182 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i24 = icmp eq i32 %182, 0, !dbg !30
  br i1 %.not.i21, label %188, label %183, !dbg !30

183:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %186, label %184, !dbg !30

184:                                              ; preds = %183
  %185 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %116) #3, !dbg !30
  br label %__nv_sqrtf.exit25, !dbg !30

186:                                              ; preds = %183
  %187 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %116) #3, !dbg !30
  br label %__nv_sqrtf.exit25, !dbg !30

188:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %191, label %189, !dbg !30

189:                                              ; preds = %188
  %190 = tail call float @llvm.nvvm.sqrt.rn.f(float %116) #3, !dbg !30
  br label %__nv_sqrtf.exit25, !dbg !30

191:                                              ; preds = %188
  %192 = tail call float @llvm.nvvm.sqrt.approx.f(float %116) #3, !dbg !30
  br label %__nv_sqrtf.exit25, !dbg !30

__nv_sqrtf.exit25:                                ; preds = %184, %186, %189, %191
  %.0.i23 = phi float [ %185, %184 ], [ %187, %186 ], [ %190, %189 ], [ %192, %191 ], !dbg !30
  %193 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i26 = icmp eq i32 %193, 0, !dbg !30
  %194 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i29 = icmp eq i32 %194, 0, !dbg !30
  br i1 %.not.i26, label %200, label %195, !dbg !30

195:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %198, label %196, !dbg !30

196:                                              ; preds = %195
  %197 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %118) #3, !dbg !30
  br label %__nv_sqrtf.exit30, !dbg !30

198:                                              ; preds = %195
  %199 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %118) #3, !dbg !30
  br label %__nv_sqrtf.exit30, !dbg !30

200:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %203, label %201, !dbg !30

201:                                              ; preds = %200
  %202 = tail call float @llvm.nvvm.sqrt.rn.f(float %118) #3, !dbg !30
  br label %__nv_sqrtf.exit30, !dbg !30

203:                                              ; preds = %200
  %204 = tail call float @llvm.nvvm.sqrt.approx.f(float %118) #3, !dbg !30
  br label %__nv_sqrtf.exit30, !dbg !30

__nv_sqrtf.exit30:                                ; preds = %196, %198, %201, %203
  %.0.i28 = phi float [ %197, %196 ], [ %199, %198 ], [ %202, %201 ], [ %204, %203 ], !dbg !30
  %205 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i31 = icmp eq i32 %205, 0, !dbg !30
  %206 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i34 = icmp eq i32 %206, 0, !dbg !30
  br i1 %.not.i31, label %212, label %207, !dbg !30

207:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %210, label %208, !dbg !30

208:                                              ; preds = %207
  %209 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %120) #3, !dbg !30
  br label %__nv_sqrtf.exit35, !dbg !30

210:                                              ; preds = %207
  %211 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %120) #3, !dbg !30
  br label %__nv_sqrtf.exit35, !dbg !30

212:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %215, label %213, !dbg !30

213:                                              ; preds = %212
  %214 = tail call float @llvm.nvvm.sqrt.rn.f(float %120) #3, !dbg !30
  br label %__nv_sqrtf.exit35, !dbg !30

215:                                              ; preds = %212
  %216 = tail call float @llvm.nvvm.sqrt.approx.f(float %120) #3, !dbg !30
  br label %__nv_sqrtf.exit35, !dbg !30

__nv_sqrtf.exit35:                                ; preds = %208, %210, %213, %215
  %.0.i33 = phi float [ %209, %208 ], [ %211, %210 ], [ %214, %213 ], [ %216, %215 ], !dbg !30
  %217 = bitcast i32 %79 to float, !dbg !25
  %218 = bitcast i32 %78 to float, !dbg !25
  %219 = bitcast i32 %77 to float, !dbg !25
  %220 = bitcast i32 %76 to float, !dbg !25
  %221 = bitcast i32 %75 to float, !dbg !25
  %222 = bitcast i32 %74 to float, !dbg !25
  %223 = bitcast i32 %73 to float, !dbg !25
  %224 = bitcast i32 %72 to float, !dbg !25
  %225 = fadd float %.0.i, 0x3DDB7CDFE0000000, !dbg !31
  %226 = fadd float %.0.i3, 0x3DDB7CDFE0000000, !dbg !31
  %227 = fadd float %.0.i8, 0x3DDB7CDFE0000000, !dbg !31
  %228 = fadd float %.0.i13, 0x3DDB7CDFE0000000, !dbg !31
  %229 = fadd float %.0.i18, 0x3DDB7CDFE0000000, !dbg !31
  %230 = fadd float %.0.i23, 0x3DDB7CDFE0000000, !dbg !31
  %231 = fadd float %.0.i28, 0x3DDB7CDFE0000000, !dbg !31
  %232 = fadd float %.0.i33, 0x3DDB7CDFE0000000, !dbg !31
  %233 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %224, float %225) #3, !dbg !32
  %234 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %223, float %226) #3, !dbg !32
  %235 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %222, float %227) #3, !dbg !32
  %236 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %221, float %228) #3, !dbg !32
  %237 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %220, float %229) #3, !dbg !32
  %238 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %219, float %230) #3, !dbg !32
  %239 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %218, float %231) #3, !dbg !32
  %240 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %217, float %232) #3, !dbg !32
  %241 = mul i32 %6, 961, !dbg !33
  %242 = add i32 %12, %241, !dbg !34
  %243 = add i32 %241, %13, !dbg !34
  %244 = add i32 %241, %14, !dbg !34
  %245 = add i32 %241, %15, !dbg !34
  %246 = add i32 %241, %16, !dbg !34
  %247 = add i32 %241, %17, !dbg !34
  %248 = add i32 %241, %18, !dbg !34
  %249 = add i32 %241, %19, !dbg !34
  %250 = sext i32 %242 to i64, !dbg !35
  %251 = getelementptr float, ptr addrspace(1) %2, i64 %250, !dbg !35
  %252 = sext i32 %243 to i64, !dbg !35
  %253 = getelementptr float, ptr addrspace(1) %2, i64 %252, !dbg !35
  %254 = sext i32 %244 to i64, !dbg !35
  %255 = getelementptr float, ptr addrspace(1) %2, i64 %254, !dbg !35
  %256 = sext i32 %245 to i64, !dbg !35
  %257 = getelementptr float, ptr addrspace(1) %2, i64 %256, !dbg !35
  %258 = sext i32 %246 to i64, !dbg !35
  %259 = getelementptr float, ptr addrspace(1) %2, i64 %258, !dbg !35
  %260 = sext i32 %247 to i64, !dbg !35
  %261 = getelementptr float, ptr addrspace(1) %2, i64 %260, !dbg !35
  %262 = sext i32 %248 to i64, !dbg !35
  %263 = getelementptr float, ptr addrspace(1) %2, i64 %262, !dbg !35
  %264 = sext i32 %249 to i64, !dbg !35
  %265 = getelementptr float, ptr addrspace(1) %2, i64 %264, !dbg !35
  %266 = bitcast float %233 to i32, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %266, ptr addrspace(1) %251, i1 %64) #3, !dbg !36
  %267 = bitcast float %234 to i32, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %267, ptr addrspace(1) %253, i1 %65) #3, !dbg !36
  %268 = bitcast float %235 to i32, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %268, ptr addrspace(1) %255, i1 %66) #3, !dbg !36
  %269 = bitcast float %236 to i32, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %269, ptr addrspace(1) %257, i1 %67) #3, !dbg !36
  %270 = bitcast float %237 to i32, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %270, ptr addrspace(1) %259, i1 %68) #3, !dbg !36
  %271 = bitcast float %238 to i32, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %271, ptr addrspace(1) %261, i1 %69) #3, !dbg !36
  %272 = bitcast float %239 to i32, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %272, ptr addrspace(1) %263, i1 %70) #3, !dbg !36
  %273 = bitcast float %240 to i32, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %273, ptr addrspace(1) %265, i1 %71) #3, !dbg !36
  ret void, !dbg !37
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c4jxggu4ejfyryo2bzvrfpxjahc443vzfccnhi6go3ohuyq3kcez.py", directory: "inductor_cache/4j")
!4 = !{ptr @triton_poi_fused_add_div_sqrt_14, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_div_sqrt_14, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_div_sqrt_14", linkageName: "triton_poi_fused_add_div_sqrt_14", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 28, scope: !7)
!13 = !DILocation(line: 25, column: 33, scope: !7)
!14 = !DILocation(line: 26, column: 44, scope: !7)
!15 = !DILocation(line: 26, column: 23, scope: !7)
!16 = !DILocation(line: 27, column: 21, scope: !7)
!17 = !DILocation(line: 30, column: 19, scope: !7)
!18 = !DILocation(line: 29, column: 19, scope: !7)
!19 = !DILocation(line: 32, column: 38, scope: !7)
!20 = !DILocation(line: 32, column: 49, scope: !7)
!21 = !DILocation(line: 32, column: 35, scope: !7)
!22 = !DILocation(line: 32, column: 43, scope: !7)
!23 = !DILocation(line: 32, column: 30, scope: !7)
!24 = !DILocation(line: 32, column: 62, scope: !7)
!25 = !DILocation(line: 32, column: 54, scope: !7)
!26 = !DILocation(line: 33, column: 39, scope: !7)
!27 = !DILocation(line: 33, column: 35, scope: !7)
!28 = !DILocation(line: 33, column: 30, scope: !7)
!29 = !DILocation(line: 33, column: 44, scope: !7)
!30 = !DILocation(line: 34, column: 26, scope: !7)
!31 = !DILocation(line: 36, column: 18, scope: !7)
!32 = !DILocation(line: 37, column: 18, scope: !7)
!33 = !DILocation(line: 38, column: 34, scope: !7)
!34 = !DILocation(line: 38, column: 30, scope: !7)
!35 = !DILocation(line: 38, column: 25, scope: !7)
!36 = !DILocation(line: 38, column: 45, scope: !7)
!37 = !DILocation(line: 38, column: 4, scope: !7)
