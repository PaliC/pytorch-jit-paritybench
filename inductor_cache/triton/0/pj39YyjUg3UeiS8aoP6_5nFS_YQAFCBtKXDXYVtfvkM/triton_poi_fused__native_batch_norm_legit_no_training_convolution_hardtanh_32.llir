; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_convolution_hardtanh_32(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %10 = shl i32 %9, 10, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 508, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = or disjoint i32 %14, 2, !dbg !13
  %16 = or disjoint i32 %14, 512, !dbg !13
  %17 = or disjoint i32 %14, 514, !dbg !13
  %18 = icmp slt i32 %14, 112128, !dbg !14
  %19 = icmp slt i32 %16, 112128, !dbg !14
  %20 = srem i32 %14, 438, !dbg !15
  %21 = srem i32 %15, 438, !dbg !15
  %22 = srem i32 %16, 438, !dbg !15
  %23 = srem i32 %17, 438, !dbg !15
  %24 = sext i32 %14 to i64, !dbg !16
  %25 = getelementptr float, ptr addrspace(1) %0, i64 %24, !dbg !16
  %26 = sext i32 %16 to i64, !dbg !16
  %27 = getelementptr float, ptr addrspace(1) %0, i64 %26, !dbg !16
  %28 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %25, i1 %18) #3, !dbg !17
  %29 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %27, i1 %19) #3, !dbg !17
  %30 = sext i32 %20 to i64, !dbg !18
  %31 = getelementptr float, ptr addrspace(1) %1, i64 %30, !dbg !18
  %32 = sext i32 %21 to i64, !dbg !18
  %33 = getelementptr float, ptr addrspace(1) %1, i64 %32, !dbg !18
  %34 = sext i32 %22 to i64, !dbg !18
  %35 = getelementptr float, ptr addrspace(1) %1, i64 %34, !dbg !18
  %36 = sext i32 %23 to i64, !dbg !18
  %37 = getelementptr float, ptr addrspace(1) %1, i64 %36, !dbg !18
  %38 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %31, i1 %18) #3, !dbg !19
  %39 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %33, i1 %18) #3, !dbg !19
  %40 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %35, i1 %19) #3, !dbg !19
  %41 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %37, i1 %19) #3, !dbg !19
  %42 = getelementptr float, ptr addrspace(1) %2, i64 %30, !dbg !20
  %43 = getelementptr float, ptr addrspace(1) %2, i64 %32, !dbg !20
  %44 = getelementptr float, ptr addrspace(1) %2, i64 %34, !dbg !20
  %45 = getelementptr float, ptr addrspace(1) %2, i64 %36, !dbg !20
  %46 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %42, i1 %18) #3, !dbg !21
  %47 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %43, i1 %18) #3, !dbg !21
  %48 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %44, i1 %19) #3, !dbg !21
  %49 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %45, i1 %19) #3, !dbg !21
  %50 = getelementptr float, ptr addrspace(1) %3, i64 %30, !dbg !22
  %51 = getelementptr float, ptr addrspace(1) %3, i64 %32, !dbg !22
  %52 = getelementptr float, ptr addrspace(1) %3, i64 %34, !dbg !22
  %53 = getelementptr float, ptr addrspace(1) %3, i64 %36, !dbg !22
  %54 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %50, i1 %18) #3, !dbg !23
  %55 = extractvalue { i32, i32 } %54, 0, !dbg !23
  %56 = extractvalue { i32, i32 } %54, 1, !dbg !23
  %57 = bitcast i32 %55 to float, !dbg !23
  %58 = bitcast i32 %56 to float, !dbg !23
  %59 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %51, i1 %18) #3, !dbg !23
  %60 = extractvalue { i32, i32 } %59, 0, !dbg !23
  %61 = extractvalue { i32, i32 } %59, 1, !dbg !23
  %62 = bitcast i32 %60 to float, !dbg !23
  %63 = bitcast i32 %61 to float, !dbg !23
  %64 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %52, i1 %19) #3, !dbg !23
  %65 = extractvalue { i32, i32 } %64, 0, !dbg !23
  %66 = extractvalue { i32, i32 } %64, 1, !dbg !23
  %67 = bitcast i32 %65 to float, !dbg !23
  %68 = bitcast i32 %66 to float, !dbg !23
  %69 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %53, i1 %19) #3, !dbg !23
  %70 = extractvalue { i32, i32 } %69, 0, !dbg !23
  %71 = extractvalue { i32, i32 } %69, 1, !dbg !23
  %72 = bitcast i32 %70 to float, !dbg !23
  %73 = bitcast i32 %71 to float, !dbg !23
  %74 = getelementptr float, ptr addrspace(1) %4, i64 %30, !dbg !24
  %75 = getelementptr float, ptr addrspace(1) %4, i64 %32, !dbg !24
  %76 = getelementptr float, ptr addrspace(1) %4, i64 %34, !dbg !24
  %77 = getelementptr float, ptr addrspace(1) %4, i64 %36, !dbg !24
  %78 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %74, i1 %18) #3, !dbg !25
  %79 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %75, i1 %18) #3, !dbg !25
  %80 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %76, i1 %19) #3, !dbg !25
  %81 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %77, i1 %19) #3, !dbg !25
  %82 = getelementptr float, ptr addrspace(1) %5, i64 %30, !dbg !26
  %83 = getelementptr float, ptr addrspace(1) %5, i64 %32, !dbg !26
  %84 = getelementptr float, ptr addrspace(1) %5, i64 %34, !dbg !26
  %85 = getelementptr float, ptr addrspace(1) %5, i64 %36, !dbg !26
  %86 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %82, i1 %18) #3, !dbg !27
  %87 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %83, i1 %18) #3, !dbg !27
  %88 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %84, i1 %19) #3, !dbg !27
  %89 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %85, i1 %19) #3, !dbg !27
  %90 = fadd float %57, 0x3EE4F8B580000000, !dbg !28
  %91 = fadd float %58, 0x3EE4F8B580000000, !dbg !28
  %92 = fadd float %62, 0x3EE4F8B580000000, !dbg !28
  %93 = fadd float %63, 0x3EE4F8B580000000, !dbg !28
  %94 = fadd float %67, 0x3EE4F8B580000000, !dbg !28
  %95 = fadd float %68, 0x3EE4F8B580000000, !dbg !28
  %96 = fadd float %72, 0x3EE4F8B580000000, !dbg !28
  %97 = fadd float %73, 0x3EE4F8B580000000, !dbg !28
  %98 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i = icmp eq i32 %98, 0, !dbg !29
  %99 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i = icmp eq i32 %99, 0, !dbg !29
  br i1 %.not.i, label %105, label %100, !dbg !29

100:                                              ; preds = %8
  br i1 %.not1.i, label %103, label %101, !dbg !29

101:                                              ; preds = %100
  %102 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %90) #3, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

103:                                              ; preds = %100
  %104 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %90) #3, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

105:                                              ; preds = %8
  br i1 %.not1.i, label %108, label %106, !dbg !29

106:                                              ; preds = %105
  %107 = tail call float @llvm.nvvm.sqrt.rn.f(float %90) #3, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

108:                                              ; preds = %105
  %109 = tail call float @llvm.nvvm.sqrt.approx.f(float %90) #3, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

__nv_sqrtf.exit:                                  ; preds = %101, %103, %106, %108
  %.0.i = phi float [ %102, %101 ], [ %104, %103 ], [ %107, %106 ], [ %109, %108 ], !dbg !29
  %110 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i8 = icmp eq i32 %110, 0, !dbg !29
  %111 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i11 = icmp eq i32 %111, 0, !dbg !29
  br i1 %.not.i8, label %117, label %112, !dbg !29

112:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i11, label %115, label %113, !dbg !29

113:                                              ; preds = %112
  %114 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %91) #3, !dbg !29
  br label %__nv_sqrtf.exit12, !dbg !29

115:                                              ; preds = %112
  %116 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %91) #3, !dbg !29
  br label %__nv_sqrtf.exit12, !dbg !29

117:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i11, label %120, label %118, !dbg !29

118:                                              ; preds = %117
  %119 = tail call float @llvm.nvvm.sqrt.rn.f(float %91) #3, !dbg !29
  br label %__nv_sqrtf.exit12, !dbg !29

120:                                              ; preds = %117
  %121 = tail call float @llvm.nvvm.sqrt.approx.f(float %91) #3, !dbg !29
  br label %__nv_sqrtf.exit12, !dbg !29

__nv_sqrtf.exit12:                                ; preds = %113, %115, %118, %120
  %.0.i10 = phi float [ %114, %113 ], [ %116, %115 ], [ %119, %118 ], [ %121, %120 ], !dbg !29
  %122 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i13 = icmp eq i32 %122, 0, !dbg !29
  %123 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i16 = icmp eq i32 %123, 0, !dbg !29
  br i1 %.not.i13, label %129, label %124, !dbg !29

124:                                              ; preds = %__nv_sqrtf.exit12
  br i1 %.not1.i16, label %127, label %125, !dbg !29

125:                                              ; preds = %124
  %126 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %92) #3, !dbg !29
  br label %__nv_sqrtf.exit17, !dbg !29

127:                                              ; preds = %124
  %128 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %92) #3, !dbg !29
  br label %__nv_sqrtf.exit17, !dbg !29

129:                                              ; preds = %__nv_sqrtf.exit12
  br i1 %.not1.i16, label %132, label %130, !dbg !29

130:                                              ; preds = %129
  %131 = tail call float @llvm.nvvm.sqrt.rn.f(float %92) #3, !dbg !29
  br label %__nv_sqrtf.exit17, !dbg !29

132:                                              ; preds = %129
  %133 = tail call float @llvm.nvvm.sqrt.approx.f(float %92) #3, !dbg !29
  br label %__nv_sqrtf.exit17, !dbg !29

__nv_sqrtf.exit17:                                ; preds = %125, %127, %130, %132
  %.0.i15 = phi float [ %126, %125 ], [ %128, %127 ], [ %131, %130 ], [ %133, %132 ], !dbg !29
  %134 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i18 = icmp eq i32 %134, 0, !dbg !29
  %135 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i21 = icmp eq i32 %135, 0, !dbg !29
  br i1 %.not.i18, label %141, label %136, !dbg !29

136:                                              ; preds = %__nv_sqrtf.exit17
  br i1 %.not1.i21, label %139, label %137, !dbg !29

137:                                              ; preds = %136
  %138 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %93) #3, !dbg !29
  br label %__nv_sqrtf.exit22, !dbg !29

139:                                              ; preds = %136
  %140 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %93) #3, !dbg !29
  br label %__nv_sqrtf.exit22, !dbg !29

141:                                              ; preds = %__nv_sqrtf.exit17
  br i1 %.not1.i21, label %144, label %142, !dbg !29

142:                                              ; preds = %141
  %143 = tail call float @llvm.nvvm.sqrt.rn.f(float %93) #3, !dbg !29
  br label %__nv_sqrtf.exit22, !dbg !29

144:                                              ; preds = %141
  %145 = tail call float @llvm.nvvm.sqrt.approx.f(float %93) #3, !dbg !29
  br label %__nv_sqrtf.exit22, !dbg !29

__nv_sqrtf.exit22:                                ; preds = %137, %139, %142, %144
  %.0.i20 = phi float [ %138, %137 ], [ %140, %139 ], [ %143, %142 ], [ %145, %144 ], !dbg !29
  %146 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i23 = icmp eq i32 %146, 0, !dbg !29
  %147 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i26 = icmp eq i32 %147, 0, !dbg !29
  br i1 %.not.i23, label %153, label %148, !dbg !29

148:                                              ; preds = %__nv_sqrtf.exit22
  br i1 %.not1.i26, label %151, label %149, !dbg !29

149:                                              ; preds = %148
  %150 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %94) #3, !dbg !29
  br label %__nv_sqrtf.exit27, !dbg !29

151:                                              ; preds = %148
  %152 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %94) #3, !dbg !29
  br label %__nv_sqrtf.exit27, !dbg !29

153:                                              ; preds = %__nv_sqrtf.exit22
  br i1 %.not1.i26, label %156, label %154, !dbg !29

154:                                              ; preds = %153
  %155 = tail call float @llvm.nvvm.sqrt.rn.f(float %94) #3, !dbg !29
  br label %__nv_sqrtf.exit27, !dbg !29

156:                                              ; preds = %153
  %157 = tail call float @llvm.nvvm.sqrt.approx.f(float %94) #3, !dbg !29
  br label %__nv_sqrtf.exit27, !dbg !29

__nv_sqrtf.exit27:                                ; preds = %149, %151, %154, %156
  %.0.i25 = phi float [ %150, %149 ], [ %152, %151 ], [ %155, %154 ], [ %157, %156 ], !dbg !29
  %158 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i28 = icmp eq i32 %158, 0, !dbg !29
  %159 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i31 = icmp eq i32 %159, 0, !dbg !29
  br i1 %.not.i28, label %165, label %160, !dbg !29

160:                                              ; preds = %__nv_sqrtf.exit27
  br i1 %.not1.i31, label %163, label %161, !dbg !29

161:                                              ; preds = %160
  %162 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %95) #3, !dbg !29
  br label %__nv_sqrtf.exit32, !dbg !29

163:                                              ; preds = %160
  %164 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %95) #3, !dbg !29
  br label %__nv_sqrtf.exit32, !dbg !29

165:                                              ; preds = %__nv_sqrtf.exit27
  br i1 %.not1.i31, label %168, label %166, !dbg !29

166:                                              ; preds = %165
  %167 = tail call float @llvm.nvvm.sqrt.rn.f(float %95) #3, !dbg !29
  br label %__nv_sqrtf.exit32, !dbg !29

168:                                              ; preds = %165
  %169 = tail call float @llvm.nvvm.sqrt.approx.f(float %95) #3, !dbg !29
  br label %__nv_sqrtf.exit32, !dbg !29

__nv_sqrtf.exit32:                                ; preds = %161, %163, %166, %168
  %.0.i30 = phi float [ %162, %161 ], [ %164, %163 ], [ %167, %166 ], [ %169, %168 ], !dbg !29
  %170 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i33 = icmp eq i32 %170, 0, !dbg !29
  %171 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i36 = icmp eq i32 %171, 0, !dbg !29
  br i1 %.not.i33, label %177, label %172, !dbg !29

172:                                              ; preds = %__nv_sqrtf.exit32
  br i1 %.not1.i36, label %175, label %173, !dbg !29

173:                                              ; preds = %172
  %174 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %96) #3, !dbg !29
  br label %__nv_sqrtf.exit37, !dbg !29

175:                                              ; preds = %172
  %176 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %96) #3, !dbg !29
  br label %__nv_sqrtf.exit37, !dbg !29

177:                                              ; preds = %__nv_sqrtf.exit32
  br i1 %.not1.i36, label %180, label %178, !dbg !29

178:                                              ; preds = %177
  %179 = tail call float @llvm.nvvm.sqrt.rn.f(float %96) #3, !dbg !29
  br label %__nv_sqrtf.exit37, !dbg !29

180:                                              ; preds = %177
  %181 = tail call float @llvm.nvvm.sqrt.approx.f(float %96) #3, !dbg !29
  br label %__nv_sqrtf.exit37, !dbg !29

__nv_sqrtf.exit37:                                ; preds = %173, %175, %178, %180
  %.0.i35 = phi float [ %174, %173 ], [ %176, %175 ], [ %179, %178 ], [ %181, %180 ], !dbg !29
  %182 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i38 = icmp eq i32 %182, 0, !dbg !29
  %183 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i41 = icmp eq i32 %183, 0, !dbg !29
  br i1 %.not.i38, label %189, label %184, !dbg !29

184:                                              ; preds = %__nv_sqrtf.exit37
  br i1 %.not1.i41, label %187, label %185, !dbg !29

185:                                              ; preds = %184
  %186 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %97) #3, !dbg !29
  br label %__nv_sqrtf.exit42, !dbg !29

187:                                              ; preds = %184
  %188 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %97) #3, !dbg !29
  br label %__nv_sqrtf.exit42, !dbg !29

189:                                              ; preds = %__nv_sqrtf.exit37
  br i1 %.not1.i41, label %192, label %190, !dbg !29

190:                                              ; preds = %189
  %191 = tail call float @llvm.nvvm.sqrt.rn.f(float %97) #3, !dbg !29
  br label %__nv_sqrtf.exit42, !dbg !29

192:                                              ; preds = %189
  %193 = tail call float @llvm.nvvm.sqrt.approx.f(float %97) #3, !dbg !29
  br label %__nv_sqrtf.exit42, !dbg !29

__nv_sqrtf.exit42:                                ; preds = %185, %187, %190, %192
  %.0.i40 = phi float [ %186, %185 ], [ %188, %187 ], [ %191, %190 ], [ %193, %192 ], !dbg !29
  %194 = extractvalue { i32, i32, i32, i32 } %29, 3, !dbg !17
  %195 = extractvalue { i32, i32 } %41, 1, !dbg !19
  %196 = extractvalue { i32, i32 } %49, 1, !dbg !21
  %197 = extractvalue { i32, i32, i32, i32 } %29, 2, !dbg !17
  %198 = extractvalue { i32, i32 } %41, 0, !dbg !19
  %199 = extractvalue { i32, i32 } %49, 0, !dbg !21
  %200 = extractvalue { i32, i32, i32, i32 } %29, 1, !dbg !17
  %201 = extractvalue { i32, i32 } %40, 1, !dbg !19
  %202 = extractvalue { i32, i32 } %48, 1, !dbg !21
  %203 = extractvalue { i32, i32, i32, i32 } %29, 0, !dbg !17
  %204 = extractvalue { i32, i32 } %40, 0, !dbg !19
  %205 = extractvalue { i32, i32 } %48, 0, !dbg !21
  %206 = extractvalue { i32, i32, i32, i32 } %28, 3, !dbg !17
  %207 = extractvalue { i32, i32 } %39, 1, !dbg !19
  %208 = extractvalue { i32, i32 } %47, 1, !dbg !21
  %209 = extractvalue { i32, i32, i32, i32 } %28, 2, !dbg !17
  %210 = extractvalue { i32, i32 } %39, 0, !dbg !19
  %211 = extractvalue { i32, i32 } %47, 0, !dbg !21
  %212 = extractvalue { i32, i32, i32, i32 } %28, 1, !dbg !17
  %213 = extractvalue { i32, i32 } %38, 1, !dbg !19
  %214 = extractvalue { i32, i32 } %46, 1, !dbg !21
  %215 = extractvalue { i32, i32, i32, i32 } %28, 0, !dbg !17
  %216 = extractvalue { i32, i32 } %38, 0, !dbg !19
  %217 = extractvalue { i32, i32 } %46, 0, !dbg !21
  %218 = extractvalue { i32, i32 } %89, 1, !dbg !27
  %219 = extractvalue { i32, i32 } %89, 0, !dbg !27
  %220 = extractvalue { i32, i32 } %88, 1, !dbg !27
  %221 = extractvalue { i32, i32 } %88, 0, !dbg !27
  %222 = extractvalue { i32, i32 } %87, 1, !dbg !27
  %223 = extractvalue { i32, i32 } %87, 0, !dbg !27
  %224 = extractvalue { i32, i32 } %86, 1, !dbg !27
  %225 = extractvalue { i32, i32 } %86, 0, !dbg !27
  %226 = extractvalue { i32, i32 } %81, 1, !dbg !25
  %227 = extractvalue { i32, i32 } %81, 0, !dbg !25
  %228 = extractvalue { i32, i32 } %80, 1, !dbg !25
  %229 = extractvalue { i32, i32 } %80, 0, !dbg !25
  %230 = extractvalue { i32, i32 } %79, 1, !dbg !25
  %231 = extractvalue { i32, i32 } %79, 0, !dbg !25
  %232 = extractvalue { i32, i32 } %78, 1, !dbg !25
  %233 = extractvalue { i32, i32 } %78, 0, !dbg !25
  %234 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !30
  %235 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i10) #3, !dbg !30
  %236 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i15) #3, !dbg !30
  %237 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i20) #3, !dbg !30
  %238 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i25) #3, !dbg !30
  %239 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i30) #3, !dbg !30
  %240 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i35) #3, !dbg !30
  %241 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i40) #3, !dbg !30
  %242 = insertelement <8 x i32> poison, i32 %194, i64 0, !dbg !17
  %243 = insertelement <8 x i32> %242, i32 %197, i64 1, !dbg !17
  %244 = insertelement <8 x i32> %243, i32 %200, i64 2, !dbg !17
  %245 = insertelement <8 x i32> %244, i32 %203, i64 3, !dbg !17
  %246 = insertelement <8 x i32> %245, i32 %206, i64 4, !dbg !17
  %247 = insertelement <8 x i32> %246, i32 %209, i64 5, !dbg !17
  %248 = insertelement <8 x i32> %247, i32 %212, i64 6, !dbg !17
  %249 = insertelement <8 x i32> %248, i32 %215, i64 7, !dbg !17
  %250 = bitcast <8 x i32> %249 to <8 x float>, !dbg !17
  %251 = insertelement <8 x i32> poison, i32 %195, i64 0, !dbg !19
  %252 = insertelement <8 x i32> %251, i32 %198, i64 1, !dbg !19
  %253 = insertelement <8 x i32> %252, i32 %201, i64 2, !dbg !19
  %254 = insertelement <8 x i32> %253, i32 %204, i64 3, !dbg !19
  %255 = insertelement <8 x i32> %254, i32 %207, i64 4, !dbg !19
  %256 = insertelement <8 x i32> %255, i32 %210, i64 5, !dbg !19
  %257 = insertelement <8 x i32> %256, i32 %213, i64 6, !dbg !19
  %258 = insertelement <8 x i32> %257, i32 %216, i64 7, !dbg !19
  %259 = bitcast <8 x i32> %258 to <8 x float>, !dbg !19
  %260 = fadd <8 x float> %250, %259, !dbg !31
  %261 = insertelement <8 x i32> poison, i32 %196, i64 0, !dbg !21
  %262 = insertelement <8 x i32> %261, i32 %199, i64 1, !dbg !21
  %263 = insertelement <8 x i32> %262, i32 %202, i64 2, !dbg !21
  %264 = insertelement <8 x i32> %263, i32 %205, i64 3, !dbg !21
  %265 = insertelement <8 x i32> %264, i32 %208, i64 4, !dbg !21
  %266 = insertelement <8 x i32> %265, i32 %211, i64 5, !dbg !21
  %267 = insertelement <8 x i32> %266, i32 %214, i64 6, !dbg !21
  %268 = insertelement <8 x i32> %267, i32 %217, i64 7, !dbg !21
  %269 = bitcast <8 x i32> %268 to <8 x float>, !dbg !21
  %270 = fsub <8 x float> %260, %269, !dbg !32
  %271 = insertelement <8 x i32> poison, i32 %218, i64 0, !dbg !27
  %272 = insertelement <8 x i32> %271, i32 %219, i64 1, !dbg !27
  %273 = insertelement <8 x i32> %272, i32 %220, i64 2, !dbg !27
  %274 = insertelement <8 x i32> %273, i32 %221, i64 3, !dbg !27
  %275 = insertelement <8 x i32> %274, i32 %222, i64 4, !dbg !27
  %276 = insertelement <8 x i32> %275, i32 %223, i64 5, !dbg !27
  %277 = insertelement <8 x i32> %276, i32 %224, i64 6, !dbg !27
  %278 = insertelement <8 x i32> %277, i32 %225, i64 7, !dbg !27
  %279 = bitcast <8 x i32> %278 to <8 x float>, !dbg !27
  %280 = insertelement <8 x i32> poison, i32 %226, i64 0, !dbg !25
  %281 = insertelement <8 x i32> %280, i32 %227, i64 1, !dbg !25
  %282 = insertelement <8 x i32> %281, i32 %228, i64 2, !dbg !25
  %283 = insertelement <8 x i32> %282, i32 %229, i64 3, !dbg !25
  %284 = insertelement <8 x i32> %283, i32 %230, i64 4, !dbg !25
  %285 = insertelement <8 x i32> %284, i32 %231, i64 5, !dbg !25
  %286 = insertelement <8 x i32> %285, i32 %232, i64 6, !dbg !25
  %287 = insertelement <8 x i32> %286, i32 %233, i64 7, !dbg !25
  %288 = bitcast <8 x i32> %287 to <8 x float>, !dbg !25
  %289 = insertelement <8 x float> poison, float %241, i64 0, !dbg !33
  %290 = insertelement <8 x float> %289, float %240, i64 1, !dbg !33
  %291 = insertelement <8 x float> %290, float %239, i64 2, !dbg !33
  %292 = insertelement <8 x float> %291, float %238, i64 3, !dbg !33
  %293 = insertelement <8 x float> %292, float %237, i64 4, !dbg !33
  %294 = insertelement <8 x float> %293, float %236, i64 5, !dbg !33
  %295 = insertelement <8 x float> %294, float %235, i64 6, !dbg !33
  %296 = insertelement <8 x float> %295, float %234, i64 7, !dbg !33
  %297 = fmul <8 x float> %270, %296, !dbg !33
  %298 = fmul <8 x float> %297, %288, !dbg !34
  %299 = fadd <8 x float> %298, %279, !dbg !35
  %300 = fcmp ole <8 x float> %299, zeroinitializer, !dbg !36
  %301 = select <8 x i1> %300, <8 x float> zeroinitializer, <8 x float> %299, !dbg !36
  %302 = fcmp olt <8 x float> %301, splat (float 6.000000e+00), !dbg !40
  %303 = extractelement <8 x float> %301, i64 7, !dbg !42
  %304 = fcmp uno float %303, 0.000000e+00, !dbg !43
  %305 = extractelement <8 x float> %301, i64 6, !dbg !42
  %306 = fcmp uno float %305, 0.000000e+00, !dbg !43
  %307 = extractelement <8 x float> %301, i64 5, !dbg !42
  %308 = fcmp uno float %307, 0.000000e+00, !dbg !43
  %309 = extractelement <8 x float> %301, i64 4, !dbg !42
  %310 = fcmp uno float %309, 0.000000e+00, !dbg !43
  %311 = extractelement <8 x float> %301, i64 3, !dbg !42
  %312 = fcmp uno float %311, 0.000000e+00, !dbg !43
  %313 = extractelement <8 x float> %301, i64 2, !dbg !42
  %314 = fcmp uno float %313, 0.000000e+00, !dbg !43
  %315 = extractelement <8 x float> %301, i64 1, !dbg !42
  %316 = fcmp uno float %315, 0.000000e+00, !dbg !43
  %317 = extractelement <8 x float> %301, i64 0, !dbg !42
  %318 = fcmp uno float %317, 0.000000e+00, !dbg !43
  %319 = extractelement <8 x i1> %302, i64 7, !dbg !44
  %320 = or i1 %319, %304, !dbg !44
  %321 = extractelement <8 x i1> %302, i64 6, !dbg !44
  %322 = or i1 %321, %306, !dbg !44
  %323 = extractelement <8 x i1> %302, i64 5, !dbg !44
  %324 = or i1 %323, %308, !dbg !44
  %325 = extractelement <8 x i1> %302, i64 4, !dbg !44
  %326 = or i1 %325, %310, !dbg !44
  %327 = extractelement <8 x i1> %302, i64 3, !dbg !44
  %328 = or i1 %327, %312, !dbg !44
  %329 = extractelement <8 x i1> %302, i64 2, !dbg !44
  %330 = or i1 %329, %314, !dbg !44
  %331 = extractelement <8 x i1> %302, i64 1, !dbg !44
  %332 = or i1 %331, %316, !dbg !44
  %333 = extractelement <8 x i1> %302, i64 0, !dbg !44
  %334 = or i1 %333, %318, !dbg !44
  %bc = bitcast <8 x float> %260 to <8 x i32>, !dbg !45
  %335 = extractelement <8 x i32> %bc, i64 7, !dbg !45
  %bc43 = bitcast <8 x float> %260 to <8 x i32>, !dbg !45
  %336 = extractelement <8 x i32> %bc43, i64 6, !dbg !45
  %bc44 = bitcast <8 x float> %260 to <8 x i32>, !dbg !45
  %337 = extractelement <8 x i32> %bc44, i64 5, !dbg !45
  %bc45 = bitcast <8 x float> %260 to <8 x i32>, !dbg !45
  %338 = extractelement <8 x i32> %bc45, i64 4, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %335, i32 %336, i32 %337, i32 %338, ptr addrspace(1) %25, i1 %18) #3, !dbg !45
  %bc46 = bitcast <8 x float> %260 to <8 x i32>, !dbg !45
  %339 = extractelement <8 x i32> %bc46, i64 3, !dbg !45
  %bc47 = bitcast <8 x float> %260 to <8 x i32>, !dbg !45
  %340 = extractelement <8 x i32> %bc47, i64 2, !dbg !45
  %bc48 = bitcast <8 x float> %260 to <8 x i32>, !dbg !45
  %341 = extractelement <8 x i32> %bc48, i64 1, !dbg !45
  %bc49 = bitcast <8 x float> %260 to <8 x i32>, !dbg !45
  %342 = extractelement <8 x i32> %bc49, i64 0, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %339, i32 %340, i32 %341, i32 %342, ptr addrspace(1) %27, i1 %19) #3, !dbg !45
  %343 = getelementptr float, ptr addrspace(1) %6, i64 %24, !dbg !46
  %344 = getelementptr float, ptr addrspace(1) %6, i64 %26, !dbg !46
  %345 = bitcast float %303 to i32, !dbg !42
  %346 = select i1 %320, i32 %345, i32 1086324736, !dbg !47
  %347 = bitcast float %305 to i32, !dbg !42
  %348 = select i1 %322, i32 %347, i32 1086324736, !dbg !47
  %349 = bitcast float %307 to i32, !dbg !42
  %350 = select i1 %324, i32 %349, i32 1086324736, !dbg !47
  %351 = bitcast float %309 to i32, !dbg !42
  %352 = select i1 %326, i32 %351, i32 1086324736, !dbg !47
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %346, i32 %348, i32 %350, i32 %352, ptr addrspace(1) %343, i1 %18) #3, !dbg !42
  %353 = bitcast float %311 to i32, !dbg !42
  %354 = select i1 %328, i32 %353, i32 1086324736, !dbg !47
  %355 = bitcast float %313 to i32, !dbg !42
  %356 = select i1 %330, i32 %355, i32 1086324736, !dbg !47
  %357 = bitcast float %315 to i32, !dbg !42
  %358 = select i1 %332, i32 %357, i32 1086324736, !dbg !47
  %359 = bitcast float %317 to i32, !dbg !42
  %360 = select i1 %334, i32 %359, i32 1086324736, !dbg !47
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %354, i32 %356, i32 %358, i32 %360, ptr addrspace(1) %344, i1 %19) #3, !dbg !42
  ret void, !dbg !48
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cjb2exemahjuizl4s6lhiufgv56nb45hwuxe4ngckzc5foefb4tn.py", directory: "inductor_cache/jb")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_convolution_hardtanh_32, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_convolution_hardtanh_32, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_convolution_hardtanh_32", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_convolution_hardtanh_32", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 34, scope: !7)
!17 = !DILocation(line: 26, column: 39, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 35, scope: !7)
!20 = !DILocation(line: 28, column: 30, scope: !7)
!21 = !DILocation(line: 28, column: 35, scope: !7)
!22 = !DILocation(line: 29, column: 30, scope: !7)
!23 = !DILocation(line: 29, column: 35, scope: !7)
!24 = !DILocation(line: 30, column: 31, scope: !7)
!25 = !DILocation(line: 30, column: 36, scope: !7)
!26 = !DILocation(line: 31, column: 31, scope: !7)
!27 = !DILocation(line: 31, column: 36, scope: !7)
!28 = !DILocation(line: 35, column: 18, scope: !7)
!29 = !DILocation(line: 36, column: 26, scope: !7)
!30 = !DILocation(line: 38, column: 19, scope: !7)
!31 = !DILocation(line: 32, column: 18, scope: !7)
!32 = !DILocation(line: 33, column: 18, scope: !7)
!33 = !DILocation(line: 41, column: 19, scope: !7)
!34 = !DILocation(line: 42, column: 20, scope: !7)
!35 = !DILocation(line: 43, column: 20, scope: !7)
!36 = !DILocation(line: 121, column: 29, scope: !37, inlinedAt: !39)
!37 = distinct !DILexicalBlockFile(scope: !7, file: !38, discriminator: 0)
!38 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!39 = !DILocation(line: 45, column: 42, scope: !7)
!40 = !DILocation(line: 110, column: 15, scope: !37, inlinedAt: !41)
!41 = !DILocation(line: 47, column: 42, scope: !7)
!42 = !DILocation(line: 49, column: 37, scope: !7)
!43 = !DILocation(line: 112, column: 21, scope: !37, inlinedAt: !41)
!44 = !DILocation(line: 112, column: 16, scope: !37, inlinedAt: !41)
!45 = !DILocation(line: 48, column: 39, scope: !7)
!46 = !DILocation(line: 49, column: 25, scope: !7)
!47 = !DILocation(line: 113, column: 29, scope: !37, inlinedAt: !41)
!48 = !DILocation(line: 49, column: 4, scope: !7)
