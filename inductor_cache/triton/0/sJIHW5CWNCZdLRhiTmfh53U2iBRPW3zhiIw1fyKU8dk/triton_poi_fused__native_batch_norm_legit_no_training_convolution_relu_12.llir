; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_convolution_relu_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %11 = shl i32 %10, 8, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = shl i32 %12, 2, !dbg !12
  %14 = and i32 %13, 252, !dbg !12
  %15 = and i32 %12, 255, !dbg !12
  %16 = or disjoint i32 %11, %14, !dbg !13
  %17 = or disjoint i32 %11, %15, !dbg !13
  %18 = icmp slt i32 %16, 512, !dbg !14
  %19 = icmp slt i32 %17, 512, !dbg !14
  %20 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %21 = shl i32 %20, 4, !dbg !16
  %.lobit4 = lshr i32 %12, 6, !dbg !17
  %22 = and i32 %.lobit4, 3, !dbg !17
  %23 = or disjoint i32 %21, %22, !dbg !18
  %24 = or disjoint i32 %23, 4, !dbg !18
  %25 = or disjoint i32 %23, 8, !dbg !18
  %26 = or disjoint i32 %23, 12, !dbg !18
  %27 = icmp slt i32 %23, 16, !dbg !19
  %28 = icmp slt i32 %24, 16, !dbg !19
  %29 = icmp slt i32 %25, 16, !dbg !19
  %30 = icmp slt i32 %26, 16, !dbg !19
  %.frozen = freeze i32 %16, !dbg !20
  %31 = sdiv i32 %.frozen, 128, !dbg !20
  %32 = mul i32 %31, 128, !dbg !21
  %.decomposed = sub i32 %.frozen, %32, !dbg !21
  %33 = srem i32 %17, 128, !dbg !21
  %34 = shl i32 %23, 7, !dbg !22
  %35 = shl i32 %24, 7, !dbg !22
  %36 = shl i32 %25, 7, !dbg !22
  %37 = shl i32 %26, 7, !dbg !22
  %38 = shl i32 %31, 11, !dbg !23
  %39 = add i32 %38, %.decomposed, !dbg !24
  %40 = add i32 %39, %34, !dbg !25
  %41 = add i32 %39, %35, !dbg !25
  %42 = add i32 %39, %36, !dbg !25
  %43 = add i32 %39, %37, !dbg !25
  %44 = sext i32 %40 to i64, !dbg !26
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !26
  %46 = sext i32 %41 to i64, !dbg !26
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !26
  %48 = sext i32 %42 to i64, !dbg !26
  %49 = getelementptr float, ptr addrspace(1) %0, i64 %48, !dbg !26
  %50 = sext i32 %43 to i64, !dbg !26
  %51 = getelementptr float, ptr addrspace(1) %0, i64 %50, !dbg !26
  %52 = and i1 %18, %27, !dbg !27
  %53 = and i1 %28, %18, !dbg !27
  %54 = and i1 %29, %18, !dbg !27
  %55 = and i1 %30, %18, !dbg !27
  %56 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %45, i1 %52) #4, !dbg !28
  %57 = extractvalue { i32, i32, i32, i32 } %56, 0, !dbg !28
  %58 = extractvalue { i32, i32, i32, i32 } %56, 1, !dbg !28
  %59 = extractvalue { i32, i32, i32, i32 } %56, 2, !dbg !28
  %60 = extractvalue { i32, i32, i32, i32 } %56, 3, !dbg !28
  %61 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %47, i1 %53) #4, !dbg !28
  %62 = extractvalue { i32, i32, i32, i32 } %61, 0, !dbg !28
  %63 = extractvalue { i32, i32, i32, i32 } %61, 1, !dbg !28
  %64 = extractvalue { i32, i32, i32, i32 } %61, 2, !dbg !28
  %65 = extractvalue { i32, i32, i32, i32 } %61, 3, !dbg !28
  %66 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %49, i1 %54) #4, !dbg !28
  %67 = extractvalue { i32, i32, i32, i32 } %66, 0, !dbg !28
  %68 = extractvalue { i32, i32, i32, i32 } %66, 1, !dbg !28
  %69 = extractvalue { i32, i32, i32, i32 } %66, 2, !dbg !28
  %70 = extractvalue { i32, i32, i32, i32 } %66, 3, !dbg !28
  %71 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %51, i1 %55) #4, !dbg !28
  %72 = extractvalue { i32, i32, i32, i32 } %71, 0, !dbg !28
  %73 = extractvalue { i32, i32, i32, i32 } %71, 1, !dbg !28
  %74 = extractvalue { i32, i32, i32, i32 } %71, 2, !dbg !28
  %75 = extractvalue { i32, i32, i32, i32 } %71, 3, !dbg !28
  %76 = and i32 %13, 1020, !dbg !28
  %77 = lshr i32 %13, 6, !dbg !28
  %78 = and i32 %77, 12, !dbg !28
  %79 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %78, !dbg !28
  %80 = getelementptr inbounds float, ptr addrspace(3) %79, i32 %76, !dbg !28
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %80, i32 %57, i32 %58, i32 %59, i32 %60, i1 true) #4, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %81 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !28
  %82 = load float, ptr addrspace(3) %81, align 4, !dbg !28
  %83 = getelementptr inbounds i8, ptr addrspace(3) %81, i32 1040, !dbg !28
  %84 = load float, ptr addrspace(3) %83, align 4, !dbg !28
  %85 = getelementptr inbounds i8, ptr addrspace(3) %81, i32 2080, !dbg !28
  %86 = load float, ptr addrspace(3) %85, align 4, !dbg !28
  %87 = getelementptr inbounds i8, ptr addrspace(3) %81, i32 3120, !dbg !28
  %88 = load float, ptr addrspace(3) %87, align 4, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %80, i32 %62, i32 %63, i32 %64, i32 %65, i1 true) #4, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %89 = load float, ptr addrspace(3) %81, align 4, !dbg !28
  %90 = load float, ptr addrspace(3) %83, align 4, !dbg !28
  %91 = load float, ptr addrspace(3) %85, align 4, !dbg !28
  %92 = load float, ptr addrspace(3) %87, align 4, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %80, i32 %67, i32 %68, i32 %69, i32 %70, i1 true) #4, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %93 = load float, ptr addrspace(3) %81, align 4, !dbg !28
  %94 = load float, ptr addrspace(3) %83, align 4, !dbg !28
  %95 = load float, ptr addrspace(3) %85, align 4, !dbg !28
  %96 = load float, ptr addrspace(3) %87, align 4, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %80, i32 %72, i32 %73, i32 %74, i32 %75, i1 true) #4, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %97 = load float, ptr addrspace(3) %81, align 4, !dbg !28
  %98 = load float, ptr addrspace(3) %83, align 4, !dbg !28
  %99 = load float, ptr addrspace(3) %85, align 4, !dbg !28
  %100 = load float, ptr addrspace(3) %87, align 4, !dbg !28
  %101 = sext i32 %33 to i64, !dbg !29
  %102 = getelementptr float, ptr addrspace(1) %1, i64 %101, !dbg !29
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %102, i1 %19) #4, !dbg !30
  %104 = getelementptr float, ptr addrspace(1) %2, i64 %101, !dbg !31
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %104, i1 %19) #4, !dbg !32
  %106 = bitcast i32 %105 to float, !dbg !32
  %107 = getelementptr float, ptr addrspace(1) %3, i64 %101, !dbg !33
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %107, i1 %19) #4, !dbg !34
  %109 = getelementptr float, ptr addrspace(1) %4, i64 %101, !dbg !35
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %109, i1 %19) #4, !dbg !36
  %111 = fadd float %106, 0x3EE4F8B580000000, !dbg !37
  %112 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i = icmp eq i32 %112, 0, !dbg !38
  %113 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !38
  %.not1.i = icmp eq i32 %113, 0, !dbg !38
  br i1 %.not.i, label %119, label %114, !dbg !38

114:                                              ; preds = %9
  br i1 %.not1.i, label %117, label %115, !dbg !38

115:                                              ; preds = %114
  %116 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %111) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

117:                                              ; preds = %114
  %118 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %111) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

119:                                              ; preds = %9
  br i1 %.not1.i, label %122, label %120, !dbg !38

120:                                              ; preds = %119
  %121 = tail call float @llvm.nvvm.sqrt.rn.f(float %111) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

122:                                              ; preds = %119
  %123 = tail call float @llvm.nvvm.sqrt.approx.f(float %111) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

__nv_sqrtf.exit:                                  ; preds = %115, %117, %120, %122
  %.0.i = phi float [ %116, %115 ], [ %118, %117 ], [ %121, %120 ], [ %123, %122 ], !dbg !38
  %124 = and i32 %13, 12, !dbg !12
  %125 = or disjoint i32 %21, %124, !dbg !18
  %126 = icmp slt i32 %125, 16, !dbg !19
  %127 = lshr i32 %12, 2, !dbg !12
  %128 = and i32 %127, 63, !dbg !12
  %129 = or disjoint i32 %128, %11, !dbg !13
  %130 = or disjoint i32 %129, 192, !dbg !13
  %131 = icmp slt i32 %130, 512, !dbg !14
  %132 = and i1 %131, %126, !dbg !27
  %133 = or disjoint i32 %129, 128, !dbg !13
  %134 = icmp slt i32 %133, 512, !dbg !14
  %135 = and i1 %134, %126, !dbg !27
  %136 = or disjoint i32 %129, 64, !dbg !13
  %137 = icmp slt i32 %136, 512, !dbg !14
  %138 = and i1 %137, %126, !dbg !27
  %139 = icmp slt i32 %129, 512, !dbg !14
  %140 = and i1 %139, %126, !dbg !27
  %141 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !39
  %142 = insertelement <16 x float> poison, float %100, i64 0, !dbg !40
  %143 = insertelement <16 x float> %142, float %99, i64 1, !dbg !40
  %144 = insertelement <16 x float> %143, float %98, i64 2, !dbg !40
  %145 = insertelement <16 x float> %144, float %97, i64 3, !dbg !40
  %146 = insertelement <16 x float> %145, float %96, i64 4, !dbg !40
  %147 = insertelement <16 x float> %146, float %95, i64 5, !dbg !40
  %148 = insertelement <16 x float> %147, float %94, i64 6, !dbg !40
  %149 = insertelement <16 x float> %148, float %93, i64 7, !dbg !40
  %150 = insertelement <16 x float> %149, float %92, i64 8, !dbg !40
  %151 = insertelement <16 x float> %150, float %91, i64 9, !dbg !40
  %152 = insertelement <16 x float> %151, float %90, i64 10, !dbg !40
  %153 = insertelement <16 x float> %152, float %89, i64 11, !dbg !40
  %154 = insertelement <16 x float> %153, float %88, i64 12, !dbg !40
  %155 = insertelement <16 x float> %154, float %86, i64 13, !dbg !40
  %156 = insertelement <16 x float> %155, float %84, i64 14, !dbg !40
  %157 = insertelement <16 x float> %156, float %82, i64 15, !dbg !40
  %158 = insertelement <16 x i32> poison, i32 %103, i64 0, !dbg !40
  %159 = bitcast <16 x i32> %158 to <16 x float>, !dbg !40
  %160 = shufflevector <16 x float> %159, <16 x float> poison, <16 x i32> zeroinitializer, !dbg !40
  %161 = fsub <16 x float> %157, %160, !dbg !40
  %162 = insertelement <16 x float> poison, float %141, i64 0, !dbg !41
  %163 = shufflevector <16 x float> %162, <16 x float> poison, <16 x i32> zeroinitializer, !dbg !41
  %164 = fmul <16 x float> %161, %163, !dbg !41
  %165 = insertelement <16 x i32> poison, i32 %108, i64 0, !dbg !42
  %166 = bitcast <16 x i32> %165 to <16 x float>, !dbg !42
  %167 = shufflevector <16 x float> %166, <16 x float> poison, <16 x i32> zeroinitializer, !dbg !42
  %168 = fmul <16 x float> %164, %167, !dbg !42
  %169 = insertelement <16 x i32> poison, i32 %110, i64 0, !dbg !43
  %170 = bitcast <16 x i32> %169 to <16 x float>, !dbg !43
  %171 = shufflevector <16 x float> %170, <16 x float> poison, <16 x i32> zeroinitializer, !dbg !43
  %172 = fadd <16 x float> %168, %171, !dbg !43
  %173 = fcmp olt <16 x float> %172, zeroinitializer, !dbg !44
  %174 = extractelement <16 x i1> %173, i64 15, !dbg !48
  %175 = extractelement <16 x float> %172, i64 15, !dbg !48
  %176 = select i1 %174, float 0.000000e+00, float %175, !dbg !48
  %177 = extractelement <16 x i1> %173, i64 14, !dbg !48
  %178 = extractelement <16 x float> %172, i64 14, !dbg !48
  %179 = select i1 %177, float 0.000000e+00, float %178, !dbg !48
  %180 = extractelement <16 x i1> %173, i64 13, !dbg !48
  %181 = extractelement <16 x float> %172, i64 13, !dbg !48
  %182 = select i1 %180, float 0.000000e+00, float %181, !dbg !48
  %183 = extractelement <16 x i1> %173, i64 12, !dbg !48
  %184 = extractelement <16 x float> %172, i64 12, !dbg !48
  %185 = select i1 %183, float 0.000000e+00, float %184, !dbg !48
  %186 = extractelement <16 x i1> %173, i64 11, !dbg !48
  %187 = extractelement <16 x float> %172, i64 11, !dbg !48
  %188 = select i1 %186, float 0.000000e+00, float %187, !dbg !48
  %189 = extractelement <16 x i1> %173, i64 10, !dbg !48
  %190 = extractelement <16 x float> %172, i64 10, !dbg !48
  %191 = select i1 %189, float 0.000000e+00, float %190, !dbg !48
  %192 = extractelement <16 x i1> %173, i64 9, !dbg !48
  %193 = extractelement <16 x float> %172, i64 9, !dbg !48
  %194 = select i1 %192, float 0.000000e+00, float %193, !dbg !48
  %195 = extractelement <16 x i1> %173, i64 8, !dbg !48
  %196 = extractelement <16 x float> %172, i64 8, !dbg !48
  %197 = select i1 %195, float 0.000000e+00, float %196, !dbg !48
  %198 = extractelement <16 x i1> %173, i64 7, !dbg !48
  %199 = extractelement <16 x float> %172, i64 7, !dbg !48
  %200 = select i1 %198, float 0.000000e+00, float %199, !dbg !48
  %201 = extractelement <16 x i1> %173, i64 6, !dbg !48
  %202 = extractelement <16 x float> %172, i64 6, !dbg !48
  %203 = select i1 %201, float 0.000000e+00, float %202, !dbg !48
  %204 = extractelement <16 x i1> %173, i64 5, !dbg !48
  %205 = extractelement <16 x float> %172, i64 5, !dbg !48
  %206 = select i1 %204, float 0.000000e+00, float %205, !dbg !48
  %207 = extractelement <16 x i1> %173, i64 4, !dbg !48
  %208 = extractelement <16 x float> %172, i64 4, !dbg !48
  %209 = select i1 %207, float 0.000000e+00, float %208, !dbg !48
  %210 = extractelement <16 x i1> %173, i64 3, !dbg !48
  %211 = extractelement <16 x float> %172, i64 3, !dbg !48
  %212 = select i1 %210, float 0.000000e+00, float %211, !dbg !48
  %213 = extractelement <16 x i1> %173, i64 2, !dbg !48
  %214 = extractelement <16 x float> %172, i64 2, !dbg !48
  %215 = select i1 %213, float 0.000000e+00, float %214, !dbg !48
  %216 = extractelement <16 x i1> %173, i64 1, !dbg !48
  %217 = extractelement <16 x float> %172, i64 1, !dbg !48
  %218 = select i1 %216, float 0.000000e+00, float %217, !dbg !48
  %219 = extractelement <16 x i1> %173, i64 0, !dbg !48
  %220 = extractelement <16 x float> %172, i64 0, !dbg !48
  %221 = select i1 %219, float 0.000000e+00, float %220, !dbg !48
  %222 = shl i32 %129, 4, !dbg !49
  %223 = shl i32 %136, 4, !dbg !49
  %224 = shl i32 %133, 4, !dbg !49
  %225 = shl i32 %130, 4, !dbg !49
  %226 = add i32 %125, %222, !dbg !50
  %227 = add i32 %125, %223, !dbg !50
  %228 = add i32 %125, %224, !dbg !50
  %229 = add i32 %125, %225, !dbg !50
  %230 = sext i32 %226 to i64, !dbg !51
  %231 = getelementptr float, ptr addrspace(1) %5, i64 %230, !dbg !51
  %232 = sext i32 %227 to i64, !dbg !51
  %233 = getelementptr float, ptr addrspace(1) %5, i64 %232, !dbg !51
  %234 = sext i32 %228 to i64, !dbg !51
  %235 = getelementptr float, ptr addrspace(1) %5, i64 %234, !dbg !51
  %236 = sext i32 %229 to i64, !dbg !51
  %237 = getelementptr float, ptr addrspace(1) %5, i64 %236, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %238 = shl i32 %12, 4, !dbg !52
  %239 = and i32 %238, 4080, !dbg !52
  %240 = lshr exact i32 %239, 2, !dbg !52
  %241 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %240, !dbg !52
  %242 = getelementptr float, ptr addrspace(3) %241, i32 %239, !dbg !52
  %243 = bitcast float %176 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %242, <1 x i32> %243, i1 true) #4, !dbg !52
  %244 = or disjoint i32 %239, 1, !dbg !52
  %245 = getelementptr float, ptr addrspace(3) %241, i32 %244, !dbg !52
  %246 = bitcast float %179 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %245, <1 x i32> %246, i1 true) #4, !dbg !52
  %247 = or disjoint i32 %239, 2, !dbg !52
  %248 = getelementptr float, ptr addrspace(3) %241, i32 %247, !dbg !52
  %249 = bitcast float %182 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %248, <1 x i32> %249, i1 true) #4, !dbg !52
  %250 = or disjoint i32 %239, 3, !dbg !52
  %251 = getelementptr float, ptr addrspace(3) %241, i32 %250, !dbg !52
  %252 = bitcast float %185 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %251, <1 x i32> %252, i1 true) #4, !dbg !52
  %253 = or disjoint i32 %239, 4, !dbg !52
  %254 = getelementptr float, ptr addrspace(3) %241, i32 %253, !dbg !52
  %255 = bitcast float %188 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %254, <1 x i32> %255, i1 true) #4, !dbg !52
  %256 = or disjoint i32 %239, 5, !dbg !52
  %257 = getelementptr float, ptr addrspace(3) %241, i32 %256, !dbg !52
  %258 = bitcast float %191 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %257, <1 x i32> %258, i1 true) #4, !dbg !52
  %259 = or disjoint i32 %239, 6, !dbg !52
  %260 = getelementptr float, ptr addrspace(3) %241, i32 %259, !dbg !52
  %261 = bitcast float %194 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %260, <1 x i32> %261, i1 true) #4, !dbg !52
  %262 = or disjoint i32 %239, 7, !dbg !52
  %263 = getelementptr float, ptr addrspace(3) %241, i32 %262, !dbg !52
  %264 = bitcast float %197 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %263, <1 x i32> %264, i1 true) #4, !dbg !52
  %265 = or disjoint i32 %239, 8, !dbg !52
  %266 = getelementptr float, ptr addrspace(3) %241, i32 %265, !dbg !52
  %267 = bitcast float %200 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %266, <1 x i32> %267, i1 true) #4, !dbg !52
  %268 = or disjoint i32 %239, 9, !dbg !52
  %269 = getelementptr float, ptr addrspace(3) %241, i32 %268, !dbg !52
  %270 = bitcast float %203 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %269, <1 x i32> %270, i1 true) #4, !dbg !52
  %271 = or disjoint i32 %239, 10, !dbg !52
  %272 = getelementptr float, ptr addrspace(3) %241, i32 %271, !dbg !52
  %273 = bitcast float %206 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %272, <1 x i32> %273, i1 true) #4, !dbg !52
  %274 = or disjoint i32 %239, 11, !dbg !52
  %275 = getelementptr float, ptr addrspace(3) %241, i32 %274, !dbg !52
  %276 = bitcast float %209 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %275, <1 x i32> %276, i1 true) #4, !dbg !52
  %277 = or disjoint i32 %239, 12, !dbg !52
  %278 = getelementptr float, ptr addrspace(3) %241, i32 %277, !dbg !52
  %279 = bitcast float %212 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %278, <1 x i32> %279, i1 true) #4, !dbg !52
  %280 = or disjoint i32 %239, 13, !dbg !52
  %281 = getelementptr float, ptr addrspace(3) %241, i32 %280, !dbg !52
  %282 = bitcast float %215 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %281, <1 x i32> %282, i1 true) #4, !dbg !52
  %283 = or disjoint i32 %239, 14, !dbg !52
  %284 = getelementptr float, ptr addrspace(3) %241, i32 %283, !dbg !52
  %285 = bitcast float %218 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %284, <1 x i32> %285, i1 true) #4, !dbg !52
  %286 = or disjoint i32 %239, 15, !dbg !52
  %287 = getelementptr float, ptr addrspace(3) %241, i32 %286, !dbg !52
  %288 = bitcast float %221 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %287, <1 x i32> %288, i1 true) #4, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %289 = lshr i32 %76, 4, !dbg !52
  %290 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %289, !dbg !52
  %291 = getelementptr inbounds float, ptr addrspace(3) %290, i32 %76, !dbg !52
  %292 = load i32, ptr addrspace(3) %291, align 4, !dbg !52
  %293 = or disjoint i32 %76, 1, !dbg !52
  %294 = getelementptr inbounds float, ptr addrspace(3) %290, i32 %293, !dbg !52
  %295 = load i32, ptr addrspace(3) %294, align 4, !dbg !52
  %296 = or disjoint i32 %76, 2, !dbg !52
  %297 = getelementptr inbounds float, ptr addrspace(3) %290, i32 %296, !dbg !52
  %298 = load i32, ptr addrspace(3) %297, align 4, !dbg !52
  %299 = or disjoint i32 %76, 3, !dbg !52
  %300 = getelementptr inbounds float, ptr addrspace(3) %290, i32 %299, !dbg !52
  %301 = load i32, ptr addrspace(3) %300, align 4, !dbg !52
  %302 = or disjoint i32 %76, 1024, !dbg !52
  %303 = lshr i32 %302, 4, !dbg !52
  %304 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %303, !dbg !52
  %305 = getelementptr inbounds float, ptr addrspace(3) %304, i32 %302, !dbg !52
  %306 = load i32, ptr addrspace(3) %305, align 4, !dbg !52
  %307 = or disjoint i32 %76, 1025, !dbg !52
  %308 = lshr i32 %307, 4, !dbg !52
  %309 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %308, !dbg !52
  %310 = getelementptr inbounds float, ptr addrspace(3) %309, i32 %307, !dbg !52
  %311 = load i32, ptr addrspace(3) %310, align 4, !dbg !52
  %312 = or disjoint i32 %76, 1026, !dbg !52
  %313 = lshr i32 %312, 4, !dbg !52
  %314 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %313, !dbg !52
  %315 = getelementptr inbounds float, ptr addrspace(3) %314, i32 %312, !dbg !52
  %316 = load i32, ptr addrspace(3) %315, align 4, !dbg !52
  %317 = or disjoint i32 %76, 1027, !dbg !52
  %318 = lshr i32 %317, 4, !dbg !52
  %319 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %318, !dbg !52
  %320 = getelementptr inbounds float, ptr addrspace(3) %319, i32 %317, !dbg !52
  %321 = load i32, ptr addrspace(3) %320, align 4, !dbg !52
  %322 = or disjoint i32 %76, 2048, !dbg !52
  %323 = lshr i32 %322, 4, !dbg !52
  %324 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %323, !dbg !52
  %325 = getelementptr inbounds float, ptr addrspace(3) %324, i32 %322, !dbg !52
  %326 = load i32, ptr addrspace(3) %325, align 4, !dbg !52
  %327 = or disjoint i32 %76, 2049, !dbg !52
  %328 = lshr i32 %327, 4, !dbg !52
  %329 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %328, !dbg !52
  %330 = getelementptr inbounds float, ptr addrspace(3) %329, i32 %327, !dbg !52
  %331 = load i32, ptr addrspace(3) %330, align 4, !dbg !52
  %332 = or disjoint i32 %76, 2050, !dbg !52
  %333 = lshr i32 %332, 4, !dbg !52
  %334 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %333, !dbg !52
  %335 = getelementptr inbounds float, ptr addrspace(3) %334, i32 %332, !dbg !52
  %336 = load i32, ptr addrspace(3) %335, align 4, !dbg !52
  %337 = or disjoint i32 %76, 2051, !dbg !52
  %338 = lshr i32 %337, 4, !dbg !52
  %339 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %338, !dbg !52
  %340 = getelementptr inbounds float, ptr addrspace(3) %339, i32 %337, !dbg !52
  %341 = load i32, ptr addrspace(3) %340, align 4, !dbg !52
  %342 = or disjoint i32 %76, 3072, !dbg !52
  %343 = lshr i32 %342, 4, !dbg !52
  %344 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %343, !dbg !52
  %345 = getelementptr inbounds float, ptr addrspace(3) %344, i32 %342, !dbg !52
  %346 = load i32, ptr addrspace(3) %345, align 4, !dbg !52
  %347 = or disjoint i32 %76, 3073, !dbg !52
  %348 = lshr i32 %347, 4, !dbg !52
  %349 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %348, !dbg !52
  %350 = getelementptr inbounds float, ptr addrspace(3) %349, i32 %347, !dbg !52
  %351 = load i32, ptr addrspace(3) %350, align 4, !dbg !52
  %352 = or disjoint i32 %76, 3074, !dbg !52
  %353 = lshr i32 %352, 4, !dbg !52
  %354 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %353, !dbg !52
  %355 = getelementptr inbounds float, ptr addrspace(3) %354, i32 %352, !dbg !52
  %356 = load i32, ptr addrspace(3) %355, align 4, !dbg !52
  %357 = or disjoint i32 %76, 3075, !dbg !52
  %358 = lshr i32 %357, 4, !dbg !52
  %359 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %358, !dbg !52
  %360 = getelementptr inbounds float, ptr addrspace(3) %359, i32 %357, !dbg !52
  %361 = load i32, ptr addrspace(3) %360, align 4, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %292, i32 %295, i32 %298, i32 %301, ptr addrspace(1) %231, i1 %140) #4, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %306, i32 %311, i32 %316, i32 %321, ptr addrspace(1) %233, i1 %138) #4, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %326, i32 %331, i32 %336, i32 %341, ptr addrspace(1) %235, i1 %135) #4, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %346, i32 %351, i32 %356, i32 %361, ptr addrspace(1) %237, i1 %132) #4, !dbg !52
  %362 = getelementptr float, ptr addrspace(1) %6, i64 %44, !dbg !53
  %363 = getelementptr float, ptr addrspace(1) %6, i64 %46, !dbg !53
  %364 = getelementptr float, ptr addrspace(1) %6, i64 %48, !dbg !53
  %365 = getelementptr float, ptr addrspace(1) %6, i64 %50, !dbg !53
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %81, <1 x i32> %243, i1 true) #4, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %83, <1 x i32> %246, i1 true) #4, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %85, <1 x i32> %249, i1 true) #4, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %87, <1 x i32> %252, i1 true) #4, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %366 = load <4 x i32>, ptr addrspace(3) %80, align 16, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %81, <1 x i32> %255, i1 true) #4, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %83, <1 x i32> %258, i1 true) #4, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %85, <1 x i32> %261, i1 true) #4, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %87, <1 x i32> %264, i1 true) #4, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %367 = load <4 x i32>, ptr addrspace(3) %80, align 16, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %81, <1 x i32> %267, i1 true) #4, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %83, <1 x i32> %270, i1 true) #4, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %85, <1 x i32> %273, i1 true) #4, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %87, <1 x i32> %276, i1 true) #4, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %368 = load <4 x i32>, ptr addrspace(3) %80, align 16, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %81, <1 x i32> %279, i1 true) #4, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %83, <1 x i32> %282, i1 true) #4, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %85, <1 x i32> %285, i1 true) #4, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %87, <1 x i32> %288, i1 true) #4, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %369 = load <4 x i32>, ptr addrspace(3) %80, align 16, !dbg !54
  %.extract = extractelement <4 x i32> %366, i64 0, !dbg !54
  %.extract20 = extractelement <4 x i32> %366, i64 1, !dbg !54
  %.extract21 = extractelement <4 x i32> %366, i64 2, !dbg !54
  %.extract22 = extractelement <4 x i32> %366, i64 3, !dbg !54
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract20, i32 %.extract21, i32 %.extract22, ptr addrspace(1) %362, i1 %52) #4, !dbg !54
  %.extract23 = extractelement <4 x i32> %367, i64 0, !dbg !54
  %.extract24 = extractelement <4 x i32> %367, i64 1, !dbg !54
  %.extract25 = extractelement <4 x i32> %367, i64 2, !dbg !54
  %.extract26 = extractelement <4 x i32> %367, i64 3, !dbg !54
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract23, i32 %.extract24, i32 %.extract25, i32 %.extract26, ptr addrspace(1) %363, i1 %53) #4, !dbg !54
  %.extract27 = extractelement <4 x i32> %368, i64 0, !dbg !54
  %.extract28 = extractelement <4 x i32> %368, i64 1, !dbg !54
  %.extract29 = extractelement <4 x i32> %368, i64 2, !dbg !54
  %.extract30 = extractelement <4 x i32> %368, i64 3, !dbg !54
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract27, i32 %.extract28, i32 %.extract29, i32 %.extract30, ptr addrspace(1) %364, i1 %54) #4, !dbg !54
  %.extract31 = extractelement <4 x i32> %369, i64 0, !dbg !54
  %.extract32 = extractelement <4 x i32> %369, i64 1, !dbg !54
  %.extract33 = extractelement <4 x i32> %369, i64 2, !dbg !54
  %.extract34 = extractelement <4 x i32> %369, i64 3, !dbg !54
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract31, i32 %.extract32, i32 %.extract33, i32 %.extract34, ptr addrspace(1) %365, i1 %55) #4, !dbg !54
  ret void, !dbg !55
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cyfwtabvzyu6viscart4hoqnksdwa4azhfsss3z5loyf2slk4bhw.py", directory: "inductor_cache/yf")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_convolution_relu_12, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_convolution_relu_12, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_convolution_relu_12", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_convolution_relu_12", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 39, scope: !7)
!23 = !DILocation(line: 32, column: 49, scope: !7)
!24 = !DILocation(line: 32, column: 35, scope: !7)
!25 = !DILocation(line: 32, column: 44, scope: !7)
!26 = !DILocation(line: 32, column: 30, scope: !7)
!27 = !DILocation(line: 32, column: 62, scope: !7)
!28 = !DILocation(line: 32, column: 54, scope: !7)
!29 = !DILocation(line: 33, column: 30, scope: !7)
!30 = !DILocation(line: 33, column: 35, scope: !7)
!31 = !DILocation(line: 34, column: 30, scope: !7)
!32 = !DILocation(line: 34, column: 35, scope: !7)
!33 = !DILocation(line: 35, column: 31, scope: !7)
!34 = !DILocation(line: 35, column: 36, scope: !7)
!35 = !DILocation(line: 36, column: 31, scope: !7)
!36 = !DILocation(line: 36, column: 36, scope: !7)
!37 = !DILocation(line: 39, column: 18, scope: !7)
!38 = !DILocation(line: 40, column: 26, scope: !7)
!39 = !DILocation(line: 42, column: 18, scope: !7)
!40 = !DILocation(line: 37, column: 18, scope: !7)
!41 = !DILocation(line: 45, column: 19, scope: !7)
!42 = !DILocation(line: 46, column: 20, scope: !7)
!43 = !DILocation(line: 47, column: 20, scope: !7)
!44 = !DILocation(line: 118, column: 15, scope: !45, inlinedAt: !47)
!45 = distinct !DILexicalBlockFile(scope: !7, file: !46, discriminator: 0)
!46 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!47 = !DILocation(line: 49, column: 42, scope: !7)
!48 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !47)
!49 = !DILocation(line: 50, column: 33, scope: !7)
!50 = !DILocation(line: 50, column: 30, scope: !7)
!51 = !DILocation(line: 50, column: 25, scope: !7)
!52 = !DILocation(line: 50, column: 45, scope: !7)
!53 = !DILocation(line: 51, column: 25, scope: !7)
!54 = !DILocation(line: 51, column: 56, scope: !7)
!55 = !DILocation(line: 51, column: 4, scope: !7)
