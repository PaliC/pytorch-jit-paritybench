; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_max_pool2d_with_indices_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 5, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 3, !dbg !12
  %10 = and i32 %9, 31, !dbg !12
  %11 = shl i32 %8, 2, !dbg !12
  %12 = and i32 %11, 28, !dbg !12
  %13 = or disjoint i32 %7, %10, !dbg !13
  %14 = or disjoint i32 %7, %12, !dbg !13
  %15 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %16 = shl i32 %15, 7, !dbg !15
  %17 = shl i32 %8, 4, !dbg !16
  %18 = and i32 %17, 112, !dbg !16
  %19 = or disjoint i32 %16, %18, !dbg !17
  %20 = or disjoint i32 %19, 4, !dbg !17
  %21 = or disjoint i32 %19, 8, !dbg !17
  %22 = or disjoint i32 %19, 12, !dbg !17
  %23 = or disjoint i32 %16, %10, !dbg !17
  %24 = or disjoint i32 %23, 32, !dbg !17
  %25 = or disjoint i32 %23, 64, !dbg !17
  %26 = or disjoint i32 %23, 96, !dbg !17
  %27 = icmp slt i32 %19, 128, !dbg !18
  %28 = icmp slt i32 %23, 128, !dbg !18
  %29 = icmp slt i32 %24, 128, !dbg !18
  %30 = icmp slt i32 %25, 128, !dbg !18
  %31 = icmp slt i32 %26, 128, !dbg !18
  %.frozen = freeze i32 %13, !dbg !19
  %32 = sdiv i32 %.frozen, 16, !dbg !19
  %33 = mul i32 %32, 16, !dbg !20
  %.decomposed = sub i32 %.frozen, %33, !dbg !20
  %.frozen38 = freeze i32 %14, !dbg !21
  %34 = sdiv i32 %.frozen38, 256, !dbg !21
  %35 = mul i32 %34, 256, !dbg !22
  %.decomposed39 = sub i32 %.frozen38, %35, !dbg !22
  %36 = shl nsw i32 %.decomposed, 8, !dbg !23
  %37 = shl i32 %32, 13, !dbg !24
  %38 = add i32 %37, %36, !dbg !25
  %39 = add i32 %38, %19, !dbg !26
  %40 = add i32 %38, %20, !dbg !26
  %41 = add i32 %38, %21, !dbg !26
  %42 = add i32 %38, %22, !dbg !26
  %43 = sext i32 %39 to i64, !dbg !27
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !27
  %45 = sext i32 %40 to i64, !dbg !27
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !27
  %47 = sext i32 %41 to i64, !dbg !27
  %48 = getelementptr float, ptr addrspace(1) %0, i64 %47, !dbg !27
  %49 = sext i32 %42 to i64, !dbg !27
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !27
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %44, i1 %27) #2, !dbg !28
  %52 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !28
  %53 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !28
  %54 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !28
  %55 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !28
  %56 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %46, i1 %27) #2, !dbg !28
  %57 = extractvalue { i32, i32, i32, i32 } %56, 0, !dbg !28
  %58 = extractvalue { i32, i32, i32, i32 } %56, 1, !dbg !28
  %59 = extractvalue { i32, i32, i32, i32 } %56, 2, !dbg !28
  %60 = extractvalue { i32, i32, i32, i32 } %56, 3, !dbg !28
  %61 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %48, i1 %27) #2, !dbg !28
  %62 = extractvalue { i32, i32, i32, i32 } %61, 0, !dbg !28
  %63 = extractvalue { i32, i32, i32, i32 } %61, 1, !dbg !28
  %64 = extractvalue { i32, i32, i32, i32 } %61, 2, !dbg !28
  %65 = extractvalue { i32, i32, i32, i32 } %61, 3, !dbg !28
  %66 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %50, i1 %27) #2, !dbg !28
  %67 = extractvalue { i32, i32, i32, i32 } %66, 0, !dbg !28
  %68 = extractvalue { i32, i32, i32, i32 } %66, 1, !dbg !28
  %69 = extractvalue { i32, i32, i32, i32 } %66, 2, !dbg !28
  %70 = extractvalue { i32, i32, i32, i32 } %66, 3, !dbg !28
  %71 = or disjoint i32 %38, 128, !dbg !29
  %72 = add i32 %71, %19, !dbg !30
  %73 = add i32 %71, %20, !dbg !30
  %74 = add i32 %71, %21, !dbg !30
  %75 = add i32 %71, %22, !dbg !30
  %76 = sext i32 %72 to i64, !dbg !31
  %77 = getelementptr float, ptr addrspace(1) %0, i64 %76, !dbg !31
  %78 = sext i32 %73 to i64, !dbg !31
  %79 = getelementptr float, ptr addrspace(1) %0, i64 %78, !dbg !31
  %80 = sext i32 %74 to i64, !dbg !31
  %81 = getelementptr float, ptr addrspace(1) %0, i64 %80, !dbg !31
  %82 = sext i32 %75 to i64, !dbg !31
  %83 = getelementptr float, ptr addrspace(1) %0, i64 %82, !dbg !31
  %84 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %77, i1 %27) #2, !dbg !32
  %85 = extractvalue { i32, i32, i32, i32 } %84, 0, !dbg !32
  %86 = extractvalue { i32, i32, i32, i32 } %84, 1, !dbg !32
  %87 = extractvalue { i32, i32, i32, i32 } %84, 2, !dbg !32
  %88 = extractvalue { i32, i32, i32, i32 } %84, 3, !dbg !32
  %89 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %79, i1 %27) #2, !dbg !32
  %90 = extractvalue { i32, i32, i32, i32 } %89, 0, !dbg !32
  %91 = extractvalue { i32, i32, i32, i32 } %89, 1, !dbg !32
  %92 = extractvalue { i32, i32, i32, i32 } %89, 2, !dbg !32
  %93 = extractvalue { i32, i32, i32, i32 } %89, 3, !dbg !32
  %94 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %81, i1 %27) #2, !dbg !32
  %95 = extractvalue { i32, i32, i32, i32 } %94, 0, !dbg !32
  %96 = extractvalue { i32, i32, i32, i32 } %94, 1, !dbg !32
  %97 = extractvalue { i32, i32, i32, i32 } %94, 2, !dbg !32
  %98 = extractvalue { i32, i32, i32, i32 } %94, 3, !dbg !32
  %99 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %83, i1 %27) #2, !dbg !32
  %100 = extractvalue { i32, i32, i32, i32 } %99, 0, !dbg !32
  %101 = extractvalue { i32, i32, i32, i32 } %99, 1, !dbg !32
  %102 = extractvalue { i32, i32, i32, i32 } %99, 2, !dbg !32
  %103 = extractvalue { i32, i32, i32, i32 } %99, 3, !dbg !32
  %104 = add i32 %38, 4096, !dbg !33
  %105 = add i32 %104, %19, !dbg !34
  %106 = add i32 %104, %20, !dbg !34
  %107 = add i32 %104, %21, !dbg !34
  %108 = add i32 %104, %22, !dbg !34
  %109 = sext i32 %105 to i64, !dbg !35
  %110 = getelementptr float, ptr addrspace(1) %0, i64 %109, !dbg !35
  %111 = sext i32 %106 to i64, !dbg !35
  %112 = getelementptr float, ptr addrspace(1) %0, i64 %111, !dbg !35
  %113 = sext i32 %107 to i64, !dbg !35
  %114 = getelementptr float, ptr addrspace(1) %0, i64 %113, !dbg !35
  %115 = sext i32 %108 to i64, !dbg !35
  %116 = getelementptr float, ptr addrspace(1) %0, i64 %115, !dbg !35
  %117 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %110, i1 %27) #2, !dbg !36
  %118 = extractvalue { i32, i32, i32, i32 } %117, 0, !dbg !36
  %119 = extractvalue { i32, i32, i32, i32 } %117, 1, !dbg !36
  %120 = extractvalue { i32, i32, i32, i32 } %117, 2, !dbg !36
  %121 = extractvalue { i32, i32, i32, i32 } %117, 3, !dbg !36
  %122 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %112, i1 %27) #2, !dbg !36
  %123 = extractvalue { i32, i32, i32, i32 } %122, 0, !dbg !36
  %124 = extractvalue { i32, i32, i32, i32 } %122, 1, !dbg !36
  %125 = extractvalue { i32, i32, i32, i32 } %122, 2, !dbg !36
  %126 = extractvalue { i32, i32, i32, i32 } %122, 3, !dbg !36
  %127 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %114, i1 %27) #2, !dbg !36
  %128 = extractvalue { i32, i32, i32, i32 } %127, 0, !dbg !36
  %129 = extractvalue { i32, i32, i32, i32 } %127, 1, !dbg !36
  %130 = extractvalue { i32, i32, i32, i32 } %127, 2, !dbg !36
  %131 = extractvalue { i32, i32, i32, i32 } %127, 3, !dbg !36
  %132 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %116, i1 %27) #2, !dbg !36
  %133 = extractvalue { i32, i32, i32, i32 } %132, 0, !dbg !36
  %134 = extractvalue { i32, i32, i32, i32 } %132, 1, !dbg !36
  %135 = extractvalue { i32, i32, i32, i32 } %132, 2, !dbg !36
  %136 = extractvalue { i32, i32, i32, i32 } %132, 3, !dbg !36
  %137 = add i32 %38, 4224, !dbg !37
  %138 = add i32 %137, %19, !dbg !38
  %139 = add i32 %137, %20, !dbg !38
  %140 = add i32 %137, %21, !dbg !38
  %141 = add i32 %137, %22, !dbg !38
  %142 = sext i32 %138 to i64, !dbg !39
  %143 = getelementptr float, ptr addrspace(1) %0, i64 %142, !dbg !39
  %144 = sext i32 %139 to i64, !dbg !39
  %145 = getelementptr float, ptr addrspace(1) %0, i64 %144, !dbg !39
  %146 = sext i32 %140 to i64, !dbg !39
  %147 = getelementptr float, ptr addrspace(1) %0, i64 %146, !dbg !39
  %148 = sext i32 %141 to i64, !dbg !39
  %149 = getelementptr float, ptr addrspace(1) %0, i64 %148, !dbg !39
  %150 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %143, i1 %27) #2, !dbg !40
  %151 = extractvalue { i32, i32, i32, i32 } %150, 0, !dbg !40
  %152 = extractvalue { i32, i32, i32, i32 } %150, 1, !dbg !40
  %153 = extractvalue { i32, i32, i32, i32 } %150, 2, !dbg !40
  %154 = extractvalue { i32, i32, i32, i32 } %150, 3, !dbg !40
  %155 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %145, i1 %27) #2, !dbg !40
  %156 = extractvalue { i32, i32, i32, i32 } %155, 0, !dbg !40
  %157 = extractvalue { i32, i32, i32, i32 } %155, 1, !dbg !40
  %158 = extractvalue { i32, i32, i32, i32 } %155, 2, !dbg !40
  %159 = extractvalue { i32, i32, i32, i32 } %155, 3, !dbg !40
  %160 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %147, i1 %27) #2, !dbg !40
  %161 = extractvalue { i32, i32, i32, i32 } %160, 0, !dbg !40
  %162 = extractvalue { i32, i32, i32, i32 } %160, 1, !dbg !40
  %163 = extractvalue { i32, i32, i32, i32 } %160, 2, !dbg !40
  %164 = extractvalue { i32, i32, i32, i32 } %160, 3, !dbg !40
  %165 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %149, i1 %27) #2, !dbg !40
  %166 = extractvalue { i32, i32, i32, i32 } %165, 0, !dbg !40
  %167 = extractvalue { i32, i32, i32, i32 } %165, 1, !dbg !40
  %168 = extractvalue { i32, i32, i32, i32 } %165, 2, !dbg !40
  %169 = extractvalue { i32, i32, i32, i32 } %165, 3, !dbg !40
  %170 = insertelement <4 x i32> poison, i32 %52, i64 0, !dbg !28
  %171 = insertelement <4 x i32> %170, i32 %53, i64 1, !dbg !28
  %172 = insertelement <4 x i32> %171, i32 %54, i64 2, !dbg !28
  %173 = insertelement <4 x i32> %172, i32 %55, i64 3, !dbg !28
  %174 = bitcast <4 x i32> %173 to <4 x float>, !dbg !28
  %175 = insertelement <4 x i32> poison, i32 %85, i64 0, !dbg !32
  %176 = insertelement <4 x i32> %175, i32 %86, i64 1, !dbg !32
  %177 = insertelement <4 x i32> %176, i32 %87, i64 2, !dbg !32
  %178 = insertelement <4 x i32> %177, i32 %88, i64 3, !dbg !32
  %179 = bitcast <4 x i32> %178 to <4 x float>, !dbg !32
  %180 = insertelement <4 x i32> poison, i32 %118, i64 0, !dbg !36
  %181 = insertelement <4 x i32> %180, i32 %119, i64 1, !dbg !36
  %182 = insertelement <4 x i32> %181, i32 %120, i64 2, !dbg !36
  %183 = insertelement <4 x i32> %182, i32 %121, i64 3, !dbg !36
  %184 = bitcast <4 x i32> %183 to <4 x float>, !dbg !36
  %185 = insertelement <4 x i32> poison, i32 %151, i64 0, !dbg !40
  %186 = insertelement <4 x i32> %185, i32 %152, i64 1, !dbg !40
  %187 = insertelement <4 x i32> %186, i32 %153, i64 2, !dbg !40
  %188 = insertelement <4 x i32> %187, i32 %154, i64 3, !dbg !40
  %189 = bitcast <4 x i32> %188 to <4 x float>, !dbg !40
  %190 = fcmp ogt <4 x float> %179, %174, !dbg !41
  %191 = fcmp uno <4 x float> %179, zeroinitializer, !dbg !45
  %192 = or <4 x i1> %190, %191, !dbg !46
  %.v = select <4 x i1> %192, <4 x i32> %178, <4 x i32> %173, !dbg !47
  %193 = bitcast <4 x i32> %.v to <4 x float>, !dbg !47
  %194 = fcmp olt <4 x float> %193, %184, !dbg !48
  %195 = fcmp uno <4 x float> %184, zeroinitializer, !dbg !50
  %196 = or <4 x i1> %194, %195, !dbg !51
  %.v31 = select <4 x i1> %196, <4 x i32> %183, <4 x i32> %.v, !dbg !52
  %197 = bitcast <4 x i32> %.v31 to <4 x float>, !dbg !52
  %198 = fcmp olt <4 x float> %197, %189, !dbg !53
  %199 = bitcast i32 %151 to float, !dbg !55
  %200 = fcmp uno float %199, 0.000000e+00, !dbg !55
  %201 = bitcast i32 %152 to float, !dbg !55
  %202 = fcmp uno float %201, 0.000000e+00, !dbg !55
  %203 = bitcast i32 %153 to float, !dbg !55
  %204 = fcmp uno float %203, 0.000000e+00, !dbg !55
  %205 = bitcast i32 %154 to float, !dbg !55
  %206 = fcmp uno float %205, 0.000000e+00, !dbg !55
  %207 = extractelement <4 x i1> %198, i64 0, !dbg !56
  %208 = or i1 %207, %200, !dbg !56
  %209 = extractelement <4 x i1> %198, i64 1, !dbg !56
  %210 = or i1 %209, %202, !dbg !56
  %211 = extractelement <4 x i1> %198, i64 2, !dbg !56
  %212 = or i1 %211, %204, !dbg !56
  %213 = extractelement <4 x i1> %198, i64 3, !dbg !56
  %214 = or i1 %213, %206, !dbg !56
  %215 = zext <4 x i1> %190 to <4 x i8>, !dbg !57
  %216 = select <4 x i1> %194, <4 x i8> splat (i8 2), <4 x i8> %215, !dbg !58
  %217 = select <4 x i1> %198, <4 x i8> splat (i8 3), <4 x i8> %216, !dbg !59
  %218 = insertelement <4 x i32> poison, i32 %57, i64 0, !dbg !28
  %219 = insertelement <4 x i32> %218, i32 %58, i64 1, !dbg !28
  %220 = insertelement <4 x i32> %219, i32 %59, i64 2, !dbg !28
  %221 = insertelement <4 x i32> %220, i32 %60, i64 3, !dbg !28
  %222 = bitcast <4 x i32> %221 to <4 x float>, !dbg !28
  %223 = insertelement <4 x i32> poison, i32 %90, i64 0, !dbg !32
  %224 = insertelement <4 x i32> %223, i32 %91, i64 1, !dbg !32
  %225 = insertelement <4 x i32> %224, i32 %92, i64 2, !dbg !32
  %226 = insertelement <4 x i32> %225, i32 %93, i64 3, !dbg !32
  %227 = bitcast <4 x i32> %226 to <4 x float>, !dbg !32
  %228 = insertelement <4 x i32> poison, i32 %123, i64 0, !dbg !36
  %229 = insertelement <4 x i32> %228, i32 %124, i64 1, !dbg !36
  %230 = insertelement <4 x i32> %229, i32 %125, i64 2, !dbg !36
  %231 = insertelement <4 x i32> %230, i32 %126, i64 3, !dbg !36
  %232 = bitcast <4 x i32> %231 to <4 x float>, !dbg !36
  %233 = insertelement <4 x i32> poison, i32 %156, i64 0, !dbg !40
  %234 = insertelement <4 x i32> %233, i32 %157, i64 1, !dbg !40
  %235 = insertelement <4 x i32> %234, i32 %158, i64 2, !dbg !40
  %236 = insertelement <4 x i32> %235, i32 %159, i64 3, !dbg !40
  %237 = bitcast <4 x i32> %236 to <4 x float>, !dbg !40
  %238 = fcmp ogt <4 x float> %227, %222, !dbg !41
  %239 = fcmp uno <4 x float> %227, zeroinitializer, !dbg !45
  %240 = or <4 x i1> %238, %239, !dbg !46
  %.v32 = select <4 x i1> %240, <4 x i32> %226, <4 x i32> %221, !dbg !47
  %241 = bitcast <4 x i32> %.v32 to <4 x float>, !dbg !47
  %242 = fcmp olt <4 x float> %241, %232, !dbg !48
  %243 = fcmp uno <4 x float> %232, zeroinitializer, !dbg !50
  %244 = or <4 x i1> %242, %243, !dbg !51
  %.v33 = select <4 x i1> %244, <4 x i32> %231, <4 x i32> %.v32, !dbg !52
  %245 = bitcast <4 x i32> %.v33 to <4 x float>, !dbg !52
  %246 = fcmp olt <4 x float> %245, %237, !dbg !53
  %247 = bitcast i32 %156 to float, !dbg !55
  %248 = fcmp uno float %247, 0.000000e+00, !dbg !55
  %249 = bitcast i32 %157 to float, !dbg !55
  %250 = fcmp uno float %249, 0.000000e+00, !dbg !55
  %251 = bitcast i32 %158 to float, !dbg !55
  %252 = fcmp uno float %251, 0.000000e+00, !dbg !55
  %253 = bitcast i32 %159 to float, !dbg !55
  %254 = fcmp uno float %253, 0.000000e+00, !dbg !55
  %255 = extractelement <4 x i1> %246, i64 0, !dbg !56
  %256 = or i1 %255, %248, !dbg !56
  %257 = extractelement <4 x i1> %246, i64 1, !dbg !56
  %258 = or i1 %257, %250, !dbg !56
  %259 = extractelement <4 x i1> %246, i64 2, !dbg !56
  %260 = or i1 %259, %252, !dbg !56
  %261 = extractelement <4 x i1> %246, i64 3, !dbg !56
  %262 = or i1 %261, %254, !dbg !56
  %263 = zext <4 x i1> %238 to <4 x i8>, !dbg !57
  %264 = select <4 x i1> %242, <4 x i8> splat (i8 2), <4 x i8> %263, !dbg !58
  %265 = select <4 x i1> %246, <4 x i8> splat (i8 3), <4 x i8> %264, !dbg !59
  %266 = insertelement <4 x i32> poison, i32 %62, i64 0, !dbg !28
  %267 = insertelement <4 x i32> %266, i32 %63, i64 1, !dbg !28
  %268 = insertelement <4 x i32> %267, i32 %64, i64 2, !dbg !28
  %269 = insertelement <4 x i32> %268, i32 %65, i64 3, !dbg !28
  %270 = bitcast <4 x i32> %269 to <4 x float>, !dbg !28
  %271 = insertelement <4 x i32> poison, i32 %95, i64 0, !dbg !32
  %272 = insertelement <4 x i32> %271, i32 %96, i64 1, !dbg !32
  %273 = insertelement <4 x i32> %272, i32 %97, i64 2, !dbg !32
  %274 = insertelement <4 x i32> %273, i32 %98, i64 3, !dbg !32
  %275 = bitcast <4 x i32> %274 to <4 x float>, !dbg !32
  %276 = insertelement <4 x i32> poison, i32 %128, i64 0, !dbg !36
  %277 = insertelement <4 x i32> %276, i32 %129, i64 1, !dbg !36
  %278 = insertelement <4 x i32> %277, i32 %130, i64 2, !dbg !36
  %279 = insertelement <4 x i32> %278, i32 %131, i64 3, !dbg !36
  %280 = bitcast <4 x i32> %279 to <4 x float>, !dbg !36
  %281 = insertelement <4 x i32> poison, i32 %161, i64 0, !dbg !40
  %282 = insertelement <4 x i32> %281, i32 %162, i64 1, !dbg !40
  %283 = insertelement <4 x i32> %282, i32 %163, i64 2, !dbg !40
  %284 = insertelement <4 x i32> %283, i32 %164, i64 3, !dbg !40
  %285 = bitcast <4 x i32> %284 to <4 x float>, !dbg !40
  %286 = fcmp ogt <4 x float> %275, %270, !dbg !41
  %287 = fcmp uno <4 x float> %275, zeroinitializer, !dbg !45
  %288 = or <4 x i1> %286, %287, !dbg !46
  %.v34 = select <4 x i1> %288, <4 x i32> %274, <4 x i32> %269, !dbg !47
  %289 = bitcast <4 x i32> %.v34 to <4 x float>, !dbg !47
  %290 = fcmp olt <4 x float> %289, %280, !dbg !48
  %291 = fcmp uno <4 x float> %280, zeroinitializer, !dbg !50
  %292 = or <4 x i1> %290, %291, !dbg !51
  %.v35 = select <4 x i1> %292, <4 x i32> %279, <4 x i32> %.v34, !dbg !52
  %293 = bitcast <4 x i32> %.v35 to <4 x float>, !dbg !52
  %294 = fcmp olt <4 x float> %293, %285, !dbg !53
  %295 = bitcast i32 %161 to float, !dbg !55
  %296 = fcmp uno float %295, 0.000000e+00, !dbg !55
  %297 = bitcast i32 %162 to float, !dbg !55
  %298 = fcmp uno float %297, 0.000000e+00, !dbg !55
  %299 = bitcast i32 %163 to float, !dbg !55
  %300 = fcmp uno float %299, 0.000000e+00, !dbg !55
  %301 = bitcast i32 %164 to float, !dbg !55
  %302 = fcmp uno float %301, 0.000000e+00, !dbg !55
  %303 = extractelement <4 x i1> %294, i64 0, !dbg !56
  %304 = or i1 %303, %296, !dbg !56
  %305 = extractelement <4 x i1> %294, i64 1, !dbg !56
  %306 = or i1 %305, %298, !dbg !56
  %307 = extractelement <4 x i1> %294, i64 2, !dbg !56
  %308 = or i1 %307, %300, !dbg !56
  %309 = extractelement <4 x i1> %294, i64 3, !dbg !56
  %310 = or i1 %309, %302, !dbg !56
  %311 = zext <4 x i1> %286 to <4 x i8>, !dbg !57
  %312 = select <4 x i1> %290, <4 x i8> splat (i8 2), <4 x i8> %311, !dbg !58
  %313 = select <4 x i1> %294, <4 x i8> splat (i8 3), <4 x i8> %312, !dbg !59
  %314 = insertelement <4 x i32> poison, i32 %67, i64 0, !dbg !28
  %315 = insertelement <4 x i32> %314, i32 %68, i64 1, !dbg !28
  %316 = insertelement <4 x i32> %315, i32 %69, i64 2, !dbg !28
  %317 = insertelement <4 x i32> %316, i32 %70, i64 3, !dbg !28
  %318 = bitcast <4 x i32> %317 to <4 x float>, !dbg !28
  %319 = insertelement <4 x i32> poison, i32 %100, i64 0, !dbg !32
  %320 = insertelement <4 x i32> %319, i32 %101, i64 1, !dbg !32
  %321 = insertelement <4 x i32> %320, i32 %102, i64 2, !dbg !32
  %322 = insertelement <4 x i32> %321, i32 %103, i64 3, !dbg !32
  %323 = bitcast <4 x i32> %322 to <4 x float>, !dbg !32
  %324 = insertelement <4 x i32> poison, i32 %133, i64 0, !dbg !36
  %325 = insertelement <4 x i32> %324, i32 %134, i64 1, !dbg !36
  %326 = insertelement <4 x i32> %325, i32 %135, i64 2, !dbg !36
  %327 = insertelement <4 x i32> %326, i32 %136, i64 3, !dbg !36
  %328 = bitcast <4 x i32> %327 to <4 x float>, !dbg !36
  %329 = insertelement <4 x i32> poison, i32 %166, i64 0, !dbg !40
  %330 = insertelement <4 x i32> %329, i32 %167, i64 1, !dbg !40
  %331 = insertelement <4 x i32> %330, i32 %168, i64 2, !dbg !40
  %332 = insertelement <4 x i32> %331, i32 %169, i64 3, !dbg !40
  %333 = bitcast <4 x i32> %332 to <4 x float>, !dbg !40
  %334 = fcmp ogt <4 x float> %323, %318, !dbg !41
  %335 = fcmp uno <4 x float> %323, zeroinitializer, !dbg !45
  %336 = or <4 x i1> %334, %335, !dbg !46
  %.v36 = select <4 x i1> %336, <4 x i32> %322, <4 x i32> %317, !dbg !47
  %337 = bitcast <4 x i32> %.v36 to <4 x float>, !dbg !47
  %338 = fcmp olt <4 x float> %337, %328, !dbg !48
  %339 = fcmp uno <4 x float> %328, zeroinitializer, !dbg !50
  %340 = or <4 x i1> %338, %339, !dbg !51
  %.v37 = select <4 x i1> %340, <4 x i32> %327, <4 x i32> %.v36, !dbg !52
  %341 = bitcast <4 x i32> %.v37 to <4 x float>, !dbg !52
  %342 = fcmp olt <4 x float> %341, %333, !dbg !53
  %343 = bitcast i32 %166 to float, !dbg !55
  %344 = fcmp uno float %343, 0.000000e+00, !dbg !55
  %345 = bitcast i32 %167 to float, !dbg !55
  %346 = fcmp uno float %345, 0.000000e+00, !dbg !55
  %347 = bitcast i32 %168 to float, !dbg !55
  %348 = fcmp uno float %347, 0.000000e+00, !dbg !55
  %349 = bitcast i32 %169 to float, !dbg !55
  %350 = fcmp uno float %349, 0.000000e+00, !dbg !55
  %351 = extractelement <4 x i1> %342, i64 0, !dbg !56
  %352 = or i1 %351, %344, !dbg !56
  %353 = extractelement <4 x i1> %342, i64 1, !dbg !56
  %354 = or i1 %353, %346, !dbg !56
  %355 = extractelement <4 x i1> %342, i64 2, !dbg !56
  %356 = or i1 %355, %348, !dbg !56
  %357 = extractelement <4 x i1> %342, i64 3, !dbg !56
  %358 = or i1 %357, %350, !dbg !56
  %359 = zext <4 x i1> %334 to <4 x i8>, !dbg !57
  %360 = select <4 x i1> %338, <4 x i8> splat (i8 2), <4 x i8> %359, !dbg !58
  %361 = select <4 x i1> %342, <4 x i8> splat (i8 3), <4 x i8> %360, !dbg !59
  %362 = shl i32 %23, 8, !dbg !60
  %363 = shl i32 %24, 8, !dbg !60
  %364 = shl i32 %25, 8, !dbg !60
  %365 = shl i32 %26, 8, !dbg !60
  %366 = shl i32 %34, 15, !dbg !61
  %367 = add i32 %366, %.decomposed39, !dbg !62
  %368 = add i32 %367, %362, !dbg !63
  %369 = add i32 %367, %363, !dbg !63
  %370 = add i32 %367, %364, !dbg !63
  %371 = add i32 %367, %365, !dbg !63
  %372 = sext i32 %368 to i64, !dbg !64
  %373 = getelementptr float, ptr addrspace(1) %1, i64 %372, !dbg !64
  %374 = sext i32 %369 to i64, !dbg !64
  %375 = getelementptr float, ptr addrspace(1) %1, i64 %374, !dbg !64
  %376 = sext i32 %370 to i64, !dbg !64
  %377 = getelementptr float, ptr addrspace(1) %1, i64 %376, !dbg !64
  %378 = sext i32 %371 to i64, !dbg !64
  %379 = getelementptr float, ptr addrspace(1) %1, i64 %378, !dbg !64
  %380 = shl i32 %8, 9, !dbg !65
  %381 = and i32 %380, 3584, !dbg !65
  %382 = or disjoint i32 %381, %10, !dbg !65
  %383 = and i32 %11, 1020, !dbg !65
  %384 = lshr exact i32 %381, 1, !dbg !65
  %385 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %384, !dbg !65
  %386 = getelementptr float, ptr addrspace(3) %385, i32 %382, !dbg !65
  %387 = extractelement <4 x i32> %.v31, i64 0, !dbg !65
  %388 = select i1 %208, i32 %151, i32 %387, !dbg !66
  %389 = insertelement <1 x i32> poison, i32 %388, i64 0, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %386, <1 x i32> %389, i1 true) #2, !dbg !65
  %390 = or disjoint i32 %382, 32, !dbg !65
  %391 = lshr i32 %390, 3, !dbg !65
  %392 = and i32 %391, 452, !dbg !65
  %393 = getelementptr float, ptr addrspace(3) @global_smem, i32 %392, !dbg !65
  %394 = getelementptr float, ptr addrspace(3) %393, i32 %390, !dbg !65
  %395 = extractelement <4 x i32> %.v31, i64 1, !dbg !65
  %396 = select i1 %210, i32 %152, i32 %395, !dbg !66
  %397 = insertelement <1 x i32> poison, i32 %396, i64 0, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %394, <1 x i32> %397, i1 true) #2, !dbg !65
  %398 = or disjoint i32 %382, 64, !dbg !65
  %399 = lshr i32 %398, 3, !dbg !65
  %400 = and i32 %399, 456, !dbg !65
  %401 = getelementptr float, ptr addrspace(3) @global_smem, i32 %400, !dbg !65
  %402 = getelementptr float, ptr addrspace(3) %401, i32 %398, !dbg !65
  %403 = extractelement <4 x i32> %.v31, i64 2, !dbg !65
  %404 = select i1 %212, i32 %153, i32 %403, !dbg !66
  %405 = insertelement <1 x i32> poison, i32 %404, i64 0, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %402, <1 x i32> %405, i1 true) #2, !dbg !65
  %406 = or disjoint i32 %382, 96, !dbg !65
  %407 = lshr i32 %406, 3, !dbg !65
  %408 = and i32 %407, 460, !dbg !65
  %409 = getelementptr float, ptr addrspace(3) @global_smem, i32 %408, !dbg !65
  %410 = getelementptr float, ptr addrspace(3) %409, i32 %406, !dbg !65
  %411 = extractelement <4 x i32> %.v31, i64 3, !dbg !65
  %412 = select i1 %214, i32 %154, i32 %411, !dbg !66
  %413 = insertelement <1 x i32> poison, i32 %412, i64 0, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %410, <1 x i32> %413, i1 true) #2, !dbg !65
  %414 = or disjoint i32 %382, 128, !dbg !65
  %415 = lshr i32 %414, 3, !dbg !65
  %416 = and i32 %415, 464, !dbg !65
  %417 = getelementptr float, ptr addrspace(3) @global_smem, i32 %416, !dbg !65
  %418 = getelementptr float, ptr addrspace(3) %417, i32 %414, !dbg !65
  %419 = extractelement <4 x i32> %.v33, i64 0, !dbg !65
  %420 = select i1 %256, i32 %156, i32 %419, !dbg !66
  %421 = insertelement <1 x i32> poison, i32 %420, i64 0, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %418, <1 x i32> %421, i1 true) #2, !dbg !65
  %422 = or disjoint i32 %382, 160, !dbg !65
  %423 = lshr i32 %422, 3, !dbg !65
  %424 = and i32 %423, 468, !dbg !65
  %425 = getelementptr float, ptr addrspace(3) @global_smem, i32 %424, !dbg !65
  %426 = getelementptr float, ptr addrspace(3) %425, i32 %422, !dbg !65
  %427 = extractelement <4 x i32> %.v33, i64 1, !dbg !65
  %428 = select i1 %258, i32 %157, i32 %427, !dbg !66
  %429 = insertelement <1 x i32> poison, i32 %428, i64 0, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %426, <1 x i32> %429, i1 true) #2, !dbg !65
  %430 = or disjoint i32 %382, 192, !dbg !65
  %431 = lshr i32 %430, 3, !dbg !65
  %432 = and i32 %431, 472, !dbg !65
  %433 = getelementptr float, ptr addrspace(3) @global_smem, i32 %432, !dbg !65
  %434 = getelementptr float, ptr addrspace(3) %433, i32 %430, !dbg !65
  %435 = extractelement <4 x i32> %.v33, i64 2, !dbg !65
  %436 = select i1 %260, i32 %158, i32 %435, !dbg !66
  %437 = insertelement <1 x i32> poison, i32 %436, i64 0, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %434, <1 x i32> %437, i1 true) #2, !dbg !65
  %438 = or disjoint i32 %382, 224, !dbg !65
  %439 = lshr i32 %438, 3, !dbg !65
  %440 = and i32 %439, 476, !dbg !65
  %441 = getelementptr float, ptr addrspace(3) @global_smem, i32 %440, !dbg !65
  %442 = getelementptr float, ptr addrspace(3) %441, i32 %438, !dbg !65
  %443 = extractelement <4 x i32> %.v33, i64 3, !dbg !65
  %444 = select i1 %262, i32 %159, i32 %443, !dbg !66
  %445 = insertelement <1 x i32> poison, i32 %444, i64 0, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %442, <1 x i32> %445, i1 true) #2, !dbg !65
  %446 = or disjoint i32 %382, 256, !dbg !65
  %447 = lshr i32 %446, 3, !dbg !65
  %448 = and i32 %447, 480, !dbg !65
  %449 = getelementptr float, ptr addrspace(3) @global_smem, i32 %448, !dbg !65
  %450 = getelementptr float, ptr addrspace(3) %449, i32 %446, !dbg !65
  %451 = extractelement <4 x i32> %.v35, i64 0, !dbg !65
  %452 = select i1 %304, i32 %161, i32 %451, !dbg !66
  %453 = insertelement <1 x i32> poison, i32 %452, i64 0, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %450, <1 x i32> %453, i1 true) #2, !dbg !65
  %454 = or disjoint i32 %382, 288, !dbg !65
  %455 = lshr i32 %454, 3, !dbg !65
  %456 = and i32 %455, 484, !dbg !65
  %457 = getelementptr float, ptr addrspace(3) @global_smem, i32 %456, !dbg !65
  %458 = getelementptr float, ptr addrspace(3) %457, i32 %454, !dbg !65
  %459 = extractelement <4 x i32> %.v35, i64 1, !dbg !65
  %460 = select i1 %306, i32 %162, i32 %459, !dbg !66
  %461 = insertelement <1 x i32> poison, i32 %460, i64 0, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %458, <1 x i32> %461, i1 true) #2, !dbg !65
  %462 = or disjoint i32 %382, 320, !dbg !65
  %463 = lshr i32 %462, 3, !dbg !65
  %464 = and i32 %463, 488, !dbg !65
  %465 = getelementptr float, ptr addrspace(3) @global_smem, i32 %464, !dbg !65
  %466 = getelementptr float, ptr addrspace(3) %465, i32 %462, !dbg !65
  %467 = extractelement <4 x i32> %.v35, i64 2, !dbg !65
  %468 = select i1 %308, i32 %163, i32 %467, !dbg !66
  %469 = insertelement <1 x i32> poison, i32 %468, i64 0, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %466, <1 x i32> %469, i1 true) #2, !dbg !65
  %470 = or disjoint i32 %382, 352, !dbg !65
  %471 = lshr i32 %470, 3, !dbg !65
  %472 = and i32 %471, 492, !dbg !65
  %473 = getelementptr float, ptr addrspace(3) @global_smem, i32 %472, !dbg !65
  %474 = getelementptr float, ptr addrspace(3) %473, i32 %470, !dbg !65
  %475 = extractelement <4 x i32> %.v35, i64 3, !dbg !65
  %476 = select i1 %310, i32 %164, i32 %475, !dbg !66
  %477 = insertelement <1 x i32> poison, i32 %476, i64 0, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %474, <1 x i32> %477, i1 true) #2, !dbg !65
  %478 = or disjoint i32 %382, 384, !dbg !65
  %479 = lshr i32 %478, 3, !dbg !65
  %480 = and i32 %479, 496, !dbg !65
  %481 = getelementptr float, ptr addrspace(3) @global_smem, i32 %480, !dbg !65
  %482 = getelementptr float, ptr addrspace(3) %481, i32 %478, !dbg !65
  %483 = extractelement <4 x i32> %.v37, i64 0, !dbg !65
  %484 = select i1 %352, i32 %166, i32 %483, !dbg !66
  %485 = insertelement <1 x i32> poison, i32 %484, i64 0, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %482, <1 x i32> %485, i1 true) #2, !dbg !65
  %486 = or disjoint i32 %382, 416, !dbg !65
  %487 = lshr i32 %486, 3, !dbg !65
  %488 = and i32 %487, 500, !dbg !65
  %489 = getelementptr float, ptr addrspace(3) @global_smem, i32 %488, !dbg !65
  %490 = getelementptr float, ptr addrspace(3) %489, i32 %486, !dbg !65
  %491 = extractelement <4 x i32> %.v37, i64 1, !dbg !65
  %492 = select i1 %354, i32 %167, i32 %491, !dbg !66
  %493 = insertelement <1 x i32> poison, i32 %492, i64 0, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %490, <1 x i32> %493, i1 true) #2, !dbg !65
  %494 = or disjoint i32 %382, 448, !dbg !65
  %495 = lshr i32 %494, 3, !dbg !65
  %496 = and i32 %495, 504, !dbg !65
  %497 = getelementptr float, ptr addrspace(3) @global_smem, i32 %496, !dbg !65
  %498 = getelementptr float, ptr addrspace(3) %497, i32 %494, !dbg !65
  %499 = extractelement <4 x i32> %.v37, i64 2, !dbg !65
  %500 = select i1 %356, i32 %168, i32 %499, !dbg !66
  %501 = insertelement <1 x i32> poison, i32 %500, i64 0, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %498, <1 x i32> %501, i1 true) #2, !dbg !65
  %502 = or disjoint i32 %382, 480, !dbg !65
  %503 = lshr i32 %502, 3, !dbg !65
  %504 = and i32 %503, 508, !dbg !65
  %505 = getelementptr float, ptr addrspace(3) @global_smem, i32 %504, !dbg !65
  %506 = getelementptr float, ptr addrspace(3) %505, i32 %502, !dbg !65
  %507 = extractelement <4 x i32> %.v37, i64 3, !dbg !65
  %508 = select i1 %358, i32 %169, i32 %507, !dbg !66
  %509 = insertelement <1 x i32> poison, i32 %508, i64 0, !dbg !65
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %506, <1 x i32> %509, i1 true) #2, !dbg !65
  tail call void @llvm.nvvm.barrier0(), !dbg !65
  %510 = lshr i32 %11, 3, !dbg !65
  %511 = and i32 %510, 124, !dbg !65
  %512 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %511, !dbg !65
  %513 = getelementptr inbounds float, ptr addrspace(3) %512, i32 %383, !dbg !65
  %514 = or disjoint i32 %383, 1024, !dbg !65
  %515 = lshr i32 %514, 3, !dbg !65
  %516 = and i32 %515, 252, !dbg !65
  %517 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %516, !dbg !65
  %518 = getelementptr inbounds float, ptr addrspace(3) %517, i32 %514, !dbg !65
  %519 = load <4 x i32>, ptr addrspace(3) %518, align 16, !dbg !65
  %520 = or disjoint i32 %383, 2048, !dbg !65
  %521 = lshr i32 %520, 3, !dbg !65
  %522 = and i32 %521, 380, !dbg !65
  %523 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %522, !dbg !65
  %524 = getelementptr inbounds float, ptr addrspace(3) %523, i32 %520, !dbg !65
  %525 = load <4 x i32>, ptr addrspace(3) %524, align 16, !dbg !65
  %526 = or disjoint i32 %383, 3072, !dbg !65
  %527 = lshr i32 %526, 3, !dbg !65
  %528 = and i32 %527, 508, !dbg !65
  %529 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %528, !dbg !65
  %530 = getelementptr inbounds float, ptr addrspace(3) %529, i32 %526, !dbg !65
  %531 = load <4 x i32>, ptr addrspace(3) %530, align 16, !dbg !65
  %.extract = load i32, ptr addrspace(3) %513, align 16, !dbg !65
  %532 = getelementptr inbounds i8, ptr addrspace(3) %513, i32 4, !dbg !65
  %.extract16 = load i32, ptr addrspace(3) %532, align 4, !dbg !65
  %533 = getelementptr inbounds i8, ptr addrspace(3) %513, i32 8, !dbg !65
  %.extract17 = load i32, ptr addrspace(3) %533, align 8, !dbg !65
  %534 = getelementptr inbounds i8, ptr addrspace(3) %513, i32 12, !dbg !65
  %.extract18 = load i32, ptr addrspace(3) %534, align 4, !dbg !65
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract16, i32 %.extract17, i32 %.extract18, ptr addrspace(1) %373, i1 %28) #2, !dbg !65
  %.extract19 = extractelement <4 x i32> %519, i64 0, !dbg !65
  %.extract20 = extractelement <4 x i32> %519, i64 1, !dbg !65
  %.extract21 = extractelement <4 x i32> %519, i64 2, !dbg !65
  %.extract22 = extractelement <4 x i32> %519, i64 3, !dbg !65
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract19, i32 %.extract20, i32 %.extract21, i32 %.extract22, ptr addrspace(1) %375, i1 %29) #2, !dbg !65
  %.extract23 = extractelement <4 x i32> %525, i64 0, !dbg !65
  %.extract24 = extractelement <4 x i32> %525, i64 1, !dbg !65
  %.extract25 = extractelement <4 x i32> %525, i64 2, !dbg !65
  %.extract26 = extractelement <4 x i32> %525, i64 3, !dbg !65
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract23, i32 %.extract24, i32 %.extract25, i32 %.extract26, ptr addrspace(1) %377, i1 %30) #2, !dbg !65
  %.extract27 = extractelement <4 x i32> %531, i64 0, !dbg !65
  %.extract28 = extractelement <4 x i32> %531, i64 1, !dbg !65
  %.extract29 = extractelement <4 x i32> %531, i64 2, !dbg !65
  %.extract30 = extractelement <4 x i32> %531, i64 3, !dbg !65
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract27, i32 %.extract28, i32 %.extract29, i32 %.extract30, ptr addrspace(1) %379, i1 %31) #2, !dbg !65
  %535 = shl i32 %13, 7, !dbg !67
  %536 = add i32 %19, %535, !dbg !68
  %537 = sext i32 %536 to i64, !dbg !69
  %538 = getelementptr i8, ptr addrspace(1) %2, i64 %537, !dbg !69
  %539 = bitcast <4 x i8> %217 to i32, !dbg !70
  %540 = bitcast <4 x i8> %265 to i32, !dbg !70
  %541 = bitcast <4 x i8> %313 to i32, !dbg !70
  %542 = bitcast <4 x i8> %361 to i32, !dbg !70
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %539, i32 %540, i32 %541, i32 %542, ptr addrspace(1) %538, i1 %27) #2, !dbg !70
  ret void, !dbg !71
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cvafwkioxaymnejhlfejpncpy47kqzrtu664rztbzcc76ftx7sj7.py", directory: "inductor_cache/va")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_4, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_4, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_4", linkageName: "triton_poi_fused_max_pool2d_with_indices_4", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 31, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 19, scope: !7)
!23 = !DILocation(line: 34, column: 39, scope: !7)
!24 = !DILocation(line: 34, column: 49, scope: !7)
!25 = !DILocation(line: 34, column: 35, scope: !7)
!26 = !DILocation(line: 34, column: 44, scope: !7)
!27 = !DILocation(line: 34, column: 30, scope: !7)
!28 = !DILocation(line: 34, column: 54, scope: !7)
!29 = !DILocation(line: 35, column: 41, scope: !7)
!30 = !DILocation(line: 35, column: 50, scope: !7)
!31 = !DILocation(line: 35, column: 30, scope: !7)
!32 = !DILocation(line: 35, column: 60, scope: !7)
!33 = !DILocation(line: 36, column: 42, scope: !7)
!34 = !DILocation(line: 36, column: 51, scope: !7)
!35 = !DILocation(line: 36, column: 30, scope: !7)
!36 = !DILocation(line: 36, column: 61, scope: !7)
!37 = !DILocation(line: 37, column: 42, scope: !7)
!38 = !DILocation(line: 37, column: 51, scope: !7)
!39 = !DILocation(line: 37, column: 30, scope: !7)
!40 = !DILocation(line: 37, column: 61, scope: !7)
!41 = !DILocation(line: 118, column: 15, scope: !42, inlinedAt: !44)
!42 = distinct !DILexicalBlockFile(scope: !7, file: !43, discriminator: 0)
!43 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!44 = !DILocation(line: 38, column: 40, scope: !7)
!45 = !DILocation(line: 120, column: 21, scope: !42, inlinedAt: !44)
!46 = !DILocation(line: 120, column: 16, scope: !42, inlinedAt: !44)
!47 = !DILocation(line: 121, column: 29, scope: !42, inlinedAt: !44)
!48 = !DILocation(line: 118, column: 15, scope: !42, inlinedAt: !49)
!49 = !DILocation(line: 39, column: 40, scope: !7)
!50 = !DILocation(line: 120, column: 21, scope: !42, inlinedAt: !49)
!51 = !DILocation(line: 120, column: 16, scope: !42, inlinedAt: !49)
!52 = !DILocation(line: 121, column: 29, scope: !42, inlinedAt: !49)
!53 = !DILocation(line: 118, column: 15, scope: !42, inlinedAt: !54)
!54 = !DILocation(line: 40, column: 40, scope: !7)
!55 = !DILocation(line: 120, column: 21, scope: !42, inlinedAt: !54)
!56 = !DILocation(line: 120, column: 16, scope: !42, inlinedAt: !54)
!57 = !DILocation(line: 44, column: 33, scope: !7)
!58 = !DILocation(line: 47, column: 35, scope: !7)
!59 = !DILocation(line: 50, column: 35, scope: !7)
!60 = !DILocation(line: 51, column: 34, scope: !7)
!61 = !DILocation(line: 51, column: 45, scope: !7)
!62 = !DILocation(line: 51, column: 30, scope: !7)
!63 = !DILocation(line: 51, column: 39, scope: !7)
!64 = !DILocation(line: 51, column: 25, scope: !7)
!65 = !DILocation(line: 51, column: 56, scope: !7)
!66 = !DILocation(line: 121, column: 29, scope: !42, inlinedAt: !54)
!67 = !DILocation(line: 52, column: 34, scope: !7)
!68 = !DILocation(line: 52, column: 30, scope: !7)
!69 = !DILocation(line: 52, column: 25, scope: !7)
!70 = !DILocation(line: 52, column: 46, scope: !7)
!71 = !DILocation(line: 52, column: 4, scope: !7)
