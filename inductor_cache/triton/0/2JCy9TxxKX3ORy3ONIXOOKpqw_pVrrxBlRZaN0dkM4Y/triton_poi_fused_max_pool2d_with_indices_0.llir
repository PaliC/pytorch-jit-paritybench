; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_max_pool2d_with_indices_0(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 8, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 1, !dbg !12
  %8 = and i32 %7, 254, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = or disjoint i32 %9, 1, !dbg !13
  %11 = icmp slt i32 %9, 256, !dbg !14
  %12 = sdiv i32 %9, 4, !dbg !15
  %13 = srem i32 %10, 4, !dbg !16
  %14 = add i32 %9, -10, !dbg !17
  %15 = sext i32 %14 to i64, !dbg !18
  %16 = getelementptr float, ptr addrspace(1) %0, i64 %15, !dbg !18
  %17 = icmp sgt i32 %13, 0, !dbg !19
  %18 = add i32 %9, -9, !dbg !20
  %19 = add i32 %9, -8, !dbg !20
  %20 = sext i32 %18 to i64, !dbg !21
  %21 = getelementptr float, ptr addrspace(1) %0, i64 %20, !dbg !21
  %22 = sext i32 %19 to i64, !dbg !21
  %23 = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !21
  %24 = add nsw i32 %13, 1, !dbg !22
  %25 = icmp ult i32 %24, 4, !dbg !22
  %26 = add i32 %9, -7, !dbg !23
  %27 = add i32 %9, -6, !dbg !23
  %28 = sext i32 %26 to i64, !dbg !24
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !24
  %30 = sext i32 %27 to i64, !dbg !24
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !24
  %32 = add i32 %9, -5, !dbg !25
  %33 = add i32 %9, -4, !dbg !25
  %34 = sext i32 %32 to i64, !dbg !26
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !26
  %36 = sext i32 %33 to i64, !dbg !26
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !26
  %38 = add i32 %9, -3, !dbg !27
  %39 = add i32 %9, -2, !dbg !27
  %40 = sext i32 %38 to i64, !dbg !28
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !28
  %42 = sext i32 %39 to i64, !dbg !28
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !28
  %44 = add i32 %9, -1, !dbg !29
  %45 = sext i32 %44 to i64, !dbg !30
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !30
  %47 = sext i32 %10 to i64, !dbg !30
  %48 = getelementptr float, ptr addrspace(1) %0, i64 %47, !dbg !30
  %49 = getelementptr i8, ptr addrspace(1) %48, i64 -4, !dbg !30
  %50 = sext i32 %9 to i64, !dbg !31
  %51 = getelementptr float, ptr addrspace(1) %0, i64 %50, !dbg !31
  %52 = add i32 %9, 2, !dbg !32
  %53 = sext i32 %52 to i64, !dbg !33
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !33
  %55 = add i32 %9, 3, !dbg !34
  %56 = add i32 %9, 4, !dbg !34
  %57 = sext i32 %55 to i64, !dbg !35
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !35
  %59 = sext i32 %56 to i64, !dbg !35
  %60 = getelementptr float, ptr addrspace(1) %0, i64 %59, !dbg !35
  %61 = add i32 %9, 5, !dbg !36
  %62 = add i32 %9, 6, !dbg !36
  %63 = sext i32 %61 to i64, !dbg !37
  %64 = getelementptr float, ptr addrspace(1) %0, i64 %63, !dbg !37
  %65 = sext i32 %62 to i64, !dbg !37
  %66 = getelementptr float, ptr addrspace(1) %0, i64 %65, !dbg !37
  %67 = insertelement <2 x i32> poison, i32 %12, i64 0, !dbg !38
  %68 = insertelement <2 x i32> %67, i32 %9, i64 1, !dbg !38
  %69 = srem <2 x i32> %68, splat (i32 4), !dbg !38
  %70 = extractelement <2 x i32> %69, i64 0, !dbg !39
  %71 = icmp sgt i32 %70, 1, !dbg !40
  %72 = extractelement <2 x i32> %69, i64 1, !dbg !41
  %73 = icmp sgt i32 %72, 1, !dbg !42
  %74 = and i1 %73, %71, !dbg !43
  %75 = and i1 %11, %74, !dbg !44
  %76 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %16, i1 %75, i32 -8388608, i1 %75, i32 -8388608, i1 %75) #1, !dbg !45
  %77 = extractvalue { i32, i32 } %76, 0, !dbg !45
  %78 = extractvalue { i32, i32 } %76, 1, !dbg !45
  %79 = bitcast i32 %77 to float, !dbg !45
  %80 = bitcast i32 %78 to float, !dbg !45
  %81 = icmp sgt i32 %72, 0, !dbg !19
  %82 = and i1 %81, %71, !dbg !46
  %83 = and i1 %17, %71, !dbg !46
  %84 = and i1 %11, %82, !dbg !47
  %85 = and i1 %11, %83, !dbg !47
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %21, i1 %84, i32 -8388608, i1 %84) #1, !dbg !48
  %87 = bitcast i32 %86 to float, !dbg !48
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %23, i1 %85, i32 -8388608, i1 %85) #1, !dbg !48
  %89 = bitcast i32 %88 to float, !dbg !48
  %90 = fcmp ogt float %87, %79, !dbg !49
  %91 = fcmp ogt float %89, %80, !dbg !49
  %92 = fcmp uno float %87, 0.000000e+00, !dbg !53
  %93 = fcmp uno float %89, 0.000000e+00, !dbg !53
  %94 = or i1 %90, %92, !dbg !54
  %95 = or i1 %91, %93, !dbg !54
  %96 = select i1 %94, float %87, float %79, !dbg !55
  %97 = select i1 %95, float %89, float %80, !dbg !55
  %98 = icmp sgt i32 %72, -1, !dbg !56
  %99 = and i1 %98, %71, !dbg !57
  %100 = and i1 %11, %99, !dbg !58
  %101 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %23, i1 %100, i32 -8388608, i1 %100, i32 -8388608, i1 %100) #1, !dbg !59
  %102 = extractvalue { i32, i32 } %101, 0, !dbg !59
  %103 = extractvalue { i32, i32 } %101, 1, !dbg !59
  %104 = bitcast i32 %102 to float, !dbg !59
  %105 = bitcast i32 %103 to float, !dbg !59
  %106 = fcmp olt float %96, %104, !dbg !60
  %107 = fcmp olt float %97, %105, !dbg !60
  %108 = fcmp uno float %104, 0.000000e+00, !dbg !62
  %109 = fcmp uno float %105, 0.000000e+00, !dbg !62
  %110 = or i1 %106, %108, !dbg !63
  %111 = or i1 %109, %107, !dbg !63
  %112 = select i1 %110, float %104, float %96, !dbg !64
  %113 = select i1 %111, float %105, float %97, !dbg !64
  %114 = icmp ult i32 %72, 4, !dbg !22
  %115 = and i1 %114, %71, !dbg !65
  %116 = and i1 %25, %71, !dbg !65
  %117 = and i1 %11, %115, !dbg !66
  %118 = and i1 %11, %116, !dbg !66
  %119 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %29, i1 %117, i32 -8388608, i1 %117) #1, !dbg !67
  %120 = bitcast i32 %119 to float, !dbg !67
  %121 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %31, i1 %118, i32 -8388608, i1 %118) #1, !dbg !67
  %122 = bitcast i32 %121 to float, !dbg !67
  %123 = fcmp olt float %112, %120, !dbg !68
  %124 = fcmp olt float %113, %122, !dbg !68
  %125 = fcmp uno float %120, 0.000000e+00, !dbg !70
  %126 = fcmp uno float %122, 0.000000e+00, !dbg !70
  %127 = or i1 %125, %123, !dbg !71
  %128 = or i1 %126, %124, !dbg !71
  %129 = select i1 %127, float %120, float %112, !dbg !72
  %130 = select i1 %128, float %122, float %113, !dbg !72
  %131 = add nsw <2 x i32> %69, splat (i32 2), !dbg !73
  %132 = extractelement <2 x i32> %131, i64 1, !dbg !74
  %133 = icmp ult i32 %132, 4, !dbg !75
  %134 = and i1 %71, %133, !dbg !76
  %135 = and i1 %11, %134, !dbg !77
  %136 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %31, i1 %135, i32 -8388608, i1 %135, i32 -8388608, i1 %135) #1, !dbg !78
  %137 = extractvalue { i32, i32 } %136, 0, !dbg !78
  %138 = extractvalue { i32, i32 } %136, 1, !dbg !78
  %139 = bitcast i32 %137 to float, !dbg !78
  %140 = bitcast i32 %138 to float, !dbg !78
  %141 = fcmp olt float %129, %139, !dbg !79
  %142 = fcmp olt float %130, %140, !dbg !79
  %143 = fcmp uno float %139, 0.000000e+00, !dbg !81
  %144 = fcmp uno float %140, 0.000000e+00, !dbg !81
  %145 = or i1 %143, %141, !dbg !82
  %146 = or i1 %144, %142, !dbg !82
  %147 = select i1 %145, float %139, float %129, !dbg !83
  %148 = select i1 %146, float %140, float %130, !dbg !83
  %149 = icmp sgt i32 %70, 0, !dbg !84
  %150 = and i1 %73, %149, !dbg !85
  %151 = and i1 %11, %150, !dbg !86
  %152 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %31, i1 %151, i32 -8388608, i1 %151, i32 -8388608, i1 %151) #1, !dbg !87
  %153 = extractvalue { i32, i32 } %152, 0, !dbg !87
  %154 = extractvalue { i32, i32 } %152, 1, !dbg !87
  %155 = bitcast i32 %153 to float, !dbg !87
  %156 = bitcast i32 %154 to float, !dbg !87
  %157 = fcmp olt float %147, %155, !dbg !88
  %158 = fcmp olt float %148, %156, !dbg !88
  %159 = fcmp uno float %155, 0.000000e+00, !dbg !90
  %160 = fcmp uno float %156, 0.000000e+00, !dbg !90
  %161 = or i1 %159, %157, !dbg !91
  %162 = or i1 %160, %158, !dbg !91
  %163 = select i1 %161, float %155, float %147, !dbg !92
  %164 = select i1 %162, float %156, float %148, !dbg !92
  %165 = and i1 %81, %149, !dbg !93
  %166 = and i1 %17, %149, !dbg !93
  %167 = and i1 %11, %165, !dbg !94
  %168 = and i1 %11, %166, !dbg !94
  %169 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %35, i1 %167, i32 -8388608, i1 %167) #1, !dbg !95
  %170 = bitcast i32 %169 to float, !dbg !95
  %171 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %37, i1 %168, i32 -8388608, i1 %168) #1, !dbg !95
  %172 = bitcast i32 %171 to float, !dbg !95
  %173 = fcmp olt float %163, %170, !dbg !96
  %174 = fcmp olt float %164, %172, !dbg !96
  %175 = fcmp uno float %170, 0.000000e+00, !dbg !98
  %176 = fcmp uno float %172, 0.000000e+00, !dbg !98
  %177 = or i1 %175, %173, !dbg !99
  %178 = or i1 %176, %174, !dbg !99
  %179 = select i1 %177, float %170, float %163, !dbg !100
  %180 = select i1 %178, float %172, float %164, !dbg !100
  %181 = and i1 %98, %149, !dbg !101
  %182 = and i1 %11, %181, !dbg !102
  %183 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %37, i1 %182, i32 -8388608, i1 %182, i32 -8388608, i1 %182) #1, !dbg !103
  %184 = extractvalue { i32, i32 } %183, 0, !dbg !103
  %185 = extractvalue { i32, i32 } %183, 1, !dbg !103
  %186 = bitcast i32 %184 to float, !dbg !103
  %187 = bitcast i32 %185 to float, !dbg !103
  %188 = fcmp olt float %179, %186, !dbg !104
  %189 = fcmp olt float %180, %187, !dbg !104
  %190 = fcmp uno float %186, 0.000000e+00, !dbg !106
  %191 = fcmp uno float %187, 0.000000e+00, !dbg !106
  %192 = or i1 %190, %188, !dbg !107
  %193 = or i1 %191, %189, !dbg !107
  %194 = select i1 %192, float %186, float %179, !dbg !108
  %195 = select i1 %193, float %187, float %180, !dbg !108
  %196 = and i1 %114, %149, !dbg !109
  %197 = and i1 %25, %149, !dbg !109
  %198 = and i1 %11, %196, !dbg !110
  %199 = and i1 %11, %197, !dbg !110
  %200 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %41, i1 %198, i32 -8388608, i1 %198) #1, !dbg !111
  %201 = bitcast i32 %200 to float, !dbg !111
  %202 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %43, i1 %199, i32 -8388608, i1 %199) #1, !dbg !111
  %203 = bitcast i32 %202 to float, !dbg !111
  %204 = fcmp olt float %194, %201, !dbg !112
  %205 = fcmp olt float %195, %203, !dbg !112
  %206 = fcmp uno float %201, 0.000000e+00, !dbg !114
  %207 = fcmp uno float %203, 0.000000e+00, !dbg !114
  %208 = or i1 %206, %204, !dbg !115
  %209 = or i1 %207, %205, !dbg !115
  %210 = select i1 %208, float %201, float %194, !dbg !116
  %211 = select i1 %209, float %203, float %195, !dbg !116
  %212 = and i1 %149, %133, !dbg !117
  %213 = and i1 %11, %212, !dbg !118
  %214 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %43, i1 %213, i32 -8388608, i1 %213, i32 -8388608, i1 %213) #1, !dbg !119
  %215 = extractvalue { i32, i32 } %214, 0, !dbg !119
  %216 = extractvalue { i32, i32 } %214, 1, !dbg !119
  %217 = bitcast i32 %215 to float, !dbg !119
  %218 = bitcast i32 %216 to float, !dbg !119
  %219 = fcmp olt float %210, %217, !dbg !120
  %220 = fcmp olt float %211, %218, !dbg !120
  %221 = fcmp uno float %217, 0.000000e+00, !dbg !122
  %222 = fcmp uno float %218, 0.000000e+00, !dbg !122
  %223 = or i1 %221, %219, !dbg !123
  %224 = or i1 %222, %220, !dbg !123
  %225 = select i1 %223, float %217, float %210, !dbg !124
  %226 = select i1 %224, float %218, float %211, !dbg !124
  %227 = icmp sgt i32 %70, -1, !dbg !125
  %228 = and i1 %73, %227, !dbg !126
  %229 = and i1 %11, %228, !dbg !127
  %230 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %43, i1 %229, i32 -8388608, i1 %229, i32 -8388608, i1 %229) #1, !dbg !128
  %231 = extractvalue { i32, i32 } %230, 0, !dbg !128
  %232 = extractvalue { i32, i32 } %230, 1, !dbg !128
  %233 = bitcast i32 %231 to float, !dbg !128
  %234 = bitcast i32 %232 to float, !dbg !128
  %235 = fcmp olt float %225, %233, !dbg !129
  %236 = fcmp olt float %226, %234, !dbg !129
  %237 = fcmp uno float %233, 0.000000e+00, !dbg !131
  %238 = fcmp uno float %234, 0.000000e+00, !dbg !131
  %239 = or i1 %237, %235, !dbg !132
  %240 = or i1 %238, %236, !dbg !132
  %241 = select i1 %239, float %233, float %225, !dbg !133
  %242 = select i1 %240, float %234, float %226, !dbg !133
  %243 = and i1 %81, %227, !dbg !134
  %244 = and i1 %17, %227, !dbg !134
  %245 = and i1 %11, %243, !dbg !135
  %246 = and i1 %11, %244, !dbg !135
  %247 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %46, i1 %245, i32 -8388608, i1 %245) #1, !dbg !136
  %248 = bitcast i32 %247 to float, !dbg !136
  %249 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %49, i1 %246, i32 -8388608, i1 %246) #1, !dbg !136
  %250 = bitcast i32 %249 to float, !dbg !136
  %251 = fcmp olt float %241, %248, !dbg !137
  %252 = fcmp olt float %242, %250, !dbg !137
  %253 = fcmp uno float %248, 0.000000e+00, !dbg !139
  %254 = fcmp uno float %250, 0.000000e+00, !dbg !139
  %255 = or i1 %253, %251, !dbg !140
  %256 = or i1 %254, %252, !dbg !140
  %257 = select i1 %255, float %248, float %241, !dbg !141
  %258 = select i1 %256, float %250, float %242, !dbg !141
  %259 = or i32 %70, %72, !dbg !142
  %260 = icmp sgt i32 %259, -1, !dbg !142
  %261 = and i1 %11, %260, !dbg !143
  %262 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %51, i1 %261, i32 -8388608, i1 %261, i32 -8388608, i1 %261) #1, !dbg !144
  %263 = extractvalue { i32, i32 } %262, 0, !dbg !144
  %264 = extractvalue { i32, i32 } %262, 1, !dbg !144
  %265 = bitcast i32 %263 to float, !dbg !144
  %266 = bitcast i32 %264 to float, !dbg !144
  %267 = fcmp olt float %257, %265, !dbg !145
  %268 = fcmp olt float %258, %266, !dbg !145
  %269 = fcmp uno float %265, 0.000000e+00, !dbg !147
  %270 = fcmp uno float %266, 0.000000e+00, !dbg !147
  %271 = or i1 %269, %267, !dbg !148
  %272 = or i1 %270, %268, !dbg !148
  %273 = select i1 %271, float %265, float %257, !dbg !149
  %274 = select i1 %272, float %266, float %258, !dbg !149
  %275 = and i1 %114, %227, !dbg !150
  %276 = and i1 %25, %227, !dbg !150
  %277 = and i1 %11, %275, !dbg !151
  %278 = and i1 %11, %276, !dbg !151
  %279 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %48, i1 %277, i32 -8388608, i1 %277) #1, !dbg !152
  %280 = bitcast i32 %279 to float, !dbg !152
  %281 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %54, i1 %278, i32 -8388608, i1 %278) #1, !dbg !152
  %282 = bitcast i32 %281 to float, !dbg !152
  %283 = fcmp olt float %273, %280, !dbg !153
  %284 = fcmp olt float %274, %282, !dbg !153
  %285 = fcmp uno float %280, 0.000000e+00, !dbg !155
  %286 = fcmp uno float %282, 0.000000e+00, !dbg !155
  %287 = or i1 %285, %283, !dbg !156
  %288 = or i1 %286, %284, !dbg !156
  %289 = select i1 %287, float %280, float %273, !dbg !157
  %290 = select i1 %288, float %282, float %274, !dbg !157
  %291 = and i1 %227, %133, !dbg !158
  %292 = and i1 %11, %291, !dbg !159
  %293 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %54, i1 %292, i32 -8388608, i1 %292, i32 -8388608, i1 %292) #1, !dbg !160
  %294 = extractvalue { i32, i32 } %293, 0, !dbg !160
  %295 = extractvalue { i32, i32 } %293, 1, !dbg !160
  %296 = bitcast i32 %294 to float, !dbg !160
  %297 = bitcast i32 %295 to float, !dbg !160
  %298 = fcmp olt float %289, %296, !dbg !161
  %299 = fcmp olt float %290, %297, !dbg !161
  %300 = fcmp uno float %296, 0.000000e+00, !dbg !163
  %301 = fcmp uno float %297, 0.000000e+00, !dbg !163
  %302 = or i1 %300, %298, !dbg !164
  %303 = or i1 %301, %299, !dbg !164
  %304 = select i1 %302, float %296, float %289, !dbg !165
  %305 = select i1 %303, float %297, float %290, !dbg !165
  %306 = add nsw i32 %70, 1, !dbg !39
  %307 = icmp ult i32 %306, 4, !dbg !39
  %308 = and i1 %73, %307, !dbg !166
  %309 = and i1 %11, %308, !dbg !167
  %310 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %54, i1 %309, i32 -8388608, i1 %309, i32 -8388608, i1 %309) #1, !dbg !168
  %311 = extractvalue { i32, i32 } %310, 0, !dbg !168
  %312 = extractvalue { i32, i32 } %310, 1, !dbg !168
  %313 = bitcast i32 %311 to float, !dbg !168
  %314 = bitcast i32 %312 to float, !dbg !168
  %315 = fcmp olt float %304, %313, !dbg !169
  %316 = fcmp olt float %305, %314, !dbg !169
  %317 = fcmp uno float %313, 0.000000e+00, !dbg !171
  %318 = fcmp uno float %314, 0.000000e+00, !dbg !171
  %319 = or i1 %317, %315, !dbg !172
  %320 = or i1 %318, %316, !dbg !172
  %321 = select i1 %319, float %313, float %304, !dbg !173
  %322 = select i1 %320, float %314, float %305, !dbg !173
  %323 = and i1 %81, %307, !dbg !174
  %324 = and i1 %17, %307, !dbg !174
  %325 = and i1 %11, %323, !dbg !175
  %326 = and i1 %11, %324, !dbg !175
  %327 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %58, i1 %325, i32 -8388608, i1 %325) #1, !dbg !176
  %328 = bitcast i32 %327 to float, !dbg !176
  %329 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %60, i1 %326, i32 -8388608, i1 %326) #1, !dbg !176
  %330 = bitcast i32 %329 to float, !dbg !176
  %331 = fcmp olt float %321, %328, !dbg !177
  %332 = fcmp olt float %322, %330, !dbg !177
  %333 = fcmp uno float %328, 0.000000e+00, !dbg !179
  %334 = fcmp uno float %330, 0.000000e+00, !dbg !179
  %335 = or i1 %333, %331, !dbg !180
  %336 = or i1 %334, %332, !dbg !180
  %337 = select i1 %335, float %328, float %321, !dbg !181
  %338 = select i1 %336, float %330, float %322, !dbg !181
  %339 = and i1 %98, %307, !dbg !182
  %340 = and i1 %11, %339, !dbg !183
  %341 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %60, i1 %340, i32 -8388608, i1 %340, i32 -8388608, i1 %340) #1, !dbg !184
  %342 = extractvalue { i32, i32 } %341, 0, !dbg !184
  %343 = extractvalue { i32, i32 } %341, 1, !dbg !184
  %344 = bitcast i32 %342 to float, !dbg !184
  %345 = bitcast i32 %343 to float, !dbg !184
  %346 = fcmp olt float %337, %344, !dbg !185
  %347 = fcmp olt float %338, %345, !dbg !185
  %348 = fcmp uno float %344, 0.000000e+00, !dbg !187
  %349 = fcmp uno float %345, 0.000000e+00, !dbg !187
  %350 = or i1 %348, %346, !dbg !188
  %351 = or i1 %349, %347, !dbg !188
  %352 = select i1 %350, float %344, float %337, !dbg !189
  %353 = select i1 %351, float %345, float %338, !dbg !189
  %354 = or i32 %306, %72, !dbg !190
  %355 = icmp ult i32 %354, 4, !dbg !190
  %356 = or i32 %306, %24, !dbg !190
  %357 = icmp ult i32 %356, 4, !dbg !190
  %358 = and i1 %11, %355, !dbg !191
  %359 = and i1 %11, %357, !dbg !191
  %360 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %64, i1 %358, i32 -8388608, i1 %358) #1, !dbg !192
  %361 = bitcast i32 %360 to float, !dbg !192
  %362 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %66, i1 %359, i32 -8388608, i1 %359) #1, !dbg !192
  %363 = bitcast i32 %362 to float, !dbg !192
  %364 = fcmp olt float %352, %361, !dbg !193
  %365 = fcmp olt float %353, %363, !dbg !193
  %366 = fcmp uno float %361, 0.000000e+00, !dbg !195
  %367 = fcmp uno float %363, 0.000000e+00, !dbg !195
  %368 = or i1 %366, %364, !dbg !196
  %369 = or i1 %367, %365, !dbg !196
  %370 = select i1 %368, float %361, float %352, !dbg !197
  %371 = select i1 %369, float %363, float %353, !dbg !197
  %372 = or i32 %306, %132, !dbg !198
  %373 = icmp ult i32 %372, 4, !dbg !198
  %374 = and i1 %11, %373, !dbg !199
  %375 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %66, i1 %374, i32 -8388608, i1 %374, i32 -8388608, i1 %374) #1, !dbg !200
  %376 = extractvalue { i32, i32 } %375, 0, !dbg !200
  %377 = extractvalue { i32, i32 } %375, 1, !dbg !200
  %378 = bitcast i32 %376 to float, !dbg !200
  %379 = bitcast i32 %377 to float, !dbg !200
  %380 = fcmp olt float %370, %378, !dbg !201
  %381 = fcmp olt float %371, %379, !dbg !201
  %382 = fcmp uno float %378, 0.000000e+00, !dbg !203
  %383 = fcmp uno float %379, 0.000000e+00, !dbg !203
  %384 = or i1 %382, %380, !dbg !204
  %385 = or i1 %383, %381, !dbg !204
  %386 = select i1 %384, float %378, float %370, !dbg !205
  %387 = select i1 %385, float %379, float %371, !dbg !205
  %388 = extractelement <2 x i32> %131, i64 0, !dbg !74
  %389 = icmp ult i32 %388, 4, !dbg !73
  %390 = and i1 %73, %389, !dbg !206
  %391 = and i1 %11, %390, !dbg !207
  %392 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %66, i1 %391, i32 -8388608, i1 %391, i32 -8388608, i1 %391) #1, !dbg !208
  %393 = extractvalue { i32, i32 } %392, 0, !dbg !208
  %394 = extractvalue { i32, i32 } %392, 1, !dbg !208
  %395 = bitcast i32 %393 to float, !dbg !208
  %396 = bitcast i32 %394 to float, !dbg !208
  %397 = fcmp olt float %386, %395, !dbg !209
  %398 = fcmp olt float %387, %396, !dbg !209
  %399 = fcmp uno float %395, 0.000000e+00, !dbg !211
  %400 = fcmp uno float %396, 0.000000e+00, !dbg !211
  %401 = or i1 %399, %397, !dbg !212
  %402 = or i1 %400, %398, !dbg !212
  %403 = select i1 %401, float %395, float %386, !dbg !213
  %404 = select i1 %402, float %396, float %387, !dbg !213
  %405 = and i1 %81, %389, !dbg !214
  %406 = and i1 %17, %389, !dbg !214
  %407 = add i32 %9, 7, !dbg !215
  %408 = add i32 %9, 8, !dbg !215
  %409 = sext i32 %407 to i64, !dbg !216
  %410 = getelementptr float, ptr addrspace(1) %0, i64 %409, !dbg !216
  %411 = sext i32 %408 to i64, !dbg !216
  %412 = getelementptr float, ptr addrspace(1) %0, i64 %411, !dbg !216
  %413 = and i1 %11, %405, !dbg !217
  %414 = and i1 %11, %406, !dbg !217
  %415 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %410, i1 %413, i32 -8388608, i1 %413) #1, !dbg !218
  %416 = bitcast i32 %415 to float, !dbg !218
  %417 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %412, i1 %414, i32 -8388608, i1 %414) #1, !dbg !218
  %418 = bitcast i32 %417 to float, !dbg !218
  %419 = fcmp olt float %403, %416, !dbg !219
  %420 = fcmp olt float %404, %418, !dbg !219
  %421 = fcmp uno float %416, 0.000000e+00, !dbg !221
  %422 = fcmp uno float %418, 0.000000e+00, !dbg !221
  %423 = or i1 %421, %419, !dbg !222
  %424 = or i1 %422, %420, !dbg !222
  %425 = select i1 %423, float %416, float %403, !dbg !223
  %426 = select i1 %424, float %418, float %404, !dbg !223
  %427 = and i1 %98, %389, !dbg !224
  %428 = and i1 %11, %427, !dbg !225
  %429 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %412, i1 %428, i32 -8388608, i1 %428, i32 -8388608, i1 %428) #1, !dbg !226
  %430 = extractvalue { i32, i32 } %429, 0, !dbg !226
  %431 = extractvalue { i32, i32 } %429, 1, !dbg !226
  %432 = bitcast i32 %430 to float, !dbg !226
  %433 = bitcast i32 %431 to float, !dbg !226
  %434 = fcmp olt float %425, %432, !dbg !227
  %435 = fcmp olt float %426, %433, !dbg !227
  %436 = fcmp uno float %432, 0.000000e+00, !dbg !229
  %437 = fcmp uno float %433, 0.000000e+00, !dbg !229
  %438 = or i1 %436, %434, !dbg !230
  %439 = or i1 %437, %435, !dbg !230
  %440 = select i1 %438, float %432, float %425, !dbg !231
  %441 = select i1 %439, float %433, float %426, !dbg !231
  %442 = or i32 %388, %72, !dbg !41
  %443 = icmp ult i32 %442, 4, !dbg !41
  %444 = or i32 %388, %24, !dbg !41
  %445 = icmp ult i32 %444, 4, !dbg !41
  %446 = add i32 %9, 9, !dbg !232
  %447 = add i32 %9, 10, !dbg !232
  %448 = sext i32 %446 to i64, !dbg !233
  %449 = getelementptr float, ptr addrspace(1) %0, i64 %448, !dbg !233
  %450 = sext i32 %447 to i64, !dbg !233
  %451 = getelementptr float, ptr addrspace(1) %0, i64 %450, !dbg !233
  %452 = and i1 %11, %443, !dbg !234
  %453 = and i1 %11, %445, !dbg !234
  %454 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %449, i1 %452, i32 -8388608, i1 %452) #1, !dbg !235
  %455 = bitcast i32 %454 to float, !dbg !235
  %456 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %451, i1 %453, i32 -8388608, i1 %453) #1, !dbg !235
  %457 = bitcast i32 %456 to float, !dbg !235
  %458 = fcmp olt float %440, %455, !dbg !236
  %459 = fcmp olt float %441, %457, !dbg !236
  %460 = fcmp uno float %455, 0.000000e+00, !dbg !238
  %461 = fcmp uno float %457, 0.000000e+00, !dbg !238
  %462 = or i1 %460, %458, !dbg !239
  %463 = or i1 %461, %459, !dbg !239
  %464 = select i1 %462, float %455, float %440, !dbg !240
  %465 = select i1 %463, float %457, float %441, !dbg !240
  %466 = or i32 %388, %132, !dbg !74
  %467 = icmp ult i32 %466, 4, !dbg !74
  %468 = and i1 %11, %467, !dbg !241
  %469 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %451, i1 %468, i32 -8388608, i1 %468, i32 -8388608, i1 %468) #1, !dbg !242
  %470 = extractvalue { i32, i32 } %469, 0, !dbg !242
  %471 = extractvalue { i32, i32 } %469, 1, !dbg !242
  %472 = bitcast i32 %470 to float, !dbg !242
  %473 = bitcast i32 %471 to float, !dbg !242
  %474 = fcmp olt float %464, %472, !dbg !243
  %475 = fcmp olt float %465, %473, !dbg !243
  %476 = fcmp uno float %472, 0.000000e+00, !dbg !245
  %477 = fcmp uno float %473, 0.000000e+00, !dbg !245
  %478 = or i1 %476, %474, !dbg !246
  %479 = or i1 %477, %475, !dbg !246
  %480 = getelementptr float, ptr addrspace(1) %1, i64 %50, !dbg !247
  %481 = bitcast float %464 to i32, !dbg !248
  %482 = select i1 %478, i32 %470, i32 %481, !dbg !249
  %483 = bitcast float %465 to i32, !dbg !248
  %484 = select i1 %479, i32 %471, i32 %483, !dbg !249
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %482, i32 %484, ptr addrspace(1) %480, i1 %11) #1, !dbg !248
  ret void, !dbg !250
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cf2w4346vyr6r6iogaam62iqehahp5wy64kyfplhzjar5qaqxyx4.py", directory: "inductor_cache/f2")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_0, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_0", linkageName: "triton_poi_fused_max_pool2d_with_indices_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 38, column: 39, scope: !7)
!18 = !DILocation(line: 38, column: 31, scope: !7)
!19 = !DILocation(line: 40, column: 21, scope: !7)
!20 = !DILocation(line: 44, column: 38, scope: !7)
!21 = !DILocation(line: 44, column: 31, scope: !7)
!22 = !DILocation(line: 56, column: 20, scope: !7)
!23 = !DILocation(line: 58, column: 38, scope: !7)
!24 = !DILocation(line: 58, column: 31, scope: !7)
!25 = !DILocation(line: 75, column: 38, scope: !7)
!26 = !DILocation(line: 75, column: 31, scope: !7)
!27 = !DILocation(line: 81, column: 38, scope: !7)
!28 = !DILocation(line: 81, column: 31, scope: !7)
!29 = !DILocation(line: 94, column: 38, scope: !7)
!30 = !DILocation(line: 94, column: 31, scope: !7)
!31 = !DILocation(line: 97, column: 31, scope: !7)
!32 = !DILocation(line: 100, column: 35, scope: !7)
!33 = !DILocation(line: 100, column: 31, scope: !7)
!34 = !DILocation(line: 113, column: 35, scope: !7)
!35 = !DILocation(line: 113, column: 31, scope: !7)
!36 = !DILocation(line: 119, column: 35, scope: !7)
!37 = !DILocation(line: 119, column: 31, scope: !7)
!38 = !DILocation(line: 24, column: 26, scope: !7)
!39 = !DILocation(line: 108, column: 20, scope: !7)
!40 = !DILocation(line: 29, column: 19, scope: !7)
!41 = !DILocation(line: 137, column: 22, scope: !7)
!42 = !DILocation(line: 34, column: 19, scope: !7)
!43 = !DILocation(line: 37, column: 19, scope: !7)
!44 = !DILocation(line: 38, column: 52, scope: !7)
!45 = !DILocation(line: 38, column: 44, scope: !7)
!46 = !DILocation(line: 43, column: 19, scope: !7)
!47 = !DILocation(line: 44, column: 51, scope: !7)
!48 = !DILocation(line: 44, column: 43, scope: !7)
!49 = !DILocation(line: 118, column: 15, scope: !50, inlinedAt: !52)
!50 = distinct !DILexicalBlockFile(scope: !7, file: !51, discriminator: 0)
!51 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!52 = !DILocation(line: 45, column: 42, scope: !7)
!53 = !DILocation(line: 120, column: 21, scope: !50, inlinedAt: !52)
!54 = !DILocation(line: 120, column: 16, scope: !50, inlinedAt: !52)
!55 = !DILocation(line: 121, column: 29, scope: !50, inlinedAt: !52)
!56 = !DILocation(line: 47, column: 21, scope: !7)
!57 = !DILocation(line: 50, column: 19, scope: !7)
!58 = !DILocation(line: 51, column: 51, scope: !7)
!59 = !DILocation(line: 51, column: 43, scope: !7)
!60 = !DILocation(line: 118, column: 15, scope: !50, inlinedAt: !61)
!61 = !DILocation(line: 52, column: 42, scope: !7)
!62 = !DILocation(line: 120, column: 21, scope: !50, inlinedAt: !61)
!63 = !DILocation(line: 120, column: 16, scope: !50, inlinedAt: !61)
!64 = !DILocation(line: 121, column: 29, scope: !50, inlinedAt: !61)
!65 = !DILocation(line: 57, column: 19, scope: !7)
!66 = !DILocation(line: 58, column: 51, scope: !7)
!67 = !DILocation(line: 58, column: 43, scope: !7)
!68 = !DILocation(line: 118, column: 15, scope: !50, inlinedAt: !69)
!69 = !DILocation(line: 59, column: 42, scope: !7)
!70 = !DILocation(line: 120, column: 21, scope: !50, inlinedAt: !69)
!71 = !DILocation(line: 120, column: 16, scope: !50, inlinedAt: !69)
!72 = !DILocation(line: 121, column: 29, scope: !50, inlinedAt: !69)
!73 = !DILocation(line: 127, column: 21, scope: !7)
!74 = !DILocation(line: 140, column: 22, scope: !7)
!75 = !DILocation(line: 63, column: 20, scope: !7)
!76 = !DILocation(line: 64, column: 19, scope: !7)
!77 = !DILocation(line: 65, column: 51, scope: !7)
!78 = !DILocation(line: 65, column: 43, scope: !7)
!79 = !DILocation(line: 118, column: 15, scope: !50, inlinedAt: !80)
!80 = !DILocation(line: 66, column: 42, scope: !7)
!81 = !DILocation(line: 120, column: 21, scope: !50, inlinedAt: !80)
!82 = !DILocation(line: 120, column: 16, scope: !50, inlinedAt: !80)
!83 = !DILocation(line: 121, column: 29, scope: !50, inlinedAt: !80)
!84 = !DILocation(line: 68, column: 21, scope: !7)
!85 = !DILocation(line: 71, column: 20, scope: !7)
!86 = !DILocation(line: 72, column: 51, scope: !7)
!87 = !DILocation(line: 72, column: 43, scope: !7)
!88 = !DILocation(line: 118, column: 15, scope: !50, inlinedAt: !89)
!89 = !DILocation(line: 73, column: 42, scope: !7)
!90 = !DILocation(line: 120, column: 21, scope: !50, inlinedAt: !89)
!91 = !DILocation(line: 120, column: 16, scope: !50, inlinedAt: !89)
!92 = !DILocation(line: 121, column: 29, scope: !50, inlinedAt: !89)
!93 = !DILocation(line: 74, column: 20, scope: !7)
!94 = !DILocation(line: 75, column: 51, scope: !7)
!95 = !DILocation(line: 75, column: 43, scope: !7)
!96 = !DILocation(line: 118, column: 15, scope: !50, inlinedAt: !97)
!97 = !DILocation(line: 76, column: 42, scope: !7)
!98 = !DILocation(line: 120, column: 21, scope: !50, inlinedAt: !97)
!99 = !DILocation(line: 120, column: 16, scope: !50, inlinedAt: !97)
!100 = !DILocation(line: 121, column: 29, scope: !50, inlinedAt: !97)
!101 = !DILocation(line: 77, column: 20, scope: !7)
!102 = !DILocation(line: 78, column: 51, scope: !7)
!103 = !DILocation(line: 78, column: 43, scope: !7)
!104 = !DILocation(line: 118, column: 15, scope: !50, inlinedAt: !105)
!105 = !DILocation(line: 79, column: 42, scope: !7)
!106 = !DILocation(line: 120, column: 21, scope: !50, inlinedAt: !105)
!107 = !DILocation(line: 120, column: 16, scope: !50, inlinedAt: !105)
!108 = !DILocation(line: 121, column: 29, scope: !50, inlinedAt: !105)
!109 = !DILocation(line: 80, column: 20, scope: !7)
!110 = !DILocation(line: 81, column: 51, scope: !7)
!111 = !DILocation(line: 81, column: 43, scope: !7)
!112 = !DILocation(line: 118, column: 15, scope: !50, inlinedAt: !113)
!113 = !DILocation(line: 82, column: 42, scope: !7)
!114 = !DILocation(line: 120, column: 21, scope: !50, inlinedAt: !113)
!115 = !DILocation(line: 120, column: 16, scope: !50, inlinedAt: !113)
!116 = !DILocation(line: 121, column: 29, scope: !50, inlinedAt: !113)
!117 = !DILocation(line: 83, column: 20, scope: !7)
!118 = !DILocation(line: 84, column: 51, scope: !7)
!119 = !DILocation(line: 84, column: 43, scope: !7)
!120 = !DILocation(line: 118, column: 15, scope: !50, inlinedAt: !121)
!121 = !DILocation(line: 85, column: 42, scope: !7)
!122 = !DILocation(line: 120, column: 21, scope: !50, inlinedAt: !121)
!123 = !DILocation(line: 120, column: 16, scope: !50, inlinedAt: !121)
!124 = !DILocation(line: 121, column: 29, scope: !50, inlinedAt: !121)
!125 = !DILocation(line: 87, column: 21, scope: !7)
!126 = !DILocation(line: 90, column: 20, scope: !7)
!127 = !DILocation(line: 91, column: 51, scope: !7)
!128 = !DILocation(line: 91, column: 43, scope: !7)
!129 = !DILocation(line: 118, column: 15, scope: !50, inlinedAt: !130)
!130 = !DILocation(line: 92, column: 42, scope: !7)
!131 = !DILocation(line: 120, column: 21, scope: !50, inlinedAt: !130)
!132 = !DILocation(line: 120, column: 16, scope: !50, inlinedAt: !130)
!133 = !DILocation(line: 121, column: 29, scope: !50, inlinedAt: !130)
!134 = !DILocation(line: 93, column: 20, scope: !7)
!135 = !DILocation(line: 94, column: 51, scope: !7)
!136 = !DILocation(line: 94, column: 43, scope: !7)
!137 = !DILocation(line: 118, column: 15, scope: !50, inlinedAt: !138)
!138 = !DILocation(line: 95, column: 42, scope: !7)
!139 = !DILocation(line: 120, column: 21, scope: !50, inlinedAt: !138)
!140 = !DILocation(line: 120, column: 16, scope: !50, inlinedAt: !138)
!141 = !DILocation(line: 121, column: 29, scope: !50, inlinedAt: !138)
!142 = !DILocation(line: 96, column: 20, scope: !7)
!143 = !DILocation(line: 97, column: 44, scope: !7)
!144 = !DILocation(line: 97, column: 36, scope: !7)
!145 = !DILocation(line: 118, column: 15, scope: !50, inlinedAt: !146)
!146 = !DILocation(line: 98, column: 42, scope: !7)
!147 = !DILocation(line: 120, column: 21, scope: !50, inlinedAt: !146)
!148 = !DILocation(line: 120, column: 16, scope: !50, inlinedAt: !146)
!149 = !DILocation(line: 121, column: 29, scope: !50, inlinedAt: !146)
!150 = !DILocation(line: 99, column: 20, scope: !7)
!151 = !DILocation(line: 100, column: 48, scope: !7)
!152 = !DILocation(line: 100, column: 40, scope: !7)
!153 = !DILocation(line: 118, column: 15, scope: !50, inlinedAt: !154)
!154 = !DILocation(line: 101, column: 42, scope: !7)
!155 = !DILocation(line: 120, column: 21, scope: !50, inlinedAt: !154)
!156 = !DILocation(line: 120, column: 16, scope: !50, inlinedAt: !154)
!157 = !DILocation(line: 121, column: 29, scope: !50, inlinedAt: !154)
!158 = !DILocation(line: 102, column: 20, scope: !7)
!159 = !DILocation(line: 103, column: 48, scope: !7)
!160 = !DILocation(line: 103, column: 40, scope: !7)
!161 = !DILocation(line: 118, column: 15, scope: !50, inlinedAt: !162)
!162 = !DILocation(line: 104, column: 42, scope: !7)
!163 = !DILocation(line: 120, column: 21, scope: !50, inlinedAt: !162)
!164 = !DILocation(line: 120, column: 16, scope: !50, inlinedAt: !162)
!165 = !DILocation(line: 121, column: 29, scope: !50, inlinedAt: !162)
!166 = !DILocation(line: 109, column: 20, scope: !7)
!167 = !DILocation(line: 110, column: 48, scope: !7)
!168 = !DILocation(line: 110, column: 40, scope: !7)
!169 = !DILocation(line: 118, column: 15, scope: !50, inlinedAt: !170)
!170 = !DILocation(line: 111, column: 42, scope: !7)
!171 = !DILocation(line: 120, column: 21, scope: !50, inlinedAt: !170)
!172 = !DILocation(line: 120, column: 16, scope: !50, inlinedAt: !170)
!173 = !DILocation(line: 121, column: 29, scope: !50, inlinedAt: !170)
!174 = !DILocation(line: 112, column: 20, scope: !7)
!175 = !DILocation(line: 113, column: 48, scope: !7)
!176 = !DILocation(line: 113, column: 40, scope: !7)
!177 = !DILocation(line: 118, column: 15, scope: !50, inlinedAt: !178)
!178 = !DILocation(line: 114, column: 42, scope: !7)
!179 = !DILocation(line: 120, column: 21, scope: !50, inlinedAt: !178)
!180 = !DILocation(line: 120, column: 16, scope: !50, inlinedAt: !178)
!181 = !DILocation(line: 121, column: 29, scope: !50, inlinedAt: !178)
!182 = !DILocation(line: 115, column: 20, scope: !7)
!183 = !DILocation(line: 116, column: 48, scope: !7)
!184 = !DILocation(line: 116, column: 40, scope: !7)
!185 = !DILocation(line: 118, column: 15, scope: !50, inlinedAt: !186)
!186 = !DILocation(line: 117, column: 42, scope: !7)
!187 = !DILocation(line: 120, column: 21, scope: !50, inlinedAt: !186)
!188 = !DILocation(line: 120, column: 16, scope: !50, inlinedAt: !186)
!189 = !DILocation(line: 121, column: 29, scope: !50, inlinedAt: !186)
!190 = !DILocation(line: 118, column: 20, scope: !7)
!191 = !DILocation(line: 119, column: 48, scope: !7)
!192 = !DILocation(line: 119, column: 40, scope: !7)
!193 = !DILocation(line: 118, column: 15, scope: !50, inlinedAt: !194)
!194 = !DILocation(line: 120, column: 42, scope: !7)
!195 = !DILocation(line: 120, column: 21, scope: !50, inlinedAt: !194)
!196 = !DILocation(line: 120, column: 16, scope: !50, inlinedAt: !194)
!197 = !DILocation(line: 121, column: 29, scope: !50, inlinedAt: !194)
!198 = !DILocation(line: 121, column: 20, scope: !7)
!199 = !DILocation(line: 122, column: 48, scope: !7)
!200 = !DILocation(line: 122, column: 40, scope: !7)
!201 = !DILocation(line: 118, column: 15, scope: !50, inlinedAt: !202)
!202 = !DILocation(line: 123, column: 42, scope: !7)
!203 = !DILocation(line: 120, column: 21, scope: !50, inlinedAt: !202)
!204 = !DILocation(line: 120, column: 16, scope: !50, inlinedAt: !202)
!205 = !DILocation(line: 121, column: 29, scope: !50, inlinedAt: !202)
!206 = !DILocation(line: 128, column: 22, scope: !7)
!207 = !DILocation(line: 129, column: 50, scope: !7)
!208 = !DILocation(line: 129, column: 41, scope: !7)
!209 = !DILocation(line: 118, column: 15, scope: !50, inlinedAt: !210)
!210 = !DILocation(line: 130, column: 44, scope: !7)
!211 = !DILocation(line: 120, column: 21, scope: !50, inlinedAt: !210)
!212 = !DILocation(line: 120, column: 16, scope: !50, inlinedAt: !210)
!213 = !DILocation(line: 121, column: 29, scope: !50, inlinedAt: !210)
!214 = !DILocation(line: 131, column: 22, scope: !7)
!215 = !DILocation(line: 132, column: 36, scope: !7)
!216 = !DILocation(line: 132, column: 32, scope: !7)
!217 = !DILocation(line: 132, column: 50, scope: !7)
!218 = !DILocation(line: 132, column: 41, scope: !7)
!219 = !DILocation(line: 118, column: 15, scope: !50, inlinedAt: !220)
!220 = !DILocation(line: 133, column: 44, scope: !7)
!221 = !DILocation(line: 120, column: 21, scope: !50, inlinedAt: !220)
!222 = !DILocation(line: 120, column: 16, scope: !50, inlinedAt: !220)
!223 = !DILocation(line: 121, column: 29, scope: !50, inlinedAt: !220)
!224 = !DILocation(line: 134, column: 22, scope: !7)
!225 = !DILocation(line: 135, column: 50, scope: !7)
!226 = !DILocation(line: 135, column: 41, scope: !7)
!227 = !DILocation(line: 118, column: 15, scope: !50, inlinedAt: !228)
!228 = !DILocation(line: 136, column: 44, scope: !7)
!229 = !DILocation(line: 120, column: 21, scope: !50, inlinedAt: !228)
!230 = !DILocation(line: 120, column: 16, scope: !50, inlinedAt: !228)
!231 = !DILocation(line: 121, column: 29, scope: !50, inlinedAt: !228)
!232 = !DILocation(line: 138, column: 36, scope: !7)
!233 = !DILocation(line: 138, column: 32, scope: !7)
!234 = !DILocation(line: 138, column: 50, scope: !7)
!235 = !DILocation(line: 138, column: 41, scope: !7)
!236 = !DILocation(line: 118, column: 15, scope: !50, inlinedAt: !237)
!237 = !DILocation(line: 139, column: 44, scope: !7)
!238 = !DILocation(line: 120, column: 21, scope: !50, inlinedAt: !237)
!239 = !DILocation(line: 120, column: 16, scope: !50, inlinedAt: !237)
!240 = !DILocation(line: 121, column: 29, scope: !50, inlinedAt: !237)
!241 = !DILocation(line: 141, column: 51, scope: !7)
!242 = !DILocation(line: 141, column: 42, scope: !7)
!243 = !DILocation(line: 118, column: 15, scope: !50, inlinedAt: !244)
!244 = !DILocation(line: 142, column: 44, scope: !7)
!245 = !DILocation(line: 120, column: 21, scope: !50, inlinedAt: !244)
!246 = !DILocation(line: 120, column: 16, scope: !50, inlinedAt: !244)
!247 = !DILocation(line: 143, column: 25, scope: !7)
!248 = !DILocation(line: 143, column: 38, scope: !7)
!249 = !DILocation(line: 121, column: 29, scope: !50, inlinedAt: !244)
!250 = !DILocation(line: 143, column: 4, scope: !7)
