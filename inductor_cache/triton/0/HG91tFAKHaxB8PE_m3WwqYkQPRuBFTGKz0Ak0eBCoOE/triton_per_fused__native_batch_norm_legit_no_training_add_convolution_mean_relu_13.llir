; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused__native_batch_norm_legit_no_training_add_convolution_mean_relu_13(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, i32 %12, i32 %13) local_unnamed_addr !dbg !7 {
  %15 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %16 = icmp slt i32 %15, 256, !dbg !11
  %17 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %18 = and i32 %17, 15, !dbg !12
  %19 = srem i32 %15, 64, !dbg !13
  %20 = shl i32 %15, 4, !dbg !14
  %21 = or disjoint i32 %20, %18, !dbg !15
  %22 = sext i32 %21 to i64, !dbg !16
  %23 = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !16
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %23, i1 %16, i32 0, i1 %16) #5, !dbg !17
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %23, i1 %16, i32 0, i1 %16) #5, !dbg !17
  %26 = sext i32 %19 to i64, !dbg !18
  %27 = getelementptr float, ptr addrspace(1) %2, i64 %26, !dbg !18
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 %16) #5, !dbg !19
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 %16) #5, !dbg !19
  %30 = getelementptr float, ptr addrspace(1) %3, i64 %26, !dbg !20
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 %16) #5, !dbg !21
  %32 = getelementptr float, ptr addrspace(1) %4, i64 %26, !dbg !22
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 %16) #5, !dbg !23
  %34 = bitcast i32 %33 to float, !dbg !23
  %35 = getelementptr float, ptr addrspace(1) %5, i64 %26, !dbg !24
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 %16) #5, !dbg !25
  %37 = getelementptr float, ptr addrspace(1) %6, i64 %26, !dbg !26
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %16) #5, !dbg !27
  %39 = getelementptr float, ptr addrspace(1) %7, i64 %22, !dbg !28
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %39, i1 %16, i32 0, i1 %16) #5, !dbg !29
  %41 = getelementptr float, ptr addrspace(1) %8, i64 %26, !dbg !30
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 %16) #5, !dbg !31
  %43 = getelementptr float, ptr addrspace(1) %9, i64 %26, !dbg !32
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 %16) #5, !dbg !33
  %45 = bitcast i32 %44 to float, !dbg !33
  %46 = getelementptr float, ptr addrspace(1) %10, i64 %26, !dbg !34
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 %16) #5, !dbg !35
  %48 = getelementptr float, ptr addrspace(1) %11, i64 %26, !dbg !36
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 %16) #5, !dbg !37
  %50 = fadd float %34, 0x3EE4F8B580000000, !dbg !38
  %51 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !39
  %.not.i = icmp eq i32 %51, 0, !dbg !39
  %52 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !39
  %.not1.i = icmp eq i32 %52, 0, !dbg !39
  br i1 %.not.i, label %58, label %53, !dbg !39

53:                                               ; preds = %14
  br i1 %.not1.i, label %56, label %54, !dbg !39

54:                                               ; preds = %53
  %55 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %50) #5, !dbg !39
  br label %__nv_sqrtf.exit, !dbg !39

56:                                               ; preds = %53
  %57 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %50) #5, !dbg !39
  br label %__nv_sqrtf.exit, !dbg !39

58:                                               ; preds = %14
  br i1 %.not1.i, label %61, label %59, !dbg !39

59:                                               ; preds = %58
  %60 = tail call float @llvm.nvvm.sqrt.rn.f(float %50) #5, !dbg !39
  br label %__nv_sqrtf.exit, !dbg !39

61:                                               ; preds = %58
  %62 = tail call float @llvm.nvvm.sqrt.approx.f(float %50) #5, !dbg !39
  br label %__nv_sqrtf.exit, !dbg !39

__nv_sqrtf.exit:                                  ; preds = %54, %56, %59, %61
  %.0.i = phi float [ %55, %54 ], [ %57, %56 ], [ %60, %59 ], [ %62, %61 ], !dbg !39
  %63 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #5, !dbg !40
  %64 = fadd float %45, 0x3EE4F8B580000000, !dbg !41
  %65 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !42
  %.not.i1 = icmp eq i32 %65, 0, !dbg !42
  %66 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !42
  %.not1.i4 = icmp eq i32 %66, 0, !dbg !42
  br i1 %.not.i1, label %72, label %67, !dbg !42

67:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %70, label %68, !dbg !42

68:                                               ; preds = %67
  %69 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %64) #5, !dbg !42
  br label %__nv_sqrtf.exit5, !dbg !42

70:                                               ; preds = %67
  %71 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %64) #5, !dbg !42
  br label %__nv_sqrtf.exit5, !dbg !42

72:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %75, label %73, !dbg !42

73:                                               ; preds = %72
  %74 = tail call float @llvm.nvvm.sqrt.rn.f(float %64) #5, !dbg !42
  br label %__nv_sqrtf.exit5, !dbg !42

75:                                               ; preds = %72
  %76 = tail call float @llvm.nvvm.sqrt.approx.f(float %64) #5, !dbg !42
  br label %__nv_sqrtf.exit5, !dbg !42

__nv_sqrtf.exit5:                                 ; preds = %68, %70, %73, %75
  %.0.i3 = phi float [ %69, %68 ], [ %71, %70 ], [ %74, %73 ], [ %76, %75 ], !dbg !42
  %77 = bitcast i32 %40 to float, !dbg !29
  %78 = insertelement <2 x i32> poison, i32 %31, i64 0, !dbg !21
  %79 = insertelement <2 x i32> %78, i32 %42, i64 1, !dbg !21
  %80 = bitcast <2 x i32> %79 to <2 x float>, !dbg !21
  %81 = bitcast i32 %24 to float, !dbg !17
  %82 = bitcast i32 %28 to float, !dbg !19
  %83 = fadd float %81, %82, !dbg !43
  %84 = insertelement <2 x i32> poison, i32 %36, i64 0, !dbg !25
  %85 = insertelement <2 x i32> %84, i32 %47, i64 1, !dbg !25
  %86 = bitcast <2 x i32> %85 to <2 x float>, !dbg !25
  %87 = insertelement <2 x i32> poison, i32 %38, i64 0, !dbg !27
  %88 = insertelement <2 x i32> %87, i32 %49, i64 1, !dbg !27
  %89 = bitcast <2 x i32> %88 to <2 x float>, !dbg !27
  %90 = bitcast i32 %25 to float, !dbg !17
  %91 = bitcast i32 %29 to float, !dbg !19
  %92 = fadd float %90, %91, !dbg !43
  %93 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #5, !dbg !44
  %94 = insertelement <2 x float> poison, float %83, i64 0, !dbg !45
  %95 = insertelement <2 x float> %94, float %77, i64 1, !dbg !45
  %96 = fsub <2 x float> %95, %80, !dbg !45
  %97 = insertelement <2 x float> poison, float %63, i64 0, !dbg !46
  %98 = insertelement <2 x float> %97, float %93, i64 1, !dbg !46
  %99 = fmul <2 x float> %96, %98, !dbg !46
  %100 = fmul <2 x float> %99, %86, !dbg !47
  %101 = fadd <2 x float> %100, %89, !dbg !48
  %shift = shufflevector <2 x float> %101, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !49
  %102 = fadd <2 x float> %101, %shift, !dbg !49
  %103 = extractelement <2 x float> %102, i64 0, !dbg !49
  %104 = fcmp olt float %103, 0.000000e+00, !dbg !50
  %105 = select i1 %104, float 0.000000e+00, float %103, !dbg !54
  %106 = select i1 %16, float %105, float 0.000000e+00, !dbg !55
  %107 = bitcast float %106 to i32, !dbg !56
  %108 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %107, i32 8, i32 31), !dbg !56
  %109 = bitcast i32 %108 to float, !dbg !56
  %110 = fadd float %106, %109, !dbg !60
  %111 = bitcast float %110 to i32, !dbg !56
  %112 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %111, i32 4, i32 31), !dbg !56
  %113 = bitcast i32 %112 to float, !dbg !56
  %114 = fadd float %110, %113, !dbg !60
  %115 = bitcast float %114 to i32, !dbg !56
  %116 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %115, i32 2, i32 31), !dbg !56
  %117 = bitcast i32 %116 to float, !dbg !56
  %118 = fadd float %114, %117, !dbg !60
  %119 = bitcast float %118 to i32, !dbg !56
  %120 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %119, i32 1, i32 31), !dbg !56
  %121 = bitcast i32 %120 to float, !dbg !56
  %122 = fadd float %118, %121, !dbg !60
  %123 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %122, float 1.600000e+01) #5, !dbg !62
  %124 = and i32 %17, 48, !dbg !63
  %125 = icmp eq i32 %124, 0, !dbg !63
  %126 = bitcast float %92 to i32, !dbg !63
  %127 = and i1 %125, %16, !dbg !63
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %126, ptr addrspace(1) %23, i1 %127) #5, !dbg !63
  tail call void @llvm.nvvm.barrier0(), !dbg !64
  %128 = sext i32 %15 to i64, !dbg !65
  %129 = getelementptr float, ptr addrspace(1) %1, i64 %128, !dbg !65
  %urem = and i32 %17, 63, !dbg !66
  %130 = icmp eq i32 %urem, 0, !dbg !66
  %131 = bitcast float %123 to i32, !dbg !66
  %132 = and i1 %130, %16, !dbg !66
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %131, ptr addrspace(1) %129, i1 %132) #5, !dbg !66
  ret void, !dbg !67
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cqysvunu2gkgb2k5yox4knuxxjuqrovcgn4f5tfldn5sajg5cked.py", directory: "inductor_cache/qy")
!4 = !{ptr @triton_per_fused__native_batch_norm_legit_no_training_add_convolution_mean_relu_13, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__native_batch_norm_legit_no_training_add_convolution_mean_relu_13, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__native_batch_norm_legit_no_training_add_convolution_mean_relu_13", linkageName: "triton_per_fused__native_batch_norm_legit_no_training_add_convolution_mean_relu_13", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 21, scope: !7)
!12 = !DILocation(line: 26, column: 34, scope: !7)
!13 = !DILocation(line: 31, column: 19, scope: !7)
!14 = !DILocation(line: 32, column: 42, scope: !7)
!15 = !DILocation(line: 32, column: 39, scope: !7)
!16 = !DILocation(line: 32, column: 34, scope: !7)
!17 = !DILocation(line: 32, column: 47, scope: !7)
!18 = !DILocation(line: 33, column: 30, scope: !7)
!19 = !DILocation(line: 33, column: 35, scope: !7)
!20 = !DILocation(line: 34, column: 30, scope: !7)
!21 = !DILocation(line: 34, column: 35, scope: !7)
!22 = !DILocation(line: 35, column: 30, scope: !7)
!23 = !DILocation(line: 35, column: 35, scope: !7)
!24 = !DILocation(line: 36, column: 31, scope: !7)
!25 = !DILocation(line: 36, column: 36, scope: !7)
!26 = !DILocation(line: 37, column: 31, scope: !7)
!27 = !DILocation(line: 37, column: 36, scope: !7)
!28 = !DILocation(line: 38, column: 31, scope: !7)
!29 = !DILocation(line: 38, column: 44, scope: !7)
!30 = !DILocation(line: 39, column: 31, scope: !7)
!31 = !DILocation(line: 39, column: 36, scope: !7)
!32 = !DILocation(line: 40, column: 31, scope: !7)
!33 = !DILocation(line: 40, column: 36, scope: !7)
!34 = !DILocation(line: 41, column: 31, scope: !7)
!35 = !DILocation(line: 41, column: 36, scope: !7)
!36 = !DILocation(line: 42, column: 31, scope: !7)
!37 = !DILocation(line: 42, column: 36, scope: !7)
!38 = !DILocation(line: 46, column: 18, scope: !7)
!39 = !DILocation(line: 47, column: 26, scope: !7)
!40 = !DILocation(line: 49, column: 19, scope: !7)
!41 = !DILocation(line: 56, column: 20, scope: !7)
!42 = !DILocation(line: 57, column: 27, scope: !7)
!43 = !DILocation(line: 43, column: 18, scope: !7)
!44 = !DILocation(line: 58, column: 19, scope: !7)
!45 = !DILocation(line: 44, column: 18, scope: !7)
!46 = !DILocation(line: 52, column: 19, scope: !7)
!47 = !DILocation(line: 53, column: 20, scope: !7)
!48 = !DILocation(line: 54, column: 20, scope: !7)
!49 = !DILocation(line: 63, column: 20, scope: !7)
!50 = !DILocation(line: 118, column: 15, scope: !51, inlinedAt: !53)
!51 = distinct !DILexicalBlockFile(scope: !7, file: !52, discriminator: 0)
!52 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!53 = !DILocation(line: 65, column: 42, scope: !7)
!54 = !DILocation(line: 121, column: 29, scope: !51, inlinedAt: !53)
!55 = !DILocation(line: 67, column: 35, scope: !7)
!56 = !DILocation(line: 267, column: 36, scope: !57, inlinedAt: !59)
!57 = distinct !DILexicalBlockFile(scope: !7, file: !58, discriminator: 0)
!58 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!59 = !DILocation(line: 68, column: 26, scope: !7)
!60 = !DILocation(line: 256, column: 15, scope: !61, inlinedAt: !59)
!61 = distinct !DILexicalBlockFile(scope: !57, file: !58, discriminator: 0)
!62 = !DILocation(line: 70, column: 20, scope: !7)
!63 = !DILocation(line: 71, column: 47, scope: !7)
!64 = !DILocation(line: 72, column: 4, scope: !7)
!65 = !DILocation(line: 73, column: 28, scope: !7)
!66 = !DILocation(line: 73, column: 40, scope: !7)
!67 = !DILocation(line: 73, column: 4, scope: !7)
