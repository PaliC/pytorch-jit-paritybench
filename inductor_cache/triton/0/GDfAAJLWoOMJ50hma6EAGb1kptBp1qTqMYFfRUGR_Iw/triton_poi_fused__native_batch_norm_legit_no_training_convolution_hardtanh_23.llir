; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_convolution_hardtanh_23(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %11 = shl i32 %10, 6, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = shl i32 %12, 2, !dbg !12
  %14 = and i32 %13, 60, !dbg !12
  %15 = or disjoint i32 %11, %14, !dbg !13
  %16 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %17 = shl i32 %16, 4, !dbg !15
  %18 = lshr i32 %12, 4, !dbg !16
  %19 = and i32 %18, 7, !dbg !16
  %20 = or disjoint i32 %17, %19, !dbg !17
  %21 = or disjoint i32 %20, 8, !dbg !17
  %22 = icmp slt i32 %20, 16, !dbg !18
  %23 = icmp slt i32 %21, 16, !dbg !18
  %.frozen = freeze i32 %15, !dbg !19
  %24 = sdiv i32 %.frozen, 512, !dbg !19
  %25 = mul i32 %24, 512, !dbg !20
  %.decomposed = sub i32 %.frozen, %25, !dbg !20
  %26 = shl i32 %20, 9, !dbg !21
  %27 = shl i32 %21, 9, !dbg !21
  %28 = shl i32 %24, 13, !dbg !22
  %29 = add i32 %28, %.decomposed, !dbg !23
  %30 = add i32 %29, %26, !dbg !24
  %31 = add i32 %29, %27, !dbg !24
  %32 = sext i32 %30 to i64, !dbg !25
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !25
  %34 = sext i32 %31 to i64, !dbg !25
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !25
  %36 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %33, i1 %22) #4, !dbg !26
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %35, i1 %23) #4, !dbg !26
  %38 = sext i32 %.decomposed to i64, !dbg !27
  %39 = getelementptr float, ptr addrspace(1) %1, i64 %38, !dbg !27
  %40 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %39, i1 true) #4, !dbg !28
  %41 = getelementptr float, ptr addrspace(1) %2, i64 %38, !dbg !29
  %42 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %41, i1 true) #4, !dbg !30
  %43 = extractvalue { i32, i32, i32, i32 } %42, 0, !dbg !30
  %44 = extractvalue { i32, i32, i32, i32 } %42, 1, !dbg !30
  %45 = extractvalue { i32, i32, i32, i32 } %42, 2, !dbg !30
  %46 = extractvalue { i32, i32, i32, i32 } %42, 3, !dbg !30
  %47 = bitcast i32 %43 to float, !dbg !30
  %48 = bitcast i32 %44 to float, !dbg !30
  %49 = bitcast i32 %45 to float, !dbg !30
  %50 = bitcast i32 %46 to float, !dbg !30
  %51 = getelementptr float, ptr addrspace(1) %3, i64 %38, !dbg !31
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %51, i1 true) #4, !dbg !32
  %53 = getelementptr float, ptr addrspace(1) %4, i64 %38, !dbg !33
  %54 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %53, i1 true) #4, !dbg !34
  %55 = fadd float %47, 0x3EE4F8B580000000, !dbg !35
  %56 = fadd float %48, 0x3EE4F8B580000000, !dbg !35
  %57 = fadd float %49, 0x3EE4F8B580000000, !dbg !35
  %58 = fadd float %50, 0x3EE4F8B580000000, !dbg !35
  %59 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i = icmp eq i32 %59, 0, !dbg !36
  %60 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i = icmp eq i32 %60, 0, !dbg !36
  br i1 %.not.i, label %66, label %61, !dbg !36

61:                                               ; preds = %9
  br i1 %.not1.i, label %64, label %62, !dbg !36

62:                                               ; preds = %61
  %63 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %55) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

64:                                               ; preds = %61
  %65 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %55) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

66:                                               ; preds = %9
  br i1 %.not1.i, label %69, label %67, !dbg !36

67:                                               ; preds = %66
  %68 = tail call float @llvm.nvvm.sqrt.rn.f(float %55) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

69:                                               ; preds = %66
  %70 = tail call float @llvm.nvvm.sqrt.approx.f(float %55) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

__nv_sqrtf.exit:                                  ; preds = %62, %64, %67, %69
  %.0.i = phi float [ %63, %62 ], [ %65, %64 ], [ %68, %67 ], [ %70, %69 ], !dbg !36
  %71 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i10 = icmp eq i32 %71, 0, !dbg !36
  %72 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i13 = icmp eq i32 %72, 0, !dbg !36
  br i1 %.not.i10, label %78, label %73, !dbg !36

73:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i13, label %76, label %74, !dbg !36

74:                                               ; preds = %73
  %75 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %56) #4, !dbg !36
  br label %__nv_sqrtf.exit14, !dbg !36

76:                                               ; preds = %73
  %77 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %56) #4, !dbg !36
  br label %__nv_sqrtf.exit14, !dbg !36

78:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i13, label %81, label %79, !dbg !36

79:                                               ; preds = %78
  %80 = tail call float @llvm.nvvm.sqrt.rn.f(float %56) #4, !dbg !36
  br label %__nv_sqrtf.exit14, !dbg !36

81:                                               ; preds = %78
  %82 = tail call float @llvm.nvvm.sqrt.approx.f(float %56) #4, !dbg !36
  br label %__nv_sqrtf.exit14, !dbg !36

__nv_sqrtf.exit14:                                ; preds = %74, %76, %79, %81
  %.0.i12 = phi float [ %75, %74 ], [ %77, %76 ], [ %80, %79 ], [ %82, %81 ], !dbg !36
  %83 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i15 = icmp eq i32 %83, 0, !dbg !36
  %84 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i18 = icmp eq i32 %84, 0, !dbg !36
  br i1 %.not.i15, label %90, label %85, !dbg !36

85:                                               ; preds = %__nv_sqrtf.exit14
  br i1 %.not1.i18, label %88, label %86, !dbg !36

86:                                               ; preds = %85
  %87 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %57) #4, !dbg !36
  br label %__nv_sqrtf.exit19, !dbg !36

88:                                               ; preds = %85
  %89 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %57) #4, !dbg !36
  br label %__nv_sqrtf.exit19, !dbg !36

90:                                               ; preds = %__nv_sqrtf.exit14
  br i1 %.not1.i18, label %93, label %91, !dbg !36

91:                                               ; preds = %90
  %92 = tail call float @llvm.nvvm.sqrt.rn.f(float %57) #4, !dbg !36
  br label %__nv_sqrtf.exit19, !dbg !36

93:                                               ; preds = %90
  %94 = tail call float @llvm.nvvm.sqrt.approx.f(float %57) #4, !dbg !36
  br label %__nv_sqrtf.exit19, !dbg !36

__nv_sqrtf.exit19:                                ; preds = %86, %88, %91, %93
  %.0.i17 = phi float [ %87, %86 ], [ %89, %88 ], [ %92, %91 ], [ %94, %93 ], !dbg !36
  %95 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i20 = icmp eq i32 %95, 0, !dbg !36
  %96 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i23 = icmp eq i32 %96, 0, !dbg !36
  br i1 %.not.i20, label %102, label %97, !dbg !36

97:                                               ; preds = %__nv_sqrtf.exit19
  br i1 %.not1.i23, label %100, label %98, !dbg !36

98:                                               ; preds = %97
  %99 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %58) #4, !dbg !36
  br label %__nv_sqrtf.exit24, !dbg !36

100:                                              ; preds = %97
  %101 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %58) #4, !dbg !36
  br label %__nv_sqrtf.exit24, !dbg !36

102:                                              ; preds = %__nv_sqrtf.exit19
  br i1 %.not1.i23, label %105, label %103, !dbg !36

103:                                              ; preds = %102
  %104 = tail call float @llvm.nvvm.sqrt.rn.f(float %58) #4, !dbg !36
  br label %__nv_sqrtf.exit24, !dbg !36

105:                                              ; preds = %102
  %106 = tail call float @llvm.nvvm.sqrt.approx.f(float %58) #4, !dbg !36
  br label %__nv_sqrtf.exit24, !dbg !36

__nv_sqrtf.exit24:                                ; preds = %98, %100, %103, %105
  %.0.i22 = phi float [ %99, %98 ], [ %101, %100 ], [ %104, %103 ], [ %106, %105 ], !dbg !36
  %107 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !26
  %108 = extractvalue { i32, i32, i32, i32 } %40, 3, !dbg !28
  %109 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !26
  %110 = extractvalue { i32, i32, i32, i32 } %40, 2, !dbg !28
  %111 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !26
  %112 = extractvalue { i32, i32, i32, i32 } %40, 1, !dbg !28
  %113 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !26
  %114 = extractvalue { i32, i32, i32, i32 } %40, 0, !dbg !28
  %115 = extractvalue { i32, i32, i32, i32 } %36, 3, !dbg !26
  %116 = extractvalue { i32, i32, i32, i32 } %36, 2, !dbg !26
  %117 = extractvalue { i32, i32, i32, i32 } %36, 1, !dbg !26
  %118 = extractvalue { i32, i32, i32, i32 } %36, 0, !dbg !26
  %119 = extractvalue { i32, i32, i32, i32 } %54, 3, !dbg !34
  %120 = extractvalue { i32, i32, i32, i32 } %54, 2, !dbg !34
  %121 = extractvalue { i32, i32, i32, i32 } %54, 1, !dbg !34
  %122 = extractvalue { i32, i32, i32, i32 } %54, 0, !dbg !34
  %123 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !32
  %124 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !32
  %125 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !32
  %126 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !32
  %127 = and i32 %13, 12, !dbg !12
  %128 = or disjoint i32 %17, %127, !dbg !17
  %129 = icmp slt i32 %128, 16, !dbg !18
  %130 = lshr i32 %12, 2, !dbg !12
  %131 = and i32 %130, 31, !dbg !12
  %132 = or disjoint i32 %131, 32, !dbg !12
  %133 = or disjoint i32 %11, %132, !dbg !13
  %134 = or disjoint i32 %11, %131, !dbg !13
  %135 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !37
  %136 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i12) #4, !dbg !37
  %137 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i17) #4, !dbg !37
  %138 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i22) #4, !dbg !37
  %139 = insertelement <4 x i32> poison, i32 %108, i64 0, !dbg !28
  %140 = insertelement <4 x i32> %139, i32 %110, i64 1, !dbg !28
  %141 = insertelement <4 x i32> %140, i32 %112, i64 2, !dbg !28
  %142 = insertelement <4 x i32> %141, i32 %114, i64 3, !dbg !28
  %143 = bitcast <4 x i32> %142 to <4 x float>, !dbg !28
  %144 = shufflevector <4 x float> %143, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !28
  %145 = insertelement <8 x i32> poison, i32 %107, i64 0, !dbg !26
  %146 = insertelement <8 x i32> %145, i32 %109, i64 1, !dbg !26
  %147 = insertelement <8 x i32> %146, i32 %111, i64 2, !dbg !26
  %148 = insertelement <8 x i32> %147, i32 %113, i64 3, !dbg !26
  %149 = insertelement <8 x i32> %148, i32 %115, i64 4, !dbg !26
  %150 = insertelement <8 x i32> %149, i32 %116, i64 5, !dbg !26
  %151 = insertelement <8 x i32> %150, i32 %117, i64 6, !dbg !26
  %152 = insertelement <8 x i32> %151, i32 %118, i64 7, !dbg !26
  %153 = bitcast <8 x i32> %152 to <8 x float>, !dbg !26
  %154 = fsub <8 x float> %153, %144, !dbg !38
  %155 = insertelement <4 x i32> poison, i32 %119, i64 0, !dbg !34
  %156 = insertelement <4 x i32> %155, i32 %120, i64 1, !dbg !34
  %157 = insertelement <4 x i32> %156, i32 %121, i64 2, !dbg !34
  %158 = insertelement <4 x i32> %157, i32 %122, i64 3, !dbg !34
  %159 = bitcast <4 x i32> %158 to <4 x float>, !dbg !34
  %160 = shufflevector <4 x float> %159, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !34
  %161 = insertelement <4 x i32> poison, i32 %123, i64 0, !dbg !32
  %162 = insertelement <4 x i32> %161, i32 %124, i64 1, !dbg !32
  %163 = insertelement <4 x i32> %162, i32 %125, i64 2, !dbg !32
  %164 = insertelement <4 x i32> %163, i32 %126, i64 3, !dbg !32
  %165 = bitcast <4 x i32> %164 to <4 x float>, !dbg !32
  %166 = shufflevector <4 x float> %165, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !32
  %167 = insertelement <8 x float> poison, float %138, i64 0, !dbg !39
  %168 = insertelement <8 x float> %167, float %137, i64 1, !dbg !39
  %169 = insertelement <8 x float> %168, float %136, i64 2, !dbg !39
  %170 = insertelement <8 x float> %169, float %135, i64 3, !dbg !39
  %171 = shufflevector <8 x float> %170, <8 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !39
  %172 = fmul <8 x float> %154, %171, !dbg !39
  %173 = fmul <8 x float> %172, %166, !dbg !40
  %174 = fadd <8 x float> %173, %160, !dbg !41
  %175 = fcmp ole <8 x float> %174, zeroinitializer, !dbg !42
  %176 = select <8 x i1> %175, <8 x float> zeroinitializer, <8 x float> %174, !dbg !42
  %177 = fcmp olt <8 x float> %176, splat (float 6.000000e+00), !dbg !46
  %178 = extractelement <8 x float> %176, i64 7, !dbg !48
  %179 = fcmp uno float %178, 0.000000e+00, !dbg !48
  %180 = extractelement <8 x float> %176, i64 6, !dbg !48
  %181 = fcmp uno float %180, 0.000000e+00, !dbg !48
  %182 = extractelement <8 x float> %176, i64 5, !dbg !48
  %183 = fcmp uno float %182, 0.000000e+00, !dbg !48
  %184 = extractelement <8 x float> %176, i64 4, !dbg !48
  %185 = fcmp uno float %184, 0.000000e+00, !dbg !48
  %186 = extractelement <8 x float> %176, i64 3, !dbg !48
  %187 = fcmp uno float %186, 0.000000e+00, !dbg !48
  %188 = extractelement <8 x float> %176, i64 2, !dbg !48
  %189 = fcmp uno float %188, 0.000000e+00, !dbg !48
  %190 = extractelement <8 x float> %176, i64 1, !dbg !48
  %191 = fcmp uno float %190, 0.000000e+00, !dbg !48
  %192 = extractelement <8 x float> %176, i64 0, !dbg !48
  %193 = fcmp uno float %192, 0.000000e+00, !dbg !48
  %194 = extractelement <8 x i1> %177, i64 7, !dbg !49
  %195 = or i1 %194, %179, !dbg !49
  %196 = extractelement <8 x i1> %177, i64 6, !dbg !49
  %197 = or i1 %196, %181, !dbg !49
  %198 = extractelement <8 x i1> %177, i64 5, !dbg !49
  %199 = or i1 %198, %183, !dbg !49
  %200 = extractelement <8 x i1> %177, i64 4, !dbg !49
  %201 = or i1 %200, %185, !dbg !49
  %202 = extractelement <8 x i1> %177, i64 3, !dbg !49
  %203 = or i1 %202, %187, !dbg !49
  %204 = extractelement <8 x i1> %177, i64 2, !dbg !49
  %205 = or i1 %204, %189, !dbg !49
  %206 = extractelement <8 x i1> %177, i64 1, !dbg !49
  %207 = or i1 %206, %191, !dbg !49
  %208 = extractelement <8 x i1> %177, i64 0, !dbg !49
  %209 = or i1 %208, %193, !dbg !49
  %210 = select i1 %195, float %178, float 6.000000e+00, !dbg !50
  %211 = select i1 %197, float %180, float 6.000000e+00, !dbg !50
  %212 = select i1 %199, float %182, float 6.000000e+00, !dbg !50
  %213 = select i1 %201, float %184, float 6.000000e+00, !dbg !50
  %214 = select i1 %203, float %186, float 6.000000e+00, !dbg !50
  %215 = select i1 %205, float %188, float 6.000000e+00, !dbg !50
  %216 = select i1 %207, float %190, float 6.000000e+00, !dbg !50
  %217 = select i1 %209, float %192, float 6.000000e+00, !dbg !50
  %218 = shl i32 %134, 4, !dbg !51
  %219 = shl i32 %133, 4, !dbg !51
  %220 = add i32 %128, %218, !dbg !52
  %221 = add i32 %128, %219, !dbg !52
  %222 = sext i32 %220 to i64, !dbg !53
  %223 = getelementptr float, ptr addrspace(1) %5, i64 %222, !dbg !53
  %224 = sext i32 %221 to i64, !dbg !53
  %225 = getelementptr float, ptr addrspace(1) %5, i64 %224, !dbg !53
  %226 = shl i32 %12, 6, !dbg !54
  %227 = and i32 %226, 960, !dbg !54
  %228 = or disjoint i32 %227, %19, !dbg !54
  %229 = and i32 %13, 508, !dbg !54
  %230 = lshr exact i32 %227, 2, !dbg !54
  %231 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %230, !dbg !54
  %232 = getelementptr float, ptr addrspace(3) %231, i32 %228, !dbg !54
  %233 = bitcast float %210 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %232, <1 x i32> %233, i1 true) #4, !dbg !54
  %234 = or disjoint i32 %228, 16, !dbg !54
  %235 = lshr i32 %234, 4, !dbg !54
  %236 = getelementptr float, ptr addrspace(3) @global_smem, i32 %235, !dbg !54
  %237 = getelementptr float, ptr addrspace(3) %236, i32 %234, !dbg !54
  %238 = bitcast float %211 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %237, <1 x i32> %238, i1 true) #4, !dbg !54
  %239 = or disjoint i32 %228, 32, !dbg !54
  %240 = lshr i32 %239, 4, !dbg !54
  %241 = getelementptr float, ptr addrspace(3) @global_smem, i32 %240, !dbg !54
  %242 = getelementptr float, ptr addrspace(3) %241, i32 %239, !dbg !54
  %243 = bitcast float %212 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %242, <1 x i32> %243, i1 true) #4, !dbg !54
  %244 = or disjoint i32 %228, 48, !dbg !54
  %245 = lshr i32 %244, 4, !dbg !54
  %246 = getelementptr float, ptr addrspace(3) @global_smem, i32 %245, !dbg !54
  %247 = getelementptr float, ptr addrspace(3) %246, i32 %244, !dbg !54
  %248 = bitcast float %213 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %247, <1 x i32> %248, i1 true) #4, !dbg !54
  %249 = or disjoint i32 %228, 8, !dbg !54
  %250 = getelementptr float, ptr addrspace(3) %231, i32 %249, !dbg !54
  %251 = bitcast float %214 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %250, <1 x i32> %251, i1 true) #4, !dbg !54
  %252 = or disjoint i32 %228, 24, !dbg !54
  %253 = lshr i32 %252, 4, !dbg !54
  %254 = getelementptr float, ptr addrspace(3) @global_smem, i32 %253, !dbg !54
  %255 = getelementptr float, ptr addrspace(3) %254, i32 %252, !dbg !54
  %256 = bitcast float %215 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %255, <1 x i32> %256, i1 true) #4, !dbg !54
  %257 = or disjoint i32 %228, 40, !dbg !54
  %258 = lshr i32 %257, 4, !dbg !54
  %259 = getelementptr float, ptr addrspace(3) @global_smem, i32 %258, !dbg !54
  %260 = getelementptr float, ptr addrspace(3) %259, i32 %257, !dbg !54
  %261 = bitcast float %216 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %260, <1 x i32> %261, i1 true) #4, !dbg !54
  %262 = or disjoint i32 %228, 56, !dbg !54
  %263 = lshr i32 %262, 4, !dbg !54
  %264 = getelementptr float, ptr addrspace(3) @global_smem, i32 %263, !dbg !54
  %265 = getelementptr float, ptr addrspace(3) %264, i32 %262, !dbg !54
  %266 = bitcast float %217 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %265, <1 x i32> %266, i1 true) #4, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %267 = lshr i32 %229, 4, !dbg !54
  %268 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %267, !dbg !54
  %269 = getelementptr inbounds float, ptr addrspace(3) %268, i32 %229, !dbg !54
  %270 = load i32, ptr addrspace(3) %269, align 4, !dbg !54
  %271 = or disjoint i32 %229, 1, !dbg !54
  %272 = getelementptr inbounds float, ptr addrspace(3) %268, i32 %271, !dbg !54
  %273 = load i32, ptr addrspace(3) %272, align 4, !dbg !54
  %274 = or disjoint i32 %229, 2, !dbg !54
  %275 = getelementptr inbounds float, ptr addrspace(3) %268, i32 %274, !dbg !54
  %276 = load i32, ptr addrspace(3) %275, align 4, !dbg !54
  %277 = or disjoint i32 %229, 3, !dbg !54
  %278 = getelementptr inbounds float, ptr addrspace(3) %268, i32 %277, !dbg !54
  %279 = load i32, ptr addrspace(3) %278, align 4, !dbg !54
  %280 = or disjoint i32 %229, 512, !dbg !54
  %281 = lshr i32 %280, 4, !dbg !54
  %282 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %281, !dbg !54
  %283 = getelementptr inbounds float, ptr addrspace(3) %282, i32 %280, !dbg !54
  %284 = load i32, ptr addrspace(3) %283, align 4, !dbg !54
  %285 = or disjoint i32 %229, 513, !dbg !54
  %286 = lshr i32 %285, 4, !dbg !54
  %287 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %286, !dbg !54
  %288 = getelementptr inbounds float, ptr addrspace(3) %287, i32 %285, !dbg !54
  %289 = load i32, ptr addrspace(3) %288, align 4, !dbg !54
  %290 = or disjoint i32 %229, 514, !dbg !54
  %291 = lshr i32 %290, 4, !dbg !54
  %292 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %291, !dbg !54
  %293 = getelementptr inbounds float, ptr addrspace(3) %292, i32 %290, !dbg !54
  %294 = load i32, ptr addrspace(3) %293, align 4, !dbg !54
  %295 = or disjoint i32 %229, 515, !dbg !54
  %296 = lshr i32 %295, 4, !dbg !54
  %297 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %296, !dbg !54
  %298 = getelementptr inbounds float, ptr addrspace(3) %297, i32 %295, !dbg !54
  %299 = load i32, ptr addrspace(3) %298, align 4, !dbg !54
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %270, i32 %273, i32 %276, i32 %279, ptr addrspace(1) %223, i1 %129) #4, !dbg !54
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %284, i32 %289, i32 %294, i32 %299, ptr addrspace(1) %225, i1 %129) #4, !dbg !54
  %300 = getelementptr float, ptr addrspace(1) %6, i64 %32, !dbg !55
  %301 = getelementptr float, ptr addrspace(1) %6, i64 %34, !dbg !55
  %302 = bitcast float %210 to i32, !dbg !56
  %303 = bitcast float %211 to i32, !dbg !56
  %304 = bitcast float %212 to i32, !dbg !56
  %305 = bitcast float %213 to i32, !dbg !56
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %302, i32 %303, i32 %304, i32 %305, ptr addrspace(1) %300, i1 %22) #4, !dbg !56
  %306 = bitcast float %214 to i32, !dbg !56
  %307 = bitcast float %215 to i32, !dbg !56
  %308 = bitcast float %216 to i32, !dbg !56
  %309 = bitcast float %217 to i32, !dbg !56
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %306, i32 %307, i32 %308, i32 %309, ptr addrspace(1) %301, i1 %23) #4, !dbg !56
  ret void, !dbg !57
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cr6d7f5hiusmnvrlwamk6ao7ic2t5vth4jso2haysk23dkfxjn4w.py", directory: "inductor_cache/r6")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_convolution_hardtanh_23, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_convolution_hardtanh_23, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_convolution_hardtanh_23", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_convolution_hardtanh_23", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 39, scope: !7)
!22 = !DILocation(line: 32, column: 49, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 44, scope: !7)
!25 = !DILocation(line: 32, column: 30, scope: !7)
!26 = !DILocation(line: 32, column: 54, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 33, column: 35, scope: !7)
!29 = !DILocation(line: 34, column: 30, scope: !7)
!30 = !DILocation(line: 34, column: 35, scope: !7)
!31 = !DILocation(line: 35, column: 31, scope: !7)
!32 = !DILocation(line: 35, column: 36, scope: !7)
!33 = !DILocation(line: 36, column: 31, scope: !7)
!34 = !DILocation(line: 36, column: 36, scope: !7)
!35 = !DILocation(line: 39, column: 18, scope: !7)
!36 = !DILocation(line: 40, column: 26, scope: !7)
!37 = !DILocation(line: 42, column: 18, scope: !7)
!38 = !DILocation(line: 37, column: 18, scope: !7)
!39 = !DILocation(line: 45, column: 19, scope: !7)
!40 = !DILocation(line: 46, column: 20, scope: !7)
!41 = !DILocation(line: 47, column: 20, scope: !7)
!42 = !DILocation(line: 121, column: 29, scope: !43, inlinedAt: !45)
!43 = distinct !DILexicalBlockFile(scope: !7, file: !44, discriminator: 0)
!44 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!45 = !DILocation(line: 49, column: 42, scope: !7)
!46 = !DILocation(line: 110, column: 15, scope: !43, inlinedAt: !47)
!47 = !DILocation(line: 51, column: 42, scope: !7)
!48 = !DILocation(line: 112, column: 21, scope: !43, inlinedAt: !47)
!49 = !DILocation(line: 112, column: 16, scope: !43, inlinedAt: !47)
!50 = !DILocation(line: 113, column: 29, scope: !43, inlinedAt: !47)
!51 = !DILocation(line: 52, column: 33, scope: !7)
!52 = !DILocation(line: 52, column: 30, scope: !7)
!53 = !DILocation(line: 52, column: 25, scope: !7)
!54 = !DILocation(line: 52, column: 45, scope: !7)
!55 = !DILocation(line: 53, column: 25, scope: !7)
!56 = !DILocation(line: 53, column: 56, scope: !7)
!57 = !DILocation(line: 53, column: 4, scope: !7)
