; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [74 x i8] c"inductor_cache/bh/cbhtgxoxvhnf4c4wa2nvfgpx6n4d473mlw6wtlghndjtaiwxoemh.py\00"
@assertMessage_0 = internal constant [38 x i8] c"index out of bounds: 0 <= tmp4 < 1024\00"
@global_smem = external addrspace(3) global [0 x i8], align 16

; Function Attrs: noreturn
declare !dbg !7 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define void @triton_poi_fused_embedding_mul_pow_sub_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !11 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #3, !dbg !12
  %9 = shl i32 %8, 5, !dbg !13
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !14
  %11 = shl i32 %10, 2, !dbg !14
  %12 = and i32 %11, 28, !dbg !14
  %13 = lshr i32 %10, 3, !dbg !14
  %14 = and i32 %13, 15, !dbg !14
  %15 = or disjoint i32 %14, 16, !dbg !14
  %16 = and i32 %10, 31, !dbg !14
  %17 = or disjoint i32 %9, %12, !dbg !15
  %18 = or disjoint i32 %9, %14, !dbg !15
  %19 = or disjoint i32 %9, %15, !dbg !15
  %20 = or disjoint i32 %9, %16, !dbg !15
  %21 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !16
  %22 = shl i32 %21, 5, !dbg !17
  %23 = or disjoint i32 %22, %14, !dbg !18
  %24 = or disjoint i32 %22, %15, !dbg !18
  %25 = icmp slt i32 %23, 64, !dbg !19
  %26 = icmp slt i32 %24, 64, !dbg !19
  %.frozen = freeze i32 %17, !dbg !20
  %27 = sdiv i32 %.frozen, 256, !dbg !20
  %28 = mul i32 %27, 256, !dbg !21
  %.decomposed = sub i32 %.frozen, %28, !dbg !21
  %29 = sext i32 %18 to i64, !dbg !22
  %30 = getelementptr i64, ptr addrspace(1) %0, i64 %29, !dbg !22
  %31 = sext i32 %19 to i64, !dbg !22
  %32 = getelementptr i64, ptr addrspace(1) %0, i64 %31, !dbg !22
  %33 = sext i32 %20 to i64, !dbg !22
  %34 = getelementptr i64, ptr addrspace(1) %0, i64 %33, !dbg !22
  %35 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %30, i1 true) #3, !dbg !23
  %36 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %30, i1 true) #3, !dbg !23
  %37 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %30, i1 true) #3, !dbg !23
  %38 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %30, i1 true) #3, !dbg !23
  %39 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %32, i1 true) #3, !dbg !23
  %40 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %32, i1 true) #3, !dbg !23
  %41 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %32, i1 true) #3, !dbg !23
  %42 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %32, i1 true) #3, !dbg !23
  %43 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %34, i1 true) #3, !dbg !23
  %44 = shl i32 %23, 8, !dbg !24
  %45 = shl i32 %24, 8, !dbg !24
  %46 = shl i32 %27, 14, !dbg !25
  %47 = add i32 %46, %.decomposed, !dbg !26
  %48 = add i32 %47, %44, !dbg !27
  %49 = add i32 %47, %45, !dbg !27
  %50 = sext i32 %48 to i64, !dbg !28
  %51 = getelementptr float, ptr addrspace(1) %2, i64 %50, !dbg !28
  %52 = sext i32 %49 to i64, !dbg !28
  %53 = getelementptr float, ptr addrspace(1) %2, i64 %52, !dbg !28
  %54 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %51, i1 %25) #3, !dbg !29
  %55 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %53, i1 %26) #3, !dbg !29
  %56 = sext i32 %23 to i64, !dbg !30
  %57 = getelementptr float, ptr addrspace(1) %3, i64 %56, !dbg !30
  %58 = sext i32 %24 to i64, !dbg !30
  %59 = getelementptr float, ptr addrspace(1) %3, i64 %58, !dbg !30
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 %25) #3, !dbg !31
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 %25) #3, !dbg !31
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 %25) #3, !dbg !31
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 %25) #3, !dbg !31
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 %26) #3, !dbg !31
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 %26) #3, !dbg !31
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 %26) #3, !dbg !31
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 %26) #3, !dbg !31
  %68 = lshr i64 %43, 53, !dbg !32
  %69 = and i64 %68, 1024, !dbg !32
  %70 = add i64 %69, %43, !dbg !32
  %71 = icmp ugt i64 %70, 1023, !dbg !33
  br i1 %71, label %72, label %73, !dbg !34

72:                                               ; preds = %7
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 39, ptr nonnull @assertFunc_0, i64 1), !dbg !34
  unreachable, !dbg !34

73:                                               ; preds = %7
  %74 = lshr i64 %42, 53, !dbg !32
  %75 = and i64 %74, 1024, !dbg !32
  %76 = lshr i64 %38, 53, !dbg !32
  %77 = and i64 %76, 1024, !dbg !32
  %78 = bitcast i32 %67 to float, !dbg !31
  %79 = bitcast i32 %63 to float, !dbg !31
  %80 = extractvalue { i32, i32, i32, i32 } %55, 3, !dbg !29
  %81 = bitcast i32 %80 to float, !dbg !29
  %82 = extractvalue { i32, i32, i32, i32 } %55, 2, !dbg !29
  %83 = bitcast i32 %82 to float, !dbg !29
  %84 = extractvalue { i32, i32, i32, i32 } %55, 1, !dbg !29
  %85 = bitcast i32 %84 to float, !dbg !29
  %86 = extractvalue { i32, i32, i32, i32 } %55, 0, !dbg !29
  %87 = bitcast i32 %86 to float, !dbg !29
  %88 = extractvalue { i32, i32, i32, i32 } %54, 3, !dbg !29
  %89 = bitcast i32 %88 to float, !dbg !29
  %90 = extractvalue { i32, i32, i32, i32 } %54, 2, !dbg !29
  %91 = bitcast i32 %90 to float, !dbg !29
  %92 = extractvalue { i32, i32, i32, i32 } %54, 1, !dbg !29
  %93 = bitcast i32 %92 to float, !dbg !29
  %94 = extractvalue { i32, i32, i32, i32 } %54, 0, !dbg !29
  %95 = bitcast i32 %94 to float, !dbg !29
  %96 = or disjoint i32 %22, %12, !dbg !18
  %97 = icmp slt i32 %96, 64, !dbg !19
  %98 = or disjoint i32 %12, 3, !dbg !35
  %99 = or disjoint i32 %22, %98, !dbg !18
  %100 = or disjoint i32 %12, 2, !dbg !35
  %101 = or disjoint i32 %22, %100, !dbg !18
  %102 = or disjoint i32 %12, 1, !dbg !35
  %103 = or disjoint i32 %22, %102, !dbg !18
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %104 = shl i32 %96, 10, !dbg !36
  %105 = shl i32 %103, 10, !dbg !36
  %106 = shl i32 %101, 10, !dbg !36
  %107 = shl i32 %99, 10, !dbg !36
  %108 = sext i32 %104 to i64, !dbg !37
  %109 = sext i32 %105 to i64, !dbg !37
  %110 = sext i32 %106 to i64, !dbg !37
  %111 = sext i32 %107 to i64, !dbg !37
  %112 = getelementptr float, ptr addrspace(1) %1, i64 %38, !dbg !38
  %113 = getelementptr float, ptr addrspace(1) %112, i64 %77, !dbg !38
  %114 = getelementptr float, ptr addrspace(1) %113, i64 %108, !dbg !38
  %115 = getelementptr float, ptr addrspace(1) %113, i64 %109, !dbg !38
  %116 = getelementptr float, ptr addrspace(1) %113, i64 %110, !dbg !38
  %117 = getelementptr float, ptr addrspace(1) %113, i64 %111, !dbg !38
  %118 = getelementptr float, ptr addrspace(1) %1, i64 %42, !dbg !38
  %119 = getelementptr float, ptr addrspace(1) %118, i64 %75, !dbg !38
  %120 = getelementptr float, ptr addrspace(1) %119, i64 %108, !dbg !38
  %121 = getelementptr float, ptr addrspace(1) %119, i64 %109, !dbg !38
  %122 = getelementptr float, ptr addrspace(1) %119, i64 %110, !dbg !38
  %123 = getelementptr float, ptr addrspace(1) %119, i64 %111, !dbg !38
  %124 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %114, i1 %97) #3, !dbg !39
  %125 = bitcast i32 %124 to float, !dbg !39
  %126 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %115, i1 %97) #3, !dbg !39
  %127 = bitcast i32 %126 to float, !dbg !39
  %128 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %116, i1 %97) #3, !dbg !39
  %129 = bitcast i32 %128 to float, !dbg !39
  %130 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %117, i1 %97) #3, !dbg !39
  %131 = bitcast i32 %130 to float, !dbg !39
  %132 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %120, i1 %97) #3, !dbg !39
  %133 = bitcast i32 %132 to float, !dbg !39
  %134 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %121, i1 %97) #3, !dbg !39
  %135 = bitcast i32 %134 to float, !dbg !39
  %136 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %122, i1 %97) #3, !dbg !39
  %137 = bitcast i32 %136 to float, !dbg !39
  %138 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %123, i1 %97) #3, !dbg !39
  %139 = bitcast i32 %138 to float, !dbg !39
  %140 = fadd float %95, %79, !dbg !40
  %141 = fadd float %93, %79, !dbg !40
  %142 = fadd float %91, %79, !dbg !40
  %143 = fadd float %89, %79, !dbg !40
  %144 = fadd float %87, %78, !dbg !40
  %145 = fadd float %85, %78, !dbg !40
  %146 = fadd float %83, %78, !dbg !40
  %147 = fadd float %81, %78, !dbg !40
  %148 = shl i32 %10, 7, !dbg !40
  %149 = and i32 %148, 896, !dbg !40
  %150 = or disjoint i32 %149, %14, !dbg !40
  %151 = and i32 %11, 508, !dbg !40
  %152 = lshr exact i32 %149, 3, !dbg !40
  %153 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %152, !dbg !40
  %154 = getelementptr float, ptr addrspace(3) %153, i32 %150, !dbg !40
  %155 = bitcast float %140 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %154, <1 x i32> %155, i1 true) #3, !dbg !40
  %156 = or disjoint i32 %150, 32, !dbg !40
  %157 = lshr i32 %156, 5, !dbg !40
  %158 = getelementptr float, ptr addrspace(3) @global_smem, i32 %157, !dbg !40
  %159 = getelementptr float, ptr addrspace(3) %158, i32 %156, !dbg !40
  %160 = bitcast float %141 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %159, <1 x i32> %160, i1 true) #3, !dbg !40
  %161 = or disjoint i32 %150, 64, !dbg !40
  %162 = lshr i32 %161, 5, !dbg !40
  %163 = getelementptr float, ptr addrspace(3) @global_smem, i32 %162, !dbg !40
  %164 = getelementptr float, ptr addrspace(3) %163, i32 %161, !dbg !40
  %165 = bitcast float %142 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %164, <1 x i32> %165, i1 true) #3, !dbg !40
  %166 = or disjoint i32 %150, 96, !dbg !40
  %167 = lshr i32 %166, 5, !dbg !40
  %168 = getelementptr float, ptr addrspace(3) @global_smem, i32 %167, !dbg !40
  %169 = getelementptr float, ptr addrspace(3) %168, i32 %166, !dbg !40
  %170 = bitcast float %143 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %169, <1 x i32> %170, i1 true) #3, !dbg !40
  %171 = or disjoint i32 %150, 16, !dbg !40
  %172 = getelementptr float, ptr addrspace(3) %153, i32 %171, !dbg !40
  %173 = bitcast float %144 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %172, <1 x i32> %173, i1 true) #3, !dbg !40
  %174 = or disjoint i32 %150, 48, !dbg !40
  %175 = lshr i32 %174, 5, !dbg !40
  %176 = getelementptr float, ptr addrspace(3) @global_smem, i32 %175, !dbg !40
  %177 = getelementptr float, ptr addrspace(3) %176, i32 %174, !dbg !40
  %178 = bitcast float %145 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %177, <1 x i32> %178, i1 true) #3, !dbg !40
  %179 = or disjoint i32 %150, 80, !dbg !40
  %180 = lshr i32 %179, 5, !dbg !40
  %181 = getelementptr float, ptr addrspace(3) @global_smem, i32 %180, !dbg !40
  %182 = getelementptr float, ptr addrspace(3) %181, i32 %179, !dbg !40
  %183 = bitcast float %146 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %182, <1 x i32> %183, i1 true) #3, !dbg !40
  %184 = or disjoint i32 %150, 112, !dbg !40
  %185 = lshr i32 %184, 5, !dbg !40
  %186 = getelementptr float, ptr addrspace(3) @global_smem, i32 %185, !dbg !40
  %187 = getelementptr float, ptr addrspace(3) %186, i32 %184, !dbg !40
  %188 = bitcast float %147 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %187, <1 x i32> %188, i1 true) #3, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %189 = lshr i32 %151, 5, !dbg !40
  %190 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %189, !dbg !40
  %191 = getelementptr inbounds float, ptr addrspace(3) %190, i32 %151, !dbg !40
  %192 = load float, ptr addrspace(3) %191, align 4, !dbg !40
  %193 = or disjoint i32 %151, 1, !dbg !40
  %194 = getelementptr inbounds float, ptr addrspace(3) %190, i32 %193, !dbg !40
  %195 = load float, ptr addrspace(3) %194, align 4, !dbg !40
  %196 = or disjoint i32 %151, 2, !dbg !40
  %197 = getelementptr inbounds float, ptr addrspace(3) %190, i32 %196, !dbg !40
  %198 = load float, ptr addrspace(3) %197, align 4, !dbg !40
  %199 = or disjoint i32 %151, 3, !dbg !40
  %200 = getelementptr inbounds float, ptr addrspace(3) %190, i32 %199, !dbg !40
  %201 = load float, ptr addrspace(3) %200, align 4, !dbg !40
  %202 = or disjoint i32 %151, 512, !dbg !40
  %203 = lshr i32 %202, 5, !dbg !40
  %204 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %203, !dbg !40
  %205 = getelementptr inbounds float, ptr addrspace(3) %204, i32 %202, !dbg !40
  %206 = load float, ptr addrspace(3) %205, align 4, !dbg !40
  %207 = or disjoint i32 %151, 513, !dbg !40
  %208 = lshr i32 %207, 5, !dbg !40
  %209 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %208, !dbg !40
  %210 = getelementptr inbounds float, ptr addrspace(3) %209, i32 %207, !dbg !40
  %211 = load float, ptr addrspace(3) %210, align 4, !dbg !40
  %212 = or disjoint i32 %151, 514, !dbg !40
  %213 = lshr i32 %212, 5, !dbg !40
  %214 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %213, !dbg !40
  %215 = getelementptr inbounds float, ptr addrspace(3) %214, i32 %212, !dbg !40
  %216 = load float, ptr addrspace(3) %215, align 4, !dbg !40
  %217 = or disjoint i32 %151, 515, !dbg !40
  %218 = lshr i32 %217, 5, !dbg !40
  %219 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %218, !dbg !40
  %220 = getelementptr inbounds float, ptr addrspace(3) %219, i32 %217, !dbg !40
  %221 = load float, ptr addrspace(3) %220, align 4, !dbg !40
  %222 = fsub float %125, %192, !dbg !41
  %223 = fsub float %127, %195, !dbg !41
  %224 = fsub float %129, %198, !dbg !41
  %225 = fsub float %131, %201, !dbg !41
  %226 = fsub float %133, %206, !dbg !41
  %227 = fsub float %135, %211, !dbg !41
  %228 = fsub float %137, %216, !dbg !41
  %229 = fsub float %139, %221, !dbg !41
  %230 = fmul float %222, 2.000000e+00, !dbg !42
  %231 = fmul float %223, 2.000000e+00, !dbg !42
  %232 = fmul float %224, 2.000000e+00, !dbg !42
  %233 = fmul float %225, 2.000000e+00, !dbg !42
  %234 = fmul float %226, 2.000000e+00, !dbg !42
  %235 = fmul float %227, 2.000000e+00, !dbg !42
  %236 = fmul float %228, 2.000000e+00, !dbg !42
  %237 = fmul float %229, 2.000000e+00, !dbg !42
  %238 = shl i32 %18, 6, !dbg !43
  %239 = shl i32 %19, 6, !dbg !43
  %240 = add i32 %96, %238, !dbg !44
  %241 = add i32 %96, %239, !dbg !44
  %242 = sext i32 %240 to i64, !dbg !45
  %243 = getelementptr float, ptr addrspace(1) %4, i64 %242, !dbg !45
  %244 = sext i32 %241 to i64, !dbg !45
  %245 = getelementptr float, ptr addrspace(1) %4, i64 %244, !dbg !45
  %246 = bitcast float %230 to i32, !dbg !46
  %247 = bitcast float %231 to i32, !dbg !46
  %248 = bitcast float %232 to i32, !dbg !46
  %249 = bitcast float %233 to i32, !dbg !46
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %246, i32 %247, i32 %248, i32 %249, ptr addrspace(1) %243, i1 %97) #3, !dbg !46
  %250 = bitcast float %234 to i32, !dbg !46
  %251 = bitcast float %235 to i32, !dbg !46
  %252 = bitcast float %236 to i32, !dbg !46
  %253 = bitcast float %237 to i32, !dbg !46
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %250, i32 %251, i32 %252, i32 %253, ptr addrspace(1) %245, i1 %97) #3, !dbg !46
  ret void, !dbg !47
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { noreturn }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cbhtgxoxvhnf4c4wa2nvfgpx6n4d473mlw6wtlghndjtaiwxoemh.py", directory: "inductor_cache/bh")
!4 = !{ptr @triton_poi_fused_embedding_mul_pow_sub_12, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_embedding_mul_pow_sub_12, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !8, file: !8, type: !9, spFlags: DISPFlagOptimized)
!8 = !DIFile(filename: "<unknown>", directory: "")
!9 = !DISubroutineType(cc: DW_CC_normal, types: !10)
!10 = !{}
!11 = distinct !DISubprogram(name: "triton_poi_fused_embedding_mul_pow_sub_12", linkageName: "triton_poi_fused_embedding_mul_pow_sub_12", scope: !3, file: !3, line: 19, type: !9, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!12 = !DILocation(line: 22, column: 28, scope: !11)
!13 = !DILocation(line: 22, column: 33, scope: !11)
!14 = !DILocation(line: 23, column: 44, scope: !11)
!15 = !DILocation(line: 23, column: 23, scope: !11)
!16 = !DILocation(line: 25, column: 28, scope: !11)
!17 = !DILocation(line: 25, column: 33, scope: !11)
!18 = !DILocation(line: 26, column: 23, scope: !11)
!19 = !DILocation(line: 27, column: 21, scope: !11)
!20 = !DILocation(line: 31, column: 19, scope: !11)
!21 = !DILocation(line: 30, column: 19, scope: !11)
!22 = !DILocation(line: 32, column: 30, scope: !11)
!23 = !DILocation(line: 32, column: 35, scope: !11)
!24 = !DILocation(line: 33, column: 39, scope: !11)
!25 = !DILocation(line: 33, column: 50, scope: !11)
!26 = !DILocation(line: 33, column: 35, scope: !11)
!27 = !DILocation(line: 33, column: 44, scope: !11)
!28 = !DILocation(line: 33, column: 30, scope: !11)
!29 = !DILocation(line: 33, column: 55, scope: !11)
!30 = !DILocation(line: 34, column: 30, scope: !11)
!31 = !DILocation(line: 34, column: 35, scope: !11)
!32 = !DILocation(line: 38, column: 32, scope: !11)
!33 = !DILocation(line: 39, column: 36, scope: !11)
!34 = !DILocation(line: 39, column: 50, scope: !11)
!35 = !DILocation(line: 26, column: 44, scope: !11)
!36 = !DILocation(line: 40, column: 42, scope: !11)
!37 = !DILocation(line: 40, column: 37, scope: !11)
!38 = !DILocation(line: 40, column: 30, scope: !11)
!39 = !DILocation(line: 40, column: 47, scope: !11)
!40 = !DILocation(line: 41, column: 18, scope: !11)
!41 = !DILocation(line: 42, column: 19, scope: !11)
!42 = !DILocation(line: 44, column: 20, scope: !11)
!43 = !DILocation(line: 45, column: 33, scope: !11)
!44 = !DILocation(line: 45, column: 30, scope: !11)
!45 = !DILocation(line: 45, column: 25, scope: !11)
!46 = !DILocation(line: 45, column: 45, scope: !11)
!47 = !DILocation(line: 45, column: 4, scope: !11)
