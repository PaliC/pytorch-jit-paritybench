#loc = loc("inductor_cache/bh/cbhtgxoxvhnf4c4wa2nvfgpx6n4d473mlw6wtlghndjtaiwxoemh.py":19:0)
module {
  tt.func public @triton_poi_fused_embedding_mul_pow_sub_12(%arg0: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("inductor_cache/bh/cbhtgxoxvhnf4c4wa2nvfgpx6n4d473mlw6wtlghndjtaiwxoemh.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/bh/cbhtgxoxvhnf4c4wa2nvfgpx6n4d473mlw6wtlghndjtaiwxoemh.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/bh/cbhtgxoxvhnf4c4wa2nvfgpx6n4d473mlw6wtlghndjtaiwxoemh.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/bh/cbhtgxoxvhnf4c4wa2nvfgpx6n4d473mlw6wtlghndjtaiwxoemh.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/bh/cbhtgxoxvhnf4c4wa2nvfgpx6n4d473mlw6wtlghndjtaiwxoemh.py":19:0), %arg5: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/bh/cbhtgxoxvhnf4c4wa2nvfgpx6n4d473mlw6wtlghndjtaiwxoemh.py":19:0), %arg6: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/bh/cbhtgxoxvhnf4c4wa2nvfgpx6n4d473mlw6wtlghndjtaiwxoemh.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<1024> : tensor<1x32xi64> loc(#loc1)
    %cst_0 = arith.constant dense<0> : tensor<1x32xi64> loc(#loc1)
    %cst_1 = arith.constant dense<64> : tensor<1x32xi32> loc(#loc1)
    %cst_2 = arith.constant dense<2.000000e+00> : tensor<32x32xf32> loc(#loc1)
    %cst_3 = arith.constant dense<1024> : tensor<32x1xi32> loc(#loc1)
    %cst_4 = arith.constant dense<16384> : tensor<1x32xi32> loc(#loc1)
    %cst_5 = arith.constant dense<256> : tensor<32x1xi32> loc(#loc1)
    %cst_6 = arith.constant dense<256> : tensor<1x32xi32> loc(#loc1)
    %cst_7 = arith.constant dense<64> : tensor<32x1xi32> loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %0 = tt.get_program_id y : i32 loc(#loc2)
    %1 = arith.muli %0, %c32_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32> loc(#loc4)
    %3 = tt.expand_dims %2 {axis = 0 : i32} : tensor<32xi32> -> tensor<1x32xi32> loc(#loc5)
    %4 = tt.splat %1 : i32 -> tensor<1x32xi32> loc(#loc6)
    %5 = arith.addi %4, %3 : tensor<1x32xi32> loc(#loc6)
    %6 = tt.get_program_id x : i32 loc(#loc7)
    %7 = arith.muli %6, %c32_i32 : i32 loc(#loc8)
    %8 = tt.expand_dims %2 {axis = 1 : i32} : tensor<32xi32> -> tensor<32x1xi32> loc(#loc9)
    %9 = tt.splat %7 : i32 -> tensor<32x1xi32> loc(#loc10)
    %10 = arith.addi %9, %8 : tensor<32x1xi32> loc(#loc10)
    %11 = arith.cmpi slt, %10, %cst_7 : tensor<32x1xi32> loc(#loc11)
    %12 = arith.remsi %5, %cst_6 : tensor<1x32xi32> loc(#loc12)
    %13 = arith.divsi %5, %cst_6 : tensor<1x32xi32> loc(#loc13)
    %14 = tt.splat %arg0 : !tt.ptr<i64> -> tensor<1x32x!tt.ptr<i64>> loc(#loc14)
    %15 = tt.addptr %14, %5 : tensor<1x32x!tt.ptr<i64>>, tensor<1x32xi32> loc(#loc14)
    %16 = tt.load %15 evictionPolicy = evict_last : tensor<1x32x!tt.ptr<i64>> loc(#loc15)
    %17 = arith.muli %10, %cst_5 : tensor<32x1xi32> loc(#loc16)
    %18 = tt.broadcast %12 : tensor<1x32xi32> -> tensor<32x32xi32> loc(#loc17)
    %19 = tt.broadcast %17 : tensor<32x1xi32> -> tensor<32x32xi32> loc(#loc17)
    %20 = arith.addi %18, %19 : tensor<32x32xi32> loc(#loc17)
    %21 = arith.muli %13, %cst_4 : tensor<1x32xi32> loc(#loc18)
    %22 = tt.broadcast %21 : tensor<1x32xi32> -> tensor<32x32xi32> loc(#loc19)
    %23 = arith.addi %20, %22 : tensor<32x32xi32> loc(#loc19)
    %24 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<32x32x!tt.ptr<f32>> loc(#loc20)
    %25 = tt.addptr %24, %23 : tensor<32x32x!tt.ptr<f32>>, tensor<32x32xi32> loc(#loc20)
    %26 = tt.broadcast %11 : tensor<32x1xi1> -> tensor<32x32xi1> loc(#loc21)
    %27 = tt.load %25, %26 evictionPolicy = evict_last : tensor<32x32x!tt.ptr<f32>> loc(#loc21)
    %28 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<32x1x!tt.ptr<f32>> loc(#loc22)
    %29 = tt.addptr %28, %10 : tensor<32x1x!tt.ptr<f32>>, tensor<32x1xi32> loc(#loc22)
    %30 = tt.load %29, %11 evictionPolicy = evict_last : tensor<32x1x!tt.ptr<f32>> loc(#loc23)
    %31 = arith.addi %16, %cst : tensor<1x32xi64> loc(#loc24)
    %32 = arith.cmpi slt, %16, %cst_0 : tensor<1x32xi64> loc(#loc25)
    %33 = arith.select %32, %31, %16 : tensor<1x32xi1>, tensor<1x32xi64> loc(#loc26)
    %34 = tt.broadcast %33 : tensor<1x32xi64> -> tensor<32x32xi64> loc(#loc26)
    %35 = arith.cmpi sge, %33, %cst_0 : tensor<1x32xi64> loc(#loc27)
    %36 = arith.cmpi slt, %33, %cst : tensor<1x32xi64> loc(#loc28)
    %37 = arith.andi %35, %36 : tensor<1x32xi1> loc(#loc29)
    %38 = tt.broadcast %37 : tensor<1x32xi1> -> tensor<32x32xi1> loc(#loc29)
    tt.assert %38, "index out of bounds: 0 <= tmp4 < 1024" : tensor<32x32xi1> loc(#loc30)
    %39 = arith.muli %10, %cst_3 : tensor<32x1xi32> loc(#loc31)
    %40 = arith.extsi %39 : tensor<32x1xi32> to tensor<32x1xi64> loc(#loc32)
    %41 = tt.broadcast %40 : tensor<32x1xi64> -> tensor<32x32xi64> loc(#loc32)
    %42 = arith.addi %34, %41 : tensor<32x32xi64> loc(#loc32)
    %43 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<32x32x!tt.ptr<f32>> loc(#loc33)
    %44 = tt.addptr %43, %42 : tensor<32x32x!tt.ptr<f32>>, tensor<32x32xi64> loc(#loc33)
    %45 = tt.load %44, %26 evictionPolicy = evict_last : tensor<32x32x!tt.ptr<f32>> loc(#loc34)
    %46 = tt.broadcast %30 : tensor<32x1xf32> -> tensor<32x32xf32> loc(#loc35)
    %47 = arith.addf %27, %46 : tensor<32x32xf32> loc(#loc35)
    %48 = arith.subf %45, %47 : tensor<32x32xf32> loc(#loc36)
    %49 = arith.mulf %48, %cst_2 : tensor<32x32xf32> loc(#loc37)
    %50 = arith.muli %5, %cst_1 : tensor<1x32xi32> loc(#loc38)
    %51 = tt.broadcast %10 : tensor<32x1xi32> -> tensor<32x32xi32> loc(#loc39)
    %52 = tt.broadcast %50 : tensor<1x32xi32> -> tensor<32x32xi32> loc(#loc39)
    %53 = arith.addi %51, %52 : tensor<32x32xi32> loc(#loc39)
    %54 = tt.splat %arg4 : !tt.ptr<f32> -> tensor<32x32x!tt.ptr<f32>> loc(#loc40)
    %55 = tt.addptr %54, %53 : tensor<32x32x!tt.ptr<f32>>, tensor<32x32xi32> loc(#loc40)
    tt.store %55, %49, %26 : tensor<32x32x!tt.ptr<f32>> loc(#loc41)
    tt.return loc(#loc42)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("inductor_cache/bh/cbhtgxoxvhnf4c4wa2nvfgpx6n4d473mlw6wtlghndjtaiwxoemh.py":22:28)
#loc3 = loc("inductor_cache/bh/cbhtgxoxvhnf4c4wa2nvfgpx6n4d473mlw6wtlghndjtaiwxoemh.py":22:33)
#loc4 = loc("inductor_cache/bh/cbhtgxoxvhnf4c4wa2nvfgpx6n4d473mlw6wtlghndjtaiwxoemh.py":23:36)
#loc5 = loc("inductor_cache/bh/cbhtgxoxvhnf4c4wa2nvfgpx6n4d473mlw6wtlghndjtaiwxoemh.py":23:44)
#loc6 = loc("inductor_cache/bh/cbhtgxoxvhnf4c4wa2nvfgpx6n4d473mlw6wtlghndjtaiwxoemh.py":23:23)
#loc7 = loc("inductor_cache/bh/cbhtgxoxvhnf4c4wa2nvfgpx6n4d473mlw6wtlghndjtaiwxoemh.py":25:28)
#loc8 = loc("inductor_cache/bh/cbhtgxoxvhnf4c4wa2nvfgpx6n4d473mlw6wtlghndjtaiwxoemh.py":25:33)
#loc9 = loc("inductor_cache/bh/cbhtgxoxvhnf4c4wa2nvfgpx6n4d473mlw6wtlghndjtaiwxoemh.py":26:44)
#loc10 = loc("inductor_cache/bh/cbhtgxoxvhnf4c4wa2nvfgpx6n4d473mlw6wtlghndjtaiwxoemh.py":26:23)
#loc11 = loc("inductor_cache/bh/cbhtgxoxvhnf4c4wa2nvfgpx6n4d473mlw6wtlghndjtaiwxoemh.py":27:21)
#loc12 = loc("inductor_cache/bh/cbhtgxoxvhnf4c4wa2nvfgpx6n4d473mlw6wtlghndjtaiwxoemh.py":30:19)
#loc13 = loc("inductor_cache/bh/cbhtgxoxvhnf4c4wa2nvfgpx6n4d473mlw6wtlghndjtaiwxoemh.py":31:19)
#loc14 = loc("inductor_cache/bh/cbhtgxoxvhnf4c4wa2nvfgpx6n4d473mlw6wtlghndjtaiwxoemh.py":32:30)
#loc15 = loc("inductor_cache/bh/cbhtgxoxvhnf4c4wa2nvfgpx6n4d473mlw6wtlghndjtaiwxoemh.py":32:35)
#loc16 = loc("inductor_cache/bh/cbhtgxoxvhnf4c4wa2nvfgpx6n4d473mlw6wtlghndjtaiwxoemh.py":33:39)
#loc17 = loc("inductor_cache/bh/cbhtgxoxvhnf4c4wa2nvfgpx6n4d473mlw6wtlghndjtaiwxoemh.py":33:35)
#loc18 = loc("inductor_cache/bh/cbhtgxoxvhnf4c4wa2nvfgpx6n4d473mlw6wtlghndjtaiwxoemh.py":33:50)
#loc19 = loc("inductor_cache/bh/cbhtgxoxvhnf4c4wa2nvfgpx6n4d473mlw6wtlghndjtaiwxoemh.py":33:44)
#loc20 = loc("inductor_cache/bh/cbhtgxoxvhnf4c4wa2nvfgpx6n4d473mlw6wtlghndjtaiwxoemh.py":33:30)
#loc21 = loc("inductor_cache/bh/cbhtgxoxvhnf4c4wa2nvfgpx6n4d473mlw6wtlghndjtaiwxoemh.py":33:55)
#loc22 = loc("inductor_cache/bh/cbhtgxoxvhnf4c4wa2nvfgpx6n4d473mlw6wtlghndjtaiwxoemh.py":34:30)
#loc23 = loc("inductor_cache/bh/cbhtgxoxvhnf4c4wa2nvfgpx6n4d473mlw6wtlghndjtaiwxoemh.py":34:35)
#loc24 = loc("inductor_cache/bh/cbhtgxoxvhnf4c4wa2nvfgpx6n4d473mlw6wtlghndjtaiwxoemh.py":36:18)
#loc25 = loc("inductor_cache/bh/cbhtgxoxvhnf4c4wa2nvfgpx6n4d473mlw6wtlghndjtaiwxoemh.py":37:18)
#loc26 = loc("inductor_cache/bh/cbhtgxoxvhnf4c4wa2nvfgpx6n4d473mlw6wtlghndjtaiwxoemh.py":38:32)
#loc27 = loc("inductor_cache/bh/cbhtgxoxvhnf4c4wa2nvfgpx6n4d473mlw6wtlghndjtaiwxoemh.py":39:27)
#loc28 = loc("inductor_cache/bh/cbhtgxoxvhnf4c4wa2nvfgpx6n4d473mlw6wtlghndjtaiwxoemh.py":39:43)
#loc29 = loc("inductor_cache/bh/cbhtgxoxvhnf4c4wa2nvfgpx6n4d473mlw6wtlghndjtaiwxoemh.py":39:36)
#loc30 = loc("inductor_cache/bh/cbhtgxoxvhnf4c4wa2nvfgpx6n4d473mlw6wtlghndjtaiwxoemh.py":39:50)
#loc31 = loc("inductor_cache/bh/cbhtgxoxvhnf4c4wa2nvfgpx6n4d473mlw6wtlghndjtaiwxoemh.py":40:42)
#loc32 = loc("inductor_cache/bh/cbhtgxoxvhnf4c4wa2nvfgpx6n4d473mlw6wtlghndjtaiwxoemh.py":40:37)
#loc33 = loc("inductor_cache/bh/cbhtgxoxvhnf4c4wa2nvfgpx6n4d473mlw6wtlghndjtaiwxoemh.py":40:30)
#loc34 = loc("inductor_cache/bh/cbhtgxoxvhnf4c4wa2nvfgpx6n4d473mlw6wtlghndjtaiwxoemh.py":40:47)
#loc35 = loc("inductor_cache/bh/cbhtgxoxvhnf4c4wa2nvfgpx6n4d473mlw6wtlghndjtaiwxoemh.py":41:18)
#loc36 = loc("inductor_cache/bh/cbhtgxoxvhnf4c4wa2nvfgpx6n4d473mlw6wtlghndjtaiwxoemh.py":42:19)
#loc37 = loc("inductor_cache/bh/cbhtgxoxvhnf4c4wa2nvfgpx6n4d473mlw6wtlghndjtaiwxoemh.py":44:20)
#loc38 = loc("inductor_cache/bh/cbhtgxoxvhnf4c4wa2nvfgpx6n4d473mlw6wtlghndjtaiwxoemh.py":45:33)
#loc39 = loc("inductor_cache/bh/cbhtgxoxvhnf4c4wa2nvfgpx6n4d473mlw6wtlghndjtaiwxoemh.py":45:30)
#loc40 = loc("inductor_cache/bh/cbhtgxoxvhnf4c4wa2nvfgpx6n4d473mlw6wtlghndjtaiwxoemh.py":45:25)
#loc41 = loc("inductor_cache/bh/cbhtgxoxvhnf4c4wa2nvfgpx6n4d473mlw6wtlghndjtaiwxoemh.py":45:45)
#loc42 = loc("inductor_cache/bh/cbhtgxoxvhnf4c4wa2nvfgpx6n4d473mlw6wtlghndjtaiwxoemh.py":45:4)
