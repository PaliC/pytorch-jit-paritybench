; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_add_constant_pad_nd_convolution_21(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %8 = shl i32 %7, 9, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = shl i32 %9, 1, !dbg !12
  %11 = and i32 %10, 510, !dbg !12
  %12 = or disjoint i32 %8, %11, !dbg !13
  %13 = or disjoint i32 %12, 1, !dbg !13
  %14 = icmp slt i32 %12, 82944, !dbg !14
  %15 = sdiv i32 %12, 9, !dbg !15
  %16 = sdiv i32 %13, 9, !dbg !15
  %17 = sdiv i32 %12, 81, !dbg !16
  %18 = sdiv i32 %13, 81, !dbg !16
  %19 = srem i32 %17, 256, !dbg !17
  %20 = srem i32 %18, 256, !dbg !17
  %21 = insertelement <2 x i32> poison, i32 %12, i64 0, !dbg !18
  %22 = insertelement <2 x i32> %21, i32 %15, i64 1, !dbg !18
  %23 = srem <2 x i32> %22, splat (i32 9), !dbg !18
  %24 = icmp slt <2 x i32> %23, splat (i32 8), !dbg !19
  %25 = insertelement <2 x i32> poison, i32 %13, i64 0, !dbg !18
  %26 = insertelement <2 x i32> %25, i32 %16, i64 1, !dbg !18
  %27 = srem <2 x i32> %26, splat (i32 9), !dbg !18
  %28 = icmp slt <2 x i32> %27, splat (i32 8), !dbg !19
  %shift = shufflevector <2 x i1> %24, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !20
  %29 = and <2 x i1> %24, %shift, !dbg !20
  %30 = extractelement <2 x i1> %29, i64 0, !dbg !20
  %shift1 = shufflevector <2 x i1> %28, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !20
  %31 = and <2 x i1> %28, %shift1, !dbg !20
  %32 = extractelement <2 x i1> %31, i64 0, !dbg !20
  %33 = extractelement <2 x i32> %23, i64 1, !dbg !21
  %34 = shl nsw i32 %33, 3, !dbg !21
  %35 = extractelement <2 x i32> %27, i64 1, !dbg !21
  %36 = shl nsw i32 %35, 3, !dbg !21
  %37 = shl nsw i32 %17, 6, !dbg !22
  %38 = shl nsw i32 %18, 6, !dbg !22
  %39 = extractelement <2 x i32> %23, i64 0, !dbg !23
  %40 = add nsw i32 %37, %39, !dbg !23
  %41 = add nsw i32 %40, %34, !dbg !24
  %42 = extractelement <2 x i32> %27, i64 0, !dbg !23
  %43 = add nsw i32 %38, %42, !dbg !23
  %44 = add nsw i32 %43, %36, !dbg !24
  %45 = sext i32 %41 to i64, !dbg !25
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !25
  %47 = sext i32 %44 to i64, !dbg !25
  %48 = getelementptr float, ptr addrspace(1) %0, i64 %47, !dbg !25
  %49 = and i1 %14, %30, !dbg !26
  %50 = and i1 %32, %14, !dbg !26
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %46, i1 %49, i32 0, i1 %49) #1, !dbg !27
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %48, i1 %50, i32 0, i1 %50) #1, !dbg !27
  %53 = getelementptr float, ptr addrspace(1) %1, i64 %45, !dbg !28
  %54 = getelementptr float, ptr addrspace(1) %1, i64 %47, !dbg !28
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %53, i1 %49, i32 0, i1 %49) #1, !dbg !29
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %54, i1 %50, i32 0, i1 %50) #1, !dbg !29
  %57 = getelementptr float, ptr addrspace(1) %2, i64 %45, !dbg !30
  %58 = getelementptr float, ptr addrspace(1) %2, i64 %47, !dbg !30
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %57, i1 %49, i32 0, i1 %49) #1, !dbg !31
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %58, i1 %50, i32 0, i1 %50) #1, !dbg !31
  %61 = sext i32 %19 to i64, !dbg !32
  %62 = getelementptr float, ptr addrspace(1) %3, i64 %61, !dbg !32
  %63 = sext i32 %20 to i64, !dbg !32
  %64 = getelementptr float, ptr addrspace(1) %3, i64 %63, !dbg !32
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %62, i1 %49, i32 0, i1 %49) #1, !dbg !33
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %64, i1 %50, i32 0, i1 %50) #1, !dbg !33
  %67 = insertelement <2 x i32> poison, i32 %51, i64 0, !dbg !27
  %68 = insertelement <2 x i32> %67, i32 %59, i64 1, !dbg !27
  %69 = bitcast <2 x i32> %68 to <2 x float>, !dbg !27
  %70 = insertelement <2 x i32> poison, i32 %55, i64 0, !dbg !29
  %71 = insertelement <2 x i32> %70, i32 %65, i64 1, !dbg !29
  %72 = bitcast <2 x i32> %71 to <2 x float>, !dbg !29
  %73 = fadd <2 x float> %69, %72, !dbg !34
  %74 = insertelement <2 x i32> poison, i32 %52, i64 0, !dbg !27
  %75 = insertelement <2 x i32> %74, i32 %60, i64 1, !dbg !27
  %76 = bitcast <2 x i32> %75 to <2 x float>, !dbg !27
  %77 = insertelement <2 x i32> poison, i32 %56, i64 0, !dbg !29
  %78 = insertelement <2 x i32> %77, i32 %66, i64 1, !dbg !29
  %79 = bitcast <2 x i32> %78 to <2 x float>, !dbg !29
  %80 = fadd <2 x float> %76, %79, !dbg !34
  %shift2 = shufflevector <2 x float> %73, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !35
  %81 = fadd <2 x float> %73, %shift2, !dbg !35
  %shift3 = shufflevector <2 x float> %80, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !35
  %82 = fadd <2 x float> %80, %shift3, !dbg !35
  %83 = sext i32 %12 to i64, !dbg !36
  %84 = getelementptr float, ptr addrspace(1) %4, i64 %83, !dbg !36
  %bc = bitcast <2 x float> %81 to <2 x i32>, !dbg !37
  %85 = extractelement <2 x i32> %bc, i64 0, !dbg !37
  %86 = select i1 %30, i32 %85, i32 0, !dbg !38
  %bc4 = bitcast <2 x float> %82 to <2 x i32>, !dbg !37
  %87 = extractelement <2 x i32> %bc4, i64 0, !dbg !37
  %88 = select i1 %32, i32 %87, i32 0, !dbg !38
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %86, i32 %88, ptr addrspace(1) %84, i1 %14) #1, !dbg !37
  ret void, !dbg !39
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cfa4lva3dfxhvancoqlljnkxc4jytz3wmcyc7xpi64dmeqog4mkl.py", directory: "inductor_cache/fa")
!4 = !{ptr @triton_poi_fused_add_constant_pad_nd_convolution_21, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_constant_pad_nd_convolution_21, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_constant_pad_nd_convolution_21", linkageName: "triton_poi_fused_add_constant_pad_nd_convolution_21", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 27, column: 27, scope: !7)
!18 = !DILocation(line: 25, column: 19, scope: !7)
!19 = !DILocation(line: 33, column: 18, scope: !7)
!20 = !DILocation(line: 34, column: 18, scope: !7)
!21 = !DILocation(line: 35, column: 37, scope: !7)
!22 = !DILocation(line: 35, column: 45, scope: !7)
!23 = !DILocation(line: 35, column: 35, scope: !7)
!24 = !DILocation(line: 35, column: 42, scope: !7)
!25 = !DILocation(line: 35, column: 30, scope: !7)
!26 = !DILocation(line: 35, column: 57, scope: !7)
!27 = !DILocation(line: 35, column: 50, scope: !7)
!28 = !DILocation(line: 36, column: 30, scope: !7)
!29 = !DILocation(line: 36, column: 50, scope: !7)
!30 = !DILocation(line: 38, column: 30, scope: !7)
!31 = !DILocation(line: 38, column: 50, scope: !7)
!32 = !DILocation(line: 39, column: 31, scope: !7)
!33 = !DILocation(line: 39, column: 36, scope: !7)
!34 = !DILocation(line: 37, column: 18, scope: !7)
!35 = !DILocation(line: 41, column: 19, scope: !7)
!36 = !DILocation(line: 44, column: 25, scope: !7)
!37 = !DILocation(line: 44, column: 37, scope: !7)
!38 = !DILocation(line: 43, column: 34, scope: !7)
!39 = !DILocation(line: 44, column: 4, scope: !7)
