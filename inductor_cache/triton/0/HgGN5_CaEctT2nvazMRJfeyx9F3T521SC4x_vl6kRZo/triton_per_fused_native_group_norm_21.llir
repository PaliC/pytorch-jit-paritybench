; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused_native_group_norm_21(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !10
  %10 = shl i32 %9, 3, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = and i32 %11, 7, !dbg !12
  %13 = or disjoint i32 %10, %12, !dbg !13
  %14 = icmp slt i32 %13, 32, !dbg !14
  %15 = lshr i32 %11, 3, !dbg !15
  %.lobit = and i32 %15, 1, !dbg !15
  %16 = shl i32 %13, 1, !dbg !16
  %17 = or disjoint i32 %16, %.lobit, !dbg !17
  %18 = sext i32 %17 to i64, !dbg !18
  %19 = getelementptr float, ptr addrspace(1) %0, i64 %18, !dbg !18
  %20 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %19, i1 %14, i32 0, i1 %14) #4, !dbg !19
  %21 = bitcast i32 %20 to float, !dbg !19
  %22 = getelementptr float, ptr addrspace(1) %1, i64 %18, !dbg !20
  %23 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %22, i1 %14, i32 0, i1 %14) #4, !dbg !21
  %24 = bitcast i32 %23 to float, !dbg !21
  %25 = getelementptr float, ptr addrspace(1) %2, i64 %18, !dbg !22
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %25, i1 %14, i32 0, i1 %14) #4, !dbg !23
  %27 = bitcast i32 %26 to float, !dbg !23
  %28 = select i1 %14, float %21, float 0.000000e+00, !dbg !24
  %29 = select i1 %14, float %24, float 0.000000e+00, !dbg !25
  %30 = select i1 %14, float %27, float 0.000000e+00, !dbg !26
  %31 = bitcast float %28 to i32, !dbg !27
  %32 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %31, i32 8, i32 31), !dbg !27
  %33 = bitcast i32 %32 to float, !dbg !27
  %34 = bitcast float %29 to i32, !dbg !27
  %35 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %34, i32 8, i32 31), !dbg !27
  %36 = bitcast i32 %35 to float, !dbg !27
  %37 = bitcast float %30 to i32, !dbg !27
  %38 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %37, i32 8, i32 31), !dbg !27
  %39 = bitcast i32 %38 to float, !dbg !27
  %40 = fsub float %33, %28, !dbg !31
  %41 = fadd float %30, %39, !dbg !33
  %42 = fcmp oeq float %41, 0.000000e+00, !dbg !34
  %43 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %39, float %41) #4, !dbg !35
  %44 = select i1 %42, float 0.000000e+00, float %43, !dbg !36
  %45 = fadd float %29, %36, !dbg !37
  %46 = fmul float %40, %40, !dbg !38
  %47 = fmul float %30, %46, !dbg !39
  %48 = fmul float %47, %44, !dbg !40
  %49 = fadd float %45, %48, !dbg !41
  %50 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %49, float 1.638400e+04) #4, !dbg !42
  %51 = fadd float %50, 0x3EE4F8B580000000, !dbg !43
  %52 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !44
  %.not.i = icmp eq i32 %52, 0, !dbg !44
  br i1 %.not.i, label %55, label %53, !dbg !44

53:                                               ; preds = %8
  %54 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %51), !dbg !44
  br label %__nv_rsqrtf.exit, !dbg !44

55:                                               ; preds = %8
  %56 = tail call float @llvm.nvvm.rsqrt.approx.f(float %51), !dbg !44
  br label %__nv_rsqrtf.exit, !dbg !44

__nv_rsqrtf.exit:                                 ; preds = %53, %55
  %.0.i = phi float [ %54, %53 ], [ %56, %55 ], !dbg !44
  %57 = fmul float %40, %44, !dbg !45
  %58 = fadd float %28, %57, !dbg !46
  %59 = sext i32 %13 to i64, !dbg !47
  %60 = getelementptr float, ptr addrspace(1) %5, i64 %59, !dbg !47
  %61 = and i32 %11, 56, !dbg !48
  %62 = icmp eq i32 %61, 0, !dbg !48
  %63 = bitcast float %.0.i to i32, !dbg !48
  %64 = and i1 %62, %14, !dbg !48
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %63, ptr addrspace(1) %60, i1 %64) #4, !dbg !48
  %65 = getelementptr float, ptr addrspace(1) %3, i64 %59, !dbg !49
  %66 = bitcast float %58 to i32, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %66, ptr addrspace(1) %65, i1 %64) #4, !dbg !50
  %67 = getelementptr float, ptr addrspace(1) %4, i64 %59, !dbg !51
  %68 = bitcast float %49 to i32, !dbg !52
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %68, ptr addrspace(1) %67, i1 %64) #4, !dbg !52
  ret void, !dbg !53
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cvauy2s4armxrkpfi25fbgb6rzaaozj63ocni2doh3zsaljo7ow3.py", directory: "inductor_cache/va")
!4 = !{ptr @triton_per_fused_native_group_norm_21, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_native_group_norm_21, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_native_group_norm_21", linkageName: "triton_per_fused_native_group_norm_21", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 37, scope: !7)
!17 = !DILocation(line: 31, column: 35, scope: !7)
!18 = !DILocation(line: 31, column: 30, scope: !7)
!19 = !DILocation(line: 31, column: 42, scope: !7)
!20 = !DILocation(line: 32, column: 30, scope: !7)
!21 = !DILocation(line: 32, column: 42, scope: !7)
!22 = !DILocation(line: 33, column: 30, scope: !7)
!23 = !DILocation(line: 33, column: 42, scope: !7)
!24 = !DILocation(line: 37, column: 33, scope: !7)
!25 = !DILocation(line: 38, column: 33, scope: !7)
!26 = !DILocation(line: 39, column: 33, scope: !7)
!27 = !DILocation(line: 204, column: 46, scope: !28, inlinedAt: !30)
!28 = distinct !DILexicalBlockFile(scope: !7, file: !29, discriminator: 0)
!29 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!30 = !DILocation(line: 40, column: 67, scope: !7)
!31 = !DILocation(line: 192, column: 21, scope: !32, inlinedAt: !30)
!32 = distinct !DILexicalBlockFile(scope: !28, file: !29, discriminator: 0)
!33 = !DILocation(line: 193, column: 28, scope: !32, inlinedAt: !30)
!34 = !DILocation(line: 194, column: 39, scope: !32, inlinedAt: !30)
!35 = !DILocation(line: 194, column: 60, scope: !32, inlinedAt: !30)
!36 = !DILocation(line: 194, column: 49, scope: !32, inlinedAt: !30)
!37 = !DILocation(line: 197, column: 15, scope: !32, inlinedAt: !30)
!38 = !DILocation(line: 197, column: 30, scope: !32, inlinedAt: !30)
!39 = !DILocation(line: 197, column: 38, scope: !32, inlinedAt: !30)
!40 = !DILocation(line: 197, column: 49, scope: !32, inlinedAt: !30)
!41 = !DILocation(line: 197, column: 22, scope: !32, inlinedAt: !30)
!42 = !DILocation(line: 45, column: 20, scope: !7)
!43 = !DILocation(line: 47, column: 20, scope: !7)
!44 = !DILocation(line: 48, column: 28, scope: !7)
!45 = !DILocation(line: 196, column: 25, scope: !32, inlinedAt: !30)
!46 = !DILocation(line: 196, column: 17, scope: !32, inlinedAt: !30)
!47 = !DILocation(line: 49, column: 25, scope: !7)
!48 = !DILocation(line: 49, column: 37, scope: !7)
!49 = !DILocation(line: 50, column: 25, scope: !7)
!50 = !DILocation(line: 50, column: 37, scope: !7)
!51 = !DILocation(line: 51, column: 25, scope: !7)
!52 = !DILocation(line: 51, column: 37, scope: !7)
!53 = !DILocation(line: 51, column: 4, scope: !7)
