; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_leaky_relu_27(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %8 = shl i32 %7, 8, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = and i32 %9, 255, !dbg !12
  %11 = shl i32 %9, 2, !dbg !12
  %12 = and i32 %11, 252, !dbg !12
  %13 = or disjoint i32 %8, %10, !dbg !13
  %14 = or disjoint i32 %8, %12, !dbg !13
  %15 = icmp slt i32 %13, 256, !dbg !14
  %16 = icmp slt i32 %14, 256, !dbg !14
  %17 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %18 = shl i32 %17, 4, !dbg !16
  %.lobit1 = lshr i32 %9, 6, !dbg !17
  %19 = and i32 %.lobit1, 3, !dbg !17
  %20 = or disjoint i32 %18, 4, !dbg !18
  %21 = or disjoint i32 %18, 8, !dbg !18
  %22 = or disjoint i32 %18, 12, !dbg !18
  %23 = or disjoint i32 %18, %19, !dbg !18
  %24 = or disjoint i32 %23, 4, !dbg !18
  %25 = or disjoint i32 %23, 8, !dbg !18
  %26 = or disjoint i32 %23, 12, !dbg !18
  %27 = icmp slt i32 %18, 512, !dbg !19
  %28 = icmp slt i32 %23, 512, !dbg !19
  %29 = icmp slt i32 %24, 512, !dbg !19
  %30 = icmp slt i32 %25, 512, !dbg !19
  %31 = icmp slt i32 %26, 512, !dbg !19
  %.frozen = freeze i32 %14, !dbg !20
  %32 = sdiv i32 %.frozen, 64, !dbg !20
  %33 = mul i32 %32, 64, !dbg !21
  %.decomposed = sub i32 %.frozen, %33, !dbg !21
  %34 = shl i32 %13, 9, !dbg !22
  %35 = add i32 %34, %18, !dbg !23
  %36 = add i32 %20, %34, !dbg !23
  %37 = add i32 %21, %34, !dbg !23
  %38 = add i32 %22, %34, !dbg !23
  %39 = sext i32 %35 to i64, !dbg !24
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !24
  %41 = sext i32 %36 to i64, !dbg !24
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !24
  %43 = sext i32 %37 to i64, !dbg !24
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !24
  %45 = sext i32 %38 to i64, !dbg !24
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !24
  %47 = and i1 %27, %15, !dbg !25
  %48 = and i1 %16, %28, !dbg !25
  %49 = and i1 %29, %16, !dbg !25
  %50 = and i1 %30, %16, !dbg !25
  %51 = and i1 %31, %16, !dbg !25
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %40, i1 %47) #2, !dbg !26
  %53 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !26
  %54 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !26
  %55 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !26
  %56 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !26
  %57 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %42, i1 %47) #2, !dbg !26
  %58 = extractvalue { i32, i32, i32, i32 } %57, 0, !dbg !26
  %59 = extractvalue { i32, i32, i32, i32 } %57, 1, !dbg !26
  %60 = extractvalue { i32, i32, i32, i32 } %57, 2, !dbg !26
  %61 = extractvalue { i32, i32, i32, i32 } %57, 3, !dbg !26
  %62 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %44, i1 %47) #2, !dbg !26
  %63 = extractvalue { i32, i32, i32, i32 } %62, 0, !dbg !26
  %64 = extractvalue { i32, i32, i32, i32 } %62, 1, !dbg !26
  %65 = extractvalue { i32, i32, i32, i32 } %62, 2, !dbg !26
  %66 = extractvalue { i32, i32, i32, i32 } %62, 3, !dbg !26
  %67 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %46, i1 %47) #2, !dbg !26
  %68 = extractvalue { i32, i32, i32, i32 } %67, 0, !dbg !26
  %69 = extractvalue { i32, i32, i32, i32 } %67, 1, !dbg !26
  %70 = extractvalue { i32, i32, i32, i32 } %67, 2, !dbg !26
  %71 = extractvalue { i32, i32, i32, i32 } %67, 3, !dbg !26
  %72 = sext i32 %18 to i64, !dbg !27
  %73 = getelementptr float, ptr addrspace(1) %1, i64 %72, !dbg !27
  %74 = sext i32 %20 to i64, !dbg !27
  %75 = getelementptr float, ptr addrspace(1) %1, i64 %74, !dbg !27
  %76 = sext i32 %21 to i64, !dbg !27
  %77 = getelementptr float, ptr addrspace(1) %1, i64 %76, !dbg !27
  %78 = sext i32 %22 to i64, !dbg !27
  %79 = getelementptr float, ptr addrspace(1) %1, i64 %78, !dbg !27
  %80 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %73, i1 %27) #2, !dbg !28
  %81 = extractvalue { i32, i32, i32, i32 } %80, 0, !dbg !28
  %82 = extractvalue { i32, i32, i32, i32 } %80, 1, !dbg !28
  %83 = extractvalue { i32, i32, i32, i32 } %80, 2, !dbg !28
  %84 = extractvalue { i32, i32, i32, i32 } %80, 3, !dbg !28
  %85 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %75, i1 %27) #2, !dbg !28
  %86 = extractvalue { i32, i32, i32, i32 } %85, 0, !dbg !28
  %87 = extractvalue { i32, i32, i32, i32 } %85, 1, !dbg !28
  %88 = extractvalue { i32, i32, i32, i32 } %85, 2, !dbg !28
  %89 = extractvalue { i32, i32, i32, i32 } %85, 3, !dbg !28
  %90 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %77, i1 %27) #2, !dbg !28
  %91 = extractvalue { i32, i32, i32, i32 } %90, 0, !dbg !28
  %92 = extractvalue { i32, i32, i32, i32 } %90, 1, !dbg !28
  %93 = extractvalue { i32, i32, i32, i32 } %90, 2, !dbg !28
  %94 = extractvalue { i32, i32, i32, i32 } %90, 3, !dbg !28
  %95 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %79, i1 %27) #2, !dbg !28
  %96 = extractvalue { i32, i32, i32, i32 } %95, 0, !dbg !28
  %97 = extractvalue { i32, i32, i32, i32 } %95, 1, !dbg !28
  %98 = extractvalue { i32, i32, i32, i32 } %95, 2, !dbg !28
  %99 = extractvalue { i32, i32, i32, i32 } %95, 3, !dbg !28
  %100 = getelementptr i1, ptr addrspace(1) %2, i64 %39, !dbg !29
  %101 = insertelement <4 x i32> poison, i32 %53, i64 0, !dbg !26
  %102 = insertelement <4 x i32> %101, i32 %54, i64 1, !dbg !26
  %103 = insertelement <4 x i32> %102, i32 %55, i64 2, !dbg !26
  %104 = insertelement <4 x i32> %103, i32 %56, i64 3, !dbg !26
  %105 = bitcast <4 x i32> %104 to <4 x float>, !dbg !26
  %106 = insertelement <4 x i32> poison, i32 %81, i64 0, !dbg !28
  %107 = insertelement <4 x i32> %106, i32 %82, i64 1, !dbg !28
  %108 = insertelement <4 x i32> %107, i32 %83, i64 2, !dbg !28
  %109 = insertelement <4 x i32> %108, i32 %84, i64 3, !dbg !28
  %110 = bitcast <4 x i32> %109 to <4 x float>, !dbg !28
  %111 = fadd <4 x float> %105, %110, !dbg !30
  %112 = fcmp ogt <4 x float> %111, zeroinitializer, !dbg !31
  %113 = extractelement <4 x float> %111, i64 0, !dbg !32
  %114 = fmul float %113, 0x3FC99999A0000000, !dbg !33
  %115 = extractelement <4 x float> %111, i64 1, !dbg !32
  %116 = fmul float %115, 0x3FC99999A0000000, !dbg !33
  %117 = extractelement <4 x float> %111, i64 2, !dbg !32
  %118 = fmul float %117, 0x3FC99999A0000000, !dbg !33
  %119 = extractelement <4 x float> %111, i64 3, !dbg !32
  %120 = fmul float %119, 0x3FC99999A0000000, !dbg !33
  %121 = extractelement <4 x i1> %112, i64 0, !dbg !32
  %122 = select i1 %121, float %113, float %114, !dbg !32
  %123 = extractelement <4 x i1> %112, i64 1, !dbg !32
  %124 = select i1 %123, float %115, float %116, !dbg !32
  %125 = extractelement <4 x i1> %112, i64 2, !dbg !32
  %126 = select i1 %125, float %117, float %118, !dbg !32
  %127 = extractelement <4 x i1> %112, i64 3, !dbg !32
  %128 = select i1 %127, float %119, float %120, !dbg !32
  %129 = insertelement <4 x i32> poison, i32 %58, i64 0, !dbg !26
  %130 = insertelement <4 x i32> %129, i32 %59, i64 1, !dbg !26
  %131 = insertelement <4 x i32> %130, i32 %60, i64 2, !dbg !26
  %132 = insertelement <4 x i32> %131, i32 %61, i64 3, !dbg !26
  %133 = bitcast <4 x i32> %132 to <4 x float>, !dbg !26
  %134 = insertelement <4 x i32> poison, i32 %86, i64 0, !dbg !28
  %135 = insertelement <4 x i32> %134, i32 %87, i64 1, !dbg !28
  %136 = insertelement <4 x i32> %135, i32 %88, i64 2, !dbg !28
  %137 = insertelement <4 x i32> %136, i32 %89, i64 3, !dbg !28
  %138 = bitcast <4 x i32> %137 to <4 x float>, !dbg !28
  %139 = fadd <4 x float> %133, %138, !dbg !30
  %140 = fcmp ogt <4 x float> %139, zeroinitializer, !dbg !31
  %141 = extractelement <4 x float> %139, i64 0, !dbg !32
  %142 = fmul float %141, 0x3FC99999A0000000, !dbg !33
  %143 = extractelement <4 x float> %139, i64 1, !dbg !32
  %144 = fmul float %143, 0x3FC99999A0000000, !dbg !33
  %145 = extractelement <4 x float> %139, i64 2, !dbg !32
  %146 = fmul float %145, 0x3FC99999A0000000, !dbg !33
  %147 = extractelement <4 x float> %139, i64 3, !dbg !32
  %148 = fmul float %147, 0x3FC99999A0000000, !dbg !33
  %149 = extractelement <4 x i1> %140, i64 0, !dbg !32
  %150 = select i1 %149, float %141, float %142, !dbg !32
  %151 = extractelement <4 x i1> %140, i64 1, !dbg !32
  %152 = select i1 %151, float %143, float %144, !dbg !32
  %153 = extractelement <4 x i1> %140, i64 2, !dbg !32
  %154 = select i1 %153, float %145, float %146, !dbg !32
  %155 = extractelement <4 x i1> %140, i64 3, !dbg !32
  %156 = select i1 %155, float %147, float %148, !dbg !32
  %157 = insertelement <4 x i32> poison, i32 %63, i64 0, !dbg !26
  %158 = insertelement <4 x i32> %157, i32 %64, i64 1, !dbg !26
  %159 = insertelement <4 x i32> %158, i32 %65, i64 2, !dbg !26
  %160 = insertelement <4 x i32> %159, i32 %66, i64 3, !dbg !26
  %161 = bitcast <4 x i32> %160 to <4 x float>, !dbg !26
  %162 = insertelement <4 x i32> poison, i32 %91, i64 0, !dbg !28
  %163 = insertelement <4 x i32> %162, i32 %92, i64 1, !dbg !28
  %164 = insertelement <4 x i32> %163, i32 %93, i64 2, !dbg !28
  %165 = insertelement <4 x i32> %164, i32 %94, i64 3, !dbg !28
  %166 = bitcast <4 x i32> %165 to <4 x float>, !dbg !28
  %167 = fadd <4 x float> %161, %166, !dbg !30
  %168 = fcmp ogt <4 x float> %167, zeroinitializer, !dbg !31
  %169 = extractelement <4 x float> %167, i64 0, !dbg !32
  %170 = fmul float %169, 0x3FC99999A0000000, !dbg !33
  %171 = extractelement <4 x float> %167, i64 1, !dbg !32
  %172 = fmul float %171, 0x3FC99999A0000000, !dbg !33
  %173 = extractelement <4 x float> %167, i64 2, !dbg !32
  %174 = fmul float %173, 0x3FC99999A0000000, !dbg !33
  %175 = extractelement <4 x float> %167, i64 3, !dbg !32
  %176 = fmul float %175, 0x3FC99999A0000000, !dbg !33
  %177 = extractelement <4 x i1> %168, i64 0, !dbg !32
  %178 = select i1 %177, float %169, float %170, !dbg !32
  %179 = extractelement <4 x i1> %168, i64 1, !dbg !32
  %180 = select i1 %179, float %171, float %172, !dbg !32
  %181 = extractelement <4 x i1> %168, i64 2, !dbg !32
  %182 = select i1 %181, float %173, float %174, !dbg !32
  %183 = extractelement <4 x i1> %168, i64 3, !dbg !32
  %184 = select i1 %183, float %175, float %176, !dbg !32
  %185 = insertelement <4 x i32> poison, i32 %68, i64 0, !dbg !26
  %186 = insertelement <4 x i32> %185, i32 %69, i64 1, !dbg !26
  %187 = insertelement <4 x i32> %186, i32 %70, i64 2, !dbg !26
  %188 = insertelement <4 x i32> %187, i32 %71, i64 3, !dbg !26
  %189 = bitcast <4 x i32> %188 to <4 x float>, !dbg !26
  %190 = insertelement <4 x i32> poison, i32 %96, i64 0, !dbg !28
  %191 = insertelement <4 x i32> %190, i32 %97, i64 1, !dbg !28
  %192 = insertelement <4 x i32> %191, i32 %98, i64 2, !dbg !28
  %193 = insertelement <4 x i32> %192, i32 %99, i64 3, !dbg !28
  %194 = bitcast <4 x i32> %193 to <4 x float>, !dbg !28
  %195 = fadd <4 x float> %189, %194, !dbg !30
  %196 = fcmp ogt <4 x float> %195, zeroinitializer, !dbg !31
  %197 = extractelement <4 x float> %195, i64 0, !dbg !32
  %198 = fmul float %197, 0x3FC99999A0000000, !dbg !33
  %199 = extractelement <4 x float> %195, i64 1, !dbg !32
  %200 = fmul float %199, 0x3FC99999A0000000, !dbg !33
  %201 = extractelement <4 x float> %195, i64 2, !dbg !32
  %202 = fmul float %201, 0x3FC99999A0000000, !dbg !33
  %203 = extractelement <4 x float> %195, i64 3, !dbg !32
  %204 = fmul float %203, 0x3FC99999A0000000, !dbg !33
  %205 = extractelement <4 x i1> %196, i64 0, !dbg !32
  %206 = select i1 %205, float %197, float %198, !dbg !32
  %207 = extractelement <4 x i1> %196, i64 1, !dbg !32
  %208 = select i1 %207, float %199, float %200, !dbg !32
  %209 = extractelement <4 x i1> %196, i64 2, !dbg !32
  %210 = select i1 %209, float %201, float %202, !dbg !32
  %211 = extractelement <4 x i1> %196, i64 3, !dbg !32
  %212 = select i1 %211, float %203, float %204, !dbg !32
  %213 = zext <4 x i1> %112 to <4 x i8>, !dbg !34
  %214 = bitcast <4 x i8> %213 to i32, !dbg !34
  %215 = zext <4 x i1> %140 to <4 x i8>, !dbg !34
  %216 = bitcast <4 x i8> %215 to i32, !dbg !34
  %217 = zext <4 x i1> %168 to <4 x i8>, !dbg !34
  %218 = bitcast <4 x i8> %217 to i32, !dbg !34
  %219 = zext <4 x i1> %196 to <4 x i8>, !dbg !34
  %220 = bitcast <4 x i8> %219 to i32, !dbg !34
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %214, i32 %216, i32 %218, i32 %220, ptr addrspace(1) %100, i1 %47) #2, !dbg !34
  %221 = shl i32 %23, 6, !dbg !35
  %222 = shl i32 %24, 6, !dbg !35
  %223 = shl i32 %25, 6, !dbg !35
  %224 = shl i32 %26, 6, !dbg !35
  %225 = shl i32 %32, 15, !dbg !36
  %226 = add i32 %225, %.decomposed, !dbg !37
  %227 = add i32 %226, %221, !dbg !38
  %228 = add i32 %226, %222, !dbg !38
  %229 = add i32 %226, %223, !dbg !38
  %230 = add i32 %226, %224, !dbg !38
  %231 = sext i32 %227 to i64, !dbg !39
  %232 = getelementptr float, ptr addrspace(1) %3, i64 %231, !dbg !39
  %233 = sext i32 %228 to i64, !dbg !39
  %234 = getelementptr float, ptr addrspace(1) %3, i64 %233, !dbg !39
  %235 = sext i32 %229 to i64, !dbg !39
  %236 = getelementptr float, ptr addrspace(1) %3, i64 %235, !dbg !39
  %237 = sext i32 %230 to i64, !dbg !39
  %238 = getelementptr float, ptr addrspace(1) %3, i64 %237, !dbg !39
  %239 = and i32 %11, 1020, !dbg !40
  %240 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %10, !dbg !40
  %241 = bitcast float %122 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %240, <1 x i32> %241, i1 true) #2, !dbg !40
  %242 = getelementptr inbounds i8, ptr addrspace(3) %240, i32 1040, !dbg !40
  %243 = bitcast float %124 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %242, <1 x i32> %243, i1 true) #2, !dbg !40
  %244 = getelementptr inbounds i8, ptr addrspace(3) %240, i32 2080, !dbg !40
  %245 = bitcast float %126 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %244, <1 x i32> %245, i1 true) #2, !dbg !40
  %246 = getelementptr inbounds i8, ptr addrspace(3) %240, i32 3120, !dbg !40
  %247 = bitcast float %128 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %246, <1 x i32> %247, i1 true) #2, !dbg !40
  %248 = getelementptr inbounds i8, ptr addrspace(3) %240, i32 4160, !dbg !40
  %249 = bitcast float %150 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %248, <1 x i32> %249, i1 true) #2, !dbg !40
  %250 = getelementptr inbounds i8, ptr addrspace(3) %240, i32 5200, !dbg !40
  %251 = bitcast float %152 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %250, <1 x i32> %251, i1 true) #2, !dbg !40
  %252 = getelementptr inbounds i8, ptr addrspace(3) %240, i32 6240, !dbg !40
  %253 = bitcast float %154 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %252, <1 x i32> %253, i1 true) #2, !dbg !40
  %254 = getelementptr inbounds i8, ptr addrspace(3) %240, i32 7280, !dbg !40
  %255 = bitcast float %156 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %254, <1 x i32> %255, i1 true) #2, !dbg !40
  %256 = getelementptr inbounds i8, ptr addrspace(3) %240, i32 8320, !dbg !40
  %257 = bitcast float %178 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %256, <1 x i32> %257, i1 true) #2, !dbg !40
  %258 = getelementptr inbounds i8, ptr addrspace(3) %240, i32 9360, !dbg !40
  %259 = bitcast float %180 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %258, <1 x i32> %259, i1 true) #2, !dbg !40
  %260 = getelementptr inbounds i8, ptr addrspace(3) %240, i32 10400, !dbg !40
  %261 = bitcast float %182 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %260, <1 x i32> %261, i1 true) #2, !dbg !40
  %262 = getelementptr inbounds i8, ptr addrspace(3) %240, i32 11440, !dbg !40
  %263 = bitcast float %184 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %262, <1 x i32> %263, i1 true) #2, !dbg !40
  %264 = getelementptr inbounds i8, ptr addrspace(3) %240, i32 12480, !dbg !40
  %265 = bitcast float %206 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %264, <1 x i32> %265, i1 true) #2, !dbg !40
  %266 = getelementptr inbounds i8, ptr addrspace(3) %240, i32 13520, !dbg !40
  %267 = bitcast float %208 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %266, <1 x i32> %267, i1 true) #2, !dbg !40
  %268 = getelementptr inbounds i8, ptr addrspace(3) %240, i32 14560, !dbg !40
  %269 = bitcast float %210 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %268, <1 x i32> %269, i1 true) #2, !dbg !40
  %270 = getelementptr inbounds i8, ptr addrspace(3) %240, i32 15600, !dbg !40
  %271 = bitcast float %212 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %270, <1 x i32> %271, i1 true) #2, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %272 = lshr i32 %11, 6, !dbg !40
  %273 = and i32 %272, 12, !dbg !40
  %274 = getelementptr float, ptr addrspace(3) @global_smem, i32 %273, !dbg !40
  %275 = getelementptr float, ptr addrspace(3) %274, i32 %239, !dbg !40
  %276 = or disjoint i32 %239, 1024, !dbg !40
  %277 = lshr i32 %276, 6, !dbg !40
  %278 = and i32 %277, 28, !dbg !40
  %279 = getelementptr float, ptr addrspace(3) @global_smem, i32 %278, !dbg !40
  %280 = getelementptr float, ptr addrspace(3) %279, i32 %276, !dbg !40
  %281 = load <4 x i32>, ptr addrspace(3) %280, align 16, !dbg !40
  %282 = or disjoint i32 %239, 2048, !dbg !40
  %283 = lshr i32 %282, 6, !dbg !40
  %284 = and i32 %283, 44, !dbg !40
  %285 = getelementptr float, ptr addrspace(3) @global_smem, i32 %284, !dbg !40
  %286 = getelementptr float, ptr addrspace(3) %285, i32 %282, !dbg !40
  %287 = load <4 x i32>, ptr addrspace(3) %286, align 16, !dbg !40
  %288 = or disjoint i32 %239, 3072, !dbg !40
  %289 = lshr i32 %288, 6, !dbg !40
  %290 = and i32 %289, 60, !dbg !40
  %291 = getelementptr float, ptr addrspace(3) @global_smem, i32 %290, !dbg !40
  %292 = getelementptr float, ptr addrspace(3) %291, i32 %288, !dbg !40
  %293 = load <4 x i32>, ptr addrspace(3) %292, align 16, !dbg !40
  %.extract = load i32, ptr addrspace(3) %275, align 16, !dbg !40
  %294 = getelementptr inbounds i8, ptr addrspace(3) %275, i32 4, !dbg !40
  %.extract17 = load i32, ptr addrspace(3) %294, align 4, !dbg !40
  %295 = getelementptr inbounds i8, ptr addrspace(3) %275, i32 8, !dbg !40
  %.extract18 = load i32, ptr addrspace(3) %295, align 8, !dbg !40
  %296 = getelementptr inbounds i8, ptr addrspace(3) %275, i32 12, !dbg !40
  %.extract19 = load i32, ptr addrspace(3) %296, align 4, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract17, i32 %.extract18, i32 %.extract19, ptr addrspace(1) %232, i1 %48) #2, !dbg !40
  %.extract20 = extractelement <4 x i32> %281, i64 0, !dbg !40
  %.extract21 = extractelement <4 x i32> %281, i64 1, !dbg !40
  %.extract22 = extractelement <4 x i32> %281, i64 2, !dbg !40
  %.extract23 = extractelement <4 x i32> %281, i64 3, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract20, i32 %.extract21, i32 %.extract22, i32 %.extract23, ptr addrspace(1) %234, i1 %49) #2, !dbg !40
  %.extract24 = extractelement <4 x i32> %287, i64 0, !dbg !40
  %.extract25 = extractelement <4 x i32> %287, i64 1, !dbg !40
  %.extract26 = extractelement <4 x i32> %287, i64 2, !dbg !40
  %.extract27 = extractelement <4 x i32> %287, i64 3, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract24, i32 %.extract25, i32 %.extract26, i32 %.extract27, ptr addrspace(1) %236, i1 %50) #2, !dbg !40
  %.extract28 = extractelement <4 x i32> %293, i64 0, !dbg !40
  %.extract29 = extractelement <4 x i32> %293, i64 1, !dbg !40
  %.extract30 = extractelement <4 x i32> %293, i64 2, !dbg !40
  %.extract31 = extractelement <4 x i32> %293, i64 3, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract28, i32 %.extract29, i32 %.extract30, i32 %.extract31, ptr addrspace(1) %238, i1 %51) #2, !dbg !40
  ret void, !dbg !41
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "csnv7xak3ajfacpz54ybn5r32qvqs6r5t2oxgx6z5nmxl4luk2i7.py", directory: "inductor_cache/sn")
!4 = !{ptr @triton_poi_fused_convolution_leaky_relu_27, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_leaky_relu_27, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_leaky_relu_27", linkageName: "triton_poi_fused_convolution_leaky_relu_27", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 31, column: 19, scope: !7)
!21 = !DILocation(line: 30, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 39, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 30, scope: !7)
!25 = !DILocation(line: 32, column: 52, scope: !7)
!26 = !DILocation(line: 32, column: 44, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 33, column: 35, scope: !7)
!29 = !DILocation(line: 40, column: 25, scope: !7)
!30 = !DILocation(line: 34, column: 18, scope: !7)
!31 = !DILocation(line: 36, column: 18, scope: !7)
!32 = !DILocation(line: 39, column: 32, scope: !7)
!33 = !DILocation(line: 38, column: 18, scope: !7)
!34 = !DILocation(line: 40, column: 45, scope: !7)
!35 = !DILocation(line: 41, column: 33, scope: !7)
!36 = !DILocation(line: 41, column: 44, scope: !7)
!37 = !DILocation(line: 41, column: 30, scope: !7)
!38 = !DILocation(line: 41, column: 38, scope: !7)
!39 = !DILocation(line: 41, column: 25, scope: !7)
!40 = !DILocation(line: 41, column: 55, scope: !7)
!41 = !DILocation(line: 41, column: 4, scope: !7)
