; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_18(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) nocapture readnone %2, ptr addrspace(1) nocapture readnone %3, ptr addrspace(1) %4, ptr addrspace(1) nocapture readnone %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) nocapture readnone %9, ptr addrspace(1) nocapture readnone %10, ptr addrspace(1) %11, ptr addrspace(1) nocapture readnone %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, ptr addrspace(1) nocapture readnone %16, ptr addrspace(1) nocapture readnone %17, ptr addrspace(1) %18, ptr addrspace(1) nocapture readnone %19, ptr addrspace(1) %20, ptr addrspace(1) %21, ptr addrspace(1) %22, ptr addrspace(1) nocapture readnone %23, ptr addrspace(1) nocapture readnone %24, ptr addrspace(1) %25, ptr addrspace(1) nocapture readnone %26, ptr addrspace(1) %27, ptr addrspace(1) %28, ptr addrspace(1) %29, i32 %30) local_unnamed_addr !dbg !7 {
  %32 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %33 = shl i32 %32, 10, !dbg !11
  %34 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %35 = shl i32 %34, 2, !dbg !12
  %36 = and i32 %35, 508, !dbg !12
  %37 = or disjoint i32 %33, 1, !dbg !13
  %38 = or disjoint i32 %33, 2, !dbg !13
  %39 = or disjoint i32 %33, 3, !dbg !13
  %40 = srem i32 %37, 4, !dbg !14
  %41 = srem i32 %38, 4, !dbg !14
  %42 = srem i32 %39, 4, !dbg !14
  %43 = getelementptr i8, ptr addrspace(1) %6, i64 12, !dbg !15
  %44 = sext i32 %40 to i64, !dbg !15
  %45 = getelementptr float, ptr addrspace(1) %6, i64 %44, !dbg !15
  %46 = getelementptr i8, ptr addrspace(1) %45, i64 12, !dbg !15
  %47 = sext i32 %41 to i64, !dbg !15
  %48 = getelementptr float, ptr addrspace(1) %6, i64 %47, !dbg !15
  %49 = getelementptr i8, ptr addrspace(1) %48, i64 12, !dbg !15
  %50 = sext i32 %42 to i64, !dbg !15
  %51 = getelementptr float, ptr addrspace(1) %6, i64 %50, !dbg !15
  %52 = getelementptr i8, ptr addrspace(1) %51, i64 12, !dbg !15
  %53 = getelementptr i8, ptr addrspace(1) %13, i64 32, !dbg !16
  %54 = or disjoint i32 %33, %36, !dbg !13
  %55 = or disjoint i32 %54, 512, !dbg !13
  %56 = icmp slt i32 %54, 131328, !dbg !17
  %57 = icmp slt i32 %55, 131328, !dbg !17
  %58 = insertelement <2 x i32> poison, i32 %55, i64 0, !dbg !18
  %59 = insertelement <2 x i32> %58, i32 %54, i64 1, !dbg !18
  %60 = sdiv <2 x i32> %59, splat (i32 16), !dbg !18
  %61 = srem <2 x i32> %60, splat (i32 2052), !dbg !19
  %62 = shufflevector <2 x i32> %61, <2 x i32> poison, <4 x i32> <i32 0, i32 1, i32 0, i32 1>, !dbg !19
  %.frozen = freeze i32 %54, !dbg !20
  %63 = sdiv i32 %.frozen, 32832, !dbg !20
  %.frozen2 = freeze i32 %55, !dbg !20
  %64 = sdiv i32 %.frozen2, 32832, !dbg !20
  %65 = ashr exact i32 %54, 2, !dbg !21
  %66 = srem i32 %65, 4, !dbg !22
  %67 = extractelement <2 x i32> %61, i64 1, !dbg !23
  %68 = icmp slt i32 %67, 4, !dbg !24
  %69 = extractelement <2 x i32> %61, i64 0, !dbg !23
  %70 = icmp slt i32 %69, 4, !dbg !24
  %71 = mul i32 %63, 32832, !dbg !25
  %srem.decomposed = sub i32 %.frozen, %71, !dbg !25
  %72 = mul i32 %64, 32832, !dbg !25
  %srem1.decomposed = sub i32 %.frozen2, %72, !dbg !25
  %73 = shl nsw i32 %63, 6, !dbg !26
  %74 = shl nsw i32 %64, 6, !dbg !26
  %75 = add nsw i32 %73, %srem.decomposed, !dbg !27
  %76 = add nsw i32 %74, %srem1.decomposed, !dbg !27
  %77 = sext i32 %75 to i64, !dbg !28
  %78 = getelementptr float, ptr addrspace(1) %0, i64 %77, !dbg !28
  %79 = sext i32 %76 to i64, !dbg !28
  %80 = getelementptr float, ptr addrspace(1) %0, i64 %79, !dbg !28
  %81 = and i1 %56, %68, !dbg !29
  %82 = and i1 %57, %70, !dbg !29
  %83 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %78, i1 %81, i32 0, i1 %81, i32 0, i1 %81, i32 0, i1 %81, i32 0, i1 %81) #1, !dbg !30
  %84 = extractvalue { i32, i32, i32, i32 } %83, 0, !dbg !30
  %85 = extractvalue { i32, i32, i32, i32 } %83, 1, !dbg !30
  %86 = extractvalue { i32, i32, i32, i32 } %83, 2, !dbg !30
  %87 = extractvalue { i32, i32, i32, i32 } %83, 3, !dbg !30
  %88 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %80, i1 %82, i32 0, i1 %82, i32 0, i1 %82, i32 0, i1 %82, i32 0, i1 %82) #1, !dbg !30
  %89 = extractvalue { i32, i32, i32, i32 } %88, 0, !dbg !30
  %90 = extractvalue { i32, i32, i32, i32 } %88, 1, !dbg !30
  %91 = extractvalue { i32, i32, i32, i32 } %88, 2, !dbg !30
  %92 = extractvalue { i32, i32, i32, i32 } %88, 3, !dbg !30
  %93 = add nsw i32 %67, -4, !dbg !31
  %94 = icmp ult i32 %93, 512, !dbg !31
  %95 = add nsw i32 %69, -4, !dbg !31
  %96 = icmp ult i32 %95, 512, !dbg !31
  %97 = mul nsw i32 %66, 10, !dbg !32
  %98 = mul nsw i32 %93, 100, !dbg !33
  %99 = mul nsw i32 %95, 100, !dbg !33
  %100 = mul i32 %63, 51200, !dbg !34
  %101 = mul i32 %64, 51200, !dbg !34
  %102 = or disjoint i32 %100, 33, !dbg !35
  %103 = add i32 %102, %97, !dbg !36
  %104 = add i32 %103, %98, !dbg !37
  %105 = add nsw i32 %102, %40, !dbg !35
  %106 = add i32 %105, %97, !dbg !36
  %107 = add i32 %106, %98, !dbg !37
  %108 = add nsw i32 %102, %41, !dbg !35
  %109 = add i32 %108, %97, !dbg !36
  %110 = add i32 %109, %98, !dbg !37
  %111 = add nsw i32 %102, %42, !dbg !35
  %112 = add i32 %111, %97, !dbg !36
  %113 = add i32 %112, %98, !dbg !37
  %114 = or disjoint i32 %101, 33, !dbg !35
  %115 = add i32 %114, %97, !dbg !36
  %116 = add i32 %115, %99, !dbg !37
  %117 = add i32 %116, %40, !dbg !37
  %118 = add i32 %116, %41, !dbg !37
  %119 = add i32 %116, %42, !dbg !37
  %120 = sext i32 %104 to i64, !dbg !38
  %121 = getelementptr float, ptr addrspace(1) %1, i64 %120, !dbg !38
  %122 = sext i32 %107 to i64, !dbg !38
  %123 = getelementptr float, ptr addrspace(1) %1, i64 %122, !dbg !38
  %124 = sext i32 %110 to i64, !dbg !38
  %125 = getelementptr float, ptr addrspace(1) %1, i64 %124, !dbg !38
  %126 = sext i32 %113 to i64, !dbg !38
  %127 = getelementptr float, ptr addrspace(1) %1, i64 %126, !dbg !38
  %128 = sext i32 %116 to i64, !dbg !38
  %129 = getelementptr float, ptr addrspace(1) %1, i64 %128, !dbg !38
  %130 = sext i32 %117 to i64, !dbg !38
  %131 = getelementptr float, ptr addrspace(1) %1, i64 %130, !dbg !38
  %132 = sext i32 %118 to i64, !dbg !38
  %133 = getelementptr float, ptr addrspace(1) %1, i64 %132, !dbg !38
  %134 = sext i32 %119 to i64, !dbg !38
  %135 = getelementptr float, ptr addrspace(1) %1, i64 %134, !dbg !38
  %136 = and i1 %56, %94, !dbg !39
  %137 = and i1 %57, %96, !dbg !39
  %138 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %121, i1 %136, i32 0, i1 %136) #1, !dbg !40
  %139 = bitcast i32 %138 to float, !dbg !40
  %140 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %123, i1 %136, i32 0, i1 %136) #1, !dbg !40
  %141 = bitcast i32 %140 to float, !dbg !40
  %142 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %125, i1 %136, i32 0, i1 %136) #1, !dbg !40
  %143 = bitcast i32 %142 to float, !dbg !40
  %144 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %127, i1 %136, i32 0, i1 %136) #1, !dbg !40
  %145 = bitcast i32 %144 to float, !dbg !40
  %146 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %129, i1 %137, i32 0, i1 %137) #1, !dbg !40
  %147 = bitcast i32 %146 to float, !dbg !40
  %148 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %131, i1 %137, i32 0, i1 %137) #1, !dbg !40
  %149 = bitcast i32 %148 to float, !dbg !40
  %150 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %133, i1 %137, i32 0, i1 %137) #1, !dbg !40
  %151 = bitcast i32 %150 to float, !dbg !40
  %152 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %135, i1 %137, i32 0, i1 %137) #1, !dbg !40
  %153 = bitcast i32 %152 to float, !dbg !40
  %154 = shl nsw i32 %63, 9, !dbg !41
  %155 = shl nsw i32 %64, 9, !dbg !41
  %156 = add nsw i32 %93, %154, !dbg !42
  %157 = add nsw i32 %95, %155, !dbg !42
  %158 = sext i32 %156 to i64, !dbg !43
  %159 = getelementptr float, ptr addrspace(1) %4, i64 %158, !dbg !43
  %160 = sext i32 %157 to i64, !dbg !43
  %161 = getelementptr float, ptr addrspace(1) %4, i64 %160, !dbg !43
  %162 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %159, i1 %136, i32 0, i1 %136) #1, !dbg !44
  %163 = bitcast i32 %162 to float, !dbg !44
  %164 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %159, i1 %136, i32 0, i1 %136) #1, !dbg !44
  %165 = bitcast i32 %164 to float, !dbg !44
  %166 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %159, i1 %136, i32 0, i1 %136) #1, !dbg !44
  %167 = bitcast i32 %166 to float, !dbg !44
  %168 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %159, i1 %136, i32 0, i1 %136) #1, !dbg !44
  %169 = bitcast i32 %168 to float, !dbg !44
  %170 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %161, i1 %137, i32 0, i1 %137) #1, !dbg !44
  %171 = bitcast i32 %170 to float, !dbg !44
  %172 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %161, i1 %137, i32 0, i1 %137) #1, !dbg !44
  %173 = bitcast i32 %172 to float, !dbg !44
  %174 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %161, i1 %137, i32 0, i1 %137) #1, !dbg !44
  %175 = bitcast i32 %174 to float, !dbg !44
  %176 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %161, i1 %137, i32 0, i1 %137) #1, !dbg !44
  %177 = bitcast i32 %176 to float, !dbg !44
  %178 = fsub float %163, %163, !dbg !45
  %179 = fsub float %165, %165, !dbg !45
  %180 = fsub float %167, %167, !dbg !45
  %181 = fsub float %169, %169, !dbg !45
  %182 = fsub float %171, %171, !dbg !45
  %183 = fsub float %173, %173, !dbg !45
  %184 = fsub float %175, %175, !dbg !45
  %185 = fsub float %177, %177, !dbg !45
  %186 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %43, i1 %136, i32 0, i1 %136) #1, !dbg !46
  %187 = bitcast i32 %186 to float, !dbg !46
  %188 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %46, i1 %136, i32 0, i1 %136) #1, !dbg !46
  %189 = bitcast i32 %188 to float, !dbg !46
  %190 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %49, i1 %136, i32 0, i1 %136) #1, !dbg !46
  %191 = bitcast i32 %190 to float, !dbg !46
  %192 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %52, i1 %136, i32 0, i1 %136) #1, !dbg !46
  %193 = bitcast i32 %192 to float, !dbg !46
  %194 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %43, i1 %137, i32 0, i1 %137) #1, !dbg !46
  %195 = bitcast i32 %194 to float, !dbg !46
  %196 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %46, i1 %137, i32 0, i1 %137) #1, !dbg !46
  %197 = bitcast i32 %196 to float, !dbg !46
  %198 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %49, i1 %137, i32 0, i1 %137) #1, !dbg !46
  %199 = bitcast i32 %198 to float, !dbg !46
  %200 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %52, i1 %137, i32 0, i1 %137) #1, !dbg !46
  %201 = bitcast i32 %200 to float, !dbg !46
  %202 = fmul float %178, %187, !dbg !47
  %203 = fmul float %179, %189, !dbg !47
  %204 = fmul float %180, %191, !dbg !47
  %205 = fmul float %181, %193, !dbg !47
  %206 = fmul float %182, %195, !dbg !47
  %207 = fmul float %183, %197, !dbg !47
  %208 = fmul float %184, %199, !dbg !47
  %209 = fmul float %185, %201, !dbg !47
  %210 = fadd float %202, %163, !dbg !48
  %211 = fadd float %203, %165, !dbg !48
  %212 = fadd float %204, %167, !dbg !48
  %213 = fadd float %205, %169, !dbg !48
  %214 = fadd float %206, %171, !dbg !48
  %215 = fadd float %207, %173, !dbg !48
  %216 = fadd float %208, %175, !dbg !48
  %217 = fadd float %209, %177, !dbg !48
  %218 = fsub float %210, %139, !dbg !49
  %219 = fsub float %211, %141, !dbg !49
  %220 = fsub float %212, %143, !dbg !49
  %221 = fsub float %213, %145, !dbg !49
  %222 = fsub float %214, %147, !dbg !49
  %223 = fsub float %215, %149, !dbg !49
  %224 = fsub float %216, %151, !dbg !49
  %225 = fsub float %217, %153, !dbg !49
  %226 = sext i32 %66 to i64, !dbg !50
  %227 = getelementptr float, ptr addrspace(1) %7, i64 %226, !dbg !50
  %228 = getelementptr i8, ptr addrspace(1) %227, i64 12, !dbg !50
  %229 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %228, i1 %136, i32 0, i1 %136) #1, !dbg !51
  %230 = bitcast i32 %229 to float, !dbg !51
  %231 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %228, i1 %136, i32 0, i1 %136) #1, !dbg !51
  %232 = bitcast i32 %231 to float, !dbg !51
  %233 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %228, i1 %136, i32 0, i1 %136) #1, !dbg !51
  %234 = bitcast i32 %233 to float, !dbg !51
  %235 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %228, i1 %136, i32 0, i1 %136) #1, !dbg !51
  %236 = bitcast i32 %235 to float, !dbg !51
  %237 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %228, i1 %137, i32 0, i1 %137) #1, !dbg !51
  %238 = bitcast i32 %237 to float, !dbg !51
  %239 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %228, i1 %137, i32 0, i1 %137) #1, !dbg !51
  %240 = bitcast i32 %239 to float, !dbg !51
  %241 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %228, i1 %137, i32 0, i1 %137) #1, !dbg !51
  %242 = bitcast i32 %241 to float, !dbg !51
  %243 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %228, i1 %137, i32 0, i1 %137) #1, !dbg !51
  %244 = bitcast i32 %243 to float, !dbg !51
  %245 = fmul float %218, %230, !dbg !52
  %246 = fmul float %219, %232, !dbg !52
  %247 = fmul float %220, %234, !dbg !52
  %248 = fmul float %221, %236, !dbg !52
  %249 = fmul float %222, %238, !dbg !52
  %250 = fmul float %223, %240, !dbg !52
  %251 = fmul float %224, %242, !dbg !52
  %252 = fmul float %225, %244, !dbg !52
  %253 = fadd float %245, %139, !dbg !53
  %254 = fadd float %246, %141, !dbg !53
  %255 = fadd float %247, %143, !dbg !53
  %256 = fadd float %248, %145, !dbg !53
  %257 = fadd float %249, %147, !dbg !53
  %258 = fadd float %250, %149, !dbg !53
  %259 = fadd float %251, %151, !dbg !53
  %260 = fadd float %252, %153, !dbg !53
  %261 = mul nsw i32 %66, 20, !dbg !54
  %262 = add nsw <4 x i32> %62, <i32 -1028, i32 -1028, i32 -516, i32 -516>, !dbg !55
  %263 = extractelement <4 x i32> %262, i64 3, !dbg !56
  %264 = mul nsw i32 %263, 400, !dbg !56
  %265 = extractelement <4 x i32> %262, i64 2, !dbg !56
  %266 = mul nsw i32 %265, 400, !dbg !56
  %267 = mul i32 %63, 204800, !dbg !57
  %268 = mul i32 %64, 204800, !dbg !57
  %269 = or disjoint i32 %267, 168, !dbg !58
  %270 = add i32 %269, %261, !dbg !59
  %271 = add i32 %270, %264, !dbg !60
  %272 = or disjoint i32 %268, 168, !dbg !58
  %273 = add i32 %272, %261, !dbg !59
  %274 = add i32 %273, %266, !dbg !60
  %275 = sext i32 %271 to i64, !dbg !61
  %276 = getelementptr float, ptr addrspace(1) %8, i64 %275, !dbg !61
  %277 = sext i32 %274 to i64, !dbg !61
  %278 = getelementptr float, ptr addrspace(1) %8, i64 %277, !dbg !61
  %279 = icmp ult <4 x i32> %262, splat (i32 512), !dbg !55
  %280 = extractelement <4 x i1> %279, i64 3, !dbg !62
  %281 = and i1 %56, %280, !dbg !62
  %282 = extractelement <4 x i1> %279, i64 2, !dbg !62
  %283 = and i1 %57, %282, !dbg !62
  %284 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %276, i1 %281, i32 0, i1 %281, i32 0, i1 %281, i32 0, i1 %281, i32 0, i1 %281) #1, !dbg !63
  %285 = extractvalue { i32, i32, i32, i32 } %284, 0, !dbg !63
  %286 = extractvalue { i32, i32, i32, i32 } %284, 1, !dbg !63
  %287 = extractvalue { i32, i32, i32, i32 } %284, 2, !dbg !63
  %288 = extractvalue { i32, i32, i32, i32 } %284, 3, !dbg !63
  %289 = bitcast i32 %285 to float, !dbg !63
  %290 = bitcast i32 %286 to float, !dbg !63
  %291 = bitcast i32 %287 to float, !dbg !63
  %292 = bitcast i32 %288 to float, !dbg !63
  %293 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %278, i1 %283, i32 0, i1 %283, i32 0, i1 %283, i32 0, i1 %283, i32 0, i1 %283) #1, !dbg !63
  %294 = extractvalue { i32, i32, i32, i32 } %293, 0, !dbg !63
  %295 = extractvalue { i32, i32, i32, i32 } %293, 1, !dbg !63
  %296 = extractvalue { i32, i32, i32, i32 } %293, 2, !dbg !63
  %297 = extractvalue { i32, i32, i32, i32 } %293, 3, !dbg !63
  %298 = bitcast i32 %294 to float, !dbg !63
  %299 = bitcast i32 %295 to float, !dbg !63
  %300 = bitcast i32 %296 to float, !dbg !63
  %301 = bitcast i32 %297 to float, !dbg !63
  %302 = add nsw i32 %263, %154, !dbg !64
  %303 = add nsw i32 %265, %155, !dbg !64
  %304 = sext i32 %302 to i64, !dbg !65
  %305 = getelementptr float, ptr addrspace(1) %11, i64 %304, !dbg !65
  %306 = sext i32 %303 to i64, !dbg !65
  %307 = getelementptr float, ptr addrspace(1) %11, i64 %306, !dbg !65
  %308 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %305, i1 %281, i32 0, i1 %281) #1, !dbg !66
  %309 = bitcast i32 %308 to float, !dbg !66
  %310 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %305, i1 %281, i32 0, i1 %281) #1, !dbg !66
  %311 = bitcast i32 %310 to float, !dbg !66
  %312 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %305, i1 %281, i32 0, i1 %281) #1, !dbg !66
  %313 = bitcast i32 %312 to float, !dbg !66
  %314 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %305, i1 %281, i32 0, i1 %281) #1, !dbg !66
  %315 = bitcast i32 %314 to float, !dbg !66
  %316 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %307, i1 %283, i32 0, i1 %283) #1, !dbg !66
  %317 = bitcast i32 %316 to float, !dbg !66
  %318 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %307, i1 %283, i32 0, i1 %283) #1, !dbg !66
  %319 = bitcast i32 %318 to float, !dbg !66
  %320 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %307, i1 %283, i32 0, i1 %283) #1, !dbg !66
  %321 = bitcast i32 %320 to float, !dbg !66
  %322 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %307, i1 %283, i32 0, i1 %283) #1, !dbg !66
  %323 = bitcast i32 %322 to float, !dbg !66
  %324 = fsub float %309, %309, !dbg !67
  %325 = fsub float %311, %311, !dbg !67
  %326 = fsub float %313, %313, !dbg !67
  %327 = fsub float %315, %315, !dbg !67
  %328 = fsub float %317, %317, !dbg !67
  %329 = fsub float %319, %319, !dbg !67
  %330 = fsub float %321, %321, !dbg !67
  %331 = fsub float %323, %323, !dbg !67
  %332 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %53, i1 %281, i32 0, i1 %281, i32 0, i1 %281, i32 0, i1 %281, i32 0, i1 %281) #1, !dbg !68
  %333 = extractvalue { i32, i32, i32, i32 } %332, 0, !dbg !68
  %334 = extractvalue { i32, i32, i32, i32 } %332, 1, !dbg !68
  %335 = extractvalue { i32, i32, i32, i32 } %332, 2, !dbg !68
  %336 = extractvalue { i32, i32, i32, i32 } %332, 3, !dbg !68
  %337 = bitcast i32 %333 to float, !dbg !68
  %338 = bitcast i32 %334 to float, !dbg !68
  %339 = bitcast i32 %335 to float, !dbg !68
  %340 = bitcast i32 %336 to float, !dbg !68
  %341 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %53, i1 %283, i32 0, i1 %283, i32 0, i1 %283, i32 0, i1 %283, i32 0, i1 %283) #1, !dbg !68
  %342 = extractvalue { i32, i32, i32, i32 } %341, 0, !dbg !68
  %343 = extractvalue { i32, i32, i32, i32 } %341, 1, !dbg !68
  %344 = extractvalue { i32, i32, i32, i32 } %341, 2, !dbg !68
  %345 = extractvalue { i32, i32, i32, i32 } %341, 3, !dbg !68
  %346 = bitcast i32 %342 to float, !dbg !68
  %347 = bitcast i32 %343 to float, !dbg !68
  %348 = bitcast i32 %344 to float, !dbg !68
  %349 = bitcast i32 %345 to float, !dbg !68
  %350 = fmul float %324, %337, !dbg !69
  %351 = fmul float %325, %338, !dbg !69
  %352 = fmul float %326, %339, !dbg !69
  %353 = fmul float %327, %340, !dbg !69
  %354 = fmul float %328, %346, !dbg !69
  %355 = fmul float %329, %347, !dbg !69
  %356 = fmul float %330, %348, !dbg !69
  %357 = fmul float %331, %349, !dbg !69
  %358 = fadd float %350, %309, !dbg !70
  %359 = fadd float %351, %311, !dbg !70
  %360 = fadd float %352, %313, !dbg !70
  %361 = fadd float %353, %315, !dbg !70
  %362 = fadd float %354, %317, !dbg !70
  %363 = fadd float %355, %319, !dbg !70
  %364 = fadd float %356, %321, !dbg !70
  %365 = fadd float %357, %323, !dbg !70
  %366 = fsub float %358, %289, !dbg !71
  %367 = fsub float %359, %290, !dbg !71
  %368 = fsub float %360, %291, !dbg !71
  %369 = fsub float %361, %292, !dbg !71
  %370 = fsub float %362, %298, !dbg !71
  %371 = fsub float %363, %299, !dbg !71
  %372 = fsub float %364, %300, !dbg !71
  %373 = fsub float %365, %301, !dbg !71
  %374 = getelementptr float, ptr addrspace(1) %14, i64 %226, !dbg !72
  %375 = getelementptr i8, ptr addrspace(1) %374, i64 32, !dbg !72
  %376 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %375, i1 %281, i32 0, i1 %281) #1, !dbg !73
  %377 = bitcast i32 %376 to float, !dbg !73
  %378 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %375, i1 %281, i32 0, i1 %281) #1, !dbg !73
  %379 = bitcast i32 %378 to float, !dbg !73
  %380 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %375, i1 %281, i32 0, i1 %281) #1, !dbg !73
  %381 = bitcast i32 %380 to float, !dbg !73
  %382 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %375, i1 %281, i32 0, i1 %281) #1, !dbg !73
  %383 = bitcast i32 %382 to float, !dbg !73
  %384 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %375, i1 %283, i32 0, i1 %283) #1, !dbg !73
  %385 = bitcast i32 %384 to float, !dbg !73
  %386 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %375, i1 %283, i32 0, i1 %283) #1, !dbg !73
  %387 = bitcast i32 %386 to float, !dbg !73
  %388 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %375, i1 %283, i32 0, i1 %283) #1, !dbg !73
  %389 = bitcast i32 %388 to float, !dbg !73
  %390 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %375, i1 %283, i32 0, i1 %283) #1, !dbg !73
  %391 = bitcast i32 %390 to float, !dbg !73
  %392 = fmul float %366, %377, !dbg !74
  %393 = fmul float %367, %379, !dbg !74
  %394 = fmul float %368, %381, !dbg !74
  %395 = fmul float %369, %383, !dbg !74
  %396 = fmul float %370, %385, !dbg !74
  %397 = fmul float %371, %387, !dbg !74
  %398 = fmul float %372, %389, !dbg !74
  %399 = fmul float %373, %391, !dbg !74
  %400 = fadd float %392, %289, !dbg !75
  %401 = fadd float %393, %290, !dbg !75
  %402 = fadd float %394, %291, !dbg !75
  %403 = fadd float %395, %292, !dbg !75
  %404 = fadd float %396, %298, !dbg !75
  %405 = fadd float %397, %299, !dbg !75
  %406 = fadd float %398, %300, !dbg !75
  %407 = fadd float %399, %301, !dbg !75
  %408 = mul nsw i32 %66, 30, !dbg !76
  %409 = extractelement <4 x i32> %262, i64 1, !dbg !77
  %410 = mul nsw i32 %409, 900, !dbg !77
  %411 = extractelement <4 x i32> %262, i64 0, !dbg !77
  %412 = mul nsw i32 %411, 900, !dbg !77
  %413 = mul i32 %63, 460800, !dbg !78
  %414 = mul i32 %64, 460800, !dbg !78
  %415 = or disjoint i32 %413, 403, !dbg !79
  %416 = add i32 %415, %408, !dbg !80
  %417 = add i32 %416, %410, !dbg !81
  %418 = add nsw i32 %415, %40, !dbg !79
  %419 = add i32 %418, %408, !dbg !80
  %420 = add i32 %419, %410, !dbg !81
  %421 = add nsw i32 %415, %41, !dbg !79
  %422 = add i32 %421, %408, !dbg !80
  %423 = add i32 %422, %410, !dbg !81
  %424 = add nsw i32 %415, %42, !dbg !79
  %425 = add i32 %424, %408, !dbg !80
  %426 = add i32 %425, %410, !dbg !81
  %427 = or disjoint i32 %414, 403, !dbg !79
  %428 = add i32 %427, %408, !dbg !80
  %429 = add i32 %428, %412, !dbg !81
  %430 = add i32 %429, %40, !dbg !81
  %431 = add i32 %429, %41, !dbg !81
  %432 = add i32 %429, %42, !dbg !81
  %433 = sext i32 %417 to i64, !dbg !82
  %434 = getelementptr float, ptr addrspace(1) %15, i64 %433, !dbg !82
  %435 = sext i32 %420 to i64, !dbg !82
  %436 = getelementptr float, ptr addrspace(1) %15, i64 %435, !dbg !82
  %437 = sext i32 %423 to i64, !dbg !82
  %438 = getelementptr float, ptr addrspace(1) %15, i64 %437, !dbg !82
  %439 = sext i32 %426 to i64, !dbg !82
  %440 = getelementptr float, ptr addrspace(1) %15, i64 %439, !dbg !82
  %441 = sext i32 %429 to i64, !dbg !82
  %442 = getelementptr float, ptr addrspace(1) %15, i64 %441, !dbg !82
  %443 = sext i32 %430 to i64, !dbg !82
  %444 = getelementptr float, ptr addrspace(1) %15, i64 %443, !dbg !82
  %445 = sext i32 %431 to i64, !dbg !82
  %446 = getelementptr float, ptr addrspace(1) %15, i64 %445, !dbg !82
  %447 = sext i32 %432 to i64, !dbg !82
  %448 = getelementptr float, ptr addrspace(1) %15, i64 %447, !dbg !82
  %449 = extractelement <4 x i1> %279, i64 1, !dbg !83
  %450 = and i1 %56, %449, !dbg !83
  %451 = extractelement <4 x i1> %279, i64 0, !dbg !83
  %452 = and i1 %57, %451, !dbg !83
  %453 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %434, i1 %450, i32 0, i1 %450) #1, !dbg !84
  %454 = bitcast i32 %453 to float, !dbg !84
  %455 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %436, i1 %450, i32 0, i1 %450) #1, !dbg !84
  %456 = bitcast i32 %455 to float, !dbg !84
  %457 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %438, i1 %450, i32 0, i1 %450) #1, !dbg !84
  %458 = bitcast i32 %457 to float, !dbg !84
  %459 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %440, i1 %450, i32 0, i1 %450) #1, !dbg !84
  %460 = bitcast i32 %459 to float, !dbg !84
  %461 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %442, i1 %452, i32 0, i1 %452) #1, !dbg !84
  %462 = bitcast i32 %461 to float, !dbg !84
  %463 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %444, i1 %452, i32 0, i1 %452) #1, !dbg !84
  %464 = bitcast i32 %463 to float, !dbg !84
  %465 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %446, i1 %452, i32 0, i1 %452) #1, !dbg !84
  %466 = bitcast i32 %465 to float, !dbg !84
  %467 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %448, i1 %452, i32 0, i1 %452) #1, !dbg !84
  %468 = bitcast i32 %467 to float, !dbg !84
  %469 = add nsw i32 %409, %154, !dbg !85
  %470 = add nsw i32 %411, %155, !dbg !85
  %471 = sext i32 %469 to i64, !dbg !86
  %472 = getelementptr float, ptr addrspace(1) %18, i64 %471, !dbg !86
  %473 = sext i32 %470 to i64, !dbg !86
  %474 = getelementptr float, ptr addrspace(1) %18, i64 %473, !dbg !86
  %475 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %472, i1 %450, i32 0, i1 %450) #1, !dbg !87
  %476 = bitcast i32 %475 to float, !dbg !87
  %477 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %472, i1 %450, i32 0, i1 %450) #1, !dbg !87
  %478 = bitcast i32 %477 to float, !dbg !87
  %479 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %472, i1 %450, i32 0, i1 %450) #1, !dbg !87
  %480 = bitcast i32 %479 to float, !dbg !87
  %481 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %472, i1 %450, i32 0, i1 %450) #1, !dbg !87
  %482 = bitcast i32 %481 to float, !dbg !87
  %483 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %474, i1 %452, i32 0, i1 %452) #1, !dbg !87
  %484 = bitcast i32 %483 to float, !dbg !87
  %485 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %474, i1 %452, i32 0, i1 %452) #1, !dbg !87
  %486 = bitcast i32 %485 to float, !dbg !87
  %487 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %474, i1 %452, i32 0, i1 %452) #1, !dbg !87
  %488 = bitcast i32 %487 to float, !dbg !87
  %489 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %474, i1 %452, i32 0, i1 %452) #1, !dbg !87
  %490 = bitcast i32 %489 to float, !dbg !87
  %491 = fsub float %476, %476, !dbg !88
  %492 = fsub float %478, %478, !dbg !88
  %493 = fsub float %480, %480, !dbg !88
  %494 = fsub float %482, %482, !dbg !88
  %495 = fsub float %484, %484, !dbg !88
  %496 = fsub float %486, %486, !dbg !88
  %497 = fsub float %488, %488, !dbg !88
  %498 = fsub float %490, %490, !dbg !88
  %499 = getelementptr i8, ptr addrspace(1) %20, i64 52, !dbg !89
  %500 = getelementptr float, ptr addrspace(1) %20, i64 %44, !dbg !89
  %501 = getelementptr i8, ptr addrspace(1) %500, i64 52, !dbg !89
  %502 = getelementptr float, ptr addrspace(1) %20, i64 %47, !dbg !89
  %503 = getelementptr i8, ptr addrspace(1) %502, i64 52, !dbg !89
  %504 = getelementptr float, ptr addrspace(1) %20, i64 %50, !dbg !89
  %505 = getelementptr i8, ptr addrspace(1) %504, i64 52, !dbg !89
  %506 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %499, i1 %450, i32 0, i1 %450) #1, !dbg !90
  %507 = bitcast i32 %506 to float, !dbg !90
  %508 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %501, i1 %450, i32 0, i1 %450) #1, !dbg !90
  %509 = bitcast i32 %508 to float, !dbg !90
  %510 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %503, i1 %450, i32 0, i1 %450) #1, !dbg !90
  %511 = bitcast i32 %510 to float, !dbg !90
  %512 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %505, i1 %450, i32 0, i1 %450) #1, !dbg !90
  %513 = bitcast i32 %512 to float, !dbg !90
  %514 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %499, i1 %452, i32 0, i1 %452) #1, !dbg !90
  %515 = bitcast i32 %514 to float, !dbg !90
  %516 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %501, i1 %452, i32 0, i1 %452) #1, !dbg !90
  %517 = bitcast i32 %516 to float, !dbg !90
  %518 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %503, i1 %452, i32 0, i1 %452) #1, !dbg !90
  %519 = bitcast i32 %518 to float, !dbg !90
  %520 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %505, i1 %452, i32 0, i1 %452) #1, !dbg !90
  %521 = bitcast i32 %520 to float, !dbg !90
  %522 = fmul float %491, %507, !dbg !91
  %523 = fmul float %492, %509, !dbg !91
  %524 = fmul float %493, %511, !dbg !91
  %525 = fmul float %494, %513, !dbg !91
  %526 = fmul float %495, %515, !dbg !91
  %527 = fmul float %496, %517, !dbg !91
  %528 = fmul float %497, %519, !dbg !91
  %529 = fmul float %498, %521, !dbg !91
  %530 = fadd float %522, %476, !dbg !92
  %531 = fadd float %523, %478, !dbg !92
  %532 = fadd float %524, %480, !dbg !92
  %533 = fadd float %525, %482, !dbg !92
  %534 = fadd float %526, %484, !dbg !92
  %535 = fadd float %527, %486, !dbg !92
  %536 = fadd float %528, %488, !dbg !92
  %537 = fadd float %529, %490, !dbg !92
  %538 = fsub float %530, %454, !dbg !93
  %539 = fsub float %531, %456, !dbg !93
  %540 = fsub float %532, %458, !dbg !93
  %541 = fsub float %533, %460, !dbg !93
  %542 = fsub float %534, %462, !dbg !93
  %543 = fsub float %535, %464, !dbg !93
  %544 = fsub float %536, %466, !dbg !93
  %545 = fsub float %537, %468, !dbg !93
  %546 = getelementptr float, ptr addrspace(1) %21, i64 %226, !dbg !94
  %547 = getelementptr i8, ptr addrspace(1) %546, i64 52, !dbg !94
  %548 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %547, i1 %450, i32 0, i1 %450) #1, !dbg !95
  %549 = bitcast i32 %548 to float, !dbg !95
  %550 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %547, i1 %450, i32 0, i1 %450) #1, !dbg !95
  %551 = bitcast i32 %550 to float, !dbg !95
  %552 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %547, i1 %450, i32 0, i1 %450) #1, !dbg !95
  %553 = bitcast i32 %552 to float, !dbg !95
  %554 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %547, i1 %450, i32 0, i1 %450) #1, !dbg !95
  %555 = bitcast i32 %554 to float, !dbg !95
  %556 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %547, i1 %452, i32 0, i1 %452) #1, !dbg !95
  %557 = bitcast i32 %556 to float, !dbg !95
  %558 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %547, i1 %452, i32 0, i1 %452) #1, !dbg !95
  %559 = bitcast i32 %558 to float, !dbg !95
  %560 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %547, i1 %452, i32 0, i1 %452) #1, !dbg !95
  %561 = bitcast i32 %560 to float, !dbg !95
  %562 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %547, i1 %452, i32 0, i1 %452) #1, !dbg !95
  %563 = bitcast i32 %562 to float, !dbg !95
  %564 = fmul float %538, %549, !dbg !96
  %565 = fmul float %539, %551, !dbg !96
  %566 = fmul float %540, %553, !dbg !96
  %567 = fmul float %541, %555, !dbg !96
  %568 = fmul float %542, %557, !dbg !96
  %569 = fmul float %543, %559, !dbg !96
  %570 = fmul float %544, %561, !dbg !96
  %571 = fmul float %545, %563, !dbg !96
  %572 = fadd float %564, %454, !dbg !97
  %573 = fadd float %565, %456, !dbg !97
  %574 = fadd float %566, %458, !dbg !97
  %575 = fadd float %567, %460, !dbg !97
  %576 = fadd float %568, %462, !dbg !97
  %577 = fadd float %569, %464, !dbg !97
  %578 = fadd float %570, %466, !dbg !97
  %579 = fadd float %571, %468, !dbg !97
  %580 = icmp sgt i32 %67, 1539, !dbg !23
  %581 = icmp sgt i32 %69, 1539, !dbg !23
  %582 = mul nsw i32 %66, 60, !dbg !98
  %583 = add nsw i32 %67, -1540, !dbg !99
  %584 = add nsw i32 %69, -1540, !dbg !99
  %585 = mul nsw i32 %583, 3616, !dbg !100
  %586 = mul nsw i32 %584, 3616, !dbg !100
  %587 = mul i32 %63, 1851392, !dbg !101
  %588 = mul i32 %64, 1851392, !dbg !101
  %589 = or disjoint i32 %587, 1708, !dbg !102
  %590 = add i32 %589, %582, !dbg !103
  %591 = add i32 %590, %585, !dbg !104
  %592 = or disjoint i32 %588, 1708, !dbg !102
  %593 = add i32 %592, %582, !dbg !103
  %594 = add i32 %593, %586, !dbg !104
  %595 = sext i32 %591 to i64, !dbg !105
  %596 = getelementptr float, ptr addrspace(1) %22, i64 %595, !dbg !105
  %597 = sext i32 %594 to i64, !dbg !105
  %598 = getelementptr float, ptr addrspace(1) %22, i64 %597, !dbg !105
  %599 = and i1 %56, %580, !dbg !106
  %600 = and i1 %57, %581, !dbg !106
  %601 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %596, i1 %599, i32 0, i1 %599, i32 0, i1 %599, i32 0, i1 %599, i32 0, i1 %599) #1, !dbg !107
  %602 = extractvalue { i32, i32, i32, i32 } %601, 0, !dbg !107
  %603 = extractvalue { i32, i32, i32, i32 } %601, 1, !dbg !107
  %604 = extractvalue { i32, i32, i32, i32 } %601, 2, !dbg !107
  %605 = extractvalue { i32, i32, i32, i32 } %601, 3, !dbg !107
  %606 = bitcast i32 %602 to float, !dbg !107
  %607 = bitcast i32 %603 to float, !dbg !107
  %608 = bitcast i32 %604 to float, !dbg !107
  %609 = bitcast i32 %605 to float, !dbg !107
  %610 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %598, i1 %600, i32 0, i1 %600, i32 0, i1 %600, i32 0, i1 %600, i32 0, i1 %600) #1, !dbg !107
  %611 = extractvalue { i32, i32, i32, i32 } %610, 0, !dbg !107
  %612 = extractvalue { i32, i32, i32, i32 } %610, 1, !dbg !107
  %613 = extractvalue { i32, i32, i32, i32 } %610, 2, !dbg !107
  %614 = extractvalue { i32, i32, i32, i32 } %610, 3, !dbg !107
  %615 = bitcast i32 %611 to float, !dbg !107
  %616 = bitcast i32 %612 to float, !dbg !107
  %617 = bitcast i32 %613 to float, !dbg !107
  %618 = bitcast i32 %614 to float, !dbg !107
  %619 = add nsw i32 %583, %154, !dbg !108
  %620 = add nsw i32 %584, %155, !dbg !108
  %621 = sext i32 %619 to i64, !dbg !109
  %622 = getelementptr float, ptr addrspace(1) %25, i64 %621, !dbg !109
  %623 = sext i32 %620 to i64, !dbg !109
  %624 = getelementptr float, ptr addrspace(1) %25, i64 %623, !dbg !109
  %625 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %622, i1 %599, i32 0, i1 %599) #1, !dbg !110
  %626 = bitcast i32 %625 to float, !dbg !110
  %627 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %622, i1 %599, i32 0, i1 %599) #1, !dbg !110
  %628 = bitcast i32 %627 to float, !dbg !110
  %629 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %622, i1 %599, i32 0, i1 %599) #1, !dbg !110
  %630 = bitcast i32 %629 to float, !dbg !110
  %631 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %622, i1 %599, i32 0, i1 %599) #1, !dbg !110
  %632 = bitcast i32 %631 to float, !dbg !110
  %633 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %624, i1 %600, i32 0, i1 %600) #1, !dbg !110
  %634 = bitcast i32 %633 to float, !dbg !110
  %635 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %624, i1 %600, i32 0, i1 %600) #1, !dbg !110
  %636 = bitcast i32 %635 to float, !dbg !110
  %637 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %624, i1 %600, i32 0, i1 %600) #1, !dbg !110
  %638 = bitcast i32 %637 to float, !dbg !110
  %639 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %624, i1 %600, i32 0, i1 %600) #1, !dbg !110
  %640 = bitcast i32 %639 to float, !dbg !110
  %641 = fsub float %626, %626, !dbg !111
  %642 = fsub float %628, %628, !dbg !111
  %643 = fsub float %630, %630, !dbg !111
  %644 = fsub float %632, %632, !dbg !111
  %645 = fsub float %634, %634, !dbg !111
  %646 = fsub float %636, %636, !dbg !111
  %647 = fsub float %638, %638, !dbg !111
  %648 = fsub float %640, %640, !dbg !111
  %649 = getelementptr i8, ptr addrspace(1) %27, i64 112, !dbg !112
  %650 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %649, i1 %599, i32 0, i1 %599, i32 0, i1 %599, i32 0, i1 %599, i32 0, i1 %599) #1, !dbg !113
  %651 = extractvalue { i32, i32, i32, i32 } %650, 0, !dbg !113
  %652 = extractvalue { i32, i32, i32, i32 } %650, 1, !dbg !113
  %653 = extractvalue { i32, i32, i32, i32 } %650, 2, !dbg !113
  %654 = extractvalue { i32, i32, i32, i32 } %650, 3, !dbg !113
  %655 = bitcast i32 %651 to float, !dbg !113
  %656 = bitcast i32 %652 to float, !dbg !113
  %657 = bitcast i32 %653 to float, !dbg !113
  %658 = bitcast i32 %654 to float, !dbg !113
  %659 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %649, i1 %600, i32 0, i1 %600, i32 0, i1 %600, i32 0, i1 %600, i32 0, i1 %600) #1, !dbg !113
  %660 = extractvalue { i32, i32, i32, i32 } %659, 0, !dbg !113
  %661 = extractvalue { i32, i32, i32, i32 } %659, 1, !dbg !113
  %662 = extractvalue { i32, i32, i32, i32 } %659, 2, !dbg !113
  %663 = extractvalue { i32, i32, i32, i32 } %659, 3, !dbg !113
  %664 = bitcast i32 %660 to float, !dbg !113
  %665 = bitcast i32 %661 to float, !dbg !113
  %666 = bitcast i32 %662 to float, !dbg !113
  %667 = bitcast i32 %663 to float, !dbg !113
  %668 = fmul float %641, %655, !dbg !114
  %669 = fmul float %642, %656, !dbg !114
  %670 = fmul float %643, %657, !dbg !114
  %671 = fmul float %644, %658, !dbg !114
  %672 = fmul float %645, %664, !dbg !114
  %673 = fmul float %646, %665, !dbg !114
  %674 = fmul float %647, %666, !dbg !114
  %675 = fmul float %648, %667, !dbg !114
  %676 = fadd float %668, %626, !dbg !115
  %677 = fadd float %669, %628, !dbg !115
  %678 = fadd float %670, %630, !dbg !115
  %679 = fadd float %671, %632, !dbg !115
  %680 = fadd float %672, %634, !dbg !115
  %681 = fadd float %673, %636, !dbg !115
  %682 = fadd float %674, %638, !dbg !115
  %683 = fadd float %675, %640, !dbg !115
  %684 = fsub float %676, %606, !dbg !116
  %685 = fsub float %677, %607, !dbg !116
  %686 = fsub float %678, %608, !dbg !116
  %687 = fsub float %679, %609, !dbg !116
  %688 = fsub float %680, %615, !dbg !116
  %689 = fsub float %681, %616, !dbg !116
  %690 = fsub float %682, %617, !dbg !116
  %691 = fsub float %683, %618, !dbg !116
  %692 = getelementptr float, ptr addrspace(1) %28, i64 %226, !dbg !117
  %693 = getelementptr i8, ptr addrspace(1) %692, i64 112, !dbg !117
  %694 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %693, i1 %599, i32 0, i1 %599) #1, !dbg !118
  %695 = bitcast i32 %694 to float, !dbg !118
  %696 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %693, i1 %599, i32 0, i1 %599) #1, !dbg !118
  %697 = bitcast i32 %696 to float, !dbg !118
  %698 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %693, i1 %599, i32 0, i1 %599) #1, !dbg !118
  %699 = bitcast i32 %698 to float, !dbg !118
  %700 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %693, i1 %599, i32 0, i1 %599) #1, !dbg !118
  %701 = bitcast i32 %700 to float, !dbg !118
  %702 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %693, i1 %600, i32 0, i1 %600) #1, !dbg !118
  %703 = bitcast i32 %702 to float, !dbg !118
  %704 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %693, i1 %600, i32 0, i1 %600) #1, !dbg !118
  %705 = bitcast i32 %704 to float, !dbg !118
  %706 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %693, i1 %600, i32 0, i1 %600) #1, !dbg !118
  %707 = bitcast i32 %706 to float, !dbg !118
  %708 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %693, i1 %600, i32 0, i1 %600) #1, !dbg !118
  %709 = bitcast i32 %708 to float, !dbg !118
  %710 = fmul float %684, %695, !dbg !119
  %711 = fmul float %685, %697, !dbg !119
  %712 = fmul float %686, %699, !dbg !119
  %713 = fmul float %687, %701, !dbg !119
  %714 = fmul float %688, %703, !dbg !119
  %715 = fmul float %689, %705, !dbg !119
  %716 = fmul float %690, %707, !dbg !119
  %717 = fmul float %691, %709, !dbg !119
  %718 = fadd float %710, %606, !dbg !120
  %719 = fadd float %711, %607, !dbg !120
  %720 = fadd float %712, %608, !dbg !120
  %721 = fadd float %713, %609, !dbg !120
  %722 = fadd float %714, %615, !dbg !120
  %723 = fadd float %715, %616, !dbg !120
  %724 = fadd float %716, %617, !dbg !120
  %725 = fadd float %717, %618, !dbg !120
  %726 = select i1 %580, float %718, float 0.000000e+00, !dbg !121
  %727 = select i1 %580, float %719, float 0.000000e+00, !dbg !121
  %728 = select i1 %580, float %720, float 0.000000e+00, !dbg !121
  %729 = select i1 %580, float %721, float 0.000000e+00, !dbg !121
  %730 = select i1 %581, float %722, float 0.000000e+00, !dbg !121
  %731 = select i1 %581, float %723, float 0.000000e+00, !dbg !121
  %732 = select i1 %581, float %724, float 0.000000e+00, !dbg !121
  %733 = select i1 %581, float %725, float 0.000000e+00, !dbg !121
  %734 = select i1 %449, float %572, float %726, !dbg !122
  %735 = select i1 %449, float %573, float %727, !dbg !122
  %736 = select i1 %449, float %574, float %728, !dbg !122
  %737 = select i1 %449, float %575, float %729, !dbg !122
  %738 = select i1 %451, float %576, float %730, !dbg !122
  %739 = select i1 %451, float %577, float %731, !dbg !122
  %740 = select i1 %451, float %578, float %732, !dbg !122
  %741 = select i1 %451, float %579, float %733, !dbg !122
  %742 = select i1 %280, float %400, float %734, !dbg !122
  %743 = select i1 %280, float %401, float %735, !dbg !122
  %744 = select i1 %280, float %402, float %736, !dbg !122
  %745 = select i1 %280, float %403, float %737, !dbg !122
  %746 = select i1 %282, float %404, float %738, !dbg !122
  %747 = select i1 %282, float %405, float %739, !dbg !122
  %748 = select i1 %282, float %406, float %740, !dbg !122
  %749 = select i1 %282, float %407, float %741, !dbg !122
  %750 = select i1 %94, float %253, float %742, !dbg !122
  %751 = select i1 %94, float %254, float %743, !dbg !122
  %752 = select i1 %94, float %255, float %744, !dbg !122
  %753 = select i1 %94, float %256, float %745, !dbg !122
  %754 = select i1 %96, float %257, float %746, !dbg !122
  %755 = select i1 %96, float %258, float %747, !dbg !122
  %756 = select i1 %96, float %259, float %748, !dbg !122
  %757 = select i1 %96, float %260, float %749, !dbg !122
  %758 = sext i32 %54 to i64, !dbg !123
  %759 = getelementptr float, ptr addrspace(1) %29, i64 %758, !dbg !123
  %760 = sext i32 %55 to i64, !dbg !123
  %761 = getelementptr float, ptr addrspace(1) %29, i64 %760, !dbg !123
  %762 = bitcast float %750 to i32, !dbg !124
  %763 = select i1 %68, i32 %84, i32 %762, !dbg !125
  %764 = bitcast float %751 to i32, !dbg !124
  %765 = select i1 %68, i32 %85, i32 %764, !dbg !125
  %766 = bitcast float %752 to i32, !dbg !124
  %767 = select i1 %68, i32 %86, i32 %766, !dbg !125
  %768 = bitcast float %753 to i32, !dbg !124
  %769 = select i1 %68, i32 %87, i32 %768, !dbg !125
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %763, i32 %765, i32 %767, i32 %769, ptr addrspace(1) %759, i1 %56) #1, !dbg !124
  %770 = bitcast float %754 to i32, !dbg !124
  %771 = select i1 %70, i32 %89, i32 %770, !dbg !125
  %772 = bitcast float %755 to i32, !dbg !124
  %773 = select i1 %70, i32 %90, i32 %772, !dbg !125
  %774 = bitcast float %756 to i32, !dbg !124
  %775 = select i1 %70, i32 %91, i32 %774, !dbg !125
  %776 = bitcast float %757 to i32, !dbg !124
  %777 = select i1 %70, i32 %92, i32 %776, !dbg !125
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %771, i32 %773, i32 %775, i32 %777, ptr addrspace(1) %761, i1 %57) #1, !dbg !124
  ret void, !dbg !126
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "czjfrcealjdp6mmjaiwtofifyypv6ajkwzsu3huasugasn3jbrsi.py", directory: "inductor_cache/zj")
!4 = !{ptr @triton_poi_fused_cat_18, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_18, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_18", linkageName: "triton_poi_fused_cat_18", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 27, column: 19, scope: !7)
!15 = !DILocation(line: 56, column: 31, scope: !7)
!16 = !DILocation(line: 85, column: 32, scope: !7)
!17 = !DILocation(line: 23, column: 21, scope: !7)
!18 = !DILocation(line: 24, column: 21, scope: !7)
!19 = !DILocation(line: 24, column: 27, scope: !7)
!20 = !DILocation(line: 25, column: 19, scope: !7)
!21 = !DILocation(line: 28, column: 21, scope: !7)
!22 = !DILocation(line: 28, column: 26, scope: !7)
!23 = !DILocation(line: 123, column: 20, scope: !7)
!24 = !DILocation(line: 34, column: 18, scope: !7)
!25 = !DILocation(line: 35, column: 35, scope: !7)
!26 = !DILocation(line: 35, column: 48, scope: !7)
!27 = !DILocation(line: 35, column: 45, scope: !7)
!28 = !DILocation(line: 35, column: 30, scope: !7)
!29 = !DILocation(line: 35, column: 60, scope: !7)
!30 = !DILocation(line: 35, column: 53, scope: !7)
!31 = !DILocation(line: 39, column: 18, scope: !7)
!32 = !DILocation(line: 40, column: 44, scope: !7)
!33 = !DILocation(line: 40, column: 54, scope: !7)
!34 = !DILocation(line: 40, column: 73, scope: !7)
!35 = !DILocation(line: 40, column: 41, scope: !7)
!36 = !DILocation(line: 40, column: 49, scope: !7)
!37 = !DILocation(line: 40, column: 67, scope: !7)
!38 = !DILocation(line: 40, column: 31, scope: !7)
!39 = !DILocation(line: 40, column: 85, scope: !7)
!40 = !DILocation(line: 40, column: 78, scope: !7)
!41 = !DILocation(line: 50, column: 35, scope: !7)
!42 = !DILocation(line: 50, column: 41, scope: !7)
!43 = !DILocation(line: 50, column: 31, scope: !7)
!44 = !DILocation(line: 50, column: 54, scope: !7)
!45 = !DILocation(line: 55, column: 20, scope: !7)
!46 = !DILocation(line: 56, column: 40, scope: !7)
!47 = !DILocation(line: 57, column: 20, scope: !7)
!48 = !DILocation(line: 58, column: 20, scope: !7)
!49 = !DILocation(line: 59, column: 20, scope: !7)
!50 = !DILocation(line: 60, column: 31, scope: !7)
!51 = !DILocation(line: 60, column: 40, scope: !7)
!52 = !DILocation(line: 61, column: 20, scope: !7)
!53 = !DILocation(line: 62, column: 20, scope: !7)
!54 = !DILocation(line: 69, column: 45, scope: !7)
!55 = !DILocation(line: 97, column: 20, scope: !7)
!56 = !DILocation(line: 69, column: 55, scope: !7)
!57 = !DILocation(line: 69, column: 77, scope: !7)
!58 = !DILocation(line: 69, column: 42, scope: !7)
!59 = !DILocation(line: 69, column: 50, scope: !7)
!60 = !DILocation(line: 69, column: 70, scope: !7)
!61 = !DILocation(line: 69, column: 31, scope: !7)
!62 = !DILocation(line: 69, column: 90, scope: !7)
!63 = !DILocation(line: 69, column: 82, scope: !7)
!64 = !DILocation(line: 79, column: 42, scope: !7)
!65 = !DILocation(line: 79, column: 32, scope: !7)
!66 = !DILocation(line: 79, column: 57, scope: !7)
!67 = !DILocation(line: 84, column: 20, scope: !7)
!68 = !DILocation(line: 85, column: 41, scope: !7)
!69 = !DILocation(line: 86, column: 20, scope: !7)
!70 = !DILocation(line: 87, column: 20, scope: !7)
!71 = !DILocation(line: 88, column: 20, scope: !7)
!72 = !DILocation(line: 89, column: 32, scope: !7)
!73 = !DILocation(line: 89, column: 41, scope: !7)
!74 = !DILocation(line: 90, column: 20, scope: !7)
!75 = !DILocation(line: 91, column: 20, scope: !7)
!76 = !DILocation(line: 98, column: 46, scope: !7)
!77 = !DILocation(line: 98, column: 56, scope: !7)
!78 = !DILocation(line: 98, column: 79, scope: !7)
!79 = !DILocation(line: 98, column: 43, scope: !7)
!80 = !DILocation(line: 98, column: 51, scope: !7)
!81 = !DILocation(line: 98, column: 72, scope: !7)
!82 = !DILocation(line: 98, column: 32, scope: !7)
!83 = !DILocation(line: 98, column: 92, scope: !7)
!84 = !DILocation(line: 98, column: 84, scope: !7)
!85 = !DILocation(line: 108, column: 42, scope: !7)
!86 = !DILocation(line: 108, column: 32, scope: !7)
!87 = !DILocation(line: 108, column: 58, scope: !7)
!88 = !DILocation(line: 113, column: 20, scope: !7)
!89 = !DILocation(line: 114, column: 32, scope: !7)
!90 = !DILocation(line: 114, column: 42, scope: !7)
!91 = !DILocation(line: 115, column: 20, scope: !7)
!92 = !DILocation(line: 116, column: 20, scope: !7)
!93 = !DILocation(line: 117, column: 20, scope: !7)
!94 = !DILocation(line: 118, column: 32, scope: !7)
!95 = !DILocation(line: 118, column: 42, scope: !7)
!96 = !DILocation(line: 119, column: 20, scope: !7)
!97 = !DILocation(line: 120, column: 20, scope: !7)
!98 = !DILocation(line: 126, column: 47, scope: !7)
!99 = !DILocation(line: 126, column: 68, scope: !7)
!100 = !DILocation(line: 126, column: 58, scope: !7)
!101 = !DILocation(line: 126, column: 82, scope: !7)
!102 = !DILocation(line: 126, column: 44, scope: !7)
!103 = !DILocation(line: 126, column: 52, scope: !7)
!104 = !DILocation(line: 126, column: 74, scope: !7)
!105 = !DILocation(line: 126, column: 32, scope: !7)
!106 = !DILocation(line: 126, column: 95, scope: !7)
!107 = !DILocation(line: 126, column: 87, scope: !7)
!108 = !DILocation(line: 136, column: 43, scope: !7)
!109 = !DILocation(line: 136, column: 33, scope: !7)
!110 = !DILocation(line: 136, column: 59, scope: !7)
!111 = !DILocation(line: 141, column: 22, scope: !7)
!112 = !DILocation(line: 142, column: 33, scope: !7)
!113 = !DILocation(line: 142, column: 43, scope: !7)
!114 = !DILocation(line: 143, column: 22, scope: !7)
!115 = !DILocation(line: 144, column: 22, scope: !7)
!116 = !DILocation(line: 145, column: 22, scope: !7)
!117 = !DILocation(line: 146, column: 33, scope: !7)
!118 = !DILocation(line: 146, column: 43, scope: !7)
!119 = !DILocation(line: 147, column: 22, scope: !7)
!120 = !DILocation(line: 148, column: 21, scope: !7)
!121 = !DILocation(line: 150, column: 37, scope: !7)
!122 = !DILocation(line: 0, scope: !7)
!123 = !DILocation(line: 155, column: 25, scope: !7)
!124 = !DILocation(line: 155, column: 38, scope: !7)
!125 = !DILocation(line: 154, column: 34, scope: !7)
!126 = !DILocation(line: 155, column: 4, scope: !7)
