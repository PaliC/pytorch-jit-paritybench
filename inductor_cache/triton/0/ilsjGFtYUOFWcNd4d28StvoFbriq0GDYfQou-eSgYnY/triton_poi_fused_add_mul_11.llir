; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_add_mul_11(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %10 = shl i32 %9, 5, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %.lobit18 = lshr i32 %11, 5, !dbg !12
  %12 = and i32 %.lobit18, 3, !dbg !12
  %13 = and i32 %11, 128, !dbg !12
  %14 = lshr exact i32 %13, 5, !dbg !12
  %15 = or disjoint i32 %12, %14, !dbg !12
  %16 = or disjoint i32 %15, 8, !dbg !12
  %17 = or disjoint i32 %15, 16, !dbg !12
  %18 = or disjoint i32 %15, 24, !dbg !12
  %19 = shl i32 %11, 2, !dbg !12
  %20 = and i32 %19, 28, !dbg !12
  %21 = or disjoint i32 %10, %15, !dbg !13
  %22 = or disjoint i32 %10, %16, !dbg !13
  %23 = or disjoint i32 %10, %17, !dbg !13
  %24 = or disjoint i32 %10, %18, !dbg !13
  %25 = or disjoint i32 %10, %20, !dbg !13
  %26 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %27 = shl i32 %26, 7, !dbg !15
  %28 = and i32 %19, 124, !dbg !16
  %29 = lshr i32 %11, 3, !dbg !16
  %30 = and i32 %29, 3, !dbg !16
  %31 = lshr i32 %11, 3, !dbg !16
  %32 = and i32 %31, 4, !dbg !16
  %33 = lshr i32 %11, 3, !dbg !16
  %34 = and i32 %33, 8, !dbg !16
  %35 = lshr exact i32 %13, 3, !dbg !16
  %36 = or disjoint i32 %32, %30, !dbg !16
  %37 = or disjoint i32 %36, %34, !dbg !16
  %38 = or disjoint i32 %37, %35, !dbg !16
  %39 = or disjoint i32 %27, %28, !dbg !17
  %40 = or disjoint i32 %27, %38, !dbg !17
  %41 = or disjoint i32 %40, 32, !dbg !17
  %42 = or disjoint i32 %40, 64, !dbg !17
  %43 = or disjoint i32 %40, 96, !dbg !17
  %44 = icmp slt i32 %39, 128, !dbg !18
  %45 = icmp slt i32 %40, 128, !dbg !18
  %46 = icmp slt i32 %41, 128, !dbg !18
  %47 = icmp slt i32 %42, 128, !dbg !18
  %48 = icmp slt i32 %43, 128, !dbg !18
  %.frozen = freeze i32 %25, !dbg !19
  %49 = sdiv i32 %.frozen, 256, !dbg !19
  %50 = mul i32 %49, 256, !dbg !20
  %.decomposed = sub i32 %.frozen, %50, !dbg !20
  %51 = sdiv i32 %25, 16, !dbg !21
  %52 = srem i32 %51, 16, !dbg !22
  %53 = shl i32 %21, 7, !dbg !23
  %54 = shl i32 %22, 7, !dbg !23
  %55 = shl i32 %23, 7, !dbg !23
  %56 = shl i32 %24, 7, !dbg !23
  %57 = add i32 %39, %53, !dbg !24
  %58 = add i32 %39, %54, !dbg !24
  %59 = add i32 %39, %55, !dbg !24
  %60 = add i32 %39, %56, !dbg !24
  %61 = sext i32 %57 to i64, !dbg !25
  %62 = getelementptr float, ptr addrspace(1) %0, i64 %61, !dbg !25
  %63 = sext i32 %58 to i64, !dbg !25
  %64 = getelementptr float, ptr addrspace(1) %0, i64 %63, !dbg !25
  %65 = sext i32 %59 to i64, !dbg !25
  %66 = getelementptr float, ptr addrspace(1) %0, i64 %65, !dbg !25
  %67 = sext i32 %60 to i64, !dbg !25
  %68 = getelementptr float, ptr addrspace(1) %0, i64 %67, !dbg !25
  %69 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %62, i1 %44) #2, !dbg !26
  %70 = extractvalue { i32, i32, i32, i32 } %69, 0, !dbg !26
  %71 = extractvalue { i32, i32, i32, i32 } %69, 1, !dbg !26
  %72 = extractvalue { i32, i32, i32, i32 } %69, 2, !dbg !26
  %73 = extractvalue { i32, i32, i32, i32 } %69, 3, !dbg !26
  %74 = bitcast i32 %70 to float, !dbg !26
  %75 = bitcast i32 %71 to float, !dbg !26
  %76 = bitcast i32 %72 to float, !dbg !26
  %77 = bitcast i32 %73 to float, !dbg !26
  %78 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %64, i1 %44) #2, !dbg !26
  %79 = extractvalue { i32, i32, i32, i32 } %78, 0, !dbg !26
  %80 = extractvalue { i32, i32, i32, i32 } %78, 1, !dbg !26
  %81 = extractvalue { i32, i32, i32, i32 } %78, 2, !dbg !26
  %82 = extractvalue { i32, i32, i32, i32 } %78, 3, !dbg !26
  %83 = bitcast i32 %79 to float, !dbg !26
  %84 = bitcast i32 %80 to float, !dbg !26
  %85 = bitcast i32 %81 to float, !dbg !26
  %86 = bitcast i32 %82 to float, !dbg !26
  %87 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %66, i1 %44) #2, !dbg !26
  %88 = extractvalue { i32, i32, i32, i32 } %87, 0, !dbg !26
  %89 = extractvalue { i32, i32, i32, i32 } %87, 1, !dbg !26
  %90 = extractvalue { i32, i32, i32, i32 } %87, 2, !dbg !26
  %91 = extractvalue { i32, i32, i32, i32 } %87, 3, !dbg !26
  %92 = bitcast i32 %88 to float, !dbg !26
  %93 = bitcast i32 %89 to float, !dbg !26
  %94 = bitcast i32 %90 to float, !dbg !26
  %95 = bitcast i32 %91 to float, !dbg !26
  %96 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %68, i1 %44) #2, !dbg !26
  %97 = extractvalue { i32, i32, i32, i32 } %96, 0, !dbg !26
  %98 = extractvalue { i32, i32, i32, i32 } %96, 1, !dbg !26
  %99 = extractvalue { i32, i32, i32, i32 } %96, 2, !dbg !26
  %100 = extractvalue { i32, i32, i32, i32 } %96, 3, !dbg !26
  %101 = bitcast i32 %97 to float, !dbg !26
  %102 = bitcast i32 %98 to float, !dbg !26
  %103 = bitcast i32 %99 to float, !dbg !26
  %104 = bitcast i32 %100 to float, !dbg !26
  %105 = getelementptr float, ptr addrspace(1) %1, i64 %61, !dbg !27
  %106 = getelementptr float, ptr addrspace(1) %1, i64 %63, !dbg !27
  %107 = getelementptr float, ptr addrspace(1) %1, i64 %65, !dbg !27
  %108 = getelementptr float, ptr addrspace(1) %1, i64 %67, !dbg !27
  %109 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %105, i1 %44) #2, !dbg !28
  %110 = extractvalue { i32, i32, i32, i32 } %109, 0, !dbg !28
  %111 = extractvalue { i32, i32, i32, i32 } %109, 1, !dbg !28
  %112 = extractvalue { i32, i32, i32, i32 } %109, 2, !dbg !28
  %113 = extractvalue { i32, i32, i32, i32 } %109, 3, !dbg !28
  %114 = bitcast i32 %110 to float, !dbg !28
  %115 = bitcast i32 %111 to float, !dbg !28
  %116 = bitcast i32 %112 to float, !dbg !28
  %117 = bitcast i32 %113 to float, !dbg !28
  %118 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %106, i1 %44) #2, !dbg !28
  %119 = extractvalue { i32, i32, i32, i32 } %118, 0, !dbg !28
  %120 = extractvalue { i32, i32, i32, i32 } %118, 1, !dbg !28
  %121 = extractvalue { i32, i32, i32, i32 } %118, 2, !dbg !28
  %122 = extractvalue { i32, i32, i32, i32 } %118, 3, !dbg !28
  %123 = bitcast i32 %119 to float, !dbg !28
  %124 = bitcast i32 %120 to float, !dbg !28
  %125 = bitcast i32 %121 to float, !dbg !28
  %126 = bitcast i32 %122 to float, !dbg !28
  %127 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %107, i1 %44) #2, !dbg !28
  %128 = extractvalue { i32, i32, i32, i32 } %127, 0, !dbg !28
  %129 = extractvalue { i32, i32, i32, i32 } %127, 1, !dbg !28
  %130 = extractvalue { i32, i32, i32, i32 } %127, 2, !dbg !28
  %131 = extractvalue { i32, i32, i32, i32 } %127, 3, !dbg !28
  %132 = bitcast i32 %128 to float, !dbg !28
  %133 = bitcast i32 %129 to float, !dbg !28
  %134 = bitcast i32 %130 to float, !dbg !28
  %135 = bitcast i32 %131 to float, !dbg !28
  %136 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %108, i1 %44) #2, !dbg !28
  %137 = extractvalue { i32, i32, i32, i32 } %136, 0, !dbg !28
  %138 = extractvalue { i32, i32, i32, i32 } %136, 1, !dbg !28
  %139 = extractvalue { i32, i32, i32, i32 } %136, 2, !dbg !28
  %140 = extractvalue { i32, i32, i32, i32 } %136, 3, !dbg !28
  %141 = bitcast i32 %137 to float, !dbg !28
  %142 = bitcast i32 %138 to float, !dbg !28
  %143 = bitcast i32 %139 to float, !dbg !28
  %144 = bitcast i32 %140 to float, !dbg !28
  %145 = shl i32 %40, 8, !dbg !29
  %146 = shl i32 %41, 8, !dbg !29
  %147 = shl i32 %42, 8, !dbg !29
  %148 = shl i32 %43, 8, !dbg !29
  %149 = shl i32 %49, 15, !dbg !30
  %150 = add i32 %149, %.decomposed, !dbg !31
  %151 = add i32 %150, %145, !dbg !32
  %152 = add i32 %150, %146, !dbg !32
  %153 = add i32 %150, %147, !dbg !32
  %154 = add i32 %150, %148, !dbg !32
  %155 = sext i32 %151 to i64, !dbg !33
  %156 = getelementptr float, ptr addrspace(1) %2, i64 %155, !dbg !33
  %157 = sext i32 %152 to i64, !dbg !33
  %158 = getelementptr float, ptr addrspace(1) %2, i64 %157, !dbg !33
  %159 = sext i32 %153 to i64, !dbg !33
  %160 = getelementptr float, ptr addrspace(1) %2, i64 %159, !dbg !33
  %161 = sext i32 %154 to i64, !dbg !33
  %162 = getelementptr float, ptr addrspace(1) %2, i64 %161, !dbg !33
  %163 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %156, i1 %45) #2, !dbg !34
  %164 = extractvalue { i32, i32, i32, i32 } %163, 0, !dbg !34
  %165 = extractvalue { i32, i32, i32, i32 } %163, 1, !dbg !34
  %166 = extractvalue { i32, i32, i32, i32 } %163, 2, !dbg !34
  %167 = extractvalue { i32, i32, i32, i32 } %163, 3, !dbg !34
  %168 = bitcast i32 %164 to float, !dbg !34
  %169 = bitcast i32 %165 to float, !dbg !34
  %170 = bitcast i32 %166 to float, !dbg !34
  %171 = bitcast i32 %167 to float, !dbg !34
  %172 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %158, i1 %46) #2, !dbg !34
  %173 = extractvalue { i32, i32, i32, i32 } %172, 0, !dbg !34
  %174 = extractvalue { i32, i32, i32, i32 } %172, 1, !dbg !34
  %175 = extractvalue { i32, i32, i32, i32 } %172, 2, !dbg !34
  %176 = extractvalue { i32, i32, i32, i32 } %172, 3, !dbg !34
  %177 = bitcast i32 %173 to float, !dbg !34
  %178 = bitcast i32 %174 to float, !dbg !34
  %179 = bitcast i32 %175 to float, !dbg !34
  %180 = bitcast i32 %176 to float, !dbg !34
  %181 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %160, i1 %47) #2, !dbg !34
  %182 = extractvalue { i32, i32, i32, i32 } %181, 0, !dbg !34
  %183 = extractvalue { i32, i32, i32, i32 } %181, 1, !dbg !34
  %184 = extractvalue { i32, i32, i32, i32 } %181, 2, !dbg !34
  %185 = extractvalue { i32, i32, i32, i32 } %181, 3, !dbg !34
  %186 = bitcast i32 %182 to float, !dbg !34
  %187 = bitcast i32 %183 to float, !dbg !34
  %188 = bitcast i32 %184 to float, !dbg !34
  %189 = bitcast i32 %185 to float, !dbg !34
  %190 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %162, i1 %48) #2, !dbg !34
  %191 = extractvalue { i32, i32, i32, i32 } %190, 0, !dbg !34
  %192 = extractvalue { i32, i32, i32, i32 } %190, 1, !dbg !34
  %193 = extractvalue { i32, i32, i32, i32 } %190, 2, !dbg !34
  %194 = extractvalue { i32, i32, i32, i32 } %190, 3, !dbg !34
  %195 = bitcast i32 %191 to float, !dbg !34
  %196 = bitcast i32 %192 to float, !dbg !34
  %197 = bitcast i32 %193 to float, !dbg !34
  %198 = bitcast i32 %194 to float, !dbg !34
  %199 = getelementptr float, ptr addrspace(1) %3, i64 %155, !dbg !35
  %200 = getelementptr float, ptr addrspace(1) %3, i64 %157, !dbg !35
  %201 = getelementptr float, ptr addrspace(1) %3, i64 %159, !dbg !35
  %202 = getelementptr float, ptr addrspace(1) %3, i64 %161, !dbg !35
  %203 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %199, i1 %45) #2, !dbg !36
  %204 = extractvalue { i32, i32, i32, i32 } %203, 0, !dbg !36
  %205 = extractvalue { i32, i32, i32, i32 } %203, 1, !dbg !36
  %206 = extractvalue { i32, i32, i32, i32 } %203, 2, !dbg !36
  %207 = extractvalue { i32, i32, i32, i32 } %203, 3, !dbg !36
  %208 = bitcast i32 %204 to float, !dbg !36
  %209 = bitcast i32 %205 to float, !dbg !36
  %210 = bitcast i32 %206 to float, !dbg !36
  %211 = bitcast i32 %207 to float, !dbg !36
  %212 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %200, i1 %46) #2, !dbg !36
  %213 = extractvalue { i32, i32, i32, i32 } %212, 0, !dbg !36
  %214 = extractvalue { i32, i32, i32, i32 } %212, 1, !dbg !36
  %215 = extractvalue { i32, i32, i32, i32 } %212, 2, !dbg !36
  %216 = extractvalue { i32, i32, i32, i32 } %212, 3, !dbg !36
  %217 = bitcast i32 %213 to float, !dbg !36
  %218 = bitcast i32 %214 to float, !dbg !36
  %219 = bitcast i32 %215 to float, !dbg !36
  %220 = bitcast i32 %216 to float, !dbg !36
  %221 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %201, i1 %47) #2, !dbg !36
  %222 = extractvalue { i32, i32, i32, i32 } %221, 0, !dbg !36
  %223 = extractvalue { i32, i32, i32, i32 } %221, 1, !dbg !36
  %224 = extractvalue { i32, i32, i32, i32 } %221, 2, !dbg !36
  %225 = extractvalue { i32, i32, i32, i32 } %221, 3, !dbg !36
  %226 = bitcast i32 %222 to float, !dbg !36
  %227 = bitcast i32 %223 to float, !dbg !36
  %228 = bitcast i32 %224 to float, !dbg !36
  %229 = bitcast i32 %225 to float, !dbg !36
  %230 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %202, i1 %48) #2, !dbg !36
  %231 = extractvalue { i32, i32, i32, i32 } %230, 0, !dbg !36
  %232 = extractvalue { i32, i32, i32, i32 } %230, 1, !dbg !36
  %233 = extractvalue { i32, i32, i32, i32 } %230, 2, !dbg !36
  %234 = extractvalue { i32, i32, i32, i32 } %230, 3, !dbg !36
  %235 = bitcast i32 %231 to float, !dbg !36
  %236 = bitcast i32 %232 to float, !dbg !36
  %237 = bitcast i32 %233 to float, !dbg !36
  %238 = bitcast i32 %234 to float, !dbg !36
  %239 = sext i32 %52 to i64, !dbg !37
  %240 = getelementptr float, ptr addrspace(1) %4, i64 %239, !dbg !37
  %241 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %240, i1 true) #2, !dbg !38
  %242 = bitcast i32 %241 to float, !dbg !38
  %243 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %240, i1 true) #2, !dbg !38
  %244 = bitcast i32 %243 to float, !dbg !38
  %245 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %240, i1 true) #2, !dbg !38
  %246 = bitcast i32 %245 to float, !dbg !38
  %247 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %240, i1 true) #2, !dbg !38
  %248 = bitcast i32 %247 to float, !dbg !38
  %249 = fmul float %74, %114, !dbg !39
  %250 = fmul float %75, %115, !dbg !39
  %251 = fmul float %76, %116, !dbg !39
  %252 = fmul float %77, %117, !dbg !39
  %253 = fmul float %83, %123, !dbg !39
  %254 = fmul float %84, %124, !dbg !39
  %255 = fmul float %85, %125, !dbg !39
  %256 = fmul float %86, %126, !dbg !39
  %257 = fmul float %92, %132, !dbg !39
  %258 = fmul float %93, %133, !dbg !39
  %259 = fmul float %94, %134, !dbg !39
  %260 = fmul float %95, %135, !dbg !39
  %261 = fmul float %101, %141, !dbg !39
  %262 = fmul float %102, %142, !dbg !39
  %263 = fmul float %103, %143, !dbg !39
  %264 = fmul float %104, %144, !dbg !39
  %265 = shl i32 %11, 7, !dbg !39
  %266 = and i32 %265, 3968, !dbg !39
  %267 = or disjoint i32 %12, %266, !dbg !39
  %268 = or disjoint i32 %267, %14, !dbg !39
  %269 = and i32 %19, 1020, !dbg !39
  %270 = lshr exact i32 %266, 1, !dbg !39
  %271 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %270, !dbg !39
  %272 = getelementptr inbounds float, ptr addrspace(3) %271, i32 %268, !dbg !39
  %273 = bitcast float %249 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %272, <1 x i32> %273, i1 true) #2, !dbg !39
  %274 = or disjoint i32 %268, 32, !dbg !39
  %275 = lshr i32 %274, 3, !dbg !39
  %276 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %275, !dbg !39
  %277 = getelementptr inbounds float, ptr addrspace(3) %276, i32 %274, !dbg !39
  %278 = bitcast float %250 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %277, <1 x i32> %278, i1 true) #2, !dbg !39
  %279 = or disjoint i32 %268, 64, !dbg !39
  %280 = lshr i32 %279, 3, !dbg !39
  %281 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %280, !dbg !39
  %282 = getelementptr inbounds float, ptr addrspace(3) %281, i32 %279, !dbg !39
  %283 = bitcast float %251 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %282, <1 x i32> %283, i1 true) #2, !dbg !39
  %284 = or disjoint i32 %268, 96, !dbg !39
  %285 = lshr i32 %284, 3, !dbg !39
  %286 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %285, !dbg !39
  %287 = getelementptr inbounds float, ptr addrspace(3) %286, i32 %284, !dbg !39
  %288 = bitcast float %252 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %287, <1 x i32> %288, i1 true) #2, !dbg !39
  %289 = or disjoint i32 %268, 8, !dbg !39
  %290 = getelementptr inbounds float, ptr addrspace(3) %271, i32 %289, !dbg !39
  %291 = bitcast float %253 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %290, <1 x i32> %291, i1 true) #2, !dbg !39
  %292 = or disjoint i32 %268, 40, !dbg !39
  %293 = lshr i32 %292, 3, !dbg !39
  %294 = and i32 %293, 500, !dbg !39
  %295 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %294, !dbg !39
  %296 = getelementptr inbounds float, ptr addrspace(3) %295, i32 %292, !dbg !39
  %297 = bitcast float %254 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %296, <1 x i32> %297, i1 true) #2, !dbg !39
  %298 = or disjoint i32 %268, 72, !dbg !39
  %299 = lshr i32 %298, 3, !dbg !39
  %300 = and i32 %299, 504, !dbg !39
  %301 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %300, !dbg !39
  %302 = getelementptr inbounds float, ptr addrspace(3) %301, i32 %298, !dbg !39
  %303 = bitcast float %255 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %302, <1 x i32> %303, i1 true) #2, !dbg !39
  %304 = or disjoint i32 %268, 104, !dbg !39
  %305 = lshr i32 %304, 3, !dbg !39
  %306 = and i32 %305, 508, !dbg !39
  %307 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %306, !dbg !39
  %308 = getelementptr inbounds float, ptr addrspace(3) %307, i32 %304, !dbg !39
  %309 = bitcast float %256 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %308, <1 x i32> %309, i1 true) #2, !dbg !39
  %310 = or disjoint i32 %268, 16, !dbg !39
  %311 = getelementptr inbounds float, ptr addrspace(3) %271, i32 %310, !dbg !39
  %312 = bitcast float %257 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %311, <1 x i32> %312, i1 true) #2, !dbg !39
  %313 = or disjoint i32 %268, 48, !dbg !39
  %314 = lshr i32 %313, 3, !dbg !39
  %315 = and i32 %314, 500, !dbg !39
  %316 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %315, !dbg !39
  %317 = getelementptr inbounds float, ptr addrspace(3) %316, i32 %313, !dbg !39
  %318 = bitcast float %258 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %317, <1 x i32> %318, i1 true) #2, !dbg !39
  %319 = or disjoint i32 %268, 80, !dbg !39
  %320 = lshr i32 %319, 3, !dbg !39
  %321 = and i32 %320, 504, !dbg !39
  %322 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %321, !dbg !39
  %323 = getelementptr inbounds float, ptr addrspace(3) %322, i32 %319, !dbg !39
  %324 = bitcast float %259 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %323, <1 x i32> %324, i1 true) #2, !dbg !39
  %325 = or disjoint i32 %268, 112, !dbg !39
  %326 = lshr i32 %325, 3, !dbg !39
  %327 = and i32 %326, 508, !dbg !39
  %328 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %327, !dbg !39
  %329 = getelementptr inbounds float, ptr addrspace(3) %328, i32 %325, !dbg !39
  %330 = bitcast float %260 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %329, <1 x i32> %330, i1 true) #2, !dbg !39
  %331 = or disjoint i32 %268, 24, !dbg !39
  %332 = getelementptr inbounds float, ptr addrspace(3) %271, i32 %331, !dbg !39
  %333 = bitcast float %261 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %332, <1 x i32> %333, i1 true) #2, !dbg !39
  %334 = or disjoint i32 %268, 56, !dbg !39
  %335 = lshr i32 %334, 3, !dbg !39
  %336 = and i32 %335, 500, !dbg !39
  %337 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %336, !dbg !39
  %338 = getelementptr inbounds float, ptr addrspace(3) %337, i32 %334, !dbg !39
  %339 = bitcast float %262 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %338, <1 x i32> %339, i1 true) #2, !dbg !39
  %340 = or disjoint i32 %268, 88, !dbg !39
  %341 = lshr i32 %340, 3, !dbg !39
  %342 = and i32 %341, 504, !dbg !39
  %343 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %342, !dbg !39
  %344 = getelementptr inbounds float, ptr addrspace(3) %343, i32 %340, !dbg !39
  %345 = bitcast float %263 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %344, <1 x i32> %345, i1 true) #2, !dbg !39
  %346 = or disjoint i32 %268, 120, !dbg !39
  %347 = lshr i32 %346, 3, !dbg !39
  %348 = and i32 %347, 508, !dbg !39
  %349 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %348, !dbg !39
  %350 = getelementptr inbounds float, ptr addrspace(3) %349, i32 %346, !dbg !39
  %351 = bitcast float %264 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %350, <1 x i32> %351, i1 true) #2, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %352 = lshr i32 %19, 3, !dbg !39
  %353 = and i32 %352, 124, !dbg !39
  %354 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %353, !dbg !39
  %355 = getelementptr inbounds float, ptr addrspace(3) %354, i32 %269, !dbg !39
  %356 = load float, ptr addrspace(3) %355, align 16, !dbg !39
  %357 = getelementptr inbounds i8, ptr addrspace(3) %355, i32 4, !dbg !39
  %358 = load float, ptr addrspace(3) %357, align 4, !dbg !39
  %359 = getelementptr inbounds i8, ptr addrspace(3) %355, i32 8, !dbg !39
  %360 = load float, ptr addrspace(3) %359, align 8, !dbg !39
  %361 = getelementptr inbounds i8, ptr addrspace(3) %355, i32 12, !dbg !39
  %362 = load float, ptr addrspace(3) %361, align 4, !dbg !39
  %363 = or disjoint i32 %269, 1024, !dbg !39
  %364 = lshr i32 %363, 3, !dbg !39
  %365 = and i32 %364, 252, !dbg !39
  %366 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %365, !dbg !39
  %367 = getelementptr inbounds float, ptr addrspace(3) %366, i32 %363, !dbg !39
  %368 = load float, ptr addrspace(3) %367, align 16, !dbg !39
  %369 = getelementptr inbounds i8, ptr addrspace(3) %367, i32 4, !dbg !39
  %370 = load float, ptr addrspace(3) %369, align 4, !dbg !39
  %371 = getelementptr inbounds i8, ptr addrspace(3) %367, i32 8, !dbg !39
  %372 = load float, ptr addrspace(3) %371, align 8, !dbg !39
  %373 = getelementptr inbounds i8, ptr addrspace(3) %367, i32 12, !dbg !39
  %374 = load float, ptr addrspace(3) %373, align 4, !dbg !39
  %375 = or disjoint i32 %269, 2048, !dbg !39
  %376 = lshr i32 %375, 3, !dbg !39
  %377 = and i32 %376, 380, !dbg !39
  %378 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %377, !dbg !39
  %379 = getelementptr inbounds float, ptr addrspace(3) %378, i32 %375, !dbg !39
  %380 = load float, ptr addrspace(3) %379, align 16, !dbg !39
  %381 = getelementptr inbounds i8, ptr addrspace(3) %379, i32 4, !dbg !39
  %382 = load float, ptr addrspace(3) %381, align 4, !dbg !39
  %383 = getelementptr inbounds i8, ptr addrspace(3) %379, i32 8, !dbg !39
  %384 = load float, ptr addrspace(3) %383, align 8, !dbg !39
  %385 = getelementptr inbounds i8, ptr addrspace(3) %379, i32 12, !dbg !39
  %386 = load float, ptr addrspace(3) %385, align 4, !dbg !39
  %387 = or disjoint i32 %269, 3072, !dbg !39
  %388 = lshr i32 %387, 3, !dbg !39
  %389 = and i32 %388, 508, !dbg !39
  %390 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %389, !dbg !39
  %391 = getelementptr inbounds float, ptr addrspace(3) %390, i32 %387, !dbg !39
  %392 = load float, ptr addrspace(3) %391, align 16, !dbg !39
  %393 = getelementptr inbounds i8, ptr addrspace(3) %391, i32 4, !dbg !39
  %394 = load float, ptr addrspace(3) %393, align 4, !dbg !39
  %395 = getelementptr inbounds i8, ptr addrspace(3) %391, i32 8, !dbg !39
  %396 = load float, ptr addrspace(3) %395, align 8, !dbg !39
  %397 = getelementptr inbounds i8, ptr addrspace(3) %391, i32 12, !dbg !39
  %398 = load float, ptr addrspace(3) %397, align 4, !dbg !39
  %399 = fmul float %208, %242, !dbg !40
  %400 = fmul float %209, %244, !dbg !40
  %401 = fmul float %210, %246, !dbg !40
  %402 = fmul float %211, %248, !dbg !40
  %403 = fmul float %217, %242, !dbg !40
  %404 = fmul float %218, %244, !dbg !40
  %405 = fmul float %219, %246, !dbg !40
  %406 = fmul float %220, %248, !dbg !40
  %407 = fmul float %226, %242, !dbg !40
  %408 = fmul float %227, %244, !dbg !40
  %409 = fmul float %228, %246, !dbg !40
  %410 = fmul float %229, %248, !dbg !40
  %411 = fmul float %235, %242, !dbg !40
  %412 = fmul float %236, %244, !dbg !40
  %413 = fmul float %237, %246, !dbg !40
  %414 = fmul float %238, %248, !dbg !40
  %415 = fadd float %399, %168, !dbg !41
  %416 = fadd float %400, %169, !dbg !41
  %417 = fadd float %401, %170, !dbg !41
  %418 = fadd float %402, %171, !dbg !41
  %419 = fadd float %403, %177, !dbg !41
  %420 = fadd float %404, %178, !dbg !41
  %421 = fadd float %405, %179, !dbg !41
  %422 = fadd float %406, %180, !dbg !41
  %423 = fadd float %407, %186, !dbg !41
  %424 = fadd float %408, %187, !dbg !41
  %425 = fadd float %409, %188, !dbg !41
  %426 = fadd float %410, %189, !dbg !41
  %427 = fadd float %411, %195, !dbg !41
  %428 = fadd float %412, %196, !dbg !41
  %429 = fadd float %413, %197, !dbg !41
  %430 = fadd float %414, %198, !dbg !41
  %431 = fadd float %415, %356, !dbg !42
  %432 = fadd float %416, %358, !dbg !42
  %433 = fadd float %417, %360, !dbg !42
  %434 = fadd float %418, %362, !dbg !42
  %435 = fadd float %419, %368, !dbg !42
  %436 = fadd float %420, %370, !dbg !42
  %437 = fadd float %421, %372, !dbg !42
  %438 = fadd float %422, %374, !dbg !42
  %439 = fadd float %423, %380, !dbg !42
  %440 = fadd float %424, %382, !dbg !42
  %441 = fadd float %425, %384, !dbg !42
  %442 = fadd float %426, %386, !dbg !42
  %443 = fadd float %427, %392, !dbg !42
  %444 = fadd float %428, %394, !dbg !42
  %445 = fadd float %429, %396, !dbg !42
  %446 = fadd float %430, %398, !dbg !42
  %447 = getelementptr float, ptr addrspace(1) %5, i64 %61, !dbg !43
  %448 = getelementptr float, ptr addrspace(1) %5, i64 %63, !dbg !43
  %449 = getelementptr float, ptr addrspace(1) %5, i64 %65, !dbg !43
  %450 = getelementptr float, ptr addrspace(1) %5, i64 %67, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %451 = shl i32 %11, 9, !dbg !44
  %452 = and i32 %451, 3584, !dbg !44
  %453 = or disjoint i32 %37, %452, !dbg !44
  %454 = or disjoint i32 %453, %35, !dbg !44
  %455 = lshr exact i32 %452, 5, !dbg !44
  %456 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %455, !dbg !44
  %457 = getelementptr float, ptr addrspace(3) %456, i32 %454, !dbg !44
  %458 = bitcast float %431 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %457, <1 x i32> %458, i1 true) #2, !dbg !44
  %459 = or disjoint i32 %454, 128, !dbg !44
  %460 = lshr i32 %459, 7, !dbg !44
  %461 = getelementptr float, ptr addrspace(3) @global_smem, i32 %460, !dbg !44
  %462 = getelementptr float, ptr addrspace(3) %461, i32 %459, !dbg !44
  %463 = bitcast float %432 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %462, <1 x i32> %463, i1 true) #2, !dbg !44
  %464 = or disjoint i32 %454, 256, !dbg !44
  %465 = lshr i32 %464, 7, !dbg !44
  %466 = getelementptr float, ptr addrspace(3) @global_smem, i32 %465, !dbg !44
  %467 = getelementptr float, ptr addrspace(3) %466, i32 %464, !dbg !44
  %468 = bitcast float %433 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %467, <1 x i32> %468, i1 true) #2, !dbg !44
  %469 = or disjoint i32 %454, 384, !dbg !44
  %470 = lshr i32 %469, 7, !dbg !44
  %471 = getelementptr float, ptr addrspace(3) @global_smem, i32 %470, !dbg !44
  %472 = getelementptr float, ptr addrspace(3) %471, i32 %469, !dbg !44
  %473 = bitcast float %434 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %472, <1 x i32> %473, i1 true) #2, !dbg !44
  %474 = or disjoint i32 %454, 32, !dbg !44
  %475 = getelementptr float, ptr addrspace(3) %456, i32 %474, !dbg !44
  %476 = bitcast float %435 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %475, <1 x i32> %476, i1 true) #2, !dbg !44
  %477 = or disjoint i32 %454, 160, !dbg !44
  %478 = lshr i32 %477, 7, !dbg !44
  %479 = getelementptr float, ptr addrspace(3) @global_smem, i32 %478, !dbg !44
  %480 = getelementptr float, ptr addrspace(3) %479, i32 %477, !dbg !44
  %481 = bitcast float %436 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %480, <1 x i32> %481, i1 true) #2, !dbg !44
  %482 = or disjoint i32 %454, 288, !dbg !44
  %483 = lshr i32 %482, 7, !dbg !44
  %484 = getelementptr float, ptr addrspace(3) @global_smem, i32 %483, !dbg !44
  %485 = getelementptr float, ptr addrspace(3) %484, i32 %482, !dbg !44
  %486 = bitcast float %437 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %485, <1 x i32> %486, i1 true) #2, !dbg !44
  %487 = or disjoint i32 %454, 416, !dbg !44
  %488 = lshr i32 %487, 7, !dbg !44
  %489 = getelementptr float, ptr addrspace(3) @global_smem, i32 %488, !dbg !44
  %490 = getelementptr float, ptr addrspace(3) %489, i32 %487, !dbg !44
  %491 = bitcast float %438 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %490, <1 x i32> %491, i1 true) #2, !dbg !44
  %492 = or disjoint i32 %454, 64, !dbg !44
  %493 = getelementptr float, ptr addrspace(3) %456, i32 %492, !dbg !44
  %494 = bitcast float %439 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %493, <1 x i32> %494, i1 true) #2, !dbg !44
  %495 = or disjoint i32 %454, 192, !dbg !44
  %496 = lshr i32 %495, 7, !dbg !44
  %497 = getelementptr float, ptr addrspace(3) @global_smem, i32 %496, !dbg !44
  %498 = getelementptr float, ptr addrspace(3) %497, i32 %495, !dbg !44
  %499 = bitcast float %440 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %498, <1 x i32> %499, i1 true) #2, !dbg !44
  %500 = or disjoint i32 %454, 320, !dbg !44
  %501 = lshr i32 %500, 7, !dbg !44
  %502 = getelementptr float, ptr addrspace(3) @global_smem, i32 %501, !dbg !44
  %503 = getelementptr float, ptr addrspace(3) %502, i32 %500, !dbg !44
  %504 = bitcast float %441 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %503, <1 x i32> %504, i1 true) #2, !dbg !44
  %505 = or disjoint i32 %454, 448, !dbg !44
  %506 = lshr i32 %505, 7, !dbg !44
  %507 = getelementptr float, ptr addrspace(3) @global_smem, i32 %506, !dbg !44
  %508 = getelementptr float, ptr addrspace(3) %507, i32 %505, !dbg !44
  %509 = bitcast float %442 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %508, <1 x i32> %509, i1 true) #2, !dbg !44
  %510 = or disjoint i32 %454, 96, !dbg !44
  %511 = getelementptr float, ptr addrspace(3) %456, i32 %510, !dbg !44
  %512 = bitcast float %443 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %511, <1 x i32> %512, i1 true) #2, !dbg !44
  %513 = or disjoint i32 %454, 224, !dbg !44
  %514 = lshr i32 %513, 7, !dbg !44
  %515 = getelementptr float, ptr addrspace(3) @global_smem, i32 %514, !dbg !44
  %516 = getelementptr float, ptr addrspace(3) %515, i32 %513, !dbg !44
  %517 = bitcast float %444 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %516, <1 x i32> %517, i1 true) #2, !dbg !44
  %518 = or disjoint i32 %454, 352, !dbg !44
  %519 = lshr i32 %518, 7, !dbg !44
  %520 = getelementptr float, ptr addrspace(3) @global_smem, i32 %519, !dbg !44
  %521 = getelementptr float, ptr addrspace(3) %520, i32 %518, !dbg !44
  %522 = bitcast float %445 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %521, <1 x i32> %522, i1 true) #2, !dbg !44
  %523 = or disjoint i32 %454, 480, !dbg !44
  %524 = lshr i32 %523, 7, !dbg !44
  %525 = getelementptr float, ptr addrspace(3) @global_smem, i32 %524, !dbg !44
  %526 = getelementptr float, ptr addrspace(3) %525, i32 %523, !dbg !44
  %527 = bitcast float %446 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %526, <1 x i32> %527, i1 true) #2, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %528 = lshr i32 %269, 7, !dbg !44
  %529 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %528, !dbg !44
  %530 = getelementptr inbounds float, ptr addrspace(3) %529, i32 %269, !dbg !44
  %531 = load i32, ptr addrspace(3) %530, align 4, !dbg !44
  %532 = or disjoint i32 %269, 1, !dbg !44
  %533 = getelementptr inbounds float, ptr addrspace(3) %529, i32 %532, !dbg !44
  %534 = load i32, ptr addrspace(3) %533, align 4, !dbg !44
  %535 = or disjoint i32 %269, 2, !dbg !44
  %536 = getelementptr inbounds float, ptr addrspace(3) %529, i32 %535, !dbg !44
  %537 = load i32, ptr addrspace(3) %536, align 4, !dbg !44
  %538 = or disjoint i32 %269, 3, !dbg !44
  %539 = getelementptr inbounds float, ptr addrspace(3) %529, i32 %538, !dbg !44
  %540 = load i32, ptr addrspace(3) %539, align 4, !dbg !44
  %541 = lshr i32 %363, 7, !dbg !44
  %542 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %541, !dbg !44
  %543 = getelementptr inbounds float, ptr addrspace(3) %542, i32 %363, !dbg !44
  %544 = load i32, ptr addrspace(3) %543, align 4, !dbg !44
  %545 = or disjoint i32 %269, 1025, !dbg !44
  %546 = lshr i32 %545, 7, !dbg !44
  %547 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %546, !dbg !44
  %548 = getelementptr inbounds float, ptr addrspace(3) %547, i32 %545, !dbg !44
  %549 = load i32, ptr addrspace(3) %548, align 4, !dbg !44
  %550 = or disjoint i32 %269, 1026, !dbg !44
  %551 = lshr i32 %550, 7, !dbg !44
  %552 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %551, !dbg !44
  %553 = getelementptr inbounds float, ptr addrspace(3) %552, i32 %550, !dbg !44
  %554 = load i32, ptr addrspace(3) %553, align 4, !dbg !44
  %555 = or disjoint i32 %269, 1027, !dbg !44
  %556 = lshr i32 %555, 7, !dbg !44
  %557 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %556, !dbg !44
  %558 = getelementptr inbounds float, ptr addrspace(3) %557, i32 %555, !dbg !44
  %559 = load i32, ptr addrspace(3) %558, align 4, !dbg !44
  %560 = lshr i32 %375, 7, !dbg !44
  %561 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %560, !dbg !44
  %562 = getelementptr inbounds float, ptr addrspace(3) %561, i32 %375, !dbg !44
  %563 = load i32, ptr addrspace(3) %562, align 4, !dbg !44
  %564 = or disjoint i32 %269, 2049, !dbg !44
  %565 = lshr i32 %564, 7, !dbg !44
  %566 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %565, !dbg !44
  %567 = getelementptr inbounds float, ptr addrspace(3) %566, i32 %564, !dbg !44
  %568 = load i32, ptr addrspace(3) %567, align 4, !dbg !44
  %569 = or disjoint i32 %269, 2050, !dbg !44
  %570 = lshr i32 %569, 7, !dbg !44
  %571 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %570, !dbg !44
  %572 = getelementptr inbounds float, ptr addrspace(3) %571, i32 %569, !dbg !44
  %573 = load i32, ptr addrspace(3) %572, align 4, !dbg !44
  %574 = or disjoint i32 %269, 2051, !dbg !44
  %575 = lshr i32 %574, 7, !dbg !44
  %576 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %575, !dbg !44
  %577 = getelementptr inbounds float, ptr addrspace(3) %576, i32 %574, !dbg !44
  %578 = load i32, ptr addrspace(3) %577, align 4, !dbg !44
  %579 = lshr i32 %387, 7, !dbg !44
  %580 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %579, !dbg !44
  %581 = getelementptr inbounds float, ptr addrspace(3) %580, i32 %387, !dbg !44
  %582 = load i32, ptr addrspace(3) %581, align 4, !dbg !44
  %583 = or disjoint i32 %269, 3073, !dbg !44
  %584 = lshr i32 %583, 7, !dbg !44
  %585 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %584, !dbg !44
  %586 = getelementptr inbounds float, ptr addrspace(3) %585, i32 %583, !dbg !44
  %587 = load i32, ptr addrspace(3) %586, align 4, !dbg !44
  %588 = or disjoint i32 %269, 3074, !dbg !44
  %589 = lshr i32 %588, 7, !dbg !44
  %590 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %589, !dbg !44
  %591 = getelementptr inbounds float, ptr addrspace(3) %590, i32 %588, !dbg !44
  %592 = load i32, ptr addrspace(3) %591, align 4, !dbg !44
  %593 = or disjoint i32 %269, 3075, !dbg !44
  %594 = lshr i32 %593, 7, !dbg !44
  %595 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %594, !dbg !44
  %596 = getelementptr inbounds float, ptr addrspace(3) %595, i32 %593, !dbg !44
  %597 = load i32, ptr addrspace(3) %596, align 4, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %531, i32 %534, i32 %537, i32 %540, ptr addrspace(1) %447, i1 %44) #2, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %544, i32 %549, i32 %554, i32 %559, ptr addrspace(1) %448, i1 %44) #2, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %563, i32 %568, i32 %573, i32 %578, ptr addrspace(1) %449, i1 %44) #2, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %582, i32 %587, i32 %592, i32 %597, ptr addrspace(1) %450, i1 %44) #2, !dbg !44
  ret void, !dbg !45
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cjp3nejrw3berdc4jtalvvuvyiounrucgcf5gdphvissk4u26rjo.py", directory: "inductor_cache/jp")
!4 = !{ptr @triton_poi_fused_add_mul_11, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_mul_11, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_mul_11", linkageName: "triton_poi_fused_add_mul_11", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 31, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 21, scope: !7)
!22 = !DILocation(line: 32, column: 27, scope: !7)
!23 = !DILocation(line: 33, column: 39, scope: !7)
!24 = !DILocation(line: 33, column: 35, scope: !7)
!25 = !DILocation(line: 33, column: 30, scope: !7)
!26 = !DILocation(line: 33, column: 44, scope: !7)
!27 = !DILocation(line: 34, column: 30, scope: !7)
!28 = !DILocation(line: 34, column: 44, scope: !7)
!29 = !DILocation(line: 35, column: 39, scope: !7)
!30 = !DILocation(line: 35, column: 50, scope: !7)
!31 = !DILocation(line: 35, column: 35, scope: !7)
!32 = !DILocation(line: 35, column: 44, scope: !7)
!33 = !DILocation(line: 35, column: 30, scope: !7)
!34 = !DILocation(line: 35, column: 55, scope: !7)
!35 = !DILocation(line: 36, column: 30, scope: !7)
!36 = !DILocation(line: 36, column: 55, scope: !7)
!37 = !DILocation(line: 37, column: 30, scope: !7)
!38 = !DILocation(line: 37, column: 35, scope: !7)
!39 = !DILocation(line: 38, column: 18, scope: !7)
!40 = !DILocation(line: 39, column: 18, scope: !7)
!41 = !DILocation(line: 40, column: 18, scope: !7)
!42 = !DILocation(line: 41, column: 18, scope: !7)
!43 = !DILocation(line: 42, column: 25, scope: !7)
!44 = !DILocation(line: 42, column: 45, scope: !7)
!45 = !DILocation(line: 42, column: 4, scope: !7)
