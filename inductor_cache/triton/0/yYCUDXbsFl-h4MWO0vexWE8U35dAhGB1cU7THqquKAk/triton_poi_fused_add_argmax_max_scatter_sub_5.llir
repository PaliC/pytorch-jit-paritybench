; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_add_argmax_max_scatter_sub_5(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %6 = shl i32 %5, 6, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 1, !dbg !12
  %9 = and i32 %8, 62, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = icmp slt i32 %10, 64, !dbg !14
  %.frozen = freeze i32 %10, !dbg !15
  %12 = sdiv i32 %.frozen, 16, !dbg !15
  %13 = mul i32 %12, 16, !dbg !16
  %.decomposed = sub i32 %.frozen, %13, !dbg !16
  %14 = shl i32 %12, 6, !dbg !17
  %15 = add i32 %14, %.decomposed, !dbg !18
  %16 = sext i32 %15 to i64, !dbg !19
  %17 = getelementptr float, ptr addrspace(1) %0, i64 %16, !dbg !19
  %18 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %17, i1 %11) #1, !dbg !20
  %19 = extractvalue { i32, i32 } %18, 0, !dbg !20
  %20 = extractvalue { i32, i32 } %18, 1, !dbg !20
  %21 = add i32 %15, 16, !dbg !21
  %22 = sext i32 %21 to i64, !dbg !22
  %23 = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !22
  %24 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %23, i1 %11) #1, !dbg !23
  %25 = extractvalue { i32, i32 } %24, 0, !dbg !23
  %26 = extractvalue { i32, i32 } %24, 1, !dbg !23
  %27 = add i32 %15, 32, !dbg !24
  %28 = sext i32 %27 to i64, !dbg !25
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !25
  %30 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %29, i1 %11) #1, !dbg !26
  %31 = extractvalue { i32, i32 } %30, 0, !dbg !26
  %32 = extractvalue { i32, i32 } %30, 1, !dbg !26
  %33 = add i32 %15, 48, !dbg !27
  %34 = sext i32 %33 to i64, !dbg !28
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !28
  %36 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %35, i1 %11) #1, !dbg !29
  %37 = extractvalue { i32, i32 } %36, 0, !dbg !29
  %38 = extractvalue { i32, i32 } %36, 1, !dbg !29
  %39 = insertelement <8 x i32> poison, i32 %38, i64 0, !dbg !29
  %40 = insertelement <8 x i32> %39, i32 %37, i64 1, !dbg !29
  %41 = insertelement <8 x i32> %40, i32 %32, i64 2, !dbg !29
  %42 = insertelement <8 x i32> %41, i32 %31, i64 3, !dbg !29
  %43 = insertelement <8 x i32> %42, i32 %26, i64 4, !dbg !29
  %44 = insertelement <8 x i32> %43, i32 %25, i64 5, !dbg !29
  %45 = insertelement <8 x i32> %44, i32 %20, i64 6, !dbg !29
  %46 = insertelement <8 x i32> %45, i32 %19, i64 7, !dbg !29
  %47 = bitcast <8 x i32> %46 to <8 x float>, !dbg !29
  %48 = bitcast i32 %25 to float, !dbg !30
  %49 = bitcast i32 %19 to float, !dbg !30
  %50 = fcmp ogt float %49, %48, !dbg !30
  %51 = bitcast i32 %26 to float, !dbg !30
  %52 = bitcast i32 %20 to float, !dbg !30
  %53 = fcmp ogt float %52, %51, !dbg !30
  %54 = fcmp oeq float %49, %48, !dbg !31
  %55 = fcmp oeq float %52, %51, !dbg !31
  %56 = fcmp uno float %49, 0.000000e+00, !dbg !32
  %57 = fcmp uno float %52, 0.000000e+00, !dbg !32
  %58 = fcmp uno float %48, 0.000000e+00, !dbg !33
  %59 = fcmp uno float %51, 0.000000e+00, !dbg !33
  %60 = xor i1 %58, true, !dbg !34
  %61 = and i1 %56, %60, !dbg !34
  %62 = xor i1 %59, true, !dbg !34
  %63 = and i1 %57, %62, !dbg !34
  %64 = insertelement <2 x i1> poison, i1 %53, i64 0, !dbg !35
  %65 = insertelement <2 x i1> %64, i1 %50, i64 1, !dbg !35
  %66 = insertelement <2 x i1> poison, i1 %63, i64 0, !dbg !35
  %67 = insertelement <2 x i1> %66, i1 %61, i64 1, !dbg !35
  %68 = or <2 x i1> %65, %67, !dbg !35
  %69 = and i1 %56, %58, !dbg !36
  %70 = and i1 %57, %59, !dbg !36
  %71 = insertelement <2 x i1> poison, i1 %55, i64 0, !dbg !37
  %72 = insertelement <2 x i1> %71, i1 %54, i64 1, !dbg !37
  %73 = insertelement <2 x i1> poison, i1 %70, i64 0, !dbg !37
  %74 = insertelement <2 x i1> %73, i1 %69, i64 1, !dbg !37
  %75 = or <2 x i1> %72, %74, !dbg !37
  %76 = or <2 x i1> %68, %75, !dbg !38
  %77 = shufflevector <8 x float> %47, <8 x float> poison, <2 x i32> <i32 6, i32 7>, !dbg !39
  %78 = shufflevector <8 x float> %47, <8 x float> poison, <2 x i32> <i32 4, i32 5>, !dbg !39
  %79 = select <2 x i1> %76, <2 x float> %77, <2 x float> %78, !dbg !39
  %80 = xor <2 x i1> %76, splat (i1 true), !dbg !40
  %81 = zext <2 x i1> %80 to <2 x i8>, !dbg !40
  %82 = shufflevector <8 x float> %47, <8 x float> poison, <2 x i32> <i32 2, i32 3>, !dbg !41
  %83 = fcmp ogt <2 x float> %79, %82, !dbg !41
  %84 = fcmp oeq <2 x float> %79, %82, !dbg !42
  %85 = fcmp uno <2 x float> %79, zeroinitializer, !dbg !43
  %86 = fcmp uno <2 x float> %82, zeroinitializer, !dbg !44
  %87 = xor <2 x i1> %86, splat (i1 true), !dbg !45
  %88 = and <2 x i1> %85, %87, !dbg !45
  %89 = or <2 x i1> %83, %88, !dbg !46
  %90 = and <2 x i1> %86, %85, !dbg !47
  %91 = or <2 x i1> %84, %90, !dbg !48
  %92 = or <2 x i1> %89, %91, !dbg !49
  %93 = select <2 x i1> %92, <2 x float> %79, <2 x float> %82, !dbg !50
  %94 = select <2 x i1> %92, <2 x i8> %81, <2 x i8> splat (i8 2), !dbg !51
  %95 = shufflevector <8 x float> %47, <8 x float> poison, <2 x i32> <i32 0, i32 1>, !dbg !52
  %96 = fcmp ogt <2 x float> %93, %95, !dbg !52
  %97 = fcmp oeq <2 x float> %93, %95, !dbg !53
  %98 = fcmp uno <2 x float> %93, zeroinitializer, !dbg !54
  %99 = fcmp uno <2 x float> %95, zeroinitializer, !dbg !55
  %100 = xor <2 x i1> %99, splat (i1 true), !dbg !56
  %101 = and <2 x i1> %98, %100, !dbg !56
  %102 = or <2 x i1> %96, %101, !dbg !57
  %103 = and <2 x i1> %99, %98, !dbg !58
  %104 = or <2 x i1> %97, %103, !dbg !59
  %105 = or <2 x i1> %102, %104, !dbg !60
  %106 = select <2 x i1> %105, <2 x i8> %94, <2 x i8> splat (i8 3), !dbg !61
  %107 = shufflevector <2 x i8> %106, <2 x i8> poison, <4 x i32> <i32 0, i32 1, i32 0, i32 1>, !dbg !61
  %108 = icmp eq <4 x i8> %107, <i8 1, i8 1, i8 0, i8 0>, !dbg !62
  %109 = icmp eq <2 x i8> %106, splat (i8 2), !dbg !63
  %110 = shufflevector <2 x i1> %109, <2 x i1> poison, <8 x i32> <i32 poison, i32 poison, i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !64
  %111 = shufflevector <4 x i1> %108, <4 x i1> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !64
  %112 = shufflevector <8 x i1> %110, <8 x i1> %111, <8 x i32> <i32 poison, i32 poison, i32 2, i32 3, i32 8, i32 9, i32 10, i32 11>, !dbg !64
  %113 = shufflevector <2 x i1> %105, <2 x i1> poison, <8 x i32> <i32 0, i32 1, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !64
  %114 = shufflevector <8 x i1> %113, <8 x i1> %112, <8 x i32> <i32 0, i32 1, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15>, !dbg !64
  %115 = select <8 x i1> %114, <8 x float> <float 0.000000e+00, float 0.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00>, <8 x float> <float 1.000000e+00, float 1.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00, float 0.000000e+00>, !dbg !64
  %116 = fsub <8 x float> %115, %47, !dbg !65
  %117 = fadd <8 x float> %116, %47, !dbg !66
  %118 = extractelement <8 x float> %117, i64 5, !dbg !67
  %119 = extractelement <8 x float> %117, i64 7, !dbg !67
  %120 = fcmp ogt float %119, %118, !dbg !68
  %121 = extractelement <8 x float> %117, i64 4, !dbg !67
  %122 = extractelement <8 x float> %117, i64 6, !dbg !67
  %123 = fcmp ogt float %122, %121, !dbg !68
  %124 = fcmp oeq float %119, %118, !dbg !69
  %125 = fcmp oeq float %122, %121, !dbg !69
  %126 = fcmp uno <8 x float> %117, zeroinitializer, !dbg !70
  %127 = extractelement <8 x i1> %126, i64 5, !dbg !71
  %128 = xor i1 %127, true, !dbg !71
  %129 = extractelement <8 x i1> %126, i64 7, !dbg !71
  %130 = and i1 %129, %128, !dbg !71
  %131 = extractelement <8 x i1> %126, i64 4, !dbg !71
  %132 = xor i1 %131, true, !dbg !71
  %133 = extractelement <8 x i1> %126, i64 6, !dbg !71
  %134 = and i1 %133, %132, !dbg !71
  %135 = or i1 %120, %130, !dbg !72
  %136 = or i1 %123, %134, !dbg !72
  %137 = and i1 %129, %127, !dbg !73
  %138 = and i1 %133, %131, !dbg !73
  %139 = or i1 %124, %137, !dbg !74
  %140 = or i1 %125, %138, !dbg !74
  %141 = or i1 %135, %139, !dbg !75
  %142 = or i1 %136, %140, !dbg !75
  %143 = select i1 %141, float %119, float %118, !dbg !67
  %144 = select i1 %142, float %122, float %121, !dbg !67
  %not.2 = xor i1 %141, true, !dbg !76
  %145 = zext i1 %not.2 to i64, !dbg !76
  %not.3 = xor i1 %142, true, !dbg !76
  %146 = zext i1 %not.3 to i64, !dbg !76
  %147 = extractelement <8 x float> %117, i64 3, !dbg !77
  %148 = fcmp ogt float %143, %147, !dbg !78
  %149 = extractelement <8 x float> %117, i64 2, !dbg !77
  %150 = fcmp ogt float %144, %149, !dbg !78
  %151 = fcmp oeq float %143, %147, !dbg !79
  %152 = fcmp oeq float %144, %149, !dbg !79
  %153 = fcmp uno float %143, 0.000000e+00, !dbg !80
  %154 = fcmp uno float %144, 0.000000e+00, !dbg !80
  %155 = extractelement <8 x i1> %126, i64 3, !dbg !81
  %156 = xor i1 %155, true, !dbg !81
  %157 = and i1 %153, %156, !dbg !81
  %158 = extractelement <8 x i1> %126, i64 2, !dbg !81
  %159 = xor i1 %158, true, !dbg !81
  %160 = and i1 %154, %159, !dbg !81
  %161 = or i1 %148, %157, !dbg !82
  %162 = or i1 %150, %160, !dbg !82
  %163 = and i1 %155, %153, !dbg !83
  %164 = and i1 %158, %154, !dbg !83
  %165 = or i1 %151, %163, !dbg !84
  %166 = or i1 %152, %164, !dbg !84
  %167 = or i1 %161, %165, !dbg !85
  %168 = or i1 %162, %166, !dbg !85
  %169 = select i1 %167, float %143, float %147, !dbg !77
  %170 = select i1 %168, float %144, float %149, !dbg !77
  %171 = select i1 %167, i64 %145, i64 2, !dbg !86
  %172 = select i1 %168, i64 %146, i64 2, !dbg !86
  %173 = extractelement <8 x float> %117, i64 1, !dbg !87
  %174 = fcmp ogt float %169, %173, !dbg !88
  %175 = extractelement <8 x float> %117, i64 0, !dbg !87
  %176 = fcmp ogt float %170, %175, !dbg !88
  %177 = fcmp oeq float %169, %173, !dbg !87
  %178 = fcmp oeq float %170, %175, !dbg !87
  %179 = fcmp uno float %169, 0.000000e+00, !dbg !89
  %180 = fcmp uno float %170, 0.000000e+00, !dbg !89
  %181 = extractelement <8 x i1> %126, i64 1, !dbg !90
  %182 = xor i1 %181, true, !dbg !90
  %183 = and i1 %179, %182, !dbg !90
  %184 = extractelement <8 x i1> %126, i64 0, !dbg !90
  %185 = xor i1 %184, true, !dbg !90
  %186 = and i1 %180, %185, !dbg !90
  %187 = or i1 %174, %183, !dbg !91
  %188 = or i1 %176, %186, !dbg !91
  %189 = and i1 %181, %179, !dbg !92
  %190 = and i1 %184, %180, !dbg !92
  %191 = or i1 %177, %189, !dbg !93
  %192 = or i1 %178, %190, !dbg !93
  %193 = or i1 %187, %191, !dbg !94
  %194 = or i1 %188, %192, !dbg !94
  %195 = select i1 %193, i64 %171, i64 3, !dbg !95
  %196 = select i1 %194, i64 %172, i64 3, !dbg !95
  %197 = sext i32 %10 to i64, !dbg !96
  %198 = getelementptr i64, ptr addrspace(1) %1, i64 %197, !dbg !96
  %199 = extractelement <2 x i8> %106, i64 0, !dbg !97
  %200 = zext nneg i8 %199 to i64, !dbg !97
  %201 = extractelement <2 x i8> %106, i64 1, !dbg !97
  %202 = zext nneg i8 %201 to i64, !dbg !97
  tail call void asm sideeffect "@$3 st.global.v2.b64 [ $2 + 0 ], { $0, $1 };", "l,l,l,b"(i64 %202, i64 %200, ptr addrspace(1) %198, i1 %11) #1, !dbg !97
  %203 = getelementptr i64, ptr addrspace(1) %2, i64 %197, !dbg !98
  tail call void asm sideeffect "@$3 st.global.v2.b64 [ $2 + 0 ], { $0, $1 };", "l,l,l,b"(i64 %195, i64 %196, ptr addrspace(1) %203, i1 %11) #1, !dbg !99
  ret void, !dbg !100
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cbvw55ep3iuww7mrywcuqagagkm5sjiinxizq7f23dcinnyr6nhx.py", directory: "inductor_cache/bv")
!4 = !{ptr @triton_poi_fused_add_argmax_max_scatter_sub_5, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_argmax_max_scatter_sub_5, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_argmax_max_scatter_sub_5", linkageName: "triton_poi_fused_add_argmax_max_scatter_sub_5", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 24, column: 19, scope: !7)
!17 = !DILocation(line: 27, column: 38, scope: !7)
!18 = !DILocation(line: 27, column: 35, scope: !7)
!19 = !DILocation(line: 27, column: 30, scope: !7)
!20 = !DILocation(line: 27, column: 43, scope: !7)
!21 = !DILocation(line: 28, column: 40, scope: !7)
!22 = !DILocation(line: 28, column: 30, scope: !7)
!23 = !DILocation(line: 28, column: 48, scope: !7)
!24 = !DILocation(line: 29, column: 41, scope: !7)
!25 = !DILocation(line: 29, column: 31, scope: !7)
!26 = !DILocation(line: 29, column: 49, scope: !7)
!27 = !DILocation(line: 30, column: 41, scope: !7)
!28 = !DILocation(line: 30, column: 31, scope: !7)
!29 = !DILocation(line: 30, column: 49, scope: !7)
!30 = !DILocation(line: 31, column: 18, scope: !7)
!31 = !DILocation(line: 32, column: 19, scope: !7)
!32 = !DILocation(line: 33, column: 19, scope: !7)
!33 = !DILocation(line: 34, column: 19, scope: !7)
!34 = !DILocation(line: 35, column: 18, scope: !7)
!35 = !DILocation(line: 36, column: 18, scope: !7)
!36 = !DILocation(line: 37, column: 18, scope: !7)
!37 = !DILocation(line: 38, column: 18, scope: !7)
!38 = !DILocation(line: 43, column: 19, scope: !7)
!39 = !DILocation(line: 44, column: 34, scope: !7)
!40 = !DILocation(line: 45, column: 35, scope: !7)
!41 = !DILocation(line: 46, column: 20, scope: !7)
!42 = !DILocation(line: 47, column: 21, scope: !7)
!43 = !DILocation(line: 48, column: 21, scope: !7)
!44 = !DILocation(line: 49, column: 21, scope: !7)
!45 = !DILocation(line: 50, column: 20, scope: !7)
!46 = !DILocation(line: 51, column: 20, scope: !7)
!47 = !DILocation(line: 52, column: 20, scope: !7)
!48 = !DILocation(line: 53, column: 20, scope: !7)
!49 = !DILocation(line: 57, column: 20, scope: !7)
!50 = !DILocation(line: 58, column: 35, scope: !7)
!51 = !DILocation(line: 59, column: 35, scope: !7)
!52 = !DILocation(line: 60, column: 20, scope: !7)
!53 = !DILocation(line: 61, column: 21, scope: !7)
!54 = !DILocation(line: 62, column: 21, scope: !7)
!55 = !DILocation(line: 63, column: 21, scope: !7)
!56 = !DILocation(line: 64, column: 20, scope: !7)
!57 = !DILocation(line: 65, column: 20, scope: !7)
!58 = !DILocation(line: 66, column: 20, scope: !7)
!59 = !DILocation(line: 67, column: 20, scope: !7)
!60 = !DILocation(line: 71, column: 20, scope: !7)
!61 = !DILocation(line: 73, column: 35, scope: !7)
!62 = !DILocation(line: 80, column: 21, scope: !7)
!63 = !DILocation(line: 96, column: 21, scope: !7)
!64 = !DILocation(line: 114, column: 35, scope: !7)
!65 = !DILocation(line: 115, column: 20, scope: !7)
!66 = !DILocation(line: 116, column: 20, scope: !7)
!67 = !DILocation(line: 94, column: 35, scope: !7)
!68 = !DILocation(line: 84, column: 20, scope: !7)
!69 = !DILocation(line: 85, column: 21, scope: !7)
!70 = !DILocation(line: 120, column: 21, scope: !7)
!71 = !DILocation(line: 88, column: 20, scope: !7)
!72 = !DILocation(line: 89, column: 20, scope: !7)
!73 = !DILocation(line: 90, column: 20, scope: !7)
!74 = !DILocation(line: 91, column: 20, scope: !7)
!75 = !DILocation(line: 93, column: 20, scope: !7)
!76 = !DILocation(line: 95, column: 35, scope: !7)
!77 = !DILocation(line: 111, column: 35, scope: !7)
!78 = !DILocation(line: 100, column: 20, scope: !7)
!79 = !DILocation(line: 101, column: 21, scope: !7)
!80 = !DILocation(line: 102, column: 21, scope: !7)
!81 = !DILocation(line: 104, column: 20, scope: !7)
!82 = !DILocation(line: 105, column: 20, scope: !7)
!83 = !DILocation(line: 106, column: 20, scope: !7)
!84 = !DILocation(line: 107, column: 20, scope: !7)
!85 = !DILocation(line: 110, column: 20, scope: !7)
!86 = !DILocation(line: 112, column: 35, scope: !7)
!87 = !DILocation(line: 118, column: 21, scope: !7)
!88 = !DILocation(line: 117, column: 20, scope: !7)
!89 = !DILocation(line: 119, column: 21, scope: !7)
!90 = !DILocation(line: 121, column: 20, scope: !7)
!91 = !DILocation(line: 122, column: 20, scope: !7)
!92 = !DILocation(line: 123, column: 20, scope: !7)
!93 = !DILocation(line: 124, column: 20, scope: !7)
!94 = !DILocation(line: 127, column: 21, scope: !7)
!95 = !DILocation(line: 129, column: 37, scope: !7)
!96 = !DILocation(line: 130, column: 25, scope: !7)
!97 = !DILocation(line: 130, column: 37, scope: !7)
!98 = !DILocation(line: 131, column: 25, scope: !7)
!99 = !DILocation(line: 131, column: 38, scope: !7)
!100 = !DILocation(line: 131, column: 4, scope: !7)
