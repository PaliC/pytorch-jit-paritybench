; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_23(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %11 = shl i32 %10, 6, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = lshr i32 %12, 1, !dbg !12
  %14 = and i32 %13, 63, !dbg !12
  %15 = and i32 %12, 1, !dbg !12
  %16 = shl nuw nsw i32 %15, 2, !dbg !12
  %17 = or disjoint i32 %11, %14, !dbg !13
  %18 = icmp slt i32 %17, 64, !dbg !14
  %19 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %20 = shl i32 %19, 3, !dbg !16
  %21 = or disjoint i32 %20, %16, !dbg !17
  %22 = icmp slt i32 %21, 1024, !dbg !18
  %23 = shl i32 %17, 10, !dbg !19
  %24 = add i32 %21, %23, !dbg !20
  %25 = sext i32 %24 to i64, !dbg !21
  %26 = getelementptr float, ptr addrspace(1) %0, i64 %25, !dbg !21
  %27 = and i1 %18, %22, !dbg !22
  %28 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %26, i1 %27) #4, !dbg !23
  %29 = sext i32 %21 to i64, !dbg !24
  %30 = getelementptr float, ptr addrspace(1) %1, i64 %29, !dbg !24
  %31 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %30, i1 %22) #4, !dbg !25
  %32 = getelementptr float, ptr addrspace(1) %2, i64 %29, !dbg !26
  %33 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %32, i1 %22) #4, !dbg !27
  %34 = extractvalue { i32, i32, i32, i32 } %33, 0, !dbg !27
  %35 = extractvalue { i32, i32, i32, i32 } %33, 1, !dbg !27
  %36 = extractvalue { i32, i32, i32, i32 } %33, 2, !dbg !27
  %37 = extractvalue { i32, i32, i32, i32 } %33, 3, !dbg !27
  %38 = bitcast i32 %34 to float, !dbg !27
  %39 = bitcast i32 %35 to float, !dbg !27
  %40 = bitcast i32 %36 to float, !dbg !27
  %41 = bitcast i32 %37 to float, !dbg !27
  %42 = getelementptr float, ptr addrspace(1) %3, i64 %29, !dbg !28
  %43 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %42, i1 %22) #4, !dbg !29
  %44 = getelementptr float, ptr addrspace(1) %4, i64 %29, !dbg !30
  %45 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %44, i1 %22) #4, !dbg !31
  %46 = getelementptr float, ptr addrspace(1) %5, i64 %25, !dbg !32
  %47 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %46, i1 %27) #4, !dbg !33
  %48 = fadd float %38, 0x3EE4F8B580000000, !dbg !34
  %49 = fadd float %39, 0x3EE4F8B580000000, !dbg !34
  %50 = fadd float %40, 0x3EE4F8B580000000, !dbg !34
  %51 = fadd float %41, 0x3EE4F8B580000000, !dbg !34
  %52 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i = icmp eq i32 %52, 0, !dbg !35
  %53 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i = icmp eq i32 %53, 0, !dbg !35
  br i1 %.not.i, label %59, label %54, !dbg !35

54:                                               ; preds = %9
  br i1 %.not1.i, label %57, label %55, !dbg !35

55:                                               ; preds = %54
  %56 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %48) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

57:                                               ; preds = %54
  %58 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %48) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

59:                                               ; preds = %9
  br i1 %.not1.i, label %62, label %60, !dbg !35

60:                                               ; preds = %59
  %61 = tail call float @llvm.nvvm.sqrt.rn.f(float %48) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

62:                                               ; preds = %59
  %63 = tail call float @llvm.nvvm.sqrt.approx.f(float %48) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

__nv_sqrtf.exit:                                  ; preds = %55, %57, %60, %62
  %.0.i = phi float [ %56, %55 ], [ %58, %57 ], [ %61, %60 ], [ %63, %62 ], !dbg !35
  %64 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i9 = icmp eq i32 %64, 0, !dbg !35
  %65 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i12 = icmp eq i32 %65, 0, !dbg !35
  br i1 %.not.i9, label %71, label %66, !dbg !35

66:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i12, label %69, label %67, !dbg !35

67:                                               ; preds = %66
  %68 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %49) #4, !dbg !35
  br label %__nv_sqrtf.exit13, !dbg !35

69:                                               ; preds = %66
  %70 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %49) #4, !dbg !35
  br label %__nv_sqrtf.exit13, !dbg !35

71:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i12, label %74, label %72, !dbg !35

72:                                               ; preds = %71
  %73 = tail call float @llvm.nvvm.sqrt.rn.f(float %49) #4, !dbg !35
  br label %__nv_sqrtf.exit13, !dbg !35

74:                                               ; preds = %71
  %75 = tail call float @llvm.nvvm.sqrt.approx.f(float %49) #4, !dbg !35
  br label %__nv_sqrtf.exit13, !dbg !35

__nv_sqrtf.exit13:                                ; preds = %67, %69, %72, %74
  %.0.i11 = phi float [ %68, %67 ], [ %70, %69 ], [ %73, %72 ], [ %75, %74 ], !dbg !35
  %76 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i14 = icmp eq i32 %76, 0, !dbg !35
  %77 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i17 = icmp eq i32 %77, 0, !dbg !35
  br i1 %.not.i14, label %83, label %78, !dbg !35

78:                                               ; preds = %__nv_sqrtf.exit13
  br i1 %.not1.i17, label %81, label %79, !dbg !35

79:                                               ; preds = %78
  %80 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %50) #4, !dbg !35
  br label %__nv_sqrtf.exit18, !dbg !35

81:                                               ; preds = %78
  %82 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %50) #4, !dbg !35
  br label %__nv_sqrtf.exit18, !dbg !35

83:                                               ; preds = %__nv_sqrtf.exit13
  br i1 %.not1.i17, label %86, label %84, !dbg !35

84:                                               ; preds = %83
  %85 = tail call float @llvm.nvvm.sqrt.rn.f(float %50) #4, !dbg !35
  br label %__nv_sqrtf.exit18, !dbg !35

86:                                               ; preds = %83
  %87 = tail call float @llvm.nvvm.sqrt.approx.f(float %50) #4, !dbg !35
  br label %__nv_sqrtf.exit18, !dbg !35

__nv_sqrtf.exit18:                                ; preds = %79, %81, %84, %86
  %.0.i16 = phi float [ %80, %79 ], [ %82, %81 ], [ %85, %84 ], [ %87, %86 ], !dbg !35
  %88 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i19 = icmp eq i32 %88, 0, !dbg !35
  %89 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i22 = icmp eq i32 %89, 0, !dbg !35
  br i1 %.not.i19, label %95, label %90, !dbg !35

90:                                               ; preds = %__nv_sqrtf.exit18
  br i1 %.not1.i22, label %93, label %91, !dbg !35

91:                                               ; preds = %90
  %92 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %51) #4, !dbg !35
  br label %__nv_sqrtf.exit23, !dbg !35

93:                                               ; preds = %90
  %94 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %51) #4, !dbg !35
  br label %__nv_sqrtf.exit23, !dbg !35

95:                                               ; preds = %__nv_sqrtf.exit18
  br i1 %.not1.i22, label %98, label %96, !dbg !35

96:                                               ; preds = %95
  %97 = tail call float @llvm.nvvm.sqrt.rn.f(float %51) #4, !dbg !35
  br label %__nv_sqrtf.exit23, !dbg !35

98:                                               ; preds = %95
  %99 = tail call float @llvm.nvvm.sqrt.approx.f(float %51) #4, !dbg !35
  br label %__nv_sqrtf.exit23, !dbg !35

__nv_sqrtf.exit23:                                ; preds = %91, %93, %96, %98
  %.0.i21 = phi float [ %92, %91 ], [ %94, %93 ], [ %97, %96 ], [ %99, %98 ], !dbg !35
  %100 = extractvalue { i32, i32, i32, i32 } %28, 3, !dbg !23
  %101 = extractvalue { i32, i32, i32, i32 } %31, 3, !dbg !25
  %102 = extractvalue { i32, i32, i32, i32 } %28, 2, !dbg !23
  %103 = extractvalue { i32, i32, i32, i32 } %31, 2, !dbg !25
  %104 = extractvalue { i32, i32, i32, i32 } %28, 1, !dbg !23
  %105 = extractvalue { i32, i32, i32, i32 } %31, 1, !dbg !25
  %106 = extractvalue { i32, i32, i32, i32 } %28, 0, !dbg !23
  %107 = extractvalue { i32, i32, i32, i32 } %31, 0, !dbg !25
  %108 = extractvalue { i32, i32, i32, i32 } %47, 3, !dbg !33
  %109 = extractvalue { i32, i32, i32, i32 } %47, 2, !dbg !33
  %110 = extractvalue { i32, i32, i32, i32 } %47, 1, !dbg !33
  %111 = extractvalue { i32, i32, i32, i32 } %47, 0, !dbg !33
  %112 = extractvalue { i32, i32, i32, i32 } %45, 3, !dbg !31
  %113 = extractvalue { i32, i32, i32, i32 } %45, 2, !dbg !31
  %114 = extractvalue { i32, i32, i32, i32 } %45, 1, !dbg !31
  %115 = extractvalue { i32, i32, i32, i32 } %45, 0, !dbg !31
  %116 = extractvalue { i32, i32, i32, i32 } %43, 3, !dbg !29
  %117 = extractvalue { i32, i32, i32, i32 } %43, 2, !dbg !29
  %118 = extractvalue { i32, i32, i32, i32 } %43, 1, !dbg !29
  %119 = extractvalue { i32, i32, i32, i32 } %43, 0, !dbg !29
  %120 = lshr i32 %12, 4, !dbg !36
  %121 = and i32 %120, 7, !dbg !36
  %122 = or disjoint i32 %20, %121, !dbg !17
  %123 = icmp slt i32 %122, 1024, !dbg !18
  %124 = shl i32 %12, 2, !dbg !12
  %125 = and i32 %124, 60, !dbg !12
  %126 = or disjoint i32 %11, %125, !dbg !13
  %127 = icmp slt i32 %126, 64, !dbg !14
  %128 = and i1 %127, %123, !dbg !22
  %.frozen = freeze i32 %126, !dbg !37
  %129 = sdiv i32 %.frozen, 16, !dbg !37
  %130 = mul i32 %129, 16, !dbg !38
  %.decomposed = sub i32 %.frozen, %130, !dbg !38
  %131 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !39
  %132 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i11) #4, !dbg !39
  %133 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i16) #4, !dbg !39
  %134 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i21) #4, !dbg !39
  %135 = insertelement <4 x i32> poison, i32 %100, i64 0, !dbg !23
  %136 = insertelement <4 x i32> %135, i32 %102, i64 1, !dbg !23
  %137 = insertelement <4 x i32> %136, i32 %104, i64 2, !dbg !23
  %138 = insertelement <4 x i32> %137, i32 %106, i64 3, !dbg !23
  %139 = bitcast <4 x i32> %138 to <4 x float>, !dbg !23
  %140 = insertelement <4 x i32> poison, i32 %101, i64 0, !dbg !25
  %141 = insertelement <4 x i32> %140, i32 %103, i64 1, !dbg !25
  %142 = insertelement <4 x i32> %141, i32 %105, i64 2, !dbg !25
  %143 = insertelement <4 x i32> %142, i32 %107, i64 3, !dbg !25
  %144 = bitcast <4 x i32> %143 to <4 x float>, !dbg !25
  %145 = fsub <4 x float> %139, %144, !dbg !40
  %146 = insertelement <4 x i32> poison, i32 %108, i64 0, !dbg !33
  %147 = insertelement <4 x i32> %146, i32 %109, i64 1, !dbg !33
  %148 = insertelement <4 x i32> %147, i32 %110, i64 2, !dbg !33
  %149 = insertelement <4 x i32> %148, i32 %111, i64 3, !dbg !33
  %150 = bitcast <4 x i32> %149 to <4 x float>, !dbg !33
  %151 = insertelement <4 x i32> poison, i32 %112, i64 0, !dbg !31
  %152 = insertelement <4 x i32> %151, i32 %113, i64 1, !dbg !31
  %153 = insertelement <4 x i32> %152, i32 %114, i64 2, !dbg !31
  %154 = insertelement <4 x i32> %153, i32 %115, i64 3, !dbg !31
  %155 = bitcast <4 x i32> %154 to <4 x float>, !dbg !31
  %156 = insertelement <4 x i32> poison, i32 %116, i64 0, !dbg !29
  %157 = insertelement <4 x i32> %156, i32 %117, i64 1, !dbg !29
  %158 = insertelement <4 x i32> %157, i32 %118, i64 2, !dbg !29
  %159 = insertelement <4 x i32> %158, i32 %119, i64 3, !dbg !29
  %160 = bitcast <4 x i32> %159 to <4 x float>, !dbg !29
  %161 = insertelement <4 x float> poison, float %134, i64 0, !dbg !41
  %162 = insertelement <4 x float> %161, float %133, i64 1, !dbg !41
  %163 = insertelement <4 x float> %162, float %132, i64 2, !dbg !41
  %164 = insertelement <4 x float> %163, float %131, i64 3, !dbg !41
  %165 = fmul <4 x float> %145, %164, !dbg !41
  %166 = fmul <4 x float> %165, %160, !dbg !42
  %167 = fadd <4 x float> %166, %155, !dbg !43
  %168 = fadd <4 x float> %167, %150, !dbg !44
  %169 = fcmp olt <4 x float> %168, zeroinitializer, !dbg !45
  %170 = extractelement <4 x i1> %169, i64 3, !dbg !49
  %171 = extractelement <4 x float> %168, i64 3, !dbg !49
  %172 = select i1 %170, float 0.000000e+00, float %171, !dbg !49
  %173 = extractelement <4 x i1> %169, i64 2, !dbg !49
  %174 = extractelement <4 x float> %168, i64 2, !dbg !49
  %175 = select i1 %173, float 0.000000e+00, float %174, !dbg !49
  %176 = extractelement <4 x i1> %169, i64 1, !dbg !49
  %177 = extractelement <4 x float> %168, i64 1, !dbg !49
  %178 = select i1 %176, float 0.000000e+00, float %177, !dbg !49
  %179 = extractelement <4 x i1> %169, i64 0, !dbg !49
  %180 = extractelement <4 x float> %168, i64 0, !dbg !49
  %181 = select i1 %179, float 0.000000e+00, float %180, !dbg !49
  %182 = shl i32 %122, 4, !dbg !50
  %183 = add i32 %182, %.decomposed, !dbg !51
  %184 = shl i32 %129, 14, !dbg !52
  %185 = add i32 %183, %184, !dbg !53
  %186 = sext i32 %185 to i64, !dbg !54
  %187 = getelementptr float, ptr addrspace(1) %6, i64 %186, !dbg !54
  %188 = shl nuw nsw i32 %15, 8, !dbg !55
  %189 = or disjoint i32 %188, %14, !dbg !55
  %190 = and i32 %124, 508, !dbg !55
  %.idx = shl nuw nsw i32 %15, 6, !dbg !55
  %191 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !55
  %192 = getelementptr float, ptr addrspace(3) %191, i32 %189, !dbg !55
  %193 = bitcast float %172 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %192, <1 x i32> %193, i1 true) #4, !dbg !55
  %194 = or disjoint i32 %189, 64, !dbg !55
  %195 = lshr i32 %194, 4, !dbg !55
  %196 = and i32 %195, 20, !dbg !55
  %197 = getelementptr float, ptr addrspace(3) @global_smem, i32 %196, !dbg !55
  %198 = getelementptr float, ptr addrspace(3) %197, i32 %194, !dbg !55
  %199 = bitcast float %175 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %198, <1 x i32> %199, i1 true) #4, !dbg !55
  %200 = or disjoint i32 %189, 128, !dbg !55
  %201 = lshr i32 %200, 4, !dbg !55
  %202 = and i32 %201, 24, !dbg !55
  %203 = getelementptr float, ptr addrspace(3) @global_smem, i32 %202, !dbg !55
  %204 = getelementptr float, ptr addrspace(3) %203, i32 %200, !dbg !55
  %205 = bitcast float %178 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %204, <1 x i32> %205, i1 true) #4, !dbg !55
  %206 = or disjoint i32 %189, 192, !dbg !55
  %207 = lshr i32 %206, 4, !dbg !55
  %208 = and i32 %207, 28, !dbg !55
  %209 = getelementptr float, ptr addrspace(3) @global_smem, i32 %208, !dbg !55
  %210 = getelementptr float, ptr addrspace(3) %209, i32 %206, !dbg !55
  %211 = bitcast float %181 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %210, <1 x i32> %211, i1 true) #4, !dbg !55
  tail call void @llvm.nvvm.barrier0(), !dbg !55
  %212 = lshr i32 %124, 4, !dbg !55
  %213 = and i32 %212, 28, !dbg !55
  %214 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %213, !dbg !55
  %215 = getelementptr inbounds float, ptr addrspace(3) %214, i32 %190, !dbg !55
  %.extract = load i32, ptr addrspace(3) %215, align 16, !dbg !55
  %216 = getelementptr inbounds i8, ptr addrspace(3) %215, i32 4, !dbg !55
  %.extract6 = load i32, ptr addrspace(3) %216, align 4, !dbg !55
  %217 = getelementptr inbounds i8, ptr addrspace(3) %215, i32 8, !dbg !55
  %.extract7 = load i32, ptr addrspace(3) %217, align 8, !dbg !55
  %218 = getelementptr inbounds i8, ptr addrspace(3) %215, i32 12, !dbg !55
  %.extract8 = load i32, ptr addrspace(3) %218, align 4, !dbg !55
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract6, i32 %.extract7, i32 %.extract8, ptr addrspace(1) %187, i1 %128) #4, !dbg !55
  ret void, !dbg !56
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cj3ffj7awtpgn35qy4v45gpbg2ydmltfbvznzrcvxzlkmxwsqoxn.py", directory: "inductor_cache/j3")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_23, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_23, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_relu_23", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_relu_23", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 32, column: 40, scope: !7)
!20 = !DILocation(line: 32, column: 35, scope: !7)
!21 = !DILocation(line: 32, column: 30, scope: !7)
!22 = !DILocation(line: 32, column: 53, scope: !7)
!23 = !DILocation(line: 32, column: 45, scope: !7)
!24 = !DILocation(line: 33, column: 30, scope: !7)
!25 = !DILocation(line: 33, column: 35, scope: !7)
!26 = !DILocation(line: 34, column: 30, scope: !7)
!27 = !DILocation(line: 34, column: 35, scope: !7)
!28 = !DILocation(line: 35, column: 31, scope: !7)
!29 = !DILocation(line: 35, column: 36, scope: !7)
!30 = !DILocation(line: 36, column: 31, scope: !7)
!31 = !DILocation(line: 36, column: 36, scope: !7)
!32 = !DILocation(line: 37, column: 31, scope: !7)
!33 = !DILocation(line: 37, column: 46, scope: !7)
!34 = !DILocation(line: 40, column: 18, scope: !7)
!35 = !DILocation(line: 41, column: 26, scope: !7)
!36 = !DILocation(line: 26, column: 44, scope: !7)
!37 = !DILocation(line: 31, column: 19, scope: !7)
!38 = !DILocation(line: 30, column: 19, scope: !7)
!39 = !DILocation(line: 43, column: 18, scope: !7)
!40 = !DILocation(line: 38, column: 18, scope: !7)
!41 = !DILocation(line: 46, column: 19, scope: !7)
!42 = !DILocation(line: 47, column: 20, scope: !7)
!43 = !DILocation(line: 48, column: 20, scope: !7)
!44 = !DILocation(line: 49, column: 20, scope: !7)
!45 = !DILocation(line: 118, column: 15, scope: !46, inlinedAt: !48)
!46 = distinct !DILexicalBlockFile(scope: !7, file: !47, discriminator: 0)
!47 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!48 = !DILocation(line: 51, column: 42, scope: !7)
!49 = !DILocation(line: 121, column: 29, scope: !46, inlinedAt: !48)
!50 = !DILocation(line: 52, column: 33, scope: !7)
!51 = !DILocation(line: 52, column: 30, scope: !7)
!52 = !DILocation(line: 52, column: 44, scope: !7)
!53 = !DILocation(line: 52, column: 38, scope: !7)
!54 = !DILocation(line: 52, column: 25, scope: !7)
!55 = !DILocation(line: 52, column: 56, scope: !7)
!56 = !DILocation(line: 52, column: 4, scope: !7)
