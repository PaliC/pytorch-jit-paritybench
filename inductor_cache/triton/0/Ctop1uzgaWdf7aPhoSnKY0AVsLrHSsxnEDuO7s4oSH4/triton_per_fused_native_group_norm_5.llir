; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused_native_group_norm_5(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !10
  %10 = icmp slt i32 %9, 32, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = and i32 %11, 15, !dbg !12
  %13 = shl i32 %9, 4, !dbg !13
  %14 = or disjoint i32 %13, %12, !dbg !14
  %15 = sext i32 %14 to i64, !dbg !15
  %16 = getelementptr float, ptr addrspace(1) %0, i64 %15, !dbg !15
  %17 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %16, i1 %10, i32 0, i1 %10) #4, !dbg !16
  %18 = bitcast i32 %17 to float, !dbg !16
  %19 = getelementptr float, ptr addrspace(1) %1, i64 %15, !dbg !17
  %20 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %19, i1 %10, i32 0, i1 %10) #4, !dbg !18
  %21 = bitcast i32 %20 to float, !dbg !18
  %22 = getelementptr float, ptr addrspace(1) %2, i64 %15, !dbg !19
  %23 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %22, i1 %10, i32 0, i1 %10) #4, !dbg !20
  %24 = bitcast i32 %23 to float, !dbg !20
  %25 = select i1 %10, float %18, float 0.000000e+00, !dbg !21
  %26 = select i1 %10, float %21, float 0.000000e+00, !dbg !22
  %27 = select i1 %10, float %24, float 0.000000e+00, !dbg !23
  %28 = bitcast float %25 to i32, !dbg !24
  %29 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %28, i32 8, i32 31), !dbg !24
  %30 = bitcast i32 %29 to float, !dbg !24
  %31 = bitcast float %26 to i32, !dbg !24
  %32 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %31, i32 8, i32 31), !dbg !24
  %33 = bitcast i32 %32 to float, !dbg !24
  %34 = bitcast float %27 to i32, !dbg !24
  %35 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %34, i32 8, i32 31), !dbg !24
  %36 = bitcast i32 %35 to float, !dbg !24
  %37 = fsub float %30, %25, !dbg !28
  %38 = fadd float %27, %36, !dbg !30
  %39 = fcmp oeq float %38, 0.000000e+00, !dbg !31
  %40 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %36, float %38) #4, !dbg !32
  %41 = select i1 %39, float 0.000000e+00, float %40, !dbg !33
  %42 = fmul float %37, %41, !dbg !34
  %43 = fadd float %25, %42, !dbg !35
  %44 = fadd float %26, %33, !dbg !36
  %45 = fmul float %37, %37, !dbg !37
  %46 = fmul float %27, %45, !dbg !38
  %47 = fmul float %46, %41, !dbg !39
  %48 = fadd float %44, %47, !dbg !40
  %49 = bitcast float %43 to i32, !dbg !24
  %50 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %49, i32 4, i32 31), !dbg !24
  %51 = bitcast i32 %50 to float, !dbg !24
  %52 = bitcast float %48 to i32, !dbg !24
  %53 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %52, i32 4, i32 31), !dbg !24
  %54 = bitcast i32 %53 to float, !dbg !24
  %55 = bitcast float %38 to i32, !dbg !24
  %56 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %55, i32 4, i32 31), !dbg !24
  %57 = bitcast i32 %56 to float, !dbg !24
  %58 = fsub float %51, %43, !dbg !28
  %59 = fadd float %38, %57, !dbg !30
  %60 = fcmp oeq float %59, 0.000000e+00, !dbg !31
  %61 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %57, float %59) #4, !dbg !32
  %62 = select i1 %60, float 0.000000e+00, float %61, !dbg !33
  %63 = fmul float %58, %62, !dbg !34
  %64 = fadd float %43, %63, !dbg !35
  %65 = fadd float %48, %54, !dbg !36
  %66 = fmul float %58, %58, !dbg !37
  %67 = fmul float %38, %66, !dbg !38
  %68 = fmul float %62, %67, !dbg !39
  %69 = fadd float %65, %68, !dbg !40
  %70 = bitcast float %64 to i32, !dbg !24
  %71 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %70, i32 2, i32 31), !dbg !24
  %72 = bitcast i32 %71 to float, !dbg !24
  %73 = bitcast float %69 to i32, !dbg !24
  %74 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %73, i32 2, i32 31), !dbg !24
  %75 = bitcast i32 %74 to float, !dbg !24
  %76 = bitcast float %59 to i32, !dbg !24
  %77 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %76, i32 2, i32 31), !dbg !24
  %78 = bitcast i32 %77 to float, !dbg !24
  %79 = fsub float %72, %64, !dbg !28
  %80 = fadd float %59, %78, !dbg !30
  %81 = fcmp oeq float %80, 0.000000e+00, !dbg !31
  %82 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %78, float %80) #4, !dbg !32
  %83 = select i1 %81, float 0.000000e+00, float %82, !dbg !33
  %84 = fmul float %79, %83, !dbg !34
  %85 = fadd float %64, %84, !dbg !35
  %86 = fadd float %69, %75, !dbg !36
  %87 = fmul float %79, %79, !dbg !37
  %88 = fmul float %59, %87, !dbg !38
  %89 = fmul float %83, %88, !dbg !39
  %90 = fadd float %86, %89, !dbg !40
  %91 = bitcast float %85 to i32, !dbg !24
  %92 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %91, i32 1, i32 31), !dbg !24
  %93 = bitcast i32 %92 to float, !dbg !24
  %94 = bitcast float %90 to i32, !dbg !24
  %95 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %94, i32 1, i32 31), !dbg !24
  %96 = bitcast i32 %95 to float, !dbg !24
  %97 = bitcast float %80 to i32, !dbg !24
  %98 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %97, i32 1, i32 31), !dbg !24
  %99 = bitcast i32 %98 to float, !dbg !24
  %100 = fsub float %93, %85, !dbg !28
  %101 = fadd float %80, %99, !dbg !30
  %102 = fcmp oeq float %101, 0.000000e+00, !dbg !31
  %103 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %99, float %101) #4, !dbg !32
  %104 = select i1 %102, float 0.000000e+00, float %103, !dbg !33
  %105 = fadd float %90, %96, !dbg !36
  %106 = fmul float %100, %100, !dbg !37
  %107 = fmul float %80, %106, !dbg !38
  %108 = fmul float %104, %107, !dbg !39
  %109 = fadd float %105, %108, !dbg !40
  %110 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %109, float 0x4130000000000000) #4, !dbg !41
  %111 = fadd float %110, 0x3EE4F8B580000000, !dbg !42
  %112 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !43
  %.not.i = icmp eq i32 %112, 0, !dbg !43
  br i1 %.not.i, label %115, label %113, !dbg !43

113:                                              ; preds = %8
  %114 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %111), !dbg !43
  br label %__nv_rsqrtf.exit, !dbg !43

115:                                              ; preds = %8
  %116 = tail call float @llvm.nvvm.rsqrt.approx.f(float %111), !dbg !43
  br label %__nv_rsqrtf.exit, !dbg !43

__nv_rsqrtf.exit:                                 ; preds = %113, %115
  %.0.i = phi float [ %114, %113 ], [ %116, %115 ], !dbg !43
  %117 = fmul float %100, %104, !dbg !34
  %118 = fadd float %85, %117, !dbg !35
  %119 = sext i32 %9 to i64, !dbg !44
  %120 = getelementptr float, ptr addrspace(1) %5, i64 %119, !dbg !44
  %121 = and i32 %11, 63, !dbg !45
  %122 = icmp eq i32 %121, 0, !dbg !45
  %123 = bitcast float %.0.i to i32, !dbg !45
  %124 = and i1 %122, %10, !dbg !45
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %123, ptr addrspace(1) %120, i1 %124) #4, !dbg !45
  %125 = getelementptr float, ptr addrspace(1) %3, i64 %119, !dbg !46
  %126 = bitcast float %118 to i32, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %126, ptr addrspace(1) %125, i1 %124) #4, !dbg !47
  %127 = getelementptr float, ptr addrspace(1) %4, i64 %119, !dbg !48
  %128 = bitcast float %109 to i32, !dbg !49
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %128, ptr addrspace(1) %127, i1 %124) #4, !dbg !49
  ret void, !dbg !50
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cxssycvft3zfkbnktz7qiexh7lyypduyxra4vf7q3og2nywjkmgw.py", directory: "inductor_cache/xs")
!4 = !{ptr @triton_per_fused_native_group_norm_5, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_native_group_norm_5, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_native_group_norm_5", linkageName: "triton_per_fused_native_group_norm_5", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 21, scope: !7)
!12 = !DILocation(line: 26, column: 34, scope: !7)
!13 = !DILocation(line: 31, column: 38, scope: !7)
!14 = !DILocation(line: 31, column: 35, scope: !7)
!15 = !DILocation(line: 31, column: 30, scope: !7)
!16 = !DILocation(line: 31, column: 43, scope: !7)
!17 = !DILocation(line: 32, column: 30, scope: !7)
!18 = !DILocation(line: 32, column: 43, scope: !7)
!19 = !DILocation(line: 33, column: 30, scope: !7)
!20 = !DILocation(line: 33, column: 43, scope: !7)
!21 = !DILocation(line: 37, column: 33, scope: !7)
!22 = !DILocation(line: 38, column: 33, scope: !7)
!23 = !DILocation(line: 39, column: 33, scope: !7)
!24 = !DILocation(line: 204, column: 46, scope: !25, inlinedAt: !27)
!25 = distinct !DILexicalBlockFile(scope: !7, file: !26, discriminator: 0)
!26 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!27 = !DILocation(line: 40, column: 67, scope: !7)
!28 = !DILocation(line: 192, column: 21, scope: !29, inlinedAt: !27)
!29 = distinct !DILexicalBlockFile(scope: !25, file: !26, discriminator: 0)
!30 = !DILocation(line: 193, column: 28, scope: !29, inlinedAt: !27)
!31 = !DILocation(line: 194, column: 39, scope: !29, inlinedAt: !27)
!32 = !DILocation(line: 194, column: 60, scope: !29, inlinedAt: !27)
!33 = !DILocation(line: 194, column: 49, scope: !29, inlinedAt: !27)
!34 = !DILocation(line: 196, column: 25, scope: !29, inlinedAt: !27)
!35 = !DILocation(line: 196, column: 17, scope: !29, inlinedAt: !27)
!36 = !DILocation(line: 197, column: 15, scope: !29, inlinedAt: !27)
!37 = !DILocation(line: 197, column: 30, scope: !29, inlinedAt: !27)
!38 = !DILocation(line: 197, column: 38, scope: !29, inlinedAt: !27)
!39 = !DILocation(line: 197, column: 49, scope: !29, inlinedAt: !27)
!40 = !DILocation(line: 197, column: 22, scope: !29, inlinedAt: !27)
!41 = !DILocation(line: 45, column: 20, scope: !7)
!42 = !DILocation(line: 47, column: 20, scope: !7)
!43 = !DILocation(line: 48, column: 28, scope: !7)
!44 = !DILocation(line: 49, column: 25, scope: !7)
!45 = !DILocation(line: 49, column: 37, scope: !7)
!46 = !DILocation(line: 50, column: 25, scope: !7)
!47 = !DILocation(line: 50, column: 37, scope: !7)
!48 = !DILocation(line: 51, column: 25, scope: !7)
!49 = !DILocation(line: 51, column: 37, scope: !7)
!50 = !DILocation(line: 51, column: 4, scope: !7)
