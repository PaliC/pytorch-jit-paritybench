; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_leaky_relu_20(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %11 = shl i32 %10, 8, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = and i32 %12, 127, !dbg !12
  %14 = or disjoint i32 %13, 128, !dbg !12
  %15 = or disjoint i32 %11, %13, !dbg !13
  %16 = or disjoint i32 %11, %14, !dbg !13
  %17 = icmp slt i32 %15, 256, !dbg !14
  %18 = icmp slt i32 %16, 256, !dbg !14
  %19 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %20 = shl i32 %19, 1, !dbg !16
  %21 = icmp slt i32 %20, 256, !dbg !17
  %22 = shl i32 %15, 8, !dbg !18
  %23 = shl i32 %16, 8, !dbg !18
  %24 = add i32 %22, %20, !dbg !19
  %25 = add i32 %23, %20, !dbg !19
  %26 = sext i32 %24 to i64, !dbg !20
  %27 = getelementptr float, ptr addrspace(1) %0, i64 %26, !dbg !20
  %28 = sext i32 %25 to i64, !dbg !20
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !20
  %30 = and i1 %21, %17, !dbg !21
  %31 = and i1 %21, %18, !dbg !21
  %32 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %27, i1 %30) #4, !dbg !22
  %33 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %29, i1 %31) #4, !dbg !22
  %34 = sext i32 %20 to i64, !dbg !23
  %35 = getelementptr float, ptr addrspace(1) %1, i64 %34, !dbg !23
  %36 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %35, i1 %21) #4, !dbg !24
  %37 = getelementptr float, ptr addrspace(1) %2, i64 %34, !dbg !25
  %38 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %37, i1 %21) #4, !dbg !26
  %39 = extractvalue { i32, i32 } %38, 0, !dbg !26
  %40 = extractvalue { i32, i32 } %38, 1, !dbg !26
  %41 = bitcast i32 %39 to float, !dbg !26
  %42 = bitcast i32 %40 to float, !dbg !26
  %43 = getelementptr float, ptr addrspace(1) %3, i64 %34, !dbg !27
  %44 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %43, i1 %21) #4, !dbg !28
  %45 = getelementptr float, ptr addrspace(1) %4, i64 %34, !dbg !29
  %46 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %45, i1 %21) #4, !dbg !30
  %47 = getelementptr float, ptr addrspace(1) %5, i64 %26, !dbg !31
  %48 = getelementptr float, ptr addrspace(1) %5, i64 %28, !dbg !31
  %49 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %47, i1 %30) #4, !dbg !32
  %50 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %48, i1 %31) #4, !dbg !32
  %51 = fadd float %41, 0x3EE4F8B580000000, !dbg !33
  %52 = fadd float %42, 0x3EE4F8B580000000, !dbg !33
  %53 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not.i = icmp eq i32 %53, 0, !dbg !34
  %54 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !34
  %.not1.i = icmp eq i32 %54, 0, !dbg !34
  br i1 %.not.i, label %60, label %55, !dbg !34

55:                                               ; preds = %9
  br i1 %.not1.i, label %58, label %56, !dbg !34

56:                                               ; preds = %55
  %57 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %51) #4, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

58:                                               ; preds = %55
  %59 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %51) #4, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

60:                                               ; preds = %9
  br i1 %.not1.i, label %63, label %61, !dbg !34

61:                                               ; preds = %60
  %62 = tail call float @llvm.nvvm.sqrt.rn.f(float %51) #4, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

63:                                               ; preds = %60
  %64 = tail call float @llvm.nvvm.sqrt.approx.f(float %51) #4, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

__nv_sqrtf.exit:                                  ; preds = %56, %58, %61, %63
  %.0.i = phi float [ %57, %56 ], [ %59, %58 ], [ %62, %61 ], [ %64, %63 ], !dbg !34
  %65 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not.i7 = icmp eq i32 %65, 0, !dbg !34
  %66 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !34
  %.not1.i10 = icmp eq i32 %66, 0, !dbg !34
  br i1 %.not.i7, label %72, label %67, !dbg !34

67:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i10, label %70, label %68, !dbg !34

68:                                               ; preds = %67
  %69 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %52) #4, !dbg !34
  br label %__nv_sqrtf.exit11, !dbg !34

70:                                               ; preds = %67
  %71 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %52) #4, !dbg !34
  br label %__nv_sqrtf.exit11, !dbg !34

72:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i10, label %75, label %73, !dbg !34

73:                                               ; preds = %72
  %74 = tail call float @llvm.nvvm.sqrt.rn.f(float %52) #4, !dbg !34
  br label %__nv_sqrtf.exit11, !dbg !34

75:                                               ; preds = %72
  %76 = tail call float @llvm.nvvm.sqrt.approx.f(float %52) #4, !dbg !34
  br label %__nv_sqrtf.exit11, !dbg !34

__nv_sqrtf.exit11:                                ; preds = %68, %70, %73, %75
  %.0.i9 = phi float [ %69, %68 ], [ %71, %70 ], [ %74, %73 ], [ %76, %75 ], !dbg !34
  %77 = extractvalue { i32, i32 } %33, 1, !dbg !22
  %78 = extractvalue { i32, i32 } %36, 1, !dbg !24
  %79 = extractvalue { i32, i32 } %33, 0, !dbg !22
  %80 = extractvalue { i32, i32 } %36, 0, !dbg !24
  %81 = extractvalue { i32, i32 } %32, 1, !dbg !22
  %82 = extractvalue { i32, i32 } %32, 0, !dbg !22
  %83 = extractvalue { i32, i32 } %50, 1, !dbg !32
  %84 = bitcast i32 %83 to float, !dbg !32
  %85 = extractvalue { i32, i32 } %50, 0, !dbg !32
  %86 = bitcast i32 %85 to float, !dbg !32
  %87 = extractvalue { i32, i32 } %49, 1, !dbg !32
  %88 = bitcast i32 %87 to float, !dbg !32
  %89 = extractvalue { i32, i32 } %49, 0, !dbg !32
  %90 = bitcast i32 %89 to float, !dbg !32
  %91 = extractvalue { i32, i32 } %46, 1, !dbg !30
  %92 = extractvalue { i32, i32 } %46, 0, !dbg !30
  %93 = extractvalue { i32, i32 } %44, 1, !dbg !28
  %94 = extractvalue { i32, i32 } %44, 0, !dbg !28
  %95 = lshr i32 %12, 6, !dbg !35
  %.lobit = and i32 %95, 1, !dbg !35
  %96 = or disjoint i32 %20, %.lobit, !dbg !36
  %97 = icmp slt i32 %96, 256, !dbg !17
  %98 = shl i32 %12, 2, !dbg !12
  %99 = and i32 %98, 252, !dbg !12
  %100 = or disjoint i32 %11, %99, !dbg !13
  %101 = icmp slt i32 %100, 256, !dbg !14
  %102 = and i1 %101, %97, !dbg !21
  %.frozen = freeze i32 %100, !dbg !37
  %103 = sdiv i32 %.frozen, 64, !dbg !37
  %104 = mul i32 %103, 64, !dbg !38
  %.decomposed = sub i32 %.frozen, %104, !dbg !38
  %105 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !39
  %106 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i9) #4, !dbg !39
  %107 = insertelement <2 x i32> poison, i32 %78, i64 0, !dbg !24
  %108 = insertelement <2 x i32> %107, i32 %80, i64 1, !dbg !24
  %109 = bitcast <2 x i32> %108 to <2 x float>, !dbg !24
  %110 = shufflevector <2 x float> %109, <2 x float> poison, <4 x i32> <i32 0, i32 1, i32 0, i32 1>, !dbg !24
  %111 = insertelement <4 x i32> poison, i32 %77, i64 0, !dbg !22
  %112 = insertelement <4 x i32> %111, i32 %79, i64 1, !dbg !22
  %113 = insertelement <4 x i32> %112, i32 %81, i64 2, !dbg !22
  %114 = insertelement <4 x i32> %113, i32 %82, i64 3, !dbg !22
  %115 = bitcast <4 x i32> %114 to <4 x float>, !dbg !22
  %116 = fsub <4 x float> %115, %110, !dbg !40
  %117 = insertelement <2 x i32> poison, i32 %91, i64 0, !dbg !30
  %118 = insertelement <2 x i32> %117, i32 %92, i64 1, !dbg !30
  %119 = bitcast <2 x i32> %118 to <2 x float>, !dbg !30
  %120 = shufflevector <2 x float> %119, <2 x float> poison, <4 x i32> <i32 0, i32 1, i32 0, i32 1>, !dbg !30
  %121 = insertelement <2 x i32> poison, i32 %93, i64 0, !dbg !28
  %122 = insertelement <2 x i32> %121, i32 %94, i64 1, !dbg !28
  %123 = bitcast <2 x i32> %122 to <2 x float>, !dbg !28
  %124 = shufflevector <2 x float> %123, <2 x float> poison, <4 x i32> <i32 0, i32 1, i32 0, i32 1>, !dbg !28
  %125 = insertelement <4 x float> poison, float %106, i64 0, !dbg !41
  %126 = insertelement <4 x float> %125, float %105, i64 1, !dbg !41
  %127 = shufflevector <4 x float> %126, <4 x float> poison, <4 x i32> <i32 0, i32 1, i32 0, i32 1>, !dbg !41
  %128 = fmul <4 x float> %116, %127, !dbg !41
  %129 = fmul <4 x float> %128, %124, !dbg !42
  %130 = fadd <4 x float> %129, %120, !dbg !43
  %131 = fcmp ogt <4 x float> %130, zeroinitializer, !dbg !44
  %132 = extractelement <4 x float> %130, i64 3, !dbg !45
  %133 = fmul float %132, 0x3FB99999A0000000, !dbg !46
  %134 = extractelement <4 x float> %130, i64 2, !dbg !45
  %135 = fmul float %134, 0x3FB99999A0000000, !dbg !46
  %136 = extractelement <4 x float> %130, i64 1, !dbg !45
  %137 = fmul float %136, 0x3FB99999A0000000, !dbg !46
  %138 = extractelement <4 x float> %130, i64 0, !dbg !45
  %139 = fmul float %138, 0x3FB99999A0000000, !dbg !46
  %140 = extractelement <4 x i1> %131, i64 3, !dbg !45
  %141 = select i1 %140, float %132, float %133, !dbg !45
  %142 = extractelement <4 x i1> %131, i64 2, !dbg !45
  %143 = select i1 %142, float %134, float %135, !dbg !45
  %144 = extractelement <4 x i1> %131, i64 1, !dbg !45
  %145 = select i1 %144, float %136, float %137, !dbg !45
  %146 = extractelement <4 x i1> %131, i64 0, !dbg !45
  %147 = select i1 %146, float %138, float %139, !dbg !45
  %148 = fadd float %141, %90, !dbg !47
  %149 = fadd float %143, %88, !dbg !47
  %150 = fadd float %145, %86, !dbg !47
  %151 = fadd float %147, %84, !dbg !47
  %152 = shl i32 %96, 6, !dbg !48
  %153 = add i32 %152, %.decomposed, !dbg !49
  %154 = shl i32 %103, 14, !dbg !50
  %155 = add i32 %153, %154, !dbg !51
  %156 = sext i32 %155 to i64, !dbg !52
  %157 = getelementptr float, ptr addrspace(1) %6, i64 %156, !dbg !52
  %158 = and i32 %98, 508, !dbg !53
  %159 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !53
  %160 = bitcast float %148 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %159, <1 x i32> %160, i1 true) #4, !dbg !53
  %161 = getelementptr inbounds i8, ptr addrspace(3) %159, i32 1040, !dbg !53
  %162 = bitcast float %149 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %161, <1 x i32> %162, i1 true) #4, !dbg !53
  %163 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !53
  %164 = bitcast float %150 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %163, <1 x i32> %164, i1 true) #4, !dbg !53
  %165 = getelementptr inbounds i8, ptr addrspace(3) %159, i32 1552, !dbg !53
  %166 = bitcast float %151 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %165, <1 x i32> %166, i1 true) #4, !dbg !53
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %167 = lshr i32 %98, 6, !dbg !53
  %168 = and i32 %167, 4, !dbg !53
  %169 = getelementptr float, ptr addrspace(3) @global_smem, i32 %168, !dbg !53
  %170 = getelementptr float, ptr addrspace(3) %169, i32 %158, !dbg !53
  %.extract = load i32, ptr addrspace(3) %170, align 16, !dbg !53
  %171 = getelementptr inbounds i8, ptr addrspace(3) %170, i32 4, !dbg !53
  %.extract4 = load i32, ptr addrspace(3) %171, align 4, !dbg !53
  %172 = getelementptr inbounds i8, ptr addrspace(3) %170, i32 8, !dbg !53
  %.extract5 = load i32, ptr addrspace(3) %172, align 8, !dbg !53
  %173 = getelementptr inbounds i8, ptr addrspace(3) %170, i32 12, !dbg !53
  %.extract6 = load i32, ptr addrspace(3) %173, align 4, !dbg !53
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract4, i32 %.extract5, i32 %.extract6, ptr addrspace(1) %157, i1 %102) #4, !dbg !53
  ret void, !dbg !54
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cr7g5ygfs4tf2s6uj5s4tzxadhlc45i2d3qyvr6rd6i62ekrylhz.py", directory: "inductor_cache/r7")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_leaky_relu_20, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_leaky_relu_20, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_leaky_relu_20", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_leaky_relu_20", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 27, column: 21, scope: !7)
!18 = !DILocation(line: 32, column: 39, scope: !7)
!19 = !DILocation(line: 32, column: 35, scope: !7)
!20 = !DILocation(line: 32, column: 30, scope: !7)
!21 = !DILocation(line: 32, column: 52, scope: !7)
!22 = !DILocation(line: 32, column: 44, scope: !7)
!23 = !DILocation(line: 33, column: 30, scope: !7)
!24 = !DILocation(line: 33, column: 35, scope: !7)
!25 = !DILocation(line: 34, column: 30, scope: !7)
!26 = !DILocation(line: 34, column: 35, scope: !7)
!27 = !DILocation(line: 35, column: 31, scope: !7)
!28 = !DILocation(line: 35, column: 36, scope: !7)
!29 = !DILocation(line: 36, column: 31, scope: !7)
!30 = !DILocation(line: 36, column: 36, scope: !7)
!31 = !DILocation(line: 37, column: 31, scope: !7)
!32 = !DILocation(line: 37, column: 45, scope: !7)
!33 = !DILocation(line: 40, column: 18, scope: !7)
!34 = !DILocation(line: 41, column: 26, scope: !7)
!35 = !DILocation(line: 26, column: 44, scope: !7)
!36 = !DILocation(line: 26, column: 23, scope: !7)
!37 = !DILocation(line: 31, column: 19, scope: !7)
!38 = !DILocation(line: 30, column: 19, scope: !7)
!39 = !DILocation(line: 43, column: 18, scope: !7)
!40 = !DILocation(line: 38, column: 18, scope: !7)
!41 = !DILocation(line: 46, column: 19, scope: !7)
!42 = !DILocation(line: 47, column: 20, scope: !7)
!43 = !DILocation(line: 48, column: 20, scope: !7)
!44 = !DILocation(line: 50, column: 20, scope: !7)
!45 = !DILocation(line: 53, column: 35, scope: !7)
!46 = !DILocation(line: 52, column: 20, scope: !7)
!47 = !DILocation(line: 54, column: 20, scope: !7)
!48 = !DILocation(line: 55, column: 33, scope: !7)
!49 = !DILocation(line: 55, column: 30, scope: !7)
!50 = !DILocation(line: 55, column: 44, scope: !7)
!51 = !DILocation(line: 55, column: 38, scope: !7)
!52 = !DILocation(line: 55, column: 25, scope: !7)
!53 = !DILocation(line: 55, column: 56, scope: !7)
!54 = !DILocation(line: 55, column: 4, scope: !7)
