; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_60(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, i32 %10) local_unnamed_addr !dbg !7 {
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %13 = shl i32 %12, 9, !dbg !11
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %15 = shl i32 %14, 1, !dbg !12
  %16 = and i32 %15, 510, !dbg !12
  %17 = or disjoint i32 %13, %16, !dbg !13
  %18 = icmp slt i32 %17, 190464, !dbg !14
  %.frozen = freeze i32 %17, !dbg !15
  %19 = sdiv i32 %.frozen, 256, !dbg !15
  %20 = srem i32 %19, 186, !dbg !16
  %21 = mul i32 %19, 256, !dbg !17
  %.decomposed = sub i32 %.frozen, %21, !dbg !17
  %.frozen11 = freeze i32 %17, !dbg !18
  %22 = sdiv i32 %.frozen11, 47616, !dbg !18
  %23 = sext i32 %20 to i64, !dbg !19
  %24 = getelementptr float, ptr addrspace(1) %4, i64 %23, !dbg !19
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 %18) #3, !dbg !20
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 %18) #3, !dbg !20
  %27 = getelementptr float, ptr addrspace(1) %5, i64 %23, !dbg !21
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 %18) #3, !dbg !22
  %29 = bitcast i32 %28 to float, !dbg !22
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 %18) #3, !dbg !22
  %31 = bitcast i32 %30 to float, !dbg !22
  %32 = getelementptr float, ptr addrspace(1) %6, i64 %23, !dbg !23
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 %18) #3, !dbg !24
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 %18) #3, !dbg !24
  %35 = getelementptr float, ptr addrspace(1) %7, i64 %23, !dbg !25
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 %18) #3, !dbg !26
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 %18) #3, !dbg !26
  %38 = icmp slt i32 %20, 150, !dbg !27
  %39 = mul i32 %22, 47616, !dbg !28
  %srem.decomposed = sub i32 %.frozen11, %39, !dbg !28
  %40 = mul nsw i32 %22, 38400, !dbg !29
  %41 = add nsw i32 %40, %srem.decomposed, !dbg !30
  %42 = sext i32 %41 to i64, !dbg !31
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !31
  %44 = and i1 %18, %38, !dbg !32
  %45 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %43, i1 %44, i32 0, i1 %44, i32 0, i1 %44) #3, !dbg !33
  %46 = add nsw i32 %20, -150, !dbg !34
  %47 = icmp ult i32 %46, 12, !dbg !34
  %48 = shl nsw i32 %20, 8, !dbg !35
  %49 = mul nsw i32 %22, 3072, !dbg !36
  %50 = add nsw i32 %49, %.decomposed, !dbg !35
  %51 = add nsw i32 %50, -38400, !dbg !37
  %52 = add nsw i32 %51, %48, !dbg !38
  %53 = sext i32 %52 to i64, !dbg !39
  %54 = getelementptr float, ptr addrspace(1) %1, i64 %53, !dbg !39
  %55 = and i1 %18, %47, !dbg !40
  %56 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %54, i1 %55, i32 0, i1 %55, i32 0, i1 %55) #3, !dbg !41
  %57 = add nsw i32 %20, -162, !dbg !42
  %58 = icmp ult i32 %57, 12, !dbg !42
  %59 = add nsw i32 %50, -41472, !dbg !43
  %60 = add nsw i32 %59, %48, !dbg !44
  %61 = sext i32 %60 to i64, !dbg !45
  %62 = getelementptr float, ptr addrspace(1) %2, i64 %61, !dbg !45
  %63 = and i1 %18, %58, !dbg !46
  %64 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %62, i1 %63, i32 0, i1 %63, i32 0, i1 %63) #3, !dbg !47
  %65 = icmp sgt i32 %20, 173, !dbg !48
  %66 = add nsw i32 %50, -44544, !dbg !49
  %67 = add nsw i32 %66, %48, !dbg !50
  %68 = sext i32 %67 to i64, !dbg !51
  %69 = getelementptr float, ptr addrspace(1) %3, i64 %68, !dbg !51
  %70 = and i1 %18, %65, !dbg !52
  %71 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %69, i1 %70, i32 0, i1 %70, i32 0, i1 %70) #3, !dbg !53
  %72 = fadd float %29, 0x3EE4F8B580000000, !dbg !54
  %73 = fadd float %31, 0x3EE4F8B580000000, !dbg !54
  %74 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !55
  %.not.i = icmp eq i32 %74, 0, !dbg !55
  %75 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !55
  %.not1.i = icmp eq i32 %75, 0, !dbg !55
  br i1 %.not.i, label %81, label %76, !dbg !55

76:                                               ; preds = %11
  br i1 %.not1.i, label %79, label %77, !dbg !55

77:                                               ; preds = %76
  %78 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %72) #3, !dbg !55
  br label %__nv_sqrtf.exit, !dbg !55

79:                                               ; preds = %76
  %80 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %72) #3, !dbg !55
  br label %__nv_sqrtf.exit, !dbg !55

81:                                               ; preds = %11
  br i1 %.not1.i, label %84, label %82, !dbg !55

82:                                               ; preds = %81
  %83 = tail call float @llvm.nvvm.sqrt.rn.f(float %72) #3, !dbg !55
  br label %__nv_sqrtf.exit, !dbg !55

84:                                               ; preds = %81
  %85 = tail call float @llvm.nvvm.sqrt.approx.f(float %72) #3, !dbg !55
  br label %__nv_sqrtf.exit, !dbg !55

__nv_sqrtf.exit:                                  ; preds = %77, %79, %82, %84
  %.0.i = phi float [ %78, %77 ], [ %80, %79 ], [ %83, %82 ], [ %85, %84 ], !dbg !55
  %86 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !55
  %.not.i6 = icmp eq i32 %86, 0, !dbg !55
  %87 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !55
  %.not1.i9 = icmp eq i32 %87, 0, !dbg !55
  br i1 %.not.i6, label %93, label %88, !dbg !55

88:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i9, label %91, label %89, !dbg !55

89:                                               ; preds = %88
  %90 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %73) #3, !dbg !55
  br label %__nv_sqrtf.exit10, !dbg !55

91:                                               ; preds = %88
  %92 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %73) #3, !dbg !55
  br label %__nv_sqrtf.exit10, !dbg !55

93:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i9, label %96, label %94, !dbg !55

94:                                               ; preds = %93
  %95 = tail call float @llvm.nvvm.sqrt.rn.f(float %73) #3, !dbg !55
  br label %__nv_sqrtf.exit10, !dbg !55

96:                                               ; preds = %93
  %97 = tail call float @llvm.nvvm.sqrt.approx.f(float %73) #3, !dbg !55
  br label %__nv_sqrtf.exit10, !dbg !55

__nv_sqrtf.exit10:                                ; preds = %89, %91, %94, %96
  %.0.i8 = phi float [ %90, %89 ], [ %92, %91 ], [ %95, %94 ], [ %97, %96 ], !dbg !55
  %98 = extractvalue { i32, i32 } %45, 1, !dbg !33
  %99 = extractvalue { i32, i32 } %56, 1, !dbg !41
  %100 = extractvalue { i32, i32 } %64, 1, !dbg !47
  %101 = extractvalue { i32, i32 } %71, 1, !dbg !53
  %.v1 = select i1 %58, i32 %100, i32 %101, !dbg !56
  %.v3 = select i1 %47, i32 %99, i32 %.v1, !dbg !57
  %.v5 = select i1 %38, i32 %98, i32 %.v3, !dbg !58
  %102 = bitcast i32 %.v5 to float, !dbg !58
  %103 = bitcast i32 %26 to float, !dbg !20
  %104 = fsub float %102, %103, !dbg !59
  %105 = extractvalue { i32, i32 } %45, 0, !dbg !33
  %106 = extractvalue { i32, i32 } %56, 0, !dbg !41
  %107 = extractvalue { i32, i32 } %64, 0, !dbg !47
  %108 = extractvalue { i32, i32 } %71, 0, !dbg !53
  %.v = select i1 %58, i32 %107, i32 %108, !dbg !56
  %.v2 = select i1 %47, i32 %106, i32 %.v, !dbg !57
  %.v4 = select i1 %38, i32 %105, i32 %.v2, !dbg !58
  %109 = bitcast i32 %.v4 to float, !dbg !58
  %110 = bitcast i32 %25 to float, !dbg !20
  %111 = fsub float %109, %110, !dbg !59
  %112 = bitcast i32 %37 to float, !dbg !26
  %113 = bitcast i32 %36 to float, !dbg !26
  %114 = bitcast i32 %34 to float, !dbg !24
  %115 = bitcast i32 %33 to float, !dbg !24
  %116 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !60
  %117 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !60
  %118 = fmul float %111, %116, !dbg !61
  %119 = fmul float %104, %117, !dbg !61
  %120 = fmul float %118, %115, !dbg !62
  %121 = fmul float %119, %114, !dbg !62
  %122 = fadd float %120, %113, !dbg !63
  %123 = fadd float %121, %112, !dbg !63
  %124 = fcmp olt float %122, 0.000000e+00, !dbg !64
  %125 = fcmp olt float %123, 0.000000e+00, !dbg !64
  %126 = select i1 %124, float 0.000000e+00, float %122, !dbg !68
  %127 = select i1 %125, float 0.000000e+00, float %123, !dbg !68
  %128 = sext i32 %17 to i64, !dbg !69
  %129 = getelementptr float, ptr addrspace(1) %8, i64 %128, !dbg !69
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.v4, i32 %.v5, ptr addrspace(1) %129, i1 %18) #3, !dbg !70
  %130 = getelementptr float, ptr addrspace(1) %9, i64 %128, !dbg !71
  %131 = bitcast float %126 to i32, !dbg !72
  %132 = bitcast float %127 to i32, !dbg !72
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %131, i32 %132, ptr addrspace(1) %130, i1 %18) #3, !dbg !72
  ret void, !dbg !73
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "czbetnc36ha3btudjhilvuwb2dycb6t75qymsmay7466xuth72je.py", directory: "inductor_cache/zb")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_60, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_60, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_60", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_60", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 28, scope: !7)
!17 = !DILocation(line: 25, column: 19, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 28, column: 31, scope: !7)
!20 = !DILocation(line: 28, column: 36, scope: !7)
!21 = !DILocation(line: 29, column: 31, scope: !7)
!22 = !DILocation(line: 29, column: 36, scope: !7)
!23 = !DILocation(line: 30, column: 31, scope: !7)
!24 = !DILocation(line: 30, column: 36, scope: !7)
!25 = !DILocation(line: 31, column: 31, scope: !7)
!26 = !DILocation(line: 31, column: 36, scope: !7)
!27 = !DILocation(line: 36, column: 18, scope: !7)
!28 = !DILocation(line: 37, column: 35, scope: !7)
!29 = !DILocation(line: 37, column: 52, scope: !7)
!30 = !DILocation(line: 37, column: 46, scope: !7)
!31 = !DILocation(line: 37, column: 30, scope: !7)
!32 = !DILocation(line: 37, column: 64, scope: !7)
!33 = !DILocation(line: 37, column: 57, scope: !7)
!34 = !DILocation(line: 41, column: 18, scope: !7)
!35 = !DILocation(line: 42, column: 41, scope: !7)
!36 = !DILocation(line: 42, column: 61, scope: !7)
!37 = !DILocation(line: 42, column: 36, scope: !7)
!38 = !DILocation(line: 42, column: 56, scope: !7)
!39 = !DILocation(line: 42, column: 31, scope: !7)
!40 = !DILocation(line: 42, column: 73, scope: !7)
!41 = !DILocation(line: 42, column: 66, scope: !7)
!42 = !DILocation(line: 46, column: 20, scope: !7)
!43 = !DILocation(line: 47, column: 36, scope: !7)
!44 = !DILocation(line: 47, column: 56, scope: !7)
!45 = !DILocation(line: 47, column: 31, scope: !7)
!46 = !DILocation(line: 47, column: 74, scope: !7)
!47 = !DILocation(line: 47, column: 66, scope: !7)
!48 = !DILocation(line: 48, column: 20, scope: !7)
!49 = !DILocation(line: 51, column: 36, scope: !7)
!50 = !DILocation(line: 51, column: 56, scope: !7)
!51 = !DILocation(line: 51, column: 31, scope: !7)
!52 = !DILocation(line: 51, column: 74, scope: !7)
!53 = !DILocation(line: 51, column: 66, scope: !7)
!54 = !DILocation(line: 57, column: 20, scope: !7)
!55 = !DILocation(line: 58, column: 27, scope: !7)
!56 = !DILocation(line: 52, column: 35, scope: !7)
!57 = !DILocation(line: 53, column: 34, scope: !7)
!58 = !DILocation(line: 54, column: 33, scope: !7)
!59 = !DILocation(line: 55, column: 20, scope: !7)
!60 = !DILocation(line: 60, column: 20, scope: !7)
!61 = !DILocation(line: 63, column: 20, scope: !7)
!62 = !DILocation(line: 64, column: 20, scope: !7)
!63 = !DILocation(line: 65, column: 20, scope: !7)
!64 = !DILocation(line: 118, column: 15, scope: !65, inlinedAt: !67)
!65 = distinct !DILexicalBlockFile(scope: !7, file: !66, discriminator: 0)
!66 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!67 = !DILocation(line: 67, column: 42, scope: !7)
!68 = !DILocation(line: 121, column: 29, scope: !65, inlinedAt: !67)
!69 = !DILocation(line: 68, column: 25, scope: !7)
!70 = !DILocation(line: 68, column: 37, scope: !7)
!71 = !DILocation(line: 69, column: 25, scope: !7)
!72 = !DILocation(line: 69, column: 37, scope: !7)
!73 = !DILocation(line: 69, column: 4, scope: !7)
