; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_3(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %9 = shl i32 %8, 9, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 2, !dbg !12
  %12 = and i32 %11, 508, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %14 = srem i32 %13, 16, !dbg !14
  %15 = sext i32 %13 to i64, !dbg !15
  %16 = getelementptr float, ptr addrspace(1) %0, i64 %15, !dbg !15
  %17 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %16, i1 true) #3, !dbg !16
  %18 = sext i32 %14 to i64, !dbg !17
  %19 = getelementptr float, ptr addrspace(1) %1, i64 %18, !dbg !17
  %20 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %19, i1 true) #3, !dbg !18
  %21 = getelementptr float, ptr addrspace(1) %2, i64 %18, !dbg !19
  %22 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %21, i1 true) #3, !dbg !20
  %23 = extractvalue { i32, i32, i32, i32 } %22, 0, !dbg !20
  %24 = extractvalue { i32, i32, i32, i32 } %22, 1, !dbg !20
  %25 = extractvalue { i32, i32, i32, i32 } %22, 2, !dbg !20
  %26 = extractvalue { i32, i32, i32, i32 } %22, 3, !dbg !20
  %27 = bitcast i32 %23 to float, !dbg !20
  %28 = bitcast i32 %24 to float, !dbg !20
  %29 = bitcast i32 %25 to float, !dbg !20
  %30 = bitcast i32 %26 to float, !dbg !20
  %31 = getelementptr float, ptr addrspace(1) %3, i64 %18, !dbg !21
  %32 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %31, i1 true) #3, !dbg !22
  %33 = getelementptr float, ptr addrspace(1) %4, i64 %18, !dbg !23
  %34 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %33, i1 true) #3, !dbg !24
  %35 = fadd float %27, 0x3EE4F8B580000000, !dbg !25
  %36 = fadd float %28, 0x3EE4F8B580000000, !dbg !25
  %37 = fadd float %29, 0x3EE4F8B580000000, !dbg !25
  %38 = fadd float %30, 0x3EE4F8B580000000, !dbg !25
  %39 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !26
  %.not.i = icmp eq i32 %39, 0, !dbg !26
  %40 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !26
  %.not1.i = icmp eq i32 %40, 0, !dbg !26
  br i1 %.not.i, label %46, label %41, !dbg !26

41:                                               ; preds = %7
  br i1 %.not1.i, label %44, label %42, !dbg !26

42:                                               ; preds = %41
  %43 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %35) #3, !dbg !26
  br label %__nv_sqrtf.exit, !dbg !26

44:                                               ; preds = %41
  %45 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %35) #3, !dbg !26
  br label %__nv_sqrtf.exit, !dbg !26

46:                                               ; preds = %7
  br i1 %.not1.i, label %49, label %47, !dbg !26

47:                                               ; preds = %46
  %48 = tail call float @llvm.nvvm.sqrt.rn.f(float %35) #3, !dbg !26
  br label %__nv_sqrtf.exit, !dbg !26

49:                                               ; preds = %46
  %50 = tail call float @llvm.nvvm.sqrt.approx.f(float %35) #3, !dbg !26
  br label %__nv_sqrtf.exit, !dbg !26

__nv_sqrtf.exit:                                  ; preds = %42, %44, %47, %49
  %.0.i = phi float [ %43, %42 ], [ %45, %44 ], [ %48, %47 ], [ %50, %49 ], !dbg !26
  %51 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !26
  %.not.i1 = icmp eq i32 %51, 0, !dbg !26
  %52 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !26
  %.not1.i4 = icmp eq i32 %52, 0, !dbg !26
  br i1 %.not.i1, label %58, label %53, !dbg !26

53:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %56, label %54, !dbg !26

54:                                               ; preds = %53
  %55 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %36) #3, !dbg !26
  br label %__nv_sqrtf.exit5, !dbg !26

56:                                               ; preds = %53
  %57 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %36) #3, !dbg !26
  br label %__nv_sqrtf.exit5, !dbg !26

58:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %61, label %59, !dbg !26

59:                                               ; preds = %58
  %60 = tail call float @llvm.nvvm.sqrt.rn.f(float %36) #3, !dbg !26
  br label %__nv_sqrtf.exit5, !dbg !26

61:                                               ; preds = %58
  %62 = tail call float @llvm.nvvm.sqrt.approx.f(float %36) #3, !dbg !26
  br label %__nv_sqrtf.exit5, !dbg !26

__nv_sqrtf.exit5:                                 ; preds = %54, %56, %59, %61
  %.0.i3 = phi float [ %55, %54 ], [ %57, %56 ], [ %60, %59 ], [ %62, %61 ], !dbg !26
  %63 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !26
  %.not.i6 = icmp eq i32 %63, 0, !dbg !26
  %64 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !26
  %.not1.i9 = icmp eq i32 %64, 0, !dbg !26
  br i1 %.not.i6, label %70, label %65, !dbg !26

65:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %68, label %66, !dbg !26

66:                                               ; preds = %65
  %67 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %37) #3, !dbg !26
  br label %__nv_sqrtf.exit10, !dbg !26

68:                                               ; preds = %65
  %69 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %37) #3, !dbg !26
  br label %__nv_sqrtf.exit10, !dbg !26

70:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %73, label %71, !dbg !26

71:                                               ; preds = %70
  %72 = tail call float @llvm.nvvm.sqrt.rn.f(float %37) #3, !dbg !26
  br label %__nv_sqrtf.exit10, !dbg !26

73:                                               ; preds = %70
  %74 = tail call float @llvm.nvvm.sqrt.approx.f(float %37) #3, !dbg !26
  br label %__nv_sqrtf.exit10, !dbg !26

__nv_sqrtf.exit10:                                ; preds = %66, %68, %71, %73
  %.0.i8 = phi float [ %67, %66 ], [ %69, %68 ], [ %72, %71 ], [ %74, %73 ], !dbg !26
  %75 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !26
  %.not.i11 = icmp eq i32 %75, 0, !dbg !26
  %76 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !26
  %.not1.i14 = icmp eq i32 %76, 0, !dbg !26
  br i1 %.not.i11, label %82, label %77, !dbg !26

77:                                               ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %80, label %78, !dbg !26

78:                                               ; preds = %77
  %79 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %38) #3, !dbg !26
  br label %__nv_sqrtf.exit15, !dbg !26

80:                                               ; preds = %77
  %81 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %38) #3, !dbg !26
  br label %__nv_sqrtf.exit15, !dbg !26

82:                                               ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %85, label %83, !dbg !26

83:                                               ; preds = %82
  %84 = tail call float @llvm.nvvm.sqrt.rn.f(float %38) #3, !dbg !26
  br label %__nv_sqrtf.exit15, !dbg !26

85:                                               ; preds = %82
  %86 = tail call float @llvm.nvvm.sqrt.approx.f(float %38) #3, !dbg !26
  br label %__nv_sqrtf.exit15, !dbg !26

__nv_sqrtf.exit15:                                ; preds = %78, %80, %83, %85
  %.0.i13 = phi float [ %79, %78 ], [ %81, %80 ], [ %84, %83 ], [ %86, %85 ], !dbg !26
  %87 = extractvalue { i32, i32, i32, i32 } %17, 3, !dbg !16
  %88 = bitcast i32 %87 to float, !dbg !16
  %89 = extractvalue { i32, i32, i32, i32 } %20, 3, !dbg !18
  %90 = bitcast i32 %89 to float, !dbg !18
  %91 = fsub float %88, %90, !dbg !27
  %92 = extractvalue { i32, i32, i32, i32 } %17, 2, !dbg !16
  %93 = bitcast i32 %92 to float, !dbg !16
  %94 = extractvalue { i32, i32, i32, i32 } %20, 2, !dbg !18
  %95 = bitcast i32 %94 to float, !dbg !18
  %96 = fsub float %93, %95, !dbg !27
  %97 = extractvalue { i32, i32, i32, i32 } %17, 1, !dbg !16
  %98 = bitcast i32 %97 to float, !dbg !16
  %99 = extractvalue { i32, i32, i32, i32 } %20, 1, !dbg !18
  %100 = bitcast i32 %99 to float, !dbg !18
  %101 = fsub float %98, %100, !dbg !27
  %102 = extractvalue { i32, i32, i32, i32 } %17, 0, !dbg !16
  %103 = bitcast i32 %102 to float, !dbg !16
  %104 = extractvalue { i32, i32, i32, i32 } %20, 0, !dbg !18
  %105 = bitcast i32 %104 to float, !dbg !18
  %106 = fsub float %103, %105, !dbg !27
  %107 = extractvalue { i32, i32, i32, i32 } %34, 3, !dbg !24
  %108 = bitcast i32 %107 to float, !dbg !24
  %109 = extractvalue { i32, i32, i32, i32 } %34, 2, !dbg !24
  %110 = bitcast i32 %109 to float, !dbg !24
  %111 = extractvalue { i32, i32, i32, i32 } %34, 1, !dbg !24
  %112 = bitcast i32 %111 to float, !dbg !24
  %113 = extractvalue { i32, i32, i32, i32 } %34, 0, !dbg !24
  %114 = bitcast i32 %113 to float, !dbg !24
  %115 = extractvalue { i32, i32, i32, i32 } %32, 3, !dbg !22
  %116 = bitcast i32 %115 to float, !dbg !22
  %117 = extractvalue { i32, i32, i32, i32 } %32, 2, !dbg !22
  %118 = bitcast i32 %117 to float, !dbg !22
  %119 = extractvalue { i32, i32, i32, i32 } %32, 1, !dbg !22
  %120 = bitcast i32 %119 to float, !dbg !22
  %121 = extractvalue { i32, i32, i32, i32 } %32, 0, !dbg !22
  %122 = bitcast i32 %121 to float, !dbg !22
  %123 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !28
  %124 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !28
  %125 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !28
  %126 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !28
  %127 = fmul float %106, %123, !dbg !29
  %128 = fmul float %101, %124, !dbg !29
  %129 = fmul float %96, %125, !dbg !29
  %130 = fmul float %91, %126, !dbg !29
  %131 = fmul float %127, %122, !dbg !30
  %132 = fmul float %128, %120, !dbg !30
  %133 = fmul float %129, %118, !dbg !30
  %134 = fmul float %130, %116, !dbg !30
  %135 = fadd float %131, %114, !dbg !31
  %136 = fadd float %132, %112, !dbg !31
  %137 = fadd float %133, %110, !dbg !31
  %138 = fadd float %134, %108, !dbg !31
  %139 = getelementptr float, ptr addrspace(1) %5, i64 %15, !dbg !32
  %140 = bitcast float %135 to i32, !dbg !33
  %141 = bitcast float %136 to i32, !dbg !33
  %142 = bitcast float %137 to i32, !dbg !33
  %143 = bitcast float %138 to i32, !dbg !33
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %140, i32 %141, i32 %142, i32 %143, ptr addrspace(1) %139, i1 true) #3, !dbg !33
  ret void, !dbg !34
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cakiy7obgxdxaqgluregxpvmchnzdjnh7svw33vw4zu2xonzcszn.py", directory: "inductor_cache/ak")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_3, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_3, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_3", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_3", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 30, scope: !7)
!16 = !DILocation(line: 26, column: 35, scope: !7)
!17 = !DILocation(line: 27, column: 30, scope: !7)
!18 = !DILocation(line: 27, column: 35, scope: !7)
!19 = !DILocation(line: 28, column: 30, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 29, column: 31, scope: !7)
!22 = !DILocation(line: 29, column: 36, scope: !7)
!23 = !DILocation(line: 30, column: 31, scope: !7)
!24 = !DILocation(line: 30, column: 36, scope: !7)
!25 = !DILocation(line: 33, column: 18, scope: !7)
!26 = !DILocation(line: 34, column: 26, scope: !7)
!27 = !DILocation(line: 31, column: 18, scope: !7)
!28 = !DILocation(line: 36, column: 18, scope: !7)
!29 = !DILocation(line: 39, column: 19, scope: !7)
!30 = !DILocation(line: 40, column: 20, scope: !7)
!31 = !DILocation(line: 41, column: 20, scope: !7)
!32 = !DILocation(line: 42, column: 25, scope: !7)
!33 = !DILocation(line: 42, column: 37, scope: !7)
!34 = !DILocation(line: 42, column: 4, scope: !7)
