; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_13(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %12 = shl i32 %11, 8, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = shl i32 %13, 1, !dbg !12
  %15 = and i32 %14, 254, !dbg !12
  %16 = or disjoint i32 %12, %15, !dbg !13
  %17 = or disjoint i32 %16, 1, !dbg !13
  %18 = icmp slt i32 %16, 4352, !dbg !14
  %.frozen6 = freeze i32 %16, !dbg !15
  %19 = sdiv i32 %.frozen6, 16, !dbg !15
  %20 = srem i32 %19, 68, !dbg !16
  %.frozen = freeze i32 %16, !dbg !17
  %21 = sdiv i32 %.frozen, 4, !dbg !17
  %22 = mul i32 %21, 4, !dbg !18
  %.decomposed = sub i32 %.frozen, %22, !dbg !18
  %23 = srem i32 %17, 4, !dbg !18
  %24 = srem i32 %21, 4, !dbg !19
  %25 = sdiv i32 %16, 1088, !dbg !20
  %26 = mul i32 %19, 16, !dbg !21
  %.decomposed7 = sub i32 %.frozen6, %26, !dbg !21
  %27 = sext i32 %20 to i64, !dbg !22
  %28 = getelementptr float, ptr addrspace(1) %3, i64 %27, !dbg !22
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 %18) #3, !dbg !23
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 %18) #3, !dbg !23
  %31 = getelementptr float, ptr addrspace(1) %4, i64 %27, !dbg !24
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 %18) #3, !dbg !25
  %33 = bitcast i32 %32 to float, !dbg !25
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 %18) #3, !dbg !25
  %35 = bitcast i32 %34 to float, !dbg !25
  %36 = getelementptr float, ptr addrspace(1) %5, i64 %27, !dbg !26
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 %18) #3, !dbg !27
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 %18) #3, !dbg !27
  %39 = getelementptr float, ptr addrspace(1) %6, i64 %27, !dbg !28
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 %18) #3, !dbg !29
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 %18) #3, !dbg !29
  %42 = icmp slt i32 %20, 64, !dbg !30
  %43 = shl nsw i32 %.decomposed, 1, !dbg !31
  %44 = shl nsw i32 %23, 1, !dbg !31
  %45 = shl nsw i32 %24, 4, !dbg !32
  %46 = shl nsw i32 %20, 6, !dbg !33
  %47 = shl i32 %25, 12, !dbg !34
  %48 = add i32 %45, %47, !dbg !35
  %49 = add i32 %48, %43, !dbg !36
  %50 = add i32 %49, %46, !dbg !37
  %51 = add i32 %48, %44, !dbg !36
  %52 = add i32 %51, %46, !dbg !37
  %53 = sext i32 %50 to i64, !dbg !38
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !38
  %55 = sext i32 %52 to i64, !dbg !38
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !38
  %57 = and i1 %18, %42, !dbg !39
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %54, i1 %57, i32 0, i1 %57) #3, !dbg !40
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %56, i1 %57, i32 0, i1 %57) #3, !dbg !40
  %60 = or disjoint i32 %48, 1, !dbg !41
  %61 = add i32 %60, %43, !dbg !42
  %62 = add i32 %61, %46, !dbg !43
  %63 = add i32 %60, %44, !dbg !42
  %64 = add i32 %63, %46, !dbg !43
  %65 = sext i32 %62 to i64, !dbg !44
  %66 = getelementptr float, ptr addrspace(1) %0, i64 %65, !dbg !44
  %67 = sext i32 %64 to i64, !dbg !44
  %68 = getelementptr float, ptr addrspace(1) %0, i64 %67, !dbg !44
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %66, i1 %57, i32 0, i1 %57) #3, !dbg !45
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %68, i1 %57, i32 0, i1 %57) #3, !dbg !45
  %71 = or disjoint i32 %48, 8, !dbg !46
  %72 = add i32 %71, %43, !dbg !47
  %73 = add i32 %72, %46, !dbg !48
  %74 = add i32 %71, %44, !dbg !47
  %75 = add i32 %74, %46, !dbg !48
  %76 = sext i32 %73 to i64, !dbg !49
  %77 = getelementptr float, ptr addrspace(1) %0, i64 %76, !dbg !49
  %78 = sext i32 %75 to i64, !dbg !49
  %79 = getelementptr float, ptr addrspace(1) %0, i64 %78, !dbg !49
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %77, i1 %57, i32 0, i1 %57) #3, !dbg !50
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %79, i1 %57, i32 0, i1 %57) #3, !dbg !50
  %82 = or disjoint i32 %48, 9, !dbg !51
  %83 = add i32 %82, %43, !dbg !52
  %84 = add i32 %83, %46, !dbg !53
  %85 = add i32 %82, %44, !dbg !52
  %86 = add i32 %85, %46, !dbg !53
  %87 = sext i32 %84 to i64, !dbg !54
  %88 = getelementptr float, ptr addrspace(1) %0, i64 %87, !dbg !54
  %89 = sext i32 %86 to i64, !dbg !54
  %90 = getelementptr float, ptr addrspace(1) %0, i64 %89, !dbg !54
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %88, i1 %57, i32 0, i1 %57) #3, !dbg !55
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %90, i1 %57, i32 0, i1 %57) #3, !dbg !55
  %93 = icmp sgt i32 %20, 63, !dbg !56
  %94 = add nsw i32 %20, -64, !dbg !57
  %95 = shl nsw i32 %94, 4, !dbg !58
  %96 = shl nsw i32 %25, 6, !dbg !59
  %97 = add nsw i32 %96, %.decomposed7, !dbg !60
  %98 = add nsw i32 %97, %95, !dbg !61
  %99 = sext i32 %98 to i64, !dbg !62
  %100 = getelementptr float, ptr addrspace(1) %1, i64 %99, !dbg !62
  %101 = and i1 %18, %93, !dbg !63
  %102 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %100, i1 %101, i32 0, i1 %101, i32 0, i1 %101) #3, !dbg !64
  %103 = sext i32 %94 to i64, !dbg !65
  %104 = getelementptr float, ptr addrspace(1) %2, i64 %103, !dbg !65
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %104, i1 %101, i32 0, i1 %101) #3, !dbg !66
  %106 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %104, i1 %101, i32 0, i1 %101) #3, !dbg !66
  %107 = fadd float %33, 0x3EE4F8B580000000, !dbg !67
  %108 = fadd float %35, 0x3EE4F8B580000000, !dbg !67
  %109 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !68
  %.not.i = icmp eq i32 %109, 0, !dbg !68
  %110 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !68
  %.not1.i = icmp eq i32 %110, 0, !dbg !68
  br i1 %.not.i, label %116, label %111, !dbg !68

111:                                              ; preds = %10
  br i1 %.not1.i, label %114, label %112, !dbg !68

112:                                              ; preds = %111
  %113 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %107) #3, !dbg !68
  br label %__nv_sqrtf.exit, !dbg !68

114:                                              ; preds = %111
  %115 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %107) #3, !dbg !68
  br label %__nv_sqrtf.exit, !dbg !68

116:                                              ; preds = %10
  br i1 %.not1.i, label %119, label %117, !dbg !68

117:                                              ; preds = %116
  %118 = tail call float @llvm.nvvm.sqrt.rn.f(float %107) #3, !dbg !68
  br label %__nv_sqrtf.exit, !dbg !68

119:                                              ; preds = %116
  %120 = tail call float @llvm.nvvm.sqrt.approx.f(float %107) #3, !dbg !68
  br label %__nv_sqrtf.exit, !dbg !68

__nv_sqrtf.exit:                                  ; preds = %112, %114, %117, %119
  %.0.i = phi float [ %113, %112 ], [ %115, %114 ], [ %118, %117 ], [ %120, %119 ], !dbg !68
  %121 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !68
  %.not.i1 = icmp eq i32 %121, 0, !dbg !68
  %122 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !68
  %.not1.i4 = icmp eq i32 %122, 0, !dbg !68
  br i1 %.not.i1, label %128, label %123, !dbg !68

123:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %126, label %124, !dbg !68

124:                                              ; preds = %123
  %125 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %108) #3, !dbg !68
  br label %__nv_sqrtf.exit5, !dbg !68

126:                                              ; preds = %123
  %127 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %108) #3, !dbg !68
  br label %__nv_sqrtf.exit5, !dbg !68

128:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %131, label %129, !dbg !68

129:                                              ; preds = %128
  %130 = tail call float @llvm.nvvm.sqrt.rn.f(float %108) #3, !dbg !68
  br label %__nv_sqrtf.exit5, !dbg !68

131:                                              ; preds = %128
  %132 = tail call float @llvm.nvvm.sqrt.approx.f(float %108) #3, !dbg !68
  br label %__nv_sqrtf.exit5, !dbg !68

__nv_sqrtf.exit5:                                 ; preds = %124, %126, %129, %131
  %.0.i3 = phi float [ %125, %124 ], [ %127, %126 ], [ %130, %129 ], [ %132, %131 ], !dbg !68
  %133 = bitcast i32 %70 to float, !dbg !45
  %134 = bitcast i32 %59 to float, !dbg !40
  %135 = fcmp ogt float %133, %134, !dbg !69
  %136 = fcmp uno float %133, 0.000000e+00, !dbg !73
  %137 = or i1 %135, %136, !dbg !74
  %138 = select i1 %137, float %133, float %134, !dbg !75
  %139 = bitcast i32 %81 to float, !dbg !50
  %140 = fcmp olt float %138, %139, !dbg !76
  %141 = fcmp uno float %139, 0.000000e+00, !dbg !78
  %142 = or i1 %141, %140, !dbg !79
  %143 = select i1 %142, float %139, float %138, !dbg !80
  %144 = bitcast i32 %92 to float, !dbg !55
  %145 = fcmp olt float %143, %144, !dbg !81
  %146 = fcmp uno float %144, 0.000000e+00, !dbg !83
  %147 = or i1 %146, %145, !dbg !84
  %148 = select i1 %147, float %144, float %143, !dbg !85
  %149 = extractvalue { i32, i32 } %102, 1, !dbg !64
  %150 = bitcast i32 %149 to float, !dbg !64
  %151 = bitcast i32 %106 to float, !dbg !66
  %152 = fadd float %150, %151, !dbg !86
  %153 = select i1 %42, float %148, float %152, !dbg !87
  %154 = bitcast i32 %30 to float, !dbg !23
  %155 = fsub float %153, %154, !dbg !88
  %156 = bitcast i32 %69 to float, !dbg !45
  %157 = bitcast i32 %58 to float, !dbg !40
  %158 = fcmp ogt float %156, %157, !dbg !69
  %159 = fcmp uno float %156, 0.000000e+00, !dbg !73
  %160 = or i1 %158, %159, !dbg !74
  %161 = select i1 %160, float %156, float %157, !dbg !75
  %162 = bitcast i32 %80 to float, !dbg !50
  %163 = fcmp olt float %161, %162, !dbg !76
  %164 = fcmp uno float %162, 0.000000e+00, !dbg !78
  %165 = or i1 %164, %163, !dbg !79
  %166 = select i1 %165, float %162, float %161, !dbg !80
  %167 = bitcast i32 %91 to float, !dbg !55
  %168 = fcmp olt float %166, %167, !dbg !81
  %169 = fcmp uno float %167, 0.000000e+00, !dbg !83
  %170 = or i1 %169, %168, !dbg !84
  %171 = select i1 %170, float %167, float %166, !dbg !85
  %172 = extractvalue { i32, i32 } %102, 0, !dbg !64
  %173 = bitcast i32 %172 to float, !dbg !64
  %174 = bitcast i32 %105 to float, !dbg !66
  %175 = fadd float %173, %174, !dbg !86
  %176 = select i1 %42, float %171, float %175, !dbg !87
  %177 = bitcast i32 %29 to float, !dbg !23
  %178 = fsub float %176, %177, !dbg !88
  %179 = bitcast i32 %41 to float, !dbg !29
  %180 = bitcast i32 %40 to float, !dbg !29
  %181 = bitcast i32 %38 to float, !dbg !27
  %182 = bitcast i32 %37 to float, !dbg !27
  %183 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !89
  %184 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !89
  %185 = fmul float %178, %183, !dbg !90
  %186 = fmul float %155, %184, !dbg !90
  %187 = fmul float %185, %182, !dbg !91
  %188 = fmul float %186, %181, !dbg !91
  %189 = fadd float %187, %180, !dbg !92
  %190 = fadd float %188, %179, !dbg !92
  %191 = fcmp olt float %189, 0.000000e+00, !dbg !93
  %192 = fcmp olt float %190, 0.000000e+00, !dbg !93
  %193 = select i1 %191, float 0.000000e+00, float %189, !dbg !95
  %194 = select i1 %192, float 0.000000e+00, float %190, !dbg !95
  %195 = sext i32 %16 to i64, !dbg !96
  %196 = getelementptr float, ptr addrspace(1) %7, i64 %195, !dbg !96
  %197 = bitcast float %176 to i32, !dbg !97
  %198 = bitcast float %153 to i32, !dbg !97
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %197, i32 %198, ptr addrspace(1) %196, i1 %18) #3, !dbg !97
  %199 = getelementptr float, ptr addrspace(1) %8, i64 %195, !dbg !98
  %200 = bitcast float %193 to i32, !dbg !99
  %201 = bitcast float %194 to i32, !dbg !99
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %200, i32 %201, ptr addrspace(1) %199, i1 %18) #3, !dbg !99
  ret void, !dbg !100
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ce3n5t42wknykpmronaszx576l2lh6m5dtngiqxcvwc236snad76.py", directory: "inductor_cache/e3")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_13, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_13, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_13", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_13", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 27, scope: !7)
!17 = !DILocation(line: 26, column: 21, scope: !7)
!18 = !DILocation(line: 25, column: 19, scope: !7)
!19 = !DILocation(line: 26, column: 26, scope: !7)
!20 = !DILocation(line: 27, column: 19, scope: !7)
!21 = !DILocation(line: 28, column: 19, scope: !7)
!22 = !DILocation(line: 30, column: 31, scope: !7)
!23 = !DILocation(line: 30, column: 36, scope: !7)
!24 = !DILocation(line: 31, column: 31, scope: !7)
!25 = !DILocation(line: 31, column: 36, scope: !7)
!26 = !DILocation(line: 32, column: 31, scope: !7)
!27 = !DILocation(line: 32, column: 36, scope: !7)
!28 = !DILocation(line: 33, column: 31, scope: !7)
!29 = !DILocation(line: 33, column: 36, scope: !7)
!30 = !DILocation(line: 38, column: 18, scope: !7)
!31 = !DILocation(line: 39, column: 32, scope: !7)
!32 = !DILocation(line: 39, column: 40, scope: !7)
!33 = !DILocation(line: 39, column: 49, scope: !7)
!34 = !DILocation(line: 39, column: 60, scope: !7)
!35 = !DILocation(line: 39, column: 37, scope: !7)
!36 = !DILocation(line: 39, column: 45, scope: !7)
!37 = !DILocation(line: 39, column: 55, scope: !7)
!38 = !DILocation(line: 39, column: 30, scope: !7)
!39 = !DILocation(line: 39, column: 72, scope: !7)
!40 = !DILocation(line: 39, column: 65, scope: !7)
!41 = !DILocation(line: 40, column: 41, scope: !7)
!42 = !DILocation(line: 40, column: 49, scope: !7)
!43 = !DILocation(line: 40, column: 59, scope: !7)
!44 = !DILocation(line: 40, column: 30, scope: !7)
!45 = !DILocation(line: 40, column: 69, scope: !7)
!46 = !DILocation(line: 42, column: 41, scope: !7)
!47 = !DILocation(line: 42, column: 49, scope: !7)
!48 = !DILocation(line: 42, column: 59, scope: !7)
!49 = !DILocation(line: 42, column: 30, scope: !7)
!50 = !DILocation(line: 42, column: 69, scope: !7)
!51 = !DILocation(line: 44, column: 42, scope: !7)
!52 = !DILocation(line: 44, column: 50, scope: !7)
!53 = !DILocation(line: 44, column: 60, scope: !7)
!54 = !DILocation(line: 44, column: 31, scope: !7)
!55 = !DILocation(line: 44, column: 70, scope: !7)
!56 = !DILocation(line: 48, column: 20, scope: !7)
!57 = !DILocation(line: 51, column: 48, scope: !7)
!58 = !DILocation(line: 51, column: 40, scope: !7)
!59 = !DILocation(line: 51, column: 57, scope: !7)
!60 = !DILocation(line: 51, column: 36, scope: !7)
!61 = !DILocation(line: 51, column: 54, scope: !7)
!62 = !DILocation(line: 51, column: 31, scope: !7)
!63 = !DILocation(line: 51, column: 70, scope: !7)
!64 = !DILocation(line: 51, column: 62, scope: !7)
!65 = !DILocation(line: 52, column: 31, scope: !7)
!66 = !DILocation(line: 52, column: 44, scope: !7)
!67 = !DILocation(line: 59, column: 20, scope: !7)
!68 = !DILocation(line: 60, column: 27, scope: !7)
!69 = !DILocation(line: 118, column: 15, scope: !70, inlinedAt: !72)
!70 = distinct !DILexicalBlockFile(scope: !7, file: !71, discriminator: 0)
!71 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!72 = !DILocation(line: 41, column: 40, scope: !7)
!73 = !DILocation(line: 120, column: 21, scope: !70, inlinedAt: !72)
!74 = !DILocation(line: 120, column: 16, scope: !70, inlinedAt: !72)
!75 = !DILocation(line: 121, column: 29, scope: !70, inlinedAt: !72)
!76 = !DILocation(line: 118, column: 15, scope: !70, inlinedAt: !77)
!77 = !DILocation(line: 43, column: 40, scope: !7)
!78 = !DILocation(line: 120, column: 21, scope: !70, inlinedAt: !77)
!79 = !DILocation(line: 120, column: 16, scope: !70, inlinedAt: !77)
!80 = !DILocation(line: 121, column: 29, scope: !70, inlinedAt: !77)
!81 = !DILocation(line: 118, column: 15, scope: !70, inlinedAt: !82)
!82 = !DILocation(line: 45, column: 42, scope: !7)
!83 = !DILocation(line: 120, column: 21, scope: !70, inlinedAt: !82)
!84 = !DILocation(line: 120, column: 16, scope: !70, inlinedAt: !82)
!85 = !DILocation(line: 121, column: 29, scope: !70, inlinedAt: !82)
!86 = !DILocation(line: 53, column: 20, scope: !7)
!87 = !DILocation(line: 0, scope: !7)
!88 = !DILocation(line: 57, column: 20, scope: !7)
!89 = !DILocation(line: 62, column: 20, scope: !7)
!90 = !DILocation(line: 65, column: 20, scope: !7)
!91 = !DILocation(line: 66, column: 20, scope: !7)
!92 = !DILocation(line: 67, column: 20, scope: !7)
!93 = !DILocation(line: 118, column: 15, scope: !70, inlinedAt: !94)
!94 = !DILocation(line: 69, column: 42, scope: !7)
!95 = !DILocation(line: 121, column: 29, scope: !70, inlinedAt: !94)
!96 = !DILocation(line: 70, column: 25, scope: !7)
!97 = !DILocation(line: 70, column: 37, scope: !7)
!98 = !DILocation(line: 71, column: 25, scope: !7)
!99 = !DILocation(line: 71, column: 37, scope: !7)
!100 = !DILocation(line: 71, column: 4, scope: !7)
