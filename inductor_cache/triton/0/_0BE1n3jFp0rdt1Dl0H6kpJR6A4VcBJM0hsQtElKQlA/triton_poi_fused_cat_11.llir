; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_11(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %8 = shl i32 %7, 9, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = shl i32 %9, 2, !dbg !12
  %11 = and i32 %10, 508, !dbg !12
  %12 = or disjoint i32 %8, %11, !dbg !13
  %13 = icmp slt i32 %12, 50176, !dbg !14
  %.frozen = freeze i32 %12, !dbg !15
  %14 = sdiv i32 %.frozen, 256, !dbg !15
  %15 = mul i32 %14, 256, !dbg !16
  %.decomposed = sub i32 %.frozen, %15, !dbg !16
  %16 = icmp slt i32 %.decomposed, 128, !dbg !17
  %17 = shl nsw i32 %14, 7, !dbg !18
  %18 = add nsw i32 %17, %.decomposed, !dbg !19
  %19 = sext i32 %18 to i64, !dbg !20
  %20 = getelementptr float, ptr addrspace(1) %0, i64 %19, !dbg !20
  %21 = and i1 %13, %16, !dbg !21
  %22 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %20, i1 %21, i32 0, i1 %21, i32 0, i1 %21, i32 0, i1 %21, i32 0, i1 %21) #1, !dbg !22
  %23 = extractvalue { i32, i32, i32, i32 } %22, 0, !dbg !22
  %24 = extractvalue { i32, i32, i32, i32 } %22, 1, !dbg !22
  %25 = extractvalue { i32, i32, i32, i32 } %22, 2, !dbg !22
  %26 = extractvalue { i32, i32, i32, i32 } %22, 3, !dbg !22
  %27 = sext i32 %.decomposed to i64, !dbg !23
  %28 = getelementptr float, ptr addrspace(1) %1, i64 %27, !dbg !23
  %29 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %28, i1 %21, i32 0, i1 %21, i32 0, i1 %21, i32 0, i1 %21, i32 0, i1 %21) #1, !dbg !24
  %30 = extractvalue { i32, i32, i32, i32 } %29, 0, !dbg !24
  %31 = extractvalue { i32, i32, i32, i32 } %29, 1, !dbg !24
  %32 = extractvalue { i32, i32, i32, i32 } %29, 2, !dbg !24
  %33 = extractvalue { i32, i32, i32, i32 } %29, 3, !dbg !24
  %34 = icmp sgt i32 %.decomposed, 127, !dbg !25
  %35 = add nsw i32 %.decomposed, -128, !dbg !26
  %36 = add nsw i32 %17, %35, !dbg !27
  %37 = sext i32 %36 to i64, !dbg !28
  %38 = getelementptr float, ptr addrspace(1) %2, i64 %37, !dbg !28
  %39 = and i1 %13, %34, !dbg !29
  %40 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %38, i1 %39, i32 0, i1 %39, i32 0, i1 %39, i32 0, i1 %39, i32 0, i1 %39) #1, !dbg !30
  %41 = extractvalue { i32, i32, i32, i32 } %40, 0, !dbg !30
  %42 = extractvalue { i32, i32, i32, i32 } %40, 1, !dbg !30
  %43 = extractvalue { i32, i32, i32, i32 } %40, 2, !dbg !30
  %44 = extractvalue { i32, i32, i32, i32 } %40, 3, !dbg !30
  %45 = sext i32 %35 to i64, !dbg !31
  %46 = getelementptr float, ptr addrspace(1) %3, i64 %45, !dbg !31
  %47 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %46, i1 %39, i32 0, i1 %39, i32 0, i1 %39, i32 0, i1 %39, i32 0, i1 %39) #1, !dbg !32
  %48 = extractvalue { i32, i32, i32, i32 } %47, 0, !dbg !32
  %49 = extractvalue { i32, i32, i32, i32 } %47, 1, !dbg !32
  %50 = extractvalue { i32, i32, i32, i32 } %47, 2, !dbg !32
  %51 = extractvalue { i32, i32, i32, i32 } %47, 3, !dbg !32
  %52 = insertelement <8 x i32> poison, i32 %44, i64 0, !dbg !30
  %53 = insertelement <8 x i32> %52, i32 %43, i64 1, !dbg !30
  %54 = insertelement <8 x i32> %53, i32 %42, i64 2, !dbg !30
  %55 = insertelement <8 x i32> %54, i32 %41, i64 3, !dbg !30
  %56 = insertelement <8 x i32> %55, i32 %26, i64 4, !dbg !30
  %57 = insertelement <8 x i32> %56, i32 %25, i64 5, !dbg !30
  %58 = insertelement <8 x i32> %57, i32 %24, i64 6, !dbg !30
  %59 = insertelement <8 x i32> %58, i32 %23, i64 7, !dbg !30
  %60 = bitcast <8 x i32> %59 to <8 x float>, !dbg !30
  %61 = insertelement <8 x i32> poison, i32 %51, i64 0, !dbg !32
  %62 = insertelement <8 x i32> %61, i32 %50, i64 1, !dbg !32
  %63 = insertelement <8 x i32> %62, i32 %49, i64 2, !dbg !32
  %64 = insertelement <8 x i32> %63, i32 %48, i64 3, !dbg !32
  %65 = insertelement <8 x i32> %64, i32 %33, i64 4, !dbg !32
  %66 = insertelement <8 x i32> %65, i32 %32, i64 5, !dbg !32
  %67 = insertelement <8 x i32> %66, i32 %31, i64 6, !dbg !32
  %68 = insertelement <8 x i32> %67, i32 %30, i64 7, !dbg !32
  %69 = bitcast <8 x i32> %68 to <8 x float>, !dbg !32
  %70 = fadd <8 x float> %60, %69, !dbg !33
  %71 = fcmp olt <8 x float> %70, zeroinitializer, !dbg !34
  %72 = extractelement <8 x i1> %71, i64 7, !dbg !38
  %73 = extractelement <8 x float> %70, i64 7, !dbg !38
  %74 = select i1 %72, float 0.000000e+00, float %73, !dbg !38
  %75 = extractelement <8 x i1> %71, i64 6, !dbg !38
  %76 = extractelement <8 x float> %70, i64 6, !dbg !38
  %77 = select i1 %75, float 0.000000e+00, float %76, !dbg !38
  %78 = extractelement <8 x i1> %71, i64 5, !dbg !38
  %79 = extractelement <8 x float> %70, i64 5, !dbg !38
  %80 = select i1 %78, float 0.000000e+00, float %79, !dbg !38
  %81 = extractelement <8 x i1> %71, i64 4, !dbg !38
  %82 = extractelement <8 x float> %70, i64 4, !dbg !38
  %83 = select i1 %81, float 0.000000e+00, float %82, !dbg !38
  %84 = extractelement <8 x i1> %71, i64 3, !dbg !40
  %85 = extractelement <8 x float> %70, i64 3, !dbg !40
  %86 = select i1 %84, float 0.000000e+00, float %85, !dbg !40
  %87 = extractelement <8 x i1> %71, i64 2, !dbg !40
  %88 = extractelement <8 x float> %70, i64 2, !dbg !40
  %89 = select i1 %87, float 0.000000e+00, float %88, !dbg !40
  %90 = extractelement <8 x i1> %71, i64 1, !dbg !40
  %91 = extractelement <8 x float> %70, i64 1, !dbg !40
  %92 = select i1 %90, float 0.000000e+00, float %91, !dbg !40
  %93 = extractelement <8 x i1> %71, i64 0, !dbg !40
  %94 = extractelement <8 x float> %70, i64 0, !dbg !40
  %95 = select i1 %93, float 0.000000e+00, float %94, !dbg !40
  %96 = select i1 %16, float %74, float %86, !dbg !41
  %97 = select i1 %16, float %77, float %89, !dbg !41
  %98 = select i1 %16, float %80, float %92, !dbg !41
  %99 = select i1 %16, float %83, float %95, !dbg !41
  %100 = sext i32 %12 to i64, !dbg !42
  %101 = getelementptr float, ptr addrspace(1) %4, i64 %100, !dbg !42
  %102 = bitcast float %96 to i32, !dbg !43
  %103 = bitcast float %97 to i32, !dbg !43
  %104 = bitcast float %98 to i32, !dbg !43
  %105 = bitcast float %99 to i32, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %102, i32 %103, i32 %104, i32 %105, ptr addrspace(1) %101, i1 %13) #1, !dbg !43
  ret void, !dbg !44
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ckjlgpjsrtjdlbp7rwc6ck6a3hxahydtuc2lioob2w7t7n3ru5eb.py", directory: "inductor_cache/kj")
!4 = !{ptr @triton_poi_fused_cat_11, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_11, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_11", linkageName: "triton_poi_fused_cat_11", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 24, column: 19, scope: !7)
!17 = !DILocation(line: 31, column: 18, scope: !7)
!18 = !DILocation(line: 32, column: 34, scope: !7)
!19 = !DILocation(line: 32, column: 40, scope: !7)
!20 = !DILocation(line: 32, column: 30, scope: !7)
!21 = !DILocation(line: 32, column: 53, scope: !7)
!22 = !DILocation(line: 32, column: 46, scope: !7)
!23 = !DILocation(line: 33, column: 30, scope: !7)
!24 = !DILocation(line: 33, column: 35, scope: !7)
!25 = !DILocation(line: 39, column: 20, scope: !7)
!26 = !DILocation(line: 42, column: 50, scope: !7)
!27 = !DILocation(line: 42, column: 41, scope: !7)
!28 = !DILocation(line: 42, column: 31, scope: !7)
!29 = !DILocation(line: 42, column: 64, scope: !7)
!30 = !DILocation(line: 42, column: 56, scope: !7)
!31 = !DILocation(line: 43, column: 31, scope: !7)
!32 = !DILocation(line: 43, column: 45, scope: !7)
!33 = !DILocation(line: 44, column: 20, scope: !7)
!34 = !DILocation(line: 118, column: 15, scope: !35, inlinedAt: !37)
!35 = distinct !DILexicalBlockFile(scope: !7, file: !36, discriminator: 0)
!36 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!37 = !DILocation(line: 46, column: 42, scope: !7)
!38 = !DILocation(line: 121, column: 29, scope: !35, inlinedAt: !39)
!39 = !DILocation(line: 36, column: 40, scope: !7)
!40 = !DILocation(line: 121, column: 29, scope: !35, inlinedAt: !37)
!41 = !DILocation(line: 0, scope: !7)
!42 = !DILocation(line: 50, column: 25, scope: !7)
!43 = !DILocation(line: 50, column: 37, scope: !7)
!44 = !DILocation(line: 50, column: 4, scope: !7)
