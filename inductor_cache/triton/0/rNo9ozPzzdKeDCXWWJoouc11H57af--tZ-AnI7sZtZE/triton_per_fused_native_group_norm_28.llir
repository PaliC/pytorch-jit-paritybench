; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused_native_group_norm_28(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !10
  %8 = icmp slt i32 %7, 128, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = and i32 %9, 31, !dbg !12
  %11 = shl i32 %7, 5, !dbg !13
  %12 = or disjoint i32 %11, %10, !dbg !14
  %13 = sext i32 %12 to i64, !dbg !15
  %14 = getelementptr float, ptr addrspace(1) %0, i64 %13, !dbg !15
  %15 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %14, i1 %8, i32 0, i1 %8) #4, !dbg !16
  %16 = bitcast i32 %15 to float, !dbg !16
  %17 = select i1 %8, float %16, float 0.000000e+00, !dbg !17
  %18 = bitcast float %17 to i32, !dbg !18
  %19 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %18, i32 16, i32 31), !dbg !18
  %20 = bitcast i32 %19 to float, !dbg !18
  %21 = fadd float %17, %20, !dbg !22
  %22 = bitcast float %21 to i32, !dbg !18
  %23 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %22, i32 8, i32 31), !dbg !18
  %24 = bitcast i32 %23 to float, !dbg !18
  %25 = fadd float %21, %24, !dbg !22
  %26 = bitcast float %25 to i32, !dbg !18
  %27 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %26, i32 4, i32 31), !dbg !18
  %28 = bitcast i32 %27 to float, !dbg !18
  %29 = fadd float %25, %28, !dbg !22
  %30 = bitcast float %29 to i32, !dbg !18
  %31 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %30, i32 2, i32 31), !dbg !18
  %32 = bitcast i32 %31 to float, !dbg !18
  %33 = fadd float %29, %32, !dbg !22
  %34 = bitcast float %33 to i32, !dbg !18
  %35 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %34, i32 1, i32 31), !dbg !18
  %36 = bitcast i32 %35 to float, !dbg !18
  %37 = fadd float %33, %36, !dbg !22
  %38 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %37, float 3.200000e+01) #4, !dbg !24
  %39 = fsub float %16, %38, !dbg !25
  %40 = fmul float %39, %39, !dbg !26
  %41 = select i1 %8, float %40, float 0.000000e+00, !dbg !27
  %42 = bitcast float %41 to i32, !dbg !28
  %43 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %42, i32 16, i32 31), !dbg !28
  %44 = bitcast i32 %43 to float, !dbg !28
  %45 = fadd float %41, %44, !dbg !30
  %46 = bitcast float %45 to i32, !dbg !28
  %47 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %46, i32 8, i32 31), !dbg !28
  %48 = bitcast i32 %47 to float, !dbg !28
  %49 = fadd float %45, %48, !dbg !30
  %50 = bitcast float %49 to i32, !dbg !28
  %51 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %50, i32 4, i32 31), !dbg !28
  %52 = bitcast i32 %51 to float, !dbg !28
  %53 = fadd float %49, %52, !dbg !30
  %54 = bitcast float %53 to i32, !dbg !28
  %55 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %54, i32 2, i32 31), !dbg !28
  %56 = bitcast i32 %55 to float, !dbg !28
  %57 = fadd float %53, %56, !dbg !30
  %58 = bitcast float %57 to i32, !dbg !28
  %59 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %58, i32 1, i32 31), !dbg !28
  %60 = bitcast i32 %59 to float, !dbg !28
  %61 = fadd float %57, %60, !dbg !30
  %62 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %61, float 3.200000e+01) #4, !dbg !31
  %63 = fadd float %62, 0x3EE4F8B580000000, !dbg !32
  %64 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i = icmp eq i32 %64, 0, !dbg !33
  br i1 %.not.i, label %67, label %65, !dbg !33

65:                                               ; preds = %6
  %66 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %63), !dbg !33
  br label %__nv_rsqrtf.exit, !dbg !33

67:                                               ; preds = %6
  %68 = tail call float @llvm.nvvm.rsqrt.approx.f(float %63), !dbg !33
  br label %__nv_rsqrtf.exit, !dbg !33

__nv_rsqrtf.exit:                                 ; preds = %65, %67
  %.0.i = phi float [ %66, %65 ], [ %68, %67 ], !dbg !33
  %69 = sext i32 %7 to i64, !dbg !34
  %70 = getelementptr float, ptr addrspace(1) %3, i64 %69, !dbg !34
  %71 = and i32 %9, 63, !dbg !35
  %72 = icmp eq i32 %71, 0, !dbg !35
  %73 = bitcast float %.0.i to i32, !dbg !35
  %74 = and i1 %72, %8, !dbg !35
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %73, ptr addrspace(1) %70, i1 %74) #4, !dbg !35
  %75 = getelementptr float, ptr addrspace(1) %1, i64 %69, !dbg !36
  %76 = bitcast float %38 to i32, !dbg !37
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %76, ptr addrspace(1) %75, i1 %74) #4, !dbg !37
  %77 = getelementptr float, ptr addrspace(1) %2, i64 %69, !dbg !38
  %78 = bitcast float %61 to i32, !dbg !39
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %78, ptr addrspace(1) %77, i1 %74) #4, !dbg !39
  ret void, !dbg !40
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cvrzc52y3f2llkmt2yfomjg3e77by66lifg6g4gs5g5btxeqjlbi.py", directory: "inductor_cache/vr")
!4 = !{ptr @triton_per_fused_native_group_norm_28, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_native_group_norm_28, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_native_group_norm_28", linkageName: "triton_per_fused_native_group_norm_28", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 21, scope: !7)
!12 = !DILocation(line: 26, column: 34, scope: !7)
!13 = !DILocation(line: 31, column: 38, scope: !7)
!14 = !DILocation(line: 31, column: 35, scope: !7)
!15 = !DILocation(line: 31, column: 30, scope: !7)
!16 = !DILocation(line: 31, column: 43, scope: !7)
!17 = !DILocation(line: 35, column: 33, scope: !7)
!18 = !DILocation(line: 267, column: 36, scope: !19, inlinedAt: !21)
!19 = distinct !DILexicalBlockFile(scope: !7, file: !20, discriminator: 0)
!20 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!21 = !DILocation(line: 36, column: 24, scope: !7)
!22 = !DILocation(line: 256, column: 15, scope: !23, inlinedAt: !21)
!23 = distinct !DILexicalBlockFile(scope: !19, file: !20, discriminator: 0)
!24 = !DILocation(line: 39, column: 19, scope: !7)
!25 = !DILocation(line: 40, column: 19, scope: !7)
!26 = !DILocation(line: 41, column: 20, scope: !7)
!27 = !DILocation(line: 43, column: 35, scope: !7)
!28 = !DILocation(line: 267, column: 36, scope: !19, inlinedAt: !29)
!29 = !DILocation(line: 44, column: 26, scope: !7)
!30 = !DILocation(line: 256, column: 15, scope: !23, inlinedAt: !29)
!31 = !DILocation(line: 46, column: 20, scope: !7)
!32 = !DILocation(line: 48, column: 20, scope: !7)
!33 = !DILocation(line: 49, column: 28, scope: !7)
!34 = !DILocation(line: 50, column: 25, scope: !7)
!35 = !DILocation(line: 50, column: 37, scope: !7)
!36 = !DILocation(line: 51, column: 25, scope: !7)
!37 = !DILocation(line: 51, column: 37, scope: !7)
!38 = !DILocation(line: 52, column: 25, scope: !7)
!39 = !DILocation(line: 52, column: 37, scope: !7)
!40 = !DILocation(line: 52, column: 4, scope: !7)
