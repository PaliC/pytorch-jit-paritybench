; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__to_copy_add_ge_gt_le_lt_mul_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %11 = shl i32 %10, 8, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = shl i32 %12, 1, !dbg !12
  %14 = and i32 %13, 254, !dbg !12
  %15 = or disjoint i32 %11, %14, !dbg !13
  %16 = icmp slt i32 %15, 256, !dbg !14
  %17 = srem i32 %15, 4, !dbg !15
  %18 = sext i32 %15 to i64, !dbg !16
  %19 = getelementptr float, ptr addrspace(1) %0, i64 %18, !dbg !16
  %20 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %19, i1 %16) #1, !dbg !17
  %21 = extractvalue { i32, i32 } %20, 0, !dbg !17
  %22 = extractvalue { i32, i32 } %20, 1, !dbg !17
  %23 = bitcast i32 %21 to float, !dbg !17
  %24 = bitcast i32 %22 to float, !dbg !17
  %25 = sext i32 %17 to i64, !dbg !18
  %26 = getelementptr float, ptr addrspace(1) %1, i64 %25, !dbg !18
  %27 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %26, i1 %16) #1, !dbg !19
  %28 = extractvalue { i32, i32 } %27, 0, !dbg !19
  %29 = extractvalue { i32, i32 } %27, 1, !dbg !19
  %30 = bitcast i32 %28 to float, !dbg !19
  %31 = bitcast i32 %29 to float, !dbg !19
  %32 = getelementptr float, ptr addrspace(1) %2, i64 %25, !dbg !20
  %33 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %32, i1 %16) #1, !dbg !21
  %34 = extractvalue { i32, i32 } %33, 0, !dbg !21
  %35 = extractvalue { i32, i32 } %33, 1, !dbg !21
  %36 = bitcast i32 %34 to float, !dbg !21
  %37 = bitcast i32 %35 to float, !dbg !21
  %38 = getelementptr float, ptr addrspace(1) %3, i64 %25, !dbg !22
  %39 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %38, i1 %16) #1, !dbg !23
  %40 = extractvalue { i32, i32 } %39, 0, !dbg !23
  %41 = extractvalue { i32, i32 } %39, 1, !dbg !23
  %42 = bitcast i32 %40 to float, !dbg !23
  %43 = bitcast i32 %41 to float, !dbg !23
  %44 = getelementptr float, ptr addrspace(1) %4, i64 %25, !dbg !24
  %45 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %44, i1 %16) #1, !dbg !25
  %46 = extractvalue { i32, i32 } %45, 0, !dbg !25
  %47 = extractvalue { i32, i32 } %45, 1, !dbg !25
  %48 = bitcast i32 %46 to float, !dbg !25
  %49 = bitcast i32 %47 to float, !dbg !25
  %50 = fcmp oge float %23, %30, !dbg !26
  %51 = fcmp oge float %24, %31, !dbg !26
  %52 = fcmp ole float %23, %36, !dbg !27
  %53 = fcmp ole float %24, %37, !dbg !27
  %54 = uitofp i1 %50 to float, !dbg !28
  %55 = uitofp i1 %51 to float, !dbg !28
  %56 = fadd float %23, %30, !dbg !29
  %57 = fadd float %24, %31, !dbg !29
  %58 = fmul float %56, %42, !dbg !30
  %59 = fmul float %57, %43, !dbg !30
  %60 = fadd float %58, %30, !dbg !31
  %61 = fadd float %59, %31, !dbg !31
  %62 = fmul float %60, %54, !dbg !32
  %63 = fmul float %61, %55, !dbg !32
  %64 = fcmp olt float %23, %30, !dbg !33
  %65 = fcmp olt float %24, %31, !dbg !33
  %66 = fcmp ogt float %23, %36, !dbg !34
  %67 = fcmp ogt float %24, %37, !dbg !34
  %68 = and i1 %64, %66, !dbg !35
  %69 = uitofp i1 %68 to float, !dbg !35
  %70 = and i1 %65, %67, !dbg !35
  %71 = uitofp i1 %70 to float, !dbg !35
  %72 = fmul float %23, %69, !dbg !36
  %73 = fmul float %24, %71, !dbg !36
  %74 = fadd float %62, %72, !dbg !37
  %75 = fadd float %63, %73, !dbg !37
  %76 = uitofp i1 %52 to float, !dbg !38
  %77 = uitofp i1 %53 to float, !dbg !38
  %78 = fadd float %23, %36, !dbg !39
  %79 = fadd float %24, %37, !dbg !39
  %80 = fmul float %78, %48, !dbg !40
  %81 = fmul float %79, %49, !dbg !40
  %82 = fadd float %80, %36, !dbg !41
  %83 = fadd float %81, %37, !dbg !41
  %84 = fmul float %82, %76, !dbg !42
  %85 = fmul float %83, %77, !dbg !42
  %86 = fadd float %74, %84, !dbg !43
  %87 = fadd float %75, %85, !dbg !43
  %88 = getelementptr i1, ptr addrspace(1) %5, i64 %18, !dbg !44
  %89 = zext i1 %50 to i8, !dbg !45
  %90 = zext i1 %51 to i8, !dbg !45
  %91 = insertelement <2 x i8> poison, i8 %89, i64 0, !dbg !45
  %92 = insertelement <2 x i8> %91, i8 %90, i64 1, !dbg !45
  %93 = bitcast <2 x i8> %92 to i16, !dbg !45
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %93, ptr addrspace(1) %88, i1 %16) #1, !dbg !45
  %94 = getelementptr i1, ptr addrspace(1) %6, i64 %18, !dbg !46
  %95 = zext i1 %52 to i8, !dbg !47
  %96 = zext i1 %53 to i8, !dbg !47
  %97 = insertelement <2 x i8> poison, i8 %95, i64 0, !dbg !47
  %98 = insertelement <2 x i8> %97, i8 %96, i64 1, !dbg !47
  %99 = bitcast <2 x i8> %98 to i16, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %99, ptr addrspace(1) %94, i1 %16) #1, !dbg !47
  %100 = getelementptr float, ptr addrspace(1) %7, i64 %18, !dbg !48
  %101 = bitcast float %86 to i32, !dbg !49
  %102 = bitcast float %87 to i32, !dbg !49
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %101, i32 %102, ptr addrspace(1) %100, i1 %16) #1, !dbg !49
  ret void, !dbg !50
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cnzesbduez5fwya47seso42tu7ua2jmktor22ecclf44itjotg3l.py", directory: "inductor_cache/nz")
!4 = !{ptr @triton_poi_fused__to_copy_add_ge_gt_le_lt_mul_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__to_copy_add_ge_gt_le_lt_mul_0, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__to_copy_add_ge_gt_le_lt_mul_0", linkageName: "triton_poi_fused__to_copy_add_ge_gt_le_lt_mul_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 30, scope: !7)
!17 = !DILocation(line: 26, column: 35, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 35, scope: !7)
!20 = !DILocation(line: 28, column: 30, scope: !7)
!21 = !DILocation(line: 28, column: 35, scope: !7)
!22 = !DILocation(line: 29, column: 30, scope: !7)
!23 = !DILocation(line: 29, column: 35, scope: !7)
!24 = !DILocation(line: 30, column: 31, scope: !7)
!25 = !DILocation(line: 30, column: 36, scope: !7)
!26 = !DILocation(line: 31, column: 19, scope: !7)
!27 = !DILocation(line: 32, column: 19, scope: !7)
!28 = !DILocation(line: 33, column: 19, scope: !7)
!29 = !DILocation(line: 34, column: 18, scope: !7)
!30 = !DILocation(line: 35, column: 18, scope: !7)
!31 = !DILocation(line: 36, column: 18, scope: !7)
!32 = !DILocation(line: 37, column: 19, scope: !7)
!33 = !DILocation(line: 38, column: 19, scope: !7)
!34 = !DILocation(line: 40, column: 19, scope: !7)
!35 = !DILocation(line: 42, column: 20, scope: !7)
!36 = !DILocation(line: 43, column: 20, scope: !7)
!37 = !DILocation(line: 44, column: 20, scope: !7)
!38 = !DILocation(line: 45, column: 20, scope: !7)
!39 = !DILocation(line: 46, column: 19, scope: !7)
!40 = !DILocation(line: 47, column: 20, scope: !7)
!41 = !DILocation(line: 48, column: 19, scope: !7)
!42 = !DILocation(line: 49, column: 20, scope: !7)
!43 = !DILocation(line: 50, column: 20, scope: !7)
!44 = !DILocation(line: 51, column: 25, scope: !7)
!45 = !DILocation(line: 51, column: 36, scope: !7)
!46 = !DILocation(line: 52, column: 25, scope: !7)
!47 = !DILocation(line: 52, column: 36, scope: !7)
!48 = !DILocation(line: 53, column: 25, scope: !7)
!49 = !DILocation(line: 53, column: 37, scope: !7)
!50 = !DILocation(line: 53, column: 4, scope: !7)
