; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused_add_native_layer_norm_native_layer_norm_backward_31(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, i32 %10, i32 %11) local_unnamed_addr !dbg !7 {
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %15 = and i32 %14, 31, !dbg !11
  %16 = lshr i32 %14, 5, !dbg !11
  %17 = shl i32 %14, 2, !dbg !11
  %18 = and i32 %17, 508, !dbg !11
  %19 = icmp samesign ult i32 %18, 384, !dbg !12
  %20 = mul i32 %13, 384, !dbg !13
  %21 = add i32 %20, %18, !dbg !14
  %22 = sext i32 %21 to i64, !dbg !15
  %23 = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !15
  %24 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %23, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19) #5, !dbg !16
  %25 = extractvalue { i32, i32, i32, i32 } %24, 0, !dbg !16
  %26 = extractvalue { i32, i32, i32, i32 } %24, 1, !dbg !16
  %27 = extractvalue { i32, i32, i32, i32 } %24, 2, !dbg !16
  %28 = extractvalue { i32, i32, i32, i32 } %24, 3, !dbg !16
  %29 = bitcast i32 %25 to float, !dbg !16
  %30 = bitcast i32 %26 to float, !dbg !16
  %31 = bitcast i32 %27 to float, !dbg !16
  %32 = getelementptr float, ptr addrspace(1) %1, i64 %22, !dbg !17
  %33 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %32, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19) #5, !dbg !18
  %34 = extractvalue { i32, i32, i32, i32 } %33, 0, !dbg !18
  %35 = extractvalue { i32, i32, i32, i32 } %33, 1, !dbg !18
  %36 = extractvalue { i32, i32, i32, i32 } %33, 2, !dbg !18
  %37 = extractvalue { i32, i32, i32, i32 } %33, 3, !dbg !18
  %38 = bitcast i32 %36 to float, !dbg !18
  %39 = zext nneg i32 %18 to i64, !dbg !19
  %40 = getelementptr float, ptr addrspace(1) %2, i64 %39, !dbg !19
  %41 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %40, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19) #5, !dbg !20
  %42 = extractvalue { i32, i32, i32, i32 } %41, 0, !dbg !20
  %43 = extractvalue { i32, i32, i32, i32 } %41, 1, !dbg !20
  %44 = extractvalue { i32, i32, i32, i32 } %41, 2, !dbg !20
  %45 = extractvalue { i32, i32, i32, i32 } %41, 3, !dbg !20
  %46 = bitcast i32 %44 to float, !dbg !20
  %47 = getelementptr float, ptr addrspace(1) %3, i64 %22, !dbg !21
  %48 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %47, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19) #5, !dbg !22
  %49 = extractvalue { i32, i32, i32, i32 } %48, 0, !dbg !22
  %50 = extractvalue { i32, i32, i32, i32 } %48, 1, !dbg !22
  %51 = extractvalue { i32, i32, i32, i32 } %48, 2, !dbg !22
  %52 = extractvalue { i32, i32, i32, i32 } %48, 3, !dbg !22
  %53 = getelementptr float, ptr addrspace(1) %4, i64 %39, !dbg !23
  %54 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %53, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19) #5, !dbg !24
  %55 = extractvalue { i32, i32, i32, i32 } %54, 0, !dbg !24
  %56 = extractvalue { i32, i32, i32, i32 } %54, 1, !dbg !24
  %57 = extractvalue { i32, i32, i32, i32 } %54, 2, !dbg !24
  %58 = extractvalue { i32, i32, i32, i32 } %54, 3, !dbg !24
  %59 = getelementptr float, ptr addrspace(1) %5, i64 %39, !dbg !25
  %60 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %59, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19) #5, !dbg !26
  %61 = getelementptr float, ptr addrspace(1) %6, i64 %39, !dbg !27
  %62 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %61, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19, i32 0, i1 %19) #5, !dbg !28
  %63 = fadd float %38, %46, !dbg !29
  %64 = fadd float %63, %31, !dbg !30
  %65 = insertelement <2 x i32> poison, i32 %34, i64 0, !dbg !18
  %66 = insertelement <2 x i32> %65, i32 %49, i64 1, !dbg !18
  %67 = bitcast <2 x i32> %66 to <2 x float>, !dbg !18
  %68 = insertelement <2 x i32> poison, i32 %42, i64 0, !dbg !20
  %69 = insertelement <2 x i32> %68, i32 %55, i64 1, !dbg !20
  %70 = bitcast <2 x i32> %69 to <2 x float>, !dbg !20
  %71 = fadd <2 x float> %67, %70, !dbg !29
  %72 = extractelement <2 x float> %71, i64 0, !dbg !30
  %73 = fadd float %72, %29, !dbg !30
  %74 = insertelement <2 x i32> poison, i32 %35, i64 0, !dbg !18
  %75 = insertelement <2 x i32> %74, i32 %50, i64 1, !dbg !18
  %76 = bitcast <2 x i32> %75 to <2 x float>, !dbg !18
  %77 = insertelement <2 x i32> poison, i32 %43, i64 0, !dbg !20
  %78 = insertelement <2 x i32> %77, i32 %56, i64 1, !dbg !20
  %79 = bitcast <2 x i32> %78 to <2 x float>, !dbg !20
  %80 = fadd <2 x float> %76, %79, !dbg !29
  %81 = extractelement <2 x float> %80, i64 0, !dbg !30
  %82 = fadd float %81, %30, !dbg !30
  %83 = extractelement <2 x float> %71, i64 1, !dbg !31
  %84 = fadd float %73, %83, !dbg !31
  %85 = extractelement <2 x float> %80, i64 1, !dbg !31
  %86 = fadd float %82, %85, !dbg !31
  %87 = insertelement <2 x i32> poison, i32 %37, i64 0, !dbg !18
  %88 = insertelement <2 x i32> %87, i32 %51, i64 1, !dbg !18
  %89 = bitcast <2 x i32> %88 to <2 x float>, !dbg !18
  %90 = insertelement <2 x i32> poison, i32 %45, i64 0, !dbg !20
  %91 = insertelement <2 x i32> %90, i32 %57, i64 1, !dbg !20
  %92 = bitcast <2 x i32> %91 to <2 x float>, !dbg !20
  %93 = fadd <2 x float> %89, %92, !dbg !29
  %94 = insertelement <2 x i32> poison, i32 %28, i64 0, !dbg !30
  %95 = bitcast <2 x i32> %94 to <2 x float>, !dbg !30
  %96 = insertelement <2 x float> %95, float %64, i64 1, !dbg !30
  %97 = fadd <2 x float> %93, %96, !dbg !30
  %98 = insertelement <2 x i32> poison, i32 %52, i64 0, !dbg !32
  %99 = bitcast <2 x i32> %98 to <2 x float>, !dbg !32
  %100 = insertelement <2 x float> %99, float %84, i64 1, !dbg !32
  %101 = insertelement <2 x i32> poison, i32 %58, i64 0, !dbg !32
  %102 = bitcast <2 x i32> %101 to <2 x float>, !dbg !32
  %103 = insertelement <2 x float> %102, float %86, i64 1, !dbg !32
  %104 = fadd <2 x float> %100, %103, !dbg !32
  %105 = fadd <2 x float> %97, %104, !dbg !31
  %106 = extractelement <2 x float> %105, i64 0, !dbg !33
  %107 = extractelement <2 x float> %105, i64 1, !dbg !33
  %108 = fadd float %106, %107, !dbg !33
  %109 = select i1 %19, float %108, float 0.000000e+00, !dbg !33
  %110 = bitcast float %109 to i32, !dbg !38
  %111 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %110, i32 16, i32 31), !dbg !38
  %112 = bitcast i32 %111 to float, !dbg !38
  %113 = fadd float %109, %112, !dbg !33
  %114 = bitcast float %113 to i32, !dbg !38
  %115 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %114, i32 8, i32 31), !dbg !38
  %116 = bitcast i32 %115 to float, !dbg !38
  %117 = fadd float %113, %116, !dbg !33
  %118 = bitcast float %117 to i32, !dbg !38
  %119 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %118, i32 4, i32 31), !dbg !38
  %120 = bitcast i32 %119 to float, !dbg !38
  %121 = fadd float %117, %120, !dbg !33
  %122 = bitcast float %121 to i32, !dbg !38
  %123 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %122, i32 2, i32 31), !dbg !38
  %124 = bitcast i32 %123 to float, !dbg !38
  %125 = fadd float %121, %124, !dbg !33
  %126 = bitcast float %125 to i32, !dbg !38
  %127 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %126, i32 1, i32 31), !dbg !38
  %128 = bitcast i32 %127 to float, !dbg !38
  %129 = fadd float %125, %128, !dbg !33
  %130 = icmp eq i32 %15, 0, !dbg !38
  %131 = and i32 %16, 3, !dbg !38
  %132 = getelementptr float, ptr addrspace(3) @global_smem, i32 %131, !dbg !38
  %133 = bitcast float %129 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %132, <1 x i32> %133, i1 %130) #5, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %134 = icmp slt i32 %14, 4, !dbg !38
  %135 = getelementptr float, ptr addrspace(3) @global_smem, i32 %14, !dbg !38
  %136 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %135, i1 %134) #5, !dbg !38
  %137 = bitcast i32 %136 to float, !dbg !38
  %138 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %136, i32 2, i32 31), !dbg !38
  %139 = bitcast i32 %138 to float, !dbg !38
  %140 = fadd float %137, %139, !dbg !33
  %141 = bitcast float %140 to i32, !dbg !38
  %142 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %141, i32 1, i32 31), !dbg !38
  %143 = bitcast i32 %142 to float, !dbg !38
  %144 = fadd float %140, %143, !dbg !33
  %145 = and i32 %14, 3, !dbg !38
  %146 = icmp eq i32 %145, 0, !dbg !38
  %147 = and i1 %134, %146, !dbg !38
  %148 = bitcast float %144 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %135, <1 x i32> %148, i1 %147) #5, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %149 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !38
  %150 = fadd float %149, 0.000000e+00, !dbg !39
  %151 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %150, float 3.840000e+02) #5, !dbg !43
  %152 = fsub float %84, %151, !dbg !44
  %153 = fsub float %86, %151, !dbg !44
  %154 = extractelement <2 x float> %97, i64 1, !dbg !44
  %155 = fsub float %154, %151, !dbg !44
  %156 = fsub float %106, %151, !dbg !44
  %157 = fmul float %152, %152, !dbg !45
  %158 = fmul float %153, %153, !dbg !45
  %159 = fmul float %155, %155, !dbg !45
  %160 = fmul float %156, %156, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %161 = fadd float %157, %158, !dbg !48
  %162 = fadd float %159, %161, !dbg !48
  %163 = fadd float %160, %162, !dbg !48
  %164 = select i1 %19, float %163, float 0.000000e+00, !dbg !48
  %165 = bitcast float %164 to i32, !dbg !46
  %166 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %165, i32 16, i32 31), !dbg !46
  %167 = bitcast i32 %166 to float, !dbg !46
  %168 = fadd float %164, %167, !dbg !48
  %169 = bitcast float %168 to i32, !dbg !46
  %170 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %169, i32 8, i32 31), !dbg !46
  %171 = bitcast i32 %170 to float, !dbg !46
  %172 = fadd float %168, %171, !dbg !48
  %173 = bitcast float %172 to i32, !dbg !46
  %174 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %173, i32 4, i32 31), !dbg !46
  %175 = bitcast i32 %174 to float, !dbg !46
  %176 = fadd float %172, %175, !dbg !48
  %177 = bitcast float %176 to i32, !dbg !46
  %178 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %177, i32 2, i32 31), !dbg !46
  %179 = bitcast i32 %178 to float, !dbg !46
  %180 = fadd float %176, %179, !dbg !48
  %181 = bitcast float %180 to i32, !dbg !46
  %182 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %181, i32 1, i32 31), !dbg !46
  %183 = bitcast i32 %182 to float, !dbg !46
  %184 = fadd float %180, %183, !dbg !48
  %185 = bitcast float %184 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %132, <1 x i32> %185, i1 %130) #5, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %186 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %135, i1 %134) #5, !dbg !46
  %187 = bitcast i32 %186 to float, !dbg !46
  %188 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %186, i32 2, i32 31), !dbg !46
  %189 = bitcast i32 %188 to float, !dbg !46
  %190 = fadd float %187, %189, !dbg !48
  %191 = bitcast float %190 to i32, !dbg !46
  %192 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %191, i32 1, i32 31), !dbg !46
  %193 = bitcast i32 %192 to float, !dbg !46
  %194 = fadd float %190, %193, !dbg !48
  %195 = bitcast float %194 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %135, <1 x i32> %195, i1 %147) #5, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %196 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !46
  %197 = fadd float %196, 0.000000e+00, !dbg !49
  %198 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %197, float 3.840000e+02) #5, !dbg !51
  %199 = fadd float %198, 0x3EB0C6F7A0000000, !dbg !52
  %200 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %.not.i = icmp eq i32 %200, 0, !dbg !53
  br i1 %.not.i, label %203, label %201, !dbg !53

201:                                              ; preds = %12
  %202 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %199), !dbg !53
  br label %__nv_rsqrtf.exit, !dbg !53

203:                                              ; preds = %12
  %204 = tail call float @llvm.nvvm.rsqrt.approx.f(float %199), !dbg !53
  br label %__nv_rsqrtf.exit, !dbg !53

__nv_rsqrtf.exit:                                 ; preds = %201, %203
  %.0.i = phi float [ %202, %201 ], [ %204, %203 ], !dbg !53
  %205 = extractvalue { i32, i32, i32, i32 } %62, 3, !dbg !28
  %206 = bitcast i32 %205 to float, !dbg !28
  %207 = extractvalue { i32, i32, i32, i32 } %62, 2, !dbg !28
  %208 = bitcast i32 %207 to float, !dbg !28
  %209 = extractvalue { i32, i32, i32, i32 } %62, 1, !dbg !28
  %210 = bitcast i32 %209 to float, !dbg !28
  %211 = extractvalue { i32, i32, i32, i32 } %62, 0, !dbg !28
  %212 = bitcast i32 %211 to float, !dbg !28
  %213 = extractvalue { i32, i32, i32, i32 } %60, 3, !dbg !26
  %214 = bitcast i32 %213 to float, !dbg !26
  %215 = extractvalue { i32, i32, i32, i32 } %60, 2, !dbg !26
  %216 = bitcast i32 %215 to float, !dbg !26
  %217 = extractvalue { i32, i32, i32, i32 } %60, 1, !dbg !26
  %218 = bitcast i32 %217 to float, !dbg !26
  %219 = extractvalue { i32, i32, i32, i32 } %60, 0, !dbg !26
  %220 = bitcast i32 %219 to float, !dbg !26
  %221 = fmul float %152, %.0.i, !dbg !54
  %222 = fmul float %153, %.0.i, !dbg !54
  %223 = fmul float %155, %.0.i, !dbg !54
  %224 = fmul float %156, %.0.i, !dbg !54
  %225 = fmul float %221, %220, !dbg !55
  %226 = fmul float %222, %218, !dbg !55
  %227 = fmul float %223, %216, !dbg !55
  %228 = fmul float %224, %214, !dbg !55
  %229 = fadd float %225, %212, !dbg !56
  %230 = fadd float %226, %210, !dbg !56
  %231 = fadd float %227, %208, !dbg !56
  %232 = fadd float %228, %206, !dbg !56
  %233 = fmul float %.0.i, 0x3F65555560000000, !dbg !57
  %234 = bitcast float %84 to i32, !dbg !58
  %235 = bitcast float %86 to i32, !dbg !58
  %236 = bitcast float %154 to i32, !dbg !58
  %237 = bitcast float %106 to i32, !dbg !58
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %234, i32 %235, i32 %236, i32 %237, ptr addrspace(1) %23, i1 %19) #5, !dbg !58
  %238 = getelementptr float, ptr addrspace(1) %7, i64 %22, !dbg !59
  %239 = bitcast float %221 to i32, !dbg !60
  %240 = bitcast float %222 to i32, !dbg !60
  %241 = bitcast float %223 to i32, !dbg !60
  %242 = bitcast float %224 to i32, !dbg !60
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %239, i32 %240, i32 %241, i32 %242, ptr addrspace(1) %238, i1 %19) #5, !dbg !60
  %243 = getelementptr float, ptr addrspace(1) %8, i64 %22, !dbg !61
  %244 = bitcast float %229 to i32, !dbg !62
  %245 = bitcast float %230 to i32, !dbg !62
  %246 = bitcast float %231 to i32, !dbg !62
  %247 = bitcast float %232 to i32, !dbg !62
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %244, i32 %245, i32 %246, i32 %247, ptr addrspace(1) %243, i1 %19) #5, !dbg !62
  %248 = sext i32 %13 to i64, !dbg !63
  %249 = getelementptr float, ptr addrspace(1) %9, i64 %248, !dbg !63
  %urem = and i32 %14, 127, !dbg !64
  %250 = icmp eq i32 %urem, 0, !dbg !64
  %251 = bitcast float %233 to i32, !dbg !64
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %251, ptr addrspace(1) %249, i1 %250) #5, !dbg !64
  ret void, !dbg !65
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cqnngqsr7rmd7bsbrdxjxkz4csjoxbdfrsiytspog2cjr2pf67fc.py", directory: "inductor_cache/qn")
!4 = !{ptr @triton_per_fused_add_native_layer_norm_native_layer_norm_backward_31, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_native_layer_norm_native_layer_norm_backward_31, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_native_layer_norm_native_layer_norm_backward_31", linkageName: "triton_per_fused_add_native_layer_norm_native_layer_norm_backward_31", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 24, column: 28, scope: !7)
!11 = !DILocation(line: 27, column: 26, scope: !7)
!12 = !DILocation(line: 29, column: 21, scope: !7)
!13 = !DILocation(line: 32, column: 43, scope: !7)
!14 = !DILocation(line: 32, column: 39, scope: !7)
!15 = !DILocation(line: 32, column: 34, scope: !7)
!16 = !DILocation(line: 32, column: 48, scope: !7)
!17 = !DILocation(line: 33, column: 30, scope: !7)
!18 = !DILocation(line: 33, column: 44, scope: !7)
!19 = !DILocation(line: 34, column: 30, scope: !7)
!20 = !DILocation(line: 34, column: 35, scope: !7)
!21 = !DILocation(line: 35, column: 30, scope: !7)
!22 = !DILocation(line: 35, column: 44, scope: !7)
!23 = !DILocation(line: 36, column: 30, scope: !7)
!24 = !DILocation(line: 36, column: 35, scope: !7)
!25 = !DILocation(line: 37, column: 31, scope: !7)
!26 = !DILocation(line: 37, column: 36, scope: !7)
!27 = !DILocation(line: 38, column: 31, scope: !7)
!28 = !DILocation(line: 38, column: 36, scope: !7)
!29 = !DILocation(line: 39, column: 18, scope: !7)
!30 = !DILocation(line: 40, column: 18, scope: !7)
!31 = !DILocation(line: 42, column: 18, scope: !7)
!32 = !DILocation(line: 41, column: 18, scope: !7)
!33 = !DILocation(line: 256, column: 15, scope: !34, inlinedAt: !37)
!34 = distinct !DILexicalBlockFile(scope: !36, file: !35, discriminator: 0)
!35 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!36 = distinct !DILexicalBlockFile(scope: !7, file: !35, discriminator: 0)
!37 = !DILocation(line: 47, column: 59, scope: !7)
!38 = !DILocation(line: 267, column: 36, scope: !36, inlinedAt: !37)
!39 = !DILocation(line: 73, column: 15, scope: !40, inlinedAt: !42)
!40 = distinct !DILexicalBlockFile(scope: !7, file: !41, discriminator: 0)
!41 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!42 = !DILocation(line: 47, column: 45, scope: !7)
!43 = !DILocation(line: 50, column: 20, scope: !7)
!44 = !DILocation(line: 51, column: 19, scope: !7)
!45 = !DILocation(line: 52, column: 20, scope: !7)
!46 = !DILocation(line: 267, column: 36, scope: !36, inlinedAt: !47)
!47 = !DILocation(line: 55, column: 59, scope: !7)
!48 = !DILocation(line: 256, column: 15, scope: !34, inlinedAt: !47)
!49 = !DILocation(line: 73, column: 15, scope: !40, inlinedAt: !50)
!50 = !DILocation(line: 55, column: 45, scope: !7)
!51 = !DILocation(line: 58, column: 20, scope: !7)
!52 = !DILocation(line: 60, column: 20, scope: !7)
!53 = !DILocation(line: 61, column: 28, scope: !7)
!54 = !DILocation(line: 62, column: 20, scope: !7)
!55 = !DILocation(line: 63, column: 20, scope: !7)
!56 = !DILocation(line: 64, column: 20, scope: !7)
!57 = !DILocation(line: 66, column: 20, scope: !7)
!58 = !DILocation(line: 67, column: 48, scope: !7)
!59 = !DILocation(line: 68, column: 25, scope: !7)
!60 = !DILocation(line: 68, column: 46, scope: !7)
!61 = !DILocation(line: 69, column: 25, scope: !7)
!62 = !DILocation(line: 69, column: 46, scope: !7)
!63 = !DILocation(line: 70, column: 25, scope: !7)
!64 = !DILocation(line: 70, column: 37, scope: !7)
!65 = !DILocation(line: 70, column: 4, scope: !7)
