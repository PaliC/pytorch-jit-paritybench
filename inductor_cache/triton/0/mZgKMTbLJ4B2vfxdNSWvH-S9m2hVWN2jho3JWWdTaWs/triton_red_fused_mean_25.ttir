#loc = loc("inductor_cache/jt/cjtqraoaoqkpesxrgcp3zod5sxmclr5djnatg3ljvuf64aah3sdo.py":19:0)
#loc1 = loc(unknown)
#loc18 = loc("inductor_cache/jt/cjtqraoaoqkpesxrgcp3zod5sxmclr5djnatg3ljvuf64aah3sdo.py":36:25)
#loc25 = loc(callsite(#loc1 at #loc18))
module {
  tt.func public @triton_red_fused_mean_25(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/jt/cjtqraoaoqkpesxrgcp3zod5sxmclr5djnatg3ljvuf64aah3sdo.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/jt/cjtqraoaoqkpesxrgcp3zod5sxmclr5djnatg3ljvuf64aah3sdo.py":19:0), %arg2: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/jt/cjtqraoaoqkpesxrgcp3zod5sxmclr5djnatg3ljvuf64aah3sdo.py":19:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/jt/cjtqraoaoqkpesxrgcp3zod5sxmclr5djnatg3ljvuf64aah3sdo.py":19:0)) attributes {noinline = false} {
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %c2048_i32 = arith.constant 2048 : i32 loc(#loc1)
    %c8192_i32 = arith.constant 8192 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst = arith.constant dense<8192> : tensor<1x2048xi32> loc(#loc1)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<1x2048xf32> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.cmpi slt, %0, %c32_i32 : i32 loc(#loc3)
    %2 = tt.splat %1 : i1 -> tensor<1x1xi1> loc(#loc3)
    %3 = tt.make_range {end = 2048 : i32, start = 0 : i32} : tensor<2048xi32> loc(#loc4)
    %4 = tt.expand_dims %3 {axis = 0 : i32} : tensor<2048xi32> -> tensor<1x2048xi32> loc(#loc5)
    %5 = arith.muli %0, %c8192_i32 : i32 loc(#loc6)
    %6 = tt.splat %5 : i32 -> tensor<1x2048xi32> loc(#loc7)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1x2048x!tt.ptr<f32>> loc(#loc8)
    %8 = tt.splat %1 : i1 -> tensor<1x2048xi1> loc(#loc9)
    %9 = scf.for %arg4 = %c0_i32 to %c8192_i32 step %c2048_i32 iter_args(%arg5 = %cst_0) -> (tensor<1x2048xf32>)  : i32 {
      %14 = tt.splat %arg4 : i32 -> tensor<1x2048xi32> loc(#loc11)
      %15 = arith.addi %14, %4 : tensor<1x2048xi32> loc(#loc11)
      %16 = arith.cmpi slt, %15, %cst : tensor<1x2048xi32> loc(#loc12)
      %17 = arith.addi %15, %6 : tensor<1x2048xi32> loc(#loc7)
      %18 = tt.addptr %7, %17 : tensor<1x2048x!tt.ptr<f32>>, tensor<1x2048xi32> loc(#loc8)
      %19 = arith.andi %16, %8 : tensor<1x2048xi1> loc(#loc9)
      %20 = tt.load %18, %19, %cst_0 evictionPolicy = evict_first : tensor<1x2048x!tt.ptr<f32>> loc(#loc13)
      %21 = arith.addf %arg5, %20 : tensor<1x2048xf32> loc(#loc14)
      %22 = arith.select %19, %21, %arg5 : tensor<1x2048xi1>, tensor<1x2048xf32> loc(#loc15)
      scf.yield %22 : tensor<1x2048xf32> loc(#loc16)
    } loc(#loc10)
    %10 = "tt.reduce"(%9) <{axis = 1 : i32}> ({
    ^bb0(%arg4: f32 loc(callsite(#loc1 at #loc18)), %arg5: f32 loc(callsite(#loc1 at #loc18))):
      %14 = arith.addf %arg4, %arg5 : f32 loc(#loc27)
      tt.reduce.return %14 : f32 loc(#loc24)
    }) : (tensor<1x2048xf32>) -> tensor<1xf32> loc(#loc24)
    %11 = tt.expand_dims %10 {axis = 1 : i32} : tensor<1xf32> -> tensor<1x1xf32> loc(#loc20)
    %12 = tt.addptr %arg1, %0 : !tt.ptr<f32>, i32 loc(#loc21)
    %13 = tt.splat %12 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>> loc(#loc21)
    tt.store %13, %11, %2 : tensor<1x1x!tt.ptr<f32>> loc(#loc22)
    tt.return loc(#loc23)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/jt/cjtqraoaoqkpesxrgcp3zod5sxmclr5djnatg3ljvuf64aah3sdo.py":22:28)
#loc3 = loc("inductor_cache/jt/cjtqraoaoqkpesxrgcp3zod5sxmclr5djnatg3ljvuf64aah3sdo.py":24:21)
#loc4 = loc("inductor_cache/jt/cjtqraoaoqkpesxrgcp3zod5sxmclr5djnatg3ljvuf64aah3sdo.py":25:25)
#loc5 = loc("inductor_cache/jt/cjtqraoaoqkpesxrgcp3zod5sxmclr5djnatg3ljvuf64aah3sdo.py":25:33)
#loc6 = loc("inductor_cache/jt/cjtqraoaoqkpesxrgcp3zod5sxmclr5djnatg3ljvuf64aah3sdo.py":32:44)
#loc7 = loc("inductor_cache/jt/cjtqraoaoqkpesxrgcp3zod5sxmclr5djnatg3ljvuf64aah3sdo.py":32:39)
#loc8 = loc("inductor_cache/jt/cjtqraoaoqkpesxrgcp3zod5sxmclr5djnatg3ljvuf64aah3sdo.py":32:34)
#loc9 = loc("inductor_cache/jt/cjtqraoaoqkpesxrgcp3zod5sxmclr5djnatg3ljvuf64aah3sdo.py":32:57)
#loc10 = loc("inductor_cache/jt/cjtqraoaoqkpesxrgcp3zod5sxmclr5djnatg3ljvuf64aah3sdo.py":28:36)
#loc11 = loc("inductor_cache/jt/cjtqraoaoqkpesxrgcp3zod5sxmclr5djnatg3ljvuf64aah3sdo.py":29:27)
#loc12 = loc("inductor_cache/jt/cjtqraoaoqkpesxrgcp3zod5sxmclr5djnatg3ljvuf64aah3sdo.py":30:25)
#loc13 = loc("inductor_cache/jt/cjtqraoaoqkpesxrgcp3zod5sxmclr5djnatg3ljvuf64aah3sdo.py":32:49)
#loc14 = loc("inductor_cache/jt/cjtqraoaoqkpesxrgcp3zod5sxmclr5djnatg3ljvuf64aah3sdo.py":34:23)
#loc15 = loc("inductor_cache/jt/cjtqraoaoqkpesxrgcp3zod5sxmclr5djnatg3ljvuf64aah3sdo.py":35:46)
#loc16 = loc("inductor_cache/jt/cjtqraoaoqkpesxrgcp3zod5sxmclr5djnatg3ljvuf64aah3sdo.py":35:8)
#loc17 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc19 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc20 = loc("inductor_cache/jt/cjtqraoaoqkpesxrgcp3zod5sxmclr5djnatg3ljvuf64aah3sdo.py":36:28)
#loc21 = loc("inductor_cache/jt/cjtqraoaoqkpesxrgcp3zod5sxmclr5djnatg3ljvuf64aah3sdo.py":37:25)
#loc22 = loc("inductor_cache/jt/cjtqraoaoqkpesxrgcp3zod5sxmclr5djnatg3ljvuf64aah3sdo.py":37:36)
#loc23 = loc("inductor_cache/jt/cjtqraoaoqkpesxrgcp3zod5sxmclr5djnatg3ljvuf64aah3sdo.py":37:4)
#loc24 = loc(callsite(#loc17 at #loc18))
#loc26 = loc(callsite(#loc19 at #loc17))
#loc27 = loc(callsite(#loc26 at #loc18))
