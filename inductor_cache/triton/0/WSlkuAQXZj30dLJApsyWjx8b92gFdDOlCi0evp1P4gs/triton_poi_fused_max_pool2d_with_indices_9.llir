; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_max_pool2d_with_indices_9(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %6 = shl i32 %5, 9, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 2, !dbg !12
  %9 = and i32 %8, 508, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = icmp slt i32 %10, 50176, !dbg !14
  %12 = srem i32 %10, 64, !dbg !15
  %13 = sdiv i32 %10, 12544, !dbg !16
  %14 = insertelement <2 x i32> poison, i32 %10, i64 0, !dbg !17
  %15 = shufflevector <2 x i32> %14, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !17
  %16 = sdiv <2 x i32> %15, <i32 64, i32 896>, !dbg !17
  %17 = srem <2 x i32> %16, splat (i32 14), !dbg !18
  %18 = mul nsw <2 x i32> %17, <i32 128, i32 3712>, !dbg !19
  %19 = mul i32 %13, 53824, !dbg !20
  %20 = add i32 %19, %12, !dbg !21
  %21 = extractelement <2 x i32> %18, i64 0, !dbg !22
  %22 = add i32 %20, %21, !dbg !23
  %23 = extractelement <2 x i32> %18, i64 1, !dbg !24
  %24 = add i32 %22, %23, !dbg !25
  %25 = sext i32 %24 to i64, !dbg !26
  %26 = getelementptr float, ptr addrspace(1) %0, i64 %25, !dbg !26
  %27 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %26, i1 %11) #1, !dbg !27
  %28 = extractvalue { i32, i32, i32, i32 } %27, 0, !dbg !27
  %29 = extractvalue { i32, i32, i32, i32 } %27, 1, !dbg !27
  %30 = extractvalue { i32, i32, i32, i32 } %27, 2, !dbg !27
  %31 = extractvalue { i32, i32, i32, i32 } %27, 3, !dbg !27
  %32 = add i32 %20, 64, !dbg !28
  %33 = add i32 %32, %21, !dbg !29
  %34 = add i32 %33, %23, !dbg !30
  %35 = sext i32 %34 to i64, !dbg !31
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !31
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %36, i1 %11) #1, !dbg !32
  %38 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !32
  %39 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !32
  %40 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !32
  %41 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !32
  %42 = add i32 %20, 128, !dbg !33
  %43 = add i32 %42, %21, !dbg !34
  %44 = add i32 %43, %23, !dbg !35
  %45 = sext i32 %44 to i64, !dbg !36
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !36
  %47 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %46, i1 %11) #1, !dbg !37
  %48 = extractvalue { i32, i32, i32, i32 } %47, 0, !dbg !37
  %49 = extractvalue { i32, i32, i32, i32 } %47, 1, !dbg !37
  %50 = extractvalue { i32, i32, i32, i32 } %47, 2, !dbg !37
  %51 = extractvalue { i32, i32, i32, i32 } %47, 3, !dbg !37
  %52 = add i32 %20, 1856, !dbg !38
  %53 = add i32 %52, %21, !dbg !39
  %54 = add i32 %53, %23, !dbg !40
  %55 = sext i32 %54 to i64, !dbg !41
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !41
  %57 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %56, i1 %11) #1, !dbg !42
  %58 = extractvalue { i32, i32, i32, i32 } %57, 0, !dbg !42
  %59 = extractvalue { i32, i32, i32, i32 } %57, 1, !dbg !42
  %60 = extractvalue { i32, i32, i32, i32 } %57, 2, !dbg !42
  %61 = extractvalue { i32, i32, i32, i32 } %57, 3, !dbg !42
  %62 = add i32 %20, 1920, !dbg !43
  %63 = add i32 %62, %21, !dbg !44
  %64 = add i32 %63, %23, !dbg !45
  %65 = sext i32 %64 to i64, !dbg !46
  %66 = getelementptr float, ptr addrspace(1) %0, i64 %65, !dbg !46
  %67 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %66, i1 %11) #1, !dbg !47
  %68 = extractvalue { i32, i32, i32, i32 } %67, 0, !dbg !47
  %69 = extractvalue { i32, i32, i32, i32 } %67, 1, !dbg !47
  %70 = extractvalue { i32, i32, i32, i32 } %67, 2, !dbg !47
  %71 = extractvalue { i32, i32, i32, i32 } %67, 3, !dbg !47
  %72 = add i32 %20, 1984, !dbg !48
  %73 = add i32 %72, %21, !dbg !49
  %74 = add i32 %73, %23, !dbg !50
  %75 = sext i32 %74 to i64, !dbg !51
  %76 = getelementptr float, ptr addrspace(1) %0, i64 %75, !dbg !51
  %77 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %76, i1 %11) #1, !dbg !52
  %78 = extractvalue { i32, i32, i32, i32 } %77, 0, !dbg !52
  %79 = extractvalue { i32, i32, i32, i32 } %77, 1, !dbg !52
  %80 = extractvalue { i32, i32, i32, i32 } %77, 2, !dbg !52
  %81 = extractvalue { i32, i32, i32, i32 } %77, 3, !dbg !52
  %82 = add i32 %20, 3712, !dbg !53
  %83 = add i32 %82, %21, !dbg !54
  %84 = add i32 %83, %23, !dbg !55
  %85 = sext i32 %84 to i64, !dbg !56
  %86 = getelementptr float, ptr addrspace(1) %0, i64 %85, !dbg !56
  %87 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %86, i1 %11) #1, !dbg !57
  %88 = extractvalue { i32, i32, i32, i32 } %87, 0, !dbg !57
  %89 = extractvalue { i32, i32, i32, i32 } %87, 1, !dbg !57
  %90 = extractvalue { i32, i32, i32, i32 } %87, 2, !dbg !57
  %91 = extractvalue { i32, i32, i32, i32 } %87, 3, !dbg !57
  %92 = add i32 %20, 3776, !dbg !58
  %93 = add i32 %92, %21, !dbg !59
  %94 = add i32 %93, %23, !dbg !60
  %95 = sext i32 %94 to i64, !dbg !61
  %96 = getelementptr float, ptr addrspace(1) %0, i64 %95, !dbg !61
  %97 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %96, i1 %11) #1, !dbg !62
  %98 = extractvalue { i32, i32, i32, i32 } %97, 0, !dbg !62
  %99 = extractvalue { i32, i32, i32, i32 } %97, 1, !dbg !62
  %100 = extractvalue { i32, i32, i32, i32 } %97, 2, !dbg !62
  %101 = extractvalue { i32, i32, i32, i32 } %97, 3, !dbg !62
  %102 = add i32 %20, 3840, !dbg !63
  %103 = add i32 %102, %21, !dbg !22
  %104 = add i32 %103, %23, !dbg !24
  %105 = sext i32 %104 to i64, !dbg !64
  %106 = getelementptr float, ptr addrspace(1) %0, i64 %105, !dbg !64
  %107 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %106, i1 %11) #1, !dbg !65
  %108 = extractvalue { i32, i32, i32, i32 } %107, 0, !dbg !65
  %109 = extractvalue { i32, i32, i32, i32 } %107, 1, !dbg !65
  %110 = extractvalue { i32, i32, i32, i32 } %107, 2, !dbg !65
  %111 = extractvalue { i32, i32, i32, i32 } %107, 3, !dbg !65
  %112 = insertelement <4 x i32> poison, i32 %28, i64 0, !dbg !27
  %113 = insertelement <4 x i32> %112, i32 %29, i64 1, !dbg !27
  %114 = insertelement <4 x i32> %113, i32 %30, i64 2, !dbg !27
  %115 = insertelement <4 x i32> %114, i32 %31, i64 3, !dbg !27
  %116 = bitcast <4 x i32> %115 to <4 x float>, !dbg !27
  %117 = insertelement <4 x i32> poison, i32 %38, i64 0, !dbg !32
  %118 = insertelement <4 x i32> %117, i32 %39, i64 1, !dbg !32
  %119 = insertelement <4 x i32> %118, i32 %40, i64 2, !dbg !32
  %120 = insertelement <4 x i32> %119, i32 %41, i64 3, !dbg !32
  %121 = bitcast <4 x i32> %120 to <4 x float>, !dbg !32
  %122 = insertelement <4 x i32> poison, i32 %48, i64 0, !dbg !37
  %123 = insertelement <4 x i32> %122, i32 %49, i64 1, !dbg !37
  %124 = insertelement <4 x i32> %123, i32 %50, i64 2, !dbg !37
  %125 = insertelement <4 x i32> %124, i32 %51, i64 3, !dbg !37
  %126 = bitcast <4 x i32> %125 to <4 x float>, !dbg !37
  %127 = insertelement <4 x i32> poison, i32 %58, i64 0, !dbg !42
  %128 = insertelement <4 x i32> %127, i32 %59, i64 1, !dbg !42
  %129 = insertelement <4 x i32> %128, i32 %60, i64 2, !dbg !42
  %130 = insertelement <4 x i32> %129, i32 %61, i64 3, !dbg !42
  %131 = bitcast <4 x i32> %130 to <4 x float>, !dbg !42
  %132 = insertelement <4 x i32> poison, i32 %68, i64 0, !dbg !47
  %133 = insertelement <4 x i32> %132, i32 %69, i64 1, !dbg !47
  %134 = insertelement <4 x i32> %133, i32 %70, i64 2, !dbg !47
  %135 = insertelement <4 x i32> %134, i32 %71, i64 3, !dbg !47
  %136 = bitcast <4 x i32> %135 to <4 x float>, !dbg !47
  %137 = insertelement <4 x i32> poison, i32 %78, i64 0, !dbg !52
  %138 = insertelement <4 x i32> %137, i32 %79, i64 1, !dbg !52
  %139 = insertelement <4 x i32> %138, i32 %80, i64 2, !dbg !52
  %140 = insertelement <4 x i32> %139, i32 %81, i64 3, !dbg !52
  %141 = bitcast <4 x i32> %140 to <4 x float>, !dbg !52
  %142 = insertelement <4 x i32> poison, i32 %88, i64 0, !dbg !57
  %143 = insertelement <4 x i32> %142, i32 %89, i64 1, !dbg !57
  %144 = insertelement <4 x i32> %143, i32 %90, i64 2, !dbg !57
  %145 = insertelement <4 x i32> %144, i32 %91, i64 3, !dbg !57
  %146 = bitcast <4 x i32> %145 to <4 x float>, !dbg !57
  %147 = insertelement <4 x i32> poison, i32 %98, i64 0, !dbg !62
  %148 = insertelement <4 x i32> %147, i32 %99, i64 1, !dbg !62
  %149 = insertelement <4 x i32> %148, i32 %100, i64 2, !dbg !62
  %150 = insertelement <4 x i32> %149, i32 %101, i64 3, !dbg !62
  %151 = bitcast <4 x i32> %150 to <4 x float>, !dbg !62
  %152 = insertelement <4 x i32> poison, i32 %108, i64 0, !dbg !65
  %153 = insertelement <4 x i32> %152, i32 %109, i64 1, !dbg !65
  %154 = insertelement <4 x i32> %153, i32 %110, i64 2, !dbg !65
  %155 = insertelement <4 x i32> %154, i32 %111, i64 3, !dbg !65
  %156 = bitcast <4 x i32> %155 to <4 x float>, !dbg !65
  %157 = fcmp ogt <4 x float> %121, %116, !dbg !66
  %158 = fcmp uno <4 x float> %121, zeroinitializer, !dbg !70
  %159 = or <4 x i1> %157, %158, !dbg !71
  %.v = select <4 x i1> %159, <4 x i32> %120, <4 x i32> %115, !dbg !72
  %160 = bitcast <4 x i32> %.v to <4 x float>, !dbg !72
  %161 = fcmp olt <4 x float> %160, %126, !dbg !73
  %162 = fcmp uno <4 x float> %126, zeroinitializer, !dbg !75
  %163 = or <4 x i1> %162, %161, !dbg !76
  %.v1 = select <4 x i1> %163, <4 x i32> %125, <4 x i32> %.v, !dbg !77
  %164 = bitcast <4 x i32> %.v1 to <4 x float>, !dbg !77
  %165 = fcmp olt <4 x float> %164, %131, !dbg !78
  %166 = fcmp uno <4 x float> %131, zeroinitializer, !dbg !80
  %167 = or <4 x i1> %166, %165, !dbg !81
  %.v2 = select <4 x i1> %167, <4 x i32> %130, <4 x i32> %.v1, !dbg !82
  %168 = bitcast <4 x i32> %.v2 to <4 x float>, !dbg !82
  %169 = fcmp olt <4 x float> %168, %136, !dbg !83
  %170 = fcmp uno <4 x float> %136, zeroinitializer, !dbg !85
  %171 = or <4 x i1> %170, %169, !dbg !86
  %.v3 = select <4 x i1> %171, <4 x i32> %135, <4 x i32> %.v2, !dbg !87
  %172 = bitcast <4 x i32> %.v3 to <4 x float>, !dbg !87
  %173 = fcmp olt <4 x float> %172, %141, !dbg !88
  %174 = fcmp uno <4 x float> %141, zeroinitializer, !dbg !90
  %175 = or <4 x i1> %174, %173, !dbg !91
  %.v4 = select <4 x i1> %175, <4 x i32> %140, <4 x i32> %.v3, !dbg !92
  %176 = bitcast <4 x i32> %.v4 to <4 x float>, !dbg !92
  %177 = fcmp olt <4 x float> %176, %146, !dbg !93
  %178 = fcmp uno <4 x float> %146, zeroinitializer, !dbg !95
  %179 = or <4 x i1> %178, %177, !dbg !96
  %.v5 = select <4 x i1> %179, <4 x i32> %145, <4 x i32> %.v4, !dbg !97
  %180 = bitcast <4 x i32> %.v5 to <4 x float>, !dbg !97
  %181 = fcmp olt <4 x float> %180, %151, !dbg !98
  %182 = fcmp uno <4 x float> %151, zeroinitializer, !dbg !100
  %183 = or <4 x i1> %182, %181, !dbg !101
  %.v6 = select <4 x i1> %183, <4 x i32> %150, <4 x i32> %.v5, !dbg !102
  %184 = bitcast <4 x i32> %.v6 to <4 x float>, !dbg !102
  %185 = fcmp olt <4 x float> %184, %156, !dbg !103
  %186 = fcmp uno <4 x float> %156, zeroinitializer, !dbg !105
  %187 = or <4 x i1> %186, %185, !dbg !106
  %188 = extractelement <4 x i1> %187, i64 0, !dbg !106
  %189 = or <4 x i1> %186, %185, !dbg !106
  %190 = extractelement <4 x i1> %189, i64 1, !dbg !106
  %191 = or <4 x i1> %186, %185, !dbg !106
  %192 = extractelement <4 x i1> %191, i64 2, !dbg !106
  %193 = or <4 x i1> %186, %185, !dbg !106
  %194 = extractelement <4 x i1> %193, i64 3, !dbg !106
  %195 = zext <4 x i1> %157 to <4 x i8>, !dbg !107
  %196 = select <4 x i1> %161, <4 x i8> splat (i8 2), <4 x i8> %195, !dbg !108
  %197 = select <4 x i1> %165, <4 x i8> splat (i8 3), <4 x i8> %196, !dbg !109
  %198 = select <4 x i1> %169, <4 x i8> splat (i8 4), <4 x i8> %197, !dbg !110
  %199 = select <4 x i1> %173, <4 x i8> splat (i8 5), <4 x i8> %198, !dbg !111
  %200 = select <4 x i1> %177, <4 x i8> splat (i8 6), <4 x i8> %199, !dbg !112
  %201 = select <4 x i1> %181, <4 x i8> splat (i8 7), <4 x i8> %200, !dbg !113
  %202 = select <4 x i1> %185, <4 x i8> splat (i8 8), <4 x i8> %201, !dbg !114
  %203 = sext i32 %10 to i64, !dbg !115
  %204 = getelementptr float, ptr addrspace(1) %1, i64 %203, !dbg !115
  %205 = extractelement <4 x i32> %.v6, i64 0, !dbg !116
  %206 = select i1 %188, i32 %108, i32 %205, !dbg !117
  %207 = extractelement <4 x i32> %.v6, i64 1, !dbg !116
  %208 = select i1 %190, i32 %109, i32 %207, !dbg !117
  %209 = extractelement <4 x i32> %.v6, i64 2, !dbg !116
  %210 = select i1 %192, i32 %110, i32 %209, !dbg !117
  %211 = extractelement <4 x i32> %.v6, i64 3, !dbg !116
  %212 = select i1 %194, i32 %111, i32 %211, !dbg !117
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %206, i32 %208, i32 %210, i32 %212, ptr addrspace(1) %204, i1 %11) #1, !dbg !116
  %213 = getelementptr i8, ptr addrspace(1) %2, i64 %203, !dbg !118
  %214 = bitcast <4 x i8> %202 to i32, !dbg !119
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %214, ptr addrspace(1) %213, i1 %11) #1, !dbg !119
  ret void, !dbg !120
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "chcqkbt2tl3m7hkyq7byxj3xlulwstuinwczi6jw3psvahs5ovgy.py", directory: "inductor_cache/hc")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_9, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_9, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_9", linkageName: "triton_poi_fused_max_pool2d_with_indices_9", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 27, column: 19, scope: !7)
!17 = !DILocation(line: 25, column: 21, scope: !7)
!18 = !DILocation(line: 25, column: 27, scope: !7)
!19 = !DILocation(line: 29, column: 39, scope: !7)
!20 = !DILocation(line: 29, column: 60, scope: !7)
!21 = !DILocation(line: 29, column: 35, scope: !7)
!22 = !DILocation(line: 37, column: 52, scope: !7)
!23 = !DILocation(line: 29, column: 44, scope: !7)
!24 = !DILocation(line: 37, column: 62, scope: !7)
!25 = !DILocation(line: 29, column: 54, scope: !7)
!26 = !DILocation(line: 29, column: 30, scope: !7)
!27 = !DILocation(line: 29, column: 65, scope: !7)
!28 = !DILocation(line: 30, column: 40, scope: !7)
!29 = !DILocation(line: 30, column: 49, scope: !7)
!30 = !DILocation(line: 30, column: 59, scope: !7)
!31 = !DILocation(line: 30, column: 30, scope: !7)
!32 = !DILocation(line: 30, column: 70, scope: !7)
!33 = !DILocation(line: 31, column: 41, scope: !7)
!34 = !DILocation(line: 31, column: 50, scope: !7)
!35 = !DILocation(line: 31, column: 60, scope: !7)
!36 = !DILocation(line: 31, column: 30, scope: !7)
!37 = !DILocation(line: 31, column: 71, scope: !7)
!38 = !DILocation(line: 32, column: 42, scope: !7)
!39 = !DILocation(line: 32, column: 51, scope: !7)
!40 = !DILocation(line: 32, column: 61, scope: !7)
!41 = !DILocation(line: 32, column: 30, scope: !7)
!42 = !DILocation(line: 32, column: 72, scope: !7)
!43 = !DILocation(line: 33, column: 42, scope: !7)
!44 = !DILocation(line: 33, column: 51, scope: !7)
!45 = !DILocation(line: 33, column: 61, scope: !7)
!46 = !DILocation(line: 33, column: 30, scope: !7)
!47 = !DILocation(line: 33, column: 72, scope: !7)
!48 = !DILocation(line: 34, column: 42, scope: !7)
!49 = !DILocation(line: 34, column: 51, scope: !7)
!50 = !DILocation(line: 34, column: 61, scope: !7)
!51 = !DILocation(line: 34, column: 30, scope: !7)
!52 = !DILocation(line: 34, column: 72, scope: !7)
!53 = !DILocation(line: 35, column: 43, scope: !7)
!54 = !DILocation(line: 35, column: 52, scope: !7)
!55 = !DILocation(line: 35, column: 62, scope: !7)
!56 = !DILocation(line: 35, column: 31, scope: !7)
!57 = !DILocation(line: 35, column: 73, scope: !7)
!58 = !DILocation(line: 36, column: 43, scope: !7)
!59 = !DILocation(line: 36, column: 52, scope: !7)
!60 = !DILocation(line: 36, column: 62, scope: !7)
!61 = !DILocation(line: 36, column: 31, scope: !7)
!62 = !DILocation(line: 36, column: 73, scope: !7)
!63 = !DILocation(line: 37, column: 43, scope: !7)
!64 = !DILocation(line: 37, column: 31, scope: !7)
!65 = !DILocation(line: 37, column: 73, scope: !7)
!66 = !DILocation(line: 118, column: 15, scope: !67, inlinedAt: !69)
!67 = distinct !DILexicalBlockFile(scope: !7, file: !68, discriminator: 0)
!68 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!69 = !DILocation(line: 38, column: 40, scope: !7)
!70 = !DILocation(line: 120, column: 21, scope: !67, inlinedAt: !69)
!71 = !DILocation(line: 120, column: 16, scope: !67, inlinedAt: !69)
!72 = !DILocation(line: 121, column: 29, scope: !67, inlinedAt: !69)
!73 = !DILocation(line: 118, column: 15, scope: !67, inlinedAt: !74)
!74 = !DILocation(line: 39, column: 40, scope: !7)
!75 = !DILocation(line: 120, column: 21, scope: !67, inlinedAt: !74)
!76 = !DILocation(line: 120, column: 16, scope: !67, inlinedAt: !74)
!77 = !DILocation(line: 121, column: 29, scope: !67, inlinedAt: !74)
!78 = !DILocation(line: 118, column: 15, scope: !67, inlinedAt: !79)
!79 = !DILocation(line: 40, column: 40, scope: !7)
!80 = !DILocation(line: 120, column: 21, scope: !67, inlinedAt: !79)
!81 = !DILocation(line: 120, column: 16, scope: !67, inlinedAt: !79)
!82 = !DILocation(line: 121, column: 29, scope: !67, inlinedAt: !79)
!83 = !DILocation(line: 118, column: 15, scope: !67, inlinedAt: !84)
!84 = !DILocation(line: 41, column: 40, scope: !7)
!85 = !DILocation(line: 120, column: 21, scope: !67, inlinedAt: !84)
!86 = !DILocation(line: 120, column: 16, scope: !67, inlinedAt: !84)
!87 = !DILocation(line: 121, column: 29, scope: !67, inlinedAt: !84)
!88 = !DILocation(line: 118, column: 15, scope: !67, inlinedAt: !89)
!89 = !DILocation(line: 42, column: 41, scope: !7)
!90 = !DILocation(line: 120, column: 21, scope: !67, inlinedAt: !89)
!91 = !DILocation(line: 120, column: 16, scope: !67, inlinedAt: !89)
!92 = !DILocation(line: 121, column: 29, scope: !67, inlinedAt: !89)
!93 = !DILocation(line: 118, column: 15, scope: !67, inlinedAt: !94)
!94 = !DILocation(line: 43, column: 42, scope: !7)
!95 = !DILocation(line: 120, column: 21, scope: !67, inlinedAt: !94)
!96 = !DILocation(line: 120, column: 16, scope: !67, inlinedAt: !94)
!97 = !DILocation(line: 121, column: 29, scope: !67, inlinedAt: !94)
!98 = !DILocation(line: 118, column: 15, scope: !67, inlinedAt: !99)
!99 = !DILocation(line: 44, column: 42, scope: !7)
!100 = !DILocation(line: 120, column: 21, scope: !67, inlinedAt: !99)
!101 = !DILocation(line: 120, column: 16, scope: !67, inlinedAt: !99)
!102 = !DILocation(line: 121, column: 29, scope: !67, inlinedAt: !99)
!103 = !DILocation(line: 118, column: 15, scope: !67, inlinedAt: !104)
!104 = !DILocation(line: 45, column: 42, scope: !7)
!105 = !DILocation(line: 120, column: 21, scope: !67, inlinedAt: !104)
!106 = !DILocation(line: 120, column: 16, scope: !67, inlinedAt: !104)
!107 = !DILocation(line: 49, column: 35, scope: !7)
!108 = !DILocation(line: 52, column: 35, scope: !7)
!109 = !DILocation(line: 55, column: 35, scope: !7)
!110 = !DILocation(line: 58, column: 35, scope: !7)
!111 = !DILocation(line: 61, column: 35, scope: !7)
!112 = !DILocation(line: 64, column: 35, scope: !7)
!113 = !DILocation(line: 67, column: 35, scope: !7)
!114 = !DILocation(line: 70, column: 35, scope: !7)
!115 = !DILocation(line: 71, column: 25, scope: !7)
!116 = !DILocation(line: 71, column: 37, scope: !7)
!117 = !DILocation(line: 121, column: 29, scope: !67, inlinedAt: !104)
!118 = !DILocation(line: 72, column: 25, scope: !7)
!119 = !DILocation(line: 72, column: 37, scope: !7)
!120 = !DILocation(line: 72, column: 4, scope: !7)
