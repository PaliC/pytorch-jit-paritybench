; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_add_convolution_mul_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %10 = shl i32 %9, 6, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = lshr i32 %11, 4, !dbg !12
  %13 = and i32 %12, 15, !dbg !12
  %14 = or disjoint i32 %13, 16, !dbg !12
  %15 = or disjoint i32 %13, 32, !dbg !12
  %16 = or disjoint i32 %13, 48, !dbg !12
  %17 = shl i32 %11, 2, !dbg !12
  %18 = and i32 %17, 60, !dbg !12
  %19 = or disjoint i32 %10, %13, !dbg !13
  %20 = or disjoint i32 %10, %14, !dbg !13
  %21 = or disjoint i32 %10, %15, !dbg !13
  %22 = or disjoint i32 %10, %16, !dbg !13
  %23 = or disjoint i32 %10, %18, !dbg !13
  %24 = icmp slt i32 %19, 256, !dbg !14
  %25 = icmp slt i32 %20, 256, !dbg !14
  %26 = icmp slt i32 %21, 256, !dbg !14
  %27 = icmp slt i32 %22, 256, !dbg !14
  %28 = icmp slt i32 %23, 256, !dbg !14
  %29 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %30 = shl i32 %29, 6, !dbg !16
  %31 = or disjoint i32 %30, %18, !dbg !17
  %32 = or disjoint i32 %30, %13, !dbg !17
  %33 = or disjoint i32 %30, %14, !dbg !17
  %34 = or disjoint i32 %30, %15, !dbg !17
  %35 = or disjoint i32 %30, %16, !dbg !17
  %.frozen = freeze i32 %23, !dbg !18
  %36 = sdiv i32 %.frozen, 64, !dbg !18
  %37 = mul i32 %36, 64, !dbg !19
  %.decomposed = sub i32 %.frozen, %37, !dbg !19
  %38 = shl i32 %19, 12, !dbg !20
  %39 = shl i32 %20, 12, !dbg !20
  %40 = shl i32 %21, 12, !dbg !20
  %41 = shl i32 %22, 12, !dbg !20
  %42 = add i32 %31, %38, !dbg !21
  %43 = add i32 %31, %39, !dbg !21
  %44 = add i32 %31, %40, !dbg !21
  %45 = add i32 %31, %41, !dbg !21
  %46 = sext i32 %42 to i64, !dbg !22
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !22
  %48 = sext i32 %43 to i64, !dbg !22
  %49 = getelementptr float, ptr addrspace(1) %0, i64 %48, !dbg !22
  %50 = sext i32 %44 to i64, !dbg !22
  %51 = getelementptr float, ptr addrspace(1) %0, i64 %50, !dbg !22
  %52 = sext i32 %45 to i64, !dbg !22
  %53 = getelementptr float, ptr addrspace(1) %0, i64 %52, !dbg !22
  %54 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %47, i1 %24) #2, !dbg !23
  %55 = extractvalue { i32, i32, i32, i32 } %54, 0, !dbg !23
  %56 = extractvalue { i32, i32, i32, i32 } %54, 1, !dbg !23
  %57 = extractvalue { i32, i32, i32, i32 } %54, 2, !dbg !23
  %58 = extractvalue { i32, i32, i32, i32 } %54, 3, !dbg !23
  %59 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %49, i1 %25) #2, !dbg !23
  %60 = extractvalue { i32, i32, i32, i32 } %59, 0, !dbg !23
  %61 = extractvalue { i32, i32, i32, i32 } %59, 1, !dbg !23
  %62 = extractvalue { i32, i32, i32, i32 } %59, 2, !dbg !23
  %63 = extractvalue { i32, i32, i32, i32 } %59, 3, !dbg !23
  %64 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %51, i1 %26) #2, !dbg !23
  %65 = extractvalue { i32, i32, i32, i32 } %64, 0, !dbg !23
  %66 = extractvalue { i32, i32, i32, i32 } %64, 1, !dbg !23
  %67 = extractvalue { i32, i32, i32, i32 } %64, 2, !dbg !23
  %68 = extractvalue { i32, i32, i32, i32 } %64, 3, !dbg !23
  %69 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %53, i1 %27) #2, !dbg !23
  %70 = extractvalue { i32, i32, i32, i32 } %69, 0, !dbg !23
  %71 = extractvalue { i32, i32, i32, i32 } %69, 1, !dbg !23
  %72 = extractvalue { i32, i32, i32, i32 } %69, 2, !dbg !23
  %73 = extractvalue { i32, i32, i32, i32 } %69, 3, !dbg !23
  %74 = shl i32 %11, 8, !dbg !23
  %75 = and i32 %74, 3840, !dbg !23
  %76 = or disjoint i32 %75, %13, !dbg !23
  %77 = and i32 %17, 1020, !dbg !23
  %78 = lshr exact i32 %75, 2, !dbg !23
  %79 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %78, !dbg !23
  %80 = getelementptr float, ptr addrspace(3) %79, i32 %76, !dbg !23
  %81 = insertelement <1 x i32> poison, i32 %55, i64 0, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %80, <1 x i32> %81, i1 true) #2, !dbg !23
  %82 = or disjoint i32 %76, 64, !dbg !23
  %83 = lshr i32 %82, 6, !dbg !23
  %.idx = shl nuw nsw i32 %83, 4, !dbg !23
  %84 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !23
  %85 = getelementptr float, ptr addrspace(3) %84, i32 %82, !dbg !23
  %86 = insertelement <1 x i32> poison, i32 %56, i64 0, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %85, <1 x i32> %86, i1 true) #2, !dbg !23
  %87 = or disjoint i32 %76, 128, !dbg !23
  %88 = lshr i32 %87, 6, !dbg !23
  %.idx1 = shl nuw nsw i32 %88, 4, !dbg !23
  %89 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx1, !dbg !23
  %90 = getelementptr float, ptr addrspace(3) %89, i32 %87, !dbg !23
  %91 = insertelement <1 x i32> poison, i32 %57, i64 0, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %90, <1 x i32> %91, i1 true) #2, !dbg !23
  %92 = or disjoint i32 %76, 192, !dbg !23
  %93 = lshr i32 %92, 6, !dbg !23
  %.idx2 = shl nuw nsw i32 %93, 4, !dbg !23
  %94 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx2, !dbg !23
  %95 = getelementptr float, ptr addrspace(3) %94, i32 %92, !dbg !23
  %96 = insertelement <1 x i32> poison, i32 %58, i64 0, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %95, <1 x i32> %96, i1 true) #2, !dbg !23
  %97 = or disjoint i32 %76, 16, !dbg !23
  %98 = getelementptr float, ptr addrspace(3) %79, i32 %97, !dbg !23
  %99 = insertelement <1 x i32> poison, i32 %60, i64 0, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %98, <1 x i32> %99, i1 true) #2, !dbg !23
  %100 = or disjoint i32 %76, 80, !dbg !23
  %101 = lshr i32 %100, 6, !dbg !23
  %.idx3 = shl nuw nsw i32 %101, 4, !dbg !23
  %102 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx3, !dbg !23
  %103 = getelementptr float, ptr addrspace(3) %102, i32 %100, !dbg !23
  %104 = insertelement <1 x i32> poison, i32 %61, i64 0, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %103, <1 x i32> %104, i1 true) #2, !dbg !23
  %105 = or disjoint i32 %76, 144, !dbg !23
  %106 = lshr i32 %105, 6, !dbg !23
  %.idx4 = shl nuw nsw i32 %106, 4, !dbg !23
  %107 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx4, !dbg !23
  %108 = getelementptr float, ptr addrspace(3) %107, i32 %105, !dbg !23
  %109 = insertelement <1 x i32> poison, i32 %62, i64 0, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %108, <1 x i32> %109, i1 true) #2, !dbg !23
  %110 = or disjoint i32 %76, 208, !dbg !23
  %111 = lshr i32 %110, 6, !dbg !23
  %.idx5 = shl nuw nsw i32 %111, 4, !dbg !23
  %112 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx5, !dbg !23
  %113 = getelementptr float, ptr addrspace(3) %112, i32 %110, !dbg !23
  %114 = insertelement <1 x i32> poison, i32 %63, i64 0, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %113, <1 x i32> %114, i1 true) #2, !dbg !23
  %115 = or disjoint i32 %76, 32, !dbg !23
  %116 = getelementptr float, ptr addrspace(3) %79, i32 %115, !dbg !23
  %117 = insertelement <1 x i32> poison, i32 %65, i64 0, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %116, <1 x i32> %117, i1 true) #2, !dbg !23
  %118 = or disjoint i32 %76, 96, !dbg !23
  %119 = lshr i32 %118, 6, !dbg !23
  %.idx6 = shl nuw nsw i32 %119, 4, !dbg !23
  %120 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx6, !dbg !23
  %121 = getelementptr float, ptr addrspace(3) %120, i32 %118, !dbg !23
  %122 = insertelement <1 x i32> poison, i32 %66, i64 0, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %121, <1 x i32> %122, i1 true) #2, !dbg !23
  %123 = or disjoint i32 %76, 160, !dbg !23
  %124 = lshr i32 %123, 6, !dbg !23
  %.idx7 = shl nuw nsw i32 %124, 4, !dbg !23
  %125 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx7, !dbg !23
  %126 = getelementptr float, ptr addrspace(3) %125, i32 %123, !dbg !23
  %127 = insertelement <1 x i32> poison, i32 %67, i64 0, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %126, <1 x i32> %127, i1 true) #2, !dbg !23
  %128 = or disjoint i32 %76, 224, !dbg !23
  %129 = lshr i32 %128, 6, !dbg !23
  %.idx8 = shl nuw nsw i32 %129, 4, !dbg !23
  %130 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx8, !dbg !23
  %131 = getelementptr float, ptr addrspace(3) %130, i32 %128, !dbg !23
  %132 = insertelement <1 x i32> poison, i32 %68, i64 0, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %131, <1 x i32> %132, i1 true) #2, !dbg !23
  %133 = or disjoint i32 %76, 48, !dbg !23
  %134 = getelementptr float, ptr addrspace(3) %79, i32 %133, !dbg !23
  %135 = insertelement <1 x i32> poison, i32 %70, i64 0, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %134, <1 x i32> %135, i1 true) #2, !dbg !23
  %136 = or disjoint i32 %76, 112, !dbg !23
  %137 = lshr i32 %136, 6, !dbg !23
  %.idx9 = shl nuw nsw i32 %137, 4, !dbg !23
  %138 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx9, !dbg !23
  %139 = getelementptr float, ptr addrspace(3) %138, i32 %136, !dbg !23
  %140 = insertelement <1 x i32> poison, i32 %71, i64 0, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %139, <1 x i32> %140, i1 true) #2, !dbg !23
  %141 = or disjoint i32 %76, 176, !dbg !23
  %142 = lshr i32 %141, 6, !dbg !23
  %.idx10 = shl nuw nsw i32 %142, 4, !dbg !23
  %143 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx10, !dbg !23
  %144 = getelementptr float, ptr addrspace(3) %143, i32 %141, !dbg !23
  %145 = insertelement <1 x i32> poison, i32 %72, i64 0, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %144, <1 x i32> %145, i1 true) #2, !dbg !23
  %146 = or disjoint i32 %76, 240, !dbg !23
  %147 = lshr i32 %146, 6, !dbg !23
  %.idx11 = shl nuw nsw i32 %147, 4, !dbg !23
  %148 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx11, !dbg !23
  %149 = getelementptr float, ptr addrspace(3) %148, i32 %146, !dbg !23
  %150 = insertelement <1 x i32> poison, i32 %73, i64 0, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %149, <1 x i32> %150, i1 true) #2, !dbg !23
  tail call void @llvm.nvvm.barrier0(), !dbg !23
  %151 = lshr i32 %77, 6, !dbg !23
  %152 = and i32 %11, 255, !dbg !23
  %153 = add nuw nsw i32 %151, %152, !dbg !23
  %.idx12 = shl nuw nsw i32 %153, 4, !dbg !23
  %154 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx12, !dbg !23
  %155 = load float, ptr addrspace(3) %154, align 16, !dbg !23
  %156 = getelementptr inbounds i8, ptr addrspace(3) %154, i32 4, !dbg !23
  %157 = load float, ptr addrspace(3) %156, align 4, !dbg !23
  %158 = getelementptr inbounds i8, ptr addrspace(3) %154, i32 8, !dbg !23
  %159 = load float, ptr addrspace(3) %158, align 8, !dbg !23
  %160 = getelementptr inbounds i8, ptr addrspace(3) %154, i32 12, !dbg !23
  %161 = load float, ptr addrspace(3) %160, align 4, !dbg !23
  %162 = or disjoint i32 %77, 1024, !dbg !23
  %163 = lshr i32 %162, 6, !dbg !23
  %.idx16 = shl nuw nsw i32 %163, 4, !dbg !23
  %164 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx16, !dbg !23
  %165 = getelementptr inbounds float, ptr addrspace(3) %164, i32 %162, !dbg !23
  %166 = load float, ptr addrspace(3) %165, align 16, !dbg !23
  %167 = getelementptr inbounds i8, ptr addrspace(3) %165, i32 4, !dbg !23
  %168 = load float, ptr addrspace(3) %167, align 4, !dbg !23
  %169 = getelementptr inbounds i8, ptr addrspace(3) %165, i32 8, !dbg !23
  %170 = load float, ptr addrspace(3) %169, align 8, !dbg !23
  %171 = getelementptr inbounds i8, ptr addrspace(3) %165, i32 12, !dbg !23
  %172 = load float, ptr addrspace(3) %171, align 4, !dbg !23
  %173 = or disjoint i32 %77, 2048, !dbg !23
  %174 = lshr i32 %173, 6, !dbg !23
  %.idx21 = shl nuw nsw i32 %174, 4, !dbg !23
  %175 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx21, !dbg !23
  %176 = getelementptr inbounds float, ptr addrspace(3) %175, i32 %173, !dbg !23
  %177 = load float, ptr addrspace(3) %176, align 16, !dbg !23
  %178 = getelementptr inbounds i8, ptr addrspace(3) %176, i32 4, !dbg !23
  %179 = load float, ptr addrspace(3) %178, align 4, !dbg !23
  %180 = getelementptr inbounds i8, ptr addrspace(3) %176, i32 8, !dbg !23
  %181 = load float, ptr addrspace(3) %180, align 8, !dbg !23
  %182 = getelementptr inbounds i8, ptr addrspace(3) %176, i32 12, !dbg !23
  %183 = load float, ptr addrspace(3) %182, align 4, !dbg !23
  %184 = or disjoint i32 %77, 3072, !dbg !23
  %185 = lshr i32 %184, 6, !dbg !23
  %.idx26 = shl nuw nsw i32 %185, 4, !dbg !23
  %186 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx26, !dbg !23
  %187 = getelementptr inbounds float, ptr addrspace(3) %186, i32 %184, !dbg !23
  %188 = load float, ptr addrspace(3) %187, align 16, !dbg !23
  %189 = getelementptr inbounds i8, ptr addrspace(3) %187, i32 4, !dbg !23
  %190 = load float, ptr addrspace(3) %189, align 4, !dbg !23
  %191 = getelementptr inbounds i8, ptr addrspace(3) %187, i32 8, !dbg !23
  %192 = load float, ptr addrspace(3) %191, align 8, !dbg !23
  %193 = getelementptr inbounds i8, ptr addrspace(3) %187, i32 12, !dbg !23
  %194 = load float, ptr addrspace(3) %193, align 4, !dbg !23
  %195 = sext i32 %.decomposed to i64, !dbg !24
  %196 = getelementptr float, ptr addrspace(1) %1, i64 %195, !dbg !24
  %197 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %196, i1 %28) #2, !dbg !25
  %198 = extractvalue { i32, i32, i32, i32 } %197, 0, !dbg !25
  %199 = extractvalue { i32, i32, i32, i32 } %197, 1, !dbg !25
  %200 = extractvalue { i32, i32, i32, i32 } %197, 2, !dbg !25
  %201 = extractvalue { i32, i32, i32, i32 } %197, 3, !dbg !25
  %202 = bitcast i32 %198 to float, !dbg !25
  %203 = bitcast i32 %199 to float, !dbg !25
  %204 = bitcast i32 %200 to float, !dbg !25
  %205 = bitcast i32 %201 to float, !dbg !25
  %206 = shl i32 %32, 6, !dbg !26
  %207 = shl i32 %33, 6, !dbg !26
  %208 = shl i32 %34, 6, !dbg !26
  %209 = shl i32 %35, 6, !dbg !26
  %210 = shl i32 %36, 18, !dbg !27
  %211 = add i32 %210, %.decomposed, !dbg !28
  %212 = add i32 %211, %206, !dbg !29
  %213 = add i32 %211, %207, !dbg !29
  %214 = add i32 %211, %208, !dbg !29
  %215 = add i32 %211, %209, !dbg !29
  %216 = sext i32 %212 to i64, !dbg !30
  %217 = getelementptr float, ptr addrspace(1) %2, i64 %216, !dbg !30
  %218 = sext i32 %213 to i64, !dbg !30
  %219 = getelementptr float, ptr addrspace(1) %2, i64 %218, !dbg !30
  %220 = sext i32 %214 to i64, !dbg !30
  %221 = getelementptr float, ptr addrspace(1) %2, i64 %220, !dbg !30
  %222 = sext i32 %215 to i64, !dbg !30
  %223 = getelementptr float, ptr addrspace(1) %2, i64 %222, !dbg !30
  %224 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %217, i1 %28) #2, !dbg !31
  %225 = extractvalue { i32, i32, i32, i32 } %224, 0, !dbg !31
  %226 = extractvalue { i32, i32, i32, i32 } %224, 1, !dbg !31
  %227 = extractvalue { i32, i32, i32, i32 } %224, 2, !dbg !31
  %228 = extractvalue { i32, i32, i32, i32 } %224, 3, !dbg !31
  %229 = bitcast i32 %225 to float, !dbg !31
  %230 = bitcast i32 %226 to float, !dbg !31
  %231 = bitcast i32 %227 to float, !dbg !31
  %232 = bitcast i32 %228 to float, !dbg !31
  %233 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %219, i1 %28) #2, !dbg !31
  %234 = extractvalue { i32, i32, i32, i32 } %233, 0, !dbg !31
  %235 = extractvalue { i32, i32, i32, i32 } %233, 1, !dbg !31
  %236 = extractvalue { i32, i32, i32, i32 } %233, 2, !dbg !31
  %237 = extractvalue { i32, i32, i32, i32 } %233, 3, !dbg !31
  %238 = bitcast i32 %234 to float, !dbg !31
  %239 = bitcast i32 %235 to float, !dbg !31
  %240 = bitcast i32 %236 to float, !dbg !31
  %241 = bitcast i32 %237 to float, !dbg !31
  %242 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %221, i1 %28) #2, !dbg !31
  %243 = extractvalue { i32, i32, i32, i32 } %242, 0, !dbg !31
  %244 = extractvalue { i32, i32, i32, i32 } %242, 1, !dbg !31
  %245 = extractvalue { i32, i32, i32, i32 } %242, 2, !dbg !31
  %246 = extractvalue { i32, i32, i32, i32 } %242, 3, !dbg !31
  %247 = bitcast i32 %243 to float, !dbg !31
  %248 = bitcast i32 %244 to float, !dbg !31
  %249 = bitcast i32 %245 to float, !dbg !31
  %250 = bitcast i32 %246 to float, !dbg !31
  %251 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %223, i1 %28) #2, !dbg !31
  %252 = extractvalue { i32, i32, i32, i32 } %251, 0, !dbg !31
  %253 = extractvalue { i32, i32, i32, i32 } %251, 1, !dbg !31
  %254 = extractvalue { i32, i32, i32, i32 } %251, 2, !dbg !31
  %255 = extractvalue { i32, i32, i32, i32 } %251, 3, !dbg !31
  %256 = bitcast i32 %252 to float, !dbg !31
  %257 = bitcast i32 %253 to float, !dbg !31
  %258 = bitcast i32 %254 to float, !dbg !31
  %259 = bitcast i32 %255 to float, !dbg !31
  %260 = getelementptr float, ptr addrspace(1) %3, i64 %195, !dbg !32
  %261 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %260, i1 %28) #2, !dbg !33
  %262 = extractvalue { i32, i32, i32, i32 } %261, 0, !dbg !33
  %263 = extractvalue { i32, i32, i32, i32 } %261, 1, !dbg !33
  %264 = extractvalue { i32, i32, i32, i32 } %261, 2, !dbg !33
  %265 = extractvalue { i32, i32, i32, i32 } %261, 3, !dbg !33
  %266 = bitcast i32 %262 to float, !dbg !33
  %267 = bitcast i32 %263 to float, !dbg !33
  %268 = bitcast i32 %264 to float, !dbg !33
  %269 = bitcast i32 %265 to float, !dbg !33
  %270 = fmul float %202, %229, !dbg !34
  %271 = fmul float %203, %230, !dbg !34
  %272 = fmul float %204, %231, !dbg !34
  %273 = fmul float %205, %232, !dbg !34
  %274 = fmul float %202, %238, !dbg !34
  %275 = fmul float %203, %239, !dbg !34
  %276 = fmul float %204, %240, !dbg !34
  %277 = fmul float %205, %241, !dbg !34
  %278 = fmul float %202, %247, !dbg !34
  %279 = fmul float %203, %248, !dbg !34
  %280 = fmul float %204, %249, !dbg !34
  %281 = fmul float %205, %250, !dbg !34
  %282 = fmul float %202, %256, !dbg !34
  %283 = fmul float %203, %257, !dbg !34
  %284 = fmul float %204, %258, !dbg !34
  %285 = fmul float %205, %259, !dbg !34
  %286 = fadd float %270, %266, !dbg !35
  %287 = fadd float %271, %267, !dbg !35
  %288 = fadd float %272, %268, !dbg !35
  %289 = fadd float %273, %269, !dbg !35
  %290 = fadd float %274, %266, !dbg !35
  %291 = fadd float %275, %267, !dbg !35
  %292 = fadd float %276, %268, !dbg !35
  %293 = fadd float %277, %269, !dbg !35
  %294 = fadd float %278, %266, !dbg !35
  %295 = fadd float %279, %267, !dbg !35
  %296 = fadd float %280, %268, !dbg !35
  %297 = fadd float %281, %269, !dbg !35
  %298 = fadd float %282, %266, !dbg !35
  %299 = fadd float %283, %267, !dbg !35
  %300 = fadd float %284, %268, !dbg !35
  %301 = fadd float %285, %269, !dbg !35
  %302 = fadd float %155, %286, !dbg !36
  %303 = fadd float %157, %287, !dbg !36
  %304 = fadd float %159, %288, !dbg !36
  %305 = fadd float %161, %289, !dbg !36
  %306 = fadd float %166, %290, !dbg !36
  %307 = fadd float %168, %291, !dbg !36
  %308 = fadd float %170, %292, !dbg !36
  %309 = fadd float %172, %293, !dbg !36
  %310 = fadd float %177, %294, !dbg !36
  %311 = fadd float %179, %295, !dbg !36
  %312 = fadd float %181, %296, !dbg !36
  %313 = fadd float %183, %297, !dbg !36
  %314 = fadd float %188, %298, !dbg !36
  %315 = fadd float %190, %299, !dbg !36
  %316 = fadd float %192, %300, !dbg !36
  %317 = fadd float %194, %301, !dbg !36
  %318 = getelementptr float, ptr addrspace(1) %4, i64 %46, !dbg !37
  %319 = getelementptr float, ptr addrspace(1) %4, i64 %48, !dbg !37
  %320 = getelementptr float, ptr addrspace(1) %4, i64 %50, !dbg !37
  %321 = getelementptr float, ptr addrspace(1) %4, i64 %52, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %322 = lshr exact i32 %75, 4, !dbg !38
  %323 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %322, !dbg !38
  %324 = getelementptr float, ptr addrspace(3) %323, i32 %76, !dbg !38
  %325 = bitcast float %302 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %324, <1 x i32> %325, i1 true) #2, !dbg !38
  %326 = getelementptr float, ptr addrspace(3) @global_smem, i32 %83, !dbg !38
  %327 = getelementptr float, ptr addrspace(3) %326, i32 %82, !dbg !38
  %328 = bitcast float %303 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %327, <1 x i32> %328, i1 true) #2, !dbg !38
  %329 = getelementptr float, ptr addrspace(3) @global_smem, i32 %88, !dbg !38
  %330 = getelementptr float, ptr addrspace(3) %329, i32 %87, !dbg !38
  %331 = bitcast float %304 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %330, <1 x i32> %331, i1 true) #2, !dbg !38
  %332 = getelementptr float, ptr addrspace(3) @global_smem, i32 %93, !dbg !38
  %333 = getelementptr float, ptr addrspace(3) %332, i32 %92, !dbg !38
  %334 = bitcast float %305 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %333, <1 x i32> %334, i1 true) #2, !dbg !38
  %335 = getelementptr float, ptr addrspace(3) %323, i32 %97, !dbg !38
  %336 = bitcast float %306 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %335, <1 x i32> %336, i1 true) #2, !dbg !38
  %337 = getelementptr float, ptr addrspace(3) @global_smem, i32 %101, !dbg !38
  %338 = getelementptr float, ptr addrspace(3) %337, i32 %100, !dbg !38
  %339 = bitcast float %307 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %338, <1 x i32> %339, i1 true) #2, !dbg !38
  %340 = getelementptr float, ptr addrspace(3) @global_smem, i32 %106, !dbg !38
  %341 = getelementptr float, ptr addrspace(3) %340, i32 %105, !dbg !38
  %342 = bitcast float %308 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %341, <1 x i32> %342, i1 true) #2, !dbg !38
  %343 = getelementptr float, ptr addrspace(3) @global_smem, i32 %111, !dbg !38
  %344 = getelementptr float, ptr addrspace(3) %343, i32 %110, !dbg !38
  %345 = bitcast float %309 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %344, <1 x i32> %345, i1 true) #2, !dbg !38
  %346 = getelementptr float, ptr addrspace(3) %323, i32 %115, !dbg !38
  %347 = bitcast float %310 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %346, <1 x i32> %347, i1 true) #2, !dbg !38
  %348 = getelementptr float, ptr addrspace(3) @global_smem, i32 %119, !dbg !38
  %349 = getelementptr float, ptr addrspace(3) %348, i32 %118, !dbg !38
  %350 = bitcast float %311 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %349, <1 x i32> %350, i1 true) #2, !dbg !38
  %351 = getelementptr float, ptr addrspace(3) @global_smem, i32 %124, !dbg !38
  %352 = getelementptr float, ptr addrspace(3) %351, i32 %123, !dbg !38
  %353 = bitcast float %312 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %352, <1 x i32> %353, i1 true) #2, !dbg !38
  %354 = getelementptr float, ptr addrspace(3) @global_smem, i32 %129, !dbg !38
  %355 = getelementptr float, ptr addrspace(3) %354, i32 %128, !dbg !38
  %356 = bitcast float %313 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %355, <1 x i32> %356, i1 true) #2, !dbg !38
  %357 = getelementptr float, ptr addrspace(3) %323, i32 %133, !dbg !38
  %358 = bitcast float %314 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %357, <1 x i32> %358, i1 true) #2, !dbg !38
  %359 = getelementptr float, ptr addrspace(3) @global_smem, i32 %137, !dbg !38
  %360 = getelementptr float, ptr addrspace(3) %359, i32 %136, !dbg !38
  %361 = bitcast float %315 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %360, <1 x i32> %361, i1 true) #2, !dbg !38
  %362 = getelementptr float, ptr addrspace(3) @global_smem, i32 %142, !dbg !38
  %363 = getelementptr float, ptr addrspace(3) %362, i32 %141, !dbg !38
  %364 = bitcast float %316 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %363, <1 x i32> %364, i1 true) #2, !dbg !38
  %365 = getelementptr float, ptr addrspace(3) @global_smem, i32 %147, !dbg !38
  %366 = getelementptr float, ptr addrspace(3) %365, i32 %146, !dbg !38
  %367 = bitcast float %317 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %366, <1 x i32> %367, i1 true) #2, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %368 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %151, !dbg !38
  %369 = getelementptr inbounds float, ptr addrspace(3) %368, i32 %77, !dbg !38
  %370 = load i32, ptr addrspace(3) %369, align 4, !dbg !38
  %371 = or disjoint i32 %77, 1, !dbg !38
  %372 = getelementptr inbounds float, ptr addrspace(3) %368, i32 %371, !dbg !38
  %373 = load i32, ptr addrspace(3) %372, align 4, !dbg !38
  %374 = or disjoint i32 %77, 2, !dbg !38
  %375 = getelementptr inbounds float, ptr addrspace(3) %368, i32 %374, !dbg !38
  %376 = load i32, ptr addrspace(3) %375, align 4, !dbg !38
  %377 = or disjoint i32 %77, 3, !dbg !38
  %378 = getelementptr inbounds float, ptr addrspace(3) %368, i32 %377, !dbg !38
  %379 = load i32, ptr addrspace(3) %378, align 4, !dbg !38
  %380 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %163, !dbg !38
  %381 = getelementptr inbounds float, ptr addrspace(3) %380, i32 %162, !dbg !38
  %382 = load i32, ptr addrspace(3) %381, align 4, !dbg !38
  %383 = or disjoint i32 %77, 1025, !dbg !38
  %384 = lshr i32 %383, 6, !dbg !38
  %385 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %384, !dbg !38
  %386 = getelementptr inbounds float, ptr addrspace(3) %385, i32 %383, !dbg !38
  %387 = load i32, ptr addrspace(3) %386, align 4, !dbg !38
  %388 = or disjoint i32 %77, 1026, !dbg !38
  %389 = lshr i32 %388, 6, !dbg !38
  %390 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %389, !dbg !38
  %391 = getelementptr inbounds float, ptr addrspace(3) %390, i32 %388, !dbg !38
  %392 = load i32, ptr addrspace(3) %391, align 4, !dbg !38
  %393 = or disjoint i32 %77, 1027, !dbg !38
  %394 = lshr i32 %393, 6, !dbg !38
  %395 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %394, !dbg !38
  %396 = getelementptr inbounds float, ptr addrspace(3) %395, i32 %393, !dbg !38
  %397 = load i32, ptr addrspace(3) %396, align 4, !dbg !38
  %398 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %174, !dbg !38
  %399 = getelementptr inbounds float, ptr addrspace(3) %398, i32 %173, !dbg !38
  %400 = load i32, ptr addrspace(3) %399, align 4, !dbg !38
  %401 = or disjoint i32 %77, 2049, !dbg !38
  %402 = lshr i32 %401, 6, !dbg !38
  %403 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %402, !dbg !38
  %404 = getelementptr inbounds float, ptr addrspace(3) %403, i32 %401, !dbg !38
  %405 = load i32, ptr addrspace(3) %404, align 4, !dbg !38
  %406 = or disjoint i32 %77, 2050, !dbg !38
  %407 = lshr i32 %406, 6, !dbg !38
  %408 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %407, !dbg !38
  %409 = getelementptr inbounds float, ptr addrspace(3) %408, i32 %406, !dbg !38
  %410 = load i32, ptr addrspace(3) %409, align 4, !dbg !38
  %411 = or disjoint i32 %77, 2051, !dbg !38
  %412 = lshr i32 %411, 6, !dbg !38
  %413 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %412, !dbg !38
  %414 = getelementptr inbounds float, ptr addrspace(3) %413, i32 %411, !dbg !38
  %415 = load i32, ptr addrspace(3) %414, align 4, !dbg !38
  %416 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %185, !dbg !38
  %417 = getelementptr inbounds float, ptr addrspace(3) %416, i32 %184, !dbg !38
  %418 = load i32, ptr addrspace(3) %417, align 4, !dbg !38
  %419 = or disjoint i32 %77, 3073, !dbg !38
  %420 = lshr i32 %419, 6, !dbg !38
  %421 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %420, !dbg !38
  %422 = getelementptr inbounds float, ptr addrspace(3) %421, i32 %419, !dbg !38
  %423 = load i32, ptr addrspace(3) %422, align 4, !dbg !38
  %424 = or disjoint i32 %77, 3074, !dbg !38
  %425 = lshr i32 %424, 6, !dbg !38
  %426 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %425, !dbg !38
  %427 = getelementptr inbounds float, ptr addrspace(3) %426, i32 %424, !dbg !38
  %428 = load i32, ptr addrspace(3) %427, align 4, !dbg !38
  %429 = or disjoint i32 %77, 3075, !dbg !38
  %430 = lshr i32 %429, 6, !dbg !38
  %431 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %430, !dbg !38
  %432 = getelementptr inbounds float, ptr addrspace(3) %431, i32 %429, !dbg !38
  %433 = load i32, ptr addrspace(3) %432, align 4, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %370, i32 %373, i32 %376, i32 %379, ptr addrspace(1) %318, i1 %24) #2, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %382, i32 %387, i32 %392, i32 %397, ptr addrspace(1) %319, i1 %25) #2, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %400, i32 %405, i32 %410, i32 %415, ptr addrspace(1) %320, i1 %26) #2, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %418, i32 %423, i32 %428, i32 %433, ptr addrspace(1) %321, i1 %27) #2, !dbg !38
  %434 = getelementptr float, ptr addrspace(1) %5, i64 %216, !dbg !39
  %435 = getelementptr float, ptr addrspace(1) %5, i64 %218, !dbg !39
  %436 = getelementptr float, ptr addrspace(1) %5, i64 %220, !dbg !39
  %437 = getelementptr float, ptr addrspace(1) %5, i64 %222, !dbg !39
  %438 = bitcast float %302 to i32, !dbg !40
  %439 = bitcast float %303 to i32, !dbg !40
  %440 = bitcast float %304 to i32, !dbg !40
  %441 = bitcast float %305 to i32, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %438, i32 %439, i32 %440, i32 %441, ptr addrspace(1) %434, i1 %28) #2, !dbg !40
  %442 = bitcast float %306 to i32, !dbg !40
  %443 = bitcast float %307 to i32, !dbg !40
  %444 = bitcast float %308 to i32, !dbg !40
  %445 = bitcast float %309 to i32, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %442, i32 %443, i32 %444, i32 %445, ptr addrspace(1) %435, i1 %28) #2, !dbg !40
  %446 = bitcast float %310 to i32, !dbg !40
  %447 = bitcast float %311 to i32, !dbg !40
  %448 = bitcast float %312 to i32, !dbg !40
  %449 = bitcast float %313 to i32, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %446, i32 %447, i32 %448, i32 %449, ptr addrspace(1) %436, i1 %28) #2, !dbg !40
  %450 = bitcast float %314 to i32, !dbg !40
  %451 = bitcast float %315 to i32, !dbg !40
  %452 = bitcast float %316 to i32, !dbg !40
  %453 = bitcast float %317 to i32, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %450, i32 %451, i32 %452, i32 %453, ptr addrspace(1) %437, i1 %28) #2, !dbg !40
  ret void, !dbg !41
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cypkicl3pvgg3zxdqen46p3jyav2kym5ooq3nx6ylg5qfk6d4ev6.py", directory: "inductor_cache/yp")
!4 = !{ptr @triton_poi_fused_add_convolution_mul_12, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_convolution_mul_12, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_convolution_mul_12", linkageName: "triton_poi_fused_add_convolution_mul_12", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 31, column: 19, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 32, column: 40, scope: !7)
!21 = !DILocation(line: 32, column: 35, scope: !7)
!22 = !DILocation(line: 32, column: 30, scope: !7)
!23 = !DILocation(line: 32, column: 45, scope: !7)
!24 = !DILocation(line: 33, column: 30, scope: !7)
!25 = !DILocation(line: 33, column: 35, scope: !7)
!26 = !DILocation(line: 34, column: 38, scope: !7)
!27 = !DILocation(line: 34, column: 50, scope: !7)
!28 = !DILocation(line: 34, column: 35, scope: !7)
!29 = !DILocation(line: 34, column: 43, scope: !7)
!30 = !DILocation(line: 34, column: 30, scope: !7)
!31 = !DILocation(line: 34, column: 55, scope: !7)
!32 = !DILocation(line: 35, column: 30, scope: !7)
!33 = !DILocation(line: 35, column: 35, scope: !7)
!34 = !DILocation(line: 36, column: 18, scope: !7)
!35 = !DILocation(line: 37, column: 18, scope: !7)
!36 = !DILocation(line: 38, column: 18, scope: !7)
!37 = !DILocation(line: 39, column: 25, scope: !7)
!38 = !DILocation(line: 39, column: 46, scope: !7)
!39 = !DILocation(line: 40, column: 25, scope: !7)
!40 = !DILocation(line: 40, column: 56, scope: !7)
!41 = !DILocation(line: 40, column: 4, scope: !7)
