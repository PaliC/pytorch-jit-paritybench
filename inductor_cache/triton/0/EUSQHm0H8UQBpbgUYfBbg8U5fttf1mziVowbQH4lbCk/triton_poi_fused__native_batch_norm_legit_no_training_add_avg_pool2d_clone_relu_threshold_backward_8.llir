; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_avg_pool2d_clone_relu_threshold_backward_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, i32 %16) local_unnamed_addr !dbg !7 {
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %19 = shl i32 %18, 6, !dbg !11
  %20 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %21 = shl i32 %20, 1, !dbg !12
  %22 = and i32 %21, 62, !dbg !12
  %23 = or disjoint i32 %19, %22, !dbg !13
  %24 = or disjoint i32 %23, 1, !dbg !13
  %25 = icmp slt i32 %23, 64, !dbg !14
  %26 = srem i32 %24, 2, !dbg !15
  %27 = ashr exact i32 %23, 1, !dbg !16
  %28 = srem i32 %27, 2, !dbg !17
  %29 = sdiv i32 %23, 4, !dbg !18
  %30 = srem i32 %29, 4, !dbg !19
  %31 = mul nsw i32 %28, 3, !dbg !20
  %32 = mul i32 %29, 9, !dbg !21
  %33 = add i32 %32, 4, !dbg !22
  %34 = add i32 %33, %31, !dbg !23
  %35 = add i32 %33, %26, !dbg !22
  %36 = add i32 %35, %31, !dbg !23
  %37 = sext i32 %34 to i64, !dbg !24
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !24
  %39 = sext i32 %36 to i64, !dbg !24
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !24
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 %25) #3, !dbg !25
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 %25) #3, !dbg !25
  %43 = sext i32 %23 to i64, !dbg !26
  %44 = getelementptr float, ptr addrspace(1) %1, i64 %43, !dbg !26
  %45 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %44, i1 %25) #3, !dbg !27
  %46 = sext i32 %30 to i64, !dbg !28
  %47 = getelementptr float, ptr addrspace(1) %2, i64 %46, !dbg !28
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 %25) #3, !dbg !29
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 %25) #3, !dbg !29
  %50 = getelementptr float, ptr addrspace(1) %3, i64 %46, !dbg !30
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 %25) #3, !dbg !31
  %52 = bitcast i32 %51 to float, !dbg !31
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 %25) #3, !dbg !31
  %54 = bitcast i32 %53 to float, !dbg !31
  %55 = getelementptr float, ptr addrspace(1) %4, i64 %46, !dbg !32
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 %25) #3, !dbg !33
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 %25) #3, !dbg !33
  %58 = getelementptr float, ptr addrspace(1) %5, i64 %46, !dbg !34
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %25) #3, !dbg !35
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %25) #3, !dbg !35
  %61 = getelementptr float, ptr addrspace(1) %6, i64 %43, !dbg !36
  %62 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %61, i1 %25) #3, !dbg !37
  %63 = getelementptr float, ptr addrspace(1) %7, i64 %43, !dbg !38
  %64 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %63, i1 %25) #3, !dbg !39
  %65 = getelementptr float, ptr addrspace(1) %8, i64 %46, !dbg !40
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 %25) #3, !dbg !41
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 %25) #3, !dbg !41
  %68 = getelementptr float, ptr addrspace(1) %9, i64 %46, !dbg !42
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 %25) #3, !dbg !43
  %70 = bitcast i32 %69 to float, !dbg !43
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 %25) #3, !dbg !43
  %72 = bitcast i32 %71 to float, !dbg !43
  %73 = getelementptr float, ptr addrspace(1) %10, i64 %46, !dbg !44
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 %25) #3, !dbg !45
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 %25) #3, !dbg !45
  %76 = getelementptr float, ptr addrspace(1) %11, i64 %46, !dbg !46
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 %25) #3, !dbg !47
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 %25) #3, !dbg !47
  %79 = fadd float %52, 0x3F50624DE0000000, !dbg !48
  %80 = fadd float %54, 0x3F50624DE0000000, !dbg !48
  %81 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !49
  %.not.i = icmp eq i32 %81, 0, !dbg !49
  %82 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !49
  %.not1.i = icmp eq i32 %82, 0, !dbg !49
  br i1 %.not.i, label %88, label %83, !dbg !49

83:                                               ; preds = %17
  br i1 %.not1.i, label %86, label %84, !dbg !49

84:                                               ; preds = %83
  %85 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %79) #3, !dbg !49
  br label %__nv_sqrtf.exit, !dbg !49

86:                                               ; preds = %83
  %87 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %79) #3, !dbg !49
  br label %__nv_sqrtf.exit, !dbg !49

88:                                               ; preds = %17
  br i1 %.not1.i, label %91, label %89, !dbg !49

89:                                               ; preds = %88
  %90 = tail call float @llvm.nvvm.sqrt.rn.f(float %79) #3, !dbg !49
  br label %__nv_sqrtf.exit, !dbg !49

91:                                               ; preds = %88
  %92 = tail call float @llvm.nvvm.sqrt.approx.f(float %79) #3, !dbg !49
  br label %__nv_sqrtf.exit, !dbg !49

__nv_sqrtf.exit:                                  ; preds = %84, %86, %89, %91
  %.0.i = phi float [ %85, %84 ], [ %87, %86 ], [ %90, %89 ], [ %92, %91 ], !dbg !49
  %93 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !49
  %.not.i1 = icmp eq i32 %93, 0, !dbg !49
  %94 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !49
  %.not1.i4 = icmp eq i32 %94, 0, !dbg !49
  br i1 %.not.i1, label %100, label %95, !dbg !49

95:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %98, label %96, !dbg !49

96:                                               ; preds = %95
  %97 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %80) #3, !dbg !49
  br label %__nv_sqrtf.exit5, !dbg !49

98:                                               ; preds = %95
  %99 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %80) #3, !dbg !49
  br label %__nv_sqrtf.exit5, !dbg !49

100:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %103, label %101, !dbg !49

101:                                              ; preds = %100
  %102 = tail call float @llvm.nvvm.sqrt.rn.f(float %80) #3, !dbg !49
  br label %__nv_sqrtf.exit5, !dbg !49

103:                                              ; preds = %100
  %104 = tail call float @llvm.nvvm.sqrt.approx.f(float %80) #3, !dbg !49
  br label %__nv_sqrtf.exit5, !dbg !49

__nv_sqrtf.exit5:                                 ; preds = %96, %98, %101, %103
  %.0.i3 = phi float [ %97, %96 ], [ %99, %98 ], [ %102, %101 ], [ %104, %103 ], !dbg !49
  %105 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !50
  %106 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !50
  %107 = icmp sgt i32 %28, 0, !dbg !51
  %108 = icmp sgt i32 %26, 0, !dbg !52
  %109 = and i1 %108, %107, !dbg !53
  %110 = add i32 %23, -3, !dbg !54
  %111 = add i32 %23, -2, !dbg !54
  %112 = sext i32 %110 to i64, !dbg !55
  %113 = getelementptr float, ptr addrspace(1) %6, i64 %112, !dbg !55
  %114 = sext i32 %111 to i64, !dbg !55
  %115 = getelementptr float, ptr addrspace(1) %6, i64 %114, !dbg !55
  %116 = and i1 %25, %109, !dbg !56
  %117 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %113, i1 false, i32 0, i1 false) #3, !dbg !57
  %118 = bitcast i32 %117 to float, !dbg !57
  %119 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %115, i1 %116, i32 0, i1 %116) #3, !dbg !57
  %120 = bitcast i32 %119 to float, !dbg !57
  %121 = and i1 %25, %107, !dbg !58
  %122 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %115, i1 %121, i32 0, i1 %121, i32 0, i1 %121) #3, !dbg !59
  %123 = extractvalue { i32, i32 } %122, 0, !dbg !59
  %124 = extractvalue { i32, i32 } %122, 1, !dbg !59
  %125 = bitcast i32 %123 to float, !dbg !59
  %126 = bitcast i32 %124 to float, !dbg !59
  %127 = fadd float %118, %125, !dbg !60
  %128 = fadd float %120, %126, !dbg !60
  %129 = icmp eq i32 %26, -1, !dbg !61
  %130 = and i1 %129, %107, !dbg !62
  %131 = add i32 %23, -1, !dbg !63
  %132 = sext i32 %131 to i64, !dbg !64
  %133 = getelementptr float, ptr addrspace(1) %6, i64 %132, !dbg !64
  %134 = sext i32 %24 to i64, !dbg !64
  %135 = getelementptr float, ptr addrspace(1) %6, i64 %134, !dbg !64
  %136 = getelementptr i8, ptr addrspace(1) %135, i64 -4, !dbg !64
  %137 = and i1 %25, %130, !dbg !65
  %138 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %133, i1 %121, i32 0, i1 %121) #3, !dbg !66
  %139 = bitcast i32 %138 to float, !dbg !66
  %140 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %136, i1 %137, i32 0, i1 %137) #3, !dbg !66
  %141 = bitcast i32 %140 to float, !dbg !66
  %142 = fadd float %127, %139, !dbg !67
  %143 = fadd float %128, %141, !dbg !67
  %144 = icmp sgt i32 %28, -1, !dbg !68
  %145 = and i1 %108, %144, !dbg !69
  %146 = and i1 %25, %145, !dbg !70
  %147 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %133, i1 false, i32 0, i1 false) #3, !dbg !71
  %148 = bitcast i32 %147 to float, !dbg !71
  %149 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %136, i1 %146, i32 0, i1 %146) #3, !dbg !71
  %150 = bitcast i32 %149 to float, !dbg !71
  %151 = fadd float %142, %148, !dbg !72
  %152 = fadd float %143, %150, !dbg !72
  %153 = and i1 %25, %144, !dbg !73
  %154 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %61, i1 %153, i32 0, i1 %153, i32 0, i1 %153) #3, !dbg !74
  %155 = extractvalue { i32, i32 } %154, 0, !dbg !74
  %156 = extractvalue { i32, i32 } %154, 1, !dbg !74
  %157 = bitcast i32 %155 to float, !dbg !74
  %158 = bitcast i32 %156 to float, !dbg !74
  %159 = fadd float %151, %157, !dbg !75
  %160 = fadd float %152, %158, !dbg !75
  %161 = and i1 %129, %144, !dbg !76
  %162 = add i32 %23, 2, !dbg !77
  %163 = sext i32 %162 to i64, !dbg !78
  %164 = getelementptr float, ptr addrspace(1) %6, i64 %163, !dbg !78
  %165 = and i1 %25, %161, !dbg !79
  %166 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %135, i1 %153, i32 0, i1 %153) #3, !dbg !80
  %167 = bitcast i32 %166 to float, !dbg !80
  %168 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %164, i1 %165, i32 0, i1 %165) #3, !dbg !80
  %169 = bitcast i32 %168 to float, !dbg !80
  %170 = fadd float %159, %167, !dbg !81
  %171 = fadd float %160, %169, !dbg !81
  %172 = icmp slt i32 %28, 1, !dbg !82
  %173 = and i1 %108, %172, !dbg !83
  %174 = and i1 %25, %173, !dbg !84
  %175 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %135, i1 false, i32 0, i1 false) #3, !dbg !85
  %176 = bitcast i32 %175 to float, !dbg !85
  %177 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %164, i1 %174, i32 0, i1 %174) #3, !dbg !85
  %178 = bitcast i32 %177 to float, !dbg !85
  %179 = fadd float %170, %176, !dbg !86
  %180 = fadd float %171, %178, !dbg !86
  %181 = and i1 %25, %172, !dbg !87
  %182 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %164, i1 %181, i32 0, i1 %181, i32 0, i1 %181) #3, !dbg !88
  %183 = extractvalue { i32, i32 } %182, 0, !dbg !88
  %184 = extractvalue { i32, i32 } %182, 1, !dbg !88
  %185 = bitcast i32 %183 to float, !dbg !88
  %186 = bitcast i32 %184 to float, !dbg !88
  %187 = fadd float %179, %185, !dbg !89
  %188 = fadd float %180, %186, !dbg !89
  %189 = and i1 %129, %172, !dbg !90
  %190 = add i32 %23, 3, !dbg !91
  %191 = add i32 %23, 4, !dbg !91
  %192 = sext i32 %190 to i64, !dbg !92
  %193 = getelementptr float, ptr addrspace(1) %6, i64 %192, !dbg !92
  %194 = sext i32 %191 to i64, !dbg !92
  %195 = getelementptr float, ptr addrspace(1) %6, i64 %194, !dbg !92
  %196 = and i1 %25, %189, !dbg !93
  %197 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %193, i1 %181, i32 0, i1 %181) #3, !dbg !94
  %198 = bitcast i32 %197 to float, !dbg !94
  %199 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %195, i1 %196, i32 0, i1 %196) #3, !dbg !94
  %200 = bitcast i32 %199 to float, !dbg !94
  %201 = fadd float %187, %198, !dbg !95
  %202 = fadd float %188, %200, !dbg !95
  %203 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %201, float 4.000000e+00) #3, !dbg !96
  %204 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %202, float 4.000000e+00) #3, !dbg !96
  %205 = fadd float %70, 0x3F50624DE0000000, !dbg !97
  %206 = fadd float %72, 0x3F50624DE0000000, !dbg !97
  %207 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !98
  %.not.i6 = icmp eq i32 %207, 0, !dbg !98
  %208 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !98
  %.not1.i9 = icmp eq i32 %208, 0, !dbg !98
  br i1 %.not.i6, label %214, label %209, !dbg !98

209:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %212, label %210, !dbg !98

210:                                              ; preds = %209
  %211 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %205) #3, !dbg !98
  br label %__nv_sqrtf.exit10, !dbg !98

212:                                              ; preds = %209
  %213 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %205) #3, !dbg !98
  br label %__nv_sqrtf.exit10, !dbg !98

214:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %217, label %215, !dbg !98

215:                                              ; preds = %214
  %216 = tail call float @llvm.nvvm.sqrt.rn.f(float %205) #3, !dbg !98
  br label %__nv_sqrtf.exit10, !dbg !98

217:                                              ; preds = %214
  %218 = tail call float @llvm.nvvm.sqrt.approx.f(float %205) #3, !dbg !98
  br label %__nv_sqrtf.exit10, !dbg !98

__nv_sqrtf.exit10:                                ; preds = %210, %212, %215, %217
  %.0.i8 = phi float [ %211, %210 ], [ %213, %212 ], [ %216, %215 ], [ %218, %217 ], !dbg !98
  %219 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !98
  %.not.i11 = icmp eq i32 %219, 0, !dbg !98
  %220 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !98
  %.not1.i14 = icmp eq i32 %220, 0, !dbg !98
  br i1 %.not.i11, label %226, label %221, !dbg !98

221:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %224, label %222, !dbg !98

222:                                              ; preds = %221
  %223 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %206) #3, !dbg !98
  br label %__nv_sqrtf.exit15, !dbg !98

224:                                              ; preds = %221
  %225 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %206) #3, !dbg !98
  br label %__nv_sqrtf.exit15, !dbg !98

226:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %229, label %227, !dbg !98

227:                                              ; preds = %226
  %228 = tail call float @llvm.nvvm.sqrt.rn.f(float %206) #3, !dbg !98
  br label %__nv_sqrtf.exit15, !dbg !98

229:                                              ; preds = %226
  %230 = tail call float @llvm.nvvm.sqrt.approx.f(float %206) #3, !dbg !98
  br label %__nv_sqrtf.exit15, !dbg !98

__nv_sqrtf.exit15:                                ; preds = %222, %224, %227, %229
  %.0.i13 = phi float [ %223, %222 ], [ %225, %224 ], [ %228, %227 ], [ %230, %229 ], !dbg !98
  %231 = extractvalue { i32, i32 } %64, 1, !dbg !39
  %232 = bitcast i32 %231 to float, !dbg !39
  %233 = bitcast i32 %67 to float, !dbg !41
  %234 = fsub float %232, %233, !dbg !99
  %235 = extractvalue { i32, i32 } %64, 0, !dbg !39
  %236 = bitcast i32 %235 to float, !dbg !39
  %237 = bitcast i32 %66 to float, !dbg !41
  %238 = fsub float %236, %237, !dbg !99
  %239 = extractvalue { i32, i32 } %62, 1, !dbg !37
  %240 = extractvalue { i32, i32 } %62, 0, !dbg !37
  %241 = extractvalue { i32, i32 } %45, 1, !dbg !27
  %242 = bitcast i32 %241 to float, !dbg !27
  %243 = bitcast i32 %49 to float, !dbg !29
  %244 = fsub float %242, %243, !dbg !100
  %245 = fmul float %244, %106, !dbg !101
  %246 = bitcast i32 %57 to float, !dbg !33
  %247 = fmul float %245, %246, !dbg !102
  %248 = bitcast i32 %60 to float, !dbg !35
  %249 = fadd float %247, %248, !dbg !103
  %250 = bitcast i32 %42 to float, !dbg !25
  %251 = fadd float %249, %250, !dbg !104
  %252 = fadd float %251, %204, !dbg !105
  %253 = extractvalue { i32, i32 } %45, 0, !dbg !27
  %254 = bitcast i32 %253 to float, !dbg !27
  %255 = bitcast i32 %48 to float, !dbg !29
  %256 = fsub float %254, %255, !dbg !100
  %257 = fmul float %256, %105, !dbg !101
  %258 = bitcast i32 %56 to float, !dbg !33
  %259 = fmul float %257, %258, !dbg !102
  %260 = bitcast i32 %59 to float, !dbg !35
  %261 = fadd float %259, %260, !dbg !103
  %262 = bitcast i32 %41 to float, !dbg !25
  %263 = fadd float %261, %262, !dbg !104
  %264 = fadd float %263, %203, !dbg !105
  %265 = bitcast i32 %78 to float, !dbg !47
  %266 = bitcast i32 %77 to float, !dbg !47
  %267 = bitcast i32 %75 to float, !dbg !45
  %268 = bitcast i32 %74 to float, !dbg !45
  %.frozen = freeze i32 %23, !dbg !106
  %269 = sdiv i32 %.frozen, 16, !dbg !106
  %270 = mul i32 %269, 16, !dbg !107
  %.decomposed = sub i32 %.frozen, %270, !dbg !107
  %271 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !108
  %272 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !108
  %273 = fmul float %238, %271, !dbg !109
  %274 = fmul float %234, %272, !dbg !109
  %275 = fmul float %273, %268, !dbg !110
  %276 = fmul float %274, %267, !dbg !110
  %277 = fadd float %275, %266, !dbg !111
  %278 = fadd float %276, %265, !dbg !111
  %279 = fadd float %277, %262, !dbg !112
  %280 = fadd float %278, %250, !dbg !112
  %281 = shl i32 %269, 6, !dbg !113
  %282 = add i32 %281, %.decomposed, !dbg !114
  %283 = sext i32 %282 to i64, !dbg !115
  %284 = getelementptr float, ptr addrspace(1) %12, i64 %283, !dbg !115
  %285 = bitcast float %263 to i32, !dbg !116
  %286 = bitcast float %251 to i32, !dbg !116
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %285, i32 %286, ptr addrspace(1) %284, i1 %25) #3, !dbg !116
  %287 = getelementptr float, ptr addrspace(1) %13, i64 %283, !dbg !117
  %288 = bitcast float %264 to i32, !dbg !118
  %289 = bitcast float %252 to i32, !dbg !118
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %288, i32 %289, ptr addrspace(1) %287, i1 %25) #3, !dbg !118
  %290 = getelementptr i1, ptr addrspace(1) %14, i64 %43, !dbg !119
  %291 = insertelement <2 x i32> poison, i32 %240, i64 0, !dbg !37
  %292 = insertelement <2 x i32> %291, i32 %239, i64 1, !dbg !37
  %293 = bitcast <2 x i32> %292 to <2 x float>, !dbg !37
  %294 = fcmp olt <2 x float> %293, zeroinitializer, !dbg !120
  %295 = select <2 x i1> %294, <2 x float> zeroinitializer, <2 x float> %293, !dbg !124
  %296 = fcmp ole <2 x float> %295, zeroinitializer, !dbg !125
  %297 = zext <2 x i1> %296 to <2 x i8>, !dbg !126
  %298 = bitcast <2 x i8> %297 to i16, !dbg !126
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %298, ptr addrspace(1) %290, i1 %25) #3, !dbg !126
  %299 = getelementptr float, ptr addrspace(1) %15, i64 %283, !dbg !127
  %300 = bitcast float %279 to i32, !dbg !128
  %301 = bitcast float %280 to i32, !dbg !128
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %300, i32 %301, ptr addrspace(1) %299, i1 %25) #3, !dbg !128
  ret void, !dbg !129
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c7mxdtdwh2774bblf3hbldbuyb5pxeqftwnrjklbt5qyprebulmh.py", directory: "inductor_cache/7m")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_avg_pool2d_clone_relu_threshold_backward_8, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_avg_pool2d_clone_relu_threshold_backward_8, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_avg_pool2d_clone_relu_threshold_backward_8", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_avg_pool2d_clone_relu_threshold_backward_8", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 25, column: 21, scope: !7)
!17 = !DILocation(line: 25, column: 26, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 28, column: 26, scope: !7)
!20 = !DILocation(line: 31, column: 41, scope: !7)
!21 = !DILocation(line: 31, column: 48, scope: !7)
!22 = !DILocation(line: 31, column: 39, scope: !7)
!23 = !DILocation(line: 31, column: 46, scope: !7)
!24 = !DILocation(line: 31, column: 30, scope: !7)
!25 = !DILocation(line: 31, column: 53, scope: !7)
!26 = !DILocation(line: 32, column: 30, scope: !7)
!27 = !DILocation(line: 32, column: 35, scope: !7)
!28 = !DILocation(line: 33, column: 30, scope: !7)
!29 = !DILocation(line: 33, column: 35, scope: !7)
!30 = !DILocation(line: 34, column: 30, scope: !7)
!31 = !DILocation(line: 34, column: 35, scope: !7)
!32 = !DILocation(line: 35, column: 31, scope: !7)
!33 = !DILocation(line: 35, column: 36, scope: !7)
!34 = !DILocation(line: 36, column: 31, scope: !7)
!35 = !DILocation(line: 36, column: 36, scope: !7)
!36 = !DILocation(line: 37, column: 31, scope: !7)
!37 = !DILocation(line: 37, column: 36, scope: !7)
!38 = !DILocation(line: 38, column: 31, scope: !7)
!39 = !DILocation(line: 38, column: 36, scope: !7)
!40 = !DILocation(line: 39, column: 31, scope: !7)
!41 = !DILocation(line: 39, column: 36, scope: !7)
!42 = !DILocation(line: 40, column: 31, scope: !7)
!43 = !DILocation(line: 40, column: 36, scope: !7)
!44 = !DILocation(line: 41, column: 32, scope: !7)
!45 = !DILocation(line: 41, column: 37, scope: !7)
!46 = !DILocation(line: 42, column: 32, scope: !7)
!47 = !DILocation(line: 42, column: 37, scope: !7)
!48 = !DILocation(line: 45, column: 18, scope: !7)
!49 = !DILocation(line: 46, column: 26, scope: !7)
!50 = !DILocation(line: 48, column: 18, scope: !7)
!51 = !DILocation(line: 57, column: 21, scope: !7)
!52 = !DILocation(line: 62, column: 21, scope: !7)
!53 = !DILocation(line: 65, column: 20, scope: !7)
!54 = !DILocation(line: 66, column: 38, scope: !7)
!55 = !DILocation(line: 66, column: 31, scope: !7)
!56 = !DILocation(line: 66, column: 51, scope: !7)
!57 = !DILocation(line: 66, column: 43, scope: !7)
!58 = !DILocation(line: 72, column: 51, scope: !7)
!59 = !DILocation(line: 72, column: 43, scope: !7)
!60 = !DILocation(line: 73, column: 20, scope: !7)
!61 = !DILocation(line: 76, column: 20, scope: !7)
!62 = !DILocation(line: 78, column: 20, scope: !7)
!63 = !DILocation(line: 79, column: 38, scope: !7)
!64 = !DILocation(line: 79, column: 31, scope: !7)
!65 = !DILocation(line: 79, column: 51, scope: !7)
!66 = !DILocation(line: 79, column: 43, scope: !7)
!67 = !DILocation(line: 80, column: 20, scope: !7)
!68 = !DILocation(line: 82, column: 21, scope: !7)
!69 = !DILocation(line: 85, column: 20, scope: !7)
!70 = !DILocation(line: 86, column: 51, scope: !7)
!71 = !DILocation(line: 86, column: 43, scope: !7)
!72 = !DILocation(line: 87, column: 20, scope: !7)
!73 = !DILocation(line: 89, column: 44, scope: !7)
!74 = !DILocation(line: 89, column: 36, scope: !7)
!75 = !DILocation(line: 90, column: 20, scope: !7)
!76 = !DILocation(line: 91, column: 20, scope: !7)
!77 = !DILocation(line: 92, column: 35, scope: !7)
!78 = !DILocation(line: 92, column: 31, scope: !7)
!79 = !DILocation(line: 92, column: 48, scope: !7)
!80 = !DILocation(line: 92, column: 40, scope: !7)
!81 = !DILocation(line: 93, column: 20, scope: !7)
!82 = !DILocation(line: 96, column: 20, scope: !7)
!83 = !DILocation(line: 98, column: 20, scope: !7)
!84 = !DILocation(line: 99, column: 48, scope: !7)
!85 = !DILocation(line: 99, column: 40, scope: !7)
!86 = !DILocation(line: 100, column: 20, scope: !7)
!87 = !DILocation(line: 102, column: 48, scope: !7)
!88 = !DILocation(line: 102, column: 40, scope: !7)
!89 = !DILocation(line: 103, column: 20, scope: !7)
!90 = !DILocation(line: 104, column: 20, scope: !7)
!91 = !DILocation(line: 105, column: 35, scope: !7)
!92 = !DILocation(line: 105, column: 31, scope: !7)
!93 = !DILocation(line: 105, column: 48, scope: !7)
!94 = !DILocation(line: 105, column: 40, scope: !7)
!95 = !DILocation(line: 106, column: 20, scope: !7)
!96 = !DILocation(line: 108, column: 20, scope: !7)
!97 = !DILocation(line: 115, column: 20, scope: !7)
!98 = !DILocation(line: 116, column: 27, scope: !7)
!99 = !DILocation(line: 114, column: 20, scope: !7)
!100 = !DILocation(line: 43, column: 18, scope: !7)
!101 = !DILocation(line: 51, column: 19, scope: !7)
!102 = !DILocation(line: 52, column: 20, scope: !7)
!103 = !DILocation(line: 53, column: 20, scope: !7)
!104 = !DILocation(line: 54, column: 19, scope: !7)
!105 = !DILocation(line: 109, column: 20, scope: !7)
!106 = !DILocation(line: 29, column: 19, scope: !7)
!107 = !DILocation(line: 30, column: 19, scope: !7)
!108 = !DILocation(line: 117, column: 19, scope: !7)
!109 = !DILocation(line: 119, column: 20, scope: !7)
!110 = !DILocation(line: 120, column: 20, scope: !7)
!111 = !DILocation(line: 121, column: 20, scope: !7)
!112 = !DILocation(line: 122, column: 20, scope: !7)
!113 = !DILocation(line: 123, column: 33, scope: !7)
!114 = !DILocation(line: 123, column: 30, scope: !7)
!115 = !DILocation(line: 123, column: 25, scope: !7)
!116 = !DILocation(line: 123, column: 45, scope: !7)
!117 = !DILocation(line: 124, column: 25, scope: !7)
!118 = !DILocation(line: 124, column: 45, scope: !7)
!119 = !DILocation(line: 125, column: 25, scope: !7)
!120 = !DILocation(line: 118, column: 15, scope: !121, inlinedAt: !123)
!121 = distinct !DILexicalBlockFile(scope: !7, file: !122, discriminator: 0)
!122 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!123 = !DILocation(line: 111, column: 42, scope: !7)
!124 = !DILocation(line: 121, column: 29, scope: !121, inlinedAt: !123)
!125 = !DILocation(line: 113, column: 21, scope: !7)
!126 = !DILocation(line: 125, column: 37, scope: !7)
!127 = !DILocation(line: 126, column: 25, scope: !7)
!128 = !DILocation(line: 126, column: 45, scope: !7)
!129 = !DILocation(line: 126, column: 4, scope: !7)
