; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused_add_native_layer_norm_native_layer_norm_backward_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9, i32 %10) local_unnamed_addr !dbg !7 {
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %13 = icmp slt i32 %12, 16, !dbg !11
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %15 = and i32 %14, 31, !dbg !12
  %16 = lshr i32 %14, 5, !dbg !12
  %17 = shl i32 %14, 1, !dbg !12
  %18 = and i32 %17, 126, !dbg !12
  %.frozen = freeze i32 %12, !dbg !13
  %19 = sdiv i32 %.frozen, 4, !dbg !13
  %20 = mul i32 %19, 4, !dbg !14
  %.decomposed = sub i32 %.frozen, %20, !dbg !14
  %21 = shl i32 %19, 7, !dbg !15
  %22 = or disjoint i32 %21, %18, !dbg !16
  %23 = sext i32 %22 to i64, !dbg !17
  %24 = getelementptr float, ptr addrspace(1) %1, i64 %23, !dbg !17
  %25 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %24, i1 %13, i32 0, i1 %13, i32 0, i1 %13) #5, !dbg !18
  %26 = extractvalue { i32, i32 } %25, 0, !dbg !18
  %27 = extractvalue { i32, i32 } %25, 1, !dbg !18
  %28 = zext nneg i32 %18 to i64, !dbg !19
  %29 = getelementptr float, ptr addrspace(1) %2, i64 %28, !dbg !19
  %30 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %29, i1 true) #5, !dbg !20
  %31 = extractvalue { i32, i32 } %30, 0, !dbg !20
  %32 = extractvalue { i32, i32 } %30, 1, !dbg !20
  %33 = shl nsw i32 %.decomposed, 7, !dbg !21
  %34 = or disjoint i32 %33, %18, !dbg !22
  %35 = sext i32 %34 to i64, !dbg !23
  %36 = getelementptr float, ptr addrspace(1) %3, i64 %35, !dbg !23
  %37 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %36, i1 %13, i32 0, i1 %13, i32 0, i1 %13) #5, !dbg !24
  %38 = extractvalue { i32, i32 } %37, 0, !dbg !24
  %39 = extractvalue { i32, i32 } %37, 1, !dbg !24
  %40 = shl i32 %12, 7, !dbg !25
  %41 = or disjoint i32 %40, %18, !dbg !26
  %42 = sext i32 %41 to i64, !dbg !27
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !27
  %44 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %43, i1 %13, i32 0, i1 %13, i32 0, i1 %13) #5, !dbg !28
  %45 = extractvalue { i32, i32 } %44, 0, !dbg !28
  %46 = extractvalue { i32, i32 } %44, 1, !dbg !28
  %47 = getelementptr float, ptr addrspace(1) %4, i64 %28, !dbg !29
  %48 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %47, i1 true) #5, !dbg !30
  %49 = extractvalue { i32, i32 } %48, 0, !dbg !30
  %50 = extractvalue { i32, i32 } %48, 1, !dbg !30
  %51 = getelementptr float, ptr addrspace(1) %5, i64 %28, !dbg !31
  %52 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %51, i1 true) #5, !dbg !32
  %53 = getelementptr float, ptr addrspace(1) %6, i64 %28, !dbg !33
  %54 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %53, i1 true) #5, !dbg !34
  %55 = insertelement <2 x i32> poison, i32 %26, i64 0, !dbg !18
  %56 = insertelement <2 x i32> %55, i32 %27, i64 1, !dbg !18
  %57 = bitcast <2 x i32> %56 to <2 x float>, !dbg !18
  %58 = insertelement <2 x i32> poison, i32 %31, i64 0, !dbg !20
  %59 = insertelement <2 x i32> %58, i32 %32, i64 1, !dbg !20
  %60 = bitcast <2 x i32> %59 to <2 x float>, !dbg !20
  %61 = insertelement <2 x i32> poison, i32 %38, i64 0, !dbg !24
  %62 = insertelement <2 x i32> %61, i32 %39, i64 1, !dbg !24
  %63 = bitcast <2 x i32> %62 to <2 x float>, !dbg !24
  %64 = insertelement <2 x i32> poison, i32 %45, i64 0, !dbg !28
  %65 = insertelement <2 x i32> %64, i32 %46, i64 1, !dbg !28
  %66 = bitcast <2 x i32> %65 to <2 x float>, !dbg !28
  %67 = insertelement <2 x i32> poison, i32 %49, i64 0, !dbg !30
  %68 = insertelement <2 x i32> %67, i32 %50, i64 1, !dbg !30
  %69 = bitcast <2 x i32> %68 to <2 x float>, !dbg !30
  %70 = fadd <2 x float> %57, %60, !dbg !35
  %71 = fadd <2 x float> %70, %63, !dbg !36
  %72 = fadd <2 x float> %66, %69, !dbg !37
  %73 = fadd <2 x float> %71, %72, !dbg !38
  %74 = extractelement <2 x float> %73, i64 0, !dbg !39
  %75 = extractelement <2 x float> %73, i64 1, !dbg !39
  %76 = fadd float %74, %75, !dbg !39
  %77 = select i1 %13, float %76, float 0.000000e+00, !dbg !39
  %78 = bitcast float %77 to i32, !dbg !44
  %79 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %78, i32 16, i32 31), !dbg !44
  %80 = bitcast i32 %79 to float, !dbg !44
  %81 = fadd float %77, %80, !dbg !39
  %82 = bitcast float %81 to i32, !dbg !44
  %83 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %82, i32 8, i32 31), !dbg !44
  %84 = bitcast i32 %83 to float, !dbg !44
  %85 = fadd float %81, %84, !dbg !39
  %86 = bitcast float %85 to i32, !dbg !44
  %87 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %86, i32 4, i32 31), !dbg !44
  %88 = bitcast i32 %87 to float, !dbg !44
  %89 = fadd float %85, %88, !dbg !39
  %90 = bitcast float %89 to i32, !dbg !44
  %91 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %90, i32 2, i32 31), !dbg !44
  %92 = bitcast i32 %91 to float, !dbg !44
  %93 = fadd float %89, %92, !dbg !39
  %94 = bitcast float %93 to i32, !dbg !44
  %95 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %94, i32 1, i32 31), !dbg !44
  %96 = bitcast i32 %95 to float, !dbg !44
  %97 = fadd float %93, %96, !dbg !39
  %98 = icmp eq i32 %15, 0, !dbg !44
  %99 = and i32 %16, 1, !dbg !44
  %100 = zext nneg i32 %99 to i64, !dbg !44
  %101 = getelementptr float, ptr addrspace(3) @global_smem, i64 %100, !dbg !44
  %102 = bitcast float %97 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %101, <1 x i32> %102, i1 %98) #5, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %103 = icmp slt i32 %14, 2, !dbg !44
  %104 = sext i32 %14 to i64, !dbg !44
  %105 = getelementptr float, ptr addrspace(3) @global_smem, i64 %104, !dbg !44
  %106 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %105, i1 %103) #5, !dbg !44
  %107 = bitcast i32 %106 to float, !dbg !44
  %108 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %106, i32 1, i32 31), !dbg !44
  %109 = bitcast i32 %108 to float, !dbg !44
  %110 = fadd float %107, %109, !dbg !39
  %111 = and i32 %14, 1, !dbg !44
  %112 = icmp eq i32 %111, 0, !dbg !44
  %113 = and i1 %103, %112, !dbg !44
  %114 = bitcast float %110 to <1 x i32>, !dbg !44
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %105, <1 x i32> %114, i1 %113) #5, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %115 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !44
  %116 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %115, float 1.280000e+02) #5, !dbg !45
  %117 = fsub float %74, %116, !dbg !46
  %118 = fsub float %75, %116, !dbg !46
  %119 = fmul float %117, %117, !dbg !47
  %120 = fmul float %118, %118, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %121 = fadd float %119, %120, !dbg !50
  %122 = select i1 %13, float %121, float 0.000000e+00, !dbg !50
  %123 = bitcast float %122 to i32, !dbg !48
  %124 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %123, i32 16, i32 31), !dbg !48
  %125 = bitcast i32 %124 to float, !dbg !48
  %126 = fadd float %122, %125, !dbg !50
  %127 = bitcast float %126 to i32, !dbg !48
  %128 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %127, i32 8, i32 31), !dbg !48
  %129 = bitcast i32 %128 to float, !dbg !48
  %130 = fadd float %126, %129, !dbg !50
  %131 = bitcast float %130 to i32, !dbg !48
  %132 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %131, i32 4, i32 31), !dbg !48
  %133 = bitcast i32 %132 to float, !dbg !48
  %134 = fadd float %130, %133, !dbg !50
  %135 = bitcast float %134 to i32, !dbg !48
  %136 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %135, i32 2, i32 31), !dbg !48
  %137 = bitcast i32 %136 to float, !dbg !48
  %138 = fadd float %134, %137, !dbg !50
  %139 = bitcast float %138 to i32, !dbg !48
  %140 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %139, i32 1, i32 31), !dbg !48
  %141 = bitcast i32 %140 to float, !dbg !48
  %142 = fadd float %138, %141, !dbg !50
  %143 = bitcast float %142 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %101, <1 x i32> %143, i1 %98) #5, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %144 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %105, i1 %103) #5, !dbg !48
  %145 = bitcast i32 %144 to float, !dbg !48
  %146 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %144, i32 1, i32 31), !dbg !48
  %147 = bitcast i32 %146 to float, !dbg !48
  %148 = fadd float %145, %147, !dbg !50
  %149 = bitcast float %148 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %105, <1 x i32> %149, i1 %113) #5, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %150 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !48
  %151 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %150, float 1.280000e+02) #5, !dbg !51
  %152 = fadd float %151, 0x3EE4F8B580000000, !dbg !52
  %153 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %.not.i = icmp eq i32 %153, 0, !dbg !53
  br i1 %.not.i, label %156, label %154, !dbg !53

154:                                              ; preds = %11
  %155 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %152), !dbg !53
  br label %__nv_rsqrtf.exit, !dbg !53

156:                                              ; preds = %11
  %157 = tail call float @llvm.nvvm.rsqrt.approx.f(float %152), !dbg !53
  br label %__nv_rsqrtf.exit, !dbg !53

__nv_rsqrtf.exit:                                 ; preds = %154, %156
  %.0.i = phi float [ %155, %154 ], [ %157, %156 ], !dbg !53
  %158 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %159 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !53
  %.not.i4 = icmp eq i32 %159, 0, !dbg !53
  br i1 %.not.i4, label %162, label %160, !dbg !53

160:                                              ; preds = %__nv_rsqrtf.exit
  %161 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %152), !dbg !53
  br label %__nv_rsqrtf.exit6, !dbg !53

162:                                              ; preds = %__nv_rsqrtf.exit
  %163 = tail call float @llvm.nvvm.rsqrt.approx.f(float %152), !dbg !53
  br label %__nv_rsqrtf.exit6, !dbg !53

__nv_rsqrtf.exit6:                                ; preds = %160, %162
  %.0.i5 = phi float [ %161, %160 ], [ %163, %162 ], !dbg !53
  %164 = extractvalue { i32, i32 } %54, 1, !dbg !34
  %165 = bitcast i32 %164 to float, !dbg !34
  %166 = extractvalue { i32, i32 } %54, 0, !dbg !34
  %167 = bitcast i32 %166 to float, !dbg !34
  %168 = extractvalue { i32, i32 } %52, 1, !dbg !32
  %169 = bitcast i32 %168 to float, !dbg !32
  %170 = extractvalue { i32, i32 } %52, 0, !dbg !32
  %171 = bitcast i32 %170 to float, !dbg !32
  %172 = fmul float %117, %.0.i5, !dbg !54
  %173 = fmul float %118, %.0.i5, !dbg !54
  %174 = fmul float %172, %171, !dbg !55
  %175 = fmul float %173, %169, !dbg !55
  %176 = fadd float %174, %167, !dbg !56
  %177 = fadd float %175, %165, !dbg !56
  %178 = fmul float %.0.i, 7.812500e-03, !dbg !57
  %179 = bitcast float %172 to i32, !dbg !58
  %180 = bitcast float %173 to i32, !dbg !58
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %179, i32 %180, ptr addrspace(1) %43, i1 %13) #5, !dbg !58
  %181 = getelementptr float, ptr addrspace(1) %7, i64 %42, !dbg !59
  %182 = bitcast float %176 to i32, !dbg !60
  %183 = bitcast float %177 to i32, !dbg !60
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %182, i32 %183, ptr addrspace(1) %181, i1 %13) #5, !dbg !60
  %184 = sext i32 %12 to i64, !dbg !61
  %185 = getelementptr float, ptr addrspace(1) %8, i64 %184, !dbg !61
  %urem = and i32 %14, 63, !dbg !62
  %186 = icmp eq i32 %urem, 0, !dbg !62
  %187 = bitcast float %178 to i32, !dbg !62
  %188 = and i1 %186, %13, !dbg !62
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %187, ptr addrspace(1) %185, i1 %188) #5, !dbg !62
  ret void, !dbg !63
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cjr6buc5bhqazwfibk34zs3akqourrppbn5mq4sno3v7gktsazp4.py", directory: "inductor_cache/jr")
!4 = !{ptr @triton_per_fused_add_native_layer_norm_native_layer_norm_backward_6, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_native_layer_norm_native_layer_norm_backward_6, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_native_layer_norm_native_layer_norm_backward_6", linkageName: "triton_per_fused_add_native_layer_norm_native_layer_norm_backward_6", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 21, scope: !7)
!12 = !DILocation(line: 26, column: 34, scope: !7)
!13 = !DILocation(line: 30, column: 19, scope: !7)
!14 = !DILocation(line: 31, column: 19, scope: !7)
!15 = !DILocation(line: 33, column: 39, scope: !7)
!16 = !DILocation(line: 33, column: 35, scope: !7)
!17 = !DILocation(line: 33, column: 30, scope: !7)
!18 = !DILocation(line: 33, column: 44, scope: !7)
!19 = !DILocation(line: 34, column: 30, scope: !7)
!20 = !DILocation(line: 34, column: 35, scope: !7)
!21 = !DILocation(line: 35, column: 39, scope: !7)
!22 = !DILocation(line: 35, column: 35, scope: !7)
!23 = !DILocation(line: 35, column: 30, scope: !7)
!24 = !DILocation(line: 35, column: 44, scope: !7)
!25 = !DILocation(line: 36, column: 43, scope: !7)
!26 = !DILocation(line: 36, column: 39, scope: !7)
!27 = !DILocation(line: 36, column: 34, scope: !7)
!28 = !DILocation(line: 36, column: 48, scope: !7)
!29 = !DILocation(line: 37, column: 30, scope: !7)
!30 = !DILocation(line: 37, column: 35, scope: !7)
!31 = !DILocation(line: 38, column: 31, scope: !7)
!32 = !DILocation(line: 38, column: 36, scope: !7)
!33 = !DILocation(line: 39, column: 31, scope: !7)
!34 = !DILocation(line: 39, column: 36, scope: !7)
!35 = !DILocation(line: 40, column: 18, scope: !7)
!36 = !DILocation(line: 41, column: 18, scope: !7)
!37 = !DILocation(line: 42, column: 18, scope: !7)
!38 = !DILocation(line: 43, column: 18, scope: !7)
!39 = !DILocation(line: 256, column: 15, scope: !40, inlinedAt: !43)
!40 = distinct !DILexicalBlockFile(scope: !42, file: !41, discriminator: 0)
!41 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!42 = distinct !DILexicalBlockFile(scope: !7, file: !41, discriminator: 0)
!43 = !DILocation(line: 48, column: 26, scope: !7)
!44 = !DILocation(line: 267, column: 36, scope: !42, inlinedAt: !43)
!45 = !DILocation(line: 51, column: 20, scope: !7)
!46 = !DILocation(line: 52, column: 19, scope: !7)
!47 = !DILocation(line: 53, column: 20, scope: !7)
!48 = !DILocation(line: 267, column: 36, scope: !42, inlinedAt: !49)
!49 = !DILocation(line: 56, column: 26, scope: !7)
!50 = !DILocation(line: 256, column: 15, scope: !40, inlinedAt: !49)
!51 = !DILocation(line: 59, column: 20, scope: !7)
!52 = !DILocation(line: 61, column: 20, scope: !7)
!53 = !DILocation(line: 62, column: 28, scope: !7)
!54 = !DILocation(line: 63, column: 20, scope: !7)
!55 = !DILocation(line: 64, column: 20, scope: !7)
!56 = !DILocation(line: 65, column: 20, scope: !7)
!57 = !DILocation(line: 67, column: 20, scope: !7)
!58 = !DILocation(line: 68, column: 49, scope: !7)
!59 = !DILocation(line: 69, column: 25, scope: !7)
!60 = !DILocation(line: 69, column: 46, scope: !7)
!61 = !DILocation(line: 70, column: 25, scope: !7)
!62 = !DILocation(line: 70, column: 37, scope: !7)
!63 = !DILocation(line: 70, column: 4, scope: !7)
