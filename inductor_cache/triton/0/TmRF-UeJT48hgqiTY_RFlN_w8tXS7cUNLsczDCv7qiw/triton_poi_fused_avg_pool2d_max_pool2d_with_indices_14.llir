; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_avg_pool2d_max_pool2d_with_indices_14(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %7 = shl i32 %6, 8, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 1, !dbg !12
  %10 = and i32 %9, 254, !dbg !12
  %11 = or disjoint i32 %7, %10, !dbg !13
  %12 = icmp slt i32 %11, 7128, !dbg !14
  %13 = srem i32 %11, 22, !dbg !15
  %14 = sdiv i32 %11, 1782, !dbg !16
  %15 = mul i32 %14, 6358, !dbg !17
  %16 = add i32 %15, %13, !dbg !18
  %17 = add i32 %16, -396, !dbg !19
  %18 = add i32 %16, -374, !dbg !20
  %19 = add i32 %16, -352, !dbg !21
  %20 = add i32 %16, -22, !dbg !22
  %21 = add i32 %16, 22, !dbg !23
  %22 = insertelement <2 x i32> poison, i32 %11, i64 0, !dbg !24
  %23 = shufflevector <2 x i32> %22, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !24
  %24 = sdiv <2 x i32> %23, <i32 198, i32 22>, !dbg !24
  %25 = srem <2 x i32> %24, splat (i32 9), !dbg !25
  %26 = shl nsw <2 x i32> %25, splat (i32 1), !dbg !26
  %27 = extractelement <2 x i32> %25, i64 1, !dbg !27
  %28 = mul nsw i32 %27, 44, !dbg !27
  %29 = extractelement <2 x i32> %25, i64 0, !dbg !28
  %30 = mul nsw i32 %29, 748, !dbg !28
  %31 = add i32 %17, %28, !dbg !29
  %32 = add i32 %31, %30, !dbg !30
  %33 = sext i32 %32 to i64, !dbg !31
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !31
  %35 = icmp sgt <2 x i32> %25, splat (i32 -1), !dbg !32
  %36 = extractelement <2 x i1> %35, i64 1, !dbg !33
  %37 = add i32 %18, %28, !dbg !34
  %38 = add i32 %37, %30, !dbg !35
  %39 = sext i32 %38 to i64, !dbg !36
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !36
  %41 = or disjoint <2 x i32> %26, splat (i32 1), !dbg !37
  %42 = icmp slt <2 x i32> %41, splat (i32 17), !dbg !38
  %43 = and <2 x i1> %35, %42, !dbg !39
  %44 = extractelement <2 x i1> %43, i64 1, !dbg !40
  %45 = add i32 %19, %28, !dbg !41
  %46 = add i32 %45, %30, !dbg !42
  %47 = sext i32 %46 to i64, !dbg !43
  %48 = getelementptr float, ptr addrspace(1) %0, i64 %47, !dbg !43
  %49 = extractelement <2 x i1> %35, i64 0, !dbg !44
  %50 = add i32 %20, %28, !dbg !45
  %51 = add i32 %50, %30, !dbg !46
  %52 = sext i32 %51 to i64, !dbg !47
  %53 = getelementptr float, ptr addrspace(1) %0, i64 %52, !dbg !47
  %54 = or i32 %29, %27, !dbg !48
  %55 = icmp sgt i32 %54, -1, !dbg !48
  %56 = add i32 %16, %28, !dbg !49
  %57 = add i32 %56, %30, !dbg !50
  %58 = sext i32 %57 to i64, !dbg !51
  %59 = getelementptr float, ptr addrspace(1) %0, i64 %58, !dbg !51
  %60 = and i1 %12, %55, !dbg !52
  %61 = and i1 %49, %44, !dbg !53
  %62 = add i32 %21, %28, !dbg !54
  %63 = add i32 %62, %30, !dbg !55
  %64 = sext i32 %63 to i64, !dbg !56
  %65 = getelementptr float, ptr addrspace(1) %0, i64 %64, !dbg !56
  %66 = and i1 %12, %61, !dbg !57
  %67 = extractelement <2 x i1> %43, i64 0, !dbg !40
  %68 = add i32 %16, 352, !dbg !58
  %69 = add i32 %68, %28, !dbg !59
  %70 = add i32 %69, %30, !dbg !60
  %71 = sext i32 %70 to i64, !dbg !61
  %72 = getelementptr float, ptr addrspace(1) %0, i64 %71, !dbg !61
  %73 = and i1 %36, %67, !dbg !62
  %74 = add i32 %16, 374, !dbg !63
  %75 = add i32 %74, %28, !dbg !64
  %76 = add i32 %75, %30, !dbg !65
  %77 = sext i32 %76 to i64, !dbg !66
  %78 = getelementptr float, ptr addrspace(1) %0, i64 %77, !dbg !66
  %79 = and i1 %12, %73, !dbg !67
  %80 = and i1 %67, %44, !dbg !40
  %81 = add i32 %16, 396, !dbg !68
  %82 = add i32 %81, %28, !dbg !69
  %83 = add i32 %82, %30, !dbg !70
  %84 = sext i32 %83 to i64, !dbg !71
  %85 = getelementptr float, ptr addrspace(1) %0, i64 %84, !dbg !71
  %86 = and i1 %12, %80, !dbg !72
  %87 = add nsw <2 x i32> %26, splat (i32 -1), !dbg !73
  %88 = icmp sgt <2 x i32> %25, zeroinitializer, !dbg !74
  %89 = extractelement <2 x i1> %88, i64 0, !dbg !75
  %90 = extractelement <2 x i1> %88, i64 1, !dbg !75
  %91 = and i1 %89, %90, !dbg !75
  %92 = and i1 %12, %91, !dbg !76
  %93 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %34, i1 %92, i32 -8388608, i1 %92, i32 -8388608, i1 %92) #1, !dbg !77
  %94 = extractvalue { i32, i32 } %93, 0, !dbg !77
  %95 = extractvalue { i32, i32 } %93, 1, !dbg !77
  %96 = and i1 %89, %36, !dbg !33
  %97 = and i1 %12, %96, !dbg !78
  %98 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %40, i1 %97, i32 -8388608, i1 %97, i32 -8388608, i1 %97) #1, !dbg !79
  %99 = extractvalue { i32, i32 } %98, 0, !dbg !79
  %100 = extractvalue { i32, i32 } %98, 1, !dbg !79
  %101 = and i1 %89, %44, !dbg !80
  %102 = and i1 %12, %101, !dbg !81
  %103 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %48, i1 %102, i32 -8388608, i1 %102, i32 -8388608, i1 %102) #1, !dbg !82
  %104 = extractvalue { i32, i32 } %103, 0, !dbg !82
  %105 = extractvalue { i32, i32 } %103, 1, !dbg !82
  %106 = and i1 %49, %90, !dbg !44
  %107 = and i1 %12, %106, !dbg !83
  %108 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %53, i1 %107, i32 -8388608, i1 %107, i32 -8388608, i1 %107) #1, !dbg !84
  %109 = extractvalue { i32, i32 } %108, 0, !dbg !84
  %110 = extractvalue { i32, i32 } %108, 1, !dbg !84
  %111 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %59, i1 %60, i32 -8388608, i1 %60, i32 -8388608, i1 %60) #1, !dbg !85
  %112 = extractvalue { i32, i32 } %111, 0, !dbg !85
  %113 = extractvalue { i32, i32 } %111, 1, !dbg !85
  %114 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %65, i1 %66, i32 -8388608, i1 %66, i32 -8388608, i1 %66) #1, !dbg !86
  %115 = extractvalue { i32, i32 } %114, 0, !dbg !86
  %116 = extractvalue { i32, i32 } %114, 1, !dbg !86
  %117 = and i1 %90, %67, !dbg !87
  %118 = and i1 %12, %117, !dbg !88
  %119 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %72, i1 %118, i32 -8388608, i1 %118, i32 -8388608, i1 %118) #1, !dbg !89
  %120 = extractvalue { i32, i32 } %119, 0, !dbg !89
  %121 = extractvalue { i32, i32 } %119, 1, !dbg !89
  %122 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %78, i1 %79, i32 -8388608, i1 %79, i32 -8388608, i1 %79) #1, !dbg !90
  %123 = extractvalue { i32, i32 } %122, 0, !dbg !90
  %124 = extractvalue { i32, i32 } %122, 1, !dbg !90
  %125 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %85, i1 %86, i32 -8388608, i1 %86, i32 -8388608, i1 %86) #1, !dbg !91
  %126 = extractvalue { i32, i32 } %125, 0, !dbg !91
  %127 = extractvalue { i32, i32 } %125, 1, !dbg !91
  %128 = insertelement <2 x i32> poison, i32 %94, i64 0, !dbg !77
  %129 = insertelement <2 x i32> %128, i32 %95, i64 1, !dbg !77
  %130 = bitcast <2 x i32> %129 to <2 x float>, !dbg !77
  %131 = insertelement <2 x i32> poison, i32 %99, i64 0, !dbg !79
  %132 = insertelement <2 x i32> %131, i32 %100, i64 1, !dbg !79
  %133 = bitcast <2 x i32> %132 to <2 x float>, !dbg !79
  %134 = fcmp ogt <2 x float> %133, %130, !dbg !92
  %135 = fcmp uno <2 x float> %133, zeroinitializer, !dbg !96
  %136 = or <2 x i1> %134, %135, !dbg !97
  %.v = select <2 x i1> %136, <2 x i32> %132, <2 x i32> %129, !dbg !98
  %137 = bitcast <2 x i32> %.v to <2 x float>, !dbg !98
  %138 = insertelement <2 x i32> poison, i32 %104, i64 0, !dbg !82
  %139 = insertelement <2 x i32> %138, i32 %105, i64 1, !dbg !82
  %140 = bitcast <2 x i32> %139 to <2 x float>, !dbg !82
  %141 = fcmp olt <2 x float> %137, %140, !dbg !99
  %142 = fcmp uno <2 x float> %140, zeroinitializer, !dbg !101
  %143 = or <2 x i1> %142, %141, !dbg !102
  %.v4 = select <2 x i1> %143, <2 x i32> %139, <2 x i32> %.v, !dbg !103
  %144 = bitcast <2 x i32> %.v4 to <2 x float>, !dbg !103
  %145 = insertelement <2 x i32> poison, i32 %109, i64 0, !dbg !84
  %146 = insertelement <2 x i32> %145, i32 %110, i64 1, !dbg !84
  %147 = bitcast <2 x i32> %146 to <2 x float>, !dbg !84
  %148 = fcmp olt <2 x float> %144, %147, !dbg !104
  %149 = fcmp uno <2 x float> %147, zeroinitializer, !dbg !106
  %150 = or <2 x i1> %149, %148, !dbg !107
  %.v5 = select <2 x i1> %150, <2 x i32> %146, <2 x i32> %.v4, !dbg !108
  %151 = bitcast <2 x i32> %.v5 to <2 x float>, !dbg !108
  %152 = insertelement <2 x i32> poison, i32 %112, i64 0, !dbg !85
  %153 = insertelement <2 x i32> %152, i32 %113, i64 1, !dbg !85
  %154 = bitcast <2 x i32> %153 to <2 x float>, !dbg !85
  %155 = fcmp olt <2 x float> %151, %154, !dbg !109
  %156 = fcmp uno <2 x float> %154, zeroinitializer, !dbg !111
  %157 = or <2 x i1> %156, %155, !dbg !112
  %.v6 = select <2 x i1> %157, <2 x i32> %153, <2 x i32> %.v5, !dbg !113
  %158 = bitcast <2 x i32> %.v6 to <2 x float>, !dbg !113
  %159 = insertelement <2 x i32> poison, i32 %115, i64 0, !dbg !86
  %160 = insertelement <2 x i32> %159, i32 %116, i64 1, !dbg !86
  %161 = bitcast <2 x i32> %160 to <2 x float>, !dbg !86
  %162 = fcmp olt <2 x float> %158, %161, !dbg !114
  %163 = fcmp uno <2 x float> %161, zeroinitializer, !dbg !116
  %164 = or <2 x i1> %163, %162, !dbg !117
  %.v7 = select <2 x i1> %164, <2 x i32> %160, <2 x i32> %.v6, !dbg !118
  %165 = bitcast <2 x i32> %.v7 to <2 x float>, !dbg !118
  %166 = insertelement <2 x i32> poison, i32 %120, i64 0, !dbg !89
  %167 = insertelement <2 x i32> %166, i32 %121, i64 1, !dbg !89
  %168 = bitcast <2 x i32> %167 to <2 x float>, !dbg !89
  %169 = fcmp olt <2 x float> %165, %168, !dbg !119
  %170 = fcmp uno <2 x float> %168, zeroinitializer, !dbg !121
  %171 = or <2 x i1> %170, %169, !dbg !122
  %.v8 = select <2 x i1> %171, <2 x i32> %167, <2 x i32> %.v7, !dbg !123
  %172 = bitcast <2 x i32> %.v8 to <2 x float>, !dbg !123
  %173 = insertelement <2 x i32> poison, i32 %123, i64 0, !dbg !90
  %174 = insertelement <2 x i32> %173, i32 %124, i64 1, !dbg !90
  %175 = bitcast <2 x i32> %174 to <2 x float>, !dbg !90
  %176 = fcmp olt <2 x float> %172, %175, !dbg !124
  %177 = fcmp uno <2 x float> %175, zeroinitializer, !dbg !126
  %178 = or <2 x i1> %177, %176, !dbg !127
  %.v9 = select <2 x i1> %178, <2 x i32> %174, <2 x i32> %.v8, !dbg !128
  %179 = bitcast <2 x i32> %.v9 to <2 x float>, !dbg !128
  %180 = insertelement <2 x i32> poison, i32 %126, i64 0, !dbg !91
  %181 = insertelement <2 x i32> %180, i32 %127, i64 1, !dbg !91
  %182 = bitcast <2 x i32> %181 to <2 x float>, !dbg !91
  %183 = fcmp olt <2 x float> %179, %182, !dbg !129
  %184 = bitcast i32 %126 to float, !dbg !131
  %185 = fcmp uno float %184, 0.000000e+00, !dbg !131
  %186 = bitcast i32 %127 to float, !dbg !131
  %187 = fcmp uno float %186, 0.000000e+00, !dbg !131
  %188 = extractelement <2 x i1> %183, i64 0, !dbg !132
  %189 = or i1 %185, %188, !dbg !132
  %190 = extractelement <2 x i1> %183, i64 1, !dbg !132
  %191 = or i1 %187, %190, !dbg !132
  %192 = zext <2 x i1> %134 to <2 x i8>, !dbg !133
  %193 = select <2 x i1> %141, <2 x i8> splat (i8 2), <2 x i8> %192, !dbg !134
  %194 = select <2 x i1> %148, <2 x i8> splat (i8 3), <2 x i8> %193, !dbg !135
  %195 = select <2 x i1> %155, <2 x i8> splat (i8 4), <2 x i8> %194, !dbg !136
  %196 = select <2 x i1> %162, <2 x i8> splat (i8 5), <2 x i8> %195, !dbg !137
  %197 = select <2 x i1> %169, <2 x i8> splat (i8 6), <2 x i8> %196, !dbg !138
  %198 = select <2 x i1> %176, <2 x i8> splat (i8 7), <2 x i8> %197, !dbg !139
  %199 = select <2 x i1> %183, <2 x i8> splat (i8 8), <2 x i8> %198, !dbg !140
  %200 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %34, i1 %92, i32 0, i1 %92, i32 0, i1 %92) #1, !dbg !141
  %201 = extractvalue { i32, i32 } %200, 0, !dbg !141
  %202 = extractvalue { i32, i32 } %200, 1, !dbg !141
  %203 = bitcast i32 %201 to float, !dbg !141
  %204 = bitcast i32 %202 to float, !dbg !141
  %205 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %40, i1 %97, i32 0, i1 %97, i32 0, i1 %97) #1, !dbg !142
  %206 = extractvalue { i32, i32 } %205, 0, !dbg !142
  %207 = extractvalue { i32, i32 } %205, 1, !dbg !142
  %208 = bitcast i32 %206 to float, !dbg !142
  %209 = bitcast i32 %207 to float, !dbg !142
  %210 = fadd float %203, %208, !dbg !143
  %211 = fadd float %204, %209, !dbg !143
  %212 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %48, i1 %102, i32 0, i1 %102, i32 0, i1 %102) #1, !dbg !144
  %213 = extractvalue { i32, i32 } %212, 0, !dbg !144
  %214 = extractvalue { i32, i32 } %212, 1, !dbg !144
  %215 = bitcast i32 %213 to float, !dbg !144
  %216 = bitcast i32 %214 to float, !dbg !144
  %217 = fadd float %210, %215, !dbg !145
  %218 = fadd float %211, %216, !dbg !145
  %219 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %53, i1 %107, i32 0, i1 %107, i32 0, i1 %107) #1, !dbg !146
  %220 = extractvalue { i32, i32 } %219, 0, !dbg !146
  %221 = extractvalue { i32, i32 } %219, 1, !dbg !146
  %222 = bitcast i32 %220 to float, !dbg !146
  %223 = bitcast i32 %221 to float, !dbg !146
  %224 = fadd float %217, %222, !dbg !147
  %225 = fadd float %218, %223, !dbg !147
  %226 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %59, i1 %60, i32 0, i1 %60, i32 0, i1 %60) #1, !dbg !148
  %227 = extractvalue { i32, i32 } %226, 0, !dbg !148
  %228 = extractvalue { i32, i32 } %226, 1, !dbg !148
  %229 = bitcast i32 %227 to float, !dbg !148
  %230 = bitcast i32 %228 to float, !dbg !148
  %231 = fadd float %224, %229, !dbg !149
  %232 = fadd float %225, %230, !dbg !149
  %233 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %65, i1 %66, i32 0, i1 %66, i32 0, i1 %66) #1, !dbg !150
  %234 = extractvalue { i32, i32 } %233, 0, !dbg !150
  %235 = extractvalue { i32, i32 } %233, 1, !dbg !150
  %236 = bitcast i32 %234 to float, !dbg !150
  %237 = bitcast i32 %235 to float, !dbg !150
  %238 = fadd float %231, %236, !dbg !151
  %239 = fadd float %232, %237, !dbg !151
  %240 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %72, i1 %118, i32 0, i1 %118, i32 0, i1 %118) #1, !dbg !152
  %241 = extractvalue { i32, i32 } %240, 0, !dbg !152
  %242 = extractvalue { i32, i32 } %240, 1, !dbg !152
  %243 = bitcast i32 %241 to float, !dbg !152
  %244 = bitcast i32 %242 to float, !dbg !152
  %245 = fadd float %238, %243, !dbg !153
  %246 = fadd float %239, %244, !dbg !153
  %247 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %78, i1 %79, i32 0, i1 %79, i32 0, i1 %79) #1, !dbg !154
  %248 = extractvalue { i32, i32 } %247, 0, !dbg !154
  %249 = extractvalue { i32, i32 } %247, 1, !dbg !154
  %250 = bitcast i32 %248 to float, !dbg !154
  %251 = bitcast i32 %249 to float, !dbg !154
  %252 = fadd float %245, %250, !dbg !155
  %253 = fadd float %246, %251, !dbg !155
  %254 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %85, i1 %86, i32 0, i1 %86, i32 0, i1 %86) #1, !dbg !156
  %255 = extractvalue { i32, i32 } %254, 0, !dbg !156
  %256 = extractvalue { i32, i32 } %254, 1, !dbg !156
  %257 = bitcast i32 %255 to float, !dbg !156
  %258 = bitcast i32 %256 to float, !dbg !156
  %259 = fadd float %252, %257, !dbg !157
  %260 = fadd float %253, %258, !dbg !157
  %261 = select <2 x i1> %88, <2 x i32> %87, <2 x i32> zeroinitializer, !dbg !158
  %262 = shufflevector <2 x i32> %261, <2 x i32> poison, <2 x i32> <i32 1, i32 0>, !dbg !158
  %263 = add nsw <2 x i32> %26, splat (i32 2), !dbg !159
  %264 = icmp sgt <2 x i32> %25, splat (i32 7), !dbg !160
  %265 = select <2 x i1> %264, <2 x i32> splat (i32 17), <2 x i32> zeroinitializer, !dbg !161
  %266 = icmp slt <2 x i32> %25, splat (i32 8), !dbg !162
  %267 = select <2 x i1> %266, <2 x i32> %263, <2 x i32> zeroinitializer, !dbg !163
  %268 = add nsw <2 x i32> %267, %265, !dbg !164
  %269 = shufflevector <2 x i32> %268, <2 x i32> %261, <2 x i32> <i32 1, i32 3>, !dbg !165
  %270 = shufflevector <2 x i32> %268, <2 x i32> %262, <2 x i32> <i32 0, i32 3>, !dbg !165
  %271 = mul nsw <2 x i32> %269, %270, !dbg !165
  %272 = mul nsw <2 x i32> %268, %262, !dbg !166
  %shift = shufflevector <2 x i32> %272, <2 x i32> poison, <2 x i32> <i32 1, i32 poison>
  %273 = add nsw <2 x i32> %272, %shift
  %shift3 = shufflevector <2 x i32> %271, <2 x i32> poison, <2 x i32> <i32 1, i32 poison>, !dbg !167
  %274 = add nsw <2 x i32> %271, %shift3, !dbg !167
  %275 = sub nsw <2 x i32> %274, %273, !dbg !166
  %276 = extractelement <2 x i32> %275, i64 0, !dbg !166
  %277 = sitofp i32 %276 to float, !dbg !168
  %278 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %259, float %277) #1, !dbg !168
  %279 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %260, float %277) #1, !dbg !168
  %280 = sext i32 %11 to i64, !dbg !169
  %281 = getelementptr float, ptr addrspace(1) %1, i64 %280, !dbg !169
  %282 = extractelement <2 x i32> %.v9, i64 0, !dbg !170
  %283 = select i1 %189, i32 %126, i32 %282, !dbg !171
  %284 = extractelement <2 x i32> %.v9, i64 1, !dbg !170
  %285 = select i1 %191, i32 %127, i32 %284, !dbg !171
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %283, i32 %285, ptr addrspace(1) %281, i1 %12) #1, !dbg !170
  %286 = getelementptr i8, ptr addrspace(1) %2, i64 %280, !dbg !172
  %287 = bitcast <2 x i8> %199 to i16, !dbg !173
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %287, ptr addrspace(1) %286, i1 %12) #1, !dbg !173
  %288 = getelementptr float, ptr addrspace(1) %3, i64 %280, !dbg !174
  %289 = bitcast float %278 to i32, !dbg !175
  %290 = bitcast float %279 to i32, !dbg !175
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %289, i32 %290, ptr addrspace(1) %288, i1 %12) #1, !dbg !175
  ret void, !dbg !176
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cybduabgwdq6hypcy3xwz542pmgwnhfuvzqqm53oqe2pcucgawep.py", directory: "inductor_cache/yb")
!4 = !{ptr @triton_poi_fused_avg_pool2d_max_pool2d_with_indices_14, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_avg_pool2d_max_pool2d_with_indices_14, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_avg_pool2d_max_pool2d_with_indices_14", linkageName: "triton_poi_fused_avg_pool2d_max_pool2d_with_indices_14", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 19, scope: !7)
!16 = !DILocation(line: 27, column: 19, scope: !7)
!17 = !DILocation(line: 40, column: 67, scope: !7)
!18 = !DILocation(line: 40, column: 40, scope: !7)
!19 = !DILocation(line: 40, column: 45, scope: !7)
!20 = !DILocation(line: 46, column: 45, scope: !7)
!21 = !DILocation(line: 53, column: 45, scope: !7)
!22 = !DILocation(line: 60, column: 44, scope: !7)
!23 = !DILocation(line: 66, column: 41, scope: !7)
!24 = !DILocation(line: 24, column: 21, scope: !7)
!25 = !DILocation(line: 24, column: 28, scope: !7)
!26 = !DILocation(line: 29, column: 20, scope: !7)
!27 = !DILocation(line: 40, column: 48, scope: !7)
!28 = !DILocation(line: 40, column: 57, scope: !7)
!29 = !DILocation(line: 40, column: 53, scope: !7)
!30 = !DILocation(line: 40, column: 62, scope: !7)
!31 = !DILocation(line: 40, column: 31, scope: !7)
!32 = !DILocation(line: 56, column: 21, scope: !7)
!33 = !DILocation(line: 45, column: 19, scope: !7)
!34 = !DILocation(line: 46, column: 53, scope: !7)
!35 = !DILocation(line: 46, column: 62, scope: !7)
!36 = !DILocation(line: 46, column: 31, scope: !7)
!37 = !DILocation(line: 68, column: 16, scope: !7)
!38 = !DILocation(line: 70, column: 20, scope: !7)
!39 = !DILocation(line: 71, column: 20, scope: !7)
!40 = !DILocation(line: 78, column: 20, scope: !7)
!41 = !DILocation(line: 53, column: 53, scope: !7)
!42 = !DILocation(line: 53, column: 62, scope: !7)
!43 = !DILocation(line: 53, column: 31, scope: !7)
!44 = !DILocation(line: 59, column: 20, scope: !7)
!45 = !DILocation(line: 60, column: 52, scope: !7)
!46 = !DILocation(line: 60, column: 61, scope: !7)
!47 = !DILocation(line: 60, column: 31, scope: !7)
!48 = !DILocation(line: 62, column: 20, scope: !7)
!49 = !DILocation(line: 63, column: 44, scope: !7)
!50 = !DILocation(line: 63, column: 53, scope: !7)
!51 = !DILocation(line: 63, column: 31, scope: !7)
!52 = !DILocation(line: 63, column: 71, scope: !7)
!53 = !DILocation(line: 65, column: 20, scope: !7)
!54 = !DILocation(line: 66, column: 49, scope: !7)
!55 = !DILocation(line: 66, column: 58, scope: !7)
!56 = !DILocation(line: 66, column: 31, scope: !7)
!57 = !DILocation(line: 66, column: 76, scope: !7)
!58 = !DILocation(line: 73, column: 42, scope: !7)
!59 = !DILocation(line: 73, column: 50, scope: !7)
!60 = !DILocation(line: 73, column: 59, scope: !7)
!61 = !DILocation(line: 73, column: 31, scope: !7)
!62 = !DILocation(line: 75, column: 20, scope: !7)
!63 = !DILocation(line: 76, column: 42, scope: !7)
!64 = !DILocation(line: 76, column: 50, scope: !7)
!65 = !DILocation(line: 76, column: 59, scope: !7)
!66 = !DILocation(line: 76, column: 31, scope: !7)
!67 = !DILocation(line: 76, column: 77, scope: !7)
!68 = !DILocation(line: 79, column: 42, scope: !7)
!69 = !DILocation(line: 79, column: 50, scope: !7)
!70 = !DILocation(line: 79, column: 59, scope: !7)
!71 = !DILocation(line: 79, column: 31, scope: !7)
!72 = !DILocation(line: 79, column: 77, scope: !7)
!73 = !DILocation(line: 35, column: 18, scope: !7)
!74 = !DILocation(line: 36, column: 19, scope: !7)
!75 = !DILocation(line: 39, column: 19, scope: !7)
!76 = !DILocation(line: 40, column: 80, scope: !7)
!77 = !DILocation(line: 40, column: 72, scope: !7)
!78 = !DILocation(line: 46, column: 80, scope: !7)
!79 = !DILocation(line: 46, column: 72, scope: !7)
!80 = !DILocation(line: 52, column: 19, scope: !7)
!81 = !DILocation(line: 53, column: 80, scope: !7)
!82 = !DILocation(line: 53, column: 72, scope: !7)
!83 = !DILocation(line: 60, column: 79, scope: !7)
!84 = !DILocation(line: 60, column: 71, scope: !7)
!85 = !DILocation(line: 63, column: 63, scope: !7)
!86 = !DILocation(line: 66, column: 68, scope: !7)
!87 = !DILocation(line: 72, column: 20, scope: !7)
!88 = !DILocation(line: 73, column: 77, scope: !7)
!89 = !DILocation(line: 73, column: 69, scope: !7)
!90 = !DILocation(line: 76, column: 69, scope: !7)
!91 = !DILocation(line: 79, column: 69, scope: !7)
!92 = !DILocation(line: 118, column: 15, scope: !93, inlinedAt: !95)
!93 = distinct !DILexicalBlockFile(scope: !7, file: !94, discriminator: 0)
!94 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!95 = !DILocation(line: 47, column: 42, scope: !7)
!96 = !DILocation(line: 120, column: 21, scope: !93, inlinedAt: !95)
!97 = !DILocation(line: 120, column: 16, scope: !93, inlinedAt: !95)
!98 = !DILocation(line: 121, column: 29, scope: !93, inlinedAt: !95)
!99 = !DILocation(line: 118, column: 15, scope: !93, inlinedAt: !100)
!100 = !DILocation(line: 54, column: 42, scope: !7)
!101 = !DILocation(line: 120, column: 21, scope: !93, inlinedAt: !100)
!102 = !DILocation(line: 120, column: 16, scope: !93, inlinedAt: !100)
!103 = !DILocation(line: 121, column: 29, scope: !93, inlinedAt: !100)
!104 = !DILocation(line: 118, column: 15, scope: !93, inlinedAt: !105)
!105 = !DILocation(line: 61, column: 42, scope: !7)
!106 = !DILocation(line: 120, column: 21, scope: !93, inlinedAt: !105)
!107 = !DILocation(line: 120, column: 16, scope: !93, inlinedAt: !105)
!108 = !DILocation(line: 121, column: 29, scope: !93, inlinedAt: !105)
!109 = !DILocation(line: 118, column: 15, scope: !93, inlinedAt: !110)
!110 = !DILocation(line: 64, column: 42, scope: !7)
!111 = !DILocation(line: 120, column: 21, scope: !93, inlinedAt: !110)
!112 = !DILocation(line: 120, column: 16, scope: !93, inlinedAt: !110)
!113 = !DILocation(line: 121, column: 29, scope: !93, inlinedAt: !110)
!114 = !DILocation(line: 118, column: 15, scope: !93, inlinedAt: !115)
!115 = !DILocation(line: 67, column: 42, scope: !7)
!116 = !DILocation(line: 120, column: 21, scope: !93, inlinedAt: !115)
!117 = !DILocation(line: 120, column: 16, scope: !93, inlinedAt: !115)
!118 = !DILocation(line: 121, column: 29, scope: !93, inlinedAt: !115)
!119 = !DILocation(line: 118, column: 15, scope: !93, inlinedAt: !120)
!120 = !DILocation(line: 74, column: 42, scope: !7)
!121 = !DILocation(line: 120, column: 21, scope: !93, inlinedAt: !120)
!122 = !DILocation(line: 120, column: 16, scope: !93, inlinedAt: !120)
!123 = !DILocation(line: 121, column: 29, scope: !93, inlinedAt: !120)
!124 = !DILocation(line: 118, column: 15, scope: !93, inlinedAt: !125)
!125 = !DILocation(line: 77, column: 42, scope: !7)
!126 = !DILocation(line: 120, column: 21, scope: !93, inlinedAt: !125)
!127 = !DILocation(line: 120, column: 16, scope: !93, inlinedAt: !125)
!128 = !DILocation(line: 121, column: 29, scope: !93, inlinedAt: !125)
!129 = !DILocation(line: 118, column: 15, scope: !93, inlinedAt: !130)
!130 = !DILocation(line: 80, column: 42, scope: !7)
!131 = !DILocation(line: 120, column: 21, scope: !93, inlinedAt: !130)
!132 = !DILocation(line: 120, column: 16, scope: !93, inlinedAt: !130)
!133 = !DILocation(line: 84, column: 35, scope: !7)
!134 = !DILocation(line: 87, column: 35, scope: !7)
!135 = !DILocation(line: 90, column: 35, scope: !7)
!136 = !DILocation(line: 93, column: 35, scope: !7)
!137 = !DILocation(line: 96, column: 35, scope: !7)
!138 = !DILocation(line: 99, column: 35, scope: !7)
!139 = !DILocation(line: 102, column: 35, scope: !7)
!140 = !DILocation(line: 105, column: 35, scope: !7)
!141 = !DILocation(line: 106, column: 72, scope: !7)
!142 = !DILocation(line: 107, column: 72, scope: !7)
!143 = !DILocation(line: 108, column: 20, scope: !7)
!144 = !DILocation(line: 109, column: 72, scope: !7)
!145 = !DILocation(line: 110, column: 20, scope: !7)
!146 = !DILocation(line: 111, column: 71, scope: !7)
!147 = !DILocation(line: 112, column: 20, scope: !7)
!148 = !DILocation(line: 113, column: 63, scope: !7)
!149 = !DILocation(line: 114, column: 20, scope: !7)
!150 = !DILocation(line: 115, column: 68, scope: !7)
!151 = !DILocation(line: 116, column: 20, scope: !7)
!152 = !DILocation(line: 117, column: 69, scope: !7)
!153 = !DILocation(line: 118, column: 20, scope: !7)
!154 = !DILocation(line: 119, column: 69, scope: !7)
!155 = !DILocation(line: 120, column: 20, scope: !7)
!156 = !DILocation(line: 121, column: 69, scope: !7)
!157 = !DILocation(line: 122, column: 20, scope: !7)
!158 = !DILocation(line: 123, column: 61, scope: !7)
!159 = !DILocation(line: 123, column: 243, scope: !7)
!160 = !DILocation(line: 123, column: 239, scope: !7)
!161 = !DILocation(line: 123, column: 230, scope: !7)
!162 = !DILocation(line: 123, column: 280, scope: !7)
!163 = !DILocation(line: 123, column: 266, scope: !7)
!164 = !DILocation(line: 123, column: 252, scope: !7)
!165 = !DILocation(line: 123, column: 222, scope: !7)
!166 = !DILocation(line: 123, column: 434, scope: !7)
!167 = !DILocation(line: 123, column: 156, scope: !7)
!168 = !DILocation(line: 124, column: 20, scope: !7)
!169 = !DILocation(line: 125, column: 25, scope: !7)
!170 = !DILocation(line: 125, column: 37, scope: !7)
!171 = !DILocation(line: 121, column: 29, scope: !93, inlinedAt: !130)
!172 = !DILocation(line: 126, column: 25, scope: !7)
!173 = !DILocation(line: 126, column: 37, scope: !7)
!174 = !DILocation(line: 127, column: 25, scope: !7)
!175 = !DILocation(line: 127, column: 37, scope: !7)
!176 = !DILocation(line: 127, column: 4, scope: !7)
