; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_hardtanh_mul_sigmoid_65(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 9, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 2, !dbg !12
  %8 = and i32 %7, 508, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = icmp slt i32 %9, 40704, !dbg !14
  %11 = srem i32 %9, 636, !dbg !15
  %12 = sdiv i32 %9, 10176, !dbg !16
  %13 = sext i32 %9 to i64, !dbg !17
  %14 = getelementptr float, ptr addrspace(1) %0, i64 %13, !dbg !17
  %15 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %14, i1 %10) #1, !dbg !18
  %16 = extractvalue { i32, i32, i32, i32 } %15, 0, !dbg !18
  %17 = extractvalue { i32, i32, i32, i32 } %15, 1, !dbg !18
  %18 = extractvalue { i32, i32, i32, i32 } %15, 2, !dbg !18
  %19 = extractvalue { i32, i32, i32, i32 } %15, 3, !dbg !18
  %20 = mul nsw i32 %12, 636, !dbg !19
  %21 = add nsw i32 %20, %11, !dbg !20
  %22 = sext i32 %21 to i64, !dbg !21
  %23 = getelementptr float, ptr addrspace(1) %1, i64 %22, !dbg !21
  %24 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %23, i1 %10) #1, !dbg !22
  %25 = extractvalue { i32, i32, i32, i32 } %24, 0, !dbg !22
  %26 = extractvalue { i32, i32, i32, i32 } %24, 1, !dbg !22
  %27 = extractvalue { i32, i32, i32, i32 } %24, 2, !dbg !22
  %28 = extractvalue { i32, i32, i32, i32 } %24, 3, !dbg !22
  %29 = bitcast i32 %25 to float, !dbg !22
  %30 = bitcast i32 %26 to float, !dbg !22
  %31 = bitcast i32 %27 to float, !dbg !22
  %32 = bitcast i32 %28 to float, !dbg !22
  %33 = fsub float 0.000000e+00, %29, !dbg !23
  %34 = fsub float 0.000000e+00, %30, !dbg !23
  %35 = fsub float 0.000000e+00, %31, !dbg !23
  %36 = fsub float 0.000000e+00, %32, !dbg !23
  %37 = fmul float %33, 0x3FF7154760000000, !dbg !27
  %38 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %37) #1, !dbg !27
  %39 = fmul float %34, 0x3FF7154760000000, !dbg !27
  %40 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %39) #1, !dbg !27
  %41 = fmul float %35, 0x3FF7154760000000, !dbg !27
  %42 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %41) #1, !dbg !27
  %43 = fmul float %36, 0x3FF7154760000000, !dbg !27
  %44 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %43) #1, !dbg !27
  %45 = fadd float %38, 1.000000e+00, !dbg !28
  %46 = fadd float %40, 1.000000e+00, !dbg !28
  %47 = fadd float %42, 1.000000e+00, !dbg !28
  %48 = fadd float %44, 1.000000e+00, !dbg !28
  %49 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %45) #1, !dbg !29
  %50 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %46) #1, !dbg !29
  %51 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %47) #1, !dbg !29
  %52 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %48) #1, !dbg !29
  %53 = insertelement <4 x i32> poison, i32 %19, i64 0, !dbg !18
  %54 = insertelement <4 x i32> %53, i32 %18, i64 1, !dbg !18
  %55 = insertelement <4 x i32> %54, i32 %17, i64 2, !dbg !18
  %56 = insertelement <4 x i32> %55, i32 %16, i64 3, !dbg !18
  %57 = bitcast <4 x i32> %56 to <4 x float>, !dbg !18
  %58 = insertelement <4 x float> poison, float %52, i64 0, !dbg !30
  %59 = insertelement <4 x float> %58, float %51, i64 1, !dbg !30
  %60 = insertelement <4 x float> %59, float %50, i64 2, !dbg !30
  %61 = insertelement <4 x float> %60, float %49, i64 3, !dbg !30
  %62 = fmul <4 x float> %61, %57, !dbg !30
  %63 = fcmp ole <4 x float> %62, zeroinitializer, !dbg !31
  %64 = select <4 x i1> %63, <4 x float> zeroinitializer, <4 x float> %62, !dbg !31
  %65 = fcmp olt <4 x float> %64, splat (float 6.000000e+00), !dbg !35
  %66 = extractelement <4 x float> %64, i64 3, !dbg !37
  %67 = fcmp uno float %66, 0.000000e+00, !dbg !38
  %68 = extractelement <4 x float> %64, i64 2, !dbg !37
  %69 = fcmp uno float %68, 0.000000e+00, !dbg !38
  %70 = extractelement <4 x float> %64, i64 1, !dbg !37
  %71 = fcmp uno float %70, 0.000000e+00, !dbg !38
  %72 = extractelement <4 x float> %64, i64 0, !dbg !37
  %73 = fcmp uno float %72, 0.000000e+00, !dbg !38
  %74 = extractelement <4 x i1> %65, i64 3, !dbg !39
  %75 = or i1 %74, %67, !dbg !39
  %76 = extractelement <4 x i1> %65, i64 2, !dbg !39
  %77 = or i1 %76, %69, !dbg !39
  %78 = extractelement <4 x i1> %65, i64 1, !dbg !39
  %79 = or i1 %78, %71, !dbg !39
  %80 = extractelement <4 x i1> %65, i64 0, !dbg !39
  %81 = or i1 %80, %73, !dbg !39
  %82 = bitcast float %66 to i32, !dbg !37
  %83 = select i1 %75, i32 %82, i32 1086324736, !dbg !40
  %84 = bitcast float %68 to i32, !dbg !37
  %85 = select i1 %77, i32 %84, i32 1086324736, !dbg !40
  %86 = bitcast float %70 to i32, !dbg !37
  %87 = select i1 %79, i32 %86, i32 1086324736, !dbg !40
  %88 = bitcast float %72 to i32, !dbg !37
  %89 = select i1 %81, i32 %88, i32 1086324736, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %83, i32 %85, i32 %87, i32 %89, ptr addrspace(1) %14, i1 %10) #1, !dbg !37
  ret void, !dbg !41
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "crirl4lpohygqv45phj44fqcjfijt6xe5al4fcrin3hbs75hmt5a.py", directory: "inductor_cache/ri")
!4 = !{ptr @triton_poi_fused_hardtanh_mul_sigmoid_65, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_hardtanh_mul_sigmoid_65, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_hardtanh_mul_sigmoid_65", linkageName: "triton_poi_fused_hardtanh_mul_sigmoid_65", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 27, column: 34, scope: !7)
!18 = !DILocation(line: 27, column: 39, scope: !7)
!19 = !DILocation(line: 28, column: 39, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 28, column: 30, scope: !7)
!22 = !DILocation(line: 28, column: 44, scope: !7)
!23 = !DILocation(line: 47, column: 30, scope: !24, inlinedAt: !26)
!24 = distinct !DILexicalBlockFile(scope: !7, file: !25, discriminator: 0)
!25 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!26 = !DILocation(line: 29, column: 22, scope: !7)
!27 = !DILocation(line: 47, column: 29, scope: !24, inlinedAt: !26)
!28 = !DILocation(line: 47, column: 20, scope: !24, inlinedAt: !26)
!29 = !DILocation(line: 47, column: 16, scope: !24, inlinedAt: !26)
!30 = !DILocation(line: 30, column: 18, scope: !7)
!31 = !DILocation(line: 121, column: 29, scope: !32, inlinedAt: !34)
!32 = distinct !DILexicalBlockFile(scope: !7, file: !33, discriminator: 0)
!33 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!34 = !DILocation(line: 32, column: 40, scope: !7)
!35 = !DILocation(line: 110, column: 15, scope: !32, inlinedAt: !36)
!36 = !DILocation(line: 34, column: 40, scope: !7)
!37 = !DILocation(line: 35, column: 39, scope: !7)
!38 = !DILocation(line: 112, column: 21, scope: !32, inlinedAt: !36)
!39 = !DILocation(line: 112, column: 16, scope: !32, inlinedAt: !36)
!40 = !DILocation(line: 113, column: 29, scope: !32, inlinedAt: !36)
!41 = !DILocation(line: 35, column: 4, scope: !7)
