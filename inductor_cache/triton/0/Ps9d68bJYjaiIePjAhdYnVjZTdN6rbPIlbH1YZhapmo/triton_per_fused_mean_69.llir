; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_mean_69(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %6 = shl i32 %5, 5, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = and i32 %7, 16, !dbg !12
  %9 = shl i32 %7, 1, !dbg !12
  %10 = and i32 %9, 30, !dbg !12
  %11 = and i32 %7, 31, !dbg !12
  %12 = or disjoint i32 %6, %10, !dbg !13
  %13 = or disjoint i32 %6, %11, !dbg !13
  %14 = icmp slt i32 %12, 2808, !dbg !14
  %15 = icmp slt i32 %13, 2808, !dbg !14
  %16 = lshr i32 %7, 5, !dbg !15
  %17 = lshr i32 %7, 4, !dbg !15
  %18 = and i32 %17, 7, !dbg !15
  %.frozen = freeze i32 %12, !dbg !16
  %19 = sdiv i32 %.frozen, 702, !dbg !16
  %20 = mul i32 %19, 702, !dbg !17
  %.decomposed = sub i32 %.frozen, %20, !dbg !17
  %21 = mul nuw nsw i32 %18, 702, !dbg !18
  %22 = add nsw i32 %.decomposed, %21, !dbg !19
  %23 = mul i32 %19, 11232, !dbg !20
  %24 = add i32 %22, %23, !dbg !21
  %25 = add nsw i32 %22, 5616, !dbg !19
  %26 = add i32 %25, %23, !dbg !21
  %27 = sext i32 %24 to i64, !dbg !22
  %28 = getelementptr float, ptr addrspace(1) %1, i64 %27, !dbg !22
  %29 = sext i32 %26 to i64, !dbg !22
  %30 = getelementptr float, ptr addrspace(1) %1, i64 %29, !dbg !22
  %31 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %28, i1 %14, i32 0, i1 %14, i32 0, i1 %14) #3, !dbg !23
  %32 = extractvalue { i32, i32 } %31, 0, !dbg !23
  %33 = extractvalue { i32, i32 } %31, 1, !dbg !23
  %34 = bitcast i32 %32 to float, !dbg !23
  %35 = bitcast i32 %33 to float, !dbg !23
  %36 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %30, i1 %14, i32 0, i1 %14, i32 0, i1 %14) #3, !dbg !23
  %37 = extractvalue { i32, i32 } %36, 0, !dbg !23
  %38 = extractvalue { i32, i32 } %36, 1, !dbg !23
  %39 = bitcast i32 %37 to float, !dbg !23
  %40 = bitcast i32 %38 to float, !dbg !23
  %41 = fadd float %34, %39, !dbg !24
  %42 = select i1 %14, float %41, float 0.000000e+00, !dbg !24
  %43 = fadd float %35, %40, !dbg !24
  %44 = select i1 %14, float %43, float 0.000000e+00, !dbg !24
  %45 = bitcast float %42 to i32, !dbg !29
  %46 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %45, i32 16, i32 31), !dbg !29
  %47 = bitcast i32 %46 to float, !dbg !29
  %48 = fadd float %42, %47, !dbg !24
  %49 = bitcast float %44 to i32, !dbg !29
  %50 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %49, i32 16, i32 31), !dbg !29
  %51 = bitcast i32 %50 to float, !dbg !29
  %52 = fadd float %44, %51, !dbg !24
  %53 = icmp eq i32 %8, 0, !dbg !29
  %54 = and i32 %16, 3, !dbg !29
  %55 = shl nuw nsw i32 %10, 2, !dbg !29
  %56 = or disjoint i32 %55, %54, !dbg !29
  %57 = getelementptr float, ptr addrspace(3) @global_smem, i32 %56, !dbg !29
  %58 = bitcast float %48 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %57, <1 x i32> %58, i1 %53) #3, !dbg !29
  %59 = or disjoint i32 %55, 4, !dbg !29
  %60 = or disjoint i32 %59, %54, !dbg !29
  %61 = getelementptr float, ptr addrspace(3) @global_smem, i32 %60, !dbg !29
  %62 = bitcast float %52 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %61, <1 x i32> %62, i1 %53) #3, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %63 = icmp slt i32 %7, 128, !dbg !29
  %64 = getelementptr float, ptr addrspace(3) @global_smem, i32 %7, !dbg !29
  %65 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %64, i1 %63) #3, !dbg !29
  %66 = bitcast i32 %65 to float, !dbg !29
  %67 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %65, i32 2, i32 31), !dbg !29
  %68 = bitcast i32 %67 to float, !dbg !29
  %69 = fadd float %66, %68, !dbg !24
  %70 = bitcast float %69 to i32, !dbg !29
  %71 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %70, i32 1, i32 31), !dbg !29
  %72 = bitcast i32 %71 to float, !dbg !29
  %73 = fadd float %69, %72, !dbg !24
  %74 = and i32 %7, 3, !dbg !29
  %75 = icmp eq i32 %74, 0, !dbg !29
  %76 = and i1 %63, %75, !dbg !29
  %77 = bitcast float %73 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %64, <1 x i32> %77, i1 %76) #3, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %78 = getelementptr float, ptr addrspace(3) @global_smem, i32 %55, !dbg !29
  %79 = load i32, ptr addrspace(3) %78, align 16, !dbg !29
  %80 = getelementptr float, ptr addrspace(3) @global_smem, i32 %59, !dbg !29
  %81 = load i32, ptr addrspace(3) %80, align 16, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %82 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %10, !dbg !30
  tail call void asm sideeffect "@$3 st.shared.v2.b32 [ $0 + 0 ], { $1, $2 };", "r,r,r,b"(ptr addrspace(3) %82, i32 %79, i32 %81, i1 true) #3, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %83 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !30
  %84 = load float, ptr addrspace(3) %83, align 4, !dbg !30
  %85 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %84, float 1.600000e+01) #3, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %86 = sext i32 %13 to i64, !dbg !32
  %87 = getelementptr float, ptr addrspace(1) %0, i64 %86, !dbg !32
  %88 = icmp eq i32 %54, 0, !dbg !33
  %89 = bitcast float %85 to i32, !dbg !33
  %90 = and i1 %88, %15, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %89, ptr addrspace(1) %87, i1 %90) #3, !dbg !33
  ret void, !dbg !34
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cqwqfuug4hmw6fy6jda47rrklnew6s7s6tbof6q7ln4qn54pucst.py", directory: "inductor_cache/qw")
!4 = !{ptr @triton_per_fused_mean_69, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_mean_69, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_mean_69", linkageName: "triton_per_fused_mean_69", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 19, scope: !7)
!17 = !DILocation(line: 30, column: 19, scope: !7)
!18 = !DILocation(line: 33, column: 39, scope: !7)
!19 = !DILocation(line: 33, column: 35, scope: !7)
!20 = !DILocation(line: 33, column: 50, scope: !7)
!21 = !DILocation(line: 33, column: 44, scope: !7)
!22 = !DILocation(line: 33, column: 30, scope: !7)
!23 = !DILocation(line: 33, column: 55, scope: !7)
!24 = !DILocation(line: 256, column: 15, scope: !25, inlinedAt: !28)
!25 = distinct !DILexicalBlockFile(scope: !27, file: !26, discriminator: 0)
!26 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!27 = distinct !DILexicalBlockFile(scope: !7, file: !26, discriminator: 0)
!28 = !DILocation(line: 36, column: 24, scope: !7)
!29 = !DILocation(line: 267, column: 36, scope: !27, inlinedAt: !28)
!30 = !DILocation(line: 38, column: 18, scope: !7)
!31 = !DILocation(line: 39, column: 4, scope: !7)
!32 = !DILocation(line: 40, column: 28, scope: !7)
!33 = !DILocation(line: 40, column: 39, scope: !7)
!34 = !DILocation(line: 40, column: 4, scope: !7)
