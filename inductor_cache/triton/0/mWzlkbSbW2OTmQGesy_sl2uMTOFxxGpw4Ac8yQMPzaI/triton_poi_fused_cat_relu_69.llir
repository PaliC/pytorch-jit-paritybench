; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_cat_relu_69(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, i32 %12, i32 %13) local_unnamed_addr !dbg !7 {
  %15 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #3, !dbg !10
  %16 = shl i32 %15, 6, !dbg !11
  %17 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %18 = shl i32 %17, 1, !dbg !12
  %19 = and i32 %18, 62, !dbg !12
  %20 = or disjoint i32 %16, %19, !dbg !13
  %21 = icmp slt i32 %20, 4224, !dbg !14
  %22 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !15
  %23 = shl i32 %22, 2, !dbg !16
  %24 = lshr i32 %17, 5, !dbg !17
  %25 = and i32 %24, 3, !dbg !17
  %26 = or disjoint i32 %23, %25, !dbg !18
  %27 = icmp slt i32 %26, 4, !dbg !19
  %.frozen = freeze i32 %20, !dbg !20
  %28 = sdiv i32 %.frozen, 1056, !dbg !20
  %29 = mul i32 %28, 1056, !dbg !21
  %.decomposed = sub i32 %.frozen, %29, !dbg !21
  %30 = icmp slt i32 %.decomposed, 176, !dbg !22
  %31 = mul i32 %26, 176, !dbg !23
  %32 = mul nsw i32 %28, 704, !dbg !24
  %33 = add i32 %31, %32, !dbg !25
  %34 = add i32 %33, %.decomposed, !dbg !26
  %35 = sext i32 %34 to i64, !dbg !27
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !27
  %37 = and i1 %30, %27, !dbg !28
  %38 = and i1 %21, %37, !dbg !29
  %39 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %36, i1 %38, i32 0, i1 %38, i32 0, i1 %38) #3, !dbg !30
  %40 = add nsw i32 %.decomposed, -176, !dbg !31
  %41 = icmp ult i32 %40, 176, !dbg !31
  %42 = add i32 %33, %40, !dbg !32
  %43 = sext i32 %42 to i64, !dbg !33
  %44 = getelementptr float, ptr addrspace(1) %1, i64 %43, !dbg !33
  %45 = and i1 %27, %41, !dbg !34
  %46 = and i1 %21, %45, !dbg !35
  %47 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %44, i1 %46, i32 0, i1 %46, i32 0, i1 %46) #3, !dbg !36
  %48 = add nsw i32 %.decomposed, -352, !dbg !37
  %49 = icmp ult i32 %48, 176, !dbg !37
  %50 = add i32 %33, %48, !dbg !38
  %51 = sext i32 %50 to i64, !dbg !39
  %52 = getelementptr float, ptr addrspace(1) %2, i64 %51, !dbg !39
  %53 = and i1 %27, %49, !dbg !40
  %54 = and i1 %21, %53, !dbg !41
  %55 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %52, i1 %54, i32 0, i1 %54, i32 0, i1 %54) #3, !dbg !42
  %56 = add nsw i32 %.decomposed, -528, !dbg !43
  %57 = icmp ult i32 %56, 176, !dbg !43
  %58 = add i32 %33, %56, !dbg !44
  %59 = sext i32 %58 to i64, !dbg !45
  %60 = getelementptr float, ptr addrspace(1) %3, i64 %59, !dbg !45
  %61 = and i1 %27, %57, !dbg !46
  %62 = and i1 %21, %61, !dbg !47
  %63 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %60, i1 %62, i32 0, i1 %62, i32 0, i1 %62) #3, !dbg !48
  %64 = getelementptr float, ptr addrspace(1) %0, i64 %59, !dbg !49
  %65 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %64, i1 %62, i32 0, i1 %62, i32 0, i1 %62) #3, !dbg !50
  %66 = add nsw i32 %.decomposed, -704, !dbg !51
  %67 = icmp ult i32 %66, 176, !dbg !51
  %68 = add i32 %33, %66, !dbg !52
  %69 = sext i32 %68 to i64, !dbg !53
  %70 = getelementptr float, ptr addrspace(1) %4, i64 %69, !dbg !53
  %71 = and i1 %27, %67, !dbg !54
  %72 = and i1 %21, %71, !dbg !55
  %73 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %70, i1 %72, i32 0, i1 %72, i32 0, i1 %72) #3, !dbg !56
  %74 = icmp sgt i32 %.decomposed, 879, !dbg !57
  %75 = add nsw i32 %.decomposed, -880, !dbg !58
  %76 = add i32 %33, %75, !dbg !59
  %77 = sext i32 %76 to i64, !dbg !60
  %78 = getelementptr float, ptr addrspace(1) %5, i64 %77, !dbg !60
  %79 = and i1 %74, %27, !dbg !61
  %80 = and i1 %21, %79, !dbg !62
  %81 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %78, i1 %80, i32 0, i1 %80, i32 0, i1 %80) #3, !dbg !63
  %82 = sext i32 %75 to i64, !dbg !64
  %83 = getelementptr float, ptr addrspace(1) %6, i64 %82, !dbg !64
  %84 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %83, i1 %80, i32 0, i1 %80, i32 0, i1 %80) #3, !dbg !65
  %85 = getelementptr float, ptr addrspace(1) %7, i64 %82, !dbg !66
  %86 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %85, i1 %80, i32 0, i1 %80, i32 0, i1 %80) #3, !dbg !67
  %87 = extractvalue { i32, i32 } %86, 0, !dbg !67
  %88 = extractvalue { i32, i32 } %86, 1, !dbg !67
  %89 = bitcast i32 %87 to float, !dbg !67
  %90 = bitcast i32 %88 to float, !dbg !67
  %91 = fadd float %89, 0x3F50624DE0000000, !dbg !68
  %92 = fadd float %90, 0x3F50624DE0000000, !dbg !68
  %93 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !69
  %.not.i = icmp eq i32 %93, 0, !dbg !69
  %94 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !69
  %.not1.i = icmp eq i32 %94, 0, !dbg !69
  br i1 %.not.i, label %100, label %95, !dbg !69

95:                                               ; preds = %14
  br i1 %.not1.i, label %98, label %96, !dbg !69

96:                                               ; preds = %95
  %97 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %91) #3, !dbg !69
  br label %__nv_sqrtf.exit, !dbg !69

98:                                               ; preds = %95
  %99 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %91) #3, !dbg !69
  br label %__nv_sqrtf.exit, !dbg !69

100:                                              ; preds = %14
  br i1 %.not1.i, label %103, label %101, !dbg !69

101:                                              ; preds = %100
  %102 = tail call float @llvm.nvvm.sqrt.rn.f(float %91) #3, !dbg !69
  br label %__nv_sqrtf.exit, !dbg !69

103:                                              ; preds = %100
  %104 = tail call float @llvm.nvvm.sqrt.approx.f(float %91) #3, !dbg !69
  br label %__nv_sqrtf.exit, !dbg !69

__nv_sqrtf.exit:                                  ; preds = %96, %98, %101, %103
  %.0.i = phi float [ %97, %96 ], [ %99, %98 ], [ %102, %101 ], [ %104, %103 ], !dbg !69
  %105 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !69
  %.not.i1 = icmp eq i32 %105, 0, !dbg !69
  %106 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !69
  %.not1.i4 = icmp eq i32 %106, 0, !dbg !69
  br i1 %.not.i1, label %112, label %107, !dbg !69

107:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %110, label %108, !dbg !69

108:                                              ; preds = %107
  %109 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %92) #3, !dbg !69
  br label %__nv_sqrtf.exit5, !dbg !69

110:                                              ; preds = %107
  %111 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %92) #3, !dbg !69
  br label %__nv_sqrtf.exit5, !dbg !69

112:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %115, label %113, !dbg !69

113:                                              ; preds = %112
  %114 = tail call float @llvm.nvvm.sqrt.rn.f(float %92) #3, !dbg !69
  br label %__nv_sqrtf.exit5, !dbg !69

115:                                              ; preds = %112
  %116 = tail call float @llvm.nvvm.sqrt.approx.f(float %92) #3, !dbg !69
  br label %__nv_sqrtf.exit5, !dbg !69

__nv_sqrtf.exit5:                                 ; preds = %108, %110, %113, %115
  %.0.i3 = phi float [ %109, %108 ], [ %111, %110 ], [ %114, %113 ], [ %116, %115 ], !dbg !69
  %117 = extractvalue { i32, i32 } %81, 1, !dbg !63
  %118 = bitcast i32 %117 to float, !dbg !63
  %119 = extractvalue { i32, i32 } %84, 1, !dbg !65
  %120 = bitcast i32 %119 to float, !dbg !65
  %121 = fsub float %118, %120, !dbg !70
  %122 = extractvalue { i32, i32 } %81, 0, !dbg !63
  %123 = bitcast i32 %122 to float, !dbg !63
  %124 = extractvalue { i32, i32 } %84, 0, !dbg !65
  %125 = bitcast i32 %124 to float, !dbg !65
  %126 = fsub float %123, %125, !dbg !70
  %127 = extractvalue { i32, i32 } %73, 1, !dbg !56
  %128 = bitcast i32 %127 to float, !dbg !56
  %129 = fadd float %128, %128, !dbg !71
  %130 = extractvalue { i32, i32 } %73, 0, !dbg !56
  %131 = bitcast i32 %130 to float, !dbg !56
  %132 = fadd float %131, %131, !dbg !71
  %133 = extractvalue { i32, i32 } %63, 1, !dbg !48
  %134 = bitcast i32 %133 to float, !dbg !48
  %135 = extractvalue { i32, i32 } %65, 1, !dbg !50
  %136 = bitcast i32 %135 to float, !dbg !50
  %137 = fadd float %134, %136, !dbg !72
  %138 = extractvalue { i32, i32 } %63, 0, !dbg !48
  %139 = bitcast i32 %138 to float, !dbg !48
  %140 = extractvalue { i32, i32 } %65, 0, !dbg !50
  %141 = bitcast i32 %140 to float, !dbg !50
  %142 = fadd float %139, %141, !dbg !72
  %143 = extractvalue { i32, i32 } %55, 1, !dbg !42
  %144 = bitcast i32 %143 to float, !dbg !42
  %145 = extractvalue { i32, i32 } %55, 0, !dbg !42
  %146 = bitcast i32 %145 to float, !dbg !42
  %147 = extractvalue { i32, i32 } %47, 1, !dbg !36
  %148 = bitcast i32 %147 to float, !dbg !36
  %149 = extractvalue { i32, i32 } %47, 0, !dbg !36
  %150 = bitcast i32 %149 to float, !dbg !36
  %151 = extractvalue { i32, i32 } %39, 1, !dbg !30
  %152 = bitcast i32 %151 to float, !dbg !30
  %153 = extractvalue { i32, i32 } %39, 0, !dbg !30
  %154 = bitcast i32 %153 to float, !dbg !30
  %155 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !73
  %156 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !73
  %157 = fmul float %126, %155, !dbg !74
  %158 = fmul float %121, %156, !dbg !74
  %159 = getelementptr float, ptr addrspace(1) %8, i64 %82, !dbg !75
  %160 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %159, i1 %80, i32 0, i1 %80, i32 0, i1 %80) #3, !dbg !76
  %161 = extractvalue { i32, i32 } %160, 0, !dbg !76
  %162 = extractvalue { i32, i32 } %160, 1, !dbg !76
  %163 = bitcast i32 %161 to float, !dbg !76
  %164 = bitcast i32 %162 to float, !dbg !76
  %165 = fmul float %157, %163, !dbg !77
  %166 = fmul float %158, %164, !dbg !77
  %167 = getelementptr float, ptr addrspace(1) %9, i64 %82, !dbg !78
  %168 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %167, i1 %80, i32 0, i1 %80, i32 0, i1 %80) #3, !dbg !79
  %169 = extractvalue { i32, i32 } %168, 0, !dbg !79
  %170 = extractvalue { i32, i32 } %168, 1, !dbg !79
  %171 = bitcast i32 %169 to float, !dbg !79
  %172 = bitcast i32 %170 to float, !dbg !79
  %173 = fadd float %165, %171, !dbg !80
  %174 = fadd float %166, %172, !dbg !80
  %175 = getelementptr float, ptr addrspace(1) %10, i64 %77, !dbg !81
  %176 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %175, i1 %80, i32 0, i1 %80, i32 0, i1 %80) #3, !dbg !82
  %177 = extractvalue { i32, i32 } %176, 0, !dbg !82
  %178 = extractvalue { i32, i32 } %176, 1, !dbg !82
  %179 = bitcast i32 %177 to float, !dbg !82
  %180 = bitcast i32 %178 to float, !dbg !82
  %181 = fadd float %173, %179, !dbg !83
  %182 = fadd float %174, %180, !dbg !83
  %183 = select i1 %74, float %181, float 0.000000e+00, !dbg !84
  %184 = select i1 %74, float %182, float 0.000000e+00, !dbg !84
  %185 = select i1 %67, float %132, float %183, !dbg !85
  %186 = select i1 %67, float %129, float %184, !dbg !85
  %187 = select i1 %57, float %142, float %185, !dbg !85
  %188 = select i1 %57, float %137, float %186, !dbg !85
  %189 = select i1 %49, float %146, float %187, !dbg !86
  %190 = select i1 %49, float %144, float %188, !dbg !86
  %191 = select i1 %41, float %150, float %189, !dbg !87
  %192 = select i1 %41, float %148, float %190, !dbg !87
  %193 = select i1 %30, float %154, float %191, !dbg !88
  %194 = select i1 %30, float %152, float %192, !dbg !88
  %195 = fcmp olt float %193, 0.000000e+00, !dbg !89
  %196 = fcmp olt float %194, 0.000000e+00, !dbg !89
  %197 = select i1 %195, float 0.000000e+00, float %193, !dbg !93
  %198 = select i1 %196, float 0.000000e+00, float %194, !dbg !93
  %199 = mul i32 %26, 1056, !dbg !94
  %200 = add i32 %199, %.decomposed, !dbg !95
  %201 = mul i32 %28, 4224, !dbg !96
  %202 = add i32 %200, %201, !dbg !97
  %203 = sext i32 %202 to i64, !dbg !98
  %204 = getelementptr float, ptr addrspace(1) %11, i64 %203, !dbg !98
  %205 = and i1 %21, %27, !dbg !99
  %206 = bitcast float %197 to i32, !dbg !100
  %207 = bitcast float %198 to i32, !dbg !100
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %206, i32 %207, ptr addrspace(1) %204, i1 %205) #3, !dbg !100
  ret void, !dbg !101
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cgizacpeirqiao7npwqaacsndnktyubhe7wmkisi5bzquxqg43hk.py", directory: "inductor_cache/gi")
!4 = !{ptr @triton_poi_fused_cat_relu_69, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_relu_69, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_relu_69", linkageName: "triton_poi_fused_cat_relu_69", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 28, column: 19, scope: !7)
!22 = !DILocation(line: 36, column: 18, scope: !7)
!23 = !DILocation(line: 37, column: 34, scope: !7)
!24 = !DILocation(line: 37, column: 43, scope: !7)
!25 = !DILocation(line: 37, column: 39, scope: !7)
!26 = !DILocation(line: 37, column: 49, scope: !7)
!27 = !DILocation(line: 37, column: 30, scope: !7)
!28 = !DILocation(line: 37, column: 62, scope: !7)
!29 = !DILocation(line: 37, column: 70, scope: !7)
!30 = !DILocation(line: 37, column: 55, scope: !7)
!31 = !DILocation(line: 41, column: 18, scope: !7)
!32 = !DILocation(line: 42, column: 50, scope: !7)
!33 = !DILocation(line: 42, column: 31, scope: !7)
!34 = !DILocation(line: 42, column: 72, scope: !7)
!35 = !DILocation(line: 42, column: 80, scope: !7)
!36 = !DILocation(line: 42, column: 65, scope: !7)
!37 = !DILocation(line: 46, column: 20, scope: !7)
!38 = !DILocation(line: 47, column: 50, scope: !7)
!39 = !DILocation(line: 47, column: 31, scope: !7)
!40 = !DILocation(line: 47, column: 73, scope: !7)
!41 = !DILocation(line: 47, column: 81, scope: !7)
!42 = !DILocation(line: 47, column: 65, scope: !7)
!43 = !DILocation(line: 51, column: 20, scope: !7)
!44 = !DILocation(line: 52, column: 50, scope: !7)
!45 = !DILocation(line: 52, column: 31, scope: !7)
!46 = !DILocation(line: 52, column: 73, scope: !7)
!47 = !DILocation(line: 52, column: 81, scope: !7)
!48 = !DILocation(line: 52, column: 65, scope: !7)
!49 = !DILocation(line: 53, column: 31, scope: !7)
!50 = !DILocation(line: 53, column: 65, scope: !7)
!51 = !DILocation(line: 60, column: 20, scope: !7)
!52 = !DILocation(line: 61, column: 50, scope: !7)
!53 = !DILocation(line: 61, column: 31, scope: !7)
!54 = !DILocation(line: 61, column: 73, scope: !7)
!55 = !DILocation(line: 61, column: 81, scope: !7)
!56 = !DILocation(line: 61, column: 65, scope: !7)
!57 = !DILocation(line: 65, column: 20, scope: !7)
!58 = !DILocation(line: 68, column: 59, scope: !7)
!59 = !DILocation(line: 68, column: 50, scope: !7)
!60 = !DILocation(line: 68, column: 31, scope: !7)
!61 = !DILocation(line: 68, column: 73, scope: !7)
!62 = !DILocation(line: 68, column: 81, scope: !7)
!63 = !DILocation(line: 68, column: 65, scope: !7)
!64 = !DILocation(line: 69, column: 31, scope: !7)
!65 = !DILocation(line: 69, column: 80, scope: !7)
!66 = !DILocation(line: 71, column: 31, scope: !7)
!67 = !DILocation(line: 71, column: 80, scope: !7)
!68 = !DILocation(line: 73, column: 20, scope: !7)
!69 = !DILocation(line: 74, column: 27, scope: !7)
!70 = !DILocation(line: 70, column: 20, scope: !7)
!71 = !DILocation(line: 62, column: 20, scope: !7)
!72 = !DILocation(line: 54, column: 20, scope: !7)
!73 = !DILocation(line: 76, column: 20, scope: !7)
!74 = !DILocation(line: 79, column: 20, scope: !7)
!75 = !DILocation(line: 80, column: 31, scope: !7)
!76 = !DILocation(line: 80, column: 80, scope: !7)
!77 = !DILocation(line: 81, column: 20, scope: !7)
!78 = !DILocation(line: 82, column: 31, scope: !7)
!79 = !DILocation(line: 82, column: 80, scope: !7)
!80 = !DILocation(line: 83, column: 20, scope: !7)
!81 = !DILocation(line: 84, column: 32, scope: !7)
!82 = !DILocation(line: 84, column: 66, scope: !7)
!83 = !DILocation(line: 85, column: 20, scope: !7)
!84 = !DILocation(line: 87, column: 35, scope: !7)
!85 = !DILocation(line: 0, scope: !7)
!86 = !DILocation(line: 90, column: 35, scope: !7)
!87 = !DILocation(line: 91, column: 34, scope: !7)
!88 = !DILocation(line: 92, column: 33, scope: !7)
!89 = !DILocation(line: 118, column: 15, scope: !90, inlinedAt: !92)
!90 = distinct !DILexicalBlockFile(scope: !7, file: !91, discriminator: 0)
!91 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!92 = !DILocation(line: 94, column: 42, scope: !7)
!93 = !DILocation(line: 121, column: 29, scope: !90, inlinedAt: !92)
!94 = !DILocation(line: 95, column: 35, scope: !7)
!95 = !DILocation(line: 95, column: 30, scope: !7)
!96 = !DILocation(line: 95, column: 45, scope: !7)
!97 = !DILocation(line: 95, column: 40, scope: !7)
!98 = !DILocation(line: 95, column: 25, scope: !7)
!99 = !DILocation(line: 95, column: 65, scope: !7)
!100 = !DILocation(line: 95, column: 57, scope: !7)
!101 = !DILocation(line: 95, column: 4, scope: !7)
