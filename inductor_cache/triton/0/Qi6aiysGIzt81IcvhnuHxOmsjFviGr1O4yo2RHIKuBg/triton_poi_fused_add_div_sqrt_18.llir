; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_add_div_sqrt_18(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %7 = shl i32 %6, 2, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 6, !dbg !12
  %.lobit = and i32 %9, 1, !dbg !12
  %10 = or disjoint i32 %7, %.lobit, !dbg !13
  %11 = or disjoint i32 %10, 2, !dbg !13
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %13 = shl i32 %12, 8, !dbg !15
  %14 = and i32 %8, 127, !dbg !16
  %15 = or disjoint i32 %14, 128, !dbg !16
  %16 = shl i32 %8, 2, !dbg !16
  %17 = and i32 %16, 252, !dbg !16
  %18 = or disjoint i32 %13, %14, !dbg !17
  %19 = or disjoint i32 %13, %15, !dbg !17
  %20 = or disjoint i32 %13, %17, !dbg !17
  %21 = icmp slt i32 %18, 256, !dbg !18
  %22 = icmp slt i32 %19, 256, !dbg !18
  %23 = icmp slt i32 %20, 256, !dbg !18
  %.frozen = freeze i32 %7, !dbg !19
  %24 = sdiv i32 %.frozen, 256, !dbg !19
  %25 = mul i32 %24, 256, !dbg !20
  %.decomposed = sub i32 %.frozen, %25, !dbg !20
  %26 = sdiv i32 %10, 256, !dbg !19
  %27 = sdiv i32 %11, 256, !dbg !19
  %28 = shl i32 %18, 8, !dbg !21
  %29 = shl i32 %19, 8, !dbg !21
  %30 = shl i32 %24, 16, !dbg !22
  %31 = add i32 %30, %.decomposed, !dbg !23
  %32 = add i32 %31, %28, !dbg !24
  %33 = add i32 %31, %29, !dbg !24
  %34 = sext i32 %32 to i64, !dbg !25
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !25
  %36 = sext i32 %33 to i64, !dbg !25
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !25
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %35, i1 %21) #4, !dbg !26
  %39 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !26
  %40 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !26
  %41 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !26
  %42 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !26
  %43 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %37, i1 %22) #4, !dbg !26
  %44 = extractvalue { i32, i32, i32, i32 } %43, 0, !dbg !26
  %45 = extractvalue { i32, i32, i32, i32 } %43, 1, !dbg !26
  %46 = extractvalue { i32, i32, i32, i32 } %43, 2, !dbg !26
  %47 = extractvalue { i32, i32, i32, i32 } %43, 3, !dbg !26
  %48 = and i32 %16, 508, !dbg !26
  %49 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !26
  %50 = insertelement <1 x i32> poison, i32 %39, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %49, <1 x i32> %50, i1 true) #4, !dbg !26
  %51 = getelementptr inbounds i8, ptr addrspace(3) %49, i32 1028, !dbg !26
  %52 = insertelement <1 x i32> poison, i32 %40, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %51, <1 x i32> %52, i1 true) #4, !dbg !26
  %53 = getelementptr inbounds i8, ptr addrspace(3) %49, i32 2056, !dbg !26
  %54 = insertelement <1 x i32> poison, i32 %41, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %53, <1 x i32> %54, i1 true) #4, !dbg !26
  %55 = getelementptr inbounds i8, ptr addrspace(3) %49, i32 3084, !dbg !26
  %56 = insertelement <1 x i32> poison, i32 %42, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %55, <1 x i32> %56, i1 true) #4, !dbg !26
  %57 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !26
  %58 = insertelement <1 x i32> poison, i32 %44, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %57, <1 x i32> %58, i1 true) #4, !dbg !26
  %59 = getelementptr inbounds i8, ptr addrspace(3) %49, i32 1540, !dbg !26
  %60 = insertelement <1 x i32> poison, i32 %45, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %59, <1 x i32> %60, i1 true) #4, !dbg !26
  %61 = getelementptr inbounds i8, ptr addrspace(3) %49, i32 2568, !dbg !26
  %62 = insertelement <1 x i32> poison, i32 %46, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %61, <1 x i32> %62, i1 true) #4, !dbg !26
  %63 = getelementptr inbounds i8, ptr addrspace(3) %49, i32 3596, !dbg !26
  %64 = insertelement <1 x i32> poison, i32 %47, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %63, <1 x i32> %64, i1 true) #4, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %65 = lshr i32 %48, 8, !dbg !26
  %66 = getelementptr float, ptr addrspace(3) @global_smem, i32 %65, !dbg !26
  %67 = getelementptr float, ptr addrspace(3) %66, i32 %48, !dbg !26
  %68 = load float, ptr addrspace(3) %67, align 4, !dbg !26
  %69 = or disjoint i32 %48, 1, !dbg !26
  %70 = getelementptr float, ptr addrspace(3) %66, i32 %69, !dbg !26
  %71 = load float, ptr addrspace(3) %70, align 4, !dbg !26
  %72 = or disjoint i32 %48, 2, !dbg !26
  %73 = getelementptr float, ptr addrspace(3) %66, i32 %72, !dbg !26
  %74 = load float, ptr addrspace(3) %73, align 4, !dbg !26
  %75 = or disjoint i32 %48, 3, !dbg !26
  %76 = getelementptr float, ptr addrspace(3) %66, i32 %75, !dbg !26
  %77 = load float, ptr addrspace(3) %76, align 4, !dbg !26
  %78 = or disjoint i32 %48, 512, !dbg !26
  %79 = lshr i32 %78, 8, !dbg !26
  %80 = getelementptr float, ptr addrspace(3) @global_smem, i32 %79, !dbg !26
  %81 = getelementptr float, ptr addrspace(3) %80, i32 %78, !dbg !26
  %82 = load float, ptr addrspace(3) %81, align 4, !dbg !26
  %83 = or disjoint i32 %48, 513, !dbg !26
  %84 = lshr i32 %83, 8, !dbg !26
  %85 = getelementptr float, ptr addrspace(3) @global_smem, i32 %84, !dbg !26
  %86 = getelementptr float, ptr addrspace(3) %85, i32 %83, !dbg !26
  %87 = load float, ptr addrspace(3) %86, align 4, !dbg !26
  %88 = or disjoint i32 %48, 514, !dbg !26
  %89 = lshr i32 %88, 8, !dbg !26
  %90 = getelementptr float, ptr addrspace(3) @global_smem, i32 %89, !dbg !26
  %91 = getelementptr float, ptr addrspace(3) %90, i32 %88, !dbg !26
  %92 = load float, ptr addrspace(3) %91, align 4, !dbg !26
  %93 = or disjoint i32 %48, 515, !dbg !26
  %94 = lshr i32 %93, 8, !dbg !26
  %95 = getelementptr float, ptr addrspace(3) @global_smem, i32 %94, !dbg !26
  %96 = getelementptr float, ptr addrspace(3) %95, i32 %93, !dbg !26
  %97 = load float, ptr addrspace(3) %96, align 4, !dbg !26
  %98 = shl nsw i32 %26, 8, !dbg !27
  %99 = shl nsw i32 %27, 8, !dbg !27
  %100 = add i32 %98, %20, !dbg !28
  %101 = add i32 %20, %99, !dbg !28
  %102 = sext i32 %100 to i64, !dbg !29
  %103 = getelementptr float, ptr addrspace(1) %1, i64 %102, !dbg !29
  %104 = sext i32 %101 to i64, !dbg !29
  %105 = getelementptr float, ptr addrspace(1) %1, i64 %104, !dbg !29
  %106 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %103, i1 %23) #4, !dbg !30
  %107 = extractvalue { i32, i32, i32, i32 } %106, 0, !dbg !30
  %108 = extractvalue { i32, i32, i32, i32 } %106, 1, !dbg !30
  %109 = extractvalue { i32, i32, i32, i32 } %106, 2, !dbg !30
  %110 = extractvalue { i32, i32, i32, i32 } %106, 3, !dbg !30
  %111 = bitcast i32 %107 to float, !dbg !30
  %112 = bitcast i32 %108 to float, !dbg !30
  %113 = bitcast i32 %109 to float, !dbg !30
  %114 = bitcast i32 %110 to float, !dbg !30
  %115 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %105, i1 %23) #4, !dbg !30
  %116 = extractvalue { i32, i32, i32, i32 } %115, 0, !dbg !30
  %117 = extractvalue { i32, i32, i32, i32 } %115, 1, !dbg !30
  %118 = extractvalue { i32, i32, i32, i32 } %115, 2, !dbg !30
  %119 = extractvalue { i32, i32, i32, i32 } %115, 3, !dbg !30
  %120 = bitcast i32 %116 to float, !dbg !30
  %121 = bitcast i32 %117 to float, !dbg !30
  %122 = bitcast i32 %118 to float, !dbg !30
  %123 = bitcast i32 %119 to float, !dbg !30
  %124 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i = icmp eq i32 %124, 0, !dbg !31
  %125 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !31
  %.not1.i = icmp eq i32 %125, 0, !dbg !31
  br i1 %.not.i, label %131, label %126, !dbg !31

126:                                              ; preds = %5
  br i1 %.not1.i, label %129, label %127, !dbg !31

127:                                              ; preds = %126
  %128 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %111) #4, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

129:                                              ; preds = %126
  %130 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %111) #4, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

131:                                              ; preds = %5
  br i1 %.not1.i, label %134, label %132, !dbg !31

132:                                              ; preds = %131
  %133 = tail call float @llvm.nvvm.sqrt.rn.f(float %111) #4, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

134:                                              ; preds = %131
  %135 = tail call float @llvm.nvvm.sqrt.approx.f(float %111) #4, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

__nv_sqrtf.exit:                                  ; preds = %127, %129, %132, %134
  %.0.i = phi float [ %128, %127 ], [ %130, %129 ], [ %133, %132 ], [ %135, %134 ], !dbg !31
  %136 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i2 = icmp eq i32 %136, 0, !dbg !31
  %137 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !31
  %.not1.i5 = icmp eq i32 %137, 0, !dbg !31
  br i1 %.not.i2, label %143, label %138, !dbg !31

138:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i5, label %141, label %139, !dbg !31

139:                                              ; preds = %138
  %140 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %112) #4, !dbg !31
  br label %__nv_sqrtf.exit6, !dbg !31

141:                                              ; preds = %138
  %142 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %112) #4, !dbg !31
  br label %__nv_sqrtf.exit6, !dbg !31

143:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i5, label %146, label %144, !dbg !31

144:                                              ; preds = %143
  %145 = tail call float @llvm.nvvm.sqrt.rn.f(float %112) #4, !dbg !31
  br label %__nv_sqrtf.exit6, !dbg !31

146:                                              ; preds = %143
  %147 = tail call float @llvm.nvvm.sqrt.approx.f(float %112) #4, !dbg !31
  br label %__nv_sqrtf.exit6, !dbg !31

__nv_sqrtf.exit6:                                 ; preds = %139, %141, %144, %146
  %.0.i4 = phi float [ %140, %139 ], [ %142, %141 ], [ %145, %144 ], [ %147, %146 ], !dbg !31
  %148 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i7 = icmp eq i32 %148, 0, !dbg !31
  %149 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !31
  %.not1.i10 = icmp eq i32 %149, 0, !dbg !31
  br i1 %.not.i7, label %155, label %150, !dbg !31

150:                                              ; preds = %__nv_sqrtf.exit6
  br i1 %.not1.i10, label %153, label %151, !dbg !31

151:                                              ; preds = %150
  %152 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %113) #4, !dbg !31
  br label %__nv_sqrtf.exit11, !dbg !31

153:                                              ; preds = %150
  %154 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %113) #4, !dbg !31
  br label %__nv_sqrtf.exit11, !dbg !31

155:                                              ; preds = %__nv_sqrtf.exit6
  br i1 %.not1.i10, label %158, label %156, !dbg !31

156:                                              ; preds = %155
  %157 = tail call float @llvm.nvvm.sqrt.rn.f(float %113) #4, !dbg !31
  br label %__nv_sqrtf.exit11, !dbg !31

158:                                              ; preds = %155
  %159 = tail call float @llvm.nvvm.sqrt.approx.f(float %113) #4, !dbg !31
  br label %__nv_sqrtf.exit11, !dbg !31

__nv_sqrtf.exit11:                                ; preds = %151, %153, %156, %158
  %.0.i9 = phi float [ %152, %151 ], [ %154, %153 ], [ %157, %156 ], [ %159, %158 ], !dbg !31
  %160 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i12 = icmp eq i32 %160, 0, !dbg !31
  %161 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !31
  %.not1.i15 = icmp eq i32 %161, 0, !dbg !31
  br i1 %.not.i12, label %167, label %162, !dbg !31

162:                                              ; preds = %__nv_sqrtf.exit11
  br i1 %.not1.i15, label %165, label %163, !dbg !31

163:                                              ; preds = %162
  %164 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %114) #4, !dbg !31
  br label %__nv_sqrtf.exit16, !dbg !31

165:                                              ; preds = %162
  %166 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %114) #4, !dbg !31
  br label %__nv_sqrtf.exit16, !dbg !31

167:                                              ; preds = %__nv_sqrtf.exit11
  br i1 %.not1.i15, label %170, label %168, !dbg !31

168:                                              ; preds = %167
  %169 = tail call float @llvm.nvvm.sqrt.rn.f(float %114) #4, !dbg !31
  br label %__nv_sqrtf.exit16, !dbg !31

170:                                              ; preds = %167
  %171 = tail call float @llvm.nvvm.sqrt.approx.f(float %114) #4, !dbg !31
  br label %__nv_sqrtf.exit16, !dbg !31

__nv_sqrtf.exit16:                                ; preds = %163, %165, %168, %170
  %.0.i14 = phi float [ %164, %163 ], [ %166, %165 ], [ %169, %168 ], [ %171, %170 ], !dbg !31
  %172 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i17 = icmp eq i32 %172, 0, !dbg !31
  %173 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !31
  %.not1.i20 = icmp eq i32 %173, 0, !dbg !31
  br i1 %.not.i17, label %179, label %174, !dbg !31

174:                                              ; preds = %__nv_sqrtf.exit16
  br i1 %.not1.i20, label %177, label %175, !dbg !31

175:                                              ; preds = %174
  %176 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %120) #4, !dbg !31
  br label %__nv_sqrtf.exit21, !dbg !31

177:                                              ; preds = %174
  %178 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %120) #4, !dbg !31
  br label %__nv_sqrtf.exit21, !dbg !31

179:                                              ; preds = %__nv_sqrtf.exit16
  br i1 %.not1.i20, label %182, label %180, !dbg !31

180:                                              ; preds = %179
  %181 = tail call float @llvm.nvvm.sqrt.rn.f(float %120) #4, !dbg !31
  br label %__nv_sqrtf.exit21, !dbg !31

182:                                              ; preds = %179
  %183 = tail call float @llvm.nvvm.sqrt.approx.f(float %120) #4, !dbg !31
  br label %__nv_sqrtf.exit21, !dbg !31

__nv_sqrtf.exit21:                                ; preds = %175, %177, %180, %182
  %.0.i19 = phi float [ %176, %175 ], [ %178, %177 ], [ %181, %180 ], [ %183, %182 ], !dbg !31
  %184 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i22 = icmp eq i32 %184, 0, !dbg !31
  %185 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !31
  %.not1.i25 = icmp eq i32 %185, 0, !dbg !31
  br i1 %.not.i22, label %191, label %186, !dbg !31

186:                                              ; preds = %__nv_sqrtf.exit21
  br i1 %.not1.i25, label %189, label %187, !dbg !31

187:                                              ; preds = %186
  %188 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %121) #4, !dbg !31
  br label %__nv_sqrtf.exit26, !dbg !31

189:                                              ; preds = %186
  %190 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %121) #4, !dbg !31
  br label %__nv_sqrtf.exit26, !dbg !31

191:                                              ; preds = %__nv_sqrtf.exit21
  br i1 %.not1.i25, label %194, label %192, !dbg !31

192:                                              ; preds = %191
  %193 = tail call float @llvm.nvvm.sqrt.rn.f(float %121) #4, !dbg !31
  br label %__nv_sqrtf.exit26, !dbg !31

194:                                              ; preds = %191
  %195 = tail call float @llvm.nvvm.sqrt.approx.f(float %121) #4, !dbg !31
  br label %__nv_sqrtf.exit26, !dbg !31

__nv_sqrtf.exit26:                                ; preds = %187, %189, %192, %194
  %.0.i24 = phi float [ %188, %187 ], [ %190, %189 ], [ %193, %192 ], [ %195, %194 ], !dbg !31
  %196 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i27 = icmp eq i32 %196, 0, !dbg !31
  %197 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !31
  %.not1.i30 = icmp eq i32 %197, 0, !dbg !31
  br i1 %.not.i27, label %203, label %198, !dbg !31

198:                                              ; preds = %__nv_sqrtf.exit26
  br i1 %.not1.i30, label %201, label %199, !dbg !31

199:                                              ; preds = %198
  %200 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %122) #4, !dbg !31
  br label %__nv_sqrtf.exit31, !dbg !31

201:                                              ; preds = %198
  %202 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %122) #4, !dbg !31
  br label %__nv_sqrtf.exit31, !dbg !31

203:                                              ; preds = %__nv_sqrtf.exit26
  br i1 %.not1.i30, label %206, label %204, !dbg !31

204:                                              ; preds = %203
  %205 = tail call float @llvm.nvvm.sqrt.rn.f(float %122) #4, !dbg !31
  br label %__nv_sqrtf.exit31, !dbg !31

206:                                              ; preds = %203
  %207 = tail call float @llvm.nvvm.sqrt.approx.f(float %122) #4, !dbg !31
  br label %__nv_sqrtf.exit31, !dbg !31

__nv_sqrtf.exit31:                                ; preds = %199, %201, %204, %206
  %.0.i29 = phi float [ %200, %199 ], [ %202, %201 ], [ %205, %204 ], [ %207, %206 ], !dbg !31
  %208 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i32 = icmp eq i32 %208, 0, !dbg !31
  %209 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !31
  %.not1.i35 = icmp eq i32 %209, 0, !dbg !31
  br i1 %.not.i32, label %215, label %210, !dbg !31

210:                                              ; preds = %__nv_sqrtf.exit31
  br i1 %.not1.i35, label %213, label %211, !dbg !31

211:                                              ; preds = %210
  %212 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %123) #4, !dbg !31
  br label %__nv_sqrtf.exit36, !dbg !31

213:                                              ; preds = %210
  %214 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %123) #4, !dbg !31
  br label %__nv_sqrtf.exit36, !dbg !31

215:                                              ; preds = %__nv_sqrtf.exit31
  br i1 %.not1.i35, label %218, label %216, !dbg !31

216:                                              ; preds = %215
  %217 = tail call float @llvm.nvvm.sqrt.rn.f(float %123) #4, !dbg !31
  br label %__nv_sqrtf.exit36, !dbg !31

218:                                              ; preds = %215
  %219 = tail call float @llvm.nvvm.sqrt.approx.f(float %123) #4, !dbg !31
  br label %__nv_sqrtf.exit36, !dbg !31

__nv_sqrtf.exit36:                                ; preds = %211, %213, %216, %218
  %.0.i34 = phi float [ %212, %211 ], [ %214, %213 ], [ %217, %216 ], [ %219, %218 ], !dbg !31
  %220 = fadd float %.0.i, 0x3DDB7CDFE0000000, !dbg !32
  %221 = fadd float %.0.i4, 0x3DDB7CDFE0000000, !dbg !32
  %222 = fadd float %.0.i9, 0x3DDB7CDFE0000000, !dbg !32
  %223 = fadd float %.0.i14, 0x3DDB7CDFE0000000, !dbg !32
  %224 = fadd float %.0.i19, 0x3DDB7CDFE0000000, !dbg !32
  %225 = fadd float %.0.i24, 0x3DDB7CDFE0000000, !dbg !32
  %226 = fadd float %.0.i29, 0x3DDB7CDFE0000000, !dbg !32
  %227 = fadd float %.0.i34, 0x3DDB7CDFE0000000, !dbg !32
  %228 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %68, float %220) #4, !dbg !33
  %229 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %71, float %221) #4, !dbg !33
  %230 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %74, float %222) #4, !dbg !33
  %231 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %77, float %223) #4, !dbg !33
  %232 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %82, float %224) #4, !dbg !33
  %233 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %87, float %225) #4, !dbg !33
  %234 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %92, float %226) #4, !dbg !33
  %235 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %97, float %227) #4, !dbg !33
  %236 = shl i32 %10, 8, !dbg !34
  %237 = shl i32 %11, 8, !dbg !34
  %238 = add i32 %20, %236, !dbg !35
  %239 = add i32 %20, %237, !dbg !35
  %240 = sext i32 %238 to i64, !dbg !36
  %241 = getelementptr float, ptr addrspace(1) %2, i64 %240, !dbg !36
  %242 = sext i32 %239 to i64, !dbg !36
  %243 = getelementptr float, ptr addrspace(1) %2, i64 %242, !dbg !36
  %244 = bitcast float %228 to i32, !dbg !37
  %245 = bitcast float %229 to i32, !dbg !37
  %246 = bitcast float %230 to i32, !dbg !37
  %247 = bitcast float %231 to i32, !dbg !37
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %244, i32 %245, i32 %246, i32 %247, ptr addrspace(1) %241, i1 %23) #4, !dbg !37
  %248 = bitcast float %232 to i32, !dbg !37
  %249 = bitcast float %233 to i32, !dbg !37
  %250 = bitcast float %234 to i32, !dbg !37
  %251 = bitcast float %235 to i32, !dbg !37
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %248, i32 %249, i32 %250, i32 %251, ptr addrspace(1) %243, i1 %23) #4, !dbg !37
  ret void, !dbg !38
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cbz4vrgsakrmgibrwoz3lrwtgpdjfh3eyl7xoetset6qrmexmdew.py", directory: "inductor_cache/bz")
!4 = !{ptr @triton_poi_fused_add_div_sqrt_18, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_div_sqrt_18, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_div_sqrt_18", linkageName: "triton_poi_fused_add_div_sqrt_18", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 39, scope: !7)
!22 = !DILocation(line: 32, column: 50, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 44, scope: !7)
!25 = !DILocation(line: 32, column: 30, scope: !7)
!26 = !DILocation(line: 32, column: 55, scope: !7)
!27 = !DILocation(line: 33, column: 39, scope: !7)
!28 = !DILocation(line: 33, column: 35, scope: !7)
!29 = !DILocation(line: 33, column: 30, scope: !7)
!30 = !DILocation(line: 33, column: 44, scope: !7)
!31 = !DILocation(line: 34, column: 26, scope: !7)
!32 = !DILocation(line: 36, column: 18, scope: !7)
!33 = !DILocation(line: 37, column: 18, scope: !7)
!34 = !DILocation(line: 38, column: 34, scope: !7)
!35 = !DILocation(line: 38, column: 30, scope: !7)
!36 = !DILocation(line: 38, column: 25, scope: !7)
!37 = !DILocation(line: 38, column: 45, scope: !7)
!38 = !DILocation(line: 38, column: 4, scope: !7)
