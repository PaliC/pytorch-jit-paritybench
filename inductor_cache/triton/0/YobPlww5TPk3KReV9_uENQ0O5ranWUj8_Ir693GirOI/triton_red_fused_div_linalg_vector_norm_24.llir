; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_red_fused_div_linalg_vector_norm_24(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %7 = icmp slt i32 %6, 4, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = and i32 %8, 31, !dbg !12
  %10 = lshr i32 %8, 5, !dbg !12
  %11 = shl i32 %8, 2, !dbg !12
  %12 = and i32 %11, 2044, !dbg !12
  %13 = shl i32 %6, 11, !dbg !13
  %14 = or disjoint i32 %13, %12, !dbg !14
  %15 = sext i32 %14 to i64, !dbg !15
  %16 = getelementptr float, ptr addrspace(1) %1, i64 %15, !dbg !15
  %17 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %16, i1 %7, i32 0, i1 %7, i32 0, i1 %7, i32 0, i1 %7, i32 0, i1 %7) #5, !dbg !16
  %18 = extractvalue { i32, i32, i32, i32 } %17, 0, !dbg !16
  %19 = extractvalue { i32, i32, i32, i32 } %17, 1, !dbg !16
  %20 = extractvalue { i32, i32, i32, i32 } %17, 2, !dbg !16
  %21 = extractvalue { i32, i32, i32, i32 } %17, 3, !dbg !16
  %22 = bitcast i32 %18 to float, !dbg !16
  %23 = bitcast i32 %19 to float, !dbg !16
  %24 = bitcast i32 %20 to float, !dbg !16
  %25 = bitcast i32 %21 to float, !dbg !16
  %26 = fmul float %22, %22, !dbg !17
  %27 = fmul float %23, %23, !dbg !17
  %28 = fmul float %24, %24, !dbg !17
  %29 = fmul float %25, %25, !dbg !17
  %30 = fadd float %26, %27, !dbg !18
  %31 = fadd float %28, %30, !dbg !18
  %32 = fadd float %29, %31, !dbg !18
  %33 = select i1 %7, float %32, float 0.000000e+00, !dbg !18
  %34 = bitcast float %33 to i32, !dbg !23
  %35 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %34, i32 16, i32 31), !dbg !23
  %36 = bitcast i32 %35 to float, !dbg !23
  %37 = fadd float %33, %36, !dbg !18
  %38 = bitcast float %37 to i32, !dbg !23
  %39 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %38, i32 8, i32 31), !dbg !23
  %40 = bitcast i32 %39 to float, !dbg !23
  %41 = fadd float %37, %40, !dbg !18
  %42 = bitcast float %41 to i32, !dbg !23
  %43 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %42, i32 4, i32 31), !dbg !23
  %44 = bitcast i32 %43 to float, !dbg !23
  %45 = fadd float %41, %44, !dbg !18
  %46 = bitcast float %45 to i32, !dbg !23
  %47 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %46, i32 2, i32 31), !dbg !23
  %48 = bitcast i32 %47 to float, !dbg !23
  %49 = fadd float %45, %48, !dbg !18
  %50 = bitcast float %49 to i32, !dbg !23
  %51 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %50, i32 1, i32 31), !dbg !23
  %52 = bitcast i32 %51 to float, !dbg !23
  %53 = fadd float %49, %52, !dbg !18
  %54 = icmp eq i32 %9, 0, !dbg !23
  %55 = and i32 %10, 15, !dbg !23
  %56 = zext nneg i32 %55 to i64, !dbg !23
  %57 = getelementptr float, ptr addrspace(3) @global_smem, i64 %56, !dbg !23
  %58 = bitcast float %53 to <1 x i32>, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %57, <1 x i32> %58, i1 %54) #5, !dbg !23
  tail call void @llvm.nvvm.barrier0(), !dbg !23
  %59 = icmp slt i32 %8, 16, !dbg !23
  %60 = sext i32 %8 to i64, !dbg !23
  %61 = getelementptr float, ptr addrspace(3) @global_smem, i64 %60, !dbg !23
  %62 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %61, i1 %59) #5, !dbg !23
  %63 = bitcast i32 %62 to float, !dbg !23
  %64 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %62, i32 8, i32 31), !dbg !23
  %65 = bitcast i32 %64 to float, !dbg !23
  %66 = fadd float %63, %65, !dbg !18
  %67 = bitcast float %66 to i32, !dbg !23
  %68 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %67, i32 4, i32 31), !dbg !23
  %69 = bitcast i32 %68 to float, !dbg !23
  %70 = fadd float %66, %69, !dbg !18
  %71 = bitcast float %70 to i32, !dbg !23
  %72 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %71, i32 2, i32 31), !dbg !23
  %73 = bitcast i32 %72 to float, !dbg !23
  %74 = fadd float %70, %73, !dbg !18
  %75 = bitcast float %74 to i32, !dbg !23
  %76 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %75, i32 1, i32 31), !dbg !23
  %77 = bitcast i32 %76 to float, !dbg !23
  %78 = fadd float %74, %77, !dbg !18
  %79 = and i32 %8, 15, !dbg !23
  %80 = icmp eq i32 %79, 0, !dbg !23
  %81 = and i1 %59, %80, !dbg !23
  %82 = bitcast float %78 to <1 x i32>, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %61, <1 x i32> %82, i1 %81) #5, !dbg !23
  tail call void @llvm.nvvm.barrier0(), !dbg !23
  %83 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !23
  %84 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !24
  %.not.i = icmp eq i32 %84, 0, !dbg !24
  %85 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !24
  %.not1.i = icmp eq i32 %85, 0, !dbg !24
  br i1 %.not.i, label %91, label %86, !dbg !24

86:                                               ; preds = %5
  br i1 %.not1.i, label %89, label %87, !dbg !24

87:                                               ; preds = %86
  %88 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %83) #5, !dbg !24
  br label %__nv_sqrtf.exit, !dbg !24

89:                                               ; preds = %86
  %90 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %83) #5, !dbg !24
  br label %__nv_sqrtf.exit, !dbg !24

91:                                               ; preds = %5
  br i1 %.not1.i, label %94, label %92, !dbg !24

92:                                               ; preds = %91
  %93 = tail call float @llvm.nvvm.sqrt.rn.f(float %83) #5, !dbg !24
  br label %__nv_sqrtf.exit, !dbg !24

94:                                               ; preds = %91
  %95 = tail call float @llvm.nvvm.sqrt.approx.f(float %83) #5, !dbg !24
  br label %__nv_sqrtf.exit, !dbg !24

__nv_sqrtf.exit:                                  ; preds = %87, %89, %92, %94
  %.0.i = phi float [ %88, %87 ], [ %90, %89 ], [ %93, %92 ], [ %95, %94 ], !dbg !24
  %96 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !24
  %97 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !24
  %98 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !24
  %99 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !24
  %100 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !24
  %101 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !24
  %102 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !24
  %.not.i16 = icmp eq i32 %102, 0, !dbg !24
  %103 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !24
  %.not1.i19 = icmp eq i32 %103, 0, !dbg !24
  br i1 %.not.i16, label %109, label %104, !dbg !24

104:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i19, label %107, label %105, !dbg !24

105:                                              ; preds = %104
  %106 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %83) #5, !dbg !24
  br label %__nv_sqrtf.exit20, !dbg !24

107:                                              ; preds = %104
  %108 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %83) #5, !dbg !24
  br label %__nv_sqrtf.exit20, !dbg !24

109:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i19, label %112, label %110, !dbg !24

110:                                              ; preds = %109
  %111 = tail call float @llvm.nvvm.sqrt.rn.f(float %83) #5, !dbg !24
  br label %__nv_sqrtf.exit20, !dbg !24

112:                                              ; preds = %109
  %113 = tail call float @llvm.nvvm.sqrt.approx.f(float %83) #5, !dbg !24
  br label %__nv_sqrtf.exit20, !dbg !24

__nv_sqrtf.exit20:                                ; preds = %105, %107, %110, %112
  %.0.i18 = phi float [ %106, %105 ], [ %108, %107 ], [ %111, %110 ], [ %113, %112 ], !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %114 = sext i32 %6 to i64, !dbg !26
  %115 = getelementptr float, ptr addrspace(1) %0, i64 %114, !dbg !26
  %urem = and i32 %8, 511, !dbg !27
  %116 = icmp eq i32 %urem, 0, !dbg !27
  %117 = bitcast float %.0.i to i32, !dbg !27
  %118 = and i1 %116, %7, !dbg !27
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %117, ptr addrspace(1) %115, i1 %118) #5, !dbg !27
  %119 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %16, i1 %7, i32 0, i1 %7, i32 0, i1 %7, i32 0, i1 %7, i32 0, i1 %7) #5, !dbg !28
  %120 = extractvalue { i32, i32, i32, i32 } %119, 0, !dbg !28
  %121 = extractvalue { i32, i32, i32, i32 } %119, 1, !dbg !28
  %122 = extractvalue { i32, i32, i32, i32 } %119, 2, !dbg !28
  %123 = extractvalue { i32, i32, i32, i32 } %119, 3, !dbg !28
  %124 = bitcast i32 %120 to float, !dbg !28
  %125 = bitcast i32 %121 to float, !dbg !28
  %126 = bitcast i32 %122 to float, !dbg !28
  %127 = bitcast i32 %123 to float, !dbg !28
  %128 = fcmp ogt float %.0.i18, 0x3D71979980000000, !dbg !29
  %129 = fcmp uno float %.0.i18, 0.000000e+00, !dbg !33
  %130 = or i1 %128, %129, !dbg !34
  %131 = select i1 %130, float %.0.i18, float 0x3D71979980000000, !dbg !35
  %132 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %124, float %131) #5, !dbg !36
  %133 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %125, float %131) #5, !dbg !36
  %134 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %126, float %131) #5, !dbg !36
  %135 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %127, float %131) #5, !dbg !36
  %136 = getelementptr float, ptr addrspace(1) %2, i64 %15, !dbg !37
  %137 = bitcast float %132 to i32, !dbg !38
  %138 = bitcast float %133 to i32, !dbg !38
  %139 = bitcast float %134 to i32, !dbg !38
  %140 = bitcast float %135 to i32, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %137, i32 %138, i32 %139, i32 %140, ptr addrspace(1) %136, i1 %7) #5, !dbg !38
  ret void, !dbg !39
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "czehhxkni7xdeifqqx54s6wrzu2nkchgvhm3oxze3zxtb474ju6k.py", directory: "inductor_cache/ze")
!4 = !{ptr @triton_red_fused_div_linalg_vector_norm_24, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_div_linalg_vector_norm_24, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_div_linalg_vector_norm_24", linkageName: "triton_red_fused_div_linalg_vector_norm_24", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 33, scope: !7)
!13 = !DILocation(line: 32, column: 44, scope: !7)
!14 = !DILocation(line: 32, column: 39, scope: !7)
!15 = !DILocation(line: 32, column: 34, scope: !7)
!16 = !DILocation(line: 32, column: 49, scope: !7)
!17 = !DILocation(line: 33, column: 22, scope: !7)
!18 = !DILocation(line: 256, column: 15, scope: !19, inlinedAt: !22)
!19 = distinct !DILexicalBlockFile(scope: !21, file: !20, discriminator: 0)
!20 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!21 = distinct !DILexicalBlockFile(scope: !7, file: !20, discriminator: 0)
!22 = !DILocation(line: 37, column: 25, scope: !7)
!23 = !DILocation(line: 267, column: 36, scope: !21, inlinedAt: !22)
!24 = !DILocation(line: 38, column: 26, scope: !7)
!25 = !DILocation(line: 39, column: 4, scope: !7)
!26 = !DILocation(line: 40, column: 28, scope: !7)
!27 = !DILocation(line: 40, column: 39, scope: !7)
!28 = !DILocation(line: 45, column: 49, scope: !7)
!29 = !DILocation(line: 118, column: 15, scope: !30, inlinedAt: !32)
!30 = distinct !DILexicalBlockFile(scope: !7, file: !31, discriminator: 0)
!31 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!32 = !DILocation(line: 47, column: 44, scope: !7)
!33 = !DILocation(line: 120, column: 21, scope: !30, inlinedAt: !32)
!34 = !DILocation(line: 120, column: 16, scope: !30, inlinedAt: !32)
!35 = !DILocation(line: 121, column: 29, scope: !30, inlinedAt: !32)
!36 = !DILocation(line: 48, column: 22, scope: !7)
!37 = !DILocation(line: 49, column: 29, scope: !7)
!38 = !DILocation(line: 49, column: 50, scope: !7)
!39 = !DILocation(line: 41, column: 4, scope: !7)
