; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_avg_pool2d_max_pool2d_with_indices_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %7 = shl i32 %6, 8, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 1, !dbg !12
  %10 = and i32 %9, 254, !dbg !12
  %11 = or disjoint i32 %7, %10, !dbg !13
  %12 = or disjoint i32 %11, 1, !dbg !13
  %13 = icmp slt i32 %11, 144, !dbg !14
  %14 = sdiv i32 %11, 3, !dbg !15
  %15 = sdiv i32 %12, 3, !dbg !15
  %16 = sdiv i32 %11, 9, !dbg !16
  %17 = sdiv i32 %12, 9, !dbg !16
  %18 = mul i32 %16, 25, !dbg !17
  %19 = mul i32 %17, 25, !dbg !17
  %20 = insertelement <2 x i32> poison, i32 %11, i64 0, !dbg !18
  %21 = insertelement <2 x i32> %20, i32 %14, i64 1, !dbg !18
  %22 = srem <2 x i32> %21, splat (i32 3), !dbg !18
  %23 = extractelement <2 x i32> %22, i64 1, !dbg !19
  %24 = icmp sgt i32 %23, 0, !dbg !20
  %25 = icmp sgt <2 x i32> %22, <i32 0, i32 -1>, !dbg !21
  %26 = extractelement <2 x i1> %25, i64 0, !dbg !22
  %27 = and i1 %26, %24, !dbg !23
  %28 = mul nsw i32 %23, 10, !dbg !19
  %29 = add i32 %28, %18, !dbg !24
  %30 = add i32 %29, -6, !dbg !25
  %31 = and i1 %13, %27, !dbg !26
  %32 = extractelement <2 x i32> %22, i64 0, !dbg !27
  %33 = icmp sgt i32 %32, -1, !dbg !27
  %34 = and i1 %33, %24, !dbg !28
  %35 = add i32 %29, -5, !dbg !29
  %36 = and i1 %13, %34, !dbg !30
  %37 = add i32 %29, -4, !dbg !31
  %38 = insertelement <2 x i32> poison, i32 %12, i64 0, !dbg !18
  %39 = insertelement <2 x i32> %38, i32 %15, i64 1, !dbg !18
  %40 = srem <2 x i32> %39, splat (i32 3), !dbg !18
  %41 = extractelement <2 x i32> %40, i64 1, !dbg !19
  %42 = icmp sgt i32 %41, 0, !dbg !20
  %43 = icmp sgt <2 x i32> %40, <i32 0, i32 -1>, !dbg !21
  %44 = extractelement <2 x i1> %43, i64 0, !dbg !22
  %45 = and i1 %44, %42, !dbg !23
  %46 = mul nsw i32 %41, 10, !dbg !19
  %47 = add i32 %46, %19, !dbg !24
  %48 = add i32 %47, -6, !dbg !25
  %49 = and i1 %45, %13, !dbg !26
  %50 = extractelement <2 x i32> %40, i64 0, !dbg !27
  %51 = icmp sgt i32 %50, -1, !dbg !27
  %52 = and i1 %51, %42, !dbg !28
  %53 = add i32 %47, -5, !dbg !29
  %54 = and i1 %52, %13, !dbg !30
  %55 = add i32 %47, -4, !dbg !31
  %56 = extractelement <2 x i1> %25, i64 1, !dbg !32
  %57 = and i1 %26, %56, !dbg !33
  %58 = extractelement <2 x i1> %43, i64 1, !dbg !32
  %59 = and i1 %44, %58, !dbg !33
  %60 = and i1 %13, %57, !dbg !34
  %61 = and i1 %59, %13, !dbg !34
  %62 = or i32 %23, %32, !dbg !35
  %63 = icmp sgt i32 %62, -1, !dbg !35
  %64 = or i32 %41, %50, !dbg !35
  %65 = icmp sgt i32 %64, -1, !dbg !35
  %66 = and i1 %13, %63, !dbg !36
  %67 = and i1 %65, %13, !dbg !36
  %68 = add i32 %29, 4, !dbg !37
  %69 = add i32 %47, 4, !dbg !37
  %70 = add i32 %29, 5, !dbg !38
  %71 = add i32 %47, 5, !dbg !38
  %72 = add i32 %29, 6, !dbg !39
  %73 = add i32 %47, 6, !dbg !39
  %74 = shl nsw <2 x i32> %22, splat (i32 1), !dbg !40
  %75 = extractelement <2 x i32> %74, i64 1, !dbg !41
  %76 = add nsw i32 %75, -1, !dbg !42
  %77 = extractelement <2 x i32> %74, i64 0, !dbg !43
  %78 = add nsw i32 %77, -1, !dbg !44
  %79 = add i32 %30, %77, !dbg !45
  %80 = sext i32 %79 to i64, !dbg !46
  %81 = getelementptr float, ptr addrspace(1) %0, i64 %80, !dbg !46
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %81, i1 %31, i32 -8388608, i1 %31) #1, !dbg !47
  %83 = add i32 %35, %77, !dbg !48
  %84 = sext i32 %83 to i64, !dbg !49
  %85 = getelementptr float, ptr addrspace(1) %0, i64 %84, !dbg !49
  %86 = or disjoint i32 %77, 1, !dbg !50
  %87 = icmp slt i32 %86, 5, !dbg !51
  %88 = and i1 %33, %87, !dbg !52
  %89 = and i1 %24, %88, !dbg !53
  %90 = add i32 %37, %77, !dbg !54
  %91 = sext i32 %90 to i64, !dbg !55
  %92 = getelementptr float, ptr addrspace(1) %0, i64 %91, !dbg !55
  %93 = and i1 %13, %89, !dbg !56
  %94 = add i32 %29, %78, !dbg !57
  %95 = sext i32 %94 to i64, !dbg !58
  %96 = getelementptr float, ptr addrspace(1) %0, i64 %95, !dbg !58
  %97 = add i32 %29, %77, !dbg !59
  %98 = sext i32 %97 to i64, !dbg !60
  %99 = getelementptr float, ptr addrspace(1) %0, i64 %98, !dbg !60
  %100 = and i1 %56, %88, !dbg !61
  %101 = add i32 %29, %86, !dbg !62
  %102 = sext i32 %101 to i64, !dbg !63
  %103 = getelementptr float, ptr addrspace(1) %0, i64 %102, !dbg !63
  %104 = and i1 %13, %100, !dbg !64
  %105 = or disjoint i32 %75, 1, !dbg !41
  %106 = icmp slt i32 %105, 5, !dbg !65
  %107 = and i1 %56, %106, !dbg !32
  %108 = and i1 %26, %107, !dbg !66
  %109 = add i32 %68, %77, !dbg !67
  %110 = sext i32 %109 to i64, !dbg !68
  %111 = getelementptr float, ptr addrspace(1) %0, i64 %110, !dbg !68
  %112 = and i1 %13, %108, !dbg !69
  %113 = and i1 %33, %107, !dbg !70
  %114 = add i32 %70, %77, !dbg !71
  %115 = sext i32 %114 to i64, !dbg !72
  %116 = getelementptr float, ptr addrspace(1) %0, i64 %115, !dbg !72
  %117 = and i1 %13, %113, !dbg !73
  %118 = and i1 %88, %107, !dbg !74
  %119 = add i32 %72, %77, !dbg !43
  %120 = sext i32 %119 to i64, !dbg !75
  %121 = getelementptr float, ptr addrspace(1) %0, i64 %120, !dbg !75
  %122 = and i1 %13, %118, !dbg !76
  %123 = insertelement <2 x i32> poison, i32 %82, i64 0, !dbg !47
  %124 = select i1 %26, i32 %78, i32 0, !dbg !22
  %125 = select i1 %24, i32 %76, i32 0, !dbg !77
  %126 = add nsw <2 x i32> %74, splat (i32 2), !dbg !78
  %127 = icmp sgt <2 x i32> %22, splat (i32 1), !dbg !79
  %128 = select <2 x i1> %127, <2 x i32> splat (i32 5), <2 x i32> zeroinitializer, !dbg !80
  %129 = icmp slt <2 x i32> %22, splat (i32 2), !dbg !81
  %130 = select <2 x i1> %129, <2 x i32> %126, <2 x i32> zeroinitializer, !dbg !82
  %131 = add nsw <2 x i32> %130, %128, !dbg !83
  %132 = shl nsw <2 x i32> %40, splat (i32 1), !dbg !40
  %133 = extractelement <2 x i32> %132, i64 1, !dbg !41
  %134 = add nsw i32 %133, -1, !dbg !42
  %135 = extractelement <2 x i32> %132, i64 0, !dbg !43
  %136 = add nsw i32 %135, -1, !dbg !44
  %137 = add i32 %48, %135, !dbg !45
  %138 = sext i32 %137 to i64, !dbg !46
  %139 = getelementptr float, ptr addrspace(1) %0, i64 %138, !dbg !46
  %140 = add i32 %53, %135, !dbg !48
  %141 = sext i32 %140 to i64, !dbg !49
  %142 = getelementptr float, ptr addrspace(1) %0, i64 %141, !dbg !49
  %143 = or disjoint i32 %135, 1, !dbg !50
  %144 = icmp slt i32 %143, 5, !dbg !51
  %145 = and i1 %51, %144, !dbg !52
  %146 = and i1 %42, %145, !dbg !53
  %147 = add i32 %55, %135, !dbg !54
  %148 = sext i32 %147 to i64, !dbg !55
  %149 = getelementptr float, ptr addrspace(1) %0, i64 %148, !dbg !55
  %150 = and i1 %146, %13, !dbg !56
  %151 = add i32 %47, %136, !dbg !57
  %152 = sext i32 %151 to i64, !dbg !58
  %153 = getelementptr float, ptr addrspace(1) %0, i64 %152, !dbg !58
  %154 = add i32 %47, %135, !dbg !59
  %155 = sext i32 %154 to i64, !dbg !60
  %156 = getelementptr float, ptr addrspace(1) %0, i64 %155, !dbg !60
  %157 = and i1 %58, %145, !dbg !61
  %158 = add i32 %47, %143, !dbg !62
  %159 = sext i32 %158 to i64, !dbg !63
  %160 = getelementptr float, ptr addrspace(1) %0, i64 %159, !dbg !63
  %161 = and i1 %157, %13, !dbg !64
  %162 = or disjoint i32 %133, 1, !dbg !41
  %163 = icmp slt i32 %162, 5, !dbg !65
  %164 = and i1 %58, %163, !dbg !32
  %165 = and i1 %44, %164, !dbg !66
  %166 = add i32 %69, %135, !dbg !67
  %167 = sext i32 %166 to i64, !dbg !68
  %168 = getelementptr float, ptr addrspace(1) %0, i64 %167, !dbg !68
  %169 = and i1 %165, %13, !dbg !69
  %170 = and i1 %51, %164, !dbg !70
  %171 = add i32 %71, %135, !dbg !71
  %172 = sext i32 %171 to i64, !dbg !72
  %173 = getelementptr float, ptr addrspace(1) %0, i64 %172, !dbg !72
  %174 = and i1 %170, %13, !dbg !73
  %175 = and i1 %145, %164, !dbg !74
  %176 = add i32 %73, %135, !dbg !43
  %177 = sext i32 %176 to i64, !dbg !75
  %178 = getelementptr float, ptr addrspace(1) %0, i64 %177, !dbg !75
  %179 = and i1 %175, %13, !dbg !76
  %180 = select i1 %44, i32 %136, i32 0, !dbg !22
  %181 = select i1 %42, i32 %134, i32 0, !dbg !77
  %182 = add nsw <2 x i32> %132, splat (i32 2), !dbg !78
  %183 = icmp sgt <2 x i32> %40, splat (i32 1), !dbg !79
  %184 = select <2 x i1> %183, <2 x i32> splat (i32 5), <2 x i32> zeroinitializer, !dbg !80
  %185 = icmp slt <2 x i32> %40, splat (i32 2), !dbg !81
  %186 = select <2 x i1> %185, <2 x i32> %182, <2 x i32> zeroinitializer, !dbg !82
  %187 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %139, i1 %49, i32 -8388608, i1 %49) #1, !dbg !47
  %188 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %85, i1 %36, i32 -8388608, i1 %36) #1, !dbg !84
  %189 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %142, i1 %54, i32 -8388608, i1 %54) #1, !dbg !84
  %190 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %92, i1 %93, i32 -8388608, i1 %93) #1, !dbg !85
  %191 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %149, i1 %150, i32 -8388608, i1 %150) #1, !dbg !85
  %192 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %96, i1 %60, i32 -8388608, i1 %60) #1, !dbg !86
  %193 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %153, i1 %61, i32 -8388608, i1 %61) #1, !dbg !86
  %194 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %99, i1 %66, i32 -8388608, i1 %66) #1, !dbg !87
  %195 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %156, i1 %67, i32 -8388608, i1 %67) #1, !dbg !87
  %196 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %103, i1 %104, i32 -8388608, i1 %104) #1, !dbg !88
  %197 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %160, i1 %161, i32 -8388608, i1 %161) #1, !dbg !88
  %198 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %111, i1 %112, i32 -8388608, i1 %112) #1, !dbg !89
  %199 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %168, i1 %169, i32 -8388608, i1 %169) #1, !dbg !89
  %200 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %116, i1 %117, i32 -8388608, i1 %117) #1, !dbg !90
  %201 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %173, i1 %174, i32 -8388608, i1 %174) #1, !dbg !90
  %202 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %121, i1 %122, i32 -8388608, i1 %122) #1, !dbg !91
  %203 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %178, i1 %179, i32 -8388608, i1 %179) #1, !dbg !91
  %204 = insertelement <2 x i32> %123, i32 %187, i64 1, !dbg !47
  %205 = bitcast <2 x i32> %204 to <2 x float>, !dbg !47
  %206 = insertelement <2 x i32> poison, i32 %188, i64 0, !dbg !84
  %207 = insertelement <2 x i32> %206, i32 %189, i64 1, !dbg !84
  %208 = bitcast <2 x i32> %207 to <2 x float>, !dbg !84
  %209 = fcmp ogt <2 x float> %208, %205, !dbg !92
  %210 = fcmp uno <2 x float> %208, zeroinitializer, !dbg !96
  %211 = or <2 x i1> %209, %210, !dbg !97
  %.v = select <2 x i1> %211, <2 x i32> %207, <2 x i32> %204, !dbg !98
  %212 = bitcast <2 x i32> %.v to <2 x float>, !dbg !98
  %213 = insertelement <2 x i32> poison, i32 %190, i64 0, !dbg !85
  %214 = insertelement <2 x i32> %213, i32 %191, i64 1, !dbg !85
  %215 = bitcast <2 x i32> %214 to <2 x float>, !dbg !85
  %216 = fcmp olt <2 x float> %212, %215, !dbg !99
  %217 = fcmp uno <2 x float> %215, zeroinitializer, !dbg !101
  %218 = or <2 x i1> %217, %216, !dbg !102
  %.v12 = select <2 x i1> %218, <2 x i32> %214, <2 x i32> %.v, !dbg !103
  %219 = bitcast <2 x i32> %.v12 to <2 x float>, !dbg !103
  %220 = insertelement <2 x i32> poison, i32 %192, i64 0, !dbg !86
  %221 = insertelement <2 x i32> %220, i32 %193, i64 1, !dbg !86
  %222 = bitcast <2 x i32> %221 to <2 x float>, !dbg !86
  %223 = fcmp olt <2 x float> %219, %222, !dbg !104
  %224 = fcmp uno <2 x float> %222, zeroinitializer, !dbg !106
  %225 = or <2 x i1> %224, %223, !dbg !107
  %.v13 = select <2 x i1> %225, <2 x i32> %221, <2 x i32> %.v12, !dbg !108
  %226 = bitcast <2 x i32> %.v13 to <2 x float>, !dbg !108
  %227 = insertelement <2 x i32> poison, i32 %194, i64 0, !dbg !87
  %228 = insertelement <2 x i32> %227, i32 %195, i64 1, !dbg !87
  %229 = bitcast <2 x i32> %228 to <2 x float>, !dbg !87
  %230 = fcmp olt <2 x float> %226, %229, !dbg !109
  %231 = fcmp uno <2 x float> %229, zeroinitializer, !dbg !111
  %232 = or <2 x i1> %231, %230, !dbg !112
  %.v14 = select <2 x i1> %232, <2 x i32> %228, <2 x i32> %.v13, !dbg !113
  %233 = bitcast <2 x i32> %.v14 to <2 x float>, !dbg !113
  %234 = insertelement <2 x i32> poison, i32 %196, i64 0, !dbg !88
  %235 = insertelement <2 x i32> %234, i32 %197, i64 1, !dbg !88
  %236 = bitcast <2 x i32> %235 to <2 x float>, !dbg !88
  %237 = fcmp olt <2 x float> %233, %236, !dbg !114
  %238 = fcmp uno <2 x float> %236, zeroinitializer, !dbg !116
  %239 = or <2 x i1> %238, %237, !dbg !117
  %.v15 = select <2 x i1> %239, <2 x i32> %235, <2 x i32> %.v14, !dbg !118
  %240 = bitcast <2 x i32> %.v15 to <2 x float>, !dbg !118
  %241 = insertelement <2 x i32> poison, i32 %198, i64 0, !dbg !89
  %242 = insertelement <2 x i32> %241, i32 %199, i64 1, !dbg !89
  %243 = bitcast <2 x i32> %242 to <2 x float>, !dbg !89
  %244 = fcmp olt <2 x float> %240, %243, !dbg !119
  %245 = fcmp uno <2 x float> %243, zeroinitializer, !dbg !121
  %246 = or <2 x i1> %245, %244, !dbg !122
  %.v16 = select <2 x i1> %246, <2 x i32> %242, <2 x i32> %.v15, !dbg !123
  %247 = bitcast <2 x i32> %.v16 to <2 x float>, !dbg !123
  %248 = insertelement <2 x i32> poison, i32 %200, i64 0, !dbg !90
  %249 = insertelement <2 x i32> %248, i32 %201, i64 1, !dbg !90
  %250 = bitcast <2 x i32> %249 to <2 x float>, !dbg !90
  %251 = fcmp olt <2 x float> %247, %250, !dbg !124
  %252 = fcmp uno <2 x float> %250, zeroinitializer, !dbg !126
  %253 = or <2 x i1> %252, %251, !dbg !127
  %.v17 = select <2 x i1> %253, <2 x i32> %249, <2 x i32> %.v16, !dbg !128
  %254 = bitcast <2 x i32> %.v17 to <2 x float>, !dbg !128
  %255 = insertelement <2 x i32> poison, i32 %202, i64 0, !dbg !91
  %256 = insertelement <2 x i32> %255, i32 %203, i64 1, !dbg !91
  %257 = bitcast <2 x i32> %256 to <2 x float>, !dbg !91
  %258 = fcmp olt <2 x float> %254, %257, !dbg !129
  %259 = bitcast i32 %202 to float, !dbg !131
  %260 = fcmp uno float %259, 0.000000e+00, !dbg !131
  %261 = bitcast i32 %203 to float, !dbg !131
  %262 = fcmp uno float %261, 0.000000e+00, !dbg !131
  %263 = extractelement <2 x i1> %258, i64 0, !dbg !132
  %264 = or i1 %260, %263, !dbg !132
  %265 = extractelement <2 x i1> %258, i64 1, !dbg !132
  %266 = or i1 %262, %265, !dbg !132
  %267 = zext <2 x i1> %209 to <2 x i8>, !dbg !133
  %268 = select <2 x i1> %216, <2 x i8> splat (i8 2), <2 x i8> %267, !dbg !134
  %269 = select <2 x i1> %223, <2 x i8> splat (i8 3), <2 x i8> %268, !dbg !135
  %270 = select <2 x i1> %230, <2 x i8> splat (i8 4), <2 x i8> %269, !dbg !136
  %271 = select <2 x i1> %237, <2 x i8> splat (i8 5), <2 x i8> %270, !dbg !137
  %272 = select <2 x i1> %244, <2 x i8> splat (i8 6), <2 x i8> %271, !dbg !138
  %273 = select <2 x i1> %251, <2 x i8> splat (i8 7), <2 x i8> %272, !dbg !139
  %274 = select <2 x i1> %258, <2 x i8> splat (i8 8), <2 x i8> %273, !dbg !140
  %275 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %81, i1 %31, i32 0, i1 %31) #1, !dbg !141
  %276 = bitcast i32 %275 to float, !dbg !141
  %277 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %139, i1 %49, i32 0, i1 %49) #1, !dbg !141
  %278 = bitcast i32 %277 to float, !dbg !141
  %279 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %85, i1 %36, i32 0, i1 %36) #1, !dbg !142
  %280 = bitcast i32 %279 to float, !dbg !142
  %281 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %142, i1 %54, i32 0, i1 %54) #1, !dbg !142
  %282 = bitcast i32 %281 to float, !dbg !142
  %283 = fadd float %276, %280, !dbg !143
  %284 = fadd float %278, %282, !dbg !143
  %285 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %92, i1 %93, i32 0, i1 %93) #1, !dbg !144
  %286 = bitcast i32 %285 to float, !dbg !144
  %287 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %149, i1 %150, i32 0, i1 %150) #1, !dbg !144
  %288 = bitcast i32 %287 to float, !dbg !144
  %289 = fadd float %283, %286, !dbg !145
  %290 = fadd float %284, %288, !dbg !145
  %291 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %96, i1 %60, i32 0, i1 %60) #1, !dbg !146
  %292 = bitcast i32 %291 to float, !dbg !146
  %293 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %153, i1 %61, i32 0, i1 %61) #1, !dbg !146
  %294 = bitcast i32 %293 to float, !dbg !146
  %295 = fadd float %289, %292, !dbg !147
  %296 = fadd float %290, %294, !dbg !147
  %297 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %99, i1 %66, i32 0, i1 %66) #1, !dbg !148
  %298 = bitcast i32 %297 to float, !dbg !148
  %299 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %156, i1 %67, i32 0, i1 %67) #1, !dbg !148
  %300 = bitcast i32 %299 to float, !dbg !148
  %301 = fadd float %295, %298, !dbg !149
  %302 = fadd float %296, %300, !dbg !149
  %303 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %103, i1 %104, i32 0, i1 %104) #1, !dbg !150
  %304 = bitcast i32 %303 to float, !dbg !150
  %305 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %160, i1 %161, i32 0, i1 %161) #1, !dbg !150
  %306 = bitcast i32 %305 to float, !dbg !150
  %307 = fadd float %301, %304, !dbg !151
  %308 = fadd float %302, %306, !dbg !151
  %309 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %111, i1 %112, i32 0, i1 %112) #1, !dbg !152
  %310 = bitcast i32 %309 to float, !dbg !152
  %311 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %168, i1 %169, i32 0, i1 %169) #1, !dbg !152
  %312 = bitcast i32 %311 to float, !dbg !152
  %313 = fadd float %307, %310, !dbg !153
  %314 = fadd float %308, %312, !dbg !153
  %315 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %116, i1 %117, i32 0, i1 %117) #1, !dbg !154
  %316 = bitcast i32 %315 to float, !dbg !154
  %317 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %173, i1 %174, i32 0, i1 %174) #1, !dbg !154
  %318 = bitcast i32 %317 to float, !dbg !154
  %319 = fadd float %313, %316, !dbg !155
  %320 = fadd float %314, %318, !dbg !155
  %321 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %121, i1 %122, i32 0, i1 %122) #1, !dbg !156
  %322 = bitcast i32 %321 to float, !dbg !156
  %323 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %178, i1 %179, i32 0, i1 %179) #1, !dbg !156
  %324 = bitcast i32 %323 to float, !dbg !156
  %325 = fadd float %319, %322, !dbg !157
  %326 = fadd float %320, %324, !dbg !157
  %327 = add nsw <2 x i32> %186, %184, !dbg !83
  %328 = extractelement <2 x i32> %131, i64 0
  %reass.add = sub nsw i32 %328, %124
  %329 = extractelement <2 x i32> %131, i64 1
  %reass.mul = mul nsw i32 %reass.add, %329
  %reass.add6 = sub nsw i32 %124, %328
  %reass.mul7 = mul nsw i32 %reass.add6, %125
  %330 = add nsw i32 %reass.mul7, %reass.mul, !dbg !158
  %331 = extractelement <2 x i32> %327, i64 0
  %reass.add8 = sub nsw i32 %331, %180
  %332 = extractelement <2 x i32> %327, i64 1
  %reass.mul9 = mul nsw i32 %reass.add8, %332
  %reass.add10 = sub nsw i32 %180, %331
  %reass.mul11 = mul nsw i32 %reass.add10, %181
  %333 = add nsw i32 %reass.mul11, %reass.mul9, !dbg !158
  %334 = sitofp i32 %330 to float, !dbg !159
  %335 = sitofp i32 %333 to float, !dbg !159
  %336 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %325, float %334) #1, !dbg !159
  %337 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %326, float %335) #1, !dbg !159
  %338 = sext i32 %11 to i64, !dbg !160
  %339 = getelementptr float, ptr addrspace(1) %1, i64 %338, !dbg !160
  %340 = extractelement <2 x i32> %.v17, i64 0, !dbg !161
  %341 = select i1 %264, i32 %202, i32 %340, !dbg !162
  %342 = extractelement <2 x i32> %.v17, i64 1, !dbg !161
  %343 = select i1 %266, i32 %203, i32 %342, !dbg !162
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %341, i32 %343, ptr addrspace(1) %339, i1 %13) #1, !dbg !161
  %344 = getelementptr i8, ptr addrspace(1) %2, i64 %338, !dbg !163
  %345 = bitcast <2 x i8> %274 to i16, !dbg !164
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %345, ptr addrspace(1) %344, i1 %13) #1, !dbg !164
  %346 = getelementptr float, ptr addrspace(1) %3, i64 %338, !dbg !165
  %347 = bitcast float %336 to i32, !dbg !166
  %348 = bitcast float %337 to i32, !dbg !166
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %347, i32 %348, ptr addrspace(1) %346, i1 %13) #1, !dbg !166
  ret void, !dbg !167
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c5xktn7lq43e76dz6go5djfqecmsdr5t7ejareyr3xywblgkja7p.py", directory: "inductor_cache/5x")
!4 = !{ptr @triton_poi_fused_avg_pool2d_max_pool2d_with_indices_6, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_avg_pool2d_max_pool2d_with_indices_6, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_avg_pool2d_max_pool2d_with_indices_6", linkageName: "triton_poi_fused_avg_pool2d_max_pool2d_with_indices_6", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 39, column: 56, scope: !7)
!18 = !DILocation(line: 25, column: 19, scope: !7)
!19 = !DILocation(line: 39, column: 48, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 35, column: 19, scope: !7)
!22 = !DILocation(line: 122, column: 61, scope: !7)
!23 = !DILocation(line: 38, column: 19, scope: !7)
!24 = !DILocation(line: 39, column: 38, scope: !7)
!25 = !DILocation(line: 39, column: 45, scope: !7)
!26 = !DILocation(line: 39, column: 69, scope: !7)
!27 = !DILocation(line: 41, column: 21, scope: !7)
!28 = !DILocation(line: 44, column: 19, scope: !7)
!29 = !DILocation(line: 45, column: 45, scope: !7)
!30 = !DILocation(line: 45, column: 69, scope: !7)
!31 = !DILocation(line: 52, column: 45, scope: !7)
!32 = !DILocation(line: 70, column: 20, scope: !7)
!33 = !DILocation(line: 58, column: 20, scope: !7)
!34 = !DILocation(line: 59, column: 69, scope: !7)
!35 = !DILocation(line: 61, column: 20, scope: !7)
!36 = !DILocation(line: 62, column: 62, scope: !7)
!37 = !DILocation(line: 72, column: 42, scope: !7)
!38 = !DILocation(line: 75, column: 42, scope: !7)
!39 = !DILocation(line: 78, column: 42, scope: !7)
!40 = !DILocation(line: 34, column: 20, scope: !7)
!41 = !DILocation(line: 67, column: 16, scope: !7)
!42 = !DILocation(line: 28, column: 18, scope: !7)
!43 = !DILocation(line: 78, column: 50, scope: !7)
!44 = !DILocation(line: 34, column: 18, scope: !7)
!45 = !DILocation(line: 39, column: 53, scope: !7)
!46 = !DILocation(line: 39, column: 31, scope: !7)
!47 = !DILocation(line: 39, column: 61, scope: !7)
!48 = !DILocation(line: 45, column: 53, scope: !7)
!49 = !DILocation(line: 45, column: 31, scope: !7)
!50 = !DILocation(line: 47, column: 16, scope: !7)
!51 = !DILocation(line: 49, column: 20, scope: !7)
!52 = !DILocation(line: 50, column: 20, scope: !7)
!53 = !DILocation(line: 51, column: 19, scope: !7)
!54 = !DILocation(line: 52, column: 53, scope: !7)
!55 = !DILocation(line: 52, column: 31, scope: !7)
!56 = !DILocation(line: 52, column: 69, scope: !7)
!57 = !DILocation(line: 59, column: 53, scope: !7)
!58 = !DILocation(line: 59, column: 31, scope: !7)
!59 = !DILocation(line: 62, column: 46, scope: !7)
!60 = !DILocation(line: 62, column: 31, scope: !7)
!61 = !DILocation(line: 64, column: 20, scope: !7)
!62 = !DILocation(line: 65, column: 50, scope: !7)
!63 = !DILocation(line: 65, column: 31, scope: !7)
!64 = !DILocation(line: 65, column: 66, scope: !7)
!65 = !DILocation(line: 69, column: 20, scope: !7)
!66 = !DILocation(line: 71, column: 20, scope: !7)
!67 = !DILocation(line: 72, column: 50, scope: !7)
!68 = !DILocation(line: 72, column: 31, scope: !7)
!69 = !DILocation(line: 72, column: 66, scope: !7)
!70 = !DILocation(line: 74, column: 20, scope: !7)
!71 = !DILocation(line: 75, column: 50, scope: !7)
!72 = !DILocation(line: 75, column: 31, scope: !7)
!73 = !DILocation(line: 75, column: 66, scope: !7)
!74 = !DILocation(line: 77, column: 20, scope: !7)
!75 = !DILocation(line: 78, column: 31, scope: !7)
!76 = !DILocation(line: 78, column: 66, scope: !7)
!77 = !DILocation(line: 122, column: 132, scope: !7)
!78 = !DILocation(line: 122, column: 176, scope: !7)
!79 = !DILocation(line: 122, column: 172, scope: !7)
!80 = !DILocation(line: 122, column: 164, scope: !7)
!81 = !DILocation(line: 122, column: 213, scope: !7)
!82 = !DILocation(line: 122, column: 199, scope: !7)
!83 = !DILocation(line: 122, column: 185, scope: !7)
!84 = !DILocation(line: 45, column: 61, scope: !7)
!85 = !DILocation(line: 52, column: 61, scope: !7)
!86 = !DILocation(line: 59, column: 61, scope: !7)
!87 = !DILocation(line: 62, column: 54, scope: !7)
!88 = !DILocation(line: 65, column: 58, scope: !7)
!89 = !DILocation(line: 72, column: 58, scope: !7)
!90 = !DILocation(line: 75, column: 58, scope: !7)
!91 = !DILocation(line: 78, column: 58, scope: !7)
!92 = !DILocation(line: 118, column: 15, scope: !93, inlinedAt: !95)
!93 = distinct !DILexicalBlockFile(scope: !7, file: !94, discriminator: 0)
!94 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!95 = !DILocation(line: 46, column: 42, scope: !7)
!96 = !DILocation(line: 120, column: 21, scope: !93, inlinedAt: !95)
!97 = !DILocation(line: 120, column: 16, scope: !93, inlinedAt: !95)
!98 = !DILocation(line: 121, column: 29, scope: !93, inlinedAt: !95)
!99 = !DILocation(line: 118, column: 15, scope: !93, inlinedAt: !100)
!100 = !DILocation(line: 53, column: 42, scope: !7)
!101 = !DILocation(line: 120, column: 21, scope: !93, inlinedAt: !100)
!102 = !DILocation(line: 120, column: 16, scope: !93, inlinedAt: !100)
!103 = !DILocation(line: 121, column: 29, scope: !93, inlinedAt: !100)
!104 = !DILocation(line: 118, column: 15, scope: !93, inlinedAt: !105)
!105 = !DILocation(line: 60, column: 42, scope: !7)
!106 = !DILocation(line: 120, column: 21, scope: !93, inlinedAt: !105)
!107 = !DILocation(line: 120, column: 16, scope: !93, inlinedAt: !105)
!108 = !DILocation(line: 121, column: 29, scope: !93, inlinedAt: !105)
!109 = !DILocation(line: 118, column: 15, scope: !93, inlinedAt: !110)
!110 = !DILocation(line: 63, column: 42, scope: !7)
!111 = !DILocation(line: 120, column: 21, scope: !93, inlinedAt: !110)
!112 = !DILocation(line: 120, column: 16, scope: !93, inlinedAt: !110)
!113 = !DILocation(line: 121, column: 29, scope: !93, inlinedAt: !110)
!114 = !DILocation(line: 118, column: 15, scope: !93, inlinedAt: !115)
!115 = !DILocation(line: 66, column: 42, scope: !7)
!116 = !DILocation(line: 120, column: 21, scope: !93, inlinedAt: !115)
!117 = !DILocation(line: 120, column: 16, scope: !93, inlinedAt: !115)
!118 = !DILocation(line: 121, column: 29, scope: !93, inlinedAt: !115)
!119 = !DILocation(line: 118, column: 15, scope: !93, inlinedAt: !120)
!120 = !DILocation(line: 73, column: 42, scope: !7)
!121 = !DILocation(line: 120, column: 21, scope: !93, inlinedAt: !120)
!122 = !DILocation(line: 120, column: 16, scope: !93, inlinedAt: !120)
!123 = !DILocation(line: 121, column: 29, scope: !93, inlinedAt: !120)
!124 = !DILocation(line: 118, column: 15, scope: !93, inlinedAt: !125)
!125 = !DILocation(line: 76, column: 42, scope: !7)
!126 = !DILocation(line: 120, column: 21, scope: !93, inlinedAt: !125)
!127 = !DILocation(line: 120, column: 16, scope: !93, inlinedAt: !125)
!128 = !DILocation(line: 121, column: 29, scope: !93, inlinedAt: !125)
!129 = !DILocation(line: 118, column: 15, scope: !93, inlinedAt: !130)
!130 = !DILocation(line: 79, column: 42, scope: !7)
!131 = !DILocation(line: 120, column: 21, scope: !93, inlinedAt: !130)
!132 = !DILocation(line: 120, column: 16, scope: !93, inlinedAt: !130)
!133 = !DILocation(line: 83, column: 35, scope: !7)
!134 = !DILocation(line: 86, column: 35, scope: !7)
!135 = !DILocation(line: 89, column: 35, scope: !7)
!136 = !DILocation(line: 92, column: 35, scope: !7)
!137 = !DILocation(line: 95, column: 35, scope: !7)
!138 = !DILocation(line: 98, column: 35, scope: !7)
!139 = !DILocation(line: 101, column: 35, scope: !7)
!140 = !DILocation(line: 104, column: 35, scope: !7)
!141 = !DILocation(line: 105, column: 61, scope: !7)
!142 = !DILocation(line: 106, column: 61, scope: !7)
!143 = !DILocation(line: 107, column: 20, scope: !7)
!144 = !DILocation(line: 108, column: 61, scope: !7)
!145 = !DILocation(line: 109, column: 20, scope: !7)
!146 = !DILocation(line: 110, column: 61, scope: !7)
!147 = !DILocation(line: 111, column: 20, scope: !7)
!148 = !DILocation(line: 112, column: 54, scope: !7)
!149 = !DILocation(line: 113, column: 20, scope: !7)
!150 = !DILocation(line: 114, column: 58, scope: !7)
!151 = !DILocation(line: 115, column: 20, scope: !7)
!152 = !DILocation(line: 116, column: 58, scope: !7)
!153 = !DILocation(line: 117, column: 20, scope: !7)
!154 = !DILocation(line: 118, column: 58, scope: !7)
!155 = !DILocation(line: 119, column: 20, scope: !7)
!156 = !DILocation(line: 120, column: 58, scope: !7)
!157 = !DILocation(line: 121, column: 20, scope: !7)
!158 = !DILocation(line: 122, column: 425, scope: !7)
!159 = !DILocation(line: 123, column: 20, scope: !7)
!160 = !DILocation(line: 124, column: 25, scope: !7)
!161 = !DILocation(line: 124, column: 37, scope: !7)
!162 = !DILocation(line: 121, column: 29, scope: !93, inlinedAt: !130)
!163 = !DILocation(line: 125, column: 25, scope: !7)
!164 = !DILocation(line: 125, column: 37, scope: !7)
!165 = !DILocation(line: 126, column: 25, scope: !7)
!166 = !DILocation(line: 126, column: 37, scope: !7)
!167 = !DILocation(line: 126, column: 4, scope: !7)
