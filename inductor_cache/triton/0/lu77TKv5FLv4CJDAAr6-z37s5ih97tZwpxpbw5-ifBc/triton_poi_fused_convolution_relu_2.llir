; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_relu_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 8, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = and i32 %8, 1, !dbg !12
  %10 = shl i32 %8, 2, !dbg !12
  %11 = and i32 %10, 252, !dbg !12
  %12 = shl i32 %8, 1, !dbg !12
  %13 = and i32 %12, 254, !dbg !12
  %14 = lshr i32 %8, 1, !dbg !12
  %15 = and i32 %14, 63, !dbg !12
  %16 = or disjoint i32 %15, 64, !dbg !12
  %17 = or disjoint i32 %15, 128, !dbg !12
  %18 = or disjoint i32 %15, 192, !dbg !12
  %19 = or disjoint i32 %7, %11, !dbg !13
  %20 = or disjoint i32 %7, %13, !dbg !13
  %21 = or disjoint i32 %7, %15, !dbg !13
  %22 = or disjoint i32 %7, %16, !dbg !13
  %23 = or disjoint i32 %7, %17, !dbg !13
  %24 = or disjoint i32 %7, %18, !dbg !13
  %25 = icmp slt i32 %19, 256, !dbg !14
  %26 = icmp slt i32 %20, 256, !dbg !14
  %27 = icmp slt i32 %21, 256, !dbg !14
  %28 = icmp slt i32 %22, 256, !dbg !14
  %29 = icmp slt i32 %23, 256, !dbg !14
  %30 = icmp slt i32 %24, 256, !dbg !14
  %31 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %32 = shl i32 %31, 1, !dbg !16
  %33 = lshr i32 %8, 6, !dbg !17
  %.lobit = and i32 %33, 1, !dbg !17
  %34 = or disjoint i32 %32, %.lobit, !dbg !18
  %35 = or disjoint i32 %32, %9, !dbg !18
  %36 = icmp slt i32 %34, 225, !dbg !19
  %37 = icmp slt i32 %35, 225, !dbg !19
  %.frozen = freeze i32 %19, !dbg !20
  %38 = sdiv i32 %.frozen, 64, !dbg !20
  %39 = mul i32 %38, 64, !dbg !21
  %.decomposed = sub i32 %.frozen, %39, !dbg !21
  %40 = srem i32 %20, 64, !dbg !21
  %41 = shl i32 %34, 6, !dbg !22
  %42 = add i32 %41, %.decomposed, !dbg !23
  %43 = mul i32 %38, 14400, !dbg !24
  %44 = add i32 %42, %43, !dbg !25
  %45 = sext i32 %44 to i64, !dbg !26
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !26
  %47 = and i1 %25, %36, !dbg !27
  %48 = and i1 %27, %37, !dbg !27
  %49 = and i1 %28, %37, !dbg !27
  %50 = and i1 %29, %37, !dbg !27
  %51 = and i1 %30, %37, !dbg !27
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %46, i1 %47) #2, !dbg !28
  %53 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !28
  %54 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !28
  %55 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !28
  %56 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !28
  %57 = shl i32 %8, 3, !dbg !28
  %58 = and i32 %57, 504, !dbg !28
  %59 = or disjoint i32 %58, %.lobit, !dbg !28
  %60 = and i32 %8, 127, !dbg !28
  %61 = lshr exact i32 %58, 1, !dbg !28
  %62 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %61, !dbg !28
  %63 = getelementptr inbounds float, ptr addrspace(3) %62, i32 %59, !dbg !28
  %64 = insertelement <1 x i32> poison, i32 %53, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %63, <1 x i32> %64, i1 true) #2, !dbg !28
  %65 = or disjoint i32 %59, 2, !dbg !28
  %66 = lshr i32 %65, 1, !dbg !28
  %67 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %66, !dbg !28
  %68 = getelementptr inbounds float, ptr addrspace(3) %67, i32 %65, !dbg !28
  %69 = insertelement <1 x i32> poison, i32 %54, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %68, <1 x i32> %69, i1 true) #2, !dbg !28
  %70 = or disjoint i32 %59, 4, !dbg !28
  %71 = lshr i32 %70, 1, !dbg !28
  %72 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %71, !dbg !28
  %73 = getelementptr inbounds float, ptr addrspace(3) %72, i32 %70, !dbg !28
  %74 = insertelement <1 x i32> poison, i32 %55, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %73, <1 x i32> %74, i1 true) #2, !dbg !28
  %75 = or disjoint i32 %59, 6, !dbg !28
  %76 = lshr i32 %75, 1, !dbg !28
  %77 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %76, !dbg !28
  %78 = getelementptr inbounds float, ptr addrspace(3) %77, i32 %75, !dbg !28
  %79 = insertelement <1 x i32> poison, i32 %56, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %78, <1 x i32> %79, i1 true) #2, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %80 = lshr i32 %60, 1, !dbg !28
  %81 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %80, !dbg !28
  %82 = getelementptr inbounds float, ptr addrspace(3) %81, i32 %60, !dbg !28
  %83 = load float, ptr addrspace(3) %82, align 4, !dbg !28
  %84 = or disjoint i32 %60, 128, !dbg !28
  %85 = lshr i32 %84, 1, !dbg !28
  %86 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %85, !dbg !28
  %87 = getelementptr inbounds float, ptr addrspace(3) %86, i32 %84, !dbg !28
  %88 = load float, ptr addrspace(3) %87, align 4, !dbg !28
  %89 = or disjoint i32 %60, 256, !dbg !28
  %90 = lshr i32 %89, 1, !dbg !28
  %91 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %90, !dbg !28
  %92 = getelementptr inbounds float, ptr addrspace(3) %91, i32 %89, !dbg !28
  %93 = load float, ptr addrspace(3) %92, align 4, !dbg !28
  %94 = or disjoint i32 %60, 384, !dbg !28
  %95 = lshr i32 %94, 1, !dbg !28
  %96 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %95, !dbg !28
  %97 = getelementptr inbounds float, ptr addrspace(3) %96, i32 %94, !dbg !28
  %98 = load float, ptr addrspace(3) %97, align 4, !dbg !28
  %99 = sext i32 %40 to i64, !dbg !29
  %100 = getelementptr float, ptr addrspace(1) %1, i64 %99, !dbg !29
  %101 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %100, i1 %26) #2, !dbg !30
  %102 = extractvalue { i32, i32 } %101, 0, !dbg !30
  %103 = extractvalue { i32, i32 } %101, 1, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %.idx = shl nuw nsw i32 %13, 3, !dbg !31
  %104 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !31
  %105 = insertelement <1 x i32> poison, i32 %102, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %104, <1 x i32> %105, i1 true) #2, !dbg !31
  %106 = shl nuw nsw i32 %13, 1, !dbg !31
  %107 = or disjoint i32 %106, 2, !dbg !31
  %108 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %107, !dbg !31
  %109 = insertelement <1 x i32> poison, i32 %103, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %108, <1 x i32> %109, i1 true) #2, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %.idx4 = shl nuw nsw i32 %15, 3, !dbg !31
  %110 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx4, !dbg !31
  %111 = load float, ptr addrspace(3) %110, align 8, !dbg !31
  %.idx5 = shl nuw nsw i32 %16, 3, !dbg !31
  %112 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx5, !dbg !31
  %113 = load float, ptr addrspace(3) %112, align 8, !dbg !31
  %.idx6 = shl nuw nsw i32 %17, 3, !dbg !31
  %114 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx6, !dbg !31
  %115 = load float, ptr addrspace(3) %114, align 8, !dbg !31
  %.idx7 = shl nuw nsw i32 %18, 3, !dbg !31
  %116 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx7, !dbg !31
  %117 = load float, ptr addrspace(3) %116, align 8, !dbg !31
  %118 = fadd float %83, %111, !dbg !35
  %119 = fadd float %88, %113, !dbg !35
  %120 = fadd float %93, %115, !dbg !35
  %121 = fadd float %98, %117, !dbg !35
  %122 = fcmp olt float %118, 0.000000e+00, !dbg !36
  %123 = fcmp olt float %119, 0.000000e+00, !dbg !36
  %124 = fcmp olt float %120, 0.000000e+00, !dbg !36
  %125 = fcmp olt float %121, 0.000000e+00, !dbg !36
  %126 = select i1 %122, float 0.000000e+00, float %118, !dbg !31
  %127 = select i1 %123, float 0.000000e+00, float %119, !dbg !31
  %128 = select i1 %124, float 0.000000e+00, float %120, !dbg !31
  %129 = select i1 %125, float 0.000000e+00, float %121, !dbg !31
  %130 = mul i32 %21, 225, !dbg !37
  %131 = mul i32 %22, 225, !dbg !37
  %132 = mul i32 %23, 225, !dbg !37
  %133 = mul i32 %24, 225, !dbg !37
  %134 = add i32 %35, %130, !dbg !38
  %135 = add i32 %35, %131, !dbg !38
  %136 = add i32 %35, %132, !dbg !38
  %137 = add i32 %35, %133, !dbg !38
  %138 = sext i32 %134 to i64, !dbg !39
  %139 = getelementptr float, ptr addrspace(1) %2, i64 %138, !dbg !39
  %140 = sext i32 %135 to i64, !dbg !39
  %141 = getelementptr float, ptr addrspace(1) %2, i64 %140, !dbg !39
  %142 = sext i32 %136 to i64, !dbg !39
  %143 = getelementptr float, ptr addrspace(1) %2, i64 %142, !dbg !39
  %144 = sext i32 %137 to i64, !dbg !39
  %145 = getelementptr float, ptr addrspace(1) %2, i64 %144, !dbg !39
  %146 = bitcast float %126 to i32, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %146, ptr addrspace(1) %139, i1 %48) #2, !dbg !40
  %147 = bitcast float %127 to i32, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %147, ptr addrspace(1) %141, i1 %49) #2, !dbg !40
  %148 = bitcast float %128 to i32, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %148, ptr addrspace(1) %143, i1 %50) #2, !dbg !40
  %149 = bitcast float %129 to i32, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %149, ptr addrspace(1) %145, i1 %51) #2, !dbg !40
  ret void, !dbg !41
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cxmlycbhsncwmujypc5tym4lb4g6ejb6aftg33cgldfa4uw7amkv.py", directory: "inductor_cache/xm")
!4 = !{ptr @triton_poi_fused_convolution_relu_2, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_relu_2, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_relu_2", linkageName: "triton_poi_fused_convolution_relu_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 38, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 49, scope: !7)
!25 = !DILocation(line: 32, column: 43, scope: !7)
!26 = !DILocation(line: 32, column: 30, scope: !7)
!27 = !DILocation(line: 32, column: 62, scope: !7)
!28 = !DILocation(line: 32, column: 54, scope: !7)
!29 = !DILocation(line: 33, column: 30, scope: !7)
!30 = !DILocation(line: 33, column: 35, scope: !7)
!31 = !DILocation(line: 121, column: 29, scope: !32, inlinedAt: !34)
!32 = distinct !DILexicalBlockFile(scope: !7, file: !33, discriminator: 0)
!33 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!34 = !DILocation(line: 36, column: 40, scope: !7)
!35 = !DILocation(line: 34, column: 18, scope: !7)
!36 = !DILocation(line: 118, column: 15, scope: !32, inlinedAt: !34)
!37 = !DILocation(line: 37, column: 34, scope: !7)
!38 = !DILocation(line: 37, column: 30, scope: !7)
!39 = !DILocation(line: 37, column: 25, scope: !7)
!40 = !DILocation(line: 37, column: 45, scope: !7)
!41 = !DILocation(line: 37, column: 4, scope: !7)
