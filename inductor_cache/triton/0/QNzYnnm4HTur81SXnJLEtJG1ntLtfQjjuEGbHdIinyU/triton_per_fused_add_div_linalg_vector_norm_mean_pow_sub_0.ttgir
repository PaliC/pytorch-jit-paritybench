#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 2], order = [0, 1]}>
#loc = loc("inductor_cache/e6/ce65yh7wqr7zxbuqvhfncfwkthnza7cbuy33nkgbp7qx2vhncudo.py":19:0)
#loc1 = loc(unknown)
#loc13 = loc("inductor_cache/e6/ce65yh7wqr7zxbuqvhfncfwkthnza7cbuy33nkgbp7qx2vhncudo.py":35:24)
#loc18 = loc("inductor_cache/e6/ce65yh7wqr7zxbuqvhfncfwkthnza7cbuy33nkgbp7qx2vhncudo.py":39:25)
#loc22 = loc("inductor_cache/e6/ce65yh7wqr7zxbuqvhfncfwkthnza7cbuy33nkgbp7qx2vhncudo.py":43:26)
#loc33 = loc("inductor_cache/e6/ce65yh7wqr7zxbuqvhfncfwkthnza7cbuy33nkgbp7qx2vhncudo.py":55:26)
#loc45 = loc(callsite(#loc1 at #loc13))
#loc48 = loc(callsite(#loc1 at #loc18))
#loc50 = loc(callsite(#loc1 at #loc22))
#loc52 = loc(callsite(#loc1 at #loc33))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 2 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_per_fused_add_div_linalg_vector_norm_mean_pow_sub_0(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/e6/ce65yh7wqr7zxbuqvhfncfwkthnza7cbuy33nkgbp7qx2vhncudo.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/e6/ce65yh7wqr7zxbuqvhfncfwkthnza7cbuy33nkgbp7qx2vhncudo.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/e6/ce65yh7wqr7zxbuqvhfncfwkthnza7cbuy33nkgbp7qx2vhncudo.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/e6/ce65yh7wqr7zxbuqvhfncfwkthnza7cbuy33nkgbp7qx2vhncudo.py":19:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/e6/ce65yh7wqr7zxbuqvhfncfwkthnza7cbuy33nkgbp7qx2vhncudo.py":19:0), %arg5: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/e6/ce65yh7wqr7zxbuqvhfncfwkthnza7cbuy33nkgbp7qx2vhncudo.py":19:0)) attributes {noinline = false} {
    %c16_i32 = arith.constant 16 : i32 loc(#loc1)
    %cst = arith.constant dense<1.600000e+01> : tensor<1x1xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<9.99999997E-7> : tensor<1x1xf32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<0.000000e+00> : tensor<1x16xf32, #blocked> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.cmpi slt, %0, %c16_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc4)
    %3 = tt.expand_dims %2 {axis = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x16xi32, #blocked> loc(#loc4)
    %4 = arith.muli %0, %c16_i32 : i32 loc(#loc5)
    %5 = tt.splat %4 : i32 -> tensor<1x16xi32, #blocked> loc(#loc6)
    %6 = arith.addi %3, %5 : tensor<1x16xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %6 : tensor<1x16x!tt.ptr<f32>, #blocked>, tensor<1x16xi32, #blocked> loc(#loc7)
    %9 = tt.splat %1 : i1 -> tensor<1x16xi1, #blocked> loc(#loc8)
    %10 = tt.load %8, %9, %cst_1 : tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc8)
    %11 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc9)
    %12 = tt.addptr %11, %6 : tensor<1x16x!tt.ptr<f32>, #blocked>, tensor<1x16xi32, #blocked> loc(#loc9)
    %13 = tt.load %12, %9, %cst_1 : tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc10)
    %14 = arith.select %9, %10, %cst_1 : tensor<1x16xi1, #blocked>, tensor<1x16xf32, #blocked> loc(#loc11)
    %15 = "tt.reduce"(%14) <{axis = 1 : i32}> ({
    ^bb0(%arg6: f32 loc(callsite(#loc1 at #loc13)), %arg7: f32 loc(callsite(#loc1 at #loc13))):
      %45 = arith.addf %arg6, %arg7 : f32 loc(#loc53)
      tt.reduce.return %45 : f32 loc(#loc44)
    }) : (tensor<1x16xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc44)
    %16 = tt.expand_dims %15 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1x1xf32, #blocked> loc(#loc15)
    %17 = arith.mulf %13, %13 : tensor<1x16xf32, #blocked> loc(#loc16)
    %18 = arith.select %9, %17, %cst_1 : tensor<1x16xi1, #blocked>, tensor<1x16xf32, #blocked> loc(#loc17)
    %19 = "tt.reduce"(%18) <{axis = 1 : i32}> ({
    ^bb0(%arg6: f32 loc(callsite(#loc1 at #loc18)), %arg7: f32 loc(callsite(#loc1 at #loc18))):
      %45 = arith.addf %arg6, %arg7 : f32 loc(#loc54)
      tt.reduce.return %45 : f32 loc(#loc47)
    }) : (tensor<1x16xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc47)
    %20 = tt.expand_dims %19 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1x1xf32, #blocked> loc(#loc19)
    %21 = arith.mulf %10, %10 : tensor<1x16xf32, #blocked> loc(#loc20)
    %22 = arith.select %9, %21, %cst_1 : tensor<1x16xi1, #blocked>, tensor<1x16xf32, #blocked> loc(#loc21)
    %23 = "tt.reduce"(%22) <{axis = 1 : i32}> ({
    ^bb0(%arg6: f32 loc(callsite(#loc1 at #loc22)), %arg7: f32 loc(callsite(#loc1 at #loc22))):
      %45 = arith.addf %arg6, %arg7 : f32 loc(#loc55)
      tt.reduce.return %45 : f32 loc(#loc49)
    }) : (tensor<1x16xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc49)
    %24 = tt.expand_dims %23 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1x1xf32, #blocked> loc(#loc23)
    %25 = tt.extern_elementwise %20 {libname = "", libpath = "", pure = true, symbol = "__nv_sqrtf"} : (tensor<1x1xf32, #blocked>) -> tensor<1x1xf32, #blocked> loc(#loc24)
    %26 = arith.addf %25, %cst_0 : tensor<1x1xf32, #blocked> loc(#loc25)
    %27 = tt.broadcast %26 : tensor<1x1xf32, #blocked> -> tensor<1x16xf32, #blocked> loc(#loc26)
    %28 = arith.divf %13, %27 : tensor<1x16xf32, #blocked> loc(#loc26)
    %29 = tt.extern_elementwise %24 {libname = "", libpath = "", pure = true, symbol = "__nv_sqrtf"} : (tensor<1x1xf32, #blocked>) -> tensor<1x1xf32, #blocked> loc(#loc27)
    %30 = arith.addf %29, %cst_0 : tensor<1x1xf32, #blocked> loc(#loc28)
    %31 = tt.broadcast %30 : tensor<1x1xf32, #blocked> -> tensor<1x16xf32, #blocked> loc(#loc29)
    %32 = arith.divf %10, %31 : tensor<1x16xf32, #blocked> loc(#loc29)
    %33 = arith.subf %28, %32 : tensor<1x16xf32, #blocked> loc(#loc30)
    %34 = arith.mulf %33, %33 : tensor<1x16xf32, #blocked> loc(#loc31)
    %35 = arith.select %9, %34, %cst_1 : tensor<1x16xi1, #blocked>, tensor<1x16xf32, #blocked> loc(#loc32)
    %36 = "tt.reduce"(%35) <{axis = 1 : i32}> ({
    ^bb0(%arg6: f32 loc(callsite(#loc1 at #loc33)), %arg7: f32 loc(callsite(#loc1 at #loc33))):
      %45 = arith.addf %arg6, %arg7 : f32 loc(#loc56)
      tt.reduce.return %45 : f32 loc(#loc51)
    }) : (tensor<1x16xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc51)
    %37 = tt.expand_dims %36 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1x1xf32, #blocked> loc(#loc34)
    %38 = arith.divf %16, %cst : tensor<1x1xf32, #blocked> loc(#loc35)
    %39 = arith.divf %37, %cst : tensor<1x1xf32, #blocked> loc(#loc36)
    gpu.barrier loc(#loc37)
    %40 = tt.addptr %arg1, %0 : !tt.ptr<f32>, i32 loc(#loc38)
    %41 = tt.splat %40 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc39)
    %42 = tt.splat %1 : i1 -> tensor<1x1xi1, #blocked> loc(#loc39)
    tt.store %41, %38, %42 : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc39)
    gpu.barrier loc(#loc40)
    %43 = tt.addptr %arg0, %0 : !tt.ptr<f32>, i32 loc(#loc41)
    %44 = tt.splat %43 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc42)
    tt.store %44, %39, %42 : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc42)
    tt.return loc(#loc43)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/e6/ce65yh7wqr7zxbuqvhfncfwkthnza7cbuy33nkgbp7qx2vhncudo.py":23:28)
#loc3 = loc("inductor_cache/e6/ce65yh7wqr7zxbuqvhfncfwkthnza7cbuy33nkgbp7qx2vhncudo.py":25:21)
#loc4 = loc("inductor_cache/e6/ce65yh7wqr7zxbuqvhfncfwkthnza7cbuy33nkgbp7qx2vhncudo.py":26:34)
#loc5 = loc("inductor_cache/e6/ce65yh7wqr7zxbuqvhfncfwkthnza7cbuy33nkgbp7qx2vhncudo.py":31:38)
#loc6 = loc("inductor_cache/e6/ce65yh7wqr7zxbuqvhfncfwkthnza7cbuy33nkgbp7qx2vhncudo.py":31:35)
#loc7 = loc("inductor_cache/e6/ce65yh7wqr7zxbuqvhfncfwkthnza7cbuy33nkgbp7qx2vhncudo.py":31:30)
#loc8 = loc("inductor_cache/e6/ce65yh7wqr7zxbuqvhfncfwkthnza7cbuy33nkgbp7qx2vhncudo.py":31:43)
#loc9 = loc("inductor_cache/e6/ce65yh7wqr7zxbuqvhfncfwkthnza7cbuy33nkgbp7qx2vhncudo.py":32:30)
#loc10 = loc("inductor_cache/e6/ce65yh7wqr7zxbuqvhfncfwkthnza7cbuy33nkgbp7qx2vhncudo.py":32:43)
#loc11 = loc("inductor_cache/e6/ce65yh7wqr7zxbuqvhfncfwkthnza7cbuy33nkgbp7qx2vhncudo.py":34:33)
#loc12 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc14 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc15 = loc("inductor_cache/e6/ce65yh7wqr7zxbuqvhfncfwkthnza7cbuy33nkgbp7qx2vhncudo.py":35:27)
#loc16 = loc("inductor_cache/e6/ce65yh7wqr7zxbuqvhfncfwkthnza7cbuy33nkgbp7qx2vhncudo.py":36:18)
#loc17 = loc("inductor_cache/e6/ce65yh7wqr7zxbuqvhfncfwkthnza7cbuy33nkgbp7qx2vhncudo.py":38:33)
#loc19 = loc("inductor_cache/e6/ce65yh7wqr7zxbuqvhfncfwkthnza7cbuy33nkgbp7qx2vhncudo.py":39:28)
#loc20 = loc("inductor_cache/e6/ce65yh7wqr7zxbuqvhfncfwkthnza7cbuy33nkgbp7qx2vhncudo.py":40:19)
#loc21 = loc("inductor_cache/e6/ce65yh7wqr7zxbuqvhfncfwkthnza7cbuy33nkgbp7qx2vhncudo.py":42:35)
#loc23 = loc("inductor_cache/e6/ce65yh7wqr7zxbuqvhfncfwkthnza7cbuy33nkgbp7qx2vhncudo.py":43:29)
#loc24 = loc("inductor_cache/e6/ce65yh7wqr7zxbuqvhfncfwkthnza7cbuy33nkgbp7qx2vhncudo.py":44:27)
#loc25 = loc("inductor_cache/e6/ce65yh7wqr7zxbuqvhfncfwkthnza7cbuy33nkgbp7qx2vhncudo.py":46:20)
#loc26 = loc("inductor_cache/e6/ce65yh7wqr7zxbuqvhfncfwkthnza7cbuy33nkgbp7qx2vhncudo.py":47:19)
#loc27 = loc("inductor_cache/e6/ce65yh7wqr7zxbuqvhfncfwkthnza7cbuy33nkgbp7qx2vhncudo.py":48:27)
#loc28 = loc("inductor_cache/e6/ce65yh7wqr7zxbuqvhfncfwkthnza7cbuy33nkgbp7qx2vhncudo.py":49:20)
#loc29 = loc("inductor_cache/e6/ce65yh7wqr7zxbuqvhfncfwkthnza7cbuy33nkgbp7qx2vhncudo.py":50:19)
#loc30 = loc("inductor_cache/e6/ce65yh7wqr7zxbuqvhfncfwkthnza7cbuy33nkgbp7qx2vhncudo.py":51:20)
#loc31 = loc("inductor_cache/e6/ce65yh7wqr7zxbuqvhfncfwkthnza7cbuy33nkgbp7qx2vhncudo.py":52:20)
#loc32 = loc("inductor_cache/e6/ce65yh7wqr7zxbuqvhfncfwkthnza7cbuy33nkgbp7qx2vhncudo.py":54:35)
#loc34 = loc("inductor_cache/e6/ce65yh7wqr7zxbuqvhfncfwkthnza7cbuy33nkgbp7qx2vhncudo.py":55:29)
#loc35 = loc("inductor_cache/e6/ce65yh7wqr7zxbuqvhfncfwkthnza7cbuy33nkgbp7qx2vhncudo.py":57:19)
#loc36 = loc("inductor_cache/e6/ce65yh7wqr7zxbuqvhfncfwkthnza7cbuy33nkgbp7qx2vhncudo.py":58:20)
#loc37 = loc("inductor_cache/e6/ce65yh7wqr7zxbuqvhfncfwkthnza7cbuy33nkgbp7qx2vhncudo.py":59:4)
#loc38 = loc("inductor_cache/e6/ce65yh7wqr7zxbuqvhfncfwkthnza7cbuy33nkgbp7qx2vhncudo.py":60:28)
#loc39 = loc("inductor_cache/e6/ce65yh7wqr7zxbuqvhfncfwkthnza7cbuy33nkgbp7qx2vhncudo.py":60:40)
#loc40 = loc("inductor_cache/e6/ce65yh7wqr7zxbuqvhfncfwkthnza7cbuy33nkgbp7qx2vhncudo.py":61:4)
#loc41 = loc("inductor_cache/e6/ce65yh7wqr7zxbuqvhfncfwkthnza7cbuy33nkgbp7qx2vhncudo.py":62:28)
#loc42 = loc("inductor_cache/e6/ce65yh7wqr7zxbuqvhfncfwkthnza7cbuy33nkgbp7qx2vhncudo.py":62:40)
#loc43 = loc("inductor_cache/e6/ce65yh7wqr7zxbuqvhfncfwkthnza7cbuy33nkgbp7qx2vhncudo.py":62:4)
#loc44 = loc(callsite(#loc12 at #loc13))
#loc46 = loc(callsite(#loc14 at #loc12))
#loc47 = loc(callsite(#loc12 at #loc18))
#loc49 = loc(callsite(#loc12 at #loc22))
#loc51 = loc(callsite(#loc12 at #loc33))
#loc53 = loc(callsite(#loc46 at #loc13))
#loc54 = loc(callsite(#loc46 at #loc18))
#loc55 = loc(callsite(#loc46 at #loc22))
#loc56 = loc(callsite(#loc46 at #loc33))
