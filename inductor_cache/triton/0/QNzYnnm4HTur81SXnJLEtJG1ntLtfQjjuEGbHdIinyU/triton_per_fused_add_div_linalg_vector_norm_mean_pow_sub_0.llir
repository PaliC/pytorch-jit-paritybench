; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused_add_div_linalg_vector_norm_mean_pow_sub_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %8 = icmp slt i32 %7, 16, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = and i32 %9, 15, !dbg !12
  %11 = shl i32 %7, 4, !dbg !13
  %12 = or disjoint i32 %11, %10, !dbg !14
  %13 = sext i32 %12 to i64, !dbg !15
  %14 = getelementptr float, ptr addrspace(1) %2, i64 %13, !dbg !15
  %15 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %14, i1 %8, i32 0, i1 %8) #5, !dbg !16
  %16 = bitcast i32 %15 to float, !dbg !16
  %17 = getelementptr float, ptr addrspace(1) %3, i64 %13, !dbg !17
  %18 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %17, i1 %8, i32 0, i1 %8) #5, !dbg !18
  %19 = bitcast i32 %18 to float, !dbg !18
  %20 = select i1 %8, float %16, float 0.000000e+00, !dbg !19
  %21 = bitcast float %20 to i32, !dbg !20
  %22 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %21, i32 8, i32 31), !dbg !20
  %23 = bitcast i32 %22 to float, !dbg !20
  %24 = fadd float %20, %23, !dbg !24
  %25 = bitcast float %24 to i32, !dbg !20
  %26 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %25, i32 4, i32 31), !dbg !20
  %27 = bitcast i32 %26 to float, !dbg !20
  %28 = fadd float %24, %27, !dbg !24
  %29 = bitcast float %28 to i32, !dbg !20
  %30 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %29, i32 2, i32 31), !dbg !20
  %31 = bitcast i32 %30 to float, !dbg !20
  %32 = fadd float %28, %31, !dbg !24
  %33 = bitcast float %32 to i32, !dbg !20
  %34 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %33, i32 1, i32 31), !dbg !20
  %35 = fmul float %19, %19, !dbg !26
  %36 = select i1 %8, float %35, float 0.000000e+00, !dbg !27
  %37 = bitcast float %36 to i32, !dbg !28
  %38 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %37, i32 8, i32 31), !dbg !28
  %39 = bitcast i32 %38 to float, !dbg !28
  %40 = fadd float %36, %39, !dbg !30
  %41 = bitcast float %40 to i32, !dbg !28
  %42 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %41, i32 4, i32 31), !dbg !28
  %43 = bitcast i32 %42 to float, !dbg !28
  %44 = fadd float %40, %43, !dbg !30
  %45 = bitcast float %44 to i32, !dbg !28
  %46 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %45, i32 2, i32 31), !dbg !28
  %47 = bitcast i32 %46 to float, !dbg !28
  %48 = fadd float %44, %47, !dbg !30
  %49 = bitcast float %48 to i32, !dbg !28
  %50 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %49, i32 1, i32 31), !dbg !28
  %51 = bitcast i32 %50 to float, !dbg !28
  %52 = fadd float %48, %51, !dbg !30
  %53 = fmul float %16, %16, !dbg !31
  %54 = select i1 %8, float %53, float 0.000000e+00, !dbg !32
  %55 = bitcast float %54 to i32, !dbg !33
  %56 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %55, i32 8, i32 31), !dbg !33
  %57 = bitcast i32 %56 to float, !dbg !33
  %58 = fadd float %54, %57, !dbg !35
  %59 = bitcast float %58 to i32, !dbg !33
  %60 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %59, i32 4, i32 31), !dbg !33
  %61 = bitcast i32 %60 to float, !dbg !33
  %62 = fadd float %58, %61, !dbg !35
  %63 = bitcast float %62 to i32, !dbg !33
  %64 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %63, i32 2, i32 31), !dbg !33
  %65 = bitcast i32 %64 to float, !dbg !33
  %66 = fadd float %62, %65, !dbg !35
  %67 = bitcast float %66 to i32, !dbg !33
  %68 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %67, i32 1, i32 31), !dbg !33
  %69 = bitcast i32 %68 to float, !dbg !33
  %70 = fadd float %66, %69, !dbg !35
  %71 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !36
  %.not.i = icmp eq i32 %71, 0, !dbg !36
  %72 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !36
  %.not1.i = icmp eq i32 %72, 0, !dbg !36
  br i1 %.not.i, label %78, label %73, !dbg !36

73:                                               ; preds = %6
  br i1 %.not1.i, label %76, label %74, !dbg !36

74:                                               ; preds = %73
  %75 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %52) #5, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

76:                                               ; preds = %73
  %77 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %52) #5, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

78:                                               ; preds = %6
  br i1 %.not1.i, label %81, label %79, !dbg !36

79:                                               ; preds = %78
  %80 = tail call float @llvm.nvvm.sqrt.rn.f(float %52) #5, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

81:                                               ; preds = %78
  %82 = tail call float @llvm.nvvm.sqrt.approx.f(float %52) #5, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

__nv_sqrtf.exit:                                  ; preds = %74, %76, %79, %81
  %.0.i = phi float [ %75, %74 ], [ %77, %76 ], [ %80, %79 ], [ %82, %81 ], !dbg !36
  %83 = fadd float %.0.i, 0x3EB0C6F7A0000000, !dbg !37
  %84 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %19, float %83) #5, !dbg !38
  %85 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !39
  %.not.i1 = icmp eq i32 %85, 0, !dbg !39
  %86 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !39
  %.not1.i4 = icmp eq i32 %86, 0, !dbg !39
  br i1 %.not.i1, label %92, label %87, !dbg !39

87:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %90, label %88, !dbg !39

88:                                               ; preds = %87
  %89 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %70) #5, !dbg !39
  br label %__nv_sqrtf.exit5, !dbg !39

90:                                               ; preds = %87
  %91 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %70) #5, !dbg !39
  br label %__nv_sqrtf.exit5, !dbg !39

92:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %95, label %93, !dbg !39

93:                                               ; preds = %92
  %94 = tail call float @llvm.nvvm.sqrt.rn.f(float %70) #5, !dbg !39
  br label %__nv_sqrtf.exit5, !dbg !39

95:                                               ; preds = %92
  %96 = tail call float @llvm.nvvm.sqrt.approx.f(float %70) #5, !dbg !39
  br label %__nv_sqrtf.exit5, !dbg !39

__nv_sqrtf.exit5:                                 ; preds = %88, %90, %93, %95
  %.0.i3 = phi float [ %89, %88 ], [ %91, %90 ], [ %94, %93 ], [ %96, %95 ], !dbg !39
  %97 = bitcast i32 %34 to float, !dbg !20
  %98 = fadd float %32, %97, !dbg !24
  %99 = fadd float %.0.i3, 0x3EB0C6F7A0000000, !dbg !40
  %100 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %16, float %99) #5, !dbg !41
  %101 = fsub float %84, %100, !dbg !42
  %102 = fmul float %101, %101, !dbg !43
  %103 = select i1 %8, float %102, float 0.000000e+00, !dbg !44
  %104 = bitcast float %103 to i32, !dbg !45
  %105 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %104, i32 8, i32 31), !dbg !45
  %106 = bitcast i32 %105 to float, !dbg !45
  %107 = fadd float %103, %106, !dbg !47
  %108 = bitcast float %107 to i32, !dbg !45
  %109 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %108, i32 4, i32 31), !dbg !45
  %110 = bitcast i32 %109 to float, !dbg !45
  %111 = fadd float %107, %110, !dbg !47
  %112 = bitcast float %111 to i32, !dbg !45
  %113 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %112, i32 2, i32 31), !dbg !45
  %114 = bitcast i32 %113 to float, !dbg !45
  %115 = fadd float %111, %114, !dbg !47
  %116 = bitcast float %115 to i32, !dbg !45
  %117 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %116, i32 1, i32 31), !dbg !45
  %118 = bitcast i32 %117 to float, !dbg !45
  %119 = fadd float %115, %118, !dbg !47
  %120 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %98, float 1.600000e+01) #5, !dbg !48
  %121 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %119, float 1.600000e+01) #5, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %122 = sext i32 %7 to i64, !dbg !51
  %123 = getelementptr float, ptr addrspace(1) %1, i64 %122, !dbg !51
  %124 = and i32 %9, 63, !dbg !52
  %125 = icmp eq i32 %124, 0, !dbg !52
  %126 = bitcast float %120 to i32, !dbg !52
  %127 = and i1 %125, %8, !dbg !52
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %126, ptr addrspace(1) %123, i1 %127) #5, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %128 = getelementptr float, ptr addrspace(1) %0, i64 %122, !dbg !54
  %129 = bitcast float %121 to i32, !dbg !55
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %129, ptr addrspace(1) %128, i1 %127) #5, !dbg !55
  ret void, !dbg !56
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ce65yh7wqr7zxbuqvhfncfwkthnza7cbuy33nkgbp7qx2vhncudo.py", directory: "inductor_cache/e6")
!4 = !{ptr @triton_per_fused_add_div_linalg_vector_norm_mean_pow_sub_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_div_linalg_vector_norm_mean_pow_sub_0, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_div_linalg_vector_norm_mean_pow_sub_0", linkageName: "triton_per_fused_add_div_linalg_vector_norm_mean_pow_sub_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 21, scope: !7)
!12 = !DILocation(line: 26, column: 34, scope: !7)
!13 = !DILocation(line: 31, column: 38, scope: !7)
!14 = !DILocation(line: 31, column: 35, scope: !7)
!15 = !DILocation(line: 31, column: 30, scope: !7)
!16 = !DILocation(line: 31, column: 43, scope: !7)
!17 = !DILocation(line: 32, column: 30, scope: !7)
!18 = !DILocation(line: 32, column: 43, scope: !7)
!19 = !DILocation(line: 34, column: 33, scope: !7)
!20 = !DILocation(line: 267, column: 36, scope: !21, inlinedAt: !23)
!21 = distinct !DILexicalBlockFile(scope: !7, file: !22, discriminator: 0)
!22 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!23 = !DILocation(line: 35, column: 24, scope: !7)
!24 = !DILocation(line: 256, column: 15, scope: !25, inlinedAt: !23)
!25 = distinct !DILexicalBlockFile(scope: !21, file: !22, discriminator: 0)
!26 = !DILocation(line: 36, column: 18, scope: !7)
!27 = !DILocation(line: 38, column: 33, scope: !7)
!28 = !DILocation(line: 267, column: 36, scope: !21, inlinedAt: !29)
!29 = !DILocation(line: 39, column: 25, scope: !7)
!30 = !DILocation(line: 256, column: 15, scope: !25, inlinedAt: !29)
!31 = !DILocation(line: 40, column: 19, scope: !7)
!32 = !DILocation(line: 42, column: 35, scope: !7)
!33 = !DILocation(line: 267, column: 36, scope: !21, inlinedAt: !34)
!34 = !DILocation(line: 43, column: 26, scope: !7)
!35 = !DILocation(line: 256, column: 15, scope: !25, inlinedAt: !34)
!36 = !DILocation(line: 44, column: 27, scope: !7)
!37 = !DILocation(line: 46, column: 20, scope: !7)
!38 = !DILocation(line: 47, column: 19, scope: !7)
!39 = !DILocation(line: 48, column: 27, scope: !7)
!40 = !DILocation(line: 49, column: 20, scope: !7)
!41 = !DILocation(line: 50, column: 19, scope: !7)
!42 = !DILocation(line: 51, column: 20, scope: !7)
!43 = !DILocation(line: 52, column: 20, scope: !7)
!44 = !DILocation(line: 54, column: 35, scope: !7)
!45 = !DILocation(line: 267, column: 36, scope: !21, inlinedAt: !46)
!46 = !DILocation(line: 55, column: 26, scope: !7)
!47 = !DILocation(line: 256, column: 15, scope: !25, inlinedAt: !46)
!48 = !DILocation(line: 57, column: 19, scope: !7)
!49 = !DILocation(line: 58, column: 20, scope: !7)
!50 = !DILocation(line: 59, column: 4, scope: !7)
!51 = !DILocation(line: 60, column: 28, scope: !7)
!52 = !DILocation(line: 60, column: 40, scope: !7)
!53 = !DILocation(line: 61, column: 4, scope: !7)
!54 = !DILocation(line: 62, column: 28, scope: !7)
!55 = !DILocation(line: 62, column: 40, scope: !7)
!56 = !DILocation(line: 62, column: 4, scope: !7)
