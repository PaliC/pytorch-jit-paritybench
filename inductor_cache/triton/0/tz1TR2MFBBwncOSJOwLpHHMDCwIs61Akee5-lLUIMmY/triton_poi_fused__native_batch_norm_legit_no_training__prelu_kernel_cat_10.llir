; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_cat_10(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, i32 %10) local_unnamed_addr !dbg !7 {
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %13 = shl i32 %12, 9, !dbg !11
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %15 = shl i32 %14, 2, !dbg !12
  %16 = and i32 %15, 508, !dbg !12
  %17 = or disjoint i32 %13, %16, !dbg !13
  %18 = or disjoint i32 %17, 1, !dbg !13
  %19 = or disjoint i32 %17, 2, !dbg !13
  %20 = or disjoint i32 %17, 3, !dbg !13
  %21 = insertelement <4 x i32> poison, i32 %20, i64 0, !dbg !14
  %22 = insertelement <4 x i32> %21, i32 %19, i64 1, !dbg !14
  %23 = insertelement <4 x i32> %22, i32 %18, i64 2, !dbg !14
  %24 = insertelement <4 x i32> %23, i32 %17, i64 3, !dbg !14
  %25 = srem <4 x i32> %24, splat (i32 16), !dbg !14
  %26 = sdiv i32 %17, 16, !dbg !15
  %27 = sdiv i32 %17, 16384, !dbg !16
  %28 = srem i32 %26, 1024, !dbg !17
  %29 = extractelement <4 x i32> %25, i64 3, !dbg !18
  %30 = sext i32 %29 to i64, !dbg !19
  %31 = getelementptr float, ptr addrspace(1) %4, i64 %30, !dbg !19
  %32 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %31, i1 true) #3, !dbg !20
  %33 = getelementptr float, ptr addrspace(1) %5, i64 %30, !dbg !21
  %34 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %33, i1 true) #3, !dbg !22
  %35 = extractvalue { i32, i32, i32, i32 } %34, 0, !dbg !22
  %36 = extractvalue { i32, i32, i32, i32 } %34, 1, !dbg !22
  %37 = extractvalue { i32, i32, i32, i32 } %34, 2, !dbg !22
  %38 = extractvalue { i32, i32, i32, i32 } %34, 3, !dbg !22
  %39 = bitcast i32 %35 to float, !dbg !22
  %40 = bitcast i32 %36 to float, !dbg !22
  %41 = bitcast i32 %37 to float, !dbg !22
  %42 = bitcast i32 %38 to float, !dbg !22
  %43 = getelementptr float, ptr addrspace(1) %6, i64 %30, !dbg !23
  %44 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %43, i1 true) #3, !dbg !24
  %45 = getelementptr float, ptr addrspace(1) %7, i64 %30, !dbg !25
  %46 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %45, i1 true) #3, !dbg !26
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %8, i1 true) #3, !dbg !27
  %48 = icmp slt <4 x i32> %25, splat (i32 13), !dbg !28
  %49 = mul nsw i32 %26, 13, !dbg !29
  %50 = add nsw i32 %49, %29, !dbg !30
  %51 = extractelement <4 x i32> %25, i64 2, !dbg !18
  %52 = add nsw i32 %49, %51, !dbg !30
  %53 = extractelement <4 x i32> %25, i64 1, !dbg !18
  %54 = add nsw i32 %49, %53, !dbg !30
  %55 = extractelement <4 x i32> %25, i64 0, !dbg !18
  %56 = add nsw i32 %49, %55, !dbg !30
  %57 = sext i32 %50 to i64, !dbg !31
  %58 = getelementptr float, ptr addrspace(1) %1, i64 %57, !dbg !31
  %59 = sext i32 %52 to i64, !dbg !31
  %60 = getelementptr float, ptr addrspace(1) %1, i64 %59, !dbg !31
  %61 = sext i32 %54 to i64, !dbg !31
  %62 = getelementptr float, ptr addrspace(1) %1, i64 %61, !dbg !31
  %63 = sext i32 %56 to i64, !dbg !31
  %64 = getelementptr float, ptr addrspace(1) %1, i64 %63, !dbg !31
  %65 = extractelement <4 x i1> %48, i64 3, !dbg !32
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %58, i1 %65, i32 0, i1 %65) #3, !dbg !32
  %67 = extractelement <4 x i1> %48, i64 2, !dbg !32
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %60, i1 %67, i32 0, i1 %67) #3, !dbg !32
  %69 = extractelement <4 x i1> %48, i64 1, !dbg !32
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %62, i1 %69, i32 0, i1 %69) #3, !dbg !32
  %71 = extractelement <4 x i1> %48, i64 0, !dbg !32
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %64, i1 %71, i32 0, i1 %71) #3, !dbg !32
  %73 = icmp sgt i32 %29, 12, !dbg !33
  %74 = icmp sgt i32 %51, 12, !dbg !33
  %75 = icmp sgt i32 %53, 12, !dbg !33
  %76 = icmp sgt i32 %55, 12, !dbg !33
  %77 = shl nsw i32 %29, 10, !dbg !18
  %78 = shl nsw i32 %51, 10, !dbg !18
  %79 = shl nsw i32 %53, 10, !dbg !18
  %80 = shl nsw i32 %55, 10, !dbg !18
  %81 = mul nsw i32 %27, 3072, !dbg !34
  %82 = add nsw i32 %28, -13312, !dbg !18
  %83 = add nsw i32 %82, %77, !dbg !35
  %84 = add nsw i32 %83, %81, !dbg !36
  %85 = add nsw i32 %82, %78, !dbg !35
  %86 = add nsw i32 %85, %81, !dbg !36
  %87 = add nsw i32 %82, %79, !dbg !35
  %88 = add nsw i32 %87, %81, !dbg !36
  %89 = add nsw i32 %82, %80, !dbg !35
  %90 = add nsw i32 %89, %81, !dbg !36
  %91 = sext i32 %84 to i64, !dbg !37
  %92 = getelementptr float, ptr addrspace(1) %2, i64 %91, !dbg !37
  %93 = sext i32 %86 to i64, !dbg !37
  %94 = getelementptr float, ptr addrspace(1) %2, i64 %93, !dbg !37
  %95 = sext i32 %88 to i64, !dbg !37
  %96 = getelementptr float, ptr addrspace(1) %2, i64 %95, !dbg !37
  %97 = sext i32 %90 to i64, !dbg !37
  %98 = getelementptr float, ptr addrspace(1) %2, i64 %97, !dbg !37
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %92, i1 %73, i32 0, i1 %73) #3, !dbg !38
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %94, i1 %74, i32 0, i1 %74) #3, !dbg !38
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %96, i1 %75, i32 0, i1 %75) #3, !dbg !38
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %98, i1 %76, i32 0, i1 %76) #3, !dbg !38
  %103 = getelementptr float, ptr addrspace(1) %3, i64 %91, !dbg !39
  %104 = getelementptr float, ptr addrspace(1) %3, i64 %93, !dbg !39
  %105 = getelementptr float, ptr addrspace(1) %3, i64 %95, !dbg !39
  %106 = getelementptr float, ptr addrspace(1) %3, i64 %97, !dbg !39
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %103, i1 %73, i32 0, i1 %73) #3, !dbg !40
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %104, i1 %74, i32 0, i1 %74) #3, !dbg !40
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %105, i1 %75, i32 0, i1 %75) #3, !dbg !40
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %106, i1 %76, i32 0, i1 %76) #3, !dbg !40
  %111 = fadd float %39, 0x3EE4F8B580000000, !dbg !41
  %112 = fadd float %40, 0x3EE4F8B580000000, !dbg !41
  %113 = fadd float %41, 0x3EE4F8B580000000, !dbg !41
  %114 = fadd float %42, 0x3EE4F8B580000000, !dbg !41
  %115 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !42
  %.not.i = icmp eq i32 %115, 0, !dbg !42
  %116 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !42
  %.not1.i = icmp eq i32 %116, 0, !dbg !42
  br i1 %.not.i, label %122, label %117, !dbg !42

117:                                              ; preds = %11
  br i1 %.not1.i, label %120, label %118, !dbg !42

118:                                              ; preds = %117
  %119 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %111) #3, !dbg !42
  br label %__nv_sqrtf.exit, !dbg !42

120:                                              ; preds = %117
  %121 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %111) #3, !dbg !42
  br label %__nv_sqrtf.exit, !dbg !42

122:                                              ; preds = %11
  br i1 %.not1.i, label %125, label %123, !dbg !42

123:                                              ; preds = %122
  %124 = tail call float @llvm.nvvm.sqrt.rn.f(float %111) #3, !dbg !42
  br label %__nv_sqrtf.exit, !dbg !42

125:                                              ; preds = %122
  %126 = tail call float @llvm.nvvm.sqrt.approx.f(float %111) #3, !dbg !42
  br label %__nv_sqrtf.exit, !dbg !42

__nv_sqrtf.exit:                                  ; preds = %118, %120, %123, %125
  %.0.i = phi float [ %119, %118 ], [ %121, %120 ], [ %124, %123 ], [ %126, %125 ], !dbg !42
  %127 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !42
  %.not.i1 = icmp eq i32 %127, 0, !dbg !42
  %128 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !42
  %.not1.i4 = icmp eq i32 %128, 0, !dbg !42
  br i1 %.not.i1, label %134, label %129, !dbg !42

129:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %132, label %130, !dbg !42

130:                                              ; preds = %129
  %131 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %112) #3, !dbg !42
  br label %__nv_sqrtf.exit5, !dbg !42

132:                                              ; preds = %129
  %133 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %112) #3, !dbg !42
  br label %__nv_sqrtf.exit5, !dbg !42

134:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %137, label %135, !dbg !42

135:                                              ; preds = %134
  %136 = tail call float @llvm.nvvm.sqrt.rn.f(float %112) #3, !dbg !42
  br label %__nv_sqrtf.exit5, !dbg !42

137:                                              ; preds = %134
  %138 = tail call float @llvm.nvvm.sqrt.approx.f(float %112) #3, !dbg !42
  br label %__nv_sqrtf.exit5, !dbg !42

__nv_sqrtf.exit5:                                 ; preds = %130, %132, %135, %137
  %.0.i3 = phi float [ %131, %130 ], [ %133, %132 ], [ %136, %135 ], [ %138, %137 ], !dbg !42
  %139 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !42
  %.not.i6 = icmp eq i32 %139, 0, !dbg !42
  %140 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !42
  %.not1.i9 = icmp eq i32 %140, 0, !dbg !42
  br i1 %.not.i6, label %146, label %141, !dbg !42

141:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %144, label %142, !dbg !42

142:                                              ; preds = %141
  %143 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %113) #3, !dbg !42
  br label %__nv_sqrtf.exit10, !dbg !42

144:                                              ; preds = %141
  %145 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %113) #3, !dbg !42
  br label %__nv_sqrtf.exit10, !dbg !42

146:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %149, label %147, !dbg !42

147:                                              ; preds = %146
  %148 = tail call float @llvm.nvvm.sqrt.rn.f(float %113) #3, !dbg !42
  br label %__nv_sqrtf.exit10, !dbg !42

149:                                              ; preds = %146
  %150 = tail call float @llvm.nvvm.sqrt.approx.f(float %113) #3, !dbg !42
  br label %__nv_sqrtf.exit10, !dbg !42

__nv_sqrtf.exit10:                                ; preds = %142, %144, %147, %149
  %.0.i8 = phi float [ %143, %142 ], [ %145, %144 ], [ %148, %147 ], [ %150, %149 ], !dbg !42
  %151 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !42
  %.not.i11 = icmp eq i32 %151, 0, !dbg !42
  %152 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !42
  %.not1.i14 = icmp eq i32 %152, 0, !dbg !42
  br i1 %.not.i11, label %158, label %153, !dbg !42

153:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %156, label %154, !dbg !42

154:                                              ; preds = %153
  %155 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %114) #3, !dbg !42
  br label %__nv_sqrtf.exit15, !dbg !42

156:                                              ; preds = %153
  %157 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %114) #3, !dbg !42
  br label %__nv_sqrtf.exit15, !dbg !42

158:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %161, label %159, !dbg !42

159:                                              ; preds = %158
  %160 = tail call float @llvm.nvvm.sqrt.rn.f(float %114) #3, !dbg !42
  br label %__nv_sqrtf.exit15, !dbg !42

161:                                              ; preds = %158
  %162 = tail call float @llvm.nvvm.sqrt.approx.f(float %114) #3, !dbg !42
  br label %__nv_sqrtf.exit15, !dbg !42

__nv_sqrtf.exit15:                                ; preds = %154, %156, %159, %161
  %.0.i13 = phi float [ %155, %154 ], [ %157, %156 ], [ %160, %159 ], [ %162, %161 ], !dbg !42
  %163 = insertelement <4 x i32> poison, i32 %72, i64 0, !dbg !32
  %164 = insertelement <4 x i32> %163, i32 %70, i64 1, !dbg !32
  %165 = insertelement <4 x i32> %164, i32 %68, i64 2, !dbg !32
  %166 = insertelement <4 x i32> %165, i32 %66, i64 3, !dbg !32
  %167 = bitcast <4 x i32> %166 to <4 x float>, !dbg !32
  %168 = insertelement <4 x i32> poison, i32 %110, i64 0, !dbg !40
  %169 = insertelement <4 x i32> %168, i32 %109, i64 1, !dbg !40
  %170 = insertelement <4 x i32> %169, i32 %108, i64 2, !dbg !40
  %171 = insertelement <4 x i32> %170, i32 %107, i64 3, !dbg !40
  %172 = bitcast <4 x i32> %171 to <4 x float>, !dbg !40
  %173 = insertelement <4 x i32> poison, i32 %102, i64 0, !dbg !38
  %174 = insertelement <4 x i32> %173, i32 %101, i64 1, !dbg !38
  %175 = insertelement <4 x i32> %174, i32 %100, i64 2, !dbg !38
  %176 = insertelement <4 x i32> %175, i32 %99, i64 3, !dbg !38
  %177 = bitcast <4 x i32> %176 to <4 x float>, !dbg !38
  %178 = sdiv i32 %17, 512, !dbg !43
  %179 = srem i32 %178, 32, !dbg !44
  %180 = sitofp i32 %179 to float, !dbg !45
  %181 = fadd float %180, 5.000000e-01, !dbg !46
  %182 = fadd float %181, -5.000000e-01, !dbg !47
  %183 = fcmp ogt float %182, 0.000000e+00, !dbg !48
  %184 = select i1 %183, float %182, float 0.000000e+00, !dbg !52
  %185 = fptosi float %184 to i32, !dbg !53
  %186 = sitofp i32 %185 to float, !dbg !54
  %187 = fsub float %184, %186, !dbg !55
  %188 = fcmp ogt float %187, 0.000000e+00, !dbg !56
  %189 = select i1 %188, float %187, float 0.000000e+00, !dbg !58
  %190 = fcmp olt float %189, 1.000000e+00, !dbg !59
  %191 = select i1 %190, float %189, float 1.000000e+00, !dbg !61
  %192 = extractvalue { i32, i32, i32, i32 } %32, 3, !dbg !20
  %193 = extractvalue { i32, i32, i32, i32 } %32, 2, !dbg !20
  %194 = extractvalue { i32, i32, i32, i32 } %32, 1, !dbg !20
  %195 = extractvalue { i32, i32, i32, i32 } %32, 0, !dbg !20
  %196 = bitcast i32 %47 to float, !dbg !27
  %197 = extractvalue { i32, i32, i32, i32 } %46, 3, !dbg !26
  %198 = extractvalue { i32, i32, i32, i32 } %46, 2, !dbg !26
  %199 = extractvalue { i32, i32, i32, i32 } %46, 1, !dbg !26
  %200 = extractvalue { i32, i32, i32, i32 } %46, 0, !dbg !26
  %201 = extractvalue { i32, i32, i32, i32 } %44, 3, !dbg !24
  %202 = extractvalue { i32, i32, i32, i32 } %44, 2, !dbg !24
  %203 = extractvalue { i32, i32, i32, i32 } %44, 1, !dbg !24
  %204 = extractvalue { i32, i32, i32, i32 } %44, 0, !dbg !24
  %205 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !62
  %206 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !62
  %207 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !62
  %208 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !62
  %209 = fsub <4 x float> %172, %177, !dbg !63
  %210 = insertelement <4 x float> poison, float %191, i64 0, !dbg !64
  %211 = shufflevector <4 x float> %210, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !64
  %212 = fmul <4 x float> %209, %211, !dbg !64
  %213 = fadd <4 x float> %212, %177, !dbg !65
  %214 = select <4 x i1> %48, <4 x float> %167, <4 x float> %213, !dbg !66
  %215 = insertelement <4 x i32> poison, i32 %192, i64 0, !dbg !20
  %216 = insertelement <4 x i32> %215, i32 %193, i64 1, !dbg !20
  %217 = insertelement <4 x i32> %216, i32 %194, i64 2, !dbg !20
  %218 = insertelement <4 x i32> %217, i32 %195, i64 3, !dbg !20
  %219 = bitcast <4 x i32> %218 to <4 x float>, !dbg !20
  %220 = fsub <4 x float> %214, %219, !dbg !67
  %221 = insertelement <4 x i32> poison, i32 %197, i64 0, !dbg !26
  %222 = insertelement <4 x i32> %221, i32 %198, i64 1, !dbg !26
  %223 = insertelement <4 x i32> %222, i32 %199, i64 2, !dbg !26
  %224 = insertelement <4 x i32> %223, i32 %200, i64 3, !dbg !26
  %225 = bitcast <4 x i32> %224 to <4 x float>, !dbg !26
  %226 = insertelement <4 x i32> poison, i32 %201, i64 0, !dbg !24
  %227 = insertelement <4 x i32> %226, i32 %202, i64 1, !dbg !24
  %228 = insertelement <4 x i32> %227, i32 %203, i64 2, !dbg !24
  %229 = insertelement <4 x i32> %228, i32 %204, i64 3, !dbg !24
  %230 = bitcast <4 x i32> %229 to <4 x float>, !dbg !24
  %231 = insertelement <4 x float> poison, float %208, i64 0, !dbg !68
  %232 = insertelement <4 x float> %231, float %207, i64 1, !dbg !68
  %233 = insertelement <4 x float> %232, float %206, i64 2, !dbg !68
  %234 = insertelement <4 x float> %233, float %205, i64 3, !dbg !68
  %235 = fmul <4 x float> %220, %234, !dbg !68
  %236 = fmul <4 x float> %235, %230, !dbg !69
  %237 = fadd <4 x float> %236, %225, !dbg !70
  %238 = fcmp ogt <4 x float> %237, zeroinitializer, !dbg !71
  %239 = extractelement <4 x float> %237, i64 3, !dbg !72
  %240 = fmul float %239, %196, !dbg !73
  %241 = extractelement <4 x float> %237, i64 2, !dbg !72
  %242 = fmul float %241, %196, !dbg !73
  %243 = extractelement <4 x float> %237, i64 1, !dbg !72
  %244 = fmul float %243, %196, !dbg !73
  %245 = extractelement <4 x float> %237, i64 0, !dbg !72
  %246 = fmul float %245, %196, !dbg !73
  %247 = extractelement <4 x i1> %238, i64 3, !dbg !72
  %248 = select i1 %247, float %239, float %240, !dbg !72
  %249 = extractelement <4 x i1> %238, i64 2, !dbg !72
  %250 = select i1 %249, float %241, float %242, !dbg !72
  %251 = extractelement <4 x i1> %238, i64 1, !dbg !72
  %252 = select i1 %251, float %243, float %244, !dbg !72
  %253 = extractelement <4 x i1> %238, i64 0, !dbg !72
  %254 = select i1 %253, float %245, float %246, !dbg !72
  %255 = sext i32 %17 to i64, !dbg !74
  %256 = getelementptr float, ptr addrspace(1) %9, i64 %255, !dbg !74
  %bc = bitcast <4 x float> %214 to <4 x i32>, !dbg !75
  %257 = extractelement <4 x i32> %bc, i64 3, !dbg !75
  %bc16 = bitcast <4 x float> %214 to <4 x i32>, !dbg !75
  %258 = extractelement <4 x i32> %bc16, i64 2, !dbg !75
  %bc17 = bitcast <4 x float> %214 to <4 x i32>, !dbg !75
  %259 = extractelement <4 x i32> %bc17, i64 1, !dbg !75
  %bc18 = bitcast <4 x float> %214 to <4 x i32>, !dbg !75
  %260 = extractelement <4 x i32> %bc18, i64 0, !dbg !75
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %257, i32 %258, i32 %259, i32 %260, ptr addrspace(1) %256, i1 true) #3, !dbg !75
  %261 = getelementptr float, ptr addrspace(1) %0, i64 %255, !dbg !76
  %262 = bitcast float %248 to i32, !dbg !77
  %263 = bitcast float %250 to i32, !dbg !77
  %264 = bitcast float %252 to i32, !dbg !77
  %265 = bitcast float %254 to i32, !dbg !77
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %262, i32 %263, i32 %264, i32 %265, ptr addrspace(1) %261, i1 true) #3, !dbg !77
  ret void, !dbg !78
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cpbubi2oejliuymqamkkz7enj75w25fcm3h7vkk6iwk65jcbvazb.py", directory: "inductor_cache/pb")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_cat_10, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_cat_10, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_cat_10", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_cat_10", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 19, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 27, column: 27, scope: !7)
!18 = !DILocation(line: 45, column: 41, scope: !7)
!19 = !DILocation(line: 30, column: 31, scope: !7)
!20 = !DILocation(line: 30, column: 36, scope: !7)
!21 = !DILocation(line: 31, column: 31, scope: !7)
!22 = !DILocation(line: 31, column: 36, scope: !7)
!23 = !DILocation(line: 32, column: 31, scope: !7)
!24 = !DILocation(line: 32, column: 36, scope: !7)
!25 = !DILocation(line: 33, column: 31, scope: !7)
!26 = !DILocation(line: 33, column: 36, scope: !7)
!27 = !DILocation(line: 34, column: 20, scope: !7)
!28 = !DILocation(line: 40, column: 18, scope: !7)
!29 = !DILocation(line: 41, column: 33, scope: !7)
!30 = !DILocation(line: 41, column: 39, scope: !7)
!31 = !DILocation(line: 41, column: 30, scope: !7)
!32 = !DILocation(line: 41, column: 45, scope: !7)
!33 = !DILocation(line: 42, column: 19, scope: !7)
!34 = !DILocation(line: 45, column: 60, scope: !7)
!35 = !DILocation(line: 45, column: 35, scope: !7)
!36 = !DILocation(line: 45, column: 55, scope: !7)
!37 = !DILocation(line: 45, column: 30, scope: !7)
!38 = !DILocation(line: 45, column: 65, scope: !7)
!39 = !DILocation(line: 46, column: 31, scope: !7)
!40 = !DILocation(line: 46, column: 66, scope: !7)
!41 = !DILocation(line: 69, column: 20, scope: !7)
!42 = !DILocation(line: 70, column: 27, scope: !7)
!43 = !DILocation(line: 28, column: 21, scope: !7)
!44 = !DILocation(line: 28, column: 28, scope: !7)
!45 = !DILocation(line: 49, column: 21, scope: !7)
!46 = !DILocation(line: 51, column: 20, scope: !7)
!47 = !DILocation(line: 54, column: 20, scope: !7)
!48 = !DILocation(line: 118, column: 15, scope: !49, inlinedAt: !51)
!49 = distinct !DILexicalBlockFile(scope: !7, file: !50, discriminator: 0)
!50 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!51 = !DILocation(line: 56, column: 42, scope: !7)
!52 = !DILocation(line: 121, column: 29, scope: !49, inlinedAt: !51)
!53 = !DILocation(line: 57, column: 21, scope: !7)
!54 = !DILocation(line: 58, column: 21, scope: !7)
!55 = !DILocation(line: 59, column: 20, scope: !7)
!56 = !DILocation(line: 118, column: 15, scope: !49, inlinedAt: !57)
!57 = !DILocation(line: 60, column: 42, scope: !7)
!58 = !DILocation(line: 121, column: 29, scope: !49, inlinedAt: !57)
!59 = !DILocation(line: 110, column: 15, scope: !49, inlinedAt: !60)
!60 = !DILocation(line: 61, column: 42, scope: !7)
!61 = !DILocation(line: 113, column: 29, scope: !49, inlinedAt: !60)
!62 = !DILocation(line: 72, column: 20, scope: !7)
!63 = !DILocation(line: 47, column: 20, scope: !7)
!64 = !DILocation(line: 62, column: 20, scope: !7)
!65 = !DILocation(line: 63, column: 19, scope: !7)
!66 = !DILocation(line: 66, column: 33, scope: !7)
!67 = !DILocation(line: 67, column: 20, scope: !7)
!68 = !DILocation(line: 75, column: 20, scope: !7)
!69 = !DILocation(line: 76, column: 20, scope: !7)
!70 = !DILocation(line: 77, column: 20, scope: !7)
!71 = !DILocation(line: 79, column: 20, scope: !7)
!72 = !DILocation(line: 81, column: 35, scope: !7)
!73 = !DILocation(line: 80, column: 20, scope: !7)
!74 = !DILocation(line: 82, column: 25, scope: !7)
!75 = !DILocation(line: 82, column: 37, scope: !7)
!76 = !DILocation(line: 83, column: 28, scope: !7)
!77 = !DILocation(line: 83, column: 40, scope: !7)
!78 = !DILocation(line: 83, column: 4, scope: !7)
