; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_add_div_mean_squeeze_std_sub_0(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %5 = shl i32 %4, 8, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 1, !dbg !12
  %8 = and i32 %7, 254, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = icmp slt i32 %9, 256, !dbg !14
  %11 = srem i32 %9, 4, !dbg !15
  %12 = sdiv i32 %9, 16, !dbg !16
  %13 = sext i32 %9 to i64, !dbg !17
  %14 = getelementptr float, ptr addrspace(1) %0, i64 %13, !dbg !17
  %15 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %14, i1 %10) #3, !dbg !18
  %16 = shl nsw i32 %12, 4, !dbg !19
  %17 = add i32 %16, %11, !dbg !20
  %18 = sext i32 %17 to i64, !dbg !21
  %19 = getelementptr float, ptr addrspace(1) %0, i64 %18, !dbg !21
  %20 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %19, i1 %10) #3, !dbg !22
  %21 = extractvalue { i32, i32 } %20, 0, !dbg !22
  %22 = extractvalue { i32, i32 } %20, 1, !dbg !22
  %23 = bitcast i32 %21 to float, !dbg !22
  %24 = bitcast i32 %22 to float, !dbg !22
  %25 = add i32 %17, 4, !dbg !23
  %26 = sext i32 %25 to i64, !dbg !24
  %27 = getelementptr float, ptr addrspace(1) %0, i64 %26, !dbg !24
  %28 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %27, i1 %10) #3, !dbg !25
  %29 = extractvalue { i32, i32 } %28, 0, !dbg !25
  %30 = extractvalue { i32, i32 } %28, 1, !dbg !25
  %31 = bitcast i32 %29 to float, !dbg !25
  %32 = bitcast i32 %30 to float, !dbg !25
  %33 = add i32 %17, 8, !dbg !26
  %34 = sext i32 %33 to i64, !dbg !27
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !27
  %36 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %35, i1 %10) #3, !dbg !28
  %37 = extractvalue { i32, i32 } %36, 0, !dbg !28
  %38 = extractvalue { i32, i32 } %36, 1, !dbg !28
  %39 = bitcast i32 %37 to float, !dbg !28
  %40 = bitcast i32 %38 to float, !dbg !28
  %41 = add i32 %17, 12, !dbg !29
  %42 = sext i32 %41 to i64, !dbg !30
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !30
  %44 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %43, i1 %10) #3, !dbg !31
  %45 = extractvalue { i32, i32 } %44, 0, !dbg !31
  %46 = extractvalue { i32, i32 } %44, 1, !dbg !31
  %47 = bitcast i32 %45 to float, !dbg !31
  %48 = bitcast i32 %46 to float, !dbg !31
  %49 = fadd float %23, %31, !dbg !32
  %50 = fadd float %24, %32, !dbg !32
  %51 = fadd float %49, %39, !dbg !33
  %52 = fadd float %50, %40, !dbg !33
  %53 = fadd float %51, %47, !dbg !34
  %54 = fadd float %52, %48, !dbg !34
  %55 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %53, float 4.000000e+00) #3, !dbg !35
  %56 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %54, float 4.000000e+00) #3, !dbg !35
  %57 = fsub float %23, %55, !dbg !36
  %58 = fsub float %24, %56, !dbg !36
  %59 = fmul float %57, %57, !dbg !37
  %60 = fmul float %58, %58, !dbg !37
  %61 = fsub float %31, %55, !dbg !38
  %62 = fsub float %32, %56, !dbg !38
  %63 = fmul float %61, %61, !dbg !39
  %64 = fmul float %62, %62, !dbg !39
  %65 = fadd float %59, %63, !dbg !40
  %66 = fadd float %60, %64, !dbg !40
  %67 = fsub float %39, %55, !dbg !41
  %68 = fsub float %40, %56, !dbg !41
  %69 = fmul float %67, %67, !dbg !42
  %70 = fmul float %68, %68, !dbg !42
  %71 = fadd float %69, %65, !dbg !43
  %72 = fadd float %70, %66, !dbg !43
  %73 = fsub float %47, %55, !dbg !44
  %74 = fsub float %48, %56, !dbg !44
  %75 = fmul float %73, %73, !dbg !45
  %76 = fmul float %74, %74, !dbg !45
  %77 = fadd float %75, %71, !dbg !46
  %78 = fadd float %76, %72, !dbg !46
  %79 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %77, float 4.000000e+00) #3, !dbg !47
  %80 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %78, float 4.000000e+00) #3, !dbg !47
  %81 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !48
  %.not.i = icmp eq i32 %81, 0, !dbg !48
  %82 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !48
  %.not1.i = icmp eq i32 %82, 0, !dbg !48
  br i1 %.not.i, label %88, label %83, !dbg !48

83:                                               ; preds = %3
  br i1 %.not1.i, label %86, label %84, !dbg !48

84:                                               ; preds = %83
  %85 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %79) #3, !dbg !48
  br label %__nv_sqrtf.exit, !dbg !48

86:                                               ; preds = %83
  %87 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %79) #3, !dbg !48
  br label %__nv_sqrtf.exit, !dbg !48

88:                                               ; preds = %3
  br i1 %.not1.i, label %91, label %89, !dbg !48

89:                                               ; preds = %88
  %90 = tail call float @llvm.nvvm.sqrt.rn.f(float %79) #3, !dbg !48
  br label %__nv_sqrtf.exit, !dbg !48

91:                                               ; preds = %88
  %92 = tail call float @llvm.nvvm.sqrt.approx.f(float %79) #3, !dbg !48
  br label %__nv_sqrtf.exit, !dbg !48

__nv_sqrtf.exit:                                  ; preds = %84, %86, %89, %91
  %.0.i = phi float [ %85, %84 ], [ %87, %86 ], [ %90, %89 ], [ %92, %91 ], !dbg !48
  %93 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !48
  %.not.i1 = icmp eq i32 %93, 0, !dbg !48
  %94 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !48
  %.not1.i4 = icmp eq i32 %94, 0, !dbg !48
  br i1 %.not.i1, label %100, label %95, !dbg !48

95:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %98, label %96, !dbg !48

96:                                               ; preds = %95
  %97 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %80) #3, !dbg !48
  br label %__nv_sqrtf.exit5, !dbg !48

98:                                               ; preds = %95
  %99 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %80) #3, !dbg !48
  br label %__nv_sqrtf.exit5, !dbg !48

100:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %103, label %101, !dbg !48

101:                                              ; preds = %100
  %102 = tail call float @llvm.nvvm.sqrt.rn.f(float %80) #3, !dbg !48
  br label %__nv_sqrtf.exit5, !dbg !48

103:                                              ; preds = %100
  %104 = tail call float @llvm.nvvm.sqrt.approx.f(float %80) #3, !dbg !48
  br label %__nv_sqrtf.exit5, !dbg !48

__nv_sqrtf.exit5:                                 ; preds = %96, %98, %101, %103
  %.0.i3 = phi float [ %97, %96 ], [ %99, %98 ], [ %102, %101 ], [ %104, %103 ], !dbg !48
  %105 = extractvalue { i32, i32 } %15, 1, !dbg !18
  %106 = bitcast i32 %105 to float, !dbg !18
  %107 = fsub float %106, %56, !dbg !49
  %108 = extractvalue { i32, i32 } %15, 0, !dbg !18
  %109 = bitcast i32 %108 to float, !dbg !18
  %110 = fsub float %109, %55, !dbg !49
  %111 = fadd float %.0.i, 0x3DDB7CDFE0000000, !dbg !50
  %112 = fadd float %.0.i3, 0x3DDB7CDFE0000000, !dbg !50
  %113 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %110, float %111) #3, !dbg !51
  %114 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %107, float %112) #3, !dbg !51
  %115 = getelementptr float, ptr addrspace(1) %1, i64 %13, !dbg !52
  %116 = bitcast float %113 to i32, !dbg !53
  %117 = bitcast float %114 to i32, !dbg !53
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %116, i32 %117, ptr addrspace(1) %115, i1 %10) #3, !dbg !53
  ret void, !dbg !54
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c75lkntocy52npy2nbaei73sejgmvknkq5itmbiq7sbp5yq7oqrf.py", directory: "inductor_cache/75")
!4 = !{ptr @triton_poi_fused_add_div_mean_squeeze_std_sub_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_div_mean_squeeze_std_sub_0, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_div_mean_squeeze_std_sub_0", linkageName: "triton_poi_fused_add_div_mean_squeeze_std_sub_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 27, column: 30, scope: !7)
!18 = !DILocation(line: 27, column: 35, scope: !7)
!19 = !DILocation(line: 28, column: 38, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 28, column: 30, scope: !7)
!22 = !DILocation(line: 28, column: 43, scope: !7)
!23 = !DILocation(line: 29, column: 39, scope: !7)
!24 = !DILocation(line: 29, column: 30, scope: !7)
!25 = !DILocation(line: 29, column: 47, scope: !7)
!26 = !DILocation(line: 30, column: 39, scope: !7)
!27 = !DILocation(line: 30, column: 30, scope: !7)
!28 = !DILocation(line: 30, column: 47, scope: !7)
!29 = !DILocation(line: 31, column: 40, scope: !7)
!30 = !DILocation(line: 31, column: 30, scope: !7)
!31 = !DILocation(line: 31, column: 48, scope: !7)
!32 = !DILocation(line: 32, column: 18, scope: !7)
!33 = !DILocation(line: 33, column: 18, scope: !7)
!34 = !DILocation(line: 34, column: 18, scope: !7)
!35 = !DILocation(line: 36, column: 18, scope: !7)
!36 = !DILocation(line: 38, column: 19, scope: !7)
!37 = !DILocation(line: 39, column: 20, scope: !7)
!38 = !DILocation(line: 40, column: 19, scope: !7)
!39 = !DILocation(line: 41, column: 20, scope: !7)
!40 = !DILocation(line: 42, column: 20, scope: !7)
!41 = !DILocation(line: 43, column: 19, scope: !7)
!42 = !DILocation(line: 44, column: 20, scope: !7)
!43 = !DILocation(line: 45, column: 20, scope: !7)
!44 = !DILocation(line: 46, column: 19, scope: !7)
!45 = !DILocation(line: 47, column: 20, scope: !7)
!46 = !DILocation(line: 48, column: 20, scope: !7)
!47 = !DILocation(line: 49, column: 20, scope: !7)
!48 = !DILocation(line: 50, column: 27, scope: !7)
!49 = !DILocation(line: 37, column: 19, scope: !7)
!50 = !DILocation(line: 52, column: 20, scope: !7)
!51 = !DILocation(line: 53, column: 20, scope: !7)
!52 = !DILocation(line: 54, column: 25, scope: !7)
!53 = !DILocation(line: 54, column: 37, scope: !7)
!54 = !DILocation(line: 54, column: 4, scope: !7)
