; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_max_pool2d_with_indices_native_batch_norm_backward_72(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %6 = shl i32 %5, 10, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 2, !dbg !12
  %9 = and i32 %8, 508, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = or disjoint i32 %10, 512, !dbg !13
  %.frozen = freeze i32 %10, !dbg !14
  %12 = sdiv i32 %.frozen, 128, !dbg !14
  %13 = mul i32 %12, 128, !dbg !15
  %.decomposed = sub i32 %.frozen, %13, !dbg !15
  %14 = sdiv i32 %11, 128, !dbg !14
  %15 = srem i32 %12, 16, !dbg !16
  %16 = srem i32 %14, 16, !dbg !16
  %17 = sdiv i32 %10, 2048, !dbg !17
  %18 = sdiv i32 %11, 2048, !dbg !17
  %19 = shl nsw i32 %15, 8, !dbg !18
  %20 = shl nsw i32 %16, 8, !dbg !18
  %21 = shl i32 %17, 13, !dbg !19
  %22 = shl i32 %18, 13, !dbg !19
  %23 = add i32 %21, %.decomposed, !dbg !20
  %24 = add i32 %23, %19, !dbg !21
  %25 = add i32 %22, %.decomposed, !dbg !20
  %26 = add i32 %25, %20, !dbg !21
  %27 = sext i32 %24 to i64, !dbg !22
  %28 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !22
  %29 = sext i32 %26 to i64, !dbg !22
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !22
  %31 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %28, i1 true) #1, !dbg !23
  %32 = extractvalue { i32, i32, i32, i32 } %31, 0, !dbg !23
  %33 = extractvalue { i32, i32, i32, i32 } %31, 1, !dbg !23
  %34 = extractvalue { i32, i32, i32, i32 } %31, 2, !dbg !23
  %35 = extractvalue { i32, i32, i32, i32 } %31, 3, !dbg !23
  %36 = bitcast i32 %32 to float, !dbg !23
  %37 = bitcast i32 %33 to float, !dbg !23
  %38 = bitcast i32 %34 to float, !dbg !23
  %39 = bitcast i32 %35 to float, !dbg !23
  %40 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %30, i1 true) #1, !dbg !23
  %41 = extractvalue { i32, i32, i32, i32 } %40, 0, !dbg !23
  %42 = extractvalue { i32, i32, i32, i32 } %40, 1, !dbg !23
  %43 = extractvalue { i32, i32, i32, i32 } %40, 2, !dbg !23
  %44 = extractvalue { i32, i32, i32, i32 } %40, 3, !dbg !23
  %45 = bitcast i32 %41 to float, !dbg !23
  %46 = bitcast i32 %42 to float, !dbg !23
  %47 = bitcast i32 %43 to float, !dbg !23
  %48 = bitcast i32 %44 to float, !dbg !23
  %49 = add i32 %23, 128, !dbg !24
  %50 = add i32 %49, %19, !dbg !25
  %51 = add i32 %25, 128, !dbg !24
  %52 = add i32 %51, %20, !dbg !25
  %53 = sext i32 %50 to i64, !dbg !26
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !26
  %55 = sext i32 %52 to i64, !dbg !26
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !26
  %57 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %54, i1 true) #1, !dbg !27
  %58 = extractvalue { i32, i32, i32, i32 } %57, 0, !dbg !27
  %59 = extractvalue { i32, i32, i32, i32 } %57, 1, !dbg !27
  %60 = extractvalue { i32, i32, i32, i32 } %57, 2, !dbg !27
  %61 = extractvalue { i32, i32, i32, i32 } %57, 3, !dbg !27
  %62 = bitcast i32 %58 to float, !dbg !27
  %63 = bitcast i32 %59 to float, !dbg !27
  %64 = bitcast i32 %60 to float, !dbg !27
  %65 = bitcast i32 %61 to float, !dbg !27
  %66 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %56, i1 true) #1, !dbg !27
  %67 = extractvalue { i32, i32, i32, i32 } %66, 0, !dbg !27
  %68 = extractvalue { i32, i32, i32, i32 } %66, 1, !dbg !27
  %69 = extractvalue { i32, i32, i32, i32 } %66, 2, !dbg !27
  %70 = extractvalue { i32, i32, i32, i32 } %66, 3, !dbg !27
  %71 = bitcast i32 %67 to float, !dbg !27
  %72 = bitcast i32 %68 to float, !dbg !27
  %73 = bitcast i32 %69 to float, !dbg !27
  %74 = bitcast i32 %70 to float, !dbg !27
  %75 = add i32 %23, 4096, !dbg !28
  %76 = add i32 %75, %19, !dbg !29
  %77 = add i32 %25, 4096, !dbg !28
  %78 = add i32 %77, %20, !dbg !29
  %79 = sext i32 %76 to i64, !dbg !30
  %80 = getelementptr float, ptr addrspace(1) %0, i64 %79, !dbg !30
  %81 = sext i32 %78 to i64, !dbg !30
  %82 = getelementptr float, ptr addrspace(1) %0, i64 %81, !dbg !30
  %83 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %80, i1 true) #1, !dbg !31
  %84 = extractvalue { i32, i32, i32, i32 } %83, 0, !dbg !31
  %85 = extractvalue { i32, i32, i32, i32 } %83, 1, !dbg !31
  %86 = extractvalue { i32, i32, i32, i32 } %83, 2, !dbg !31
  %87 = extractvalue { i32, i32, i32, i32 } %83, 3, !dbg !31
  %88 = bitcast i32 %84 to float, !dbg !31
  %89 = bitcast i32 %85 to float, !dbg !31
  %90 = bitcast i32 %86 to float, !dbg !31
  %91 = bitcast i32 %87 to float, !dbg !31
  %92 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %82, i1 true) #1, !dbg !31
  %93 = extractvalue { i32, i32, i32, i32 } %92, 0, !dbg !31
  %94 = extractvalue { i32, i32, i32, i32 } %92, 1, !dbg !31
  %95 = extractvalue { i32, i32, i32, i32 } %92, 2, !dbg !31
  %96 = extractvalue { i32, i32, i32, i32 } %92, 3, !dbg !31
  %97 = bitcast i32 %93 to float, !dbg !31
  %98 = bitcast i32 %94 to float, !dbg !31
  %99 = bitcast i32 %95 to float, !dbg !31
  %100 = bitcast i32 %96 to float, !dbg !31
  %101 = add i32 %23, 4224, !dbg !32
  %102 = add i32 %101, %19, !dbg !33
  %103 = add i32 %25, 4224, !dbg !32
  %104 = add i32 %103, %20, !dbg !33
  %105 = sext i32 %102 to i64, !dbg !34
  %106 = getelementptr float, ptr addrspace(1) %0, i64 %105, !dbg !34
  %107 = sext i32 %104 to i64, !dbg !34
  %108 = getelementptr float, ptr addrspace(1) %0, i64 %107, !dbg !34
  %109 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %106, i1 true) #1, !dbg !35
  %110 = extractvalue { i32, i32, i32, i32 } %109, 0, !dbg !35
  %111 = extractvalue { i32, i32, i32, i32 } %109, 1, !dbg !35
  %112 = extractvalue { i32, i32, i32, i32 } %109, 2, !dbg !35
  %113 = extractvalue { i32, i32, i32, i32 } %109, 3, !dbg !35
  %114 = bitcast i32 %110 to float, !dbg !35
  %115 = bitcast i32 %111 to float, !dbg !35
  %116 = bitcast i32 %112 to float, !dbg !35
  %117 = bitcast i32 %113 to float, !dbg !35
  %118 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %108, i1 true) #1, !dbg !35
  %119 = extractvalue { i32, i32, i32, i32 } %118, 0, !dbg !35
  %120 = extractvalue { i32, i32, i32, i32 } %118, 1, !dbg !35
  %121 = extractvalue { i32, i32, i32, i32 } %118, 2, !dbg !35
  %122 = extractvalue { i32, i32, i32, i32 } %118, 3, !dbg !35
  %123 = bitcast i32 %119 to float, !dbg !35
  %124 = bitcast i32 %120 to float, !dbg !35
  %125 = bitcast i32 %121 to float, !dbg !35
  %126 = bitcast i32 %122 to float, !dbg !35
  %127 = sext i32 %.decomposed to i64, !dbg !36
  %128 = getelementptr float, ptr addrspace(1) %1, i64 %127, !dbg !36
  %129 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %128, i1 true) #1, !dbg !37
  %130 = extractvalue { i32, i32, i32, i32 } %129, 0, !dbg !37
  %131 = extractvalue { i32, i32, i32, i32 } %129, 1, !dbg !37
  %132 = extractvalue { i32, i32, i32, i32 } %129, 2, !dbg !37
  %133 = extractvalue { i32, i32, i32, i32 } %129, 3, !dbg !37
  %134 = bitcast i32 %130 to float, !dbg !37
  %135 = bitcast i32 %131 to float, !dbg !37
  %136 = bitcast i32 %132 to float, !dbg !37
  %137 = bitcast i32 %133 to float, !dbg !37
  %138 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %128, i1 true) #1, !dbg !37
  %139 = extractvalue { i32, i32, i32, i32 } %138, 0, !dbg !37
  %140 = extractvalue { i32, i32, i32, i32 } %138, 1, !dbg !37
  %141 = extractvalue { i32, i32, i32, i32 } %138, 2, !dbg !37
  %142 = extractvalue { i32, i32, i32, i32 } %138, 3, !dbg !37
  %143 = bitcast i32 %139 to float, !dbg !37
  %144 = bitcast i32 %140 to float, !dbg !37
  %145 = bitcast i32 %141 to float, !dbg !37
  %146 = bitcast i32 %142 to float, !dbg !37
  %147 = fcmp ogt float %62, %36, !dbg !38
  %148 = fcmp ogt float %63, %37, !dbg !38
  %149 = fcmp ogt float %64, %38, !dbg !38
  %150 = fcmp ogt float %65, %39, !dbg !38
  %151 = fcmp ogt float %71, %45, !dbg !38
  %152 = fcmp ogt float %72, %46, !dbg !38
  %153 = fcmp ogt float %73, %47, !dbg !38
  %154 = fcmp ogt float %74, %48, !dbg !38
  %155 = fcmp uno float %62, 0.000000e+00, !dbg !42
  %156 = fcmp uno float %63, 0.000000e+00, !dbg !42
  %157 = fcmp uno float %64, 0.000000e+00, !dbg !42
  %158 = fcmp uno float %65, 0.000000e+00, !dbg !42
  %159 = fcmp uno float %71, 0.000000e+00, !dbg !42
  %160 = fcmp uno float %72, 0.000000e+00, !dbg !42
  %161 = fcmp uno float %73, 0.000000e+00, !dbg !42
  %162 = fcmp uno float %74, 0.000000e+00, !dbg !42
  %163 = or i1 %147, %155, !dbg !43
  %164 = or i1 %148, %156, !dbg !43
  %165 = or i1 %149, %157, !dbg !43
  %166 = or i1 %150, %158, !dbg !43
  %167 = or i1 %151, %159, !dbg !43
  %168 = or i1 %152, %160, !dbg !43
  %169 = or i1 %153, %161, !dbg !43
  %170 = or i1 %154, %162, !dbg !43
  %171 = select i1 %163, float %62, float %36, !dbg !44
  %172 = select i1 %164, float %63, float %37, !dbg !44
  %173 = select i1 %165, float %64, float %38, !dbg !44
  %174 = select i1 %166, float %65, float %39, !dbg !44
  %175 = select i1 %167, float %71, float %45, !dbg !44
  %176 = select i1 %168, float %72, float %46, !dbg !44
  %177 = select i1 %169, float %73, float %47, !dbg !44
  %178 = select i1 %170, float %74, float %48, !dbg !44
  %179 = fcmp olt float %171, %88, !dbg !45
  %180 = fcmp olt float %172, %89, !dbg !45
  %181 = fcmp olt float %173, %90, !dbg !45
  %182 = fcmp olt float %174, %91, !dbg !45
  %183 = fcmp olt float %175, %97, !dbg !45
  %184 = fcmp olt float %176, %98, !dbg !45
  %185 = fcmp olt float %177, %99, !dbg !45
  %186 = fcmp olt float %178, %100, !dbg !45
  %187 = fcmp uno float %88, 0.000000e+00, !dbg !47
  %188 = fcmp uno float %89, 0.000000e+00, !dbg !47
  %189 = fcmp uno float %90, 0.000000e+00, !dbg !47
  %190 = fcmp uno float %91, 0.000000e+00, !dbg !47
  %191 = fcmp uno float %97, 0.000000e+00, !dbg !47
  %192 = fcmp uno float %98, 0.000000e+00, !dbg !47
  %193 = fcmp uno float %99, 0.000000e+00, !dbg !47
  %194 = fcmp uno float %100, 0.000000e+00, !dbg !47
  %195 = or i1 %187, %179, !dbg !48
  %196 = or i1 %188, %180, !dbg !48
  %197 = or i1 %189, %181, !dbg !48
  %198 = or i1 %190, %182, !dbg !48
  %199 = or i1 %191, %183, !dbg !48
  %200 = or i1 %192, %184, !dbg !48
  %201 = or i1 %193, %185, !dbg !48
  %202 = or i1 %194, %186, !dbg !48
  %203 = select i1 %195, float %88, float %171, !dbg !49
  %204 = select i1 %196, float %89, float %172, !dbg !49
  %205 = select i1 %197, float %90, float %173, !dbg !49
  %206 = select i1 %198, float %91, float %174, !dbg !49
  %207 = select i1 %199, float %97, float %175, !dbg !49
  %208 = select i1 %200, float %98, float %176, !dbg !49
  %209 = select i1 %201, float %99, float %177, !dbg !49
  %210 = select i1 %202, float %100, float %178, !dbg !49
  %211 = fcmp olt float %203, %114, !dbg !50
  %212 = fcmp olt float %204, %115, !dbg !50
  %213 = fcmp olt float %205, %116, !dbg !50
  %214 = fcmp olt float %206, %117, !dbg !50
  %215 = fcmp olt float %207, %123, !dbg !50
  %216 = fcmp olt float %208, %124, !dbg !50
  %217 = fcmp olt float %209, %125, !dbg !50
  %218 = fcmp olt float %210, %126, !dbg !50
  %219 = fcmp uno float %114, 0.000000e+00, !dbg !52
  %220 = fcmp uno float %115, 0.000000e+00, !dbg !52
  %221 = fcmp uno float %116, 0.000000e+00, !dbg !52
  %222 = fcmp uno float %117, 0.000000e+00, !dbg !52
  %223 = fcmp uno float %123, 0.000000e+00, !dbg !52
  %224 = fcmp uno float %124, 0.000000e+00, !dbg !52
  %225 = fcmp uno float %125, 0.000000e+00, !dbg !52
  %226 = fcmp uno float %126, 0.000000e+00, !dbg !52
  %227 = or i1 %219, %211, !dbg !53
  %228 = or i1 %220, %212, !dbg !53
  %229 = or i1 %221, %213, !dbg !53
  %230 = or i1 %222, %214, !dbg !53
  %231 = or i1 %223, %215, !dbg !53
  %232 = or i1 %224, %216, !dbg !53
  %233 = or i1 %225, %217, !dbg !53
  %234 = or i1 %226, %218, !dbg !53
  %235 = select i1 %227, float %114, float %203, !dbg !54
  %236 = select i1 %228, float %115, float %204, !dbg !54
  %237 = select i1 %229, float %116, float %205, !dbg !54
  %238 = select i1 %230, float %117, float %206, !dbg !54
  %239 = select i1 %231, float %123, float %207, !dbg !54
  %240 = select i1 %232, float %124, float %208, !dbg !54
  %241 = select i1 %233, float %125, float %209, !dbg !54
  %242 = select i1 %234, float %126, float %210, !dbg !54
  %243 = fsub float %235, %134, !dbg !55
  %244 = fsub float %236, %135, !dbg !55
  %245 = fsub float %237, %136, !dbg !55
  %246 = fsub float %238, %137, !dbg !55
  %247 = fsub float %239, %143, !dbg !55
  %248 = fsub float %240, %144, !dbg !55
  %249 = fsub float %241, %145, !dbg !55
  %250 = fsub float %242, %146, !dbg !55
  %251 = sext i32 %10 to i64, !dbg !56
  %252 = getelementptr float, ptr addrspace(1) %2, i64 %251, !dbg !56
  %253 = sext i32 %11 to i64, !dbg !56
  %254 = getelementptr float, ptr addrspace(1) %2, i64 %253, !dbg !56
  %255 = bitcast float %243 to i32, !dbg !57
  %256 = bitcast float %244 to i32, !dbg !57
  %257 = bitcast float %245 to i32, !dbg !57
  %258 = bitcast float %246 to i32, !dbg !57
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %255, i32 %256, i32 %257, i32 %258, ptr addrspace(1) %252, i1 true) #1, !dbg !57
  %259 = bitcast float %247 to i32, !dbg !57
  %260 = bitcast float %248 to i32, !dbg !57
  %261 = bitcast float %249 to i32, !dbg !57
  %262 = bitcast float %250 to i32, !dbg !57
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %259, i32 %260, i32 %261, i32 %262, ptr addrspace(1) %254, i1 true) #1, !dbg !57
  ret void, !dbg !58
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ceowri3gs64wynxoug6lr7s6fqzjnqxtyfbgeyk7lxhrs5dra66r.py", directory: "inductor_cache/eo")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_native_batch_norm_backward_72, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_native_batch_norm_backward_72, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_native_batch_norm_backward_72", linkageName: "triton_poi_fused_max_pool2d_with_indices_native_batch_norm_backward_72", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 25, column: 28, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 39, scope: !7)
!19 = !DILocation(line: 28, column: 49, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 28, column: 44, scope: !7)
!22 = !DILocation(line: 28, column: 30, scope: !7)
!23 = !DILocation(line: 28, column: 54, scope: !7)
!24 = !DILocation(line: 29, column: 41, scope: !7)
!25 = !DILocation(line: 29, column: 50, scope: !7)
!26 = !DILocation(line: 29, column: 30, scope: !7)
!27 = !DILocation(line: 29, column: 60, scope: !7)
!28 = !DILocation(line: 30, column: 42, scope: !7)
!29 = !DILocation(line: 30, column: 51, scope: !7)
!30 = !DILocation(line: 30, column: 30, scope: !7)
!31 = !DILocation(line: 30, column: 61, scope: !7)
!32 = !DILocation(line: 31, column: 42, scope: !7)
!33 = !DILocation(line: 31, column: 51, scope: !7)
!34 = !DILocation(line: 31, column: 30, scope: !7)
!35 = !DILocation(line: 31, column: 61, scope: !7)
!36 = !DILocation(line: 32, column: 30, scope: !7)
!37 = !DILocation(line: 32, column: 35, scope: !7)
!38 = !DILocation(line: 118, column: 15, scope: !39, inlinedAt: !41)
!39 = distinct !DILexicalBlockFile(scope: !7, file: !40, discriminator: 0)
!40 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!41 = !DILocation(line: 33, column: 40, scope: !7)
!42 = !DILocation(line: 120, column: 21, scope: !39, inlinedAt: !41)
!43 = !DILocation(line: 120, column: 16, scope: !39, inlinedAt: !41)
!44 = !DILocation(line: 121, column: 29, scope: !39, inlinedAt: !41)
!45 = !DILocation(line: 118, column: 15, scope: !39, inlinedAt: !46)
!46 = !DILocation(line: 34, column: 40, scope: !7)
!47 = !DILocation(line: 120, column: 21, scope: !39, inlinedAt: !46)
!48 = !DILocation(line: 120, column: 16, scope: !39, inlinedAt: !46)
!49 = !DILocation(line: 121, column: 29, scope: !39, inlinedAt: !46)
!50 = !DILocation(line: 118, column: 15, scope: !39, inlinedAt: !51)
!51 = !DILocation(line: 35, column: 40, scope: !7)
!52 = !DILocation(line: 120, column: 21, scope: !39, inlinedAt: !51)
!53 = !DILocation(line: 120, column: 16, scope: !39, inlinedAt: !51)
!54 = !DILocation(line: 121, column: 29, scope: !39, inlinedAt: !51)
!55 = !DILocation(line: 36, column: 18, scope: !7)
!56 = !DILocation(line: 37, column: 25, scope: !7)
!57 = !DILocation(line: 37, column: 36, scope: !7)
!58 = !DILocation(line: 37, column: 4, scope: !7)
