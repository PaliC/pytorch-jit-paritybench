; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused__native_batch_norm_legit_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %7 = shl i32 %6, 3, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 3, !dbg !12
  %10 = and i32 %9, 7, !dbg !12
  %11 = and i32 %8, 7, !dbg !12
  %12 = or disjoint i32 %7, %10, !dbg !13
  %13 = icmp slt i32 %12, 16, !dbg !14
  %14 = shl i32 %8, 1, !dbg !15
  %15 = and i32 %14, 14, !dbg !15
  %16 = shl i32 %12, 4, !dbg !16
  %17 = or disjoint i32 %16, %15, !dbg !17
  %18 = sext i32 %17 to i64, !dbg !18
  %19 = getelementptr float, ptr addrspace(1) %1, i64 %18, !dbg !18
  %20 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %19, i1 %13, i32 0, i1 %13, i32 0, i1 %13) #5, !dbg !19
  %21 = extractvalue { i32, i32 } %20, 0, !dbg !19
  %22 = extractvalue { i32, i32 } %20, 1, !dbg !19
  %23 = bitcast i32 %21 to float, !dbg !19
  %24 = bitcast i32 %22 to float, !dbg !19
  %25 = fadd float %23, %24, !dbg !20
  %26 = select i1 %13, float %25, float 0.000000e+00, !dbg !20
  %27 = bitcast float %26 to i32, !dbg !25
  %28 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %27, i32 4, i32 31), !dbg !25
  %29 = bitcast i32 %28 to float, !dbg !25
  %30 = fadd float %26, %29, !dbg !20
  %31 = bitcast float %30 to i32, !dbg !25
  %32 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %31, i32 2, i32 31), !dbg !25
  %33 = bitcast i32 %32 to float, !dbg !25
  %34 = fadd float %30, %33, !dbg !20
  %35 = bitcast float %34 to i32, !dbg !25
  %36 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %35, i32 1, i32 31), !dbg !25
  %37 = bitcast i32 %36 to float, !dbg !25
  %38 = fadd float %34, %37, !dbg !20
  %39 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %10, !dbg !26
  %40 = bitcast float %38 to <1 x i32>, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %39, <1 x i32> %40, i1 true) #5, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %41 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !26
  %42 = load float, ptr addrspace(3) %41, align 4, !dbg !26
  %43 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %42, float 1.600000e+01) #5, !dbg !26
  %44 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %38, float 1.600000e+01) #5, !dbg !26
  %45 = fsub float %23, %44, !dbg !27
  %46 = fsub float %24, %44, !dbg !27
  %47 = fmul float %45, %45, !dbg !28
  %48 = fmul float %46, %46, !dbg !28
  %49 = fadd float %47, %48, !dbg !29
  %50 = select i1 %13, float %49, float 0.000000e+00, !dbg !29
  %51 = bitcast float %50 to i32, !dbg !31
  %52 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %51, i32 4, i32 31), !dbg !31
  %53 = bitcast i32 %52 to float, !dbg !31
  %54 = fadd float %50, %53, !dbg !29
  %55 = bitcast float %54 to i32, !dbg !31
  %56 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %55, i32 2, i32 31), !dbg !31
  %57 = bitcast i32 %56 to float, !dbg !31
  %58 = fadd float %54, %57, !dbg !29
  %59 = bitcast float %58 to i32, !dbg !31
  %60 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %59, i32 1, i32 31), !dbg !31
  %61 = bitcast i32 %60 to float, !dbg !31
  %62 = fadd float %58, %61, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %63 = bitcast float %62 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %39, <1 x i32> %63, i1 true) #5, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %64 = load float, ptr addrspace(3) %41, align 4, !dbg !32
  %65 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %64, float 1.600000e+01) #5, !dbg !33
  %66 = fadd float %65, 0x3EE4F8B580000000, !dbg !34
  %67 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !32
  %.not.i = icmp eq i32 %67, 0, !dbg !32
  br i1 %.not.i, label %70, label %68, !dbg !32

68:                                               ; preds = %5
  %69 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %66), !dbg !32
  br label %__nv_rsqrtf.exit, !dbg !32

70:                                               ; preds = %5
  %71 = tail call float @llvm.nvvm.rsqrt.approx.f(float %66), !dbg !32
  br label %__nv_rsqrtf.exit, !dbg !32

__nv_rsqrtf.exit:                                 ; preds = %68, %70
  %.0.i = phi float [ %69, %68 ], [ %71, %70 ], !dbg !32
  %72 = or disjoint i32 %7, %11, !dbg !13
  %73 = icmp slt i32 %72, 16, !dbg !14
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %74 = sext i32 %72 to i64, !dbg !36
  %75 = getelementptr float, ptr addrspace(1) %0, i64 %74, !dbg !36
  %76 = and i32 %8, 56, !dbg !37
  %77 = icmp eq i32 %76, 0, !dbg !37
  %78 = bitcast float %.0.i to i32, !dbg !37
  %79 = and i1 %77, %73, !dbg !37
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %78, ptr addrspace(1) %75, i1 %79) #5, !dbg !37
  %80 = getelementptr float, ptr addrspace(1) %2, i64 %74, !dbg !38
  %81 = bitcast float %43 to i32, !dbg !39
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %81, ptr addrspace(1) %80, i1 %79) #5, !dbg !39
  ret void, !dbg !40
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cghn5qaawbyuwgvnoidclcy7mjft4mkd37agss5ofjdsdm6qklvr.py", directory: "inductor_cache/gh")
!4 = !{ptr @triton_per_fused__native_batch_norm_legit_1, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__native_batch_norm_legit_1, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__native_batch_norm_legit_1", linkageName: "triton_per_fused__native_batch_norm_legit_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 38, scope: !7)
!17 = !DILocation(line: 31, column: 35, scope: !7)
!18 = !DILocation(line: 31, column: 30, scope: !7)
!19 = !DILocation(line: 31, column: 43, scope: !7)
!20 = !DILocation(line: 256, column: 15, scope: !21, inlinedAt: !24)
!21 = distinct !DILexicalBlockFile(scope: !23, file: !22, discriminator: 0)
!22 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!23 = distinct !DILexicalBlockFile(scope: !7, file: !22, discriminator: 0)
!24 = !DILocation(line: 36, column: 24, scope: !7)
!25 = !DILocation(line: 267, column: 36, scope: !23, inlinedAt: !24)
!26 = !DILocation(line: 39, column: 19, scope: !7)
!27 = !DILocation(line: 40, column: 19, scope: !7)
!28 = !DILocation(line: 41, column: 20, scope: !7)
!29 = !DILocation(line: 256, column: 15, scope: !21, inlinedAt: !30)
!30 = !DILocation(line: 44, column: 26, scope: !7)
!31 = !DILocation(line: 267, column: 36, scope: !23, inlinedAt: !30)
!32 = !DILocation(line: 49, column: 28, scope: !7)
!33 = !DILocation(line: 46, column: 20, scope: !7)
!34 = !DILocation(line: 48, column: 20, scope: !7)
!35 = !DILocation(line: 50, column: 4, scope: !7)
!36 = !DILocation(line: 51, column: 28, scope: !7)
!37 = !DILocation(line: 51, column: 40, scope: !7)
!38 = !DILocation(line: 52, column: 25, scope: !7)
!39 = !DILocation(line: 52, column: 37, scope: !7)
!40 = !DILocation(line: 52, column: 4, scope: !7)
