; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__unsafe_index_add_convolution_mul_sub_56(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %12 = shl i32 %11, 9, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = shl i32 %13, 2, !dbg !12
  %15 = and i32 %14, 508, !dbg !12
  %16 = or disjoint i32 %12, %15, !dbg !13
  %17 = or disjoint i32 %16, 2, !dbg !13
  %.frozen = freeze i32 %16, !dbg !14
  %18 = sdiv i32 %.frozen, 64, !dbg !14
  %19 = srem i32 %18, 64, !dbg !15
  %20 = mul i32 %18, 64, !dbg !16
  %.decomposed = sub i32 %.frozen, %20, !dbg !16
  %21 = srem i32 %17, 64, !dbg !16
  %22 = sdiv i32 %16, 4096, !dbg !17
  %23 = srem i32 %22, 4, !dbg !18
  %24 = sext i32 %19 to i64, !dbg !19
  %25 = getelementptr i64, ptr addrspace(1) %1, i64 %24, !dbg !19
  %26 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %25, i1 true) #1, !dbg !20
  %27 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %25, i1 true) #1, !dbg !20
  %28 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %25, i1 true) #1, !dbg !20
  %29 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %25, i1 true) #1, !dbg !20
  %30 = sext i32 %.decomposed to i64, !dbg !21
  %31 = getelementptr i64, ptr addrspace(1) %2, i64 %30, !dbg !21
  %32 = sext i32 %21 to i64, !dbg !21
  %33 = getelementptr i64, ptr addrspace(1) %2, i64 %32, !dbg !21
  %34 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %31, i1 true) #1, !dbg !22
  %35 = extractvalue { i64, i64 } %34, 0, !dbg !22
  %36 = extractvalue { i64, i64 } %34, 1, !dbg !22
  %37 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %33, i1 true) #1, !dbg !22
  %38 = extractvalue { i64, i64 } %37, 0, !dbg !22
  %39 = extractvalue { i64, i64 } %37, 1, !dbg !22
  %40 = sext i32 %23 to i64, !dbg !23
  %41 = getelementptr float, ptr addrspace(1) %4, i64 %40, !dbg !23
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 true) #1, !dbg !24
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 true) #1, !dbg !24
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 true) #1, !dbg !24
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 true) #1, !dbg !24
  %46 = getelementptr i64, ptr addrspace(1) %5, i64 %30, !dbg !25
  %47 = getelementptr i64, ptr addrspace(1) %5, i64 %32, !dbg !25
  %48 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %46, i1 true) #1, !dbg !26
  %49 = extractvalue { i64, i64 } %48, 0, !dbg !26
  %50 = extractvalue { i64, i64 } %48, 1, !dbg !26
  %51 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %47, i1 true) #1, !dbg !26
  %52 = extractvalue { i64, i64 } %51, 0, !dbg !26
  %53 = extractvalue { i64, i64 } %51, 1, !dbg !26
  %54 = getelementptr float, ptr addrspace(1) %6, i64 %30, !dbg !27
  %55 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %54, i1 true) #1, !dbg !28
  %56 = extractvalue { i32, i32, i32, i32 } %55, 0, !dbg !28
  %57 = extractvalue { i32, i32, i32, i32 } %55, 1, !dbg !28
  %58 = extractvalue { i32, i32, i32, i32 } %55, 2, !dbg !28
  %59 = extractvalue { i32, i32, i32, i32 } %55, 3, !dbg !28
  %60 = getelementptr i64, ptr addrspace(1) %7, i64 %24, !dbg !29
  %61 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %60, i1 true) #1, !dbg !30
  %62 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %60, i1 true) #1, !dbg !30
  %63 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %60, i1 true) #1, !dbg !30
  %64 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %60, i1 true) #1, !dbg !30
  %65 = getelementptr float, ptr addrspace(1) %8, i64 %24, !dbg !31
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 true) #1, !dbg !32
  %67 = bitcast i32 %66 to float, !dbg !32
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 true) #1, !dbg !32
  %69 = bitcast i32 %68 to float, !dbg !32
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 true) #1, !dbg !32
  %71 = bitcast i32 %70 to float, !dbg !32
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 true) #1, !dbg !32
  %73 = bitcast i32 %72 to float, !dbg !32
  %74 = lshr i64 %26, 62, !dbg !33
  %75 = and i64 %74, 2, !dbg !33
  %76 = add i64 %75, %26, !dbg !33
  %77 = lshr i64 %35, 62, !dbg !34
  %78 = and i64 %77, 2, !dbg !34
  %79 = lshr i64 %36, 62, !dbg !34
  %80 = and i64 %79, 2, !dbg !34
  %81 = lshr i64 %38, 62, !dbg !34
  %82 = and i64 %81, 2, !dbg !34
  %83 = lshr i64 %39, 62, !dbg !34
  %84 = and i64 %83, 2, !dbg !34
  %85 = shl i64 %76, 1, !dbg !35
  %86 = shl nsw i32 %22, 2, !dbg !36
  %87 = sext i32 %86 to i64, !dbg !37
  %88 = getelementptr float, ptr addrspace(1) %3, i64 %35, !dbg !38
  %89 = getelementptr float, ptr addrspace(1) %88, i64 %78, !dbg !38
  %90 = getelementptr float, ptr addrspace(1) %89, i64 %85, !dbg !38
  %91 = getelementptr float, ptr addrspace(1) %90, i64 %87, !dbg !38
  %92 = getelementptr float, ptr addrspace(1) %3, i64 %36, !dbg !38
  %93 = getelementptr float, ptr addrspace(1) %92, i64 %80, !dbg !38
  %94 = getelementptr float, ptr addrspace(1) %93, i64 %85, !dbg !38
  %95 = getelementptr float, ptr addrspace(1) %94, i64 %87, !dbg !38
  %96 = getelementptr float, ptr addrspace(1) %3, i64 %38, !dbg !38
  %97 = getelementptr float, ptr addrspace(1) %96, i64 %82, !dbg !38
  %98 = getelementptr float, ptr addrspace(1) %97, i64 %85, !dbg !38
  %99 = getelementptr float, ptr addrspace(1) %98, i64 %87, !dbg !38
  %100 = getelementptr float, ptr addrspace(1) %3, i64 %39, !dbg !38
  %101 = getelementptr float, ptr addrspace(1) %100, i64 %84, !dbg !38
  %102 = getelementptr float, ptr addrspace(1) %101, i64 %85, !dbg !38
  %103 = getelementptr float, ptr addrspace(1) %102, i64 %87, !dbg !38
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %91, i1 true) #1, !dbg !39
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %95, i1 true) #1, !dbg !39
  %106 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %99, i1 true) #1, !dbg !39
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %103, i1 true) #1, !dbg !39
  %108 = lshr i64 %49, 62, !dbg !40
  %109 = and i64 %108, 2, !dbg !40
  %110 = lshr i64 %50, 62, !dbg !40
  %111 = and i64 %110, 2, !dbg !40
  %112 = lshr i64 %52, 62, !dbg !40
  %113 = and i64 %112, 2, !dbg !40
  %114 = lshr i64 %53, 62, !dbg !40
  %115 = and i64 %114, 2, !dbg !40
  %116 = getelementptr float, ptr addrspace(1) %3, i64 %49, !dbg !41
  %117 = getelementptr float, ptr addrspace(1) %116, i64 %109, !dbg !41
  %118 = getelementptr float, ptr addrspace(1) %117, i64 %85, !dbg !41
  %119 = getelementptr float, ptr addrspace(1) %118, i64 %87, !dbg !41
  %120 = getelementptr float, ptr addrspace(1) %3, i64 %50, !dbg !41
  %121 = getelementptr float, ptr addrspace(1) %120, i64 %111, !dbg !41
  %122 = getelementptr float, ptr addrspace(1) %121, i64 %85, !dbg !41
  %123 = getelementptr float, ptr addrspace(1) %122, i64 %87, !dbg !41
  %124 = getelementptr float, ptr addrspace(1) %3, i64 %52, !dbg !41
  %125 = getelementptr float, ptr addrspace(1) %124, i64 %113, !dbg !41
  %126 = getelementptr float, ptr addrspace(1) %125, i64 %85, !dbg !41
  %127 = getelementptr float, ptr addrspace(1) %126, i64 %87, !dbg !41
  %128 = getelementptr float, ptr addrspace(1) %3, i64 %53, !dbg !41
  %129 = getelementptr float, ptr addrspace(1) %128, i64 %115, !dbg !41
  %130 = getelementptr float, ptr addrspace(1) %129, i64 %85, !dbg !41
  %131 = getelementptr float, ptr addrspace(1) %130, i64 %87, !dbg !41
  %132 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %119, i1 true) #1, !dbg !42
  %133 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %123, i1 true) #1, !dbg !42
  %134 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %127, i1 true) #1, !dbg !42
  %135 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %131, i1 true) #1, !dbg !42
  %136 = lshr i64 %61, 62, !dbg !43
  %137 = and i64 %136, 2, !dbg !43
  %138 = add i64 %137, %61, !dbg !43
  %139 = shl i64 %138, 1, !dbg !44
  %140 = getelementptr float, ptr addrspace(1) %89, i64 %139, !dbg !45
  %141 = getelementptr float, ptr addrspace(1) %140, i64 %87, !dbg !45
  %142 = getelementptr float, ptr addrspace(1) %93, i64 %139, !dbg !45
  %143 = getelementptr float, ptr addrspace(1) %142, i64 %87, !dbg !45
  %144 = getelementptr float, ptr addrspace(1) %97, i64 %139, !dbg !45
  %145 = getelementptr float, ptr addrspace(1) %144, i64 %87, !dbg !45
  %146 = getelementptr float, ptr addrspace(1) %101, i64 %139, !dbg !45
  %147 = getelementptr float, ptr addrspace(1) %146, i64 %87, !dbg !45
  %148 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %141, i1 true) #1, !dbg !46
  %149 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %143, i1 true) #1, !dbg !46
  %150 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %145, i1 true) #1, !dbg !46
  %151 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %147, i1 true) #1, !dbg !46
  %152 = getelementptr float, ptr addrspace(1) %117, i64 %139, !dbg !47
  %153 = getelementptr float, ptr addrspace(1) %152, i64 %87, !dbg !47
  %154 = getelementptr float, ptr addrspace(1) %121, i64 %139, !dbg !47
  %155 = getelementptr float, ptr addrspace(1) %154, i64 %87, !dbg !47
  %156 = getelementptr float, ptr addrspace(1) %125, i64 %139, !dbg !47
  %157 = getelementptr float, ptr addrspace(1) %156, i64 %87, !dbg !47
  %158 = getelementptr float, ptr addrspace(1) %129, i64 %139, !dbg !47
  %159 = getelementptr float, ptr addrspace(1) %158, i64 %87, !dbg !47
  %160 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %153, i1 true) #1, !dbg !48
  %161 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %155, i1 true) #1, !dbg !48
  %162 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %157, i1 true) #1, !dbg !48
  %163 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %159, i1 true) #1, !dbg !48
  %164 = insertelement <2 x i32> poison, i32 %148, i64 0, !dbg !46
  %165 = insertelement <2 x i32> %164, i32 %104, i64 1, !dbg !46
  %166 = bitcast <2 x i32> %165 to <2 x float>, !dbg !46
  %167 = insertelement <2 x i32> poison, i32 %42, i64 0, !dbg !49
  %168 = bitcast <2 x i32> %167 to <2 x float>, !dbg !49
  %169 = shufflevector <2 x float> %168, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !49
  %170 = fadd <2 x float> %169, %166, !dbg !49
  %171 = insertelement <2 x i32> poison, i32 %160, i64 0, !dbg !48
  %172 = insertelement <2 x i32> %171, i32 %132, i64 1, !dbg !48
  %173 = bitcast <2 x i32> %172 to <2 x float>, !dbg !48
  %174 = fadd <2 x float> %169, %173, !dbg !50
  %175 = fsub <2 x float> %174, %170, !dbg !51
  %176 = insertelement <2 x i32> poison, i32 %56, i64 0, !dbg !52
  %177 = bitcast <2 x i32> %176 to <2 x float>, !dbg !52
  %178 = shufflevector <2 x float> %177, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !52
  %179 = fmul <2 x float> %175, %178, !dbg !52
  %180 = fadd <2 x float> %170, %179, !dbg !53
  %181 = insertelement <2 x i32> poison, i32 %149, i64 0, !dbg !46
  %182 = insertelement <2 x i32> %181, i32 %105, i64 1, !dbg !46
  %183 = bitcast <2 x i32> %182 to <2 x float>, !dbg !46
  %184 = insertelement <2 x i32> poison, i32 %43, i64 0, !dbg !49
  %185 = bitcast <2 x i32> %184 to <2 x float>, !dbg !49
  %186 = shufflevector <2 x float> %185, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !49
  %187 = fadd <2 x float> %186, %183, !dbg !49
  %188 = insertelement <2 x i32> poison, i32 %161, i64 0, !dbg !48
  %189 = insertelement <2 x i32> %188, i32 %133, i64 1, !dbg !48
  %190 = bitcast <2 x i32> %189 to <2 x float>, !dbg !48
  %191 = fadd <2 x float> %186, %190, !dbg !50
  %192 = fsub <2 x float> %191, %187, !dbg !51
  %193 = insertelement <2 x i32> poison, i32 %57, i64 0, !dbg !52
  %194 = bitcast <2 x i32> %193 to <2 x float>, !dbg !52
  %195 = shufflevector <2 x float> %194, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !52
  %196 = fmul <2 x float> %192, %195, !dbg !52
  %197 = fadd <2 x float> %187, %196, !dbg !53
  %198 = insertelement <2 x i32> poison, i32 %150, i64 0, !dbg !46
  %199 = insertelement <2 x i32> %198, i32 %106, i64 1, !dbg !46
  %200 = bitcast <2 x i32> %199 to <2 x float>, !dbg !46
  %201 = insertelement <2 x i32> poison, i32 %44, i64 0, !dbg !49
  %202 = bitcast <2 x i32> %201 to <2 x float>, !dbg !49
  %203 = shufflevector <2 x float> %202, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !49
  %204 = fadd <2 x float> %203, %200, !dbg !49
  %205 = insertelement <2 x i32> poison, i32 %162, i64 0, !dbg !48
  %206 = insertelement <2 x i32> %205, i32 %134, i64 1, !dbg !48
  %207 = bitcast <2 x i32> %206 to <2 x float>, !dbg !48
  %208 = fadd <2 x float> %203, %207, !dbg !50
  %209 = fsub <2 x float> %208, %204, !dbg !51
  %210 = insertelement <2 x i32> poison, i32 %58, i64 0, !dbg !52
  %211 = bitcast <2 x i32> %210 to <2 x float>, !dbg !52
  %212 = shufflevector <2 x float> %211, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !52
  %213 = fmul <2 x float> %209, %212, !dbg !52
  %214 = fadd <2 x float> %204, %213, !dbg !53
  %215 = insertelement <2 x i32> poison, i32 %151, i64 0, !dbg !46
  %216 = insertelement <2 x i32> %215, i32 %107, i64 1, !dbg !46
  %217 = bitcast <2 x i32> %216 to <2 x float>, !dbg !46
  %218 = insertelement <2 x i32> poison, i32 %45, i64 0, !dbg !49
  %219 = bitcast <2 x i32> %218 to <2 x float>, !dbg !49
  %220 = shufflevector <2 x float> %219, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !49
  %221 = fadd <2 x float> %220, %217, !dbg !49
  %222 = insertelement <2 x i32> poison, i32 %163, i64 0, !dbg !48
  %223 = insertelement <2 x i32> %222, i32 %135, i64 1, !dbg !48
  %224 = bitcast <2 x i32> %223 to <2 x float>, !dbg !48
  %225 = fadd <2 x float> %220, %224, !dbg !50
  %226 = fsub <2 x float> %225, %221, !dbg !51
  %227 = insertelement <2 x i32> poison, i32 %59, i64 0, !dbg !52
  %228 = bitcast <2 x i32> %227 to <2 x float>, !dbg !52
  %229 = shufflevector <2 x float> %228, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !52
  %230 = fmul <2 x float> %226, %229, !dbg !52
  %231 = fadd <2 x float> %221, %230, !dbg !53
  %232 = extractelement <2 x float> %180, i64 0, !dbg !54
  %233 = extractelement <2 x float> %180, i64 1, !dbg !55
  %234 = fsub float %232, %233, !dbg !54
  %235 = extractelement <2 x float> %197, i64 0, !dbg !54
  %236 = extractelement <2 x float> %197, i64 1, !dbg !55
  %237 = fsub float %235, %236, !dbg !54
  %238 = extractelement <2 x float> %214, i64 0, !dbg !54
  %239 = extractelement <2 x float> %214, i64 1, !dbg !55
  %240 = fsub float %238, %239, !dbg !54
  %241 = extractelement <2 x float> %231, i64 0, !dbg !54
  %242 = extractelement <2 x float> %231, i64 1, !dbg !55
  %243 = fsub float %241, %242, !dbg !54
  %244 = fmul float %234, %67, !dbg !56
  %245 = fmul float %237, %69, !dbg !56
  %246 = fmul float %240, %71, !dbg !56
  %247 = fmul float %243, %73, !dbg !56
  %248 = fadd float %233, %244, !dbg !55
  %249 = fadd float %236, %245, !dbg !55
  %250 = fadd float %239, %246, !dbg !55
  %251 = fadd float %242, %247, !dbg !55
  %252 = sext i32 %16 to i64, !dbg !57
  %253 = getelementptr float, ptr addrspace(1) %0, i64 %252, !dbg !57
  %254 = bitcast float %248 to i32, !dbg !58
  %255 = bitcast float %249 to i32, !dbg !58
  %256 = bitcast float %250 to i32, !dbg !58
  %257 = bitcast float %251 to i32, !dbg !58
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %254, i32 %255, i32 %256, i32 %257, ptr addrspace(1) %253, i1 true) #1, !dbg !58
  ret void, !dbg !59
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cegr2ftqgbufthklcofhqmmzsy5l6pvuccoisaipucoiyvd4otxa.py", directory: "inductor_cache/eg")
!4 = !{ptr @triton_poi_fused__unsafe_index_add_convolution_mul_sub_56, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__unsafe_index_add_convolution_mul_sub_56, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__unsafe_index_add_convolution_mul_sub_56", linkageName: "triton_poi_fused__unsafe_index_add_convolution_mul_sub_56", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 27, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 27, column: 29, scope: !7)
!19 = !DILocation(line: 29, column: 30, scope: !7)
!20 = !DILocation(line: 29, column: 35, scope: !7)
!21 = !DILocation(line: 30, column: 30, scope: !7)
!22 = !DILocation(line: 30, column: 35, scope: !7)
!23 = !DILocation(line: 31, column: 31, scope: !7)
!24 = !DILocation(line: 31, column: 36, scope: !7)
!25 = !DILocation(line: 32, column: 31, scope: !7)
!26 = !DILocation(line: 32, column: 36, scope: !7)
!27 = !DILocation(line: 33, column: 31, scope: !7)
!28 = !DILocation(line: 33, column: 36, scope: !7)
!29 = !DILocation(line: 34, column: 31, scope: !7)
!30 = !DILocation(line: 34, column: 36, scope: !7)
!31 = !DILocation(line: 35, column: 31, scope: !7)
!32 = !DILocation(line: 35, column: 36, scope: !7)
!33 = !DILocation(line: 39, column: 32, scope: !7)
!34 = !DILocation(line: 42, column: 32, scope: !7)
!35 = !DILocation(line: 43, column: 39, scope: !7)
!36 = !DILocation(line: 43, column: 48, scope: !7)
!37 = !DILocation(line: 43, column: 46, scope: !7)
!38 = !DILocation(line: 43, column: 30, scope: !7)
!39 = !DILocation(line: 43, column: 53, scope: !7)
!40 = !DILocation(line: 47, column: 35, scope: !7)
!41 = !DILocation(line: 48, column: 31, scope: !7)
!42 = !DILocation(line: 48, column: 55, scope: !7)
!43 = !DILocation(line: 55, column: 35, scope: !7)
!44 = !DILocation(line: 56, column: 40, scope: !7)
!45 = !DILocation(line: 56, column: 31, scope: !7)
!46 = !DILocation(line: 56, column: 55, scope: !7)
!47 = !DILocation(line: 58, column: 31, scope: !7)
!48 = !DILocation(line: 58, column: 56, scope: !7)
!49 = !DILocation(line: 57, column: 20, scope: !7)
!50 = !DILocation(line: 59, column: 20, scope: !7)
!51 = !DILocation(line: 60, column: 20, scope: !7)
!52 = !DILocation(line: 61, column: 20, scope: !7)
!53 = !DILocation(line: 62, column: 20, scope: !7)
!54 = !DILocation(line: 63, column: 20, scope: !7)
!55 = !DILocation(line: 65, column: 20, scope: !7)
!56 = !DILocation(line: 64, column: 20, scope: !7)
!57 = !DILocation(line: 66, column: 28, scope: !7)
!58 = !DILocation(line: 66, column: 40, scope: !7)
!59 = !DILocation(line: 66, column: 4, scope: !7)
