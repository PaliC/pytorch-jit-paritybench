#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [2, 1], order = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 2], order = [0, 1]}>
#loc = loc("inductor_cache/pi/cpiavkrapjohffoyor5ae5o3hiv5dgh2rkuzaxsri7qdslpqpaeo.py":19:0)
#loc1 = loc(unknown)
#loc9 = loc("inductor_cache/pi/cpiavkrapjohffoyor5ae5o3hiv5dgh2rkuzaxsri7qdslpqpaeo.py":35:24)
#loc22 = loc(callsite(#loc1 at #loc9))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 2 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_per_fused_div_mul_norm_2(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/pi/cpiavkrapjohffoyor5ae5o3hiv5dgh2rkuzaxsri7qdslpqpaeo.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/pi/cpiavkrapjohffoyor5ae5o3hiv5dgh2rkuzaxsri7qdslpqpaeo.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/pi/cpiavkrapjohffoyor5ae5o3hiv5dgh2rkuzaxsri7qdslpqpaeo.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/pi/cpiavkrapjohffoyor5ae5o3hiv5dgh2rkuzaxsri7qdslpqpaeo.py":19:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/pi/cpiavkrapjohffoyor5ae5o3hiv5dgh2rkuzaxsri7qdslpqpaeo.py":19:0)) attributes {noinline = false} {
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %0 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc2)
    %1 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc2)
    %2 = tt.expand_dims %0 {axis = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x16xi32, #blocked> loc(#loc2)
    %3 = tt.expand_dims %1 {axis = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x16xi32, #blocked1> loc(#loc2)
    %4 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc3)
    %5 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1x16x!tt.ptr<f32>, #blocked1> loc(#loc3)
    %6 = tt.addptr %4, %2 : tensor<1x16x!tt.ptr<f32>, #blocked>, tensor<1x16xi32, #blocked> loc(#loc3)
    %7 = tt.addptr %5, %3 : tensor<1x16x!tt.ptr<f32>, #blocked1>, tensor<1x16xi32, #blocked1> loc(#loc3)
    %8 = tt.load %6 : tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc4)
    %9 = tt.load %7 : tensor<1x16x!tt.ptr<f32>, #blocked1> loc(#loc4)
    %10 = tt.addptr %arg2, %c0_i32 : !tt.ptr<f32>, i32 loc(#loc5)
    %11 = tt.load %10 : !tt.ptr<f32> loc(#loc6)
    %12 = arith.mulf %8, %8 : tensor<1x16xf32, #blocked> loc(#loc7)
    %13 = arith.mulf %9, %9 : tensor<1x16xf32, #blocked1> loc(#loc7)
    %14 = "tt.reduce"(%12) <{axis = 1 : i32}> ({
    ^bb0(%arg5: f32 loc(callsite(#loc1 at #loc9)), %arg6: f32 loc(callsite(#loc1 at #loc9))):
      %28 = arith.addf %arg5, %arg6 : f32 loc(#loc24)
      tt.reduce.return %28 : f32 loc(#loc21)
    }) : (tensor<1x16xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc21)
    %15 = "tt.reduce"(%13) <{axis = 1 : i32}> ({
    ^bb0(%arg5: f32 loc(callsite(#loc1 at #loc9)), %arg6: f32 loc(callsite(#loc1 at #loc9))):
      %28 = arith.addf %arg5, %arg6 : f32 loc(#loc24)
      tt.reduce.return %28 : f32 loc(#loc21)
    }) : (tensor<1x16xf32, #blocked1>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc21)
    %16 = tt.expand_dims %14 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1x1xf32, #blocked> loc(#loc11)
    %17 = tt.expand_dims %15 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<1x1xf32, #blocked1> loc(#loc11)
    %18 = tt.extern_elementwise %16 {libname = "", libpath = "", pure = true, symbol = "__nv_sqrtf"} : (tensor<1x1xf32, #blocked>) -> tensor<1x1xf32, #blocked> loc(#loc12)
    %19 = tt.extern_elementwise %17 {libname = "", libpath = "", pure = true, symbol = "__nv_sqrtf"} : (tensor<1x1xf32, #blocked1>) -> tensor<1x1xf32, #blocked1> loc(#loc12)
    %20 = tt.splat %11 : f32 -> tensor<1x1xf32, #blocked> loc(#loc13)
    %21 = arith.divf %20, %18 : tensor<1x1xf32, #blocked> loc(#loc13)
    %22 = tt.broadcast %21 : tensor<1x1xf32, #blocked> -> tensor<1x16xf32, #blocked> loc(#loc13)
    %23 = arith.mulf %8, %22 : tensor<1x16xf32, #blocked> loc(#loc14)
    gpu.barrier loc(#loc15)
    %24 = tt.addptr %arg0, %c0_i32 : !tt.ptr<f32>, i32 loc(#loc16)
    %25 = tt.splat %24 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc17)
    tt.store %25, %19 : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc17)
    %26 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc18)
    %27 = tt.addptr %26, %2 : tensor<1x16x!tt.ptr<f32>, #blocked>, tensor<1x16xi32, #blocked> loc(#loc18)
    tt.store %27, %23 : tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc19)
    tt.return loc(#loc20)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/pi/cpiavkrapjohffoyor5ae5o3hiv5dgh2rkuzaxsri7qdslpqpaeo.py":26:34)
#loc3 = loc("inductor_cache/pi/cpiavkrapjohffoyor5ae5o3hiv5dgh2rkuzaxsri7qdslpqpaeo.py":30:30)
#loc4 = loc("inductor_cache/pi/cpiavkrapjohffoyor5ae5o3hiv5dgh2rkuzaxsri7qdslpqpaeo.py":30:35)
#loc5 = loc("inductor_cache/pi/cpiavkrapjohffoyor5ae5o3hiv5dgh2rkuzaxsri7qdslpqpaeo.py":31:30)
#loc6 = loc("inductor_cache/pi/cpiavkrapjohffoyor5ae5o3hiv5dgh2rkuzaxsri7qdslpqpaeo.py":31:19)
#loc7 = loc("inductor_cache/pi/cpiavkrapjohffoyor5ae5o3hiv5dgh2rkuzaxsri7qdslpqpaeo.py":33:18)
#loc8 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc10 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc11 = loc("inductor_cache/pi/cpiavkrapjohffoyor5ae5o3hiv5dgh2rkuzaxsri7qdslpqpaeo.py":35:27)
#loc12 = loc("inductor_cache/pi/cpiavkrapjohffoyor5ae5o3hiv5dgh2rkuzaxsri7qdslpqpaeo.py":36:26)
#loc13 = loc("inductor_cache/pi/cpiavkrapjohffoyor5ae5o3hiv5dgh2rkuzaxsri7qdslpqpaeo.py":37:18)
#loc14 = loc("inductor_cache/pi/cpiavkrapjohffoyor5ae5o3hiv5dgh2rkuzaxsri7qdslpqpaeo.py":38:18)
#loc15 = loc("inductor_cache/pi/cpiavkrapjohffoyor5ae5o3hiv5dgh2rkuzaxsri7qdslpqpaeo.py":39:4)
#loc16 = loc("inductor_cache/pi/cpiavkrapjohffoyor5ae5o3hiv5dgh2rkuzaxsri7qdslpqpaeo.py":40:28)
#loc17 = loc("inductor_cache/pi/cpiavkrapjohffoyor5ae5o3hiv5dgh2rkuzaxsri7qdslpqpaeo.py":40:70)
#loc18 = loc("inductor_cache/pi/cpiavkrapjohffoyor5ae5o3hiv5dgh2rkuzaxsri7qdslpqpaeo.py":41:25)
#loc19 = loc("inductor_cache/pi/cpiavkrapjohffoyor5ae5o3hiv5dgh2rkuzaxsri7qdslpqpaeo.py":41:71)
#loc20 = loc("inductor_cache/pi/cpiavkrapjohffoyor5ae5o3hiv5dgh2rkuzaxsri7qdslpqpaeo.py":41:4)
#loc21 = loc(callsite(#loc8 at #loc9))
#loc23 = loc(callsite(#loc10 at #loc8))
#loc24 = loc(callsite(#loc23 at #loc9))
