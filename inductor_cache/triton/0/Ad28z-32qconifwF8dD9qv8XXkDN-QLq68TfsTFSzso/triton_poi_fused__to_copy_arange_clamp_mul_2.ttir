#loc = loc("inductor_cache/4v/c4vyyiq7ty7k4wwiemlwwxxaelgdtjrocgm5eetnhnh3fxxqplca.py":19:0)
module {
  tt.func public @triton_poi_fused__to_copy_arange_clamp_mul_2(%arg0: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("inductor_cache/4v/c4vyyiq7ty7k4wwiemlwwxxaelgdtjrocgm5eetnhnh3fxxqplca.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0> : tensor<1xi64> loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc2)
    %0 = tt.addptr %arg0, %c0_i32 : !tt.ptr<i64>, i32 loc(#loc2)
    %1 = tt.splat %0 : !tt.ptr<i64> -> tensor<1x!tt.ptr<i64>> loc(#loc2)
    tt.store %1, %cst : tensor<1x!tt.ptr<i64>> loc(#loc3)
    tt.return loc(#loc4)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("inductor_cache/4v/c4vyyiq7ty7k4wwiemlwwxxaelgdtjrocgm5eetnhnh3fxxqplca.py":25:25)
#loc3 = loc("inductor_cache/4v/c4vyyiq7ty7k4wwiemlwwxxaelgdtjrocgm5eetnhnh3fxxqplca.py":25:64)
#loc4 = loc("inductor_cache/4v/c4vyyiq7ty7k4wwiemlwwxxaelgdtjrocgm5eetnhnh3fxxqplca.py":25:4)
