; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_14(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 6, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 4, !dbg !12
  %10 = and i32 %9, 15, !dbg !12
  %11 = or disjoint i32 %10, 16, !dbg !12
  %12 = or disjoint i32 %10, 32, !dbg !12
  %13 = or disjoint i32 %10, 48, !dbg !12
  %14 = shl i32 %8, 2, !dbg !12
  %15 = and i32 %14, 60, !dbg !12
  %16 = or disjoint i32 %7, %10, !dbg !13
  %17 = or disjoint i32 %7, %11, !dbg !13
  %18 = or disjoint i32 %7, %12, !dbg !13
  %19 = or disjoint i32 %7, %13, !dbg !13
  %20 = or disjoint i32 %7, %15, !dbg !13
  %21 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %22 = shl i32 %21, 6, !dbg !15
  %23 = or disjoint i32 %22, %15, !dbg !16
  %24 = or disjoint i32 %22, %10, !dbg !16
  %25 = or disjoint i32 %22, %11, !dbg !16
  %26 = or disjoint i32 %22, %12, !dbg !16
  %27 = or disjoint i32 %22, %13, !dbg !16
  %28 = icmp slt i32 %23, 256, !dbg !17
  %29 = icmp slt i32 %24, 256, !dbg !17
  %30 = icmp slt i32 %25, 256, !dbg !17
  %31 = icmp slt i32 %26, 256, !dbg !17
  %32 = icmp slt i32 %27, 256, !dbg !17
  %.frozen = freeze i32 %20, !dbg !18
  %33 = sdiv i32 %.frozen, 256, !dbg !18
  %34 = mul i32 %33, 256, !dbg !19
  %.decomposed = sub i32 %.frozen, %34, !dbg !19
  %35 = shl i32 %16, 8, !dbg !20
  %36 = shl i32 %17, 8, !dbg !20
  %37 = shl i32 %18, 8, !dbg !20
  %38 = shl i32 %19, 8, !dbg !20
  %39 = add i32 %23, %35, !dbg !21
  %40 = add i32 %23, %36, !dbg !21
  %41 = add i32 %23, %37, !dbg !21
  %42 = add i32 %23, %38, !dbg !21
  %43 = sext i32 %39 to i64, !dbg !22
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !22
  %45 = sext i32 %40 to i64, !dbg !22
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !22
  %47 = sext i32 %41 to i64, !dbg !22
  %48 = getelementptr float, ptr addrspace(1) %0, i64 %47, !dbg !22
  %49 = sext i32 %42 to i64, !dbg !22
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !22
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %44, i1 %28) #2, !dbg !23
  %52 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !23
  %53 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !23
  %54 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !23
  %55 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !23
  %56 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %46, i1 %28) #2, !dbg !23
  %57 = extractvalue { i32, i32, i32, i32 } %56, 0, !dbg !23
  %58 = extractvalue { i32, i32, i32, i32 } %56, 1, !dbg !23
  %59 = extractvalue { i32, i32, i32, i32 } %56, 2, !dbg !23
  %60 = extractvalue { i32, i32, i32, i32 } %56, 3, !dbg !23
  %61 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %48, i1 %28) #2, !dbg !23
  %62 = extractvalue { i32, i32, i32, i32 } %61, 0, !dbg !23
  %63 = extractvalue { i32, i32, i32, i32 } %61, 1, !dbg !23
  %64 = extractvalue { i32, i32, i32, i32 } %61, 2, !dbg !23
  %65 = extractvalue { i32, i32, i32, i32 } %61, 3, !dbg !23
  %66 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %50, i1 %28) #2, !dbg !23
  %67 = extractvalue { i32, i32, i32, i32 } %66, 0, !dbg !23
  %68 = extractvalue { i32, i32, i32, i32 } %66, 1, !dbg !23
  %69 = extractvalue { i32, i32, i32, i32 } %66, 2, !dbg !23
  %70 = extractvalue { i32, i32, i32, i32 } %66, 3, !dbg !23
  %71 = shl i32 %24, 8, !dbg !24
  %72 = shl i32 %25, 8, !dbg !24
  %73 = shl i32 %26, 8, !dbg !24
  %74 = shl i32 %27, 8, !dbg !24
  %75 = shl i32 %33, 16, !dbg !25
  %76 = add i32 %75, %.decomposed, !dbg !26
  %77 = add i32 %76, %71, !dbg !27
  %78 = add i32 %76, %72, !dbg !27
  %79 = add i32 %76, %73, !dbg !27
  %80 = add i32 %76, %74, !dbg !27
  %81 = sext i32 %77 to i64, !dbg !28
  %82 = getelementptr float, ptr addrspace(1) %1, i64 %81, !dbg !28
  %83 = sext i32 %78 to i64, !dbg !28
  %84 = getelementptr float, ptr addrspace(1) %1, i64 %83, !dbg !28
  %85 = sext i32 %79 to i64, !dbg !28
  %86 = getelementptr float, ptr addrspace(1) %1, i64 %85, !dbg !28
  %87 = sext i32 %80 to i64, !dbg !28
  %88 = getelementptr float, ptr addrspace(1) %1, i64 %87, !dbg !28
  %89 = shl i32 %8, 8, !dbg !29
  %90 = and i32 %89, 3840, !dbg !29
  %91 = or disjoint i32 %90, %10, !dbg !29
  %92 = and i32 %14, 1020, !dbg !29
  %93 = lshr exact i32 %90, 2, !dbg !29
  %94 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %93, !dbg !29
  %95 = getelementptr float, ptr addrspace(3) %94, i32 %91, !dbg !29
  %96 = insertelement <1 x i32> poison, i32 %52, i64 0, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %95, <1 x i32> %96, i1 true) #2, !dbg !29
  %97 = or disjoint i32 %91, 64, !dbg !29
  %98 = lshr i32 %97, 4, !dbg !29
  %99 = getelementptr float, ptr addrspace(3) @global_smem, i32 %98, !dbg !29
  %100 = getelementptr float, ptr addrspace(3) %99, i32 %97, !dbg !29
  %101 = insertelement <1 x i32> poison, i32 %53, i64 0, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %100, <1 x i32> %101, i1 true) #2, !dbg !29
  %102 = or disjoint i32 %91, 128, !dbg !29
  %103 = lshr i32 %102, 4, !dbg !29
  %104 = getelementptr float, ptr addrspace(3) @global_smem, i32 %103, !dbg !29
  %105 = getelementptr float, ptr addrspace(3) %104, i32 %102, !dbg !29
  %106 = insertelement <1 x i32> poison, i32 %54, i64 0, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %105, <1 x i32> %106, i1 true) #2, !dbg !29
  %107 = or disjoint i32 %91, 192, !dbg !29
  %108 = lshr i32 %107, 4, !dbg !29
  %109 = getelementptr float, ptr addrspace(3) @global_smem, i32 %108, !dbg !29
  %110 = getelementptr float, ptr addrspace(3) %109, i32 %107, !dbg !29
  %111 = insertelement <1 x i32> poison, i32 %55, i64 0, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %110, <1 x i32> %111, i1 true) #2, !dbg !29
  %112 = or disjoint i32 %91, 16, !dbg !29
  %113 = getelementptr float, ptr addrspace(3) %94, i32 %112, !dbg !29
  %114 = insertelement <1 x i32> poison, i32 %57, i64 0, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %113, <1 x i32> %114, i1 true) #2, !dbg !29
  %115 = or disjoint i32 %91, 80, !dbg !29
  %116 = lshr i32 %115, 4, !dbg !29
  %117 = and i32 %116, 244, !dbg !29
  %118 = getelementptr float, ptr addrspace(3) @global_smem, i32 %117, !dbg !29
  %119 = getelementptr float, ptr addrspace(3) %118, i32 %115, !dbg !29
  %120 = insertelement <1 x i32> poison, i32 %58, i64 0, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %119, <1 x i32> %120, i1 true) #2, !dbg !29
  %121 = or disjoint i32 %91, 144, !dbg !29
  %122 = lshr i32 %121, 4, !dbg !29
  %123 = and i32 %122, 248, !dbg !29
  %124 = getelementptr float, ptr addrspace(3) @global_smem, i32 %123, !dbg !29
  %125 = getelementptr float, ptr addrspace(3) %124, i32 %121, !dbg !29
  %126 = insertelement <1 x i32> poison, i32 %59, i64 0, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %125, <1 x i32> %126, i1 true) #2, !dbg !29
  %127 = or disjoint i32 %91, 208, !dbg !29
  %128 = lshr i32 %127, 4, !dbg !29
  %129 = and i32 %128, 252, !dbg !29
  %130 = getelementptr float, ptr addrspace(3) @global_smem, i32 %129, !dbg !29
  %131 = getelementptr float, ptr addrspace(3) %130, i32 %127, !dbg !29
  %132 = insertelement <1 x i32> poison, i32 %60, i64 0, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %131, <1 x i32> %132, i1 true) #2, !dbg !29
  %133 = or disjoint i32 %91, 32, !dbg !29
  %134 = getelementptr float, ptr addrspace(3) %94, i32 %133, !dbg !29
  %135 = insertelement <1 x i32> poison, i32 %62, i64 0, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %134, <1 x i32> %135, i1 true) #2, !dbg !29
  %136 = or disjoint i32 %91, 96, !dbg !29
  %137 = lshr i32 %136, 4, !dbg !29
  %138 = and i32 %137, 244, !dbg !29
  %139 = getelementptr float, ptr addrspace(3) @global_smem, i32 %138, !dbg !29
  %140 = getelementptr float, ptr addrspace(3) %139, i32 %136, !dbg !29
  %141 = insertelement <1 x i32> poison, i32 %63, i64 0, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %140, <1 x i32> %141, i1 true) #2, !dbg !29
  %142 = or disjoint i32 %91, 160, !dbg !29
  %143 = lshr i32 %142, 4, !dbg !29
  %144 = and i32 %143, 248, !dbg !29
  %145 = getelementptr float, ptr addrspace(3) @global_smem, i32 %144, !dbg !29
  %146 = getelementptr float, ptr addrspace(3) %145, i32 %142, !dbg !29
  %147 = insertelement <1 x i32> poison, i32 %64, i64 0, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %146, <1 x i32> %147, i1 true) #2, !dbg !29
  %148 = or disjoint i32 %91, 224, !dbg !29
  %149 = lshr i32 %148, 4, !dbg !29
  %150 = and i32 %149, 252, !dbg !29
  %151 = getelementptr float, ptr addrspace(3) @global_smem, i32 %150, !dbg !29
  %152 = getelementptr float, ptr addrspace(3) %151, i32 %148, !dbg !29
  %153 = insertelement <1 x i32> poison, i32 %65, i64 0, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %152, <1 x i32> %153, i1 true) #2, !dbg !29
  %154 = or disjoint i32 %91, 48, !dbg !29
  %155 = getelementptr float, ptr addrspace(3) %94, i32 %154, !dbg !29
  %156 = insertelement <1 x i32> poison, i32 %67, i64 0, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %155, <1 x i32> %156, i1 true) #2, !dbg !29
  %157 = or disjoint i32 %91, 112, !dbg !29
  %158 = lshr i32 %157, 4, !dbg !29
  %159 = and i32 %158, 244, !dbg !29
  %160 = getelementptr float, ptr addrspace(3) @global_smem, i32 %159, !dbg !29
  %161 = getelementptr float, ptr addrspace(3) %160, i32 %157, !dbg !29
  %162 = insertelement <1 x i32> poison, i32 %68, i64 0, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %161, <1 x i32> %162, i1 true) #2, !dbg !29
  %163 = or disjoint i32 %91, 176, !dbg !29
  %164 = lshr i32 %163, 4, !dbg !29
  %165 = and i32 %164, 248, !dbg !29
  %166 = getelementptr float, ptr addrspace(3) @global_smem, i32 %165, !dbg !29
  %167 = getelementptr float, ptr addrspace(3) %166, i32 %163, !dbg !29
  %168 = insertelement <1 x i32> poison, i32 %69, i64 0, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %167, <1 x i32> %168, i1 true) #2, !dbg !29
  %169 = or disjoint i32 %91, 240, !dbg !29
  %170 = lshr i32 %169, 4, !dbg !29
  %171 = and i32 %170, 252, !dbg !29
  %172 = getelementptr float, ptr addrspace(3) @global_smem, i32 %171, !dbg !29
  %173 = getelementptr float, ptr addrspace(3) %172, i32 %169, !dbg !29
  %174 = insertelement <1 x i32> poison, i32 %70, i64 0, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %173, <1 x i32> %174, i1 true) #2, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %175 = lshr i32 %14, 4, !dbg !29
  %176 = and i32 %175, 60, !dbg !29
  %177 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %176, !dbg !29
  %178 = getelementptr inbounds float, ptr addrspace(3) %177, i32 %92, !dbg !29
  %179 = or disjoint i32 %92, 1024, !dbg !29
  %180 = lshr i32 %179, 4, !dbg !29
  %181 = and i32 %180, 124, !dbg !29
  %182 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %181, !dbg !29
  %183 = getelementptr inbounds float, ptr addrspace(3) %182, i32 %179, !dbg !29
  %184 = load <4 x i32>, ptr addrspace(3) %183, align 16, !dbg !29
  %185 = or disjoint i32 %92, 2048, !dbg !29
  %186 = lshr i32 %185, 4, !dbg !29
  %187 = and i32 %186, 188, !dbg !29
  %188 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %187, !dbg !29
  %189 = getelementptr inbounds float, ptr addrspace(3) %188, i32 %185, !dbg !29
  %190 = load <4 x i32>, ptr addrspace(3) %189, align 16, !dbg !29
  %191 = or disjoint i32 %92, 3072, !dbg !29
  %192 = lshr i32 %191, 4, !dbg !29
  %193 = and i32 %192, 252, !dbg !29
  %194 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %193, !dbg !29
  %195 = getelementptr inbounds float, ptr addrspace(3) %194, i32 %191, !dbg !29
  %196 = load <4 x i32>, ptr addrspace(3) %195, align 16, !dbg !29
  %.extract = load i32, ptr addrspace(3) %178, align 16, !dbg !29
  %197 = getelementptr inbounds i8, ptr addrspace(3) %178, i32 4, !dbg !29
  %.extract16 = load i32, ptr addrspace(3) %197, align 4, !dbg !29
  %198 = getelementptr inbounds i8, ptr addrspace(3) %178, i32 8, !dbg !29
  %.extract17 = load i32, ptr addrspace(3) %198, align 8, !dbg !29
  %199 = getelementptr inbounds i8, ptr addrspace(3) %178, i32 12, !dbg !29
  %.extract18 = load i32, ptr addrspace(3) %199, align 4, !dbg !29
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract16, i32 %.extract17, i32 %.extract18, ptr addrspace(1) %82, i1 %29) #2, !dbg !29
  %.extract19 = extractelement <4 x i32> %184, i64 0, !dbg !29
  %.extract20 = extractelement <4 x i32> %184, i64 1, !dbg !29
  %.extract21 = extractelement <4 x i32> %184, i64 2, !dbg !29
  %.extract22 = extractelement <4 x i32> %184, i64 3, !dbg !29
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract19, i32 %.extract20, i32 %.extract21, i32 %.extract22, ptr addrspace(1) %84, i1 %30) #2, !dbg !29
  %.extract23 = extractelement <4 x i32> %190, i64 0, !dbg !29
  %.extract24 = extractelement <4 x i32> %190, i64 1, !dbg !29
  %.extract25 = extractelement <4 x i32> %190, i64 2, !dbg !29
  %.extract26 = extractelement <4 x i32> %190, i64 3, !dbg !29
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract23, i32 %.extract24, i32 %.extract25, i32 %.extract26, ptr addrspace(1) %86, i1 %31) #2, !dbg !29
  %.extract27 = extractelement <4 x i32> %196, i64 0, !dbg !29
  %.extract28 = extractelement <4 x i32> %196, i64 1, !dbg !29
  %.extract29 = extractelement <4 x i32> %196, i64 2, !dbg !29
  %.extract30 = extractelement <4 x i32> %196, i64 3, !dbg !29
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract27, i32 %.extract28, i32 %.extract29, i32 %.extract30, ptr addrspace(1) %88, i1 %32) #2, !dbg !29
  %200 = getelementptr float, ptr addrspace(1) %2, i64 %81, !dbg !30
  %201 = getelementptr float, ptr addrspace(1) %2, i64 %83, !dbg !30
  %202 = getelementptr float, ptr addrspace(1) %2, i64 %85, !dbg !30
  %203 = getelementptr float, ptr addrspace(1) %2, i64 %87, !dbg !30
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract16, i32 %.extract17, i32 %.extract18, ptr addrspace(1) %200, i1 %29) #2, !dbg !31
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract19, i32 %.extract20, i32 %.extract21, i32 %.extract22, ptr addrspace(1) %201, i1 %30) #2, !dbg !31
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract23, i32 %.extract24, i32 %.extract25, i32 %.extract26, ptr addrspace(1) %202, i1 %31) #2, !dbg !31
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract27, i32 %.extract28, i32 %.extract29, i32 %.extract30, ptr addrspace(1) %203, i1 %32) #2, !dbg !31
  ret void, !dbg !32
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "crxoflnoitpw3jsrpdfoln5czjvm2intd2qihpfugenm6ijwyw6j.py", directory: "inductor_cache/rx")
!4 = !{ptr @triton_poi_fused_convolution_14, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_14, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_14", linkageName: "triton_poi_fused_convolution_14", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 23, scope: !7)
!17 = !DILocation(line: 27, column: 21, scope: !7)
!18 = !DILocation(line: 31, column: 19, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 32, column: 39, scope: !7)
!21 = !DILocation(line: 32, column: 35, scope: !7)
!22 = !DILocation(line: 32, column: 30, scope: !7)
!23 = !DILocation(line: 32, column: 44, scope: !7)
!24 = !DILocation(line: 33, column: 34, scope: !7)
!25 = !DILocation(line: 33, column: 45, scope: !7)
!26 = !DILocation(line: 33, column: 30, scope: !7)
!27 = !DILocation(line: 33, column: 39, scope: !7)
!28 = !DILocation(line: 33, column: 25, scope: !7)
!29 = !DILocation(line: 33, column: 56, scope: !7)
!30 = !DILocation(line: 34, column: 25, scope: !7)
!31 = !DILocation(line: 34, column: 56, scope: !7)
!32 = !DILocation(line: 34, column: 4, scope: !7)
