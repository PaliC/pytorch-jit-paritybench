; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_35(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 2, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 6, !dbg !12
  %.lobit = and i32 %9, 1, !dbg !12
  %10 = or disjoint i32 %.lobit, 2, !dbg !12
  %11 = or disjoint i32 %7, %.lobit, !dbg !13
  %12 = or disjoint i32 %7, %10, !dbg !13
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %14 = shl i32 %13, 8, !dbg !15
  %15 = and i32 %8, 127, !dbg !16
  %16 = or disjoint i32 %15, 128, !dbg !16
  %17 = shl i32 %8, 2, !dbg !16
  %18 = and i32 %17, 252, !dbg !16
  %19 = or disjoint i32 %14, %15, !dbg !17
  %20 = or disjoint i32 %14, %16, !dbg !17
  %21 = or disjoint i32 %14, %18, !dbg !17
  %22 = icmp slt i32 %19, 256, !dbg !18
  %23 = icmp slt i32 %20, 256, !dbg !18
  %24 = icmp slt i32 %21, 256, !dbg !18
  %.frozen = freeze i32 %7, !dbg !19
  %25 = sdiv i32 %.frozen, 256, !dbg !19
  %26 = mul i32 %25, 256, !dbg !20
  %.decomposed = sub i32 %.frozen, %26, !dbg !20
  %27 = shl i32 %19, 8, !dbg !21
  %28 = shl i32 %20, 8, !dbg !21
  %29 = shl i32 %25, 16, !dbg !22
  %30 = add i32 %29, %.decomposed, !dbg !23
  %31 = add i32 %30, %27, !dbg !24
  %32 = add i32 %30, %28, !dbg !24
  %33 = sext i32 %31 to i64, !dbg !25
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !25
  %35 = sext i32 %32 to i64, !dbg !25
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !25
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %34, i1 %22) #2, !dbg !26
  %38 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !26
  %39 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !26
  %40 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !26
  %41 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !26
  %42 = bitcast i32 %38 to float, !dbg !26
  %43 = bitcast i32 %39 to float, !dbg !26
  %44 = bitcast i32 %40 to float, !dbg !26
  %45 = bitcast i32 %41 to float, !dbg !26
  %46 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %36, i1 %23) #2, !dbg !26
  %47 = extractvalue { i32, i32, i32, i32 } %46, 0, !dbg !26
  %48 = extractvalue { i32, i32, i32, i32 } %46, 1, !dbg !26
  %49 = extractvalue { i32, i32, i32, i32 } %46, 2, !dbg !26
  %50 = extractvalue { i32, i32, i32, i32 } %46, 3, !dbg !26
  %51 = bitcast i32 %47 to float, !dbg !26
  %52 = bitcast i32 %48 to float, !dbg !26
  %53 = bitcast i32 %49 to float, !dbg !26
  %54 = bitcast i32 %50 to float, !dbg !26
  %55 = sext i32 %.decomposed to i64, !dbg !27
  %56 = getelementptr float, ptr addrspace(1) %1, i64 %55, !dbg !27
  %57 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %56, i1 true) #2, !dbg !28
  %58 = extractvalue { i32, i32, i32, i32 } %57, 0, !dbg !28
  %59 = extractvalue { i32, i32, i32, i32 } %57, 1, !dbg !28
  %60 = extractvalue { i32, i32, i32, i32 } %57, 2, !dbg !28
  %61 = extractvalue { i32, i32, i32, i32 } %57, 3, !dbg !28
  %62 = bitcast i32 %58 to float, !dbg !28
  %63 = bitcast i32 %59 to float, !dbg !28
  %64 = bitcast i32 %60 to float, !dbg !28
  %65 = bitcast i32 %61 to float, !dbg !28
  %66 = fadd float %42, %62, !dbg !29
  %67 = fadd float %43, %63, !dbg !29
  %68 = fadd float %44, %64, !dbg !29
  %69 = fadd float %45, %65, !dbg !29
  %70 = fadd float %51, %62, !dbg !29
  %71 = fadd float %52, %63, !dbg !29
  %72 = fadd float %53, %64, !dbg !29
  %73 = fadd float %54, %65, !dbg !29
  %74 = shl i32 %11, 8, !dbg !30
  %75 = shl i32 %12, 8, !dbg !30
  %76 = add i32 %21, %74, !dbg !31
  %77 = add i32 %21, %75, !dbg !31
  %78 = sext i32 %76 to i64, !dbg !32
  %79 = getelementptr float, ptr addrspace(1) %2, i64 %78, !dbg !32
  %80 = sext i32 %77 to i64, !dbg !32
  %81 = getelementptr float, ptr addrspace(1) %2, i64 %80, !dbg !32
  %82 = and i32 %17, 508, !dbg !33
  %83 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !33
  %84 = bitcast float %66 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %83, <1 x i32> %84, i1 true) #2, !dbg !33
  %85 = getelementptr inbounds i8, ptr addrspace(3) %83, i32 1028, !dbg !33
  %86 = bitcast float %67 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %85, <1 x i32> %86, i1 true) #2, !dbg !33
  %87 = getelementptr inbounds i8, ptr addrspace(3) %83, i32 2056, !dbg !33
  %88 = bitcast float %68 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %87, <1 x i32> %88, i1 true) #2, !dbg !33
  %89 = getelementptr inbounds i8, ptr addrspace(3) %83, i32 3084, !dbg !33
  %90 = bitcast float %69 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %89, <1 x i32> %90, i1 true) #2, !dbg !33
  %91 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %16, !dbg !33
  %92 = bitcast float %70 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %91, <1 x i32> %92, i1 true) #2, !dbg !33
  %93 = getelementptr inbounds i8, ptr addrspace(3) %83, i32 1540, !dbg !33
  %94 = bitcast float %71 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %93, <1 x i32> %94, i1 true) #2, !dbg !33
  %95 = getelementptr inbounds i8, ptr addrspace(3) %83, i32 2568, !dbg !33
  %96 = bitcast float %72 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %95, <1 x i32> %96, i1 true) #2, !dbg !33
  %97 = getelementptr inbounds i8, ptr addrspace(3) %83, i32 3596, !dbg !33
  %98 = bitcast float %73 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %97, <1 x i32> %98, i1 true) #2, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %99 = lshr i32 %82, 8, !dbg !33
  %100 = getelementptr float, ptr addrspace(3) @global_smem, i32 %99, !dbg !33
  %101 = getelementptr float, ptr addrspace(3) %100, i32 %82, !dbg !33
  %102 = load i32, ptr addrspace(3) %101, align 4, !dbg !33
  %103 = or disjoint i32 %82, 1, !dbg !33
  %104 = getelementptr float, ptr addrspace(3) %100, i32 %103, !dbg !33
  %105 = load i32, ptr addrspace(3) %104, align 4, !dbg !33
  %106 = or disjoint i32 %82, 2, !dbg !33
  %107 = getelementptr float, ptr addrspace(3) %100, i32 %106, !dbg !33
  %108 = load i32, ptr addrspace(3) %107, align 4, !dbg !33
  %109 = or disjoint i32 %82, 3, !dbg !33
  %110 = getelementptr float, ptr addrspace(3) %100, i32 %109, !dbg !33
  %111 = load i32, ptr addrspace(3) %110, align 4, !dbg !33
  %112 = or disjoint i32 %82, 512, !dbg !33
  %113 = lshr i32 %112, 8, !dbg !33
  %114 = getelementptr float, ptr addrspace(3) @global_smem, i32 %113, !dbg !33
  %115 = getelementptr float, ptr addrspace(3) %114, i32 %112, !dbg !33
  %116 = load i32, ptr addrspace(3) %115, align 4, !dbg !33
  %117 = or disjoint i32 %82, 513, !dbg !33
  %118 = lshr i32 %117, 8, !dbg !33
  %119 = getelementptr float, ptr addrspace(3) @global_smem, i32 %118, !dbg !33
  %120 = getelementptr float, ptr addrspace(3) %119, i32 %117, !dbg !33
  %121 = load i32, ptr addrspace(3) %120, align 4, !dbg !33
  %122 = or disjoint i32 %82, 514, !dbg !33
  %123 = lshr i32 %122, 8, !dbg !33
  %124 = getelementptr float, ptr addrspace(3) @global_smem, i32 %123, !dbg !33
  %125 = getelementptr float, ptr addrspace(3) %124, i32 %122, !dbg !33
  %126 = load i32, ptr addrspace(3) %125, align 4, !dbg !33
  %127 = or disjoint i32 %82, 515, !dbg !33
  %128 = lshr i32 %127, 8, !dbg !33
  %129 = getelementptr float, ptr addrspace(3) @global_smem, i32 %128, !dbg !33
  %130 = getelementptr float, ptr addrspace(3) %129, i32 %127, !dbg !33
  %131 = load i32, ptr addrspace(3) %130, align 4, !dbg !33
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %102, i32 %105, i32 %108, i32 %111, ptr addrspace(1) %79, i1 %24) #2, !dbg !33
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %116, i32 %121, i32 %126, i32 %131, ptr addrspace(1) %81, i1 %24) #2, !dbg !33
  ret void, !dbg !34
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cccqmr6lfplpaw7v6g5twhc5kzzhg4yqt4cwvofu6qdg5v7afttr.py", directory: "inductor_cache/cc")
!4 = !{ptr @triton_poi_fused_convolution_35, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_35, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_35", linkageName: "triton_poi_fused_convolution_35", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 39, scope: !7)
!22 = !DILocation(line: 32, column: 50, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 44, scope: !7)
!25 = !DILocation(line: 32, column: 30, scope: !7)
!26 = !DILocation(line: 32, column: 55, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 33, column: 35, scope: !7)
!29 = !DILocation(line: 34, column: 18, scope: !7)
!30 = !DILocation(line: 35, column: 34, scope: !7)
!31 = !DILocation(line: 35, column: 30, scope: !7)
!32 = !DILocation(line: 35, column: 25, scope: !7)
!33 = !DILocation(line: 35, column: 45, scope: !7)
!34 = !DILocation(line: 35, column: 4, scope: !7)
