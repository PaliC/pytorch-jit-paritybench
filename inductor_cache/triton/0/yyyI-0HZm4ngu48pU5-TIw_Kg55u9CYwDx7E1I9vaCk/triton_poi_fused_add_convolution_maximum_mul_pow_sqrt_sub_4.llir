; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_add_convolution_maximum_mul_pow_sqrt_sub_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %9 = shl i32 %8, 8, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 1, !dbg !12
  %12 = and i32 %11, 254, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %14 = or disjoint i32 %13, 1, !dbg !13
  %15 = icmp slt i32 %13, 1024, !dbg !14
  %16 = sdiv i32 %13, 64, !dbg !15
  %17 = srem i32 %16, 4, !dbg !16
  %.frozen = freeze i32 %13, !dbg !17
  %18 = sdiv i32 %.frozen, 8, !dbg !17
  %19 = mul i32 %18, 8, !dbg !18
  %.decomposed = sub i32 %.frozen, %19, !dbg !18
  %20 = srem i32 %14, 8, !dbg !18
  %21 = srem i32 %18, 8, !dbg !19
  %22 = sext i32 %13 to i64, !dbg !20
  %23 = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !20
  %24 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %23, i1 %15) #3, !dbg !21
  %25 = extractvalue { i32, i32 } %24, 0, !dbg !21
  %26 = extractvalue { i32, i32 } %24, 1, !dbg !21
  %27 = bitcast i32 %25 to float, !dbg !21
  %28 = bitcast i32 %26 to float, !dbg !21
  %29 = sext i32 %17 to i64, !dbg !22
  %30 = getelementptr float, ptr addrspace(1) %1, i64 %29, !dbg !22
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 %15) #3, !dbg !23
  %32 = bitcast i32 %31 to float, !dbg !23
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 %15) #3, !dbg !23
  %34 = bitcast i32 %33 to float, !dbg !23
  %35 = getelementptr float, ptr addrspace(1) %2, i64 %22, !dbg !24
  %36 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %35, i1 %15) #3, !dbg !25
  %.lhs.trunc = trunc nsw i32 %21 to i8, !dbg !26
  %37 = sdiv i8 %.lhs.trunc, 2, !dbg !26
  %.sext = sext i8 %37 to i32, !dbg !26
  %38 = shl nsw i32 %.sext, 2, !dbg !27
  %.lhs.trunc8 = trunc nsw i32 %20 to i8, !dbg !28
  %.lhs.trunc8.frozen = freeze i8 %.lhs.trunc8, !dbg !29
  %39 = sdiv i8 %.lhs.trunc8.frozen, 2, !dbg !29
  %40 = mul i8 %39, 2, !dbg !28
  %.decomposed16 = sub i8 %.lhs.trunc8.frozen, %40, !dbg !28
  %.sext9 = sext i8 %.decomposed16 to i32, !dbg !28
  %41 = shl nsw i32 %.sext9, 4, !dbg !30
  %42 = mul i8 %37, 2, !dbg !31
  %.decomposed17 = sub i8 %.lhs.trunc, %42, !dbg !31
  %.sext11 = sext i8 %.decomposed17 to i32, !dbg !31
  %43 = shl nsw i32 %.sext11, 5, !dbg !32
  %44 = shl nsw i32 %16, 6, !dbg !33
  %.lhs.trunc12 = trunc nsw i32 %.decomposed to i8, !dbg !29
  %45 = ashr exact i8 %.lhs.trunc12, 1, !dbg !29
  %.sext13 = sext i8 %45 to i32, !dbg !29
  %.sext15 = sext i8 %39 to i32, !dbg !29
  %46 = add i32 %43, %44, !dbg !34
  %47 = add i32 %46, %.sext13, !dbg !35
  %48 = add i32 %47, %38, !dbg !36
  %49 = add i32 %38, %44, !dbg !37
  %50 = add i32 %49, %.sext15, !dbg !34
  %51 = add i32 %50, %41, !dbg !35
  %52 = add i32 %51, %43, !dbg !36
  %53 = sext i32 %48 to i64, !dbg !38
  %54 = getelementptr float, ptr addrspace(1) %3, i64 %53, !dbg !38
  %55 = sext i32 %52 to i64, !dbg !38
  %56 = getelementptr float, ptr addrspace(1) %3, i64 %55, !dbg !38
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 %15) #3, !dbg !39
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 %15) #3, !dbg !39
  %59 = shl nsw i32 %.sext11, 1, !dbg !40
  %60 = shl nsw i32 %17, 2, !dbg !41
  %61 = add nsw i32 %59, %60, !dbg !42
  %62 = add nsw i32 %61, %.sext9, !dbg !43
  %63 = sext i32 %61 to i64, !dbg !44
  %64 = getelementptr float, ptr addrspace(1) %4, i64 %63, !dbg !44
  %65 = sext i32 %62 to i64, !dbg !44
  %66 = getelementptr float, ptr addrspace(1) %4, i64 %65, !dbg !44
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 %15) #3, !dbg !45
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 %15) #3, !dbg !45
  %69 = fadd float %27, %32, !dbg !46
  %70 = fadd float %28, %34, !dbg !46
  %71 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !47
  %.not.i = icmp eq i32 %71, 0, !dbg !47
  %72 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !47
  %.not1.i = icmp eq i32 %72, 0, !dbg !47
  br i1 %.not.i, label %78, label %73, !dbg !47

73:                                               ; preds = %7
  br i1 %.not1.i, label %76, label %74, !dbg !47

74:                                               ; preds = %73
  %75 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %69) #3, !dbg !47
  br label %__nv_sqrtf.exit, !dbg !47

76:                                               ; preds = %73
  %77 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %69) #3, !dbg !47
  br label %__nv_sqrtf.exit, !dbg !47

78:                                               ; preds = %7
  br i1 %.not1.i, label %81, label %79, !dbg !47

79:                                               ; preds = %78
  %80 = tail call float @llvm.nvvm.sqrt.rn.f(float %69) #3, !dbg !47
  br label %__nv_sqrtf.exit, !dbg !47

81:                                               ; preds = %78
  %82 = tail call float @llvm.nvvm.sqrt.approx.f(float %69) #3, !dbg !47
  br label %__nv_sqrtf.exit, !dbg !47

__nv_sqrtf.exit:                                  ; preds = %74, %76, %79, %81
  %.0.i = phi float [ %75, %74 ], [ %77, %76 ], [ %80, %79 ], [ %82, %81 ], !dbg !47
  %83 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !47
  %.not.i1 = icmp eq i32 %83, 0, !dbg !47
  %84 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !47
  %.not1.i4 = icmp eq i32 %84, 0, !dbg !47
  br i1 %.not.i1, label %90, label %85, !dbg !47

85:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %88, label %86, !dbg !47

86:                                               ; preds = %85
  %87 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %70) #3, !dbg !47
  br label %__nv_sqrtf.exit5, !dbg !47

88:                                               ; preds = %85
  %89 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %70) #3, !dbg !47
  br label %__nv_sqrtf.exit5, !dbg !47

90:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %93, label %91, !dbg !47

91:                                               ; preds = %90
  %92 = tail call float @llvm.nvvm.sqrt.rn.f(float %70) #3, !dbg !47
  br label %__nv_sqrtf.exit5, !dbg !47

93:                                               ; preds = %90
  %94 = tail call float @llvm.nvvm.sqrt.approx.f(float %70) #3, !dbg !47
  br label %__nv_sqrtf.exit5, !dbg !47

__nv_sqrtf.exit5:                                 ; preds = %86, %88, %91, %93
  %.0.i3 = phi float [ %87, %86 ], [ %89, %88 ], [ %92, %91 ], [ %94, %93 ], !dbg !47
  %95 = bitcast i32 %68 to float, !dbg !45
  %96 = bitcast i32 %67 to float, !dbg !45
  %97 = bitcast i32 %58 to float, !dbg !39
  %98 = bitcast i32 %57 to float, !dbg !39
  %99 = extractvalue { i32, i32 } %36, 1, !dbg !25
  %100 = bitcast i32 %99 to float, !dbg !25
  %101 = extractvalue { i32, i32 } %36, 0, !dbg !25
  %102 = bitcast i32 %101 to float, !dbg !25
  %103 = fmul float %.0.i, %102, !dbg !48
  %104 = fmul float %.0.i3, %100, !dbg !48
  %105 = fadd float %98, %96, !dbg !49
  %106 = fadd float %97, %95, !dbg !49
  %107 = fadd float %105, %103, !dbg !50
  %108 = fadd float %106, %104, !dbg !50
  %109 = bitcast float %69 to i32, !dbg !51
  %110 = bitcast float %70 to i32, !dbg !51
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %109, i32 %110, ptr addrspace(1) %23, i1 %15) #3, !dbg !51
  %111 = getelementptr float, ptr addrspace(1) %5, i64 %22, !dbg !52
  %112 = bitcast float %107 to i32, !dbg !53
  %113 = bitcast float %108 to i32, !dbg !53
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %112, i32 %113, ptr addrspace(1) %111, i1 %15) #3, !dbg !53
  ret void, !dbg !54
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cv5diiidotpoptegfpbe3agao4qd3sggzqammb65tgrrod5o6xtg.py", directory: "inductor_cache/v5")
!4 = !{ptr @triton_poi_fused_add_convolution_maximum_mul_pow_sqrt_sub_4, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_convolution_maximum_mul_pow_sqrt_sub_4, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_convolution_maximum_mul_pow_sqrt_sub_4", linkageName: "triton_poi_fused_add_convolution_maximum_mul_pow_sqrt_sub_4", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 21, scope: !7)
!16 = !DILocation(line: 25, column: 27, scope: !7)
!17 = !DILocation(line: 27, column: 21, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 27, column: 26, scope: !7)
!20 = !DILocation(line: 29, column: 34, scope: !7)
!21 = !DILocation(line: 29, column: 39, scope: !7)
!22 = !DILocation(line: 30, column: 30, scope: !7)
!23 = !DILocation(line: 30, column: 35, scope: !7)
!24 = !DILocation(line: 31, column: 30, scope: !7)
!25 = !DILocation(line: 31, column: 35, scope: !7)
!26 = !DILocation(line: 32, column: 39, scope: !7)
!27 = !DILocation(line: 32, column: 33, scope: !7)
!28 = !DILocation(line: 32, column: 54, scope: !7)
!29 = !DILocation(line: 32, column: 91, scope: !7)
!30 = !DILocation(line: 32, column: 49, scope: !7)
!31 = !DILocation(line: 32, column: 70, scope: !7)
!32 = !DILocation(line: 32, column: 65, scope: !7)
!33 = !DILocation(line: 32, column: 79, scope: !7)
!34 = !DILocation(line: 32, column: 60, scope: !7)
!35 = !DILocation(line: 32, column: 76, scope: !7)
!36 = !DILocation(line: 32, column: 85, scope: !7)
!37 = !DILocation(line: 32, column: 44, scope: !7)
!38 = !DILocation(line: 32, column: 30, scope: !7)
!39 = !DILocation(line: 32, column: 96, scope: !7)
!40 = !DILocation(line: 33, column: 34, scope: !7)
!41 = !DILocation(line: 33, column: 47, scope: !7)
!42 = !DILocation(line: 33, column: 45, scope: !7)
!43 = !DILocation(line: 33, column: 54, scope: !7)
!44 = !DILocation(line: 33, column: 30, scope: !7)
!45 = !DILocation(line: 33, column: 65, scope: !7)
!46 = !DILocation(line: 34, column: 18, scope: !7)
!47 = !DILocation(line: 35, column: 26, scope: !7)
!48 = !DILocation(line: 36, column: 18, scope: !7)
!49 = !DILocation(line: 37, column: 18, scope: !7)
!50 = !DILocation(line: 38, column: 18, scope: !7)
!51 = !DILocation(line: 39, column: 39, scope: !7)
!52 = !DILocation(line: 40, column: 25, scope: !7)
!53 = !DILocation(line: 40, column: 36, scope: !7)
!54 = !DILocation(line: 40, column: 4, scope: !7)
