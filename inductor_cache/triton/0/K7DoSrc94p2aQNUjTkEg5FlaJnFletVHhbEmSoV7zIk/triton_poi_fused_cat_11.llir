; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_cat_11(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, i32 %11) local_unnamed_addr !dbg !7 {
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %14 = shl i32 %13, 8, !dbg !11
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %16 = shl i32 %15, 1, !dbg !12
  %17 = and i32 %16, 254, !dbg !12
  %18 = or disjoint i32 %14, %17, !dbg !13
  %19 = or disjoint i32 %18, 1, !dbg !13
  %.frozen = freeze i32 %18, !dbg !14
  %20 = sdiv i32 %.frozen, 256, !dbg !14
  %21 = srem i32 %20, 52, !dbg !15
  %22 = mul i32 %20, 256, !dbg !16
  %.decomposed = sub i32 %.frozen, %22, !dbg !16
  %23 = srem i32 %19, 256, !dbg !16
  %24 = sdiv i32 %18, 13312, !dbg !17
  %25 = icmp slt i32 %21, 26, !dbg !18
  %26 = mul nsw i32 %.decomposed, 26, !dbg !19
  %27 = mul nsw i32 %23, 26, !dbg !19
  %28 = mul nsw i32 %24, 6656, !dbg !20
  %29 = add nsw i32 %26, %28, !dbg !21
  %30 = add nsw i32 %28, %27, !dbg !21
  %31 = add nsw i32 %29, %21, !dbg !22
  %32 = add nsw i32 %30, %21, !dbg !22
  %33 = sext i32 %31 to i64, !dbg !23
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !23
  %35 = sext i32 %32 to i64, !dbg !23
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !23
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %34, i1 %25, i32 0, i1 %25) #3, !dbg !24
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %36, i1 %25, i32 0, i1 %25) #3, !dbg !24
  %39 = sext i32 %21 to i64, !dbg !25
  %40 = getelementptr float, ptr addrspace(1) %1, i64 %39, !dbg !25
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %40, i1 %25, i32 0, i1 %25) #3, !dbg !26
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %40, i1 %25, i32 0, i1 %25) #3, !dbg !26
  %43 = getelementptr float, ptr addrspace(1) %2, i64 %39, !dbg !27
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %43, i1 %25, i32 0, i1 %25) #3, !dbg !28
  %45 = bitcast i32 %44 to float, !dbg !28
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %43, i1 %25, i32 0, i1 %25) #3, !dbg !28
  %47 = bitcast i32 %46 to float, !dbg !28
  %48 = fadd float %45, 0x3EE4F8B580000000, !dbg !29
  %49 = fadd float %47, 0x3EE4F8B580000000, !dbg !29
  %50 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i = icmp eq i32 %50, 0, !dbg !30
  %51 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i = icmp eq i32 %51, 0, !dbg !30
  br i1 %.not.i, label %57, label %52, !dbg !30

52:                                               ; preds = %12
  br i1 %.not1.i, label %55, label %53, !dbg !30

53:                                               ; preds = %52
  %54 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %48) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

55:                                               ; preds = %52
  %56 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %48) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

57:                                               ; preds = %12
  br i1 %.not1.i, label %60, label %58, !dbg !30

58:                                               ; preds = %57
  %59 = tail call float @llvm.nvvm.sqrt.rn.f(float %48) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

60:                                               ; preds = %57
  %61 = tail call float @llvm.nvvm.sqrt.approx.f(float %48) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

__nv_sqrtf.exit:                                  ; preds = %53, %55, %58, %60
  %.0.i = phi float [ %54, %53 ], [ %56, %55 ], [ %59, %58 ], [ %61, %60 ], !dbg !30
  %62 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i1 = icmp eq i32 %62, 0, !dbg !30
  %63 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i4 = icmp eq i32 %63, 0, !dbg !30
  br i1 %.not.i1, label %69, label %64, !dbg !30

64:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %67, label %65, !dbg !30

65:                                               ; preds = %64
  %66 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %49) #3, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

67:                                               ; preds = %64
  %68 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %49) #3, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

69:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %72, label %70, !dbg !30

70:                                               ; preds = %69
  %71 = tail call float @llvm.nvvm.sqrt.rn.f(float %49) #3, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

72:                                               ; preds = %69
  %73 = tail call float @llvm.nvvm.sqrt.approx.f(float %49) #3, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

__nv_sqrtf.exit5:                                 ; preds = %65, %67, %70, %72
  %.0.i3 = phi float [ %66, %65 ], [ %68, %67 ], [ %71, %70 ], [ %73, %72 ], !dbg !30
  %74 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !31
  %75 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !31
  %76 = getelementptr float, ptr addrspace(1) %3, i64 %39, !dbg !32
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %76, i1 %25, i32 0, i1 %25) #3, !dbg !33
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %76, i1 %25, i32 0, i1 %25) #3, !dbg !33
  %79 = getelementptr float, ptr addrspace(1) %4, i64 %39, !dbg !34
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %79, i1 %25, i32 0, i1 %25) #3, !dbg !35
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %79, i1 %25, i32 0, i1 %25) #3, !dbg !35
  %82 = icmp sgt i32 %21, 25, !dbg !36
  %83 = add nsw i32 %21, -26, !dbg !37
  %84 = add nsw i32 %29, %83, !dbg !38
  %85 = add nsw i32 %30, %83, !dbg !38
  %86 = sext i32 %84 to i64, !dbg !39
  %87 = getelementptr float, ptr addrspace(1) %5, i64 %86, !dbg !39
  %88 = sext i32 %85 to i64, !dbg !39
  %89 = getelementptr float, ptr addrspace(1) %5, i64 %88, !dbg !39
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %87, i1 %82, i32 0, i1 %82) #3, !dbg !40
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %89, i1 %82, i32 0, i1 %82) #3, !dbg !40
  %92 = sext i32 %83 to i64, !dbg !41
  %93 = getelementptr float, ptr addrspace(1) %6, i64 %92, !dbg !41
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %93, i1 %82, i32 0, i1 %82) #3, !dbg !42
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %93, i1 %82, i32 0, i1 %82) #3, !dbg !42
  %96 = getelementptr float, ptr addrspace(1) %7, i64 %92, !dbg !43
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %96, i1 %82, i32 0, i1 %82) #3, !dbg !44
  %98 = bitcast i32 %97 to float, !dbg !44
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %96, i1 %82, i32 0, i1 %82) #3, !dbg !44
  %100 = bitcast i32 %99 to float, !dbg !44
  %101 = fadd float %98, 0x3EE4F8B580000000, !dbg !45
  %102 = fadd float %100, 0x3EE4F8B580000000, !dbg !45
  %103 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !46
  %.not.i6 = icmp eq i32 %103, 0, !dbg !46
  %104 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !46
  %.not1.i9 = icmp eq i32 %104, 0, !dbg !46
  br i1 %.not.i6, label %110, label %105, !dbg !46

105:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %108, label %106, !dbg !46

106:                                              ; preds = %105
  %107 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %101) #3, !dbg !46
  br label %__nv_sqrtf.exit10, !dbg !46

108:                                              ; preds = %105
  %109 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %101) #3, !dbg !46
  br label %__nv_sqrtf.exit10, !dbg !46

110:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %113, label %111, !dbg !46

111:                                              ; preds = %110
  %112 = tail call float @llvm.nvvm.sqrt.rn.f(float %101) #3, !dbg !46
  br label %__nv_sqrtf.exit10, !dbg !46

113:                                              ; preds = %110
  %114 = tail call float @llvm.nvvm.sqrt.approx.f(float %101) #3, !dbg !46
  br label %__nv_sqrtf.exit10, !dbg !46

__nv_sqrtf.exit10:                                ; preds = %106, %108, %111, %113
  %.0.i8 = phi float [ %107, %106 ], [ %109, %108 ], [ %112, %111 ], [ %114, %113 ], !dbg !46
  %115 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !46
  %.not.i11 = icmp eq i32 %115, 0, !dbg !46
  %116 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !46
  %.not1.i14 = icmp eq i32 %116, 0, !dbg !46
  br i1 %.not.i11, label %122, label %117, !dbg !46

117:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %120, label %118, !dbg !46

118:                                              ; preds = %117
  %119 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %102) #3, !dbg !46
  br label %__nv_sqrtf.exit15, !dbg !46

120:                                              ; preds = %117
  %121 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %102) #3, !dbg !46
  br label %__nv_sqrtf.exit15, !dbg !46

122:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %125, label %123, !dbg !46

123:                                              ; preds = %122
  %124 = tail call float @llvm.nvvm.sqrt.rn.f(float %102) #3, !dbg !46
  br label %__nv_sqrtf.exit15, !dbg !46

125:                                              ; preds = %122
  %126 = tail call float @llvm.nvvm.sqrt.approx.f(float %102) #3, !dbg !46
  br label %__nv_sqrtf.exit15, !dbg !46

__nv_sqrtf.exit15:                                ; preds = %118, %120, %123, %125
  %.0.i13 = phi float [ %119, %118 ], [ %121, %120 ], [ %124, %123 ], [ %126, %125 ], !dbg !46
  %127 = insertelement <4 x i32> poison, i32 %91, i64 0, !dbg !40
  %128 = insertelement <4 x i32> %127, i32 %90, i64 1, !dbg !40
  %129 = insertelement <4 x i32> %128, i32 %37, i64 2, !dbg !40
  %130 = insertelement <4 x i32> %129, i32 %38, i64 3, !dbg !40
  %131 = bitcast <4 x i32> %130 to <4 x float>, !dbg !40
  %132 = insertelement <4 x i32> poison, i32 %95, i64 0, !dbg !42
  %133 = insertelement <4 x i32> %132, i32 %94, i64 1, !dbg !42
  %134 = insertelement <4 x i32> %133, i32 %41, i64 2, !dbg !42
  %135 = insertelement <4 x i32> %134, i32 %42, i64 3, !dbg !42
  %136 = bitcast <4 x i32> %135 to <4 x float>, !dbg !42
  %137 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !47
  %138 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !47
  %139 = getelementptr float, ptr addrspace(1) %8, i64 %92, !dbg !48
  %140 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %139, i1 %82, i32 0, i1 %82) #3, !dbg !49
  %141 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %139, i1 %82, i32 0, i1 %82) #3, !dbg !49
  %142 = getelementptr float, ptr addrspace(1) %9, i64 %92, !dbg !50
  %143 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %142, i1 %82, i32 0, i1 %82) #3, !dbg !51
  %144 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %142, i1 %82, i32 0, i1 %82) #3, !dbg !51
  %145 = fsub <4 x float> %131, %136, !dbg !52
  %146 = insertelement <4 x float> poison, float %138, i64 0, !dbg !53
  %147 = insertelement <4 x float> %146, float %137, i64 1, !dbg !53
  %148 = insertelement <4 x float> %147, float %74, i64 2, !dbg !53
  %149 = insertelement <4 x float> %148, float %75, i64 3, !dbg !53
  %150 = fmul <4 x float> %145, %149, !dbg !53
  %151 = insertelement <4 x i32> poison, i32 %141, i64 0, !dbg !49
  %152 = insertelement <4 x i32> %151, i32 %140, i64 1, !dbg !49
  %153 = insertelement <4 x i32> %152, i32 %77, i64 2, !dbg !49
  %154 = insertelement <4 x i32> %153, i32 %78, i64 3, !dbg !49
  %155 = bitcast <4 x i32> %154 to <4 x float>, !dbg !49
  %156 = fmul <4 x float> %150, %155, !dbg !54
  %157 = insertelement <4 x i32> poison, i32 %144, i64 0, !dbg !51
  %158 = insertelement <4 x i32> %157, i32 %143, i64 1, !dbg !51
  %159 = insertelement <4 x i32> %158, i32 %80, i64 2, !dbg !51
  %160 = insertelement <4 x i32> %159, i32 %81, i64 3, !dbg !51
  %161 = bitcast <4 x i32> %160 to <4 x float>, !dbg !51
  %162 = fadd <4 x float> %156, %161, !dbg !55
  %163 = fcmp olt <4 x float> %162, zeroinitializer, !dbg !56
  %164 = extractelement <4 x i1> %163, i64 3, !dbg !60
  %165 = extractelement <4 x float> %162, i64 3, !dbg !60
  %166 = select i1 %164, float 0.000000e+00, float %165, !dbg !60
  %167 = extractelement <4 x i1> %163, i64 2, !dbg !60
  %168 = extractelement <4 x float> %162, i64 2, !dbg !60
  %169 = select i1 %167, float 0.000000e+00, float %168, !dbg !60
  %170 = extractelement <4 x i1> %163, i64 1, !dbg !62
  %171 = extractelement <4 x float> %162, i64 1, !dbg !62
  %172 = select i1 %170, float 0.000000e+00, float %171, !dbg !62
  %173 = extractelement <4 x i1> %163, i64 0, !dbg !62
  %174 = extractelement <4 x float> %162, i64 0, !dbg !62
  %175 = select i1 %173, float 0.000000e+00, float %174, !dbg !62
  %176 = select i1 %25, float %169, float %172, !dbg !63
  %177 = select i1 %25, float %166, float %175, !dbg !63
  %178 = sext i32 %18 to i64, !dbg !64
  %179 = getelementptr float, ptr addrspace(1) %10, i64 %178, !dbg !64
  %180 = bitcast float %176 to i32, !dbg !65
  %181 = bitcast float %177 to i32, !dbg !65
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %180, i32 %181, ptr addrspace(1) %179, i1 true) #3, !dbg !65
  ret void, !dbg !66
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cdfbp6pprjcmxudtmnohp357sxeuwwyfplizejjgdnar2wq3yhc2.py", directory: "inductor_cache/df")
!4 = !{ptr @triton_poi_fused_cat_11, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_11, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_11", linkageName: "triton_poi_fused_cat_11", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 32, column: 18, scope: !7)
!19 = !DILocation(line: 33, column: 33, scope: !7)
!20 = !DILocation(line: 33, column: 43, scope: !7)
!21 = !DILocation(line: 33, column: 38, scope: !7)
!22 = !DILocation(line: 33, column: 49, scope: !7)
!23 = !DILocation(line: 33, column: 30, scope: !7)
!24 = !DILocation(line: 33, column: 55, scope: !7)
!25 = !DILocation(line: 34, column: 30, scope: !7)
!26 = !DILocation(line: 34, column: 35, scope: !7)
!27 = !DILocation(line: 36, column: 30, scope: !7)
!28 = !DILocation(line: 36, column: 35, scope: !7)
!29 = !DILocation(line: 38, column: 19, scope: !7)
!30 = !DILocation(line: 39, column: 27, scope: !7)
!31 = !DILocation(line: 41, column: 20, scope: !7)
!32 = !DILocation(line: 45, column: 31, scope: !7)
!33 = !DILocation(line: 45, column: 36, scope: !7)
!34 = !DILocation(line: 47, column: 31, scope: !7)
!35 = !DILocation(line: 47, column: 36, scope: !7)
!36 = !DILocation(line: 53, column: 20, scope: !7)
!37 = !DILocation(line: 56, column: 58, scope: !7)
!38 = !DILocation(line: 56, column: 50, scope: !7)
!39 = !DILocation(line: 56, column: 31, scope: !7)
!40 = !DILocation(line: 56, column: 64, scope: !7)
!41 = !DILocation(line: 57, column: 31, scope: !7)
!42 = !DILocation(line: 57, column: 44, scope: !7)
!43 = !DILocation(line: 59, column: 31, scope: !7)
!44 = !DILocation(line: 59, column: 44, scope: !7)
!45 = !DILocation(line: 61, column: 20, scope: !7)
!46 = !DILocation(line: 62, column: 27, scope: !7)
!47 = !DILocation(line: 64, column: 20, scope: !7)
!48 = !DILocation(line: 68, column: 31, scope: !7)
!49 = !DILocation(line: 68, column: 44, scope: !7)
!50 = !DILocation(line: 70, column: 31, scope: !7)
!51 = !DILocation(line: 70, column: 44, scope: !7)
!52 = !DILocation(line: 58, column: 20, scope: !7)
!53 = !DILocation(line: 67, column: 20, scope: !7)
!54 = !DILocation(line: 69, column: 20, scope: !7)
!55 = !DILocation(line: 71, column: 20, scope: !7)
!56 = !DILocation(line: 118, column: 15, scope: !57, inlinedAt: !59)
!57 = distinct !DILexicalBlockFile(scope: !7, file: !58, discriminator: 0)
!58 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!59 = !DILocation(line: 73, column: 42, scope: !7)
!60 = !DILocation(line: 121, column: 29, scope: !57, inlinedAt: !61)
!61 = !DILocation(line: 50, column: 42, scope: !7)
!62 = !DILocation(line: 121, column: 29, scope: !57, inlinedAt: !59)
!63 = !DILocation(line: 0, scope: !7)
!64 = !DILocation(line: 77, column: 25, scope: !7)
!65 = !DILocation(line: 77, column: 37, scope: !7)
!66 = !DILocation(line: 77, column: 4, scope: !7)
