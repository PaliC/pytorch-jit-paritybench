; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_cat_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, i32 %11) local_unnamed_addr !dbg !7 {
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %14 = shl i32 %13, 10, !dbg !11
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %16 = shl i32 %15, 2, !dbg !12
  %17 = and i32 %16, 508, !dbg !12
  %18 = or disjoint i32 %14, %17, !dbg !13
  %19 = or disjoint i32 %18, 1, !dbg !13
  %20 = or disjoint i32 %18, 2, !dbg !13
  %21 = or disjoint i32 %18, 3, !dbg !13
  %22 = or disjoint i32 %18, 512, !dbg !13
  %23 = or disjoint i32 %18, 513, !dbg !13
  %24 = or disjoint i32 %18, 514, !dbg !13
  %25 = or disjoint i32 %18, 515, !dbg !13
  %26 = icmp slt i32 %18, 1152000, !dbg !14
  %27 = icmp slt i32 %22, 1152000, !dbg !14
  %.frozen = freeze i32 %18, !dbg !15
  %28 = sdiv i32 %.frozen, 900, !dbg !15
  %.frozen76 = freeze i32 %22, !dbg !15
  %29 = sdiv i32 %.frozen76, 900, !dbg !15
  %30 = srem i32 %28, 320, !dbg !16
  %31 = srem i32 %29, 320, !dbg !16
  %32 = mul i32 %28, 900, !dbg !17
  %.decomposed = sub i32 %.frozen, %32, !dbg !17
  %33 = srem i32 %19, 900, !dbg !17
  %34 = srem i32 %20, 900, !dbg !17
  %35 = srem i32 %21, 900, !dbg !17
  %36 = mul i32 %29, 900, !dbg !17
  %.decomposed77 = sub i32 %.frozen76, %36, !dbg !17
  %37 = srem i32 %23, 900, !dbg !17
  %38 = srem i32 %24, 900, !dbg !17
  %39 = srem i32 %25, 900, !dbg !17
  %40 = sdiv i32 %18, 288000, !dbg !18
  %41 = sdiv i32 %22, 288000, !dbg !18
  %42 = icmp slt i32 %30, 256, !dbg !19
  %43 = icmp slt i32 %31, 256, !dbg !19
  %44 = shl nsw i32 %.decomposed, 8, !dbg !20
  %45 = shl nsw i32 %33, 8, !dbg !20
  %46 = shl nsw i32 %34, 8, !dbg !20
  %47 = shl nsw i32 %35, 8, !dbg !20
  %48 = shl nsw i32 %.decomposed77, 8, !dbg !20
  %49 = shl nsw i32 %37, 8, !dbg !20
  %50 = shl nsw i32 %38, 8, !dbg !20
  %51 = shl nsw i32 %39, 8, !dbg !20
  %52 = mul nsw i32 %40, 230400, !dbg !21
  %53 = mul nsw i32 %41, 230400, !dbg !21
  %54 = add nsw i32 %30, %52, !dbg !22
  %55 = add nsw i32 %54, %44, !dbg !23
  %56 = add nsw i32 %54, %45, !dbg !23
  %57 = add nsw i32 %54, %46, !dbg !23
  %58 = add nsw i32 %54, %47, !dbg !23
  %59 = add nsw i32 %31, %53, !dbg !22
  %60 = add nsw i32 %59, %48, !dbg !23
  %61 = add nsw i32 %59, %49, !dbg !23
  %62 = add nsw i32 %59, %50, !dbg !23
  %63 = add nsw i32 %59, %51, !dbg !23
  %64 = sext i32 %55 to i64, !dbg !24
  %65 = getelementptr float, ptr addrspace(1) %0, i64 %64, !dbg !24
  %66 = sext i32 %56 to i64, !dbg !24
  %67 = getelementptr float, ptr addrspace(1) %0, i64 %66, !dbg !24
  %68 = sext i32 %57 to i64, !dbg !24
  %69 = getelementptr float, ptr addrspace(1) %0, i64 %68, !dbg !24
  %70 = sext i32 %58 to i64, !dbg !24
  %71 = getelementptr float, ptr addrspace(1) %0, i64 %70, !dbg !24
  %72 = sext i32 %60 to i64, !dbg !24
  %73 = getelementptr float, ptr addrspace(1) %0, i64 %72, !dbg !24
  %74 = sext i32 %61 to i64, !dbg !24
  %75 = getelementptr float, ptr addrspace(1) %0, i64 %74, !dbg !24
  %76 = sext i32 %62 to i64, !dbg !24
  %77 = getelementptr float, ptr addrspace(1) %0, i64 %76, !dbg !24
  %78 = sext i32 %63 to i64, !dbg !24
  %79 = getelementptr float, ptr addrspace(1) %0, i64 %78, !dbg !24
  %80 = and i1 %26, %42, !dbg !25
  %81 = and i1 %27, %43, !dbg !25
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %65, i1 %80, i32 0, i1 %80) #3, !dbg !26
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %67, i1 %80, i32 0, i1 %80) #3, !dbg !26
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %69, i1 %80, i32 0, i1 %80) #3, !dbg !26
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %71, i1 %80, i32 0, i1 %80) #3, !dbg !26
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %73, i1 %81, i32 0, i1 %81) #3, !dbg !26
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %75, i1 %81, i32 0, i1 %81) #3, !dbg !26
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %77, i1 %81, i32 0, i1 %81) #3, !dbg !26
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %79, i1 %81, i32 0, i1 %81) #3, !dbg !26
  %90 = sext i32 %30 to i64, !dbg !27
  %91 = getelementptr float, ptr addrspace(1) %1, i64 %90, !dbg !27
  %92 = sext i32 %31 to i64, !dbg !27
  %93 = getelementptr float, ptr addrspace(1) %1, i64 %92, !dbg !27
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %91, i1 %80, i32 0, i1 %80) #3, !dbg !28
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %91, i1 %80, i32 0, i1 %80) #3, !dbg !28
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %91, i1 %80, i32 0, i1 %80) #3, !dbg !28
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %91, i1 %80, i32 0, i1 %80) #3, !dbg !28
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %93, i1 %81, i32 0, i1 %81) #3, !dbg !28
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %93, i1 %81, i32 0, i1 %81) #3, !dbg !28
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %93, i1 %81, i32 0, i1 %81) #3, !dbg !28
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %93, i1 %81, i32 0, i1 %81) #3, !dbg !28
  %102 = getelementptr float, ptr addrspace(1) %2, i64 %90, !dbg !29
  %103 = getelementptr float, ptr addrspace(1) %2, i64 %92, !dbg !29
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %102, i1 %80, i32 0, i1 %80) #3, !dbg !30
  %105 = bitcast i32 %104 to float, !dbg !30
  %106 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %102, i1 %80, i32 0, i1 %80) #3, !dbg !30
  %107 = bitcast i32 %106 to float, !dbg !30
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %102, i1 %80, i32 0, i1 %80) #3, !dbg !30
  %109 = bitcast i32 %108 to float, !dbg !30
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %102, i1 %80, i32 0, i1 %80) #3, !dbg !30
  %111 = bitcast i32 %110 to float, !dbg !30
  %112 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %103, i1 %81, i32 0, i1 %81) #3, !dbg !30
  %113 = bitcast i32 %112 to float, !dbg !30
  %114 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %103, i1 %81, i32 0, i1 %81) #3, !dbg !30
  %115 = bitcast i32 %114 to float, !dbg !30
  %116 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %103, i1 %81, i32 0, i1 %81) #3, !dbg !30
  %117 = bitcast i32 %116 to float, !dbg !30
  %118 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %103, i1 %81, i32 0, i1 %81) #3, !dbg !30
  %119 = bitcast i32 %118 to float, !dbg !30
  %120 = fadd float %105, 0x3EE4F8B580000000, !dbg !31
  %121 = fadd float %107, 0x3EE4F8B580000000, !dbg !31
  %122 = fadd float %109, 0x3EE4F8B580000000, !dbg !31
  %123 = fadd float %111, 0x3EE4F8B580000000, !dbg !31
  %124 = fadd float %113, 0x3EE4F8B580000000, !dbg !31
  %125 = fadd float %115, 0x3EE4F8B580000000, !dbg !31
  %126 = fadd float %117, 0x3EE4F8B580000000, !dbg !31
  %127 = fadd float %119, 0x3EE4F8B580000000, !dbg !31
  %128 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !32
  %.not.i = icmp eq i32 %128, 0, !dbg !32
  %129 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !32
  %.not1.i = icmp eq i32 %129, 0, !dbg !32
  br i1 %.not.i, label %135, label %130, !dbg !32

130:                                              ; preds = %12
  br i1 %.not1.i, label %133, label %131, !dbg !32

131:                                              ; preds = %130
  %132 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %120) #3, !dbg !32
  br label %__nv_sqrtf.exit, !dbg !32

133:                                              ; preds = %130
  %134 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %120) #3, !dbg !32
  br label %__nv_sqrtf.exit, !dbg !32

135:                                              ; preds = %12
  br i1 %.not1.i, label %138, label %136, !dbg !32

136:                                              ; preds = %135
  %137 = tail call float @llvm.nvvm.sqrt.rn.f(float %120) #3, !dbg !32
  br label %__nv_sqrtf.exit, !dbg !32

138:                                              ; preds = %135
  %139 = tail call float @llvm.nvvm.sqrt.approx.f(float %120) #3, !dbg !32
  br label %__nv_sqrtf.exit, !dbg !32

__nv_sqrtf.exit:                                  ; preds = %131, %133, %136, %138
  %.0.i = phi float [ %132, %131 ], [ %134, %133 ], [ %137, %136 ], [ %139, %138 ], !dbg !32
  %140 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !32
  %.not.i1 = icmp eq i32 %140, 0, !dbg !32
  %141 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !32
  %.not1.i4 = icmp eq i32 %141, 0, !dbg !32
  br i1 %.not.i1, label %147, label %142, !dbg !32

142:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %145, label %143, !dbg !32

143:                                              ; preds = %142
  %144 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %121) #3, !dbg !32
  br label %__nv_sqrtf.exit5, !dbg !32

145:                                              ; preds = %142
  %146 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %121) #3, !dbg !32
  br label %__nv_sqrtf.exit5, !dbg !32

147:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %150, label %148, !dbg !32

148:                                              ; preds = %147
  %149 = tail call float @llvm.nvvm.sqrt.rn.f(float %121) #3, !dbg !32
  br label %__nv_sqrtf.exit5, !dbg !32

150:                                              ; preds = %147
  %151 = tail call float @llvm.nvvm.sqrt.approx.f(float %121) #3, !dbg !32
  br label %__nv_sqrtf.exit5, !dbg !32

__nv_sqrtf.exit5:                                 ; preds = %143, %145, %148, %150
  %.0.i3 = phi float [ %144, %143 ], [ %146, %145 ], [ %149, %148 ], [ %151, %150 ], !dbg !32
  %152 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !32
  %.not.i6 = icmp eq i32 %152, 0, !dbg !32
  %153 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !32
  %.not1.i9 = icmp eq i32 %153, 0, !dbg !32
  br i1 %.not.i6, label %159, label %154, !dbg !32

154:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %157, label %155, !dbg !32

155:                                              ; preds = %154
  %156 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %122) #3, !dbg !32
  br label %__nv_sqrtf.exit10, !dbg !32

157:                                              ; preds = %154
  %158 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %122) #3, !dbg !32
  br label %__nv_sqrtf.exit10, !dbg !32

159:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %162, label %160, !dbg !32

160:                                              ; preds = %159
  %161 = tail call float @llvm.nvvm.sqrt.rn.f(float %122) #3, !dbg !32
  br label %__nv_sqrtf.exit10, !dbg !32

162:                                              ; preds = %159
  %163 = tail call float @llvm.nvvm.sqrt.approx.f(float %122) #3, !dbg !32
  br label %__nv_sqrtf.exit10, !dbg !32

__nv_sqrtf.exit10:                                ; preds = %155, %157, %160, %162
  %.0.i8 = phi float [ %156, %155 ], [ %158, %157 ], [ %161, %160 ], [ %163, %162 ], !dbg !32
  %164 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !32
  %.not.i11 = icmp eq i32 %164, 0, !dbg !32
  %165 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !32
  %.not1.i14 = icmp eq i32 %165, 0, !dbg !32
  br i1 %.not.i11, label %171, label %166, !dbg !32

166:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %169, label %167, !dbg !32

167:                                              ; preds = %166
  %168 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %123) #3, !dbg !32
  br label %__nv_sqrtf.exit15, !dbg !32

169:                                              ; preds = %166
  %170 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %123) #3, !dbg !32
  br label %__nv_sqrtf.exit15, !dbg !32

171:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %174, label %172, !dbg !32

172:                                              ; preds = %171
  %173 = tail call float @llvm.nvvm.sqrt.rn.f(float %123) #3, !dbg !32
  br label %__nv_sqrtf.exit15, !dbg !32

174:                                              ; preds = %171
  %175 = tail call float @llvm.nvvm.sqrt.approx.f(float %123) #3, !dbg !32
  br label %__nv_sqrtf.exit15, !dbg !32

__nv_sqrtf.exit15:                                ; preds = %167, %169, %172, %174
  %.0.i13 = phi float [ %168, %167 ], [ %170, %169 ], [ %173, %172 ], [ %175, %174 ], !dbg !32
  %176 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !32
  %.not.i16 = icmp eq i32 %176, 0, !dbg !32
  %177 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !32
  %.not1.i19 = icmp eq i32 %177, 0, !dbg !32
  br i1 %.not.i16, label %183, label %178, !dbg !32

178:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %181, label %179, !dbg !32

179:                                              ; preds = %178
  %180 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %124) #3, !dbg !32
  br label %__nv_sqrtf.exit20, !dbg !32

181:                                              ; preds = %178
  %182 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %124) #3, !dbg !32
  br label %__nv_sqrtf.exit20, !dbg !32

183:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %186, label %184, !dbg !32

184:                                              ; preds = %183
  %185 = tail call float @llvm.nvvm.sqrt.rn.f(float %124) #3, !dbg !32
  br label %__nv_sqrtf.exit20, !dbg !32

186:                                              ; preds = %183
  %187 = tail call float @llvm.nvvm.sqrt.approx.f(float %124) #3, !dbg !32
  br label %__nv_sqrtf.exit20, !dbg !32

__nv_sqrtf.exit20:                                ; preds = %179, %181, %184, %186
  %.0.i18 = phi float [ %180, %179 ], [ %182, %181 ], [ %185, %184 ], [ %187, %186 ], !dbg !32
  %188 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !32
  %.not.i21 = icmp eq i32 %188, 0, !dbg !32
  %189 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !32
  %.not1.i24 = icmp eq i32 %189, 0, !dbg !32
  br i1 %.not.i21, label %195, label %190, !dbg !32

190:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %193, label %191, !dbg !32

191:                                              ; preds = %190
  %192 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %125) #3, !dbg !32
  br label %__nv_sqrtf.exit25, !dbg !32

193:                                              ; preds = %190
  %194 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %125) #3, !dbg !32
  br label %__nv_sqrtf.exit25, !dbg !32

195:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %198, label %196, !dbg !32

196:                                              ; preds = %195
  %197 = tail call float @llvm.nvvm.sqrt.rn.f(float %125) #3, !dbg !32
  br label %__nv_sqrtf.exit25, !dbg !32

198:                                              ; preds = %195
  %199 = tail call float @llvm.nvvm.sqrt.approx.f(float %125) #3, !dbg !32
  br label %__nv_sqrtf.exit25, !dbg !32

__nv_sqrtf.exit25:                                ; preds = %191, %193, %196, %198
  %.0.i23 = phi float [ %192, %191 ], [ %194, %193 ], [ %197, %196 ], [ %199, %198 ], !dbg !32
  %200 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !32
  %.not.i26 = icmp eq i32 %200, 0, !dbg !32
  %201 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !32
  %.not1.i29 = icmp eq i32 %201, 0, !dbg !32
  br i1 %.not.i26, label %207, label %202, !dbg !32

202:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %205, label %203, !dbg !32

203:                                              ; preds = %202
  %204 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %126) #3, !dbg !32
  br label %__nv_sqrtf.exit30, !dbg !32

205:                                              ; preds = %202
  %206 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %126) #3, !dbg !32
  br label %__nv_sqrtf.exit30, !dbg !32

207:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %210, label %208, !dbg !32

208:                                              ; preds = %207
  %209 = tail call float @llvm.nvvm.sqrt.rn.f(float %126) #3, !dbg !32
  br label %__nv_sqrtf.exit30, !dbg !32

210:                                              ; preds = %207
  %211 = tail call float @llvm.nvvm.sqrt.approx.f(float %126) #3, !dbg !32
  br label %__nv_sqrtf.exit30, !dbg !32

__nv_sqrtf.exit30:                                ; preds = %203, %205, %208, %210
  %.0.i28 = phi float [ %204, %203 ], [ %206, %205 ], [ %209, %208 ], [ %211, %210 ], !dbg !32
  %212 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !32
  %.not.i31 = icmp eq i32 %212, 0, !dbg !32
  %213 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !32
  %.not1.i34 = icmp eq i32 %213, 0, !dbg !32
  br i1 %.not.i31, label %219, label %214, !dbg !32

214:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %217, label %215, !dbg !32

215:                                              ; preds = %214
  %216 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %127) #3, !dbg !32
  br label %__nv_sqrtf.exit35, !dbg !32

217:                                              ; preds = %214
  %218 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %127) #3, !dbg !32
  br label %__nv_sqrtf.exit35, !dbg !32

219:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %222, label %220, !dbg !32

220:                                              ; preds = %219
  %221 = tail call float @llvm.nvvm.sqrt.rn.f(float %127) #3, !dbg !32
  br label %__nv_sqrtf.exit35, !dbg !32

222:                                              ; preds = %219
  %223 = tail call float @llvm.nvvm.sqrt.approx.f(float %127) #3, !dbg !32
  br label %__nv_sqrtf.exit35, !dbg !32

__nv_sqrtf.exit35:                                ; preds = %215, %217, %220, %222
  %.0.i33 = phi float [ %216, %215 ], [ %218, %217 ], [ %221, %220 ], [ %223, %222 ], !dbg !32
  %224 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !33
  %225 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !33
  %226 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !33
  %227 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !33
  %228 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !33
  %229 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !33
  %230 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !33
  %231 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !33
  %232 = getelementptr float, ptr addrspace(1) %3, i64 %90, !dbg !34
  %233 = getelementptr float, ptr addrspace(1) %3, i64 %92, !dbg !34
  %234 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %232, i1 %80, i32 0, i1 %80) #3, !dbg !35
  %235 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %232, i1 %80, i32 0, i1 %80) #3, !dbg !35
  %236 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %232, i1 %80, i32 0, i1 %80) #3, !dbg !35
  %237 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %232, i1 %80, i32 0, i1 %80) #3, !dbg !35
  %238 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %233, i1 %81, i32 0, i1 %81) #3, !dbg !35
  %239 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %233, i1 %81, i32 0, i1 %81) #3, !dbg !35
  %240 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %233, i1 %81, i32 0, i1 %81) #3, !dbg !35
  %241 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %233, i1 %81, i32 0, i1 %81) #3, !dbg !35
  %242 = getelementptr float, ptr addrspace(1) %4, i64 %90, !dbg !36
  %243 = getelementptr float, ptr addrspace(1) %4, i64 %92, !dbg !36
  %244 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %242, i1 %80, i32 0, i1 %80) #3, !dbg !37
  %245 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %242, i1 %80, i32 0, i1 %80) #3, !dbg !37
  %246 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %242, i1 %80, i32 0, i1 %80) #3, !dbg !37
  %247 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %242, i1 %80, i32 0, i1 %80) #3, !dbg !37
  %248 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %243, i1 %81, i32 0, i1 %81) #3, !dbg !37
  %249 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %243, i1 %81, i32 0, i1 %81) #3, !dbg !37
  %250 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %243, i1 %81, i32 0, i1 %81) #3, !dbg !37
  %251 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %243, i1 %81, i32 0, i1 %81) #3, !dbg !37
  %252 = icmp sgt i32 %30, 255, !dbg !38
  %253 = icmp sgt i32 %31, 255, !dbg !38
  %254 = shl nsw i32 %.decomposed, 6, !dbg !39
  %255 = shl nsw i32 %33, 6, !dbg !39
  %256 = shl nsw i32 %34, 6, !dbg !39
  %257 = shl nsw i32 %35, 6, !dbg !39
  %258 = shl nsw i32 %.decomposed77, 6, !dbg !39
  %259 = shl nsw i32 %37, 6, !dbg !39
  %260 = shl nsw i32 %38, 6, !dbg !39
  %261 = shl nsw i32 %39, 6, !dbg !39
  %262 = mul nsw i32 %40, 57600, !dbg !40
  %263 = mul nsw i32 %41, 57600, !dbg !40
  %264 = add nsw i32 %30, -256, !dbg !41
  %265 = add nsw i32 %31, -256, !dbg !41
  %266 = add nsw i32 %264, %262, !dbg !42
  %267 = add nsw i32 %266, %254, !dbg !43
  %268 = add nsw i32 %266, %255, !dbg !43
  %269 = add nsw i32 %266, %256, !dbg !43
  %270 = add nsw i32 %266, %257, !dbg !43
  %271 = add nsw i32 %265, %263, !dbg !42
  %272 = add nsw i32 %271, %258, !dbg !43
  %273 = add nsw i32 %271, %259, !dbg !43
  %274 = add nsw i32 %271, %260, !dbg !43
  %275 = add nsw i32 %271, %261, !dbg !43
  %276 = sext i32 %267 to i64, !dbg !44
  %277 = getelementptr float, ptr addrspace(1) %5, i64 %276, !dbg !44
  %278 = sext i32 %268 to i64, !dbg !44
  %279 = getelementptr float, ptr addrspace(1) %5, i64 %278, !dbg !44
  %280 = sext i32 %269 to i64, !dbg !44
  %281 = getelementptr float, ptr addrspace(1) %5, i64 %280, !dbg !44
  %282 = sext i32 %270 to i64, !dbg !44
  %283 = getelementptr float, ptr addrspace(1) %5, i64 %282, !dbg !44
  %284 = sext i32 %272 to i64, !dbg !44
  %285 = getelementptr float, ptr addrspace(1) %5, i64 %284, !dbg !44
  %286 = sext i32 %273 to i64, !dbg !44
  %287 = getelementptr float, ptr addrspace(1) %5, i64 %286, !dbg !44
  %288 = sext i32 %274 to i64, !dbg !44
  %289 = getelementptr float, ptr addrspace(1) %5, i64 %288, !dbg !44
  %290 = sext i32 %275 to i64, !dbg !44
  %291 = getelementptr float, ptr addrspace(1) %5, i64 %290, !dbg !44
  %292 = and i1 %26, %252, !dbg !45
  %293 = and i1 %27, %253, !dbg !45
  %294 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %277, i1 %292, i32 0, i1 %292) #3, !dbg !46
  %295 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %279, i1 %292, i32 0, i1 %292) #3, !dbg !46
  %296 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %281, i1 %292, i32 0, i1 %292) #3, !dbg !46
  %297 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %283, i1 %292, i32 0, i1 %292) #3, !dbg !46
  %298 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %285, i1 %293, i32 0, i1 %293) #3, !dbg !46
  %299 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %287, i1 %293, i32 0, i1 %293) #3, !dbg !46
  %300 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %289, i1 %293, i32 0, i1 %293) #3, !dbg !46
  %301 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %291, i1 %293, i32 0, i1 %293) #3, !dbg !46
  %302 = sext i32 %264 to i64, !dbg !47
  %303 = getelementptr float, ptr addrspace(1) %6, i64 %302, !dbg !47
  %304 = sext i32 %265 to i64, !dbg !47
  %305 = getelementptr float, ptr addrspace(1) %6, i64 %304, !dbg !47
  %306 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %303, i1 %292, i32 0, i1 %292) #3, !dbg !48
  %307 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %303, i1 %292, i32 0, i1 %292) #3, !dbg !48
  %308 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %303, i1 %292, i32 0, i1 %292) #3, !dbg !48
  %309 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %303, i1 %292, i32 0, i1 %292) #3, !dbg !48
  %310 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %305, i1 %293, i32 0, i1 %293) #3, !dbg !48
  %311 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %305, i1 %293, i32 0, i1 %293) #3, !dbg !48
  %312 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %305, i1 %293, i32 0, i1 %293) #3, !dbg !48
  %313 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %305, i1 %293, i32 0, i1 %293) #3, !dbg !48
  %314 = getelementptr float, ptr addrspace(1) %7, i64 %302, !dbg !49
  %315 = getelementptr float, ptr addrspace(1) %7, i64 %304, !dbg !49
  %316 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %314, i1 %292, i32 0, i1 %292) #3, !dbg !50
  %317 = bitcast i32 %316 to float, !dbg !50
  %318 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %314, i1 %292, i32 0, i1 %292) #3, !dbg !50
  %319 = bitcast i32 %318 to float, !dbg !50
  %320 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %314, i1 %292, i32 0, i1 %292) #3, !dbg !50
  %321 = bitcast i32 %320 to float, !dbg !50
  %322 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %314, i1 %292, i32 0, i1 %292) #3, !dbg !50
  %323 = bitcast i32 %322 to float, !dbg !50
  %324 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %315, i1 %293, i32 0, i1 %293) #3, !dbg !50
  %325 = bitcast i32 %324 to float, !dbg !50
  %326 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %315, i1 %293, i32 0, i1 %293) #3, !dbg !50
  %327 = bitcast i32 %326 to float, !dbg !50
  %328 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %315, i1 %293, i32 0, i1 %293) #3, !dbg !50
  %329 = bitcast i32 %328 to float, !dbg !50
  %330 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %315, i1 %293, i32 0, i1 %293) #3, !dbg !50
  %331 = bitcast i32 %330 to float, !dbg !50
  %332 = fadd float %317, 0x3F50624DE0000000, !dbg !51
  %333 = fadd float %319, 0x3F50624DE0000000, !dbg !51
  %334 = fadd float %321, 0x3F50624DE0000000, !dbg !51
  %335 = fadd float %323, 0x3F50624DE0000000, !dbg !51
  %336 = fadd float %325, 0x3F50624DE0000000, !dbg !51
  %337 = fadd float %327, 0x3F50624DE0000000, !dbg !51
  %338 = fadd float %329, 0x3F50624DE0000000, !dbg !51
  %339 = fadd float %331, 0x3F50624DE0000000, !dbg !51
  %340 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !52
  %.not.i36 = icmp eq i32 %340, 0, !dbg !52
  %341 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !52
  %.not1.i39 = icmp eq i32 %341, 0, !dbg !52
  br i1 %.not.i36, label %347, label %342, !dbg !52

342:                                              ; preds = %__nv_sqrtf.exit35
  br i1 %.not1.i39, label %345, label %343, !dbg !52

343:                                              ; preds = %342
  %344 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %332) #3, !dbg !52
  br label %__nv_sqrtf.exit40, !dbg !52

345:                                              ; preds = %342
  %346 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %332) #3, !dbg !52
  br label %__nv_sqrtf.exit40, !dbg !52

347:                                              ; preds = %__nv_sqrtf.exit35
  br i1 %.not1.i39, label %350, label %348, !dbg !52

348:                                              ; preds = %347
  %349 = tail call float @llvm.nvvm.sqrt.rn.f(float %332) #3, !dbg !52
  br label %__nv_sqrtf.exit40, !dbg !52

350:                                              ; preds = %347
  %351 = tail call float @llvm.nvvm.sqrt.approx.f(float %332) #3, !dbg !52
  br label %__nv_sqrtf.exit40, !dbg !52

__nv_sqrtf.exit40:                                ; preds = %343, %345, %348, %350
  %.0.i38 = phi float [ %344, %343 ], [ %346, %345 ], [ %349, %348 ], [ %351, %350 ], !dbg !52
  %352 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !52
  %.not.i41 = icmp eq i32 %352, 0, !dbg !52
  %353 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !52
  %.not1.i44 = icmp eq i32 %353, 0, !dbg !52
  br i1 %.not.i41, label %359, label %354, !dbg !52

354:                                              ; preds = %__nv_sqrtf.exit40
  br i1 %.not1.i44, label %357, label %355, !dbg !52

355:                                              ; preds = %354
  %356 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %333) #3, !dbg !52
  br label %__nv_sqrtf.exit45, !dbg !52

357:                                              ; preds = %354
  %358 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %333) #3, !dbg !52
  br label %__nv_sqrtf.exit45, !dbg !52

359:                                              ; preds = %__nv_sqrtf.exit40
  br i1 %.not1.i44, label %362, label %360, !dbg !52

360:                                              ; preds = %359
  %361 = tail call float @llvm.nvvm.sqrt.rn.f(float %333) #3, !dbg !52
  br label %__nv_sqrtf.exit45, !dbg !52

362:                                              ; preds = %359
  %363 = tail call float @llvm.nvvm.sqrt.approx.f(float %333) #3, !dbg !52
  br label %__nv_sqrtf.exit45, !dbg !52

__nv_sqrtf.exit45:                                ; preds = %355, %357, %360, %362
  %.0.i43 = phi float [ %356, %355 ], [ %358, %357 ], [ %361, %360 ], [ %363, %362 ], !dbg !52
  %364 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !52
  %.not.i46 = icmp eq i32 %364, 0, !dbg !52
  %365 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !52
  %.not1.i49 = icmp eq i32 %365, 0, !dbg !52
  br i1 %.not.i46, label %371, label %366, !dbg !52

366:                                              ; preds = %__nv_sqrtf.exit45
  br i1 %.not1.i49, label %369, label %367, !dbg !52

367:                                              ; preds = %366
  %368 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %334) #3, !dbg !52
  br label %__nv_sqrtf.exit50, !dbg !52

369:                                              ; preds = %366
  %370 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %334) #3, !dbg !52
  br label %__nv_sqrtf.exit50, !dbg !52

371:                                              ; preds = %__nv_sqrtf.exit45
  br i1 %.not1.i49, label %374, label %372, !dbg !52

372:                                              ; preds = %371
  %373 = tail call float @llvm.nvvm.sqrt.rn.f(float %334) #3, !dbg !52
  br label %__nv_sqrtf.exit50, !dbg !52

374:                                              ; preds = %371
  %375 = tail call float @llvm.nvvm.sqrt.approx.f(float %334) #3, !dbg !52
  br label %__nv_sqrtf.exit50, !dbg !52

__nv_sqrtf.exit50:                                ; preds = %367, %369, %372, %374
  %.0.i48 = phi float [ %368, %367 ], [ %370, %369 ], [ %373, %372 ], [ %375, %374 ], !dbg !52
  %376 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !52
  %.not.i51 = icmp eq i32 %376, 0, !dbg !52
  %377 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !52
  %.not1.i54 = icmp eq i32 %377, 0, !dbg !52
  br i1 %.not.i51, label %383, label %378, !dbg !52

378:                                              ; preds = %__nv_sqrtf.exit50
  br i1 %.not1.i54, label %381, label %379, !dbg !52

379:                                              ; preds = %378
  %380 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %335) #3, !dbg !52
  br label %__nv_sqrtf.exit55, !dbg !52

381:                                              ; preds = %378
  %382 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %335) #3, !dbg !52
  br label %__nv_sqrtf.exit55, !dbg !52

383:                                              ; preds = %__nv_sqrtf.exit50
  br i1 %.not1.i54, label %386, label %384, !dbg !52

384:                                              ; preds = %383
  %385 = tail call float @llvm.nvvm.sqrt.rn.f(float %335) #3, !dbg !52
  br label %__nv_sqrtf.exit55, !dbg !52

386:                                              ; preds = %383
  %387 = tail call float @llvm.nvvm.sqrt.approx.f(float %335) #3, !dbg !52
  br label %__nv_sqrtf.exit55, !dbg !52

__nv_sqrtf.exit55:                                ; preds = %379, %381, %384, %386
  %.0.i53 = phi float [ %380, %379 ], [ %382, %381 ], [ %385, %384 ], [ %387, %386 ], !dbg !52
  %388 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !52
  %.not.i56 = icmp eq i32 %388, 0, !dbg !52
  %389 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !52
  %.not1.i59 = icmp eq i32 %389, 0, !dbg !52
  br i1 %.not.i56, label %395, label %390, !dbg !52

390:                                              ; preds = %__nv_sqrtf.exit55
  br i1 %.not1.i59, label %393, label %391, !dbg !52

391:                                              ; preds = %390
  %392 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %336) #3, !dbg !52
  br label %__nv_sqrtf.exit60, !dbg !52

393:                                              ; preds = %390
  %394 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %336) #3, !dbg !52
  br label %__nv_sqrtf.exit60, !dbg !52

395:                                              ; preds = %__nv_sqrtf.exit55
  br i1 %.not1.i59, label %398, label %396, !dbg !52

396:                                              ; preds = %395
  %397 = tail call float @llvm.nvvm.sqrt.rn.f(float %336) #3, !dbg !52
  br label %__nv_sqrtf.exit60, !dbg !52

398:                                              ; preds = %395
  %399 = tail call float @llvm.nvvm.sqrt.approx.f(float %336) #3, !dbg !52
  br label %__nv_sqrtf.exit60, !dbg !52

__nv_sqrtf.exit60:                                ; preds = %391, %393, %396, %398
  %.0.i58 = phi float [ %392, %391 ], [ %394, %393 ], [ %397, %396 ], [ %399, %398 ], !dbg !52
  %400 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !52
  %.not.i61 = icmp eq i32 %400, 0, !dbg !52
  %401 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !52
  %.not1.i64 = icmp eq i32 %401, 0, !dbg !52
  br i1 %.not.i61, label %407, label %402, !dbg !52

402:                                              ; preds = %__nv_sqrtf.exit60
  br i1 %.not1.i64, label %405, label %403, !dbg !52

403:                                              ; preds = %402
  %404 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %337) #3, !dbg !52
  br label %__nv_sqrtf.exit65, !dbg !52

405:                                              ; preds = %402
  %406 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %337) #3, !dbg !52
  br label %__nv_sqrtf.exit65, !dbg !52

407:                                              ; preds = %__nv_sqrtf.exit60
  br i1 %.not1.i64, label %410, label %408, !dbg !52

408:                                              ; preds = %407
  %409 = tail call float @llvm.nvvm.sqrt.rn.f(float %337) #3, !dbg !52
  br label %__nv_sqrtf.exit65, !dbg !52

410:                                              ; preds = %407
  %411 = tail call float @llvm.nvvm.sqrt.approx.f(float %337) #3, !dbg !52
  br label %__nv_sqrtf.exit65, !dbg !52

__nv_sqrtf.exit65:                                ; preds = %403, %405, %408, %410
  %.0.i63 = phi float [ %404, %403 ], [ %406, %405 ], [ %409, %408 ], [ %411, %410 ], !dbg !52
  %412 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !52
  %.not.i66 = icmp eq i32 %412, 0, !dbg !52
  %413 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !52
  %.not1.i69 = icmp eq i32 %413, 0, !dbg !52
  br i1 %.not.i66, label %419, label %414, !dbg !52

414:                                              ; preds = %__nv_sqrtf.exit65
  br i1 %.not1.i69, label %417, label %415, !dbg !52

415:                                              ; preds = %414
  %416 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %338) #3, !dbg !52
  br label %__nv_sqrtf.exit70, !dbg !52

417:                                              ; preds = %414
  %418 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %338) #3, !dbg !52
  br label %__nv_sqrtf.exit70, !dbg !52

419:                                              ; preds = %__nv_sqrtf.exit65
  br i1 %.not1.i69, label %422, label %420, !dbg !52

420:                                              ; preds = %419
  %421 = tail call float @llvm.nvvm.sqrt.rn.f(float %338) #3, !dbg !52
  br label %__nv_sqrtf.exit70, !dbg !52

422:                                              ; preds = %419
  %423 = tail call float @llvm.nvvm.sqrt.approx.f(float %338) #3, !dbg !52
  br label %__nv_sqrtf.exit70, !dbg !52

__nv_sqrtf.exit70:                                ; preds = %415, %417, %420, %422
  %.0.i68 = phi float [ %416, %415 ], [ %418, %417 ], [ %421, %420 ], [ %423, %422 ], !dbg !52
  %424 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !52
  %.not.i71 = icmp eq i32 %424, 0, !dbg !52
  %425 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !52
  %.not1.i74 = icmp eq i32 %425, 0, !dbg !52
  br i1 %.not.i71, label %431, label %426, !dbg !52

426:                                              ; preds = %__nv_sqrtf.exit70
  br i1 %.not1.i74, label %429, label %427, !dbg !52

427:                                              ; preds = %426
  %428 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %339) #3, !dbg !52
  br label %__nv_sqrtf.exit75, !dbg !52

429:                                              ; preds = %426
  %430 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %339) #3, !dbg !52
  br label %__nv_sqrtf.exit75, !dbg !52

431:                                              ; preds = %__nv_sqrtf.exit70
  br i1 %.not1.i74, label %434, label %432, !dbg !52

432:                                              ; preds = %431
  %433 = tail call float @llvm.nvvm.sqrt.rn.f(float %339) #3, !dbg !52
  br label %__nv_sqrtf.exit75, !dbg !52

434:                                              ; preds = %431
  %435 = tail call float @llvm.nvvm.sqrt.approx.f(float %339) #3, !dbg !52
  br label %__nv_sqrtf.exit75, !dbg !52

__nv_sqrtf.exit75:                                ; preds = %427, %429, %432, %434
  %.0.i73 = phi float [ %428, %427 ], [ %430, %429 ], [ %433, %432 ], [ %435, %434 ], !dbg !52
  %436 = insertelement <16 x i32> poison, i32 %301, i64 0, !dbg !46
  %437 = insertelement <16 x i32> %436, i32 %300, i64 1, !dbg !46
  %438 = insertelement <16 x i32> %437, i32 %299, i64 2, !dbg !46
  %439 = insertelement <16 x i32> %438, i32 %298, i64 3, !dbg !46
  %440 = insertelement <16 x i32> %439, i32 %297, i64 4, !dbg !46
  %441 = insertelement <16 x i32> %440, i32 %296, i64 5, !dbg !46
  %442 = insertelement <16 x i32> %441, i32 %295, i64 6, !dbg !46
  %443 = insertelement <16 x i32> %442, i32 %294, i64 7, !dbg !46
  %444 = insertelement <16 x i32> %443, i32 %82, i64 8, !dbg !46
  %445 = insertelement <16 x i32> %444, i32 %83, i64 9, !dbg !46
  %446 = insertelement <16 x i32> %445, i32 %84, i64 10, !dbg !46
  %447 = insertelement <16 x i32> %446, i32 %85, i64 11, !dbg !46
  %448 = insertelement <16 x i32> %447, i32 %86, i64 12, !dbg !46
  %449 = insertelement <16 x i32> %448, i32 %87, i64 13, !dbg !46
  %450 = insertelement <16 x i32> %449, i32 %88, i64 14, !dbg !46
  %451 = insertelement <16 x i32> %450, i32 %89, i64 15, !dbg !46
  %452 = bitcast <16 x i32> %451 to <16 x float>, !dbg !46
  %453 = insertelement <16 x i32> poison, i32 %313, i64 0, !dbg !48
  %454 = insertelement <16 x i32> %453, i32 %312, i64 1, !dbg !48
  %455 = insertelement <16 x i32> %454, i32 %311, i64 2, !dbg !48
  %456 = insertelement <16 x i32> %455, i32 %310, i64 3, !dbg !48
  %457 = insertelement <16 x i32> %456, i32 %309, i64 4, !dbg !48
  %458 = insertelement <16 x i32> %457, i32 %308, i64 5, !dbg !48
  %459 = insertelement <16 x i32> %458, i32 %307, i64 6, !dbg !48
  %460 = insertelement <16 x i32> %459, i32 %306, i64 7, !dbg !48
  %461 = insertelement <16 x i32> %460, i32 %94, i64 8, !dbg !48
  %462 = insertelement <16 x i32> %461, i32 %95, i64 9, !dbg !48
  %463 = insertelement <16 x i32> %462, i32 %96, i64 10, !dbg !48
  %464 = insertelement <16 x i32> %463, i32 %97, i64 11, !dbg !48
  %465 = insertelement <16 x i32> %464, i32 %98, i64 12, !dbg !48
  %466 = insertelement <16 x i32> %465, i32 %99, i64 13, !dbg !48
  %467 = insertelement <16 x i32> %466, i32 %100, i64 14, !dbg !48
  %468 = insertelement <16 x i32> %467, i32 %101, i64 15, !dbg !48
  %469 = bitcast <16 x i32> %468 to <16 x float>, !dbg !48
  %470 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i38) #3, !dbg !53
  %471 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i43) #3, !dbg !53
  %472 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i48) #3, !dbg !53
  %473 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i53) #3, !dbg !53
  %474 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i58) #3, !dbg !53
  %475 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i63) #3, !dbg !53
  %476 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i68) #3, !dbg !53
  %477 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i73) #3, !dbg !53
  %478 = getelementptr float, ptr addrspace(1) %8, i64 %302, !dbg !54
  %479 = getelementptr float, ptr addrspace(1) %8, i64 %304, !dbg !54
  %480 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %478, i1 %292, i32 0, i1 %292) #3, !dbg !55
  %481 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %478, i1 %292, i32 0, i1 %292) #3, !dbg !55
  %482 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %478, i1 %292, i32 0, i1 %292) #3, !dbg !55
  %483 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %478, i1 %292, i32 0, i1 %292) #3, !dbg !55
  %484 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %479, i1 %293, i32 0, i1 %293) #3, !dbg !55
  %485 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %479, i1 %293, i32 0, i1 %293) #3, !dbg !55
  %486 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %479, i1 %293, i32 0, i1 %293) #3, !dbg !55
  %487 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %479, i1 %293, i32 0, i1 %293) #3, !dbg !55
  %488 = getelementptr float, ptr addrspace(1) %9, i64 %302, !dbg !56
  %489 = getelementptr float, ptr addrspace(1) %9, i64 %304, !dbg !56
  %490 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %488, i1 %292, i32 0, i1 %292) #3, !dbg !57
  %491 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %488, i1 %292, i32 0, i1 %292) #3, !dbg !57
  %492 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %488, i1 %292, i32 0, i1 %292) #3, !dbg !57
  %493 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %488, i1 %292, i32 0, i1 %292) #3, !dbg !57
  %494 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %489, i1 %293, i32 0, i1 %293) #3, !dbg !57
  %495 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %489, i1 %293, i32 0, i1 %293) #3, !dbg !57
  %496 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %489, i1 %293, i32 0, i1 %293) #3, !dbg !57
  %497 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %489, i1 %293, i32 0, i1 %293) #3, !dbg !57
  %498 = fsub <16 x float> %452, %469, !dbg !58
  %499 = insertelement <16 x float> poison, float %477, i64 0, !dbg !59
  %500 = insertelement <16 x float> %499, float %476, i64 1, !dbg !59
  %501 = insertelement <16 x float> %500, float %475, i64 2, !dbg !59
  %502 = insertelement <16 x float> %501, float %474, i64 3, !dbg !59
  %503 = insertelement <16 x float> %502, float %473, i64 4, !dbg !59
  %504 = insertelement <16 x float> %503, float %472, i64 5, !dbg !59
  %505 = insertelement <16 x float> %504, float %471, i64 6, !dbg !59
  %506 = insertelement <16 x float> %505, float %470, i64 7, !dbg !59
  %507 = insertelement <16 x float> %506, float %224, i64 8, !dbg !59
  %508 = insertelement <16 x float> %507, float %225, i64 9, !dbg !59
  %509 = insertelement <16 x float> %508, float %226, i64 10, !dbg !59
  %510 = insertelement <16 x float> %509, float %227, i64 11, !dbg !59
  %511 = insertelement <16 x float> %510, float %228, i64 12, !dbg !59
  %512 = insertelement <16 x float> %511, float %229, i64 13, !dbg !59
  %513 = insertelement <16 x float> %512, float %230, i64 14, !dbg !59
  %514 = insertelement <16 x float> %513, float %231, i64 15, !dbg !59
  %515 = fmul <16 x float> %498, %514, !dbg !59
  %516 = insertelement <16 x i32> poison, i32 %487, i64 0, !dbg !55
  %517 = insertelement <16 x i32> %516, i32 %486, i64 1, !dbg !55
  %518 = insertelement <16 x i32> %517, i32 %485, i64 2, !dbg !55
  %519 = insertelement <16 x i32> %518, i32 %484, i64 3, !dbg !55
  %520 = insertelement <16 x i32> %519, i32 %483, i64 4, !dbg !55
  %521 = insertelement <16 x i32> %520, i32 %482, i64 5, !dbg !55
  %522 = insertelement <16 x i32> %521, i32 %481, i64 6, !dbg !55
  %523 = insertelement <16 x i32> %522, i32 %480, i64 7, !dbg !55
  %524 = insertelement <16 x i32> %523, i32 %234, i64 8, !dbg !55
  %525 = insertelement <16 x i32> %524, i32 %235, i64 9, !dbg !55
  %526 = insertelement <16 x i32> %525, i32 %236, i64 10, !dbg !55
  %527 = insertelement <16 x i32> %526, i32 %237, i64 11, !dbg !55
  %528 = insertelement <16 x i32> %527, i32 %238, i64 12, !dbg !55
  %529 = insertelement <16 x i32> %528, i32 %239, i64 13, !dbg !55
  %530 = insertelement <16 x i32> %529, i32 %240, i64 14, !dbg !55
  %531 = insertelement <16 x i32> %530, i32 %241, i64 15, !dbg !55
  %532 = bitcast <16 x i32> %531 to <16 x float>, !dbg !55
  %533 = fmul <16 x float> %515, %532, !dbg !60
  %534 = insertelement <16 x i32> poison, i32 %497, i64 0, !dbg !57
  %535 = insertelement <16 x i32> %534, i32 %496, i64 1, !dbg !57
  %536 = insertelement <16 x i32> %535, i32 %495, i64 2, !dbg !57
  %537 = insertelement <16 x i32> %536, i32 %494, i64 3, !dbg !57
  %538 = insertelement <16 x i32> %537, i32 %493, i64 4, !dbg !57
  %539 = insertelement <16 x i32> %538, i32 %492, i64 5, !dbg !57
  %540 = insertelement <16 x i32> %539, i32 %491, i64 6, !dbg !57
  %541 = insertelement <16 x i32> %540, i32 %490, i64 7, !dbg !57
  %542 = insertelement <16 x i32> %541, i32 %244, i64 8, !dbg !57
  %543 = insertelement <16 x i32> %542, i32 %245, i64 9, !dbg !57
  %544 = insertelement <16 x i32> %543, i32 %246, i64 10, !dbg !57
  %545 = insertelement <16 x i32> %544, i32 %247, i64 11, !dbg !57
  %546 = insertelement <16 x i32> %545, i32 %248, i64 12, !dbg !57
  %547 = insertelement <16 x i32> %546, i32 %249, i64 13, !dbg !57
  %548 = insertelement <16 x i32> %547, i32 %250, i64 14, !dbg !57
  %549 = insertelement <16 x i32> %548, i32 %251, i64 15, !dbg !57
  %550 = bitcast <16 x i32> %549 to <16 x float>, !dbg !57
  %551 = fadd <16 x float> %533, %550, !dbg !61
  %552 = fcmp olt <16 x float> %551, zeroinitializer, !dbg !62
  %553 = extractelement <16 x i1> %552, i64 15, !dbg !66
  %554 = extractelement <16 x float> %551, i64 15, !dbg !66
  %555 = select i1 %553, float 0.000000e+00, float %554, !dbg !66
  %556 = extractelement <16 x i1> %552, i64 14, !dbg !66
  %557 = extractelement <16 x float> %551, i64 14, !dbg !66
  %558 = select i1 %556, float 0.000000e+00, float %557, !dbg !66
  %559 = extractelement <16 x i1> %552, i64 13, !dbg !66
  %560 = extractelement <16 x float> %551, i64 13, !dbg !66
  %561 = select i1 %559, float 0.000000e+00, float %560, !dbg !66
  %562 = extractelement <16 x i1> %552, i64 12, !dbg !66
  %563 = extractelement <16 x float> %551, i64 12, !dbg !66
  %564 = select i1 %562, float 0.000000e+00, float %563, !dbg !66
  %565 = extractelement <16 x i1> %552, i64 11, !dbg !66
  %566 = extractelement <16 x float> %551, i64 11, !dbg !66
  %567 = select i1 %565, float 0.000000e+00, float %566, !dbg !66
  %568 = extractelement <16 x i1> %552, i64 10, !dbg !66
  %569 = extractelement <16 x float> %551, i64 10, !dbg !66
  %570 = select i1 %568, float 0.000000e+00, float %569, !dbg !66
  %571 = extractelement <16 x i1> %552, i64 9, !dbg !66
  %572 = extractelement <16 x float> %551, i64 9, !dbg !66
  %573 = select i1 %571, float 0.000000e+00, float %572, !dbg !66
  %574 = extractelement <16 x i1> %552, i64 8, !dbg !66
  %575 = extractelement <16 x float> %551, i64 8, !dbg !66
  %576 = select i1 %574, float 0.000000e+00, float %575, !dbg !66
  %577 = extractelement <16 x i1> %552, i64 7, !dbg !68
  %578 = extractelement <16 x float> %551, i64 7, !dbg !68
  %579 = select i1 %577, float 0.000000e+00, float %578, !dbg !68
  %580 = extractelement <16 x i1> %552, i64 6, !dbg !68
  %581 = extractelement <16 x float> %551, i64 6, !dbg !68
  %582 = select i1 %580, float 0.000000e+00, float %581, !dbg !68
  %583 = extractelement <16 x i1> %552, i64 5, !dbg !68
  %584 = extractelement <16 x float> %551, i64 5, !dbg !68
  %585 = select i1 %583, float 0.000000e+00, float %584, !dbg !68
  %586 = extractelement <16 x i1> %552, i64 4, !dbg !68
  %587 = extractelement <16 x float> %551, i64 4, !dbg !68
  %588 = select i1 %586, float 0.000000e+00, float %587, !dbg !68
  %589 = extractelement <16 x i1> %552, i64 3, !dbg !68
  %590 = extractelement <16 x float> %551, i64 3, !dbg !68
  %591 = select i1 %589, float 0.000000e+00, float %590, !dbg !68
  %592 = extractelement <16 x i1> %552, i64 2, !dbg !68
  %593 = extractelement <16 x float> %551, i64 2, !dbg !68
  %594 = select i1 %592, float 0.000000e+00, float %593, !dbg !68
  %595 = extractelement <16 x i1> %552, i64 1, !dbg !68
  %596 = extractelement <16 x float> %551, i64 1, !dbg !68
  %597 = select i1 %595, float 0.000000e+00, float %596, !dbg !68
  %598 = extractelement <16 x i1> %552, i64 0, !dbg !68
  %599 = extractelement <16 x float> %551, i64 0, !dbg !68
  %600 = select i1 %598, float 0.000000e+00, float %599, !dbg !68
  %601 = select i1 %42, float %576, float %579, !dbg !69
  %602 = select i1 %42, float %573, float %582, !dbg !69
  %603 = select i1 %42, float %570, float %585, !dbg !69
  %604 = select i1 %42, float %567, float %588, !dbg !69
  %605 = select i1 %43, float %564, float %591, !dbg !69
  %606 = select i1 %43, float %561, float %594, !dbg !69
  %607 = select i1 %43, float %558, float %597, !dbg !69
  %608 = select i1 %43, float %555, float %600, !dbg !69
  %609 = sext i32 %18 to i64, !dbg !70
  %610 = getelementptr float, ptr addrspace(1) %10, i64 %609, !dbg !70
  %611 = sext i32 %22 to i64, !dbg !70
  %612 = getelementptr float, ptr addrspace(1) %10, i64 %611, !dbg !70
  %613 = bitcast float %601 to i32, !dbg !71
  %614 = bitcast float %602 to i32, !dbg !71
  %615 = bitcast float %603 to i32, !dbg !71
  %616 = bitcast float %604 to i32, !dbg !71
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %613, i32 %614, i32 %615, i32 %616, ptr addrspace(1) %610, i1 %26) #3, !dbg !71
  %617 = bitcast float %605 to i32, !dbg !71
  %618 = bitcast float %606 to i32, !dbg !71
  %619 = bitcast float %607 to i32, !dbg !71
  %620 = bitcast float %608 to i32, !dbg !71
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %617, i32 %618, i32 %619, i32 %620, ptr addrspace(1) %612, i1 %27) #3, !dbg !71
  ret void, !dbg !72
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ctpll5cic6idphn6urmwdsvztost3664bgkox2yezdlvtqfehcyt.py", directory: "inductor_cache/tp")
!4 = !{ptr @triton_poi_fused_cat_7, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_7, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_7", linkageName: "triton_poi_fused_cat_7", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 28, scope: !7)
!17 = !DILocation(line: 25, column: 19, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 32, column: 18, scope: !7)
!20 = !DILocation(line: 33, column: 34, scope: !7)
!21 = !DILocation(line: 33, column: 46, scope: !7)
!22 = !DILocation(line: 33, column: 39, scope: !7)
!23 = !DILocation(line: 33, column: 52, scope: !7)
!24 = !DILocation(line: 33, column: 30, scope: !7)
!25 = !DILocation(line: 33, column: 65, scope: !7)
!26 = !DILocation(line: 33, column: 58, scope: !7)
!27 = !DILocation(line: 34, column: 30, scope: !7)
!28 = !DILocation(line: 34, column: 35, scope: !7)
!29 = !DILocation(line: 36, column: 30, scope: !7)
!30 = !DILocation(line: 36, column: 35, scope: !7)
!31 = !DILocation(line: 38, column: 19, scope: !7)
!32 = !DILocation(line: 39, column: 27, scope: !7)
!33 = !DILocation(line: 41, column: 20, scope: !7)
!34 = !DILocation(line: 45, column: 31, scope: !7)
!35 = !DILocation(line: 45, column: 36, scope: !7)
!36 = !DILocation(line: 47, column: 31, scope: !7)
!37 = !DILocation(line: 47, column: 36, scope: !7)
!38 = !DILocation(line: 53, column: 20, scope: !7)
!39 = !DILocation(line: 56, column: 34, scope: !7)
!40 = !DILocation(line: 56, column: 45, scope: !7)
!41 = !DILocation(line: 56, column: 60, scope: !7)
!42 = !DILocation(line: 56, column: 39, scope: !7)
!43 = !DILocation(line: 56, column: 51, scope: !7)
!44 = !DILocation(line: 56, column: 31, scope: !7)
!45 = !DILocation(line: 56, column: 74, scope: !7)
!46 = !DILocation(line: 56, column: 66, scope: !7)
!47 = !DILocation(line: 57, column: 31, scope: !7)
!48 = !DILocation(line: 57, column: 45, scope: !7)
!49 = !DILocation(line: 59, column: 31, scope: !7)
!50 = !DILocation(line: 59, column: 45, scope: !7)
!51 = !DILocation(line: 61, column: 20, scope: !7)
!52 = !DILocation(line: 62, column: 27, scope: !7)
!53 = !DILocation(line: 64, column: 20, scope: !7)
!54 = !DILocation(line: 68, column: 31, scope: !7)
!55 = !DILocation(line: 68, column: 45, scope: !7)
!56 = !DILocation(line: 70, column: 31, scope: !7)
!57 = !DILocation(line: 70, column: 45, scope: !7)
!58 = !DILocation(line: 58, column: 20, scope: !7)
!59 = !DILocation(line: 67, column: 20, scope: !7)
!60 = !DILocation(line: 69, column: 20, scope: !7)
!61 = !DILocation(line: 71, column: 20, scope: !7)
!62 = !DILocation(line: 118, column: 15, scope: !63, inlinedAt: !65)
!63 = distinct !DILexicalBlockFile(scope: !7, file: !64, discriminator: 0)
!64 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!65 = !DILocation(line: 73, column: 42, scope: !7)
!66 = !DILocation(line: 121, column: 29, scope: !63, inlinedAt: !67)
!67 = !DILocation(line: 50, column: 42, scope: !7)
!68 = !DILocation(line: 121, column: 29, scope: !63, inlinedAt: !65)
!69 = !DILocation(line: 0, scope: !7)
!70 = !DILocation(line: 77, column: 25, scope: !7)
!71 = !DILocation(line: 77, column: 37, scope: !7)
!72 = !DILocation(line: 77, column: 4, scope: !7)
