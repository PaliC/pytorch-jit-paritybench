; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_threshold_backward_47(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, i32 %12) local_unnamed_addr !dbg !7 {
  %14 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %15 = shl i32 %14, 8, !dbg !11
  %16 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %17 = shl i32 %16, 1, !dbg !12
  %18 = and i32 %17, 254, !dbg !12
  %19 = or disjoint i32 %15, %18, !dbg !13
  %20 = sdiv i32 %19, 64, !dbg !14
  %21 = srem i32 %20, 128, !dbg !15
  %22 = sext i32 %19 to i64, !dbg !16
  %23 = getelementptr float, ptr addrspace(1) %1, i64 %22, !dbg !16
  %24 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %23, i1 true) #3, !dbg !17
  %25 = sext i32 %21 to i64, !dbg !18
  %26 = getelementptr float, ptr addrspace(1) %2, i64 %25, !dbg !18
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 true) #3, !dbg !19
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 true) #3, !dbg !19
  %29 = getelementptr float, ptr addrspace(1) %3, i64 %25, !dbg !20
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 true) #3, !dbg !21
  %31 = bitcast i32 %30 to float, !dbg !21
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 true) #3, !dbg !21
  %33 = bitcast i32 %32 to float, !dbg !21
  %34 = getelementptr float, ptr addrspace(1) %4, i64 %25, !dbg !22
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #3, !dbg !23
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #3, !dbg !23
  %37 = getelementptr float, ptr addrspace(1) %5, i64 %25, !dbg !24
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 true) #3, !dbg !25
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 true) #3, !dbg !25
  %40 = getelementptr float, ptr addrspace(1) %6, i64 %22, !dbg !26
  %41 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %40, i1 true) #3, !dbg !27
  %42 = getelementptr float, ptr addrspace(1) %7, i64 %25, !dbg !28
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 true) #3, !dbg !29
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 true) #3, !dbg !29
  %45 = getelementptr float, ptr addrspace(1) %8, i64 %25, !dbg !30
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 true) #3, !dbg !31
  %47 = bitcast i32 %46 to float, !dbg !31
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 true) #3, !dbg !31
  %49 = bitcast i32 %48 to float, !dbg !31
  %50 = getelementptr float, ptr addrspace(1) %9, i64 %25, !dbg !32
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 true) #3, !dbg !33
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 true) #3, !dbg !33
  %53 = getelementptr float, ptr addrspace(1) %10, i64 %25, !dbg !34
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 true) #3, !dbg !35
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 true) #3, !dbg !35
  %56 = fadd float %31, 0x3EE4F8B580000000, !dbg !36
  %57 = fadd float %33, 0x3EE4F8B580000000, !dbg !36
  %58 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !37
  %.not.i = icmp eq i32 %58, 0, !dbg !37
  %59 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !37
  %.not1.i = icmp eq i32 %59, 0, !dbg !37
  br i1 %.not.i, label %65, label %60, !dbg !37

60:                                               ; preds = %13
  br i1 %.not1.i, label %63, label %61, !dbg !37

61:                                               ; preds = %60
  %62 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %56) #3, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

63:                                               ; preds = %60
  %64 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %56) #3, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

65:                                               ; preds = %13
  br i1 %.not1.i, label %68, label %66, !dbg !37

66:                                               ; preds = %65
  %67 = tail call float @llvm.nvvm.sqrt.rn.f(float %56) #3, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

68:                                               ; preds = %65
  %69 = tail call float @llvm.nvvm.sqrt.approx.f(float %56) #3, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

__nv_sqrtf.exit:                                  ; preds = %61, %63, %66, %68
  %.0.i = phi float [ %62, %61 ], [ %64, %63 ], [ %67, %66 ], [ %69, %68 ], !dbg !37
  %70 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !37
  %.not.i1 = icmp eq i32 %70, 0, !dbg !37
  %71 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !37
  %.not1.i4 = icmp eq i32 %71, 0, !dbg !37
  br i1 %.not.i1, label %77, label %72, !dbg !37

72:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %75, label %73, !dbg !37

73:                                               ; preds = %72
  %74 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %57) #3, !dbg !37
  br label %__nv_sqrtf.exit5, !dbg !37

75:                                               ; preds = %72
  %76 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %57) #3, !dbg !37
  br label %__nv_sqrtf.exit5, !dbg !37

77:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %80, label %78, !dbg !37

78:                                               ; preds = %77
  %79 = tail call float @llvm.nvvm.sqrt.rn.f(float %57) #3, !dbg !37
  br label %__nv_sqrtf.exit5, !dbg !37

80:                                               ; preds = %77
  %81 = tail call float @llvm.nvvm.sqrt.approx.f(float %57) #3, !dbg !37
  br label %__nv_sqrtf.exit5, !dbg !37

__nv_sqrtf.exit5:                                 ; preds = %73, %75, %78, %80
  %.0.i3 = phi float [ %74, %73 ], [ %76, %75 ], [ %79, %78 ], [ %81, %80 ], !dbg !37
  %82 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !38
  %83 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !38
  %84 = fadd float %47, 0x3EE4F8B580000000, !dbg !39
  %85 = fadd float %49, 0x3EE4F8B580000000, !dbg !39
  %86 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not.i6 = icmp eq i32 %86, 0, !dbg !40
  %87 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !40
  %.not1.i9 = icmp eq i32 %87, 0, !dbg !40
  br i1 %.not.i6, label %93, label %88, !dbg !40

88:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %91, label %89, !dbg !40

89:                                               ; preds = %88
  %90 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %84) #3, !dbg !40
  br label %__nv_sqrtf.exit10, !dbg !40

91:                                               ; preds = %88
  %92 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %84) #3, !dbg !40
  br label %__nv_sqrtf.exit10, !dbg !40

93:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %96, label %94, !dbg !40

94:                                               ; preds = %93
  %95 = tail call float @llvm.nvvm.sqrt.rn.f(float %84) #3, !dbg !40
  br label %__nv_sqrtf.exit10, !dbg !40

96:                                               ; preds = %93
  %97 = tail call float @llvm.nvvm.sqrt.approx.f(float %84) #3, !dbg !40
  br label %__nv_sqrtf.exit10, !dbg !40

__nv_sqrtf.exit10:                                ; preds = %89, %91, %94, %96
  %.0.i8 = phi float [ %90, %89 ], [ %92, %91 ], [ %95, %94 ], [ %97, %96 ], !dbg !40
  %98 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not.i11 = icmp eq i32 %98, 0, !dbg !40
  %99 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !40
  %.not1.i14 = icmp eq i32 %99, 0, !dbg !40
  br i1 %.not.i11, label %105, label %100, !dbg !40

100:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %103, label %101, !dbg !40

101:                                              ; preds = %100
  %102 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %85) #3, !dbg !40
  br label %__nv_sqrtf.exit15, !dbg !40

103:                                              ; preds = %100
  %104 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %85) #3, !dbg !40
  br label %__nv_sqrtf.exit15, !dbg !40

105:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %108, label %106, !dbg !40

106:                                              ; preds = %105
  %107 = tail call float @llvm.nvvm.sqrt.rn.f(float %85) #3, !dbg !40
  br label %__nv_sqrtf.exit15, !dbg !40

108:                                              ; preds = %105
  %109 = tail call float @llvm.nvvm.sqrt.approx.f(float %85) #3, !dbg !40
  br label %__nv_sqrtf.exit15, !dbg !40

__nv_sqrtf.exit15:                                ; preds = %101, %103, %106, %108
  %.0.i13 = phi float [ %102, %101 ], [ %104, %103 ], [ %107, %106 ], [ %109, %108 ], !dbg !40
  %110 = extractvalue { i32, i32 } %41, 1, !dbg !27
  %111 = insertelement <2 x i32> poison, i32 %28, i64 0, !dbg !19
  %112 = insertelement <2 x i32> %111, i32 %44, i64 1, !dbg !19
  %113 = bitcast <2 x i32> %112 to <2 x float>, !dbg !19
  %114 = extractvalue { i32, i32 } %41, 0, !dbg !27
  %115 = insertelement <2 x i32> poison, i32 %27, i64 0, !dbg !19
  %116 = insertelement <2 x i32> %115, i32 %43, i64 1, !dbg !19
  %117 = bitcast <2 x i32> %116 to <2 x float>, !dbg !19
  %118 = extractvalue { i32, i32 } %24, 1, !dbg !17
  %119 = insertelement <2 x i32> poison, i32 %36, i64 0, !dbg !23
  %120 = insertelement <2 x i32> %119, i32 %52, i64 1, !dbg !23
  %121 = bitcast <2 x i32> %120 to <2 x float>, !dbg !23
  %122 = insertelement <2 x i32> poison, i32 %39, i64 0, !dbg !25
  %123 = insertelement <2 x i32> %122, i32 %55, i64 1, !dbg !25
  %124 = bitcast <2 x i32> %123 to <2 x float>, !dbg !25
  %125 = extractvalue { i32, i32 } %24, 0, !dbg !17
  %126 = insertelement <2 x i32> poison, i32 %35, i64 0, !dbg !23
  %127 = insertelement <2 x i32> %126, i32 %51, i64 1, !dbg !23
  %128 = bitcast <2 x i32> %127 to <2 x float>, !dbg !23
  %129 = insertelement <2 x i32> poison, i32 %38, i64 0, !dbg !25
  %130 = insertelement <2 x i32> %129, i32 %54, i64 1, !dbg !25
  %131 = bitcast <2 x i32> %130 to <2 x float>, !dbg !25
  %132 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !41
  %133 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !41
  %134 = insertelement <2 x i32> poison, i32 %125, i64 0, !dbg !17
  %135 = insertelement <2 x i32> %134, i32 %114, i64 1, !dbg !17
  %136 = bitcast <2 x i32> %135 to <2 x float>, !dbg !17
  %137 = fsub <2 x float> %136, %117, !dbg !42
  %138 = insertelement <2 x float> poison, float %82, i64 0, !dbg !43
  %139 = insertelement <2 x float> %138, float %132, i64 1, !dbg !43
  %140 = fmul <2 x float> %137, %139, !dbg !43
  %141 = fmul <2 x float> %140, %128, !dbg !44
  %142 = fadd <2 x float> %141, %131, !dbg !45
  %143 = insertelement <2 x i32> poison, i32 %118, i64 0, !dbg !17
  %144 = insertelement <2 x i32> %143, i32 %110, i64 1, !dbg !17
  %145 = bitcast <2 x i32> %144 to <2 x float>, !dbg !17
  %146 = fsub <2 x float> %145, %113, !dbg !42
  %147 = insertelement <2 x float> poison, float %83, i64 0, !dbg !43
  %148 = insertelement <2 x float> %147, float %133, i64 1, !dbg !43
  %149 = fmul <2 x float> %146, %148, !dbg !43
  %150 = fmul <2 x float> %149, %121, !dbg !44
  %151 = fadd <2 x float> %150, %124, !dbg !45
  %152 = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !46
  %153 = getelementptr i1, ptr addrspace(1) %11, i64 %22, !dbg !47
  %154 = shufflevector <2 x float> %142, <2 x float> %151, <2 x i32> <i32 0, i32 2>, !dbg !48
  %155 = shufflevector <2 x float> %142, <2 x float> %151, <2 x i32> <i32 1, i32 3>, !dbg !48
  %156 = fadd <2 x float> %154, %155, !dbg !48
  %157 = fcmp olt <2 x float> %156, zeroinitializer, !dbg !49
  %158 = select <2 x i1> %157, <2 x float> zeroinitializer, <2 x float> %156, !dbg !53
  %159 = fcmp ole <2 x float> %158, zeroinitializer, !dbg !54
  %bc = bitcast <2 x float> %158 to <2 x i32>, !dbg !55
  %160 = extractelement <2 x i32> %bc, i64 0, !dbg !55
  %bc16 = bitcast <2 x float> %158 to <2 x i32>, !dbg !55
  %161 = extractelement <2 x i32> %bc16, i64 1, !dbg !55
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %160, i32 %161, ptr addrspace(1) %152, i1 true) #3, !dbg !55
  %162 = zext <2 x i1> %159 to <2 x i8>, !dbg !56
  %163 = bitcast <2 x i8> %162 to i16, !dbg !56
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %163, ptr addrspace(1) %153, i1 true) #3, !dbg !56
  ret void, !dbg !57
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cyl6fd5p5qmfxbsj4f6vdn4fp4tmu5imtwtowygeylls54mkkfqu.py", directory: "inductor_cache/yl")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_threshold_backward_47, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_threshold_backward_47, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_relu_threshold_backward_47", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_relu_threshold_backward_47", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 27, scope: !7)
!16 = !DILocation(line: 26, column: 30, scope: !7)
!17 = !DILocation(line: 26, column: 35, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 35, scope: !7)
!20 = !DILocation(line: 28, column: 30, scope: !7)
!21 = !DILocation(line: 28, column: 35, scope: !7)
!22 = !DILocation(line: 29, column: 31, scope: !7)
!23 = !DILocation(line: 29, column: 36, scope: !7)
!24 = !DILocation(line: 30, column: 31, scope: !7)
!25 = !DILocation(line: 30, column: 36, scope: !7)
!26 = !DILocation(line: 31, column: 31, scope: !7)
!27 = !DILocation(line: 31, column: 36, scope: !7)
!28 = !DILocation(line: 32, column: 31, scope: !7)
!29 = !DILocation(line: 32, column: 36, scope: !7)
!30 = !DILocation(line: 33, column: 31, scope: !7)
!31 = !DILocation(line: 33, column: 36, scope: !7)
!32 = !DILocation(line: 34, column: 31, scope: !7)
!33 = !DILocation(line: 34, column: 36, scope: !7)
!34 = !DILocation(line: 35, column: 31, scope: !7)
!35 = !DILocation(line: 35, column: 36, scope: !7)
!36 = !DILocation(line: 38, column: 18, scope: !7)
!37 = !DILocation(line: 39, column: 26, scope: !7)
!38 = !DILocation(line: 41, column: 18, scope: !7)
!39 = !DILocation(line: 48, column: 20, scope: !7)
!40 = !DILocation(line: 49, column: 27, scope: !7)
!41 = !DILocation(line: 50, column: 19, scope: !7)
!42 = !DILocation(line: 36, column: 18, scope: !7)
!43 = !DILocation(line: 44, column: 19, scope: !7)
!44 = !DILocation(line: 45, column: 20, scope: !7)
!45 = !DILocation(line: 46, column: 20, scope: !7)
!46 = !DILocation(line: 60, column: 28, scope: !7)
!47 = !DILocation(line: 61, column: 25, scope: !7)
!48 = !DILocation(line: 55, column: 20, scope: !7)
!49 = !DILocation(line: 118, column: 15, scope: !50, inlinedAt: !52)
!50 = distinct !DILexicalBlockFile(scope: !7, file: !51, discriminator: 0)
!51 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!52 = !DILocation(line: 57, column: 42, scope: !7)
!53 = !DILocation(line: 121, column: 29, scope: !50, inlinedAt: !52)
!54 = !DILocation(line: 59, column: 21, scope: !7)
!55 = !DILocation(line: 60, column: 40, scope: !7)
!56 = !DILocation(line: 61, column: 37, scope: !7)
!57 = !DILocation(line: 61, column: 4, scope: !7)
