; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_cat_relu_20(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %10 = shl i32 %9, 9, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 508, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %.frozen = freeze i32 %14, !dbg !14
  %15 = sdiv i32 %.frozen, 1024, !dbg !14
  %16 = mul i32 %15, 1024, !dbg !15
  %.decomposed = sub i32 %.frozen, %16, !dbg !15
  %17 = icmp slt i32 %.decomposed, 512, !dbg !16
  %18 = shl nsw i32 %15, 9, !dbg !17
  %19 = add nsw i32 %18, %.decomposed, !dbg !18
  %20 = sext i32 %19 to i64, !dbg !19
  %21 = getelementptr float, ptr addrspace(1) %0, i64 %20, !dbg !19
  %22 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %21, i1 %17, i32 0, i1 %17, i32 0, i1 %17, i32 0, i1 %17, i32 0, i1 %17) #3, !dbg !20
  %23 = sext i32 %.decomposed to i64, !dbg !21
  %24 = getelementptr float, ptr addrspace(1) %1, i64 %23, !dbg !21
  %25 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %24, i1 %17, i32 0, i1 %17, i32 0, i1 %17, i32 0, i1 %17, i32 0, i1 %17) #3, !dbg !22
  %26 = getelementptr float, ptr addrspace(1) %2, i64 %23, !dbg !23
  %27 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %26, i1 %17, i32 0, i1 %17, i32 0, i1 %17, i32 0, i1 %17, i32 0, i1 %17) #3, !dbg !24
  %28 = extractvalue { i32, i32, i32, i32 } %27, 0, !dbg !24
  %29 = extractvalue { i32, i32, i32, i32 } %27, 1, !dbg !24
  %30 = extractvalue { i32, i32, i32, i32 } %27, 2, !dbg !24
  %31 = extractvalue { i32, i32, i32, i32 } %27, 3, !dbg !24
  %32 = bitcast i32 %28 to float, !dbg !24
  %33 = bitcast i32 %29 to float, !dbg !24
  %34 = bitcast i32 %30 to float, !dbg !24
  %35 = bitcast i32 %31 to float, !dbg !24
  %36 = fadd float %32, 0x3EE4F8B580000000, !dbg !25
  %37 = fadd float %33, 0x3EE4F8B580000000, !dbg !25
  %38 = fadd float %34, 0x3EE4F8B580000000, !dbg !25
  %39 = fadd float %35, 0x3EE4F8B580000000, !dbg !25
  %40 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !26
  %.not.i = icmp eq i32 %40, 0, !dbg !26
  %41 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !26
  %.not1.i = icmp eq i32 %41, 0, !dbg !26
  br i1 %.not.i, label %47, label %42, !dbg !26

42:                                               ; preds = %8
  br i1 %.not1.i, label %45, label %43, !dbg !26

43:                                               ; preds = %42
  %44 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %36) #3, !dbg !26
  br label %__nv_sqrtf.exit, !dbg !26

45:                                               ; preds = %42
  %46 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %36) #3, !dbg !26
  br label %__nv_sqrtf.exit, !dbg !26

47:                                               ; preds = %8
  br i1 %.not1.i, label %50, label %48, !dbg !26

48:                                               ; preds = %47
  %49 = tail call float @llvm.nvvm.sqrt.rn.f(float %36) #3, !dbg !26
  br label %__nv_sqrtf.exit, !dbg !26

50:                                               ; preds = %47
  %51 = tail call float @llvm.nvvm.sqrt.approx.f(float %36) #3, !dbg !26
  br label %__nv_sqrtf.exit, !dbg !26

__nv_sqrtf.exit:                                  ; preds = %43, %45, %48, %50
  %.0.i = phi float [ %44, %43 ], [ %46, %45 ], [ %49, %48 ], [ %51, %50 ], !dbg !26
  %52 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !26
  %.not.i1 = icmp eq i32 %52, 0, !dbg !26
  %53 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !26
  %.not1.i4 = icmp eq i32 %53, 0, !dbg !26
  br i1 %.not.i1, label %59, label %54, !dbg !26

54:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %57, label %55, !dbg !26

55:                                               ; preds = %54
  %56 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %37) #3, !dbg !26
  br label %__nv_sqrtf.exit5, !dbg !26

57:                                               ; preds = %54
  %58 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %37) #3, !dbg !26
  br label %__nv_sqrtf.exit5, !dbg !26

59:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %62, label %60, !dbg !26

60:                                               ; preds = %59
  %61 = tail call float @llvm.nvvm.sqrt.rn.f(float %37) #3, !dbg !26
  br label %__nv_sqrtf.exit5, !dbg !26

62:                                               ; preds = %59
  %63 = tail call float @llvm.nvvm.sqrt.approx.f(float %37) #3, !dbg !26
  br label %__nv_sqrtf.exit5, !dbg !26

__nv_sqrtf.exit5:                                 ; preds = %55, %57, %60, %62
  %.0.i3 = phi float [ %56, %55 ], [ %58, %57 ], [ %61, %60 ], [ %63, %62 ], !dbg !26
  %64 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !26
  %.not.i6 = icmp eq i32 %64, 0, !dbg !26
  %65 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !26
  %.not1.i9 = icmp eq i32 %65, 0, !dbg !26
  br i1 %.not.i6, label %71, label %66, !dbg !26

66:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %69, label %67, !dbg !26

67:                                               ; preds = %66
  %68 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %38) #3, !dbg !26
  br label %__nv_sqrtf.exit10, !dbg !26

69:                                               ; preds = %66
  %70 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %38) #3, !dbg !26
  br label %__nv_sqrtf.exit10, !dbg !26

71:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %74, label %72, !dbg !26

72:                                               ; preds = %71
  %73 = tail call float @llvm.nvvm.sqrt.rn.f(float %38) #3, !dbg !26
  br label %__nv_sqrtf.exit10, !dbg !26

74:                                               ; preds = %71
  %75 = tail call float @llvm.nvvm.sqrt.approx.f(float %38) #3, !dbg !26
  br label %__nv_sqrtf.exit10, !dbg !26

__nv_sqrtf.exit10:                                ; preds = %67, %69, %72, %74
  %.0.i8 = phi float [ %68, %67 ], [ %70, %69 ], [ %73, %72 ], [ %75, %74 ], !dbg !26
  %76 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !26
  %.not.i11 = icmp eq i32 %76, 0, !dbg !26
  %77 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !26
  %.not1.i14 = icmp eq i32 %77, 0, !dbg !26
  br i1 %.not.i11, label %83, label %78, !dbg !26

78:                                               ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %81, label %79, !dbg !26

79:                                               ; preds = %78
  %80 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %39) #3, !dbg !26
  br label %__nv_sqrtf.exit15, !dbg !26

81:                                               ; preds = %78
  %82 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %39) #3, !dbg !26
  br label %__nv_sqrtf.exit15, !dbg !26

83:                                               ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %86, label %84, !dbg !26

84:                                               ; preds = %83
  %85 = tail call float @llvm.nvvm.sqrt.rn.f(float %39) #3, !dbg !26
  br label %__nv_sqrtf.exit15, !dbg !26

86:                                               ; preds = %83
  %87 = tail call float @llvm.nvvm.sqrt.approx.f(float %39) #3, !dbg !26
  br label %__nv_sqrtf.exit15, !dbg !26

__nv_sqrtf.exit15:                                ; preds = %79, %81, %84, %86
  %.0.i13 = phi float [ %80, %79 ], [ %82, %81 ], [ %85, %84 ], [ %87, %86 ], !dbg !26
  %88 = extractvalue { i32, i32, i32, i32 } %22, 3, !dbg !20
  %89 = extractvalue { i32, i32, i32, i32 } %25, 3, !dbg !22
  %90 = extractvalue { i32, i32, i32, i32 } %22, 2, !dbg !20
  %91 = extractvalue { i32, i32, i32, i32 } %25, 2, !dbg !22
  %92 = extractvalue { i32, i32, i32, i32 } %22, 1, !dbg !20
  %93 = extractvalue { i32, i32, i32, i32 } %25, 1, !dbg !22
  %94 = extractvalue { i32, i32, i32, i32 } %22, 0, !dbg !20
  %95 = extractvalue { i32, i32, i32, i32 } %25, 0, !dbg !22
  %96 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !27
  %97 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !27
  %98 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !27
  %99 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !27
  %100 = getelementptr float, ptr addrspace(1) %3, i64 %23, !dbg !28
  %101 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %100, i1 %17, i32 0, i1 %17, i32 0, i1 %17, i32 0, i1 %17, i32 0, i1 %17) #3, !dbg !29
  %102 = extractvalue { i32, i32, i32, i32 } %101, 0, !dbg !29
  %103 = extractvalue { i32, i32, i32, i32 } %101, 1, !dbg !29
  %104 = extractvalue { i32, i32, i32, i32 } %101, 2, !dbg !29
  %105 = extractvalue { i32, i32, i32, i32 } %101, 3, !dbg !29
  %106 = getelementptr float, ptr addrspace(1) %4, i64 %23, !dbg !30
  %107 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %106, i1 %17, i32 0, i1 %17, i32 0, i1 %17, i32 0, i1 %17, i32 0, i1 %17) #3, !dbg !31
  %108 = extractvalue { i32, i32, i32, i32 } %107, 0, !dbg !31
  %109 = extractvalue { i32, i32, i32, i32 } %107, 1, !dbg !31
  %110 = extractvalue { i32, i32, i32, i32 } %107, 2, !dbg !31
  %111 = extractvalue { i32, i32, i32, i32 } %107, 3, !dbg !31
  %112 = icmp sgt i32 %.decomposed, 511, !dbg !32
  %113 = sext i32 %19 to i64, !dbg !33
  %114 = getelementptr float, ptr addrspace(1) %5, i64 %113, !dbg !33
  %115 = getelementptr i8, ptr addrspace(1) %114, i64 -2048, !dbg !33
  %116 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %115, i1 %112, i32 0, i1 %112, i32 0, i1 %112, i32 0, i1 %112, i32 0, i1 %112) #3, !dbg !34
  %117 = extractvalue { i32, i32, i32, i32 } %116, 0, !dbg !34
  %118 = extractvalue { i32, i32, i32, i32 } %116, 1, !dbg !34
  %119 = extractvalue { i32, i32, i32, i32 } %116, 2, !dbg !34
  %120 = extractvalue { i32, i32, i32, i32 } %116, 3, !dbg !34
  %121 = insertelement <4 x i32> poison, i32 %88, i64 0, !dbg !20
  %122 = insertelement <4 x i32> %121, i32 %90, i64 1, !dbg !20
  %123 = insertelement <4 x i32> %122, i32 %92, i64 2, !dbg !20
  %124 = insertelement <4 x i32> %123, i32 %94, i64 3, !dbg !20
  %125 = bitcast <4 x i32> %124 to <4 x float>, !dbg !20
  %126 = insertelement <4 x i32> poison, i32 %89, i64 0, !dbg !22
  %127 = insertelement <4 x i32> %126, i32 %91, i64 1, !dbg !22
  %128 = insertelement <4 x i32> %127, i32 %93, i64 2, !dbg !22
  %129 = insertelement <4 x i32> %128, i32 %95, i64 3, !dbg !22
  %130 = bitcast <4 x i32> %129 to <4 x float>, !dbg !22
  %131 = fsub <4 x float> %125, %130, !dbg !35
  %132 = insertelement <4 x float> poison, float %99, i64 0, !dbg !36
  %133 = insertelement <4 x float> %132, float %98, i64 1, !dbg !36
  %134 = insertelement <4 x float> %133, float %97, i64 2, !dbg !36
  %135 = insertelement <4 x float> %134, float %96, i64 3, !dbg !36
  %136 = fmul <4 x float> %131, %135, !dbg !36
  %137 = insertelement <4 x i32> poison, i32 %105, i64 0, !dbg !29
  %138 = insertelement <4 x i32> %137, i32 %104, i64 1, !dbg !29
  %139 = insertelement <4 x i32> %138, i32 %103, i64 2, !dbg !29
  %140 = insertelement <4 x i32> %139, i32 %102, i64 3, !dbg !29
  %141 = bitcast <4 x i32> %140 to <4 x float>, !dbg !29
  %142 = fmul <4 x float> %136, %141, !dbg !37
  %143 = insertelement <4 x i32> poison, i32 %111, i64 0, !dbg !31
  %144 = insertelement <4 x i32> %143, i32 %110, i64 1, !dbg !31
  %145 = insertelement <4 x i32> %144, i32 %109, i64 2, !dbg !31
  %146 = insertelement <4 x i32> %145, i32 %108, i64 3, !dbg !31
  %147 = bitcast <4 x i32> %146 to <4 x float>, !dbg !31
  %148 = fadd <4 x float> %142, %147, !dbg !38
  %149 = insertelement <4 x i32> poison, i32 %120, i64 0, !dbg !34
  %150 = insertelement <4 x i32> %149, i32 %119, i64 1, !dbg !34
  %151 = insertelement <4 x i32> %150, i32 %118, i64 2, !dbg !34
  %152 = insertelement <4 x i32> %151, i32 %117, i64 3, !dbg !34
  %153 = bitcast <4 x i32> %152 to <4 x float>, !dbg !34
  %154 = insertelement <4 x i1> poison, i1 %17, i64 0, !dbg !39
  %155 = shufflevector <4 x i1> %154, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !39
  %156 = select <4 x i1> %155, <4 x float> %148, <4 x float> %153, !dbg !39
  %157 = fcmp olt <4 x float> %156, zeroinitializer, !dbg !40
  %158 = extractelement <4 x i1> %157, i64 3, !dbg !44
  %159 = extractelement <4 x i1> %157, i64 2, !dbg !44
  %160 = extractelement <4 x i1> %157, i64 1, !dbg !44
  %161 = extractelement <4 x i1> %157, i64 0, !dbg !44
  %162 = sext i32 %14 to i64, !dbg !45
  %163 = getelementptr float, ptr addrspace(1) %6, i64 %162, !dbg !45
  %bc = bitcast <4 x float> %156 to <4 x i32>, !dbg !46
  %164 = extractelement <4 x i32> %bc, i64 3, !dbg !46
  %165 = select i1 %158, i32 0, i32 %164, !dbg !44
  %bc16 = bitcast <4 x float> %156 to <4 x i32>, !dbg !46
  %166 = extractelement <4 x i32> %bc16, i64 2, !dbg !46
  %167 = select i1 %159, i32 0, i32 %166, !dbg !44
  %bc17 = bitcast <4 x float> %156 to <4 x i32>, !dbg !46
  %168 = extractelement <4 x i32> %bc17, i64 1, !dbg !46
  %169 = select i1 %160, i32 0, i32 %168, !dbg !44
  %bc18 = bitcast <4 x float> %156 to <4 x i32>, !dbg !46
  %170 = extractelement <4 x i32> %bc18, i64 0, !dbg !46
  %171 = select i1 %161, i32 0, i32 %170, !dbg !44
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %165, i32 %167, i32 %169, i32 %171, ptr addrspace(1) %163, i1 true) #3, !dbg !46
  ret void, !dbg !47
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "crkqa6npbdf2iqug572kwfaox4ekis26uaphc5g52zbhl3jmxtd2.py", directory: "inductor_cache/rk")
!4 = !{ptr @triton_poi_fused_cat_relu_20, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_relu_20, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_relu_20", linkageName: "triton_poi_fused_cat_relu_20", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 31, column: 18, scope: !7)
!17 = !DILocation(line: 32, column: 34, scope: !7)
!18 = !DILocation(line: 32, column: 40, scope: !7)
!19 = !DILocation(line: 32, column: 30, scope: !7)
!20 = !DILocation(line: 32, column: 46, scope: !7)
!21 = !DILocation(line: 33, column: 30, scope: !7)
!22 = !DILocation(line: 33, column: 35, scope: !7)
!23 = !DILocation(line: 35, column: 30, scope: !7)
!24 = !DILocation(line: 35, column: 35, scope: !7)
!25 = !DILocation(line: 37, column: 19, scope: !7)
!26 = !DILocation(line: 38, column: 27, scope: !7)
!27 = !DILocation(line: 40, column: 20, scope: !7)
!28 = !DILocation(line: 44, column: 31, scope: !7)
!29 = !DILocation(line: 44, column: 36, scope: !7)
!30 = !DILocation(line: 46, column: 31, scope: !7)
!31 = !DILocation(line: 46, column: 36, scope: !7)
!32 = !DILocation(line: 50, column: 20, scope: !7)
!33 = !DILocation(line: 53, column: 31, scope: !7)
!34 = !DILocation(line: 53, column: 56, scope: !7)
!35 = !DILocation(line: 34, column: 18, scope: !7)
!36 = !DILocation(line: 43, column: 19, scope: !7)
!37 = !DILocation(line: 45, column: 20, scope: !7)
!38 = !DILocation(line: 47, column: 20, scope: !7)
!39 = !DILocation(line: 0, scope: !7)
!40 = !DILocation(line: 118, column: 15, scope: !41, inlinedAt: !43)
!41 = distinct !DILexicalBlockFile(scope: !7, file: !42, discriminator: 0)
!42 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!43 = !DILocation(line: 56, column: 42, scope: !7)
!44 = !DILocation(line: 121, column: 29, scope: !41, inlinedAt: !43)
!45 = !DILocation(line: 57, column: 25, scope: !7)
!46 = !DILocation(line: 57, column: 37, scope: !7)
!47 = !DILocation(line: 57, column: 4, scope: !7)
