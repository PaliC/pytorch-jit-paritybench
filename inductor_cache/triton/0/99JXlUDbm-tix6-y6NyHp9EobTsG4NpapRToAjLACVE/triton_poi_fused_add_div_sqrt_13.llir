; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_add_div_sqrt_13(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #3, !dbg !10
  %7 = icmp slt i32 %6, 512, !dbg !11
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !12
  %9 = shl i32 %8, 10, !dbg !13
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !14
  %11 = shl i32 %10, 2, !dbg !14
  %12 = and i32 %11, 508, !dbg !14
  %13 = or disjoint i32 %12, 1, !dbg !14
  %14 = or disjoint i32 %12, 2, !dbg !14
  %15 = or disjoint i32 %12, 3, !dbg !14
  %16 = or disjoint i32 %12, 513, !dbg !14
  %17 = or disjoint i32 %12, 514, !dbg !14
  %18 = or disjoint i32 %12, 515, !dbg !14
  %19 = or disjoint i32 %9, %12, !dbg !15
  %20 = or disjoint i32 %9, %13, !dbg !15
  %21 = or disjoint i32 %9, %14, !dbg !15
  %22 = or disjoint i32 %9, %15, !dbg !15
  %23 = or disjoint i32 %19, 512, !dbg !15
  %24 = or disjoint i32 %9, %16, !dbg !15
  %25 = or disjoint i32 %9, %17, !dbg !15
  %26 = or disjoint i32 %9, %18, !dbg !15
  %27 = icmp slt i32 %19, 1024, !dbg !16
  %28 = icmp slt i32 %23, 1024, !dbg !16
  %.frozen = freeze i32 %6, !dbg !17
  %29 = sdiv i32 %.frozen, 128, !dbg !17
  %30 = mul i32 %29, 128, !dbg !18
  %.decomposed = sub i32 %.frozen, %30, !dbg !18
  %31 = shl i32 %19, 7, !dbg !19
  %32 = shl i32 %20, 7, !dbg !19
  %33 = shl i32 %21, 7, !dbg !19
  %34 = shl i32 %22, 7, !dbg !19
  %35 = shl i32 %23, 7, !dbg !19
  %36 = shl i32 %24, 7, !dbg !19
  %37 = shl i32 %25, 7, !dbg !19
  %38 = shl i32 %26, 7, !dbg !19
  %39 = shl i32 %29, 17, !dbg !20
  %40 = add i32 %39, %.decomposed, !dbg !21
  %41 = add i32 %40, %31, !dbg !22
  %42 = add i32 %40, %32, !dbg !22
  %43 = add i32 %40, %33, !dbg !22
  %44 = add i32 %40, %34, !dbg !22
  %45 = add i32 %40, %35, !dbg !22
  %46 = add i32 %40, %36, !dbg !22
  %47 = add i32 %40, %37, !dbg !22
  %48 = add i32 %40, %38, !dbg !22
  %49 = sext i32 %41 to i64, !dbg !23
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !23
  %51 = sext i32 %42 to i64, !dbg !23
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !23
  %53 = sext i32 %43 to i64, !dbg !23
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !23
  %55 = sext i32 %44 to i64, !dbg !23
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !23
  %57 = sext i32 %45 to i64, !dbg !23
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !23
  %59 = sext i32 %46 to i64, !dbg !23
  %60 = getelementptr float, ptr addrspace(1) %0, i64 %59, !dbg !23
  %61 = sext i32 %47 to i64, !dbg !23
  %62 = getelementptr float, ptr addrspace(1) %0, i64 %61, !dbg !23
  %63 = sext i32 %48 to i64, !dbg !23
  %64 = getelementptr float, ptr addrspace(1) %0, i64 %63, !dbg !23
  %65 = and i1 %7, %27, !dbg !24
  %66 = and i1 %28, %7, !dbg !24
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 %65) #3, !dbg !25
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 %65) #3, !dbg !25
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 %65) #3, !dbg !25
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 %65) #3, !dbg !25
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %66) #3, !dbg !25
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 %66) #3, !dbg !25
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 %66) #3, !dbg !25
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 %66) #3, !dbg !25
  %75 = shl i32 %29, 10, !dbg !26
  %76 = add i32 %19, %75, !dbg !27
  %77 = add i32 %75, %23, !dbg !27
  %78 = sext i32 %76 to i64, !dbg !28
  %79 = getelementptr float, ptr addrspace(1) %1, i64 %78, !dbg !28
  %80 = sext i32 %77 to i64, !dbg !28
  %81 = getelementptr float, ptr addrspace(1) %1, i64 %80, !dbg !28
  %82 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %79, i1 %65) #3, !dbg !29
  %83 = extractvalue { i32, i32, i32, i32 } %82, 0, !dbg !29
  %84 = extractvalue { i32, i32, i32, i32 } %82, 1, !dbg !29
  %85 = extractvalue { i32, i32, i32, i32 } %82, 2, !dbg !29
  %86 = extractvalue { i32, i32, i32, i32 } %82, 3, !dbg !29
  %87 = bitcast i32 %83 to float, !dbg !29
  %88 = bitcast i32 %84 to float, !dbg !29
  %89 = bitcast i32 %85 to float, !dbg !29
  %90 = bitcast i32 %86 to float, !dbg !29
  %91 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %81, i1 %66) #3, !dbg !29
  %92 = extractvalue { i32, i32, i32, i32 } %91, 0, !dbg !29
  %93 = extractvalue { i32, i32, i32, i32 } %91, 1, !dbg !29
  %94 = extractvalue { i32, i32, i32, i32 } %91, 2, !dbg !29
  %95 = extractvalue { i32, i32, i32, i32 } %91, 3, !dbg !29
  %96 = bitcast i32 %92 to float, !dbg !29
  %97 = bitcast i32 %93 to float, !dbg !29
  %98 = bitcast i32 %94 to float, !dbg !29
  %99 = bitcast i32 %95 to float, !dbg !29
  %100 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i = icmp eq i32 %100, 0, !dbg !30
  %101 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i = icmp eq i32 %101, 0, !dbg !30
  br i1 %.not.i, label %107, label %102, !dbg !30

102:                                              ; preds = %5
  br i1 %.not1.i, label %105, label %103, !dbg !30

103:                                              ; preds = %102
  %104 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %87) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

105:                                              ; preds = %102
  %106 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %87) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

107:                                              ; preds = %5
  br i1 %.not1.i, label %110, label %108, !dbg !30

108:                                              ; preds = %107
  %109 = tail call float @llvm.nvvm.sqrt.rn.f(float %87) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

110:                                              ; preds = %107
  %111 = tail call float @llvm.nvvm.sqrt.approx.f(float %87) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

__nv_sqrtf.exit:                                  ; preds = %103, %105, %108, %110
  %.0.i = phi float [ %104, %103 ], [ %106, %105 ], [ %109, %108 ], [ %111, %110 ], !dbg !30
  %112 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i1 = icmp eq i32 %112, 0, !dbg !30
  %113 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i4 = icmp eq i32 %113, 0, !dbg !30
  br i1 %.not.i1, label %119, label %114, !dbg !30

114:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %117, label %115, !dbg !30

115:                                              ; preds = %114
  %116 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %88) #3, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

117:                                              ; preds = %114
  %118 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %88) #3, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

119:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %122, label %120, !dbg !30

120:                                              ; preds = %119
  %121 = tail call float @llvm.nvvm.sqrt.rn.f(float %88) #3, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

122:                                              ; preds = %119
  %123 = tail call float @llvm.nvvm.sqrt.approx.f(float %88) #3, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

__nv_sqrtf.exit5:                                 ; preds = %115, %117, %120, %122
  %.0.i3 = phi float [ %116, %115 ], [ %118, %117 ], [ %121, %120 ], [ %123, %122 ], !dbg !30
  %124 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i6 = icmp eq i32 %124, 0, !dbg !30
  %125 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i9 = icmp eq i32 %125, 0, !dbg !30
  br i1 %.not.i6, label %131, label %126, !dbg !30

126:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %129, label %127, !dbg !30

127:                                              ; preds = %126
  %128 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %89) #3, !dbg !30
  br label %__nv_sqrtf.exit10, !dbg !30

129:                                              ; preds = %126
  %130 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %89) #3, !dbg !30
  br label %__nv_sqrtf.exit10, !dbg !30

131:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %134, label %132, !dbg !30

132:                                              ; preds = %131
  %133 = tail call float @llvm.nvvm.sqrt.rn.f(float %89) #3, !dbg !30
  br label %__nv_sqrtf.exit10, !dbg !30

134:                                              ; preds = %131
  %135 = tail call float @llvm.nvvm.sqrt.approx.f(float %89) #3, !dbg !30
  br label %__nv_sqrtf.exit10, !dbg !30

__nv_sqrtf.exit10:                                ; preds = %127, %129, %132, %134
  %.0.i8 = phi float [ %128, %127 ], [ %130, %129 ], [ %133, %132 ], [ %135, %134 ], !dbg !30
  %136 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i11 = icmp eq i32 %136, 0, !dbg !30
  %137 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i14 = icmp eq i32 %137, 0, !dbg !30
  br i1 %.not.i11, label %143, label %138, !dbg !30

138:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %141, label %139, !dbg !30

139:                                              ; preds = %138
  %140 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %90) #3, !dbg !30
  br label %__nv_sqrtf.exit15, !dbg !30

141:                                              ; preds = %138
  %142 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %90) #3, !dbg !30
  br label %__nv_sqrtf.exit15, !dbg !30

143:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %146, label %144, !dbg !30

144:                                              ; preds = %143
  %145 = tail call float @llvm.nvvm.sqrt.rn.f(float %90) #3, !dbg !30
  br label %__nv_sqrtf.exit15, !dbg !30

146:                                              ; preds = %143
  %147 = tail call float @llvm.nvvm.sqrt.approx.f(float %90) #3, !dbg !30
  br label %__nv_sqrtf.exit15, !dbg !30

__nv_sqrtf.exit15:                                ; preds = %139, %141, %144, %146
  %.0.i13 = phi float [ %140, %139 ], [ %142, %141 ], [ %145, %144 ], [ %147, %146 ], !dbg !30
  %148 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i16 = icmp eq i32 %148, 0, !dbg !30
  %149 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i19 = icmp eq i32 %149, 0, !dbg !30
  br i1 %.not.i16, label %155, label %150, !dbg !30

150:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %153, label %151, !dbg !30

151:                                              ; preds = %150
  %152 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %96) #3, !dbg !30
  br label %__nv_sqrtf.exit20, !dbg !30

153:                                              ; preds = %150
  %154 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %96) #3, !dbg !30
  br label %__nv_sqrtf.exit20, !dbg !30

155:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %158, label %156, !dbg !30

156:                                              ; preds = %155
  %157 = tail call float @llvm.nvvm.sqrt.rn.f(float %96) #3, !dbg !30
  br label %__nv_sqrtf.exit20, !dbg !30

158:                                              ; preds = %155
  %159 = tail call float @llvm.nvvm.sqrt.approx.f(float %96) #3, !dbg !30
  br label %__nv_sqrtf.exit20, !dbg !30

__nv_sqrtf.exit20:                                ; preds = %151, %153, %156, %158
  %.0.i18 = phi float [ %152, %151 ], [ %154, %153 ], [ %157, %156 ], [ %159, %158 ], !dbg !30
  %160 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i21 = icmp eq i32 %160, 0, !dbg !30
  %161 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i24 = icmp eq i32 %161, 0, !dbg !30
  br i1 %.not.i21, label %167, label %162, !dbg !30

162:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %165, label %163, !dbg !30

163:                                              ; preds = %162
  %164 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %97) #3, !dbg !30
  br label %__nv_sqrtf.exit25, !dbg !30

165:                                              ; preds = %162
  %166 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %97) #3, !dbg !30
  br label %__nv_sqrtf.exit25, !dbg !30

167:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %170, label %168, !dbg !30

168:                                              ; preds = %167
  %169 = tail call float @llvm.nvvm.sqrt.rn.f(float %97) #3, !dbg !30
  br label %__nv_sqrtf.exit25, !dbg !30

170:                                              ; preds = %167
  %171 = tail call float @llvm.nvvm.sqrt.approx.f(float %97) #3, !dbg !30
  br label %__nv_sqrtf.exit25, !dbg !30

__nv_sqrtf.exit25:                                ; preds = %163, %165, %168, %170
  %.0.i23 = phi float [ %164, %163 ], [ %166, %165 ], [ %169, %168 ], [ %171, %170 ], !dbg !30
  %172 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i26 = icmp eq i32 %172, 0, !dbg !30
  %173 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i29 = icmp eq i32 %173, 0, !dbg !30
  br i1 %.not.i26, label %179, label %174, !dbg !30

174:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %177, label %175, !dbg !30

175:                                              ; preds = %174
  %176 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %98) #3, !dbg !30
  br label %__nv_sqrtf.exit30, !dbg !30

177:                                              ; preds = %174
  %178 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %98) #3, !dbg !30
  br label %__nv_sqrtf.exit30, !dbg !30

179:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %182, label %180, !dbg !30

180:                                              ; preds = %179
  %181 = tail call float @llvm.nvvm.sqrt.rn.f(float %98) #3, !dbg !30
  br label %__nv_sqrtf.exit30, !dbg !30

182:                                              ; preds = %179
  %183 = tail call float @llvm.nvvm.sqrt.approx.f(float %98) #3, !dbg !30
  br label %__nv_sqrtf.exit30, !dbg !30

__nv_sqrtf.exit30:                                ; preds = %175, %177, %180, %182
  %.0.i28 = phi float [ %176, %175 ], [ %178, %177 ], [ %181, %180 ], [ %183, %182 ], !dbg !30
  %184 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i31 = icmp eq i32 %184, 0, !dbg !30
  %185 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i34 = icmp eq i32 %185, 0, !dbg !30
  br i1 %.not.i31, label %191, label %186, !dbg !30

186:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %189, label %187, !dbg !30

187:                                              ; preds = %186
  %188 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %99) #3, !dbg !30
  br label %__nv_sqrtf.exit35, !dbg !30

189:                                              ; preds = %186
  %190 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %99) #3, !dbg !30
  br label %__nv_sqrtf.exit35, !dbg !30

191:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %194, label %192, !dbg !30

192:                                              ; preds = %191
  %193 = tail call float @llvm.nvvm.sqrt.rn.f(float %99) #3, !dbg !30
  br label %__nv_sqrtf.exit35, !dbg !30

194:                                              ; preds = %191
  %195 = tail call float @llvm.nvvm.sqrt.approx.f(float %99) #3, !dbg !30
  br label %__nv_sqrtf.exit35, !dbg !30

__nv_sqrtf.exit35:                                ; preds = %187, %189, %192, %194
  %.0.i33 = phi float [ %188, %187 ], [ %190, %189 ], [ %193, %192 ], [ %195, %194 ], !dbg !30
  %196 = bitcast i32 %74 to float, !dbg !25
  %197 = bitcast i32 %73 to float, !dbg !25
  %198 = bitcast i32 %72 to float, !dbg !25
  %199 = bitcast i32 %71 to float, !dbg !25
  %200 = bitcast i32 %70 to float, !dbg !25
  %201 = bitcast i32 %69 to float, !dbg !25
  %202 = bitcast i32 %68 to float, !dbg !25
  %203 = bitcast i32 %67 to float, !dbg !25
  %204 = fadd float %.0.i, 0x3DDB7CDFE0000000, !dbg !31
  %205 = fadd float %.0.i3, 0x3DDB7CDFE0000000, !dbg !31
  %206 = fadd float %.0.i8, 0x3DDB7CDFE0000000, !dbg !31
  %207 = fadd float %.0.i13, 0x3DDB7CDFE0000000, !dbg !31
  %208 = fadd float %.0.i18, 0x3DDB7CDFE0000000, !dbg !31
  %209 = fadd float %.0.i23, 0x3DDB7CDFE0000000, !dbg !31
  %210 = fadd float %.0.i28, 0x3DDB7CDFE0000000, !dbg !31
  %211 = fadd float %.0.i33, 0x3DDB7CDFE0000000, !dbg !31
  %212 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %203, float %204) #3, !dbg !32
  %213 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %202, float %205) #3, !dbg !32
  %214 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %201, float %206) #3, !dbg !32
  %215 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %200, float %207) #3, !dbg !32
  %216 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %199, float %208) #3, !dbg !32
  %217 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %198, float %209) #3, !dbg !32
  %218 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %197, float %210) #3, !dbg !32
  %219 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %196, float %211) #3, !dbg !32
  %220 = shl i32 %6, 10, !dbg !33
  %221 = add i32 %19, %220, !dbg !34
  %222 = add i32 %220, %23, !dbg !34
  %223 = sext i32 %221 to i64, !dbg !35
  %224 = getelementptr float, ptr addrspace(1) %2, i64 %223, !dbg !35
  %225 = sext i32 %222 to i64, !dbg !35
  %226 = getelementptr float, ptr addrspace(1) %2, i64 %225, !dbg !35
  %227 = bitcast float %212 to i32, !dbg !36
  %228 = bitcast float %213 to i32, !dbg !36
  %229 = bitcast float %214 to i32, !dbg !36
  %230 = bitcast float %215 to i32, !dbg !36
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %227, i32 %228, i32 %229, i32 %230, ptr addrspace(1) %224, i1 %65) #3, !dbg !36
  %231 = bitcast float %216 to i32, !dbg !36
  %232 = bitcast float %217 to i32, !dbg !36
  %233 = bitcast float %218 to i32, !dbg !36
  %234 = bitcast float %219 to i32, !dbg !36
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %231, i32 %232, i32 %233, i32 %234, ptr addrspace(1) %226, i1 %66) #3, !dbg !36
  ret void, !dbg !37
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "crgvmqzazod3ucvhtqvt2iswtmt4jiiv4ypddm4vvf3w7whokxtw.py", directory: "inductor_cache/rg")
!4 = !{ptr @triton_poi_fused_add_div_sqrt_13, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_div_sqrt_13, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_div_sqrt_13", linkageName: "triton_poi_fused_add_div_sqrt_13", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 28, scope: !7)
!13 = !DILocation(line: 25, column: 33, scope: !7)
!14 = !DILocation(line: 26, column: 44, scope: !7)
!15 = !DILocation(line: 26, column: 23, scope: !7)
!16 = !DILocation(line: 27, column: 21, scope: !7)
!17 = !DILocation(line: 30, column: 19, scope: !7)
!18 = !DILocation(line: 29, column: 19, scope: !7)
!19 = !DILocation(line: 32, column: 39, scope: !7)
!20 = !DILocation(line: 32, column: 51, scope: !7)
!21 = !DILocation(line: 32, column: 35, scope: !7)
!22 = !DILocation(line: 32, column: 44, scope: !7)
!23 = !DILocation(line: 32, column: 30, scope: !7)
!24 = !DILocation(line: 32, column: 64, scope: !7)
!25 = !DILocation(line: 32, column: 56, scope: !7)
!26 = !DILocation(line: 33, column: 40, scope: !7)
!27 = !DILocation(line: 33, column: 35, scope: !7)
!28 = !DILocation(line: 33, column: 30, scope: !7)
!29 = !DILocation(line: 33, column: 45, scope: !7)
!30 = !DILocation(line: 34, column: 26, scope: !7)
!31 = !DILocation(line: 36, column: 18, scope: !7)
!32 = !DILocation(line: 37, column: 18, scope: !7)
!33 = !DILocation(line: 38, column: 35, scope: !7)
!34 = !DILocation(line: 38, column: 30, scope: !7)
!35 = !DILocation(line: 38, column: 25, scope: !7)
!36 = !DILocation(line: 38, column: 46, scope: !7)
!37 = !DILocation(line: 38, column: 4, scope: !7)
