; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__adaptive_avg_pool2d_11(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 10, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 2, !dbg !12
  %8 = and i32 %7, 508, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = or disjoint i32 %9, 1, !dbg !13
  %11 = or disjoint i32 %9, 2, !dbg !13
  %12 = or disjoint i32 %9, 3, !dbg !13
  %13 = or disjoint i32 %9, 512, !dbg !13
  %14 = or disjoint i32 %9, 513, !dbg !13
  %15 = or disjoint i32 %9, 514, !dbg !13
  %16 = or disjoint i32 %9, 515, !dbg !13
  %.frozen = freeze i32 %9, !dbg !14
  %17 = sdiv i32 %.frozen, 3, !dbg !14
  %.frozen46 = freeze i32 %10, !dbg !14
  %18 = sdiv i32 %.frozen46, 3, !dbg !14
  %.frozen48 = freeze i32 %11, !dbg !14
  %19 = sdiv i32 %.frozen48, 3, !dbg !14
  %.frozen50 = freeze i32 %12, !dbg !14
  %20 = sdiv i32 %.frozen50, 3, !dbg !14
  %.frozen52 = freeze i32 %13, !dbg !14
  %21 = sdiv i32 %.frozen52, 3, !dbg !14
  %.frozen54 = freeze i32 %14, !dbg !14
  %22 = sdiv i32 %.frozen54, 3, !dbg !14
  %.frozen56 = freeze i32 %15, !dbg !14
  %23 = sdiv i32 %.frozen56, 3, !dbg !14
  %.frozen58 = freeze i32 %16, !dbg !14
  %24 = sdiv i32 %.frozen58, 3, !dbg !14
  %25 = srem i32 %17, 3, !dbg !15
  %26 = srem i32 %18, 3, !dbg !15
  %27 = srem i32 %19, 3, !dbg !15
  %28 = srem i32 %20, 3, !dbg !15
  %29 = srem i32 %21, 3, !dbg !15
  %30 = srem i32 %22, 3, !dbg !15
  %31 = srem i32 %23, 3, !dbg !15
  %32 = srem i32 %24, 3, !dbg !15
  %33 = mul i32 %17, 3, !dbg !16
  %.decomposed = sub i32 %.frozen, %33, !dbg !16
  %34 = mul i32 %18, 3, !dbg !16
  %.decomposed47 = sub i32 %.frozen46, %34, !dbg !16
  %35 = mul i32 %19, 3, !dbg !16
  %.decomposed49 = sub i32 %.frozen48, %35, !dbg !16
  %36 = mul i32 %20, 3, !dbg !16
  %.decomposed51 = sub i32 %.frozen50, %36, !dbg !16
  %37 = mul i32 %21, 3, !dbg !16
  %.decomposed53 = sub i32 %.frozen52, %37, !dbg !16
  %38 = mul i32 %22, 3, !dbg !16
  %.decomposed55 = sub i32 %.frozen54, %38, !dbg !16
  %39 = mul i32 %23, 3, !dbg !16
  %.decomposed57 = sub i32 %.frozen56, %39, !dbg !16
  %40 = mul i32 %24, 3, !dbg !16
  %.decomposed59 = sub i32 %.frozen58, %40, !dbg !16
  %41 = sdiv i32 %9, 9, !dbg !17
  %42 = sdiv i32 %10, 9, !dbg !17
  %43 = sdiv i32 %11, 9, !dbg !17
  %44 = sdiv i32 %12, 9, !dbg !17
  %45 = sdiv i32 %13, 9, !dbg !17
  %46 = sdiv i32 %14, 9, !dbg !17
  %47 = sdiv i32 %15, 9, !dbg !17
  %48 = sdiv i32 %16, 9, !dbg !17
  %.tr = trunc nsw i32 %25 to i8, !dbg !18
  %.lhs.trunc = shl nsw i8 %.tr, 2, !dbg !18
  %49 = sdiv i8 %.lhs.trunc, 3, !dbg !18
  %.sext = sext i8 %49 to i32, !dbg !18
  %.tr31 = trunc nsw i32 %26 to i8, !dbg !18
  %.lhs.trunc1 = shl nsw i8 %.tr31, 2, !dbg !18
  %50 = sdiv i8 %.lhs.trunc1, 3, !dbg !18
  %.sext2 = sext i8 %50 to i32, !dbg !18
  %.tr32 = trunc nsw i32 %27 to i8, !dbg !18
  %.lhs.trunc3 = shl nsw i8 %.tr32, 2, !dbg !18
  %51 = sdiv i8 %.lhs.trunc3, 3, !dbg !18
  %.sext4 = sext i8 %51 to i32, !dbg !18
  %.tr33 = trunc nsw i32 %28 to i8, !dbg !18
  %.lhs.trunc5 = shl nsw i8 %.tr33, 2, !dbg !18
  %52 = sdiv i8 %.lhs.trunc5, 3, !dbg !18
  %.sext6 = sext i8 %52 to i32, !dbg !18
  %.tr34 = trunc nsw i32 %29 to i8, !dbg !18
  %.lhs.trunc7 = shl nsw i8 %.tr34, 2, !dbg !18
  %53 = sdiv i8 %.lhs.trunc7, 3, !dbg !18
  %.sext8 = sext i8 %53 to i32, !dbg !18
  %.tr35 = trunc nsw i32 %30 to i8, !dbg !18
  %.lhs.trunc9 = shl nsw i8 %.tr35, 2, !dbg !18
  %54 = sdiv i8 %.lhs.trunc9, 3, !dbg !18
  %.sext10 = sext i8 %54 to i32, !dbg !18
  %.tr36 = trunc nsw i32 %31 to i8, !dbg !18
  %.lhs.trunc11 = shl nsw i8 %.tr36, 2, !dbg !18
  %55 = sdiv i8 %.lhs.trunc11, 3, !dbg !18
  %.sext12 = sext i8 %55 to i32, !dbg !18
  %.tr37 = trunc nsw i32 %32 to i8, !dbg !18
  %.lhs.trunc13 = shl nsw i8 %.tr37, 2, !dbg !18
  %56 = sdiv i8 %.lhs.trunc13, 3, !dbg !18
  %.sext14 = sext i8 %56 to i32, !dbg !18
  %.tr38 = trunc nsw i32 %.decomposed to i8, !dbg !19
  %.lhs.trunc15 = shl nsw i8 %.tr38, 2, !dbg !19
  %57 = sdiv i8 %.lhs.trunc15, 3, !dbg !19
  %.sext16 = sext i8 %57 to i32, !dbg !19
  %.tr39 = trunc nsw i32 %.decomposed47 to i8, !dbg !19
  %.lhs.trunc17 = shl nsw i8 %.tr39, 2, !dbg !19
  %58 = sdiv i8 %.lhs.trunc17, 3, !dbg !19
  %.sext18 = sext i8 %58 to i32, !dbg !19
  %.tr40 = trunc nsw i32 %.decomposed49 to i8, !dbg !19
  %.lhs.trunc19 = shl nsw i8 %.tr40, 2, !dbg !19
  %59 = sdiv i8 %.lhs.trunc19, 3, !dbg !19
  %.sext20 = sext i8 %59 to i32, !dbg !19
  %.tr41 = trunc nsw i32 %.decomposed51 to i8, !dbg !19
  %.lhs.trunc21 = shl nsw i8 %.tr41, 2, !dbg !19
  %60 = sdiv i8 %.lhs.trunc21, 3, !dbg !19
  %.sext22 = sext i8 %60 to i32, !dbg !19
  %.tr42 = trunc nsw i32 %.decomposed53 to i8, !dbg !19
  %.lhs.trunc23 = shl nsw i8 %.tr42, 2, !dbg !19
  %61 = sdiv i8 %.lhs.trunc23, 3, !dbg !19
  %.sext24 = sext i8 %61 to i32, !dbg !19
  %.tr43 = trunc nsw i32 %.decomposed55 to i8, !dbg !19
  %.lhs.trunc25 = shl nsw i8 %.tr43, 2, !dbg !19
  %62 = sdiv i8 %.lhs.trunc25, 3, !dbg !19
  %.sext26 = sext i8 %62 to i32, !dbg !19
  %.tr44 = trunc nsw i32 %.decomposed57 to i8, !dbg !19
  %.lhs.trunc27 = shl nsw i8 %.tr44, 2, !dbg !19
  %63 = sdiv i8 %.lhs.trunc27, 3, !dbg !19
  %.sext28 = sext i8 %63 to i32, !dbg !19
  %.tr45 = trunc nsw i32 %.decomposed59 to i8, !dbg !19
  %.lhs.trunc29 = shl nsw i8 %.tr45, 2, !dbg !19
  %64 = sdiv i8 %.lhs.trunc29, 3, !dbg !19
  %.sext30 = sext i8 %64 to i32, !dbg !19
  %65 = shl nsw i32 %.sext, 2, !dbg !20
  %66 = shl nsw i32 %.sext2, 2, !dbg !20
  %67 = shl nsw i32 %.sext4, 2, !dbg !20
  %68 = shl nsw i32 %.sext6, 2, !dbg !20
  %69 = shl nsw i32 %.sext8, 2, !dbg !20
  %70 = shl nsw i32 %.sext10, 2, !dbg !20
  %71 = shl nsw i32 %.sext12, 2, !dbg !20
  %72 = shl nsw i32 %.sext14, 2, !dbg !20
  %73 = shl i32 %41, 4, !dbg !21
  %74 = shl i32 %42, 4, !dbg !21
  %75 = shl i32 %43, 4, !dbg !21
  %76 = shl i32 %44, 4, !dbg !21
  %77 = shl i32 %45, 4, !dbg !21
  %78 = shl i32 %46, 4, !dbg !21
  %79 = shl i32 %47, 4, !dbg !21
  %80 = shl i32 %48, 4, !dbg !21
  %81 = add i32 %73, %.sext16, !dbg !22
  %82 = add i32 %81, %65, !dbg !23
  %83 = add i32 %74, %.sext18, !dbg !22
  %84 = add i32 %83, %66, !dbg !23
  %85 = add i32 %75, %.sext20, !dbg !22
  %86 = add i32 %85, %67, !dbg !23
  %87 = add i32 %76, %.sext22, !dbg !22
  %88 = add i32 %87, %68, !dbg !23
  %89 = add i32 %77, %.sext24, !dbg !22
  %90 = add i32 %89, %69, !dbg !23
  %91 = add i32 %78, %.sext26, !dbg !22
  %92 = add i32 %91, %70, !dbg !23
  %93 = add i32 %79, %.sext28, !dbg !22
  %94 = add i32 %93, %71, !dbg !23
  %95 = add i32 %80, %.sext30, !dbg !22
  %96 = add i32 %95, %72, !dbg !23
  %97 = sext i32 %82 to i64, !dbg !24
  %98 = getelementptr float, ptr addrspace(1) %0, i64 %97, !dbg !24
  %99 = sext i32 %84 to i64, !dbg !24
  %100 = getelementptr float, ptr addrspace(1) %0, i64 %99, !dbg !24
  %101 = sext i32 %86 to i64, !dbg !24
  %102 = getelementptr float, ptr addrspace(1) %0, i64 %101, !dbg !24
  %103 = sext i32 %88 to i64, !dbg !24
  %104 = getelementptr float, ptr addrspace(1) %0, i64 %103, !dbg !24
  %105 = sext i32 %90 to i64, !dbg !24
  %106 = getelementptr float, ptr addrspace(1) %0, i64 %105, !dbg !24
  %107 = sext i32 %92 to i64, !dbg !24
  %108 = getelementptr float, ptr addrspace(1) %0, i64 %107, !dbg !24
  %109 = sext i32 %94 to i64, !dbg !24
  %110 = getelementptr float, ptr addrspace(1) %0, i64 %109, !dbg !24
  %111 = sext i32 %96 to i64, !dbg !24
  %112 = getelementptr float, ptr addrspace(1) %0, i64 %111, !dbg !24
  %113 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %98, i1 true, i32 0, i1 true) #1, !dbg !25
  %114 = bitcast i32 %113 to float, !dbg !25
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %100, i1 true, i32 0, i1 true) #1, !dbg !25
  %116 = bitcast i32 %115 to float, !dbg !25
  %117 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %102, i1 true, i32 0, i1 true) #1, !dbg !25
  %118 = bitcast i32 %117 to float, !dbg !25
  %119 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %104, i1 true, i32 0, i1 true) #1, !dbg !25
  %120 = bitcast i32 %119 to float, !dbg !25
  %121 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %106, i1 true, i32 0, i1 true) #1, !dbg !25
  %122 = bitcast i32 %121 to float, !dbg !25
  %123 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %108, i1 true, i32 0, i1 true) #1, !dbg !25
  %124 = bitcast i32 %123 to float, !dbg !25
  %125 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %110, i1 true, i32 0, i1 true) #1, !dbg !25
  %126 = bitcast i32 %125 to float, !dbg !25
  %127 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %112, i1 true, i32 0, i1 true) #1, !dbg !25
  %128 = bitcast i32 %127 to float, !dbg !25
  %129 = add i32 %81, 1, !dbg !26
  %130 = add i32 %129, %65, !dbg !27
  %131 = add i32 %83, 1, !dbg !26
  %132 = add i32 %131, %66, !dbg !27
  %133 = add i32 %85, 1, !dbg !26
  %134 = add i32 %133, %67, !dbg !27
  %135 = add i32 %87, 1, !dbg !26
  %136 = add i32 %135, %68, !dbg !27
  %137 = add i32 %89, 1, !dbg !26
  %138 = add i32 %137, %69, !dbg !27
  %139 = add i32 %91, 1, !dbg !26
  %140 = add i32 %139, %70, !dbg !27
  %141 = add i32 %93, 1, !dbg !26
  %142 = add i32 %141, %71, !dbg !27
  %143 = add i32 %95, 1, !dbg !26
  %144 = add i32 %143, %72, !dbg !27
  %145 = sext i32 %130 to i64, !dbg !28
  %146 = getelementptr float, ptr addrspace(1) %0, i64 %145, !dbg !28
  %147 = sext i32 %132 to i64, !dbg !28
  %148 = getelementptr float, ptr addrspace(1) %0, i64 %147, !dbg !28
  %149 = sext i32 %134 to i64, !dbg !28
  %150 = getelementptr float, ptr addrspace(1) %0, i64 %149, !dbg !28
  %151 = sext i32 %136 to i64, !dbg !28
  %152 = getelementptr float, ptr addrspace(1) %0, i64 %151, !dbg !28
  %153 = sext i32 %138 to i64, !dbg !28
  %154 = getelementptr float, ptr addrspace(1) %0, i64 %153, !dbg !28
  %155 = sext i32 %140 to i64, !dbg !28
  %156 = getelementptr float, ptr addrspace(1) %0, i64 %155, !dbg !28
  %157 = sext i32 %142 to i64, !dbg !28
  %158 = getelementptr float, ptr addrspace(1) %0, i64 %157, !dbg !28
  %159 = sext i32 %144 to i64, !dbg !28
  %160 = getelementptr float, ptr addrspace(1) %0, i64 %159, !dbg !28
  %161 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %146, i1 true, i32 0, i1 true) #1, !dbg !29
  %162 = bitcast i32 %161 to float, !dbg !29
  %163 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %148, i1 true, i32 0, i1 true) #1, !dbg !29
  %164 = bitcast i32 %163 to float, !dbg !29
  %165 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %150, i1 true, i32 0, i1 true) #1, !dbg !29
  %166 = bitcast i32 %165 to float, !dbg !29
  %167 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %152, i1 true, i32 0, i1 true) #1, !dbg !29
  %168 = bitcast i32 %167 to float, !dbg !29
  %169 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %154, i1 true, i32 0, i1 true) #1, !dbg !29
  %170 = bitcast i32 %169 to float, !dbg !29
  %171 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %156, i1 true, i32 0, i1 true) #1, !dbg !29
  %172 = bitcast i32 %171 to float, !dbg !29
  %173 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %158, i1 true, i32 0, i1 true) #1, !dbg !29
  %174 = bitcast i32 %173 to float, !dbg !29
  %175 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %160, i1 true, i32 0, i1 true) #1, !dbg !29
  %176 = bitcast i32 %175 to float, !dbg !29
  %177 = fadd float %114, %162, !dbg !30
  %178 = fadd float %116, %164, !dbg !30
  %179 = fadd float %118, %166, !dbg !30
  %180 = fadd float %120, %168, !dbg !30
  %181 = fadd float %122, %170, !dbg !30
  %182 = fadd float %124, %172, !dbg !30
  %183 = fadd float %126, %174, !dbg !30
  %184 = fadd float %128, %176, !dbg !30
  %185 = add i32 %81, 4, !dbg !31
  %186 = add i32 %185, %65, !dbg !32
  %187 = add i32 %83, 4, !dbg !31
  %188 = add i32 %187, %66, !dbg !32
  %189 = add i32 %85, 4, !dbg !31
  %190 = add i32 %189, %67, !dbg !32
  %191 = add i32 %87, 4, !dbg !31
  %192 = add i32 %191, %68, !dbg !32
  %193 = add i32 %89, 4, !dbg !31
  %194 = add i32 %193, %69, !dbg !32
  %195 = add i32 %91, 4, !dbg !31
  %196 = add i32 %195, %70, !dbg !32
  %197 = add i32 %93, 4, !dbg !31
  %198 = add i32 %197, %71, !dbg !32
  %199 = add i32 %95, 4, !dbg !31
  %200 = add i32 %199, %72, !dbg !32
  %201 = sext i32 %186 to i64, !dbg !33
  %202 = getelementptr float, ptr addrspace(1) %0, i64 %201, !dbg !33
  %203 = sext i32 %188 to i64, !dbg !33
  %204 = getelementptr float, ptr addrspace(1) %0, i64 %203, !dbg !33
  %205 = sext i32 %190 to i64, !dbg !33
  %206 = getelementptr float, ptr addrspace(1) %0, i64 %205, !dbg !33
  %207 = sext i32 %192 to i64, !dbg !33
  %208 = getelementptr float, ptr addrspace(1) %0, i64 %207, !dbg !33
  %209 = sext i32 %194 to i64, !dbg !33
  %210 = getelementptr float, ptr addrspace(1) %0, i64 %209, !dbg !33
  %211 = sext i32 %196 to i64, !dbg !33
  %212 = getelementptr float, ptr addrspace(1) %0, i64 %211, !dbg !33
  %213 = sext i32 %198 to i64, !dbg !33
  %214 = getelementptr float, ptr addrspace(1) %0, i64 %213, !dbg !33
  %215 = sext i32 %200 to i64, !dbg !33
  %216 = getelementptr float, ptr addrspace(1) %0, i64 %215, !dbg !33
  %217 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %202, i1 true, i32 0, i1 true) #1, !dbg !34
  %218 = bitcast i32 %217 to float, !dbg !34
  %219 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %204, i1 true, i32 0, i1 true) #1, !dbg !34
  %220 = bitcast i32 %219 to float, !dbg !34
  %221 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %206, i1 true, i32 0, i1 true) #1, !dbg !34
  %222 = bitcast i32 %221 to float, !dbg !34
  %223 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %208, i1 true, i32 0, i1 true) #1, !dbg !34
  %224 = bitcast i32 %223 to float, !dbg !34
  %225 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %210, i1 true, i32 0, i1 true) #1, !dbg !34
  %226 = bitcast i32 %225 to float, !dbg !34
  %227 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %212, i1 true, i32 0, i1 true) #1, !dbg !34
  %228 = bitcast i32 %227 to float, !dbg !34
  %229 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %214, i1 true, i32 0, i1 true) #1, !dbg !34
  %230 = bitcast i32 %229 to float, !dbg !34
  %231 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %216, i1 true, i32 0, i1 true) #1, !dbg !34
  %232 = bitcast i32 %231 to float, !dbg !34
  %233 = fadd float %177, %218, !dbg !35
  %234 = fadd float %178, %220, !dbg !35
  %235 = fadd float %179, %222, !dbg !35
  %236 = fadd float %180, %224, !dbg !35
  %237 = fadd float %181, %226, !dbg !35
  %238 = fadd float %182, %228, !dbg !35
  %239 = fadd float %183, %230, !dbg !35
  %240 = fadd float %184, %232, !dbg !35
  %241 = add i32 %81, 5, !dbg !36
  %242 = add i32 %241, %65, !dbg !37
  %243 = add i32 %83, 5, !dbg !36
  %244 = add i32 %243, %66, !dbg !37
  %245 = add i32 %85, 5, !dbg !36
  %246 = add i32 %245, %67, !dbg !37
  %247 = add i32 %87, 5, !dbg !36
  %248 = add i32 %247, %68, !dbg !37
  %249 = add i32 %89, 5, !dbg !36
  %250 = add i32 %249, %69, !dbg !37
  %251 = add i32 %91, 5, !dbg !36
  %252 = add i32 %251, %70, !dbg !37
  %253 = add i32 %93, 5, !dbg !36
  %254 = add i32 %253, %71, !dbg !37
  %255 = add i32 %95, 5, !dbg !36
  %256 = add i32 %255, %72, !dbg !37
  %257 = sext i32 %242 to i64, !dbg !38
  %258 = getelementptr float, ptr addrspace(1) %0, i64 %257, !dbg !38
  %259 = sext i32 %244 to i64, !dbg !38
  %260 = getelementptr float, ptr addrspace(1) %0, i64 %259, !dbg !38
  %261 = sext i32 %246 to i64, !dbg !38
  %262 = getelementptr float, ptr addrspace(1) %0, i64 %261, !dbg !38
  %263 = sext i32 %248 to i64, !dbg !38
  %264 = getelementptr float, ptr addrspace(1) %0, i64 %263, !dbg !38
  %265 = sext i32 %250 to i64, !dbg !38
  %266 = getelementptr float, ptr addrspace(1) %0, i64 %265, !dbg !38
  %267 = sext i32 %252 to i64, !dbg !38
  %268 = getelementptr float, ptr addrspace(1) %0, i64 %267, !dbg !38
  %269 = sext i32 %254 to i64, !dbg !38
  %270 = getelementptr float, ptr addrspace(1) %0, i64 %269, !dbg !38
  %271 = sext i32 %256 to i64, !dbg !38
  %272 = getelementptr float, ptr addrspace(1) %0, i64 %271, !dbg !38
  %273 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %258, i1 true, i32 0, i1 true) #1, !dbg !39
  %274 = bitcast i32 %273 to float, !dbg !39
  %275 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %260, i1 true, i32 0, i1 true) #1, !dbg !39
  %276 = bitcast i32 %275 to float, !dbg !39
  %277 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %262, i1 true, i32 0, i1 true) #1, !dbg !39
  %278 = bitcast i32 %277 to float, !dbg !39
  %279 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %264, i1 true, i32 0, i1 true) #1, !dbg !39
  %280 = bitcast i32 %279 to float, !dbg !39
  %281 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %266, i1 true, i32 0, i1 true) #1, !dbg !39
  %282 = bitcast i32 %281 to float, !dbg !39
  %283 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %268, i1 true, i32 0, i1 true) #1, !dbg !39
  %284 = bitcast i32 %283 to float, !dbg !39
  %285 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %270, i1 true, i32 0, i1 true) #1, !dbg !39
  %286 = bitcast i32 %285 to float, !dbg !39
  %287 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %272, i1 true, i32 0, i1 true) #1, !dbg !39
  %288 = bitcast i32 %287 to float, !dbg !39
  %289 = fadd float %233, %274, !dbg !40
  %290 = fadd float %234, %276, !dbg !40
  %291 = fadd float %235, %278, !dbg !40
  %292 = fadd float %236, %280, !dbg !40
  %293 = fadd float %237, %282, !dbg !40
  %294 = fadd float %238, %284, !dbg !40
  %295 = fadd float %239, %286, !dbg !40
  %296 = fadd float %240, %288, !dbg !40
  %297 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %289, float 4.000000e+00) #1, !dbg !41
  %298 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %290, float 4.000000e+00) #1, !dbg !41
  %299 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %291, float 4.000000e+00) #1, !dbg !41
  %300 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %292, float 4.000000e+00) #1, !dbg !41
  %301 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %293, float 4.000000e+00) #1, !dbg !41
  %302 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %294, float 4.000000e+00) #1, !dbg !41
  %303 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %295, float 4.000000e+00) #1, !dbg !41
  %304 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %296, float 4.000000e+00) #1, !dbg !41
  %305 = sext i32 %9 to i64, !dbg !42
  %306 = getelementptr float, ptr addrspace(1) %1, i64 %305, !dbg !42
  %307 = sext i32 %13 to i64, !dbg !42
  %308 = getelementptr float, ptr addrspace(1) %1, i64 %307, !dbg !42
  %309 = bitcast float %297 to i32, !dbg !43
  %310 = bitcast float %298 to i32, !dbg !43
  %311 = bitcast float %299 to i32, !dbg !43
  %312 = bitcast float %300 to i32, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %309, i32 %310, i32 %311, i32 %312, ptr addrspace(1) %306, i1 true) #1, !dbg !43
  %313 = bitcast float %301 to i32, !dbg !43
  %314 = bitcast float %302 to i32, !dbg !43
  %315 = bitcast float %303 to i32, !dbg !43
  %316 = bitcast float %304 to i32, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %313, i32 %314, i32 %315, i32 %316, ptr addrspace(1) %308, i1 true) #1, !dbg !43
  ret void, !dbg !44
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ccjauqgypbzq4gpo3ovyyru7gduk35sodlesufqmqfueltefdlyk.py", directory: "inductor_cache/cj")
!4 = !{ptr @triton_poi_fused__adaptive_avg_pool2d_11, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__adaptive_avg_pool2d_11, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__adaptive_avg_pool2d_11", linkageName: "triton_poi_fused__adaptive_avg_pool2d_11", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 26, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 21, scope: !7)
!19 = !DILocation(line: 31, column: 21, scope: !7)
!20 = !DILocation(line: 35, column: 33, scope: !7)
!21 = !DILocation(line: 35, column: 51, scope: !7)
!22 = !DILocation(line: 35, column: 48, scope: !7)
!23 = !DILocation(line: 35, column: 57, scope: !7)
!24 = !DILocation(line: 35, column: 30, scope: !7)
!25 = !DILocation(line: 35, column: 72, scope: !7)
!26 = !DILocation(line: 39, column: 53, scope: !7)
!27 = !DILocation(line: 39, column: 62, scope: !7)
!28 = !DILocation(line: 39, column: 31, scope: !7)
!29 = !DILocation(line: 39, column: 77, scope: !7)
!30 = !DILocation(line: 40, column: 20, scope: !7)
!31 = !DILocation(line: 44, column: 53, scope: !7)
!32 = !DILocation(line: 44, column: 62, scope: !7)
!33 = !DILocation(line: 44, column: 31, scope: !7)
!34 = !DILocation(line: 44, column: 77, scope: !7)
!35 = !DILocation(line: 45, column: 20, scope: !7)
!36 = !DILocation(line: 47, column: 53, scope: !7)
!37 = !DILocation(line: 47, column: 62, scope: !7)
!38 = !DILocation(line: 47, column: 31, scope: !7)
!39 = !DILocation(line: 47, column: 77, scope: !7)
!40 = !DILocation(line: 48, column: 20, scope: !7)
!41 = !DILocation(line: 64, column: 20, scope: !7)
!42 = !DILocation(line: 65, column: 25, scope: !7)
!43 = !DILocation(line: 65, column: 37, scope: !7)
!44 = !DILocation(line: 65, column: 4, scope: !7)
