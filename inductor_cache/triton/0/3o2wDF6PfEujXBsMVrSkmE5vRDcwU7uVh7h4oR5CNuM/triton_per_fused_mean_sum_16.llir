; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_mean_sum_16(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %6 = shl i32 %5, 7, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 2, !dbg !12
  %9 = and i32 %8, 124, !dbg !12
  %10 = lshr i32 %7, 5, !dbg !12
  %11 = shl i32 %7, 1, !dbg !12
  %12 = and i32 %11, 126, !dbg !12
  %13 = or disjoint i32 %6, %9, !dbg !13
  %14 = or disjoint i32 %6, %12, !dbg !13
  %15 = icmp slt i32 %13, 1024, !dbg !14
  %16 = icmp slt i32 %14, 1024, !dbg !14
  %.frozen = freeze i32 %13, !dbg !15
  %17 = sdiv i32 %.frozen, 256, !dbg !15
  %18 = mul i32 %17, 256, !dbg !16
  %.decomposed = sub i32 %.frozen, %18, !dbg !16
  %19 = shl i32 %7, 3, !dbg !17
  %20 = and i32 %19, 256, !dbg !17
  %21 = add nsw i32 %.decomposed, %20, !dbg !18
  %22 = shl i32 %17, 9, !dbg !19
  %23 = add i32 %21, %22, !dbg !20
  %24 = sext i32 %23 to i64, !dbg !21
  %25 = getelementptr float, ptr addrspace(1) %1, i64 %24, !dbg !21
  %26 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %25, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15) #3, !dbg !22
  %27 = extractvalue { i32, i32, i32, i32 } %26, 0, !dbg !22
  %28 = extractvalue { i32, i32, i32, i32 } %26, 1, !dbg !22
  %29 = extractvalue { i32, i32, i32, i32 } %26, 2, !dbg !22
  %30 = extractvalue { i32, i32, i32, i32 } %26, 3, !dbg !22
  %31 = and i32 %10, 1, !dbg !23
  %32 = shl nuw nsw i32 %9, 1, !dbg !23
  %33 = or disjoint i32 %32, %31, !dbg !23
  %34 = zext nneg i32 %33 to i64, !dbg !23
  %35 = getelementptr float, ptr addrspace(3) @global_smem, i64 %34, !dbg !23
  %36 = select i1 %15, i32 %27, i32 0, !dbg !27
  %37 = insertelement <1 x i32> poison, i32 %36, i64 0, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %35, <1 x i32> %37, i1 true) #3, !dbg !23
  %38 = or disjoint i32 %32, 2, !dbg !23
  %39 = or disjoint i32 %38, %31, !dbg !23
  %40 = zext nneg i32 %39 to i64, !dbg !23
  %41 = getelementptr float, ptr addrspace(3) @global_smem, i64 %40, !dbg !23
  %42 = select i1 %15, i32 %28, i32 0, !dbg !27
  %43 = insertelement <1 x i32> poison, i32 %42, i64 0, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %41, <1 x i32> %43, i1 true) #3, !dbg !23
  %44 = or disjoint i32 %32, 4, !dbg !23
  %45 = or disjoint i32 %44, %31, !dbg !23
  %46 = zext nneg i32 %45 to i64, !dbg !23
  %47 = getelementptr float, ptr addrspace(3) @global_smem, i64 %46, !dbg !23
  %48 = select i1 %15, i32 %29, i32 0, !dbg !27
  %49 = insertelement <1 x i32> poison, i32 %48, i64 0, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %47, <1 x i32> %49, i1 true) #3, !dbg !23
  %50 = or disjoint i32 %32, 6, !dbg !23
  %51 = or disjoint i32 %50, %31, !dbg !23
  %52 = zext nneg i32 %51 to i64, !dbg !23
  %53 = getelementptr float, ptr addrspace(3) @global_smem, i64 %52, !dbg !23
  %54 = select i1 %15, i32 %30, i32 0, !dbg !27
  %55 = insertelement <1 x i32> poison, i32 %54, i64 0, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %53, <1 x i32> %55, i1 true) #3, !dbg !23
  tail call void @llvm.nvvm.barrier0(), !dbg !23
  %56 = icmp slt i32 %7, 256, !dbg !23
  %57 = sext i32 %7 to i64, !dbg !23
  %58 = getelementptr float, ptr addrspace(3) @global_smem, i64 %57, !dbg !23
  %59 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %58, i1 %56) #3, !dbg !23
  %60 = bitcast i32 %59 to float, !dbg !23
  %61 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %59, i32 1, i32 31), !dbg !23
  %62 = bitcast i32 %61 to float, !dbg !23
  %63 = fadd float %60, %62, !dbg !28
  %64 = and i32 %7, 1, !dbg !23
  %65 = icmp eq i32 %64, 0, !dbg !23
  %66 = and i1 %56, %65, !dbg !23
  %67 = bitcast float %63 to <1 x i32>, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %58, <1 x i32> %67, i1 %66) #3, !dbg !23
  %68 = add i32 %7, 64, !dbg !23
  %69 = sext i32 %68 to i64, !dbg !23
  %70 = getelementptr float, ptr addrspace(3) @global_smem, i64 %69, !dbg !23
  %71 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %70, i1 %56) #3, !dbg !23
  %72 = bitcast i32 %71 to float, !dbg !23
  %73 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %71, i32 1, i32 31), !dbg !23
  %74 = bitcast i32 %73 to float, !dbg !23
  %75 = fadd float %72, %74, !dbg !28
  %76 = bitcast float %75 to <1 x i32>, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %70, <1 x i32> %76, i1 %66) #3, !dbg !23
  %77 = add i32 %7, 128, !dbg !23
  %78 = sext i32 %77 to i64, !dbg !23
  %79 = getelementptr float, ptr addrspace(3) @global_smem, i64 %78, !dbg !23
  %80 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %79, i1 %56) #3, !dbg !23
  %81 = bitcast i32 %80 to float, !dbg !23
  %82 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %80, i32 1, i32 31), !dbg !23
  %83 = bitcast i32 %82 to float, !dbg !23
  %84 = fadd float %81, %83, !dbg !28
  %85 = bitcast float %84 to <1 x i32>, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %79, <1 x i32> %85, i1 %66) #3, !dbg !23
  %86 = add i32 %7, 192, !dbg !23
  %87 = sext i32 %86 to i64, !dbg !23
  %88 = getelementptr float, ptr addrspace(3) @global_smem, i64 %87, !dbg !23
  %89 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %88, i1 %56) #3, !dbg !23
  %90 = bitcast i32 %89 to float, !dbg !23
  %91 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %89, i32 1, i32 31), !dbg !23
  %92 = bitcast i32 %91 to float, !dbg !23
  %93 = fadd float %90, %92, !dbg !28
  %94 = bitcast float %93 to <1 x i32>, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %88, <1 x i32> %94, i1 %66) #3, !dbg !23
  tail call void @llvm.nvvm.barrier0(), !dbg !23
  %95 = zext nneg i32 %32 to i64, !dbg !23
  %96 = getelementptr float, ptr addrspace(3) @global_smem, i64 %95, !dbg !23
  %97 = load i32, ptr addrspace(3) %96, align 16, !dbg !23
  %98 = zext nneg i32 %38 to i64, !dbg !23
  %99 = getelementptr float, ptr addrspace(3) @global_smem, i64 %98, !dbg !23
  %100 = load i32, ptr addrspace(3) %99, align 8, !dbg !23
  %101 = zext nneg i32 %44 to i64, !dbg !23
  %102 = getelementptr float, ptr addrspace(3) @global_smem, i64 %101, !dbg !23
  %103 = load i32, ptr addrspace(3) %102, align 16, !dbg !23
  %104 = zext nneg i32 %50 to i64, !dbg !23
  %105 = getelementptr float, ptr addrspace(3) @global_smem, i64 %104, !dbg !23
  %106 = load i32, ptr addrspace(3) %105, align 8, !dbg !23
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %107 = zext nneg i32 %9 to i64, !dbg !30
  %108 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %107, !dbg !30
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %108, i32 %97, i32 %100, i32 %103, i32 %106, i1 true) #3, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %109 = zext nneg i32 %12 to i64, !dbg !30
  %110 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %109, !dbg !30
  %111 = load float, ptr addrspace(3) %110, align 8, !dbg !30
  %112 = getelementptr inbounds i8, ptr addrspace(3) %110, i64 4, !dbg !30
  %113 = load float, ptr addrspace(3) %112, align 4, !dbg !30
  %114 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %111, float 2.560000e+02) #3, !dbg !30
  %115 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %113, float 2.560000e+02) #3, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %116 = sext i32 %14 to i64, !dbg !32
  %117 = getelementptr float, ptr addrspace(1) %0, i64 %116, !dbg !32
  %118 = bitcast float %114 to i32, !dbg !33
  %119 = bitcast float %115 to i32, !dbg !33
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %118, i32 %119, ptr addrspace(1) %117, i1 %16) #3, !dbg !33
  ret void, !dbg !34
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cmtqjv7s743genfckfbtjeukck3e4liwmpwmtqq6ucuizogvpeco.py", directory: "inductor_cache/mt")
!4 = !{ptr @triton_per_fused_mean_sum_16, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_mean_sum_16, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_mean_sum_16", linkageName: "triton_per_fused_mean_sum_16", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 31, column: 19, scope: !7)
!16 = !DILocation(line: 30, column: 19, scope: !7)
!17 = !DILocation(line: 33, column: 39, scope: !7)
!18 = !DILocation(line: 33, column: 35, scope: !7)
!19 = !DILocation(line: 33, column: 48, scope: !7)
!20 = !DILocation(line: 33, column: 44, scope: !7)
!21 = !DILocation(line: 33, column: 30, scope: !7)
!22 = !DILocation(line: 33, column: 53, scope: !7)
!23 = !DILocation(line: 267, column: 36, scope: !24, inlinedAt: !26)
!24 = distinct !DILexicalBlockFile(scope: !7, file: !25, discriminator: 0)
!25 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!26 = !DILocation(line: 36, column: 24, scope: !7)
!27 = !DILocation(line: 35, column: 33, scope: !7)
!28 = !DILocation(line: 256, column: 15, scope: !29, inlinedAt: !26)
!29 = distinct !DILexicalBlockFile(scope: !24, file: !25, discriminator: 0)
!30 = !DILocation(line: 38, column: 18, scope: !7)
!31 = !DILocation(line: 39, column: 4, scope: !7)
!32 = !DILocation(line: 40, column: 28, scope: !7)
!33 = !DILocation(line: 40, column: 39, scope: !7)
!34 = !DILocation(line: 40, column: 4, scope: !7)
