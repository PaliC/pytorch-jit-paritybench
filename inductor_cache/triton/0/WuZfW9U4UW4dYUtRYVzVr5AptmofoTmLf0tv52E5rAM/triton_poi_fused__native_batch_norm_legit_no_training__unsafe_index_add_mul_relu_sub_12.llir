; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, i32 %15) local_unnamed_addr !dbg !7 {
  %17 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %18 = shl i32 %17, 7, !dbg !11
  %19 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %20 = and i32 %19, 127, !dbg !12
  %21 = or disjoint i32 %18, %20, !dbg !13
  %22 = icmp slt i32 %21, 18432, !dbg !14
  %23 = sdiv i32 %21, 256, !dbg !15
  %24 = srem i32 %23, 18, !dbg !16
  %.frozen = freeze i32 %21, !dbg !17
  %25 = sdiv i32 %.frozen, 16, !dbg !17
  %26 = srem i32 %25, 16, !dbg !18
  %27 = mul i32 %25, 16, !dbg !19
  %.decomposed = sub i32 %.frozen, %27, !dbg !19
  %28 = sext i32 %21 to i64, !dbg !20
  %29 = getelementptr float, ptr addrspace(1) %1, i64 %28, !dbg !20
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 %22) #3, !dbg !21
  %31 = sext i32 %24 to i64, !dbg !22
  %32 = getelementptr float, ptr addrspace(1) %2, i64 %31, !dbg !22
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 %22) #3, !dbg !23
  %34 = getelementptr float, ptr addrspace(1) %3, i64 %31, !dbg !24
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 %22) #3, !dbg !25
  %36 = bitcast i32 %35 to float, !dbg !25
  %37 = getelementptr float, ptr addrspace(1) %4, i64 %31, !dbg !26
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %22) #3, !dbg !27
  %39 = getelementptr float, ptr addrspace(1) %5, i64 %31, !dbg !28
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 %22) #3, !dbg !29
  %41 = getelementptr float, ptr addrspace(1) %6, i64 %28, !dbg !30
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 %22) #3, !dbg !31
  %43 = sext i32 %26 to i64, !dbg !32
  %44 = getelementptr i64, ptr addrspace(1) %7, i64 %43, !dbg !32
  %45 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %44, i1 %22) #3, !dbg !33
  %46 = sext i32 %.decomposed to i64, !dbg !34
  %47 = getelementptr i64, ptr addrspace(1) %8, i64 %46, !dbg !34
  %48 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %47, i1 %22) #3, !dbg !35
  %49 = getelementptr i64, ptr addrspace(1) %10, i64 %46, !dbg !36
  %50 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %49, i1 %22) #3, !dbg !37
  %51 = getelementptr float, ptr addrspace(1) %11, i64 %46, !dbg !38
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 %22) #3, !dbg !39
  %53 = getelementptr i64, ptr addrspace(1) %12, i64 %43, !dbg !40
  %54 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %53, i1 %22) #3, !dbg !41
  %55 = getelementptr float, ptr addrspace(1) %13, i64 %43, !dbg !42
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 %22) #3, !dbg !43
  %57 = fadd float %36, 0x3EE4F8B580000000, !dbg !44
  %58 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !45
  %.not.i = icmp eq i32 %58, 0, !dbg !45
  %59 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !45
  %.not1.i = icmp eq i32 %59, 0, !dbg !45
  br i1 %.not.i, label %65, label %60, !dbg !45

60:                                               ; preds = %16
  br i1 %.not1.i, label %63, label %61, !dbg !45

61:                                               ; preds = %60
  %62 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %57) #3, !dbg !45
  br label %__nv_sqrtf.exit, !dbg !45

63:                                               ; preds = %60
  %64 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %57) #3, !dbg !45
  br label %__nv_sqrtf.exit, !dbg !45

65:                                               ; preds = %16
  br i1 %.not1.i, label %68, label %66, !dbg !45

66:                                               ; preds = %65
  %67 = tail call float @llvm.nvvm.sqrt.rn.f(float %57) #3, !dbg !45
  br label %__nv_sqrtf.exit, !dbg !45

68:                                               ; preds = %65
  %69 = tail call float @llvm.nvvm.sqrt.approx.f(float %57) #3, !dbg !45
  br label %__nv_sqrtf.exit, !dbg !45

__nv_sqrtf.exit:                                  ; preds = %61, %63, %66, %68
  %.0.i = phi float [ %62, %61 ], [ %64, %63 ], [ %67, %66 ], [ %69, %68 ], !dbg !45
  %70 = bitcast i32 %30 to float, !dbg !21
  %71 = bitcast i32 %33 to float, !dbg !23
  %72 = fsub float %70, %71, !dbg !46
  %73 = bitcast i32 %56 to float, !dbg !43
  %74 = bitcast i32 %42 to float, !dbg !31
  %75 = bitcast i32 %40 to float, !dbg !29
  %76 = bitcast i32 %38 to float, !dbg !27
  %77 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !47
  %78 = fmul float %72, %77, !dbg !48
  %79 = fmul float %78, %76, !dbg !49
  %80 = fadd float %79, %75, !dbg !50
  %81 = fadd float %80, %74, !dbg !51
  %82 = fcmp olt float %81, 0.000000e+00, !dbg !52
  %83 = select i1 %82, float 0.000000e+00, float %81, !dbg !56
  %84 = lshr i64 %45, 60, !dbg !57
  %85 = and i64 %84, 8, !dbg !57
  %86 = add i64 %85, %45, !dbg !57
  %87 = lshr i64 %48, 60, !dbg !58
  %88 = and i64 %87, 8, !dbg !58
  %89 = shl i64 %86, 3, !dbg !59
  %90 = shl nsw i32 %23, 6, !dbg !60
  %91 = sext i32 %90 to i64, !dbg !61
  %92 = getelementptr float, ptr addrspace(1) %9, i64 %48, !dbg !62
  %93 = getelementptr float, ptr addrspace(1) %92, i64 %88, !dbg !62
  %94 = getelementptr float, ptr addrspace(1) %93, i64 %89, !dbg !62
  %95 = getelementptr float, ptr addrspace(1) %94, i64 %91, !dbg !62
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %95, i1 %22) #3, !dbg !63
  %97 = lshr i64 %50, 60, !dbg !64
  %98 = and i64 %97, 8, !dbg !64
  %99 = getelementptr float, ptr addrspace(1) %9, i64 %50, !dbg !65
  %100 = getelementptr float, ptr addrspace(1) %99, i64 %98, !dbg !65
  %101 = getelementptr float, ptr addrspace(1) %100, i64 %89, !dbg !65
  %102 = getelementptr float, ptr addrspace(1) %101, i64 %91, !dbg !65
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %102, i1 %22) #3, !dbg !66
  %104 = fadd float %83, 0.000000e+00, !dbg !67
  %105 = lshr i64 %54, 60, !dbg !68
  %106 = and i64 %105, 8, !dbg !68
  %107 = add i64 %106, %54, !dbg !68
  %108 = shl i64 %107, 3, !dbg !69
  %109 = getelementptr float, ptr addrspace(1) %93, i64 %108, !dbg !70
  %110 = getelementptr float, ptr addrspace(1) %109, i64 %91, !dbg !70
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %110, i1 %22) #3, !dbg !71
  %112 = getelementptr float, ptr addrspace(1) %100, i64 %108, !dbg !72
  %113 = getelementptr float, ptr addrspace(1) %112, i64 %91, !dbg !72
  %114 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %113, i1 %22) #3, !dbg !73
  %115 = insertelement <2 x i32> poison, i32 %111, i64 0, !dbg !71
  %116 = insertelement <2 x i32> %115, i32 %96, i64 1, !dbg !71
  %117 = bitcast <2 x i32> %116 to <2 x float>, !dbg !71
  %118 = insertelement <2 x i32> poison, i32 %114, i64 0, !dbg !73
  %119 = insertelement <2 x i32> %118, i32 %103, i64 1, !dbg !73
  %120 = bitcast <2 x i32> %119 to <2 x float>, !dbg !73
  %121 = fsub <2 x float> %120, %117, !dbg !74
  %122 = insertelement <2 x i32> poison, i32 %52, i64 0, !dbg !75
  %123 = bitcast <2 x i32> %122 to <2 x float>, !dbg !75
  %124 = shufflevector <2 x float> %123, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !75
  %125 = fmul <2 x float> %121, %124, !dbg !75
  %126 = fadd <2 x float> %125, %117, !dbg !76
  %127 = extractelement <2 x float> %126, i64 0, !dbg !77
  %128 = extractelement <2 x float> %126, i64 1, !dbg !78
  %129 = fsub float %127, %128, !dbg !77
  %130 = fmul float %129, %73, !dbg !79
  %131 = fadd float %128, %130, !dbg !78
  %132 = fadd float %104, %131, !dbg !80
  %133 = fcmp olt float %132, 0.000000e+00, !dbg !81
  %134 = select i1 %133, float 0.000000e+00, float %132, !dbg !83
  %135 = getelementptr float, ptr addrspace(1) %14, i64 %28, !dbg !84
  %136 = bitcast float %83 to i32, !dbg !85
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %136, ptr addrspace(1) %135, i1 %22) #3, !dbg !85
  %137 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !86
  %138 = bitcast float %134 to i32, !dbg !87
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %138, ptr addrspace(1) %137, i1 %22) #3, !dbg !87
  ret void, !dbg !88
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ctqbla5cxppnueng72sn2a7qk7yfh4tvzqrbmqw4qiaupde65c76.py", directory: "inductor_cache/tq")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_12, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_12, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_12", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_mul_relu_sub_12", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 21, scope: !7)
!16 = !DILocation(line: 25, column: 28, scope: !7)
!17 = !DILocation(line: 26, column: 21, scope: !7)
!18 = !DILocation(line: 26, column: 27, scope: !7)
!19 = !DILocation(line: 27, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 30, scope: !7)
!21 = !DILocation(line: 29, column: 35, scope: !7)
!22 = !DILocation(line: 30, column: 30, scope: !7)
!23 = !DILocation(line: 30, column: 35, scope: !7)
!24 = !DILocation(line: 31, column: 30, scope: !7)
!25 = !DILocation(line: 31, column: 35, scope: !7)
!26 = !DILocation(line: 32, column: 31, scope: !7)
!27 = !DILocation(line: 32, column: 36, scope: !7)
!28 = !DILocation(line: 33, column: 31, scope: !7)
!29 = !DILocation(line: 33, column: 36, scope: !7)
!30 = !DILocation(line: 34, column: 31, scope: !7)
!31 = !DILocation(line: 34, column: 36, scope: !7)
!32 = !DILocation(line: 35, column: 31, scope: !7)
!33 = !DILocation(line: 35, column: 36, scope: !7)
!34 = !DILocation(line: 36, column: 31, scope: !7)
!35 = !DILocation(line: 36, column: 36, scope: !7)
!36 = !DILocation(line: 37, column: 31, scope: !7)
!37 = !DILocation(line: 37, column: 36, scope: !7)
!38 = !DILocation(line: 38, column: 32, scope: !7)
!39 = !DILocation(line: 38, column: 37, scope: !7)
!40 = !DILocation(line: 39, column: 32, scope: !7)
!41 = !DILocation(line: 39, column: 37, scope: !7)
!42 = !DILocation(line: 40, column: 32, scope: !7)
!43 = !DILocation(line: 40, column: 37, scope: !7)
!44 = !DILocation(line: 43, column: 18, scope: !7)
!45 = !DILocation(line: 44, column: 26, scope: !7)
!46 = !DILocation(line: 41, column: 18, scope: !7)
!47 = !DILocation(line: 46, column: 18, scope: !7)
!48 = !DILocation(line: 49, column: 19, scope: !7)
!49 = !DILocation(line: 50, column: 20, scope: !7)
!50 = !DILocation(line: 51, column: 20, scope: !7)
!51 = !DILocation(line: 52, column: 20, scope: !7)
!52 = !DILocation(line: 118, column: 15, scope: !53, inlinedAt: !55)
!53 = distinct !DILexicalBlockFile(scope: !7, file: !54, discriminator: 0)
!54 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!55 = !DILocation(line: 54, column: 42, scope: !7)
!56 = !DILocation(line: 121, column: 29, scope: !53, inlinedAt: !55)
!57 = !DILocation(line: 58, column: 35, scope: !7)
!58 = !DILocation(line: 61, column: 35, scope: !7)
!59 = !DILocation(line: 62, column: 41, scope: !7)
!60 = !DILocation(line: 62, column: 52, scope: !7)
!61 = !DILocation(line: 62, column: 49, scope: !7)
!62 = !DILocation(line: 62, column: 31, scope: !7)
!63 = !DILocation(line: 62, column: 57, scope: !7)
!64 = !DILocation(line: 65, column: 35, scope: !7)
!65 = !DILocation(line: 66, column: 31, scope: !7)
!66 = !DILocation(line: 66, column: 57, scope: !7)
!67 = !DILocation(line: 71, column: 20, scope: !7)
!68 = !DILocation(line: 74, column: 35, scope: !7)
!69 = !DILocation(line: 75, column: 41, scope: !7)
!70 = !DILocation(line: 75, column: 31, scope: !7)
!71 = !DILocation(line: 75, column: 57, scope: !7)
!72 = !DILocation(line: 76, column: 31, scope: !7)
!73 = !DILocation(line: 76, column: 57, scope: !7)
!74 = !DILocation(line: 77, column: 20, scope: !7)
!75 = !DILocation(line: 78, column: 20, scope: !7)
!76 = !DILocation(line: 79, column: 20, scope: !7)
!77 = !DILocation(line: 80, column: 20, scope: !7)
!78 = !DILocation(line: 82, column: 20, scope: !7)
!79 = !DILocation(line: 81, column: 20, scope: !7)
!80 = !DILocation(line: 83, column: 20, scope: !7)
!81 = !DILocation(line: 118, column: 15, scope: !53, inlinedAt: !82)
!82 = !DILocation(line: 84, column: 42, scope: !7)
!83 = !DILocation(line: 121, column: 29, scope: !53, inlinedAt: !82)
!84 = !DILocation(line: 85, column: 25, scope: !7)
!85 = !DILocation(line: 85, column: 37, scope: !7)
!86 = !DILocation(line: 86, column: 28, scope: !7)
!87 = !DILocation(line: 86, column: 40, scope: !7)
!88 = !DILocation(line: 86, column: 4, scope: !7)
