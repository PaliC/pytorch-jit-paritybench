; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_mul_sum_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %6 = shl i32 %5, 6, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 1, !dbg !12
  %9 = and i32 %8, 62, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = icmp slt i32 %10, 64, !dbg !14
  %12 = sdiv i32 %10, 16, !dbg !15
  %13 = shl nsw i32 %12, 2, !dbg !16
  %14 = sext i32 %13 to i64, !dbg !17
  %15 = getelementptr float, ptr addrspace(1) %0, i64 %14, !dbg !17
  %16 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %15, i1 %11) #1, !dbg !18
  %17 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %15, i1 %11) #1, !dbg !18
  %18 = shl i32 %10, 2, !dbg !19
  %19 = or disjoint i32 %18, 4, !dbg !19
  %20 = sext i32 %18 to i64, !dbg !20
  %21 = getelementptr float, ptr addrspace(1) %1, i64 %20, !dbg !20
  %22 = sext i32 %19 to i64, !dbg !20
  %23 = getelementptr float, ptr addrspace(1) %1, i64 %22, !dbg !20
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %21, i1 %11) #1, !dbg !21
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 %11) #1, !dbg !21
  %26 = or disjoint i32 %13, 1, !dbg !22
  %27 = sext i32 %26 to i64, !dbg !23
  %28 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !23
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 %11) #1, !dbg !24
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 %11) #1, !dbg !24
  %31 = or disjoint i32 %18, 1, !dbg !25
  %32 = or disjoint i32 %18, 5, !dbg !25
  %33 = sext i32 %31 to i64, !dbg !26
  %34 = getelementptr float, ptr addrspace(1) %1, i64 %33, !dbg !26
  %35 = sext i32 %32 to i64, !dbg !26
  %36 = getelementptr float, ptr addrspace(1) %1, i64 %35, !dbg !26
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 %11) #1, !dbg !27
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 %11) #1, !dbg !27
  %39 = or disjoint i32 %13, 2, !dbg !28
  %40 = sext i32 %39 to i64, !dbg !29
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !29
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 %11) #1, !dbg !30
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 %11) #1, !dbg !30
  %44 = or disjoint i32 %18, 2, !dbg !31
  %45 = or disjoint i32 %18, 6, !dbg !31
  %46 = sext i32 %44 to i64, !dbg !32
  %47 = getelementptr float, ptr addrspace(1) %1, i64 %46, !dbg !32
  %48 = sext i32 %45 to i64, !dbg !32
  %49 = getelementptr float, ptr addrspace(1) %1, i64 %48, !dbg !32
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 %11) #1, !dbg !33
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 %11) #1, !dbg !33
  %52 = or disjoint i32 %13, 3, !dbg !34
  %53 = sext i32 %52 to i64, !dbg !35
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !35
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 %11) #1, !dbg !36
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 %11) #1, !dbg !36
  %57 = or disjoint i32 %18, 3, !dbg !37
  %58 = or disjoint i32 %18, 7, !dbg !37
  %59 = sext i32 %57 to i64, !dbg !38
  %60 = getelementptr float, ptr addrspace(1) %1, i64 %59, !dbg !38
  %61 = sext i32 %58 to i64, !dbg !38
  %62 = getelementptr float, ptr addrspace(1) %1, i64 %61, !dbg !38
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 %11) #1, !dbg !39
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 %11) #1, !dbg !39
  %65 = insertelement <2 x i32> poison, i32 %16, i64 0, !dbg !18
  %66 = insertelement <2 x i32> %65, i32 %29, i64 1, !dbg !18
  %67 = bitcast <2 x i32> %66 to <2 x float>, !dbg !18
  %68 = insertelement <2 x i32> poison, i32 %24, i64 0, !dbg !21
  %69 = insertelement <2 x i32> %68, i32 %37, i64 1, !dbg !21
  %70 = bitcast <2 x i32> %69 to <2 x float>, !dbg !21
  %71 = fmul <2 x float> %67, %70, !dbg !40
  %72 = insertelement <2 x i32> poison, i32 %17, i64 0, !dbg !18
  %73 = insertelement <2 x i32> %72, i32 %30, i64 1, !dbg !18
  %74 = bitcast <2 x i32> %73 to <2 x float>, !dbg !18
  %75 = insertelement <2 x i32> poison, i32 %25, i64 0, !dbg !21
  %76 = insertelement <2 x i32> %75, i32 %38, i64 1, !dbg !21
  %77 = bitcast <2 x i32> %76 to <2 x float>, !dbg !21
  %78 = fmul <2 x float> %74, %77, !dbg !40
  %shift = shufflevector <2 x float> %71, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !41
  %79 = fadd <2 x float> %71, %shift, !dbg !41
  %shift1 = shufflevector <2 x float> %78, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !41
  %80 = fadd <2 x float> %78, %shift1, !dbg !41
  %81 = insertelement <2 x i32> poison, i32 %42, i64 0, !dbg !30
  %82 = insertelement <2 x i32> %81, i32 %55, i64 1, !dbg !30
  %83 = bitcast <2 x i32> %82 to <2 x float>, !dbg !30
  %84 = insertelement <2 x i32> poison, i32 %50, i64 0, !dbg !33
  %85 = insertelement <2 x i32> %84, i32 %63, i64 1, !dbg !33
  %86 = bitcast <2 x i32> %85 to <2 x float>, !dbg !33
  %87 = fmul <2 x float> %83, %86, !dbg !42
  %88 = fadd <2 x float> %79, %87, !dbg !43
  %89 = insertelement <2 x i32> poison, i32 %43, i64 0, !dbg !30
  %90 = insertelement <2 x i32> %89, i32 %56, i64 1, !dbg !30
  %91 = bitcast <2 x i32> %90 to <2 x float>, !dbg !30
  %92 = insertelement <2 x i32> poison, i32 %51, i64 0, !dbg !33
  %93 = insertelement <2 x i32> %92, i32 %64, i64 1, !dbg !33
  %94 = bitcast <2 x i32> %93 to <2 x float>, !dbg !33
  %95 = fmul <2 x float> %91, %94, !dbg !42
  %96 = fadd <2 x float> %80, %95, !dbg !43
  %shift2 = shufflevector <2 x float> %87, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !44
  %97 = fadd <2 x float> %88, %shift2, !dbg !44
  %shift3 = shufflevector <2 x float> %95, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !44
  %98 = fadd <2 x float> %96, %shift3, !dbg !44
  %99 = sext i32 %10 to i64, !dbg !45
  %100 = getelementptr float, ptr addrspace(1) %2, i64 %99, !dbg !45
  %bc = bitcast <2 x float> %97 to <2 x i32>, !dbg !46
  %101 = extractelement <2 x i32> %bc, i64 0, !dbg !46
  %bc4 = bitcast <2 x float> %98 to <2 x i32>, !dbg !46
  %102 = extractelement <2 x i32> %bc4, i64 0, !dbg !46
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %101, i32 %102, ptr addrspace(1) %100, i1 %11) #1, !dbg !46
  ret void, !dbg !47
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c66e4pedajhns6i2nmodfl6oljwf7xofzfbsx5v4e5txvyh43c5a.py", directory: "inductor_cache/66")
!4 = !{ptr @triton_poi_fused_mul_sum_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_mul_sum_0, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_mul_sum_0", linkageName: "triton_poi_fused_mul_sum_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 32, scope: !7)
!17 = !DILocation(line: 26, column: 30, scope: !7)
!18 = !DILocation(line: 26, column: 37, scope: !7)
!19 = !DILocation(line: 27, column: 32, scope: !7)
!20 = !DILocation(line: 27, column: 30, scope: !7)
!21 = !DILocation(line: 27, column: 37, scope: !7)
!22 = !DILocation(line: 28, column: 34, scope: !7)
!23 = !DILocation(line: 28, column: 30, scope: !7)
!24 = !DILocation(line: 28, column: 41, scope: !7)
!25 = !DILocation(line: 29, column: 34, scope: !7)
!26 = !DILocation(line: 29, column: 30, scope: !7)
!27 = !DILocation(line: 29, column: 41, scope: !7)
!28 = !DILocation(line: 30, column: 34, scope: !7)
!29 = !DILocation(line: 30, column: 30, scope: !7)
!30 = !DILocation(line: 30, column: 41, scope: !7)
!31 = !DILocation(line: 31, column: 34, scope: !7)
!32 = !DILocation(line: 31, column: 30, scope: !7)
!33 = !DILocation(line: 31, column: 41, scope: !7)
!34 = !DILocation(line: 32, column: 35, scope: !7)
!35 = !DILocation(line: 32, column: 31, scope: !7)
!36 = !DILocation(line: 32, column: 42, scope: !7)
!37 = !DILocation(line: 33, column: 35, scope: !7)
!38 = !DILocation(line: 33, column: 31, scope: !7)
!39 = !DILocation(line: 33, column: 42, scope: !7)
!40 = !DILocation(line: 34, column: 18, scope: !7)
!41 = !DILocation(line: 36, column: 18, scope: !7)
!42 = !DILocation(line: 37, column: 18, scope: !7)
!43 = !DILocation(line: 38, column: 19, scope: !7)
!44 = !DILocation(line: 40, column: 20, scope: !7)
!45 = !DILocation(line: 41, column: 25, scope: !7)
!46 = !DILocation(line: 41, column: 37, scope: !7)
!47 = !DILocation(line: 41, column: 4, scope: !7)
