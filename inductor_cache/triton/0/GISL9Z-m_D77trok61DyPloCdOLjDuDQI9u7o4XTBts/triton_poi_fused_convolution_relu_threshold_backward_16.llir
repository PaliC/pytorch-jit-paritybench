; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_relu_threshold_backward_16(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %8 = shl i32 %7, 5, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = shl i32 %9, 3, !dbg !12
  %11 = and i32 %10, 24, !dbg !12
  %.lobit1 = lshr i32 %9, 5, !dbg !12
  %12 = and i32 %.lobit1, 3, !dbg !12
  %13 = or disjoint i32 %12, 4, !dbg !12
  %14 = or disjoint i32 %12, 8, !dbg !12
  %15 = or disjoint i32 %12, 12, !dbg !12
  %16 = or disjoint i32 %12, 16, !dbg !12
  %17 = or disjoint i32 %12, 20, !dbg !12
  %18 = or disjoint i32 %12, 24, !dbg !12
  %19 = or disjoint i32 %12, 28, !dbg !12
  %20 = or disjoint i32 %8, %11, !dbg !13
  %21 = or disjoint i32 %20, 4, !dbg !13
  %22 = or disjoint i32 %8, %12, !dbg !13
  %23 = or disjoint i32 %8, %13, !dbg !13
  %24 = or disjoint i32 %8, %14, !dbg !13
  %25 = or disjoint i32 %8, %15, !dbg !13
  %26 = or disjoint i32 %8, %16, !dbg !13
  %27 = or disjoint i32 %8, %17, !dbg !13
  %28 = or disjoint i32 %8, %18, !dbg !13
  %29 = or disjoint i32 %8, %19, !dbg !13
  %30 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %31 = shl i32 %30, 5, !dbg !15
  %32 = lshr i32 %9, 2, !dbg !16
  %33 = and i32 %32, 31, !dbg !16
  %34 = and i32 %9, 31, !dbg !16
  %35 = or disjoint i32 %31, %33, !dbg !17
  %36 = or disjoint i32 %31, %34, !dbg !17
  %37 = icmp slt i32 %35, 45, !dbg !18
  %38 = icmp slt i32 %36, 45, !dbg !18
  %.frozen = freeze i32 %20, !dbg !19
  %39 = sdiv i32 %.frozen, 512, !dbg !19
  %40 = mul i32 %39, 512, !dbg !20
  %.decomposed = sub i32 %.frozen, %40, !dbg !20
  %41 = srem i32 %21, 512, !dbg !20
  %42 = shl i32 %35, 9, !dbg !21
  %43 = mul i32 %39, 23040, !dbg !22
  %44 = add i32 %43, %42, !dbg !23
  %45 = add i32 %44, %.decomposed, !dbg !24
  %46 = add i32 %44, %41, !dbg !24
  %47 = sext i32 %45 to i64, !dbg !25
  %48 = getelementptr float, ptr addrspace(1) %0, i64 %47, !dbg !25
  %49 = sext i32 %46 to i64, !dbg !25
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !25
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %48, i1 %37) #2, !dbg !26
  %52 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !26
  %53 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !26
  %54 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !26
  %55 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !26
  %56 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %50, i1 %37) #2, !dbg !26
  %57 = extractvalue { i32, i32, i32, i32 } %56, 0, !dbg !26
  %58 = extractvalue { i32, i32, i32, i32 } %56, 1, !dbg !26
  %59 = extractvalue { i32, i32, i32, i32 } %56, 2, !dbg !26
  %60 = extractvalue { i32, i32, i32, i32 } %56, 3, !dbg !26
  %61 = sext i32 %.decomposed to i64, !dbg !27
  %62 = getelementptr float, ptr addrspace(1) %1, i64 %61, !dbg !27
  %63 = sext i32 %41 to i64, !dbg !27
  %64 = getelementptr float, ptr addrspace(1) %1, i64 %63, !dbg !27
  %65 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %62, i1 true) #2, !dbg !28
  %66 = extractvalue { i32, i32, i32, i32 } %65, 0, !dbg !28
  %67 = extractvalue { i32, i32, i32, i32 } %65, 1, !dbg !28
  %68 = extractvalue { i32, i32, i32, i32 } %65, 2, !dbg !28
  %69 = extractvalue { i32, i32, i32, i32 } %65, 3, !dbg !28
  %70 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %64, i1 true) #2, !dbg !28
  %71 = extractvalue { i32, i32, i32, i32 } %70, 0, !dbg !28
  %72 = extractvalue { i32, i32, i32, i32 } %70, 1, !dbg !28
  %73 = extractvalue { i32, i32, i32, i32 } %70, 2, !dbg !28
  %74 = extractvalue { i32, i32, i32, i32 } %70, 3, !dbg !28
  %75 = mul i32 %22, 45, !dbg !29
  %76 = mul i32 %23, 45, !dbg !29
  %77 = mul i32 %24, 45, !dbg !29
  %78 = mul i32 %25, 45, !dbg !29
  %79 = mul i32 %26, 45, !dbg !29
  %80 = mul i32 %27, 45, !dbg !29
  %81 = mul i32 %28, 45, !dbg !29
  %82 = mul i32 %29, 45, !dbg !29
  %83 = add i32 %36, %75, !dbg !30
  %84 = add i32 %36, %76, !dbg !30
  %85 = add i32 %36, %77, !dbg !30
  %86 = add i32 %36, %78, !dbg !30
  %87 = add i32 %36, %79, !dbg !30
  %88 = add i32 %36, %80, !dbg !30
  %89 = add i32 %36, %81, !dbg !30
  %90 = add i32 %36, %82, !dbg !30
  %91 = sext i32 %83 to i64, !dbg !31
  %92 = getelementptr float, ptr addrspace(1) %2, i64 %91, !dbg !31
  %93 = sext i32 %84 to i64, !dbg !31
  %94 = getelementptr float, ptr addrspace(1) %2, i64 %93, !dbg !31
  %95 = sext i32 %85 to i64, !dbg !31
  %96 = getelementptr float, ptr addrspace(1) %2, i64 %95, !dbg !31
  %97 = sext i32 %86 to i64, !dbg !31
  %98 = getelementptr float, ptr addrspace(1) %2, i64 %97, !dbg !31
  %99 = sext i32 %87 to i64, !dbg !31
  %100 = getelementptr float, ptr addrspace(1) %2, i64 %99, !dbg !31
  %101 = sext i32 %88 to i64, !dbg !31
  %102 = getelementptr float, ptr addrspace(1) %2, i64 %101, !dbg !31
  %103 = sext i32 %89 to i64, !dbg !31
  %104 = getelementptr float, ptr addrspace(1) %2, i64 %103, !dbg !31
  %105 = sext i32 %90 to i64, !dbg !31
  %106 = getelementptr float, ptr addrspace(1) %2, i64 %105, !dbg !31
  %107 = shl i32 %9, 8, !dbg !32
  %108 = and i32 %107, 768, !dbg !32
  %109 = or disjoint i32 %108, %33, !dbg !32
  %110 = and i32 %9, 127, !dbg !32
  %111 = lshr exact i32 %108, 3, !dbg !32
  %112 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %111, !dbg !32
  %113 = getelementptr float, ptr addrspace(3) %112, i32 %109, !dbg !32
  %114 = or disjoint i32 %109, 32, !dbg !32
  %115 = lshr i32 %114, 5, !dbg !32
  %116 = getelementptr float, ptr addrspace(3) @global_smem, i32 %115, !dbg !32
  %117 = getelementptr float, ptr addrspace(3) %116, i32 %114, !dbg !32
  %118 = or disjoint i32 %109, 64, !dbg !32
  %119 = lshr i32 %118, 5, !dbg !32
  %120 = getelementptr float, ptr addrspace(3) @global_smem, i32 %119, !dbg !32
  %121 = getelementptr float, ptr addrspace(3) %120, i32 %118, !dbg !32
  %122 = or disjoint i32 %109, 96, !dbg !32
  %123 = lshr i32 %122, 5, !dbg !32
  %124 = getelementptr float, ptr addrspace(3) @global_smem, i32 %123, !dbg !32
  %125 = getelementptr float, ptr addrspace(3) %124, i32 %122, !dbg !32
  %126 = or disjoint i32 %109, 128, !dbg !32
  %127 = lshr i32 %126, 5, !dbg !32
  %128 = getelementptr float, ptr addrspace(3) @global_smem, i32 %127, !dbg !32
  %129 = getelementptr float, ptr addrspace(3) %128, i32 %126, !dbg !32
  %130 = or disjoint i32 %109, 160, !dbg !32
  %131 = lshr i32 %130, 5, !dbg !32
  %132 = getelementptr float, ptr addrspace(3) @global_smem, i32 %131, !dbg !32
  %133 = getelementptr float, ptr addrspace(3) %132, i32 %130, !dbg !32
  %134 = or disjoint i32 %109, 192, !dbg !32
  %135 = lshr i32 %134, 5, !dbg !32
  %136 = getelementptr float, ptr addrspace(3) @global_smem, i32 %135, !dbg !32
  %137 = getelementptr float, ptr addrspace(3) %136, i32 %134, !dbg !32
  %138 = or disjoint i32 %109, 224, !dbg !32
  %139 = lshr i32 %138, 5, !dbg !32
  %140 = getelementptr float, ptr addrspace(3) @global_smem, i32 %139, !dbg !32
  %141 = getelementptr float, ptr addrspace(3) %140, i32 %138, !dbg !32
  %142 = lshr i32 %110, 5, !dbg !32
  %143 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %142, !dbg !32
  %144 = getelementptr inbounds float, ptr addrspace(3) %143, i32 %110, !dbg !32
  %145 = or disjoint i32 %110, 128, !dbg !32
  %146 = lshr i32 %145, 5, !dbg !32
  %147 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %146, !dbg !32
  %148 = getelementptr inbounds float, ptr addrspace(3) %147, i32 %145, !dbg !32
  %149 = or disjoint i32 %110, 256, !dbg !32
  %150 = lshr i32 %149, 5, !dbg !32
  %151 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %150, !dbg !32
  %152 = getelementptr inbounds float, ptr addrspace(3) %151, i32 %149, !dbg !32
  %153 = or disjoint i32 %110, 384, !dbg !32
  %154 = lshr i32 %153, 5, !dbg !32
  %155 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %154, !dbg !32
  %156 = getelementptr inbounds float, ptr addrspace(3) %155, i32 %153, !dbg !32
  %157 = or disjoint i32 %110, 512, !dbg !32
  %158 = lshr i32 %157, 5, !dbg !32
  %159 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %158, !dbg !32
  %160 = getelementptr inbounds float, ptr addrspace(3) %159, i32 %157, !dbg !32
  %161 = or disjoint i32 %110, 640, !dbg !32
  %162 = lshr i32 %161, 5, !dbg !32
  %163 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %162, !dbg !32
  %164 = getelementptr inbounds float, ptr addrspace(3) %163, i32 %161, !dbg !32
  %165 = or disjoint i32 %110, 768, !dbg !32
  %166 = lshr i32 %165, 5, !dbg !32
  %167 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %166, !dbg !32
  %168 = getelementptr inbounds float, ptr addrspace(3) %167, i32 %165, !dbg !32
  %169 = or disjoint i32 %110, 896, !dbg !32
  %170 = lshr i32 %169, 5, !dbg !32
  %171 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %170, !dbg !32
  %172 = getelementptr inbounds float, ptr addrspace(3) %171, i32 %169, !dbg !32
  %173 = getelementptr i1, ptr addrspace(1) %3, i64 %47, !dbg !33
  %174 = insertelement <4 x i32> poison, i32 %52, i64 0, !dbg !26
  %175 = insertelement <4 x i32> %174, i32 %53, i64 1, !dbg !26
  %176 = insertelement <4 x i32> %175, i32 %54, i64 2, !dbg !26
  %177 = insertelement <4 x i32> %176, i32 %55, i64 3, !dbg !26
  %178 = bitcast <4 x i32> %177 to <4 x float>, !dbg !26
  %179 = insertelement <4 x i32> poison, i32 %66, i64 0, !dbg !28
  %180 = insertelement <4 x i32> %179, i32 %67, i64 1, !dbg !28
  %181 = insertelement <4 x i32> %180, i32 %68, i64 2, !dbg !28
  %182 = insertelement <4 x i32> %181, i32 %69, i64 3, !dbg !28
  %183 = bitcast <4 x i32> %182 to <4 x float>, !dbg !28
  %184 = fadd <4 x float> %178, %183, !dbg !34
  %185 = fcmp olt <4 x float> %184, zeroinitializer, !dbg !35
  %186 = select <4 x i1> %185, <4 x float> zeroinitializer, <4 x float> %184, !dbg !39
  %187 = fcmp ole <4 x float> %186, zeroinitializer, !dbg !40
  %188 = extractelement <4 x float> %186, i64 0, !dbg !32
  %189 = bitcast float %188 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %113, <1 x i32> %189, i1 true) #2, !dbg !32
  %190 = extractelement <4 x float> %186, i64 1, !dbg !32
  %191 = bitcast float %190 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %117, <1 x i32> %191, i1 true) #2, !dbg !32
  %192 = extractelement <4 x float> %186, i64 2, !dbg !32
  %193 = bitcast float %192 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %121, <1 x i32> %193, i1 true) #2, !dbg !32
  %194 = extractelement <4 x float> %186, i64 3, !dbg !32
  %195 = bitcast float %194 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %125, <1 x i32> %195, i1 true) #2, !dbg !32
  %196 = insertelement <4 x i32> poison, i32 %57, i64 0, !dbg !26
  %197 = insertelement <4 x i32> %196, i32 %58, i64 1, !dbg !26
  %198 = insertelement <4 x i32> %197, i32 %59, i64 2, !dbg !26
  %199 = insertelement <4 x i32> %198, i32 %60, i64 3, !dbg !26
  %200 = bitcast <4 x i32> %199 to <4 x float>, !dbg !26
  %201 = insertelement <4 x i32> poison, i32 %71, i64 0, !dbg !28
  %202 = insertelement <4 x i32> %201, i32 %72, i64 1, !dbg !28
  %203 = insertelement <4 x i32> %202, i32 %73, i64 2, !dbg !28
  %204 = insertelement <4 x i32> %203, i32 %74, i64 3, !dbg !28
  %205 = bitcast <4 x i32> %204 to <4 x float>, !dbg !28
  %206 = fadd <4 x float> %200, %205, !dbg !34
  %207 = fcmp olt <4 x float> %206, zeroinitializer, !dbg !35
  %208 = select <4 x i1> %207, <4 x float> zeroinitializer, <4 x float> %206, !dbg !39
  %209 = fcmp ole <4 x float> %208, zeroinitializer, !dbg !40
  %210 = extractelement <4 x float> %208, i64 0, !dbg !32
  %211 = bitcast float %210 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %129, <1 x i32> %211, i1 true) #2, !dbg !32
  %212 = extractelement <4 x float> %208, i64 1, !dbg !32
  %213 = bitcast float %212 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %133, <1 x i32> %213, i1 true) #2, !dbg !32
  %214 = extractelement <4 x float> %208, i64 2, !dbg !32
  %215 = bitcast float %214 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %137, <1 x i32> %215, i1 true) #2, !dbg !32
  %216 = extractelement <4 x float> %208, i64 3, !dbg !32
  %217 = bitcast float %216 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %141, <1 x i32> %217, i1 true) #2, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %218 = load i32, ptr addrspace(3) %144, align 4, !dbg !32
  %219 = load i32, ptr addrspace(3) %148, align 4, !dbg !32
  %220 = load i32, ptr addrspace(3) %152, align 4, !dbg !32
  %221 = load i32, ptr addrspace(3) %156, align 4, !dbg !32
  %222 = load i32, ptr addrspace(3) %160, align 4, !dbg !32
  %223 = load i32, ptr addrspace(3) %164, align 4, !dbg !32
  %224 = load i32, ptr addrspace(3) %168, align 4, !dbg !32
  %225 = load i32, ptr addrspace(3) %172, align 4, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %218, ptr addrspace(1) %92, i1 %38) #2, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %219, ptr addrspace(1) %94, i1 %38) #2, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %220, ptr addrspace(1) %96, i1 %38) #2, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %221, ptr addrspace(1) %98, i1 %38) #2, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %222, ptr addrspace(1) %100, i1 %38) #2, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %223, ptr addrspace(1) %102, i1 %38) #2, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %224, ptr addrspace(1) %104, i1 %38) #2, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %225, ptr addrspace(1) %106, i1 %38) #2, !dbg !32
  %226 = zext <4 x i1> %187 to <4 x i8>, !dbg !41
  %227 = bitcast <4 x i8> %226 to i32, !dbg !41
  %228 = zext <4 x i1> %209 to <4 x i8>, !dbg !41
  %229 = bitcast <4 x i8> %228 to i32, !dbg !41
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %227, i32 %229, ptr addrspace(1) %173, i1 %37) #2, !dbg !41
  ret void, !dbg !42
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cdbauw2abvkxbtnbefegg7iyen3r3nc6erh6syh6lxwxyyegsm4v.py", directory: "inductor_cache/db")
!4 = !{ptr @triton_poi_fused_convolution_relu_threshold_backward_16, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_relu_threshold_backward_16, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_relu_threshold_backward_16", linkageName: "triton_poi_fused_convolution_relu_threshold_backward_16", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 39, scope: !7)
!22 = !DILocation(line: 32, column: 50, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 44, scope: !7)
!25 = !DILocation(line: 32, column: 30, scope: !7)
!26 = !DILocation(line: 32, column: 55, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 33, column: 35, scope: !7)
!29 = !DILocation(line: 39, column: 33, scope: !7)
!30 = !DILocation(line: 39, column: 30, scope: !7)
!31 = !DILocation(line: 39, column: 25, scope: !7)
!32 = !DILocation(line: 39, column: 44, scope: !7)
!33 = !DILocation(line: 40, column: 25, scope: !7)
!34 = !DILocation(line: 34, column: 18, scope: !7)
!35 = !DILocation(line: 118, column: 15, scope: !36, inlinedAt: !38)
!36 = distinct !DILexicalBlockFile(scope: !7, file: !37, discriminator: 0)
!37 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!38 = !DILocation(line: 36, column: 40, scope: !7)
!39 = !DILocation(line: 121, column: 29, scope: !36, inlinedAt: !38)
!40 = !DILocation(line: 38, column: 19, scope: !7)
!41 = !DILocation(line: 40, column: 56, scope: !7)
!42 = !DILocation(line: 40, column: 4, scope: !7)
