; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_red_fused_add_convolution_native_group_norm_59(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %10 = icmp slt i32 %9, 128, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = and i32 %11, 511, !dbg !12
  %13 = or disjoint i32 %12, 512, !dbg !12
  %14 = or disjoint i32 %12, 1024, !dbg !12
  %15 = or disjoint i32 %12, 1536, !dbg !12
  %16 = shl i32 %11, 2, !dbg !12
  %17 = and i32 %16, 2044, !dbg !12
  %18 = srem i32 %9, 32, !dbg !13
  %19 = shl i32 %9, 12, !dbg !14
  %20 = shl nsw i32 %18, 2, !dbg !15
  %21 = or disjoint i32 %19, %17
  %.idx = shl nuw nsw i32 %17, 3
  %22 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx
  %23 = shl nuw nsw i32 %17, 1
  %24 = or disjoint i32 %23, 2
  %25 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %24
  %26 = or disjoint i32 %23, 4
  %27 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %26
  %28 = or disjoint i32 %23, 6
  %29 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %28
  %.idx1 = shl nuw nsw i32 %12, 3
  %30 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx1
  %.idx2 = shl nuw nsw i32 %13, 3
  %31 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx2
  %.idx3 = shl nuw nsw i32 %14, 3
  %32 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx3
  %.idx4 = shl nuw nsw i32 %15, 3
  %33 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx4
  %34 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12
  %35 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13
  %36 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14
  %37 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15
  %38 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %17
  %39 = sext i32 %21 to i64, !dbg !16
  %40 = sext i32 %20 to i64, !dbg !16
  %41 = getelementptr inbounds i8, ptr addrspace(3) %38, i32 4
  %42 = getelementptr inbounds i8, ptr addrspace(3) %38, i32 8
  %43 = getelementptr inbounds i8, ptr addrspace(3) %38, i32 12
  %44 = insertelement <4 x i1> poison, i1 %10, i64 0, !dbg !17
  %45 = shufflevector <4 x i1> %44, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !17
  br label %46, !dbg !16

46:                                               ; preds = %8, %._crit_edge
  %47 = phi i1 [ true, %8 ], [ false, %._crit_edge ]
  %indvars.iv = phi i64 [ 0, %8 ], [ 2048, %._crit_edge ]
  %48 = phi float [ 0.000000e+00, %8 ], [ %174, %._crit_edge ]
  %49 = phi float [ 0.000000e+00, %8 ], [ %175, %._crit_edge ]
  %50 = phi float [ 0.000000e+00, %8 ], [ %176, %._crit_edge ]
  %51 = phi float [ 0.000000e+00, %8 ], [ %177, %._crit_edge ]
  %52 = phi float [ 0.000000e+00, %8 ], [ %170, %._crit_edge ]
  %53 = phi float [ 0.000000e+00, %8 ], [ %171, %._crit_edge ]
  %54 = phi float [ 0.000000e+00, %8 ], [ %172, %._crit_edge ]
  %55 = phi float [ 0.000000e+00, %8 ], [ %173, %._crit_edge ]
  %56 = phi <4 x float> [ zeroinitializer, %8 ], [ %169, %._crit_edge ]
  %57 = lshr exact i64 %indvars.iv, 10, !dbg !18
  %58 = or disjoint i64 %indvars.iv, %39, !dbg !19
  %59 = getelementptr float, ptr addrspace(1) %0, i64 %58, !dbg !20
  %60 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %59, i1 %10, i32 0, i1 %10, i32 0, i1 %10, i32 0, i1 %10, i32 0, i1 %10) #5, !dbg !21
  %61 = extractvalue { i32, i32, i32, i32 } %60, 0, !dbg !21
  %62 = extractvalue { i32, i32, i32, i32 } %60, 1, !dbg !21
  %63 = extractvalue { i32, i32, i32, i32 } %60, 2, !dbg !21
  %64 = extractvalue { i32, i32, i32, i32 } %60, 3, !dbg !21
  tail call void @llvm.nvvm.barrier0(), !dbg !21
  %65 = insertelement <1 x i32> poison, i32 %61, i64 0, !dbg !21
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %22, <1 x i32> %65, i1 true) #5, !dbg !21
  %66 = insertelement <1 x i32> poison, i32 %62, i64 0, !dbg !21
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %25, <1 x i32> %66, i1 true) #5, !dbg !21
  %67 = insertelement <1 x i32> poison, i32 %63, i64 0, !dbg !21
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %27, <1 x i32> %67, i1 true) #5, !dbg !21
  %68 = insertelement <1 x i32> poison, i32 %64, i64 0, !dbg !21
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %29, <1 x i32> %68, i1 true) #5, !dbg !21
  tail call void @llvm.nvvm.barrier0(), !dbg !21
  %69 = load float, ptr addrspace(3) %30, align 8, !dbg !21
  %70 = load float, ptr addrspace(3) %31, align 8, !dbg !21
  %71 = load float, ptr addrspace(3) %32, align 8, !dbg !21
  %72 = load float, ptr addrspace(3) %33, align 8, !dbg !21
  %73 = or disjoint i64 %57, %40, !dbg !22
  %74 = or disjoint i64 %73, 1, !dbg !22
  %75 = getelementptr float, ptr addrspace(1) %2, i64 %73, !dbg !23
  %76 = getelementptr float, ptr addrspace(1) %2, i64 %74, !dbg !23
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %75, i1 %10, i32 0, i1 %10) #5, !dbg !24
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %75, i1 %10, i32 0, i1 %10) #5, !dbg !24
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %76, i1 %10, i32 0, i1 %10) #5, !dbg !24
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %76, i1 %10, i32 0, i1 %10) #5, !dbg !24
  %81 = getelementptr float, ptr addrspace(1) %3, i64 %58, !dbg !25
  %82 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %81, i1 %10, i32 0, i1 %10, i32 0, i1 %10, i32 0, i1 %10, i32 0, i1 %10) #5, !dbg !26
  %83 = extractvalue { i32, i32, i32, i32 } %82, 0, !dbg !26
  %84 = extractvalue { i32, i32, i32, i32 } %82, 1, !dbg !26
  %85 = extractvalue { i32, i32, i32, i32 } %82, 2, !dbg !26
  %86 = extractvalue { i32, i32, i32, i32 } %82, 3, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %87 = insertelement <1 x i32> poison, i32 %83, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %22, <1 x i32> %87, i1 true) #5, !dbg !26
  %88 = insertelement <1 x i32> poison, i32 %84, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %25, <1 x i32> %88, i1 true) #5, !dbg !26
  %89 = insertelement <1 x i32> poison, i32 %85, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %27, <1 x i32> %89, i1 true) #5, !dbg !26
  %90 = insertelement <1 x i32> poison, i32 %86, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %29, <1 x i32> %90, i1 true) #5, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %91 = load float, ptr addrspace(3) %30, align 8, !dbg !26
  %92 = load float, ptr addrspace(3) %31, align 8, !dbg !26
  %93 = load float, ptr addrspace(3) %32, align 8, !dbg !26
  %94 = load float, ptr addrspace(3) %33, align 8, !dbg !26
  %95 = getelementptr float, ptr addrspace(1) %4, i64 %73, !dbg !27
  %96 = getelementptr float, ptr addrspace(1) %4, i64 %74, !dbg !27
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %95, i1 %10, i32 0, i1 %10) #5, !dbg !28
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %95, i1 %10, i32 0, i1 %10) #5, !dbg !28
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %96, i1 %10, i32 0, i1 %10) #5, !dbg !28
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %96, i1 %10, i32 0, i1 %10) #5, !dbg !28
  %101 = insertelement <4 x i32> poison, i32 %77, i64 0, !dbg !24
  %102 = insertelement <4 x i32> %101, i32 %78, i64 1, !dbg !24
  %103 = insertelement <4 x i32> %102, i32 %79, i64 2, !dbg !24
  %104 = insertelement <4 x i32> %103, i32 %80, i64 3, !dbg !24
  %105 = bitcast <4 x i32> %104 to <4 x float>, !dbg !24
  %106 = insertelement <4 x i32> poison, i32 %97, i64 0, !dbg !28
  %107 = insertelement <4 x i32> %106, i32 %98, i64 1, !dbg !28
  %108 = insertelement <4 x i32> %107, i32 %99, i64 2, !dbg !28
  %109 = insertelement <4 x i32> %108, i32 %100, i64 3, !dbg !28
  %110 = bitcast <4 x i32> %109 to <4 x float>, !dbg !28
  %111 = insertelement <4 x float> poison, float %69, i64 0, !dbg !29
  %112 = insertelement <4 x float> %111, float %70, i64 1, !dbg !29
  %113 = insertelement <4 x float> %112, float %71, i64 2, !dbg !29
  %114 = insertelement <4 x float> %113, float %72, i64 3, !dbg !29
  %115 = fadd <4 x float> %114, %105, !dbg !29
  %116 = insertelement <4 x float> poison, float %91, i64 0, !dbg !30
  %117 = insertelement <4 x float> %116, float %92, i64 1, !dbg !30
  %118 = insertelement <4 x float> %117, float %93, i64 2, !dbg !30
  %119 = insertelement <4 x float> %118, float %94, i64 3, !dbg !30
  %120 = fadd <4 x float> %119, %110, !dbg !30
  %121 = fadd <4 x float> %115, %120, !dbg !31
  br i1 %47, label %._crit_edge, label %122, !dbg !32

122:                                              ; preds = %46
  %123 = fsub <4 x float> %121, %56, !dbg !36
  %124 = extractelement <4 x float> %123, i64 0, !dbg !36
  %125 = fsub <4 x float> %121, %56, !dbg !36
  %126 = extractelement <4 x float> %125, i64 1, !dbg !36
  %127 = fsub <4 x float> %121, %56, !dbg !36
  %128 = extractelement <4 x float> %127, i64 2, !dbg !36
  %129 = fsub <4 x float> %121, %56, !dbg !36
  %130 = extractelement <4 x float> %129, i64 3, !dbg !36
  %131 = fadd float %48, 1.000000e+00, !dbg !37
  %132 = fadd float %49, 1.000000e+00, !dbg !37
  %133 = fadd float %50, 1.000000e+00, !dbg !37
  %134 = fadd float %51, 1.000000e+00, !dbg !37
  %135 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %124, float %131) #5, !dbg !38
  %136 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %126, float %132) #5, !dbg !38
  %137 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %128, float %133) #5, !dbg !38
  %138 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %130, float %134) #5, !dbg !38
  %139 = insertelement <4 x float> poison, float %135, i64 0, !dbg !39
  %140 = insertelement <4 x float> %139, float %136, i64 1, !dbg !39
  %141 = insertelement <4 x float> %140, float %137, i64 2, !dbg !39
  %142 = insertelement <4 x float> %141, float %138, i64 3, !dbg !39
  %143 = fadd <4 x float> %56, %142, !dbg !39
  %144 = fsub <4 x float> %121, %143, !dbg !40
  %145 = fsub <4 x float> %121, %143, !dbg !40
  %146 = fsub <4 x float> %121, %143, !dbg !40
  %147 = fsub <4 x float> %121, %143, !dbg !40
  %148 = fmul <4 x float> %123, %144, !dbg !41
  %149 = extractelement <4 x float> %148, i64 0, !dbg !41
  %150 = fmul <4 x float> %125, %145, !dbg !41
  %151 = extractelement <4 x float> %150, i64 1, !dbg !41
  %152 = fmul <4 x float> %127, %146, !dbg !41
  %153 = extractelement <4 x float> %152, i64 2, !dbg !41
  %154 = fmul <4 x float> %129, %147, !dbg !41
  %155 = extractelement <4 x float> %154, i64 3, !dbg !41
  %156 = fadd float %52, %149, !dbg !42
  %157 = fadd float %53, %151, !dbg !42
  %158 = fadd float %54, %153, !dbg !42
  %159 = fadd float %55, %155, !dbg !42
  br label %._crit_edge, !dbg !32

._crit_edge:                                      ; preds = %46, %122
  %160 = phi float [ %156, %122 ], [ 0.000000e+00, %46 ], !dbg !35
  %161 = phi float [ %157, %122 ], [ 0.000000e+00, %46 ], !dbg !35
  %162 = phi float [ %158, %122 ], [ 0.000000e+00, %46 ], !dbg !35
  %163 = phi float [ %159, %122 ], [ 0.000000e+00, %46 ], !dbg !35
  %164 = phi float [ %131, %122 ], [ 1.000000e+00, %46 ], !dbg !35
  %165 = phi float [ %132, %122 ], [ 1.000000e+00, %46 ], !dbg !35
  %166 = phi float [ %133, %122 ], [ 1.000000e+00, %46 ], !dbg !35
  %167 = phi float [ %134, %122 ], [ 1.000000e+00, %46 ], !dbg !35
  %168 = phi <4 x float> [ %143, %122 ], [ %121, %46 ]
  %169 = select <4 x i1> %45, <4 x float> %168, <4 x float> %56, !dbg !17
  %170 = select i1 %10, float %160, float %52, !dbg !43
  %171 = select i1 %10, float %161, float %53, !dbg !43
  %172 = select i1 %10, float %162, float %54, !dbg !43
  %173 = select i1 %10, float %163, float %55, !dbg !43
  %174 = select i1 %10, float %164, float %48, !dbg !44
  %175 = select i1 %10, float %165, float %49, !dbg !44
  %176 = select i1 %10, float %166, float %50, !dbg !44
  %177 = select i1 %10, float %167, float %51, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %178 = extractelement <4 x float> %121, i64 0, !dbg !45
  %179 = bitcast float %178 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %34, <1 x i32> %179, i1 true) #5, !dbg !45
  %180 = extractelement <4 x float> %121, i64 1, !dbg !45
  %181 = bitcast float %180 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %35, <1 x i32> %181, i1 true) #5, !dbg !45
  %182 = extractelement <4 x float> %121, i64 2, !dbg !45
  %183 = bitcast float %182 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %36, <1 x i32> %183, i1 true) #5, !dbg !45
  %184 = extractelement <4 x float> %121, i64 3, !dbg !45
  %185 = bitcast float %184 to <1 x i32>, !dbg !45
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %37, <1 x i32> %185, i1 true) #5, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %.extract = load i32, ptr addrspace(3) %38, align 16, !dbg !45
  %.extract15 = load i32, ptr addrspace(3) %41, align 4, !dbg !45
  %.extract16 = load i32, ptr addrspace(3) %42, align 8, !dbg !45
  %.extract17 = load i32, ptr addrspace(3) %43, align 4, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract15, i32 %.extract16, i32 %.extract17, ptr addrspace(1) %59, i1 %10) #5, !dbg !45
  br i1 %47, label %46, label %186, !dbg !16

186:                                              ; preds = %._crit_edge
  %187 = lshr i32 %11, 5, !dbg !12
  %188 = and i32 %11, 31, !dbg !12
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %189 = extractelement <4 x float> %169, i64 0, !dbg !48
  %190 = extractelement <4 x float> %169, i64 1, !dbg !48
  %191 = fsub float %190, %189, !dbg !48
  %192 = fadd float %174, %175, !dbg !50
  %193 = fcmp oeq float %192, 0.000000e+00, !dbg !51
  %194 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %175, float %192) #5, !dbg !52
  %195 = select i1 %193, float 0.000000e+00, float %194, !dbg !53
  %196 = fmul float %191, %195, !dbg !54
  %197 = fadd float %189, %196, !dbg !55
  %198 = fadd float %170, %171, !dbg !56
  %199 = fmul float %191, %191, !dbg !57
  %200 = fmul float %199, %174, !dbg !58
  %201 = fmul float %200, %195, !dbg !59
  %202 = fadd float %198, %201, !dbg !60
  %203 = extractelement <4 x float> %169, i64 2, !dbg !48
  %204 = fsub float %203, %197, !dbg !48
  %205 = fadd float %176, %192, !dbg !50
  %206 = fcmp oeq float %205, 0.000000e+00, !dbg !51
  %207 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %176, float %205) #5, !dbg !52
  %208 = select i1 %206, float 0.000000e+00, float %207, !dbg !53
  %209 = fmul float %208, %204, !dbg !54
  %210 = fadd float %197, %209, !dbg !55
  %211 = fadd float %172, %202, !dbg !56
  %212 = fmul float %204, %204, !dbg !57
  %213 = fmul float %192, %212, !dbg !58
  %214 = fmul float %208, %213, !dbg !59
  %215 = fadd float %211, %214, !dbg !60
  %216 = extractelement <4 x float> %169, i64 3, !dbg !48
  %217 = fsub float %216, %210, !dbg !48
  %218 = fadd float %177, %205, !dbg !50
  %219 = fcmp oeq float %218, 0.000000e+00, !dbg !51
  %220 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %177, float %218) #5, !dbg !52
  %221 = select i1 %219, float 0.000000e+00, float %220, !dbg !53
  %222 = fmul float %221, %217, !dbg !54
  %223 = fadd float %210, %222, !dbg !55
  %224 = fadd float %173, %215, !dbg !56
  %225 = fmul float %217, %217, !dbg !57
  %226 = fmul float %205, %225, !dbg !58
  %227 = fmul float %221, %226, !dbg !59
  %228 = fadd float %224, %227, !dbg !60
  %229 = bitcast float %223 to i32, !dbg !46
  %230 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %229, i32 16, i32 31), !dbg !46
  %231 = bitcast i32 %230 to float, !dbg !46
  %232 = bitcast float %228 to i32, !dbg !46
  %233 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %232, i32 16, i32 31), !dbg !46
  %234 = bitcast i32 %233 to float, !dbg !46
  %235 = bitcast float %218 to i32, !dbg !46
  %236 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %235, i32 16, i32 31), !dbg !46
  %237 = bitcast i32 %236 to float, !dbg !46
  %238 = fsub float %231, %223, !dbg !48
  %239 = fadd float %218, %237, !dbg !50
  %240 = fcmp oeq float %239, 0.000000e+00, !dbg !51
  %241 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %237, float %239) #5, !dbg !52
  %242 = select i1 %240, float 0.000000e+00, float %241, !dbg !53
  %243 = fmul float %242, %238, !dbg !54
  %244 = fadd float %223, %243, !dbg !55
  %245 = fadd float %228, %234, !dbg !56
  %246 = fmul float %238, %238, !dbg !57
  %247 = fmul float %218, %246, !dbg !58
  %248 = fmul float %242, %247, !dbg !59
  %249 = fadd float %245, %248, !dbg !60
  %250 = bitcast float %244 to i32, !dbg !46
  %251 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %250, i32 8, i32 31), !dbg !46
  %252 = bitcast i32 %251 to float, !dbg !46
  %253 = bitcast float %249 to i32, !dbg !46
  %254 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %253, i32 8, i32 31), !dbg !46
  %255 = bitcast i32 %254 to float, !dbg !46
  %256 = bitcast float %239 to i32, !dbg !46
  %257 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %256, i32 8, i32 31), !dbg !46
  %258 = bitcast i32 %257 to float, !dbg !46
  %259 = fsub float %252, %244, !dbg !48
  %260 = fadd float %239, %258, !dbg !50
  %261 = fcmp oeq float %260, 0.000000e+00, !dbg !51
  %262 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %258, float %260) #5, !dbg !52
  %263 = select i1 %261, float 0.000000e+00, float %262, !dbg !53
  %264 = fmul float %259, %263, !dbg !54
  %265 = fadd float %244, %264, !dbg !55
  %266 = fadd float %249, %255, !dbg !56
  %267 = fmul float %259, %259, !dbg !57
  %268 = fmul float %239, %267, !dbg !58
  %269 = fmul float %263, %268, !dbg !59
  %270 = fadd float %266, %269, !dbg !60
  %271 = bitcast float %265 to i32, !dbg !46
  %272 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %271, i32 4, i32 31), !dbg !46
  %273 = bitcast i32 %272 to float, !dbg !46
  %274 = bitcast float %270 to i32, !dbg !46
  %275 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %274, i32 4, i32 31), !dbg !46
  %276 = bitcast i32 %275 to float, !dbg !46
  %277 = bitcast float %260 to i32, !dbg !46
  %278 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %277, i32 4, i32 31), !dbg !46
  %279 = bitcast i32 %278 to float, !dbg !46
  %280 = fsub float %273, %265, !dbg !48
  %281 = fadd float %260, %279, !dbg !50
  %282 = fcmp oeq float %281, 0.000000e+00, !dbg !51
  %283 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %279, float %281) #5, !dbg !52
  %284 = select i1 %282, float 0.000000e+00, float %283, !dbg !53
  %285 = fmul float %280, %284, !dbg !54
  %286 = fadd float %265, %285, !dbg !55
  %287 = fadd float %270, %276, !dbg !56
  %288 = fmul float %280, %280, !dbg !57
  %289 = fmul float %260, %288, !dbg !58
  %290 = fmul float %284, %289, !dbg !59
  %291 = fadd float %287, %290, !dbg !60
  %292 = bitcast float %286 to i32, !dbg !46
  %293 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %292, i32 2, i32 31), !dbg !46
  %294 = bitcast i32 %293 to float, !dbg !46
  %295 = bitcast float %291 to i32, !dbg !46
  %296 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %295, i32 2, i32 31), !dbg !46
  %297 = bitcast i32 %296 to float, !dbg !46
  %298 = bitcast float %281 to i32, !dbg !46
  %299 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %298, i32 2, i32 31), !dbg !46
  %300 = bitcast i32 %299 to float, !dbg !46
  %301 = fsub float %294, %286, !dbg !48
  %302 = fadd float %281, %300, !dbg !50
  %303 = fcmp oeq float %302, 0.000000e+00, !dbg !51
  %304 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %300, float %302) #5, !dbg !52
  %305 = select i1 %303, float 0.000000e+00, float %304, !dbg !53
  %306 = fmul float %301, %305, !dbg !54
  %307 = fadd float %286, %306, !dbg !55
  %308 = fadd float %291, %297, !dbg !56
  %309 = fmul float %301, %301, !dbg !57
  %310 = fmul float %281, %309, !dbg !58
  %311 = fmul float %305, %310, !dbg !59
  %312 = fadd float %308, %311, !dbg !60
  %313 = bitcast float %307 to i32, !dbg !46
  %314 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %313, i32 1, i32 31), !dbg !46
  %315 = bitcast i32 %314 to float, !dbg !46
  %316 = bitcast float %312 to i32, !dbg !46
  %317 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %316, i32 1, i32 31), !dbg !46
  %318 = bitcast i32 %317 to float, !dbg !46
  %319 = bitcast float %302 to i32, !dbg !46
  %320 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %319, i32 1, i32 31), !dbg !46
  %321 = bitcast i32 %320 to float, !dbg !46
  %322 = fsub float %315, %307, !dbg !48
  %323 = fadd float %302, %321, !dbg !50
  %324 = fcmp oeq float %323, 0.000000e+00, !dbg !51
  %325 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %321, float %323) #5, !dbg !52
  %326 = select i1 %324, float 0.000000e+00, float %325, !dbg !53
  %327 = fmul float %322, %326, !dbg !54
  %328 = fadd float %307, %327, !dbg !55
  %329 = fadd float %312, %318, !dbg !56
  %330 = fmul float %322, %322, !dbg !57
  %331 = fmul float %302, %330, !dbg !58
  %332 = fmul float %326, %331, !dbg !59
  %333 = fadd float %329, %332, !dbg !60
  %334 = icmp eq i32 %188, 0, !dbg !46
  %335 = and i32 %187, 15, !dbg !46
  %336 = getelementptr float, ptr addrspace(3) @global_smem, i32 %335, !dbg !46
  %337 = bitcast float %328 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %336, <1 x i32> %337, i1 %334) #5, !dbg !46
  %338 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %335, !dbg !46
  %339 = bitcast float %333 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %338, <1 x i32> %339, i1 %334) #5, !dbg !46
  %340 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %335, !dbg !46
  %341 = bitcast float %323 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %340, <1 x i32> %341, i1 %334) #5, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %342 = icmp slt i32 %11, 16, !dbg !46
  %343 = getelementptr float, ptr addrspace(3) @global_smem, i32 %11, !dbg !46
  %344 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %343, i1 %342) #5, !dbg !46
  %345 = bitcast i32 %344 to float, !dbg !46
  %346 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %11, !dbg !46
  %347 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %346, i1 %342) #5, !dbg !46
  %348 = bitcast i32 %347 to float, !dbg !46
  %349 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %11, !dbg !46
  %350 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %349, i1 %342) #5, !dbg !46
  %351 = bitcast i32 %350 to float, !dbg !46
  %352 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %344, i32 8, i32 31), !dbg !46
  %353 = bitcast i32 %352 to float, !dbg !46
  %354 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %347, i32 8, i32 31), !dbg !46
  %355 = bitcast i32 %354 to float, !dbg !46
  %356 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %350, i32 8, i32 31), !dbg !46
  %357 = bitcast i32 %356 to float, !dbg !46
  %358 = fsub float %353, %345, !dbg !48
  %359 = fadd float %351, %357, !dbg !50
  %360 = fcmp oeq float %359, 0.000000e+00, !dbg !51
  %361 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %357, float %359) #5, !dbg !52
  %362 = select i1 %360, float 0.000000e+00, float %361, !dbg !53
  %363 = fmul float %358, %362, !dbg !54
  %364 = fadd float %363, %345, !dbg !55
  %365 = fadd float %348, %355, !dbg !56
  %366 = fmul float %358, %358, !dbg !57
  %367 = fmul float %366, %351, !dbg !58
  %368 = fmul float %367, %362, !dbg !59
  %369 = fadd float %365, %368, !dbg !60
  %370 = bitcast float %364 to i32, !dbg !46
  %371 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %370, i32 4, i32 31), !dbg !46
  %372 = bitcast i32 %371 to float, !dbg !46
  %373 = bitcast float %369 to i32, !dbg !46
  %374 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %373, i32 4, i32 31), !dbg !46
  %375 = bitcast i32 %374 to float, !dbg !46
  %376 = bitcast float %359 to i32, !dbg !46
  %377 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %376, i32 4, i32 31), !dbg !46
  %378 = bitcast i32 %377 to float, !dbg !46
  %379 = fsub float %372, %364, !dbg !48
  %380 = fadd float %359, %378, !dbg !50
  %381 = fcmp oeq float %380, 0.000000e+00, !dbg !51
  %382 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %378, float %380) #5, !dbg !52
  %383 = select i1 %381, float 0.000000e+00, float %382, !dbg !53
  %384 = fmul float %379, %383, !dbg !54
  %385 = fadd float %364, %384, !dbg !55
  %386 = fadd float %369, %375, !dbg !56
  %387 = fmul float %379, %379, !dbg !57
  %388 = fmul float %359, %387, !dbg !58
  %389 = fmul float %383, %388, !dbg !59
  %390 = fadd float %386, %389, !dbg !60
  %391 = bitcast float %385 to i32, !dbg !46
  %392 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %391, i32 2, i32 31), !dbg !46
  %393 = bitcast i32 %392 to float, !dbg !46
  %394 = bitcast float %390 to i32, !dbg !46
  %395 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %394, i32 2, i32 31), !dbg !46
  %396 = bitcast i32 %395 to float, !dbg !46
  %397 = bitcast float %380 to i32, !dbg !46
  %398 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %397, i32 2, i32 31), !dbg !46
  %399 = bitcast i32 %398 to float, !dbg !46
  %400 = fsub float %393, %385, !dbg !48
  %401 = fadd float %380, %399, !dbg !50
  %402 = fcmp oeq float %401, 0.000000e+00, !dbg !51
  %403 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %399, float %401) #5, !dbg !52
  %404 = select i1 %402, float 0.000000e+00, float %403, !dbg !53
  %405 = fmul float %400, %404, !dbg !54
  %406 = fadd float %385, %405, !dbg !55
  %407 = fadd float %390, %396, !dbg !56
  %408 = fmul float %400, %400, !dbg !57
  %409 = fmul float %380, %408, !dbg !58
  %410 = fmul float %404, %409, !dbg !59
  %411 = fadd float %407, %410, !dbg !60
  %412 = bitcast float %406 to i32, !dbg !46
  %413 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %412, i32 1, i32 31), !dbg !46
  %414 = bitcast i32 %413 to float, !dbg !46
  %415 = bitcast float %411 to i32, !dbg !46
  %416 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %415, i32 1, i32 31), !dbg !46
  %417 = bitcast i32 %416 to float, !dbg !46
  %418 = bitcast float %401 to i32, !dbg !46
  %419 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %418, i32 1, i32 31), !dbg !46
  %420 = bitcast i32 %419 to float, !dbg !46
  %421 = fsub float %414, %406, !dbg !48
  %422 = fadd float %401, %420, !dbg !50
  %423 = fcmp oeq float %422, 0.000000e+00, !dbg !51
  %424 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %420, float %422) #5, !dbg !52
  %425 = select i1 %423, float 0.000000e+00, float %424, !dbg !53
  %426 = fmul float %421, %425, !dbg !54
  %427 = fadd float %406, %426, !dbg !55
  %428 = fadd float %411, %417, !dbg !56
  %429 = fmul float %421, %421, !dbg !57
  %430 = fmul float %401, %429, !dbg !58
  %431 = fmul float %425, %430, !dbg !59
  %432 = fadd float %428, %431, !dbg !60
  %433 = and i32 %11, 15, !dbg !46
  %434 = icmp eq i32 %433, 0, !dbg !46
  %435 = and i1 %342, %434, !dbg !46
  %436 = bitcast float %427 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %343, <1 x i32> %436, i1 %435) #5, !dbg !46
  %437 = bitcast float %432 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %346, <1 x i32> %437, i1 %435) #5, !dbg !46
  %438 = bitcast float %422 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %349, <1 x i32> %438, i1 %435) #5, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %439 = load i32, ptr addrspace(3) @global_smem, align 16, !dbg !46
  %440 = load float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), align 16, !dbg !46
  %441 = sext i32 %9 to i64, !dbg !61
  %442 = getelementptr float, ptr addrspace(1) %5, i64 %441, !dbg !61
  %443 = icmp eq i32 %12, 0, !dbg !62
  %444 = and i1 %443, %10, !dbg !62
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %439, ptr addrspace(1) %442, i1 %444) #5, !dbg !62
  %445 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %440, float 4.096000e+03) #5, !dbg !63
  %446 = fadd float %445, 0x3EE4F8B580000000, !dbg !64
  %447 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !65
  %.not.i = icmp eq i32 %447, 0, !dbg !65
  br i1 %.not.i, label %450, label %448, !dbg !65

448:                                              ; preds = %186
  %449 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %446), !dbg !65
  br label %__nv_rsqrtf.exit, !dbg !65

450:                                              ; preds = %186
  %451 = tail call float @llvm.nvvm.rsqrt.approx.f(float %446), !dbg !65
  br label %__nv_rsqrtf.exit, !dbg !65

__nv_rsqrtf.exit:                                 ; preds = %448, %450
  %.0.i = phi float [ %449, %448 ], [ %451, %450 ], !dbg !65
  tail call void @llvm.nvvm.barrier0(), !dbg !66
  %452 = getelementptr float, ptr addrspace(1) %1, i64 %441, !dbg !67
  %453 = bitcast float %.0.i to i32, !dbg !68
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %453, ptr addrspace(1) %452, i1 %444) #5, !dbg !68
  ret void, !dbg !69
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "caiun5hiwkrluunf3gof6blagazaklxt6425qyg3zkjdey5ltjgf.py", directory: "inductor_cache/ai")
!4 = !{ptr @triton_red_fused_add_convolution_native_group_norm_59, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_add_convolution_native_group_norm_59, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_add_convolution_native_group_norm_59", linkageName: "triton_red_fused_add_convolution_native_group_norm_59", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 33, scope: !7)
!13 = !DILocation(line: 27, column: 19, scope: !7)
!14 = !DILocation(line: 36, column: 48, scope: !7)
!15 = !DILocation(line: 37, column: 41, scope: !7)
!16 = !DILocation(line: 31, column: 36, scope: !7)
!17 = !DILocation(line: 47, column: 60, scope: !7)
!18 = !DILocation(line: 35, column: 23, scope: !7)
!19 = !DILocation(line: 36, column: 43, scope: !7)
!20 = !DILocation(line: 36, column: 38, scope: !7)
!21 = !DILocation(line: 36, column: 53, scope: !7)
!22 = !DILocation(line: 37, column: 39, scope: !7)
!23 = !DILocation(line: 37, column: 34, scope: !7)
!24 = !DILocation(line: 37, column: 46, scope: !7)
!25 = !DILocation(line: 38, column: 34, scope: !7)
!26 = !DILocation(line: 38, column: 49, scope: !7)
!27 = !DILocation(line: 39, column: 34, scope: !7)
!28 = !DILocation(line: 39, column: 46, scope: !7)
!29 = !DILocation(line: 40, column: 22, scope: !7)
!30 = !DILocation(line: 41, column: 22, scope: !7)
!31 = !DILocation(line: 42, column: 22, scope: !7)
!32 = !DILocation(line: 178, column: 7, scope: !33, inlinedAt: !35)
!33 = distinct !DILexicalBlockFile(scope: !7, file: !34, discriminator: 0)
!34 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!35 = !DILocation(line: 45, column: 51, scope: !7)
!36 = !DILocation(line: 183, column: 24, scope: !33, inlinedAt: !35)
!37 = !DILocation(line: 184, column: 30, scope: !33, inlinedAt: !35)
!38 = !DILocation(line: 185, column: 34, scope: !33, inlinedAt: !35)
!39 = !DILocation(line: 185, column: 26, scope: !33, inlinedAt: !35)
!40 = !DILocation(line: 186, column: 39, scope: !33, inlinedAt: !35)
!41 = !DILocation(line: 186, column: 31, scope: !33, inlinedAt: !35)
!42 = !DILocation(line: 186, column: 22, scope: !33, inlinedAt: !35)
!43 = !DILocation(line: 48, column: 56, scope: !7)
!44 = !DILocation(line: 49, column: 64, scope: !7)
!45 = !DILocation(line: 50, column: 53, scope: !7)
!46 = !DILocation(line: 204, column: 46, scope: !33, inlinedAt: !47)
!47 = !DILocation(line: 52, column: 41, scope: !7)
!48 = !DILocation(line: 192, column: 21, scope: !49, inlinedAt: !47)
!49 = distinct !DILexicalBlockFile(scope: !33, file: !34, discriminator: 0)
!50 = !DILocation(line: 193, column: 28, scope: !49, inlinedAt: !47)
!51 = !DILocation(line: 194, column: 39, scope: !49, inlinedAt: !47)
!52 = !DILocation(line: 194, column: 60, scope: !49, inlinedAt: !47)
!53 = !DILocation(line: 194, column: 49, scope: !49, inlinedAt: !47)
!54 = !DILocation(line: 196, column: 25, scope: !49, inlinedAt: !47)
!55 = !DILocation(line: 196, column: 17, scope: !49, inlinedAt: !47)
!56 = !DILocation(line: 197, column: 15, scope: !49, inlinedAt: !47)
!57 = !DILocation(line: 197, column: 30, scope: !49, inlinedAt: !47)
!58 = !DILocation(line: 197, column: 38, scope: !49, inlinedAt: !47)
!59 = !DILocation(line: 197, column: 49, scope: !49, inlinedAt: !47)
!60 = !DILocation(line: 197, column: 22, scope: !49, inlinedAt: !47)
!61 = !DILocation(line: 57, column: 25, scope: !7)
!62 = !DILocation(line: 57, column: 36, scope: !7)
!63 = !DILocation(line: 59, column: 19, scope: !7)
!64 = !DILocation(line: 61, column: 20, scope: !7)
!65 = !DILocation(line: 62, column: 28, scope: !7)
!66 = !DILocation(line: 63, column: 4, scope: !7)
!67 = !DILocation(line: 64, column: 28, scope: !7)
!68 = !DILocation(line: 64, column: 40, scope: !7)
!69 = !DILocation(line: 64, column: 4, scope: !7)
