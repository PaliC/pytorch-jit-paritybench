; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_red_fused_mv_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %7 = icmp slt i32 %6, 100, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 2044, !dbg !12
  %11 = shl i32 %6, 13, !dbg !13
  %12 = zext nneg i32 %10 to i64, !dbg !14
  %13 = sext i32 %11 to i64, !dbg !14
  %14 = or disjoint i64 %12, %13, !dbg !15
  %15 = getelementptr float, ptr addrspace(1) %0, i64 %14, !dbg !16
  %16 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %15, i1 %7, i32 0, i1 %7, i32 0, i1 %7, i32 0, i1 %7, i32 0, i1 %7) #3, !dbg !17
  %17 = extractvalue { i32, i32, i32, i32 } %16, 0, !dbg !17
  %18 = extractvalue { i32, i32, i32, i32 } %16, 1, !dbg !17
  %19 = extractvalue { i32, i32, i32, i32 } %16, 2, !dbg !17
  %20 = extractvalue { i32, i32, i32, i32 } %16, 3, !dbg !17
  %21 = getelementptr float, ptr addrspace(1) %1, i64 %12, !dbg !18
  %22 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %21, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !19
  %23 = extractvalue { i32, i32, i32, i32 } %22, 0, !dbg !19
  %24 = extractvalue { i32, i32, i32, i32 } %22, 1, !dbg !19
  %25 = extractvalue { i32, i32, i32, i32 } %22, 2, !dbg !19
  %26 = extractvalue { i32, i32, i32, i32 } %22, 3, !dbg !19
  %27 = or disjoint i64 %12, 2048, !dbg !20
  %28 = or disjoint i64 %27, %13, !dbg !15
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !16
  %30 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %29, i1 %7, i32 0, i1 %7, i32 0, i1 %7, i32 0, i1 %7, i32 0, i1 %7) #3, !dbg !17
  %31 = extractvalue { i32, i32, i32, i32 } %30, 0, !dbg !17
  %32 = extractvalue { i32, i32, i32, i32 } %30, 1, !dbg !17
  %33 = extractvalue { i32, i32, i32, i32 } %30, 2, !dbg !17
  %34 = extractvalue { i32, i32, i32, i32 } %30, 3, !dbg !17
  %35 = getelementptr float, ptr addrspace(1) %1, i64 %27, !dbg !18
  %36 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %35, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !19
  %37 = extractvalue { i32, i32, i32, i32 } %36, 0, !dbg !19
  %38 = extractvalue { i32, i32, i32, i32 } %36, 1, !dbg !19
  %39 = extractvalue { i32, i32, i32, i32 } %36, 2, !dbg !19
  %40 = extractvalue { i32, i32, i32, i32 } %36, 3, !dbg !19
  %41 = or disjoint i64 %12, 4096, !dbg !20
  %42 = or disjoint i64 %41, %13, !dbg !15
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !16
  %44 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %43, i1 %7, i32 0, i1 %7, i32 0, i1 %7, i32 0, i1 %7, i32 0, i1 %7) #3, !dbg !17
  %45 = extractvalue { i32, i32, i32, i32 } %44, 0, !dbg !17
  %46 = extractvalue { i32, i32, i32, i32 } %44, 1, !dbg !17
  %47 = extractvalue { i32, i32, i32, i32 } %44, 2, !dbg !17
  %48 = extractvalue { i32, i32, i32, i32 } %44, 3, !dbg !17
  %49 = getelementptr float, ptr addrspace(1) %1, i64 %41, !dbg !18
  %50 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %49, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !19
  %51 = extractvalue { i32, i32, i32, i32 } %50, 0, !dbg !19
  %52 = extractvalue { i32, i32, i32, i32 } %50, 1, !dbg !19
  %53 = extractvalue { i32, i32, i32, i32 } %50, 2, !dbg !19
  %54 = extractvalue { i32, i32, i32, i32 } %50, 3, !dbg !19
  %55 = or disjoint i64 %12, 6144, !dbg !20
  %56 = or disjoint i64 %55, %13, !dbg !15
  %57 = getelementptr float, ptr addrspace(1) %0, i64 %56, !dbg !16
  %58 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %57, i1 %7, i32 0, i1 %7, i32 0, i1 %7, i32 0, i1 %7, i32 0, i1 %7) #3, !dbg !17
  %59 = extractvalue { i32, i32, i32, i32 } %58, 0, !dbg !17
  %60 = extractvalue { i32, i32, i32, i32 } %58, 1, !dbg !17
  %61 = extractvalue { i32, i32, i32, i32 } %58, 2, !dbg !17
  %62 = extractvalue { i32, i32, i32, i32 } %58, 3, !dbg !17
  %63 = getelementptr float, ptr addrspace(1) %1, i64 %55, !dbg !18
  %64 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %63, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !19
  %65 = extractvalue { i32, i32, i32, i32 } %64, 0, !dbg !19
  %66 = extractvalue { i32, i32, i32, i32 } %64, 1, !dbg !19
  %67 = extractvalue { i32, i32, i32, i32 } %64, 2, !dbg !19
  %68 = extractvalue { i32, i32, i32, i32 } %64, 3, !dbg !19
  %69 = insertelement <2 x i32> poison, i32 %17, i64 0, !dbg !17
  %70 = insertelement <2 x i32> %69, i32 %18, i64 1, !dbg !17
  %71 = bitcast <2 x i32> %70 to <2 x float>, !dbg !17
  %72 = insertelement <2 x i32> poison, i32 %23, i64 0, !dbg !19
  %73 = insertelement <2 x i32> %72, i32 %24, i64 1, !dbg !19
  %74 = bitcast <2 x i32> %73 to <2 x float>, !dbg !19
  %75 = fmul <2 x float> %71, %74, !dbg !21
  %76 = fadd <2 x float> %75, zeroinitializer, !dbg !22
  %77 = insertelement <2 x i32> poison, i32 %31, i64 0, !dbg !17
  %78 = insertelement <2 x i32> %77, i32 %32, i64 1, !dbg !17
  %79 = bitcast <2 x i32> %78 to <2 x float>, !dbg !17
  %80 = insertelement <2 x i32> poison, i32 %37, i64 0, !dbg !19
  %81 = insertelement <2 x i32> %80, i32 %38, i64 1, !dbg !19
  %82 = bitcast <2 x i32> %81 to <2 x float>, !dbg !19
  %83 = fmul <2 x float> %79, %82, !dbg !21
  %84 = fadd <2 x float> %76, %83, !dbg !22
  %85 = insertelement <2 x i32> poison, i32 %45, i64 0, !dbg !17
  %86 = insertelement <2 x i32> %85, i32 %46, i64 1, !dbg !17
  %87 = bitcast <2 x i32> %86 to <2 x float>, !dbg !17
  %88 = insertelement <2 x i32> poison, i32 %51, i64 0, !dbg !19
  %89 = insertelement <2 x i32> %88, i32 %52, i64 1, !dbg !19
  %90 = bitcast <2 x i32> %89 to <2 x float>, !dbg !19
  %91 = fmul <2 x float> %87, %90, !dbg !21
  %92 = fadd <2 x float> %84, %91, !dbg !22
  %93 = insertelement <2 x i32> poison, i32 %59, i64 0, !dbg !17
  %94 = insertelement <2 x i32> %93, i32 %60, i64 1, !dbg !17
  %95 = bitcast <2 x i32> %94 to <2 x float>, !dbg !17
  %96 = insertelement <2 x i32> poison, i32 %65, i64 0, !dbg !19
  %97 = insertelement <2 x i32> %96, i32 %66, i64 1, !dbg !19
  %98 = bitcast <2 x i32> %97 to <2 x float>, !dbg !19
  %99 = fmul <2 x float> %95, %98, !dbg !21
  %100 = fadd <2 x float> %92, %99, !dbg !22
  %101 = insertelement <2 x i32> poison, i32 %20, i64 0, !dbg !17
  %102 = insertelement <2 x i32> %101, i32 %19, i64 1, !dbg !17
  %103 = bitcast <2 x i32> %102 to <2 x float>, !dbg !17
  %104 = insertelement <2 x i32> poison, i32 %26, i64 0, !dbg !19
  %105 = insertelement <2 x i32> %104, i32 %25, i64 1, !dbg !19
  %106 = bitcast <2 x i32> %105 to <2 x float>, !dbg !19
  %107 = fmul <2 x float> %103, %106, !dbg !21
  %108 = fadd <2 x float> %107, zeroinitializer, !dbg !22
  %109 = insertelement <2 x i32> poison, i32 %34, i64 0, !dbg !17
  %110 = insertelement <2 x i32> %109, i32 %33, i64 1, !dbg !17
  %111 = bitcast <2 x i32> %110 to <2 x float>, !dbg !17
  %112 = insertelement <2 x i32> poison, i32 %40, i64 0, !dbg !19
  %113 = insertelement <2 x i32> %112, i32 %39, i64 1, !dbg !19
  %114 = bitcast <2 x i32> %113 to <2 x float>, !dbg !19
  %115 = fmul <2 x float> %111, %114, !dbg !21
  %116 = fadd <2 x float> %108, %115, !dbg !22
  %117 = insertelement <2 x i32> poison, i32 %48, i64 0, !dbg !17
  %118 = insertelement <2 x i32> %117, i32 %47, i64 1, !dbg !17
  %119 = bitcast <2 x i32> %118 to <2 x float>, !dbg !17
  %120 = insertelement <2 x i32> poison, i32 %54, i64 0, !dbg !19
  %121 = insertelement <2 x i32> %120, i32 %53, i64 1, !dbg !19
  %122 = bitcast <2 x i32> %121 to <2 x float>, !dbg !19
  %123 = fmul <2 x float> %119, %122, !dbg !21
  %124 = fadd <2 x float> %116, %123, !dbg !22
  %125 = insertelement <2 x i32> poison, i32 %62, i64 0, !dbg !17
  %126 = insertelement <2 x i32> %125, i32 %61, i64 1, !dbg !17
  %127 = bitcast <2 x i32> %126 to <2 x float>, !dbg !17
  %128 = insertelement <2 x i32> poison, i32 %68, i64 0, !dbg !19
  %129 = insertelement <2 x i32> %128, i32 %67, i64 1, !dbg !19
  %130 = bitcast <2 x i32> %129 to <2 x float>, !dbg !19
  %131 = fmul <2 x float> %127, %130, !dbg !21
  %132 = fadd <2 x float> %124, %131, !dbg !22
  %133 = lshr i32 %8, 5, !dbg !12
  %134 = and i32 %8, 31, !dbg !12
  %shift = shufflevector <2 x float> %100, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !23
  %135 = fadd <2 x float> %100, %shift, !dbg !23
  %shift4 = shufflevector <2 x float> %132, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !23
  %136 = fadd <2 x float> %shift4, %135, !dbg !23
  %137 = fadd <2 x float> %132, %136, !dbg !23
  %138 = extractelement <2 x float> %137, i64 0, !dbg !23
  %139 = select i1 %7, float %138, float 0.000000e+00, !dbg !23
  %140 = bitcast float %139 to i32, !dbg !28
  %141 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %140, i32 16, i32 31), !dbg !28
  %142 = bitcast i32 %141 to float, !dbg !28
  %143 = fadd float %139, %142, !dbg !23
  %144 = bitcast float %143 to i32, !dbg !28
  %145 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %144, i32 8, i32 31), !dbg !28
  %146 = bitcast i32 %145 to float, !dbg !28
  %147 = fadd float %143, %146, !dbg !23
  %148 = bitcast float %147 to i32, !dbg !28
  %149 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %148, i32 4, i32 31), !dbg !28
  %150 = bitcast i32 %149 to float, !dbg !28
  %151 = fadd float %147, %150, !dbg !23
  %152 = bitcast float %151 to i32, !dbg !28
  %153 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %152, i32 2, i32 31), !dbg !28
  %154 = bitcast i32 %153 to float, !dbg !28
  %155 = fadd float %151, %154, !dbg !23
  %156 = bitcast float %155 to i32, !dbg !28
  %157 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %156, i32 1, i32 31), !dbg !28
  %158 = bitcast i32 %157 to float, !dbg !28
  %159 = fadd float %155, %158, !dbg !23
  %160 = icmp eq i32 %134, 0, !dbg !28
  %161 = and i32 %133, 15, !dbg !28
  %162 = zext nneg i32 %161 to i64, !dbg !28
  %163 = getelementptr float, ptr addrspace(3) @global_smem, i64 %162, !dbg !28
  %164 = bitcast float %159 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %163, <1 x i32> %164, i1 %160) #3, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %165 = icmp slt i32 %8, 16, !dbg !28
  %166 = sext i32 %8 to i64, !dbg !28
  %167 = getelementptr float, ptr addrspace(3) @global_smem, i64 %166, !dbg !28
  %168 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %167, i1 %165) #3, !dbg !28
  %169 = bitcast i32 %168 to float, !dbg !28
  %170 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %168, i32 8, i32 31), !dbg !28
  %171 = bitcast i32 %170 to float, !dbg !28
  %172 = fadd float %169, %171, !dbg !23
  %173 = bitcast float %172 to i32, !dbg !28
  %174 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %173, i32 4, i32 31), !dbg !28
  %175 = bitcast i32 %174 to float, !dbg !28
  %176 = fadd float %172, %175, !dbg !23
  %177 = bitcast float %176 to i32, !dbg !28
  %178 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %177, i32 2, i32 31), !dbg !28
  %179 = bitcast i32 %178 to float, !dbg !28
  %180 = fadd float %176, %179, !dbg !23
  %181 = bitcast float %180 to i32, !dbg !28
  %182 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %181, i32 1, i32 31), !dbg !28
  %183 = bitcast i32 %182 to float, !dbg !28
  %184 = fadd float %180, %183, !dbg !23
  %185 = and i32 %8, 15, !dbg !28
  %186 = icmp eq i32 %185, 0, !dbg !28
  %187 = and i1 %165, %186, !dbg !28
  %188 = bitcast float %184 to <1 x i32>, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %167, <1 x i32> %188, i1 %187) #3, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %189 = load i32, ptr addrspace(3) @global_smem, align 16, !dbg !28
  %190 = sext i32 %6 to i64, !dbg !29
  %191 = getelementptr float, ptr addrspace(1) %2, i64 %190, !dbg !29
  %urem = and i32 %8, 511, !dbg !30
  %192 = icmp eq i32 %urem, 0, !dbg !30
  %193 = and i1 %192, %7, !dbg !30
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %189, ptr addrspace(1) %191, i1 %193) #3, !dbg !30
  ret void, !dbg !31
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cm4pdcsrukcblwprc3sslh5eposi22h7phhg5gqmrdwyhwuxadx6.py", directory: "inductor_cache/m4")
!4 = !{ptr @triton_red_fused_mv_2, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_mv_2, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_mv_2", linkageName: "triton_red_fused_mv_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 33, scope: !7)
!13 = !DILocation(line: 32, column: 44, scope: !7)
!14 = !DILocation(line: 28, column: 36, scope: !7)
!15 = !DILocation(line: 32, column: 39, scope: !7)
!16 = !DILocation(line: 32, column: 34, scope: !7)
!17 = !DILocation(line: 32, column: 49, scope: !7)
!18 = !DILocation(line: 33, column: 34, scope: !7)
!19 = !DILocation(line: 33, column: 39, scope: !7)
!20 = !DILocation(line: 29, column: 27, scope: !7)
!21 = !DILocation(line: 34, column: 22, scope: !7)
!22 = !DILocation(line: 36, column: 23, scope: !7)
!23 = !DILocation(line: 256, column: 15, scope: !24, inlinedAt: !27)
!24 = distinct !DILexicalBlockFile(scope: !26, file: !25, discriminator: 0)
!25 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!26 = distinct !DILexicalBlockFile(scope: !7, file: !25, discriminator: 0)
!27 = !DILocation(line: 38, column: 25, scope: !7)
!28 = !DILocation(line: 267, column: 36, scope: !26, inlinedAt: !27)
!29 = !DILocation(line: 39, column: 25, scope: !7)
!30 = !DILocation(line: 39, column: 36, scope: !7)
!31 = !DILocation(line: 39, column: 4, scope: !7)
