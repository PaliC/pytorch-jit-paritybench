; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_native_layer_norm_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %10 = shl i32 %9, 8, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 252, !dbg !12
  %14 = shl i32 %11, 1, !dbg !12
  %15 = and i32 %14, 254, !dbg !12
  %16 = and i32 %11, 127, !dbg !12
  %17 = or disjoint i32 %10, %13, !dbg !13
  %18 = or disjoint i32 %10, %15, !dbg !13
  %19 = or disjoint i32 %10, %16, !dbg !13
  %20 = or disjoint i32 %19, 128, !dbg !13
  %21 = icmp slt i32 %17, 256, !dbg !14
  %22 = icmp slt i32 %18, 256, !dbg !14
  %23 = icmp slt i32 %19, 256, !dbg !14
  %24 = icmp slt i32 %20, 256, !dbg !14
  %25 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %26 = shl i32 %25, 2, !dbg !16
  %27 = lshr i32 %11, 6, !dbg !17
  %.lobit = and i32 %27, 1, !dbg !17
  %28 = or disjoint i32 %26, %.lobit, !dbg !18
  %29 = or disjoint i32 %28, 2, !dbg !18
  %30 = or disjoint i32 %26, 1, !dbg !18
  %31 = or disjoint i32 %26, 2, !dbg !18
  %32 = or disjoint i32 %26, 3, !dbg !18
  %33 = icmp slt i32 %28, 4, !dbg !19
  %34 = icmp slt i32 %29, 4, !dbg !19
  %35 = icmp slt i32 %26, 4, !dbg !19
  %36 = icmp slt i32 %30, 4, !dbg !19
  %37 = icmp slt i32 %31, 4, !dbg !19
  %38 = icmp slt i32 %32, 4, !dbg !19
  %.frozen = freeze i32 %17, !dbg !20
  %39 = sdiv i32 %.frozen, 64, !dbg !20
  %40 = mul i32 %39, 64, !dbg !21
  %.decomposed = sub i32 %.frozen, %40, !dbg !21
  %41 = shl i32 %28, 6, !dbg !22
  %42 = shl i32 %29, 6, !dbg !22
  %43 = shl i32 %39, 8, !dbg !23
  %44 = add i32 %43, %.decomposed, !dbg !24
  %45 = add i32 %44, %41, !dbg !25
  %46 = add i32 %44, %42, !dbg !25
  %47 = sext i32 %45 to i64, !dbg !26
  %48 = getelementptr float, ptr addrspace(1) %0, i64 %47, !dbg !26
  %49 = sext i32 %46 to i64, !dbg !26
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !26
  %51 = and i1 %21, %33, !dbg !27
  %52 = and i1 %34, %21, !dbg !27
  %53 = and i1 %35, %23, !dbg !27
  %54 = and i1 %24, %35, !dbg !27
  %55 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %48, i1 %51) #2, !dbg !28
  %56 = extractvalue { i32, i32, i32, i32 } %55, 0, !dbg !28
  %57 = extractvalue { i32, i32, i32, i32 } %55, 1, !dbg !28
  %58 = extractvalue { i32, i32, i32, i32 } %55, 2, !dbg !28
  %59 = extractvalue { i32, i32, i32, i32 } %55, 3, !dbg !28
  %60 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %50, i1 %52) #2, !dbg !28
  %61 = extractvalue { i32, i32, i32, i32 } %60, 0, !dbg !28
  %62 = extractvalue { i32, i32, i32, i32 } %60, 1, !dbg !28
  %63 = extractvalue { i32, i32, i32, i32 } %60, 2, !dbg !28
  %64 = extractvalue { i32, i32, i32, i32 } %60, 3, !dbg !28
  %65 = and i32 %12, 508, !dbg !28
  %66 = lshr i32 %12, 6, !dbg !28
  %67 = and i32 %66, 4, !dbg !28
  %68 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %67, !dbg !28
  %69 = getelementptr inbounds float, ptr addrspace(3) %68, i32 %65, !dbg !28
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %69, i32 %56, i32 %57, i32 %58, i32 %59, i1 true) #2, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %70 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !28
  %71 = load float, ptr addrspace(3) %70, align 8, !dbg !28
  %72 = getelementptr inbounds i8, ptr addrspace(3) %70, i32 4, !dbg !28
  %73 = load float, ptr addrspace(3) %72, align 4, !dbg !28
  %74 = getelementptr inbounds i8, ptr addrspace(3) %70, i32 1040, !dbg !28
  %75 = load float, ptr addrspace(3) %74, align 8, !dbg !28
  %76 = getelementptr inbounds i8, ptr addrspace(3) %70, i32 1044, !dbg !28
  %77 = load float, ptr addrspace(3) %76, align 4, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %69, i32 %61, i32 %62, i32 %63, i32 %64, i1 true) #2, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %78 = load float, ptr addrspace(3) %70, align 8, !dbg !28
  %79 = load float, ptr addrspace(3) %72, align 4, !dbg !28
  %80 = load float, ptr addrspace(3) %74, align 8, !dbg !28
  %81 = load float, ptr addrspace(3) %76, align 4, !dbg !28
  %82 = sext i32 %18 to i64, !dbg !29
  %83 = getelementptr float, ptr addrspace(1) %1, i64 %82, !dbg !29
  %84 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %83, i1 %22) #2, !dbg !30
  %85 = extractvalue { i32, i32 } %84, 0, !dbg !30
  %86 = extractvalue { i32, i32 } %84, 1, !dbg !30
  %87 = bitcast i32 %85 to float, !dbg !30
  %88 = bitcast i32 %86 to float, !dbg !30
  %89 = getelementptr float, ptr addrspace(1) %2, i64 %82, !dbg !31
  %90 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %89, i1 %22) #2, !dbg !32
  %91 = extractvalue { i32, i32 } %90, 0, !dbg !32
  %92 = extractvalue { i32, i32 } %90, 1, !dbg !32
  %93 = bitcast i32 %91 to float, !dbg !32
  %94 = bitcast i32 %92 to float, !dbg !32
  %95 = sext i32 %26 to i64, !dbg !33
  %96 = getelementptr float, ptr addrspace(1) %3, i64 %95, !dbg !33
  %97 = sext i32 %30 to i64, !dbg !33
  %98 = getelementptr float, ptr addrspace(1) %3, i64 %97, !dbg !33
  %99 = sext i32 %31 to i64, !dbg !33
  %100 = getelementptr float, ptr addrspace(1) %3, i64 %99, !dbg !33
  %101 = sext i32 %32 to i64, !dbg !33
  %102 = getelementptr float, ptr addrspace(1) %3, i64 %101, !dbg !33
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 %35) #2, !dbg !34
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 %35) #2, !dbg !34
  %105 = bitcast i32 %104 to float, !dbg !34
  %106 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %98, i1 %36) #2, !dbg !34
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %98, i1 %36) #2, !dbg !34
  %108 = bitcast i32 %107 to float, !dbg !34
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %100, i1 %37) #2, !dbg !34
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %100, i1 %37) #2, !dbg !34
  %111 = bitcast i32 %110 to float, !dbg !34
  %112 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %102, i1 %38) #2, !dbg !34
  %113 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %102, i1 %38) #2, !dbg !34
  %114 = bitcast i32 %113 to float, !dbg !34
  %115 = getelementptr float, ptr addrspace(1) %4, i64 %95, !dbg !35
  %116 = getelementptr float, ptr addrspace(1) %4, i64 %97, !dbg !35
  %117 = getelementptr float, ptr addrspace(1) %4, i64 %99, !dbg !35
  %118 = getelementptr float, ptr addrspace(1) %4, i64 %101, !dbg !35
  %119 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %115, i1 %35) #2, !dbg !36
  %120 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %115, i1 %35) #2, !dbg !36
  %121 = bitcast i32 %120 to float, !dbg !36
  %122 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %116, i1 %36) #2, !dbg !36
  %123 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %116, i1 %36) #2, !dbg !36
  %124 = bitcast i32 %123 to float, !dbg !36
  %125 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %117, i1 %37) #2, !dbg !36
  %126 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %117, i1 %37) #2, !dbg !36
  %127 = bitcast i32 %126 to float, !dbg !36
  %128 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %118, i1 %38) #2, !dbg !36
  %129 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %118, i1 %38) #2, !dbg !36
  %130 = bitcast i32 %129 to float, !dbg !36
  %131 = fsub float %71, %87, !dbg !37
  %132 = fsub float %73, %88, !dbg !37
  %133 = fsub float %75, %87, !dbg !37
  %134 = fsub float %77, %88, !dbg !37
  %135 = fsub float %78, %87, !dbg !37
  %136 = fsub float %79, %88, !dbg !37
  %137 = fsub float %80, %87, !dbg !37
  %138 = fsub float %81, %88, !dbg !37
  %139 = fmul float %131, %93, !dbg !38
  %140 = fmul float %132, %94, !dbg !38
  %141 = fmul float %133, %93, !dbg !38
  %142 = fmul float %134, %94, !dbg !38
  %143 = fmul float %135, %93, !dbg !38
  %144 = fmul float %136, %94, !dbg !38
  %145 = fmul float %137, %93, !dbg !38
  %146 = fmul float %138, %94, !dbg !38
  %147 = fmul float %139, %105, !dbg !39
  %148 = fmul float %140, %105, !dbg !39
  %149 = fmul float %141, %108, !dbg !39
  %150 = fmul float %142, %108, !dbg !39
  %151 = fmul float %143, %111, !dbg !39
  %152 = fmul float %144, %111, !dbg !39
  %153 = fmul float %145, %114, !dbg !39
  %154 = fmul float %146, %114, !dbg !39
  %155 = fadd float %147, %121, !dbg !40
  %156 = fadd float %148, %121, !dbg !40
  %157 = fadd float %149, %124, !dbg !40
  %158 = fadd float %150, %124, !dbg !40
  %159 = fadd float %151, %127, !dbg !40
  %160 = fadd float %152, %127, !dbg !40
  %161 = fadd float %153, %130, !dbg !40
  %162 = fadd float %154, %130, !dbg !40
  %163 = add i32 %19, %25, !dbg !41
  %164 = shl i32 %163, 2, !dbg !41
  %165 = add i32 %25, %20, !dbg !41
  %166 = shl i32 %165, 2, !dbg !41
  %167 = sext i32 %164 to i64, !dbg !42
  %168 = getelementptr float, ptr addrspace(1) %5, i64 %167, !dbg !42
  %169 = sext i32 %166 to i64, !dbg !42
  %170 = getelementptr float, ptr addrspace(1) %5, i64 %169, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %171 = shl i32 %11, 3, !dbg !43
  %172 = and i32 %171, 1016, !dbg !43
  %173 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %172, !dbg !43
  %174 = getelementptr float, ptr addrspace(3) %173, i32 %172, !dbg !43
  %175 = bitcast float %155 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %174, <1 x i32> %175, i1 true) #2, !dbg !43
  %176 = or disjoint i32 %172, 4, !dbg !43
  %177 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %176, !dbg !43
  %178 = getelementptr float, ptr addrspace(3) %177, i32 %176, !dbg !43
  %179 = bitcast float %156 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %178, <1 x i32> %179, i1 true) #2, !dbg !43
  %180 = or disjoint i32 %172, 1, !dbg !43
  %181 = getelementptr float, ptr addrspace(3) %173, i32 %180, !dbg !43
  %182 = bitcast float %157 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %181, <1 x i32> %182, i1 true) #2, !dbg !43
  %183 = or disjoint i32 %172, 5, !dbg !43
  %184 = lshr i32 %183, 2, !dbg !43
  %185 = getelementptr float, ptr addrspace(3) @global_smem, i32 %184, !dbg !43
  %186 = getelementptr float, ptr addrspace(3) %185, i32 %183, !dbg !43
  %187 = bitcast float %158 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %186, <1 x i32> %187, i1 true) #2, !dbg !43
  %188 = or disjoint i32 %172, 2, !dbg !43
  %189 = getelementptr float, ptr addrspace(3) %173, i32 %188, !dbg !43
  %190 = bitcast float %159 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %189, <1 x i32> %190, i1 true) #2, !dbg !43
  %191 = or disjoint i32 %172, 6, !dbg !43
  %192 = lshr i32 %191, 2, !dbg !43
  %193 = getelementptr float, ptr addrspace(3) @global_smem, i32 %192, !dbg !43
  %194 = getelementptr float, ptr addrspace(3) %193, i32 %191, !dbg !43
  %195 = bitcast float %160 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %194, <1 x i32> %195, i1 true) #2, !dbg !43
  %196 = or disjoint i32 %172, 3, !dbg !43
  %197 = getelementptr float, ptr addrspace(3) %173, i32 %196, !dbg !43
  %198 = bitcast float %161 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %197, <1 x i32> %198, i1 true) #2, !dbg !43
  %199 = or disjoint i32 %172, 7, !dbg !43
  %200 = lshr i32 %199, 2, !dbg !43
  %201 = getelementptr float, ptr addrspace(3) @global_smem, i32 %200, !dbg !43
  %202 = getelementptr float, ptr addrspace(3) %201, i32 %199, !dbg !43
  %203 = bitcast float %162 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %202, <1 x i32> %203, i1 true) #2, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %204 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %65, !dbg !43
  %205 = getelementptr inbounds float, ptr addrspace(3) %204, i32 %65, !dbg !43
  %206 = load i32, ptr addrspace(3) %205, align 4, !dbg !43
  %207 = or disjoint i32 %65, 1, !dbg !43
  %208 = getelementptr inbounds float, ptr addrspace(3) %204, i32 %207, !dbg !43
  %209 = load i32, ptr addrspace(3) %208, align 4, !dbg !43
  %210 = or disjoint i32 %65, 2, !dbg !43
  %211 = getelementptr inbounds float, ptr addrspace(3) %204, i32 %210, !dbg !43
  %212 = load i32, ptr addrspace(3) %211, align 4, !dbg !43
  %213 = or disjoint i32 %65, 3, !dbg !43
  %214 = getelementptr inbounds float, ptr addrspace(3) %204, i32 %213, !dbg !43
  %215 = load i32, ptr addrspace(3) %214, align 4, !dbg !43
  %216 = or disjoint i32 %65, 512, !dbg !43
  %217 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %216, !dbg !43
  %218 = getelementptr inbounds float, ptr addrspace(3) %217, i32 %216, !dbg !43
  %219 = load i32, ptr addrspace(3) %218, align 4, !dbg !43
  %220 = or disjoint i32 %65, 513, !dbg !43
  %221 = lshr i32 %220, 2, !dbg !43
  %222 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %221, !dbg !43
  %223 = getelementptr inbounds float, ptr addrspace(3) %222, i32 %220, !dbg !43
  %224 = load i32, ptr addrspace(3) %223, align 4, !dbg !43
  %225 = or disjoint i32 %65, 514, !dbg !43
  %226 = lshr i32 %225, 2, !dbg !43
  %227 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %226, !dbg !43
  %228 = getelementptr inbounds float, ptr addrspace(3) %227, i32 %225, !dbg !43
  %229 = load i32, ptr addrspace(3) %228, align 4, !dbg !43
  %230 = or disjoint i32 %65, 515, !dbg !43
  %231 = lshr i32 %230, 2, !dbg !43
  %232 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %231, !dbg !43
  %233 = getelementptr inbounds float, ptr addrspace(3) %232, i32 %230, !dbg !43
  %234 = load i32, ptr addrspace(3) %233, align 4, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %206, i32 %209, i32 %212, i32 %215, ptr addrspace(1) %168, i1 %53) #2, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %219, i32 %224, i32 %229, i32 %234, ptr addrspace(1) %170, i1 %54) #2, !dbg !43
  ret void, !dbg !44
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c7cawnqyatv3llt65g7egixsvqpfqppqmg237er4s6jm3ehzrx2n.py", directory: "inductor_cache/7c")
!4 = !{ptr @triton_poi_fused_native_layer_norm_2, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_native_layer_norm_2, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_native_layer_norm_2", linkageName: "triton_poi_fused_native_layer_norm_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 38, scope: !7)
!23 = !DILocation(line: 32, column: 47, scope: !7)
!24 = !DILocation(line: 32, column: 35, scope: !7)
!25 = !DILocation(line: 32, column: 43, scope: !7)
!26 = !DILocation(line: 32, column: 30, scope: !7)
!27 = !DILocation(line: 32, column: 60, scope: !7)
!28 = !DILocation(line: 32, column: 52, scope: !7)
!29 = !DILocation(line: 33, column: 30, scope: !7)
!30 = !DILocation(line: 33, column: 35, scope: !7)
!31 = !DILocation(line: 34, column: 30, scope: !7)
!32 = !DILocation(line: 34, column: 35, scope: !7)
!33 = !DILocation(line: 35, column: 30, scope: !7)
!34 = !DILocation(line: 35, column: 35, scope: !7)
!35 = !DILocation(line: 36, column: 30, scope: !7)
!36 = !DILocation(line: 36, column: 35, scope: !7)
!37 = !DILocation(line: 37, column: 18, scope: !7)
!38 = !DILocation(line: 38, column: 18, scope: !7)
!39 = !DILocation(line: 39, column: 18, scope: !7)
!40 = !DILocation(line: 40, column: 18, scope: !7)
!41 = !DILocation(line: 41, column: 30, scope: !7)
!42 = !DILocation(line: 41, column: 25, scope: !7)
!43 = !DILocation(line: 41, column: 43, scope: !7)
!44 = !DILocation(line: 41, column: 4, scope: !7)
