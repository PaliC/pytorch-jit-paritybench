; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %6 = shl i32 %5, 9, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 2, !dbg !12
  %9 = and i32 %8, 508, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = sdiv i32 %10, 256, !dbg !14
  %.frozen = freeze i32 %10, !dbg !15
  %12 = sdiv i32 %.frozen, 12288, !dbg !15
  %13 = mul i32 %12, 12288, !dbg !16
  %srem.decomposed = sub i32 %.frozen, %13, !dbg !16
  %14 = mul nsw i32 %12, 6144, !dbg !17
  %15 = add nsw i32 %14, %srem.decomposed, !dbg !18
  %16 = sext i32 %15 to i64, !dbg !19
  %17 = getelementptr float, ptr addrspace(1) %0, i64 %16, !dbg !19
  %18 = insertelement <2 x i32> poison, i32 %10, i64 0, !dbg !20
  %19 = insertelement <2 x i32> %18, i32 %11, i64 1, !dbg !20
  %20 = srem <2 x i32> %19, <i32 256, i32 48>, !dbg !20
  %21 = extractelement <2 x i32> %20, i64 1, !dbg !21
  %22 = icmp slt i32 %21, 24, !dbg !22
  %23 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %17, i1 %22, i32 0, i1 %22, i32 0, i1 %22, i32 0, i1 %22, i32 0, i1 %22) #1, !dbg !23
  %24 = extractvalue { i32, i32, i32, i32 } %23, 0, !dbg !23
  %25 = extractvalue { i32, i32, i32, i32 } %23, 1, !dbg !23
  %26 = extractvalue { i32, i32, i32, i32 } %23, 2, !dbg !23
  %27 = extractvalue { i32, i32, i32, i32 } %23, 3, !dbg !23
  %28 = sext i32 %21 to i64, !dbg !24
  %29 = getelementptr float, ptr addrspace(1) %1, i64 %28, !dbg !24
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %29, i1 %22, i32 0, i1 %22) #1, !dbg !25
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %29, i1 %22, i32 0, i1 %22) #1, !dbg !25
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %29, i1 %22, i32 0, i1 %22) #1, !dbg !25
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %29, i1 %22, i32 0, i1 %22) #1, !dbg !25
  %34 = insertelement <4 x i32> poison, i32 %27, i64 0, !dbg !23
  %35 = insertelement <4 x i32> %34, i32 %26, i64 1, !dbg !23
  %36 = insertelement <4 x i32> %35, i32 %25, i64 2, !dbg !23
  %37 = insertelement <4 x i32> %36, i32 %24, i64 3, !dbg !23
  %38 = bitcast <4 x i32> %37 to <4 x float>, !dbg !23
  %39 = insertelement <4 x i32> poison, i32 %33, i64 0, !dbg !25
  %40 = insertelement <4 x i32> %39, i32 %32, i64 1, !dbg !25
  %41 = insertelement <4 x i32> %40, i32 %31, i64 2, !dbg !25
  %42 = insertelement <4 x i32> %41, i32 %30, i64 3, !dbg !25
  %43 = bitcast <4 x i32> %42 to <4 x float>, !dbg !25
  %44 = fadd <4 x float> %38, %43, !dbg !26
  %45 = fcmp olt <4 x float> %44, zeroinitializer, !dbg !27
  %46 = extractelement <4 x i1> %45, i64 3, !dbg !31
  %47 = extractelement <4 x float> %44, i64 3, !dbg !31
  %48 = select i1 %46, float 0.000000e+00, float %47, !dbg !31
  %49 = extractelement <4 x i1> %45, i64 2, !dbg !31
  %50 = extractelement <4 x float> %44, i64 2, !dbg !31
  %51 = select i1 %49, float 0.000000e+00, float %50, !dbg !31
  %52 = extractelement <4 x i1> %45, i64 1, !dbg !31
  %53 = extractelement <4 x float> %44, i64 1, !dbg !31
  %54 = select i1 %52, float 0.000000e+00, float %53, !dbg !31
  %55 = extractelement <4 x i1> %45, i64 0, !dbg !31
  %56 = extractelement <4 x float> %44, i64 0, !dbg !31
  %57 = select i1 %55, float 0.000000e+00, float %56, !dbg !31
  %58 = icmp sgt i32 %21, 23, !dbg !21
  %59 = insertelement <2 x i32> <i32 poison, i32 -24>, i32 %14, i64 0, !dbg !32
  %60 = add nsw <2 x i32> %59, %20, !dbg !32
  %61 = extractelement <2 x i32> %60, i64 1, !dbg !33
  %62 = shl nsw i32 %61, 8, !dbg !33
  %63 = extractelement <2 x i32> %60, i64 0, !dbg !34
  %64 = add nsw i32 %63, %62, !dbg !34
  %65 = sext i32 %64 to i64, !dbg !35
  %66 = getelementptr float, ptr addrspace(1) %0, i64 %65, !dbg !35
  %67 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %66, i1 %58, i32 0, i1 %58, i32 0, i1 %58, i32 0, i1 %58, i32 0, i1 %58) #1, !dbg !36
  %68 = extractvalue { i32, i32, i32, i32 } %67, 0, !dbg !36
  %69 = extractvalue { i32, i32, i32, i32 } %67, 1, !dbg !36
  %70 = extractvalue { i32, i32, i32, i32 } %67, 2, !dbg !36
  %71 = extractvalue { i32, i32, i32, i32 } %67, 3, !dbg !36
  %72 = sext i32 %61 to i64, !dbg !37
  %73 = getelementptr float, ptr addrspace(1) %1, i64 %72, !dbg !37
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %73, i1 %58, i32 0, i1 %58) #1, !dbg !38
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %73, i1 %58, i32 0, i1 %58) #1, !dbg !38
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %73, i1 %58, i32 0, i1 %58) #1, !dbg !38
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %73, i1 %58, i32 0, i1 %58) #1, !dbg !38
  %78 = insertelement <4 x i32> poison, i32 %71, i64 0, !dbg !36
  %79 = insertelement <4 x i32> %78, i32 %70, i64 1, !dbg !36
  %80 = insertelement <4 x i32> %79, i32 %69, i64 2, !dbg !36
  %81 = insertelement <4 x i32> %80, i32 %68, i64 3, !dbg !36
  %82 = bitcast <4 x i32> %81 to <4 x float>, !dbg !36
  %83 = insertelement <4 x i32> poison, i32 %77, i64 0, !dbg !38
  %84 = insertelement <4 x i32> %83, i32 %76, i64 1, !dbg !38
  %85 = insertelement <4 x i32> %84, i32 %75, i64 2, !dbg !38
  %86 = insertelement <4 x i32> %85, i32 %74, i64 3, !dbg !38
  %87 = bitcast <4 x i32> %86 to <4 x float>, !dbg !38
  %88 = fadd <4 x float> %82, %87, !dbg !39
  %89 = fsub <4 x float> zeroinitializer, %88, !dbg !40
  %90 = fcmp olt <4 x float> %89, zeroinitializer, !dbg !41
  %91 = extractelement <4 x i1> %90, i64 3, !dbg !43
  %92 = extractelement <4 x float> %89, i64 3, !dbg !43
  %93 = select i1 %91, float 0.000000e+00, float %92, !dbg !43
  %94 = extractelement <4 x i1> %90, i64 2, !dbg !43
  %95 = extractelement <4 x float> %89, i64 2, !dbg !43
  %96 = select i1 %94, float 0.000000e+00, float %95, !dbg !43
  %97 = extractelement <4 x i1> %90, i64 1, !dbg !43
  %98 = extractelement <4 x float> %89, i64 1, !dbg !43
  %99 = select i1 %97, float 0.000000e+00, float %98, !dbg !43
  %100 = extractelement <4 x i1> %90, i64 0, !dbg !43
  %101 = extractelement <4 x float> %89, i64 0, !dbg !43
  %102 = select i1 %100, float 0.000000e+00, float %101, !dbg !43
  %103 = select i1 %22, float %48, float %93, !dbg !44
  %104 = select i1 %22, float %51, float %96, !dbg !44
  %105 = select i1 %22, float %54, float %99, !dbg !44
  %106 = select i1 %22, float %57, float %102, !dbg !44
  %107 = sext i32 %10 to i64, !dbg !45
  %108 = getelementptr float, ptr addrspace(1) %2, i64 %107, !dbg !45
  %109 = bitcast float %103 to i32, !dbg !46
  %110 = bitcast float %104 to i32, !dbg !46
  %111 = bitcast float %105 to i32, !dbg !46
  %112 = bitcast float %106 to i32, !dbg !46
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %109, i32 %110, i32 %111, i32 %112, ptr addrspace(1) %108, i1 true) #1, !dbg !46
  ret void, !dbg !47
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cyez4ll3anhtseem625hkfyscursodxdziwwbunxpcuz6hbj55mt.py", directory: "inductor_cache/ye")
!4 = !{ptr @triton_poi_fused_cat_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_0, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_0", linkageName: "triton_poi_fused_cat_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 19, scope: !7)
!16 = !DILocation(line: 33, column: 35, scope: !7)
!17 = !DILocation(line: 33, column: 51, scope: !7)
!18 = !DILocation(line: 33, column: 46, scope: !7)
!19 = !DILocation(line: 33, column: 30, scope: !7)
!20 = !DILocation(line: 25, column: 19, scope: !7)
!21 = !DILocation(line: 40, column: 20, scope: !7)
!22 = !DILocation(line: 32, column: 18, scope: !7)
!23 = !DILocation(line: 33, column: 56, scope: !7)
!24 = !DILocation(line: 34, column: 30, scope: !7)
!25 = !DILocation(line: 34, column: 35, scope: !7)
!26 = !DILocation(line: 35, column: 18, scope: !7)
!27 = !DILocation(line: 118, column: 15, scope: !28, inlinedAt: !30)
!28 = distinct !DILexicalBlockFile(scope: !7, file: !29, discriminator: 0)
!29 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!30 = !DILocation(line: 37, column: 40, scope: !7)
!31 = !DILocation(line: 121, column: 29, scope: !28, inlinedAt: !30)
!32 = !DILocation(line: 43, column: 36, scope: !7)
!33 = !DILocation(line: 43, column: 41, scope: !7)
!34 = !DILocation(line: 43, column: 55, scope: !7)
!35 = !DILocation(line: 43, column: 31, scope: !7)
!36 = !DILocation(line: 43, column: 65, scope: !7)
!37 = !DILocation(line: 44, column: 31, scope: !7)
!38 = !DILocation(line: 44, column: 44, scope: !7)
!39 = !DILocation(line: 45, column: 20, scope: !7)
!40 = !DILocation(line: 46, column: 13, scope: !7)
!41 = !DILocation(line: 118, column: 15, scope: !28, inlinedAt: !42)
!42 = !DILocation(line: 48, column: 42, scope: !7)
!43 = !DILocation(line: 121, column: 29, scope: !28, inlinedAt: !42)
!44 = !DILocation(line: 0, scope: !7)
!45 = !DILocation(line: 52, column: 25, scope: !7)
!46 = !DILocation(line: 52, column: 37, scope: !7)
!47 = !DILocation(line: 52, column: 4, scope: !7)
