; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_red_fused__weight_norm_interface_16(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %6 = icmp slt i32 %5, 128, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = and i32 %7, 31, !dbg !12
  %9 = lshr i32 %7, 5, !dbg !12
  %10 = shl i32 %7, 2, !dbg !12
  %11 = and i32 %10, 2044, !dbg !12
  %12 = icmp samesign ult i32 %11, 1152, !dbg !13
  %13 = mul i32 %5, 1152, !dbg !14
  %14 = add i32 %13, %11, !dbg !15
  %15 = sext i32 %14 to i64, !dbg !16
  %16 = getelementptr float, ptr addrspace(1) %1, i64 %15, !dbg !16
  %17 = and i1 %12, %6, !dbg !17
  %18 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %16, i1 %17, i32 0, i1 %17, i32 0, i1 %17, i32 0, i1 %17, i32 0, i1 %17) #5, !dbg !18
  %19 = extractvalue { i32, i32, i32, i32 } %18, 0, !dbg !18
  %20 = extractvalue { i32, i32, i32, i32 } %18, 1, !dbg !18
  %21 = extractvalue { i32, i32, i32, i32 } %18, 2, !dbg !18
  %22 = extractvalue { i32, i32, i32, i32 } %18, 3, !dbg !18
  %23 = bitcast i32 %19 to float, !dbg !18
  %24 = bitcast i32 %20 to float, !dbg !18
  %25 = bitcast i32 %21 to float, !dbg !18
  %26 = bitcast i32 %22 to float, !dbg !18
  %27 = fmul float %23, %23, !dbg !19
  %28 = fmul float %24, %24, !dbg !19
  %29 = fmul float %25, %25, !dbg !19
  %30 = fmul float %26, %26, !dbg !19
  %31 = fadd float %27, %28, !dbg !20
  %32 = fadd float %29, %31, !dbg !20
  %33 = fadd float %30, %32, !dbg !20
  %34 = select i1 %17, float %33, float 0.000000e+00, !dbg !20
  %35 = bitcast float %34 to i32, !dbg !25
  %36 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %35, i32 16, i32 31), !dbg !25
  %37 = bitcast i32 %36 to float, !dbg !25
  %38 = fadd float %34, %37, !dbg !20
  %39 = bitcast float %38 to i32, !dbg !25
  %40 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %39, i32 8, i32 31), !dbg !25
  %41 = bitcast i32 %40 to float, !dbg !25
  %42 = fadd float %38, %41, !dbg !20
  %43 = bitcast float %42 to i32, !dbg !25
  %44 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %43, i32 4, i32 31), !dbg !25
  %45 = bitcast i32 %44 to float, !dbg !25
  %46 = fadd float %42, %45, !dbg !20
  %47 = bitcast float %46 to i32, !dbg !25
  %48 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %47, i32 2, i32 31), !dbg !25
  %49 = bitcast i32 %48 to float, !dbg !25
  %50 = fadd float %46, %49, !dbg !20
  %51 = bitcast float %50 to i32, !dbg !25
  %52 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %51, i32 1, i32 31), !dbg !25
  %53 = bitcast i32 %52 to float, !dbg !25
  %54 = fadd float %50, %53, !dbg !20
  %55 = icmp eq i32 %8, 0, !dbg !25
  %56 = and i32 %9, 15, !dbg !25
  %57 = getelementptr float, ptr addrspace(3) @global_smem, i32 %56, !dbg !25
  %58 = bitcast float %54 to <1 x i32>, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %57, <1 x i32> %58, i1 %55) #5, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %59 = icmp slt i32 %7, 16, !dbg !25
  %60 = getelementptr float, ptr addrspace(3) @global_smem, i32 %7, !dbg !25
  %61 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %60, i1 %59) #5, !dbg !25
  %62 = bitcast i32 %61 to float, !dbg !25
  %63 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %61, i32 8, i32 31), !dbg !25
  %64 = bitcast i32 %63 to float, !dbg !25
  %65 = fadd float %62, %64, !dbg !20
  %66 = bitcast float %65 to i32, !dbg !25
  %67 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %66, i32 4, i32 31), !dbg !25
  %68 = bitcast i32 %67 to float, !dbg !25
  %69 = fadd float %65, %68, !dbg !20
  %70 = bitcast float %69 to i32, !dbg !25
  %71 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %70, i32 2, i32 31), !dbg !25
  %72 = bitcast i32 %71 to float, !dbg !25
  %73 = fadd float %69, %72, !dbg !20
  %74 = bitcast float %73 to i32, !dbg !25
  %75 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %74, i32 1, i32 31), !dbg !25
  %76 = bitcast i32 %75 to float, !dbg !25
  %77 = fadd float %73, %76, !dbg !20
  %78 = and i32 %7, 15, !dbg !25
  %79 = icmp eq i32 %78, 0, !dbg !25
  %80 = and i1 %59, %79, !dbg !25
  %81 = bitcast float %77 to <1 x i32>, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %60, <1 x i32> %81, i1 %80) #5, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %82 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !25
  %83 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !26
  %.not.i = icmp eq i32 %83, 0, !dbg !26
  %84 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !26
  %.not1.i = icmp eq i32 %84, 0, !dbg !26
  br i1 %.not.i, label %90, label %85, !dbg !26

85:                                               ; preds = %4
  br i1 %.not1.i, label %88, label %86, !dbg !26

86:                                               ; preds = %85
  %87 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %82) #5, !dbg !26
  br label %__nv_sqrtf.exit, !dbg !26

88:                                               ; preds = %85
  %89 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %82) #5, !dbg !26
  br label %__nv_sqrtf.exit, !dbg !26

90:                                               ; preds = %4
  br i1 %.not1.i, label %93, label %91, !dbg !26

91:                                               ; preds = %90
  %92 = tail call float @llvm.nvvm.sqrt.rn.f(float %82) #5, !dbg !26
  br label %__nv_sqrtf.exit, !dbg !26

93:                                               ; preds = %90
  %94 = tail call float @llvm.nvvm.sqrt.approx.f(float %82) #5, !dbg !26
  br label %__nv_sqrtf.exit, !dbg !26

__nv_sqrtf.exit:                                  ; preds = %86, %88, %91, %93
  %.0.i = phi float [ %87, %86 ], [ %89, %88 ], [ %92, %91 ], [ %94, %93 ], !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %95 = sext i32 %5 to i64, !dbg !28
  %96 = getelementptr float, ptr addrspace(1) %0, i64 %95, !dbg !28
  %urem = and i32 %7, 511, !dbg !29
  %97 = icmp eq i32 %urem, 0, !dbg !29
  %98 = bitcast float %.0.i to i32, !dbg !29
  %99 = and i1 %97, %6, !dbg !29
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %98, ptr addrspace(1) %96, i1 %99) #5, !dbg !29
  ret void, !dbg !30
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c2ovuli2bwyfvzwnip7e5wr2wvd5sm4223on73y34h2nib22jwkx.py", directory: "inductor_cache/2o")
!4 = !{ptr @triton_red_fused__weight_norm_interface_16, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused__weight_norm_interface_16, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused__weight_norm_interface_16", linkageName: "triton_red_fused__weight_norm_interface_16", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 33, scope: !7)
!13 = !DILocation(line: 30, column: 25, scope: !7)
!14 = !DILocation(line: 32, column: 44, scope: !7)
!15 = !DILocation(line: 32, column: 39, scope: !7)
!16 = !DILocation(line: 32, column: 34, scope: !7)
!17 = !DILocation(line: 32, column: 57, scope: !7)
!18 = !DILocation(line: 32, column: 49, scope: !7)
!19 = !DILocation(line: 33, column: 22, scope: !7)
!20 = !DILocation(line: 256, column: 15, scope: !21, inlinedAt: !24)
!21 = distinct !DILexicalBlockFile(scope: !23, file: !22, discriminator: 0)
!22 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!23 = distinct !DILexicalBlockFile(scope: !7, file: !22, discriminator: 0)
!24 = !DILocation(line: 37, column: 25, scope: !7)
!25 = !DILocation(line: 267, column: 36, scope: !23, inlinedAt: !24)
!26 = !DILocation(line: 38, column: 26, scope: !7)
!27 = !DILocation(line: 39, column: 4, scope: !7)
!28 = !DILocation(line: 40, column: 28, scope: !7)
!29 = !DILocation(line: 40, column: 39, scope: !7)
!30 = !DILocation(line: 40, column: 4, scope: !7)
