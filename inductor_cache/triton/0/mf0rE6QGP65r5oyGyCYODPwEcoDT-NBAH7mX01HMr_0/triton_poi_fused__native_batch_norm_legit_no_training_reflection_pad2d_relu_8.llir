; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_reflection_pad2d_relu_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %9 = shl i32 %8, 10, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 2, !dbg !12
  %12 = and i32 %11, 508, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %14 = or disjoint i32 %13, 1, !dbg !13
  %15 = or disjoint i32 %13, 2, !dbg !13
  %16 = or disjoint i32 %13, 3, !dbg !13
  %17 = or disjoint i32 %13, 512, !dbg !13
  %18 = or disjoint i32 %13, 513, !dbg !13
  %19 = or disjoint i32 %13, 514, !dbg !13
  %20 = or disjoint i32 %13, 515, !dbg !13
  %21 = icmp slt i32 %13, 369664, !dbg !14
  %22 = icmp slt i32 %17, 369664, !dbg !14
  %.frozen = freeze i32 %13, !dbg !15
  %23 = sdiv i32 %.frozen, 38, !dbg !15
  %24 = mul i32 %23, 38, !dbg !16
  %.decomposed = sub i32 %.frozen, %24, !dbg !16
  %25 = srem i32 %14, 38, !dbg !16
  %.frozen57 = freeze i32 %15, !dbg !15
  %26 = sdiv i32 %.frozen57, 38, !dbg !15
  %27 = mul i32 %26, 38, !dbg !16
  %.decomposed58 = sub i32 %.frozen57, %27, !dbg !16
  %28 = srem i32 %16, 38, !dbg !16
  %.frozen59 = freeze i32 %17, !dbg !15
  %29 = sdiv i32 %.frozen59, 38, !dbg !15
  %30 = mul i32 %29, 38, !dbg !16
  %.decomposed60 = sub i32 %.frozen59, %30, !dbg !16
  %31 = srem i32 %18, 38, !dbg !16
  %.frozen61 = freeze i32 %19, !dbg !15
  %32 = sdiv i32 %.frozen61, 38, !dbg !15
  %33 = mul i32 %32, 38, !dbg !16
  %.decomposed62 = sub i32 %.frozen61, %33, !dbg !16
  %34 = srem i32 %20, 38, !dbg !16
  %35 = srem i32 %23, 38, !dbg !17
  %36 = srem i32 %26, 38, !dbg !17
  %37 = srem i32 %29, 38, !dbg !17
  %38 = srem i32 %32, 38, !dbg !17
  %39 = sdiv i32 %13, 1444, !dbg !18
  %40 = sdiv i32 %17, 1444, !dbg !18
  %41 = srem i32 %39, 64, !dbg !19
  %42 = srem i32 %40, 64, !dbg !19
  %43 = add nsw i32 %.decomposed, -3, !dbg !20
  %44 = add nsw i32 %25, -3, !dbg !20
  %45 = add nsw i32 %.decomposed58, -3, !dbg !20
  %46 = add nsw i32 %28, -3, !dbg !20
  %47 = add nsw i32 %.decomposed60, -3, !dbg !20
  %48 = add nsw i32 %31, -3, !dbg !20
  %49 = add nsw i32 %.decomposed62, -3, !dbg !20
  %50 = add nsw i32 %34, -3, !dbg !20
  %51 = tail call i32 @llvm.abs.i32(i32 %43, i1 true), !dbg !21
  %52 = tail call i32 @llvm.abs.i32(i32 %44, i1 true), !dbg !21
  %53 = tail call i32 @llvm.abs.i32(i32 %45, i1 true), !dbg !21
  %54 = tail call i32 @llvm.abs.i32(i32 %46, i1 true), !dbg !21
  %55 = tail call i32 @llvm.abs.i32(i32 %47, i1 true), !dbg !21
  %56 = tail call i32 @llvm.abs.i32(i32 %48, i1 true), !dbg !21
  %57 = tail call i32 @llvm.abs.i32(i32 %49, i1 true), !dbg !21
  %58 = tail call i32 @llvm.abs.i32(i32 %50, i1 true), !dbg !21
  %59 = add nsw i32 %51, -31, !dbg !22
  %60 = add nsw i32 %52, -31, !dbg !22
  %61 = add nsw i32 %53, -31, !dbg !22
  %62 = add nsw i32 %54, -31, !dbg !22
  %63 = add nsw i32 %55, -31, !dbg !22
  %64 = add nsw i32 %56, -31, !dbg !22
  %65 = add nsw i32 %57, -31, !dbg !22
  %66 = add nsw i32 %58, -31, !dbg !22
  %67 = tail call i32 @llvm.abs.i32(i32 %59, i1 true), !dbg !23
  %68 = tail call i32 @llvm.abs.i32(i32 %60, i1 true), !dbg !23
  %69 = tail call i32 @llvm.abs.i32(i32 %61, i1 true), !dbg !23
  %70 = tail call i32 @llvm.abs.i32(i32 %62, i1 true), !dbg !23
  %71 = tail call i32 @llvm.abs.i32(i32 %63, i1 true), !dbg !23
  %72 = tail call i32 @llvm.abs.i32(i32 %64, i1 true), !dbg !23
  %73 = tail call i32 @llvm.abs.i32(i32 %65, i1 true), !dbg !23
  %74 = tail call i32 @llvm.abs.i32(i32 %66, i1 true), !dbg !23
  %75 = add nsw i32 %35, -3, !dbg !24
  %76 = add nsw i32 %36, -3, !dbg !24
  %77 = add nsw i32 %37, -3, !dbg !24
  %78 = add nsw i32 %38, -3, !dbg !24
  %79 = tail call i32 @llvm.abs.i32(i32 %75, i1 true), !dbg !25
  %80 = tail call i32 @llvm.abs.i32(i32 %76, i1 true), !dbg !25
  %81 = tail call i32 @llvm.abs.i32(i32 %77, i1 true), !dbg !25
  %82 = tail call i32 @llvm.abs.i32(i32 %78, i1 true), !dbg !25
  %83 = add nsw i32 %79, -31, !dbg !26
  %84 = add nsw i32 %80, -31, !dbg !26
  %85 = add nsw i32 %81, -31, !dbg !26
  %86 = add nsw i32 %82, -31, !dbg !26
  %87 = tail call i32 @llvm.abs.i32(i32 %83, i1 true), !dbg !27
  %88 = tail call i32 @llvm.abs.i32(i32 %84, i1 true), !dbg !27
  %89 = tail call i32 @llvm.abs.i32(i32 %85, i1 true), !dbg !27
  %90 = tail call i32 @llvm.abs.i32(i32 %86, i1 true), !dbg !27
  %91 = mul nsw i32 %87, -32, !dbg !28
  %92 = mul nsw i32 %88, -32, !dbg !28
  %93 = mul nsw i32 %89, -32, !dbg !28
  %94 = mul nsw i32 %90, -32, !dbg !28
  %95 = shl nsw i32 %39, 10, !dbg !29
  %96 = shl nsw i32 %40, 10, !dbg !29
  %reass.sub = or disjoint i32 %95, 1023, !dbg !30
  %97 = sub nuw i32 %reass.sub, %67, !dbg !30
  %98 = add i32 %97, %91, !dbg !31
  %99 = sub nuw i32 %reass.sub, %68, !dbg !30
  %100 = add i32 %99, %91, !dbg !31
  %101 = sub nuw i32 %reass.sub, %69, !dbg !30
  %102 = add i32 %101, %92, !dbg !31
  %103 = sub nuw i32 %reass.sub, %70, !dbg !30
  %104 = add i32 %103, %92, !dbg !31
  %reass.sub4 = or disjoint i32 %96, 1023, !dbg !30
  %105 = sub nuw i32 %reass.sub4, %71, !dbg !30
  %106 = add i32 %105, %93, !dbg !31
  %107 = sub nuw i32 %reass.sub4, %72, !dbg !30
  %108 = add i32 %107, %93, !dbg !31
  %109 = sub nuw i32 %reass.sub4, %73, !dbg !30
  %110 = add i32 %109, %94, !dbg !31
  %111 = sub nuw i32 %reass.sub4, %74, !dbg !30
  %112 = add i32 %111, %94, !dbg !31
  %113 = sext i32 %98 to i64, !dbg !32
  %114 = getelementptr float, ptr addrspace(1) %0, i64 %113, !dbg !32
  %115 = sext i32 %100 to i64, !dbg !32
  %116 = getelementptr float, ptr addrspace(1) %0, i64 %115, !dbg !32
  %117 = sext i32 %102 to i64, !dbg !32
  %118 = getelementptr float, ptr addrspace(1) %0, i64 %117, !dbg !32
  %119 = sext i32 %104 to i64, !dbg !32
  %120 = getelementptr float, ptr addrspace(1) %0, i64 %119, !dbg !32
  %121 = sext i32 %106 to i64, !dbg !32
  %122 = getelementptr float, ptr addrspace(1) %0, i64 %121, !dbg !32
  %123 = sext i32 %108 to i64, !dbg !32
  %124 = getelementptr float, ptr addrspace(1) %0, i64 %123, !dbg !32
  %125 = sext i32 %110 to i64, !dbg !32
  %126 = getelementptr float, ptr addrspace(1) %0, i64 %125, !dbg !32
  %127 = sext i32 %112 to i64, !dbg !32
  %128 = getelementptr float, ptr addrspace(1) %0, i64 %127, !dbg !32
  %129 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %114, i1 %21) #3, !dbg !33
  %130 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %116, i1 %21) #3, !dbg !33
  %131 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %118, i1 %21) #3, !dbg !33
  %132 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %120, i1 %21) #3, !dbg !33
  %133 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %122, i1 %22) #3, !dbg !33
  %134 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %124, i1 %22) #3, !dbg !33
  %135 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %126, i1 %22) #3, !dbg !33
  %136 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %128, i1 %22) #3, !dbg !33
  %137 = sext i32 %41 to i64, !dbg !34
  %138 = getelementptr float, ptr addrspace(1) %1, i64 %137, !dbg !34
  %139 = sext i32 %42 to i64, !dbg !34
  %140 = getelementptr float, ptr addrspace(1) %1, i64 %139, !dbg !34
  %141 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %138, i1 %21) #3, !dbg !35
  %142 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %138, i1 %21) #3, !dbg !35
  %143 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %138, i1 %21) #3, !dbg !35
  %144 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %138, i1 %21) #3, !dbg !35
  %145 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %140, i1 %22) #3, !dbg !35
  %146 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %140, i1 %22) #3, !dbg !35
  %147 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %140, i1 %22) #3, !dbg !35
  %148 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %140, i1 %22) #3, !dbg !35
  %149 = getelementptr float, ptr addrspace(1) %2, i64 %137, !dbg !36
  %150 = getelementptr float, ptr addrspace(1) %2, i64 %139, !dbg !36
  %151 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %149, i1 %21) #3, !dbg !37
  %152 = bitcast i32 %151 to float, !dbg !37
  %153 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %149, i1 %21) #3, !dbg !37
  %154 = bitcast i32 %153 to float, !dbg !37
  %155 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %149, i1 %21) #3, !dbg !37
  %156 = bitcast i32 %155 to float, !dbg !37
  %157 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %149, i1 %21) #3, !dbg !37
  %158 = bitcast i32 %157 to float, !dbg !37
  %159 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %150, i1 %22) #3, !dbg !37
  %160 = bitcast i32 %159 to float, !dbg !37
  %161 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %150, i1 %22) #3, !dbg !37
  %162 = bitcast i32 %161 to float, !dbg !37
  %163 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %150, i1 %22) #3, !dbg !37
  %164 = bitcast i32 %163 to float, !dbg !37
  %165 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %150, i1 %22) #3, !dbg !37
  %166 = bitcast i32 %165 to float, !dbg !37
  %167 = getelementptr float, ptr addrspace(1) %3, i64 %137, !dbg !38
  %168 = getelementptr float, ptr addrspace(1) %3, i64 %139, !dbg !38
  %169 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %167, i1 %21) #3, !dbg !39
  %170 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %167, i1 %21) #3, !dbg !39
  %171 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %167, i1 %21) #3, !dbg !39
  %172 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %167, i1 %21) #3, !dbg !39
  %173 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %168, i1 %22) #3, !dbg !39
  %174 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %168, i1 %22) #3, !dbg !39
  %175 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %168, i1 %22) #3, !dbg !39
  %176 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %168, i1 %22) #3, !dbg !39
  %177 = getelementptr float, ptr addrspace(1) %4, i64 %137, !dbg !40
  %178 = getelementptr float, ptr addrspace(1) %4, i64 %139, !dbg !40
  %179 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %177, i1 %21) #3, !dbg !41
  %180 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %177, i1 %21) #3, !dbg !41
  %181 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %177, i1 %21) #3, !dbg !41
  %182 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %177, i1 %21) #3, !dbg !41
  %183 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %178, i1 %22) #3, !dbg !41
  %184 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %178, i1 %22) #3, !dbg !41
  %185 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %178, i1 %22) #3, !dbg !41
  %186 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %178, i1 %22) #3, !dbg !41
  %187 = fadd float %152, 0x3EE4F8B580000000, !dbg !42
  %188 = fadd float %154, 0x3EE4F8B580000000, !dbg !42
  %189 = fadd float %156, 0x3EE4F8B580000000, !dbg !42
  %190 = fadd float %158, 0x3EE4F8B580000000, !dbg !42
  %191 = fadd float %160, 0x3EE4F8B580000000, !dbg !42
  %192 = fadd float %162, 0x3EE4F8B580000000, !dbg !42
  %193 = fadd float %164, 0x3EE4F8B580000000, !dbg !42
  %194 = fadd float %166, 0x3EE4F8B580000000, !dbg !42
  %195 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !43
  %.not.i = icmp eq i32 %195, 0, !dbg !43
  %196 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !43
  %.not1.i = icmp eq i32 %196, 0, !dbg !43
  br i1 %.not.i, label %202, label %197, !dbg !43

197:                                              ; preds = %7
  br i1 %.not1.i, label %200, label %198, !dbg !43

198:                                              ; preds = %197
  %199 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %187) #3, !dbg !43
  br label %__nv_sqrtf.exit, !dbg !43

200:                                              ; preds = %197
  %201 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %187) #3, !dbg !43
  br label %__nv_sqrtf.exit, !dbg !43

202:                                              ; preds = %7
  br i1 %.not1.i, label %205, label %203, !dbg !43

203:                                              ; preds = %202
  %204 = tail call float @llvm.nvvm.sqrt.rn.f(float %187) #3, !dbg !43
  br label %__nv_sqrtf.exit, !dbg !43

205:                                              ; preds = %202
  %206 = tail call float @llvm.nvvm.sqrt.approx.f(float %187) #3, !dbg !43
  br label %__nv_sqrtf.exit, !dbg !43

__nv_sqrtf.exit:                                  ; preds = %198, %200, %203, %205
  %.0.i = phi float [ %199, %198 ], [ %201, %200 ], [ %204, %203 ], [ %206, %205 ], !dbg !43
  %207 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !43
  %.not.i8 = icmp eq i32 %207, 0, !dbg !43
  %208 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !43
  %.not1.i11 = icmp eq i32 %208, 0, !dbg !43
  br i1 %.not.i8, label %214, label %209, !dbg !43

209:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i11, label %212, label %210, !dbg !43

210:                                              ; preds = %209
  %211 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %188) #3, !dbg !43
  br label %__nv_sqrtf.exit12, !dbg !43

212:                                              ; preds = %209
  %213 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %188) #3, !dbg !43
  br label %__nv_sqrtf.exit12, !dbg !43

214:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i11, label %217, label %215, !dbg !43

215:                                              ; preds = %214
  %216 = tail call float @llvm.nvvm.sqrt.rn.f(float %188) #3, !dbg !43
  br label %__nv_sqrtf.exit12, !dbg !43

217:                                              ; preds = %214
  %218 = tail call float @llvm.nvvm.sqrt.approx.f(float %188) #3, !dbg !43
  br label %__nv_sqrtf.exit12, !dbg !43

__nv_sqrtf.exit12:                                ; preds = %210, %212, %215, %217
  %.0.i10 = phi float [ %211, %210 ], [ %213, %212 ], [ %216, %215 ], [ %218, %217 ], !dbg !43
  %219 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !43
  %.not.i13 = icmp eq i32 %219, 0, !dbg !43
  %220 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !43
  %.not1.i16 = icmp eq i32 %220, 0, !dbg !43
  br i1 %.not.i13, label %226, label %221, !dbg !43

221:                                              ; preds = %__nv_sqrtf.exit12
  br i1 %.not1.i16, label %224, label %222, !dbg !43

222:                                              ; preds = %221
  %223 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %189) #3, !dbg !43
  br label %__nv_sqrtf.exit17, !dbg !43

224:                                              ; preds = %221
  %225 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %189) #3, !dbg !43
  br label %__nv_sqrtf.exit17, !dbg !43

226:                                              ; preds = %__nv_sqrtf.exit12
  br i1 %.not1.i16, label %229, label %227, !dbg !43

227:                                              ; preds = %226
  %228 = tail call float @llvm.nvvm.sqrt.rn.f(float %189) #3, !dbg !43
  br label %__nv_sqrtf.exit17, !dbg !43

229:                                              ; preds = %226
  %230 = tail call float @llvm.nvvm.sqrt.approx.f(float %189) #3, !dbg !43
  br label %__nv_sqrtf.exit17, !dbg !43

__nv_sqrtf.exit17:                                ; preds = %222, %224, %227, %229
  %.0.i15 = phi float [ %223, %222 ], [ %225, %224 ], [ %228, %227 ], [ %230, %229 ], !dbg !43
  %231 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !43
  %.not.i18 = icmp eq i32 %231, 0, !dbg !43
  %232 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !43
  %.not1.i21 = icmp eq i32 %232, 0, !dbg !43
  br i1 %.not.i18, label %238, label %233, !dbg !43

233:                                              ; preds = %__nv_sqrtf.exit17
  br i1 %.not1.i21, label %236, label %234, !dbg !43

234:                                              ; preds = %233
  %235 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %190) #3, !dbg !43
  br label %__nv_sqrtf.exit22, !dbg !43

236:                                              ; preds = %233
  %237 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %190) #3, !dbg !43
  br label %__nv_sqrtf.exit22, !dbg !43

238:                                              ; preds = %__nv_sqrtf.exit17
  br i1 %.not1.i21, label %241, label %239, !dbg !43

239:                                              ; preds = %238
  %240 = tail call float @llvm.nvvm.sqrt.rn.f(float %190) #3, !dbg !43
  br label %__nv_sqrtf.exit22, !dbg !43

241:                                              ; preds = %238
  %242 = tail call float @llvm.nvvm.sqrt.approx.f(float %190) #3, !dbg !43
  br label %__nv_sqrtf.exit22, !dbg !43

__nv_sqrtf.exit22:                                ; preds = %234, %236, %239, %241
  %.0.i20 = phi float [ %235, %234 ], [ %237, %236 ], [ %240, %239 ], [ %242, %241 ], !dbg !43
  %243 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !43
  %.not.i23 = icmp eq i32 %243, 0, !dbg !43
  %244 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !43
  %.not1.i26 = icmp eq i32 %244, 0, !dbg !43
  br i1 %.not.i23, label %250, label %245, !dbg !43

245:                                              ; preds = %__nv_sqrtf.exit22
  br i1 %.not1.i26, label %248, label %246, !dbg !43

246:                                              ; preds = %245
  %247 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %191) #3, !dbg !43
  br label %__nv_sqrtf.exit27, !dbg !43

248:                                              ; preds = %245
  %249 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %191) #3, !dbg !43
  br label %__nv_sqrtf.exit27, !dbg !43

250:                                              ; preds = %__nv_sqrtf.exit22
  br i1 %.not1.i26, label %253, label %251, !dbg !43

251:                                              ; preds = %250
  %252 = tail call float @llvm.nvvm.sqrt.rn.f(float %191) #3, !dbg !43
  br label %__nv_sqrtf.exit27, !dbg !43

253:                                              ; preds = %250
  %254 = tail call float @llvm.nvvm.sqrt.approx.f(float %191) #3, !dbg !43
  br label %__nv_sqrtf.exit27, !dbg !43

__nv_sqrtf.exit27:                                ; preds = %246, %248, %251, %253
  %.0.i25 = phi float [ %247, %246 ], [ %249, %248 ], [ %252, %251 ], [ %254, %253 ], !dbg !43
  %255 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !43
  %.not.i28 = icmp eq i32 %255, 0, !dbg !43
  %256 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !43
  %.not1.i31 = icmp eq i32 %256, 0, !dbg !43
  br i1 %.not.i28, label %262, label %257, !dbg !43

257:                                              ; preds = %__nv_sqrtf.exit27
  br i1 %.not1.i31, label %260, label %258, !dbg !43

258:                                              ; preds = %257
  %259 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %192) #3, !dbg !43
  br label %__nv_sqrtf.exit32, !dbg !43

260:                                              ; preds = %257
  %261 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %192) #3, !dbg !43
  br label %__nv_sqrtf.exit32, !dbg !43

262:                                              ; preds = %__nv_sqrtf.exit27
  br i1 %.not1.i31, label %265, label %263, !dbg !43

263:                                              ; preds = %262
  %264 = tail call float @llvm.nvvm.sqrt.rn.f(float %192) #3, !dbg !43
  br label %__nv_sqrtf.exit32, !dbg !43

265:                                              ; preds = %262
  %266 = tail call float @llvm.nvvm.sqrt.approx.f(float %192) #3, !dbg !43
  br label %__nv_sqrtf.exit32, !dbg !43

__nv_sqrtf.exit32:                                ; preds = %258, %260, %263, %265
  %.0.i30 = phi float [ %259, %258 ], [ %261, %260 ], [ %264, %263 ], [ %266, %265 ], !dbg !43
  %267 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !43
  %.not.i33 = icmp eq i32 %267, 0, !dbg !43
  %268 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !43
  %.not1.i36 = icmp eq i32 %268, 0, !dbg !43
  br i1 %.not.i33, label %274, label %269, !dbg !43

269:                                              ; preds = %__nv_sqrtf.exit32
  br i1 %.not1.i36, label %272, label %270, !dbg !43

270:                                              ; preds = %269
  %271 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %193) #3, !dbg !43
  br label %__nv_sqrtf.exit37, !dbg !43

272:                                              ; preds = %269
  %273 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %193) #3, !dbg !43
  br label %__nv_sqrtf.exit37, !dbg !43

274:                                              ; preds = %__nv_sqrtf.exit32
  br i1 %.not1.i36, label %277, label %275, !dbg !43

275:                                              ; preds = %274
  %276 = tail call float @llvm.nvvm.sqrt.rn.f(float %193) #3, !dbg !43
  br label %__nv_sqrtf.exit37, !dbg !43

277:                                              ; preds = %274
  %278 = tail call float @llvm.nvvm.sqrt.approx.f(float %193) #3, !dbg !43
  br label %__nv_sqrtf.exit37, !dbg !43

__nv_sqrtf.exit37:                                ; preds = %270, %272, %275, %277
  %.0.i35 = phi float [ %271, %270 ], [ %273, %272 ], [ %276, %275 ], [ %278, %277 ], !dbg !43
  %279 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !43
  %.not.i38 = icmp eq i32 %279, 0, !dbg !43
  %280 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !43
  %.not1.i41 = icmp eq i32 %280, 0, !dbg !43
  br i1 %.not.i38, label %286, label %281, !dbg !43

281:                                              ; preds = %__nv_sqrtf.exit37
  br i1 %.not1.i41, label %284, label %282, !dbg !43

282:                                              ; preds = %281
  %283 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %194) #3, !dbg !43
  br label %__nv_sqrtf.exit42, !dbg !43

284:                                              ; preds = %281
  %285 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %194) #3, !dbg !43
  br label %__nv_sqrtf.exit42, !dbg !43

286:                                              ; preds = %__nv_sqrtf.exit37
  br i1 %.not1.i41, label %289, label %287, !dbg !43

287:                                              ; preds = %286
  %288 = tail call float @llvm.nvvm.sqrt.rn.f(float %194) #3, !dbg !43
  br label %__nv_sqrtf.exit42, !dbg !43

289:                                              ; preds = %286
  %290 = tail call float @llvm.nvvm.sqrt.approx.f(float %194) #3, !dbg !43
  br label %__nv_sqrtf.exit42, !dbg !43

__nv_sqrtf.exit42:                                ; preds = %282, %284, %287, %289
  %.0.i40 = phi float [ %283, %282 ], [ %285, %284 ], [ %288, %287 ], [ %290, %289 ], !dbg !43
  %291 = insertelement <8 x i32> poison, i32 %136, i64 0, !dbg !33
  %292 = insertelement <8 x i32> %291, i32 %135, i64 1, !dbg !33
  %293 = insertelement <8 x i32> %292, i32 %134, i64 2, !dbg !33
  %294 = insertelement <8 x i32> %293, i32 %133, i64 3, !dbg !33
  %295 = insertelement <8 x i32> %294, i32 %132, i64 4, !dbg !33
  %296 = insertelement <8 x i32> %295, i32 %131, i64 5, !dbg !33
  %297 = insertelement <8 x i32> %296, i32 %130, i64 6, !dbg !33
  %298 = insertelement <8 x i32> %297, i32 %129, i64 7, !dbg !33
  %299 = bitcast <8 x i32> %298 to <8 x float>, !dbg !33
  %300 = insertelement <8 x i32> poison, i32 %148, i64 0, !dbg !35
  %301 = insertelement <8 x i32> %300, i32 %147, i64 1, !dbg !35
  %302 = insertelement <8 x i32> %301, i32 %146, i64 2, !dbg !35
  %303 = insertelement <8 x i32> %302, i32 %145, i64 3, !dbg !35
  %304 = insertelement <8 x i32> %303, i32 %144, i64 4, !dbg !35
  %305 = insertelement <8 x i32> %304, i32 %143, i64 5, !dbg !35
  %306 = insertelement <8 x i32> %305, i32 %142, i64 6, !dbg !35
  %307 = insertelement <8 x i32> %306, i32 %141, i64 7, !dbg !35
  %308 = bitcast <8 x i32> %307 to <8 x float>, !dbg !35
  %309 = insertelement <8 x i32> poison, i32 %186, i64 0, !dbg !41
  %310 = insertelement <8 x i32> %309, i32 %185, i64 1, !dbg !41
  %311 = insertelement <8 x i32> %310, i32 %184, i64 2, !dbg !41
  %312 = insertelement <8 x i32> %311, i32 %183, i64 3, !dbg !41
  %313 = insertelement <8 x i32> %312, i32 %182, i64 4, !dbg !41
  %314 = insertelement <8 x i32> %313, i32 %181, i64 5, !dbg !41
  %315 = insertelement <8 x i32> %314, i32 %180, i64 6, !dbg !41
  %316 = insertelement <8 x i32> %315, i32 %179, i64 7, !dbg !41
  %317 = bitcast <8 x i32> %316 to <8 x float>, !dbg !41
  %318 = insertelement <8 x i32> poison, i32 %176, i64 0, !dbg !39
  %319 = insertelement <8 x i32> %318, i32 %175, i64 1, !dbg !39
  %320 = insertelement <8 x i32> %319, i32 %174, i64 2, !dbg !39
  %321 = insertelement <8 x i32> %320, i32 %173, i64 3, !dbg !39
  %322 = insertelement <8 x i32> %321, i32 %172, i64 4, !dbg !39
  %323 = insertelement <8 x i32> %322, i32 %171, i64 5, !dbg !39
  %324 = insertelement <8 x i32> %323, i32 %170, i64 6, !dbg !39
  %325 = insertelement <8 x i32> %324, i32 %169, i64 7, !dbg !39
  %326 = bitcast <8 x i32> %325 to <8 x float>, !dbg !39
  %327 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !44
  %328 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i10) #3, !dbg !44
  %329 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i15) #3, !dbg !44
  %330 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i20) #3, !dbg !44
  %331 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i25) #3, !dbg !44
  %332 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i30) #3, !dbg !44
  %333 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i35) #3, !dbg !44
  %334 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i40) #3, !dbg !44
  %335 = fsub <8 x float> %299, %308, !dbg !45
  %336 = insertelement <8 x float> poison, float %334, i64 0, !dbg !46
  %337 = insertelement <8 x float> %336, float %333, i64 1, !dbg !46
  %338 = insertelement <8 x float> %337, float %332, i64 2, !dbg !46
  %339 = insertelement <8 x float> %338, float %331, i64 3, !dbg !46
  %340 = insertelement <8 x float> %339, float %330, i64 4, !dbg !46
  %341 = insertelement <8 x float> %340, float %329, i64 5, !dbg !46
  %342 = insertelement <8 x float> %341, float %328, i64 6, !dbg !46
  %343 = insertelement <8 x float> %342, float %327, i64 7, !dbg !46
  %344 = fmul <8 x float> %335, %343, !dbg !46
  %345 = fmul <8 x float> %344, %326, !dbg !47
  %346 = fadd <8 x float> %345, %317, !dbg !48
  %347 = fcmp olt <8 x float> %346, zeroinitializer, !dbg !49
  %348 = extractelement <8 x i1> %347, i64 7, !dbg !53
  %349 = extractelement <8 x i1> %347, i64 6, !dbg !53
  %350 = extractelement <8 x i1> %347, i64 5, !dbg !53
  %351 = extractelement <8 x i1> %347, i64 4, !dbg !53
  %352 = extractelement <8 x i1> %347, i64 3, !dbg !53
  %353 = extractelement <8 x i1> %347, i64 2, !dbg !53
  %354 = extractelement <8 x i1> %347, i64 1, !dbg !53
  %355 = extractelement <8 x i1> %347, i64 0, !dbg !53
  %356 = sext i32 %13 to i64, !dbg !54
  %357 = getelementptr float, ptr addrspace(1) %5, i64 %356, !dbg !54
  %358 = sext i32 %17 to i64, !dbg !54
  %359 = getelementptr float, ptr addrspace(1) %5, i64 %358, !dbg !54
  %bc = bitcast <8 x float> %346 to <8 x i32>, !dbg !55
  %360 = extractelement <8 x i32> %bc, i64 7, !dbg !55
  %361 = select i1 %348, i32 0, i32 %360, !dbg !53
  %bc50 = bitcast <8 x float> %346 to <8 x i32>, !dbg !55
  %362 = extractelement <8 x i32> %bc50, i64 6, !dbg !55
  %363 = select i1 %349, i32 0, i32 %362, !dbg !53
  %bc51 = bitcast <8 x float> %346 to <8 x i32>, !dbg !55
  %364 = extractelement <8 x i32> %bc51, i64 5, !dbg !55
  %365 = select i1 %350, i32 0, i32 %364, !dbg !53
  %bc52 = bitcast <8 x float> %346 to <8 x i32>, !dbg !55
  %366 = extractelement <8 x i32> %bc52, i64 4, !dbg !55
  %367 = select i1 %351, i32 0, i32 %366, !dbg !53
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %361, i32 %363, i32 %365, i32 %367, ptr addrspace(1) %357, i1 %21) #3, !dbg !55
  %bc53 = bitcast <8 x float> %346 to <8 x i32>, !dbg !55
  %368 = extractelement <8 x i32> %bc53, i64 3, !dbg !55
  %369 = select i1 %352, i32 0, i32 %368, !dbg !53
  %bc54 = bitcast <8 x float> %346 to <8 x i32>, !dbg !55
  %370 = extractelement <8 x i32> %bc54, i64 2, !dbg !55
  %371 = select i1 %353, i32 0, i32 %370, !dbg !53
  %bc55 = bitcast <8 x float> %346 to <8 x i32>, !dbg !55
  %372 = extractelement <8 x i32> %bc55, i64 1, !dbg !55
  %373 = select i1 %354, i32 0, i32 %372, !dbg !53
  %bc56 = bitcast <8 x float> %346 to <8 x i32>, !dbg !55
  %374 = extractelement <8 x i32> %bc56, i64 0, !dbg !55
  %375 = select i1 %355, i32 0, i32 %374, !dbg !53
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %369, i32 %371, i32 %373, i32 %375, ptr addrspace(1) %359, i1 %22) #3, !dbg !55
  ret void, !dbg !56
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.abs.i32(i32, i1 immarg) #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c4itupefqdd4vefqmpz7go7t5wts2oqzs3bazwpk7lui6fawb2b5.py", directory: "inductor_cache/4i")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_reflection_pad2d_relu_8, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_reflection_pad2d_relu_8, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_reflection_pad2d_relu_8", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_reflection_pad2d_relu_8", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 19, scope: !7)
!17 = !DILocation(line: 25, column: 27, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 27, column: 29, scope: !7)
!20 = !DILocation(line: 29, column: 82, scope: !7)
!21 = !DILocation(line: 29, column: 75, scope: !7)
!22 = !DILocation(line: 29, column: 63, scope: !7)
!23 = !DILocation(line: 29, column: 55, scope: !7)
!24 = !DILocation(line: 29, column: 136, scope: !7)
!25 = !DILocation(line: 29, column: 129, scope: !7)
!26 = !DILocation(line: 29, column: 117, scope: !7)
!27 = !DILocation(line: 29, column: 109, scope: !7)
!28 = !DILocation(line: 29, column: 97, scope: !7)
!29 = !DILocation(line: 29, column: 149, scope: !7)
!30 = !DILocation(line: 29, column: 91, scope: !7)
!31 = !DILocation(line: 29, column: 144, scope: !7)
!32 = !DILocation(line: 29, column: 30, scope: !7)
!33 = !DILocation(line: 29, column: 154, scope: !7)
!34 = !DILocation(line: 30, column: 30, scope: !7)
!35 = !DILocation(line: 30, column: 35, scope: !7)
!36 = !DILocation(line: 31, column: 30, scope: !7)
!37 = !DILocation(line: 31, column: 35, scope: !7)
!38 = !DILocation(line: 32, column: 31, scope: !7)
!39 = !DILocation(line: 32, column: 36, scope: !7)
!40 = !DILocation(line: 33, column: 31, scope: !7)
!41 = !DILocation(line: 33, column: 36, scope: !7)
!42 = !DILocation(line: 36, column: 18, scope: !7)
!43 = !DILocation(line: 37, column: 26, scope: !7)
!44 = !DILocation(line: 39, column: 18, scope: !7)
!45 = !DILocation(line: 34, column: 18, scope: !7)
!46 = !DILocation(line: 42, column: 19, scope: !7)
!47 = !DILocation(line: 43, column: 20, scope: !7)
!48 = !DILocation(line: 44, column: 20, scope: !7)
!49 = !DILocation(line: 118, column: 15, scope: !50, inlinedAt: !52)
!50 = distinct !DILexicalBlockFile(scope: !7, file: !51, discriminator: 0)
!51 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!52 = !DILocation(line: 46, column: 42, scope: !7)
!53 = !DILocation(line: 121, column: 29, scope: !50, inlinedAt: !52)
!54 = !DILocation(line: 47, column: 25, scope: !7)
!55 = !DILocation(line: 47, column: 37, scope: !7)
!56 = !DILocation(line: 47, column: 4, scope: !7)
