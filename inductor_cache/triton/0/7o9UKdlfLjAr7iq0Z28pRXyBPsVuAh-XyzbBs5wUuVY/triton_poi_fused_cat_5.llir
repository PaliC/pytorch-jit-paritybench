; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_5(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) nocapture readnone %7, ptr addrspace(1) nocapture readnone %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) nocapture readnone %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, i32 %15) local_unnamed_addr !dbg !7 {
  %17 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %18 = shl i32 %17, 8, !dbg !11
  %19 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %20 = shl i32 %19, 1, !dbg !12
  %21 = and i32 %20, 254, !dbg !12
  %22 = or disjoint i32 %18, %21, !dbg !13
  %23 = icmp slt i32 %22, 256, !dbg !14
  %.frozen = freeze i32 %22, !dbg !15
  %24 = sdiv i32 %.frozen, 16, !dbg !15
  %25 = srem i32 %24, 4, !dbg !16
  %26 = sdiv i32 %22, 64, !dbg !17
  %27 = mul i32 %24, 16, !dbg !18
  %.decomposed = sub i32 %.frozen, %27, !dbg !18
  %.frozen1 = freeze i32 %22, !dbg !19
  %28 = sdiv i32 %.frozen1, 4, !dbg !19
  %29 = srem i32 %28, 4, !dbg !20
  %30 = mul i32 %28, 4, !dbg !21
  %.decomposed2 = sub i32 %.frozen1, %30, !dbg !21
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %1, i1 true) #1, !dbg !22
  %32 = bitcast i32 %31 to float, !dbg !22
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %3, i1 true) #1, !dbg !23
  %34 = bitcast i32 %33 to float, !dbg !23
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %5, i1 true) #1, !dbg !24
  %36 = bitcast i32 %35 to float, !dbg !24
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %10, i1 true) #1, !dbg !25
  %38 = bitcast i32 %37 to float, !dbg !25
  %39 = icmp slt i32 %25, 1, !dbg !26
  %40 = shl nsw i32 %26, 4, !dbg !27
  %41 = add nsw i32 %40, %.decomposed, !dbg !28
  %42 = sext i32 %41 to i64, !dbg !29
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !29
  %44 = and i1 %23, %39, !dbg !30
  %45 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %43, i1 %44, i32 0, i1 %44, i32 0, i1 %44) #1, !dbg !31
  %46 = extractvalue { i32, i32 } %45, 0, !dbg !31
  %47 = extractvalue { i32, i32 } %45, 1, !dbg !31
  %48 = bitcast i32 %46 to float, !dbg !31
  %49 = bitcast i32 %47 to float, !dbg !31
  %50 = fadd float %32, %48, !dbg !32
  %51 = fadd float %32, %49, !dbg !32
  %52 = icmp eq i32 %25, 1, !dbg !33
  %53 = getelementptr float, ptr addrspace(1) %2, i64 %42, !dbg !34
  %54 = and i1 %23, %52, !dbg !35
  %55 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %53, i1 %54, i32 0, i1 %54, i32 0, i1 %54) #1, !dbg !36
  %56 = extractvalue { i32, i32 } %55, 0, !dbg !36
  %57 = extractvalue { i32, i32 } %55, 1, !dbg !36
  %58 = bitcast i32 %56 to float, !dbg !36
  %59 = bitcast i32 %57 to float, !dbg !36
  %60 = fadd float %34, %58, !dbg !37
  %61 = fadd float %34, %59, !dbg !37
  %62 = icmp eq i32 %25, 2, !dbg !38
  %63 = getelementptr float, ptr addrspace(1) %4, i64 %42, !dbg !39
  %64 = and i1 %23, %62, !dbg !40
  %65 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %63, i1 %64, i32 0, i1 %64, i32 0, i1 %64) #1, !dbg !41
  %66 = extractvalue { i32, i32 } %65, 0, !dbg !41
  %67 = extractvalue { i32, i32 } %65, 1, !dbg !41
  %68 = bitcast i32 %66 to float, !dbg !41
  %69 = bitcast i32 %67 to float, !dbg !41
  %70 = fadd float %36, %68, !dbg !42
  %71 = fadd float %36, %69, !dbg !42
  %72 = icmp sgt i32 %25, 2, !dbg !43
  %73 = getelementptr float, ptr addrspace(1) %6, i64 %42, !dbg !44
  %74 = and i1 %23, %72, !dbg !45
  %75 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %73, i1 %74, i32 0, i1 %74, i32 0, i1 %74) #1, !dbg !46
  %76 = extractvalue { i32, i32 } %75, 0, !dbg !46
  %77 = extractvalue { i32, i32 } %75, 1, !dbg !46
  %78 = bitcast i32 %76 to float, !dbg !46
  %79 = bitcast i32 %77 to float, !dbg !46
  %80 = sext i32 %26 to i64, !dbg !47
  %81 = getelementptr float, ptr addrspace(1) %9, i64 %80, !dbg !47
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %81, i1 %74, i32 0, i1 %74) #1, !dbg !48
  %83 = bitcast i32 %82 to float, !dbg !48
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %81, i1 %74, i32 0, i1 %74) #1, !dbg !48
  %85 = bitcast i32 %84 to float, !dbg !48
  %86 = fadd float %38, %83, !dbg !49
  %87 = fadd float %38, %85, !dbg !49
  %88 = fcmp olt float %86, 0.000000e+00, !dbg !50
  %89 = fcmp olt float %87, 0.000000e+00, !dbg !50
  %90 = select i1 %88, float 0.000000e+00, float %86, !dbg !54
  %91 = select i1 %89, float 0.000000e+00, float %87, !dbg !54
  %92 = fsub float %90, %90, !dbg !55
  %93 = fsub float %91, %91, !dbg !55
  %94 = sext i32 %.decomposed2 to i64, !dbg !56
  %95 = getelementptr float, ptr addrspace(1) %12, i64 %94, !dbg !56
  %96 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %95, i1 %74, i32 0, i1 %74, i32 0, i1 %74) #1, !dbg !57
  %97 = extractvalue { i32, i32 } %96, 0, !dbg !57
  %98 = extractvalue { i32, i32 } %96, 1, !dbg !57
  %99 = bitcast i32 %97 to float, !dbg !57
  %100 = bitcast i32 %98 to float, !dbg !57
  %101 = fmul float %92, %99, !dbg !58
  %102 = fmul float %93, %100, !dbg !58
  %103 = fadd float %90, %101, !dbg !59
  %104 = fadd float %91, %102, !dbg !59
  %105 = fsub float %103, %78, !dbg !60
  %106 = fsub float %104, %79, !dbg !60
  %107 = sext i32 %29 to i64, !dbg !61
  %108 = getelementptr float, ptr addrspace(1) %13, i64 %107, !dbg !61
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %108, i1 %74, i32 0, i1 %74) #1, !dbg !62
  %110 = bitcast i32 %109 to float, !dbg !62
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %108, i1 %74, i32 0, i1 %74) #1, !dbg !62
  %112 = bitcast i32 %111 to float, !dbg !62
  %113 = fmul float %105, %110, !dbg !63
  %114 = fmul float %106, %112, !dbg !63
  %115 = fadd float %113, %78, !dbg !64
  %116 = fadd float %114, %79, !dbg !64
  %117 = select i1 %72, float %115, float 0.000000e+00, !dbg !65
  %118 = select i1 %72, float %116, float 0.000000e+00, !dbg !65
  %119 = select i1 %62, float %70, float %117, !dbg !66
  %120 = select i1 %62, float %71, float %118, !dbg !66
  %121 = select i1 %52, float %60, float %119, !dbg !66
  %122 = select i1 %52, float %61, float %120, !dbg !66
  %123 = select i1 %39, float %50, float %121, !dbg !66
  %124 = select i1 %39, float %51, float %122, !dbg !66
  %125 = sext i32 %22 to i64, !dbg !67
  %126 = getelementptr float, ptr addrspace(1) %14, i64 %125, !dbg !67
  %127 = bitcast float %123 to i32, !dbg !68
  %128 = bitcast float %124 to i32, !dbg !68
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %127, i32 %128, ptr addrspace(1) %126, i1 %23) #1, !dbg !68
  ret void, !dbg !69
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ccsu53wpb6pzegwc3wuu6pauwdfsb2nz56jatjkwjatbluu45ok3.py", directory: "inductor_cache/cs")
!4 = !{ptr @triton_poi_fused_cat_5, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_5, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_5", linkageName: "triton_poi_fused_cat_5", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 27, scope: !7)
!17 = !DILocation(line: 25, column: 19, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 27, column: 26, scope: !7)
!21 = !DILocation(line: 28, column: 19, scope: !7)
!22 = !DILocation(line: 30, column: 19, scope: !7)
!23 = !DILocation(line: 32, column: 20, scope: !7)
!24 = !DILocation(line: 34, column: 20, scope: !7)
!25 = !DILocation(line: 36, column: 20, scope: !7)
!26 = !DILocation(line: 42, column: 18, scope: !7)
!27 = !DILocation(line: 43, column: 38, scope: !7)
!28 = !DILocation(line: 43, column: 35, scope: !7)
!29 = !DILocation(line: 43, column: 30, scope: !7)
!30 = !DILocation(line: 43, column: 50, scope: !7)
!31 = !DILocation(line: 43, column: 43, scope: !7)
!32 = !DILocation(line: 44, column: 18, scope: !7)
!33 = !DILocation(line: 50, column: 20, scope: !7)
!34 = !DILocation(line: 51, column: 31, scope: !7)
!35 = !DILocation(line: 51, column: 52, scope: !7)
!36 = !DILocation(line: 51, column: 44, scope: !7)
!37 = !DILocation(line: 52, column: 20, scope: !7)
!38 = !DILocation(line: 58, column: 20, scope: !7)
!39 = !DILocation(line: 59, column: 31, scope: !7)
!40 = !DILocation(line: 59, column: 52, scope: !7)
!41 = !DILocation(line: 59, column: 44, scope: !7)
!42 = !DILocation(line: 60, column: 20, scope: !7)
!43 = !DILocation(line: 63, column: 20, scope: !7)
!44 = !DILocation(line: 66, column: 31, scope: !7)
!45 = !DILocation(line: 66, column: 52, scope: !7)
!46 = !DILocation(line: 66, column: 44, scope: !7)
!47 = !DILocation(line: 76, column: 31, scope: !7)
!48 = !DILocation(line: 76, column: 36, scope: !7)
!49 = !DILocation(line: 77, column: 20, scope: !7)
!50 = !DILocation(line: 118, column: 15, scope: !51, inlinedAt: !53)
!51 = distinct !DILexicalBlockFile(scope: !7, file: !52, discriminator: 0)
!52 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!53 = !DILocation(line: 79, column: 42, scope: !7)
!54 = !DILocation(line: 121, column: 29, scope: !51, inlinedAt: !53)
!55 = !DILocation(line: 84, column: 20, scope: !7)
!56 = !DILocation(line: 85, column: 32, scope: !7)
!57 = !DILocation(line: 85, column: 37, scope: !7)
!58 = !DILocation(line: 86, column: 20, scope: !7)
!59 = !DILocation(line: 87, column: 20, scope: !7)
!60 = !DILocation(line: 88, column: 20, scope: !7)
!61 = !DILocation(line: 89, column: 32, scope: !7)
!62 = !DILocation(line: 89, column: 37, scope: !7)
!63 = !DILocation(line: 90, column: 20, scope: !7)
!64 = !DILocation(line: 91, column: 20, scope: !7)
!65 = !DILocation(line: 93, column: 35, scope: !7)
!66 = !DILocation(line: 0, scope: !7)
!67 = !DILocation(line: 97, column: 25, scope: !7)
!68 = !DILocation(line: 97, column: 37, scope: !7)
!69 = !DILocation(line: 97, column: 4, scope: !7)
