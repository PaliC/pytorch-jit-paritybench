; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused_add_div_gelu_mean_mul_pow_sqrt_sub_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %10 = icmp slt i32 %9, 1024, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = and i32 %11, 15, !dbg !12
  %13 = shl i32 %9, 4, !dbg !13
  %14 = or disjoint i32 %13, %12, !dbg !14
  %15 = sext i32 %14 to i64, !dbg !15
  %16 = getelementptr float, ptr addrspace(1) %3, i64 %15, !dbg !15
  %17 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %16, i1 %10, i32 0, i1 %10) #5, !dbg !16
  %18 = bitcast i32 %17 to float, !dbg !16
  %19 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %16, i1 %10, i32 0, i1 %10) #5, !dbg !16
  %20 = bitcast i32 %19 to float, !dbg !16
  %21 = zext nneg i32 %12 to i64, !dbg !17
  %22 = getelementptr float, ptr addrspace(1) %4, i64 %21, !dbg !17
  %23 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %22, i1 true) #5, !dbg !18
  %24 = bitcast i32 %23 to float, !dbg !18
  %25 = getelementptr float, ptr addrspace(1) %5, i64 %21, !dbg !19
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 true) #5, !dbg !20
  %27 = bitcast i32 %26 to float, !dbg !20
  %28 = select i1 %10, float %18, float 0.000000e+00, !dbg !21
  %29 = select i1 %10, float %20, float 0.000000e+00, !dbg !21
  %30 = bitcast float %28 to i32, !dbg !22
  %31 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %30, i32 8, i32 31), !dbg !22
  %32 = bitcast i32 %31 to float, !dbg !22
  %33 = fadd float %28, %32, !dbg !26
  %34 = bitcast float %33 to i32, !dbg !22
  %35 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %34, i32 4, i32 31), !dbg !22
  %36 = bitcast i32 %35 to float, !dbg !22
  %37 = fadd float %33, %36, !dbg !26
  %38 = bitcast float %37 to i32, !dbg !22
  %39 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %38, i32 2, i32 31), !dbg !22
  %40 = bitcast i32 %39 to float, !dbg !22
  %41 = fadd float %37, %40, !dbg !26
  %42 = bitcast float %41 to i32, !dbg !22
  %43 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %42, i32 1, i32 31), !dbg !22
  %44 = bitcast i32 %43 to float, !dbg !22
  %45 = fadd float %41, %44, !dbg !26
  %46 = bitcast float %29 to i32, !dbg !22
  %47 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %46, i32 8, i32 31), !dbg !22
  %48 = bitcast i32 %47 to float, !dbg !22
  %49 = fadd float %29, %48, !dbg !26
  %50 = bitcast float %49 to i32, !dbg !22
  %51 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %50, i32 4, i32 31), !dbg !22
  %52 = bitcast i32 %51 to float, !dbg !22
  %53 = fadd float %49, %52, !dbg !26
  %54 = bitcast float %53 to i32, !dbg !22
  %55 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %54, i32 2, i32 31), !dbg !22
  %56 = bitcast i32 %55 to float, !dbg !22
  %57 = fadd float %53, %56, !dbg !26
  %58 = bitcast float %57 to i32, !dbg !22
  %59 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %58, i32 1, i32 31), !dbg !22
  %60 = bitcast i32 %59 to float, !dbg !22
  %61 = fadd float %57, %60, !dbg !26
  %62 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %45, float 1.600000e+01) #5, !dbg !28
  %63 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %61, float 1.600000e+01) #5, !dbg !28
  %64 = fsub float %18, %62, !dbg !29
  %65 = fsub float %20, %63, !dbg !29
  %66 = fmul float %64, %64, !dbg !30
  %67 = fmul float %65, %65, !dbg !30
  %68 = select i1 %10, float %66, float 0.000000e+00, !dbg !31
  %69 = select i1 %10, float %67, float 0.000000e+00, !dbg !31
  %70 = bitcast float %68 to i32, !dbg !32
  %71 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %70, i32 8, i32 31), !dbg !32
  %72 = bitcast i32 %71 to float, !dbg !32
  %73 = fadd float %68, %72, !dbg !34
  %74 = bitcast float %73 to i32, !dbg !32
  %75 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %74, i32 4, i32 31), !dbg !32
  %76 = bitcast i32 %75 to float, !dbg !32
  %77 = fadd float %73, %76, !dbg !34
  %78 = bitcast float %77 to i32, !dbg !32
  %79 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %78, i32 2, i32 31), !dbg !32
  %80 = bitcast i32 %79 to float, !dbg !32
  %81 = fadd float %77, %80, !dbg !34
  %82 = bitcast float %81 to i32, !dbg !32
  %83 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %82, i32 1, i32 31), !dbg !32
  %84 = bitcast i32 %83 to float, !dbg !32
  %85 = fadd float %81, %84, !dbg !34
  %86 = bitcast float %69 to i32, !dbg !32
  %87 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %86, i32 8, i32 31), !dbg !32
  %88 = bitcast i32 %87 to float, !dbg !32
  %89 = fadd float %69, %88, !dbg !34
  %90 = bitcast float %89 to i32, !dbg !32
  %91 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %90, i32 4, i32 31), !dbg !32
  %92 = bitcast i32 %91 to float, !dbg !32
  %93 = fadd float %89, %92, !dbg !34
  %94 = bitcast float %93 to i32, !dbg !32
  %95 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %94, i32 2, i32 31), !dbg !32
  %96 = bitcast i32 %95 to float, !dbg !32
  %97 = fadd float %93, %96, !dbg !34
  %98 = bitcast float %97 to i32, !dbg !32
  %99 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %98, i32 1, i32 31), !dbg !32
  %100 = bitcast i32 %99 to float, !dbg !32
  %101 = fadd float %97, %100, !dbg !34
  %102 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %85, float 1.600000e+01) #5, !dbg !35
  %103 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %101, float 1.600000e+01) #5, !dbg !35
  %104 = fadd float %102, 0x3EB0C6F7A0000000, !dbg !36
  %105 = fadd float %103, 0x3EB0C6F7A0000000, !dbg !36
  %106 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !37
  %.not.i = icmp eq i32 %106, 0, !dbg !37
  %107 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !37
  %.not1.i = icmp eq i32 %107, 0, !dbg !37
  br i1 %.not.i, label %113, label %108, !dbg !37

108:                                              ; preds = %8
  br i1 %.not1.i, label %111, label %109, !dbg !37

109:                                              ; preds = %108
  %110 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %104) #5, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

111:                                              ; preds = %108
  %112 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %104) #5, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

113:                                              ; preds = %8
  br i1 %.not1.i, label %116, label %114, !dbg !37

114:                                              ; preds = %113
  %115 = tail call float @llvm.nvvm.sqrt.rn.f(float %104) #5, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

116:                                              ; preds = %113
  %117 = tail call float @llvm.nvvm.sqrt.approx.f(float %104) #5, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

__nv_sqrtf.exit:                                  ; preds = %109, %111, %114, %116
  %.0.i = phi float [ %110, %109 ], [ %112, %111 ], [ %115, %114 ], [ %117, %116 ], !dbg !37
  %118 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !37
  %.not.i1 = icmp eq i32 %118, 0, !dbg !37
  %119 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !37
  %.not1.i4 = icmp eq i32 %119, 0, !dbg !37
  br i1 %.not.i1, label %125, label %120, !dbg !37

120:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %123, label %121, !dbg !37

121:                                              ; preds = %120
  %122 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %105) #5, !dbg !37
  br label %__nv_sqrtf.exit5, !dbg !37

123:                                              ; preds = %120
  %124 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %105) #5, !dbg !37
  br label %__nv_sqrtf.exit5, !dbg !37

125:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %128, label %126, !dbg !37

126:                                              ; preds = %125
  %127 = tail call float @llvm.nvvm.sqrt.rn.f(float %105) #5, !dbg !37
  br label %__nv_sqrtf.exit5, !dbg !37

128:                                              ; preds = %125
  %129 = tail call float @llvm.nvvm.sqrt.approx.f(float %105) #5, !dbg !37
  br label %__nv_sqrtf.exit5, !dbg !37

__nv_sqrtf.exit5:                                 ; preds = %121, %123, %126, %128
  %.0.i3 = phi float [ %122, %121 ], [ %124, %123 ], [ %127, %126 ], [ %129, %128 ], !dbg !37
  %130 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %64, float %.0.i) #5, !dbg !38
  %131 = fmul float %130, %24, !dbg !39
  %132 = fadd float %131, %27, !dbg !40
  %133 = fmul float %132, 0x3FE6A09E60000000, !dbg !41
  %134 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !42
  %.not.i6 = icmp eq i32 %134, 0, !dbg !42
  %135 = tail call float @llvm.nvvm.fabs.ftz.f(float %133) #5, !dbg !42
  %136 = tail call float @llvm.nvvm.fabs.f(float %133) #5, !dbg !42
  %.0.i7 = select i1 %.not.i6, float %136, float %135, !dbg !42
  %137 = fcmp oge float %.0.i7, 0x3FF00C1FC0000000, !dbg !42
  br i1 %137, label %__nv_fabsf.exit1.i, label %139, !dbg !42

__nv_fabsf.exit1.i:                               ; preds = %__nv_sqrtf.exit5
  %138 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !42
  %.not1.i9 = icmp eq i32 %138, 0, !dbg !42
  %.01.i = select i1 %.not1.i9, float %136, float %135, !dbg !42
  br label %__internal_fmad.exit.i, !dbg !42

139:                                              ; preds = %__nv_sqrtf.exit5
  %140 = fmul float %133, %133, !dbg !42
  br label %__internal_fmad.exit.i, !dbg !42

__internal_fmad.exit.i:                           ; preds = %139, %__nv_fabsf.exit1.i
  %141 = phi float [ 0x3FE41B0840000000, %__nv_fabsf.exit1.i ], [ 0x3FC06EBA60000000, %139 ], !dbg !42
  %142 = phi float [ 0x3FED526FC0000000, %__nv_fabsf.exit1.i ], [ 0xBFD8127580000000, %139 ], !dbg !42
  %143 = phi float [ 0x3FC39F20C0000000, %__nv_fabsf.exit1.i ], [ 0x3FBCE315E0000000, %139 ], !dbg !42
  %144 = phi float [ 0xBFA1902C40000000, %__nv_fabsf.exit1.i ], [ 0xBF9B837CE0000000, %139 ], !dbg !42
  %145 = phi float [ 0x3F75908160000000, %__nv_fabsf.exit1.i ], [ 0x3F755ABD40000000, %139 ], !dbg !42
  %146 = phi float [ 0xBF3EAC1720000000, %__nv_fabsf.exit1.i ], [ 0xBF4AE9A400000000, %139 ], !dbg !42
  %147 = phi float [ 0x3EF1394780000000, %__nv_fabsf.exit1.i ], [ 0x3F163D2D40000000, %139 ], !dbg !42
  %148 = phi float [ %.01.i, %__nv_fabsf.exit1.i ], [ %140, %139 ], !dbg !42
  %149 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !42
  %.not2.i8 = icmp eq i32 %149, 0, !dbg !42
  %150 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %147, float %148, float %146) #5, !dbg !42
  %151 = tail call float @llvm.nvvm.fma.rn.f(float %147, float %148, float %146) #5, !dbg !42
  %.02.i = select i1 %.not2.i8, float %151, float %150, !dbg !42
  %152 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !42
  %.not3.i = icmp eq i32 %152, 0, !dbg !42
  %153 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i, float %148, float %145) #5, !dbg !42
  %154 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i, float %148, float %145) #5, !dbg !42
  %.03.i = select i1 %.not3.i, float %154, float %153, !dbg !42
  %155 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !42
  %.not4.i = icmp eq i32 %155, 0, !dbg !42
  %156 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.03.i, float %148, float %144) #5, !dbg !42
  %157 = tail call float @llvm.nvvm.fma.rn.f(float %.03.i, float %148, float %144) #5, !dbg !42
  %.04.i = select i1 %.not4.i, float %157, float %156, !dbg !42
  %158 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !42
  %.not5.i = icmp eq i32 %158, 0, !dbg !42
  %159 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i, float %148, float %143) #5, !dbg !42
  %160 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i, float %148, float %143) #5, !dbg !42
  %.05.i = select i1 %.not5.i, float %160, float %159, !dbg !42
  %161 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !42
  %.not6.i = icmp eq i32 %161, 0, !dbg !42
  %162 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i, float %148, float %142) #5, !dbg !42
  %163 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i, float %148, float %142) #5, !dbg !42
  %.06.i = select i1 %.not6.i, float %163, float %162, !dbg !42
  %164 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !42
  %.not7.i = icmp eq i32 %164, 0, !dbg !42
  %165 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i, float %148, float %141) #5, !dbg !42
  %166 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i, float %148, float %141) #5, !dbg !42
  %.07.i = select i1 %.not7.i, float %166, float %165, !dbg !42
  %167 = fneg float %148, !dbg !42
  %168 = select i1 %137, float %167, float %133, !dbg !42
  %169 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !42
  %.not8.i = icmp eq i32 %169, 0, !dbg !42
  %170 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.07.i, float %168, float %168) #5, !dbg !42
  %171 = tail call float @llvm.nvvm.fma.rn.f(float %.07.i, float %168, float %168) #5, !dbg !42
  %.08.i = select i1 %.not8.i, float %171, float %170, !dbg !42
  br i1 %137, label %172, label %__nv_erff.exit, !dbg !42

172:                                              ; preds = %__internal_fmad.exit.i
  %173 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %.08.i) #5, !dbg !42
  %174 = fsub float 1.000000e+00, %173, !dbg !42
  %175 = bitcast float %174 to i32, !dbg !42
  %176 = bitcast float %133 to i32, !dbg !42
  %177 = and i32 %176, -2147483648, !dbg !42
  %178 = or i32 %177, %175, !dbg !42
  %179 = bitcast i32 %178 to float, !dbg !42
  br label %__nv_erff.exit, !dbg !42

__nv_erff.exit:                                   ; preds = %__internal_fmad.exit.i, %172
  %r.0.i = phi float [ %179, %172 ], [ %.08.i, %__internal_fmad.exit.i ], !dbg !42
  %180 = fmul float %132, 5.000000e-01, !dbg !43
  %181 = fadd float %r.0.i, 1.000000e+00, !dbg !44
  %182 = fmul float %180, %181, !dbg !45
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %183 = sext i32 %9 to i64, !dbg !47
  %184 = getelementptr float, ptr addrspace(1) %0, i64 %183, !dbg !47
  %urem = and i32 %11, 63, !dbg !48
  %185 = icmp eq i32 %urem, 0, !dbg !48
  %186 = bitcast float %63 to i32, !dbg !48
  %187 = and i1 %185, %10, !dbg !48
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %186, ptr addrspace(1) %184, i1 %187) #5, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %188 = getelementptr float, ptr addrspace(1) %1, i64 %183, !dbg !50
  %189 = bitcast float %.0.i3 to i32, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %189, ptr addrspace(1) %188, i1 %187) #5, !dbg !51
  %190 = getelementptr float, ptr addrspace(1) %2, i64 %15, !dbg !52
  %191 = and i32 %11, 48, !dbg !53
  %192 = icmp eq i32 %191, 0, !dbg !53
  %193 = bitcast float %182 to i32, !dbg !53
  %194 = and i1 %192, %10, !dbg !53
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %193, ptr addrspace(1) %190, i1 %194) #5, !dbg !53
  ret void, !dbg !54
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.ftz.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.ftz.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c7tef54z25uumihhncepm2cyxrnfh6jcgraxkmxn54dlydxrqgmb.py", directory: "inductor_cache/7t")
!4 = !{ptr @triton_per_fused_add_div_gelu_mean_mul_pow_sqrt_sub_2, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_div_gelu_mean_mul_pow_sqrt_sub_2, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_div_gelu_mean_mul_pow_sqrt_sub_2", linkageName: "triton_per_fused_add_div_gelu_mean_mul_pow_sqrt_sub_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 21, scope: !7)
!12 = !DILocation(line: 26, column: 34, scope: !7)
!13 = !DILocation(line: 31, column: 38, scope: !7)
!14 = !DILocation(line: 31, column: 35, scope: !7)
!15 = !DILocation(line: 31, column: 30, scope: !7)
!16 = !DILocation(line: 31, column: 43, scope: !7)
!17 = !DILocation(line: 32, column: 31, scope: !7)
!18 = !DILocation(line: 32, column: 36, scope: !7)
!19 = !DILocation(line: 33, column: 31, scope: !7)
!20 = !DILocation(line: 33, column: 36, scope: !7)
!21 = !DILocation(line: 35, column: 33, scope: !7)
!22 = !DILocation(line: 267, column: 36, scope: !23, inlinedAt: !25)
!23 = distinct !DILexicalBlockFile(scope: !7, file: !24, discriminator: 0)
!24 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!25 = !DILocation(line: 36, column: 24, scope: !7)
!26 = !DILocation(line: 256, column: 15, scope: !27, inlinedAt: !25)
!27 = distinct !DILexicalBlockFile(scope: !23, file: !24, discriminator: 0)
!28 = !DILocation(line: 38, column: 18, scope: !7)
!29 = !DILocation(line: 39, column: 18, scope: !7)
!30 = !DILocation(line: 40, column: 18, scope: !7)
!31 = !DILocation(line: 42, column: 34, scope: !7)
!32 = !DILocation(line: 267, column: 36, scope: !23, inlinedAt: !33)
!33 = !DILocation(line: 43, column: 26, scope: !7)
!34 = !DILocation(line: 256, column: 15, scope: !27, inlinedAt: !33)
!35 = !DILocation(line: 44, column: 20, scope: !7)
!36 = !DILocation(line: 46, column: 20, scope: !7)
!37 = !DILocation(line: 47, column: 27, scope: !7)
!38 = !DILocation(line: 48, column: 19, scope: !7)
!39 = !DILocation(line: 49, column: 20, scope: !7)
!40 = !DILocation(line: 50, column: 20, scope: !7)
!41 = !DILocation(line: 54, column: 20, scope: !7)
!42 = !DILocation(line: 55, column: 26, scope: !7)
!43 = !DILocation(line: 52, column: 20, scope: !7)
!44 = !DILocation(line: 57, column: 20, scope: !7)
!45 = !DILocation(line: 58, column: 20, scope: !7)
!46 = !DILocation(line: 59, column: 4, scope: !7)
!47 = !DILocation(line: 60, column: 28, scope: !7)
!48 = !DILocation(line: 60, column: 39, scope: !7)
!49 = !DILocation(line: 61, column: 4, scope: !7)
!50 = !DILocation(line: 62, column: 28, scope: !7)
!51 = !DILocation(line: 62, column: 40, scope: !7)
!52 = !DILocation(line: 63, column: 28, scope: !7)
!53 = !DILocation(line: 63, column: 48, scope: !7)
!54 = !DILocation(line: 63, column: 4, scope: !7)
