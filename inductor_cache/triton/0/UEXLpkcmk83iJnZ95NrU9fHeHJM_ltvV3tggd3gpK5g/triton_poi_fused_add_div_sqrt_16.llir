; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_add_div_sqrt_16(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %5 = shl i32 %4, 10, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 2, !dbg !12
  %8 = and i32 %7, 508, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = or disjoint i32 %9, 1, !dbg !13
  %11 = or disjoint i32 %9, 2, !dbg !13
  %12 = or disjoint i32 %9, 3, !dbg !13
  %13 = or disjoint i32 %9, 512, !dbg !13
  %14 = or disjoint i32 %9, 513, !dbg !13
  %15 = or disjoint i32 %9, 514, !dbg !13
  %16 = or disjoint i32 %9, 515, !dbg !13
  %17 = icmp slt i32 %9, 115200, !dbg !14
  %18 = icmp slt i32 %13, 115200, !dbg !14
  %19 = srem i32 %9, 225, !dbg !15
  %20 = srem i32 %10, 225, !dbg !15
  %21 = srem i32 %11, 225, !dbg !15
  %22 = srem i32 %12, 225, !dbg !15
  %23 = srem i32 %13, 225, !dbg !15
  %24 = srem i32 %14, 225, !dbg !15
  %25 = srem i32 %15, 225, !dbg !15
  %26 = srem i32 %16, 225, !dbg !15
  %27 = sdiv i32 %9, 28800, !dbg !16
  %28 = sdiv i32 %13, 28800, !dbg !16
  %29 = sext i32 %9 to i64, !dbg !17
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !17
  %31 = sext i32 %13 to i64, !dbg !17
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !17
  %33 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %30, i1 %17) #3, !dbg !18
  %34 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %32, i1 %18) #3, !dbg !18
  %35 = mul nsw i32 %27, 225, !dbg !19
  %36 = mul nsw i32 %28, 225, !dbg !19
  %37 = add nsw i32 %35, %19, !dbg !20
  %38 = add nsw i32 %35, %20, !dbg !20
  %39 = add nsw i32 %35, %21, !dbg !20
  %40 = add nsw i32 %35, %22, !dbg !20
  %41 = add nsw i32 %36, %23, !dbg !20
  %42 = add nsw i32 %36, %24, !dbg !20
  %43 = add nsw i32 %36, %25, !dbg !20
  %44 = add nsw i32 %36, %26, !dbg !20
  %45 = sext i32 %37 to i64, !dbg !21
  %46 = getelementptr float, ptr addrspace(1) %1, i64 %45, !dbg !21
  %47 = sext i32 %38 to i64, !dbg !21
  %48 = getelementptr float, ptr addrspace(1) %1, i64 %47, !dbg !21
  %49 = sext i32 %39 to i64, !dbg !21
  %50 = getelementptr float, ptr addrspace(1) %1, i64 %49, !dbg !21
  %51 = sext i32 %40 to i64, !dbg !21
  %52 = getelementptr float, ptr addrspace(1) %1, i64 %51, !dbg !21
  %53 = sext i32 %41 to i64, !dbg !21
  %54 = getelementptr float, ptr addrspace(1) %1, i64 %53, !dbg !21
  %55 = sext i32 %42 to i64, !dbg !21
  %56 = getelementptr float, ptr addrspace(1) %1, i64 %55, !dbg !21
  %57 = sext i32 %43 to i64, !dbg !21
  %58 = getelementptr float, ptr addrspace(1) %1, i64 %57, !dbg !21
  %59 = sext i32 %44 to i64, !dbg !21
  %60 = getelementptr float, ptr addrspace(1) %1, i64 %59, !dbg !21
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 %17) #3, !dbg !22
  %62 = bitcast i32 %61 to float, !dbg !22
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 %17) #3, !dbg !22
  %64 = bitcast i32 %63 to float, !dbg !22
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 %17) #3, !dbg !22
  %66 = bitcast i32 %65 to float, !dbg !22
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 %17) #3, !dbg !22
  %68 = bitcast i32 %67 to float, !dbg !22
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 %18) #3, !dbg !22
  %70 = bitcast i32 %69 to float, !dbg !22
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 %18) #3, !dbg !22
  %72 = bitcast i32 %71 to float, !dbg !22
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %18) #3, !dbg !22
  %74 = bitcast i32 %73 to float, !dbg !22
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 %18) #3, !dbg !22
  %76 = bitcast i32 %75 to float, !dbg !22
  %77 = fadd float %62, 0x3E112E0BE0000000, !dbg !23
  %78 = fadd float %64, 0x3E112E0BE0000000, !dbg !23
  %79 = fadd float %66, 0x3E112E0BE0000000, !dbg !23
  %80 = fadd float %68, 0x3E112E0BE0000000, !dbg !23
  %81 = fadd float %70, 0x3E112E0BE0000000, !dbg !23
  %82 = fadd float %72, 0x3E112E0BE0000000, !dbg !23
  %83 = fadd float %74, 0x3E112E0BE0000000, !dbg !23
  %84 = fadd float %76, 0x3E112E0BE0000000, !dbg !23
  %85 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !24
  %.not.i = icmp eq i32 %85, 0, !dbg !24
  %86 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !24
  %.not1.i = icmp eq i32 %86, 0, !dbg !24
  br i1 %.not.i, label %92, label %87, !dbg !24

87:                                               ; preds = %3
  br i1 %.not1.i, label %90, label %88, !dbg !24

88:                                               ; preds = %87
  %89 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %77) #3, !dbg !24
  br label %__nv_sqrtf.exit, !dbg !24

90:                                               ; preds = %87
  %91 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %77) #3, !dbg !24
  br label %__nv_sqrtf.exit, !dbg !24

92:                                               ; preds = %3
  br i1 %.not1.i, label %95, label %93, !dbg !24

93:                                               ; preds = %92
  %94 = tail call float @llvm.nvvm.sqrt.rn.f(float %77) #3, !dbg !24
  br label %__nv_sqrtf.exit, !dbg !24

95:                                               ; preds = %92
  %96 = tail call float @llvm.nvvm.sqrt.approx.f(float %77) #3, !dbg !24
  br label %__nv_sqrtf.exit, !dbg !24

__nv_sqrtf.exit:                                  ; preds = %88, %90, %93, %95
  %.0.i = phi float [ %89, %88 ], [ %91, %90 ], [ %94, %93 ], [ %96, %95 ], !dbg !24
  %97 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !24
  %.not.i1 = icmp eq i32 %97, 0, !dbg !24
  %98 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !24
  %.not1.i4 = icmp eq i32 %98, 0, !dbg !24
  br i1 %.not.i1, label %104, label %99, !dbg !24

99:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %102, label %100, !dbg !24

100:                                              ; preds = %99
  %101 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %78) #3, !dbg !24
  br label %__nv_sqrtf.exit5, !dbg !24

102:                                              ; preds = %99
  %103 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %78) #3, !dbg !24
  br label %__nv_sqrtf.exit5, !dbg !24

104:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %107, label %105, !dbg !24

105:                                              ; preds = %104
  %106 = tail call float @llvm.nvvm.sqrt.rn.f(float %78) #3, !dbg !24
  br label %__nv_sqrtf.exit5, !dbg !24

107:                                              ; preds = %104
  %108 = tail call float @llvm.nvvm.sqrt.approx.f(float %78) #3, !dbg !24
  br label %__nv_sqrtf.exit5, !dbg !24

__nv_sqrtf.exit5:                                 ; preds = %100, %102, %105, %107
  %.0.i3 = phi float [ %101, %100 ], [ %103, %102 ], [ %106, %105 ], [ %108, %107 ], !dbg !24
  %109 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !24
  %.not.i6 = icmp eq i32 %109, 0, !dbg !24
  %110 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !24
  %.not1.i9 = icmp eq i32 %110, 0, !dbg !24
  br i1 %.not.i6, label %116, label %111, !dbg !24

111:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %114, label %112, !dbg !24

112:                                              ; preds = %111
  %113 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %79) #3, !dbg !24
  br label %__nv_sqrtf.exit10, !dbg !24

114:                                              ; preds = %111
  %115 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %79) #3, !dbg !24
  br label %__nv_sqrtf.exit10, !dbg !24

116:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %119, label %117, !dbg !24

117:                                              ; preds = %116
  %118 = tail call float @llvm.nvvm.sqrt.rn.f(float %79) #3, !dbg !24
  br label %__nv_sqrtf.exit10, !dbg !24

119:                                              ; preds = %116
  %120 = tail call float @llvm.nvvm.sqrt.approx.f(float %79) #3, !dbg !24
  br label %__nv_sqrtf.exit10, !dbg !24

__nv_sqrtf.exit10:                                ; preds = %112, %114, %117, %119
  %.0.i8 = phi float [ %113, %112 ], [ %115, %114 ], [ %118, %117 ], [ %120, %119 ], !dbg !24
  %121 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !24
  %.not.i11 = icmp eq i32 %121, 0, !dbg !24
  %122 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !24
  %.not1.i14 = icmp eq i32 %122, 0, !dbg !24
  br i1 %.not.i11, label %128, label %123, !dbg !24

123:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %126, label %124, !dbg !24

124:                                              ; preds = %123
  %125 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %80) #3, !dbg !24
  br label %__nv_sqrtf.exit15, !dbg !24

126:                                              ; preds = %123
  %127 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %80) #3, !dbg !24
  br label %__nv_sqrtf.exit15, !dbg !24

128:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %131, label %129, !dbg !24

129:                                              ; preds = %128
  %130 = tail call float @llvm.nvvm.sqrt.rn.f(float %80) #3, !dbg !24
  br label %__nv_sqrtf.exit15, !dbg !24

131:                                              ; preds = %128
  %132 = tail call float @llvm.nvvm.sqrt.approx.f(float %80) #3, !dbg !24
  br label %__nv_sqrtf.exit15, !dbg !24

__nv_sqrtf.exit15:                                ; preds = %124, %126, %129, %131
  %.0.i13 = phi float [ %125, %124 ], [ %127, %126 ], [ %130, %129 ], [ %132, %131 ], !dbg !24
  %133 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !24
  %.not.i16 = icmp eq i32 %133, 0, !dbg !24
  %134 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !24
  %.not1.i19 = icmp eq i32 %134, 0, !dbg !24
  br i1 %.not.i16, label %140, label %135, !dbg !24

135:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %138, label %136, !dbg !24

136:                                              ; preds = %135
  %137 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %81) #3, !dbg !24
  br label %__nv_sqrtf.exit20, !dbg !24

138:                                              ; preds = %135
  %139 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %81) #3, !dbg !24
  br label %__nv_sqrtf.exit20, !dbg !24

140:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %143, label %141, !dbg !24

141:                                              ; preds = %140
  %142 = tail call float @llvm.nvvm.sqrt.rn.f(float %81) #3, !dbg !24
  br label %__nv_sqrtf.exit20, !dbg !24

143:                                              ; preds = %140
  %144 = tail call float @llvm.nvvm.sqrt.approx.f(float %81) #3, !dbg !24
  br label %__nv_sqrtf.exit20, !dbg !24

__nv_sqrtf.exit20:                                ; preds = %136, %138, %141, %143
  %.0.i18 = phi float [ %137, %136 ], [ %139, %138 ], [ %142, %141 ], [ %144, %143 ], !dbg !24
  %145 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !24
  %.not.i21 = icmp eq i32 %145, 0, !dbg !24
  %146 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !24
  %.not1.i24 = icmp eq i32 %146, 0, !dbg !24
  br i1 %.not.i21, label %152, label %147, !dbg !24

147:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %150, label %148, !dbg !24

148:                                              ; preds = %147
  %149 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %82) #3, !dbg !24
  br label %__nv_sqrtf.exit25, !dbg !24

150:                                              ; preds = %147
  %151 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %82) #3, !dbg !24
  br label %__nv_sqrtf.exit25, !dbg !24

152:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %155, label %153, !dbg !24

153:                                              ; preds = %152
  %154 = tail call float @llvm.nvvm.sqrt.rn.f(float %82) #3, !dbg !24
  br label %__nv_sqrtf.exit25, !dbg !24

155:                                              ; preds = %152
  %156 = tail call float @llvm.nvvm.sqrt.approx.f(float %82) #3, !dbg !24
  br label %__nv_sqrtf.exit25, !dbg !24

__nv_sqrtf.exit25:                                ; preds = %148, %150, %153, %155
  %.0.i23 = phi float [ %149, %148 ], [ %151, %150 ], [ %154, %153 ], [ %156, %155 ], !dbg !24
  %157 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !24
  %.not.i26 = icmp eq i32 %157, 0, !dbg !24
  %158 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !24
  %.not1.i29 = icmp eq i32 %158, 0, !dbg !24
  br i1 %.not.i26, label %164, label %159, !dbg !24

159:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %162, label %160, !dbg !24

160:                                              ; preds = %159
  %161 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %83) #3, !dbg !24
  br label %__nv_sqrtf.exit30, !dbg !24

162:                                              ; preds = %159
  %163 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %83) #3, !dbg !24
  br label %__nv_sqrtf.exit30, !dbg !24

164:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %167, label %165, !dbg !24

165:                                              ; preds = %164
  %166 = tail call float @llvm.nvvm.sqrt.rn.f(float %83) #3, !dbg !24
  br label %__nv_sqrtf.exit30, !dbg !24

167:                                              ; preds = %164
  %168 = tail call float @llvm.nvvm.sqrt.approx.f(float %83) #3, !dbg !24
  br label %__nv_sqrtf.exit30, !dbg !24

__nv_sqrtf.exit30:                                ; preds = %160, %162, %165, %167
  %.0.i28 = phi float [ %161, %160 ], [ %163, %162 ], [ %166, %165 ], [ %168, %167 ], !dbg !24
  %169 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !24
  %.not.i31 = icmp eq i32 %169, 0, !dbg !24
  %170 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !24
  %.not1.i34 = icmp eq i32 %170, 0, !dbg !24
  br i1 %.not.i31, label %176, label %171, !dbg !24

171:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %174, label %172, !dbg !24

172:                                              ; preds = %171
  %173 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %84) #3, !dbg !24
  br label %__nv_sqrtf.exit35, !dbg !24

174:                                              ; preds = %171
  %175 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %84) #3, !dbg !24
  br label %__nv_sqrtf.exit35, !dbg !24

176:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %179, label %177, !dbg !24

177:                                              ; preds = %176
  %178 = tail call float @llvm.nvvm.sqrt.rn.f(float %84) #3, !dbg !24
  br label %__nv_sqrtf.exit35, !dbg !24

179:                                              ; preds = %176
  %180 = tail call float @llvm.nvvm.sqrt.approx.f(float %84) #3, !dbg !24
  br label %__nv_sqrtf.exit35, !dbg !24

__nv_sqrtf.exit35:                                ; preds = %172, %174, %177, %179
  %.0.i33 = phi float [ %173, %172 ], [ %175, %174 ], [ %178, %177 ], [ %180, %179 ], !dbg !24
  %181 = extractvalue { i32, i32, i32, i32 } %34, 3, !dbg !18
  %182 = bitcast i32 %181 to float, !dbg !18
  %183 = extractvalue { i32, i32, i32, i32 } %34, 2, !dbg !18
  %184 = bitcast i32 %183 to float, !dbg !18
  %185 = extractvalue { i32, i32, i32, i32 } %34, 1, !dbg !18
  %186 = bitcast i32 %185 to float, !dbg !18
  %187 = extractvalue { i32, i32, i32, i32 } %34, 0, !dbg !18
  %188 = bitcast i32 %187 to float, !dbg !18
  %189 = extractvalue { i32, i32, i32, i32 } %33, 3, !dbg !18
  %190 = bitcast i32 %189 to float, !dbg !18
  %191 = extractvalue { i32, i32, i32, i32 } %33, 2, !dbg !18
  %192 = bitcast i32 %191 to float, !dbg !18
  %193 = extractvalue { i32, i32, i32, i32 } %33, 1, !dbg !18
  %194 = bitcast i32 %193 to float, !dbg !18
  %195 = extractvalue { i32, i32, i32, i32 } %33, 0, !dbg !18
  %196 = bitcast i32 %195 to float, !dbg !18
  %197 = fadd float %.0.i, 0x3DDB7CDFE0000000, !dbg !25
  %198 = fadd float %.0.i3, 0x3DDB7CDFE0000000, !dbg !25
  %199 = fadd float %.0.i8, 0x3DDB7CDFE0000000, !dbg !25
  %200 = fadd float %.0.i13, 0x3DDB7CDFE0000000, !dbg !25
  %201 = fadd float %.0.i18, 0x3DDB7CDFE0000000, !dbg !25
  %202 = fadd float %.0.i23, 0x3DDB7CDFE0000000, !dbg !25
  %203 = fadd float %.0.i28, 0x3DDB7CDFE0000000, !dbg !25
  %204 = fadd float %.0.i33, 0x3DDB7CDFE0000000, !dbg !25
  %205 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %196, float %197) #3, !dbg !26
  %206 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %194, float %198) #3, !dbg !26
  %207 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %192, float %199) #3, !dbg !26
  %208 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %190, float %200) #3, !dbg !26
  %209 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %188, float %201) #3, !dbg !26
  %210 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %186, float %202) #3, !dbg !26
  %211 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %184, float %203) #3, !dbg !26
  %212 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %182, float %204) #3, !dbg !26
  %213 = bitcast float %205 to i32, !dbg !27
  %214 = bitcast float %206 to i32, !dbg !27
  %215 = bitcast float %207 to i32, !dbg !27
  %216 = bitcast float %208 to i32, !dbg !27
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %213, i32 %214, i32 %215, i32 %216, ptr addrspace(1) %30, i1 %17) #3, !dbg !27
  %217 = bitcast float %209 to i32, !dbg !27
  %218 = bitcast float %210 to i32, !dbg !27
  %219 = bitcast float %211 to i32, !dbg !27
  %220 = bitcast float %212 to i32, !dbg !27
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %217, i32 %218, i32 %219, i32 %220, ptr addrspace(1) %32, i1 %18) #3, !dbg !27
  ret void, !dbg !28
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cuxwnxnbtq5yqkc7uj6wqiebioxiq2frw2qs4c2hmblha2i352ox.py", directory: "inductor_cache/ux")
!4 = !{ptr @triton_poi_fused_add_div_sqrt_16, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_div_sqrt_16, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_div_sqrt_16", linkageName: "triton_poi_fused_add_div_sqrt_16", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 27, column: 34, scope: !7)
!18 = !DILocation(line: 27, column: 39, scope: !7)
!19 = !DILocation(line: 28, column: 39, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 28, column: 30, scope: !7)
!22 = !DILocation(line: 28, column: 44, scope: !7)
!23 = !DILocation(line: 30, column: 18, scope: !7)
!24 = !DILocation(line: 31, column: 26, scope: !7)
!25 = !DILocation(line: 33, column: 18, scope: !7)
!26 = !DILocation(line: 34, column: 18, scope: !7)
!27 = !DILocation(line: 35, column: 39, scope: !7)
!28 = !DILocation(line: 35, column: 4, scope: !7)
