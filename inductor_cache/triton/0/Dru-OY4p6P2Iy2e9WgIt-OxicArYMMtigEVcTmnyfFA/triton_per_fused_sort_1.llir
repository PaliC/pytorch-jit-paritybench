; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_per_fused_sort_1(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %6 = icmp slt i32 %5, 512, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = and i32 %7, 1, !dbg !12
  %9 = and i32 %7, 3, !dbg !12
  %10 = icmp ne i32 %9, 3, !dbg !13
  %.frozen = freeze i32 %5, !dbg !14
  %11 = sdiv i32 %.frozen, 8, !dbg !14
  %12 = mul i32 %11, 8, !dbg !15
  %.decomposed = sub i32 %.frozen, %12, !dbg !15
  %13 = add nsw i32 %.decomposed, %9, !dbg !16
  %14 = mul i32 %11, 10, !dbg !17
  %15 = add i32 %13, %14, !dbg !18
  %16 = sext i32 %15 to i64, !dbg !19
  %17 = getelementptr float, ptr addrspace(1) %0, i64 %16, !dbg !19
  %18 = and i1 %10, %6, !dbg !20
  %19 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %17, i1 %18, i32 0, i1 %18) #2, !dbg !21
  %20 = trunc nuw nsw i32 %9 to i16, !dbg !22
  %21 = lshr i32 %7, 1, !dbg !23
  %.lobit = and i32 %21, 1, !dbg !23
  %22 = xor i32 %.lobit, 1, !dbg !28
  %23 = xor i32 %8, 1, !dbg !28
  %24 = mul nuw nsw i32 %19, %23, !dbg !30
  %25 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %24, i32 1, i32 31), !dbg !31
  %26 = add i32 %24, %25, !dbg !34
  %27 = mul nuw nsw i32 %19, %8, !dbg !36
  %28 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %27, i32 1, i32 31), !dbg !31
  %29 = add i32 %28, %27, !dbg !34
  %30 = bitcast i32 %26 to float, !dbg !37
  %31 = bitcast i32 %29 to float, !dbg !38
  %32 = trunc nuw nsw i32 %23 to i16, !dbg !39
  %33 = trunc nuw nsw i32 %22 to i16, !dbg !39
  %34 = mul nuw nsw i16 %32, %20, !dbg !40
  %35 = zext nneg i16 %34 to i32, !dbg !31
  %36 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %35, i32 1, i32 31), !dbg !31
  %37 = trunc i32 %36 to i16, !dbg !31
  %38 = add i16 %34, %37, !dbg !34
  %39 = trunc nuw nsw i32 %8 to i16, !dbg !41
  %40 = trunc nuw nsw i32 %.lobit to i16, !dbg !41
  %41 = mul nuw nsw i16 %20, %39, !dbg !42
  %42 = zext nneg i16 %41 to i32, !dbg !31
  %43 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %42, i32 1, i32 31), !dbg !31
  %44 = trunc i32 %43 to i16, !dbg !31
  %45 = add i16 %41, %44, !dbg !34
  %46 = icmp slt i16 %38, 3, !dbg !43
  %47 = icmp slt i16 %45, 3, !dbg !44
  %48 = fcmp ogt float %30, %31, !dbg !45
  %49 = xor i1 %46, true, !dbg !46
  %50 = and i1 %47, %49, !dbg !46
  %51 = xor i1 %46, %47, !dbg !47
  %52 = xor i1 %51, true, !dbg !47
  %53 = and i1 %48, %52, !dbg !48
  %54 = or i1 %50, %53, !dbg !49
  %55 = trunc i32 %21 to i1, !dbg !50
  %56 = xor i1 %54, %55, !dbg !50
  %57 = xor i32 %29, %26, !dbg !51
  %58 = select i1 %56, i32 %57, i32 0, !dbg !52
  %59 = xor i32 %58, %19, !dbg !53
  %60 = xor i16 %45, %38, !dbg !54
  %61 = select i1 %56, i16 %60, i16 0, !dbg !55
  %62 = xor i16 %61, %20, !dbg !56
  %63 = mul nuw nsw i32 %59, %22, !dbg !30
  %64 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %63, i32 2, i32 31), !dbg !31
  %65 = add i32 %63, %64, !dbg !34
  %66 = mul nuw nsw i32 %59, %.lobit, !dbg !36
  %67 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %66, i32 2, i32 31), !dbg !31
  %68 = add i32 %66, %67, !dbg !34
  %69 = bitcast i32 %65 to float, !dbg !37
  %70 = bitcast i32 %68 to float, !dbg !38
  %71 = mul nuw nsw i16 %62, %33, !dbg !40
  %72 = zext i16 %71 to i32, !dbg !31
  %73 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %72, i32 2, i32 31), !dbg !31
  %74 = trunc i32 %73 to i16, !dbg !31
  %75 = add i16 %71, %74, !dbg !34
  %76 = mul nuw nsw i16 %62, %40, !dbg !42
  %77 = zext i16 %76 to i32, !dbg !31
  %78 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %77, i32 2, i32 31), !dbg !31
  %79 = trunc i32 %78 to i16, !dbg !31
  %80 = add i16 %76, %79, !dbg !34
  %81 = icmp slt i16 %75, 3, !dbg !43
  %82 = icmp slt i16 %80, 3, !dbg !44
  %83 = fcmp ogt float %69, %70, !dbg !45
  %84 = xor i1 %81, true, !dbg !46
  %85 = and i1 %82, %84, !dbg !46
  %86 = xor i1 %82, %81, !dbg !47
  %87 = xor i1 %86, true, !dbg !47
  %88 = and i1 %83, %87, !dbg !48
  %89 = or i1 %85, %88, !dbg !49
  %90 = xor i32 %65, %68, !dbg !51
  %91 = select i1 %89, i32 %90, i32 0, !dbg !52
  %92 = xor i32 %91, %59, !dbg !53
  %93 = xor i16 %75, %80, !dbg !54
  %94 = select i1 %89, i16 %93, i16 0, !dbg !55
  %95 = xor i16 %94, %62, !dbg !56
  %96 = mul nuw nsw i32 %92, %23, !dbg !30
  %97 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %96, i32 1, i32 31), !dbg !31
  %98 = add i32 %96, %97, !dbg !34
  %99 = mul nuw nsw i32 %92, %8, !dbg !36
  %100 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %99, i32 1, i32 31), !dbg !31
  %101 = add i32 %99, %100, !dbg !34
  %102 = bitcast i32 %98 to float, !dbg !37
  %103 = bitcast i32 %101 to float, !dbg !38
  %104 = mul nuw nsw i16 %95, %32, !dbg !40
  %105 = zext i16 %104 to i32, !dbg !31
  %106 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %105, i32 1, i32 31), !dbg !31
  %107 = trunc i32 %106 to i16, !dbg !31
  %108 = add i16 %104, %107, !dbg !34
  %109 = mul nuw nsw i16 %95, %39, !dbg !42
  %110 = zext i16 %109 to i32, !dbg !31
  %111 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %110, i32 1, i32 31), !dbg !31
  %112 = trunc i32 %111 to i16, !dbg !31
  %113 = add i16 %109, %112, !dbg !34
  %114 = icmp slt i16 %108, 3, !dbg !43
  %115 = icmp slt i16 %113, 3, !dbg !44
  %116 = fcmp ogt float %102, %103, !dbg !45
  %117 = xor i1 %114, true, !dbg !46
  %118 = and i1 %115, %117, !dbg !46
  %119 = xor i1 %115, %114, !dbg !47
  %120 = xor i1 %119, true, !dbg !47
  %121 = and i1 %116, %120, !dbg !48
  %122 = or i1 %118, %121, !dbg !49
  %123 = xor i16 %108, %113, !dbg !54
  %124 = select i1 %122, i16 %123, i16 0, !dbg !55
  %125 = xor i16 %124, %95, !dbg !56
  %126 = mul i32 %5, 3, !dbg !57
  %127 = add i32 %126, %9, !dbg !58
  %128 = sext i32 %127 to i64, !dbg !59
  %129 = getelementptr i16, ptr addrspace(1) %1, i64 %128, !dbg !59
  %130 = and i32 %7, 60, !dbg !60
  %131 = icmp eq i32 %130, 0, !dbg !60
  %132 = and i1 %131, %18, !dbg !60
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %125, ptr addrspace(1) %129, i1 %132) #2, !dbg !60
  ret void, !dbg !61
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cmfpbriu5l7n7aqripryac7hspwe6imvcqnmw6qqwc42q7q6sqkw.py", directory: "inductor_cache/mf")
!4 = !{ptr @triton_per_fused_sort_1, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_sort_1, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_sort_1", linkageName: "triton_per_fused_sort_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 21, scope: !7)
!12 = !DILocation(line: 26, column: 34, scope: !7)
!13 = !DILocation(line: 28, column: 21, scope: !7)
!14 = !DILocation(line: 31, column: 19, scope: !7)
!15 = !DILocation(line: 30, column: 19, scope: !7)
!16 = !DILocation(line: 33, column: 35, scope: !7)
!17 = !DILocation(line: 33, column: 43, scope: !7)
!18 = !DILocation(line: 33, column: 40, scope: !7)
!19 = !DILocation(line: 33, column: 30, scope: !7)
!20 = !DILocation(line: 33, column: 56, scope: !7)
!21 = !DILocation(line: 33, column: 48, scope: !7)
!22 = !DILocation(line: 35, column: 19, scope: !7)
!23 = !DILocation(line: 575, column: 44, scope: !24, inlinedAt: !27)
!24 = distinct !DILexicalBlockFile(scope: !26, file: !25, discriminator: 0)
!25 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!26 = distinct !DILexicalBlockFile(scope: !7, file: !25, discriminator: 0)
!27 = !DILocation(line: 38, column: 69, scope: !7)
!28 = !DILocation(line: 505, column: 21, scope: !29, inlinedAt: !27)
!29 = distinct !DILexicalBlockFile(scope: !24, file: !25, discriminator: 0)
!30 = !DILocation(line: 506, column: 40, scope: !29, inlinedAt: !27)
!31 = !DILocation(line: 267, column: 36, scope: !32, inlinedAt: !27)
!32 = distinct !DILexicalBlockFile(scope: !29, file: !33, discriminator: 0)
!33 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!34 = !DILocation(line: 256, column: 15, scope: !35, inlinedAt: !27)
!35 = distinct !DILexicalBlockFile(scope: !32, file: !33, discriminator: 0)
!36 = !DILocation(line: 507, column: 41, scope: !29, inlinedAt: !27)
!37 = !DILocation(line: 510, column: 20, scope: !29, inlinedAt: !27)
!38 = !DILocation(line: 511, column: 22, scope: !29, inlinedAt: !27)
!39 = !DILocation(line: 516, column: 36, scope: !29, inlinedAt: !27)
!40 = !DILocation(line: 516, column: 23, scope: !29, inlinedAt: !27)
!41 = !DILocation(line: 519, column: 37, scope: !29, inlinedAt: !27)
!42 = !DILocation(line: 519, column: 23, scope: !29, inlinedAt: !27)
!43 = !DILocation(line: 529, column: 37, scope: !29, inlinedAt: !27)
!44 = !DILocation(line: 530, column: 39, scope: !29, inlinedAt: !27)
!45 = !DILocation(line: 538, column: 22, scope: !29, inlinedAt: !27)
!46 = !DILocation(line: 544, column: 31, scope: !29, inlinedAt: !27)
!47 = !DILocation(line: 545, column: 29, scope: !29, inlinedAt: !27)
!48 = !DILocation(line: 545, column: 48, scope: !29, inlinedAt: !27)
!49 = !DILocation(line: 545, column: 8, scope: !29, inlinedAt: !27)
!50 = !DILocation(line: 547, column: 28, scope: !29, inlinedAt: !27)
!51 = !DILocation(line: 548, column: 38, scope: !29, inlinedAt: !27)
!52 = !DILocation(line: 548, column: 46, scope: !29, inlinedAt: !27)
!53 = !DILocation(line: 548, column: 15, scope: !29, inlinedAt: !27)
!54 = !DILocation(line: 549, column: 48, scope: !29, inlinedAt: !27)
!55 = !DILocation(line: 549, column: 59, scope: !29, inlinedAt: !27)
!56 = !DILocation(line: 549, column: 22, scope: !29, inlinedAt: !27)
!57 = !DILocation(line: 39, column: 32, scope: !7)
!58 = !DILocation(line: 39, column: 30, scope: !7)
!59 = !DILocation(line: 39, column: 25, scope: !7)
!60 = !DILocation(line: 39, column: 43, scope: !7)
!61 = !DILocation(line: 39, column: 4, scope: !7)
