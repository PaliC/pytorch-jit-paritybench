; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_convolution_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %11 = shl i32 %10, 5, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = shl i32 %12, 2, !dbg !12
  %14 = and i32 %13, 28, !dbg !12
  %15 = lshr i32 %12, 3, !dbg !12
  %16 = and i32 %15, 15, !dbg !12
  %17 = or disjoint i32 %16, 16, !dbg !12
  %18 = or disjoint i32 %11, %14, !dbg !13
  %19 = icmp slt i32 %18, 64, !dbg !14
  %20 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %21 = shl i32 %20, 5, !dbg !16
  %22 = or disjoint i32 %21, %16, !dbg !17
  %23 = or disjoint i32 %21, %17, !dbg !17
  %24 = icmp slt i32 %22, 256, !dbg !18
  %25 = icmp slt i32 %23, 256, !dbg !18
  %.frozen = freeze i32 %18, !dbg !19
  %26 = sdiv i32 %.frozen, 16, !dbg !19
  %27 = mul i32 %26, 16, !dbg !20
  %.decomposed = sub i32 %.frozen, %27, !dbg !20
  %28 = shl i32 %22, 4, !dbg !21
  %29 = shl i32 %23, 4, !dbg !21
  %30 = shl i32 %26, 12, !dbg !22
  %31 = add i32 %30, %.decomposed, !dbg !23
  %32 = add i32 %31, %28, !dbg !24
  %33 = add i32 %31, %29, !dbg !24
  %34 = sext i32 %32 to i64, !dbg !25
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !25
  %36 = sext i32 %33 to i64, !dbg !25
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !25
  %38 = and i1 %19, %24, !dbg !26
  %39 = and i1 %19, %25, !dbg !26
  %40 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %35, i1 %38) #4, !dbg !27
  %41 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %37, i1 %39) #4, !dbg !27
  %42 = sext i32 %.decomposed to i64, !dbg !28
  %43 = getelementptr float, ptr addrspace(1) %1, i64 %42, !dbg !28
  %44 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %43, i1 %19) #4, !dbg !29
  %45 = getelementptr float, ptr addrspace(1) %2, i64 %42, !dbg !30
  %46 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %45, i1 %19) #4, !dbg !31
  %47 = extractvalue { i32, i32, i32, i32 } %46, 0, !dbg !31
  %48 = extractvalue { i32, i32, i32, i32 } %46, 1, !dbg !31
  %49 = extractvalue { i32, i32, i32, i32 } %46, 2, !dbg !31
  %50 = extractvalue { i32, i32, i32, i32 } %46, 3, !dbg !31
  %51 = bitcast i32 %47 to float, !dbg !31
  %52 = bitcast i32 %48 to float, !dbg !31
  %53 = bitcast i32 %49 to float, !dbg !31
  %54 = bitcast i32 %50 to float, !dbg !31
  %55 = getelementptr float, ptr addrspace(1) %3, i64 %42, !dbg !32
  %56 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %55, i1 %19) #4, !dbg !33
  %57 = getelementptr float, ptr addrspace(1) %4, i64 %42, !dbg !34
  %58 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %57, i1 %19) #4, !dbg !35
  %59 = fadd float %51, 0x3EE4F8B580000000, !dbg !36
  %60 = fadd float %52, 0x3EE4F8B580000000, !dbg !36
  %61 = fadd float %53, 0x3EE4F8B580000000, !dbg !36
  %62 = fadd float %54, 0x3EE4F8B580000000, !dbg !36
  %63 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !37
  %.not.i = icmp eq i32 %63, 0, !dbg !37
  %64 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !37
  %.not1.i = icmp eq i32 %64, 0, !dbg !37
  br i1 %.not.i, label %70, label %65, !dbg !37

65:                                               ; preds = %9
  br i1 %.not1.i, label %68, label %66, !dbg !37

66:                                               ; preds = %65
  %67 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %59) #4, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

68:                                               ; preds = %65
  %69 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %59) #4, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

70:                                               ; preds = %9
  br i1 %.not1.i, label %73, label %71, !dbg !37

71:                                               ; preds = %70
  %72 = tail call float @llvm.nvvm.sqrt.rn.f(float %59) #4, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

73:                                               ; preds = %70
  %74 = tail call float @llvm.nvvm.sqrt.approx.f(float %59) #4, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

__nv_sqrtf.exit:                                  ; preds = %66, %68, %71, %73
  %.0.i = phi float [ %67, %66 ], [ %69, %68 ], [ %72, %71 ], [ %74, %73 ], !dbg !37
  %75 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !37
  %.not.i1 = icmp eq i32 %75, 0, !dbg !37
  %76 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !37
  %.not1.i4 = icmp eq i32 %76, 0, !dbg !37
  br i1 %.not.i1, label %82, label %77, !dbg !37

77:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %80, label %78, !dbg !37

78:                                               ; preds = %77
  %79 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %60) #4, !dbg !37
  br label %__nv_sqrtf.exit5, !dbg !37

80:                                               ; preds = %77
  %81 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %60) #4, !dbg !37
  br label %__nv_sqrtf.exit5, !dbg !37

82:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %85, label %83, !dbg !37

83:                                               ; preds = %82
  %84 = tail call float @llvm.nvvm.sqrt.rn.f(float %60) #4, !dbg !37
  br label %__nv_sqrtf.exit5, !dbg !37

85:                                               ; preds = %82
  %86 = tail call float @llvm.nvvm.sqrt.approx.f(float %60) #4, !dbg !37
  br label %__nv_sqrtf.exit5, !dbg !37

__nv_sqrtf.exit5:                                 ; preds = %78, %80, %83, %85
  %.0.i3 = phi float [ %79, %78 ], [ %81, %80 ], [ %84, %83 ], [ %86, %85 ], !dbg !37
  %87 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !37
  %.not.i6 = icmp eq i32 %87, 0, !dbg !37
  %88 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !37
  %.not1.i9 = icmp eq i32 %88, 0, !dbg !37
  br i1 %.not.i6, label %94, label %89, !dbg !37

89:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %92, label %90, !dbg !37

90:                                               ; preds = %89
  %91 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %61) #4, !dbg !37
  br label %__nv_sqrtf.exit10, !dbg !37

92:                                               ; preds = %89
  %93 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %61) #4, !dbg !37
  br label %__nv_sqrtf.exit10, !dbg !37

94:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %97, label %95, !dbg !37

95:                                               ; preds = %94
  %96 = tail call float @llvm.nvvm.sqrt.rn.f(float %61) #4, !dbg !37
  br label %__nv_sqrtf.exit10, !dbg !37

97:                                               ; preds = %94
  %98 = tail call float @llvm.nvvm.sqrt.approx.f(float %61) #4, !dbg !37
  br label %__nv_sqrtf.exit10, !dbg !37

__nv_sqrtf.exit10:                                ; preds = %90, %92, %95, %97
  %.0.i8 = phi float [ %91, %90 ], [ %93, %92 ], [ %96, %95 ], [ %98, %97 ], !dbg !37
  %99 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !37
  %.not.i11 = icmp eq i32 %99, 0, !dbg !37
  %100 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !37
  %.not1.i14 = icmp eq i32 %100, 0, !dbg !37
  br i1 %.not.i11, label %106, label %101, !dbg !37

101:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %104, label %102, !dbg !37

102:                                              ; preds = %101
  %103 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %62) #4, !dbg !37
  br label %__nv_sqrtf.exit15, !dbg !37

104:                                              ; preds = %101
  %105 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %62) #4, !dbg !37
  br label %__nv_sqrtf.exit15, !dbg !37

106:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %109, label %107, !dbg !37

107:                                              ; preds = %106
  %108 = tail call float @llvm.nvvm.sqrt.rn.f(float %62) #4, !dbg !37
  br label %__nv_sqrtf.exit15, !dbg !37

109:                                              ; preds = %106
  %110 = tail call float @llvm.nvvm.sqrt.approx.f(float %62) #4, !dbg !37
  br label %__nv_sqrtf.exit15, !dbg !37

__nv_sqrtf.exit15:                                ; preds = %102, %104, %107, %109
  %.0.i13 = phi float [ %103, %102 ], [ %105, %104 ], [ %108, %107 ], [ %110, %109 ], !dbg !37
  %111 = extractvalue { i32, i32, i32, i32 } %41, 3, !dbg !27
  %112 = bitcast i32 %111 to float, !dbg !27
  %113 = extractvalue { i32, i32, i32, i32 } %44, 3, !dbg !29
  %114 = bitcast i32 %113 to float, !dbg !29
  %115 = fsub float %112, %114, !dbg !38
  %116 = extractvalue { i32, i32, i32, i32 } %41, 2, !dbg !27
  %117 = bitcast i32 %116 to float, !dbg !27
  %118 = extractvalue { i32, i32, i32, i32 } %44, 2, !dbg !29
  %119 = bitcast i32 %118 to float, !dbg !29
  %120 = fsub float %117, %119, !dbg !38
  %121 = extractvalue { i32, i32, i32, i32 } %41, 1, !dbg !27
  %122 = bitcast i32 %121 to float, !dbg !27
  %123 = extractvalue { i32, i32, i32, i32 } %44, 1, !dbg !29
  %124 = bitcast i32 %123 to float, !dbg !29
  %125 = fsub float %122, %124, !dbg !38
  %126 = extractvalue { i32, i32, i32, i32 } %41, 0, !dbg !27
  %127 = bitcast i32 %126 to float, !dbg !27
  %128 = extractvalue { i32, i32, i32, i32 } %44, 0, !dbg !29
  %129 = bitcast i32 %128 to float, !dbg !29
  %130 = fsub float %127, %129, !dbg !38
  %131 = extractvalue { i32, i32, i32, i32 } %40, 3, !dbg !27
  %132 = bitcast i32 %131 to float, !dbg !27
  %133 = fsub float %132, %114, !dbg !38
  %134 = extractvalue { i32, i32, i32, i32 } %40, 2, !dbg !27
  %135 = bitcast i32 %134 to float, !dbg !27
  %136 = fsub float %135, %119, !dbg !38
  %137 = extractvalue { i32, i32, i32, i32 } %40, 1, !dbg !27
  %138 = bitcast i32 %137 to float, !dbg !27
  %139 = fsub float %138, %124, !dbg !38
  %140 = extractvalue { i32, i32, i32, i32 } %40, 0, !dbg !27
  %141 = bitcast i32 %140 to float, !dbg !27
  %142 = fsub float %141, %129, !dbg !38
  %143 = extractvalue { i32, i32, i32, i32 } %58, 3, !dbg !35
  %144 = bitcast i32 %143 to float, !dbg !35
  %145 = extractvalue { i32, i32, i32, i32 } %58, 2, !dbg !35
  %146 = bitcast i32 %145 to float, !dbg !35
  %147 = extractvalue { i32, i32, i32, i32 } %58, 1, !dbg !35
  %148 = bitcast i32 %147 to float, !dbg !35
  %149 = extractvalue { i32, i32, i32, i32 } %58, 0, !dbg !35
  %150 = bitcast i32 %149 to float, !dbg !35
  %151 = extractvalue { i32, i32, i32, i32 } %56, 3, !dbg !33
  %152 = bitcast i32 %151 to float, !dbg !33
  %153 = extractvalue { i32, i32, i32, i32 } %56, 2, !dbg !33
  %154 = bitcast i32 %153 to float, !dbg !33
  %155 = extractvalue { i32, i32, i32, i32 } %56, 1, !dbg !33
  %156 = bitcast i32 %155 to float, !dbg !33
  %157 = extractvalue { i32, i32, i32, i32 } %56, 0, !dbg !33
  %158 = bitcast i32 %157 to float, !dbg !33
  %159 = or disjoint i32 %21, %14, !dbg !17
  %160 = icmp slt i32 %159, 256, !dbg !18
  %161 = or disjoint i32 %11, %17, !dbg !13
  %162 = icmp slt i32 %161, 64, !dbg !14
  %163 = and i1 %162, %160, !dbg !26
  %164 = or disjoint i32 %11, %16, !dbg !13
  %165 = icmp slt i32 %164, 64, !dbg !14
  %166 = and i1 %165, %160, !dbg !26
  %167 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !39
  %168 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #4, !dbg !39
  %169 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #4, !dbg !39
  %170 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #4, !dbg !39
  %171 = fmul float %142, %167, !dbg !40
  %172 = fmul float %139, %168, !dbg !40
  %173 = fmul float %136, %169, !dbg !40
  %174 = fmul float %133, %170, !dbg !40
  %175 = fmul float %130, %167, !dbg !40
  %176 = fmul float %125, %168, !dbg !40
  %177 = fmul float %120, %169, !dbg !40
  %178 = fmul float %115, %170, !dbg !40
  %179 = fmul float %171, %158, !dbg !41
  %180 = fmul float %172, %156, !dbg !41
  %181 = fmul float %173, %154, !dbg !41
  %182 = fmul float %174, %152, !dbg !41
  %183 = fmul float %175, %158, !dbg !41
  %184 = fmul float %176, %156, !dbg !41
  %185 = fmul float %177, %154, !dbg !41
  %186 = fmul float %178, %152, !dbg !41
  %187 = fadd float %179, %150, !dbg !42
  %188 = fadd float %180, %148, !dbg !42
  %189 = fadd float %181, %146, !dbg !42
  %190 = fadd float %182, %144, !dbg !42
  %191 = fadd float %183, %150, !dbg !42
  %192 = fadd float %184, %148, !dbg !42
  %193 = fadd float %185, %146, !dbg !42
  %194 = fadd float %186, %144, !dbg !42
  %195 = shl i32 %164, 8, !dbg !43
  %196 = shl i32 %161, 8, !dbg !43
  %197 = add i32 %159, %195, !dbg !44
  %198 = add i32 %159, %196, !dbg !44
  %199 = sext i32 %197 to i64, !dbg !45
  %200 = getelementptr float, ptr addrspace(1) %5, i64 %199, !dbg !45
  %201 = sext i32 %198 to i64, !dbg !45
  %202 = getelementptr float, ptr addrspace(1) %5, i64 %201, !dbg !45
  %203 = shl i32 %12, 7, !dbg !46
  %204 = and i32 %203, 896, !dbg !46
  %205 = or disjoint i32 %204, %16, !dbg !46
  %206 = and i32 %13, 508, !dbg !46
  %207 = lshr exact i32 %204, 3, !dbg !46
  %208 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %207, !dbg !46
  %209 = getelementptr float, ptr addrspace(3) %208, i32 %205, !dbg !46
  %210 = bitcast float %187 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %209, <1 x i32> %210, i1 true) #4, !dbg !46
  %211 = or disjoint i32 %205, 32, !dbg !46
  %212 = lshr i32 %211, 5, !dbg !46
  %213 = getelementptr float, ptr addrspace(3) @global_smem, i32 %212, !dbg !46
  %214 = getelementptr float, ptr addrspace(3) %213, i32 %211, !dbg !46
  %215 = bitcast float %188 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %214, <1 x i32> %215, i1 true) #4, !dbg !46
  %216 = or disjoint i32 %205, 64, !dbg !46
  %217 = lshr i32 %216, 5, !dbg !46
  %218 = getelementptr float, ptr addrspace(3) @global_smem, i32 %217, !dbg !46
  %219 = getelementptr float, ptr addrspace(3) %218, i32 %216, !dbg !46
  %220 = bitcast float %189 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %219, <1 x i32> %220, i1 true) #4, !dbg !46
  %221 = or disjoint i32 %205, 96, !dbg !46
  %222 = lshr i32 %221, 5, !dbg !46
  %223 = getelementptr float, ptr addrspace(3) @global_smem, i32 %222, !dbg !46
  %224 = getelementptr float, ptr addrspace(3) %223, i32 %221, !dbg !46
  %225 = bitcast float %190 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %224, <1 x i32> %225, i1 true) #4, !dbg !46
  %226 = or disjoint i32 %205, 16, !dbg !46
  %227 = getelementptr float, ptr addrspace(3) %208, i32 %226, !dbg !46
  %228 = bitcast float %191 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %227, <1 x i32> %228, i1 true) #4, !dbg !46
  %229 = or disjoint i32 %205, 48, !dbg !46
  %230 = lshr i32 %229, 5, !dbg !46
  %231 = getelementptr float, ptr addrspace(3) @global_smem, i32 %230, !dbg !46
  %232 = getelementptr float, ptr addrspace(3) %231, i32 %229, !dbg !46
  %233 = bitcast float %192 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %232, <1 x i32> %233, i1 true) #4, !dbg !46
  %234 = or disjoint i32 %205, 80, !dbg !46
  %235 = lshr i32 %234, 5, !dbg !46
  %236 = getelementptr float, ptr addrspace(3) @global_smem, i32 %235, !dbg !46
  %237 = getelementptr float, ptr addrspace(3) %236, i32 %234, !dbg !46
  %238 = bitcast float %193 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %237, <1 x i32> %238, i1 true) #4, !dbg !46
  %239 = or disjoint i32 %205, 112, !dbg !46
  %240 = lshr i32 %239, 5, !dbg !46
  %241 = getelementptr float, ptr addrspace(3) @global_smem, i32 %240, !dbg !46
  %242 = getelementptr float, ptr addrspace(3) %241, i32 %239, !dbg !46
  %243 = bitcast float %194 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %242, <1 x i32> %243, i1 true) #4, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %244 = lshr i32 %206, 5, !dbg !46
  %245 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %244, !dbg !46
  %246 = getelementptr inbounds float, ptr addrspace(3) %245, i32 %206, !dbg !46
  %247 = load i32, ptr addrspace(3) %246, align 4, !dbg !46
  %248 = or disjoint i32 %206, 1, !dbg !46
  %249 = getelementptr inbounds float, ptr addrspace(3) %245, i32 %248, !dbg !46
  %250 = load i32, ptr addrspace(3) %249, align 4, !dbg !46
  %251 = or disjoint i32 %206, 2, !dbg !46
  %252 = getelementptr inbounds float, ptr addrspace(3) %245, i32 %251, !dbg !46
  %253 = load i32, ptr addrspace(3) %252, align 4, !dbg !46
  %254 = or disjoint i32 %206, 3, !dbg !46
  %255 = getelementptr inbounds float, ptr addrspace(3) %245, i32 %254, !dbg !46
  %256 = load i32, ptr addrspace(3) %255, align 4, !dbg !46
  %257 = or disjoint i32 %206, 512, !dbg !46
  %258 = lshr i32 %257, 5, !dbg !46
  %259 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %258, !dbg !46
  %260 = getelementptr inbounds float, ptr addrspace(3) %259, i32 %257, !dbg !46
  %261 = load i32, ptr addrspace(3) %260, align 4, !dbg !46
  %262 = or disjoint i32 %206, 513, !dbg !46
  %263 = lshr i32 %262, 5, !dbg !46
  %264 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %263, !dbg !46
  %265 = getelementptr inbounds float, ptr addrspace(3) %264, i32 %262, !dbg !46
  %266 = load i32, ptr addrspace(3) %265, align 4, !dbg !46
  %267 = or disjoint i32 %206, 514, !dbg !46
  %268 = lshr i32 %267, 5, !dbg !46
  %269 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %268, !dbg !46
  %270 = getelementptr inbounds float, ptr addrspace(3) %269, i32 %267, !dbg !46
  %271 = load i32, ptr addrspace(3) %270, align 4, !dbg !46
  %272 = or disjoint i32 %206, 515, !dbg !46
  %273 = lshr i32 %272, 5, !dbg !46
  %274 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %273, !dbg !46
  %275 = getelementptr inbounds float, ptr addrspace(3) %274, i32 %272, !dbg !46
  %276 = load i32, ptr addrspace(3) %275, align 4, !dbg !46
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %247, i32 %250, i32 %253, i32 %256, ptr addrspace(1) %200, i1 %166) #4, !dbg !46
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %261, i32 %266, i32 %271, i32 %276, ptr addrspace(1) %202, i1 %163) #4, !dbg !46
  %277 = getelementptr float, ptr addrspace(1) %6, i64 %34, !dbg !47
  %278 = getelementptr float, ptr addrspace(1) %6, i64 %36, !dbg !47
  %279 = bitcast float %187 to i32, !dbg !48
  %280 = bitcast float %188 to i32, !dbg !48
  %281 = bitcast float %189 to i32, !dbg !48
  %282 = bitcast float %190 to i32, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %279, i32 %280, i32 %281, i32 %282, ptr addrspace(1) %277, i1 %38) #4, !dbg !48
  %283 = bitcast float %191 to i32, !dbg !48
  %284 = bitcast float %192 to i32, !dbg !48
  %285 = bitcast float %193 to i32, !dbg !48
  %286 = bitcast float %194 to i32, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %283, i32 %284, i32 %285, i32 %286, ptr addrspace(1) %278, i1 %39) #4, !dbg !48
  ret void, !dbg !49
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c7i7nzsr6uv3xcq37rnjygfzzkamdjueguim65etbtduy3ztnjim.py", directory: "inductor_cache/7i")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_convolution_4, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_convolution_4, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_convolution_4", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_convolution_4", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 38, scope: !7)
!22 = !DILocation(line: 32, column: 48, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 43, scope: !7)
!25 = !DILocation(line: 32, column: 30, scope: !7)
!26 = !DILocation(line: 32, column: 61, scope: !7)
!27 = !DILocation(line: 32, column: 53, scope: !7)
!28 = !DILocation(line: 33, column: 30, scope: !7)
!29 = !DILocation(line: 33, column: 35, scope: !7)
!30 = !DILocation(line: 34, column: 30, scope: !7)
!31 = !DILocation(line: 34, column: 35, scope: !7)
!32 = !DILocation(line: 35, column: 31, scope: !7)
!33 = !DILocation(line: 35, column: 36, scope: !7)
!34 = !DILocation(line: 36, column: 31, scope: !7)
!35 = !DILocation(line: 36, column: 36, scope: !7)
!36 = !DILocation(line: 39, column: 18, scope: !7)
!37 = !DILocation(line: 40, column: 26, scope: !7)
!38 = !DILocation(line: 37, column: 18, scope: !7)
!39 = !DILocation(line: 42, column: 18, scope: !7)
!40 = !DILocation(line: 45, column: 19, scope: !7)
!41 = !DILocation(line: 46, column: 20, scope: !7)
!42 = !DILocation(line: 47, column: 20, scope: !7)
!43 = !DILocation(line: 48, column: 34, scope: !7)
!44 = !DILocation(line: 48, column: 30, scope: !7)
!45 = !DILocation(line: 48, column: 25, scope: !7)
!46 = !DILocation(line: 48, column: 46, scope: !7)
!47 = !DILocation(line: 49, column: 25, scope: !7)
!48 = !DILocation(line: 49, column: 55, scope: !7)
!49 = !DILocation(line: 49, column: 4, scope: !7)
