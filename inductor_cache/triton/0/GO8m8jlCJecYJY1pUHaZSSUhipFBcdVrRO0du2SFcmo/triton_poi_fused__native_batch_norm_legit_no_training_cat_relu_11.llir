; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_11(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %12 = shl i32 %11, 9, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = shl i32 %13, 1, !dbg !12
  %15 = and i32 %14, 510, !dbg !12
  %16 = or disjoint i32 %12, %15, !dbg !13
  %.frozen = freeze i32 %16, !dbg !14
  %17 = sdiv i32 %.frozen, 64, !dbg !14
  %18 = srem i32 %17, 640, !dbg !15
  %19 = mul i32 %17, 64, !dbg !16
  %.decomposed = sub i32 %.frozen, %19, !dbg !16
  %.frozen8 = freeze i32 %16, !dbg !17
  %20 = sdiv i32 %.frozen8, 40960, !dbg !17
  %21 = sext i32 %18 to i64, !dbg !18
  %22 = getelementptr float, ptr addrspace(1) %3, i64 %21, !dbg !18
  %23 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %22, i1 true) #3, !dbg !19
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %22, i1 true) #3, !dbg !19
  %25 = getelementptr float, ptr addrspace(1) %4, i64 %21, !dbg !20
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 true) #3, !dbg !21
  %27 = bitcast i32 %26 to float, !dbg !21
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 true) #3, !dbg !21
  %29 = bitcast i32 %28 to float, !dbg !21
  %30 = getelementptr float, ptr addrspace(1) %5, i64 %21, !dbg !22
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 true) #3, !dbg !23
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 true) #3, !dbg !23
  %33 = getelementptr float, ptr addrspace(1) %6, i64 %21, !dbg !24
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 true) #3, !dbg !25
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 true) #3, !dbg !25
  %36 = icmp slt i32 %18, 512, !dbg !26
  %37 = mul i32 %20, 40960, !dbg !27
  %srem.decomposed = sub i32 %.frozen8, %37, !dbg !27
  %38 = mul nsw i32 %20, 36864, !dbg !28
  %39 = add nsw i32 %38, %srem.decomposed, !dbg !29
  %40 = sext i32 %39 to i64, !dbg !30
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !30
  %42 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %41, i1 %36, i32 0, i1 %36, i32 0, i1 %36) #3, !dbg !31
  %43 = mul nsw i32 %20, 34816, !dbg !32
  %44 = add nsw i32 %43, %srem.decomposed, !dbg !33
  %45 = sext i32 %44 to i64, !dbg !34
  %46 = getelementptr float, ptr addrspace(1) %1, i64 %45, !dbg !34
  %47 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %46, i1 %36, i32 0, i1 %36, i32 0, i1 %36) #3, !dbg !35
  %48 = getelementptr float, ptr addrspace(1) %2, i64 %45, !dbg !36
  %49 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %48, i1 %36, i32 0, i1 %36, i32 0, i1 %36) #3, !dbg !37
  %50 = and i32 %18, -64, !dbg !38
  %51 = icmp eq i32 %50, 512, !dbg !38
  %52 = add nsw i32 %.decomposed, 32768, !dbg !39
  %53 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %41, i1 %51, i32 0, i1 %51, i32 0, i1 %51) #3, !dbg !40
  %54 = and i32 %18, -32, !dbg !41
  %55 = icmp eq i32 %54, 576, !dbg !41
  %56 = shl nsw i32 %18, 6, !dbg !42
  %57 = add nsw i32 %43, %52, !dbg !42
  %58 = add nsw i32 %57, -36864, !dbg !43
  %59 = add nsw i32 %58, %56, !dbg !44
  %60 = sext i32 %59 to i64, !dbg !45
  %61 = getelementptr float, ptr addrspace(1) %1, i64 %60, !dbg !45
  %62 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %61, i1 %55, i32 0, i1 %55, i32 0, i1 %55) #3, !dbg !46
  %63 = icmp sgt i32 %18, 607, !dbg !47
  %64 = add nsw i32 %57, -38912, !dbg !48
  %65 = add nsw i32 %64, %56, !dbg !49
  %66 = sext i32 %65 to i64, !dbg !50
  %67 = getelementptr float, ptr addrspace(1) %2, i64 %66, !dbg !50
  %68 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %67, i1 %63, i32 0, i1 %63, i32 0, i1 %63) #3, !dbg !51
  %69 = fadd float %27, 0x3F50624DE0000000, !dbg !52
  %70 = fadd float %29, 0x3F50624DE0000000, !dbg !52
  %71 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !53
  %.not.i = icmp eq i32 %71, 0, !dbg !53
  %72 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !53
  %.not1.i = icmp eq i32 %72, 0, !dbg !53
  br i1 %.not.i, label %78, label %73, !dbg !53

73:                                               ; preds = %10
  br i1 %.not1.i, label %76, label %74, !dbg !53

74:                                               ; preds = %73
  %75 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %69) #3, !dbg !53
  br label %__nv_sqrtf.exit, !dbg !53

76:                                               ; preds = %73
  %77 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %69) #3, !dbg !53
  br label %__nv_sqrtf.exit, !dbg !53

78:                                               ; preds = %10
  br i1 %.not1.i, label %81, label %79, !dbg !53

79:                                               ; preds = %78
  %80 = tail call float @llvm.nvvm.sqrt.rn.f(float %69) #3, !dbg !53
  br label %__nv_sqrtf.exit, !dbg !53

81:                                               ; preds = %78
  %82 = tail call float @llvm.nvvm.sqrt.approx.f(float %69) #3, !dbg !53
  br label %__nv_sqrtf.exit, !dbg !53

__nv_sqrtf.exit:                                  ; preds = %74, %76, %79, %81
  %.0.i = phi float [ %75, %74 ], [ %77, %76 ], [ %80, %79 ], [ %82, %81 ], !dbg !53
  %83 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !53
  %.not.i3 = icmp eq i32 %83, 0, !dbg !53
  %84 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !53
  %.not1.i6 = icmp eq i32 %84, 0, !dbg !53
  br i1 %.not.i3, label %90, label %85, !dbg !53

85:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i6, label %88, label %86, !dbg !53

86:                                               ; preds = %85
  %87 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %70) #3, !dbg !53
  br label %__nv_sqrtf.exit7, !dbg !53

88:                                               ; preds = %85
  %89 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %70) #3, !dbg !53
  br label %__nv_sqrtf.exit7, !dbg !53

90:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i6, label %93, label %91, !dbg !53

91:                                               ; preds = %90
  %92 = tail call float @llvm.nvvm.sqrt.rn.f(float %70) #3, !dbg !53
  br label %__nv_sqrtf.exit7, !dbg !53

93:                                               ; preds = %90
  %94 = tail call float @llvm.nvvm.sqrt.approx.f(float %70) #3, !dbg !53
  br label %__nv_sqrtf.exit7, !dbg !53

__nv_sqrtf.exit7:                                 ; preds = %86, %88, %91, %93
  %.0.i5 = phi float [ %87, %86 ], [ %89, %88 ], [ %92, %91 ], [ %94, %93 ], !dbg !53
  %95 = extractvalue { i32, i32 } %42, 1, !dbg !31
  %96 = bitcast i32 %95 to float, !dbg !31
  %97 = extractvalue { i32, i32 } %47, 1, !dbg !35
  %98 = bitcast i32 %97 to float, !dbg !35
  %99 = fadd float %96, %98, !dbg !54
  %100 = extractvalue { i32, i32 } %49, 1, !dbg !37
  %101 = bitcast i32 %100 to float, !dbg !37
  %102 = fadd float %99, %101, !dbg !55
  %103 = icmp slt i32 %18, 608, !dbg !56
  %104 = add nsw i32 %18, -512, !dbg !57
  %105 = icmp ult i32 %104, 96, !dbg !57
  %106 = icmp slt i32 %18, 576, !dbg !58
  %107 = extractvalue { i32, i32 } %53, 1, !dbg !40
  %108 = extractvalue { i32, i32 } %62, 1, !dbg !46
  %.v1 = select i1 %106, i32 %107, i32 %108, !dbg !59
  %109 = bitcast i32 %.v1 to float, !dbg !59
  %110 = select i1 %105, float %109, float 0.000000e+00, !dbg !60
  %111 = extractvalue { i32, i32 } %68, 1, !dbg !51
  %112 = bitcast i32 %111 to float, !dbg !51
  %113 = select i1 %103, float %110, float %112, !dbg !61
  %114 = select i1 %36, float %102, float %113, !dbg !62
  %115 = bitcast i32 %24 to float, !dbg !19
  %116 = fsub float %114, %115, !dbg !63
  %117 = extractvalue { i32, i32 } %42, 0, !dbg !31
  %118 = bitcast i32 %117 to float, !dbg !31
  %119 = extractvalue { i32, i32 } %47, 0, !dbg !35
  %120 = bitcast i32 %119 to float, !dbg !35
  %121 = fadd float %118, %120, !dbg !54
  %122 = extractvalue { i32, i32 } %49, 0, !dbg !37
  %123 = bitcast i32 %122 to float, !dbg !37
  %124 = fadd float %121, %123, !dbg !55
  %125 = extractvalue { i32, i32 } %53, 0, !dbg !40
  %126 = extractvalue { i32, i32 } %62, 0, !dbg !46
  %.v = select i1 %106, i32 %125, i32 %126, !dbg !59
  %127 = bitcast i32 %.v to float, !dbg !59
  %128 = select i1 %105, float %127, float 0.000000e+00, !dbg !60
  %129 = extractvalue { i32, i32 } %68, 0, !dbg !51
  %130 = bitcast i32 %129 to float, !dbg !51
  %131 = select i1 %103, float %128, float %130, !dbg !61
  %132 = select i1 %36, float %124, float %131, !dbg !62
  %133 = bitcast i32 %23 to float, !dbg !19
  %134 = fsub float %132, %133, !dbg !63
  %135 = bitcast i32 %35 to float, !dbg !25
  %136 = bitcast i32 %34 to float, !dbg !25
  %137 = bitcast i32 %32 to float, !dbg !23
  %138 = bitcast i32 %31 to float, !dbg !23
  %139 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !64
  %140 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i5) #3, !dbg !64
  %141 = fmul float %134, %139, !dbg !65
  %142 = fmul float %116, %140, !dbg !65
  %143 = fmul float %141, %138, !dbg !66
  %144 = fmul float %142, %137, !dbg !66
  %145 = fadd float %143, %136, !dbg !67
  %146 = fadd float %144, %135, !dbg !67
  %147 = fcmp olt float %145, 0.000000e+00, !dbg !68
  %148 = fcmp olt float %146, 0.000000e+00, !dbg !68
  %149 = select i1 %147, float 0.000000e+00, float %145, !dbg !72
  %150 = select i1 %148, float 0.000000e+00, float %146, !dbg !72
  %151 = sext i32 %16 to i64, !dbg !73
  %152 = getelementptr float, ptr addrspace(1) %7, i64 %151, !dbg !73
  %153 = bitcast float %132 to i32, !dbg !74
  %154 = bitcast float %114 to i32, !dbg !74
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %153, i32 %154, ptr addrspace(1) %152, i1 true) #3, !dbg !74
  %155 = getelementptr float, ptr addrspace(1) %8, i64 %151, !dbg !75
  %156 = bitcast float %149 to i32, !dbg !76
  %157 = bitcast float %150 to i32, !dbg !76
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %156, i32 %157, ptr addrspace(1) %155, i1 true) #3, !dbg !76
  ret void, !dbg !77
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c6bgmbtsvergv2qalkj65jwft4r6iclevjlizhux7srgusi33m3g.py", directory: "inductor_cache/6b")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_11, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_11, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_11", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_11", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 27, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 31, scope: !7)
!19 = !DILocation(line: 28, column: 36, scope: !7)
!20 = !DILocation(line: 29, column: 31, scope: !7)
!21 = !DILocation(line: 29, column: 36, scope: !7)
!22 = !DILocation(line: 30, column: 31, scope: !7)
!23 = !DILocation(line: 30, column: 36, scope: !7)
!24 = !DILocation(line: 31, column: 31, scope: !7)
!25 = !DILocation(line: 31, column: 36, scope: !7)
!26 = !DILocation(line: 36, column: 18, scope: !7)
!27 = !DILocation(line: 37, column: 35, scope: !7)
!28 = !DILocation(line: 37, column: 51, scope: !7)
!29 = !DILocation(line: 37, column: 45, scope: !7)
!30 = !DILocation(line: 37, column: 30, scope: !7)
!31 = !DILocation(line: 37, column: 56, scope: !7)
!32 = !DILocation(line: 38, column: 51, scope: !7)
!33 = !DILocation(line: 38, column: 45, scope: !7)
!34 = !DILocation(line: 38, column: 30, scope: !7)
!35 = !DILocation(line: 38, column: 56, scope: !7)
!36 = !DILocation(line: 40, column: 30, scope: !7)
!37 = !DILocation(line: 40, column: 56, scope: !7)
!38 = !DILocation(line: 58, column: 20, scope: !7)
!39 = !DILocation(line: 59, column: 39, scope: !7)
!40 = !DILocation(line: 59, column: 74, scope: !7)
!41 = !DILocation(line: 63, column: 20, scope: !7)
!42 = !DILocation(line: 64, column: 48, scope: !7)
!43 = !DILocation(line: 64, column: 44, scope: !7)
!44 = !DILocation(line: 64, column: 73, scope: !7)
!45 = !DILocation(line: 64, column: 31, scope: !7)
!46 = !DILocation(line: 64, column: 84, scope: !7)
!47 = !DILocation(line: 68, column: 21, scope: !7)
!48 = !DILocation(line: 72, column: 44, scope: !7)
!49 = !DILocation(line: 72, column: 73, scope: !7)
!50 = !DILocation(line: 72, column: 31, scope: !7)
!51 = !DILocation(line: 72, column: 84, scope: !7)
!52 = !DILocation(line: 79, column: 20, scope: !7)
!53 = !DILocation(line: 80, column: 27, scope: !7)
!54 = !DILocation(line: 39, column: 18, scope: !7)
!55 = !DILocation(line: 41, column: 18, scope: !7)
!56 = !DILocation(line: 51, column: 20, scope: !7)
!57 = !DILocation(line: 52, column: 20, scope: !7)
!58 = !DILocation(line: 57, column: 20, scope: !7)
!59 = !DILocation(line: 65, column: 35, scope: !7)
!60 = !DILocation(line: 67, column: 35, scope: !7)
!61 = !DILocation(line: 73, column: 35, scope: !7)
!62 = !DILocation(line: 0, scope: !7)
!63 = !DILocation(line: 77, column: 20, scope: !7)
!64 = !DILocation(line: 82, column: 20, scope: !7)
!65 = !DILocation(line: 85, column: 20, scope: !7)
!66 = !DILocation(line: 86, column: 20, scope: !7)
!67 = !DILocation(line: 87, column: 20, scope: !7)
!68 = !DILocation(line: 118, column: 15, scope: !69, inlinedAt: !71)
!69 = distinct !DILexicalBlockFile(scope: !7, file: !70, discriminator: 0)
!70 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!71 = !DILocation(line: 89, column: 42, scope: !7)
!72 = !DILocation(line: 121, column: 29, scope: !69, inlinedAt: !71)
!73 = !DILocation(line: 90, column: 25, scope: !7)
!74 = !DILocation(line: 90, column: 37, scope: !7)
!75 = !DILocation(line: 91, column: 25, scope: !7)
!76 = !DILocation(line: 91, column: 37, scope: !7)
!77 = !DILocation(line: 91, column: 4, scope: !7)
