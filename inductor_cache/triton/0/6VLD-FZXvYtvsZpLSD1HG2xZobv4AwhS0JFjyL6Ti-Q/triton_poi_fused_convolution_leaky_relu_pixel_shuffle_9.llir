; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_leaky_relu_pixel_shuffle_9(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #3, !dbg !10
  %8 = shl i32 %7, 4, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = lshr i32 %9, 3, !dbg !12
  %11 = and i32 %10, 15, !dbg !12
  %12 = shl i32 %9, 1, !dbg !12
  %13 = and i32 %12, 14, !dbg !12
  %14 = or disjoint i32 %8, %11, !dbg !13
  %15 = or disjoint i32 %8, %13, !dbg !13
  %16 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !14
  %17 = shl i32 %16, 4, !dbg !15
  %18 = or disjoint i32 %17, %13, !dbg !16
  %19 = or disjoint i32 %17, %11, !dbg !16
  %20 = icmp slt i32 %18, 16, !dbg !17
  %21 = icmp slt i32 %19, 16, !dbg !17
  %22 = srem i32 %14, 256, !dbg !18
  %.frozen = freeze i32 %19, !dbg !19
  %23 = sdiv i32 %.frozen, 4, !dbg !19
  %24 = mul i32 %23, 4, !dbg !20
  %.decomposed = sub i32 %.frozen, %24, !dbg !20
  %25 = ashr exact i32 %15, 1, !dbg !21
  %26 = srem i32 %25, 2, !dbg !22
  %27 = sdiv i32 %15, 4, !dbg !23
  %28 = shl i32 %14, 4, !dbg !24
  %29 = add i32 %18, %28, !dbg !25
  %30 = sext i32 %29 to i64, !dbg !26
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !26
  %32 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %31, i1 %20) #3, !dbg !27
  %33 = extractvalue { i32, i32 } %32, 0, !dbg !27
  %34 = extractvalue { i32, i32 } %32, 1, !dbg !27
  %35 = bitcast i32 %33 to float, !dbg !27
  %36 = bitcast i32 %34 to float, !dbg !27
  %37 = sext i32 %22 to i64, !dbg !28
  %38 = getelementptr float, ptr addrspace(1) %1, i64 %37, !dbg !28
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 true) #3, !dbg !29
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 true) #3, !dbg !29
  %41 = bitcast i32 %40 to float, !dbg !29
  %42 = fadd float %35, %41, !dbg !30
  %43 = fadd float %36, %41, !dbg !30
  %44 = fcmp ogt float %42, 0.000000e+00, !dbg !31
  %45 = fcmp ogt float %43, 0.000000e+00, !dbg !31
  %46 = fmul float %42, 0x3F847AE140000000, !dbg !32
  %47 = fmul float %43, 0x3F847AE140000000, !dbg !32
  %48 = select i1 %44, float %42, float %46, !dbg !33
  %49 = select i1 %45, float %43, float %47, !dbg !33
  %50 = getelementptr i1, ptr addrspace(1) %2, i64 %30, !dbg !34
  %51 = zext i1 %44 to i8, !dbg !35
  %52 = zext i1 %45 to i8, !dbg !35
  %53 = insertelement <2 x i8> poison, i8 %51, i64 0, !dbg !35
  %54 = insertelement <2 x i8> %53, i8 %52, i64 1, !dbg !35
  %55 = bitcast <2 x i8> %54 to i16, !dbg !35
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %55, ptr addrspace(1) %50, i1 %20) #3, !dbg !35
  %56 = insertelement <4 x i32> poison, i32 %26, i64 0, !dbg !36
  %57 = insertelement <4 x i32> %56, i32 %27, i64 1, !dbg !36
  %58 = insertelement <4 x i32> %57, i32 %.decomposed, i64 2, !dbg !36
  %59 = insertelement <4 x i32> %58, i32 %23, i64 3, !dbg !36
  %60 = shl <4 x i32> %59, <i32 3, i32 6, i32 1, i32 4>, !dbg !36
  %61 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %60), !dbg !37
  %62 = sext i32 %61 to i64, !dbg !38
  %63 = getelementptr float, ptr addrspace(1) %3, i64 %62, !dbg !38
  %64 = shl i32 %9, 5, !dbg !39
  %65 = and i32 %64, 224, !dbg !39
  %66 = or disjoint i32 %65, %11, !dbg !39
  %67 = and i32 %12, 254, !dbg !39
  %68 = lshr exact i32 %65, 1, !dbg !39
  %69 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %68, !dbg !39
  %70 = getelementptr float, ptr addrspace(3) %69, i32 %66, !dbg !39
  %71 = bitcast float %48 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %70, <1 x i32> %71, i1 true) #3, !dbg !39
  %72 = or disjoint i32 %66, 16, !dbg !39
  %73 = lshr i32 %72, 3, !dbg !39
  %74 = and i32 %73, 30, !dbg !39
  %75 = getelementptr float, ptr addrspace(3) @global_smem, i32 %74, !dbg !39
  %76 = getelementptr float, ptr addrspace(3) %75, i32 %72, !dbg !39
  %77 = bitcast float %49 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %76, <1 x i32> %77, i1 true) #3, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %78 = lshr i32 %12, 3, !dbg !39
  %79 = and i32 %78, 30, !dbg !39
  %80 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %79, !dbg !39
  %81 = getelementptr inbounds float, ptr addrspace(3) %80, i32 %67, !dbg !39
  %.extract = load i32, ptr addrspace(3) %81, align 8, !dbg !39
  %82 = getelementptr inbounds i8, ptr addrspace(3) %81, i32 4, !dbg !39
  %.extract2 = load i32, ptr addrspace(3) %82, align 4, !dbg !39
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract, i32 %.extract2, ptr addrspace(1) %63, i1 %21) #3, !dbg !39
  ret void, !dbg !40
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.vector.reduce.add.v4i32(<4 x i32>) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cgsps77nz3pu676ewfs77duz5y5cmdrpprxw2slizgpboezgm3v6.py", directory: "inductor_cache/gs")
!4 = !{ptr @triton_poi_fused_convolution_leaky_relu_pixel_shuffle_9, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_leaky_relu_pixel_shuffle_9, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_leaky_relu_pixel_shuffle_9", linkageName: "triton_poi_fused_convolution_leaky_relu_pixel_shuffle_9", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 23, scope: !7)
!17 = !DILocation(line: 27, column: 21, scope: !7)
!18 = !DILocation(line: 30, column: 19, scope: !7)
!19 = !DILocation(line: 32, column: 19, scope: !7)
!20 = !DILocation(line: 31, column: 19, scope: !7)
!21 = !DILocation(line: 34, column: 21, scope: !7)
!22 = !DILocation(line: 34, column: 26, scope: !7)
!23 = !DILocation(line: 35, column: 19, scope: !7)
!24 = !DILocation(line: 36, column: 38, scope: !7)
!25 = !DILocation(line: 36, column: 35, scope: !7)
!26 = !DILocation(line: 36, column: 30, scope: !7)
!27 = !DILocation(line: 36, column: 43, scope: !7)
!28 = !DILocation(line: 37, column: 30, scope: !7)
!29 = !DILocation(line: 37, column: 35, scope: !7)
!30 = !DILocation(line: 38, column: 18, scope: !7)
!31 = !DILocation(line: 40, column: 18, scope: !7)
!32 = !DILocation(line: 42, column: 18, scope: !7)
!33 = !DILocation(line: 43, column: 32, scope: !7)
!34 = !DILocation(line: 44, column: 25, scope: !7)
!35 = !DILocation(line: 44, column: 44, scope: !7)
!36 = !DILocation(line: 45, column: 39, scope: !7)
!37 = !DILocation(line: 45, column: 52, scope: !7)
!38 = !DILocation(line: 45, column: 25, scope: !7)
!39 = !DILocation(line: 45, column: 66, scope: !7)
!40 = !DILocation(line: 45, column: 4, scope: !7)
