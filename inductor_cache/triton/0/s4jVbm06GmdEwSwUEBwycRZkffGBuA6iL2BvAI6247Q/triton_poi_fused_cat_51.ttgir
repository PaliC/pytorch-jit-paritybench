#blocked = #triton_gpu.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [4], order = [0]}>
#loc = loc("inductor_cache/nl/cnlbnih2bknpdel7z7p7knb6wccsiupl2ozb3wzu6egrizbs4ydt.py":19:0)
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_poi_fused_cat_51(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/nl/cnlbnih2bknpdel7z7p7knb6wccsiupl2ozb3wzu6egrizbs4ydt.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/nl/cnlbnih2bknpdel7z7p7knb6wccsiupl2ozb3wzu6egrizbs4ydt.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/nl/cnlbnih2bknpdel7z7p7knb6wccsiupl2ozb3wzu6egrizbs4ydt.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/nl/cnlbnih2bknpdel7z7p7knb6wccsiupl2ozb3wzu6egrizbs4ydt.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/nl/cnlbnih2bknpdel7z7p7knb6wccsiupl2ozb3wzu6egrizbs4ydt.py":19:0), %arg5: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/nl/cnlbnih2bknpdel7z7p7knb6wccsiupl2ozb3wzu6egrizbs4ydt.py":19:0), %arg6: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/nl/cnlbnih2bknpdel7z7p7knb6wccsiupl2ozb3wzu6egrizbs4ydt.py":19:0), %arg7: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/nl/cnlbnih2bknpdel7z7p7knb6wccsiupl2ozb3wzu6egrizbs4ydt.py":19:0), %arg8: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/nl/cnlbnih2bknpdel7z7p7knb6wccsiupl2ozb3wzu6egrizbs4ydt.py":19:0), %arg9: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/nl/cnlbnih2bknpdel7z7p7knb6wccsiupl2ozb3wzu6egrizbs4ydt.py":19:0), %arg10: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/nl/cnlbnih2bknpdel7z7p7knb6wccsiupl2ozb3wzu6egrizbs4ydt.py":19:0), %arg11: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/nl/cnlbnih2bknpdel7z7p7knb6wccsiupl2ozb3wzu6egrizbs4ydt.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<1.000000e+00> : tensor<128xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<-192> : tensor<128xi32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<256> : tensor<128xi32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<1.000000e-03> : tensor<128xf32, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<0.000000e+00> : tensor<128xf32, #blocked> loc(#loc1)
    %cst_4 = arith.constant dense<192> : tensor<128xi32, #blocked> loc(#loc1)
    %cst_5 = arith.constant dense<192> : tensor<128xi64, #blocked> loc(#loc1)
    %cst_6 = arith.constant dense<448> : tensor<128xi32, #blocked> loc(#loc1)
    %cst_7 = arith.constant dense<7168> : tensor<128xi32, #blocked> loc(#loc1)
    %c128_i32 = arith.constant 128 : i32 loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c128_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<128xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<128xi32, #blocked> loc(#loc5)
    %5 = arith.cmpi slt, %4, %cst_7 : tensor<128xi32, #blocked> loc(#loc6)
    %6 = arith.remsi %4, %cst_6 : tensor<128xi32, #blocked> loc(#loc7)
    %7 = arith.divsi %4, %cst_6 : tensor<128xi32, #blocked> loc(#loc8)
    %8 = arith.extsi %6 : tensor<128xi32, #blocked> to tensor<128xi64, #blocked> loc(#loc9)
    %9 = arith.cmpi slt, %8, %cst_5 : tensor<128xi64, #blocked> loc(#loc9)
    %10 = arith.muli %7, %cst_4 : tensor<128xi32, #blocked> loc(#loc10)
    %11 = arith.addi %10, %6 : tensor<128xi32, #blocked> loc(#loc11)
    %12 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<128x!tt.ptr<f32>, #blocked> loc(#loc12)
    %13 = tt.addptr %12, %11 : tensor<128x!tt.ptr<f32>, #blocked>, tensor<128xi32, #blocked> loc(#loc12)
    %14 = arith.andi %9, %5 : tensor<128xi1, #blocked> loc(#loc13)
    %15 = tt.load %13, %14, %cst_3 evictionPolicy = evict_last : tensor<128x!tt.ptr<f32>, #blocked> loc(#loc14)
    %16 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<128x!tt.ptr<f32>, #blocked> loc(#loc15)
    %17 = tt.addptr %16, %6 : tensor<128x!tt.ptr<f32>, #blocked>, tensor<128xi32, #blocked> loc(#loc15)
    %18 = tt.load %17, %14, %cst_3 evictionPolicy = evict_last : tensor<128x!tt.ptr<f32>, #blocked> loc(#loc16)
    %19 = arith.subf %15, %18 : tensor<128xf32, #blocked> loc(#loc17)
    %20 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<128x!tt.ptr<f32>, #blocked> loc(#loc18)
    %21 = tt.addptr %20, %6 : tensor<128x!tt.ptr<f32>, #blocked>, tensor<128xi32, #blocked> loc(#loc18)
    %22 = tt.load %21, %14, %cst_3 evictionPolicy = evict_last : tensor<128x!tt.ptr<f32>, #blocked> loc(#loc19)
    %23 = arith.addf %22, %cst_2 : tensor<128xf32, #blocked> loc(#loc20)
    %24 = tt.extern_elementwise %23 {libname = "", libpath = "", pure = true, symbol = "__nv_sqrtf"} : (tensor<128xf32, #blocked>) -> tensor<128xf32, #blocked> loc(#loc21)
    %25 = arith.divf %cst, %24 : tensor<128xf32, #blocked> loc(#loc22)
    %26 = arith.mulf %19, %25 : tensor<128xf32, #blocked> loc(#loc23)
    %27 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<128x!tt.ptr<f32>, #blocked> loc(#loc24)
    %28 = tt.addptr %27, %6 : tensor<128x!tt.ptr<f32>, #blocked>, tensor<128xi32, #blocked> loc(#loc24)
    %29 = tt.load %28, %14, %cst_3 evictionPolicy = evict_last : tensor<128x!tt.ptr<f32>, #blocked> loc(#loc25)
    %30 = arith.mulf %26, %29 : tensor<128xf32, #blocked> loc(#loc26)
    %31 = tt.splat %arg4 : !tt.ptr<f32> -> tensor<128x!tt.ptr<f32>, #blocked> loc(#loc27)
    %32 = tt.addptr %31, %6 : tensor<128x!tt.ptr<f32>, #blocked>, tensor<128xi32, #blocked> loc(#loc27)
    %33 = tt.load %32, %14, %cst_3 evictionPolicy = evict_last : tensor<128x!tt.ptr<f32>, #blocked> loc(#loc28)
    %34 = arith.addf %30, %33 : tensor<128xf32, #blocked> loc(#loc29)
    %35 = arith.cmpf ogt, %cst_3, %34 : tensor<128xf32, #blocked> loc(#loc62)
    %36 = arith.select %35, %cst_3, %34 : tensor<128xi1, #blocked>, tensor<128xf32, #blocked> loc(#loc63)
    %37 = arith.cmpi sge, %8, %cst_5 : tensor<128xi64, #blocked> loc(#loc33)
    %38 = arith.muli %7, %cst_1 : tensor<128xi32, #blocked> loc(#loc34)
    %39 = arith.addi %6, %cst_0 : tensor<128xi32, #blocked> loc(#loc35)
    %40 = arith.addi %38, %39 : tensor<128xi32, #blocked> loc(#loc36)
    %41 = tt.splat %arg5 : !tt.ptr<f32> -> tensor<128x!tt.ptr<f32>, #blocked> loc(#loc37)
    %42 = tt.addptr %41, %40 : tensor<128x!tt.ptr<f32>, #blocked>, tensor<128xi32, #blocked> loc(#loc37)
    %43 = arith.andi %37, %5 : tensor<128xi1, #blocked> loc(#loc38)
    %44 = tt.load %42, %43, %cst_3 evictionPolicy = evict_last : tensor<128x!tt.ptr<f32>, #blocked> loc(#loc39)
    %45 = tt.splat %arg6 : !tt.ptr<f32> -> tensor<128x!tt.ptr<f32>, #blocked> loc(#loc40)
    %46 = tt.addptr %45, %39 : tensor<128x!tt.ptr<f32>, #blocked>, tensor<128xi32, #blocked> loc(#loc40)
    %47 = tt.load %46, %43, %cst_3 evictionPolicy = evict_last : tensor<128x!tt.ptr<f32>, #blocked> loc(#loc41)
    %48 = arith.subf %44, %47 : tensor<128xf32, #blocked> loc(#loc42)
    %49 = tt.splat %arg7 : !tt.ptr<f32> -> tensor<128x!tt.ptr<f32>, #blocked> loc(#loc43)
    %50 = tt.addptr %49, %39 : tensor<128x!tt.ptr<f32>, #blocked>, tensor<128xi32, #blocked> loc(#loc43)
    %51 = tt.load %50, %43, %cst_3 evictionPolicy = evict_last : tensor<128x!tt.ptr<f32>, #blocked> loc(#loc44)
    %52 = arith.addf %51, %cst_2 : tensor<128xf32, #blocked> loc(#loc45)
    %53 = tt.extern_elementwise %52 {libname = "", libpath = "", pure = true, symbol = "__nv_sqrtf"} : (tensor<128xf32, #blocked>) -> tensor<128xf32, #blocked> loc(#loc46)
    %54 = arith.divf %cst, %53 : tensor<128xf32, #blocked> loc(#loc47)
    %55 = arith.mulf %48, %54 : tensor<128xf32, #blocked> loc(#loc48)
    %56 = tt.splat %arg8 : !tt.ptr<f32> -> tensor<128x!tt.ptr<f32>, #blocked> loc(#loc49)
    %57 = tt.addptr %56, %39 : tensor<128x!tt.ptr<f32>, #blocked>, tensor<128xi32, #blocked> loc(#loc49)
    %58 = tt.load %57, %43, %cst_3 evictionPolicy = evict_last : tensor<128x!tt.ptr<f32>, #blocked> loc(#loc50)
    %59 = arith.mulf %55, %58 : tensor<128xf32, #blocked> loc(#loc51)
    %60 = tt.splat %arg9 : !tt.ptr<f32> -> tensor<128x!tt.ptr<f32>, #blocked> loc(#loc52)
    %61 = tt.addptr %60, %39 : tensor<128x!tt.ptr<f32>, #blocked>, tensor<128xi32, #blocked> loc(#loc52)
    %62 = tt.load %61, %43, %cst_3 evictionPolicy = evict_last : tensor<128x!tt.ptr<f32>, #blocked> loc(#loc53)
    %63 = arith.addf %59, %62 : tensor<128xf32, #blocked> loc(#loc54)
    %64 = arith.cmpf ogt, %cst_3, %63 : tensor<128xf32, #blocked> loc(#loc64)
    %65 = arith.select %64, %cst_3, %63 : tensor<128xi1, #blocked>, tensor<128xf32, #blocked> loc(#loc65)
    %66 = arith.select %37, %65, %cst_3 : tensor<128xi1, #blocked>, tensor<128xf32, #blocked> loc(#loc56)
    %67 = arith.select %9, %36, %66 : tensor<128xi1, #blocked>, tensor<128xf32, #blocked> loc(#loc66)
    %68 = tt.splat %arg10 : !tt.ptr<f32> -> tensor<128x!tt.ptr<f32>, #blocked> loc(#loc59)
    %69 = tt.addptr %68, %4 : tensor<128x!tt.ptr<f32>, #blocked>, tensor<128xi32, #blocked> loc(#loc59)
    tt.store %69, %67, %5 : tensor<128x!tt.ptr<f32>, #blocked> loc(#loc60)
    tt.return loc(#loc61)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("inductor_cache/nl/cnlbnih2bknpdel7z7p7knb6wccsiupl2ozb3wzu6egrizbs4ydt.py":21:28)
#loc3 = loc("inductor_cache/nl/cnlbnih2bknpdel7z7p7knb6wccsiupl2ozb3wzu6egrizbs4ydt.py":21:33)
#loc4 = loc("inductor_cache/nl/cnlbnih2bknpdel7z7p7knb6wccsiupl2ozb3wzu6egrizbs4ydt.py":22:36)
#loc5 = loc("inductor_cache/nl/cnlbnih2bknpdel7z7p7knb6wccsiupl2ozb3wzu6egrizbs4ydt.py":22:23)
#loc6 = loc("inductor_cache/nl/cnlbnih2bknpdel7z7p7knb6wccsiupl2ozb3wzu6egrizbs4ydt.py":23:21)
#loc7 = loc("inductor_cache/nl/cnlbnih2bknpdel7z7p7knb6wccsiupl2ozb3wzu6egrizbs4ydt.py":24:19)
#loc8 = loc("inductor_cache/nl/cnlbnih2bknpdel7z7p7knb6wccsiupl2ozb3wzu6egrizbs4ydt.py":25:19)
#loc9 = loc("inductor_cache/nl/cnlbnih2bknpdel7z7p7knb6wccsiupl2ozb3wzu6egrizbs4ydt.py":31:18)
#loc10 = loc("inductor_cache/nl/cnlbnih2bknpdel7z7p7knb6wccsiupl2ozb3wzu6egrizbs4ydt.py":32:34)
#loc11 = loc("inductor_cache/nl/cnlbnih2bknpdel7z7p7knb6wccsiupl2ozb3wzu6egrizbs4ydt.py":32:40)
#loc12 = loc("inductor_cache/nl/cnlbnih2bknpdel7z7p7knb6wccsiupl2ozb3wzu6egrizbs4ydt.py":32:30)
#loc13 = loc("inductor_cache/nl/cnlbnih2bknpdel7z7p7knb6wccsiupl2ozb3wzu6egrizbs4ydt.py":32:53)
#loc14 = loc("inductor_cache/nl/cnlbnih2bknpdel7z7p7knb6wccsiupl2ozb3wzu6egrizbs4ydt.py":32:46)
#loc15 = loc("inductor_cache/nl/cnlbnih2bknpdel7z7p7knb6wccsiupl2ozb3wzu6egrizbs4ydt.py":33:30)
#loc16 = loc("inductor_cache/nl/cnlbnih2bknpdel7z7p7knb6wccsiupl2ozb3wzu6egrizbs4ydt.py":33:35)
#loc17 = loc("inductor_cache/nl/cnlbnih2bknpdel7z7p7knb6wccsiupl2ozb3wzu6egrizbs4ydt.py":34:18)
#loc18 = loc("inductor_cache/nl/cnlbnih2bknpdel7z7p7knb6wccsiupl2ozb3wzu6egrizbs4ydt.py":35:30)
#loc19 = loc("inductor_cache/nl/cnlbnih2bknpdel7z7p7knb6wccsiupl2ozb3wzu6egrizbs4ydt.py":35:35)
#loc20 = loc("inductor_cache/nl/cnlbnih2bknpdel7z7p7knb6wccsiupl2ozb3wzu6egrizbs4ydt.py":37:19)
#loc21 = loc("inductor_cache/nl/cnlbnih2bknpdel7z7p7knb6wccsiupl2ozb3wzu6egrizbs4ydt.py":38:27)
#loc22 = loc("inductor_cache/nl/cnlbnih2bknpdel7z7p7knb6wccsiupl2ozb3wzu6egrizbs4ydt.py":40:20)
#loc23 = loc("inductor_cache/nl/cnlbnih2bknpdel7z7p7knb6wccsiupl2ozb3wzu6egrizbs4ydt.py":43:19)
#loc24 = loc("inductor_cache/nl/cnlbnih2bknpdel7z7p7knb6wccsiupl2ozb3wzu6egrizbs4ydt.py":44:31)
#loc25 = loc("inductor_cache/nl/cnlbnih2bknpdel7z7p7knb6wccsiupl2ozb3wzu6egrizbs4ydt.py":44:36)
#loc26 = loc("inductor_cache/nl/cnlbnih2bknpdel7z7p7knb6wccsiupl2ozb3wzu6egrizbs4ydt.py":45:20)
#loc27 = loc("inductor_cache/nl/cnlbnih2bknpdel7z7p7knb6wccsiupl2ozb3wzu6egrizbs4ydt.py":46:31)
#loc28 = loc("inductor_cache/nl/cnlbnih2bknpdel7z7p7knb6wccsiupl2ozb3wzu6egrizbs4ydt.py":46:36)
#loc29 = loc("inductor_cache/nl/cnlbnih2bknpdel7z7p7knb6wccsiupl2ozb3wzu6egrizbs4ydt.py":47:20)
#loc30 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":118:15)
#loc31 = loc("inductor_cache/nl/cnlbnih2bknpdel7z7p7knb6wccsiupl2ozb3wzu6egrizbs4ydt.py":49:42)
#loc32 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":121:29)
#loc33 = loc("inductor_cache/nl/cnlbnih2bknpdel7z7p7knb6wccsiupl2ozb3wzu6egrizbs4ydt.py":52:20)
#loc34 = loc("inductor_cache/nl/cnlbnih2bknpdel7z7p7knb6wccsiupl2ozb3wzu6egrizbs4ydt.py":55:35)
#loc35 = loc("inductor_cache/nl/cnlbnih2bknpdel7z7p7knb6wccsiupl2ozb3wzu6egrizbs4ydt.py":55:50)
#loc36 = loc("inductor_cache/nl/cnlbnih2bknpdel7z7p7knb6wccsiupl2ozb3wzu6egrizbs4ydt.py":55:41)
#loc37 = loc("inductor_cache/nl/cnlbnih2bknpdel7z7p7knb6wccsiupl2ozb3wzu6egrizbs4ydt.py":55:31)
#loc38 = loc("inductor_cache/nl/cnlbnih2bknpdel7z7p7knb6wccsiupl2ozb3wzu6egrizbs4ydt.py":55:64)
#loc39 = loc("inductor_cache/nl/cnlbnih2bknpdel7z7p7knb6wccsiupl2ozb3wzu6egrizbs4ydt.py":55:56)
#loc40 = loc("inductor_cache/nl/cnlbnih2bknpdel7z7p7knb6wccsiupl2ozb3wzu6egrizbs4ydt.py":56:31)
#loc41 = loc("inductor_cache/nl/cnlbnih2bknpdel7z7p7knb6wccsiupl2ozb3wzu6egrizbs4ydt.py":56:45)
#loc42 = loc("inductor_cache/nl/cnlbnih2bknpdel7z7p7knb6wccsiupl2ozb3wzu6egrizbs4ydt.py":57:20)
#loc43 = loc("inductor_cache/nl/cnlbnih2bknpdel7z7p7knb6wccsiupl2ozb3wzu6egrizbs4ydt.py":58:31)
#loc44 = loc("inductor_cache/nl/cnlbnih2bknpdel7z7p7knb6wccsiupl2ozb3wzu6egrizbs4ydt.py":58:45)
#loc45 = loc("inductor_cache/nl/cnlbnih2bknpdel7z7p7knb6wccsiupl2ozb3wzu6egrizbs4ydt.py":60:20)
#loc46 = loc("inductor_cache/nl/cnlbnih2bknpdel7z7p7knb6wccsiupl2ozb3wzu6egrizbs4ydt.py":61:27)
#loc47 = loc("inductor_cache/nl/cnlbnih2bknpdel7z7p7knb6wccsiupl2ozb3wzu6egrizbs4ydt.py":63:20)
#loc48 = loc("inductor_cache/nl/cnlbnih2bknpdel7z7p7knb6wccsiupl2ozb3wzu6egrizbs4ydt.py":66:20)
#loc49 = loc("inductor_cache/nl/cnlbnih2bknpdel7z7p7knb6wccsiupl2ozb3wzu6egrizbs4ydt.py":67:31)
#loc50 = loc("inductor_cache/nl/cnlbnih2bknpdel7z7p7knb6wccsiupl2ozb3wzu6egrizbs4ydt.py":67:45)
#loc51 = loc("inductor_cache/nl/cnlbnih2bknpdel7z7p7knb6wccsiupl2ozb3wzu6egrizbs4ydt.py":68:20)
#loc52 = loc("inductor_cache/nl/cnlbnih2bknpdel7z7p7knb6wccsiupl2ozb3wzu6egrizbs4ydt.py":69:31)
#loc53 = loc("inductor_cache/nl/cnlbnih2bknpdel7z7p7knb6wccsiupl2ozb3wzu6egrizbs4ydt.py":69:45)
#loc54 = loc("inductor_cache/nl/cnlbnih2bknpdel7z7p7knb6wccsiupl2ozb3wzu6egrizbs4ydt.py":70:20)
#loc55 = loc("inductor_cache/nl/cnlbnih2bknpdel7z7p7knb6wccsiupl2ozb3wzu6egrizbs4ydt.py":72:42)
#loc56 = loc("inductor_cache/nl/cnlbnih2bknpdel7z7p7knb6wccsiupl2ozb3wzu6egrizbs4ydt.py":74:35)
#loc57 = loc("inductor_cache/nl/cnlbnih2bknpdel7z7p7knb6wccsiupl2ozb3wzu6egrizbs4ydt.py":75:34)
#loc58 = loc("inductor_cache/nl/cnlbnih2bknpdel7z7p7knb6wccsiupl2ozb3wzu6egrizbs4ydt.py":51:34)
#loc59 = loc("inductor_cache/nl/cnlbnih2bknpdel7z7p7knb6wccsiupl2ozb3wzu6egrizbs4ydt.py":76:25)
#loc60 = loc("inductor_cache/nl/cnlbnih2bknpdel7z7p7knb6wccsiupl2ozb3wzu6egrizbs4ydt.py":76:37)
#loc61 = loc("inductor_cache/nl/cnlbnih2bknpdel7z7p7knb6wccsiupl2ozb3wzu6egrizbs4ydt.py":76:4)
#loc62 = loc(callsite(#loc30 at #loc31))
#loc63 = loc(callsite(#loc32 at #loc31))
#loc64 = loc(callsite(#loc30 at #loc55))
#loc65 = loc(callsite(#loc32 at #loc55))
#loc66 = loc(fused[#loc57, #loc58])
