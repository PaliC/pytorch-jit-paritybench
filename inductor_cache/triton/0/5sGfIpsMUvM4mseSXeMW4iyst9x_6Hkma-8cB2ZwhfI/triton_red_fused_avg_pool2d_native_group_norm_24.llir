; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_red_fused_avg_pool2d_native_group_norm_24(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %9 = shl i32 %8, 4, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = and i32 %10, 31, !dbg !12
  %12 = and i32 %10, 15, !dbg !12
  %13 = lshr i32 %10, 5, !dbg !12
  %14 = and i32 %13, 15, !dbg !12
  %15 = or disjoint i32 %9, %12, !dbg !13
  %16 = or disjoint i32 %9, %14, !dbg !13
  %17 = icmp slt i32 %15, 128, !dbg !14
  %18 = icmp slt i32 %16, 128, !dbg !14
  %19 = lshr i32 %10, 4, !dbg !15
  %20 = shl i32 %10, 2, !dbg !15
  %21 = and i32 %20, 124, !dbg !15
  %22 = shl nuw nsw i32 %19, 1, !dbg !16
  %23 = and i32 %22, 6, !dbg !16
  %24 = shl nuw nsw i32 %19, 2, !dbg !17
  %25 = and i32 %24, 112, !dbg !17
  %26 = or disjoint i32 %23, %25, !dbg !18
  %27 = or disjoint i32 %26, 128, !dbg !18
  %28 = or disjoint i32 %26, 256, !dbg !18
  %29 = or disjoint i32 %26, 384, !dbg !18
  %30 = shl i32 %15, 9, !dbg !19
  %31 = or disjoint i32 %30, %26, !dbg !20
  %32 = or disjoint i32 %30, %27, !dbg !20
  %33 = or disjoint i32 %30, %28, !dbg !20
  %34 = or disjoint i32 %30, %29, !dbg !20
  %35 = sext i32 %31 to i64, !dbg !21
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !21
  %37 = sext i32 %32 to i64, !dbg !21
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !21
  %39 = sext i32 %33 to i64, !dbg !21
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !21
  %41 = sext i32 %34 to i64, !dbg !21
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !21
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %36, i1 %17, i32 0, i1 %17) #5, !dbg !22
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %38, i1 %17, i32 0, i1 %17) #5, !dbg !22
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %40, i1 %17, i32 0, i1 %17) #5, !dbg !22
  %46 = bitcast i32 %45 to float, !dbg !22
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %42, i1 %17, i32 0, i1 %17) #5, !dbg !22
  %48 = bitcast i32 %47 to float, !dbg !22
  %49 = or disjoint i32 %31, 1, !dbg !23
  %50 = or disjoint i32 %32, 1, !dbg !23
  %51 = or disjoint i32 %33, 1, !dbg !23
  %52 = or disjoint i32 %34, 1, !dbg !23
  %53 = sext i32 %49 to i64, !dbg !24
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !24
  %55 = sext i32 %50 to i64, !dbg !24
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !24
  %57 = sext i32 %51 to i64, !dbg !24
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !24
  %59 = sext i32 %52 to i64, !dbg !24
  %60 = getelementptr float, ptr addrspace(1) %0, i64 %59, !dbg !24
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %54, i1 %17, i32 0, i1 %17) #5, !dbg !25
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %56, i1 %17, i32 0, i1 %17) #5, !dbg !25
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %58, i1 %17, i32 0, i1 %17) #5, !dbg !25
  %64 = bitcast i32 %63 to float, !dbg !25
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %60, i1 %17, i32 0, i1 %17) #5, !dbg !25
  %66 = bitcast i32 %65 to float, !dbg !25
  %67 = or disjoint i32 %31, 8, !dbg !26
  %68 = or disjoint i32 %32, 8, !dbg !26
  %69 = or disjoint i32 %33, 8, !dbg !26
  %70 = or disjoint i32 %34, 8, !dbg !26
  %71 = sext i32 %67 to i64, !dbg !27
  %72 = getelementptr float, ptr addrspace(1) %0, i64 %71, !dbg !27
  %73 = sext i32 %68 to i64, !dbg !27
  %74 = getelementptr float, ptr addrspace(1) %0, i64 %73, !dbg !27
  %75 = sext i32 %69 to i64, !dbg !27
  %76 = getelementptr float, ptr addrspace(1) %0, i64 %75, !dbg !27
  %77 = sext i32 %70 to i64, !dbg !27
  %78 = getelementptr float, ptr addrspace(1) %0, i64 %77, !dbg !27
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %72, i1 %17, i32 0, i1 %17) #5, !dbg !28
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %74, i1 %17, i32 0, i1 %17) #5, !dbg !28
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %76, i1 %17, i32 0, i1 %17) #5, !dbg !28
  %82 = bitcast i32 %81 to float, !dbg !28
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %78, i1 %17, i32 0, i1 %17) #5, !dbg !28
  %84 = bitcast i32 %83 to float, !dbg !28
  %85 = or disjoint i32 %31, 9, !dbg !29
  %86 = or disjoint i32 %32, 9, !dbg !29
  %87 = or disjoint i32 %33, 9, !dbg !29
  %88 = or disjoint i32 %34, 9, !dbg !29
  %89 = sext i32 %85 to i64, !dbg !30
  %90 = getelementptr float, ptr addrspace(1) %0, i64 %89, !dbg !30
  %91 = sext i32 %86 to i64, !dbg !30
  %92 = getelementptr float, ptr addrspace(1) %0, i64 %91, !dbg !30
  %93 = sext i32 %87 to i64, !dbg !30
  %94 = getelementptr float, ptr addrspace(1) %0, i64 %93, !dbg !30
  %95 = sext i32 %88 to i64, !dbg !30
  %96 = getelementptr float, ptr addrspace(1) %0, i64 %95, !dbg !30
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %90, i1 %17, i32 0, i1 %17) #5, !dbg !31
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %92, i1 %17, i32 0, i1 %17) #5, !dbg !31
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %94, i1 %17, i32 0, i1 %17) #5, !dbg !31
  %100 = bitcast i32 %99 to float, !dbg !31
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %96, i1 %17, i32 0, i1 %17) #5, !dbg !31
  %102 = bitcast i32 %101 to float, !dbg !31
  %103 = fadd float %46, %64, !dbg !32
  %104 = fadd float %48, %66, !dbg !32
  %105 = fadd float %103, %82, !dbg !33
  %106 = fadd float %104, %84, !dbg !33
  %107 = fadd float %105, %100, !dbg !34
  %108 = fadd float %106, %102, !dbg !34
  %109 = fmul float %107, 2.500000e-01, !dbg !35
  %110 = fmul float %108, 2.500000e-01, !dbg !35
  %111 = insertelement <2 x i32> poison, i32 %44, i64 0, !dbg !22
  %112 = insertelement <2 x i32> %111, i32 %43, i64 1, !dbg !22
  %113 = bitcast <2 x i32> %112 to <2 x float>, !dbg !22
  %114 = insertelement <2 x i32> poison, i32 %62, i64 0, !dbg !25
  %115 = insertelement <2 x i32> %114, i32 %61, i64 1, !dbg !25
  %116 = bitcast <2 x i32> %115 to <2 x float>, !dbg !25
  %117 = insertelement <2 x i32> poison, i32 %80, i64 0, !dbg !28
  %118 = insertelement <2 x i32> %117, i32 %79, i64 1, !dbg !28
  %119 = bitcast <2 x i32> %118 to <2 x float>, !dbg !28
  %120 = insertelement <2 x i32> poison, i32 %98, i64 0, !dbg !31
  %121 = insertelement <2 x i32> %120, i32 %97, i64 1, !dbg !31
  %122 = bitcast <2 x i32> %121 to <2 x float>, !dbg !31
  %123 = fadd <2 x float> %113, %116, !dbg !32
  %124 = fadd <2 x float> %123, %119, !dbg !33
  %125 = fadd <2 x float> %124, %122, !dbg !34
  %126 = fmul <2 x float> %125, splat (float 2.500000e-01), !dbg !35
  %127 = insertelement <2 x i1> poison, i1 %17, i64 0, !dbg !36
  %128 = shufflevector <2 x i1> %127, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !36
  %129 = select <2 x i1> %128, <2 x float> %126, <2 x float> zeroinitializer, !dbg !36
  %130 = select i1 %17, float %109, float 0.000000e+00, !dbg !36
  %131 = select i1 %17, float %110, float 0.000000e+00, !dbg !36
  %132 = select i1 %17, float 1.000000e+00, float 0.000000e+00, !dbg !37
  %133 = shl i32 %16, 7, !dbg !38
  %134 = or disjoint i32 %133, %21, !dbg !39
  %135 = sext i32 %134 to i64, !dbg !40
  %136 = getelementptr float, ptr addrspace(1) %1, i64 %135, !dbg !40
  %137 = shl i32 %10, 7, !dbg !41
  %138 = and i32 %137, 1920, !dbg !41
  %139 = and i32 %19, 31, !dbg !41
  %140 = or disjoint i32 %138, %139, !dbg !41
  %141 = and i32 %20, 2044, !dbg !41
  %142 = lshr exact i32 %138, 3, !dbg !41
  %143 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %142, !dbg !41
  %144 = getelementptr float, ptr addrspace(3) %143, i32 %140, !dbg !41
  %145 = extractelement <2 x float> %126, i64 1, !dbg !41
  %146 = bitcast float %145 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %144, <1 x i32> %146, i1 true) #5, !dbg !41
  %147 = or disjoint i32 %140, 32, !dbg !41
  %148 = getelementptr float, ptr addrspace(3) %143, i32 %147, !dbg !41
  %149 = extractelement <2 x float> %126, i64 0, !dbg !41
  %150 = bitcast float %149 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %148, <1 x i32> %150, i1 true) #5, !dbg !41
  %151 = or disjoint i32 %140, 64, !dbg !41
  %152 = getelementptr float, ptr addrspace(3) %143, i32 %151, !dbg !41
  %153 = bitcast float %109 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %152, <1 x i32> %153, i1 true) #5, !dbg !41
  %154 = or disjoint i32 %140, 96, !dbg !41
  %155 = getelementptr float, ptr addrspace(3) %143, i32 %154, !dbg !41
  %156 = bitcast float %110 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %155, <1 x i32> %156, i1 true) #5, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %157 = lshr i32 %20, 5, !dbg !41
  %158 = and i32 %157, 60, !dbg !41
  %159 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %158, !dbg !41
  %160 = getelementptr inbounds float, ptr addrspace(3) %159, i32 %141, !dbg !41
  %.extract = load i32, ptr addrspace(3) %160, align 16, !dbg !41
  %161 = getelementptr inbounds i8, ptr addrspace(3) %160, i32 4, !dbg !41
  %.extract7 = load i32, ptr addrspace(3) %161, align 4, !dbg !41
  %162 = getelementptr inbounds i8, ptr addrspace(3) %160, i32 8, !dbg !41
  %.extract8 = load i32, ptr addrspace(3) %162, align 8, !dbg !41
  %163 = getelementptr inbounds i8, ptr addrspace(3) %160, i32 12, !dbg !41
  %.extract9 = load i32, ptr addrspace(3) %163, align 4, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract7, i32 %.extract8, i32 %.extract9, ptr addrspace(1) %136, i1 %18) #5, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %164 = extractelement <2 x float> %129, i64 0, !dbg !46
  %165 = extractelement <2 x float> %129, i64 1, !dbg !48
  %166 = fsub float %164, %165, !dbg !46
  %167 = select i1 %17, float 2.000000e+00, float 0.000000e+00, !dbg !49
  %168 = fcmp oeq float %167, 0.000000e+00, !dbg !50
  %169 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %132, float %167) #5, !dbg !51
  %170 = select i1 %168, float 0.000000e+00, float %169, !dbg !52
  %171 = fmul float %166, %170, !dbg !53
  %172 = fadd float %165, %171, !dbg !48
  %173 = fmul float %166, %166, !dbg !54
  %174 = fmul float %132, %173, !dbg !55
  %175 = fmul float %174, %170, !dbg !56
  %176 = fadd float %175, 0.000000e+00, !dbg !57
  %177 = fsub float %130, %172, !dbg !46
  %178 = select i1 %17, float 3.000000e+00, float 0.000000e+00, !dbg !49
  %179 = fcmp oeq float %178, 0.000000e+00, !dbg !50
  %180 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %132, float %178) #5, !dbg !51
  %181 = select i1 %179, float 0.000000e+00, float %180, !dbg !52
  %182 = fmul float %181, %177, !dbg !53
  %183 = fadd float %172, %182, !dbg !48
  %184 = fmul float %177, %177, !dbg !54
  %185 = fmul float %167, %184, !dbg !55
  %186 = fmul float %181, %185, !dbg !56
  %187 = fadd float %176, %186, !dbg !57
  %188 = fsub float %131, %183, !dbg !46
  %189 = select i1 %17, float 4.000000e+00, float 0.000000e+00, !dbg !49
  %190 = fcmp oeq float %189, 0.000000e+00, !dbg !50
  %191 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %132, float %189) #5, !dbg !51
  %192 = select i1 %190, float 0.000000e+00, float %191, !dbg !52
  %193 = fmul float %192, %188, !dbg !53
  %194 = fadd float %183, %193, !dbg !48
  %195 = fmul float %188, %188, !dbg !54
  %196 = fmul float %178, %195, !dbg !55
  %197 = fmul float %192, %196, !dbg !56
  %198 = fadd float %187, %197, !dbg !57
  %199 = bitcast float %194 to i32, !dbg !42
  %200 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %199, i32 16, i32 31), !dbg !42
  %201 = bitcast i32 %200 to float, !dbg !42
  %202 = bitcast float %198 to i32, !dbg !42
  %203 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %202, i32 16, i32 31), !dbg !42
  %204 = bitcast i32 %203 to float, !dbg !42
  %205 = bitcast float %189 to i32, !dbg !42
  %206 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %205, i32 16, i32 31), !dbg !42
  %207 = bitcast i32 %206 to float, !dbg !42
  %208 = fsub float %201, %194, !dbg !46
  %209 = fadd float %189, %207, !dbg !49
  %210 = fcmp oeq float %209, 0.000000e+00, !dbg !50
  %211 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %207, float %209) #5, !dbg !51
  %212 = select i1 %210, float 0.000000e+00, float %211, !dbg !52
  %213 = fmul float %212, %208, !dbg !53
  %214 = fadd float %194, %213, !dbg !48
  %215 = fadd float %198, %204, !dbg !58
  %216 = fmul float %208, %208, !dbg !54
  %217 = fmul float %189, %216, !dbg !55
  %218 = fmul float %212, %217, !dbg !56
  %219 = fadd float %215, %218, !dbg !57
  %220 = lshr i32 %11, 4, !dbg !42
  %221 = icmp samesign ult i32 %11, 16, !dbg !42
  %222 = shl nuw nsw i32 %12, 4, !dbg !42
  %223 = or disjoint i32 %222, %14, !dbg !42
  %224 = getelementptr float, ptr addrspace(3) @global_smem, i32 %223, !dbg !42
  %225 = bitcast float %214 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %224, <1 x i32> %225, i1 %221) #5, !dbg !42
  %226 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %223, !dbg !42
  %227 = bitcast float %219 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %226, <1 x i32> %227, i1 %221) #5, !dbg !42
  %228 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 2048), i32 %223, !dbg !42
  %229 = bitcast float %209 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %228, <1 x i32> %229, i1 %221) #5, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %230 = icmp slt i32 %10, 256, !dbg !42
  %231 = getelementptr float, ptr addrspace(3) @global_smem, i32 %10, !dbg !42
  %232 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %231, i1 %230) #5, !dbg !42
  %233 = bitcast i32 %232 to float, !dbg !42
  %234 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %10, !dbg !42
  %235 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %234, i1 %230) #5, !dbg !42
  %236 = bitcast i32 %235 to float, !dbg !42
  %237 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 2048), i32 %10, !dbg !42
  %238 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %237, i1 %230) #5, !dbg !42
  %239 = bitcast i32 %238 to float, !dbg !42
  %240 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %232, i32 8, i32 31), !dbg !42
  %241 = bitcast i32 %240 to float, !dbg !42
  %242 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %235, i32 8, i32 31), !dbg !42
  %243 = bitcast i32 %242 to float, !dbg !42
  %244 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %238, i32 8, i32 31), !dbg !42
  %245 = bitcast i32 %244 to float, !dbg !42
  %246 = fsub float %241, %233, !dbg !46
  %247 = fadd float %239, %245, !dbg !49
  %248 = fcmp oeq float %247, 0.000000e+00, !dbg !50
  %249 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %245, float %247) #5, !dbg !51
  %250 = select i1 %248, float 0.000000e+00, float %249, !dbg !52
  %251 = fmul float %246, %250, !dbg !53
  %252 = fadd float %251, %233, !dbg !48
  %253 = fadd float %236, %243, !dbg !58
  %254 = fmul float %246, %246, !dbg !54
  %255 = fmul float %254, %239, !dbg !55
  %256 = fmul float %255, %250, !dbg !56
  %257 = fadd float %253, %256, !dbg !57
  %258 = bitcast float %252 to i32, !dbg !42
  %259 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %258, i32 4, i32 31), !dbg !42
  %260 = bitcast i32 %259 to float, !dbg !42
  %261 = bitcast float %257 to i32, !dbg !42
  %262 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %261, i32 4, i32 31), !dbg !42
  %263 = bitcast i32 %262 to float, !dbg !42
  %264 = bitcast float %247 to i32, !dbg !42
  %265 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %264, i32 4, i32 31), !dbg !42
  %266 = bitcast i32 %265 to float, !dbg !42
  %267 = fsub float %260, %252, !dbg !46
  %268 = fadd float %247, %266, !dbg !49
  %269 = fcmp oeq float %268, 0.000000e+00, !dbg !50
  %270 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %266, float %268) #5, !dbg !51
  %271 = select i1 %269, float 0.000000e+00, float %270, !dbg !52
  %272 = fmul float %267, %271, !dbg !53
  %273 = fadd float %252, %272, !dbg !48
  %274 = fadd float %257, %263, !dbg !58
  %275 = fmul float %267, %267, !dbg !54
  %276 = fmul float %247, %275, !dbg !55
  %277 = fmul float %271, %276, !dbg !56
  %278 = fadd float %274, %277, !dbg !57
  %279 = bitcast float %273 to i32, !dbg !42
  %280 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %279, i32 2, i32 31), !dbg !42
  %281 = bitcast i32 %280 to float, !dbg !42
  %282 = bitcast float %278 to i32, !dbg !42
  %283 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %282, i32 2, i32 31), !dbg !42
  %284 = bitcast i32 %283 to float, !dbg !42
  %285 = bitcast float %268 to i32, !dbg !42
  %286 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %285, i32 2, i32 31), !dbg !42
  %287 = bitcast i32 %286 to float, !dbg !42
  %288 = fsub float %281, %273, !dbg !46
  %289 = fadd float %268, %287, !dbg !49
  %290 = fcmp oeq float %289, 0.000000e+00, !dbg !50
  %291 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %287, float %289) #5, !dbg !51
  %292 = select i1 %290, float 0.000000e+00, float %291, !dbg !52
  %293 = fmul float %288, %292, !dbg !53
  %294 = fadd float %273, %293, !dbg !48
  %295 = fadd float %278, %284, !dbg !58
  %296 = fmul float %288, %288, !dbg !54
  %297 = fmul float %268, %296, !dbg !55
  %298 = fmul float %292, %297, !dbg !56
  %299 = fadd float %295, %298, !dbg !57
  %300 = bitcast float %294 to i32, !dbg !42
  %301 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %300, i32 1, i32 31), !dbg !42
  %302 = bitcast i32 %301 to float, !dbg !42
  %303 = bitcast float %299 to i32, !dbg !42
  %304 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %303, i32 1, i32 31), !dbg !42
  %305 = bitcast i32 %304 to float, !dbg !42
  %306 = bitcast float %289 to i32, !dbg !42
  %307 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %306, i32 1, i32 31), !dbg !42
  %308 = bitcast i32 %307 to float, !dbg !42
  %309 = fsub float %302, %294, !dbg !46
  %310 = fadd float %289, %308, !dbg !49
  %311 = fcmp oeq float %310, 0.000000e+00, !dbg !50
  %312 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %308, float %310) #5, !dbg !51
  %313 = select i1 %311, float 0.000000e+00, float %312, !dbg !52
  %314 = fmul float %309, %313, !dbg !53
  %315 = fadd float %294, %314, !dbg !48
  %316 = fadd float %299, %305, !dbg !58
  %317 = fmul float %309, %309, !dbg !54
  %318 = fmul float %289, %317, !dbg !55
  %319 = fmul float %313, %318, !dbg !56
  %320 = fadd float %316, %319, !dbg !57
  %321 = icmp eq i32 %12, 0, !dbg !42
  %322 = and i1 %230, %321, !dbg !42
  %323 = bitcast float %315 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %231, <1 x i32> %323, i1 %322) #5, !dbg !42
  %324 = bitcast float %320 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %234, <1 x i32> %324, i1 %322) #5, !dbg !42
  %325 = bitcast float %310 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %237, <1 x i32> %325, i1 %322) #5, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %326 = getelementptr float, ptr addrspace(3) @global_smem, i32 %222, !dbg !42
  %327 = load i32, ptr addrspace(3) %326, align 16, !dbg !42
  %328 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 1024), i32 %222, !dbg !42
  %329 = load float, ptr addrspace(3) %328, align 16, !dbg !42
  %330 = sext i32 %15 to i64, !dbg !59
  %331 = getelementptr float, ptr addrspace(1) %2, i64 %330, !dbg !59
  %332 = shl nuw nsw i32 %14, 1, !dbg !60
  %333 = or disjoint i32 %332, %220, !dbg !60
  %334 = icmp eq i32 %333, 0, !dbg !60
  %335 = and i1 %334, %17, !dbg !60
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %327, ptr addrspace(1) %331, i1 %335) #5, !dbg !60
  %336 = getelementptr float, ptr addrspace(1) %3, i64 %330, !dbg !61
  %337 = bitcast float %329 to i32, !dbg !62
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %337, ptr addrspace(1) %336, i1 %335) #5, !dbg !62
  %338 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %329, float 1.280000e+02) #5, !dbg !63
  %339 = fadd float %338, 0x3EE4F8B580000000, !dbg !64
  %340 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !65
  %.not.i = icmp eq i32 %340, 0, !dbg !65
  br i1 %.not.i, label %343, label %341, !dbg !65

341:                                              ; preds = %7
  %342 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %339), !dbg !65
  br label %__nv_rsqrtf.exit, !dbg !65

343:                                              ; preds = %7
  %344 = tail call float @llvm.nvvm.rsqrt.approx.f(float %339), !dbg !65
  br label %__nv_rsqrtf.exit, !dbg !65

__nv_rsqrtf.exit:                                 ; preds = %341, %343
  %.0.i = phi float [ %342, %341 ], [ %344, %343 ], !dbg !65
  %345 = getelementptr float, ptr addrspace(1) %4, i64 %330, !dbg !66
  %346 = bitcast float %.0.i to i32, !dbg !67
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %346, ptr addrspace(1) %345, i1 %335) #5, !dbg !67
  ret void, !dbg !68
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c5wz7ctqcquzljbcks5u73pwutuwwyrsyvfne7nlac53bvasgdos.py", directory: "inductor_cache/5w")
!4 = !{ptr @triton_red_fused_avg_pool2d_native_group_norm_24, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_avg_pool2d_native_group_norm_24, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_avg_pool2d_native_group_norm_24", linkageName: "triton_red_fused_avg_pool2d_native_group_norm_24", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 36, column: 36, scope: !7)
!17 = !DILocation(line: 36, column: 44, scope: !7)
!18 = !DILocation(line: 36, column: 41, scope: !7)
!19 = !DILocation(line: 36, column: 53, scope: !7)
!20 = !DILocation(line: 36, column: 49, scope: !7)
!21 = !DILocation(line: 36, column: 34, scope: !7)
!22 = !DILocation(line: 36, column: 58, scope: !7)
!23 = !DILocation(line: 37, column: 53, scope: !7)
!24 = !DILocation(line: 37, column: 34, scope: !7)
!25 = !DILocation(line: 37, column: 62, scope: !7)
!26 = !DILocation(line: 38, column: 53, scope: !7)
!27 = !DILocation(line: 38, column: 34, scope: !7)
!28 = !DILocation(line: 38, column: 62, scope: !7)
!29 = !DILocation(line: 39, column: 53, scope: !7)
!30 = !DILocation(line: 39, column: 34, scope: !7)
!31 = !DILocation(line: 39, column: 62, scope: !7)
!32 = !DILocation(line: 40, column: 22, scope: !7)
!33 = !DILocation(line: 41, column: 22, scope: !7)
!34 = !DILocation(line: 42, column: 22, scope: !7)
!35 = !DILocation(line: 44, column: 22, scope: !7)
!36 = !DILocation(line: 49, column: 62, scope: !7)
!37 = !DILocation(line: 51, column: 66, scope: !7)
!38 = !DILocation(line: 52, column: 38, scope: !7)
!39 = !DILocation(line: 52, column: 34, scope: !7)
!40 = !DILocation(line: 52, column: 29, scope: !7)
!41 = !DILocation(line: 52, column: 49, scope: !7)
!42 = !DILocation(line: 204, column: 46, scope: !43, inlinedAt: !45)
!43 = distinct !DILexicalBlockFile(scope: !7, file: !44, discriminator: 0)
!44 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!45 = !DILocation(line: 54, column: 44, scope: !7)
!46 = !DILocation(line: 192, column: 21, scope: !47, inlinedAt: !45)
!47 = distinct !DILexicalBlockFile(scope: !43, file: !44, discriminator: 0)
!48 = !DILocation(line: 196, column: 17, scope: !47, inlinedAt: !45)
!49 = !DILocation(line: 193, column: 28, scope: !47, inlinedAt: !45)
!50 = !DILocation(line: 194, column: 39, scope: !47, inlinedAt: !45)
!51 = !DILocation(line: 194, column: 60, scope: !47, inlinedAt: !45)
!52 = !DILocation(line: 194, column: 49, scope: !47, inlinedAt: !45)
!53 = !DILocation(line: 196, column: 25, scope: !47, inlinedAt: !45)
!54 = !DILocation(line: 197, column: 30, scope: !47, inlinedAt: !45)
!55 = !DILocation(line: 197, column: 38, scope: !47, inlinedAt: !45)
!56 = !DILocation(line: 197, column: 49, scope: !47, inlinedAt: !45)
!57 = !DILocation(line: 197, column: 22, scope: !47, inlinedAt: !45)
!58 = !DILocation(line: 197, column: 15, scope: !47, inlinedAt: !45)
!59 = !DILocation(line: 59, column: 25, scope: !7)
!60 = !DILocation(line: 59, column: 37, scope: !7)
!61 = !DILocation(line: 60, column: 25, scope: !7)
!62 = !DILocation(line: 60, column: 37, scope: !7)
!63 = !DILocation(line: 62, column: 20, scope: !7)
!64 = !DILocation(line: 64, column: 20, scope: !7)
!65 = !DILocation(line: 65, column: 28, scope: !7)
!66 = !DILocation(line: 66, column: 25, scope: !7)
!67 = !DILocation(line: 66, column: 37, scope: !7)
!68 = !DILocation(line: 66, column: 4, scope: !7)
