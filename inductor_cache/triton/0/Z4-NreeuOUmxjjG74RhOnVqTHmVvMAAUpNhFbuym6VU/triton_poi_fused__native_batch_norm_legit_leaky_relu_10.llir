; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_leaky_relu_10(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %10 = shl i32 %9, 5, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = lshr i32 %11, 3, !dbg !12
  %13 = and i32 %12, 15, !dbg !12
  %14 = or disjoint i32 %13, 16, !dbg !12
  %15 = shl i32 %11, 2, !dbg !12
  %16 = and i32 %15, 28, !dbg !12
  %17 = or disjoint i32 %10, %13, !dbg !13
  %18 = or disjoint i32 %10, %14, !dbg !13
  %19 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %20 = shl i32 %19, 5, !dbg !15
  %21 = or disjoint i32 %20, %16, !dbg !16
  %22 = icmp slt i32 %21, 1024, !dbg !17
  %23 = shl i32 %17, 8, !dbg !18
  %24 = shl i32 %18, 8, !dbg !18
  %.frozen = freeze i32 %21, !dbg !19
  %25 = sdiv i32 %.frozen, 256, !dbg !19
  %26 = shl i32 %25, 18, !dbg !20
  %27 = mul i32 %25, 256, !dbg !21
  %.decomposed = sub i32 %.frozen, %27, !dbg !21
  %28 = add i32 %26, %.decomposed, !dbg !22
  %29 = add i32 %28, %23, !dbg !23
  %30 = add i32 %28, %24, !dbg !23
  %31 = sext i32 %29 to i64, !dbg !24
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !24
  %33 = sext i32 %30 to i64, !dbg !24
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !24
  %35 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %32, i1 %22) #4, !dbg !25
  %36 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %34, i1 %22) #4, !dbg !25
  %37 = sext i32 %21 to i64, !dbg !26
  %38 = getelementptr float, ptr addrspace(1) %1, i64 %37, !dbg !26
  %39 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %38, i1 %22) #4, !dbg !27
  %40 = getelementptr float, ptr addrspace(1) %2, i64 %37, !dbg !28
  %41 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %40, i1 %22) #4, !dbg !29
  %42 = extractvalue { i32, i32, i32, i32 } %41, 0, !dbg !29
  %43 = extractvalue { i32, i32, i32, i32 } %41, 1, !dbg !29
  %44 = extractvalue { i32, i32, i32, i32 } %41, 2, !dbg !29
  %45 = extractvalue { i32, i32, i32, i32 } %41, 3, !dbg !29
  %46 = bitcast i32 %42 to float, !dbg !29
  %47 = bitcast i32 %43 to float, !dbg !29
  %48 = bitcast i32 %44 to float, !dbg !29
  %49 = bitcast i32 %45 to float, !dbg !29
  %50 = getelementptr float, ptr addrspace(1) %3, i64 %37, !dbg !30
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %50, i1 %22) #4, !dbg !31
  %52 = sext i32 %.decomposed to i64, !dbg !32
  %53 = getelementptr float, ptr addrspace(1) %4, i64 %52, !dbg !32
  %54 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %53, i1 %22) #4, !dbg !33
  %55 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %46, float 1.024000e+03) #4, !dbg !34
  %56 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %47, float 1.024000e+03) #4, !dbg !34
  %57 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %48, float 1.024000e+03) #4, !dbg !34
  %58 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %49, float 1.024000e+03) #4, !dbg !34
  %59 = fadd float %55, 0x3EE4F8B580000000, !dbg !35
  %60 = fadd float %56, 0x3EE4F8B580000000, !dbg !35
  %61 = fadd float %57, 0x3EE4F8B580000000, !dbg !35
  %62 = fadd float %58, 0x3EE4F8B580000000, !dbg !35
  %63 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i = icmp eq i32 %63, 0, !dbg !36
  br i1 %.not.i, label %66, label %64, !dbg !36

64:                                               ; preds = %8
  %65 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %59), !dbg !36
  br label %__nv_rsqrtf.exit, !dbg !36

66:                                               ; preds = %8
  %67 = tail call float @llvm.nvvm.rsqrt.approx.f(float %59), !dbg !36
  br label %__nv_rsqrtf.exit, !dbg !36

__nv_rsqrtf.exit:                                 ; preds = %64, %66
  %.0.i = phi float [ %65, %64 ], [ %67, %66 ], !dbg !36
  %68 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i15 = icmp eq i32 %68, 0, !dbg !36
  br i1 %.not.i15, label %71, label %69, !dbg !36

69:                                               ; preds = %__nv_rsqrtf.exit
  %70 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %60), !dbg !36
  br label %__nv_rsqrtf.exit17, !dbg !36

71:                                               ; preds = %__nv_rsqrtf.exit
  %72 = tail call float @llvm.nvvm.rsqrt.approx.f(float %60), !dbg !36
  br label %__nv_rsqrtf.exit17, !dbg !36

__nv_rsqrtf.exit17:                               ; preds = %69, %71
  %.0.i16 = phi float [ %70, %69 ], [ %72, %71 ], !dbg !36
  %73 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i18 = icmp eq i32 %73, 0, !dbg !36
  br i1 %.not.i18, label %76, label %74, !dbg !36

74:                                               ; preds = %__nv_rsqrtf.exit17
  %75 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %61), !dbg !36
  br label %__nv_rsqrtf.exit20, !dbg !36

76:                                               ; preds = %__nv_rsqrtf.exit17
  %77 = tail call float @llvm.nvvm.rsqrt.approx.f(float %61), !dbg !36
  br label %__nv_rsqrtf.exit20, !dbg !36

__nv_rsqrtf.exit20:                               ; preds = %74, %76
  %.0.i19 = phi float [ %75, %74 ], [ %77, %76 ], !dbg !36
  %78 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i21 = icmp eq i32 %78, 0, !dbg !36
  br i1 %.not.i21, label %81, label %79, !dbg !36

79:                                               ; preds = %__nv_rsqrtf.exit20
  %80 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %62), !dbg !36
  br label %__nv_rsqrtf.exit23, !dbg !36

81:                                               ; preds = %__nv_rsqrtf.exit20
  %82 = tail call float @llvm.nvvm.rsqrt.approx.f(float %62), !dbg !36
  br label %__nv_rsqrtf.exit23, !dbg !36

__nv_rsqrtf.exit23:                               ; preds = %79, %81
  %.0.i22 = phi float [ %80, %79 ], [ %82, %81 ], !dbg !36
  %83 = extractvalue { i32, i32, i32, i32 } %36, 3, !dbg !25
  %84 = extractvalue { i32, i32, i32, i32 } %39, 3, !dbg !27
  %85 = extractvalue { i32, i32, i32, i32 } %36, 2, !dbg !25
  %86 = extractvalue { i32, i32, i32, i32 } %39, 2, !dbg !27
  %87 = extractvalue { i32, i32, i32, i32 } %36, 1, !dbg !25
  %88 = extractvalue { i32, i32, i32, i32 } %39, 1, !dbg !27
  %89 = extractvalue { i32, i32, i32, i32 } %36, 0, !dbg !25
  %90 = extractvalue { i32, i32, i32, i32 } %39, 0, !dbg !27
  %91 = extractvalue { i32, i32, i32, i32 } %35, 3, !dbg !25
  %92 = extractvalue { i32, i32, i32, i32 } %35, 2, !dbg !25
  %93 = extractvalue { i32, i32, i32, i32 } %35, 1, !dbg !25
  %94 = extractvalue { i32, i32, i32, i32 } %35, 0, !dbg !25
  %95 = extractvalue { i32, i32, i32, i32 } %54, 3, !dbg !33
  %96 = extractvalue { i32, i32, i32, i32 } %54, 2, !dbg !33
  %97 = extractvalue { i32, i32, i32, i32 } %54, 1, !dbg !33
  %98 = extractvalue { i32, i32, i32, i32 } %54, 0, !dbg !33
  %99 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !31
  %100 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !31
  %101 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !31
  %102 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !31
  %103 = or disjoint i32 %20, %14, !dbg !16
  %104 = icmp slt i32 %103, 1024, !dbg !17
  %105 = or disjoint i32 %20, %13, !dbg !16
  %106 = icmp slt i32 %105, 1024, !dbg !17
  %107 = or disjoint i32 %10, %16, !dbg !13
  %108 = insertelement <4 x i32> poison, i32 %84, i64 0, !dbg !27
  %109 = insertelement <4 x i32> %108, i32 %86, i64 1, !dbg !27
  %110 = insertelement <4 x i32> %109, i32 %88, i64 2, !dbg !27
  %111 = insertelement <4 x i32> %110, i32 %90, i64 3, !dbg !27
  %112 = bitcast <4 x i32> %111 to <4 x float>, !dbg !27
  %113 = shufflevector <4 x float> %112, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !27
  %114 = insertelement <8 x i32> poison, i32 %83, i64 0, !dbg !25
  %115 = insertelement <8 x i32> %114, i32 %85, i64 1, !dbg !25
  %116 = insertelement <8 x i32> %115, i32 %87, i64 2, !dbg !25
  %117 = insertelement <8 x i32> %116, i32 %89, i64 3, !dbg !25
  %118 = insertelement <8 x i32> %117, i32 %91, i64 4, !dbg !25
  %119 = insertelement <8 x i32> %118, i32 %92, i64 5, !dbg !25
  %120 = insertelement <8 x i32> %119, i32 %93, i64 6, !dbg !25
  %121 = insertelement <8 x i32> %120, i32 %94, i64 7, !dbg !25
  %122 = bitcast <8 x i32> %121 to <8 x float>, !dbg !25
  %123 = fsub <8 x float> %122, %113, !dbg !37
  %124 = insertelement <4 x i32> poison, i32 %95, i64 0, !dbg !33
  %125 = insertelement <4 x i32> %124, i32 %96, i64 1, !dbg !33
  %126 = insertelement <4 x i32> %125, i32 %97, i64 2, !dbg !33
  %127 = insertelement <4 x i32> %126, i32 %98, i64 3, !dbg !33
  %128 = bitcast <4 x i32> %127 to <4 x float>, !dbg !33
  %129 = shufflevector <4 x float> %128, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !33
  %130 = insertelement <4 x i32> poison, i32 %99, i64 0, !dbg !31
  %131 = insertelement <4 x i32> %130, i32 %100, i64 1, !dbg !31
  %132 = insertelement <4 x i32> %131, i32 %101, i64 2, !dbg !31
  %133 = insertelement <4 x i32> %132, i32 %102, i64 3, !dbg !31
  %134 = bitcast <4 x i32> %133 to <4 x float>, !dbg !31
  %135 = shufflevector <4 x float> %134, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !31
  %136 = insertelement <8 x float> poison, float %.0.i22, i64 0, !dbg !38
  %137 = insertelement <8 x float> %136, float %.0.i19, i64 1, !dbg !38
  %138 = insertelement <8 x float> %137, float %.0.i16, i64 2, !dbg !38
  %139 = insertelement <8 x float> %138, float %.0.i, i64 3, !dbg !38
  %140 = shufflevector <8 x float> %139, <8 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !38
  %141 = fmul <8 x float> %123, %140, !dbg !38
  %142 = fmul <8 x float> %141, %135, !dbg !39
  %143 = fadd <8 x float> %142, %129, !dbg !40
  %144 = fcmp ogt <8 x float> %143, zeroinitializer, !dbg !41
  %145 = extractelement <8 x float> %143, i64 7, !dbg !42
  %146 = fmul float %145, 0x3FC99999A0000000, !dbg !43
  %147 = extractelement <8 x float> %143, i64 6, !dbg !42
  %148 = fmul float %147, 0x3FC99999A0000000, !dbg !43
  %149 = extractelement <8 x float> %143, i64 5, !dbg !42
  %150 = fmul float %149, 0x3FC99999A0000000, !dbg !43
  %151 = extractelement <8 x float> %143, i64 4, !dbg !42
  %152 = fmul float %151, 0x3FC99999A0000000, !dbg !43
  %153 = extractelement <8 x float> %143, i64 3, !dbg !42
  %154 = fmul float %153, 0x3FC99999A0000000, !dbg !43
  %155 = extractelement <8 x float> %143, i64 2, !dbg !42
  %156 = fmul float %155, 0x3FC99999A0000000, !dbg !43
  %157 = extractelement <8 x float> %143, i64 1, !dbg !42
  %158 = fmul float %157, 0x3FC99999A0000000, !dbg !43
  %159 = extractelement <8 x float> %143, i64 0, !dbg !42
  %160 = fmul float %159, 0x3FC99999A0000000, !dbg !43
  %161 = extractelement <8 x i1> %144, i64 7, !dbg !42
  %162 = select i1 %161, float %145, float %146, !dbg !42
  %163 = extractelement <8 x i1> %144, i64 6, !dbg !42
  %164 = select i1 %163, float %147, float %148, !dbg !42
  %165 = extractelement <8 x i1> %144, i64 5, !dbg !42
  %166 = select i1 %165, float %149, float %150, !dbg !42
  %167 = extractelement <8 x i1> %144, i64 4, !dbg !42
  %168 = select i1 %167, float %151, float %152, !dbg !42
  %169 = extractelement <8 x i1> %144, i64 3, !dbg !42
  %170 = select i1 %169, float %153, float %154, !dbg !42
  %171 = extractelement <8 x i1> %144, i64 2, !dbg !42
  %172 = select i1 %171, float %155, float %156, !dbg !42
  %173 = extractelement <8 x i1> %144, i64 1, !dbg !42
  %174 = select i1 %173, float %157, float %158, !dbg !42
  %175 = extractelement <8 x i1> %144, i64 0, !dbg !42
  %176 = select i1 %175, float %159, float %160, !dbg !42
  %177 = shl i32 %105, 10, !dbg !44
  %178 = shl i32 %103, 10, !dbg !44
  %179 = add i32 %177, %107, !dbg !45
  %180 = add i32 %178, %107, !dbg !45
  %181 = sext i32 %179 to i64, !dbg !46
  %182 = getelementptr float, ptr addrspace(1) %5, i64 %181, !dbg !46
  %183 = sext i32 %180 to i64, !dbg !46
  %184 = getelementptr float, ptr addrspace(1) %5, i64 %183, !dbg !46
  %185 = shl i32 %11, 7, !dbg !47
  %186 = and i32 %185, 896, !dbg !47
  %187 = or disjoint i32 %186, %13, !dbg !47
  %188 = and i32 %15, 508, !dbg !47
  %189 = lshr exact i32 %186, 1, !dbg !47
  %190 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %189, !dbg !47
  %191 = getelementptr float, ptr addrspace(3) %190, i32 %187, !dbg !47
  %192 = bitcast float %162 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %191, <1 x i32> %192, i1 true) #4, !dbg !47
  %193 = or disjoint i32 %187, 32, !dbg !47
  %194 = lshr i32 %193, 3, !dbg !47
  %195 = and i32 %194, 116, !dbg !47
  %196 = getelementptr float, ptr addrspace(3) @global_smem, i32 %195, !dbg !47
  %197 = getelementptr float, ptr addrspace(3) %196, i32 %193, !dbg !47
  %198 = bitcast float %164 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %197, <1 x i32> %198, i1 true) #4, !dbg !47
  %199 = or disjoint i32 %187, 64, !dbg !47
  %200 = lshr i32 %199, 3, !dbg !47
  %201 = and i32 %200, 120, !dbg !47
  %202 = getelementptr float, ptr addrspace(3) @global_smem, i32 %201, !dbg !47
  %203 = getelementptr float, ptr addrspace(3) %202, i32 %199, !dbg !47
  %204 = bitcast float %166 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %203, <1 x i32> %204, i1 true) #4, !dbg !47
  %205 = or disjoint i32 %187, 96, !dbg !47
  %206 = lshr i32 %205, 3, !dbg !47
  %207 = and i32 %206, 124, !dbg !47
  %208 = getelementptr float, ptr addrspace(3) @global_smem, i32 %207, !dbg !47
  %209 = getelementptr float, ptr addrspace(3) %208, i32 %205, !dbg !47
  %210 = bitcast float %168 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %209, <1 x i32> %210, i1 true) #4, !dbg !47
  %211 = or disjoint i32 %187, 16, !dbg !47
  %212 = getelementptr float, ptr addrspace(3) %190, i32 %211, !dbg !47
  %213 = bitcast float %170 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %212, <1 x i32> %213, i1 true) #4, !dbg !47
  %214 = or disjoint i32 %187, 48, !dbg !47
  %215 = lshr i32 %214, 3, !dbg !47
  %216 = and i32 %215, 116, !dbg !47
  %217 = getelementptr float, ptr addrspace(3) @global_smem, i32 %216, !dbg !47
  %218 = getelementptr float, ptr addrspace(3) %217, i32 %214, !dbg !47
  %219 = bitcast float %172 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %218, <1 x i32> %219, i1 true) #4, !dbg !47
  %220 = or disjoint i32 %187, 80, !dbg !47
  %221 = lshr i32 %220, 3, !dbg !47
  %222 = and i32 %221, 120, !dbg !47
  %223 = getelementptr float, ptr addrspace(3) @global_smem, i32 %222, !dbg !47
  %224 = getelementptr float, ptr addrspace(3) %223, i32 %220, !dbg !47
  %225 = bitcast float %174 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %224, <1 x i32> %225, i1 true) #4, !dbg !47
  %226 = or disjoint i32 %187, 112, !dbg !47
  %227 = lshr i32 %226, 3, !dbg !47
  %228 = and i32 %227, 124, !dbg !47
  %229 = getelementptr float, ptr addrspace(3) @global_smem, i32 %228, !dbg !47
  %230 = getelementptr float, ptr addrspace(3) %229, i32 %226, !dbg !47
  %231 = bitcast float %176 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %230, <1 x i32> %231, i1 true) #4, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %232 = lshr i32 %15, 3, !dbg !47
  %233 = and i32 %232, 60, !dbg !47
  %234 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %233, !dbg !47
  %235 = getelementptr inbounds float, ptr addrspace(3) %234, i32 %188, !dbg !47
  %236 = or disjoint i32 %188, 512, !dbg !47
  %237 = lshr i32 %236, 3, !dbg !47
  %238 = and i32 %237, 124, !dbg !47
  %239 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %238, !dbg !47
  %240 = getelementptr inbounds float, ptr addrspace(3) %239, i32 %236, !dbg !47
  %241 = load <4 x i32>, ptr addrspace(3) %240, align 16, !dbg !47
  %.extract = load i32, ptr addrspace(3) %235, align 16, !dbg !47
  %242 = getelementptr inbounds i8, ptr addrspace(3) %235, i32 4, !dbg !47
  %.extract8 = load i32, ptr addrspace(3) %242, align 4, !dbg !47
  %243 = getelementptr inbounds i8, ptr addrspace(3) %235, i32 8, !dbg !47
  %.extract9 = load i32, ptr addrspace(3) %243, align 8, !dbg !47
  %244 = getelementptr inbounds i8, ptr addrspace(3) %235, i32 12, !dbg !47
  %.extract10 = load i32, ptr addrspace(3) %244, align 4, !dbg !47
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %182, i1 %106) #4, !dbg !47
  %.extract11 = extractelement <4 x i32> %241, i64 0, !dbg !47
  %.extract12 = extractelement <4 x i32> %241, i64 1, !dbg !47
  %.extract13 = extractelement <4 x i32> %241, i64 2, !dbg !47
  %.extract14 = extractelement <4 x i32> %241, i64 3, !dbg !47
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %184, i1 %104) #4, !dbg !47
  ret void, !dbg !48
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cditdychlgkxf57ciezr2bhl6djeohkzduwntwibwfcnjlk6q3hy.py", directory: "inductor_cache/di")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_leaky_relu_10, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_leaky_relu_10, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_leaky_relu_10", linkageName: "triton_poi_fused__native_batch_norm_legit_leaky_relu_10", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 23, scope: !7)
!17 = !DILocation(line: 27, column: 21, scope: !7)
!18 = !DILocation(line: 30, column: 34, scope: !7)
!19 = !DILocation(line: 30, column: 53, scope: !7)
!20 = !DILocation(line: 30, column: 47, scope: !7)
!21 = !DILocation(line: 30, column: 67, scope: !7)
!22 = !DILocation(line: 30, column: 39, scope: !7)
!23 = !DILocation(line: 30, column: 62, scope: !7)
!24 = !DILocation(line: 30, column: 30, scope: !7)
!25 = !DILocation(line: 30, column: 75, scope: !7)
!26 = !DILocation(line: 31, column: 30, scope: !7)
!27 = !DILocation(line: 31, column: 35, scope: !7)
!28 = !DILocation(line: 32, column: 30, scope: !7)
!29 = !DILocation(line: 32, column: 35, scope: !7)
!30 = !DILocation(line: 33, column: 31, scope: !7)
!31 = !DILocation(line: 33, column: 36, scope: !7)
!32 = !DILocation(line: 34, column: 32, scope: !7)
!33 = !DILocation(line: 34, column: 44, scope: !7)
!34 = !DILocation(line: 37, column: 18, scope: !7)
!35 = !DILocation(line: 39, column: 18, scope: !7)
!36 = !DILocation(line: 40, column: 27, scope: !7)
!37 = !DILocation(line: 35, column: 18, scope: !7)
!38 = !DILocation(line: 41, column: 18, scope: !7)
!39 = !DILocation(line: 42, column: 19, scope: !7)
!40 = !DILocation(line: 43, column: 20, scope: !7)
!41 = !DILocation(line: 45, column: 20, scope: !7)
!42 = !DILocation(line: 48, column: 35, scope: !7)
!43 = !DILocation(line: 47, column: 20, scope: !7)
!44 = !DILocation(line: 49, column: 35, scope: !7)
!45 = !DILocation(line: 49, column: 30, scope: !7)
!46 = !DILocation(line: 49, column: 25, scope: !7)
!47 = !DILocation(line: 49, column: 47, scope: !7)
!48 = !DILocation(line: 49, column: 4, scope: !7)
