; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_pixel_shuffle_16(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %10 = shl i32 %9, 9, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 4, !dbg !12
  %14 = and i32 %12, 508, !dbg !12
  %15 = lshr i32 %11, 1, !dbg !12
  %16 = and i32 %15, 127, !dbg !12
  %17 = or disjoint i32 %10, %14, !dbg !13
  %18 = or disjoint i32 %10, %16, !dbg !13
  %19 = or disjoint i32 %18, 128, !dbg !13
  %20 = or disjoint i32 %18, 256, !dbg !13
  %21 = or disjoint i32 %18, 384, !dbg !13
  %22 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %23 = shl i32 %22, 3, !dbg !15
  %24 = lshr i32 %11, 7, !dbg !16
  %.lobit = and i32 %24, 1, !dbg !16
  %25 = or disjoint i32 %23, %.lobit, !dbg !17
  %26 = or disjoint i32 %25, 2, !dbg !17
  %27 = or disjoint i32 %25, 4, !dbg !17
  %28 = or disjoint i32 %25, 6, !dbg !17
  %29 = or disjoint i32 %23, %13, !dbg !17
  %30 = icmp slt i32 %25, 8, !dbg !18
  %31 = icmp slt i32 %26, 8, !dbg !18
  %32 = icmp slt i32 %27, 8, !dbg !18
  %33 = icmp slt i32 %28, 8, !dbg !18
  %34 = icmp slt i32 %29, 8, !dbg !18
  %35 = srem i32 %17, 8, !dbg !19
  %36 = sdiv i32 %18, 8, !dbg !20
  %37 = sdiv i32 %19, 8, !dbg !20
  %38 = sdiv i32 %20, 8, !dbg !20
  %39 = sdiv i32 %21, 8, !dbg !20
  %40 = srem i32 %36, 8, !dbg !21
  %41 = srem i32 %37, 8, !dbg !21
  %42 = srem i32 %38, 8, !dbg !21
  %43 = srem i32 %39, 8, !dbg !21
  %44 = sdiv i32 %17, 512, !dbg !22
  %45 = sdiv i32 %18, 512, !dbg !22
  %46 = sdiv i32 %19, 512, !dbg !22
  %47 = sdiv i32 %20, 512, !dbg !22
  %48 = sdiv i32 %21, 512, !dbg !22
  %49 = srem i32 %45, 4, !dbg !23
  %50 = srem i32 %46, 4, !dbg !23
  %51 = srem i32 %47, 4, !dbg !23
  %52 = srem i32 %48, 4, !dbg !23
  %53 = shl i32 %25, 6, !dbg !24
  %54 = shl i32 %26, 6, !dbg !24
  %55 = shl i32 %27, 6, !dbg !24
  %56 = shl i32 %28, 6, !dbg !24
  %57 = shl i32 %44, 12, !dbg !25
  %58 = insertelement <2 x i32> poison, i32 %17, i64 0, !dbg !20
  %59 = shufflevector <2 x i32> %58, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !20
  %60 = sdiv <2 x i32> %59, <i32 8, i32 64>, !dbg !20
  %61 = srem <2 x i32> %60, splat (i32 8), !dbg !21
  %62 = shl nsw <2 x i32> %61, <i32 9, i32 3>, !dbg !26
  %63 = insertelement <2 x i32> poison, i32 %57, i64 0, !dbg !27
  %64 = insertelement <2 x i32> %63, i32 %35, i64 1, !dbg !27
  %65 = add <2 x i32> %62, %64, !dbg !27
  %66 = extractelement <2 x i32> %65, i64 0, !dbg !28
  %67 = add i32 %66, %53, !dbg !28
  %68 = extractelement <2 x i32> %65, i64 1, !dbg !29
  %69 = add i32 %67, %68, !dbg !29
  %70 = add i32 %66, %54, !dbg !28
  %71 = add i32 %70, %68, !dbg !29
  %72 = add i32 %66, %55, !dbg !28
  %73 = add i32 %72, %68, !dbg !29
  %74 = add i32 %66, %56, !dbg !28
  %75 = add i32 %74, %68, !dbg !29
  %76 = sext i32 %69 to i64, !dbg !30
  %77 = getelementptr float, ptr addrspace(1) %0, i64 %76, !dbg !30
  %78 = sext i32 %71 to i64, !dbg !30
  %79 = getelementptr float, ptr addrspace(1) %0, i64 %78, !dbg !30
  %80 = sext i32 %73 to i64, !dbg !30
  %81 = getelementptr float, ptr addrspace(1) %0, i64 %80, !dbg !30
  %82 = sext i32 %75 to i64, !dbg !30
  %83 = getelementptr float, ptr addrspace(1) %0, i64 %82, !dbg !30
  %84 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %77, i1 %30) #4, !dbg !31
  %85 = extractvalue { i32, i32, i32, i32 } %84, 0, !dbg !31
  %86 = extractvalue { i32, i32, i32, i32 } %84, 1, !dbg !31
  %87 = extractvalue { i32, i32, i32, i32 } %84, 2, !dbg !31
  %88 = extractvalue { i32, i32, i32, i32 } %84, 3, !dbg !31
  %89 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %79, i1 %31) #4, !dbg !31
  %90 = extractvalue { i32, i32, i32, i32 } %89, 0, !dbg !31
  %91 = extractvalue { i32, i32, i32, i32 } %89, 1, !dbg !31
  %92 = extractvalue { i32, i32, i32, i32 } %89, 2, !dbg !31
  %93 = extractvalue { i32, i32, i32, i32 } %89, 3, !dbg !31
  %94 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %81, i1 %32) #4, !dbg !31
  %95 = extractvalue { i32, i32, i32, i32 } %94, 0, !dbg !31
  %96 = extractvalue { i32, i32, i32, i32 } %94, 1, !dbg !31
  %97 = extractvalue { i32, i32, i32, i32 } %94, 2, !dbg !31
  %98 = extractvalue { i32, i32, i32, i32 } %94, 3, !dbg !31
  %99 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %83, i1 %33) #4, !dbg !31
  %100 = extractvalue { i32, i32, i32, i32 } %99, 0, !dbg !31
  %101 = extractvalue { i32, i32, i32, i32 } %99, 1, !dbg !31
  %102 = extractvalue { i32, i32, i32, i32 } %99, 2, !dbg !31
  %103 = extractvalue { i32, i32, i32, i32 } %99, 3, !dbg !31
  %104 = shl i32 %11, 5, !dbg !31
  %105 = and i32 %104, 4064, !dbg !31
  %106 = or disjoint i32 %105, %.lobit, !dbg !31
  %107 = and i32 %12, 1020, !dbg !31
  %108 = lshr exact i32 %105, 1, !dbg !31
  %109 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %108, !dbg !31
  %110 = getelementptr float, ptr addrspace(3) %109, i32 %106, !dbg !31
  %111 = insertelement <1 x i32> poison, i32 %85, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %110, <1 x i32> %111, i1 true) #4, !dbg !31
  %112 = or disjoint i32 %106, 8, !dbg !31
  %113 = lshr i32 %112, 3, !dbg !31
  %114 = getelementptr float, ptr addrspace(3) @global_smem, i32 %113, !dbg !31
  %115 = getelementptr float, ptr addrspace(3) %114, i32 %112, !dbg !31
  %116 = insertelement <1 x i32> poison, i32 %86, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %115, <1 x i32> %116, i1 true) #4, !dbg !31
  %117 = or disjoint i32 %106, 16, !dbg !31
  %118 = lshr i32 %117, 3, !dbg !31
  %119 = getelementptr float, ptr addrspace(3) @global_smem, i32 %118, !dbg !31
  %120 = getelementptr float, ptr addrspace(3) %119, i32 %117, !dbg !31
  %121 = insertelement <1 x i32> poison, i32 %87, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %120, <1 x i32> %121, i1 true) #4, !dbg !31
  %122 = or disjoint i32 %106, 24, !dbg !31
  %123 = lshr i32 %122, 3, !dbg !31
  %124 = getelementptr float, ptr addrspace(3) @global_smem, i32 %123, !dbg !31
  %125 = getelementptr float, ptr addrspace(3) %124, i32 %122, !dbg !31
  %126 = insertelement <1 x i32> poison, i32 %88, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %125, <1 x i32> %126, i1 true) #4, !dbg !31
  %127 = or disjoint i32 %106, 2, !dbg !31
  %128 = getelementptr float, ptr addrspace(3) %109, i32 %127, !dbg !31
  %129 = insertelement <1 x i32> poison, i32 %90, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %128, <1 x i32> %129, i1 true) #4, !dbg !31
  %130 = or disjoint i32 %106, 10, !dbg !31
  %131 = lshr i32 %130, 3, !dbg !31
  %132 = getelementptr float, ptr addrspace(3) @global_smem, i32 %131, !dbg !31
  %133 = getelementptr float, ptr addrspace(3) %132, i32 %130, !dbg !31
  %134 = insertelement <1 x i32> poison, i32 %91, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %133, <1 x i32> %134, i1 true) #4, !dbg !31
  %135 = or disjoint i32 %106, 18, !dbg !31
  %136 = lshr i32 %135, 3, !dbg !31
  %137 = getelementptr float, ptr addrspace(3) @global_smem, i32 %136, !dbg !31
  %138 = getelementptr float, ptr addrspace(3) %137, i32 %135, !dbg !31
  %139 = insertelement <1 x i32> poison, i32 %92, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %138, <1 x i32> %139, i1 true) #4, !dbg !31
  %140 = or disjoint i32 %106, 26, !dbg !31
  %141 = lshr i32 %140, 3, !dbg !31
  %142 = getelementptr float, ptr addrspace(3) @global_smem, i32 %141, !dbg !31
  %143 = getelementptr float, ptr addrspace(3) %142, i32 %140, !dbg !31
  %144 = insertelement <1 x i32> poison, i32 %93, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %143, <1 x i32> %144, i1 true) #4, !dbg !31
  %145 = or disjoint i32 %106, 4, !dbg !31
  %146 = getelementptr float, ptr addrspace(3) %109, i32 %145, !dbg !31
  %147 = insertelement <1 x i32> poison, i32 %95, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %146, <1 x i32> %147, i1 true) #4, !dbg !31
  %148 = or disjoint i32 %106, 12, !dbg !31
  %149 = lshr i32 %148, 3, !dbg !31
  %150 = getelementptr float, ptr addrspace(3) @global_smem, i32 %149, !dbg !31
  %151 = getelementptr float, ptr addrspace(3) %150, i32 %148, !dbg !31
  %152 = insertelement <1 x i32> poison, i32 %96, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %151, <1 x i32> %152, i1 true) #4, !dbg !31
  %153 = or disjoint i32 %106, 20, !dbg !31
  %154 = lshr i32 %153, 3, !dbg !31
  %155 = getelementptr float, ptr addrspace(3) @global_smem, i32 %154, !dbg !31
  %156 = getelementptr float, ptr addrspace(3) %155, i32 %153, !dbg !31
  %157 = insertelement <1 x i32> poison, i32 %97, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %156, <1 x i32> %157, i1 true) #4, !dbg !31
  %158 = or disjoint i32 %106, 28, !dbg !31
  %159 = lshr i32 %158, 3, !dbg !31
  %160 = getelementptr float, ptr addrspace(3) @global_smem, i32 %159, !dbg !31
  %161 = getelementptr float, ptr addrspace(3) %160, i32 %158, !dbg !31
  %162 = insertelement <1 x i32> poison, i32 %98, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %161, <1 x i32> %162, i1 true) #4, !dbg !31
  %163 = or disjoint i32 %106, 6, !dbg !31
  %164 = getelementptr float, ptr addrspace(3) %109, i32 %163, !dbg !31
  %165 = insertelement <1 x i32> poison, i32 %100, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %164, <1 x i32> %165, i1 true) #4, !dbg !31
  %166 = or disjoint i32 %106, 14, !dbg !31
  %167 = lshr i32 %166, 3, !dbg !31
  %168 = getelementptr float, ptr addrspace(3) @global_smem, i32 %167, !dbg !31
  %169 = getelementptr float, ptr addrspace(3) %168, i32 %166, !dbg !31
  %170 = insertelement <1 x i32> poison, i32 %101, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %169, <1 x i32> %170, i1 true) #4, !dbg !31
  %171 = or disjoint i32 %106, 22, !dbg !31
  %172 = lshr i32 %171, 3, !dbg !31
  %173 = getelementptr float, ptr addrspace(3) @global_smem, i32 %172, !dbg !31
  %174 = getelementptr float, ptr addrspace(3) %173, i32 %171, !dbg !31
  %175 = insertelement <1 x i32> poison, i32 %102, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %174, <1 x i32> %175, i1 true) #4, !dbg !31
  %176 = or disjoint i32 %106, 30, !dbg !31
  %177 = lshr i32 %176, 3, !dbg !31
  %178 = getelementptr float, ptr addrspace(3) @global_smem, i32 %177, !dbg !31
  %179 = getelementptr float, ptr addrspace(3) %178, i32 %176, !dbg !31
  %180 = insertelement <1 x i32> poison, i32 %103, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %179, <1 x i32> %180, i1 true) #4, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %181 = lshr i32 %107, 3, !dbg !31
  %182 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %181, !dbg !31
  %183 = getelementptr inbounds float, ptr addrspace(3) %182, i32 %107, !dbg !31
  %184 = load <4 x float>, ptr addrspace(3) %183, align 4, !dbg !31
  %185 = or disjoint i32 %107, 1024, !dbg !31
  %186 = lshr i32 %185, 3, !dbg !31
  %187 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %186, !dbg !31
  %188 = getelementptr inbounds float, ptr addrspace(3) %187, i32 %185, !dbg !31
  %189 = load float, ptr addrspace(3) %188, align 4, !dbg !31
  %190 = or disjoint i32 %107, 1025, !dbg !31
  %191 = lshr i32 %190, 3, !dbg !31
  %192 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %191, !dbg !31
  %193 = getelementptr inbounds float, ptr addrspace(3) %192, i32 %190, !dbg !31
  %194 = load float, ptr addrspace(3) %193, align 4, !dbg !31
  %195 = or disjoint i32 %107, 1026, !dbg !31
  %196 = lshr i32 %195, 3, !dbg !31
  %197 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %196, !dbg !31
  %198 = getelementptr inbounds float, ptr addrspace(3) %197, i32 %195, !dbg !31
  %199 = load float, ptr addrspace(3) %198, align 4, !dbg !31
  %200 = or disjoint i32 %107, 1027, !dbg !31
  %201 = lshr i32 %200, 3, !dbg !31
  %202 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %201, !dbg !31
  %203 = getelementptr inbounds float, ptr addrspace(3) %202, i32 %200, !dbg !31
  %204 = load float, ptr addrspace(3) %203, align 4, !dbg !31
  %205 = or disjoint i32 %107, 2048, !dbg !31
  %206 = lshr i32 %205, 3, !dbg !31
  %207 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %206, !dbg !31
  %208 = getelementptr inbounds float, ptr addrspace(3) %207, i32 %205, !dbg !31
  %209 = load float, ptr addrspace(3) %208, align 4, !dbg !31
  %210 = or disjoint i32 %107, 2049, !dbg !31
  %211 = lshr i32 %210, 3, !dbg !31
  %212 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %211, !dbg !31
  %213 = getelementptr inbounds float, ptr addrspace(3) %212, i32 %210, !dbg !31
  %214 = load float, ptr addrspace(3) %213, align 4, !dbg !31
  %215 = or disjoint i32 %107, 2050, !dbg !31
  %216 = lshr i32 %215, 3, !dbg !31
  %217 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %216, !dbg !31
  %218 = getelementptr inbounds float, ptr addrspace(3) %217, i32 %215, !dbg !31
  %219 = load float, ptr addrspace(3) %218, align 4, !dbg !31
  %220 = or disjoint i32 %107, 2051, !dbg !31
  %221 = lshr i32 %220, 3, !dbg !31
  %222 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %221, !dbg !31
  %223 = getelementptr inbounds float, ptr addrspace(3) %222, i32 %220, !dbg !31
  %224 = load float, ptr addrspace(3) %223, align 4, !dbg !31
  %225 = or disjoint i32 %107, 3072, !dbg !31
  %226 = lshr i32 %225, 3, !dbg !31
  %227 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %226, !dbg !31
  %228 = getelementptr inbounds float, ptr addrspace(3) %227, i32 %225, !dbg !31
  %229 = load float, ptr addrspace(3) %228, align 4, !dbg !31
  %230 = or disjoint i32 %107, 3073, !dbg !31
  %231 = lshr i32 %230, 3, !dbg !31
  %232 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %231, !dbg !31
  %233 = getelementptr inbounds float, ptr addrspace(3) %232, i32 %230, !dbg !31
  %234 = load float, ptr addrspace(3) %233, align 4, !dbg !31
  %235 = or disjoint i32 %107, 3074, !dbg !31
  %236 = lshr i32 %235, 3, !dbg !31
  %237 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %236, !dbg !31
  %238 = getelementptr inbounds float, ptr addrspace(3) %237, i32 %235, !dbg !31
  %239 = load float, ptr addrspace(3) %238, align 4, !dbg !31
  %240 = or disjoint i32 %107, 3075, !dbg !31
  %241 = lshr i32 %240, 3, !dbg !31
  %242 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %241, !dbg !31
  %243 = getelementptr inbounds float, ptr addrspace(3) %242, i32 %240, !dbg !31
  %244 = load float, ptr addrspace(3) %243, align 4, !dbg !31
  %245 = shl nsw i32 %40, 3, !dbg !32
  %246 = shl nsw i32 %41, 3, !dbg !32
  %247 = shl nsw i32 %42, 3, !dbg !32
  %248 = shl nsw i32 %43, 3, !dbg !32
  %249 = add i32 %245, %29, !dbg !33
  %250 = shl nsw i32 %49, 6, !dbg !34
  %251 = shl nsw i32 %50, 6, !dbg !34
  %252 = shl nsw i32 %51, 6, !dbg !34
  %253 = shl nsw i32 %52, 6, !dbg !34
  %254 = add i32 %249, %250, !dbg !35
  %255 = add nsw i32 %251, %246, !dbg !33
  %256 = add i32 %255, %29, !dbg !35
  %257 = add nsw i32 %252, %247, !dbg !33
  %258 = add i32 %257, %29, !dbg !35
  %259 = add nsw i32 %253, %248, !dbg !33
  %260 = add i32 %259, %29, !dbg !35
  %261 = sext i32 %254 to i64, !dbg !36
  %262 = getelementptr float, ptr addrspace(1) %1, i64 %261, !dbg !36
  %263 = sext i32 %256 to i64, !dbg !36
  %264 = getelementptr float, ptr addrspace(1) %1, i64 %263, !dbg !36
  %265 = sext i32 %258 to i64, !dbg !36
  %266 = getelementptr float, ptr addrspace(1) %1, i64 %265, !dbg !36
  %267 = sext i32 %260 to i64, !dbg !36
  %268 = getelementptr float, ptr addrspace(1) %1, i64 %267, !dbg !36
  %269 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %262, i1 %34) #4, !dbg !37
  %270 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %264, i1 %34) #4, !dbg !37
  %271 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %266, i1 %34) #4, !dbg !37
  %272 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %268, i1 %34) #4, !dbg !37
  %273 = getelementptr float, ptr addrspace(1) %2, i64 %261, !dbg !38
  %274 = getelementptr float, ptr addrspace(1) %2, i64 %263, !dbg !38
  %275 = getelementptr float, ptr addrspace(1) %2, i64 %265, !dbg !38
  %276 = getelementptr float, ptr addrspace(1) %2, i64 %267, !dbg !38
  %277 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %273, i1 %34) #4, !dbg !39
  %278 = extractvalue { i32, i32, i32, i32 } %277, 0, !dbg !39
  %279 = extractvalue { i32, i32, i32, i32 } %277, 1, !dbg !39
  %280 = extractvalue { i32, i32, i32, i32 } %277, 2, !dbg !39
  %281 = extractvalue { i32, i32, i32, i32 } %277, 3, !dbg !39
  %282 = bitcast i32 %278 to float, !dbg !39
  %283 = bitcast i32 %279 to float, !dbg !39
  %284 = bitcast i32 %280 to float, !dbg !39
  %285 = bitcast i32 %281 to float, !dbg !39
  %286 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %274, i1 %34) #4, !dbg !39
  %287 = extractvalue { i32, i32, i32, i32 } %286, 0, !dbg !39
  %288 = extractvalue { i32, i32, i32, i32 } %286, 1, !dbg !39
  %289 = extractvalue { i32, i32, i32, i32 } %286, 2, !dbg !39
  %290 = extractvalue { i32, i32, i32, i32 } %286, 3, !dbg !39
  %291 = bitcast i32 %287 to float, !dbg !39
  %292 = bitcast i32 %288 to float, !dbg !39
  %293 = bitcast i32 %289 to float, !dbg !39
  %294 = bitcast i32 %290 to float, !dbg !39
  %295 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %275, i1 %34) #4, !dbg !39
  %296 = extractvalue { i32, i32, i32, i32 } %295, 0, !dbg !39
  %297 = extractvalue { i32, i32, i32, i32 } %295, 1, !dbg !39
  %298 = extractvalue { i32, i32, i32, i32 } %295, 2, !dbg !39
  %299 = extractvalue { i32, i32, i32, i32 } %295, 3, !dbg !39
  %300 = bitcast i32 %296 to float, !dbg !39
  %301 = bitcast i32 %297 to float, !dbg !39
  %302 = bitcast i32 %298 to float, !dbg !39
  %303 = bitcast i32 %299 to float, !dbg !39
  %304 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %276, i1 %34) #4, !dbg !39
  %305 = extractvalue { i32, i32, i32, i32 } %304, 0, !dbg !39
  %306 = extractvalue { i32, i32, i32, i32 } %304, 1, !dbg !39
  %307 = extractvalue { i32, i32, i32, i32 } %304, 2, !dbg !39
  %308 = extractvalue { i32, i32, i32, i32 } %304, 3, !dbg !39
  %309 = bitcast i32 %305 to float, !dbg !39
  %310 = bitcast i32 %306 to float, !dbg !39
  %311 = bitcast i32 %307 to float, !dbg !39
  %312 = bitcast i32 %308 to float, !dbg !39
  %313 = getelementptr float, ptr addrspace(1) %3, i64 %261, !dbg !40
  %314 = getelementptr float, ptr addrspace(1) %3, i64 %263, !dbg !40
  %315 = getelementptr float, ptr addrspace(1) %3, i64 %265, !dbg !40
  %316 = getelementptr float, ptr addrspace(1) %3, i64 %267, !dbg !40
  %317 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %313, i1 %34) #4, !dbg !41
  %318 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %314, i1 %34) #4, !dbg !41
  %319 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %315, i1 %34) #4, !dbg !41
  %320 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %316, i1 %34) #4, !dbg !41
  %321 = getelementptr float, ptr addrspace(1) %4, i64 %261, !dbg !42
  %322 = getelementptr float, ptr addrspace(1) %4, i64 %263, !dbg !42
  %323 = getelementptr float, ptr addrspace(1) %4, i64 %265, !dbg !42
  %324 = getelementptr float, ptr addrspace(1) %4, i64 %267, !dbg !42
  %325 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %321, i1 %34) #4, !dbg !43
  %326 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %322, i1 %34) #4, !dbg !43
  %327 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %323, i1 %34) #4, !dbg !43
  %328 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %324, i1 %34) #4, !dbg !43
  %329 = fadd float %282, 0x3EE4F8B580000000, !dbg !44
  %330 = fadd float %283, 0x3EE4F8B580000000, !dbg !44
  %331 = fadd float %284, 0x3EE4F8B580000000, !dbg !44
  %332 = fadd float %285, 0x3EE4F8B580000000, !dbg !44
  %333 = fadd float %291, 0x3EE4F8B580000000, !dbg !44
  %334 = fadd float %292, 0x3EE4F8B580000000, !dbg !44
  %335 = fadd float %293, 0x3EE4F8B580000000, !dbg !44
  %336 = fadd float %294, 0x3EE4F8B580000000, !dbg !44
  %337 = fadd float %300, 0x3EE4F8B580000000, !dbg !44
  %338 = fadd float %301, 0x3EE4F8B580000000, !dbg !44
  %339 = fadd float %302, 0x3EE4F8B580000000, !dbg !44
  %340 = fadd float %303, 0x3EE4F8B580000000, !dbg !44
  %341 = fadd float %309, 0x3EE4F8B580000000, !dbg !44
  %342 = fadd float %310, 0x3EE4F8B580000000, !dbg !44
  %343 = fadd float %311, 0x3EE4F8B580000000, !dbg !44
  %344 = fadd float %312, 0x3EE4F8B580000000, !dbg !44
  %345 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not.i = icmp eq i32 %345, 0, !dbg !45
  %346 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !45
  %.not1.i = icmp eq i32 %346, 0, !dbg !45
  br i1 %.not.i, label %352, label %347, !dbg !45

347:                                              ; preds = %8
  br i1 %.not1.i, label %350, label %348, !dbg !45

348:                                              ; preds = %347
  %349 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %329) #4, !dbg !45
  br label %__nv_sqrtf.exit, !dbg !45

350:                                              ; preds = %347
  %351 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %329) #4, !dbg !45
  br label %__nv_sqrtf.exit, !dbg !45

352:                                              ; preds = %8
  br i1 %.not1.i, label %355, label %353, !dbg !45

353:                                              ; preds = %352
  %354 = tail call float @llvm.nvvm.sqrt.rn.f(float %329) #4, !dbg !45
  br label %__nv_sqrtf.exit, !dbg !45

355:                                              ; preds = %352
  %356 = tail call float @llvm.nvvm.sqrt.approx.f(float %329) #4, !dbg !45
  br label %__nv_sqrtf.exit, !dbg !45

__nv_sqrtf.exit:                                  ; preds = %348, %350, %353, %355
  %.0.i = phi float [ %349, %348 ], [ %351, %350 ], [ %354, %353 ], [ %356, %355 ], !dbg !45
  %357 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not.i3 = icmp eq i32 %357, 0, !dbg !45
  %358 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !45
  %.not1.i6 = icmp eq i32 %358, 0, !dbg !45
  br i1 %.not.i3, label %364, label %359, !dbg !45

359:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i6, label %362, label %360, !dbg !45

360:                                              ; preds = %359
  %361 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %330) #4, !dbg !45
  br label %__nv_sqrtf.exit7, !dbg !45

362:                                              ; preds = %359
  %363 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %330) #4, !dbg !45
  br label %__nv_sqrtf.exit7, !dbg !45

364:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i6, label %367, label %365, !dbg !45

365:                                              ; preds = %364
  %366 = tail call float @llvm.nvvm.sqrt.rn.f(float %330) #4, !dbg !45
  br label %__nv_sqrtf.exit7, !dbg !45

367:                                              ; preds = %364
  %368 = tail call float @llvm.nvvm.sqrt.approx.f(float %330) #4, !dbg !45
  br label %__nv_sqrtf.exit7, !dbg !45

__nv_sqrtf.exit7:                                 ; preds = %360, %362, %365, %367
  %.0.i5 = phi float [ %361, %360 ], [ %363, %362 ], [ %366, %365 ], [ %368, %367 ], !dbg !45
  %369 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not.i8 = icmp eq i32 %369, 0, !dbg !45
  %370 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !45
  %.not1.i11 = icmp eq i32 %370, 0, !dbg !45
  br i1 %.not.i8, label %376, label %371, !dbg !45

371:                                              ; preds = %__nv_sqrtf.exit7
  br i1 %.not1.i11, label %374, label %372, !dbg !45

372:                                              ; preds = %371
  %373 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %331) #4, !dbg !45
  br label %__nv_sqrtf.exit12, !dbg !45

374:                                              ; preds = %371
  %375 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %331) #4, !dbg !45
  br label %__nv_sqrtf.exit12, !dbg !45

376:                                              ; preds = %__nv_sqrtf.exit7
  br i1 %.not1.i11, label %379, label %377, !dbg !45

377:                                              ; preds = %376
  %378 = tail call float @llvm.nvvm.sqrt.rn.f(float %331) #4, !dbg !45
  br label %__nv_sqrtf.exit12, !dbg !45

379:                                              ; preds = %376
  %380 = tail call float @llvm.nvvm.sqrt.approx.f(float %331) #4, !dbg !45
  br label %__nv_sqrtf.exit12, !dbg !45

__nv_sqrtf.exit12:                                ; preds = %372, %374, %377, %379
  %.0.i10 = phi float [ %373, %372 ], [ %375, %374 ], [ %378, %377 ], [ %380, %379 ], !dbg !45
  %381 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not.i13 = icmp eq i32 %381, 0, !dbg !45
  %382 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !45
  %.not1.i16 = icmp eq i32 %382, 0, !dbg !45
  br i1 %.not.i13, label %388, label %383, !dbg !45

383:                                              ; preds = %__nv_sqrtf.exit12
  br i1 %.not1.i16, label %386, label %384, !dbg !45

384:                                              ; preds = %383
  %385 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %332) #4, !dbg !45
  br label %__nv_sqrtf.exit17, !dbg !45

386:                                              ; preds = %383
  %387 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %332) #4, !dbg !45
  br label %__nv_sqrtf.exit17, !dbg !45

388:                                              ; preds = %__nv_sqrtf.exit12
  br i1 %.not1.i16, label %391, label %389, !dbg !45

389:                                              ; preds = %388
  %390 = tail call float @llvm.nvvm.sqrt.rn.f(float %332) #4, !dbg !45
  br label %__nv_sqrtf.exit17, !dbg !45

391:                                              ; preds = %388
  %392 = tail call float @llvm.nvvm.sqrt.approx.f(float %332) #4, !dbg !45
  br label %__nv_sqrtf.exit17, !dbg !45

__nv_sqrtf.exit17:                                ; preds = %384, %386, %389, %391
  %.0.i15 = phi float [ %385, %384 ], [ %387, %386 ], [ %390, %389 ], [ %392, %391 ], !dbg !45
  %393 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not.i18 = icmp eq i32 %393, 0, !dbg !45
  %394 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !45
  %.not1.i21 = icmp eq i32 %394, 0, !dbg !45
  br i1 %.not.i18, label %400, label %395, !dbg !45

395:                                              ; preds = %__nv_sqrtf.exit17
  br i1 %.not1.i21, label %398, label %396, !dbg !45

396:                                              ; preds = %395
  %397 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %333) #4, !dbg !45
  br label %__nv_sqrtf.exit22, !dbg !45

398:                                              ; preds = %395
  %399 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %333) #4, !dbg !45
  br label %__nv_sqrtf.exit22, !dbg !45

400:                                              ; preds = %__nv_sqrtf.exit17
  br i1 %.not1.i21, label %403, label %401, !dbg !45

401:                                              ; preds = %400
  %402 = tail call float @llvm.nvvm.sqrt.rn.f(float %333) #4, !dbg !45
  br label %__nv_sqrtf.exit22, !dbg !45

403:                                              ; preds = %400
  %404 = tail call float @llvm.nvvm.sqrt.approx.f(float %333) #4, !dbg !45
  br label %__nv_sqrtf.exit22, !dbg !45

__nv_sqrtf.exit22:                                ; preds = %396, %398, %401, %403
  %.0.i20 = phi float [ %397, %396 ], [ %399, %398 ], [ %402, %401 ], [ %404, %403 ], !dbg !45
  %405 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not.i23 = icmp eq i32 %405, 0, !dbg !45
  %406 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !45
  %.not1.i26 = icmp eq i32 %406, 0, !dbg !45
  br i1 %.not.i23, label %412, label %407, !dbg !45

407:                                              ; preds = %__nv_sqrtf.exit22
  br i1 %.not1.i26, label %410, label %408, !dbg !45

408:                                              ; preds = %407
  %409 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %334) #4, !dbg !45
  br label %__nv_sqrtf.exit27, !dbg !45

410:                                              ; preds = %407
  %411 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %334) #4, !dbg !45
  br label %__nv_sqrtf.exit27, !dbg !45

412:                                              ; preds = %__nv_sqrtf.exit22
  br i1 %.not1.i26, label %415, label %413, !dbg !45

413:                                              ; preds = %412
  %414 = tail call float @llvm.nvvm.sqrt.rn.f(float %334) #4, !dbg !45
  br label %__nv_sqrtf.exit27, !dbg !45

415:                                              ; preds = %412
  %416 = tail call float @llvm.nvvm.sqrt.approx.f(float %334) #4, !dbg !45
  br label %__nv_sqrtf.exit27, !dbg !45

__nv_sqrtf.exit27:                                ; preds = %408, %410, %413, %415
  %.0.i25 = phi float [ %409, %408 ], [ %411, %410 ], [ %414, %413 ], [ %416, %415 ], !dbg !45
  %417 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not.i28 = icmp eq i32 %417, 0, !dbg !45
  %418 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !45
  %.not1.i31 = icmp eq i32 %418, 0, !dbg !45
  br i1 %.not.i28, label %424, label %419, !dbg !45

419:                                              ; preds = %__nv_sqrtf.exit27
  br i1 %.not1.i31, label %422, label %420, !dbg !45

420:                                              ; preds = %419
  %421 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %335) #4, !dbg !45
  br label %__nv_sqrtf.exit32, !dbg !45

422:                                              ; preds = %419
  %423 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %335) #4, !dbg !45
  br label %__nv_sqrtf.exit32, !dbg !45

424:                                              ; preds = %__nv_sqrtf.exit27
  br i1 %.not1.i31, label %427, label %425, !dbg !45

425:                                              ; preds = %424
  %426 = tail call float @llvm.nvvm.sqrt.rn.f(float %335) #4, !dbg !45
  br label %__nv_sqrtf.exit32, !dbg !45

427:                                              ; preds = %424
  %428 = tail call float @llvm.nvvm.sqrt.approx.f(float %335) #4, !dbg !45
  br label %__nv_sqrtf.exit32, !dbg !45

__nv_sqrtf.exit32:                                ; preds = %420, %422, %425, %427
  %.0.i30 = phi float [ %421, %420 ], [ %423, %422 ], [ %426, %425 ], [ %428, %427 ], !dbg !45
  %429 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not.i33 = icmp eq i32 %429, 0, !dbg !45
  %430 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !45
  %.not1.i36 = icmp eq i32 %430, 0, !dbg !45
  br i1 %.not.i33, label %436, label %431, !dbg !45

431:                                              ; preds = %__nv_sqrtf.exit32
  br i1 %.not1.i36, label %434, label %432, !dbg !45

432:                                              ; preds = %431
  %433 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %336) #4, !dbg !45
  br label %__nv_sqrtf.exit37, !dbg !45

434:                                              ; preds = %431
  %435 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %336) #4, !dbg !45
  br label %__nv_sqrtf.exit37, !dbg !45

436:                                              ; preds = %__nv_sqrtf.exit32
  br i1 %.not1.i36, label %439, label %437, !dbg !45

437:                                              ; preds = %436
  %438 = tail call float @llvm.nvvm.sqrt.rn.f(float %336) #4, !dbg !45
  br label %__nv_sqrtf.exit37, !dbg !45

439:                                              ; preds = %436
  %440 = tail call float @llvm.nvvm.sqrt.approx.f(float %336) #4, !dbg !45
  br label %__nv_sqrtf.exit37, !dbg !45

__nv_sqrtf.exit37:                                ; preds = %432, %434, %437, %439
  %.0.i35 = phi float [ %433, %432 ], [ %435, %434 ], [ %438, %437 ], [ %440, %439 ], !dbg !45
  %441 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not.i38 = icmp eq i32 %441, 0, !dbg !45
  %442 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !45
  %.not1.i41 = icmp eq i32 %442, 0, !dbg !45
  br i1 %.not.i38, label %448, label %443, !dbg !45

443:                                              ; preds = %__nv_sqrtf.exit37
  br i1 %.not1.i41, label %446, label %444, !dbg !45

444:                                              ; preds = %443
  %445 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %337) #4, !dbg !45
  br label %__nv_sqrtf.exit42, !dbg !45

446:                                              ; preds = %443
  %447 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %337) #4, !dbg !45
  br label %__nv_sqrtf.exit42, !dbg !45

448:                                              ; preds = %__nv_sqrtf.exit37
  br i1 %.not1.i41, label %451, label %449, !dbg !45

449:                                              ; preds = %448
  %450 = tail call float @llvm.nvvm.sqrt.rn.f(float %337) #4, !dbg !45
  br label %__nv_sqrtf.exit42, !dbg !45

451:                                              ; preds = %448
  %452 = tail call float @llvm.nvvm.sqrt.approx.f(float %337) #4, !dbg !45
  br label %__nv_sqrtf.exit42, !dbg !45

__nv_sqrtf.exit42:                                ; preds = %444, %446, %449, %451
  %.0.i40 = phi float [ %445, %444 ], [ %447, %446 ], [ %450, %449 ], [ %452, %451 ], !dbg !45
  %453 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not.i43 = icmp eq i32 %453, 0, !dbg !45
  %454 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !45
  %.not1.i46 = icmp eq i32 %454, 0, !dbg !45
  br i1 %.not.i43, label %460, label %455, !dbg !45

455:                                              ; preds = %__nv_sqrtf.exit42
  br i1 %.not1.i46, label %458, label %456, !dbg !45

456:                                              ; preds = %455
  %457 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %338) #4, !dbg !45
  br label %__nv_sqrtf.exit47, !dbg !45

458:                                              ; preds = %455
  %459 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %338) #4, !dbg !45
  br label %__nv_sqrtf.exit47, !dbg !45

460:                                              ; preds = %__nv_sqrtf.exit42
  br i1 %.not1.i46, label %463, label %461, !dbg !45

461:                                              ; preds = %460
  %462 = tail call float @llvm.nvvm.sqrt.rn.f(float %338) #4, !dbg !45
  br label %__nv_sqrtf.exit47, !dbg !45

463:                                              ; preds = %460
  %464 = tail call float @llvm.nvvm.sqrt.approx.f(float %338) #4, !dbg !45
  br label %__nv_sqrtf.exit47, !dbg !45

__nv_sqrtf.exit47:                                ; preds = %456, %458, %461, %463
  %.0.i45 = phi float [ %457, %456 ], [ %459, %458 ], [ %462, %461 ], [ %464, %463 ], !dbg !45
  %465 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not.i48 = icmp eq i32 %465, 0, !dbg !45
  %466 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !45
  %.not1.i51 = icmp eq i32 %466, 0, !dbg !45
  br i1 %.not.i48, label %472, label %467, !dbg !45

467:                                              ; preds = %__nv_sqrtf.exit47
  br i1 %.not1.i51, label %470, label %468, !dbg !45

468:                                              ; preds = %467
  %469 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %339) #4, !dbg !45
  br label %__nv_sqrtf.exit52, !dbg !45

470:                                              ; preds = %467
  %471 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %339) #4, !dbg !45
  br label %__nv_sqrtf.exit52, !dbg !45

472:                                              ; preds = %__nv_sqrtf.exit47
  br i1 %.not1.i51, label %475, label %473, !dbg !45

473:                                              ; preds = %472
  %474 = tail call float @llvm.nvvm.sqrt.rn.f(float %339) #4, !dbg !45
  br label %__nv_sqrtf.exit52, !dbg !45

475:                                              ; preds = %472
  %476 = tail call float @llvm.nvvm.sqrt.approx.f(float %339) #4, !dbg !45
  br label %__nv_sqrtf.exit52, !dbg !45

__nv_sqrtf.exit52:                                ; preds = %468, %470, %473, %475
  %.0.i50 = phi float [ %469, %468 ], [ %471, %470 ], [ %474, %473 ], [ %476, %475 ], !dbg !45
  %477 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not.i53 = icmp eq i32 %477, 0, !dbg !45
  %478 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !45
  %.not1.i56 = icmp eq i32 %478, 0, !dbg !45
  br i1 %.not.i53, label %484, label %479, !dbg !45

479:                                              ; preds = %__nv_sqrtf.exit52
  br i1 %.not1.i56, label %482, label %480, !dbg !45

480:                                              ; preds = %479
  %481 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %340) #4, !dbg !45
  br label %__nv_sqrtf.exit57, !dbg !45

482:                                              ; preds = %479
  %483 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %340) #4, !dbg !45
  br label %__nv_sqrtf.exit57, !dbg !45

484:                                              ; preds = %__nv_sqrtf.exit52
  br i1 %.not1.i56, label %487, label %485, !dbg !45

485:                                              ; preds = %484
  %486 = tail call float @llvm.nvvm.sqrt.rn.f(float %340) #4, !dbg !45
  br label %__nv_sqrtf.exit57, !dbg !45

487:                                              ; preds = %484
  %488 = tail call float @llvm.nvvm.sqrt.approx.f(float %340) #4, !dbg !45
  br label %__nv_sqrtf.exit57, !dbg !45

__nv_sqrtf.exit57:                                ; preds = %480, %482, %485, %487
  %.0.i55 = phi float [ %481, %480 ], [ %483, %482 ], [ %486, %485 ], [ %488, %487 ], !dbg !45
  %489 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not.i58 = icmp eq i32 %489, 0, !dbg !45
  %490 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !45
  %.not1.i61 = icmp eq i32 %490, 0, !dbg !45
  br i1 %.not.i58, label %496, label %491, !dbg !45

491:                                              ; preds = %__nv_sqrtf.exit57
  br i1 %.not1.i61, label %494, label %492, !dbg !45

492:                                              ; preds = %491
  %493 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %341) #4, !dbg !45
  br label %__nv_sqrtf.exit62, !dbg !45

494:                                              ; preds = %491
  %495 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %341) #4, !dbg !45
  br label %__nv_sqrtf.exit62, !dbg !45

496:                                              ; preds = %__nv_sqrtf.exit57
  br i1 %.not1.i61, label %499, label %497, !dbg !45

497:                                              ; preds = %496
  %498 = tail call float @llvm.nvvm.sqrt.rn.f(float %341) #4, !dbg !45
  br label %__nv_sqrtf.exit62, !dbg !45

499:                                              ; preds = %496
  %500 = tail call float @llvm.nvvm.sqrt.approx.f(float %341) #4, !dbg !45
  br label %__nv_sqrtf.exit62, !dbg !45

__nv_sqrtf.exit62:                                ; preds = %492, %494, %497, %499
  %.0.i60 = phi float [ %493, %492 ], [ %495, %494 ], [ %498, %497 ], [ %500, %499 ], !dbg !45
  %501 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not.i63 = icmp eq i32 %501, 0, !dbg !45
  %502 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !45
  %.not1.i66 = icmp eq i32 %502, 0, !dbg !45
  br i1 %.not.i63, label %508, label %503, !dbg !45

503:                                              ; preds = %__nv_sqrtf.exit62
  br i1 %.not1.i66, label %506, label %504, !dbg !45

504:                                              ; preds = %503
  %505 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %342) #4, !dbg !45
  br label %__nv_sqrtf.exit67, !dbg !45

506:                                              ; preds = %503
  %507 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %342) #4, !dbg !45
  br label %__nv_sqrtf.exit67, !dbg !45

508:                                              ; preds = %__nv_sqrtf.exit62
  br i1 %.not1.i66, label %511, label %509, !dbg !45

509:                                              ; preds = %508
  %510 = tail call float @llvm.nvvm.sqrt.rn.f(float %342) #4, !dbg !45
  br label %__nv_sqrtf.exit67, !dbg !45

511:                                              ; preds = %508
  %512 = tail call float @llvm.nvvm.sqrt.approx.f(float %342) #4, !dbg !45
  br label %__nv_sqrtf.exit67, !dbg !45

__nv_sqrtf.exit67:                                ; preds = %504, %506, %509, %511
  %.0.i65 = phi float [ %505, %504 ], [ %507, %506 ], [ %510, %509 ], [ %512, %511 ], !dbg !45
  %513 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not.i68 = icmp eq i32 %513, 0, !dbg !45
  %514 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !45
  %.not1.i71 = icmp eq i32 %514, 0, !dbg !45
  br i1 %.not.i68, label %520, label %515, !dbg !45

515:                                              ; preds = %__nv_sqrtf.exit67
  br i1 %.not1.i71, label %518, label %516, !dbg !45

516:                                              ; preds = %515
  %517 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %343) #4, !dbg !45
  br label %__nv_sqrtf.exit72, !dbg !45

518:                                              ; preds = %515
  %519 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %343) #4, !dbg !45
  br label %__nv_sqrtf.exit72, !dbg !45

520:                                              ; preds = %__nv_sqrtf.exit67
  br i1 %.not1.i71, label %523, label %521, !dbg !45

521:                                              ; preds = %520
  %522 = tail call float @llvm.nvvm.sqrt.rn.f(float %343) #4, !dbg !45
  br label %__nv_sqrtf.exit72, !dbg !45

523:                                              ; preds = %520
  %524 = tail call float @llvm.nvvm.sqrt.approx.f(float %343) #4, !dbg !45
  br label %__nv_sqrtf.exit72, !dbg !45

__nv_sqrtf.exit72:                                ; preds = %516, %518, %521, %523
  %.0.i70 = phi float [ %517, %516 ], [ %519, %518 ], [ %522, %521 ], [ %524, %523 ], !dbg !45
  %525 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not.i73 = icmp eq i32 %525, 0, !dbg !45
  %526 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !45
  %.not1.i76 = icmp eq i32 %526, 0, !dbg !45
  br i1 %.not.i73, label %532, label %527, !dbg !45

527:                                              ; preds = %__nv_sqrtf.exit72
  br i1 %.not1.i76, label %530, label %528, !dbg !45

528:                                              ; preds = %527
  %529 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %344) #4, !dbg !45
  br label %__nv_sqrtf.exit77, !dbg !45

530:                                              ; preds = %527
  %531 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %344) #4, !dbg !45
  br label %__nv_sqrtf.exit77, !dbg !45

532:                                              ; preds = %__nv_sqrtf.exit72
  br i1 %.not1.i76, label %535, label %533, !dbg !45

533:                                              ; preds = %532
  %534 = tail call float @llvm.nvvm.sqrt.rn.f(float %344) #4, !dbg !45
  br label %__nv_sqrtf.exit77, !dbg !45

535:                                              ; preds = %532
  %536 = tail call float @llvm.nvvm.sqrt.approx.f(float %344) #4, !dbg !45
  br label %__nv_sqrtf.exit77, !dbg !45

__nv_sqrtf.exit77:                                ; preds = %528, %530, %533, %535
  %.0.i75 = phi float [ %529, %528 ], [ %531, %530 ], [ %534, %533 ], [ %536, %535 ], !dbg !45
  %537 = extractvalue { i32, i32, i32, i32 } %272, 3, !dbg !37
  %538 = extractvalue { i32, i32, i32, i32 } %272, 2, !dbg !37
  %539 = extractvalue { i32, i32, i32, i32 } %272, 1, !dbg !37
  %540 = extractvalue { i32, i32, i32, i32 } %272, 0, !dbg !37
  %541 = extractvalue { i32, i32, i32, i32 } %271, 3, !dbg !37
  %542 = extractvalue { i32, i32, i32, i32 } %271, 2, !dbg !37
  %543 = extractvalue { i32, i32, i32, i32 } %271, 1, !dbg !37
  %544 = extractvalue { i32, i32, i32, i32 } %271, 0, !dbg !37
  %545 = extractvalue { i32, i32, i32, i32 } %270, 3, !dbg !37
  %546 = extractvalue { i32, i32, i32, i32 } %270, 2, !dbg !37
  %547 = extractvalue { i32, i32, i32, i32 } %270, 1, !dbg !37
  %548 = extractvalue { i32, i32, i32, i32 } %270, 0, !dbg !37
  %549 = extractvalue { i32, i32, i32, i32 } %269, 3, !dbg !37
  %550 = extractvalue { i32, i32, i32, i32 } %269, 2, !dbg !37
  %551 = extractvalue { i32, i32, i32, i32 } %269, 1, !dbg !37
  %552 = extractvalue { i32, i32, i32, i32 } %269, 0, !dbg !37
  %553 = extractvalue { i32, i32, i32, i32 } %328, 3, !dbg !43
  %554 = extractvalue { i32, i32, i32, i32 } %328, 2, !dbg !43
  %555 = extractvalue { i32, i32, i32, i32 } %328, 1, !dbg !43
  %556 = extractvalue { i32, i32, i32, i32 } %328, 0, !dbg !43
  %557 = extractvalue { i32, i32, i32, i32 } %327, 3, !dbg !43
  %558 = extractvalue { i32, i32, i32, i32 } %327, 2, !dbg !43
  %559 = extractvalue { i32, i32, i32, i32 } %327, 1, !dbg !43
  %560 = extractvalue { i32, i32, i32, i32 } %327, 0, !dbg !43
  %561 = extractvalue { i32, i32, i32, i32 } %326, 3, !dbg !43
  %562 = extractvalue { i32, i32, i32, i32 } %326, 2, !dbg !43
  %563 = extractvalue { i32, i32, i32, i32 } %326, 1, !dbg !43
  %564 = extractvalue { i32, i32, i32, i32 } %326, 0, !dbg !43
  %565 = extractvalue { i32, i32, i32, i32 } %325, 3, !dbg !43
  %566 = extractvalue { i32, i32, i32, i32 } %325, 2, !dbg !43
  %567 = extractvalue { i32, i32, i32, i32 } %325, 1, !dbg !43
  %568 = extractvalue { i32, i32, i32, i32 } %325, 0, !dbg !43
  %569 = extractvalue { i32, i32, i32, i32 } %320, 3, !dbg !41
  %570 = extractvalue { i32, i32, i32, i32 } %320, 2, !dbg !41
  %571 = extractvalue { i32, i32, i32, i32 } %320, 1, !dbg !41
  %572 = extractvalue { i32, i32, i32, i32 } %320, 0, !dbg !41
  %573 = extractvalue { i32, i32, i32, i32 } %319, 3, !dbg !41
  %574 = extractvalue { i32, i32, i32, i32 } %319, 2, !dbg !41
  %575 = extractvalue { i32, i32, i32, i32 } %319, 1, !dbg !41
  %576 = extractvalue { i32, i32, i32, i32 } %319, 0, !dbg !41
  %577 = extractvalue { i32, i32, i32, i32 } %318, 3, !dbg !41
  %578 = extractvalue { i32, i32, i32, i32 } %318, 2, !dbg !41
  %579 = extractvalue { i32, i32, i32, i32 } %318, 1, !dbg !41
  %580 = extractvalue { i32, i32, i32, i32 } %318, 0, !dbg !41
  %581 = extractvalue { i32, i32, i32, i32 } %317, 3, !dbg !41
  %582 = extractvalue { i32, i32, i32, i32 } %317, 2, !dbg !41
  %583 = extractvalue { i32, i32, i32, i32 } %317, 1, !dbg !41
  %584 = extractvalue { i32, i32, i32, i32 } %317, 0, !dbg !41
  %585 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !46
  %586 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i5) #4, !dbg !46
  %587 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i10) #4, !dbg !46
  %588 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i15) #4, !dbg !46
  %589 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i20) #4, !dbg !46
  %590 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i25) #4, !dbg !46
  %591 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i30) #4, !dbg !46
  %592 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i35) #4, !dbg !46
  %593 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i40) #4, !dbg !46
  %594 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i45) #4, !dbg !46
  %595 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i50) #4, !dbg !46
  %596 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i55) #4, !dbg !46
  %597 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i60) #4, !dbg !46
  %598 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i65) #4, !dbg !46
  %599 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i70) #4, !dbg !46
  %600 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i75) #4, !dbg !46
  %601 = insertelement <16 x i32> poison, i32 %537, i64 0, !dbg !37
  %602 = insertelement <16 x i32> %601, i32 %538, i64 1, !dbg !37
  %603 = insertelement <16 x i32> %602, i32 %539, i64 2, !dbg !37
  %604 = insertelement <16 x i32> %603, i32 %540, i64 3, !dbg !37
  %605 = insertelement <16 x i32> %604, i32 %541, i64 4, !dbg !37
  %606 = insertelement <16 x i32> %605, i32 %542, i64 5, !dbg !37
  %607 = insertelement <16 x i32> %606, i32 %543, i64 6, !dbg !37
  %608 = insertelement <16 x i32> %607, i32 %544, i64 7, !dbg !37
  %609 = insertelement <16 x i32> %608, i32 %545, i64 8, !dbg !37
  %610 = insertelement <16 x i32> %609, i32 %546, i64 9, !dbg !37
  %611 = insertelement <16 x i32> %610, i32 %547, i64 10, !dbg !37
  %612 = insertelement <16 x i32> %611, i32 %548, i64 11, !dbg !37
  %613 = insertelement <16 x i32> %612, i32 %552, i64 12, !dbg !37
  %614 = insertelement <16 x i32> %613, i32 %551, i64 13, !dbg !37
  %615 = insertelement <16 x i32> %614, i32 %550, i64 14, !dbg !37
  %616 = insertelement <16 x i32> %615, i32 %549, i64 15, !dbg !37
  %617 = bitcast <16 x i32> %616 to <16 x float>, !dbg !37
  %618 = insertelement <16 x float> poison, float %244, i64 0, !dbg !47
  %619 = insertelement <16 x float> %618, float %239, i64 1, !dbg !47
  %620 = insertelement <16 x float> %619, float %234, i64 2, !dbg !47
  %621 = insertelement <16 x float> %620, float %229, i64 3, !dbg !47
  %622 = insertelement <16 x float> %621, float %224, i64 4, !dbg !47
  %623 = insertelement <16 x float> %622, float %219, i64 5, !dbg !47
  %624 = insertelement <16 x float> %623, float %214, i64 6, !dbg !47
  %625 = insertelement <16 x float> %624, float %209, i64 7, !dbg !47
  %626 = insertelement <16 x float> %625, float %204, i64 8, !dbg !47
  %627 = insertelement <16 x float> %626, float %199, i64 9, !dbg !47
  %628 = insertelement <16 x float> %627, float %194, i64 10, !dbg !47
  %629 = insertelement <16 x float> %628, float %189, i64 11, !dbg !47
  %630 = shufflevector <4 x float> %184, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !47
  %631 = shufflevector <16 x float> %629, <16 x float> %630, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 16, i32 17, i32 18, i32 19>, !dbg !47
  %632 = fsub <16 x float> %631, %617, !dbg !47
  %633 = insertelement <16 x i32> poison, i32 %553, i64 0, !dbg !43
  %634 = insertelement <16 x i32> %633, i32 %554, i64 1, !dbg !43
  %635 = insertelement <16 x i32> %634, i32 %555, i64 2, !dbg !43
  %636 = insertelement <16 x i32> %635, i32 %556, i64 3, !dbg !43
  %637 = insertelement <16 x i32> %636, i32 %557, i64 4, !dbg !43
  %638 = insertelement <16 x i32> %637, i32 %558, i64 5, !dbg !43
  %639 = insertelement <16 x i32> %638, i32 %559, i64 6, !dbg !43
  %640 = insertelement <16 x i32> %639, i32 %560, i64 7, !dbg !43
  %641 = insertelement <16 x i32> %640, i32 %561, i64 8, !dbg !43
  %642 = insertelement <16 x i32> %641, i32 %562, i64 9, !dbg !43
  %643 = insertelement <16 x i32> %642, i32 %563, i64 10, !dbg !43
  %644 = insertelement <16 x i32> %643, i32 %564, i64 11, !dbg !43
  %645 = insertelement <16 x i32> %644, i32 %568, i64 12, !dbg !43
  %646 = insertelement <16 x i32> %645, i32 %567, i64 13, !dbg !43
  %647 = insertelement <16 x i32> %646, i32 %566, i64 14, !dbg !43
  %648 = insertelement <16 x i32> %647, i32 %565, i64 15, !dbg !43
  %649 = bitcast <16 x i32> %648 to <16 x float>, !dbg !43
  %650 = insertelement <16 x i32> poison, i32 %569, i64 0, !dbg !41
  %651 = insertelement <16 x i32> %650, i32 %570, i64 1, !dbg !41
  %652 = insertelement <16 x i32> %651, i32 %571, i64 2, !dbg !41
  %653 = insertelement <16 x i32> %652, i32 %572, i64 3, !dbg !41
  %654 = insertelement <16 x i32> %653, i32 %573, i64 4, !dbg !41
  %655 = insertelement <16 x i32> %654, i32 %574, i64 5, !dbg !41
  %656 = insertelement <16 x i32> %655, i32 %575, i64 6, !dbg !41
  %657 = insertelement <16 x i32> %656, i32 %576, i64 7, !dbg !41
  %658 = insertelement <16 x i32> %657, i32 %577, i64 8, !dbg !41
  %659 = insertelement <16 x i32> %658, i32 %578, i64 9, !dbg !41
  %660 = insertelement <16 x i32> %659, i32 %579, i64 10, !dbg !41
  %661 = insertelement <16 x i32> %660, i32 %580, i64 11, !dbg !41
  %662 = insertelement <16 x i32> %661, i32 %584, i64 12, !dbg !41
  %663 = insertelement <16 x i32> %662, i32 %583, i64 13, !dbg !41
  %664 = insertelement <16 x i32> %663, i32 %582, i64 14, !dbg !41
  %665 = insertelement <16 x i32> %664, i32 %581, i64 15, !dbg !41
  %666 = bitcast <16 x i32> %665 to <16 x float>, !dbg !41
  %667 = insertelement <16 x float> poison, float %600, i64 0, !dbg !48
  %668 = insertelement <16 x float> %667, float %599, i64 1, !dbg !48
  %669 = insertelement <16 x float> %668, float %598, i64 2, !dbg !48
  %670 = insertelement <16 x float> %669, float %597, i64 3, !dbg !48
  %671 = insertelement <16 x float> %670, float %596, i64 4, !dbg !48
  %672 = insertelement <16 x float> %671, float %595, i64 5, !dbg !48
  %673 = insertelement <16 x float> %672, float %594, i64 6, !dbg !48
  %674 = insertelement <16 x float> %673, float %593, i64 7, !dbg !48
  %675 = insertelement <16 x float> %674, float %592, i64 8, !dbg !48
  %676 = insertelement <16 x float> %675, float %591, i64 9, !dbg !48
  %677 = insertelement <16 x float> %676, float %590, i64 10, !dbg !48
  %678 = insertelement <16 x float> %677, float %589, i64 11, !dbg !48
  %679 = insertelement <16 x float> %678, float %585, i64 12, !dbg !48
  %680 = insertelement <16 x float> %679, float %586, i64 13, !dbg !48
  %681 = insertelement <16 x float> %680, float %587, i64 14, !dbg !48
  %682 = insertelement <16 x float> %681, float %588, i64 15, !dbg !48
  %683 = fmul <16 x float> %632, %682, !dbg !48
  %684 = fmul <16 x float> %683, %666, !dbg !49
  %685 = fadd <16 x float> %684, %649, !dbg !50
  %686 = fcmp olt <16 x float> %685, zeroinitializer, !dbg !51
  %687 = extractelement <16 x i1> %686, i64 12, !dbg !55
  %688 = extractelement <16 x i1> %686, i64 13, !dbg !55
  %689 = extractelement <16 x i1> %686, i64 14, !dbg !55
  %690 = extractelement <16 x i1> %686, i64 15, !dbg !55
  %691 = extractelement <16 x i1> %686, i64 11, !dbg !55
  %692 = extractelement <16 x i1> %686, i64 10, !dbg !55
  %693 = extractelement <16 x i1> %686, i64 9, !dbg !55
  %694 = extractelement <16 x i1> %686, i64 8, !dbg !55
  %695 = extractelement <16 x i1> %686, i64 7, !dbg !55
  %696 = extractelement <16 x i1> %686, i64 6, !dbg !55
  %697 = extractelement <16 x i1> %686, i64 5, !dbg !55
  %698 = extractelement <16 x i1> %686, i64 4, !dbg !55
  %699 = extractelement <16 x i1> %686, i64 3, !dbg !55
  %700 = extractelement <16 x i1> %686, i64 2, !dbg !55
  %701 = extractelement <16 x i1> %686, i64 1, !dbg !55
  %702 = extractelement <16 x i1> %686, i64 0, !dbg !55
  %703 = shl i32 %18, 3, !dbg !56
  %704 = shl i32 %19, 3, !dbg !56
  %705 = shl i32 %20, 3, !dbg !56
  %706 = shl i32 %21, 3, !dbg !56
  %707 = add i32 %29, %703, !dbg !57
  %708 = add i32 %29, %704, !dbg !57
  %709 = add i32 %29, %705, !dbg !57
  %710 = add i32 %29, %706, !dbg !57
  %711 = sext i32 %707 to i64, !dbg !58
  %712 = getelementptr float, ptr addrspace(1) %5, i64 %711, !dbg !58
  %713 = sext i32 %708 to i64, !dbg !58
  %714 = getelementptr float, ptr addrspace(1) %5, i64 %713, !dbg !58
  %715 = sext i32 %709 to i64, !dbg !58
  %716 = getelementptr float, ptr addrspace(1) %5, i64 %715, !dbg !58
  %717 = sext i32 %710 to i64, !dbg !58
  %718 = getelementptr float, ptr addrspace(1) %5, i64 %717, !dbg !58
  %bc = bitcast <16 x float> %685 to <16 x i32>, !dbg !59
  %719 = extractelement <16 x i32> %bc, i64 12, !dbg !59
  %720 = select i1 %687, i32 0, i32 %719, !dbg !55
  %bc78 = bitcast <16 x float> %685 to <16 x i32>, !dbg !59
  %721 = extractelement <16 x i32> %bc78, i64 13, !dbg !59
  %722 = select i1 %688, i32 0, i32 %721, !dbg !55
  %bc79 = bitcast <16 x float> %685 to <16 x i32>, !dbg !59
  %723 = extractelement <16 x i32> %bc79, i64 14, !dbg !59
  %724 = select i1 %689, i32 0, i32 %723, !dbg !55
  %bc80 = bitcast <16 x float> %685 to <16 x i32>, !dbg !59
  %725 = extractelement <16 x i32> %bc80, i64 15, !dbg !59
  %726 = select i1 %690, i32 0, i32 %725, !dbg !55
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %720, i32 %722, i32 %724, i32 %726, ptr addrspace(1) %712, i1 %34) #4, !dbg !59
  %bc81 = bitcast <16 x float> %685 to <16 x i32>, !dbg !59
  %727 = extractelement <16 x i32> %bc81, i64 11, !dbg !59
  %728 = select i1 %691, i32 0, i32 %727, !dbg !55
  %bc82 = bitcast <16 x float> %685 to <16 x i32>, !dbg !59
  %729 = extractelement <16 x i32> %bc82, i64 10, !dbg !59
  %730 = select i1 %692, i32 0, i32 %729, !dbg !55
  %bc83 = bitcast <16 x float> %685 to <16 x i32>, !dbg !59
  %731 = extractelement <16 x i32> %bc83, i64 9, !dbg !59
  %732 = select i1 %693, i32 0, i32 %731, !dbg !55
  %bc84 = bitcast <16 x float> %685 to <16 x i32>, !dbg !59
  %733 = extractelement <16 x i32> %bc84, i64 8, !dbg !59
  %734 = select i1 %694, i32 0, i32 %733, !dbg !55
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %728, i32 %730, i32 %732, i32 %734, ptr addrspace(1) %714, i1 %34) #4, !dbg !59
  %bc85 = bitcast <16 x float> %685 to <16 x i32>, !dbg !59
  %735 = extractelement <16 x i32> %bc85, i64 7, !dbg !59
  %736 = select i1 %695, i32 0, i32 %735, !dbg !55
  %bc86 = bitcast <16 x float> %685 to <16 x i32>, !dbg !59
  %737 = extractelement <16 x i32> %bc86, i64 6, !dbg !59
  %738 = select i1 %696, i32 0, i32 %737, !dbg !55
  %bc87 = bitcast <16 x float> %685 to <16 x i32>, !dbg !59
  %739 = extractelement <16 x i32> %bc87, i64 5, !dbg !59
  %740 = select i1 %697, i32 0, i32 %739, !dbg !55
  %bc88 = bitcast <16 x float> %685 to <16 x i32>, !dbg !59
  %741 = extractelement <16 x i32> %bc88, i64 4, !dbg !59
  %742 = select i1 %698, i32 0, i32 %741, !dbg !55
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %736, i32 %738, i32 %740, i32 %742, ptr addrspace(1) %716, i1 %34) #4, !dbg !59
  %bc89 = bitcast <16 x float> %685 to <16 x i32>, !dbg !59
  %743 = extractelement <16 x i32> %bc89, i64 3, !dbg !59
  %744 = select i1 %699, i32 0, i32 %743, !dbg !55
  %bc90 = bitcast <16 x float> %685 to <16 x i32>, !dbg !59
  %745 = extractelement <16 x i32> %bc90, i64 2, !dbg !59
  %746 = select i1 %700, i32 0, i32 %745, !dbg !55
  %bc91 = bitcast <16 x float> %685 to <16 x i32>, !dbg !59
  %747 = extractelement <16 x i32> %bc91, i64 1, !dbg !59
  %748 = select i1 %701, i32 0, i32 %747, !dbg !55
  %bc92 = bitcast <16 x float> %685 to <16 x i32>, !dbg !59
  %749 = extractelement <16 x i32> %bc92, i64 0, !dbg !59
  %750 = select i1 %702, i32 0, i32 %749, !dbg !55
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %744, i32 %746, i32 %748, i32 %750, ptr addrspace(1) %718, i1 %34) #4, !dbg !59
  ret void, !dbg !60
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c3cdbhjxmsend7ypfcp7e33aht3v6kggiwqjtrzpzqupjxvjtpwi.py", directory: "inductor_cache/3c")
!4 = !{ptr @triton_poi_fused_pixel_shuffle_16, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_pixel_shuffle_16, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_pixel_shuffle_16", linkageName: "triton_poi_fused_pixel_shuffle_16", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 29, column: 19, scope: !7)
!20 = !DILocation(line: 30, column: 21, scope: !7)
!21 = !DILocation(line: 30, column: 26, scope: !7)
!22 = !DILocation(line: 32, column: 19, scope: !7)
!23 = !DILocation(line: 33, column: 28, scope: !7)
!24 = !DILocation(line: 35, column: 45, scope: !7)
!25 = !DILocation(line: 35, column: 64, scope: !7)
!26 = !DILocation(line: 35, column: 54, scope: !7)
!27 = !DILocation(line: 35, column: 42, scope: !7)
!28 = !DILocation(line: 35, column: 50, scope: !7)
!29 = !DILocation(line: 35, column: 59, scope: !7)
!30 = !DILocation(line: 35, column: 30, scope: !7)
!31 = !DILocation(line: 35, column: 69, scope: !7)
!32 = !DILocation(line: 36, column: 37, scope: !7)
!33 = !DILocation(line: 36, column: 35, scope: !7)
!34 = !DILocation(line: 36, column: 45, scope: !7)
!35 = !DILocation(line: 36, column: 42, scope: !7)
!36 = !DILocation(line: 36, column: 30, scope: !7)
!37 = !DILocation(line: 36, column: 50, scope: !7)
!38 = !DILocation(line: 37, column: 30, scope: !7)
!39 = !DILocation(line: 37, column: 50, scope: !7)
!40 = !DILocation(line: 38, column: 31, scope: !7)
!41 = !DILocation(line: 38, column: 51, scope: !7)
!42 = !DILocation(line: 39, column: 31, scope: !7)
!43 = !DILocation(line: 39, column: 51, scope: !7)
!44 = !DILocation(line: 42, column: 18, scope: !7)
!45 = !DILocation(line: 43, column: 26, scope: !7)
!46 = !DILocation(line: 45, column: 18, scope: !7)
!47 = !DILocation(line: 40, column: 18, scope: !7)
!48 = !DILocation(line: 48, column: 19, scope: !7)
!49 = !DILocation(line: 49, column: 20, scope: !7)
!50 = !DILocation(line: 50, column: 20, scope: !7)
!51 = !DILocation(line: 118, column: 15, scope: !52, inlinedAt: !54)
!52 = distinct !DILexicalBlockFile(scope: !7, file: !53, discriminator: 0)
!53 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!54 = !DILocation(line: 52, column: 42, scope: !7)
!55 = !DILocation(line: 121, column: 29, scope: !52, inlinedAt: !54)
!56 = !DILocation(line: 53, column: 32, scope: !7)
!57 = !DILocation(line: 53, column: 30, scope: !7)
!58 = !DILocation(line: 53, column: 25, scope: !7)
!59 = !DILocation(line: 53, column: 44, scope: !7)
!60 = !DILocation(line: 53, column: 4, scope: !7)
