; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused_native_group_norm_relu_11(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %10 = shl i32 %9, 10, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 508, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = or disjoint i32 %14, 1, !dbg !13
  %16 = or disjoint i32 %14, 2, !dbg !13
  %17 = or disjoint i32 %14, 3, !dbg !13
  %18 = or disjoint i32 %14, 512, !dbg !13
  %19 = or disjoint i32 %14, 513, !dbg !13
  %20 = or disjoint i32 %14, 514, !dbg !13
  %21 = or disjoint i32 %14, 515, !dbg !13
  %22 = srem i32 %14, 192, !dbg !14
  %23 = srem i32 %15, 192, !dbg !14
  %24 = srem i32 %16, 192, !dbg !14
  %25 = srem i32 %17, 192, !dbg !14
  %26 = srem i32 %18, 192, !dbg !14
  %27 = srem i32 %19, 192, !dbg !14
  %28 = srem i32 %20, 192, !dbg !14
  %29 = srem i32 %21, 192, !dbg !14
  %30 = sdiv i32 %14, 786432, !dbg !15
  %31 = sdiv i32 %18, 786432, !dbg !15
  %32 = sext i32 %14 to i64, !dbg !16
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !16
  %34 = sext i32 %18 to i64, !dbg !16
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !16
  %36 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %33, i1 true) #3, !dbg !17
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %35, i1 true) #3, !dbg !17
  %38 = getelementptr float, ptr addrspace(1) %1, i64 %32, !dbg !18
  %39 = getelementptr float, ptr addrspace(1) %1, i64 %34, !dbg !18
  %40 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %38, i1 true) #3, !dbg !19
  %41 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !19
  %42 = mul nsw i32 %30, 6, !dbg !20
  %43 = mul nsw i32 %31, 6, !dbg !20
  %.lhs.trunc = trunc nsw i32 %22 to i16, !dbg !21
  %44 = sdiv i16 %.lhs.trunc, 32, !dbg !21
  %.sext = sext i16 %44 to i32, !dbg !21
  %.lhs.trunc22 = trunc nsw i32 %23 to i16, !dbg !21
  %45 = sdiv i16 %.lhs.trunc22, 32, !dbg !21
  %.sext23 = sext i16 %45 to i32, !dbg !21
  %.lhs.trunc24 = trunc nsw i32 %24 to i16, !dbg !21
  %46 = sdiv i16 %.lhs.trunc24, 32, !dbg !21
  %.sext25 = sext i16 %46 to i32, !dbg !21
  %.lhs.trunc26 = trunc nsw i32 %25 to i16, !dbg !21
  %47 = sdiv i16 %.lhs.trunc26, 32, !dbg !21
  %.sext27 = sext i16 %47 to i32, !dbg !21
  %.lhs.trunc28 = trunc nsw i32 %26 to i16, !dbg !21
  %48 = sdiv i16 %.lhs.trunc28, 32, !dbg !21
  %.sext29 = sext i16 %48 to i32, !dbg !21
  %.lhs.trunc30 = trunc nsw i32 %27 to i16, !dbg !21
  %49 = sdiv i16 %.lhs.trunc30, 32, !dbg !21
  %.sext31 = sext i16 %49 to i32, !dbg !21
  %.lhs.trunc32 = trunc nsw i32 %28 to i16, !dbg !21
  %50 = sdiv i16 %.lhs.trunc32, 32, !dbg !21
  %.sext33 = sext i16 %50 to i32, !dbg !21
  %.lhs.trunc34 = trunc nsw i32 %29 to i16, !dbg !21
  %51 = sdiv i16 %.lhs.trunc34, 32, !dbg !21
  %.sext35 = sext i16 %51 to i32, !dbg !21
  %52 = add nsw i32 %42, %.sext, !dbg !22
  %53 = add nsw i32 %42, %.sext23, !dbg !22
  %54 = add nsw i32 %42, %.sext25, !dbg !22
  %55 = add nsw i32 %42, %.sext27, !dbg !22
  %56 = add nsw i32 %43, %.sext29, !dbg !22
  %57 = add nsw i32 %43, %.sext31, !dbg !22
  %58 = add nsw i32 %43, %.sext33, !dbg !22
  %59 = add nsw i32 %43, %.sext35, !dbg !22
  %60 = sext i32 %52 to i64, !dbg !23
  %61 = getelementptr float, ptr addrspace(1) %2, i64 %60, !dbg !23
  %62 = sext i32 %53 to i64, !dbg !23
  %63 = getelementptr float, ptr addrspace(1) %2, i64 %62, !dbg !23
  %64 = sext i32 %54 to i64, !dbg !23
  %65 = getelementptr float, ptr addrspace(1) %2, i64 %64, !dbg !23
  %66 = sext i32 %55 to i64, !dbg !23
  %67 = getelementptr float, ptr addrspace(1) %2, i64 %66, !dbg !23
  %68 = sext i32 %56 to i64, !dbg !23
  %69 = getelementptr float, ptr addrspace(1) %2, i64 %68, !dbg !23
  %70 = sext i32 %57 to i64, !dbg !23
  %71 = getelementptr float, ptr addrspace(1) %2, i64 %70, !dbg !23
  %72 = sext i32 %58 to i64, !dbg !23
  %73 = getelementptr float, ptr addrspace(1) %2, i64 %72, !dbg !23
  %74 = sext i32 %59 to i64, !dbg !23
  %75 = getelementptr float, ptr addrspace(1) %2, i64 %74, !dbg !23
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 true) #3, !dbg !24
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 true) #3, !dbg !24
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 true) #3, !dbg !24
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 true) #3, !dbg !24
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 true) #3, !dbg !24
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %71, i1 true) #3, !dbg !24
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 true) #3, !dbg !24
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 true) #3, !dbg !24
  %84 = getelementptr float, ptr addrspace(1) %3, i64 %60, !dbg !25
  %85 = getelementptr float, ptr addrspace(1) %3, i64 %62, !dbg !25
  %86 = getelementptr float, ptr addrspace(1) %3, i64 %64, !dbg !25
  %87 = getelementptr float, ptr addrspace(1) %3, i64 %66, !dbg !25
  %88 = getelementptr float, ptr addrspace(1) %3, i64 %68, !dbg !25
  %89 = getelementptr float, ptr addrspace(1) %3, i64 %70, !dbg !25
  %90 = getelementptr float, ptr addrspace(1) %3, i64 %72, !dbg !25
  %91 = getelementptr float, ptr addrspace(1) %3, i64 %74, !dbg !25
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 true) #3, !dbg !26
  %93 = bitcast i32 %92 to float, !dbg !26
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 true) #3, !dbg !26
  %95 = bitcast i32 %94 to float, !dbg !26
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 true) #3, !dbg !26
  %97 = bitcast i32 %96 to float, !dbg !26
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %87, i1 true) #3, !dbg !26
  %99 = bitcast i32 %98 to float, !dbg !26
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %88, i1 true) #3, !dbg !26
  %101 = bitcast i32 %100 to float, !dbg !26
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %89, i1 true) #3, !dbg !26
  %103 = bitcast i32 %102 to float, !dbg !26
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %90, i1 true) #3, !dbg !26
  %105 = bitcast i32 %104 to float, !dbg !26
  %106 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %91, i1 true) #3, !dbg !26
  %107 = bitcast i32 %106 to float, !dbg !26
  %108 = sext i32 %22 to i64, !dbg !27
  %109 = getelementptr float, ptr addrspace(1) %4, i64 %108, !dbg !27
  %110 = sext i32 %26 to i64, !dbg !27
  %111 = getelementptr float, ptr addrspace(1) %4, i64 %110, !dbg !27
  %112 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %109, i1 true) #3, !dbg !28
  %113 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %111, i1 true) #3, !dbg !28
  %114 = getelementptr float, ptr addrspace(1) %5, i64 %108, !dbg !29
  %115 = getelementptr float, ptr addrspace(1) %5, i64 %110, !dbg !29
  %116 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %114, i1 true) #3, !dbg !30
  %117 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %115, i1 true) #3, !dbg !30
  %118 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %93, float 1.310720e+05) #3, !dbg !31
  %119 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %95, float 1.310720e+05) #3, !dbg !31
  %120 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %97, float 1.310720e+05) #3, !dbg !31
  %121 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %99, float 1.310720e+05) #3, !dbg !31
  %122 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %101, float 1.310720e+05) #3, !dbg !31
  %123 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %103, float 1.310720e+05) #3, !dbg !31
  %124 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %105, float 1.310720e+05) #3, !dbg !31
  %125 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %107, float 1.310720e+05) #3, !dbg !31
  %126 = fadd float %118, 0x3EE4F8B580000000, !dbg !32
  %127 = fadd float %119, 0x3EE4F8B580000000, !dbg !32
  %128 = fadd float %120, 0x3EE4F8B580000000, !dbg !32
  %129 = fadd float %121, 0x3EE4F8B580000000, !dbg !32
  %130 = fadd float %122, 0x3EE4F8B580000000, !dbg !32
  %131 = fadd float %123, 0x3EE4F8B580000000, !dbg !32
  %132 = fadd float %124, 0x3EE4F8B580000000, !dbg !32
  %133 = fadd float %125, 0x3EE4F8B580000000, !dbg !32
  %134 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !33
  %.not.i = icmp eq i32 %134, 0, !dbg !33
  br i1 %.not.i, label %137, label %135, !dbg !33

135:                                              ; preds = %8
  %136 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %126), !dbg !33
  br label %__nv_rsqrtf.exit, !dbg !33

137:                                              ; preds = %8
  %138 = tail call float @llvm.nvvm.rsqrt.approx.f(float %126), !dbg !33
  br label %__nv_rsqrtf.exit, !dbg !33

__nv_rsqrtf.exit:                                 ; preds = %135, %137
  %.0.i = phi float [ %136, %135 ], [ %138, %137 ], !dbg !33
  %139 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !33
  %.not.i1 = icmp eq i32 %139, 0, !dbg !33
  br i1 %.not.i1, label %142, label %140, !dbg !33

140:                                              ; preds = %__nv_rsqrtf.exit
  %141 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %127), !dbg !33
  br label %__nv_rsqrtf.exit3, !dbg !33

142:                                              ; preds = %__nv_rsqrtf.exit
  %143 = tail call float @llvm.nvvm.rsqrt.approx.f(float %127), !dbg !33
  br label %__nv_rsqrtf.exit3, !dbg !33

__nv_rsqrtf.exit3:                                ; preds = %140, %142
  %.0.i2 = phi float [ %141, %140 ], [ %143, %142 ], !dbg !33
  %144 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !33
  %.not.i4 = icmp eq i32 %144, 0, !dbg !33
  br i1 %.not.i4, label %147, label %145, !dbg !33

145:                                              ; preds = %__nv_rsqrtf.exit3
  %146 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %128), !dbg !33
  br label %__nv_rsqrtf.exit6, !dbg !33

147:                                              ; preds = %__nv_rsqrtf.exit3
  %148 = tail call float @llvm.nvvm.rsqrt.approx.f(float %128), !dbg !33
  br label %__nv_rsqrtf.exit6, !dbg !33

__nv_rsqrtf.exit6:                                ; preds = %145, %147
  %.0.i5 = phi float [ %146, %145 ], [ %148, %147 ], !dbg !33
  %149 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !33
  %.not.i7 = icmp eq i32 %149, 0, !dbg !33
  br i1 %.not.i7, label %152, label %150, !dbg !33

150:                                              ; preds = %__nv_rsqrtf.exit6
  %151 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %129), !dbg !33
  br label %__nv_rsqrtf.exit9, !dbg !33

152:                                              ; preds = %__nv_rsqrtf.exit6
  %153 = tail call float @llvm.nvvm.rsqrt.approx.f(float %129), !dbg !33
  br label %__nv_rsqrtf.exit9, !dbg !33

__nv_rsqrtf.exit9:                                ; preds = %150, %152
  %.0.i8 = phi float [ %151, %150 ], [ %153, %152 ], !dbg !33
  %154 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !33
  %.not.i10 = icmp eq i32 %154, 0, !dbg !33
  br i1 %.not.i10, label %157, label %155, !dbg !33

155:                                              ; preds = %__nv_rsqrtf.exit9
  %156 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %130), !dbg !33
  br label %__nv_rsqrtf.exit12, !dbg !33

157:                                              ; preds = %__nv_rsqrtf.exit9
  %158 = tail call float @llvm.nvvm.rsqrt.approx.f(float %130), !dbg !33
  br label %__nv_rsqrtf.exit12, !dbg !33

__nv_rsqrtf.exit12:                               ; preds = %155, %157
  %.0.i11 = phi float [ %156, %155 ], [ %158, %157 ], !dbg !33
  %159 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !33
  %.not.i13 = icmp eq i32 %159, 0, !dbg !33
  br i1 %.not.i13, label %162, label %160, !dbg !33

160:                                              ; preds = %__nv_rsqrtf.exit12
  %161 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %131), !dbg !33
  br label %__nv_rsqrtf.exit15, !dbg !33

162:                                              ; preds = %__nv_rsqrtf.exit12
  %163 = tail call float @llvm.nvvm.rsqrt.approx.f(float %131), !dbg !33
  br label %__nv_rsqrtf.exit15, !dbg !33

__nv_rsqrtf.exit15:                               ; preds = %160, %162
  %.0.i14 = phi float [ %161, %160 ], [ %163, %162 ], !dbg !33
  %164 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !33
  %.not.i16 = icmp eq i32 %164, 0, !dbg !33
  br i1 %.not.i16, label %167, label %165, !dbg !33

165:                                              ; preds = %__nv_rsqrtf.exit15
  %166 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %132), !dbg !33
  br label %__nv_rsqrtf.exit18, !dbg !33

167:                                              ; preds = %__nv_rsqrtf.exit15
  %168 = tail call float @llvm.nvvm.rsqrt.approx.f(float %132), !dbg !33
  br label %__nv_rsqrtf.exit18, !dbg !33

__nv_rsqrtf.exit18:                               ; preds = %165, %167
  %.0.i17 = phi float [ %166, %165 ], [ %168, %167 ], !dbg !33
  %169 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !33
  %.not.i19 = icmp eq i32 %169, 0, !dbg !33
  br i1 %.not.i19, label %172, label %170, !dbg !33

170:                                              ; preds = %__nv_rsqrtf.exit18
  %171 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %133), !dbg !33
  br label %__nv_rsqrtf.exit21, !dbg !33

172:                                              ; preds = %__nv_rsqrtf.exit18
  %173 = tail call float @llvm.nvvm.rsqrt.approx.f(float %133), !dbg !33
  br label %__nv_rsqrtf.exit21, !dbg !33

__nv_rsqrtf.exit21:                               ; preds = %170, %172
  %.0.i20 = phi float [ %171, %170 ], [ %173, %172 ], !dbg !33
  %174 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !17
  %175 = extractvalue { i32, i32, i32, i32 } %41, 3, !dbg !19
  %176 = insertelement <8 x i32> poison, i32 %83, i64 0, !dbg !24
  %177 = insertelement <8 x i32> %176, i32 %82, i64 1, !dbg !24
  %178 = insertelement <8 x i32> %177, i32 %81, i64 2, !dbg !24
  %179 = insertelement <8 x i32> %178, i32 %80, i64 3, !dbg !24
  %180 = insertelement <8 x i32> %179, i32 %79, i64 4, !dbg !24
  %181 = insertelement <8 x i32> %180, i32 %78, i64 5, !dbg !24
  %182 = insertelement <8 x i32> %181, i32 %77, i64 6, !dbg !24
  %183 = insertelement <8 x i32> %182, i32 %76, i64 7, !dbg !24
  %184 = bitcast <8 x i32> %183 to <8 x float>, !dbg !24
  %185 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !17
  %186 = extractvalue { i32, i32, i32, i32 } %41, 2, !dbg !19
  %187 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !17
  %188 = extractvalue { i32, i32, i32, i32 } %41, 1, !dbg !19
  %189 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !17
  %190 = extractvalue { i32, i32, i32, i32 } %41, 0, !dbg !19
  %191 = extractvalue { i32, i32, i32, i32 } %36, 3, !dbg !17
  %192 = extractvalue { i32, i32, i32, i32 } %40, 3, !dbg !19
  %193 = extractvalue { i32, i32, i32, i32 } %36, 2, !dbg !17
  %194 = extractvalue { i32, i32, i32, i32 } %40, 2, !dbg !19
  %195 = extractvalue { i32, i32, i32, i32 } %36, 1, !dbg !17
  %196 = extractvalue { i32, i32, i32, i32 } %40, 1, !dbg !19
  %197 = extractvalue { i32, i32, i32, i32 } %36, 0, !dbg !17
  %198 = extractvalue { i32, i32, i32, i32 } %40, 0, !dbg !19
  %199 = extractvalue { i32, i32, i32, i32 } %117, 3, !dbg !30
  %200 = extractvalue { i32, i32, i32, i32 } %117, 2, !dbg !30
  %201 = extractvalue { i32, i32, i32, i32 } %117, 1, !dbg !30
  %202 = extractvalue { i32, i32, i32, i32 } %117, 0, !dbg !30
  %203 = extractvalue { i32, i32, i32, i32 } %116, 3, !dbg !30
  %204 = extractvalue { i32, i32, i32, i32 } %116, 2, !dbg !30
  %205 = extractvalue { i32, i32, i32, i32 } %116, 1, !dbg !30
  %206 = extractvalue { i32, i32, i32, i32 } %116, 0, !dbg !30
  %207 = extractvalue { i32, i32, i32, i32 } %113, 3, !dbg !28
  %208 = extractvalue { i32, i32, i32, i32 } %113, 2, !dbg !28
  %209 = extractvalue { i32, i32, i32, i32 } %113, 1, !dbg !28
  %210 = extractvalue { i32, i32, i32, i32 } %113, 0, !dbg !28
  %211 = extractvalue { i32, i32, i32, i32 } %112, 3, !dbg !28
  %212 = extractvalue { i32, i32, i32, i32 } %112, 2, !dbg !28
  %213 = extractvalue { i32, i32, i32, i32 } %112, 1, !dbg !28
  %214 = extractvalue { i32, i32, i32, i32 } %112, 0, !dbg !28
  %215 = insertelement <8 x i32> poison, i32 %174, i64 0, !dbg !17
  %216 = insertelement <8 x i32> %215, i32 %185, i64 1, !dbg !17
  %217 = insertelement <8 x i32> %216, i32 %187, i64 2, !dbg !17
  %218 = insertelement <8 x i32> %217, i32 %189, i64 3, !dbg !17
  %219 = insertelement <8 x i32> %218, i32 %191, i64 4, !dbg !17
  %220 = insertelement <8 x i32> %219, i32 %193, i64 5, !dbg !17
  %221 = insertelement <8 x i32> %220, i32 %195, i64 6, !dbg !17
  %222 = insertelement <8 x i32> %221, i32 %197, i64 7, !dbg !17
  %223 = bitcast <8 x i32> %222 to <8 x float>, !dbg !17
  %224 = insertelement <8 x i32> poison, i32 %175, i64 0, !dbg !19
  %225 = insertelement <8 x i32> %224, i32 %186, i64 1, !dbg !19
  %226 = insertelement <8 x i32> %225, i32 %188, i64 2, !dbg !19
  %227 = insertelement <8 x i32> %226, i32 %190, i64 3, !dbg !19
  %228 = insertelement <8 x i32> %227, i32 %192, i64 4, !dbg !19
  %229 = insertelement <8 x i32> %228, i32 %194, i64 5, !dbg !19
  %230 = insertelement <8 x i32> %229, i32 %196, i64 6, !dbg !19
  %231 = insertelement <8 x i32> %230, i32 %198, i64 7, !dbg !19
  %232 = bitcast <8 x i32> %231 to <8 x float>, !dbg !19
  %233 = fadd <8 x float> %223, %232, !dbg !34
  %234 = fsub <8 x float> %233, %184, !dbg !35
  %235 = insertelement <8 x i32> poison, i32 %199, i64 0, !dbg !30
  %236 = insertelement <8 x i32> %235, i32 %200, i64 1, !dbg !30
  %237 = insertelement <8 x i32> %236, i32 %201, i64 2, !dbg !30
  %238 = insertelement <8 x i32> %237, i32 %202, i64 3, !dbg !30
  %239 = insertelement <8 x i32> %238, i32 %203, i64 4, !dbg !30
  %240 = insertelement <8 x i32> %239, i32 %204, i64 5, !dbg !30
  %241 = insertelement <8 x i32> %240, i32 %205, i64 6, !dbg !30
  %242 = insertelement <8 x i32> %241, i32 %206, i64 7, !dbg !30
  %243 = bitcast <8 x i32> %242 to <8 x float>, !dbg !30
  %244 = insertelement <8 x i32> poison, i32 %207, i64 0, !dbg !28
  %245 = insertelement <8 x i32> %244, i32 %208, i64 1, !dbg !28
  %246 = insertelement <8 x i32> %245, i32 %209, i64 2, !dbg !28
  %247 = insertelement <8 x i32> %246, i32 %210, i64 3, !dbg !28
  %248 = insertelement <8 x i32> %247, i32 %211, i64 4, !dbg !28
  %249 = insertelement <8 x i32> %248, i32 %212, i64 5, !dbg !28
  %250 = insertelement <8 x i32> %249, i32 %213, i64 6, !dbg !28
  %251 = insertelement <8 x i32> %250, i32 %214, i64 7, !dbg !28
  %252 = bitcast <8 x i32> %251 to <8 x float>, !dbg !28
  %253 = insertelement <8 x float> poison, float %.0.i20, i64 0, !dbg !36
  %254 = insertelement <8 x float> %253, float %.0.i17, i64 1, !dbg !36
  %255 = insertelement <8 x float> %254, float %.0.i14, i64 2, !dbg !36
  %256 = insertelement <8 x float> %255, float %.0.i11, i64 3, !dbg !36
  %257 = insertelement <8 x float> %256, float %.0.i8, i64 4, !dbg !36
  %258 = insertelement <8 x float> %257, float %.0.i5, i64 5, !dbg !36
  %259 = insertelement <8 x float> %258, float %.0.i2, i64 6, !dbg !36
  %260 = insertelement <8 x float> %259, float %.0.i, i64 7, !dbg !36
  %261 = fmul <8 x float> %234, %260, !dbg !36
  %262 = fmul <8 x float> %261, %252, !dbg !37
  %263 = fadd <8 x float> %262, %243, !dbg !38
  %264 = fcmp olt <8 x float> %263, zeroinitializer, !dbg !39
  %265 = extractelement <8 x i1> %264, i64 7, !dbg !43
  %266 = extractelement <8 x i1> %264, i64 6, !dbg !43
  %267 = extractelement <8 x i1> %264, i64 5, !dbg !43
  %268 = extractelement <8 x i1> %264, i64 4, !dbg !43
  %269 = extractelement <8 x i1> %264, i64 3, !dbg !43
  %270 = extractelement <8 x i1> %264, i64 2, !dbg !43
  %271 = extractelement <8 x i1> %264, i64 1, !dbg !43
  %272 = extractelement <8 x i1> %264, i64 0, !dbg !43
  %273 = getelementptr float, ptr addrspace(1) %6, i64 %32, !dbg !44
  %274 = getelementptr float, ptr addrspace(1) %6, i64 %34, !dbg !44
  %bc = bitcast <8 x float> %263 to <8 x i32>, !dbg !45
  %275 = extractelement <8 x i32> %bc, i64 7, !dbg !45
  %276 = select i1 %265, i32 0, i32 %275, !dbg !43
  %bc36 = bitcast <8 x float> %263 to <8 x i32>, !dbg !45
  %277 = extractelement <8 x i32> %bc36, i64 6, !dbg !45
  %278 = select i1 %266, i32 0, i32 %277, !dbg !43
  %bc37 = bitcast <8 x float> %263 to <8 x i32>, !dbg !45
  %279 = extractelement <8 x i32> %bc37, i64 5, !dbg !45
  %280 = select i1 %267, i32 0, i32 %279, !dbg !43
  %bc38 = bitcast <8 x float> %263 to <8 x i32>, !dbg !45
  %281 = extractelement <8 x i32> %bc38, i64 4, !dbg !45
  %282 = select i1 %268, i32 0, i32 %281, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %276, i32 %278, i32 %280, i32 %282, ptr addrspace(1) %273, i1 true) #3, !dbg !45
  %bc39 = bitcast <8 x float> %263 to <8 x i32>, !dbg !45
  %283 = extractelement <8 x i32> %bc39, i64 3, !dbg !45
  %284 = select i1 %269, i32 0, i32 %283, !dbg !43
  %bc40 = bitcast <8 x float> %263 to <8 x i32>, !dbg !45
  %285 = extractelement <8 x i32> %bc40, i64 2, !dbg !45
  %286 = select i1 %270, i32 0, i32 %285, !dbg !43
  %bc41 = bitcast <8 x float> %263 to <8 x i32>, !dbg !45
  %287 = extractelement <8 x i32> %bc41, i64 1, !dbg !45
  %288 = select i1 %271, i32 0, i32 %287, !dbg !43
  %bc42 = bitcast <8 x float> %263 to <8 x i32>, !dbg !45
  %289 = extractelement <8 x i32> %bc42, i64 0, !dbg !45
  %290 = select i1 %272, i32 0, i32 %289, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %284, i32 %286, i32 %288, i32 %290, ptr addrspace(1) %274, i1 true) #3, !dbg !45
  ret void, !dbg !46
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cj6lepg75wasgse4glx6zxmwymloy3ean53uvgokkshicxobjus7.py", directory: "inductor_cache/j6")
!4 = !{ptr @triton_poi_fused_native_group_norm_relu_11, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_native_group_norm_relu_11, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_native_group_norm_relu_11", linkageName: "triton_poi_fused_native_group_norm_relu_11", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 19, scope: !7)
!16 = !DILocation(line: 27, column: 30, scope: !7)
!17 = !DILocation(line: 27, column: 35, scope: !7)
!18 = !DILocation(line: 28, column: 30, scope: !7)
!19 = !DILocation(line: 28, column: 35, scope: !7)
!20 = !DILocation(line: 29, column: 32, scope: !7)
!21 = !DILocation(line: 29, column: 44, scope: !7)
!22 = !DILocation(line: 29, column: 38, scope: !7)
!23 = !DILocation(line: 29, column: 30, scope: !7)
!24 = !DILocation(line: 29, column: 50, scope: !7)
!25 = !DILocation(line: 30, column: 30, scope: !7)
!26 = !DILocation(line: 30, column: 50, scope: !7)
!27 = !DILocation(line: 31, column: 31, scope: !7)
!28 = !DILocation(line: 31, column: 36, scope: !7)
!29 = !DILocation(line: 32, column: 31, scope: !7)
!30 = !DILocation(line: 32, column: 36, scope: !7)
!31 = !DILocation(line: 36, column: 18, scope: !7)
!32 = !DILocation(line: 38, column: 18, scope: !7)
!33 = !DILocation(line: 39, column: 28, scope: !7)
!34 = !DILocation(line: 33, column: 18, scope: !7)
!35 = !DILocation(line: 34, column: 18, scope: !7)
!36 = !DILocation(line: 40, column: 19, scope: !7)
!37 = !DILocation(line: 41, column: 20, scope: !7)
!38 = !DILocation(line: 42, column: 20, scope: !7)
!39 = !DILocation(line: 118, column: 15, scope: !40, inlinedAt: !42)
!40 = distinct !DILexicalBlockFile(scope: !7, file: !41, discriminator: 0)
!41 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!42 = !DILocation(line: 44, column: 42, scope: !7)
!43 = !DILocation(line: 121, column: 29, scope: !40, inlinedAt: !42)
!44 = !DILocation(line: 45, column: 25, scope: !7)
!45 = !DILocation(line: 45, column: 37, scope: !7)
!46 = !DILocation(line: 45, column: 4, scope: !7)
