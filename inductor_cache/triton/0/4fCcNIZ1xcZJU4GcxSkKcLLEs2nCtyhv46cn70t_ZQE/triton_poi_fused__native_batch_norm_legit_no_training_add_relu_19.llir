; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_19(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %7 = shl i32 %6, 9, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 1, !dbg !12
  %10 = and i32 %9, 510, !dbg !12
  %11 = or disjoint i32 %7, %10, !dbg !13
  %12 = srem i32 %11, 768, !dbg !14
  %13 = sext i32 %11 to i64, !dbg !15
  %14 = getelementptr float, ptr addrspace(1) %0, i64 %13, !dbg !15
  %15 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %14, i1 true) #3, !dbg !16
  %16 = getelementptr float, ptr addrspace(1) %1, i64 %13, !dbg !17
  %17 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %16, i1 true) #3, !dbg !18
  %18 = sext i32 %12 to i64, !dbg !19
  %19 = getelementptr float, ptr addrspace(1) %2, i64 %18, !dbg !19
  %20 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %19, i1 true) #3, !dbg !20
  %21 = getelementptr float, ptr addrspace(1) %3, i64 %18, !dbg !21
  %22 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %21, i1 true) #3, !dbg !22
  %23 = extractvalue { i32, i32 } %22, 0, !dbg !22
  %24 = extractvalue { i32, i32 } %22, 1, !dbg !22
  %25 = bitcast i32 %23 to float, !dbg !22
  %26 = bitcast i32 %24 to float, !dbg !22
  %27 = fadd float %25, 0x3EE4F8B580000000, !dbg !23
  %28 = fadd float %26, 0x3EE4F8B580000000, !dbg !23
  %29 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !24
  %.not.i = icmp eq i32 %29, 0, !dbg !24
  %30 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !24
  %.not1.i = icmp eq i32 %30, 0, !dbg !24
  br i1 %.not.i, label %36, label %31, !dbg !24

31:                                               ; preds = %5
  br i1 %.not1.i, label %34, label %32, !dbg !24

32:                                               ; preds = %31
  %33 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %27) #3, !dbg !24
  br label %__nv_sqrtf.exit, !dbg !24

34:                                               ; preds = %31
  %35 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %27) #3, !dbg !24
  br label %__nv_sqrtf.exit, !dbg !24

36:                                               ; preds = %5
  br i1 %.not1.i, label %39, label %37, !dbg !24

37:                                               ; preds = %36
  %38 = tail call float @llvm.nvvm.sqrt.rn.f(float %27) #3, !dbg !24
  br label %__nv_sqrtf.exit, !dbg !24

39:                                               ; preds = %36
  %40 = tail call float @llvm.nvvm.sqrt.approx.f(float %27) #3, !dbg !24
  br label %__nv_sqrtf.exit, !dbg !24

__nv_sqrtf.exit:                                  ; preds = %32, %34, %37, %39
  %.0.i = phi float [ %33, %32 ], [ %35, %34 ], [ %38, %37 ], [ %40, %39 ], !dbg !24
  %41 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !24
  %.not.i1 = icmp eq i32 %41, 0, !dbg !24
  %42 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !24
  %.not1.i4 = icmp eq i32 %42, 0, !dbg !24
  br i1 %.not.i1, label %48, label %43, !dbg !24

43:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %46, label %44, !dbg !24

44:                                               ; preds = %43
  %45 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %28) #3, !dbg !24
  br label %__nv_sqrtf.exit5, !dbg !24

46:                                               ; preds = %43
  %47 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %28) #3, !dbg !24
  br label %__nv_sqrtf.exit5, !dbg !24

48:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %51, label %49, !dbg !24

49:                                               ; preds = %48
  %50 = tail call float @llvm.nvvm.sqrt.rn.f(float %28) #3, !dbg !24
  br label %__nv_sqrtf.exit5, !dbg !24

51:                                               ; preds = %48
  %52 = tail call float @llvm.nvvm.sqrt.approx.f(float %28) #3, !dbg !24
  br label %__nv_sqrtf.exit5, !dbg !24

__nv_sqrtf.exit5:                                 ; preds = %44, %46, %49, %51
  %.0.i3 = phi float [ %45, %44 ], [ %47, %46 ], [ %50, %49 ], [ %52, %51 ], !dbg !24
  %53 = extractvalue { i32, i32 } %15, 1, !dbg !16
  %54 = bitcast i32 %53 to float, !dbg !16
  %55 = extractvalue { i32, i32 } %17, 1, !dbg !18
  %56 = bitcast i32 %55 to float, !dbg !18
  %57 = fadd float %54, %56, !dbg !25
  %58 = extractvalue { i32, i32 } %20, 1, !dbg !20
  %59 = bitcast i32 %58 to float, !dbg !20
  %60 = fsub float %57, %59, !dbg !26
  %61 = extractvalue { i32, i32 } %15, 0, !dbg !16
  %62 = bitcast i32 %61 to float, !dbg !16
  %63 = extractvalue { i32, i32 } %17, 0, !dbg !18
  %64 = bitcast i32 %63 to float, !dbg !18
  %65 = fadd float %62, %64, !dbg !25
  %66 = extractvalue { i32, i32 } %20, 0, !dbg !20
  %67 = bitcast i32 %66 to float, !dbg !20
  %68 = fsub float %65, %67, !dbg !26
  %69 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !27
  %70 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !27
  %71 = fmul float %68, %69, !dbg !28
  %72 = fmul float %60, %70, !dbg !28
  %73 = fcmp olt float %71, 0.000000e+00, !dbg !29
  %74 = fcmp olt float %72, 0.000000e+00, !dbg !29
  %75 = select i1 %73, float 0.000000e+00, float %71, !dbg !33
  %76 = select i1 %74, float 0.000000e+00, float %72, !dbg !33
  %77 = bitcast float %75 to i32, !dbg !34
  %78 = bitcast float %76 to i32, !dbg !34
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %77, i32 %78, ptr addrspace(1) %14, i1 true) #3, !dbg !34
  ret void, !dbg !35
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cacwbk7t2r5e3dx2p65ubdorl2a3fqyyjopk4vwxv3yddjkbwixk.py", directory: "inductor_cache/ac")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_19, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_19, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_relu_19", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_relu_19", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 26, column: 39, scope: !7)
!17 = !DILocation(line: 27, column: 30, scope: !7)
!18 = !DILocation(line: 27, column: 35, scope: !7)
!19 = !DILocation(line: 28, column: 30, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 29, column: 30, scope: !7)
!22 = !DILocation(line: 29, column: 35, scope: !7)
!23 = !DILocation(line: 33, column: 18, scope: !7)
!24 = !DILocation(line: 34, column: 26, scope: !7)
!25 = !DILocation(line: 30, column: 18, scope: !7)
!26 = !DILocation(line: 31, column: 18, scope: !7)
!27 = !DILocation(line: 36, column: 19, scope: !7)
!28 = !DILocation(line: 39, column: 19, scope: !7)
!29 = !DILocation(line: 118, column: 15, scope: !30, inlinedAt: !32)
!30 = distinct !DILexicalBlockFile(scope: !7, file: !31, discriminator: 0)
!31 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!32 = !DILocation(line: 41, column: 42, scope: !7)
!33 = !DILocation(line: 121, column: 29, scope: !30, inlinedAt: !32)
!34 = !DILocation(line: 42, column: 40, scope: !7)
!35 = !DILocation(line: 42, column: 4, scope: !7)
