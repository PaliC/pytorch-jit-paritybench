; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_add_15(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %8 = shl i32 %7, 1, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = lshr i32 %9, 6, !dbg !12
  %.lobit = and i32 %10, 1, !dbg !12
  %11 = or disjoint i32 %8, %.lobit, !dbg !13
  %12 = icmp slt i32 %11, 256, !dbg !14
  %13 = icmp slt i32 %8, 256, !dbg !14
  %14 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %15 = shl i32 %14, 8, !dbg !16
  %16 = shl i32 %9, 2, !dbg !17
  %17 = and i32 %16, 252, !dbg !17
  %18 = and i32 %9, 127, !dbg !17
  %19 = shl i32 %9, 1, !dbg !17
  %20 = and i32 %19, 254, !dbg !17
  %21 = or disjoint i32 %15, %17, !dbg !18
  %22 = or disjoint i32 %15, %18, !dbg !18
  %23 = or disjoint i32 %22, 128, !dbg !18
  %24 = or disjoint i32 %15, %20, !dbg !18
  %25 = icmp slt i32 %21, 192, !dbg !19
  %26 = icmp slt i32 %22, 192, !dbg !19
  %27 = icmp slt i32 %23, 192, !dbg !19
  %28 = icmp slt i32 %24, 192, !dbg !19
  %.frozen = freeze i32 %8, !dbg !20
  %29 = sdiv i32 %.frozen, 64, !dbg !20
  %30 = mul i32 %29, 64, !dbg !21
  %.decomposed = sub i32 %.frozen, %30, !dbg !21
  %31 = mul i32 %11, 192, !dbg !22
  %32 = add i32 %21, %31, !dbg !23
  %33 = sext i32 %32 to i64, !dbg !24
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !24
  %35 = and i1 %12, %25, !dbg !25
  %36 = and i1 %13, %26, !dbg !25
  %37 = and i1 %27, %13, !dbg !25
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %34, i1 %35) #2, !dbg !26
  %39 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !26
  %40 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !26
  %41 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !26
  %42 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !26
  %43 = bitcast i32 %39 to float, !dbg !26
  %44 = bitcast i32 %40 to float, !dbg !26
  %45 = bitcast i32 %41 to float, !dbg !26
  %46 = bitcast i32 %42 to float, !dbg !26
  %47 = sext i32 %24 to i64, !dbg !27
  %48 = getelementptr float, ptr addrspace(1) %1, i64 %47, !dbg !27
  %49 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %48, i1 %28) #2, !dbg !28
  %50 = extractvalue { i32, i32 } %49, 0, !dbg !28
  %51 = extractvalue { i32, i32 } %49, 1, !dbg !28
  %52 = getelementptr float, ptr addrspace(1) %2, i64 %33, !dbg !29
  %53 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %52, i1 %35) #2, !dbg !30
  %54 = extractvalue { i32, i32, i32, i32 } %53, 0, !dbg !30
  %55 = extractvalue { i32, i32, i32, i32 } %53, 1, !dbg !30
  %56 = extractvalue { i32, i32, i32, i32 } %53, 2, !dbg !30
  %57 = extractvalue { i32, i32, i32, i32 } %53, 3, !dbg !30
  %58 = bitcast i32 %54 to float, !dbg !30
  %59 = bitcast i32 %55 to float, !dbg !30
  %60 = bitcast i32 %56 to float, !dbg !30
  %61 = bitcast i32 %57 to float, !dbg !30
  %62 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %20, !dbg !31
  %63 = insertelement <1 x i32> poison, i32 %50, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %62, <1 x i32> %63, i1 true) #2, !dbg !31
  %64 = or disjoint i32 %20, 1, !dbg !31
  %65 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %64, !dbg !31
  %66 = insertelement <1 x i32> poison, i32 %51, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %65, <1 x i32> %66, i1 true) #2, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %67 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %17, !dbg !31
  %68 = load float, ptr addrspace(3) %67, align 16, !dbg !31
  %69 = or disjoint i32 %17, 1, !dbg !31
  %70 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %69, !dbg !31
  %71 = load float, ptr addrspace(3) %70, align 4, !dbg !31
  %72 = or disjoint i32 %17, 2, !dbg !31
  %73 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %72, !dbg !31
  %74 = load float, ptr addrspace(3) %73, align 8, !dbg !31
  %75 = or disjoint i32 %17, 3, !dbg !31
  %76 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %75, !dbg !31
  %77 = load float, ptr addrspace(3) %76, align 4, !dbg !31
  %78 = fmul float %68, %58, !dbg !31
  %79 = fmul float %71, %59, !dbg !31
  %80 = fmul float %74, %60, !dbg !31
  %81 = fmul float %77, %61, !dbg !31
  %82 = fadd float %78, %43, !dbg !32
  %83 = fadd float %79, %44, !dbg !32
  %84 = fadd float %80, %45, !dbg !32
  %85 = fadd float %81, %46, !dbg !32
  %86 = shl i32 %22, 6, !dbg !33
  %87 = shl i32 %23, 6, !dbg !33
  %88 = mul i32 %29, 12288, !dbg !34
  %89 = add i32 %88, %.decomposed, !dbg !35
  %90 = add i32 %89, %86, !dbg !36
  %91 = add i32 %89, %87, !dbg !36
  %92 = sext i32 %90 to i64, !dbg !37
  %93 = getelementptr float, ptr addrspace(1) %3, i64 %92, !dbg !37
  %94 = sext i32 %91 to i64, !dbg !37
  %95 = getelementptr float, ptr addrspace(1) %3, i64 %94, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %96 = shl i32 %9, 3, !dbg !38
  %97 = and i32 %96, 504, !dbg !38
  %98 = or disjoint i32 %97, %.lobit, !dbg !38
  %99 = getelementptr float, ptr addrspace(3) @global_smem, i32 %97, !dbg !38
  %100 = getelementptr float, ptr addrspace(3) %99, i32 %98, !dbg !38
  %101 = bitcast float %82 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %100, <1 x i32> %101, i1 true) #2, !dbg !38
  %102 = or disjoint i32 %98, 2, !dbg !38
  %103 = or disjoint i32 %97, 2, !dbg !38
  %104 = getelementptr float, ptr addrspace(3) @global_smem, i32 %103, !dbg !38
  %105 = getelementptr float, ptr addrspace(3) %104, i32 %102, !dbg !38
  %106 = bitcast float %83 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %105, <1 x i32> %106, i1 true) #2, !dbg !38
  %107 = or disjoint i32 %98, 4, !dbg !38
  %108 = or disjoint i32 %97, 4, !dbg !38
  %109 = getelementptr float, ptr addrspace(3) @global_smem, i32 %108, !dbg !38
  %110 = getelementptr float, ptr addrspace(3) %109, i32 %107, !dbg !38
  %111 = bitcast float %84 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %110, <1 x i32> %111, i1 true) #2, !dbg !38
  %112 = or disjoint i32 %98, 6, !dbg !38
  %113 = or disjoint i32 %97, 6, !dbg !38
  %114 = getelementptr float, ptr addrspace(3) @global_smem, i32 %113, !dbg !38
  %115 = getelementptr float, ptr addrspace(3) %114, i32 %112, !dbg !38
  %116 = bitcast float %85 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %115, <1 x i32> %116, i1 true) #2, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %.idx = shl nuw nsw i32 %20, 3, !dbg !38
  %117 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !38
  %118 = shl nuw nsw i32 %20, 1, !dbg !38
  %119 = or disjoint i32 %118, 512, !dbg !38
  %120 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %119, !dbg !38
  %121 = load <2 x i32>, ptr addrspace(3) %120, align 16, !dbg !38
  %.extract = load i32, ptr addrspace(3) %117, align 16, !dbg !38
  %122 = getelementptr inbounds i8, ptr addrspace(3) %117, i32 4, !dbg !38
  %.extract5 = load i32, ptr addrspace(3) %122, align 4, !dbg !38
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract, i32 %.extract5, ptr addrspace(1) %93, i1 %36) #2, !dbg !38
  %.extract6 = extractelement <2 x i32> %121, i64 0, !dbg !38
  %.extract7 = extractelement <2 x i32> %121, i64 1, !dbg !38
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract6, i32 %.extract7, ptr addrspace(1) %95, i1 %37) #2, !dbg !38
  ret void, !dbg !39
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cvayp6s5bavubqbryraprshz53yzxvofehvouejxbfstdd5lesxp.py", directory: "inductor_cache/va")
!4 = !{ptr @triton_poi_fused_add_15, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_15, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_15", linkageName: "triton_poi_fused_add_15", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 31, column: 19, scope: !7)
!21 = !DILocation(line: 30, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 39, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 30, scope: !7)
!25 = !DILocation(line: 32, column: 52, scope: !7)
!26 = !DILocation(line: 32, column: 44, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 33, column: 35, scope: !7)
!29 = !DILocation(line: 34, column: 30, scope: !7)
!30 = !DILocation(line: 34, column: 44, scope: !7)
!31 = !DILocation(line: 35, column: 18, scope: !7)
!32 = !DILocation(line: 36, column: 18, scope: !7)
!33 = !DILocation(line: 37, column: 33, scope: !7)
!34 = !DILocation(line: 37, column: 44, scope: !7)
!35 = !DILocation(line: 37, column: 30, scope: !7)
!36 = !DILocation(line: 37, column: 38, scope: !7)
!37 = !DILocation(line: 37, column: 25, scope: !7)
!38 = !DILocation(line: 37, column: 55, scope: !7)
!39 = !DILocation(line: 37, column: 4, scope: !7)
