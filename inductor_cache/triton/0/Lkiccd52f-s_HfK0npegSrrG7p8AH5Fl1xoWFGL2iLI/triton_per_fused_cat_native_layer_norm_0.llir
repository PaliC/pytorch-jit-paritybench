; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused_cat_native_layer_norm_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %11 = icmp slt i32 %10, 16, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = and i32 %12, 15, !dbg !12
  %14 = zext nneg i32 %13 to i64, !dbg !13
  %15 = getelementptr float, ptr addrspace(1) %2, i64 %14, !dbg !13
  %16 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %15, i1 true) #5, !dbg !14
  %17 = getelementptr float, ptr addrspace(1) %3, i64 %14, !dbg !15
  %18 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %17, i1 true) #5, !dbg !16
  %19 = icmp samesign ult i32 %13, 4, !dbg !17
  %20 = shl i32 %10, 4, !dbg !18
  %21 = or disjoint i32 %20, %13, !dbg !19
  %22 = sext i32 %21 to i64, !dbg !20
  %23 = getelementptr float, ptr addrspace(1) %1, i64 %22, !dbg !20
  %24 = and i1 %19, %11, !dbg !21
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %23, i1 %24, i32 0, i1 %24) #5, !dbg !22
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %23, i1 %24, i32 0, i1 %24) #5, !dbg !22
  %27 = and i32 %12, 12, !dbg !23
  %28 = icmp eq i32 %27, 4, !dbg !23
  %29 = and i1 %28, %11, !dbg !24
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %23, i1 %29, i32 0, i1 %29) #5, !dbg !25
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %23, i1 %29, i32 0, i1 %29) #5, !dbg !25
  %32 = icmp eq i32 %27, 8, !dbg !26
  %33 = and i1 %32, %11, !dbg !27
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %23, i1 %33, i32 0, i1 %33) #5, !dbg !28
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %23, i1 %33, i32 0, i1 %33) #5, !dbg !28
  %36 = icmp samesign ugt i32 %13, 11, !dbg !29
  %37 = and i1 %36, %11, !dbg !30
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %23, i1 %37, i32 0, i1 %37) #5, !dbg !31
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %23, i1 %37, i32 0, i1 %37) #5, !dbg !31
  %.v = select i1 %32, i32 %34, i32 %38, !dbg !32
  %.v1 = select i1 %32, i32 %35, i32 %39, !dbg !32
  %.v2 = select i1 %28, i32 %30, i32 %.v, !dbg !33
  %.v3 = select i1 %28, i32 %31, i32 %.v1, !dbg !33
  %.v4 = select i1 %19, i32 %25, i32 %.v2, !dbg !34
  %40 = bitcast i32 %.v4 to float, !dbg !34
  %.v5 = select i1 %19, i32 %26, i32 %.v3, !dbg !34
  %41 = bitcast i32 %.v5 to float, !dbg !34
  %42 = select i1 %11, float %40, float 0.000000e+00, !dbg !35
  %43 = select i1 %11, float %41, float 0.000000e+00, !dbg !35
  %44 = bitcast float %42 to i32, !dbg !36
  %45 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %44, i32 8, i32 31), !dbg !36
  %46 = bitcast i32 %45 to float, !dbg !36
  %47 = fadd float %42, %46, !dbg !40
  %48 = bitcast float %47 to i32, !dbg !36
  %49 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %48, i32 4, i32 31), !dbg !36
  %50 = bitcast i32 %49 to float, !dbg !36
  %51 = fadd float %47, %50, !dbg !40
  %52 = bitcast float %51 to i32, !dbg !36
  %53 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %52, i32 2, i32 31), !dbg !36
  %54 = bitcast i32 %53 to float, !dbg !36
  %55 = fadd float %51, %54, !dbg !40
  %56 = bitcast float %55 to i32, !dbg !36
  %57 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %56, i32 1, i32 31), !dbg !36
  %58 = bitcast i32 %57 to float, !dbg !36
  %59 = fadd float %55, %58, !dbg !40
  %60 = bitcast float %43 to i32, !dbg !36
  %61 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %60, i32 8, i32 31), !dbg !36
  %62 = bitcast i32 %61 to float, !dbg !36
  %63 = fadd float %43, %62, !dbg !40
  %64 = bitcast float %63 to i32, !dbg !36
  %65 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %64, i32 4, i32 31), !dbg !36
  %66 = bitcast i32 %65 to float, !dbg !36
  %67 = fadd float %63, %66, !dbg !40
  %68 = bitcast float %67 to i32, !dbg !36
  %69 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %68, i32 2, i32 31), !dbg !36
  %70 = bitcast i32 %69 to float, !dbg !36
  %71 = fadd float %67, %70, !dbg !40
  %72 = bitcast float %71 to i32, !dbg !36
  %73 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %72, i32 1, i32 31), !dbg !36
  %74 = bitcast i32 %73 to float, !dbg !36
  %75 = fadd float %71, %74, !dbg !40
  %76 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %59, float 1.600000e+01) #5, !dbg !42
  %77 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %75, float 1.600000e+01) #5, !dbg !42
  %78 = fsub float %40, %76, !dbg !43
  %79 = fsub float %41, %77, !dbg !43
  %80 = fmul float %78, %78, !dbg !44
  %81 = fmul float %79, %79, !dbg !44
  %82 = select i1 %11, float %80, float 0.000000e+00, !dbg !45
  %83 = select i1 %11, float %81, float 0.000000e+00, !dbg !45
  %84 = bitcast float %82 to i32, !dbg !46
  %85 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %84, i32 8, i32 31), !dbg !46
  %86 = bitcast i32 %85 to float, !dbg !46
  %87 = fadd float %82, %86, !dbg !48
  %88 = bitcast float %87 to i32, !dbg !46
  %89 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %88, i32 4, i32 31), !dbg !46
  %90 = bitcast i32 %89 to float, !dbg !46
  %91 = fadd float %87, %90, !dbg !48
  %92 = bitcast float %91 to i32, !dbg !46
  %93 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %92, i32 2, i32 31), !dbg !46
  %94 = bitcast i32 %93 to float, !dbg !46
  %95 = fadd float %91, %94, !dbg !48
  %96 = bitcast float %95 to i32, !dbg !46
  %97 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %96, i32 1, i32 31), !dbg !46
  %98 = bitcast i32 %97 to float, !dbg !46
  %99 = fadd float %95, %98, !dbg !48
  %100 = bitcast float %83 to i32, !dbg !46
  %101 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %100, i32 8, i32 31), !dbg !46
  %102 = bitcast i32 %101 to float, !dbg !46
  %103 = fadd float %83, %102, !dbg !48
  %104 = bitcast float %103 to i32, !dbg !46
  %105 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %104, i32 4, i32 31), !dbg !46
  %106 = bitcast i32 %105 to float, !dbg !46
  %107 = fadd float %103, %106, !dbg !48
  %108 = bitcast float %107 to i32, !dbg !46
  %109 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %108, i32 2, i32 31), !dbg !46
  %110 = bitcast i32 %109 to float, !dbg !46
  %111 = fadd float %107, %110, !dbg !48
  %112 = bitcast float %111 to i32, !dbg !46
  %113 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %112, i32 1, i32 31), !dbg !46
  %114 = bitcast i32 %113 to float, !dbg !46
  %115 = fadd float %111, %114, !dbg !48
  %116 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %99, float 1.600000e+01) #5, !dbg !49
  %117 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %115, float 1.600000e+01) #5, !dbg !49
  %118 = fadd float %116, 0x3EE4F8B580000000, !dbg !50
  %119 = fadd float %117, 0x3EE4F8B580000000, !dbg !50
  %120 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !51
  %.not.i = icmp eq i32 %120, 0, !dbg !51
  br i1 %.not.i, label %123, label %121, !dbg !51

121:                                              ; preds = %9
  %122 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %118), !dbg !51
  br label %__nv_rsqrtf.exit, !dbg !51

123:                                              ; preds = %9
  %124 = tail call float @llvm.nvvm.rsqrt.approx.f(float %118), !dbg !51
  br label %__nv_rsqrtf.exit, !dbg !51

__nv_rsqrtf.exit:                                 ; preds = %121, %123
  %.0.i = phi float [ %122, %121 ], [ %124, %123 ], !dbg !51
  %125 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !51
  %.not.i6 = icmp eq i32 %125, 0, !dbg !51
  br i1 %.not.i6, label %128, label %126, !dbg !51

126:                                              ; preds = %__nv_rsqrtf.exit
  %127 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %119), !dbg !51
  br label %__nv_rsqrtf.exit8, !dbg !51

128:                                              ; preds = %__nv_rsqrtf.exit
  %129 = tail call float @llvm.nvvm.rsqrt.approx.f(float %119), !dbg !51
  br label %__nv_rsqrtf.exit8, !dbg !51

__nv_rsqrtf.exit8:                                ; preds = %126, %128
  %.0.i7 = phi float [ %127, %126 ], [ %129, %128 ], !dbg !51
  %130 = bitcast i32 %18 to float, !dbg !16
  %131 = bitcast i32 %16 to float, !dbg !14
  %132 = fmul float %78, %.0.i, !dbg !52
  %133 = fmul float %132, %131, !dbg !53
  %134 = fadd float %133, %130, !dbg !54
  %135 = getelementptr float, ptr addrspace(1) %4, i64 %22, !dbg !55
  %136 = and i32 %12, 48, !dbg !56
  %137 = icmp eq i32 %136, 0, !dbg !56
  %138 = and i1 %137, %11, !dbg !56
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %.v4, ptr addrspace(1) %135, i1 %138) #5, !dbg !56
  tail call void @llvm.nvvm.barrier0(), !dbg !57
  %139 = sext i32 %10 to i64, !dbg !58
  %140 = getelementptr float, ptr addrspace(1) %0, i64 %139, !dbg !58
  %urem = and i32 %12, 63, !dbg !59
  %141 = icmp eq i32 %urem, 0, !dbg !59
  %142 = bitcast float %.0.i7 to i32, !dbg !59
  %143 = and i1 %141, %11, !dbg !59
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %142, ptr addrspace(1) %140, i1 %143) #5, !dbg !59
  %144 = getelementptr float, ptr addrspace(1) %6, i64 %22, !dbg !60
  %145 = bitcast float %134 to i32, !dbg !61
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %145, ptr addrspace(1) %144, i1 %138) #5, !dbg !61
  %146 = getelementptr float, ptr addrspace(1) %5, i64 %139, !dbg !62
  %147 = bitcast float %77 to i32, !dbg !63
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %147, ptr addrspace(1) %146, i1 %143) #5, !dbg !63
  ret void, !dbg !64
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "crz36ccqgiyb2nm4fbsqgqt6k2nolo7caqesm3sybn2hop6h7oqt.py", directory: "inductor_cache/rz")
!4 = !{ptr @triton_per_fused_cat_native_layer_norm_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_cat_native_layer_norm_0, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_cat_native_layer_norm_0", linkageName: "triton_per_fused_cat_native_layer_norm_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 21, scope: !7)
!12 = !DILocation(line: 26, column: 34, scope: !7)
!13 = !DILocation(line: 31, column: 31, scope: !7)
!14 = !DILocation(line: 31, column: 36, scope: !7)
!15 = !DILocation(line: 32, column: 31, scope: !7)
!16 = !DILocation(line: 32, column: 36, scope: !7)
!17 = !DILocation(line: 37, column: 18, scope: !7)
!18 = !DILocation(line: 38, column: 33, scope: !7)
!19 = !DILocation(line: 38, column: 39, scope: !7)
!20 = !DILocation(line: 38, column: 30, scope: !7)
!21 = !DILocation(line: 38, column: 52, scope: !7)
!22 = !DILocation(line: 38, column: 45, scope: !7)
!23 = !DILocation(line: 42, column: 18, scope: !7)
!24 = !DILocation(line: 43, column: 64, scope: !7)
!25 = !DILocation(line: 43, column: 57, scope: !7)
!26 = !DILocation(line: 47, column: 20, scope: !7)
!27 = !DILocation(line: 48, column: 65, scope: !7)
!28 = !DILocation(line: 48, column: 57, scope: !7)
!29 = !DILocation(line: 49, column: 20, scope: !7)
!30 = !DILocation(line: 52, column: 67, scope: !7)
!31 = !DILocation(line: 52, column: 59, scope: !7)
!32 = !DILocation(line: 53, column: 35, scope: !7)
!33 = !DILocation(line: 54, column: 34, scope: !7)
!34 = !DILocation(line: 55, column: 33, scope: !7)
!35 = !DILocation(line: 59, column: 35, scope: !7)
!36 = !DILocation(line: 267, column: 36, scope: !37, inlinedAt: !39)
!37 = distinct !DILexicalBlockFile(scope: !7, file: !38, discriminator: 0)
!38 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!39 = !DILocation(line: 60, column: 26, scope: !7)
!40 = !DILocation(line: 256, column: 15, scope: !41, inlinedAt: !39)
!41 = distinct !DILexicalBlockFile(scope: !37, file: !38, discriminator: 0)
!42 = !DILocation(line: 63, column: 20, scope: !7)
!43 = !DILocation(line: 64, column: 20, scope: !7)
!44 = !DILocation(line: 65, column: 20, scope: !7)
!45 = !DILocation(line: 67, column: 35, scope: !7)
!46 = !DILocation(line: 267, column: 36, scope: !37, inlinedAt: !47)
!47 = !DILocation(line: 68, column: 26, scope: !7)
!48 = !DILocation(line: 256, column: 15, scope: !41, inlinedAt: !47)
!49 = !DILocation(line: 70, column: 20, scope: !7)
!50 = !DILocation(line: 72, column: 20, scope: !7)
!51 = !DILocation(line: 73, column: 28, scope: !7)
!52 = !DILocation(line: 75, column: 20, scope: !7)
!53 = !DILocation(line: 76, column: 20, scope: !7)
!54 = !DILocation(line: 77, column: 20, scope: !7)
!55 = !DILocation(line: 78, column: 25, scope: !7)
!56 = !DILocation(line: 78, column: 45, scope: !7)
!57 = !DILocation(line: 79, column: 4, scope: !7)
!58 = !DILocation(line: 80, column: 28, scope: !7)
!59 = !DILocation(line: 80, column: 40, scope: !7)
!60 = !DILocation(line: 81, column: 25, scope: !7)
!61 = !DILocation(line: 81, column: 45, scope: !7)
!62 = !DILocation(line: 82, column: 25, scope: !7)
!63 = !DILocation(line: 82, column: 37, scope: !7)
!64 = !DILocation(line: 82, column: 4, scope: !7)
