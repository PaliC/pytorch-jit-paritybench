; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_add_mean_rsub_sigmoid_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %6 = and i32 %5, 31, !dbg !10
  %7 = lshr i32 %5, 5, !dbg !10
  %8 = shl i32 %5, 2, !dbg !10
  %9 = and i32 %8, 252, !dbg !10
  %10 = zext nneg i32 %9 to i64, !dbg !11
  %11 = getelementptr float, ptr addrspace(1) %1, i64 %10, !dbg !11
  %12 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %11, i1 true) #3, !dbg !12
  %13 = extractvalue { i32, i32, i32, i32 } %12, 0, !dbg !12
  %14 = extractvalue { i32, i32, i32, i32 } %12, 1, !dbg !12
  %15 = extractvalue { i32, i32, i32, i32 } %12, 2, !dbg !12
  %16 = extractvalue { i32, i32, i32, i32 } %12, 3, !dbg !12
  %17 = bitcast i32 %13 to float, !dbg !12
  %18 = bitcast i32 %14 to float, !dbg !12
  %19 = bitcast i32 %15 to float, !dbg !12
  %20 = bitcast i32 %16 to float, !dbg !12
  %21 = getelementptr float, ptr addrspace(1) %2, i64 %10, !dbg !13
  %22 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %21, i1 true) #3, !dbg !14
  %23 = extractvalue { i32, i32, i32, i32 } %22, 0, !dbg !14
  %24 = extractvalue { i32, i32, i32, i32 } %22, 1, !dbg !14
  %25 = extractvalue { i32, i32, i32, i32 } %22, 2, !dbg !14
  %26 = extractvalue { i32, i32, i32, i32 } %22, 3, !dbg !14
  %27 = bitcast i32 %23 to float, !dbg !14
  %28 = bitcast i32 %24 to float, !dbg !14
  %29 = bitcast i32 %25 to float, !dbg !14
  %30 = bitcast i32 %26 to float, !dbg !14
  %31 = fsub float 0.000000e+00, %17, !dbg !15
  %32 = fsub float 0.000000e+00, %18, !dbg !15
  %33 = fsub float 0.000000e+00, %19, !dbg !15
  %34 = fsub float 0.000000e+00, %20, !dbg !15
  %35 = fmul float %31, 0x3FF7154760000000, !dbg !19
  %36 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %35) #3, !dbg !19
  %37 = fmul float %32, 0x3FF7154760000000, !dbg !19
  %38 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %37) #3, !dbg !19
  %39 = fmul float %33, 0x3FF7154760000000, !dbg !19
  %40 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %39) #3, !dbg !19
  %41 = fmul float %34, 0x3FF7154760000000, !dbg !19
  %42 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %41) #3, !dbg !19
  %43 = fadd float %36, 1.000000e+00, !dbg !20
  %44 = fadd float %38, 1.000000e+00, !dbg !20
  %45 = fadd float %40, 1.000000e+00, !dbg !20
  %46 = fadd float %42, 1.000000e+00, !dbg !20
  %47 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %43) #3, !dbg !21
  %48 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %44) #3, !dbg !21
  %49 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %45) #3, !dbg !21
  %50 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %46) #3, !dbg !21
  %51 = fsub float 1.000000e+00, %47, !dbg !22
  %52 = fsub float 1.000000e+00, %48, !dbg !22
  %53 = fsub float 1.000000e+00, %49, !dbg !22
  %54 = fsub float 1.000000e+00, %50, !dbg !22
  %55 = fsub float 0.000000e+00, %27, !dbg !23
  %56 = fsub float 0.000000e+00, %28, !dbg !23
  %57 = fsub float 0.000000e+00, %29, !dbg !23
  %58 = fsub float 0.000000e+00, %30, !dbg !23
  %59 = fmul float %55, 0x3FF7154760000000, !dbg !25
  %60 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %59) #3, !dbg !25
  %61 = fmul float %56, 0x3FF7154760000000, !dbg !25
  %62 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %61) #3, !dbg !25
  %63 = fmul float %57, 0x3FF7154760000000, !dbg !25
  %64 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %63) #3, !dbg !25
  %65 = fmul float %58, 0x3FF7154760000000, !dbg !25
  %66 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %65) #3, !dbg !25
  %67 = fadd float %60, 1.000000e+00, !dbg !26
  %68 = fadd float %62, 1.000000e+00, !dbg !26
  %69 = fadd float %64, 1.000000e+00, !dbg !26
  %70 = fadd float %66, 1.000000e+00, !dbg !26
  %71 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %67) #3, !dbg !27
  %72 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %68) #3, !dbg !27
  %73 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %69) #3, !dbg !27
  %74 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %70) #3, !dbg !27
  %75 = fadd float %51, %71, !dbg !28
  %76 = fadd float %52, %72, !dbg !28
  %77 = fadd float %53, %73, !dbg !28
  %78 = fadd float %54, %74, !dbg !28
  %79 = fadd float %75, %76, !dbg !29
  %80 = fadd float %79, %77, !dbg !29
  %81 = fadd float %80, %78, !dbg !29
  %82 = bitcast float %81 to i32, !dbg !32
  %83 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %82, i32 16, i32 31), !dbg !32
  %84 = bitcast i32 %83 to float, !dbg !32
  %85 = fadd float %81, %84, !dbg !29
  %86 = bitcast float %85 to i32, !dbg !32
  %87 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %86, i32 8, i32 31), !dbg !32
  %88 = bitcast i32 %87 to float, !dbg !32
  %89 = fadd float %85, %88, !dbg !29
  %90 = bitcast float %89 to i32, !dbg !32
  %91 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %90, i32 4, i32 31), !dbg !32
  %92 = bitcast i32 %91 to float, !dbg !32
  %93 = fadd float %89, %92, !dbg !29
  %94 = bitcast float %93 to i32, !dbg !32
  %95 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %94, i32 2, i32 31), !dbg !32
  %96 = bitcast i32 %95 to float, !dbg !32
  %97 = fadd float %93, %96, !dbg !29
  %98 = bitcast float %97 to i32, !dbg !32
  %99 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %98, i32 1, i32 31), !dbg !32
  %100 = bitcast i32 %99 to float, !dbg !32
  %101 = fadd float %97, %100, !dbg !29
  %102 = icmp eq i32 %6, 0, !dbg !32
  %103 = and i32 %7, 1, !dbg !32
  %104 = getelementptr float, ptr addrspace(3) @global_smem, i32 %103, !dbg !32
  %105 = bitcast float %101 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %104, <1 x i32> %105, i1 %102) #3, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %106 = icmp slt i32 %5, 2, !dbg !32
  %107 = getelementptr float, ptr addrspace(3) @global_smem, i32 %5, !dbg !32
  %108 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %107, i1 %106) #3, !dbg !32
  %109 = bitcast i32 %108 to float, !dbg !32
  %110 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %108, i32 1, i32 31), !dbg !32
  %111 = bitcast i32 %110 to float, !dbg !32
  %112 = fadd float %109, %111, !dbg !29
  %113 = and i32 %5, 1, !dbg !32
  %114 = icmp eq i32 %113, 0, !dbg !32
  %115 = and i1 %106, %114, !dbg !32
  %116 = bitcast float %112 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %107, <1 x i32> %116, i1 %115) #3, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %117 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !32
  %118 = fadd float %117, 0.000000e+00, !dbg !33
  %119 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %118, float 2.560000e+02) #3, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %urem = and i32 %5, 63, !dbg !39
  %120 = icmp eq i32 %urem, 0, !dbg !39
  %121 = bitcast float %119 to i32, !dbg !39
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %121, ptr addrspace(1) %0, i1 %120) #3, !dbg !39
  ret void, !dbg !40
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c4c7xojch3zc4ulhbrz4rdugfe4de2zh4wz2n2huey6kidjgtxzn.py", directory: "inductor_cache/4c")
!4 = !{ptr @triton_per_fused_add_mean_rsub_sigmoid_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_mean_rsub_sigmoid_0, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_mean_rsub_sigmoid_0", linkageName: "triton_per_fused_add_mean_rsub_sigmoid_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 27, column: 26, scope: !7)
!11 = !DILocation(line: 31, column: 30, scope: !7)
!12 = !DILocation(line: 31, column: 35, scope: !7)
!13 = !DILocation(line: 32, column: 30, scope: !7)
!14 = !DILocation(line: 32, column: 35, scope: !7)
!15 = !DILocation(line: 47, column: 30, scope: !16, inlinedAt: !18)
!16 = distinct !DILexicalBlockFile(scope: !7, file: !17, discriminator: 0)
!17 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!18 = !DILocation(line: 33, column: 22, scope: !7)
!19 = !DILocation(line: 47, column: 29, scope: !16, inlinedAt: !18)
!20 = !DILocation(line: 47, column: 20, scope: !16, inlinedAt: !18)
!21 = !DILocation(line: 47, column: 16, scope: !16, inlinedAt: !18)
!22 = !DILocation(line: 35, column: 18, scope: !7)
!23 = !DILocation(line: 47, column: 30, scope: !16, inlinedAt: !24)
!24 = !DILocation(line: 36, column: 22, scope: !7)
!25 = !DILocation(line: 47, column: 29, scope: !16, inlinedAt: !24)
!26 = !DILocation(line: 47, column: 20, scope: !16, inlinedAt: !24)
!27 = !DILocation(line: 47, column: 16, scope: !16, inlinedAt: !24)
!28 = !DILocation(line: 37, column: 18, scope: !7)
!29 = !DILocation(line: 256, column: 15, scope: !30, inlinedAt: !31)
!30 = distinct !DILexicalBlockFile(scope: !16, file: !17, discriminator: 0)
!31 = !DILocation(line: 39, column: 57, scope: !7)
!32 = !DILocation(line: 267, column: 36, scope: !16, inlinedAt: !31)
!33 = !DILocation(line: 73, column: 15, scope: !34, inlinedAt: !36)
!34 = distinct !DILexicalBlockFile(scope: !7, file: !35, discriminator: 0)
!35 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!36 = !DILocation(line: 39, column: 44, scope: !7)
!37 = !DILocation(line: 41, column: 19, scope: !7)
!38 = !DILocation(line: 42, column: 4, scope: !7)
!39 = !DILocation(line: 43, column: 63, scope: !7)
!40 = !DILocation(line: 43, column: 4, scope: !7)
