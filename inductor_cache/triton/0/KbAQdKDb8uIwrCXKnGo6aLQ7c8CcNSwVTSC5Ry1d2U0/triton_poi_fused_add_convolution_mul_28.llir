; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_add_convolution_mul_28(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %12 = shl i32 %11, 5, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = lshr i32 %13, 3, !dbg !12
  %15 = and i32 %14, 15, !dbg !12
  %16 = or disjoint i32 %15, 16, !dbg !12
  %17 = shl i32 %13, 2, !dbg !12
  %18 = and i32 %17, 28, !dbg !12
  %19 = or disjoint i32 %12, %15, !dbg !13
  %20 = or disjoint i32 %12, %16, !dbg !13
  %21 = or disjoint i32 %12, %18, !dbg !13
  %22 = icmp slt i32 %19, 256, !dbg !14
  %23 = icmp slt i32 %20, 256, !dbg !14
  %24 = icmp slt i32 %21, 256, !dbg !14
  %25 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %26 = shl i32 %25, 5, !dbg !16
  %27 = or disjoint i32 %26, %18, !dbg !17
  %28 = or disjoint i32 %26, %15, !dbg !17
  %29 = or disjoint i32 %26, %16, !dbg !17
  %30 = icmp slt i32 %27, 128, !dbg !18
  %31 = icmp slt i32 %28, 128, !dbg !18
  %32 = icmp slt i32 %29, 128, !dbg !18
  %.frozen = freeze i32 %21, !dbg !19
  %33 = sdiv i32 %.frozen, 64, !dbg !19
  %34 = mul i32 %33, 64, !dbg !20
  %.decomposed = sub i32 %.frozen, %34, !dbg !20
  %35 = shl i32 %19, 7, !dbg !21
  %36 = shl i32 %20, 7, !dbg !21
  %37 = add i32 %27, %35, !dbg !22
  %38 = add i32 %27, %36, !dbg !22
  %39 = sext i32 %37 to i64, !dbg !23
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !23
  %41 = sext i32 %38 to i64, !dbg !23
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !23
  %43 = and i1 %22, %30, !dbg !24
  %44 = and i1 %23, %30, !dbg !24
  %45 = and i1 %24, %31, !dbg !24
  %46 = and i1 %24, %32, !dbg !24
  %47 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %40, i1 %43) #2, !dbg !25
  %48 = extractvalue { i32, i32, i32, i32 } %47, 0, !dbg !25
  %49 = extractvalue { i32, i32, i32, i32 } %47, 1, !dbg !25
  %50 = extractvalue { i32, i32, i32, i32 } %47, 2, !dbg !25
  %51 = extractvalue { i32, i32, i32, i32 } %47, 3, !dbg !25
  %52 = bitcast i32 %48 to float, !dbg !25
  %53 = bitcast i32 %49 to float, !dbg !25
  %54 = bitcast i32 %50 to float, !dbg !25
  %55 = bitcast i32 %51 to float, !dbg !25
  %56 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %42, i1 %44) #2, !dbg !25
  %57 = extractvalue { i32, i32, i32, i32 } %56, 0, !dbg !25
  %58 = extractvalue { i32, i32, i32, i32 } %56, 1, !dbg !25
  %59 = extractvalue { i32, i32, i32, i32 } %56, 2, !dbg !25
  %60 = extractvalue { i32, i32, i32, i32 } %56, 3, !dbg !25
  %61 = bitcast i32 %57 to float, !dbg !25
  %62 = bitcast i32 %58 to float, !dbg !25
  %63 = bitcast i32 %59 to float, !dbg !25
  %64 = bitcast i32 %60 to float, !dbg !25
  %65 = sext i32 %27 to i64, !dbg !26
  %66 = getelementptr float, ptr addrspace(1) %1, i64 %65, !dbg !26
  %67 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %66, i1 %30) #2, !dbg !27
  %68 = extractvalue { i32, i32, i32, i32 } %67, 0, !dbg !27
  %69 = extractvalue { i32, i32, i32, i32 } %67, 1, !dbg !27
  %70 = extractvalue { i32, i32, i32, i32 } %67, 2, !dbg !27
  %71 = extractvalue { i32, i32, i32, i32 } %67, 3, !dbg !27
  %72 = bitcast i32 %68 to float, !dbg !27
  %73 = bitcast i32 %69 to float, !dbg !27
  %74 = bitcast i32 %70 to float, !dbg !27
  %75 = bitcast i32 %71 to float, !dbg !27
  %76 = getelementptr float, ptr addrspace(1) %2, i64 %65, !dbg !28
  %77 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %76, i1 %30) #2, !dbg !29
  %78 = extractvalue { i32, i32, i32, i32 } %77, 0, !dbg !29
  %79 = extractvalue { i32, i32, i32, i32 } %77, 1, !dbg !29
  %80 = extractvalue { i32, i32, i32, i32 } %77, 2, !dbg !29
  %81 = extractvalue { i32, i32, i32, i32 } %77, 3, !dbg !29
  %82 = bitcast i32 %78 to float, !dbg !29
  %83 = bitcast i32 %79 to float, !dbg !29
  %84 = bitcast i32 %80 to float, !dbg !29
  %85 = bitcast i32 %81 to float, !dbg !29
  %86 = getelementptr float, ptr addrspace(1) %3, i64 %39, !dbg !30
  %87 = getelementptr float, ptr addrspace(1) %3, i64 %41, !dbg !30
  %88 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %86, i1 %43) #2, !dbg !31
  %89 = extractvalue { i32, i32, i32, i32 } %88, 0, !dbg !31
  %90 = extractvalue { i32, i32, i32, i32 } %88, 1, !dbg !31
  %91 = extractvalue { i32, i32, i32, i32 } %88, 2, !dbg !31
  %92 = extractvalue { i32, i32, i32, i32 } %88, 3, !dbg !31
  %93 = bitcast i32 %89 to float, !dbg !31
  %94 = bitcast i32 %90 to float, !dbg !31
  %95 = bitcast i32 %91 to float, !dbg !31
  %96 = bitcast i32 %92 to float, !dbg !31
  %97 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %87, i1 %44) #2, !dbg !31
  %98 = extractvalue { i32, i32, i32, i32 } %97, 0, !dbg !31
  %99 = extractvalue { i32, i32, i32, i32 } %97, 1, !dbg !31
  %100 = extractvalue { i32, i32, i32, i32 } %97, 2, !dbg !31
  %101 = extractvalue { i32, i32, i32, i32 } %97, 3, !dbg !31
  %102 = bitcast i32 %98 to float, !dbg !31
  %103 = bitcast i32 %99 to float, !dbg !31
  %104 = bitcast i32 %100 to float, !dbg !31
  %105 = bitcast i32 %101 to float, !dbg !31
  %106 = getelementptr float, ptr addrspace(1) %4, i64 %65, !dbg !32
  %107 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %106, i1 %30) #2, !dbg !33
  %108 = extractvalue { i32, i32, i32, i32 } %107, 0, !dbg !33
  %109 = extractvalue { i32, i32, i32, i32 } %107, 1, !dbg !33
  %110 = extractvalue { i32, i32, i32, i32 } %107, 2, !dbg !33
  %111 = extractvalue { i32, i32, i32, i32 } %107, 3, !dbg !33
  %112 = bitcast i32 %108 to float, !dbg !33
  %113 = bitcast i32 %109 to float, !dbg !33
  %114 = bitcast i32 %110 to float, !dbg !33
  %115 = bitcast i32 %111 to float, !dbg !33
  %116 = getelementptr float, ptr addrspace(1) %5, i64 %65, !dbg !34
  %117 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %116, i1 %30) #2, !dbg !35
  %118 = extractvalue { i32, i32, i32, i32 } %117, 0, !dbg !35
  %119 = extractvalue { i32, i32, i32, i32 } %117, 1, !dbg !35
  %120 = extractvalue { i32, i32, i32, i32 } %117, 2, !dbg !35
  %121 = extractvalue { i32, i32, i32, i32 } %117, 3, !dbg !35
  %122 = bitcast i32 %118 to float, !dbg !35
  %123 = bitcast i32 %119 to float, !dbg !35
  %124 = bitcast i32 %120 to float, !dbg !35
  %125 = bitcast i32 %121 to float, !dbg !35
  %126 = getelementptr float, ptr addrspace(1) %6, i64 %65, !dbg !36
  %127 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %126, i1 %30) #2, !dbg !37
  %128 = extractvalue { i32, i32, i32, i32 } %127, 0, !dbg !37
  %129 = extractvalue { i32, i32, i32, i32 } %127, 1, !dbg !37
  %130 = extractvalue { i32, i32, i32, i32 } %127, 2, !dbg !37
  %131 = extractvalue { i32, i32, i32, i32 } %127, 3, !dbg !37
  %132 = bitcast i32 %128 to float, !dbg !37
  %133 = bitcast i32 %129 to float, !dbg !37
  %134 = bitcast i32 %130 to float, !dbg !37
  %135 = bitcast i32 %131 to float, !dbg !37
  %136 = fadd float %52, %72, !dbg !38
  %137 = fadd float %53, %73, !dbg !38
  %138 = fadd float %54, %74, !dbg !38
  %139 = fadd float %55, %75, !dbg !38
  %140 = fadd float %61, %72, !dbg !38
  %141 = fadd float %62, %73, !dbg !38
  %142 = fadd float %63, %74, !dbg !38
  %143 = fadd float %64, %75, !dbg !38
  %144 = fmul float %82, %93, !dbg !39
  %145 = fmul float %83, %94, !dbg !39
  %146 = fmul float %84, %95, !dbg !39
  %147 = fmul float %85, %96, !dbg !39
  %148 = fmul float %82, %102, !dbg !39
  %149 = fmul float %83, %103, !dbg !39
  %150 = fmul float %84, %104, !dbg !39
  %151 = fmul float %85, %105, !dbg !39
  %152 = fadd float %144, %112, !dbg !40
  %153 = fadd float %145, %113, !dbg !40
  %154 = fadd float %146, %114, !dbg !40
  %155 = fadd float %147, %115, !dbg !40
  %156 = fadd float %148, %112, !dbg !40
  %157 = fadd float %149, %113, !dbg !40
  %158 = fadd float %150, %114, !dbg !40
  %159 = fadd float %151, %115, !dbg !40
  %160 = fmul float %136, %122, !dbg !41
  %161 = fmul float %137, %123, !dbg !41
  %162 = fmul float %138, %124, !dbg !41
  %163 = fmul float %139, %125, !dbg !41
  %164 = fmul float %140, %122, !dbg !41
  %165 = fmul float %141, %123, !dbg !41
  %166 = fmul float %142, %124, !dbg !41
  %167 = fmul float %143, %125, !dbg !41
  %168 = fadd float %160, %132, !dbg !42
  %169 = fadd float %161, %133, !dbg !42
  %170 = fadd float %162, %134, !dbg !42
  %171 = fadd float %163, %135, !dbg !42
  %172 = fadd float %164, %132, !dbg !42
  %173 = fadd float %165, %133, !dbg !42
  %174 = fadd float %166, %134, !dbg !42
  %175 = fadd float %167, %135, !dbg !42
  %176 = fadd float %152, %168, !dbg !43
  %177 = fadd float %153, %169, !dbg !43
  %178 = fadd float %154, %170, !dbg !43
  %179 = fadd float %155, %171, !dbg !43
  %180 = fadd float %156, %172, !dbg !43
  %181 = fadd float %157, %173, !dbg !43
  %182 = fadd float %158, %174, !dbg !43
  %183 = fadd float %159, %175, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !44
  %184 = bitcast float %136 to i32, !dbg !45
  %185 = bitcast float %137 to i32, !dbg !45
  %186 = bitcast float %138 to i32, !dbg !45
  %187 = bitcast float %139 to i32, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %184, i32 %185, i32 %186, i32 %187, ptr addrspace(1) %40, i1 %43) #2, !dbg !45
  %188 = bitcast float %140 to i32, !dbg !45
  %189 = bitcast float %141 to i32, !dbg !45
  %190 = bitcast float %142 to i32, !dbg !45
  %191 = bitcast float %143 to i32, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %188, i32 %189, i32 %190, i32 %191, ptr addrspace(1) %42, i1 %44) #2, !dbg !45
  %192 = shl i32 %28, 6, !dbg !46
  %193 = shl i32 %29, 6, !dbg !46
  %194 = shl i32 %33, 13, !dbg !47
  %195 = add i32 %194, %.decomposed, !dbg !48
  %196 = add i32 %195, %192, !dbg !49
  %197 = add i32 %195, %193, !dbg !49
  %198 = sext i32 %196 to i64, !dbg !50
  %199 = getelementptr float, ptr addrspace(1) %7, i64 %198, !dbg !50
  %200 = sext i32 %197 to i64, !dbg !50
  %201 = getelementptr float, ptr addrspace(1) %7, i64 %200, !dbg !50
  %202 = shl i32 %13, 7, !dbg !51
  %203 = and i32 %202, 896, !dbg !51
  %204 = or disjoint i32 %203, %15, !dbg !51
  %205 = and i32 %17, 508, !dbg !51
  %206 = lshr exact i32 %203, 1, !dbg !51
  %207 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %206, !dbg !51
  %208 = getelementptr float, ptr addrspace(3) %207, i32 %204, !dbg !51
  %209 = bitcast float %176 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %208, <1 x i32> %209, i1 true) #2, !dbg !51
  %210 = or disjoint i32 %204, 32, !dbg !51
  %211 = lshr i32 %210, 3, !dbg !51
  %212 = and i32 %211, 116, !dbg !51
  %213 = getelementptr float, ptr addrspace(3) @global_smem, i32 %212, !dbg !51
  %214 = getelementptr float, ptr addrspace(3) %213, i32 %210, !dbg !51
  %215 = bitcast float %177 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %214, <1 x i32> %215, i1 true) #2, !dbg !51
  %216 = or disjoint i32 %204, 64, !dbg !51
  %217 = lshr i32 %216, 3, !dbg !51
  %218 = and i32 %217, 120, !dbg !51
  %219 = getelementptr float, ptr addrspace(3) @global_smem, i32 %218, !dbg !51
  %220 = getelementptr float, ptr addrspace(3) %219, i32 %216, !dbg !51
  %221 = bitcast float %178 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %220, <1 x i32> %221, i1 true) #2, !dbg !51
  %222 = or disjoint i32 %204, 96, !dbg !51
  %223 = lshr i32 %222, 3, !dbg !51
  %224 = and i32 %223, 124, !dbg !51
  %225 = getelementptr float, ptr addrspace(3) @global_smem, i32 %224, !dbg !51
  %226 = getelementptr float, ptr addrspace(3) %225, i32 %222, !dbg !51
  %227 = bitcast float %179 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %226, <1 x i32> %227, i1 true) #2, !dbg !51
  %228 = or disjoint i32 %204, 16, !dbg !51
  %229 = getelementptr float, ptr addrspace(3) %207, i32 %228, !dbg !51
  %230 = bitcast float %180 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %229, <1 x i32> %230, i1 true) #2, !dbg !51
  %231 = or disjoint i32 %204, 48, !dbg !51
  %232 = lshr i32 %231, 3, !dbg !51
  %233 = and i32 %232, 116, !dbg !51
  %234 = getelementptr float, ptr addrspace(3) @global_smem, i32 %233, !dbg !51
  %235 = getelementptr float, ptr addrspace(3) %234, i32 %231, !dbg !51
  %236 = bitcast float %181 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %235, <1 x i32> %236, i1 true) #2, !dbg !51
  %237 = or disjoint i32 %204, 80, !dbg !51
  %238 = lshr i32 %237, 3, !dbg !51
  %239 = and i32 %238, 120, !dbg !51
  %240 = getelementptr float, ptr addrspace(3) @global_smem, i32 %239, !dbg !51
  %241 = getelementptr float, ptr addrspace(3) %240, i32 %237, !dbg !51
  %242 = bitcast float %182 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %241, <1 x i32> %242, i1 true) #2, !dbg !51
  %243 = or disjoint i32 %204, 112, !dbg !51
  %244 = lshr i32 %243, 3, !dbg !51
  %245 = and i32 %244, 124, !dbg !51
  %246 = getelementptr float, ptr addrspace(3) @global_smem, i32 %245, !dbg !51
  %247 = getelementptr float, ptr addrspace(3) %246, i32 %243, !dbg !51
  %248 = bitcast float %183 to <1 x i32>, !dbg !51
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %247, <1 x i32> %248, i1 true) #2, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %249 = lshr i32 %17, 3, !dbg !51
  %250 = and i32 %249, 60, !dbg !51
  %251 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %250, !dbg !51
  %252 = getelementptr inbounds float, ptr addrspace(3) %251, i32 %205, !dbg !51
  %253 = or disjoint i32 %205, 512, !dbg !51
  %254 = lshr i32 %253, 3, !dbg !51
  %255 = and i32 %254, 124, !dbg !51
  %256 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %255, !dbg !51
  %257 = getelementptr inbounds float, ptr addrspace(3) %256, i32 %253, !dbg !51
  %258 = load <4 x i32>, ptr addrspace(3) %257, align 16, !dbg !51
  %.extract = load i32, ptr addrspace(3) %252, align 16, !dbg !51
  %259 = getelementptr inbounds i8, ptr addrspace(3) %252, i32 4, !dbg !51
  %.extract8 = load i32, ptr addrspace(3) %259, align 4, !dbg !51
  %260 = getelementptr inbounds i8, ptr addrspace(3) %252, i32 8, !dbg !51
  %.extract9 = load i32, ptr addrspace(3) %260, align 8, !dbg !51
  %261 = getelementptr inbounds i8, ptr addrspace(3) %252, i32 12, !dbg !51
  %.extract10 = load i32, ptr addrspace(3) %261, align 4, !dbg !51
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %199, i1 %45) #2, !dbg !51
  %.extract11 = extractelement <4 x i32> %258, i64 0, !dbg !51
  %.extract12 = extractelement <4 x i32> %258, i64 1, !dbg !51
  %.extract13 = extractelement <4 x i32> %258, i64 2, !dbg !51
  %.extract14 = extractelement <4 x i32> %258, i64 3, !dbg !51
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %201, i1 %46) #2, !dbg !51
  ret void, !dbg !52
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cs36y472frnonxyw4lrbkwgfgldej4xipv4regdyjhur36y6u55z.py", directory: "inductor_cache/s3")
!4 = !{ptr @triton_poi_fused_add_convolution_mul_28, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_convolution_mul_28, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_convolution_mul_28", linkageName: "triton_poi_fused_add_convolution_mul_28", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 31, column: 19, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 43, scope: !7)
!22 = !DILocation(line: 32, column: 39, scope: !7)
!23 = !DILocation(line: 32, column: 34, scope: !7)
!24 = !DILocation(line: 32, column: 56, scope: !7)
!25 = !DILocation(line: 32, column: 48, scope: !7)
!26 = !DILocation(line: 33, column: 30, scope: !7)
!27 = !DILocation(line: 33, column: 35, scope: !7)
!28 = !DILocation(line: 34, column: 30, scope: !7)
!29 = !DILocation(line: 34, column: 35, scope: !7)
!30 = !DILocation(line: 35, column: 30, scope: !7)
!31 = !DILocation(line: 35, column: 44, scope: !7)
!32 = !DILocation(line: 36, column: 30, scope: !7)
!33 = !DILocation(line: 36, column: 35, scope: !7)
!34 = !DILocation(line: 37, column: 30, scope: !7)
!35 = !DILocation(line: 37, column: 35, scope: !7)
!36 = !DILocation(line: 38, column: 31, scope: !7)
!37 = !DILocation(line: 38, column: 36, scope: !7)
!38 = !DILocation(line: 39, column: 18, scope: !7)
!39 = !DILocation(line: 40, column: 18, scope: !7)
!40 = !DILocation(line: 41, column: 18, scope: !7)
!41 = !DILocation(line: 42, column: 18, scope: !7)
!42 = !DILocation(line: 43, column: 19, scope: !7)
!43 = !DILocation(line: 44, column: 19, scope: !7)
!44 = !DILocation(line: 45, column: 4, scope: !7)
!45 = !DILocation(line: 46, column: 48, scope: !7)
!46 = !DILocation(line: 47, column: 33, scope: !7)
!47 = !DILocation(line: 47, column: 43, scope: !7)
!48 = !DILocation(line: 47, column: 30, scope: !7)
!49 = !DILocation(line: 47, column: 38, scope: !7)
!50 = !DILocation(line: 47, column: 25, scope: !7)
!51 = !DILocation(line: 47, column: 55, scope: !7)
!52 = !DILocation(line: 47, column: 4, scope: !7)
