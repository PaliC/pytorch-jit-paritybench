; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_add_native_layer_norm_9(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %9 = shl i32 %8, 2, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = and i32 %10, 1, !dbg !12
  %12 = shl nuw nsw i32 %11, 1, !dbg !12
  %.lobit1 = lshr i32 %10, 3, !dbg !12
  %13 = and i32 %.lobit1, 3, !dbg !12
  %14 = or disjoint i32 %9, %12, !dbg !13
  %15 = or disjoint i32 %9, %13, !dbg !13
  %16 = icmp slt i32 %14, 4, !dbg !14
  %17 = icmp slt i32 %15, 4, !dbg !14
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %19 = shl i32 %18, 4, !dbg !16
  %20 = lshr i32 %10, 1, !dbg !17
  %21 = and i32 %20, 15, !dbg !17
  %22 = shl i32 %10, 1, !dbg !17
  %23 = and i32 %22, 14, !dbg !17
  %24 = or disjoint i32 %19, %21, !dbg !18
  %25 = or disjoint i32 %19, %23, !dbg !18
  %26 = icmp slt i32 %24, 16, !dbg !19
  %27 = icmp slt i32 %25, 16, !dbg !19
  %28 = srem i32 %24, 4, !dbg !20
  %29 = srem i32 %25, 4, !dbg !20
  %30 = shl i32 %24, 2, !dbg !21
  %31 = add i32 %30, %14, !dbg !22
  %32 = sext i32 %31 to i64, !dbg !23
  %33 = getelementptr float, ptr addrspace(1) %1, i64 %32, !dbg !23
  %34 = and i1 %16, %26, !dbg !24
  %35 = and i1 %17, %27, !dbg !24
  %36 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %33, i1 %34) #2, !dbg !25
  %37 = extractvalue { i32, i32 } %36, 0, !dbg !25
  %38 = extractvalue { i32, i32 } %36, 1, !dbg !25
  %39 = bitcast i32 %37 to float, !dbg !25
  %40 = bitcast i32 %38 to float, !dbg !25
  %41 = sext i32 %28 to i64, !dbg !26
  %42 = getelementptr float, ptr addrspace(1) %2, i64 %41, !dbg !26
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 %26) #2, !dbg !27
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 %26) #2, !dbg !27
  %45 = bitcast i32 %44 to float, !dbg !27
  %46 = shl i32 %15, 2, !dbg !28
  %47 = add i32 %29, %46, !dbg !29
  %48 = sext i32 %47 to i64, !dbg !30
  %49 = getelementptr float, ptr addrspace(1) %3, i64 %48, !dbg !30
  %50 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %49, i1 %35) #2, !dbg !31
  %51 = extractvalue { i32, i32 } %50, 0, !dbg !31
  %52 = extractvalue { i32, i32 } %50, 1, !dbg !31
  %53 = bitcast i32 %51 to float, !dbg !31
  %54 = bitcast i32 %52 to float, !dbg !31
  %55 = shl i32 %15, 4, !dbg !32
  %56 = add i32 %25, %55, !dbg !33
  %57 = sext i32 %56 to i64, !dbg !34
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !34
  %59 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %58, i1 %35) #2, !dbg !35
  %60 = extractvalue { i32, i32 } %59, 0, !dbg !35
  %61 = extractvalue { i32, i32 } %59, 1, !dbg !35
  %62 = bitcast i32 %60 to float, !dbg !35
  %63 = bitcast i32 %61 to float, !dbg !35
  %64 = sext i32 %29 to i64, !dbg !36
  %65 = getelementptr float, ptr addrspace(1) %4, i64 %64, !dbg !36
  %66 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %65, i1 %27) #2, !dbg !37
  %67 = extractvalue { i32, i32 } %66, 0, !dbg !37
  %68 = extractvalue { i32, i32 } %66, 1, !dbg !37
  %69 = bitcast i32 %67 to float, !dbg !37
  %70 = bitcast i32 %68 to float, !dbg !37
  %71 = fadd float %39, %45, !dbg !38
  %72 = fadd float %40, %45, !dbg !38
  %73 = shl nuw nsw i32 %11, 5, !dbg !38
  %74 = or disjoint i32 %73, %21, !dbg !38
  %75 = and i32 %22, 62, !dbg !38
  %.idx = shl nuw nsw i32 %11, 3, !dbg !38
  %76 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !38
  %77 = getelementptr inbounds float, ptr addrspace(3) %76, i32 %74, !dbg !38
  %78 = bitcast float %71 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %77, <1 x i32> %78, i1 true) #2, !dbg !38
  %79 = or disjoint i32 %74, 16, !dbg !38
  %80 = lshr i32 %79, 4, !dbg !38
  %81 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %80, !dbg !38
  %82 = getelementptr inbounds float, ptr addrspace(3) %81, i32 %79, !dbg !38
  %83 = bitcast float %72 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %82, <1 x i32> %83, i1 true) #2, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %84 = lshr i32 %75, 4, !dbg !38
  %85 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %84, !dbg !38
  %86 = getelementptr inbounds float, ptr addrspace(3) %85, i32 %75, !dbg !38
  %87 = load float, ptr addrspace(3) %86, align 4, !dbg !38
  %88 = or disjoint i32 %75, 1, !dbg !38
  %89 = getelementptr inbounds float, ptr addrspace(3) %85, i32 %88, !dbg !38
  %90 = load float, ptr addrspace(3) %89, align 4, !dbg !38
  %91 = fadd float %87, %53, !dbg !39
  %92 = fadd float %90, %54, !dbg !39
  %93 = fadd float %62, %69, !dbg !40
  %94 = fadd float %63, %70, !dbg !40
  %95 = fadd float %93, %91, !dbg !41
  %96 = fadd float %94, %92, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %97 = bitcast float %95 to i32, !dbg !43
  %98 = bitcast float %96 to i32, !dbg !43
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %97, i32 %98, ptr addrspace(1) %58, i1 %35) #2, !dbg !43
  ret void, !dbg !44
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cvp4zlhwhgr54cmfvgjkfnfjfa3ssrd5x5ghde745tx72uczh2ie.py", directory: "inductor_cache/vp")
!4 = !{ptr @triton_poi_fused_add_native_layer_norm_9, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_native_layer_norm_9, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_native_layer_norm_9", linkageName: "triton_poi_fused_add_native_layer_norm_9", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 31, column: 37, scope: !7)
!22 = !DILocation(line: 31, column: 35, scope: !7)
!23 = !DILocation(line: 31, column: 30, scope: !7)
!24 = !DILocation(line: 31, column: 50, scope: !7)
!25 = !DILocation(line: 31, column: 42, scope: !7)
!26 = !DILocation(line: 32, column: 30, scope: !7)
!27 = !DILocation(line: 32, column: 35, scope: !7)
!28 = !DILocation(line: 33, column: 37, scope: !7)
!29 = !DILocation(line: 33, column: 35, scope: !7)
!30 = !DILocation(line: 33, column: 30, scope: !7)
!31 = !DILocation(line: 33, column: 42, scope: !7)
!32 = !DILocation(line: 34, column: 42, scope: !7)
!33 = !DILocation(line: 34, column: 39, scope: !7)
!34 = !DILocation(line: 34, column: 34, scope: !7)
!35 = !DILocation(line: 34, column: 47, scope: !7)
!36 = !DILocation(line: 35, column: 30, scope: !7)
!37 = !DILocation(line: 35, column: 35, scope: !7)
!38 = !DILocation(line: 36, column: 18, scope: !7)
!39 = !DILocation(line: 37, column: 18, scope: !7)
!40 = !DILocation(line: 38, column: 18, scope: !7)
!41 = !DILocation(line: 39, column: 18, scope: !7)
!42 = !DILocation(line: 40, column: 4, scope: !7)
!43 = !DILocation(line: 41, column: 47, scope: !7)
!44 = !DILocation(line: 41, column: 4, scope: !7)
