; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused__unsafe_index_add_convolution_mul_sub_28(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9, i32 %10) local_unnamed_addr !dbg !7 {
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %13 = shl i32 %12, 8, !dbg !11
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %15 = shl i32 %14, 2, !dbg !12
  %16 = and i32 %15, 252, !dbg !12
  %17 = and i32 %14, 255, !dbg !12
  %18 = or disjoint i32 %13, %16, !dbg !13
  %19 = or disjoint i32 %13, %17, !dbg !13
  %20 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %21 = shl i32 %20, 4, !dbg !15
  %22 = lshr i32 %14, 6, !dbg !16
  %23 = and i32 %22, 3, !dbg !16
  %24 = or disjoint i32 %21, %23, !dbg !17
  %25 = or disjoint i32 %24, 4, !dbg !17
  %26 = or disjoint i32 %24, 8, !dbg !17
  %27 = or disjoint i32 %24, 12, !dbg !17
  %28 = icmp slt i32 %24, 64, !dbg !18
  %29 = icmp slt i32 %25, 64, !dbg !18
  %30 = icmp slt i32 %26, 64, !dbg !18
  %31 = icmp slt i32 %27, 64, !dbg !18
  %.frozen = freeze i32 %24, !dbg !19
  %32 = sdiv i32 %.frozen, 8, !dbg !19
  %.frozen11 = freeze i32 %25, !dbg !19
  %33 = sdiv i32 %.frozen11, 8, !dbg !19
  %34 = sdiv i32 %26, 8, !dbg !19
  %.frozen13 = freeze i32 %27, !dbg !19
  %35 = sdiv i32 %.frozen13, 8, !dbg !19
  %36 = mul i32 %32, 8, !dbg !20
  %.decomposed = sub i32 %.frozen, %36, !dbg !20
  %37 = mul i32 %33, 8, !dbg !20
  %.decomposed12 = sub i32 %.frozen11, %37, !dbg !20
  %38 = mul i32 %35, 8, !dbg !20
  %.decomposed14 = sub i32 %.frozen13, %38, !dbg !20
  %.frozen15 = freeze i32 %18, !dbg !21
  %39 = sdiv i32 %.frozen15, 256, !dbg !21
  %40 = mul i32 %39, 256, !dbg !22
  %.decomposed16 = sub i32 %.frozen15, %40, !dbg !22
  %41 = srem i32 %19, 256, !dbg !22
  %42 = sext i32 %32 to i64, !dbg !23
  %43 = getelementptr i64, ptr addrspace(1) %1, i64 %42, !dbg !23
  %44 = sext i32 %33 to i64, !dbg !23
  %45 = getelementptr i64, ptr addrspace(1) %1, i64 %44, !dbg !23
  %46 = sext i32 %34 to i64, !dbg !23
  %47 = getelementptr i64, ptr addrspace(1) %1, i64 %46, !dbg !23
  %48 = sext i32 %35 to i64, !dbg !23
  %49 = getelementptr i64, ptr addrspace(1) %1, i64 %48, !dbg !23
  %50 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %43, i1 %28) #2, !dbg !24
  %51 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %43, i1 %28) #2, !dbg !24
  %52 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %43, i1 %28) #2, !dbg !24
  %53 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %43, i1 %28) #2, !dbg !24
  %54 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %45, i1 %29) #2, !dbg !24
  %55 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %45, i1 %29) #2, !dbg !24
  %56 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %45, i1 %29) #2, !dbg !24
  %57 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %45, i1 %29) #2, !dbg !24
  %58 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %47, i1 %30) #2, !dbg !24
  %59 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %47, i1 %30) #2, !dbg !24
  %60 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %47, i1 %30) #2, !dbg !24
  %61 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %47, i1 %30) #2, !dbg !24
  %62 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %49, i1 %31) #2, !dbg !24
  %63 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %49, i1 %31) #2, !dbg !24
  %64 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %49, i1 %31) #2, !dbg !24
  %65 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %49, i1 %31) #2, !dbg !24
  %66 = sext i32 %.decomposed to i64, !dbg !25
  %67 = getelementptr i64, ptr addrspace(1) %2, i64 %66, !dbg !25
  %68 = sext i32 %.decomposed12 to i64, !dbg !25
  %69 = getelementptr i64, ptr addrspace(1) %2, i64 %68, !dbg !25
  %70 = sext i32 %.decomposed14 to i64, !dbg !25
  %71 = getelementptr i64, ptr addrspace(1) %2, i64 %70, !dbg !25
  %72 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %67, i1 %28) #2, !dbg !26
  %73 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %67, i1 %28) #2, !dbg !26
  %74 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %67, i1 %28) #2, !dbg !26
  %75 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %67, i1 %28) #2, !dbg !26
  %76 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %69, i1 %29) #2, !dbg !26
  %77 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %69, i1 %29) #2, !dbg !26
  %78 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %69, i1 %29) #2, !dbg !26
  %79 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %69, i1 %29) #2, !dbg !26
  %80 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %67, i1 %30) #2, !dbg !26
  %81 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %67, i1 %30) #2, !dbg !26
  %82 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %67, i1 %30) #2, !dbg !26
  %83 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %67, i1 %30) #2, !dbg !26
  %84 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %71, i1 %31) #2, !dbg !26
  %85 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %71, i1 %31) #2, !dbg !26
  %86 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %71, i1 %31) #2, !dbg !26
  %87 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %71, i1 %31) #2, !dbg !26
  %88 = getelementptr i64, ptr addrspace(1) %4, i64 %66, !dbg !27
  %89 = getelementptr i64, ptr addrspace(1) %4, i64 %68, !dbg !27
  %90 = getelementptr i64, ptr addrspace(1) %4, i64 %70, !dbg !27
  %91 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %88, i1 %28) #2, !dbg !28
  %92 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %88, i1 %28) #2, !dbg !28
  %93 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %88, i1 %28) #2, !dbg !28
  %94 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %88, i1 %28) #2, !dbg !28
  %95 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %89, i1 %29) #2, !dbg !28
  %96 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %89, i1 %29) #2, !dbg !28
  %97 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %89, i1 %29) #2, !dbg !28
  %98 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %89, i1 %29) #2, !dbg !28
  %99 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %88, i1 %30) #2, !dbg !28
  %100 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %88, i1 %30) #2, !dbg !28
  %101 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %88, i1 %30) #2, !dbg !28
  %102 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %88, i1 %30) #2, !dbg !28
  %103 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %90, i1 %31) #2, !dbg !28
  %104 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %90, i1 %31) #2, !dbg !28
  %105 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %90, i1 %31) #2, !dbg !28
  %106 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %90, i1 %31) #2, !dbg !28
  %107 = getelementptr float, ptr addrspace(1) %5, i64 %66, !dbg !29
  %108 = getelementptr float, ptr addrspace(1) %5, i64 %68, !dbg !29
  %109 = getelementptr float, ptr addrspace(1) %5, i64 %70, !dbg !29
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %107, i1 %28) #2, !dbg !30
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %107, i1 %28) #2, !dbg !30
  %112 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %107, i1 %28) #2, !dbg !30
  %113 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %107, i1 %28) #2, !dbg !30
  %114 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %108, i1 %29) #2, !dbg !30
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %108, i1 %29) #2, !dbg !30
  %116 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %108, i1 %29) #2, !dbg !30
  %117 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %108, i1 %29) #2, !dbg !30
  %118 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %107, i1 %30) #2, !dbg !30
  %119 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %107, i1 %30) #2, !dbg !30
  %120 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %107, i1 %30) #2, !dbg !30
  %121 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %107, i1 %30) #2, !dbg !30
  %122 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %109, i1 %31) #2, !dbg !30
  %123 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %109, i1 %31) #2, !dbg !30
  %124 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %109, i1 %31) #2, !dbg !30
  %125 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %109, i1 %31) #2, !dbg !30
  %126 = getelementptr i64, ptr addrspace(1) %6, i64 %42, !dbg !31
  %127 = getelementptr i64, ptr addrspace(1) %6, i64 %44, !dbg !31
  %128 = getelementptr i64, ptr addrspace(1) %6, i64 %46, !dbg !31
  %129 = getelementptr i64, ptr addrspace(1) %6, i64 %48, !dbg !31
  %130 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %126, i1 %28) #2, !dbg !32
  %131 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %126, i1 %28) #2, !dbg !32
  %132 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %126, i1 %28) #2, !dbg !32
  %133 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %126, i1 %28) #2, !dbg !32
  %134 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %127, i1 %29) #2, !dbg !32
  %135 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %127, i1 %29) #2, !dbg !32
  %136 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %127, i1 %29) #2, !dbg !32
  %137 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %127, i1 %29) #2, !dbg !32
  %138 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %128, i1 %30) #2, !dbg !32
  %139 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %128, i1 %30) #2, !dbg !32
  %140 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %128, i1 %30) #2, !dbg !32
  %141 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %128, i1 %30) #2, !dbg !32
  %142 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %129, i1 %31) #2, !dbg !32
  %143 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %129, i1 %31) #2, !dbg !32
  %144 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %129, i1 %31) #2, !dbg !32
  %145 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %129, i1 %31) #2, !dbg !32
  %146 = getelementptr float, ptr addrspace(1) %7, i64 %42, !dbg !33
  %147 = getelementptr float, ptr addrspace(1) %7, i64 %44, !dbg !33
  %148 = getelementptr float, ptr addrspace(1) %7, i64 %46, !dbg !33
  %149 = getelementptr float, ptr addrspace(1) %7, i64 %48, !dbg !33
  %150 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %146, i1 %28) #2, !dbg !34
  %151 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %146, i1 %28) #2, !dbg !34
  %152 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %146, i1 %28) #2, !dbg !34
  %153 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %146, i1 %28) #2, !dbg !34
  %154 = bitcast i32 %153 to float, !dbg !34
  %155 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %147, i1 %29) #2, !dbg !34
  %156 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %147, i1 %29) #2, !dbg !34
  %157 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %147, i1 %29) #2, !dbg !34
  %158 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %147, i1 %29) #2, !dbg !34
  %159 = bitcast i32 %158 to float, !dbg !34
  %160 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %148, i1 %30) #2, !dbg !34
  %161 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %148, i1 %30) #2, !dbg !34
  %162 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %148, i1 %30) #2, !dbg !34
  %163 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %148, i1 %30) #2, !dbg !34
  %164 = bitcast i32 %163 to float, !dbg !34
  %165 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %149, i1 %31) #2, !dbg !34
  %166 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %149, i1 %31) #2, !dbg !34
  %167 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %149, i1 %31) #2, !dbg !34
  %168 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %149, i1 %31) #2, !dbg !34
  %169 = bitcast i32 %168 to float, !dbg !34
  %170 = shl i32 %24, 8, !dbg !35
  %171 = shl i32 %25, 8, !dbg !35
  %172 = shl i32 %26, 8, !dbg !35
  %173 = shl i32 %27, 8, !dbg !35
  %174 = shl i32 %39, 14, !dbg !36
  %175 = add i32 %174, %.decomposed16, !dbg !37
  %176 = add i32 %175, %170, !dbg !38
  %177 = add i32 %175, %171, !dbg !38
  %178 = add i32 %175, %172, !dbg !38
  %179 = add i32 %175, %173, !dbg !38
  %180 = sext i32 %176 to i64, !dbg !39
  %181 = getelementptr float, ptr addrspace(1) %0, i64 %180, !dbg !39
  %182 = sext i32 %177 to i64, !dbg !39
  %183 = getelementptr float, ptr addrspace(1) %0, i64 %182, !dbg !39
  %184 = sext i32 %178 to i64, !dbg !39
  %185 = getelementptr float, ptr addrspace(1) %0, i64 %184, !dbg !39
  %186 = sext i32 %179 to i64, !dbg !39
  %187 = getelementptr float, ptr addrspace(1) %0, i64 %186, !dbg !39
  %188 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %181, i1 %28) #2, !dbg !40
  %189 = extractvalue { i32, i32, i32, i32 } %188, 0, !dbg !40
  %190 = extractvalue { i32, i32, i32, i32 } %188, 1, !dbg !40
  %191 = extractvalue { i32, i32, i32, i32 } %188, 2, !dbg !40
  %192 = extractvalue { i32, i32, i32, i32 } %188, 3, !dbg !40
  %193 = bitcast i32 %189 to float, !dbg !40
  %194 = bitcast i32 %190 to float, !dbg !40
  %195 = bitcast i32 %191 to float, !dbg !40
  %196 = bitcast i32 %192 to float, !dbg !40
  %197 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %183, i1 %29) #2, !dbg !40
  %198 = extractvalue { i32, i32, i32, i32 } %197, 0, !dbg !40
  %199 = extractvalue { i32, i32, i32, i32 } %197, 1, !dbg !40
  %200 = extractvalue { i32, i32, i32, i32 } %197, 2, !dbg !40
  %201 = extractvalue { i32, i32, i32, i32 } %197, 3, !dbg !40
  %202 = bitcast i32 %198 to float, !dbg !40
  %203 = bitcast i32 %199 to float, !dbg !40
  %204 = bitcast i32 %200 to float, !dbg !40
  %205 = bitcast i32 %201 to float, !dbg !40
  %206 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %185, i1 %30) #2, !dbg !40
  %207 = extractvalue { i32, i32, i32, i32 } %206, 0, !dbg !40
  %208 = extractvalue { i32, i32, i32, i32 } %206, 1, !dbg !40
  %209 = extractvalue { i32, i32, i32, i32 } %206, 2, !dbg !40
  %210 = extractvalue { i32, i32, i32, i32 } %206, 3, !dbg !40
  %211 = bitcast i32 %207 to float, !dbg !40
  %212 = bitcast i32 %208 to float, !dbg !40
  %213 = bitcast i32 %209 to float, !dbg !40
  %214 = bitcast i32 %210 to float, !dbg !40
  %215 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %187, i1 %31) #2, !dbg !40
  %216 = extractvalue { i32, i32, i32, i32 } %215, 0, !dbg !40
  %217 = extractvalue { i32, i32, i32, i32 } %215, 1, !dbg !40
  %218 = extractvalue { i32, i32, i32, i32 } %215, 2, !dbg !40
  %219 = extractvalue { i32, i32, i32, i32 } %215, 3, !dbg !40
  %220 = bitcast i32 %216 to float, !dbg !40
  %221 = bitcast i32 %217 to float, !dbg !40
  %222 = bitcast i32 %218 to float, !dbg !40
  %223 = bitcast i32 %219 to float, !dbg !40
  %224 = sext i32 %41 to i64, !dbg !41
  %225 = getelementptr float, ptr addrspace(1) %8, i64 %224, !dbg !41
  %226 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %225, i1 true) #2, !dbg !42
  %227 = lshr i64 %53, 61, !dbg !43
  %228 = and i64 %227, 4, !dbg !43
  %229 = add i64 %228, %53, !dbg !43
  %230 = lshr i64 %57, 61, !dbg !43
  %231 = and i64 %230, 4, !dbg !43
  %232 = add i64 %231, %57, !dbg !43
  %233 = lshr i64 %61, 61, !dbg !43
  %234 = and i64 %233, 4, !dbg !43
  %235 = add i64 %234, %61, !dbg !43
  %236 = lshr i64 %65, 61, !dbg !43
  %237 = and i64 %236, 4, !dbg !43
  %238 = add i64 %237, %65, !dbg !43
  %239 = lshr i64 %75, 61, !dbg !44
  %240 = and i64 %239, 4, !dbg !44
  %241 = add i64 %240, %75, !dbg !44
  %242 = lshr i64 %79, 61, !dbg !44
  %243 = and i64 %242, 4, !dbg !44
  %244 = add i64 %243, %79, !dbg !44
  %245 = lshr i64 %83, 61, !dbg !44
  %246 = and i64 %245, 4, !dbg !44
  %247 = add i64 %246, %83, !dbg !44
  %248 = lshr i64 %87, 61, !dbg !44
  %249 = and i64 %248, 4, !dbg !44
  %250 = add i64 %249, %87, !dbg !44
  %251 = sext i32 %.decomposed16 to i64, !dbg !45
  %252 = shl i64 %229, 10, !dbg !46
  %253 = shl i64 %232, 10, !dbg !46
  %254 = shl i64 %235, 10, !dbg !46
  %255 = shl i64 %238, 10, !dbg !46
  %256 = shl i32 %39, 12, !dbg !47
  %257 = sext i32 %256 to i64, !dbg !48
  %.idx = shl i64 %241, 10, !dbg !49
  %258 = getelementptr i8, ptr addrspace(1) %3, i64 %.idx, !dbg !49
  %259 = getelementptr float, ptr addrspace(1) %258, i64 %251, !dbg !49
  %260 = getelementptr float, ptr addrspace(1) %259, i64 %252, !dbg !49
  %261 = getelementptr float, ptr addrspace(1) %260, i64 %257, !dbg !49
  %.idx4 = shl i64 %244, 10, !dbg !49
  %262 = getelementptr i8, ptr addrspace(1) %3, i64 %.idx4, !dbg !49
  %263 = getelementptr float, ptr addrspace(1) %262, i64 %251, !dbg !49
  %264 = getelementptr float, ptr addrspace(1) %263, i64 %253, !dbg !49
  %265 = getelementptr float, ptr addrspace(1) %264, i64 %257, !dbg !49
  %.idx5 = shl i64 %247, 10, !dbg !49
  %266 = getelementptr i8, ptr addrspace(1) %3, i64 %.idx5, !dbg !49
  %267 = getelementptr float, ptr addrspace(1) %266, i64 %251, !dbg !49
  %268 = getelementptr float, ptr addrspace(1) %267, i64 %254, !dbg !49
  %269 = getelementptr float, ptr addrspace(1) %268, i64 %257, !dbg !49
  %.idx6 = shl i64 %250, 10, !dbg !49
  %270 = getelementptr i8, ptr addrspace(1) %3, i64 %.idx6, !dbg !49
  %271 = getelementptr float, ptr addrspace(1) %270, i64 %251, !dbg !49
  %272 = getelementptr float, ptr addrspace(1) %271, i64 %255, !dbg !49
  %273 = getelementptr float, ptr addrspace(1) %272, i64 %257, !dbg !49
  %274 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %261, i1 %28) #2, !dbg !50
  %275 = extractvalue { i32, i32, i32, i32 } %274, 0, !dbg !50
  %276 = extractvalue { i32, i32, i32, i32 } %274, 1, !dbg !50
  %277 = extractvalue { i32, i32, i32, i32 } %274, 2, !dbg !50
  %278 = extractvalue { i32, i32, i32, i32 } %274, 3, !dbg !50
  %279 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %265, i1 %29) #2, !dbg !50
  %280 = extractvalue { i32, i32, i32, i32 } %279, 0, !dbg !50
  %281 = extractvalue { i32, i32, i32, i32 } %279, 1, !dbg !50
  %282 = extractvalue { i32, i32, i32, i32 } %279, 2, !dbg !50
  %283 = extractvalue { i32, i32, i32, i32 } %279, 3, !dbg !50
  %284 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %269, i1 %30) #2, !dbg !50
  %285 = extractvalue { i32, i32, i32, i32 } %284, 0, !dbg !50
  %286 = extractvalue { i32, i32, i32, i32 } %284, 1, !dbg !50
  %287 = extractvalue { i32, i32, i32, i32 } %284, 2, !dbg !50
  %288 = extractvalue { i32, i32, i32, i32 } %284, 3, !dbg !50
  %289 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %273, i1 %31) #2, !dbg !50
  %290 = extractvalue { i32, i32, i32, i32 } %289, 0, !dbg !50
  %291 = extractvalue { i32, i32, i32, i32 } %289, 1, !dbg !50
  %292 = extractvalue { i32, i32, i32, i32 } %289, 2, !dbg !50
  %293 = extractvalue { i32, i32, i32, i32 } %289, 3, !dbg !50
  %294 = lshr i64 %94, 61, !dbg !51
  %295 = and i64 %294, 4, !dbg !51
  %296 = add i64 %295, %94, !dbg !51
  %297 = lshr i64 %98, 61, !dbg !51
  %298 = and i64 %297, 4, !dbg !51
  %299 = add i64 %298, %98, !dbg !51
  %300 = lshr i64 %102, 61, !dbg !51
  %301 = and i64 %300, 4, !dbg !51
  %302 = add i64 %301, %102, !dbg !51
  %303 = lshr i64 %106, 61, !dbg !51
  %304 = and i64 %303, 4, !dbg !51
  %305 = add i64 %304, %106, !dbg !51
  %.idx7 = shl i64 %296, 10, !dbg !52
  %306 = getelementptr i8, ptr addrspace(1) %3, i64 %.idx7, !dbg !52
  %307 = getelementptr float, ptr addrspace(1) %306, i64 %251, !dbg !52
  %308 = getelementptr float, ptr addrspace(1) %307, i64 %252, !dbg !52
  %309 = getelementptr float, ptr addrspace(1) %308, i64 %257, !dbg !52
  %.idx8 = shl i64 %299, 10, !dbg !52
  %310 = getelementptr i8, ptr addrspace(1) %3, i64 %.idx8, !dbg !52
  %311 = getelementptr float, ptr addrspace(1) %310, i64 %251, !dbg !52
  %312 = getelementptr float, ptr addrspace(1) %311, i64 %253, !dbg !52
  %313 = getelementptr float, ptr addrspace(1) %312, i64 %257, !dbg !52
  %.idx9 = shl i64 %302, 10, !dbg !52
  %314 = getelementptr i8, ptr addrspace(1) %3, i64 %.idx9, !dbg !52
  %315 = getelementptr float, ptr addrspace(1) %314, i64 %251, !dbg !52
  %316 = getelementptr float, ptr addrspace(1) %315, i64 %254, !dbg !52
  %317 = getelementptr float, ptr addrspace(1) %316, i64 %257, !dbg !52
  %.idx10 = shl i64 %305, 10, !dbg !52
  %318 = getelementptr i8, ptr addrspace(1) %3, i64 %.idx10, !dbg !52
  %319 = getelementptr float, ptr addrspace(1) %318, i64 %251, !dbg !52
  %320 = getelementptr float, ptr addrspace(1) %319, i64 %255, !dbg !52
  %321 = getelementptr float, ptr addrspace(1) %320, i64 %257, !dbg !52
  %322 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %309, i1 %28) #2, !dbg !53
  %323 = extractvalue { i32, i32, i32, i32 } %322, 0, !dbg !53
  %324 = extractvalue { i32, i32, i32, i32 } %322, 1, !dbg !53
  %325 = extractvalue { i32, i32, i32, i32 } %322, 2, !dbg !53
  %326 = extractvalue { i32, i32, i32, i32 } %322, 3, !dbg !53
  %327 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %313, i1 %29) #2, !dbg !53
  %328 = extractvalue { i32, i32, i32, i32 } %327, 0, !dbg !53
  %329 = extractvalue { i32, i32, i32, i32 } %327, 1, !dbg !53
  %330 = extractvalue { i32, i32, i32, i32 } %327, 2, !dbg !53
  %331 = extractvalue { i32, i32, i32, i32 } %327, 3, !dbg !53
  %332 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %317, i1 %30) #2, !dbg !53
  %333 = extractvalue { i32, i32, i32, i32 } %332, 0, !dbg !53
  %334 = extractvalue { i32, i32, i32, i32 } %332, 1, !dbg !53
  %335 = extractvalue { i32, i32, i32, i32 } %332, 2, !dbg !53
  %336 = extractvalue { i32, i32, i32, i32 } %332, 3, !dbg !53
  %337 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %321, i1 %31) #2, !dbg !53
  %338 = extractvalue { i32, i32, i32, i32 } %337, 0, !dbg !53
  %339 = extractvalue { i32, i32, i32, i32 } %337, 1, !dbg !53
  %340 = extractvalue { i32, i32, i32, i32 } %337, 2, !dbg !53
  %341 = extractvalue { i32, i32, i32, i32 } %337, 3, !dbg !53
  %342 = lshr i64 %133, 61, !dbg !54
  %343 = and i64 %342, 4, !dbg !54
  %344 = add i64 %343, %133, !dbg !54
  %345 = lshr i64 %137, 61, !dbg !54
  %346 = and i64 %345, 4, !dbg !54
  %347 = add i64 %346, %137, !dbg !54
  %348 = lshr i64 %141, 61, !dbg !54
  %349 = and i64 %348, 4, !dbg !54
  %350 = add i64 %349, %141, !dbg !54
  %351 = lshr i64 %145, 61, !dbg !54
  %352 = and i64 %351, 4, !dbg !54
  %353 = add i64 %352, %145, !dbg !54
  %354 = shl i64 %344, 10, !dbg !55
  %355 = shl i64 %347, 10, !dbg !55
  %356 = shl i64 %350, 10, !dbg !55
  %357 = shl i64 %353, 10, !dbg !55
  %358 = getelementptr float, ptr addrspace(1) %259, i64 %354, !dbg !56
  %359 = getelementptr float, ptr addrspace(1) %358, i64 %257, !dbg !56
  %360 = getelementptr float, ptr addrspace(1) %263, i64 %355, !dbg !56
  %361 = getelementptr float, ptr addrspace(1) %360, i64 %257, !dbg !56
  %362 = getelementptr float, ptr addrspace(1) %267, i64 %356, !dbg !56
  %363 = getelementptr float, ptr addrspace(1) %362, i64 %257, !dbg !56
  %364 = getelementptr float, ptr addrspace(1) %271, i64 %357, !dbg !56
  %365 = getelementptr float, ptr addrspace(1) %364, i64 %257, !dbg !56
  %366 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %359, i1 %28) #2, !dbg !57
  %367 = extractvalue { i32, i32, i32, i32 } %366, 0, !dbg !57
  %368 = extractvalue { i32, i32, i32, i32 } %366, 1, !dbg !57
  %369 = extractvalue { i32, i32, i32, i32 } %366, 2, !dbg !57
  %370 = extractvalue { i32, i32, i32, i32 } %366, 3, !dbg !57
  %371 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %361, i1 %29) #2, !dbg !57
  %372 = extractvalue { i32, i32, i32, i32 } %371, 0, !dbg !57
  %373 = extractvalue { i32, i32, i32, i32 } %371, 1, !dbg !57
  %374 = extractvalue { i32, i32, i32, i32 } %371, 2, !dbg !57
  %375 = extractvalue { i32, i32, i32, i32 } %371, 3, !dbg !57
  %376 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %363, i1 %30) #2, !dbg !57
  %377 = extractvalue { i32, i32, i32, i32 } %376, 0, !dbg !57
  %378 = extractvalue { i32, i32, i32, i32 } %376, 1, !dbg !57
  %379 = extractvalue { i32, i32, i32, i32 } %376, 2, !dbg !57
  %380 = extractvalue { i32, i32, i32, i32 } %376, 3, !dbg !57
  %381 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %365, i1 %31) #2, !dbg !57
  %382 = extractvalue { i32, i32, i32, i32 } %381, 0, !dbg !57
  %383 = extractvalue { i32, i32, i32, i32 } %381, 1, !dbg !57
  %384 = extractvalue { i32, i32, i32, i32 } %381, 2, !dbg !57
  %385 = extractvalue { i32, i32, i32, i32 } %381, 3, !dbg !57
  %386 = getelementptr float, ptr addrspace(1) %307, i64 %354, !dbg !58
  %387 = getelementptr float, ptr addrspace(1) %386, i64 %257, !dbg !58
  %388 = getelementptr float, ptr addrspace(1) %311, i64 %355, !dbg !58
  %389 = getelementptr float, ptr addrspace(1) %388, i64 %257, !dbg !58
  %390 = getelementptr float, ptr addrspace(1) %315, i64 %356, !dbg !58
  %391 = getelementptr float, ptr addrspace(1) %390, i64 %257, !dbg !58
  %392 = getelementptr float, ptr addrspace(1) %319, i64 %357, !dbg !58
  %393 = getelementptr float, ptr addrspace(1) %392, i64 %257, !dbg !58
  %394 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %387, i1 %28) #2, !dbg !59
  %395 = extractvalue { i32, i32, i32, i32 } %394, 0, !dbg !59
  %396 = extractvalue { i32, i32, i32, i32 } %394, 1, !dbg !59
  %397 = extractvalue { i32, i32, i32, i32 } %394, 2, !dbg !59
  %398 = extractvalue { i32, i32, i32, i32 } %394, 3, !dbg !59
  %399 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %389, i1 %29) #2, !dbg !59
  %400 = extractvalue { i32, i32, i32, i32 } %399, 0, !dbg !59
  %401 = extractvalue { i32, i32, i32, i32 } %399, 1, !dbg !59
  %402 = extractvalue { i32, i32, i32, i32 } %399, 2, !dbg !59
  %403 = extractvalue { i32, i32, i32, i32 } %399, 3, !dbg !59
  %404 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %391, i1 %30) #2, !dbg !59
  %405 = extractvalue { i32, i32, i32, i32 } %404, 0, !dbg !59
  %406 = extractvalue { i32, i32, i32, i32 } %404, 1, !dbg !59
  %407 = extractvalue { i32, i32, i32, i32 } %404, 2, !dbg !59
  %408 = extractvalue { i32, i32, i32, i32 } %404, 3, !dbg !59
  %409 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %393, i1 %31) #2, !dbg !59
  %410 = extractvalue { i32, i32, i32, i32 } %409, 0, !dbg !59
  %411 = extractvalue { i32, i32, i32, i32 } %409, 1, !dbg !59
  %412 = extractvalue { i32, i32, i32, i32 } %409, 2, !dbg !59
  %413 = extractvalue { i32, i32, i32, i32 } %409, 3, !dbg !59
  %414 = insertelement <2 x i32> poison, i32 %367, i64 0, !dbg !57
  %415 = insertelement <2 x i32> %414, i32 %275, i64 1, !dbg !57
  %416 = bitcast <2 x i32> %415 to <2 x float>, !dbg !57
  %417 = insertelement <2 x i32> poison, i32 %395, i64 0, !dbg !59
  %418 = insertelement <2 x i32> %417, i32 %323, i64 1, !dbg !59
  %419 = bitcast <2 x i32> %418 to <2 x float>, !dbg !59
  %420 = fsub <2 x float> %419, %416, !dbg !60
  %421 = insertelement <2 x i32> poison, i32 %113, i64 0, !dbg !61
  %422 = bitcast <2 x i32> %421 to <2 x float>, !dbg !61
  %423 = shufflevector <2 x float> %422, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !61
  %424 = fmul <2 x float> %420, %423, !dbg !61
  %425 = fadd <2 x float> %424, %416, !dbg !62
  %426 = insertelement <2 x i32> poison, i32 %368, i64 0, !dbg !57
  %427 = insertelement <2 x i32> %426, i32 %276, i64 1, !dbg !57
  %428 = bitcast <2 x i32> %427 to <2 x float>, !dbg !57
  %429 = insertelement <2 x i32> poison, i32 %396, i64 0, !dbg !59
  %430 = insertelement <2 x i32> %429, i32 %324, i64 1, !dbg !59
  %431 = bitcast <2 x i32> %430 to <2 x float>, !dbg !59
  %432 = fsub <2 x float> %431, %428, !dbg !60
  %433 = fmul <2 x float> %432, %423, !dbg !61
  %434 = fadd <2 x float> %433, %428, !dbg !62
  %435 = insertelement <2 x i32> poison, i32 %369, i64 0, !dbg !57
  %436 = insertelement <2 x i32> %435, i32 %277, i64 1, !dbg !57
  %437 = bitcast <2 x i32> %436 to <2 x float>, !dbg !57
  %438 = insertelement <2 x i32> poison, i32 %397, i64 0, !dbg !59
  %439 = insertelement <2 x i32> %438, i32 %325, i64 1, !dbg !59
  %440 = bitcast <2 x i32> %439 to <2 x float>, !dbg !59
  %441 = fsub <2 x float> %440, %437, !dbg !60
  %442 = fmul <2 x float> %441, %423, !dbg !61
  %443 = fadd <2 x float> %442, %437, !dbg !62
  %444 = insertelement <2 x i32> poison, i32 %370, i64 0, !dbg !57
  %445 = insertelement <2 x i32> %444, i32 %278, i64 1, !dbg !57
  %446 = bitcast <2 x i32> %445 to <2 x float>, !dbg !57
  %447 = insertelement <2 x i32> poison, i32 %398, i64 0, !dbg !59
  %448 = insertelement <2 x i32> %447, i32 %326, i64 1, !dbg !59
  %449 = bitcast <2 x i32> %448 to <2 x float>, !dbg !59
  %450 = fsub <2 x float> %449, %446, !dbg !60
  %451 = fmul <2 x float> %450, %423, !dbg !61
  %452 = fadd <2 x float> %451, %446, !dbg !62
  %453 = insertelement <2 x i32> poison, i32 %372, i64 0, !dbg !57
  %454 = insertelement <2 x i32> %453, i32 %280, i64 1, !dbg !57
  %455 = bitcast <2 x i32> %454 to <2 x float>, !dbg !57
  %456 = insertelement <2 x i32> poison, i32 %400, i64 0, !dbg !59
  %457 = insertelement <2 x i32> %456, i32 %328, i64 1, !dbg !59
  %458 = bitcast <2 x i32> %457 to <2 x float>, !dbg !59
  %459 = fsub <2 x float> %458, %455, !dbg !60
  %460 = insertelement <2 x i32> poison, i32 %117, i64 0, !dbg !61
  %461 = bitcast <2 x i32> %460 to <2 x float>, !dbg !61
  %462 = shufflevector <2 x float> %461, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !61
  %463 = fmul <2 x float> %459, %462, !dbg !61
  %464 = fadd <2 x float> %463, %455, !dbg !62
  %465 = insertelement <2 x i32> poison, i32 %373, i64 0, !dbg !57
  %466 = insertelement <2 x i32> %465, i32 %281, i64 1, !dbg !57
  %467 = bitcast <2 x i32> %466 to <2 x float>, !dbg !57
  %468 = insertelement <2 x i32> poison, i32 %401, i64 0, !dbg !59
  %469 = insertelement <2 x i32> %468, i32 %329, i64 1, !dbg !59
  %470 = bitcast <2 x i32> %469 to <2 x float>, !dbg !59
  %471 = fsub <2 x float> %470, %467, !dbg !60
  %472 = fmul <2 x float> %471, %462, !dbg !61
  %473 = fadd <2 x float> %472, %467, !dbg !62
  %474 = insertelement <2 x i32> poison, i32 %374, i64 0, !dbg !57
  %475 = insertelement <2 x i32> %474, i32 %282, i64 1, !dbg !57
  %476 = bitcast <2 x i32> %475 to <2 x float>, !dbg !57
  %477 = insertelement <2 x i32> poison, i32 %402, i64 0, !dbg !59
  %478 = insertelement <2 x i32> %477, i32 %330, i64 1, !dbg !59
  %479 = bitcast <2 x i32> %478 to <2 x float>, !dbg !59
  %480 = fsub <2 x float> %479, %476, !dbg !60
  %481 = fmul <2 x float> %480, %462, !dbg !61
  %482 = fadd <2 x float> %481, %476, !dbg !62
  %483 = insertelement <2 x i32> poison, i32 %375, i64 0, !dbg !57
  %484 = insertelement <2 x i32> %483, i32 %283, i64 1, !dbg !57
  %485 = bitcast <2 x i32> %484 to <2 x float>, !dbg !57
  %486 = insertelement <2 x i32> poison, i32 %403, i64 0, !dbg !59
  %487 = insertelement <2 x i32> %486, i32 %331, i64 1, !dbg !59
  %488 = bitcast <2 x i32> %487 to <2 x float>, !dbg !59
  %489 = fsub <2 x float> %488, %485, !dbg !60
  %490 = fmul <2 x float> %489, %462, !dbg !61
  %491 = fadd <2 x float> %490, %485, !dbg !62
  %492 = insertelement <2 x i32> poison, i32 %377, i64 0, !dbg !57
  %493 = insertelement <2 x i32> %492, i32 %285, i64 1, !dbg !57
  %494 = bitcast <2 x i32> %493 to <2 x float>, !dbg !57
  %495 = insertelement <2 x i32> poison, i32 %405, i64 0, !dbg !59
  %496 = insertelement <2 x i32> %495, i32 %333, i64 1, !dbg !59
  %497 = bitcast <2 x i32> %496 to <2 x float>, !dbg !59
  %498 = fsub <2 x float> %497, %494, !dbg !60
  %499 = insertelement <2 x i32> poison, i32 %121, i64 0, !dbg !61
  %500 = bitcast <2 x i32> %499 to <2 x float>, !dbg !61
  %501 = shufflevector <2 x float> %500, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !61
  %502 = fmul <2 x float> %498, %501, !dbg !61
  %503 = fadd <2 x float> %502, %494, !dbg !62
  %504 = insertelement <2 x i32> poison, i32 %378, i64 0, !dbg !57
  %505 = insertelement <2 x i32> %504, i32 %286, i64 1, !dbg !57
  %506 = bitcast <2 x i32> %505 to <2 x float>, !dbg !57
  %507 = insertelement <2 x i32> poison, i32 %406, i64 0, !dbg !59
  %508 = insertelement <2 x i32> %507, i32 %334, i64 1, !dbg !59
  %509 = bitcast <2 x i32> %508 to <2 x float>, !dbg !59
  %510 = fsub <2 x float> %509, %506, !dbg !60
  %511 = fmul <2 x float> %510, %501, !dbg !61
  %512 = fadd <2 x float> %511, %506, !dbg !62
  %513 = insertelement <2 x i32> poison, i32 %379, i64 0, !dbg !57
  %514 = insertelement <2 x i32> %513, i32 %287, i64 1, !dbg !57
  %515 = bitcast <2 x i32> %514 to <2 x float>, !dbg !57
  %516 = insertelement <2 x i32> poison, i32 %407, i64 0, !dbg !59
  %517 = insertelement <2 x i32> %516, i32 %335, i64 1, !dbg !59
  %518 = bitcast <2 x i32> %517 to <2 x float>, !dbg !59
  %519 = fsub <2 x float> %518, %515, !dbg !60
  %520 = fmul <2 x float> %519, %501, !dbg !61
  %521 = fadd <2 x float> %520, %515, !dbg !62
  %522 = insertelement <2 x i32> poison, i32 %380, i64 0, !dbg !57
  %523 = insertelement <2 x i32> %522, i32 %288, i64 1, !dbg !57
  %524 = bitcast <2 x i32> %523 to <2 x float>, !dbg !57
  %525 = insertelement <2 x i32> poison, i32 %408, i64 0, !dbg !59
  %526 = insertelement <2 x i32> %525, i32 %336, i64 1, !dbg !59
  %527 = bitcast <2 x i32> %526 to <2 x float>, !dbg !59
  %528 = fsub <2 x float> %527, %524, !dbg !60
  %529 = fmul <2 x float> %528, %501, !dbg !61
  %530 = fadd <2 x float> %529, %524, !dbg !62
  %531 = insertelement <2 x i32> poison, i32 %382, i64 0, !dbg !57
  %532 = insertelement <2 x i32> %531, i32 %290, i64 1, !dbg !57
  %533 = bitcast <2 x i32> %532 to <2 x float>, !dbg !57
  %534 = insertelement <2 x i32> poison, i32 %410, i64 0, !dbg !59
  %535 = insertelement <2 x i32> %534, i32 %338, i64 1, !dbg !59
  %536 = bitcast <2 x i32> %535 to <2 x float>, !dbg !59
  %537 = fsub <2 x float> %536, %533, !dbg !60
  %538 = insertelement <2 x i32> poison, i32 %125, i64 0, !dbg !61
  %539 = bitcast <2 x i32> %538 to <2 x float>, !dbg !61
  %540 = shufflevector <2 x float> %539, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !61
  %541 = fmul <2 x float> %537, %540, !dbg !61
  %542 = fadd <2 x float> %541, %533, !dbg !62
  %543 = insertelement <2 x i32> poison, i32 %383, i64 0, !dbg !57
  %544 = insertelement <2 x i32> %543, i32 %291, i64 1, !dbg !57
  %545 = bitcast <2 x i32> %544 to <2 x float>, !dbg !57
  %546 = insertelement <2 x i32> poison, i32 %411, i64 0, !dbg !59
  %547 = insertelement <2 x i32> %546, i32 %339, i64 1, !dbg !59
  %548 = bitcast <2 x i32> %547 to <2 x float>, !dbg !59
  %549 = fsub <2 x float> %548, %545, !dbg !60
  %550 = fmul <2 x float> %549, %540, !dbg !61
  %551 = fadd <2 x float> %550, %545, !dbg !62
  %552 = insertelement <2 x i32> poison, i32 %384, i64 0, !dbg !57
  %553 = insertelement <2 x i32> %552, i32 %292, i64 1, !dbg !57
  %554 = bitcast <2 x i32> %553 to <2 x float>, !dbg !57
  %555 = insertelement <2 x i32> poison, i32 %412, i64 0, !dbg !59
  %556 = insertelement <2 x i32> %555, i32 %340, i64 1, !dbg !59
  %557 = bitcast <2 x i32> %556 to <2 x float>, !dbg !59
  %558 = fsub <2 x float> %557, %554, !dbg !60
  %559 = fmul <2 x float> %558, %540, !dbg !61
  %560 = fadd <2 x float> %559, %554, !dbg !62
  %561 = insertelement <2 x i32> poison, i32 %385, i64 0, !dbg !57
  %562 = insertelement <2 x i32> %561, i32 %293, i64 1, !dbg !57
  %563 = bitcast <2 x i32> %562 to <2 x float>, !dbg !57
  %564 = insertelement <2 x i32> poison, i32 %413, i64 0, !dbg !59
  %565 = insertelement <2 x i32> %564, i32 %341, i64 1, !dbg !59
  %566 = bitcast <2 x i32> %565 to <2 x float>, !dbg !59
  %567 = fsub <2 x float> %566, %563, !dbg !60
  %568 = fmul <2 x float> %567, %540, !dbg !61
  %569 = fadd <2 x float> %568, %563, !dbg !62
  %570 = extractelement <2 x float> %425, i64 0, !dbg !63
  %571 = extractelement <2 x float> %425, i64 1, !dbg !64
  %572 = fsub float %570, %571, !dbg !63
  %573 = extractelement <2 x float> %434, i64 0, !dbg !63
  %574 = extractelement <2 x float> %434, i64 1, !dbg !64
  %575 = fsub float %573, %574, !dbg !63
  %576 = extractelement <2 x float> %443, i64 0, !dbg !63
  %577 = extractelement <2 x float> %443, i64 1, !dbg !64
  %578 = fsub float %576, %577, !dbg !63
  %579 = extractelement <2 x float> %452, i64 0, !dbg !63
  %580 = extractelement <2 x float> %452, i64 1, !dbg !64
  %581 = fsub float %579, %580, !dbg !63
  %582 = extractelement <2 x float> %464, i64 0, !dbg !63
  %583 = extractelement <2 x float> %464, i64 1, !dbg !64
  %584 = fsub float %582, %583, !dbg !63
  %585 = extractelement <2 x float> %473, i64 0, !dbg !63
  %586 = extractelement <2 x float> %473, i64 1, !dbg !64
  %587 = fsub float %585, %586, !dbg !63
  %588 = extractelement <2 x float> %482, i64 0, !dbg !63
  %589 = extractelement <2 x float> %482, i64 1, !dbg !64
  %590 = fsub float %588, %589, !dbg !63
  %591 = extractelement <2 x float> %491, i64 0, !dbg !63
  %592 = extractelement <2 x float> %491, i64 1, !dbg !64
  %593 = fsub float %591, %592, !dbg !63
  %594 = extractelement <2 x float> %503, i64 0, !dbg !63
  %595 = extractelement <2 x float> %503, i64 1, !dbg !64
  %596 = fsub float %594, %595, !dbg !63
  %597 = extractelement <2 x float> %512, i64 0, !dbg !63
  %598 = extractelement <2 x float> %512, i64 1, !dbg !64
  %599 = fsub float %597, %598, !dbg !63
  %600 = extractelement <2 x float> %521, i64 0, !dbg !63
  %601 = extractelement <2 x float> %521, i64 1, !dbg !64
  %602 = fsub float %600, %601, !dbg !63
  %603 = extractelement <2 x float> %530, i64 0, !dbg !63
  %604 = extractelement <2 x float> %530, i64 1, !dbg !64
  %605 = fsub float %603, %604, !dbg !63
  %606 = extractelement <2 x float> %542, i64 0, !dbg !63
  %607 = extractelement <2 x float> %542, i64 1, !dbg !64
  %608 = fsub float %606, %607, !dbg !63
  %609 = extractelement <2 x float> %551, i64 0, !dbg !63
  %610 = extractelement <2 x float> %551, i64 1, !dbg !64
  %611 = fsub float %609, %610, !dbg !63
  %612 = extractelement <2 x float> %560, i64 0, !dbg !63
  %613 = extractelement <2 x float> %560, i64 1, !dbg !64
  %614 = fsub float %612, %613, !dbg !63
  %615 = extractelement <2 x float> %569, i64 0, !dbg !63
  %616 = extractelement <2 x float> %569, i64 1, !dbg !64
  %617 = fsub float %615, %616, !dbg !63
  %618 = fmul float %572, %154, !dbg !65
  %619 = fmul float %575, %154, !dbg !65
  %620 = fmul float %578, %154, !dbg !65
  %621 = fmul float %581, %154, !dbg !65
  %622 = fmul float %584, %159, !dbg !65
  %623 = fmul float %587, %159, !dbg !65
  %624 = fmul float %590, %159, !dbg !65
  %625 = fmul float %593, %159, !dbg !65
  %626 = fmul float %596, %164, !dbg !65
  %627 = fmul float %599, %164, !dbg !65
  %628 = fmul float %602, %164, !dbg !65
  %629 = fmul float %605, %164, !dbg !65
  %630 = fmul float %608, %169, !dbg !65
  %631 = fmul float %611, %169, !dbg !65
  %632 = fmul float %614, %169, !dbg !65
  %633 = fmul float %617, %169, !dbg !65
  %634 = fadd float %571, %618, !dbg !64
  %635 = fadd float %574, %619, !dbg !64
  %636 = fadd float %577, %620, !dbg !64
  %637 = fadd float %580, %621, !dbg !64
  %638 = fadd float %583, %622, !dbg !64
  %639 = fadd float %586, %623, !dbg !64
  %640 = fadd float %589, %624, !dbg !64
  %641 = fadd float %592, %625, !dbg !64
  %642 = fadd float %595, %626, !dbg !64
  %643 = fadd float %598, %627, !dbg !64
  %644 = fadd float %601, %628, !dbg !64
  %645 = fadd float %604, %629, !dbg !64
  %646 = fadd float %607, %630, !dbg !64
  %647 = fadd float %610, %631, !dbg !64
  %648 = fadd float %613, %632, !dbg !64
  %649 = fadd float %616, %633, !dbg !64
  %650 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %17, !dbg !66
  %651 = insertelement <1 x i32> poison, i32 %226, i64 0, !dbg !66
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %650, <1 x i32> %651, i1 true) #2, !dbg !66
  tail call void @llvm.nvvm.barrier0(), !dbg !66
  %652 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %16, !dbg !66
  %653 = load float, ptr addrspace(3) %652, align 16, !dbg !66
  %654 = getelementptr inbounds i8, ptr addrspace(3) %652, i32 4, !dbg !66
  %655 = load float, ptr addrspace(3) %654, align 4, !dbg !66
  %656 = getelementptr inbounds i8, ptr addrspace(3) %652, i32 8, !dbg !66
  %657 = load float, ptr addrspace(3) %656, align 8, !dbg !66
  %658 = getelementptr inbounds i8, ptr addrspace(3) %652, i32 12, !dbg !66
  %659 = load float, ptr addrspace(3) %658, align 4, !dbg !66
  %660 = fadd float %653, %193, !dbg !66
  %661 = fadd float %655, %194, !dbg !66
  %662 = fadd float %657, %195, !dbg !66
  %663 = fadd float %659, %196, !dbg !66
  %664 = fadd float %653, %202, !dbg !66
  %665 = fadd float %655, %203, !dbg !66
  %666 = fadd float %657, %204, !dbg !66
  %667 = fadd float %659, %205, !dbg !66
  %668 = fadd float %653, %211, !dbg !66
  %669 = fadd float %655, %212, !dbg !66
  %670 = fadd float %657, %213, !dbg !66
  %671 = fadd float %659, %214, !dbg !66
  %672 = fadd float %653, %220, !dbg !66
  %673 = fadd float %655, %221, !dbg !66
  %674 = fadd float %657, %222, !dbg !66
  %675 = fadd float %659, %223, !dbg !66
  %676 = fadd float %634, %660, !dbg !67
  %677 = fadd float %635, %661, !dbg !67
  %678 = fadd float %636, %662, !dbg !67
  %679 = fadd float %637, %663, !dbg !67
  %680 = fadd float %664, %638, !dbg !67
  %681 = fadd float %665, %639, !dbg !67
  %682 = fadd float %666, %640, !dbg !67
  %683 = fadd float %667, %641, !dbg !67
  %684 = fadd float %668, %642, !dbg !67
  %685 = fadd float %669, %643, !dbg !67
  %686 = fadd float %670, %644, !dbg !67
  %687 = fadd float %671, %645, !dbg !67
  %688 = fadd float %672, %646, !dbg !67
  %689 = fadd float %673, %647, !dbg !67
  %690 = fadd float %674, %648, !dbg !67
  %691 = fadd float %675, %649, !dbg !67
  tail call void @llvm.nvvm.barrier0(), !dbg !68
  %692 = bitcast float %676 to i32, !dbg !69
  %693 = bitcast float %677 to i32, !dbg !69
  %694 = bitcast float %678 to i32, !dbg !69
  %695 = bitcast float %679 to i32, !dbg !69
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %692, i32 %693, i32 %694, i32 %695, ptr addrspace(1) %181, i1 %28) #2, !dbg !69
  %696 = bitcast float %680 to i32, !dbg !69
  %697 = bitcast float %681 to i32, !dbg !69
  %698 = bitcast float %682 to i32, !dbg !69
  %699 = bitcast float %683 to i32, !dbg !69
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %696, i32 %697, i32 %698, i32 %699, ptr addrspace(1) %183, i1 %29) #2, !dbg !69
  %700 = bitcast float %684 to i32, !dbg !69
  %701 = bitcast float %685 to i32, !dbg !69
  %702 = bitcast float %686 to i32, !dbg !69
  %703 = bitcast float %687 to i32, !dbg !69
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %700, i32 %701, i32 %702, i32 %703, ptr addrspace(1) %185, i1 %30) #2, !dbg !69
  %704 = bitcast float %688 to i32, !dbg !69
  %705 = bitcast float %689 to i32, !dbg !69
  %706 = bitcast float %690 to i32, !dbg !69
  %707 = bitcast float %691 to i32, !dbg !69
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %704, i32 %705, i32 %706, i32 %707, ptr addrspace(1) %187, i1 %31) #2, !dbg !69
  ret void, !dbg !70
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cjqududxfuudhhhuehdosb7ggeznthyx3l4unayrjkzh3bg6tnaa.py", directory: "inductor_cache/jq")
!4 = !{ptr @triton_poi_fused__unsafe_index_add_convolution_mul_sub_28, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__unsafe_index_add_convolution_mul_sub_28, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__unsafe_index_add_convolution_mul_sub_28", linkageName: "triton_poi_fused__unsafe_index_add_convolution_mul_sub_28", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 28, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 31, column: 19, scope: !7)
!22 = !DILocation(line: 30, column: 19, scope: !7)
!23 = !DILocation(line: 34, column: 30, scope: !7)
!24 = !DILocation(line: 34, column: 35, scope: !7)
!25 = !DILocation(line: 35, column: 30, scope: !7)
!26 = !DILocation(line: 35, column: 35, scope: !7)
!27 = !DILocation(line: 36, column: 31, scope: !7)
!28 = !DILocation(line: 36, column: 36, scope: !7)
!29 = !DILocation(line: 37, column: 31, scope: !7)
!30 = !DILocation(line: 37, column: 36, scope: !7)
!31 = !DILocation(line: 38, column: 31, scope: !7)
!32 = !DILocation(line: 38, column: 36, scope: !7)
!33 = !DILocation(line: 39, column: 31, scope: !7)
!34 = !DILocation(line: 39, column: 36, scope: !7)
!35 = !DILocation(line: 40, column: 44, scope: !7)
!36 = !DILocation(line: 40, column: 55, scope: !7)
!37 = !DILocation(line: 40, column: 40, scope: !7)
!38 = !DILocation(line: 40, column: 49, scope: !7)
!39 = !DILocation(line: 40, column: 35, scope: !7)
!40 = !DILocation(line: 40, column: 60, scope: !7)
!41 = !DILocation(line: 41, column: 31, scope: !7)
!42 = !DILocation(line: 41, column: 36, scope: !7)
!43 = !DILocation(line: 45, column: 32, scope: !7)
!44 = !DILocation(line: 48, column: 32, scope: !7)
!45 = !DILocation(line: 49, column: 35, scope: !7)
!46 = !DILocation(line: 49, column: 51, scope: !7)
!47 = !DILocation(line: 49, column: 63, scope: !7)
!48 = !DILocation(line: 49, column: 58, scope: !7)
!49 = !DILocation(line: 49, column: 30, scope: !7)
!50 = !DILocation(line: 49, column: 68, scope: !7)
!51 = !DILocation(line: 52, column: 35, scope: !7)
!52 = !DILocation(line: 53, column: 31, scope: !7)
!53 = !DILocation(line: 53, column: 70, scope: !7)
!54 = !DILocation(line: 59, column: 35, scope: !7)
!55 = !DILocation(line: 60, column: 52, scope: !7)
!56 = !DILocation(line: 60, column: 31, scope: !7)
!57 = !DILocation(line: 60, column: 70, scope: !7)
!58 = !DILocation(line: 61, column: 31, scope: !7)
!59 = !DILocation(line: 61, column: 71, scope: !7)
!60 = !DILocation(line: 62, column: 20, scope: !7)
!61 = !DILocation(line: 63, column: 20, scope: !7)
!62 = !DILocation(line: 64, column: 20, scope: !7)
!63 = !DILocation(line: 65, column: 20, scope: !7)
!64 = !DILocation(line: 67, column: 20, scope: !7)
!65 = !DILocation(line: 66, column: 20, scope: !7)
!66 = !DILocation(line: 68, column: 20, scope: !7)
!67 = !DILocation(line: 69, column: 20, scope: !7)
!68 = !DILocation(line: 70, column: 4, scope: !7)
!69 = !DILocation(line: 71, column: 60, scope: !7)
!70 = !DILocation(line: 71, column: 4, scope: !7)
