; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_red_fused__native_batch_norm_legit_no_training_linalg_vector_norm_mean_relu_sub_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %7 = shl i32 %6, 1, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 5, !dbg !12
  %10 = lshr i32 %8, 6, !dbg !12
  %.lobit = and i32 %10, 1, !dbg !12
  %11 = and i32 %8, 31, !dbg !12
  %12 = and i32 %8, 1, !dbg !12
  %13 = or disjoint i32 %7, %.lobit, !dbg !13
  %14 = or disjoint i32 %7, %12, !dbg !13
  %15 = shl i32 %8, 2, !dbg !14
  %16 = and i32 %15, 252, !dbg !14
  %17 = and i32 %8, 127, !dbg !14
  %18 = or disjoint i32 %17, 128, !dbg !14
  %.frozen = freeze i32 %7, !dbg !15
  %19 = sdiv i32 %.frozen, 4096, !dbg !15
  %20 = mul i32 %19, 4096, !dbg !16
  %.decomposed = sub i32 %.frozen, %20, !dbg !16
  %21 = sdiv i32 %13, 4096, !dbg !15
  %22 = shl nuw nsw i32 %17, 12, !dbg !17
  %23 = shl nuw nsw i32 %18, 12, !dbg !17
  %24 = shl i32 %19, 20, !dbg !18
  %25 = add i32 %24, %.decomposed, !dbg !19
  %26 = add i32 %25, %22, !dbg !20
  %27 = add i32 %25, %23, !dbg !20
  %28 = sext i32 %26 to i64, !dbg !21
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !21
  %30 = sext i32 %27 to i64, !dbg !21
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !21
  %32 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %29, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !22
  %33 = extractvalue { i32, i32 } %32, 0, !dbg !22
  %34 = extractvalue { i32, i32 } %32, 1, !dbg !22
  %35 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_first.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %31, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !22
  %36 = extractvalue { i32, i32 } %35, 0, !dbg !22
  %37 = extractvalue { i32, i32 } %35, 1, !dbg !22
  %38 = and i32 %15, 508, !dbg !22
  %39 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %17, !dbg !22
  %40 = insertelement <1 x i32> poison, i32 %33, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %39, <1 x i32> %40, i1 true) #3, !dbg !22
  %41 = getelementptr inbounds i8, ptr addrspace(3) %39, i32 1040, !dbg !22
  %42 = insertelement <1 x i32> poison, i32 %34, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %41, <1 x i32> %42, i1 true) #3, !dbg !22
  %43 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %18, !dbg !22
  %44 = insertelement <1 x i32> poison, i32 %36, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %43, <1 x i32> %44, i1 true) #3, !dbg !22
  %45 = getelementptr inbounds i8, ptr addrspace(3) %39, i32 1552, !dbg !22
  %46 = insertelement <1 x i32> poison, i32 %37, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %45, <1 x i32> %46, i1 true) #3, !dbg !22
  tail call void @llvm.nvvm.barrier0(), !dbg !22
  %47 = lshr i32 %15, 6, !dbg !22
  %48 = and i32 %47, 4, !dbg !22
  %49 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %48, !dbg !22
  %50 = getelementptr inbounds float, ptr addrspace(3) %49, i32 %38, !dbg !22
  %51 = getelementptr inbounds i8, ptr addrspace(3) %50, i32 8, !dbg !22
  %52 = shl nsw i32 %21, 8, !dbg !23
  %53 = or disjoint i32 %52, %16, !dbg !24
  %54 = sext i32 %53 to i64, !dbg !25
  %55 = getelementptr float, ptr addrspace(1) %1, i64 %54, !dbg !25
  %56 = load <2 x float>, ptr addrspace(3) %51, align 8, !dbg !22
  %57 = load <2 x float>, ptr addrspace(3) %50, align 16, !dbg !22
  %58 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %55, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !26
  %59 = extractvalue { i32, i32, i32, i32 } %58, 0, !dbg !26
  %60 = extractvalue { i32, i32, i32, i32 } %58, 1, !dbg !26
  %61 = extractvalue { i32, i32, i32, i32 } %58, 2, !dbg !26
  %62 = extractvalue { i32, i32, i32, i32 } %58, 3, !dbg !26
  %63 = bitcast i32 %59 to float, !dbg !26
  %64 = bitcast i32 %60 to float, !dbg !26
  %65 = bitcast i32 %61 to float, !dbg !26
  %66 = bitcast i32 %62 to float, !dbg !26
  %67 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %63, float 4.096000e+03) #3, !dbg !27
  %68 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %64, float 4.096000e+03) #3, !dbg !27
  %69 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %65, float 4.096000e+03) #3, !dbg !27
  %70 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %66, float 4.096000e+03) #3, !dbg !27
  %71 = insertelement <2 x float> poison, float %67, i64 0, !dbg !28
  %72 = insertelement <2 x float> %71, float %68, i64 1, !dbg !28
  %73 = fsub <2 x float> %57, %72, !dbg !28
  %74 = insertelement <2 x float> poison, float %69, i64 0, !dbg !28
  %75 = insertelement <2 x float> %74, float %70, i64 1, !dbg !28
  %76 = fsub <2 x float> %56, %75, !dbg !28
  %77 = fmul <2 x float> %73, %73, !dbg !29
  %78 = fmul <2 x float> %76, %76, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %shift = shufflevector <2 x float> %77, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !34
  %79 = fadd <2 x float> %77, %shift, !dbg !34
  %80 = fadd <2 x float> %79, %78, !dbg !34
  %shift5 = shufflevector <2 x float> %78, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !34
  %81 = fadd <2 x float> %80, %shift5, !dbg !34
  %82 = extractelement <2 x float> %81, i64 0, !dbg !34
  %83 = bitcast float %82 to i32, !dbg !30
  %84 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %83, i32 16, i32 31), !dbg !30
  %85 = bitcast i32 %84 to float, !dbg !30
  %86 = fadd float %82, %85, !dbg !34
  %87 = bitcast float %86 to i32, !dbg !30
  %88 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %87, i32 8, i32 31), !dbg !30
  %89 = bitcast i32 %88 to float, !dbg !30
  %90 = fadd float %86, %89, !dbg !34
  %91 = bitcast float %90 to i32, !dbg !30
  %92 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %91, i32 4, i32 31), !dbg !30
  %93 = bitcast i32 %92 to float, !dbg !30
  %94 = fadd float %90, %93, !dbg !34
  %95 = bitcast float %94 to i32, !dbg !30
  %96 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %95, i32 2, i32 31), !dbg !30
  %97 = bitcast i32 %96 to float, !dbg !30
  %98 = fadd float %94, %97, !dbg !34
  %99 = bitcast float %98 to i32, !dbg !30
  %100 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %99, i32 1, i32 31), !dbg !30
  %101 = bitcast i32 %100 to float, !dbg !30
  %102 = fadd float %98, %101, !dbg !34
  %103 = icmp eq i32 %11, 0, !dbg !30
  %104 = and i32 %9, 1, !dbg !30
  %105 = shl nuw nsw i32 %.lobit, 1, !dbg !30
  %106 = or disjoint i32 %105, %104, !dbg !30
  %107 = getelementptr float, ptr addrspace(3) @global_smem, i32 %106, !dbg !30
  %108 = bitcast float %102 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %107, <1 x i32> %108, i1 %103) #3, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %109 = icmp slt i32 %8, 4, !dbg !30
  %110 = getelementptr float, ptr addrspace(3) @global_smem, i32 %8, !dbg !30
  %111 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %110, i1 %109) #3, !dbg !30
  %112 = bitcast i32 %111 to float, !dbg !30
  %113 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %111, i32 1, i32 31), !dbg !30
  %114 = bitcast i32 %113 to float, !dbg !30
  %115 = fadd float %112, %114, !dbg !34
  %116 = icmp eq i32 %12, 0, !dbg !30
  %117 = and i1 %109, %116, !dbg !30
  %118 = bitcast float %115 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %110, <1 x i32> %118, i1 %117) #3, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %119 = getelementptr float, ptr addrspace(3) @global_smem, i32 %105, !dbg !30
  %120 = load i32, ptr addrspace(3) %119, align 8, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %121 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %.lobit, !dbg !36
  %122 = insertelement <1 x i32> poison, i32 %120, i64 0, !dbg !36
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %121, <1 x i32> %122, i1 true) #3, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !36
  %123 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !36
  %124 = load i32, ptr addrspace(3) %123, align 4, !dbg !36
  %125 = sext i32 %14 to i64, !dbg !37
  %126 = getelementptr float, ptr addrspace(1) %2, i64 %125, !dbg !37
  %127 = lshr i32 %11, 1, !dbg !38
  %128 = shl nuw nsw i32 %9, 4, !dbg !38
  %129 = and i32 %128, 48, !dbg !38
  %130 = or disjoint i32 %129, %127, !dbg !38
  %131 = icmp eq i32 %130, 0, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %124, ptr addrspace(1) %126, i1 %131) #3, !dbg !38
  ret void, !dbg !39
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cy5icljm3sfybh3yspktq5nnegulomn4ldlototzcxuwkppmcqa6.py", directory: "inductor_cache/y5")
!4 = !{ptr @triton_red_fused__native_batch_norm_legit_no_training_linalg_vector_norm_mean_relu_sub_2, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused__native_batch_norm_legit_no_training_linalg_vector_norm_mean_relu_sub_2, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused__native_batch_norm_legit_no_training_linalg_vector_norm_mean_relu_sub_2", linkageName: "triton_red_fused__native_batch_norm_legit_no_training_linalg_vector_norm_mean_relu_sub_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 33, scope: !7)
!15 = !DILocation(line: 27, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 34, column: 44, scope: !7)
!18 = !DILocation(line: 34, column: 57, scope: !7)
!19 = !DILocation(line: 34, column: 39, scope: !7)
!20 = !DILocation(line: 34, column: 49, scope: !7)
!21 = !DILocation(line: 34, column: 34, scope: !7)
!22 = !DILocation(line: 34, column: 62, scope: !7)
!23 = !DILocation(line: 35, column: 43, scope: !7)
!24 = !DILocation(line: 35, column: 39, scope: !7)
!25 = !DILocation(line: 35, column: 34, scope: !7)
!26 = !DILocation(line: 35, column: 48, scope: !7)
!27 = !DILocation(line: 37, column: 22, scope: !7)
!28 = !DILocation(line: 38, column: 22, scope: !7)
!29 = !DILocation(line: 39, column: 22, scope: !7)
!30 = !DILocation(line: 267, column: 36, scope: !31, inlinedAt: !33)
!31 = distinct !DILexicalBlockFile(scope: !7, file: !32, discriminator: 0)
!32 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!33 = !DILocation(line: 43, column: 25, scope: !7)
!34 = !DILocation(line: 256, column: 15, scope: !35, inlinedAt: !33)
!35 = distinct !DILexicalBlockFile(scope: !31, file: !32, discriminator: 0)
!36 = !DILocation(line: 43, column: 28, scope: !7)
!37 = !DILocation(line: 44, column: 25, scope: !7)
!38 = !DILocation(line: 44, column: 36, scope: !7)
!39 = !DILocation(line: 44, column: 4, scope: !7)
