; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_add_max_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %9 = icmp slt i32 %8, 976, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = and i32 %10, 31, !dbg !12
  %12 = lshr i32 %10, 5, !dbg !12
  %13 = and i32 %10, 63, !dbg !12
  %14 = icmp samesign ult i32 %13, 61, !dbg !13
  %.frozen = freeze i32 %8, !dbg !14
  %15 = sdiv i32 %.frozen, 61, !dbg !14
  %16 = mul i32 %15, 61, !dbg !15
  %.decomposed = sub i32 %.frozen, %16, !dbg !15
  %17 = sdiv i32 %8, 244, !dbg !16
  %18 = srem i32 %15, 4, !dbg !17
  %19 = mul nuw nsw i32 %13, 61, !dbg !18
  %20 = add nsw i32 %.decomposed, %19, !dbg !19
  %21 = mul i32 %17, 3721, !dbg !20
  %22 = add i32 %20, %21, !dbg !21
  %23 = sext i32 %22 to i64, !dbg !22
  %24 = getelementptr float, ptr addrspace(1) %0, i64 %23, !dbg !22
  %25 = and i1 %14, %9, !dbg !23
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %24, i1 %25, i32 0, i1 %25) #3, !dbg !24
  %27 = bitcast i32 %26 to float, !dbg !24
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %1, i1 true) #3, !dbg !25
  %29 = bitcast i32 %28 to float, !dbg !25
  %30 = sext i32 %18 to i64, !dbg !26
  %31 = getelementptr float, ptr addrspace(1) %2, i64 %30, !dbg !26
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 %9) #3, !dbg !27
  %33 = bitcast i32 %32 to float, !dbg !27
  %34 = fadd float %27, %29, !dbg !28
  %35 = fadd float %34, %33, !dbg !29
  %36 = select i1 %25, float %35, float 0xFFF0000000000000, !dbg !30
  %37 = bitcast float %36 to i32, !dbg !31
  %38 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %37, i32 16, i32 31), !dbg !31
  %39 = bitcast i32 %38 to float, !dbg !31
  %40 = fcmp ogt float %36, %39, !dbg !35
  %41 = fcmp uno float %36, 0.000000e+00, !dbg !37
  %42 = or i1 %40, %41, !dbg !38
  %43 = select i1 %42, float %36, float %39, !dbg !39
  %44 = bitcast float %43 to i32, !dbg !31
  %45 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %44, i32 8, i32 31), !dbg !31
  %46 = bitcast i32 %45 to float, !dbg !31
  %47 = fcmp ogt float %43, %46, !dbg !35
  %48 = fcmp uno float %43, 0.000000e+00, !dbg !37
  %49 = or i1 %47, %48, !dbg !38
  %50 = select i1 %49, float %43, float %46, !dbg !39
  %51 = bitcast float %50 to i32, !dbg !31
  %52 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %51, i32 4, i32 31), !dbg !31
  %53 = bitcast i32 %52 to float, !dbg !31
  %54 = fcmp ogt float %50, %53, !dbg !35
  %55 = fcmp uno float %50, 0.000000e+00, !dbg !37
  %56 = or i1 %54, %55, !dbg !38
  %57 = select i1 %56, float %50, float %53, !dbg !39
  %58 = bitcast float %57 to i32, !dbg !31
  %59 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %58, i32 2, i32 31), !dbg !31
  %60 = bitcast i32 %59 to float, !dbg !31
  %61 = fcmp ogt float %57, %60, !dbg !35
  %62 = fcmp uno float %57, 0.000000e+00, !dbg !37
  %63 = or i1 %61, %62, !dbg !38
  %64 = select i1 %63, float %57, float %60, !dbg !39
  %65 = bitcast float %64 to i32, !dbg !31
  %66 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %65, i32 1, i32 31), !dbg !31
  %67 = bitcast i32 %66 to float, !dbg !31
  %68 = fcmp ogt float %64, %67, !dbg !35
  %69 = fcmp uno float %64, 0.000000e+00, !dbg !37
  %70 = or i1 %68, %69, !dbg !38
  %71 = icmp eq i32 %11, 0, !dbg !31
  %72 = and i32 %12, 1, !dbg !31
  %73 = zext nneg i32 %72 to i64, !dbg !31
  %74 = getelementptr float, ptr addrspace(3) @global_smem, i64 %73, !dbg !31
  %75 = select i1 %70, i32 %65, i32 %66, !dbg !39
  %76 = insertelement <1 x i32> poison, i32 %75, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %74, <1 x i32> %76, i1 %71) #3, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %77 = icmp slt i32 %10, 2, !dbg !31
  %78 = sext i32 %10 to i64, !dbg !31
  %79 = getelementptr float, ptr addrspace(3) @global_smem, i64 %78, !dbg !31
  %80 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %79, i1 %77) #3, !dbg !31
  %81 = bitcast i32 %80 to float, !dbg !31
  %82 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %80, i32 1, i32 31), !dbg !31
  %83 = bitcast i32 %82 to float, !dbg !31
  %84 = fcmp ogt float %81, %83, !dbg !35
  %85 = fcmp uno float %81, 0.000000e+00, !dbg !37
  %86 = or i1 %85, %84, !dbg !38
  %87 = and i32 %10, 1, !dbg !31
  %88 = icmp eq i32 %87, 0, !dbg !31
  %89 = and i1 %77, %88, !dbg !31
  %90 = select i1 %86, i32 %80, i32 %82, !dbg !39
  %91 = insertelement <1 x i32> poison, i32 %90, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %79, <1 x i32> %91, i1 %89) #3, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %92 = load i32, ptr addrspace(3) @global_smem, align 16, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %93 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %37, i32 16, i32 31), !dbg !40
  %94 = bitcast i32 %93 to float, !dbg !40
  %95 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %13, i32 16, i32 31), !dbg !40
  %96 = fcmp ogt float %36, %94, !dbg !42
  %97 = fcmp oeq float %36, %94, !dbg !43
  %98 = fcmp uno float %94, 0.000000e+00, !dbg !44
  %99 = xor i1 %98, true, !dbg !45
  %100 = and i1 %41, %99, !dbg !46
  %101 = or i1 %96, %100, !dbg !47
  %102 = and i1 %41, %98, !dbg !48
  %103 = or i1 %97, %102, !dbg !49
  %104 = icmp slt i32 %13, %95, !dbg !50
  %105 = and i1 %104, %103, !dbg !51
  %106 = or i1 %101, %105, !dbg !52
  %107 = select i1 %106, float %36, float %94, !dbg !53
  %108 = select i1 %106, i32 %13, i32 %95, !dbg !54
  %109 = bitcast float %107 to i32, !dbg !40
  %110 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %109, i32 8, i32 31), !dbg !40
  %111 = bitcast i32 %110 to float, !dbg !40
  %112 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %108, i32 8, i32 31), !dbg !40
  %113 = fcmp ogt float %107, %111, !dbg !42
  %114 = fcmp oeq float %107, %111, !dbg !43
  %115 = fcmp uno float %107, 0.000000e+00, !dbg !55
  %116 = fcmp uno float %111, 0.000000e+00, !dbg !44
  %117 = xor i1 %116, true, !dbg !45
  %118 = and i1 %115, %117, !dbg !46
  %119 = or i1 %113, %118, !dbg !47
  %120 = and i1 %116, %115, !dbg !48
  %121 = or i1 %114, %120, !dbg !49
  %122 = icmp slt i32 %108, %112, !dbg !50
  %123 = and i1 %122, %121, !dbg !51
  %124 = or i1 %119, %123, !dbg !52
  %125 = select i1 %124, float %107, float %111, !dbg !53
  %126 = select i1 %124, i32 %108, i32 %112, !dbg !54
  %127 = bitcast float %125 to i32, !dbg !40
  %128 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %127, i32 4, i32 31), !dbg !40
  %129 = bitcast i32 %128 to float, !dbg !40
  %130 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %126, i32 4, i32 31), !dbg !40
  %131 = fcmp ogt float %125, %129, !dbg !42
  %132 = fcmp oeq float %125, %129, !dbg !43
  %133 = fcmp uno float %125, 0.000000e+00, !dbg !55
  %134 = fcmp uno float %129, 0.000000e+00, !dbg !44
  %135 = xor i1 %134, true, !dbg !45
  %136 = and i1 %133, %135, !dbg !46
  %137 = or i1 %131, %136, !dbg !47
  %138 = and i1 %134, %133, !dbg !48
  %139 = or i1 %132, %138, !dbg !49
  %140 = icmp slt i32 %126, %130, !dbg !50
  %141 = and i1 %140, %139, !dbg !51
  %142 = or i1 %137, %141, !dbg !52
  %143 = select i1 %142, float %125, float %129, !dbg !53
  %144 = select i1 %142, i32 %126, i32 %130, !dbg !54
  %145 = bitcast float %143 to i32, !dbg !40
  %146 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %145, i32 2, i32 31), !dbg !40
  %147 = bitcast i32 %146 to float, !dbg !40
  %148 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %144, i32 2, i32 31), !dbg !40
  %149 = fcmp ogt float %143, %147, !dbg !42
  %150 = fcmp oeq float %143, %147, !dbg !43
  %151 = fcmp uno float %143, 0.000000e+00, !dbg !55
  %152 = fcmp uno float %147, 0.000000e+00, !dbg !44
  %153 = xor i1 %152, true, !dbg !45
  %154 = and i1 %151, %153, !dbg !46
  %155 = or i1 %149, %154, !dbg !47
  %156 = and i1 %152, %151, !dbg !48
  %157 = or i1 %150, %156, !dbg !49
  %158 = icmp slt i32 %144, %148, !dbg !50
  %159 = and i1 %158, %157, !dbg !51
  %160 = or i1 %155, %159, !dbg !52
  %161 = select i1 %160, float %143, float %147, !dbg !53
  %162 = select i1 %160, i32 %144, i32 %148, !dbg !54
  %163 = bitcast float %161 to i32, !dbg !40
  %164 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %163, i32 1, i32 31), !dbg !40
  %165 = bitcast i32 %164 to float, !dbg !40
  %166 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %162, i32 1, i32 31), !dbg !40
  %167 = fcmp ogt float %161, %165, !dbg !42
  %168 = fcmp oeq float %161, %165, !dbg !43
  %169 = fcmp uno float %161, 0.000000e+00, !dbg !55
  %170 = fcmp uno float %165, 0.000000e+00, !dbg !44
  %171 = xor i1 %170, true, !dbg !45
  %172 = and i1 %169, %171, !dbg !46
  %173 = or i1 %167, %172, !dbg !47
  %174 = and i1 %170, %169, !dbg !48
  %175 = or i1 %168, %174, !dbg !49
  %176 = icmp slt i32 %162, %166, !dbg !50
  %177 = and i1 %176, %175, !dbg !51
  %178 = or i1 %173, %177, !dbg !52
  %179 = select i1 %178, i32 %162, i32 %166, !dbg !54
  %180 = select i1 %178, i32 %163, i32 %164, !dbg !53
  %181 = insertelement <1 x i32> poison, i32 %180, i64 0, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %74, <1 x i32> %181, i1 %71) #3, !dbg !40
  %182 = getelementptr i32, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8), i64 %73, !dbg !40
  %183 = insertelement <1 x i32> poison, i32 %179, i64 0, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %182, <1 x i32> %183, i1 %71) #3, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %184 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %79, i1 %77) #3, !dbg !40
  %185 = bitcast i32 %184 to float, !dbg !40
  %186 = getelementptr i32, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8), i64 %78, !dbg !40
  %187 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %186, i1 %77) #3, !dbg !40
  %188 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %184, i32 1, i32 31), !dbg !40
  %189 = bitcast i32 %188 to float, !dbg !40
  %190 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %187, i32 1, i32 31), !dbg !40
  %191 = fcmp ogt float %185, %189, !dbg !42
  %192 = fcmp oeq float %185, %189, !dbg !43
  %193 = fcmp uno float %185, 0.000000e+00, !dbg !55
  %194 = fcmp uno float %189, 0.000000e+00, !dbg !44
  %195 = xor i1 %194, true, !dbg !45
  %196 = and i1 %193, %195, !dbg !46
  %197 = or i1 %191, %196, !dbg !47
  %198 = and i1 %193, %194, !dbg !48
  %199 = or i1 %192, %198, !dbg !49
  %200 = icmp slt i32 %187, %190, !dbg !50
  %201 = and i1 %200, %199, !dbg !51
  %202 = or i1 %197, %201, !dbg !52
  %203 = select i1 %202, i32 %187, i32 %190, !dbg !54
  %204 = select i1 %202, i32 %184, i32 %188, !dbg !53
  %205 = insertelement <1 x i32> poison, i32 %204, i64 0, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %79, <1 x i32> %205, i1 %89) #3, !dbg !40
  %206 = insertelement <1 x i32> poison, i32 %203, i64 0, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %186, <1 x i32> %206, i1 %89) #3, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %207 = load i32, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 8), align 8, !dbg !40
  %208 = sext i32 %8 to i64, !dbg !56
  %209 = getelementptr float, ptr addrspace(1) %3, i64 %208, !dbg !56
  %210 = icmp eq i32 %13, 0, !dbg !57
  %211 = and i1 %210, %9, !dbg !57
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %92, ptr addrspace(1) %209, i1 %211) #3, !dbg !57
  %212 = getelementptr i64, ptr addrspace(1) %4, i64 %208, !dbg !58
  %213 = sext i32 %207 to i64, !dbg !59
  tail call void asm sideeffect "@$2 st.global.b64 [ $1 + 0 ], { $0 };", "l,l,b"(i64 %213, ptr addrspace(1) %212, i1 %211) #3, !dbg !59
  ret void, !dbg !60
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cxppetl4jgko4dmku7tqrxbbsgeeq3yuo2clxipxjzcrgh2uryoo.py", directory: "inductor_cache/xp")
!4 = !{ptr @triton_per_fused_add_max_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_max_0, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_max_0", linkageName: "triton_per_fused_add_max_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 21, scope: !7)
!12 = !DILocation(line: 26, column: 34, scope: !7)
!13 = !DILocation(line: 28, column: 21, scope: !7)
!14 = !DILocation(line: 32, column: 21, scope: !7)
!15 = !DILocation(line: 30, column: 19, scope: !7)
!16 = !DILocation(line: 31, column: 19, scope: !7)
!17 = !DILocation(line: 32, column: 27, scope: !7)
!18 = !DILocation(line: 34, column: 38, scope: !7)
!19 = !DILocation(line: 34, column: 35, scope: !7)
!20 = !DILocation(line: 34, column: 48, scope: !7)
!21 = !DILocation(line: 34, column: 43, scope: !7)
!22 = !DILocation(line: 34, column: 30, scope: !7)
!23 = !DILocation(line: 34, column: 61, scope: !7)
!24 = !DILocation(line: 34, column: 53, scope: !7)
!25 = !DILocation(line: 35, column: 19, scope: !7)
!26 = !DILocation(line: 37, column: 30, scope: !7)
!27 = !DILocation(line: 37, column: 35, scope: !7)
!28 = !DILocation(line: 38, column: 18, scope: !7)
!29 = !DILocation(line: 39, column: 18, scope: !7)
!30 = !DILocation(line: 41, column: 41, scope: !7)
!31 = !DILocation(line: 131, column: 29, scope: !32, inlinedAt: !34)
!32 = distinct !DILexicalBlockFile(scope: !7, file: !33, discriminator: 0)
!33 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!34 = !DILocation(line: 42, column: 37, scope: !7)
!35 = !DILocation(line: 118, column: 15, scope: !36, inlinedAt: !34)
!36 = distinct !DILexicalBlockFile(scope: !32, file: !33, discriminator: 0)
!37 = !DILocation(line: 120, column: 21, scope: !36, inlinedAt: !34)
!38 = !DILocation(line: 120, column: 16, scope: !36, inlinedAt: !34)
!39 = !DILocation(line: 121, column: 29, scope: !36, inlinedAt: !34)
!40 = !DILocation(line: 173, column: 42, scope: !32, inlinedAt: !41)
!41 = !DILocation(line: 44, column: 70, scope: !7)
!42 = !DILocation(line: 152, column: 21, scope: !36, inlinedAt: !41)
!43 = !DILocation(line: 153, column: 23, scope: !36, inlinedAt: !41)
!44 = !DILocation(line: 156, column: 29, scope: !36, inlinedAt: !41)
!45 = !DILocation(line: 157, column: 32, scope: !36, inlinedAt: !41)
!46 = !DILocation(line: 157, column: 28, scope: !36, inlinedAt: !41)
!47 = !DILocation(line: 157, column: 16, scope: !36, inlinedAt: !41)
!48 = !DILocation(line: 159, column: 29, scope: !36, inlinedAt: !41)
!49 = !DILocation(line: 159, column: 17, scope: !36, inlinedAt: !41)
!50 = !DILocation(line: 162, column: 31, scope: !36, inlinedAt: !41)
!51 = !DILocation(line: 162, column: 21, scope: !36, inlinedAt: !41)
!52 = !DILocation(line: 162, column: 12, scope: !36, inlinedAt: !41)
!53 = !DILocation(line: 163, column: 35, scope: !36, inlinedAt: !41)
!54 = !DILocation(line: 163, column: 69, scope: !36, inlinedAt: !41)
!55 = !DILocation(line: 155, column: 29, scope: !36, inlinedAt: !41)
!56 = !DILocation(line: 46, column: 25, scope: !7)
!57 = !DILocation(line: 46, column: 36, scope: !7)
!58 = !DILocation(line: 47, column: 25, scope: !7)
!59 = !DILocation(line: 47, column: 37, scope: !7)
!60 = !DILocation(line: 47, column: 4, scope: !7)
