; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_add_mul_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %10 = shl i32 %9, 6, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = lshr i32 %11, 4, !dbg !12
  %13 = and i32 %12, 15, !dbg !12
  %14 = or disjoint i32 %13, 16, !dbg !12
  %15 = or disjoint i32 %13, 32, !dbg !12
  %16 = or disjoint i32 %13, 48, !dbg !12
  %17 = shl i32 %11, 2, !dbg !12
  %18 = and i32 %17, 60, !dbg !12
  %19 = or disjoint i32 %10, %13, !dbg !13
  %20 = or disjoint i32 %10, %14, !dbg !13
  %21 = or disjoint i32 %10, %15, !dbg !13
  %22 = or disjoint i32 %10, %16, !dbg !13
  %23 = or disjoint i32 %10, %18, !dbg !13
  %24 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %25 = shl i32 %24, 6, !dbg !15
  %26 = or disjoint i32 %25, %18, !dbg !16
  %27 = or disjoint i32 %25, %13, !dbg !16
  %28 = or disjoint i32 %25, %14, !dbg !16
  %29 = or disjoint i32 %25, %15, !dbg !16
  %30 = or disjoint i32 %25, %16, !dbg !16
  %31 = icmp slt i32 %26, 128, !dbg !17
  %32 = icmp slt i32 %27, 128, !dbg !17
  %33 = icmp slt i32 %28, 128, !dbg !17
  %34 = icmp slt i32 %29, 128, !dbg !17
  %35 = icmp slt i32 %30, 128, !dbg !17
  %.frozen = freeze i32 %23, !dbg !18
  %36 = sdiv i32 %.frozen, 256, !dbg !18
  %37 = mul i32 %36, 256, !dbg !19
  %.decomposed = sub i32 %.frozen, %37, !dbg !19
  %38 = sdiv i32 %23, 16, !dbg !20
  %39 = srem i32 %38, 16, !dbg !21
  %40 = shl i32 %19, 7, !dbg !22
  %41 = shl i32 %20, 7, !dbg !22
  %42 = shl i32 %21, 7, !dbg !22
  %43 = shl i32 %22, 7, !dbg !22
  %44 = add i32 %26, %40, !dbg !23
  %45 = add i32 %26, %41, !dbg !23
  %46 = add i32 %26, %42, !dbg !23
  %47 = add i32 %26, %43, !dbg !23
  %48 = sext i32 %44 to i64, !dbg !24
  %49 = getelementptr float, ptr addrspace(1) %0, i64 %48, !dbg !24
  %50 = sext i32 %45 to i64, !dbg !24
  %51 = getelementptr float, ptr addrspace(1) %0, i64 %50, !dbg !24
  %52 = sext i32 %46 to i64, !dbg !24
  %53 = getelementptr float, ptr addrspace(1) %0, i64 %52, !dbg !24
  %54 = sext i32 %47 to i64, !dbg !24
  %55 = getelementptr float, ptr addrspace(1) %0, i64 %54, !dbg !24
  %56 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %49, i1 %31) #2, !dbg !25
  %57 = extractvalue { i32, i32, i32, i32 } %56, 0, !dbg !25
  %58 = extractvalue { i32, i32, i32, i32 } %56, 1, !dbg !25
  %59 = extractvalue { i32, i32, i32, i32 } %56, 2, !dbg !25
  %60 = extractvalue { i32, i32, i32, i32 } %56, 3, !dbg !25
  %61 = bitcast i32 %57 to float, !dbg !25
  %62 = bitcast i32 %58 to float, !dbg !25
  %63 = bitcast i32 %59 to float, !dbg !25
  %64 = bitcast i32 %60 to float, !dbg !25
  %65 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %51, i1 %31) #2, !dbg !25
  %66 = extractvalue { i32, i32, i32, i32 } %65, 0, !dbg !25
  %67 = extractvalue { i32, i32, i32, i32 } %65, 1, !dbg !25
  %68 = extractvalue { i32, i32, i32, i32 } %65, 2, !dbg !25
  %69 = extractvalue { i32, i32, i32, i32 } %65, 3, !dbg !25
  %70 = bitcast i32 %66 to float, !dbg !25
  %71 = bitcast i32 %67 to float, !dbg !25
  %72 = bitcast i32 %68 to float, !dbg !25
  %73 = bitcast i32 %69 to float, !dbg !25
  %74 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %53, i1 %31) #2, !dbg !25
  %75 = extractvalue { i32, i32, i32, i32 } %74, 0, !dbg !25
  %76 = extractvalue { i32, i32, i32, i32 } %74, 1, !dbg !25
  %77 = extractvalue { i32, i32, i32, i32 } %74, 2, !dbg !25
  %78 = extractvalue { i32, i32, i32, i32 } %74, 3, !dbg !25
  %79 = bitcast i32 %75 to float, !dbg !25
  %80 = bitcast i32 %76 to float, !dbg !25
  %81 = bitcast i32 %77 to float, !dbg !25
  %82 = bitcast i32 %78 to float, !dbg !25
  %83 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %55, i1 %31) #2, !dbg !25
  %84 = extractvalue { i32, i32, i32, i32 } %83, 0, !dbg !25
  %85 = extractvalue { i32, i32, i32, i32 } %83, 1, !dbg !25
  %86 = extractvalue { i32, i32, i32, i32 } %83, 2, !dbg !25
  %87 = extractvalue { i32, i32, i32, i32 } %83, 3, !dbg !25
  %88 = bitcast i32 %84 to float, !dbg !25
  %89 = bitcast i32 %85 to float, !dbg !25
  %90 = bitcast i32 %86 to float, !dbg !25
  %91 = bitcast i32 %87 to float, !dbg !25
  %92 = getelementptr float, ptr addrspace(1) %1, i64 %48, !dbg !26
  %93 = getelementptr float, ptr addrspace(1) %1, i64 %50, !dbg !26
  %94 = getelementptr float, ptr addrspace(1) %1, i64 %52, !dbg !26
  %95 = getelementptr float, ptr addrspace(1) %1, i64 %54, !dbg !26
  %96 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %92, i1 %31) #2, !dbg !27
  %97 = extractvalue { i32, i32, i32, i32 } %96, 0, !dbg !27
  %98 = extractvalue { i32, i32, i32, i32 } %96, 1, !dbg !27
  %99 = extractvalue { i32, i32, i32, i32 } %96, 2, !dbg !27
  %100 = extractvalue { i32, i32, i32, i32 } %96, 3, !dbg !27
  %101 = bitcast i32 %97 to float, !dbg !27
  %102 = bitcast i32 %98 to float, !dbg !27
  %103 = bitcast i32 %99 to float, !dbg !27
  %104 = bitcast i32 %100 to float, !dbg !27
  %105 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %93, i1 %31) #2, !dbg !27
  %106 = extractvalue { i32, i32, i32, i32 } %105, 0, !dbg !27
  %107 = extractvalue { i32, i32, i32, i32 } %105, 1, !dbg !27
  %108 = extractvalue { i32, i32, i32, i32 } %105, 2, !dbg !27
  %109 = extractvalue { i32, i32, i32, i32 } %105, 3, !dbg !27
  %110 = bitcast i32 %106 to float, !dbg !27
  %111 = bitcast i32 %107 to float, !dbg !27
  %112 = bitcast i32 %108 to float, !dbg !27
  %113 = bitcast i32 %109 to float, !dbg !27
  %114 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %94, i1 %31) #2, !dbg !27
  %115 = extractvalue { i32, i32, i32, i32 } %114, 0, !dbg !27
  %116 = extractvalue { i32, i32, i32, i32 } %114, 1, !dbg !27
  %117 = extractvalue { i32, i32, i32, i32 } %114, 2, !dbg !27
  %118 = extractvalue { i32, i32, i32, i32 } %114, 3, !dbg !27
  %119 = bitcast i32 %115 to float, !dbg !27
  %120 = bitcast i32 %116 to float, !dbg !27
  %121 = bitcast i32 %117 to float, !dbg !27
  %122 = bitcast i32 %118 to float, !dbg !27
  %123 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %95, i1 %31) #2, !dbg !27
  %124 = extractvalue { i32, i32, i32, i32 } %123, 0, !dbg !27
  %125 = extractvalue { i32, i32, i32, i32 } %123, 1, !dbg !27
  %126 = extractvalue { i32, i32, i32, i32 } %123, 2, !dbg !27
  %127 = extractvalue { i32, i32, i32, i32 } %123, 3, !dbg !27
  %128 = bitcast i32 %124 to float, !dbg !27
  %129 = bitcast i32 %125 to float, !dbg !27
  %130 = bitcast i32 %126 to float, !dbg !27
  %131 = bitcast i32 %127 to float, !dbg !27
  %132 = shl i32 %27, 8, !dbg !28
  %133 = shl i32 %28, 8, !dbg !28
  %134 = shl i32 %29, 8, !dbg !28
  %135 = shl i32 %30, 8, !dbg !28
  %136 = shl i32 %36, 15, !dbg !29
  %137 = add i32 %136, %.decomposed, !dbg !30
  %138 = add i32 %137, %132, !dbg !31
  %139 = add i32 %137, %133, !dbg !31
  %140 = add i32 %137, %134, !dbg !31
  %141 = add i32 %137, %135, !dbg !31
  %142 = sext i32 %138 to i64, !dbg !32
  %143 = getelementptr float, ptr addrspace(1) %2, i64 %142, !dbg !32
  %144 = sext i32 %139 to i64, !dbg !32
  %145 = getelementptr float, ptr addrspace(1) %2, i64 %144, !dbg !32
  %146 = sext i32 %140 to i64, !dbg !32
  %147 = getelementptr float, ptr addrspace(1) %2, i64 %146, !dbg !32
  %148 = sext i32 %141 to i64, !dbg !32
  %149 = getelementptr float, ptr addrspace(1) %2, i64 %148, !dbg !32
  %150 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %143, i1 %32) #2, !dbg !33
  %151 = extractvalue { i32, i32, i32, i32 } %150, 0, !dbg !33
  %152 = extractvalue { i32, i32, i32, i32 } %150, 1, !dbg !33
  %153 = extractvalue { i32, i32, i32, i32 } %150, 2, !dbg !33
  %154 = extractvalue { i32, i32, i32, i32 } %150, 3, !dbg !33
  %155 = bitcast i32 %151 to float, !dbg !33
  %156 = bitcast i32 %152 to float, !dbg !33
  %157 = bitcast i32 %153 to float, !dbg !33
  %158 = bitcast i32 %154 to float, !dbg !33
  %159 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %145, i1 %33) #2, !dbg !33
  %160 = extractvalue { i32, i32, i32, i32 } %159, 0, !dbg !33
  %161 = extractvalue { i32, i32, i32, i32 } %159, 1, !dbg !33
  %162 = extractvalue { i32, i32, i32, i32 } %159, 2, !dbg !33
  %163 = extractvalue { i32, i32, i32, i32 } %159, 3, !dbg !33
  %164 = bitcast i32 %160 to float, !dbg !33
  %165 = bitcast i32 %161 to float, !dbg !33
  %166 = bitcast i32 %162 to float, !dbg !33
  %167 = bitcast i32 %163 to float, !dbg !33
  %168 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %147, i1 %34) #2, !dbg !33
  %169 = extractvalue { i32, i32, i32, i32 } %168, 0, !dbg !33
  %170 = extractvalue { i32, i32, i32, i32 } %168, 1, !dbg !33
  %171 = extractvalue { i32, i32, i32, i32 } %168, 2, !dbg !33
  %172 = extractvalue { i32, i32, i32, i32 } %168, 3, !dbg !33
  %173 = bitcast i32 %169 to float, !dbg !33
  %174 = bitcast i32 %170 to float, !dbg !33
  %175 = bitcast i32 %171 to float, !dbg !33
  %176 = bitcast i32 %172 to float, !dbg !33
  %177 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %149, i1 %35) #2, !dbg !33
  %178 = extractvalue { i32, i32, i32, i32 } %177, 0, !dbg !33
  %179 = extractvalue { i32, i32, i32, i32 } %177, 1, !dbg !33
  %180 = extractvalue { i32, i32, i32, i32 } %177, 2, !dbg !33
  %181 = extractvalue { i32, i32, i32, i32 } %177, 3, !dbg !33
  %182 = bitcast i32 %178 to float, !dbg !33
  %183 = bitcast i32 %179 to float, !dbg !33
  %184 = bitcast i32 %180 to float, !dbg !33
  %185 = bitcast i32 %181 to float, !dbg !33
  %186 = getelementptr float, ptr addrspace(1) %3, i64 %142, !dbg !34
  %187 = getelementptr float, ptr addrspace(1) %3, i64 %144, !dbg !34
  %188 = getelementptr float, ptr addrspace(1) %3, i64 %146, !dbg !34
  %189 = getelementptr float, ptr addrspace(1) %3, i64 %148, !dbg !34
  %190 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %186, i1 %32) #2, !dbg !35
  %191 = extractvalue { i32, i32, i32, i32 } %190, 0, !dbg !35
  %192 = extractvalue { i32, i32, i32, i32 } %190, 1, !dbg !35
  %193 = extractvalue { i32, i32, i32, i32 } %190, 2, !dbg !35
  %194 = extractvalue { i32, i32, i32, i32 } %190, 3, !dbg !35
  %195 = bitcast i32 %191 to float, !dbg !35
  %196 = bitcast i32 %192 to float, !dbg !35
  %197 = bitcast i32 %193 to float, !dbg !35
  %198 = bitcast i32 %194 to float, !dbg !35
  %199 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %187, i1 %33) #2, !dbg !35
  %200 = extractvalue { i32, i32, i32, i32 } %199, 0, !dbg !35
  %201 = extractvalue { i32, i32, i32, i32 } %199, 1, !dbg !35
  %202 = extractvalue { i32, i32, i32, i32 } %199, 2, !dbg !35
  %203 = extractvalue { i32, i32, i32, i32 } %199, 3, !dbg !35
  %204 = bitcast i32 %200 to float, !dbg !35
  %205 = bitcast i32 %201 to float, !dbg !35
  %206 = bitcast i32 %202 to float, !dbg !35
  %207 = bitcast i32 %203 to float, !dbg !35
  %208 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %188, i1 %34) #2, !dbg !35
  %209 = extractvalue { i32, i32, i32, i32 } %208, 0, !dbg !35
  %210 = extractvalue { i32, i32, i32, i32 } %208, 1, !dbg !35
  %211 = extractvalue { i32, i32, i32, i32 } %208, 2, !dbg !35
  %212 = extractvalue { i32, i32, i32, i32 } %208, 3, !dbg !35
  %213 = bitcast i32 %209 to float, !dbg !35
  %214 = bitcast i32 %210 to float, !dbg !35
  %215 = bitcast i32 %211 to float, !dbg !35
  %216 = bitcast i32 %212 to float, !dbg !35
  %217 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %189, i1 %35) #2, !dbg !35
  %218 = extractvalue { i32, i32, i32, i32 } %217, 0, !dbg !35
  %219 = extractvalue { i32, i32, i32, i32 } %217, 1, !dbg !35
  %220 = extractvalue { i32, i32, i32, i32 } %217, 2, !dbg !35
  %221 = extractvalue { i32, i32, i32, i32 } %217, 3, !dbg !35
  %222 = bitcast i32 %218 to float, !dbg !35
  %223 = bitcast i32 %219 to float, !dbg !35
  %224 = bitcast i32 %220 to float, !dbg !35
  %225 = bitcast i32 %221 to float, !dbg !35
  %226 = sext i32 %39 to i64, !dbg !36
  %227 = getelementptr float, ptr addrspace(1) %4, i64 %226, !dbg !36
  %228 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %227, i1 true) #2, !dbg !37
  %229 = bitcast i32 %228 to float, !dbg !37
  %230 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %227, i1 true) #2, !dbg !37
  %231 = bitcast i32 %230 to float, !dbg !37
  %232 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %227, i1 true) #2, !dbg !37
  %233 = bitcast i32 %232 to float, !dbg !37
  %234 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %227, i1 true) #2, !dbg !37
  %235 = bitcast i32 %234 to float, !dbg !37
  %236 = fmul float %61, %101, !dbg !38
  %237 = fmul float %62, %102, !dbg !38
  %238 = fmul float %63, %103, !dbg !38
  %239 = fmul float %64, %104, !dbg !38
  %240 = fmul float %70, %110, !dbg !38
  %241 = fmul float %71, %111, !dbg !38
  %242 = fmul float %72, %112, !dbg !38
  %243 = fmul float %73, %113, !dbg !38
  %244 = fmul float %79, %119, !dbg !38
  %245 = fmul float %80, %120, !dbg !38
  %246 = fmul float %81, %121, !dbg !38
  %247 = fmul float %82, %122, !dbg !38
  %248 = fmul float %88, %128, !dbg !38
  %249 = fmul float %89, %129, !dbg !38
  %250 = fmul float %90, %130, !dbg !38
  %251 = fmul float %91, %131, !dbg !38
  %252 = shl i32 %11, 8, !dbg !38
  %253 = and i32 %252, 3840, !dbg !38
  %254 = or disjoint i32 %253, %13, !dbg !38
  %255 = and i32 %17, 1020, !dbg !38
  %256 = lshr exact i32 %253, 2, !dbg !38
  %257 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %256, !dbg !38
  %258 = getelementptr float, ptr addrspace(3) %257, i32 %254, !dbg !38
  %259 = bitcast float %236 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %258, <1 x i32> %259, i1 true) #2, !dbg !38
  %260 = or disjoint i32 %254, 64, !dbg !38
  %261 = lshr i32 %260, 6, !dbg !38
  %.idx = shl nuw nsw i32 %261, 4, !dbg !38
  %262 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !38
  %263 = getelementptr float, ptr addrspace(3) %262, i32 %260, !dbg !38
  %264 = bitcast float %237 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %263, <1 x i32> %264, i1 true) #2, !dbg !38
  %265 = or disjoint i32 %254, 128, !dbg !38
  %266 = lshr i32 %265, 6, !dbg !38
  %.idx1 = shl nuw nsw i32 %266, 4, !dbg !38
  %267 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx1, !dbg !38
  %268 = getelementptr float, ptr addrspace(3) %267, i32 %265, !dbg !38
  %269 = bitcast float %238 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %268, <1 x i32> %269, i1 true) #2, !dbg !38
  %270 = or disjoint i32 %254, 192, !dbg !38
  %271 = lshr i32 %270, 6, !dbg !38
  %.idx2 = shl nuw nsw i32 %271, 4, !dbg !38
  %272 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx2, !dbg !38
  %273 = getelementptr float, ptr addrspace(3) %272, i32 %270, !dbg !38
  %274 = bitcast float %239 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %273, <1 x i32> %274, i1 true) #2, !dbg !38
  %275 = or disjoint i32 %254, 16, !dbg !38
  %276 = getelementptr float, ptr addrspace(3) %257, i32 %275, !dbg !38
  %277 = bitcast float %240 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %276, <1 x i32> %277, i1 true) #2, !dbg !38
  %278 = or disjoint i32 %254, 80, !dbg !38
  %279 = lshr i32 %278, 6, !dbg !38
  %.idx3 = shl nuw nsw i32 %279, 4, !dbg !38
  %280 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx3, !dbg !38
  %281 = getelementptr float, ptr addrspace(3) %280, i32 %278, !dbg !38
  %282 = bitcast float %241 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %281, <1 x i32> %282, i1 true) #2, !dbg !38
  %283 = or disjoint i32 %254, 144, !dbg !38
  %284 = lshr i32 %283, 6, !dbg !38
  %.idx4 = shl nuw nsw i32 %284, 4, !dbg !38
  %285 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx4, !dbg !38
  %286 = getelementptr float, ptr addrspace(3) %285, i32 %283, !dbg !38
  %287 = bitcast float %242 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %286, <1 x i32> %287, i1 true) #2, !dbg !38
  %288 = or disjoint i32 %254, 208, !dbg !38
  %289 = lshr i32 %288, 6, !dbg !38
  %.idx5 = shl nuw nsw i32 %289, 4, !dbg !38
  %290 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx5, !dbg !38
  %291 = getelementptr float, ptr addrspace(3) %290, i32 %288, !dbg !38
  %292 = bitcast float %243 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %291, <1 x i32> %292, i1 true) #2, !dbg !38
  %293 = or disjoint i32 %254, 32, !dbg !38
  %294 = getelementptr float, ptr addrspace(3) %257, i32 %293, !dbg !38
  %295 = bitcast float %244 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %294, <1 x i32> %295, i1 true) #2, !dbg !38
  %296 = or disjoint i32 %254, 96, !dbg !38
  %297 = lshr i32 %296, 6, !dbg !38
  %.idx6 = shl nuw nsw i32 %297, 4, !dbg !38
  %298 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx6, !dbg !38
  %299 = getelementptr float, ptr addrspace(3) %298, i32 %296, !dbg !38
  %300 = bitcast float %245 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %299, <1 x i32> %300, i1 true) #2, !dbg !38
  %301 = or disjoint i32 %254, 160, !dbg !38
  %302 = lshr i32 %301, 6, !dbg !38
  %.idx7 = shl nuw nsw i32 %302, 4, !dbg !38
  %303 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx7, !dbg !38
  %304 = getelementptr float, ptr addrspace(3) %303, i32 %301, !dbg !38
  %305 = bitcast float %246 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %304, <1 x i32> %305, i1 true) #2, !dbg !38
  %306 = or disjoint i32 %254, 224, !dbg !38
  %307 = lshr i32 %306, 6, !dbg !38
  %.idx8 = shl nuw nsw i32 %307, 4, !dbg !38
  %308 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx8, !dbg !38
  %309 = getelementptr float, ptr addrspace(3) %308, i32 %306, !dbg !38
  %310 = bitcast float %247 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %309, <1 x i32> %310, i1 true) #2, !dbg !38
  %311 = or disjoint i32 %254, 48, !dbg !38
  %312 = getelementptr float, ptr addrspace(3) %257, i32 %311, !dbg !38
  %313 = bitcast float %248 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %312, <1 x i32> %313, i1 true) #2, !dbg !38
  %314 = or disjoint i32 %254, 112, !dbg !38
  %315 = lshr i32 %314, 6, !dbg !38
  %.idx9 = shl nuw nsw i32 %315, 4, !dbg !38
  %316 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx9, !dbg !38
  %317 = getelementptr float, ptr addrspace(3) %316, i32 %314, !dbg !38
  %318 = bitcast float %249 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %317, <1 x i32> %318, i1 true) #2, !dbg !38
  %319 = or disjoint i32 %254, 176, !dbg !38
  %320 = lshr i32 %319, 6, !dbg !38
  %.idx10 = shl nuw nsw i32 %320, 4, !dbg !38
  %321 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx10, !dbg !38
  %322 = getelementptr float, ptr addrspace(3) %321, i32 %319, !dbg !38
  %323 = bitcast float %250 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %322, <1 x i32> %323, i1 true) #2, !dbg !38
  %324 = or disjoint i32 %254, 240, !dbg !38
  %325 = lshr i32 %324, 6, !dbg !38
  %.idx11 = shl nuw nsw i32 %325, 4, !dbg !38
  %326 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx11, !dbg !38
  %327 = getelementptr float, ptr addrspace(3) %326, i32 %324, !dbg !38
  %328 = bitcast float %251 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %327, <1 x i32> %328, i1 true) #2, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %329 = lshr i32 %255, 6, !dbg !38
  %330 = and i32 %11, 255, !dbg !38
  %331 = add nuw nsw i32 %329, %330, !dbg !38
  %.idx12 = shl nuw nsw i32 %331, 4, !dbg !38
  %332 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx12, !dbg !38
  %333 = load float, ptr addrspace(3) %332, align 16, !dbg !38
  %334 = getelementptr inbounds i8, ptr addrspace(3) %332, i32 4, !dbg !38
  %335 = load float, ptr addrspace(3) %334, align 4, !dbg !38
  %336 = getelementptr inbounds i8, ptr addrspace(3) %332, i32 8, !dbg !38
  %337 = load float, ptr addrspace(3) %336, align 8, !dbg !38
  %338 = getelementptr inbounds i8, ptr addrspace(3) %332, i32 12, !dbg !38
  %339 = load float, ptr addrspace(3) %338, align 4, !dbg !38
  %340 = or disjoint i32 %255, 1024, !dbg !38
  %341 = lshr i32 %340, 6, !dbg !38
  %.idx16 = shl nuw nsw i32 %341, 4, !dbg !38
  %342 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx16, !dbg !38
  %343 = getelementptr inbounds float, ptr addrspace(3) %342, i32 %340, !dbg !38
  %344 = load float, ptr addrspace(3) %343, align 16, !dbg !38
  %345 = getelementptr inbounds i8, ptr addrspace(3) %343, i32 4, !dbg !38
  %346 = load float, ptr addrspace(3) %345, align 4, !dbg !38
  %347 = getelementptr inbounds i8, ptr addrspace(3) %343, i32 8, !dbg !38
  %348 = load float, ptr addrspace(3) %347, align 8, !dbg !38
  %349 = getelementptr inbounds i8, ptr addrspace(3) %343, i32 12, !dbg !38
  %350 = load float, ptr addrspace(3) %349, align 4, !dbg !38
  %351 = or disjoint i32 %255, 2048, !dbg !38
  %352 = lshr i32 %351, 6, !dbg !38
  %.idx21 = shl nuw nsw i32 %352, 4, !dbg !38
  %353 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx21, !dbg !38
  %354 = getelementptr inbounds float, ptr addrspace(3) %353, i32 %351, !dbg !38
  %355 = load float, ptr addrspace(3) %354, align 16, !dbg !38
  %356 = getelementptr inbounds i8, ptr addrspace(3) %354, i32 4, !dbg !38
  %357 = load float, ptr addrspace(3) %356, align 4, !dbg !38
  %358 = getelementptr inbounds i8, ptr addrspace(3) %354, i32 8, !dbg !38
  %359 = load float, ptr addrspace(3) %358, align 8, !dbg !38
  %360 = getelementptr inbounds i8, ptr addrspace(3) %354, i32 12, !dbg !38
  %361 = load float, ptr addrspace(3) %360, align 4, !dbg !38
  %362 = or disjoint i32 %255, 3072, !dbg !38
  %363 = lshr i32 %362, 6, !dbg !38
  %.idx26 = shl nuw nsw i32 %363, 4, !dbg !38
  %364 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx26, !dbg !38
  %365 = getelementptr inbounds float, ptr addrspace(3) %364, i32 %362, !dbg !38
  %366 = load float, ptr addrspace(3) %365, align 16, !dbg !38
  %367 = getelementptr inbounds i8, ptr addrspace(3) %365, i32 4, !dbg !38
  %368 = load float, ptr addrspace(3) %367, align 4, !dbg !38
  %369 = getelementptr inbounds i8, ptr addrspace(3) %365, i32 8, !dbg !38
  %370 = load float, ptr addrspace(3) %369, align 8, !dbg !38
  %371 = getelementptr inbounds i8, ptr addrspace(3) %365, i32 12, !dbg !38
  %372 = load float, ptr addrspace(3) %371, align 4, !dbg !38
  %373 = fmul float %195, %229, !dbg !39
  %374 = fmul float %196, %231, !dbg !39
  %375 = fmul float %197, %233, !dbg !39
  %376 = fmul float %198, %235, !dbg !39
  %377 = fmul float %204, %229, !dbg !39
  %378 = fmul float %205, %231, !dbg !39
  %379 = fmul float %206, %233, !dbg !39
  %380 = fmul float %207, %235, !dbg !39
  %381 = fmul float %213, %229, !dbg !39
  %382 = fmul float %214, %231, !dbg !39
  %383 = fmul float %215, %233, !dbg !39
  %384 = fmul float %216, %235, !dbg !39
  %385 = fmul float %222, %229, !dbg !39
  %386 = fmul float %223, %231, !dbg !39
  %387 = fmul float %224, %233, !dbg !39
  %388 = fmul float %225, %235, !dbg !39
  %389 = fadd float %373, %155, !dbg !40
  %390 = fadd float %374, %156, !dbg !40
  %391 = fadd float %375, %157, !dbg !40
  %392 = fadd float %376, %158, !dbg !40
  %393 = fadd float %377, %164, !dbg !40
  %394 = fadd float %378, %165, !dbg !40
  %395 = fadd float %379, %166, !dbg !40
  %396 = fadd float %380, %167, !dbg !40
  %397 = fadd float %381, %173, !dbg !40
  %398 = fadd float %382, %174, !dbg !40
  %399 = fadd float %383, %175, !dbg !40
  %400 = fadd float %384, %176, !dbg !40
  %401 = fadd float %385, %182, !dbg !40
  %402 = fadd float %386, %183, !dbg !40
  %403 = fadd float %387, %184, !dbg !40
  %404 = fadd float %388, %185, !dbg !40
  %405 = fadd float %389, %333, !dbg !41
  %406 = fadd float %390, %335, !dbg !41
  %407 = fadd float %391, %337, !dbg !41
  %408 = fadd float %392, %339, !dbg !41
  %409 = fadd float %393, %344, !dbg !41
  %410 = fadd float %394, %346, !dbg !41
  %411 = fadd float %395, %348, !dbg !41
  %412 = fadd float %396, %350, !dbg !41
  %413 = fadd float %397, %355, !dbg !41
  %414 = fadd float %398, %357, !dbg !41
  %415 = fadd float %399, %359, !dbg !41
  %416 = fadd float %400, %361, !dbg !41
  %417 = fadd float %401, %366, !dbg !41
  %418 = fadd float %402, %368, !dbg !41
  %419 = fadd float %403, %370, !dbg !41
  %420 = fadd float %404, %372, !dbg !41
  %421 = getelementptr float, ptr addrspace(1) %5, i64 %48, !dbg !42
  %422 = getelementptr float, ptr addrspace(1) %5, i64 %50, !dbg !42
  %423 = getelementptr float, ptr addrspace(1) %5, i64 %52, !dbg !42
  %424 = getelementptr float, ptr addrspace(1) %5, i64 %54, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %425 = lshr exact i32 %253, 4, !dbg !43
  %426 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %425, !dbg !43
  %427 = getelementptr float, ptr addrspace(3) %426, i32 %254, !dbg !43
  %428 = bitcast float %405 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %427, <1 x i32> %428, i1 true) #2, !dbg !43
  %429 = getelementptr float, ptr addrspace(3) @global_smem, i32 %261, !dbg !43
  %430 = getelementptr float, ptr addrspace(3) %429, i32 %260, !dbg !43
  %431 = bitcast float %406 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %430, <1 x i32> %431, i1 true) #2, !dbg !43
  %432 = getelementptr float, ptr addrspace(3) @global_smem, i32 %266, !dbg !43
  %433 = getelementptr float, ptr addrspace(3) %432, i32 %265, !dbg !43
  %434 = bitcast float %407 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %433, <1 x i32> %434, i1 true) #2, !dbg !43
  %435 = getelementptr float, ptr addrspace(3) @global_smem, i32 %271, !dbg !43
  %436 = getelementptr float, ptr addrspace(3) %435, i32 %270, !dbg !43
  %437 = bitcast float %408 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %436, <1 x i32> %437, i1 true) #2, !dbg !43
  %438 = getelementptr float, ptr addrspace(3) %426, i32 %275, !dbg !43
  %439 = bitcast float %409 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %438, <1 x i32> %439, i1 true) #2, !dbg !43
  %440 = getelementptr float, ptr addrspace(3) @global_smem, i32 %279, !dbg !43
  %441 = getelementptr float, ptr addrspace(3) %440, i32 %278, !dbg !43
  %442 = bitcast float %410 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %441, <1 x i32> %442, i1 true) #2, !dbg !43
  %443 = getelementptr float, ptr addrspace(3) @global_smem, i32 %284, !dbg !43
  %444 = getelementptr float, ptr addrspace(3) %443, i32 %283, !dbg !43
  %445 = bitcast float %411 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %444, <1 x i32> %445, i1 true) #2, !dbg !43
  %446 = getelementptr float, ptr addrspace(3) @global_smem, i32 %289, !dbg !43
  %447 = getelementptr float, ptr addrspace(3) %446, i32 %288, !dbg !43
  %448 = bitcast float %412 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %447, <1 x i32> %448, i1 true) #2, !dbg !43
  %449 = getelementptr float, ptr addrspace(3) %426, i32 %293, !dbg !43
  %450 = bitcast float %413 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %449, <1 x i32> %450, i1 true) #2, !dbg !43
  %451 = getelementptr float, ptr addrspace(3) @global_smem, i32 %297, !dbg !43
  %452 = getelementptr float, ptr addrspace(3) %451, i32 %296, !dbg !43
  %453 = bitcast float %414 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %452, <1 x i32> %453, i1 true) #2, !dbg !43
  %454 = getelementptr float, ptr addrspace(3) @global_smem, i32 %302, !dbg !43
  %455 = getelementptr float, ptr addrspace(3) %454, i32 %301, !dbg !43
  %456 = bitcast float %415 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %455, <1 x i32> %456, i1 true) #2, !dbg !43
  %457 = getelementptr float, ptr addrspace(3) @global_smem, i32 %307, !dbg !43
  %458 = getelementptr float, ptr addrspace(3) %457, i32 %306, !dbg !43
  %459 = bitcast float %416 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %458, <1 x i32> %459, i1 true) #2, !dbg !43
  %460 = getelementptr float, ptr addrspace(3) %426, i32 %311, !dbg !43
  %461 = bitcast float %417 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %460, <1 x i32> %461, i1 true) #2, !dbg !43
  %462 = getelementptr float, ptr addrspace(3) @global_smem, i32 %315, !dbg !43
  %463 = getelementptr float, ptr addrspace(3) %462, i32 %314, !dbg !43
  %464 = bitcast float %418 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %463, <1 x i32> %464, i1 true) #2, !dbg !43
  %465 = getelementptr float, ptr addrspace(3) @global_smem, i32 %320, !dbg !43
  %466 = getelementptr float, ptr addrspace(3) %465, i32 %319, !dbg !43
  %467 = bitcast float %419 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %466, <1 x i32> %467, i1 true) #2, !dbg !43
  %468 = getelementptr float, ptr addrspace(3) @global_smem, i32 %325, !dbg !43
  %469 = getelementptr float, ptr addrspace(3) %468, i32 %324, !dbg !43
  %470 = bitcast float %420 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %469, <1 x i32> %470, i1 true) #2, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %471 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %329, !dbg !43
  %472 = getelementptr inbounds float, ptr addrspace(3) %471, i32 %255, !dbg !43
  %473 = load i32, ptr addrspace(3) %472, align 4, !dbg !43
  %474 = or disjoint i32 %255, 1, !dbg !43
  %475 = getelementptr inbounds float, ptr addrspace(3) %471, i32 %474, !dbg !43
  %476 = load i32, ptr addrspace(3) %475, align 4, !dbg !43
  %477 = or disjoint i32 %255, 2, !dbg !43
  %478 = getelementptr inbounds float, ptr addrspace(3) %471, i32 %477, !dbg !43
  %479 = load i32, ptr addrspace(3) %478, align 4, !dbg !43
  %480 = or disjoint i32 %255, 3, !dbg !43
  %481 = getelementptr inbounds float, ptr addrspace(3) %471, i32 %480, !dbg !43
  %482 = load i32, ptr addrspace(3) %481, align 4, !dbg !43
  %483 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %341, !dbg !43
  %484 = getelementptr inbounds float, ptr addrspace(3) %483, i32 %340, !dbg !43
  %485 = load i32, ptr addrspace(3) %484, align 4, !dbg !43
  %486 = or disjoint i32 %255, 1025, !dbg !43
  %487 = lshr i32 %486, 6, !dbg !43
  %488 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %487, !dbg !43
  %489 = getelementptr inbounds float, ptr addrspace(3) %488, i32 %486, !dbg !43
  %490 = load i32, ptr addrspace(3) %489, align 4, !dbg !43
  %491 = or disjoint i32 %255, 1026, !dbg !43
  %492 = lshr i32 %491, 6, !dbg !43
  %493 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %492, !dbg !43
  %494 = getelementptr inbounds float, ptr addrspace(3) %493, i32 %491, !dbg !43
  %495 = load i32, ptr addrspace(3) %494, align 4, !dbg !43
  %496 = or disjoint i32 %255, 1027, !dbg !43
  %497 = lshr i32 %496, 6, !dbg !43
  %498 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %497, !dbg !43
  %499 = getelementptr inbounds float, ptr addrspace(3) %498, i32 %496, !dbg !43
  %500 = load i32, ptr addrspace(3) %499, align 4, !dbg !43
  %501 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %352, !dbg !43
  %502 = getelementptr inbounds float, ptr addrspace(3) %501, i32 %351, !dbg !43
  %503 = load i32, ptr addrspace(3) %502, align 4, !dbg !43
  %504 = or disjoint i32 %255, 2049, !dbg !43
  %505 = lshr i32 %504, 6, !dbg !43
  %506 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %505, !dbg !43
  %507 = getelementptr inbounds float, ptr addrspace(3) %506, i32 %504, !dbg !43
  %508 = load i32, ptr addrspace(3) %507, align 4, !dbg !43
  %509 = or disjoint i32 %255, 2050, !dbg !43
  %510 = lshr i32 %509, 6, !dbg !43
  %511 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %510, !dbg !43
  %512 = getelementptr inbounds float, ptr addrspace(3) %511, i32 %509, !dbg !43
  %513 = load i32, ptr addrspace(3) %512, align 4, !dbg !43
  %514 = or disjoint i32 %255, 2051, !dbg !43
  %515 = lshr i32 %514, 6, !dbg !43
  %516 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %515, !dbg !43
  %517 = getelementptr inbounds float, ptr addrspace(3) %516, i32 %514, !dbg !43
  %518 = load i32, ptr addrspace(3) %517, align 4, !dbg !43
  %519 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %363, !dbg !43
  %520 = getelementptr inbounds float, ptr addrspace(3) %519, i32 %362, !dbg !43
  %521 = load i32, ptr addrspace(3) %520, align 4, !dbg !43
  %522 = or disjoint i32 %255, 3073, !dbg !43
  %523 = lshr i32 %522, 6, !dbg !43
  %524 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %523, !dbg !43
  %525 = getelementptr inbounds float, ptr addrspace(3) %524, i32 %522, !dbg !43
  %526 = load i32, ptr addrspace(3) %525, align 4, !dbg !43
  %527 = or disjoint i32 %255, 3074, !dbg !43
  %528 = lshr i32 %527, 6, !dbg !43
  %529 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %528, !dbg !43
  %530 = getelementptr inbounds float, ptr addrspace(3) %529, i32 %527, !dbg !43
  %531 = load i32, ptr addrspace(3) %530, align 4, !dbg !43
  %532 = or disjoint i32 %255, 3075, !dbg !43
  %533 = lshr i32 %532, 6, !dbg !43
  %534 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %533, !dbg !43
  %535 = getelementptr inbounds float, ptr addrspace(3) %534, i32 %532, !dbg !43
  %536 = load i32, ptr addrspace(3) %535, align 4, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %473, i32 %476, i32 %479, i32 %482, ptr addrspace(1) %421, i1 %31) #2, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %485, i32 %490, i32 %495, i32 %500, ptr addrspace(1) %422, i1 %31) #2, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %503, i32 %508, i32 %513, i32 %518, ptr addrspace(1) %423, i1 %31) #2, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %521, i32 %526, i32 %531, i32 %536, ptr addrspace(1) %424, i1 %31) #2, !dbg !43
  ret void, !dbg !44
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cj7ii7ff4iqdx3sh6b47pmhluvvvo5e2wy6b3llcn7najadxovku.py", directory: "inductor_cache/j7")
!4 = !{ptr @triton_poi_fused_add_mul_8, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_mul_8, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_mul_8", linkageName: "triton_poi_fused_add_mul_8", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 23, scope: !7)
!17 = !DILocation(line: 27, column: 21, scope: !7)
!18 = !DILocation(line: 30, column: 19, scope: !7)
!19 = !DILocation(line: 31, column: 19, scope: !7)
!20 = !DILocation(line: 32, column: 21, scope: !7)
!21 = !DILocation(line: 32, column: 27, scope: !7)
!22 = !DILocation(line: 33, column: 39, scope: !7)
!23 = !DILocation(line: 33, column: 35, scope: !7)
!24 = !DILocation(line: 33, column: 30, scope: !7)
!25 = !DILocation(line: 33, column: 44, scope: !7)
!26 = !DILocation(line: 34, column: 30, scope: !7)
!27 = !DILocation(line: 34, column: 44, scope: !7)
!28 = !DILocation(line: 35, column: 39, scope: !7)
!29 = !DILocation(line: 35, column: 50, scope: !7)
!30 = !DILocation(line: 35, column: 35, scope: !7)
!31 = !DILocation(line: 35, column: 44, scope: !7)
!32 = !DILocation(line: 35, column: 30, scope: !7)
!33 = !DILocation(line: 35, column: 55, scope: !7)
!34 = !DILocation(line: 36, column: 30, scope: !7)
!35 = !DILocation(line: 36, column: 55, scope: !7)
!36 = !DILocation(line: 37, column: 30, scope: !7)
!37 = !DILocation(line: 37, column: 35, scope: !7)
!38 = !DILocation(line: 38, column: 18, scope: !7)
!39 = !DILocation(line: 39, column: 18, scope: !7)
!40 = !DILocation(line: 40, column: 18, scope: !7)
!41 = !DILocation(line: 41, column: 18, scope: !7)
!42 = !DILocation(line: 42, column: 25, scope: !7)
!43 = !DILocation(line: 42, column: 45, scope: !7)
!44 = !DILocation(line: 42, column: 4, scope: !7)
