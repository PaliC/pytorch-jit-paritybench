; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_max_pool2d_with_indices_17(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 5, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 2, !dbg !12
  %10 = and i32 %9, 31, !dbg !12
  %.lobit3 = lshr i32 %8, 5, !dbg !12
  %11 = and i32 %.lobit3, 3, !dbg !12
  %12 = or disjoint i32 %7, %10, !dbg !13
  %13 = or disjoint i32 %7, %11, !dbg !13
  %14 = or disjoint i32 %13, 4, !dbg !13
  %15 = or disjoint i32 %13, 8, !dbg !13
  %16 = or disjoint i32 %13, 12, !dbg !13
  %17 = or disjoint i32 %13, 16, !dbg !13
  %18 = or disjoint i32 %13, 20, !dbg !13
  %19 = or disjoint i32 %13, 24, !dbg !13
  %20 = or disjoint i32 %13, 28, !dbg !13
  %21 = icmp slt i32 %12, 324, !dbg !14
  %22 = icmp slt i32 %13, 324, !dbg !14
  %23 = icmp slt i32 %14, 324, !dbg !14
  %24 = icmp slt i32 %15, 324, !dbg !14
  %25 = icmp slt i32 %16, 324, !dbg !14
  %26 = icmp slt i32 %17, 324, !dbg !14
  %27 = icmp slt i32 %18, 324, !dbg !14
  %28 = icmp slt i32 %19, 324, !dbg !14
  %29 = icmp slt i32 %20, 324, !dbg !14
  %30 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %31 = shl i32 %30, 5, !dbg !16
  %32 = shl i32 %8, 3, !dbg !17
  %33 = and i32 %32, 24, !dbg !17
  %34 = and i32 %8, 31, !dbg !17
  %35 = or disjoint i32 %31, %33, !dbg !18
  %36 = or disjoint i32 %35, 4, !dbg !18
  %37 = or disjoint i32 %31, %34, !dbg !18
  %38 = icmp slt i32 %35, 512, !dbg !19
  %39 = icmp slt i32 %37, 512, !dbg !19
  %40 = sdiv i32 %12, 9, !dbg !20
  %41 = sdiv i32 %12, 81, !dbg !21
  %.frozen = freeze i32 %13, !dbg !21
  %42 = sdiv i32 %.frozen, 81, !dbg !21
  %.frozen17 = freeze i32 %14, !dbg !21
  %43 = sdiv i32 %.frozen17, 81, !dbg !21
  %.frozen19 = freeze i32 %15, !dbg !21
  %44 = sdiv i32 %.frozen19, 81, !dbg !21
  %.frozen21 = freeze i32 %16, !dbg !21
  %45 = sdiv i32 %.frozen21, 81, !dbg !21
  %.frozen23 = freeze i32 %17, !dbg !21
  %46 = sdiv i32 %.frozen23, 81, !dbg !21
  %.frozen25 = freeze i32 %18, !dbg !21
  %47 = sdiv i32 %.frozen25, 81, !dbg !21
  %.frozen27 = freeze i32 %19, !dbg !21
  %48 = sdiv i32 %.frozen27, 81, !dbg !21
  %.frozen29 = freeze i32 %20, !dbg !21
  %49 = sdiv i32 %.frozen29, 81, !dbg !21
  %50 = mul i32 %42, 81, !dbg !22
  %.decomposed = sub i32 %.frozen, %50, !dbg !22
  %51 = mul i32 %43, 81, !dbg !22
  %.decomposed18 = sub i32 %.frozen17, %51, !dbg !22
  %52 = mul i32 %44, 81, !dbg !22
  %.decomposed20 = sub i32 %.frozen19, %52, !dbg !22
  %53 = mul i32 %45, 81, !dbg !22
  %.decomposed22 = sub i32 %.frozen21, %53, !dbg !22
  %54 = mul i32 %46, 81, !dbg !22
  %.decomposed24 = sub i32 %.frozen23, %54, !dbg !22
  %55 = mul i32 %47, 81, !dbg !22
  %.decomposed26 = sub i32 %.frozen25, %55, !dbg !22
  %56 = mul i32 %48, 81, !dbg !22
  %.decomposed28 = sub i32 %.frozen27, %56, !dbg !22
  %57 = mul i32 %49, 81, !dbg !22
  %.decomposed30 = sub i32 %.frozen29, %57, !dbg !22
  %58 = mul i32 %41, 147968, !dbg !23
  %59 = insertelement <2 x i32> poison, i32 %12, i64 0, !dbg !24
  %60 = insertelement <2 x i32> %59, i32 %40, i64 1, !dbg !24
  %61 = srem <2 x i32> %60, splat (i32 9), !dbg !24
  %62 = extractelement <2 x i32> %61, i64 1, !dbg !25
  %63 = icmp sgt i32 %62, 0, !dbg !26
  %64 = shl nsw <2 x i32> %61, splat (i32 1), !dbg !27
  %65 = extractelement <2 x i32> %61, i64 0, !dbg !25
  %66 = icmp sgt i32 %65, 0, !dbg !28
  %67 = and i1 %66, %63, !dbg !29
  %68 = shl nsw i32 %65, 10, !dbg !30
  %69 = mul nsw i32 %62, 17408, !dbg !31
  %70 = add i32 %58, %68, !dbg !32
  %71 = add i32 %70, -9216, !dbg !33
  %72 = add i32 %71, %35, !dbg !34
  %73 = add i32 %72, %69, !dbg !35
  %74 = add i32 %71, %36, !dbg !34
  %75 = add i32 %74, %69, !dbg !35
  %76 = sext i32 %73 to i64, !dbg !36
  %77 = getelementptr float, ptr addrspace(1) %0, i64 %76, !dbg !36
  %78 = sext i32 %75 to i64, !dbg !36
  %79 = getelementptr float, ptr addrspace(1) %0, i64 %78, !dbg !36
  %80 = and i1 %38, %67, !dbg !37
  %81 = and i1 %21, %80, !dbg !38
  %82 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %77, i1 %81, i32 -8388608, i1 %81, i32 -8388608, i1 %81, i32 -8388608, i1 %81, i32 -8388608, i1 %81) #2, !dbg !39
  %83 = extractvalue { i32, i32, i32, i32 } %82, 0, !dbg !39
  %84 = extractvalue { i32, i32, i32, i32 } %82, 1, !dbg !39
  %85 = extractvalue { i32, i32, i32, i32 } %82, 2, !dbg !39
  %86 = extractvalue { i32, i32, i32, i32 } %82, 3, !dbg !39
  %87 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %79, i1 %81, i32 -8388608, i1 %81, i32 -8388608, i1 %81, i32 -8388608, i1 %81, i32 -8388608, i1 %81) #2, !dbg !39
  %88 = extractvalue { i32, i32, i32, i32 } %87, 0, !dbg !39
  %89 = extractvalue { i32, i32, i32, i32 } %87, 1, !dbg !39
  %90 = extractvalue { i32, i32, i32, i32 } %87, 2, !dbg !39
  %91 = extractvalue { i32, i32, i32, i32 } %87, 3, !dbg !39
  %92 = icmp sgt <2 x i32> %61, splat (i32 -1), !dbg !40
  %93 = extractelement <2 x i1> %92, i64 0, !dbg !41
  %94 = and i1 %93, %63, !dbg !41
  %95 = add i32 %70, -8704, !dbg !42
  %96 = add i32 %95, %35, !dbg !43
  %97 = add i32 %96, %69, !dbg !44
  %98 = add i32 %95, %36, !dbg !43
  %99 = add i32 %98, %69, !dbg !44
  %100 = sext i32 %97 to i64, !dbg !45
  %101 = getelementptr float, ptr addrspace(1) %0, i64 %100, !dbg !45
  %102 = sext i32 %99 to i64, !dbg !45
  %103 = getelementptr float, ptr addrspace(1) %0, i64 %102, !dbg !45
  %104 = and i1 %38, %94, !dbg !46
  %105 = and i1 %21, %104, !dbg !47
  %106 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %101, i1 %105, i32 -8388608, i1 %105, i32 -8388608, i1 %105, i32 -8388608, i1 %105, i32 -8388608, i1 %105) #2, !dbg !48
  %107 = extractvalue { i32, i32, i32, i32 } %106, 0, !dbg !48
  %108 = extractvalue { i32, i32, i32, i32 } %106, 1, !dbg !48
  %109 = extractvalue { i32, i32, i32, i32 } %106, 2, !dbg !48
  %110 = extractvalue { i32, i32, i32, i32 } %106, 3, !dbg !48
  %111 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %103, i1 %105, i32 -8388608, i1 %105, i32 -8388608, i1 %105, i32 -8388608, i1 %105, i32 -8388608, i1 %105) #2, !dbg !48
  %112 = extractvalue { i32, i32, i32, i32 } %111, 0, !dbg !48
  %113 = extractvalue { i32, i32, i32, i32 } %111, 1, !dbg !48
  %114 = extractvalue { i32, i32, i32, i32 } %111, 2, !dbg !48
  %115 = extractvalue { i32, i32, i32, i32 } %111, 3, !dbg !48
  %116 = or disjoint <2 x i32> %64, splat (i32 1), !dbg !49
  %117 = icmp slt <2 x i32> %116, splat (i32 17), !dbg !50
  %118 = and <2 x i1> %92, %117, !dbg !51
  %119 = extractelement <2 x i1> %118, i64 0, !dbg !52
  %120 = and i1 %63, %119, !dbg !53
  %121 = add i32 %70, -8192, !dbg !54
  %122 = add i32 %121, %35, !dbg !55
  %123 = add i32 %122, %69, !dbg !56
  %124 = add i32 %121, %36, !dbg !55
  %125 = add i32 %124, %69, !dbg !56
  %126 = sext i32 %123 to i64, !dbg !57
  %127 = getelementptr float, ptr addrspace(1) %0, i64 %126, !dbg !57
  %128 = sext i32 %125 to i64, !dbg !57
  %129 = getelementptr float, ptr addrspace(1) %0, i64 %128, !dbg !57
  %130 = and i1 %38, %120, !dbg !58
  %131 = and i1 %21, %130, !dbg !59
  %132 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %127, i1 %131, i32 -8388608, i1 %131, i32 -8388608, i1 %131, i32 -8388608, i1 %131, i32 -8388608, i1 %131) #2, !dbg !60
  %133 = extractvalue { i32, i32, i32, i32 } %132, 0, !dbg !60
  %134 = extractvalue { i32, i32, i32, i32 } %132, 1, !dbg !60
  %135 = extractvalue { i32, i32, i32, i32 } %132, 2, !dbg !60
  %136 = extractvalue { i32, i32, i32, i32 } %132, 3, !dbg !60
  %137 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %129, i1 %131, i32 -8388608, i1 %131, i32 -8388608, i1 %131, i32 -8388608, i1 %131, i32 -8388608, i1 %131) #2, !dbg !60
  %138 = extractvalue { i32, i32, i32, i32 } %137, 0, !dbg !60
  %139 = extractvalue { i32, i32, i32, i32 } %137, 1, !dbg !60
  %140 = extractvalue { i32, i32, i32, i32 } %137, 2, !dbg !60
  %141 = extractvalue { i32, i32, i32, i32 } %137, 3, !dbg !60
  %142 = extractelement <2 x i1> %92, i64 1, !dbg !61
  %143 = and i1 %66, %142, !dbg !61
  %144 = add i32 %70, -512, !dbg !62
  %145 = add i32 %144, %35, !dbg !63
  %146 = add i32 %145, %69, !dbg !64
  %147 = add i32 %144, %36, !dbg !63
  %148 = add i32 %147, %69, !dbg !64
  %149 = sext i32 %146 to i64, !dbg !65
  %150 = getelementptr float, ptr addrspace(1) %0, i64 %149, !dbg !65
  %151 = sext i32 %148 to i64, !dbg !65
  %152 = getelementptr float, ptr addrspace(1) %0, i64 %151, !dbg !65
  %153 = and i1 %38, %143, !dbg !66
  %154 = and i1 %21, %153, !dbg !67
  %155 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %150, i1 %154, i32 -8388608, i1 %154, i32 -8388608, i1 %154, i32 -8388608, i1 %154, i32 -8388608, i1 %154) #2, !dbg !68
  %156 = extractvalue { i32, i32, i32, i32 } %155, 0, !dbg !68
  %157 = extractvalue { i32, i32, i32, i32 } %155, 1, !dbg !68
  %158 = extractvalue { i32, i32, i32, i32 } %155, 2, !dbg !68
  %159 = extractvalue { i32, i32, i32, i32 } %155, 3, !dbg !68
  %160 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %152, i1 %154, i32 -8388608, i1 %154, i32 -8388608, i1 %154, i32 -8388608, i1 %154, i32 -8388608, i1 %154) #2, !dbg !68
  %161 = extractvalue { i32, i32, i32, i32 } %160, 0, !dbg !68
  %162 = extractvalue { i32, i32, i32, i32 } %160, 1, !dbg !68
  %163 = extractvalue { i32, i32, i32, i32 } %160, 2, !dbg !68
  %164 = extractvalue { i32, i32, i32, i32 } %160, 3, !dbg !68
  %165 = or i32 %62, %65, !dbg !25
  %166 = icmp sgt i32 %165, -1, !dbg !25
  %167 = add i32 %70, %35, !dbg !69
  %168 = add i32 %167, %69, !dbg !70
  %169 = add i32 %70, %36, !dbg !69
  %170 = add i32 %169, %69, !dbg !70
  %171 = sext i32 %168 to i64, !dbg !71
  %172 = getelementptr float, ptr addrspace(1) %0, i64 %171, !dbg !71
  %173 = sext i32 %170 to i64, !dbg !71
  %174 = getelementptr float, ptr addrspace(1) %0, i64 %173, !dbg !71
  %175 = and i1 %38, %166, !dbg !72
  %176 = and i1 %21, %175, !dbg !73
  %177 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %172, i1 %176, i32 -8388608, i1 %176, i32 -8388608, i1 %176, i32 -8388608, i1 %176, i32 -8388608, i1 %176) #2, !dbg !74
  %178 = extractvalue { i32, i32, i32, i32 } %177, 0, !dbg !74
  %179 = extractvalue { i32, i32, i32, i32 } %177, 1, !dbg !74
  %180 = extractvalue { i32, i32, i32, i32 } %177, 2, !dbg !74
  %181 = extractvalue { i32, i32, i32, i32 } %177, 3, !dbg !74
  %182 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %174, i1 %176, i32 -8388608, i1 %176, i32 -8388608, i1 %176, i32 -8388608, i1 %176, i32 -8388608, i1 %176) #2, !dbg !74
  %183 = extractvalue { i32, i32, i32, i32 } %182, 0, !dbg !74
  %184 = extractvalue { i32, i32, i32, i32 } %182, 1, !dbg !74
  %185 = extractvalue { i32, i32, i32, i32 } %182, 2, !dbg !74
  %186 = extractvalue { i32, i32, i32, i32 } %182, 3, !dbg !74
  %187 = and i1 %142, %119, !dbg !75
  %188 = add i32 %70, 512, !dbg !76
  %189 = add i32 %188, %35, !dbg !77
  %190 = add i32 %189, %69, !dbg !78
  %191 = add i32 %188, %36, !dbg !77
  %192 = add i32 %191, %69, !dbg !78
  %193 = sext i32 %190 to i64, !dbg !79
  %194 = getelementptr float, ptr addrspace(1) %0, i64 %193, !dbg !79
  %195 = sext i32 %192 to i64, !dbg !79
  %196 = getelementptr float, ptr addrspace(1) %0, i64 %195, !dbg !79
  %197 = and i1 %38, %187, !dbg !80
  %198 = and i1 %21, %197, !dbg !81
  %199 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %194, i1 %198, i32 -8388608, i1 %198, i32 -8388608, i1 %198, i32 -8388608, i1 %198, i32 -8388608, i1 %198) #2, !dbg !82
  %200 = extractvalue { i32, i32, i32, i32 } %199, 0, !dbg !82
  %201 = extractvalue { i32, i32, i32, i32 } %199, 1, !dbg !82
  %202 = extractvalue { i32, i32, i32, i32 } %199, 2, !dbg !82
  %203 = extractvalue { i32, i32, i32, i32 } %199, 3, !dbg !82
  %204 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %196, i1 %198, i32 -8388608, i1 %198, i32 -8388608, i1 %198, i32 -8388608, i1 %198, i32 -8388608, i1 %198) #2, !dbg !82
  %205 = extractvalue { i32, i32, i32, i32 } %204, 0, !dbg !82
  %206 = extractvalue { i32, i32, i32, i32 } %204, 1, !dbg !82
  %207 = extractvalue { i32, i32, i32, i32 } %204, 2, !dbg !82
  %208 = extractvalue { i32, i32, i32, i32 } %204, 3, !dbg !82
  %209 = extractelement <2 x i1> %118, i64 1, !dbg !52
  %210 = and i1 %66, %209, !dbg !83
  %211 = add i32 %70, 8192, !dbg !84
  %212 = add i32 %211, %35, !dbg !85
  %213 = add i32 %212, %69, !dbg !86
  %214 = add i32 %211, %36, !dbg !85
  %215 = add i32 %214, %69, !dbg !86
  %216 = sext i32 %213 to i64, !dbg !87
  %217 = getelementptr float, ptr addrspace(1) %0, i64 %216, !dbg !87
  %218 = sext i32 %215 to i64, !dbg !87
  %219 = getelementptr float, ptr addrspace(1) %0, i64 %218, !dbg !87
  %220 = and i1 %38, %210, !dbg !88
  %221 = and i1 %21, %220, !dbg !89
  %222 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %217, i1 %221, i32 -8388608, i1 %221, i32 -8388608, i1 %221, i32 -8388608, i1 %221, i32 -8388608, i1 %221) #2, !dbg !90
  %223 = extractvalue { i32, i32, i32, i32 } %222, 0, !dbg !90
  %224 = extractvalue { i32, i32, i32, i32 } %222, 1, !dbg !90
  %225 = extractvalue { i32, i32, i32, i32 } %222, 2, !dbg !90
  %226 = extractvalue { i32, i32, i32, i32 } %222, 3, !dbg !90
  %227 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %219, i1 %221, i32 -8388608, i1 %221, i32 -8388608, i1 %221, i32 -8388608, i1 %221, i32 -8388608, i1 %221) #2, !dbg !90
  %228 = extractvalue { i32, i32, i32, i32 } %227, 0, !dbg !90
  %229 = extractvalue { i32, i32, i32, i32 } %227, 1, !dbg !90
  %230 = extractvalue { i32, i32, i32, i32 } %227, 2, !dbg !90
  %231 = extractvalue { i32, i32, i32, i32 } %227, 3, !dbg !90
  %232 = and i1 %93, %209, !dbg !91
  %233 = add i32 %70, 8704, !dbg !92
  %234 = add i32 %233, %35, !dbg !93
  %235 = add i32 %234, %69, !dbg !94
  %236 = add i32 %233, %36, !dbg !93
  %237 = add i32 %236, %69, !dbg !94
  %238 = sext i32 %235 to i64, !dbg !95
  %239 = getelementptr float, ptr addrspace(1) %0, i64 %238, !dbg !95
  %240 = sext i32 %237 to i64, !dbg !95
  %241 = getelementptr float, ptr addrspace(1) %0, i64 %240, !dbg !95
  %242 = and i1 %38, %232, !dbg !96
  %243 = and i1 %21, %242, !dbg !97
  %244 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %239, i1 %243, i32 -8388608, i1 %243, i32 -8388608, i1 %243, i32 -8388608, i1 %243, i32 -8388608, i1 %243) #2, !dbg !98
  %245 = extractvalue { i32, i32, i32, i32 } %244, 0, !dbg !98
  %246 = extractvalue { i32, i32, i32, i32 } %244, 1, !dbg !98
  %247 = extractvalue { i32, i32, i32, i32 } %244, 2, !dbg !98
  %248 = extractvalue { i32, i32, i32, i32 } %244, 3, !dbg !98
  %249 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %241, i1 %243, i32 -8388608, i1 %243, i32 -8388608, i1 %243, i32 -8388608, i1 %243, i32 -8388608, i1 %243) #2, !dbg !98
  %250 = extractvalue { i32, i32, i32, i32 } %249, 0, !dbg !98
  %251 = extractvalue { i32, i32, i32, i32 } %249, 1, !dbg !98
  %252 = extractvalue { i32, i32, i32, i32 } %249, 2, !dbg !98
  %253 = extractvalue { i32, i32, i32, i32 } %249, 3, !dbg !98
  %254 = and i1 %119, %209, !dbg !52
  %255 = add i32 %70, 9216, !dbg !99
  %256 = add i32 %255, %35, !dbg !100
  %257 = add i32 %256, %69, !dbg !101
  %258 = add i32 %255, %36, !dbg !100
  %259 = add i32 %258, %69, !dbg !101
  %260 = sext i32 %257 to i64, !dbg !102
  %261 = getelementptr float, ptr addrspace(1) %0, i64 %260, !dbg !102
  %262 = sext i32 %259 to i64, !dbg !102
  %263 = getelementptr float, ptr addrspace(1) %0, i64 %262, !dbg !102
  %264 = and i1 %38, %254, !dbg !103
  %265 = and i1 %21, %264, !dbg !104
  %266 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %261, i1 %265, i32 -8388608, i1 %265, i32 -8388608, i1 %265, i32 -8388608, i1 %265, i32 -8388608, i1 %265) #2, !dbg !105
  %267 = extractvalue { i32, i32, i32, i32 } %266, 0, !dbg !105
  %268 = extractvalue { i32, i32, i32, i32 } %266, 1, !dbg !105
  %269 = extractvalue { i32, i32, i32, i32 } %266, 2, !dbg !105
  %270 = extractvalue { i32, i32, i32, i32 } %266, 3, !dbg !105
  %271 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %263, i1 %265, i32 -8388608, i1 %265, i32 -8388608, i1 %265, i32 -8388608, i1 %265, i32 -8388608, i1 %265) #2, !dbg !105
  %272 = extractvalue { i32, i32, i32, i32 } %271, 0, !dbg !105
  %273 = extractvalue { i32, i32, i32, i32 } %271, 1, !dbg !105
  %274 = extractvalue { i32, i32, i32, i32 } %271, 2, !dbg !105
  %275 = extractvalue { i32, i32, i32, i32 } %271, 3, !dbg !105
  %276 = insertelement <4 x i32> poison, i32 %83, i64 0, !dbg !39
  %277 = insertelement <4 x i32> %276, i32 %84, i64 1, !dbg !39
  %278 = insertelement <4 x i32> %277, i32 %85, i64 2, !dbg !39
  %279 = insertelement <4 x i32> %278, i32 %86, i64 3, !dbg !39
  %280 = bitcast <4 x i32> %279 to <4 x float>, !dbg !39
  %281 = insertelement <4 x i32> poison, i32 %107, i64 0, !dbg !48
  %282 = insertelement <4 x i32> %281, i32 %108, i64 1, !dbg !48
  %283 = insertelement <4 x i32> %282, i32 %109, i64 2, !dbg !48
  %284 = insertelement <4 x i32> %283, i32 %110, i64 3, !dbg !48
  %285 = bitcast <4 x i32> %284 to <4 x float>, !dbg !48
  %286 = fcmp ogt <4 x float> %285, %280, !dbg !106
  %287 = fcmp uno <4 x float> %285, zeroinitializer, !dbg !110
  %288 = or <4 x i1> %286, %287, !dbg !111
  %.v = select <4 x i1> %288, <4 x i32> %284, <4 x i32> %279, !dbg !112
  %289 = bitcast <4 x i32> %.v to <4 x float>, !dbg !112
  %290 = insertelement <4 x i32> poison, i32 %133, i64 0, !dbg !60
  %291 = insertelement <4 x i32> %290, i32 %134, i64 1, !dbg !60
  %292 = insertelement <4 x i32> %291, i32 %135, i64 2, !dbg !60
  %293 = insertelement <4 x i32> %292, i32 %136, i64 3, !dbg !60
  %294 = bitcast <4 x i32> %293 to <4 x float>, !dbg !60
  %295 = fcmp olt <4 x float> %289, %294, !dbg !113
  %296 = fcmp uno <4 x float> %294, zeroinitializer, !dbg !115
  %297 = or <4 x i1> %296, %295, !dbg !116
  %.v4 = select <4 x i1> %297, <4 x i32> %293, <4 x i32> %.v, !dbg !117
  %298 = bitcast <4 x i32> %.v4 to <4 x float>, !dbg !117
  %299 = insertelement <4 x i32> poison, i32 %156, i64 0, !dbg !68
  %300 = insertelement <4 x i32> %299, i32 %157, i64 1, !dbg !68
  %301 = insertelement <4 x i32> %300, i32 %158, i64 2, !dbg !68
  %302 = insertelement <4 x i32> %301, i32 %159, i64 3, !dbg !68
  %303 = bitcast <4 x i32> %302 to <4 x float>, !dbg !68
  %304 = fcmp olt <4 x float> %298, %303, !dbg !118
  %305 = fcmp uno <4 x float> %303, zeroinitializer, !dbg !120
  %306 = or <4 x i1> %305, %304, !dbg !121
  %.v5 = select <4 x i1> %306, <4 x i32> %302, <4 x i32> %.v4, !dbg !122
  %307 = bitcast <4 x i32> %.v5 to <4 x float>, !dbg !122
  %308 = insertelement <4 x i32> poison, i32 %178, i64 0, !dbg !74
  %309 = insertelement <4 x i32> %308, i32 %179, i64 1, !dbg !74
  %310 = insertelement <4 x i32> %309, i32 %180, i64 2, !dbg !74
  %311 = insertelement <4 x i32> %310, i32 %181, i64 3, !dbg !74
  %312 = bitcast <4 x i32> %311 to <4 x float>, !dbg !74
  %313 = fcmp olt <4 x float> %307, %312, !dbg !123
  %314 = fcmp uno <4 x float> %312, zeroinitializer, !dbg !125
  %315 = or <4 x i1> %314, %313, !dbg !126
  %.v6 = select <4 x i1> %315, <4 x i32> %311, <4 x i32> %.v5, !dbg !127
  %316 = bitcast <4 x i32> %.v6 to <4 x float>, !dbg !127
  %317 = insertelement <4 x i32> poison, i32 %200, i64 0, !dbg !82
  %318 = insertelement <4 x i32> %317, i32 %201, i64 1, !dbg !82
  %319 = insertelement <4 x i32> %318, i32 %202, i64 2, !dbg !82
  %320 = insertelement <4 x i32> %319, i32 %203, i64 3, !dbg !82
  %321 = bitcast <4 x i32> %320 to <4 x float>, !dbg !82
  %322 = fcmp olt <4 x float> %316, %321, !dbg !128
  %323 = fcmp uno <4 x float> %321, zeroinitializer, !dbg !130
  %324 = or <4 x i1> %323, %322, !dbg !131
  %.v7 = select <4 x i1> %324, <4 x i32> %320, <4 x i32> %.v6, !dbg !132
  %325 = bitcast <4 x i32> %.v7 to <4 x float>, !dbg !132
  %326 = insertelement <4 x i32> poison, i32 %223, i64 0, !dbg !90
  %327 = insertelement <4 x i32> %326, i32 %224, i64 1, !dbg !90
  %328 = insertelement <4 x i32> %327, i32 %225, i64 2, !dbg !90
  %329 = insertelement <4 x i32> %328, i32 %226, i64 3, !dbg !90
  %330 = bitcast <4 x i32> %329 to <4 x float>, !dbg !90
  %331 = fcmp olt <4 x float> %325, %330, !dbg !133
  %332 = fcmp uno <4 x float> %330, zeroinitializer, !dbg !135
  %333 = or <4 x i1> %332, %331, !dbg !136
  %.v8 = select <4 x i1> %333, <4 x i32> %329, <4 x i32> %.v7, !dbg !137
  %334 = bitcast <4 x i32> %.v8 to <4 x float>, !dbg !137
  %335 = insertelement <4 x i32> poison, i32 %245, i64 0, !dbg !98
  %336 = insertelement <4 x i32> %335, i32 %246, i64 1, !dbg !98
  %337 = insertelement <4 x i32> %336, i32 %247, i64 2, !dbg !98
  %338 = insertelement <4 x i32> %337, i32 %248, i64 3, !dbg !98
  %339 = bitcast <4 x i32> %338 to <4 x float>, !dbg !98
  %340 = fcmp olt <4 x float> %334, %339, !dbg !138
  %341 = fcmp uno <4 x float> %339, zeroinitializer, !dbg !140
  %342 = or <4 x i1> %341, %340, !dbg !141
  %.v9 = select <4 x i1> %342, <4 x i32> %338, <4 x i32> %.v8, !dbg !142
  %343 = bitcast <4 x i32> %.v9 to <4 x float>, !dbg !142
  %344 = insertelement <4 x i32> poison, i32 %267, i64 0, !dbg !105
  %345 = insertelement <4 x i32> %344, i32 %268, i64 1, !dbg !105
  %346 = insertelement <4 x i32> %345, i32 %269, i64 2, !dbg !105
  %347 = insertelement <4 x i32> %346, i32 %270, i64 3, !dbg !105
  %348 = bitcast <4 x i32> %347 to <4 x float>, !dbg !105
  %349 = fcmp olt <4 x float> %343, %348, !dbg !143
  %350 = extractelement <4 x i1> %349, i64 0, !dbg !145
  %351 = extractelement <4 x i1> %349, i64 1, !dbg !145
  %352 = extractelement <4 x i1> %349, i64 2, !dbg !145
  %353 = extractelement <4 x i1> %349, i64 3, !dbg !145
  %354 = zext <4 x i1> %286 to <4 x i8>, !dbg !146
  %355 = select <4 x i1> %295, <4 x i8> splat (i8 2), <4 x i8> %354, !dbg !147
  %356 = select <4 x i1> %304, <4 x i8> splat (i8 3), <4 x i8> %355, !dbg !148
  %357 = select <4 x i1> %313, <4 x i8> splat (i8 4), <4 x i8> %356, !dbg !149
  %358 = select <4 x i1> %322, <4 x i8> splat (i8 5), <4 x i8> %357, !dbg !150
  %359 = select <4 x i1> %331, <4 x i8> splat (i8 6), <4 x i8> %358, !dbg !151
  %360 = select <4 x i1> %340, <4 x i8> splat (i8 7), <4 x i8> %359, !dbg !152
  %361 = select <4 x i1> %349, <4 x i8> splat (i8 8), <4 x i8> %360, !dbg !153
  %362 = insertelement <4 x i32> poison, i32 %88, i64 0, !dbg !39
  %363 = insertelement <4 x i32> %362, i32 %89, i64 1, !dbg !39
  %364 = insertelement <4 x i32> %363, i32 %90, i64 2, !dbg !39
  %365 = insertelement <4 x i32> %364, i32 %91, i64 3, !dbg !39
  %366 = bitcast <4 x i32> %365 to <4 x float>, !dbg !39
  %367 = insertelement <4 x i32> poison, i32 %112, i64 0, !dbg !48
  %368 = insertelement <4 x i32> %367, i32 %113, i64 1, !dbg !48
  %369 = insertelement <4 x i32> %368, i32 %114, i64 2, !dbg !48
  %370 = insertelement <4 x i32> %369, i32 %115, i64 3, !dbg !48
  %371 = bitcast <4 x i32> %370 to <4 x float>, !dbg !48
  %372 = fcmp ogt <4 x float> %371, %366, !dbg !106
  %373 = fcmp uno <4 x float> %371, zeroinitializer, !dbg !110
  %374 = or <4 x i1> %372, %373, !dbg !111
  %.v10 = select <4 x i1> %374, <4 x i32> %370, <4 x i32> %365, !dbg !112
  %375 = bitcast <4 x i32> %.v10 to <4 x float>, !dbg !112
  %376 = insertelement <4 x i32> poison, i32 %138, i64 0, !dbg !60
  %377 = insertelement <4 x i32> %376, i32 %139, i64 1, !dbg !60
  %378 = insertelement <4 x i32> %377, i32 %140, i64 2, !dbg !60
  %379 = insertelement <4 x i32> %378, i32 %141, i64 3, !dbg !60
  %380 = bitcast <4 x i32> %379 to <4 x float>, !dbg !60
  %381 = fcmp olt <4 x float> %375, %380, !dbg !113
  %382 = fcmp uno <4 x float> %380, zeroinitializer, !dbg !115
  %383 = or <4 x i1> %382, %381, !dbg !116
  %.v11 = select <4 x i1> %383, <4 x i32> %379, <4 x i32> %.v10, !dbg !117
  %384 = bitcast <4 x i32> %.v11 to <4 x float>, !dbg !117
  %385 = insertelement <4 x i32> poison, i32 %161, i64 0, !dbg !68
  %386 = insertelement <4 x i32> %385, i32 %162, i64 1, !dbg !68
  %387 = insertelement <4 x i32> %386, i32 %163, i64 2, !dbg !68
  %388 = insertelement <4 x i32> %387, i32 %164, i64 3, !dbg !68
  %389 = bitcast <4 x i32> %388 to <4 x float>, !dbg !68
  %390 = fcmp olt <4 x float> %384, %389, !dbg !118
  %391 = fcmp uno <4 x float> %389, zeroinitializer, !dbg !120
  %392 = or <4 x i1> %391, %390, !dbg !121
  %.v12 = select <4 x i1> %392, <4 x i32> %388, <4 x i32> %.v11, !dbg !122
  %393 = bitcast <4 x i32> %.v12 to <4 x float>, !dbg !122
  %394 = insertelement <4 x i32> poison, i32 %183, i64 0, !dbg !74
  %395 = insertelement <4 x i32> %394, i32 %184, i64 1, !dbg !74
  %396 = insertelement <4 x i32> %395, i32 %185, i64 2, !dbg !74
  %397 = insertelement <4 x i32> %396, i32 %186, i64 3, !dbg !74
  %398 = bitcast <4 x i32> %397 to <4 x float>, !dbg !74
  %399 = fcmp olt <4 x float> %393, %398, !dbg !123
  %400 = fcmp uno <4 x float> %398, zeroinitializer, !dbg !125
  %401 = or <4 x i1> %400, %399, !dbg !126
  %.v13 = select <4 x i1> %401, <4 x i32> %397, <4 x i32> %.v12, !dbg !127
  %402 = bitcast <4 x i32> %.v13 to <4 x float>, !dbg !127
  %403 = insertelement <4 x i32> poison, i32 %205, i64 0, !dbg !82
  %404 = insertelement <4 x i32> %403, i32 %206, i64 1, !dbg !82
  %405 = insertelement <4 x i32> %404, i32 %207, i64 2, !dbg !82
  %406 = insertelement <4 x i32> %405, i32 %208, i64 3, !dbg !82
  %407 = bitcast <4 x i32> %406 to <4 x float>, !dbg !82
  %408 = fcmp olt <4 x float> %402, %407, !dbg !128
  %409 = fcmp uno <4 x float> %407, zeroinitializer, !dbg !130
  %410 = or <4 x i1> %409, %408, !dbg !131
  %.v14 = select <4 x i1> %410, <4 x i32> %406, <4 x i32> %.v13, !dbg !132
  %411 = bitcast <4 x i32> %.v14 to <4 x float>, !dbg !132
  %412 = insertelement <4 x i32> poison, i32 %228, i64 0, !dbg !90
  %413 = insertelement <4 x i32> %412, i32 %229, i64 1, !dbg !90
  %414 = insertelement <4 x i32> %413, i32 %230, i64 2, !dbg !90
  %415 = insertelement <4 x i32> %414, i32 %231, i64 3, !dbg !90
  %416 = bitcast <4 x i32> %415 to <4 x float>, !dbg !90
  %417 = fcmp olt <4 x float> %411, %416, !dbg !133
  %418 = fcmp uno <4 x float> %416, zeroinitializer, !dbg !135
  %419 = or <4 x i1> %418, %417, !dbg !136
  %.v15 = select <4 x i1> %419, <4 x i32> %415, <4 x i32> %.v14, !dbg !137
  %420 = bitcast <4 x i32> %.v15 to <4 x float>, !dbg !137
  %421 = insertelement <4 x i32> poison, i32 %250, i64 0, !dbg !98
  %422 = insertelement <4 x i32> %421, i32 %251, i64 1, !dbg !98
  %423 = insertelement <4 x i32> %422, i32 %252, i64 2, !dbg !98
  %424 = insertelement <4 x i32> %423, i32 %253, i64 3, !dbg !98
  %425 = bitcast <4 x i32> %424 to <4 x float>, !dbg !98
  %426 = fcmp olt <4 x float> %420, %425, !dbg !138
  %427 = fcmp uno <4 x float> %425, zeroinitializer, !dbg !140
  %428 = or <4 x i1> %427, %426, !dbg !141
  %.v16 = select <4 x i1> %428, <4 x i32> %424, <4 x i32> %.v15, !dbg !142
  %429 = bitcast <4 x i32> %.v16 to <4 x float>, !dbg !142
  %430 = insertelement <4 x i32> poison, i32 %272, i64 0, !dbg !105
  %431 = insertelement <4 x i32> %430, i32 %273, i64 1, !dbg !105
  %432 = insertelement <4 x i32> %431, i32 %274, i64 2, !dbg !105
  %433 = insertelement <4 x i32> %432, i32 %275, i64 3, !dbg !105
  %434 = bitcast <4 x i32> %433 to <4 x float>, !dbg !105
  %435 = fcmp olt <4 x float> %429, %434, !dbg !143
  %436 = shufflevector <4 x float> %434, <4 x float> %348, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4>, !dbg !154
  %437 = fcmp uno <8 x float> %436, zeroinitializer, !dbg !154
  %438 = extractelement <8 x i1> %437, i64 7, !dbg !145
  %439 = or i1 %438, %350, !dbg !145
  %440 = extractelement <8 x i1> %437, i64 6, !dbg !145
  %441 = or i1 %440, %351, !dbg !145
  %442 = extractelement <8 x i1> %437, i64 5, !dbg !145
  %443 = or i1 %442, %352, !dbg !145
  %444 = extractelement <8 x i1> %437, i64 4, !dbg !145
  %445 = or i1 %444, %353, !dbg !145
  %446 = extractelement <4 x i1> %435, i64 0, !dbg !145
  %447 = extractelement <8 x i1> %437, i64 3, !dbg !145
  %448 = or i1 %447, %446, !dbg !145
  %449 = extractelement <4 x i1> %435, i64 1, !dbg !145
  %450 = extractelement <8 x i1> %437, i64 2, !dbg !145
  %451 = or i1 %450, %449, !dbg !145
  %452 = extractelement <4 x i1> %435, i64 2, !dbg !145
  %453 = extractelement <8 x i1> %437, i64 1, !dbg !145
  %454 = or i1 %453, %452, !dbg !145
  %455 = extractelement <4 x i1> %435, i64 3, !dbg !145
  %456 = extractelement <8 x i1> %437, i64 0, !dbg !145
  %457 = or i1 %456, %455, !dbg !145
  %458 = zext <4 x i1> %372 to <4 x i8>, !dbg !146
  %459 = select <4 x i1> %381, <4 x i8> splat (i8 2), <4 x i8> %458, !dbg !147
  %460 = select <4 x i1> %390, <4 x i8> splat (i8 3), <4 x i8> %459, !dbg !148
  %461 = select <4 x i1> %399, <4 x i8> splat (i8 4), <4 x i8> %460, !dbg !149
  %462 = select <4 x i1> %408, <4 x i8> splat (i8 5), <4 x i8> %461, !dbg !150
  %463 = select <4 x i1> %417, <4 x i8> splat (i8 6), <4 x i8> %462, !dbg !151
  %464 = select <4 x i1> %426, <4 x i8> splat (i8 7), <4 x i8> %463, !dbg !152
  %465 = select <4 x i1> %435, <4 x i8> splat (i8 8), <4 x i8> %464, !dbg !153
  %466 = mul i32 %37, 81, !dbg !155
  %467 = add i32 %466, %.decomposed, !dbg !156
  %468 = mul i32 %42, 62208, !dbg !157
  %469 = mul i32 %43, 62208, !dbg !157
  %470 = mul i32 %44, 62208, !dbg !157
  %471 = mul i32 %45, 62208, !dbg !157
  %472 = mul i32 %46, 62208, !dbg !157
  %473 = mul i32 %47, 62208, !dbg !157
  %474 = mul i32 %48, 62208, !dbg !157
  %475 = mul i32 %49, 62208, !dbg !157
  %476 = add i32 %467, %468, !dbg !158
  %477 = add i32 %469, %.decomposed18, !dbg !156
  %478 = add i32 %477, %466, !dbg !158
  %479 = add i32 %470, %.decomposed20, !dbg !156
  %480 = add i32 %479, %466, !dbg !158
  %481 = add i32 %471, %.decomposed22, !dbg !156
  %482 = add i32 %481, %466, !dbg !158
  %483 = add i32 %472, %.decomposed24, !dbg !156
  %484 = add i32 %483, %466, !dbg !158
  %485 = add i32 %473, %.decomposed26, !dbg !156
  %486 = add i32 %485, %466, !dbg !158
  %487 = add i32 %474, %.decomposed28, !dbg !156
  %488 = add i32 %487, %466, !dbg !158
  %489 = add i32 %475, %.decomposed30, !dbg !156
  %490 = add i32 %489, %466, !dbg !158
  %491 = sext i32 %476 to i64, !dbg !159
  %492 = getelementptr float, ptr addrspace(1) %1, i64 %491, !dbg !159
  %493 = sext i32 %478 to i64, !dbg !159
  %494 = getelementptr float, ptr addrspace(1) %1, i64 %493, !dbg !159
  %495 = sext i32 %480 to i64, !dbg !159
  %496 = getelementptr float, ptr addrspace(1) %1, i64 %495, !dbg !159
  %497 = sext i32 %482 to i64, !dbg !159
  %498 = getelementptr float, ptr addrspace(1) %1, i64 %497, !dbg !159
  %499 = sext i32 %484 to i64, !dbg !159
  %500 = getelementptr float, ptr addrspace(1) %1, i64 %499, !dbg !159
  %501 = sext i32 %486 to i64, !dbg !159
  %502 = getelementptr float, ptr addrspace(1) %1, i64 %501, !dbg !159
  %503 = sext i32 %488 to i64, !dbg !159
  %504 = getelementptr float, ptr addrspace(1) %1, i64 %503, !dbg !159
  %505 = sext i32 %490 to i64, !dbg !159
  %506 = getelementptr float, ptr addrspace(1) %1, i64 %505, !dbg !159
  %507 = and i1 %22, %39, !dbg !160
  %508 = and i1 %23, %39, !dbg !160
  %509 = and i1 %24, %39, !dbg !160
  %510 = and i1 %25, %39, !dbg !160
  %511 = and i1 %26, %39, !dbg !160
  %512 = and i1 %27, %39, !dbg !160
  %513 = and i1 %28, %39, !dbg !160
  %514 = and i1 %29, %39, !dbg !160
  %515 = and i1 %21, %38, !dbg !160
  %516 = and i32 %32, 1016, !dbg !161
  %517 = and i32 %8, 127, !dbg !161
  %518 = lshr i32 %32, 5, !dbg !161
  %519 = and i32 %518, 31, !dbg !161
  %520 = add nuw nsw i32 %519, %516, !dbg !161
  %521 = zext nneg i32 %520 to i64, !dbg !161
  %522 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %521, !dbg !161
  %523 = extractelement <4 x i32> %.v9, i64 0, !dbg !161
  %524 = select i1 %439, i32 %267, i32 %523, !dbg !162
  %525 = insertelement <1 x i32> poison, i32 %524, i64 0, !dbg !161
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %522, <1 x i32> %525, i1 true) #2, !dbg !161
  %526 = or disjoint i32 %516, 1, !dbg !161
  %527 = add nuw nsw i32 %526, %519, !dbg !161
  %528 = zext nneg i32 %527 to i64, !dbg !161
  %529 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %528, !dbg !161
  %530 = extractelement <4 x i32> %.v9, i64 1, !dbg !161
  %531 = select i1 %441, i32 %268, i32 %530, !dbg !162
  %532 = insertelement <1 x i32> poison, i32 %531, i64 0, !dbg !161
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %529, <1 x i32> %532, i1 true) #2, !dbg !161
  %533 = or disjoint i32 %516, 2, !dbg !161
  %534 = add nuw nsw i32 %533, %519, !dbg !161
  %535 = zext nneg i32 %534 to i64, !dbg !161
  %536 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %535, !dbg !161
  %537 = extractelement <4 x i32> %.v9, i64 2, !dbg !161
  %538 = select i1 %443, i32 %269, i32 %537, !dbg !162
  %539 = insertelement <1 x i32> poison, i32 %538, i64 0, !dbg !161
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %536, <1 x i32> %539, i1 true) #2, !dbg !161
  %540 = or disjoint i32 %516, 3, !dbg !161
  %541 = add nuw nsw i32 %540, %519, !dbg !161
  %542 = zext nneg i32 %541 to i64, !dbg !161
  %543 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %542, !dbg !161
  %544 = extractelement <4 x i32> %.v9, i64 3, !dbg !161
  %545 = select i1 %445, i32 %270, i32 %544, !dbg !162
  %546 = insertelement <1 x i32> poison, i32 %545, i64 0, !dbg !161
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %543, <1 x i32> %546, i1 true) #2, !dbg !161
  %547 = or disjoint i32 %516, 4, !dbg !161
  %548 = add nuw nsw i32 %547, %519, !dbg !161
  %549 = zext nneg i32 %548 to i64, !dbg !161
  %550 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %549, !dbg !161
  %551 = extractelement <4 x i32> %.v16, i64 0, !dbg !161
  %552 = select i1 %448, i32 %272, i32 %551, !dbg !162
  %553 = insertelement <1 x i32> poison, i32 %552, i64 0, !dbg !161
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %550, <1 x i32> %553, i1 true) #2, !dbg !161
  %554 = or disjoint i32 %516, 5, !dbg !161
  %555 = add nuw nsw i32 %554, %519, !dbg !161
  %556 = zext nneg i32 %555 to i64, !dbg !161
  %557 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %556, !dbg !161
  %558 = extractelement <4 x i32> %.v16, i64 1, !dbg !161
  %559 = select i1 %451, i32 %273, i32 %558, !dbg !162
  %560 = insertelement <1 x i32> poison, i32 %559, i64 0, !dbg !161
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %557, <1 x i32> %560, i1 true) #2, !dbg !161
  %561 = or disjoint i32 %516, 6, !dbg !161
  %562 = add nuw nsw i32 %561, %519, !dbg !161
  %563 = zext nneg i32 %562 to i64, !dbg !161
  %564 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %563, !dbg !161
  %565 = extractelement <4 x i32> %.v16, i64 2, !dbg !161
  %566 = select i1 %454, i32 %274, i32 %565, !dbg !162
  %567 = insertelement <1 x i32> poison, i32 %566, i64 0, !dbg !161
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %564, <1 x i32> %567, i1 true) #2, !dbg !161
  %568 = or disjoint i32 %516, 7, !dbg !161
  %569 = add nuw nsw i32 %568, %519, !dbg !161
  %570 = zext nneg i32 %569 to i64, !dbg !161
  %571 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %570, !dbg !161
  %572 = extractelement <4 x i32> %.v16, i64 3, !dbg !161
  %573 = select i1 %457, i32 %275, i32 %572, !dbg !162
  %574 = insertelement <1 x i32> poison, i32 %573, i64 0, !dbg !161
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %571, <1 x i32> %574, i1 true) #2, !dbg !161
  tail call void @llvm.nvvm.barrier0(), !dbg !161
  %575 = lshr i32 %517, 5, !dbg !161
  %576 = add nuw nsw i32 %575, %517, !dbg !161
  %577 = zext nneg i32 %576 to i64, !dbg !161
  %578 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %577, !dbg !161
  %579 = load i32, ptr addrspace(3) %578, align 4, !dbg !161
  %580 = or disjoint i32 %517, 128, !dbg !161
  %581 = lshr i32 %580, 5, !dbg !161
  %582 = add nuw nsw i32 %581, %580, !dbg !161
  %583 = zext nneg i32 %582 to i64, !dbg !161
  %584 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %583, !dbg !161
  %585 = load i32, ptr addrspace(3) %584, align 4, !dbg !161
  %586 = or disjoint i32 %517, 256, !dbg !161
  %587 = lshr i32 %586, 5, !dbg !161
  %588 = add nuw nsw i32 %587, %586, !dbg !161
  %589 = zext nneg i32 %588 to i64, !dbg !161
  %590 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %589, !dbg !161
  %591 = load i32, ptr addrspace(3) %590, align 4, !dbg !161
  %592 = or disjoint i32 %517, 384, !dbg !161
  %593 = lshr i32 %592, 5, !dbg !161
  %594 = add nuw nsw i32 %593, %592, !dbg !161
  %595 = zext nneg i32 %594 to i64, !dbg !161
  %596 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %595, !dbg !161
  %597 = load i32, ptr addrspace(3) %596, align 4, !dbg !161
  %598 = or disjoint i32 %517, 512, !dbg !161
  %599 = lshr i32 %598, 5, !dbg !161
  %600 = add nuw nsw i32 %599, %598, !dbg !161
  %601 = zext nneg i32 %600 to i64, !dbg !161
  %602 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %601, !dbg !161
  %603 = load i32, ptr addrspace(3) %602, align 4, !dbg !161
  %604 = or disjoint i32 %517, 640, !dbg !161
  %605 = lshr i32 %604, 5, !dbg !161
  %606 = add nuw nsw i32 %605, %604, !dbg !161
  %607 = zext nneg i32 %606 to i64, !dbg !161
  %608 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %607, !dbg !161
  %609 = load i32, ptr addrspace(3) %608, align 4, !dbg !161
  %610 = or disjoint i32 %517, 768, !dbg !161
  %611 = lshr i32 %610, 5, !dbg !161
  %612 = add nuw nsw i32 %611, %610, !dbg !161
  %613 = zext nneg i32 %612 to i64, !dbg !161
  %614 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %613, !dbg !161
  %615 = load i32, ptr addrspace(3) %614, align 4, !dbg !161
  %616 = or disjoint i32 %517, 896, !dbg !161
  %617 = lshr i32 %616, 5, !dbg !161
  %618 = add nuw nsw i32 %617, %616, !dbg !161
  %619 = zext nneg i32 %618 to i64, !dbg !161
  %620 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %619, !dbg !161
  %621 = load i32, ptr addrspace(3) %620, align 4, !dbg !161
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %579, ptr addrspace(1) %492, i1 %507) #2, !dbg !161
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %585, ptr addrspace(1) %494, i1 %508) #2, !dbg !161
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %591, ptr addrspace(1) %496, i1 %509) #2, !dbg !161
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %597, ptr addrspace(1) %498, i1 %510) #2, !dbg !161
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %603, ptr addrspace(1) %500, i1 %511) #2, !dbg !161
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %609, ptr addrspace(1) %502, i1 %512) #2, !dbg !161
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %615, ptr addrspace(1) %504, i1 %513) #2, !dbg !161
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %621, ptr addrspace(1) %506, i1 %514) #2, !dbg !161
  %622 = shl i32 %12, 9, !dbg !163
  %623 = add i32 %35, %622, !dbg !164
  %624 = sext i32 %623 to i64, !dbg !165
  %625 = getelementptr i8, ptr addrspace(1) %2, i64 %624, !dbg !165
  %626 = bitcast <4 x i8> %361 to i32, !dbg !166
  %627 = bitcast <4 x i8> %465 to i32, !dbg !166
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %626, i32 %627, ptr addrspace(1) %625, i1 %515) #2, !dbg !166
  ret void, !dbg !167
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ccqvx77zasulti33kl6ipc5ri4ywtvvyvwbnxywnuumlb75kiu4m.py", directory: "inductor_cache/cq")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_17, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_17, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_17", linkageName: "triton_poi_fused_max_pool2d_with_indices_17", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 28, column: 21, scope: !7)
!21 = !DILocation(line: 31, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 19, scope: !7)
!23 = !DILocation(line: 45, column: 74, scope: !7)
!24 = !DILocation(line: 29, column: 19, scope: !7)
!25 = !DILocation(line: 67, column: 20, scope: !7)
!26 = !DILocation(line: 36, column: 19, scope: !7)
!27 = !DILocation(line: 40, column: 20, scope: !7)
!28 = !DILocation(line: 41, column: 19, scope: !7)
!29 = !DILocation(line: 44, column: 19, scope: !7)
!30 = !DILocation(line: 45, column: 51, scope: !7)
!31 = !DILocation(line: 45, column: 62, scope: !7)
!32 = !DILocation(line: 45, column: 41, scope: !7)
!33 = !DILocation(line: 45, column: 46, scope: !7)
!34 = !DILocation(line: 45, column: 56, scope: !7)
!35 = !DILocation(line: 45, column: 67, scope: !7)
!36 = !DILocation(line: 45, column: 31, scope: !7)
!37 = !DILocation(line: 45, column: 87, scope: !7)
!38 = !DILocation(line: 45, column: 95, scope: !7)
!39 = !DILocation(line: 45, column: 79, scope: !7)
!40 = !DILocation(line: 47, column: 21, scope: !7)
!41 = !DILocation(line: 50, column: 19, scope: !7)
!42 = !DILocation(line: 51, column: 46, scope: !7)
!43 = !DILocation(line: 51, column: 56, scope: !7)
!44 = !DILocation(line: 51, column: 67, scope: !7)
!45 = !DILocation(line: 51, column: 31, scope: !7)
!46 = !DILocation(line: 51, column: 87, scope: !7)
!47 = !DILocation(line: 51, column: 95, scope: !7)
!48 = !DILocation(line: 51, column: 79, scope: !7)
!49 = !DILocation(line: 53, column: 16, scope: !7)
!50 = !DILocation(line: 55, column: 20, scope: !7)
!51 = !DILocation(line: 56, column: 20, scope: !7)
!52 = !DILocation(line: 83, column: 20, scope: !7)
!53 = !DILocation(line: 57, column: 19, scope: !7)
!54 = !DILocation(line: 58, column: 46, scope: !7)
!55 = !DILocation(line: 58, column: 56, scope: !7)
!56 = !DILocation(line: 58, column: 67, scope: !7)
!57 = !DILocation(line: 58, column: 31, scope: !7)
!58 = !DILocation(line: 58, column: 87, scope: !7)
!59 = !DILocation(line: 58, column: 95, scope: !7)
!60 = !DILocation(line: 58, column: 79, scope: !7)
!61 = !DILocation(line: 64, column: 20, scope: !7)
!62 = !DILocation(line: 65, column: 45, scope: !7)
!63 = !DILocation(line: 65, column: 55, scope: !7)
!64 = !DILocation(line: 65, column: 66, scope: !7)
!65 = !DILocation(line: 65, column: 31, scope: !7)
!66 = !DILocation(line: 65, column: 86, scope: !7)
!67 = !DILocation(line: 65, column: 94, scope: !7)
!68 = !DILocation(line: 65, column: 78, scope: !7)
!69 = !DILocation(line: 68, column: 46, scope: !7)
!70 = !DILocation(line: 68, column: 57, scope: !7)
!71 = !DILocation(line: 68, column: 31, scope: !7)
!72 = !DILocation(line: 68, column: 77, scope: !7)
!73 = !DILocation(line: 68, column: 85, scope: !7)
!74 = !DILocation(line: 68, column: 69, scope: !7)
!75 = !DILocation(line: 70, column: 20, scope: !7)
!76 = !DILocation(line: 71, column: 42, scope: !7)
!77 = !DILocation(line: 71, column: 52, scope: !7)
!78 = !DILocation(line: 71, column: 63, scope: !7)
!79 = !DILocation(line: 71, column: 31, scope: !7)
!80 = !DILocation(line: 71, column: 83, scope: !7)
!81 = !DILocation(line: 71, column: 91, scope: !7)
!82 = !DILocation(line: 71, column: 75, scope: !7)
!83 = !DILocation(line: 77, column: 20, scope: !7)
!84 = !DILocation(line: 78, column: 43, scope: !7)
!85 = !DILocation(line: 78, column: 53, scope: !7)
!86 = !DILocation(line: 78, column: 64, scope: !7)
!87 = !DILocation(line: 78, column: 31, scope: !7)
!88 = !DILocation(line: 78, column: 84, scope: !7)
!89 = !DILocation(line: 78, column: 92, scope: !7)
!90 = !DILocation(line: 78, column: 76, scope: !7)
!91 = !DILocation(line: 80, column: 20, scope: !7)
!92 = !DILocation(line: 81, column: 43, scope: !7)
!93 = !DILocation(line: 81, column: 53, scope: !7)
!94 = !DILocation(line: 81, column: 64, scope: !7)
!95 = !DILocation(line: 81, column: 31, scope: !7)
!96 = !DILocation(line: 81, column: 84, scope: !7)
!97 = !DILocation(line: 81, column: 92, scope: !7)
!98 = !DILocation(line: 81, column: 76, scope: !7)
!99 = !DILocation(line: 84, column: 43, scope: !7)
!100 = !DILocation(line: 84, column: 53, scope: !7)
!101 = !DILocation(line: 84, column: 64, scope: !7)
!102 = !DILocation(line: 84, column: 31, scope: !7)
!103 = !DILocation(line: 84, column: 84, scope: !7)
!104 = !DILocation(line: 84, column: 92, scope: !7)
!105 = !DILocation(line: 84, column: 76, scope: !7)
!106 = !DILocation(line: 118, column: 15, scope: !107, inlinedAt: !109)
!107 = distinct !DILexicalBlockFile(scope: !7, file: !108, discriminator: 0)
!108 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!109 = !DILocation(line: 52, column: 42, scope: !7)
!110 = !DILocation(line: 120, column: 21, scope: !107, inlinedAt: !109)
!111 = !DILocation(line: 120, column: 16, scope: !107, inlinedAt: !109)
!112 = !DILocation(line: 121, column: 29, scope: !107, inlinedAt: !109)
!113 = !DILocation(line: 118, column: 15, scope: !107, inlinedAt: !114)
!114 = !DILocation(line: 59, column: 42, scope: !7)
!115 = !DILocation(line: 120, column: 21, scope: !107, inlinedAt: !114)
!116 = !DILocation(line: 120, column: 16, scope: !107, inlinedAt: !114)
!117 = !DILocation(line: 121, column: 29, scope: !107, inlinedAt: !114)
!118 = !DILocation(line: 118, column: 15, scope: !107, inlinedAt: !119)
!119 = !DILocation(line: 66, column: 42, scope: !7)
!120 = !DILocation(line: 120, column: 21, scope: !107, inlinedAt: !119)
!121 = !DILocation(line: 120, column: 16, scope: !107, inlinedAt: !119)
!122 = !DILocation(line: 121, column: 29, scope: !107, inlinedAt: !119)
!123 = !DILocation(line: 118, column: 15, scope: !107, inlinedAt: !124)
!124 = !DILocation(line: 69, column: 42, scope: !7)
!125 = !DILocation(line: 120, column: 21, scope: !107, inlinedAt: !124)
!126 = !DILocation(line: 120, column: 16, scope: !107, inlinedAt: !124)
!127 = !DILocation(line: 121, column: 29, scope: !107, inlinedAt: !124)
!128 = !DILocation(line: 118, column: 15, scope: !107, inlinedAt: !129)
!129 = !DILocation(line: 72, column: 42, scope: !7)
!130 = !DILocation(line: 120, column: 21, scope: !107, inlinedAt: !129)
!131 = !DILocation(line: 120, column: 16, scope: !107, inlinedAt: !129)
!132 = !DILocation(line: 121, column: 29, scope: !107, inlinedAt: !129)
!133 = !DILocation(line: 118, column: 15, scope: !107, inlinedAt: !134)
!134 = !DILocation(line: 79, column: 42, scope: !7)
!135 = !DILocation(line: 120, column: 21, scope: !107, inlinedAt: !134)
!136 = !DILocation(line: 120, column: 16, scope: !107, inlinedAt: !134)
!137 = !DILocation(line: 121, column: 29, scope: !107, inlinedAt: !134)
!138 = !DILocation(line: 118, column: 15, scope: !107, inlinedAt: !139)
!139 = !DILocation(line: 82, column: 42, scope: !7)
!140 = !DILocation(line: 120, column: 21, scope: !107, inlinedAt: !139)
!141 = !DILocation(line: 120, column: 16, scope: !107, inlinedAt: !139)
!142 = !DILocation(line: 121, column: 29, scope: !107, inlinedAt: !139)
!143 = !DILocation(line: 118, column: 15, scope: !107, inlinedAt: !144)
!144 = !DILocation(line: 85, column: 42, scope: !7)
!145 = !DILocation(line: 120, column: 16, scope: !107, inlinedAt: !144)
!146 = !DILocation(line: 89, column: 35, scope: !7)
!147 = !DILocation(line: 92, column: 35, scope: !7)
!148 = !DILocation(line: 95, column: 35, scope: !7)
!149 = !DILocation(line: 98, column: 35, scope: !7)
!150 = !DILocation(line: 101, column: 35, scope: !7)
!151 = !DILocation(line: 104, column: 35, scope: !7)
!152 = !DILocation(line: 107, column: 35, scope: !7)
!153 = !DILocation(line: 110, column: 35, scope: !7)
!154 = !DILocation(line: 120, column: 21, scope: !107, inlinedAt: !144)
!155 = !DILocation(line: 111, column: 33, scope: !7)
!156 = !DILocation(line: 111, column: 30, scope: !7)
!157 = !DILocation(line: 111, column: 44, scope: !7)
!158 = !DILocation(line: 111, column: 38, scope: !7)
!159 = !DILocation(line: 111, column: 25, scope: !7)
!160 = !DILocation(line: 111, column: 64, scope: !7)
!161 = !DILocation(line: 111, column: 56, scope: !7)
!162 = !DILocation(line: 121, column: 29, scope: !107, inlinedAt: !144)
!163 = !DILocation(line: 112, column: 34, scope: !7)
!164 = !DILocation(line: 112, column: 30, scope: !7)
!165 = !DILocation(line: 112, column: 25, scope: !7)
!166 = !DILocation(line: 112, column: 46, scope: !7)
!167 = !DILocation(line: 112, column: 4, scope: !7)
