; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 2, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 6, !dbg !12
  %.lobit = and i32 %9, 1, !dbg !12
  %10 = or disjoint i32 %7, %.lobit, !dbg !13
  %11 = or disjoint i32 %10, 2, !dbg !13
  %12 = icmp slt i32 %7, 512, !dbg !14
  %13 = icmp slt i32 %10, 512, !dbg !14
  %14 = icmp slt i32 %11, 512, !dbg !14
  %15 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %16 = shl i32 %15, 8, !dbg !16
  %17 = and i32 %8, 127, !dbg !17
  %18 = or disjoint i32 %17, 128, !dbg !17
  %19 = shl i32 %8, 2, !dbg !17
  %20 = and i32 %19, 252, !dbg !17
  %21 = or disjoint i32 %16, %17, !dbg !18
  %22 = or disjoint i32 %16, %18, !dbg !18
  %23 = or disjoint i32 %16, %20, !dbg !18
  %24 = icmp slt i32 %21, 256, !dbg !19
  %25 = icmp slt i32 %22, 256, !dbg !19
  %26 = icmp slt i32 %23, 256, !dbg !19
  %.frozen = freeze i32 %7, !dbg !20
  %27 = sdiv i32 %.frozen, 128, !dbg !20
  %28 = mul i32 %27, 128, !dbg !21
  %.decomposed = sub i32 %.frozen, %28, !dbg !21
  %29 = shl i32 %21, 7, !dbg !22
  %30 = shl i32 %22, 7, !dbg !22
  %31 = shl i32 %27, 15, !dbg !23
  %32 = add i32 %31, %.decomposed, !dbg !24
  %33 = add i32 %32, %29, !dbg !25
  %34 = add i32 %32, %30, !dbg !25
  %35 = sext i32 %33 to i64, !dbg !26
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !26
  %37 = sext i32 %34 to i64, !dbg !26
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !26
  %39 = and i1 %12, %24, !dbg !27
  %40 = and i1 %12, %25, !dbg !27
  %41 = and i1 %13, %26, !dbg !27
  %42 = and i1 %14, %26, !dbg !27
  %43 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %36, i1 %39) #2, !dbg !28
  %44 = extractvalue { i32, i32, i32, i32 } %43, 0, !dbg !28
  %45 = extractvalue { i32, i32, i32, i32 } %43, 1, !dbg !28
  %46 = extractvalue { i32, i32, i32, i32 } %43, 2, !dbg !28
  %47 = extractvalue { i32, i32, i32, i32 } %43, 3, !dbg !28
  %48 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %38, i1 %40) #2, !dbg !28
  %49 = extractvalue { i32, i32, i32, i32 } %48, 0, !dbg !28
  %50 = extractvalue { i32, i32, i32, i32 } %48, 1, !dbg !28
  %51 = extractvalue { i32, i32, i32, i32 } %48, 2, !dbg !28
  %52 = extractvalue { i32, i32, i32, i32 } %48, 3, !dbg !28
  %53 = shl i32 %10, 8, !dbg !29
  %54 = shl i32 %11, 8, !dbg !29
  %55 = add i32 %23, %53, !dbg !30
  %56 = add i32 %23, %54, !dbg !30
  %57 = sext i32 %55 to i64, !dbg !31
  %58 = getelementptr float, ptr addrspace(1) %1, i64 %57, !dbg !31
  %59 = sext i32 %56 to i64, !dbg !31
  %60 = getelementptr float, ptr addrspace(1) %1, i64 %59, !dbg !31
  %61 = and i32 %19, 508, !dbg !32
  %62 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %17, !dbg !32
  %63 = insertelement <1 x i32> poison, i32 %44, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %62, <1 x i32> %63, i1 true) #2, !dbg !32
  %64 = getelementptr inbounds i8, ptr addrspace(3) %62, i32 1028, !dbg !32
  %65 = insertelement <1 x i32> poison, i32 %45, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %64, <1 x i32> %65, i1 true) #2, !dbg !32
  %66 = getelementptr inbounds i8, ptr addrspace(3) %62, i32 2056, !dbg !32
  %67 = insertelement <1 x i32> poison, i32 %46, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %66, <1 x i32> %67, i1 true) #2, !dbg !32
  %68 = getelementptr inbounds i8, ptr addrspace(3) %62, i32 3084, !dbg !32
  %69 = insertelement <1 x i32> poison, i32 %47, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %68, <1 x i32> %69, i1 true) #2, !dbg !32
  %70 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %18, !dbg !32
  %71 = insertelement <1 x i32> poison, i32 %49, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %70, <1 x i32> %71, i1 true) #2, !dbg !32
  %72 = getelementptr inbounds i8, ptr addrspace(3) %62, i32 1540, !dbg !32
  %73 = insertelement <1 x i32> poison, i32 %50, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %72, <1 x i32> %73, i1 true) #2, !dbg !32
  %74 = getelementptr inbounds i8, ptr addrspace(3) %62, i32 2568, !dbg !32
  %75 = insertelement <1 x i32> poison, i32 %51, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %74, <1 x i32> %75, i1 true) #2, !dbg !32
  %76 = getelementptr inbounds i8, ptr addrspace(3) %62, i32 3596, !dbg !32
  %77 = insertelement <1 x i32> poison, i32 %52, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %76, <1 x i32> %77, i1 true) #2, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %78 = lshr i32 %61, 8, !dbg !32
  %79 = getelementptr float, ptr addrspace(3) @global_smem, i32 %78, !dbg !32
  %80 = getelementptr float, ptr addrspace(3) %79, i32 %61, !dbg !32
  %81 = load i32, ptr addrspace(3) %80, align 4, !dbg !32
  %82 = or disjoint i32 %61, 1, !dbg !32
  %83 = getelementptr float, ptr addrspace(3) %79, i32 %82, !dbg !32
  %84 = load i32, ptr addrspace(3) %83, align 4, !dbg !32
  %85 = or disjoint i32 %61, 2, !dbg !32
  %86 = getelementptr float, ptr addrspace(3) %79, i32 %85, !dbg !32
  %87 = load i32, ptr addrspace(3) %86, align 4, !dbg !32
  %88 = or disjoint i32 %61, 3, !dbg !32
  %89 = getelementptr float, ptr addrspace(3) %79, i32 %88, !dbg !32
  %90 = load i32, ptr addrspace(3) %89, align 4, !dbg !32
  %91 = or disjoint i32 %61, 512, !dbg !32
  %92 = lshr i32 %91, 8, !dbg !32
  %93 = getelementptr float, ptr addrspace(3) @global_smem, i32 %92, !dbg !32
  %94 = getelementptr float, ptr addrspace(3) %93, i32 %91, !dbg !32
  %95 = load i32, ptr addrspace(3) %94, align 4, !dbg !32
  %96 = or disjoint i32 %61, 513, !dbg !32
  %97 = lshr i32 %96, 8, !dbg !32
  %98 = getelementptr float, ptr addrspace(3) @global_smem, i32 %97, !dbg !32
  %99 = getelementptr float, ptr addrspace(3) %98, i32 %96, !dbg !32
  %100 = load i32, ptr addrspace(3) %99, align 4, !dbg !32
  %101 = or disjoint i32 %61, 514, !dbg !32
  %102 = lshr i32 %101, 8, !dbg !32
  %103 = getelementptr float, ptr addrspace(3) @global_smem, i32 %102, !dbg !32
  %104 = getelementptr float, ptr addrspace(3) %103, i32 %101, !dbg !32
  %105 = load i32, ptr addrspace(3) %104, align 4, !dbg !32
  %106 = or disjoint i32 %61, 515, !dbg !32
  %107 = lshr i32 %106, 8, !dbg !32
  %108 = getelementptr float, ptr addrspace(3) @global_smem, i32 %107, !dbg !32
  %109 = getelementptr float, ptr addrspace(3) %108, i32 %106, !dbg !32
  %110 = load i32, ptr addrspace(3) %109, align 4, !dbg !32
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %81, i32 %84, i32 %87, i32 %90, ptr addrspace(1) %58, i1 %41) #2, !dbg !32
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %95, i32 %100, i32 %105, i32 %110, ptr addrspace(1) %60, i1 %42) #2, !dbg !32
  %111 = getelementptr float, ptr addrspace(1) %2, i64 %35, !dbg !33
  %112 = getelementptr float, ptr addrspace(1) %2, i64 %37, !dbg !33
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %44, i32 %45, i32 %46, i32 %47, ptr addrspace(1) %111, i1 %39) #2, !dbg !34
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %49, i32 %50, i32 %51, i32 %52, ptr addrspace(1) %112, i1 %40) #2, !dbg !34
  ret void, !dbg !35
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "csgdsmph4kqisnvscvtgwez3mkcyphq5vzlxhdrwp7e2bmeovhbn.py", directory: "inductor_cache/sg")
!4 = !{ptr @triton_poi_fused_convolution_8, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_8, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_8", linkageName: "triton_poi_fused_convolution_8", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 39, scope: !7)
!23 = !DILocation(line: 32, column: 50, scope: !7)
!24 = !DILocation(line: 32, column: 35, scope: !7)
!25 = !DILocation(line: 32, column: 44, scope: !7)
!26 = !DILocation(line: 32, column: 30, scope: !7)
!27 = !DILocation(line: 32, column: 63, scope: !7)
!28 = !DILocation(line: 32, column: 55, scope: !7)
!29 = !DILocation(line: 33, column: 34, scope: !7)
!30 = !DILocation(line: 33, column: 30, scope: !7)
!31 = !DILocation(line: 33, column: 25, scope: !7)
!32 = !DILocation(line: 33, column: 45, scope: !7)
!33 = !DILocation(line: 34, column: 25, scope: !7)
!34 = !DILocation(line: 34, column: 56, scope: !7)
!35 = !DILocation(line: 34, column: 4, scope: !7)
