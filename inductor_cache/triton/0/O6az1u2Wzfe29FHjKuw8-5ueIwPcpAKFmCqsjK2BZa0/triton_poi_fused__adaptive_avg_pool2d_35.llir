; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__adaptive_avg_pool2d_35(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 8, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 1, !dbg !12
  %8 = and i32 %7, 254, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = or disjoint i32 %5, 1, !dbg !13
  %11 = srem i32 %10, 2, !dbg !14
  %12 = shl nsw i32 %11, 2, !dbg !15
  %13 = shl i32 %9, 4, !dbg !16
  %14 = add i32 %12, %13, !dbg !17
  %15 = sext i32 %13 to i64, !dbg !18
  %16 = getelementptr float, ptr addrspace(1) %0, i64 %15, !dbg !18
  %17 = sext i32 %14 to i64, !dbg !18
  %18 = getelementptr float, ptr addrspace(1) %0, i64 %17, !dbg !18
  %19 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %16, i1 true) #1, !dbg !19
  %20 = bitcast i32 %19 to float, !dbg !19
  %21 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %18, i1 true) #1, !dbg !19
  %22 = bitcast i32 %21 to float, !dbg !19
  %23 = or disjoint i32 %13, 1, !dbg !20
  %24 = or disjoint i32 %14, 1, !dbg !20
  %25 = sext i32 %23 to i64, !dbg !21
  %26 = getelementptr float, ptr addrspace(1) %0, i64 %25, !dbg !21
  %27 = sext i32 %24 to i64, !dbg !21
  %28 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !21
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 true) #1, !dbg !22
  %30 = bitcast i32 %29 to float, !dbg !22
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 true) #1, !dbg !22
  %32 = bitcast i32 %31 to float, !dbg !22
  %33 = or disjoint i32 %13, 2, !dbg !23
  %34 = or disjoint i32 %14, 2, !dbg !23
  %35 = sext i32 %33 to i64, !dbg !24
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !24
  %37 = sext i32 %34 to i64, !dbg !24
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !24
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #1, !dbg !25
  %40 = bitcast i32 %39 to float, !dbg !25
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 true) #1, !dbg !25
  %42 = bitcast i32 %41 to float, !dbg !25
  %43 = or disjoint i32 %13, 3, !dbg !26
  %44 = or disjoint i32 %14, 3, !dbg !26
  %45 = sext i32 %43 to i64, !dbg !27
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !27
  %47 = sext i32 %44 to i64, !dbg !27
  %48 = getelementptr float, ptr addrspace(1) %0, i64 %47, !dbg !27
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 true) #1, !dbg !28
  %50 = bitcast i32 %49 to float, !dbg !28
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #1, !dbg !28
  %52 = bitcast i32 %51 to float, !dbg !28
  %53 = or disjoint i32 %13, 8, !dbg !29
  %54 = add i32 %14, 8, !dbg !29
  %55 = sext i32 %53 to i64, !dbg !30
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !30
  %57 = sext i32 %54 to i64, !dbg !30
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !30
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 true) #1, !dbg !31
  %60 = bitcast i32 %59 to float, !dbg !31
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 true) #1, !dbg !31
  %62 = bitcast i32 %61 to float, !dbg !31
  %63 = or disjoint i32 %13, 9, !dbg !32
  %64 = add i32 %14, 9, !dbg !32
  %65 = sext i32 %63 to i64, !dbg !33
  %66 = getelementptr float, ptr addrspace(1) %0, i64 %65, !dbg !33
  %67 = sext i32 %64 to i64, !dbg !33
  %68 = getelementptr float, ptr addrspace(1) %0, i64 %67, !dbg !33
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 true) #1, !dbg !34
  %70 = bitcast i32 %69 to float, !dbg !34
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 true) #1, !dbg !34
  %72 = bitcast i32 %71 to float, !dbg !34
  %73 = or disjoint i32 %13, 10, !dbg !35
  %74 = add i32 %14, 10, !dbg !35
  %75 = sext i32 %73 to i64, !dbg !36
  %76 = getelementptr float, ptr addrspace(1) %0, i64 %75, !dbg !36
  %77 = sext i32 %74 to i64, !dbg !36
  %78 = getelementptr float, ptr addrspace(1) %0, i64 %77, !dbg !36
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 true) #1, !dbg !37
  %80 = bitcast i32 %79 to float, !dbg !37
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 true) #1, !dbg !37
  %82 = bitcast i32 %81 to float, !dbg !37
  %83 = or disjoint i32 %13, 11, !dbg !38
  %84 = add i32 %14, 11, !dbg !38
  %85 = sext i32 %83 to i64, !dbg !39
  %86 = getelementptr float, ptr addrspace(1) %0, i64 %85, !dbg !39
  %87 = sext i32 %84 to i64, !dbg !39
  %88 = getelementptr float, ptr addrspace(1) %0, i64 %87, !dbg !39
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 true) #1, !dbg !40
  %90 = bitcast i32 %89 to float, !dbg !40
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %88, i1 true) #1, !dbg !40
  %92 = bitcast i32 %91 to float, !dbg !40
  %93 = or disjoint i32 %13, 16, !dbg !41
  %94 = add i32 %14, 16, !dbg !41
  %95 = sext i32 %93 to i64, !dbg !42
  %96 = getelementptr float, ptr addrspace(1) %0, i64 %95, !dbg !42
  %97 = sext i32 %94 to i64, !dbg !42
  %98 = getelementptr float, ptr addrspace(1) %0, i64 %97, !dbg !42
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 true) #1, !dbg !43
  %100 = bitcast i32 %99 to float, !dbg !43
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %98, i1 true) #1, !dbg !43
  %102 = bitcast i32 %101 to float, !dbg !43
  %103 = or disjoint i32 %13, 17, !dbg !44
  %104 = add i32 %14, 17, !dbg !44
  %105 = sext i32 %103 to i64, !dbg !45
  %106 = getelementptr float, ptr addrspace(1) %0, i64 %105, !dbg !45
  %107 = sext i32 %104 to i64, !dbg !45
  %108 = getelementptr float, ptr addrspace(1) %0, i64 %107, !dbg !45
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %106, i1 true) #1, !dbg !46
  %110 = bitcast i32 %109 to float, !dbg !46
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %108, i1 true) #1, !dbg !46
  %112 = bitcast i32 %111 to float, !dbg !46
  %113 = or disjoint i32 %13, 18, !dbg !47
  %114 = add i32 %14, 18, !dbg !47
  %115 = sext i32 %113 to i64, !dbg !48
  %116 = getelementptr float, ptr addrspace(1) %0, i64 %115, !dbg !48
  %117 = sext i32 %114 to i64, !dbg !48
  %118 = getelementptr float, ptr addrspace(1) %0, i64 %117, !dbg !48
  %119 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %116, i1 true) #1, !dbg !49
  %120 = bitcast i32 %119 to float, !dbg !49
  %121 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %118, i1 true) #1, !dbg !49
  %122 = bitcast i32 %121 to float, !dbg !49
  %123 = or disjoint i32 %13, 19, !dbg !50
  %124 = add i32 %14, 19, !dbg !50
  %125 = sext i32 %123 to i64, !dbg !51
  %126 = getelementptr float, ptr addrspace(1) %0, i64 %125, !dbg !51
  %127 = sext i32 %124 to i64, !dbg !51
  %128 = getelementptr float, ptr addrspace(1) %0, i64 %127, !dbg !51
  %129 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %126, i1 true) #1, !dbg !52
  %130 = bitcast i32 %129 to float, !dbg !52
  %131 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %128, i1 true) #1, !dbg !52
  %132 = bitcast i32 %131 to float, !dbg !52
  %133 = or disjoint i32 %13, 24, !dbg !53
  %134 = add i32 %14, 24, !dbg !53
  %135 = sext i32 %133 to i64, !dbg !54
  %136 = getelementptr float, ptr addrspace(1) %0, i64 %135, !dbg !54
  %137 = sext i32 %134 to i64, !dbg !54
  %138 = getelementptr float, ptr addrspace(1) %0, i64 %137, !dbg !54
  %139 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %136, i1 true) #1, !dbg !55
  %140 = bitcast i32 %139 to float, !dbg !55
  %141 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %138, i1 true) #1, !dbg !55
  %142 = bitcast i32 %141 to float, !dbg !55
  %143 = or disjoint i32 %13, 25, !dbg !56
  %144 = add i32 %14, 25, !dbg !56
  %145 = sext i32 %143 to i64, !dbg !57
  %146 = getelementptr float, ptr addrspace(1) %0, i64 %145, !dbg !57
  %147 = sext i32 %144 to i64, !dbg !57
  %148 = getelementptr float, ptr addrspace(1) %0, i64 %147, !dbg !57
  %149 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %146, i1 true) #1, !dbg !58
  %150 = bitcast i32 %149 to float, !dbg !58
  %151 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %148, i1 true) #1, !dbg !58
  %152 = bitcast i32 %151 to float, !dbg !58
  %153 = or disjoint i32 %13, 26, !dbg !59
  %154 = add i32 %14, 26, !dbg !59
  %155 = sext i32 %153 to i64, !dbg !60
  %156 = getelementptr float, ptr addrspace(1) %0, i64 %155, !dbg !60
  %157 = sext i32 %154 to i64, !dbg !60
  %158 = getelementptr float, ptr addrspace(1) %0, i64 %157, !dbg !60
  %159 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %156, i1 true) #1, !dbg !61
  %160 = bitcast i32 %159 to float, !dbg !61
  %161 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %158, i1 true) #1, !dbg !61
  %162 = bitcast i32 %161 to float, !dbg !61
  %163 = or disjoint i32 %13, 27, !dbg !62
  %164 = add i32 %14, 27, !dbg !62
  %165 = sext i32 %163 to i64, !dbg !63
  %166 = getelementptr float, ptr addrspace(1) %0, i64 %165, !dbg !63
  %167 = sext i32 %164 to i64, !dbg !63
  %168 = getelementptr float, ptr addrspace(1) %0, i64 %167, !dbg !63
  %169 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %166, i1 true) #1, !dbg !64
  %170 = bitcast i32 %169 to float, !dbg !64
  %171 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %168, i1 true) #1, !dbg !64
  %172 = bitcast i32 %171 to float, !dbg !64
  %173 = fadd float %20, %30, !dbg !65
  %174 = fadd float %22, %32, !dbg !65
  %175 = fadd float %173, %40, !dbg !66
  %176 = fadd float %174, %42, !dbg !66
  %177 = fadd float %175, %50, !dbg !67
  %178 = fadd float %176, %52, !dbg !67
  %179 = fadd float %177, %60, !dbg !68
  %180 = fadd float %178, %62, !dbg !68
  %181 = fadd float %179, %70, !dbg !69
  %182 = fadd float %180, %72, !dbg !69
  %183 = fadd float %181, %80, !dbg !70
  %184 = fadd float %182, %82, !dbg !70
  %185 = fadd float %183, %90, !dbg !71
  %186 = fadd float %184, %92, !dbg !71
  %187 = fadd float %185, %100, !dbg !72
  %188 = fadd float %186, %102, !dbg !72
  %189 = fadd float %187, %110, !dbg !73
  %190 = fadd float %188, %112, !dbg !73
  %191 = fadd float %189, %120, !dbg !74
  %192 = fadd float %190, %122, !dbg !74
  %193 = fadd float %191, %130, !dbg !75
  %194 = fadd float %192, %132, !dbg !75
  %195 = fadd float %193, %140, !dbg !76
  %196 = fadd float %194, %142, !dbg !76
  %197 = fadd float %195, %150, !dbg !77
  %198 = fadd float %196, %152, !dbg !77
  %199 = fadd float %197, %160, !dbg !78
  %200 = fadd float %198, %162, !dbg !78
  %201 = fadd float %199, %170, !dbg !79
  %202 = fadd float %200, %172, !dbg !79
  %203 = fmul float %201, 6.250000e-02, !dbg !80
  %204 = fmul float %202, 6.250000e-02, !dbg !80
  %205 = sext i32 %9 to i64, !dbg !81
  %206 = getelementptr float, ptr addrspace(1) %1, i64 %205, !dbg !81
  %207 = bitcast float %203 to i32, !dbg !82
  %208 = bitcast float %204 to i32, !dbg !82
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %207, i32 %208, ptr addrspace(1) %206, i1 true) #1, !dbg !82
  ret void, !dbg !83
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "czh2ljz3vrfq4w67ixcwcoqp335adzpvla6hi5kp7fb2sgcoec6x.py", directory: "inductor_cache/zh")
!4 = !{ptr @triton_poi_fused__adaptive_avg_pool2d_35, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__adaptive_avg_pool2d_35, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__adaptive_avg_pool2d_35", linkageName: "triton_poi_fused__adaptive_avg_pool2d_35", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 19, scope: !7)
!15 = !DILocation(line: 27, column: 32, scope: !7)
!16 = !DILocation(line: 27, column: 40, scope: !7)
!17 = !DILocation(line: 27, column: 37, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 45, scope: !7)
!20 = !DILocation(line: 28, column: 41, scope: !7)
!21 = !DILocation(line: 28, column: 30, scope: !7)
!22 = !DILocation(line: 28, column: 49, scope: !7)
!23 = !DILocation(line: 29, column: 41, scope: !7)
!24 = !DILocation(line: 29, column: 30, scope: !7)
!25 = !DILocation(line: 29, column: 49, scope: !7)
!26 = !DILocation(line: 30, column: 41, scope: !7)
!27 = !DILocation(line: 30, column: 30, scope: !7)
!28 = !DILocation(line: 30, column: 49, scope: !7)
!29 = !DILocation(line: 31, column: 41, scope: !7)
!30 = !DILocation(line: 31, column: 30, scope: !7)
!31 = !DILocation(line: 31, column: 49, scope: !7)
!32 = !DILocation(line: 32, column: 41, scope: !7)
!33 = !DILocation(line: 32, column: 30, scope: !7)
!34 = !DILocation(line: 32, column: 49, scope: !7)
!35 = !DILocation(line: 33, column: 43, scope: !7)
!36 = !DILocation(line: 33, column: 31, scope: !7)
!37 = !DILocation(line: 33, column: 51, scope: !7)
!38 = !DILocation(line: 34, column: 43, scope: !7)
!39 = !DILocation(line: 34, column: 31, scope: !7)
!40 = !DILocation(line: 34, column: 51, scope: !7)
!41 = !DILocation(line: 35, column: 43, scope: !7)
!42 = !DILocation(line: 35, column: 31, scope: !7)
!43 = !DILocation(line: 35, column: 51, scope: !7)
!44 = !DILocation(line: 36, column: 43, scope: !7)
!45 = !DILocation(line: 36, column: 31, scope: !7)
!46 = !DILocation(line: 36, column: 51, scope: !7)
!47 = !DILocation(line: 37, column: 43, scope: !7)
!48 = !DILocation(line: 37, column: 31, scope: !7)
!49 = !DILocation(line: 37, column: 51, scope: !7)
!50 = !DILocation(line: 38, column: 43, scope: !7)
!51 = !DILocation(line: 38, column: 31, scope: !7)
!52 = !DILocation(line: 38, column: 51, scope: !7)
!53 = !DILocation(line: 39, column: 43, scope: !7)
!54 = !DILocation(line: 39, column: 31, scope: !7)
!55 = !DILocation(line: 39, column: 51, scope: !7)
!56 = !DILocation(line: 40, column: 43, scope: !7)
!57 = !DILocation(line: 40, column: 31, scope: !7)
!58 = !DILocation(line: 40, column: 51, scope: !7)
!59 = !DILocation(line: 41, column: 43, scope: !7)
!60 = !DILocation(line: 41, column: 31, scope: !7)
!61 = !DILocation(line: 41, column: 51, scope: !7)
!62 = !DILocation(line: 42, column: 43, scope: !7)
!63 = !DILocation(line: 42, column: 31, scope: !7)
!64 = !DILocation(line: 42, column: 51, scope: !7)
!65 = !DILocation(line: 43, column: 18, scope: !7)
!66 = !DILocation(line: 44, column: 18, scope: !7)
!67 = !DILocation(line: 45, column: 18, scope: !7)
!68 = !DILocation(line: 46, column: 18, scope: !7)
!69 = !DILocation(line: 47, column: 19, scope: !7)
!70 = !DILocation(line: 48, column: 20, scope: !7)
!71 = !DILocation(line: 49, column: 20, scope: !7)
!72 = !DILocation(line: 50, column: 20, scope: !7)
!73 = !DILocation(line: 51, column: 20, scope: !7)
!74 = !DILocation(line: 52, column: 20, scope: !7)
!75 = !DILocation(line: 53, column: 20, scope: !7)
!76 = !DILocation(line: 54, column: 20, scope: !7)
!77 = !DILocation(line: 55, column: 20, scope: !7)
!78 = !DILocation(line: 56, column: 20, scope: !7)
!79 = !DILocation(line: 57, column: 20, scope: !7)
!80 = !DILocation(line: 59, column: 20, scope: !7)
!81 = !DILocation(line: 60, column: 25, scope: !7)
!82 = !DILocation(line: 60, column: 37, scope: !7)
!83 = !DILocation(line: 60, column: 4, scope: !7)
