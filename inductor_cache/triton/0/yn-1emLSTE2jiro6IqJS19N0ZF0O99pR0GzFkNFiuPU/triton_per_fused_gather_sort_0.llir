; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [74 x i8] c"inductor_cache/fc/cfcbdfl4vo2g66j5ucfvlq4wlik2skho5xaoaohv2hc6jfly6za5.py\00"
@assertMessage_0 = internal constant [36 x i8] c"index out of bounds: 0 <= tmp10 < 4\00"

; Function Attrs: noreturn
declare !dbg !7 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define void @triton_per_fused_gather_sort_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !11 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !12
  %7 = shl i32 %6, 7, !dbg !13
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !14
  %9 = and i32 %8, 127, !dbg !14
  %10 = or disjoint i32 %7, %9, !dbg !15
  %11 = icmp slt i32 %10, 256, !dbg !16
  %12 = shl i32 %10, 2, !dbg !17
  %13 = or disjoint i32 %12, 2, !dbg !18
  %14 = sext i32 %12 to i64, !dbg !19
  %15 = getelementptr i64, ptr addrspace(1) %0, i64 %14, !dbg !19
  %16 = sext i32 %13 to i64, !dbg !19
  %17 = getelementptr i64, ptr addrspace(1) %0, i64 %16, !dbg !19
  %18 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.v2.b64 { $0, $1 }, [ $2 + 0 ];\0A\09@!$4 mov.u64 $0, 0x0;\0A\09@!$5 mov.u64 $1, 0x0;", "=l,=l,l,b,b,b"(ptr addrspace(1) %15, i1 %11, i1 %11, i1 %11) #4, !dbg !20
  %19 = extractvalue { i64, i64 } %18, 0, !dbg !20
  %20 = extractvalue { i64, i64 } %18, 1, !dbg !20
  %21 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.v2.b64 { $0, $1 }, [ $2 + 0 ];\0A\09@!$4 mov.u64 $0, 0x0;\0A\09@!$5 mov.u64 $1, 0x0;", "=l,=l,l,b,b,b"(ptr addrspace(1) %17, i1 %11, i1 %11, i1 %11) #4, !dbg !20
  %22 = extractvalue { i64, i64 } %21, 0, !dbg !20
  %23 = extractvalue { i64, i64 } %21, 1, !dbg !20
  %24 = xor i64 %19, %20, !dbg !21
  %25 = xor i64 %22, %23, !dbg !21
  %26 = insertelement <2 x i64> poison, i64 %19, i64 0, !dbg !27
  %27 = insertelement <2 x i64> %26, i64 %22, i64 1, !dbg !27
  %28 = insertelement <2 x i64> poison, i64 %20, i64 0, !dbg !27
  %29 = insertelement <2 x i64> %28, i64 %23, i64 1, !dbg !27
  %30 = icmp sgt <2 x i64> %27, %29, !dbg !27
  %31 = insertelement <2 x i64> <i64 poison, i64 0>, i64 %24, i64 0, !dbg !28
  %32 = insertelement <2 x i64> <i64 0, i64 poison>, i64 %25, i64 1, !dbg !28
  %33 = select <2 x i1> %30, <2 x i64> %31, <2 x i64> %32, !dbg !28
  %34 = xor <2 x i64> %33, %27, !dbg !29
  %35 = xor <2 x i64> %33, %29, !dbg !29
  %36 = extractelement <2 x i64> %34, i64 0, !dbg !27
  %37 = extractelement <2 x i64> %34, i64 1, !dbg !27
  %38 = icmp sgt i64 %36, %37, !dbg !27
  %39 = extractelement <2 x i64> %35, i64 0, !dbg !27
  %40 = extractelement <2 x i64> %35, i64 1, !dbg !27
  %41 = icmp sgt i64 %39, %40, !dbg !27
  %42 = xor i64 %37, %36, !dbg !21
  %43 = xor i64 %40, %39, !dbg !21
  %44 = select i1 %38, i64 %42, i64 0, !dbg !28
  %45 = select i1 %41, i64 %43, i64 0, !dbg !28
  %46 = insertelement <2 x i64> poison, i64 %44, i64 0, !dbg !29
  %47 = shufflevector <2 x i64> %46, <2 x i64> poison, <2 x i32> zeroinitializer, !dbg !29
  %48 = xor <2 x i64> %47, %34, !dbg !29
  %49 = insertelement <2 x i64> poison, i64 %45, i64 0, !dbg !29
  %50 = shufflevector <2 x i64> %49, <2 x i64> poison, <2 x i32> zeroinitializer, !dbg !29
  %51 = xor <2 x i64> %50, %35, !dbg !29
  %52 = icmp sgt <2 x i64> %48, %51, !dbg !27
  %53 = xor <2 x i64> %51, %48, !dbg !21
  %54 = select <2 x i1> %52, <2 x i64> %53, <2 x i64> zeroinitializer, !dbg !28
  %55 = shufflevector <2 x i64> %54, <2 x i64> poison, <4 x i32> <i32 0, i32 0, i32 1, i32 1>, !dbg !28
  %56 = shufflevector <2 x i64> %48, <2 x i64> %51, <4 x i32> <i32 0, i32 2, i32 1, i32 3>, !dbg !29
  %57 = xor <4 x i64> %55, %56, !dbg !29
  %58 = lshr <4 x i64> %57, splat (i64 61), !dbg !30
  %59 = and <4 x i64> %58, splat (i64 4), !dbg !30
  %60 = add <4 x i64> %59, %57, !dbg !30
  %61 = tail call i64 @llvm.vector.reduce.or.v4i64(<4 x i64> %60), !dbg !31
  %62 = icmp ugt i64 %61, 3, !dbg !31
  %63 = and i1 %11, %62, !dbg !31
  br i1 %63, label %64, label %65, !dbg !31

64:                                               ; preds = %5
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 41, ptr nonnull @assertFunc_0, i64 1), !dbg !31
  unreachable, !dbg !31

65:                                               ; preds = %5
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %66 = extractelement <4 x i64> %60, i64 0, !dbg !32
  %67 = getelementptr float, ptr addrspace(1) %1, i64 %66, !dbg !32
  %68 = getelementptr float, ptr addrspace(1) %67, i64 %14, !dbg !32
  %69 = extractelement <4 x i64> %60, i64 1, !dbg !32
  %70 = getelementptr float, ptr addrspace(1) %1, i64 %69, !dbg !32
  %71 = getelementptr float, ptr addrspace(1) %70, i64 %14, !dbg !32
  %72 = extractelement <4 x i64> %60, i64 2, !dbg !32
  %73 = getelementptr float, ptr addrspace(1) %1, i64 %72, !dbg !32
  %74 = getelementptr float, ptr addrspace(1) %73, i64 %14, !dbg !32
  %75 = extractelement <4 x i64> %60, i64 3, !dbg !32
  %76 = getelementptr float, ptr addrspace(1) %1, i64 %75, !dbg !32
  %77 = getelementptr float, ptr addrspace(1) %76, i64 %14, !dbg !32
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 %11) #4, !dbg !33
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %71, i1 %11) #4, !dbg !33
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 %11) #4, !dbg !33
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 %11) #4, !dbg !33
  %82 = getelementptr float, ptr addrspace(1) %2, i64 %14, !dbg !34
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %78, i32 %79, i32 %80, i32 %81, ptr addrspace(1) %82, i1 %11) #4, !dbg !35
  ret void, !dbg !36
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.vector.reduce.or.v4i64(<4 x i64>) #3

attributes #0 = { noreturn }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cfcbdfl4vo2g66j5ucfvlq4wlik2skho5xaoaohv2hc6jfly6za5.py", directory: "inductor_cache/fc")
!4 = !{ptr @triton_per_fused_gather_sort_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_gather_sort_0, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !8, file: !8, type: !9, spFlags: DISPFlagOptimized)
!8 = !DIFile(filename: "<unknown>", directory: "")
!9 = !DISubroutineType(cc: DW_CC_normal, types: !10)
!10 = !{}
!11 = distinct !DISubprogram(name: "triton_per_fused_gather_sort_0", linkageName: "triton_per_fused_gather_sort_0", scope: !3, file: !3, line: 19, type: !9, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!12 = !DILocation(line: 23, column: 28, scope: !11)
!13 = !DILocation(line: 23, column: 33, scope: !11)
!14 = !DILocation(line: 24, column: 44, scope: !11)
!15 = !DILocation(line: 24, column: 23, scope: !11)
!16 = !DILocation(line: 25, column: 21, scope: !11)
!17 = !DILocation(line: 31, column: 41, scope: !11)
!18 = !DILocation(line: 31, column: 39, scope: !11)
!19 = !DILocation(line: 31, column: 34, scope: !11)
!20 = !DILocation(line: 31, column: 46, scope: !11)
!21 = !DILocation(line: 548, column: 38, scope: !22, inlinedAt: !26)
!22 = distinct !DILexicalBlockFile(scope: !24, file: !23, discriminator: 0)
!23 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!24 = distinct !DILexicalBlockFile(scope: !25, file: !23, discriminator: 0)
!25 = distinct !DILexicalBlockFile(scope: !11, file: !23, discriminator: 0)
!26 = !DILocation(line: 36, column: 67, scope: !11)
!27 = !DILocation(line: 538, column: 22, scope: !22, inlinedAt: !26)
!28 = !DILocation(line: 548, column: 46, scope: !22, inlinedAt: !26)
!29 = !DILocation(line: 548, column: 15, scope: !22, inlinedAt: !26)
!30 = !DILocation(line: 40, column: 33, scope: !11)
!31 = !DILocation(line: 41, column: 62, scope: !11)
!32 = !DILocation(line: 42, column: 31, scope: !11)
!33 = !DILocation(line: 42, column: 46, scope: !11)
!34 = !DILocation(line: 43, column: 25, scope: !11)
!35 = !DILocation(line: 43, column: 44, scope: !11)
!36 = !DILocation(line: 43, column: 4, scope: !11)
