; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_convolution_hardtanh_10(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %10 = shl i32 %9, 10, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 508, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = or disjoint i32 %14, 1, !dbg !13
  %16 = or disjoint i32 %14, 2, !dbg !13
  %17 = or disjoint i32 %14, 3, !dbg !13
  %18 = or disjoint i32 %14, 512, !dbg !13
  %19 = or disjoint i32 %14, 513, !dbg !13
  %20 = or disjoint i32 %14, 514, !dbg !13
  %21 = or disjoint i32 %14, 515, !dbg !13
  %22 = sdiv i32 %14, 961, !dbg !14
  %23 = sdiv i32 %15, 961, !dbg !14
  %24 = sdiv i32 %16, 961, !dbg !14
  %25 = sdiv i32 %17, 961, !dbg !14
  %26 = sdiv i32 %18, 961, !dbg !14
  %27 = sdiv i32 %19, 961, !dbg !14
  %28 = sdiv i32 %20, 961, !dbg !14
  %29 = sdiv i32 %21, 961, !dbg !14
  %30 = srem i32 %22, 1024, !dbg !15
  %31 = srem i32 %23, 1024, !dbg !15
  %32 = srem i32 %24, 1024, !dbg !15
  %33 = srem i32 %25, 1024, !dbg !15
  %34 = srem i32 %26, 1024, !dbg !15
  %35 = srem i32 %27, 1024, !dbg !15
  %36 = srem i32 %28, 1024, !dbg !15
  %37 = srem i32 %29, 1024, !dbg !15
  %38 = sext i32 %14 to i64, !dbg !16
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !16
  %40 = sext i32 %18 to i64, !dbg !16
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !16
  %42 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !17
  %43 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %41, i1 true) #3, !dbg !17
  %44 = sext i32 %30 to i64, !dbg !18
  %45 = getelementptr float, ptr addrspace(1) %1, i64 %44, !dbg !18
  %46 = sext i32 %31 to i64, !dbg !18
  %47 = getelementptr float, ptr addrspace(1) %1, i64 %46, !dbg !18
  %48 = sext i32 %32 to i64, !dbg !18
  %49 = getelementptr float, ptr addrspace(1) %1, i64 %48, !dbg !18
  %50 = sext i32 %33 to i64, !dbg !18
  %51 = getelementptr float, ptr addrspace(1) %1, i64 %50, !dbg !18
  %52 = sext i32 %34 to i64, !dbg !18
  %53 = getelementptr float, ptr addrspace(1) %1, i64 %52, !dbg !18
  %54 = sext i32 %35 to i64, !dbg !18
  %55 = getelementptr float, ptr addrspace(1) %1, i64 %54, !dbg !18
  %56 = sext i32 %36 to i64, !dbg !18
  %57 = getelementptr float, ptr addrspace(1) %1, i64 %56, !dbg !18
  %58 = sext i32 %37 to i64, !dbg !18
  %59 = getelementptr float, ptr addrspace(1) %1, i64 %58, !dbg !18
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 true) #3, !dbg !19
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 true) #3, !dbg !19
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 true) #3, !dbg !19
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 true) #3, !dbg !19
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 true) #3, !dbg !19
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 true) #3, !dbg !19
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 true) #3, !dbg !19
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 true) #3, !dbg !19
  %68 = getelementptr float, ptr addrspace(1) %2, i64 %44, !dbg !20
  %69 = getelementptr float, ptr addrspace(1) %2, i64 %46, !dbg !20
  %70 = getelementptr float, ptr addrspace(1) %2, i64 %48, !dbg !20
  %71 = getelementptr float, ptr addrspace(1) %2, i64 %50, !dbg !20
  %72 = getelementptr float, ptr addrspace(1) %2, i64 %52, !dbg !20
  %73 = getelementptr float, ptr addrspace(1) %2, i64 %54, !dbg !20
  %74 = getelementptr float, ptr addrspace(1) %2, i64 %56, !dbg !20
  %75 = getelementptr float, ptr addrspace(1) %2, i64 %58, !dbg !20
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 true) #3, !dbg !21
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 true) #3, !dbg !21
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 true) #3, !dbg !21
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %71, i1 true) #3, !dbg !21
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 true) #3, !dbg !21
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 true) #3, !dbg !21
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 true) #3, !dbg !21
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 true) #3, !dbg !21
  %84 = getelementptr float, ptr addrspace(1) %3, i64 %44, !dbg !22
  %85 = getelementptr float, ptr addrspace(1) %3, i64 %46, !dbg !22
  %86 = getelementptr float, ptr addrspace(1) %3, i64 %48, !dbg !22
  %87 = getelementptr float, ptr addrspace(1) %3, i64 %50, !dbg !22
  %88 = getelementptr float, ptr addrspace(1) %3, i64 %52, !dbg !22
  %89 = getelementptr float, ptr addrspace(1) %3, i64 %54, !dbg !22
  %90 = getelementptr float, ptr addrspace(1) %3, i64 %56, !dbg !22
  %91 = getelementptr float, ptr addrspace(1) %3, i64 %58, !dbg !22
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 true) #3, !dbg !23
  %93 = bitcast i32 %92 to float, !dbg !23
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 true) #3, !dbg !23
  %95 = bitcast i32 %94 to float, !dbg !23
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 true) #3, !dbg !23
  %97 = bitcast i32 %96 to float, !dbg !23
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %87, i1 true) #3, !dbg !23
  %99 = bitcast i32 %98 to float, !dbg !23
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %88, i1 true) #3, !dbg !23
  %101 = bitcast i32 %100 to float, !dbg !23
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %89, i1 true) #3, !dbg !23
  %103 = bitcast i32 %102 to float, !dbg !23
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %90, i1 true) #3, !dbg !23
  %105 = bitcast i32 %104 to float, !dbg !23
  %106 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %91, i1 true) #3, !dbg !23
  %107 = bitcast i32 %106 to float, !dbg !23
  %108 = getelementptr float, ptr addrspace(1) %4, i64 %44, !dbg !24
  %109 = getelementptr float, ptr addrspace(1) %4, i64 %46, !dbg !24
  %110 = getelementptr float, ptr addrspace(1) %4, i64 %48, !dbg !24
  %111 = getelementptr float, ptr addrspace(1) %4, i64 %50, !dbg !24
  %112 = getelementptr float, ptr addrspace(1) %4, i64 %52, !dbg !24
  %113 = getelementptr float, ptr addrspace(1) %4, i64 %54, !dbg !24
  %114 = getelementptr float, ptr addrspace(1) %4, i64 %56, !dbg !24
  %115 = getelementptr float, ptr addrspace(1) %4, i64 %58, !dbg !24
  %116 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %108, i1 true) #3, !dbg !25
  %117 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %109, i1 true) #3, !dbg !25
  %118 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %110, i1 true) #3, !dbg !25
  %119 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %111, i1 true) #3, !dbg !25
  %120 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %112, i1 true) #3, !dbg !25
  %121 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %113, i1 true) #3, !dbg !25
  %122 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %114, i1 true) #3, !dbg !25
  %123 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %115, i1 true) #3, !dbg !25
  %124 = getelementptr float, ptr addrspace(1) %5, i64 %44, !dbg !26
  %125 = getelementptr float, ptr addrspace(1) %5, i64 %46, !dbg !26
  %126 = getelementptr float, ptr addrspace(1) %5, i64 %48, !dbg !26
  %127 = getelementptr float, ptr addrspace(1) %5, i64 %50, !dbg !26
  %128 = getelementptr float, ptr addrspace(1) %5, i64 %52, !dbg !26
  %129 = getelementptr float, ptr addrspace(1) %5, i64 %54, !dbg !26
  %130 = getelementptr float, ptr addrspace(1) %5, i64 %56, !dbg !26
  %131 = getelementptr float, ptr addrspace(1) %5, i64 %58, !dbg !26
  %132 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %124, i1 true) #3, !dbg !27
  %133 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %125, i1 true) #3, !dbg !27
  %134 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %126, i1 true) #3, !dbg !27
  %135 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %127, i1 true) #3, !dbg !27
  %136 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %128, i1 true) #3, !dbg !27
  %137 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %129, i1 true) #3, !dbg !27
  %138 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %130, i1 true) #3, !dbg !27
  %139 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %131, i1 true) #3, !dbg !27
  %140 = fadd float %93, 0x3EE4F8B580000000, !dbg !28
  %141 = fadd float %95, 0x3EE4F8B580000000, !dbg !28
  %142 = fadd float %97, 0x3EE4F8B580000000, !dbg !28
  %143 = fadd float %99, 0x3EE4F8B580000000, !dbg !28
  %144 = fadd float %101, 0x3EE4F8B580000000, !dbg !28
  %145 = fadd float %103, 0x3EE4F8B580000000, !dbg !28
  %146 = fadd float %105, 0x3EE4F8B580000000, !dbg !28
  %147 = fadd float %107, 0x3EE4F8B580000000, !dbg !28
  %148 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i = icmp eq i32 %148, 0, !dbg !29
  %149 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i = icmp eq i32 %149, 0, !dbg !29
  br i1 %.not.i, label %155, label %150, !dbg !29

150:                                              ; preds = %8
  br i1 %.not1.i, label %153, label %151, !dbg !29

151:                                              ; preds = %150
  %152 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %140) #3, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

153:                                              ; preds = %150
  %154 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %140) #3, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

155:                                              ; preds = %8
  br i1 %.not1.i, label %158, label %156, !dbg !29

156:                                              ; preds = %155
  %157 = tail call float @llvm.nvvm.sqrt.rn.f(float %140) #3, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

158:                                              ; preds = %155
  %159 = tail call float @llvm.nvvm.sqrt.approx.f(float %140) #3, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

__nv_sqrtf.exit:                                  ; preds = %151, %153, %156, %158
  %.0.i = phi float [ %152, %151 ], [ %154, %153 ], [ %157, %156 ], [ %159, %158 ], !dbg !29
  %160 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i8 = icmp eq i32 %160, 0, !dbg !29
  %161 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i11 = icmp eq i32 %161, 0, !dbg !29
  br i1 %.not.i8, label %167, label %162, !dbg !29

162:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i11, label %165, label %163, !dbg !29

163:                                              ; preds = %162
  %164 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %141) #3, !dbg !29
  br label %__nv_sqrtf.exit12, !dbg !29

165:                                              ; preds = %162
  %166 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %141) #3, !dbg !29
  br label %__nv_sqrtf.exit12, !dbg !29

167:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i11, label %170, label %168, !dbg !29

168:                                              ; preds = %167
  %169 = tail call float @llvm.nvvm.sqrt.rn.f(float %141) #3, !dbg !29
  br label %__nv_sqrtf.exit12, !dbg !29

170:                                              ; preds = %167
  %171 = tail call float @llvm.nvvm.sqrt.approx.f(float %141) #3, !dbg !29
  br label %__nv_sqrtf.exit12, !dbg !29

__nv_sqrtf.exit12:                                ; preds = %163, %165, %168, %170
  %.0.i10 = phi float [ %164, %163 ], [ %166, %165 ], [ %169, %168 ], [ %171, %170 ], !dbg !29
  %172 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i13 = icmp eq i32 %172, 0, !dbg !29
  %173 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i16 = icmp eq i32 %173, 0, !dbg !29
  br i1 %.not.i13, label %179, label %174, !dbg !29

174:                                              ; preds = %__nv_sqrtf.exit12
  br i1 %.not1.i16, label %177, label %175, !dbg !29

175:                                              ; preds = %174
  %176 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %142) #3, !dbg !29
  br label %__nv_sqrtf.exit17, !dbg !29

177:                                              ; preds = %174
  %178 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %142) #3, !dbg !29
  br label %__nv_sqrtf.exit17, !dbg !29

179:                                              ; preds = %__nv_sqrtf.exit12
  br i1 %.not1.i16, label %182, label %180, !dbg !29

180:                                              ; preds = %179
  %181 = tail call float @llvm.nvvm.sqrt.rn.f(float %142) #3, !dbg !29
  br label %__nv_sqrtf.exit17, !dbg !29

182:                                              ; preds = %179
  %183 = tail call float @llvm.nvvm.sqrt.approx.f(float %142) #3, !dbg !29
  br label %__nv_sqrtf.exit17, !dbg !29

__nv_sqrtf.exit17:                                ; preds = %175, %177, %180, %182
  %.0.i15 = phi float [ %176, %175 ], [ %178, %177 ], [ %181, %180 ], [ %183, %182 ], !dbg !29
  %184 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i18 = icmp eq i32 %184, 0, !dbg !29
  %185 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i21 = icmp eq i32 %185, 0, !dbg !29
  br i1 %.not.i18, label %191, label %186, !dbg !29

186:                                              ; preds = %__nv_sqrtf.exit17
  br i1 %.not1.i21, label %189, label %187, !dbg !29

187:                                              ; preds = %186
  %188 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %143) #3, !dbg !29
  br label %__nv_sqrtf.exit22, !dbg !29

189:                                              ; preds = %186
  %190 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %143) #3, !dbg !29
  br label %__nv_sqrtf.exit22, !dbg !29

191:                                              ; preds = %__nv_sqrtf.exit17
  br i1 %.not1.i21, label %194, label %192, !dbg !29

192:                                              ; preds = %191
  %193 = tail call float @llvm.nvvm.sqrt.rn.f(float %143) #3, !dbg !29
  br label %__nv_sqrtf.exit22, !dbg !29

194:                                              ; preds = %191
  %195 = tail call float @llvm.nvvm.sqrt.approx.f(float %143) #3, !dbg !29
  br label %__nv_sqrtf.exit22, !dbg !29

__nv_sqrtf.exit22:                                ; preds = %187, %189, %192, %194
  %.0.i20 = phi float [ %188, %187 ], [ %190, %189 ], [ %193, %192 ], [ %195, %194 ], !dbg !29
  %196 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i23 = icmp eq i32 %196, 0, !dbg !29
  %197 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i26 = icmp eq i32 %197, 0, !dbg !29
  br i1 %.not.i23, label %203, label %198, !dbg !29

198:                                              ; preds = %__nv_sqrtf.exit22
  br i1 %.not1.i26, label %201, label %199, !dbg !29

199:                                              ; preds = %198
  %200 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %144) #3, !dbg !29
  br label %__nv_sqrtf.exit27, !dbg !29

201:                                              ; preds = %198
  %202 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %144) #3, !dbg !29
  br label %__nv_sqrtf.exit27, !dbg !29

203:                                              ; preds = %__nv_sqrtf.exit22
  br i1 %.not1.i26, label %206, label %204, !dbg !29

204:                                              ; preds = %203
  %205 = tail call float @llvm.nvvm.sqrt.rn.f(float %144) #3, !dbg !29
  br label %__nv_sqrtf.exit27, !dbg !29

206:                                              ; preds = %203
  %207 = tail call float @llvm.nvvm.sqrt.approx.f(float %144) #3, !dbg !29
  br label %__nv_sqrtf.exit27, !dbg !29

__nv_sqrtf.exit27:                                ; preds = %199, %201, %204, %206
  %.0.i25 = phi float [ %200, %199 ], [ %202, %201 ], [ %205, %204 ], [ %207, %206 ], !dbg !29
  %208 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i28 = icmp eq i32 %208, 0, !dbg !29
  %209 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i31 = icmp eq i32 %209, 0, !dbg !29
  br i1 %.not.i28, label %215, label %210, !dbg !29

210:                                              ; preds = %__nv_sqrtf.exit27
  br i1 %.not1.i31, label %213, label %211, !dbg !29

211:                                              ; preds = %210
  %212 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %145) #3, !dbg !29
  br label %__nv_sqrtf.exit32, !dbg !29

213:                                              ; preds = %210
  %214 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %145) #3, !dbg !29
  br label %__nv_sqrtf.exit32, !dbg !29

215:                                              ; preds = %__nv_sqrtf.exit27
  br i1 %.not1.i31, label %218, label %216, !dbg !29

216:                                              ; preds = %215
  %217 = tail call float @llvm.nvvm.sqrt.rn.f(float %145) #3, !dbg !29
  br label %__nv_sqrtf.exit32, !dbg !29

218:                                              ; preds = %215
  %219 = tail call float @llvm.nvvm.sqrt.approx.f(float %145) #3, !dbg !29
  br label %__nv_sqrtf.exit32, !dbg !29

__nv_sqrtf.exit32:                                ; preds = %211, %213, %216, %218
  %.0.i30 = phi float [ %212, %211 ], [ %214, %213 ], [ %217, %216 ], [ %219, %218 ], !dbg !29
  %220 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i33 = icmp eq i32 %220, 0, !dbg !29
  %221 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i36 = icmp eq i32 %221, 0, !dbg !29
  br i1 %.not.i33, label %227, label %222, !dbg !29

222:                                              ; preds = %__nv_sqrtf.exit32
  br i1 %.not1.i36, label %225, label %223, !dbg !29

223:                                              ; preds = %222
  %224 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %146) #3, !dbg !29
  br label %__nv_sqrtf.exit37, !dbg !29

225:                                              ; preds = %222
  %226 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %146) #3, !dbg !29
  br label %__nv_sqrtf.exit37, !dbg !29

227:                                              ; preds = %__nv_sqrtf.exit32
  br i1 %.not1.i36, label %230, label %228, !dbg !29

228:                                              ; preds = %227
  %229 = tail call float @llvm.nvvm.sqrt.rn.f(float %146) #3, !dbg !29
  br label %__nv_sqrtf.exit37, !dbg !29

230:                                              ; preds = %227
  %231 = tail call float @llvm.nvvm.sqrt.approx.f(float %146) #3, !dbg !29
  br label %__nv_sqrtf.exit37, !dbg !29

__nv_sqrtf.exit37:                                ; preds = %223, %225, %228, %230
  %.0.i35 = phi float [ %224, %223 ], [ %226, %225 ], [ %229, %228 ], [ %231, %230 ], !dbg !29
  %232 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i38 = icmp eq i32 %232, 0, !dbg !29
  %233 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i41 = icmp eq i32 %233, 0, !dbg !29
  br i1 %.not.i38, label %239, label %234, !dbg !29

234:                                              ; preds = %__nv_sqrtf.exit37
  br i1 %.not1.i41, label %237, label %235, !dbg !29

235:                                              ; preds = %234
  %236 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %147) #3, !dbg !29
  br label %__nv_sqrtf.exit42, !dbg !29

237:                                              ; preds = %234
  %238 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %147) #3, !dbg !29
  br label %__nv_sqrtf.exit42, !dbg !29

239:                                              ; preds = %__nv_sqrtf.exit37
  br i1 %.not1.i41, label %242, label %240, !dbg !29

240:                                              ; preds = %239
  %241 = tail call float @llvm.nvvm.sqrt.rn.f(float %147) #3, !dbg !29
  br label %__nv_sqrtf.exit42, !dbg !29

242:                                              ; preds = %239
  %243 = tail call float @llvm.nvvm.sqrt.approx.f(float %147) #3, !dbg !29
  br label %__nv_sqrtf.exit42, !dbg !29

__nv_sqrtf.exit42:                                ; preds = %235, %237, %240, %242
  %.0.i40 = phi float [ %236, %235 ], [ %238, %237 ], [ %241, %240 ], [ %243, %242 ], !dbg !29
  %244 = extractvalue { i32, i32, i32, i32 } %43, 3, !dbg !17
  %245 = insertelement <8 x i32> poison, i32 %67, i64 0, !dbg !19
  %246 = insertelement <8 x i32> %245, i32 %66, i64 1, !dbg !19
  %247 = insertelement <8 x i32> %246, i32 %65, i64 2, !dbg !19
  %248 = insertelement <8 x i32> %247, i32 %64, i64 3, !dbg !19
  %249 = insertelement <8 x i32> %248, i32 %63, i64 4, !dbg !19
  %250 = insertelement <8 x i32> %249, i32 %62, i64 5, !dbg !19
  %251 = insertelement <8 x i32> %250, i32 %61, i64 6, !dbg !19
  %252 = insertelement <8 x i32> %251, i32 %60, i64 7, !dbg !19
  %253 = bitcast <8 x i32> %252 to <8 x float>, !dbg !19
  %254 = insertelement <8 x i32> poison, i32 %83, i64 0, !dbg !21
  %255 = insertelement <8 x i32> %254, i32 %82, i64 1, !dbg !21
  %256 = insertelement <8 x i32> %255, i32 %81, i64 2, !dbg !21
  %257 = insertelement <8 x i32> %256, i32 %80, i64 3, !dbg !21
  %258 = insertelement <8 x i32> %257, i32 %79, i64 4, !dbg !21
  %259 = insertelement <8 x i32> %258, i32 %78, i64 5, !dbg !21
  %260 = insertelement <8 x i32> %259, i32 %77, i64 6, !dbg !21
  %261 = insertelement <8 x i32> %260, i32 %76, i64 7, !dbg !21
  %262 = bitcast <8 x i32> %261 to <8 x float>, !dbg !21
  %263 = extractvalue { i32, i32, i32, i32 } %43, 2, !dbg !17
  %264 = extractvalue { i32, i32, i32, i32 } %43, 1, !dbg !17
  %265 = extractvalue { i32, i32, i32, i32 } %43, 0, !dbg !17
  %266 = extractvalue { i32, i32, i32, i32 } %42, 3, !dbg !17
  %267 = extractvalue { i32, i32, i32, i32 } %42, 2, !dbg !17
  %268 = extractvalue { i32, i32, i32, i32 } %42, 1, !dbg !17
  %269 = extractvalue { i32, i32, i32, i32 } %42, 0, !dbg !17
  %270 = insertelement <8 x i32> poison, i32 %139, i64 0, !dbg !27
  %271 = insertelement <8 x i32> %270, i32 %138, i64 1, !dbg !27
  %272 = insertelement <8 x i32> %271, i32 %137, i64 2, !dbg !27
  %273 = insertelement <8 x i32> %272, i32 %136, i64 3, !dbg !27
  %274 = insertelement <8 x i32> %273, i32 %135, i64 4, !dbg !27
  %275 = insertelement <8 x i32> %274, i32 %134, i64 5, !dbg !27
  %276 = insertelement <8 x i32> %275, i32 %133, i64 6, !dbg !27
  %277 = insertelement <8 x i32> %276, i32 %132, i64 7, !dbg !27
  %278 = bitcast <8 x i32> %277 to <8 x float>, !dbg !27
  %279 = insertelement <8 x i32> poison, i32 %123, i64 0, !dbg !25
  %280 = insertelement <8 x i32> %279, i32 %122, i64 1, !dbg !25
  %281 = insertelement <8 x i32> %280, i32 %121, i64 2, !dbg !25
  %282 = insertelement <8 x i32> %281, i32 %120, i64 3, !dbg !25
  %283 = insertelement <8 x i32> %282, i32 %119, i64 4, !dbg !25
  %284 = insertelement <8 x i32> %283, i32 %118, i64 5, !dbg !25
  %285 = insertelement <8 x i32> %284, i32 %117, i64 6, !dbg !25
  %286 = insertelement <8 x i32> %285, i32 %116, i64 7, !dbg !25
  %287 = bitcast <8 x i32> %286 to <8 x float>, !dbg !25
  %288 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !30
  %289 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i10) #3, !dbg !30
  %290 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i15) #3, !dbg !30
  %291 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i20) #3, !dbg !30
  %292 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i25) #3, !dbg !30
  %293 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i30) #3, !dbg !30
  %294 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i35) #3, !dbg !30
  %295 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i40) #3, !dbg !30
  %296 = insertelement <8 x i32> poison, i32 %244, i64 0, !dbg !17
  %297 = insertelement <8 x i32> %296, i32 %263, i64 1, !dbg !17
  %298 = insertelement <8 x i32> %297, i32 %264, i64 2, !dbg !17
  %299 = insertelement <8 x i32> %298, i32 %265, i64 3, !dbg !17
  %300 = insertelement <8 x i32> %299, i32 %266, i64 4, !dbg !17
  %301 = insertelement <8 x i32> %300, i32 %267, i64 5, !dbg !17
  %302 = insertelement <8 x i32> %301, i32 %268, i64 6, !dbg !17
  %303 = insertelement <8 x i32> %302, i32 %269, i64 7, !dbg !17
  %304 = bitcast <8 x i32> %303 to <8 x float>, !dbg !17
  %305 = fadd <8 x float> %304, %253, !dbg !31
  %306 = fsub <8 x float> %305, %262, !dbg !32
  %307 = insertelement <8 x float> poison, float %295, i64 0, !dbg !33
  %308 = insertelement <8 x float> %307, float %294, i64 1, !dbg !33
  %309 = insertelement <8 x float> %308, float %293, i64 2, !dbg !33
  %310 = insertelement <8 x float> %309, float %292, i64 3, !dbg !33
  %311 = insertelement <8 x float> %310, float %291, i64 4, !dbg !33
  %312 = insertelement <8 x float> %311, float %290, i64 5, !dbg !33
  %313 = insertelement <8 x float> %312, float %289, i64 6, !dbg !33
  %314 = insertelement <8 x float> %313, float %288, i64 7, !dbg !33
  %315 = fmul <8 x float> %306, %314, !dbg !33
  %316 = fmul <8 x float> %315, %287, !dbg !34
  %317 = fadd <8 x float> %316, %278, !dbg !35
  %318 = fcmp ole <8 x float> %317, zeroinitializer, !dbg !36
  %319 = select <8 x i1> %318, <8 x float> zeroinitializer, <8 x float> %317, !dbg !36
  %320 = fcmp olt <8 x float> %319, splat (float 6.000000e+00), !dbg !40
  %321 = extractelement <8 x float> %319, i64 7, !dbg !42
  %322 = fcmp uno float %321, 0.000000e+00, !dbg !43
  %323 = extractelement <8 x float> %319, i64 6, !dbg !42
  %324 = fcmp uno float %323, 0.000000e+00, !dbg !43
  %325 = extractelement <8 x float> %319, i64 5, !dbg !42
  %326 = fcmp uno float %325, 0.000000e+00, !dbg !43
  %327 = extractelement <8 x float> %319, i64 4, !dbg !42
  %328 = fcmp uno float %327, 0.000000e+00, !dbg !43
  %329 = extractelement <8 x float> %319, i64 3, !dbg !42
  %330 = fcmp uno float %329, 0.000000e+00, !dbg !43
  %331 = extractelement <8 x float> %319, i64 2, !dbg !42
  %332 = fcmp uno float %331, 0.000000e+00, !dbg !43
  %333 = extractelement <8 x float> %319, i64 1, !dbg !42
  %334 = fcmp uno float %333, 0.000000e+00, !dbg !43
  %335 = extractelement <8 x float> %319, i64 0, !dbg !42
  %336 = fcmp uno float %335, 0.000000e+00, !dbg !43
  %337 = extractelement <8 x i1> %320, i64 7, !dbg !44
  %338 = or i1 %337, %322, !dbg !44
  %339 = extractelement <8 x i1> %320, i64 6, !dbg !44
  %340 = or i1 %339, %324, !dbg !44
  %341 = extractelement <8 x i1> %320, i64 5, !dbg !44
  %342 = or i1 %341, %326, !dbg !44
  %343 = extractelement <8 x i1> %320, i64 4, !dbg !44
  %344 = or i1 %343, %328, !dbg !44
  %345 = extractelement <8 x i1> %320, i64 3, !dbg !44
  %346 = or i1 %345, %330, !dbg !44
  %347 = extractelement <8 x i1> %320, i64 2, !dbg !44
  %348 = or i1 %347, %332, !dbg !44
  %349 = extractelement <8 x i1> %320, i64 1, !dbg !44
  %350 = or i1 %349, %334, !dbg !44
  %351 = extractelement <8 x i1> %320, i64 0, !dbg !44
  %352 = or i1 %351, %336, !dbg !44
  %bc = bitcast <8 x float> %305 to <8 x i32>, !dbg !45
  %353 = extractelement <8 x i32> %bc, i64 7, !dbg !45
  %bc43 = bitcast <8 x float> %305 to <8 x i32>, !dbg !45
  %354 = extractelement <8 x i32> %bc43, i64 6, !dbg !45
  %bc44 = bitcast <8 x float> %305 to <8 x i32>, !dbg !45
  %355 = extractelement <8 x i32> %bc44, i64 5, !dbg !45
  %bc45 = bitcast <8 x float> %305 to <8 x i32>, !dbg !45
  %356 = extractelement <8 x i32> %bc45, i64 4, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %353, i32 %354, i32 %355, i32 %356, ptr addrspace(1) %39, i1 true) #3, !dbg !45
  %bc46 = bitcast <8 x float> %305 to <8 x i32>, !dbg !45
  %357 = extractelement <8 x i32> %bc46, i64 3, !dbg !45
  %bc47 = bitcast <8 x float> %305 to <8 x i32>, !dbg !45
  %358 = extractelement <8 x i32> %bc47, i64 2, !dbg !45
  %bc48 = bitcast <8 x float> %305 to <8 x i32>, !dbg !45
  %359 = extractelement <8 x i32> %bc48, i64 1, !dbg !45
  %bc49 = bitcast <8 x float> %305 to <8 x i32>, !dbg !45
  %360 = extractelement <8 x i32> %bc49, i64 0, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %357, i32 %358, i32 %359, i32 %360, ptr addrspace(1) %41, i1 true) #3, !dbg !45
  %361 = getelementptr float, ptr addrspace(1) %6, i64 %38, !dbg !46
  %362 = getelementptr float, ptr addrspace(1) %6, i64 %40, !dbg !46
  %363 = bitcast float %321 to i32, !dbg !42
  %364 = select i1 %338, i32 %363, i32 1086324736, !dbg !47
  %365 = bitcast float %323 to i32, !dbg !42
  %366 = select i1 %340, i32 %365, i32 1086324736, !dbg !47
  %367 = bitcast float %325 to i32, !dbg !42
  %368 = select i1 %342, i32 %367, i32 1086324736, !dbg !47
  %369 = bitcast float %327 to i32, !dbg !42
  %370 = select i1 %344, i32 %369, i32 1086324736, !dbg !47
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %364, i32 %366, i32 %368, i32 %370, ptr addrspace(1) %361, i1 true) #3, !dbg !42
  %371 = bitcast float %329 to i32, !dbg !42
  %372 = select i1 %346, i32 %371, i32 1086324736, !dbg !47
  %373 = bitcast float %331 to i32, !dbg !42
  %374 = select i1 %348, i32 %373, i32 1086324736, !dbg !47
  %375 = bitcast float %333 to i32, !dbg !42
  %376 = select i1 %350, i32 %375, i32 1086324736, !dbg !47
  %377 = bitcast float %335 to i32, !dbg !42
  %378 = select i1 %352, i32 %377, i32 1086324736, !dbg !47
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %372, i32 %374, i32 %376, i32 %378, ptr addrspace(1) %362, i1 true) #3, !dbg !42
  ret void, !dbg !48
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cvinecadlo3ywgiuhzvr6e2v2ow6lmzbthkaxtp3otvfplhbvqu7.py", directory: "inductor_cache/vi")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_convolution_hardtanh_10, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_convolution_hardtanh_10, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_convolution_hardtanh_10", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_convolution_hardtanh_10", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 26, column: 34, scope: !7)
!17 = !DILocation(line: 26, column: 39, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 35, scope: !7)
!20 = !DILocation(line: 28, column: 30, scope: !7)
!21 = !DILocation(line: 28, column: 35, scope: !7)
!22 = !DILocation(line: 29, column: 30, scope: !7)
!23 = !DILocation(line: 29, column: 35, scope: !7)
!24 = !DILocation(line: 30, column: 31, scope: !7)
!25 = !DILocation(line: 30, column: 36, scope: !7)
!26 = !DILocation(line: 31, column: 31, scope: !7)
!27 = !DILocation(line: 31, column: 36, scope: !7)
!28 = !DILocation(line: 35, column: 18, scope: !7)
!29 = !DILocation(line: 36, column: 26, scope: !7)
!30 = !DILocation(line: 38, column: 19, scope: !7)
!31 = !DILocation(line: 32, column: 18, scope: !7)
!32 = !DILocation(line: 33, column: 18, scope: !7)
!33 = !DILocation(line: 41, column: 19, scope: !7)
!34 = !DILocation(line: 42, column: 20, scope: !7)
!35 = !DILocation(line: 43, column: 20, scope: !7)
!36 = !DILocation(line: 121, column: 29, scope: !37, inlinedAt: !39)
!37 = distinct !DILexicalBlockFile(scope: !7, file: !38, discriminator: 0)
!38 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!39 = !DILocation(line: 45, column: 42, scope: !7)
!40 = !DILocation(line: 110, column: 15, scope: !37, inlinedAt: !41)
!41 = !DILocation(line: 47, column: 42, scope: !7)
!42 = !DILocation(line: 49, column: 37, scope: !7)
!43 = !DILocation(line: 112, column: 21, scope: !37, inlinedAt: !41)
!44 = !DILocation(line: 112, column: 16, scope: !37, inlinedAt: !41)
!45 = !DILocation(line: 48, column: 39, scope: !7)
!46 = !DILocation(line: 49, column: 25, scope: !7)
!47 = !DILocation(line: 113, column: 29, scope: !37, inlinedAt: !41)
!48 = !DILocation(line: 49, column: 4, scope: !7)
