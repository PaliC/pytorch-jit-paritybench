; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_convolution_relu_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %10 = shl i32 %9, 10, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 508, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = or disjoint i32 %14, 512, !dbg !13
  %16 = sdiv i32 %14, 262144, !dbg !14
  %17 = sdiv i32 %15, 262144, !dbg !14
  %.lhs.trunc = trunc nsw i32 %16 to i16, !dbg !15
  %18 = srem i16 %.lhs.trunc, 32, !dbg !15
  %.lhs.trunc36 = trunc nsw i32 %17 to i16, !dbg !15
  %19 = srem i16 %.lhs.trunc36, 32, !dbg !15
  %20 = sext i32 %14 to i64, !dbg !16
  %21 = getelementptr float, ptr addrspace(1) %0, i64 %20, !dbg !16
  %22 = sext i32 %15 to i64, !dbg !16
  %23 = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !16
  %24 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %21, i1 true) #3, !dbg !17
  %25 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %23, i1 true) #3, !dbg !17
  %26 = sext i16 %18 to i64, !dbg !18
  %27 = getelementptr float, ptr addrspace(1) %1, i64 %26, !dbg !18
  %28 = sext i16 %19 to i64, !dbg !18
  %29 = getelementptr float, ptr addrspace(1) %1, i64 %28, !dbg !18
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 true) #3, !dbg !19
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 true) #3, !dbg !19
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 true) #3, !dbg !19
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 true) #3, !dbg !19
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 true) #3, !dbg !19
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 true) #3, !dbg !19
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 true) #3, !dbg !19
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 true) #3, !dbg !19
  %38 = getelementptr float, ptr addrspace(1) %2, i64 %26, !dbg !20
  %39 = getelementptr float, ptr addrspace(1) %2, i64 %28, !dbg !20
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 true) #3, !dbg !21
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 true) #3, !dbg !21
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 true) #3, !dbg !21
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 true) #3, !dbg !21
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !21
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !21
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !21
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !21
  %48 = getelementptr float, ptr addrspace(1) %3, i64 %26, !dbg !22
  %49 = getelementptr float, ptr addrspace(1) %3, i64 %28, !dbg !22
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #3, !dbg !23
  %51 = bitcast i32 %50 to float, !dbg !23
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #3, !dbg !23
  %53 = bitcast i32 %52 to float, !dbg !23
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #3, !dbg !23
  %55 = bitcast i32 %54 to float, !dbg !23
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #3, !dbg !23
  %57 = bitcast i32 %56 to float, !dbg !23
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 true) #3, !dbg !23
  %59 = bitcast i32 %58 to float, !dbg !23
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 true) #3, !dbg !23
  %61 = bitcast i32 %60 to float, !dbg !23
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 true) #3, !dbg !23
  %63 = bitcast i32 %62 to float, !dbg !23
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 true) #3, !dbg !23
  %65 = bitcast i32 %64 to float, !dbg !23
  %66 = getelementptr float, ptr addrspace(1) %4, i64 %26, !dbg !24
  %67 = getelementptr float, ptr addrspace(1) %4, i64 %28, !dbg !24
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 true) #3, !dbg !25
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 true) #3, !dbg !25
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 true) #3, !dbg !25
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 true) #3, !dbg !25
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 true) #3, !dbg !25
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 true) #3, !dbg !25
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 true) #3, !dbg !25
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 true) #3, !dbg !25
  %76 = getelementptr float, ptr addrspace(1) %5, i64 %26, !dbg !26
  %77 = getelementptr float, ptr addrspace(1) %5, i64 %28, !dbg !26
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 true) #3, !dbg !27
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 true) #3, !dbg !27
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 true) #3, !dbg !27
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 true) #3, !dbg !27
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 true) #3, !dbg !27
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 true) #3, !dbg !27
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 true) #3, !dbg !27
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 true) #3, !dbg !27
  %86 = fadd float %51, 0x3EE4F8B580000000, !dbg !28
  %87 = fadd float %53, 0x3EE4F8B580000000, !dbg !28
  %88 = fadd float %55, 0x3EE4F8B580000000, !dbg !28
  %89 = fadd float %57, 0x3EE4F8B580000000, !dbg !28
  %90 = fadd float %59, 0x3EE4F8B580000000, !dbg !28
  %91 = fadd float %61, 0x3EE4F8B580000000, !dbg !28
  %92 = fadd float %63, 0x3EE4F8B580000000, !dbg !28
  %93 = fadd float %65, 0x3EE4F8B580000000, !dbg !28
  %94 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i = icmp eq i32 %94, 0, !dbg !29
  %95 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i = icmp eq i32 %95, 0, !dbg !29
  br i1 %.not.i, label %101, label %96, !dbg !29

96:                                               ; preds = %8
  br i1 %.not1.i, label %99, label %97, !dbg !29

97:                                               ; preds = %96
  %98 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %86) #3, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

99:                                               ; preds = %96
  %100 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %86) #3, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

101:                                              ; preds = %8
  br i1 %.not1.i, label %104, label %102, !dbg !29

102:                                              ; preds = %101
  %103 = tail call float @llvm.nvvm.sqrt.rn.f(float %86) #3, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

104:                                              ; preds = %101
  %105 = tail call float @llvm.nvvm.sqrt.approx.f(float %86) #3, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

__nv_sqrtf.exit:                                  ; preds = %97, %99, %102, %104
  %.0.i = phi float [ %98, %97 ], [ %100, %99 ], [ %103, %102 ], [ %105, %104 ], !dbg !29
  %106 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i1 = icmp eq i32 %106, 0, !dbg !29
  %107 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i4 = icmp eq i32 %107, 0, !dbg !29
  br i1 %.not.i1, label %113, label %108, !dbg !29

108:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %111, label %109, !dbg !29

109:                                              ; preds = %108
  %110 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %87) #3, !dbg !29
  br label %__nv_sqrtf.exit5, !dbg !29

111:                                              ; preds = %108
  %112 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %87) #3, !dbg !29
  br label %__nv_sqrtf.exit5, !dbg !29

113:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %116, label %114, !dbg !29

114:                                              ; preds = %113
  %115 = tail call float @llvm.nvvm.sqrt.rn.f(float %87) #3, !dbg !29
  br label %__nv_sqrtf.exit5, !dbg !29

116:                                              ; preds = %113
  %117 = tail call float @llvm.nvvm.sqrt.approx.f(float %87) #3, !dbg !29
  br label %__nv_sqrtf.exit5, !dbg !29

__nv_sqrtf.exit5:                                 ; preds = %109, %111, %114, %116
  %.0.i3 = phi float [ %110, %109 ], [ %112, %111 ], [ %115, %114 ], [ %117, %116 ], !dbg !29
  %118 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i6 = icmp eq i32 %118, 0, !dbg !29
  %119 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i9 = icmp eq i32 %119, 0, !dbg !29
  br i1 %.not.i6, label %125, label %120, !dbg !29

120:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %123, label %121, !dbg !29

121:                                              ; preds = %120
  %122 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %88) #3, !dbg !29
  br label %__nv_sqrtf.exit10, !dbg !29

123:                                              ; preds = %120
  %124 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %88) #3, !dbg !29
  br label %__nv_sqrtf.exit10, !dbg !29

125:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %128, label %126, !dbg !29

126:                                              ; preds = %125
  %127 = tail call float @llvm.nvvm.sqrt.rn.f(float %88) #3, !dbg !29
  br label %__nv_sqrtf.exit10, !dbg !29

128:                                              ; preds = %125
  %129 = tail call float @llvm.nvvm.sqrt.approx.f(float %88) #3, !dbg !29
  br label %__nv_sqrtf.exit10, !dbg !29

__nv_sqrtf.exit10:                                ; preds = %121, %123, %126, %128
  %.0.i8 = phi float [ %122, %121 ], [ %124, %123 ], [ %127, %126 ], [ %129, %128 ], !dbg !29
  %130 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i11 = icmp eq i32 %130, 0, !dbg !29
  %131 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i14 = icmp eq i32 %131, 0, !dbg !29
  br i1 %.not.i11, label %137, label %132, !dbg !29

132:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %135, label %133, !dbg !29

133:                                              ; preds = %132
  %134 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %89) #3, !dbg !29
  br label %__nv_sqrtf.exit15, !dbg !29

135:                                              ; preds = %132
  %136 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %89) #3, !dbg !29
  br label %__nv_sqrtf.exit15, !dbg !29

137:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %140, label %138, !dbg !29

138:                                              ; preds = %137
  %139 = tail call float @llvm.nvvm.sqrt.rn.f(float %89) #3, !dbg !29
  br label %__nv_sqrtf.exit15, !dbg !29

140:                                              ; preds = %137
  %141 = tail call float @llvm.nvvm.sqrt.approx.f(float %89) #3, !dbg !29
  br label %__nv_sqrtf.exit15, !dbg !29

__nv_sqrtf.exit15:                                ; preds = %133, %135, %138, %140
  %.0.i13 = phi float [ %134, %133 ], [ %136, %135 ], [ %139, %138 ], [ %141, %140 ], !dbg !29
  %142 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i16 = icmp eq i32 %142, 0, !dbg !29
  %143 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i19 = icmp eq i32 %143, 0, !dbg !29
  br i1 %.not.i16, label %149, label %144, !dbg !29

144:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %147, label %145, !dbg !29

145:                                              ; preds = %144
  %146 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %90) #3, !dbg !29
  br label %__nv_sqrtf.exit20, !dbg !29

147:                                              ; preds = %144
  %148 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %90) #3, !dbg !29
  br label %__nv_sqrtf.exit20, !dbg !29

149:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %152, label %150, !dbg !29

150:                                              ; preds = %149
  %151 = tail call float @llvm.nvvm.sqrt.rn.f(float %90) #3, !dbg !29
  br label %__nv_sqrtf.exit20, !dbg !29

152:                                              ; preds = %149
  %153 = tail call float @llvm.nvvm.sqrt.approx.f(float %90) #3, !dbg !29
  br label %__nv_sqrtf.exit20, !dbg !29

__nv_sqrtf.exit20:                                ; preds = %145, %147, %150, %152
  %.0.i18 = phi float [ %146, %145 ], [ %148, %147 ], [ %151, %150 ], [ %153, %152 ], !dbg !29
  %154 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i21 = icmp eq i32 %154, 0, !dbg !29
  %155 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i24 = icmp eq i32 %155, 0, !dbg !29
  br i1 %.not.i21, label %161, label %156, !dbg !29

156:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %159, label %157, !dbg !29

157:                                              ; preds = %156
  %158 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %91) #3, !dbg !29
  br label %__nv_sqrtf.exit25, !dbg !29

159:                                              ; preds = %156
  %160 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %91) #3, !dbg !29
  br label %__nv_sqrtf.exit25, !dbg !29

161:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %164, label %162, !dbg !29

162:                                              ; preds = %161
  %163 = tail call float @llvm.nvvm.sqrt.rn.f(float %91) #3, !dbg !29
  br label %__nv_sqrtf.exit25, !dbg !29

164:                                              ; preds = %161
  %165 = tail call float @llvm.nvvm.sqrt.approx.f(float %91) #3, !dbg !29
  br label %__nv_sqrtf.exit25, !dbg !29

__nv_sqrtf.exit25:                                ; preds = %157, %159, %162, %164
  %.0.i23 = phi float [ %158, %157 ], [ %160, %159 ], [ %163, %162 ], [ %165, %164 ], !dbg !29
  %166 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i26 = icmp eq i32 %166, 0, !dbg !29
  %167 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i29 = icmp eq i32 %167, 0, !dbg !29
  br i1 %.not.i26, label %173, label %168, !dbg !29

168:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %171, label %169, !dbg !29

169:                                              ; preds = %168
  %170 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %92) #3, !dbg !29
  br label %__nv_sqrtf.exit30, !dbg !29

171:                                              ; preds = %168
  %172 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %92) #3, !dbg !29
  br label %__nv_sqrtf.exit30, !dbg !29

173:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %176, label %174, !dbg !29

174:                                              ; preds = %173
  %175 = tail call float @llvm.nvvm.sqrt.rn.f(float %92) #3, !dbg !29
  br label %__nv_sqrtf.exit30, !dbg !29

176:                                              ; preds = %173
  %177 = tail call float @llvm.nvvm.sqrt.approx.f(float %92) #3, !dbg !29
  br label %__nv_sqrtf.exit30, !dbg !29

__nv_sqrtf.exit30:                                ; preds = %169, %171, %174, %176
  %.0.i28 = phi float [ %170, %169 ], [ %172, %171 ], [ %175, %174 ], [ %177, %176 ], !dbg !29
  %178 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i31 = icmp eq i32 %178, 0, !dbg !29
  %179 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i34 = icmp eq i32 %179, 0, !dbg !29
  br i1 %.not.i31, label %185, label %180, !dbg !29

180:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %183, label %181, !dbg !29

181:                                              ; preds = %180
  %182 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %93) #3, !dbg !29
  br label %__nv_sqrtf.exit35, !dbg !29

183:                                              ; preds = %180
  %184 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %93) #3, !dbg !29
  br label %__nv_sqrtf.exit35, !dbg !29

185:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %188, label %186, !dbg !29

186:                                              ; preds = %185
  %187 = tail call float @llvm.nvvm.sqrt.rn.f(float %93) #3, !dbg !29
  br label %__nv_sqrtf.exit35, !dbg !29

188:                                              ; preds = %185
  %189 = tail call float @llvm.nvvm.sqrt.approx.f(float %93) #3, !dbg !29
  br label %__nv_sqrtf.exit35, !dbg !29

__nv_sqrtf.exit35:                                ; preds = %181, %183, %186, %188
  %.0.i33 = phi float [ %182, %181 ], [ %184, %183 ], [ %187, %186 ], [ %189, %188 ], !dbg !29
  %190 = extractvalue { i32, i32, i32, i32 } %25, 3, !dbg !17
  %191 = insertelement <8 x i32> poison, i32 %30, i64 0, !dbg !19
  %192 = insertelement <8 x i32> %191, i32 %31, i64 1, !dbg !19
  %193 = insertelement <8 x i32> %192, i32 %32, i64 2, !dbg !19
  %194 = insertelement <8 x i32> %193, i32 %33, i64 3, !dbg !19
  %195 = insertelement <8 x i32> %194, i32 %34, i64 4, !dbg !19
  %196 = insertelement <8 x i32> %195, i32 %35, i64 5, !dbg !19
  %197 = insertelement <8 x i32> %196, i32 %36, i64 6, !dbg !19
  %198 = insertelement <8 x i32> %197, i32 %37, i64 7, !dbg !19
  %199 = bitcast <8 x i32> %198 to <8 x float>, !dbg !19
  %200 = bitcast i32 %47 to float, !dbg !21
  %201 = extractvalue { i32, i32, i32, i32 } %25, 2, !dbg !17
  %202 = bitcast i32 %46 to float, !dbg !21
  %203 = extractvalue { i32, i32, i32, i32 } %25, 1, !dbg !17
  %204 = bitcast i32 %45 to float, !dbg !21
  %205 = extractvalue { i32, i32, i32, i32 } %25, 0, !dbg !17
  %206 = bitcast i32 %44 to float, !dbg !21
  %207 = extractvalue { i32, i32, i32, i32 } %24, 3, !dbg !17
  %208 = bitcast i32 %43 to float, !dbg !21
  %209 = extractvalue { i32, i32, i32, i32 } %24, 2, !dbg !17
  %210 = bitcast i32 %42 to float, !dbg !21
  %211 = extractvalue { i32, i32, i32, i32 } %24, 1, !dbg !17
  %212 = bitcast i32 %41 to float, !dbg !21
  %213 = extractvalue { i32, i32, i32, i32 } %24, 0, !dbg !17
  %214 = insertelement <8 x i32> poison, i32 %213, i64 0, !dbg !17
  %215 = insertelement <8 x i32> %214, i32 %211, i64 1, !dbg !17
  %216 = insertelement <8 x i32> %215, i32 %209, i64 2, !dbg !17
  %217 = insertelement <8 x i32> %216, i32 %207, i64 3, !dbg !17
  %218 = insertelement <8 x i32> %217, i32 %205, i64 4, !dbg !17
  %219 = insertelement <8 x i32> %218, i32 %203, i64 5, !dbg !17
  %220 = insertelement <8 x i32> %219, i32 %201, i64 6, !dbg !17
  %221 = insertelement <8 x i32> %220, i32 %190, i64 7, !dbg !17
  %222 = bitcast <8 x i32> %221 to <8 x float>, !dbg !17
  %223 = fadd <8 x float> %222, %199, !dbg !30
  %224 = fcmp olt <8 x float> %223, zeroinitializer, !dbg !31
  %225 = extractelement <8 x i1> %224, i64 7, !dbg !35
  %226 = extractelement <8 x float> %223, i64 7, !dbg !36
  %227 = select i1 %225, float 0.000000e+00, float %226, !dbg !35
  %228 = fsub float %227, %200, !dbg !37
  %229 = extractelement <8 x i1> %224, i64 6, !dbg !35
  %230 = extractelement <8 x float> %223, i64 6, !dbg !36
  %231 = select i1 %229, float 0.000000e+00, float %230, !dbg !35
  %232 = fsub float %231, %202, !dbg !37
  %233 = extractelement <8 x i1> %224, i64 5, !dbg !35
  %234 = extractelement <8 x float> %223, i64 5, !dbg !36
  %235 = select i1 %233, float 0.000000e+00, float %234, !dbg !35
  %236 = fsub float %235, %204, !dbg !37
  %237 = extractelement <8 x i1> %224, i64 4, !dbg !35
  %238 = extractelement <8 x float> %223, i64 4, !dbg !36
  %239 = select i1 %237, float 0.000000e+00, float %238, !dbg !35
  %240 = fsub float %239, %206, !dbg !37
  %241 = extractelement <8 x i1> %224, i64 3, !dbg !35
  %242 = extractelement <8 x float> %223, i64 3, !dbg !36
  %243 = select i1 %241, float 0.000000e+00, float %242, !dbg !35
  %244 = fsub float %243, %208, !dbg !37
  %245 = extractelement <8 x i1> %224, i64 2, !dbg !35
  %246 = extractelement <8 x float> %223, i64 2, !dbg !36
  %247 = select i1 %245, float 0.000000e+00, float %246, !dbg !35
  %248 = fsub float %247, %210, !dbg !37
  %249 = extractelement <8 x i1> %224, i64 1, !dbg !35
  %250 = extractelement <8 x float> %223, i64 1, !dbg !36
  %251 = select i1 %249, float 0.000000e+00, float %250, !dbg !35
  %252 = fsub float %251, %212, !dbg !37
  %253 = extractelement <8 x i1> %224, i64 0, !dbg !35
  %254 = extractelement <8 x float> %223, i64 0, !dbg !36
  %255 = select i1 %253, float 0.000000e+00, float %254, !dbg !35
  %256 = bitcast i32 %40 to float, !dbg !21
  %257 = fsub float %255, %256, !dbg !37
  %258 = bitcast i32 %85 to float, !dbg !27
  %259 = bitcast i32 %84 to float, !dbg !27
  %260 = bitcast i32 %83 to float, !dbg !27
  %261 = bitcast i32 %82 to float, !dbg !27
  %262 = bitcast i32 %81 to float, !dbg !27
  %263 = bitcast i32 %80 to float, !dbg !27
  %264 = bitcast i32 %79 to float, !dbg !27
  %265 = bitcast i32 %78 to float, !dbg !27
  %266 = bitcast i32 %75 to float, !dbg !25
  %267 = bitcast i32 %74 to float, !dbg !25
  %268 = bitcast i32 %73 to float, !dbg !25
  %269 = bitcast i32 %72 to float, !dbg !25
  %270 = bitcast i32 %71 to float, !dbg !25
  %271 = bitcast i32 %70 to float, !dbg !25
  %272 = bitcast i32 %69 to float, !dbg !25
  %273 = bitcast i32 %68 to float, !dbg !25
  %274 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !38
  %275 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !38
  %276 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !38
  %277 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !38
  %278 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !38
  %279 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !38
  %280 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !38
  %281 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !38
  %282 = fmul float %257, %274, !dbg !39
  %283 = fmul float %252, %275, !dbg !39
  %284 = fmul float %248, %276, !dbg !39
  %285 = fmul float %244, %277, !dbg !39
  %286 = fmul float %240, %278, !dbg !39
  %287 = fmul float %236, %279, !dbg !39
  %288 = fmul float %232, %280, !dbg !39
  %289 = fmul float %228, %281, !dbg !39
  %290 = fmul float %282, %273, !dbg !40
  %291 = fmul float %283, %272, !dbg !40
  %292 = fmul float %284, %271, !dbg !40
  %293 = fmul float %285, %270, !dbg !40
  %294 = fmul float %286, %269, !dbg !40
  %295 = fmul float %287, %268, !dbg !40
  %296 = fmul float %288, %267, !dbg !40
  %297 = fmul float %289, %266, !dbg !40
  %298 = fadd float %290, %265, !dbg !41
  %299 = fadd float %291, %264, !dbg !41
  %300 = fadd float %292, %263, !dbg !41
  %301 = fadd float %293, %262, !dbg !41
  %302 = fadd float %294, %261, !dbg !41
  %303 = fadd float %295, %260, !dbg !41
  %304 = fadd float %296, %259, !dbg !41
  %305 = fadd float %297, %258, !dbg !41
  %306 = bitcast float %254 to i32, !dbg !36
  %307 = bitcast float %250 to i32, !dbg !36
  %308 = bitcast float %246 to i32, !dbg !36
  %309 = bitcast float %242 to i32, !dbg !36
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %306, i32 %307, i32 %308, i32 %309, ptr addrspace(1) %21, i1 true) #3, !dbg !36
  %310 = bitcast float %238 to i32, !dbg !36
  %311 = bitcast float %234 to i32, !dbg !36
  %312 = bitcast float %230 to i32, !dbg !36
  %313 = bitcast float %226 to i32, !dbg !36
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %310, i32 %311, i32 %312, i32 %313, ptr addrspace(1) %23, i1 true) #3, !dbg !36
  %314 = getelementptr float, ptr addrspace(1) %6, i64 %20, !dbg !42
  %315 = getelementptr float, ptr addrspace(1) %6, i64 %22, !dbg !42
  %316 = bitcast float %298 to i32, !dbg !43
  %317 = bitcast float %299 to i32, !dbg !43
  %318 = bitcast float %300 to i32, !dbg !43
  %319 = bitcast float %301 to i32, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %316, i32 %317, i32 %318, i32 %319, ptr addrspace(1) %314, i1 true) #3, !dbg !43
  %320 = bitcast float %302 to i32, !dbg !43
  %321 = bitcast float %303 to i32, !dbg !43
  %322 = bitcast float %304 to i32, !dbg !43
  %323 = bitcast float %305 to i32, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %320, i32 %321, i32 %322, i32 %323, ptr addrspace(1) %315, i1 true) #3, !dbg !43
  ret void, !dbg !44
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cvayrbm7vjahqdjewaxntaticpxsqvviyebt26st6pi5qxf2c3rd.py", directory: "inductor_cache/va")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_convolution_relu_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_convolution_relu_0, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_convolution_relu_0", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_convolution_relu_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 31, scope: !7)
!16 = !DILocation(line: 26, column: 34, scope: !7)
!17 = !DILocation(line: 26, column: 39, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 35, scope: !7)
!20 = !DILocation(line: 28, column: 30, scope: !7)
!21 = !DILocation(line: 28, column: 35, scope: !7)
!22 = !DILocation(line: 29, column: 30, scope: !7)
!23 = !DILocation(line: 29, column: 35, scope: !7)
!24 = !DILocation(line: 30, column: 31, scope: !7)
!25 = !DILocation(line: 30, column: 36, scope: !7)
!26 = !DILocation(line: 31, column: 31, scope: !7)
!27 = !DILocation(line: 31, column: 36, scope: !7)
!28 = !DILocation(line: 37, column: 18, scope: !7)
!29 = !DILocation(line: 38, column: 27, scope: !7)
!30 = !DILocation(line: 32, column: 18, scope: !7)
!31 = !DILocation(line: 118, column: 15, scope: !32, inlinedAt: !34)
!32 = distinct !DILexicalBlockFile(scope: !7, file: !33, discriminator: 0)
!33 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!34 = !DILocation(line: 34, column: 40, scope: !7)
!35 = !DILocation(line: 121, column: 29, scope: !32, inlinedAt: !34)
!36 = !DILocation(line: 46, column: 39, scope: !7)
!37 = !DILocation(line: 35, column: 18, scope: !7)
!38 = !DILocation(line: 40, column: 20, scope: !7)
!39 = !DILocation(line: 43, column: 19, scope: !7)
!40 = !DILocation(line: 44, column: 20, scope: !7)
!41 = !DILocation(line: 45, column: 20, scope: !7)
!42 = !DILocation(line: 47, column: 25, scope: !7)
!43 = !DILocation(line: 47, column: 37, scope: !7)
!44 = !DILocation(line: 47, column: 4, scope: !7)
