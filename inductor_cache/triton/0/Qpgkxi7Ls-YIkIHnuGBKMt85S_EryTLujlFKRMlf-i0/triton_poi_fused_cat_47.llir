; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_cat_47(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, i32 %11) local_unnamed_addr !dbg !7 {
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %14 = shl i32 %13, 7, !dbg !11
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %16 = and i32 %15, 127, !dbg !12
  %17 = or disjoint i32 %14, %16, !dbg !13
  %.frozen = freeze i32 %17, !dbg !14
  %18 = sdiv i32 %.frozen, 4, !dbg !14
  %19 = srem i32 %18, 768, !dbg !15
  %20 = mul i32 %18, 4, !dbg !16
  %.decomposed = sub i32 %.frozen, %20, !dbg !16
  %.frozen6 = freeze i32 %17, !dbg !17
  %21 = sdiv i32 %.frozen6, 3072, !dbg !17
  %22 = icmp slt i32 %19, 384, !dbg !18
  %23 = mul nsw i32 %.decomposed, 384, !dbg !19
  %24 = mul nsw i32 %21, 1536, !dbg !20
  %25 = add nsw i32 %23, %24, !dbg !21
  %26 = add nsw i32 %25, %19, !dbg !22
  %27 = sext i32 %26 to i64, !dbg !23
  %28 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !23
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %28, i1 %22, i32 0, i1 %22) #3, !dbg !24
  %30 = sext i32 %19 to i64, !dbg !25
  %31 = getelementptr float, ptr addrspace(1) %1, i64 %30, !dbg !25
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %31, i1 %22, i32 0, i1 %22) #3, !dbg !26
  %33 = getelementptr float, ptr addrspace(1) %2, i64 %30, !dbg !27
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %33, i1 %22, i32 0, i1 %22) #3, !dbg !28
  %35 = bitcast i32 %34 to float, !dbg !28
  %36 = fadd float %35, 0x3F50624DE0000000, !dbg !29
  %37 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i = icmp eq i32 %37, 0, !dbg !30
  %38 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i = icmp eq i32 %38, 0, !dbg !30
  br i1 %.not.i, label %44, label %39, !dbg !30

39:                                               ; preds = %12
  br i1 %.not1.i, label %42, label %40, !dbg !30

40:                                               ; preds = %39
  %41 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %36) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

42:                                               ; preds = %39
  %43 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %36) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

44:                                               ; preds = %12
  br i1 %.not1.i, label %47, label %45, !dbg !30

45:                                               ; preds = %44
  %46 = tail call float @llvm.nvvm.sqrt.rn.f(float %36) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

47:                                               ; preds = %44
  %48 = tail call float @llvm.nvvm.sqrt.approx.f(float %36) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

__nv_sqrtf.exit:                                  ; preds = %40, %42, %45, %47
  %.0.i = phi float [ %41, %40 ], [ %43, %42 ], [ %46, %45 ], [ %48, %47 ], !dbg !30
  %49 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !31
  %50 = getelementptr float, ptr addrspace(1) %3, i64 %30, !dbg !32
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %50, i1 %22, i32 0, i1 %22) #3, !dbg !33
  %52 = getelementptr float, ptr addrspace(1) %4, i64 %30, !dbg !34
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %52, i1 %22, i32 0, i1 %22) #3, !dbg !35
  %54 = icmp sgt i32 %19, 383, !dbg !36
  %55 = add nsw i32 %19, -384, !dbg !37
  %56 = add nsw i32 %25, %55, !dbg !38
  %57 = sext i32 %56 to i64, !dbg !39
  %58 = getelementptr float, ptr addrspace(1) %5, i64 %57, !dbg !39
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %58, i1 %54, i32 0, i1 %54) #3, !dbg !40
  %60 = sext i32 %55 to i64, !dbg !41
  %61 = getelementptr float, ptr addrspace(1) %6, i64 %60, !dbg !41
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %61, i1 %54, i32 0, i1 %54) #3, !dbg !42
  %63 = getelementptr float, ptr addrspace(1) %7, i64 %60, !dbg !43
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %63, i1 %54, i32 0, i1 %54) #3, !dbg !44
  %65 = bitcast i32 %64 to float, !dbg !44
  %66 = fadd float %65, 0x3F50624DE0000000, !dbg !45
  %67 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !46
  %.not.i1 = icmp eq i32 %67, 0, !dbg !46
  %68 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !46
  %.not1.i4 = icmp eq i32 %68, 0, !dbg !46
  br i1 %.not.i1, label %74, label %69, !dbg !46

69:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %72, label %70, !dbg !46

70:                                               ; preds = %69
  %71 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %66) #3, !dbg !46
  br label %__nv_sqrtf.exit5, !dbg !46

72:                                               ; preds = %69
  %73 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %66) #3, !dbg !46
  br label %__nv_sqrtf.exit5, !dbg !46

74:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %77, label %75, !dbg !46

75:                                               ; preds = %74
  %76 = tail call float @llvm.nvvm.sqrt.rn.f(float %66) #3, !dbg !46
  br label %__nv_sqrtf.exit5, !dbg !46

77:                                               ; preds = %74
  %78 = tail call float @llvm.nvvm.sqrt.approx.f(float %66) #3, !dbg !46
  br label %__nv_sqrtf.exit5, !dbg !46

__nv_sqrtf.exit5:                                 ; preds = %70, %72, %75, %77
  %.0.i3 = phi float [ %71, %70 ], [ %73, %72 ], [ %76, %75 ], [ %78, %77 ], !dbg !46
  %79 = bitcast i32 %59 to float, !dbg !40
  %80 = bitcast i32 %62 to float, !dbg !42
  %81 = fsub float %79, %80, !dbg !47
  %82 = bitcast i32 %29 to float, !dbg !24
  %83 = bitcast i32 %32 to float, !dbg !26
  %84 = fsub float %82, %83, !dbg !48
  %85 = fmul float %84, %49, !dbg !49
  %86 = bitcast i32 %51 to float, !dbg !33
  %87 = fmul float %85, %86, !dbg !50
  %88 = bitcast i32 %53 to float, !dbg !35
  %89 = fadd float %87, %88, !dbg !51
  %90 = fcmp olt float %89, 0.000000e+00, !dbg !52
  %91 = select i1 %90, float 0.000000e+00, float %89, !dbg !56
  %92 = mul i32 %21, 3072, !dbg !57
  %.decomposed7 = sub i32 %.frozen6, %92, !dbg !57
  %93 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !58
  %94 = fmul float %81, %93, !dbg !59
  %95 = getelementptr float, ptr addrspace(1) %8, i64 %60, !dbg !60
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %95, i1 %54, i32 0, i1 %54) #3, !dbg !61
  %97 = bitcast i32 %96 to float, !dbg !61
  %98 = fmul float %94, %97, !dbg !62
  %99 = getelementptr float, ptr addrspace(1) %9, i64 %60, !dbg !63
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %99, i1 %54, i32 0, i1 %54) #3, !dbg !64
  %101 = bitcast i32 %100 to float, !dbg !64
  %102 = fadd float %98, %101, !dbg !65
  %103 = fcmp olt float %102, 0.000000e+00, !dbg !66
  %104 = select i1 %103, float 0.000000e+00, float %102, !dbg !68
  %105 = select i1 %22, float %91, float %104, !dbg !69
  %106 = shl i32 %21, 13, !dbg !70
  %107 = add i32 %106, %.decomposed7, !dbg !71
  %108 = sext i32 %107 to i64, !dbg !72
  %109 = getelementptr float, ptr addrspace(1) %10, i64 %108, !dbg !72
  %110 = bitcast float %105 to i32, !dbg !73
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %110, ptr addrspace(1) %109, i1 true) #3, !dbg !73
  ret void, !dbg !74
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "csgwipk7i5jxh3ridszxjmjri7dfyetkzxuvliwlr2bjocl5caoh.py", directory: "inductor_cache/sg")
!4 = !{ptr @triton_poi_fused_cat_47, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_47, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_47", linkageName: "triton_poi_fused_cat_47", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 26, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 32, column: 18, scope: !7)
!19 = !DILocation(line: 33, column: 34, scope: !7)
!20 = !DILocation(line: 33, column: 44, scope: !7)
!21 = !DILocation(line: 33, column: 39, scope: !7)
!22 = !DILocation(line: 33, column: 50, scope: !7)
!23 = !DILocation(line: 33, column: 30, scope: !7)
!24 = !DILocation(line: 33, column: 56, scope: !7)
!25 = !DILocation(line: 34, column: 30, scope: !7)
!26 = !DILocation(line: 34, column: 35, scope: !7)
!27 = !DILocation(line: 36, column: 30, scope: !7)
!28 = !DILocation(line: 36, column: 35, scope: !7)
!29 = !DILocation(line: 38, column: 19, scope: !7)
!30 = !DILocation(line: 39, column: 27, scope: !7)
!31 = !DILocation(line: 41, column: 20, scope: !7)
!32 = !DILocation(line: 45, column: 31, scope: !7)
!33 = !DILocation(line: 45, column: 36, scope: !7)
!34 = !DILocation(line: 47, column: 31, scope: !7)
!35 = !DILocation(line: 47, column: 36, scope: !7)
!36 = !DILocation(line: 53, column: 20, scope: !7)
!37 = !DILocation(line: 56, column: 60, scope: !7)
!38 = !DILocation(line: 56, column: 51, scope: !7)
!39 = !DILocation(line: 56, column: 31, scope: !7)
!40 = !DILocation(line: 56, column: 66, scope: !7)
!41 = !DILocation(line: 57, column: 31, scope: !7)
!42 = !DILocation(line: 57, column: 45, scope: !7)
!43 = !DILocation(line: 59, column: 31, scope: !7)
!44 = !DILocation(line: 59, column: 45, scope: !7)
!45 = !DILocation(line: 61, column: 20, scope: !7)
!46 = !DILocation(line: 62, column: 27, scope: !7)
!47 = !DILocation(line: 58, column: 20, scope: !7)
!48 = !DILocation(line: 35, column: 18, scope: !7)
!49 = !DILocation(line: 44, column: 19, scope: !7)
!50 = !DILocation(line: 46, column: 20, scope: !7)
!51 = !DILocation(line: 48, column: 20, scope: !7)
!52 = !DILocation(line: 118, column: 15, scope: !53, inlinedAt: !55)
!53 = distinct !DILexicalBlockFile(scope: !7, file: !54, discriminator: 0)
!54 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!55 = !DILocation(line: 50, column: 42, scope: !7)
!56 = !DILocation(line: 121, column: 29, scope: !53, inlinedAt: !55)
!57 = !DILocation(line: 27, column: 19, scope: !7)
!58 = !DILocation(line: 64, column: 20, scope: !7)
!59 = !DILocation(line: 67, column: 20, scope: !7)
!60 = !DILocation(line: 68, column: 31, scope: !7)
!61 = !DILocation(line: 68, column: 45, scope: !7)
!62 = !DILocation(line: 69, column: 20, scope: !7)
!63 = !DILocation(line: 70, column: 31, scope: !7)
!64 = !DILocation(line: 70, column: 45, scope: !7)
!65 = !DILocation(line: 71, column: 20, scope: !7)
!66 = !DILocation(line: 118, column: 15, scope: !53, inlinedAt: !67)
!67 = !DILocation(line: 73, column: 42, scope: !7)
!68 = !DILocation(line: 121, column: 29, scope: !53, inlinedAt: !67)
!69 = !DILocation(line: 0, scope: !7)
!70 = !DILocation(line: 77, column: 35, scope: !7)
!71 = !DILocation(line: 77, column: 30, scope: !7)
!72 = !DILocation(line: 77, column: 25, scope: !7)
!73 = !DILocation(line: 77, column: 47, scope: !7)
!74 = !DILocation(line: 77, column: 4, scope: !7)
