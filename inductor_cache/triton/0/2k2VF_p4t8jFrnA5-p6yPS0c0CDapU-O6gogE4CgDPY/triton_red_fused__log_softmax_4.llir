; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_red_fused__log_softmax_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !10
  %8 = icmp slt i32 %7, 16, !dbg !11
  %9 = sdiv i32 %7, 4, !dbg !12
  %10 = sext i32 %9 to i64, !dbg !13
  %11 = getelementptr float, ptr addrspace(1) %1, i64 %10, !dbg !13
  %12 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %11, i1 %8) #4, !dbg !14
  %13 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %11, i1 %8) #4, !dbg !14
  %14 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %11, i1 %8) #4, !dbg !14
  %15 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %11, i1 %8) #4, !dbg !14
  %16 = getelementptr float, ptr addrspace(1) %2, i64 %10, !dbg !15
  %17 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %16, i1 %8) #4, !dbg !16
  %18 = bitcast i32 %17 to float, !dbg !16
  %19 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %16, i1 %8) #4, !dbg !16
  %20 = bitcast i32 %19 to float, !dbg !16
  %21 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %16, i1 %8) #4, !dbg !16
  %22 = bitcast i32 %21 to float, !dbg !16
  %23 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %16, i1 %8) #4, !dbg !16
  %24 = bitcast i32 %23 to float, !dbg !16
  %25 = fcmp olt float %18, 0x3810000000000000, !dbg !17
  %26 = fmul float %18, 0x4160000000000000, !dbg !17
  %.02.i = select i1 %25, float %26, float %18, !dbg !17
  %27 = bitcast float %.02.i to i32, !dbg !17
  %28 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !17
  %29 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !17
  %30 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !17
  %31 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !17
  %32 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !17
  %33 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !17
  %34 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !17
  %35 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !17
  %36 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !17
  %37 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !17
  %38 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !17
  %39 = icmp ugt i32 %27, 2139095039, !dbg !17
  br i1 %39, label %__nv_fmaf_rn.exit.i.i, label %__nv_logf.exit, !dbg !17

__nv_fmaf_rn.exit.i.i:                            ; preds = %6
  %40 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !17
  br label %__nv_logf.exit, !dbg !17

__nv_logf.exit:                                   ; preds = %6, %__nv_fmaf_rn.exit.i.i
  %41 = fcmp olt float %20, 0x3810000000000000, !dbg !17
  %42 = fmul float %20, 0x4160000000000000, !dbg !17
  %.02.i1 = select i1 %41, float %42, float %20, !dbg !17
  %43 = bitcast float %.02.i1 to i32, !dbg !17
  %44 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !17
  %45 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !17
  %46 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !17
  %47 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !17
  %48 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !17
  %49 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !17
  %50 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !17
  %51 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !17
  %52 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !17
  %53 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !17
  %54 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !17
  %55 = icmp ugt i32 %43, 2139095039, !dbg !17
  br i1 %55, label %__nv_fmaf_rn.exit.i.i27, label %__nv_logf.exit30, !dbg !17

__nv_fmaf_rn.exit.i.i27:                          ; preds = %__nv_logf.exit
  %56 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !17
  br label %__nv_logf.exit30, !dbg !17

__nv_logf.exit30:                                 ; preds = %__nv_logf.exit, %__nv_fmaf_rn.exit.i.i27
  %57 = fcmp olt float %22, 0x3810000000000000, !dbg !17
  %58 = fmul float %22, 0x4160000000000000, !dbg !17
  %.02.i31 = select i1 %57, float %58, float %22, !dbg !17
  %59 = bitcast float %.02.i31 to i32, !dbg !17
  %60 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !17
  %61 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !17
  %62 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !17
  %63 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !17
  %64 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !17
  %65 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !17
  %66 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !17
  %67 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !17
  %68 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !17
  %69 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !17
  %70 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !17
  %71 = icmp ugt i32 %59, 2139095039, !dbg !17
  br i1 %71, label %__nv_fmaf_rn.exit.i.i57, label %__nv_logf.exit60, !dbg !17

__nv_fmaf_rn.exit.i.i57:                          ; preds = %__nv_logf.exit30
  %72 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !17
  br label %__nv_logf.exit60, !dbg !17

__nv_logf.exit60:                                 ; preds = %__nv_logf.exit30, %__nv_fmaf_rn.exit.i.i57
  %73 = fcmp olt float %24, 0x3810000000000000, !dbg !17
  %74 = fmul float %24, 0x4160000000000000, !dbg !17
  %.02.i61 = select i1 %73, float %74, float %24, !dbg !17
  %i.i.0.i62 = select i1 %73, float -2.300000e+01, float 0.000000e+00, !dbg !17
  %75 = bitcast float %.02.i61 to i32, !dbg !17
  %76 = add i32 %75, -1059760811, !dbg !17
  %77 = and i32 %76, -8388608, !dbg !17
  %78 = sub i32 %75, %77, !dbg !17
  %79 = bitcast i32 %78 to float, !dbg !17
  %80 = sitofp i32 %77 to float, !dbg !17
  %81 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !17
  %.not.i63 = icmp eq i32 %81, 0, !dbg !17
  %82 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %80, float 0x3E80000000000000, float %i.i.0.i62) #4, !dbg !17
  %83 = tail call float @llvm.nvvm.fma.rn.f(float %80, float 0x3E80000000000000, float %i.i.0.i62) #4, !dbg !17
  %.08.i64 = select i1 %.not.i63, float %83, float %82, !dbg !17
  %84 = fadd float %79, -1.000000e+00, !dbg !17
  %85 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !17
  %.not1.i65 = icmp eq i32 %85, 0, !dbg !17
  %86 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0xBFC0AA04E0000000, float %84, float 0x3FC2073EC0000000) #4, !dbg !17
  %87 = tail call float @llvm.nvvm.fma.rn.f(float 0xBFC0AA04E0000000, float %84, float 0x3FC2073EC0000000) #4, !dbg !17
  %.010.i66 = select i1 %.not1.i65, float %87, float %86, !dbg !17
  %88 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !17
  %.not2.i67 = icmp eq i32 %88, 0, !dbg !17
  %89 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.010.i66, float %84, float 0xBFBF19B980000000) #4, !dbg !17
  %90 = tail call float @llvm.nvvm.fma.rn.f(float %.010.i66, float %84, float 0xBFBF19B980000000) #4, !dbg !17
  %.011.i68 = select i1 %.not2.i67, float %90, float %89, !dbg !17
  %91 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !17
  %.not3.i69 = icmp eq i32 %91, 0, !dbg !17
  %92 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.011.i68, float %84, float 0x3FC1E52AA0000000) #4, !dbg !17
  %93 = tail call float @llvm.nvvm.fma.rn.f(float %.011.i68, float %84, float 0x3FC1E52AA0000000) #4, !dbg !17
  %.012.i70 = select i1 %.not3.i69, float %93, float %92, !dbg !17
  %94 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !17
  %.not4.i71 = icmp eq i32 %94, 0, !dbg !17
  %95 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.012.i70, float %84, float 0xBFC55B1720000000) #4, !dbg !17
  %96 = tail call float @llvm.nvvm.fma.rn.f(float %.012.i70, float %84, float 0xBFC55B1720000000) #4, !dbg !17
  %.09.i72 = select i1 %.not4.i71, float %96, float %95, !dbg !17
  %97 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !17
  %.not5.i73 = icmp eq i32 %97, 0, !dbg !17
  %98 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.09.i72, float %84, float 0x3FC99DA160000000) #4, !dbg !17
  %99 = tail call float @llvm.nvvm.fma.rn.f(float %.09.i72, float %84, float 0x3FC99DA160000000) #4, !dbg !17
  %.05.i74 = select i1 %.not5.i73, float %99, float %98, !dbg !17
  %100 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !17
  %.not6.i75 = icmp eq i32 %100, 0, !dbg !17
  %101 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i74, float %84, float 0xBFCFFFE440000000) #4, !dbg !17
  %102 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i74, float %84, float 0xBFCFFFE440000000) #4, !dbg !17
  %.01.i76 = select i1 %.not6.i75, float %102, float %101, !dbg !17
  %103 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !17
  %.not7.i77 = icmp eq i32 %103, 0, !dbg !17
  %104 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.01.i76, float %84, float 0x3FD5554F00000000) #4, !dbg !17
  %105 = tail call float @llvm.nvvm.fma.rn.f(float %.01.i76, float %84, float 0x3FD5554F00000000) #4, !dbg !17
  %.0.i78 = select i1 %.not7.i77, float %105, float %104, !dbg !17
  %106 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !17
  %.not8.i79 = icmp eq i32 %106, 0, !dbg !17
  %107 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i78, float %84, float -5.000000e-01) #4, !dbg !17
  %108 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i78, float %84, float -5.000000e-01) #4, !dbg !17
  %.07.i80 = select i1 %.not8.i79, float %108, float %107, !dbg !17
  %109 = fmul float %84, %.07.i80, !dbg !17
  %110 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !17
  %.not9.i81 = icmp eq i32 %110, 0, !dbg !17
  %111 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %109, float %84, float %84) #4, !dbg !17
  %112 = tail call float @llvm.nvvm.fma.rn.f(float %109, float %84, float %84) #4, !dbg !17
  %.06.i82 = select i1 %.not9.i81, float %112, float %111, !dbg !17
  %113 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !17
  %.not10.i83 = icmp eq i32 %113, 0, !dbg !17
  %114 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.08.i64, float 0x3FE62E4300000000, float %.06.i82) #4, !dbg !17
  %115 = tail call float @llvm.nvvm.fma.rn.f(float %.08.i64, float 0x3FE62E4300000000, float %.06.i82) #4, !dbg !17
  %.04.i84 = select i1 %.not10.i83, float %115, float %114, !dbg !17
  %116 = icmp ugt i32 %75, 2139095039, !dbg !17
  br i1 %116, label %__nv_fmaf_rn.exit.i.i87, label %__nv_logf.exit90, !dbg !17

__nv_fmaf_rn.exit.i.i87:                          ; preds = %__nv_logf.exit60
  %117 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !17
  %.not11.i88 = icmp eq i32 %117, 0, !dbg !17
  %118 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i61, float 0x7FF0000000000000, float 0x7FF0000000000000) #4, !dbg !17
  %119 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i61, float 0x7FF0000000000000, float 0x7FF0000000000000) #4, !dbg !17
  %.03.i89 = select i1 %.not11.i88, float %119, float %118, !dbg !17
  br label %__nv_logf.exit90, !dbg !17

__nv_logf.exit90:                                 ; preds = %__nv_logf.exit60, %__nv_fmaf_rn.exit.i.i87
  %r.i.0.i85 = phi float [ %.03.i89, %__nv_fmaf_rn.exit.i.i87 ], [ %.04.i84, %__nv_logf.exit60 ], !dbg !17
  %120 = mul i32 %7, 8032, !dbg !18
  %121 = bitcast i32 %15 to float, !dbg !14
  %122 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !19
  %123 = shl i32 %122, 2, !dbg !19
  %124 = and i32 %123, 2044, !dbg !19
  %125 = fcmp oeq float %.02.i61, 0.000000e+00, !dbg !17
  %r.i.1.i86 = select i1 %125, float 0xFFF0000000000000, float %r.i.0.i85, !dbg !17
  %126 = add i32 %124, %120, !dbg !20
  %127 = sext i32 %126 to i64, !dbg !21
  %128 = getelementptr float, ptr addrspace(1) %0, i64 %127, !dbg !21
  %129 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %128, i1 %8, i32 0, i1 %8, i32 0, i1 %8, i32 0, i1 %8, i32 0, i1 %8) #4, !dbg !22
  %130 = extractvalue { i32, i32, i32, i32 } %129, 0, !dbg !22
  %131 = extractvalue { i32, i32, i32, i32 } %129, 1, !dbg !22
  %132 = extractvalue { i32, i32, i32, i32 } %129, 2, !dbg !22
  %133 = extractvalue { i32, i32, i32, i32 } %129, 3, !dbg !22
  %134 = bitcast i32 %130 to float, !dbg !22
  %135 = bitcast i32 %131 to float, !dbg !22
  %136 = bitcast i32 %132 to float, !dbg !22
  %137 = bitcast i32 %133 to float, !dbg !22
  %138 = fsub float %134, %121, !dbg !23
  %139 = fsub float %135, %121, !dbg !23
  %140 = fsub float %136, %121, !dbg !23
  %141 = fsub float %137, %121, !dbg !23
  %142 = fsub float %138, %r.i.1.i86, !dbg !24
  %143 = fsub float %139, %r.i.1.i86, !dbg !24
  %144 = fsub float %140, %r.i.1.i86, !dbg !24
  %145 = fsub float %141, %r.i.1.i86, !dbg !24
  %146 = select i1 %8, float %144, float 0xFFF0000000000000, !dbg !25
  %147 = or disjoint i32 %124, 2048, !dbg !26
  %148 = add i32 %147, %120, !dbg !20
  %149 = sext i32 %148 to i64, !dbg !21
  %150 = getelementptr float, ptr addrspace(1) %0, i64 %149, !dbg !21
  %151 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %150, i1 %8, i32 0, i1 %8, i32 0, i1 %8, i32 0, i1 %8, i32 0, i1 %8) #4, !dbg !22
  %152 = extractvalue { i32, i32, i32, i32 } %151, 0, !dbg !22
  %153 = extractvalue { i32, i32, i32, i32 } %151, 1, !dbg !22
  %154 = extractvalue { i32, i32, i32, i32 } %151, 2, !dbg !22
  %155 = extractvalue { i32, i32, i32, i32 } %151, 3, !dbg !22
  %156 = bitcast i32 %152 to float, !dbg !22
  %157 = bitcast i32 %153 to float, !dbg !22
  %158 = bitcast i32 %154 to float, !dbg !22
  %159 = fsub float %156, %121, !dbg !23
  %160 = fsub float %157, %121, !dbg !23
  %161 = fsub float %158, %121, !dbg !23
  %162 = fsub float %161, %r.i.1.i86, !dbg !24
  %163 = fcmp ogt float %146, %162, !dbg !27
  %164 = fcmp uno float %146, 0.000000e+00, !dbg !31
  %165 = or i1 %164, %163, !dbg !32
  %166 = select i1 %165, float %146, float %162, !dbg !33
  %167 = or disjoint i32 %124, 4096, !dbg !26
  %168 = add i32 %167, %120, !dbg !20
  %169 = sext i32 %168 to i64, !dbg !21
  %170 = getelementptr float, ptr addrspace(1) %0, i64 %169, !dbg !21
  %171 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %170, i1 %8, i32 0, i1 %8, i32 0, i1 %8, i32 0, i1 %8, i32 0, i1 %8) #4, !dbg !22
  %172 = extractvalue { i32, i32, i32, i32 } %171, 0, !dbg !22
  %173 = extractvalue { i32, i32, i32, i32 } %171, 1, !dbg !22
  %174 = extractvalue { i32, i32, i32, i32 } %171, 2, !dbg !22
  %175 = extractvalue { i32, i32, i32, i32 } %171, 3, !dbg !22
  %176 = or disjoint i32 %124, 6144, !dbg !26
  %177 = icmp samesign ult i32 %176, 8032, !dbg !34
  %178 = add i32 %176, %120, !dbg !20
  %179 = sext i32 %178 to i64, !dbg !21
  %180 = getelementptr float, ptr addrspace(1) %0, i64 %179, !dbg !21
  %181 = and i1 %8, %177, !dbg !35
  %182 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %180, i1 %181, i32 0, i1 %181, i32 0, i1 %181, i32 0, i1 %181, i32 0, i1 %181) #4, !dbg !22
  %183 = extractvalue { i32, i32, i32, i32 } %182, 0, !dbg !22
  %184 = extractvalue { i32, i32, i32, i32 } %182, 1, !dbg !22
  %185 = extractvalue { i32, i32, i32, i32 } %182, 2, !dbg !22
  %186 = extractvalue { i32, i32, i32, i32 } %182, 3, !dbg !22
  %187 = bitcast i32 %186 to float, !dbg !22
  %188 = fsub float %187, %121, !dbg !23
  %189 = fsub float %188, %r.i.1.i86, !dbg !24
  %190 = lshr i32 %122, 5, !dbg !19
  %191 = and i32 %122, 31, !dbg !19
  %192 = insertelement <2 x i1> poison, i1 %8, i64 0, !dbg !25
  %193 = shufflevector <2 x i1> %192, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !25
  %194 = insertelement <2 x float> poison, float %143, i64 0, !dbg !25
  %195 = insertelement <2 x float> %194, float %142, i64 1, !dbg !25
  %196 = select <2 x i1> %193, <2 x float> %195, <2 x float> splat (float 0xFFF0000000000000), !dbg !25
  %197 = insertelement <2 x float> poison, float %160, i64 0, !dbg !24
  %198 = insertelement <2 x float> %197, float %159, i64 1, !dbg !24
  %199 = insertelement <2 x float> poison, float %r.i.1.i86, i64 0, !dbg !24
  %200 = shufflevector <2 x float> %199, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !24
  %201 = fsub <2 x float> %198, %200, !dbg !24
  %202 = fcmp ogt <2 x float> %196, %201, !dbg !27
  %203 = fcmp uno <2 x float> %196, zeroinitializer, !dbg !31
  %204 = or <2 x i1> %203, %202, !dbg !32
  %205 = select <2 x i1> %204, <2 x float> %196, <2 x float> %201, !dbg !33
  %206 = select <2 x i1> %193, <2 x float> %205, <2 x float> splat (float 0xFFF0000000000000), !dbg !25
  %207 = insertelement <2 x i32> poison, i32 %173, i64 0, !dbg !22
  %208 = insertelement <2 x i32> %207, i32 %172, i64 1, !dbg !22
  %209 = bitcast <2 x i32> %208 to <2 x float>, !dbg !22
  %210 = insertelement <2 x float> poison, float %121, i64 0, !dbg !23
  %211 = shufflevector <2 x float> %210, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !23
  %212 = fsub <2 x float> %209, %211, !dbg !23
  %213 = fsub <2 x float> %212, %200, !dbg !24
  %214 = fcmp ogt <2 x float> %206, %213, !dbg !27
  %215 = fcmp uno <2 x float> %206, zeroinitializer, !dbg !31
  %216 = or <2 x i1> %215, %214, !dbg !32
  %217 = select <2 x i1> %216, <2 x float> %206, <2 x float> %213, !dbg !33
  %218 = select <2 x i1> %193, <2 x float> %217, <2 x float> splat (float 0xFFF0000000000000), !dbg !25
  %219 = insertelement <2 x i32> poison, i32 %184, i64 0, !dbg !22
  %220 = insertelement <2 x i32> %219, i32 %183, i64 1, !dbg !22
  %221 = bitcast <2 x i32> %220 to <2 x float>, !dbg !22
  %222 = fsub <2 x float> %221, %211, !dbg !23
  %223 = fsub <2 x float> %222, %200, !dbg !24
  %224 = fcmp ogt <2 x float> %218, %223, !dbg !27
  %225 = fcmp uno <2 x float> %218, zeroinitializer, !dbg !31
  %226 = or <2 x i1> %225, %224, !dbg !32
  %227 = select <2 x i1> %226, <2 x float> %218, <2 x float> %223, !dbg !33
  %228 = insertelement <2 x i1> poison, i1 %181, i64 0, !dbg !25
  %229 = shufflevector <2 x i1> %228, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !25
  %230 = select <2 x i1> %229, <2 x float> %227, <2 x float> %218, !dbg !25
  %231 = shufflevector <2 x float> %230, <2 x float> <float poison, float 0.000000e+00>, <2 x i32> <i32 1, i32 3>, !dbg !36
  %232 = fcmp ogt <2 x float> %231, %230, !dbg !36
  %233 = fcmp uno <2 x float> %231, %230, !dbg !36
  %234 = insertelement <2 x float> poison, float %166, i64 0, !dbg !25
  %235 = insertelement <2 x float> %234, float %145, i64 1, !dbg !25
  %236 = select <2 x i1> %193, <2 x float> %235, <2 x float> splat (float 0xFFF0000000000000), !dbg !25
  %237 = insertelement <2 x i32> poison, i32 %174, i64 0, !dbg !22
  %238 = insertelement <2 x i32> %237, i32 %155, i64 1, !dbg !22
  %239 = bitcast <2 x i32> %238 to <2 x float>, !dbg !22
  %240 = fsub <2 x float> %239, %211, !dbg !23
  %241 = fsub <2 x float> %240, %200, !dbg !24
  %242 = fcmp ogt <2 x float> %236, %241, !dbg !27
  %243 = fcmp uno <2 x float> %236, zeroinitializer, !dbg !31
  %244 = or <2 x i1> %243, %242, !dbg !32
  %245 = select <2 x i1> %244, <2 x float> %236, <2 x float> %241, !dbg !33
  %246 = select <2 x i1> %193, <2 x float> %245, <2 x float> splat (float 0xFFF0000000000000), !dbg !25
  %247 = insertelement <2 x i32> poison, i32 %185, i64 0, !dbg !22
  %248 = insertelement <2 x i32> %247, i32 %175, i64 1, !dbg !22
  %249 = bitcast <2 x i32> %248 to <2 x float>, !dbg !22
  %250 = fsub <2 x float> %249, %211, !dbg !23
  %251 = fsub <2 x float> %250, %200, !dbg !24
  %252 = fcmp ogt <2 x float> %246, %251, !dbg !27
  %253 = fcmp uno <2 x float> %246, zeroinitializer, !dbg !31
  %254 = or <2 x i1> %253, %252, !dbg !32
  %255 = select <2 x i1> %254, <2 x float> %246, <2 x float> %251, !dbg !33
  %256 = insertelement <2 x i1> %193, i1 %181, i64 0, !dbg !25
  %257 = insertelement <2 x float> %246, float 0xFFF0000000000000, i64 1, !dbg !25
  %258 = select <2 x i1> %256, <2 x float> %255, <2 x float> %257, !dbg !25
  %259 = extractelement <2 x float> %258, i64 1, !dbg !27
  %260 = fcmp ogt float %259, %189, !dbg !27
  %261 = fcmp uno float %259, 0.000000e+00, !dbg !31
  %262 = insertelement <2 x i1> %232, i1 %261, i64 1, !dbg !39
  %263 = shufflevector <2 x i1> %233, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !39
  %264 = insertelement <2 x i1> %263, i1 %260, i64 1, !dbg !39
  %265 = or <2 x i1> %262, %264, !dbg !39
  %266 = shufflevector <2 x float> %230, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !40
  %267 = shufflevector <2 x float> %266, <2 x float> %258, <2 x i32> <i32 0, i32 3>, !dbg !40
  %268 = insertelement <2 x float> %230, float %189, i64 1, !dbg !40
  %269 = select <2 x i1> %265, <2 x float> %267, <2 x float> %268, !dbg !40
  %270 = extractelement <2 x float> %269, i64 0, !dbg !41
  %271 = fcmp ogt <2 x float> %269, %258, !dbg !36
  %272 = extractelement <2 x i1> %271, i64 0, !dbg !36
  %273 = fcmp uno float %270, 0.000000e+00, !dbg !41
  %274 = or i1 %272, %273, !dbg !39
  %275 = insertelement <2 x i1> poison, i1 %274, i64 0, !dbg !40
  %276 = insertelement <2 x i1> %275, i1 %181, i64 1, !dbg !40
  %277 = select <2 x i1> %276, <2 x float> %269, <2 x float> %258, !dbg !40
  %278 = extractelement <2 x float> %277, i64 0, !dbg !40
  %279 = extractelement <2 x float> %277, i64 1, !dbg !36
  %280 = fcmp ogt float %278, %279, !dbg !36
  %281 = fcmp uno float %278, 0.000000e+00, !dbg !41
  %282 = or i1 %280, %281, !dbg !39
  %283 = select i1 %282, float %278, float %279, !dbg !40
  %284 = bitcast float %283 to i32, !dbg !42
  %285 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %284, i32 16, i32 31), !dbg !42
  %286 = bitcast i32 %285 to float, !dbg !42
  %287 = fcmp ogt float %283, %286, !dbg !36
  %288 = fcmp uno float %283, 0.000000e+00, !dbg !41
  %289 = or i1 %288, %287, !dbg !39
  %290 = select i1 %289, float %283, float %286, !dbg !40
  %291 = bitcast float %290 to i32, !dbg !42
  %292 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %291, i32 8, i32 31), !dbg !42
  %293 = bitcast i32 %292 to float, !dbg !42
  %294 = fcmp ogt float %290, %293, !dbg !36
  %295 = fcmp uno float %290, 0.000000e+00, !dbg !41
  %296 = or i1 %294, %295, !dbg !39
  %297 = select i1 %296, float %290, float %293, !dbg !40
  %298 = bitcast float %297 to i32, !dbg !42
  %299 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %298, i32 4, i32 31), !dbg !42
  %300 = bitcast i32 %299 to float, !dbg !42
  %301 = fcmp ogt float %297, %300, !dbg !36
  %302 = fcmp uno float %297, 0.000000e+00, !dbg !41
  %303 = or i1 %301, %302, !dbg !39
  %304 = select i1 %303, float %297, float %300, !dbg !40
  %305 = bitcast float %304 to i32, !dbg !42
  %306 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %305, i32 2, i32 31), !dbg !42
  %307 = bitcast i32 %306 to float, !dbg !42
  %308 = fcmp ogt float %304, %307, !dbg !36
  %309 = fcmp uno float %304, 0.000000e+00, !dbg !41
  %310 = or i1 %308, %309, !dbg !39
  %311 = select i1 %310, float %304, float %307, !dbg !40
  %312 = bitcast float %311 to i32, !dbg !42
  %313 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %312, i32 1, i32 31), !dbg !42
  %314 = bitcast i32 %313 to float, !dbg !42
  %315 = fcmp ogt float %311, %314, !dbg !36
  %316 = fcmp uno float %311, 0.000000e+00, !dbg !41
  %317 = or i1 %315, %316, !dbg !39
  %318 = icmp eq i32 %191, 0, !dbg !42
  %319 = and i32 %190, 15, !dbg !42
  %320 = zext nneg i32 %319 to i64, !dbg !42
  %321 = getelementptr float, ptr addrspace(3) @global_smem, i64 %320, !dbg !42
  %322 = select i1 %317, i32 %312, i32 %313, !dbg !40
  %323 = insertelement <1 x i32> poison, i32 %322, i64 0, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %321, <1 x i32> %323, i1 %318) #4, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %324 = icmp slt i32 %122, 16, !dbg !42
  %325 = sext i32 %122 to i64, !dbg !42
  %326 = getelementptr float, ptr addrspace(3) @global_smem, i64 %325, !dbg !42
  %327 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %326, i1 %324) #4, !dbg !42
  %328 = bitcast i32 %327 to float, !dbg !42
  %329 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %327, i32 8, i32 31), !dbg !42
  %330 = bitcast i32 %329 to float, !dbg !42
  %331 = fcmp ogt float %328, %330, !dbg !36
  %332 = fcmp uno float %328, 0.000000e+00, !dbg !41
  %333 = or i1 %332, %331, !dbg !39
  %334 = select i1 %333, float %328, float %330, !dbg !40
  %335 = bitcast float %334 to i32, !dbg !42
  %336 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %335, i32 4, i32 31), !dbg !42
  %337 = bitcast i32 %336 to float, !dbg !42
  %338 = fcmp ogt float %334, %337, !dbg !36
  %339 = fcmp uno float %334, 0.000000e+00, !dbg !41
  %340 = or i1 %338, %339, !dbg !39
  %341 = select i1 %340, float %334, float %337, !dbg !40
  %342 = bitcast float %341 to i32, !dbg !42
  %343 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %342, i32 2, i32 31), !dbg !42
  %344 = bitcast i32 %343 to float, !dbg !42
  %345 = fcmp ogt float %341, %344, !dbg !36
  %346 = fcmp uno float %341, 0.000000e+00, !dbg !41
  %347 = or i1 %345, %346, !dbg !39
  %348 = select i1 %347, float %341, float %344, !dbg !40
  %349 = bitcast float %348 to i32, !dbg !42
  %350 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %349, i32 1, i32 31), !dbg !42
  %351 = bitcast i32 %350 to float, !dbg !42
  %352 = fcmp ogt float %348, %351, !dbg !36
  %353 = fcmp uno float %348, 0.000000e+00, !dbg !41
  %354 = or i1 %352, %353, !dbg !39
  %355 = and i32 %122, 15, !dbg !42
  %356 = icmp eq i32 %355, 0, !dbg !42
  %357 = and i1 %324, %356, !dbg !42
  %358 = select i1 %354, i32 %349, i32 %350, !dbg !40
  %359 = insertelement <1 x i32> poison, i32 %358, i64 0, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %326, <1 x i32> %359, i1 %357) #4, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %360 = load i32, ptr addrspace(3) @global_smem, align 16, !dbg !42
  %361 = sext i32 %7 to i64, !dbg !43
  %362 = getelementptr float, ptr addrspace(1) %3, i64 %361, !dbg !43
  %urem = and i32 %122, 511, !dbg !44
  %363 = icmp eq i32 %urem, 0, !dbg !44
  %364 = and i1 %363, %8, !dbg !44
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %360, ptr addrspace(1) %362, i1 %364) #4, !dbg !44
  ret void, !dbg !45
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cypqudo7s3mxxqr67xllgucvfdztfhpokdm32moa3eed3wmgnjkk.py", directory: "inductor_cache/yp")
!4 = !{ptr @triton_red_fused__log_softmax_4, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused__log_softmax_4, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused__log_softmax_4", linkageName: "triton_red_fused__log_softmax_4", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 27, column: 19, scope: !7)
!13 = !DILocation(line: 28, column: 30, scope: !7)
!14 = !DILocation(line: 28, column: 35, scope: !7)
!15 = !DILocation(line: 29, column: 30, scope: !7)
!16 = !DILocation(line: 29, column: 35, scope: !7)
!17 = !DILocation(line: 37, column: 27, scope: !7)
!18 = !DILocation(line: 35, column: 44, scope: !7)
!19 = !DILocation(line: 25, column: 33, scope: !7)
!20 = !DILocation(line: 35, column: 39, scope: !7)
!21 = !DILocation(line: 35, column: 34, scope: !7)
!22 = !DILocation(line: 35, column: 49, scope: !7)
!23 = !DILocation(line: 36, column: 22, scope: !7)
!24 = !DILocation(line: 38, column: 22, scope: !7)
!25 = !DILocation(line: 43, column: 47, scope: !7)
!26 = !DILocation(line: 32, column: 27, scope: !7)
!27 = !DILocation(line: 118, column: 15, scope: !28, inlinedAt: !30)
!28 = distinct !DILexicalBlockFile(scope: !7, file: !29, discriminator: 0)
!29 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!30 = !DILocation(line: 42, column: 46, scope: !7)
!31 = !DILocation(line: 120, column: 21, scope: !28, inlinedAt: !30)
!32 = !DILocation(line: 120, column: 16, scope: !28, inlinedAt: !30)
!33 = !DILocation(line: 121, column: 29, scope: !28, inlinedAt: !30)
!34 = !DILocation(line: 33, column: 25, scope: !7)
!35 = !DILocation(line: 35, column: 57, scope: !7)
!36 = !DILocation(line: 118, column: 15, scope: !37, inlinedAt: !38)
!37 = distinct !DILexicalBlockFile(scope: !28, file: !29, discriminator: 0)
!38 = !DILocation(line: 44, column: 38, scope: !7)
!39 = !DILocation(line: 120, column: 16, scope: !37, inlinedAt: !38)
!40 = !DILocation(line: 121, column: 29, scope: !37, inlinedAt: !38)
!41 = !DILocation(line: 120, column: 21, scope: !37, inlinedAt: !38)
!42 = !DILocation(line: 131, column: 29, scope: !28, inlinedAt: !38)
!43 = !DILocation(line: 45, column: 25, scope: !7)
!44 = !DILocation(line: 45, column: 36, scope: !7)
!45 = !DILocation(line: 45, column: 4, scope: !7)
