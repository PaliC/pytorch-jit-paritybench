#loc = loc("inductor_cache/yp/cypqudo7s3mxxqr67xllgucvfdztfhpokdm32moa3eed3wmgnjkk.py":19:0)
#loc1 = loc(unknown)
#loc30 = loc("inductor_cache/yp/cypqudo7s3mxxqr67xllgucvfdztfhpokdm32moa3eed3wmgnjkk.py":44:38)
#loc40 = loc(callsite(#loc1 at #loc30))
module {
  tt.func public @triton_red_fused__log_softmax_4(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/yp/cypqudo7s3mxxqr67xllgucvfdztfhpokdm32moa3eed3wmgnjkk.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/yp/cypqudo7s3mxxqr67xllgucvfdztfhpokdm32moa3eed3wmgnjkk.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/yp/cypqudo7s3mxxqr67xllgucvfdztfhpokdm32moa3eed3wmgnjkk.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/yp/cypqudo7s3mxxqr67xllgucvfdztfhpokdm32moa3eed3wmgnjkk.py":19:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/yp/cypqudo7s3mxxqr67xllgucvfdztfhpokdm32moa3eed3wmgnjkk.py":19:0), %arg5: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/yp/cypqudo7s3mxxqr67xllgucvfdztfhpokdm32moa3eed3wmgnjkk.py":19:0)) attributes {noinline = false} {
    %c4_i32 = arith.constant 4 : i32 loc(#loc1)
    %c16_i32 = arith.constant 16 : i32 loc(#loc1)
    %c2048_i32 = arith.constant 2048 : i32 loc(#loc1)
    %c8032_i32 = arith.constant 8032 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst = arith.constant dense<0.000000e+00> : tensor<1x2048xf32> loc(#loc1)
    %cst_0 = arith.constant dense<8032> : tensor<1x2048xi32> loc(#loc1)
    %cst_1 = arith.constant dense<0xFF800000> : tensor<1x2048xf32> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.cmpi slt, %0, %c16_i32 : i32 loc(#loc3)
    %2 = tt.splat %1 : i1 -> tensor<1x1xi1> loc(#loc3)
    %3 = tt.make_range {end = 2048 : i32, start = 0 : i32} : tensor<2048xi32> loc(#loc4)
    %4 = tt.expand_dims %3 {axis = 0 : i32} : tensor<2048xi32> -> tensor<1x2048xi32> loc(#loc5)
    %5 = arith.divsi %0, %c4_i32 : i32 loc(#loc6)
    %6 = tt.addptr %arg1, %5 : !tt.ptr<f32>, i32 loc(#loc7)
    %7 = tt.splat %6 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>> loc(#loc7)
    %8 = tt.load %7, %2 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>> loc(#loc8)
    %9 = tt.addptr %arg2, %5 : !tt.ptr<f32>, i32 loc(#loc9)
    %10 = tt.splat %9 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>> loc(#loc9)
    %11 = tt.load %10, %2 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>> loc(#loc10)
    %12 = arith.muli %0, %c8032_i32 : i32 loc(#loc11)
    %13 = tt.splat %12 : i32 -> tensor<1x2048xi32> loc(#loc12)
    %14 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1x2048x!tt.ptr<f32>> loc(#loc13)
    %15 = tt.splat %1 : i1 -> tensor<1x2048xi1> loc(#loc14)
    %16 = tt.broadcast %8 : tensor<1x1xf32> -> tensor<1x2048xf32> loc(#loc15)
    %17 = math.log %11 : tensor<1x1xf32> loc(#loc16)
    %18 = tt.broadcast %17 : tensor<1x1xf32> -> tensor<1x2048xf32> loc(#loc17)
    %19 = scf.for %arg6 = %c0_i32 to %c8032_i32 step %c2048_i32 iter_args(%arg7 = %cst_1) -> (tensor<1x2048xf32>)  : i32 {
      %24 = tt.splat %arg6 : i32 -> tensor<1x2048xi32> loc(#loc19)
      %25 = arith.addi %24, %4 : tensor<1x2048xi32> loc(#loc19)
      %26 = arith.cmpi slt, %25, %cst_0 : tensor<1x2048xi32> loc(#loc20)
      %27 = arith.addi %25, %13 : tensor<1x2048xi32> loc(#loc12)
      %28 = tt.addptr %14, %27 : tensor<1x2048x!tt.ptr<f32>>, tensor<1x2048xi32> loc(#loc13)
      %29 = arith.andi %26, %15 : tensor<1x2048xi1> loc(#loc14)
      %30 = tt.load %28, %29, %cst evictionPolicy = evict_first : tensor<1x2048x!tt.ptr<f32>> loc(#loc21)
      %31 = arith.subf %30, %16 : tensor<1x2048xf32> loc(#loc15)
      %32 = arith.subf %31, %18 : tensor<1x2048xf32> loc(#loc17)
      %33 = arith.cmpf ogt, %arg7, %32 : tensor<1x2048xf32> loc(#loc35)
      %34 = arith.cmpf une, %arg7, %arg7 : tensor<1x2048xf32> loc(#loc36)
      %35 = arith.ori %33, %34 : tensor<1x2048xi1> loc(#loc37)
      %36 = arith.select %35, %arg7, %32 : tensor<1x2048xi1>, tensor<1x2048xf32> loc(#loc38)
      %37 = arith.select %29, %36, %arg7 : tensor<1x2048xi1>, tensor<1x2048xf32> loc(#loc27)
      scf.yield %37 : tensor<1x2048xf32> loc(#loc28)
    } loc(#loc18)
    %20 = "tt.reduce"(%19) <{axis = 1 : i32}> ({
    ^bb0(%arg6: f32 loc(callsite(#loc1 at #loc30)), %arg7: f32 loc(callsite(#loc1 at #loc30))):
      %24 = arith.cmpf ogt, %arg6, %arg7 : f32 loc(#loc45)
      %25 = arith.cmpf une, %arg6, %arg6 : f32 loc(#loc46)
      %26 = arith.ori %24, %25 : i1 loc(#loc47)
      %27 = arith.select %26, %arg6, %arg7 : f32 loc(#loc48)
      tt.reduce.return %27 : f32 loc(#loc39)
    }) : (tensor<1x2048xf32>) -> tensor<1xf32> loc(#loc39)
    %21 = tt.expand_dims %20 {axis = 1 : i32} : tensor<1xf32> -> tensor<1x1xf32> loc(#loc31)
    %22 = tt.addptr %arg3, %0 : !tt.ptr<f32>, i32 loc(#loc32)
    %23 = tt.splat %22 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>> loc(#loc32)
    tt.store %23, %21, %2 : tensor<1x1x!tt.ptr<f32>> loc(#loc33)
    tt.return loc(#loc34)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/yp/cypqudo7s3mxxqr67xllgucvfdztfhpokdm32moa3eed3wmgnjkk.py":22:28)
#loc3 = loc("inductor_cache/yp/cypqudo7s3mxxqr67xllgucvfdztfhpokdm32moa3eed3wmgnjkk.py":24:21)
#loc4 = loc("inductor_cache/yp/cypqudo7s3mxxqr67xllgucvfdztfhpokdm32moa3eed3wmgnjkk.py":25:25)
#loc5 = loc("inductor_cache/yp/cypqudo7s3mxxqr67xllgucvfdztfhpokdm32moa3eed3wmgnjkk.py":25:33)
#loc6 = loc("inductor_cache/yp/cypqudo7s3mxxqr67xllgucvfdztfhpokdm32moa3eed3wmgnjkk.py":27:19)
#loc7 = loc("inductor_cache/yp/cypqudo7s3mxxqr67xllgucvfdztfhpokdm32moa3eed3wmgnjkk.py":28:30)
#loc8 = loc("inductor_cache/yp/cypqudo7s3mxxqr67xllgucvfdztfhpokdm32moa3eed3wmgnjkk.py":28:35)
#loc9 = loc("inductor_cache/yp/cypqudo7s3mxxqr67xllgucvfdztfhpokdm32moa3eed3wmgnjkk.py":29:30)
#loc10 = loc("inductor_cache/yp/cypqudo7s3mxxqr67xllgucvfdztfhpokdm32moa3eed3wmgnjkk.py":29:35)
#loc11 = loc("inductor_cache/yp/cypqudo7s3mxxqr67xllgucvfdztfhpokdm32moa3eed3wmgnjkk.py":35:44)
#loc12 = loc("inductor_cache/yp/cypqudo7s3mxxqr67xllgucvfdztfhpokdm32moa3eed3wmgnjkk.py":35:39)
#loc13 = loc("inductor_cache/yp/cypqudo7s3mxxqr67xllgucvfdztfhpokdm32moa3eed3wmgnjkk.py":35:34)
#loc14 = loc("inductor_cache/yp/cypqudo7s3mxxqr67xllgucvfdztfhpokdm32moa3eed3wmgnjkk.py":35:57)
#loc15 = loc("inductor_cache/yp/cypqudo7s3mxxqr67xllgucvfdztfhpokdm32moa3eed3wmgnjkk.py":36:22)
#loc16 = loc("inductor_cache/yp/cypqudo7s3mxxqr67xllgucvfdztfhpokdm32moa3eed3wmgnjkk.py":37:27)
#loc17 = loc("inductor_cache/yp/cypqudo7s3mxxqr67xllgucvfdztfhpokdm32moa3eed3wmgnjkk.py":38:22)
#loc18 = loc("inductor_cache/yp/cypqudo7s3mxxqr67xllgucvfdztfhpokdm32moa3eed3wmgnjkk.py":31:36)
#loc19 = loc("inductor_cache/yp/cypqudo7s3mxxqr67xllgucvfdztfhpokdm32moa3eed3wmgnjkk.py":32:27)
#loc20 = loc("inductor_cache/yp/cypqudo7s3mxxqr67xllgucvfdztfhpokdm32moa3eed3wmgnjkk.py":33:25)
#loc21 = loc("inductor_cache/yp/cypqudo7s3mxxqr67xllgucvfdztfhpokdm32moa3eed3wmgnjkk.py":35:49)
#loc22 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":118:15)
#loc23 = loc("inductor_cache/yp/cypqudo7s3mxxqr67xllgucvfdztfhpokdm32moa3eed3wmgnjkk.py":42:46)
#loc24 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":120:21)
#loc25 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":120:16)
#loc26 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":121:29)
#loc27 = loc("inductor_cache/yp/cypqudo7s3mxxqr67xllgucvfdztfhpokdm32moa3eed3wmgnjkk.py":43:47)
#loc28 = loc("inductor_cache/yp/cypqudo7s3mxxqr67xllgucvfdztfhpokdm32moa3eed3wmgnjkk.py":43:8)
#loc29 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":131:29)
#loc31 = loc("inductor_cache/yp/cypqudo7s3mxxqr67xllgucvfdztfhpokdm32moa3eed3wmgnjkk.py":44:41)
#loc32 = loc("inductor_cache/yp/cypqudo7s3mxxqr67xllgucvfdztfhpokdm32moa3eed3wmgnjkk.py":45:25)
#loc33 = loc("inductor_cache/yp/cypqudo7s3mxxqr67xllgucvfdztfhpokdm32moa3eed3wmgnjkk.py":45:36)
#loc34 = loc("inductor_cache/yp/cypqudo7s3mxxqr67xllgucvfdztfhpokdm32moa3eed3wmgnjkk.py":45:4)
#loc35 = loc(callsite(#loc22 at #loc23))
#loc36 = loc(callsite(#loc24 at #loc23))
#loc37 = loc(callsite(#loc25 at #loc23))
#loc38 = loc(callsite(#loc26 at #loc23))
#loc39 = loc(callsite(#loc29 at #loc30))
#loc41 = loc(callsite(#loc22 at #loc29))
#loc42 = loc(callsite(#loc24 at #loc29))
#loc43 = loc(callsite(#loc25 at #loc29))
#loc44 = loc(callsite(#loc26 at #loc29))
#loc45 = loc(callsite(#loc41 at #loc30))
#loc46 = loc(callsite(#loc42 at #loc30))
#loc47 = loc(callsite(#loc43 at #loc30))
#loc48 = loc(callsite(#loc44 at #loc30))
