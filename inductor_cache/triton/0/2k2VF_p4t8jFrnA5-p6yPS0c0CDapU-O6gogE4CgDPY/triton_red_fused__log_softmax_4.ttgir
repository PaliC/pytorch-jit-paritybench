#blocked = #triton_gpu.blocked<{sizePerThread = [1, 4], threadsPerWarp = [1, 32], warpsPerCTA = [1, 16], order = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 16], order = [0, 1]}>
#loc = loc("inductor_cache/yp/cypqudo7s3mxxqr67xllgucvfdztfhpokdm32moa3eed3wmgnjkk.py":19:0)
#loc1 = loc(unknown)
#loc29 = loc("inductor_cache/yp/cypqudo7s3mxxqr67xllgucvfdztfhpokdm32moa3eed3wmgnjkk.py":44:38)
#loc39 = loc(callsite(#loc1 at #loc29))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 16 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_red_fused__log_softmax_4(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/yp/cypqudo7s3mxxqr67xllgucvfdztfhpokdm32moa3eed3wmgnjkk.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/yp/cypqudo7s3mxxqr67xllgucvfdztfhpokdm32moa3eed3wmgnjkk.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/yp/cypqudo7s3mxxqr67xllgucvfdztfhpokdm32moa3eed3wmgnjkk.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/yp/cypqudo7s3mxxqr67xllgucvfdztfhpokdm32moa3eed3wmgnjkk.py":19:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/yp/cypqudo7s3mxxqr67xllgucvfdztfhpokdm32moa3eed3wmgnjkk.py":19:0), %arg5: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/yp/cypqudo7s3mxxqr67xllgucvfdztfhpokdm32moa3eed3wmgnjkk.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0xFF800000> : tensor<1x2048xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<1x2048xf32, #blocked> loc(#loc1)
    %c4_i32 = arith.constant 4 : i32 loc(#loc1)
    %c16_i32 = arith.constant 16 : i32 loc(#loc1)
    %c2048_i32 = arith.constant 2048 : i32 loc(#loc1)
    %c8032_i32 = arith.constant 8032 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst_1 = arith.constant dense<8032> : tensor<1x2048xi32, #blocked> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.cmpi slt, %0, %c16_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 2048 : i32, start = 0 : i32} : tensor<2048xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc4)
    %3 = tt.expand_dims %2 {axis = 0 : i32} : tensor<2048xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x2048xi32, #blocked> loc(#loc4)
    %4 = arith.divsi %0, %c4_i32 : i32 loc(#loc5)
    %5 = tt.addptr %arg1, %4 : !tt.ptr<f32>, i32 loc(#loc6)
    %6 = tt.splat %5 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc7)
    %7 = tt.splat %1 : i1 -> tensor<1x1xi1, #blocked> loc(#loc7)
    %8 = tt.load %6, %7 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc7)
    %9 = tt.addptr %arg2, %4 : !tt.ptr<f32>, i32 loc(#loc8)
    %10 = tt.splat %9 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc9)
    %11 = tt.load %10, %7 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc9)
    %12 = arith.muli %0, %c8032_i32 : i32 loc(#loc10)
    %13 = tt.splat %12 : i32 -> tensor<1x2048xi32, #blocked> loc(#loc11)
    %14 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1x2048x!tt.ptr<f32>, #blocked> loc(#loc12)
    %15 = tt.splat %1 : i1 -> tensor<1x2048xi1, #blocked> loc(#loc13)
    %16 = tt.broadcast %8 : tensor<1x1xf32, #blocked> -> tensor<1x2048xf32, #blocked> loc(#loc14)
    %17 = math.log %11 : tensor<1x1xf32, #blocked> loc(#loc15)
    %18 = tt.broadcast %17 : tensor<1x1xf32, #blocked> -> tensor<1x2048xf32, #blocked> loc(#loc16)
    %19 = scf.for %arg6 = %c0_i32 to %c8032_i32 step %c2048_i32 iter_args(%arg7 = %cst) -> (tensor<1x2048xf32, #blocked>)  : i32 {
      %26 = tt.splat %arg6 : i32 -> tensor<1x2048xi32, #blocked> loc(#loc18)
      %27 = arith.addi %26, %3 : tensor<1x2048xi32, #blocked> loc(#loc18)
      %28 = arith.cmpi slt, %27, %cst_1 : tensor<1x2048xi32, #blocked> loc(#loc19)
      %29 = arith.addi %27, %13 : tensor<1x2048xi32, #blocked> loc(#loc11)
      %30 = tt.addptr %14, %29 : tensor<1x2048x!tt.ptr<f32>, #blocked>, tensor<1x2048xi32, #blocked> loc(#loc12)
      %31 = arith.andi %28, %15 : tensor<1x2048xi1, #blocked> loc(#loc13)
      %32 = tt.load %30, %31, %cst_0 evictionPolicy = evict_first : tensor<1x2048x!tt.ptr<f32>, #blocked> loc(#loc20)
      %33 = arith.subf %32, %16 : tensor<1x2048xf32, #blocked> loc(#loc14)
      %34 = arith.subf %33, %18 : tensor<1x2048xf32, #blocked> loc(#loc16)
      %35 = arith.cmpf ogt, %arg7, %34 : tensor<1x2048xf32, #blocked> loc(#loc34)
      %36 = arith.cmpf une, %arg7, %arg7 : tensor<1x2048xf32, #blocked> loc(#loc35)
      %37 = arith.ori %35, %36 : tensor<1x2048xi1, #blocked> loc(#loc36)
      %38 = arith.select %37, %arg7, %34 : tensor<1x2048xi1, #blocked>, tensor<1x2048xf32, #blocked> loc(#loc37)
      %39 = arith.select %31, %38, %arg7 : tensor<1x2048xi1, #blocked>, tensor<1x2048xf32, #blocked> loc(#loc26)
      scf.yield %39 : tensor<1x2048xf32, #blocked> loc(#loc27)
    } loc(#loc17)
    %20 = "tt.reduce"(%19) <{axis = 1 : i32}> ({
    ^bb0(%arg6: f32 loc(callsite(#loc1 at #loc29)), %arg7: f32 loc(callsite(#loc1 at #loc29))):
      %26 = arith.cmpf ogt, %arg6, %arg7 : f32 loc(#loc44)
      %27 = arith.cmpf une, %arg6, %arg6 : f32 loc(#loc45)
      %28 = arith.ori %26, %27 : i1 loc(#loc46)
      %29 = arith.select %28, %arg6, %arg7 : f32 loc(#loc47)
      tt.reduce.return %29 : f32 loc(#loc38)
    }) : (tensor<1x2048xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc38)
    %21 = triton_gpu.convert_layout %20 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc30)
    %22 = tt.expand_dims %21 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<1x1xf32, #blocked1> loc(#loc30)
    %23 = tt.addptr %arg3, %0 : !tt.ptr<f32>, i32 loc(#loc31)
    %24 = tt.splat %23 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc32)
    %25 = tt.splat %1 : i1 -> tensor<1x1xi1, #blocked1> loc(#loc32)
    tt.store %24, %22, %25 : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc32)
    tt.return loc(#loc33)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/yp/cypqudo7s3mxxqr67xllgucvfdztfhpokdm32moa3eed3wmgnjkk.py":22:28)
#loc3 = loc("inductor_cache/yp/cypqudo7s3mxxqr67xllgucvfdztfhpokdm32moa3eed3wmgnjkk.py":24:21)
#loc4 = loc("inductor_cache/yp/cypqudo7s3mxxqr67xllgucvfdztfhpokdm32moa3eed3wmgnjkk.py":25:33)
#loc5 = loc("inductor_cache/yp/cypqudo7s3mxxqr67xllgucvfdztfhpokdm32moa3eed3wmgnjkk.py":27:19)
#loc6 = loc("inductor_cache/yp/cypqudo7s3mxxqr67xllgucvfdztfhpokdm32moa3eed3wmgnjkk.py":28:30)
#loc7 = loc("inductor_cache/yp/cypqudo7s3mxxqr67xllgucvfdztfhpokdm32moa3eed3wmgnjkk.py":28:35)
#loc8 = loc("inductor_cache/yp/cypqudo7s3mxxqr67xllgucvfdztfhpokdm32moa3eed3wmgnjkk.py":29:30)
#loc9 = loc("inductor_cache/yp/cypqudo7s3mxxqr67xllgucvfdztfhpokdm32moa3eed3wmgnjkk.py":29:35)
#loc10 = loc("inductor_cache/yp/cypqudo7s3mxxqr67xllgucvfdztfhpokdm32moa3eed3wmgnjkk.py":35:44)
#loc11 = loc("inductor_cache/yp/cypqudo7s3mxxqr67xllgucvfdztfhpokdm32moa3eed3wmgnjkk.py":35:39)
#loc12 = loc("inductor_cache/yp/cypqudo7s3mxxqr67xllgucvfdztfhpokdm32moa3eed3wmgnjkk.py":35:34)
#loc13 = loc("inductor_cache/yp/cypqudo7s3mxxqr67xllgucvfdztfhpokdm32moa3eed3wmgnjkk.py":35:57)
#loc14 = loc("inductor_cache/yp/cypqudo7s3mxxqr67xllgucvfdztfhpokdm32moa3eed3wmgnjkk.py":36:22)
#loc15 = loc("inductor_cache/yp/cypqudo7s3mxxqr67xllgucvfdztfhpokdm32moa3eed3wmgnjkk.py":37:27)
#loc16 = loc("inductor_cache/yp/cypqudo7s3mxxqr67xllgucvfdztfhpokdm32moa3eed3wmgnjkk.py":38:22)
#loc17 = loc("inductor_cache/yp/cypqudo7s3mxxqr67xllgucvfdztfhpokdm32moa3eed3wmgnjkk.py":31:36)
#loc18 = loc("inductor_cache/yp/cypqudo7s3mxxqr67xllgucvfdztfhpokdm32moa3eed3wmgnjkk.py":32:27)
#loc19 = loc("inductor_cache/yp/cypqudo7s3mxxqr67xllgucvfdztfhpokdm32moa3eed3wmgnjkk.py":33:25)
#loc20 = loc("inductor_cache/yp/cypqudo7s3mxxqr67xllgucvfdztfhpokdm32moa3eed3wmgnjkk.py":35:49)
#loc21 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":118:15)
#loc22 = loc("inductor_cache/yp/cypqudo7s3mxxqr67xllgucvfdztfhpokdm32moa3eed3wmgnjkk.py":42:46)
#loc23 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":120:21)
#loc24 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":120:16)
#loc25 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":121:29)
#loc26 = loc("inductor_cache/yp/cypqudo7s3mxxqr67xllgucvfdztfhpokdm32moa3eed3wmgnjkk.py":43:47)
#loc27 = loc("inductor_cache/yp/cypqudo7s3mxxqr67xllgucvfdztfhpokdm32moa3eed3wmgnjkk.py":43:8)
#loc28 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":131:29)
#loc30 = loc("inductor_cache/yp/cypqudo7s3mxxqr67xllgucvfdztfhpokdm32moa3eed3wmgnjkk.py":44:41)
#loc31 = loc("inductor_cache/yp/cypqudo7s3mxxqr67xllgucvfdztfhpokdm32moa3eed3wmgnjkk.py":45:25)
#loc32 = loc("inductor_cache/yp/cypqudo7s3mxxqr67xllgucvfdztfhpokdm32moa3eed3wmgnjkk.py":45:36)
#loc33 = loc("inductor_cache/yp/cypqudo7s3mxxqr67xllgucvfdztfhpokdm32moa3eed3wmgnjkk.py":45:4)
#loc34 = loc(callsite(#loc21 at #loc22))
#loc35 = loc(callsite(#loc23 at #loc22))
#loc36 = loc(callsite(#loc24 at #loc22))
#loc37 = loc(callsite(#loc25 at #loc22))
#loc38 = loc(callsite(#loc28 at #loc29))
#loc40 = loc(callsite(#loc21 at #loc28))
#loc41 = loc(callsite(#loc23 at #loc28))
#loc42 = loc(callsite(#loc24 at #loc28))
#loc43 = loc(callsite(#loc25 at #loc28))
#loc44 = loc(callsite(#loc40 at #loc29))
#loc45 = loc(callsite(#loc41 at #loc29))
#loc46 = loc(callsite(#loc42 at #loc29))
#loc47 = loc(callsite(#loc43 at #loc29))
