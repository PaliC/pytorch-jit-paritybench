#blocked = #triton_gpu.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [2], order = [0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [2], order = [0]}>
#loc = loc("inductor_cache/6u/c6uekcyvfkzogcnaxlg2s5jejjlva6yhe2mc5x43g2x5u7cl6ibe.py":19:0)
#loc1 = loc(unknown)
#loc17 = loc("inductor_cache/6u/c6uekcyvfkzogcnaxlg2s5jejjlva6yhe2mc5x43g2x5u7cl6ibe.py":40:57)
#loc24 = loc("inductor_cache/6u/c6uekcyvfkzogcnaxlg2s5jejjlva6yhe2mc5x43g2x5u7cl6ibe.py":47:59)
#loc49 = loc(callsite(#loc1 at #loc17))
#loc53 = loc(callsite(#loc1 at #loc24))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 2 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_per_fused__native_batch_norm_legit_convolution_relu_repeat_7(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/6u/c6uekcyvfkzogcnaxlg2s5jejjlva6yhe2mc5x43g2x5u7cl6ibe.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/6u/c6uekcyvfkzogcnaxlg2s5jejjlva6yhe2mc5x43g2x5u7cl6ibe.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/6u/c6uekcyvfkzogcnaxlg2s5jejjlva6yhe2mc5x43g2x5u7cl6ibe.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/6u/c6uekcyvfkzogcnaxlg2s5jejjlva6yhe2mc5x43g2x5u7cl6ibe.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/6u/c6uekcyvfkzogcnaxlg2s5jejjlva6yhe2mc5x43g2x5u7cl6ibe.py":19:0), %arg5: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/6u/c6uekcyvfkzogcnaxlg2s5jejjlva6yhe2mc5x43g2x5u7cl6ibe.py":19:0), %arg6: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/6u/c6uekcyvfkzogcnaxlg2s5jejjlva6yhe2mc5x43g2x5u7cl6ibe.py":19:0), %arg7: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/6u/c6uekcyvfkzogcnaxlg2s5jejjlva6yhe2mc5x43g2x5u7cl6ibe.py":19:0), %arg8: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/6u/c6uekcyvfkzogcnaxlg2s5jejjlva6yhe2mc5x43g2x5u7cl6ibe.py":19:0), %arg9: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/6u/c6uekcyvfkzogcnaxlg2s5jejjlva6yhe2mc5x43g2x5u7cl6ibe.py":19:0), %arg10: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/6u/c6uekcyvfkzogcnaxlg2s5jejjlva6yhe2mc5x43g2x5u7cl6ibe.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant 9.99999974E-6 : f32 loc(#loc1)
    %cst_0 = arith.constant 2.560000e+02 : f32 loc(#loc1)
    %cst_1 = arith.constant 0.000000e+00 : f32 loc(#loc1)
    %c256_i32 = arith.constant 256 : i32 loc(#loc1)
    %c128_i32 = arith.constant 128 : i32 loc(#loc1)
    %cst_2 = arith.constant dense<0.000000e+00> : tensor<256xf32, #blocked> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #blocked> loc(#loc3)
    %2 = arith.remsi %0, %c128_i32 : i32 loc(#loc4)
    %3 = tt.addptr %arg2, %2 : !tt.ptr<f32>, i32 loc(#loc5)
    %4 = tt.splat %3 : !tt.ptr<f32> -> tensor<1x!tt.ptr<f32>, #blocked> loc(#loc5)
    %5 = tt.splat %3 : !tt.ptr<f32> -> tensor<1x!tt.ptr<f32>, #blocked1> loc(#loc5)
    %6 = tt.load %4 evictionPolicy = evict_last : tensor<1x!tt.ptr<f32>, #blocked> loc(#loc6)
    %7 = tt.load %5 evictionPolicy = evict_last : tensor<1x!tt.ptr<f32>, #blocked1> loc(#loc6)
    %8 = tt.addptr %arg3, %2 : !tt.ptr<f32>, i32 loc(#loc7)
    %9 = tt.splat %8 : !tt.ptr<f32> -> tensor<1x!tt.ptr<f32>, #blocked> loc(#loc7)
    %10 = tt.splat %8 : !tt.ptr<f32> -> tensor<1x!tt.ptr<f32>, #blocked1> loc(#loc7)
    %11 = tt.load %9 evictionPolicy = evict_last : tensor<1x!tt.ptr<f32>, #blocked> loc(#loc8)
    %12 = tt.load %10 evictionPolicy = evict_last : tensor<1x!tt.ptr<f32>, #blocked1> loc(#loc8)
    %13 = arith.muli %0, %c256_i32 : i32 loc(#loc9)
    %14 = tt.splat %13 : i32 -> tensor<256xi32, #blocked> loc(#loc10)
    %15 = arith.addi %1, %14 : tensor<256xi32, #blocked> loc(#loc10)
    %16 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc11)
    %17 = tt.addptr %16, %15 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc11)
    %18 = tt.load %17 : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc12)
    %19 = tt.addptr %arg4, %2 : !tt.ptr<f32>, i32 loc(#loc13)
    %20 = tt.splat %19 : !tt.ptr<f32> -> tensor<1x!tt.ptr<f32>, #blocked> loc(#loc13)
    %21 = tt.load %20 evictionPolicy = evict_last : tensor<1x!tt.ptr<f32>, #blocked> loc(#loc14)
    %22 = tt.broadcast %21 : tensor<1xf32, #blocked> -> tensor<256xf32, #blocked> loc(#loc15)
    %23 = arith.addf %18, %22 : tensor<256xf32, #blocked> loc(#loc15)
    %24 = "tt.reduce"(%23) <{axis = 0 : i32}> ({
    ^bb0(%arg11: f32 loc(callsite(#loc1 at #loc17)), %arg12: f32 loc(callsite(#loc1 at #loc17))):
      %55 = arith.addf %arg11, %arg12 : f32 loc(#loc57)
      tt.reduce.return %55 : f32 loc(#loc48)
    }) : (tensor<256xf32, #blocked>) -> f32 loc(#loc48)
    %25 = arith.addf %24, %cst_1 : f32 loc(#loc51)
    %26 = arith.divf %25, %cst_0 : f32 loc(#loc21)
    %27 = tt.splat %26 : f32 -> tensor<1xf32, #blocked1> loc(#loc21)
    %28 = tt.splat %26 : f32 -> tensor<256xf32, #blocked> loc(#loc22)
    %29 = arith.subf %23, %28 : tensor<256xf32, #blocked> loc(#loc22)
    %30 = arith.mulf %29, %29 : tensor<256xf32, #blocked> loc(#loc23)
    %31 = "tt.reduce"(%30) <{axis = 0 : i32}> ({
    ^bb0(%arg11: f32 loc(callsite(#loc1 at #loc24)), %arg12: f32 loc(callsite(#loc1 at #loc24))):
      %55 = arith.addf %arg11, %arg12 : f32 loc(#loc58)
      tt.reduce.return %55 : f32 loc(#loc52)
    }) : (tensor<256xf32, #blocked>) -> f32 loc(#loc52)
    %32 = arith.addf %31, %cst_1 : f32 loc(#loc54)
    %33 = arith.divf %32, %cst_0 : f32 loc(#loc26)
    %34 = arith.addf %33, %cst : f32 loc(#loc27)
    %35 = tt.extern_elementwise %34 {libname = "", libpath = "", pure = true, symbol = "__nv_rsqrtf"} : (f32) -> f32 loc(#loc28)
    %36 = tt.splat %35 : f32 -> tensor<1xf32, #blocked1> loc(#loc28)
    %37 = tt.splat %35 : f32 -> tensor<256xf32, #blocked> loc(#loc29)
    %38 = arith.mulf %29, %37 : tensor<256xf32, #blocked> loc(#loc29)
    %39 = tt.broadcast %6 : tensor<1xf32, #blocked> -> tensor<256xf32, #blocked> loc(#loc30)
    %40 = arith.mulf %38, %39 : tensor<256xf32, #blocked> loc(#loc30)
    %41 = tt.broadcast %11 : tensor<1xf32, #blocked> -> tensor<256xf32, #blocked> loc(#loc31)
    %42 = arith.addf %40, %41 : tensor<256xf32, #blocked> loc(#loc31)
    %43 = arith.cmpf ogt, %cst_2, %42 : tensor<256xf32, #blocked> loc(#loc55)
    %44 = arith.select %43, %cst_2, %42 : tensor<256xi1, #blocked>, tensor<256xf32, #blocked> loc(#loc56)
    %45 = tt.addptr %arg5, %0 : !tt.ptr<f32>, i32 loc(#loc35)
    %46 = tt.splat %45 : !tt.ptr<f32> -> tensor<1x!tt.ptr<f32>, #blocked1> loc(#loc35)
    tt.store %46, %7 : tensor<1x!tt.ptr<f32>, #blocked1> loc(#loc36)
    %47 = tt.addptr %arg6, %0 : !tt.ptr<f32>, i32 loc(#loc37)
    %48 = tt.splat %47 : !tt.ptr<f32> -> tensor<1x!tt.ptr<f32>, #blocked1> loc(#loc37)
    tt.store %48, %12 : tensor<1x!tt.ptr<f32>, #blocked1> loc(#loc38)
    tt.store %17, %23 : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc39)
    gpu.barrier loc(#loc40)
    %49 = tt.addptr %arg1, %0 : !tt.ptr<f32>, i32 loc(#loc41)
    %50 = tt.splat %49 : !tt.ptr<f32> -> tensor<1x!tt.ptr<f32>, #blocked1> loc(#loc41)
    tt.store %50, %36 : tensor<1x!tt.ptr<f32>, #blocked1> loc(#loc42)
    %51 = tt.splat %arg8 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc43)
    %52 = tt.addptr %51, %15 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc43)
    tt.store %52, %44 : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc44)
    %53 = tt.addptr %arg7, %0 : !tt.ptr<f32>, i32 loc(#loc45)
    %54 = tt.splat %53 : !tt.ptr<f32> -> tensor<1x!tt.ptr<f32>, #blocked1> loc(#loc45)
    tt.store %54, %27 : tensor<1x!tt.ptr<f32>, #blocked1> loc(#loc46)
    tt.return loc(#loc47)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/6u/c6uekcyvfkzogcnaxlg2s5jejjlva6yhe2mc5x43g2x5u7cl6ibe.py":24:28)
#loc3 = loc("inductor_cache/6u/c6uekcyvfkzogcnaxlg2s5jejjlva6yhe2mc5x43g2x5u7cl6ibe.py":27:26)
#loc4 = loc("inductor_cache/6u/c6uekcyvfkzogcnaxlg2s5jejjlva6yhe2mc5x43g2x5u7cl6ibe.py":32:19)
#loc5 = loc("inductor_cache/6u/c6uekcyvfkzogcnaxlg2s5jejjlva6yhe2mc5x43g2x5u7cl6ibe.py":33:31)
#loc6 = loc("inductor_cache/6u/c6uekcyvfkzogcnaxlg2s5jejjlva6yhe2mc5x43g2x5u7cl6ibe.py":33:43)
#loc7 = loc("inductor_cache/6u/c6uekcyvfkzogcnaxlg2s5jejjlva6yhe2mc5x43g2x5u7cl6ibe.py":34:31)
#loc8 = loc("inductor_cache/6u/c6uekcyvfkzogcnaxlg2s5jejjlva6yhe2mc5x43g2x5u7cl6ibe.py":34:43)
#loc9 = loc("inductor_cache/6u/c6uekcyvfkzogcnaxlg2s5jejjlva6yhe2mc5x43g2x5u7cl6ibe.py":35:43)
#loc10 = loc("inductor_cache/6u/c6uekcyvfkzogcnaxlg2s5jejjlva6yhe2mc5x43g2x5u7cl6ibe.py":35:39)
#loc11 = loc("inductor_cache/6u/c6uekcyvfkzogcnaxlg2s5jejjlva6yhe2mc5x43g2x5u7cl6ibe.py":35:34)
#loc12 = loc("inductor_cache/6u/c6uekcyvfkzogcnaxlg2s5jejjlva6yhe2mc5x43g2x5u7cl6ibe.py":35:48)
#loc13 = loc("inductor_cache/6u/c6uekcyvfkzogcnaxlg2s5jejjlva6yhe2mc5x43g2x5u7cl6ibe.py":36:30)
#loc14 = loc("inductor_cache/6u/c6uekcyvfkzogcnaxlg2s5jejjlva6yhe2mc5x43g2x5u7cl6ibe.py":36:35)
#loc15 = loc("inductor_cache/6u/c6uekcyvfkzogcnaxlg2s5jejjlva6yhe2mc5x43g2x5u7cl6ibe.py":37:18)
#loc16 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc18 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc19 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":73:15)
#loc20 = loc("inductor_cache/6u/c6uekcyvfkzogcnaxlg2s5jejjlva6yhe2mc5x43g2x5u7cl6ibe.py":40:44)
#loc21 = loc("inductor_cache/6u/c6uekcyvfkzogcnaxlg2s5jejjlva6yhe2mc5x43g2x5u7cl6ibe.py":43:19)
#loc22 = loc("inductor_cache/6u/c6uekcyvfkzogcnaxlg2s5jejjlva6yhe2mc5x43g2x5u7cl6ibe.py":44:19)
#loc23 = loc("inductor_cache/6u/c6uekcyvfkzogcnaxlg2s5jejjlva6yhe2mc5x43g2x5u7cl6ibe.py":45:20)
#loc25 = loc("inductor_cache/6u/c6uekcyvfkzogcnaxlg2s5jejjlva6yhe2mc5x43g2x5u7cl6ibe.py":47:45)
#loc26 = loc("inductor_cache/6u/c6uekcyvfkzogcnaxlg2s5jejjlva6yhe2mc5x43g2x5u7cl6ibe.py":49:20)
#loc27 = loc("inductor_cache/6u/c6uekcyvfkzogcnaxlg2s5jejjlva6yhe2mc5x43g2x5u7cl6ibe.py":51:20)
#loc28 = loc("inductor_cache/6u/c6uekcyvfkzogcnaxlg2s5jejjlva6yhe2mc5x43g2x5u7cl6ibe.py":52:28)
#loc29 = loc("inductor_cache/6u/c6uekcyvfkzogcnaxlg2s5jejjlva6yhe2mc5x43g2x5u7cl6ibe.py":54:20)
#loc30 = loc("inductor_cache/6u/c6uekcyvfkzogcnaxlg2s5jejjlva6yhe2mc5x43g2x5u7cl6ibe.py":55:20)
#loc31 = loc("inductor_cache/6u/c6uekcyvfkzogcnaxlg2s5jejjlva6yhe2mc5x43g2x5u7cl6ibe.py":56:20)
#loc32 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":118:15)
#loc33 = loc("inductor_cache/6u/c6uekcyvfkzogcnaxlg2s5jejjlva6yhe2mc5x43g2x5u7cl6ibe.py":58:42)
#loc34 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":121:29)
#loc35 = loc("inductor_cache/6u/c6uekcyvfkzogcnaxlg2s5jejjlva6yhe2mc5x43g2x5u7cl6ibe.py":59:25)
#loc36 = loc("inductor_cache/6u/c6uekcyvfkzogcnaxlg2s5jejjlva6yhe2mc5x43g2x5u7cl6ibe.py":59:36)
#loc37 = loc("inductor_cache/6u/c6uekcyvfkzogcnaxlg2s5jejjlva6yhe2mc5x43g2x5u7cl6ibe.py":60:25)
#loc38 = loc("inductor_cache/6u/c6uekcyvfkzogcnaxlg2s5jejjlva6yhe2mc5x43g2x5u7cl6ibe.py":60:36)
#loc39 = loc("inductor_cache/6u/c6uekcyvfkzogcnaxlg2s5jejjlva6yhe2mc5x43g2x5u7cl6ibe.py":61:48)
#loc40 = loc("inductor_cache/6u/c6uekcyvfkzogcnaxlg2s5jejjlva6yhe2mc5x43g2x5u7cl6ibe.py":62:4)
#loc41 = loc("inductor_cache/6u/c6uekcyvfkzogcnaxlg2s5jejjlva6yhe2mc5x43g2x5u7cl6ibe.py":63:28)
#loc42 = loc("inductor_cache/6u/c6uekcyvfkzogcnaxlg2s5jejjlva6yhe2mc5x43g2x5u7cl6ibe.py":63:40)
#loc43 = loc("inductor_cache/6u/c6uekcyvfkzogcnaxlg2s5jejjlva6yhe2mc5x43g2x5u7cl6ibe.py":64:25)
#loc44 = loc("inductor_cache/6u/c6uekcyvfkzogcnaxlg2s5jejjlva6yhe2mc5x43g2x5u7cl6ibe.py":64:46)
#loc45 = loc("inductor_cache/6u/c6uekcyvfkzogcnaxlg2s5jejjlva6yhe2mc5x43g2x5u7cl6ibe.py":65:25)
#loc46 = loc("inductor_cache/6u/c6uekcyvfkzogcnaxlg2s5jejjlva6yhe2mc5x43g2x5u7cl6ibe.py":65:37)
#loc47 = loc("inductor_cache/6u/c6uekcyvfkzogcnaxlg2s5jejjlva6yhe2mc5x43g2x5u7cl6ibe.py":65:4)
#loc48 = loc(callsite(#loc16 at #loc17))
#loc50 = loc(callsite(#loc18 at #loc16))
#loc51 = loc(callsite(#loc19 at #loc20))
#loc52 = loc(callsite(#loc16 at #loc24))
#loc54 = loc(callsite(#loc19 at #loc25))
#loc55 = loc(callsite(#loc32 at #loc33))
#loc56 = loc(callsite(#loc34 at #loc33))
#loc57 = loc(callsite(#loc50 at #loc17))
#loc58 = loc(callsite(#loc50 at #loc24))
