; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_60(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 10, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 1020, !dbg !12
  %11 = and i32 %8, 255, !dbg !12
  %12 = or disjoint i32 %11, 256, !dbg !12
  %13 = or disjoint i32 %11, 512, !dbg !12
  %14 = or disjoint i32 %11, 768, !dbg !12
  %15 = or disjoint i32 %7, %10, !dbg !13
  %16 = or disjoint i32 %7, %11, !dbg !13
  %17 = or disjoint i32 %7, %12, !dbg !13
  %18 = or disjoint i32 %7, %13, !dbg !13
  %19 = or disjoint i32 %7, %14, !dbg !13
  %20 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %21 = shl i32 %20, 2, !dbg !15
  %22 = or disjoint i32 %21, 1, !dbg !16
  %23 = or disjoint i32 %21, 2, !dbg !16
  %24 = or disjoint i32 %21, 3, !dbg !16
  %25 = icmp slt i32 %21, 4, !dbg !17
  %26 = icmp slt i32 %22, 4, !dbg !17
  %27 = icmp slt i32 %23, 4, !dbg !17
  %28 = icmp slt i32 %24, 4, !dbg !17
  %.frozen = freeze i32 %15, !dbg !18
  %29 = sdiv i32 %.frozen, 512, !dbg !18
  %30 = mul i32 %29, 512, !dbg !19
  %.decomposed = sub i32 %.frozen, %30, !dbg !19
  %31 = shl i32 %22, 9, !dbg !20
  %32 = shl i32 %23, 9, !dbg !20
  %33 = shl i32 %24, 9, !dbg !20
  %34 = shl i32 %29, 11, !dbg !21
  %35 = add i32 %34, %.decomposed, !dbg !22
  %36 = add i32 %29, %20, !dbg !23
  %37 = shl i32 %36, 11, !dbg !23
  %38 = add i32 %37, %.decomposed, !dbg !23
  %39 = add i32 %35, %31, !dbg !23
  %40 = add i32 %35, %32, !dbg !23
  %41 = add i32 %35, %33, !dbg !23
  %42 = sext i32 %38 to i64, !dbg !24
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !24
  %44 = sext i32 %39 to i64, !dbg !24
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !24
  %46 = sext i32 %40 to i64, !dbg !24
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !24
  %48 = sext i32 %41 to i64, !dbg !24
  %49 = getelementptr float, ptr addrspace(1) %0, i64 %48, !dbg !24
  %50 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %43, i1 %25) #2, !dbg !25
  %51 = extractvalue { i32, i32, i32, i32 } %50, 0, !dbg !25
  %52 = extractvalue { i32, i32, i32, i32 } %50, 1, !dbg !25
  %53 = extractvalue { i32, i32, i32, i32 } %50, 2, !dbg !25
  %54 = extractvalue { i32, i32, i32, i32 } %50, 3, !dbg !25
  %55 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %45, i1 %26) #2, !dbg !25
  %56 = extractvalue { i32, i32, i32, i32 } %55, 0, !dbg !25
  %57 = extractvalue { i32, i32, i32, i32 } %55, 1, !dbg !25
  %58 = extractvalue { i32, i32, i32, i32 } %55, 2, !dbg !25
  %59 = extractvalue { i32, i32, i32, i32 } %55, 3, !dbg !25
  %60 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %47, i1 %27) #2, !dbg !25
  %61 = extractvalue { i32, i32, i32, i32 } %60, 0, !dbg !25
  %62 = extractvalue { i32, i32, i32, i32 } %60, 1, !dbg !25
  %63 = extractvalue { i32, i32, i32, i32 } %60, 2, !dbg !25
  %64 = extractvalue { i32, i32, i32, i32 } %60, 3, !dbg !25
  %65 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %49, i1 %28) #2, !dbg !25
  %66 = extractvalue { i32, i32, i32, i32 } %65, 0, !dbg !25
  %67 = extractvalue { i32, i32, i32, i32 } %65, 1, !dbg !25
  %68 = extractvalue { i32, i32, i32, i32 } %65, 2, !dbg !25
  %69 = extractvalue { i32, i32, i32, i32 } %65, 3, !dbg !25
  %70 = add i32 %16, %20, !dbg !26
  %71 = shl i32 %70, 2, !dbg !26
  %72 = add i32 %17, %20, !dbg !26
  %73 = shl i32 %72, 2, !dbg !26
  %74 = add i32 %18, %20, !dbg !26
  %75 = shl i32 %74, 2, !dbg !26
  %76 = add i32 %19, %20, !dbg !26
  %77 = shl i32 %76, 2, !dbg !26
  %78 = sext i32 %71 to i64, !dbg !27
  %79 = getelementptr float, ptr addrspace(1) %1, i64 %78, !dbg !27
  %80 = sext i32 %73 to i64, !dbg !27
  %81 = getelementptr float, ptr addrspace(1) %1, i64 %80, !dbg !27
  %82 = sext i32 %75 to i64, !dbg !27
  %83 = getelementptr float, ptr addrspace(1) %1, i64 %82, !dbg !27
  %84 = sext i32 %77 to i64, !dbg !27
  %85 = getelementptr float, ptr addrspace(1) %1, i64 %84, !dbg !27
  %86 = shl i32 %8, 4, !dbg !28
  %87 = and i32 %86, 4080, !dbg !28
  %88 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %87, !dbg !28
  %89 = getelementptr float, ptr addrspace(3) %88, i32 %87, !dbg !28
  %90 = insertelement <1 x i32> poison, i32 %51, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %89, <1 x i32> %90, i1 true) #2, !dbg !28
  %91 = or disjoint i32 %87, 4, !dbg !28
  %92 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %91, !dbg !28
  %93 = getelementptr float, ptr addrspace(3) %92, i32 %91, !dbg !28
  %94 = insertelement <1 x i32> poison, i32 %52, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %93, <1 x i32> %94, i1 true) #2, !dbg !28
  %95 = or disjoint i32 %87, 8, !dbg !28
  %96 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %95, !dbg !28
  %97 = getelementptr float, ptr addrspace(3) %96, i32 %95, !dbg !28
  %98 = insertelement <1 x i32> poison, i32 %53, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %97, <1 x i32> %98, i1 true) #2, !dbg !28
  %99 = or disjoint i32 %87, 12, !dbg !28
  %100 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %99, !dbg !28
  %101 = getelementptr float, ptr addrspace(3) %100, i32 %99, !dbg !28
  %102 = insertelement <1 x i32> poison, i32 %54, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %101, <1 x i32> %102, i1 true) #2, !dbg !28
  %103 = or disjoint i32 %87, 1, !dbg !28
  %104 = getelementptr float, ptr addrspace(3) %88, i32 %103, !dbg !28
  %105 = insertelement <1 x i32> poison, i32 %56, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %104, <1 x i32> %105, i1 true) #2, !dbg !28
  %106 = or disjoint i32 %87, 5, !dbg !28
  %107 = lshr i32 %106, 2, !dbg !28
  %108 = getelementptr float, ptr addrspace(3) @global_smem, i32 %107, !dbg !28
  %109 = getelementptr float, ptr addrspace(3) %108, i32 %106, !dbg !28
  %110 = insertelement <1 x i32> poison, i32 %57, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %109, <1 x i32> %110, i1 true) #2, !dbg !28
  %111 = or disjoint i32 %87, 9, !dbg !28
  %112 = lshr i32 %111, 2, !dbg !28
  %113 = getelementptr float, ptr addrspace(3) @global_smem, i32 %112, !dbg !28
  %114 = getelementptr float, ptr addrspace(3) %113, i32 %111, !dbg !28
  %115 = insertelement <1 x i32> poison, i32 %58, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %114, <1 x i32> %115, i1 true) #2, !dbg !28
  %116 = or disjoint i32 %87, 13, !dbg !28
  %117 = lshr i32 %116, 2, !dbg !28
  %118 = getelementptr float, ptr addrspace(3) @global_smem, i32 %117, !dbg !28
  %119 = getelementptr float, ptr addrspace(3) %118, i32 %116, !dbg !28
  %120 = insertelement <1 x i32> poison, i32 %59, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %119, <1 x i32> %120, i1 true) #2, !dbg !28
  %121 = or disjoint i32 %87, 2, !dbg !28
  %122 = getelementptr float, ptr addrspace(3) %88, i32 %121, !dbg !28
  %123 = insertelement <1 x i32> poison, i32 %61, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %122, <1 x i32> %123, i1 true) #2, !dbg !28
  %124 = or disjoint i32 %87, 6, !dbg !28
  %125 = lshr i32 %124, 2, !dbg !28
  %126 = getelementptr float, ptr addrspace(3) @global_smem, i32 %125, !dbg !28
  %127 = getelementptr float, ptr addrspace(3) %126, i32 %124, !dbg !28
  %128 = insertelement <1 x i32> poison, i32 %62, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %127, <1 x i32> %128, i1 true) #2, !dbg !28
  %129 = or disjoint i32 %87, 10, !dbg !28
  %130 = lshr i32 %129, 2, !dbg !28
  %131 = getelementptr float, ptr addrspace(3) @global_smem, i32 %130, !dbg !28
  %132 = getelementptr float, ptr addrspace(3) %131, i32 %129, !dbg !28
  %133 = insertelement <1 x i32> poison, i32 %63, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %132, <1 x i32> %133, i1 true) #2, !dbg !28
  %134 = or disjoint i32 %87, 14, !dbg !28
  %135 = lshr i32 %134, 2, !dbg !28
  %136 = getelementptr float, ptr addrspace(3) @global_smem, i32 %135, !dbg !28
  %137 = getelementptr float, ptr addrspace(3) %136, i32 %134, !dbg !28
  %138 = insertelement <1 x i32> poison, i32 %64, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %137, <1 x i32> %138, i1 true) #2, !dbg !28
  %139 = or disjoint i32 %87, 3, !dbg !28
  %140 = getelementptr float, ptr addrspace(3) %88, i32 %139, !dbg !28
  %141 = insertelement <1 x i32> poison, i32 %66, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %140, <1 x i32> %141, i1 true) #2, !dbg !28
  %142 = or disjoint i32 %87, 7, !dbg !28
  %143 = lshr i32 %142, 2, !dbg !28
  %144 = getelementptr float, ptr addrspace(3) @global_smem, i32 %143, !dbg !28
  %145 = getelementptr float, ptr addrspace(3) %144, i32 %142, !dbg !28
  %146 = insertelement <1 x i32> poison, i32 %67, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %145, <1 x i32> %146, i1 true) #2, !dbg !28
  %147 = or disjoint i32 %87, 11, !dbg !28
  %148 = lshr i32 %147, 2, !dbg !28
  %149 = getelementptr float, ptr addrspace(3) @global_smem, i32 %148, !dbg !28
  %150 = getelementptr float, ptr addrspace(3) %149, i32 %147, !dbg !28
  %151 = insertelement <1 x i32> poison, i32 %68, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %150, <1 x i32> %151, i1 true) #2, !dbg !28
  %152 = or disjoint i32 %87, 15, !dbg !28
  %153 = lshr i32 %152, 2, !dbg !28
  %154 = getelementptr float, ptr addrspace(3) @global_smem, i32 %153, !dbg !28
  %155 = getelementptr float, ptr addrspace(3) %154, i32 %152, !dbg !28
  %156 = insertelement <1 x i32> poison, i32 %69, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %155, <1 x i32> %156, i1 true) #2, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %157 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %10, !dbg !28
  %158 = getelementptr inbounds float, ptr addrspace(3) %157, i32 %10, !dbg !28
  %159 = load i32, ptr addrspace(3) %158, align 4, !dbg !28
  %160 = or disjoint i32 %10, 1, !dbg !28
  %161 = getelementptr inbounds float, ptr addrspace(3) %157, i32 %160, !dbg !28
  %162 = load i32, ptr addrspace(3) %161, align 4, !dbg !28
  %163 = or disjoint i32 %10, 2, !dbg !28
  %164 = getelementptr inbounds float, ptr addrspace(3) %157, i32 %163, !dbg !28
  %165 = load i32, ptr addrspace(3) %164, align 4, !dbg !28
  %166 = or disjoint i32 %10, 3, !dbg !28
  %167 = getelementptr inbounds float, ptr addrspace(3) %157, i32 %166, !dbg !28
  %168 = load i32, ptr addrspace(3) %167, align 4, !dbg !28
  %169 = or disjoint i32 %10, 1024, !dbg !28
  %170 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %169, !dbg !28
  %171 = getelementptr inbounds float, ptr addrspace(3) %170, i32 %169, !dbg !28
  %172 = load i32, ptr addrspace(3) %171, align 4, !dbg !28
  %173 = or disjoint i32 %10, 1025, !dbg !28
  %174 = lshr i32 %173, 2, !dbg !28
  %175 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %174, !dbg !28
  %176 = getelementptr inbounds float, ptr addrspace(3) %175, i32 %173, !dbg !28
  %177 = load i32, ptr addrspace(3) %176, align 4, !dbg !28
  %178 = or disjoint i32 %10, 1026, !dbg !28
  %179 = lshr i32 %178, 2, !dbg !28
  %180 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %179, !dbg !28
  %181 = getelementptr inbounds float, ptr addrspace(3) %180, i32 %178, !dbg !28
  %182 = load i32, ptr addrspace(3) %181, align 4, !dbg !28
  %183 = or disjoint i32 %10, 1027, !dbg !28
  %184 = lshr i32 %183, 2, !dbg !28
  %185 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %184, !dbg !28
  %186 = getelementptr inbounds float, ptr addrspace(3) %185, i32 %183, !dbg !28
  %187 = load i32, ptr addrspace(3) %186, align 4, !dbg !28
  %188 = or disjoint i32 %10, 2048, !dbg !28
  %189 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %188, !dbg !28
  %190 = getelementptr inbounds float, ptr addrspace(3) %189, i32 %188, !dbg !28
  %191 = load i32, ptr addrspace(3) %190, align 4, !dbg !28
  %192 = or disjoint i32 %10, 2049, !dbg !28
  %193 = lshr i32 %192, 2, !dbg !28
  %194 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %193, !dbg !28
  %195 = getelementptr inbounds float, ptr addrspace(3) %194, i32 %192, !dbg !28
  %196 = load i32, ptr addrspace(3) %195, align 4, !dbg !28
  %197 = or disjoint i32 %10, 2050, !dbg !28
  %198 = lshr i32 %197, 2, !dbg !28
  %199 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %198, !dbg !28
  %200 = getelementptr inbounds float, ptr addrspace(3) %199, i32 %197, !dbg !28
  %201 = load i32, ptr addrspace(3) %200, align 4, !dbg !28
  %202 = or disjoint i32 %10, 2051, !dbg !28
  %203 = lshr i32 %202, 2, !dbg !28
  %204 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %203, !dbg !28
  %205 = getelementptr inbounds float, ptr addrspace(3) %204, i32 %202, !dbg !28
  %206 = load i32, ptr addrspace(3) %205, align 4, !dbg !28
  %207 = or disjoint i32 %10, 3072, !dbg !28
  %208 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %207, !dbg !28
  %209 = getelementptr inbounds float, ptr addrspace(3) %208, i32 %207, !dbg !28
  %210 = load i32, ptr addrspace(3) %209, align 4, !dbg !28
  %211 = or disjoint i32 %10, 3073, !dbg !28
  %212 = lshr i32 %211, 2, !dbg !28
  %213 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %212, !dbg !28
  %214 = getelementptr inbounds float, ptr addrspace(3) %213, i32 %211, !dbg !28
  %215 = load i32, ptr addrspace(3) %214, align 4, !dbg !28
  %216 = or disjoint i32 %10, 3074, !dbg !28
  %217 = lshr i32 %216, 2, !dbg !28
  %218 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %217, !dbg !28
  %219 = getelementptr inbounds float, ptr addrspace(3) %218, i32 %216, !dbg !28
  %220 = load i32, ptr addrspace(3) %219, align 4, !dbg !28
  %221 = or disjoint i32 %10, 3075, !dbg !28
  %222 = lshr i32 %221, 2, !dbg !28
  %223 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %222, !dbg !28
  %224 = getelementptr inbounds float, ptr addrspace(3) %223, i32 %221, !dbg !28
  %225 = load i32, ptr addrspace(3) %224, align 4, !dbg !28
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %159, i32 %162, i32 %165, i32 %168, ptr addrspace(1) %79, i1 %25) #2, !dbg !28
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %172, i32 %177, i32 %182, i32 %187, ptr addrspace(1) %81, i1 %25) #2, !dbg !28
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %191, i32 %196, i32 %201, i32 %206, ptr addrspace(1) %83, i1 %25) #2, !dbg !28
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %210, i32 %215, i32 %220, i32 %225, ptr addrspace(1) %85, i1 %25) #2, !dbg !28
  %226 = getelementptr float, ptr addrspace(1) %2, i64 %78, !dbg !29
  %227 = getelementptr float, ptr addrspace(1) %2, i64 %80, !dbg !29
  %228 = getelementptr float, ptr addrspace(1) %2, i64 %82, !dbg !29
  %229 = getelementptr float, ptr addrspace(1) %2, i64 %84, !dbg !29
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %159, i32 %162, i32 %165, i32 %168, ptr addrspace(1) %226, i1 %25) #2, !dbg !30
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %172, i32 %177, i32 %182, i32 %187, ptr addrspace(1) %227, i1 %25) #2, !dbg !30
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %191, i32 %196, i32 %201, i32 %206, ptr addrspace(1) %228, i1 %25) #2, !dbg !30
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %210, i32 %215, i32 %220, i32 %225, ptr addrspace(1) %229, i1 %25) #2, !dbg !30
  ret void, !dbg !31
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "clfcgfzrbi6fahqmeq7wveblsgutgsyqr6qksyelrrjzgmwc3cza.py", directory: "inductor_cache/lf")
!4 = !{ptr @triton_poi_fused_convolution_60, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_60, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_60", linkageName: "triton_poi_fused_convolution_60", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 23, scope: !7)
!17 = !DILocation(line: 27, column: 21, scope: !7)
!18 = !DILocation(line: 30, column: 19, scope: !7)
!19 = !DILocation(line: 29, column: 19, scope: !7)
!20 = !DILocation(line: 32, column: 39, scope: !7)
!21 = !DILocation(line: 32, column: 49, scope: !7)
!22 = !DILocation(line: 32, column: 35, scope: !7)
!23 = !DILocation(line: 32, column: 44, scope: !7)
!24 = !DILocation(line: 32, column: 30, scope: !7)
!25 = !DILocation(line: 32, column: 54, scope: !7)
!26 = !DILocation(line: 33, column: 30, scope: !7)
!27 = !DILocation(line: 33, column: 25, scope: !7)
!28 = !DILocation(line: 33, column: 43, scope: !7)
!29 = !DILocation(line: 34, column: 25, scope: !7)
!30 = !DILocation(line: 34, column: 43, scope: !7)
!31 = !DILocation(line: 34, column: 4, scope: !7)
