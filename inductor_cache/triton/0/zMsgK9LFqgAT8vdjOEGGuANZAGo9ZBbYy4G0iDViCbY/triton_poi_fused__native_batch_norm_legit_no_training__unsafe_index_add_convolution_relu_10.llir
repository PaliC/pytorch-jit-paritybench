; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_convolution_relu_10(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, i32 %14) local_unnamed_addr !dbg !7 {
  %16 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %17 = shl i32 %16, 8, !dbg !11
  %18 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %19 = shl i32 %18, 1, !dbg !12
  %20 = and i32 %19, 254, !dbg !12
  %21 = or disjoint i32 %17, %20, !dbg !13
  %22 = sdiv i32 %21, 256, !dbg !14
  %23 = srem i32 %22, 16, !dbg !15
  %.frozen = freeze i32 %21, !dbg !16
  %24 = sdiv i32 %.frozen, 16, !dbg !16
  %25 = srem i32 %24, 16, !dbg !17
  %26 = mul i32 %24, 16, !dbg !18
  %.decomposed = sub i32 %.frozen, %26, !dbg !18
  %27 = sext i32 %21 to i64, !dbg !19
  %28 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !19
  %29 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %28, i1 true) #3, !dbg !20
  %30 = sext i32 %23 to i64, !dbg !21
  %31 = getelementptr float, ptr addrspace(1) %1, i64 %30, !dbg !21
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 true) #3, !dbg !22
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 true) #3, !dbg !22
  %34 = getelementptr float, ptr addrspace(1) %2, i64 %30, !dbg !23
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #3, !dbg !24
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #3, !dbg !24
  %37 = getelementptr float, ptr addrspace(1) %3, i64 %30, !dbg !25
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 true) #3, !dbg !26
  %39 = bitcast i32 %38 to float, !dbg !26
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 true) #3, !dbg !26
  %41 = bitcast i32 %40 to float, !dbg !26
  %42 = getelementptr float, ptr addrspace(1) %4, i64 %30, !dbg !27
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 true) #3, !dbg !28
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 true) #3, !dbg !28
  %45 = getelementptr float, ptr addrspace(1) %5, i64 %30, !dbg !29
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 true) #3, !dbg !30
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 true) #3, !dbg !30
  %48 = sext i32 %25 to i64, !dbg !31
  %49 = getelementptr i64, ptr addrspace(1) %6, i64 %48, !dbg !31
  %50 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %49, i1 true) #3, !dbg !32
  %51 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %49, i1 true) #3, !dbg !32
  %52 = sext i32 %.decomposed to i64, !dbg !33
  %53 = getelementptr i64, ptr addrspace(1) %6, i64 %52, !dbg !33
  %54 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %53, i1 true) #3, !dbg !34
  %55 = extractvalue { i64, i64 } %54, 0, !dbg !34
  %56 = extractvalue { i64, i64 } %54, 1, !dbg !34
  %57 = getelementptr float, ptr addrspace(1) %8, i64 %30, !dbg !35
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 true) #3, !dbg !36
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 true) #3, !dbg !36
  %60 = getelementptr float, ptr addrspace(1) %9, i64 %30, !dbg !37
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 true) #3, !dbg !38
  %62 = bitcast i32 %61 to float, !dbg !38
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 true) #3, !dbg !38
  %64 = bitcast i32 %63 to float, !dbg !38
  %65 = getelementptr float, ptr addrspace(1) %10, i64 %30, !dbg !39
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 true) #3, !dbg !40
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 true) #3, !dbg !40
  %68 = getelementptr float, ptr addrspace(1) %11, i64 %30, !dbg !41
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 true) #3, !dbg !42
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 true) #3, !dbg !42
  %71 = fadd float %39, 0x3EE4F8B580000000, !dbg !43
  %72 = fadd float %41, 0x3EE4F8B580000000, !dbg !43
  %73 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !44
  %.not.i = icmp eq i32 %73, 0, !dbg !44
  %74 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !44
  %.not1.i = icmp eq i32 %74, 0, !dbg !44
  br i1 %.not.i, label %80, label %75, !dbg !44

75:                                               ; preds = %15
  br i1 %.not1.i, label %78, label %76, !dbg !44

76:                                               ; preds = %75
  %77 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %71) #3, !dbg !44
  br label %__nv_sqrtf.exit, !dbg !44

78:                                               ; preds = %75
  %79 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %71) #3, !dbg !44
  br label %__nv_sqrtf.exit, !dbg !44

80:                                               ; preds = %15
  br i1 %.not1.i, label %83, label %81, !dbg !44

81:                                               ; preds = %80
  %82 = tail call float @llvm.nvvm.sqrt.rn.f(float %71) #3, !dbg !44
  br label %__nv_sqrtf.exit, !dbg !44

83:                                               ; preds = %80
  %84 = tail call float @llvm.nvvm.sqrt.approx.f(float %71) #3, !dbg !44
  br label %__nv_sqrtf.exit, !dbg !44

__nv_sqrtf.exit:                                  ; preds = %76, %78, %81, %83
  %.0.i = phi float [ %77, %76 ], [ %79, %78 ], [ %82, %81 ], [ %84, %83 ], !dbg !44
  %85 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !44
  %.not.i1 = icmp eq i32 %85, 0, !dbg !44
  %86 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !44
  %.not1.i4 = icmp eq i32 %86, 0, !dbg !44
  br i1 %.not.i1, label %92, label %87, !dbg !44

87:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %90, label %88, !dbg !44

88:                                               ; preds = %87
  %89 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %72) #3, !dbg !44
  br label %__nv_sqrtf.exit5, !dbg !44

90:                                               ; preds = %87
  %91 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %72) #3, !dbg !44
  br label %__nv_sqrtf.exit5, !dbg !44

92:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %95, label %93, !dbg !44

93:                                               ; preds = %92
  %94 = tail call float @llvm.nvvm.sqrt.rn.f(float %72) #3, !dbg !44
  br label %__nv_sqrtf.exit5, !dbg !44

95:                                               ; preds = %92
  %96 = tail call float @llvm.nvvm.sqrt.approx.f(float %72) #3, !dbg !44
  br label %__nv_sqrtf.exit5, !dbg !44

__nv_sqrtf.exit5:                                 ; preds = %88, %90, %93, %95
  %.0.i3 = phi float [ %89, %88 ], [ %91, %90 ], [ %94, %93 ], [ %96, %95 ], !dbg !44
  %97 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !45
  %98 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !45
  %99 = lshr i64 %50, 60, !dbg !46
  %100 = and i64 %99, 8, !dbg !46
  %101 = add i64 %100, %50, !dbg !46
  %102 = lshr i64 %55, 60, !dbg !47
  %103 = and i64 %102, 8, !dbg !47
  %104 = lshr i64 %56, 60, !dbg !47
  %105 = and i64 %104, 8, !dbg !47
  %106 = shl i64 %101, 3, !dbg !48
  %107 = shl nsw i32 %22, 6, !dbg !49
  %108 = sext i32 %107 to i64, !dbg !50
  %109 = getelementptr float, ptr addrspace(1) %7, i64 %55, !dbg !51
  %110 = getelementptr float, ptr addrspace(1) %109, i64 %103, !dbg !51
  %111 = getelementptr float, ptr addrspace(1) %110, i64 %106, !dbg !51
  %112 = getelementptr float, ptr addrspace(1) %111, i64 %108, !dbg !51
  %113 = getelementptr float, ptr addrspace(1) %7, i64 %56, !dbg !51
  %114 = getelementptr float, ptr addrspace(1) %113, i64 %105, !dbg !51
  %115 = getelementptr float, ptr addrspace(1) %114, i64 %106, !dbg !51
  %116 = getelementptr float, ptr addrspace(1) %115, i64 %108, !dbg !51
  %117 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %112, i1 true) #3, !dbg !52
  %118 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %116, i1 true) #3, !dbg !52
  %119 = fadd float %62, 0x3EE4F8B580000000, !dbg !53
  %120 = fadd float %64, 0x3EE4F8B580000000, !dbg !53
  %121 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !54
  %.not.i6 = icmp eq i32 %121, 0, !dbg !54
  %122 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !54
  %.not1.i9 = icmp eq i32 %122, 0, !dbg !54
  br i1 %.not.i6, label %128, label %123, !dbg !54

123:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %126, label %124, !dbg !54

124:                                              ; preds = %123
  %125 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %119) #3, !dbg !54
  br label %__nv_sqrtf.exit10, !dbg !54

126:                                              ; preds = %123
  %127 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %119) #3, !dbg !54
  br label %__nv_sqrtf.exit10, !dbg !54

128:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %131, label %129, !dbg !54

129:                                              ; preds = %128
  %130 = tail call float @llvm.nvvm.sqrt.rn.f(float %119) #3, !dbg !54
  br label %__nv_sqrtf.exit10, !dbg !54

131:                                              ; preds = %128
  %132 = tail call float @llvm.nvvm.sqrt.approx.f(float %119) #3, !dbg !54
  br label %__nv_sqrtf.exit10, !dbg !54

__nv_sqrtf.exit10:                                ; preds = %124, %126, %129, %131
  %.0.i8 = phi float [ %125, %124 ], [ %127, %126 ], [ %130, %129 ], [ %132, %131 ], !dbg !54
  %133 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !54
  %.not.i11 = icmp eq i32 %133, 0, !dbg !54
  %134 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !54
  %.not1.i14 = icmp eq i32 %134, 0, !dbg !54
  br i1 %.not.i11, label %140, label %135, !dbg !54

135:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %138, label %136, !dbg !54

136:                                              ; preds = %135
  %137 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %120) #3, !dbg !54
  br label %__nv_sqrtf.exit15, !dbg !54

138:                                              ; preds = %135
  %139 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %120) #3, !dbg !54
  br label %__nv_sqrtf.exit15, !dbg !54

140:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %143, label %141, !dbg !54

141:                                              ; preds = %140
  %142 = tail call float @llvm.nvvm.sqrt.rn.f(float %120) #3, !dbg !54
  br label %__nv_sqrtf.exit15, !dbg !54

143:                                              ; preds = %140
  %144 = tail call float @llvm.nvvm.sqrt.approx.f(float %120) #3, !dbg !54
  br label %__nv_sqrtf.exit15, !dbg !54

__nv_sqrtf.exit15:                                ; preds = %136, %138, %141, %143
  %.0.i13 = phi float [ %137, %136 ], [ %139, %138 ], [ %142, %141 ], [ %144, %143 ], !dbg !54
  %145 = bitcast i32 %118 to float, !dbg !52
  %146 = bitcast i32 %59 to float, !dbg !36
  %147 = fsub float %145, %146, !dbg !55
  %148 = bitcast i32 %117 to float, !dbg !52
  %149 = bitcast i32 %58 to float, !dbg !36
  %150 = fsub float %148, %149, !dbg !55
  %151 = extractvalue { i32, i32 } %29, 1, !dbg !20
  %152 = bitcast i32 %151 to float, !dbg !20
  %153 = bitcast i32 %33 to float, !dbg !22
  %154 = fadd float %152, %153, !dbg !56
  %155 = bitcast i32 %36 to float, !dbg !24
  %156 = fsub float %154, %155, !dbg !57
  %157 = fmul float %156, %98, !dbg !58
  %158 = bitcast i32 %44 to float, !dbg !28
  %159 = fmul float %157, %158, !dbg !59
  %160 = bitcast i32 %47 to float, !dbg !30
  %161 = fadd float %159, %160, !dbg !60
  %162 = fcmp olt float %161, 0.000000e+00, !dbg !61
  %163 = select i1 %162, float 0.000000e+00, float %161, !dbg !65
  %164 = extractvalue { i32, i32 } %29, 0, !dbg !20
  %165 = bitcast i32 %164 to float, !dbg !20
  %166 = bitcast i32 %32 to float, !dbg !22
  %167 = fadd float %165, %166, !dbg !56
  %168 = bitcast i32 %35 to float, !dbg !24
  %169 = fsub float %167, %168, !dbg !57
  %170 = fmul float %169, %97, !dbg !58
  %171 = bitcast i32 %43 to float, !dbg !28
  %172 = fmul float %170, %171, !dbg !59
  %173 = bitcast i32 %46 to float, !dbg !30
  %174 = fadd float %172, %173, !dbg !60
  %175 = fcmp olt float %174, 0.000000e+00, !dbg !61
  %176 = select i1 %175, float 0.000000e+00, float %174, !dbg !65
  %177 = bitcast i32 %70 to float, !dbg !42
  %178 = bitcast i32 %69 to float, !dbg !42
  %179 = bitcast i32 %67 to float, !dbg !40
  %180 = bitcast i32 %66 to float, !dbg !40
  %181 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !66
  %182 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !66
  %183 = fmul float %150, %181, !dbg !67
  %184 = fmul float %147, %182, !dbg !67
  %185 = fmul float %183, %180, !dbg !68
  %186 = fmul float %184, %179, !dbg !68
  %187 = fadd float %185, %178, !dbg !69
  %188 = fadd float %186, %177, !dbg !69
  %189 = fadd float %176, %187, !dbg !70
  %190 = fadd float %163, %188, !dbg !70
  %191 = bitcast float %167 to i32, !dbg !71
  %192 = bitcast float %154 to i32, !dbg !71
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %191, i32 %192, ptr addrspace(1) %28, i1 true) #3, !dbg !71
  %193 = getelementptr float, ptr addrspace(1) %12, i64 %27, !dbg !72
  %194 = bitcast float %176 to i32, !dbg !73
  %195 = bitcast float %163 to i32, !dbg !73
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %194, i32 %195, ptr addrspace(1) %193, i1 true) #3, !dbg !73
  %196 = getelementptr float, ptr addrspace(1) %13, i64 %27, !dbg !74
  %197 = bitcast float %189 to i32, !dbg !75
  %198 = bitcast float %190 to i32, !dbg !75
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %197, i32 %198, ptr addrspace(1) %196, i1 true) #3, !dbg !75
  ret void, !dbg !76
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cxtwqmgmwimlf47anqocpnghpwdoc3grohz2jwksgnmn2ltm4cxq.py", directory: "inductor_cache/xt")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_convolution_relu_10, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_convolution_relu_10, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_convolution_relu_10", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_convolution_relu_10", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 26, column: 21, scope: !7)
!17 = !DILocation(line: 26, column: 27, scope: !7)
!18 = !DILocation(line: 27, column: 19, scope: !7)
!19 = !DILocation(line: 29, column: 34, scope: !7)
!20 = !DILocation(line: 29, column: 39, scope: !7)
!21 = !DILocation(line: 30, column: 30, scope: !7)
!22 = !DILocation(line: 30, column: 35, scope: !7)
!23 = !DILocation(line: 31, column: 30, scope: !7)
!24 = !DILocation(line: 31, column: 35, scope: !7)
!25 = !DILocation(line: 32, column: 30, scope: !7)
!26 = !DILocation(line: 32, column: 35, scope: !7)
!27 = !DILocation(line: 33, column: 31, scope: !7)
!28 = !DILocation(line: 33, column: 36, scope: !7)
!29 = !DILocation(line: 34, column: 31, scope: !7)
!30 = !DILocation(line: 34, column: 36, scope: !7)
!31 = !DILocation(line: 35, column: 31, scope: !7)
!32 = !DILocation(line: 35, column: 36, scope: !7)
!33 = !DILocation(line: 36, column: 31, scope: !7)
!34 = !DILocation(line: 36, column: 36, scope: !7)
!35 = !DILocation(line: 37, column: 31, scope: !7)
!36 = !DILocation(line: 37, column: 36, scope: !7)
!37 = !DILocation(line: 38, column: 31, scope: !7)
!38 = !DILocation(line: 38, column: 36, scope: !7)
!39 = !DILocation(line: 39, column: 31, scope: !7)
!40 = !DILocation(line: 39, column: 36, scope: !7)
!41 = !DILocation(line: 40, column: 32, scope: !7)
!42 = !DILocation(line: 40, column: 37, scope: !7)
!43 = !DILocation(line: 44, column: 18, scope: !7)
!44 = !DILocation(line: 45, column: 26, scope: !7)
!45 = !DILocation(line: 47, column: 19, scope: !7)
!46 = !DILocation(line: 58, column: 35, scope: !7)
!47 = !DILocation(line: 61, column: 35, scope: !7)
!48 = !DILocation(line: 62, column: 41, scope: !7)
!49 = !DILocation(line: 62, column: 52, scope: !7)
!50 = !DILocation(line: 62, column: 49, scope: !7)
!51 = !DILocation(line: 62, column: 31, scope: !7)
!52 = !DILocation(line: 62, column: 57, scope: !7)
!53 = !DILocation(line: 64, column: 20, scope: !7)
!54 = !DILocation(line: 65, column: 27, scope: !7)
!55 = !DILocation(line: 63, column: 20, scope: !7)
!56 = !DILocation(line: 41, column: 18, scope: !7)
!57 = !DILocation(line: 42, column: 18, scope: !7)
!58 = !DILocation(line: 50, column: 19, scope: !7)
!59 = !DILocation(line: 51, column: 20, scope: !7)
!60 = !DILocation(line: 52, column: 20, scope: !7)
!61 = !DILocation(line: 118, column: 15, scope: !62, inlinedAt: !64)
!62 = distinct !DILexicalBlockFile(scope: !7, file: !63, discriminator: 0)
!63 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!64 = !DILocation(line: 54, column: 42, scope: !7)
!65 = !DILocation(line: 121, column: 29, scope: !62, inlinedAt: !64)
!66 = !DILocation(line: 66, column: 19, scope: !7)
!67 = !DILocation(line: 68, column: 20, scope: !7)
!68 = !DILocation(line: 69, column: 20, scope: !7)
!69 = !DILocation(line: 70, column: 20, scope: !7)
!70 = !DILocation(line: 71, column: 20, scope: !7)
!71 = !DILocation(line: 72, column: 39, scope: !7)
!72 = !DILocation(line: 73, column: 25, scope: !7)
!73 = !DILocation(line: 73, column: 37, scope: !7)
!74 = !DILocation(line: 74, column: 25, scope: !7)
!75 = !DILocation(line: 74, column: 37, scope: !7)
!76 = !DILocation(line: 74, column: 4, scope: !7)
