; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_26(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %11 = shl i32 %10, 9, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = shl i32 %12, 2, !dbg !12
  %14 = and i32 %13, 508, !dbg !12
  %15 = or disjoint i32 %11, %14, !dbg !13
  %16 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %17 = icmp slt i32 %16, 32, !dbg !15
  %.frozen = freeze i32 %15, !dbg !16
  %18 = sdiv i32 %.frozen, 512, !dbg !16
  %19 = mul i32 %18, 512, !dbg !17
  %.decomposed = sub i32 %.frozen, %19, !dbg !17
  %20 = shl i32 %16, 9, !dbg !18
  %21 = add i32 %.decomposed, %20, !dbg !19
  %22 = shl i32 %18, 14, !dbg !20
  %23 = add i32 %21, %22, !dbg !21
  %24 = sext i32 %23 to i64, !dbg !22
  %25 = getelementptr float, ptr addrspace(1) %0, i64 %24, !dbg !22
  %26 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %25, i1 %17) #4, !dbg !23
  %27 = sext i32 %.decomposed to i64, !dbg !24
  %28 = getelementptr float, ptr addrspace(1) %1, i64 %27, !dbg !24
  %29 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %28, i1 true) #4, !dbg !25
  %30 = getelementptr float, ptr addrspace(1) %2, i64 %27, !dbg !26
  %31 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %30, i1 true) #4, !dbg !27
  %32 = extractvalue { i32, i32, i32, i32 } %31, 0, !dbg !27
  %33 = extractvalue { i32, i32, i32, i32 } %31, 1, !dbg !27
  %34 = extractvalue { i32, i32, i32, i32 } %31, 2, !dbg !27
  %35 = extractvalue { i32, i32, i32, i32 } %31, 3, !dbg !27
  %36 = bitcast i32 %32 to float, !dbg !27
  %37 = bitcast i32 %33 to float, !dbg !27
  %38 = bitcast i32 %34 to float, !dbg !27
  %39 = bitcast i32 %35 to float, !dbg !27
  %40 = getelementptr float, ptr addrspace(1) %3, i64 %27, !dbg !28
  %41 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %40, i1 true) #4, !dbg !29
  %42 = getelementptr float, ptr addrspace(1) %4, i64 %27, !dbg !30
  %43 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %42, i1 true) #4, !dbg !31
  %44 = fadd float %36, 0x3EE4F8B580000000, !dbg !32
  %45 = fadd float %37, 0x3EE4F8B580000000, !dbg !32
  %46 = fadd float %38, 0x3EE4F8B580000000, !dbg !32
  %47 = fadd float %39, 0x3EE4F8B580000000, !dbg !32
  %48 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i = icmp eq i32 %48, 0, !dbg !33
  %49 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i = icmp eq i32 %49, 0, !dbg !33
  br i1 %.not.i, label %55, label %50, !dbg !33

50:                                               ; preds = %9
  br i1 %.not1.i, label %53, label %51, !dbg !33

51:                                               ; preds = %50
  %52 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %44) #4, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

53:                                               ; preds = %50
  %54 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %44) #4, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

55:                                               ; preds = %9
  br i1 %.not1.i, label %58, label %56, !dbg !33

56:                                               ; preds = %55
  %57 = tail call float @llvm.nvvm.sqrt.rn.f(float %44) #4, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

58:                                               ; preds = %55
  %59 = tail call float @llvm.nvvm.sqrt.approx.f(float %44) #4, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

__nv_sqrtf.exit:                                  ; preds = %51, %53, %56, %58
  %.0.i = phi float [ %52, %51 ], [ %54, %53 ], [ %57, %56 ], [ %59, %58 ], !dbg !33
  %60 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i5 = icmp eq i32 %60, 0, !dbg !33
  %61 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i8 = icmp eq i32 %61, 0, !dbg !33
  br i1 %.not.i5, label %67, label %62, !dbg !33

62:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i8, label %65, label %63, !dbg !33

63:                                               ; preds = %62
  %64 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %45) #4, !dbg !33
  br label %__nv_sqrtf.exit9, !dbg !33

65:                                               ; preds = %62
  %66 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %45) #4, !dbg !33
  br label %__nv_sqrtf.exit9, !dbg !33

67:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i8, label %70, label %68, !dbg !33

68:                                               ; preds = %67
  %69 = tail call float @llvm.nvvm.sqrt.rn.f(float %45) #4, !dbg !33
  br label %__nv_sqrtf.exit9, !dbg !33

70:                                               ; preds = %67
  %71 = tail call float @llvm.nvvm.sqrt.approx.f(float %45) #4, !dbg !33
  br label %__nv_sqrtf.exit9, !dbg !33

__nv_sqrtf.exit9:                                 ; preds = %63, %65, %68, %70
  %.0.i7 = phi float [ %64, %63 ], [ %66, %65 ], [ %69, %68 ], [ %71, %70 ], !dbg !33
  %72 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i10 = icmp eq i32 %72, 0, !dbg !33
  %73 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i13 = icmp eq i32 %73, 0, !dbg !33
  br i1 %.not.i10, label %79, label %74, !dbg !33

74:                                               ; preds = %__nv_sqrtf.exit9
  br i1 %.not1.i13, label %77, label %75, !dbg !33

75:                                               ; preds = %74
  %76 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %46) #4, !dbg !33
  br label %__nv_sqrtf.exit14, !dbg !33

77:                                               ; preds = %74
  %78 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %46) #4, !dbg !33
  br label %__nv_sqrtf.exit14, !dbg !33

79:                                               ; preds = %__nv_sqrtf.exit9
  br i1 %.not1.i13, label %82, label %80, !dbg !33

80:                                               ; preds = %79
  %81 = tail call float @llvm.nvvm.sqrt.rn.f(float %46) #4, !dbg !33
  br label %__nv_sqrtf.exit14, !dbg !33

82:                                               ; preds = %79
  %83 = tail call float @llvm.nvvm.sqrt.approx.f(float %46) #4, !dbg !33
  br label %__nv_sqrtf.exit14, !dbg !33

__nv_sqrtf.exit14:                                ; preds = %75, %77, %80, %82
  %.0.i12 = phi float [ %76, %75 ], [ %78, %77 ], [ %81, %80 ], [ %83, %82 ], !dbg !33
  %84 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i15 = icmp eq i32 %84, 0, !dbg !33
  %85 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i18 = icmp eq i32 %85, 0, !dbg !33
  br i1 %.not.i15, label %91, label %86, !dbg !33

86:                                               ; preds = %__nv_sqrtf.exit14
  br i1 %.not1.i18, label %89, label %87, !dbg !33

87:                                               ; preds = %86
  %88 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %47) #4, !dbg !33
  br label %__nv_sqrtf.exit19, !dbg !33

89:                                               ; preds = %86
  %90 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %47) #4, !dbg !33
  br label %__nv_sqrtf.exit19, !dbg !33

91:                                               ; preds = %__nv_sqrtf.exit14
  br i1 %.not1.i18, label %94, label %92, !dbg !33

92:                                               ; preds = %91
  %93 = tail call float @llvm.nvvm.sqrt.rn.f(float %47) #4, !dbg !33
  br label %__nv_sqrtf.exit19, !dbg !33

94:                                               ; preds = %91
  %95 = tail call float @llvm.nvvm.sqrt.approx.f(float %47) #4, !dbg !33
  br label %__nv_sqrtf.exit19, !dbg !33

__nv_sqrtf.exit19:                                ; preds = %87, %89, %92, %94
  %.0.i17 = phi float [ %88, %87 ], [ %90, %89 ], [ %93, %92 ], [ %95, %94 ], !dbg !33
  %96 = extractvalue { i32, i32, i32, i32 } %26, 3, !dbg !23
  %97 = extractvalue { i32, i32, i32, i32 } %29, 3, !dbg !25
  %98 = extractvalue { i32, i32, i32, i32 } %26, 2, !dbg !23
  %99 = extractvalue { i32, i32, i32, i32 } %29, 2, !dbg !25
  %100 = extractvalue { i32, i32, i32, i32 } %26, 1, !dbg !23
  %101 = extractvalue { i32, i32, i32, i32 } %29, 1, !dbg !25
  %102 = extractvalue { i32, i32, i32, i32 } %26, 0, !dbg !23
  %103 = extractvalue { i32, i32, i32, i32 } %29, 0, !dbg !25
  %104 = extractvalue { i32, i32, i32, i32 } %43, 3, !dbg !31
  %105 = extractvalue { i32, i32, i32, i32 } %43, 2, !dbg !31
  %106 = extractvalue { i32, i32, i32, i32 } %43, 1, !dbg !31
  %107 = extractvalue { i32, i32, i32, i32 } %43, 0, !dbg !31
  %108 = extractvalue { i32, i32, i32, i32 } %41, 3, !dbg !29
  %109 = extractvalue { i32, i32, i32, i32 } %41, 2, !dbg !29
  %110 = extractvalue { i32, i32, i32, i32 } %41, 1, !dbg !29
  %111 = extractvalue { i32, i32, i32, i32 } %41, 0, !dbg !29
  %112 = and i32 %12, 127, !dbg !12
  %113 = or disjoint i32 %112, 384, !dbg !12
  %114 = or disjoint i32 %11, %113, !dbg !13
  %115 = or disjoint i32 %112, 256, !dbg !12
  %116 = or disjoint i32 %11, %115, !dbg !13
  %117 = or disjoint i32 %112, 128, !dbg !12
  %118 = or disjoint i32 %11, %117, !dbg !13
  %119 = or disjoint i32 %11, %112, !dbg !13
  %120 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !34
  %121 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i7) #4, !dbg !34
  %122 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i12) #4, !dbg !34
  %123 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i17) #4, !dbg !34
  %124 = shl i32 %119, 5, !dbg !35
  %125 = shl i32 %118, 5, !dbg !35
  %126 = shl i32 %116, 5, !dbg !35
  %127 = shl i32 %114, 5, !dbg !35
  %128 = add i32 %124, %16, !dbg !36
  %129 = add i32 %125, %16, !dbg !36
  %130 = add i32 %126, %16, !dbg !36
  %131 = add i32 %127, %16, !dbg !36
  %132 = sext i32 %128 to i64, !dbg !37
  %133 = getelementptr float, ptr addrspace(1) %5, i64 %132, !dbg !37
  %134 = sext i32 %129 to i64, !dbg !37
  %135 = getelementptr float, ptr addrspace(1) %5, i64 %134, !dbg !37
  %136 = sext i32 %130 to i64, !dbg !37
  %137 = getelementptr float, ptr addrspace(1) %5, i64 %136, !dbg !37
  %138 = sext i32 %131 to i64, !dbg !37
  %139 = getelementptr float, ptr addrspace(1) %5, i64 %138, !dbg !37
  %.idx = shl nuw nsw i32 %14, 3, !dbg !38
  %140 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !38
  %141 = shl nuw nsw i32 %14, 1, !dbg !38
  %142 = or disjoint i32 %141, 2, !dbg !38
  %143 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %142, !dbg !38
  %144 = or disjoint i32 %141, 4, !dbg !38
  %145 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %144, !dbg !38
  %146 = or disjoint i32 %141, 6, !dbg !38
  %147 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %146, !dbg !38
  %.idx1 = shl nuw nsw i32 %112, 3, !dbg !38
  %148 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx1, !dbg !38
  %.idx2 = shl nuw nsw i32 %117, 3, !dbg !38
  %149 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx2, !dbg !38
  %.idx3 = shl nuw nsw i32 %115, 3, !dbg !38
  %150 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx3, !dbg !38
  %.idx4 = shl nuw nsw i32 %113, 3, !dbg !38
  %151 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx4, !dbg !38
  %152 = getelementptr i1, ptr addrspace(1) %6, i64 %24, !dbg !39
  %153 = insertelement <4 x i32> poison, i32 %102, i64 0, !dbg !23
  %154 = insertelement <4 x i32> %153, i32 %100, i64 1, !dbg !23
  %155 = insertelement <4 x i32> %154, i32 %98, i64 2, !dbg !23
  %156 = insertelement <4 x i32> %155, i32 %96, i64 3, !dbg !23
  %157 = bitcast <4 x i32> %156 to <4 x float>, !dbg !23
  %158 = insertelement <4 x i32> poison, i32 %103, i64 0, !dbg !25
  %159 = insertelement <4 x i32> %158, i32 %101, i64 1, !dbg !25
  %160 = insertelement <4 x i32> %159, i32 %99, i64 2, !dbg !25
  %161 = insertelement <4 x i32> %160, i32 %97, i64 3, !dbg !25
  %162 = bitcast <4 x i32> %161 to <4 x float>, !dbg !25
  %163 = fsub <4 x float> %157, %162, !dbg !40
  %164 = insertelement <4 x i32> poison, i32 %107, i64 0, !dbg !31
  %165 = insertelement <4 x i32> %164, i32 %106, i64 1, !dbg !31
  %166 = insertelement <4 x i32> %165, i32 %105, i64 2, !dbg !31
  %167 = insertelement <4 x i32> %166, i32 %104, i64 3, !dbg !31
  %168 = bitcast <4 x i32> %167 to <4 x float>, !dbg !31
  %169 = insertelement <4 x i32> poison, i32 %111, i64 0, !dbg !29
  %170 = insertelement <4 x i32> %169, i32 %110, i64 1, !dbg !29
  %171 = insertelement <4 x i32> %170, i32 %109, i64 2, !dbg !29
  %172 = insertelement <4 x i32> %171, i32 %108, i64 3, !dbg !29
  %173 = bitcast <4 x i32> %172 to <4 x float>, !dbg !29
  %174 = insertelement <4 x float> poison, float %120, i64 0, !dbg !41
  %175 = insertelement <4 x float> %174, float %121, i64 1, !dbg !41
  %176 = insertelement <4 x float> %175, float %122, i64 2, !dbg !41
  %177 = insertelement <4 x float> %176, float %123, i64 3, !dbg !41
  %178 = fmul <4 x float> %163, %177, !dbg !41
  %179 = fmul <4 x float> %178, %173, !dbg !42
  %180 = fadd <4 x float> %179, %168, !dbg !43
  %181 = fcmp olt <4 x float> %180, zeroinitializer, !dbg !44
  %182 = select <4 x i1> %181, <4 x float> zeroinitializer, <4 x float> %180, !dbg !48
  %183 = fcmp ole <4 x float> %182, zeroinitializer, !dbg !49
  %184 = extractelement <4 x float> %182, i64 0, !dbg !38
  %185 = bitcast float %184 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %140, <1 x i32> %185, i1 true) #4, !dbg !38
  %186 = extractelement <4 x float> %182, i64 1, !dbg !38
  %187 = bitcast float %186 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %143, <1 x i32> %187, i1 true) #4, !dbg !38
  %188 = extractelement <4 x float> %182, i64 2, !dbg !38
  %189 = bitcast float %188 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %145, <1 x i32> %189, i1 true) #4, !dbg !38
  %190 = extractelement <4 x float> %182, i64 3, !dbg !38
  %191 = bitcast float %190 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %147, <1 x i32> %191, i1 true) #4, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %192 = load i32, ptr addrspace(3) %148, align 8, !dbg !38
  %193 = load i32, ptr addrspace(3) %149, align 8, !dbg !38
  %194 = load i32, ptr addrspace(3) %150, align 8, !dbg !38
  %195 = load i32, ptr addrspace(3) %151, align 8, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %192, ptr addrspace(1) %133, i1 %17) #4, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %193, ptr addrspace(1) %135, i1 %17) #4, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %194, ptr addrspace(1) %137, i1 %17) #4, !dbg !38
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %195, ptr addrspace(1) %139, i1 %17) #4, !dbg !38
  %196 = zext <4 x i1> %183 to <4 x i8>, !dbg !50
  %197 = bitcast <4 x i8> %196 to i32, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %197, ptr addrspace(1) %152, i1 %17) #4, !dbg !50
  ret void, !dbg !51
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cufujjxrbpnmdonxyikuonyixtkapicuqgm6ymufpneajk3ahccc.py", directory: "inductor_cache/uf")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_26, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_26, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_26", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_26", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 27, column: 21, scope: !7)
!16 = !DILocation(line: 30, column: 19, scope: !7)
!17 = !DILocation(line: 29, column: 19, scope: !7)
!18 = !DILocation(line: 32, column: 39, scope: !7)
!19 = !DILocation(line: 32, column: 35, scope: !7)
!20 = !DILocation(line: 32, column: 50, scope: !7)
!21 = !DILocation(line: 32, column: 44, scope: !7)
!22 = !DILocation(line: 32, column: 30, scope: !7)
!23 = !DILocation(line: 32, column: 55, scope: !7)
!24 = !DILocation(line: 33, column: 30, scope: !7)
!25 = !DILocation(line: 33, column: 35, scope: !7)
!26 = !DILocation(line: 34, column: 30, scope: !7)
!27 = !DILocation(line: 34, column: 35, scope: !7)
!28 = !DILocation(line: 35, column: 31, scope: !7)
!29 = !DILocation(line: 35, column: 36, scope: !7)
!30 = !DILocation(line: 36, column: 31, scope: !7)
!31 = !DILocation(line: 36, column: 36, scope: !7)
!32 = !DILocation(line: 39, column: 18, scope: !7)
!33 = !DILocation(line: 40, column: 26, scope: !7)
!34 = !DILocation(line: 42, column: 18, scope: !7)
!35 = !DILocation(line: 52, column: 33, scope: !7)
!36 = !DILocation(line: 52, column: 30, scope: !7)
!37 = !DILocation(line: 52, column: 25, scope: !7)
!38 = !DILocation(line: 52, column: 45, scope: !7)
!39 = !DILocation(line: 53, column: 25, scope: !7)
!40 = !DILocation(line: 37, column: 18, scope: !7)
!41 = !DILocation(line: 45, column: 19, scope: !7)
!42 = !DILocation(line: 46, column: 20, scope: !7)
!43 = !DILocation(line: 47, column: 20, scope: !7)
!44 = !DILocation(line: 118, column: 15, scope: !45, inlinedAt: !47)
!45 = distinct !DILexicalBlockFile(scope: !7, file: !46, discriminator: 0)
!46 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!47 = !DILocation(line: 49, column: 42, scope: !7)
!48 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !47)
!49 = !DILocation(line: 51, column: 21, scope: !7)
!50 = !DILocation(line: 53, column: 57, scope: !7)
!51 = !DILocation(line: 53, column: 4, scope: !7)
