; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_13(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.z;", "=r"() #4, !dbg !11
  %12 = tail call i32 asm "mov.u32 $0, %nctaid.y;", "=r"() #4, !dbg !12
  %13 = mul i32 %12, %11, !dbg !13
  %14 = add i32 %13, %10, !dbg !14
  %15 = shl i32 %14, 6, !dbg !15
  %16 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !16
  %17 = lshr i32 %16, 2, !dbg !16
  %18 = and i32 %17, 31, !dbg !16
  %19 = shl i32 %16, 2, !dbg !16
  %20 = and i32 %19, 12, !dbg !16
  %21 = or disjoint i32 %15, %18, !dbg !17
  %22 = or disjoint i32 %21, 32, !dbg !17
  %23 = icmp slt i32 %21, 262144, !dbg !18
  %24 = icmp slt i32 %22, 262144, !dbg !18
  %25 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !19
  %26 = shl i32 %25, 4, !dbg !20
  %27 = or disjoint i32 %26, %20, !dbg !21
  %28 = icmp slt i32 %27, 16, !dbg !22
  %29 = shl i32 %21, 4, !dbg !23
  %30 = shl i32 %22, 4, !dbg !23
  %31 = add i32 %29, %27, !dbg !24
  %32 = add i32 %27, %30, !dbg !24
  %33 = sext i32 %31 to i64, !dbg !25
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !25
  %35 = sext i32 %32 to i64, !dbg !25
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !25
  %37 = and i1 %28, %23, !dbg !26
  %38 = and i1 %24, %28, !dbg !26
  %39 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %34, i1 %37) #4, !dbg !27
  %40 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %36, i1 %38) #4, !dbg !27
  %41 = sext i32 %27 to i64, !dbg !28
  %42 = getelementptr float, ptr addrspace(1) %1, i64 %41, !dbg !28
  %43 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %42, i1 %28) #4, !dbg !29
  %44 = getelementptr float, ptr addrspace(1) %2, i64 %41, !dbg !30
  %45 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %44, i1 %28) #4, !dbg !31
  %46 = extractvalue { i32, i32, i32, i32 } %45, 0, !dbg !31
  %47 = extractvalue { i32, i32, i32, i32 } %45, 1, !dbg !31
  %48 = extractvalue { i32, i32, i32, i32 } %45, 2, !dbg !31
  %49 = extractvalue { i32, i32, i32, i32 } %45, 3, !dbg !31
  %50 = bitcast i32 %46 to float, !dbg !31
  %51 = bitcast i32 %47 to float, !dbg !31
  %52 = bitcast i32 %48 to float, !dbg !31
  %53 = bitcast i32 %49 to float, !dbg !31
  %54 = getelementptr float, ptr addrspace(1) %3, i64 %41, !dbg !32
  %55 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %54, i1 %28) #4, !dbg !33
  %56 = getelementptr float, ptr addrspace(1) %4, i64 %41, !dbg !34
  %57 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %56, i1 %28) #4, !dbg !35
  %58 = getelementptr float, ptr addrspace(1) %5, i64 %33, !dbg !36
  %59 = getelementptr float, ptr addrspace(1) %5, i64 %35, !dbg !36
  %60 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %58, i1 %37) #4, !dbg !37
  %61 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %59, i1 %38) #4, !dbg !37
  %62 = fadd float %50, 0x3EE4F8B580000000, !dbg !38
  %63 = fadd float %51, 0x3EE4F8B580000000, !dbg !38
  %64 = fadd float %52, 0x3EE4F8B580000000, !dbg !38
  %65 = fadd float %53, 0x3EE4F8B580000000, !dbg !38
  %66 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !39
  %.not.i = icmp eq i32 %66, 0, !dbg !39
  %67 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !39
  %.not1.i = icmp eq i32 %67, 0, !dbg !39
  br i1 %.not.i, label %73, label %68, !dbg !39

68:                                               ; preds = %9
  br i1 %.not1.i, label %71, label %69, !dbg !39

69:                                               ; preds = %68
  %70 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %62) #4, !dbg !39
  br label %__nv_sqrtf.exit, !dbg !39

71:                                               ; preds = %68
  %72 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %62) #4, !dbg !39
  br label %__nv_sqrtf.exit, !dbg !39

73:                                               ; preds = %9
  br i1 %.not1.i, label %76, label %74, !dbg !39

74:                                               ; preds = %73
  %75 = tail call float @llvm.nvvm.sqrt.rn.f(float %62) #4, !dbg !39
  br label %__nv_sqrtf.exit, !dbg !39

76:                                               ; preds = %73
  %77 = tail call float @llvm.nvvm.sqrt.approx.f(float %62) #4, !dbg !39
  br label %__nv_sqrtf.exit, !dbg !39

__nv_sqrtf.exit:                                  ; preds = %69, %71, %74, %76
  %.0.i = phi float [ %70, %69 ], [ %72, %71 ], [ %75, %74 ], [ %77, %76 ], !dbg !39
  %78 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !39
  %.not.i17 = icmp eq i32 %78, 0, !dbg !39
  %79 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !39
  %.not1.i20 = icmp eq i32 %79, 0, !dbg !39
  br i1 %.not.i17, label %85, label %80, !dbg !39

80:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i20, label %83, label %81, !dbg !39

81:                                               ; preds = %80
  %82 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %63) #4, !dbg !39
  br label %__nv_sqrtf.exit21, !dbg !39

83:                                               ; preds = %80
  %84 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %63) #4, !dbg !39
  br label %__nv_sqrtf.exit21, !dbg !39

85:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i20, label %88, label %86, !dbg !39

86:                                               ; preds = %85
  %87 = tail call float @llvm.nvvm.sqrt.rn.f(float %63) #4, !dbg !39
  br label %__nv_sqrtf.exit21, !dbg !39

88:                                               ; preds = %85
  %89 = tail call float @llvm.nvvm.sqrt.approx.f(float %63) #4, !dbg !39
  br label %__nv_sqrtf.exit21, !dbg !39

__nv_sqrtf.exit21:                                ; preds = %81, %83, %86, %88
  %.0.i19 = phi float [ %82, %81 ], [ %84, %83 ], [ %87, %86 ], [ %89, %88 ], !dbg !39
  %90 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !39
  %.not.i22 = icmp eq i32 %90, 0, !dbg !39
  %91 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !39
  %.not1.i25 = icmp eq i32 %91, 0, !dbg !39
  br i1 %.not.i22, label %97, label %92, !dbg !39

92:                                               ; preds = %__nv_sqrtf.exit21
  br i1 %.not1.i25, label %95, label %93, !dbg !39

93:                                               ; preds = %92
  %94 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %64) #4, !dbg !39
  br label %__nv_sqrtf.exit26, !dbg !39

95:                                               ; preds = %92
  %96 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %64) #4, !dbg !39
  br label %__nv_sqrtf.exit26, !dbg !39

97:                                               ; preds = %__nv_sqrtf.exit21
  br i1 %.not1.i25, label %100, label %98, !dbg !39

98:                                               ; preds = %97
  %99 = tail call float @llvm.nvvm.sqrt.rn.f(float %64) #4, !dbg !39
  br label %__nv_sqrtf.exit26, !dbg !39

100:                                              ; preds = %97
  %101 = tail call float @llvm.nvvm.sqrt.approx.f(float %64) #4, !dbg !39
  br label %__nv_sqrtf.exit26, !dbg !39

__nv_sqrtf.exit26:                                ; preds = %93, %95, %98, %100
  %.0.i24 = phi float [ %94, %93 ], [ %96, %95 ], [ %99, %98 ], [ %101, %100 ], !dbg !39
  %102 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !39
  %.not.i27 = icmp eq i32 %102, 0, !dbg !39
  %103 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !39
  %.not1.i30 = icmp eq i32 %103, 0, !dbg !39
  br i1 %.not.i27, label %109, label %104, !dbg !39

104:                                              ; preds = %__nv_sqrtf.exit26
  br i1 %.not1.i30, label %107, label %105, !dbg !39

105:                                              ; preds = %104
  %106 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %65) #4, !dbg !39
  br label %__nv_sqrtf.exit31, !dbg !39

107:                                              ; preds = %104
  %108 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %65) #4, !dbg !39
  br label %__nv_sqrtf.exit31, !dbg !39

109:                                              ; preds = %__nv_sqrtf.exit26
  br i1 %.not1.i30, label %112, label %110, !dbg !39

110:                                              ; preds = %109
  %111 = tail call float @llvm.nvvm.sqrt.rn.f(float %65) #4, !dbg !39
  br label %__nv_sqrtf.exit31, !dbg !39

112:                                              ; preds = %109
  %113 = tail call float @llvm.nvvm.sqrt.approx.f(float %65) #4, !dbg !39
  br label %__nv_sqrtf.exit31, !dbg !39

__nv_sqrtf.exit31:                                ; preds = %105, %107, %110, %112
  %.0.i29 = phi float [ %106, %105 ], [ %108, %107 ], [ %111, %110 ], [ %113, %112 ], !dbg !39
  %114 = extractvalue { i32, i32, i32, i32 } %40, 3, !dbg !27
  %115 = extractvalue { i32, i32, i32, i32 } %43, 3, !dbg !29
  %116 = extractvalue { i32, i32, i32, i32 } %40, 2, !dbg !27
  %117 = extractvalue { i32, i32, i32, i32 } %43, 2, !dbg !29
  %118 = extractvalue { i32, i32, i32, i32 } %40, 1, !dbg !27
  %119 = extractvalue { i32, i32, i32, i32 } %43, 1, !dbg !29
  %120 = extractvalue { i32, i32, i32, i32 } %40, 0, !dbg !27
  %121 = extractvalue { i32, i32, i32, i32 } %43, 0, !dbg !29
  %122 = extractvalue { i32, i32, i32, i32 } %39, 3, !dbg !27
  %123 = extractvalue { i32, i32, i32, i32 } %39, 2, !dbg !27
  %124 = extractvalue { i32, i32, i32, i32 } %39, 1, !dbg !27
  %125 = extractvalue { i32, i32, i32, i32 } %39, 0, !dbg !27
  %126 = extractvalue { i32, i32, i32, i32 } %61, 3, !dbg !37
  %127 = bitcast i32 %126 to float, !dbg !37
  %128 = extractvalue { i32, i32, i32, i32 } %61, 2, !dbg !37
  %129 = bitcast i32 %128 to float, !dbg !37
  %130 = extractvalue { i32, i32, i32, i32 } %61, 1, !dbg !37
  %131 = bitcast i32 %130 to float, !dbg !37
  %132 = extractvalue { i32, i32, i32, i32 } %61, 0, !dbg !37
  %133 = bitcast i32 %132 to float, !dbg !37
  %134 = extractvalue { i32, i32, i32, i32 } %60, 3, !dbg !37
  %135 = bitcast i32 %134 to float, !dbg !37
  %136 = extractvalue { i32, i32, i32, i32 } %60, 2, !dbg !37
  %137 = bitcast i32 %136 to float, !dbg !37
  %138 = extractvalue { i32, i32, i32, i32 } %60, 1, !dbg !37
  %139 = bitcast i32 %138 to float, !dbg !37
  %140 = extractvalue { i32, i32, i32, i32 } %60, 0, !dbg !37
  %141 = bitcast i32 %140 to float, !dbg !37
  %142 = extractvalue { i32, i32, i32, i32 } %57, 3, !dbg !35
  %143 = extractvalue { i32, i32, i32, i32 } %57, 2, !dbg !35
  %144 = extractvalue { i32, i32, i32, i32 } %57, 1, !dbg !35
  %145 = extractvalue { i32, i32, i32, i32 } %57, 0, !dbg !35
  %146 = extractvalue { i32, i32, i32, i32 } %55, 3, !dbg !33
  %147 = extractvalue { i32, i32, i32, i32 } %55, 2, !dbg !33
  %148 = extractvalue { i32, i32, i32, i32 } %55, 1, !dbg !33
  %149 = extractvalue { i32, i32, i32, i32 } %55, 0, !dbg !33
  %150 = lshr i32 %16, 4, !dbg !40
  %151 = and i32 %150, 7, !dbg !40
  %152 = or disjoint i32 %151, %26, !dbg !21
  %153 = or disjoint i32 %152, 8, !dbg !21
  %154 = icmp slt i32 %153, 16, !dbg !22
  %155 = and i32 %19, 60, !dbg !16
  %156 = or disjoint i32 %15, %155, !dbg !17
  %157 = icmp slt i32 %156, 262144, !dbg !18
  %158 = and i1 %154, %157, !dbg !26
  %159 = icmp slt i32 %152, 16, !dbg !22
  %160 = and i1 %159, %157, !dbg !26
  %.frozen = freeze i32 %156, !dbg !41
  %161 = sdiv i32 %.frozen, 65536, !dbg !41
  %162 = mul i32 %161, 65536, !dbg !42
  %.decomposed = sub i32 %.frozen, %162, !dbg !42
  %163 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !43
  %164 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i19) #4, !dbg !43
  %165 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i24) #4, !dbg !43
  %166 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i29) #4, !dbg !43
  %167 = insertelement <4 x i32> poison, i32 %115, i64 0, !dbg !29
  %168 = insertelement <4 x i32> %167, i32 %117, i64 1, !dbg !29
  %169 = insertelement <4 x i32> %168, i32 %119, i64 2, !dbg !29
  %170 = insertelement <4 x i32> %169, i32 %121, i64 3, !dbg !29
  %171 = bitcast <4 x i32> %170 to <4 x float>, !dbg !29
  %172 = shufflevector <4 x float> %171, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !29
  %173 = insertelement <8 x i32> poison, i32 %114, i64 0, !dbg !27
  %174 = insertelement <8 x i32> %173, i32 %116, i64 1, !dbg !27
  %175 = insertelement <8 x i32> %174, i32 %118, i64 2, !dbg !27
  %176 = insertelement <8 x i32> %175, i32 %120, i64 3, !dbg !27
  %177 = insertelement <8 x i32> %176, i32 %122, i64 4, !dbg !27
  %178 = insertelement <8 x i32> %177, i32 %123, i64 5, !dbg !27
  %179 = insertelement <8 x i32> %178, i32 %124, i64 6, !dbg !27
  %180 = insertelement <8 x i32> %179, i32 %125, i64 7, !dbg !27
  %181 = bitcast <8 x i32> %180 to <8 x float>, !dbg !27
  %182 = fsub <8 x float> %181, %172, !dbg !44
  %183 = insertelement <4 x i32> poison, i32 %142, i64 0, !dbg !35
  %184 = insertelement <4 x i32> %183, i32 %143, i64 1, !dbg !35
  %185 = insertelement <4 x i32> %184, i32 %144, i64 2, !dbg !35
  %186 = insertelement <4 x i32> %185, i32 %145, i64 3, !dbg !35
  %187 = bitcast <4 x i32> %186 to <4 x float>, !dbg !35
  %188 = shufflevector <4 x float> %187, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !35
  %189 = insertelement <4 x i32> poison, i32 %146, i64 0, !dbg !33
  %190 = insertelement <4 x i32> %189, i32 %147, i64 1, !dbg !33
  %191 = insertelement <4 x i32> %190, i32 %148, i64 2, !dbg !33
  %192 = insertelement <4 x i32> %191, i32 %149, i64 3, !dbg !33
  %193 = bitcast <4 x i32> %192 to <4 x float>, !dbg !33
  %194 = shufflevector <4 x float> %193, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !33
  %195 = insertelement <8 x float> poison, float %166, i64 0, !dbg !45
  %196 = insertelement <8 x float> %195, float %165, i64 1, !dbg !45
  %197 = insertelement <8 x float> %196, float %164, i64 2, !dbg !45
  %198 = insertelement <8 x float> %197, float %163, i64 3, !dbg !45
  %199 = shufflevector <8 x float> %198, <8 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !45
  %200 = fmul <8 x float> %182, %199, !dbg !45
  %201 = fmul <8 x float> %200, %194, !dbg !46
  %202 = fadd <8 x float> %201, %188, !dbg !47
  %203 = fcmp olt <8 x float> %202, zeroinitializer, !dbg !48
  %204 = extractelement <8 x i1> %203, i64 7, !dbg !52
  %205 = extractelement <8 x float> %202, i64 7, !dbg !52
  %206 = select i1 %204, float 0.000000e+00, float %205, !dbg !52
  %207 = extractelement <8 x i1> %203, i64 6, !dbg !52
  %208 = extractelement <8 x float> %202, i64 6, !dbg !52
  %209 = select i1 %207, float 0.000000e+00, float %208, !dbg !52
  %210 = extractelement <8 x i1> %203, i64 5, !dbg !52
  %211 = extractelement <8 x float> %202, i64 5, !dbg !52
  %212 = select i1 %210, float 0.000000e+00, float %211, !dbg !52
  %213 = extractelement <8 x i1> %203, i64 4, !dbg !52
  %214 = extractelement <8 x float> %202, i64 4, !dbg !52
  %215 = select i1 %213, float 0.000000e+00, float %214, !dbg !52
  %216 = extractelement <8 x i1> %203, i64 3, !dbg !52
  %217 = extractelement <8 x float> %202, i64 3, !dbg !52
  %218 = select i1 %216, float 0.000000e+00, float %217, !dbg !52
  %219 = extractelement <8 x i1> %203, i64 2, !dbg !52
  %220 = extractelement <8 x float> %202, i64 2, !dbg !52
  %221 = select i1 %219, float 0.000000e+00, float %220, !dbg !52
  %222 = extractelement <8 x i1> %203, i64 1, !dbg !52
  %223 = extractelement <8 x float> %202, i64 1, !dbg !52
  %224 = select i1 %222, float 0.000000e+00, float %223, !dbg !52
  %225 = extractelement <8 x i1> %203, i64 0, !dbg !52
  %226 = extractelement <8 x float> %202, i64 0, !dbg !52
  %227 = select i1 %225, float 0.000000e+00, float %226, !dbg !52
  %228 = fadd float %206, %141, !dbg !53
  %229 = fadd float %209, %139, !dbg !53
  %230 = fadd float %212, %137, !dbg !53
  %231 = fadd float %215, %135, !dbg !53
  %232 = fadd float %218, %133, !dbg !53
  %233 = fadd float %221, %131, !dbg !53
  %234 = fadd float %224, %129, !dbg !53
  %235 = fadd float %227, %127, !dbg !53
  %236 = shl i32 %152, 16, !dbg !54
  %237 = shl i32 %153, 16, !dbg !54
  %238 = shl i32 %161, 20, !dbg !55
  %239 = add i32 %238, %.decomposed, !dbg !56
  %240 = add i32 %239, %236, !dbg !57
  %241 = add i32 %239, %237, !dbg !57
  %242 = sext i32 %240 to i64, !dbg !58
  %243 = getelementptr float, ptr addrspace(1) %6, i64 %242, !dbg !58
  %244 = sext i32 %241 to i64, !dbg !58
  %245 = getelementptr float, ptr addrspace(1) %6, i64 %244, !dbg !58
  %246 = shl i32 %16, 8, !dbg !59
  %247 = and i32 %246, 768, !dbg !59
  %248 = or disjoint i32 %247, %18, !dbg !59
  %249 = and i32 %19, 508, !dbg !59
  %250 = lshr exact i32 %247, 4, !dbg !59
  %251 = add nuw nsw i32 %250, %248, !dbg !59
  %252 = zext nneg i32 %251 to i64, !dbg !59
  %253 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %252, !dbg !59
  %254 = bitcast float %228 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %253, <1 x i32> %254, i1 true) #4, !dbg !59
  %255 = or disjoint i32 %248, 64, !dbg !59
  %256 = lshr i32 %255, 4, !dbg !59
  %257 = and i32 %256, 52, !dbg !59
  %258 = add nuw nsw i32 %257, %255, !dbg !59
  %259 = zext nneg i32 %258 to i64, !dbg !59
  %260 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %259, !dbg !59
  %261 = bitcast float %229 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %260, <1 x i32> %261, i1 true) #4, !dbg !59
  %262 = or disjoint i32 %248, 128, !dbg !59
  %263 = lshr i32 %262, 4, !dbg !59
  %264 = and i32 %263, 56, !dbg !59
  %265 = add nuw nsw i32 %264, %262, !dbg !59
  %266 = zext nneg i32 %265 to i64, !dbg !59
  %267 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %266, !dbg !59
  %268 = bitcast float %230 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %267, <1 x i32> %268, i1 true) #4, !dbg !59
  %269 = or disjoint i32 %248, 192, !dbg !59
  %270 = lshr i32 %269, 4, !dbg !59
  %271 = and i32 %270, 60, !dbg !59
  %272 = add nuw nsw i32 %271, %269, !dbg !59
  %273 = zext nneg i32 %272 to i64, !dbg !59
  %274 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %273, !dbg !59
  %275 = bitcast float %231 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %274, <1 x i32> %275, i1 true) #4, !dbg !59
  %276 = or disjoint i32 %248, 32, !dbg !59
  %277 = add nuw nsw i32 %276, %250, !dbg !59
  %278 = zext nneg i32 %277 to i64, !dbg !59
  %279 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %278, !dbg !59
  %280 = bitcast float %232 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %279, <1 x i32> %280, i1 true) #4, !dbg !59
  %281 = or disjoint i32 %248, 96, !dbg !59
  %282 = lshr i32 %281, 4, !dbg !59
  %283 = and i32 %282, 52, !dbg !59
  %284 = add nuw nsw i32 %283, %281, !dbg !59
  %285 = zext nneg i32 %284 to i64, !dbg !59
  %286 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %285, !dbg !59
  %287 = bitcast float %233 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %286, <1 x i32> %287, i1 true) #4, !dbg !59
  %288 = or disjoint i32 %248, 160, !dbg !59
  %289 = lshr i32 %288, 4, !dbg !59
  %290 = and i32 %289, 56, !dbg !59
  %291 = add nuw nsw i32 %290, %288, !dbg !59
  %292 = zext nneg i32 %291 to i64, !dbg !59
  %293 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %292, !dbg !59
  %294 = bitcast float %234 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %293, <1 x i32> %294, i1 true) #4, !dbg !59
  %295 = or disjoint i32 %248, 224, !dbg !59
  %296 = lshr i32 %295, 4, !dbg !59
  %297 = and i32 %296, 60, !dbg !59
  %298 = add nuw nsw i32 %297, %295, !dbg !59
  %299 = zext nneg i32 %298 to i64, !dbg !59
  %300 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %299, !dbg !59
  %301 = bitcast float %235 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %300, <1 x i32> %301, i1 true) #4, !dbg !59
  tail call void @llvm.nvvm.barrier0(), !dbg !59
  %302 = lshr i32 %19, 4, !dbg !59
  %303 = and i32 %302, 28, !dbg !59
  %304 = add nuw nsw i32 %303, %249, !dbg !59
  %305 = zext nneg i32 %304 to i64, !dbg !59
  %306 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %305, !dbg !59
  %307 = or disjoint i32 %249, 512, !dbg !59
  %308 = lshr i32 %307, 4, !dbg !59
  %309 = and i32 %308, 60, !dbg !59
  %310 = add nuw nsw i32 %309, %307, !dbg !59
  %311 = zext nneg i32 %310 to i64, !dbg !59
  %312 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %311, !dbg !59
  %313 = load <4 x i32>, ptr addrspace(3) %312, align 16, !dbg !59
  %.extract = load i32, ptr addrspace(3) %306, align 16, !dbg !59
  %314 = getelementptr inbounds i8, ptr addrspace(3) %306, i64 4, !dbg !59
  %.extract10 = load i32, ptr addrspace(3) %314, align 4, !dbg !59
  %315 = getelementptr inbounds i8, ptr addrspace(3) %306, i64 8, !dbg !59
  %.extract11 = load i32, ptr addrspace(3) %315, align 8, !dbg !59
  %316 = getelementptr inbounds i8, ptr addrspace(3) %306, i64 12, !dbg !59
  %.extract12 = load i32, ptr addrspace(3) %316, align 4, !dbg !59
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract10, i32 %.extract11, i32 %.extract12, ptr addrspace(1) %243, i1 %160) #4, !dbg !59
  %.extract13 = extractelement <4 x i32> %313, i64 0, !dbg !59
  %.extract14 = extractelement <4 x i32> %313, i64 1, !dbg !59
  %.extract15 = extractelement <4 x i32> %313, i64 2, !dbg !59
  %.extract16 = extractelement <4 x i32> %313, i64 3, !dbg !59
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract13, i32 %.extract14, i32 %.extract15, i32 %.extract16, ptr addrspace(1) %245, i1 %158) #4, !dbg !59
  ret void, !dbg !60
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cctj57h5wixnhdqvka4msvjkriqhrxnciu4tcomxcfokgoxgdjul.py", directory: "inductor_cache/ct")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_13, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_13, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_relu_13", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_relu_13", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 29, scope: !7)
!11 = !DILocation(line: 22, column: 48, scope: !7)
!12 = !DILocation(line: 22, column: 69, scope: !7)
!13 = !DILocation(line: 22, column: 53, scope: !7)
!14 = !DILocation(line: 22, column: 34, scope: !7)
!15 = !DILocation(line: 22, column: 75, scope: !7)
!16 = !DILocation(line: 23, column: 44, scope: !7)
!17 = !DILocation(line: 23, column: 23, scope: !7)
!18 = !DILocation(line: 24, column: 21, scope: !7)
!19 = !DILocation(line: 25, column: 28, scope: !7)
!20 = !DILocation(line: 25, column: 33, scope: !7)
!21 = !DILocation(line: 26, column: 23, scope: !7)
!22 = !DILocation(line: 27, column: 21, scope: !7)
!23 = !DILocation(line: 32, column: 38, scope: !7)
!24 = !DILocation(line: 32, column: 35, scope: !7)
!25 = !DILocation(line: 32, column: 30, scope: !7)
!26 = !DILocation(line: 32, column: 51, scope: !7)
!27 = !DILocation(line: 32, column: 43, scope: !7)
!28 = !DILocation(line: 33, column: 30, scope: !7)
!29 = !DILocation(line: 33, column: 35, scope: !7)
!30 = !DILocation(line: 34, column: 30, scope: !7)
!31 = !DILocation(line: 34, column: 35, scope: !7)
!32 = !DILocation(line: 35, column: 31, scope: !7)
!33 = !DILocation(line: 35, column: 36, scope: !7)
!34 = !DILocation(line: 36, column: 31, scope: !7)
!35 = !DILocation(line: 36, column: 36, scope: !7)
!36 = !DILocation(line: 37, column: 31, scope: !7)
!37 = !DILocation(line: 37, column: 44, scope: !7)
!38 = !DILocation(line: 40, column: 18, scope: !7)
!39 = !DILocation(line: 41, column: 26, scope: !7)
!40 = !DILocation(line: 26, column: 44, scope: !7)
!41 = !DILocation(line: 31, column: 19, scope: !7)
!42 = !DILocation(line: 30, column: 19, scope: !7)
!43 = !DILocation(line: 43, column: 18, scope: !7)
!44 = !DILocation(line: 38, column: 18, scope: !7)
!45 = !DILocation(line: 46, column: 19, scope: !7)
!46 = !DILocation(line: 47, column: 20, scope: !7)
!47 = !DILocation(line: 48, column: 20, scope: !7)
!48 = !DILocation(line: 118, column: 15, scope: !49, inlinedAt: !51)
!49 = distinct !DILexicalBlockFile(scope: !7, file: !50, discriminator: 0)
!50 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!51 = !DILocation(line: 50, column: 42, scope: !7)
!52 = !DILocation(line: 121, column: 29, scope: !49, inlinedAt: !51)
!53 = !DILocation(line: 51, column: 20, scope: !7)
!54 = !DILocation(line: 52, column: 36, scope: !7)
!55 = !DILocation(line: 52, column: 49, scope: !7)
!56 = !DILocation(line: 52, column: 30, scope: !7)
!57 = !DILocation(line: 52, column: 41, scope: !7)
!58 = !DILocation(line: 52, column: 25, scope: !7)
!59 = !DILocation(line: 52, column: 61, scope: !7)
!60 = !DILocation(line: 52, column: 4, scope: !7)
