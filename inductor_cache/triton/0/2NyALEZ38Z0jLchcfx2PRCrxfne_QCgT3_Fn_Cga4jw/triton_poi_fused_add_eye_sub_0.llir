; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_add_eye_sub_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 5, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 2, !dbg !12
  %10 = and i32 %9, 3, !dbg !12
  %11 = lshr i32 %8, 2, !dbg !12
  %12 = and i32 %11, 4, !dbg !12
  %13 = or disjoint i32 %10, %12, !dbg !12
  %14 = lshr i32 %8, 2, !dbg !12
  %15 = and i32 %14, 8, !dbg !12
  %16 = or disjoint i32 %13, %15, !dbg !12
  %17 = and i32 %8, 64, !dbg !12
  %18 = lshr exact i32 %17, 2, !dbg !12
  %19 = or disjoint i32 %16, %18, !dbg !12
  %20 = shl i32 %8, 1, !dbg !12
  %21 = and i32 %20, 6, !dbg !12
  %22 = and i32 %20, 30, !dbg !12
  %23 = or disjoint i32 %19, %7, !dbg !13
  %24 = or disjoint i32 %7, %22, !dbg !13
  %25 = or disjoint i32 %24, 1, !dbg !13
  %26 = icmp slt i32 %23, 32, !dbg !14
  %27 = icmp slt i32 %24, 32, !dbg !14
  %28 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %29 = shl i32 %28, 3, !dbg !16
  %.lobit14 = lshr i32 %8, 4, !dbg !17
  %30 = and i32 %.lobit14, 3, !dbg !17
  %31 = lshr exact i32 %17, 4, !dbg !17
  %32 = or disjoint i32 %30, %31, !dbg !17
  %33 = or disjoint i32 %29, %21, !dbg !18
  %34 = or disjoint i32 %32, %29, !dbg !18
  %35 = icmp slt i32 %33, 8, !dbg !19
  %36 = icmp slt i32 %34, 8, !dbg !19
  %.frozen = freeze i32 %24, !dbg !20
  %37 = sdiv i32 %.frozen, 8, !dbg !20
  %38 = mul i32 %37, 8, !dbg !21
  %.decomposed = sub i32 %.frozen, %38, !dbg !21
  %39 = srem i32 %25, 8, !dbg !21
  %40 = shl i32 %23, 3, !dbg !22
  %41 = add i32 %33, %40, !dbg !23
  %42 = sext i32 %41 to i64, !dbg !24
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !24
  %44 = and i1 %26, %35, !dbg !25
  %45 = and i1 %27, %36, !dbg !25
  %46 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %43, i1 %44) #2, !dbg !26
  %47 = extractvalue { i32, i32 } %46, 0, !dbg !26
  %48 = extractvalue { i32, i32 } %46, 1, !dbg !26
  %49 = shl i32 %8, 6, !dbg !26
  %50 = and i32 %49, 192, !dbg !26
  %51 = or disjoint i32 %10, %50, !dbg !26
  %52 = or disjoint i32 %51, %12, !dbg !26
  %53 = or disjoint i32 %52, %15, !dbg !26
  %54 = or disjoint i32 %53, %18, !dbg !26
  %55 = and i32 %20, 254, !dbg !26
  %56 = lshr exact i32 %50, 4, !dbg !26
  %57 = add nuw nsw i32 %54, %56, !dbg !26
  %58 = zext nneg i32 %57 to i64, !dbg !26
  %59 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %58, !dbg !26
  %60 = insertelement <1 x i32> poison, i32 %47, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %59, <1 x i32> %60, i1 true) #2, !dbg !26
  %61 = or disjoint i32 %54, 32, !dbg !26
  %62 = lshr i32 %61, 4, !dbg !26
  %63 = and i32 %62, 268435454, !dbg !26
  %64 = add nuw nsw i32 %63, %61, !dbg !26
  %65 = zext nneg i32 %64 to i64, !dbg !26
  %66 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %65, !dbg !26
  %67 = insertelement <1 x i32> poison, i32 %48, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %66, <1 x i32> %67, i1 true) #2, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %68 = lshr i32 %20, 4, !dbg !26
  %69 = and i32 %68, 14, !dbg !26
  %70 = add nuw nsw i32 %69, %55, !dbg !26
  %71 = zext nneg i32 %70 to i64, !dbg !26
  %72 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %71, !dbg !26
  %73 = load float, ptr addrspace(3) %72, align 8, !dbg !26
  %74 = getelementptr inbounds i8, ptr addrspace(3) %72, i64 4, !dbg !26
  %75 = load float, ptr addrspace(3) %74, align 4, !dbg !26
  %76 = shl i32 %34, 3, !dbg !27
  %77 = add i32 %76, %.decomposed, !dbg !28
  %78 = shl i32 %37, 6, !dbg !29
  %79 = add i32 %77, %78, !dbg !30
  %80 = sext i32 %79 to i64, !dbg !31
  %81 = getelementptr float, ptr addrspace(1) %0, i64 %80, !dbg !31
  %82 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %81, i1 %45) #2, !dbg !32
  %83 = extractvalue { i32, i32 } %82, 0, !dbg !32
  %84 = extractvalue { i32, i32 } %82, 1, !dbg !32
  %85 = bitcast i32 %83 to float, !dbg !32
  %86 = bitcast i32 %84 to float, !dbg !32
  %87 = icmp eq i32 %.decomposed, %34, !dbg !33
  %88 = icmp eq i32 %39, %34, !dbg !33
  %89 = select i1 %87, float 1.000000e+00, float 0.000000e+00, !dbg !34
  %90 = select i1 %88, float 1.000000e+00, float 0.000000e+00, !dbg !34
  %91 = fsub float %73, %85, !dbg !35
  %92 = fsub float %75, %86, !dbg !35
  %93 = fadd float %89, %91, !dbg !36
  %94 = fadd float %90, %92, !dbg !36
  %95 = fsub float %89, %91, !dbg !37
  %96 = fsub float %90, %92, !dbg !37
  %97 = getelementptr float, ptr addrspace(1) %1, i64 %42, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %98 = shl i32 %8, 4, !dbg !39
  %99 = and i32 %98, 240, !dbg !39
  %100 = or disjoint i32 %30, %99, !dbg !39
  %101 = or disjoint i32 %100, %31, !dbg !39
  %102 = lshr exact i32 %99, 3, !dbg !39
  %103 = add nuw nsw i32 %101, %102, !dbg !39
  %104 = zext nneg i32 %103 to i64, !dbg !39
  %105 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %104, !dbg !39
  %106 = bitcast float %93 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %105, <1 x i32> %106, i1 true) #2, !dbg !39
  %107 = or disjoint i32 %101, 8, !dbg !39
  %108 = lshr i32 %107, 3, !dbg !39
  %109 = add nuw nsw i32 %108, %107, !dbg !39
  %110 = zext nneg i32 %109 to i64, !dbg !39
  %111 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %110, !dbg !39
  %112 = bitcast float %94 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %111, <1 x i32> %112, i1 true) #2, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %113 = lshr i32 %55, 3, !dbg !39
  %114 = add nuw nsw i32 %113, %55, !dbg !39
  %115 = zext nneg i32 %114 to i64, !dbg !39
  %116 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %115, !dbg !39
  %117 = load i32, ptr addrspace(3) %116, align 4, !dbg !39
  %118 = or disjoint i32 %55, 1, !dbg !39
  %119 = add nuw nsw i32 %118, %113, !dbg !39
  %120 = zext nneg i32 %119 to i64, !dbg !39
  %121 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %120, !dbg !39
  %122 = load i32, ptr addrspace(3) %121, align 4, !dbg !39
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %117, i32 %122, ptr addrspace(1) %97, i1 %44) #2, !dbg !39
  %123 = getelementptr float, ptr addrspace(1) %2, i64 %42, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %124 = bitcast float %95 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %105, <1 x i32> %124, i1 true) #2, !dbg !41
  %125 = bitcast float %96 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %111, <1 x i32> %125, i1 true) #2, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %126 = load i32, ptr addrspace(3) %116, align 4, !dbg !41
  %127 = load i32, ptr addrspace(3) %121, align 4, !dbg !41
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %126, i32 %127, ptr addrspace(1) %123, i1 %44) #2, !dbg !41
  ret void, !dbg !42
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cmdhzrj5t4vm3baeiqavcnmjo7ilocy3abyelbyuarocit2zeuyb.py", directory: "inductor_cache/md")
!4 = !{ptr @triton_poi_fused_add_eye_sub_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_eye_sub_0, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_eye_sub_0", linkageName: "triton_poi_fused_add_eye_sub_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 31, column: 19, scope: !7)
!21 = !DILocation(line: 28, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 37, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 30, scope: !7)
!25 = !DILocation(line: 32, column: 50, scope: !7)
!26 = !DILocation(line: 32, column: 42, scope: !7)
!27 = !DILocation(line: 33, column: 37, scope: !7)
!28 = !DILocation(line: 33, column: 35, scope: !7)
!29 = !DILocation(line: 33, column: 45, scope: !7)
!30 = !DILocation(line: 33, column: 42, scope: !7)
!31 = !DILocation(line: 33, column: 30, scope: !7)
!32 = !DILocation(line: 33, column: 50, scope: !7)
!33 = !DILocation(line: 36, column: 19, scope: !7)
!34 = !DILocation(line: 39, column: 32, scope: !7)
!35 = !DILocation(line: 40, column: 18, scope: !7)
!36 = !DILocation(line: 41, column: 18, scope: !7)
!37 = !DILocation(line: 42, column: 19, scope: !7)
!38 = !DILocation(line: 43, column: 25, scope: !7)
!39 = !DILocation(line: 43, column: 43, scope: !7)
!40 = !DILocation(line: 44, column: 25, scope: !7)
!41 = !DILocation(line: 44, column: 44, scope: !7)
!42 = !DILocation(line: 44, column: 4, scope: !7)
