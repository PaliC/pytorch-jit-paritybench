; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__softmax_mul_sum_40(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %6 = shl i32 %5, 9, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 2, !dbg !12
  %9 = and i32 %8, 508, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = srem i32 %10, 1024, !dbg !14
  %12 = sdiv i32 %10, 16384, !dbg !15
  %13 = sext i32 %10 to i64, !dbg !16
  %14 = getelementptr float, ptr addrspace(1) %0, i64 %13, !dbg !16
  %15 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %14, i1 true) #1, !dbg !17
  %16 = extractvalue { i32, i32, i32, i32 } %15, 0, !dbg !17
  %17 = extractvalue { i32, i32, i32, i32 } %15, 1, !dbg !17
  %18 = extractvalue { i32, i32, i32, i32 } %15, 2, !dbg !17
  %19 = extractvalue { i32, i32, i32, i32 } %15, 3, !dbg !17
  %20 = bitcast i32 %16 to float, !dbg !17
  %21 = bitcast i32 %17 to float, !dbg !17
  %22 = bitcast i32 %18 to float, !dbg !17
  %23 = bitcast i32 %19 to float, !dbg !17
  %24 = shl nsw i32 %12, 10, !dbg !18
  %25 = add nsw i32 %24, %11, !dbg !19
  %26 = sext i32 %25 to i64, !dbg !20
  %27 = getelementptr float, ptr addrspace(1) %1, i64 %26, !dbg !20
  %28 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %27, i1 true) #1, !dbg !21
  %29 = extractvalue { i32, i32, i32, i32 } %28, 0, !dbg !21
  %30 = extractvalue { i32, i32, i32, i32 } %28, 1, !dbg !21
  %31 = extractvalue { i32, i32, i32, i32 } %28, 2, !dbg !21
  %32 = extractvalue { i32, i32, i32, i32 } %28, 3, !dbg !21
  %33 = bitcast i32 %29 to float, !dbg !21
  %34 = bitcast i32 %30 to float, !dbg !21
  %35 = bitcast i32 %31 to float, !dbg !21
  %36 = bitcast i32 %32 to float, !dbg !21
  %37 = getelementptr i8, ptr addrspace(1) %27, i64 16384, !dbg !22
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %37, i1 true) #1, !dbg !23
  %39 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !23
  %40 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !23
  %41 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !23
  %42 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !23
  %43 = bitcast i32 %39 to float, !dbg !23
  %44 = bitcast i32 %40 to float, !dbg !23
  %45 = bitcast i32 %41 to float, !dbg !23
  %46 = bitcast i32 %42 to float, !dbg !23
  %47 = add i32 %10, 65536, !dbg !24
  %48 = sext i32 %47 to i64, !dbg !25
  %49 = getelementptr float, ptr addrspace(1) %0, i64 %48, !dbg !25
  %50 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %49, i1 true) #1, !dbg !26
  %51 = extractvalue { i32, i32, i32, i32 } %50, 0, !dbg !26
  %52 = extractvalue { i32, i32, i32, i32 } %50, 1, !dbg !26
  %53 = extractvalue { i32, i32, i32, i32 } %50, 2, !dbg !26
  %54 = extractvalue { i32, i32, i32, i32 } %50, 3, !dbg !26
  %55 = bitcast i32 %51 to float, !dbg !26
  %56 = bitcast i32 %52 to float, !dbg !26
  %57 = bitcast i32 %53 to float, !dbg !26
  %58 = bitcast i32 %54 to float, !dbg !26
  %59 = fcmp ogt float %33, %43, !dbg !27
  %60 = fcmp ogt float %34, %44, !dbg !27
  %61 = fcmp ogt float %35, %45, !dbg !27
  %62 = fcmp ogt float %36, %46, !dbg !27
  %63 = fcmp uno float %33, 0.000000e+00, !dbg !31
  %64 = fcmp uno float %34, 0.000000e+00, !dbg !31
  %65 = fcmp uno float %35, 0.000000e+00, !dbg !31
  %66 = fcmp uno float %36, 0.000000e+00, !dbg !31
  %67 = or i1 %63, %59, !dbg !32
  %68 = or i1 %64, %60, !dbg !32
  %69 = or i1 %65, %61, !dbg !32
  %70 = or i1 %66, %62, !dbg !32
  %71 = select i1 %67, float %33, float %43, !dbg !33
  %72 = select i1 %68, float %34, float %44, !dbg !33
  %73 = select i1 %69, float %35, float %45, !dbg !33
  %74 = select i1 %70, float %36, float %46, !dbg !33
  %75 = fsub float %33, %71, !dbg !34
  %76 = fsub float %34, %72, !dbg !34
  %77 = fsub float %35, %73, !dbg !34
  %78 = fsub float %36, %74, !dbg !34
  %79 = fmul float %75, 0x3FF7154760000000, !dbg !35
  %80 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %79) #1, !dbg !35
  %81 = fmul float %76, 0x3FF7154760000000, !dbg !35
  %82 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %81) #1, !dbg !35
  %83 = fmul float %77, 0x3FF7154760000000, !dbg !35
  %84 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %83) #1, !dbg !35
  %85 = fmul float %78, 0x3FF7154760000000, !dbg !35
  %86 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %85) #1, !dbg !35
  %87 = fsub float %43, %71, !dbg !36
  %88 = fsub float %44, %72, !dbg !36
  %89 = fsub float %45, %73, !dbg !36
  %90 = fsub float %46, %74, !dbg !36
  %91 = fmul float %87, 0x3FF7154760000000, !dbg !37
  %92 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %91) #1, !dbg !37
  %93 = fmul float %88, 0x3FF7154760000000, !dbg !37
  %94 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %93) #1, !dbg !37
  %95 = fmul float %89, 0x3FF7154760000000, !dbg !37
  %96 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %95) #1, !dbg !37
  %97 = fmul float %90, 0x3FF7154760000000, !dbg !37
  %98 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %97) #1, !dbg !37
  %99 = fadd float %80, %92, !dbg !38
  %100 = fadd float %82, %94, !dbg !38
  %101 = fadd float %84, %96, !dbg !38
  %102 = fadd float %86, %98, !dbg !38
  %103 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %80, float %99) #1, !dbg !39
  %104 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %82, float %100) #1, !dbg !39
  %105 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %84, float %101) #1, !dbg !39
  %106 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %86, float %102) #1, !dbg !39
  %107 = fmul float %103, %20, !dbg !40
  %108 = fmul float %104, %21, !dbg !40
  %109 = fmul float %105, %22, !dbg !40
  %110 = fmul float %106, %23, !dbg !40
  %111 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %92, float %99) #1, !dbg !41
  %112 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %94, float %100) #1, !dbg !41
  %113 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %96, float %101) #1, !dbg !41
  %114 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %98, float %102) #1, !dbg !41
  %115 = fmul float %111, %55, !dbg !42
  %116 = fmul float %112, %56, !dbg !42
  %117 = fmul float %113, %57, !dbg !42
  %118 = fmul float %114, %58, !dbg !42
  %119 = fadd float %107, %115, !dbg !43
  %120 = fadd float %108, %116, !dbg !43
  %121 = fadd float %109, %117, !dbg !43
  %122 = fadd float %110, %118, !dbg !43
  %123 = getelementptr float, ptr addrspace(1) %2, i64 %13, !dbg !44
  %124 = bitcast float %119 to i32, !dbg !45
  %125 = bitcast float %120 to i32, !dbg !45
  %126 = bitcast float %121 to i32, !dbg !45
  %127 = bitcast float %122 to i32, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %124, i32 %125, i32 %126, i32 %127, ptr addrspace(1) %123, i1 true) #1, !dbg !45
  ret void, !dbg !46
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cereu2pyjtcsfmoi5xzpn7el7vn7t62x5dx5cj5ctrxshdppp6qu.py", directory: "inductor_cache/er")
!4 = !{ptr @triton_poi_fused__softmax_mul_sum_40, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__softmax_mul_sum_40, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__softmax_mul_sum_40", linkageName: "triton_poi_fused__softmax_mul_sum_40", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 19, scope: !7)
!16 = !DILocation(line: 27, column: 30, scope: !7)
!17 = !DILocation(line: 27, column: 35, scope: !7)
!18 = !DILocation(line: 28, column: 40, scope: !7)
!19 = !DILocation(line: 28, column: 35, scope: !7)
!20 = !DILocation(line: 28, column: 30, scope: !7)
!21 = !DILocation(line: 28, column: 45, scope: !7)
!22 = !DILocation(line: 29, column: 30, scope: !7)
!23 = !DILocation(line: 29, column: 52, scope: !7)
!24 = !DILocation(line: 30, column: 39, scope: !7)
!25 = !DILocation(line: 30, column: 31, scope: !7)
!26 = !DILocation(line: 30, column: 44, scope: !7)
!27 = !DILocation(line: 118, column: 15, scope: !28, inlinedAt: !30)
!28 = distinct !DILexicalBlockFile(scope: !7, file: !29, discriminator: 0)
!29 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!30 = !DILocation(line: 31, column: 40, scope: !7)
!31 = !DILocation(line: 120, column: 21, scope: !28, inlinedAt: !30)
!32 = !DILocation(line: 120, column: 16, scope: !28, inlinedAt: !30)
!33 = !DILocation(line: 121, column: 29, scope: !28, inlinedAt: !30)
!34 = !DILocation(line: 32, column: 18, scope: !7)
!35 = !DILocation(line: 33, column: 23, scope: !7)
!36 = !DILocation(line: 34, column: 18, scope: !7)
!37 = !DILocation(line: 35, column: 23, scope: !7)
!38 = !DILocation(line: 36, column: 18, scope: !7)
!39 = !DILocation(line: 37, column: 18, scope: !7)
!40 = !DILocation(line: 38, column: 19, scope: !7)
!41 = !DILocation(line: 39, column: 19, scope: !7)
!42 = !DILocation(line: 40, column: 20, scope: !7)
!43 = !DILocation(line: 41, column: 20, scope: !7)
!44 = !DILocation(line: 42, column: 25, scope: !7)
!45 = !DILocation(line: 42, column: 37, scope: !7)
!46 = !DILocation(line: 42, column: 4, scope: !7)
