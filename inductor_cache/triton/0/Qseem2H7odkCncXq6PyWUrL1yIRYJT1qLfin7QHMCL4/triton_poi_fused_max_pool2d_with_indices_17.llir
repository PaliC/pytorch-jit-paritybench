; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_max_pool2d_with_indices_17(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 9, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = and i32 %8, 1, !dbg !12
  %10 = and i32 %8, 127, !dbg !12
  %11 = or disjoint i32 %10, 128, !dbg !12
  %12 = lshr i32 %8, 1, !dbg !12
  %13 = and i32 %12, 63, !dbg !12
  %14 = or disjoint i32 %7, %10, !dbg !13
  %15 = or disjoint i32 %7, %11, !dbg !13
  %16 = or disjoint i32 %14, 256, !dbg !13
  %17 = or disjoint i32 %14, 384, !dbg !13
  %18 = or disjoint i32 %7, %13, !dbg !13
  %19 = or disjoint i32 %18, 64, !dbg !13
  %20 = or disjoint i32 %18, 128, !dbg !13
  %21 = or disjoint i32 %18, 192, !dbg !13
  %22 = or disjoint i32 %18, 256, !dbg !13
  %23 = or disjoint i32 %18, 320, !dbg !13
  %24 = or disjoint i32 %18, 384, !dbg !13
  %25 = or disjoint i32 %18, 448, !dbg !13
  %26 = icmp slt i32 %14, 324, !dbg !14
  %27 = icmp slt i32 %15, 324, !dbg !14
  %28 = icmp slt i32 %16, 324, !dbg !14
  %29 = icmp slt i32 %7, 0, !dbg !14
  %30 = icmp slt i32 %18, 324, !dbg !14
  %31 = icmp slt i32 %19, 324, !dbg !14
  %32 = icmp slt i32 %20, 324, !dbg !14
  %33 = icmp slt i32 %21, 324, !dbg !14
  %34 = icmp slt i32 %22, 324, !dbg !14
  %35 = icmp slt i32 %23, 324, !dbg !14
  %36 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %37 = shl i32 %36, 1, !dbg !16
  %38 = or disjoint i32 %37, %9, !dbg !17
  %39 = icmp slt i32 %37, 512, !dbg !18
  %40 = icmp slt i32 %38, 512, !dbg !18
  %41 = sdiv i32 %14, 9, !dbg !19
  %42 = sdiv i32 %15, 9, !dbg !19
  %43 = sdiv i32 %16, 9, !dbg !19
  %44 = sdiv i32 %17, 9, !dbg !19
  %45 = sdiv i32 %14, 81, !dbg !20
  %46 = sdiv i32 %15, 81, !dbg !20
  %47 = sdiv i32 %16, 81, !dbg !20
  %48 = sdiv i32 %17, 81, !dbg !20
  %.frozen = freeze i32 %18, !dbg !20
  %49 = sdiv i32 %.frozen, 81, !dbg !20
  %.frozen30 = freeze i32 %19, !dbg !20
  %50 = sdiv i32 %.frozen30, 81, !dbg !20
  %.frozen32 = freeze i32 %20, !dbg !20
  %51 = sdiv i32 %.frozen32, 81, !dbg !20
  %.frozen34 = freeze i32 %21, !dbg !20
  %52 = sdiv i32 %.frozen34, 81, !dbg !20
  %.frozen36 = freeze i32 %22, !dbg !20
  %53 = sdiv i32 %.frozen36, 81, !dbg !20
  %.frozen38 = freeze i32 %23, !dbg !20
  %54 = sdiv i32 %.frozen38, 81, !dbg !20
  %.frozen40 = freeze i32 %24, !dbg !20
  %55 = sdiv i32 %.frozen40, 81, !dbg !20
  %.frozen42 = freeze i32 %25, !dbg !20
  %56 = sdiv i32 %.frozen42, 81, !dbg !20
  %57 = mul i32 %49, 81, !dbg !21
  %.decomposed = sub i32 %.frozen, %57, !dbg !21
  %58 = mul i32 %50, 81, !dbg !21
  %.decomposed31 = sub i32 %.frozen30, %58, !dbg !21
  %59 = mul i32 %51, 81, !dbg !21
  %.decomposed33 = sub i32 %.frozen32, %59, !dbg !21
  %60 = mul i32 %52, 81, !dbg !21
  %.decomposed35 = sub i32 %.frozen34, %60, !dbg !21
  %61 = mul i32 %53, 81, !dbg !21
  %.decomposed37 = sub i32 %.frozen36, %61, !dbg !21
  %62 = mul i32 %54, 81, !dbg !21
  %.decomposed39 = sub i32 %.frozen38, %62, !dbg !21
  %63 = mul i32 %55, 81, !dbg !21
  %.decomposed41 = sub i32 %.frozen40, %63, !dbg !21
  %64 = mul i32 %56, 81, !dbg !21
  %.decomposed43 = sub i32 %.frozen42, %64, !dbg !21
  %65 = add i32 %37, -9216, !dbg !22
  %66 = mul i32 %45, 147968, !dbg !23
  %67 = mul i32 %46, 147968, !dbg !23
  %68 = mul i32 %47, 147968, !dbg !23
  %69 = mul i32 %48, 147968, !dbg !23
  %70 = add i32 %37, -8704, !dbg !24
  %71 = add i32 %37, -8192, !dbg !25
  %72 = add i32 %37, -512, !dbg !26
  %73 = add i32 %37, 512, !dbg !27
  %74 = insertelement <2 x i32> poison, i32 %14, i64 0, !dbg !28
  %75 = insertelement <2 x i32> %74, i32 %41, i64 1, !dbg !28
  %76 = srem <2 x i32> %75, splat (i32 9), !dbg !28
  %77 = extractelement <2 x i32> %76, i64 1, !dbg !29
  %78 = icmp sgt i32 %77, 0, !dbg !30
  %79 = shl nsw <2 x i32> %76, splat (i32 1), !dbg !31
  %80 = extractelement <2 x i32> %76, i64 0, !dbg !29
  %81 = icmp sgt i32 %80, 0, !dbg !32
  %82 = and i1 %81, %78, !dbg !33
  %83 = shl nsw i32 %80, 10, !dbg !34
  %84 = mul nsw i32 %77, 17408, !dbg !35
  %85 = add i32 %66, %83, !dbg !36
  %86 = add i32 %85, %65, !dbg !37
  %87 = add i32 %86, %84, !dbg !38
  %88 = sext i32 %87 to i64, !dbg !39
  %89 = getelementptr float, ptr addrspace(1) %0, i64 %88, !dbg !39
  %90 = and i1 %39, %82, !dbg !40
  %91 = and i1 %26, %90, !dbg !41
  %92 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %89, i1 %91, i32 -8388608, i1 %91, i32 -8388608, i1 %91) #2, !dbg !42
  %93 = extractvalue { i32, i32 } %92, 0, !dbg !42
  %94 = extractvalue { i32, i32 } %92, 1, !dbg !42
  %95 = icmp sgt <2 x i32> %76, splat (i32 -1), !dbg !43
  %96 = extractelement <2 x i1> %95, i64 0, !dbg !44
  %97 = and i1 %96, %78, !dbg !44
  %98 = add i32 %85, %70, !dbg !45
  %99 = add i32 %98, %84, !dbg !46
  %100 = sext i32 %99 to i64, !dbg !47
  %101 = getelementptr float, ptr addrspace(1) %0, i64 %100, !dbg !47
  %102 = and i1 %39, %97, !dbg !48
  %103 = and i1 %26, %102, !dbg !49
  %104 = or disjoint <2 x i32> %79, splat (i32 1), !dbg !50
  %105 = icmp slt <2 x i32> %104, splat (i32 17), !dbg !51
  %106 = and <2 x i1> %95, %105, !dbg !52
  %107 = extractelement <2 x i1> %106, i64 0, !dbg !53
  %108 = and i1 %78, %107, !dbg !54
  %109 = add i32 %85, %71, !dbg !55
  %110 = add i32 %109, %84, !dbg !56
  %111 = sext i32 %110 to i64, !dbg !57
  %112 = getelementptr float, ptr addrspace(1) %0, i64 %111, !dbg !57
  %113 = and i1 %39, %108, !dbg !58
  %114 = and i1 %26, %113, !dbg !59
  %115 = extractelement <2 x i1> %95, i64 1, !dbg !60
  %116 = and i1 %81, %115, !dbg !60
  %117 = add i32 %85, %72, !dbg !61
  %118 = add i32 %117, %84, !dbg !62
  %119 = sext i32 %118 to i64, !dbg !63
  %120 = getelementptr float, ptr addrspace(1) %0, i64 %119, !dbg !63
  %121 = and i1 %39, %116, !dbg !64
  %122 = and i1 %26, %121, !dbg !65
  %123 = or i32 %77, %80, !dbg !29
  %124 = icmp sgt i32 %123, -1, !dbg !29
  %125 = add i32 %85, %37, !dbg !66
  %126 = add i32 %125, %84, !dbg !67
  %127 = sext i32 %126 to i64, !dbg !68
  %128 = getelementptr float, ptr addrspace(1) %0, i64 %127, !dbg !68
  %129 = and i1 %39, %124, !dbg !69
  %130 = and i1 %26, %129, !dbg !70
  %131 = and i1 %115, %107, !dbg !71
  %132 = add i32 %85, %73, !dbg !72
  %133 = add i32 %132, %84, !dbg !73
  %134 = sext i32 %133 to i64, !dbg !74
  %135 = getelementptr float, ptr addrspace(1) %0, i64 %134, !dbg !74
  %136 = and i1 %39, %131, !dbg !75
  %137 = and i1 %26, %136, !dbg !76
  %138 = insertelement <2 x i32> poison, i32 %15, i64 0, !dbg !28
  %139 = insertelement <2 x i32> %138, i32 %42, i64 1, !dbg !28
  %140 = srem <2 x i32> %139, splat (i32 9), !dbg !28
  %141 = extractelement <2 x i32> %140, i64 1, !dbg !29
  %142 = icmp sgt i32 %141, 0, !dbg !30
  %143 = shl nsw <2 x i32> %140, splat (i32 1), !dbg !31
  %144 = extractelement <2 x i32> %140, i64 0, !dbg !29
  %145 = icmp sgt i32 %144, 0, !dbg !32
  %146 = and i1 %145, %142, !dbg !33
  %147 = shl nsw i32 %144, 10, !dbg !34
  %148 = mul nsw i32 %141, 17408, !dbg !35
  %149 = add i32 %67, %147, !dbg !36
  %150 = add i32 %149, %65, !dbg !37
  %151 = add i32 %150, %148, !dbg !38
  %152 = sext i32 %151 to i64, !dbg !39
  %153 = getelementptr float, ptr addrspace(1) %0, i64 %152, !dbg !39
  %154 = and i1 %39, %146, !dbg !40
  %155 = and i1 %27, %154, !dbg !41
  %156 = icmp sgt <2 x i32> %140, splat (i32 -1), !dbg !43
  %157 = extractelement <2 x i1> %156, i64 0, !dbg !44
  %158 = and i1 %157, %142, !dbg !44
  %159 = add i32 %149, %70, !dbg !45
  %160 = add i32 %159, %148, !dbg !46
  %161 = sext i32 %160 to i64, !dbg !47
  %162 = getelementptr float, ptr addrspace(1) %0, i64 %161, !dbg !47
  %163 = and i1 %39, %158, !dbg !48
  %164 = and i1 %27, %163, !dbg !49
  %165 = or disjoint <2 x i32> %143, splat (i32 1), !dbg !50
  %166 = icmp slt <2 x i32> %165, splat (i32 17), !dbg !51
  %167 = and <2 x i1> %156, %166, !dbg !52
  %168 = extractelement <2 x i1> %167, i64 0, !dbg !53
  %169 = and i1 %142, %168, !dbg !54
  %170 = add i32 %149, %71, !dbg !55
  %171 = add i32 %170, %148, !dbg !56
  %172 = sext i32 %171 to i64, !dbg !57
  %173 = getelementptr float, ptr addrspace(1) %0, i64 %172, !dbg !57
  %174 = and i1 %39, %169, !dbg !58
  %175 = and i1 %27, %174, !dbg !59
  %176 = extractelement <2 x i1> %156, i64 1, !dbg !60
  %177 = and i1 %145, %176, !dbg !60
  %178 = add i32 %149, %72, !dbg !61
  %179 = add i32 %178, %148, !dbg !62
  %180 = sext i32 %179 to i64, !dbg !63
  %181 = getelementptr float, ptr addrspace(1) %0, i64 %180, !dbg !63
  %182 = and i1 %39, %177, !dbg !64
  %183 = and i1 %27, %182, !dbg !65
  %184 = or i32 %141, %144, !dbg !29
  %185 = icmp sgt i32 %184, -1, !dbg !29
  %186 = add i32 %149, %37, !dbg !66
  %187 = add i32 %186, %148, !dbg !67
  %188 = sext i32 %187 to i64, !dbg !68
  %189 = getelementptr float, ptr addrspace(1) %0, i64 %188, !dbg !68
  %190 = and i1 %39, %185, !dbg !69
  %191 = and i1 %27, %190, !dbg !70
  %192 = and i1 %176, %168, !dbg !71
  %193 = add i32 %149, %73, !dbg !72
  %194 = add i32 %193, %148, !dbg !73
  %195 = sext i32 %194 to i64, !dbg !74
  %196 = getelementptr float, ptr addrspace(1) %0, i64 %195, !dbg !74
  %197 = and i1 %39, %192, !dbg !75
  %198 = and i1 %27, %197, !dbg !76
  %199 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %153, i1 %155, i32 -8388608, i1 %155, i32 -8388608, i1 %155) #2, !dbg !42
  %200 = extractvalue { i32, i32 } %199, 0, !dbg !42
  %201 = extractvalue { i32, i32 } %199, 1, !dbg !42
  %202 = insertelement <2 x i32> poison, i32 %16, i64 0, !dbg !28
  %203 = insertelement <2 x i32> %202, i32 %43, i64 1, !dbg !28
  %204 = srem <2 x i32> %203, splat (i32 9), !dbg !28
  %205 = extractelement <2 x i32> %204, i64 1, !dbg !29
  %206 = icmp sgt i32 %205, 0, !dbg !30
  %207 = shl nsw <2 x i32> %204, splat (i32 1), !dbg !31
  %208 = extractelement <2 x i32> %204, i64 0, !dbg !29
  %209 = icmp sgt i32 %208, 0, !dbg !32
  %210 = and i1 %209, %206, !dbg !33
  %211 = shl nsw i32 %208, 10, !dbg !34
  %212 = mul nsw i32 %205, 17408, !dbg !35
  %213 = add i32 %68, %211, !dbg !36
  %214 = add i32 %213, %212, !dbg !37
  %215 = add i32 %214, %65, !dbg !38
  %216 = sext i32 %215 to i64, !dbg !39
  %217 = getelementptr float, ptr addrspace(1) %0, i64 %216, !dbg !39
  %218 = and i1 %210, %39, !dbg !40
  %219 = and i1 %28, %218, !dbg !41
  %220 = icmp sgt <2 x i32> %204, splat (i32 -1), !dbg !43
  %221 = extractelement <2 x i1> %220, i64 0, !dbg !44
  %222 = and i1 %221, %206, !dbg !44
  %223 = add i32 %214, %70, !dbg !46
  %224 = sext i32 %223 to i64, !dbg !47
  %225 = getelementptr float, ptr addrspace(1) %0, i64 %224, !dbg !47
  %226 = and i1 %222, %39, !dbg !48
  %227 = and i1 %28, %226, !dbg !49
  %228 = or disjoint <2 x i32> %207, splat (i32 1), !dbg !50
  %229 = icmp slt <2 x i32> %228, splat (i32 17), !dbg !51
  %230 = and <2 x i1> %220, %229, !dbg !52
  %231 = extractelement <2 x i1> %230, i64 0, !dbg !53
  %232 = and i1 %206, %231, !dbg !54
  %233 = add i32 %214, %71, !dbg !56
  %234 = sext i32 %233 to i64, !dbg !57
  %235 = getelementptr float, ptr addrspace(1) %0, i64 %234, !dbg !57
  %236 = and i1 %232, %39, !dbg !58
  %237 = and i1 %28, %236, !dbg !59
  %238 = extractelement <2 x i1> %220, i64 1, !dbg !60
  %239 = and i1 %209, %238, !dbg !60
  %240 = add i32 %214, %72, !dbg !62
  %241 = sext i32 %240 to i64, !dbg !63
  %242 = getelementptr float, ptr addrspace(1) %0, i64 %241, !dbg !63
  %243 = and i1 %239, %39, !dbg !64
  %244 = and i1 %28, %243, !dbg !65
  %245 = or i32 %205, %208, !dbg !29
  %246 = icmp sgt i32 %245, -1, !dbg !29
  %247 = add i32 %214, %37, !dbg !67
  %248 = sext i32 %247 to i64, !dbg !68
  %249 = getelementptr float, ptr addrspace(1) %0, i64 %248, !dbg !68
  %250 = and i1 %246, %39, !dbg !69
  %251 = and i1 %28, %250, !dbg !70
  %252 = and i1 %238, %231, !dbg !71
  %253 = add i32 %214, %73, !dbg !73
  %254 = sext i32 %253 to i64, !dbg !74
  %255 = getelementptr float, ptr addrspace(1) %0, i64 %254, !dbg !74
  %256 = and i1 %252, %39, !dbg !75
  %257 = and i1 %28, %256, !dbg !76
  %258 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %217, i1 %219, i32 -8388608, i1 %219, i32 -8388608, i1 %219) #2, !dbg !42
  %259 = extractvalue { i32, i32 } %258, 0, !dbg !42
  %260 = extractvalue { i32, i32 } %258, 1, !dbg !42
  %261 = insertelement <2 x i32> poison, i32 %17, i64 0, !dbg !28
  %262 = insertelement <2 x i32> %261, i32 %44, i64 1, !dbg !28
  %263 = srem <2 x i32> %262, splat (i32 9), !dbg !28
  %264 = extractelement <2 x i32> %263, i64 1, !dbg !29
  %265 = icmp sgt i32 %264, 0, !dbg !30
  %266 = shl nsw <2 x i32> %263, splat (i32 1), !dbg !31
  %267 = extractelement <2 x i32> %263, i64 0, !dbg !29
  %268 = icmp sgt i32 %267, 0, !dbg !32
  %269 = and i1 %268, %265, !dbg !33
  %270 = shl nsw i32 %267, 10, !dbg !34
  %271 = mul nsw i32 %264, 17408, !dbg !35
  %272 = add i32 %69, %270, !dbg !36
  %273 = add i32 %272, %271, !dbg !37
  %274 = add i32 %273, %65, !dbg !38
  %275 = sext i32 %274 to i64, !dbg !39
  %276 = getelementptr float, ptr addrspace(1) %0, i64 %275, !dbg !39
  %277 = and i1 %269, %39, !dbg !40
  %278 = and i1 %29, %277, !dbg !41
  %279 = icmp sgt <2 x i32> %263, splat (i32 -1), !dbg !43
  %280 = extractelement <2 x i1> %279, i64 0, !dbg !44
  %281 = and i1 %280, %265, !dbg !44
  %282 = add i32 %273, %70, !dbg !46
  %283 = sext i32 %282 to i64, !dbg !47
  %284 = getelementptr float, ptr addrspace(1) %0, i64 %283, !dbg !47
  %285 = and i1 %281, %39, !dbg !48
  %286 = and i1 %29, %285, !dbg !49
  %287 = or disjoint <2 x i32> %266, splat (i32 1), !dbg !50
  %288 = icmp slt <2 x i32> %287, splat (i32 17), !dbg !51
  %289 = and <2 x i1> %279, %288, !dbg !52
  %290 = extractelement <2 x i1> %289, i64 0, !dbg !53
  %291 = and i1 %265, %290, !dbg !54
  %292 = add i32 %273, %71, !dbg !56
  %293 = sext i32 %292 to i64, !dbg !57
  %294 = getelementptr float, ptr addrspace(1) %0, i64 %293, !dbg !57
  %295 = and i1 %291, %39, !dbg !58
  %296 = and i1 %29, %295, !dbg !59
  %297 = extractelement <2 x i1> %279, i64 1, !dbg !60
  %298 = and i1 %268, %297, !dbg !60
  %299 = add i32 %273, %72, !dbg !62
  %300 = sext i32 %299 to i64, !dbg !63
  %301 = getelementptr float, ptr addrspace(1) %0, i64 %300, !dbg !63
  %302 = and i1 %298, %39, !dbg !64
  %303 = and i1 %29, %302, !dbg !65
  %304 = or i32 %264, %267, !dbg !29
  %305 = icmp sgt i32 %304, -1, !dbg !29
  %306 = add i32 %273, %37, !dbg !67
  %307 = sext i32 %306 to i64, !dbg !68
  %308 = getelementptr float, ptr addrspace(1) %0, i64 %307, !dbg !68
  %309 = and i1 %305, %39, !dbg !69
  %310 = and i1 %29, %309, !dbg !70
  %311 = and i1 %297, %290, !dbg !71
  %312 = add i32 %273, %73, !dbg !73
  %313 = sext i32 %312 to i64, !dbg !74
  %314 = getelementptr float, ptr addrspace(1) %0, i64 %313, !dbg !74
  %315 = and i1 %311, %39, !dbg !75
  %316 = and i1 %29, %315, !dbg !76
  %317 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %276, i1 %278, i32 -8388608, i1 %278, i32 -8388608, i1 %278) #2, !dbg !42
  %318 = extractvalue { i32, i32 } %317, 0, !dbg !42
  %319 = extractvalue { i32, i32 } %317, 1, !dbg !42
  %320 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %101, i1 %103, i32 -8388608, i1 %103, i32 -8388608, i1 %103) #2, !dbg !77
  %321 = extractvalue { i32, i32 } %320, 0, !dbg !77
  %322 = extractvalue { i32, i32 } %320, 1, !dbg !77
  %323 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %162, i1 %164, i32 -8388608, i1 %164, i32 -8388608, i1 %164) #2, !dbg !77
  %324 = extractvalue { i32, i32 } %323, 0, !dbg !77
  %325 = extractvalue { i32, i32 } %323, 1, !dbg !77
  %326 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %225, i1 %227, i32 -8388608, i1 %227, i32 -8388608, i1 %227) #2, !dbg !77
  %327 = extractvalue { i32, i32 } %326, 0, !dbg !77
  %328 = extractvalue { i32, i32 } %326, 1, !dbg !77
  %329 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %284, i1 %286, i32 -8388608, i1 %286, i32 -8388608, i1 %286) #2, !dbg !77
  %330 = extractvalue { i32, i32 } %329, 0, !dbg !77
  %331 = extractvalue { i32, i32 } %329, 1, !dbg !77
  %332 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %112, i1 %114, i32 -8388608, i1 %114, i32 -8388608, i1 %114) #2, !dbg !78
  %333 = extractvalue { i32, i32 } %332, 0, !dbg !78
  %334 = extractvalue { i32, i32 } %332, 1, !dbg !78
  %335 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %173, i1 %175, i32 -8388608, i1 %175, i32 -8388608, i1 %175) #2, !dbg !78
  %336 = extractvalue { i32, i32 } %335, 0, !dbg !78
  %337 = extractvalue { i32, i32 } %335, 1, !dbg !78
  %338 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %235, i1 %237, i32 -8388608, i1 %237, i32 -8388608, i1 %237) #2, !dbg !78
  %339 = extractvalue { i32, i32 } %338, 0, !dbg !78
  %340 = extractvalue { i32, i32 } %338, 1, !dbg !78
  %341 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %294, i1 %296, i32 -8388608, i1 %296, i32 -8388608, i1 %296) #2, !dbg !78
  %342 = extractvalue { i32, i32 } %341, 0, !dbg !78
  %343 = extractvalue { i32, i32 } %341, 1, !dbg !78
  %344 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %120, i1 %122, i32 -8388608, i1 %122, i32 -8388608, i1 %122) #2, !dbg !79
  %345 = extractvalue { i32, i32 } %344, 0, !dbg !79
  %346 = extractvalue { i32, i32 } %344, 1, !dbg !79
  %347 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %181, i1 %183, i32 -8388608, i1 %183, i32 -8388608, i1 %183) #2, !dbg !79
  %348 = extractvalue { i32, i32 } %347, 0, !dbg !79
  %349 = extractvalue { i32, i32 } %347, 1, !dbg !79
  %350 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %242, i1 %244, i32 -8388608, i1 %244, i32 -8388608, i1 %244) #2, !dbg !79
  %351 = extractvalue { i32, i32 } %350, 0, !dbg !79
  %352 = extractvalue { i32, i32 } %350, 1, !dbg !79
  %353 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %301, i1 %303, i32 -8388608, i1 %303, i32 -8388608, i1 %303) #2, !dbg !79
  %354 = extractvalue { i32, i32 } %353, 0, !dbg !79
  %355 = extractvalue { i32, i32 } %353, 1, !dbg !79
  %356 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %128, i1 %130, i32 -8388608, i1 %130, i32 -8388608, i1 %130) #2, !dbg !80
  %357 = extractvalue { i32, i32 } %356, 0, !dbg !80
  %358 = extractvalue { i32, i32 } %356, 1, !dbg !80
  %359 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %189, i1 %191, i32 -8388608, i1 %191, i32 -8388608, i1 %191) #2, !dbg !80
  %360 = extractvalue { i32, i32 } %359, 0, !dbg !80
  %361 = extractvalue { i32, i32 } %359, 1, !dbg !80
  %362 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %249, i1 %251, i32 -8388608, i1 %251, i32 -8388608, i1 %251) #2, !dbg !80
  %363 = extractvalue { i32, i32 } %362, 0, !dbg !80
  %364 = extractvalue { i32, i32 } %362, 1, !dbg !80
  %365 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %308, i1 %310, i32 -8388608, i1 %310, i32 -8388608, i1 %310) #2, !dbg !80
  %366 = extractvalue { i32, i32 } %365, 0, !dbg !80
  %367 = extractvalue { i32, i32 } %365, 1, !dbg !80
  %368 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %135, i1 %137, i32 -8388608, i1 %137, i32 -8388608, i1 %137) #2, !dbg !81
  %369 = extractvalue { i32, i32 } %368, 0, !dbg !81
  %370 = extractvalue { i32, i32 } %368, 1, !dbg !81
  %371 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %196, i1 %198, i32 -8388608, i1 %198, i32 -8388608, i1 %198) #2, !dbg !81
  %372 = extractvalue { i32, i32 } %371, 0, !dbg !81
  %373 = extractvalue { i32, i32 } %371, 1, !dbg !81
  %374 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %255, i1 %257, i32 -8388608, i1 %257, i32 -8388608, i1 %257) #2, !dbg !81
  %375 = extractvalue { i32, i32 } %374, 0, !dbg !81
  %376 = extractvalue { i32, i32 } %374, 1, !dbg !81
  %377 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %314, i1 %316, i32 -8388608, i1 %316, i32 -8388608, i1 %316) #2, !dbg !81
  %378 = extractvalue { i32, i32 } %377, 0, !dbg !81
  %379 = extractvalue { i32, i32 } %377, 1, !dbg !81
  %380 = extractelement <2 x i1> %106, i64 1, !dbg !53
  %381 = and i1 %81, %380, !dbg !82
  %382 = extractelement <2 x i1> %167, i64 1, !dbg !53
  %383 = and i1 %145, %382, !dbg !82
  %384 = extractelement <2 x i1> %230, i64 1, !dbg !53
  %385 = and i1 %209, %384, !dbg !82
  %386 = extractelement <2 x i1> %289, i64 1, !dbg !53
  %387 = and i1 %268, %386, !dbg !82
  %388 = add i32 %37, 8192, !dbg !83
  %389 = add i32 %85, %388, !dbg !84
  %390 = add i32 %389, %84, !dbg !85
  %391 = add i32 %149, %388, !dbg !84
  %392 = add i32 %391, %148, !dbg !85
  %393 = add i32 %214, %388, !dbg !85
  %394 = add i32 %273, %388, !dbg !85
  %395 = sext i32 %390 to i64, !dbg !86
  %396 = getelementptr float, ptr addrspace(1) %0, i64 %395, !dbg !86
  %397 = sext i32 %392 to i64, !dbg !86
  %398 = getelementptr float, ptr addrspace(1) %0, i64 %397, !dbg !86
  %399 = sext i32 %393 to i64, !dbg !86
  %400 = getelementptr float, ptr addrspace(1) %0, i64 %399, !dbg !86
  %401 = sext i32 %394 to i64, !dbg !86
  %402 = getelementptr float, ptr addrspace(1) %0, i64 %401, !dbg !86
  %403 = and i1 %39, %381, !dbg !87
  %404 = and i1 %39, %383, !dbg !87
  %405 = and i1 %385, %39, !dbg !87
  %406 = and i1 %387, %39, !dbg !87
  %407 = and i1 %26, %403, !dbg !88
  %408 = and i1 %27, %404, !dbg !88
  %409 = and i1 %28, %405, !dbg !88
  %410 = and i1 %29, %406, !dbg !88
  %411 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %396, i1 %407, i32 -8388608, i1 %407, i32 -8388608, i1 %407) #2, !dbg !89
  %412 = extractvalue { i32, i32 } %411, 0, !dbg !89
  %413 = extractvalue { i32, i32 } %411, 1, !dbg !89
  %414 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %398, i1 %408, i32 -8388608, i1 %408, i32 -8388608, i1 %408) #2, !dbg !89
  %415 = extractvalue { i32, i32 } %414, 0, !dbg !89
  %416 = extractvalue { i32, i32 } %414, 1, !dbg !89
  %417 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %400, i1 %409, i32 -8388608, i1 %409, i32 -8388608, i1 %409) #2, !dbg !89
  %418 = extractvalue { i32, i32 } %417, 0, !dbg !89
  %419 = extractvalue { i32, i32 } %417, 1, !dbg !89
  %420 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %402, i1 %410, i32 -8388608, i1 %410, i32 -8388608, i1 %410) #2, !dbg !89
  %421 = extractvalue { i32, i32 } %420, 0, !dbg !89
  %422 = extractvalue { i32, i32 } %420, 1, !dbg !89
  %423 = and i1 %96, %380, !dbg !90
  %424 = and i1 %157, %382, !dbg !90
  %425 = and i1 %221, %384, !dbg !90
  %426 = and i1 %280, %386, !dbg !90
  %427 = add i32 %37, 8704, !dbg !91
  %428 = add i32 %85, %427, !dbg !92
  %429 = add i32 %428, %84, !dbg !93
  %430 = add i32 %149, %427, !dbg !92
  %431 = add i32 %430, %148, !dbg !93
  %432 = add i32 %214, %427, !dbg !93
  %433 = add i32 %273, %427, !dbg !93
  %434 = sext i32 %429 to i64, !dbg !94
  %435 = getelementptr float, ptr addrspace(1) %0, i64 %434, !dbg !94
  %436 = sext i32 %431 to i64, !dbg !94
  %437 = getelementptr float, ptr addrspace(1) %0, i64 %436, !dbg !94
  %438 = sext i32 %432 to i64, !dbg !94
  %439 = getelementptr float, ptr addrspace(1) %0, i64 %438, !dbg !94
  %440 = sext i32 %433 to i64, !dbg !94
  %441 = getelementptr float, ptr addrspace(1) %0, i64 %440, !dbg !94
  %442 = and i1 %39, %423, !dbg !95
  %443 = and i1 %39, %424, !dbg !95
  %444 = and i1 %425, %39, !dbg !95
  %445 = and i1 %426, %39, !dbg !95
  %446 = and i1 %26, %442, !dbg !96
  %447 = and i1 %27, %443, !dbg !96
  %448 = and i1 %28, %444, !dbg !96
  %449 = and i1 %29, %445, !dbg !96
  %450 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %435, i1 %446, i32 -8388608, i1 %446, i32 -8388608, i1 %446) #2, !dbg !97
  %451 = extractvalue { i32, i32 } %450, 0, !dbg !97
  %452 = extractvalue { i32, i32 } %450, 1, !dbg !97
  %453 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %437, i1 %447, i32 -8388608, i1 %447, i32 -8388608, i1 %447) #2, !dbg !97
  %454 = extractvalue { i32, i32 } %453, 0, !dbg !97
  %455 = extractvalue { i32, i32 } %453, 1, !dbg !97
  %456 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %439, i1 %448, i32 -8388608, i1 %448, i32 -8388608, i1 %448) #2, !dbg !97
  %457 = extractvalue { i32, i32 } %456, 0, !dbg !97
  %458 = extractvalue { i32, i32 } %456, 1, !dbg !97
  %459 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %441, i1 %449, i32 -8388608, i1 %449, i32 -8388608, i1 %449) #2, !dbg !97
  %460 = extractvalue { i32, i32 } %459, 0, !dbg !97
  %461 = extractvalue { i32, i32 } %459, 1, !dbg !97
  %462 = and i1 %107, %380, !dbg !53
  %463 = and i1 %168, %382, !dbg !53
  %464 = and i1 %231, %384, !dbg !53
  %465 = and i1 %290, %386, !dbg !53
  %466 = add i32 %37, 9216, !dbg !98
  %467 = add i32 %85, %466, !dbg !99
  %468 = add i32 %467, %84, !dbg !100
  %469 = add i32 %149, %466, !dbg !99
  %470 = add i32 %469, %148, !dbg !100
  %471 = add i32 %214, %466, !dbg !100
  %472 = add i32 %273, %466, !dbg !100
  %473 = sext i32 %468 to i64, !dbg !101
  %474 = getelementptr float, ptr addrspace(1) %0, i64 %473, !dbg !101
  %475 = sext i32 %470 to i64, !dbg !101
  %476 = getelementptr float, ptr addrspace(1) %0, i64 %475, !dbg !101
  %477 = sext i32 %471 to i64, !dbg !101
  %478 = getelementptr float, ptr addrspace(1) %0, i64 %477, !dbg !101
  %479 = sext i32 %472 to i64, !dbg !101
  %480 = getelementptr float, ptr addrspace(1) %0, i64 %479, !dbg !101
  %481 = and i1 %39, %462, !dbg !102
  %482 = and i1 %39, %463, !dbg !102
  %483 = and i1 %464, %39, !dbg !102
  %484 = and i1 %465, %39, !dbg !102
  %485 = and i1 %26, %481, !dbg !103
  %486 = and i1 %27, %482, !dbg !103
  %487 = and i1 %28, %483, !dbg !103
  %488 = and i1 %29, %484, !dbg !103
  %489 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %474, i1 %485, i32 -8388608, i1 %485, i32 -8388608, i1 %485) #2, !dbg !104
  %490 = extractvalue { i32, i32 } %489, 0, !dbg !104
  %491 = extractvalue { i32, i32 } %489, 1, !dbg !104
  %492 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %476, i1 %486, i32 -8388608, i1 %486, i32 -8388608, i1 %486) #2, !dbg !104
  %493 = extractvalue { i32, i32 } %492, 0, !dbg !104
  %494 = extractvalue { i32, i32 } %492, 1, !dbg !104
  %495 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %478, i1 %487, i32 -8388608, i1 %487, i32 -8388608, i1 %487) #2, !dbg !104
  %496 = extractvalue { i32, i32 } %495, 0, !dbg !104
  %497 = extractvalue { i32, i32 } %495, 1, !dbg !104
  %498 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %480, i1 %488, i32 -8388608, i1 %488, i32 -8388608, i1 %488) #2, !dbg !104
  %499 = extractvalue { i32, i32 } %498, 0, !dbg !104
  %500 = extractvalue { i32, i32 } %498, 1, !dbg !104
  %501 = insertelement <2 x i32> poison, i32 %93, i64 0, !dbg !42
  %502 = insertelement <2 x i32> %501, i32 %94, i64 1, !dbg !42
  %503 = bitcast <2 x i32> %502 to <2 x float>, !dbg !42
  %504 = insertelement <2 x i32> poison, i32 %321, i64 0, !dbg !77
  %505 = insertelement <2 x i32> %504, i32 %322, i64 1, !dbg !77
  %506 = bitcast <2 x i32> %505 to <2 x float>, !dbg !77
  %507 = fcmp ogt <2 x float> %506, %503, !dbg !105
  %508 = fcmp uno <2 x float> %506, zeroinitializer, !dbg !109
  %509 = or <2 x i1> %507, %508, !dbg !110
  %.v = select <2 x i1> %509, <2 x i32> %505, <2 x i32> %502, !dbg !111
  %510 = bitcast <2 x i32> %.v to <2 x float>, !dbg !111
  %511 = insertelement <2 x i32> poison, i32 %333, i64 0, !dbg !78
  %512 = insertelement <2 x i32> %511, i32 %334, i64 1, !dbg !78
  %513 = bitcast <2 x i32> %512 to <2 x float>, !dbg !78
  %514 = fcmp olt <2 x float> %510, %513, !dbg !112
  %515 = fcmp uno <2 x float> %513, zeroinitializer, !dbg !114
  %516 = or <2 x i1> %514, %515, !dbg !115
  %.v3 = select <2 x i1> %516, <2 x i32> %512, <2 x i32> %.v, !dbg !116
  %517 = bitcast <2 x i32> %.v3 to <2 x float>, !dbg !116
  %518 = insertelement <2 x i32> poison, i32 %345, i64 0, !dbg !79
  %519 = insertelement <2 x i32> %518, i32 %346, i64 1, !dbg !79
  %520 = bitcast <2 x i32> %519 to <2 x float>, !dbg !79
  %521 = fcmp olt <2 x float> %517, %520, !dbg !117
  %522 = fcmp uno <2 x float> %520, zeroinitializer, !dbg !119
  %523 = or <2 x i1> %521, %522, !dbg !120
  %.v4 = select <2 x i1> %523, <2 x i32> %519, <2 x i32> %.v3, !dbg !121
  %524 = bitcast <2 x i32> %.v4 to <2 x float>, !dbg !121
  %525 = insertelement <2 x i32> poison, i32 %357, i64 0, !dbg !80
  %526 = insertelement <2 x i32> %525, i32 %358, i64 1, !dbg !80
  %527 = bitcast <2 x i32> %526 to <2 x float>, !dbg !80
  %528 = fcmp olt <2 x float> %524, %527, !dbg !122
  %529 = fcmp uno <2 x float> %527, zeroinitializer, !dbg !124
  %530 = or <2 x i1> %528, %529, !dbg !125
  %.v5 = select <2 x i1> %530, <2 x i32> %526, <2 x i32> %.v4, !dbg !126
  %531 = bitcast <2 x i32> %.v5 to <2 x float>, !dbg !126
  %532 = insertelement <2 x i32> poison, i32 %369, i64 0, !dbg !81
  %533 = insertelement <2 x i32> %532, i32 %370, i64 1, !dbg !81
  %534 = bitcast <2 x i32> %533 to <2 x float>, !dbg !81
  %535 = fcmp olt <2 x float> %531, %534, !dbg !127
  %536 = fcmp uno <2 x float> %534, zeroinitializer, !dbg !129
  %537 = or <2 x i1> %535, %536, !dbg !130
  %.v6 = select <2 x i1> %537, <2 x i32> %533, <2 x i32> %.v5, !dbg !131
  %538 = bitcast <2 x i32> %.v6 to <2 x float>, !dbg !131
  %539 = insertelement <2 x i32> poison, i32 %412, i64 0, !dbg !89
  %540 = insertelement <2 x i32> %539, i32 %413, i64 1, !dbg !89
  %541 = bitcast <2 x i32> %540 to <2 x float>, !dbg !89
  %542 = fcmp olt <2 x float> %538, %541, !dbg !132
  %543 = fcmp uno <2 x float> %541, zeroinitializer, !dbg !134
  %544 = or <2 x i1> %542, %543, !dbg !135
  %.v7 = select <2 x i1> %544, <2 x i32> %540, <2 x i32> %.v6, !dbg !136
  %545 = bitcast <2 x i32> %.v7 to <2 x float>, !dbg !136
  %546 = insertelement <2 x i32> poison, i32 %451, i64 0, !dbg !97
  %547 = insertelement <2 x i32> %546, i32 %452, i64 1, !dbg !97
  %548 = bitcast <2 x i32> %547 to <2 x float>, !dbg !97
  %549 = fcmp olt <2 x float> %545, %548, !dbg !137
  %550 = fcmp uno <2 x float> %548, zeroinitializer, !dbg !139
  %551 = or <2 x i1> %549, %550, !dbg !140
  %.v8 = select <2 x i1> %551, <2 x i32> %547, <2 x i32> %.v7, !dbg !141
  %552 = bitcast <2 x i32> %.v8 to <2 x float>, !dbg !141
  %553 = insertelement <2 x i32> poison, i32 %490, i64 0, !dbg !104
  %554 = insertelement <2 x i32> %553, i32 %491, i64 1, !dbg !104
  %555 = bitcast <2 x i32> %554 to <2 x float>, !dbg !104
  %556 = fcmp olt <2 x float> %552, %555, !dbg !142
  %557 = bitcast i32 %490 to float, !dbg !144
  %558 = fcmp uno float %557, 0.000000e+00, !dbg !144
  %559 = bitcast i32 %491 to float, !dbg !144
  %560 = fcmp uno float %559, 0.000000e+00, !dbg !144
  %561 = extractelement <2 x i1> %556, i64 0, !dbg !145
  %562 = or i1 %561, %558, !dbg !145
  %563 = extractelement <2 x i1> %556, i64 1, !dbg !145
  %564 = or i1 %563, %560, !dbg !145
  %565 = zext <2 x i1> %507 to <2 x i8>, !dbg !146
  %566 = select <2 x i1> %514, <2 x i8> splat (i8 2), <2 x i8> %565, !dbg !147
  %567 = select <2 x i1> %521, <2 x i8> splat (i8 3), <2 x i8> %566, !dbg !148
  %568 = select <2 x i1> %528, <2 x i8> splat (i8 4), <2 x i8> %567, !dbg !149
  %569 = select <2 x i1> %535, <2 x i8> splat (i8 5), <2 x i8> %568, !dbg !150
  %570 = select <2 x i1> %542, <2 x i8> splat (i8 6), <2 x i8> %569, !dbg !151
  %571 = select <2 x i1> %549, <2 x i8> splat (i8 7), <2 x i8> %570, !dbg !152
  %572 = select <2 x i1> %556, <2 x i8> splat (i8 8), <2 x i8> %571, !dbg !153
  %573 = insertelement <2 x i32> poison, i32 %200, i64 0, !dbg !42
  %574 = insertelement <2 x i32> %573, i32 %201, i64 1, !dbg !42
  %575 = bitcast <2 x i32> %574 to <2 x float>, !dbg !42
  %576 = insertelement <2 x i32> poison, i32 %324, i64 0, !dbg !77
  %577 = insertelement <2 x i32> %576, i32 %325, i64 1, !dbg !77
  %578 = bitcast <2 x i32> %577 to <2 x float>, !dbg !77
  %579 = fcmp ogt <2 x float> %578, %575, !dbg !105
  %580 = fcmp uno <2 x float> %578, zeroinitializer, !dbg !109
  %581 = or <2 x i1> %579, %580, !dbg !110
  %.v9 = select <2 x i1> %581, <2 x i32> %577, <2 x i32> %574, !dbg !111
  %582 = bitcast <2 x i32> %.v9 to <2 x float>, !dbg !111
  %583 = insertelement <2 x i32> poison, i32 %336, i64 0, !dbg !78
  %584 = insertelement <2 x i32> %583, i32 %337, i64 1, !dbg !78
  %585 = bitcast <2 x i32> %584 to <2 x float>, !dbg !78
  %586 = fcmp olt <2 x float> %582, %585, !dbg !112
  %587 = fcmp uno <2 x float> %585, zeroinitializer, !dbg !114
  %588 = or <2 x i1> %586, %587, !dbg !115
  %.v10 = select <2 x i1> %588, <2 x i32> %584, <2 x i32> %.v9, !dbg !116
  %589 = bitcast <2 x i32> %.v10 to <2 x float>, !dbg !116
  %590 = insertelement <2 x i32> poison, i32 %348, i64 0, !dbg !79
  %591 = insertelement <2 x i32> %590, i32 %349, i64 1, !dbg !79
  %592 = bitcast <2 x i32> %591 to <2 x float>, !dbg !79
  %593 = fcmp olt <2 x float> %589, %592, !dbg !117
  %594 = fcmp uno <2 x float> %592, zeroinitializer, !dbg !119
  %595 = or <2 x i1> %593, %594, !dbg !120
  %.v11 = select <2 x i1> %595, <2 x i32> %591, <2 x i32> %.v10, !dbg !121
  %596 = bitcast <2 x i32> %.v11 to <2 x float>, !dbg !121
  %597 = insertelement <2 x i32> poison, i32 %360, i64 0, !dbg !80
  %598 = insertelement <2 x i32> %597, i32 %361, i64 1, !dbg !80
  %599 = bitcast <2 x i32> %598 to <2 x float>, !dbg !80
  %600 = fcmp olt <2 x float> %596, %599, !dbg !122
  %601 = fcmp uno <2 x float> %599, zeroinitializer, !dbg !124
  %602 = or <2 x i1> %600, %601, !dbg !125
  %.v12 = select <2 x i1> %602, <2 x i32> %598, <2 x i32> %.v11, !dbg !126
  %603 = bitcast <2 x i32> %.v12 to <2 x float>, !dbg !126
  %604 = insertelement <2 x i32> poison, i32 %372, i64 0, !dbg !81
  %605 = insertelement <2 x i32> %604, i32 %373, i64 1, !dbg !81
  %606 = bitcast <2 x i32> %605 to <2 x float>, !dbg !81
  %607 = fcmp olt <2 x float> %603, %606, !dbg !127
  %608 = fcmp uno <2 x float> %606, zeroinitializer, !dbg !129
  %609 = or <2 x i1> %607, %608, !dbg !130
  %.v13 = select <2 x i1> %609, <2 x i32> %605, <2 x i32> %.v12, !dbg !131
  %610 = bitcast <2 x i32> %.v13 to <2 x float>, !dbg !131
  %611 = insertelement <2 x i32> poison, i32 %415, i64 0, !dbg !89
  %612 = insertelement <2 x i32> %611, i32 %416, i64 1, !dbg !89
  %613 = bitcast <2 x i32> %612 to <2 x float>, !dbg !89
  %614 = fcmp olt <2 x float> %610, %613, !dbg !132
  %615 = fcmp uno <2 x float> %613, zeroinitializer, !dbg !134
  %616 = or <2 x i1> %614, %615, !dbg !135
  %.v14 = select <2 x i1> %616, <2 x i32> %612, <2 x i32> %.v13, !dbg !136
  %617 = bitcast <2 x i32> %.v14 to <2 x float>, !dbg !136
  %618 = insertelement <2 x i32> poison, i32 %454, i64 0, !dbg !97
  %619 = insertelement <2 x i32> %618, i32 %455, i64 1, !dbg !97
  %620 = bitcast <2 x i32> %619 to <2 x float>, !dbg !97
  %621 = fcmp olt <2 x float> %617, %620, !dbg !137
  %622 = fcmp uno <2 x float> %620, zeroinitializer, !dbg !139
  %623 = or <2 x i1> %621, %622, !dbg !140
  %.v15 = select <2 x i1> %623, <2 x i32> %619, <2 x i32> %.v14, !dbg !141
  %624 = bitcast <2 x i32> %.v15 to <2 x float>, !dbg !141
  %625 = insertelement <2 x i32> poison, i32 %493, i64 0, !dbg !104
  %626 = insertelement <2 x i32> %625, i32 %494, i64 1, !dbg !104
  %627 = bitcast <2 x i32> %626 to <2 x float>, !dbg !104
  %628 = fcmp olt <2 x float> %624, %627, !dbg !142
  %629 = bitcast i32 %493 to float, !dbg !144
  %630 = fcmp uno float %629, 0.000000e+00, !dbg !144
  %631 = bitcast i32 %494 to float, !dbg !144
  %632 = fcmp uno float %631, 0.000000e+00, !dbg !144
  %633 = extractelement <2 x i1> %628, i64 0, !dbg !145
  %634 = or i1 %633, %630, !dbg !145
  %635 = extractelement <2 x i1> %628, i64 1, !dbg !145
  %636 = or i1 %635, %632, !dbg !145
  %637 = zext <2 x i1> %579 to <2 x i8>, !dbg !146
  %638 = select <2 x i1> %586, <2 x i8> splat (i8 2), <2 x i8> %637, !dbg !147
  %639 = select <2 x i1> %593, <2 x i8> splat (i8 3), <2 x i8> %638, !dbg !148
  %640 = select <2 x i1> %600, <2 x i8> splat (i8 4), <2 x i8> %639, !dbg !149
  %641 = select <2 x i1> %607, <2 x i8> splat (i8 5), <2 x i8> %640, !dbg !150
  %642 = select <2 x i1> %614, <2 x i8> splat (i8 6), <2 x i8> %641, !dbg !151
  %643 = select <2 x i1> %621, <2 x i8> splat (i8 7), <2 x i8> %642, !dbg !152
  %644 = select <2 x i1> %628, <2 x i8> splat (i8 8), <2 x i8> %643, !dbg !153
  %645 = insertelement <2 x i32> poison, i32 %259, i64 0, !dbg !42
  %646 = insertelement <2 x i32> %645, i32 %260, i64 1, !dbg !42
  %647 = bitcast <2 x i32> %646 to <2 x float>, !dbg !42
  %648 = insertelement <2 x i32> poison, i32 %327, i64 0, !dbg !77
  %649 = insertelement <2 x i32> %648, i32 %328, i64 1, !dbg !77
  %650 = bitcast <2 x i32> %649 to <2 x float>, !dbg !77
  %651 = fcmp ogt <2 x float> %650, %647, !dbg !105
  %652 = fcmp uno <2 x float> %650, zeroinitializer, !dbg !109
  %653 = or <2 x i1> %651, %652, !dbg !110
  %.v16 = select <2 x i1> %653, <2 x i32> %649, <2 x i32> %646, !dbg !111
  %654 = bitcast <2 x i32> %.v16 to <2 x float>, !dbg !111
  %655 = insertelement <2 x i32> poison, i32 %339, i64 0, !dbg !78
  %656 = insertelement <2 x i32> %655, i32 %340, i64 1, !dbg !78
  %657 = bitcast <2 x i32> %656 to <2 x float>, !dbg !78
  %658 = fcmp olt <2 x float> %654, %657, !dbg !112
  %659 = fcmp uno <2 x float> %657, zeroinitializer, !dbg !114
  %660 = or <2 x i1> %658, %659, !dbg !115
  %.v17 = select <2 x i1> %660, <2 x i32> %656, <2 x i32> %.v16, !dbg !116
  %661 = bitcast <2 x i32> %.v17 to <2 x float>, !dbg !116
  %662 = insertelement <2 x i32> poison, i32 %351, i64 0, !dbg !79
  %663 = insertelement <2 x i32> %662, i32 %352, i64 1, !dbg !79
  %664 = bitcast <2 x i32> %663 to <2 x float>, !dbg !79
  %665 = fcmp olt <2 x float> %661, %664, !dbg !117
  %666 = fcmp uno <2 x float> %664, zeroinitializer, !dbg !119
  %667 = or <2 x i1> %665, %666, !dbg !120
  %.v18 = select <2 x i1> %667, <2 x i32> %663, <2 x i32> %.v17, !dbg !121
  %668 = bitcast <2 x i32> %.v18 to <2 x float>, !dbg !121
  %669 = insertelement <2 x i32> poison, i32 %363, i64 0, !dbg !80
  %670 = insertelement <2 x i32> %669, i32 %364, i64 1, !dbg !80
  %671 = bitcast <2 x i32> %670 to <2 x float>, !dbg !80
  %672 = fcmp olt <2 x float> %668, %671, !dbg !122
  %673 = fcmp uno <2 x float> %671, zeroinitializer, !dbg !124
  %674 = or <2 x i1> %672, %673, !dbg !125
  %.v19 = select <2 x i1> %674, <2 x i32> %670, <2 x i32> %.v18, !dbg !126
  %675 = bitcast <2 x i32> %.v19 to <2 x float>, !dbg !126
  %676 = insertelement <2 x i32> poison, i32 %375, i64 0, !dbg !81
  %677 = insertelement <2 x i32> %676, i32 %376, i64 1, !dbg !81
  %678 = bitcast <2 x i32> %677 to <2 x float>, !dbg !81
  %679 = fcmp olt <2 x float> %675, %678, !dbg !127
  %680 = fcmp uno <2 x float> %678, zeroinitializer, !dbg !129
  %681 = or <2 x i1> %679, %680, !dbg !130
  %.v20 = select <2 x i1> %681, <2 x i32> %677, <2 x i32> %.v19, !dbg !131
  %682 = bitcast <2 x i32> %.v20 to <2 x float>, !dbg !131
  %683 = insertelement <2 x i32> poison, i32 %418, i64 0, !dbg !89
  %684 = insertelement <2 x i32> %683, i32 %419, i64 1, !dbg !89
  %685 = bitcast <2 x i32> %684 to <2 x float>, !dbg !89
  %686 = fcmp olt <2 x float> %682, %685, !dbg !132
  %687 = fcmp uno <2 x float> %685, zeroinitializer, !dbg !134
  %688 = or <2 x i1> %686, %687, !dbg !135
  %.v21 = select <2 x i1> %688, <2 x i32> %684, <2 x i32> %.v20, !dbg !136
  %689 = bitcast <2 x i32> %.v21 to <2 x float>, !dbg !136
  %690 = insertelement <2 x i32> poison, i32 %457, i64 0, !dbg !97
  %691 = insertelement <2 x i32> %690, i32 %458, i64 1, !dbg !97
  %692 = bitcast <2 x i32> %691 to <2 x float>, !dbg !97
  %693 = fcmp olt <2 x float> %689, %692, !dbg !137
  %694 = fcmp uno <2 x float> %692, zeroinitializer, !dbg !139
  %695 = or <2 x i1> %693, %694, !dbg !140
  %.v22 = select <2 x i1> %695, <2 x i32> %691, <2 x i32> %.v21, !dbg !141
  %696 = bitcast <2 x i32> %.v22 to <2 x float>, !dbg !141
  %697 = insertelement <2 x i32> poison, i32 %496, i64 0, !dbg !104
  %698 = insertelement <2 x i32> %697, i32 %497, i64 1, !dbg !104
  %699 = bitcast <2 x i32> %698 to <2 x float>, !dbg !104
  %700 = fcmp olt <2 x float> %696, %699, !dbg !142
  %701 = bitcast i32 %496 to float, !dbg !144
  %702 = fcmp uno float %701, 0.000000e+00, !dbg !144
  %703 = bitcast i32 %497 to float, !dbg !144
  %704 = fcmp uno float %703, 0.000000e+00, !dbg !144
  %705 = extractelement <2 x i1> %700, i64 0, !dbg !145
  %706 = or i1 %705, %702, !dbg !145
  %707 = extractelement <2 x i1> %700, i64 1, !dbg !145
  %708 = or i1 %707, %704, !dbg !145
  %709 = zext <2 x i1> %651 to <2 x i8>, !dbg !146
  %710 = select <2 x i1> %658, <2 x i8> splat (i8 2), <2 x i8> %709, !dbg !147
  %711 = select <2 x i1> %665, <2 x i8> splat (i8 3), <2 x i8> %710, !dbg !148
  %712 = select <2 x i1> %672, <2 x i8> splat (i8 4), <2 x i8> %711, !dbg !149
  %713 = select <2 x i1> %679, <2 x i8> splat (i8 5), <2 x i8> %712, !dbg !150
  %714 = select <2 x i1> %686, <2 x i8> splat (i8 6), <2 x i8> %713, !dbg !151
  %715 = select <2 x i1> %693, <2 x i8> splat (i8 7), <2 x i8> %714, !dbg !152
  %716 = select <2 x i1> %700, <2 x i8> splat (i8 8), <2 x i8> %715, !dbg !153
  %717 = insertelement <2 x i32> poison, i32 %318, i64 0, !dbg !42
  %718 = insertelement <2 x i32> %717, i32 %319, i64 1, !dbg !42
  %719 = bitcast <2 x i32> %718 to <2 x float>, !dbg !42
  %720 = insertelement <2 x i32> poison, i32 %330, i64 0, !dbg !77
  %721 = insertelement <2 x i32> %720, i32 %331, i64 1, !dbg !77
  %722 = bitcast <2 x i32> %721 to <2 x float>, !dbg !77
  %723 = fcmp ogt <2 x float> %722, %719, !dbg !105
  %724 = fcmp uno <2 x float> %722, zeroinitializer, !dbg !109
  %725 = or <2 x i1> %723, %724, !dbg !110
  %.v23 = select <2 x i1> %725, <2 x i32> %721, <2 x i32> %718, !dbg !111
  %726 = bitcast <2 x i32> %.v23 to <2 x float>, !dbg !111
  %727 = insertelement <2 x i32> poison, i32 %342, i64 0, !dbg !78
  %728 = insertelement <2 x i32> %727, i32 %343, i64 1, !dbg !78
  %729 = bitcast <2 x i32> %728 to <2 x float>, !dbg !78
  %730 = fcmp olt <2 x float> %726, %729, !dbg !112
  %731 = fcmp uno <2 x float> %729, zeroinitializer, !dbg !114
  %732 = or <2 x i1> %730, %731, !dbg !115
  %.v24 = select <2 x i1> %732, <2 x i32> %728, <2 x i32> %.v23, !dbg !116
  %733 = bitcast <2 x i32> %.v24 to <2 x float>, !dbg !116
  %734 = insertelement <2 x i32> poison, i32 %354, i64 0, !dbg !79
  %735 = insertelement <2 x i32> %734, i32 %355, i64 1, !dbg !79
  %736 = bitcast <2 x i32> %735 to <2 x float>, !dbg !79
  %737 = fcmp olt <2 x float> %733, %736, !dbg !117
  %738 = fcmp uno <2 x float> %736, zeroinitializer, !dbg !119
  %739 = or <2 x i1> %737, %738, !dbg !120
  %.v25 = select <2 x i1> %739, <2 x i32> %735, <2 x i32> %.v24, !dbg !121
  %740 = bitcast <2 x i32> %.v25 to <2 x float>, !dbg !121
  %741 = insertelement <2 x i32> poison, i32 %366, i64 0, !dbg !80
  %742 = insertelement <2 x i32> %741, i32 %367, i64 1, !dbg !80
  %743 = bitcast <2 x i32> %742 to <2 x float>, !dbg !80
  %744 = fcmp olt <2 x float> %740, %743, !dbg !122
  %745 = fcmp uno <2 x float> %743, zeroinitializer, !dbg !124
  %746 = or <2 x i1> %744, %745, !dbg !125
  %.v26 = select <2 x i1> %746, <2 x i32> %742, <2 x i32> %.v25, !dbg !126
  %747 = bitcast <2 x i32> %.v26 to <2 x float>, !dbg !126
  %748 = insertelement <2 x i32> poison, i32 %378, i64 0, !dbg !81
  %749 = insertelement <2 x i32> %748, i32 %379, i64 1, !dbg !81
  %750 = bitcast <2 x i32> %749 to <2 x float>, !dbg !81
  %751 = fcmp olt <2 x float> %747, %750, !dbg !127
  %752 = fcmp uno <2 x float> %750, zeroinitializer, !dbg !129
  %753 = or <2 x i1> %751, %752, !dbg !130
  %.v27 = select <2 x i1> %753, <2 x i32> %749, <2 x i32> %.v26, !dbg !131
  %754 = bitcast <2 x i32> %.v27 to <2 x float>, !dbg !131
  %755 = insertelement <2 x i32> poison, i32 %421, i64 0, !dbg !89
  %756 = insertelement <2 x i32> %755, i32 %422, i64 1, !dbg !89
  %757 = bitcast <2 x i32> %756 to <2 x float>, !dbg !89
  %758 = fcmp olt <2 x float> %754, %757, !dbg !132
  %759 = fcmp uno <2 x float> %757, zeroinitializer, !dbg !134
  %760 = or <2 x i1> %758, %759, !dbg !135
  %.v28 = select <2 x i1> %760, <2 x i32> %756, <2 x i32> %.v27, !dbg !136
  %761 = bitcast <2 x i32> %.v28 to <2 x float>, !dbg !136
  %762 = insertelement <2 x i32> poison, i32 %460, i64 0, !dbg !97
  %763 = insertelement <2 x i32> %762, i32 %461, i64 1, !dbg !97
  %764 = bitcast <2 x i32> %763 to <2 x float>, !dbg !97
  %765 = fcmp olt <2 x float> %761, %764, !dbg !137
  %766 = fcmp uno <2 x float> %764, zeroinitializer, !dbg !139
  %767 = or <2 x i1> %765, %766, !dbg !140
  %.v29 = select <2 x i1> %767, <2 x i32> %763, <2 x i32> %.v28, !dbg !141
  %768 = bitcast <2 x i32> %.v29 to <2 x float>, !dbg !141
  %769 = insertelement <2 x i32> poison, i32 %499, i64 0, !dbg !104
  %770 = insertelement <2 x i32> %769, i32 %500, i64 1, !dbg !104
  %771 = bitcast <2 x i32> %770 to <2 x float>, !dbg !104
  %772 = fcmp olt <2 x float> %768, %771, !dbg !142
  %773 = bitcast i32 %499 to float, !dbg !144
  %774 = fcmp uno float %773, 0.000000e+00, !dbg !144
  %775 = bitcast i32 %500 to float, !dbg !144
  %776 = fcmp uno float %775, 0.000000e+00, !dbg !144
  %777 = extractelement <2 x i1> %772, i64 0, !dbg !145
  %778 = or i1 %777, %774, !dbg !145
  %779 = extractelement <2 x i1> %772, i64 1, !dbg !145
  %780 = or i1 %779, %776, !dbg !145
  %781 = zext <2 x i1> %723 to <2 x i8>, !dbg !146
  %782 = select <2 x i1> %730, <2 x i8> splat (i8 2), <2 x i8> %781, !dbg !147
  %783 = select <2 x i1> %737, <2 x i8> splat (i8 3), <2 x i8> %782, !dbg !148
  %784 = select <2 x i1> %744, <2 x i8> splat (i8 4), <2 x i8> %783, !dbg !149
  %785 = select <2 x i1> %751, <2 x i8> splat (i8 5), <2 x i8> %784, !dbg !150
  %786 = select <2 x i1> %758, <2 x i8> splat (i8 6), <2 x i8> %785, !dbg !151
  %787 = select <2 x i1> %765, <2 x i8> splat (i8 7), <2 x i8> %786, !dbg !152
  %788 = select <2 x i1> %772, <2 x i8> splat (i8 8), <2 x i8> %787, !dbg !153
  %789 = mul i32 %38, 81, !dbg !154
  %790 = add i32 %789, %.decomposed, !dbg !155
  %791 = mul i32 %49, 62208, !dbg !156
  %792 = mul i32 %50, 62208, !dbg !156
  %793 = mul i32 %51, 62208, !dbg !156
  %794 = mul i32 %52, 62208, !dbg !156
  %795 = mul i32 %53, 62208, !dbg !156
  %796 = mul i32 %54, 62208, !dbg !156
  %797 = mul i32 %55, 62208, !dbg !156
  %798 = mul i32 %56, 62208, !dbg !156
  %799 = add i32 %790, %791, !dbg !157
  %800 = add i32 %792, %.decomposed31, !dbg !155
  %801 = add i32 %800, %789, !dbg !157
  %802 = add i32 %793, %.decomposed33, !dbg !155
  %803 = add i32 %802, %789, !dbg !157
  %804 = add i32 %794, %.decomposed35, !dbg !155
  %805 = add i32 %804, %789, !dbg !157
  %806 = add i32 %795, %.decomposed37, !dbg !155
  %807 = add i32 %806, %789, !dbg !157
  %808 = add i32 %796, %.decomposed39, !dbg !155
  %809 = add i32 %808, %789, !dbg !157
  %810 = add i32 %797, %.decomposed41, !dbg !155
  %811 = add i32 %810, %789, !dbg !157
  %812 = add i32 %798, %.decomposed43, !dbg !155
  %813 = add i32 %812, %789, !dbg !157
  %814 = sext i32 %799 to i64, !dbg !158
  %815 = getelementptr float, ptr addrspace(1) %1, i64 %814, !dbg !158
  %816 = sext i32 %801 to i64, !dbg !158
  %817 = getelementptr float, ptr addrspace(1) %1, i64 %816, !dbg !158
  %818 = sext i32 %803 to i64, !dbg !158
  %819 = getelementptr float, ptr addrspace(1) %1, i64 %818, !dbg !158
  %820 = sext i32 %805 to i64, !dbg !158
  %821 = getelementptr float, ptr addrspace(1) %1, i64 %820, !dbg !158
  %822 = sext i32 %807 to i64, !dbg !158
  %823 = getelementptr float, ptr addrspace(1) %1, i64 %822, !dbg !158
  %824 = sext i32 %809 to i64, !dbg !158
  %825 = getelementptr float, ptr addrspace(1) %1, i64 %824, !dbg !158
  %826 = sext i32 %811 to i64, !dbg !158
  %827 = getelementptr float, ptr addrspace(1) %1, i64 %826, !dbg !158
  %828 = sext i32 %813 to i64, !dbg !158
  %829 = getelementptr float, ptr addrspace(1) %1, i64 %828, !dbg !158
  %830 = and i1 %30, %40, !dbg !159
  %831 = and i1 %31, %40, !dbg !159
  %832 = and i1 %32, %40, !dbg !159
  %833 = and i1 %33, %40, !dbg !159
  %834 = and i1 %34, %40, !dbg !159
  %835 = and i1 %35, %40, !dbg !159
  %836 = and i1 %29, %40, !dbg !159
  %837 = and i1 %39, %26, !dbg !159
  %838 = and i1 %39, %27, !dbg !159
  %839 = and i1 %28, %39, !dbg !159
  %840 = and i1 %29, %39, !dbg !159
  %841 = shl i32 %8, 1, !dbg !160
  %842 = and i32 %841, 254, !dbg !160
  %843 = lshr exact i32 %842, 1, !dbg !160
  %844 = getelementptr float, ptr addrspace(3) @global_smem, i32 %843, !dbg !160
  %845 = getelementptr inbounds float, ptr addrspace(3) %844, i32 %842, !dbg !160
  %846 = extractelement <2 x i32> %.v8, i64 0, !dbg !160
  %847 = select i1 %562, i32 %490, i32 %846, !dbg !161
  %848 = insertelement <1 x i32> poison, i32 %847, i64 0, !dbg !160
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %845, <1 x i32> %848, i1 true) #2, !dbg !160
  %849 = or disjoint i32 %842, 1, !dbg !160
  %850 = getelementptr float, ptr addrspace(3) %844, i32 %849, !dbg !160
  %851 = extractelement <2 x i32> %.v8, i64 1, !dbg !160
  %852 = select i1 %564, i32 %491, i32 %851, !dbg !161
  %853 = insertelement <1 x i32> poison, i32 %852, i64 0, !dbg !160
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %850, <1 x i32> %853, i1 true) #2, !dbg !160
  tail call void @llvm.nvvm.barrier0(), !dbg !160
  %854 = lshr i32 %10, 1, !dbg !160
  %855 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %854, !dbg !160
  %856 = getelementptr inbounds float, ptr addrspace(3) %855, i32 %10, !dbg !160
  %857 = load i32, ptr addrspace(3) %856, align 4, !dbg !160
  %858 = lshr i32 %11, 1, !dbg !160
  %859 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %858, !dbg !160
  %860 = getelementptr inbounds float, ptr addrspace(3) %859, i32 %11, !dbg !160
  %861 = load i32, ptr addrspace(3) %860, align 4, !dbg !160
  tail call void @llvm.nvvm.barrier0(), !dbg !160
  %862 = extractelement <2 x i32> %.v15, i64 0, !dbg !160
  %863 = select i1 %634, i32 %493, i32 %862, !dbg !161
  %864 = insertelement <1 x i32> poison, i32 %863, i64 0, !dbg !160
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %845, <1 x i32> %864, i1 true) #2, !dbg !160
  %865 = extractelement <2 x i32> %.v15, i64 1, !dbg !160
  %866 = select i1 %636, i32 %494, i32 %865, !dbg !161
  %867 = insertelement <1 x i32> poison, i32 %866, i64 0, !dbg !160
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %850, <1 x i32> %867, i1 true) #2, !dbg !160
  tail call void @llvm.nvvm.barrier0(), !dbg !160
  %868 = load i32, ptr addrspace(3) %856, align 4, !dbg !160
  %869 = load i32, ptr addrspace(3) %860, align 4, !dbg !160
  tail call void @llvm.nvvm.barrier0(), !dbg !160
  %870 = extractelement <2 x i32> %.v22, i64 0, !dbg !160
  %871 = select i1 %706, i32 %496, i32 %870, !dbg !161
  %872 = insertelement <1 x i32> poison, i32 %871, i64 0, !dbg !160
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %845, <1 x i32> %872, i1 true) #2, !dbg !160
  %873 = extractelement <2 x i32> %.v22, i64 1, !dbg !160
  %874 = select i1 %708, i32 %497, i32 %873, !dbg !161
  %875 = insertelement <1 x i32> poison, i32 %874, i64 0, !dbg !160
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %850, <1 x i32> %875, i1 true) #2, !dbg !160
  tail call void @llvm.nvvm.barrier0(), !dbg !160
  %876 = load i32, ptr addrspace(3) %856, align 4, !dbg !160
  %877 = load i32, ptr addrspace(3) %860, align 4, !dbg !160
  tail call void @llvm.nvvm.barrier0(), !dbg !160
  %878 = extractelement <2 x i32> %.v29, i64 0, !dbg !160
  %879 = select i1 %778, i32 %499, i32 %878, !dbg !161
  %880 = insertelement <1 x i32> poison, i32 %879, i64 0, !dbg !160
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %845, <1 x i32> %880, i1 true) #2, !dbg !160
  %881 = extractelement <2 x i32> %.v29, i64 1, !dbg !160
  %882 = select i1 %780, i32 %500, i32 %881, !dbg !161
  %883 = insertelement <1 x i32> poison, i32 %882, i64 0, !dbg !160
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %850, <1 x i32> %883, i1 true) #2, !dbg !160
  tail call void @llvm.nvvm.barrier0(), !dbg !160
  %884 = load i32, ptr addrspace(3) %856, align 4, !dbg !160
  %885 = load i32, ptr addrspace(3) %860, align 4, !dbg !160
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %857, ptr addrspace(1) %815, i1 %830) #2, !dbg !160
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %861, ptr addrspace(1) %817, i1 %831) #2, !dbg !160
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %868, ptr addrspace(1) %819, i1 %832) #2, !dbg !160
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %869, ptr addrspace(1) %821, i1 %833) #2, !dbg !160
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %876, ptr addrspace(1) %823, i1 %834) #2, !dbg !160
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %877, ptr addrspace(1) %825, i1 %835) #2, !dbg !160
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %884, ptr addrspace(1) %827, i1 %836) #2, !dbg !160
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %885, ptr addrspace(1) %829, i1 %836) #2, !dbg !160
  %886 = shl i32 %14, 9, !dbg !162
  %887 = shl i32 %15, 9, !dbg !162
  %888 = shl i32 %16, 9, !dbg !162
  %889 = shl i32 %17, 9, !dbg !162
  %890 = add i32 %886, %37, !dbg !163
  %891 = add i32 %887, %37, !dbg !163
  %892 = add i32 %37, %888, !dbg !163
  %893 = add i32 %37, %889, !dbg !163
  %894 = sext i32 %890 to i64, !dbg !164
  %895 = getelementptr i8, ptr addrspace(1) %2, i64 %894, !dbg !164
  %896 = sext i32 %891 to i64, !dbg !164
  %897 = getelementptr i8, ptr addrspace(1) %2, i64 %896, !dbg !164
  %898 = sext i32 %892 to i64, !dbg !164
  %899 = getelementptr i8, ptr addrspace(1) %2, i64 %898, !dbg !164
  %900 = sext i32 %893 to i64, !dbg !164
  %901 = getelementptr i8, ptr addrspace(1) %2, i64 %900, !dbg !164
  %902 = bitcast <2 x i8> %572 to i16, !dbg !165
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %902, ptr addrspace(1) %895, i1 %837) #2, !dbg !165
  %903 = bitcast <2 x i8> %644 to i16, !dbg !165
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %903, ptr addrspace(1) %897, i1 %838) #2, !dbg !165
  %904 = bitcast <2 x i8> %716 to i16, !dbg !165
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %904, ptr addrspace(1) %899, i1 %839) #2, !dbg !165
  %905 = bitcast <2 x i8> %788 to i16, !dbg !165
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %905, ptr addrspace(1) %901, i1 %840) #2, !dbg !165
  ret void, !dbg !166
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ccqvx77zasulti33kl6ipc5ri4ywtvvyvwbnxywnuumlb75kiu4m.py", directory: "inductor_cache/cq")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_17, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_17, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_17", linkageName: "triton_poi_fused_max_pool2d_with_indices_17", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 28, column: 21, scope: !7)
!20 = !DILocation(line: 31, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 19, scope: !7)
!22 = !DILocation(line: 45, column: 41, scope: !7)
!23 = !DILocation(line: 45, column: 74, scope: !7)
!24 = !DILocation(line: 51, column: 41, scope: !7)
!25 = !DILocation(line: 58, column: 41, scope: !7)
!26 = !DILocation(line: 65, column: 40, scope: !7)
!27 = !DILocation(line: 71, column: 37, scope: !7)
!28 = !DILocation(line: 29, column: 19, scope: !7)
!29 = !DILocation(line: 67, column: 20, scope: !7)
!30 = !DILocation(line: 36, column: 19, scope: !7)
!31 = !DILocation(line: 40, column: 20, scope: !7)
!32 = !DILocation(line: 41, column: 19, scope: !7)
!33 = !DILocation(line: 44, column: 19, scope: !7)
!34 = !DILocation(line: 45, column: 51, scope: !7)
!35 = !DILocation(line: 45, column: 62, scope: !7)
!36 = !DILocation(line: 45, column: 46, scope: !7)
!37 = !DILocation(line: 45, column: 56, scope: !7)
!38 = !DILocation(line: 45, column: 67, scope: !7)
!39 = !DILocation(line: 45, column: 31, scope: !7)
!40 = !DILocation(line: 45, column: 87, scope: !7)
!41 = !DILocation(line: 45, column: 95, scope: !7)
!42 = !DILocation(line: 45, column: 79, scope: !7)
!43 = !DILocation(line: 47, column: 21, scope: !7)
!44 = !DILocation(line: 50, column: 19, scope: !7)
!45 = !DILocation(line: 51, column: 56, scope: !7)
!46 = !DILocation(line: 51, column: 67, scope: !7)
!47 = !DILocation(line: 51, column: 31, scope: !7)
!48 = !DILocation(line: 51, column: 87, scope: !7)
!49 = !DILocation(line: 51, column: 95, scope: !7)
!50 = !DILocation(line: 53, column: 16, scope: !7)
!51 = !DILocation(line: 55, column: 20, scope: !7)
!52 = !DILocation(line: 56, column: 20, scope: !7)
!53 = !DILocation(line: 83, column: 20, scope: !7)
!54 = !DILocation(line: 57, column: 19, scope: !7)
!55 = !DILocation(line: 58, column: 56, scope: !7)
!56 = !DILocation(line: 58, column: 67, scope: !7)
!57 = !DILocation(line: 58, column: 31, scope: !7)
!58 = !DILocation(line: 58, column: 87, scope: !7)
!59 = !DILocation(line: 58, column: 95, scope: !7)
!60 = !DILocation(line: 64, column: 20, scope: !7)
!61 = !DILocation(line: 65, column: 55, scope: !7)
!62 = !DILocation(line: 65, column: 66, scope: !7)
!63 = !DILocation(line: 65, column: 31, scope: !7)
!64 = !DILocation(line: 65, column: 86, scope: !7)
!65 = !DILocation(line: 65, column: 94, scope: !7)
!66 = !DILocation(line: 68, column: 46, scope: !7)
!67 = !DILocation(line: 68, column: 57, scope: !7)
!68 = !DILocation(line: 68, column: 31, scope: !7)
!69 = !DILocation(line: 68, column: 77, scope: !7)
!70 = !DILocation(line: 68, column: 85, scope: !7)
!71 = !DILocation(line: 70, column: 20, scope: !7)
!72 = !DILocation(line: 71, column: 52, scope: !7)
!73 = !DILocation(line: 71, column: 63, scope: !7)
!74 = !DILocation(line: 71, column: 31, scope: !7)
!75 = !DILocation(line: 71, column: 83, scope: !7)
!76 = !DILocation(line: 71, column: 91, scope: !7)
!77 = !DILocation(line: 51, column: 79, scope: !7)
!78 = !DILocation(line: 58, column: 79, scope: !7)
!79 = !DILocation(line: 65, column: 78, scope: !7)
!80 = !DILocation(line: 68, column: 69, scope: !7)
!81 = !DILocation(line: 71, column: 75, scope: !7)
!82 = !DILocation(line: 77, column: 20, scope: !7)
!83 = !DILocation(line: 78, column: 38, scope: !7)
!84 = !DILocation(line: 78, column: 53, scope: !7)
!85 = !DILocation(line: 78, column: 64, scope: !7)
!86 = !DILocation(line: 78, column: 31, scope: !7)
!87 = !DILocation(line: 78, column: 84, scope: !7)
!88 = !DILocation(line: 78, column: 92, scope: !7)
!89 = !DILocation(line: 78, column: 76, scope: !7)
!90 = !DILocation(line: 80, column: 20, scope: !7)
!91 = !DILocation(line: 81, column: 38, scope: !7)
!92 = !DILocation(line: 81, column: 53, scope: !7)
!93 = !DILocation(line: 81, column: 64, scope: !7)
!94 = !DILocation(line: 81, column: 31, scope: !7)
!95 = !DILocation(line: 81, column: 84, scope: !7)
!96 = !DILocation(line: 81, column: 92, scope: !7)
!97 = !DILocation(line: 81, column: 76, scope: !7)
!98 = !DILocation(line: 84, column: 38, scope: !7)
!99 = !DILocation(line: 84, column: 53, scope: !7)
!100 = !DILocation(line: 84, column: 64, scope: !7)
!101 = !DILocation(line: 84, column: 31, scope: !7)
!102 = !DILocation(line: 84, column: 84, scope: !7)
!103 = !DILocation(line: 84, column: 92, scope: !7)
!104 = !DILocation(line: 84, column: 76, scope: !7)
!105 = !DILocation(line: 118, column: 15, scope: !106, inlinedAt: !108)
!106 = distinct !DILexicalBlockFile(scope: !7, file: !107, discriminator: 0)
!107 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!108 = !DILocation(line: 52, column: 42, scope: !7)
!109 = !DILocation(line: 120, column: 21, scope: !106, inlinedAt: !108)
!110 = !DILocation(line: 120, column: 16, scope: !106, inlinedAt: !108)
!111 = !DILocation(line: 121, column: 29, scope: !106, inlinedAt: !108)
!112 = !DILocation(line: 118, column: 15, scope: !106, inlinedAt: !113)
!113 = !DILocation(line: 59, column: 42, scope: !7)
!114 = !DILocation(line: 120, column: 21, scope: !106, inlinedAt: !113)
!115 = !DILocation(line: 120, column: 16, scope: !106, inlinedAt: !113)
!116 = !DILocation(line: 121, column: 29, scope: !106, inlinedAt: !113)
!117 = !DILocation(line: 118, column: 15, scope: !106, inlinedAt: !118)
!118 = !DILocation(line: 66, column: 42, scope: !7)
!119 = !DILocation(line: 120, column: 21, scope: !106, inlinedAt: !118)
!120 = !DILocation(line: 120, column: 16, scope: !106, inlinedAt: !118)
!121 = !DILocation(line: 121, column: 29, scope: !106, inlinedAt: !118)
!122 = !DILocation(line: 118, column: 15, scope: !106, inlinedAt: !123)
!123 = !DILocation(line: 69, column: 42, scope: !7)
!124 = !DILocation(line: 120, column: 21, scope: !106, inlinedAt: !123)
!125 = !DILocation(line: 120, column: 16, scope: !106, inlinedAt: !123)
!126 = !DILocation(line: 121, column: 29, scope: !106, inlinedAt: !123)
!127 = !DILocation(line: 118, column: 15, scope: !106, inlinedAt: !128)
!128 = !DILocation(line: 72, column: 42, scope: !7)
!129 = !DILocation(line: 120, column: 21, scope: !106, inlinedAt: !128)
!130 = !DILocation(line: 120, column: 16, scope: !106, inlinedAt: !128)
!131 = !DILocation(line: 121, column: 29, scope: !106, inlinedAt: !128)
!132 = !DILocation(line: 118, column: 15, scope: !106, inlinedAt: !133)
!133 = !DILocation(line: 79, column: 42, scope: !7)
!134 = !DILocation(line: 120, column: 21, scope: !106, inlinedAt: !133)
!135 = !DILocation(line: 120, column: 16, scope: !106, inlinedAt: !133)
!136 = !DILocation(line: 121, column: 29, scope: !106, inlinedAt: !133)
!137 = !DILocation(line: 118, column: 15, scope: !106, inlinedAt: !138)
!138 = !DILocation(line: 82, column: 42, scope: !7)
!139 = !DILocation(line: 120, column: 21, scope: !106, inlinedAt: !138)
!140 = !DILocation(line: 120, column: 16, scope: !106, inlinedAt: !138)
!141 = !DILocation(line: 121, column: 29, scope: !106, inlinedAt: !138)
!142 = !DILocation(line: 118, column: 15, scope: !106, inlinedAt: !143)
!143 = !DILocation(line: 85, column: 42, scope: !7)
!144 = !DILocation(line: 120, column: 21, scope: !106, inlinedAt: !143)
!145 = !DILocation(line: 120, column: 16, scope: !106, inlinedAt: !143)
!146 = !DILocation(line: 89, column: 35, scope: !7)
!147 = !DILocation(line: 92, column: 35, scope: !7)
!148 = !DILocation(line: 95, column: 35, scope: !7)
!149 = !DILocation(line: 98, column: 35, scope: !7)
!150 = !DILocation(line: 101, column: 35, scope: !7)
!151 = !DILocation(line: 104, column: 35, scope: !7)
!152 = !DILocation(line: 107, column: 35, scope: !7)
!153 = !DILocation(line: 110, column: 35, scope: !7)
!154 = !DILocation(line: 111, column: 33, scope: !7)
!155 = !DILocation(line: 111, column: 30, scope: !7)
!156 = !DILocation(line: 111, column: 44, scope: !7)
!157 = !DILocation(line: 111, column: 38, scope: !7)
!158 = !DILocation(line: 111, column: 25, scope: !7)
!159 = !DILocation(line: 111, column: 64, scope: !7)
!160 = !DILocation(line: 111, column: 56, scope: !7)
!161 = !DILocation(line: 121, column: 29, scope: !106, inlinedAt: !143)
!162 = !DILocation(line: 112, column: 34, scope: !7)
!163 = !DILocation(line: 112, column: 30, scope: !7)
!164 = !DILocation(line: 112, column: 25, scope: !7)
!165 = !DILocation(line: 112, column: 46, scope: !7)
!166 = !DILocation(line: 112, column: 4, scope: !7)
