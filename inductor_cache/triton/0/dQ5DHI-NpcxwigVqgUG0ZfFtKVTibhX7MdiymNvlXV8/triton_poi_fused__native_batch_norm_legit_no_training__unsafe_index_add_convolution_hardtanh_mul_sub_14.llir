; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_convolution_hardtanh_mul_sub_14(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) nocapture readnone %11, ptr addrspace(1) nocapture readnone %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) nocapture readnone %15, ptr addrspace(1) %16, ptr addrspace(1) %17, ptr addrspace(1) %18, ptr addrspace(1) %19, ptr addrspace(1) %20, ptr addrspace(1) nocapture readnone %21, ptr addrspace(1) %22, i32 %23) local_unnamed_addr !dbg !7 {
  %25 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %26 = shl i32 %25, 7, !dbg !11
  %27 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %28 = and i32 %27, 127, !dbg !12
  %29 = or disjoint i32 %26, %28, !dbg !13
  %30 = icmp slt i32 %29, 256, !dbg !14
  %.frozen = freeze i32 %29, !dbg !15
  %31 = sdiv i32 %.frozen, 4, !dbg !15
  %32 = srem i32 %31, 4, !dbg !16
  %33 = mul i32 %31, 4, !dbg !17
  %.decomposed = sub i32 %.frozen, %33, !dbg !17
  %34 = sdiv i32 %29, 16, !dbg !18
  %35 = srem i32 %34, 4, !dbg !19
  %36 = sext i32 %32 to i64, !dbg !20
  %37 = getelementptr i64, ptr addrspace(1) %3, i64 %36, !dbg !20
  %38 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %37, i1 %30) #3, !dbg !21
  %39 = sext i32 %.decomposed to i64, !dbg !22
  %40 = getelementptr i64, ptr addrspace(1) %4, i64 %39, !dbg !22
  %41 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %40, i1 %30) #3, !dbg !23
  %42 = getelementptr i64, ptr addrspace(1) %6, i64 %39, !dbg !24
  %43 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %42, i1 %30) #3, !dbg !25
  %44 = getelementptr float, ptr addrspace(1) %7, i64 %39, !dbg !26
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 %30) #3, !dbg !27
  %46 = getelementptr i64, ptr addrspace(1) %8, i64 %36, !dbg !28
  %47 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %46, i1 %30) #3, !dbg !29
  %48 = getelementptr float, ptr addrspace(1) %9, i64 %36, !dbg !30
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 %30) #3, !dbg !31
  %50 = sext i32 %29 to i64, !dbg !32
  %51 = getelementptr float, ptr addrspace(1) %1, i64 %50, !dbg !32
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 %30) #3, !dbg !33
  %53 = sext i32 %35 to i64, !dbg !34
  %54 = getelementptr float, ptr addrspace(1) %10, i64 %53, !dbg !34
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 %30) #3, !dbg !35
  %56 = sext i32 %34 to i64, !dbg !36
  %57 = getelementptr float, ptr addrspace(1) %13, i64 %56, !dbg !36
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 %30) #3, !dbg !37
  %59 = getelementptr float, ptr addrspace(1) %14, i64 %53, !dbg !38
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 %30) #3, !dbg !39
  %61 = getelementptr float, ptr addrspace(1) %16, i64 %39, !dbg !40
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 %30) #3, !dbg !41
  %63 = getelementptr float, ptr addrspace(1) %17, i64 %53, !dbg !42
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 %30) #3, !dbg !43
  %65 = getelementptr float, ptr addrspace(1) %18, i64 %53, !dbg !44
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 %30) #3, !dbg !45
  %67 = bitcast i32 %66 to float, !dbg !45
  %68 = getelementptr float, ptr addrspace(1) %19, i64 %53, !dbg !46
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 %30) #3, !dbg !47
  %70 = getelementptr float, ptr addrspace(1) %20, i64 %53, !dbg !48
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 %30) #3, !dbg !49
  %72 = getelementptr float, ptr addrspace(1) %22, i64 %36, !dbg !50
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 %30) #3, !dbg !51
  %74 = lshr i64 %38, 62, !dbg !52
  %75 = and i64 %74, 2, !dbg !52
  %76 = add i64 %75, %38, !dbg !52
  %77 = lshr i64 %41, 62, !dbg !53
  %78 = and i64 %77, 2, !dbg !53
  %79 = shl i64 %76, 1, !dbg !54
  %80 = shl nsw i32 %34, 2, !dbg !55
  %81 = sext i32 %80 to i64, !dbg !56
  %82 = getelementptr float, ptr addrspace(1) %5, i64 %41, !dbg !57
  %83 = getelementptr float, ptr addrspace(1) %82, i64 %78, !dbg !57
  %84 = getelementptr float, ptr addrspace(1) %83, i64 %79, !dbg !57
  %85 = getelementptr float, ptr addrspace(1) %84, i64 %81, !dbg !57
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 %30) #3, !dbg !58
  %87 = lshr i64 %43, 62, !dbg !59
  %88 = and i64 %87, 2, !dbg !59
  %89 = getelementptr float, ptr addrspace(1) %5, i64 %43, !dbg !60
  %90 = getelementptr float, ptr addrspace(1) %89, i64 %88, !dbg !60
  %91 = getelementptr float, ptr addrspace(1) %90, i64 %79, !dbg !60
  %92 = getelementptr float, ptr addrspace(1) %91, i64 %81, !dbg !60
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 %30) #3, !dbg !61
  %94 = lshr i64 %47, 62, !dbg !62
  %95 = and i64 %94, 2, !dbg !62
  %96 = add i64 %95, %47, !dbg !62
  %97 = shl i64 %96, 1, !dbg !63
  %98 = getelementptr float, ptr addrspace(1) %83, i64 %97, !dbg !64
  %99 = getelementptr float, ptr addrspace(1) %98, i64 %81, !dbg !64
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %99, i1 %30) #3, !dbg !65
  %101 = getelementptr float, ptr addrspace(1) %90, i64 %97, !dbg !66
  %102 = getelementptr float, ptr addrspace(1) %101, i64 %81, !dbg !66
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %102, i1 %30) #3, !dbg !67
  %104 = fadd float %67, 0x3EE4F8B580000000, !dbg !68
  %105 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !69
  %.not.i = icmp eq i32 %105, 0, !dbg !69
  %106 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !69
  %.not1.i = icmp eq i32 %106, 0, !dbg !69
  br i1 %.not.i, label %112, label %107, !dbg !69

107:                                              ; preds = %24
  br i1 %.not1.i, label %110, label %108, !dbg !69

108:                                              ; preds = %107
  %109 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %104) #3, !dbg !69
  br label %__nv_sqrtf.exit, !dbg !69

110:                                              ; preds = %107
  %111 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %104) #3, !dbg !69
  br label %__nv_sqrtf.exit, !dbg !69

112:                                              ; preds = %24
  br i1 %.not1.i, label %115, label %113, !dbg !69

113:                                              ; preds = %112
  %114 = tail call float @llvm.nvvm.sqrt.rn.f(float %104) #3, !dbg !69
  br label %__nv_sqrtf.exit, !dbg !69

115:                                              ; preds = %112
  %116 = tail call float @llvm.nvvm.sqrt.approx.f(float %104) #3, !dbg !69
  br label %__nv_sqrtf.exit, !dbg !69

__nv_sqrtf.exit:                                  ; preds = %108, %110, %113, %115
  %.0.i = phi float [ %109, %108 ], [ %111, %110 ], [ %114, %113 ], [ %116, %115 ], !dbg !69
  %117 = bitcast i32 %52 to float, !dbg !33
  %118 = bitcast i32 %55 to float, !dbg !35
  %119 = fadd float %117, %118, !dbg !70
  %120 = bitcast i32 %64 to float, !dbg !43
  %121 = fsub float %119, %120, !dbg !71
  %122 = bitcast i32 %58 to float, !dbg !37
  %123 = bitcast i32 %60 to float, !dbg !39
  %124 = fadd float %122, %123, !dbg !72
  %125 = fsub float %124, %124, !dbg !73
  %126 = bitcast i32 %62 to float, !dbg !41
  %127 = fmul float %125, %126, !dbg !74
  %128 = fadd float %124, %127, !dbg !75
  %129 = insertelement <2 x i32> poison, i32 %103, i64 0, !dbg !67
  %130 = insertelement <2 x i32> %129, i32 %93, i64 1, !dbg !67
  %131 = bitcast <2 x i32> %130 to <2 x float>, !dbg !67
  %132 = insertelement <2 x i32> poison, i32 %100, i64 0, !dbg !65
  %133 = insertelement <2 x i32> %132, i32 %86, i64 1, !dbg !65
  %134 = bitcast <2 x i32> %133 to <2 x float>, !dbg !65
  %135 = fsub <2 x float> %131, %134, !dbg !76
  %136 = insertelement <2 x i32> poison, i32 %45, i64 0, !dbg !77
  %137 = bitcast <2 x i32> %136 to <2 x float>, !dbg !77
  %138 = shufflevector <2 x float> %137, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !77
  %139 = fmul <2 x float> %135, %138, !dbg !77
  %140 = fadd <2 x float> %139, %134, !dbg !78
  %141 = extractelement <2 x float> %140, i64 0, !dbg !79
  %142 = extractelement <2 x float> %140, i64 1, !dbg !80
  %143 = fsub float %141, %142, !dbg !79
  %144 = bitcast i32 %49 to float, !dbg !31
  %145 = fmul float %143, %144, !dbg !81
  %146 = fadd float %142, %145, !dbg !80
  %147 = bitcast i32 %73 to float, !dbg !51
  %148 = bitcast i32 %71 to float, !dbg !49
  %149 = bitcast i32 %69 to float, !dbg !47
  %150 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !82
  %151 = fmul float %121, %150, !dbg !83
  %152 = fmul float %151, %149, !dbg !84
  %153 = fadd float %152, %148, !dbg !85
  %.inv = fcmp ole float %153, 0.000000e+00, !dbg !86
  %154 = select i1 %.inv, float 0.000000e+00, float %153, !dbg !86
  %155 = fcmp olt float %154, 6.000000e+00, !dbg !90
  %156 = fcmp uno float %154, 0.000000e+00, !dbg !92
  %157 = or i1 %155, %156, !dbg !93
  %158 = select i1 %157, float %154, float 6.000000e+00, !dbg !94
  %159 = fmul float %146, %158, !dbg !95
  %160 = fsub float %128, %128, !dbg !96
  %161 = fmul float %160, %147, !dbg !97
  %162 = fadd float %128, %161, !dbg !98
  %163 = fadd float %162, %159, !dbg !99
  %164 = getelementptr float, ptr addrspace(1) %0, i64 %50, !dbg !100
  %165 = bitcast float %146 to i32, !dbg !101
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %165, ptr addrspace(1) %164, i1 %30) #3, !dbg !101
  %166 = bitcast float %119 to i32, !dbg !102
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %166, ptr addrspace(1) %51, i1 %30) #3, !dbg !102
  %167 = getelementptr float, ptr addrspace(1) %2, i64 %50, !dbg !103
  %168 = bitcast float %163 to i32, !dbg !104
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %168, ptr addrspace(1) %167, i1 %30) #3, !dbg !104
  ret void, !dbg !105
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cylpdmhzj6xziqno3hwn47kdkkvngov6eiphceqixypcr7krrelg.py", directory: "inductor_cache/yl")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_convolution_hardtanh_mul_sub_14, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_convolution_hardtanh_mul_sub_14, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_convolution_hardtanh_mul_sub_14", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_convolution_hardtanh_mul_sub_14", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 26, scope: !7)
!17 = !DILocation(line: 25, column: 19, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 28, column: 27, scope: !7)
!20 = !DILocation(line: 29, column: 30, scope: !7)
!21 = !DILocation(line: 29, column: 35, scope: !7)
!22 = !DILocation(line: 30, column: 30, scope: !7)
!23 = !DILocation(line: 30, column: 35, scope: !7)
!24 = !DILocation(line: 31, column: 31, scope: !7)
!25 = !DILocation(line: 31, column: 36, scope: !7)
!26 = !DILocation(line: 32, column: 31, scope: !7)
!27 = !DILocation(line: 32, column: 36, scope: !7)
!28 = !DILocation(line: 33, column: 31, scope: !7)
!29 = !DILocation(line: 33, column: 36, scope: !7)
!30 = !DILocation(line: 34, column: 31, scope: !7)
!31 = !DILocation(line: 34, column: 36, scope: !7)
!32 = !DILocation(line: 35, column: 35, scope: !7)
!33 = !DILocation(line: 35, column: 40, scope: !7)
!34 = !DILocation(line: 36, column: 31, scope: !7)
!35 = !DILocation(line: 36, column: 36, scope: !7)
!36 = !DILocation(line: 39, column: 32, scope: !7)
!37 = !DILocation(line: 39, column: 37, scope: !7)
!38 = !DILocation(line: 40, column: 32, scope: !7)
!39 = !DILocation(line: 40, column: 37, scope: !7)
!40 = !DILocation(line: 42, column: 32, scope: !7)
!41 = !DILocation(line: 42, column: 37, scope: !7)
!42 = !DILocation(line: 43, column: 32, scope: !7)
!43 = !DILocation(line: 43, column: 37, scope: !7)
!44 = !DILocation(line: 44, column: 32, scope: !7)
!45 = !DILocation(line: 44, column: 37, scope: !7)
!46 = !DILocation(line: 45, column: 32, scope: !7)
!47 = !DILocation(line: 45, column: 37, scope: !7)
!48 = !DILocation(line: 46, column: 32, scope: !7)
!49 = !DILocation(line: 46, column: 37, scope: !7)
!50 = !DILocation(line: 48, column: 32, scope: !7)
!51 = !DILocation(line: 48, column: 37, scope: !7)
!52 = !DILocation(line: 52, column: 32, scope: !7)
!53 = !DILocation(line: 55, column: 32, scope: !7)
!54 = !DILocation(line: 56, column: 39, scope: !7)
!55 = !DILocation(line: 56, column: 48, scope: !7)
!56 = !DILocation(line: 56, column: 46, scope: !7)
!57 = !DILocation(line: 56, column: 30, scope: !7)
!58 = !DILocation(line: 56, column: 53, scope: !7)
!59 = !DILocation(line: 59, column: 35, scope: !7)
!60 = !DILocation(line: 60, column: 31, scope: !7)
!61 = !DILocation(line: 60, column: 55, scope: !7)
!62 = !DILocation(line: 66, column: 35, scope: !7)
!63 = !DILocation(line: 67, column: 40, scope: !7)
!64 = !DILocation(line: 67, column: 31, scope: !7)
!65 = !DILocation(line: 67, column: 55, scope: !7)
!66 = !DILocation(line: 68, column: 31, scope: !7)
!67 = !DILocation(line: 68, column: 56, scope: !7)
!68 = !DILocation(line: 92, column: 20, scope: !7)
!69 = !DILocation(line: 93, column: 27, scope: !7)
!70 = !DILocation(line: 75, column: 20, scope: !7)
!71 = !DILocation(line: 90, column: 20, scope: !7)
!72 = !DILocation(line: 83, column: 20, scope: !7)
!73 = !DILocation(line: 87, column: 20, scope: !7)
!74 = !DILocation(line: 88, column: 20, scope: !7)
!75 = !DILocation(line: 89, column: 20, scope: !7)
!76 = !DILocation(line: 69, column: 20, scope: !7)
!77 = !DILocation(line: 70, column: 20, scope: !7)
!78 = !DILocation(line: 71, column: 20, scope: !7)
!79 = !DILocation(line: 72, column: 20, scope: !7)
!80 = !DILocation(line: 74, column: 20, scope: !7)
!81 = !DILocation(line: 73, column: 20, scope: !7)
!82 = !DILocation(line: 95, column: 20, scope: !7)
!83 = !DILocation(line: 98, column: 20, scope: !7)
!84 = !DILocation(line: 99, column: 20, scope: !7)
!85 = !DILocation(line: 100, column: 20, scope: !7)
!86 = !DILocation(line: 121, column: 29, scope: !87, inlinedAt: !89)
!87 = distinct !DILexicalBlockFile(scope: !7, file: !88, discriminator: 0)
!88 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!89 = !DILocation(line: 102, column: 42, scope: !7)
!90 = !DILocation(line: 110, column: 15, scope: !87, inlinedAt: !91)
!91 = !DILocation(line: 104, column: 42, scope: !7)
!92 = !DILocation(line: 112, column: 21, scope: !87, inlinedAt: !91)
!93 = !DILocation(line: 112, column: 16, scope: !87, inlinedAt: !91)
!94 = !DILocation(line: 113, column: 29, scope: !87, inlinedAt: !91)
!95 = !DILocation(line: 105, column: 20, scope: !7)
!96 = !DILocation(line: 109, column: 20, scope: !7)
!97 = !DILocation(line: 110, column: 20, scope: !7)
!98 = !DILocation(line: 111, column: 20, scope: !7)
!99 = !DILocation(line: 112, column: 20, scope: !7)
!100 = !DILocation(line: 113, column: 28, scope: !7)
!101 = !DILocation(line: 113, column: 40, scope: !7)
!102 = !DILocation(line: 114, column: 40, scope: !7)
!103 = !DILocation(line: 115, column: 28, scope: !7)
!104 = !DILocation(line: 115, column: 40, scope: !7)
!105 = !DILocation(line: 115, column: 4, scope: !7)
