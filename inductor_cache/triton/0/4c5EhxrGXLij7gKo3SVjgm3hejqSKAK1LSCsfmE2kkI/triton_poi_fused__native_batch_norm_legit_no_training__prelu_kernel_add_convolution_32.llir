; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_add_convolution_32(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, i32 %10, i32 %11) local_unnamed_addr !dbg !7 {
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %14 = shl i32 %13, 5, !dbg !11
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %16 = lshr i32 %15, 2, !dbg !12
  %17 = and i32 %16, 31, !dbg !12
  %18 = shl i32 %15, 2, !dbg !12
  %19 = and i32 %18, 12, !dbg !12
  %20 = or disjoint i32 %14, %17, !dbg !13
  %21 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %22 = shl i32 %21, 4, !dbg !15
  %23 = or disjoint i32 %22, %19, !dbg !16
  %24 = icmp slt i32 %23, 16, !dbg !17
  %25 = shl i32 %20, 4, !dbg !18
  %26 = add i32 %23, %25, !dbg !19
  %27 = sext i32 %26 to i64, !dbg !20
  %28 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !20
  %29 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %28, i1 %24) #4, !dbg !21
  %30 = sext i32 %23 to i64, !dbg !22
  %31 = getelementptr float, ptr addrspace(1) %1, i64 %30, !dbg !22
  %32 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %31, i1 %24) #4, !dbg !23
  %33 = getelementptr float, ptr addrspace(1) %2, i64 %30, !dbg !24
  %34 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %33, i1 %24) #4, !dbg !25
  %35 = getelementptr float, ptr addrspace(1) %3, i64 %30, !dbg !26
  %36 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %35, i1 %24) #4, !dbg !27
  %37 = extractvalue { i32, i32, i32, i32 } %36, 0, !dbg !27
  %38 = extractvalue { i32, i32, i32, i32 } %36, 1, !dbg !27
  %39 = extractvalue { i32, i32, i32, i32 } %36, 2, !dbg !27
  %40 = extractvalue { i32, i32, i32, i32 } %36, 3, !dbg !27
  %41 = bitcast i32 %37 to float, !dbg !27
  %42 = bitcast i32 %38 to float, !dbg !27
  %43 = bitcast i32 %39 to float, !dbg !27
  %44 = bitcast i32 %40 to float, !dbg !27
  %45 = getelementptr float, ptr addrspace(1) %4, i64 %30, !dbg !28
  %46 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %45, i1 %24) #4, !dbg !29
  %47 = getelementptr float, ptr addrspace(1) %5, i64 %30, !dbg !30
  %48 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %47, i1 %24) #4, !dbg !31
  %49 = getelementptr float, ptr addrspace(1) %6, i64 %27, !dbg !32
  %50 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %49, i1 %24) #4, !dbg !33
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %7, i1 true) #4, !dbg !34
  %52 = fadd float %41, 0x3EE4F8B580000000, !dbg !35
  %53 = fadd float %42, 0x3EE4F8B580000000, !dbg !35
  %54 = fadd float %43, 0x3EE4F8B580000000, !dbg !35
  %55 = fadd float %44, 0x3EE4F8B580000000, !dbg !35
  %56 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i = icmp eq i32 %56, 0, !dbg !36
  %57 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i = icmp eq i32 %57, 0, !dbg !36
  br i1 %.not.i, label %63, label %58, !dbg !36

58:                                               ; preds = %12
  br i1 %.not1.i, label %61, label %59, !dbg !36

59:                                               ; preds = %58
  %60 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %52) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

61:                                               ; preds = %58
  %62 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %52) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

63:                                               ; preds = %12
  br i1 %.not1.i, label %66, label %64, !dbg !36

64:                                               ; preds = %63
  %65 = tail call float @llvm.nvvm.sqrt.rn.f(float %52) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

66:                                               ; preds = %63
  %67 = tail call float @llvm.nvvm.sqrt.approx.f(float %52) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

__nv_sqrtf.exit:                                  ; preds = %59, %61, %64, %66
  %.0.i = phi float [ %60, %59 ], [ %62, %61 ], [ %65, %64 ], [ %67, %66 ], !dbg !36
  %68 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i9 = icmp eq i32 %68, 0, !dbg !36
  %69 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i12 = icmp eq i32 %69, 0, !dbg !36
  br i1 %.not.i9, label %75, label %70, !dbg !36

70:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i12, label %73, label %71, !dbg !36

71:                                               ; preds = %70
  %72 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %53) #4, !dbg !36
  br label %__nv_sqrtf.exit13, !dbg !36

73:                                               ; preds = %70
  %74 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %53) #4, !dbg !36
  br label %__nv_sqrtf.exit13, !dbg !36

75:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i12, label %78, label %76, !dbg !36

76:                                               ; preds = %75
  %77 = tail call float @llvm.nvvm.sqrt.rn.f(float %53) #4, !dbg !36
  br label %__nv_sqrtf.exit13, !dbg !36

78:                                               ; preds = %75
  %79 = tail call float @llvm.nvvm.sqrt.approx.f(float %53) #4, !dbg !36
  br label %__nv_sqrtf.exit13, !dbg !36

__nv_sqrtf.exit13:                                ; preds = %71, %73, %76, %78
  %.0.i11 = phi float [ %72, %71 ], [ %74, %73 ], [ %77, %76 ], [ %79, %78 ], !dbg !36
  %80 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i14 = icmp eq i32 %80, 0, !dbg !36
  %81 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i17 = icmp eq i32 %81, 0, !dbg !36
  br i1 %.not.i14, label %87, label %82, !dbg !36

82:                                               ; preds = %__nv_sqrtf.exit13
  br i1 %.not1.i17, label %85, label %83, !dbg !36

83:                                               ; preds = %82
  %84 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %54) #4, !dbg !36
  br label %__nv_sqrtf.exit18, !dbg !36

85:                                               ; preds = %82
  %86 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %54) #4, !dbg !36
  br label %__nv_sqrtf.exit18, !dbg !36

87:                                               ; preds = %__nv_sqrtf.exit13
  br i1 %.not1.i17, label %90, label %88, !dbg !36

88:                                               ; preds = %87
  %89 = tail call float @llvm.nvvm.sqrt.rn.f(float %54) #4, !dbg !36
  br label %__nv_sqrtf.exit18, !dbg !36

90:                                               ; preds = %87
  %91 = tail call float @llvm.nvvm.sqrt.approx.f(float %54) #4, !dbg !36
  br label %__nv_sqrtf.exit18, !dbg !36

__nv_sqrtf.exit18:                                ; preds = %83, %85, %88, %90
  %.0.i16 = phi float [ %84, %83 ], [ %86, %85 ], [ %89, %88 ], [ %91, %90 ], !dbg !36
  %92 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i19 = icmp eq i32 %92, 0, !dbg !36
  %93 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i22 = icmp eq i32 %93, 0, !dbg !36
  br i1 %.not.i19, label %99, label %94, !dbg !36

94:                                               ; preds = %__nv_sqrtf.exit18
  br i1 %.not1.i22, label %97, label %95, !dbg !36

95:                                               ; preds = %94
  %96 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %55) #4, !dbg !36
  br label %__nv_sqrtf.exit23, !dbg !36

97:                                               ; preds = %94
  %98 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %55) #4, !dbg !36
  br label %__nv_sqrtf.exit23, !dbg !36

99:                                               ; preds = %__nv_sqrtf.exit18
  br i1 %.not1.i22, label %102, label %100, !dbg !36

100:                                              ; preds = %99
  %101 = tail call float @llvm.nvvm.sqrt.rn.f(float %55) #4, !dbg !36
  br label %__nv_sqrtf.exit23, !dbg !36

102:                                              ; preds = %99
  %103 = tail call float @llvm.nvvm.sqrt.approx.f(float %55) #4, !dbg !36
  br label %__nv_sqrtf.exit23, !dbg !36

__nv_sqrtf.exit23:                                ; preds = %95, %97, %100, %102
  %.0.i21 = phi float [ %96, %95 ], [ %98, %97 ], [ %101, %100 ], [ %103, %102 ], !dbg !36
  %104 = extractvalue { i32, i32, i32, i32 } %29, 3, !dbg !21
  %105 = extractvalue { i32, i32, i32, i32 } %32, 3, !dbg !23
  %106 = extractvalue { i32, i32, i32, i32 } %34, 3, !dbg !25
  %107 = extractvalue { i32, i32, i32, i32 } %29, 2, !dbg !21
  %108 = extractvalue { i32, i32, i32, i32 } %32, 2, !dbg !23
  %109 = extractvalue { i32, i32, i32, i32 } %34, 2, !dbg !25
  %110 = extractvalue { i32, i32, i32, i32 } %29, 1, !dbg !21
  %111 = extractvalue { i32, i32, i32, i32 } %32, 1, !dbg !23
  %112 = extractvalue { i32, i32, i32, i32 } %34, 1, !dbg !25
  %113 = extractvalue { i32, i32, i32, i32 } %29, 0, !dbg !21
  %114 = extractvalue { i32, i32, i32, i32 } %32, 0, !dbg !23
  %115 = extractvalue { i32, i32, i32, i32 } %34, 0, !dbg !25
  %116 = bitcast i32 %51 to float, !dbg !34
  %117 = extractvalue { i32, i32, i32, i32 } %50, 3, !dbg !33
  %118 = extractvalue { i32, i32, i32, i32 } %50, 2, !dbg !33
  %119 = extractvalue { i32, i32, i32, i32 } %50, 1, !dbg !33
  %120 = extractvalue { i32, i32, i32, i32 } %50, 0, !dbg !33
  %121 = extractvalue { i32, i32, i32, i32 } %48, 3, !dbg !31
  %122 = extractvalue { i32, i32, i32, i32 } %48, 2, !dbg !31
  %123 = extractvalue { i32, i32, i32, i32 } %48, 1, !dbg !31
  %124 = extractvalue { i32, i32, i32, i32 } %48, 0, !dbg !31
  %125 = extractvalue { i32, i32, i32, i32 } %46, 3, !dbg !29
  %126 = extractvalue { i32, i32, i32, i32 } %46, 2, !dbg !29
  %127 = extractvalue { i32, i32, i32, i32 } %46, 1, !dbg !29
  %128 = extractvalue { i32, i32, i32, i32 } %46, 0, !dbg !29
  %129 = and i32 %18, 28, !dbg !12
  %130 = or disjoint i32 %14, %129, !dbg !13
  %.frozen = freeze i32 %130, !dbg !37
  %131 = sdiv i32 %.frozen, 1024, !dbg !37
  %132 = mul i32 %131, 1024, !dbg !38
  %.decomposed = sub i32 %.frozen, %132, !dbg !38
  %133 = lshr i32 %15, 3, !dbg !39
  %134 = and i32 %133, 15, !dbg !39
  %135 = or disjoint i32 %22, %134, !dbg !16
  %136 = icmp slt i32 %135, 16, !dbg !17
  %137 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !40
  %138 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i11) #4, !dbg !40
  %139 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i16) #4, !dbg !40
  %140 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i21) #4, !dbg !40
  %141 = insertelement <4 x i32> poison, i32 %104, i64 0, !dbg !21
  %142 = insertelement <4 x i32> %141, i32 %107, i64 1, !dbg !21
  %143 = insertelement <4 x i32> %142, i32 %110, i64 2, !dbg !21
  %144 = insertelement <4 x i32> %143, i32 %113, i64 3, !dbg !21
  %145 = bitcast <4 x i32> %144 to <4 x float>, !dbg !21
  %146 = insertelement <4 x i32> poison, i32 %105, i64 0, !dbg !23
  %147 = insertelement <4 x i32> %146, i32 %108, i64 1, !dbg !23
  %148 = insertelement <4 x i32> %147, i32 %111, i64 2, !dbg !23
  %149 = insertelement <4 x i32> %148, i32 %114, i64 3, !dbg !23
  %150 = bitcast <4 x i32> %149 to <4 x float>, !dbg !23
  %151 = fadd <4 x float> %145, %150, !dbg !41
  %152 = insertelement <4 x i32> poison, i32 %106, i64 0, !dbg !25
  %153 = insertelement <4 x i32> %152, i32 %109, i64 1, !dbg !25
  %154 = insertelement <4 x i32> %153, i32 %112, i64 2, !dbg !25
  %155 = insertelement <4 x i32> %154, i32 %115, i64 3, !dbg !25
  %156 = bitcast <4 x i32> %155 to <4 x float>, !dbg !25
  %157 = fsub <4 x float> %151, %156, !dbg !42
  %158 = insertelement <4 x i32> poison, i32 %117, i64 0, !dbg !33
  %159 = insertelement <4 x i32> %158, i32 %118, i64 1, !dbg !33
  %160 = insertelement <4 x i32> %159, i32 %119, i64 2, !dbg !33
  %161 = insertelement <4 x i32> %160, i32 %120, i64 3, !dbg !33
  %162 = bitcast <4 x i32> %161 to <4 x float>, !dbg !33
  %163 = insertelement <4 x i32> poison, i32 %121, i64 0, !dbg !31
  %164 = insertelement <4 x i32> %163, i32 %122, i64 1, !dbg !31
  %165 = insertelement <4 x i32> %164, i32 %123, i64 2, !dbg !31
  %166 = insertelement <4 x i32> %165, i32 %124, i64 3, !dbg !31
  %167 = bitcast <4 x i32> %166 to <4 x float>, !dbg !31
  %168 = insertelement <4 x i32> poison, i32 %125, i64 0, !dbg !29
  %169 = insertelement <4 x i32> %168, i32 %126, i64 1, !dbg !29
  %170 = insertelement <4 x i32> %169, i32 %127, i64 2, !dbg !29
  %171 = insertelement <4 x i32> %170, i32 %128, i64 3, !dbg !29
  %172 = bitcast <4 x i32> %171 to <4 x float>, !dbg !29
  %173 = insertelement <4 x float> poison, float %140, i64 0, !dbg !43
  %174 = insertelement <4 x float> %173, float %139, i64 1, !dbg !43
  %175 = insertelement <4 x float> %174, float %138, i64 2, !dbg !43
  %176 = insertelement <4 x float> %175, float %137, i64 3, !dbg !43
  %177 = fmul <4 x float> %157, %176, !dbg !43
  %178 = fmul <4 x float> %177, %172, !dbg !44
  %179 = fadd <4 x float> %178, %167, !dbg !45
  %180 = fadd <4 x float> %179, %162, !dbg !46
  %181 = fcmp ogt <4 x float> %180, zeroinitializer, !dbg !47
  %182 = extractelement <4 x float> %180, i64 3, !dbg !48
  %183 = fmul float %182, %116, !dbg !49
  %184 = extractelement <4 x float> %180, i64 2, !dbg !48
  %185 = fmul float %184, %116, !dbg !49
  %186 = extractelement <4 x float> %180, i64 1, !dbg !48
  %187 = fmul float %186, %116, !dbg !49
  %188 = extractelement <4 x float> %180, i64 0, !dbg !48
  %189 = fmul float %188, %116, !dbg !49
  %190 = extractelement <4 x i1> %181, i64 3, !dbg !50
  %191 = select i1 %190, float %182, float %183, !dbg !50
  %192 = extractelement <4 x i1> %181, i64 2, !dbg !50
  %193 = select i1 %192, float %184, float %185, !dbg !50
  %194 = extractelement <4 x i1> %181, i64 1, !dbg !50
  %195 = select i1 %194, float %186, float %187, !dbg !50
  %196 = extractelement <4 x i1> %181, i64 0, !dbg !50
  %197 = select i1 %196, float %188, float %189, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !51
  %bc = bitcast <4 x float> %151 to <4 x i32>, !dbg !52
  %198 = extractelement <4 x i32> %bc, i64 3, !dbg !52
  %bc24 = bitcast <4 x float> %151 to <4 x i32>, !dbg !52
  %199 = extractelement <4 x i32> %bc24, i64 2, !dbg !52
  %bc25 = bitcast <4 x float> %151 to <4 x i32>, !dbg !52
  %200 = extractelement <4 x i32> %bc25, i64 1, !dbg !52
  %bc26 = bitcast <4 x float> %151 to <4 x i32>, !dbg !52
  %201 = extractelement <4 x i32> %bc26, i64 0, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %198, i32 %199, i32 %200, i32 %201, ptr addrspace(1) %28, i1 %24) #4, !dbg !52
  %202 = getelementptr float, ptr addrspace(1) %8, i64 %27, !dbg !53
  %203 = bitcast float %182 to i32, !dbg !48
  %204 = bitcast float %184 to i32, !dbg !48
  %205 = bitcast float %186 to i32, !dbg !48
  %206 = bitcast float %188 to i32, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %203, i32 %204, i32 %205, i32 %206, ptr addrspace(1) %202, i1 %24) #4, !dbg !48
  %207 = shl i32 %135, 10, !dbg !54
  %208 = add i32 %207, %.decomposed, !dbg !55
  %209 = shl i32 %131, 14, !dbg !56
  %210 = add i32 %208, %209, !dbg !57
  %211 = sext i32 %210 to i64, !dbg !58
  %212 = getelementptr float, ptr addrspace(1) %9, i64 %211, !dbg !58
  %213 = shl i32 %15, 7, !dbg !59
  %214 = and i32 %213, 384, !dbg !59
  %215 = or disjoint i32 %214, %17, !dbg !59
  %216 = and i32 %18, 508, !dbg !59
  %217 = lshr exact i32 %214, 1, !dbg !59
  %218 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %217, !dbg !59
  %219 = getelementptr float, ptr addrspace(3) %218, i32 %215, !dbg !59
  %220 = bitcast float %191 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %219, <1 x i32> %220, i1 true) #4, !dbg !59
  %221 = or disjoint i32 %215, 32, !dbg !59
  %222 = lshr i32 %221, 3, !dbg !59
  %223 = and i32 %222, 52, !dbg !59
  %224 = getelementptr float, ptr addrspace(3) @global_smem, i32 %223, !dbg !59
  %225 = getelementptr float, ptr addrspace(3) %224, i32 %221, !dbg !59
  %226 = bitcast float %193 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %225, <1 x i32> %226, i1 true) #4, !dbg !59
  %227 = or disjoint i32 %215, 64, !dbg !59
  %228 = lshr i32 %227, 3, !dbg !59
  %229 = and i32 %228, 56, !dbg !59
  %230 = getelementptr float, ptr addrspace(3) @global_smem, i32 %229, !dbg !59
  %231 = getelementptr float, ptr addrspace(3) %230, i32 %227, !dbg !59
  %232 = bitcast float %195 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %231, <1 x i32> %232, i1 true) #4, !dbg !59
  %233 = or disjoint i32 %215, 96, !dbg !59
  %234 = lshr i32 %233, 3, !dbg !59
  %235 = and i32 %234, 60, !dbg !59
  %236 = getelementptr float, ptr addrspace(3) @global_smem, i32 %235, !dbg !59
  %237 = getelementptr float, ptr addrspace(3) %236, i32 %233, !dbg !59
  %238 = bitcast float %197 to <1 x i32>, !dbg !59
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %237, <1 x i32> %238, i1 true) #4, !dbg !59
  tail call void @llvm.nvvm.barrier0(), !dbg !59
  %239 = lshr i32 %18, 3, !dbg !59
  %240 = and i32 %239, 60, !dbg !59
  %241 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %240, !dbg !59
  %242 = getelementptr inbounds float, ptr addrspace(3) %241, i32 %216, !dbg !59
  %.extract = load i32, ptr addrspace(3) %242, align 16, !dbg !59
  %243 = getelementptr inbounds i8, ptr addrspace(3) %242, i32 4, !dbg !59
  %.extract6 = load i32, ptr addrspace(3) %243, align 4, !dbg !59
  %244 = getelementptr inbounds i8, ptr addrspace(3) %242, i32 8, !dbg !59
  %.extract7 = load i32, ptr addrspace(3) %244, align 8, !dbg !59
  %245 = getelementptr inbounds i8, ptr addrspace(3) %242, i32 12, !dbg !59
  %.extract8 = load i32, ptr addrspace(3) %245, align 4, !dbg !59
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract6, i32 %.extract7, i32 %.extract8, ptr addrspace(1) %212, i1 %136) #4, !dbg !59
  ret void, !dbg !60
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cfqt4pmzsz6crjntf63rptlcqidr5wxw62teq4xaps3knv2ujq7j.py", directory: "inductor_cache/fq")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_add_convolution_32, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_add_convolution_32, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_add_convolution_32", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_add_convolution_32", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 23, scope: !7)
!17 = !DILocation(line: 27, column: 21, scope: !7)
!18 = !DILocation(line: 32, column: 42, scope: !7)
!19 = !DILocation(line: 32, column: 39, scope: !7)
!20 = !DILocation(line: 32, column: 34, scope: !7)
!21 = !DILocation(line: 32, column: 47, scope: !7)
!22 = !DILocation(line: 33, column: 30, scope: !7)
!23 = !DILocation(line: 33, column: 35, scope: !7)
!24 = !DILocation(line: 34, column: 30, scope: !7)
!25 = !DILocation(line: 34, column: 35, scope: !7)
!26 = !DILocation(line: 35, column: 30, scope: !7)
!27 = !DILocation(line: 35, column: 35, scope: !7)
!28 = !DILocation(line: 36, column: 31, scope: !7)
!29 = !DILocation(line: 36, column: 36, scope: !7)
!30 = !DILocation(line: 37, column: 31, scope: !7)
!31 = !DILocation(line: 37, column: 36, scope: !7)
!32 = !DILocation(line: 38, column: 31, scope: !7)
!33 = !DILocation(line: 38, column: 44, scope: !7)
!34 = !DILocation(line: 39, column: 20, scope: !7)
!35 = !DILocation(line: 44, column: 18, scope: !7)
!36 = !DILocation(line: 45, column: 26, scope: !7)
!37 = !DILocation(line: 31, column: 19, scope: !7)
!38 = !DILocation(line: 30, column: 19, scope: !7)
!39 = !DILocation(line: 26, column: 44, scope: !7)
!40 = !DILocation(line: 47, column: 19, scope: !7)
!41 = !DILocation(line: 41, column: 18, scope: !7)
!42 = !DILocation(line: 42, column: 18, scope: !7)
!43 = !DILocation(line: 50, column: 19, scope: !7)
!44 = !DILocation(line: 51, column: 20, scope: !7)
!45 = !DILocation(line: 52, column: 20, scope: !7)
!46 = !DILocation(line: 53, column: 20, scope: !7)
!47 = !DILocation(line: 55, column: 20, scope: !7)
!48 = !DILocation(line: 60, column: 45, scope: !7)
!49 = !DILocation(line: 56, column: 20, scope: !7)
!50 = !DILocation(line: 57, column: 35, scope: !7)
!51 = !DILocation(line: 58, column: 4, scope: !7)
!52 = !DILocation(line: 59, column: 47, scope: !7)
!53 = !DILocation(line: 60, column: 25, scope: !7)
!54 = !DILocation(line: 61, column: 35, scope: !7)
!55 = !DILocation(line: 61, column: 30, scope: !7)
!56 = !DILocation(line: 61, column: 46, scope: !7)
!57 = !DILocation(line: 61, column: 40, scope: !7)
!58 = !DILocation(line: 61, column: 25, scope: !7)
!59 = !DILocation(line: 61, column: 58, scope: !7)
!60 = !DILocation(line: 61, column: 4, scope: !7)
