#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [16, 2], warpsPerCTA = [1, 4], order = [0, 1]}>
#loc = loc("inductor_cache/he/cheqlbnjpoau73oa6ccbyuyfcpm2erqtyri2jee4zktmtjl6n23c.py":19:0)
#loc1 = loc(unknown)
#loc32 = loc("inductor_cache/he/cheqlbnjpoau73oa6ccbyuyfcpm2erqtyri2jee4zktmtjl6n23c.py":41:25)
#loc39 = loc(callsite(#loc1 at #loc32))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_red_fused__softmax_23(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/he/cheqlbnjpoau73oa6ccbyuyfcpm2erqtyri2jee4zktmtjl6n23c.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/he/cheqlbnjpoau73oa6ccbyuyfcpm2erqtyri2jee4zktmtjl6n23c.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/he/cheqlbnjpoau73oa6ccbyuyfcpm2erqtyri2jee4zktmtjl6n23c.py":19:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/he/cheqlbnjpoau73oa6ccbyuyfcpm2erqtyri2jee4zktmtjl6n23c.py":19:0), %arg4: i32 loc("inductor_cache/he/cheqlbnjpoau73oa6ccbyuyfcpm2erqtyri2jee4zktmtjl6n23c.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<16x32xf32, #blocked> loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %c100_i32 = arith.constant 100 : i32 loc(#loc1)
    %c32_i32 = arith.constant 32 : i32 loc(#loc1)
    %c16_i32 = arith.constant 16 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<16> : tensor<16x1xi32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<4> : tensor<16x1xi32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<400> : tensor<16x1xi32, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<4> : tensor<1x32xi32, #blocked> loc(#loc1)
    %cst_4 = arith.constant dense<25> : tensor<16x1xi32, #blocked> loc(#loc1)
    %cst_5 = arith.constant dense<100> : tensor<1x32xi32, #blocked> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c16_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc4)
    %3 = tt.expand_dims %2 {axis = 1 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<16x1xi32, #blocked> loc(#loc4)
    %4 = tt.splat %1 : i32 -> tensor<16x1xi32, #blocked> loc(#loc5)
    %5 = arith.addi %4, %3 : tensor<16x1xi32, #blocked> loc(#loc5)
    %6 = arith.cmpi slt, %5, %cst_0 : tensor<16x1xi32, #blocked> loc(#loc6)
    %7 = tt.make_range {end = 32 : i32, start = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc7)
    %8 = tt.expand_dims %7 {axis = 0 : i32} : tensor<32xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x32xi32, #blocked> loc(#loc7)
    %9 = arith.remsi %5, %cst_1 : tensor<16x1xi32, #blocked> loc(#loc8)
    %10 = arith.divsi %5, %cst_1 : tensor<16x1xi32, #blocked> loc(#loc9)
    %11 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<16x1x!tt.ptr<f32>, #blocked> loc(#loc10)
    %12 = tt.addptr %11, %10 : tensor<16x1x!tt.ptr<f32>, #blocked>, tensor<16x1xi32, #blocked> loc(#loc10)
    %13 = tt.load %12, %6 evictionPolicy = evict_last : tensor<16x1x!tt.ptr<f32>, #blocked> loc(#loc11)
    %14 = arith.muli %9, %cst_4 : tensor<16x1xi32, #blocked> loc(#loc12)
    %15 = tt.broadcast %14 : tensor<16x1xi32, #blocked> -> tensor<16x32xi32, #blocked> loc(#loc13)
    %16 = arith.muli %10, %cst_2 : tensor<16x1xi32, #blocked> loc(#loc14)
    %17 = tt.broadcast %16 : tensor<16x1xi32, #blocked> -> tensor<16x32xi32, #blocked> loc(#loc15)
    %18 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<16x32x!tt.ptr<f32>, #blocked> loc(#loc16)
    %19 = tt.broadcast %6 : tensor<16x1xi1, #blocked> -> tensor<16x32xi1, #blocked> loc(#loc17)
    %20 = tt.broadcast %13 : tensor<16x1xf32, #blocked> -> tensor<16x32xf32, #blocked> loc(#loc18)
    %21 = scf.for %arg5 = %c0_i32 to %c100_i32 step %c32_i32 iter_args(%arg6 = %cst) -> (tensor<16x32xf32, #blocked>)  : i32 {
      %26 = tt.splat %arg5 : i32 -> tensor<1x32xi32, #blocked> loc(#loc20)
      %27 = arith.addi %26, %8 : tensor<1x32xi32, #blocked> loc(#loc20)
      %28 = arith.cmpi slt, %27, %cst_5 : tensor<1x32xi32, #blocked> loc(#loc21)
      %29 = arith.remsi %27, %cst_3 : tensor<1x32xi32, #blocked> loc(#loc22)
      %30 = arith.muli %29, %cst_5 : tensor<1x32xi32, #blocked> loc(#loc23)
      %31 = tt.broadcast %30 : tensor<1x32xi32, #blocked> -> tensor<16x32xi32, #blocked> loc(#loc13)
      %32 = arith.addi %15, %31 : tensor<16x32xi32, #blocked> loc(#loc13)
      %33 = arith.addi %32, %17 : tensor<16x32xi32, #blocked> loc(#loc15)
      %34 = arith.divsi %27, %cst_3 : tensor<1x32xi32, #blocked> loc(#loc24)
      %35 = tt.broadcast %34 : tensor<1x32xi32, #blocked> -> tensor<16x32xi32, #blocked> loc(#loc25)
      %36 = arith.addi %33, %35 : tensor<16x32xi32, #blocked> loc(#loc25)
      %37 = tt.addptr %18, %36 : tensor<16x32x!tt.ptr<f32>, #blocked>, tensor<16x32xi32, #blocked> loc(#loc16)
      %38 = tt.broadcast %28 : tensor<1x32xi1, #blocked> -> tensor<16x32xi1, #blocked> loc(#loc17)
      %39 = arith.andi %38, %19 : tensor<16x32xi1, #blocked> loc(#loc17)
      %40 = tt.load %37, %39, %cst evictionPolicy = evict_last : tensor<16x32x!tt.ptr<f32>, #blocked> loc(#loc26)
      %41 = arith.subf %40, %20 : tensor<16x32xf32, #blocked> loc(#loc18)
      %42 = math.exp %41 : tensor<16x32xf32, #blocked> loc(#loc27)
      %43 = arith.addf %arg6, %42 : tensor<16x32xf32, #blocked> loc(#loc28)
      %44 = arith.select %39, %43, %arg6 : tensor<16x32xi1, #blocked>, tensor<16x32xf32, #blocked> loc(#loc29)
      scf.yield %44 : tensor<16x32xf32, #blocked> loc(#loc30)
    } loc(#loc19)
    %22 = "tt.reduce"(%21) <{axis = 1 : i32}> ({
    ^bb0(%arg5: f32 loc(callsite(#loc1 at #loc32)), %arg6: f32 loc(callsite(#loc1 at #loc32))):
      %26 = arith.addf %arg5, %arg6 : f32 loc(#loc41)
      tt.reduce.return %26 : f32 loc(#loc38)
    }) : (tensor<16x32xf32, #blocked>) -> tensor<16xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc38)
    %23 = tt.expand_dims %22 {axis = 1 : i32} : tensor<16xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<16x1xf32, #blocked> loc(#loc34)
    %24 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<16x1x!tt.ptr<f32>, #blocked> loc(#loc35)
    %25 = tt.addptr %24, %5 : tensor<16x1x!tt.ptr<f32>, #blocked>, tensor<16x1xi32, #blocked> loc(#loc35)
    tt.store %25, %23, %6 : tensor<16x1x!tt.ptr<f32>, #blocked> loc(#loc36)
    tt.return loc(#loc37)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/he/cheqlbnjpoau73oa6ccbyuyfcpm2erqtyri2jee4zktmtjl6n23c.py":22:28)
#loc3 = loc("inductor_cache/he/cheqlbnjpoau73oa6ccbyuyfcpm2erqtyri2jee4zktmtjl6n23c.py":22:33)
#loc4 = loc("inductor_cache/he/cheqlbnjpoau73oa6ccbyuyfcpm2erqtyri2jee4zktmtjl6n23c.py":23:44)
#loc5 = loc("inductor_cache/he/cheqlbnjpoau73oa6ccbyuyfcpm2erqtyri2jee4zktmtjl6n23c.py":23:23)
#loc6 = loc("inductor_cache/he/cheqlbnjpoau73oa6ccbyuyfcpm2erqtyri2jee4zktmtjl6n23c.py":24:21)
#loc7 = loc("inductor_cache/he/cheqlbnjpoau73oa6ccbyuyfcpm2erqtyri2jee4zktmtjl6n23c.py":25:33)
#loc8 = loc("inductor_cache/he/cheqlbnjpoau73oa6ccbyuyfcpm2erqtyri2jee4zktmtjl6n23c.py":26:19)
#loc9 = loc("inductor_cache/he/cheqlbnjpoau73oa6ccbyuyfcpm2erqtyri2jee4zktmtjl6n23c.py":27:19)
#loc10 = loc("inductor_cache/he/cheqlbnjpoau73oa6ccbyuyfcpm2erqtyri2jee4zktmtjl6n23c.py":28:30)
#loc11 = loc("inductor_cache/he/cheqlbnjpoau73oa6ccbyuyfcpm2erqtyri2jee4zktmtjl6n23c.py":28:35)
#loc12 = loc("inductor_cache/he/cheqlbnjpoau73oa6ccbyuyfcpm2erqtyri2jee4zktmtjl6n23c.py":35:37)
#loc13 = loc("inductor_cache/he/cheqlbnjpoau73oa6ccbyuyfcpm2erqtyri2jee4zktmtjl6n23c.py":35:42)
#loc14 = loc("inductor_cache/he/cheqlbnjpoau73oa6ccbyuyfcpm2erqtyri2jee4zktmtjl6n23c.py":35:63)
#loc15 = loc("inductor_cache/he/cheqlbnjpoau73oa6ccbyuyfcpm2erqtyri2jee4zktmtjl6n23c.py":35:59)
#loc16 = loc("inductor_cache/he/cheqlbnjpoau73oa6ccbyuyfcpm2erqtyri2jee4zktmtjl6n23c.py":35:34)
#loc17 = loc("inductor_cache/he/cheqlbnjpoau73oa6ccbyuyfcpm2erqtyri2jee4zktmtjl6n23c.py":35:88)
#loc18 = loc("inductor_cache/he/cheqlbnjpoau73oa6ccbyuyfcpm2erqtyri2jee4zktmtjl6n23c.py":36:22)
#loc19 = loc("inductor_cache/he/cheqlbnjpoau73oa6ccbyuyfcpm2erqtyri2jee4zktmtjl6n23c.py":31:36)
#loc20 = loc("inductor_cache/he/cheqlbnjpoau73oa6ccbyuyfcpm2erqtyri2jee4zktmtjl6n23c.py":32:27)
#loc21 = loc("inductor_cache/he/cheqlbnjpoau73oa6ccbyuyfcpm2erqtyri2jee4zktmtjl6n23c.py":33:25)
#loc22 = loc("inductor_cache/he/cheqlbnjpoau73oa6ccbyuyfcpm2erqtyri2jee4zktmtjl6n23c.py":35:53)
#loc23 = loc("inductor_cache/he/cheqlbnjpoau73oa6ccbyuyfcpm2erqtyri2jee4zktmtjl6n23c.py":35:48)
#loc24 = loc("inductor_cache/he/cheqlbnjpoau73oa6ccbyuyfcpm2erqtyri2jee4zktmtjl6n23c.py":35:75)
#loc25 = loc("inductor_cache/he/cheqlbnjpoau73oa6ccbyuyfcpm2erqtyri2jee4zktmtjl6n23c.py":35:69)
#loc26 = loc("inductor_cache/he/cheqlbnjpoau73oa6ccbyuyfcpm2erqtyri2jee4zktmtjl6n23c.py":35:80)
#loc27 = loc("inductor_cache/he/cheqlbnjpoau73oa6ccbyuyfcpm2erqtyri2jee4zktmtjl6n23c.py":37:27)
#loc28 = loc("inductor_cache/he/cheqlbnjpoau73oa6ccbyuyfcpm2erqtyri2jee4zktmtjl6n23c.py":39:23)
#loc29 = loc("inductor_cache/he/cheqlbnjpoau73oa6ccbyuyfcpm2erqtyri2jee4zktmtjl6n23c.py":40:46)
#loc30 = loc("inductor_cache/he/cheqlbnjpoau73oa6ccbyuyfcpm2erqtyri2jee4zktmtjl6n23c.py":40:8)
#loc31 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc33 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc34 = loc("inductor_cache/he/cheqlbnjpoau73oa6ccbyuyfcpm2erqtyri2jee4zktmtjl6n23c.py":41:28)
#loc35 = loc("inductor_cache/he/cheqlbnjpoau73oa6ccbyuyfcpm2erqtyri2jee4zktmtjl6n23c.py":42:25)
#loc36 = loc("inductor_cache/he/cheqlbnjpoau73oa6ccbyuyfcpm2erqtyri2jee4zktmtjl6n23c.py":42:36)
#loc37 = loc("inductor_cache/he/cheqlbnjpoau73oa6ccbyuyfcpm2erqtyri2jee4zktmtjl6n23c.py":42:4)
#loc38 = loc(callsite(#loc31 at #loc32))
#loc40 = loc(callsite(#loc33 at #loc31))
#loc41 = loc(callsite(#loc40 at #loc32))
