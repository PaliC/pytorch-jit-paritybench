; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_red_fused__softmax_23(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %7 = shl i32 %6, 4, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = and i32 %8, 15, !dbg !12
  %10 = or disjoint i32 %7, %9, !dbg !13
  %11 = icmp slt i32 %10, 16, !dbg !14
  %12 = lshr i32 %8, 4, !dbg !15
  %13 = and i32 %12, 3, !dbg !15
  %14 = and i32 %12, 7, !dbg !15
  %.frozen = freeze i32 %10, !dbg !16
  %15 = sdiv i32 %.frozen, 4, !dbg !16
  %16 = mul i32 %15, 4, !dbg !17
  %.decomposed = sub i32 %.frozen, %16, !dbg !17
  %17 = sext i32 %15 to i64, !dbg !18
  %18 = getelementptr float, ptr addrspace(1) %1, i64 %17, !dbg !18
  %19 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %18, i1 %11) #3, !dbg !19
  %20 = bitcast i32 %19 to float, !dbg !19
  %21 = mul nsw i32 %.decomposed, 25, !dbg !20
  %22 = mul i32 %15, 400, !dbg !21
  %23 = mul nuw nsw i32 %13, 100
  %24 = add nsw i32 %21, %23
  %25 = add i32 %24, %22
  %26 = zext nneg i32 %14 to i64, !dbg !22
  %27 = insertelement <4 x i1> poison, i1 %11, i64 0, !dbg !23
  %28 = shufflevector <4 x i1> %27, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !23
  br label %29, !dbg !22

29:                                               ; preds = %5, %29
  %indvars.iv = phi i64 [ 0, %5 ], [ %indvars.iv.next, %29 ]
  %30 = phi <4 x float> [ zeroinitializer, %5 ], [ %90, %29 ]
  %31 = or disjoint i64 %indvars.iv, %26, !dbg !24
  %32 = or disjoint i64 %31, 8, !dbg !24
  %33 = or disjoint i64 %31, 16, !dbg !24
  %34 = or disjoint i64 %31, 24, !dbg !24
  %35 = lshr i64 %31, 2, !dbg !25
  %36 = lshr i64 %32, 2, !dbg !25
  %37 = lshr i64 %33, 2, !dbg !25
  %38 = lshr i64 %34, 2, !dbg !25
  %39 = trunc nuw nsw i64 %35 to i32, !dbg !26
  %40 = add i32 %25, %39, !dbg !26
  %41 = trunc nuw nsw i64 %36 to i32, !dbg !26
  %42 = add i32 %25, %41, !dbg !26
  %43 = trunc nuw nsw i64 %37 to i32, !dbg !26
  %44 = add i32 %25, %43, !dbg !26
  %45 = trunc nuw nsw i64 %38 to i32, !dbg !26
  %46 = add i32 %25, %45, !dbg !26
  %47 = sext i32 %40 to i64, !dbg !27
  %48 = getelementptr float, ptr addrspace(1) %0, i64 %47, !dbg !27
  %49 = sext i32 %42 to i64, !dbg !27
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !27
  %51 = sext i32 %44 to i64, !dbg !27
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !27
  %53 = sext i32 %46 to i64, !dbg !27
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !27
  %55 = insertelement <4 x i64> poison, i64 %31, i64 0, !dbg !28
  %56 = insertelement <4 x i64> %55, i64 %32, i64 1, !dbg !28
  %57 = insertelement <4 x i64> %56, i64 %33, i64 2, !dbg !28
  %58 = insertelement <4 x i64> %57, i64 %34, i64 3, !dbg !28
  %59 = icmp samesign ult <4 x i64> %58, splat (i64 100), !dbg !28
  %60 = and <4 x i1> %28, %59, !dbg !23
  %61 = extractelement <4 x i1> %60, i64 0, !dbg !29
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %48, i1 %61, i32 0, i1 %61) #3, !dbg !29
  %63 = bitcast i32 %62 to float, !dbg !29
  %64 = extractelement <4 x i1> %60, i64 1, !dbg !29
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %50, i1 %64, i32 0, i1 %64) #3, !dbg !29
  %66 = bitcast i32 %65 to float, !dbg !29
  %67 = extractelement <4 x i1> %60, i64 2, !dbg !29
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %52, i1 %67, i32 0, i1 %67) #3, !dbg !29
  %69 = bitcast i32 %68 to float, !dbg !29
  %70 = extractelement <4 x i1> %60, i64 3, !dbg !29
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %54, i1 %70, i32 0, i1 %70) #3, !dbg !29
  %72 = bitcast i32 %71 to float, !dbg !29
  %73 = fsub float %63, %20, !dbg !30
  %74 = fsub float %66, %20, !dbg !30
  %75 = fsub float %69, %20, !dbg !30
  %76 = fsub float %72, %20, !dbg !30
  %77 = fmul float %73, 0x3FF7154760000000, !dbg !31
  %78 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %77) #3, !dbg !31
  %79 = fmul float %74, 0x3FF7154760000000, !dbg !31
  %80 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %79) #3, !dbg !31
  %81 = fmul float %75, 0x3FF7154760000000, !dbg !31
  %82 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %81) #3, !dbg !31
  %83 = fmul float %76, 0x3FF7154760000000, !dbg !31
  %84 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %83) #3, !dbg !31
  %85 = insertelement <4 x float> poison, float %78, i64 0, !dbg !32
  %86 = insertelement <4 x float> %85, float %80, i64 1, !dbg !32
  %87 = insertelement <4 x float> %86, float %82, i64 2, !dbg !32
  %88 = insertelement <4 x float> %87, float %84, i64 3, !dbg !32
  %89 = fadd <4 x float> %30, %88, !dbg !32
  %90 = select <4 x i1> %60, <4 x float> %89, <4 x float> %30, !dbg !33
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 32, !dbg !22
  %91 = icmp samesign ult i64 %indvars.iv, 68, !dbg !22
  br i1 %91, label %29, label %92, !dbg !22

92:                                               ; preds = %29
  %93 = lshr i32 %8, 5, !dbg !15
  %94 = and i32 %8, 31, !dbg !12
  %shift = shufflevector <4 x float> %90, <4 x float> poison, <4 x i32> <i32 1, i32 poison, i32 poison, i32 poison>, !dbg !34
  %95 = fadd <4 x float> %90, %shift, !dbg !34
  %shift10 = shufflevector <4 x float> %90, <4 x float> poison, <4 x i32> <i32 2, i32 poison, i32 poison, i32 poison>, !dbg !34
  %96 = fadd <4 x float> %shift10, %95, !dbg !34
  %shift11 = shufflevector <4 x float> %90, <4 x float> poison, <4 x i32> <i32 3, i32 poison, i32 poison, i32 poison>, !dbg !34
  %97 = fadd <4 x float> %shift11, %96, !dbg !34
  %98 = extractelement <4 x float> %97, i64 0, !dbg !34
  %99 = bitcast float %98 to i32, !dbg !39
  %100 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %99, i32 16, i32 31), !dbg !39
  %101 = bitcast i32 %100 to float, !dbg !39
  %102 = fadd float %98, %101, !dbg !34
  %103 = lshr i32 %94, 4, !dbg !39
  %104 = icmp samesign ult i32 %94, 16, !dbg !39
  %105 = and i32 %93, 3, !dbg !39
  %106 = shl nuw nsw i32 %9, 2, !dbg !39
  %107 = or disjoint i32 %106, %105, !dbg !39
  %108 = getelementptr float, ptr addrspace(3) @global_smem, i32 %107, !dbg !39
  %109 = bitcast float %102 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %108, <1 x i32> %109, i1 %104) #3, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %110 = icmp slt i32 %8, 64, !dbg !39
  %111 = getelementptr float, ptr addrspace(3) @global_smem, i32 %8, !dbg !39
  %112 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %111, i1 %110) #3, !dbg !39
  %113 = bitcast i32 %112 to float, !dbg !39
  %114 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %112, i32 2, i32 31), !dbg !39
  %115 = bitcast i32 %114 to float, !dbg !39
  %116 = fadd float %113, %115, !dbg !34
  %117 = bitcast float %116 to i32, !dbg !39
  %118 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %117, i32 1, i32 31), !dbg !39
  %119 = bitcast i32 %118 to float, !dbg !39
  %120 = fadd float %116, %119, !dbg !34
  %121 = and i32 %8, 3, !dbg !39
  %122 = icmp eq i32 %121, 0, !dbg !39
  %123 = and i1 %110, %122, !dbg !39
  %124 = bitcast float %120 to <1 x i32>, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %111, <1 x i32> %124, i1 %123) #3, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %125 = getelementptr float, ptr addrspace(3) @global_smem, i32 %106, !dbg !39
  %126 = load i32, ptr addrspace(3) %125, align 16, !dbg !39
  %127 = sext i32 %10 to i64, !dbg !40
  %128 = getelementptr float, ptr addrspace(1) %2, i64 %127, !dbg !40
  %129 = shl nuw nsw i32 %105, 1, !dbg !41
  %130 = or disjoint i32 %129, %103, !dbg !41
  %131 = icmp eq i32 %130, 0, !dbg !41
  %132 = and i1 %131, %11, !dbg !41
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %126, ptr addrspace(1) %128, i1 %132) #3, !dbg !41
  ret void, !dbg !42
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cheqlbnjpoau73oa6ccbyuyfcpm2erqtyri2jee4zktmtjl6n23c.py", directory: "inductor_cache/he")
!4 = !{ptr @triton_red_fused__softmax_23, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused__softmax_23, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused__softmax_23", linkageName: "triton_red_fused__softmax_23", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 27, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 30, scope: !7)
!19 = !DILocation(line: 28, column: 35, scope: !7)
!20 = !DILocation(line: 35, column: 37, scope: !7)
!21 = !DILocation(line: 35, column: 63, scope: !7)
!22 = !DILocation(line: 31, column: 36, scope: !7)
!23 = !DILocation(line: 35, column: 88, scope: !7)
!24 = !DILocation(line: 32, column: 27, scope: !7)
!25 = !DILocation(line: 35, column: 75, scope: !7)
!26 = !DILocation(line: 35, column: 69, scope: !7)
!27 = !DILocation(line: 35, column: 34, scope: !7)
!28 = !DILocation(line: 33, column: 25, scope: !7)
!29 = !DILocation(line: 35, column: 80, scope: !7)
!30 = !DILocation(line: 36, column: 22, scope: !7)
!31 = !DILocation(line: 37, column: 27, scope: !7)
!32 = !DILocation(line: 39, column: 23, scope: !7)
!33 = !DILocation(line: 40, column: 46, scope: !7)
!34 = !DILocation(line: 256, column: 15, scope: !35, inlinedAt: !38)
!35 = distinct !DILexicalBlockFile(scope: !37, file: !36, discriminator: 0)
!36 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!37 = distinct !DILexicalBlockFile(scope: !7, file: !36, discriminator: 0)
!38 = !DILocation(line: 41, column: 25, scope: !7)
!39 = !DILocation(line: 267, column: 36, scope: !37, inlinedAt: !38)
!40 = !DILocation(line: 42, column: 25, scope: !7)
!41 = !DILocation(line: 42, column: 36, scope: !7)
!42 = !DILocation(line: 42, column: 4, scope: !7)
