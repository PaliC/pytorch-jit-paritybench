; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %12 = shl i32 %11, 9, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = shl i32 %13, 1, !dbg !12
  %15 = and i32 %14, 510, !dbg !12
  %16 = or disjoint i32 %12, %15, !dbg !13
  %17 = or disjoint i32 %16, 1, !dbg !13
  %.frozen6 = freeze i32 %16, !dbg !14
  %18 = sdiv i32 %.frozen6, 1024, !dbg !14
  %19 = srem i32 %18, 56, !dbg !15
  %.frozen = freeze i32 %16, !dbg !16
  %20 = sdiv i32 %.frozen, 32, !dbg !16
  %21 = mul i32 %20, 32, !dbg !17
  %.decomposed = sub i32 %.frozen, %21, !dbg !17
  %22 = srem i32 %17, 32, !dbg !17
  %23 = srem i32 %20, 32, !dbg !18
  %24 = sdiv i32 %16, 57344, !dbg !19
  %25 = mul i32 %18, 1024, !dbg !20
  %.decomposed7 = sub i32 %.frozen6, %25, !dbg !20
  %26 = sext i32 %19 to i64, !dbg !21
  %27 = getelementptr float, ptr addrspace(1) %3, i64 %26, !dbg !21
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 true) #3, !dbg !22
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 true) #3, !dbg !22
  %30 = getelementptr float, ptr addrspace(1) %4, i64 %26, !dbg !23
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 true) #3, !dbg !24
  %32 = bitcast i32 %31 to float, !dbg !24
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 true) #3, !dbg !24
  %34 = bitcast i32 %33 to float, !dbg !24
  %35 = getelementptr float, ptr addrspace(1) %5, i64 %26, !dbg !25
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #3, !dbg !26
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #3, !dbg !26
  %38 = getelementptr float, ptr addrspace(1) %6, i64 %26, !dbg !27
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 true) #3, !dbg !28
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 true) #3, !dbg !28
  %41 = icmp slt i32 %19, 52, !dbg !29
  %42 = shl nsw i32 %.decomposed, 1, !dbg !30
  %43 = shl nsw i32 %22, 1, !dbg !30
  %44 = shl nsw i32 %23, 7, !dbg !31
  %45 = shl nsw i32 %19, 12, !dbg !32
  %46 = mul i32 %24, 212992, !dbg !33
  %47 = add i32 %44, %46, !dbg !34
  %48 = add i32 %47, %42, !dbg !35
  %49 = add i32 %48, %45, !dbg !36
  %50 = add i32 %47, %43, !dbg !35
  %51 = add i32 %50, %45, !dbg !36
  %52 = sext i32 %49 to i64, !dbg !37
  %53 = getelementptr float, ptr addrspace(1) %0, i64 %52, !dbg !37
  %54 = sext i32 %51 to i64, !dbg !37
  %55 = getelementptr float, ptr addrspace(1) %0, i64 %54, !dbg !37
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %53, i1 %41, i32 0, i1 %41) #3, !dbg !38
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %55, i1 %41, i32 0, i1 %41) #3, !dbg !38
  %58 = or disjoint i32 %47, 1, !dbg !39
  %59 = add i32 %58, %42, !dbg !40
  %60 = add i32 %59, %45, !dbg !41
  %61 = add i32 %58, %43, !dbg !40
  %62 = add i32 %61, %45, !dbg !41
  %63 = sext i32 %60 to i64, !dbg !42
  %64 = getelementptr float, ptr addrspace(1) %0, i64 %63, !dbg !42
  %65 = sext i32 %62 to i64, !dbg !42
  %66 = getelementptr float, ptr addrspace(1) %0, i64 %65, !dbg !42
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %64, i1 %41, i32 0, i1 %41) #3, !dbg !43
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %66, i1 %41, i32 0, i1 %41) #3, !dbg !43
  %69 = or disjoint i32 %47, 64, !dbg !44
  %70 = add i32 %69, %42, !dbg !45
  %71 = add i32 %70, %45, !dbg !46
  %72 = add i32 %69, %43, !dbg !45
  %73 = add i32 %72, %45, !dbg !46
  %74 = sext i32 %71 to i64, !dbg !47
  %75 = getelementptr float, ptr addrspace(1) %0, i64 %74, !dbg !47
  %76 = sext i32 %73 to i64, !dbg !47
  %77 = getelementptr float, ptr addrspace(1) %0, i64 %76, !dbg !47
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %75, i1 %41, i32 0, i1 %41) #3, !dbg !48
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %77, i1 %41, i32 0, i1 %41) #3, !dbg !48
  %80 = or disjoint i32 %47, 65, !dbg !49
  %81 = add i32 %80, %42, !dbg !50
  %82 = add i32 %81, %45, !dbg !51
  %83 = add i32 %80, %43, !dbg !50
  %84 = add i32 %83, %45, !dbg !51
  %85 = sext i32 %82 to i64, !dbg !52
  %86 = getelementptr float, ptr addrspace(1) %0, i64 %85, !dbg !52
  %87 = sext i32 %84 to i64, !dbg !52
  %88 = getelementptr float, ptr addrspace(1) %0, i64 %87, !dbg !52
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %86, i1 %41, i32 0, i1 %41) #3, !dbg !53
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %88, i1 %41, i32 0, i1 %41) #3, !dbg !53
  %91 = icmp sgt i32 %19, 51, !dbg !54
  %92 = add nsw i32 %19, -52, !dbg !55
  %93 = shl nsw i32 %92, 10, !dbg !56
  %94 = shl nsw i32 %24, 12, !dbg !57
  %95 = add nsw i32 %94, %.decomposed7, !dbg !58
  %96 = add nsw i32 %95, %93, !dbg !59
  %97 = sext i32 %96 to i64, !dbg !60
  %98 = getelementptr float, ptr addrspace(1) %1, i64 %97, !dbg !60
  %99 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %98, i1 %91, i32 0, i1 %91, i32 0, i1 %91) #3, !dbg !61
  %100 = sext i32 %92 to i64, !dbg !62
  %101 = getelementptr float, ptr addrspace(1) %2, i64 %100, !dbg !62
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %101, i1 %91, i32 0, i1 %91) #3, !dbg !63
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %101, i1 %91, i32 0, i1 %91) #3, !dbg !63
  %104 = fadd float %32, 0x3EE4F8B580000000, !dbg !64
  %105 = fadd float %34, 0x3EE4F8B580000000, !dbg !64
  %106 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !65
  %.not.i = icmp eq i32 %106, 0, !dbg !65
  %107 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !65
  %.not1.i = icmp eq i32 %107, 0, !dbg !65
  br i1 %.not.i, label %113, label %108, !dbg !65

108:                                              ; preds = %10
  br i1 %.not1.i, label %111, label %109, !dbg !65

109:                                              ; preds = %108
  %110 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %104) #3, !dbg !65
  br label %__nv_sqrtf.exit, !dbg !65

111:                                              ; preds = %108
  %112 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %104) #3, !dbg !65
  br label %__nv_sqrtf.exit, !dbg !65

113:                                              ; preds = %10
  br i1 %.not1.i, label %116, label %114, !dbg !65

114:                                              ; preds = %113
  %115 = tail call float @llvm.nvvm.sqrt.rn.f(float %104) #3, !dbg !65
  br label %__nv_sqrtf.exit, !dbg !65

116:                                              ; preds = %113
  %117 = tail call float @llvm.nvvm.sqrt.approx.f(float %104) #3, !dbg !65
  br label %__nv_sqrtf.exit, !dbg !65

__nv_sqrtf.exit:                                  ; preds = %109, %111, %114, %116
  %.0.i = phi float [ %110, %109 ], [ %112, %111 ], [ %115, %114 ], [ %117, %116 ], !dbg !65
  %118 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !65
  %.not.i1 = icmp eq i32 %118, 0, !dbg !65
  %119 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !65
  %.not1.i4 = icmp eq i32 %119, 0, !dbg !65
  br i1 %.not.i1, label %125, label %120, !dbg !65

120:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %123, label %121, !dbg !65

121:                                              ; preds = %120
  %122 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %105) #3, !dbg !65
  br label %__nv_sqrtf.exit5, !dbg !65

123:                                              ; preds = %120
  %124 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %105) #3, !dbg !65
  br label %__nv_sqrtf.exit5, !dbg !65

125:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %128, label %126, !dbg !65

126:                                              ; preds = %125
  %127 = tail call float @llvm.nvvm.sqrt.rn.f(float %105) #3, !dbg !65
  br label %__nv_sqrtf.exit5, !dbg !65

128:                                              ; preds = %125
  %129 = tail call float @llvm.nvvm.sqrt.approx.f(float %105) #3, !dbg !65
  br label %__nv_sqrtf.exit5, !dbg !65

__nv_sqrtf.exit5:                                 ; preds = %121, %123, %126, %128
  %.0.i3 = phi float [ %122, %121 ], [ %124, %123 ], [ %127, %126 ], [ %129, %128 ], !dbg !65
  %130 = bitcast i32 %68 to float, !dbg !43
  %131 = bitcast i32 %57 to float, !dbg !38
  %132 = fcmp ogt float %130, %131, !dbg !66
  %133 = fcmp uno float %130, 0.000000e+00, !dbg !70
  %134 = or i1 %132, %133, !dbg !71
  %135 = select i1 %134, float %130, float %131, !dbg !72
  %136 = bitcast i32 %79 to float, !dbg !48
  %137 = fcmp olt float %135, %136, !dbg !73
  %138 = fcmp uno float %136, 0.000000e+00, !dbg !75
  %139 = or i1 %138, %137, !dbg !76
  %140 = select i1 %139, float %136, float %135, !dbg !77
  %141 = bitcast i32 %90 to float, !dbg !53
  %142 = fcmp olt float %140, %141, !dbg !78
  %143 = fcmp uno float %141, 0.000000e+00, !dbg !80
  %144 = or i1 %143, %142, !dbg !81
  %145 = select i1 %144, float %141, float %140, !dbg !82
  %146 = extractvalue { i32, i32 } %99, 1, !dbg !61
  %147 = bitcast i32 %146 to float, !dbg !61
  %148 = bitcast i32 %103 to float, !dbg !63
  %149 = fadd float %147, %148, !dbg !83
  %150 = select i1 %41, float %145, float %149, !dbg !84
  %151 = bitcast i32 %29 to float, !dbg !22
  %152 = fsub float %150, %151, !dbg !85
  %153 = bitcast i32 %67 to float, !dbg !43
  %154 = bitcast i32 %56 to float, !dbg !38
  %155 = fcmp ogt float %153, %154, !dbg !66
  %156 = fcmp uno float %153, 0.000000e+00, !dbg !70
  %157 = or i1 %155, %156, !dbg !71
  %158 = select i1 %157, float %153, float %154, !dbg !72
  %159 = bitcast i32 %78 to float, !dbg !48
  %160 = fcmp olt float %158, %159, !dbg !73
  %161 = fcmp uno float %159, 0.000000e+00, !dbg !75
  %162 = or i1 %161, %160, !dbg !76
  %163 = select i1 %162, float %159, float %158, !dbg !77
  %164 = bitcast i32 %89 to float, !dbg !53
  %165 = fcmp olt float %163, %164, !dbg !78
  %166 = fcmp uno float %164, 0.000000e+00, !dbg !80
  %167 = or i1 %166, %165, !dbg !81
  %168 = select i1 %167, float %164, float %163, !dbg !82
  %169 = extractvalue { i32, i32 } %99, 0, !dbg !61
  %170 = bitcast i32 %169 to float, !dbg !61
  %171 = bitcast i32 %102 to float, !dbg !63
  %172 = fadd float %170, %171, !dbg !83
  %173 = select i1 %41, float %168, float %172, !dbg !84
  %174 = bitcast i32 %28 to float, !dbg !22
  %175 = fsub float %173, %174, !dbg !85
  %176 = bitcast i32 %40 to float, !dbg !28
  %177 = bitcast i32 %39 to float, !dbg !28
  %178 = bitcast i32 %37 to float, !dbg !26
  %179 = bitcast i32 %36 to float, !dbg !26
  %180 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !86
  %181 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !86
  %182 = fmul float %175, %180, !dbg !87
  %183 = fmul float %152, %181, !dbg !87
  %184 = fmul float %182, %179, !dbg !88
  %185 = fmul float %183, %178, !dbg !88
  %186 = fadd float %184, %177, !dbg !89
  %187 = fadd float %185, %176, !dbg !89
  %188 = fcmp olt float %186, 0.000000e+00, !dbg !90
  %189 = fcmp olt float %187, 0.000000e+00, !dbg !90
  %190 = select i1 %188, float 0.000000e+00, float %186, !dbg !92
  %191 = select i1 %189, float 0.000000e+00, float %187, !dbg !92
  %192 = sext i32 %16 to i64, !dbg !93
  %193 = getelementptr float, ptr addrspace(1) %7, i64 %192, !dbg !93
  %194 = bitcast float %173 to i32, !dbg !94
  %195 = bitcast float %150 to i32, !dbg !94
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %194, i32 %195, ptr addrspace(1) %193, i1 true) #3, !dbg !94
  %196 = getelementptr float, ptr addrspace(1) %8, i64 %192, !dbg !95
  %197 = bitcast float %190 to i32, !dbg !96
  %198 = bitcast float %191 to i32, !dbg !96
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %197, i32 %198, ptr addrspace(1) %196, i1 true) #3, !dbg !96
  ret void, !dbg !97
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cxhpemzyemm3ftrnegq5kjjkrwxhcxnt524v7im722lx6xc4cdee.py", directory: "inductor_cache/xh")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_4, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_4, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_4", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_4", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 29, scope: !7)
!16 = !DILocation(line: 26, column: 21, scope: !7)
!17 = !DILocation(line: 25, column: 19, scope: !7)
!18 = !DILocation(line: 26, column: 27, scope: !7)
!19 = !DILocation(line: 27, column: 19, scope: !7)
!20 = !DILocation(line: 28, column: 19, scope: !7)
!21 = !DILocation(line: 30, column: 31, scope: !7)
!22 = !DILocation(line: 30, column: 36, scope: !7)
!23 = !DILocation(line: 31, column: 31, scope: !7)
!24 = !DILocation(line: 31, column: 36, scope: !7)
!25 = !DILocation(line: 32, column: 31, scope: !7)
!26 = !DILocation(line: 32, column: 36, scope: !7)
!27 = !DILocation(line: 33, column: 31, scope: !7)
!28 = !DILocation(line: 33, column: 36, scope: !7)
!29 = !DILocation(line: 38, column: 18, scope: !7)
!30 = !DILocation(line: 39, column: 32, scope: !7)
!31 = !DILocation(line: 39, column: 41, scope: !7)
!32 = !DILocation(line: 39, column: 52, scope: !7)
!33 = !DILocation(line: 39, column: 65, scope: !7)
!34 = !DILocation(line: 39, column: 37, scope: !7)
!35 = !DILocation(line: 39, column: 46, scope: !7)
!36 = !DILocation(line: 39, column: 58, scope: !7)
!37 = !DILocation(line: 39, column: 30, scope: !7)
!38 = !DILocation(line: 39, column: 70, scope: !7)
!39 = !DILocation(line: 40, column: 41, scope: !7)
!40 = !DILocation(line: 40, column: 50, scope: !7)
!41 = !DILocation(line: 40, column: 62, scope: !7)
!42 = !DILocation(line: 40, column: 30, scope: !7)
!43 = !DILocation(line: 40, column: 74, scope: !7)
!44 = !DILocation(line: 42, column: 42, scope: !7)
!45 = !DILocation(line: 42, column: 51, scope: !7)
!46 = !DILocation(line: 42, column: 63, scope: !7)
!47 = !DILocation(line: 42, column: 30, scope: !7)
!48 = !DILocation(line: 42, column: 75, scope: !7)
!49 = !DILocation(line: 44, column: 43, scope: !7)
!50 = !DILocation(line: 44, column: 52, scope: !7)
!51 = !DILocation(line: 44, column: 64, scope: !7)
!52 = !DILocation(line: 44, column: 31, scope: !7)
!53 = !DILocation(line: 44, column: 76, scope: !7)
!54 = !DILocation(line: 48, column: 20, scope: !7)
!55 = !DILocation(line: 51, column: 50, scope: !7)
!56 = !DILocation(line: 51, column: 42, scope: !7)
!57 = !DILocation(line: 51, column: 61, scope: !7)
!58 = !DILocation(line: 51, column: 36, scope: !7)
!59 = !DILocation(line: 51, column: 56, scope: !7)
!60 = !DILocation(line: 51, column: 31, scope: !7)
!61 = !DILocation(line: 51, column: 66, scope: !7)
!62 = !DILocation(line: 52, column: 31, scope: !7)
!63 = !DILocation(line: 52, column: 44, scope: !7)
!64 = !DILocation(line: 59, column: 20, scope: !7)
!65 = !DILocation(line: 60, column: 27, scope: !7)
!66 = !DILocation(line: 118, column: 15, scope: !67, inlinedAt: !69)
!67 = distinct !DILexicalBlockFile(scope: !7, file: !68, discriminator: 0)
!68 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!69 = !DILocation(line: 41, column: 40, scope: !7)
!70 = !DILocation(line: 120, column: 21, scope: !67, inlinedAt: !69)
!71 = !DILocation(line: 120, column: 16, scope: !67, inlinedAt: !69)
!72 = !DILocation(line: 121, column: 29, scope: !67, inlinedAt: !69)
!73 = !DILocation(line: 118, column: 15, scope: !67, inlinedAt: !74)
!74 = !DILocation(line: 43, column: 40, scope: !7)
!75 = !DILocation(line: 120, column: 21, scope: !67, inlinedAt: !74)
!76 = !DILocation(line: 120, column: 16, scope: !67, inlinedAt: !74)
!77 = !DILocation(line: 121, column: 29, scope: !67, inlinedAt: !74)
!78 = !DILocation(line: 118, column: 15, scope: !67, inlinedAt: !79)
!79 = !DILocation(line: 45, column: 42, scope: !7)
!80 = !DILocation(line: 120, column: 21, scope: !67, inlinedAt: !79)
!81 = !DILocation(line: 120, column: 16, scope: !67, inlinedAt: !79)
!82 = !DILocation(line: 121, column: 29, scope: !67, inlinedAt: !79)
!83 = !DILocation(line: 53, column: 20, scope: !7)
!84 = !DILocation(line: 0, scope: !7)
!85 = !DILocation(line: 57, column: 20, scope: !7)
!86 = !DILocation(line: 62, column: 20, scope: !7)
!87 = !DILocation(line: 65, column: 20, scope: !7)
!88 = !DILocation(line: 66, column: 20, scope: !7)
!89 = !DILocation(line: 67, column: 20, scope: !7)
!90 = !DILocation(line: 118, column: 15, scope: !67, inlinedAt: !91)
!91 = !DILocation(line: 69, column: 42, scope: !7)
!92 = !DILocation(line: 121, column: 29, scope: !67, inlinedAt: !91)
!93 = !DILocation(line: 70, column: 25, scope: !7)
!94 = !DILocation(line: 70, column: 37, scope: !7)
!95 = !DILocation(line: 71, column: 25, scope: !7)
!96 = !DILocation(line: 71, column: 37, scope: !7)
!97 = !DILocation(line: 71, column: 4, scope: !7)
