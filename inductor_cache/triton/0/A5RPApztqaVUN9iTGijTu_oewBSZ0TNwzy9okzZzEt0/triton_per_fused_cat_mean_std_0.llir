; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused_cat_mean_std_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !10
  %7 = icmp slt i32 %6, 16, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = and i32 %8, 15, !dbg !12
  %10 = shl i32 %6, 4, !dbg !13
  %11 = or disjoint i32 %10, %9, !dbg !14
  %12 = sext i32 %11 to i64, !dbg !15
  %13 = getelementptr float, ptr addrspace(1) %0, i64 %12, !dbg !15
  %14 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %13, i1 %7, i32 0, i1 %7) #4, !dbg !16
  %15 = bitcast i32 %14 to float, !dbg !16
  %16 = select i1 %7, float %15, float 0.000000e+00, !dbg !17
  %17 = bitcast float %16 to i32, !dbg !18
  %18 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %17, i32 8, i32 31), !dbg !18
  %19 = bitcast i32 %18 to float, !dbg !18
  %20 = fadd float %16, %19, !dbg !22
  %21 = bitcast float %20 to i32, !dbg !18
  %22 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %21, i32 4, i32 31), !dbg !18
  %23 = bitcast i32 %22 to float, !dbg !18
  %24 = fadd float %20, %23, !dbg !22
  %25 = bitcast float %24 to i32, !dbg !18
  %26 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %25, i32 2, i32 31), !dbg !18
  %27 = bitcast i32 %26 to float, !dbg !18
  %28 = fadd float %24, %27, !dbg !22
  %29 = bitcast float %28 to i32, !dbg !18
  %30 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %29, i32 1, i32 31), !dbg !18
  %31 = bitcast i32 %30 to float, !dbg !18
  %32 = fadd float %28, %31, !dbg !22
  %33 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %32, float 1.600000e+01) #4, !dbg !24
  %34 = fsub float %15, %33, !dbg !25
  %35 = fmul float %34, %34, !dbg !26
  %36 = select i1 %7, float %35, float 0.000000e+00, !dbg !27
  %37 = bitcast float %36 to i32, !dbg !28
  %38 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %37, i32 8, i32 31), !dbg !28
  %39 = bitcast i32 %38 to float, !dbg !28
  %40 = fadd float %36, %39, !dbg !30
  %41 = bitcast float %40 to i32, !dbg !28
  %42 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %41, i32 4, i32 31), !dbg !28
  %43 = bitcast i32 %42 to float, !dbg !28
  %44 = fadd float %40, %43, !dbg !30
  %45 = bitcast float %44 to i32, !dbg !28
  %46 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %45, i32 2, i32 31), !dbg !28
  %47 = bitcast i32 %46 to float, !dbg !28
  %48 = fadd float %44, %47, !dbg !30
  %49 = bitcast float %48 to i32, !dbg !28
  %50 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %49, i32 1, i32 31), !dbg !28
  %51 = bitcast i32 %50 to float, !dbg !28
  %52 = fadd float %48, %51, !dbg !30
  %53 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %52, float 1.500000e+01) #4, !dbg !31
  %54 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !32
  %.not.i = icmp eq i32 %54, 0, !dbg !32
  %55 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !32
  %.not1.i = icmp eq i32 %55, 0, !dbg !32
  br i1 %.not.i, label %61, label %56, !dbg !32

56:                                               ; preds = %5
  br i1 %.not1.i, label %59, label %57, !dbg !32

57:                                               ; preds = %56
  %58 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %53) #4, !dbg !32
  br label %__nv_sqrtf.exit, !dbg !32

59:                                               ; preds = %56
  %60 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %53) #4, !dbg !32
  br label %__nv_sqrtf.exit, !dbg !32

61:                                               ; preds = %5
  br i1 %.not1.i, label %64, label %62, !dbg !32

62:                                               ; preds = %61
  %63 = tail call float @llvm.nvvm.sqrt.rn.f(float %53) #4, !dbg !32
  br label %__nv_sqrtf.exit, !dbg !32

64:                                               ; preds = %61
  %65 = tail call float @llvm.nvvm.sqrt.approx.f(float %53) #4, !dbg !32
  br label %__nv_sqrtf.exit, !dbg !32

__nv_sqrtf.exit:                                  ; preds = %57, %59, %62, %64
  %.0.i = phi float [ %58, %57 ], [ %60, %59 ], [ %63, %62 ], [ %65, %64 ], !dbg !32
  %66 = shl i32 %6, 1, !dbg !33
  %67 = sext i32 %66 to i64, !dbg !34
  %68 = getelementptr float, ptr addrspace(1) %1, i64 %67, !dbg !34
  %69 = and i32 %8, 63, !dbg !35
  %70 = icmp eq i32 %69, 0, !dbg !35
  %71 = bitcast float %33 to i32, !dbg !35
  %72 = and i1 %70, %7, !dbg !35
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %71, ptr addrspace(1) %68, i1 %72) #4, !dbg !35
  %73 = getelementptr float, ptr addrspace(1) %2, i64 %67, !dbg !36
  %74 = bitcast float %.0.i to i32, !dbg !37
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %74, ptr addrspace(1) %73, i1 %72) #4, !dbg !37
  ret void, !dbg !38
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "crdmrigp765pmjzkq6uminry2sz7i2ulee7fv6auxfbfgvhsvj6h.py", directory: "inductor_cache/rd")
!4 = !{ptr @triton_per_fused_cat_mean_std_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_cat_mean_std_0, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_cat_mean_std_0", linkageName: "triton_per_fused_cat_mean_std_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 21, scope: !7)
!12 = !DILocation(line: 26, column: 34, scope: !7)
!13 = !DILocation(line: 31, column: 38, scope: !7)
!14 = !DILocation(line: 31, column: 35, scope: !7)
!15 = !DILocation(line: 31, column: 30, scope: !7)
!16 = !DILocation(line: 31, column: 43, scope: !7)
!17 = !DILocation(line: 33, column: 33, scope: !7)
!18 = !DILocation(line: 267, column: 36, scope: !19, inlinedAt: !21)
!19 = distinct !DILexicalBlockFile(scope: !7, file: !20, discriminator: 0)
!20 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!21 = !DILocation(line: 34, column: 24, scope: !7)
!22 = !DILocation(line: 256, column: 15, scope: !23, inlinedAt: !21)
!23 = distinct !DILexicalBlockFile(scope: !19, file: !20, discriminator: 0)
!24 = !DILocation(line: 40, column: 19, scope: !7)
!25 = !DILocation(line: 41, column: 19, scope: !7)
!26 = !DILocation(line: 42, column: 20, scope: !7)
!27 = !DILocation(line: 44, column: 35, scope: !7)
!28 = !DILocation(line: 267, column: 36, scope: !19, inlinedAt: !29)
!29 = !DILocation(line: 45, column: 26, scope: !7)
!30 = !DILocation(line: 256, column: 15, scope: !23, inlinedAt: !29)
!31 = !DILocation(line: 49, column: 20, scope: !7)
!32 = !DILocation(line: 50, column: 27, scope: !7)
!33 = !DILocation(line: 51, column: 27, scope: !7)
!34 = !DILocation(line: 51, column: 25, scope: !7)
!35 = !DILocation(line: 51, column: 39, scope: !7)
!36 = !DILocation(line: 52, column: 25, scope: !7)
!37 = !DILocation(line: 52, column: 39, scope: !7)
!38 = !DILocation(line: 52, column: 4, scope: !7)
