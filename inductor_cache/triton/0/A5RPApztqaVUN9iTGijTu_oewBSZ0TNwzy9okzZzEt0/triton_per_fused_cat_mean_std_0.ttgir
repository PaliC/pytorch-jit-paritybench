#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 2], order = [0, 1]}>
#loc = loc("inductor_cache/rd/crdmrigp765pmjzkq6uminry2sz7i2ulee7fv6auxfbfgvhsvj6h.py":19:0)
#loc1 = loc(unknown)
#loc11 = loc("inductor_cache/rd/crdmrigp765pmjzkq6uminry2sz7i2ulee7fv6auxfbfgvhsvj6h.py":34:24)
#loc18 = loc("inductor_cache/rd/crdmrigp765pmjzkq6uminry2sz7i2ulee7fv6auxfbfgvhsvj6h.py":45:26)
#loc29 = loc(callsite(#loc1 at #loc11))
#loc32 = loc(callsite(#loc1 at #loc18))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 2 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_per_fused_cat_mean_std_0(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/rd/crdmrigp765pmjzkq6uminry2sz7i2ulee7fv6auxfbfgvhsvj6h.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/rd/crdmrigp765pmjzkq6uminry2sz7i2ulee7fv6auxfbfgvhsvj6h.py":19:0), %arg2: !tt.ptr<f32> loc("inductor_cache/rd/crdmrigp765pmjzkq6uminry2sz7i2ulee7fv6auxfbfgvhsvj6h.py":19:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/rd/crdmrigp765pmjzkq6uminry2sz7i2ulee7fv6auxfbfgvhsvj6h.py":19:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/rd/crdmrigp765pmjzkq6uminry2sz7i2ulee7fv6auxfbfgvhsvj6h.py":19:0)) attributes {noinline = false} {
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %c16_i32 = arith.constant 16 : i32 loc(#loc1)
    %cst = arith.constant dense<1.500000e+01> : tensor<1x1xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<1.600000e+01> : tensor<1x1xf32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<0.000000e+00> : tensor<1x16xf32, #blocked> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.cmpi slt, %0, %c16_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc4)
    %3 = tt.expand_dims %2 {axis = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x16xi32, #blocked> loc(#loc4)
    %4 = arith.muli %0, %c16_i32 : i32 loc(#loc5)
    %5 = tt.splat %4 : i32 -> tensor<1x16xi32, #blocked> loc(#loc6)
    %6 = arith.addi %3, %5 : tensor<1x16xi32, #blocked> loc(#loc6)
    %7 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %6 : tensor<1x16x!tt.ptr<f32>, #blocked>, tensor<1x16xi32, #blocked> loc(#loc7)
    %9 = tt.splat %1 : i1 -> tensor<1x16xi1, #blocked> loc(#loc8)
    %10 = tt.load %8, %9, %cst_1 : tensor<1x16x!tt.ptr<f32>, #blocked> loc(#loc8)
    %11 = arith.select %9, %10, %cst_1 : tensor<1x16xi1, #blocked>, tensor<1x16xf32, #blocked> loc(#loc9)
    %12 = "tt.reduce"(%11) <{axis = 1 : i32}> ({
    ^bb0(%arg5: f32 loc(callsite(#loc1 at #loc11)), %arg6: f32 loc(callsite(#loc1 at #loc11))):
      %29 = arith.addf %arg5, %arg6 : f32 loc(#loc33)
      tt.reduce.return %29 : f32 loc(#loc28)
    }) : (tensor<1x16xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc28)
    %13 = tt.expand_dims %12 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1x1xf32, #blocked> loc(#loc13)
    %14 = arith.divf %13, %cst_0 : tensor<1x1xf32, #blocked> loc(#loc14)
    %15 = tt.broadcast %14 : tensor<1x1xf32, #blocked> -> tensor<1x16xf32, #blocked> loc(#loc15)
    %16 = arith.subf %10, %15 : tensor<1x16xf32, #blocked> loc(#loc15)
    %17 = arith.mulf %16, %16 : tensor<1x16xf32, #blocked> loc(#loc16)
    %18 = arith.select %9, %17, %cst_1 : tensor<1x16xi1, #blocked>, tensor<1x16xf32, #blocked> loc(#loc17)
    %19 = "tt.reduce"(%18) <{axis = 1 : i32}> ({
    ^bb0(%arg5: f32 loc(callsite(#loc1 at #loc18)), %arg6: f32 loc(callsite(#loc1 at #loc18))):
      %29 = arith.addf %arg5, %arg6 : f32 loc(#loc34)
      tt.reduce.return %29 : f32 loc(#loc31)
    }) : (tensor<1x16xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc31)
    %20 = tt.expand_dims %19 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1x1xf32, #blocked> loc(#loc19)
    %21 = arith.divf %20, %cst : tensor<1x1xf32, #blocked> loc(#loc20)
    %22 = tt.extern_elementwise %21 {libname = "", libpath = "", pure = true, symbol = "__nv_sqrtf"} : (tensor<1x1xf32, #blocked>) -> tensor<1x1xf32, #blocked> loc(#loc21)
    %23 = arith.muli %0, %c2_i32 : i32 loc(#loc22)
    %24 = tt.addptr %arg1, %23 : !tt.ptr<f32>, i32 loc(#loc23)
    %25 = tt.splat %24 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc24)
    %26 = tt.splat %1 : i1 -> tensor<1x1xi1, #blocked> loc(#loc24)
    tt.store %25, %14, %26 : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc24)
    %27 = tt.addptr %arg2, %23 : !tt.ptr<f32>, i32 loc(#loc25)
    %28 = tt.splat %27 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc26)
    tt.store %28, %22, %26 : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc26)
    tt.return loc(#loc27)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/rd/crdmrigp765pmjzkq6uminry2sz7i2ulee7fv6auxfbfgvhsvj6h.py":23:28)
#loc3 = loc("inductor_cache/rd/crdmrigp765pmjzkq6uminry2sz7i2ulee7fv6auxfbfgvhsvj6h.py":25:21)
#loc4 = loc("inductor_cache/rd/crdmrigp765pmjzkq6uminry2sz7i2ulee7fv6auxfbfgvhsvj6h.py":26:34)
#loc5 = loc("inductor_cache/rd/crdmrigp765pmjzkq6uminry2sz7i2ulee7fv6auxfbfgvhsvj6h.py":31:38)
#loc6 = loc("inductor_cache/rd/crdmrigp765pmjzkq6uminry2sz7i2ulee7fv6auxfbfgvhsvj6h.py":31:35)
#loc7 = loc("inductor_cache/rd/crdmrigp765pmjzkq6uminry2sz7i2ulee7fv6auxfbfgvhsvj6h.py":31:30)
#loc8 = loc("inductor_cache/rd/crdmrigp765pmjzkq6uminry2sz7i2ulee7fv6auxfbfgvhsvj6h.py":31:43)
#loc9 = loc("inductor_cache/rd/crdmrigp765pmjzkq6uminry2sz7i2ulee7fv6auxfbfgvhsvj6h.py":33:33)
#loc10 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc12 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc13 = loc("inductor_cache/rd/crdmrigp765pmjzkq6uminry2sz7i2ulee7fv6auxfbfgvhsvj6h.py":34:27)
#loc14 = loc("inductor_cache/rd/crdmrigp765pmjzkq6uminry2sz7i2ulee7fv6auxfbfgvhsvj6h.py":40:19)
#loc15 = loc("inductor_cache/rd/crdmrigp765pmjzkq6uminry2sz7i2ulee7fv6auxfbfgvhsvj6h.py":41:19)
#loc16 = loc("inductor_cache/rd/crdmrigp765pmjzkq6uminry2sz7i2ulee7fv6auxfbfgvhsvj6h.py":42:20)
#loc17 = loc("inductor_cache/rd/crdmrigp765pmjzkq6uminry2sz7i2ulee7fv6auxfbfgvhsvj6h.py":44:35)
#loc19 = loc("inductor_cache/rd/crdmrigp765pmjzkq6uminry2sz7i2ulee7fv6auxfbfgvhsvj6h.py":45:29)
#loc20 = loc("inductor_cache/rd/crdmrigp765pmjzkq6uminry2sz7i2ulee7fv6auxfbfgvhsvj6h.py":49:20)
#loc21 = loc("inductor_cache/rd/crdmrigp765pmjzkq6uminry2sz7i2ulee7fv6auxfbfgvhsvj6h.py":50:27)
#loc22 = loc("inductor_cache/rd/crdmrigp765pmjzkq6uminry2sz7i2ulee7fv6auxfbfgvhsvj6h.py":51:27)
#loc23 = loc("inductor_cache/rd/crdmrigp765pmjzkq6uminry2sz7i2ulee7fv6auxfbfgvhsvj6h.py":51:25)
#loc24 = loc("inductor_cache/rd/crdmrigp765pmjzkq6uminry2sz7i2ulee7fv6auxfbfgvhsvj6h.py":51:39)
#loc25 = loc("inductor_cache/rd/crdmrigp765pmjzkq6uminry2sz7i2ulee7fv6auxfbfgvhsvj6h.py":52:25)
#loc26 = loc("inductor_cache/rd/crdmrigp765pmjzkq6uminry2sz7i2ulee7fv6auxfbfgvhsvj6h.py":52:39)
#loc27 = loc("inductor_cache/rd/crdmrigp765pmjzkq6uminry2sz7i2ulee7fv6auxfbfgvhsvj6h.py":52:4)
#loc28 = loc(callsite(#loc10 at #loc11))
#loc30 = loc(callsite(#loc12 at #loc10))
#loc31 = loc(callsite(#loc10 at #loc18))
#loc33 = loc(callsite(#loc30 at #loc11))
#loc34 = loc(callsite(#loc30 at #loc18))
