; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_relu_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %10 = shl i32 %9, 8, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 252, !dbg !12
  %14 = shl i32 %11, 1, !dbg !12
  %15 = and i32 %14, 254, !dbg !12
  %16 = or disjoint i32 %10, %13, !dbg !13
  %17 = or disjoint i32 %10, %15, !dbg !13
  %18 = icmp slt i32 %16, 256, !dbg !14
  %19 = icmp slt i32 %17, 256, !dbg !14
  %20 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %21 = shl i32 %20, 1, !dbg !16
  %22 = lshr i32 %11, 6, !dbg !17
  %.lobit = and i32 %22, 1, !dbg !17
  %23 = or disjoint i32 %21, %.lobit, !dbg !18
  %24 = icmp slt i32 %23, 256, !dbg !19
  %.frozen = freeze i32 %16, !dbg !20
  %25 = sdiv i32 %.frozen, 64, !dbg !20
  %26 = mul i32 %25, 64, !dbg !21
  %.decomposed = sub i32 %.frozen, %26, !dbg !21
  %27 = srem i32 %17, 64, !dbg !21
  %28 = shl i32 %23, 6, !dbg !22
  %29 = add i32 %28, %.decomposed, !dbg !23
  %30 = shl i32 %25, 14, !dbg !24
  %31 = add i32 %29, %30, !dbg !25
  %32 = sext i32 %31 to i64, !dbg !26
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !26
  %34 = and i1 %18, %24, !dbg !27
  %35 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %33, i1 %34) #4, !dbg !28
  %36 = extractvalue { i32, i32, i32, i32 } %35, 0, !dbg !28
  %37 = extractvalue { i32, i32, i32, i32 } %35, 1, !dbg !28
  %38 = extractvalue { i32, i32, i32, i32 } %35, 2, !dbg !28
  %39 = extractvalue { i32, i32, i32, i32 } %35, 3, !dbg !28
  %40 = and i32 %12, 508, !dbg !28
  %41 = lshr i32 %12, 6, !dbg !28
  %42 = and i32 %41, 4, !dbg !28
  %43 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %42, !dbg !28
  %44 = getelementptr inbounds float, ptr addrspace(3) %43, i32 %40, !dbg !28
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %44, i32 %36, i32 %37, i32 %38, i32 %39, i1 true) #4, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %45 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !28
  %46 = load <2 x float>, ptr addrspace(3) %45, align 8, !dbg !28
  %47 = getelementptr inbounds i8, ptr addrspace(3) %45, i32 1040, !dbg !28
  %48 = load <2 x float>, ptr addrspace(3) %47, align 8, !dbg !28
  %49 = sext i32 %27 to i64, !dbg !29
  %50 = getelementptr float, ptr addrspace(1) %1, i64 %49, !dbg !29
  %51 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %50, i1 %19) #4, !dbg !30
  %52 = getelementptr float, ptr addrspace(1) %2, i64 %49, !dbg !31
  %53 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %52, i1 %19) #4, !dbg !32
  %54 = extractvalue { i32, i32 } %53, 0, !dbg !32
  %55 = extractvalue { i32, i32 } %53, 1, !dbg !32
  %56 = bitcast i32 %54 to float, !dbg !32
  %57 = bitcast i32 %55 to float, !dbg !32
  %58 = getelementptr float, ptr addrspace(1) %3, i64 %49, !dbg !33
  %59 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %58, i1 %19) #4, !dbg !34
  %60 = getelementptr float, ptr addrspace(1) %4, i64 %49, !dbg !35
  %61 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %60, i1 %19) #4, !dbg !36
  %62 = fadd float %56, 0x3EE4F8B580000000, !dbg !37
  %63 = fadd float %57, 0x3EE4F8B580000000, !dbg !37
  %64 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i = icmp eq i32 %64, 0, !dbg !38
  %65 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !38
  %.not1.i = icmp eq i32 %65, 0, !dbg !38
  br i1 %.not.i, label %71, label %66, !dbg !38

66:                                               ; preds = %8
  br i1 %.not1.i, label %69, label %67, !dbg !38

67:                                               ; preds = %66
  %68 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %62) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

69:                                               ; preds = %66
  %70 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %62) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

71:                                               ; preds = %8
  br i1 %.not1.i, label %74, label %72, !dbg !38

72:                                               ; preds = %71
  %73 = tail call float @llvm.nvvm.sqrt.rn.f(float %62) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

74:                                               ; preds = %71
  %75 = tail call float @llvm.nvvm.sqrt.approx.f(float %62) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

__nv_sqrtf.exit:                                  ; preds = %67, %69, %72, %74
  %.0.i = phi float [ %68, %67 ], [ %70, %69 ], [ %73, %72 ], [ %75, %74 ], !dbg !38
  %76 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i4 = icmp eq i32 %76, 0, !dbg !38
  %77 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !38
  %.not1.i7 = icmp eq i32 %77, 0, !dbg !38
  br i1 %.not.i4, label %83, label %78, !dbg !38

78:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i7, label %81, label %79, !dbg !38

79:                                               ; preds = %78
  %80 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %63) #4, !dbg !38
  br label %__nv_sqrtf.exit8, !dbg !38

81:                                               ; preds = %78
  %82 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %63) #4, !dbg !38
  br label %__nv_sqrtf.exit8, !dbg !38

83:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i7, label %86, label %84, !dbg !38

84:                                               ; preds = %83
  %85 = tail call float @llvm.nvvm.sqrt.rn.f(float %63) #4, !dbg !38
  br label %__nv_sqrtf.exit8, !dbg !38

86:                                               ; preds = %83
  %87 = tail call float @llvm.nvvm.sqrt.approx.f(float %63) #4, !dbg !38
  br label %__nv_sqrtf.exit8, !dbg !38

__nv_sqrtf.exit8:                                 ; preds = %79, %81, %84, %86
  %.0.i6 = phi float [ %80, %79 ], [ %82, %81 ], [ %85, %84 ], [ %87, %86 ], !dbg !38
  %88 = extractvalue { i32, i32 } %51, 1, !dbg !30
  %89 = extractvalue { i32, i32 } %51, 0, !dbg !30
  %90 = extractvalue { i32, i32 } %61, 1, !dbg !36
  %91 = extractvalue { i32, i32 } %61, 0, !dbg !36
  %92 = extractvalue { i32, i32 } %59, 1, !dbg !34
  %93 = extractvalue { i32, i32 } %59, 0, !dbg !34
  %94 = or disjoint i32 %15, 256, !dbg !28
  %95 = icmp slt i32 %21, 256, !dbg !19
  %96 = and i32 %11, 127, !dbg !12
  %97 = or disjoint i32 %96, %10, !dbg !13
  %98 = or disjoint i32 %97, 128, !dbg !13
  %99 = icmp slt i32 %98, 256, !dbg !14
  %100 = and i1 %95, %99, !dbg !27
  %101 = icmp slt i32 %97, 256, !dbg !14
  %102 = and i1 %95, %101, !dbg !27
  %103 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !39
  %104 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i6) #4, !dbg !39
  %105 = insertelement <2 x i32> poison, i32 %88, i64 0, !dbg !30
  %106 = insertelement <2 x i32> %105, i32 %89, i64 1, !dbg !30
  %107 = bitcast <2 x i32> %106 to <2 x float>, !dbg !30
  %108 = shufflevector <2 x float> %107, <2 x float> poison, <4 x i32> <i32 0, i32 1, i32 0, i32 1>, !dbg !30
  %109 = shufflevector <2 x float> %48, <2 x float> %46, <4 x i32> <i32 1, i32 0, i32 3, i32 2>, !dbg !40
  %110 = fsub <4 x float> %109, %108, !dbg !40
  %111 = insertelement <2 x i32> poison, i32 %90, i64 0, !dbg !36
  %112 = insertelement <2 x i32> %111, i32 %91, i64 1, !dbg !36
  %113 = bitcast <2 x i32> %112 to <2 x float>, !dbg !36
  %114 = shufflevector <2 x float> %113, <2 x float> poison, <4 x i32> <i32 0, i32 1, i32 0, i32 1>, !dbg !36
  %115 = insertelement <2 x i32> poison, i32 %92, i64 0, !dbg !34
  %116 = insertelement <2 x i32> %115, i32 %93, i64 1, !dbg !34
  %117 = bitcast <2 x i32> %116 to <2 x float>, !dbg !34
  %118 = shufflevector <2 x float> %117, <2 x float> poison, <4 x i32> <i32 0, i32 1, i32 0, i32 1>, !dbg !34
  %119 = insertelement <4 x float> poison, float %104, i64 0, !dbg !41
  %120 = insertelement <4 x float> %119, float %103, i64 1, !dbg !41
  %121 = shufflevector <4 x float> %120, <4 x float> poison, <4 x i32> <i32 0, i32 1, i32 0, i32 1>, !dbg !41
  %122 = fmul <4 x float> %110, %121, !dbg !41
  %123 = fmul <4 x float> %122, %118, !dbg !42
  %124 = fadd <4 x float> %123, %114, !dbg !43
  %125 = fcmp olt <4 x float> %124, zeroinitializer, !dbg !44
  %126 = extractelement <4 x i1> %125, i64 3, !dbg !48
  %127 = extractelement <4 x float> %124, i64 3, !dbg !48
  %128 = select i1 %126, float 0.000000e+00, float %127, !dbg !48
  %129 = extractelement <4 x i1> %125, i64 2, !dbg !48
  %130 = extractelement <4 x float> %124, i64 2, !dbg !48
  %131 = select i1 %129, float 0.000000e+00, float %130, !dbg !48
  %132 = extractelement <4 x i1> %125, i64 1, !dbg !48
  %133 = extractelement <4 x float> %124, i64 1, !dbg !48
  %134 = select i1 %132, float 0.000000e+00, float %133, !dbg !48
  %135 = extractelement <4 x i1> %125, i64 0, !dbg !48
  %136 = extractelement <4 x float> %124, i64 0, !dbg !48
  %137 = select i1 %135, float 0.000000e+00, float %136, !dbg !48
  %138 = shl i32 %97, 8, !dbg !49
  %139 = shl i32 %98, 8, !dbg !49
  %140 = add i32 %138, %21, !dbg !50
  %141 = add i32 %139, %21, !dbg !50
  %142 = sext i32 %140 to i64, !dbg !51
  %143 = getelementptr float, ptr addrspace(1) %5, i64 %142, !dbg !51
  %144 = sext i32 %141 to i64, !dbg !51
  %145 = getelementptr float, ptr addrspace(1) %5, i64 %144, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %146 = lshr exact i32 %40, 1, !dbg !52
  %147 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %146, !dbg !52
  %148 = getelementptr inbounds float, ptr addrspace(3) %147, i32 %40, !dbg !52
  %149 = bitcast float %128 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %148, <1 x i32> %149, i1 true) #4, !dbg !52
  %150 = or disjoint i32 %40, 2, !dbg !52
  %151 = lshr exact i32 %150, 1, !dbg !52
  %152 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %151, !dbg !52
  %153 = getelementptr inbounds float, ptr addrspace(3) %152, i32 %150, !dbg !52
  %154 = bitcast float %131 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %153, <1 x i32> %154, i1 true) #4, !dbg !52
  %155 = or disjoint i32 %40, 1, !dbg !52
  %156 = getelementptr inbounds float, ptr addrspace(3) %147, i32 %155, !dbg !52
  %157 = bitcast float %134 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %156, <1 x i32> %157, i1 true) #4, !dbg !52
  %158 = or disjoint i32 %40, 3, !dbg !52
  %159 = lshr i32 %158, 1, !dbg !52
  %160 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %159, !dbg !52
  %161 = getelementptr inbounds float, ptr addrspace(3) %160, i32 %158, !dbg !52
  %162 = bitcast float %137 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %161, <1 x i32> %162, i1 true) #4, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %163 = lshr exact i32 %15, 1, !dbg !52
  %164 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %163, !dbg !52
  %165 = getelementptr inbounds float, ptr addrspace(3) %164, i32 %15, !dbg !52
  %166 = load i32, ptr addrspace(3) %165, align 4, !dbg !52
  %167 = or disjoint i32 %15, 1, !dbg !52
  %168 = getelementptr inbounds float, ptr addrspace(3) %164, i32 %167, !dbg !52
  %169 = load i32, ptr addrspace(3) %168, align 4, !dbg !52
  %170 = lshr exact i32 %94, 1, !dbg !52
  %171 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %170, !dbg !52
  %172 = getelementptr inbounds float, ptr addrspace(3) %171, i32 %94, !dbg !52
  %173 = load i32, ptr addrspace(3) %172, align 4, !dbg !52
  %174 = or disjoint i32 %15, 257, !dbg !52
  %175 = lshr i32 %174, 1, !dbg !52
  %176 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %175, !dbg !52
  %177 = getelementptr inbounds float, ptr addrspace(3) %176, i32 %174, !dbg !52
  %178 = load i32, ptr addrspace(3) %177, align 4, !dbg !52
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %166, i32 %169, ptr addrspace(1) %143, i1 %102) #4, !dbg !52
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %173, i32 %178, ptr addrspace(1) %145, i1 %100) #4, !dbg !52
  ret void, !dbg !53
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c7vik5rw2bw5mfy3b4p4u46msn4huipuuk623naudd6in522s6xo.py", directory: "inductor_cache/7v")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_8, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_8, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_relu_8", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_relu_8", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 38, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 49, scope: !7)
!25 = !DILocation(line: 32, column: 43, scope: !7)
!26 = !DILocation(line: 32, column: 30, scope: !7)
!27 = !DILocation(line: 32, column: 62, scope: !7)
!28 = !DILocation(line: 32, column: 54, scope: !7)
!29 = !DILocation(line: 33, column: 30, scope: !7)
!30 = !DILocation(line: 33, column: 35, scope: !7)
!31 = !DILocation(line: 34, column: 30, scope: !7)
!32 = !DILocation(line: 34, column: 35, scope: !7)
!33 = !DILocation(line: 35, column: 31, scope: !7)
!34 = !DILocation(line: 35, column: 36, scope: !7)
!35 = !DILocation(line: 36, column: 31, scope: !7)
!36 = !DILocation(line: 36, column: 36, scope: !7)
!37 = !DILocation(line: 39, column: 18, scope: !7)
!38 = !DILocation(line: 40, column: 26, scope: !7)
!39 = !DILocation(line: 42, column: 18, scope: !7)
!40 = !DILocation(line: 37, column: 18, scope: !7)
!41 = !DILocation(line: 45, column: 19, scope: !7)
!42 = !DILocation(line: 46, column: 20, scope: !7)
!43 = !DILocation(line: 47, column: 20, scope: !7)
!44 = !DILocation(line: 118, column: 15, scope: !45, inlinedAt: !47)
!45 = distinct !DILexicalBlockFile(scope: !7, file: !46, discriminator: 0)
!46 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!47 = !DILocation(line: 49, column: 42, scope: !7)
!48 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !47)
!49 = !DILocation(line: 50, column: 34, scope: !7)
!50 = !DILocation(line: 50, column: 30, scope: !7)
!51 = !DILocation(line: 50, column: 25, scope: !7)
!52 = !DILocation(line: 50, column: 46, scope: !7)
!53 = !DILocation(line: 50, column: 4, scope: !7)
