; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_max_pool2d_with_indices_19(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %6 = shl i32 %5, 8, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 1, !dbg !12
  %9 = and i32 %8, 254, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = srem i32 %10, 64, !dbg !14
  %12 = insertelement <2 x i32> poison, i32 %10, i64 0, !dbg !15
  %13 = shufflevector <2 x i32> %12, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !15
  %14 = sdiv <2 x i32> %13, <i32 1024, i32 64>, !dbg !15
  %15 = srem <2 x i32> %14, splat (i32 16), !dbg !16
  %16 = extractelement <2 x i32> %15, i64 0, !dbg !17
  %17 = icmp sgt i32 %16, -1, !dbg !18
  %18 = extractelement <2 x i32> %15, i64 1, !dbg !19
  %19 = icmp sgt i32 %18, -1, !dbg !20
  %20 = or i32 %16, %18, !dbg !17
  %21 = icmp sgt i32 %20, -1, !dbg !17
  %22 = shl nsw i32 %18, 7, !dbg !19
  %23 = extractelement <2 x i32> %14, i64 0, !dbg !21
  %24 = shl i32 %23, 12, !dbg !21
  %25 = add i32 %24, %11, !dbg !22
  %26 = add i32 %25, %22, !dbg !23
  %27 = sext i32 %26 to i64, !dbg !24
  %28 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !24
  %29 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %28, i1 %21, i32 -8388608, i1 %21, i32 -8388608, i1 %21) #1, !dbg !25
  %30 = extractvalue { i32, i32 } %29, 0, !dbg !25
  %31 = extractvalue { i32, i32 } %29, 1, !dbg !25
  %32 = add i32 %25, 64, !dbg !26
  %33 = add i32 %32, %22, !dbg !27
  %34 = sext i32 %33 to i64, !dbg !28
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !28
  %36 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %35, i1 %21, i32 -8388608, i1 %21, i32 -8388608, i1 %21) #1, !dbg !29
  %37 = extractvalue { i32, i32 } %36, 0, !dbg !29
  %38 = extractvalue { i32, i32 } %36, 1, !dbg !29
  %39 = add nsw <2 x i32> %15, splat (i32 1), !dbg !30
  %40 = extractelement <2 x i32> %39, i64 1, !dbg !31
  %41 = icmp ult i32 %40, 16, !dbg !32
  %42 = and i1 %17, %41, !dbg !33
  %43 = add i32 %25, 128, !dbg !34
  %44 = add i32 %43, %22, !dbg !35
  %45 = sext i32 %44 to i64, !dbg !36
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !36
  %47 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %46, i1 %42, i32 -8388608, i1 %42, i32 -8388608, i1 %42) #1, !dbg !37
  %48 = extractvalue { i32, i32 } %47, 0, !dbg !37
  %49 = extractvalue { i32, i32 } %47, 1, !dbg !37
  %50 = add i32 %25, 2048, !dbg !38
  %51 = add i32 %50, %22, !dbg !39
  %52 = sext i32 %51 to i64, !dbg !40
  %53 = getelementptr float, ptr addrspace(1) %0, i64 %52, !dbg !40
  %54 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %53, i1 %21, i32 -8388608, i1 %21, i32 -8388608, i1 %21) #1, !dbg !41
  %55 = extractvalue { i32, i32 } %54, 0, !dbg !41
  %56 = extractvalue { i32, i32 } %54, 1, !dbg !41
  %57 = add i32 %25, 2112, !dbg !42
  %58 = add i32 %57, %22, !dbg !43
  %59 = sext i32 %58 to i64, !dbg !44
  %60 = getelementptr float, ptr addrspace(1) %0, i64 %59, !dbg !44
  %61 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %60, i1 %21, i32 -8388608, i1 %21, i32 -8388608, i1 %21) #1, !dbg !45
  %62 = extractvalue { i32, i32 } %61, 0, !dbg !45
  %63 = extractvalue { i32, i32 } %61, 1, !dbg !45
  %64 = add i32 %25, 2176, !dbg !46
  %65 = add i32 %64, %22, !dbg !47
  %66 = sext i32 %65 to i64, !dbg !48
  %67 = getelementptr float, ptr addrspace(1) %0, i64 %66, !dbg !48
  %68 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %67, i1 %42, i32 -8388608, i1 %42, i32 -8388608, i1 %42) #1, !dbg !49
  %69 = extractvalue { i32, i32 } %68, 0, !dbg !49
  %70 = extractvalue { i32, i32 } %68, 1, !dbg !49
  %71 = extractelement <2 x i32> %39, i64 0, !dbg !31
  %72 = icmp ult i32 %71, 16, !dbg !30
  %73 = and i1 %19, %72, !dbg !50
  %74 = add i32 %25, 4096, !dbg !51
  %75 = add i32 %74, %22, !dbg !52
  %76 = sext i32 %75 to i64, !dbg !53
  %77 = getelementptr float, ptr addrspace(1) %0, i64 %76, !dbg !53
  %78 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %77, i1 %73, i32 -8388608, i1 %73, i32 -8388608, i1 %73) #1, !dbg !54
  %79 = extractvalue { i32, i32 } %78, 0, !dbg !54
  %80 = extractvalue { i32, i32 } %78, 1, !dbg !54
  %81 = add i32 %25, 4160, !dbg !55
  %82 = add i32 %81, %22, !dbg !56
  %83 = sext i32 %82 to i64, !dbg !57
  %84 = getelementptr float, ptr addrspace(1) %0, i64 %83, !dbg !57
  %85 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %84, i1 %73, i32 -8388608, i1 %73, i32 -8388608, i1 %73) #1, !dbg !58
  %86 = extractvalue { i32, i32 } %85, 0, !dbg !58
  %87 = extractvalue { i32, i32 } %85, 1, !dbg !58
  %88 = or i32 %71, %40, !dbg !31
  %89 = icmp ult i32 %88, 16, !dbg !31
  %90 = add i32 %25, 4224, !dbg !59
  %91 = add i32 %90, %22, !dbg !60
  %92 = sext i32 %91 to i64, !dbg !61
  %93 = getelementptr float, ptr addrspace(1) %0, i64 %92, !dbg !61
  %94 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %93, i1 %89, i32 -8388608, i1 %89, i32 -8388608, i1 %89) #1, !dbg !62
  %95 = extractvalue { i32, i32 } %94, 0, !dbg !62
  %96 = extractvalue { i32, i32 } %94, 1, !dbg !62
  %97 = insertelement <2 x i32> poison, i32 %30, i64 0, !dbg !25
  %98 = insertelement <2 x i32> %97, i32 %31, i64 1, !dbg !25
  %99 = bitcast <2 x i32> %98 to <2 x float>, !dbg !25
  %100 = insertelement <2 x i32> poison, i32 %37, i64 0, !dbg !29
  %101 = insertelement <2 x i32> %100, i32 %38, i64 1, !dbg !29
  %102 = bitcast <2 x i32> %101 to <2 x float>, !dbg !29
  %103 = fcmp ogt <2 x float> %102, %99, !dbg !63
  %104 = fcmp uno <2 x float> %102, zeroinitializer, !dbg !67
  %105 = or <2 x i1> %103, %104, !dbg !68
  %.v = select <2 x i1> %105, <2 x i32> %101, <2 x i32> %98, !dbg !69
  %106 = bitcast <2 x i32> %.v to <2 x float>, !dbg !69
  %107 = insertelement <2 x i32> poison, i32 %48, i64 0, !dbg !37
  %108 = insertelement <2 x i32> %107, i32 %49, i64 1, !dbg !37
  %109 = bitcast <2 x i32> %108 to <2 x float>, !dbg !37
  %110 = fcmp olt <2 x float> %106, %109, !dbg !70
  %111 = fcmp uno <2 x float> %109, zeroinitializer, !dbg !72
  %112 = or <2 x i1> %111, %110, !dbg !73
  %.v1 = select <2 x i1> %112, <2 x i32> %108, <2 x i32> %.v, !dbg !74
  %113 = bitcast <2 x i32> %.v1 to <2 x float>, !dbg !74
  %114 = insertelement <2 x i32> poison, i32 %55, i64 0, !dbg !41
  %115 = insertelement <2 x i32> %114, i32 %56, i64 1, !dbg !41
  %116 = bitcast <2 x i32> %115 to <2 x float>, !dbg !41
  %117 = fcmp olt <2 x float> %113, %116, !dbg !75
  %118 = fcmp uno <2 x float> %116, zeroinitializer, !dbg !77
  %119 = or <2 x i1> %118, %117, !dbg !78
  %.v2 = select <2 x i1> %119, <2 x i32> %115, <2 x i32> %.v1, !dbg !79
  %120 = bitcast <2 x i32> %.v2 to <2 x float>, !dbg !79
  %121 = insertelement <2 x i32> poison, i32 %62, i64 0, !dbg !45
  %122 = insertelement <2 x i32> %121, i32 %63, i64 1, !dbg !45
  %123 = bitcast <2 x i32> %122 to <2 x float>, !dbg !45
  %124 = fcmp olt <2 x float> %120, %123, !dbg !80
  %125 = fcmp uno <2 x float> %123, zeroinitializer, !dbg !82
  %126 = or <2 x i1> %125, %124, !dbg !83
  %.v3 = select <2 x i1> %126, <2 x i32> %122, <2 x i32> %.v2, !dbg !84
  %127 = bitcast <2 x i32> %.v3 to <2 x float>, !dbg !84
  %128 = insertelement <2 x i32> poison, i32 %69, i64 0, !dbg !49
  %129 = insertelement <2 x i32> %128, i32 %70, i64 1, !dbg !49
  %130 = bitcast <2 x i32> %129 to <2 x float>, !dbg !49
  %131 = fcmp olt <2 x float> %127, %130, !dbg !85
  %132 = fcmp uno <2 x float> %130, zeroinitializer, !dbg !87
  %133 = or <2 x i1> %132, %131, !dbg !88
  %.v4 = select <2 x i1> %133, <2 x i32> %129, <2 x i32> %.v3, !dbg !89
  %134 = bitcast <2 x i32> %.v4 to <2 x float>, !dbg !89
  %135 = insertelement <2 x i32> poison, i32 %79, i64 0, !dbg !54
  %136 = insertelement <2 x i32> %135, i32 %80, i64 1, !dbg !54
  %137 = bitcast <2 x i32> %136 to <2 x float>, !dbg !54
  %138 = fcmp olt <2 x float> %134, %137, !dbg !90
  %139 = fcmp uno <2 x float> %137, zeroinitializer, !dbg !92
  %140 = or <2 x i1> %139, %138, !dbg !93
  %.v5 = select <2 x i1> %140, <2 x i32> %136, <2 x i32> %.v4, !dbg !94
  %141 = bitcast <2 x i32> %.v5 to <2 x float>, !dbg !94
  %142 = insertelement <2 x i32> poison, i32 %86, i64 0, !dbg !58
  %143 = insertelement <2 x i32> %142, i32 %87, i64 1, !dbg !58
  %144 = bitcast <2 x i32> %143 to <2 x float>, !dbg !58
  %145 = fcmp olt <2 x float> %141, %144, !dbg !95
  %146 = fcmp uno <2 x float> %144, zeroinitializer, !dbg !97
  %147 = or <2 x i1> %146, %145, !dbg !98
  %.v6 = select <2 x i1> %147, <2 x i32> %143, <2 x i32> %.v5, !dbg !99
  %148 = bitcast <2 x i32> %.v6 to <2 x float>, !dbg !99
  %149 = insertelement <2 x i32> poison, i32 %95, i64 0, !dbg !62
  %150 = insertelement <2 x i32> %149, i32 %96, i64 1, !dbg !62
  %151 = bitcast <2 x i32> %150 to <2 x float>, !dbg !62
  %152 = fcmp olt <2 x float> %148, %151, !dbg !100
  %153 = bitcast i32 %95 to float, !dbg !102
  %154 = fcmp uno float %153, 0.000000e+00, !dbg !102
  %155 = bitcast i32 %96 to float, !dbg !102
  %156 = fcmp uno float %155, 0.000000e+00, !dbg !102
  %157 = extractelement <2 x i1> %152, i64 0, !dbg !103
  %158 = or i1 %154, %157, !dbg !103
  %159 = extractelement <2 x i1> %152, i64 1, !dbg !103
  %160 = or i1 %156, %159, !dbg !103
  %161 = zext <2 x i1> %103 to <2 x i8>, !dbg !104
  %162 = select <2 x i1> %110, <2 x i8> splat (i8 2), <2 x i8> %161, !dbg !105
  %163 = select <2 x i1> %117, <2 x i8> splat (i8 3), <2 x i8> %162, !dbg !106
  %164 = select <2 x i1> %124, <2 x i8> splat (i8 4), <2 x i8> %163, !dbg !107
  %165 = select <2 x i1> %131, <2 x i8> splat (i8 5), <2 x i8> %164, !dbg !108
  %166 = select <2 x i1> %138, <2 x i8> splat (i8 6), <2 x i8> %165, !dbg !109
  %167 = select <2 x i1> %145, <2 x i8> splat (i8 7), <2 x i8> %166, !dbg !110
  %168 = select <2 x i1> %152, <2 x i8> splat (i8 8), <2 x i8> %167, !dbg !111
  %169 = sext i32 %10 to i64, !dbg !112
  %170 = getelementptr float, ptr addrspace(1) %1, i64 %169, !dbg !112
  %171 = extractelement <2 x i32> %.v6, i64 0, !dbg !113
  %172 = select i1 %158, i32 %95, i32 %171, !dbg !114
  %173 = extractelement <2 x i32> %.v6, i64 1, !dbg !113
  %174 = select i1 %160, i32 %96, i32 %173, !dbg !114
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %172, i32 %174, ptr addrspace(1) %170, i1 true) #1, !dbg !113
  %175 = getelementptr i8, ptr addrspace(1) %2, i64 %169, !dbg !115
  %176 = bitcast <2 x i8> %168 to i16, !dbg !116
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %176, ptr addrspace(1) %175, i1 true) #1, !dbg !116
  ret void, !dbg !117
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "comwi55zk74jykubb65hyj2hsrubuj37polegqluffx2dgvc6rw4.py", directory: "inductor_cache/om")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_19, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_19, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_19", linkageName: "triton_poi_fused_max_pool2d_with_indices_19", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 26, column: 19, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 29, scope: !7)
!17 = !DILocation(line: 39, column: 19, scope: !7)
!18 = !DILocation(line: 31, column: 19, scope: !7)
!19 = !DILocation(line: 40, column: 40, scope: !7)
!20 = !DILocation(line: 36, column: 19, scope: !7)
!21 = !DILocation(line: 40, column: 50, scope: !7)
!22 = !DILocation(line: 40, column: 36, scope: !7)
!23 = !DILocation(line: 40, column: 45, scope: !7)
!24 = !DILocation(line: 40, column: 31, scope: !7)
!25 = !DILocation(line: 40, column: 55, scope: !7)
!26 = !DILocation(line: 46, column: 41, scope: !7)
!27 = !DILocation(line: 46, column: 50, scope: !7)
!28 = !DILocation(line: 46, column: 31, scope: !7)
!29 = !DILocation(line: 46, column: 60, scope: !7)
!30 = !DILocation(line: 71, column: 20, scope: !7)
!31 = !DILocation(line: 78, column: 20, scope: !7)
!32 = !DILocation(line: 51, column: 20, scope: !7)
!33 = !DILocation(line: 52, column: 19, scope: !7)
!34 = !DILocation(line: 53, column: 42, scope: !7)
!35 = !DILocation(line: 53, column: 51, scope: !7)
!36 = !DILocation(line: 53, column: 31, scope: !7)
!37 = !DILocation(line: 53, column: 61, scope: !7)
!38 = !DILocation(line: 60, column: 43, scope: !7)
!39 = !DILocation(line: 60, column: 52, scope: !7)
!40 = !DILocation(line: 60, column: 31, scope: !7)
!41 = !DILocation(line: 60, column: 62, scope: !7)
!42 = !DILocation(line: 63, column: 43, scope: !7)
!43 = !DILocation(line: 63, column: 52, scope: !7)
!44 = !DILocation(line: 63, column: 31, scope: !7)
!45 = !DILocation(line: 63, column: 62, scope: !7)
!46 = !DILocation(line: 66, column: 43, scope: !7)
!47 = !DILocation(line: 66, column: 52, scope: !7)
!48 = !DILocation(line: 66, column: 31, scope: !7)
!49 = !DILocation(line: 66, column: 62, scope: !7)
!50 = !DILocation(line: 72, column: 20, scope: !7)
!51 = !DILocation(line: 73, column: 43, scope: !7)
!52 = !DILocation(line: 73, column: 52, scope: !7)
!53 = !DILocation(line: 73, column: 31, scope: !7)
!54 = !DILocation(line: 73, column: 62, scope: !7)
!55 = !DILocation(line: 76, column: 43, scope: !7)
!56 = !DILocation(line: 76, column: 52, scope: !7)
!57 = !DILocation(line: 76, column: 31, scope: !7)
!58 = !DILocation(line: 76, column: 62, scope: !7)
!59 = !DILocation(line: 79, column: 43, scope: !7)
!60 = !DILocation(line: 79, column: 52, scope: !7)
!61 = !DILocation(line: 79, column: 31, scope: !7)
!62 = !DILocation(line: 79, column: 62, scope: !7)
!63 = !DILocation(line: 118, column: 15, scope: !64, inlinedAt: !66)
!64 = distinct !DILexicalBlockFile(scope: !7, file: !65, discriminator: 0)
!65 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!66 = !DILocation(line: 47, column: 42, scope: !7)
!67 = !DILocation(line: 120, column: 21, scope: !64, inlinedAt: !66)
!68 = !DILocation(line: 120, column: 16, scope: !64, inlinedAt: !66)
!69 = !DILocation(line: 121, column: 29, scope: !64, inlinedAt: !66)
!70 = !DILocation(line: 118, column: 15, scope: !64, inlinedAt: !71)
!71 = !DILocation(line: 54, column: 42, scope: !7)
!72 = !DILocation(line: 120, column: 21, scope: !64, inlinedAt: !71)
!73 = !DILocation(line: 120, column: 16, scope: !64, inlinedAt: !71)
!74 = !DILocation(line: 121, column: 29, scope: !64, inlinedAt: !71)
!75 = !DILocation(line: 118, column: 15, scope: !64, inlinedAt: !76)
!76 = !DILocation(line: 61, column: 42, scope: !7)
!77 = !DILocation(line: 120, column: 21, scope: !64, inlinedAt: !76)
!78 = !DILocation(line: 120, column: 16, scope: !64, inlinedAt: !76)
!79 = !DILocation(line: 121, column: 29, scope: !64, inlinedAt: !76)
!80 = !DILocation(line: 118, column: 15, scope: !64, inlinedAt: !81)
!81 = !DILocation(line: 64, column: 42, scope: !7)
!82 = !DILocation(line: 120, column: 21, scope: !64, inlinedAt: !81)
!83 = !DILocation(line: 120, column: 16, scope: !64, inlinedAt: !81)
!84 = !DILocation(line: 121, column: 29, scope: !64, inlinedAt: !81)
!85 = !DILocation(line: 118, column: 15, scope: !64, inlinedAt: !86)
!86 = !DILocation(line: 67, column: 42, scope: !7)
!87 = !DILocation(line: 120, column: 21, scope: !64, inlinedAt: !86)
!88 = !DILocation(line: 120, column: 16, scope: !64, inlinedAt: !86)
!89 = !DILocation(line: 121, column: 29, scope: !64, inlinedAt: !86)
!90 = !DILocation(line: 118, column: 15, scope: !64, inlinedAt: !91)
!91 = !DILocation(line: 74, column: 42, scope: !7)
!92 = !DILocation(line: 120, column: 21, scope: !64, inlinedAt: !91)
!93 = !DILocation(line: 120, column: 16, scope: !64, inlinedAt: !91)
!94 = !DILocation(line: 121, column: 29, scope: !64, inlinedAt: !91)
!95 = !DILocation(line: 118, column: 15, scope: !64, inlinedAt: !96)
!96 = !DILocation(line: 77, column: 42, scope: !7)
!97 = !DILocation(line: 120, column: 21, scope: !64, inlinedAt: !96)
!98 = !DILocation(line: 120, column: 16, scope: !64, inlinedAt: !96)
!99 = !DILocation(line: 121, column: 29, scope: !64, inlinedAt: !96)
!100 = !DILocation(line: 118, column: 15, scope: !64, inlinedAt: !101)
!101 = !DILocation(line: 80, column: 42, scope: !7)
!102 = !DILocation(line: 120, column: 21, scope: !64, inlinedAt: !101)
!103 = !DILocation(line: 120, column: 16, scope: !64, inlinedAt: !101)
!104 = !DILocation(line: 84, column: 35, scope: !7)
!105 = !DILocation(line: 87, column: 35, scope: !7)
!106 = !DILocation(line: 90, column: 35, scope: !7)
!107 = !DILocation(line: 93, column: 35, scope: !7)
!108 = !DILocation(line: 96, column: 35, scope: !7)
!109 = !DILocation(line: 99, column: 35, scope: !7)
!110 = !DILocation(line: 102, column: 35, scope: !7)
!111 = !DILocation(line: 105, column: 35, scope: !7)
!112 = !DILocation(line: 106, column: 25, scope: !7)
!113 = !DILocation(line: 106, column: 37, scope: !7)
!114 = !DILocation(line: 121, column: 29, scope: !64, inlinedAt: !101)
!115 = !DILocation(line: 107, column: 25, scope: !7)
!116 = !DILocation(line: 107, column: 37, scope: !7)
!117 = !DILocation(line: 107, column: 4, scope: !7)
