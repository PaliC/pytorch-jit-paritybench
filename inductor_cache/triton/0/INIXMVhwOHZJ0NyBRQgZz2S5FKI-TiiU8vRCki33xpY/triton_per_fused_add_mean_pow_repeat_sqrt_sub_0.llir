; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused_add_mean_pow_repeat_sqrt_sub_0(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %5 = and i32 %4, 63, !dbg !10
  %6 = zext nneg i32 %5 to i64, !dbg !11
  %7 = getelementptr float, ptr addrspace(1) %0, i64 %6, !dbg !11
  %8 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %7, i1 true) #5, !dbg !12
  %9 = bitcast i32 %8 to float, !dbg !12
  %10 = or disjoint i32 %5, 64, !dbg !13
  %11 = zext nneg i32 %10 to i64, !dbg !14
  %12 = getelementptr float, ptr addrspace(1) %0, i64 %11, !dbg !14
  %13 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %12, i1 true) #5, !dbg !15
  %14 = bitcast i32 %13 to float, !dbg !15
  %15 = or disjoint i32 %5, 128, !dbg !16
  %16 = zext nneg i32 %15 to i64, !dbg !17
  %17 = getelementptr float, ptr addrspace(1) %0, i64 %16, !dbg !17
  %18 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %17, i1 true) #5, !dbg !18
  %19 = bitcast i32 %18 to float, !dbg !18
  %20 = or disjoint i32 %5, 192, !dbg !19
  %21 = zext nneg i32 %20 to i64, !dbg !20
  %22 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !20
  %23 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %22, i1 true) #5, !dbg !21
  %24 = bitcast i32 %23 to float, !dbg !21
  %25 = fadd float %9, %14, !dbg !22
  %26 = fadd float %25, %19, !dbg !23
  %27 = fadd float %26, %24, !dbg !24
  %28 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %27, float 4.000000e+00) #5, !dbg !25
  %29 = fsub float %9, %28, !dbg !26
  %30 = fmul float %29, %29, !dbg !27
  %31 = fsub float %14, %28, !dbg !28
  %32 = fmul float %31, %31, !dbg !29
  %33 = fadd float %30, %32, !dbg !30
  %34 = fsub float %19, %28, !dbg !31
  %35 = fmul float %34, %34, !dbg !32
  %36 = fadd float %35, %33, !dbg !33
  %37 = fsub float %24, %28, !dbg !34
  %38 = fmul float %37, %37, !dbg !35
  %39 = fadd float %38, %36, !dbg !36
  %40 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %39, float 4.000000e+00) #5, !dbg !37
  %41 = fadd float %40, 0x3E45798EE0000000, !dbg !38
  %42 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !39
  %.not.i = icmp eq i32 %42, 0, !dbg !39
  %43 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !39
  %.not1.i = icmp eq i32 %43, 0, !dbg !39
  br i1 %.not.i, label %49, label %44, !dbg !39

44:                                               ; preds = %3
  br i1 %.not1.i, label %47, label %45, !dbg !39

45:                                               ; preds = %44
  %46 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %41) #5, !dbg !39
  br label %__nv_sqrtf.exit, !dbg !39

47:                                               ; preds = %44
  %48 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %41) #5, !dbg !39
  br label %__nv_sqrtf.exit, !dbg !39

49:                                               ; preds = %3
  br i1 %.not1.i, label %52, label %50, !dbg !39

50:                                               ; preds = %49
  %51 = tail call float @llvm.nvvm.sqrt.rn.f(float %41) #5, !dbg !39
  br label %__nv_sqrtf.exit, !dbg !39

52:                                               ; preds = %49
  %53 = tail call float @llvm.nvvm.sqrt.approx.f(float %41) #5, !dbg !39
  br label %__nv_sqrtf.exit, !dbg !39

__nv_sqrtf.exit:                                  ; preds = %45, %47, %50, %52
  %.0.i = phi float [ %46, %45 ], [ %48, %47 ], [ %51, %50 ], [ %53, %52 ], !dbg !39
  %54 = lshr i32 %5, 4, !dbg !40
  %55 = and i32 %4, 15, !dbg !41
  %56 = lshr i32 %4, 5, !dbg !10
  %57 = and i32 %4, 31, !dbg !10
  %58 = bitcast float %.0.i to i32, !dbg !42
  %59 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %58, i32 16, i32 31), !dbg !42
  %60 = bitcast i32 %59 to float, !dbg !42
  %61 = fadd float %.0.i, %60, !dbg !46
  %62 = bitcast float %61 to i32, !dbg !42
  %63 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %62, i32 8, i32 31), !dbg !42
  %64 = bitcast i32 %63 to float, !dbg !42
  %65 = fadd float %61, %64, !dbg !46
  %66 = bitcast float %65 to i32, !dbg !42
  %67 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %66, i32 4, i32 31), !dbg !42
  %68 = bitcast i32 %67 to float, !dbg !42
  %69 = fadd float %65, %68, !dbg !46
  %70 = bitcast float %69 to i32, !dbg !42
  %71 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %70, i32 2, i32 31), !dbg !42
  %72 = bitcast i32 %71 to float, !dbg !42
  %73 = fadd float %69, %72, !dbg !46
  %74 = bitcast float %73 to i32, !dbg !42
  %75 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %74, i32 1, i32 31), !dbg !42
  %76 = bitcast i32 %75 to float, !dbg !42
  %77 = fadd float %73, %76, !dbg !46
  %78 = icmp eq i32 %57, 0, !dbg !42
  %79 = and i32 %56, 1, !dbg !42
  %80 = getelementptr float, ptr addrspace(3) @global_smem, i32 %79, !dbg !42
  %81 = bitcast float %77 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %80, <1 x i32> %81, i1 %78) #5, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %82 = icmp slt i32 %4, 2, !dbg !42
  %83 = getelementptr float, ptr addrspace(3) @global_smem, i32 %4, !dbg !42
  %84 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %83, i1 %82) #5, !dbg !42
  %85 = bitcast i32 %84 to float, !dbg !42
  %86 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %84, i32 1, i32 31), !dbg !42
  %87 = bitcast i32 %86 to float, !dbg !42
  %88 = fadd float %85, %87, !dbg !46
  %89 = and i32 %4, 1, !dbg !42
  %90 = icmp eq i32 %89, 0, !dbg !42
  %91 = and i1 %82, %90, !dbg !42
  %92 = bitcast float %88 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %83, <1 x i32> %92, i1 %91) #5, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %93 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !42
  %94 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %93, float 6.400000e+01) #5, !dbg !48
  %95 = mul nuw nsw i32 %54, 80, !dbg !49
  %96 = or disjoint i32 %95, %55, !dbg !50
  %97 = zext nneg i32 %96 to i64, !dbg !51
  %98 = getelementptr float, ptr addrspace(1) %1, i64 %97, !dbg !51
  %99 = bitcast float %94 to i32, !dbg !52
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %99, ptr addrspace(1) %98, i1 true) #5, !dbg !52
  ret void, !dbg !53
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cedccblubbvrn5uceadt25puqc3lg5gprg7ztcmtexv7wzmn5lyx.py", directory: "inductor_cache/ed")
!4 = !{ptr @triton_per_fused_add_mean_pow_repeat_sqrt_sub_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_mean_pow_repeat_sqrt_sub_0, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_mean_pow_repeat_sqrt_sub_0", linkageName: "triton_per_fused_add_mean_pow_repeat_sqrt_sub_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 26, column: 34, scope: !7)
!11 = !DILocation(line: 32, column: 30, scope: !7)
!12 = !DILocation(line: 32, column: 35, scope: !7)
!13 = !DILocation(line: 33, column: 35, scope: !7)
!14 = !DILocation(line: 33, column: 30, scope: !7)
!15 = !DILocation(line: 33, column: 40, scope: !7)
!16 = !DILocation(line: 34, column: 36, scope: !7)
!17 = !DILocation(line: 34, column: 30, scope: !7)
!18 = !DILocation(line: 34, column: 41, scope: !7)
!19 = !DILocation(line: 35, column: 36, scope: !7)
!20 = !DILocation(line: 35, column: 30, scope: !7)
!21 = !DILocation(line: 35, column: 41, scope: !7)
!22 = !DILocation(line: 36, column: 18, scope: !7)
!23 = !DILocation(line: 37, column: 18, scope: !7)
!24 = !DILocation(line: 38, column: 18, scope: !7)
!25 = !DILocation(line: 40, column: 18, scope: !7)
!26 = !DILocation(line: 41, column: 18, scope: !7)
!27 = !DILocation(line: 42, column: 19, scope: !7)
!28 = !DILocation(line: 43, column: 19, scope: !7)
!29 = !DILocation(line: 44, column: 20, scope: !7)
!30 = !DILocation(line: 45, column: 20, scope: !7)
!31 = !DILocation(line: 46, column: 19, scope: !7)
!32 = !DILocation(line: 47, column: 20, scope: !7)
!33 = !DILocation(line: 48, column: 20, scope: !7)
!34 = !DILocation(line: 49, column: 19, scope: !7)
!35 = !DILocation(line: 50, column: 20, scope: !7)
!36 = !DILocation(line: 51, column: 20, scope: !7)
!37 = !DILocation(line: 52, column: 20, scope: !7)
!38 = !DILocation(line: 54, column: 20, scope: !7)
!39 = !DILocation(line: 55, column: 27, scope: !7)
!40 = !DILocation(line: 31, column: 19, scope: !7)
!41 = !DILocation(line: 30, column: 19, scope: !7)
!42 = !DILocation(line: 267, column: 36, scope: !43, inlinedAt: !45)
!43 = distinct !DILexicalBlockFile(scope: !7, file: !44, discriminator: 0)
!44 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!45 = !DILocation(line: 57, column: 26, scope: !7)
!46 = !DILocation(line: 256, column: 15, scope: !47, inlinedAt: !45)
!47 = distinct !DILexicalBlockFile(scope: !43, file: !44, discriminator: 0)
!48 = !DILocation(line: 59, column: 20, scope: !7)
!49 = !DILocation(line: 62, column: 49, scope: !7)
!50 = !DILocation(line: 62, column: 46, scope: !7)
!51 = !DILocation(line: 62, column: 25, scope: !7)
!52 = !DILocation(line: 62, column: 80, scope: !7)
!53 = !DILocation(line: 62, column: 4, scope: !7)
