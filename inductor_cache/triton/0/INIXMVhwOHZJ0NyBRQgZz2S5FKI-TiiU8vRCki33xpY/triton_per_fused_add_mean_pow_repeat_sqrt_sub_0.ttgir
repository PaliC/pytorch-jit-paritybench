#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 2], order = [1, 0]}>
#loc = loc("inductor_cache/ed/cedccblubbvrn5uceadt25puqc3lg5gprg7ztcmtexv7wzmn5lyx.py":19:0)
#loc1 = loc(unknown)
#loc35 = loc("inductor_cache/ed/cedccblubbvrn5uceadt25puqc3lg5gprg7ztcmtexv7wzmn5lyx.py":57:26)
#loc45 = loc(callsite(#loc1 at #loc35))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 2 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_per_fused_add_mean_pow_repeat_sqrt_sub_0(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/ed/cedccblubbvrn5uceadt25puqc3lg5gprg7ztcmtexv7wzmn5lyx.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/ed/cedccblubbvrn5uceadt25puqc3lg5gprg7ztcmtexv7wzmn5lyx.py":19:0), %arg2: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/ed/cedccblubbvrn5uceadt25puqc3lg5gprg7ztcmtexv7wzmn5lyx.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<16> : tensor<1x64xi32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<64> : tensor<1x64xi32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<128> : tensor<1x64xi32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<192> : tensor<1x64xi32, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<4.000000e+00> : tensor<1x64xf32, #blocked> loc(#loc1)
    %cst_4 = arith.constant dense<9.99999993E-9> : tensor<1x64xf32, #blocked> loc(#loc1)
    %cst_5 = arith.constant dense<80> : tensor<1x64xi32, #blocked> loc(#loc1)
    %cst_6 = arith.constant dense<6.400000e+01> : tensor<1x1xf32, #blocked> loc(#loc1)
    %0 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc2)
    %1 = tt.expand_dims %0 {axis = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x64xi32, #blocked> loc(#loc2)
    %2 = arith.remsi %1, %cst : tensor<1x64xi32, #blocked> loc(#loc3)
    %3 = arith.divsi %1, %cst : tensor<1x64xi32, #blocked> loc(#loc4)
    %4 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc5)
    %5 = tt.addptr %4, %1 : tensor<1x64x!tt.ptr<f32>, #blocked>, tensor<1x64xi32, #blocked> loc(#loc5)
    %6 = tt.load %5 : tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc6)
    %7 = arith.addi %1, %cst_0 : tensor<1x64xi32, #blocked> loc(#loc7)
    %8 = tt.addptr %4, %7 : tensor<1x64x!tt.ptr<f32>, #blocked>, tensor<1x64xi32, #blocked> loc(#loc8)
    %9 = tt.load %8 : tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc9)
    %10 = arith.addi %1, %cst_1 : tensor<1x64xi32, #blocked> loc(#loc10)
    %11 = tt.addptr %4, %10 : tensor<1x64x!tt.ptr<f32>, #blocked>, tensor<1x64xi32, #blocked> loc(#loc11)
    %12 = tt.load %11 : tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc12)
    %13 = arith.addi %1, %cst_2 : tensor<1x64xi32, #blocked> loc(#loc13)
    %14 = tt.addptr %4, %13 : tensor<1x64x!tt.ptr<f32>, #blocked>, tensor<1x64xi32, #blocked> loc(#loc14)
    %15 = tt.load %14 : tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc15)
    %16 = arith.addf %6, %9 : tensor<1x64xf32, #blocked> loc(#loc16)
    %17 = arith.addf %16, %12 : tensor<1x64xf32, #blocked> loc(#loc17)
    %18 = arith.addf %17, %15 : tensor<1x64xf32, #blocked> loc(#loc18)
    %19 = arith.divf %18, %cst_3 : tensor<1x64xf32, #blocked> loc(#loc19)
    %20 = arith.subf %6, %19 : tensor<1x64xf32, #blocked> loc(#loc20)
    %21 = arith.mulf %20, %20 : tensor<1x64xf32, #blocked> loc(#loc21)
    %22 = arith.subf %9, %19 : tensor<1x64xf32, #blocked> loc(#loc22)
    %23 = arith.mulf %22, %22 : tensor<1x64xf32, #blocked> loc(#loc23)
    %24 = arith.addf %21, %23 : tensor<1x64xf32, #blocked> loc(#loc24)
    %25 = arith.subf %12, %19 : tensor<1x64xf32, #blocked> loc(#loc25)
    %26 = arith.mulf %25, %25 : tensor<1x64xf32, #blocked> loc(#loc26)
    %27 = arith.addf %24, %26 : tensor<1x64xf32, #blocked> loc(#loc27)
    %28 = arith.subf %15, %19 : tensor<1x64xf32, #blocked> loc(#loc28)
    %29 = arith.mulf %28, %28 : tensor<1x64xf32, #blocked> loc(#loc29)
    %30 = arith.addf %27, %29 : tensor<1x64xf32, #blocked> loc(#loc30)
    %31 = arith.divf %30, %cst_3 : tensor<1x64xf32, #blocked> loc(#loc31)
    %32 = arith.addf %31, %cst_4 : tensor<1x64xf32, #blocked> loc(#loc32)
    %33 = tt.extern_elementwise %32 {libname = "", libpath = "", pure = true, symbol = "__nv_sqrtf"} : (tensor<1x64xf32, #blocked>) -> tensor<1x64xf32, #blocked> loc(#loc33)
    %34 = "tt.reduce"(%33) <{axis = 1 : i32}> ({
    ^bb0(%arg3: f32 loc(callsite(#loc1 at #loc35)), %arg4: f32 loc(callsite(#loc1 at #loc35))):
      %42 = arith.addf %arg3, %arg4 : f32 loc(#loc47)
      tt.reduce.return %42 : f32 loc(#loc44)
    }) : (tensor<1x64xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc44)
    %35 = tt.expand_dims %34 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1x1xf32, #blocked> loc(#loc37)
    %36 = arith.divf %35, %cst_6 : tensor<1x1xf32, #blocked> loc(#loc38)
    %37 = arith.muli %3, %cst_5 : tensor<1x64xi32, #blocked> loc(#loc39)
    %38 = arith.addi %2, %37 : tensor<1x64xi32, #blocked> loc(#loc40)
    %39 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc41)
    %40 = tt.addptr %39, %38 : tensor<1x64x!tt.ptr<f32>, #blocked>, tensor<1x64xi32, #blocked> loc(#loc41)
    %41 = tt.broadcast %36 : tensor<1x1xf32, #blocked> -> tensor<1x64xf32, #blocked> loc(#loc42)
    tt.store %40, %41 : tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc42)
    tt.return loc(#loc43)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/ed/cedccblubbvrn5uceadt25puqc3lg5gprg7ztcmtexv7wzmn5lyx.py":26:34)
#loc3 = loc("inductor_cache/ed/cedccblubbvrn5uceadt25puqc3lg5gprg7ztcmtexv7wzmn5lyx.py":30:19)
#loc4 = loc("inductor_cache/ed/cedccblubbvrn5uceadt25puqc3lg5gprg7ztcmtexv7wzmn5lyx.py":31:19)
#loc5 = loc("inductor_cache/ed/cedccblubbvrn5uceadt25puqc3lg5gprg7ztcmtexv7wzmn5lyx.py":32:30)
#loc6 = loc("inductor_cache/ed/cedccblubbvrn5uceadt25puqc3lg5gprg7ztcmtexv7wzmn5lyx.py":32:35)
#loc7 = loc("inductor_cache/ed/cedccblubbvrn5uceadt25puqc3lg5gprg7ztcmtexv7wzmn5lyx.py":33:35)
#loc8 = loc("inductor_cache/ed/cedccblubbvrn5uceadt25puqc3lg5gprg7ztcmtexv7wzmn5lyx.py":33:30)
#loc9 = loc("inductor_cache/ed/cedccblubbvrn5uceadt25puqc3lg5gprg7ztcmtexv7wzmn5lyx.py":33:40)
#loc10 = loc("inductor_cache/ed/cedccblubbvrn5uceadt25puqc3lg5gprg7ztcmtexv7wzmn5lyx.py":34:36)
#loc11 = loc("inductor_cache/ed/cedccblubbvrn5uceadt25puqc3lg5gprg7ztcmtexv7wzmn5lyx.py":34:30)
#loc12 = loc("inductor_cache/ed/cedccblubbvrn5uceadt25puqc3lg5gprg7ztcmtexv7wzmn5lyx.py":34:41)
#loc13 = loc("inductor_cache/ed/cedccblubbvrn5uceadt25puqc3lg5gprg7ztcmtexv7wzmn5lyx.py":35:36)
#loc14 = loc("inductor_cache/ed/cedccblubbvrn5uceadt25puqc3lg5gprg7ztcmtexv7wzmn5lyx.py":35:30)
#loc15 = loc("inductor_cache/ed/cedccblubbvrn5uceadt25puqc3lg5gprg7ztcmtexv7wzmn5lyx.py":35:41)
#loc16 = loc("inductor_cache/ed/cedccblubbvrn5uceadt25puqc3lg5gprg7ztcmtexv7wzmn5lyx.py":36:18)
#loc17 = loc("inductor_cache/ed/cedccblubbvrn5uceadt25puqc3lg5gprg7ztcmtexv7wzmn5lyx.py":37:18)
#loc18 = loc("inductor_cache/ed/cedccblubbvrn5uceadt25puqc3lg5gprg7ztcmtexv7wzmn5lyx.py":38:18)
#loc19 = loc("inductor_cache/ed/cedccblubbvrn5uceadt25puqc3lg5gprg7ztcmtexv7wzmn5lyx.py":40:18)
#loc20 = loc("inductor_cache/ed/cedccblubbvrn5uceadt25puqc3lg5gprg7ztcmtexv7wzmn5lyx.py":41:18)
#loc21 = loc("inductor_cache/ed/cedccblubbvrn5uceadt25puqc3lg5gprg7ztcmtexv7wzmn5lyx.py":42:19)
#loc22 = loc("inductor_cache/ed/cedccblubbvrn5uceadt25puqc3lg5gprg7ztcmtexv7wzmn5lyx.py":43:19)
#loc23 = loc("inductor_cache/ed/cedccblubbvrn5uceadt25puqc3lg5gprg7ztcmtexv7wzmn5lyx.py":44:20)
#loc24 = loc("inductor_cache/ed/cedccblubbvrn5uceadt25puqc3lg5gprg7ztcmtexv7wzmn5lyx.py":45:20)
#loc25 = loc("inductor_cache/ed/cedccblubbvrn5uceadt25puqc3lg5gprg7ztcmtexv7wzmn5lyx.py":46:19)
#loc26 = loc("inductor_cache/ed/cedccblubbvrn5uceadt25puqc3lg5gprg7ztcmtexv7wzmn5lyx.py":47:20)
#loc27 = loc("inductor_cache/ed/cedccblubbvrn5uceadt25puqc3lg5gprg7ztcmtexv7wzmn5lyx.py":48:20)
#loc28 = loc("inductor_cache/ed/cedccblubbvrn5uceadt25puqc3lg5gprg7ztcmtexv7wzmn5lyx.py":49:19)
#loc29 = loc("inductor_cache/ed/cedccblubbvrn5uceadt25puqc3lg5gprg7ztcmtexv7wzmn5lyx.py":50:20)
#loc30 = loc("inductor_cache/ed/cedccblubbvrn5uceadt25puqc3lg5gprg7ztcmtexv7wzmn5lyx.py":51:20)
#loc31 = loc("inductor_cache/ed/cedccblubbvrn5uceadt25puqc3lg5gprg7ztcmtexv7wzmn5lyx.py":52:20)
#loc32 = loc("inductor_cache/ed/cedccblubbvrn5uceadt25puqc3lg5gprg7ztcmtexv7wzmn5lyx.py":54:20)
#loc33 = loc("inductor_cache/ed/cedccblubbvrn5uceadt25puqc3lg5gprg7ztcmtexv7wzmn5lyx.py":55:27)
#loc34 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc36 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc37 = loc("inductor_cache/ed/cedccblubbvrn5uceadt25puqc3lg5gprg7ztcmtexv7wzmn5lyx.py":57:29)
#loc38 = loc("inductor_cache/ed/cedccblubbvrn5uceadt25puqc3lg5gprg7ztcmtexv7wzmn5lyx.py":59:20)
#loc39 = loc("inductor_cache/ed/cedccblubbvrn5uceadt25puqc3lg5gprg7ztcmtexv7wzmn5lyx.py":62:49)
#loc40 = loc("inductor_cache/ed/cedccblubbvrn5uceadt25puqc3lg5gprg7ztcmtexv7wzmn5lyx.py":62:46)
#loc41 = loc("inductor_cache/ed/cedccblubbvrn5uceadt25puqc3lg5gprg7ztcmtexv7wzmn5lyx.py":62:25)
#loc42 = loc("inductor_cache/ed/cedccblubbvrn5uceadt25puqc3lg5gprg7ztcmtexv7wzmn5lyx.py":62:80)
#loc43 = loc("inductor_cache/ed/cedccblubbvrn5uceadt25puqc3lg5gprg7ztcmtexv7wzmn5lyx.py":62:4)
#loc44 = loc(callsite(#loc34 at #loc35))
#loc46 = loc(callsite(#loc36 at #loc34))
#loc47 = loc(callsite(#loc46 at #loc35))
