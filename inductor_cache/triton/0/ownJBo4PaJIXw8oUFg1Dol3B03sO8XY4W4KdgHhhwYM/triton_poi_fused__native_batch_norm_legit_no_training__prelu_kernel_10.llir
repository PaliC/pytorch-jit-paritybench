; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_10(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %11 = shl i32 %10, 4, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = lshr i32 %12, 6, !dbg !12
  %.lobit = and i32 %13, 1, !dbg !12
  %14 = or disjoint i32 %.lobit, 2, !dbg !12
  %15 = or disjoint i32 %.lobit, 4, !dbg !12
  %16 = or disjoint i32 %.lobit, 6, !dbg !12
  %17 = or disjoint i32 %.lobit, 8, !dbg !12
  %18 = or disjoint i32 %.lobit, 10, !dbg !12
  %19 = or disjoint i32 %.lobit, 12, !dbg !12
  %20 = or disjoint i32 %.lobit, 14, !dbg !12
  %21 = or disjoint i32 %11, %.lobit, !dbg !13
  %22 = or disjoint i32 %11, %14, !dbg !13
  %23 = or disjoint i32 %11, %15, !dbg !13
  %24 = or disjoint i32 %11, %16, !dbg !13
  %25 = or disjoint i32 %11, %17, !dbg !13
  %26 = or disjoint i32 %11, %18, !dbg !13
  %27 = or disjoint i32 %11, %19, !dbg !13
  %28 = or disjoint i32 %11, %20, !dbg !13
  %29 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %30 = shl i32 %29, 6, !dbg !15
  %31 = and i32 %12, 63, !dbg !16
  %32 = or disjoint i32 %30, %31, !dbg !17
  %33 = icmp slt i32 %32, 35, !dbg !18
  %34 = mul i32 %21, 35, !dbg !19
  %35 = mul i32 %22, 35, !dbg !19
  %36 = mul i32 %23, 35, !dbg !19
  %37 = mul i32 %24, 35, !dbg !19
  %38 = mul i32 %25, 35, !dbg !19
  %39 = mul i32 %26, 35, !dbg !19
  %40 = mul i32 %27, 35, !dbg !19
  %41 = mul i32 %28, 35, !dbg !19
  %42 = add i32 %32, %34, !dbg !20
  %43 = add i32 %32, %35, !dbg !20
  %44 = add i32 %32, %36, !dbg !20
  %45 = add i32 %32, %37, !dbg !20
  %46 = add i32 %32, %38, !dbg !20
  %47 = add i32 %32, %39, !dbg !20
  %48 = add i32 %32, %40, !dbg !20
  %49 = add i32 %32, %41, !dbg !20
  %50 = sext i32 %42 to i64, !dbg !21
  %51 = getelementptr float, ptr addrspace(1) %0, i64 %50, !dbg !21
  %52 = sext i32 %43 to i64, !dbg !21
  %53 = getelementptr float, ptr addrspace(1) %0, i64 %52, !dbg !21
  %54 = sext i32 %44 to i64, !dbg !21
  %55 = getelementptr float, ptr addrspace(1) %0, i64 %54, !dbg !21
  %56 = sext i32 %45 to i64, !dbg !21
  %57 = getelementptr float, ptr addrspace(1) %0, i64 %56, !dbg !21
  %58 = sext i32 %46 to i64, !dbg !21
  %59 = getelementptr float, ptr addrspace(1) %0, i64 %58, !dbg !21
  %60 = sext i32 %47 to i64, !dbg !21
  %61 = getelementptr float, ptr addrspace(1) %0, i64 %60, !dbg !21
  %62 = sext i32 %48 to i64, !dbg !21
  %63 = getelementptr float, ptr addrspace(1) %0, i64 %62, !dbg !21
  %64 = sext i32 %49 to i64, !dbg !21
  %65 = getelementptr float, ptr addrspace(1) %0, i64 %64, !dbg !21
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 %33) #4, !dbg !22
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 %33) #4, !dbg !22
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 %33) #4, !dbg !22
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 %33) #4, !dbg !22
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 %33) #4, !dbg !22
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 %33) #4, !dbg !22
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 %33) #4, !dbg !22
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 %33) #4, !dbg !22
  %74 = sext i32 %32 to i64, !dbg !23
  %75 = getelementptr float, ptr addrspace(1) %1, i64 %74, !dbg !23
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 %33) #4, !dbg !24
  %77 = getelementptr float, ptr addrspace(1) %2, i64 %74, !dbg !25
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 %33) #4, !dbg !26
  %79 = bitcast i32 %78 to float, !dbg !26
  %80 = getelementptr float, ptr addrspace(1) %3, i64 %74, !dbg !27
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %80, i1 %33) #4, !dbg !28
  %82 = getelementptr float, ptr addrspace(1) %4, i64 %74, !dbg !29
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 %33) #4, !dbg !30
  %84 = getelementptr float, ptr addrspace(1) %5, i64 %74, !dbg !31
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 %33) #4, !dbg !32
  %86 = fadd float %79, 0x3EE4F8B580000000, !dbg !33
  %87 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not.i = icmp eq i32 %87, 0, !dbg !34
  %88 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !34
  %.not1.i = icmp eq i32 %88, 0, !dbg !34
  br i1 %.not.i, label %94, label %89, !dbg !34

89:                                               ; preds = %9
  br i1 %.not1.i, label %92, label %90, !dbg !34

90:                                               ; preds = %89
  %91 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %86) #4, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

92:                                               ; preds = %89
  %93 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %86) #4, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

94:                                               ; preds = %9
  br i1 %.not1.i, label %97, label %95, !dbg !34

95:                                               ; preds = %94
  %96 = tail call float @llvm.nvvm.sqrt.rn.f(float %86) #4, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

97:                                               ; preds = %94
  %98 = tail call float @llvm.nvvm.sqrt.approx.f(float %86) #4, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

__nv_sqrtf.exit:                                  ; preds = %90, %92, %95, %97
  %.0.i = phi float [ %91, %90 ], [ %93, %92 ], [ %96, %95 ], [ %98, %97 ], !dbg !34
  %99 = insertelement <8 x i32> poison, i32 %73, i64 0, !dbg !22
  %100 = insertelement <8 x i32> %99, i32 %72, i64 1, !dbg !22
  %101 = insertelement <8 x i32> %100, i32 %71, i64 2, !dbg !22
  %102 = insertelement <8 x i32> %101, i32 %70, i64 3, !dbg !22
  %103 = insertelement <8 x i32> %102, i32 %69, i64 4, !dbg !22
  %104 = insertelement <8 x i32> %103, i32 %68, i64 5, !dbg !22
  %105 = insertelement <8 x i32> %104, i32 %67, i64 6, !dbg !22
  %106 = insertelement <8 x i32> %105, i32 %66, i64 7, !dbg !22
  %107 = bitcast <8 x i32> %106 to <8 x float>, !dbg !22
  %108 = bitcast i32 %85 to float, !dbg !32
  %109 = shl i32 %12, 2, !dbg !12
  %110 = and i32 %109, 12, !dbg !12
  %111 = or disjoint i32 %11, %110, !dbg !13
  %.frozen = freeze i32 %111, !dbg !35
  %112 = sdiv i32 %.frozen, 1024, !dbg !35
  %113 = mul i32 %112, 1024, !dbg !36
  %.decomposed = sub i32 %.frozen, %113, !dbg !36
  %114 = lshr i32 %12, 2, !dbg !16
  %115 = and i32 %114, 31, !dbg !16
  %116 = or disjoint i32 %115, %30, !dbg !17
  %117 = or disjoint i32 %116, 32, !dbg !17
  %118 = icmp slt i32 %117, 35, !dbg !18
  %119 = icmp slt i32 %116, 35, !dbg !18
  %120 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !37
  %121 = insertelement <8 x i32> poison, i32 %76, i64 0, !dbg !38
  %122 = bitcast <8 x i32> %121 to <8 x float>, !dbg !38
  %123 = shufflevector <8 x float> %122, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !38
  %124 = fsub <8 x float> %107, %123, !dbg !38
  %125 = insertelement <8 x float> poison, float %120, i64 0, !dbg !39
  %126 = shufflevector <8 x float> %125, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !39
  %127 = fmul <8 x float> %124, %126, !dbg !39
  %128 = insertelement <8 x i32> poison, i32 %81, i64 0, !dbg !40
  %129 = bitcast <8 x i32> %128 to <8 x float>, !dbg !40
  %130 = shufflevector <8 x float> %129, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !40
  %131 = fmul <8 x float> %127, %130, !dbg !40
  %132 = insertelement <8 x i32> poison, i32 %83, i64 0, !dbg !41
  %133 = bitcast <8 x i32> %132 to <8 x float>, !dbg !41
  %134 = shufflevector <8 x float> %133, <8 x float> poison, <8 x i32> zeroinitializer, !dbg !41
  %135 = fadd <8 x float> %131, %134, !dbg !41
  %136 = fcmp ogt <8 x float> %135, zeroinitializer, !dbg !42
  %137 = extractelement <8 x float> %135, i64 7, !dbg !43
  %138 = fmul float %137, %108, !dbg !44
  %139 = extractelement <8 x float> %135, i64 6, !dbg !43
  %140 = fmul float %139, %108, !dbg !44
  %141 = extractelement <8 x float> %135, i64 5, !dbg !43
  %142 = fmul float %141, %108, !dbg !44
  %143 = extractelement <8 x float> %135, i64 4, !dbg !43
  %144 = fmul float %143, %108, !dbg !44
  %145 = extractelement <8 x float> %135, i64 3, !dbg !43
  %146 = fmul float %145, %108, !dbg !44
  %147 = extractelement <8 x float> %135, i64 2, !dbg !43
  %148 = fmul float %147, %108, !dbg !44
  %149 = extractelement <8 x float> %135, i64 1, !dbg !43
  %150 = fmul float %149, %108, !dbg !44
  %151 = extractelement <8 x float> %135, i64 0, !dbg !43
  %152 = fmul float %151, %108, !dbg !44
  %153 = extractelement <8 x i1> %136, i64 7, !dbg !43
  %154 = select i1 %153, float %137, float %138, !dbg !43
  %155 = extractelement <8 x i1> %136, i64 6, !dbg !43
  %156 = select i1 %155, float %139, float %140, !dbg !43
  %157 = extractelement <8 x i1> %136, i64 5, !dbg !43
  %158 = select i1 %157, float %141, float %142, !dbg !43
  %159 = extractelement <8 x i1> %136, i64 4, !dbg !43
  %160 = select i1 %159, float %143, float %144, !dbg !43
  %161 = extractelement <8 x i1> %136, i64 3, !dbg !43
  %162 = select i1 %161, float %145, float %146, !dbg !43
  %163 = extractelement <8 x i1> %136, i64 2, !dbg !43
  %164 = select i1 %163, float %147, float %148, !dbg !43
  %165 = extractelement <8 x i1> %136, i64 1, !dbg !43
  %166 = select i1 %165, float %149, float %150, !dbg !43
  %167 = extractelement <8 x i1> %136, i64 0, !dbg !43
  %168 = select i1 %167, float %151, float %152, !dbg !43
  %169 = shl i32 %116, 10, !dbg !45
  %170 = shl i32 %117, 10, !dbg !45
  %171 = mul i32 %112, 35840, !dbg !46
  %172 = add i32 %171, %.decomposed, !dbg !47
  %173 = add i32 %172, %169, !dbg !48
  %174 = add i32 %172, %170, !dbg !48
  %175 = sext i32 %173 to i64, !dbg !49
  %176 = getelementptr float, ptr addrspace(1) %6, i64 %175, !dbg !49
  %177 = sext i32 %174 to i64, !dbg !49
  %178 = getelementptr float, ptr addrspace(1) %6, i64 %177, !dbg !49
  %179 = shl i32 %12, 4, !dbg !50
  %180 = and i32 %179, 1008, !dbg !50
  %181 = or disjoint i32 %180, %.lobit, !dbg !50
  %182 = and i32 %109, 508, !dbg !50
  %183 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %180, !dbg !50
  %184 = getelementptr float, ptr addrspace(3) %183, i32 %181, !dbg !50
  %185 = bitcast float %154 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %184, <1 x i32> %185, i1 true) #4, !dbg !50
  %186 = or disjoint i32 %181, 2, !dbg !50
  %187 = getelementptr float, ptr addrspace(3) %183, i32 %186, !dbg !50
  %188 = bitcast float %156 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %187, <1 x i32> %188, i1 true) #4, !dbg !50
  %189 = or disjoint i32 %181, 4, !dbg !50
  %190 = getelementptr float, ptr addrspace(3) %183, i32 %189, !dbg !50
  %191 = bitcast float %158 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %190, <1 x i32> %191, i1 true) #4, !dbg !50
  %192 = or disjoint i32 %181, 6, !dbg !50
  %193 = getelementptr float, ptr addrspace(3) %183, i32 %192, !dbg !50
  %194 = bitcast float %160 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %193, <1 x i32> %194, i1 true) #4, !dbg !50
  %195 = or disjoint i32 %181, 8, !dbg !50
  %196 = getelementptr float, ptr addrspace(3) %183, i32 %195, !dbg !50
  %197 = bitcast float %162 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %196, <1 x i32> %197, i1 true) #4, !dbg !50
  %198 = or disjoint i32 %181, 10, !dbg !50
  %199 = getelementptr float, ptr addrspace(3) %183, i32 %198, !dbg !50
  %200 = bitcast float %164 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %199, <1 x i32> %200, i1 true) #4, !dbg !50
  %201 = or disjoint i32 %181, 12, !dbg !50
  %202 = getelementptr float, ptr addrspace(3) %183, i32 %201, !dbg !50
  %203 = bitcast float %166 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %202, <1 x i32> %203, i1 true) #4, !dbg !50
  %204 = or disjoint i32 %181, 14, !dbg !50
  %205 = getelementptr float, ptr addrspace(3) %183, i32 %204, !dbg !50
  %206 = bitcast float %168 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %205, <1 x i32> %206, i1 true) #4, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %207 = and i32 %12, 124, !dbg !50
  %208 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %207, !dbg !50
  %209 = getelementptr inbounds float, ptr addrspace(3) %208, i32 %182, !dbg !50
  %210 = or disjoint i32 %182, 512, !dbg !50
  %211 = lshr exact i32 %210, 2, !dbg !50
  %212 = and i32 %211, 252, !dbg !50
  %213 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %212, !dbg !50
  %214 = getelementptr inbounds float, ptr addrspace(3) %213, i32 %210, !dbg !50
  %215 = load <4 x i32>, ptr addrspace(3) %214, align 16, !dbg !50
  %.extract = load i32, ptr addrspace(3) %209, align 16, !dbg !50
  %216 = getelementptr inbounds i8, ptr addrspace(3) %209, i32 4, !dbg !50
  %.extract12 = load i32, ptr addrspace(3) %216, align 4, !dbg !50
  %217 = getelementptr inbounds i8, ptr addrspace(3) %209, i32 8, !dbg !50
  %.extract13 = load i32, ptr addrspace(3) %217, align 8, !dbg !50
  %218 = getelementptr inbounds i8, ptr addrspace(3) %209, i32 12, !dbg !50
  %.extract14 = load i32, ptr addrspace(3) %218, align 4, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %176, i1 %119) #4, !dbg !50
  %.extract15 = extractelement <4 x i32> %215, i64 0, !dbg !50
  %.extract16 = extractelement <4 x i32> %215, i64 1, !dbg !50
  %.extract17 = extractelement <4 x i32> %215, i64 2, !dbg !50
  %.extract18 = extractelement <4 x i32> %215, i64 3, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract15, i32 %.extract16, i32 %.extract17, i32 %.extract18, ptr addrspace(1) %178, i1 %118) #4, !dbg !50
  ret void, !dbg !51
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cv2tiyu5u2jqqqxabyv3yfon7hzadfhjlrisoz7ysxwfjpozvxwj.py", directory: "inductor_cache/v2")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_10, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_10, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_10", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_10", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 32, column: 38, scope: !7)
!20 = !DILocation(line: 32, column: 35, scope: !7)
!21 = !DILocation(line: 32, column: 30, scope: !7)
!22 = !DILocation(line: 32, column: 43, scope: !7)
!23 = !DILocation(line: 33, column: 30, scope: !7)
!24 = !DILocation(line: 33, column: 35, scope: !7)
!25 = !DILocation(line: 34, column: 30, scope: !7)
!26 = !DILocation(line: 34, column: 35, scope: !7)
!27 = !DILocation(line: 35, column: 31, scope: !7)
!28 = !DILocation(line: 35, column: 36, scope: !7)
!29 = !DILocation(line: 36, column: 31, scope: !7)
!30 = !DILocation(line: 36, column: 36, scope: !7)
!31 = !DILocation(line: 37, column: 31, scope: !7)
!32 = !DILocation(line: 37, column: 36, scope: !7)
!33 = !DILocation(line: 40, column: 18, scope: !7)
!34 = !DILocation(line: 41, column: 26, scope: !7)
!35 = !DILocation(line: 31, column: 19, scope: !7)
!36 = !DILocation(line: 30, column: 19, scope: !7)
!37 = !DILocation(line: 43, column: 18, scope: !7)
!38 = !DILocation(line: 38, column: 18, scope: !7)
!39 = !DILocation(line: 46, column: 19, scope: !7)
!40 = !DILocation(line: 47, column: 20, scope: !7)
!41 = !DILocation(line: 48, column: 20, scope: !7)
!42 = !DILocation(line: 50, column: 20, scope: !7)
!43 = !DILocation(line: 52, column: 35, scope: !7)
!44 = !DILocation(line: 51, column: 20, scope: !7)
!45 = !DILocation(line: 53, column: 35, scope: !7)
!46 = !DILocation(line: 53, column: 46, scope: !7)
!47 = !DILocation(line: 53, column: 30, scope: !7)
!48 = !DILocation(line: 53, column: 40, scope: !7)
!49 = !DILocation(line: 53, column: 25, scope: !7)
!50 = !DILocation(line: 53, column: 58, scope: !7)
!51 = !DILocation(line: 53, column: 4, scope: !7)
