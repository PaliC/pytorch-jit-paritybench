; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_clone_convolution_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %11 = shl i32 %10, 6, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = lshr i32 %12, 4, !dbg !12
  %14 = and i32 %13, 15, !dbg !12
  %15 = or disjoint i32 %11, %14, !dbg !13
  %16 = or disjoint i32 %15, 16, !dbg !13
  %17 = or disjoint i32 %15, 32, !dbg !13
  %18 = icmp slt i32 %15, 40, !dbg !14
  %19 = icmp slt i32 %16, 40, !dbg !14
  %20 = icmp slt i32 %17, 40, !dbg !14
  %21 = icmp slt i32 %11, 0, !dbg !14
  %22 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %23 = shl i32 %22, 6, !dbg !16
  %24 = shl i32 %12, 2, !dbg !17
  %25 = and i32 %24, 60, !dbg !17
  %26 = or disjoint i32 %23, %25, !dbg !18
  %27 = icmp slt i32 %26, 128, !dbg !19
  %28 = shl i32 %15, 7, !dbg !20
  %29 = shl i32 %16, 7, !dbg !20
  %30 = shl i32 %17, 7, !dbg !20
  %31 = or disjoint i32 %28, 6144, !dbg !20
  %32 = add i32 %26, %28, !dbg !21
  %33 = add i32 %26, %29, !dbg !21
  %34 = add i32 %26, %30, !dbg !21
  %35 = add i32 %26, %31, !dbg !21
  %36 = sext i32 %32 to i64, !dbg !22
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !22
  %38 = sext i32 %33 to i64, !dbg !22
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !22
  %40 = sext i32 %34 to i64, !dbg !22
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !22
  %42 = sext i32 %35 to i64, !dbg !22
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !22
  %44 = and i1 %18, %27, !dbg !23
  %45 = and i1 %19, %27, !dbg !23
  %46 = and i1 %20, %27, !dbg !23
  %47 = and i1 %21, %27, !dbg !23
  %48 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %37, i1 %44) #4, !dbg !24
  %49 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %39, i1 %45) #4, !dbg !24
  %50 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %41, i1 %46) #4, !dbg !24
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %43, i1 %47) #4, !dbg !24
  %52 = sext i32 %26 to i64, !dbg !25
  %53 = getelementptr float, ptr addrspace(1) %1, i64 %52, !dbg !25
  %54 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %53, i1 %27) #4, !dbg !26
  %55 = getelementptr float, ptr addrspace(1) %2, i64 %52, !dbg !27
  %56 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %55, i1 %27) #4, !dbg !28
  %57 = getelementptr float, ptr addrspace(1) %3, i64 %52, !dbg !29
  %58 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %57, i1 %27) #4, !dbg !30
  %59 = extractvalue { i32, i32, i32, i32 } %58, 0, !dbg !30
  %60 = extractvalue { i32, i32, i32, i32 } %58, 1, !dbg !30
  %61 = extractvalue { i32, i32, i32, i32 } %58, 2, !dbg !30
  %62 = extractvalue { i32, i32, i32, i32 } %58, 3, !dbg !30
  %63 = bitcast i32 %59 to float, !dbg !30
  %64 = bitcast i32 %60 to float, !dbg !30
  %65 = bitcast i32 %61 to float, !dbg !30
  %66 = bitcast i32 %62 to float, !dbg !30
  %67 = getelementptr float, ptr addrspace(1) %4, i64 %52, !dbg !31
  %68 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %67, i1 %27) #4, !dbg !32
  %69 = getelementptr float, ptr addrspace(1) %5, i64 %52, !dbg !33
  %70 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %69, i1 %27) #4, !dbg !34
  %71 = fadd float %63, 0x3EE4F8B580000000, !dbg !35
  %72 = fadd float %64, 0x3EE4F8B580000000, !dbg !35
  %73 = fadd float %65, 0x3EE4F8B580000000, !dbg !35
  %74 = fadd float %66, 0x3EE4F8B580000000, !dbg !35
  %75 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i = icmp eq i32 %75, 0, !dbg !36
  %76 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i = icmp eq i32 %76, 0, !dbg !36
  br i1 %.not.i, label %82, label %77, !dbg !36

77:                                               ; preds = %9
  br i1 %.not1.i, label %80, label %78, !dbg !36

78:                                               ; preds = %77
  %79 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %71) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

80:                                               ; preds = %77
  %81 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %71) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

82:                                               ; preds = %9
  br i1 %.not1.i, label %85, label %83, !dbg !36

83:                                               ; preds = %82
  %84 = tail call float @llvm.nvvm.sqrt.rn.f(float %71) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

85:                                               ; preds = %82
  %86 = tail call float @llvm.nvvm.sqrt.approx.f(float %71) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

__nv_sqrtf.exit:                                  ; preds = %78, %80, %83, %85
  %.0.i = phi float [ %79, %78 ], [ %81, %80 ], [ %84, %83 ], [ %86, %85 ], !dbg !36
  %87 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i33 = icmp eq i32 %87, 0, !dbg !36
  %88 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i36 = icmp eq i32 %88, 0, !dbg !36
  br i1 %.not.i33, label %94, label %89, !dbg !36

89:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i36, label %92, label %90, !dbg !36

90:                                               ; preds = %89
  %91 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %72) #4, !dbg !36
  br label %__nv_sqrtf.exit37, !dbg !36

92:                                               ; preds = %89
  %93 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %72) #4, !dbg !36
  br label %__nv_sqrtf.exit37, !dbg !36

94:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i36, label %97, label %95, !dbg !36

95:                                               ; preds = %94
  %96 = tail call float @llvm.nvvm.sqrt.rn.f(float %72) #4, !dbg !36
  br label %__nv_sqrtf.exit37, !dbg !36

97:                                               ; preds = %94
  %98 = tail call float @llvm.nvvm.sqrt.approx.f(float %72) #4, !dbg !36
  br label %__nv_sqrtf.exit37, !dbg !36

__nv_sqrtf.exit37:                                ; preds = %90, %92, %95, %97
  %.0.i35 = phi float [ %91, %90 ], [ %93, %92 ], [ %96, %95 ], [ %98, %97 ], !dbg !36
  %99 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i38 = icmp eq i32 %99, 0, !dbg !36
  %100 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i41 = icmp eq i32 %100, 0, !dbg !36
  br i1 %.not.i38, label %106, label %101, !dbg !36

101:                                              ; preds = %__nv_sqrtf.exit37
  br i1 %.not1.i41, label %104, label %102, !dbg !36

102:                                              ; preds = %101
  %103 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %73) #4, !dbg !36
  br label %__nv_sqrtf.exit42, !dbg !36

104:                                              ; preds = %101
  %105 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %73) #4, !dbg !36
  br label %__nv_sqrtf.exit42, !dbg !36

106:                                              ; preds = %__nv_sqrtf.exit37
  br i1 %.not1.i41, label %109, label %107, !dbg !36

107:                                              ; preds = %106
  %108 = tail call float @llvm.nvvm.sqrt.rn.f(float %73) #4, !dbg !36
  br label %__nv_sqrtf.exit42, !dbg !36

109:                                              ; preds = %106
  %110 = tail call float @llvm.nvvm.sqrt.approx.f(float %73) #4, !dbg !36
  br label %__nv_sqrtf.exit42, !dbg !36

__nv_sqrtf.exit42:                                ; preds = %102, %104, %107, %109
  %.0.i40 = phi float [ %103, %102 ], [ %105, %104 ], [ %108, %107 ], [ %110, %109 ], !dbg !36
  %111 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i43 = icmp eq i32 %111, 0, !dbg !36
  %112 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i46 = icmp eq i32 %112, 0, !dbg !36
  br i1 %.not.i43, label %118, label %113, !dbg !36

113:                                              ; preds = %__nv_sqrtf.exit42
  br i1 %.not1.i46, label %116, label %114, !dbg !36

114:                                              ; preds = %113
  %115 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %74) #4, !dbg !36
  br label %__nv_sqrtf.exit47, !dbg !36

116:                                              ; preds = %113
  %117 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %74) #4, !dbg !36
  br label %__nv_sqrtf.exit47, !dbg !36

118:                                              ; preds = %__nv_sqrtf.exit42
  br i1 %.not1.i46, label %121, label %119, !dbg !36

119:                                              ; preds = %118
  %120 = tail call float @llvm.nvvm.sqrt.rn.f(float %74) #4, !dbg !36
  br label %__nv_sqrtf.exit47, !dbg !36

121:                                              ; preds = %118
  %122 = tail call float @llvm.nvvm.sqrt.approx.f(float %74) #4, !dbg !36
  br label %__nv_sqrtf.exit47, !dbg !36

__nv_sqrtf.exit47:                                ; preds = %114, %116, %119, %121
  %.0.i45 = phi float [ %115, %114 ], [ %117, %116 ], [ %120, %119 ], [ %122, %121 ], !dbg !36
  %123 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !24
  %124 = extractvalue { i32, i32, i32, i32 } %54, 3, !dbg !26
  %125 = extractvalue { i32, i32, i32, i32 } %56, 3, !dbg !28
  %126 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !24
  %127 = extractvalue { i32, i32, i32, i32 } %54, 2, !dbg !26
  %128 = extractvalue { i32, i32, i32, i32 } %56, 2, !dbg !28
  %129 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !24
  %130 = extractvalue { i32, i32, i32, i32 } %54, 1, !dbg !26
  %131 = extractvalue { i32, i32, i32, i32 } %56, 1, !dbg !28
  %132 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !24
  %133 = extractvalue { i32, i32, i32, i32 } %54, 0, !dbg !26
  %134 = extractvalue { i32, i32, i32, i32 } %56, 0, !dbg !28
  %135 = extractvalue { i32, i32, i32, i32 } %50, 3, !dbg !24
  %136 = extractvalue { i32, i32, i32, i32 } %50, 2, !dbg !24
  %137 = extractvalue { i32, i32, i32, i32 } %50, 1, !dbg !24
  %138 = extractvalue { i32, i32, i32, i32 } %50, 0, !dbg !24
  %139 = extractvalue { i32, i32, i32, i32 } %49, 3, !dbg !24
  %140 = extractvalue { i32, i32, i32, i32 } %49, 2, !dbg !24
  %141 = extractvalue { i32, i32, i32, i32 } %49, 1, !dbg !24
  %142 = extractvalue { i32, i32, i32, i32 } %49, 0, !dbg !24
  %143 = extractvalue { i32, i32, i32, i32 } %48, 3, !dbg !24
  %144 = extractvalue { i32, i32, i32, i32 } %48, 2, !dbg !24
  %145 = extractvalue { i32, i32, i32, i32 } %48, 1, !dbg !24
  %146 = extractvalue { i32, i32, i32, i32 } %48, 0, !dbg !24
  %147 = extractvalue { i32, i32, i32, i32 } %70, 3, !dbg !34
  %148 = extractvalue { i32, i32, i32, i32 } %70, 2, !dbg !34
  %149 = extractvalue { i32, i32, i32, i32 } %70, 1, !dbg !34
  %150 = extractvalue { i32, i32, i32, i32 } %70, 0, !dbg !34
  %151 = extractvalue { i32, i32, i32, i32 } %68, 3, !dbg !32
  %152 = extractvalue { i32, i32, i32, i32 } %68, 2, !dbg !32
  %153 = extractvalue { i32, i32, i32, i32 } %68, 1, !dbg !32
  %154 = extractvalue { i32, i32, i32, i32 } %68, 0, !dbg !32
  %155 = lshr i32 %12, 5, !dbg !17
  %156 = and i32 %155, 7, !dbg !17
  %157 = or disjoint i32 %156, %23, !dbg !18
  %158 = or disjoint i32 %157, 56, !dbg !18
  %159 = icmp slt i32 %158, 128, !dbg !19
  %160 = shl i32 %12, 1, !dbg !12
  %161 = and i32 %160, 62, !dbg !12
  %162 = or disjoint i32 %11, %161, !dbg !13
  %163 = icmp slt i32 %162, 40, !dbg !14
  %164 = and i1 %163, %159, !dbg !23
  %165 = or disjoint i32 %157, 48, !dbg !18
  %166 = icmp slt i32 %165, 128, !dbg !19
  %167 = and i1 %163, %166, !dbg !23
  %168 = or disjoint i32 %157, 40, !dbg !18
  %169 = icmp slt i32 %168, 128, !dbg !19
  %170 = and i1 %163, %169, !dbg !23
  %171 = or disjoint i32 %157, 32, !dbg !18
  %172 = icmp slt i32 %171, 128, !dbg !19
  %173 = and i1 %163, %172, !dbg !23
  %174 = or disjoint i32 %157, 24, !dbg !18
  %175 = icmp slt i32 %174, 128, !dbg !19
  %176 = and i1 %163, %175, !dbg !23
  %177 = or disjoint i32 %157, 16, !dbg !18
  %178 = icmp slt i32 %177, 128, !dbg !19
  %179 = and i1 %163, %178, !dbg !23
  %180 = or disjoint i32 %157, 8, !dbg !18
  %181 = icmp slt i32 %180, 128, !dbg !19
  %182 = and i1 %163, %181, !dbg !23
  %183 = icmp slt i32 %157, 128, !dbg !19
  %184 = and i1 %163, %183, !dbg !23
  %.frozen = freeze i32 %162, !dbg !37
  %185 = sdiv i32 %.frozen, 10, !dbg !37
  %186 = mul i32 %185, 10, !dbg !38
  %.decomposed = sub i32 %.frozen, %186, !dbg !38
  %187 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !39
  %188 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i35) #4, !dbg !39
  %189 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i40) #4, !dbg !39
  %190 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i45) #4, !dbg !39
  %191 = insertelement <4 x i32> poison, i32 %124, i64 0, !dbg !26
  %192 = insertelement <4 x i32> %191, i32 %127, i64 1, !dbg !26
  %193 = insertelement <4 x i32> %192, i32 %130, i64 2, !dbg !26
  %194 = insertelement <4 x i32> %193, i32 %133, i64 3, !dbg !26
  %195 = bitcast <4 x i32> %194 to <4 x float>, !dbg !26
  %196 = shufflevector <4 x float> %195, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !26
  %197 = insertelement <4 x i32> poison, i32 %125, i64 0, !dbg !28
  %198 = insertelement <4 x i32> %197, i32 %128, i64 1, !dbg !28
  %199 = insertelement <4 x i32> %198, i32 %131, i64 2, !dbg !28
  %200 = insertelement <4 x i32> %199, i32 %134, i64 3, !dbg !28
  %201 = bitcast <4 x i32> %200 to <4 x float>, !dbg !28
  %202 = shufflevector <4 x float> %201, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !28
  %203 = insertelement <16 x i32> poison, i32 %123, i64 0, !dbg !24
  %204 = insertelement <16 x i32> %203, i32 %126, i64 1, !dbg !24
  %205 = insertelement <16 x i32> %204, i32 %129, i64 2, !dbg !24
  %206 = insertelement <16 x i32> %205, i32 %132, i64 3, !dbg !24
  %207 = insertelement <16 x i32> %206, i32 %135, i64 4, !dbg !24
  %208 = insertelement <16 x i32> %207, i32 %136, i64 5, !dbg !24
  %209 = insertelement <16 x i32> %208, i32 %137, i64 6, !dbg !24
  %210 = insertelement <16 x i32> %209, i32 %138, i64 7, !dbg !24
  %211 = insertelement <16 x i32> %210, i32 %139, i64 8, !dbg !24
  %212 = insertelement <16 x i32> %211, i32 %140, i64 9, !dbg !24
  %213 = insertelement <16 x i32> %212, i32 %141, i64 10, !dbg !24
  %214 = insertelement <16 x i32> %213, i32 %142, i64 11, !dbg !24
  %215 = insertelement <16 x i32> %214, i32 %143, i64 12, !dbg !24
  %216 = insertelement <16 x i32> %215, i32 %144, i64 13, !dbg !24
  %217 = insertelement <16 x i32> %216, i32 %145, i64 14, !dbg !24
  %218 = insertelement <16 x i32> %217, i32 %146, i64 15, !dbg !24
  %219 = bitcast <16 x i32> %218 to <16 x float>, !dbg !24
  %220 = fadd <16 x float> %196, %219, !dbg !40
  %221 = fsub <16 x float> %220, %202, !dbg !41
  %222 = insertelement <4 x i32> poison, i32 %147, i64 0, !dbg !34
  %223 = insertelement <4 x i32> %222, i32 %148, i64 1, !dbg !34
  %224 = insertelement <4 x i32> %223, i32 %149, i64 2, !dbg !34
  %225 = insertelement <4 x i32> %224, i32 %150, i64 3, !dbg !34
  %226 = bitcast <4 x i32> %225 to <4 x float>, !dbg !34
  %227 = shufflevector <4 x float> %226, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !34
  %228 = insertelement <4 x i32> poison, i32 %151, i64 0, !dbg !32
  %229 = insertelement <4 x i32> %228, i32 %152, i64 1, !dbg !32
  %230 = insertelement <4 x i32> %229, i32 %153, i64 2, !dbg !32
  %231 = insertelement <4 x i32> %230, i32 %154, i64 3, !dbg !32
  %232 = bitcast <4 x i32> %231 to <4 x float>, !dbg !32
  %233 = shufflevector <4 x float> %232, <4 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !32
  %234 = insertelement <16 x float> poison, float %190, i64 0, !dbg !42
  %235 = insertelement <16 x float> %234, float %189, i64 1, !dbg !42
  %236 = insertelement <16 x float> %235, float %188, i64 2, !dbg !42
  %237 = insertelement <16 x float> %236, float %187, i64 3, !dbg !42
  %238 = shufflevector <16 x float> %237, <16 x float> poison, <16 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !42
  %239 = fmul <16 x float> %221, %238, !dbg !42
  %240 = fmul <16 x float> %239, %233, !dbg !43
  %241 = fadd <16 x float> %240, %227, !dbg !44
  %242 = fcmp ogt <16 x float> %241, zeroinitializer, !dbg !45
  %243 = extractelement <16 x float> %241, i64 15, !dbg !46
  %244 = fmul float %243, 0x3F847AE140000000, !dbg !47
  %245 = extractelement <16 x float> %241, i64 14, !dbg !46
  %246 = fmul float %245, 0x3F847AE140000000, !dbg !47
  %247 = extractelement <16 x float> %241, i64 13, !dbg !46
  %248 = fmul float %247, 0x3F847AE140000000, !dbg !47
  %249 = extractelement <16 x float> %241, i64 12, !dbg !46
  %250 = fmul float %249, 0x3F847AE140000000, !dbg !47
  %251 = extractelement <16 x float> %241, i64 11, !dbg !46
  %252 = fmul float %251, 0x3F847AE140000000, !dbg !47
  %253 = extractelement <16 x float> %241, i64 10, !dbg !46
  %254 = fmul float %253, 0x3F847AE140000000, !dbg !47
  %255 = extractelement <16 x float> %241, i64 9, !dbg !46
  %256 = fmul float %255, 0x3F847AE140000000, !dbg !47
  %257 = extractelement <16 x float> %241, i64 8, !dbg !46
  %258 = fmul float %257, 0x3F847AE140000000, !dbg !47
  %259 = extractelement <16 x float> %241, i64 7, !dbg !46
  %260 = fmul float %259, 0x3F847AE140000000, !dbg !47
  %261 = extractelement <16 x float> %241, i64 6, !dbg !46
  %262 = fmul float %261, 0x3F847AE140000000, !dbg !47
  %263 = extractelement <16 x float> %241, i64 5, !dbg !46
  %264 = fmul float %263, 0x3F847AE140000000, !dbg !47
  %265 = extractelement <16 x float> %241, i64 4, !dbg !46
  %266 = fmul float %265, 0x3F847AE140000000, !dbg !47
  %267 = extractelement <16 x float> %241, i64 3, !dbg !46
  %268 = fmul float %267, 0x3F847AE140000000, !dbg !47
  %269 = extractelement <16 x float> %241, i64 2, !dbg !46
  %270 = fmul float %269, 0x3F847AE140000000, !dbg !47
  %271 = extractelement <16 x float> %241, i64 1, !dbg !46
  %272 = fmul float %271, 0x3F847AE140000000, !dbg !47
  %273 = extractelement <16 x float> %241, i64 0, !dbg !46
  %274 = fmul float %273, 0x3F847AE140000000, !dbg !47
  %275 = extractelement <16 x i1> %242, i64 15, !dbg !46
  %276 = select i1 %275, float %243, float %244, !dbg !46
  %277 = extractelement <16 x i1> %242, i64 14, !dbg !46
  %278 = select i1 %277, float %245, float %246, !dbg !46
  %279 = extractelement <16 x i1> %242, i64 13, !dbg !46
  %280 = select i1 %279, float %247, float %248, !dbg !46
  %281 = extractelement <16 x i1> %242, i64 12, !dbg !46
  %282 = select i1 %281, float %249, float %250, !dbg !46
  %283 = extractelement <16 x i1> %242, i64 11, !dbg !46
  %284 = select i1 %283, float %251, float %252, !dbg !46
  %285 = extractelement <16 x i1> %242, i64 10, !dbg !46
  %286 = select i1 %285, float %253, float %254, !dbg !46
  %287 = extractelement <16 x i1> %242, i64 9, !dbg !46
  %288 = select i1 %287, float %255, float %256, !dbg !46
  %289 = extractelement <16 x i1> %242, i64 8, !dbg !46
  %290 = select i1 %289, float %257, float %258, !dbg !46
  %291 = extractelement <16 x i1> %242, i64 7, !dbg !46
  %292 = select i1 %291, float %259, float %260, !dbg !46
  %293 = extractelement <16 x i1> %242, i64 6, !dbg !46
  %294 = select i1 %293, float %261, float %262, !dbg !46
  %295 = extractelement <16 x i1> %242, i64 5, !dbg !46
  %296 = select i1 %295, float %263, float %264, !dbg !46
  %297 = extractelement <16 x i1> %242, i64 4, !dbg !46
  %298 = select i1 %297, float %265, float %266, !dbg !46
  %299 = extractelement <16 x i1> %242, i64 3, !dbg !46
  %300 = select i1 %299, float %267, float %268, !dbg !46
  %301 = extractelement <16 x i1> %242, i64 2, !dbg !46
  %302 = select i1 %301, float %269, float %270, !dbg !46
  %303 = extractelement <16 x i1> %242, i64 1, !dbg !46
  %304 = select i1 %303, float %271, float %272, !dbg !46
  %305 = extractelement <16 x i1> %242, i64 0, !dbg !46
  %306 = select i1 %305, float %273, float %274, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %bc = bitcast <16 x float> %220 to <16 x i32>, !dbg !49
  %307 = extractelement <16 x i32> %bc, i64 15, !dbg !49
  %bc48 = bitcast <16 x float> %220 to <16 x i32>, !dbg !49
  %308 = extractelement <16 x i32> %bc48, i64 14, !dbg !49
  %bc49 = bitcast <16 x float> %220 to <16 x i32>, !dbg !49
  %309 = extractelement <16 x i32> %bc49, i64 13, !dbg !49
  %bc50 = bitcast <16 x float> %220 to <16 x i32>, !dbg !49
  %310 = extractelement <16 x i32> %bc50, i64 12, !dbg !49
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %307, i32 %308, i32 %309, i32 %310, ptr addrspace(1) %37, i1 %44) #4, !dbg !49
  %bc51 = bitcast <16 x float> %220 to <16 x i32>, !dbg !49
  %311 = extractelement <16 x i32> %bc51, i64 11, !dbg !49
  %bc52 = bitcast <16 x float> %220 to <16 x i32>, !dbg !49
  %312 = extractelement <16 x i32> %bc52, i64 10, !dbg !49
  %bc53 = bitcast <16 x float> %220 to <16 x i32>, !dbg !49
  %313 = extractelement <16 x i32> %bc53, i64 9, !dbg !49
  %bc54 = bitcast <16 x float> %220 to <16 x i32>, !dbg !49
  %314 = extractelement <16 x i32> %bc54, i64 8, !dbg !49
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %311, i32 %312, i32 %313, i32 %314, ptr addrspace(1) %39, i1 %45) #4, !dbg !49
  %bc55 = bitcast <16 x float> %220 to <16 x i32>, !dbg !49
  %315 = extractelement <16 x i32> %bc55, i64 7, !dbg !49
  %bc56 = bitcast <16 x float> %220 to <16 x i32>, !dbg !49
  %316 = extractelement <16 x i32> %bc56, i64 6, !dbg !49
  %bc57 = bitcast <16 x float> %220 to <16 x i32>, !dbg !49
  %317 = extractelement <16 x i32> %bc57, i64 5, !dbg !49
  %bc58 = bitcast <16 x float> %220 to <16 x i32>, !dbg !49
  %318 = extractelement <16 x i32> %bc58, i64 4, !dbg !49
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %315, i32 %316, i32 %317, i32 %318, ptr addrspace(1) %41, i1 %46) #4, !dbg !49
  %bc59 = bitcast <16 x float> %220 to <16 x i32>, !dbg !49
  %319 = extractelement <16 x i32> %bc59, i64 3, !dbg !49
  %bc60 = bitcast <16 x float> %220 to <16 x i32>, !dbg !49
  %320 = extractelement <16 x i32> %bc60, i64 2, !dbg !49
  %bc61 = bitcast <16 x float> %220 to <16 x i32>, !dbg !49
  %321 = extractelement <16 x i32> %bc61, i64 1, !dbg !49
  %bc62 = bitcast <16 x float> %220 to <16 x i32>, !dbg !49
  %322 = extractelement <16 x i32> %bc62, i64 0, !dbg !49
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %319, i32 %320, i32 %321, i32 %322, ptr addrspace(1) %43, i1 %47) #4, !dbg !49
  %323 = mul i32 %157, 10, !dbg !50
  %324 = mul i32 %180, 10, !dbg !50
  %325 = mul i32 %177, 10, !dbg !50
  %326 = mul i32 %174, 10, !dbg !50
  %327 = mul i32 %171, 10, !dbg !50
  %328 = mul i32 %168, 10, !dbg !50
  %329 = mul i32 %165, 10, !dbg !50
  %330 = mul i32 %158, 10, !dbg !50
  %331 = mul i32 %185, 1280, !dbg !51
  %332 = add i32 %331, %.decomposed, !dbg !52
  %333 = add i32 %332, %323, !dbg !53
  %334 = add i32 %332, %324, !dbg !53
  %335 = add i32 %332, %325, !dbg !53
  %336 = add i32 %332, %326, !dbg !53
  %337 = add i32 %332, %327, !dbg !53
  %338 = add i32 %332, %328, !dbg !53
  %339 = add i32 %332, %329, !dbg !53
  %340 = add i32 %332, %330, !dbg !53
  %341 = sext i32 %333 to i64, !dbg !54
  %342 = getelementptr float, ptr addrspace(1) %6, i64 %341, !dbg !54
  %343 = sext i32 %334 to i64, !dbg !54
  %344 = getelementptr float, ptr addrspace(1) %6, i64 %343, !dbg !54
  %345 = sext i32 %335 to i64, !dbg !54
  %346 = getelementptr float, ptr addrspace(1) %6, i64 %345, !dbg !54
  %347 = sext i32 %336 to i64, !dbg !54
  %348 = getelementptr float, ptr addrspace(1) %6, i64 %347, !dbg !54
  %349 = sext i32 %337 to i64, !dbg !54
  %350 = getelementptr float, ptr addrspace(1) %6, i64 %349, !dbg !54
  %351 = sext i32 %338 to i64, !dbg !54
  %352 = getelementptr float, ptr addrspace(1) %6, i64 %351, !dbg !54
  %353 = sext i32 %339 to i64, !dbg !54
  %354 = getelementptr float, ptr addrspace(1) %6, i64 %353, !dbg !54
  %355 = sext i32 %340 to i64, !dbg !54
  %356 = getelementptr float, ptr addrspace(1) %6, i64 %355, !dbg !54
  %357 = shl i32 %12, 8, !dbg !55
  %358 = and i32 %357, 3840, !dbg !55
  %359 = or disjoint i32 %358, %14, !dbg !55
  %360 = and i32 %160, 510, !dbg !55
  %361 = lshr exact i32 %358, 3, !dbg !55
  %362 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %361, !dbg !55
  %363 = getelementptr float, ptr addrspace(3) %362, i32 %359, !dbg !55
  %364 = bitcast float %276 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %363, <1 x i32> %364, i1 true) #4, !dbg !55
  %365 = or disjoint i32 %359, 64, !dbg !55
  %366 = lshr i32 %365, 5, !dbg !55
  %367 = getelementptr float, ptr addrspace(3) @global_smem, i32 %366, !dbg !55
  %368 = getelementptr float, ptr addrspace(3) %367, i32 %365, !dbg !55
  %369 = bitcast float %278 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %368, <1 x i32> %369, i1 true) #4, !dbg !55
  %370 = or disjoint i32 %359, 128, !dbg !55
  %371 = lshr i32 %370, 5, !dbg !55
  %372 = getelementptr float, ptr addrspace(3) @global_smem, i32 %371, !dbg !55
  %373 = getelementptr float, ptr addrspace(3) %372, i32 %370, !dbg !55
  %374 = bitcast float %280 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %373, <1 x i32> %374, i1 true) #4, !dbg !55
  %375 = or disjoint i32 %359, 192, !dbg !55
  %376 = lshr i32 %375, 5, !dbg !55
  %377 = getelementptr float, ptr addrspace(3) @global_smem, i32 %376, !dbg !55
  %378 = getelementptr float, ptr addrspace(3) %377, i32 %375, !dbg !55
  %379 = bitcast float %282 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %378, <1 x i32> %379, i1 true) #4, !dbg !55
  %380 = or disjoint i32 %359, 16, !dbg !55
  %381 = getelementptr float, ptr addrspace(3) %362, i32 %380, !dbg !55
  %382 = bitcast float %284 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %381, <1 x i32> %382, i1 true) #4, !dbg !55
  %383 = or disjoint i32 %359, 80, !dbg !55
  %384 = lshr i32 %383, 5, !dbg !55
  %385 = getelementptr float, ptr addrspace(3) @global_smem, i32 %384, !dbg !55
  %386 = getelementptr float, ptr addrspace(3) %385, i32 %383, !dbg !55
  %387 = bitcast float %286 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %386, <1 x i32> %387, i1 true) #4, !dbg !55
  %388 = or disjoint i32 %359, 144, !dbg !55
  %389 = lshr i32 %388, 5, !dbg !55
  %390 = getelementptr float, ptr addrspace(3) @global_smem, i32 %389, !dbg !55
  %391 = getelementptr float, ptr addrspace(3) %390, i32 %388, !dbg !55
  %392 = bitcast float %288 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %391, <1 x i32> %392, i1 true) #4, !dbg !55
  %393 = or disjoint i32 %359, 208, !dbg !55
  %394 = lshr i32 %393, 5, !dbg !55
  %395 = getelementptr float, ptr addrspace(3) @global_smem, i32 %394, !dbg !55
  %396 = getelementptr float, ptr addrspace(3) %395, i32 %393, !dbg !55
  %397 = bitcast float %290 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %396, <1 x i32> %397, i1 true) #4, !dbg !55
  %398 = or disjoint i32 %359, 32, !dbg !55
  %399 = getelementptr float, ptr addrspace(3) %362, i32 %398, !dbg !55
  %400 = bitcast float %292 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %399, <1 x i32> %400, i1 true) #4, !dbg !55
  %401 = or disjoint i32 %359, 96, !dbg !55
  %402 = lshr i32 %401, 5, !dbg !55
  %403 = and i32 %402, 122, !dbg !55
  %404 = getelementptr float, ptr addrspace(3) @global_smem, i32 %403, !dbg !55
  %405 = getelementptr float, ptr addrspace(3) %404, i32 %401, !dbg !55
  %406 = bitcast float %294 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %405, <1 x i32> %406, i1 true) #4, !dbg !55
  %407 = or disjoint i32 %359, 160, !dbg !55
  %408 = lshr i32 %407, 5, !dbg !55
  %409 = and i32 %408, 124, !dbg !55
  %410 = getelementptr float, ptr addrspace(3) @global_smem, i32 %409, !dbg !55
  %411 = getelementptr float, ptr addrspace(3) %410, i32 %407, !dbg !55
  %412 = bitcast float %296 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %411, <1 x i32> %412, i1 true) #4, !dbg !55
  %413 = or disjoint i32 %359, 224, !dbg !55
  %414 = lshr i32 %413, 5, !dbg !55
  %415 = and i32 %414, 126, !dbg !55
  %416 = getelementptr float, ptr addrspace(3) @global_smem, i32 %415, !dbg !55
  %417 = getelementptr float, ptr addrspace(3) %416, i32 %413, !dbg !55
  %418 = bitcast float %298 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %417, <1 x i32> %418, i1 true) #4, !dbg !55
  %419 = or disjoint i32 %359, 48, !dbg !55
  %420 = getelementptr float, ptr addrspace(3) %362, i32 %419, !dbg !55
  %421 = bitcast float %300 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %420, <1 x i32> %421, i1 true) #4, !dbg !55
  %422 = or disjoint i32 %359, 112, !dbg !55
  %423 = lshr i32 %422, 5, !dbg !55
  %424 = and i32 %423, 122, !dbg !55
  %425 = getelementptr float, ptr addrspace(3) @global_smem, i32 %424, !dbg !55
  %426 = getelementptr float, ptr addrspace(3) %425, i32 %422, !dbg !55
  %427 = bitcast float %302 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %426, <1 x i32> %427, i1 true) #4, !dbg !55
  %428 = or disjoint i32 %359, 176, !dbg !55
  %429 = lshr i32 %428, 5, !dbg !55
  %430 = and i32 %429, 124, !dbg !55
  %431 = getelementptr float, ptr addrspace(3) @global_smem, i32 %430, !dbg !55
  %432 = getelementptr float, ptr addrspace(3) %431, i32 %428, !dbg !55
  %433 = bitcast float %304 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %432, <1 x i32> %433, i1 true) #4, !dbg !55
  %434 = or disjoint i32 %359, 240, !dbg !55
  %435 = lshr i32 %434, 5, !dbg !55
  %436 = and i32 %435, 126, !dbg !55
  %437 = getelementptr float, ptr addrspace(3) @global_smem, i32 %436, !dbg !55
  %438 = getelementptr float, ptr addrspace(3) %437, i32 %434, !dbg !55
  %439 = bitcast float %306 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %438, <1 x i32> %439, i1 true) #4, !dbg !55
  tail call void @llvm.nvvm.barrier0(), !dbg !55
  %440 = lshr i32 %160, 5, !dbg !55
  %441 = and i32 %440, 14, !dbg !55
  %442 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %441, !dbg !55
  %443 = getelementptr inbounds float, ptr addrspace(3) %442, i32 %360, !dbg !55
  %444 = load <2 x i32>, ptr addrspace(3) %443, align 8, !dbg !55
  %445 = or disjoint i32 %360, 512, !dbg !55
  %446 = lshr i32 %445, 5, !dbg !55
  %447 = and i32 %446, 30, !dbg !55
  %448 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %447, !dbg !55
  %449 = getelementptr inbounds float, ptr addrspace(3) %448, i32 %445, !dbg !55
  %450 = load <2 x i32>, ptr addrspace(3) %449, align 8, !dbg !55
  %451 = or disjoint i32 %360, 1024, !dbg !55
  %452 = lshr i32 %451, 5, !dbg !55
  %453 = and i32 %452, 46, !dbg !55
  %454 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %453, !dbg !55
  %455 = getelementptr inbounds float, ptr addrspace(3) %454, i32 %451, !dbg !55
  %456 = load <2 x i32>, ptr addrspace(3) %455, align 8, !dbg !55
  %457 = or disjoint i32 %360, 1536, !dbg !55
  %458 = lshr i32 %457, 5, !dbg !55
  %459 = and i32 %458, 62, !dbg !55
  %460 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %459, !dbg !55
  %461 = getelementptr inbounds float, ptr addrspace(3) %460, i32 %457, !dbg !55
  %462 = load <2 x i32>, ptr addrspace(3) %461, align 8, !dbg !55
  %463 = or disjoint i32 %360, 2048, !dbg !55
  %464 = lshr i32 %463, 5, !dbg !55
  %465 = and i32 %464, 78, !dbg !55
  %466 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %465, !dbg !55
  %467 = getelementptr inbounds float, ptr addrspace(3) %466, i32 %463, !dbg !55
  %468 = load <2 x i32>, ptr addrspace(3) %467, align 8, !dbg !55
  %469 = or disjoint i32 %360, 2560, !dbg !55
  %470 = lshr i32 %469, 5, !dbg !55
  %471 = and i32 %470, 94, !dbg !55
  %472 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %471, !dbg !55
  %473 = getelementptr inbounds float, ptr addrspace(3) %472, i32 %469, !dbg !55
  %474 = load <2 x i32>, ptr addrspace(3) %473, align 8, !dbg !55
  %475 = or disjoint i32 %360, 3072, !dbg !55
  %476 = lshr i32 %475, 5, !dbg !55
  %477 = and i32 %476, 110, !dbg !55
  %478 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %477, !dbg !55
  %479 = getelementptr inbounds float, ptr addrspace(3) %478, i32 %475, !dbg !55
  %480 = load <2 x i32>, ptr addrspace(3) %479, align 8, !dbg !55
  %481 = or disjoint i32 %360, 3584, !dbg !55
  %482 = lshr i32 %481, 5, !dbg !55
  %483 = and i32 %482, 126, !dbg !55
  %484 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %483, !dbg !55
  %485 = getelementptr inbounds float, ptr addrspace(3) %484, i32 %481, !dbg !55
  %486 = load <2 x i32>, ptr addrspace(3) %485, align 8, !dbg !55
  %.extract = extractelement <2 x i32> %444, i64 0, !dbg !55
  %.extract18 = extractelement <2 x i32> %444, i64 1, !dbg !55
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract, i32 %.extract18, ptr addrspace(1) %342, i1 %184) #4, !dbg !55
  %.extract19 = extractelement <2 x i32> %450, i64 0, !dbg !55
  %.extract20 = extractelement <2 x i32> %450, i64 1, !dbg !55
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract19, i32 %.extract20, ptr addrspace(1) %344, i1 %182) #4, !dbg !55
  %.extract21 = extractelement <2 x i32> %456, i64 0, !dbg !55
  %.extract22 = extractelement <2 x i32> %456, i64 1, !dbg !55
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract21, i32 %.extract22, ptr addrspace(1) %346, i1 %179) #4, !dbg !55
  %.extract23 = extractelement <2 x i32> %462, i64 0, !dbg !55
  %.extract24 = extractelement <2 x i32> %462, i64 1, !dbg !55
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract23, i32 %.extract24, ptr addrspace(1) %348, i1 %176) #4, !dbg !55
  %.extract25 = extractelement <2 x i32> %468, i64 0, !dbg !55
  %.extract26 = extractelement <2 x i32> %468, i64 1, !dbg !55
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract25, i32 %.extract26, ptr addrspace(1) %350, i1 %173) #4, !dbg !55
  %.extract27 = extractelement <2 x i32> %474, i64 0, !dbg !55
  %.extract28 = extractelement <2 x i32> %474, i64 1, !dbg !55
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract27, i32 %.extract28, ptr addrspace(1) %352, i1 %170) #4, !dbg !55
  %.extract29 = extractelement <2 x i32> %480, i64 0, !dbg !55
  %.extract30 = extractelement <2 x i32> %480, i64 1, !dbg !55
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract29, i32 %.extract30, ptr addrspace(1) %354, i1 %167) #4, !dbg !55
  %.extract31 = extractelement <2 x i32> %486, i64 0, !dbg !55
  %.extract32 = extractelement <2 x i32> %486, i64 1, !dbg !55
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract31, i32 %.extract32, ptr addrspace(1) %356, i1 %164) #4, !dbg !55
  ret void, !dbg !56
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cexirvayyidh3f3ue7vbycwrx2zqfuk3afjxgkri6tkplldvblxy.py", directory: "inductor_cache/ex")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_clone_convolution_4, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_clone_convolution_4, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_clone_convolution_4", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_clone_convolution_4", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 32, column: 43, scope: !7)
!21 = !DILocation(line: 32, column: 39, scope: !7)
!22 = !DILocation(line: 32, column: 34, scope: !7)
!23 = !DILocation(line: 32, column: 56, scope: !7)
!24 = !DILocation(line: 32, column: 48, scope: !7)
!25 = !DILocation(line: 33, column: 30, scope: !7)
!26 = !DILocation(line: 33, column: 35, scope: !7)
!27 = !DILocation(line: 34, column: 30, scope: !7)
!28 = !DILocation(line: 34, column: 35, scope: !7)
!29 = !DILocation(line: 35, column: 30, scope: !7)
!30 = !DILocation(line: 35, column: 35, scope: !7)
!31 = !DILocation(line: 36, column: 31, scope: !7)
!32 = !DILocation(line: 36, column: 36, scope: !7)
!33 = !DILocation(line: 37, column: 31, scope: !7)
!34 = !DILocation(line: 37, column: 36, scope: !7)
!35 = !DILocation(line: 41, column: 18, scope: !7)
!36 = !DILocation(line: 42, column: 26, scope: !7)
!37 = !DILocation(line: 31, column: 19, scope: !7)
!38 = !DILocation(line: 30, column: 19, scope: !7)
!39 = !DILocation(line: 44, column: 19, scope: !7)
!40 = !DILocation(line: 38, column: 18, scope: !7)
!41 = !DILocation(line: 39, column: 18, scope: !7)
!42 = !DILocation(line: 47, column: 19, scope: !7)
!43 = !DILocation(line: 48, column: 20, scope: !7)
!44 = !DILocation(line: 49, column: 20, scope: !7)
!45 = !DILocation(line: 51, column: 20, scope: !7)
!46 = !DILocation(line: 54, column: 35, scope: !7)
!47 = !DILocation(line: 53, column: 20, scope: !7)
!48 = !DILocation(line: 55, column: 4, scope: !7)
!49 = !DILocation(line: 56, column: 48, scope: !7)
!50 = !DILocation(line: 57, column: 33, scope: !7)
!51 = !DILocation(line: 57, column: 43, scope: !7)
!52 = !DILocation(line: 57, column: 30, scope: !7)
!53 = !DILocation(line: 57, column: 38, scope: !7)
!54 = !DILocation(line: 57, column: 25, scope: !7)
!55 = !DILocation(line: 57, column: 55, scope: !7)
!56 = !DILocation(line: 57, column: 4, scope: !7)
