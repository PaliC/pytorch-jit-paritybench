; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_add_relu_threshold_backward_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 10, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 3, !dbg !12
  %10 = and i32 %9, 1016, !dbg !12
  %11 = shl i32 %8, 2, !dbg !12
  %12 = and i32 %11, 508, !dbg !12
  %13 = or disjoint i32 %12, 512, !dbg !12
  %14 = or disjoint i32 %7, %10, !dbg !13
  %15 = or disjoint i32 %14, 4, !dbg !13
  %16 = or disjoint i32 %7, %12, !dbg !13
  %17 = or disjoint i32 %7, %13, !dbg !13
  %18 = sext i32 %14 to i64, !dbg !14
  %19 = getelementptr float, ptr addrspace(1) %0, i64 %18, !dbg !14
  %20 = sext i32 %15 to i64, !dbg !14
  %21 = getelementptr float, ptr addrspace(1) %0, i64 %20, !dbg !14
  %22 = sext i32 %16 to i64, !dbg !14
  %23 = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !14
  %24 = sext i32 %17 to i64, !dbg !14
  %25 = getelementptr float, ptr addrspace(1) %0, i64 %24, !dbg !14
  %26 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %19, i1 true) #2, !dbg !15
  %27 = extractvalue { i32, i32, i32, i32 } %26, 0, !dbg !15
  %28 = extractvalue { i32, i32, i32, i32 } %26, 1, !dbg !15
  %29 = extractvalue { i32, i32, i32, i32 } %26, 2, !dbg !15
  %30 = extractvalue { i32, i32, i32, i32 } %26, 3, !dbg !15
  %31 = bitcast i32 %27 to float, !dbg !15
  %32 = bitcast i32 %28 to float, !dbg !15
  %33 = bitcast i32 %29 to float, !dbg !15
  %34 = bitcast i32 %30 to float, !dbg !15
  %35 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %21, i1 true) #2, !dbg !15
  %36 = extractvalue { i32, i32, i32, i32 } %35, 0, !dbg !15
  %37 = extractvalue { i32, i32, i32, i32 } %35, 1, !dbg !15
  %38 = extractvalue { i32, i32, i32, i32 } %35, 2, !dbg !15
  %39 = extractvalue { i32, i32, i32, i32 } %35, 3, !dbg !15
  %40 = bitcast i32 %36 to float, !dbg !15
  %41 = bitcast i32 %37 to float, !dbg !15
  %42 = bitcast i32 %38 to float, !dbg !15
  %43 = bitcast i32 %39 to float, !dbg !15
  %44 = getelementptr float, ptr addrspace(1) %1, i64 %18, !dbg !16
  %45 = getelementptr float, ptr addrspace(1) %1, i64 %20, !dbg !16
  %46 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %44, i1 true) #2, !dbg !17
  %47 = extractvalue { i32, i32, i32, i32 } %46, 0, !dbg !17
  %48 = extractvalue { i32, i32, i32, i32 } %46, 1, !dbg !17
  %49 = extractvalue { i32, i32, i32, i32 } %46, 2, !dbg !17
  %50 = extractvalue { i32, i32, i32, i32 } %46, 3, !dbg !17
  %51 = bitcast i32 %47 to float, !dbg !17
  %52 = bitcast i32 %48 to float, !dbg !17
  %53 = bitcast i32 %49 to float, !dbg !17
  %54 = bitcast i32 %50 to float, !dbg !17
  %55 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %45, i1 true) #2, !dbg !17
  %56 = extractvalue { i32, i32, i32, i32 } %55, 0, !dbg !17
  %57 = extractvalue { i32, i32, i32, i32 } %55, 1, !dbg !17
  %58 = extractvalue { i32, i32, i32, i32 } %55, 2, !dbg !17
  %59 = extractvalue { i32, i32, i32, i32 } %55, 3, !dbg !17
  %60 = bitcast i32 %56 to float, !dbg !17
  %61 = bitcast i32 %57 to float, !dbg !17
  %62 = bitcast i32 %58 to float, !dbg !17
  %63 = bitcast i32 %59 to float, !dbg !17
  %64 = getelementptr float, ptr addrspace(1) %2, i64 %18, !dbg !18
  %65 = getelementptr float, ptr addrspace(1) %2, i64 %20, !dbg !18
  %66 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %64, i1 true) #2, !dbg !19
  %67 = extractvalue { i32, i32, i32, i32 } %66, 0, !dbg !19
  %68 = extractvalue { i32, i32, i32, i32 } %66, 1, !dbg !19
  %69 = extractvalue { i32, i32, i32, i32 } %66, 2, !dbg !19
  %70 = extractvalue { i32, i32, i32, i32 } %66, 3, !dbg !19
  %71 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %65, i1 true) #2, !dbg !19
  %72 = extractvalue { i32, i32, i32, i32 } %71, 0, !dbg !19
  %73 = extractvalue { i32, i32, i32, i32 } %71, 1, !dbg !19
  %74 = extractvalue { i32, i32, i32, i32 } %71, 2, !dbg !19
  %75 = extractvalue { i32, i32, i32, i32 } %71, 3, !dbg !19
  %76 = zext nneg i32 %10 to i64, !dbg !20
  %77 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %76, !dbg !20
  %78 = getelementptr inbounds i8, ptr addrspace(3) %77, i64 16, !dbg !20
  %79 = zext nneg i32 %12 to i64, !dbg !20
  %80 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %79, !dbg !20
  %81 = zext nneg i32 %13 to i64, !dbg !20
  %82 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %81, !dbg !20
  %83 = getelementptr inbounds i8, ptr addrspace(3) %80, i64 4, !dbg !20
  %84 = getelementptr inbounds i8, ptr addrspace(3) %80, i64 8, !dbg !20
  %85 = getelementptr inbounds i8, ptr addrspace(3) %80, i64 12, !dbg !20
  %86 = getelementptr i1, ptr addrspace(1) %3, i64 %18, !dbg !21
  %87 = insertelement <4 x i32> poison, i32 %67, i64 0, !dbg !19
  %88 = insertelement <4 x i32> %87, i32 %68, i64 1, !dbg !19
  %89 = insertelement <4 x i32> %88, i32 %69, i64 2, !dbg !19
  %90 = insertelement <4 x i32> %89, i32 %70, i64 3, !dbg !19
  %91 = bitcast <4 x i32> %90 to <4 x float>, !dbg !19
  %92 = fcmp olt <4 x float> %91, zeroinitializer, !dbg !22
  %93 = select <4 x i1> %92, <4 x float> zeroinitializer, <4 x float> %91, !dbg !26
  %94 = extractelement <4 x float> %93, i64 0, !dbg !27
  %95 = fadd float %94, %51, !dbg !27
  %96 = extractelement <4 x float> %93, i64 1, !dbg !27
  %97 = fadd float %96, %52, !dbg !27
  %98 = extractelement <4 x float> %93, i64 2, !dbg !27
  %99 = fadd float %98, %53, !dbg !27
  %100 = extractelement <4 x float> %93, i64 3, !dbg !27
  %101 = fadd float %100, %54, !dbg !27
  %102 = fadd float %95, %31, !dbg !28
  %103 = fadd float %97, %32, !dbg !28
  %104 = fadd float %99, %33, !dbg !28
  %105 = fadd float %101, %34, !dbg !28
  %106 = fcmp ole <4 x float> %93, zeroinitializer, !dbg !29
  %107 = bitcast float %102 to i32, !dbg !20
  %108 = bitcast float %103 to i32, !dbg !20
  %109 = bitcast float %104 to i32, !dbg !20
  %110 = bitcast float %105 to i32, !dbg !20
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %77, i32 %107, i32 %108, i32 %109, i32 %110, i1 true) #2, !dbg !20
  %111 = insertelement <4 x i32> poison, i32 %72, i64 0, !dbg !19
  %112 = insertelement <4 x i32> %111, i32 %73, i64 1, !dbg !19
  %113 = insertelement <4 x i32> %112, i32 %74, i64 2, !dbg !19
  %114 = insertelement <4 x i32> %113, i32 %75, i64 3, !dbg !19
  %115 = bitcast <4 x i32> %114 to <4 x float>, !dbg !19
  %116 = fcmp olt <4 x float> %115, zeroinitializer, !dbg !22
  %117 = select <4 x i1> %116, <4 x float> zeroinitializer, <4 x float> %115, !dbg !26
  %118 = extractelement <4 x float> %117, i64 0, !dbg !27
  %119 = fadd float %118, %60, !dbg !27
  %120 = extractelement <4 x float> %117, i64 1, !dbg !27
  %121 = fadd float %120, %61, !dbg !27
  %122 = extractelement <4 x float> %117, i64 2, !dbg !27
  %123 = fadd float %122, %62, !dbg !27
  %124 = extractelement <4 x float> %117, i64 3, !dbg !27
  %125 = fadd float %124, %63, !dbg !27
  %126 = fadd float %119, %40, !dbg !28
  %127 = fadd float %121, %41, !dbg !28
  %128 = fadd float %123, %42, !dbg !28
  %129 = fadd float %125, %43, !dbg !28
  %130 = fcmp ole <4 x float> %117, zeroinitializer, !dbg !29
  %131 = bitcast float %126 to i32, !dbg !20
  %132 = bitcast float %127 to i32, !dbg !20
  %133 = bitcast float %128 to i32, !dbg !20
  %134 = bitcast float %129 to i32, !dbg !20
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %78, i32 %131, i32 %132, i32 %133, i32 %134, i1 true) #2, !dbg !20
  tail call void @llvm.nvvm.barrier0(), !dbg !20
  %135 = load <4 x i32>, ptr addrspace(3) %82, align 16, !dbg !20
  %.extract = load i32, ptr addrspace(3) %80, align 16, !dbg !20
  %.extract8 = load i32, ptr addrspace(3) %83, align 4, !dbg !20
  %.extract9 = load i32, ptr addrspace(3) %84, align 8, !dbg !20
  %.extract10 = load i32, ptr addrspace(3) %85, align 4, !dbg !20
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %23, i1 true) #2, !dbg !20
  %.extract11 = extractelement <4 x i32> %135, i64 0, !dbg !20
  %.extract12 = extractelement <4 x i32> %135, i64 1, !dbg !20
  %.extract13 = extractelement <4 x i32> %135, i64 2, !dbg !20
  %.extract14 = extractelement <4 x i32> %135, i64 3, !dbg !20
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %25, i1 true) #2, !dbg !20
  %136 = zext <4 x i1> %106 to <4 x i8>, !dbg !30
  %137 = bitcast <4 x i8> %136 to i32, !dbg !30
  %138 = zext <4 x i1> %130 to <4 x i8>, !dbg !30
  %139 = bitcast <4 x i8> %138 to i32, !dbg !30
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %137, i32 %139, ptr addrspace(1) %86, i1 true) #2, !dbg !30
  ret void, !dbg !31
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cjnpxdnz676obnzvqrdggdldowpv4r4zi5z5ut3rsietk22xekqd.py", directory: "inductor_cache/jn")
!4 = !{ptr @triton_poi_fused_add_relu_threshold_backward_12, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_relu_threshold_backward_12, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_relu_threshold_backward_12", linkageName: "triton_poi_fused_add_relu_threshold_backward_12", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 34, scope: !7)
!15 = !DILocation(line: 25, column: 39, scope: !7)
!16 = !DILocation(line: 26, column: 30, scope: !7)
!17 = !DILocation(line: 26, column: 35, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 35, scope: !7)
!20 = !DILocation(line: 34, column: 39, scope: !7)
!21 = !DILocation(line: 35, column: 25, scope: !7)
!22 = !DILocation(line: 118, column: 15, scope: !23, inlinedAt: !25)
!23 = distinct !DILexicalBlockFile(scope: !7, file: !24, discriminator: 0)
!24 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!25 = !DILocation(line: 29, column: 40, scope: !7)
!26 = !DILocation(line: 121, column: 29, scope: !23, inlinedAt: !25)
!27 = !DILocation(line: 30, column: 18, scope: !7)
!28 = !DILocation(line: 31, column: 18, scope: !7)
!29 = !DILocation(line: 33, column: 19, scope: !7)
!30 = !DILocation(line: 35, column: 36, scope: !7)
!31 = !DILocation(line: 35, column: 4, scope: !7)
