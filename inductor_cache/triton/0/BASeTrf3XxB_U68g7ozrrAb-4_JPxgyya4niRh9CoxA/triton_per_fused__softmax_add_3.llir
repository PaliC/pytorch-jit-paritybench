; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [74 x i8] c"inductor_cache/ir/cir2ogqxdnfch7jghg3mhfqn4tzwovovbt25pdbdcl5htua4vjjl.py\00"
@assertMessage_0 = internal constant [37 x i8] c"index out of bounds: 0 <= tmp5 < 343\00"

; Function Attrs: noreturn
declare !dbg !7 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define void @triton_per_fused__softmax_add_3(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !11 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !12
  %7 = icmp slt i32 %6, 512, !dbg !13
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !14
  %9 = and i32 %8, 31, !dbg !14
  %.frozen = freeze i32 %6, !dbg !15
  %10 = sdiv i32 %.frozen, 32, !dbg !15
  %11 = mul i32 %10, 32, !dbg !16
  %.decomposed = sub i32 %.frozen, %11, !dbg !16
  %12 = shl i32 %6, 5, !dbg !17
  %13 = or disjoint i32 %12, %9, !dbg !18
  %14 = sext i32 %13 to i64, !dbg !19
  %15 = getelementptr float, ptr addrspace(1) %0, i64 %14, !dbg !19
  %16 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %15, i1 %7, i32 0, i1 %7) #4, !dbg !20
  %17 = shl nsw i32 %.decomposed, 5, !dbg !21
  %18 = or disjoint i32 %17, %9, !dbg !22
  %19 = sext i32 %18 to i64, !dbg !23
  %20 = getelementptr i64, ptr addrspace(1) %1, i64 %19, !dbg !23
  %21 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %20, i1 %7, i1 %7) #4, !dbg !24
  %22 = add i64 %21, 343, !dbg !25
  %23 = icmp slt i64 %21, 0, !dbg !26
  %24 = select i1 %23, i64 %22, i64 %21, !dbg !27
  %25 = icmp ugt i64 %24, 342, !dbg !28
  %.not2 = and i1 %7, %25, !dbg !29
  br i1 %.not2, label %26, label %27, !dbg !29

26:                                               ; preds = %5
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 39, ptr nonnull @assertFunc_0, i64 1), !dbg !29
  unreachable, !dbg !29

27:                                               ; preds = %5
  %28 = bitcast i32 %16 to float, !dbg !20
  %29 = srem i32 %10, 4, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %30 = sext i32 %29 to i64, !dbg !31
  %.idx = shl i64 %24, 4, !dbg !32
  %31 = getelementptr i8, ptr addrspace(1) %2, i64 %.idx, !dbg !32
  %32 = getelementptr float, ptr addrspace(1) %31, i64 %30, !dbg !32
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 %7) #4, !dbg !33
  %34 = bitcast i32 %33 to float, !dbg !33
  %35 = fadd float %28, %34, !dbg !34
  %36 = select i1 %7, float %35, float 0xFFF0000000000000, !dbg !35
  %37 = bitcast float %36 to i32, !dbg !36
  %38 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %37, i32 16, i32 31), !dbg !36
  %39 = bitcast i32 %38 to float, !dbg !36
  %40 = fcmp ogt float %36, %39, !dbg !40
  %41 = fcmp uno float %36, 0.000000e+00, !dbg !42
  %42 = or i1 %40, %41, !dbg !43
  %43 = select i1 %42, float %36, float %39, !dbg !44
  %44 = bitcast float %43 to i32, !dbg !36
  %45 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %44, i32 8, i32 31), !dbg !36
  %46 = bitcast i32 %45 to float, !dbg !36
  %47 = fcmp ogt float %43, %46, !dbg !40
  %48 = fcmp uno float %43, 0.000000e+00, !dbg !42
  %49 = or i1 %47, %48, !dbg !43
  %50 = select i1 %49, float %43, float %46, !dbg !44
  %51 = bitcast float %50 to i32, !dbg !36
  %52 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %51, i32 4, i32 31), !dbg !36
  %53 = bitcast i32 %52 to float, !dbg !36
  %54 = fcmp ogt float %50, %53, !dbg !40
  %55 = fcmp uno float %50, 0.000000e+00, !dbg !42
  %56 = or i1 %54, %55, !dbg !43
  %57 = select i1 %56, float %50, float %53, !dbg !44
  %58 = bitcast float %57 to i32, !dbg !36
  %59 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %58, i32 2, i32 31), !dbg !36
  %60 = bitcast i32 %59 to float, !dbg !36
  %61 = fcmp ogt float %57, %60, !dbg !40
  %62 = fcmp uno float %57, 0.000000e+00, !dbg !42
  %63 = or i1 %61, %62, !dbg !43
  %64 = select i1 %63, float %57, float %60, !dbg !44
  %65 = bitcast float %64 to i32, !dbg !36
  %66 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %65, i32 1, i32 31), !dbg !36
  %67 = bitcast i32 %66 to float, !dbg !36
  %68 = fcmp ogt float %64, %67, !dbg !40
  %69 = fcmp uno float %64, 0.000000e+00, !dbg !42
  %70 = or i1 %68, %69, !dbg !43
  %71 = select i1 %70, float %64, float %67, !dbg !44
  %72 = fsub float %35, %71, !dbg !45
  %73 = fmul float %72, 0x3FF7154760000000, !dbg !46
  %74 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %73) #4, !dbg !46
  %75 = select i1 %7, float %74, float 0.000000e+00, !dbg !47
  %76 = bitcast float %75 to i32, !dbg !48
  %77 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %76, i32 16, i32 31), !dbg !48
  %78 = bitcast i32 %77 to float, !dbg !48
  %79 = fadd float %75, %78, !dbg !52
  %80 = bitcast float %79 to i32, !dbg !48
  %81 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %80, i32 8, i32 31), !dbg !48
  %82 = bitcast i32 %81 to float, !dbg !48
  %83 = fadd float %79, %82, !dbg !52
  %84 = bitcast float %83 to i32, !dbg !48
  %85 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %84, i32 4, i32 31), !dbg !48
  %86 = bitcast i32 %85 to float, !dbg !48
  %87 = fadd float %83, %86, !dbg !52
  %88 = bitcast float %87 to i32, !dbg !48
  %89 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %88, i32 2, i32 31), !dbg !48
  %90 = bitcast i32 %89 to float, !dbg !48
  %91 = fadd float %87, %90, !dbg !52
  %92 = bitcast float %91 to i32, !dbg !48
  %93 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %92, i32 1, i32 31), !dbg !48
  %94 = bitcast i32 %93 to float, !dbg !48
  %95 = fadd float %91, %94, !dbg !52
  %96 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %74, float %95) #4, !dbg !54
  %97 = and i32 %8, 32, !dbg !55
  %98 = icmp eq i32 %97, 0, !dbg !55
  %99 = bitcast float %96 to i32, !dbg !55
  %100 = and i1 %98, %7, !dbg !55
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %99, ptr addrspace(1) %15, i1 %100) #4, !dbg !55
  ret void, !dbg !56
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #3

attributes #0 = { noreturn }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cir2ogqxdnfch7jghg3mhfqn4tzwovovbt25pdbdcl5htua4vjjl.py", directory: "inductor_cache/ir")
!4 = !{ptr @triton_per_fused__softmax_add_3, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__softmax_add_3, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !8, file: !8, type: !9, spFlags: DISPFlagOptimized)
!8 = !DIFile(filename: "<unknown>", directory: "")
!9 = !DISubroutineType(cc: DW_CC_normal, types: !10)
!10 = !{}
!11 = distinct !DISubprogram(name: "triton_per_fused__softmax_add_3", linkageName: "triton_per_fused__softmax_add_3", scope: !3, file: !3, line: 19, type: !9, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!12 = !DILocation(line: 23, column: 28, scope: !11)
!13 = !DILocation(line: 25, column: 21, scope: !11)
!14 = !DILocation(line: 26, column: 34, scope: !11)
!15 = !DILocation(line: 32, column: 21, scope: !11)
!16 = !DILocation(line: 31, column: 19, scope: !11)
!17 = !DILocation(line: 33, column: 42, scope: !11)
!18 = !DILocation(line: 33, column: 39, scope: !11)
!19 = !DILocation(line: 33, column: 34, scope: !11)
!20 = !DILocation(line: 33, column: 47, scope: !11)
!21 = !DILocation(line: 34, column: 38, scope: !11)
!22 = !DILocation(line: 34, column: 35, scope: !11)
!23 = !DILocation(line: 34, column: 30, scope: !11)
!24 = !DILocation(line: 34, column: 43, scope: !11)
!25 = !DILocation(line: 36, column: 18, scope: !11)
!26 = !DILocation(line: 37, column: 18, scope: !11)
!27 = !DILocation(line: 38, column: 32, scope: !11)
!28 = !DILocation(line: 39, column: 37, scope: !11)
!29 = !DILocation(line: 39, column: 62, scope: !11)
!30 = !DILocation(line: 32, column: 27, scope: !11)
!31 = !DILocation(line: 40, column: 35, scope: !11)
!32 = !DILocation(line: 40, column: 30, scope: !11)
!33 = !DILocation(line: 40, column: 44, scope: !11)
!34 = !DILocation(line: 41, column: 18, scope: !11)
!35 = !DILocation(line: 43, column: 34, scope: !11)
!36 = !DILocation(line: 131, column: 29, scope: !37, inlinedAt: !39)
!37 = distinct !DILexicalBlockFile(scope: !11, file: !38, discriminator: 0)
!38 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!39 = !DILocation(line: 44, column: 39, scope: !11)
!40 = !DILocation(line: 118, column: 15, scope: !41, inlinedAt: !39)
!41 = distinct !DILexicalBlockFile(scope: !37, file: !38, discriminator: 0)
!42 = !DILocation(line: 120, column: 21, scope: !41, inlinedAt: !39)
!43 = !DILocation(line: 120, column: 16, scope: !41, inlinedAt: !39)
!44 = !DILocation(line: 121, column: 29, scope: !41, inlinedAt: !39)
!45 = !DILocation(line: 45, column: 19, scope: !11)
!46 = !DILocation(line: 46, column: 24, scope: !11)
!47 = !DILocation(line: 48, column: 35, scope: !11)
!48 = !DILocation(line: 267, column: 36, scope: !49, inlinedAt: !51)
!49 = distinct !DILexicalBlockFile(scope: !11, file: !50, discriminator: 0)
!50 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!51 = !DILocation(line: 49, column: 26, scope: !11)
!52 = !DILocation(line: 256, column: 15, scope: !53, inlinedAt: !51)
!53 = distinct !DILexicalBlockFile(scope: !49, file: !50, discriminator: 0)
!54 = !DILocation(line: 50, column: 20, scope: !11)
!55 = !DILocation(line: 51, column: 48, scope: !11)
!56 = !DILocation(line: 51, column: 4, scope: !11)
