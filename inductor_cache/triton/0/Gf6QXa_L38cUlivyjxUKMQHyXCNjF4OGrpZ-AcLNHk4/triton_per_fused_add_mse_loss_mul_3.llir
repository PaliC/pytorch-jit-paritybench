; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [74 x i8] c"inductor_cache/gf/cgfmdiki2tz4o7pjajlafnxdevqfsvap3ehewu4b6y65ufbyf3u6.py\00"
@assertMessage_0 = internal constant [35 x i8] c"index out of bounds: 0 <= tmp4 < 4\00"
@global_smem = external addrspace(3) global [0 x i8], align 16

; Function Attrs: noreturn
declare !dbg !7 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define void @triton_per_fused_add_mse_loss_mul_3(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !11 {
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = and i32 %6, 63, !dbg !12
  %8 = and i32 %6, 3, !dbg !13
  %9 = lshr i32 %6, 2, !dbg !14
  %10 = and i32 %9, 12, !dbg !14
  %11 = or disjoint i32 %10, %8, !dbg !15
  %12 = zext nneg i32 %11 to i64, !dbg !16
  %13 = getelementptr i64, ptr addrspace(1) %1, i64 %12, !dbg !16
  %14 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %13, i1 true) #4, !dbg !17
  %15 = zext nneg i32 %7 to i64, !dbg !18
  %16 = getelementptr float, ptr addrspace(1) %3, i64 %15, !dbg !18
  %17 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %16, i1 true) #4, !dbg !19
  %18 = lshr i64 %14, 61, !dbg !20
  %19 = and i64 %18, 4, !dbg !20
  %20 = add i64 %19, %14, !dbg !20
  %21 = icmp ugt i64 %20, 3, !dbg !21
  br i1 %21, label %22, label %23, !dbg !22

22:                                               ; preds = %5
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 39, ptr nonnull @assertFunc_0, i64 1), !dbg !22
  unreachable, !dbg !22

23:                                               ; preds = %5
  %24 = bitcast i32 %17 to float, !dbg !19
  %25 = and i32 %9, 3, !dbg !23
  %26 = lshr i32 %6, 5, !dbg !12
  %27 = and i32 %6, 31, !dbg !12
  tail call void @llvm.nvvm.barrier0(), !dbg !22
  %28 = shl nuw nsw i64 %20, 2, !dbg !24
  %29 = zext nneg i32 %25 to i64, !dbg !25
  %30 = or disjoint i64 %28, %29, !dbg !25
  %31 = getelementptr float, ptr addrspace(1) %2, i64 %30, !dbg !26
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 true) #4, !dbg !27
  %33 = bitcast i32 %32 to float, !dbg !27
  %34 = fsub float %33, %24, !dbg !28
  %35 = fmul float %34, %34, !dbg !29
  %36 = bitcast float %35 to i32, !dbg !30
  %37 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %36, i32 16, i32 31), !dbg !30
  %38 = bitcast i32 %37 to float, !dbg !30
  %39 = fadd float %35, %38, !dbg !34
  %40 = bitcast float %39 to i32, !dbg !30
  %41 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %40, i32 8, i32 31), !dbg !30
  %42 = bitcast i32 %41 to float, !dbg !30
  %43 = fadd float %39, %42, !dbg !34
  %44 = bitcast float %43 to i32, !dbg !30
  %45 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %44, i32 4, i32 31), !dbg !30
  %46 = bitcast i32 %45 to float, !dbg !30
  %47 = fadd float %43, %46, !dbg !34
  %48 = bitcast float %47 to i32, !dbg !30
  %49 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %48, i32 2, i32 31), !dbg !30
  %50 = bitcast i32 %49 to float, !dbg !30
  %51 = fadd float %47, %50, !dbg !34
  %52 = bitcast float %51 to i32, !dbg !30
  %53 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %52, i32 1, i32 31), !dbg !30
  %54 = bitcast i32 %53 to float, !dbg !30
  %55 = fadd float %51, %54, !dbg !34
  %56 = icmp eq i32 %27, 0, !dbg !30
  %57 = and i32 %26, 1, !dbg !30
  %58 = zext nneg i32 %57 to i64, !dbg !30
  %59 = getelementptr float, ptr addrspace(3) @global_smem, i64 %58, !dbg !30
  %60 = bitcast float %55 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %59, <1 x i32> %60, i1 %56) #4, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %61 = icmp slt i32 %6, 2, !dbg !30
  %62 = sext i32 %6 to i64, !dbg !30
  %63 = getelementptr float, ptr addrspace(3) @global_smem, i64 %62, !dbg !30
  %64 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %63, i1 %61) #4, !dbg !30
  %65 = bitcast i32 %64 to float, !dbg !30
  %66 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %64, i32 1, i32 31), !dbg !30
  %67 = bitcast i32 %66 to float, !dbg !30
  %68 = fadd float %65, %67, !dbg !34
  %69 = and i32 %6, 1, !dbg !30
  %70 = icmp eq i32 %69, 0, !dbg !30
  %71 = and i1 %61, %70, !dbg !30
  %72 = bitcast float %68 to <1 x i32>, !dbg !30
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %63, <1 x i32> %72, i1 %71) #4, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %73 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !30
  %74 = fsub float %24, %33, !dbg !36
  %75 = fmul float %74, %74, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %76 = bitcast float %75 to i32, !dbg !38
  %77 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %76, i32 16, i32 31), !dbg !38
  %78 = bitcast i32 %77 to float, !dbg !38
  %79 = fadd float %75, %78, !dbg !40
  %80 = bitcast float %79 to i32, !dbg !38
  %81 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %80, i32 8, i32 31), !dbg !38
  %82 = bitcast i32 %81 to float, !dbg !38
  %83 = fadd float %79, %82, !dbg !40
  %84 = bitcast float %83 to i32, !dbg !38
  %85 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %84, i32 4, i32 31), !dbg !38
  %86 = bitcast i32 %85 to float, !dbg !38
  %87 = fadd float %83, %86, !dbg !40
  %88 = bitcast float %87 to i32, !dbg !38
  %89 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %88, i32 2, i32 31), !dbg !38
  %90 = bitcast i32 %89 to float, !dbg !38
  %91 = fadd float %87, %90, !dbg !40
  %92 = bitcast float %91 to i32, !dbg !38
  %93 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %92, i32 1, i32 31), !dbg !38
  %94 = bitcast i32 %93 to float, !dbg !38
  %95 = fadd float %91, %94, !dbg !40
  %96 = bitcast float %95 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %59, <1 x i32> %96, i1 %56) #4, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %97 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %63, i1 %61) #4, !dbg !38
  %98 = bitcast i32 %97 to float, !dbg !38
  %99 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %97, i32 1, i32 31), !dbg !38
  %100 = bitcast i32 %99 to float, !dbg !38
  %101 = fadd float %98, %100, !dbg !40
  %102 = bitcast float %101 to <1 x i32>, !dbg !38
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %63, <1 x i32> %102, i1 %71) #4, !dbg !38
  tail call void @llvm.nvvm.barrier0(), !dbg !38
  %103 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !38
  %104 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %73, float 6.400000e+01) #4, !dbg !41
  %105 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %103, float 6.400000e+01) #4, !dbg !42
  %106 = fmul float %105, 2.500000e-01, !dbg !43
  %107 = fadd float %104, %106, !dbg !44
  tail call void @llvm.nvvm.barrier0(), !dbg !45
  %108 = icmp eq i32 %7, 0, !dbg !46
  %109 = bitcast float %107 to i32, !dbg !46
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %109, ptr addrspace(1) %0, i1 %108) #4, !dbg !46
  ret void, !dbg !47
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #3

attributes #0 = { noreturn }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cgfmdiki2tz4o7pjajlafnxdevqfsvap3ehewu4b6y65ufbyf3u6.py", directory: "inductor_cache/gf")
!4 = !{ptr @triton_per_fused_add_mse_loss_mul_3, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_mse_loss_mul_3, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !8, file: !8, type: !9, spFlags: DISPFlagOptimized)
!8 = !DIFile(filename: "<unknown>", directory: "")
!9 = !DISubroutineType(cc: DW_CC_normal, types: !10)
!10 = !{}
!11 = distinct !DISubprogram(name: "triton_per_fused_add_mse_loss_mul_3", linkageName: "triton_per_fused_add_mse_loss_mul_3", scope: !3, file: !3, line: 19, type: !9, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!12 = !DILocation(line: 26, column: 34, scope: !11)
!13 = !DILocation(line: 29, column: 19, scope: !11)
!14 = !DILocation(line: 33, column: 37, scope: !11)
!15 = !DILocation(line: 33, column: 35, scope: !11)
!16 = !DILocation(line: 33, column: 30, scope: !11)
!17 = !DILocation(line: 33, column: 42, scope: !11)
!18 = !DILocation(line: 34, column: 30, scope: !11)
!19 = !DILocation(line: 34, column: 35, scope: !11)
!20 = !DILocation(line: 38, column: 32, scope: !11)
!21 = !DILocation(line: 39, column: 36, scope: !11)
!22 = !DILocation(line: 39, column: 47, scope: !11)
!23 = !DILocation(line: 31, column: 26, scope: !11)
!24 = !DILocation(line: 40, column: 37, scope: !11)
!25 = !DILocation(line: 40, column: 35, scope: !11)
!26 = !DILocation(line: 40, column: 30, scope: !11)
!27 = !DILocation(line: 40, column: 44, scope: !11)
!28 = !DILocation(line: 41, column: 18, scope: !11)
!29 = !DILocation(line: 42, column: 18, scope: !11)
!30 = !DILocation(line: 267, column: 36, scope: !31, inlinedAt: !33)
!31 = distinct !DILexicalBlockFile(scope: !11, file: !32, discriminator: 0)
!32 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!33 = !DILocation(line: 44, column: 26, scope: !11)
!34 = !DILocation(line: 256, column: 15, scope: !35, inlinedAt: !33)
!35 = distinct !DILexicalBlockFile(scope: !31, file: !32, discriminator: 0)
!36 = !DILocation(line: 45, column: 19, scope: !11)
!37 = !DILocation(line: 46, column: 20, scope: !11)
!38 = !DILocation(line: 267, column: 36, scope: !31, inlinedAt: !39)
!39 = !DILocation(line: 48, column: 26, scope: !11)
!40 = !DILocation(line: 256, column: 15, scope: !35, inlinedAt: !39)
!41 = !DILocation(line: 50, column: 20, scope: !11)
!42 = !DILocation(line: 51, column: 20, scope: !11)
!43 = !DILocation(line: 53, column: 20, scope: !11)
!44 = !DILocation(line: 54, column: 20, scope: !11)
!45 = !DILocation(line: 55, column: 4, scope: !11)
!46 = !DILocation(line: 56, column: 71, scope: !11)
!47 = !DILocation(line: 56, column: 4, scope: !11)
