#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 2], order = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 2], order = [0, 1]}>
#loc = loc("inductor_cache/gf/cgfmdiki2tz4o7pjajlafnxdevqfsvap3ehewu4b6y65ufbyf3u6.py":19:0)
#loc1 = loc(unknown)
#loc27 = loc("inductor_cache/gf/cgfmdiki2tz4o7pjajlafnxdevqfsvap3ehewu4b6y65ufbyf3u6.py":44:26)
#loc32 = loc("inductor_cache/gf/cgfmdiki2tz4o7pjajlafnxdevqfsvap3ehewu4b6y65ufbyf3u6.py":48:26)
#loc43 = loc(callsite(#loc1 at #loc27))
#loc46 = loc(callsite(#loc1 at #loc32))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 2 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_per_fused_add_mse_loss_mul_3(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/gf/cgfmdiki2tz4o7pjajlafnxdevqfsvap3ehewu4b6y65ufbyf3u6.py":19:0), %arg1: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("inductor_cache/gf/cgfmdiki2tz4o7pjajlafnxdevqfsvap3ehewu4b6y65ufbyf3u6.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/gf/cgfmdiki2tz4o7pjajlafnxdevqfsvap3ehewu4b6y65ufbyf3u6.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/gf/cgfmdiki2tz4o7pjajlafnxdevqfsvap3ehewu4b6y65ufbyf3u6.py":19:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/gf/cgfmdiki2tz4o7pjajlafnxdevqfsvap3ehewu4b6y65ufbyf3u6.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<4> : tensor<1x64xi32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<16> : tensor<1x64xi32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<4> : tensor<1x64xi64, #blocked> loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst_2 = arith.constant dense<0> : tensor<1x64xi64, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<2.500000e-01> : tensor<1x1xf32, #blocked1> loc(#loc1)
    %cst_4 = arith.constant dense<6.400000e+01> : tensor<1x1xf32, #blocked1> loc(#loc1)
    %0 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc2)
    %1 = tt.expand_dims %0 {axis = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x64xi32, #blocked> loc(#loc2)
    %2 = arith.remsi %1, %cst : tensor<1x64xi32, #blocked> loc(#loc3)
    %3 = arith.divsi %1, %cst_0 : tensor<1x64xi32, #blocked> loc(#loc4)
    %4 = arith.divsi %1, %cst : tensor<1x64xi32, #blocked> loc(#loc5)
    %5 = arith.remsi %4, %cst : tensor<1x64xi32, #blocked> loc(#loc6)
    %6 = arith.muli %3, %cst : tensor<1x64xi32, #blocked> loc(#loc7)
    %7 = arith.addi %2, %6 : tensor<1x64xi32, #blocked> loc(#loc8)
    %8 = tt.splat %arg1 : !tt.ptr<i64> -> tensor<1x64x!tt.ptr<i64>, #blocked> loc(#loc9)
    %9 = tt.addptr %8, %7 : tensor<1x64x!tt.ptr<i64>, #blocked>, tensor<1x64xi32, #blocked> loc(#loc9)
    %10 = tt.load %9 evictionPolicy = evict_last : tensor<1x64x!tt.ptr<i64>, #blocked> loc(#loc10)
    %11 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc11)
    %12 = tt.addptr %11, %1 : tensor<1x64x!tt.ptr<f32>, #blocked>, tensor<1x64xi32, #blocked> loc(#loc11)
    %13 = tt.load %12 : tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc12)
    %14 = triton_gpu.convert_layout %13 {boundaryCheck = array<i32>, cache = 1 : i32, evict = 1 : i32, isVolatile = false, operandSegmentSizes = array<i32: 1, 0, 0>} : tensor<1x64xf32, #blocked> -> tensor<1x64xf32, #blocked1> loc(#loc12)
    %15 = arith.addi %10, %cst_1 : tensor<1x64xi64, #blocked> loc(#loc13)
    %16 = arith.cmpi slt, %10, %cst_2 : tensor<1x64xi64, #blocked> loc(#loc14)
    %17 = arith.select %16, %15, %10 : tensor<1x64xi1, #blocked>, tensor<1x64xi64, #blocked> loc(#loc15)
    %18 = arith.cmpi sge, %17, %cst_2 : tensor<1x64xi64, #blocked> loc(#loc16)
    %19 = arith.cmpi slt, %17, %cst_1 : tensor<1x64xi64, #blocked> loc(#loc17)
    %20 = arith.andi %18, %19 : tensor<1x64xi1, #blocked> loc(#loc18)
    tt.assert %20, "index out of bounds: 0 <= tmp4 < 4" : tensor<1x64xi1, #blocked> loc(#loc19)
    %21 = arith.muli %17, %cst_1 : tensor<1x64xi64, #blocked> loc(#loc20)
    %22 = arith.extsi %5 : tensor<1x64xi32, #blocked> to tensor<1x64xi64, #blocked> loc(#loc21)
    %23 = arith.addi %22, %21 : tensor<1x64xi64, #blocked> loc(#loc21)
    %24 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc22)
    %25 = tt.addptr %24, %23 : tensor<1x64x!tt.ptr<f32>, #blocked>, tensor<1x64xi64, #blocked> loc(#loc22)
    %26 = triton_gpu.convert_layout %25 : tensor<1x64x!tt.ptr<f32>, #blocked> -> tensor<1x64x!tt.ptr<f32>, #blocked1> loc(#loc23)
    %27 = tt.load %26 evictionPolicy = evict_last : tensor<1x64x!tt.ptr<f32>, #blocked1> loc(#loc23)
    %28 = arith.subf %27, %14 : tensor<1x64xf32, #blocked1> loc(#loc24)
    %29 = arith.mulf %28, %28 : tensor<1x64xf32, #blocked1> loc(#loc25)
    %30 = "tt.reduce"(%29) <{axis = 1 : i32}> ({
    ^bb0(%arg5: f32 loc(callsite(#loc1 at #loc27)), %arg6: f32 loc(callsite(#loc1 at #loc27))):
      %42 = arith.addf %arg5, %arg6 : f32 loc(#loc47)
      tt.reduce.return %42 : f32 loc(#loc42)
    }) : (tensor<1x64xf32, #blocked1>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc42)
    %31 = tt.expand_dims %30 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<1x1xf32, #blocked1> loc(#loc29)
    %32 = arith.subf %14, %27 : tensor<1x64xf32, #blocked1> loc(#loc30)
    %33 = arith.mulf %32, %32 : tensor<1x64xf32, #blocked1> loc(#loc31)
    %34 = "tt.reduce"(%33) <{axis = 1 : i32}> ({
    ^bb0(%arg5: f32 loc(callsite(#loc1 at #loc32)), %arg6: f32 loc(callsite(#loc1 at #loc32))):
      %42 = arith.addf %arg5, %arg6 : f32 loc(#loc48)
      tt.reduce.return %42 : f32 loc(#loc45)
    }) : (tensor<1x64xf32, #blocked1>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc45)
    %35 = tt.expand_dims %34 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<1x1xf32, #blocked1> loc(#loc33)
    %36 = arith.divf %31, %cst_4 : tensor<1x1xf32, #blocked1> loc(#loc34)
    %37 = arith.divf %35, %cst_4 : tensor<1x1xf32, #blocked1> loc(#loc35)
    %38 = arith.mulf %37, %cst_3 : tensor<1x1xf32, #blocked1> loc(#loc36)
    %39 = arith.addf %36, %38 : tensor<1x1xf32, #blocked1> loc(#loc37)
    gpu.barrier loc(#loc38)
    %40 = tt.addptr %arg0, %c0_i32 : !tt.ptr<f32>, i32 loc(#loc39)
    %41 = tt.splat %40 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc40)
    tt.store %41, %39 : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc40)
    tt.return loc(#loc41)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/gf/cgfmdiki2tz4o7pjajlafnxdevqfsvap3ehewu4b6y65ufbyf3u6.py":26:34)
#loc3 = loc("inductor_cache/gf/cgfmdiki2tz4o7pjajlafnxdevqfsvap3ehewu4b6y65ufbyf3u6.py":29:19)
#loc4 = loc("inductor_cache/gf/cgfmdiki2tz4o7pjajlafnxdevqfsvap3ehewu4b6y65ufbyf3u6.py":30:19)
#loc5 = loc("inductor_cache/gf/cgfmdiki2tz4o7pjajlafnxdevqfsvap3ehewu4b6y65ufbyf3u6.py":31:21)
#loc6 = loc("inductor_cache/gf/cgfmdiki2tz4o7pjajlafnxdevqfsvap3ehewu4b6y65ufbyf3u6.py":31:26)
#loc7 = loc("inductor_cache/gf/cgfmdiki2tz4o7pjajlafnxdevqfsvap3ehewu4b6y65ufbyf3u6.py":33:37)
#loc8 = loc("inductor_cache/gf/cgfmdiki2tz4o7pjajlafnxdevqfsvap3ehewu4b6y65ufbyf3u6.py":33:35)
#loc9 = loc("inductor_cache/gf/cgfmdiki2tz4o7pjajlafnxdevqfsvap3ehewu4b6y65ufbyf3u6.py":33:30)
#loc10 = loc("inductor_cache/gf/cgfmdiki2tz4o7pjajlafnxdevqfsvap3ehewu4b6y65ufbyf3u6.py":33:42)
#loc11 = loc("inductor_cache/gf/cgfmdiki2tz4o7pjajlafnxdevqfsvap3ehewu4b6y65ufbyf3u6.py":34:30)
#loc12 = loc("inductor_cache/gf/cgfmdiki2tz4o7pjajlafnxdevqfsvap3ehewu4b6y65ufbyf3u6.py":34:35)
#loc13 = loc("inductor_cache/gf/cgfmdiki2tz4o7pjajlafnxdevqfsvap3ehewu4b6y65ufbyf3u6.py":36:18)
#loc14 = loc("inductor_cache/gf/cgfmdiki2tz4o7pjajlafnxdevqfsvap3ehewu4b6y65ufbyf3u6.py":37:18)
#loc15 = loc("inductor_cache/gf/cgfmdiki2tz4o7pjajlafnxdevqfsvap3ehewu4b6y65ufbyf3u6.py":38:32)
#loc16 = loc("inductor_cache/gf/cgfmdiki2tz4o7pjajlafnxdevqfsvap3ehewu4b6y65ufbyf3u6.py":39:27)
#loc17 = loc("inductor_cache/gf/cgfmdiki2tz4o7pjajlafnxdevqfsvap3ehewu4b6y65ufbyf3u6.py":39:43)
#loc18 = loc("inductor_cache/gf/cgfmdiki2tz4o7pjajlafnxdevqfsvap3ehewu4b6y65ufbyf3u6.py":39:36)
#loc19 = loc("inductor_cache/gf/cgfmdiki2tz4o7pjajlafnxdevqfsvap3ehewu4b6y65ufbyf3u6.py":39:47)
#loc20 = loc("inductor_cache/gf/cgfmdiki2tz4o7pjajlafnxdevqfsvap3ehewu4b6y65ufbyf3u6.py":40:37)
#loc21 = loc("inductor_cache/gf/cgfmdiki2tz4o7pjajlafnxdevqfsvap3ehewu4b6y65ufbyf3u6.py":40:35)
#loc22 = loc("inductor_cache/gf/cgfmdiki2tz4o7pjajlafnxdevqfsvap3ehewu4b6y65ufbyf3u6.py":40:30)
#loc23 = loc("inductor_cache/gf/cgfmdiki2tz4o7pjajlafnxdevqfsvap3ehewu4b6y65ufbyf3u6.py":40:44)
#loc24 = loc("inductor_cache/gf/cgfmdiki2tz4o7pjajlafnxdevqfsvap3ehewu4b6y65ufbyf3u6.py":41:18)
#loc25 = loc("inductor_cache/gf/cgfmdiki2tz4o7pjajlafnxdevqfsvap3ehewu4b6y65ufbyf3u6.py":42:18)
#loc26 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc28 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc29 = loc("inductor_cache/gf/cgfmdiki2tz4o7pjajlafnxdevqfsvap3ehewu4b6y65ufbyf3u6.py":44:29)
#loc30 = loc("inductor_cache/gf/cgfmdiki2tz4o7pjajlafnxdevqfsvap3ehewu4b6y65ufbyf3u6.py":45:19)
#loc31 = loc("inductor_cache/gf/cgfmdiki2tz4o7pjajlafnxdevqfsvap3ehewu4b6y65ufbyf3u6.py":46:20)
#loc33 = loc("inductor_cache/gf/cgfmdiki2tz4o7pjajlafnxdevqfsvap3ehewu4b6y65ufbyf3u6.py":48:29)
#loc34 = loc("inductor_cache/gf/cgfmdiki2tz4o7pjajlafnxdevqfsvap3ehewu4b6y65ufbyf3u6.py":50:20)
#loc35 = loc("inductor_cache/gf/cgfmdiki2tz4o7pjajlafnxdevqfsvap3ehewu4b6y65ufbyf3u6.py":51:20)
#loc36 = loc("inductor_cache/gf/cgfmdiki2tz4o7pjajlafnxdevqfsvap3ehewu4b6y65ufbyf3u6.py":53:20)
#loc37 = loc("inductor_cache/gf/cgfmdiki2tz4o7pjajlafnxdevqfsvap3ehewu4b6y65ufbyf3u6.py":54:20)
#loc38 = loc("inductor_cache/gf/cgfmdiki2tz4o7pjajlafnxdevqfsvap3ehewu4b6y65ufbyf3u6.py":55:4)
#loc39 = loc("inductor_cache/gf/cgfmdiki2tz4o7pjajlafnxdevqfsvap3ehewu4b6y65ufbyf3u6.py":56:28)
#loc40 = loc("inductor_cache/gf/cgfmdiki2tz4o7pjajlafnxdevqfsvap3ehewu4b6y65ufbyf3u6.py":56:71)
#loc41 = loc("inductor_cache/gf/cgfmdiki2tz4o7pjajlafnxdevqfsvap3ehewu4b6y65ufbyf3u6.py":56:4)
#loc42 = loc(callsite(#loc26 at #loc27))
#loc44 = loc(callsite(#loc28 at #loc26))
#loc45 = loc(callsite(#loc26 at #loc32))
#loc47 = loc(callsite(#loc44 at #loc27))
#loc48 = loc(callsite(#loc44 at #loc32))
