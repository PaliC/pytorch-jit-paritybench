; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_mul_transpose_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %10 = shl i32 %9, 3, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 1, !dbg !12
  %13 = and i32 %12, 6, !dbg !12
  %.lobit1 = lshr i32 %11, 5, !dbg !12
  %14 = and i32 %.lobit1, 3, !dbg !12
  %15 = or disjoint i32 %10, %13, !dbg !13
  %16 = or disjoint i32 %10, %14, !dbg !13
  %17 = or disjoint i32 %16, 4, !dbg !13
  %18 = icmp slt i32 %15, 16, !dbg !14
  %19 = icmp slt i32 %16, 16, !dbg !14
  %20 = icmp slt i32 %17, 16, !dbg !14
  %21 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %22 = shl i32 %21, 5, !dbg !16
  %23 = lshr i32 %11, 2, !dbg !17
  %24 = and i32 %23, 31, !dbg !17
  %25 = and i32 %11, 31, !dbg !17
  %26 = or disjoint i32 %22, %24, !dbg !18
  %27 = or disjoint i32 %22, %25, !dbg !18
  %28 = icmp slt i32 %26, 17, !dbg !19
  %29 = icmp slt i32 %27, 17, !dbg !19
  %30 = srem i32 %15, 4, !dbg !20
  %31 = shl i32 %26, 4, !dbg !21
  %32 = add i32 %31, %15, !dbg !22
  %33 = sext i32 %32 to i64, !dbg !23
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !23
  %35 = and i1 %18, %28, !dbg !24
  %36 = and i1 %19, %29, !dbg !24
  %37 = and i1 %20, %29, !dbg !24
  %38 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %34, i1 %35) #2, !dbg !25
  %39 = extractvalue { i32, i32 } %38, 0, !dbg !25
  %40 = extractvalue { i32, i32 } %38, 1, !dbg !25
  %41 = bitcast i32 %39 to float, !dbg !25
  %42 = bitcast i32 %40 to float, !dbg !25
  %43 = icmp slt i32 %30, 0, !dbg !26
  %44 = sext i32 %30 to i64, !dbg !27
  %45 = getelementptr float, ptr addrspace(1) %1, i64 %44, !dbg !27
  %46 = getelementptr i8, ptr addrspace(1) %45, i64 16, !dbg !27
  %47 = and i1 %43, %28, !dbg !28
  %48 = and i1 %18, %47, !dbg !29
  %49 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %46, i1 %48, i32 0, i1 %48, i32 0, i1 %48) #2, !dbg !30
  %50 = extractvalue { i32, i32 } %49, 0, !dbg !30
  %51 = extractvalue { i32, i32 } %49, 1, !dbg !30
  %52 = icmp ult i32 %30, -4, !dbg !31
  %53 = getelementptr float, ptr addrspace(1) %2, i64 %44, !dbg !32
  %54 = and i1 %52, %28, !dbg !33
  %55 = and i1 %18, %54, !dbg !34
  %56 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %53, i1 %55, i32 0, i1 %55, i32 0, i1 %55) #2, !dbg !35
  %57 = extractvalue { i32, i32 } %56, 0, !dbg !35
  %58 = extractvalue { i32, i32 } %56, 1, !dbg !35
  %59 = getelementptr float, ptr addrspace(1) %3, i64 %44, !dbg !36
  %60 = getelementptr i8, ptr addrspace(1) %59, i64 -16, !dbg !36
  %61 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %60, i1 false, i32 0, i1 false, i32 0, i1 false) #2, !dbg !37
  %.v5 = select i1 %43, i32 %50, i32 %57, !dbg !38
  %62 = bitcast i32 %.v5 to float, !dbg !38
  %.v = select i1 %43, i32 %51, i32 %58, !dbg !38
  %63 = bitcast i32 %.v to float, !dbg !38
  %64 = fadd float %41, %62, !dbg !39
  %65 = fadd float %42, %63, !dbg !39
  %66 = mul i32 %16, 17, !dbg !40
  %67 = mul i32 %17, 17, !dbg !40
  %68 = add i32 %27, %66, !dbg !41
  %69 = add i32 %27, %67, !dbg !41
  %70 = sext i32 %68 to i64, !dbg !42
  %71 = getelementptr float, ptr addrspace(1) %4, i64 %70, !dbg !42
  %72 = sext i32 %69 to i64, !dbg !42
  %73 = getelementptr float, ptr addrspace(1) %4, i64 %72, !dbg !42
  %74 = shl i32 %11, 6, !dbg !43
  %75 = and i32 %74, 192, !dbg !43
  %76 = or disjoint i32 %75, %24, !dbg !43
  %77 = and i32 %11, 127, !dbg !43
  %78 = lshr exact i32 %75, 3, !dbg !43
  %79 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %78, !dbg !43
  %80 = getelementptr float, ptr addrspace(3) %79, i32 %76, !dbg !43
  %81 = bitcast float %64 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %80, <1 x i32> %81, i1 true) #2, !dbg !43
  %82 = or disjoint i32 %76, 32, !dbg !43
  %83 = lshr i32 %82, 5, !dbg !43
  %84 = getelementptr float, ptr addrspace(3) @global_smem, i32 %83, !dbg !43
  %85 = getelementptr float, ptr addrspace(3) %84, i32 %82, !dbg !43
  %86 = bitcast float %65 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %85, <1 x i32> %86, i1 true) #2, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %87 = lshr i32 %77, 5, !dbg !43
  %88 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %87, !dbg !43
  %89 = getelementptr inbounds float, ptr addrspace(3) %88, i32 %77, !dbg !43
  %90 = load i32, ptr addrspace(3) %89, align 4, !dbg !43
  %91 = or disjoint i32 %77, 128, !dbg !43
  %92 = lshr i32 %91, 5, !dbg !43
  %93 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %92, !dbg !43
  %94 = getelementptr inbounds float, ptr addrspace(3) %93, i32 %91, !dbg !43
  %95 = load i32, ptr addrspace(3) %94, align 4, !dbg !43
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %90, ptr addrspace(1) %71, i1 %36) #2, !dbg !43
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %95, ptr addrspace(1) %73, i1 %37) #2, !dbg !43
  %96 = getelementptr float, ptr addrspace(1) %5, i64 %33, !dbg !44
  %97 = bitcast float %64 to i32, !dbg !45
  %98 = bitcast float %65 to i32, !dbg !45
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %97, i32 %98, ptr addrspace(1) %96, i1 %35) #2, !dbg !45
  ret void, !dbg !46
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cks54cmlxkznbthmlpkc65dsl2ffuypvqd3acesfilusgvnlnoav.py", directory: "inductor_cache/ks")
!4 = !{ptr @triton_poi_fused_mul_transpose_4, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_mul_transpose_4, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_mul_transpose_4", linkageName: "triton_poi_fused_mul_transpose_4", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 31, column: 38, scope: !7)
!22 = !DILocation(line: 31, column: 35, scope: !7)
!23 = !DILocation(line: 31, column: 30, scope: !7)
!24 = !DILocation(line: 31, column: 51, scope: !7)
!25 = !DILocation(line: 31, column: 43, scope: !7)
!26 = !DILocation(line: 36, column: 18, scope: !7)
!27 = !DILocation(line: 37, column: 30, scope: !7)
!28 = !DILocation(line: 37, column: 81, scope: !7)
!29 = !DILocation(line: 37, column: 89, scope: !7)
!30 = !DILocation(line: 37, column: 74, scope: !7)
!31 = !DILocation(line: 38, column: 19, scope: !7)
!32 = !DILocation(line: 42, column: 31, scope: !7)
!33 = !DILocation(line: 42, column: 79, scope: !7)
!34 = !DILocation(line: 42, column: 87, scope: !7)
!35 = !DILocation(line: 42, column: 71, scope: !7)
!36 = !DILocation(line: 46, column: 31, scope: !7)
!37 = !DILocation(line: 46, column: 78, scope: !7)
!38 = !DILocation(line: 48, column: 33, scope: !7)
!39 = !DILocation(line: 49, column: 19, scope: !7)
!40 = !DILocation(line: 52, column: 33, scope: !7)
!41 = !DILocation(line: 52, column: 30, scope: !7)
!42 = !DILocation(line: 52, column: 25, scope: !7)
!43 = !DILocation(line: 52, column: 45, scope: !7)
!44 = !DILocation(line: 53, column: 25, scope: !7)
!45 = !DILocation(line: 53, column: 45, scope: !7)
!46 = !DILocation(line: 53, column: 4, scope: !7)
