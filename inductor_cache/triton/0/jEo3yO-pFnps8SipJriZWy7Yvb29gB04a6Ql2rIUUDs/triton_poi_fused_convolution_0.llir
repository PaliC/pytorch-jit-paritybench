; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_convolution_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #1, !dbg !10
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %8 = lshr i32 %7, 4, !dbg !11
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !12
  %10 = insertelement <2 x i32> poison, i32 %9, i64 0, !dbg !13
  %11 = insertelement <2 x i32> %10, i32 %6, i64 1, !dbg !13
  %12 = shl <2 x i32> %11, <i32 4, i32 6>, !dbg !13
  %13 = insertelement <2 x i32> poison, i32 %7, i64 0, !dbg !14
  %14 = insertelement <2 x i32> %13, i32 %8, i64 1, !dbg !14
  %15 = and <2 x i32> %14, <i32 15, i32 7>, !dbg !14
  %16 = or disjoint <2 x i32> %12, %15, !dbg !15
  %17 = extractelement <2 x i32> %16, i64 1, !dbg !16
  %18 = or disjoint i32 %17, 8, !dbg !16
  %19 = or disjoint i32 %17, 16, !dbg !16
  %20 = or disjoint i32 %17, 24, !dbg !16
  %21 = or disjoint i32 %17, 32, !dbg !16
  %22 = or disjoint i32 %17, 40, !dbg !16
  %23 = or disjoint i32 %17, 48, !dbg !16
  %24 = or disjoint i32 %17, 56, !dbg !16
  %25 = icmp slt i32 %17, 192, !dbg !17
  %26 = icmp slt i32 %18, 192, !dbg !17
  %27 = icmp slt i32 %19, 192, !dbg !17
  %28 = icmp slt i32 %20, 192, !dbg !17
  %29 = icmp slt i32 %21, 192, !dbg !17
  %30 = icmp slt i32 %22, 192, !dbg !17
  %31 = icmp slt i32 %23, 192, !dbg !17
  %32 = icmp slt i32 %24, 192, !dbg !17
  %33 = extractelement <2 x i32> %16, i64 0, !dbg !18
  %34 = icmp slt i32 %33, 9, !dbg !18
  %.frozen = freeze i32 %17, !dbg !19
  %35 = sdiv i32 %.frozen, 3, !dbg !19
  %36 = mul i32 %35, 3, !dbg !20
  %.decomposed = sub i32 %.frozen, %36, !dbg !20
  %.frozen1 = freeze i32 %18, !dbg !19
  %37 = sdiv i32 %.frozen1, 3, !dbg !19
  %38 = mul i32 %37, 3, !dbg !20
  %.decomposed2 = sub i32 %.frozen1, %38, !dbg !20
  %.frozen3 = freeze i32 %19, !dbg !19
  %39 = sdiv i32 %.frozen3, 3, !dbg !19
  %40 = mul i32 %39, 3, !dbg !20
  %.decomposed4 = sub i32 %.frozen3, %40, !dbg !20
  %.frozen5 = freeze i32 %20, !dbg !19
  %41 = sdiv i32 %.frozen5, 3, !dbg !19
  %42 = mul i32 %41, 3, !dbg !20
  %.decomposed6 = sub i32 %.frozen5, %42, !dbg !20
  %.frozen7 = freeze i32 %21, !dbg !19
  %43 = sdiv i32 %.frozen7, 3, !dbg !19
  %44 = mul i32 %43, 3, !dbg !20
  %.decomposed8 = sub i32 %.frozen7, %44, !dbg !20
  %.frozen9 = freeze i32 %22, !dbg !19
  %45 = sdiv i32 %.frozen9, 3, !dbg !19
  %46 = mul i32 %45, 3, !dbg !20
  %.decomposed10 = sub i32 %.frozen9, %46, !dbg !20
  %.frozen11 = freeze i32 %23, !dbg !19
  %47 = sdiv i32 %.frozen11, 3, !dbg !19
  %48 = mul i32 %47, 3, !dbg !20
  %.decomposed12 = sub i32 %.frozen11, %48, !dbg !20
  %.frozen13 = freeze i32 %24, !dbg !19
  %49 = sdiv i32 %.frozen13, 3, !dbg !19
  %50 = mul i32 %49, 3, !dbg !20
  %.decomposed14 = sub i32 %.frozen13, %50, !dbg !20
  %51 = mul i32 %17, 9, !dbg !21
  %52 = mul i32 %18, 9, !dbg !21
  %53 = mul i32 %19, 9, !dbg !21
  %54 = mul i32 %20, 9, !dbg !21
  %55 = mul i32 %21, 9, !dbg !21
  %56 = mul i32 %22, 9, !dbg !21
  %57 = mul i32 %23, 9, !dbg !21
  %58 = mul i32 %24, 9, !dbg !21
  %59 = add i32 %33, %51, !dbg !22
  %60 = add i32 %33, %52, !dbg !22
  %61 = add i32 %33, %53, !dbg !22
  %62 = add i32 %33, %54, !dbg !22
  %63 = add i32 %33, %55, !dbg !22
  %64 = add i32 %33, %56, !dbg !22
  %65 = add i32 %33, %57, !dbg !22
  %66 = add i32 %33, %58, !dbg !22
  %67 = sext i32 %59 to i64, !dbg !23
  %68 = getelementptr float, ptr addrspace(1) %0, i64 %67, !dbg !23
  %69 = sext i32 %60 to i64, !dbg !23
  %70 = getelementptr float, ptr addrspace(1) %0, i64 %69, !dbg !23
  %71 = sext i32 %61 to i64, !dbg !23
  %72 = getelementptr float, ptr addrspace(1) %0, i64 %71, !dbg !23
  %73 = sext i32 %62 to i64, !dbg !23
  %74 = getelementptr float, ptr addrspace(1) %0, i64 %73, !dbg !23
  %75 = sext i32 %63 to i64, !dbg !23
  %76 = getelementptr float, ptr addrspace(1) %0, i64 %75, !dbg !23
  %77 = sext i32 %64 to i64, !dbg !23
  %78 = getelementptr float, ptr addrspace(1) %0, i64 %77, !dbg !23
  %79 = sext i32 %65 to i64, !dbg !23
  %80 = getelementptr float, ptr addrspace(1) %0, i64 %79, !dbg !23
  %81 = sext i32 %66 to i64, !dbg !23
  %82 = getelementptr float, ptr addrspace(1) %0, i64 %81, !dbg !23
  %83 = and i1 %25, %34, !dbg !24
  %84 = and i1 %26, %34, !dbg !24
  %85 = and i1 %27, %34, !dbg !24
  %86 = and i1 %28, %34, !dbg !24
  %87 = and i1 %29, %34, !dbg !24
  %88 = and i1 %30, %34, !dbg !24
  %89 = and i1 %31, %34, !dbg !24
  %90 = and i1 %32, %34, !dbg !24
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 %83) #1, !dbg !25
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 %84) #1, !dbg !25
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 %85) #1, !dbg !25
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 %86) #1, !dbg !25
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 %87) #1, !dbg !25
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 %88) #1, !dbg !25
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %80, i1 %89) #1, !dbg !25
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 %90) #1, !dbg !25
  %99 = mul i32 %33, 3, !dbg !26
  %100 = add i32 %99, %.decomposed, !dbg !27
  %101 = mul i32 %35, 27, !dbg !28
  %102 = mul i32 %37, 27, !dbg !28
  %103 = mul i32 %39, 27, !dbg !28
  %104 = mul i32 %41, 27, !dbg !28
  %105 = mul i32 %43, 27, !dbg !28
  %106 = mul i32 %45, 27, !dbg !28
  %107 = mul i32 %47, 27, !dbg !28
  %108 = mul i32 %49, 27, !dbg !28
  %109 = add i32 %100, %101, !dbg !29
  %110 = add i32 %102, %.decomposed2, !dbg !27
  %111 = add i32 %110, %99, !dbg !29
  %112 = add i32 %103, %.decomposed4, !dbg !27
  %113 = add i32 %112, %99, !dbg !29
  %114 = add i32 %104, %.decomposed6, !dbg !27
  %115 = add i32 %114, %99, !dbg !29
  %116 = add i32 %105, %.decomposed8, !dbg !27
  %117 = add i32 %116, %99, !dbg !29
  %118 = add i32 %106, %.decomposed10, !dbg !27
  %119 = add i32 %118, %99, !dbg !29
  %120 = add i32 %107, %.decomposed12, !dbg !27
  %121 = add i32 %120, %99, !dbg !29
  %122 = add i32 %108, %.decomposed14, !dbg !27
  %123 = add i32 %122, %99, !dbg !29
  %124 = sext i32 %109 to i64, !dbg !30
  %125 = getelementptr float, ptr addrspace(1) %1, i64 %124, !dbg !30
  %126 = sext i32 %111 to i64, !dbg !30
  %127 = getelementptr float, ptr addrspace(1) %1, i64 %126, !dbg !30
  %128 = sext i32 %113 to i64, !dbg !30
  %129 = getelementptr float, ptr addrspace(1) %1, i64 %128, !dbg !30
  %130 = sext i32 %115 to i64, !dbg !30
  %131 = getelementptr float, ptr addrspace(1) %1, i64 %130, !dbg !30
  %132 = sext i32 %117 to i64, !dbg !30
  %133 = getelementptr float, ptr addrspace(1) %1, i64 %132, !dbg !30
  %134 = sext i32 %119 to i64, !dbg !30
  %135 = getelementptr float, ptr addrspace(1) %1, i64 %134, !dbg !30
  %136 = sext i32 %121 to i64, !dbg !30
  %137 = getelementptr float, ptr addrspace(1) %1, i64 %136, !dbg !30
  %138 = sext i32 %123 to i64, !dbg !30
  %139 = getelementptr float, ptr addrspace(1) %1, i64 %138, !dbg !30
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %91, ptr addrspace(1) %125, i1 %83) #1, !dbg !31
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %92, ptr addrspace(1) %127, i1 %84) #1, !dbg !31
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %93, ptr addrspace(1) %129, i1 %85) #1, !dbg !31
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %94, ptr addrspace(1) %131, i1 %86) #1, !dbg !31
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %95, ptr addrspace(1) %133, i1 %87) #1, !dbg !31
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %96, ptr addrspace(1) %135, i1 %88) #1, !dbg !31
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %97, ptr addrspace(1) %137, i1 %89) #1, !dbg !31
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %98, ptr addrspace(1) %139, i1 %90) #1, !dbg !31
  %140 = getelementptr float, ptr addrspace(1) %2, i64 %124, !dbg !32
  %141 = getelementptr float, ptr addrspace(1) %2, i64 %126, !dbg !32
  %142 = getelementptr float, ptr addrspace(1) %2, i64 %128, !dbg !32
  %143 = getelementptr float, ptr addrspace(1) %2, i64 %130, !dbg !32
  %144 = getelementptr float, ptr addrspace(1) %2, i64 %132, !dbg !32
  %145 = getelementptr float, ptr addrspace(1) %2, i64 %134, !dbg !32
  %146 = getelementptr float, ptr addrspace(1) %2, i64 %136, !dbg !32
  %147 = getelementptr float, ptr addrspace(1) %2, i64 %138, !dbg !32
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %91, ptr addrspace(1) %140, i1 %83) #1, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %92, ptr addrspace(1) %141, i1 %84) #1, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %93, ptr addrspace(1) %142, i1 %85) #1, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %94, ptr addrspace(1) %143, i1 %86) #1, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %95, ptr addrspace(1) %144, i1 %87) #1, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %96, ptr addrspace(1) %145, i1 %88) #1, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %97, ptr addrspace(1) %146, i1 %89) #1, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %98, ptr addrspace(1) %147, i1 %90) #1, !dbg !33
  ret void, !dbg !34
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cowslhbp6dpvpu6fmftoqq6nd7nxrdrmt57rh2kw3sghz6wtt7if.py", directory: "inductor_cache/ow")
!4 = !{ptr @triton_poi_fused_convolution_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_0, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_0", linkageName: "triton_poi_fused_convolution_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 44, scope: !7)
!12 = !DILocation(line: 25, column: 28, scope: !7)
!13 = !DILocation(line: 25, column: 33, scope: !7)
!14 = !DILocation(line: 26, column: 44, scope: !7)
!15 = !DILocation(line: 26, column: 23, scope: !7)
!16 = !DILocation(line: 23, column: 23, scope: !7)
!17 = !DILocation(line: 24, column: 21, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 31, column: 19, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 37, scope: !7)
!22 = !DILocation(line: 32, column: 35, scope: !7)
!23 = !DILocation(line: 32, column: 30, scope: !7)
!24 = !DILocation(line: 32, column: 50, scope: !7)
!25 = !DILocation(line: 32, column: 42, scope: !7)
!26 = !DILocation(line: 33, column: 32, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 33, column: 40, scope: !7)
!29 = !DILocation(line: 33, column: 37, scope: !7)
!30 = !DILocation(line: 33, column: 25, scope: !7)
!31 = !DILocation(line: 33, column: 51, scope: !7)
!32 = !DILocation(line: 34, column: 25, scope: !7)
!33 = !DILocation(line: 34, column: 51, scope: !7)
!34 = !DILocation(line: 34, column: 4, scope: !7)
