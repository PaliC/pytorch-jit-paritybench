; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_mv_29(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !11
  %8 = and i32 %7, 31, !dbg !11
  %9 = lshr i32 %7, 5, !dbg !11
  %10 = shl i32 %7, 2, !dbg !11
  %11 = and i32 %10, 1020, !dbg !11
  %12 = shl i32 %6, 10, !dbg !12
  %13 = or disjoint i32 %12, %11, !dbg !13
  %14 = sext i32 %13 to i64, !dbg !14
  %15 = getelementptr float, ptr addrspace(1) %0, i64 %14, !dbg !14
  %16 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %15, i1 true) #3, !dbg !15
  %17 = extractvalue { i32, i32, i32, i32 } %16, 0, !dbg !15
  %18 = extractvalue { i32, i32, i32, i32 } %16, 1, !dbg !15
  %19 = extractvalue { i32, i32, i32, i32 } %16, 2, !dbg !15
  %20 = extractvalue { i32, i32, i32, i32 } %16, 3, !dbg !15
  %21 = zext nneg i32 %11 to i64, !dbg !16
  %22 = getelementptr float, ptr addrspace(1) %1, i64 %21, !dbg !16
  %23 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %22, i1 true) #3, !dbg !17
  %24 = extractvalue { i32, i32, i32, i32 } %23, 0, !dbg !17
  %25 = extractvalue { i32, i32, i32, i32 } %23, 1, !dbg !17
  %26 = extractvalue { i32, i32, i32, i32 } %23, 2, !dbg !17
  %27 = extractvalue { i32, i32, i32, i32 } %23, 3, !dbg !17
  %28 = insertelement <2 x i32> poison, i32 %17, i64 0, !dbg !15
  %29 = insertelement <2 x i32> %28, i32 %18, i64 1, !dbg !15
  %30 = bitcast <2 x i32> %29 to <2 x float>, !dbg !15
  %31 = insertelement <2 x i32> poison, i32 %24, i64 0, !dbg !17
  %32 = insertelement <2 x i32> %31, i32 %25, i64 1, !dbg !17
  %33 = bitcast <2 x i32> %32 to <2 x float>, !dbg !17
  %34 = fmul <2 x float> %30, %33, !dbg !18
  %35 = insertelement <2 x i32> poison, i32 %20, i64 0, !dbg !15
  %36 = insertelement <2 x i32> %35, i32 %19, i64 1, !dbg !15
  %37 = bitcast <2 x i32> %36 to <2 x float>, !dbg !15
  %38 = insertelement <2 x i32> poison, i32 %27, i64 0, !dbg !17
  %39 = insertelement <2 x i32> %38, i32 %26, i64 1, !dbg !17
  %40 = bitcast <2 x i32> %39 to <2 x float>, !dbg !17
  %41 = fmul <2 x float> %37, %40, !dbg !18
  %shift = shufflevector <2 x float> %34, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !19
  %42 = fadd <2 x float> %34, %shift, !dbg !19
  %shift1 = shufflevector <2 x float> %41, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !19
  %43 = fadd <2 x float> %shift1, %42, !dbg !19
  %44 = fadd <2 x float> %41, %43, !dbg !19
  %45 = extractelement <2 x float> %44, i64 0, !dbg !19
  %46 = bitcast float %45 to i32, !dbg !24
  %47 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %46, i32 16, i32 31), !dbg !24
  %48 = bitcast i32 %47 to float, !dbg !24
  %49 = fadd float %45, %48, !dbg !19
  %50 = bitcast float %49 to i32, !dbg !24
  %51 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %50, i32 8, i32 31), !dbg !24
  %52 = bitcast i32 %51 to float, !dbg !24
  %53 = fadd float %49, %52, !dbg !19
  %54 = bitcast float %53 to i32, !dbg !24
  %55 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %54, i32 4, i32 31), !dbg !24
  %56 = bitcast i32 %55 to float, !dbg !24
  %57 = fadd float %53, %56, !dbg !19
  %58 = bitcast float %57 to i32, !dbg !24
  %59 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %58, i32 2, i32 31), !dbg !24
  %60 = bitcast i32 %59 to float, !dbg !24
  %61 = fadd float %57, %60, !dbg !19
  %62 = bitcast float %61 to i32, !dbg !24
  %63 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %62, i32 1, i32 31), !dbg !24
  %64 = bitcast i32 %63 to float, !dbg !24
  %65 = fadd float %61, %64, !dbg !19
  %66 = icmp eq i32 %8, 0, !dbg !24
  %67 = and i32 %9, 7, !dbg !24
  %68 = zext nneg i32 %67 to i64, !dbg !24
  %69 = getelementptr float, ptr addrspace(3) @global_smem, i64 %68, !dbg !24
  %70 = bitcast float %65 to <1 x i32>, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %69, <1 x i32> %70, i1 %66) #3, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %71 = icmp slt i32 %7, 8, !dbg !24
  %72 = sext i32 %7 to i64, !dbg !24
  %73 = getelementptr float, ptr addrspace(3) @global_smem, i64 %72, !dbg !24
  %74 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %73, i1 %71) #3, !dbg !24
  %75 = bitcast i32 %74 to float, !dbg !24
  %76 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %74, i32 4, i32 31), !dbg !24
  %77 = bitcast i32 %76 to float, !dbg !24
  %78 = fadd float %75, %77, !dbg !19
  %79 = bitcast float %78 to i32, !dbg !24
  %80 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %79, i32 2, i32 31), !dbg !24
  %81 = bitcast i32 %80 to float, !dbg !24
  %82 = fadd float %78, %81, !dbg !19
  %83 = bitcast float %82 to i32, !dbg !24
  %84 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %83, i32 1, i32 31), !dbg !24
  %85 = bitcast i32 %84 to float, !dbg !24
  %86 = fadd float %82, %85, !dbg !19
  %87 = and i32 %7, 7, !dbg !24
  %88 = icmp eq i32 %87, 0, !dbg !24
  %89 = and i1 %71, %88, !dbg !24
  %90 = bitcast float %86 to <1 x i32>, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %73, <1 x i32> %90, i1 %89) #3, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %91 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !24
  %92 = fadd float %91, 0.000000e+00, !dbg !25
  %93 = sext i32 %6 to i64, !dbg !29
  %94 = getelementptr float, ptr addrspace(1) %2, i64 %93, !dbg !29
  %urem = and i32 %7, 255, !dbg !30
  %95 = icmp eq i32 %urem, 0, !dbg !30
  %96 = bitcast float %92 to i32, !dbg !30
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %96, ptr addrspace(1) %94, i1 %95) #3, !dbg !30
  ret void, !dbg !31
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cz2r72crrr7vx3xsbahgko626mgxnbncnh2m5vyfp33t6xzed5ae.py", directory: "inductor_cache/z2")
!4 = !{ptr @triton_per_fused_mv_29, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_mv_29, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_mv_29", linkageName: "triton_per_fused_mv_29", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 24, column: 28, scope: !7)
!11 = !DILocation(line: 27, column: 26, scope: !7)
!12 = !DILocation(line: 32, column: 40, scope: !7)
!13 = !DILocation(line: 32, column: 35, scope: !7)
!14 = !DILocation(line: 32, column: 30, scope: !7)
!15 = !DILocation(line: 32, column: 45, scope: !7)
!16 = !DILocation(line: 33, column: 30, scope: !7)
!17 = !DILocation(line: 33, column: 35, scope: !7)
!18 = !DILocation(line: 34, column: 18, scope: !7)
!19 = !DILocation(line: 256, column: 15, scope: !20, inlinedAt: !23)
!20 = distinct !DILexicalBlockFile(scope: !22, file: !21, discriminator: 0)
!21 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!22 = distinct !DILexicalBlockFile(scope: !7, file: !21, discriminator: 0)
!23 = !DILocation(line: 36, column: 57, scope: !7)
!24 = !DILocation(line: 267, column: 36, scope: !22, inlinedAt: !23)
!25 = !DILocation(line: 73, column: 15, scope: !26, inlinedAt: !28)
!26 = distinct !DILexicalBlockFile(scope: !7, file: !27, discriminator: 0)
!27 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!28 = !DILocation(line: 36, column: 44, scope: !7)
!29 = !DILocation(line: 37, column: 25, scope: !7)
!30 = !DILocation(line: 37, column: 36, scope: !7)
!31 = !DILocation(line: 37, column: 4, scope: !7)
