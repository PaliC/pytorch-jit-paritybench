; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_49(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, i32 %15) local_unnamed_addr !dbg !7 {
  %17 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %18 = shl i32 %17, 9, !dbg !11
  %19 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %20 = shl i32 %19, 1, !dbg !12
  %21 = and i32 %20, 510, !dbg !12
  %22 = or disjoint i32 %18, %21, !dbg !13
  %23 = icmp slt i32 %22, 99328, !dbg !14
  %.frozen = freeze i32 %22, !dbg !15
  %24 = sdiv i32 %.frozen, 16, !dbg !15
  %25 = srem i32 %24, 1552, !dbg !16
  %26 = mul i32 %24, 16, !dbg !17
  %.decomposed = sub i32 %.frozen, %26, !dbg !17
  %.frozen22 = freeze i32 %22, !dbg !18
  %27 = sdiv i32 %.frozen22, 24832, !dbg !18
  %28 = sext i32 %25 to i64, !dbg !19
  %29 = getelementptr float, ptr addrspace(1) %4, i64 %28, !dbg !19
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 %23) #3, !dbg !20
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 %23) #3, !dbg !20
  %32 = getelementptr float, ptr addrspace(1) %5, i64 %28, !dbg !21
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 %23) #3, !dbg !22
  %34 = bitcast i32 %33 to float, !dbg !22
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 %23) #3, !dbg !22
  %36 = bitcast i32 %35 to float, !dbg !22
  %37 = getelementptr float, ptr addrspace(1) %6, i64 %28, !dbg !23
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %23) #3, !dbg !24
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %23) #3, !dbg !24
  %40 = getelementptr float, ptr addrspace(1) %7, i64 %28, !dbg !25
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 %23) #3, !dbg !26
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 %23) #3, !dbg !26
  %43 = getelementptr float, ptr addrspace(1) %8, i64 %28, !dbg !27
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 %23) #3, !dbg !28
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 %23) #3, !dbg !28
  %46 = getelementptr float, ptr addrspace(1) %9, i64 %28, !dbg !29
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 %23) #3, !dbg !30
  %48 = bitcast i32 %47 to float, !dbg !30
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 %23) #3, !dbg !30
  %50 = bitcast i32 %49 to float, !dbg !30
  %51 = getelementptr float, ptr addrspace(1) %10, i64 %28, !dbg !31
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 %23) #3, !dbg !32
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 %23) #3, !dbg !32
  %54 = getelementptr float, ptr addrspace(1) %11, i64 %28, !dbg !33
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 %23) #3, !dbg !34
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 %23) #3, !dbg !34
  %57 = icmp slt i32 %25, 1024, !dbg !35
  %58 = mul i32 %27, 24832, !dbg !36
  %srem.decomposed = sub i32 %.frozen22, %58, !dbg !36
  %59 = mul nsw i32 %27, 24064, !dbg !37
  %60 = add nsw i32 %59, %srem.decomposed, !dbg !38
  %61 = sext i32 %60 to i64, !dbg !39
  %62 = getelementptr float, ptr addrspace(1) %0, i64 %61, !dbg !39
  %63 = and i1 %23, %57, !dbg !40
  %64 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %62, i1 %63, i32 0, i1 %63, i32 0, i1 %63) #3, !dbg !41
  %65 = mul nsw i32 %27, 16768, !dbg !42
  %66 = add nsw i32 %65, %srem.decomposed, !dbg !43
  %67 = sext i32 %66 to i64, !dbg !44
  %68 = getelementptr float, ptr addrspace(1) %1, i64 %67, !dbg !44
  %69 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %68, i1 %63, i32 0, i1 %63, i32 0, i1 %63) #3, !dbg !45
  %70 = getelementptr float, ptr addrspace(1) %2, i64 %67, !dbg !46
  %71 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %70, i1 %63, i32 0, i1 %63, i32 0, i1 %63) #3, !dbg !47
  %72 = add nsw i32 %25, -1024, !dbg !48
  %73 = icmp ult i32 %72, 480, !dbg !49
  %74 = shl nsw i32 %25, 4, !dbg !50
  %75 = add nsw i32 %.decomposed, -16384, !dbg !50
  %76 = add nsw i32 %75, %59, !dbg !51
  %77 = add nsw i32 %76, %74, !dbg !52
  %78 = sext i32 %77 to i64, !dbg !53
  %79 = getelementptr float, ptr addrspace(1) %3, i64 %78, !dbg !53
  %80 = and i1 %23, %73, !dbg !54
  %81 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %79, i1 %80, i32 0, i1 %80, i32 0, i1 %80) #3, !dbg !55
  %82 = add nsw i32 %25, -1504, !dbg !56
  %83 = icmp ult i32 %82, 24, !dbg !56
  %84 = add nsw i32 %.decomposed, 16384, !dbg !57
  %85 = add nsw i32 %65, %84, !dbg !58
  %86 = add nsw i32 %85, -24064, !dbg !59
  %87 = add nsw i32 %86, %74, !dbg !60
  %88 = sext i32 %87 to i64, !dbg !61
  %89 = getelementptr float, ptr addrspace(1) %1, i64 %88, !dbg !61
  %90 = and i1 %23, %83, !dbg !62
  %91 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %89, i1 %90, i32 0, i1 %90, i32 0, i1 %90) #3, !dbg !63
  %92 = icmp sgt i32 %25, 1527, !dbg !64
  %93 = add nsw i32 %85, -24448, !dbg !65
  %94 = add nsw i32 %93, %74, !dbg !66
  %95 = sext i32 %94 to i64, !dbg !67
  %96 = getelementptr float, ptr addrspace(1) %2, i64 %95, !dbg !67
  %97 = and i1 %23, %92, !dbg !68
  %98 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %96, i1 %97, i32 0, i1 %97, i32 0, i1 %97) #3, !dbg !69
  %99 = fadd float %34, 0x3F50624DE0000000, !dbg !70
  %100 = fadd float %36, 0x3F50624DE0000000, !dbg !70
  %101 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !71
  %.not.i = icmp eq i32 %101, 0, !dbg !71
  %102 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !71
  %.not1.i = icmp eq i32 %102, 0, !dbg !71
  br i1 %.not.i, label %108, label %103, !dbg !71

103:                                              ; preds = %16
  br i1 %.not1.i, label %106, label %104, !dbg !71

104:                                              ; preds = %103
  %105 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %99) #3, !dbg !71
  br label %__nv_sqrtf.exit, !dbg !71

106:                                              ; preds = %103
  %107 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %99) #3, !dbg !71
  br label %__nv_sqrtf.exit, !dbg !71

108:                                              ; preds = %16
  br i1 %.not1.i, label %111, label %109, !dbg !71

109:                                              ; preds = %108
  %110 = tail call float @llvm.nvvm.sqrt.rn.f(float %99) #3, !dbg !71
  br label %__nv_sqrtf.exit, !dbg !71

111:                                              ; preds = %108
  %112 = tail call float @llvm.nvvm.sqrt.approx.f(float %99) #3, !dbg !71
  br label %__nv_sqrtf.exit, !dbg !71

__nv_sqrtf.exit:                                  ; preds = %104, %106, %109, %111
  %.0.i = phi float [ %105, %104 ], [ %107, %106 ], [ %110, %109 ], [ %112, %111 ], !dbg !71
  %113 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !71
  %.not.i2 = icmp eq i32 %113, 0, !dbg !71
  %114 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !71
  %.not1.i5 = icmp eq i32 %114, 0, !dbg !71
  br i1 %.not.i2, label %120, label %115, !dbg !71

115:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i5, label %118, label %116, !dbg !71

116:                                              ; preds = %115
  %117 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %100) #3, !dbg !71
  br label %__nv_sqrtf.exit6, !dbg !71

118:                                              ; preds = %115
  %119 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %100) #3, !dbg !71
  br label %__nv_sqrtf.exit6, !dbg !71

120:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i5, label %123, label %121, !dbg !71

121:                                              ; preds = %120
  %122 = tail call float @llvm.nvvm.sqrt.rn.f(float %100) #3, !dbg !71
  br label %__nv_sqrtf.exit6, !dbg !71

123:                                              ; preds = %120
  %124 = tail call float @llvm.nvvm.sqrt.approx.f(float %100) #3, !dbg !71
  br label %__nv_sqrtf.exit6, !dbg !71

__nv_sqrtf.exit6:                                 ; preds = %116, %118, %121, %123
  %.0.i4 = phi float [ %117, %116 ], [ %119, %118 ], [ %122, %121 ], [ %124, %123 ], !dbg !71
  %125 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !72
  %126 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i4) #3, !dbg !72
  %127 = fadd float %48, 0x3F50624DE0000000, !dbg !73
  %128 = fadd float %50, 0x3F50624DE0000000, !dbg !73
  %129 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !74
  %.not.i7 = icmp eq i32 %129, 0, !dbg !74
  %130 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !74
  %.not1.i10 = icmp eq i32 %130, 0, !dbg !74
  br i1 %.not.i7, label %136, label %131, !dbg !74

131:                                              ; preds = %__nv_sqrtf.exit6
  br i1 %.not1.i10, label %134, label %132, !dbg !74

132:                                              ; preds = %131
  %133 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %127) #3, !dbg !74
  br label %__nv_sqrtf.exit11, !dbg !74

134:                                              ; preds = %131
  %135 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %127) #3, !dbg !74
  br label %__nv_sqrtf.exit11, !dbg !74

136:                                              ; preds = %__nv_sqrtf.exit6
  br i1 %.not1.i10, label %139, label %137, !dbg !74

137:                                              ; preds = %136
  %138 = tail call float @llvm.nvvm.sqrt.rn.f(float %127) #3, !dbg !74
  br label %__nv_sqrtf.exit11, !dbg !74

139:                                              ; preds = %136
  %140 = tail call float @llvm.nvvm.sqrt.approx.f(float %127) #3, !dbg !74
  br label %__nv_sqrtf.exit11, !dbg !74

__nv_sqrtf.exit11:                                ; preds = %132, %134, %137, %139
  %.0.i9 = phi float [ %133, %132 ], [ %135, %134 ], [ %138, %137 ], [ %140, %139 ], !dbg !74
  %141 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !74
  %.not.i12 = icmp eq i32 %141, 0, !dbg !74
  %142 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !74
  %.not1.i15 = icmp eq i32 %142, 0, !dbg !74
  br i1 %.not.i12, label %148, label %143, !dbg !74

143:                                              ; preds = %__nv_sqrtf.exit11
  br i1 %.not1.i15, label %146, label %144, !dbg !74

144:                                              ; preds = %143
  %145 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %128) #3, !dbg !74
  br label %__nv_sqrtf.exit16, !dbg !74

146:                                              ; preds = %143
  %147 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %128) #3, !dbg !74
  br label %__nv_sqrtf.exit16, !dbg !74

148:                                              ; preds = %__nv_sqrtf.exit11
  br i1 %.not1.i15, label %151, label %149, !dbg !74

149:                                              ; preds = %148
  %150 = tail call float @llvm.nvvm.sqrt.rn.f(float %128) #3, !dbg !74
  br label %__nv_sqrtf.exit16, !dbg !74

151:                                              ; preds = %148
  %152 = tail call float @llvm.nvvm.sqrt.approx.f(float %128) #3, !dbg !74
  br label %__nv_sqrtf.exit16, !dbg !74

__nv_sqrtf.exit16:                                ; preds = %144, %146, %149, %151
  %.0.i14 = phi float [ %145, %144 ], [ %147, %146 ], [ %150, %149 ], [ %152, %151 ], !dbg !74
  %153 = extractvalue { i32, i32 } %64, 1, !dbg !41
  %154 = extractvalue { i32, i32 } %69, 1, !dbg !45
  %155 = extractvalue { i32, i32 } %71, 1, !dbg !47
  %156 = icmp slt i32 %25, 1528, !dbg !75
  %157 = icmp ult i32 %72, 504, !dbg !48
  %158 = icmp slt i32 %25, 1504, !dbg !76
  %159 = extractvalue { i32, i32 } %81, 1, !dbg !55
  %160 = extractvalue { i32, i32 } %91, 1, !dbg !63
  %161 = extractvalue { i32, i32 } %98, 1, !dbg !69
  %162 = insertelement <4 x i32> poison, i32 %45, i64 0, !dbg !28
  %163 = insertelement <4 x i32> %162, i32 %44, i64 1, !dbg !28
  %164 = insertelement <4 x i32> %163, i32 %30, i64 2, !dbg !28
  %165 = insertelement <4 x i32> %164, i32 %31, i64 3, !dbg !28
  %166 = bitcast <4 x i32> %165 to <4 x float>, !dbg !28
  %167 = extractvalue { i32, i32 } %64, 0, !dbg !41
  %168 = extractvalue { i32, i32 } %69, 0, !dbg !45
  %169 = extractvalue { i32, i32 } %71, 0, !dbg !47
  %170 = extractvalue { i32, i32 } %81, 0, !dbg !55
  %171 = extractvalue { i32, i32 } %91, 0, !dbg !63
  %172 = extractvalue { i32, i32 } %98, 0, !dbg !69
  %173 = insertelement <4 x i32> poison, i32 %53, i64 0, !dbg !32
  %174 = insertelement <4 x i32> %173, i32 %52, i64 1, !dbg !32
  %175 = insertelement <4 x i32> %174, i32 %38, i64 2, !dbg !32
  %176 = insertelement <4 x i32> %175, i32 %39, i64 3, !dbg !32
  %177 = bitcast <4 x i32> %176 to <4 x float>, !dbg !32
  %178 = insertelement <4 x i32> poison, i32 %56, i64 0, !dbg !34
  %179 = insertelement <4 x i32> %178, i32 %55, i64 1, !dbg !34
  %180 = insertelement <4 x i32> %179, i32 %41, i64 2, !dbg !34
  %181 = insertelement <4 x i32> %180, i32 %42, i64 3, !dbg !34
  %182 = bitcast <4 x i32> %181 to <4 x float>, !dbg !34
  %183 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i9) #3, !dbg !77
  %184 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i14) #3, !dbg !77
  %185 = insertelement <2 x i32> poison, i32 %153, i64 0, !dbg !41
  %186 = insertelement <2 x i32> %185, i32 %167, i64 1, !dbg !41
  %187 = bitcast <2 x i32> %186 to <2 x float>, !dbg !41
  %188 = insertelement <2 x i32> poison, i32 %154, i64 0, !dbg !45
  %189 = insertelement <2 x i32> %188, i32 %168, i64 1, !dbg !45
  %190 = bitcast <2 x i32> %189 to <2 x float>, !dbg !45
  %191 = fadd <2 x float> %187, %190, !dbg !78
  %192 = insertelement <2 x i32> poison, i32 %155, i64 0, !dbg !47
  %193 = insertelement <2 x i32> %192, i32 %169, i64 1, !dbg !47
  %194 = bitcast <2 x i32> %193 to <2 x float>, !dbg !47
  %195 = fadd <2 x float> %191, %194, !dbg !79
  %196 = insertelement <2 x i1> poison, i1 %158, i64 0, !dbg !80
  %197 = shufflevector <2 x i1> %196, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !80
  %198 = insertelement <2 x i32> poison, i32 %159, i64 0, !dbg !80
  %199 = insertelement <2 x i32> %198, i32 %170, i64 1, !dbg !80
  %200 = insertelement <2 x i32> poison, i32 %160, i64 0, !dbg !80
  %201 = insertelement <2 x i32> %200, i32 %171, i64 1, !dbg !80
  %202 = select <2 x i1> %197, <2 x i32> %199, <2 x i32> %201, !dbg !80
  %203 = bitcast <2 x i32> %202 to <2 x float>, !dbg !80
  %204 = insertelement <2 x i1> poison, i1 %157, i64 0, !dbg !81
  %205 = shufflevector <2 x i1> %204, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !81
  %206 = select <2 x i1> %205, <2 x float> %203, <2 x float> zeroinitializer, !dbg !81
  %207 = insertelement <2 x i32> poison, i32 %161, i64 0, !dbg !69
  %208 = insertelement <2 x i32> %207, i32 %172, i64 1, !dbg !69
  %209 = bitcast <2 x i32> %208 to <2 x float>, !dbg !69
  %210 = insertelement <2 x i1> poison, i1 %156, i64 0, !dbg !82
  %211 = shufflevector <2 x i1> %210, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !82
  %212 = select <2 x i1> %211, <2 x float> %206, <2 x float> %209, !dbg !82
  %213 = insertelement <2 x i1> poison, i1 %57, i64 0, !dbg !83
  %214 = shufflevector <2 x i1> %213, <2 x i1> poison, <2 x i32> zeroinitializer, !dbg !83
  %215 = select <2 x i1> %214, <2 x float> %195, <2 x float> %212, !dbg !83
  %216 = shufflevector <2 x float> %215, <2 x float> poison, <4 x i32> <i32 0, i32 1, i32 1, i32 0>, !dbg !83
  %217 = fsub <4 x float> %216, %166, !dbg !84
  %218 = insertelement <4 x float> poison, float %184, i64 0, !dbg !85
  %219 = insertelement <4 x float> %218, float %183, i64 1, !dbg !85
  %220 = insertelement <4 x float> %219, float %125, i64 2, !dbg !85
  %221 = insertelement <4 x float> %220, float %126, i64 3, !dbg !85
  %222 = fmul <4 x float> %217, %221, !dbg !85
  %223 = fmul <4 x float> %222, %177, !dbg !86
  %224 = fadd <4 x float> %223, %182, !dbg !87
  %225 = fcmp olt <4 x float> %224, zeroinitializer, !dbg !88
  %226 = extractelement <4 x i1> %225, i64 3, !dbg !92
  %227 = extractelement <4 x i1> %225, i64 2, !dbg !92
  %228 = extractelement <4 x i1> %225, i64 1, !dbg !94
  %229 = extractelement <4 x i1> %225, i64 0, !dbg !94
  %230 = sext i32 %22 to i64, !dbg !95
  %231 = getelementptr float, ptr addrspace(1) %12, i64 %230, !dbg !95
  %bc = bitcast <2 x float> %215 to <2 x i32>, !dbg !96
  %232 = extractelement <2 x i32> %bc, i64 1, !dbg !96
  %bc17 = bitcast <2 x float> %215 to <2 x i32>, !dbg !96
  %233 = extractelement <2 x i32> %bc17, i64 0, !dbg !96
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %232, i32 %233, ptr addrspace(1) %231, i1 %23) #3, !dbg !96
  %234 = getelementptr float, ptr addrspace(1) %13, i64 %230, !dbg !97
  %bc18 = bitcast <4 x float> %224 to <4 x i32>, !dbg !98
  %235 = extractelement <4 x i32> %bc18, i64 2, !dbg !98
  %236 = select i1 %227, i32 0, i32 %235, !dbg !92
  %bc19 = bitcast <4 x float> %224 to <4 x i32>, !dbg !98
  %237 = extractelement <4 x i32> %bc19, i64 3, !dbg !98
  %238 = select i1 %226, i32 0, i32 %237, !dbg !92
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %236, i32 %238, ptr addrspace(1) %234, i1 %23) #3, !dbg !98
  %239 = getelementptr float, ptr addrspace(1) %14, i64 %230, !dbg !99
  %bc20 = bitcast <4 x float> %224 to <4 x i32>, !dbg !100
  %240 = extractelement <4 x i32> %bc20, i64 1, !dbg !100
  %241 = select i1 %228, i32 0, i32 %240, !dbg !94
  %bc21 = bitcast <4 x float> %224 to <4 x i32>, !dbg !100
  %242 = extractelement <4 x i32> %bc21, i64 0, !dbg !100
  %243 = select i1 %229, i32 0, i32 %242, !dbg !94
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %241, i32 %243, ptr addrspace(1) %239, i1 %23) #3, !dbg !100
  ret void, !dbg !101
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cp3oz5bdfnkm4qy7p3ggq7cu6bqcxzko67y2c2hueyeen3fxoleh.py", directory: "inductor_cache/p3")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_49, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_49, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_49", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_49", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 27, scope: !7)
!17 = !DILocation(line: 25, column: 19, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 28, column: 31, scope: !7)
!20 = !DILocation(line: 28, column: 36, scope: !7)
!21 = !DILocation(line: 29, column: 31, scope: !7)
!22 = !DILocation(line: 29, column: 36, scope: !7)
!23 = !DILocation(line: 30, column: 31, scope: !7)
!24 = !DILocation(line: 30, column: 36, scope: !7)
!25 = !DILocation(line: 31, column: 31, scope: !7)
!26 = !DILocation(line: 31, column: 36, scope: !7)
!27 = !DILocation(line: 32, column: 31, scope: !7)
!28 = !DILocation(line: 32, column: 36, scope: !7)
!29 = !DILocation(line: 33, column: 31, scope: !7)
!30 = !DILocation(line: 33, column: 36, scope: !7)
!31 = !DILocation(line: 34, column: 32, scope: !7)
!32 = !DILocation(line: 34, column: 37, scope: !7)
!33 = !DILocation(line: 35, column: 32, scope: !7)
!34 = !DILocation(line: 35, column: 37, scope: !7)
!35 = !DILocation(line: 40, column: 18, scope: !7)
!36 = !DILocation(line: 41, column: 35, scope: !7)
!37 = !DILocation(line: 41, column: 51, scope: !7)
!38 = !DILocation(line: 41, column: 45, scope: !7)
!39 = !DILocation(line: 41, column: 30, scope: !7)
!40 = !DILocation(line: 41, column: 63, scope: !7)
!41 = !DILocation(line: 41, column: 56, scope: !7)
!42 = !DILocation(line: 42, column: 51, scope: !7)
!43 = !DILocation(line: 42, column: 45, scope: !7)
!44 = !DILocation(line: 42, column: 30, scope: !7)
!45 = !DILocation(line: 42, column: 56, scope: !7)
!46 = !DILocation(line: 44, column: 30, scope: !7)
!47 = !DILocation(line: 44, column: 56, scope: !7)
!48 = !DILocation(line: 56, column: 20, scope: !7)
!49 = !DILocation(line: 62, column: 20, scope: !7)
!50 = !DILocation(line: 63, column: 40, scope: !7)
!51 = !DILocation(line: 63, column: 36, scope: !7)
!52 = !DILocation(line: 63, column: 56, scope: !7)
!53 = !DILocation(line: 63, column: 31, scope: !7)
!54 = !DILocation(line: 63, column: 75, scope: !7)
!55 = !DILocation(line: 63, column: 67, scope: !7)
!56 = !DILocation(line: 67, column: 20, scope: !7)
!57 = !DILocation(line: 68, column: 39, scope: !7)
!58 = !DILocation(line: 68, column: 48, scope: !7)
!59 = !DILocation(line: 68, column: 44, scope: !7)
!60 = !DILocation(line: 68, column: 75, scope: !7)
!61 = !DILocation(line: 68, column: 31, scope: !7)
!62 = !DILocation(line: 68, column: 94, scope: !7)
!63 = !DILocation(line: 68, column: 86, scope: !7)
!64 = !DILocation(line: 72, column: 21, scope: !7)
!65 = !DILocation(line: 76, column: 44, scope: !7)
!66 = !DILocation(line: 76, column: 75, scope: !7)
!67 = !DILocation(line: 76, column: 31, scope: !7)
!68 = !DILocation(line: 76, column: 94, scope: !7)
!69 = !DILocation(line: 76, column: 86, scope: !7)
!70 = !DILocation(line: 83, column: 20, scope: !7)
!71 = !DILocation(line: 84, column: 27, scope: !7)
!72 = !DILocation(line: 86, column: 20, scope: !7)
!73 = !DILocation(line: 95, column: 20, scope: !7)
!74 = !DILocation(line: 96, column: 27, scope: !7)
!75 = !DILocation(line: 55, column: 20, scope: !7)
!76 = !DILocation(line: 61, column: 20, scope: !7)
!77 = !DILocation(line: 97, column: 20, scope: !7)
!78 = !DILocation(line: 43, column: 18, scope: !7)
!79 = !DILocation(line: 45, column: 18, scope: !7)
!80 = !DILocation(line: 69, column: 35, scope: !7)
!81 = !DILocation(line: 71, column: 35, scope: !7)
!82 = !DILocation(line: 77, column: 35, scope: !7)
!83 = !DILocation(line: 0, scope: !7)
!84 = !DILocation(line: 94, column: 20, scope: !7)
!85 = !DILocation(line: 99, column: 20, scope: !7)
!86 = !DILocation(line: 100, column: 20, scope: !7)
!87 = !DILocation(line: 101, column: 20, scope: !7)
!88 = !DILocation(line: 118, column: 15, scope: !89, inlinedAt: !91)
!89 = distinct !DILexicalBlockFile(scope: !7, file: !90, discriminator: 0)
!90 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!91 = !DILocation(line: 102, column: 42, scope: !7)
!92 = !DILocation(line: 121, column: 29, scope: !89, inlinedAt: !93)
!93 = !DILocation(line: 93, column: 42, scope: !7)
!94 = !DILocation(line: 121, column: 29, scope: !89, inlinedAt: !91)
!95 = !DILocation(line: 103, column: 25, scope: !7)
!96 = !DILocation(line: 103, column: 37, scope: !7)
!97 = !DILocation(line: 104, column: 25, scope: !7)
!98 = !DILocation(line: 104, column: 37, scope: !7)
!99 = !DILocation(line: 105, column: 25, scope: !7)
!100 = !DILocation(line: 105, column: 37, scope: !7)
!101 = !DILocation(line: 105, column: 4, scope: !7)
