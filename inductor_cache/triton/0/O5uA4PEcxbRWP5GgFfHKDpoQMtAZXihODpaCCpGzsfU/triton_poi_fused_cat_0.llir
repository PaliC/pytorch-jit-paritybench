; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_cat_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, ptr addrspace(1) %16, ptr addrspace(1) %17, ptr addrspace(1) %18, ptr addrspace(1) %19, ptr addrspace(1) %20, i32 %21) local_unnamed_addr !dbg !7 {
  %23 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %24 = shl i32 %23, 8, !dbg !11
  %25 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %26 = shl i32 %25, 1, !dbg !12
  %27 = and i32 %26, 254, !dbg !12
  %28 = or disjoint i32 %24, %27, !dbg !13
  %29 = or disjoint i32 %28, 1, !dbg !13
  %30 = icmp slt i32 %28, 256, !dbg !14
  %.frozen = freeze i32 %28, !dbg !15
  %31 = sdiv i32 %.frozen, 4, !dbg !15
  %32 = srem i32 %31, 16, !dbg !16
  %33 = mul i32 %31, 4, !dbg !17
  %.decomposed = sub i32 %.frozen, %33, !dbg !17
  %34 = srem i32 %29, 4, !dbg !17
  %.frozen36 = freeze i32 %28, !dbg !18
  %35 = sdiv i32 %.frozen36, 64, !dbg !18
  %36 = icmp slt i32 %32, 4, !dbg !19
  %37 = mul i32 %35, 64, !dbg !20
  %srem.decomposed = sub i32 %.frozen36, %37, !dbg !20
  %38 = shl nsw i32 %35, 4, !dbg !21
  %39 = add nsw i32 %38, %srem.decomposed, !dbg !22
  %40 = sext i32 %39 to i64, !dbg !23
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !23
  %42 = and i1 %30, %36, !dbg !24
  %43 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %41, i1 %42, i32 0, i1 %42, i32 0, i1 %42) #3, !dbg !25
  %44 = sext i32 %32 to i64, !dbg !26
  %45 = getelementptr float, ptr addrspace(1) %1, i64 %44, !dbg !26
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %45, i1 %42, i32 0, i1 %42) #3, !dbg !27
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %45, i1 %42, i32 0, i1 %42) #3, !dbg !27
  %48 = getelementptr float, ptr addrspace(1) %2, i64 %44, !dbg !28
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %48, i1 %42, i32 0, i1 %42) #3, !dbg !29
  %50 = bitcast i32 %49 to float, !dbg !29
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %48, i1 %42, i32 0, i1 %42) #3, !dbg !29
  %52 = bitcast i32 %51 to float, !dbg !29
  %53 = fadd float %50, 0x3EE4F8B580000000, !dbg !30
  %54 = fadd float %52, 0x3EE4F8B580000000, !dbg !30
  %55 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %.not.i = icmp eq i32 %55, 0, !dbg !31
  %56 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !31
  %.not1.i = icmp eq i32 %56, 0, !dbg !31
  br i1 %.not.i, label %62, label %57, !dbg !31

57:                                               ; preds = %22
  br i1 %.not1.i, label %60, label %58, !dbg !31

58:                                               ; preds = %57
  %59 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %53) #3, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

60:                                               ; preds = %57
  %61 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %53) #3, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

62:                                               ; preds = %22
  br i1 %.not1.i, label %65, label %63, !dbg !31

63:                                               ; preds = %62
  %64 = tail call float @llvm.nvvm.sqrt.rn.f(float %53) #3, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

65:                                               ; preds = %62
  %66 = tail call float @llvm.nvvm.sqrt.approx.f(float %53) #3, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

__nv_sqrtf.exit:                                  ; preds = %58, %60, %63, %65
  %.0.i = phi float [ %59, %58 ], [ %61, %60 ], [ %64, %63 ], [ %66, %65 ], !dbg !31
  %67 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %.not.i1 = icmp eq i32 %67, 0, !dbg !31
  %68 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !31
  %.not1.i4 = icmp eq i32 %68, 0, !dbg !31
  br i1 %.not.i1, label %74, label %69, !dbg !31

69:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %72, label %70, !dbg !31

70:                                               ; preds = %69
  %71 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %54) #3, !dbg !31
  br label %__nv_sqrtf.exit5, !dbg !31

72:                                               ; preds = %69
  %73 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %54) #3, !dbg !31
  br label %__nv_sqrtf.exit5, !dbg !31

74:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %77, label %75, !dbg !31

75:                                               ; preds = %74
  %76 = tail call float @llvm.nvvm.sqrt.rn.f(float %54) #3, !dbg !31
  br label %__nv_sqrtf.exit5, !dbg !31

77:                                               ; preds = %74
  %78 = tail call float @llvm.nvvm.sqrt.approx.f(float %54) #3, !dbg !31
  br label %__nv_sqrtf.exit5, !dbg !31

__nv_sqrtf.exit5:                                 ; preds = %70, %72, %75, %77
  %.0.i3 = phi float [ %71, %70 ], [ %73, %72 ], [ %76, %75 ], [ %78, %77 ], !dbg !31
  %79 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !32
  %80 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !32
  %81 = getelementptr float, ptr addrspace(1) %3, i64 %44, !dbg !33
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %81, i1 %42, i32 0, i1 %42) #3, !dbg !34
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %81, i1 %42, i32 0, i1 %42) #3, !dbg !34
  %84 = getelementptr float, ptr addrspace(1) %4, i64 %44, !dbg !35
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %84, i1 %42, i32 0, i1 %42) #3, !dbg !36
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %84, i1 %42, i32 0, i1 %42) #3, !dbg !36
  %87 = and i32 %32, -4, !dbg !37
  %88 = icmp eq i32 %87, 4, !dbg !37
  %89 = add nsw i32 %32, -4, !dbg !38
  %90 = mul nsw i32 %89, 5, !dbg !39
  %91 = mul nsw i32 %35, 20, !dbg !40
  %92 = add nsw i32 %91, %.decomposed, !dbg !41
  %93 = add nsw i32 %92, %90, !dbg !42
  %94 = add nsw i32 %91, %34, !dbg !41
  %95 = add nsw i32 %94, %90, !dbg !42
  %96 = sext i32 %93 to i64, !dbg !43
  %97 = getelementptr float, ptr addrspace(1) %5, i64 %96, !dbg !43
  %98 = sext i32 %95 to i64, !dbg !43
  %99 = getelementptr float, ptr addrspace(1) %5, i64 %98, !dbg !43
  %100 = and i1 %30, %88, !dbg !44
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %97, i1 %100, i32 0, i1 %100) #3, !dbg !45
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %99, i1 %100, i32 0, i1 %100) #3, !dbg !45
  %103 = sext i32 %89 to i64, !dbg !46
  %104 = getelementptr float, ptr addrspace(1) %6, i64 %103, !dbg !46
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %104, i1 %100, i32 0, i1 %100) #3, !dbg !47
  %106 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %104, i1 %100, i32 0, i1 %100) #3, !dbg !47
  %107 = getelementptr float, ptr addrspace(1) %7, i64 %103, !dbg !48
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %107, i1 %100, i32 0, i1 %100) #3, !dbg !49
  %109 = bitcast i32 %108 to float, !dbg !49
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %107, i1 %100, i32 0, i1 %100) #3, !dbg !49
  %111 = bitcast i32 %110 to float, !dbg !49
  %112 = fadd float %109, 0x3EE4F8B580000000, !dbg !50
  %113 = fadd float %111, 0x3EE4F8B580000000, !dbg !50
  %114 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !51
  %.not.i6 = icmp eq i32 %114, 0, !dbg !51
  %115 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !51
  %.not1.i9 = icmp eq i32 %115, 0, !dbg !51
  br i1 %.not.i6, label %121, label %116, !dbg !51

116:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %119, label %117, !dbg !51

117:                                              ; preds = %116
  %118 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %112) #3, !dbg !51
  br label %__nv_sqrtf.exit10, !dbg !51

119:                                              ; preds = %116
  %120 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %112) #3, !dbg !51
  br label %__nv_sqrtf.exit10, !dbg !51

121:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %124, label %122, !dbg !51

122:                                              ; preds = %121
  %123 = tail call float @llvm.nvvm.sqrt.rn.f(float %112) #3, !dbg !51
  br label %__nv_sqrtf.exit10, !dbg !51

124:                                              ; preds = %121
  %125 = tail call float @llvm.nvvm.sqrt.approx.f(float %112) #3, !dbg !51
  br label %__nv_sqrtf.exit10, !dbg !51

__nv_sqrtf.exit10:                                ; preds = %117, %119, %122, %124
  %.0.i8 = phi float [ %118, %117 ], [ %120, %119 ], [ %123, %122 ], [ %125, %124 ], !dbg !51
  %126 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !51
  %.not.i11 = icmp eq i32 %126, 0, !dbg !51
  %127 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !51
  %.not1.i14 = icmp eq i32 %127, 0, !dbg !51
  br i1 %.not.i11, label %133, label %128, !dbg !51

128:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %131, label %129, !dbg !51

129:                                              ; preds = %128
  %130 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %113) #3, !dbg !51
  br label %__nv_sqrtf.exit15, !dbg !51

131:                                              ; preds = %128
  %132 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %113) #3, !dbg !51
  br label %__nv_sqrtf.exit15, !dbg !51

133:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %136, label %134, !dbg !51

134:                                              ; preds = %133
  %135 = tail call float @llvm.nvvm.sqrt.rn.f(float %113) #3, !dbg !51
  br label %__nv_sqrtf.exit15, !dbg !51

136:                                              ; preds = %133
  %137 = tail call float @llvm.nvvm.sqrt.approx.f(float %113) #3, !dbg !51
  br label %__nv_sqrtf.exit15, !dbg !51

__nv_sqrtf.exit15:                                ; preds = %129, %131, %134, %136
  %.0.i13 = phi float [ %130, %129 ], [ %132, %131 ], [ %135, %134 ], [ %137, %136 ], !dbg !51
  %138 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !52
  %139 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !52
  %140 = getelementptr float, ptr addrspace(1) %8, i64 %103, !dbg !53
  %141 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %140, i1 %100, i32 0, i1 %100) #3, !dbg !54
  %142 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %140, i1 %100, i32 0, i1 %100) #3, !dbg !54
  %143 = getelementptr float, ptr addrspace(1) %9, i64 %103, !dbg !55
  %144 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %143, i1 %100, i32 0, i1 %100) #3, !dbg !56
  %145 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %143, i1 %100, i32 0, i1 %100) #3, !dbg !56
  %146 = icmp eq i32 %87, 8, !dbg !57
  %147 = add nsw i32 %32, -8, !dbg !58
  %148 = shl nsw i32 %147, 2, !dbg !59
  %149 = add nsw i32 %38, %.decomposed, !dbg !60
  %150 = add nsw i32 %149, %148, !dbg !61
  %151 = sext i32 %150 to i64, !dbg !62
  %152 = getelementptr float, ptr addrspace(1) %10, i64 %151, !dbg !62
  %153 = and i1 %30, %146, !dbg !63
  %154 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %152, i1 %153, i32 0, i1 %153, i32 0, i1 %153) #3, !dbg !64
  %155 = sext i32 %147 to i64, !dbg !65
  %156 = getelementptr float, ptr addrspace(1) %11, i64 %155, !dbg !65
  %157 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %156, i1 %153, i32 0, i1 %153) #3, !dbg !66
  %158 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %156, i1 %153, i32 0, i1 %153) #3, !dbg !66
  %159 = getelementptr float, ptr addrspace(1) %12, i64 %155, !dbg !67
  %160 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %159, i1 %153, i32 0, i1 %153) #3, !dbg !68
  %161 = bitcast i32 %160 to float, !dbg !68
  %162 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %159, i1 %153, i32 0, i1 %153) #3, !dbg !68
  %163 = bitcast i32 %162 to float, !dbg !68
  %164 = fadd float %161, 0x3EE4F8B580000000, !dbg !69
  %165 = fadd float %163, 0x3EE4F8B580000000, !dbg !69
  %166 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !70
  %.not.i16 = icmp eq i32 %166, 0, !dbg !70
  %167 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !70
  %.not1.i19 = icmp eq i32 %167, 0, !dbg !70
  br i1 %.not.i16, label %173, label %168, !dbg !70

168:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %171, label %169, !dbg !70

169:                                              ; preds = %168
  %170 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %164) #3, !dbg !70
  br label %__nv_sqrtf.exit20, !dbg !70

171:                                              ; preds = %168
  %172 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %164) #3, !dbg !70
  br label %__nv_sqrtf.exit20, !dbg !70

173:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %176, label %174, !dbg !70

174:                                              ; preds = %173
  %175 = tail call float @llvm.nvvm.sqrt.rn.f(float %164) #3, !dbg !70
  br label %__nv_sqrtf.exit20, !dbg !70

176:                                              ; preds = %173
  %177 = tail call float @llvm.nvvm.sqrt.approx.f(float %164) #3, !dbg !70
  br label %__nv_sqrtf.exit20, !dbg !70

__nv_sqrtf.exit20:                                ; preds = %169, %171, %174, %176
  %.0.i18 = phi float [ %170, %169 ], [ %172, %171 ], [ %175, %174 ], [ %177, %176 ], !dbg !70
  %178 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !70
  %.not.i21 = icmp eq i32 %178, 0, !dbg !70
  %179 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !70
  %.not1.i24 = icmp eq i32 %179, 0, !dbg !70
  br i1 %.not.i21, label %185, label %180, !dbg !70

180:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %183, label %181, !dbg !70

181:                                              ; preds = %180
  %182 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %165) #3, !dbg !70
  br label %__nv_sqrtf.exit25, !dbg !70

183:                                              ; preds = %180
  %184 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %165) #3, !dbg !70
  br label %__nv_sqrtf.exit25, !dbg !70

185:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %188, label %186, !dbg !70

186:                                              ; preds = %185
  %187 = tail call float @llvm.nvvm.sqrt.rn.f(float %165) #3, !dbg !70
  br label %__nv_sqrtf.exit25, !dbg !70

188:                                              ; preds = %185
  %189 = tail call float @llvm.nvvm.sqrt.approx.f(float %165) #3, !dbg !70
  br label %__nv_sqrtf.exit25, !dbg !70

__nv_sqrtf.exit25:                                ; preds = %181, %183, %186, %188
  %.0.i23 = phi float [ %182, %181 ], [ %184, %183 ], [ %187, %186 ], [ %189, %188 ], !dbg !70
  %190 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !71
  %191 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !71
  %192 = getelementptr float, ptr addrspace(1) %13, i64 %155, !dbg !72
  %193 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %192, i1 %153, i32 0, i1 %153) #3, !dbg !73
  %194 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %192, i1 %153, i32 0, i1 %153) #3, !dbg !73
  %195 = getelementptr float, ptr addrspace(1) %14, i64 %155, !dbg !74
  %196 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %195, i1 %153, i32 0, i1 %153) #3, !dbg !75
  %197 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %195, i1 %153, i32 0, i1 %153) #3, !dbg !75
  %198 = icmp sgt i32 %32, 11, !dbg !76
  %199 = add nsw i32 %32, -12, !dbg !77
  %200 = mul nsw i32 %199, 5, !dbg !78
  %201 = add nsw i32 %92, %200, !dbg !79
  %202 = add nsw i32 %94, %200, !dbg !79
  %203 = sext i32 %201 to i64, !dbg !80
  %204 = getelementptr float, ptr addrspace(1) %15, i64 %203, !dbg !80
  %205 = sext i32 %202 to i64, !dbg !80
  %206 = getelementptr float, ptr addrspace(1) %15, i64 %205, !dbg !80
  %207 = and i1 %30, %198, !dbg !81
  %208 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %204, i1 %207, i32 0, i1 %207) #3, !dbg !82
  %209 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %206, i1 %207, i32 0, i1 %207) #3, !dbg !82
  %210 = sext i32 %199 to i64, !dbg !83
  %211 = getelementptr float, ptr addrspace(1) %16, i64 %210, !dbg !83
  %212 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %211, i1 %207, i32 0, i1 %207) #3, !dbg !84
  %213 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %211, i1 %207, i32 0, i1 %207) #3, !dbg !84
  %214 = getelementptr float, ptr addrspace(1) %17, i64 %210, !dbg !85
  %215 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %214, i1 %207, i32 0, i1 %207) #3, !dbg !86
  %216 = bitcast i32 %215 to float, !dbg !86
  %217 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %214, i1 %207, i32 0, i1 %207) #3, !dbg !86
  %218 = bitcast i32 %217 to float, !dbg !86
  %219 = fadd float %216, 0x3EE4F8B580000000, !dbg !87
  %220 = fadd float %218, 0x3EE4F8B580000000, !dbg !87
  %221 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !88
  %.not.i26 = icmp eq i32 %221, 0, !dbg !88
  %222 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !88
  %.not1.i29 = icmp eq i32 %222, 0, !dbg !88
  br i1 %.not.i26, label %228, label %223, !dbg !88

223:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %226, label %224, !dbg !88

224:                                              ; preds = %223
  %225 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %219) #3, !dbg !88
  br label %__nv_sqrtf.exit30, !dbg !88

226:                                              ; preds = %223
  %227 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %219) #3, !dbg !88
  br label %__nv_sqrtf.exit30, !dbg !88

228:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %231, label %229, !dbg !88

229:                                              ; preds = %228
  %230 = tail call float @llvm.nvvm.sqrt.rn.f(float %219) #3, !dbg !88
  br label %__nv_sqrtf.exit30, !dbg !88

231:                                              ; preds = %228
  %232 = tail call float @llvm.nvvm.sqrt.approx.f(float %219) #3, !dbg !88
  br label %__nv_sqrtf.exit30, !dbg !88

__nv_sqrtf.exit30:                                ; preds = %224, %226, %229, %231
  %.0.i28 = phi float [ %225, %224 ], [ %227, %226 ], [ %230, %229 ], [ %232, %231 ], !dbg !88
  %233 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !88
  %.not.i31 = icmp eq i32 %233, 0, !dbg !88
  %234 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !88
  %.not1.i34 = icmp eq i32 %234, 0, !dbg !88
  br i1 %.not.i31, label %240, label %235, !dbg !88

235:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %238, label %236, !dbg !88

236:                                              ; preds = %235
  %237 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %220) #3, !dbg !88
  br label %__nv_sqrtf.exit35, !dbg !88

238:                                              ; preds = %235
  %239 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %220) #3, !dbg !88
  br label %__nv_sqrtf.exit35, !dbg !88

240:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %243, label %241, !dbg !88

241:                                              ; preds = %240
  %242 = tail call float @llvm.nvvm.sqrt.rn.f(float %220) #3, !dbg !88
  br label %__nv_sqrtf.exit35, !dbg !88

243:                                              ; preds = %240
  %244 = tail call float @llvm.nvvm.sqrt.approx.f(float %220) #3, !dbg !88
  br label %__nv_sqrtf.exit35, !dbg !88

__nv_sqrtf.exit35:                                ; preds = %236, %238, %241, %243
  %.0.i33 = phi float [ %237, %236 ], [ %239, %238 ], [ %242, %241 ], [ %244, %243 ], !dbg !88
  %245 = bitcast i32 %209 to float, !dbg !82
  %246 = fcmp olt float %245, 0.000000e+00, !dbg !89
  %247 = select i1 %246, float 0.000000e+00, float %245, !dbg !93
  %248 = bitcast i32 %213 to float, !dbg !84
  %249 = fsub float %247, %248, !dbg !94
  %250 = bitcast i32 %208 to float, !dbg !82
  %251 = fcmp olt float %250, 0.000000e+00, !dbg !89
  %252 = select i1 %251, float 0.000000e+00, float %250, !dbg !93
  %253 = bitcast i32 %212 to float, !dbg !84
  %254 = fsub float %252, %253, !dbg !94
  %255 = extractvalue { i32, i32 } %154, 1, !dbg !64
  %256 = bitcast i32 %255 to float, !dbg !64
  %257 = fcmp olt float %256, 0.000000e+00, !dbg !95
  %258 = select i1 %257, float 0.000000e+00, float %256, !dbg !97
  %259 = bitcast i32 %158 to float, !dbg !66
  %260 = fsub float %258, %259, !dbg !98
  %261 = fmul float %260, %191, !dbg !99
  %262 = bitcast i32 %194 to float, !dbg !73
  %263 = fmul float %261, %262, !dbg !100
  %264 = bitcast i32 %197 to float, !dbg !75
  %265 = fadd float %263, %264, !dbg !101
  %266 = extractvalue { i32, i32 } %154, 0, !dbg !64
  %267 = bitcast i32 %266 to float, !dbg !64
  %268 = fcmp olt float %267, 0.000000e+00, !dbg !95
  %269 = select i1 %268, float 0.000000e+00, float %267, !dbg !97
  %270 = bitcast i32 %157 to float, !dbg !66
  %271 = fsub float %269, %270, !dbg !98
  %272 = fmul float %271, %190, !dbg !99
  %273 = bitcast i32 %193 to float, !dbg !73
  %274 = fmul float %272, %273, !dbg !100
  %275 = bitcast i32 %196 to float, !dbg !75
  %276 = fadd float %274, %275, !dbg !101
  %277 = bitcast i32 %102 to float, !dbg !45
  %278 = fcmp olt float %277, 0.000000e+00, !dbg !102
  %279 = select i1 %278, float 0.000000e+00, float %277, !dbg !104
  %280 = bitcast i32 %106 to float, !dbg !47
  %281 = fsub float %279, %280, !dbg !105
  %282 = fmul float %281, %139, !dbg !106
  %283 = bitcast i32 %142 to float, !dbg !54
  %284 = fmul float %282, %283, !dbg !107
  %285 = bitcast i32 %145 to float, !dbg !56
  %286 = fadd float %284, %285, !dbg !108
  %287 = bitcast i32 %101 to float, !dbg !45
  %288 = fcmp olt float %287, 0.000000e+00, !dbg !102
  %289 = select i1 %288, float 0.000000e+00, float %287, !dbg !104
  %290 = bitcast i32 %105 to float, !dbg !47
  %291 = fsub float %289, %290, !dbg !105
  %292 = fmul float %291, %138, !dbg !106
  %293 = bitcast i32 %141 to float, !dbg !54
  %294 = fmul float %292, %293, !dbg !107
  %295 = bitcast i32 %144 to float, !dbg !56
  %296 = fadd float %294, %295, !dbg !108
  %297 = extractvalue { i32, i32 } %43, 1, !dbg !25
  %298 = bitcast i32 %297 to float, !dbg !25
  %299 = fcmp olt float %298, 0.000000e+00, !dbg !109
  %300 = select i1 %299, float 0.000000e+00, float %298, !dbg !111
  %301 = bitcast i32 %47 to float, !dbg !27
  %302 = fsub float %300, %301, !dbg !112
  %303 = fmul float %302, %80, !dbg !113
  %304 = bitcast i32 %83 to float, !dbg !34
  %305 = fmul float %303, %304, !dbg !114
  %306 = bitcast i32 %86 to float, !dbg !36
  %307 = fadd float %305, %306, !dbg !115
  %308 = extractvalue { i32, i32 } %43, 0, !dbg !25
  %309 = bitcast i32 %308 to float, !dbg !25
  %310 = fcmp olt float %309, 0.000000e+00, !dbg !109
  %311 = select i1 %310, float 0.000000e+00, float %309, !dbg !111
  %312 = bitcast i32 %46 to float, !dbg !27
  %313 = fsub float %311, %312, !dbg !112
  %314 = fmul float %313, %79, !dbg !113
  %315 = bitcast i32 %82 to float, !dbg !34
  %316 = fmul float %314, %315, !dbg !114
  %317 = bitcast i32 %85 to float, !dbg !36
  %318 = fadd float %316, %317, !dbg !115
  %319 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !116
  %320 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !116
  %321 = fmul float %254, %319, !dbg !117
  %322 = fmul float %249, %320, !dbg !117
  %323 = getelementptr float, ptr addrspace(1) %18, i64 %210, !dbg !118
  %324 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %323, i1 %207, i32 0, i1 %207) #3, !dbg !119
  %325 = bitcast i32 %324 to float, !dbg !119
  %326 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %323, i1 %207, i32 0, i1 %207) #3, !dbg !119
  %327 = bitcast i32 %326 to float, !dbg !119
  %328 = fmul float %321, %325, !dbg !120
  %329 = fmul float %322, %327, !dbg !120
  %330 = getelementptr float, ptr addrspace(1) %19, i64 %210, !dbg !121
  %331 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %330, i1 %207, i32 0, i1 %207) #3, !dbg !122
  %332 = bitcast i32 %331 to float, !dbg !122
  %333 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %330, i1 %207, i32 0, i1 %207) #3, !dbg !122
  %334 = bitcast i32 %333 to float, !dbg !122
  %335 = fadd float %328, %332, !dbg !123
  %336 = fadd float %329, %334, !dbg !123
  %337 = select i1 %198, float %335, float 0.000000e+00, !dbg !124
  %338 = select i1 %198, float %336, float 0.000000e+00, !dbg !124
  %339 = select i1 %146, float %276, float %337, !dbg !125
  %340 = select i1 %146, float %265, float %338, !dbg !125
  %341 = select i1 %88, float %296, float %339, !dbg !125
  %342 = select i1 %88, float %286, float %340, !dbg !125
  %343 = select i1 %36, float %318, float %341, !dbg !125
  %344 = select i1 %36, float %307, float %342, !dbg !125
  %345 = sext i32 %28 to i64, !dbg !126
  %346 = getelementptr float, ptr addrspace(1) %20, i64 %345, !dbg !126
  %347 = bitcast float %343 to i32, !dbg !127
  %348 = bitcast float %344 to i32, !dbg !127
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %347, i32 %348, ptr addrspace(1) %346, i1 %30) #3, !dbg !127
  ret void, !dbg !128
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ctkkuixdjqehf6zrajyszwukynyevenue3m6yujkessnyru7s4lc.py", directory: "inductor_cache/tk")
!4 = !{ptr @triton_poi_fused_cat_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_0, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_0", linkageName: "triton_poi_fused_cat_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 26, scope: !7)
!17 = !DILocation(line: 25, column: 19, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 32, column: 18, scope: !7)
!20 = !DILocation(line: 33, column: 35, scope: !7)
!21 = !DILocation(line: 33, column: 47, scope: !7)
!22 = !DILocation(line: 33, column: 44, scope: !7)
!23 = !DILocation(line: 33, column: 30, scope: !7)
!24 = !DILocation(line: 33, column: 59, scope: !7)
!25 = !DILocation(line: 33, column: 52, scope: !7)
!26 = !DILocation(line: 36, column: 30, scope: !7)
!27 = !DILocation(line: 36, column: 35, scope: !7)
!28 = !DILocation(line: 38, column: 31, scope: !7)
!29 = !DILocation(line: 38, column: 36, scope: !7)
!30 = !DILocation(line: 40, column: 20, scope: !7)
!31 = !DILocation(line: 41, column: 27, scope: !7)
!32 = !DILocation(line: 43, column: 20, scope: !7)
!33 = !DILocation(line: 47, column: 31, scope: !7)
!34 = !DILocation(line: 47, column: 36, scope: !7)
!35 = !DILocation(line: 49, column: 31, scope: !7)
!36 = !DILocation(line: 49, column: 36, scope: !7)
!37 = !DILocation(line: 56, column: 20, scope: !7)
!38 = !DILocation(line: 57, column: 46, scope: !7)
!39 = !DILocation(line: 57, column: 39, scope: !7)
!40 = !DILocation(line: 57, column: 55, scope: !7)
!41 = !DILocation(line: 57, column: 36, scope: !7)
!42 = !DILocation(line: 57, column: 52, scope: !7)
!43 = !DILocation(line: 57, column: 31, scope: !7)
!44 = !DILocation(line: 57, column: 68, scope: !7)
!45 = !DILocation(line: 57, column: 60, scope: !7)
!46 = !DILocation(line: 60, column: 31, scope: !7)
!47 = !DILocation(line: 60, column: 43, scope: !7)
!48 = !DILocation(line: 62, column: 31, scope: !7)
!49 = !DILocation(line: 62, column: 43, scope: !7)
!50 = !DILocation(line: 64, column: 20, scope: !7)
!51 = !DILocation(line: 65, column: 27, scope: !7)
!52 = !DILocation(line: 67, column: 20, scope: !7)
!53 = !DILocation(line: 71, column: 31, scope: !7)
!54 = !DILocation(line: 71, column: 43, scope: !7)
!55 = !DILocation(line: 73, column: 31, scope: !7)
!56 = !DILocation(line: 73, column: 43, scope: !7)
!57 = !DILocation(line: 80, column: 20, scope: !7)
!58 = !DILocation(line: 81, column: 47, scope: !7)
!59 = !DILocation(line: 81, column: 40, scope: !7)
!60 = !DILocation(line: 81, column: 37, scope: !7)
!61 = !DILocation(line: 81, column: 53, scope: !7)
!62 = !DILocation(line: 81, column: 32, scope: !7)
!63 = !DILocation(line: 81, column: 69, scope: !7)
!64 = !DILocation(line: 81, column: 61, scope: !7)
!65 = !DILocation(line: 84, column: 32, scope: !7)
!66 = !DILocation(line: 84, column: 44, scope: !7)
!67 = !DILocation(line: 86, column: 32, scope: !7)
!68 = !DILocation(line: 86, column: 44, scope: !7)
!69 = !DILocation(line: 88, column: 20, scope: !7)
!70 = !DILocation(line: 89, column: 27, scope: !7)
!71 = !DILocation(line: 91, column: 20, scope: !7)
!72 = !DILocation(line: 95, column: 32, scope: !7)
!73 = !DILocation(line: 95, column: 44, scope: !7)
!74 = !DILocation(line: 97, column: 32, scope: !7)
!75 = !DILocation(line: 97, column: 44, scope: !7)
!76 = !DILocation(line: 101, column: 20, scope: !7)
!77 = !DILocation(line: 104, column: 48, scope: !7)
!78 = !DILocation(line: 104, column: 40, scope: !7)
!79 = !DILocation(line: 104, column: 54, scope: !7)
!80 = !DILocation(line: 104, column: 32, scope: !7)
!81 = !DILocation(line: 104, column: 70, scope: !7)
!82 = !DILocation(line: 104, column: 62, scope: !7)
!83 = !DILocation(line: 107, column: 32, scope: !7)
!84 = !DILocation(line: 107, column: 45, scope: !7)
!85 = !DILocation(line: 109, column: 32, scope: !7)
!86 = !DILocation(line: 109, column: 45, scope: !7)
!87 = !DILocation(line: 111, column: 20, scope: !7)
!88 = !DILocation(line: 112, column: 27, scope: !7)
!89 = !DILocation(line: 118, column: 15, scope: !90, inlinedAt: !92)
!90 = distinct !DILexicalBlockFile(scope: !7, file: !91, discriminator: 0)
!91 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!92 = !DILocation(line: 106, column: 42, scope: !7)
!93 = !DILocation(line: 121, column: 29, scope: !90, inlinedAt: !92)
!94 = !DILocation(line: 108, column: 20, scope: !7)
!95 = !DILocation(line: 118, column: 15, scope: !90, inlinedAt: !96)
!96 = !DILocation(line: 83, column: 42, scope: !7)
!97 = !DILocation(line: 121, column: 29, scope: !90, inlinedAt: !96)
!98 = !DILocation(line: 85, column: 20, scope: !7)
!99 = !DILocation(line: 94, column: 20, scope: !7)
!100 = !DILocation(line: 96, column: 20, scope: !7)
!101 = !DILocation(line: 98, column: 20, scope: !7)
!102 = !DILocation(line: 118, column: 15, scope: !90, inlinedAt: !103)
!103 = !DILocation(line: 59, column: 42, scope: !7)
!104 = !DILocation(line: 121, column: 29, scope: !90, inlinedAt: !103)
!105 = !DILocation(line: 61, column: 20, scope: !7)
!106 = !DILocation(line: 70, column: 20, scope: !7)
!107 = !DILocation(line: 72, column: 20, scope: !7)
!108 = !DILocation(line: 74, column: 20, scope: !7)
!109 = !DILocation(line: 118, column: 15, scope: !90, inlinedAt: !110)
!110 = !DILocation(line: 35, column: 40, scope: !7)
!111 = !DILocation(line: 121, column: 29, scope: !90, inlinedAt: !110)
!112 = !DILocation(line: 37, column: 18, scope: !7)
!113 = !DILocation(line: 46, column: 19, scope: !7)
!114 = !DILocation(line: 48, column: 20, scope: !7)
!115 = !DILocation(line: 50, column: 20, scope: !7)
!116 = !DILocation(line: 114, column: 20, scope: !7)
!117 = !DILocation(line: 117, column: 20, scope: !7)
!118 = !DILocation(line: 118, column: 32, scope: !7)
!119 = !DILocation(line: 118, column: 45, scope: !7)
!120 = !DILocation(line: 119, column: 20, scope: !7)
!121 = !DILocation(line: 120, column: 32, scope: !7)
!122 = !DILocation(line: 120, column: 45, scope: !7)
!123 = !DILocation(line: 121, column: 20, scope: !7)
!124 = !DILocation(line: 123, column: 35, scope: !7)
!125 = !DILocation(line: 0, scope: !7)
!126 = !DILocation(line: 127, column: 25, scope: !7)
!127 = !DILocation(line: 127, column: 37, scope: !7)
!128 = !DILocation(line: 127, column: 4, scope: !7)
