; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@assertFunc_0 = internal constant [8 x i8] c"unknown\00"
@assertFile_0 = internal constant [74 x i8] c"inductor_cache/eo/ceomiioqx6k77au5yicognjo6eglfpt6b7mh7hsps3nfyrtfnxab.py\00"
@assertMessage_0 = internal constant [40 x i8] c"index out of bounds: 0 <= tmp33 < 32768\00"

; Function Attrs: noreturn
declare !dbg !7 void @__assertfail(ptr, ptr, i32, ptr, i64) local_unnamed_addr #0

define void @triton_poi_fused_max_pool2d_with_indices_max_unpool2d_10(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !11 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !12
  %6 = shl i32 %5, 7, !dbg !13
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !14
  %8 = and i32 %7, 127, !dbg !14
  %9 = or disjoint i32 %6, %8, !dbg !15
  %.frozen = freeze i32 %9, !dbg !16
  %10 = sdiv i32 %.frozen, 2, !dbg !16
  %11 = mul i32 %10, 2, !dbg !17
  %.decomposed = sub i32 %.frozen, %11, !dbg !17
  %12 = srem i32 %10, 2, !dbg !18
  %13 = shl nsw i32 %.decomposed, 1, !dbg !19
  %14 = shl i32 %10, 3, !dbg !20
  %15 = add i32 %13, %14, !dbg !21
  %16 = sext i32 %15 to i64, !dbg !22
  %17 = getelementptr float, ptr addrspace(1) %0, i64 %16, !dbg !22
  %18 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %17, i1 true) #3, !dbg !23
  %19 = bitcast i32 %18 to float, !dbg !23
  %20 = or disjoint i32 %15, 1, !dbg !24
  %21 = sext i32 %20 to i64, !dbg !25
  %22 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !25
  %23 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %22, i1 true) #3, !dbg !26
  %24 = bitcast i32 %23 to float, !dbg !26
  %25 = add i32 %15, 4, !dbg !27
  %26 = sext i32 %25 to i64, !dbg !28
  %27 = getelementptr float, ptr addrspace(1) %0, i64 %26, !dbg !28
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 true) #3, !dbg !29
  %29 = bitcast i32 %28 to float, !dbg !29
  %30 = add i32 %15, 5, !dbg !30
  %31 = sext i32 %30 to i64, !dbg !31
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !31
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #3, !dbg !32
  %34 = bitcast i32 %33 to float, !dbg !32
  %35 = fcmp ogt float %24, %19, !dbg !33
  %36 = fcmp uno float %24, 0.000000e+00, !dbg !34
  %37 = or i1 %35, %36, !dbg !38
  %38 = select i1 %37, float %24, float %19, !dbg !39
  %39 = fcmp olt float %38, %29, !dbg !40
  %40 = fcmp uno float %29, 0.000000e+00, !dbg !41
  %41 = or i1 %40, %39, !dbg !43
  %42 = select i1 %41, float %29, float %38, !dbg !44
  %43 = fcmp olt float %42, %34, !dbg !45
  %44 = zext i1 %35 to i32, !dbg !46
  %45 = select i1 %39, i32 2, i32 %44, !dbg !47
  %46 = select i1 %43, i32 3, i32 %45, !dbg !48
  %47 = lshr i32 %46, 1, !dbg !49
  %48 = and i32 %46, 1, !dbg !50
  %49 = shl nsw i32 %12, 1, !dbg !51
  %50 = or disjoint i32 %47, %49, !dbg !52
  %51 = or disjoint i32 %48, %13, !dbg !53
  %52 = sext i32 %50 to i64, !dbg !54
  %53 = shl nsw i64 %52, 2, !dbg !54
  %54 = sext i32 %51 to i64, !dbg !55
  %55 = add nsw i64 %53, %54, !dbg !55
  %56 = sdiv i32 %9, 4, !dbg !56
  %57 = shl i32 %56, 4, !dbg !57
  %58 = sext i32 %57 to i64, !dbg !58
  %59 = add nsw i64 %55, %58, !dbg !58
  %60 = lshr i64 %59, 48, !dbg !59
  %61 = and i64 %60, 32768, !dbg !59
  %62 = add nsw i64 %61, %59, !dbg !59
  %63 = icmp ugt i64 %62, 32767, !dbg !60
  br i1 %63, label %64, label %65, !dbg !61

64:                                               ; preds = %4
  tail call void @__assertfail(ptr nonnull @assertMessage_0, ptr nonnull @assertFile_0, i32 66, ptr nonnull @assertFunc_0, i64 1), !dbg !61
  unreachable, !dbg !61

65:                                               ; preds = %4
  tail call void @llvm.nvvm.barrier0(), !dbg !61
  %66 = fcmp uno float %34, 0.000000e+00, !dbg !62
  %67 = or i1 %66, %43, !dbg !64
  %68 = sext i32 %9 to i64, !dbg !65
  %69 = getelementptr i64, ptr addrspace(1) %1, i64 %68, !dbg !65
  tail call void asm sideeffect "@$2 st.global.b64 [ $1 + 0 ], { $0 };", "l,l,b"(i64 %55, ptr addrspace(1) %69, i1 true) #3, !dbg !66
  %70 = getelementptr float, ptr addrspace(1) %2, i64 %62, !dbg !67
  %71 = bitcast float %42 to i32, !dbg !68
  %72 = select i1 %67, i32 %33, i32 %71, !dbg !69
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %72, ptr addrspace(1) %70, i1 true) #3, !dbg !68
  ret void, !dbg !70
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { noreturn }
attributes #1 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ceomiioqx6k77au5yicognjo6eglfpt6b7mh7hsps3nfyrtfnxab.py", directory: "inductor_cache/eo")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_max_unpool2d_10, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_max_unpool2d_10, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = !DISubprogram(name: "__assertfail", linkageName: "__assertfail", scope: !8, file: !8, type: !9, spFlags: DISPFlagOptimized)
!8 = !DIFile(filename: "<unknown>", directory: "")
!9 = !DISubroutineType(cc: DW_CC_normal, types: !10)
!10 = !{}
!11 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_max_unpool2d_10", linkageName: "triton_poi_fused_max_pool2d_with_indices_max_unpool2d_10", scope: !3, file: !3, line: 19, type: !9, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!12 = !DILocation(line: 21, column: 28, scope: !11)
!13 = !DILocation(line: 21, column: 33, scope: !11)
!14 = !DILocation(line: 22, column: 36, scope: !11)
!15 = !DILocation(line: 22, column: 23, scope: !11)
!16 = !DILocation(line: 25, column: 19, scope: !11)
!17 = !DILocation(line: 24, column: 19, scope: !11)
!18 = !DILocation(line: 26, column: 26, scope: !11)
!19 = !DILocation(line: 28, column: 32, scope: !11)
!20 = !DILocation(line: 28, column: 39, scope: !11)
!21 = !DILocation(line: 28, column: 37, scope: !11)
!22 = !DILocation(line: 28, column: 30, scope: !11)
!23 = !DILocation(line: 28, column: 44, scope: !11)
!24 = !DILocation(line: 29, column: 41, scope: !11)
!25 = !DILocation(line: 29, column: 30, scope: !11)
!26 = !DILocation(line: 29, column: 48, scope: !11)
!27 = !DILocation(line: 30, column: 41, scope: !11)
!28 = !DILocation(line: 30, column: 30, scope: !11)
!29 = !DILocation(line: 30, column: 48, scope: !11)
!30 = !DILocation(line: 31, column: 42, scope: !11)
!31 = !DILocation(line: 31, column: 31, scope: !11)
!32 = !DILocation(line: 31, column: 49, scope: !11)
!33 = !DILocation(line: 36, column: 18, scope: !11)
!34 = !DILocation(line: 120, column: 21, scope: !35, inlinedAt: !37)
!35 = distinct !DILexicalBlockFile(scope: !11, file: !36, discriminator: 0)
!36 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!37 = !DILocation(line: 40, column: 40, scope: !11)
!38 = !DILocation(line: 120, column: 16, scope: !35, inlinedAt: !37)
!39 = !DILocation(line: 121, column: 29, scope: !35, inlinedAt: !37)
!40 = !DILocation(line: 41, column: 18, scope: !11)
!41 = !DILocation(line: 120, column: 21, scope: !35, inlinedAt: !42)
!42 = !DILocation(line: 44, column: 41, scope: !11)
!43 = !DILocation(line: 120, column: 16, scope: !35, inlinedAt: !42)
!44 = !DILocation(line: 121, column: 29, scope: !35, inlinedAt: !42)
!45 = !DILocation(line: 45, column: 20, scope: !11)
!46 = !DILocation(line: 50, column: 30, scope: !11)
!47 = !DILocation(line: 43, column: 33, scope: !11)
!48 = !DILocation(line: 47, column: 35, scope: !11)
!49 = !DILocation(line: 50, column: 87, scope: !11)
!50 = !DILocation(line: 52, column: 20, scope: !11)
!51 = !DILocation(line: 53, column: 14, scope: !11)
!52 = !DILocation(line: 54, column: 20, scope: !11)
!53 = !DILocation(line: 56, column: 20, scope: !11)
!54 = !DILocation(line: 58, column: 20, scope: !11)
!55 = !DILocation(line: 59, column: 20, scope: !11)
!56 = !DILocation(line: 60, column: 22, scope: !11)
!57 = !DILocation(line: 60, column: 16, scope: !11)
!58 = !DILocation(line: 61, column: 20, scope: !11)
!59 = !DILocation(line: 65, column: 35, scope: !11)
!60 = !DILocation(line: 66, column: 37, scope: !11)
!61 = !DILocation(line: 66, column: 53, scope: !11)
!62 = !DILocation(line: 120, column: 21, scope: !35, inlinedAt: !63)
!63 = !DILocation(line: 69, column: 42, scope: !11)
!64 = !DILocation(line: 120, column: 16, scope: !35, inlinedAt: !63)
!65 = !DILocation(line: 70, column: 25, scope: !11)
!66 = !DILocation(line: 70, column: 37, scope: !11)
!67 = !DILocation(line: 71, column: 25, scope: !11)
!68 = !DILocation(line: 71, column: 67, scope: !11)
!69 = !DILocation(line: 121, column: 29, scope: !35, inlinedAt: !63)
!70 = !DILocation(line: 71, column: 4, scope: !11)
