#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [32, 1], warpsPerCTA = [2, 4], order = [0, 1]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [8, 4], warpsPerCTA = [8, 1], order = [1, 0]}>
#loc = loc("inductor_cache/be/cbelpqb2wwwhh4dgyzhxx5epdiqibzv5qxcdkt26kklbj5vnzj7q.py":19:0)
#loc1 = loc(unknown)
#loc65 = loc("inductor_cache/be/cbelpqb2wwwhh4dgyzhxx5epdiqibzv5qxcdkt26kklbj5vnzj7q.py":65:44)
#loc98 = loc(callsite(#loc1 at #loc65))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 8 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_red_fused__unsafe_index_convolution_native_group_norm_35(%arg0: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("inductor_cache/be/cbelpqb2wwwhh4dgyzhxx5epdiqibzv5qxcdkt26kklbj5vnzj7q.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/be/cbelpqb2wwwhh4dgyzhxx5epdiqibzv5qxcdkt26kklbj5vnzj7q.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/be/cbelpqb2wwwhh4dgyzhxx5epdiqibzv5qxcdkt26kklbj5vnzj7q.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/be/cbelpqb2wwwhh4dgyzhxx5epdiqibzv5qxcdkt26kklbj5vnzj7q.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/be/cbelpqb2wwwhh4dgyzhxx5epdiqibzv5qxcdkt26kklbj5vnzj7q.py":19:0), %arg5: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/be/cbelpqb2wwwhh4dgyzhxx5epdiqibzv5qxcdkt26kklbj5vnzj7q.py":19:0), %arg6: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/be/cbelpqb2wwwhh4dgyzhxx5epdiqibzv5qxcdkt26kklbj5vnzj7q.py":19:0), %arg7: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/be/cbelpqb2wwwhh4dgyzhxx5epdiqibzv5qxcdkt26kklbj5vnzj7q.py":19:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/be/cbelpqb2wwwhh4dgyzhxx5epdiqibzv5qxcdkt26kklbj5vnzj7q.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<32> : tensor<64x4xi64, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<1024> : tensor<64x4xi64, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<0> : tensor<64x4xi64, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<0.000000e+00> : tensor<64x4xf32, #blocked> loc(#loc1)
    %cst_3 = arith.constant 0.000000e+00 : f32 loc(#loc1)
    %c4_i32 = arith.constant 4 : i32 loc(#loc1)
    %c65536_i32 = arith.constant 65536 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %cst_4 = arith.constant dense<512> : tensor<64x1xi32, #blocked> loc(#loc1)
    %cst_5 = arith.constant dense<512> : tensor<64x1xi32, #blocked1> loc(#loc1)
    %cst_6 = arith.constant dense<4> : tensor<64x1xi32, #blocked> loc(#loc1)
    %cst_7 = arith.constant dense<32> : tensor<64x1xi32, #blocked> loc(#loc1)
    %cst_8 = arith.constant dense<4096> : tensor<1x4xi32, #blocked> loc(#loc1)
    %cst_9 = arith.constant dense<64> : tensor<1x4xi32, #blocked> loc(#loc1)
    %cst_10 = arith.constant dense<16> : tensor<64x1xi32, #blocked> loc(#loc1)
    %cst_11 = arith.constant dense<32768> : tensor<64x1xi32, #blocked> loc(#loc1)
    %cst_12 = arith.constant dense<65536> : tensor<64x1xi32, #blocked1> loc(#loc1)
    %cst_13 = arith.constant dense<0> : tensor<1x4xi64, #blocked> loc(#loc1)
    %cst_14 = arith.constant dense<32> : tensor<1x4xi64, #blocked> loc(#loc1)
    %cst_15 = arith.constant dense<1.000000e+00> : tensor<64x4xf32, #blocked> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c64_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc4)
    %3 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc4)
    %4 = tt.expand_dims %2 {axis = 1 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi32, #blocked> loc(#loc4)
    %5 = tt.expand_dims %3 {axis = 1 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<64x1xi32, #blocked1> loc(#loc4)
    %6 = tt.splat %1 : i32 -> tensor<64x1xi32, #blocked> loc(#loc5)
    %7 = tt.splat %1 : i32 -> tensor<64x1xi32, #blocked1> loc(#loc5)
    %8 = arith.addi %6, %4 : tensor<64x1xi32, #blocked> loc(#loc5)
    %9 = arith.addi %7, %5 : tensor<64x1xi32, #blocked1> loc(#loc5)
    %10 = arith.cmpi slt, %8, %cst_4 : tensor<64x1xi32, #blocked> loc(#loc6)
    %11 = arith.cmpi slt, %9, %cst_5 : tensor<64x1xi32, #blocked1> loc(#loc6)
    %12 = tt.make_range {end = 4 : i32, start = 0 : i32} : tensor<4xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc7)
    %13 = tt.make_range {end = 4 : i32, start = 0 : i32} : tensor<4xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc7)
    %14 = tt.expand_dims %12 {axis = 0 : i32} : tensor<4xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x4xi32, #blocked> loc(#loc7)
    %15 = tt.expand_dims %13 {axis = 0 : i32} : tensor<4xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x4xi32, #blocked1> loc(#loc7)
    %16 = arith.remsi %8, %cst_6 : tensor<64x1xi32, #blocked> loc(#loc8)
    %17 = arith.divsi %8, %cst_6 : tensor<64x1xi32, #blocked> loc(#loc9)
    %18 = arith.remsi %17, %cst_7 : tensor<64x1xi32, #blocked> loc(#loc10)
    %19 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<64x1x!tt.ptr<f32>, #blocked> loc(#loc11)
    %20 = tt.addptr %19, %18 : tensor<64x1x!tt.ptr<f32>, #blocked>, tensor<64x1xi32, #blocked> loc(#loc11)
    %21 = tt.load %20, %10 evictionPolicy = evict_last : tensor<64x1x!tt.ptr<f32>, #blocked> loc(#loc12)
    %22 = arith.muli %16, %cst_10 : tensor<64x1xi32, #blocked> loc(#loc13)
    %23 = tt.broadcast %22 : tensor<64x1xi32, #blocked> -> tensor<64x4xi32, #blocked> loc(#loc14)
    %24 = tt.splat %arg0 : !tt.ptr<i64> -> tensor<64x4x!tt.ptr<i64>, #blocked> loc(#loc15)
    %25 = tt.broadcast %10 : tensor<64x1xi1, #blocked> -> tensor<64x4xi1, #blocked> loc(#loc16)
    %26 = tt.broadcast %11 : tensor<64x1xi1, #blocked1> -> tensor<64x4xi1, #blocked1> loc(#loc16)
    %27 = tt.splat %arg0 : !tt.ptr<i64> -> tensor<1x4x!tt.ptr<i64>, #blocked> loc(#loc17)
    %28 = arith.muli %17, %cst_11 : tensor<64x1xi32, #blocked> loc(#loc18)
    %29 = arith.extsi %28 : tensor<64x1xi32, #blocked> to tensor<64x1xi64, #blocked> loc(#loc19)
    %30 = tt.broadcast %29 : tensor<64x1xi64, #blocked> -> tensor<64x4xi64, #blocked> loc(#loc19)
    %31 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<64x4x!tt.ptr<f32>, #blocked> loc(#loc20)
    %32 = tt.broadcast %21 : tensor<64x1xf32, #blocked> -> tensor<64x4xf32, #blocked> loc(#loc21)
    %33 = arith.muli %9, %cst_12 : tensor<64x1xi32, #blocked1> loc(#loc22)
    %34 = tt.broadcast %33 : tensor<64x1xi32, #blocked1> -> tensor<64x4xi32, #blocked1> loc(#loc23)
    %35 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<64x4x!tt.ptr<f32>, #blocked1> loc(#loc24)
    %36:3 = scf.for %arg9 = %c0_i32 to %c65536_i32 step %c4_i32 iter_args(%arg10 = %cst_2, %arg11 = %cst_2, %arg12 = %cst_2) -> (tensor<64x4xf32, #blocked>, tensor<64x4xf32, #blocked>, tensor<64x4xf32, #blocked>)  : i32 {
      %47 = tt.splat %arg9 : i32 -> tensor<1x4xi32, #blocked> loc(#loc26)
      %48 = tt.splat %arg9 : i32 -> tensor<1x4xi32, #blocked1> loc(#loc26)
      %49 = arith.addi %47, %14 : tensor<1x4xi32, #blocked> loc(#loc26)
      %50 = arith.addi %48, %15 : tensor<1x4xi32, #blocked1> loc(#loc26)
      %51 = arith.divsi %49, %cst_8 : tensor<1x4xi32, #blocked> loc(#loc27)
      %52 = arith.divsi %49, %cst_9 : tensor<1x4xi32, #blocked> loc(#loc28)
      %53 = arith.remsi %52, %cst_9 : tensor<1x4xi32, #blocked> loc(#loc29)
      %54 = arith.remsi %49, %cst_9 : tensor<1x4xi32, #blocked> loc(#loc30)
      %55 = tt.broadcast %51 : tensor<1x4xi32, #blocked> -> tensor<64x4xi32, #blocked> loc(#loc14)
      %56 = arith.addi %55, %23 : tensor<64x4xi32, #blocked> loc(#loc14)
      %57 = tt.addptr %24, %56 : tensor<64x4x!tt.ptr<i64>, #blocked>, tensor<64x4xi32, #blocked> loc(#loc15)
      %58 = tt.load %57, %25, %cst_1 evictionPolicy = evict_last : tensor<64x4x!tt.ptr<i64>, #blocked> loc(#loc16)
      %59 = tt.addptr %27, %53 : tensor<1x4x!tt.ptr<i64>, #blocked>, tensor<1x4xi32, #blocked> loc(#loc17)
      %60 = tt.load %59 evictionPolicy = evict_last : tensor<1x4x!tt.ptr<i64>, #blocked> loc(#loc31)
      %61 = tt.addptr %27, %54 : tensor<1x4x!tt.ptr<i64>, #blocked>, tensor<1x4xi32, #blocked> loc(#loc32)
      %62 = tt.load %61 evictionPolicy = evict_last : tensor<1x4x!tt.ptr<i64>, #blocked> loc(#loc33)
      %63 = arith.addi %58, %cst : tensor<64x4xi64, #blocked> loc(#loc34)
      %64 = arith.cmpi slt, %58, %cst_1 : tensor<64x4xi64, #blocked> loc(#loc35)
      %65 = arith.select %64, %63, %58 : tensor<64x4xi1, #blocked>, tensor<64x4xi64, #blocked> loc(#loc36)
      %66 = arith.addi %60, %cst_14 : tensor<1x4xi64, #blocked> loc(#loc37)
      %67 = arith.cmpi slt, %60, %cst_13 : tensor<1x4xi64, #blocked> loc(#loc38)
      %68 = arith.select %67, %66, %60 : tensor<1x4xi1, #blocked>, tensor<1x4xi64, #blocked> loc(#loc39)
      %69 = arith.addi %62, %cst_14 : tensor<1x4xi64, #blocked> loc(#loc40)
      %70 = arith.cmpi slt, %62, %cst_13 : tensor<1x4xi64, #blocked> loc(#loc41)
      %71 = arith.select %70, %69, %62 : tensor<1x4xi1, #blocked>, tensor<1x4xi64, #blocked> loc(#loc42)
      %72 = arith.muli %68, %cst_14 : tensor<1x4xi64, #blocked> loc(#loc43)
      %73 = arith.addi %71, %72 : tensor<1x4xi64, #blocked> loc(#loc44)
      %74 = tt.broadcast %73 : tensor<1x4xi64, #blocked> -> tensor<64x4xi64, #blocked> loc(#loc44)
      %75 = arith.muli %65, %cst_0 : tensor<64x4xi64, #blocked> loc(#loc45)
      %76 = arith.addi %74, %75 : tensor<64x4xi64, #blocked> loc(#loc46)
      %77 = arith.addi %76, %30 : tensor<64x4xi64, #blocked> loc(#loc19)
      %78 = tt.addptr %31, %77 : tensor<64x4x!tt.ptr<f32>, #blocked>, tensor<64x4xi64, #blocked> loc(#loc20)
      %79 = tt.load %78, %25 evictionPolicy = evict_last : tensor<64x4x!tt.ptr<f32>, #blocked> loc(#loc47)
      %80 = arith.addf %79, %32 : tensor<64x4xf32, #blocked> loc(#loc21)
      %81 = arith.cmpi eq, %arg9, %c0_i32 : i32 loc(#loc48)
      %82:3 = scf.if %81 -> (tensor<64x4xf32, #blocked>, tensor<64x4xf32, #blocked>, tensor<64x4xf32, #blocked>) {
        scf.yield %cst_2, %80, %cst_15 : tensor<64x4xf32, #blocked>, tensor<64x4xf32, #blocked>, tensor<64x4xf32, #blocked> loc(#loc89)
      } else {
        %90 = arith.subf %80, %arg10 : tensor<64x4xf32, #blocked> loc(#loc90)
        %91 = arith.addf %arg12, %cst_15 : tensor<64x4xf32, #blocked> loc(#loc91)
        %92 = arith.divf %90, %91 : tensor<64x4xf32, #blocked> loc(#loc92)
        %93 = arith.addf %arg10, %92 : tensor<64x4xf32, #blocked> loc(#loc93)
        %94 = arith.subf %80, %93 : tensor<64x4xf32, #blocked> loc(#loc94)
        %95 = arith.mulf %90, %94 : tensor<64x4xf32, #blocked> loc(#loc95)
        %96 = arith.addf %arg11, %95 : tensor<64x4xf32, #blocked> loc(#loc96)
        scf.yield %96, %93, %91 : tensor<64x4xf32, #blocked>, tensor<64x4xf32, #blocked>, tensor<64x4xf32, #blocked> loc(#loc96)
      } loc(#loc88)
      %83 = arith.select %25, %82#1, %arg10 : tensor<64x4xi1, #blocked>, tensor<64x4xf32, #blocked> loc(#loc59)
      %84 = arith.select %25, %82#0, %arg11 : tensor<64x4xi1, #blocked>, tensor<64x4xf32, #blocked> loc(#loc60)
      %85 = arith.select %25, %82#2, %arg12 : tensor<64x4xi1, #blocked>, tensor<64x4xf32, #blocked> loc(#loc61)
      %86 = tt.broadcast %50 : tensor<1x4xi32, #blocked1> -> tensor<64x4xi32, #blocked1> loc(#loc23)
      %87 = arith.addi %86, %34 : tensor<64x4xi32, #blocked1> loc(#loc23)
      %88 = tt.addptr %35, %87 : tensor<64x4x!tt.ptr<f32>, #blocked1>, tensor<64x4xi32, #blocked1> loc(#loc24)
      %89 = triton_gpu.convert_layout %80 : tensor<64x4xf32, #blocked> -> tensor<64x4xf32, #blocked1> loc(#loc62)
      tt.store %88, %89, %26 : tensor<64x4x!tt.ptr<f32>, #blocked1> loc(#loc62)
      scf.yield %83, %84, %85 : tensor<64x4xf32, #blocked>, tensor<64x4xf32, #blocked>, tensor<64x4xf32, #blocked> loc(#loc63)
    } loc(#loc25)
    %37:3 = "tt.reduce"(%36#0, %36#1, %36#2) <{axis = 1 : i32}> ({
    ^bb0(%arg9: f32 loc(callsite(#loc1 at #loc65)), %arg10: f32 loc(callsite(#loc1 at #loc65)), %arg11: f32 loc(callsite(#loc1 at #loc65)), %arg12: f32 loc(callsite(#loc1 at #loc65)), %arg13: f32 loc(callsite(#loc1 at #loc65)), %arg14: f32 loc(callsite(#loc1 at #loc65))):
      %47 = arith.subf %arg12, %arg9 : f32 loc(#loc111)
      %48 = arith.addf %arg11, %arg14 : f32 loc(#loc112)
      %49 = arith.cmpf oeq, %48, %cst_3 : f32 loc(#loc113)
      %50 = arith.divf %arg14, %48 : f32 loc(#loc114)
      %51 = arith.select %49, %cst_3, %50 : f32 loc(#loc115)
      %52 = arith.mulf %47, %51 : f32 loc(#loc116)
      %53 = arith.addf %arg9, %52 : f32 loc(#loc117)
      %54 = arith.addf %arg10, %arg13 : f32 loc(#loc118)
      %55 = arith.mulf %47, %47 : f32 loc(#loc119)
      %56 = arith.mulf %55, %arg11 : f32 loc(#loc120)
      %57 = arith.mulf %56, %51 : f32 loc(#loc121)
      %58 = arith.addf %54, %57 : f32 loc(#loc122)
      tt.reduce.return %53, %58, %48 : f32, f32, f32 loc(#loc97)
    }) : (tensor<64x4xf32, #blocked>, tensor<64x4xf32, #blocked>, tensor<64x4xf32, #blocked>) -> (tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>, tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>, tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) loc(#loc97)
    %38 = tt.expand_dims %37#0 {axis = 1 : i32} : tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xf32, #blocked> loc(#loc78)
    %39 = tt.expand_dims %37#1 {axis = 1 : i32} : tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xf32, #blocked> loc(#loc79)
    %40 = tt.expand_dims %37#2 {axis = 1 : i32} : tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xf32, #blocked> loc(#loc80)
    %41 = tt.splat %arg4 : !tt.ptr<f32> -> tensor<64x1x!tt.ptr<f32>, #blocked> loc(#loc81)
    %42 = tt.addptr %41, %8 : tensor<64x1x!tt.ptr<f32>, #blocked>, tensor<64x1xi32, #blocked> loc(#loc81)
    tt.store %42, %38, %10 : tensor<64x1x!tt.ptr<f32>, #blocked> loc(#loc82)
    %43 = tt.splat %arg5 : !tt.ptr<f32> -> tensor<64x1x!tt.ptr<f32>, #blocked> loc(#loc83)
    %44 = tt.addptr %43, %8 : tensor<64x1x!tt.ptr<f32>, #blocked>, tensor<64x1xi32, #blocked> loc(#loc83)
    tt.store %44, %39, %10 : tensor<64x1x!tt.ptr<f32>, #blocked> loc(#loc84)
    %45 = tt.splat %arg6 : !tt.ptr<f32> -> tensor<64x1x!tt.ptr<f32>, #blocked> loc(#loc85)
    %46 = tt.addptr %45, %8 : tensor<64x1x!tt.ptr<f32>, #blocked>, tensor<64x1xi32, #blocked> loc(#loc85)
    tt.store %46, %40, %10 : tensor<64x1x!tt.ptr<f32>, #blocked> loc(#loc86)
    tt.return loc(#loc87)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/be/cbelpqb2wwwhh4dgyzhxx5epdiqibzv5qxcdkt26kklbj5vnzj7q.py":22:28)
#loc3 = loc("inductor_cache/be/cbelpqb2wwwhh4dgyzhxx5epdiqibzv5qxcdkt26kklbj5vnzj7q.py":22:33)
#loc4 = loc("inductor_cache/be/cbelpqb2wwwhh4dgyzhxx5epdiqibzv5qxcdkt26kklbj5vnzj7q.py":23:44)
#loc5 = loc("inductor_cache/be/cbelpqb2wwwhh4dgyzhxx5epdiqibzv5qxcdkt26kklbj5vnzj7q.py":23:23)
#loc6 = loc("inductor_cache/be/cbelpqb2wwwhh4dgyzhxx5epdiqibzv5qxcdkt26kklbj5vnzj7q.py":24:21)
#loc7 = loc("inductor_cache/be/cbelpqb2wwwhh4dgyzhxx5epdiqibzv5qxcdkt26kklbj5vnzj7q.py":25:33)
#loc8 = loc("inductor_cache/be/cbelpqb2wwwhh4dgyzhxx5epdiqibzv5qxcdkt26kklbj5vnzj7q.py":26:19)
#loc9 = loc("inductor_cache/be/cbelpqb2wwwhh4dgyzhxx5epdiqibzv5qxcdkt26kklbj5vnzj7q.py":27:19)
#loc10 = loc("inductor_cache/be/cbelpqb2wwwhh4dgyzhxx5epdiqibzv5qxcdkt26kklbj5vnzj7q.py":28:26)
#loc11 = loc("inductor_cache/be/cbelpqb2wwwhh4dgyzhxx5epdiqibzv5qxcdkt26kklbj5vnzj7q.py":29:31)
#loc12 = loc("inductor_cache/be/cbelpqb2wwwhh4dgyzhxx5epdiqibzv5qxcdkt26kklbj5vnzj7q.py":29:36)
#loc13 = loc("inductor_cache/be/cbelpqb2wwwhh4dgyzhxx5epdiqibzv5qxcdkt26kklbj5vnzj7q.py":41:42)
#loc14 = loc("inductor_cache/be/cbelpqb2wwwhh4dgyzhxx5epdiqibzv5qxcdkt26kklbj5vnzj7q.py":41:39)
#loc15 = loc("inductor_cache/be/cbelpqb2wwwhh4dgyzhxx5epdiqibzv5qxcdkt26kklbj5vnzj7q.py":41:34)
#loc16 = loc("inductor_cache/be/cbelpqb2wwwhh4dgyzhxx5epdiqibzv5qxcdkt26kklbj5vnzj7q.py":41:47)
#loc17 = loc("inductor_cache/be/cbelpqb2wwwhh4dgyzhxx5epdiqibzv5qxcdkt26kklbj5vnzj7q.py":42:34)
#loc18 = loc("inductor_cache/be/cbelpqb2wwwhh4dgyzhxx5epdiqibzv5qxcdkt26kklbj5vnzj7q.py":54:71)
#loc19 = loc("inductor_cache/be/cbelpqb2wwwhh4dgyzhxx5epdiqibzv5qxcdkt26kklbj5vnzj7q.py":54:65)
#loc20 = loc("inductor_cache/be/cbelpqb2wwwhh4dgyzhxx5epdiqibzv5qxcdkt26kklbj5vnzj7q.py":54:35)
#loc21 = loc("inductor_cache/be/cbelpqb2wwwhh4dgyzhxx5epdiqibzv5qxcdkt26kklbj5vnzj7q.py":55:24)
#loc22 = loc("inductor_cache/be/cbelpqb2wwwhh4dgyzhxx5epdiqibzv5qxcdkt26kklbj5vnzj7q.py":63:40)
#loc23 = loc("inductor_cache/be/cbelpqb2wwwhh4dgyzhxx5epdiqibzv5qxcdkt26kklbj5vnzj7q.py":63:34)
#loc24 = loc("inductor_cache/be/cbelpqb2wwwhh4dgyzhxx5epdiqibzv5qxcdkt26kklbj5vnzj7q.py":63:29)
#loc25 = loc("inductor_cache/be/cbelpqb2wwwhh4dgyzhxx5epdiqibzv5qxcdkt26kklbj5vnzj7q.py":34:36)
#loc26 = loc("inductor_cache/be/cbelpqb2wwwhh4dgyzhxx5epdiqibzv5qxcdkt26kklbj5vnzj7q.py":35:27)
#loc27 = loc("inductor_cache/be/cbelpqb2wwwhh4dgyzhxx5epdiqibzv5qxcdkt26kklbj5vnzj7q.py":37:23)
#loc28 = loc("inductor_cache/be/cbelpqb2wwwhh4dgyzhxx5epdiqibzv5qxcdkt26kklbj5vnzj7q.py":38:25)
#loc29 = loc("inductor_cache/be/cbelpqb2wwwhh4dgyzhxx5epdiqibzv5qxcdkt26kklbj5vnzj7q.py":38:31)
#loc30 = loc("inductor_cache/be/cbelpqb2wwwhh4dgyzhxx5epdiqibzv5qxcdkt26kklbj5vnzj7q.py":39:23)
#loc31 = loc("inductor_cache/be/cbelpqb2wwwhh4dgyzhxx5epdiqibzv5qxcdkt26kklbj5vnzj7q.py":42:39)
#loc32 = loc("inductor_cache/be/cbelpqb2wwwhh4dgyzhxx5epdiqibzv5qxcdkt26kklbj5vnzj7q.py":43:34)
#loc33 = loc("inductor_cache/be/cbelpqb2wwwhh4dgyzhxx5epdiqibzv5qxcdkt26kklbj5vnzj7q.py":43:39)
#loc34 = loc("inductor_cache/be/cbelpqb2wwwhh4dgyzhxx5epdiqibzv5qxcdkt26kklbj5vnzj7q.py":45:22)
#loc35 = loc("inductor_cache/be/cbelpqb2wwwhh4dgyzhxx5epdiqibzv5qxcdkt26kklbj5vnzj7q.py":46:22)
#loc36 = loc("inductor_cache/be/cbelpqb2wwwhh4dgyzhxx5epdiqibzv5qxcdkt26kklbj5vnzj7q.py":47:36)
#loc37 = loc("inductor_cache/be/cbelpqb2wwwhh4dgyzhxx5epdiqibzv5qxcdkt26kklbj5vnzj7q.py":48:22)
#loc38 = loc("inductor_cache/be/cbelpqb2wwwhh4dgyzhxx5epdiqibzv5qxcdkt26kklbj5vnzj7q.py":49:22)
#loc39 = loc("inductor_cache/be/cbelpqb2wwwhh4dgyzhxx5epdiqibzv5qxcdkt26kklbj5vnzj7q.py":50:36)
#loc40 = loc("inductor_cache/be/cbelpqb2wwwhh4dgyzhxx5epdiqibzv5qxcdkt26kklbj5vnzj7q.py":51:23)
#loc41 = loc("inductor_cache/be/cbelpqb2wwwhh4dgyzhxx5epdiqibzv5qxcdkt26kklbj5vnzj7q.py":52:23)
#loc42 = loc("inductor_cache/be/cbelpqb2wwwhh4dgyzhxx5epdiqibzv5qxcdkt26kklbj5vnzj7q.py":53:39)
#loc43 = loc("inductor_cache/be/cbelpqb2wwwhh4dgyzhxx5epdiqibzv5qxcdkt26kklbj5vnzj7q.py":54:46)
#loc44 = loc("inductor_cache/be/cbelpqb2wwwhh4dgyzhxx5epdiqibzv5qxcdkt26kklbj5vnzj7q.py":54:43)
#loc45 = loc("inductor_cache/be/cbelpqb2wwwhh4dgyzhxx5epdiqibzv5qxcdkt26kklbj5vnzj7q.py":54:58)
#loc46 = loc("inductor_cache/be/cbelpqb2wwwhh4dgyzhxx5epdiqibzv5qxcdkt26kklbj5vnzj7q.py":54:53)
#loc47 = loc("inductor_cache/be/cbelpqb2wwwhh4dgyzhxx5epdiqibzv5qxcdkt26kklbj5vnzj7q.py":54:76)
#loc48 = loc("inductor_cache/be/cbelpqb2wwwhh4dgyzhxx5epdiqibzv5qxcdkt26kklbj5vnzj7q.py":58:66)
#loc49 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":178:7)
#loc50 = loc("inductor_cache/be/cbelpqb2wwwhh4dgyzhxx5epdiqibzv5qxcdkt26kklbj5vnzj7q.py":58:55)
#loc51 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":181:31)
#loc52 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":183:24)
#loc53 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":184:30)
#loc54 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":185:34)
#loc55 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":185:26)
#loc56 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":186:39)
#loc57 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":186:31)
#loc58 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":186:22)
#loc59 = loc("inductor_cache/be/cbelpqb2wwwhh4dgyzhxx5epdiqibzv5qxcdkt26kklbj5vnzj7q.py":60:54)
#loc60 = loc("inductor_cache/be/cbelpqb2wwwhh4dgyzhxx5epdiqibzv5qxcdkt26kklbj5vnzj7q.py":61:50)
#loc61 = loc("inductor_cache/be/cbelpqb2wwwhh4dgyzhxx5epdiqibzv5qxcdkt26kklbj5vnzj7q.py":62:58)
#loc62 = loc("inductor_cache/be/cbelpqb2wwwhh4dgyzhxx5epdiqibzv5qxcdkt26kklbj5vnzj7q.py":63:52)
#loc63 = loc("inductor_cache/be/cbelpqb2wwwhh4dgyzhxx5epdiqibzv5qxcdkt26kklbj5vnzj7q.py":63:8)
#loc64 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":204:46)
#loc66 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":192:21)
#loc67 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":193:28)
#loc68 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":194:39)
#loc69 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":194:60)
#loc70 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":194:49)
#loc71 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":196:25)
#loc72 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":196:17)
#loc73 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":197:15)
#loc74 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":197:30)
#loc75 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":197:38)
#loc76 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":197:49)
#loc77 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":197:22)
#loc78 = loc("inductor_cache/be/cbelpqb2wwwhh4dgyzhxx5epdiqibzv5qxcdkt26kklbj5vnzj7q.py":67:22)
#loc79 = loc("inductor_cache/be/cbelpqb2wwwhh4dgyzhxx5epdiqibzv5qxcdkt26kklbj5vnzj7q.py":68:22)
#loc80 = loc("inductor_cache/be/cbelpqb2wwwhh4dgyzhxx5epdiqibzv5qxcdkt26kklbj5vnzj7q.py":69:22)
#loc81 = loc("inductor_cache/be/cbelpqb2wwwhh4dgyzhxx5epdiqibzv5qxcdkt26kklbj5vnzj7q.py":70:25)
#loc82 = loc("inductor_cache/be/cbelpqb2wwwhh4dgyzhxx5epdiqibzv5qxcdkt26kklbj5vnzj7q.py":70:37)
#loc83 = loc("inductor_cache/be/cbelpqb2wwwhh4dgyzhxx5epdiqibzv5qxcdkt26kklbj5vnzj7q.py":71:25)
#loc84 = loc("inductor_cache/be/cbelpqb2wwwhh4dgyzhxx5epdiqibzv5qxcdkt26kklbj5vnzj7q.py":71:37)
#loc85 = loc("inductor_cache/be/cbelpqb2wwwhh4dgyzhxx5epdiqibzv5qxcdkt26kklbj5vnzj7q.py":72:25)
#loc86 = loc("inductor_cache/be/cbelpqb2wwwhh4dgyzhxx5epdiqibzv5qxcdkt26kklbj5vnzj7q.py":72:37)
#loc87 = loc("inductor_cache/be/cbelpqb2wwwhh4dgyzhxx5epdiqibzv5qxcdkt26kklbj5vnzj7q.py":72:4)
#loc88 = loc(callsite(#loc49 at #loc50))
#loc89 = loc(callsite(#loc51 at #loc50))
#loc90 = loc(callsite(#loc52 at #loc50))
#loc91 = loc(callsite(#loc53 at #loc50))
#loc92 = loc(callsite(#loc54 at #loc50))
#loc93 = loc(callsite(#loc55 at #loc50))
#loc94 = loc(callsite(#loc56 at #loc50))
#loc95 = loc(callsite(#loc57 at #loc50))
#loc96 = loc(callsite(#loc58 at #loc50))
#loc97 = loc(callsite(#loc64 at #loc65))
#loc99 = loc(callsite(#loc66 at #loc64))
#loc100 = loc(callsite(#loc67 at #loc64))
#loc101 = loc(callsite(#loc68 at #loc64))
#loc102 = loc(callsite(#loc69 at #loc64))
#loc103 = loc(callsite(#loc70 at #loc64))
#loc104 = loc(callsite(#loc71 at #loc64))
#loc105 = loc(callsite(#loc72 at #loc64))
#loc106 = loc(callsite(#loc73 at #loc64))
#loc107 = loc(callsite(#loc74 at #loc64))
#loc108 = loc(callsite(#loc75 at #loc64))
#loc109 = loc(callsite(#loc76 at #loc64))
#loc110 = loc(callsite(#loc77 at #loc64))
#loc111 = loc(callsite(#loc99 at #loc65))
#loc112 = loc(callsite(#loc100 at #loc65))
#loc113 = loc(callsite(#loc101 at #loc65))
#loc114 = loc(callsite(#loc102 at #loc65))
#loc115 = loc(callsite(#loc103 at #loc65))
#loc116 = loc(callsite(#loc104 at #loc65))
#loc117 = loc(callsite(#loc105 at #loc65))
#loc118 = loc(callsite(#loc106 at #loc65))
#loc119 = loc(callsite(#loc107 at #loc65))
#loc120 = loc(callsite(#loc108 at #loc65))
#loc121 = loc(callsite(#loc109 at #loc65))
#loc122 = loc(callsite(#loc110 at #loc65))
