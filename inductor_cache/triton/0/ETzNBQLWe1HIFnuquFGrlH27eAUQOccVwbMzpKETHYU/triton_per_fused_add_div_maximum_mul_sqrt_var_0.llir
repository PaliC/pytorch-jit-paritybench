; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused_add_div_maximum_mul_sqrt_var_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %11 = shl i32 %10, 3, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = lshr i32 %12, 3, !dbg !12
  %14 = and i32 %13, 7, !dbg !12
  %15 = and i32 %12, 7, !dbg !12
  %16 = or disjoint i32 %11, %14, !dbg !13
  %17 = icmp slt i32 %16, 16, !dbg !14
  %18 = shl i32 %12, 1, !dbg !15
  %19 = and i32 %18, 14, !dbg !15
  %20 = srem i32 %16, 4, !dbg !16
  %21 = shl i32 %16, 4, !dbg !17
  %22 = or disjoint i32 %21, %19, !dbg !18
  %23 = sext i32 %22 to i64, !dbg !19
  %24 = getelementptr float, ptr addrspace(1) %1, i64 %23, !dbg !19
  %25 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %24, i1 %17, i32 0, i1 %17, i32 0, i1 %17) #5, !dbg !20
  %26 = extractvalue { i32, i32 } %25, 0, !dbg !20
  %27 = extractvalue { i32, i32 } %25, 1, !dbg !20
  %28 = bitcast i32 %26 to float, !dbg !20
  %29 = bitcast i32 %27 to float, !dbg !20
  %30 = sext i32 %20 to i64, !dbg !21
  %31 = getelementptr float, ptr addrspace(1) %2, i64 %30, !dbg !21
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 %17) #5, !dbg !22
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 %17) #5, !dbg !22
  %34 = getelementptr float, ptr addrspace(1) %3, i64 %30, !dbg !23
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 %17) #5, !dbg !24
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 %17) #5, !dbg !24
  %37 = bitcast i32 %36 to float, !dbg !24
  %38 = getelementptr float, ptr addrspace(1) %4, i64 %30, !dbg !25
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 %17) #5, !dbg !26
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 %17) #5, !dbg !26
  %41 = getelementptr float, ptr addrspace(1) %5, i64 %30, !dbg !27
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 %17) #5, !dbg !28
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 %17) #5, !dbg !28
  %44 = fadd float %28, %29, !dbg !29
  %45 = select i1 %17, float %44, float 0.000000e+00, !dbg !29
  %46 = bitcast float %45 to i32, !dbg !34
  %47 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %46, i32 4, i32 31), !dbg !34
  %48 = bitcast i32 %47 to float, !dbg !34
  %49 = fadd float %45, %48, !dbg !29
  %50 = bitcast float %49 to i32, !dbg !34
  %51 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %50, i32 2, i32 31), !dbg !34
  %52 = bitcast i32 %51 to float, !dbg !34
  %53 = fadd float %49, %52, !dbg !29
  %54 = bitcast float %53 to i32, !dbg !34
  %55 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %54, i32 1, i32 31), !dbg !34
  %56 = bitcast i32 %55 to float, !dbg !34
  %57 = fadd float %53, %56, !dbg !29
  %58 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %57, float 1.600000e+01) #5, !dbg !35
  %59 = fsub float %28, %58, !dbg !36
  %60 = fsub float %29, %58, !dbg !36
  %61 = fmul float %59, %59, !dbg !37
  %62 = fmul float %60, %60, !dbg !37
  %63 = fadd float %61, %62, !dbg !38
  %64 = select i1 %17, float %63, float 0.000000e+00, !dbg !38
  %65 = bitcast float %64 to i32, !dbg !40
  %66 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %65, i32 4, i32 31), !dbg !40
  %67 = bitcast i32 %66 to float, !dbg !40
  %68 = fadd float %64, %67, !dbg !38
  %69 = bitcast float %68 to i32, !dbg !40
  %70 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %69, i32 2, i32 31), !dbg !40
  %71 = bitcast i32 %70 to float, !dbg !40
  %72 = fadd float %68, %71, !dbg !38
  %73 = bitcast float %72 to i32, !dbg !40
  %74 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %73, i32 1, i32 31), !dbg !40
  %75 = bitcast i32 %74 to float, !dbg !40
  %76 = fadd float %72, %75, !dbg !38
  %77 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !41
  %78 = bitcast float %76 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %77, <1 x i32> %78, i1 true) #5, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %79 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !41
  %80 = load float, ptr addrspace(3) %79, align 4, !dbg !41
  %81 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %80, float 1.600000e+01) #5, !dbg !42
  %82 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %76, float 1.600000e+01) #5, !dbg !42
  %83 = fadd float %81, 0x3EE4F8B580000000, !dbg !43
  %84 = fadd float %82, 0x3EE4F8B580000000, !dbg !43
  %85 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !41
  %.not.i = icmp eq i32 %85, 0, !dbg !41
  %86 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !41
  %.not1.i = icmp eq i32 %86, 0, !dbg !41
  br i1 %.not.i, label %92, label %87, !dbg !41

87:                                               ; preds = %9
  br i1 %.not1.i, label %90, label %88, !dbg !41

88:                                               ; preds = %87
  %89 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %83) #5, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

90:                                               ; preds = %87
  %91 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %83) #5, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

92:                                               ; preds = %9
  br i1 %.not1.i, label %95, label %93, !dbg !41

93:                                               ; preds = %92
  %94 = tail call float @llvm.nvvm.sqrt.rn.f(float %83) #5, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

95:                                               ; preds = %92
  %96 = tail call float @llvm.nvvm.sqrt.approx.f(float %83) #5, !dbg !41
  br label %__nv_sqrtf.exit, !dbg !41

__nv_sqrtf.exit:                                  ; preds = %88, %90, %93, %95
  %.0.i = phi float [ %89, %88 ], [ %91, %90 ], [ %94, %93 ], [ %96, %95 ], !dbg !41
  %97 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !41
  %98 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !41
  %99 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !41
  %.not.i6 = icmp eq i32 %99, 0, !dbg !41
  %100 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !41
  %.not1.i9 = icmp eq i32 %100, 0, !dbg !41
  br i1 %.not.i6, label %106, label %101, !dbg !41

101:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i9, label %104, label %102, !dbg !41

102:                                              ; preds = %101
  %103 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %84) #5, !dbg !41
  br label %__nv_sqrtf.exit10, !dbg !41

104:                                              ; preds = %101
  %105 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %84) #5, !dbg !41
  br label %__nv_sqrtf.exit10, !dbg !41

106:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i9, label %109, label %107, !dbg !41

107:                                              ; preds = %106
  %108 = tail call float @llvm.nvvm.sqrt.rn.f(float %84) #5, !dbg !41
  br label %__nv_sqrtf.exit10, !dbg !41

109:                                              ; preds = %106
  %110 = tail call float @llvm.nvvm.sqrt.approx.f(float %84) #5, !dbg !41
  br label %__nv_sqrtf.exit10, !dbg !41

__nv_sqrtf.exit10:                                ; preds = %102, %104, %107, %109
  %.0.i8 = phi float [ %103, %102 ], [ %105, %104 ], [ %108, %107 ], [ %110, %109 ], !dbg !41
  %111 = fadd float %37, 0x3EE4F8B580000000, !dbg !44
  %112 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !45
  %113 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !45
  %114 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !45
  %.not.i16 = icmp eq i32 %114, 0, !dbg !45
  %115 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !45
  %.not1.i19 = icmp eq i32 %115, 0, !dbg !45
  br i1 %.not.i16, label %121, label %116, !dbg !45

116:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i19, label %119, label %117, !dbg !45

117:                                              ; preds = %116
  %118 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %111) #5, !dbg !45
  br label %__nv_sqrtf.exit20, !dbg !45

119:                                              ; preds = %116
  %120 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %111) #5, !dbg !45
  br label %__nv_sqrtf.exit20, !dbg !45

121:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i19, label %124, label %122, !dbg !45

122:                                              ; preds = %121
  %123 = tail call float @llvm.nvvm.sqrt.rn.f(float %111) #5, !dbg !45
  br label %__nv_sqrtf.exit20, !dbg !45

124:                                              ; preds = %121
  %125 = tail call float @llvm.nvvm.sqrt.approx.f(float %111) #5, !dbg !45
  br label %__nv_sqrtf.exit20, !dbg !45

__nv_sqrtf.exit20:                                ; preds = %117, %119, %122, %124
  %.0.i18 = phi float [ %118, %117 ], [ %120, %119 ], [ %123, %122 ], [ %125, %124 ], !dbg !45
  %126 = bitcast i32 %33 to float, !dbg !22
  %127 = fmul float %29, %126, !dbg !46
  %128 = fadd float %127, %.0.i8, !dbg !47
  %129 = fmul float %28, %126, !dbg !46
  %130 = fadd float %129, %.0.i8, !dbg !47
  %131 = bitcast i32 %43 to float, !dbg !28
  %132 = bitcast i32 %40 to float, !dbg !26
  %133 = or disjoint i32 %11, %15, !dbg !13
  %134 = icmp slt i32 %133, 16, !dbg !14
  %135 = fcmp ogt float %130, %.0.i18, !dbg !48
  %136 = fcmp ogt float %128, %.0.i18, !dbg !48
  %137 = fcmp uno float %130, 0.000000e+00, !dbg !52
  %138 = fcmp uno float %128, 0.000000e+00, !dbg !52
  %139 = or i1 %137, %135, !dbg !53
  %140 = or i1 %138, %136, !dbg !53
  %141 = select i1 %139, float %130, float %.0.i18, !dbg !54
  %142 = select i1 %140, float %128, float %.0.i18, !dbg !54
  %143 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %28, float %141) #5, !dbg !55
  %144 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %29, float %142) #5, !dbg !55
  %145 = fmul float %143, %132, !dbg !56
  %146 = fmul float %144, %132, !dbg !56
  %147 = fadd float %145, %131, !dbg !57
  %148 = fadd float %146, %131, !dbg !57
  tail call void @llvm.nvvm.barrier0(), !dbg !58
  %149 = sext i32 %133 to i64, !dbg !59
  %150 = getelementptr float, ptr addrspace(1) %0, i64 %149, !dbg !59
  %151 = and i32 %12, 56, !dbg !60
  %152 = icmp eq i32 %151, 0, !dbg !60
  %153 = bitcast float %.0.i to i32, !dbg !60
  %154 = and i1 %152, %134, !dbg !60
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %153, ptr addrspace(1) %150, i1 %154) #5, !dbg !60
  %155 = getelementptr float, ptr addrspace(1) %6, i64 %23, !dbg !61
  %156 = bitcast float %147 to i32, !dbg !62
  %157 = bitcast float %148 to i32, !dbg !62
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %156, i32 %157, ptr addrspace(1) %155, i1 %17) #5, !dbg !62
  ret void, !dbg !63
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c2rwuwgd7cmleqgadi2arr3sfvhibr56haczpblko22wur7o4m7q.py", directory: "inductor_cache/2r")
!4 = !{ptr @triton_per_fused_add_div_maximum_mul_sqrt_var_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_div_maximum_mul_sqrt_var_0, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_div_maximum_mul_sqrt_var_0", linkageName: "triton_per_fused_add_div_maximum_mul_sqrt_var_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 19, scope: !7)
!17 = !DILocation(line: 32, column: 38, scope: !7)
!18 = !DILocation(line: 32, column: 35, scope: !7)
!19 = !DILocation(line: 32, column: 30, scope: !7)
!20 = !DILocation(line: 32, column: 43, scope: !7)
!21 = !DILocation(line: 33, column: 31, scope: !7)
!22 = !DILocation(line: 33, column: 36, scope: !7)
!23 = !DILocation(line: 34, column: 31, scope: !7)
!24 = !DILocation(line: 34, column: 36, scope: !7)
!25 = !DILocation(line: 35, column: 31, scope: !7)
!26 = !DILocation(line: 35, column: 36, scope: !7)
!27 = !DILocation(line: 36, column: 31, scope: !7)
!28 = !DILocation(line: 36, column: 36, scope: !7)
!29 = !DILocation(line: 256, column: 15, scope: !30, inlinedAt: !33)
!30 = distinct !DILexicalBlockFile(scope: !32, file: !31, discriminator: 0)
!31 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!32 = distinct !DILexicalBlockFile(scope: !7, file: !31, discriminator: 0)
!33 = !DILocation(line: 41, column: 24, scope: !7)
!34 = !DILocation(line: 267, column: 36, scope: !32, inlinedAt: !33)
!35 = !DILocation(line: 44, column: 19, scope: !7)
!36 = !DILocation(line: 45, column: 19, scope: !7)
!37 = !DILocation(line: 46, column: 20, scope: !7)
!38 = !DILocation(line: 256, column: 15, scope: !30, inlinedAt: !39)
!39 = !DILocation(line: 49, column: 26, scope: !7)
!40 = !DILocation(line: 267, column: 36, scope: !32, inlinedAt: !39)
!41 = !DILocation(line: 54, column: 27, scope: !7)
!42 = !DILocation(line: 51, column: 20, scope: !7)
!43 = !DILocation(line: 53, column: 20, scope: !7)
!44 = !DILocation(line: 57, column: 20, scope: !7)
!45 = !DILocation(line: 58, column: 27, scope: !7)
!46 = !DILocation(line: 55, column: 19, scope: !7)
!47 = !DILocation(line: 56, column: 20, scope: !7)
!48 = !DILocation(line: 118, column: 15, scope: !49, inlinedAt: !51)
!49 = distinct !DILexicalBlockFile(scope: !7, file: !50, discriminator: 0)
!50 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!51 = !DILocation(line: 59, column: 42, scope: !7)
!52 = !DILocation(line: 120, column: 21, scope: !49, inlinedAt: !51)
!53 = !DILocation(line: 120, column: 16, scope: !49, inlinedAt: !51)
!54 = !DILocation(line: 121, column: 29, scope: !49, inlinedAt: !51)
!55 = !DILocation(line: 60, column: 19, scope: !7)
!56 = !DILocation(line: 61, column: 20, scope: !7)
!57 = !DILocation(line: 62, column: 20, scope: !7)
!58 = !DILocation(line: 63, column: 4, scope: !7)
!59 = !DILocation(line: 64, column: 28, scope: !7)
!60 = !DILocation(line: 64, column: 40, scope: !7)
!61 = !DILocation(line: 65, column: 25, scope: !7)
!62 = !DILocation(line: 65, column: 45, scope: !7)
!63 = !DILocation(line: 65, column: 4, scope: !7)
