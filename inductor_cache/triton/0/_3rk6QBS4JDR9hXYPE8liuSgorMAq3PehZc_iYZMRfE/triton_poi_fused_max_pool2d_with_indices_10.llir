; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_max_pool2d_with_indices_10(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 10, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 2, !dbg !12
  %8 = and i32 %7, 508, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = or disjoint i32 %9, 512, !dbg !13
  %11 = srem i32 %9, 512, !dbg !14
  %12 = insertelement <2 x i32> poison, i32 %9, i64 0, !dbg !15
  %13 = shufflevector <2 x i32> %12, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !15
  %14 = sdiv <2 x i32> %13, <i32 16384, i32 512>, !dbg !15
  %15 = srem <2 x i32> %14, splat (i32 32), !dbg !16
  %16 = extractelement <2 x i32> %15, i64 0, !dbg !17
  %17 = icmp sgt i32 %16, 0, !dbg !18
  %18 = icmp sgt <2 x i32> %15, <i32 -1, i32 0>, !dbg !19
  %19 = extractelement <2 x i1> %18, i64 1, !dbg !20
  %20 = and i1 %17, %19, !dbg !20
  %21 = extractelement <2 x i32> %15, i64 1, !dbg !17
  %22 = shl nsw i32 %21, 10, !dbg !21
  %23 = extractelement <2 x i32> %14, i64 0, !dbg !22
  %24 = shl i32 %23, 16, !dbg !22
  %25 = add i32 %24, %11, !dbg !23
  %26 = add i32 %25, -33280, !dbg !24
  %27 = add i32 %26, %22, !dbg !25
  %28 = sext i32 %27 to i64, !dbg !26
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !26
  %30 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %29, i1 %20, i32 -8388608, i1 %20, i32 -8388608, i1 %20, i32 -8388608, i1 %20, i32 -8388608, i1 %20) #1, !dbg !27
  %31 = extractvalue { i32, i32, i32, i32 } %30, 0, !dbg !27
  %32 = extractvalue { i32, i32, i32, i32 } %30, 1, !dbg !27
  %33 = extractvalue { i32, i32, i32, i32 } %30, 2, !dbg !27
  %34 = extractvalue { i32, i32, i32, i32 } %30, 3, !dbg !27
  %35 = bitcast i32 %31 to float, !dbg !27
  %36 = bitcast i32 %32 to float, !dbg !27
  %37 = bitcast i32 %33 to float, !dbg !27
  %38 = bitcast i32 %34 to float, !dbg !27
  %39 = icmp sgt i32 %21, -1, !dbg !28
  %40 = and i1 %17, %39, !dbg !29
  %41 = add i32 %25, -32768, !dbg !30
  %42 = add i32 %41, %22, !dbg !31
  %43 = sext i32 %42 to i64, !dbg !32
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !32
  %45 = add i32 %25, -32256, !dbg !33
  %46 = add i32 %45, %22, !dbg !34
  %47 = sext i32 %46 to i64, !dbg !35
  %48 = getelementptr float, ptr addrspace(1) %0, i64 %47, !dbg !35
  %49 = insertelement <2 x i32> poison, i32 %10, i64 0, !dbg !15
  %50 = shufflevector <2 x i32> %49, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !15
  %51 = sdiv <2 x i32> %50, <i32 16384, i32 512>, !dbg !15
  %52 = srem <2 x i32> %51, splat (i32 32), !dbg !16
  %53 = extractelement <2 x i32> %52, i64 0, !dbg !17
  %54 = icmp sgt i32 %53, 0, !dbg !18
  %55 = icmp sgt <2 x i32> %52, <i32 -1, i32 0>, !dbg !19
  %56 = extractelement <2 x i1> %55, i64 1, !dbg !20
  %57 = and i1 %54, %56, !dbg !20
  %58 = extractelement <2 x i32> %52, i64 1, !dbg !17
  %59 = shl nsw i32 %58, 10, !dbg !21
  %60 = extractelement <2 x i32> %51, i64 0, !dbg !22
  %61 = shl i32 %60, 16, !dbg !22
  %62 = add i32 %61, %11, !dbg !23
  %63 = add i32 %62, -33280, !dbg !24
  %64 = add i32 %63, %59, !dbg !25
  %65 = sext i32 %64 to i64, !dbg !26
  %66 = getelementptr float, ptr addrspace(1) %0, i64 %65, !dbg !26
  %67 = icmp sgt i32 %58, -1, !dbg !28
  %68 = and i1 %54, %67, !dbg !29
  %69 = add i32 %62, -32768, !dbg !30
  %70 = add i32 %69, %59, !dbg !31
  %71 = sext i32 %70 to i64, !dbg !32
  %72 = getelementptr float, ptr addrspace(1) %0, i64 %71, !dbg !32
  %73 = add i32 %62, -32256, !dbg !33
  %74 = add i32 %73, %59, !dbg !34
  %75 = sext i32 %74 to i64, !dbg !35
  %76 = getelementptr float, ptr addrspace(1) %0, i64 %75, !dbg !35
  %77 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %66, i1 %57, i32 -8388608, i1 %57, i32 -8388608, i1 %57, i32 -8388608, i1 %57, i32 -8388608, i1 %57) #1, !dbg !27
  %78 = extractvalue { i32, i32, i32, i32 } %77, 0, !dbg !27
  %79 = extractvalue { i32, i32, i32, i32 } %77, 1, !dbg !27
  %80 = extractvalue { i32, i32, i32, i32 } %77, 2, !dbg !27
  %81 = extractvalue { i32, i32, i32, i32 } %77, 3, !dbg !27
  %82 = bitcast i32 %78 to float, !dbg !27
  %83 = bitcast i32 %79 to float, !dbg !27
  %84 = bitcast i32 %80 to float, !dbg !27
  %85 = bitcast i32 %81 to float, !dbg !27
  %86 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %44, i1 %40, i32 -8388608, i1 %40, i32 -8388608, i1 %40, i32 -8388608, i1 %40, i32 -8388608, i1 %40) #1, !dbg !36
  %87 = extractvalue { i32, i32, i32, i32 } %86, 0, !dbg !36
  %88 = extractvalue { i32, i32, i32, i32 } %86, 1, !dbg !36
  %89 = extractvalue { i32, i32, i32, i32 } %86, 2, !dbg !36
  %90 = extractvalue { i32, i32, i32, i32 } %86, 3, !dbg !36
  %91 = bitcast i32 %87 to float, !dbg !36
  %92 = bitcast i32 %88 to float, !dbg !36
  %93 = bitcast i32 %89 to float, !dbg !36
  %94 = bitcast i32 %90 to float, !dbg !36
  %95 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %72, i1 %68, i32 -8388608, i1 %68, i32 -8388608, i1 %68, i32 -8388608, i1 %68, i32 -8388608, i1 %68) #1, !dbg !36
  %96 = extractvalue { i32, i32, i32, i32 } %95, 0, !dbg !36
  %97 = extractvalue { i32, i32, i32, i32 } %95, 1, !dbg !36
  %98 = extractvalue { i32, i32, i32, i32 } %95, 2, !dbg !36
  %99 = extractvalue { i32, i32, i32, i32 } %95, 3, !dbg !36
  %100 = bitcast i32 %96 to float, !dbg !36
  %101 = bitcast i32 %97 to float, !dbg !36
  %102 = bitcast i32 %98 to float, !dbg !36
  %103 = bitcast i32 %99 to float, !dbg !36
  %104 = fcmp ogt float %91, %35, !dbg !37
  %105 = fcmp ogt float %92, %36, !dbg !37
  %106 = fcmp ogt float %93, %37, !dbg !37
  %107 = fcmp ogt float %94, %38, !dbg !37
  %108 = fcmp ogt float %100, %82, !dbg !37
  %109 = fcmp ogt float %101, %83, !dbg !37
  %110 = fcmp ogt float %102, %84, !dbg !37
  %111 = fcmp ogt float %103, %85, !dbg !37
  %112 = fcmp uno float %91, 0.000000e+00, !dbg !41
  %113 = fcmp uno float %92, 0.000000e+00, !dbg !41
  %114 = fcmp uno float %93, 0.000000e+00, !dbg !41
  %115 = fcmp uno float %94, 0.000000e+00, !dbg !41
  %116 = fcmp uno float %100, 0.000000e+00, !dbg !41
  %117 = fcmp uno float %101, 0.000000e+00, !dbg !41
  %118 = fcmp uno float %102, 0.000000e+00, !dbg !41
  %119 = fcmp uno float %103, 0.000000e+00, !dbg !41
  %120 = or i1 %104, %112, !dbg !42
  %121 = or i1 %105, %113, !dbg !42
  %122 = or i1 %106, %114, !dbg !42
  %123 = or i1 %107, %115, !dbg !42
  %124 = or i1 %108, %116, !dbg !42
  %125 = or i1 %109, %117, !dbg !42
  %126 = or i1 %110, %118, !dbg !42
  %127 = or i1 %111, %119, !dbg !42
  %128 = select i1 %120, float %91, float %35, !dbg !43
  %129 = select i1 %121, float %92, float %36, !dbg !43
  %130 = select i1 %122, float %93, float %37, !dbg !43
  %131 = select i1 %123, float %94, float %38, !dbg !43
  %132 = select i1 %124, float %100, float %82, !dbg !43
  %133 = select i1 %125, float %101, float %83, !dbg !43
  %134 = select i1 %126, float %102, float %84, !dbg !43
  %135 = select i1 %127, float %103, float %85, !dbg !43
  %136 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %48, i1 %40, i32 -8388608, i1 %40, i32 -8388608, i1 %40, i32 -8388608, i1 %40, i32 -8388608, i1 %40) #1, !dbg !44
  %137 = extractvalue { i32, i32, i32, i32 } %136, 0, !dbg !44
  %138 = extractvalue { i32, i32, i32, i32 } %136, 1, !dbg !44
  %139 = extractvalue { i32, i32, i32, i32 } %136, 2, !dbg !44
  %140 = extractvalue { i32, i32, i32, i32 } %136, 3, !dbg !44
  %141 = bitcast i32 %137 to float, !dbg !44
  %142 = bitcast i32 %138 to float, !dbg !44
  %143 = bitcast i32 %139 to float, !dbg !44
  %144 = bitcast i32 %140 to float, !dbg !44
  %145 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %76, i1 %68, i32 -8388608, i1 %68, i32 -8388608, i1 %68, i32 -8388608, i1 %68, i32 -8388608, i1 %68) #1, !dbg !44
  %146 = extractvalue { i32, i32, i32, i32 } %145, 0, !dbg !44
  %147 = extractvalue { i32, i32, i32, i32 } %145, 1, !dbg !44
  %148 = extractvalue { i32, i32, i32, i32 } %145, 2, !dbg !44
  %149 = extractvalue { i32, i32, i32, i32 } %145, 3, !dbg !44
  %150 = bitcast i32 %146 to float, !dbg !44
  %151 = bitcast i32 %147 to float, !dbg !44
  %152 = bitcast i32 %148 to float, !dbg !44
  %153 = bitcast i32 %149 to float, !dbg !44
  %154 = fcmp olt float %128, %141, !dbg !45
  %155 = fcmp olt float %129, %142, !dbg !45
  %156 = fcmp olt float %130, %143, !dbg !45
  %157 = fcmp olt float %131, %144, !dbg !45
  %158 = fcmp olt float %132, %150, !dbg !45
  %159 = fcmp olt float %133, %151, !dbg !45
  %160 = fcmp olt float %134, %152, !dbg !45
  %161 = fcmp olt float %135, %153, !dbg !45
  %162 = fcmp uno float %141, 0.000000e+00, !dbg !47
  %163 = fcmp uno float %142, 0.000000e+00, !dbg !47
  %164 = fcmp uno float %143, 0.000000e+00, !dbg !47
  %165 = fcmp uno float %144, 0.000000e+00, !dbg !47
  %166 = fcmp uno float %150, 0.000000e+00, !dbg !47
  %167 = fcmp uno float %151, 0.000000e+00, !dbg !47
  %168 = fcmp uno float %152, 0.000000e+00, !dbg !47
  %169 = fcmp uno float %153, 0.000000e+00, !dbg !47
  %170 = or i1 %162, %154, !dbg !48
  %171 = or i1 %163, %155, !dbg !48
  %172 = or i1 %164, %156, !dbg !48
  %173 = or i1 %165, %157, !dbg !48
  %174 = or i1 %166, %158, !dbg !48
  %175 = or i1 %167, %159, !dbg !48
  %176 = or i1 %168, %160, !dbg !48
  %177 = or i1 %169, %161, !dbg !48
  %178 = select i1 %170, float %141, float %128, !dbg !49
  %179 = select i1 %171, float %142, float %129, !dbg !49
  %180 = select i1 %172, float %143, float %130, !dbg !49
  %181 = select i1 %173, float %144, float %131, !dbg !49
  %182 = select i1 %174, float %150, float %132, !dbg !49
  %183 = select i1 %175, float %151, float %133, !dbg !49
  %184 = select i1 %176, float %152, float %134, !dbg !49
  %185 = select i1 %177, float %153, float %135, !dbg !49
  %186 = extractelement <2 x i1> %18, i64 0, !dbg !50
  %187 = and i1 %186, %19, !dbg !50
  %188 = extractelement <2 x i1> %55, i64 0, !dbg !50
  %189 = and i1 %188, %56, !dbg !50
  %190 = add i32 %25, -512, !dbg !51
  %191 = add i32 %190, %22, !dbg !52
  %192 = add i32 %62, -512, !dbg !51
  %193 = add i32 %192, %59, !dbg !52
  %194 = sext i32 %191 to i64, !dbg !53
  %195 = getelementptr float, ptr addrspace(1) %0, i64 %194, !dbg !53
  %196 = sext i32 %193 to i64, !dbg !53
  %197 = getelementptr float, ptr addrspace(1) %0, i64 %196, !dbg !53
  %198 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %195, i1 %187, i32 -8388608, i1 %187, i32 -8388608, i1 %187, i32 -8388608, i1 %187, i32 -8388608, i1 %187) #1, !dbg !54
  %199 = extractvalue { i32, i32, i32, i32 } %198, 0, !dbg !54
  %200 = extractvalue { i32, i32, i32, i32 } %198, 1, !dbg !54
  %201 = extractvalue { i32, i32, i32, i32 } %198, 2, !dbg !54
  %202 = extractvalue { i32, i32, i32, i32 } %198, 3, !dbg !54
  %203 = bitcast i32 %199 to float, !dbg !54
  %204 = bitcast i32 %200 to float, !dbg !54
  %205 = bitcast i32 %201 to float, !dbg !54
  %206 = bitcast i32 %202 to float, !dbg !54
  %207 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %197, i1 %189, i32 -8388608, i1 %189, i32 -8388608, i1 %189, i32 -8388608, i1 %189, i32 -8388608, i1 %189) #1, !dbg !54
  %208 = extractvalue { i32, i32, i32, i32 } %207, 0, !dbg !54
  %209 = extractvalue { i32, i32, i32, i32 } %207, 1, !dbg !54
  %210 = extractvalue { i32, i32, i32, i32 } %207, 2, !dbg !54
  %211 = extractvalue { i32, i32, i32, i32 } %207, 3, !dbg !54
  %212 = bitcast i32 %208 to float, !dbg !54
  %213 = bitcast i32 %209 to float, !dbg !54
  %214 = bitcast i32 %210 to float, !dbg !54
  %215 = bitcast i32 %211 to float, !dbg !54
  %216 = fcmp olt float %178, %203, !dbg !55
  %217 = fcmp olt float %179, %204, !dbg !55
  %218 = fcmp olt float %180, %205, !dbg !55
  %219 = fcmp olt float %181, %206, !dbg !55
  %220 = fcmp olt float %182, %212, !dbg !55
  %221 = fcmp olt float %183, %213, !dbg !55
  %222 = fcmp olt float %184, %214, !dbg !55
  %223 = fcmp olt float %185, %215, !dbg !55
  %224 = fcmp uno float %203, 0.000000e+00, !dbg !57
  %225 = fcmp uno float %204, 0.000000e+00, !dbg !57
  %226 = fcmp uno float %205, 0.000000e+00, !dbg !57
  %227 = fcmp uno float %206, 0.000000e+00, !dbg !57
  %228 = fcmp uno float %212, 0.000000e+00, !dbg !57
  %229 = fcmp uno float %213, 0.000000e+00, !dbg !57
  %230 = fcmp uno float %214, 0.000000e+00, !dbg !57
  %231 = fcmp uno float %215, 0.000000e+00, !dbg !57
  %232 = or i1 %224, %216, !dbg !58
  %233 = or i1 %225, %217, !dbg !58
  %234 = or i1 %226, %218, !dbg !58
  %235 = or i1 %227, %219, !dbg !58
  %236 = or i1 %228, %220, !dbg !58
  %237 = or i1 %229, %221, !dbg !58
  %238 = or i1 %230, %222, !dbg !58
  %239 = or i1 %231, %223, !dbg !58
  %240 = select i1 %232, float %203, float %178, !dbg !59
  %241 = select i1 %233, float %204, float %179, !dbg !59
  %242 = select i1 %234, float %205, float %180, !dbg !59
  %243 = select i1 %235, float %206, float %181, !dbg !59
  %244 = select i1 %236, float %212, float %182, !dbg !59
  %245 = select i1 %237, float %213, float %183, !dbg !59
  %246 = select i1 %238, float %214, float %184, !dbg !59
  %247 = select i1 %239, float %215, float %185, !dbg !59
  %248 = or i32 %16, %21, !dbg !17
  %249 = icmp sgt i32 %248, -1, !dbg !17
  %250 = or i32 %53, %58, !dbg !17
  %251 = icmp sgt i32 %250, -1, !dbg !17
  %252 = add i32 %25, %22, !dbg !60
  %253 = add i32 %62, %59, !dbg !60
  %254 = sext i32 %252 to i64, !dbg !61
  %255 = getelementptr float, ptr addrspace(1) %0, i64 %254, !dbg !61
  %256 = sext i32 %253 to i64, !dbg !61
  %257 = getelementptr float, ptr addrspace(1) %0, i64 %256, !dbg !61
  %258 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %255, i1 %249, i32 -8388608, i1 %249, i32 -8388608, i1 %249, i32 -8388608, i1 %249, i32 -8388608, i1 %249) #1, !dbg !62
  %259 = extractvalue { i32, i32, i32, i32 } %258, 0, !dbg !62
  %260 = extractvalue { i32, i32, i32, i32 } %258, 1, !dbg !62
  %261 = extractvalue { i32, i32, i32, i32 } %258, 2, !dbg !62
  %262 = extractvalue { i32, i32, i32, i32 } %258, 3, !dbg !62
  %263 = bitcast i32 %259 to float, !dbg !62
  %264 = bitcast i32 %260 to float, !dbg !62
  %265 = bitcast i32 %261 to float, !dbg !62
  %266 = bitcast i32 %262 to float, !dbg !62
  %267 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %257, i1 %251, i32 -8388608, i1 %251, i32 -8388608, i1 %251, i32 -8388608, i1 %251, i32 -8388608, i1 %251) #1, !dbg !62
  %268 = extractvalue { i32, i32, i32, i32 } %267, 0, !dbg !62
  %269 = extractvalue { i32, i32, i32, i32 } %267, 1, !dbg !62
  %270 = extractvalue { i32, i32, i32, i32 } %267, 2, !dbg !62
  %271 = extractvalue { i32, i32, i32, i32 } %267, 3, !dbg !62
  %272 = bitcast i32 %268 to float, !dbg !62
  %273 = bitcast i32 %269 to float, !dbg !62
  %274 = bitcast i32 %270 to float, !dbg !62
  %275 = bitcast i32 %271 to float, !dbg !62
  %276 = fcmp olt float %240, %263, !dbg !63
  %277 = fcmp olt float %241, %264, !dbg !63
  %278 = fcmp olt float %242, %265, !dbg !63
  %279 = fcmp olt float %243, %266, !dbg !63
  %280 = fcmp olt float %244, %272, !dbg !63
  %281 = fcmp olt float %245, %273, !dbg !63
  %282 = fcmp olt float %246, %274, !dbg !63
  %283 = fcmp olt float %247, %275, !dbg !63
  %284 = fcmp uno float %263, 0.000000e+00, !dbg !65
  %285 = fcmp uno float %264, 0.000000e+00, !dbg !65
  %286 = fcmp uno float %265, 0.000000e+00, !dbg !65
  %287 = fcmp uno float %266, 0.000000e+00, !dbg !65
  %288 = fcmp uno float %272, 0.000000e+00, !dbg !65
  %289 = fcmp uno float %273, 0.000000e+00, !dbg !65
  %290 = fcmp uno float %274, 0.000000e+00, !dbg !65
  %291 = fcmp uno float %275, 0.000000e+00, !dbg !65
  %292 = or i1 %284, %276, !dbg !66
  %293 = or i1 %285, %277, !dbg !66
  %294 = or i1 %286, %278, !dbg !66
  %295 = or i1 %287, %279, !dbg !66
  %296 = or i1 %288, %280, !dbg !66
  %297 = or i1 %289, %281, !dbg !66
  %298 = or i1 %290, %282, !dbg !66
  %299 = or i1 %291, %283, !dbg !66
  %300 = select i1 %292, float %263, float %240, !dbg !67
  %301 = select i1 %293, float %264, float %241, !dbg !67
  %302 = select i1 %294, float %265, float %242, !dbg !67
  %303 = select i1 %295, float %266, float %243, !dbg !67
  %304 = select i1 %296, float %272, float %244, !dbg !67
  %305 = select i1 %297, float %273, float %245, !dbg !67
  %306 = select i1 %298, float %274, float %246, !dbg !67
  %307 = select i1 %299, float %275, float %247, !dbg !67
  %308 = add i32 %25, 512, !dbg !68
  %309 = add i32 %308, %22, !dbg !69
  %310 = add i32 %62, 512, !dbg !68
  %311 = add i32 %310, %59, !dbg !69
  %312 = sext i32 %309 to i64, !dbg !70
  %313 = getelementptr float, ptr addrspace(1) %0, i64 %312, !dbg !70
  %314 = sext i32 %311 to i64, !dbg !70
  %315 = getelementptr float, ptr addrspace(1) %0, i64 %314, !dbg !70
  %316 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %313, i1 %249, i32 -8388608, i1 %249, i32 -8388608, i1 %249, i32 -8388608, i1 %249, i32 -8388608, i1 %249) #1, !dbg !71
  %317 = extractvalue { i32, i32, i32, i32 } %316, 0, !dbg !71
  %318 = extractvalue { i32, i32, i32, i32 } %316, 1, !dbg !71
  %319 = extractvalue { i32, i32, i32, i32 } %316, 2, !dbg !71
  %320 = extractvalue { i32, i32, i32, i32 } %316, 3, !dbg !71
  %321 = bitcast i32 %317 to float, !dbg !71
  %322 = bitcast i32 %318 to float, !dbg !71
  %323 = bitcast i32 %319 to float, !dbg !71
  %324 = bitcast i32 %320 to float, !dbg !71
  %325 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %315, i1 %251, i32 -8388608, i1 %251, i32 -8388608, i1 %251, i32 -8388608, i1 %251, i32 -8388608, i1 %251) #1, !dbg !71
  %326 = extractvalue { i32, i32, i32, i32 } %325, 0, !dbg !71
  %327 = extractvalue { i32, i32, i32, i32 } %325, 1, !dbg !71
  %328 = extractvalue { i32, i32, i32, i32 } %325, 2, !dbg !71
  %329 = extractvalue { i32, i32, i32, i32 } %325, 3, !dbg !71
  %330 = bitcast i32 %326 to float, !dbg !71
  %331 = bitcast i32 %327 to float, !dbg !71
  %332 = bitcast i32 %328 to float, !dbg !71
  %333 = bitcast i32 %329 to float, !dbg !71
  %334 = fcmp olt float %300, %321, !dbg !72
  %335 = fcmp olt float %301, %322, !dbg !72
  %336 = fcmp olt float %302, %323, !dbg !72
  %337 = fcmp olt float %303, %324, !dbg !72
  %338 = fcmp olt float %304, %330, !dbg !72
  %339 = fcmp olt float %305, %331, !dbg !72
  %340 = fcmp olt float %306, %332, !dbg !72
  %341 = fcmp olt float %307, %333, !dbg !72
  %342 = fcmp uno float %321, 0.000000e+00, !dbg !74
  %343 = fcmp uno float %322, 0.000000e+00, !dbg !74
  %344 = fcmp uno float %323, 0.000000e+00, !dbg !74
  %345 = fcmp uno float %324, 0.000000e+00, !dbg !74
  %346 = fcmp uno float %330, 0.000000e+00, !dbg !74
  %347 = fcmp uno float %331, 0.000000e+00, !dbg !74
  %348 = fcmp uno float %332, 0.000000e+00, !dbg !74
  %349 = fcmp uno float %333, 0.000000e+00, !dbg !74
  %350 = or i1 %342, %334, !dbg !75
  %351 = or i1 %343, %335, !dbg !75
  %352 = or i1 %344, %336, !dbg !75
  %353 = or i1 %345, %337, !dbg !75
  %354 = or i1 %346, %338, !dbg !75
  %355 = or i1 %347, %339, !dbg !75
  %356 = or i1 %348, %340, !dbg !75
  %357 = or i1 %349, %341, !dbg !75
  %358 = select i1 %350, float %321, float %300, !dbg !76
  %359 = select i1 %351, float %322, float %301, !dbg !76
  %360 = select i1 %352, float %323, float %302, !dbg !76
  %361 = select i1 %353, float %324, float %303, !dbg !76
  %362 = select i1 %354, float %330, float %304, !dbg !76
  %363 = select i1 %355, float %331, float %305, !dbg !76
  %364 = select i1 %356, float %332, float %306, !dbg !76
  %365 = select i1 %357, float %333, float %307, !dbg !76
  %366 = add i32 %25, 32256, !dbg !77
  %367 = add i32 %366, %22, !dbg !78
  %368 = add i32 %62, 32256, !dbg !77
  %369 = add i32 %368, %59, !dbg !78
  %370 = sext i32 %367 to i64, !dbg !79
  %371 = getelementptr float, ptr addrspace(1) %0, i64 %370, !dbg !79
  %372 = sext i32 %369 to i64, !dbg !79
  %373 = getelementptr float, ptr addrspace(1) %0, i64 %372, !dbg !79
  %374 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %371, i1 %187, i32 -8388608, i1 %187, i32 -8388608, i1 %187, i32 -8388608, i1 %187, i32 -8388608, i1 %187) #1, !dbg !80
  %375 = extractvalue { i32, i32, i32, i32 } %374, 0, !dbg !80
  %376 = extractvalue { i32, i32, i32, i32 } %374, 1, !dbg !80
  %377 = extractvalue { i32, i32, i32, i32 } %374, 2, !dbg !80
  %378 = extractvalue { i32, i32, i32, i32 } %374, 3, !dbg !80
  %379 = bitcast i32 %375 to float, !dbg !80
  %380 = bitcast i32 %376 to float, !dbg !80
  %381 = bitcast i32 %377 to float, !dbg !80
  %382 = bitcast i32 %378 to float, !dbg !80
  %383 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %373, i1 %189, i32 -8388608, i1 %189, i32 -8388608, i1 %189, i32 -8388608, i1 %189, i32 -8388608, i1 %189) #1, !dbg !80
  %384 = extractvalue { i32, i32, i32, i32 } %383, 0, !dbg !80
  %385 = extractvalue { i32, i32, i32, i32 } %383, 1, !dbg !80
  %386 = extractvalue { i32, i32, i32, i32 } %383, 2, !dbg !80
  %387 = extractvalue { i32, i32, i32, i32 } %383, 3, !dbg !80
  %388 = bitcast i32 %384 to float, !dbg !80
  %389 = bitcast i32 %385 to float, !dbg !80
  %390 = bitcast i32 %386 to float, !dbg !80
  %391 = bitcast i32 %387 to float, !dbg !80
  %392 = fcmp olt float %358, %379, !dbg !81
  %393 = fcmp olt float %359, %380, !dbg !81
  %394 = fcmp olt float %360, %381, !dbg !81
  %395 = fcmp olt float %361, %382, !dbg !81
  %396 = fcmp olt float %362, %388, !dbg !81
  %397 = fcmp olt float %363, %389, !dbg !81
  %398 = fcmp olt float %364, %390, !dbg !81
  %399 = fcmp olt float %365, %391, !dbg !81
  %400 = fcmp uno float %379, 0.000000e+00, !dbg !83
  %401 = fcmp uno float %380, 0.000000e+00, !dbg !83
  %402 = fcmp uno float %381, 0.000000e+00, !dbg !83
  %403 = fcmp uno float %382, 0.000000e+00, !dbg !83
  %404 = fcmp uno float %388, 0.000000e+00, !dbg !83
  %405 = fcmp uno float %389, 0.000000e+00, !dbg !83
  %406 = fcmp uno float %390, 0.000000e+00, !dbg !83
  %407 = fcmp uno float %391, 0.000000e+00, !dbg !83
  %408 = or i1 %400, %392, !dbg !84
  %409 = or i1 %401, %393, !dbg !84
  %410 = or i1 %402, %394, !dbg !84
  %411 = or i1 %403, %395, !dbg !84
  %412 = or i1 %404, %396, !dbg !84
  %413 = or i1 %405, %397, !dbg !84
  %414 = or i1 %406, %398, !dbg !84
  %415 = or i1 %407, %399, !dbg !84
  %416 = select i1 %408, float %379, float %358, !dbg !85
  %417 = select i1 %409, float %380, float %359, !dbg !85
  %418 = select i1 %410, float %381, float %360, !dbg !85
  %419 = select i1 %411, float %382, float %361, !dbg !85
  %420 = select i1 %412, float %388, float %362, !dbg !85
  %421 = select i1 %413, float %389, float %363, !dbg !85
  %422 = select i1 %414, float %390, float %364, !dbg !85
  %423 = select i1 %415, float %391, float %365, !dbg !85
  %424 = add i32 %25, 32768, !dbg !86
  %425 = add i32 %424, %22, !dbg !87
  %426 = add i32 %62, 32768, !dbg !86
  %427 = add i32 %426, %59, !dbg !87
  %428 = sext i32 %425 to i64, !dbg !88
  %429 = getelementptr float, ptr addrspace(1) %0, i64 %428, !dbg !88
  %430 = sext i32 %427 to i64, !dbg !88
  %431 = getelementptr float, ptr addrspace(1) %0, i64 %430, !dbg !88
  %432 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %429, i1 %249, i32 -8388608, i1 %249, i32 -8388608, i1 %249, i32 -8388608, i1 %249, i32 -8388608, i1 %249) #1, !dbg !89
  %433 = extractvalue { i32, i32, i32, i32 } %432, 0, !dbg !89
  %434 = extractvalue { i32, i32, i32, i32 } %432, 1, !dbg !89
  %435 = extractvalue { i32, i32, i32, i32 } %432, 2, !dbg !89
  %436 = extractvalue { i32, i32, i32, i32 } %432, 3, !dbg !89
  %437 = bitcast i32 %433 to float, !dbg !89
  %438 = bitcast i32 %434 to float, !dbg !89
  %439 = bitcast i32 %435 to float, !dbg !89
  %440 = bitcast i32 %436 to float, !dbg !89
  %441 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %431, i1 %251, i32 -8388608, i1 %251, i32 -8388608, i1 %251, i32 -8388608, i1 %251, i32 -8388608, i1 %251) #1, !dbg !89
  %442 = extractvalue { i32, i32, i32, i32 } %441, 0, !dbg !89
  %443 = extractvalue { i32, i32, i32, i32 } %441, 1, !dbg !89
  %444 = extractvalue { i32, i32, i32, i32 } %441, 2, !dbg !89
  %445 = extractvalue { i32, i32, i32, i32 } %441, 3, !dbg !89
  %446 = bitcast i32 %442 to float, !dbg !89
  %447 = bitcast i32 %443 to float, !dbg !89
  %448 = bitcast i32 %444 to float, !dbg !89
  %449 = bitcast i32 %445 to float, !dbg !89
  %450 = fcmp olt float %416, %437, !dbg !90
  %451 = fcmp olt float %417, %438, !dbg !90
  %452 = fcmp olt float %418, %439, !dbg !90
  %453 = fcmp olt float %419, %440, !dbg !90
  %454 = fcmp olt float %420, %446, !dbg !90
  %455 = fcmp olt float %421, %447, !dbg !90
  %456 = fcmp olt float %422, %448, !dbg !90
  %457 = fcmp olt float %423, %449, !dbg !90
  %458 = fcmp uno float %437, 0.000000e+00, !dbg !92
  %459 = fcmp uno float %438, 0.000000e+00, !dbg !92
  %460 = fcmp uno float %439, 0.000000e+00, !dbg !92
  %461 = fcmp uno float %440, 0.000000e+00, !dbg !92
  %462 = fcmp uno float %446, 0.000000e+00, !dbg !92
  %463 = fcmp uno float %447, 0.000000e+00, !dbg !92
  %464 = fcmp uno float %448, 0.000000e+00, !dbg !92
  %465 = fcmp uno float %449, 0.000000e+00, !dbg !92
  %466 = or i1 %458, %450, !dbg !93
  %467 = or i1 %459, %451, !dbg !93
  %468 = or i1 %460, %452, !dbg !93
  %469 = or i1 %461, %453, !dbg !93
  %470 = or i1 %462, %454, !dbg !93
  %471 = or i1 %463, %455, !dbg !93
  %472 = or i1 %464, %456, !dbg !93
  %473 = or i1 %465, %457, !dbg !93
  %474 = select i1 %466, float %437, float %416, !dbg !94
  %475 = select i1 %467, float %438, float %417, !dbg !94
  %476 = select i1 %468, float %439, float %418, !dbg !94
  %477 = select i1 %469, float %440, float %419, !dbg !94
  %478 = select i1 %470, float %446, float %420, !dbg !94
  %479 = select i1 %471, float %447, float %421, !dbg !94
  %480 = select i1 %472, float %448, float %422, !dbg !94
  %481 = select i1 %473, float %449, float %423, !dbg !94
  %482 = add i32 %25, 33280, !dbg !95
  %483 = add i32 %482, %22, !dbg !96
  %484 = add i32 %62, 33280, !dbg !95
  %485 = add i32 %484, %59, !dbg !96
  %486 = sext i32 %483 to i64, !dbg !97
  %487 = getelementptr float, ptr addrspace(1) %0, i64 %486, !dbg !97
  %488 = sext i32 %485 to i64, !dbg !97
  %489 = getelementptr float, ptr addrspace(1) %0, i64 %488, !dbg !97
  %490 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %487, i1 %249, i32 -8388608, i1 %249, i32 -8388608, i1 %249, i32 -8388608, i1 %249, i32 -8388608, i1 %249) #1, !dbg !98
  %491 = extractvalue { i32, i32, i32, i32 } %490, 0, !dbg !98
  %492 = extractvalue { i32, i32, i32, i32 } %490, 1, !dbg !98
  %493 = extractvalue { i32, i32, i32, i32 } %490, 2, !dbg !98
  %494 = extractvalue { i32, i32, i32, i32 } %490, 3, !dbg !98
  %495 = bitcast i32 %491 to float, !dbg !98
  %496 = bitcast i32 %492 to float, !dbg !98
  %497 = bitcast i32 %493 to float, !dbg !98
  %498 = bitcast i32 %494 to float, !dbg !98
  %499 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %489, i1 %251, i32 -8388608, i1 %251, i32 -8388608, i1 %251, i32 -8388608, i1 %251, i32 -8388608, i1 %251) #1, !dbg !98
  %500 = extractvalue { i32, i32, i32, i32 } %499, 0, !dbg !98
  %501 = extractvalue { i32, i32, i32, i32 } %499, 1, !dbg !98
  %502 = extractvalue { i32, i32, i32, i32 } %499, 2, !dbg !98
  %503 = extractvalue { i32, i32, i32, i32 } %499, 3, !dbg !98
  %504 = bitcast i32 %500 to float, !dbg !98
  %505 = bitcast i32 %501 to float, !dbg !98
  %506 = bitcast i32 %502 to float, !dbg !98
  %507 = bitcast i32 %503 to float, !dbg !98
  %508 = fcmp olt float %474, %495, !dbg !99
  %509 = fcmp olt float %475, %496, !dbg !99
  %510 = fcmp olt float %476, %497, !dbg !99
  %511 = fcmp olt float %477, %498, !dbg !99
  %512 = fcmp olt float %478, %504, !dbg !99
  %513 = fcmp olt float %479, %505, !dbg !99
  %514 = fcmp olt float %480, %506, !dbg !99
  %515 = fcmp olt float %481, %507, !dbg !99
  %516 = fcmp uno float %495, 0.000000e+00, !dbg !101
  %517 = fcmp uno float %496, 0.000000e+00, !dbg !101
  %518 = fcmp uno float %497, 0.000000e+00, !dbg !101
  %519 = fcmp uno float %498, 0.000000e+00, !dbg !101
  %520 = fcmp uno float %504, 0.000000e+00, !dbg !101
  %521 = fcmp uno float %505, 0.000000e+00, !dbg !101
  %522 = fcmp uno float %506, 0.000000e+00, !dbg !101
  %523 = fcmp uno float %507, 0.000000e+00, !dbg !101
  %524 = or i1 %516, %508, !dbg !102
  %525 = or i1 %517, %509, !dbg !102
  %526 = or i1 %518, %510, !dbg !102
  %527 = or i1 %519, %511, !dbg !102
  %528 = or i1 %520, %512, !dbg !102
  %529 = or i1 %521, %513, !dbg !102
  %530 = or i1 %522, %514, !dbg !102
  %531 = or i1 %523, %515, !dbg !102
  %532 = sext i32 %9 to i64, !dbg !103
  %533 = getelementptr float, ptr addrspace(1) %1, i64 %532, !dbg !103
  %534 = sext i32 %10 to i64, !dbg !103
  %535 = getelementptr float, ptr addrspace(1) %1, i64 %534, !dbg !103
  %536 = bitcast float %474 to i32, !dbg !104
  %537 = select i1 %524, i32 %491, i32 %536, !dbg !105
  %538 = bitcast float %475 to i32, !dbg !104
  %539 = select i1 %525, i32 %492, i32 %538, !dbg !105
  %540 = bitcast float %476 to i32, !dbg !104
  %541 = select i1 %526, i32 %493, i32 %540, !dbg !105
  %542 = bitcast float %477 to i32, !dbg !104
  %543 = select i1 %527, i32 %494, i32 %542, !dbg !105
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %537, i32 %539, i32 %541, i32 %543, ptr addrspace(1) %533, i1 true) #1, !dbg !104
  %544 = bitcast float %478 to i32, !dbg !104
  %545 = select i1 %528, i32 %500, i32 %544, !dbg !105
  %546 = bitcast float %479 to i32, !dbg !104
  %547 = select i1 %529, i32 %501, i32 %546, !dbg !105
  %548 = bitcast float %480 to i32, !dbg !104
  %549 = select i1 %530, i32 %502, i32 %548, !dbg !105
  %550 = bitcast float %481 to i32, !dbg !104
  %551 = select i1 %531, i32 %503, i32 %550, !dbg !105
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %545, i32 %547, i32 %549, i32 %551, ptr addrspace(1) %535, i1 true) #1, !dbg !104
  ret void, !dbg !106
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cbt5dhejyt7mzl3qd2zp4fw5fqnkbuaemh3kxxzwpgx4qlsqsgp4.py", directory: "inductor_cache/bt")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_10, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_10, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_10", linkageName: "triton_poi_fused_max_pool2d_with_indices_10", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 26, column: 19, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 30, scope: !7)
!17 = !DILocation(line: 62, column: 20, scope: !7)
!18 = !DILocation(line: 31, column: 19, scope: !7)
!19 = !DILocation(line: 56, column: 21, scope: !7)
!20 = !DILocation(line: 39, column: 19, scope: !7)
!21 = !DILocation(line: 40, column: 52, scope: !7)
!22 = !DILocation(line: 40, column: 63, scope: !7)
!23 = !DILocation(line: 40, column: 42, scope: !7)
!24 = !DILocation(line: 40, column: 47, scope: !7)
!25 = !DILocation(line: 40, column: 57, scope: !7)
!26 = !DILocation(line: 40, column: 31, scope: !7)
!27 = !DILocation(line: 40, column: 68, scope: !7)
!28 = !DILocation(line: 42, column: 21, scope: !7)
!29 = !DILocation(line: 45, column: 19, scope: !7)
!30 = !DILocation(line: 46, column: 47, scope: !7)
!31 = !DILocation(line: 46, column: 57, scope: !7)
!32 = !DILocation(line: 46, column: 31, scope: !7)
!33 = !DILocation(line: 53, column: 47, scope: !7)
!34 = !DILocation(line: 53, column: 57, scope: !7)
!35 = !DILocation(line: 53, column: 31, scope: !7)
!36 = !DILocation(line: 46, column: 68, scope: !7)
!37 = !DILocation(line: 118, column: 15, scope: !38, inlinedAt: !40)
!38 = distinct !DILexicalBlockFile(scope: !7, file: !39, discriminator: 0)
!39 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!40 = !DILocation(line: 47, column: 42, scope: !7)
!41 = !DILocation(line: 120, column: 21, scope: !38, inlinedAt: !40)
!42 = !DILocation(line: 120, column: 16, scope: !38, inlinedAt: !40)
!43 = !DILocation(line: 121, column: 29, scope: !38, inlinedAt: !40)
!44 = !DILocation(line: 53, column: 68, scope: !7)
!45 = !DILocation(line: 118, column: 15, scope: !38, inlinedAt: !46)
!46 = !DILocation(line: 54, column: 42, scope: !7)
!47 = !DILocation(line: 120, column: 21, scope: !38, inlinedAt: !46)
!48 = !DILocation(line: 120, column: 16, scope: !38, inlinedAt: !46)
!49 = !DILocation(line: 121, column: 29, scope: !38, inlinedAt: !46)
!50 = !DILocation(line: 59, column: 20, scope: !7)
!51 = !DILocation(line: 60, column: 45, scope: !7)
!52 = !DILocation(line: 60, column: 55, scope: !7)
!53 = !DILocation(line: 60, column: 31, scope: !7)
!54 = !DILocation(line: 60, column: 66, scope: !7)
!55 = !DILocation(line: 118, column: 15, scope: !38, inlinedAt: !56)
!56 = !DILocation(line: 61, column: 42, scope: !7)
!57 = !DILocation(line: 120, column: 21, scope: !38, inlinedAt: !56)
!58 = !DILocation(line: 120, column: 16, scope: !38, inlinedAt: !56)
!59 = !DILocation(line: 121, column: 29, scope: !38, inlinedAt: !56)
!60 = !DILocation(line: 63, column: 46, scope: !7)
!61 = !DILocation(line: 63, column: 31, scope: !7)
!62 = !DILocation(line: 63, column: 57, scope: !7)
!63 = !DILocation(line: 118, column: 15, scope: !38, inlinedAt: !64)
!64 = !DILocation(line: 64, column: 42, scope: !7)
!65 = !DILocation(line: 120, column: 21, scope: !38, inlinedAt: !64)
!66 = !DILocation(line: 120, column: 16, scope: !38, inlinedAt: !64)
!67 = !DILocation(line: 121, column: 29, scope: !38, inlinedAt: !64)
!68 = !DILocation(line: 66, column: 42, scope: !7)
!69 = !DILocation(line: 66, column: 52, scope: !7)
!70 = !DILocation(line: 66, column: 31, scope: !7)
!71 = !DILocation(line: 66, column: 63, scope: !7)
!72 = !DILocation(line: 118, column: 15, scope: !38, inlinedAt: !73)
!73 = !DILocation(line: 67, column: 42, scope: !7)
!74 = !DILocation(line: 120, column: 21, scope: !38, inlinedAt: !73)
!75 = !DILocation(line: 120, column: 16, scope: !38, inlinedAt: !73)
!76 = !DILocation(line: 121, column: 29, scope: !38, inlinedAt: !73)
!77 = !DILocation(line: 73, column: 44, scope: !7)
!78 = !DILocation(line: 73, column: 54, scope: !7)
!79 = !DILocation(line: 73, column: 31, scope: !7)
!80 = !DILocation(line: 73, column: 65, scope: !7)
!81 = !DILocation(line: 118, column: 15, scope: !38, inlinedAt: !82)
!82 = !DILocation(line: 74, column: 42, scope: !7)
!83 = !DILocation(line: 120, column: 21, scope: !38, inlinedAt: !82)
!84 = !DILocation(line: 120, column: 16, scope: !38, inlinedAt: !82)
!85 = !DILocation(line: 121, column: 29, scope: !38, inlinedAt: !82)
!86 = !DILocation(line: 76, column: 44, scope: !7)
!87 = !DILocation(line: 76, column: 54, scope: !7)
!88 = !DILocation(line: 76, column: 31, scope: !7)
!89 = !DILocation(line: 76, column: 65, scope: !7)
!90 = !DILocation(line: 118, column: 15, scope: !38, inlinedAt: !91)
!91 = !DILocation(line: 77, column: 42, scope: !7)
!92 = !DILocation(line: 120, column: 21, scope: !38, inlinedAt: !91)
!93 = !DILocation(line: 120, column: 16, scope: !38, inlinedAt: !91)
!94 = !DILocation(line: 121, column: 29, scope: !38, inlinedAt: !91)
!95 = !DILocation(line: 79, column: 44, scope: !7)
!96 = !DILocation(line: 79, column: 54, scope: !7)
!97 = !DILocation(line: 79, column: 31, scope: !7)
!98 = !DILocation(line: 79, column: 65, scope: !7)
!99 = !DILocation(line: 118, column: 15, scope: !38, inlinedAt: !100)
!100 = !DILocation(line: 80, column: 42, scope: !7)
!101 = !DILocation(line: 120, column: 21, scope: !38, inlinedAt: !100)
!102 = !DILocation(line: 120, column: 16, scope: !38, inlinedAt: !100)
!103 = !DILocation(line: 81, column: 25, scope: !7)
!104 = !DILocation(line: 81, column: 37, scope: !7)
!105 = !DILocation(line: 121, column: 29, scope: !38, inlinedAt: !100)
!106 = !DILocation(line: 81, column: 4, scope: !7)
