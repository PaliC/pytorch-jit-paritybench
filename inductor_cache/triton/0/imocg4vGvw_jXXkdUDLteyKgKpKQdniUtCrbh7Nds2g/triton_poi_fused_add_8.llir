; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_add_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #3, !dbg !10
  %10 = shl i32 %9, 2, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = lshr i32 %11, 6, !dbg !12
  %.lobit = and i32 %12, 1, !dbg !12
  %13 = or disjoint i32 %10, %.lobit, !dbg !13
  %14 = or disjoint i32 %13, 2, !dbg !13
  %15 = icmp slt i32 %13, 384, !dbg !14
  %16 = icmp slt i32 %14, 384, !dbg !14
  %17 = icmp slt i32 %10, 384, !dbg !14
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !15
  %19 = shl i32 %18, 8, !dbg !16
  %20 = shl i32 %11, 2, !dbg !17
  %21 = and i32 %20, 252, !dbg !17
  %22 = and i32 %11, 127, !dbg !17
  %23 = or disjoint i32 %22, 128, !dbg !17
  %24 = or disjoint i32 %19, %21, !dbg !18
  %25 = or disjoint i32 %24, 1, !dbg !18
  %26 = or disjoint i32 %24, 2, !dbg !18
  %27 = or disjoint i32 %24, 3, !dbg !18
  %28 = or disjoint i32 %19, %22, !dbg !18
  %29 = or disjoint i32 %19, %23, !dbg !18
  %30 = icmp slt i32 %24, 256, !dbg !19
  %31 = icmp slt i32 %28, 256, !dbg !19
  %32 = icmp slt i32 %29, 256, !dbg !19
  %33 = srem i32 %14, 96, !dbg !20
  %.frozen = freeze i32 %10, !dbg !21
  %34 = sdiv i32 %.frozen, 96, !dbg !21
  %35 = mul i32 %34, 96, !dbg !20
  %.decomposed = sub i32 %.frozen, %35, !dbg !20
  %.frozen25 = freeze i32 %24, !dbg !22
  %36 = sdiv i32 %.frozen25, 16, !dbg !22
  %37 = mul i32 %36, 16, !dbg !23
  %.decomposed26 = sub i32 %.frozen25, %37, !dbg !23
  %38 = srem i32 %25, 16, !dbg !23
  %39 = srem i32 %26, 16, !dbg !23
  %40 = srem i32 %27, 16, !dbg !23
  %.frozen27 = freeze i32 %28, !dbg !22
  %41 = sdiv i32 %.frozen27, 16, !dbg !22
  %42 = mul i32 %41, 16, !dbg !23
  %.decomposed28 = sub i32 %.frozen27, %42, !dbg !23
  %.frozen29 = freeze i32 %29, !dbg !22
  %43 = sdiv i32 %.frozen29, 16, !dbg !22
  %44 = mul i32 %43, 16, !dbg !23
  %.decomposed30 = sub i32 %.frozen29, %44, !dbg !23
  %45 = shl i32 %13, 8, !dbg !24
  %46 = shl i32 %14, 8, !dbg !24
  %47 = add i32 %24, %45, !dbg !25
  %48 = add i32 %24, %46, !dbg !25
  %49 = sext i32 %47 to i64, !dbg !26
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !26
  %51 = sext i32 %48 to i64, !dbg !26
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !26
  %53 = and i1 %15, %30, !dbg !27
  %54 = and i1 %16, %30, !dbg !27
  %55 = and i1 %17, %31, !dbg !27
  %56 = and i1 %17, %32, !dbg !27
  %57 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %50, i1 %53) #3, !dbg !28
  %58 = extractvalue { i32, i32, i32, i32 } %57, 0, !dbg !28
  %59 = extractvalue { i32, i32, i32, i32 } %57, 1, !dbg !28
  %60 = extractvalue { i32, i32, i32, i32 } %57, 2, !dbg !28
  %61 = extractvalue { i32, i32, i32, i32 } %57, 3, !dbg !28
  %62 = bitcast i32 %58 to float, !dbg !28
  %63 = bitcast i32 %59 to float, !dbg !28
  %64 = bitcast i32 %60 to float, !dbg !28
  %65 = bitcast i32 %61 to float, !dbg !28
  %66 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %52, i1 %54) #3, !dbg !28
  %67 = extractvalue { i32, i32, i32, i32 } %66, 0, !dbg !28
  %68 = extractvalue { i32, i32, i32, i32 } %66, 1, !dbg !28
  %69 = extractvalue { i32, i32, i32, i32 } %66, 2, !dbg !28
  %70 = extractvalue { i32, i32, i32, i32 } %66, 3, !dbg !28
  %71 = bitcast i32 %67 to float, !dbg !28
  %72 = bitcast i32 %68 to float, !dbg !28
  %73 = bitcast i32 %69 to float, !dbg !28
  %74 = bitcast i32 %70 to float, !dbg !28
  %75 = sext i32 %33 to i64, !dbg !29
  %76 = getelementptr float, ptr addrspace(1) %1, i64 %75, !dbg !29
  %77 = shl nsw i32 %33, 8, !dbg !30
  %78 = add i32 %24, %77, !dbg !31
  %79 = sext i32 %78 to i64, !dbg !32
  %80 = getelementptr float, ptr addrspace(1) %2, i64 %79, !dbg !32
  %81 = srem i32 %41, 8, !dbg !33
  %82 = srem i32 %43, 8, !dbg !33
  %83 = insertelement <2 x i32> poison, i32 %36, i64 0, !dbg !33
  %84 = insertelement <2 x i32> %83, i32 %13, i64 1, !dbg !33
  %85 = srem <2 x i32> %84, <i32 8, i32 96>, !dbg !33
  %86 = extractelement <2 x i32> %85, i64 1, !dbg !30
  %87 = sext i32 %86 to i64, !dbg !29
  %88 = getelementptr float, ptr addrspace(1) %1, i64 %87, !dbg !29
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %88, i1 %15) #3, !dbg !34
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %88, i1 %15) #3, !dbg !34
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %88, i1 %15) #3, !dbg !34
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %88, i1 %15) #3, !dbg !34
  %93 = bitcast i32 %92 to float, !dbg !34
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 %16) #3, !dbg !34
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 %16) #3, !dbg !34
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 %16) #3, !dbg !34
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 %16) #3, !dbg !34
  %98 = bitcast i32 %97 to float, !dbg !34
  %99 = shl nsw i32 %86, 8, !dbg !30
  %100 = add i32 %99, %24, !dbg !31
  %101 = sext i32 %100 to i64, !dbg !32
  %102 = getelementptr float, ptr addrspace(1) %2, i64 %101, !dbg !32
  %103 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %102, i1 %53) #3, !dbg !35
  %104 = extractvalue { i32, i32, i32, i32 } %103, 0, !dbg !35
  %105 = extractvalue { i32, i32, i32, i32 } %103, 1, !dbg !35
  %106 = extractvalue { i32, i32, i32, i32 } %103, 2, !dbg !35
  %107 = extractvalue { i32, i32, i32, i32 } %103, 3, !dbg !35
  %108 = bitcast i32 %104 to float, !dbg !35
  %109 = bitcast i32 %105 to float, !dbg !35
  %110 = bitcast i32 %106 to float, !dbg !35
  %111 = bitcast i32 %107 to float, !dbg !35
  %112 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %80, i1 %54) #3, !dbg !35
  %113 = extractvalue { i32, i32, i32, i32 } %112, 0, !dbg !35
  %114 = extractvalue { i32, i32, i32, i32 } %112, 1, !dbg !35
  %115 = extractvalue { i32, i32, i32, i32 } %112, 2, !dbg !35
  %116 = extractvalue { i32, i32, i32, i32 } %112, 3, !dbg !35
  %117 = bitcast i32 %113 to float, !dbg !35
  %118 = bitcast i32 %114 to float, !dbg !35
  %119 = bitcast i32 %115 to float, !dbg !35
  %120 = bitcast i32 %116 to float, !dbg !35
  %121 = shl nsw <2 x i32> %85, <i32 3, i32 6>, !dbg !36
  %122 = shl nsw i32 %33, 6, !dbg !37
  %123 = extractelement <2 x i32> %121, i64 0, !dbg !38
  %124 = extractelement <2 x i32> %121, i64 1, !dbg !38
  %125 = add nsw i32 %123, %124, !dbg !38
  %126 = add nsw i32 %123, %122, !dbg !38
  %.lhs.trunc = trunc nsw i32 %.decomposed26 to i8, !dbg !39
  %127 = srem i8 %.lhs.trunc, 8, !dbg !39
  %.sext = sext i8 %127 to i32, !dbg !39
  %.lhs.trunc10 = trunc nsw i32 %38 to i8, !dbg !39
  %128 = srem i8 %.lhs.trunc10, 8, !dbg !39
  %.sext11 = sext i8 %128 to i32, !dbg !39
  %.lhs.trunc12 = trunc nsw i32 %39 to i8, !dbg !39
  %129 = srem i8 %.lhs.trunc12, 8, !dbg !39
  %.sext13 = sext i8 %129 to i32, !dbg !39
  %.lhs.trunc14 = trunc nsw i32 %40 to i8, !dbg !39
  %130 = srem i8 %.lhs.trunc14, 8, !dbg !39
  %.sext15 = sext i8 %130 to i32, !dbg !39
  %.lhs.trunc16 = trunc nsw i32 %.decomposed28 to i8, !dbg !39
  %131 = sdiv i8 %.lhs.trunc16, 8, !dbg !40
  %132 = mul i8 %131, 8, !dbg !39
  %.decomposed31 = sub i8 %.lhs.trunc16, %132, !dbg !39
  %.lhs.trunc18 = trunc nsw i32 %.decomposed30 to i8, !dbg !39
  %133 = sdiv i8 %.lhs.trunc18, 8, !dbg !40
  %134 = mul i8 %133, 8, !dbg !39
  %.decomposed32 = sub i8 %.lhs.trunc18, %134, !dbg !39
  %135 = add nsw i32 %125, %.sext, !dbg !41
  %136 = add nsw i32 %125, %.sext11, !dbg !41
  %137 = add nsw i32 %125, %.sext13, !dbg !41
  %138 = add nsw i32 %125, %.sext15, !dbg !41
  %139 = add nsw i32 %126, %.sext, !dbg !41
  %140 = add nsw i32 %126, %.sext11, !dbg !41
  %141 = add nsw i32 %126, %.sext13, !dbg !41
  %142 = add nsw i32 %126, %.sext15, !dbg !41
  %143 = sext i32 %135 to i64, !dbg !42
  %144 = getelementptr float, ptr addrspace(1) %3, i64 %143, !dbg !42
  %145 = sext i32 %136 to i64, !dbg !42
  %146 = getelementptr float, ptr addrspace(1) %3, i64 %145, !dbg !42
  %147 = sext i32 %137 to i64, !dbg !42
  %148 = getelementptr float, ptr addrspace(1) %3, i64 %147, !dbg !42
  %149 = sext i32 %138 to i64, !dbg !42
  %150 = getelementptr float, ptr addrspace(1) %3, i64 %149, !dbg !42
  %151 = sext i32 %139 to i64, !dbg !42
  %152 = getelementptr float, ptr addrspace(1) %3, i64 %151, !dbg !42
  %153 = sext i32 %140 to i64, !dbg !42
  %154 = getelementptr float, ptr addrspace(1) %3, i64 %153, !dbg !42
  %155 = sext i32 %141 to i64, !dbg !42
  %156 = getelementptr float, ptr addrspace(1) %3, i64 %155, !dbg !42
  %157 = sext i32 %142 to i64, !dbg !42
  %158 = getelementptr float, ptr addrspace(1) %3, i64 %157, !dbg !42
  %159 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %144, i1 %53) #3, !dbg !43
  %160 = bitcast i32 %159 to float, !dbg !43
  %161 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %146, i1 %53) #3, !dbg !43
  %162 = bitcast i32 %161 to float, !dbg !43
  %163 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %148, i1 %53) #3, !dbg !43
  %164 = bitcast i32 %163 to float, !dbg !43
  %165 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %150, i1 %53) #3, !dbg !43
  %166 = bitcast i32 %165 to float, !dbg !43
  %167 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %152, i1 %54) #3, !dbg !43
  %168 = bitcast i32 %167 to float, !dbg !43
  %169 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %154, i1 %54) #3, !dbg !43
  %170 = bitcast i32 %169 to float, !dbg !43
  %171 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %156, i1 %54) #3, !dbg !43
  %172 = bitcast i32 %171 to float, !dbg !43
  %173 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %158, i1 %54) #3, !dbg !43
  %174 = bitcast i32 %173 to float, !dbg !43
  %175 = insertelement <2 x i8> poison, i8 %.decomposed31, i64 0, !dbg !39
  %176 = insertelement <2 x i8> %175, i8 %131, i64 1, !dbg !39
  %177 = insertelement <2 x i8> poison, i8 %.decomposed32, i64 0, !dbg !39
  %178 = insertelement <2 x i8> %177, i8 %133, i64 1, !dbg !39
  %179 = sdiv i32 %28, 128, !dbg !44
  %180 = sdiv i32 %29, 128, !dbg !44
  %181 = insertelement <4 x i32> poison, i32 %179, i64 0, !dbg !45
  %182 = insertelement <4 x i32> %181, i32 %81, i64 1, !dbg !45
  %183 = sext <2 x i8> %176 to <2 x i32>, !dbg !45
  %184 = shufflevector <2 x i32> %183, <2 x i32> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !45
  %185 = shufflevector <4 x i32> %182, <4 x i32> %184, <4 x i32> <i32 0, i32 1, i32 4, i32 5>, !dbg !45
  %186 = mul <4 x i32> %185, <i32 12288, i32 768, i32 96, i32 6144>, !dbg !45
  %187 = insertelement <4 x i32> poison, i32 %180, i64 0, !dbg !45
  %188 = insertelement <4 x i32> %187, i32 %82, i64 1, !dbg !45
  %189 = sext <2 x i8> %178 to <2 x i32>, !dbg !45
  %190 = shufflevector <2 x i32> %189, <2 x i32> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !45
  %191 = shufflevector <4 x i32> %188, <4 x i32> %190, <4 x i32> <i32 0, i32 1, i32 4, i32 5>, !dbg !45
  %192 = mul <4 x i32> %191, <i32 12288, i32 768, i32 96, i32 6144>, !dbg !45
  %193 = mul i32 %34, 24576, !dbg !46
  %194 = add i32 %193, %.decomposed, !dbg !47
  %195 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %186), !dbg !48
  %op.rdx = add i32 %195, %194, !dbg !49
  %196 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %192), !dbg !48
  %op.rdx24 = add i32 %196, %194, !dbg !49
  %197 = sext i32 %op.rdx to i64, !dbg !50
  %198 = getelementptr float, ptr addrspace(1) %4, i64 %197, !dbg !50
  %199 = sext i32 %op.rdx24 to i64, !dbg !50
  %200 = getelementptr float, ptr addrspace(1) %4, i64 %199, !dbg !50
  %201 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %198, i1 %55) #3, !dbg !51
  %202 = extractvalue { i32, i32, i32, i32 } %201, 0, !dbg !51
  %203 = extractvalue { i32, i32, i32, i32 } %201, 1, !dbg !51
  %204 = extractvalue { i32, i32, i32, i32 } %201, 2, !dbg !51
  %205 = extractvalue { i32, i32, i32, i32 } %201, 3, !dbg !51
  %206 = bitcast i32 %202 to float, !dbg !51
  %207 = bitcast i32 %203 to float, !dbg !51
  %208 = bitcast i32 %204 to float, !dbg !51
  %209 = bitcast i32 %205 to float, !dbg !51
  %210 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %200, i1 %56) #3, !dbg !51
  %211 = extractvalue { i32, i32, i32, i32 } %210, 0, !dbg !51
  %212 = extractvalue { i32, i32, i32, i32 } %210, 1, !dbg !51
  %213 = extractvalue { i32, i32, i32, i32 } %210, 2, !dbg !51
  %214 = extractvalue { i32, i32, i32, i32 } %210, 3, !dbg !51
  %215 = bitcast i32 %211 to float, !dbg !51
  %216 = bitcast i32 %212 to float, !dbg !51
  %217 = bitcast i32 %213 to float, !dbg !51
  %218 = bitcast i32 %214 to float, !dbg !51
  %219 = sext i32 %.decomposed to i64, !dbg !52
  %220 = getelementptr float, ptr addrspace(1) %5, i64 %219, !dbg !52
  %221 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %220, i1 %17) #3, !dbg !53
  %222 = extractvalue { i32, i32, i32, i32 } %221, 0, !dbg !53
  %223 = extractvalue { i32, i32, i32, i32 } %221, 1, !dbg !53
  %224 = extractvalue { i32, i32, i32, i32 } %221, 2, !dbg !53
  %225 = extractvalue { i32, i32, i32, i32 } %221, 3, !dbg !53
  %226 = bitcast i32 %222 to float, !dbg !53
  %227 = bitcast i32 %223 to float, !dbg !53
  %228 = bitcast i32 %224 to float, !dbg !53
  %229 = bitcast i32 %225 to float, !dbg !53
  %230 = fadd float %62, %93, !dbg !54
  %231 = fadd float %63, %93, !dbg !54
  %232 = fadd float %64, %93, !dbg !54
  %233 = fadd float %65, %93, !dbg !54
  %234 = fadd float %71, %98, !dbg !54
  %235 = fadd float %72, %98, !dbg !54
  %236 = fadd float %73, %98, !dbg !54
  %237 = fadd float %74, %98, !dbg !54
  %238 = fadd float %108, %160, !dbg !55
  %239 = fadd float %109, %162, !dbg !55
  %240 = fadd float %110, %164, !dbg !55
  %241 = fadd float %111, %166, !dbg !55
  %242 = fadd float %117, %168, !dbg !55
  %243 = fadd float %118, %170, !dbg !55
  %244 = fadd float %119, %172, !dbg !55
  %245 = fadd float %120, %174, !dbg !55
  %246 = fadd float %230, %238, !dbg !56
  %247 = fadd float %231, %239, !dbg !56
  %248 = fadd float %232, %240, !dbg !56
  %249 = fadd float %233, %241, !dbg !56
  %250 = fadd float %234, %242, !dbg !56
  %251 = fadd float %235, %243, !dbg !56
  %252 = fadd float %236, %244, !dbg !56
  %253 = fadd float %237, %245, !dbg !56
  %254 = shl i32 %11, 4, !dbg !56
  %255 = and i32 %254, 1008, !dbg !56
  %256 = or disjoint i32 %255, %.lobit, !dbg !56
  %257 = and i32 %20, 508, !dbg !56
  %258 = getelementptr float, ptr addrspace(3) @global_smem, i32 %255, !dbg !56
  %259 = getelementptr float, ptr addrspace(3) %258, i32 %256, !dbg !56
  %260 = bitcast float %246 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %259, <1 x i32> %260, i1 true) #3, !dbg !56
  %261 = or disjoint i32 %256, 4, !dbg !56
  %262 = or disjoint i32 %255, 4, !dbg !56
  %263 = getelementptr float, ptr addrspace(3) @global_smem, i32 %262, !dbg !56
  %264 = getelementptr float, ptr addrspace(3) %263, i32 %261, !dbg !56
  %265 = bitcast float %247 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %264, <1 x i32> %265, i1 true) #3, !dbg !56
  %266 = or disjoint i32 %256, 8, !dbg !56
  %267 = or disjoint i32 %255, 8, !dbg !56
  %268 = getelementptr float, ptr addrspace(3) @global_smem, i32 %267, !dbg !56
  %269 = getelementptr float, ptr addrspace(3) %268, i32 %266, !dbg !56
  %270 = bitcast float %248 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %269, <1 x i32> %270, i1 true) #3, !dbg !56
  %271 = or disjoint i32 %256, 12, !dbg !56
  %272 = or disjoint i32 %255, 12, !dbg !56
  %273 = getelementptr float, ptr addrspace(3) @global_smem, i32 %272, !dbg !56
  %274 = getelementptr float, ptr addrspace(3) %273, i32 %271, !dbg !56
  %275 = bitcast float %249 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %274, <1 x i32> %275, i1 true) #3, !dbg !56
  %276 = or disjoint i32 %256, 2, !dbg !56
  %277 = getelementptr float, ptr addrspace(3) %258, i32 %276, !dbg !56
  %278 = bitcast float %250 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %277, <1 x i32> %278, i1 true) #3, !dbg !56
  %279 = or disjoint i32 %256, 6, !dbg !56
  %280 = getelementptr float, ptr addrspace(3) %263, i32 %279, !dbg !56
  %281 = bitcast float %251 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %280, <1 x i32> %281, i1 true) #3, !dbg !56
  %282 = or disjoint i32 %256, 10, !dbg !56
  %283 = getelementptr float, ptr addrspace(3) %268, i32 %282, !dbg !56
  %284 = bitcast float %252 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %283, <1 x i32> %284, i1 true) #3, !dbg !56
  %285 = or disjoint i32 %256, 14, !dbg !56
  %286 = getelementptr float, ptr addrspace(3) %273, i32 %285, !dbg !56
  %287 = bitcast float %253 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %286, <1 x i32> %287, i1 true) #3, !dbg !56
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  %.idx = shl nuw nsw i32 %257, 3, !dbg !56
  %288 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !56
  %289 = load float, ptr addrspace(3) %288, align 16, !dbg !56
  %290 = getelementptr inbounds i8, ptr addrspace(3) %288, i32 4, !dbg !56
  %291 = load float, ptr addrspace(3) %290, align 4, !dbg !56
  %292 = getelementptr inbounds i8, ptr addrspace(3) %288, i32 8, !dbg !56
  %293 = load float, ptr addrspace(3) %292, align 8, !dbg !56
  %294 = getelementptr inbounds i8, ptr addrspace(3) %288, i32 12, !dbg !56
  %295 = load float, ptr addrspace(3) %294, align 4, !dbg !56
  %296 = or disjoint i32 %257, 512, !dbg !56
  %.idx5 = shl nuw nsw i32 %296, 3, !dbg !56
  %297 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx5, !dbg !56
  %298 = load float, ptr addrspace(3) %297, align 16, !dbg !56
  %299 = getelementptr inbounds i8, ptr addrspace(3) %297, i32 4, !dbg !56
  %300 = load float, ptr addrspace(3) %299, align 4, !dbg !56
  %301 = getelementptr inbounds i8, ptr addrspace(3) %297, i32 8, !dbg !56
  %302 = load float, ptr addrspace(3) %301, align 8, !dbg !56
  %303 = getelementptr inbounds i8, ptr addrspace(3) %297, i32 12, !dbg !56
  %304 = load float, ptr addrspace(3) %303, align 4, !dbg !56
  %305 = fadd float %206, %226, !dbg !57
  %306 = fadd float %207, %227, !dbg !57
  %307 = fadd float %208, %228, !dbg !57
  %308 = fadd float %209, %229, !dbg !57
  %309 = fadd float %215, %226, !dbg !57
  %310 = fadd float %216, %227, !dbg !57
  %311 = fadd float %217, %228, !dbg !57
  %312 = fadd float %218, %229, !dbg !57
  %313 = fadd float %305, %289, !dbg !58
  %314 = fadd float %306, %291, !dbg !58
  %315 = fadd float %307, %293, !dbg !58
  %316 = fadd float %308, %295, !dbg !58
  %317 = fadd float %309, %298, !dbg !58
  %318 = fadd float %310, %300, !dbg !58
  %319 = fadd float %311, %302, !dbg !58
  %320 = fadd float %312, %304, !dbg !58
  tail call void @llvm.nvvm.barrier0(), !dbg !59
  %321 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %22, !dbg !60
  %322 = bitcast float %313 to <1 x i32>, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %321, <1 x i32> %322, i1 true) #3, !dbg !60
  %323 = getelementptr inbounds i8, ptr addrspace(3) %321, i32 1028, !dbg !60
  %324 = bitcast float %314 to <1 x i32>, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %323, <1 x i32> %324, i1 true) #3, !dbg !60
  %325 = getelementptr inbounds i8, ptr addrspace(3) %321, i32 2056, !dbg !60
  %326 = bitcast float %315 to <1 x i32>, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %325, <1 x i32> %326, i1 true) #3, !dbg !60
  %327 = getelementptr inbounds i8, ptr addrspace(3) %321, i32 3084, !dbg !60
  %328 = bitcast float %316 to <1 x i32>, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %327, <1 x i32> %328, i1 true) #3, !dbg !60
  %329 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %23, !dbg !60
  %330 = bitcast float %317 to <1 x i32>, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %329, <1 x i32> %330, i1 true) #3, !dbg !60
  %331 = getelementptr inbounds i8, ptr addrspace(3) %321, i32 1540, !dbg !60
  %332 = bitcast float %318 to <1 x i32>, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %331, <1 x i32> %332, i1 true) #3, !dbg !60
  %333 = getelementptr inbounds i8, ptr addrspace(3) %321, i32 2568, !dbg !60
  %334 = bitcast float %319 to <1 x i32>, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %333, <1 x i32> %334, i1 true) #3, !dbg !60
  %335 = getelementptr inbounds i8, ptr addrspace(3) %321, i32 3596, !dbg !60
  %336 = bitcast float %320 to <1 x i32>, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %335, <1 x i32> %336, i1 true) #3, !dbg !60
  tail call void @llvm.nvvm.barrier0(), !dbg !60
  %337 = lshr i32 %257, 8, !dbg !60
  %338 = or disjoint i32 %337, %257, !dbg !60
  %339 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %338, !dbg !60
  %340 = load i32, ptr addrspace(3) %339, align 4, !dbg !60
  %341 = or disjoint i32 %257, 1, !dbg !60
  %342 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %337, !dbg !60
  %343 = getelementptr inbounds float, ptr addrspace(3) %342, i32 %341, !dbg !60
  %344 = load i32, ptr addrspace(3) %343, align 4, !dbg !60
  %345 = or disjoint i32 %338, 2, !dbg !60
  %346 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %345, !dbg !60
  %347 = load i32, ptr addrspace(3) %346, align 4, !dbg !60
  %348 = or disjoint i32 %257, 3, !dbg !60
  %349 = getelementptr inbounds float, ptr addrspace(3) %342, i32 %348, !dbg !60
  %350 = load i32, ptr addrspace(3) %349, align 4, !dbg !60
  %351 = lshr i32 %296, 8, !dbg !60
  %352 = or disjoint i32 %351, %296, !dbg !60
  %353 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %352, !dbg !60
  %354 = load i32, ptr addrspace(3) %353, align 4, !dbg !60
  %355 = or disjoint i32 %257, 513, !dbg !60
  %356 = lshr i32 %355, 8, !dbg !60
  %357 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %356, !dbg !60
  %358 = getelementptr inbounds float, ptr addrspace(3) %357, i32 %355, !dbg !60
  %359 = load i32, ptr addrspace(3) %358, align 4, !dbg !60
  %360 = or disjoint i32 %257, 514, !dbg !60
  %361 = lshr i32 %360, 8, !dbg !60
  %362 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %361, !dbg !60
  %363 = getelementptr inbounds float, ptr addrspace(3) %362, i32 %360, !dbg !60
  %364 = load i32, ptr addrspace(3) %363, align 4, !dbg !60
  %365 = or disjoint i32 %257, 515, !dbg !60
  %366 = lshr i32 %365, 8, !dbg !60
  %367 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %366, !dbg !60
  %368 = getelementptr inbounds float, ptr addrspace(3) %367, i32 %365, !dbg !60
  %369 = load i32, ptr addrspace(3) %368, align 4, !dbg !60
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %340, i32 %344, i32 %347, i32 %350, ptr addrspace(1) %50, i1 %53) #3, !dbg !60
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %354, i32 %359, i32 %364, i32 %369, ptr addrspace(1) %52, i1 %54) #3, !dbg !60
  ret void, !dbg !61
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.vector.reduce.add.v4i32(<4 x i32>) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c2saqzgkixge2ceyzt36gpl54middaeipgy6tvhhngrgdks4pnis.py", directory: "inductor_cache/2s")
!4 = !{ptr @triton_poi_fused_add_8, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_8, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_8", linkageName: "triton_poi_fused_add_8", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 33, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 19, scope: !7)
!23 = !DILocation(line: 31, column: 19, scope: !7)
!24 = !DILocation(line: 34, column: 43, scope: !7)
!25 = !DILocation(line: 34, column: 39, scope: !7)
!26 = !DILocation(line: 34, column: 34, scope: !7)
!27 = !DILocation(line: 34, column: 56, scope: !7)
!28 = !DILocation(line: 34, column: 48, scope: !7)
!29 = !DILocation(line: 35, column: 30, scope: !7)
!30 = !DILocation(line: 36, column: 39, scope: !7)
!31 = !DILocation(line: 36, column: 35, scope: !7)
!32 = !DILocation(line: 36, column: 30, scope: !7)
!33 = !DILocation(line: 37, column: 39, scope: !7)
!34 = !DILocation(line: 35, column: 35, scope: !7)
!35 = !DILocation(line: 36, column: 44, scope: !7)
!36 = !DILocation(line: 37, column: 34, scope: !7)
!37 = !DILocation(line: 37, column: 48, scope: !7)
!38 = !DILocation(line: 37, column: 45, scope: !7)
!39 = !DILocation(line: 37, column: 60, scope: !7)
!40 = !DILocation(line: 38, column: 80, scope: !7)
!41 = !DILocation(line: 37, column: 55, scope: !7)
!42 = !DILocation(line: 37, column: 30, scope: !7)
!43 = !DILocation(line: 37, column: 66, scope: !7)
!44 = !DILocation(line: 38, column: 98, scope: !7)
!45 = !DILocation(line: 38, column: 92, scope: !7)
!46 = !DILocation(line: 38, column: 109, scope: !7)
!47 = !DILocation(line: 38, column: 35, scope: !7)
!48 = !DILocation(line: 38, column: 103, scope: !7)
!49 = !DILocation(line: 38, column: 51, scope: !7)
!50 = !DILocation(line: 38, column: 30, scope: !7)
!51 = !DILocation(line: 38, column: 114, scope: !7)
!52 = !DILocation(line: 39, column: 30, scope: !7)
!53 = !DILocation(line: 39, column: 35, scope: !7)
!54 = !DILocation(line: 40, column: 18, scope: !7)
!55 = !DILocation(line: 41, column: 18, scope: !7)
!56 = !DILocation(line: 42, column: 18, scope: !7)
!57 = !DILocation(line: 43, column: 18, scope: !7)
!58 = !DILocation(line: 44, column: 19, scope: !7)
!59 = !DILocation(line: 45, column: 4, scope: !7)
!60 = !DILocation(line: 46, column: 49, scope: !7)
!61 = !DILocation(line: 46, column: 4, scope: !7)
