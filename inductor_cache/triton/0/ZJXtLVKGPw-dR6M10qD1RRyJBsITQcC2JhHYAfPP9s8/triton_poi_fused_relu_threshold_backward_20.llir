; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_relu_threshold_backward_20(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 5, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 3, !dbg !12
  %10 = and i32 %9, 24, !dbg !12
  %11 = lshr i32 %8, 3, !dbg !12
  %12 = and i32 %11, 15, !dbg !12
  %13 = or disjoint i32 %7, %10, !dbg !13
  %14 = or disjoint i32 %13, 4, !dbg !13
  %15 = or disjoint i32 %7, %12, !dbg !13
  %16 = or disjoint i32 %15, 16, !dbg !13
  %17 = icmp slt i32 %13, 512, !dbg !14
  %18 = icmp slt i32 %15, 512, !dbg !14
  %19 = icmp slt i32 %16, 512, !dbg !14
  %20 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %21 = shl i32 %20, 5, !dbg !16
  %22 = lshr i32 %8, 2, !dbg !17
  %23 = and i32 %22, 31, !dbg !17
  %24 = shl i32 %8, 2, !dbg !17
  %25 = and i32 %24, 28, !dbg !17
  %26 = or disjoint i32 %21, %23, !dbg !18
  %27 = or disjoint i32 %21, %25, !dbg !18
  %28 = icmp slt i32 %26, 64, !dbg !19
  %29 = icmp slt i32 %27, 64, !dbg !19
  %.frozen = freeze i32 %13, !dbg !20
  %30 = sdiv i32 %.frozen, 128, !dbg !20
  %31 = mul i32 %30, 128, !dbg !21
  %.decomposed = sub i32 %.frozen, %31, !dbg !21
  %32 = srem i32 %14, 128, !dbg !21
  %33 = shl i32 %26, 7, !dbg !22
  %34 = shl i32 %30, 13, !dbg !23
  %35 = add i32 %34, %33, !dbg !24
  %36 = add i32 %35, %.decomposed, !dbg !25
  %37 = add i32 %35, %32, !dbg !25
  %38 = sext i32 %36 to i64, !dbg !26
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !26
  %40 = sext i32 %37 to i64, !dbg !26
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !26
  %42 = and i1 %17, %28, !dbg !27
  %43 = and i1 %18, %29, !dbg !27
  %44 = and i1 %19, %29, !dbg !27
  %45 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %39, i1 %42) #2, !dbg !28
  %46 = extractvalue { i32, i32, i32, i32 } %45, 0, !dbg !28
  %47 = extractvalue { i32, i32, i32, i32 } %45, 1, !dbg !28
  %48 = extractvalue { i32, i32, i32, i32 } %45, 2, !dbg !28
  %49 = extractvalue { i32, i32, i32, i32 } %45, 3, !dbg !28
  %50 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %41, i1 %42) #2, !dbg !28
  %51 = extractvalue { i32, i32, i32, i32 } %50, 0, !dbg !28
  %52 = extractvalue { i32, i32, i32, i32 } %50, 1, !dbg !28
  %53 = extractvalue { i32, i32, i32, i32 } %50, 2, !dbg !28
  %54 = extractvalue { i32, i32, i32, i32 } %50, 3, !dbg !28
  %55 = shl i32 %15, 6, !dbg !29
  %56 = shl i32 %16, 6, !dbg !29
  %57 = add i32 %27, %55, !dbg !30
  %58 = add i32 %27, %56, !dbg !30
  %59 = sext i32 %57 to i64, !dbg !31
  %60 = getelementptr float, ptr addrspace(1) %1, i64 %59, !dbg !31
  %61 = sext i32 %58 to i64, !dbg !31
  %62 = getelementptr float, ptr addrspace(1) %1, i64 %61, !dbg !31
  %63 = shl i32 %8, 8, !dbg !32
  %64 = and i32 %63, 768, !dbg !32
  %65 = or disjoint i32 %64, %23, !dbg !32
  %66 = and i32 %24, 508, !dbg !32
  %67 = lshr exact i32 %64, 5, !dbg !32
  %68 = add nuw nsw i32 %67, %65, !dbg !32
  %69 = zext nneg i32 %68 to i64, !dbg !32
  %70 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %69, !dbg !32
  %71 = or disjoint i32 %65, 32, !dbg !32
  %72 = lshr i32 %71, 5, !dbg !32
  %73 = add nuw nsw i32 %72, %71, !dbg !32
  %74 = zext nneg i32 %73 to i64, !dbg !32
  %75 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %74, !dbg !32
  %76 = or disjoint i32 %65, 64, !dbg !32
  %77 = lshr i32 %76, 5, !dbg !32
  %78 = add nuw nsw i32 %77, %76, !dbg !32
  %79 = zext nneg i32 %78 to i64, !dbg !32
  %80 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %79, !dbg !32
  %81 = or disjoint i32 %65, 96, !dbg !32
  %82 = lshr i32 %81, 5, !dbg !32
  %83 = add nuw nsw i32 %82, %81, !dbg !32
  %84 = zext nneg i32 %83 to i64, !dbg !32
  %85 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %84, !dbg !32
  %86 = or disjoint i32 %65, 128, !dbg !32
  %87 = lshr i32 %86, 5, !dbg !32
  %88 = add nuw nsw i32 %87, %86, !dbg !32
  %89 = zext nneg i32 %88 to i64, !dbg !32
  %90 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %89, !dbg !32
  %91 = or disjoint i32 %65, 160, !dbg !32
  %92 = lshr i32 %91, 5, !dbg !32
  %93 = add nuw nsw i32 %92, %91, !dbg !32
  %94 = zext nneg i32 %93 to i64, !dbg !32
  %95 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %94, !dbg !32
  %96 = or disjoint i32 %65, 192, !dbg !32
  %97 = lshr i32 %96, 5, !dbg !32
  %98 = add nuw nsw i32 %97, %96, !dbg !32
  %99 = zext nneg i32 %98 to i64, !dbg !32
  %100 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %99, !dbg !32
  %101 = or disjoint i32 %65, 224, !dbg !32
  %102 = lshr i32 %101, 5, !dbg !32
  %103 = add nuw nsw i32 %102, %101, !dbg !32
  %104 = zext nneg i32 %103 to i64, !dbg !32
  %105 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %104, !dbg !32
  %106 = lshr i32 %66, 5, !dbg !32
  %107 = add nuw nsw i32 %106, %66, !dbg !32
  %108 = zext nneg i32 %107 to i64, !dbg !32
  %109 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %108, !dbg !32
  %110 = or disjoint i32 %66, 1, !dbg !32
  %111 = add nuw nsw i32 %110, %106, !dbg !32
  %112 = zext nneg i32 %111 to i64, !dbg !32
  %113 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %112, !dbg !32
  %114 = or disjoint i32 %66, 2, !dbg !32
  %115 = add nuw nsw i32 %114, %106, !dbg !32
  %116 = zext nneg i32 %115 to i64, !dbg !32
  %117 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %116, !dbg !32
  %118 = or disjoint i32 %66, 3, !dbg !32
  %119 = add nuw nsw i32 %118, %106, !dbg !32
  %120 = zext nneg i32 %119 to i64, !dbg !32
  %121 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %120, !dbg !32
  %122 = or disjoint i32 %66, 512, !dbg !32
  %123 = lshr i32 %122, 5, !dbg !32
  %124 = add nuw nsw i32 %123, %122, !dbg !32
  %125 = zext nneg i32 %124 to i64, !dbg !32
  %126 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %125, !dbg !32
  %127 = or disjoint i32 %66, 513, !dbg !32
  %128 = lshr i32 %127, 5, !dbg !32
  %129 = add nuw nsw i32 %128, %127, !dbg !32
  %130 = zext nneg i32 %129 to i64, !dbg !32
  %131 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %130, !dbg !32
  %132 = or disjoint i32 %66, 514, !dbg !32
  %133 = lshr i32 %132, 5, !dbg !32
  %134 = add nuw nsw i32 %133, %132, !dbg !32
  %135 = zext nneg i32 %134 to i64, !dbg !32
  %136 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %135, !dbg !32
  %137 = or disjoint i32 %66, 515, !dbg !32
  %138 = lshr i32 %137, 5, !dbg !32
  %139 = add nuw nsw i32 %138, %137, !dbg !32
  %140 = zext nneg i32 %139 to i64, !dbg !32
  %141 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %140, !dbg !32
  %142 = getelementptr i1, ptr addrspace(1) %2, i64 %38, !dbg !33
  %143 = insertelement <4 x i32> poison, i32 %46, i64 0, !dbg !28
  %144 = insertelement <4 x i32> %143, i32 %47, i64 1, !dbg !28
  %145 = insertelement <4 x i32> %144, i32 %48, i64 2, !dbg !28
  %146 = insertelement <4 x i32> %145, i32 %49, i64 3, !dbg !28
  %147 = bitcast <4 x i32> %146 to <4 x float>, !dbg !28
  %148 = fcmp olt <4 x float> %147, zeroinitializer, !dbg !34
  %149 = select <4 x i1> %148, <4 x float> zeroinitializer, <4 x float> %147, !dbg !38
  %150 = fcmp ole <4 x float> %149, zeroinitializer, !dbg !39
  %151 = extractelement <4 x float> %149, i64 0, !dbg !32
  %152 = bitcast float %151 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %70, <1 x i32> %152, i1 true) #2, !dbg !32
  %153 = extractelement <4 x float> %149, i64 1, !dbg !32
  %154 = bitcast float %153 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %75, <1 x i32> %154, i1 true) #2, !dbg !32
  %155 = extractelement <4 x float> %149, i64 2, !dbg !32
  %156 = bitcast float %155 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %80, <1 x i32> %156, i1 true) #2, !dbg !32
  %157 = extractelement <4 x float> %149, i64 3, !dbg !32
  %158 = bitcast float %157 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %85, <1 x i32> %158, i1 true) #2, !dbg !32
  %159 = insertelement <4 x i32> poison, i32 %51, i64 0, !dbg !28
  %160 = insertelement <4 x i32> %159, i32 %52, i64 1, !dbg !28
  %161 = insertelement <4 x i32> %160, i32 %53, i64 2, !dbg !28
  %162 = insertelement <4 x i32> %161, i32 %54, i64 3, !dbg !28
  %163 = bitcast <4 x i32> %162 to <4 x float>, !dbg !28
  %164 = fcmp olt <4 x float> %163, zeroinitializer, !dbg !34
  %165 = select <4 x i1> %164, <4 x float> zeroinitializer, <4 x float> %163, !dbg !38
  %166 = fcmp ole <4 x float> %165, zeroinitializer, !dbg !39
  %167 = extractelement <4 x float> %165, i64 0, !dbg !32
  %168 = bitcast float %167 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %90, <1 x i32> %168, i1 true) #2, !dbg !32
  %169 = extractelement <4 x float> %165, i64 1, !dbg !32
  %170 = bitcast float %169 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %95, <1 x i32> %170, i1 true) #2, !dbg !32
  %171 = extractelement <4 x float> %165, i64 2, !dbg !32
  %172 = bitcast float %171 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %100, <1 x i32> %172, i1 true) #2, !dbg !32
  %173 = extractelement <4 x float> %165, i64 3, !dbg !32
  %174 = bitcast float %173 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %105, <1 x i32> %174, i1 true) #2, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %175 = load i32, ptr addrspace(3) %109, align 4, !dbg !32
  %176 = load i32, ptr addrspace(3) %113, align 4, !dbg !32
  %177 = load i32, ptr addrspace(3) %117, align 4, !dbg !32
  %178 = load i32, ptr addrspace(3) %121, align 4, !dbg !32
  %179 = load i32, ptr addrspace(3) %126, align 4, !dbg !32
  %180 = load i32, ptr addrspace(3) %131, align 4, !dbg !32
  %181 = load i32, ptr addrspace(3) %136, align 4, !dbg !32
  %182 = load i32, ptr addrspace(3) %141, align 4, !dbg !32
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %175, i32 %176, i32 %177, i32 %178, ptr addrspace(1) %60, i1 %43) #2, !dbg !32
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %179, i32 %180, i32 %181, i32 %182, ptr addrspace(1) %62, i1 %44) #2, !dbg !32
  %183 = zext <4 x i1> %150 to <4 x i8>, !dbg !40
  %184 = bitcast <4 x i8> %183 to i32, !dbg !40
  %185 = zext <4 x i1> %166 to <4 x i8>, !dbg !40
  %186 = bitcast <4 x i8> %185 to i32, !dbg !40
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %184, i32 %186, ptr addrspace(1) %142, i1 %42) #2, !dbg !40
  ret void, !dbg !41
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c2qxwivbzmyxv7xcq7htkifd6rj52zqeolpyr5modelmltubwspo.py", directory: "inductor_cache/2q")
!4 = !{ptr @triton_poi_fused_relu_threshold_backward_20, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_relu_threshold_backward_20, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_relu_threshold_backward_20", linkageName: "triton_poi_fused_relu_threshold_backward_20", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 39, scope: !7)
!23 = !DILocation(line: 32, column: 49, scope: !7)
!24 = !DILocation(line: 32, column: 35, scope: !7)
!25 = !DILocation(line: 32, column: 44, scope: !7)
!26 = !DILocation(line: 32, column: 30, scope: !7)
!27 = !DILocation(line: 32, column: 62, scope: !7)
!28 = !DILocation(line: 32, column: 54, scope: !7)
!29 = !DILocation(line: 37, column: 33, scope: !7)
!30 = !DILocation(line: 37, column: 30, scope: !7)
!31 = !DILocation(line: 37, column: 25, scope: !7)
!32 = !DILocation(line: 37, column: 44, scope: !7)
!33 = !DILocation(line: 38, column: 25, scope: !7)
!34 = !DILocation(line: 118, column: 15, scope: !35, inlinedAt: !37)
!35 = distinct !DILexicalBlockFile(scope: !7, file: !36, discriminator: 0)
!36 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!37 = !DILocation(line: 34, column: 40, scope: !7)
!38 = !DILocation(line: 121, column: 29, scope: !35, inlinedAt: !37)
!39 = !DILocation(line: 36, column: 19, scope: !7)
!40 = !DILocation(line: 38, column: 55, scope: !7)
!41 = !DILocation(line: 38, column: 4, scope: !7)
