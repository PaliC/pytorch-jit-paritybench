; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_5(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %6 = shl i32 %5, 8, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = and i32 %7, 127, !dbg !12
  %9 = or disjoint i32 %8, 128, !dbg !12
  %10 = shl i32 %7, 2, !dbg !12
  %11 = and i32 %10, 252, !dbg !12
  %12 = or disjoint i32 %6, %8, !dbg !13
  %13 = or disjoint i32 %6, %9, !dbg !13
  %14 = or disjoint i32 %6, %11, !dbg !13
  %15 = icmp slt i32 %12, 256, !dbg !14
  %16 = icmp slt i32 %13, 256, !dbg !14
  %17 = icmp slt i32 %14, 256, !dbg !14
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %19 = shl i32 %18, 2, !dbg !16
  %20 = lshr i32 %7, 6, !dbg !17
  %.lobit = and i32 %20, 1, !dbg !17
  %21 = or disjoint i32 %19, %.lobit, !dbg !18
  %22 = or disjoint i32 %21, 2, !dbg !18
  %23 = icmp slt i32 %19, 4, !dbg !19
  %24 = icmp slt i32 %21, 4, !dbg !19
  %25 = icmp slt i32 %22, 4, !dbg !19
  %.frozen = freeze i32 %14, !dbg !20
  %26 = sdiv i32 %.frozen, 16, !dbg !20
  %27 = mul i32 %26, 16, !dbg !21
  %.decomposed = sub i32 %.frozen, %27, !dbg !21
  %28 = add i32 %12, %18, !dbg !22
  %29 = shl i32 %28, 2, !dbg !22
  %30 = add i32 %13, %18, !dbg !22
  %31 = shl i32 %30, 2, !dbg !22
  %32 = sext i32 %29 to i64, !dbg !23
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !23
  %34 = sext i32 %31 to i64, !dbg !23
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !23
  %36 = and i1 %23, %15, !dbg !24
  %37 = and i1 %23, %16, !dbg !24
  %38 = and i1 %17, %24, !dbg !24
  %39 = and i1 %25, %17, !dbg !24
  %40 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %33, i1 %36) #2, !dbg !25
  %41 = extractvalue { i32, i32, i32, i32 } %40, 0, !dbg !25
  %42 = extractvalue { i32, i32, i32, i32 } %40, 1, !dbg !25
  %43 = extractvalue { i32, i32, i32, i32 } %40, 2, !dbg !25
  %44 = extractvalue { i32, i32, i32, i32 } %40, 3, !dbg !25
  %45 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %35, i1 %37) #2, !dbg !25
  %46 = extractvalue { i32, i32, i32, i32 } %45, 0, !dbg !25
  %47 = extractvalue { i32, i32, i32, i32 } %45, 1, !dbg !25
  %48 = extractvalue { i32, i32, i32, i32 } %45, 2, !dbg !25
  %49 = extractvalue { i32, i32, i32, i32 } %45, 3, !dbg !25
  %50 = shl i32 %21, 4, !dbg !26
  %51 = shl i32 %22, 4, !dbg !26
  %52 = shl i32 %26, 6, !dbg !27
  %53 = add i32 %52, %.decomposed, !dbg !28
  %54 = add i32 %53, %50, !dbg !29
  %55 = add i32 %53, %51, !dbg !29
  %56 = sext i32 %54 to i64, !dbg !30
  %57 = getelementptr float, ptr addrspace(1) %1, i64 %56, !dbg !30
  %58 = sext i32 %55 to i64, !dbg !30
  %59 = getelementptr float, ptr addrspace(1) %1, i64 %58, !dbg !30
  %60 = and i32 %10, 508, !dbg !31
  %61 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %8, !dbg !31
  %62 = insertelement <1 x i32> poison, i32 %41, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %61, <1 x i32> %62, i1 true) #2, !dbg !31
  %63 = getelementptr inbounds i8, ptr addrspace(3) %61, i32 1040, !dbg !31
  %64 = insertelement <1 x i32> poison, i32 %42, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %63, <1 x i32> %64, i1 true) #2, !dbg !31
  %65 = getelementptr inbounds i8, ptr addrspace(3) %61, i32 2080, !dbg !31
  %66 = insertelement <1 x i32> poison, i32 %43, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %65, <1 x i32> %66, i1 true) #2, !dbg !31
  %67 = getelementptr inbounds i8, ptr addrspace(3) %61, i32 3120, !dbg !31
  %68 = insertelement <1 x i32> poison, i32 %44, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %67, <1 x i32> %68, i1 true) #2, !dbg !31
  %69 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %9, !dbg !31
  %70 = insertelement <1 x i32> poison, i32 %46, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %69, <1 x i32> %70, i1 true) #2, !dbg !31
  %71 = getelementptr inbounds i8, ptr addrspace(3) %61, i32 1552, !dbg !31
  %72 = insertelement <1 x i32> poison, i32 %47, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %71, <1 x i32> %72, i1 true) #2, !dbg !31
  %73 = getelementptr inbounds i8, ptr addrspace(3) %61, i32 2592, !dbg !31
  %74 = insertelement <1 x i32> poison, i32 %48, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %73, <1 x i32> %74, i1 true) #2, !dbg !31
  %75 = getelementptr inbounds i8, ptr addrspace(3) %61, i32 3632, !dbg !31
  %76 = insertelement <1 x i32> poison, i32 %49, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %75, <1 x i32> %76, i1 true) #2, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %77 = lshr i32 %10, 6, !dbg !31
  %78 = and i32 %77, 4, !dbg !31
  %79 = getelementptr float, ptr addrspace(3) @global_smem, i32 %78, !dbg !31
  %80 = getelementptr float, ptr addrspace(3) %79, i32 %60, !dbg !31
  %81 = or disjoint i32 %60, 512, !dbg !31
  %82 = lshr i32 %81, 6, !dbg !31
  %83 = and i32 %82, 12, !dbg !31
  %84 = getelementptr float, ptr addrspace(3) @global_smem, i32 %83, !dbg !31
  %85 = getelementptr float, ptr addrspace(3) %84, i32 %81, !dbg !31
  %86 = load <4 x i32>, ptr addrspace(3) %85, align 16, !dbg !31
  %.extract = load i32, ptr addrspace(3) %80, align 16, !dbg !31
  %87 = getelementptr inbounds i8, ptr addrspace(3) %80, i32 4, !dbg !31
  %.extract8 = load i32, ptr addrspace(3) %87, align 4, !dbg !31
  %88 = getelementptr inbounds i8, ptr addrspace(3) %80, i32 8, !dbg !31
  %.extract9 = load i32, ptr addrspace(3) %88, align 8, !dbg !31
  %89 = getelementptr inbounds i8, ptr addrspace(3) %80, i32 12, !dbg !31
  %.extract10 = load i32, ptr addrspace(3) %89, align 4, !dbg !31
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %57, i1 %38) #2, !dbg !31
  %.extract11 = extractelement <4 x i32> %86, i64 0, !dbg !31
  %.extract12 = extractelement <4 x i32> %86, i64 1, !dbg !31
  %.extract13 = extractelement <4 x i32> %86, i64 2, !dbg !31
  %.extract14 = extractelement <4 x i32> %86, i64 3, !dbg !31
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %59, i1 %39) #2, !dbg !31
  ret void, !dbg !32
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cxjarnnhoncfnd7oybfwa3tzajqxh5qrkurxaxercbtz4ingxlmr.py", directory: "inductor_cache/xj")
!4 = !{ptr @triton_poi_fused_5, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_5, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_5", linkageName: "triton_poi_fused_5", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 31, column: 19, scope: !7)
!21 = !DILocation(line: 30, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 35, scope: !7)
!23 = !DILocation(line: 32, column: 30, scope: !7)
!24 = !DILocation(line: 32, column: 50, scope: !7)
!25 = !DILocation(line: 32, column: 42, scope: !7)
!26 = !DILocation(line: 33, column: 33, scope: !7)
!27 = !DILocation(line: 33, column: 41, scope: !7)
!28 = !DILocation(line: 33, column: 30, scope: !7)
!29 = !DILocation(line: 33, column: 38, scope: !7)
!30 = !DILocation(line: 33, column: 25, scope: !7)
!31 = !DILocation(line: 33, column: 52, scope: !7)
!32 = !DILocation(line: 33, column: 4, scope: !7)
