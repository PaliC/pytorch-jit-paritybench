; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_0(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 8, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 1, !dbg !12
  %8 = and i32 %7, 254, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = or disjoint i32 %9, 1, !dbg !13
  %11 = icmp slt i32 %9, 640, !dbg !14
  %.frozen = freeze i32 %9, !dbg !15
  %12 = sdiv i32 %.frozen, 10, !dbg !15
  %13 = mul i32 %12, 10, !dbg !16
  %.decomposed = sub i32 %.frozen, %13, !dbg !16
  %14 = srem i32 %10, 10, !dbg !16
  %15 = srem i32 %12, 4, !dbg !17
  %16 = sdiv i32 %9, 40, !dbg !18
  %17 = icmp slt i32 %.decomposed, 4, !dbg !19
  %18 = or disjoint i32 %.decomposed, 1, !dbg !20
  %19 = add nsw i32 %14, 1, !dbg !20
  %20 = tail call i32 @llvm.abs.i32(i32 %18, i1 true), !dbg !21
  %21 = tail call i32 @llvm.abs.i32(i32 %19, i1 true), !dbg !21
  %22 = add nsw i32 %20, -5, !dbg !22
  %23 = add nsw i32 %21, -5, !dbg !22
  %24 = tail call i32 @llvm.abs.i32(i32 %22, i1 true), !dbg !23
  %25 = tail call i32 @llvm.abs.i32(i32 %23, i1 true), !dbg !23
  %26 = add nsw i32 %24, -1, !dbg !24
  %27 = icmp ult i32 %26, 4, !dbg !24
  %28 = icmp samesign ult i32 %25, 5, !dbg !24
  %29 = and i1 %17, %27, !dbg !25
  %30 = and i1 %28, %17, !dbg !25
  %.neg = shl nsw i32 %15, 2, !dbg !26
  %31 = add nsw i32 %.neg, -12, !dbg !26
  %32 = shl nsw i32 %16, 4, !dbg !27
  %reass.sub = add nsw i32 %32, 16, !dbg !28
  %33 = add nsw i32 %reass.sub, %31, !dbg !28
  %34 = sub i32 %33, %24, !dbg !29
  %35 = sub nsw i32 %reass.sub, %25, !dbg !28
  %36 = add nsw i32 %35, %31, !dbg !29
  %37 = sext i32 %34 to i64, !dbg !30
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !30
  %39 = sext i32 %36 to i64, !dbg !30
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !30
  %41 = and i1 %11, %29, !dbg !31
  %42 = and i1 %11, %30, !dbg !31
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %38, i1 %41, i32 0, i1 %41) #1, !dbg !32
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %40, i1 %42, i32 0, i1 %42) #1, !dbg !32
  %45 = icmp sgt i32 %.decomposed, 3, !dbg !33
  %46 = add nsw i32 %.decomposed, -4, !dbg !34
  %47 = add nsw i32 %14, -4, !dbg !34
  %48 = tail call i32 @llvm.abs.i32(i32 %46, i1 true), !dbg !35
  %49 = tail call i32 @llvm.abs.i32(i32 %47, i1 true), !dbg !35
  %50 = add nsw i32 %48, -5, !dbg !36
  %51 = add nsw i32 %49, -5, !dbg !36
  %52 = tail call i32 @llvm.abs.i32(i32 %50, i1 true), !dbg !37
  %53 = tail call i32 @llvm.abs.i32(i32 %51, i1 true), !dbg !37
  %54 = add nsw i32 %52, -1, !dbg !38
  %55 = icmp ult i32 %54, 4, !dbg !38
  %56 = add nsw i32 %53, -1, !dbg !38
  %57 = icmp ult i32 %56, 4, !dbg !38
  %58 = and i1 %45, %55, !dbg !39
  %59 = and i1 %57, %45, !dbg !39
  %60 = sub nsw i32 %33, %52, !dbg !40
  %61 = sub nsw i32 %reass.sub, %53, !dbg !41
  %62 = add nsw i32 %61, %31, !dbg !40
  %63 = sext i32 %60 to i64, !dbg !42
  %64 = getelementptr float, ptr addrspace(1) %0, i64 %63, !dbg !42
  %65 = sext i32 %62 to i64, !dbg !42
  %66 = getelementptr float, ptr addrspace(1) %0, i64 %65, !dbg !42
  %67 = and i1 %11, %58, !dbg !43
  %68 = and i1 %11, %59, !dbg !43
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %64, i1 %67, i32 0, i1 %67) #1, !dbg !44
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %66, i1 %68, i32 0, i1 %68) #1, !dbg !44
  %.v = select i1 %17, i32 %43, i32 %69, !dbg !45
  %.v4 = select i1 %17, i32 %44, i32 %70, !dbg !45
  %71 = sext i32 %9 to i64, !dbg !46
  %72 = getelementptr float, ptr addrspace(1) %1, i64 %71, !dbg !46
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.v, i32 %.v4, ptr addrspace(1) %72, i1 %11) #1, !dbg !47
  ret void, !dbg !48
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.abs.i32(i32, i1 immarg) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cqzypv6szuf3lsrrzcermmvmopzhkf3inyuyzhfe3l5jy2ihag44.py", directory: "inductor_cache/qz")
!4 = !{ptr @triton_poi_fused_cat_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_0, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_0", linkageName: "triton_poi_fused_cat_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 19, scope: !7)
!17 = !DILocation(line: 25, column: 27, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 32, column: 18, scope: !7)
!20 = !DILocation(line: 33, column: 57, scope: !7)
!21 = !DILocation(line: 33, column: 52, scope: !7)
!22 = !DILocation(line: 33, column: 40, scope: !7)
!23 = !DILocation(line: 33, column: 33, scope: !7)
!24 = !DILocation(line: 38, column: 19, scope: !7)
!25 = !DILocation(line: 39, column: 20, scope: !7)
!26 = !DILocation(line: 40, column: 93, scope: !7)
!27 = !DILocation(line: 40, column: 122, scope: !7)
!28 = !DILocation(line: 40, column: 88, scope: !7)
!29 = !DILocation(line: 40, column: 119, scope: !7)
!30 = !DILocation(line: 40, column: 31, scope: !7)
!31 = !DILocation(line: 40, column: 135, scope: !7)
!32 = !DILocation(line: 40, column: 127, scope: !7)
!33 = !DILocation(line: 43, column: 20, scope: !7)
!34 = !DILocation(line: 46, column: 60, scope: !7)
!35 = !DILocation(line: 46, column: 53, scope: !7)
!36 = !DILocation(line: 46, column: 41, scope: !7)
!37 = !DILocation(line: 46, column: 34, scope: !7)
!38 = !DILocation(line: 51, column: 20, scope: !7)
!39 = !DILocation(line: 52, column: 20, scope: !7)
!40 = !DILocation(line: 53, column: 120, scope: !7)
!41 = !DILocation(line: 53, column: 89, scope: !7)
!42 = !DILocation(line: 53, column: 31, scope: !7)
!43 = !DILocation(line: 53, column: 136, scope: !7)
!44 = !DILocation(line: 53, column: 128, scope: !7)
!45 = !DILocation(line: 0, scope: !7)
!46 = !DILocation(line: 57, column: 25, scope: !7)
!47 = !DILocation(line: 57, column: 37, scope: !7)
!48 = !DILocation(line: 57, column: 4, scope: !7)
