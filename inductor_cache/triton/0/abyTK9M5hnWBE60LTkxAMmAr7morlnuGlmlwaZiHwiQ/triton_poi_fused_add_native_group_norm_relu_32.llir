; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused_add_native_group_norm_relu_32(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %11 = shl i32 %10, 6, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = lshr i32 %12, 1, !dbg !12
  %14 = and i32 %13, 63, !dbg !12
  %15 = and i32 %12, 1, !dbg !12
  %16 = shl nuw nsw i32 %15, 2, !dbg !12
  %17 = or disjoint i32 %11, %14, !dbg !13
  %18 = icmp slt i32 %17, 64, !dbg !14
  %19 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %20 = shl i32 %19, 3, !dbg !16
  %21 = or disjoint i32 %20, %16, !dbg !17
  %22 = icmp slt i32 %21, 1024, !dbg !18
  %23 = sdiv i32 %17, 16, !dbg !19
  %24 = shl i32 %17, 10, !dbg !20
  %25 = add i32 %21, %24, !dbg !21
  %26 = sext i32 %25 to i64, !dbg !22
  %27 = getelementptr float, ptr addrspace(1) %0, i64 %26, !dbg !22
  %28 = and i1 %18, %22, !dbg !23
  %29 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %27, i1 %28) #4, !dbg !24
  %30 = shl i32 %23, 5, !dbg !25
  %31 = sdiv i32 %21, 32, !dbg !26
  %32 = add i32 %30, %31, !dbg !27
  %33 = sext i32 %32 to i64, !dbg !28
  %34 = getelementptr float, ptr addrspace(1) %1, i64 %33, !dbg !28
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 %28) #4, !dbg !29
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 %28) #4, !dbg !29
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 %28) #4, !dbg !29
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 %28) #4, !dbg !29
  %39 = getelementptr float, ptr addrspace(1) %2, i64 %33, !dbg !30
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 %28) #4, !dbg !31
  %41 = bitcast i32 %40 to float, !dbg !31
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 %28) #4, !dbg !31
  %43 = bitcast i32 %42 to float, !dbg !31
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 %28) #4, !dbg !31
  %45 = bitcast i32 %44 to float, !dbg !31
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 %28) #4, !dbg !31
  %47 = bitcast i32 %46 to float, !dbg !31
  %48 = sext i32 %21 to i64, !dbg !32
  %49 = getelementptr float, ptr addrspace(1) %3, i64 %48, !dbg !32
  %50 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %49, i1 %22) #4, !dbg !33
  %51 = getelementptr float, ptr addrspace(1) %4, i64 %48, !dbg !34
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %51, i1 %22) #4, !dbg !35
  %53 = getelementptr float, ptr addrspace(1) %5, i64 %26, !dbg !36
  %54 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %53, i1 %28) #4, !dbg !37
  %55 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %41, float 5.120000e+02) #4, !dbg !38
  %56 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %43, float 5.120000e+02) #4, !dbg !38
  %57 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %45, float 5.120000e+02) #4, !dbg !38
  %58 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %47, float 5.120000e+02) #4, !dbg !38
  %59 = fadd float %55, 0x3EE4F8B580000000, !dbg !39
  %60 = fadd float %56, 0x3EE4F8B580000000, !dbg !39
  %61 = fadd float %57, 0x3EE4F8B580000000, !dbg !39
  %62 = fadd float %58, 0x3EE4F8B580000000, !dbg !39
  %63 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !40
  %.not.i = icmp eq i32 %63, 0, !dbg !40
  br i1 %.not.i, label %66, label %64, !dbg !40

64:                                               ; preds = %9
  %65 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %59), !dbg !40
  br label %__nv_rsqrtf.exit, !dbg !40

66:                                               ; preds = %9
  %67 = tail call float @llvm.nvvm.rsqrt.approx.f(float %59), !dbg !40
  br label %__nv_rsqrtf.exit, !dbg !40

__nv_rsqrtf.exit:                                 ; preds = %64, %66
  %.0.i = phi float [ %65, %64 ], [ %67, %66 ], !dbg !40
  %68 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !40
  %.not.i9 = icmp eq i32 %68, 0, !dbg !40
  br i1 %.not.i9, label %71, label %69, !dbg !40

69:                                               ; preds = %__nv_rsqrtf.exit
  %70 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %60), !dbg !40
  br label %__nv_rsqrtf.exit11, !dbg !40

71:                                               ; preds = %__nv_rsqrtf.exit
  %72 = tail call float @llvm.nvvm.rsqrt.approx.f(float %60), !dbg !40
  br label %__nv_rsqrtf.exit11, !dbg !40

__nv_rsqrtf.exit11:                               ; preds = %69, %71
  %.0.i10 = phi float [ %70, %69 ], [ %72, %71 ], !dbg !40
  %73 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !40
  %.not.i12 = icmp eq i32 %73, 0, !dbg !40
  br i1 %.not.i12, label %76, label %74, !dbg !40

74:                                               ; preds = %__nv_rsqrtf.exit11
  %75 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %61), !dbg !40
  br label %__nv_rsqrtf.exit14, !dbg !40

76:                                               ; preds = %__nv_rsqrtf.exit11
  %77 = tail call float @llvm.nvvm.rsqrt.approx.f(float %61), !dbg !40
  br label %__nv_rsqrtf.exit14, !dbg !40

__nv_rsqrtf.exit14:                               ; preds = %74, %76
  %.0.i13 = phi float [ %75, %74 ], [ %77, %76 ], !dbg !40
  %78 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !40
  %.not.i15 = icmp eq i32 %78, 0, !dbg !40
  br i1 %.not.i15, label %81, label %79, !dbg !40

79:                                               ; preds = %__nv_rsqrtf.exit14
  %80 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %62), !dbg !40
  br label %__nv_rsqrtf.exit17, !dbg !40

81:                                               ; preds = %__nv_rsqrtf.exit14
  %82 = tail call float @llvm.nvvm.rsqrt.approx.f(float %62), !dbg !40
  br label %__nv_rsqrtf.exit17, !dbg !40

__nv_rsqrtf.exit17:                               ; preds = %79, %81
  %.0.i16 = phi float [ %80, %79 ], [ %82, %81 ], !dbg !40
  %83 = extractvalue { i32, i32, i32, i32 } %29, 3, !dbg !24
  %84 = insertelement <4 x i32> poison, i32 %38, i64 0, !dbg !29
  %85 = insertelement <4 x i32> %84, i32 %37, i64 1, !dbg !29
  %86 = insertelement <4 x i32> %85, i32 %36, i64 2, !dbg !29
  %87 = insertelement <4 x i32> %86, i32 %35, i64 3, !dbg !29
  %88 = bitcast <4 x i32> %87 to <4 x float>, !dbg !29
  %89 = extractvalue { i32, i32, i32, i32 } %29, 2, !dbg !24
  %90 = extractvalue { i32, i32, i32, i32 } %29, 1, !dbg !24
  %91 = extractvalue { i32, i32, i32, i32 } %29, 0, !dbg !24
  %92 = extractvalue { i32, i32, i32, i32 } %54, 3, !dbg !37
  %93 = extractvalue { i32, i32, i32, i32 } %54, 2, !dbg !37
  %94 = extractvalue { i32, i32, i32, i32 } %54, 1, !dbg !37
  %95 = extractvalue { i32, i32, i32, i32 } %54, 0, !dbg !37
  %96 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !35
  %97 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !35
  %98 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !35
  %99 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !35
  %100 = extractvalue { i32, i32, i32, i32 } %50, 3, !dbg !33
  %101 = extractvalue { i32, i32, i32, i32 } %50, 2, !dbg !33
  %102 = extractvalue { i32, i32, i32, i32 } %50, 1, !dbg !33
  %103 = extractvalue { i32, i32, i32, i32 } %50, 0, !dbg !33
  %104 = lshr i32 %12, 4, !dbg !41
  %105 = and i32 %104, 7, !dbg !41
  %106 = or disjoint i32 %20, %105, !dbg !17
  %107 = icmp slt i32 %106, 1024, !dbg !18
  %108 = shl i32 %12, 2, !dbg !12
  %109 = and i32 %108, 60, !dbg !12
  %110 = or disjoint i32 %11, %109, !dbg !13
  %111 = icmp slt i32 %110, 64, !dbg !14
  %112 = and i1 %111, %107, !dbg !23
  %.frozen = freeze i32 %110, !dbg !19
  %113 = sdiv i32 %.frozen, 16, !dbg !19
  %114 = mul i32 %113, 16, !dbg !42
  %.decomposed = sub i32 %.frozen, %114, !dbg !42
  %115 = insertelement <4 x i32> poison, i32 %83, i64 0, !dbg !24
  %116 = insertelement <4 x i32> %115, i32 %89, i64 1, !dbg !24
  %117 = insertelement <4 x i32> %116, i32 %90, i64 2, !dbg !24
  %118 = insertelement <4 x i32> %117, i32 %91, i64 3, !dbg !24
  %119 = bitcast <4 x i32> %118 to <4 x float>, !dbg !24
  %120 = fsub <4 x float> %119, %88, !dbg !43
  %121 = insertelement <4 x i32> poison, i32 %92, i64 0, !dbg !37
  %122 = insertelement <4 x i32> %121, i32 %93, i64 1, !dbg !37
  %123 = insertelement <4 x i32> %122, i32 %94, i64 2, !dbg !37
  %124 = insertelement <4 x i32> %123, i32 %95, i64 3, !dbg !37
  %125 = bitcast <4 x i32> %124 to <4 x float>, !dbg !37
  %126 = insertelement <4 x i32> poison, i32 %96, i64 0, !dbg !35
  %127 = insertelement <4 x i32> %126, i32 %97, i64 1, !dbg !35
  %128 = insertelement <4 x i32> %127, i32 %98, i64 2, !dbg !35
  %129 = insertelement <4 x i32> %128, i32 %99, i64 3, !dbg !35
  %130 = bitcast <4 x i32> %129 to <4 x float>, !dbg !35
  %131 = insertelement <4 x i32> poison, i32 %100, i64 0, !dbg !33
  %132 = insertelement <4 x i32> %131, i32 %101, i64 1, !dbg !33
  %133 = insertelement <4 x i32> %132, i32 %102, i64 2, !dbg !33
  %134 = insertelement <4 x i32> %133, i32 %103, i64 3, !dbg !33
  %135 = bitcast <4 x i32> %134 to <4 x float>, !dbg !33
  %136 = insertelement <4 x float> poison, float %.0.i16, i64 0, !dbg !44
  %137 = insertelement <4 x float> %136, float %.0.i13, i64 1, !dbg !44
  %138 = insertelement <4 x float> %137, float %.0.i10, i64 2, !dbg !44
  %139 = insertelement <4 x float> %138, float %.0.i, i64 3, !dbg !44
  %140 = fmul <4 x float> %120, %139, !dbg !44
  %141 = fmul <4 x float> %140, %135, !dbg !45
  %142 = fadd <4 x float> %141, %130, !dbg !46
  %143 = fadd <4 x float> %142, %125, !dbg !47
  %144 = fcmp olt <4 x float> %143, zeroinitializer, !dbg !48
  %145 = extractelement <4 x i1> %144, i64 3, !dbg !52
  %146 = extractelement <4 x float> %143, i64 3, !dbg !52
  %147 = select i1 %145, float 0.000000e+00, float %146, !dbg !52
  %148 = extractelement <4 x i1> %144, i64 2, !dbg !52
  %149 = extractelement <4 x float> %143, i64 2, !dbg !52
  %150 = select i1 %148, float 0.000000e+00, float %149, !dbg !52
  %151 = extractelement <4 x i1> %144, i64 1, !dbg !52
  %152 = extractelement <4 x float> %143, i64 1, !dbg !52
  %153 = select i1 %151, float 0.000000e+00, float %152, !dbg !52
  %154 = extractelement <4 x i1> %144, i64 0, !dbg !52
  %155 = extractelement <4 x float> %143, i64 0, !dbg !52
  %156 = select i1 %154, float 0.000000e+00, float %155, !dbg !52
  %157 = shl i32 %106, 4, !dbg !53
  %158 = add i32 %157, %.decomposed, !dbg !54
  %159 = shl i32 %113, 14, !dbg !55
  %160 = add i32 %158, %159, !dbg !56
  %161 = sext i32 %160 to i64, !dbg !57
  %162 = getelementptr float, ptr addrspace(1) %6, i64 %161, !dbg !57
  %163 = shl nuw nsw i32 %15, 8, !dbg !58
  %164 = or disjoint i32 %163, %14, !dbg !58
  %165 = and i32 %108, 508, !dbg !58
  %.idx = shl nuw nsw i32 %15, 6, !dbg !58
  %166 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !58
  %167 = getelementptr float, ptr addrspace(3) %166, i32 %164, !dbg !58
  %168 = bitcast float %147 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %167, <1 x i32> %168, i1 true) #4, !dbg !58
  %169 = or disjoint i32 %164, 64, !dbg !58
  %170 = lshr i32 %169, 4, !dbg !58
  %171 = and i32 %170, 20, !dbg !58
  %172 = getelementptr float, ptr addrspace(3) @global_smem, i32 %171, !dbg !58
  %173 = getelementptr float, ptr addrspace(3) %172, i32 %169, !dbg !58
  %174 = bitcast float %150 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %173, <1 x i32> %174, i1 true) #4, !dbg !58
  %175 = or disjoint i32 %164, 128, !dbg !58
  %176 = lshr i32 %175, 4, !dbg !58
  %177 = and i32 %176, 24, !dbg !58
  %178 = getelementptr float, ptr addrspace(3) @global_smem, i32 %177, !dbg !58
  %179 = getelementptr float, ptr addrspace(3) %178, i32 %175, !dbg !58
  %180 = bitcast float %153 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %179, <1 x i32> %180, i1 true) #4, !dbg !58
  %181 = or disjoint i32 %164, 192, !dbg !58
  %182 = lshr i32 %181, 4, !dbg !58
  %183 = and i32 %182, 28, !dbg !58
  %184 = getelementptr float, ptr addrspace(3) @global_smem, i32 %183, !dbg !58
  %185 = getelementptr float, ptr addrspace(3) %184, i32 %181, !dbg !58
  %186 = bitcast float %156 to <1 x i32>, !dbg !58
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %185, <1 x i32> %186, i1 true) #4, !dbg !58
  tail call void @llvm.nvvm.barrier0(), !dbg !58
  %187 = lshr i32 %108, 4, !dbg !58
  %188 = and i32 %187, 28, !dbg !58
  %189 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %188, !dbg !58
  %190 = getelementptr inbounds float, ptr addrspace(3) %189, i32 %165, !dbg !58
  %.extract = load i32, ptr addrspace(3) %190, align 16, !dbg !58
  %191 = getelementptr inbounds i8, ptr addrspace(3) %190, i32 4, !dbg !58
  %.extract6 = load i32, ptr addrspace(3) %191, align 4, !dbg !58
  %192 = getelementptr inbounds i8, ptr addrspace(3) %190, i32 8, !dbg !58
  %.extract7 = load i32, ptr addrspace(3) %192, align 8, !dbg !58
  %193 = getelementptr inbounds i8, ptr addrspace(3) %190, i32 12, !dbg !58
  %.extract8 = load i32, ptr addrspace(3) %193, align 4, !dbg !58
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract6, i32 %.extract7, i32 %.extract8, ptr addrspace(1) %162, i1 %112) #4, !dbg !58
  ret void, !dbg !59
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cx25tstxlj2znuw4byygoolyvmx6ozrajckclupupgaej7pyhj4q.py", directory: "inductor_cache/x2")
!4 = !{ptr @triton_poi_fused_add_native_group_norm_relu_32, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_native_group_norm_relu_32, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_native_group_norm_relu_32", linkageName: "triton_poi_fused_add_native_group_norm_relu_32", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 32, column: 40, scope: !7)
!21 = !DILocation(line: 32, column: 35, scope: !7)
!22 = !DILocation(line: 32, column: 30, scope: !7)
!23 = !DILocation(line: 32, column: 53, scope: !7)
!24 = !DILocation(line: 32, column: 45, scope: !7)
!25 = !DILocation(line: 33, column: 33, scope: !7)
!26 = !DILocation(line: 33, column: 45, scope: !7)
!27 = !DILocation(line: 33, column: 39, scope: !7)
!28 = !DILocation(line: 33, column: 30, scope: !7)
!29 = !DILocation(line: 33, column: 51, scope: !7)
!30 = !DILocation(line: 34, column: 30, scope: !7)
!31 = !DILocation(line: 34, column: 51, scope: !7)
!32 = !DILocation(line: 35, column: 31, scope: !7)
!33 = !DILocation(line: 35, column: 36, scope: !7)
!34 = !DILocation(line: 36, column: 31, scope: !7)
!35 = !DILocation(line: 36, column: 36, scope: !7)
!36 = !DILocation(line: 37, column: 31, scope: !7)
!37 = !DILocation(line: 37, column: 46, scope: !7)
!38 = !DILocation(line: 40, column: 18, scope: !7)
!39 = !DILocation(line: 42, column: 18, scope: !7)
!40 = !DILocation(line: 43, column: 27, scope: !7)
!41 = !DILocation(line: 26, column: 44, scope: !7)
!42 = !DILocation(line: 31, column: 19, scope: !7)
!43 = !DILocation(line: 38, column: 18, scope: !7)
!44 = !DILocation(line: 44, column: 18, scope: !7)
!45 = !DILocation(line: 45, column: 19, scope: !7)
!46 = !DILocation(line: 46, column: 20, scope: !7)
!47 = !DILocation(line: 47, column: 20, scope: !7)
!48 = !DILocation(line: 118, column: 15, scope: !49, inlinedAt: !51)
!49 = distinct !DILexicalBlockFile(scope: !7, file: !50, discriminator: 0)
!50 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!51 = !DILocation(line: 49, column: 42, scope: !7)
!52 = !DILocation(line: 121, column: 29, scope: !49, inlinedAt: !51)
!53 = !DILocation(line: 50, column: 33, scope: !7)
!54 = !DILocation(line: 50, column: 30, scope: !7)
!55 = !DILocation(line: 50, column: 44, scope: !7)
!56 = !DILocation(line: 50, column: 38, scope: !7)
!57 = !DILocation(line: 50, column: 25, scope: !7)
!58 = !DILocation(line: 50, column: 56, scope: !7)
!59 = !DILocation(line: 50, column: 4, scope: !7)
