; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused_add_native_layer_norm_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %11 = shl i32 %10, 5, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = lshr i32 %12, 3, !dbg !12
  %14 = and i32 %13, 15, !dbg !12
  %15 = or disjoint i32 %14, 16, !dbg !12
  %16 = shl i32 %12, 2, !dbg !12
  %17 = and i32 %16, 28, !dbg !12
  %18 = or disjoint i32 %11, %14, !dbg !13
  %19 = or disjoint i32 %11, %15, !dbg !13
  %20 = icmp slt i32 %18, 384, !dbg !14
  %21 = icmp slt i32 %19, 384, !dbg !14
  %22 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %23 = shl i32 %22, 5, !dbg !16
  %24 = or disjoint i32 %23, %17, !dbg !17
  %25 = or disjoint i32 %24, 1, !dbg !17
  %26 = or disjoint i32 %24, 2, !dbg !17
  %27 = or disjoint i32 %24, 3, !dbg !17
  %28 = icmp slt i32 %24, 256, !dbg !18
  %.frozen = freeze i32 %18, !dbg !19
  %29 = sdiv i32 %.frozen, 96, !dbg !19
  %30 = mul i32 %29, 96, !dbg !20
  %.decomposed = sub i32 %.frozen, %30, !dbg !20
  %.frozen42 = freeze i32 %19, !dbg !19
  %31 = sdiv i32 %.frozen42, 96, !dbg !19
  %32 = mul i32 %31, 96, !dbg !20
  %.decomposed43 = sub i32 %.frozen42, %32, !dbg !20
  %.frozen44 = freeze i32 %24, !dbg !21
  %33 = sdiv i32 %.frozen44, 16, !dbg !21
  %34 = mul i32 %33, 16, !dbg !22
  %.decomposed45 = sub i32 %.frozen44, %34, !dbg !22
  %35 = srem i32 %25, 16, !dbg !22
  %36 = srem i32 %26, 16, !dbg !22
  %37 = srem i32 %27, 16, !dbg !22
  %38 = shl i32 %18, 8, !dbg !23
  %39 = shl i32 %19, 8, !dbg !23
  %40 = add i32 %24, %38, !dbg !24
  %41 = add i32 %24, %39, !dbg !24
  %42 = sext i32 %40 to i64, !dbg !25
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !25
  %44 = sext i32 %41 to i64, !dbg !25
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !25
  %46 = and i1 %20, %28, !dbg !26
  %47 = and i1 %21, %28, !dbg !26
  %48 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %43, i1 %46) #4, !dbg !27
  %49 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %45, i1 %47) #4, !dbg !27
  %50 = sext i32 %.decomposed to i64, !dbg !28
  %51 = getelementptr float, ptr addrspace(1) %1, i64 %50, !dbg !28
  %52 = sext i32 %.decomposed43 to i64, !dbg !28
  %53 = getelementptr float, ptr addrspace(1) %1, i64 %52, !dbg !28
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 %20) #4, !dbg !29
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 %20) #4, !dbg !29
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 %20) #4, !dbg !29
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 %20) #4, !dbg !29
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 %21) #4, !dbg !29
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 %21) #4, !dbg !29
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 %21) #4, !dbg !29
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 %21) #4, !dbg !29
  %62 = shl nsw i32 %.decomposed, 8, !dbg !30
  %63 = shl nsw i32 %.decomposed43, 8, !dbg !30
  %64 = add i32 %62, %24, !dbg !31
  %65 = add i32 %63, %24, !dbg !31
  %66 = sext i32 %64 to i64, !dbg !32
  %67 = getelementptr float, ptr addrspace(1) %2, i64 %66, !dbg !32
  %68 = sext i32 %65 to i64, !dbg !32
  %69 = getelementptr float, ptr addrspace(1) %2, i64 %68, !dbg !32
  %70 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %67, i1 %46) #4, !dbg !33
  %71 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %69, i1 %47) #4, !dbg !33
  %72 = srem i32 %33, 8, !dbg !34
  %73 = shl nsw i32 %72, 3, !dbg !35
  %74 = shl nsw i32 %.decomposed, 6, !dbg !36
  %75 = shl nsw i32 %.decomposed43, 6, !dbg !36
  %76 = add nsw i32 %73, %74, !dbg !37
  %77 = add nsw i32 %73, %75, !dbg !37
  %.lhs.trunc = trunc nsw i32 %.decomposed45 to i8, !dbg !38
  %78 = srem i8 %.lhs.trunc, 8, !dbg !38
  %.sext = sext i8 %78 to i32, !dbg !38
  %.lhs.trunc36 = trunc nsw i32 %35 to i8, !dbg !38
  %79 = srem i8 %.lhs.trunc36, 8, !dbg !38
  %.sext37 = sext i8 %79 to i32, !dbg !38
  %.lhs.trunc38 = trunc nsw i32 %36 to i8, !dbg !38
  %80 = srem i8 %.lhs.trunc38, 8, !dbg !38
  %.sext39 = sext i8 %80 to i32, !dbg !38
  %.lhs.trunc40 = trunc nsw i32 %37 to i8, !dbg !38
  %81 = srem i8 %.lhs.trunc40, 8, !dbg !38
  %.sext41 = sext i8 %81 to i32, !dbg !38
  %82 = add nsw i32 %76, %.sext, !dbg !39
  %83 = add nsw i32 %76, %.sext37, !dbg !39
  %84 = add nsw i32 %76, %.sext39, !dbg !39
  %85 = add nsw i32 %76, %.sext41, !dbg !39
  %86 = add nsw i32 %77, %.sext, !dbg !39
  %87 = add nsw i32 %77, %.sext37, !dbg !39
  %88 = add nsw i32 %77, %.sext39, !dbg !39
  %89 = add nsw i32 %77, %.sext41, !dbg !39
  %90 = sext i32 %82 to i64, !dbg !40
  %91 = getelementptr float, ptr addrspace(1) %3, i64 %90, !dbg !40
  %92 = sext i32 %83 to i64, !dbg !40
  %93 = getelementptr float, ptr addrspace(1) %3, i64 %92, !dbg !40
  %94 = sext i32 %84 to i64, !dbg !40
  %95 = getelementptr float, ptr addrspace(1) %3, i64 %94, !dbg !40
  %96 = sext i32 %85 to i64, !dbg !40
  %97 = getelementptr float, ptr addrspace(1) %3, i64 %96, !dbg !40
  %98 = sext i32 %86 to i64, !dbg !40
  %99 = getelementptr float, ptr addrspace(1) %3, i64 %98, !dbg !40
  %100 = sext i32 %87 to i64, !dbg !40
  %101 = getelementptr float, ptr addrspace(1) %3, i64 %100, !dbg !40
  %102 = sext i32 %88 to i64, !dbg !40
  %103 = getelementptr float, ptr addrspace(1) %3, i64 %102, !dbg !40
  %104 = sext i32 %89 to i64, !dbg !40
  %105 = getelementptr float, ptr addrspace(1) %3, i64 %104, !dbg !40
  %106 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %91, i1 %46) #4, !dbg !41
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 %46) #4, !dbg !41
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %95, i1 %46) #4, !dbg !41
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %97, i1 %46) #4, !dbg !41
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %99, i1 %47) #4, !dbg !41
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %101, i1 %47) #4, !dbg !41
  %112 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %103, i1 %47) #4, !dbg !41
  %113 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %105, i1 %47) #4, !dbg !41
  %114 = shl i32 %29, 8, !dbg !42
  %115 = shl i32 %31, 8, !dbg !42
  %116 = add i32 %114, %24, !dbg !43
  %117 = add i32 %115, %24, !dbg !43
  %118 = sext i32 %116 to i64, !dbg !44
  %119 = getelementptr float, ptr addrspace(1) %4, i64 %118, !dbg !44
  %120 = sext i32 %117 to i64, !dbg !44
  %121 = getelementptr float, ptr addrspace(1) %4, i64 %120, !dbg !44
  %122 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %119, i1 %46) #4, !dbg !45
  %123 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %121, i1 %47) #4, !dbg !45
  %124 = getelementptr float, ptr addrspace(1) %5, i64 %118, !dbg !46
  %125 = getelementptr float, ptr addrspace(1) %5, i64 %120, !dbg !46
  %126 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %124, i1 %46) #4, !dbg !47
  %127 = extractvalue { i32, i32, i32, i32 } %126, 0, !dbg !47
  %128 = extractvalue { i32, i32, i32, i32 } %126, 1, !dbg !47
  %129 = extractvalue { i32, i32, i32, i32 } %126, 2, !dbg !47
  %130 = extractvalue { i32, i32, i32, i32 } %126, 3, !dbg !47
  %131 = bitcast i32 %127 to float, !dbg !47
  %132 = bitcast i32 %128 to float, !dbg !47
  %133 = bitcast i32 %129 to float, !dbg !47
  %134 = bitcast i32 %130 to float, !dbg !47
  %135 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %125, i1 %47) #4, !dbg !47
  %136 = extractvalue { i32, i32, i32, i32 } %135, 0, !dbg !47
  %137 = extractvalue { i32, i32, i32, i32 } %135, 1, !dbg !47
  %138 = extractvalue { i32, i32, i32, i32 } %135, 2, !dbg !47
  %139 = extractvalue { i32, i32, i32, i32 } %135, 3, !dbg !47
  %140 = bitcast i32 %136 to float, !dbg !47
  %141 = bitcast i32 %137 to float, !dbg !47
  %142 = bitcast i32 %138 to float, !dbg !47
  %143 = bitcast i32 %139 to float, !dbg !47
  %144 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %131, float 9.600000e+01) #4, !dbg !48
  %145 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %132, float 9.600000e+01) #4, !dbg !48
  %146 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %133, float 9.600000e+01) #4, !dbg !48
  %147 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %134, float 9.600000e+01) #4, !dbg !48
  %148 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %140, float 9.600000e+01) #4, !dbg !48
  %149 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %141, float 9.600000e+01) #4, !dbg !48
  %150 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %142, float 9.600000e+01) #4, !dbg !48
  %151 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %143, float 9.600000e+01) #4, !dbg !48
  %152 = fadd float %144, 0x3EB0C6F7A0000000, !dbg !49
  %153 = fadd float %145, 0x3EB0C6F7A0000000, !dbg !49
  %154 = fadd float %146, 0x3EB0C6F7A0000000, !dbg !49
  %155 = fadd float %147, 0x3EB0C6F7A0000000, !dbg !49
  %156 = fadd float %148, 0x3EB0C6F7A0000000, !dbg !49
  %157 = fadd float %149, 0x3EB0C6F7A0000000, !dbg !49
  %158 = fadd float %150, 0x3EB0C6F7A0000000, !dbg !49
  %159 = fadd float %151, 0x3EB0C6F7A0000000, !dbg !49
  %160 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !50
  %.not.i = icmp eq i32 %160, 0, !dbg !50
  br i1 %.not.i, label %163, label %161, !dbg !50

161:                                              ; preds = %9
  %162 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %152), !dbg !50
  br label %__nv_rsqrtf.exit, !dbg !50

163:                                              ; preds = %9
  %164 = tail call float @llvm.nvvm.rsqrt.approx.f(float %152), !dbg !50
  br label %__nv_rsqrtf.exit, !dbg !50

__nv_rsqrtf.exit:                                 ; preds = %161, %163
  %.0.i = phi float [ %162, %161 ], [ %164, %163 ], !dbg !50
  %165 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !50
  %.not.i15 = icmp eq i32 %165, 0, !dbg !50
  br i1 %.not.i15, label %168, label %166, !dbg !50

166:                                              ; preds = %__nv_rsqrtf.exit
  %167 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %153), !dbg !50
  br label %__nv_rsqrtf.exit17, !dbg !50

168:                                              ; preds = %__nv_rsqrtf.exit
  %169 = tail call float @llvm.nvvm.rsqrt.approx.f(float %153), !dbg !50
  br label %__nv_rsqrtf.exit17, !dbg !50

__nv_rsqrtf.exit17:                               ; preds = %166, %168
  %.0.i16 = phi float [ %167, %166 ], [ %169, %168 ], !dbg !50
  %170 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !50
  %.not.i18 = icmp eq i32 %170, 0, !dbg !50
  br i1 %.not.i18, label %173, label %171, !dbg !50

171:                                              ; preds = %__nv_rsqrtf.exit17
  %172 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %154), !dbg !50
  br label %__nv_rsqrtf.exit20, !dbg !50

173:                                              ; preds = %__nv_rsqrtf.exit17
  %174 = tail call float @llvm.nvvm.rsqrt.approx.f(float %154), !dbg !50
  br label %__nv_rsqrtf.exit20, !dbg !50

__nv_rsqrtf.exit20:                               ; preds = %171, %173
  %.0.i19 = phi float [ %172, %171 ], [ %174, %173 ], !dbg !50
  %175 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !50
  %.not.i21 = icmp eq i32 %175, 0, !dbg !50
  br i1 %.not.i21, label %178, label %176, !dbg !50

176:                                              ; preds = %__nv_rsqrtf.exit20
  %177 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %155), !dbg !50
  br label %__nv_rsqrtf.exit23, !dbg !50

178:                                              ; preds = %__nv_rsqrtf.exit20
  %179 = tail call float @llvm.nvvm.rsqrt.approx.f(float %155), !dbg !50
  br label %__nv_rsqrtf.exit23, !dbg !50

__nv_rsqrtf.exit23:                               ; preds = %176, %178
  %.0.i22 = phi float [ %177, %176 ], [ %179, %178 ], !dbg !50
  %180 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !50
  %.not.i24 = icmp eq i32 %180, 0, !dbg !50
  br i1 %.not.i24, label %183, label %181, !dbg !50

181:                                              ; preds = %__nv_rsqrtf.exit23
  %182 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %156), !dbg !50
  br label %__nv_rsqrtf.exit26, !dbg !50

183:                                              ; preds = %__nv_rsqrtf.exit23
  %184 = tail call float @llvm.nvvm.rsqrt.approx.f(float %156), !dbg !50
  br label %__nv_rsqrtf.exit26, !dbg !50

__nv_rsqrtf.exit26:                               ; preds = %181, %183
  %.0.i25 = phi float [ %182, %181 ], [ %184, %183 ], !dbg !50
  %185 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !50
  %.not.i27 = icmp eq i32 %185, 0, !dbg !50
  br i1 %.not.i27, label %188, label %186, !dbg !50

186:                                              ; preds = %__nv_rsqrtf.exit26
  %187 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %157), !dbg !50
  br label %__nv_rsqrtf.exit29, !dbg !50

188:                                              ; preds = %__nv_rsqrtf.exit26
  %189 = tail call float @llvm.nvvm.rsqrt.approx.f(float %157), !dbg !50
  br label %__nv_rsqrtf.exit29, !dbg !50

__nv_rsqrtf.exit29:                               ; preds = %186, %188
  %.0.i28 = phi float [ %187, %186 ], [ %189, %188 ], !dbg !50
  %190 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !50
  %.not.i30 = icmp eq i32 %190, 0, !dbg !50
  br i1 %.not.i30, label %193, label %191, !dbg !50

191:                                              ; preds = %__nv_rsqrtf.exit29
  %192 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %158), !dbg !50
  br label %__nv_rsqrtf.exit32, !dbg !50

193:                                              ; preds = %__nv_rsqrtf.exit29
  %194 = tail call float @llvm.nvvm.rsqrt.approx.f(float %158), !dbg !50
  br label %__nv_rsqrtf.exit32, !dbg !50

__nv_rsqrtf.exit32:                               ; preds = %191, %193
  %.0.i31 = phi float [ %192, %191 ], [ %194, %193 ], !dbg !50
  %195 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !50
  %.not.i33 = icmp eq i32 %195, 0, !dbg !50
  br i1 %.not.i33, label %198, label %196, !dbg !50

196:                                              ; preds = %__nv_rsqrtf.exit32
  %197 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %159), !dbg !50
  br label %__nv_rsqrtf.exit35, !dbg !50

198:                                              ; preds = %__nv_rsqrtf.exit32
  %199 = tail call float @llvm.nvvm.rsqrt.approx.f(float %159), !dbg !50
  br label %__nv_rsqrtf.exit35, !dbg !50

__nv_rsqrtf.exit35:                               ; preds = %196, %198
  %.0.i34 = phi float [ %197, %196 ], [ %199, %198 ], !dbg !50
  %200 = extractvalue { i32, i32, i32, i32 } %49, 3, !dbg !27
  %201 = bitcast i32 %200 to float, !dbg !27
  %202 = bitcast i32 %61 to float, !dbg !29
  %203 = fadd float %201, %202, !dbg !51
  %204 = extractvalue { i32, i32, i32, i32 } %71, 3, !dbg !33
  %205 = bitcast i32 %204 to float, !dbg !33
  %206 = bitcast i32 %113 to float, !dbg !41
  %207 = fadd float %205, %206, !dbg !52
  %208 = fadd float %203, %207, !dbg !53
  %209 = extractvalue { i32, i32, i32, i32 } %123, 3, !dbg !45
  %210 = bitcast i32 %209 to float, !dbg !45
  %211 = fsub float %208, %210, !dbg !54
  %212 = extractvalue { i32, i32, i32, i32 } %49, 2, !dbg !27
  %213 = bitcast i32 %212 to float, !dbg !27
  %214 = fadd float %213, %202, !dbg !51
  %215 = extractvalue { i32, i32, i32, i32 } %71, 2, !dbg !33
  %216 = bitcast i32 %215 to float, !dbg !33
  %217 = bitcast i32 %112 to float, !dbg !41
  %218 = fadd float %216, %217, !dbg !52
  %219 = fadd float %214, %218, !dbg !53
  %220 = extractvalue { i32, i32, i32, i32 } %123, 2, !dbg !45
  %221 = bitcast i32 %220 to float, !dbg !45
  %222 = fsub float %219, %221, !dbg !54
  %223 = extractvalue { i32, i32, i32, i32 } %49, 1, !dbg !27
  %224 = bitcast i32 %223 to float, !dbg !27
  %225 = fadd float %224, %202, !dbg !51
  %226 = extractvalue { i32, i32, i32, i32 } %71, 1, !dbg !33
  %227 = bitcast i32 %226 to float, !dbg !33
  %228 = bitcast i32 %111 to float, !dbg !41
  %229 = fadd float %227, %228, !dbg !52
  %230 = fadd float %225, %229, !dbg !53
  %231 = extractvalue { i32, i32, i32, i32 } %123, 1, !dbg !45
  %232 = bitcast i32 %231 to float, !dbg !45
  %233 = fsub float %230, %232, !dbg !54
  %234 = extractvalue { i32, i32, i32, i32 } %49, 0, !dbg !27
  %235 = bitcast i32 %234 to float, !dbg !27
  %236 = fadd float %235, %202, !dbg !51
  %237 = extractvalue { i32, i32, i32, i32 } %71, 0, !dbg !33
  %238 = bitcast i32 %237 to float, !dbg !33
  %239 = bitcast i32 %110 to float, !dbg !41
  %240 = fadd float %238, %239, !dbg !52
  %241 = fadd float %236, %240, !dbg !53
  %242 = extractvalue { i32, i32, i32, i32 } %123, 0, !dbg !45
  %243 = bitcast i32 %242 to float, !dbg !45
  %244 = fsub float %241, %243, !dbg !54
  %245 = extractvalue { i32, i32, i32, i32 } %48, 3, !dbg !27
  %246 = bitcast i32 %245 to float, !dbg !27
  %247 = bitcast i32 %57 to float, !dbg !29
  %248 = fadd float %246, %247, !dbg !51
  %249 = extractvalue { i32, i32, i32, i32 } %70, 3, !dbg !33
  %250 = bitcast i32 %249 to float, !dbg !33
  %251 = bitcast i32 %109 to float, !dbg !41
  %252 = fadd float %250, %251, !dbg !52
  %253 = fadd float %248, %252, !dbg !53
  %254 = extractvalue { i32, i32, i32, i32 } %122, 3, !dbg !45
  %255 = bitcast i32 %254 to float, !dbg !45
  %256 = fsub float %253, %255, !dbg !54
  %257 = extractvalue { i32, i32, i32, i32 } %48, 2, !dbg !27
  %258 = bitcast i32 %257 to float, !dbg !27
  %259 = fadd float %258, %247, !dbg !51
  %260 = extractvalue { i32, i32, i32, i32 } %70, 2, !dbg !33
  %261 = bitcast i32 %260 to float, !dbg !33
  %262 = bitcast i32 %108 to float, !dbg !41
  %263 = fadd float %261, %262, !dbg !52
  %264 = fadd float %259, %263, !dbg !53
  %265 = extractvalue { i32, i32, i32, i32 } %122, 2, !dbg !45
  %266 = bitcast i32 %265 to float, !dbg !45
  %267 = fsub float %264, %266, !dbg !54
  %268 = extractvalue { i32, i32, i32, i32 } %48, 1, !dbg !27
  %269 = bitcast i32 %268 to float, !dbg !27
  %270 = fadd float %269, %247, !dbg !51
  %271 = extractvalue { i32, i32, i32, i32 } %70, 1, !dbg !33
  %272 = bitcast i32 %271 to float, !dbg !33
  %273 = bitcast i32 %107 to float, !dbg !41
  %274 = fadd float %272, %273, !dbg !52
  %275 = fadd float %270, %274, !dbg !53
  %276 = extractvalue { i32, i32, i32, i32 } %122, 1, !dbg !45
  %277 = bitcast i32 %276 to float, !dbg !45
  %278 = fsub float %275, %277, !dbg !54
  %279 = extractvalue { i32, i32, i32, i32 } %48, 0, !dbg !27
  %280 = bitcast i32 %279 to float, !dbg !27
  %281 = fadd float %280, %247, !dbg !51
  %282 = extractvalue { i32, i32, i32, i32 } %70, 0, !dbg !33
  %283 = bitcast i32 %282 to float, !dbg !33
  %284 = bitcast i32 %106 to float, !dbg !41
  %285 = fadd float %283, %284, !dbg !52
  %286 = fadd float %281, %285, !dbg !53
  %287 = extractvalue { i32, i32, i32, i32 } %122, 0, !dbg !45
  %288 = bitcast i32 %287 to float, !dbg !45
  %289 = fsub float %286, %288, !dbg !54
  %290 = or disjoint i32 %23, %15, !dbg !17
  %291 = icmp slt i32 %290, 256, !dbg !18
  %292 = or disjoint i32 %11, %17, !dbg !13
  %293 = icmp slt i32 %292, 384, !dbg !14
  %294 = and i1 %293, %291, !dbg !26
  %295 = or disjoint i32 %23, %14, !dbg !17
  %296 = icmp slt i32 %295, 256, !dbg !18
  %297 = and i1 %293, %296, !dbg !26
  %.frozen46 = freeze i32 %292, !dbg !19
  %298 = sdiv i32 %.frozen46, 96, !dbg !19
  %299 = mul i32 %298, 96, !dbg !20
  %.decomposed47 = sub i32 %.frozen46, %299, !dbg !20
  %300 = fmul float %289, %.0.i, !dbg !55
  %301 = fmul float %278, %.0.i16, !dbg !55
  %302 = fmul float %267, %.0.i19, !dbg !55
  %303 = fmul float %256, %.0.i22, !dbg !55
  %304 = fmul float %244, %.0.i25, !dbg !55
  %305 = fmul float %233, %.0.i28, !dbg !55
  %306 = fmul float %222, %.0.i31, !dbg !55
  %307 = fmul float %211, %.0.i34, !dbg !55
  %308 = mul i32 %295, 96, !dbg !56
  %309 = mul i32 %290, 96, !dbg !56
  %310 = mul i32 %298, 24576, !dbg !57
  %311 = add i32 %310, %.decomposed47, !dbg !58
  %312 = add i32 %311, %308, !dbg !59
  %313 = add i32 %311, %309, !dbg !59
  %314 = sext i32 %312 to i64, !dbg !60
  %315 = getelementptr float, ptr addrspace(1) %6, i64 %314, !dbg !60
  %316 = sext i32 %313 to i64, !dbg !60
  %317 = getelementptr float, ptr addrspace(1) %6, i64 %316, !dbg !60
  %318 = shl i32 %12, 7, !dbg !61
  %319 = and i32 %318, 896, !dbg !61
  %320 = or disjoint i32 %319, %14, !dbg !61
  %321 = and i32 %16, 508, !dbg !61
  %322 = lshr exact i32 %319, 1, !dbg !61
  %323 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %322, !dbg !61
  %324 = getelementptr float, ptr addrspace(3) %323, i32 %320, !dbg !61
  %325 = bitcast float %300 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %324, <1 x i32> %325, i1 true) #4, !dbg !61
  %326 = or disjoint i32 %320, 32, !dbg !61
  %327 = lshr i32 %326, 3, !dbg !61
  %328 = and i32 %327, 116, !dbg !61
  %329 = getelementptr float, ptr addrspace(3) @global_smem, i32 %328, !dbg !61
  %330 = getelementptr float, ptr addrspace(3) %329, i32 %326, !dbg !61
  %331 = bitcast float %301 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %330, <1 x i32> %331, i1 true) #4, !dbg !61
  %332 = or disjoint i32 %320, 64, !dbg !61
  %333 = lshr i32 %332, 3, !dbg !61
  %334 = and i32 %333, 120, !dbg !61
  %335 = getelementptr float, ptr addrspace(3) @global_smem, i32 %334, !dbg !61
  %336 = getelementptr float, ptr addrspace(3) %335, i32 %332, !dbg !61
  %337 = bitcast float %302 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %336, <1 x i32> %337, i1 true) #4, !dbg !61
  %338 = or disjoint i32 %320, 96, !dbg !61
  %339 = lshr i32 %338, 3, !dbg !61
  %340 = and i32 %339, 124, !dbg !61
  %341 = getelementptr float, ptr addrspace(3) @global_smem, i32 %340, !dbg !61
  %342 = getelementptr float, ptr addrspace(3) %341, i32 %338, !dbg !61
  %343 = bitcast float %303 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %342, <1 x i32> %343, i1 true) #4, !dbg !61
  %344 = or disjoint i32 %320, 16, !dbg !61
  %345 = getelementptr float, ptr addrspace(3) %323, i32 %344, !dbg !61
  %346 = bitcast float %304 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %345, <1 x i32> %346, i1 true) #4, !dbg !61
  %347 = or disjoint i32 %320, 48, !dbg !61
  %348 = lshr i32 %347, 3, !dbg !61
  %349 = and i32 %348, 116, !dbg !61
  %350 = getelementptr float, ptr addrspace(3) @global_smem, i32 %349, !dbg !61
  %351 = getelementptr float, ptr addrspace(3) %350, i32 %347, !dbg !61
  %352 = bitcast float %305 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %351, <1 x i32> %352, i1 true) #4, !dbg !61
  %353 = or disjoint i32 %320, 80, !dbg !61
  %354 = lshr i32 %353, 3, !dbg !61
  %355 = and i32 %354, 120, !dbg !61
  %356 = getelementptr float, ptr addrspace(3) @global_smem, i32 %355, !dbg !61
  %357 = getelementptr float, ptr addrspace(3) %356, i32 %353, !dbg !61
  %358 = bitcast float %306 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %357, <1 x i32> %358, i1 true) #4, !dbg !61
  %359 = or disjoint i32 %320, 112, !dbg !61
  %360 = lshr i32 %359, 3, !dbg !61
  %361 = and i32 %360, 124, !dbg !61
  %362 = getelementptr float, ptr addrspace(3) @global_smem, i32 %361, !dbg !61
  %363 = getelementptr float, ptr addrspace(3) %362, i32 %359, !dbg !61
  %364 = bitcast float %307 to <1 x i32>, !dbg !61
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %363, <1 x i32> %364, i1 true) #4, !dbg !61
  tail call void @llvm.nvvm.barrier0(), !dbg !61
  %365 = lshr i32 %16, 3, !dbg !61
  %366 = and i32 %365, 60, !dbg !61
  %367 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %366, !dbg !61
  %368 = getelementptr inbounds float, ptr addrspace(3) %367, i32 %321, !dbg !61
  %369 = or disjoint i32 %321, 512, !dbg !61
  %370 = lshr i32 %369, 3, !dbg !61
  %371 = and i32 %370, 124, !dbg !61
  %372 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %371, !dbg !61
  %373 = getelementptr inbounds float, ptr addrspace(3) %372, i32 %369, !dbg !61
  %374 = load <4 x i32>, ptr addrspace(3) %373, align 16, !dbg !61
  %.extract = load i32, ptr addrspace(3) %368, align 16, !dbg !61
  %375 = getelementptr inbounds i8, ptr addrspace(3) %368, i32 4, !dbg !61
  %.extract8 = load i32, ptr addrspace(3) %375, align 4, !dbg !61
  %376 = getelementptr inbounds i8, ptr addrspace(3) %368, i32 8, !dbg !61
  %.extract9 = load i32, ptr addrspace(3) %376, align 8, !dbg !61
  %377 = getelementptr inbounds i8, ptr addrspace(3) %368, i32 12, !dbg !61
  %.extract10 = load i32, ptr addrspace(3) %377, align 4, !dbg !61
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %315, i1 %297) #4, !dbg !61
  %.extract11 = extractelement <4 x i32> %374, i64 0, !dbg !61
  %.extract12 = extractelement <4 x i32> %374, i64 1, !dbg !61
  %.extract13 = extractelement <4 x i32> %374, i64 2, !dbg !61
  %.extract14 = extractelement <4 x i32> %374, i64 3, !dbg !61
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %317, i1 %294) #4, !dbg !61
  ret void, !dbg !62
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cqagfqrxmk4oz574kcj6lbqhuvtghy34uofns6i45r76zc37svnb.py", directory: "inductor_cache/qa")
!4 = !{ptr @triton_poi_fused_add_native_layer_norm_6, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_native_layer_norm_6, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_native_layer_norm_6", linkageName: "triton_poi_fused_add_native_layer_norm_6", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 33, column: 19, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 19, scope: !7)
!22 = !DILocation(line: 31, column: 19, scope: !7)
!23 = !DILocation(line: 34, column: 39, scope: !7)
!24 = !DILocation(line: 34, column: 35, scope: !7)
!25 = !DILocation(line: 34, column: 30, scope: !7)
!26 = !DILocation(line: 34, column: 52, scope: !7)
!27 = !DILocation(line: 34, column: 44, scope: !7)
!28 = !DILocation(line: 35, column: 30, scope: !7)
!29 = !DILocation(line: 35, column: 35, scope: !7)
!30 = !DILocation(line: 36, column: 39, scope: !7)
!31 = !DILocation(line: 36, column: 35, scope: !7)
!32 = !DILocation(line: 36, column: 30, scope: !7)
!33 = !DILocation(line: 36, column: 44, scope: !7)
!34 = !DILocation(line: 37, column: 39, scope: !7)
!35 = !DILocation(line: 37, column: 34, scope: !7)
!36 = !DILocation(line: 37, column: 48, scope: !7)
!37 = !DILocation(line: 37, column: 45, scope: !7)
!38 = !DILocation(line: 37, column: 60, scope: !7)
!39 = !DILocation(line: 37, column: 55, scope: !7)
!40 = !DILocation(line: 37, column: 30, scope: !7)
!41 = !DILocation(line: 37, column: 66, scope: !7)
!42 = !DILocation(line: 38, column: 39, scope: !7)
!43 = !DILocation(line: 38, column: 35, scope: !7)
!44 = !DILocation(line: 38, column: 30, scope: !7)
!45 = !DILocation(line: 38, column: 44, scope: !7)
!46 = !DILocation(line: 39, column: 30, scope: !7)
!47 = !DILocation(line: 39, column: 44, scope: !7)
!48 = !DILocation(line: 45, column: 19, scope: !7)
!49 = !DILocation(line: 47, column: 20, scope: !7)
!50 = !DILocation(line: 48, column: 28, scope: !7)
!51 = !DILocation(line: 40, column: 18, scope: !7)
!52 = !DILocation(line: 41, column: 18, scope: !7)
!53 = !DILocation(line: 42, column: 18, scope: !7)
!54 = !DILocation(line: 43, column: 18, scope: !7)
!55 = !DILocation(line: 49, column: 19, scope: !7)
!56 = !DILocation(line: 50, column: 33, scope: !7)
!57 = !DILocation(line: 50, column: 44, scope: !7)
!58 = !DILocation(line: 50, column: 30, scope: !7)
!59 = !DILocation(line: 50, column: 38, scope: !7)
!60 = !DILocation(line: 50, column: 25, scope: !7)
!61 = !DILocation(line: 50, column: 56, scope: !7)
!62 = !DILocation(line: 50, column: 4, scope: !7)
