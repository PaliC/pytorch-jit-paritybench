; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_avg_pool2d_49(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 10, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 2, !dbg !12
  %8 = and i32 %7, 508, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = or disjoint i32 %9, 512, !dbg !13
  %11 = add i32 %9, -11520, !dbg !14
  %12 = add i32 %9, -11008, !dbg !14
  %13 = sext i32 %11 to i64, !dbg !15
  %14 = getelementptr float, ptr addrspace(1) %0, i64 %13, !dbg !15
  %15 = sext i32 %12 to i64, !dbg !15
  %16 = getelementptr float, ptr addrspace(1) %0, i64 %15, !dbg !15
  %17 = add i32 %9, -10240, !dbg !16
  %18 = add i32 %9, -9728, !dbg !16
  %19 = sext i32 %17 to i64, !dbg !17
  %20 = getelementptr float, ptr addrspace(1) %0, i64 %19, !dbg !17
  %21 = sext i32 %18 to i64, !dbg !17
  %22 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !17
  %23 = add i32 %9, -8960, !dbg !18
  %24 = add i32 %9, -8448, !dbg !18
  %25 = sext i32 %23 to i64, !dbg !19
  %26 = getelementptr float, ptr addrspace(1) %0, i64 %25, !dbg !19
  %27 = sext i32 %24 to i64, !dbg !19
  %28 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !19
  %29 = add i32 %9, -1280, !dbg !20
  %30 = add i32 %9, -768, !dbg !20
  %31 = sext i32 %29 to i64, !dbg !21
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !21
  %33 = sext i32 %30 to i64, !dbg !21
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !21
  %35 = sext i32 %9 to i64, !dbg !22
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !22
  %37 = sext i32 %10 to i64, !dbg !22
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !22
  %39 = add i32 %9, 1280, !dbg !23
  %40 = add i32 %9, 1792, !dbg !23
  %41 = sext i32 %39 to i64, !dbg !24
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !24
  %43 = sext i32 %40 to i64, !dbg !24
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !24
  %45 = add i32 %9, 8960, !dbg !25
  %46 = add i32 %9, 9472, !dbg !25
  %47 = sext i32 %45 to i64, !dbg !26
  %48 = getelementptr float, ptr addrspace(1) %0, i64 %47, !dbg !26
  %49 = sext i32 %46 to i64, !dbg !26
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !26
  %51 = add i32 %9, 10240, !dbg !27
  %52 = add i32 %9, 10752, !dbg !27
  %53 = sext i32 %51 to i64, !dbg !28
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !28
  %55 = sext i32 %52 to i64, !dbg !28
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !28
  %57 = add i32 %9, 11520, !dbg !29
  %58 = add i32 %9, 12032, !dbg !29
  %59 = sext i32 %57 to i64, !dbg !30
  %60 = getelementptr float, ptr addrspace(1) %0, i64 %59, !dbg !30
  %61 = sext i32 %58 to i64, !dbg !30
  %62 = getelementptr float, ptr addrspace(1) %0, i64 %61, !dbg !30
  %63 = insertelement <2 x i32> poison, i32 %9, i64 0, !dbg !31
  %64 = shufflevector <2 x i32> %63, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !31
  %65 = sdiv <2 x i32> %64, <i32 1280, i32 10240>, !dbg !31
  %66 = srem <2 x i32> %65, splat (i32 8), !dbg !32
  %67 = extractelement <2 x i32> %66, i64 1, !dbg !33
  %68 = icmp sgt i32 %67, 0, !dbg !34
  %69 = extractelement <2 x i32> %66, i64 0, !dbg !35
  %70 = add nsw i32 %69, -1, !dbg !36
  %71 = icmp sgt i32 %69, 0, !dbg !37
  %72 = and i1 %68, %71, !dbg !38
  %73 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %14, i1 %72, i32 0, i1 %72, i32 0, i1 %72, i32 0, i1 %72, i32 0, i1 %72) #1, !dbg !39
  %74 = extractvalue { i32, i32, i32, i32 } %73, 0, !dbg !39
  %75 = extractvalue { i32, i32, i32, i32 } %73, 1, !dbg !39
  %76 = extractvalue { i32, i32, i32, i32 } %73, 2, !dbg !39
  %77 = extractvalue { i32, i32, i32, i32 } %73, 3, !dbg !39
  %78 = bitcast i32 %74 to float, !dbg !39
  %79 = bitcast i32 %75 to float, !dbg !39
  %80 = bitcast i32 %76 to float, !dbg !39
  %81 = bitcast i32 %77 to float, !dbg !39
  %82 = icmp sgt i32 %69, -1, !dbg !40
  %83 = and i1 %68, %82, !dbg !41
  %84 = add nsw i32 %69, 1, !dbg !42
  %85 = icmp ult i32 %84, 8, !dbg !42
  %86 = and i1 %68, %85, !dbg !43
  %87 = icmp sgt i32 %67, -1, !dbg !44
  %88 = and i1 %87, %71, !dbg !45
  %89 = or i32 %67, %69, !dbg !35
  %90 = icmp sgt i32 %89, -1, !dbg !35
  %91 = and i1 %87, %85, !dbg !46
  %92 = add nsw i32 %67, 1, !dbg !47
  %93 = icmp ult i32 %92, 8, !dbg !47
  %94 = and i1 %71, %93, !dbg !48
  %95 = and i1 %82, %93, !dbg !49
  %96 = or i32 %92, %84, !dbg !50
  %97 = icmp ult i32 %96, 8, !dbg !50
  %98 = add nsw <2 x i32> %66, <i32 2, i32 -1>, !dbg !51
  %99 = shufflevector <2 x i32> %66, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !52
  %100 = icmp sgt <2 x i32> %99, <i32 5, i32 1>, !dbg !52
  %101 = insertelement <2 x i32> <i32 8, i32 poison>, i32 %70, i64 1, !dbg !53
  %102 = select <2 x i1> %100, <2 x i32> %101, <2 x i32> zeroinitializer, !dbg !53
  %103 = insertelement <2 x i32> %99, i32 1, i64 1, !dbg !54
  %104 = insertelement <2 x i32> %66, i32 6, i64 0, !dbg !54
  %105 = icmp slt <2 x i32> %103, %104, !dbg !54
  %106 = select <2 x i1> %105, <2 x i32> %98, <2 x i32> zeroinitializer, !dbg !55
  %107 = add nsw <2 x i32> %102, %106, !dbg !56
  %108 = mul nsw <2 x i32> %102, %106, !dbg !56
  %109 = insertelement <2 x i32> poison, i32 %10, i64 0, !dbg !31
  %110 = shufflevector <2 x i32> %109, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !31
  %111 = sdiv <2 x i32> %110, <i32 1280, i32 10240>, !dbg !31
  %112 = srem <2 x i32> %111, splat (i32 8), !dbg !32
  %113 = extractelement <2 x i32> %112, i64 1, !dbg !33
  %114 = icmp sgt i32 %113, 0, !dbg !34
  %115 = extractelement <2 x i32> %112, i64 0, !dbg !35
  %116 = add nsw i32 %115, -1, !dbg !36
  %117 = icmp sgt i32 %115, 0, !dbg !37
  %118 = and i1 %114, %117, !dbg !38
  %119 = icmp sgt i32 %115, -1, !dbg !40
  %120 = and i1 %114, %119, !dbg !41
  %121 = add nsw i32 %115, 1, !dbg !42
  %122 = icmp ult i32 %121, 8, !dbg !42
  %123 = and i1 %114, %122, !dbg !43
  %124 = icmp sgt i32 %113, -1, !dbg !44
  %125 = and i1 %124, %117, !dbg !45
  %126 = or i32 %113, %115, !dbg !35
  %127 = icmp sgt i32 %126, -1, !dbg !35
  %128 = and i1 %124, %122, !dbg !46
  %129 = add nsw i32 %113, 1, !dbg !47
  %130 = icmp ult i32 %129, 8, !dbg !47
  %131 = and i1 %117, %130, !dbg !48
  %132 = and i1 %119, %130, !dbg !49
  %133 = or i32 %129, %121, !dbg !50
  %134 = icmp ult i32 %133, 8, !dbg !50
  %135 = add nsw <2 x i32> %112, <i32 2, i32 -1>, !dbg !51
  %136 = shufflevector <2 x i32> %112, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !52
  %137 = icmp sgt <2 x i32> %136, <i32 5, i32 1>, !dbg !52
  %138 = insertelement <2 x i32> <i32 8, i32 poison>, i32 %116, i64 1, !dbg !53
  %139 = select <2 x i1> %137, <2 x i32> %138, <2 x i32> zeroinitializer, !dbg !53
  %140 = insertelement <2 x i32> %136, i32 1, i64 1, !dbg !54
  %141 = insertelement <2 x i32> %112, i32 6, i64 0, !dbg !54
  %142 = icmp slt <2 x i32> %140, %141, !dbg !54
  %143 = select <2 x i1> %142, <2 x i32> %135, <2 x i32> zeroinitializer, !dbg !55
  %144 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %16, i1 %118, i32 0, i1 %118, i32 0, i1 %118, i32 0, i1 %118, i32 0, i1 %118) #1, !dbg !39
  %145 = extractvalue { i32, i32, i32, i32 } %144, 0, !dbg !39
  %146 = extractvalue { i32, i32, i32, i32 } %144, 1, !dbg !39
  %147 = extractvalue { i32, i32, i32, i32 } %144, 2, !dbg !39
  %148 = extractvalue { i32, i32, i32, i32 } %144, 3, !dbg !39
  %149 = bitcast i32 %145 to float, !dbg !39
  %150 = bitcast i32 %146 to float, !dbg !39
  %151 = bitcast i32 %147 to float, !dbg !39
  %152 = bitcast i32 %148 to float, !dbg !39
  %153 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %20, i1 %83, i32 0, i1 %83, i32 0, i1 %83, i32 0, i1 %83, i32 0, i1 %83) #1, !dbg !57
  %154 = extractvalue { i32, i32, i32, i32 } %153, 0, !dbg !57
  %155 = extractvalue { i32, i32, i32, i32 } %153, 1, !dbg !57
  %156 = extractvalue { i32, i32, i32, i32 } %153, 2, !dbg !57
  %157 = extractvalue { i32, i32, i32, i32 } %153, 3, !dbg !57
  %158 = bitcast i32 %154 to float, !dbg !57
  %159 = bitcast i32 %155 to float, !dbg !57
  %160 = bitcast i32 %156 to float, !dbg !57
  %161 = bitcast i32 %157 to float, !dbg !57
  %162 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %22, i1 %120, i32 0, i1 %120, i32 0, i1 %120, i32 0, i1 %120, i32 0, i1 %120) #1, !dbg !57
  %163 = extractvalue { i32, i32, i32, i32 } %162, 0, !dbg !57
  %164 = extractvalue { i32, i32, i32, i32 } %162, 1, !dbg !57
  %165 = extractvalue { i32, i32, i32, i32 } %162, 2, !dbg !57
  %166 = extractvalue { i32, i32, i32, i32 } %162, 3, !dbg !57
  %167 = bitcast i32 %163 to float, !dbg !57
  %168 = bitcast i32 %164 to float, !dbg !57
  %169 = bitcast i32 %165 to float, !dbg !57
  %170 = bitcast i32 %166 to float, !dbg !57
  %171 = fadd float %78, %158, !dbg !58
  %172 = fadd float %79, %159, !dbg !58
  %173 = fadd float %80, %160, !dbg !58
  %174 = fadd float %81, %161, !dbg !58
  %175 = fadd float %149, %167, !dbg !58
  %176 = fadd float %150, %168, !dbg !58
  %177 = fadd float %151, %169, !dbg !58
  %178 = fadd float %152, %170, !dbg !58
  %179 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %26, i1 %86, i32 0, i1 %86, i32 0, i1 %86, i32 0, i1 %86, i32 0, i1 %86) #1, !dbg !59
  %180 = extractvalue { i32, i32, i32, i32 } %179, 0, !dbg !59
  %181 = extractvalue { i32, i32, i32, i32 } %179, 1, !dbg !59
  %182 = extractvalue { i32, i32, i32, i32 } %179, 2, !dbg !59
  %183 = extractvalue { i32, i32, i32, i32 } %179, 3, !dbg !59
  %184 = bitcast i32 %180 to float, !dbg !59
  %185 = bitcast i32 %181 to float, !dbg !59
  %186 = bitcast i32 %182 to float, !dbg !59
  %187 = bitcast i32 %183 to float, !dbg !59
  %188 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %28, i1 %123, i32 0, i1 %123, i32 0, i1 %123, i32 0, i1 %123, i32 0, i1 %123) #1, !dbg !59
  %189 = extractvalue { i32, i32, i32, i32 } %188, 0, !dbg !59
  %190 = extractvalue { i32, i32, i32, i32 } %188, 1, !dbg !59
  %191 = extractvalue { i32, i32, i32, i32 } %188, 2, !dbg !59
  %192 = extractvalue { i32, i32, i32, i32 } %188, 3, !dbg !59
  %193 = bitcast i32 %189 to float, !dbg !59
  %194 = bitcast i32 %190 to float, !dbg !59
  %195 = bitcast i32 %191 to float, !dbg !59
  %196 = bitcast i32 %192 to float, !dbg !59
  %197 = fadd float %171, %184, !dbg !60
  %198 = fadd float %172, %185, !dbg !60
  %199 = fadd float %173, %186, !dbg !60
  %200 = fadd float %174, %187, !dbg !60
  %201 = fadd float %175, %193, !dbg !60
  %202 = fadd float %176, %194, !dbg !60
  %203 = fadd float %177, %195, !dbg !60
  %204 = fadd float %178, %196, !dbg !60
  %205 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %32, i1 %88, i32 0, i1 %88, i32 0, i1 %88, i32 0, i1 %88, i32 0, i1 %88) #1, !dbg !61
  %206 = extractvalue { i32, i32, i32, i32 } %205, 0, !dbg !61
  %207 = extractvalue { i32, i32, i32, i32 } %205, 1, !dbg !61
  %208 = extractvalue { i32, i32, i32, i32 } %205, 2, !dbg !61
  %209 = extractvalue { i32, i32, i32, i32 } %205, 3, !dbg !61
  %210 = bitcast i32 %206 to float, !dbg !61
  %211 = bitcast i32 %207 to float, !dbg !61
  %212 = bitcast i32 %208 to float, !dbg !61
  %213 = bitcast i32 %209 to float, !dbg !61
  %214 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %34, i1 %125, i32 0, i1 %125, i32 0, i1 %125, i32 0, i1 %125, i32 0, i1 %125) #1, !dbg !61
  %215 = extractvalue { i32, i32, i32, i32 } %214, 0, !dbg !61
  %216 = extractvalue { i32, i32, i32, i32 } %214, 1, !dbg !61
  %217 = extractvalue { i32, i32, i32, i32 } %214, 2, !dbg !61
  %218 = extractvalue { i32, i32, i32, i32 } %214, 3, !dbg !61
  %219 = bitcast i32 %215 to float, !dbg !61
  %220 = bitcast i32 %216 to float, !dbg !61
  %221 = bitcast i32 %217 to float, !dbg !61
  %222 = bitcast i32 %218 to float, !dbg !61
  %223 = fadd float %197, %210, !dbg !62
  %224 = fadd float %198, %211, !dbg !62
  %225 = fadd float %199, %212, !dbg !62
  %226 = fadd float %200, %213, !dbg !62
  %227 = fadd float %201, %219, !dbg !62
  %228 = fadd float %202, %220, !dbg !62
  %229 = fadd float %203, %221, !dbg !62
  %230 = fadd float %204, %222, !dbg !62
  %231 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %36, i1 %90, i32 0, i1 %90, i32 0, i1 %90, i32 0, i1 %90, i32 0, i1 %90) #1, !dbg !63
  %232 = extractvalue { i32, i32, i32, i32 } %231, 0, !dbg !63
  %233 = extractvalue { i32, i32, i32, i32 } %231, 1, !dbg !63
  %234 = extractvalue { i32, i32, i32, i32 } %231, 2, !dbg !63
  %235 = extractvalue { i32, i32, i32, i32 } %231, 3, !dbg !63
  %236 = bitcast i32 %232 to float, !dbg !63
  %237 = bitcast i32 %233 to float, !dbg !63
  %238 = bitcast i32 %234 to float, !dbg !63
  %239 = bitcast i32 %235 to float, !dbg !63
  %240 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %38, i1 %127, i32 0, i1 %127, i32 0, i1 %127, i32 0, i1 %127, i32 0, i1 %127) #1, !dbg !63
  %241 = extractvalue { i32, i32, i32, i32 } %240, 0, !dbg !63
  %242 = extractvalue { i32, i32, i32, i32 } %240, 1, !dbg !63
  %243 = extractvalue { i32, i32, i32, i32 } %240, 2, !dbg !63
  %244 = extractvalue { i32, i32, i32, i32 } %240, 3, !dbg !63
  %245 = bitcast i32 %241 to float, !dbg !63
  %246 = bitcast i32 %242 to float, !dbg !63
  %247 = bitcast i32 %243 to float, !dbg !63
  %248 = bitcast i32 %244 to float, !dbg !63
  %249 = fadd float %223, %236, !dbg !64
  %250 = fadd float %224, %237, !dbg !64
  %251 = fadd float %225, %238, !dbg !64
  %252 = fadd float %226, %239, !dbg !64
  %253 = fadd float %227, %245, !dbg !64
  %254 = fadd float %228, %246, !dbg !64
  %255 = fadd float %229, %247, !dbg !64
  %256 = fadd float %230, %248, !dbg !64
  %257 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %42, i1 %91, i32 0, i1 %91, i32 0, i1 %91, i32 0, i1 %91, i32 0, i1 %91) #1, !dbg !65
  %258 = extractvalue { i32, i32, i32, i32 } %257, 0, !dbg !65
  %259 = extractvalue { i32, i32, i32, i32 } %257, 1, !dbg !65
  %260 = extractvalue { i32, i32, i32, i32 } %257, 2, !dbg !65
  %261 = extractvalue { i32, i32, i32, i32 } %257, 3, !dbg !65
  %262 = bitcast i32 %258 to float, !dbg !65
  %263 = bitcast i32 %259 to float, !dbg !65
  %264 = bitcast i32 %260 to float, !dbg !65
  %265 = bitcast i32 %261 to float, !dbg !65
  %266 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %44, i1 %128, i32 0, i1 %128, i32 0, i1 %128, i32 0, i1 %128, i32 0, i1 %128) #1, !dbg !65
  %267 = extractvalue { i32, i32, i32, i32 } %266, 0, !dbg !65
  %268 = extractvalue { i32, i32, i32, i32 } %266, 1, !dbg !65
  %269 = extractvalue { i32, i32, i32, i32 } %266, 2, !dbg !65
  %270 = extractvalue { i32, i32, i32, i32 } %266, 3, !dbg !65
  %271 = bitcast i32 %267 to float, !dbg !65
  %272 = bitcast i32 %268 to float, !dbg !65
  %273 = bitcast i32 %269 to float, !dbg !65
  %274 = bitcast i32 %270 to float, !dbg !65
  %275 = fadd float %249, %262, !dbg !66
  %276 = fadd float %250, %263, !dbg !66
  %277 = fadd float %251, %264, !dbg !66
  %278 = fadd float %252, %265, !dbg !66
  %279 = fadd float %253, %271, !dbg !66
  %280 = fadd float %254, %272, !dbg !66
  %281 = fadd float %255, %273, !dbg !66
  %282 = fadd float %256, %274, !dbg !66
  %283 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %48, i1 %94, i32 0, i1 %94, i32 0, i1 %94, i32 0, i1 %94, i32 0, i1 %94) #1, !dbg !67
  %284 = extractvalue { i32, i32, i32, i32 } %283, 0, !dbg !67
  %285 = extractvalue { i32, i32, i32, i32 } %283, 1, !dbg !67
  %286 = extractvalue { i32, i32, i32, i32 } %283, 2, !dbg !67
  %287 = extractvalue { i32, i32, i32, i32 } %283, 3, !dbg !67
  %288 = bitcast i32 %284 to float, !dbg !67
  %289 = bitcast i32 %285 to float, !dbg !67
  %290 = bitcast i32 %286 to float, !dbg !67
  %291 = bitcast i32 %287 to float, !dbg !67
  %292 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %50, i1 %131, i32 0, i1 %131, i32 0, i1 %131, i32 0, i1 %131, i32 0, i1 %131) #1, !dbg !67
  %293 = extractvalue { i32, i32, i32, i32 } %292, 0, !dbg !67
  %294 = extractvalue { i32, i32, i32, i32 } %292, 1, !dbg !67
  %295 = extractvalue { i32, i32, i32, i32 } %292, 2, !dbg !67
  %296 = extractvalue { i32, i32, i32, i32 } %292, 3, !dbg !67
  %297 = bitcast i32 %293 to float, !dbg !67
  %298 = bitcast i32 %294 to float, !dbg !67
  %299 = bitcast i32 %295 to float, !dbg !67
  %300 = bitcast i32 %296 to float, !dbg !67
  %301 = fadd float %275, %288, !dbg !68
  %302 = fadd float %276, %289, !dbg !68
  %303 = fadd float %277, %290, !dbg !68
  %304 = fadd float %278, %291, !dbg !68
  %305 = fadd float %279, %297, !dbg !68
  %306 = fadd float %280, %298, !dbg !68
  %307 = fadd float %281, %299, !dbg !68
  %308 = fadd float %282, %300, !dbg !68
  %309 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %54, i1 %95, i32 0, i1 %95, i32 0, i1 %95, i32 0, i1 %95, i32 0, i1 %95) #1, !dbg !69
  %310 = extractvalue { i32, i32, i32, i32 } %309, 0, !dbg !69
  %311 = extractvalue { i32, i32, i32, i32 } %309, 1, !dbg !69
  %312 = extractvalue { i32, i32, i32, i32 } %309, 2, !dbg !69
  %313 = extractvalue { i32, i32, i32, i32 } %309, 3, !dbg !69
  %314 = bitcast i32 %310 to float, !dbg !69
  %315 = bitcast i32 %311 to float, !dbg !69
  %316 = bitcast i32 %312 to float, !dbg !69
  %317 = bitcast i32 %313 to float, !dbg !69
  %318 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %56, i1 %132, i32 0, i1 %132, i32 0, i1 %132, i32 0, i1 %132, i32 0, i1 %132) #1, !dbg !69
  %319 = extractvalue { i32, i32, i32, i32 } %318, 0, !dbg !69
  %320 = extractvalue { i32, i32, i32, i32 } %318, 1, !dbg !69
  %321 = extractvalue { i32, i32, i32, i32 } %318, 2, !dbg !69
  %322 = extractvalue { i32, i32, i32, i32 } %318, 3, !dbg !69
  %323 = bitcast i32 %319 to float, !dbg !69
  %324 = bitcast i32 %320 to float, !dbg !69
  %325 = bitcast i32 %321 to float, !dbg !69
  %326 = bitcast i32 %322 to float, !dbg !69
  %327 = fadd float %301, %314, !dbg !70
  %328 = fadd float %302, %315, !dbg !70
  %329 = fadd float %303, %316, !dbg !70
  %330 = fadd float %304, %317, !dbg !70
  %331 = fadd float %305, %323, !dbg !70
  %332 = fadd float %306, %324, !dbg !70
  %333 = fadd float %307, %325, !dbg !70
  %334 = fadd float %308, %326, !dbg !70
  %335 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %60, i1 %97, i32 0, i1 %97, i32 0, i1 %97, i32 0, i1 %97, i32 0, i1 %97) #1, !dbg !71
  %336 = extractvalue { i32, i32, i32, i32 } %335, 0, !dbg !71
  %337 = extractvalue { i32, i32, i32, i32 } %335, 1, !dbg !71
  %338 = extractvalue { i32, i32, i32, i32 } %335, 2, !dbg !71
  %339 = extractvalue { i32, i32, i32, i32 } %335, 3, !dbg !71
  %340 = bitcast i32 %336 to float, !dbg !71
  %341 = bitcast i32 %337 to float, !dbg !71
  %342 = bitcast i32 %338 to float, !dbg !71
  %343 = bitcast i32 %339 to float, !dbg !71
  %344 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %62, i1 %134, i32 0, i1 %134, i32 0, i1 %134, i32 0, i1 %134, i32 0, i1 %134) #1, !dbg !71
  %345 = extractvalue { i32, i32, i32, i32 } %344, 0, !dbg !71
  %346 = extractvalue { i32, i32, i32, i32 } %344, 1, !dbg !71
  %347 = extractvalue { i32, i32, i32, i32 } %344, 2, !dbg !71
  %348 = extractvalue { i32, i32, i32, i32 } %344, 3, !dbg !71
  %349 = bitcast i32 %345 to float, !dbg !71
  %350 = bitcast i32 %346 to float, !dbg !71
  %351 = bitcast i32 %347 to float, !dbg !71
  %352 = bitcast i32 %348 to float, !dbg !71
  %353 = fadd float %327, %340, !dbg !72
  %354 = fadd float %328, %341, !dbg !72
  %355 = fadd float %329, %342, !dbg !72
  %356 = fadd float %330, %343, !dbg !72
  %357 = fadd float %331, %349, !dbg !72
  %358 = fadd float %332, %350, !dbg !72
  %359 = fadd float %333, %351, !dbg !72
  %360 = fadd float %334, %352, !dbg !72
  %361 = add nsw <2 x i32> %139, %143, !dbg !56
  %362 = mul nsw <2 x i32> %139, %143, !dbg !56
  %363 = add nsw i32 %67, 2, !dbg !73
  %364 = add nsw i32 %113, 2, !dbg !73
  %365 = icmp sgt i32 %67, 5, !dbg !74
  %366 = icmp sgt i32 %113, 5, !dbg !74
  %367 = select i1 %365, i32 8, i32 0, !dbg !75
  %368 = select i1 %366, i32 8, i32 0, !dbg !75
  %369 = icmp slt i32 %67, 6, !dbg !33
  %370 = icmp slt i32 %113, 6, !dbg !33
  %371 = select i1 %369, i32 %363, i32 0, !dbg !76
  %372 = select i1 %370, i32 %364, i32 0, !dbg !76
  %373 = add nsw i32 %367, %371, !dbg !77
  %374 = add nsw i32 %368, %372, !dbg !77
  %375 = extractelement <2 x i32> %107, i64 0, !dbg !78
  %376 = mul nsw i32 %375, %373, !dbg !79
  %377 = extractelement <2 x i32> %361, i64 0, !dbg !78
  %378 = mul nsw i32 %377, %374, !dbg !79
  %379 = extractelement <2 x i32> %102, i64 1, !dbg !78
  %.neg = mul nsw i32 %373, %379, !dbg !78
  %380 = extractelement <2 x i32> %106, i64 1, !dbg !78
  %.neg1 = mul nsw i32 %375, %380, !dbg !78
  %reass.add = add nsw i32 %.neg, %.neg1
  %381 = extractelement <2 x i32> %108, i64 1, !dbg !80
  %382 = add nsw i32 %376, %381, !dbg !80
  %383 = sub nsw i32 %382, %reass.add, !dbg !78
  %384 = extractelement <2 x i32> %139, i64 1, !dbg !78
  %.neg3 = mul nsw i32 %374, %384, !dbg !78
  %385 = extractelement <2 x i32> %143, i64 1, !dbg !78
  %.neg4 = mul nsw i32 %377, %385, !dbg !78
  %reass.add6 = add nsw i32 %.neg3, %.neg4
  %386 = extractelement <2 x i32> %362, i64 1, !dbg !80
  %387 = add nsw i32 %378, %386, !dbg !80
  %388 = sub nsw i32 %387, %reass.add6, !dbg !78
  %389 = sitofp i32 %383 to float, !dbg !81
  %390 = sitofp i32 %388 to float, !dbg !81
  %391 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %353, float %389) #1, !dbg !81
  %392 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %354, float %389) #1, !dbg !81
  %393 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %355, float %389) #1, !dbg !81
  %394 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %356, float %389) #1, !dbg !81
  %395 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %357, float %390) #1, !dbg !81
  %396 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %358, float %390) #1, !dbg !81
  %397 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %359, float %390) #1, !dbg !81
  %398 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %360, float %390) #1, !dbg !81
  %399 = getelementptr float, ptr addrspace(1) %1, i64 %35, !dbg !82
  %400 = getelementptr float, ptr addrspace(1) %1, i64 %37, !dbg !82
  %401 = bitcast float %391 to i32, !dbg !83
  %402 = bitcast float %392 to i32, !dbg !83
  %403 = bitcast float %393 to i32, !dbg !83
  %404 = bitcast float %394 to i32, !dbg !83
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %401, i32 %402, i32 %403, i32 %404, ptr addrspace(1) %399, i1 true) #1, !dbg !83
  %405 = bitcast float %395 to i32, !dbg !83
  %406 = bitcast float %396 to i32, !dbg !83
  %407 = bitcast float %397 to i32, !dbg !83
  %408 = bitcast float %398 to i32, !dbg !83
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %405, i32 %406, i32 %407, i32 %408, ptr addrspace(1) %400, i1 true) #1, !dbg !83
  ret void, !dbg !84
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cdnmo6wzmjimfnhbhdcphdzkplbotpsvb3vj6mjh7er65xz4j7uo.py", directory: "inductor_cache/dn")
!4 = !{ptr @triton_poi_fused_avg_pool2d_49, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_avg_pool2d_49, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_avg_pool2d_49", linkageName: "triton_poi_fused_avg_pool2d_49", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 38, column: 42, scope: !7)
!15 = !DILocation(line: 38, column: 31, scope: !7)
!16 = !DILocation(line: 44, column: 42, scope: !7)
!17 = !DILocation(line: 44, column: 31, scope: !7)
!18 = !DILocation(line: 51, column: 41, scope: !7)
!19 = !DILocation(line: 51, column: 31, scope: !7)
!20 = !DILocation(line: 58, column: 41, scope: !7)
!21 = !DILocation(line: 58, column: 31, scope: !7)
!22 = !DILocation(line: 61, column: 31, scope: !7)
!23 = !DILocation(line: 64, column: 38, scope: !7)
!24 = !DILocation(line: 64, column: 31, scope: !7)
!25 = !DILocation(line: 71, column: 38, scope: !7)
!26 = !DILocation(line: 71, column: 31, scope: !7)
!27 = !DILocation(line: 74, column: 39, scope: !7)
!28 = !DILocation(line: 74, column: 31, scope: !7)
!29 = !DILocation(line: 77, column: 39, scope: !7)
!30 = !DILocation(line: 77, column: 31, scope: !7)
!31 = !DILocation(line: 25, column: 21, scope: !7)
!32 = !DILocation(line: 25, column: 29, scope: !7)
!33 = !DILocation(line: 79, column: 251, scope: !7)
!34 = !DILocation(line: 29, column: 19, scope: !7)
!35 = !DILocation(line: 60, column: 20, scope: !7)
!36 = !DILocation(line: 33, column: 18, scope: !7)
!37 = !DILocation(line: 34, column: 19, scope: !7)
!38 = !DILocation(line: 37, column: 19, scope: !7)
!39 = !DILocation(line: 38, column: 47, scope: !7)
!40 = !DILocation(line: 40, column: 21, scope: !7)
!41 = !DILocation(line: 43, column: 19, scope: !7)
!42 = !DILocation(line: 49, column: 20, scope: !7)
!43 = !DILocation(line: 50, column: 19, scope: !7)
!44 = !DILocation(line: 54, column: 21, scope: !7)
!45 = !DILocation(line: 57, column: 20, scope: !7)
!46 = !DILocation(line: 63, column: 20, scope: !7)
!47 = !DILocation(line: 69, column: 20, scope: !7)
!48 = !DILocation(line: 70, column: 20, scope: !7)
!49 = !DILocation(line: 73, column: 20, scope: !7)
!50 = !DILocation(line: 76, column: 20, scope: !7)
!51 = !DILocation(line: 79, column: 164, scope: !7)
!52 = !DILocation(line: 79, column: 160, scope: !7)
!53 = !DILocation(line: 79, column: 152, scope: !7)
!54 = !DILocation(line: 79, column: 195, scope: !7)
!55 = !DILocation(line: 79, column: 183, scope: !7)
!56 = !DILocation(line: 79, column: 171, scope: !7)
!57 = !DILocation(line: 44, column: 47, scope: !7)
!58 = !DILocation(line: 45, column: 20, scope: !7)
!59 = !DILocation(line: 51, column: 46, scope: !7)
!60 = !DILocation(line: 52, column: 20, scope: !7)
!61 = !DILocation(line: 58, column: 46, scope: !7)
!62 = !DILocation(line: 59, column: 20, scope: !7)
!63 = !DILocation(line: 61, column: 36, scope: !7)
!64 = !DILocation(line: 62, column: 20, scope: !7)
!65 = !DILocation(line: 64, column: 43, scope: !7)
!66 = !DILocation(line: 65, column: 20, scope: !7)
!67 = !DILocation(line: 71, column: 43, scope: !7)
!68 = !DILocation(line: 72, column: 20, scope: !7)
!69 = !DILocation(line: 74, column: 44, scope: !7)
!70 = !DILocation(line: 75, column: 20, scope: !7)
!71 = !DILocation(line: 77, column: 44, scope: !7)
!72 = !DILocation(line: 78, column: 20, scope: !7)
!73 = !DILocation(line: 79, column: 220, scope: !7)
!74 = !DILocation(line: 79, column: 216, scope: !7)
!75 = !DILocation(line: 79, column: 208, scope: !7)
!76 = !DILocation(line: 79, column: 239, scope: !7)
!77 = !DILocation(line: 79, column: 227, scope: !7)
!78 = !DILocation(line: 79, column: 389, scope: !7)
!79 = !DILocation(line: 79, column: 201, scope: !7)
!80 = !DILocation(line: 79, column: 144, scope: !7)
!81 = !DILocation(line: 80, column: 20, scope: !7)
!82 = !DILocation(line: 81, column: 25, scope: !7)
!83 = !DILocation(line: 81, column: 37, scope: !7)
!84 = !DILocation(line: 81, column: 4, scope: !7)
