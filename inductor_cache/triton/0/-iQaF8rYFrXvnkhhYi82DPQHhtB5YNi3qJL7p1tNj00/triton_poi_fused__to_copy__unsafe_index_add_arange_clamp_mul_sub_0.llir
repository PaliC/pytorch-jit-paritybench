; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__to_copy__unsafe_index_add_arange_clamp_mul_sub_0(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %5 = shl i32 %4, 8, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 1, !dbg !12
  %8 = and i32 %7, 254, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = or disjoint i32 %9, 1, !dbg !13
  %11 = icmp slt i32 %9, 256, !dbg !14
  %.frozen = freeze i32 %9, !dbg !15
  %12 = sdiv i32 %.frozen, 4, !dbg !15
  %13 = srem i32 %12, 4, !dbg !16
  %14 = mul i32 %12, 4, !dbg !17
  %.decomposed = sub i32 %.frozen, %14, !dbg !17
  %15 = srem i32 %10, 4, !dbg !17
  %16 = sdiv i32 %9, 16, !dbg !18
  %17 = sitofp i32 %13 to float, !dbg !19
  %18 = fadd float %17, 5.000000e-01, !dbg !20
  %19 = fadd float %18, -5.000000e-01, !dbg !21
  %20 = fcmp ogt float %19, 0.000000e+00, !dbg !22
  %21 = select i1 %20, float %19, float 0.000000e+00, !dbg !26
  %22 = fptosi float %21 to i32, !dbg !27
  %23 = tail call i32 @llvm.smin.i32(i32 %22, i32 2), !dbg !28
  %narrow = add nsw i32 %23, 1, !dbg !28
  %24 = sext i32 %narrow to i64, !dbg !28
  %25 = sitofp i32 %.decomposed to float, !dbg !30
  %26 = sitofp i32 %15 to float, !dbg !30
  %27 = fadd float %25, 5.000000e-01, !dbg !31
  %28 = fadd float %26, 5.000000e-01, !dbg !31
  %29 = fadd float %27, -5.000000e-01, !dbg !32
  %30 = fadd float %28, -5.000000e-01, !dbg !32
  %31 = fcmp ogt float %29, 0.000000e+00, !dbg !33
  %32 = fcmp ogt float %30, 0.000000e+00, !dbg !33
  %33 = select i1 %31, float %29, float 0.000000e+00, !dbg !35
  %34 = select i1 %32, float %30, float 0.000000e+00, !dbg !35
  %35 = fptosi float %33 to i32, !dbg !36
  %36 = fptosi float %34 to i32, !dbg !36
  %37 = sext i32 %35 to i64, !dbg !37
  %38 = sext i32 %36 to i64, !dbg !37
  %39 = tail call i64 @llvm.smin.i64(i64 %37, i64 2), !dbg !38
  %40 = tail call i64 @llvm.smin.i64(i64 %38, i64 2), !dbg !38
  %41 = shl nsw i64 %24, 2, !dbg !40
  %42 = shl nsw i32 %16, 4, !dbg !41
  %43 = sext i32 %42 to i64, !dbg !42
  %44 = getelementptr float, ptr addrspace(1) %1, i64 %39, !dbg !43
  %45 = getelementptr i8, ptr addrspace(1) %44, i64 4, !dbg !43
  %46 = getelementptr float, ptr addrspace(1) %45, i64 %41, !dbg !43
  %47 = getelementptr float, ptr addrspace(1) %46, i64 %43, !dbg !43
  %48 = getelementptr float, ptr addrspace(1) %1, i64 %40, !dbg !43
  %49 = getelementptr i8, ptr addrspace(1) %48, i64 4, !dbg !43
  %50 = getelementptr float, ptr addrspace(1) %49, i64 %41, !dbg !43
  %51 = getelementptr float, ptr addrspace(1) %50, i64 %43, !dbg !43
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 %11) #2, !dbg !44
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 %11) #2, !dbg !44
  %54 = getelementptr float, ptr addrspace(1) %1, i64 %41, !dbg !45
  %55 = getelementptr float, ptr addrspace(1) %54, i64 %37, !dbg !45
  %56 = getelementptr float, ptr addrspace(1) %55, i64 %43, !dbg !45
  %57 = getelementptr float, ptr addrspace(1) %54, i64 %38, !dbg !45
  %58 = getelementptr float, ptr addrspace(1) %57, i64 %43, !dbg !45
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 %11) #2, !dbg !46
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %11) #2, !dbg !46
  %61 = sitofp i32 %35 to float, !dbg !47
  %62 = sitofp i32 %36 to float, !dbg !47
  %63 = fsub float %33, %61, !dbg !48
  %64 = fsub float %34, %62, !dbg !48
  %65 = fcmp ogt float %63, 0.000000e+00, !dbg !49
  %66 = fcmp ogt float %64, 0.000000e+00, !dbg !49
  %67 = select i1 %65, float %63, float 0.000000e+00, !dbg !51
  %68 = select i1 %66, float %64, float 0.000000e+00, !dbg !51
  %69 = fcmp olt float %67, 1.000000e+00, !dbg !52
  %70 = fcmp olt float %68, 1.000000e+00, !dbg !52
  %71 = select i1 %69, float %67, float 1.000000e+00, !dbg !54
  %72 = select i1 %70, float %68, float 1.000000e+00, !dbg !54
  %73 = shl i32 %22, 2, !dbg !55
  %74 = add i32 %73, %42, !dbg !56
  %75 = add i32 %74, %35, !dbg !57
  %76 = add i32 %74, %36, !dbg !57
  %77 = sext i32 %75 to i64, !dbg !58
  %78 = getelementptr float, ptr addrspace(1) %1, i64 %77, !dbg !58
  %79 = sext i32 %76 to i64, !dbg !58
  %80 = getelementptr float, ptr addrspace(1) %1, i64 %79, !dbg !58
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 %11) #2, !dbg !59
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %80, i1 %11) #2, !dbg !59
  %83 = sext i32 %73 to i64, !dbg !60
  %84 = getelementptr float, ptr addrspace(1) %45, i64 %83, !dbg !61
  %85 = getelementptr float, ptr addrspace(1) %84, i64 %43, !dbg !61
  %86 = getelementptr float, ptr addrspace(1) %49, i64 %83, !dbg !61
  %87 = getelementptr float, ptr addrspace(1) %86, i64 %43, !dbg !61
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 %11) #2, !dbg !62
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %87, i1 %11) #2, !dbg !62
  %90 = insertelement <2 x i32> poison, i32 %59, i64 0, !dbg !46
  %91 = insertelement <2 x i32> %90, i32 %81, i64 1, !dbg !46
  %92 = bitcast <2 x i32> %91 to <2 x float>, !dbg !46
  %93 = insertelement <2 x i32> poison, i32 %52, i64 0, !dbg !44
  %94 = insertelement <2 x i32> %93, i32 %88, i64 1, !dbg !44
  %95 = bitcast <2 x i32> %94 to <2 x float>, !dbg !44
  %96 = fsub <2 x float> %95, %92, !dbg !63
  %97 = insertelement <2 x float> poison, float %71, i64 0, !dbg !64
  %98 = shufflevector <2 x float> %97, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !64
  %99 = fmul <2 x float> %96, %98, !dbg !64
  %100 = fadd <2 x float> %99, %92, !dbg !65
  %101 = insertelement <2 x i32> poison, i32 %60, i64 0, !dbg !46
  %102 = insertelement <2 x i32> %101, i32 %82, i64 1, !dbg !46
  %103 = bitcast <2 x i32> %102 to <2 x float>, !dbg !46
  %104 = insertelement <2 x i32> poison, i32 %53, i64 0, !dbg !44
  %105 = insertelement <2 x i32> %104, i32 %89, i64 1, !dbg !44
  %106 = bitcast <2 x i32> %105 to <2 x float>, !dbg !44
  %107 = fsub <2 x float> %106, %103, !dbg !63
  %108 = insertelement <2 x float> poison, float %72, i64 0, !dbg !64
  %109 = shufflevector <2 x float> %108, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !64
  %110 = fmul <2 x float> %109, %107, !dbg !64
  %111 = fadd <2 x float> %110, %103, !dbg !65
  %112 = extractelement <2 x float> %100, i64 0, !dbg !66
  %113 = extractelement <2 x float> %100, i64 1, !dbg !67
  %114 = fsub float %112, %113, !dbg !66
  %115 = extractelement <2 x float> %111, i64 0, !dbg !66
  %116 = extractelement <2 x float> %111, i64 1, !dbg !67
  %117 = fsub float %115, %116, !dbg !66
  %118 = sitofp i32 %22 to float, !dbg !68
  %119 = fsub float %21, %118, !dbg !69
  %120 = fcmp ogt float %119, 0.000000e+00, !dbg !70
  %121 = select i1 %120, float %119, float 0.000000e+00, !dbg !72
  %122 = fcmp olt float %121, 1.000000e+00, !dbg !73
  %123 = select i1 %122, float %121, float 1.000000e+00, !dbg !75
  %124 = fmul float %123, %114, !dbg !76
  %125 = fmul float %117, %123, !dbg !76
  %126 = fadd float %113, %124, !dbg !67
  %127 = fadd float %116, %125, !dbg !67
  %128 = sext i32 %9 to i64, !dbg !77
  %129 = getelementptr float, ptr addrspace(1) %0, i64 %128, !dbg !77
  %130 = bitcast float %126 to i32, !dbg !78
  %131 = bitcast float %127 to i32, !dbg !78
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %130, i32 %131, ptr addrspace(1) %129, i1 %11) #2, !dbg !78
  ret void, !dbg !79
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.smin.i64(i64, i64) #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c45qhuvwbidyjpzh32asnbwjrdepscuhbaygpfydziqahfsukrqo.py", directory: "inductor_cache/45")
!4 = !{ptr @triton_poi_fused__to_copy__unsafe_index_add_arange_clamp_mul_sub_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__to_copy__unsafe_index_add_arange_clamp_mul_sub_0, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__to_copy__unsafe_index_add_arange_clamp_mul_sub_0", linkageName: "triton_poi_fused__to_copy__unsafe_index_add_arange_clamp_mul_sub_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 26, scope: !7)
!17 = !DILocation(line: 25, column: 19, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 29, column: 19, scope: !7)
!20 = !DILocation(line: 31, column: 18, scope: !7)
!21 = !DILocation(line: 34, column: 18, scope: !7)
!22 = !DILocation(line: 118, column: 15, scope: !23, inlinedAt: !25)
!23 = distinct !DILexicalBlockFile(scope: !7, file: !24, discriminator: 0)
!24 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!25 = !DILocation(line: 36, column: 40, scope: !7)
!26 = !DILocation(line: 121, column: 29, scope: !23, inlinedAt: !25)
!27 = !DILocation(line: 37, column: 19, scope: !7)
!28 = !DILocation(line: 113, column: 29, scope: !23, inlinedAt: !29)
!29 = !DILocation(line: 41, column: 42, scope: !7)
!30 = !DILocation(line: 43, column: 21, scope: !7)
!31 = !DILocation(line: 44, column: 20, scope: !7)
!32 = !DILocation(line: 46, column: 20, scope: !7)
!33 = !DILocation(line: 118, column: 15, scope: !23, inlinedAt: !34)
!34 = !DILocation(line: 47, column: 42, scope: !7)
!35 = !DILocation(line: 121, column: 29, scope: !23, inlinedAt: !34)
!36 = !DILocation(line: 48, column: 21, scope: !7)
!37 = !DILocation(line: 49, column: 20, scope: !7)
!38 = !DILocation(line: 113, column: 29, scope: !23, inlinedAt: !39)
!39 = !DILocation(line: 50, column: 42, scope: !7)
!40 = !DILocation(line: 51, column: 41, scope: !7)
!41 = !DILocation(line: 51, column: 52, scope: !7)
!42 = !DILocation(line: 51, column: 49, scope: !7)
!43 = !DILocation(line: 51, column: 31, scope: !7)
!44 = !DILocation(line: 51, column: 57, scope: !7)
!45 = !DILocation(line: 52, column: 31, scope: !7)
!46 = !DILocation(line: 52, column: 57, scope: !7)
!47 = !DILocation(line: 54, column: 21, scope: !7)
!48 = !DILocation(line: 55, column: 20, scope: !7)
!49 = !DILocation(line: 118, column: 15, scope: !23, inlinedAt: !50)
!50 = !DILocation(line: 56, column: 42, scope: !7)
!51 = !DILocation(line: 121, column: 29, scope: !23, inlinedAt: !50)
!52 = !DILocation(line: 110, column: 15, scope: !23, inlinedAt: !53)
!53 = !DILocation(line: 57, column: 42, scope: !7)
!54 = !DILocation(line: 113, column: 29, scope: !23, inlinedAt: !53)
!55 = !DILocation(line: 60, column: 41, scope: !7)
!56 = !DILocation(line: 60, column: 39, scope: !7)
!57 = !DILocation(line: 60, column: 48, scope: !7)
!58 = !DILocation(line: 60, column: 31, scope: !7)
!59 = !DILocation(line: 60, column: 56, scope: !7)
!60 = !DILocation(line: 61, column: 39, scope: !7)
!61 = !DILocation(line: 61, column: 31, scope: !7)
!62 = !DILocation(line: 61, column: 56, scope: !7)
!63 = !DILocation(line: 53, column: 20, scope: !7)
!64 = !DILocation(line: 58, column: 20, scope: !7)
!65 = !DILocation(line: 59, column: 20, scope: !7)
!66 = !DILocation(line: 65, column: 20, scope: !7)
!67 = !DILocation(line: 71, column: 20, scope: !7)
!68 = !DILocation(line: 66, column: 20, scope: !7)
!69 = !DILocation(line: 67, column: 19, scope: !7)
!70 = !DILocation(line: 118, column: 15, scope: !23, inlinedAt: !71)
!71 = !DILocation(line: 68, column: 42, scope: !7)
!72 = !DILocation(line: 121, column: 29, scope: !23, inlinedAt: !71)
!73 = !DILocation(line: 110, column: 15, scope: !23, inlinedAt: !74)
!74 = !DILocation(line: 69, column: 42, scope: !7)
!75 = !DILocation(line: 113, column: 29, scope: !23, inlinedAt: !74)
!76 = !DILocation(line: 70, column: 20, scope: !7)
!77 = !DILocation(line: 72, column: 28, scope: !7)
!78 = !DILocation(line: 72, column: 40, scope: !7)
!79 = !DILocation(line: 72, column: 4, scope: !7)
