; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_native_group_norm_21(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %10 = shl i32 %9, 3, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = and i32 %11, 31, !dbg !12
  %13 = shl i32 %11, 2, !dbg !12
  %14 = and i32 %13, 4, !dbg !12
  %15 = and i32 %11, 7, !dbg !12
  %16 = or disjoint i32 %10, %14, !dbg !13
  %17 = or disjoint i32 %10, %15, !dbg !13
  %18 = icmp slt i32 %16, 192, !dbg !14
  %19 = icmp slt i32 %17, 192, !dbg !14
  %20 = lshr i32 %11, 5, !dbg !15
  %21 = lshr i32 %11, 1, !dbg !15
  %22 = and i32 %21, 63, !dbg !15
  %.frozen = freeze i32 %16, !dbg !16
  %23 = sdiv i32 %.frozen, 48, !dbg !16
  %24 = mul i32 %23, 48, !dbg !17
  %.decomposed = sub i32 %.frozen, %24, !dbg !17
  %25 = mul nuw nsw i32 %22, 48, !dbg !18
  %26 = add nsw i32 %.decomposed, %25, !dbg !19
  %27 = mul i32 %23, 3072, !dbg !20
  %28 = add i32 %26, %27, !dbg !21
  %29 = sext i32 %28 to i64, !dbg !22
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !22
  %31 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %30, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18) #3, !dbg !23
  %32 = extractvalue { i32, i32, i32, i32 } %31, 0, !dbg !23
  %33 = extractvalue { i32, i32, i32, i32 } %31, 1, !dbg !23
  %34 = extractvalue { i32, i32, i32, i32 } %31, 2, !dbg !23
  %35 = extractvalue { i32, i32, i32, i32 } %31, 3, !dbg !23
  %36 = bitcast i32 %32 to float, !dbg !23
  %37 = bitcast i32 %33 to float, !dbg !23
  %38 = bitcast i32 %34 to float, !dbg !23
  %39 = bitcast i32 %35 to float, !dbg !23
  %40 = getelementptr float, ptr addrspace(1) %1, i64 %29, !dbg !24
  %41 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %40, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18) #3, !dbg !25
  %42 = extractvalue { i32, i32, i32, i32 } %41, 0, !dbg !25
  %43 = extractvalue { i32, i32, i32, i32 } %41, 1, !dbg !25
  %44 = extractvalue { i32, i32, i32, i32 } %41, 2, !dbg !25
  %45 = extractvalue { i32, i32, i32, i32 } %41, 3, !dbg !25
  %46 = bitcast i32 %42 to float, !dbg !25
  %47 = bitcast i32 %43 to float, !dbg !25
  %48 = bitcast i32 %44 to float, !dbg !25
  %49 = bitcast i32 %45 to float, !dbg !25
  %50 = getelementptr float, ptr addrspace(1) %2, i64 %29, !dbg !26
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %50, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18, i32 0, i1 %18) #3, !dbg !27
  %52 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !27
  %53 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !27
  %54 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !27
  %55 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !27
  %56 = bitcast i32 %52 to float, !dbg !27
  %57 = bitcast i32 %53 to float, !dbg !27
  %58 = bitcast i32 %54 to float, !dbg !27
  %59 = bitcast i32 %55 to float, !dbg !27
  %60 = select i1 %18, float %36, float 0.000000e+00, !dbg !28
  %61 = select i1 %18, float %37, float 0.000000e+00, !dbg !28
  %62 = select i1 %18, float %38, float 0.000000e+00, !dbg !28
  %63 = select i1 %18, float %39, float 0.000000e+00, !dbg !28
  %64 = select i1 %18, float %46, float 0.000000e+00, !dbg !29
  %65 = select i1 %18, float %47, float 0.000000e+00, !dbg !29
  %66 = select i1 %18, float %48, float 0.000000e+00, !dbg !29
  %67 = select i1 %18, float %49, float 0.000000e+00, !dbg !29
  %68 = select i1 %18, float %56, float 0.000000e+00, !dbg !30
  %69 = select i1 %18, float %57, float 0.000000e+00, !dbg !30
  %70 = select i1 %18, float %58, float 0.000000e+00, !dbg !30
  %71 = select i1 %18, float %59, float 0.000000e+00, !dbg !30
  %72 = bitcast float %60 to i32, !dbg !31
  %73 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %72, i32 16, i32 31), !dbg !31
  %74 = bitcast i32 %73 to float, !dbg !31
  %75 = bitcast float %64 to i32, !dbg !31
  %76 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %75, i32 16, i32 31), !dbg !31
  %77 = bitcast i32 %76 to float, !dbg !31
  %78 = bitcast float %68 to i32, !dbg !31
  %79 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %78, i32 16, i32 31), !dbg !31
  %80 = bitcast i32 %79 to float, !dbg !31
  %81 = fsub float %74, %60, !dbg !35
  %82 = fadd float %68, %80, !dbg !37
  %83 = fcmp oeq float %82, 0.000000e+00, !dbg !38
  %84 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %80, float %82) #3, !dbg !39
  %85 = select i1 %83, float 0.000000e+00, float %84, !dbg !40
  %86 = fmul float %81, %85, !dbg !41
  %87 = fadd float %60, %86, !dbg !42
  %88 = fadd float %64, %77, !dbg !43
  %89 = fmul float %81, %81, !dbg !44
  %90 = fmul float %68, %89, !dbg !45
  %91 = fmul float %90, %85, !dbg !46
  %92 = fadd float %88, %91, !dbg !47
  %93 = bitcast float %87 to i32, !dbg !31
  %94 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %93, i32 8, i32 31), !dbg !31
  %95 = bitcast i32 %94 to float, !dbg !31
  %96 = bitcast float %92 to i32, !dbg !31
  %97 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %96, i32 8, i32 31), !dbg !31
  %98 = bitcast i32 %97 to float, !dbg !31
  %99 = bitcast float %82 to i32, !dbg !31
  %100 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %99, i32 8, i32 31), !dbg !31
  %101 = bitcast i32 %100 to float, !dbg !31
  %102 = fsub float %95, %87, !dbg !35
  %103 = fadd float %82, %101, !dbg !37
  %104 = fcmp oeq float %103, 0.000000e+00, !dbg !38
  %105 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %101, float %103) #3, !dbg !39
  %106 = select i1 %104, float 0.000000e+00, float %105, !dbg !40
  %107 = fmul float %102, %106, !dbg !41
  %108 = fadd float %87, %107, !dbg !42
  %109 = fadd float %92, %98, !dbg !43
  %110 = fmul float %102, %102, !dbg !44
  %111 = fmul float %82, %110, !dbg !45
  %112 = fmul float %106, %111, !dbg !46
  %113 = fadd float %109, %112, !dbg !47
  %114 = bitcast float %108 to i32, !dbg !31
  %115 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %114, i32 4, i32 31), !dbg !31
  %116 = bitcast i32 %115 to float, !dbg !31
  %117 = bitcast float %113 to i32, !dbg !31
  %118 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %117, i32 4, i32 31), !dbg !31
  %119 = bitcast i32 %118 to float, !dbg !31
  %120 = bitcast float %103 to i32, !dbg !31
  %121 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %120, i32 4, i32 31), !dbg !31
  %122 = bitcast i32 %121 to float, !dbg !31
  %123 = fsub float %116, %108, !dbg !35
  %124 = fadd float %103, %122, !dbg !37
  %125 = fcmp oeq float %124, 0.000000e+00, !dbg !38
  %126 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %122, float %124) #3, !dbg !39
  %127 = select i1 %125, float 0.000000e+00, float %126, !dbg !40
  %128 = fmul float %123, %127, !dbg !41
  %129 = fadd float %108, %128, !dbg !42
  %130 = fadd float %113, %119, !dbg !43
  %131 = fmul float %123, %123, !dbg !44
  %132 = fmul float %103, %131, !dbg !45
  %133 = fmul float %127, %132, !dbg !46
  %134 = fadd float %130, %133, !dbg !47
  %135 = bitcast float %129 to i32, !dbg !31
  %136 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %135, i32 2, i32 31), !dbg !31
  %137 = bitcast i32 %136 to float, !dbg !31
  %138 = bitcast float %134 to i32, !dbg !31
  %139 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %138, i32 2, i32 31), !dbg !31
  %140 = bitcast i32 %139 to float, !dbg !31
  %141 = bitcast float %124 to i32, !dbg !31
  %142 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %141, i32 2, i32 31), !dbg !31
  %143 = bitcast i32 %142 to float, !dbg !31
  %144 = fsub float %137, %129, !dbg !35
  %145 = fadd float %124, %143, !dbg !37
  %146 = fcmp oeq float %145, 0.000000e+00, !dbg !38
  %147 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %143, float %145) #3, !dbg !39
  %148 = select i1 %146, float 0.000000e+00, float %147, !dbg !40
  %149 = fmul float %144, %148, !dbg !41
  %150 = fadd float %129, %149, !dbg !42
  %151 = fadd float %134, %140, !dbg !43
  %152 = fmul float %144, %144, !dbg !44
  %153 = fmul float %124, %152, !dbg !45
  %154 = fmul float %148, %153, !dbg !46
  %155 = fadd float %151, %154, !dbg !47
  %156 = bitcast float %61 to i32, !dbg !31
  %157 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %156, i32 16, i32 31), !dbg !31
  %158 = bitcast i32 %157 to float, !dbg !31
  %159 = bitcast float %65 to i32, !dbg !31
  %160 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %159, i32 16, i32 31), !dbg !31
  %161 = bitcast i32 %160 to float, !dbg !31
  %162 = bitcast float %69 to i32, !dbg !31
  %163 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %162, i32 16, i32 31), !dbg !31
  %164 = bitcast i32 %163 to float, !dbg !31
  %165 = fsub float %158, %61, !dbg !35
  %166 = fadd float %69, %164, !dbg !37
  %167 = fcmp oeq float %166, 0.000000e+00, !dbg !38
  %168 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %164, float %166) #3, !dbg !39
  %169 = select i1 %167, float 0.000000e+00, float %168, !dbg !40
  %170 = fmul float %165, %169, !dbg !41
  %171 = fadd float %61, %170, !dbg !42
  %172 = fadd float %65, %161, !dbg !43
  %173 = fmul float %165, %165, !dbg !44
  %174 = fmul float %69, %173, !dbg !45
  %175 = fmul float %174, %169, !dbg !46
  %176 = fadd float %172, %175, !dbg !47
  %177 = bitcast float %171 to i32, !dbg !31
  %178 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %177, i32 8, i32 31), !dbg !31
  %179 = bitcast i32 %178 to float, !dbg !31
  %180 = bitcast float %176 to i32, !dbg !31
  %181 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %180, i32 8, i32 31), !dbg !31
  %182 = bitcast i32 %181 to float, !dbg !31
  %183 = bitcast float %166 to i32, !dbg !31
  %184 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %183, i32 8, i32 31), !dbg !31
  %185 = bitcast i32 %184 to float, !dbg !31
  %186 = fsub float %179, %171, !dbg !35
  %187 = fadd float %166, %185, !dbg !37
  %188 = fcmp oeq float %187, 0.000000e+00, !dbg !38
  %189 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %185, float %187) #3, !dbg !39
  %190 = select i1 %188, float 0.000000e+00, float %189, !dbg !40
  %191 = fmul float %186, %190, !dbg !41
  %192 = fadd float %171, %191, !dbg !42
  %193 = fadd float %176, %182, !dbg !43
  %194 = fmul float %186, %186, !dbg !44
  %195 = fmul float %166, %194, !dbg !45
  %196 = fmul float %190, %195, !dbg !46
  %197 = fadd float %193, %196, !dbg !47
  %198 = bitcast float %192 to i32, !dbg !31
  %199 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %198, i32 4, i32 31), !dbg !31
  %200 = bitcast i32 %199 to float, !dbg !31
  %201 = bitcast float %197 to i32, !dbg !31
  %202 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %201, i32 4, i32 31), !dbg !31
  %203 = bitcast i32 %202 to float, !dbg !31
  %204 = bitcast float %187 to i32, !dbg !31
  %205 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %204, i32 4, i32 31), !dbg !31
  %206 = bitcast i32 %205 to float, !dbg !31
  %207 = fsub float %200, %192, !dbg !35
  %208 = fadd float %187, %206, !dbg !37
  %209 = fcmp oeq float %208, 0.000000e+00, !dbg !38
  %210 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %206, float %208) #3, !dbg !39
  %211 = select i1 %209, float 0.000000e+00, float %210, !dbg !40
  %212 = fmul float %207, %211, !dbg !41
  %213 = fadd float %192, %212, !dbg !42
  %214 = fadd float %197, %203, !dbg !43
  %215 = fmul float %207, %207, !dbg !44
  %216 = fmul float %187, %215, !dbg !45
  %217 = fmul float %211, %216, !dbg !46
  %218 = fadd float %214, %217, !dbg !47
  %219 = bitcast float %213 to i32, !dbg !31
  %220 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %219, i32 2, i32 31), !dbg !31
  %221 = bitcast i32 %220 to float, !dbg !31
  %222 = bitcast float %218 to i32, !dbg !31
  %223 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %222, i32 2, i32 31), !dbg !31
  %224 = bitcast i32 %223 to float, !dbg !31
  %225 = bitcast float %208 to i32, !dbg !31
  %226 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %225, i32 2, i32 31), !dbg !31
  %227 = bitcast i32 %226 to float, !dbg !31
  %228 = fsub float %221, %213, !dbg !35
  %229 = fadd float %208, %227, !dbg !37
  %230 = fcmp oeq float %229, 0.000000e+00, !dbg !38
  %231 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %227, float %229) #3, !dbg !39
  %232 = select i1 %230, float 0.000000e+00, float %231, !dbg !40
  %233 = fmul float %228, %232, !dbg !41
  %234 = fadd float %213, %233, !dbg !42
  %235 = fadd float %218, %224, !dbg !43
  %236 = fmul float %228, %228, !dbg !44
  %237 = fmul float %208, %236, !dbg !45
  %238 = fmul float %232, %237, !dbg !46
  %239 = fadd float %235, %238, !dbg !47
  %240 = bitcast float %62 to i32, !dbg !31
  %241 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %240, i32 16, i32 31), !dbg !31
  %242 = bitcast i32 %241 to float, !dbg !31
  %243 = bitcast float %66 to i32, !dbg !31
  %244 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %243, i32 16, i32 31), !dbg !31
  %245 = bitcast i32 %244 to float, !dbg !31
  %246 = bitcast float %70 to i32, !dbg !31
  %247 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %246, i32 16, i32 31), !dbg !31
  %248 = bitcast i32 %247 to float, !dbg !31
  %249 = fsub float %242, %62, !dbg !35
  %250 = fadd float %70, %248, !dbg !37
  %251 = fcmp oeq float %250, 0.000000e+00, !dbg !38
  %252 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %248, float %250) #3, !dbg !39
  %253 = select i1 %251, float 0.000000e+00, float %252, !dbg !40
  %254 = fmul float %249, %253, !dbg !41
  %255 = fadd float %62, %254, !dbg !42
  %256 = fadd float %66, %245, !dbg !43
  %257 = fmul float %249, %249, !dbg !44
  %258 = fmul float %70, %257, !dbg !45
  %259 = fmul float %258, %253, !dbg !46
  %260 = fadd float %256, %259, !dbg !47
  %261 = bitcast float %255 to i32, !dbg !31
  %262 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %261, i32 8, i32 31), !dbg !31
  %263 = bitcast i32 %262 to float, !dbg !31
  %264 = bitcast float %260 to i32, !dbg !31
  %265 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %264, i32 8, i32 31), !dbg !31
  %266 = bitcast i32 %265 to float, !dbg !31
  %267 = bitcast float %250 to i32, !dbg !31
  %268 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %267, i32 8, i32 31), !dbg !31
  %269 = bitcast i32 %268 to float, !dbg !31
  %270 = fsub float %263, %255, !dbg !35
  %271 = fadd float %250, %269, !dbg !37
  %272 = fcmp oeq float %271, 0.000000e+00, !dbg !38
  %273 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %269, float %271) #3, !dbg !39
  %274 = select i1 %272, float 0.000000e+00, float %273, !dbg !40
  %275 = fmul float %270, %274, !dbg !41
  %276 = fadd float %255, %275, !dbg !42
  %277 = fadd float %260, %266, !dbg !43
  %278 = fmul float %270, %270, !dbg !44
  %279 = fmul float %250, %278, !dbg !45
  %280 = fmul float %274, %279, !dbg !46
  %281 = fadd float %277, %280, !dbg !47
  %282 = bitcast float %276 to i32, !dbg !31
  %283 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %282, i32 4, i32 31), !dbg !31
  %284 = bitcast i32 %283 to float, !dbg !31
  %285 = bitcast float %281 to i32, !dbg !31
  %286 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %285, i32 4, i32 31), !dbg !31
  %287 = bitcast i32 %286 to float, !dbg !31
  %288 = bitcast float %271 to i32, !dbg !31
  %289 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %288, i32 4, i32 31), !dbg !31
  %290 = bitcast i32 %289 to float, !dbg !31
  %291 = fsub float %284, %276, !dbg !35
  %292 = fadd float %271, %290, !dbg !37
  %293 = fcmp oeq float %292, 0.000000e+00, !dbg !38
  %294 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %290, float %292) #3, !dbg !39
  %295 = select i1 %293, float 0.000000e+00, float %294, !dbg !40
  %296 = fmul float %291, %295, !dbg !41
  %297 = fadd float %276, %296, !dbg !42
  %298 = fadd float %281, %287, !dbg !43
  %299 = fmul float %291, %291, !dbg !44
  %300 = fmul float %271, %299, !dbg !45
  %301 = fmul float %295, %300, !dbg !46
  %302 = fadd float %298, %301, !dbg !47
  %303 = bitcast float %297 to i32, !dbg !31
  %304 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %303, i32 2, i32 31), !dbg !31
  %305 = bitcast i32 %304 to float, !dbg !31
  %306 = bitcast float %302 to i32, !dbg !31
  %307 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %306, i32 2, i32 31), !dbg !31
  %308 = bitcast i32 %307 to float, !dbg !31
  %309 = bitcast float %292 to i32, !dbg !31
  %310 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %309, i32 2, i32 31), !dbg !31
  %311 = bitcast i32 %310 to float, !dbg !31
  %312 = fsub float %305, %297, !dbg !35
  %313 = fadd float %292, %311, !dbg !37
  %314 = fcmp oeq float %313, 0.000000e+00, !dbg !38
  %315 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %311, float %313) #3, !dbg !39
  %316 = select i1 %314, float 0.000000e+00, float %315, !dbg !40
  %317 = fmul float %312, %316, !dbg !41
  %318 = fadd float %297, %317, !dbg !42
  %319 = fadd float %302, %308, !dbg !43
  %320 = fmul float %312, %312, !dbg !44
  %321 = fmul float %292, %320, !dbg !45
  %322 = fmul float %316, %321, !dbg !46
  %323 = fadd float %319, %322, !dbg !47
  %324 = bitcast float %63 to i32, !dbg !31
  %325 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %324, i32 16, i32 31), !dbg !31
  %326 = bitcast i32 %325 to float, !dbg !31
  %327 = bitcast float %67 to i32, !dbg !31
  %328 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %327, i32 16, i32 31), !dbg !31
  %329 = bitcast i32 %328 to float, !dbg !31
  %330 = bitcast float %71 to i32, !dbg !31
  %331 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %330, i32 16, i32 31), !dbg !31
  %332 = bitcast i32 %331 to float, !dbg !31
  %333 = fsub float %326, %63, !dbg !35
  %334 = fadd float %71, %332, !dbg !37
  %335 = fcmp oeq float %334, 0.000000e+00, !dbg !38
  %336 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %332, float %334) #3, !dbg !39
  %337 = select i1 %335, float 0.000000e+00, float %336, !dbg !40
  %338 = fmul float %333, %337, !dbg !41
  %339 = fadd float %63, %338, !dbg !42
  %340 = fadd float %67, %329, !dbg !43
  %341 = fmul float %333, %333, !dbg !44
  %342 = fmul float %71, %341, !dbg !45
  %343 = fmul float %342, %337, !dbg !46
  %344 = fadd float %340, %343, !dbg !47
  %345 = bitcast float %339 to i32, !dbg !31
  %346 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %345, i32 8, i32 31), !dbg !31
  %347 = bitcast i32 %346 to float, !dbg !31
  %348 = bitcast float %344 to i32, !dbg !31
  %349 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %348, i32 8, i32 31), !dbg !31
  %350 = bitcast i32 %349 to float, !dbg !31
  %351 = bitcast float %334 to i32, !dbg !31
  %352 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %351, i32 8, i32 31), !dbg !31
  %353 = bitcast i32 %352 to float, !dbg !31
  %354 = fsub float %347, %339, !dbg !35
  %355 = fadd float %334, %353, !dbg !37
  %356 = fcmp oeq float %355, 0.000000e+00, !dbg !38
  %357 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %353, float %355) #3, !dbg !39
  %358 = select i1 %356, float 0.000000e+00, float %357, !dbg !40
  %359 = fmul float %354, %358, !dbg !41
  %360 = fadd float %339, %359, !dbg !42
  %361 = fadd float %344, %350, !dbg !43
  %362 = fmul float %354, %354, !dbg !44
  %363 = fmul float %334, %362, !dbg !45
  %364 = fmul float %358, %363, !dbg !46
  %365 = fadd float %361, %364, !dbg !47
  %366 = bitcast float %360 to i32, !dbg !31
  %367 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %366, i32 4, i32 31), !dbg !31
  %368 = bitcast i32 %367 to float, !dbg !31
  %369 = bitcast float %365 to i32, !dbg !31
  %370 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %369, i32 4, i32 31), !dbg !31
  %371 = bitcast i32 %370 to float, !dbg !31
  %372 = bitcast float %355 to i32, !dbg !31
  %373 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %372, i32 4, i32 31), !dbg !31
  %374 = bitcast i32 %373 to float, !dbg !31
  %375 = fsub float %368, %360, !dbg !35
  %376 = fadd float %355, %374, !dbg !37
  %377 = fcmp oeq float %376, 0.000000e+00, !dbg !38
  %378 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %374, float %376) #3, !dbg !39
  %379 = select i1 %377, float 0.000000e+00, float %378, !dbg !40
  %380 = fmul float %375, %379, !dbg !41
  %381 = fadd float %360, %380, !dbg !42
  %382 = fadd float %365, %371, !dbg !43
  %383 = fmul float %375, %375, !dbg !44
  %384 = fmul float %355, %383, !dbg !45
  %385 = fmul float %379, %384, !dbg !46
  %386 = fadd float %382, %385, !dbg !47
  %387 = bitcast float %381 to i32, !dbg !31
  %388 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %387, i32 2, i32 31), !dbg !31
  %389 = bitcast i32 %388 to float, !dbg !31
  %390 = bitcast float %386 to i32, !dbg !31
  %391 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %390, i32 2, i32 31), !dbg !31
  %392 = bitcast i32 %391 to float, !dbg !31
  %393 = bitcast float %376 to i32, !dbg !31
  %394 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %393, i32 2, i32 31), !dbg !31
  %395 = bitcast i32 %394 to float, !dbg !31
  %396 = fsub float %389, %381, !dbg !35
  %397 = fadd float %376, %395, !dbg !37
  %398 = fcmp oeq float %397, 0.000000e+00, !dbg !38
  %399 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %395, float %397) #3, !dbg !39
  %400 = select i1 %398, float 0.000000e+00, float %399, !dbg !40
  %401 = fmul float %396, %400, !dbg !41
  %402 = fadd float %381, %401, !dbg !42
  %403 = fadd float %386, %392, !dbg !43
  %404 = fmul float %396, %396, !dbg !44
  %405 = fmul float %376, %404, !dbg !45
  %406 = fmul float %400, %405, !dbg !46
  %407 = fadd float %403, %406, !dbg !47
  %408 = icmp samesign ult i32 %12, 2, !dbg !31
  %409 = and i32 %20, 3, !dbg !31
  %410 = shl nuw nsw i32 %14, 2, !dbg !31
  %411 = or disjoint i32 %410, %409, !dbg !31
  %412 = getelementptr float, ptr addrspace(3) @global_smem, i32 %411, !dbg !31
  %413 = bitcast float %150 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %412, <1 x i32> %413, i1 %408) #3, !dbg !31
  %414 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %411, !dbg !31
  %415 = bitcast float %155 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %414, <1 x i32> %415, i1 %408) #3, !dbg !31
  %416 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), i32 %411, !dbg !31
  %417 = bitcast float %145 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %416, <1 x i32> %417, i1 %408) #3, !dbg !31
  %418 = or disjoint i32 %410, 4, !dbg !31
  %419 = or disjoint i32 %418, %409, !dbg !31
  %420 = getelementptr float, ptr addrspace(3) @global_smem, i32 %419, !dbg !31
  %421 = bitcast float %234 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %420, <1 x i32> %421, i1 %408) #3, !dbg !31
  %422 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %419, !dbg !31
  %423 = bitcast float %239 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %422, <1 x i32> %423, i1 %408) #3, !dbg !31
  %424 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), i32 %419, !dbg !31
  %425 = bitcast float %229 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %424, <1 x i32> %425, i1 %408) #3, !dbg !31
  %426 = or disjoint i32 %410, 8, !dbg !31
  %427 = or disjoint i32 %426, %409, !dbg !31
  %428 = getelementptr float, ptr addrspace(3) @global_smem, i32 %427, !dbg !31
  %429 = bitcast float %318 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %428, <1 x i32> %429, i1 %408) #3, !dbg !31
  %430 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %427, !dbg !31
  %431 = bitcast float %323 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %430, <1 x i32> %431, i1 %408) #3, !dbg !31
  %432 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), i32 %427, !dbg !31
  %433 = bitcast float %313 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %432, <1 x i32> %433, i1 %408) #3, !dbg !31
  %434 = or disjoint i32 %410, 12, !dbg !31
  %435 = or disjoint i32 %434, %409, !dbg !31
  %436 = getelementptr float, ptr addrspace(3) @global_smem, i32 %435, !dbg !31
  %437 = bitcast float %402 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %436, <1 x i32> %437, i1 %408) #3, !dbg !31
  %438 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %435, !dbg !31
  %439 = bitcast float %407 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %438, <1 x i32> %439, i1 %408) #3, !dbg !31
  %440 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), i32 %435, !dbg !31
  %441 = bitcast float %397 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %440, <1 x i32> %441, i1 %408) #3, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %442 = icmp slt i32 %11, 32, !dbg !31
  %443 = getelementptr float, ptr addrspace(3) @global_smem, i32 %11, !dbg !31
  %444 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %443, i1 %442) #3, !dbg !31
  %445 = bitcast i32 %444 to float, !dbg !31
  %446 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %11, !dbg !31
  %447 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %446, i1 %442) #3, !dbg !31
  %448 = bitcast i32 %447 to float, !dbg !31
  %449 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), i32 %11, !dbg !31
  %450 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %449, i1 %442) #3, !dbg !31
  %451 = bitcast i32 %450 to float, !dbg !31
  %452 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %444, i32 2, i32 31), !dbg !31
  %453 = bitcast i32 %452 to float, !dbg !31
  %454 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %447, i32 2, i32 31), !dbg !31
  %455 = bitcast i32 %454 to float, !dbg !31
  %456 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %450, i32 2, i32 31), !dbg !31
  %457 = bitcast i32 %456 to float, !dbg !31
  %458 = fsub float %453, %445, !dbg !35
  %459 = fadd float %451, %457, !dbg !37
  %460 = fcmp oeq float %459, 0.000000e+00, !dbg !38
  %461 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %457, float %459) #3, !dbg !39
  %462 = select i1 %460, float 0.000000e+00, float %461, !dbg !40
  %463 = fmul float %458, %462, !dbg !41
  %464 = fadd float %463, %445, !dbg !42
  %465 = fadd float %448, %455, !dbg !43
  %466 = fmul float %458, %458, !dbg !44
  %467 = fmul float %466, %451, !dbg !45
  %468 = fmul float %467, %462, !dbg !46
  %469 = fadd float %465, %468, !dbg !47
  %470 = bitcast float %464 to i32, !dbg !31
  %471 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %470, i32 1, i32 31), !dbg !31
  %472 = bitcast i32 %471 to float, !dbg !31
  %473 = bitcast float %469 to i32, !dbg !31
  %474 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %473, i32 1, i32 31), !dbg !31
  %475 = bitcast i32 %474 to float, !dbg !31
  %476 = bitcast float %459 to i32, !dbg !31
  %477 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %476, i32 1, i32 31), !dbg !31
  %478 = bitcast i32 %477 to float, !dbg !31
  %479 = fsub float %472, %464, !dbg !35
  %480 = fadd float %459, %478, !dbg !37
  %481 = fcmp oeq float %480, 0.000000e+00, !dbg !38
  %482 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %478, float %480) #3, !dbg !39
  %483 = select i1 %481, float 0.000000e+00, float %482, !dbg !40
  %484 = fmul float %479, %483, !dbg !41
  %485 = fadd float %464, %484, !dbg !42
  %486 = fadd float %469, %475, !dbg !43
  %487 = fmul float %479, %479, !dbg !44
  %488 = fmul float %459, %487, !dbg !45
  %489 = fmul float %483, %488, !dbg !46
  %490 = fadd float %486, %489, !dbg !47
  %491 = and i32 %11, 3, !dbg !31
  %492 = icmp eq i32 %491, 0, !dbg !31
  %493 = and i1 %442, %492, !dbg !31
  %494 = bitcast float %485 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %443, <1 x i32> %494, i1 %493) #3, !dbg !31
  %495 = bitcast float %490 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %446, <1 x i32> %495, i1 %493) #3, !dbg !31
  %496 = bitcast float %480 to <1 x i32>, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %449, <1 x i32> %496, i1 %493) #3, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %497 = getelementptr float, ptr addrspace(3) @global_smem, i32 %410, !dbg !31
  %498 = load i32, ptr addrspace(3) %497, align 16, !dbg !31
  %499 = getelementptr float, ptr addrspace(3) @global_smem, i32 %418, !dbg !31
  %500 = load i32, ptr addrspace(3) %499, align 16, !dbg !31
  %501 = getelementptr float, ptr addrspace(3) @global_smem, i32 %426, !dbg !31
  %502 = load i32, ptr addrspace(3) %501, align 16, !dbg !31
  %503 = getelementptr float, ptr addrspace(3) @global_smem, i32 %434, !dbg !31
  %504 = load i32, ptr addrspace(3) %503, align 16, !dbg !31
  %505 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %410, !dbg !31
  %506 = load i32, ptr addrspace(3) %505, align 16, !dbg !31
  %507 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %418, !dbg !31
  %508 = load i32, ptr addrspace(3) %507, align 16, !dbg !31
  %509 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %426, !dbg !31
  %510 = load i32, ptr addrspace(3) %509, align 16, !dbg !31
  %511 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %434, !dbg !31
  %512 = load i32, ptr addrspace(3) %511, align 16, !dbg !31
  %513 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), i32 %410, !dbg !31
  %514 = load i32, ptr addrspace(3) %513, align 16, !dbg !31
  %515 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), i32 %418, !dbg !31
  %516 = load i32, ptr addrspace(3) %515, align 16, !dbg !31
  %517 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), i32 %426, !dbg !31
  %518 = load i32, ptr addrspace(3) %517, align 16, !dbg !31
  %519 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 256), i32 %434, !dbg !31
  %520 = load i32, ptr addrspace(3) %519, align 16, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %521 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !48
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %521, i32 %498, i32 %500, i32 %502, i32 %504, i1 true) #3, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %522 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !48
  %523 = load i32, ptr addrspace(3) %522, align 4, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %521, i32 %506, i32 %508, i32 %510, i32 %512, i1 true) #3, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %524 = load i32, ptr addrspace(3) %522, align 4, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %521, i32 %514, i32 %516, i32 %518, i32 %520, i1 true) #3, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %525 = load i32, ptr addrspace(3) %522, align 4, !dbg !50
  %526 = sext i32 %17 to i64, !dbg !51
  %527 = getelementptr float, ptr addrspace(1) %3, i64 %526, !dbg !51
  %528 = lshr i32 %12, 3, !dbg !52
  %529 = shl nuw nsw i32 %409, 2, !dbg !52
  %530 = or disjoint i32 %529, %528, !dbg !52
  %531 = icmp eq i32 %530, 0, !dbg !52
  %532 = and i1 %531, %19, !dbg !52
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %523, ptr addrspace(1) %527, i1 %532) #3, !dbg !52
  %533 = getelementptr float, ptr addrspace(1) %4, i64 %526, !dbg !53
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %524, ptr addrspace(1) %533, i1 %532) #3, !dbg !54
  %534 = getelementptr float, ptr addrspace(1) %5, i64 %526, !dbg !55
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %525, ptr addrspace(1) %534, i1 %532) #3, !dbg !56
  ret void, !dbg !57
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c4ixtlfxbets2tw55dyul3t3vezk74w3mgpmmgdfkykt2ryuzbzu.py", directory: "inductor_cache/4i")
!4 = !{ptr @triton_per_fused_native_group_norm_21, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_native_group_norm_21, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_native_group_norm_21", linkageName: "triton_per_fused_native_group_norm_21", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 19, scope: !7)
!17 = !DILocation(line: 30, column: 19, scope: !7)
!18 = !DILocation(line: 33, column: 38, scope: !7)
!19 = !DILocation(line: 33, column: 35, scope: !7)
!20 = !DILocation(line: 33, column: 48, scope: !7)
!21 = !DILocation(line: 33, column: 43, scope: !7)
!22 = !DILocation(line: 33, column: 30, scope: !7)
!23 = !DILocation(line: 33, column: 53, scope: !7)
!24 = !DILocation(line: 34, column: 30, scope: !7)
!25 = !DILocation(line: 34, column: 53, scope: !7)
!26 = !DILocation(line: 35, column: 30, scope: !7)
!27 = !DILocation(line: 35, column: 53, scope: !7)
!28 = !DILocation(line: 39, column: 33, scope: !7)
!29 = !DILocation(line: 40, column: 33, scope: !7)
!30 = !DILocation(line: 41, column: 33, scope: !7)
!31 = !DILocation(line: 204, column: 46, scope: !32, inlinedAt: !34)
!32 = distinct !DILexicalBlockFile(scope: !7, file: !33, discriminator: 0)
!33 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!34 = !DILocation(line: 42, column: 67, scope: !7)
!35 = !DILocation(line: 192, column: 21, scope: !36, inlinedAt: !34)
!36 = distinct !DILexicalBlockFile(scope: !32, file: !33, discriminator: 0)
!37 = !DILocation(line: 193, column: 28, scope: !36, inlinedAt: !34)
!38 = !DILocation(line: 194, column: 39, scope: !36, inlinedAt: !34)
!39 = !DILocation(line: 194, column: 60, scope: !36, inlinedAt: !34)
!40 = !DILocation(line: 194, column: 49, scope: !36, inlinedAt: !34)
!41 = !DILocation(line: 196, column: 25, scope: !36, inlinedAt: !34)
!42 = !DILocation(line: 196, column: 17, scope: !36, inlinedAt: !34)
!43 = !DILocation(line: 197, column: 15, scope: !36, inlinedAt: !34)
!44 = !DILocation(line: 197, column: 30, scope: !36, inlinedAt: !34)
!45 = !DILocation(line: 197, column: 38, scope: !36, inlinedAt: !34)
!46 = !DILocation(line: 197, column: 49, scope: !36, inlinedAt: !34)
!47 = !DILocation(line: 197, column: 22, scope: !36, inlinedAt: !34)
!48 = !DILocation(line: 43, column: 18, scope: !7)
!49 = !DILocation(line: 44, column: 18, scope: !7)
!50 = !DILocation(line: 45, column: 18, scope: !7)
!51 = !DILocation(line: 46, column: 25, scope: !7)
!52 = !DILocation(line: 46, column: 37, scope: !7)
!53 = !DILocation(line: 47, column: 25, scope: !7)
!54 = !DILocation(line: 47, column: 37, scope: !7)
!55 = !DILocation(line: 48, column: 25, scope: !7)
!56 = !DILocation(line: 48, column: 37, scope: !7)
!57 = !DILocation(line: 48, column: 4, scope: !7)
