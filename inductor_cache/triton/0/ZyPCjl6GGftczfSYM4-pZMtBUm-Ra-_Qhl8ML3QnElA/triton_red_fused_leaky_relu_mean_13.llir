; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_red_fused_leaky_relu_mean_13(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %6 = shl i32 %5, 6, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 2, !dbg !12
  %9 = and i32 %8, 60, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = icmp slt i32 %10, 1536, !dbg !14
  %12 = lshr i32 %7, 4, !dbg !15
  %13 = and i32 %12, 7, !dbg !15
  %.frozen = freeze i32 %10, !dbg !16
  %14 = sdiv i32 %.frozen, 128, !dbg !16
  %15 = srem i32 %14, 3, !dbg !17
  %16 = mul i32 %14, 128, !dbg !18
  %.decomposed = sub i32 %.frozen, %16, !dbg !18
  %17 = sdiv i32 %10, 384, !dbg !19
  %18 = mul nsw i32 %15, 121, !dbg !20
  %19 = mul i32 %17, 46208, !dbg !21
  %20 = add i32 %19, %.decomposed
  br label %21, !dbg !22

21:                                               ; preds = %4, %21
  %22 = phi i32 [ 0, %4 ], [ %56, %21 ]
  %23 = phi <4 x float> [ zeroinitializer, %4 ], [ %55, %21 ]
  %24 = or disjoint i32 %22, %13, !dbg !23
  %25 = icmp samesign ult i32 %24, 121, !dbg !24
  %26 = add nsw i32 %24, %18, !dbg !25
  %27 = icmp slt i32 %26, 361, !dbg !26
  %28 = srem i32 %26, 361, !dbg !27
  %29 = shl nsw i32 %28, 7, !dbg !28
  %30 = add i32 %20, %29, !dbg !29
  %31 = sext i32 %30 to i64, !dbg !30
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !30
  %33 = and i1 %25, %27, !dbg !31
  %34 = and i1 %11, %33, !dbg !32
  %35 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %32, i1 %34, i32 0, i1 %34, i32 0, i1 %34, i32 0, i1 %34, i32 0, i1 %34) #3, !dbg !33
  %36 = extractvalue { i32, i32, i32, i32 } %35, 0, !dbg !33
  %37 = extractvalue { i32, i32, i32, i32 } %35, 1, !dbg !33
  %38 = extractvalue { i32, i32, i32, i32 } %35, 2, !dbg !33
  %39 = extractvalue { i32, i32, i32, i32 } %35, 3, !dbg !33
  %40 = insertelement <4 x i32> poison, i32 %36, i64 0, !dbg !33
  %41 = insertelement <4 x i32> %40, i32 %37, i64 1, !dbg !33
  %42 = insertelement <4 x i32> %41, i32 %38, i64 2, !dbg !33
  %43 = insertelement <4 x i32> %42, i32 %39, i64 3, !dbg !33
  %44 = bitcast <4 x i32> %43 to <4 x float>, !dbg !33
  %45 = fcmp ogt <4 x float> %44, zeroinitializer, !dbg !34
  %46 = fmul <4 x float> %44, splat (float 0x3FB99999A0000000), !dbg !35
  %47 = select <4 x i1> %45, <4 x float> %44, <4 x float> %46, !dbg !36
  %48 = insertelement <4 x i1> poison, i1 %27, i64 0, !dbg !37
  %49 = shufflevector <4 x i1> %48, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !37
  %50 = select <4 x i1> %49, <4 x float> %47, <4 x float> zeroinitializer, !dbg !37
  %51 = fadd <4 x float> %23, %50, !dbg !38
  %52 = and i1 %11, %25, !dbg !39
  %53 = insertelement <4 x i1> poison, i1 %52, i64 0, !dbg !40
  %54 = shufflevector <4 x i1> %53, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !40
  %55 = select <4 x i1> %54, <4 x float> %51, <4 x float> %23, !dbg !40
  %56 = add nuw nsw i32 %22, 8, !dbg !22
  %57 = icmp samesign ult i32 %22, 113, !dbg !22
  br i1 %57, label %21, label %58, !dbg !22

58:                                               ; preds = %21
  %59 = lshr i32 %7, 5, !dbg !12
  %60 = and i32 %7, 63, !dbg !12
  %61 = or disjoint i32 %6, %60, !dbg !13
  %62 = icmp slt i32 %61, 1536, !dbg !14
  %63 = and i32 %7, 16, !dbg !12
  %64 = extractelement <4 x float> %55, i64 0, !dbg !41
  %65 = bitcast float %64 to i32, !dbg !41
  %66 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %65, i32 16, i32 31), !dbg !41
  %67 = bitcast i32 %66 to float, !dbg !41
  %68 = fadd float %64, %67, !dbg !45
  %69 = extractelement <4 x float> %55, i64 1, !dbg !41
  %70 = bitcast float %69 to i32, !dbg !41
  %71 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %70, i32 16, i32 31), !dbg !41
  %72 = bitcast i32 %71 to float, !dbg !41
  %73 = fadd float %69, %72, !dbg !45
  %74 = extractelement <4 x float> %55, i64 2, !dbg !41
  %75 = bitcast float %74 to i32, !dbg !41
  %76 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %75, i32 16, i32 31), !dbg !41
  %77 = bitcast i32 %76 to float, !dbg !41
  %78 = fadd float %74, %77, !dbg !45
  %79 = extractelement <4 x float> %55, i64 3, !dbg !41
  %80 = bitcast float %79 to i32, !dbg !41
  %81 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %80, i32 16, i32 31), !dbg !41
  %82 = bitcast i32 %81 to float, !dbg !41
  %83 = fadd float %79, %82, !dbg !45
  %84 = icmp eq i32 %63, 0, !dbg !41
  %85 = and i32 %59, 3, !dbg !41
  %86 = shl nuw nsw i32 %9, 2, !dbg !41
  %87 = or disjoint i32 %86, %85, !dbg !41
  %88 = zext nneg i32 %87 to i64, !dbg !41
  %89 = getelementptr float, ptr addrspace(3) @global_smem, i64 %88, !dbg !41
  %90 = bitcast float %68 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %89, <1 x i32> %90, i1 %84) #3, !dbg !41
  %91 = or disjoint i32 %86, 4, !dbg !41
  %92 = or disjoint i32 %91, %85, !dbg !41
  %93 = zext nneg i32 %92 to i64, !dbg !41
  %94 = getelementptr float, ptr addrspace(3) @global_smem, i64 %93, !dbg !41
  %95 = bitcast float %73 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %94, <1 x i32> %95, i1 %84) #3, !dbg !41
  %96 = or disjoint i32 %86, 8, !dbg !41
  %97 = or disjoint i32 %96, %85, !dbg !41
  %98 = zext nneg i32 %97 to i64, !dbg !41
  %99 = getelementptr float, ptr addrspace(3) @global_smem, i64 %98, !dbg !41
  %100 = bitcast float %78 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %99, <1 x i32> %100, i1 %84) #3, !dbg !41
  %101 = or disjoint i32 %86, 12, !dbg !41
  %102 = or disjoint i32 %101, %85, !dbg !41
  %103 = zext nneg i32 %102 to i64, !dbg !41
  %104 = getelementptr float, ptr addrspace(3) @global_smem, i64 %103, !dbg !41
  %105 = bitcast float %83 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %104, <1 x i32> %105, i1 %84) #3, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %106 = icmp slt i32 %7, 256, !dbg !41
  %107 = sext i32 %7 to i64, !dbg !41
  %108 = getelementptr float, ptr addrspace(3) @global_smem, i64 %107, !dbg !41
  %109 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %108, i1 %106) #3, !dbg !41
  %110 = bitcast i32 %109 to float, !dbg !41
  %111 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %109, i32 2, i32 31), !dbg !41
  %112 = bitcast i32 %111 to float, !dbg !41
  %113 = fadd float %110, %112, !dbg !45
  %114 = bitcast float %113 to i32, !dbg !41
  %115 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %114, i32 1, i32 31), !dbg !41
  %116 = bitcast i32 %115 to float, !dbg !41
  %117 = fadd float %113, %116, !dbg !45
  %118 = and i32 %7, 3, !dbg !41
  %119 = icmp eq i32 %118, 0, !dbg !41
  %120 = and i1 %106, %119, !dbg !41
  %121 = bitcast float %117 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %108, <1 x i32> %121, i1 %120) #3, !dbg !41
  %122 = add i32 %7, 128, !dbg !41
  %123 = sext i32 %122 to i64, !dbg !41
  %124 = getelementptr float, ptr addrspace(3) @global_smem, i64 %123, !dbg !41
  %125 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %124, i1 %106) #3, !dbg !41
  %126 = bitcast i32 %125 to float, !dbg !41
  %127 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %125, i32 2, i32 31), !dbg !41
  %128 = bitcast i32 %127 to float, !dbg !41
  %129 = fadd float %126, %128, !dbg !45
  %130 = bitcast float %129 to i32, !dbg !41
  %131 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %130, i32 1, i32 31), !dbg !41
  %132 = bitcast i32 %131 to float, !dbg !41
  %133 = fadd float %129, %132, !dbg !45
  %134 = bitcast float %133 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %124, <1 x i32> %134, i1 %120) #3, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %135 = zext nneg i32 %86 to i64, !dbg !41
  %136 = getelementptr float, ptr addrspace(3) @global_smem, i64 %135, !dbg !41
  %137 = load i32, ptr addrspace(3) %136, align 16, !dbg !41
  %138 = zext nneg i32 %91 to i64, !dbg !41
  %139 = getelementptr float, ptr addrspace(3) @global_smem, i64 %138, !dbg !41
  %140 = load i32, ptr addrspace(3) %139, align 16, !dbg !41
  %141 = zext nneg i32 %96 to i64, !dbg !41
  %142 = getelementptr float, ptr addrspace(3) @global_smem, i64 %141, !dbg !41
  %143 = load i32, ptr addrspace(3) %142, align 16, !dbg !41
  %144 = zext nneg i32 %101 to i64, !dbg !41
  %145 = getelementptr float, ptr addrspace(3) @global_smem, i64 %144, !dbg !41
  %146 = load i32, ptr addrspace(3) %145, align 16, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %147 = zext nneg i32 %9 to i64, !dbg !47
  %148 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %147, !dbg !47
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %148, i32 %137, i32 %140, i32 %143, i32 %146, i1 true) #3, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %149 = zext nneg i32 %60 to i64, !dbg !47
  %150 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %149, !dbg !47
  %151 = load i32, ptr addrspace(3) %150, align 4, !dbg !47
  %152 = sext i32 %61 to i64, !dbg !48
  %153 = getelementptr float, ptr addrspace(1) %1, i64 %152, !dbg !48
  %154 = and i32 %7, 64, !dbg !49
  %155 = icmp eq i32 %154, 0, !dbg !49
  %156 = and i1 %155, %62, !dbg !49
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %151, ptr addrspace(1) %153, i1 %156) #3, !dbg !49
  ret void, !dbg !50
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cs4eoyocptwm64przsyus5hjv4jdemambhcgqumyusq2d7hnyzpb.py", directory: "inductor_cache/s4")
!4 = !{ptr @triton_red_fused_leaky_relu_mean_13, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_leaky_relu_mean_13, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_leaky_relu_mean_13", linkageName: "triton_red_fused_leaky_relu_mean_13", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 21, scope: !7)
!17 = !DILocation(line: 26, column: 28, scope: !7)
!18 = !DILocation(line: 27, column: 19, scope: !7)
!19 = !DILocation(line: 28, column: 19, scope: !7)
!20 = !DILocation(line: 35, column: 24, scope: !7)
!21 = !DILocation(line: 38, column: 75, scope: !7)
!22 = !DILocation(line: 31, column: 36, scope: !7)
!23 = !DILocation(line: 32, column: 27, scope: !7)
!24 = !DILocation(line: 33, column: 25, scope: !7)
!25 = !DILocation(line: 35, column: 20, scope: !7)
!26 = !DILocation(line: 37, column: 22, scope: !7)
!27 = !DILocation(line: 38, column: 61, scope: !7)
!28 = !DILocation(line: 38, column: 45, scope: !7)
!29 = !DILocation(line: 38, column: 69, scope: !7)
!30 = !DILocation(line: 38, column: 34, scope: !7)
!31 = !DILocation(line: 38, column: 88, scope: !7)
!32 = !DILocation(line: 38, column: 95, scope: !7)
!33 = !DILocation(line: 38, column: 80, scope: !7)
!34 = !DILocation(line: 40, column: 22, scope: !7)
!35 = !DILocation(line: 42, column: 22, scope: !7)
!36 = !DILocation(line: 43, column: 36, scope: !7)
!37 = !DILocation(line: 45, column: 37, scope: !7)
!38 = !DILocation(line: 47, column: 25, scope: !7)
!39 = !DILocation(line: 48, column: 34, scope: !7)
!40 = !DILocation(line: 48, column: 48, scope: !7)
!41 = !DILocation(line: 267, column: 36, scope: !42, inlinedAt: !44)
!42 = distinct !DILexicalBlockFile(scope: !7, file: !43, discriminator: 0)
!43 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!44 = !DILocation(line: 49, column: 27, scope: !7)
!45 = !DILocation(line: 256, column: 15, scope: !46, inlinedAt: !44)
!46 = distinct !DILexicalBlockFile(scope: !42, file: !43, discriminator: 0)
!47 = !DILocation(line: 49, column: 30, scope: !7)
!48 = !DILocation(line: 50, column: 25, scope: !7)
!49 = !DILocation(line: 50, column: 37, scope: !7)
!50 = !DILocation(line: 50, column: 4, scope: !7)
