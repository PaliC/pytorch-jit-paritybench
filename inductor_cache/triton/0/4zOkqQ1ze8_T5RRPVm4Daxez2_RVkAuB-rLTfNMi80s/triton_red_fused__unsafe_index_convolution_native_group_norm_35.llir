; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_red_fused__unsafe_index_convolution_native_group_norm_35(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %11 = icmp slt i32 %10, 512, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = and i32 %12, 511, !dbg !12
  %14 = or disjoint i32 %13, 512, !dbg !12
  %15 = or disjoint i32 %13, 1024, !dbg !12
  %16 = or disjoint i32 %13, 1536, !dbg !12
  %17 = shl i32 %12, 2, !dbg !12
  %18 = and i32 %17, 2044, !dbg !12
  %19 = or disjoint i32 %18, 2, !dbg !12
  %.frozen = freeze i32 %10, !dbg !13
  %20 = sdiv i32 %.frozen, 4, !dbg !13
  %21 = mul i32 %20, 4, !dbg !14
  %.decomposed = sub i32 %.frozen, %21, !dbg !14
  %22 = srem i32 %20, 32, !dbg !15
  %23 = sext i32 %22 to i64, !dbg !16
  %24 = getelementptr float, ptr addrspace(1) %2, i64 %23, !dbg !16
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 %11) #3, !dbg !17
  %26 = bitcast i32 %25 to float, !dbg !17
  %27 = shl nsw i32 %.decomposed, 4, !dbg !18
  %28 = shl i32 %20, 15, !dbg !19
  %29 = sext i32 %28 to i64, !dbg !20
  %30 = shl i32 %10, 16, !dbg !21
  %31 = and i32 %17, 60
  %32 = and i32 %19, 62
  %33 = zext nneg i32 %31 to i64
  %34 = getelementptr i64, ptr addrspace(1) %0, i64 %33
  %35 = zext nneg i32 %32 to i64
  %36 = getelementptr i64, ptr addrspace(1) %0, i64 %35
  %37 = zext nneg i32 %13 to i64
  %38 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i64 %37
  %39 = zext nneg i32 %14 to i64
  %40 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i64 %39
  %41 = zext nneg i32 %15 to i64
  %42 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i64 %41
  %43 = zext nneg i32 %16 to i64
  %44 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i64 %43
  %45 = zext nneg i32 %18 to i64
  %46 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i64 %45
  %47 = getelementptr inbounds i8, ptr addrspace(3) %46, i64 16
  %48 = shl nuw nsw i32 %18, 1
  %49 = zext nneg i32 %48 to i64
  %50 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i64 %49
  %51 = or disjoint i32 %48, 2
  %52 = zext nneg i32 %51 to i64
  %53 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i64 %52
  %54 = shl nuw nsw i32 %19, 1
  %55 = zext nneg i32 %54 to i64
  %56 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i64 %55
  %57 = or disjoint i32 %48, 6
  %58 = zext nneg i32 %57 to i64
  %59 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i64 %58
  %60 = shl nuw nsw i32 %13, 1
  %61 = zext nneg i32 %60 to i64
  %62 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i64 %61
  %63 = shl nuw nsw i32 %14, 1
  %64 = zext nneg i32 %63 to i64
  %65 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i64 %64
  %66 = shl nuw nsw i32 %15, 1
  %67 = zext nneg i32 %66 to i64
  %68 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i64 %67
  %69 = shl nuw nsw i32 %16, 1
  %70 = zext nneg i32 %69 to i64
  %71 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i64 %70
  %72 = or disjoint i32 %30, %18
  %73 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %37
  %74 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %39
  %75 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %41
  %76 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %43
  %77 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %45
  %78 = sext i32 %72 to i64, !dbg !22
  %79 = getelementptr inbounds i8, ptr addrspace(3) %46, i64 8
  %80 = getelementptr inbounds i8, ptr addrspace(3) %46, i64 24
  %invariant.gep = getelementptr float, ptr addrspace(1) %3, i64 %78, !dbg !22
  %81 = getelementptr inbounds i8, ptr addrspace(3) %77, i64 4
  %82 = getelementptr inbounds i8, ptr addrspace(3) %77, i64 8
  %83 = getelementptr inbounds i8, ptr addrspace(3) %77, i64 12
  br label %84, !dbg !22

84:                                               ; preds = %9, %._crit_edge
  %indvars.iv = phi i64 [ 0, %9 ], [ %indvars.iv.next, %._crit_edge ]
  %85 = phi float [ 0.000000e+00, %9 ], [ %290, %._crit_edge ]
  %86 = phi float [ 0.000000e+00, %9 ], [ %291, %._crit_edge ]
  %87 = phi float [ 0.000000e+00, %9 ], [ %292, %._crit_edge ]
  %88 = phi float [ 0.000000e+00, %9 ], [ %293, %._crit_edge ]
  %89 = phi float [ 0.000000e+00, %9 ], [ %286, %._crit_edge ]
  %90 = phi float [ 0.000000e+00, %9 ], [ %287, %._crit_edge ]
  %91 = phi float [ 0.000000e+00, %9 ], [ %288, %._crit_edge ]
  %92 = phi float [ 0.000000e+00, %9 ], [ %289, %._crit_edge ]
  %93 = phi float [ 0.000000e+00, %9 ], [ %282, %._crit_edge ]
  %94 = phi float [ 0.000000e+00, %9 ], [ %283, %._crit_edge ]
  %95 = phi float [ 0.000000e+00, %9 ], [ %284, %._crit_edge ]
  %96 = phi float [ 0.000000e+00, %9 ], [ %285, %._crit_edge ]
  %97 = trunc nuw nsw i64 %indvars.iv to i32, !dbg !23
  %98 = lshr i32 %97, 12, !dbg !23
  %99 = trunc i64 %indvars.iv to i32, !dbg !24
  %100 = or disjoint i32 %13, %99, !dbg !24
  %101 = lshr i32 %100, 6, !dbg !24
  %102 = and i32 %101, 39, !dbg !24
  %103 = trunc i64 %indvars.iv to i32, !dbg !24
  %104 = or disjoint i32 %14, %103, !dbg !24
  %105 = lshr i32 %104, 6, !dbg !24
  %106 = and i32 %105, 47, !dbg !24
  %107 = trunc i64 %indvars.iv to i32, !dbg !24
  %108 = or disjoint i32 %15, %107, !dbg !24
  %109 = lshr i32 %108, 6, !dbg !24
  %110 = and i32 %109, 55, !dbg !24
  %111 = trunc i64 %indvars.iv to i32, !dbg !24
  %112 = or disjoint i32 %16, %111, !dbg !24
  %113 = lshr i32 %112, 6, !dbg !24
  %114 = and i32 %113, 63, !dbg !24
  %115 = add nuw nsw i32 %98, %27, !dbg !25
  %116 = sext i32 %115 to i64, !dbg !26
  %117 = getelementptr i64, ptr addrspace(1) %0, i64 %116, !dbg !26
  %118 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %117, i1 %11, i1 %11) #3, !dbg !27
  %119 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %117, i1 %11, i1 %11) #3, !dbg !27
  %120 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %117, i1 %11, i1 %11) #3, !dbg !27
  %121 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %117, i1 %11, i1 %11) #3, !dbg !27
  %122 = zext nneg i32 %102 to i64, !dbg !28
  %123 = getelementptr i64, ptr addrspace(1) %0, i64 %122, !dbg !28
  %124 = zext nneg i32 %106 to i64, !dbg !28
  %125 = getelementptr i64, ptr addrspace(1) %0, i64 %124, !dbg !28
  %126 = zext nneg i32 %110 to i64, !dbg !28
  %127 = getelementptr i64, ptr addrspace(1) %0, i64 %126, !dbg !28
  %128 = zext nneg i32 %114 to i64, !dbg !28
  %129 = getelementptr i64, ptr addrspace(1) %0, i64 %128, !dbg !28
  %130 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %123, i1 true) #3, !dbg !29
  %131 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %125, i1 true) #3, !dbg !29
  %132 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %127, i1 true) #3, !dbg !29
  %133 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %129, i1 true) #3, !dbg !29
  %134 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %34, i1 true) #3, !dbg !30
  %135 = extractvalue { i64, i64 } %134, 0, !dbg !30
  %136 = extractvalue { i64, i64 } %134, 1, !dbg !30
  %137 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %36, i1 true) #3, !dbg !30
  %138 = extractvalue { i64, i64 } %137, 0, !dbg !30
  %139 = extractvalue { i64, i64 } %137, 1, !dbg !30
  %140 = lshr i64 %118, 58, !dbg !31
  %141 = and i64 %140, 32, !dbg !31
  %142 = add i64 %141, %118, !dbg !31
  %143 = lshr i64 %119, 58, !dbg !31
  %144 = and i64 %143, 32, !dbg !31
  %145 = add i64 %144, %119, !dbg !31
  %146 = lshr i64 %120, 58, !dbg !31
  %147 = and i64 %146, 32, !dbg !31
  %148 = add i64 %147, %120, !dbg !31
  %149 = lshr i64 %121, 58, !dbg !31
  %150 = and i64 %149, 32, !dbg !31
  %151 = add i64 %150, %121, !dbg !31
  %152 = lshr i64 %130, 58, !dbg !32
  %153 = and i64 %152, 32, !dbg !32
  %154 = add i64 %153, %130, !dbg !32
  %155 = lshr i64 %131, 58, !dbg !32
  %156 = and i64 %155, 32, !dbg !32
  %157 = add i64 %156, %131, !dbg !32
  %158 = lshr i64 %132, 58, !dbg !32
  %159 = and i64 %158, 32, !dbg !32
  %160 = add i64 %159, %132, !dbg !32
  %161 = lshr i64 %133, 58, !dbg !32
  %162 = and i64 %161, 32, !dbg !32
  %163 = add i64 %162, %133, !dbg !32
  %164 = lshr i64 %135, 58, !dbg !33
  %165 = and i64 %164, 32, !dbg !33
  %166 = lshr i64 %136, 58, !dbg !33
  %167 = and i64 %166, 32, !dbg !33
  %168 = lshr i64 %138, 58, !dbg !33
  %169 = and i64 %168, 32, !dbg !33
  %170 = lshr i64 %139, 58, !dbg !33
  %171 = and i64 %170, 32, !dbg !33
  %172 = shl i64 %154, 5, !dbg !34
  %173 = shl i64 %157, 5, !dbg !34
  %174 = shl i64 %160, 5, !dbg !34
  %175 = shl i64 %163, 5, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %176 = insertelement <1 x i64> poison, i64 %172, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %38, <1 x i64> %176, i1 true) #3, !dbg !34
  %177 = insertelement <1 x i64> poison, i64 %173, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %40, <1 x i64> %177, i1 true) #3, !dbg !34
  %178 = insertelement <1 x i64> poison, i64 %174, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %42, <1 x i64> %178, i1 true) #3, !dbg !34
  %179 = insertelement <1 x i64> poison, i64 %175, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %44, <1 x i64> %179, i1 true) #3, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %180 = load i64, ptr addrspace(3) %46, align 16, !dbg !34
  %181 = load i64, ptr addrspace(3) %79, align 8, !dbg !34
  %182 = load i64, ptr addrspace(3) %47, align 16, !dbg !34
  %183 = load i64, ptr addrspace(3) %80, align 8, !dbg !34
  %184 = shl i64 %142, 10, !dbg !35
  %185 = shl i64 %145, 10, !dbg !35
  %186 = shl i64 %148, 10, !dbg !35
  %187 = shl i64 %151, 10, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %188 = insertelement <1 x i64> poison, i64 %184, i64 0, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %38, <1 x i64> %188, i1 true) #3, !dbg !35
  %189 = insertelement <1 x i64> poison, i64 %185, i64 0, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %40, <1 x i64> %189, i1 true) #3, !dbg !35
  %190 = insertelement <1 x i64> poison, i64 %186, i64 0, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %42, <1 x i64> %190, i1 true) #3, !dbg !35
  %191 = insertelement <1 x i64> poison, i64 %187, i64 0, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %44, <1 x i64> %191, i1 true) #3, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %192 = load i64, ptr addrspace(3) %46, align 16, !dbg !35
  %193 = load i64, ptr addrspace(3) %79, align 8, !dbg !35
  %194 = load i64, ptr addrspace(3) %47, align 16, !dbg !35
  %195 = load i64, ptr addrspace(3) %80, align 8, !dbg !35
  %196 = getelementptr float, ptr addrspace(1) %1, i64 %135, !dbg !36
  %197 = getelementptr float, ptr addrspace(1) %196, i64 %165, !dbg !36
  %198 = getelementptr float, ptr addrspace(1) %197, i64 %180, !dbg !36
  %199 = getelementptr float, ptr addrspace(1) %198, i64 %192, !dbg !36
  %200 = getelementptr float, ptr addrspace(1) %199, i64 %29, !dbg !36
  %201 = getelementptr float, ptr addrspace(1) %1, i64 %136, !dbg !36
  %202 = getelementptr float, ptr addrspace(1) %201, i64 %167, !dbg !36
  %203 = getelementptr float, ptr addrspace(1) %202, i64 %181, !dbg !36
  %204 = getelementptr float, ptr addrspace(1) %203, i64 %193, !dbg !36
  %205 = getelementptr float, ptr addrspace(1) %204, i64 %29, !dbg !36
  %206 = getelementptr float, ptr addrspace(1) %1, i64 %138, !dbg !36
  %207 = getelementptr float, ptr addrspace(1) %206, i64 %169, !dbg !36
  %208 = getelementptr float, ptr addrspace(1) %207, i64 %182, !dbg !36
  %209 = getelementptr float, ptr addrspace(1) %208, i64 %194, !dbg !36
  %210 = getelementptr float, ptr addrspace(1) %209, i64 %29, !dbg !36
  %211 = getelementptr float, ptr addrspace(1) %1, i64 %139, !dbg !36
  %212 = getelementptr float, ptr addrspace(1) %211, i64 %171, !dbg !36
  %213 = getelementptr float, ptr addrspace(1) %212, i64 %183, !dbg !36
  %214 = getelementptr float, ptr addrspace(1) %213, i64 %195, !dbg !36
  %215 = getelementptr float, ptr addrspace(1) %214, i64 %29, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %216 = ptrtoint ptr addrspace(1) %200 to i64, !dbg !37
  %217 = ptrtoint ptr addrspace(1) %205 to i64, !dbg !37
  %218 = ptrtoint ptr addrspace(1) %210 to i64, !dbg !37
  %219 = ptrtoint ptr addrspace(1) %215 to i64, !dbg !37
  %220 = insertelement <1 x i64> poison, i64 %216, i64 0, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %50, <1 x i64> %220, i1 true) #3, !dbg !37
  %221 = insertelement <1 x i64> poison, i64 %217, i64 0, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %53, <1 x i64> %221, i1 true) #3, !dbg !37
  %222 = insertelement <1 x i64> poison, i64 %218, i64 0, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %56, <1 x i64> %222, i1 true) #3, !dbg !37
  %223 = insertelement <1 x i64> poison, i64 %219, i64 0, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %59, <1 x i64> %223, i1 true) #3, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %224 = load i64, ptr addrspace(3) %62, align 16, !dbg !37
  %225 = load i64, ptr addrspace(3) %65, align 16, !dbg !37
  %226 = load i64, ptr addrspace(3) %68, align 16, !dbg !37
  %227 = load i64, ptr addrspace(3) %71, align 16, !dbg !37
  %228 = inttoptr i64 %224 to ptr addrspace(1), !dbg !37
  %229 = inttoptr i64 %225 to ptr addrspace(1), !dbg !37
  %230 = inttoptr i64 %226 to ptr addrspace(1), !dbg !37
  %231 = inttoptr i64 %227 to ptr addrspace(1), !dbg !37
  %232 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %228, i1 %11) #3, !dbg !37
  %233 = bitcast i32 %232 to float, !dbg !37
  %234 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %229, i1 %11) #3, !dbg !37
  %235 = bitcast i32 %234 to float, !dbg !37
  %236 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %230, i1 %11) #3, !dbg !37
  %237 = bitcast i32 %236 to float, !dbg !37
  %238 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %231, i1 %11) #3, !dbg !37
  %239 = bitcast i32 %238 to float, !dbg !37
  %240 = fadd float %26, %233, !dbg !38
  %241 = fadd float %26, %235, !dbg !38
  %242 = fadd float %26, %237, !dbg !38
  %243 = fadd float %26, %239, !dbg !38
  %244 = icmp eq i64 %indvars.iv, 0, !dbg !39
  br i1 %244, label %._crit_edge, label %245, !dbg !40

245:                                              ; preds = %84
  %246 = fsub float %240, %93, !dbg !44
  %247 = fsub float %241, %94, !dbg !44
  %248 = fsub float %242, %95, !dbg !44
  %249 = fsub float %243, %96, !dbg !44
  %250 = fadd float %85, 1.000000e+00, !dbg !45
  %251 = fadd float %86, 1.000000e+00, !dbg !45
  %252 = fadd float %87, 1.000000e+00, !dbg !45
  %253 = fadd float %88, 1.000000e+00, !dbg !45
  %254 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %246, float %250) #3, !dbg !46
  %255 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %247, float %251) #3, !dbg !46
  %256 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %248, float %252) #3, !dbg !46
  %257 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %249, float %253) #3, !dbg !46
  %258 = fadd float %93, %254, !dbg !47
  %259 = fadd float %94, %255, !dbg !47
  %260 = fadd float %95, %256, !dbg !47
  %261 = fadd float %96, %257, !dbg !47
  %262 = fsub float %240, %258, !dbg !48
  %263 = fsub float %241, %259, !dbg !48
  %264 = fsub float %242, %260, !dbg !48
  %265 = fsub float %243, %261, !dbg !48
  %266 = fmul float %246, %262, !dbg !49
  %267 = fmul float %247, %263, !dbg !49
  %268 = fmul float %248, %264, !dbg !49
  %269 = fmul float %249, %265, !dbg !49
  %270 = fadd float %89, %266, !dbg !50
  %271 = fadd float %90, %267, !dbg !50
  %272 = fadd float %91, %268, !dbg !50
  %273 = fadd float %92, %269, !dbg !50
  br label %._crit_edge, !dbg !40

._crit_edge:                                      ; preds = %84, %245
  %274 = phi float [ %270, %245 ], [ 0.000000e+00, %84 ], !dbg !43
  %275 = phi float [ %271, %245 ], [ 0.000000e+00, %84 ], !dbg !43
  %276 = phi float [ %272, %245 ], [ 0.000000e+00, %84 ], !dbg !43
  %277 = phi float [ %273, %245 ], [ 0.000000e+00, %84 ], !dbg !43
  %.pn7 = phi float [ %258, %245 ], [ %240, %84 ]
  %.pn5 = phi float [ %259, %245 ], [ %241, %84 ]
  %.pn3 = phi float [ %260, %245 ], [ %242, %84 ]
  %.pn1 = phi float [ %261, %245 ], [ %243, %84 ]
  %278 = phi float [ %250, %245 ], [ 1.000000e+00, %84 ], !dbg !43
  %279 = phi float [ %251, %245 ], [ 1.000000e+00, %84 ], !dbg !43
  %280 = phi float [ %252, %245 ], [ 1.000000e+00, %84 ], !dbg !43
  %281 = phi float [ %253, %245 ], [ 1.000000e+00, %84 ], !dbg !43
  %282 = select i1 %11, float %.pn7, float %93, !dbg !51
  %283 = select i1 %11, float %.pn5, float %94, !dbg !51
  %284 = select i1 %11, float %.pn3, float %95, !dbg !51
  %285 = select i1 %11, float %.pn1, float %96, !dbg !51
  %286 = select i1 %11, float %274, float %89, !dbg !52
  %287 = select i1 %11, float %275, float %90, !dbg !52
  %288 = select i1 %11, float %276, float %91, !dbg !52
  %289 = select i1 %11, float %277, float %92, !dbg !52
  %290 = select i1 %11, float %278, float %85, !dbg !53
  %291 = select i1 %11, float %279, float %86, !dbg !53
  %292 = select i1 %11, float %280, float %87, !dbg !53
  %293 = select i1 %11, float %281, float %88, !dbg !53
  %gep = getelementptr float, ptr addrspace(1) %invariant.gep, i64 %indvars.iv, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !55
  %294 = bitcast float %240 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %73, <1 x i32> %294, i1 true) #3, !dbg !55
  %295 = bitcast float %241 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %74, <1 x i32> %295, i1 true) #3, !dbg !55
  %296 = bitcast float %242 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %75, <1 x i32> %296, i1 true) #3, !dbg !55
  %297 = bitcast float %243 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %76, <1 x i32> %297, i1 true) #3, !dbg !55
  tail call void @llvm.nvvm.barrier0(), !dbg !55
  %.extract = load i32, ptr addrspace(3) %77, align 16, !dbg !55
  %.extract11 = load i32, ptr addrspace(3) %81, align 4, !dbg !55
  %.extract12 = load i32, ptr addrspace(3) %82, align 8, !dbg !55
  %.extract13 = load i32, ptr addrspace(3) %83, align 4, !dbg !55
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract11, i32 %.extract12, i32 %.extract13, ptr addrspace(1) %gep, i1 %11) #3, !dbg !55
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 2048, !dbg !22
  %298 = icmp samesign ult i64 %indvars.iv, 63488, !dbg !22
  br i1 %298, label %84, label %299, !dbg !22

299:                                              ; preds = %._crit_edge
  %300 = lshr i32 %12, 5, !dbg !12
  %301 = and i32 %12, 31, !dbg !12
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  %302 = fsub float %283, %282, !dbg !58
  %303 = fadd float %290, %291, !dbg !60
  %304 = fcmp oeq float %303, 0.000000e+00, !dbg !61
  %305 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %291, float %303) #3, !dbg !62
  %306 = select i1 %304, float 0.000000e+00, float %305, !dbg !63
  %307 = fmul float %302, %306, !dbg !64
  %308 = fadd float %282, %307, !dbg !65
  %309 = fadd float %286, %287, !dbg !66
  %310 = fmul float %302, %302, !dbg !67
  %311 = fmul float %310, %290, !dbg !68
  %312 = fmul float %311, %306, !dbg !69
  %313 = fadd float %309, %312, !dbg !70
  %314 = fsub float %284, %308, !dbg !58
  %315 = fadd float %292, %303, !dbg !60
  %316 = fcmp oeq float %315, 0.000000e+00, !dbg !61
  %317 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %292, float %315) #3, !dbg !62
  %318 = select i1 %316, float 0.000000e+00, float %317, !dbg !63
  %319 = fmul float %318, %314, !dbg !64
  %320 = fadd float %308, %319, !dbg !65
  %321 = fadd float %288, %313, !dbg !66
  %322 = fmul float %314, %314, !dbg !67
  %323 = fmul float %303, %322, !dbg !68
  %324 = fmul float %318, %323, !dbg !69
  %325 = fadd float %321, %324, !dbg !70
  %326 = fsub float %285, %320, !dbg !58
  %327 = fadd float %293, %315, !dbg !60
  %328 = fcmp oeq float %327, 0.000000e+00, !dbg !61
  %329 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %293, float %327) #3, !dbg !62
  %330 = select i1 %328, float 0.000000e+00, float %329, !dbg !63
  %331 = fmul float %330, %326, !dbg !64
  %332 = fadd float %320, %331, !dbg !65
  %333 = fadd float %289, %325, !dbg !66
  %334 = fmul float %326, %326, !dbg !67
  %335 = fmul float %315, %334, !dbg !68
  %336 = fmul float %330, %335, !dbg !69
  %337 = fadd float %333, %336, !dbg !70
  %338 = bitcast float %332 to i32, !dbg !56
  %339 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %338, i32 16, i32 31), !dbg !56
  %340 = bitcast i32 %339 to float, !dbg !56
  %341 = bitcast float %337 to i32, !dbg !56
  %342 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %341, i32 16, i32 31), !dbg !56
  %343 = bitcast i32 %342 to float, !dbg !56
  %344 = bitcast float %327 to i32, !dbg !56
  %345 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %344, i32 16, i32 31), !dbg !56
  %346 = bitcast i32 %345 to float, !dbg !56
  %347 = fsub float %340, %332, !dbg !58
  %348 = fadd float %327, %346, !dbg !60
  %349 = fcmp oeq float %348, 0.000000e+00, !dbg !61
  %350 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %346, float %348) #3, !dbg !62
  %351 = select i1 %349, float 0.000000e+00, float %350, !dbg !63
  %352 = fmul float %351, %347, !dbg !64
  %353 = fadd float %332, %352, !dbg !65
  %354 = fadd float %337, %343, !dbg !66
  %355 = fmul float %347, %347, !dbg !67
  %356 = fmul float %327, %355, !dbg !68
  %357 = fmul float %351, %356, !dbg !69
  %358 = fadd float %354, %357, !dbg !70
  %359 = bitcast float %353 to i32, !dbg !56
  %360 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %359, i32 8, i32 31), !dbg !56
  %361 = bitcast i32 %360 to float, !dbg !56
  %362 = bitcast float %358 to i32, !dbg !56
  %363 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %362, i32 8, i32 31), !dbg !56
  %364 = bitcast i32 %363 to float, !dbg !56
  %365 = bitcast float %348 to i32, !dbg !56
  %366 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %365, i32 8, i32 31), !dbg !56
  %367 = bitcast i32 %366 to float, !dbg !56
  %368 = fsub float %361, %353, !dbg !58
  %369 = fadd float %348, %367, !dbg !60
  %370 = fcmp oeq float %369, 0.000000e+00, !dbg !61
  %371 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %367, float %369) #3, !dbg !62
  %372 = select i1 %370, float 0.000000e+00, float %371, !dbg !63
  %373 = fmul float %368, %372, !dbg !64
  %374 = fadd float %353, %373, !dbg !65
  %375 = fadd float %358, %364, !dbg !66
  %376 = fmul float %368, %368, !dbg !67
  %377 = fmul float %348, %376, !dbg !68
  %378 = fmul float %372, %377, !dbg !69
  %379 = fadd float %375, %378, !dbg !70
  %380 = bitcast float %374 to i32, !dbg !56
  %381 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %380, i32 4, i32 31), !dbg !56
  %382 = bitcast i32 %381 to float, !dbg !56
  %383 = bitcast float %379 to i32, !dbg !56
  %384 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %383, i32 4, i32 31), !dbg !56
  %385 = bitcast i32 %384 to float, !dbg !56
  %386 = bitcast float %369 to i32, !dbg !56
  %387 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %386, i32 4, i32 31), !dbg !56
  %388 = bitcast i32 %387 to float, !dbg !56
  %389 = fsub float %382, %374, !dbg !58
  %390 = fadd float %369, %388, !dbg !60
  %391 = fcmp oeq float %390, 0.000000e+00, !dbg !61
  %392 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %388, float %390) #3, !dbg !62
  %393 = select i1 %391, float 0.000000e+00, float %392, !dbg !63
  %394 = fmul float %389, %393, !dbg !64
  %395 = fadd float %374, %394, !dbg !65
  %396 = fadd float %379, %385, !dbg !66
  %397 = fmul float %389, %389, !dbg !67
  %398 = fmul float %369, %397, !dbg !68
  %399 = fmul float %393, %398, !dbg !69
  %400 = fadd float %396, %399, !dbg !70
  %401 = bitcast float %395 to i32, !dbg !56
  %402 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %401, i32 2, i32 31), !dbg !56
  %403 = bitcast i32 %402 to float, !dbg !56
  %404 = bitcast float %400 to i32, !dbg !56
  %405 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %404, i32 2, i32 31), !dbg !56
  %406 = bitcast i32 %405 to float, !dbg !56
  %407 = bitcast float %390 to i32, !dbg !56
  %408 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %407, i32 2, i32 31), !dbg !56
  %409 = bitcast i32 %408 to float, !dbg !56
  %410 = fsub float %403, %395, !dbg !58
  %411 = fadd float %390, %409, !dbg !60
  %412 = fcmp oeq float %411, 0.000000e+00, !dbg !61
  %413 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %409, float %411) #3, !dbg !62
  %414 = select i1 %412, float 0.000000e+00, float %413, !dbg !63
  %415 = fmul float %410, %414, !dbg !64
  %416 = fadd float %395, %415, !dbg !65
  %417 = fadd float %400, %406, !dbg !66
  %418 = fmul float %410, %410, !dbg !67
  %419 = fmul float %390, %418, !dbg !68
  %420 = fmul float %414, %419, !dbg !69
  %421 = fadd float %417, %420, !dbg !70
  %422 = bitcast float %416 to i32, !dbg !56
  %423 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %422, i32 1, i32 31), !dbg !56
  %424 = bitcast i32 %423 to float, !dbg !56
  %425 = bitcast float %421 to i32, !dbg !56
  %426 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %425, i32 1, i32 31), !dbg !56
  %427 = bitcast i32 %426 to float, !dbg !56
  %428 = bitcast float %411 to i32, !dbg !56
  %429 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %428, i32 1, i32 31), !dbg !56
  %430 = bitcast i32 %429 to float, !dbg !56
  %431 = fsub float %424, %416, !dbg !58
  %432 = fadd float %411, %430, !dbg !60
  %433 = fcmp oeq float %432, 0.000000e+00, !dbg !61
  %434 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %430, float %432) #3, !dbg !62
  %435 = select i1 %433, float 0.000000e+00, float %434, !dbg !63
  %436 = fmul float %431, %435, !dbg !64
  %437 = fadd float %416, %436, !dbg !65
  %438 = fadd float %421, %427, !dbg !66
  %439 = fmul float %431, %431, !dbg !67
  %440 = fmul float %411, %439, !dbg !68
  %441 = fmul float %435, %440, !dbg !69
  %442 = fadd float %438, %441, !dbg !70
  %443 = icmp eq i32 %301, 0, !dbg !56
  %444 = and i32 %300, 15, !dbg !56
  %445 = zext nneg i32 %444 to i64, !dbg !56
  %446 = getelementptr float, ptr addrspace(3) @global_smem, i64 %445, !dbg !56
  %447 = bitcast float %437 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %446, <1 x i32> %447, i1 %443) #3, !dbg !56
  %448 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %445, !dbg !56
  %449 = bitcast float %442 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %448, <1 x i32> %449, i1 %443) #3, !dbg !56
  %450 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 128), i64 %445, !dbg !56
  %451 = bitcast float %432 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %450, <1 x i32> %451, i1 %443) #3, !dbg !56
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  %452 = icmp slt i32 %12, 16, !dbg !56
  %453 = sext i32 %12 to i64, !dbg !56
  %454 = getelementptr float, ptr addrspace(3) @global_smem, i64 %453, !dbg !56
  %455 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %454, i1 %452) #3, !dbg !56
  %456 = bitcast i32 %455 to float, !dbg !56
  %457 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), i64 %453, !dbg !56
  %458 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %457, i1 %452) #3, !dbg !56
  %459 = bitcast i32 %458 to float, !dbg !56
  %460 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 128), i64 %453, !dbg !56
  %461 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %460, i1 %452) #3, !dbg !56
  %462 = bitcast i32 %461 to float, !dbg !56
  %463 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %455, i32 8, i32 31), !dbg !56
  %464 = bitcast i32 %463 to float, !dbg !56
  %465 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %458, i32 8, i32 31), !dbg !56
  %466 = bitcast i32 %465 to float, !dbg !56
  %467 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %461, i32 8, i32 31), !dbg !56
  %468 = bitcast i32 %467 to float, !dbg !56
  %469 = fsub float %464, %456, !dbg !58
  %470 = fadd float %462, %468, !dbg !60
  %471 = fcmp oeq float %470, 0.000000e+00, !dbg !61
  %472 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %468, float %470) #3, !dbg !62
  %473 = select i1 %471, float 0.000000e+00, float %472, !dbg !63
  %474 = fmul float %469, %473, !dbg !64
  %475 = fadd float %474, %456, !dbg !65
  %476 = fadd float %459, %466, !dbg !66
  %477 = fmul float %469, %469, !dbg !67
  %478 = fmul float %477, %462, !dbg !68
  %479 = fmul float %478, %473, !dbg !69
  %480 = fadd float %476, %479, !dbg !70
  %481 = bitcast float %475 to i32, !dbg !56
  %482 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %481, i32 4, i32 31), !dbg !56
  %483 = bitcast i32 %482 to float, !dbg !56
  %484 = bitcast float %480 to i32, !dbg !56
  %485 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %484, i32 4, i32 31), !dbg !56
  %486 = bitcast i32 %485 to float, !dbg !56
  %487 = bitcast float %470 to i32, !dbg !56
  %488 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %487, i32 4, i32 31), !dbg !56
  %489 = bitcast i32 %488 to float, !dbg !56
  %490 = fsub float %483, %475, !dbg !58
  %491 = fadd float %470, %489, !dbg !60
  %492 = fcmp oeq float %491, 0.000000e+00, !dbg !61
  %493 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %489, float %491) #3, !dbg !62
  %494 = select i1 %492, float 0.000000e+00, float %493, !dbg !63
  %495 = fmul float %490, %494, !dbg !64
  %496 = fadd float %475, %495, !dbg !65
  %497 = fadd float %480, %486, !dbg !66
  %498 = fmul float %490, %490, !dbg !67
  %499 = fmul float %470, %498, !dbg !68
  %500 = fmul float %494, %499, !dbg !69
  %501 = fadd float %497, %500, !dbg !70
  %502 = bitcast float %496 to i32, !dbg !56
  %503 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %502, i32 2, i32 31), !dbg !56
  %504 = bitcast i32 %503 to float, !dbg !56
  %505 = bitcast float %501 to i32, !dbg !56
  %506 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %505, i32 2, i32 31), !dbg !56
  %507 = bitcast i32 %506 to float, !dbg !56
  %508 = bitcast float %491 to i32, !dbg !56
  %509 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %508, i32 2, i32 31), !dbg !56
  %510 = bitcast i32 %509 to float, !dbg !56
  %511 = fsub float %504, %496, !dbg !58
  %512 = fadd float %491, %510, !dbg !60
  %513 = fcmp oeq float %512, 0.000000e+00, !dbg !61
  %514 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %510, float %512) #3, !dbg !62
  %515 = select i1 %513, float 0.000000e+00, float %514, !dbg !63
  %516 = fmul float %511, %515, !dbg !64
  %517 = fadd float %496, %516, !dbg !65
  %518 = fadd float %501, %507, !dbg !66
  %519 = fmul float %511, %511, !dbg !67
  %520 = fmul float %491, %519, !dbg !68
  %521 = fmul float %515, %520, !dbg !69
  %522 = fadd float %518, %521, !dbg !70
  %523 = bitcast float %517 to i32, !dbg !56
  %524 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %523, i32 1, i32 31), !dbg !56
  %525 = bitcast i32 %524 to float, !dbg !56
  %526 = bitcast float %522 to i32, !dbg !56
  %527 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %526, i32 1, i32 31), !dbg !56
  %528 = bitcast i32 %527 to float, !dbg !56
  %529 = bitcast float %512 to i32, !dbg !56
  %530 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %529, i32 1, i32 31), !dbg !56
  %531 = bitcast i32 %530 to float, !dbg !56
  %532 = fsub float %525, %517, !dbg !58
  %533 = fadd float %512, %531, !dbg !60
  %534 = fcmp oeq float %533, 0.000000e+00, !dbg !61
  %535 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %531, float %533) #3, !dbg !62
  %536 = select i1 %534, float 0.000000e+00, float %535, !dbg !63
  %537 = fmul float %532, %536, !dbg !64
  %538 = fadd float %517, %537, !dbg !65
  %539 = fadd float %522, %528, !dbg !66
  %540 = fmul float %532, %532, !dbg !67
  %541 = fmul float %512, %540, !dbg !68
  %542 = fmul float %536, %541, !dbg !69
  %543 = fadd float %539, %542, !dbg !70
  %544 = and i32 %12, 15, !dbg !56
  %545 = icmp eq i32 %544, 0, !dbg !56
  %546 = and i1 %452, %545, !dbg !56
  %547 = bitcast float %538 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %454, <1 x i32> %547, i1 %546) #3, !dbg !56
  %548 = bitcast float %543 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %457, <1 x i32> %548, i1 %546) #3, !dbg !56
  %549 = bitcast float %533 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %460, <1 x i32> %549, i1 %546) #3, !dbg !56
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  %550 = load i32, ptr addrspace(3) @global_smem, align 16, !dbg !56
  %551 = load i32, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 64), align 16, !dbg !56
  %552 = load i32, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i64 128), align 16, !dbg !56
  %553 = sext i32 %10 to i64, !dbg !71
  %554 = getelementptr float, ptr addrspace(1) %4, i64 %553, !dbg !71
  %555 = icmp eq i32 %13, 0, !dbg !72
  %556 = and i1 %555, %11, !dbg !72
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %550, ptr addrspace(1) %554, i1 %556) #3, !dbg !72
  %557 = getelementptr float, ptr addrspace(1) %5, i64 %553, !dbg !73
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %551, ptr addrspace(1) %557, i1 %556) #3, !dbg !74
  %558 = getelementptr float, ptr addrspace(1) %6, i64 %553, !dbg !75
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %552, ptr addrspace(1) %558, i1 %556) #3, !dbg !76
  ret void, !dbg !77
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cbelpqb2wwwhh4dgyzhxx5epdiqibzv5qxcdkt26kklbj5vnzj7q.py", directory: "inductor_cache/be")
!4 = !{ptr @triton_red_fused__unsafe_index_convolution_native_group_norm_35, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused__unsafe_index_convolution_native_group_norm_35, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused__unsafe_index_convolution_native_group_norm_35", linkageName: "triton_red_fused__unsafe_index_convolution_native_group_norm_35", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 33, scope: !7)
!13 = !DILocation(line: 27, column: 19, scope: !7)
!14 = !DILocation(line: 26, column: 19, scope: !7)
!15 = !DILocation(line: 28, column: 26, scope: !7)
!16 = !DILocation(line: 29, column: 31, scope: !7)
!17 = !DILocation(line: 29, column: 36, scope: !7)
!18 = !DILocation(line: 41, column: 42, scope: !7)
!19 = !DILocation(line: 54, column: 71, scope: !7)
!20 = !DILocation(line: 54, column: 65, scope: !7)
!21 = !DILocation(line: 63, column: 40, scope: !7)
!22 = !DILocation(line: 34, column: 36, scope: !7)
!23 = !DILocation(line: 37, column: 23, scope: !7)
!24 = !DILocation(line: 38, column: 31, scope: !7)
!25 = !DILocation(line: 41, column: 39, scope: !7)
!26 = !DILocation(line: 41, column: 34, scope: !7)
!27 = !DILocation(line: 41, column: 47, scope: !7)
!28 = !DILocation(line: 42, column: 34, scope: !7)
!29 = !DILocation(line: 42, column: 39, scope: !7)
!30 = !DILocation(line: 43, column: 39, scope: !7)
!31 = !DILocation(line: 47, column: 36, scope: !7)
!32 = !DILocation(line: 50, column: 36, scope: !7)
!33 = !DILocation(line: 53, column: 39, scope: !7)
!34 = !DILocation(line: 54, column: 46, scope: !7)
!35 = !DILocation(line: 54, column: 58, scope: !7)
!36 = !DILocation(line: 54, column: 35, scope: !7)
!37 = !DILocation(line: 54, column: 76, scope: !7)
!38 = !DILocation(line: 55, column: 24, scope: !7)
!39 = !DILocation(line: 58, column: 66, scope: !7)
!40 = !DILocation(line: 178, column: 7, scope: !41, inlinedAt: !43)
!41 = distinct !DILexicalBlockFile(scope: !7, file: !42, discriminator: 0)
!42 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!43 = !DILocation(line: 58, column: 55, scope: !7)
!44 = !DILocation(line: 183, column: 24, scope: !41, inlinedAt: !43)
!45 = !DILocation(line: 184, column: 30, scope: !41, inlinedAt: !43)
!46 = !DILocation(line: 185, column: 34, scope: !41, inlinedAt: !43)
!47 = !DILocation(line: 185, column: 26, scope: !41, inlinedAt: !43)
!48 = !DILocation(line: 186, column: 39, scope: !41, inlinedAt: !43)
!49 = !DILocation(line: 186, column: 31, scope: !41, inlinedAt: !43)
!50 = !DILocation(line: 186, column: 22, scope: !41, inlinedAt: !43)
!51 = !DILocation(line: 60, column: 54, scope: !7)
!52 = !DILocation(line: 61, column: 50, scope: !7)
!53 = !DILocation(line: 62, column: 58, scope: !7)
!54 = !DILocation(line: 63, column: 29, scope: !7)
!55 = !DILocation(line: 63, column: 52, scope: !7)
!56 = !DILocation(line: 204, column: 46, scope: !41, inlinedAt: !57)
!57 = !DILocation(line: 65, column: 44, scope: !7)
!58 = !DILocation(line: 192, column: 21, scope: !59, inlinedAt: !57)
!59 = distinct !DILexicalBlockFile(scope: !41, file: !42, discriminator: 0)
!60 = !DILocation(line: 193, column: 28, scope: !59, inlinedAt: !57)
!61 = !DILocation(line: 194, column: 39, scope: !59, inlinedAt: !57)
!62 = !DILocation(line: 194, column: 60, scope: !59, inlinedAt: !57)
!63 = !DILocation(line: 194, column: 49, scope: !59, inlinedAt: !57)
!64 = !DILocation(line: 196, column: 25, scope: !59, inlinedAt: !57)
!65 = !DILocation(line: 196, column: 17, scope: !59, inlinedAt: !57)
!66 = !DILocation(line: 197, column: 15, scope: !59, inlinedAt: !57)
!67 = !DILocation(line: 197, column: 30, scope: !59, inlinedAt: !57)
!68 = !DILocation(line: 197, column: 38, scope: !59, inlinedAt: !57)
!69 = !DILocation(line: 197, column: 49, scope: !59, inlinedAt: !57)
!70 = !DILocation(line: 197, column: 22, scope: !59, inlinedAt: !57)
!71 = !DILocation(line: 70, column: 25, scope: !7)
!72 = !DILocation(line: 70, column: 37, scope: !7)
!73 = !DILocation(line: 71, column: 25, scope: !7)
!74 = !DILocation(line: 71, column: 37, scope: !7)
!75 = !DILocation(line: 72, column: 25, scope: !7)
!76 = !DILocation(line: 72, column: 37, scope: !7)
!77 = !DILocation(line: 72, column: 4, scope: !7)
