; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %10 = shl i32 %9, 8, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 252, !dbg !12
  %14 = and i32 %11, 255, !dbg !12
  %15 = or disjoint i32 %10, %13, !dbg !13
  %16 = or disjoint i32 %10, %14, !dbg !13
  %17 = icmp slt i32 %15, 512, !dbg !14
  %18 = icmp slt i32 %16, 512, !dbg !14
  %19 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %20 = shl i32 %19, 4, !dbg !16
  %.lobit4 = lshr i32 %11, 6, !dbg !17
  %21 = and i32 %.lobit4, 3, !dbg !17
  %22 = or disjoint i32 %20, %21, !dbg !18
  %23 = or disjoint i32 %22, 4, !dbg !18
  %24 = or disjoint i32 %22, 8, !dbg !18
  %25 = or disjoint i32 %22, 12, !dbg !18
  %26 = icmp slt i32 %22, 64, !dbg !19
  %27 = icmp slt i32 %23, 64, !dbg !19
  %28 = icmp slt i32 %24, 64, !dbg !19
  %29 = icmp slt i32 %25, 64, !dbg !19
  %.frozen = freeze i32 %15, !dbg !20
  %30 = sdiv i32 %.frozen, 128, !dbg !20
  %31 = mul i32 %30, 128, !dbg !21
  %.decomposed = sub i32 %.frozen, %31, !dbg !21
  %32 = srem i32 %16, 128, !dbg !21
  %33 = shl i32 %22, 7, !dbg !22
  %34 = shl i32 %23, 7, !dbg !22
  %35 = shl i32 %24, 7, !dbg !22
  %36 = shl i32 %25, 7, !dbg !22
  %37 = shl i32 %30, 13, !dbg !23
  %38 = add i32 %37, %.decomposed, !dbg !24
  %39 = add i32 %38, %33, !dbg !25
  %40 = add i32 %38, %34, !dbg !25
  %41 = add i32 %38, %35, !dbg !25
  %42 = add i32 %38, %36, !dbg !25
  %43 = sext i32 %39 to i64, !dbg !26
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !26
  %45 = sext i32 %40 to i64, !dbg !26
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !26
  %47 = sext i32 %41 to i64, !dbg !26
  %48 = getelementptr float, ptr addrspace(1) %0, i64 %47, !dbg !26
  %49 = sext i32 %42 to i64, !dbg !26
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !26
  %51 = and i1 %17, %26, !dbg !27
  %52 = and i1 %27, %17, !dbg !27
  %53 = and i1 %28, %17, !dbg !27
  %54 = and i1 %29, %17, !dbg !27
  %55 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %44, i1 %51) #4, !dbg !28
  %56 = extractvalue { i32, i32, i32, i32 } %55, 0, !dbg !28
  %57 = extractvalue { i32, i32, i32, i32 } %55, 1, !dbg !28
  %58 = extractvalue { i32, i32, i32, i32 } %55, 2, !dbg !28
  %59 = extractvalue { i32, i32, i32, i32 } %55, 3, !dbg !28
  %60 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %46, i1 %52) #4, !dbg !28
  %61 = extractvalue { i32, i32, i32, i32 } %60, 0, !dbg !28
  %62 = extractvalue { i32, i32, i32, i32 } %60, 1, !dbg !28
  %63 = extractvalue { i32, i32, i32, i32 } %60, 2, !dbg !28
  %64 = extractvalue { i32, i32, i32, i32 } %60, 3, !dbg !28
  %65 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %48, i1 %53) #4, !dbg !28
  %66 = extractvalue { i32, i32, i32, i32 } %65, 0, !dbg !28
  %67 = extractvalue { i32, i32, i32, i32 } %65, 1, !dbg !28
  %68 = extractvalue { i32, i32, i32, i32 } %65, 2, !dbg !28
  %69 = extractvalue { i32, i32, i32, i32 } %65, 3, !dbg !28
  %70 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %50, i1 %54) #4, !dbg !28
  %71 = extractvalue { i32, i32, i32, i32 } %70, 0, !dbg !28
  %72 = extractvalue { i32, i32, i32, i32 } %70, 1, !dbg !28
  %73 = extractvalue { i32, i32, i32, i32 } %70, 2, !dbg !28
  %74 = extractvalue { i32, i32, i32, i32 } %70, 3, !dbg !28
  %75 = and i32 %12, 1020, !dbg !28
  %76 = lshr i32 %12, 6, !dbg !28
  %77 = and i32 %76, 12, !dbg !28
  %78 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %77, !dbg !28
  %79 = getelementptr inbounds float, ptr addrspace(3) %78, i32 %75, !dbg !28
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %79, i32 %56, i32 %57, i32 %58, i32 %59, i1 true) #4, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %80 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !28
  %81 = load float, ptr addrspace(3) %80, align 4, !dbg !28
  %82 = getelementptr inbounds i8, ptr addrspace(3) %80, i32 1040, !dbg !28
  %83 = load float, ptr addrspace(3) %82, align 4, !dbg !28
  %84 = getelementptr inbounds i8, ptr addrspace(3) %80, i32 2080, !dbg !28
  %85 = load float, ptr addrspace(3) %84, align 4, !dbg !28
  %86 = getelementptr inbounds i8, ptr addrspace(3) %80, i32 3120, !dbg !28
  %87 = load float, ptr addrspace(3) %86, align 4, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %79, i32 %61, i32 %62, i32 %63, i32 %64, i1 true) #4, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %88 = load float, ptr addrspace(3) %80, align 4, !dbg !28
  %89 = load float, ptr addrspace(3) %82, align 4, !dbg !28
  %90 = load float, ptr addrspace(3) %84, align 4, !dbg !28
  %91 = load float, ptr addrspace(3) %86, align 4, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %79, i32 %66, i32 %67, i32 %68, i32 %69, i1 true) #4, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %92 = load float, ptr addrspace(3) %80, align 4, !dbg !28
  %93 = load float, ptr addrspace(3) %82, align 4, !dbg !28
  %94 = load float, ptr addrspace(3) %84, align 4, !dbg !28
  %95 = load float, ptr addrspace(3) %86, align 4, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %79, i32 %71, i32 %72, i32 %73, i32 %74, i1 true) #4, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %96 = load float, ptr addrspace(3) %80, align 4, !dbg !28
  %97 = load float, ptr addrspace(3) %82, align 4, !dbg !28
  %98 = load float, ptr addrspace(3) %84, align 4, !dbg !28
  %99 = load float, ptr addrspace(3) %86, align 4, !dbg !28
  %100 = sext i32 %32 to i64, !dbg !29
  %101 = getelementptr float, ptr addrspace(1) %1, i64 %100, !dbg !29
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %101, i1 %18) #4, !dbg !30
  %103 = getelementptr float, ptr addrspace(1) %2, i64 %100, !dbg !31
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %103, i1 %18) #4, !dbg !32
  %105 = bitcast i32 %104 to float, !dbg !32
  %106 = getelementptr float, ptr addrspace(1) %3, i64 %100, !dbg !33
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %106, i1 %18) #4, !dbg !34
  %108 = getelementptr float, ptr addrspace(1) %4, i64 %100, !dbg !35
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %108, i1 %18) #4, !dbg !36
  %110 = fadd float %105, 0x3EE4F8B580000000, !dbg !37
  %111 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !38
  %.not.i = icmp eq i32 %111, 0, !dbg !38
  %112 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !38
  %.not1.i = icmp eq i32 %112, 0, !dbg !38
  br i1 %.not.i, label %118, label %113, !dbg !38

113:                                              ; preds = %8
  br i1 %.not1.i, label %116, label %114, !dbg !38

114:                                              ; preds = %113
  %115 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %110) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

116:                                              ; preds = %113
  %117 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %110) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

118:                                              ; preds = %8
  br i1 %.not1.i, label %121, label %119, !dbg !38

119:                                              ; preds = %118
  %120 = tail call float @llvm.nvvm.sqrt.rn.f(float %110) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

121:                                              ; preds = %118
  %122 = tail call float @llvm.nvvm.sqrt.approx.f(float %110) #4, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

__nv_sqrtf.exit:                                  ; preds = %114, %116, %119, %121
  %.0.i = phi float [ %115, %114 ], [ %117, %116 ], [ %120, %119 ], [ %122, %121 ], !dbg !38
  %123 = bitcast i32 %102 to float, !dbg !30
  %124 = fsub float %99, %123, !dbg !39
  %125 = fsub float %98, %123, !dbg !39
  %126 = fsub float %97, %123, !dbg !39
  %127 = fsub float %96, %123, !dbg !39
  %128 = fsub float %95, %123, !dbg !39
  %129 = fsub float %94, %123, !dbg !39
  %130 = fsub float %93, %123, !dbg !39
  %131 = fsub float %92, %123, !dbg !39
  %132 = fsub float %91, %123, !dbg !39
  %133 = fsub float %90, %123, !dbg !39
  %134 = fsub float %89, %123, !dbg !39
  %135 = fsub float %88, %123, !dbg !39
  %136 = fsub float %87, %123, !dbg !39
  %137 = fsub float %85, %123, !dbg !39
  %138 = fsub float %83, %123, !dbg !39
  %139 = fsub float %81, %123, !dbg !39
  %140 = bitcast i32 %109 to float, !dbg !36
  %141 = bitcast i32 %107 to float, !dbg !34
  %142 = and i32 %12, 12, !dbg !12
  %143 = or disjoint i32 %20, %142, !dbg !18
  %144 = icmp slt i32 %143, 64, !dbg !19
  %145 = lshr i32 %11, 2, !dbg !12
  %146 = and i32 %145, 63, !dbg !12
  %147 = or disjoint i32 %146, %10, !dbg !13
  %148 = or disjoint i32 %147, 192, !dbg !13
  %149 = icmp slt i32 %148, 512, !dbg !14
  %150 = and i1 %149, %144, !dbg !27
  %151 = or disjoint i32 %147, 128, !dbg !13
  %152 = icmp slt i32 %151, 512, !dbg !14
  %153 = and i1 %152, %144, !dbg !27
  %154 = or disjoint i32 %147, 64, !dbg !13
  %155 = icmp slt i32 %154, 512, !dbg !14
  %156 = and i1 %155, %144, !dbg !27
  %157 = icmp slt i32 %147, 512, !dbg !14
  %158 = and i1 %157, %144, !dbg !27
  %159 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !40
  %160 = fmul float %139, %159, !dbg !41
  %161 = fmul float %138, %159, !dbg !41
  %162 = fmul float %137, %159, !dbg !41
  %163 = fmul float %136, %159, !dbg !41
  %164 = fmul float %135, %159, !dbg !41
  %165 = fmul float %134, %159, !dbg !41
  %166 = fmul float %133, %159, !dbg !41
  %167 = fmul float %132, %159, !dbg !41
  %168 = fmul float %131, %159, !dbg !41
  %169 = fmul float %130, %159, !dbg !41
  %170 = fmul float %129, %159, !dbg !41
  %171 = fmul float %128, %159, !dbg !41
  %172 = fmul float %127, %159, !dbg !41
  %173 = fmul float %126, %159, !dbg !41
  %174 = fmul float %125, %159, !dbg !41
  %175 = fmul float %124, %159, !dbg !41
  %176 = fmul float %160, %141, !dbg !42
  %177 = fmul float %161, %141, !dbg !42
  %178 = fmul float %162, %141, !dbg !42
  %179 = fmul float %163, %141, !dbg !42
  %180 = fmul float %164, %141, !dbg !42
  %181 = fmul float %165, %141, !dbg !42
  %182 = fmul float %166, %141, !dbg !42
  %183 = fmul float %167, %141, !dbg !42
  %184 = fmul float %168, %141, !dbg !42
  %185 = fmul float %169, %141, !dbg !42
  %186 = fmul float %170, %141, !dbg !42
  %187 = fmul float %171, %141, !dbg !42
  %188 = fmul float %172, %141, !dbg !42
  %189 = fmul float %173, %141, !dbg !42
  %190 = fmul float %174, %141, !dbg !42
  %191 = fmul float %175, %141, !dbg !42
  %192 = fadd float %176, %140, !dbg !43
  %193 = fadd float %177, %140, !dbg !43
  %194 = fadd float %178, %140, !dbg !43
  %195 = fadd float %179, %140, !dbg !43
  %196 = fadd float %180, %140, !dbg !43
  %197 = fadd float %181, %140, !dbg !43
  %198 = fadd float %182, %140, !dbg !43
  %199 = fadd float %183, %140, !dbg !43
  %200 = fadd float %184, %140, !dbg !43
  %201 = fadd float %185, %140, !dbg !43
  %202 = fadd float %186, %140, !dbg !43
  %203 = fadd float %187, %140, !dbg !43
  %204 = fadd float %188, %140, !dbg !43
  %205 = fadd float %189, %140, !dbg !43
  %206 = fadd float %190, %140, !dbg !43
  %207 = fadd float %191, %140, !dbg !43
  %208 = shl i32 %147, 6, !dbg !44
  %209 = shl i32 %154, 6, !dbg !44
  %210 = shl i32 %151, 6, !dbg !44
  %211 = shl i32 %148, 6, !dbg !44
  %212 = add i32 %143, %208, !dbg !45
  %213 = add i32 %143, %209, !dbg !45
  %214 = add i32 %143, %210, !dbg !45
  %215 = add i32 %143, %211, !dbg !45
  %216 = sext i32 %212 to i64, !dbg !46
  %217 = getelementptr float, ptr addrspace(1) %5, i64 %216, !dbg !46
  %218 = sext i32 %213 to i64, !dbg !46
  %219 = getelementptr float, ptr addrspace(1) %5, i64 %218, !dbg !46
  %220 = sext i32 %214 to i64, !dbg !46
  %221 = getelementptr float, ptr addrspace(1) %5, i64 %220, !dbg !46
  %222 = sext i32 %215 to i64, !dbg !46
  %223 = getelementptr float, ptr addrspace(1) %5, i64 %222, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %224 = shl i32 %11, 4, !dbg !47
  %225 = and i32 %224, 4080, !dbg !47
  %226 = lshr exact i32 %225, 2, !dbg !47
  %227 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %226, !dbg !47
  %228 = getelementptr float, ptr addrspace(3) %227, i32 %225, !dbg !47
  %229 = bitcast float %192 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %228, <1 x i32> %229, i1 true) #4, !dbg !47
  %230 = or disjoint i32 %225, 1, !dbg !47
  %231 = getelementptr float, ptr addrspace(3) %227, i32 %230, !dbg !47
  %232 = bitcast float %193 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %231, <1 x i32> %232, i1 true) #4, !dbg !47
  %233 = or disjoint i32 %225, 2, !dbg !47
  %234 = getelementptr float, ptr addrspace(3) %227, i32 %233, !dbg !47
  %235 = bitcast float %194 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %234, <1 x i32> %235, i1 true) #4, !dbg !47
  %236 = or disjoint i32 %225, 3, !dbg !47
  %237 = getelementptr float, ptr addrspace(3) %227, i32 %236, !dbg !47
  %238 = bitcast float %195 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %237, <1 x i32> %238, i1 true) #4, !dbg !47
  %239 = or disjoint i32 %225, 4, !dbg !47
  %240 = getelementptr float, ptr addrspace(3) %227, i32 %239, !dbg !47
  %241 = bitcast float %196 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %240, <1 x i32> %241, i1 true) #4, !dbg !47
  %242 = or disjoint i32 %225, 5, !dbg !47
  %243 = getelementptr float, ptr addrspace(3) %227, i32 %242, !dbg !47
  %244 = bitcast float %197 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %243, <1 x i32> %244, i1 true) #4, !dbg !47
  %245 = or disjoint i32 %225, 6, !dbg !47
  %246 = getelementptr float, ptr addrspace(3) %227, i32 %245, !dbg !47
  %247 = bitcast float %198 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %246, <1 x i32> %247, i1 true) #4, !dbg !47
  %248 = or disjoint i32 %225, 7, !dbg !47
  %249 = getelementptr float, ptr addrspace(3) %227, i32 %248, !dbg !47
  %250 = bitcast float %199 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %249, <1 x i32> %250, i1 true) #4, !dbg !47
  %251 = or disjoint i32 %225, 8, !dbg !47
  %252 = getelementptr float, ptr addrspace(3) %227, i32 %251, !dbg !47
  %253 = bitcast float %200 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %252, <1 x i32> %253, i1 true) #4, !dbg !47
  %254 = or disjoint i32 %225, 9, !dbg !47
  %255 = getelementptr float, ptr addrspace(3) %227, i32 %254, !dbg !47
  %256 = bitcast float %201 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %255, <1 x i32> %256, i1 true) #4, !dbg !47
  %257 = or disjoint i32 %225, 10, !dbg !47
  %258 = getelementptr float, ptr addrspace(3) %227, i32 %257, !dbg !47
  %259 = bitcast float %202 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %258, <1 x i32> %259, i1 true) #4, !dbg !47
  %260 = or disjoint i32 %225, 11, !dbg !47
  %261 = getelementptr float, ptr addrspace(3) %227, i32 %260, !dbg !47
  %262 = bitcast float %203 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %261, <1 x i32> %262, i1 true) #4, !dbg !47
  %263 = or disjoint i32 %225, 12, !dbg !47
  %264 = getelementptr float, ptr addrspace(3) %227, i32 %263, !dbg !47
  %265 = bitcast float %204 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %264, <1 x i32> %265, i1 true) #4, !dbg !47
  %266 = or disjoint i32 %225, 13, !dbg !47
  %267 = getelementptr float, ptr addrspace(3) %227, i32 %266, !dbg !47
  %268 = bitcast float %205 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %267, <1 x i32> %268, i1 true) #4, !dbg !47
  %269 = or disjoint i32 %225, 14, !dbg !47
  %270 = getelementptr float, ptr addrspace(3) %227, i32 %269, !dbg !47
  %271 = bitcast float %206 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %270, <1 x i32> %271, i1 true) #4, !dbg !47
  %272 = or disjoint i32 %225, 15, !dbg !47
  %273 = getelementptr float, ptr addrspace(3) %227, i32 %272, !dbg !47
  %274 = bitcast float %207 to <1 x i32>, !dbg !47
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %273, <1 x i32> %274, i1 true) #4, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %275 = lshr i32 %75, 4, !dbg !47
  %276 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %275, !dbg !47
  %277 = getelementptr inbounds float, ptr addrspace(3) %276, i32 %75, !dbg !47
  %278 = load i32, ptr addrspace(3) %277, align 4, !dbg !47
  %279 = or disjoint i32 %75, 1, !dbg !47
  %280 = getelementptr inbounds float, ptr addrspace(3) %276, i32 %279, !dbg !47
  %281 = load i32, ptr addrspace(3) %280, align 4, !dbg !47
  %282 = or disjoint i32 %75, 2, !dbg !47
  %283 = getelementptr inbounds float, ptr addrspace(3) %276, i32 %282, !dbg !47
  %284 = load i32, ptr addrspace(3) %283, align 4, !dbg !47
  %285 = or disjoint i32 %75, 3, !dbg !47
  %286 = getelementptr inbounds float, ptr addrspace(3) %276, i32 %285, !dbg !47
  %287 = load i32, ptr addrspace(3) %286, align 4, !dbg !47
  %288 = or disjoint i32 %75, 1024, !dbg !47
  %289 = lshr i32 %288, 4, !dbg !47
  %290 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %289, !dbg !47
  %291 = getelementptr inbounds float, ptr addrspace(3) %290, i32 %288, !dbg !47
  %292 = load i32, ptr addrspace(3) %291, align 4, !dbg !47
  %293 = or disjoint i32 %75, 1025, !dbg !47
  %294 = lshr i32 %293, 4, !dbg !47
  %295 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %294, !dbg !47
  %296 = getelementptr inbounds float, ptr addrspace(3) %295, i32 %293, !dbg !47
  %297 = load i32, ptr addrspace(3) %296, align 4, !dbg !47
  %298 = or disjoint i32 %75, 1026, !dbg !47
  %299 = lshr i32 %298, 4, !dbg !47
  %300 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %299, !dbg !47
  %301 = getelementptr inbounds float, ptr addrspace(3) %300, i32 %298, !dbg !47
  %302 = load i32, ptr addrspace(3) %301, align 4, !dbg !47
  %303 = or disjoint i32 %75, 1027, !dbg !47
  %304 = lshr i32 %303, 4, !dbg !47
  %305 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %304, !dbg !47
  %306 = getelementptr inbounds float, ptr addrspace(3) %305, i32 %303, !dbg !47
  %307 = load i32, ptr addrspace(3) %306, align 4, !dbg !47
  %308 = or disjoint i32 %75, 2048, !dbg !47
  %309 = lshr i32 %308, 4, !dbg !47
  %310 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %309, !dbg !47
  %311 = getelementptr inbounds float, ptr addrspace(3) %310, i32 %308, !dbg !47
  %312 = load i32, ptr addrspace(3) %311, align 4, !dbg !47
  %313 = or disjoint i32 %75, 2049, !dbg !47
  %314 = lshr i32 %313, 4, !dbg !47
  %315 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %314, !dbg !47
  %316 = getelementptr inbounds float, ptr addrspace(3) %315, i32 %313, !dbg !47
  %317 = load i32, ptr addrspace(3) %316, align 4, !dbg !47
  %318 = or disjoint i32 %75, 2050, !dbg !47
  %319 = lshr i32 %318, 4, !dbg !47
  %320 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %319, !dbg !47
  %321 = getelementptr inbounds float, ptr addrspace(3) %320, i32 %318, !dbg !47
  %322 = load i32, ptr addrspace(3) %321, align 4, !dbg !47
  %323 = or disjoint i32 %75, 2051, !dbg !47
  %324 = lshr i32 %323, 4, !dbg !47
  %325 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %324, !dbg !47
  %326 = getelementptr inbounds float, ptr addrspace(3) %325, i32 %323, !dbg !47
  %327 = load i32, ptr addrspace(3) %326, align 4, !dbg !47
  %328 = or disjoint i32 %75, 3072, !dbg !47
  %329 = lshr i32 %328, 4, !dbg !47
  %330 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %329, !dbg !47
  %331 = getelementptr inbounds float, ptr addrspace(3) %330, i32 %328, !dbg !47
  %332 = load i32, ptr addrspace(3) %331, align 4, !dbg !47
  %333 = or disjoint i32 %75, 3073, !dbg !47
  %334 = lshr i32 %333, 4, !dbg !47
  %335 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %334, !dbg !47
  %336 = getelementptr inbounds float, ptr addrspace(3) %335, i32 %333, !dbg !47
  %337 = load i32, ptr addrspace(3) %336, align 4, !dbg !47
  %338 = or disjoint i32 %75, 3074, !dbg !47
  %339 = lshr i32 %338, 4, !dbg !47
  %340 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %339, !dbg !47
  %341 = getelementptr inbounds float, ptr addrspace(3) %340, i32 %338, !dbg !47
  %342 = load i32, ptr addrspace(3) %341, align 4, !dbg !47
  %343 = or disjoint i32 %75, 3075, !dbg !47
  %344 = lshr i32 %343, 4, !dbg !47
  %345 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %344, !dbg !47
  %346 = getelementptr inbounds float, ptr addrspace(3) %345, i32 %343, !dbg !47
  %347 = load i32, ptr addrspace(3) %346, align 4, !dbg !47
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %278, i32 %281, i32 %284, i32 %287, ptr addrspace(1) %217, i1 %158) #4, !dbg !47
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %292, i32 %297, i32 %302, i32 %307, ptr addrspace(1) %219, i1 %156) #4, !dbg !47
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %312, i32 %317, i32 %322, i32 %327, ptr addrspace(1) %221, i1 %153) #4, !dbg !47
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %332, i32 %337, i32 %342, i32 %347, ptr addrspace(1) %223, i1 %150) #4, !dbg !47
  ret void, !dbg !48
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c7zcplnosgklv7l4atxuvtmkulzfmhez6l2eal73fgbi5limio5r.py", directory: "inductor_cache/7z")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_6, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_6, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_6", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_6", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 39, scope: !7)
!23 = !DILocation(line: 32, column: 49, scope: !7)
!24 = !DILocation(line: 32, column: 35, scope: !7)
!25 = !DILocation(line: 32, column: 44, scope: !7)
!26 = !DILocation(line: 32, column: 30, scope: !7)
!27 = !DILocation(line: 32, column: 62, scope: !7)
!28 = !DILocation(line: 32, column: 54, scope: !7)
!29 = !DILocation(line: 33, column: 30, scope: !7)
!30 = !DILocation(line: 33, column: 35, scope: !7)
!31 = !DILocation(line: 34, column: 30, scope: !7)
!32 = !DILocation(line: 34, column: 35, scope: !7)
!33 = !DILocation(line: 35, column: 31, scope: !7)
!34 = !DILocation(line: 35, column: 36, scope: !7)
!35 = !DILocation(line: 36, column: 31, scope: !7)
!36 = !DILocation(line: 36, column: 36, scope: !7)
!37 = !DILocation(line: 39, column: 18, scope: !7)
!38 = !DILocation(line: 40, column: 26, scope: !7)
!39 = !DILocation(line: 37, column: 18, scope: !7)
!40 = !DILocation(line: 42, column: 18, scope: !7)
!41 = !DILocation(line: 45, column: 19, scope: !7)
!42 = !DILocation(line: 46, column: 20, scope: !7)
!43 = !DILocation(line: 47, column: 20, scope: !7)
!44 = !DILocation(line: 48, column: 33, scope: !7)
!45 = !DILocation(line: 48, column: 30, scope: !7)
!46 = !DILocation(line: 48, column: 25, scope: !7)
!47 = !DILocation(line: 48, column: 45, scope: !7)
!48 = !DILocation(line: 48, column: 4, scope: !7)
