; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_add_constant_pad_nd_convolution_16(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %7 = shl i32 %6, 9, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 1, !dbg !12
  %10 = and i32 %9, 510, !dbg !12
  %11 = or disjoint i32 %7, %10, !dbg !13
  %12 = or disjoint i32 %11, 1, !dbg !13
  %13 = icmp slt i32 %11, 295936, !dbg !14
  %14 = sdiv i32 %11, 17, !dbg !15
  %15 = sdiv i32 %12, 17, !dbg !15
  %16 = sdiv i32 %11, 289, !dbg !16
  %17 = sdiv i32 %12, 289, !dbg !16
  %18 = srem i32 %16, 256, !dbg !17
  %19 = srem i32 %17, 256, !dbg !17
  %20 = insertelement <2 x i32> poison, i32 %11, i64 0, !dbg !18
  %21 = insertelement <2 x i32> %20, i32 %14, i64 1, !dbg !18
  %22 = srem <2 x i32> %21, splat (i32 17), !dbg !18
  %23 = icmp slt <2 x i32> %22, splat (i32 16), !dbg !19
  %24 = insertelement <2 x i32> poison, i32 %12, i64 0, !dbg !18
  %25 = insertelement <2 x i32> %24, i32 %15, i64 1, !dbg !18
  %26 = srem <2 x i32> %25, splat (i32 17), !dbg !18
  %27 = icmp slt <2 x i32> %26, splat (i32 16), !dbg !19
  %shift = shufflevector <2 x i1> %23, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !20
  %28 = and <2 x i1> %23, %shift, !dbg !20
  %29 = extractelement <2 x i1> %28, i64 0, !dbg !20
  %shift1 = shufflevector <2 x i1> %27, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !20
  %30 = and <2 x i1> %27, %shift1, !dbg !20
  %31 = extractelement <2 x i1> %30, i64 0, !dbg !20
  %32 = extractelement <2 x i32> %22, i64 1, !dbg !21
  %33 = shl nsw i32 %32, 4, !dbg !21
  %34 = extractelement <2 x i32> %26, i64 1, !dbg !21
  %35 = shl nsw i32 %34, 4, !dbg !21
  %36 = shl nsw i32 %16, 8, !dbg !22
  %37 = shl nsw i32 %17, 8, !dbg !22
  %38 = extractelement <2 x i32> %22, i64 0, !dbg !23
  %39 = add nsw i32 %36, %38, !dbg !23
  %40 = add nsw i32 %39, %33, !dbg !24
  %41 = extractelement <2 x i32> %26, i64 0, !dbg !23
  %42 = add nsw i32 %37, %41, !dbg !23
  %43 = add nsw i32 %42, %35, !dbg !24
  %44 = sext i32 %40 to i64, !dbg !25
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !25
  %46 = sext i32 %43 to i64, !dbg !25
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !25
  %48 = and i1 %13, %29, !dbg !26
  %49 = and i1 %31, %13, !dbg !26
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %45, i1 %48, i32 0, i1 %48) #1, !dbg !27
  %51 = bitcast i32 %50 to float, !dbg !27
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %47, i1 %49, i32 0, i1 %49) #1, !dbg !27
  %53 = bitcast i32 %52 to float, !dbg !27
  %54 = getelementptr float, ptr addrspace(1) %1, i64 %44, !dbg !28
  %55 = getelementptr float, ptr addrspace(1) %1, i64 %46, !dbg !28
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %54, i1 %48, i32 0, i1 %48) #1, !dbg !29
  %57 = bitcast i32 %56 to float, !dbg !29
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %55, i1 %49, i32 0, i1 %49) #1, !dbg !29
  %59 = bitcast i32 %58 to float, !dbg !29
  %60 = sext i32 %18 to i64, !dbg !30
  %61 = getelementptr float, ptr addrspace(1) %2, i64 %60, !dbg !30
  %62 = sext i32 %19 to i64, !dbg !30
  %63 = getelementptr float, ptr addrspace(1) %2, i64 %62, !dbg !30
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %61, i1 %48, i32 0, i1 %48) #1, !dbg !31
  %65 = bitcast i32 %64 to float, !dbg !31
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %63, i1 %49, i32 0, i1 %49) #1, !dbg !31
  %67 = bitcast i32 %66 to float, !dbg !31
  %68 = fadd float %57, %65, !dbg !32
  %69 = fadd float %59, %67, !dbg !32
  %70 = fadd float %68, %51, !dbg !33
  %71 = fadd float %69, %53, !dbg !33
  %72 = sext i32 %11 to i64, !dbg !34
  %73 = getelementptr float, ptr addrspace(1) %3, i64 %72, !dbg !34
  %74 = bitcast float %70 to i32, !dbg !35
  %75 = select i1 %29, i32 %74, i32 0, !dbg !36
  %76 = bitcast float %71 to i32, !dbg !35
  %77 = select i1 %31, i32 %76, i32 0, !dbg !36
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %75, i32 %77, ptr addrspace(1) %73, i1 %13) #1, !dbg !35
  ret void, !dbg !37
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "csds4e6ftid3yql6bsk4qa4benqeay7vtodpyhsfcl2z5hppm5pb.py", directory: "inductor_cache/sd")
!4 = !{ptr @triton_poi_fused_add_constant_pad_nd_convolution_16, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_constant_pad_nd_convolution_16, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_constant_pad_nd_convolution_16", linkageName: "triton_poi_fused_add_constant_pad_nd_convolution_16", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 27, column: 28, scope: !7)
!18 = !DILocation(line: 25, column: 19, scope: !7)
!19 = !DILocation(line: 33, column: 18, scope: !7)
!20 = !DILocation(line: 34, column: 18, scope: !7)
!21 = !DILocation(line: 35, column: 38, scope: !7)
!22 = !DILocation(line: 35, column: 47, scope: !7)
!23 = !DILocation(line: 35, column: 35, scope: !7)
!24 = !DILocation(line: 35, column: 43, scope: !7)
!25 = !DILocation(line: 35, column: 30, scope: !7)
!26 = !DILocation(line: 35, column: 59, scope: !7)
!27 = !DILocation(line: 35, column: 52, scope: !7)
!28 = !DILocation(line: 36, column: 30, scope: !7)
!29 = !DILocation(line: 36, column: 52, scope: !7)
!30 = !DILocation(line: 37, column: 30, scope: !7)
!31 = !DILocation(line: 37, column: 35, scope: !7)
!32 = !DILocation(line: 38, column: 18, scope: !7)
!33 = !DILocation(line: 39, column: 19, scope: !7)
!34 = !DILocation(line: 42, column: 25, scope: !7)
!35 = !DILocation(line: 42, column: 37, scope: !7)
!36 = !DILocation(line: 41, column: 34, scope: !7)
!37 = !DILocation(line: 42, column: 4, scope: !7)
