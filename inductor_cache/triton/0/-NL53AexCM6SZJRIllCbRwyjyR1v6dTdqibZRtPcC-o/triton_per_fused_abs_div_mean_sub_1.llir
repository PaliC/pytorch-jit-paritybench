; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused_abs_div_mean_sub_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %8 = shl i32 %7, 2, !dbg !10
  %9 = and i32 %8, 252, !dbg !10
  %10 = lshr i32 %9, 6, !dbg !11
  %11 = zext nneg i32 %9 to i64, !dbg !12
  %12 = getelementptr float, ptr addrspace(1) %1, i64 %11, !dbg !12
  %13 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %12, i1 true) #5, !dbg !13
  %14 = extractvalue { i32, i32, i32, i32 } %13, 0, !dbg !13
  %15 = extractvalue { i32, i32, i32, i32 } %13, 1, !dbg !13
  %16 = extractvalue { i32, i32, i32, i32 } %13, 2, !dbg !13
  %17 = extractvalue { i32, i32, i32, i32 } %13, 3, !dbg !13
  %18 = bitcast i32 %14 to float, !dbg !13
  %19 = bitcast i32 %15 to float, !dbg !13
  %20 = bitcast i32 %16 to float, !dbg !13
  %21 = bitcast i32 %17 to float, !dbg !13
  %22 = zext nneg i32 %10 to i64, !dbg !14
  %23 = getelementptr float, ptr addrspace(1) %2, i64 %22, !dbg !14
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 true) #5, !dbg !15
  %25 = bitcast i32 %24 to float, !dbg !15
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 true) #5, !dbg !15
  %27 = bitcast i32 %26 to float, !dbg !15
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 true) #5, !dbg !15
  %29 = bitcast i32 %28 to float, !dbg !15
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %23, i1 true) #5, !dbg !15
  %31 = bitcast i32 %30 to float, !dbg !15
  %32 = getelementptr float, ptr addrspace(1) %3, i64 %11, !dbg !16
  %33 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %32, i1 true) #5, !dbg !17
  %34 = getelementptr float, ptr addrspace(1) %4, i64 %22, !dbg !18
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #5, !dbg !19
  %36 = bitcast i32 %35 to float, !dbg !19
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #5, !dbg !19
  %38 = bitcast i32 %37 to float, !dbg !19
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #5, !dbg !19
  %40 = bitcast i32 %39 to float, !dbg !19
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #5, !dbg !19
  %42 = bitcast i32 %41 to float, !dbg !19
  %43 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !20
  %.not.i = icmp eq i32 %43, 0, !dbg !20
  %44 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !20
  %.not1.i = icmp eq i32 %44, 0, !dbg !20
  br i1 %.not.i, label %50, label %45, !dbg !20

45:                                               ; preds = %6
  br i1 %.not1.i, label %48, label %46, !dbg !20

46:                                               ; preds = %45
  %47 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %25) #5, !dbg !20
  br label %__nv_sqrtf.exit, !dbg !20

48:                                               ; preds = %45
  %49 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %25) #5, !dbg !20
  br label %__nv_sqrtf.exit, !dbg !20

50:                                               ; preds = %6
  br i1 %.not1.i, label %53, label %51, !dbg !20

51:                                               ; preds = %50
  %52 = tail call float @llvm.nvvm.sqrt.rn.f(float %25) #5, !dbg !20
  br label %__nv_sqrtf.exit, !dbg !20

53:                                               ; preds = %50
  %54 = tail call float @llvm.nvvm.sqrt.approx.f(float %25) #5, !dbg !20
  br label %__nv_sqrtf.exit, !dbg !20

__nv_sqrtf.exit:                                  ; preds = %46, %48, %51, %53
  %.0.i = phi float [ %47, %46 ], [ %49, %48 ], [ %52, %51 ], [ %54, %53 ], !dbg !20
  %55 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !20
  %.not.i1 = icmp eq i32 %55, 0, !dbg !20
  %56 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !20
  %.not1.i4 = icmp eq i32 %56, 0, !dbg !20
  br i1 %.not.i1, label %62, label %57, !dbg !20

57:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %60, label %58, !dbg !20

58:                                               ; preds = %57
  %59 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %27) #5, !dbg !20
  br label %__nv_sqrtf.exit5, !dbg !20

60:                                               ; preds = %57
  %61 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %27) #5, !dbg !20
  br label %__nv_sqrtf.exit5, !dbg !20

62:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %65, label %63, !dbg !20

63:                                               ; preds = %62
  %64 = tail call float @llvm.nvvm.sqrt.rn.f(float %27) #5, !dbg !20
  br label %__nv_sqrtf.exit5, !dbg !20

65:                                               ; preds = %62
  %66 = tail call float @llvm.nvvm.sqrt.approx.f(float %27) #5, !dbg !20
  br label %__nv_sqrtf.exit5, !dbg !20

__nv_sqrtf.exit5:                                 ; preds = %58, %60, %63, %65
  %.0.i3 = phi float [ %59, %58 ], [ %61, %60 ], [ %64, %63 ], [ %66, %65 ], !dbg !20
  %67 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !20
  %.not.i6 = icmp eq i32 %67, 0, !dbg !20
  %68 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !20
  %.not1.i9 = icmp eq i32 %68, 0, !dbg !20
  br i1 %.not.i6, label %74, label %69, !dbg !20

69:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %72, label %70, !dbg !20

70:                                               ; preds = %69
  %71 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %29) #5, !dbg !20
  br label %__nv_sqrtf.exit10, !dbg !20

72:                                               ; preds = %69
  %73 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %29) #5, !dbg !20
  br label %__nv_sqrtf.exit10, !dbg !20

74:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %77, label %75, !dbg !20

75:                                               ; preds = %74
  %76 = tail call float @llvm.nvvm.sqrt.rn.f(float %29) #5, !dbg !20
  br label %__nv_sqrtf.exit10, !dbg !20

77:                                               ; preds = %74
  %78 = tail call float @llvm.nvvm.sqrt.approx.f(float %29) #5, !dbg !20
  br label %__nv_sqrtf.exit10, !dbg !20

__nv_sqrtf.exit10:                                ; preds = %70, %72, %75, %77
  %.0.i8 = phi float [ %71, %70 ], [ %73, %72 ], [ %76, %75 ], [ %78, %77 ], !dbg !20
  %79 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !20
  %.not.i11 = icmp eq i32 %79, 0, !dbg !20
  %80 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !20
  %.not1.i14 = icmp eq i32 %80, 0, !dbg !20
  br i1 %.not.i11, label %86, label %81, !dbg !20

81:                                               ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %84, label %82, !dbg !20

82:                                               ; preds = %81
  %83 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %31) #5, !dbg !20
  br label %__nv_sqrtf.exit15, !dbg !20

84:                                               ; preds = %81
  %85 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %31) #5, !dbg !20
  br label %__nv_sqrtf.exit15, !dbg !20

86:                                               ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %89, label %87, !dbg !20

87:                                               ; preds = %86
  %88 = tail call float @llvm.nvvm.sqrt.rn.f(float %31) #5, !dbg !20
  br label %__nv_sqrtf.exit15, !dbg !20

89:                                               ; preds = %86
  %90 = tail call float @llvm.nvvm.sqrt.approx.f(float %31) #5, !dbg !20
  br label %__nv_sqrtf.exit15, !dbg !20

__nv_sqrtf.exit15:                                ; preds = %82, %84, %87, %89
  %.0.i13 = phi float [ %83, %82 ], [ %85, %84 ], [ %88, %87 ], [ %90, %89 ], !dbg !20
  %91 = fcmp ogt float %.0.i, 0x3D71979980000000, !dbg !21
  %92 = fcmp ogt float %.0.i3, 0x3D71979980000000, !dbg !21
  %93 = fcmp ogt float %.0.i8, 0x3D71979980000000, !dbg !21
  %94 = fcmp ogt float %.0.i13, 0x3D71979980000000, !dbg !21
  %95 = fcmp uno float %.0.i, 0.000000e+00, !dbg !25
  %96 = fcmp uno float %.0.i3, 0.000000e+00, !dbg !25
  %97 = fcmp uno float %.0.i8, 0.000000e+00, !dbg !25
  %98 = fcmp uno float %.0.i13, 0.000000e+00, !dbg !25
  %99 = or i1 %91, %95, !dbg !26
  %100 = or i1 %92, %96, !dbg !26
  %101 = or i1 %93, %97, !dbg !26
  %102 = or i1 %94, %98, !dbg !26
  %103 = select i1 %99, float %.0.i, float 0x3D71979980000000, !dbg !27
  %104 = select i1 %100, float %.0.i3, float 0x3D71979980000000, !dbg !27
  %105 = select i1 %101, float %.0.i8, float 0x3D71979980000000, !dbg !27
  %106 = select i1 %102, float %.0.i13, float 0x3D71979980000000, !dbg !27
  %107 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %18, float %103) #5, !dbg !28
  %108 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %19, float %104) #5, !dbg !28
  %109 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %20, float %105) #5, !dbg !28
  %110 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %21, float %106) #5, !dbg !28
  %111 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !29
  %.not.i16 = icmp eq i32 %111, 0, !dbg !29
  %112 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !29
  %.not1.i19 = icmp eq i32 %112, 0, !dbg !29
  br i1 %.not.i16, label %118, label %113, !dbg !29

113:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %116, label %114, !dbg !29

114:                                              ; preds = %113
  %115 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %36) #5, !dbg !29
  br label %__nv_sqrtf.exit20, !dbg !29

116:                                              ; preds = %113
  %117 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %36) #5, !dbg !29
  br label %__nv_sqrtf.exit20, !dbg !29

118:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %121, label %119, !dbg !29

119:                                              ; preds = %118
  %120 = tail call float @llvm.nvvm.sqrt.rn.f(float %36) #5, !dbg !29
  br label %__nv_sqrtf.exit20, !dbg !29

121:                                              ; preds = %118
  %122 = tail call float @llvm.nvvm.sqrt.approx.f(float %36) #5, !dbg !29
  br label %__nv_sqrtf.exit20, !dbg !29

__nv_sqrtf.exit20:                                ; preds = %114, %116, %119, %121
  %.0.i18 = phi float [ %115, %114 ], [ %117, %116 ], [ %120, %119 ], [ %122, %121 ], !dbg !29
  %123 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !29
  %.not.i21 = icmp eq i32 %123, 0, !dbg !29
  %124 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !29
  %.not1.i24 = icmp eq i32 %124, 0, !dbg !29
  br i1 %.not.i21, label %130, label %125, !dbg !29

125:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %128, label %126, !dbg !29

126:                                              ; preds = %125
  %127 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %38) #5, !dbg !29
  br label %__nv_sqrtf.exit25, !dbg !29

128:                                              ; preds = %125
  %129 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %38) #5, !dbg !29
  br label %__nv_sqrtf.exit25, !dbg !29

130:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %133, label %131, !dbg !29

131:                                              ; preds = %130
  %132 = tail call float @llvm.nvvm.sqrt.rn.f(float %38) #5, !dbg !29
  br label %__nv_sqrtf.exit25, !dbg !29

133:                                              ; preds = %130
  %134 = tail call float @llvm.nvvm.sqrt.approx.f(float %38) #5, !dbg !29
  br label %__nv_sqrtf.exit25, !dbg !29

__nv_sqrtf.exit25:                                ; preds = %126, %128, %131, %133
  %.0.i23 = phi float [ %127, %126 ], [ %129, %128 ], [ %132, %131 ], [ %134, %133 ], !dbg !29
  %135 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !29
  %.not.i26 = icmp eq i32 %135, 0, !dbg !29
  %136 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !29
  %.not1.i29 = icmp eq i32 %136, 0, !dbg !29
  br i1 %.not.i26, label %142, label %137, !dbg !29

137:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %140, label %138, !dbg !29

138:                                              ; preds = %137
  %139 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %40) #5, !dbg !29
  br label %__nv_sqrtf.exit30, !dbg !29

140:                                              ; preds = %137
  %141 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %40) #5, !dbg !29
  br label %__nv_sqrtf.exit30, !dbg !29

142:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %145, label %143, !dbg !29

143:                                              ; preds = %142
  %144 = tail call float @llvm.nvvm.sqrt.rn.f(float %40) #5, !dbg !29
  br label %__nv_sqrtf.exit30, !dbg !29

145:                                              ; preds = %142
  %146 = tail call float @llvm.nvvm.sqrt.approx.f(float %40) #5, !dbg !29
  br label %__nv_sqrtf.exit30, !dbg !29

__nv_sqrtf.exit30:                                ; preds = %138, %140, %143, %145
  %.0.i28 = phi float [ %139, %138 ], [ %141, %140 ], [ %144, %143 ], [ %146, %145 ], !dbg !29
  %147 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !29
  %.not.i31 = icmp eq i32 %147, 0, !dbg !29
  %148 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !29
  %.not1.i34 = icmp eq i32 %148, 0, !dbg !29
  br i1 %.not.i31, label %154, label %149, !dbg !29

149:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %152, label %150, !dbg !29

150:                                              ; preds = %149
  %151 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %42) #5, !dbg !29
  br label %__nv_sqrtf.exit35, !dbg !29

152:                                              ; preds = %149
  %153 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %42) #5, !dbg !29
  br label %__nv_sqrtf.exit35, !dbg !29

154:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %157, label %155, !dbg !29

155:                                              ; preds = %154
  %156 = tail call float @llvm.nvvm.sqrt.rn.f(float %42) #5, !dbg !29
  br label %__nv_sqrtf.exit35, !dbg !29

157:                                              ; preds = %154
  %158 = tail call float @llvm.nvvm.sqrt.approx.f(float %42) #5, !dbg !29
  br label %__nv_sqrtf.exit35, !dbg !29

__nv_sqrtf.exit35:                                ; preds = %150, %152, %155, %157
  %.0.i33 = phi float [ %151, %150 ], [ %153, %152 ], [ %156, %155 ], [ %158, %157 ], !dbg !29
  %159 = extractvalue { i32, i32, i32, i32 } %33, 3, !dbg !17
  %160 = bitcast i32 %159 to float, !dbg !17
  %161 = extractvalue { i32, i32, i32, i32 } %33, 2, !dbg !17
  %162 = bitcast i32 %161 to float, !dbg !17
  %163 = extractvalue { i32, i32, i32, i32 } %33, 1, !dbg !17
  %164 = bitcast i32 %163 to float, !dbg !17
  %165 = extractvalue { i32, i32, i32, i32 } %33, 0, !dbg !17
  %166 = bitcast i32 %165 to float, !dbg !17
  %167 = lshr i32 %7, 5, !dbg !10
  %168 = and i32 %7, 31, !dbg !10
  %169 = fcmp ogt float %.0.i18, 0x3D71979980000000, !dbg !30
  %170 = fcmp ogt float %.0.i23, 0x3D71979980000000, !dbg !30
  %171 = fcmp ogt float %.0.i28, 0x3D71979980000000, !dbg !30
  %172 = fcmp ogt float %.0.i33, 0x3D71979980000000, !dbg !30
  %173 = fcmp uno float %.0.i18, 0.000000e+00, !dbg !32
  %174 = fcmp uno float %.0.i23, 0.000000e+00, !dbg !32
  %175 = fcmp uno float %.0.i28, 0.000000e+00, !dbg !32
  %176 = fcmp uno float %.0.i33, 0.000000e+00, !dbg !32
  %177 = or i1 %169, %173, !dbg !33
  %178 = or i1 %170, %174, !dbg !33
  %179 = or i1 %171, %175, !dbg !33
  %180 = or i1 %172, %176, !dbg !33
  %181 = select i1 %177, float %.0.i18, float 0x3D71979980000000, !dbg !34
  %182 = select i1 %178, float %.0.i23, float 0x3D71979980000000, !dbg !34
  %183 = select i1 %179, float %.0.i28, float 0x3D71979980000000, !dbg !34
  %184 = select i1 %180, float %.0.i33, float 0x3D71979980000000, !dbg !34
  %185 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %166, float %181) #5, !dbg !35
  %186 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %164, float %182) #5, !dbg !35
  %187 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %162, float %183) #5, !dbg !35
  %188 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %160, float %184) #5, !dbg !35
  %189 = fsub float %107, %185, !dbg !36
  %190 = fsub float %108, %186, !dbg !36
  %191 = fsub float %109, %187, !dbg !36
  %192 = fsub float %110, %188, !dbg !36
  %193 = tail call float @llvm.fabs.f32(float %189), !dbg !37
  %194 = tail call float @llvm.fabs.f32(float %190), !dbg !37
  %195 = tail call float @llvm.fabs.f32(float %191), !dbg !37
  %196 = tail call float @llvm.fabs.f32(float %192), !dbg !37
  %197 = fadd float %193, %194, !dbg !38
  %198 = fadd float %197, %195, !dbg !38
  %199 = fadd float %198, %196, !dbg !38
  %200 = bitcast float %199 to i32, !dbg !43
  %201 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %200, i32 16, i32 31), !dbg !43
  %202 = bitcast i32 %201 to float, !dbg !43
  %203 = fadd float %199, %202, !dbg !38
  %204 = bitcast float %203 to i32, !dbg !43
  %205 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %204, i32 8, i32 31), !dbg !43
  %206 = bitcast i32 %205 to float, !dbg !43
  %207 = fadd float %203, %206, !dbg !38
  %208 = bitcast float %207 to i32, !dbg !43
  %209 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %208, i32 4, i32 31), !dbg !43
  %210 = bitcast i32 %209 to float, !dbg !43
  %211 = fadd float %207, %210, !dbg !38
  %212 = bitcast float %211 to i32, !dbg !43
  %213 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %212, i32 2, i32 31), !dbg !43
  %214 = bitcast i32 %213 to float, !dbg !43
  %215 = fadd float %211, %214, !dbg !38
  %216 = bitcast float %215 to i32, !dbg !43
  %217 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %216, i32 1, i32 31), !dbg !43
  %218 = bitcast i32 %217 to float, !dbg !43
  %219 = fadd float %215, %218, !dbg !38
  %220 = icmp eq i32 %168, 0, !dbg !43
  %221 = and i32 %167, 1, !dbg !43
  %222 = zext nneg i32 %221 to i64, !dbg !43
  %223 = getelementptr float, ptr addrspace(3) @global_smem, i64 %222, !dbg !43
  %224 = bitcast float %219 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %223, <1 x i32> %224, i1 %220) #5, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %225 = icmp slt i32 %7, 2, !dbg !43
  %226 = sext i32 %7 to i64, !dbg !43
  %227 = getelementptr float, ptr addrspace(3) @global_smem, i64 %226, !dbg !43
  %228 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %227, i1 %225) #5, !dbg !43
  %229 = bitcast i32 %228 to float, !dbg !43
  %230 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %228, i32 1, i32 31), !dbg !43
  %231 = bitcast i32 %230 to float, !dbg !43
  %232 = fadd float %229, %231, !dbg !38
  %233 = and i32 %7, 1, !dbg !43
  %234 = icmp eq i32 %233, 0, !dbg !43
  %235 = and i1 %225, %234, !dbg !43
  %236 = bitcast float %232 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %227, <1 x i32> %236, i1 %235) #5, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %237 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !43
  %238 = fadd float %237, 0.000000e+00, !dbg !44
  %239 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %238, float 2.560000e+02) #5, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !47
  %urem = and i32 %7, 63, !dbg !48
  %240 = icmp eq i32 %urem, 0, !dbg !48
  %241 = bitcast float %239 to i32, !dbg !48
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %241, ptr addrspace(1) %0, i1 %240) #5, !dbg !48
  ret void, !dbg !49
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.fabs.f32(float) #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cue2nkmypeqcv3p4nj7qcs3vfcspzevqlv2iovxkfzelaqm6peej.py", directory: "inductor_cache/ue")
!4 = !{ptr @triton_per_fused_abs_div_mean_sub_1, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_abs_div_mean_sub_1, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_abs_div_mean_sub_1", linkageName: "triton_per_fused_abs_div_mean_sub_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 27, column: 26, scope: !7)
!11 = !DILocation(line: 31, column: 19, scope: !7)
!12 = !DILocation(line: 32, column: 30, scope: !7)
!13 = !DILocation(line: 32, column: 35, scope: !7)
!14 = !DILocation(line: 33, column: 30, scope: !7)
!15 = !DILocation(line: 33, column: 35, scope: !7)
!16 = !DILocation(line: 34, column: 30, scope: !7)
!17 = !DILocation(line: 34, column: 35, scope: !7)
!18 = !DILocation(line: 35, column: 30, scope: !7)
!19 = !DILocation(line: 35, column: 35, scope: !7)
!20 = !DILocation(line: 36, column: 26, scope: !7)
!21 = !DILocation(line: 118, column: 15, scope: !22, inlinedAt: !24)
!22 = distinct !DILexicalBlockFile(scope: !7, file: !23, discriminator: 0)
!23 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!24 = !DILocation(line: 38, column: 40, scope: !7)
!25 = !DILocation(line: 120, column: 21, scope: !22, inlinedAt: !24)
!26 = !DILocation(line: 120, column: 16, scope: !22, inlinedAt: !24)
!27 = !DILocation(line: 121, column: 29, scope: !22, inlinedAt: !24)
!28 = !DILocation(line: 39, column: 18, scope: !7)
!29 = !DILocation(line: 40, column: 26, scope: !7)
!30 = !DILocation(line: 118, column: 15, scope: !22, inlinedAt: !31)
!31 = !DILocation(line: 41, column: 40, scope: !7)
!32 = !DILocation(line: 120, column: 21, scope: !22, inlinedAt: !31)
!33 = !DILocation(line: 120, column: 16, scope: !22, inlinedAt: !31)
!34 = !DILocation(line: 121, column: 29, scope: !22, inlinedAt: !31)
!35 = !DILocation(line: 42, column: 19, scope: !7)
!36 = !DILocation(line: 43, column: 19, scope: !7)
!37 = !DILocation(line: 44, column: 24, scope: !7)
!38 = !DILocation(line: 256, column: 15, scope: !39, inlinedAt: !42)
!39 = distinct !DILexicalBlockFile(scope: !41, file: !40, discriminator: 0)
!40 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!41 = distinct !DILexicalBlockFile(scope: !7, file: !40, discriminator: 0)
!42 = !DILocation(line: 46, column: 59, scope: !7)
!43 = !DILocation(line: 267, column: 36, scope: !41, inlinedAt: !42)
!44 = !DILocation(line: 73, column: 15, scope: !22, inlinedAt: !45)
!45 = !DILocation(line: 46, column: 45, scope: !7)
!46 = !DILocation(line: 48, column: 20, scope: !7)
!47 = !DILocation(line: 49, column: 4, scope: !7)
!48 = !DILocation(line: 50, column: 63, scope: !7)
!49 = !DILocation(line: 50, column: 4, scope: !7)
