; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__unsafe_index_add_mul_sub_3(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, i32 %11) local_unnamed_addr !dbg !7 {
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %14 = shl i32 %13, 7, !dbg !11
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %16 = and i32 %15, 127, !dbg !12
  %17 = or disjoint i32 %14, %16, !dbg !13
  %18 = sdiv i32 %17, 64, !dbg !14
  %19 = srem i32 %18, 8, !dbg !15
  %.frozen = freeze i32 %17, !dbg !16
  %20 = sdiv i32 %.frozen, 8, !dbg !16
  %21 = srem i32 %20, 8, !dbg !17
  %22 = mul i32 %20, 8, !dbg !18
  %.decomposed = sub i32 %.frozen, %22, !dbg !18
  %23 = sdiv i32 %17, 512, !dbg !19
  %24 = sext i32 %19 to i64, !dbg !20
  %25 = getelementptr i64, ptr addrspace(1) %1, i64 %24, !dbg !20
  %26 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %25, i1 true) #1, !dbg !21
  %27 = sext i32 %21 to i64, !dbg !22
  %28 = getelementptr i64, ptr addrspace(1) %2, i64 %27, !dbg !22
  %29 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %28, i1 true) #1, !dbg !23
  %30 = sext i32 %.decomposed to i64, !dbg !24
  %31 = getelementptr i64, ptr addrspace(1) %3, i64 %30, !dbg !24
  %32 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %31, i1 true) #1, !dbg !25
  %33 = getelementptr i64, ptr addrspace(1) %5, i64 %30, !dbg !26
  %34 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %33, i1 true) #1, !dbg !27
  %35 = getelementptr float, ptr addrspace(1) %6, i64 %30, !dbg !28
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #1, !dbg !29
  %37 = getelementptr i64, ptr addrspace(1) %7, i64 %24, !dbg !30
  %38 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %37, i1 true) #1, !dbg !31
  %39 = getelementptr i64, ptr addrspace(1) %8, i64 %27, !dbg !32
  %40 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %39, i1 true) #1, !dbg !33
  %41 = getelementptr float, ptr addrspace(1) %9, i64 %27, !dbg !34
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 true) #1, !dbg !35
  %43 = getelementptr float, ptr addrspace(1) %10, i64 %24, !dbg !36
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 true) #1, !dbg !37
  %45 = bitcast i32 %44 to float, !dbg !37
  %46 = lshr i64 %26, 61, !dbg !38
  %47 = and i64 %46, 4, !dbg !38
  %48 = add i64 %47, %26, !dbg !38
  %49 = lshr i64 %29, 61, !dbg !39
  %50 = and i64 %49, 4, !dbg !39
  %51 = add i64 %50, %29, !dbg !39
  %52 = lshr i64 %32, 61, !dbg !40
  %53 = and i64 %52, 4, !dbg !40
  %54 = shl i64 %51, 2, !dbg !41
  %55 = shl i64 %48, 4, !dbg !42
  %56 = shl nsw i32 %23, 6, !dbg !43
  %57 = sext i32 %56 to i64, !dbg !44
  %58 = getelementptr float, ptr addrspace(1) %4, i64 %53, !dbg !45
  %59 = getelementptr float, ptr addrspace(1) %58, i64 %32, !dbg !45
  %60 = getelementptr float, ptr addrspace(1) %59, i64 %54, !dbg !45
  %61 = getelementptr float, ptr addrspace(1) %60, i64 %55, !dbg !45
  %62 = getelementptr float, ptr addrspace(1) %61, i64 %57, !dbg !45
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 true) #1, !dbg !46
  %64 = lshr i64 %34, 61, !dbg !47
  %65 = and i64 %64, 4, !dbg !47
  %66 = getelementptr float, ptr addrspace(1) %4, i64 %65, !dbg !48
  %67 = getelementptr float, ptr addrspace(1) %66, i64 %34, !dbg !48
  %68 = getelementptr float, ptr addrspace(1) %67, i64 %54, !dbg !48
  %69 = getelementptr float, ptr addrspace(1) %68, i64 %55, !dbg !48
  %70 = getelementptr float, ptr addrspace(1) %69, i64 %57, !dbg !48
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 true) #1, !dbg !49
  %72 = lshr i64 %38, 61, !dbg !50
  %73 = and i64 %72, 4, !dbg !50
  %74 = add i64 %73, %38, !dbg !50
  %75 = shl i64 %74, 4, !dbg !51
  %76 = getelementptr float, ptr addrspace(1) %60, i64 %75, !dbg !52
  %77 = getelementptr float, ptr addrspace(1) %76, i64 %57, !dbg !52
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 true) #1, !dbg !53
  %79 = getelementptr float, ptr addrspace(1) %68, i64 %75, !dbg !54
  %80 = getelementptr float, ptr addrspace(1) %79, i64 %57, !dbg !54
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %80, i1 true) #1, !dbg !55
  %82 = lshr i64 %40, 61, !dbg !56
  %83 = and i64 %82, 4, !dbg !56
  %84 = add i64 %83, %40, !dbg !56
  %85 = shl i64 %84, 2, !dbg !57
  %86 = getelementptr float, ptr addrspace(1) %59, i64 %85, !dbg !58
  %87 = getelementptr float, ptr addrspace(1) %86, i64 %75, !dbg !58
  %88 = getelementptr float, ptr addrspace(1) %87, i64 %57, !dbg !58
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %88, i1 true) #1, !dbg !59
  %90 = getelementptr float, ptr addrspace(1) %67, i64 %85, !dbg !60
  %91 = getelementptr float, ptr addrspace(1) %90, i64 %75, !dbg !60
  %92 = getelementptr float, ptr addrspace(1) %91, i64 %57, !dbg !60
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 true) #1, !dbg !61
  %94 = getelementptr float, ptr addrspace(1) %86, i64 %55, !dbg !62
  %95 = getelementptr float, ptr addrspace(1) %94, i64 %57, !dbg !62
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %95, i1 true) #1, !dbg !63
  %97 = getelementptr float, ptr addrspace(1) %90, i64 %55, !dbg !64
  %98 = getelementptr float, ptr addrspace(1) %97, i64 %57, !dbg !64
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %98, i1 true) #1, !dbg !65
  %100 = insertelement <2 x i32> poison, i32 %63, i64 0, !dbg !46
  %101 = insertelement <2 x i32> %100, i32 %78, i64 1, !dbg !46
  %102 = bitcast <2 x i32> %101 to <2 x float>, !dbg !46
  %103 = insertelement <2 x i32> poison, i32 %71, i64 0, !dbg !49
  %104 = insertelement <2 x i32> %103, i32 %81, i64 1, !dbg !49
  %105 = bitcast <2 x i32> %104 to <2 x float>, !dbg !49
  %106 = fsub <2 x float> %105, %102, !dbg !66
  %107 = insertelement <2 x i32> poison, i32 %36, i64 0, !dbg !67
  %108 = bitcast <2 x i32> %107 to <2 x float>, !dbg !67
  %109 = shufflevector <2 x float> %108, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !67
  %110 = fmul <2 x float> %106, %109, !dbg !67
  %111 = fadd <2 x float> %110, %102, !dbg !68
  %112 = insertelement <2 x i32> poison, i32 %96, i64 0, !dbg !63
  %113 = insertelement <2 x i32> %112, i32 %89, i64 1, !dbg !63
  %114 = bitcast <2 x i32> %113 to <2 x float>, !dbg !63
  %115 = insertelement <2 x i32> poison, i32 %99, i64 0, !dbg !65
  %116 = insertelement <2 x i32> %115, i32 %93, i64 1, !dbg !65
  %117 = bitcast <2 x i32> %116 to <2 x float>, !dbg !65
  %118 = fsub <2 x float> %117, %114, !dbg !69
  %119 = fmul <2 x float> %118, %109, !dbg !70
  %120 = fadd <2 x float> %119, %114, !dbg !71
  %121 = fsub <2 x float> %120, %111, !dbg !72
  %122 = insertelement <2 x i32> poison, i32 %42, i64 0, !dbg !73
  %123 = bitcast <2 x i32> %122 to <2 x float>, !dbg !73
  %124 = shufflevector <2 x float> %123, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !73
  %125 = fmul <2 x float> %121, %124, !dbg !73
  %126 = fadd <2 x float> %111, %125, !dbg !74
  %127 = extractelement <2 x float> %126, i64 0, !dbg !75
  %128 = extractelement <2 x float> %126, i64 1, !dbg !76
  %129 = fsub float %127, %128, !dbg !75
  %130 = fmul float %129, %45, !dbg !77
  %131 = fadd float %128, %130, !dbg !76
  %132 = sext i32 %17 to i64, !dbg !78
  %133 = getelementptr float, ptr addrspace(1) %0, i64 %132, !dbg !78
  %134 = bitcast float %131 to i32, !dbg !79
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %134, ptr addrspace(1) %133, i1 true) #1, !dbg !79
  ret void, !dbg !80
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cfrprzykwdke6obwl2iqc6mij33te64qc2gq4ll7kyaqhukl5ttb.py", directory: "inductor_cache/fr")
!4 = !{ptr @triton_poi_fused__unsafe_index_add_mul_sub_3, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__unsafe_index_add_mul_sub_3, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__unsafe_index_add_mul_sub_3", linkageName: "triton_poi_fused__unsafe_index_add_mul_sub_3", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 27, scope: !7)
!16 = !DILocation(line: 25, column: 21, scope: !7)
!17 = !DILocation(line: 25, column: 26, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 27, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 30, scope: !7)
!21 = !DILocation(line: 29, column: 35, scope: !7)
!22 = !DILocation(line: 30, column: 30, scope: !7)
!23 = !DILocation(line: 30, column: 35, scope: !7)
!24 = !DILocation(line: 31, column: 30, scope: !7)
!25 = !DILocation(line: 31, column: 35, scope: !7)
!26 = !DILocation(line: 32, column: 31, scope: !7)
!27 = !DILocation(line: 32, column: 36, scope: !7)
!28 = !DILocation(line: 33, column: 31, scope: !7)
!29 = !DILocation(line: 33, column: 36, scope: !7)
!30 = !DILocation(line: 34, column: 31, scope: !7)
!31 = !DILocation(line: 34, column: 36, scope: !7)
!32 = !DILocation(line: 35, column: 31, scope: !7)
!33 = !DILocation(line: 35, column: 36, scope: !7)
!34 = !DILocation(line: 36, column: 31, scope: !7)
!35 = !DILocation(line: 36, column: 36, scope: !7)
!36 = !DILocation(line: 37, column: 31, scope: !7)
!37 = !DILocation(line: 37, column: 36, scope: !7)
!38 = !DILocation(line: 41, column: 32, scope: !7)
!39 = !DILocation(line: 44, column: 32, scope: !7)
!40 = !DILocation(line: 47, column: 35, scope: !7)
!41 = !DILocation(line: 48, column: 41, scope: !7)
!42 = !DILocation(line: 48, column: 51, scope: !7)
!43 = !DILocation(line: 48, column: 61, scope: !7)
!44 = !DILocation(line: 48, column: 58, scope: !7)
!45 = !DILocation(line: 48, column: 31, scope: !7)
!46 = !DILocation(line: 48, column: 66, scope: !7)
!47 = !DILocation(line: 51, column: 35, scope: !7)
!48 = !DILocation(line: 52, column: 31, scope: !7)
!49 = !DILocation(line: 52, column: 66, scope: !7)
!50 = !DILocation(line: 58, column: 35, scope: !7)
!51 = !DILocation(line: 59, column: 51, scope: !7)
!52 = !DILocation(line: 59, column: 31, scope: !7)
!53 = !DILocation(line: 59, column: 67, scope: !7)
!54 = !DILocation(line: 60, column: 31, scope: !7)
!55 = !DILocation(line: 60, column: 67, scope: !7)
!56 = !DILocation(line: 66, column: 35, scope: !7)
!57 = !DILocation(line: 67, column: 41, scope: !7)
!58 = !DILocation(line: 67, column: 31, scope: !7)
!59 = !DILocation(line: 67, column: 68, scope: !7)
!60 = !DILocation(line: 68, column: 31, scope: !7)
!61 = !DILocation(line: 68, column: 68, scope: !7)
!62 = !DILocation(line: 74, column: 31, scope: !7)
!63 = !DILocation(line: 74, column: 67, scope: !7)
!64 = !DILocation(line: 75, column: 31, scope: !7)
!65 = !DILocation(line: 75, column: 67, scope: !7)
!66 = !DILocation(line: 53, column: 20, scope: !7)
!67 = !DILocation(line: 54, column: 20, scope: !7)
!68 = !DILocation(line: 55, column: 20, scope: !7)
!69 = !DILocation(line: 76, column: 20, scope: !7)
!70 = !DILocation(line: 77, column: 20, scope: !7)
!71 = !DILocation(line: 78, column: 20, scope: !7)
!72 = !DILocation(line: 79, column: 20, scope: !7)
!73 = !DILocation(line: 80, column: 20, scope: !7)
!74 = !DILocation(line: 82, column: 20, scope: !7)
!75 = !DILocation(line: 83, column: 20, scope: !7)
!76 = !DILocation(line: 85, column: 20, scope: !7)
!77 = !DILocation(line: 84, column: 20, scope: !7)
!78 = !DILocation(line: 86, column: 28, scope: !7)
!79 = !DILocation(line: 86, column: 40, scope: !7)
!80 = !DILocation(line: 86, column: 4, scope: !7)
