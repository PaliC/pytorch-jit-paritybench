; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_relu_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %9 = shl i32 %8, 8, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 1, !dbg !12
  %12 = and i32 %11, 254, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %14 = icmp slt i32 %13, 384, !dbg !14
  %.frozen = freeze i32 %13, !dbg !15
  %15 = sdiv i32 %.frozen, 96, !dbg !15
  %16 = mul i32 %15, 96, !dbg !16
  %.decomposed = sub i32 %.frozen, %16, !dbg !16
  %17 = sext i32 %13 to i64, !dbg !17
  %18 = getelementptr float, ptr addrspace(1) %0, i64 %17, !dbg !17
  %19 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %18, i1 %14) #3, !dbg !18
  %20 = sext i32 %.decomposed to i64, !dbg !19
  %21 = getelementptr float, ptr addrspace(1) %1, i64 %20, !dbg !19
  %22 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %21, i1 %14) #3, !dbg !20
  %23 = getelementptr float, ptr addrspace(1) %2, i64 %20, !dbg !21
  %24 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %23, i1 %14) #3, !dbg !22
  %25 = extractvalue { i32, i32 } %24, 0, !dbg !22
  %26 = extractvalue { i32, i32 } %24, 1, !dbg !22
  %27 = bitcast i32 %25 to float, !dbg !22
  %28 = bitcast i32 %26 to float, !dbg !22
  %29 = getelementptr float, ptr addrspace(1) %3, i64 %20, !dbg !23
  %30 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %29, i1 %14) #3, !dbg !24
  %31 = getelementptr float, ptr addrspace(1) %4, i64 %20, !dbg !25
  %32 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %31, i1 %14) #3, !dbg !26
  %33 = fadd float %27, 0x3F50624DE0000000, !dbg !27
  %34 = fadd float %28, 0x3F50624DE0000000, !dbg !27
  %35 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i = icmp eq i32 %35, 0, !dbg !28
  %36 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i = icmp eq i32 %36, 0, !dbg !28
  br i1 %.not.i, label %42, label %37, !dbg !28

37:                                               ; preds = %7
  br i1 %.not1.i, label %40, label %38, !dbg !28

38:                                               ; preds = %37
  %39 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %33) #3, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

40:                                               ; preds = %37
  %41 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %33) #3, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

42:                                               ; preds = %7
  br i1 %.not1.i, label %45, label %43, !dbg !28

43:                                               ; preds = %42
  %44 = tail call float @llvm.nvvm.sqrt.rn.f(float %33) #3, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

45:                                               ; preds = %42
  %46 = tail call float @llvm.nvvm.sqrt.approx.f(float %33) #3, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

__nv_sqrtf.exit:                                  ; preds = %38, %40, %43, %45
  %.0.i = phi float [ %39, %38 ], [ %41, %40 ], [ %44, %43 ], [ %46, %45 ], !dbg !28
  %47 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i1 = icmp eq i32 %47, 0, !dbg !28
  %48 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i4 = icmp eq i32 %48, 0, !dbg !28
  br i1 %.not.i1, label %54, label %49, !dbg !28

49:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %52, label %50, !dbg !28

50:                                               ; preds = %49
  %51 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %34) #3, !dbg !28
  br label %__nv_sqrtf.exit5, !dbg !28

52:                                               ; preds = %49
  %53 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %34) #3, !dbg !28
  br label %__nv_sqrtf.exit5, !dbg !28

54:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %57, label %55, !dbg !28

55:                                               ; preds = %54
  %56 = tail call float @llvm.nvvm.sqrt.rn.f(float %34) #3, !dbg !28
  br label %__nv_sqrtf.exit5, !dbg !28

57:                                               ; preds = %54
  %58 = tail call float @llvm.nvvm.sqrt.approx.f(float %34) #3, !dbg !28
  br label %__nv_sqrtf.exit5, !dbg !28

__nv_sqrtf.exit5:                                 ; preds = %50, %52, %55, %57
  %.0.i3 = phi float [ %51, %50 ], [ %53, %52 ], [ %56, %55 ], [ %58, %57 ], !dbg !28
  %59 = extractvalue { i32, i32 } %19, 1, !dbg !18
  %60 = bitcast i32 %59 to float, !dbg !18
  %61 = extractvalue { i32, i32 } %22, 1, !dbg !20
  %62 = bitcast i32 %61 to float, !dbg !20
  %63 = fsub float %60, %62, !dbg !29
  %64 = extractvalue { i32, i32 } %19, 0, !dbg !18
  %65 = bitcast i32 %64 to float, !dbg !18
  %66 = extractvalue { i32, i32 } %22, 0, !dbg !20
  %67 = bitcast i32 %66 to float, !dbg !20
  %68 = fsub float %65, %67, !dbg !29
  %69 = extractvalue { i32, i32 } %32, 1, !dbg !26
  %70 = bitcast i32 %69 to float, !dbg !26
  %71 = extractvalue { i32, i32 } %32, 0, !dbg !26
  %72 = bitcast i32 %71 to float, !dbg !26
  %73 = extractvalue { i32, i32 } %30, 1, !dbg !24
  %74 = bitcast i32 %73 to float, !dbg !24
  %75 = extractvalue { i32, i32 } %30, 0, !dbg !24
  %76 = bitcast i32 %75 to float, !dbg !24
  %77 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !30
  %78 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !30
  %79 = fmul float %68, %77, !dbg !31
  %80 = fmul float %63, %78, !dbg !31
  %81 = fmul float %79, %76, !dbg !32
  %82 = fmul float %80, %74, !dbg !32
  %83 = fadd float %81, %72, !dbg !33
  %84 = fadd float %82, %70, !dbg !33
  %85 = fcmp olt float %83, 0.000000e+00, !dbg !34
  %86 = fcmp olt float %84, 0.000000e+00, !dbg !34
  %87 = select i1 %85, float 0.000000e+00, float %83, !dbg !38
  %88 = select i1 %86, float 0.000000e+00, float %84, !dbg !38
  %89 = mul i32 %15, 484, !dbg !39
  %90 = add i32 %89, %.decomposed, !dbg !40
  %91 = sext i32 %90 to i64, !dbg !41
  %92 = getelementptr float, ptr addrspace(1) %5, i64 %91, !dbg !41
  %93 = bitcast float %87 to i32, !dbg !42
  %94 = bitcast float %88 to i32, !dbg !42
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %93, i32 %94, ptr addrspace(1) %92, i1 %14) #3, !dbg !42
  ret void, !dbg !43
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cbcowfi5aqdgv4uiv4rqsoepbwkgdbubxpgijlk43ujq4hxpv2a6.py", directory: "inductor_cache/bc")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_8, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_8, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_relu_8", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_relu_8", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 19, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 27, column: 30, scope: !7)
!18 = !DILocation(line: 27, column: 35, scope: !7)
!19 = !DILocation(line: 28, column: 30, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 29, column: 30, scope: !7)
!22 = !DILocation(line: 29, column: 35, scope: !7)
!23 = !DILocation(line: 30, column: 31, scope: !7)
!24 = !DILocation(line: 30, column: 36, scope: !7)
!25 = !DILocation(line: 31, column: 31, scope: !7)
!26 = !DILocation(line: 31, column: 36, scope: !7)
!27 = !DILocation(line: 34, column: 18, scope: !7)
!28 = !DILocation(line: 35, column: 26, scope: !7)
!29 = !DILocation(line: 32, column: 18, scope: !7)
!30 = !DILocation(line: 37, column: 18, scope: !7)
!31 = !DILocation(line: 40, column: 19, scope: !7)
!32 = !DILocation(line: 41, column: 20, scope: !7)
!33 = !DILocation(line: 42, column: 20, scope: !7)
!34 = !DILocation(line: 118, column: 15, scope: !35, inlinedAt: !37)
!35 = distinct !DILexicalBlockFile(scope: !7, file: !36, discriminator: 0)
!36 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!37 = !DILocation(line: 44, column: 42, scope: !7)
!38 = !DILocation(line: 121, column: 29, scope: !35, inlinedAt: !37)
!39 = !DILocation(line: 45, column: 34, scope: !7)
!40 = !DILocation(line: 45, column: 30, scope: !7)
!41 = !DILocation(line: 45, column: 25, scope: !7)
!42 = !DILocation(line: 45, column: 46, scope: !7)
!43 = !DILocation(line: 45, column: 4, scope: !7)
