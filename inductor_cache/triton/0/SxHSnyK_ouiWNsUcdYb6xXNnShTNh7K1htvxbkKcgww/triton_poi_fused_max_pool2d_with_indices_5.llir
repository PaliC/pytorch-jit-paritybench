; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_max_pool2d_with_indices_5(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %6 = shl i32 %5, 8, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 1, !dbg !12
  %9 = and i32 %8, 254, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = icmp slt i32 %10, 2048, !dbg !14
  %12 = insertelement <2 x i32> poison, i32 %10, i64 0, !dbg !15
  %13 = insertelement <2 x i32> %12, i32 %6, i64 1, !dbg !15
  %14 = ashr exact <2 x i32> %13, splat (i32 1), !dbg !15
  %15 = or disjoint <2 x i32> %13, <i32 poison, i32 1>, !dbg !15
  %16 = shufflevector <2 x i32> %14, <2 x i32> %15, <2 x i32> <i32 0, i32 3>, !dbg !15
  %17 = srem <2 x i32> %16, splat (i32 2), !dbg !16
  %18 = extractelement <2 x i32> %17, i64 0, !dbg !17
  %19 = icmp sgt i32 %18, 0, !dbg !18
  %20 = extractelement <2 x i32> %17, i64 1, !dbg !17
  %21 = shl nsw i32 %20, 1, !dbg !19
  %22 = icmp sgt i32 %20, 0, !dbg !20
  %23 = and i1 %22, %19, !dbg !21
  %24 = shl i32 %10, 2, !dbg !22
  %25 = add i32 %24, -5, !dbg !23
  %26 = add i32 %21, %24, !dbg !24
  %27 = add i32 %26, -5, !dbg !23
  %28 = sext i32 %25 to i64, !dbg !25
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !25
  %30 = sext i32 %27 to i64, !dbg !25
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !25
  %32 = and i1 %11, %23, !dbg !26
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %29, i1 false, i32 -8388608, i1 false) #1, !dbg !27
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %31, i1 %32, i32 -8388608, i1 %32) #1, !dbg !27
  %35 = icmp sgt i32 %20, -1, !dbg !28
  %36 = and i1 %35, %19, !dbg !29
  %37 = add i32 %24, -4, !dbg !30
  %38 = add i32 %26, -4, !dbg !30
  %39 = sext i32 %37 to i64, !dbg !31
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !31
  %41 = sext i32 %38 to i64, !dbg !31
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !31
  %43 = and i1 %11, %19, !dbg !32
  %44 = and i1 %11, %36, !dbg !32
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %40, i1 %43, i32 -8388608, i1 %43) #1, !dbg !33
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %42, i1 %44, i32 -8388608, i1 %44) #1, !dbg !33
  %47 = add i32 %24, -3, !dbg !34
  %48 = add i32 %26, -3, !dbg !34
  %49 = sext i32 %47 to i64, !dbg !35
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !35
  %51 = sext i32 %48 to i64, !dbg !35
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !35
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %50, i1 %43, i32 -8388608, i1 %43) #1, !dbg !36
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %52, i1 %44, i32 -8388608, i1 %44) #1, !dbg !36
  %55 = icmp sgt i32 %18, -1, !dbg !37
  %56 = and i1 %22, %55, !dbg !38
  %57 = add i32 %24, -1, !dbg !39
  %58 = sext i32 %57 to i64, !dbg !40
  %59 = getelementptr float, ptr addrspace(1) %0, i64 %58, !dbg !40
  %60 = sext i32 %26 to i64, !dbg !40
  %61 = getelementptr float, ptr addrspace(1) %0, i64 %60, !dbg !40
  %62 = getelementptr i8, ptr addrspace(1) %61, i64 -4, !dbg !40
  %63 = and i1 %11, %56, !dbg !41
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %59, i1 false, i32 -8388608, i1 false) #1, !dbg !42
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %62, i1 %63, i32 -8388608, i1 %63) #1, !dbg !42
  %66 = or i32 %18, %20, !dbg !17
  %67 = icmp sgt i32 %66, -1, !dbg !17
  %68 = sext i32 %24 to i64, !dbg !43
  %69 = getelementptr float, ptr addrspace(1) %0, i64 %68, !dbg !43
  %70 = and i1 %11, %55, !dbg !44
  %71 = and i1 %11, %67, !dbg !44
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %69, i1 %70, i32 -8388608, i1 %70) #1, !dbg !45
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %61, i1 %71, i32 -8388608, i1 %71) #1, !dbg !45
  %74 = or disjoint i32 %24, 1, !dbg !46
  %75 = or disjoint i32 %26, 1, !dbg !46
  %76 = sext i32 %74 to i64, !dbg !47
  %77 = getelementptr float, ptr addrspace(1) %0, i64 %76, !dbg !47
  %78 = sext i32 %75 to i64, !dbg !47
  %79 = getelementptr float, ptr addrspace(1) %0, i64 %78, !dbg !47
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %77, i1 %70, i32 -8388608, i1 %70) #1, !dbg !48
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %79, i1 %71, i32 -8388608, i1 %71) #1, !dbg !48
  %82 = or disjoint i32 %24, 3, !dbg !49
  %83 = add i32 %26, 3, !dbg !49
  %84 = sext i32 %82 to i64, !dbg !50
  %85 = getelementptr float, ptr addrspace(1) %0, i64 %84, !dbg !50
  %86 = sext i32 %83 to i64, !dbg !50
  %87 = getelementptr float, ptr addrspace(1) %0, i64 %86, !dbg !50
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %85, i1 false, i32 -8388608, i1 false) #1, !dbg !51
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %87, i1 %63, i32 -8388608, i1 %63) #1, !dbg !51
  %90 = or disjoint i32 %24, 4, !dbg !52
  %91 = add i32 %26, 4, !dbg !52
  %92 = sext i32 %90 to i64, !dbg !53
  %93 = getelementptr float, ptr addrspace(1) %0, i64 %92, !dbg !53
  %94 = sext i32 %91 to i64, !dbg !53
  %95 = getelementptr float, ptr addrspace(1) %0, i64 %94, !dbg !53
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %93, i1 %70, i32 -8388608, i1 %70) #1, !dbg !54
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %95, i1 %71, i32 -8388608, i1 %71) #1, !dbg !54
  %98 = or disjoint i32 %24, 5, !dbg !55
  %99 = add i32 %26, 5, !dbg !55
  %100 = sext i32 %98 to i64, !dbg !56
  %101 = getelementptr float, ptr addrspace(1) %0, i64 %100, !dbg !56
  %102 = sext i32 %99 to i64, !dbg !56
  %103 = getelementptr float, ptr addrspace(1) %0, i64 %102, !dbg !56
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %101, i1 %70, i32 -8388608, i1 %70) #1, !dbg !57
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %103, i1 %71, i32 -8388608, i1 %71) #1, !dbg !57
  %106 = insertelement <2 x i32> poison, i32 %33, i64 0, !dbg !27
  %107 = insertelement <2 x i32> %106, i32 %34, i64 1, !dbg !27
  %108 = bitcast <2 x i32> %107 to <2 x float>, !dbg !27
  %109 = insertelement <2 x i32> poison, i32 %45, i64 0, !dbg !33
  %110 = insertelement <2 x i32> %109, i32 %46, i64 1, !dbg !33
  %111 = bitcast <2 x i32> %110 to <2 x float>, !dbg !33
  %112 = fcmp ogt <2 x float> %111, %108, !dbg !58
  %113 = fcmp uno <2 x float> %111, zeroinitializer, !dbg !62
  %114 = or <2 x i1> %112, %113, !dbg !63
  %.v = select <2 x i1> %114, <2 x i32> %110, <2 x i32> %107, !dbg !64
  %115 = bitcast <2 x i32> %.v to <2 x float>, !dbg !64
  %116 = insertelement <2 x i32> poison, i32 %53, i64 0, !dbg !36
  %117 = insertelement <2 x i32> %116, i32 %54, i64 1, !dbg !36
  %118 = bitcast <2 x i32> %117 to <2 x float>, !dbg !36
  %119 = fcmp olt <2 x float> %115, %118, !dbg !65
  %120 = fcmp uno <2 x float> %118, zeroinitializer, !dbg !67
  %121 = or <2 x i1> %120, %119, !dbg !68
  %.v1 = select <2 x i1> %121, <2 x i32> %117, <2 x i32> %.v, !dbg !69
  %122 = bitcast <2 x i32> %.v1 to <2 x float>, !dbg !69
  %123 = insertelement <2 x i32> poison, i32 %64, i64 0, !dbg !42
  %124 = insertelement <2 x i32> %123, i32 %65, i64 1, !dbg !42
  %125 = bitcast <2 x i32> %124 to <2 x float>, !dbg !42
  %126 = fcmp olt <2 x float> %122, %125, !dbg !70
  %127 = fcmp uno <2 x float> %125, zeroinitializer, !dbg !72
  %128 = or <2 x i1> %127, %126, !dbg !73
  %.v2 = select <2 x i1> %128, <2 x i32> %124, <2 x i32> %.v1, !dbg !74
  %129 = bitcast <2 x i32> %.v2 to <2 x float>, !dbg !74
  %130 = insertelement <2 x i32> poison, i32 %72, i64 0, !dbg !45
  %131 = insertelement <2 x i32> %130, i32 %73, i64 1, !dbg !45
  %132 = bitcast <2 x i32> %131 to <2 x float>, !dbg !45
  %133 = fcmp olt <2 x float> %129, %132, !dbg !75
  %134 = fcmp uno <2 x float> %132, zeroinitializer, !dbg !77
  %135 = or <2 x i1> %134, %133, !dbg !78
  %.v3 = select <2 x i1> %135, <2 x i32> %131, <2 x i32> %.v2, !dbg !79
  %136 = bitcast <2 x i32> %.v3 to <2 x float>, !dbg !79
  %137 = insertelement <2 x i32> poison, i32 %80, i64 0, !dbg !48
  %138 = insertelement <2 x i32> %137, i32 %81, i64 1, !dbg !48
  %139 = bitcast <2 x i32> %138 to <2 x float>, !dbg !48
  %140 = fcmp olt <2 x float> %136, %139, !dbg !80
  %141 = fcmp uno <2 x float> %139, zeroinitializer, !dbg !82
  %142 = or <2 x i1> %141, %140, !dbg !83
  %.v4 = select <2 x i1> %142, <2 x i32> %138, <2 x i32> %.v3, !dbg !84
  %143 = bitcast <2 x i32> %.v4 to <2 x float>, !dbg !84
  %144 = insertelement <2 x i32> poison, i32 %88, i64 0, !dbg !51
  %145 = insertelement <2 x i32> %144, i32 %89, i64 1, !dbg !51
  %146 = bitcast <2 x i32> %145 to <2 x float>, !dbg !51
  %147 = fcmp olt <2 x float> %143, %146, !dbg !85
  %148 = fcmp uno <2 x float> %146, zeroinitializer, !dbg !87
  %149 = or <2 x i1> %148, %147, !dbg !88
  %.v5 = select <2 x i1> %149, <2 x i32> %145, <2 x i32> %.v4, !dbg !89
  %150 = bitcast <2 x i32> %.v5 to <2 x float>, !dbg !89
  %151 = insertelement <2 x i32> poison, i32 %96, i64 0, !dbg !54
  %152 = insertelement <2 x i32> %151, i32 %97, i64 1, !dbg !54
  %153 = bitcast <2 x i32> %152 to <2 x float>, !dbg !54
  %154 = fcmp olt <2 x float> %150, %153, !dbg !90
  %155 = fcmp uno <2 x float> %153, zeroinitializer, !dbg !92
  %156 = or <2 x i1> %155, %154, !dbg !93
  %.v6 = select <2 x i1> %156, <2 x i32> %152, <2 x i32> %.v5, !dbg !94
  %157 = bitcast <2 x i32> %.v6 to <2 x float>, !dbg !94
  %158 = insertelement <2 x i32> poison, i32 %104, i64 0, !dbg !57
  %159 = insertelement <2 x i32> %158, i32 %105, i64 1, !dbg !57
  %160 = bitcast <2 x i32> %159 to <2 x float>, !dbg !57
  %161 = fcmp olt <2 x float> %157, %160, !dbg !95
  %162 = bitcast i32 %104 to float, !dbg !97
  %163 = fcmp uno float %162, 0.000000e+00, !dbg !97
  %164 = bitcast i32 %105 to float, !dbg !97
  %165 = fcmp uno float %164, 0.000000e+00, !dbg !97
  %166 = extractelement <2 x i1> %161, i64 0, !dbg !98
  %167 = or i1 %163, %166, !dbg !98
  %168 = extractelement <2 x i1> %161, i64 1, !dbg !98
  %169 = or i1 %165, %168, !dbg !98
  %170 = zext <2 x i1> %112 to <2 x i8>, !dbg !99
  %171 = select <2 x i1> %119, <2 x i8> splat (i8 2), <2 x i8> %170, !dbg !100
  %172 = select <2 x i1> %126, <2 x i8> splat (i8 3), <2 x i8> %171, !dbg !101
  %173 = select <2 x i1> %133, <2 x i8> splat (i8 4), <2 x i8> %172, !dbg !102
  %174 = select <2 x i1> %140, <2 x i8> splat (i8 5), <2 x i8> %173, !dbg !103
  %175 = select <2 x i1> %147, <2 x i8> splat (i8 6), <2 x i8> %174, !dbg !104
  %176 = select <2 x i1> %154, <2 x i8> splat (i8 7), <2 x i8> %175, !dbg !105
  %177 = select <2 x i1> %161, <2 x i8> splat (i8 8), <2 x i8> %176, !dbg !106
  %178 = sext i32 %10 to i64, !dbg !107
  %179 = getelementptr float, ptr addrspace(1) %1, i64 %178, !dbg !107
  %180 = extractelement <2 x i32> %.v6, i64 0, !dbg !108
  %181 = select i1 %167, i32 %104, i32 %180, !dbg !109
  %182 = extractelement <2 x i32> %.v6, i64 1, !dbg !108
  %183 = select i1 %169, i32 %105, i32 %182, !dbg !109
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %181, i32 %183, ptr addrspace(1) %179, i1 %11) #1, !dbg !108
  %184 = getelementptr i8, ptr addrspace(1) %2, i64 %178, !dbg !110
  %185 = bitcast <2 x i8> %177 to i16, !dbg !111
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %185, ptr addrspace(1) %184, i1 %11) #1, !dbg !111
  ret void, !dbg !112
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cpxzafnhskoqiefh4wmmxzw3qr6zgiecd5d2y4puwe7v34gajgyy.py", directory: "inductor_cache/px")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_5, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_5, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_5", linkageName: "triton_poi_fused_max_pool2d_with_indices_5", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 26, scope: !7)
!17 = !DILocation(line: 61, column: 20, scope: !7)
!18 = !DILocation(line: 30, column: 19, scope: !7)
!19 = !DILocation(line: 34, column: 20, scope: !7)
!20 = !DILocation(line: 35, column: 19, scope: !7)
!21 = !DILocation(line: 38, column: 19, scope: !7)
!22 = !DILocation(line: 39, column: 47, scope: !7)
!23 = !DILocation(line: 39, column: 45, scope: !7)
!24 = !DILocation(line: 39, column: 38, scope: !7)
!25 = !DILocation(line: 39, column: 31, scope: !7)
!26 = !DILocation(line: 39, column: 60, scope: !7)
!27 = !DILocation(line: 39, column: 52, scope: !7)
!28 = !DILocation(line: 41, column: 21, scope: !7)
!29 = !DILocation(line: 44, column: 19, scope: !7)
!30 = !DILocation(line: 45, column: 45, scope: !7)
!31 = !DILocation(line: 45, column: 31, scope: !7)
!32 = !DILocation(line: 45, column: 60, scope: !7)
!33 = !DILocation(line: 45, column: 52, scope: !7)
!34 = !DILocation(line: 52, column: 45, scope: !7)
!35 = !DILocation(line: 52, column: 31, scope: !7)
!36 = !DILocation(line: 52, column: 52, scope: !7)
!37 = !DILocation(line: 55, column: 21, scope: !7)
!38 = !DILocation(line: 58, column: 20, scope: !7)
!39 = !DILocation(line: 59, column: 45, scope: !7)
!40 = !DILocation(line: 59, column: 31, scope: !7)
!41 = !DILocation(line: 59, column: 60, scope: !7)
!42 = !DILocation(line: 59, column: 52, scope: !7)
!43 = !DILocation(line: 62, column: 31, scope: !7)
!44 = !DILocation(line: 62, column: 53, scope: !7)
!45 = !DILocation(line: 62, column: 45, scope: !7)
!46 = !DILocation(line: 65, column: 42, scope: !7)
!47 = !DILocation(line: 65, column: 31, scope: !7)
!48 = !DILocation(line: 65, column: 49, scope: !7)
!49 = !DILocation(line: 72, column: 42, scope: !7)
!50 = !DILocation(line: 72, column: 31, scope: !7)
!51 = !DILocation(line: 72, column: 49, scope: !7)
!52 = !DILocation(line: 75, column: 42, scope: !7)
!53 = !DILocation(line: 75, column: 31, scope: !7)
!54 = !DILocation(line: 75, column: 49, scope: !7)
!55 = !DILocation(line: 78, column: 42, scope: !7)
!56 = !DILocation(line: 78, column: 31, scope: !7)
!57 = !DILocation(line: 78, column: 49, scope: !7)
!58 = !DILocation(line: 118, column: 15, scope: !59, inlinedAt: !61)
!59 = distinct !DILexicalBlockFile(scope: !7, file: !60, discriminator: 0)
!60 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!61 = !DILocation(line: 46, column: 42, scope: !7)
!62 = !DILocation(line: 120, column: 21, scope: !59, inlinedAt: !61)
!63 = !DILocation(line: 120, column: 16, scope: !59, inlinedAt: !61)
!64 = !DILocation(line: 121, column: 29, scope: !59, inlinedAt: !61)
!65 = !DILocation(line: 118, column: 15, scope: !59, inlinedAt: !66)
!66 = !DILocation(line: 53, column: 42, scope: !7)
!67 = !DILocation(line: 120, column: 21, scope: !59, inlinedAt: !66)
!68 = !DILocation(line: 120, column: 16, scope: !59, inlinedAt: !66)
!69 = !DILocation(line: 121, column: 29, scope: !59, inlinedAt: !66)
!70 = !DILocation(line: 118, column: 15, scope: !59, inlinedAt: !71)
!71 = !DILocation(line: 60, column: 42, scope: !7)
!72 = !DILocation(line: 120, column: 21, scope: !59, inlinedAt: !71)
!73 = !DILocation(line: 120, column: 16, scope: !59, inlinedAt: !71)
!74 = !DILocation(line: 121, column: 29, scope: !59, inlinedAt: !71)
!75 = !DILocation(line: 118, column: 15, scope: !59, inlinedAt: !76)
!76 = !DILocation(line: 63, column: 42, scope: !7)
!77 = !DILocation(line: 120, column: 21, scope: !59, inlinedAt: !76)
!78 = !DILocation(line: 120, column: 16, scope: !59, inlinedAt: !76)
!79 = !DILocation(line: 121, column: 29, scope: !59, inlinedAt: !76)
!80 = !DILocation(line: 118, column: 15, scope: !59, inlinedAt: !81)
!81 = !DILocation(line: 66, column: 42, scope: !7)
!82 = !DILocation(line: 120, column: 21, scope: !59, inlinedAt: !81)
!83 = !DILocation(line: 120, column: 16, scope: !59, inlinedAt: !81)
!84 = !DILocation(line: 121, column: 29, scope: !59, inlinedAt: !81)
!85 = !DILocation(line: 118, column: 15, scope: !59, inlinedAt: !86)
!86 = !DILocation(line: 73, column: 42, scope: !7)
!87 = !DILocation(line: 120, column: 21, scope: !59, inlinedAt: !86)
!88 = !DILocation(line: 120, column: 16, scope: !59, inlinedAt: !86)
!89 = !DILocation(line: 121, column: 29, scope: !59, inlinedAt: !86)
!90 = !DILocation(line: 118, column: 15, scope: !59, inlinedAt: !91)
!91 = !DILocation(line: 76, column: 42, scope: !7)
!92 = !DILocation(line: 120, column: 21, scope: !59, inlinedAt: !91)
!93 = !DILocation(line: 120, column: 16, scope: !59, inlinedAt: !91)
!94 = !DILocation(line: 121, column: 29, scope: !59, inlinedAt: !91)
!95 = !DILocation(line: 118, column: 15, scope: !59, inlinedAt: !96)
!96 = !DILocation(line: 79, column: 42, scope: !7)
!97 = !DILocation(line: 120, column: 21, scope: !59, inlinedAt: !96)
!98 = !DILocation(line: 120, column: 16, scope: !59, inlinedAt: !96)
!99 = !DILocation(line: 83, column: 35, scope: !7)
!100 = !DILocation(line: 86, column: 35, scope: !7)
!101 = !DILocation(line: 89, column: 35, scope: !7)
!102 = !DILocation(line: 92, column: 35, scope: !7)
!103 = !DILocation(line: 95, column: 35, scope: !7)
!104 = !DILocation(line: 98, column: 35, scope: !7)
!105 = !DILocation(line: 101, column: 35, scope: !7)
!106 = !DILocation(line: 104, column: 35, scope: !7)
!107 = !DILocation(line: 105, column: 25, scope: !7)
!108 = !DILocation(line: 105, column: 37, scope: !7)
!109 = !DILocation(line: 121, column: 29, scope: !59, inlinedAt: !96)
!110 = !DILocation(line: 106, column: 25, scope: !7)
!111 = !DILocation(line: 106, column: 37, scope: !7)
!112 = !DILocation(line: 106, column: 4, scope: !7)
