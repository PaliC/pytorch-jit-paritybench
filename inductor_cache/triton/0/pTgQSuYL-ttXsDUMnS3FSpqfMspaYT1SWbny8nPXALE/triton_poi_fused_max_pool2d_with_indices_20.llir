; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_max_pool2d_with_indices_20(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 10, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = and i32 %8, 255, !dbg !12
  %10 = or disjoint i32 %9, 256, !dbg !12
  %11 = or disjoint i32 %9, 512, !dbg !12
  %12 = or disjoint i32 %9, 768, !dbg !12
  %13 = shl i32 %8, 4, !dbg !12
  %14 = and i32 %13, 1008, !dbg !12
  %15 = or disjoint i32 %7, %9, !dbg !13
  %16 = or disjoint i32 %7, %10, !dbg !13
  %17 = or disjoint i32 %7, %11, !dbg !13
  %18 = or disjoint i32 %7, %12, !dbg !13
  %19 = or disjoint i32 %7, %14, !dbg !13
  %20 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %21 = shl i32 %20, 2, !dbg !15
  %.lobit1 = lshr i32 %8, 6, !dbg !16
  %22 = and i32 %.lobit1, 3, !dbg !16
  %23 = or disjoint i32 %21, 1, !dbg !17
  %24 = or disjoint i32 %21, %22, !dbg !17
  %25 = icmp slt i32 %21, 4, !dbg !18
  %26 = icmp slt i32 %24, 4, !dbg !18
  %27 = srem i32 %23, 2, !dbg !19
  %.frozen = freeze i32 %19, !dbg !20
  %28 = sdiv i32 %.frozen, 512, !dbg !20
  %29 = mul i32 %28, 512, !dbg !21
  %.decomposed = sub i32 %.frozen, %29, !dbg !21
  %30 = shl nsw i32 %27, 1, !dbg !22
  %31 = shl i32 %20, 4, !dbg !23
  %32 = or disjoint i32 %31, 8, !dbg !23
  %33 = add i32 %30, %31, !dbg !24
  %34 = add i32 %30, %32, !dbg !24
  %35 = shl i32 %15, 4, !dbg !25
  %36 = shl i32 %16, 4, !dbg !25
  %37 = shl i32 %17, 4, !dbg !25
  %38 = shl i32 %18, 4, !dbg !25
  %39 = add i32 %35, %31, !dbg !26
  %40 = add i32 %33, %35, !dbg !26
  %41 = add i32 %32, %35, !dbg !26
  %42 = add i32 %34, %35, !dbg !26
  %43 = add i32 %36, %31, !dbg !26
  %44 = add i32 %33, %36, !dbg !26
  %45 = add i32 %32, %36, !dbg !26
  %46 = add i32 %34, %36, !dbg !26
  %47 = add i32 %37, %31, !dbg !26
  %48 = add i32 %33, %37, !dbg !26
  %49 = add i32 %32, %37, !dbg !26
  %50 = add i32 %34, %37, !dbg !26
  %51 = add i32 %38, %31, !dbg !26
  %52 = add i32 %33, %38, !dbg !26
  %53 = add i32 %32, %38, !dbg !26
  %54 = add i32 %34, %38, !dbg !26
  %55 = sext i32 %39 to i64, !dbg !27
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !27
  %57 = sext i32 %40 to i64, !dbg !27
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !27
  %59 = sext i32 %41 to i64, !dbg !27
  %60 = getelementptr float, ptr addrspace(1) %0, i64 %59, !dbg !27
  %61 = sext i32 %42 to i64, !dbg !27
  %62 = getelementptr float, ptr addrspace(1) %0, i64 %61, !dbg !27
  %63 = sext i32 %43 to i64, !dbg !27
  %64 = getelementptr float, ptr addrspace(1) %0, i64 %63, !dbg !27
  %65 = sext i32 %44 to i64, !dbg !27
  %66 = getelementptr float, ptr addrspace(1) %0, i64 %65, !dbg !27
  %67 = sext i32 %45 to i64, !dbg !27
  %68 = getelementptr float, ptr addrspace(1) %0, i64 %67, !dbg !27
  %69 = sext i32 %46 to i64, !dbg !27
  %70 = getelementptr float, ptr addrspace(1) %0, i64 %69, !dbg !27
  %71 = sext i32 %47 to i64, !dbg !27
  %72 = getelementptr float, ptr addrspace(1) %0, i64 %71, !dbg !27
  %73 = sext i32 %48 to i64, !dbg !27
  %74 = getelementptr float, ptr addrspace(1) %0, i64 %73, !dbg !27
  %75 = sext i32 %49 to i64, !dbg !27
  %76 = getelementptr float, ptr addrspace(1) %0, i64 %75, !dbg !27
  %77 = sext i32 %50 to i64, !dbg !27
  %78 = getelementptr float, ptr addrspace(1) %0, i64 %77, !dbg !27
  %79 = sext i32 %51 to i64, !dbg !27
  %80 = getelementptr float, ptr addrspace(1) %0, i64 %79, !dbg !27
  %81 = sext i32 %52 to i64, !dbg !27
  %82 = getelementptr float, ptr addrspace(1) %0, i64 %81, !dbg !27
  %83 = sext i32 %53 to i64, !dbg !27
  %84 = getelementptr float, ptr addrspace(1) %0, i64 %83, !dbg !27
  %85 = sext i32 %54 to i64, !dbg !27
  %86 = getelementptr float, ptr addrspace(1) %0, i64 %85, !dbg !27
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 %25) #2, !dbg !28
  %88 = bitcast i32 %87 to float, !dbg !28
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %25) #2, !dbg !28
  %90 = bitcast i32 %89 to float, !dbg !28
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 %25) #2, !dbg !28
  %92 = bitcast i32 %91 to float, !dbg !28
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 %25) #2, !dbg !28
  %94 = bitcast i32 %93 to float, !dbg !28
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 %25) #2, !dbg !28
  %96 = bitcast i32 %95 to float, !dbg !28
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 %25) #2, !dbg !28
  %98 = bitcast i32 %97 to float, !dbg !28
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 %25) #2, !dbg !28
  %100 = bitcast i32 %99 to float, !dbg !28
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 %25) #2, !dbg !28
  %102 = bitcast i32 %101 to float, !dbg !28
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 %25) #2, !dbg !28
  %104 = bitcast i32 %103 to float, !dbg !28
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 %25) #2, !dbg !28
  %106 = bitcast i32 %105 to float, !dbg !28
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 %25) #2, !dbg !28
  %108 = bitcast i32 %107 to float, !dbg !28
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 %25) #2, !dbg !28
  %110 = bitcast i32 %109 to float, !dbg !28
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %80, i1 %25) #2, !dbg !28
  %112 = bitcast i32 %111 to float, !dbg !28
  %113 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 %25) #2, !dbg !28
  %114 = bitcast i32 %113 to float, !dbg !28
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 %25) #2, !dbg !28
  %116 = bitcast i32 %115 to float, !dbg !28
  %117 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 %25) #2, !dbg !28
  %118 = bitcast i32 %117 to float, !dbg !28
  %119 = or disjoint i32 %30, 1, !dbg !29
  %120 = or disjoint i32 %31, 1, !dbg !30
  %121 = add i32 %119, %31, !dbg !30
  %122 = or disjoint i32 %31, 9, !dbg !30
  %123 = add i32 %119, %32, !dbg !30
  %124 = add i32 %120, %35, !dbg !31
  %125 = add i32 %121, %35, !dbg !31
  %126 = add i32 %122, %35, !dbg !31
  %127 = add i32 %123, %35, !dbg !31
  %128 = add i32 %120, %36, !dbg !31
  %129 = add i32 %121, %36, !dbg !31
  %130 = add i32 %122, %36, !dbg !31
  %131 = add i32 %123, %36, !dbg !31
  %132 = add i32 %120, %37, !dbg !31
  %133 = add i32 %121, %37, !dbg !31
  %134 = add i32 %122, %37, !dbg !31
  %135 = add i32 %123, %37, !dbg !31
  %136 = add i32 %120, %38, !dbg !31
  %137 = add i32 %121, %38, !dbg !31
  %138 = add i32 %122, %38, !dbg !31
  %139 = add i32 %123, %38, !dbg !31
  %140 = sext i32 %124 to i64, !dbg !32
  %141 = getelementptr float, ptr addrspace(1) %0, i64 %140, !dbg !32
  %142 = sext i32 %125 to i64, !dbg !32
  %143 = getelementptr float, ptr addrspace(1) %0, i64 %142, !dbg !32
  %144 = sext i32 %126 to i64, !dbg !32
  %145 = getelementptr float, ptr addrspace(1) %0, i64 %144, !dbg !32
  %146 = sext i32 %127 to i64, !dbg !32
  %147 = getelementptr float, ptr addrspace(1) %0, i64 %146, !dbg !32
  %148 = sext i32 %128 to i64, !dbg !32
  %149 = getelementptr float, ptr addrspace(1) %0, i64 %148, !dbg !32
  %150 = sext i32 %129 to i64, !dbg !32
  %151 = getelementptr float, ptr addrspace(1) %0, i64 %150, !dbg !32
  %152 = sext i32 %130 to i64, !dbg !32
  %153 = getelementptr float, ptr addrspace(1) %0, i64 %152, !dbg !32
  %154 = sext i32 %131 to i64, !dbg !32
  %155 = getelementptr float, ptr addrspace(1) %0, i64 %154, !dbg !32
  %156 = sext i32 %132 to i64, !dbg !32
  %157 = getelementptr float, ptr addrspace(1) %0, i64 %156, !dbg !32
  %158 = sext i32 %133 to i64, !dbg !32
  %159 = getelementptr float, ptr addrspace(1) %0, i64 %158, !dbg !32
  %160 = sext i32 %134 to i64, !dbg !32
  %161 = getelementptr float, ptr addrspace(1) %0, i64 %160, !dbg !32
  %162 = sext i32 %135 to i64, !dbg !32
  %163 = getelementptr float, ptr addrspace(1) %0, i64 %162, !dbg !32
  %164 = sext i32 %136 to i64, !dbg !32
  %165 = getelementptr float, ptr addrspace(1) %0, i64 %164, !dbg !32
  %166 = sext i32 %137 to i64, !dbg !32
  %167 = getelementptr float, ptr addrspace(1) %0, i64 %166, !dbg !32
  %168 = sext i32 %138 to i64, !dbg !32
  %169 = getelementptr float, ptr addrspace(1) %0, i64 %168, !dbg !32
  %170 = sext i32 %139 to i64, !dbg !32
  %171 = getelementptr float, ptr addrspace(1) %0, i64 %170, !dbg !32
  %172 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %141, i1 %25) #2, !dbg !33
  %173 = bitcast i32 %172 to float, !dbg !33
  %174 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %143, i1 %25) #2, !dbg !33
  %175 = bitcast i32 %174 to float, !dbg !33
  %176 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %145, i1 %25) #2, !dbg !33
  %177 = bitcast i32 %176 to float, !dbg !33
  %178 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %147, i1 %25) #2, !dbg !33
  %179 = bitcast i32 %178 to float, !dbg !33
  %180 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %149, i1 %25) #2, !dbg !33
  %181 = bitcast i32 %180 to float, !dbg !33
  %182 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %151, i1 %25) #2, !dbg !33
  %183 = bitcast i32 %182 to float, !dbg !33
  %184 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %153, i1 %25) #2, !dbg !33
  %185 = bitcast i32 %184 to float, !dbg !33
  %186 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %155, i1 %25) #2, !dbg !33
  %187 = bitcast i32 %186 to float, !dbg !33
  %188 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %157, i1 %25) #2, !dbg !33
  %189 = bitcast i32 %188 to float, !dbg !33
  %190 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %159, i1 %25) #2, !dbg !33
  %191 = bitcast i32 %190 to float, !dbg !33
  %192 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %161, i1 %25) #2, !dbg !33
  %193 = bitcast i32 %192 to float, !dbg !33
  %194 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %163, i1 %25) #2, !dbg !33
  %195 = bitcast i32 %194 to float, !dbg !33
  %196 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %165, i1 %25) #2, !dbg !33
  %197 = bitcast i32 %196 to float, !dbg !33
  %198 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %167, i1 %25) #2, !dbg !33
  %199 = bitcast i32 %198 to float, !dbg !33
  %200 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %169, i1 %25) #2, !dbg !33
  %201 = bitcast i32 %200 to float, !dbg !33
  %202 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %171, i1 %25) #2, !dbg !33
  %203 = bitcast i32 %202 to float, !dbg !33
  %204 = add nsw i32 %30, 4, !dbg !34
  %205 = or disjoint i32 %31, 4, !dbg !35
  %206 = add nuw i32 %204, %31, !dbg !35
  %207 = or disjoint i32 %31, 12, !dbg !35
  %208 = add i32 %204, %32, !dbg !35
  %209 = add i32 %205, %35, !dbg !36
  %210 = add i32 %206, %35, !dbg !36
  %211 = add i32 %207, %35, !dbg !36
  %212 = add i32 %208, %35, !dbg !36
  %213 = add i32 %205, %36, !dbg !36
  %214 = add i32 %206, %36, !dbg !36
  %215 = add i32 %207, %36, !dbg !36
  %216 = add i32 %208, %36, !dbg !36
  %217 = add i32 %205, %37, !dbg !36
  %218 = add i32 %206, %37, !dbg !36
  %219 = add i32 %207, %37, !dbg !36
  %220 = add i32 %208, %37, !dbg !36
  %221 = add i32 %205, %38, !dbg !36
  %222 = add i32 %206, %38, !dbg !36
  %223 = add i32 %207, %38, !dbg !36
  %224 = add i32 %208, %38, !dbg !36
  %225 = sext i32 %209 to i64, !dbg !37
  %226 = getelementptr float, ptr addrspace(1) %0, i64 %225, !dbg !37
  %227 = sext i32 %210 to i64, !dbg !37
  %228 = getelementptr float, ptr addrspace(1) %0, i64 %227, !dbg !37
  %229 = sext i32 %211 to i64, !dbg !37
  %230 = getelementptr float, ptr addrspace(1) %0, i64 %229, !dbg !37
  %231 = sext i32 %212 to i64, !dbg !37
  %232 = getelementptr float, ptr addrspace(1) %0, i64 %231, !dbg !37
  %233 = sext i32 %213 to i64, !dbg !37
  %234 = getelementptr float, ptr addrspace(1) %0, i64 %233, !dbg !37
  %235 = sext i32 %214 to i64, !dbg !37
  %236 = getelementptr float, ptr addrspace(1) %0, i64 %235, !dbg !37
  %237 = sext i32 %215 to i64, !dbg !37
  %238 = getelementptr float, ptr addrspace(1) %0, i64 %237, !dbg !37
  %239 = sext i32 %216 to i64, !dbg !37
  %240 = getelementptr float, ptr addrspace(1) %0, i64 %239, !dbg !37
  %241 = sext i32 %217 to i64, !dbg !37
  %242 = getelementptr float, ptr addrspace(1) %0, i64 %241, !dbg !37
  %243 = sext i32 %218 to i64, !dbg !37
  %244 = getelementptr float, ptr addrspace(1) %0, i64 %243, !dbg !37
  %245 = sext i32 %219 to i64, !dbg !37
  %246 = getelementptr float, ptr addrspace(1) %0, i64 %245, !dbg !37
  %247 = sext i32 %220 to i64, !dbg !37
  %248 = getelementptr float, ptr addrspace(1) %0, i64 %247, !dbg !37
  %249 = sext i32 %221 to i64, !dbg !37
  %250 = getelementptr float, ptr addrspace(1) %0, i64 %249, !dbg !37
  %251 = sext i32 %222 to i64, !dbg !37
  %252 = getelementptr float, ptr addrspace(1) %0, i64 %251, !dbg !37
  %253 = sext i32 %223 to i64, !dbg !37
  %254 = getelementptr float, ptr addrspace(1) %0, i64 %253, !dbg !37
  %255 = sext i32 %224 to i64, !dbg !37
  %256 = getelementptr float, ptr addrspace(1) %0, i64 %255, !dbg !37
  %257 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %226, i1 %25) #2, !dbg !38
  %258 = bitcast i32 %257 to float, !dbg !38
  %259 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %228, i1 %25) #2, !dbg !38
  %260 = bitcast i32 %259 to float, !dbg !38
  %261 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %230, i1 %25) #2, !dbg !38
  %262 = bitcast i32 %261 to float, !dbg !38
  %263 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %232, i1 %25) #2, !dbg !38
  %264 = bitcast i32 %263 to float, !dbg !38
  %265 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %234, i1 %25) #2, !dbg !38
  %266 = bitcast i32 %265 to float, !dbg !38
  %267 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %236, i1 %25) #2, !dbg !38
  %268 = bitcast i32 %267 to float, !dbg !38
  %269 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %238, i1 %25) #2, !dbg !38
  %270 = bitcast i32 %269 to float, !dbg !38
  %271 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %240, i1 %25) #2, !dbg !38
  %272 = bitcast i32 %271 to float, !dbg !38
  %273 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %242, i1 %25) #2, !dbg !38
  %274 = bitcast i32 %273 to float, !dbg !38
  %275 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %244, i1 %25) #2, !dbg !38
  %276 = bitcast i32 %275 to float, !dbg !38
  %277 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %246, i1 %25) #2, !dbg !38
  %278 = bitcast i32 %277 to float, !dbg !38
  %279 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %248, i1 %25) #2, !dbg !38
  %280 = bitcast i32 %279 to float, !dbg !38
  %281 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %250, i1 %25) #2, !dbg !38
  %282 = bitcast i32 %281 to float, !dbg !38
  %283 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %252, i1 %25) #2, !dbg !38
  %284 = bitcast i32 %283 to float, !dbg !38
  %285 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %254, i1 %25) #2, !dbg !38
  %286 = bitcast i32 %285 to float, !dbg !38
  %287 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %256, i1 %25) #2, !dbg !38
  %288 = bitcast i32 %287 to float, !dbg !38
  %289 = add nsw i32 %30, 5, !dbg !39
  %290 = or disjoint i32 %31, 5, !dbg !40
  %291 = add nuw i32 %289, %31, !dbg !40
  %292 = or disjoint i32 %31, 13, !dbg !40
  %293 = add i32 %289, %32, !dbg !40
  %294 = add i32 %290, %35, !dbg !41
  %295 = add i32 %291, %35, !dbg !41
  %296 = add i32 %292, %35, !dbg !41
  %297 = add i32 %293, %35, !dbg !41
  %298 = add i32 %290, %36, !dbg !41
  %299 = add i32 %291, %36, !dbg !41
  %300 = add i32 %292, %36, !dbg !41
  %301 = add i32 %293, %36, !dbg !41
  %302 = add i32 %290, %37, !dbg !41
  %303 = add i32 %291, %37, !dbg !41
  %304 = add i32 %292, %37, !dbg !41
  %305 = add i32 %293, %37, !dbg !41
  %306 = add i32 %290, %38, !dbg !41
  %307 = add i32 %291, %38, !dbg !41
  %308 = add i32 %292, %38, !dbg !41
  %309 = add i32 %293, %38, !dbg !41
  %310 = sext i32 %294 to i64, !dbg !42
  %311 = getelementptr float, ptr addrspace(1) %0, i64 %310, !dbg !42
  %312 = sext i32 %295 to i64, !dbg !42
  %313 = getelementptr float, ptr addrspace(1) %0, i64 %312, !dbg !42
  %314 = sext i32 %296 to i64, !dbg !42
  %315 = getelementptr float, ptr addrspace(1) %0, i64 %314, !dbg !42
  %316 = sext i32 %297 to i64, !dbg !42
  %317 = getelementptr float, ptr addrspace(1) %0, i64 %316, !dbg !42
  %318 = sext i32 %298 to i64, !dbg !42
  %319 = getelementptr float, ptr addrspace(1) %0, i64 %318, !dbg !42
  %320 = sext i32 %299 to i64, !dbg !42
  %321 = getelementptr float, ptr addrspace(1) %0, i64 %320, !dbg !42
  %322 = sext i32 %300 to i64, !dbg !42
  %323 = getelementptr float, ptr addrspace(1) %0, i64 %322, !dbg !42
  %324 = sext i32 %301 to i64, !dbg !42
  %325 = getelementptr float, ptr addrspace(1) %0, i64 %324, !dbg !42
  %326 = sext i32 %302 to i64, !dbg !42
  %327 = getelementptr float, ptr addrspace(1) %0, i64 %326, !dbg !42
  %328 = sext i32 %303 to i64, !dbg !42
  %329 = getelementptr float, ptr addrspace(1) %0, i64 %328, !dbg !42
  %330 = sext i32 %304 to i64, !dbg !42
  %331 = getelementptr float, ptr addrspace(1) %0, i64 %330, !dbg !42
  %332 = sext i32 %305 to i64, !dbg !42
  %333 = getelementptr float, ptr addrspace(1) %0, i64 %332, !dbg !42
  %334 = sext i32 %306 to i64, !dbg !42
  %335 = getelementptr float, ptr addrspace(1) %0, i64 %334, !dbg !42
  %336 = sext i32 %307 to i64, !dbg !42
  %337 = getelementptr float, ptr addrspace(1) %0, i64 %336, !dbg !42
  %338 = sext i32 %308 to i64, !dbg !42
  %339 = getelementptr float, ptr addrspace(1) %0, i64 %338, !dbg !42
  %340 = sext i32 %309 to i64, !dbg !42
  %341 = getelementptr float, ptr addrspace(1) %0, i64 %340, !dbg !42
  %342 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %311, i1 %25) #2, !dbg !43
  %343 = bitcast i32 %342 to float, !dbg !43
  %344 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %313, i1 %25) #2, !dbg !43
  %345 = bitcast i32 %344 to float, !dbg !43
  %346 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %315, i1 %25) #2, !dbg !43
  %347 = bitcast i32 %346 to float, !dbg !43
  %348 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %317, i1 %25) #2, !dbg !43
  %349 = bitcast i32 %348 to float, !dbg !43
  %350 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %319, i1 %25) #2, !dbg !43
  %351 = bitcast i32 %350 to float, !dbg !43
  %352 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %321, i1 %25) #2, !dbg !43
  %353 = bitcast i32 %352 to float, !dbg !43
  %354 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %323, i1 %25) #2, !dbg !43
  %355 = bitcast i32 %354 to float, !dbg !43
  %356 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %325, i1 %25) #2, !dbg !43
  %357 = bitcast i32 %356 to float, !dbg !43
  %358 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %327, i1 %25) #2, !dbg !43
  %359 = bitcast i32 %358 to float, !dbg !43
  %360 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %329, i1 %25) #2, !dbg !43
  %361 = bitcast i32 %360 to float, !dbg !43
  %362 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %331, i1 %25) #2, !dbg !43
  %363 = bitcast i32 %362 to float, !dbg !43
  %364 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %333, i1 %25) #2, !dbg !43
  %365 = bitcast i32 %364 to float, !dbg !43
  %366 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %335, i1 %25) #2, !dbg !43
  %367 = bitcast i32 %366 to float, !dbg !43
  %368 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %337, i1 %25) #2, !dbg !43
  %369 = bitcast i32 %368 to float, !dbg !43
  %370 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %339, i1 %25) #2, !dbg !43
  %371 = bitcast i32 %370 to float, !dbg !43
  %372 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %341, i1 %25) #2, !dbg !43
  %373 = bitcast i32 %372 to float, !dbg !43
  %374 = fcmp ogt float %173, %88, !dbg !44
  %375 = fcmp ogt float %175, %90, !dbg !44
  %376 = fcmp ogt float %177, %92, !dbg !44
  %377 = fcmp ogt float %179, %94, !dbg !44
  %378 = fcmp ogt float %181, %96, !dbg !44
  %379 = fcmp ogt float %183, %98, !dbg !44
  %380 = fcmp ogt float %185, %100, !dbg !44
  %381 = fcmp ogt float %187, %102, !dbg !44
  %382 = fcmp ogt float %189, %104, !dbg !44
  %383 = fcmp ogt float %191, %106, !dbg !44
  %384 = fcmp ogt float %193, %108, !dbg !44
  %385 = fcmp ogt float %195, %110, !dbg !44
  %386 = fcmp ogt float %197, %112, !dbg !44
  %387 = fcmp ogt float %199, %114, !dbg !44
  %388 = fcmp ogt float %201, %116, !dbg !44
  %389 = fcmp ogt float %203, %118, !dbg !44
  %390 = fcmp uno float %173, 0.000000e+00, !dbg !48
  %391 = fcmp uno float %175, 0.000000e+00, !dbg !48
  %392 = fcmp uno float %177, 0.000000e+00, !dbg !48
  %393 = fcmp uno float %179, 0.000000e+00, !dbg !48
  %394 = fcmp uno float %181, 0.000000e+00, !dbg !48
  %395 = fcmp uno float %183, 0.000000e+00, !dbg !48
  %396 = fcmp uno float %185, 0.000000e+00, !dbg !48
  %397 = fcmp uno float %187, 0.000000e+00, !dbg !48
  %398 = fcmp uno float %189, 0.000000e+00, !dbg !48
  %399 = fcmp uno float %191, 0.000000e+00, !dbg !48
  %400 = fcmp uno float %193, 0.000000e+00, !dbg !48
  %401 = fcmp uno float %195, 0.000000e+00, !dbg !48
  %402 = fcmp uno float %197, 0.000000e+00, !dbg !48
  %403 = fcmp uno float %199, 0.000000e+00, !dbg !48
  %404 = fcmp uno float %201, 0.000000e+00, !dbg !48
  %405 = fcmp uno float %203, 0.000000e+00, !dbg !48
  %406 = or i1 %374, %390, !dbg !49
  %407 = or i1 %375, %391, !dbg !49
  %408 = or i1 %376, %392, !dbg !49
  %409 = or i1 %377, %393, !dbg !49
  %410 = or i1 %378, %394, !dbg !49
  %411 = or i1 %379, %395, !dbg !49
  %412 = or i1 %380, %396, !dbg !49
  %413 = or i1 %381, %397, !dbg !49
  %414 = or i1 %382, %398, !dbg !49
  %415 = or i1 %383, %399, !dbg !49
  %416 = or i1 %384, %400, !dbg !49
  %417 = or i1 %385, %401, !dbg !49
  %418 = or i1 %386, %402, !dbg !49
  %419 = or i1 %387, %403, !dbg !49
  %420 = or i1 %388, %404, !dbg !49
  %421 = or i1 %389, %405, !dbg !49
  %422 = select i1 %406, float %173, float %88, !dbg !50
  %423 = select i1 %407, float %175, float %90, !dbg !50
  %424 = select i1 %408, float %177, float %92, !dbg !50
  %425 = select i1 %409, float %179, float %94, !dbg !50
  %426 = select i1 %410, float %181, float %96, !dbg !50
  %427 = select i1 %411, float %183, float %98, !dbg !50
  %428 = select i1 %412, float %185, float %100, !dbg !50
  %429 = select i1 %413, float %187, float %102, !dbg !50
  %430 = select i1 %414, float %189, float %104, !dbg !50
  %431 = select i1 %415, float %191, float %106, !dbg !50
  %432 = select i1 %416, float %193, float %108, !dbg !50
  %433 = select i1 %417, float %195, float %110, !dbg !50
  %434 = select i1 %418, float %197, float %112, !dbg !50
  %435 = select i1 %419, float %199, float %114, !dbg !50
  %436 = select i1 %420, float %201, float %116, !dbg !50
  %437 = select i1 %421, float %203, float %118, !dbg !50
  %438 = fcmp olt float %422, %258, !dbg !51
  %439 = fcmp olt float %423, %260, !dbg !51
  %440 = fcmp olt float %424, %262, !dbg !51
  %441 = fcmp olt float %425, %264, !dbg !51
  %442 = fcmp olt float %426, %266, !dbg !51
  %443 = fcmp olt float %427, %268, !dbg !51
  %444 = fcmp olt float %428, %270, !dbg !51
  %445 = fcmp olt float %429, %272, !dbg !51
  %446 = fcmp olt float %430, %274, !dbg !51
  %447 = fcmp olt float %431, %276, !dbg !51
  %448 = fcmp olt float %432, %278, !dbg !51
  %449 = fcmp olt float %433, %280, !dbg !51
  %450 = fcmp olt float %434, %282, !dbg !51
  %451 = fcmp olt float %435, %284, !dbg !51
  %452 = fcmp olt float %436, %286, !dbg !51
  %453 = fcmp olt float %437, %288, !dbg !51
  %454 = fcmp uno float %258, 0.000000e+00, !dbg !53
  %455 = fcmp uno float %260, 0.000000e+00, !dbg !53
  %456 = fcmp uno float %262, 0.000000e+00, !dbg !53
  %457 = fcmp uno float %264, 0.000000e+00, !dbg !53
  %458 = fcmp uno float %266, 0.000000e+00, !dbg !53
  %459 = fcmp uno float %268, 0.000000e+00, !dbg !53
  %460 = fcmp uno float %270, 0.000000e+00, !dbg !53
  %461 = fcmp uno float %272, 0.000000e+00, !dbg !53
  %462 = fcmp uno float %274, 0.000000e+00, !dbg !53
  %463 = fcmp uno float %276, 0.000000e+00, !dbg !53
  %464 = fcmp uno float %278, 0.000000e+00, !dbg !53
  %465 = fcmp uno float %280, 0.000000e+00, !dbg !53
  %466 = fcmp uno float %282, 0.000000e+00, !dbg !53
  %467 = fcmp uno float %284, 0.000000e+00, !dbg !53
  %468 = fcmp uno float %286, 0.000000e+00, !dbg !53
  %469 = fcmp uno float %288, 0.000000e+00, !dbg !53
  %470 = or i1 %438, %454, !dbg !54
  %471 = or i1 %439, %455, !dbg !54
  %472 = or i1 %440, %456, !dbg !54
  %473 = or i1 %441, %457, !dbg !54
  %474 = or i1 %442, %458, !dbg !54
  %475 = or i1 %443, %459, !dbg !54
  %476 = or i1 %444, %460, !dbg !54
  %477 = or i1 %445, %461, !dbg !54
  %478 = or i1 %446, %462, !dbg !54
  %479 = or i1 %447, %463, !dbg !54
  %480 = or i1 %448, %464, !dbg !54
  %481 = or i1 %449, %465, !dbg !54
  %482 = or i1 %450, %466, !dbg !54
  %483 = or i1 %451, %467, !dbg !54
  %484 = or i1 %452, %468, !dbg !54
  %485 = or i1 %453, %469, !dbg !54
  %486 = select i1 %470, float %258, float %422, !dbg !55
  %487 = select i1 %471, float %260, float %423, !dbg !55
  %488 = select i1 %472, float %262, float %424, !dbg !55
  %489 = select i1 %473, float %264, float %425, !dbg !55
  %490 = select i1 %474, float %266, float %426, !dbg !55
  %491 = select i1 %475, float %268, float %427, !dbg !55
  %492 = select i1 %476, float %270, float %428, !dbg !55
  %493 = select i1 %477, float %272, float %429, !dbg !55
  %494 = select i1 %478, float %274, float %430, !dbg !55
  %495 = select i1 %479, float %276, float %431, !dbg !55
  %496 = select i1 %480, float %278, float %432, !dbg !55
  %497 = select i1 %481, float %280, float %433, !dbg !55
  %498 = select i1 %482, float %282, float %434, !dbg !55
  %499 = select i1 %483, float %284, float %435, !dbg !55
  %500 = select i1 %484, float %286, float %436, !dbg !55
  %501 = select i1 %485, float %288, float %437, !dbg !55
  %502 = fcmp olt float %486, %343, !dbg !56
  %503 = fcmp olt float %487, %345, !dbg !56
  %504 = fcmp olt float %488, %347, !dbg !56
  %505 = fcmp olt float %489, %349, !dbg !56
  %506 = fcmp olt float %490, %351, !dbg !56
  %507 = fcmp olt float %491, %353, !dbg !56
  %508 = fcmp olt float %492, %355, !dbg !56
  %509 = fcmp olt float %493, %357, !dbg !56
  %510 = fcmp olt float %494, %359, !dbg !56
  %511 = fcmp olt float %495, %361, !dbg !56
  %512 = fcmp olt float %496, %363, !dbg !56
  %513 = fcmp olt float %497, %365, !dbg !56
  %514 = fcmp olt float %498, %367, !dbg !56
  %515 = fcmp olt float %499, %369, !dbg !56
  %516 = fcmp olt float %500, %371, !dbg !56
  %517 = fcmp olt float %501, %373, !dbg !56
  %518 = fcmp uno float %343, 0.000000e+00, !dbg !58
  %519 = fcmp uno float %345, 0.000000e+00, !dbg !58
  %520 = fcmp uno float %347, 0.000000e+00, !dbg !58
  %521 = fcmp uno float %349, 0.000000e+00, !dbg !58
  %522 = fcmp uno float %351, 0.000000e+00, !dbg !58
  %523 = fcmp uno float %353, 0.000000e+00, !dbg !58
  %524 = fcmp uno float %355, 0.000000e+00, !dbg !58
  %525 = fcmp uno float %357, 0.000000e+00, !dbg !58
  %526 = fcmp uno float %359, 0.000000e+00, !dbg !58
  %527 = fcmp uno float %361, 0.000000e+00, !dbg !58
  %528 = fcmp uno float %363, 0.000000e+00, !dbg !58
  %529 = fcmp uno float %365, 0.000000e+00, !dbg !58
  %530 = fcmp uno float %367, 0.000000e+00, !dbg !58
  %531 = fcmp uno float %369, 0.000000e+00, !dbg !58
  %532 = fcmp uno float %371, 0.000000e+00, !dbg !58
  %533 = fcmp uno float %373, 0.000000e+00, !dbg !58
  %534 = or i1 %502, %518, !dbg !59
  %535 = or i1 %503, %519, !dbg !59
  %536 = or i1 %504, %520, !dbg !59
  %537 = or i1 %505, %521, !dbg !59
  %538 = or i1 %506, %522, !dbg !59
  %539 = or i1 %507, %523, !dbg !59
  %540 = or i1 %508, %524, !dbg !59
  %541 = or i1 %509, %525, !dbg !59
  %542 = or i1 %510, %526, !dbg !59
  %543 = or i1 %511, %527, !dbg !59
  %544 = or i1 %512, %528, !dbg !59
  %545 = or i1 %513, %529, !dbg !59
  %546 = or i1 %514, %530, !dbg !59
  %547 = or i1 %515, %531, !dbg !59
  %548 = or i1 %516, %532, !dbg !59
  %549 = or i1 %517, %533, !dbg !59
  %550 = zext i1 %374 to i8, !dbg !60
  %551 = zext i1 %375 to i8, !dbg !60
  %552 = zext i1 %376 to i8, !dbg !60
  %553 = zext i1 %377 to i8, !dbg !60
  %554 = zext i1 %378 to i8, !dbg !60
  %555 = zext i1 %379 to i8, !dbg !60
  %556 = zext i1 %380 to i8, !dbg !60
  %557 = zext i1 %381 to i8, !dbg !60
  %558 = zext i1 %382 to i8, !dbg !60
  %559 = zext i1 %383 to i8, !dbg !60
  %560 = zext i1 %384 to i8, !dbg !60
  %561 = zext i1 %385 to i8, !dbg !60
  %562 = zext i1 %386 to i8, !dbg !60
  %563 = zext i1 %387 to i8, !dbg !60
  %564 = zext i1 %388 to i8, !dbg !60
  %565 = zext i1 %389 to i8, !dbg !60
  %566 = select i1 %438, i8 2, i8 %550, !dbg !61
  %567 = select i1 %439, i8 2, i8 %551, !dbg !61
  %568 = select i1 %440, i8 2, i8 %552, !dbg !61
  %569 = select i1 %441, i8 2, i8 %553, !dbg !61
  %570 = select i1 %442, i8 2, i8 %554, !dbg !61
  %571 = select i1 %443, i8 2, i8 %555, !dbg !61
  %572 = select i1 %444, i8 2, i8 %556, !dbg !61
  %573 = select i1 %445, i8 2, i8 %557, !dbg !61
  %574 = select i1 %446, i8 2, i8 %558, !dbg !61
  %575 = select i1 %447, i8 2, i8 %559, !dbg !61
  %576 = select i1 %448, i8 2, i8 %560, !dbg !61
  %577 = select i1 %449, i8 2, i8 %561, !dbg !61
  %578 = select i1 %450, i8 2, i8 %562, !dbg !61
  %579 = select i1 %451, i8 2, i8 %563, !dbg !61
  %580 = select i1 %452, i8 2, i8 %564, !dbg !61
  %581 = select i1 %453, i8 2, i8 %565, !dbg !61
  %582 = select i1 %502, i8 3, i8 %566, !dbg !62
  %583 = select i1 %503, i8 3, i8 %567, !dbg !62
  %584 = select i1 %504, i8 3, i8 %568, !dbg !62
  %585 = select i1 %505, i8 3, i8 %569, !dbg !62
  %586 = select i1 %506, i8 3, i8 %570, !dbg !62
  %587 = select i1 %507, i8 3, i8 %571, !dbg !62
  %588 = select i1 %508, i8 3, i8 %572, !dbg !62
  %589 = select i1 %509, i8 3, i8 %573, !dbg !62
  %590 = select i1 %510, i8 3, i8 %574, !dbg !62
  %591 = select i1 %511, i8 3, i8 %575, !dbg !62
  %592 = select i1 %512, i8 3, i8 %576, !dbg !62
  %593 = select i1 %513, i8 3, i8 %577, !dbg !62
  %594 = select i1 %514, i8 3, i8 %578, !dbg !62
  %595 = select i1 %515, i8 3, i8 %579, !dbg !62
  %596 = select i1 %516, i8 3, i8 %580, !dbg !62
  %597 = select i1 %517, i8 3, i8 %581, !dbg !62
  %598 = add i32 %15, %20, !dbg !63
  %599 = shl i32 %598, 2, !dbg !63
  %600 = add i32 %16, %20, !dbg !63
  %601 = shl i32 %600, 2, !dbg !63
  %602 = add i32 %17, %20, !dbg !63
  %603 = shl i32 %602, 2, !dbg !63
  %604 = add i32 %18, %20, !dbg !63
  %605 = shl i32 %604, 2, !dbg !63
  %606 = sext i32 %599 to i64, !dbg !64
  %607 = getelementptr float, ptr addrspace(1) %1, i64 %606, !dbg !64
  %608 = sext i32 %601 to i64, !dbg !64
  %609 = getelementptr float, ptr addrspace(1) %1, i64 %608, !dbg !64
  %610 = sext i32 %603 to i64, !dbg !64
  %611 = getelementptr float, ptr addrspace(1) %1, i64 %610, !dbg !64
  %612 = sext i32 %605 to i64, !dbg !64
  %613 = getelementptr float, ptr addrspace(1) %1, i64 %612, !dbg !64
  %614 = bitcast float %486 to i32, !dbg !65
  %615 = select i1 %534, i32 %342, i32 %614, !dbg !66
  %616 = bitcast float %487 to i32, !dbg !65
  %617 = select i1 %535, i32 %344, i32 %616, !dbg !66
  %618 = bitcast float %488 to i32, !dbg !65
  %619 = select i1 %536, i32 %346, i32 %618, !dbg !66
  %620 = bitcast float %489 to i32, !dbg !65
  %621 = select i1 %537, i32 %348, i32 %620, !dbg !66
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %615, i32 %617, i32 %619, i32 %621, ptr addrspace(1) %607, i1 %25) #2, !dbg !65
  %622 = bitcast float %490 to i32, !dbg !65
  %623 = select i1 %538, i32 %350, i32 %622, !dbg !66
  %624 = bitcast float %491 to i32, !dbg !65
  %625 = select i1 %539, i32 %352, i32 %624, !dbg !66
  %626 = bitcast float %492 to i32, !dbg !65
  %627 = select i1 %540, i32 %354, i32 %626, !dbg !66
  %628 = bitcast float %493 to i32, !dbg !65
  %629 = select i1 %541, i32 %356, i32 %628, !dbg !66
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %623, i32 %625, i32 %627, i32 %629, ptr addrspace(1) %609, i1 %25) #2, !dbg !65
  %630 = bitcast float %494 to i32, !dbg !65
  %631 = select i1 %542, i32 %358, i32 %630, !dbg !66
  %632 = bitcast float %495 to i32, !dbg !65
  %633 = select i1 %543, i32 %360, i32 %632, !dbg !66
  %634 = bitcast float %496 to i32, !dbg !65
  %635 = select i1 %544, i32 %362, i32 %634, !dbg !66
  %636 = bitcast float %497 to i32, !dbg !65
  %637 = select i1 %545, i32 %364, i32 %636, !dbg !66
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %631, i32 %633, i32 %635, i32 %637, ptr addrspace(1) %611, i1 %25) #2, !dbg !65
  %638 = bitcast float %498 to i32, !dbg !65
  %639 = select i1 %546, i32 %366, i32 %638, !dbg !66
  %640 = bitcast float %499 to i32, !dbg !65
  %641 = select i1 %547, i32 %368, i32 %640, !dbg !66
  %642 = bitcast float %500 to i32, !dbg !65
  %643 = select i1 %548, i32 %370, i32 %642, !dbg !66
  %644 = bitcast float %501 to i32, !dbg !65
  %645 = select i1 %549, i32 %372, i32 %644, !dbg !66
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %639, i32 %641, i32 %643, i32 %645, ptr addrspace(1) %613, i1 %25) #2, !dbg !65
  %646 = shl i32 %24, 9, !dbg !67
  %647 = add i32 %646, %.decomposed, !dbg !68
  %648 = shl i32 %28, 11, !dbg !69
  %649 = add i32 %647, %648, !dbg !70
  %650 = sext i32 %649 to i64, !dbg !71
  %651 = getelementptr i8, ptr addrspace(1) %2, i64 %650, !dbg !71
  %652 = and i32 %13, 4080, !dbg !72
  %653 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %9, !dbg !72
  %654 = insertelement <1 x i8> poison, i8 %582, i64 0, !dbg !72
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %653, <1 x i8> %654, i1 true) #2, !dbg !72
  %655 = getelementptr inbounds i8, ptr addrspace(3) %653, i32 1040, !dbg !72
  %656 = insertelement <1 x i8> poison, i8 %583, i64 0, !dbg !72
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %655, <1 x i8> %656, i1 true) #2, !dbg !72
  %657 = getelementptr inbounds i8, ptr addrspace(3) %653, i32 2080, !dbg !72
  %658 = insertelement <1 x i8> poison, i8 %584, i64 0, !dbg !72
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %657, <1 x i8> %658, i1 true) #2, !dbg !72
  %659 = getelementptr inbounds i8, ptr addrspace(3) %653, i32 3120, !dbg !72
  %660 = insertelement <1 x i8> poison, i8 %585, i64 0, !dbg !72
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %659, <1 x i8> %660, i1 true) #2, !dbg !72
  %661 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %10, !dbg !72
  %662 = insertelement <1 x i8> poison, i8 %586, i64 0, !dbg !72
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %661, <1 x i8> %662, i1 true) #2, !dbg !72
  %663 = getelementptr inbounds i8, ptr addrspace(3) %653, i32 1296, !dbg !72
  %664 = insertelement <1 x i8> poison, i8 %587, i64 0, !dbg !72
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %663, <1 x i8> %664, i1 true) #2, !dbg !72
  %665 = getelementptr inbounds i8, ptr addrspace(3) %653, i32 2336, !dbg !72
  %666 = insertelement <1 x i8> poison, i8 %588, i64 0, !dbg !72
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %665, <1 x i8> %666, i1 true) #2, !dbg !72
  %667 = getelementptr inbounds i8, ptr addrspace(3) %653, i32 3376, !dbg !72
  %668 = insertelement <1 x i8> poison, i8 %589, i64 0, !dbg !72
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %667, <1 x i8> %668, i1 true) #2, !dbg !72
  %669 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %11, !dbg !72
  %670 = insertelement <1 x i8> poison, i8 %590, i64 0, !dbg !72
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %669, <1 x i8> %670, i1 true) #2, !dbg !72
  %671 = getelementptr inbounds i8, ptr addrspace(3) %653, i32 1552, !dbg !72
  %672 = insertelement <1 x i8> poison, i8 %591, i64 0, !dbg !72
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %671, <1 x i8> %672, i1 true) #2, !dbg !72
  %673 = getelementptr inbounds i8, ptr addrspace(3) %653, i32 2592, !dbg !72
  %674 = insertelement <1 x i8> poison, i8 %592, i64 0, !dbg !72
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %673, <1 x i8> %674, i1 true) #2, !dbg !72
  %675 = getelementptr inbounds i8, ptr addrspace(3) %653, i32 3632, !dbg !72
  %676 = insertelement <1 x i8> poison, i8 %593, i64 0, !dbg !72
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %675, <1 x i8> %676, i1 true) #2, !dbg !72
  %677 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %12, !dbg !72
  %678 = insertelement <1 x i8> poison, i8 %594, i64 0, !dbg !72
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %677, <1 x i8> %678, i1 true) #2, !dbg !72
  %679 = getelementptr inbounds i8, ptr addrspace(3) %653, i32 1808, !dbg !72
  %680 = insertelement <1 x i8> poison, i8 %595, i64 0, !dbg !72
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %679, <1 x i8> %680, i1 true) #2, !dbg !72
  %681 = getelementptr inbounds i8, ptr addrspace(3) %653, i32 2848, !dbg !72
  %682 = insertelement <1 x i8> poison, i8 %596, i64 0, !dbg !72
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %681, <1 x i8> %682, i1 true) #2, !dbg !72
  %683 = getelementptr inbounds i8, ptr addrspace(3) %653, i32 3888, !dbg !72
  %684 = insertelement <1 x i8> poison, i8 %597, i64 0, !dbg !72
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %683, <1 x i8> %684, i1 true) #2, !dbg !72
  tail call void @llvm.nvvm.barrier0(), !dbg !72
  %685 = lshr i32 %13, 6, !dbg !72
  %686 = and i32 %685, 48, !dbg !72
  %687 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %686, !dbg !72
  %688 = getelementptr i8, ptr addrspace(3) %687, i32 %652, !dbg !72
  %689 = load i32, ptr addrspace(3) %688, align 16, !dbg !72
  %690 = getelementptr inbounds i8, ptr addrspace(3) %688, i32 4, !dbg !72
  %691 = load i32, ptr addrspace(3) %690, align 4, !dbg !72
  %692 = getelementptr inbounds i8, ptr addrspace(3) %688, i32 8, !dbg !72
  %693 = load i32, ptr addrspace(3) %692, align 8, !dbg !72
  %694 = getelementptr inbounds i8, ptr addrspace(3) %688, i32 12, !dbg !72
  %695 = load i32, ptr addrspace(3) %694, align 4, !dbg !72
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %689, i32 %691, i32 %693, i32 %695, ptr addrspace(1) %651, i1 %26) #2, !dbg !72
  ret void, !dbg !73
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c4rjn3i6dmommkba43uuwnv2uqpgcbl776txxe3w3vsoo6nytkax.py", directory: "inductor_cache/4r")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_20, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_20, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_20", linkageName: "triton_poi_fused_max_pool2d_with_indices_20", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 28, column: 19, scope: !7)
!20 = !DILocation(line: 33, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 19, scope: !7)
!22 = !DILocation(line: 34, column: 32, scope: !7)
!23 = !DILocation(line: 34, column: 39, scope: !7)
!24 = !DILocation(line: 34, column: 37, scope: !7)
!25 = !DILocation(line: 34, column: 47, scope: !7)
!26 = !DILocation(line: 34, column: 44, scope: !7)
!27 = !DILocation(line: 34, column: 30, scope: !7)
!28 = !DILocation(line: 34, column: 52, scope: !7)
!29 = !DILocation(line: 35, column: 34, scope: !7)
!30 = !DILocation(line: 35, column: 41, scope: !7)
!31 = !DILocation(line: 35, column: 48, scope: !7)
!32 = !DILocation(line: 35, column: 30, scope: !7)
!33 = !DILocation(line: 35, column: 56, scope: !7)
!34 = !DILocation(line: 36, column: 34, scope: !7)
!35 = !DILocation(line: 36, column: 41, scope: !7)
!36 = !DILocation(line: 36, column: 48, scope: !7)
!37 = !DILocation(line: 36, column: 30, scope: !7)
!38 = !DILocation(line: 36, column: 56, scope: !7)
!39 = !DILocation(line: 37, column: 34, scope: !7)
!40 = !DILocation(line: 37, column: 41, scope: !7)
!41 = !DILocation(line: 37, column: 48, scope: !7)
!42 = !DILocation(line: 37, column: 30, scope: !7)
!43 = !DILocation(line: 37, column: 56, scope: !7)
!44 = !DILocation(line: 118, column: 15, scope: !45, inlinedAt: !47)
!45 = distinct !DILexicalBlockFile(scope: !7, file: !46, discriminator: 0)
!46 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!47 = !DILocation(line: 38, column: 40, scope: !7)
!48 = !DILocation(line: 120, column: 21, scope: !45, inlinedAt: !47)
!49 = !DILocation(line: 120, column: 16, scope: !45, inlinedAt: !47)
!50 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !47)
!51 = !DILocation(line: 118, column: 15, scope: !45, inlinedAt: !52)
!52 = !DILocation(line: 39, column: 40, scope: !7)
!53 = !DILocation(line: 120, column: 21, scope: !45, inlinedAt: !52)
!54 = !DILocation(line: 120, column: 16, scope: !45, inlinedAt: !52)
!55 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !52)
!56 = !DILocation(line: 118, column: 15, scope: !45, inlinedAt: !57)
!57 = !DILocation(line: 40, column: 40, scope: !7)
!58 = !DILocation(line: 120, column: 21, scope: !45, inlinedAt: !57)
!59 = !DILocation(line: 120, column: 16, scope: !45, inlinedAt: !57)
!60 = !DILocation(line: 44, column: 33, scope: !7)
!61 = !DILocation(line: 47, column: 35, scope: !7)
!62 = !DILocation(line: 50, column: 35, scope: !7)
!63 = !DILocation(line: 51, column: 30, scope: !7)
!64 = !DILocation(line: 51, column: 25, scope: !7)
!65 = !DILocation(line: 51, column: 43, scope: !7)
!66 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !57)
!67 = !DILocation(line: 52, column: 34, scope: !7)
!68 = !DILocation(line: 52, column: 30, scope: !7)
!69 = !DILocation(line: 52, column: 44, scope: !7)
!70 = !DILocation(line: 52, column: 39, scope: !7)
!71 = !DILocation(line: 52, column: 25, scope: !7)
!72 = !DILocation(line: 52, column: 56, scope: !7)
!73 = !DILocation(line: 52, column: 4, scope: !7)
