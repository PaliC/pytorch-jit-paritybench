; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_cat_25(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, i32 %11) local_unnamed_addr !dbg !7 {
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %14 = shl i32 %13, 8, !dbg !11
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %16 = shl i32 %15, 1, !dbg !12
  %17 = and i32 %16, 254, !dbg !12
  %18 = or disjoint i32 %14, %17, !dbg !13
  %19 = or disjoint i32 %18, 1, !dbg !13
  %.frozen = freeze i32 %18, !dbg !14
  %20 = sdiv i32 %.frozen, 128, !dbg !14
  %21 = mul i32 %20, 128, !dbg !15
  %.decomposed = sub i32 %.frozen, %21, !dbg !15
  %22 = srem i32 %19, 128, !dbg !15
  %23 = sdiv i32 %18, 8192, !dbg !16
  %24 = srem i32 %20, 64, !dbg !17
  %25 = sdiv i32 %18, 1024, !dbg !18
  %26 = srem i32 %25, 8, !dbg !19
  %27 = sext i32 %.decomposed to i64, !dbg !20
  %28 = getelementptr float, ptr addrspace(1) %5, i64 %27, !dbg !20
  %29 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %28, i1 true) #3, !dbg !21
  %30 = getelementptr float, ptr addrspace(1) %6, i64 %27, !dbg !22
  %31 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %30, i1 true) #3, !dbg !23
  %32 = extractvalue { i32, i32 } %31, 0, !dbg !23
  %33 = extractvalue { i32, i32 } %31, 1, !dbg !23
  %34 = bitcast i32 %32 to float, !dbg !23
  %35 = bitcast i32 %33 to float, !dbg !23
  %36 = getelementptr float, ptr addrspace(1) %7, i64 %27, !dbg !24
  %37 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %36, i1 true) #3, !dbg !25
  %38 = getelementptr float, ptr addrspace(1) %8, i64 %27, !dbg !26
  %39 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %38, i1 true) #3, !dbg !27
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %9, i1 true) #3, !dbg !28
  %41 = icmp slt i32 %.decomposed, 64, !dbg !29
  %42 = shl nsw i32 %20, 6, !dbg !30
  %43 = add nsw i32 %42, %.decomposed, !dbg !31
  %44 = sext i32 %43 to i64, !dbg !32
  %45 = getelementptr float, ptr addrspace(1) %1, i64 %44, !dbg !32
  %46 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %45, i1 %41, i32 0, i1 %41, i32 0, i1 %41) #3, !dbg !33
  %47 = icmp sgt i32 %.decomposed, 63, !dbg !34
  %48 = shl nsw i32 %.decomposed, 6, !dbg !35
  %49 = shl nsw i32 %22, 6, !dbg !35
  %50 = shl nsw i32 %23, 12, !dbg !36
  %51 = add nsw i32 %24, -4096, !dbg !35
  %52 = add nsw i32 %51, %48, !dbg !37
  %53 = add nsw i32 %52, %50, !dbg !38
  %54 = add nsw i32 %51, %49, !dbg !37
  %55 = add nsw i32 %54, %50, !dbg !38
  %56 = sext i32 %53 to i64, !dbg !39
  %57 = getelementptr float, ptr addrspace(1) %2, i64 %56, !dbg !39
  %58 = sext i32 %55 to i64, !dbg !39
  %59 = getelementptr float, ptr addrspace(1) %2, i64 %58, !dbg !39
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %57, i1 %47, i32 0, i1 %47) #3, !dbg !40
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %59, i1 %47, i32 0, i1 %47) #3, !dbg !40
  %62 = getelementptr float, ptr addrspace(1) %3, i64 %56, !dbg !41
  %63 = getelementptr float, ptr addrspace(1) %3, i64 %58, !dbg !41
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %62, i1 %47, i32 0, i1 %47) #3, !dbg !42
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %63, i1 %47, i32 0, i1 %47) #3, !dbg !42
  %66 = sext i32 %26 to i64, !dbg !43
  %67 = getelementptr float, ptr addrspace(1) %4, i64 %66, !dbg !43
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %67, i1 %47, i32 0, i1 %47) #3, !dbg !44
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %67, i1 %47, i32 0, i1 %47) #3, !dbg !44
  %70 = fadd float %34, 0x3EE4F8B580000000, !dbg !45
  %71 = fadd float %35, 0x3EE4F8B580000000, !dbg !45
  %72 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !46
  %.not.i = icmp eq i32 %72, 0, !dbg !46
  %73 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !46
  %.not1.i = icmp eq i32 %73, 0, !dbg !46
  br i1 %.not.i, label %79, label %74, !dbg !46

74:                                               ; preds = %12
  br i1 %.not1.i, label %77, label %75, !dbg !46

75:                                               ; preds = %74
  %76 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %70) #3, !dbg !46
  br label %__nv_sqrtf.exit, !dbg !46

77:                                               ; preds = %74
  %78 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %70) #3, !dbg !46
  br label %__nv_sqrtf.exit, !dbg !46

79:                                               ; preds = %12
  br i1 %.not1.i, label %82, label %80, !dbg !46

80:                                               ; preds = %79
  %81 = tail call float @llvm.nvvm.sqrt.rn.f(float %70) #3, !dbg !46
  br label %__nv_sqrtf.exit, !dbg !46

82:                                               ; preds = %79
  %83 = tail call float @llvm.nvvm.sqrt.approx.f(float %70) #3, !dbg !46
  br label %__nv_sqrtf.exit, !dbg !46

__nv_sqrtf.exit:                                  ; preds = %75, %77, %80, %82
  %.0.i = phi float [ %76, %75 ], [ %78, %77 ], [ %81, %80 ], [ %83, %82 ], !dbg !46
  %84 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !46
  %.not.i1 = icmp eq i32 %84, 0, !dbg !46
  %85 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !46
  %.not1.i4 = icmp eq i32 %85, 0, !dbg !46
  br i1 %.not.i1, label %91, label %86, !dbg !46

86:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %89, label %87, !dbg !46

87:                                               ; preds = %86
  %88 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %71) #3, !dbg !46
  br label %__nv_sqrtf.exit5, !dbg !46

89:                                               ; preds = %86
  %90 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %71) #3, !dbg !46
  br label %__nv_sqrtf.exit5, !dbg !46

91:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %94, label %92, !dbg !46

92:                                               ; preds = %91
  %93 = tail call float @llvm.nvvm.sqrt.rn.f(float %71) #3, !dbg !46
  br label %__nv_sqrtf.exit5, !dbg !46

94:                                               ; preds = %91
  %95 = tail call float @llvm.nvvm.sqrt.approx.f(float %71) #3, !dbg !46
  br label %__nv_sqrtf.exit5, !dbg !46

__nv_sqrtf.exit5:                                 ; preds = %87, %89, %92, %94
  %.0.i3 = phi float [ %88, %87 ], [ %90, %89 ], [ %93, %92 ], [ %95, %94 ], !dbg !46
  %96 = extractvalue { i32, i32 } %46, 1, !dbg !33
  %97 = bitcast i32 %96 to float, !dbg !33
  %98 = bitcast i32 %65 to float, !dbg !42
  %99 = bitcast i32 %69 to float, !dbg !44
  %100 = fmul float %98, %99, !dbg !47
  %101 = bitcast i32 %61 to float, !dbg !40
  %102 = fadd float %100, %101, !dbg !48
  %103 = select i1 %41, float %97, float %102, !dbg !49
  %104 = extractvalue { i32, i32 } %29, 1, !dbg !21
  %105 = bitcast i32 %104 to float, !dbg !21
  %106 = fsub float %103, %105, !dbg !50
  %107 = extractvalue { i32, i32 } %46, 0, !dbg !33
  %108 = bitcast i32 %107 to float, !dbg !33
  %109 = bitcast i32 %64 to float, !dbg !42
  %110 = bitcast i32 %68 to float, !dbg !44
  %111 = fmul float %109, %110, !dbg !47
  %112 = bitcast i32 %60 to float, !dbg !40
  %113 = fadd float %111, %112, !dbg !48
  %114 = select i1 %41, float %108, float %113, !dbg !49
  %115 = extractvalue { i32, i32 } %29, 0, !dbg !21
  %116 = bitcast i32 %115 to float, !dbg !21
  %117 = fsub float %114, %116, !dbg !50
  %118 = bitcast i32 %40 to float, !dbg !28
  %119 = extractvalue { i32, i32 } %39, 1, !dbg !27
  %120 = bitcast i32 %119 to float, !dbg !27
  %121 = extractvalue { i32, i32 } %39, 0, !dbg !27
  %122 = bitcast i32 %121 to float, !dbg !27
  %123 = extractvalue { i32, i32 } %37, 1, !dbg !25
  %124 = bitcast i32 %123 to float, !dbg !25
  %125 = extractvalue { i32, i32 } %37, 0, !dbg !25
  %126 = bitcast i32 %125 to float, !dbg !25
  %127 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !51
  %128 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !51
  %129 = fmul float %117, %127, !dbg !52
  %130 = fmul float %106, %128, !dbg !52
  %131 = fmul float %129, %126, !dbg !53
  %132 = fmul float %130, %124, !dbg !53
  %133 = fadd float %131, %122, !dbg !54
  %134 = fadd float %132, %120, !dbg !54
  %135 = fcmp ogt float %133, 0.000000e+00, !dbg !55
  %136 = fcmp ogt float %134, 0.000000e+00, !dbg !55
  %137 = fmul float %133, %118, !dbg !56
  %138 = fmul float %134, %118, !dbg !56
  %139 = select i1 %135, float %133, float %137, !dbg !57
  %140 = select i1 %136, float %134, float %138, !dbg !57
  %141 = sext i32 %18 to i64, !dbg !58
  %142 = getelementptr float, ptr addrspace(1) %10, i64 %141, !dbg !58
  %143 = bitcast float %114 to i32, !dbg !59
  %144 = bitcast float %103 to i32, !dbg !59
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %143, i32 %144, ptr addrspace(1) %142, i1 true) #3, !dbg !59
  %145 = getelementptr float, ptr addrspace(1) %0, i64 %141, !dbg !60
  %146 = bitcast float %139 to i32, !dbg !61
  %147 = bitcast float %140 to i32, !dbg !61
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %146, i32 %147, ptr addrspace(1) %145, i1 true) #3, !dbg !61
  ret void, !dbg !62
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cvixqli3an445gnsw72mnhmn3x56ucwtsw2jigmatiwehzqddkw2.py", directory: "inductor_cache/vi")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_cat_25, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_cat_25, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_cat_25", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training__prelu_kernel_cat_25", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 27, column: 28, scope: !7)
!18 = !DILocation(line: 28, column: 21, scope: !7)
!19 = !DILocation(line: 28, column: 29, scope: !7)
!20 = !DILocation(line: 30, column: 31, scope: !7)
!21 = !DILocation(line: 30, column: 36, scope: !7)
!22 = !DILocation(line: 31, column: 31, scope: !7)
!23 = !DILocation(line: 31, column: 36, scope: !7)
!24 = !DILocation(line: 32, column: 31, scope: !7)
!25 = !DILocation(line: 32, column: 36, scope: !7)
!26 = !DILocation(line: 33, column: 31, scope: !7)
!27 = !DILocation(line: 33, column: 36, scope: !7)
!28 = !DILocation(line: 34, column: 20, scope: !7)
!29 = !DILocation(line: 40, column: 18, scope: !7)
!30 = !DILocation(line: 41, column: 33, scope: !7)
!31 = !DILocation(line: 41, column: 39, scope: !7)
!32 = !DILocation(line: 41, column: 30, scope: !7)
!33 = !DILocation(line: 41, column: 45, scope: !7)
!34 = !DILocation(line: 42, column: 19, scope: !7)
!35 = !DILocation(line: 45, column: 39, scope: !7)
!36 = !DILocation(line: 45, column: 58, scope: !7)
!37 = !DILocation(line: 45, column: 35, scope: !7)
!38 = !DILocation(line: 45, column: 53, scope: !7)
!39 = !DILocation(line: 45, column: 30, scope: !7)
!40 = !DILocation(line: 45, column: 63, scope: !7)
!41 = !DILocation(line: 46, column: 31, scope: !7)
!42 = !DILocation(line: 46, column: 64, scope: !7)
!43 = !DILocation(line: 47, column: 31, scope: !7)
!44 = !DILocation(line: 47, column: 36, scope: !7)
!45 = !DILocation(line: 55, column: 20, scope: !7)
!46 = !DILocation(line: 56, column: 27, scope: !7)
!47 = !DILocation(line: 48, column: 20, scope: !7)
!48 = !DILocation(line: 49, column: 19, scope: !7)
!49 = !DILocation(line: 52, column: 33, scope: !7)
!50 = !DILocation(line: 53, column: 20, scope: !7)
!51 = !DILocation(line: 58, column: 20, scope: !7)
!52 = !DILocation(line: 61, column: 20, scope: !7)
!53 = !DILocation(line: 62, column: 20, scope: !7)
!54 = !DILocation(line: 63, column: 20, scope: !7)
!55 = !DILocation(line: 65, column: 20, scope: !7)
!56 = !DILocation(line: 66, column: 20, scope: !7)
!57 = !DILocation(line: 67, column: 35, scope: !7)
!58 = !DILocation(line: 68, column: 25, scope: !7)
!59 = !DILocation(line: 68, column: 37, scope: !7)
!60 = !DILocation(line: 69, column: 28, scope: !7)
!61 = !DILocation(line: 69, column: 40, scope: !7)
!62 = !DILocation(line: 69, column: 4, scope: !7)
