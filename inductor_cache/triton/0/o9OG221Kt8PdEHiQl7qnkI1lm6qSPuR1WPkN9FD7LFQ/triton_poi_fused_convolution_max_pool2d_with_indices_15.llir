; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_max_pool2d_with_indices_15(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 5, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 3, !dbg !12
  %10 = and i32 %9, 15, !dbg !12
  %11 = or disjoint i32 %10, 16, !dbg !12
  %12 = shl i32 %8, 2, !dbg !12
  %13 = and i32 %12, 28, !dbg !12
  %14 = or disjoint i32 %7, %10, !dbg !13
  %15 = or disjoint i32 %7, %11, !dbg !13
  %16 = or disjoint i32 %7, %13, !dbg !13
  %17 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %18 = shl i32 %17, 5, !dbg !15
  %19 = or disjoint i32 %18, %13, !dbg !16
  %20 = or disjoint i32 %19, 1, !dbg !16
  %21 = or disjoint i32 %19, 2, !dbg !16
  %22 = or disjoint i32 %19, 3, !dbg !16
  %23 = or disjoint i32 %18, %10, !dbg !16
  %24 = or disjoint i32 %18, %11, !dbg !16
  %25 = icmp slt i32 %19, 64, !dbg !17
  %26 = icmp slt i32 %23, 64, !dbg !17
  %27 = icmp slt i32 %24, 64, !dbg !17
  %.frozen = freeze i32 %19, !dbg !18
  %28 = sdiv i32 %.frozen, 8, !dbg !18
  %29 = mul i32 %28, 8, !dbg !19
  %.decomposed = sub i32 %.frozen, %29, !dbg !19
  %30 = srem i32 %20, 8, !dbg !19
  %31 = srem i32 %21, 8, !dbg !19
  %32 = srem i32 %22, 8, !dbg !19
  %.frozen15 = freeze i32 %16, !dbg !20
  %33 = sdiv i32 %.frozen15, 256, !dbg !20
  %34 = mul i32 %33, 256, !dbg !21
  %.decomposed16 = sub i32 %.frozen15, %34, !dbg !21
  %35 = shl nsw i32 %.decomposed, 1, !dbg !22
  %36 = shl nsw i32 %30, 1, !dbg !22
  %37 = shl nsw i32 %31, 1, !dbg !22
  %38 = shl nsw i32 %32, 1, !dbg !22
  %39 = shl i32 %28, 5, !dbg !23
  %40 = add i32 %35, %39, !dbg !24
  %41 = add i32 %39, %36, !dbg !24
  %42 = add i32 %39, %37, !dbg !24
  %43 = add i32 %39, %38, !dbg !24
  %44 = shl i32 %14, 8, !dbg !25
  %45 = shl i32 %15, 8, !dbg !25
  %46 = add i32 %40, %44, !dbg !26
  %47 = add i32 %41, %44, !dbg !26
  %48 = add i32 %42, %44, !dbg !26
  %49 = add i32 %43, %44, !dbg !26
  %50 = add i32 %40, %45, !dbg !26
  %51 = add i32 %41, %45, !dbg !26
  %52 = add i32 %42, %45, !dbg !26
  %53 = add i32 %43, %45, !dbg !26
  %54 = sext i32 %46 to i64, !dbg !27
  %55 = getelementptr float, ptr addrspace(1) %0, i64 %54, !dbg !27
  %56 = sext i32 %47 to i64, !dbg !27
  %57 = getelementptr float, ptr addrspace(1) %0, i64 %56, !dbg !27
  %58 = sext i32 %48 to i64, !dbg !27
  %59 = getelementptr float, ptr addrspace(1) %0, i64 %58, !dbg !27
  %60 = sext i32 %49 to i64, !dbg !27
  %61 = getelementptr float, ptr addrspace(1) %0, i64 %60, !dbg !27
  %62 = sext i32 %50 to i64, !dbg !27
  %63 = getelementptr float, ptr addrspace(1) %0, i64 %62, !dbg !27
  %64 = sext i32 %51 to i64, !dbg !27
  %65 = getelementptr float, ptr addrspace(1) %0, i64 %64, !dbg !27
  %66 = sext i32 %52 to i64, !dbg !27
  %67 = getelementptr float, ptr addrspace(1) %0, i64 %66, !dbg !27
  %68 = sext i32 %53 to i64, !dbg !27
  %69 = getelementptr float, ptr addrspace(1) %0, i64 %68, !dbg !27
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 %25) #2, !dbg !28
  %71 = bitcast i32 %70 to float, !dbg !28
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 %25) #2, !dbg !28
  %73 = bitcast i32 %72 to float, !dbg !28
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 %25) #2, !dbg !28
  %75 = bitcast i32 %74 to float, !dbg !28
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 %25) #2, !dbg !28
  %77 = bitcast i32 %76 to float, !dbg !28
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 %25) #2, !dbg !28
  %79 = bitcast i32 %78 to float, !dbg !28
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 %25) #2, !dbg !28
  %81 = bitcast i32 %80 to float, !dbg !28
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 %25) #2, !dbg !28
  %83 = bitcast i32 %82 to float, !dbg !28
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 %25) #2, !dbg !28
  %85 = bitcast i32 %84 to float, !dbg !28
  %86 = or disjoint i32 %35, 1, !dbg !29
  %87 = or disjoint i32 %36, 1, !dbg !29
  %88 = or disjoint i32 %37, 1, !dbg !29
  %89 = or disjoint i32 %38, 1, !dbg !29
  %90 = add i32 %86, %39, !dbg !30
  %91 = add i32 %39, %87, !dbg !30
  %92 = add i32 %39, %88, !dbg !30
  %93 = add i32 %39, %89, !dbg !30
  %94 = add i32 %90, %44, !dbg !31
  %95 = add i32 %91, %44, !dbg !31
  %96 = add i32 %92, %44, !dbg !31
  %97 = add i32 %93, %44, !dbg !31
  %98 = add i32 %90, %45, !dbg !31
  %99 = add i32 %91, %45, !dbg !31
  %100 = add i32 %92, %45, !dbg !31
  %101 = add i32 %93, %45, !dbg !31
  %102 = sext i32 %94 to i64, !dbg !32
  %103 = getelementptr float, ptr addrspace(1) %0, i64 %102, !dbg !32
  %104 = sext i32 %95 to i64, !dbg !32
  %105 = getelementptr float, ptr addrspace(1) %0, i64 %104, !dbg !32
  %106 = sext i32 %96 to i64, !dbg !32
  %107 = getelementptr float, ptr addrspace(1) %0, i64 %106, !dbg !32
  %108 = sext i32 %97 to i64, !dbg !32
  %109 = getelementptr float, ptr addrspace(1) %0, i64 %108, !dbg !32
  %110 = sext i32 %98 to i64, !dbg !32
  %111 = getelementptr float, ptr addrspace(1) %0, i64 %110, !dbg !32
  %112 = sext i32 %99 to i64, !dbg !32
  %113 = getelementptr float, ptr addrspace(1) %0, i64 %112, !dbg !32
  %114 = sext i32 %100 to i64, !dbg !32
  %115 = getelementptr float, ptr addrspace(1) %0, i64 %114, !dbg !32
  %116 = sext i32 %101 to i64, !dbg !32
  %117 = getelementptr float, ptr addrspace(1) %0, i64 %116, !dbg !32
  %118 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %103, i1 %25) #2, !dbg !33
  %119 = bitcast i32 %118 to float, !dbg !33
  %120 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %105, i1 %25) #2, !dbg !33
  %121 = bitcast i32 %120 to float, !dbg !33
  %122 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %107, i1 %25) #2, !dbg !33
  %123 = bitcast i32 %122 to float, !dbg !33
  %124 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %109, i1 %25) #2, !dbg !33
  %125 = bitcast i32 %124 to float, !dbg !33
  %126 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %111, i1 %25) #2, !dbg !33
  %127 = bitcast i32 %126 to float, !dbg !33
  %128 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %113, i1 %25) #2, !dbg !33
  %129 = bitcast i32 %128 to float, !dbg !33
  %130 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %115, i1 %25) #2, !dbg !33
  %131 = bitcast i32 %130 to float, !dbg !33
  %132 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %117, i1 %25) #2, !dbg !33
  %133 = bitcast i32 %132 to float, !dbg !33
  %134 = or disjoint i32 %39, 16, !dbg !34
  %135 = add i32 %134, %35, !dbg !35
  %136 = add i32 %134, %36, !dbg !35
  %137 = add i32 %134, %37, !dbg !35
  %138 = add i32 %134, %38, !dbg !35
  %139 = add i32 %135, %44, !dbg !36
  %140 = add i32 %44, %136, !dbg !36
  %141 = add i32 %44, %137, !dbg !36
  %142 = add i32 %44, %138, !dbg !36
  %143 = add i32 %135, %45, !dbg !36
  %144 = add i32 %45, %136, !dbg !36
  %145 = add i32 %45, %137, !dbg !36
  %146 = add i32 %45, %138, !dbg !36
  %147 = sext i32 %139 to i64, !dbg !37
  %148 = getelementptr float, ptr addrspace(1) %0, i64 %147, !dbg !37
  %149 = sext i32 %140 to i64, !dbg !37
  %150 = getelementptr float, ptr addrspace(1) %0, i64 %149, !dbg !37
  %151 = sext i32 %141 to i64, !dbg !37
  %152 = getelementptr float, ptr addrspace(1) %0, i64 %151, !dbg !37
  %153 = sext i32 %142 to i64, !dbg !37
  %154 = getelementptr float, ptr addrspace(1) %0, i64 %153, !dbg !37
  %155 = sext i32 %143 to i64, !dbg !37
  %156 = getelementptr float, ptr addrspace(1) %0, i64 %155, !dbg !37
  %157 = sext i32 %144 to i64, !dbg !37
  %158 = getelementptr float, ptr addrspace(1) %0, i64 %157, !dbg !37
  %159 = sext i32 %145 to i64, !dbg !37
  %160 = getelementptr float, ptr addrspace(1) %0, i64 %159, !dbg !37
  %161 = sext i32 %146 to i64, !dbg !37
  %162 = getelementptr float, ptr addrspace(1) %0, i64 %161, !dbg !37
  %163 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %148, i1 %25) #2, !dbg !38
  %164 = bitcast i32 %163 to float, !dbg !38
  %165 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %150, i1 %25) #2, !dbg !38
  %166 = bitcast i32 %165 to float, !dbg !38
  %167 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %152, i1 %25) #2, !dbg !38
  %168 = bitcast i32 %167 to float, !dbg !38
  %169 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %154, i1 %25) #2, !dbg !38
  %170 = bitcast i32 %169 to float, !dbg !38
  %171 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %156, i1 %25) #2, !dbg !38
  %172 = bitcast i32 %171 to float, !dbg !38
  %173 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %158, i1 %25) #2, !dbg !38
  %174 = bitcast i32 %173 to float, !dbg !38
  %175 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %160, i1 %25) #2, !dbg !38
  %176 = bitcast i32 %175 to float, !dbg !38
  %177 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %162, i1 %25) #2, !dbg !38
  %178 = bitcast i32 %177 to float, !dbg !38
  %179 = or disjoint i32 %39, 17, !dbg !39
  %180 = add i32 %179, %35, !dbg !40
  %181 = add i32 %179, %36, !dbg !40
  %182 = add i32 %179, %37, !dbg !40
  %183 = add i32 %179, %38, !dbg !40
  %184 = add i32 %180, %44, !dbg !41
  %185 = add i32 %44, %181, !dbg !41
  %186 = add i32 %44, %182, !dbg !41
  %187 = add i32 %44, %183, !dbg !41
  %188 = add i32 %180, %45, !dbg !41
  %189 = add i32 %45, %181, !dbg !41
  %190 = add i32 %45, %182, !dbg !41
  %191 = add i32 %45, %183, !dbg !41
  %192 = sext i32 %184 to i64, !dbg !42
  %193 = getelementptr float, ptr addrspace(1) %0, i64 %192, !dbg !42
  %194 = sext i32 %185 to i64, !dbg !42
  %195 = getelementptr float, ptr addrspace(1) %0, i64 %194, !dbg !42
  %196 = sext i32 %186 to i64, !dbg !42
  %197 = getelementptr float, ptr addrspace(1) %0, i64 %196, !dbg !42
  %198 = sext i32 %187 to i64, !dbg !42
  %199 = getelementptr float, ptr addrspace(1) %0, i64 %198, !dbg !42
  %200 = sext i32 %188 to i64, !dbg !42
  %201 = getelementptr float, ptr addrspace(1) %0, i64 %200, !dbg !42
  %202 = sext i32 %189 to i64, !dbg !42
  %203 = getelementptr float, ptr addrspace(1) %0, i64 %202, !dbg !42
  %204 = sext i32 %190 to i64, !dbg !42
  %205 = getelementptr float, ptr addrspace(1) %0, i64 %204, !dbg !42
  %206 = sext i32 %191 to i64, !dbg !42
  %207 = getelementptr float, ptr addrspace(1) %0, i64 %206, !dbg !42
  %208 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %193, i1 %25) #2, !dbg !43
  %209 = bitcast i32 %208 to float, !dbg !43
  %210 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %195, i1 %25) #2, !dbg !43
  %211 = bitcast i32 %210 to float, !dbg !43
  %212 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %197, i1 %25) #2, !dbg !43
  %213 = bitcast i32 %212 to float, !dbg !43
  %214 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %199, i1 %25) #2, !dbg !43
  %215 = bitcast i32 %214 to float, !dbg !43
  %216 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %201, i1 %25) #2, !dbg !43
  %217 = bitcast i32 %216 to float, !dbg !43
  %218 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %203, i1 %25) #2, !dbg !43
  %219 = bitcast i32 %218 to float, !dbg !43
  %220 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %205, i1 %25) #2, !dbg !43
  %221 = bitcast i32 %220 to float, !dbg !43
  %222 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %207, i1 %25) #2, !dbg !43
  %223 = bitcast i32 %222 to float, !dbg !43
  %224 = fcmp ogt float %119, %71, !dbg !44
  %225 = fcmp ogt float %121, %73, !dbg !44
  %226 = fcmp ogt float %123, %75, !dbg !44
  %227 = fcmp ogt float %125, %77, !dbg !44
  %228 = fcmp ogt float %127, %79, !dbg !44
  %229 = fcmp ogt float %129, %81, !dbg !44
  %230 = fcmp ogt float %131, %83, !dbg !44
  %231 = fcmp ogt float %133, %85, !dbg !44
  %232 = fcmp uno float %119, 0.000000e+00, !dbg !48
  %233 = fcmp uno float %121, 0.000000e+00, !dbg !48
  %234 = fcmp uno float %123, 0.000000e+00, !dbg !48
  %235 = fcmp uno float %125, 0.000000e+00, !dbg !48
  %236 = fcmp uno float %127, 0.000000e+00, !dbg !48
  %237 = fcmp uno float %129, 0.000000e+00, !dbg !48
  %238 = fcmp uno float %131, 0.000000e+00, !dbg !48
  %239 = fcmp uno float %133, 0.000000e+00, !dbg !48
  %240 = or i1 %224, %232, !dbg !49
  %241 = or i1 %225, %233, !dbg !49
  %242 = or i1 %226, %234, !dbg !49
  %243 = or i1 %227, %235, !dbg !49
  %244 = or i1 %228, %236, !dbg !49
  %245 = or i1 %229, %237, !dbg !49
  %246 = or i1 %230, %238, !dbg !49
  %247 = or i1 %231, %239, !dbg !49
  %248 = select i1 %240, float %119, float %71, !dbg !50
  %249 = select i1 %241, float %121, float %73, !dbg !50
  %250 = select i1 %242, float %123, float %75, !dbg !50
  %251 = select i1 %243, float %125, float %77, !dbg !50
  %252 = select i1 %244, float %127, float %79, !dbg !50
  %253 = select i1 %245, float %129, float %81, !dbg !50
  %254 = select i1 %246, float %131, float %83, !dbg !50
  %255 = select i1 %247, float %133, float %85, !dbg !50
  %256 = fcmp olt float %248, %164, !dbg !51
  %257 = fcmp olt float %249, %166, !dbg !51
  %258 = fcmp olt float %250, %168, !dbg !51
  %259 = fcmp olt float %251, %170, !dbg !51
  %260 = fcmp olt float %252, %172, !dbg !51
  %261 = fcmp olt float %253, %174, !dbg !51
  %262 = fcmp olt float %254, %176, !dbg !51
  %263 = fcmp olt float %255, %178, !dbg !51
  %264 = fcmp uno float %164, 0.000000e+00, !dbg !53
  %265 = fcmp uno float %166, 0.000000e+00, !dbg !53
  %266 = fcmp uno float %168, 0.000000e+00, !dbg !53
  %267 = fcmp uno float %170, 0.000000e+00, !dbg !53
  %268 = fcmp uno float %172, 0.000000e+00, !dbg !53
  %269 = fcmp uno float %174, 0.000000e+00, !dbg !53
  %270 = fcmp uno float %176, 0.000000e+00, !dbg !53
  %271 = fcmp uno float %178, 0.000000e+00, !dbg !53
  %272 = or i1 %256, %264, !dbg !54
  %273 = or i1 %257, %265, !dbg !54
  %274 = or i1 %258, %266, !dbg !54
  %275 = or i1 %259, %267, !dbg !54
  %276 = or i1 %260, %268, !dbg !54
  %277 = or i1 %261, %269, !dbg !54
  %278 = or i1 %262, %270, !dbg !54
  %279 = or i1 %263, %271, !dbg !54
  %280 = select i1 %272, float %164, float %248, !dbg !55
  %281 = select i1 %273, float %166, float %249, !dbg !55
  %282 = select i1 %274, float %168, float %250, !dbg !55
  %283 = select i1 %275, float %170, float %251, !dbg !55
  %284 = select i1 %276, float %172, float %252, !dbg !55
  %285 = select i1 %277, float %174, float %253, !dbg !55
  %286 = select i1 %278, float %176, float %254, !dbg !55
  %287 = select i1 %279, float %178, float %255, !dbg !55
  %288 = fcmp olt float %280, %209, !dbg !56
  %289 = fcmp olt float %281, %211, !dbg !56
  %290 = fcmp olt float %282, %213, !dbg !56
  %291 = fcmp olt float %283, %215, !dbg !56
  %292 = fcmp olt float %284, %217, !dbg !56
  %293 = fcmp olt float %285, %219, !dbg !56
  %294 = fcmp olt float %286, %221, !dbg !56
  %295 = fcmp olt float %287, %223, !dbg !56
  %296 = fcmp uno float %209, 0.000000e+00, !dbg !58
  %297 = fcmp uno float %211, 0.000000e+00, !dbg !58
  %298 = fcmp uno float %213, 0.000000e+00, !dbg !58
  %299 = fcmp uno float %215, 0.000000e+00, !dbg !58
  %300 = fcmp uno float %217, 0.000000e+00, !dbg !58
  %301 = fcmp uno float %219, 0.000000e+00, !dbg !58
  %302 = fcmp uno float %221, 0.000000e+00, !dbg !58
  %303 = fcmp uno float %223, 0.000000e+00, !dbg !58
  %304 = or i1 %288, %296, !dbg !59
  %305 = or i1 %289, %297, !dbg !59
  %306 = or i1 %290, %298, !dbg !59
  %307 = or i1 %291, %299, !dbg !59
  %308 = or i1 %292, %300, !dbg !59
  %309 = or i1 %293, %301, !dbg !59
  %310 = or i1 %294, %302, !dbg !59
  %311 = or i1 %295, %303, !dbg !59
  %312 = select i1 %304, float %209, float %280, !dbg !60
  %313 = select i1 %305, float %211, float %281, !dbg !60
  %314 = select i1 %306, float %213, float %282, !dbg !60
  %315 = select i1 %307, float %215, float %283, !dbg !60
  %316 = select i1 %308, float %217, float %284, !dbg !60
  %317 = select i1 %309, float %219, float %285, !dbg !60
  %318 = select i1 %310, float %221, float %286, !dbg !60
  %319 = select i1 %311, float %223, float %287, !dbg !60
  %320 = shl i32 %14, 6, !dbg !61
  %321 = shl i32 %15, 6, !dbg !61
  %322 = add i32 %19, %320, !dbg !62
  %323 = add i32 %19, %321, !dbg !62
  %324 = sext i32 %322 to i64, !dbg !63
  %325 = getelementptr float, ptr addrspace(1) %1, i64 %324, !dbg !63
  %326 = sext i32 %323 to i64, !dbg !63
  %327 = getelementptr float, ptr addrspace(1) %1, i64 %326, !dbg !63
  %328 = bitcast float %312 to i32, !dbg !64
  %329 = bitcast float %313 to i32, !dbg !64
  %330 = bitcast float %314 to i32, !dbg !64
  %331 = bitcast float %315 to i32, !dbg !64
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %328, i32 %329, i32 %330, i32 %331, ptr addrspace(1) %325, i1 %25) #2, !dbg !64
  %332 = bitcast float %316 to i32, !dbg !64
  %333 = bitcast float %317 to i32, !dbg !64
  %334 = bitcast float %318 to i32, !dbg !64
  %335 = bitcast float %319 to i32, !dbg !64
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %332, i32 %333, i32 %334, i32 %335, ptr addrspace(1) %327, i1 %25) #2, !dbg !64
  %336 = shl i32 %23, 8, !dbg !65
  %337 = shl i32 %24, 8, !dbg !65
  %338 = shl i32 %33, 14, !dbg !66
  %339 = add i32 %338, %.decomposed16, !dbg !67
  %340 = add i32 %339, %336, !dbg !68
  %341 = add i32 %339, %337, !dbg !68
  %342 = sext i32 %340 to i64, !dbg !69
  %343 = getelementptr float, ptr addrspace(1) %2, i64 %342, !dbg !69
  %344 = sext i32 %341 to i64, !dbg !69
  %345 = getelementptr float, ptr addrspace(1) %2, i64 %344, !dbg !69
  %346 = shl i32 %8, 7, !dbg !70
  %347 = and i32 %346, 896, !dbg !70
  %348 = or disjoint i32 %347, %10, !dbg !70
  %349 = and i32 %12, 508, !dbg !70
  %350 = lshr exact i32 %347, 3, !dbg !70
  %351 = or disjoint i32 %350, %348, !dbg !70
  %352 = zext nneg i32 %351 to i64, !dbg !70
  %353 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %352, !dbg !70
  %354 = bitcast float %312 to <1 x i32>, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %353, <1 x i32> %354, i1 true) #2, !dbg !70
  %355 = or disjoint i32 %348, 32, !dbg !70
  %356 = lshr i32 %355, 3, !dbg !70
  %357 = and i32 %356, 116, !dbg !70
  %358 = add nuw nsw i32 %357, %355, !dbg !70
  %359 = zext nneg i32 %358 to i64, !dbg !70
  %360 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %359, !dbg !70
  %361 = bitcast float %313 to <1 x i32>, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %360, <1 x i32> %361, i1 true) #2, !dbg !70
  %362 = or disjoint i32 %348, 64, !dbg !70
  %363 = lshr i32 %362, 3, !dbg !70
  %364 = and i32 %363, 120, !dbg !70
  %365 = add nuw nsw i32 %364, %362, !dbg !70
  %366 = zext nneg i32 %365 to i64, !dbg !70
  %367 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %366, !dbg !70
  %368 = bitcast float %314 to <1 x i32>, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %367, <1 x i32> %368, i1 true) #2, !dbg !70
  %369 = or disjoint i32 %348, 96, !dbg !70
  %370 = lshr i32 %369, 3, !dbg !70
  %371 = and i32 %370, 124, !dbg !70
  %372 = add nuw nsw i32 %371, %369, !dbg !70
  %373 = zext nneg i32 %372 to i64, !dbg !70
  %374 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %373, !dbg !70
  %375 = bitcast float %315 to <1 x i32>, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %374, <1 x i32> %375, i1 true) #2, !dbg !70
  %376 = or disjoint i32 %348, 16, !dbg !70
  %377 = add nuw nsw i32 %376, %350, !dbg !70
  %378 = zext nneg i32 %377 to i64, !dbg !70
  %379 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %378, !dbg !70
  %380 = bitcast float %316 to <1 x i32>, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %379, <1 x i32> %380, i1 true) #2, !dbg !70
  %381 = or disjoint i32 %348, 48, !dbg !70
  %382 = lshr i32 %381, 3, !dbg !70
  %383 = and i32 %382, 116, !dbg !70
  %384 = add nuw nsw i32 %383, %381, !dbg !70
  %385 = zext nneg i32 %384 to i64, !dbg !70
  %386 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %385, !dbg !70
  %387 = bitcast float %317 to <1 x i32>, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %386, <1 x i32> %387, i1 true) #2, !dbg !70
  %388 = or disjoint i32 %348, 80, !dbg !70
  %389 = lshr i32 %388, 3, !dbg !70
  %390 = and i32 %389, 120, !dbg !70
  %391 = add nuw nsw i32 %390, %388, !dbg !70
  %392 = zext nneg i32 %391 to i64, !dbg !70
  %393 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %392, !dbg !70
  %394 = bitcast float %318 to <1 x i32>, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %393, <1 x i32> %394, i1 true) #2, !dbg !70
  %395 = or disjoint i32 %348, 112, !dbg !70
  %396 = lshr i32 %395, 3, !dbg !70
  %397 = and i32 %396, 124, !dbg !70
  %398 = add nuw nsw i32 %397, %395, !dbg !70
  %399 = zext nneg i32 %398 to i64, !dbg !70
  %400 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %399, !dbg !70
  %401 = bitcast float %319 to <1 x i32>, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %400, <1 x i32> %401, i1 true) #2, !dbg !70
  tail call void @llvm.nvvm.barrier0(), !dbg !70
  %402 = lshr i32 %12, 3, !dbg !70
  %403 = and i32 %402, 60, !dbg !70
  %404 = add nuw nsw i32 %403, %349, !dbg !70
  %405 = zext nneg i32 %404 to i64, !dbg !70
  %406 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %405, !dbg !70
  %407 = or disjoint i32 %349, 512, !dbg !70
  %408 = lshr i32 %407, 3, !dbg !70
  %409 = and i32 %408, 124, !dbg !70
  %410 = add nuw nsw i32 %409, %407, !dbg !70
  %411 = zext nneg i32 %410 to i64, !dbg !70
  %412 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %411, !dbg !70
  %413 = load <4 x i32>, ptr addrspace(3) %412, align 16, !dbg !70
  %.extract = load i32, ptr addrspace(3) %406, align 16, !dbg !70
  %414 = getelementptr inbounds i8, ptr addrspace(3) %406, i64 4, !dbg !70
  %.extract8 = load i32, ptr addrspace(3) %414, align 4, !dbg !70
  %415 = getelementptr inbounds i8, ptr addrspace(3) %406, i64 8, !dbg !70
  %.extract9 = load i32, ptr addrspace(3) %415, align 8, !dbg !70
  %416 = getelementptr inbounds i8, ptr addrspace(3) %406, i64 12, !dbg !70
  %.extract10 = load i32, ptr addrspace(3) %416, align 4, !dbg !70
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %343, i1 %26) #2, !dbg !70
  %.extract11 = extractelement <4 x i32> %413, i64 0, !dbg !70
  %.extract12 = extractelement <4 x i32> %413, i64 1, !dbg !70
  %.extract13 = extractelement <4 x i32> %413, i64 2, !dbg !70
  %.extract14 = extractelement <4 x i32> %413, i64 3, !dbg !70
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %345, i1 %27) #2, !dbg !70
  ret void, !dbg !71
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cdywpmszpgbzy5fojfkyxs3z7sijunr2t5zlydoamo26vtyon7wo.py", directory: "inductor_cache/dy")
!4 = !{ptr @triton_poi_fused_convolution_max_pool2d_with_indices_15, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_max_pool2d_with_indices_15, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_max_pool2d_with_indices_15", linkageName: "triton_poi_fused_convolution_max_pool2d_with_indices_15", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 23, scope: !7)
!17 = !DILocation(line: 27, column: 21, scope: !7)
!18 = !DILocation(line: 29, column: 19, scope: !7)
!19 = !DILocation(line: 28, column: 19, scope: !7)
!20 = !DILocation(line: 33, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 19, scope: !7)
!22 = !DILocation(line: 34, column: 32, scope: !7)
!23 = !DILocation(line: 34, column: 40, scope: !7)
!24 = !DILocation(line: 34, column: 37, scope: !7)
!25 = !DILocation(line: 34, column: 49, scope: !7)
!26 = !DILocation(line: 34, column: 45, scope: !7)
!27 = !DILocation(line: 34, column: 30, scope: !7)
!28 = !DILocation(line: 34, column: 54, scope: !7)
!29 = !DILocation(line: 35, column: 34, scope: !7)
!30 = !DILocation(line: 35, column: 41, scope: !7)
!31 = !DILocation(line: 35, column: 49, scope: !7)
!32 = !DILocation(line: 35, column: 30, scope: !7)
!33 = !DILocation(line: 35, column: 58, scope: !7)
!34 = !DILocation(line: 36, column: 35, scope: !7)
!35 = !DILocation(line: 36, column: 42, scope: !7)
!36 = !DILocation(line: 36, column: 50, scope: !7)
!37 = !DILocation(line: 36, column: 30, scope: !7)
!38 = !DILocation(line: 36, column: 59, scope: !7)
!39 = !DILocation(line: 37, column: 35, scope: !7)
!40 = !DILocation(line: 37, column: 42, scope: !7)
!41 = !DILocation(line: 37, column: 50, scope: !7)
!42 = !DILocation(line: 37, column: 30, scope: !7)
!43 = !DILocation(line: 37, column: 59, scope: !7)
!44 = !DILocation(line: 118, column: 15, scope: !45, inlinedAt: !47)
!45 = distinct !DILexicalBlockFile(scope: !7, file: !46, discriminator: 0)
!46 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!47 = !DILocation(line: 38, column: 40, scope: !7)
!48 = !DILocation(line: 120, column: 21, scope: !45, inlinedAt: !47)
!49 = !DILocation(line: 120, column: 16, scope: !45, inlinedAt: !47)
!50 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !47)
!51 = !DILocation(line: 118, column: 15, scope: !45, inlinedAt: !52)
!52 = !DILocation(line: 39, column: 40, scope: !7)
!53 = !DILocation(line: 120, column: 21, scope: !45, inlinedAt: !52)
!54 = !DILocation(line: 120, column: 16, scope: !45, inlinedAt: !52)
!55 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !52)
!56 = !DILocation(line: 118, column: 15, scope: !45, inlinedAt: !57)
!57 = !DILocation(line: 40, column: 40, scope: !7)
!58 = !DILocation(line: 120, column: 21, scope: !45, inlinedAt: !57)
!59 = !DILocation(line: 120, column: 16, scope: !45, inlinedAt: !57)
!60 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !57)
!61 = !DILocation(line: 41, column: 33, scope: !7)
!62 = !DILocation(line: 41, column: 30, scope: !7)
!63 = !DILocation(line: 41, column: 25, scope: !7)
!64 = !DILocation(line: 41, column: 44, scope: !7)
!65 = !DILocation(line: 42, column: 34, scope: !7)
!66 = !DILocation(line: 42, column: 45, scope: !7)
!67 = !DILocation(line: 42, column: 30, scope: !7)
!68 = !DILocation(line: 42, column: 39, scope: !7)
!69 = !DILocation(line: 42, column: 25, scope: !7)
!70 = !DILocation(line: 42, column: 56, scope: !7)
!71 = !DILocation(line: 42, column: 4, scope: !7)
