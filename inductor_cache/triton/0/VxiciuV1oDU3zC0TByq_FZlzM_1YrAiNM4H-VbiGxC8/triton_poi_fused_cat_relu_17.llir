; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_cat_relu_17(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %10 = shl i32 %9, 9, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 1, !dbg !12
  %13 = and i32 %12, 510, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %.frozen = freeze i32 %14, !dbg !14
  %15 = sdiv i32 %.frozen, 256, !dbg !14
  %16 = mul i32 %15, 256, !dbg !15
  %.decomposed = sub i32 %.frozen, %16, !dbg !15
  %17 = icmp slt i32 %.decomposed, 128, !dbg !16
  %18 = shl nsw i32 %15, 7, !dbg !17
  %19 = add nsw i32 %18, %.decomposed, !dbg !18
  %20 = sext i32 %19 to i64, !dbg !19
  %21 = getelementptr float, ptr addrspace(1) %0, i64 %20, !dbg !19
  %22 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %21, i1 %17, i32 0, i1 %17, i32 0, i1 %17) #3, !dbg !20
  %23 = icmp sgt i32 %.decomposed, 127, !dbg !21
  %24 = add nsw i32 %.decomposed, -128, !dbg !22
  %25 = add nsw i32 %18, %24, !dbg !23
  %26 = sext i32 %25 to i64, !dbg !24
  %27 = getelementptr float, ptr addrspace(1) %1, i64 %26, !dbg !24
  %28 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %27, i1 %23, i32 0, i1 %23, i32 0, i1 %23) #3, !dbg !25
  %29 = sext i32 %24 to i64, !dbg !26
  %30 = getelementptr float, ptr addrspace(1) %2, i64 %29, !dbg !26
  %31 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %30, i1 %23, i32 0, i1 %23, i32 0, i1 %23) #3, !dbg !27
  %32 = getelementptr float, ptr addrspace(1) %3, i64 %29, !dbg !28
  %33 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %32, i1 %23, i32 0, i1 %23, i32 0, i1 %23) #3, !dbg !29
  %34 = extractvalue { i32, i32 } %33, 0, !dbg !29
  %35 = extractvalue { i32, i32 } %33, 1, !dbg !29
  %36 = bitcast i32 %34 to float, !dbg !29
  %37 = bitcast i32 %35 to float, !dbg !29
  %38 = fadd float %36, 0x3EE4F8B580000000, !dbg !30
  %39 = fadd float %37, 0x3EE4F8B580000000, !dbg !30
  %40 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %.not.i = icmp eq i32 %40, 0, !dbg !31
  %41 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !31
  %.not1.i = icmp eq i32 %41, 0, !dbg !31
  br i1 %.not.i, label %47, label %42, !dbg !31

42:                                               ; preds = %8
  br i1 %.not1.i, label %45, label %43, !dbg !31

43:                                               ; preds = %42
  %44 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %38) #3, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

45:                                               ; preds = %42
  %46 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %38) #3, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

47:                                               ; preds = %8
  br i1 %.not1.i, label %50, label %48, !dbg !31

48:                                               ; preds = %47
  %49 = tail call float @llvm.nvvm.sqrt.rn.f(float %38) #3, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

50:                                               ; preds = %47
  %51 = tail call float @llvm.nvvm.sqrt.approx.f(float %38) #3, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

__nv_sqrtf.exit:                                  ; preds = %43, %45, %48, %50
  %.0.i = phi float [ %44, %43 ], [ %46, %45 ], [ %49, %48 ], [ %51, %50 ], !dbg !31
  %52 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %.not.i1 = icmp eq i32 %52, 0, !dbg !31
  %53 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !31
  %.not1.i4 = icmp eq i32 %53, 0, !dbg !31
  br i1 %.not.i1, label %59, label %54, !dbg !31

54:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %57, label %55, !dbg !31

55:                                               ; preds = %54
  %56 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %39) #3, !dbg !31
  br label %__nv_sqrtf.exit5, !dbg !31

57:                                               ; preds = %54
  %58 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %39) #3, !dbg !31
  br label %__nv_sqrtf.exit5, !dbg !31

59:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %62, label %60, !dbg !31

60:                                               ; preds = %59
  %61 = tail call float @llvm.nvvm.sqrt.rn.f(float %39) #3, !dbg !31
  br label %__nv_sqrtf.exit5, !dbg !31

62:                                               ; preds = %59
  %63 = tail call float @llvm.nvvm.sqrt.approx.f(float %39) #3, !dbg !31
  br label %__nv_sqrtf.exit5, !dbg !31

__nv_sqrtf.exit5:                                 ; preds = %55, %57, %60, %62
  %.0.i3 = phi float [ %56, %55 ], [ %58, %57 ], [ %61, %60 ], [ %63, %62 ], !dbg !31
  %64 = extractvalue { i32, i32 } %28, 1, !dbg !25
  %65 = bitcast i32 %64 to float, !dbg !25
  %66 = extractvalue { i32, i32 } %31, 1, !dbg !27
  %67 = bitcast i32 %66 to float, !dbg !27
  %68 = fsub float %65, %67, !dbg !32
  %69 = extractvalue { i32, i32 } %28, 0, !dbg !25
  %70 = bitcast i32 %69 to float, !dbg !25
  %71 = extractvalue { i32, i32 } %31, 0, !dbg !27
  %72 = bitcast i32 %71 to float, !dbg !27
  %73 = fsub float %70, %72, !dbg !32
  %74 = extractvalue { i32, i32 } %22, 1, !dbg !20
  %75 = bitcast i32 %74 to float, !dbg !20
  %76 = extractvalue { i32, i32 } %22, 0, !dbg !20
  %77 = bitcast i32 %76 to float, !dbg !20
  %78 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !33
  %79 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !33
  %80 = fmul float %73, %78, !dbg !34
  %81 = fmul float %68, %79, !dbg !34
  %82 = getelementptr float, ptr addrspace(1) %4, i64 %29, !dbg !35
  %83 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %82, i1 %23, i32 0, i1 %23, i32 0, i1 %23) #3, !dbg !36
  %84 = extractvalue { i32, i32 } %83, 0, !dbg !36
  %85 = extractvalue { i32, i32 } %83, 1, !dbg !36
  %86 = bitcast i32 %84 to float, !dbg !36
  %87 = bitcast i32 %85 to float, !dbg !36
  %88 = fmul float %80, %86, !dbg !37
  %89 = fmul float %81, %87, !dbg !37
  %90 = getelementptr float, ptr addrspace(1) %5, i64 %29, !dbg !38
  %91 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %90, i1 %23, i32 0, i1 %23, i32 0, i1 %23) #3, !dbg !39
  %92 = extractvalue { i32, i32 } %91, 0, !dbg !39
  %93 = extractvalue { i32, i32 } %91, 1, !dbg !39
  %94 = bitcast i32 %92 to float, !dbg !39
  %95 = bitcast i32 %93 to float, !dbg !39
  %96 = fadd float %88, %94, !dbg !40
  %97 = fadd float %89, %95, !dbg !40
  %98 = select i1 %17, float %77, float %96, !dbg !41
  %99 = select i1 %17, float %75, float %97, !dbg !41
  %100 = fcmp olt float %98, 0.000000e+00, !dbg !42
  %101 = fcmp olt float %99, 0.000000e+00, !dbg !42
  %102 = select i1 %100, float 0.000000e+00, float %98, !dbg !46
  %103 = select i1 %101, float 0.000000e+00, float %99, !dbg !46
  %104 = sext i32 %14 to i64, !dbg !47
  %105 = getelementptr float, ptr addrspace(1) %6, i64 %104, !dbg !47
  %106 = bitcast float %102 to i32, !dbg !48
  %107 = bitcast float %103 to i32, !dbg !48
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %106, i32 %107, ptr addrspace(1) %105, i1 true) #3, !dbg !48
  ret void, !dbg !49
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c3z5xjgnt524ow7jpv2xqv6a2yhnz7yllxertqgg6polp7nyrrmb.py", directory: "inductor_cache/3z")
!4 = !{ptr @triton_poi_fused_cat_relu_17, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_relu_17, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_relu_17", linkageName: "triton_poi_fused_cat_relu_17", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 31, column: 18, scope: !7)
!17 = !DILocation(line: 32, column: 34, scope: !7)
!18 = !DILocation(line: 32, column: 40, scope: !7)
!19 = !DILocation(line: 32, column: 30, scope: !7)
!20 = !DILocation(line: 32, column: 46, scope: !7)
!21 = !DILocation(line: 33, column: 19, scope: !7)
!22 = !DILocation(line: 36, column: 49, scope: !7)
!23 = !DILocation(line: 36, column: 40, scope: !7)
!24 = !DILocation(line: 36, column: 30, scope: !7)
!25 = !DILocation(line: 36, column: 55, scope: !7)
!26 = !DILocation(line: 37, column: 31, scope: !7)
!27 = !DILocation(line: 37, column: 45, scope: !7)
!28 = !DILocation(line: 39, column: 31, scope: !7)
!29 = !DILocation(line: 39, column: 45, scope: !7)
!30 = !DILocation(line: 41, column: 20, scope: !7)
!31 = !DILocation(line: 42, column: 27, scope: !7)
!32 = !DILocation(line: 38, column: 19, scope: !7)
!33 = !DILocation(line: 44, column: 20, scope: !7)
!34 = !DILocation(line: 47, column: 20, scope: !7)
!35 = !DILocation(line: 48, column: 31, scope: !7)
!36 = !DILocation(line: 48, column: 45, scope: !7)
!37 = !DILocation(line: 49, column: 20, scope: !7)
!38 = !DILocation(line: 50, column: 31, scope: !7)
!39 = !DILocation(line: 50, column: 45, scope: !7)
!40 = !DILocation(line: 51, column: 20, scope: !7)
!41 = !DILocation(line: 54, column: 33, scope: !7)
!42 = !DILocation(line: 118, column: 15, scope: !43, inlinedAt: !45)
!43 = distinct !DILexicalBlockFile(scope: !7, file: !44, discriminator: 0)
!44 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!45 = !DILocation(line: 56, column: 42, scope: !7)
!46 = !DILocation(line: 121, column: 29, scope: !43, inlinedAt: !45)
!47 = !DILocation(line: 57, column: 25, scope: !7)
!48 = !DILocation(line: 57, column: 37, scope: !7)
!49 = !DILocation(line: 57, column: 4, scope: !7)
