; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_20(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %11 = shl i32 %10, 3, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = or disjoint i32 %11, 4, !dbg !13
  %14 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %15 = shl i32 %14, 7, !dbg !15
  %16 = and i32 %12, 127, !dbg !16
  %17 = or disjoint i32 %15, %16, !dbg !17
  %18 = icmp slt i32 %17, 128, !dbg !18
  %.frozen = freeze i32 %11, !dbg !19
  %19 = sdiv i32 %.frozen, 512, !dbg !19
  %20 = mul i32 %19, 512, !dbg !20
  %.decomposed = sub i32 %.frozen, %20, !dbg !20
  %21 = srem i32 %13, 512, !dbg !20
  %22 = shl i32 %17, 9, !dbg !21
  %23 = shl i32 %19, 16, !dbg !22
  %24 = add i32 %22, %23, !dbg !23
  %25 = add i32 %24, %.decomposed, !dbg !24
  %26 = add i32 %24, %21, !dbg !24
  %27 = sext i32 %25 to i64, !dbg !25
  %28 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !25
  %29 = sext i32 %26 to i64, !dbg !25
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !25
  %31 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %28, i1 %18) #4, !dbg !26
  %32 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %30, i1 %18) #4, !dbg !26
  %33 = sext i32 %.decomposed to i64, !dbg !27
  %34 = getelementptr float, ptr addrspace(1) %1, i64 %33, !dbg !27
  %35 = sext i32 %21 to i64, !dbg !27
  %36 = getelementptr float, ptr addrspace(1) %1, i64 %35, !dbg !27
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %34, i1 true) #4, !dbg !28
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %36, i1 true) #4, !dbg !28
  %39 = getelementptr float, ptr addrspace(1) %2, i64 %33, !dbg !29
  %40 = getelementptr float, ptr addrspace(1) %2, i64 %35, !dbg !29
  %41 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %39, i1 true) #4, !dbg !30
  %42 = extractvalue { i32, i32, i32, i32 } %41, 0, !dbg !30
  %43 = extractvalue { i32, i32, i32, i32 } %41, 1, !dbg !30
  %44 = extractvalue { i32, i32, i32, i32 } %41, 2, !dbg !30
  %45 = extractvalue { i32, i32, i32, i32 } %41, 3, !dbg !30
  %46 = bitcast i32 %42 to float, !dbg !30
  %47 = bitcast i32 %43 to float, !dbg !30
  %48 = bitcast i32 %44 to float, !dbg !30
  %49 = bitcast i32 %45 to float, !dbg !30
  %50 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %40, i1 true) #4, !dbg !30
  %51 = extractvalue { i32, i32, i32, i32 } %50, 0, !dbg !30
  %52 = extractvalue { i32, i32, i32, i32 } %50, 1, !dbg !30
  %53 = extractvalue { i32, i32, i32, i32 } %50, 2, !dbg !30
  %54 = extractvalue { i32, i32, i32, i32 } %50, 3, !dbg !30
  %55 = bitcast i32 %51 to float, !dbg !30
  %56 = bitcast i32 %52 to float, !dbg !30
  %57 = bitcast i32 %53 to float, !dbg !30
  %58 = bitcast i32 %54 to float, !dbg !30
  %59 = getelementptr float, ptr addrspace(1) %3, i64 %33, !dbg !31
  %60 = getelementptr float, ptr addrspace(1) %3, i64 %35, !dbg !31
  %61 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %59, i1 true) #4, !dbg !32
  %62 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %60, i1 true) #4, !dbg !32
  %63 = getelementptr float, ptr addrspace(1) %4, i64 %33, !dbg !33
  %64 = getelementptr float, ptr addrspace(1) %4, i64 %35, !dbg !33
  %65 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %63, i1 true) #4, !dbg !34
  %66 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %64, i1 true) #4, !dbg !34
  %67 = fadd float %46, 0x3EE4F8B580000000, !dbg !35
  %68 = fadd float %47, 0x3EE4F8B580000000, !dbg !35
  %69 = fadd float %48, 0x3EE4F8B580000000, !dbg !35
  %70 = fadd float %49, 0x3EE4F8B580000000, !dbg !35
  %71 = fadd float %55, 0x3EE4F8B580000000, !dbg !35
  %72 = fadd float %56, 0x3EE4F8B580000000, !dbg !35
  %73 = fadd float %57, 0x3EE4F8B580000000, !dbg !35
  %74 = fadd float %58, 0x3EE4F8B580000000, !dbg !35
  %75 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i = icmp eq i32 %75, 0, !dbg !36
  %76 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i = icmp eq i32 %76, 0, !dbg !36
  br i1 %.not.i, label %82, label %77, !dbg !36

77:                                               ; preds = %9
  br i1 %.not1.i, label %80, label %78, !dbg !36

78:                                               ; preds = %77
  %79 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %67) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

80:                                               ; preds = %77
  %81 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %67) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

82:                                               ; preds = %9
  br i1 %.not1.i, label %85, label %83, !dbg !36

83:                                               ; preds = %82
  %84 = tail call float @llvm.nvvm.sqrt.rn.f(float %67) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

85:                                               ; preds = %82
  %86 = tail call float @llvm.nvvm.sqrt.approx.f(float %67) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

__nv_sqrtf.exit:                                  ; preds = %78, %80, %83, %85
  %.0.i = phi float [ %79, %78 ], [ %81, %80 ], [ %84, %83 ], [ %86, %85 ], !dbg !36
  %87 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i3 = icmp eq i32 %87, 0, !dbg !36
  %88 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i6 = icmp eq i32 %88, 0, !dbg !36
  br i1 %.not.i3, label %94, label %89, !dbg !36

89:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i6, label %92, label %90, !dbg !36

90:                                               ; preds = %89
  %91 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %68) #4, !dbg !36
  br label %__nv_sqrtf.exit7, !dbg !36

92:                                               ; preds = %89
  %93 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %68) #4, !dbg !36
  br label %__nv_sqrtf.exit7, !dbg !36

94:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i6, label %97, label %95, !dbg !36

95:                                               ; preds = %94
  %96 = tail call float @llvm.nvvm.sqrt.rn.f(float %68) #4, !dbg !36
  br label %__nv_sqrtf.exit7, !dbg !36

97:                                               ; preds = %94
  %98 = tail call float @llvm.nvvm.sqrt.approx.f(float %68) #4, !dbg !36
  br label %__nv_sqrtf.exit7, !dbg !36

__nv_sqrtf.exit7:                                 ; preds = %90, %92, %95, %97
  %.0.i5 = phi float [ %91, %90 ], [ %93, %92 ], [ %96, %95 ], [ %98, %97 ], !dbg !36
  %99 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i8 = icmp eq i32 %99, 0, !dbg !36
  %100 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i11 = icmp eq i32 %100, 0, !dbg !36
  br i1 %.not.i8, label %106, label %101, !dbg !36

101:                                              ; preds = %__nv_sqrtf.exit7
  br i1 %.not1.i11, label %104, label %102, !dbg !36

102:                                              ; preds = %101
  %103 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %69) #4, !dbg !36
  br label %__nv_sqrtf.exit12, !dbg !36

104:                                              ; preds = %101
  %105 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %69) #4, !dbg !36
  br label %__nv_sqrtf.exit12, !dbg !36

106:                                              ; preds = %__nv_sqrtf.exit7
  br i1 %.not1.i11, label %109, label %107, !dbg !36

107:                                              ; preds = %106
  %108 = tail call float @llvm.nvvm.sqrt.rn.f(float %69) #4, !dbg !36
  br label %__nv_sqrtf.exit12, !dbg !36

109:                                              ; preds = %106
  %110 = tail call float @llvm.nvvm.sqrt.approx.f(float %69) #4, !dbg !36
  br label %__nv_sqrtf.exit12, !dbg !36

__nv_sqrtf.exit12:                                ; preds = %102, %104, %107, %109
  %.0.i10 = phi float [ %103, %102 ], [ %105, %104 ], [ %108, %107 ], [ %110, %109 ], !dbg !36
  %111 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i13 = icmp eq i32 %111, 0, !dbg !36
  %112 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i16 = icmp eq i32 %112, 0, !dbg !36
  br i1 %.not.i13, label %118, label %113, !dbg !36

113:                                              ; preds = %__nv_sqrtf.exit12
  br i1 %.not1.i16, label %116, label %114, !dbg !36

114:                                              ; preds = %113
  %115 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %70) #4, !dbg !36
  br label %__nv_sqrtf.exit17, !dbg !36

116:                                              ; preds = %113
  %117 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %70) #4, !dbg !36
  br label %__nv_sqrtf.exit17, !dbg !36

118:                                              ; preds = %__nv_sqrtf.exit12
  br i1 %.not1.i16, label %121, label %119, !dbg !36

119:                                              ; preds = %118
  %120 = tail call float @llvm.nvvm.sqrt.rn.f(float %70) #4, !dbg !36
  br label %__nv_sqrtf.exit17, !dbg !36

121:                                              ; preds = %118
  %122 = tail call float @llvm.nvvm.sqrt.approx.f(float %70) #4, !dbg !36
  br label %__nv_sqrtf.exit17, !dbg !36

__nv_sqrtf.exit17:                                ; preds = %114, %116, %119, %121
  %.0.i15 = phi float [ %115, %114 ], [ %117, %116 ], [ %120, %119 ], [ %122, %121 ], !dbg !36
  %123 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i18 = icmp eq i32 %123, 0, !dbg !36
  %124 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i21 = icmp eq i32 %124, 0, !dbg !36
  br i1 %.not.i18, label %130, label %125, !dbg !36

125:                                              ; preds = %__nv_sqrtf.exit17
  br i1 %.not1.i21, label %128, label %126, !dbg !36

126:                                              ; preds = %125
  %127 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %71) #4, !dbg !36
  br label %__nv_sqrtf.exit22, !dbg !36

128:                                              ; preds = %125
  %129 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %71) #4, !dbg !36
  br label %__nv_sqrtf.exit22, !dbg !36

130:                                              ; preds = %__nv_sqrtf.exit17
  br i1 %.not1.i21, label %133, label %131, !dbg !36

131:                                              ; preds = %130
  %132 = tail call float @llvm.nvvm.sqrt.rn.f(float %71) #4, !dbg !36
  br label %__nv_sqrtf.exit22, !dbg !36

133:                                              ; preds = %130
  %134 = tail call float @llvm.nvvm.sqrt.approx.f(float %71) #4, !dbg !36
  br label %__nv_sqrtf.exit22, !dbg !36

__nv_sqrtf.exit22:                                ; preds = %126, %128, %131, %133
  %.0.i20 = phi float [ %127, %126 ], [ %129, %128 ], [ %132, %131 ], [ %134, %133 ], !dbg !36
  %135 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i23 = icmp eq i32 %135, 0, !dbg !36
  %136 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i26 = icmp eq i32 %136, 0, !dbg !36
  br i1 %.not.i23, label %142, label %137, !dbg !36

137:                                              ; preds = %__nv_sqrtf.exit22
  br i1 %.not1.i26, label %140, label %138, !dbg !36

138:                                              ; preds = %137
  %139 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %72) #4, !dbg !36
  br label %__nv_sqrtf.exit27, !dbg !36

140:                                              ; preds = %137
  %141 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %72) #4, !dbg !36
  br label %__nv_sqrtf.exit27, !dbg !36

142:                                              ; preds = %__nv_sqrtf.exit22
  br i1 %.not1.i26, label %145, label %143, !dbg !36

143:                                              ; preds = %142
  %144 = tail call float @llvm.nvvm.sqrt.rn.f(float %72) #4, !dbg !36
  br label %__nv_sqrtf.exit27, !dbg !36

145:                                              ; preds = %142
  %146 = tail call float @llvm.nvvm.sqrt.approx.f(float %72) #4, !dbg !36
  br label %__nv_sqrtf.exit27, !dbg !36

__nv_sqrtf.exit27:                                ; preds = %138, %140, %143, %145
  %.0.i25 = phi float [ %139, %138 ], [ %141, %140 ], [ %144, %143 ], [ %146, %145 ], !dbg !36
  %147 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i28 = icmp eq i32 %147, 0, !dbg !36
  %148 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i31 = icmp eq i32 %148, 0, !dbg !36
  br i1 %.not.i28, label %154, label %149, !dbg !36

149:                                              ; preds = %__nv_sqrtf.exit27
  br i1 %.not1.i31, label %152, label %150, !dbg !36

150:                                              ; preds = %149
  %151 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %73) #4, !dbg !36
  br label %__nv_sqrtf.exit32, !dbg !36

152:                                              ; preds = %149
  %153 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %73) #4, !dbg !36
  br label %__nv_sqrtf.exit32, !dbg !36

154:                                              ; preds = %__nv_sqrtf.exit27
  br i1 %.not1.i31, label %157, label %155, !dbg !36

155:                                              ; preds = %154
  %156 = tail call float @llvm.nvvm.sqrt.rn.f(float %73) #4, !dbg !36
  br label %__nv_sqrtf.exit32, !dbg !36

157:                                              ; preds = %154
  %158 = tail call float @llvm.nvvm.sqrt.approx.f(float %73) #4, !dbg !36
  br label %__nv_sqrtf.exit32, !dbg !36

__nv_sqrtf.exit32:                                ; preds = %150, %152, %155, %157
  %.0.i30 = phi float [ %151, %150 ], [ %153, %152 ], [ %156, %155 ], [ %158, %157 ], !dbg !36
  %159 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i33 = icmp eq i32 %159, 0, !dbg !36
  %160 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i36 = icmp eq i32 %160, 0, !dbg !36
  br i1 %.not.i33, label %166, label %161, !dbg !36

161:                                              ; preds = %__nv_sqrtf.exit32
  br i1 %.not1.i36, label %164, label %162, !dbg !36

162:                                              ; preds = %161
  %163 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %74) #4, !dbg !36
  br label %__nv_sqrtf.exit37, !dbg !36

164:                                              ; preds = %161
  %165 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %74) #4, !dbg !36
  br label %__nv_sqrtf.exit37, !dbg !36

166:                                              ; preds = %__nv_sqrtf.exit32
  br i1 %.not1.i36, label %169, label %167, !dbg !36

167:                                              ; preds = %166
  %168 = tail call float @llvm.nvvm.sqrt.rn.f(float %74) #4, !dbg !36
  br label %__nv_sqrtf.exit37, !dbg !36

169:                                              ; preds = %166
  %170 = tail call float @llvm.nvvm.sqrt.approx.f(float %74) #4, !dbg !36
  br label %__nv_sqrtf.exit37, !dbg !36

__nv_sqrtf.exit37:                                ; preds = %162, %164, %167, %169
  %.0.i35 = phi float [ %163, %162 ], [ %165, %164 ], [ %168, %167 ], [ %170, %169 ], !dbg !36
  %171 = extractvalue { i32, i32, i32, i32 } %32, 3, !dbg !26
  %172 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !28
  %173 = extractvalue { i32, i32, i32, i32 } %32, 2, !dbg !26
  %174 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !28
  %175 = extractvalue { i32, i32, i32, i32 } %32, 1, !dbg !26
  %176 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !28
  %177 = extractvalue { i32, i32, i32, i32 } %32, 0, !dbg !26
  %178 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !28
  %179 = extractvalue { i32, i32, i32, i32 } %31, 3, !dbg !26
  %180 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !28
  %181 = extractvalue { i32, i32, i32, i32 } %31, 2, !dbg !26
  %182 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !28
  %183 = extractvalue { i32, i32, i32, i32 } %31, 1, !dbg !26
  %184 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !28
  %185 = extractvalue { i32, i32, i32, i32 } %31, 0, !dbg !26
  %186 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !28
  %187 = extractvalue { i32, i32, i32, i32 } %66, 3, !dbg !34
  %188 = extractvalue { i32, i32, i32, i32 } %66, 2, !dbg !34
  %189 = extractvalue { i32, i32, i32, i32 } %66, 1, !dbg !34
  %190 = extractvalue { i32, i32, i32, i32 } %66, 0, !dbg !34
  %191 = extractvalue { i32, i32, i32, i32 } %65, 3, !dbg !34
  %192 = extractvalue { i32, i32, i32, i32 } %65, 2, !dbg !34
  %193 = extractvalue { i32, i32, i32, i32 } %65, 1, !dbg !34
  %194 = extractvalue { i32, i32, i32, i32 } %65, 0, !dbg !34
  %195 = extractvalue { i32, i32, i32, i32 } %62, 3, !dbg !32
  %196 = extractvalue { i32, i32, i32, i32 } %62, 2, !dbg !32
  %197 = extractvalue { i32, i32, i32, i32 } %62, 1, !dbg !32
  %198 = extractvalue { i32, i32, i32, i32 } %62, 0, !dbg !32
  %199 = extractvalue { i32, i32, i32, i32 } %61, 3, !dbg !32
  %200 = extractvalue { i32, i32, i32, i32 } %61, 2, !dbg !32
  %201 = extractvalue { i32, i32, i32, i32 } %61, 1, !dbg !32
  %202 = extractvalue { i32, i32, i32, i32 } %61, 0, !dbg !32
  %203 = shl i32 %12, 2, !dbg !16
  %204 = and i32 %203, 124, !dbg !16
  %205 = or disjoint i32 %15, %204, !dbg !17
  %206 = icmp slt i32 %205, 128, !dbg !18
  %.lobit1 = lshr i32 %12, 5, !dbg !12
  %207 = and i32 %.lobit1, 3, !dbg !12
  %208 = or disjoint i32 %207, 4, !dbg !12
  %209 = or disjoint i32 %11, %208, !dbg !13
  %210 = or disjoint i32 %11, %207, !dbg !13
  %211 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !37
  %212 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i5) #4, !dbg !37
  %213 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i10) #4, !dbg !37
  %214 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i15) #4, !dbg !37
  %215 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i20) #4, !dbg !37
  %216 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i25) #4, !dbg !37
  %217 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i30) #4, !dbg !37
  %218 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i35) #4, !dbg !37
  %219 = shl i32 %210, 7, !dbg !38
  %220 = shl i32 %209, 7, !dbg !38
  %221 = add i32 %205, %219, !dbg !39
  %222 = add i32 %205, %220, !dbg !39
  %223 = sext i32 %221 to i64, !dbg !40
  %224 = getelementptr float, ptr addrspace(1) %5, i64 %223, !dbg !40
  %225 = sext i32 %222 to i64, !dbg !40
  %226 = getelementptr float, ptr addrspace(1) %5, i64 %225, !dbg !40
  %227 = and i32 %203, 508, !dbg !41
  %228 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %16, !dbg !41
  %229 = getelementptr inbounds i8, ptr addrspace(3) %228, i32 516, !dbg !41
  %230 = getelementptr inbounds i8, ptr addrspace(3) %228, i32 1032, !dbg !41
  %231 = getelementptr inbounds i8, ptr addrspace(3) %228, i32 1548, !dbg !41
  %232 = getelementptr inbounds i8, ptr addrspace(3) %228, i32 2064, !dbg !41
  %233 = getelementptr inbounds i8, ptr addrspace(3) %228, i32 2580, !dbg !41
  %234 = getelementptr inbounds i8, ptr addrspace(3) %228, i32 3096, !dbg !41
  %235 = getelementptr inbounds i8, ptr addrspace(3) %228, i32 3612, !dbg !41
  %236 = lshr i32 %227, 7, !dbg !41
  %237 = getelementptr float, ptr addrspace(3) @global_smem, i32 %236, !dbg !41
  %238 = getelementptr float, ptr addrspace(3) %237, i32 %227, !dbg !41
  %239 = or disjoint i32 %227, 1, !dbg !41
  %240 = getelementptr float, ptr addrspace(3) %237, i32 %239, !dbg !41
  %241 = or disjoint i32 %227, 2, !dbg !41
  %242 = getelementptr float, ptr addrspace(3) %237, i32 %241, !dbg !41
  %243 = or disjoint i32 %227, 3, !dbg !41
  %244 = getelementptr float, ptr addrspace(3) %237, i32 %243, !dbg !41
  %245 = or disjoint i32 %227, 512, !dbg !41
  %246 = lshr i32 %245, 7, !dbg !41
  %247 = getelementptr float, ptr addrspace(3) @global_smem, i32 %246, !dbg !41
  %248 = getelementptr float, ptr addrspace(3) %247, i32 %245, !dbg !41
  %249 = or disjoint i32 %227, 513, !dbg !41
  %250 = lshr i32 %249, 7, !dbg !41
  %251 = getelementptr float, ptr addrspace(3) @global_smem, i32 %250, !dbg !41
  %252 = getelementptr float, ptr addrspace(3) %251, i32 %249, !dbg !41
  %253 = or disjoint i32 %227, 514, !dbg !41
  %254 = lshr i32 %253, 7, !dbg !41
  %255 = getelementptr float, ptr addrspace(3) @global_smem, i32 %254, !dbg !41
  %256 = getelementptr float, ptr addrspace(3) %255, i32 %253, !dbg !41
  %257 = or disjoint i32 %227, 515, !dbg !41
  %258 = lshr i32 %257, 7, !dbg !41
  %259 = getelementptr float, ptr addrspace(3) @global_smem, i32 %258, !dbg !41
  %260 = getelementptr float, ptr addrspace(3) %259, i32 %257, !dbg !41
  %261 = getelementptr i1, ptr addrspace(1) %6, i64 %27, !dbg !42
  %262 = insertelement <4 x i32> poison, i32 %185, i64 0, !dbg !26
  %263 = insertelement <4 x i32> %262, i32 %183, i64 1, !dbg !26
  %264 = insertelement <4 x i32> %263, i32 %181, i64 2, !dbg !26
  %265 = insertelement <4 x i32> %264, i32 %179, i64 3, !dbg !26
  %266 = bitcast <4 x i32> %265 to <4 x float>, !dbg !26
  %267 = insertelement <4 x i32> poison, i32 %186, i64 0, !dbg !28
  %268 = insertelement <4 x i32> %267, i32 %184, i64 1, !dbg !28
  %269 = insertelement <4 x i32> %268, i32 %182, i64 2, !dbg !28
  %270 = insertelement <4 x i32> %269, i32 %180, i64 3, !dbg !28
  %271 = bitcast <4 x i32> %270 to <4 x float>, !dbg !28
  %272 = fsub <4 x float> %266, %271, !dbg !43
  %273 = insertelement <4 x i32> poison, i32 %194, i64 0, !dbg !34
  %274 = insertelement <4 x i32> %273, i32 %193, i64 1, !dbg !34
  %275 = insertelement <4 x i32> %274, i32 %192, i64 2, !dbg !34
  %276 = insertelement <4 x i32> %275, i32 %191, i64 3, !dbg !34
  %277 = bitcast <4 x i32> %276 to <4 x float>, !dbg !34
  %278 = insertelement <4 x i32> poison, i32 %202, i64 0, !dbg !32
  %279 = insertelement <4 x i32> %278, i32 %201, i64 1, !dbg !32
  %280 = insertelement <4 x i32> %279, i32 %200, i64 2, !dbg !32
  %281 = insertelement <4 x i32> %280, i32 %199, i64 3, !dbg !32
  %282 = bitcast <4 x i32> %281 to <4 x float>, !dbg !32
  %283 = insertelement <4 x float> poison, float %211, i64 0, !dbg !44
  %284 = insertelement <4 x float> %283, float %212, i64 1, !dbg !44
  %285 = insertelement <4 x float> %284, float %213, i64 2, !dbg !44
  %286 = insertelement <4 x float> %285, float %214, i64 3, !dbg !44
  %287 = fmul <4 x float> %272, %286, !dbg !44
  %288 = fmul <4 x float> %287, %282, !dbg !45
  %289 = fadd <4 x float> %288, %277, !dbg !46
  %290 = fcmp olt <4 x float> %289, zeroinitializer, !dbg !47
  %291 = select <4 x i1> %290, <4 x float> zeroinitializer, <4 x float> %289, !dbg !51
  %292 = fcmp ole <4 x float> %291, zeroinitializer, !dbg !52
  %293 = extractelement <4 x float> %291, i64 0, !dbg !41
  %294 = bitcast float %293 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %228, <1 x i32> %294, i1 true) #4, !dbg !41
  %295 = extractelement <4 x float> %291, i64 1, !dbg !41
  %296 = bitcast float %295 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %229, <1 x i32> %296, i1 true) #4, !dbg !41
  %297 = extractelement <4 x float> %291, i64 2, !dbg !41
  %298 = bitcast float %297 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %230, <1 x i32> %298, i1 true) #4, !dbg !41
  %299 = extractelement <4 x float> %291, i64 3, !dbg !41
  %300 = bitcast float %299 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %231, <1 x i32> %300, i1 true) #4, !dbg !41
  %301 = insertelement <4 x i32> poison, i32 %177, i64 0, !dbg !26
  %302 = insertelement <4 x i32> %301, i32 %175, i64 1, !dbg !26
  %303 = insertelement <4 x i32> %302, i32 %173, i64 2, !dbg !26
  %304 = insertelement <4 x i32> %303, i32 %171, i64 3, !dbg !26
  %305 = bitcast <4 x i32> %304 to <4 x float>, !dbg !26
  %306 = insertelement <4 x i32> poison, i32 %178, i64 0, !dbg !28
  %307 = insertelement <4 x i32> %306, i32 %176, i64 1, !dbg !28
  %308 = insertelement <4 x i32> %307, i32 %174, i64 2, !dbg !28
  %309 = insertelement <4 x i32> %308, i32 %172, i64 3, !dbg !28
  %310 = bitcast <4 x i32> %309 to <4 x float>, !dbg !28
  %311 = fsub <4 x float> %305, %310, !dbg !43
  %312 = insertelement <4 x i32> poison, i32 %190, i64 0, !dbg !34
  %313 = insertelement <4 x i32> %312, i32 %189, i64 1, !dbg !34
  %314 = insertelement <4 x i32> %313, i32 %188, i64 2, !dbg !34
  %315 = insertelement <4 x i32> %314, i32 %187, i64 3, !dbg !34
  %316 = bitcast <4 x i32> %315 to <4 x float>, !dbg !34
  %317 = insertelement <4 x i32> poison, i32 %198, i64 0, !dbg !32
  %318 = insertelement <4 x i32> %317, i32 %197, i64 1, !dbg !32
  %319 = insertelement <4 x i32> %318, i32 %196, i64 2, !dbg !32
  %320 = insertelement <4 x i32> %319, i32 %195, i64 3, !dbg !32
  %321 = bitcast <4 x i32> %320 to <4 x float>, !dbg !32
  %322 = insertelement <4 x float> poison, float %215, i64 0, !dbg !44
  %323 = insertelement <4 x float> %322, float %216, i64 1, !dbg !44
  %324 = insertelement <4 x float> %323, float %217, i64 2, !dbg !44
  %325 = insertelement <4 x float> %324, float %218, i64 3, !dbg !44
  %326 = fmul <4 x float> %311, %325, !dbg !44
  %327 = fmul <4 x float> %326, %321, !dbg !45
  %328 = fadd <4 x float> %327, %316, !dbg !46
  %329 = fcmp olt <4 x float> %328, zeroinitializer, !dbg !47
  %330 = select <4 x i1> %329, <4 x float> zeroinitializer, <4 x float> %328, !dbg !51
  %331 = fcmp ole <4 x float> %330, zeroinitializer, !dbg !52
  %332 = extractelement <4 x float> %330, i64 0, !dbg !41
  %333 = bitcast float %332 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %232, <1 x i32> %333, i1 true) #4, !dbg !41
  %334 = extractelement <4 x float> %330, i64 1, !dbg !41
  %335 = bitcast float %334 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %233, <1 x i32> %335, i1 true) #4, !dbg !41
  %336 = extractelement <4 x float> %330, i64 2, !dbg !41
  %337 = bitcast float %336 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %234, <1 x i32> %337, i1 true) #4, !dbg !41
  %338 = extractelement <4 x float> %330, i64 3, !dbg !41
  %339 = bitcast float %338 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %235, <1 x i32> %339, i1 true) #4, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %340 = load i32, ptr addrspace(3) %238, align 4, !dbg !41
  %341 = load i32, ptr addrspace(3) %240, align 4, !dbg !41
  %342 = load i32, ptr addrspace(3) %242, align 4, !dbg !41
  %343 = load i32, ptr addrspace(3) %244, align 4, !dbg !41
  %344 = load i32, ptr addrspace(3) %248, align 4, !dbg !41
  %345 = load i32, ptr addrspace(3) %252, align 4, !dbg !41
  %346 = load i32, ptr addrspace(3) %256, align 4, !dbg !41
  %347 = load i32, ptr addrspace(3) %260, align 4, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %340, i32 %341, i32 %342, i32 %343, ptr addrspace(1) %224, i1 %206) #4, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %344, i32 %345, i32 %346, i32 %347, ptr addrspace(1) %226, i1 %206) #4, !dbg !41
  %348 = zext <4 x i1> %292 to <4 x i8>, !dbg !53
  %349 = bitcast <4 x i8> %348 to i32, !dbg !53
  %350 = zext <4 x i1> %331 to <4 x i8>, !dbg !53
  %351 = bitcast <4 x i8> %350 to i32, !dbg !53
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %349, i32 %351, ptr addrspace(1) %261, i1 %18) #4, !dbg !53
  ret void, !dbg !54
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c5k3vcslw7z4elwczhfjhgsgzdmjuekp7hjwrg6zivw3dbv3zn7k.py", directory: "inductor_cache/5k")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_20, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_20, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_20", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_20", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 39, scope: !7)
!22 = !DILocation(line: 32, column: 50, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 44, scope: !7)
!25 = !DILocation(line: 32, column: 30, scope: !7)
!26 = !DILocation(line: 32, column: 55, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 33, column: 35, scope: !7)
!29 = !DILocation(line: 34, column: 30, scope: !7)
!30 = !DILocation(line: 34, column: 35, scope: !7)
!31 = !DILocation(line: 35, column: 31, scope: !7)
!32 = !DILocation(line: 35, column: 36, scope: !7)
!33 = !DILocation(line: 36, column: 31, scope: !7)
!34 = !DILocation(line: 36, column: 36, scope: !7)
!35 = !DILocation(line: 39, column: 18, scope: !7)
!36 = !DILocation(line: 40, column: 26, scope: !7)
!37 = !DILocation(line: 42, column: 18, scope: !7)
!38 = !DILocation(line: 52, column: 34, scope: !7)
!39 = !DILocation(line: 52, column: 30, scope: !7)
!40 = !DILocation(line: 52, column: 25, scope: !7)
!41 = !DILocation(line: 52, column: 46, scope: !7)
!42 = !DILocation(line: 53, column: 25, scope: !7)
!43 = !DILocation(line: 37, column: 18, scope: !7)
!44 = !DILocation(line: 45, column: 19, scope: !7)
!45 = !DILocation(line: 46, column: 20, scope: !7)
!46 = !DILocation(line: 47, column: 20, scope: !7)
!47 = !DILocation(line: 118, column: 15, scope: !48, inlinedAt: !50)
!48 = distinct !DILexicalBlockFile(scope: !7, file: !49, discriminator: 0)
!49 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!50 = !DILocation(line: 49, column: 42, scope: !7)
!51 = !DILocation(line: 121, column: 29, scope: !48, inlinedAt: !50)
!52 = !DILocation(line: 51, column: 21, scope: !7)
!53 = !DILocation(line: 53, column: 57, scope: !7)
!54 = !DILocation(line: 53, column: 4, scope: !7)
