; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_cat_26(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %11 = shl i32 %10, 9, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = shl i32 %12, 1, !dbg !12
  %14 = and i32 %13, 510, !dbg !12
  %15 = or disjoint i32 %11, %14, !dbg !13
  %.frozen = freeze i32 %15, !dbg !14
  %16 = sdiv i32 %.frozen, 128, !dbg !14
  %17 = mul i32 %16, 128, !dbg !15
  %.decomposed = sub i32 %.frozen, %17, !dbg !15
  %18 = sdiv i32 %15, 8192, !dbg !16
  %19 = srem i32 %18, 64, !dbg !17
  %20 = srem i32 %16, 64, !dbg !18
  %21 = sdiv i32 %15, 524288, !dbg !19
  %22 = icmp slt i32 %.decomposed, 64, !dbg !20
  %23 = shl nsw i32 %16, 6, !dbg !21
  %24 = add nsw i32 %23, %.decomposed, !dbg !22
  %25 = sext i32 %24 to i64, !dbg !23
  %26 = getelementptr float, ptr addrspace(1) %0, i64 %25, !dbg !23
  %27 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %26, i1 %22, i32 0, i1 %22, i32 0, i1 %22) #3, !dbg !24
  %28 = icmp sgt i32 %.decomposed, 63, !dbg !25
  %29 = sext i32 %19 to i64, !dbg !26
  %30 = getelementptr i64, ptr addrspace(1) %1, i64 %29, !dbg !26
  %31 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %30, i1 %28, i1 %28) #3, !dbg !27
  %32 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %30, i1 %28, i1 %28) #3, !dbg !27
  %33 = lshr i64 %31, 58, !dbg !28
  %34 = and i64 %33, 32, !dbg !28
  %35 = add i64 %34, %31, !dbg !28
  %36 = sext i32 %20 to i64, !dbg !29
  %37 = getelementptr i64, ptr addrspace(1) %1, i64 %36, !dbg !29
  %38 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %37, i1 %28, i1 %28) #3, !dbg !30
  %39 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %37, i1 %28, i1 %28) #3, !dbg !30
  %40 = lshr i64 %38, 58, !dbg !31
  %41 = and i64 %40, 32, !dbg !31
  %42 = add i64 %41, %38, !dbg !31
  %43 = shl nsw i32 %21, 16, !dbg !32
  %44 = sext i32 %43 to i64, !dbg !33
  %45 = add nsw i32 %.decomposed, -64, !dbg !34
  %46 = sext i32 %45 to i64, !dbg !35
  %.idx = shl i64 %42, 8, !dbg !36
  %47 = getelementptr i8, ptr addrspace(1) %2, i64 %.idx, !dbg !36
  %.idx1 = shl i64 %35, 13, !dbg !36
  %48 = getelementptr i8, ptr addrspace(1) %47, i64 %.idx1, !dbg !36
  %49 = getelementptr float, ptr addrspace(1) %48, i64 %44, !dbg !36
  %50 = getelementptr float, ptr addrspace(1) %49, i64 %46, !dbg !36
  %51 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %50, i1 %28, i32 0, i1 %28, i32 0, i1 %28) #3, !dbg !37
  %52 = getelementptr float, ptr addrspace(1) %3, i64 %46, !dbg !38
  %53 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %52, i1 %28, i32 0, i1 %28, i32 0, i1 %28) #3, !dbg !39
  %54 = getelementptr float, ptr addrspace(1) %4, i64 %46, !dbg !40
  %55 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %54, i1 %28, i32 0, i1 %28, i32 0, i1 %28) #3, !dbg !41
  %56 = extractvalue { i32, i32 } %55, 0, !dbg !41
  %57 = extractvalue { i32, i32 } %55, 1, !dbg !41
  %58 = bitcast i32 %56 to float, !dbg !41
  %59 = bitcast i32 %57 to float, !dbg !41
  %60 = fadd float %58, 0x3EE4F8B580000000, !dbg !42
  %61 = fadd float %59, 0x3EE4F8B580000000, !dbg !42
  %62 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !43
  %.not.i = icmp eq i32 %62, 0, !dbg !43
  %63 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !43
  %.not1.i = icmp eq i32 %63, 0, !dbg !43
  br i1 %.not.i, label %69, label %64, !dbg !43

64:                                               ; preds = %9
  br i1 %.not1.i, label %67, label %65, !dbg !43

65:                                               ; preds = %64
  %66 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %60) #3, !dbg !43
  br label %__nv_sqrtf.exit, !dbg !43

67:                                               ; preds = %64
  %68 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %60) #3, !dbg !43
  br label %__nv_sqrtf.exit, !dbg !43

69:                                               ; preds = %9
  br i1 %.not1.i, label %72, label %70, !dbg !43

70:                                               ; preds = %69
  %71 = tail call float @llvm.nvvm.sqrt.rn.f(float %60) #3, !dbg !43
  br label %__nv_sqrtf.exit, !dbg !43

72:                                               ; preds = %69
  %73 = tail call float @llvm.nvvm.sqrt.approx.f(float %60) #3, !dbg !43
  br label %__nv_sqrtf.exit, !dbg !43

__nv_sqrtf.exit:                                  ; preds = %65, %67, %70, %72
  %.0.i = phi float [ %66, %65 ], [ %68, %67 ], [ %71, %70 ], [ %73, %72 ], !dbg !43
  %74 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !43
  %.not.i2 = icmp eq i32 %74, 0, !dbg !43
  %75 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !43
  %.not1.i5 = icmp eq i32 %75, 0, !dbg !43
  br i1 %.not.i2, label %81, label %76, !dbg !43

76:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i5, label %79, label %77, !dbg !43

77:                                               ; preds = %76
  %78 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %61) #3, !dbg !43
  br label %__nv_sqrtf.exit6, !dbg !43

79:                                               ; preds = %76
  %80 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %61) #3, !dbg !43
  br label %__nv_sqrtf.exit6, !dbg !43

81:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i5, label %84, label %82, !dbg !43

82:                                               ; preds = %81
  %83 = tail call float @llvm.nvvm.sqrt.rn.f(float %61) #3, !dbg !43
  br label %__nv_sqrtf.exit6, !dbg !43

84:                                               ; preds = %81
  %85 = tail call float @llvm.nvvm.sqrt.approx.f(float %61) #3, !dbg !43
  br label %__nv_sqrtf.exit6, !dbg !43

__nv_sqrtf.exit6:                                 ; preds = %77, %79, %82, %84
  %.0.i4 = phi float [ %78, %77 ], [ %80, %79 ], [ %83, %82 ], [ %85, %84 ], !dbg !43
  %86 = extractvalue { i32, i32 } %51, 1, !dbg !37
  %87 = bitcast i32 %86 to float, !dbg !37
  %88 = extractvalue { i32, i32 } %53, 1, !dbg !39
  %89 = bitcast i32 %88 to float, !dbg !39
  %90 = fsub float %87, %89, !dbg !44
  %91 = extractvalue { i32, i32 } %51, 0, !dbg !37
  %92 = bitcast i32 %91 to float, !dbg !37
  %93 = extractvalue { i32, i32 } %53, 0, !dbg !39
  %94 = bitcast i32 %93 to float, !dbg !39
  %95 = fsub float %92, %94, !dbg !44
  %96 = extractvalue { i32, i32 } %27, 1, !dbg !24
  %97 = extractvalue { i32, i32 } %27, 0, !dbg !24
  %98 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !45
  %99 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i4) #3, !dbg !45
  %100 = fmul float %95, %98, !dbg !46
  %101 = fmul float %90, %99, !dbg !46
  %102 = getelementptr float, ptr addrspace(1) %5, i64 %46, !dbg !47
  %103 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %102, i1 %28, i32 0, i1 %28, i32 0, i1 %28) #3, !dbg !48
  %104 = extractvalue { i32, i32 } %103, 0, !dbg !48
  %105 = extractvalue { i32, i32 } %103, 1, !dbg !48
  %106 = bitcast i32 %104 to float, !dbg !48
  %107 = bitcast i32 %105 to float, !dbg !48
  %108 = fmul float %100, %106, !dbg !49
  %109 = fmul float %101, %107, !dbg !49
  %110 = getelementptr float, ptr addrspace(1) %6, i64 %46, !dbg !50
  %111 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %110, i1 %28, i32 0, i1 %28, i32 0, i1 %28) #3, !dbg !51
  %112 = extractvalue { i32, i32 } %111, 0, !dbg !51
  %113 = extractvalue { i32, i32 } %111, 1, !dbg !51
  %114 = bitcast i32 %112 to float, !dbg !51
  %115 = bitcast i32 %113 to float, !dbg !51
  %116 = fadd float %108, %114, !dbg !52
  %117 = fadd float %109, %115, !dbg !52
  %118 = fcmp olt float %116, 0.000000e+00, !dbg !53
  %119 = fcmp olt float %117, 0.000000e+00, !dbg !53
  %120 = select i1 %118, float 0.000000e+00, float %116, !dbg !57
  %121 = select i1 %119, float 0.000000e+00, float %117, !dbg !57
  %122 = sext i32 %15 to i64, !dbg !58
  %123 = getelementptr float, ptr addrspace(1) %7, i64 %122, !dbg !58
  %124 = bitcast float %120 to i32, !dbg !59
  %125 = select i1 %22, i32 %97, i32 %124, !dbg !60
  %126 = bitcast float %121 to i32, !dbg !59
  %127 = select i1 %22, i32 %96, i32 %126, !dbg !60
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %125, i32 %127, ptr addrspace(1) %123, i1 true) #3, !dbg !59
  ret void, !dbg !61
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ccxbxlx33466y2hrp4qplowwdn3o67lkm7ydjdstrswykj5awee7.py", directory: "inductor_cache/cx")
!4 = !{ptr @triton_poi_fused_cat_26, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_26, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_26", linkageName: "triton_poi_fused_cat_26", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 21, scope: !7)
!17 = !DILocation(line: 26, column: 29, scope: !7)
!18 = !DILocation(line: 27, column: 28, scope: !7)
!19 = !DILocation(line: 28, column: 19, scope: !7)
!20 = !DILocation(line: 34, column: 18, scope: !7)
!21 = !DILocation(line: 35, column: 33, scope: !7)
!22 = !DILocation(line: 35, column: 39, scope: !7)
!23 = !DILocation(line: 35, column: 30, scope: !7)
!24 = !DILocation(line: 35, column: 45, scope: !7)
!25 = !DILocation(line: 36, column: 19, scope: !7)
!26 = !DILocation(line: 39, column: 30, scope: !7)
!27 = !DILocation(line: 39, column: 35, scope: !7)
!28 = !DILocation(line: 43, column: 35, scope: !7)
!29 = !DILocation(line: 44, column: 31, scope: !7)
!30 = !DILocation(line: 44, column: 36, scope: !7)
!31 = !DILocation(line: 47, column: 35, scope: !7)
!32 = !DILocation(line: 48, column: 61, scope: !7)
!33 = !DILocation(line: 48, column: 55, scope: !7)
!34 = !DILocation(line: 48, column: 75, scope: !7)
!35 = !DILocation(line: 48, column: 67, scope: !7)
!36 = !DILocation(line: 48, column: 31, scope: !7)
!37 = !DILocation(line: 48, column: 81, scope: !7)
!38 = !DILocation(line: 49, column: 31, scope: !7)
!39 = !DILocation(line: 49, column: 44, scope: !7)
!40 = !DILocation(line: 51, column: 31, scope: !7)
!41 = !DILocation(line: 51, column: 44, scope: !7)
!42 = !DILocation(line: 53, column: 20, scope: !7)
!43 = !DILocation(line: 54, column: 27, scope: !7)
!44 = !DILocation(line: 50, column: 20, scope: !7)
!45 = !DILocation(line: 56, column: 20, scope: !7)
!46 = !DILocation(line: 59, column: 20, scope: !7)
!47 = !DILocation(line: 60, column: 31, scope: !7)
!48 = !DILocation(line: 60, column: 44, scope: !7)
!49 = !DILocation(line: 61, column: 20, scope: !7)
!50 = !DILocation(line: 62, column: 31, scope: !7)
!51 = !DILocation(line: 62, column: 44, scope: !7)
!52 = !DILocation(line: 63, column: 20, scope: !7)
!53 = !DILocation(line: 118, column: 15, scope: !54, inlinedAt: !56)
!54 = distinct !DILexicalBlockFile(scope: !7, file: !55, discriminator: 0)
!55 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!56 = !DILocation(line: 65, column: 42, scope: !7)
!57 = !DILocation(line: 121, column: 29, scope: !54, inlinedAt: !56)
!58 = !DILocation(line: 69, column: 25, scope: !7)
!59 = !DILocation(line: 69, column: 37, scope: !7)
!60 = !DILocation(line: 68, column: 33, scope: !7)
!61 = !DILocation(line: 69, column: 4, scope: !7)
