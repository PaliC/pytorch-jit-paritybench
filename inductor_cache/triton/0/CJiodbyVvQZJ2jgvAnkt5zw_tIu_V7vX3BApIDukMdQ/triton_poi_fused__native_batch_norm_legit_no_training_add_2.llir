; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %11 = shl i32 %10, 4, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %.lobit1 = lshr i32 %12, 6, !dbg !12
  %13 = and i32 %.lobit1, 3, !dbg !12
  %14 = or disjoint i32 %13, 4, !dbg !12
  %15 = or disjoint i32 %13, 8, !dbg !12
  %16 = or disjoint i32 %13, 12, !dbg !12
  %17 = shl i32 %12, 2, !dbg !12
  %18 = or disjoint i32 %11, %13, !dbg !13
  %19 = or disjoint i32 %11, %14, !dbg !13
  %20 = or disjoint i32 %11, %15, !dbg !13
  %21 = or disjoint i32 %11, %16, !dbg !13
  %22 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %23 = shl i32 %22, 8, !dbg !15
  %24 = and i32 %17, 252, !dbg !16
  %25 = and i32 %12, 255, !dbg !16
  %26 = or disjoint i32 %23, %24, !dbg !17
  %27 = or disjoint i32 %23, %25, !dbg !17
  %28 = icmp slt i32 %26, 728, !dbg !18
  %29 = icmp slt i32 %27, 728, !dbg !18
  %30 = mul i32 %18, 728, !dbg !19
  %31 = mul i32 %19, 728, !dbg !19
  %32 = mul i32 %20, 728, !dbg !19
  %33 = mul i32 %21, 728, !dbg !19
  %34 = add i32 %26, %30, !dbg !20
  %35 = add i32 %26, %31, !dbg !20
  %36 = add i32 %26, %32, !dbg !20
  %37 = add i32 %26, %33, !dbg !20
  %38 = sext i32 %34 to i64, !dbg !21
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !21
  %40 = sext i32 %35 to i64, !dbg !21
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !21
  %42 = sext i32 %36 to i64, !dbg !21
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !21
  %44 = sext i32 %37 to i64, !dbg !21
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !21
  %46 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %39, i1 %28) #4, !dbg !22
  %47 = extractvalue { i32, i32, i32, i32 } %46, 0, !dbg !22
  %48 = extractvalue { i32, i32, i32, i32 } %46, 1, !dbg !22
  %49 = extractvalue { i32, i32, i32, i32 } %46, 2, !dbg !22
  %50 = extractvalue { i32, i32, i32, i32 } %46, 3, !dbg !22
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %41, i1 %28) #4, !dbg !22
  %52 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !22
  %53 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !22
  %54 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !22
  %55 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !22
  %56 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %43, i1 %28) #4, !dbg !22
  %57 = extractvalue { i32, i32, i32, i32 } %56, 0, !dbg !22
  %58 = extractvalue { i32, i32, i32, i32 } %56, 1, !dbg !22
  %59 = extractvalue { i32, i32, i32, i32 } %56, 2, !dbg !22
  %60 = extractvalue { i32, i32, i32, i32 } %56, 3, !dbg !22
  %61 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %45, i1 %28) #4, !dbg !22
  %62 = extractvalue { i32, i32, i32, i32 } %61, 0, !dbg !22
  %63 = extractvalue { i32, i32, i32, i32 } %61, 1, !dbg !22
  %64 = extractvalue { i32, i32, i32, i32 } %61, 2, !dbg !22
  %65 = extractvalue { i32, i32, i32, i32 } %61, 3, !dbg !22
  %66 = and i32 %17, 1020, !dbg !22
  %67 = lshr i32 %66, 8, !dbg !22
  %68 = or disjoint i32 %67, %66, !dbg !22
  %69 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %68, !dbg !22
  %70 = insertelement <1 x i32> poison, i32 %47, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %69, <1 x i32> %70, i1 true) #4, !dbg !22
  %71 = or disjoint i32 %66, 1, !dbg !22
  %72 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %67, !dbg !22
  %73 = getelementptr inbounds float, ptr addrspace(3) %72, i32 %71, !dbg !22
  %74 = insertelement <1 x i32> poison, i32 %48, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %73, <1 x i32> %74, i1 true) #4, !dbg !22
  %75 = or disjoint i32 %66, 2, !dbg !22
  %76 = getelementptr inbounds float, ptr addrspace(3) %72, i32 %75, !dbg !22
  %77 = insertelement <1 x i32> poison, i32 %49, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %76, <1 x i32> %77, i1 true) #4, !dbg !22
  %78 = or disjoint i32 %66, 3, !dbg !22
  %79 = getelementptr inbounds float, ptr addrspace(3) %72, i32 %78, !dbg !22
  %80 = insertelement <1 x i32> poison, i32 %50, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %79, <1 x i32> %80, i1 true) #4, !dbg !22
  tail call void @llvm.nvvm.barrier0(), !dbg !22
  %81 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %25, !dbg !22
  %82 = load float, ptr addrspace(3) %81, align 4, !dbg !22
  %83 = getelementptr inbounds i8, ptr addrspace(3) %81, i32 1028, !dbg !22
  %84 = load float, ptr addrspace(3) %83, align 4, !dbg !22
  %85 = getelementptr inbounds i8, ptr addrspace(3) %81, i32 2056, !dbg !22
  %86 = load float, ptr addrspace(3) %85, align 4, !dbg !22
  %87 = getelementptr inbounds i8, ptr addrspace(3) %81, i32 3084, !dbg !22
  %88 = load float, ptr addrspace(3) %87, align 4, !dbg !22
  tail call void @llvm.nvvm.barrier0(), !dbg !22
  %89 = insertelement <1 x i32> poison, i32 %52, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %69, <1 x i32> %89, i1 true) #4, !dbg !22
  %90 = insertelement <1 x i32> poison, i32 %53, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %73, <1 x i32> %90, i1 true) #4, !dbg !22
  %91 = insertelement <1 x i32> poison, i32 %54, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %76, <1 x i32> %91, i1 true) #4, !dbg !22
  %92 = insertelement <1 x i32> poison, i32 %55, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %79, <1 x i32> %92, i1 true) #4, !dbg !22
  tail call void @llvm.nvvm.barrier0(), !dbg !22
  %93 = load float, ptr addrspace(3) %81, align 4, !dbg !22
  %94 = load float, ptr addrspace(3) %83, align 4, !dbg !22
  %95 = load float, ptr addrspace(3) %85, align 4, !dbg !22
  %96 = load float, ptr addrspace(3) %87, align 4, !dbg !22
  tail call void @llvm.nvvm.barrier0(), !dbg !22
  %97 = insertelement <1 x i32> poison, i32 %57, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %69, <1 x i32> %97, i1 true) #4, !dbg !22
  %98 = insertelement <1 x i32> poison, i32 %58, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %73, <1 x i32> %98, i1 true) #4, !dbg !22
  %99 = insertelement <1 x i32> poison, i32 %59, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %76, <1 x i32> %99, i1 true) #4, !dbg !22
  %100 = insertelement <1 x i32> poison, i32 %60, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %79, <1 x i32> %100, i1 true) #4, !dbg !22
  tail call void @llvm.nvvm.barrier0(), !dbg !22
  %101 = load float, ptr addrspace(3) %81, align 4, !dbg !22
  %102 = load float, ptr addrspace(3) %83, align 4, !dbg !22
  %103 = load float, ptr addrspace(3) %85, align 4, !dbg !22
  %104 = load float, ptr addrspace(3) %87, align 4, !dbg !22
  tail call void @llvm.nvvm.barrier0(), !dbg !22
  %105 = insertelement <1 x i32> poison, i32 %62, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %69, <1 x i32> %105, i1 true) #4, !dbg !22
  %106 = insertelement <1 x i32> poison, i32 %63, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %73, <1 x i32> %106, i1 true) #4, !dbg !22
  %107 = insertelement <1 x i32> poison, i32 %64, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %76, <1 x i32> %107, i1 true) #4, !dbg !22
  %108 = insertelement <1 x i32> poison, i32 %65, i64 0, !dbg !22
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %79, <1 x i32> %108, i1 true) #4, !dbg !22
  tail call void @llvm.nvvm.barrier0(), !dbg !22
  %109 = load float, ptr addrspace(3) %81, align 4, !dbg !22
  %110 = load float, ptr addrspace(3) %83, align 4, !dbg !22
  %111 = load float, ptr addrspace(3) %85, align 4, !dbg !22
  %112 = load float, ptr addrspace(3) %87, align 4, !dbg !22
  %113 = getelementptr float, ptr addrspace(1) %1, i64 %38, !dbg !23
  %114 = getelementptr float, ptr addrspace(1) %1, i64 %40, !dbg !23
  %115 = getelementptr float, ptr addrspace(1) %1, i64 %42, !dbg !23
  %116 = getelementptr float, ptr addrspace(1) %1, i64 %44, !dbg !23
  %117 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %113, i1 %28) #4, !dbg !24
  %118 = extractvalue { i32, i32, i32, i32 } %117, 0, !dbg !24
  %119 = extractvalue { i32, i32, i32, i32 } %117, 1, !dbg !24
  %120 = extractvalue { i32, i32, i32, i32 } %117, 2, !dbg !24
  %121 = extractvalue { i32, i32, i32, i32 } %117, 3, !dbg !24
  %122 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %114, i1 %28) #4, !dbg !24
  %123 = extractvalue { i32, i32, i32, i32 } %122, 0, !dbg !24
  %124 = extractvalue { i32, i32, i32, i32 } %122, 1, !dbg !24
  %125 = extractvalue { i32, i32, i32, i32 } %122, 2, !dbg !24
  %126 = extractvalue { i32, i32, i32, i32 } %122, 3, !dbg !24
  %127 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %115, i1 %28) #4, !dbg !24
  %128 = extractvalue { i32, i32, i32, i32 } %127, 0, !dbg !24
  %129 = extractvalue { i32, i32, i32, i32 } %127, 1, !dbg !24
  %130 = extractvalue { i32, i32, i32, i32 } %127, 2, !dbg !24
  %131 = extractvalue { i32, i32, i32, i32 } %127, 3, !dbg !24
  %132 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %116, i1 %28) #4, !dbg !24
  %133 = extractvalue { i32, i32, i32, i32 } %132, 0, !dbg !24
  %134 = extractvalue { i32, i32, i32, i32 } %132, 1, !dbg !24
  %135 = extractvalue { i32, i32, i32, i32 } %132, 2, !dbg !24
  %136 = extractvalue { i32, i32, i32, i32 } %132, 3, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %137 = insertelement <1 x i32> poison, i32 %118, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %69, <1 x i32> %137, i1 true) #4, !dbg !24
  %138 = insertelement <1 x i32> poison, i32 %119, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %73, <1 x i32> %138, i1 true) #4, !dbg !24
  %139 = insertelement <1 x i32> poison, i32 %120, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %76, <1 x i32> %139, i1 true) #4, !dbg !24
  %140 = insertelement <1 x i32> poison, i32 %121, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %79, <1 x i32> %140, i1 true) #4, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %141 = load float, ptr addrspace(3) %81, align 4, !dbg !24
  %142 = load float, ptr addrspace(3) %83, align 4, !dbg !24
  %143 = load float, ptr addrspace(3) %85, align 4, !dbg !24
  %144 = load float, ptr addrspace(3) %87, align 4, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %145 = insertelement <1 x i32> poison, i32 %123, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %69, <1 x i32> %145, i1 true) #4, !dbg !24
  %146 = insertelement <1 x i32> poison, i32 %124, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %73, <1 x i32> %146, i1 true) #4, !dbg !24
  %147 = insertelement <1 x i32> poison, i32 %125, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %76, <1 x i32> %147, i1 true) #4, !dbg !24
  %148 = insertelement <1 x i32> poison, i32 %126, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %79, <1 x i32> %148, i1 true) #4, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %149 = load float, ptr addrspace(3) %81, align 4, !dbg !24
  %150 = load float, ptr addrspace(3) %83, align 4, !dbg !24
  %151 = load float, ptr addrspace(3) %85, align 4, !dbg !24
  %152 = load float, ptr addrspace(3) %87, align 4, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %153 = insertelement <1 x i32> poison, i32 %128, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %69, <1 x i32> %153, i1 true) #4, !dbg !24
  %154 = insertelement <1 x i32> poison, i32 %129, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %73, <1 x i32> %154, i1 true) #4, !dbg !24
  %155 = insertelement <1 x i32> poison, i32 %130, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %76, <1 x i32> %155, i1 true) #4, !dbg !24
  %156 = insertelement <1 x i32> poison, i32 %131, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %79, <1 x i32> %156, i1 true) #4, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %157 = load float, ptr addrspace(3) %81, align 4, !dbg !24
  %158 = load float, ptr addrspace(3) %83, align 4, !dbg !24
  %159 = load float, ptr addrspace(3) %85, align 4, !dbg !24
  %160 = load float, ptr addrspace(3) %87, align 4, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %161 = insertelement <1 x i32> poison, i32 %133, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %69, <1 x i32> %161, i1 true) #4, !dbg !24
  %162 = insertelement <1 x i32> poison, i32 %134, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %73, <1 x i32> %162, i1 true) #4, !dbg !24
  %163 = insertelement <1 x i32> poison, i32 %135, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %76, <1 x i32> %163, i1 true) #4, !dbg !24
  %164 = insertelement <1 x i32> poison, i32 %136, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %79, <1 x i32> %164, i1 true) #4, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %165 = load float, ptr addrspace(3) %81, align 4, !dbg !24
  %166 = load float, ptr addrspace(3) %83, align 4, !dbg !24
  %167 = load float, ptr addrspace(3) %85, align 4, !dbg !24
  %168 = load float, ptr addrspace(3) %87, align 4, !dbg !24
  %169 = sext i32 %27 to i64, !dbg !25
  %170 = getelementptr float, ptr addrspace(1) %2, i64 %169, !dbg !25
  %171 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %170, i1 %29) #4, !dbg !26
  %172 = getelementptr float, ptr addrspace(1) %3, i64 %169, !dbg !27
  %173 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %172, i1 %29) #4, !dbg !28
  %174 = bitcast i32 %173 to float, !dbg !28
  %175 = getelementptr float, ptr addrspace(1) %4, i64 %169, !dbg !29
  %176 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %175, i1 %29) #4, !dbg !30
  %177 = getelementptr float, ptr addrspace(1) %5, i64 %169, !dbg !31
  %178 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %177, i1 %29) #4, !dbg !32
  %179 = fadd float %174, 0x3EE4F8B580000000, !dbg !33
  %180 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !34
  %.not.i = icmp eq i32 %180, 0, !dbg !34
  %181 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !34
  %.not1.i = icmp eq i32 %181, 0, !dbg !34
  br i1 %.not.i, label %187, label %182, !dbg !34

182:                                              ; preds = %9
  br i1 %.not1.i, label %185, label %183, !dbg !34

183:                                              ; preds = %182
  %184 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %179) #4, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

185:                                              ; preds = %182
  %186 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %179) #4, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

187:                                              ; preds = %9
  br i1 %.not1.i, label %190, label %188, !dbg !34

188:                                              ; preds = %187
  %189 = tail call float @llvm.nvvm.sqrt.rn.f(float %179) #4, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

190:                                              ; preds = %187
  %191 = tail call float @llvm.nvvm.sqrt.approx.f(float %179) #4, !dbg !34
  br label %__nv_sqrtf.exit, !dbg !34

__nv_sqrtf.exit:                                  ; preds = %183, %185, %188, %190
  %.0.i = phi float [ %184, %183 ], [ %186, %185 ], [ %189, %188 ], [ %191, %190 ], !dbg !34
  %192 = bitcast i32 %171 to float, !dbg !26
  %193 = fsub float %168, %192, !dbg !35
  %194 = fsub float %167, %192, !dbg !35
  %195 = fsub float %166, %192, !dbg !35
  %196 = fsub float %165, %192, !dbg !35
  %197 = fsub float %160, %192, !dbg !35
  %198 = fsub float %159, %192, !dbg !35
  %199 = fsub float %158, %192, !dbg !35
  %200 = fsub float %157, %192, !dbg !35
  %201 = fsub float %152, %192, !dbg !35
  %202 = fsub float %151, %192, !dbg !35
  %203 = fsub float %150, %192, !dbg !35
  %204 = fsub float %149, %192, !dbg !35
  %205 = fsub float %144, %192, !dbg !35
  %206 = fsub float %143, %192, !dbg !35
  %207 = fsub float %142, %192, !dbg !35
  %208 = fsub float %141, %192, !dbg !35
  %209 = bitcast i32 %178 to float, !dbg !32
  %210 = bitcast i32 %176 to float, !dbg !30
  %211 = and i32 %17, 12, !dbg !12
  %212 = or disjoint i32 %11, %211, !dbg !13
  %.frozen = freeze i32 %212, !dbg !36
  %213 = sdiv i32 %.frozen, 4096, !dbg !36
  %214 = mul i32 %213, 4096, !dbg !37
  %.decomposed = sub i32 %.frozen, %214, !dbg !37
  %215 = lshr i32 %12, 2, !dbg !16
  %216 = and i32 %215, 63, !dbg !16
  %217 = or disjoint i32 %216, %23, !dbg !17
  %218 = or disjoint i32 %217, 192, !dbg !17
  %219 = icmp slt i32 %218, 728, !dbg !18
  %220 = or disjoint i32 %217, 128, !dbg !17
  %221 = icmp slt i32 %220, 728, !dbg !18
  %222 = or disjoint i32 %217, 64, !dbg !17
  %223 = icmp slt i32 %222, 728, !dbg !18
  %224 = icmp slt i32 %217, 728, !dbg !18
  %225 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !38
  %226 = fmul float %208, %225, !dbg !39
  %227 = fmul float %207, %225, !dbg !39
  %228 = fmul float %206, %225, !dbg !39
  %229 = fmul float %205, %225, !dbg !39
  %230 = fmul float %204, %225, !dbg !39
  %231 = fmul float %203, %225, !dbg !39
  %232 = fmul float %202, %225, !dbg !39
  %233 = fmul float %201, %225, !dbg !39
  %234 = fmul float %200, %225, !dbg !39
  %235 = fmul float %199, %225, !dbg !39
  %236 = fmul float %198, %225, !dbg !39
  %237 = fmul float %197, %225, !dbg !39
  %238 = fmul float %196, %225, !dbg !39
  %239 = fmul float %195, %225, !dbg !39
  %240 = fmul float %194, %225, !dbg !39
  %241 = fmul float %193, %225, !dbg !39
  %242 = fmul float %226, %210, !dbg !40
  %243 = fmul float %227, %210, !dbg !40
  %244 = fmul float %228, %210, !dbg !40
  %245 = fmul float %229, %210, !dbg !40
  %246 = fmul float %230, %210, !dbg !40
  %247 = fmul float %231, %210, !dbg !40
  %248 = fmul float %232, %210, !dbg !40
  %249 = fmul float %233, %210, !dbg !40
  %250 = fmul float %234, %210, !dbg !40
  %251 = fmul float %235, %210, !dbg !40
  %252 = fmul float %236, %210, !dbg !40
  %253 = fmul float %237, %210, !dbg !40
  %254 = fmul float %238, %210, !dbg !40
  %255 = fmul float %239, %210, !dbg !40
  %256 = fmul float %240, %210, !dbg !40
  %257 = fmul float %241, %210, !dbg !40
  %258 = fadd float %242, %209, !dbg !41
  %259 = fadd float %243, %209, !dbg !41
  %260 = fadd float %244, %209, !dbg !41
  %261 = fadd float %245, %209, !dbg !41
  %262 = fadd float %246, %209, !dbg !41
  %263 = fadd float %247, %209, !dbg !41
  %264 = fadd float %248, %209, !dbg !41
  %265 = fadd float %249, %209, !dbg !41
  %266 = fadd float %250, %209, !dbg !41
  %267 = fadd float %251, %209, !dbg !41
  %268 = fadd float %252, %209, !dbg !41
  %269 = fadd float %253, %209, !dbg !41
  %270 = fadd float %254, %209, !dbg !41
  %271 = fadd float %255, %209, !dbg !41
  %272 = fadd float %256, %209, !dbg !41
  %273 = fadd float %257, %209, !dbg !41
  %274 = fadd float %82, %258, !dbg !42
  %275 = fadd float %84, %259, !dbg !42
  %276 = fadd float %86, %260, !dbg !42
  %277 = fadd float %88, %261, !dbg !42
  %278 = fadd float %93, %262, !dbg !42
  %279 = fadd float %94, %263, !dbg !42
  %280 = fadd float %95, %264, !dbg !42
  %281 = fadd float %96, %265, !dbg !42
  %282 = fadd float %101, %266, !dbg !42
  %283 = fadd float %102, %267, !dbg !42
  %284 = fadd float %103, %268, !dbg !42
  %285 = fadd float %104, %269, !dbg !42
  %286 = fadd float %109, %270, !dbg !42
  %287 = fadd float %110, %271, !dbg !42
  %288 = fadd float %111, %272, !dbg !42
  %289 = fadd float %112, %273, !dbg !42
  %290 = shl i32 %217, 12, !dbg !43
  %291 = shl i32 %222, 12, !dbg !43
  %292 = shl i32 %220, 12, !dbg !43
  %293 = shl i32 %218, 12, !dbg !43
  %294 = mul i32 %213, 2981888, !dbg !44
  %295 = add i32 %294, %.decomposed, !dbg !45
  %296 = add i32 %295, %290, !dbg !46
  %297 = add i32 %295, %291, !dbg !46
  %298 = add i32 %295, %292, !dbg !46
  %299 = add i32 %295, %293, !dbg !46
  %300 = sext i32 %296 to i64, !dbg !47
  %301 = getelementptr float, ptr addrspace(1) %6, i64 %300, !dbg !47
  %302 = sext i32 %297 to i64, !dbg !47
  %303 = getelementptr float, ptr addrspace(1) %6, i64 %302, !dbg !47
  %304 = sext i32 %298 to i64, !dbg !47
  %305 = getelementptr float, ptr addrspace(1) %6, i64 %304, !dbg !47
  %306 = sext i32 %299 to i64, !dbg !47
  %307 = getelementptr float, ptr addrspace(1) %6, i64 %306, !dbg !47
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %308 = shl i32 %12, 4, !dbg !48
  %309 = and i32 %308, 4080, !dbg !48
  %310 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %309, !dbg !48
  %311 = getelementptr float, ptr addrspace(3) %310, i32 %309, !dbg !48
  %312 = bitcast float %274 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %311, <1 x i32> %312, i1 true) #4, !dbg !48
  %313 = or disjoint i32 %309, 1, !dbg !48
  %314 = getelementptr float, ptr addrspace(3) %310, i32 %313, !dbg !48
  %315 = bitcast float %275 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %314, <1 x i32> %315, i1 true) #4, !dbg !48
  %316 = or disjoint i32 %309, 2, !dbg !48
  %317 = getelementptr float, ptr addrspace(3) %310, i32 %316, !dbg !48
  %318 = bitcast float %276 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %317, <1 x i32> %318, i1 true) #4, !dbg !48
  %319 = or disjoint i32 %309, 3, !dbg !48
  %320 = getelementptr float, ptr addrspace(3) %310, i32 %319, !dbg !48
  %321 = bitcast float %277 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %320, <1 x i32> %321, i1 true) #4, !dbg !48
  %322 = or disjoint i32 %309, 4, !dbg !48
  %323 = getelementptr float, ptr addrspace(3) %310, i32 %322, !dbg !48
  %324 = bitcast float %278 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %323, <1 x i32> %324, i1 true) #4, !dbg !48
  %325 = or disjoint i32 %309, 5, !dbg !48
  %326 = getelementptr float, ptr addrspace(3) %310, i32 %325, !dbg !48
  %327 = bitcast float %279 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %326, <1 x i32> %327, i1 true) #4, !dbg !48
  %328 = or disjoint i32 %309, 6, !dbg !48
  %329 = getelementptr float, ptr addrspace(3) %310, i32 %328, !dbg !48
  %330 = bitcast float %280 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %329, <1 x i32> %330, i1 true) #4, !dbg !48
  %331 = or disjoint i32 %309, 7, !dbg !48
  %332 = getelementptr float, ptr addrspace(3) %310, i32 %331, !dbg !48
  %333 = bitcast float %281 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %332, <1 x i32> %333, i1 true) #4, !dbg !48
  %334 = or disjoint i32 %309, 8, !dbg !48
  %335 = getelementptr float, ptr addrspace(3) %310, i32 %334, !dbg !48
  %336 = bitcast float %282 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %335, <1 x i32> %336, i1 true) #4, !dbg !48
  %337 = or disjoint i32 %309, 9, !dbg !48
  %338 = getelementptr float, ptr addrspace(3) %310, i32 %337, !dbg !48
  %339 = bitcast float %283 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %338, <1 x i32> %339, i1 true) #4, !dbg !48
  %340 = or disjoint i32 %309, 10, !dbg !48
  %341 = getelementptr float, ptr addrspace(3) %310, i32 %340, !dbg !48
  %342 = bitcast float %284 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %341, <1 x i32> %342, i1 true) #4, !dbg !48
  %343 = or disjoint i32 %309, 11, !dbg !48
  %344 = getelementptr float, ptr addrspace(3) %310, i32 %343, !dbg !48
  %345 = bitcast float %285 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %344, <1 x i32> %345, i1 true) #4, !dbg !48
  %346 = or disjoint i32 %309, 12, !dbg !48
  %347 = getelementptr float, ptr addrspace(3) %310, i32 %346, !dbg !48
  %348 = bitcast float %286 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %347, <1 x i32> %348, i1 true) #4, !dbg !48
  %349 = or disjoint i32 %309, 13, !dbg !48
  %350 = getelementptr float, ptr addrspace(3) %310, i32 %349, !dbg !48
  %351 = bitcast float %287 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %350, <1 x i32> %351, i1 true) #4, !dbg !48
  %352 = or disjoint i32 %309, 14, !dbg !48
  %353 = getelementptr float, ptr addrspace(3) %310, i32 %352, !dbg !48
  %354 = bitcast float %288 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %353, <1 x i32> %354, i1 true) #4, !dbg !48
  %355 = or disjoint i32 %309, 15, !dbg !48
  %356 = getelementptr float, ptr addrspace(3) %310, i32 %355, !dbg !48
  %357 = bitcast float %289 to <1 x i32>, !dbg !48
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %356, <1 x i32> %357, i1 true) #4, !dbg !48
  tail call void @llvm.nvvm.barrier0(), !dbg !48
  %358 = and i32 %12, 252, !dbg !48
  %359 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %358, !dbg !48
  %360 = getelementptr inbounds float, ptr addrspace(3) %359, i32 %66, !dbg !48
  %361 = or disjoint i32 %66, 1024, !dbg !48
  %362 = lshr exact i32 %361, 2, !dbg !48
  %363 = and i32 %362, 508, !dbg !48
  %364 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %363, !dbg !48
  %365 = getelementptr inbounds float, ptr addrspace(3) %364, i32 %361, !dbg !48
  %366 = load <4 x i32>, ptr addrspace(3) %365, align 16, !dbg !48
  %367 = or disjoint i32 %66, 2048, !dbg !48
  %368 = lshr exact i32 %367, 2, !dbg !48
  %369 = and i32 %368, 764, !dbg !48
  %370 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %369, !dbg !48
  %371 = getelementptr inbounds float, ptr addrspace(3) %370, i32 %367, !dbg !48
  %372 = load <4 x i32>, ptr addrspace(3) %371, align 16, !dbg !48
  %373 = or disjoint i32 %66, 3072, !dbg !48
  %374 = lshr exact i32 %373, 2, !dbg !48
  %375 = and i32 %374, 1020, !dbg !48
  %376 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %375, !dbg !48
  %377 = getelementptr inbounds float, ptr addrspace(3) %376, i32 %373, !dbg !48
  %378 = load <4 x i32>, ptr addrspace(3) %377, align 16, !dbg !48
  %.extract = load i32, ptr addrspace(3) %360, align 16, !dbg !48
  %379 = getelementptr inbounds i8, ptr addrspace(3) %360, i32 4, !dbg !48
  %.extract20 = load i32, ptr addrspace(3) %379, align 4, !dbg !48
  %380 = getelementptr inbounds i8, ptr addrspace(3) %360, i32 8, !dbg !48
  %.extract21 = load i32, ptr addrspace(3) %380, align 8, !dbg !48
  %381 = getelementptr inbounds i8, ptr addrspace(3) %360, i32 12, !dbg !48
  %.extract22 = load i32, ptr addrspace(3) %381, align 4, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract20, i32 %.extract21, i32 %.extract22, ptr addrspace(1) %301, i1 %224) #4, !dbg !48
  %.extract23 = extractelement <4 x i32> %366, i64 0, !dbg !48
  %.extract24 = extractelement <4 x i32> %366, i64 1, !dbg !48
  %.extract25 = extractelement <4 x i32> %366, i64 2, !dbg !48
  %.extract26 = extractelement <4 x i32> %366, i64 3, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract23, i32 %.extract24, i32 %.extract25, i32 %.extract26, ptr addrspace(1) %303, i1 %223) #4, !dbg !48
  %.extract27 = extractelement <4 x i32> %372, i64 0, !dbg !48
  %.extract28 = extractelement <4 x i32> %372, i64 1, !dbg !48
  %.extract29 = extractelement <4 x i32> %372, i64 2, !dbg !48
  %.extract30 = extractelement <4 x i32> %372, i64 3, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract27, i32 %.extract28, i32 %.extract29, i32 %.extract30, ptr addrspace(1) %305, i1 %221) #4, !dbg !48
  %.extract31 = extractelement <4 x i32> %378, i64 0, !dbg !48
  %.extract32 = extractelement <4 x i32> %378, i64 1, !dbg !48
  %.extract33 = extractelement <4 x i32> %378, i64 2, !dbg !48
  %.extract34 = extractelement <4 x i32> %378, i64 3, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract31, i32 %.extract32, i32 %.extract33, i32 %.extract34, ptr addrspace(1) %307, i1 %219) #4, !dbg !48
  ret void, !dbg !49
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cvmth3ygrudsybzjvovx35umxdxag2qkqxc65wc4xawnxrgtzpmk.py", directory: "inductor_cache/vm")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_2, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_2, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_2", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 32, column: 39, scope: !7)
!20 = !DILocation(line: 32, column: 35, scope: !7)
!21 = !DILocation(line: 32, column: 30, scope: !7)
!22 = !DILocation(line: 32, column: 44, scope: !7)
!23 = !DILocation(line: 33, column: 30, scope: !7)
!24 = !DILocation(line: 33, column: 44, scope: !7)
!25 = !DILocation(line: 34, column: 30, scope: !7)
!26 = !DILocation(line: 34, column: 35, scope: !7)
!27 = !DILocation(line: 35, column: 30, scope: !7)
!28 = !DILocation(line: 35, column: 35, scope: !7)
!29 = !DILocation(line: 36, column: 31, scope: !7)
!30 = !DILocation(line: 36, column: 36, scope: !7)
!31 = !DILocation(line: 37, column: 31, scope: !7)
!32 = !DILocation(line: 37, column: 36, scope: !7)
!33 = !DILocation(line: 40, column: 18, scope: !7)
!34 = !DILocation(line: 41, column: 26, scope: !7)
!35 = !DILocation(line: 38, column: 18, scope: !7)
!36 = !DILocation(line: 31, column: 19, scope: !7)
!37 = !DILocation(line: 30, column: 19, scope: !7)
!38 = !DILocation(line: 43, column: 18, scope: !7)
!39 = !DILocation(line: 46, column: 19, scope: !7)
!40 = !DILocation(line: 47, column: 20, scope: !7)
!41 = !DILocation(line: 48, column: 20, scope: !7)
!42 = !DILocation(line: 49, column: 19, scope: !7)
!43 = !DILocation(line: 50, column: 35, scope: !7)
!44 = !DILocation(line: 50, column: 48, scope: !7)
!45 = !DILocation(line: 50, column: 30, scope: !7)
!46 = !DILocation(line: 50, column: 40, scope: !7)
!47 = !DILocation(line: 50, column: 25, scope: !7)
!48 = !DILocation(line: 50, column: 60, scope: !7)
!49 = !DILocation(line: 50, column: 4, scope: !7)
