; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused_leaky_relu_13(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %8 = shl i32 %7, 5, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = lshr i32 %9, 3, !dbg !12
  %11 = and i32 %10, 15, !dbg !12
  %12 = or disjoint i32 %11, 16, !dbg !12
  %13 = shl i32 %9, 2, !dbg !12
  %14 = and i32 %13, 28, !dbg !12
  %15 = or disjoint i32 %8, %11, !dbg !13
  %16 = or disjoint i32 %8, %12, !dbg !13
  %17 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %18 = shl i32 %17, 5, !dbg !15
  %19 = or disjoint i32 %18, %14, !dbg !16
  %20 = icmp slt i32 %19, 64, !dbg !17
  %21 = sdiv i32 %15, 256, !dbg !18
  %22 = sdiv i32 %16, 256, !dbg !18
  %23 = shl i32 %15, 6, !dbg !19
  %24 = shl i32 %16, 6, !dbg !19
  %25 = add i32 %19, %23, !dbg !20
  %26 = add i32 %19, %24, !dbg !20
  %27 = sext i32 %25 to i64, !dbg !21
  %28 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !21
  %29 = sext i32 %26 to i64, !dbg !21
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !21
  %31 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %28, i1 %20) #4, !dbg !22
  %32 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %30, i1 %20) #4, !dbg !22
  %33 = shl nsw i32 %21, 6, !dbg !23
  %34 = shl nsw i32 %22, 6, !dbg !23
  %35 = add i32 %33, %19, !dbg !24
  %36 = add i32 %34, %19, !dbg !24
  %37 = sext i32 %35 to i64, !dbg !25
  %38 = getelementptr float, ptr addrspace(1) %1, i64 %37, !dbg !25
  %39 = sext i32 %36 to i64, !dbg !25
  %40 = getelementptr float, ptr addrspace(1) %1, i64 %39, !dbg !25
  %41 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %38, i1 %20) #4, !dbg !26
  %42 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %40, i1 %20) #4, !dbg !26
  %43 = getelementptr float, ptr addrspace(1) %2, i64 %37, !dbg !27
  %44 = getelementptr float, ptr addrspace(1) %2, i64 %39, !dbg !27
  %45 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %43, i1 %20) #4, !dbg !28
  %46 = extractvalue { i32, i32, i32, i32 } %45, 0, !dbg !28
  %47 = extractvalue { i32, i32, i32, i32 } %45, 1, !dbg !28
  %48 = extractvalue { i32, i32, i32, i32 } %45, 2, !dbg !28
  %49 = extractvalue { i32, i32, i32, i32 } %45, 3, !dbg !28
  %50 = bitcast i32 %46 to float, !dbg !28
  %51 = bitcast i32 %47 to float, !dbg !28
  %52 = bitcast i32 %48 to float, !dbg !28
  %53 = bitcast i32 %49 to float, !dbg !28
  %54 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %44, i1 %20) #4, !dbg !28
  %55 = extractvalue { i32, i32, i32, i32 } %54, 0, !dbg !28
  %56 = extractvalue { i32, i32, i32, i32 } %54, 1, !dbg !28
  %57 = extractvalue { i32, i32, i32, i32 } %54, 2, !dbg !28
  %58 = extractvalue { i32, i32, i32, i32 } %54, 3, !dbg !28
  %59 = bitcast i32 %55 to float, !dbg !28
  %60 = bitcast i32 %56 to float, !dbg !28
  %61 = bitcast i32 %57 to float, !dbg !28
  %62 = bitcast i32 %58 to float, !dbg !28
  %63 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %50, float 2.560000e+02) #4, !dbg !29
  %64 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %51, float 2.560000e+02) #4, !dbg !29
  %65 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %52, float 2.560000e+02) #4, !dbg !29
  %66 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %53, float 2.560000e+02) #4, !dbg !29
  %67 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %59, float 2.560000e+02) #4, !dbg !29
  %68 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %60, float 2.560000e+02) #4, !dbg !29
  %69 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %61, float 2.560000e+02) #4, !dbg !29
  %70 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %62, float 2.560000e+02) #4, !dbg !29
  %71 = fadd float %63, 0x3EE4F8B580000000, !dbg !30
  %72 = fadd float %64, 0x3EE4F8B580000000, !dbg !30
  %73 = fadd float %65, 0x3EE4F8B580000000, !dbg !30
  %74 = fadd float %66, 0x3EE4F8B580000000, !dbg !30
  %75 = fadd float %67, 0x3EE4F8B580000000, !dbg !30
  %76 = fadd float %68, 0x3EE4F8B580000000, !dbg !30
  %77 = fadd float %69, 0x3EE4F8B580000000, !dbg !30
  %78 = fadd float %70, 0x3EE4F8B580000000, !dbg !30
  %79 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i = icmp eq i32 %79, 0, !dbg !31
  br i1 %.not.i, label %82, label %80, !dbg !31

80:                                               ; preds = %6
  %81 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %71), !dbg !31
  br label %__nv_rsqrtf.exit, !dbg !31

82:                                               ; preds = %6
  %83 = tail call float @llvm.nvvm.rsqrt.approx.f(float %71), !dbg !31
  br label %__nv_rsqrtf.exit, !dbg !31

__nv_rsqrtf.exit:                                 ; preds = %80, %82
  %.0.i = phi float [ %81, %80 ], [ %83, %82 ], !dbg !31
  %84 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i15 = icmp eq i32 %84, 0, !dbg !31
  br i1 %.not.i15, label %87, label %85, !dbg !31

85:                                               ; preds = %__nv_rsqrtf.exit
  %86 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %72), !dbg !31
  br label %__nv_rsqrtf.exit17, !dbg !31

87:                                               ; preds = %__nv_rsqrtf.exit
  %88 = tail call float @llvm.nvvm.rsqrt.approx.f(float %72), !dbg !31
  br label %__nv_rsqrtf.exit17, !dbg !31

__nv_rsqrtf.exit17:                               ; preds = %85, %87
  %.0.i16 = phi float [ %86, %85 ], [ %88, %87 ], !dbg !31
  %89 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i18 = icmp eq i32 %89, 0, !dbg !31
  br i1 %.not.i18, label %92, label %90, !dbg !31

90:                                               ; preds = %__nv_rsqrtf.exit17
  %91 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %73), !dbg !31
  br label %__nv_rsqrtf.exit20, !dbg !31

92:                                               ; preds = %__nv_rsqrtf.exit17
  %93 = tail call float @llvm.nvvm.rsqrt.approx.f(float %73), !dbg !31
  br label %__nv_rsqrtf.exit20, !dbg !31

__nv_rsqrtf.exit20:                               ; preds = %90, %92
  %.0.i19 = phi float [ %91, %90 ], [ %93, %92 ], !dbg !31
  %94 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i21 = icmp eq i32 %94, 0, !dbg !31
  br i1 %.not.i21, label %97, label %95, !dbg !31

95:                                               ; preds = %__nv_rsqrtf.exit20
  %96 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %74), !dbg !31
  br label %__nv_rsqrtf.exit23, !dbg !31

97:                                               ; preds = %__nv_rsqrtf.exit20
  %98 = tail call float @llvm.nvvm.rsqrt.approx.f(float %74), !dbg !31
  br label %__nv_rsqrtf.exit23, !dbg !31

__nv_rsqrtf.exit23:                               ; preds = %95, %97
  %.0.i22 = phi float [ %96, %95 ], [ %98, %97 ], !dbg !31
  %99 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i24 = icmp eq i32 %99, 0, !dbg !31
  br i1 %.not.i24, label %102, label %100, !dbg !31

100:                                              ; preds = %__nv_rsqrtf.exit23
  %101 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %75), !dbg !31
  br label %__nv_rsqrtf.exit26, !dbg !31

102:                                              ; preds = %__nv_rsqrtf.exit23
  %103 = tail call float @llvm.nvvm.rsqrt.approx.f(float %75), !dbg !31
  br label %__nv_rsqrtf.exit26, !dbg !31

__nv_rsqrtf.exit26:                               ; preds = %100, %102
  %.0.i25 = phi float [ %101, %100 ], [ %103, %102 ], !dbg !31
  %104 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i27 = icmp eq i32 %104, 0, !dbg !31
  br i1 %.not.i27, label %107, label %105, !dbg !31

105:                                              ; preds = %__nv_rsqrtf.exit26
  %106 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %76), !dbg !31
  br label %__nv_rsqrtf.exit29, !dbg !31

107:                                              ; preds = %__nv_rsqrtf.exit26
  %108 = tail call float @llvm.nvvm.rsqrt.approx.f(float %76), !dbg !31
  br label %__nv_rsqrtf.exit29, !dbg !31

__nv_rsqrtf.exit29:                               ; preds = %105, %107
  %.0.i28 = phi float [ %106, %105 ], [ %108, %107 ], !dbg !31
  %109 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i30 = icmp eq i32 %109, 0, !dbg !31
  br i1 %.not.i30, label %112, label %110, !dbg !31

110:                                              ; preds = %__nv_rsqrtf.exit29
  %111 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %77), !dbg !31
  br label %__nv_rsqrtf.exit32, !dbg !31

112:                                              ; preds = %__nv_rsqrtf.exit29
  %113 = tail call float @llvm.nvvm.rsqrt.approx.f(float %77), !dbg !31
  br label %__nv_rsqrtf.exit32, !dbg !31

__nv_rsqrtf.exit32:                               ; preds = %110, %112
  %.0.i31 = phi float [ %111, %110 ], [ %113, %112 ], !dbg !31
  %114 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !31
  %.not.i33 = icmp eq i32 %114, 0, !dbg !31
  br i1 %.not.i33, label %117, label %115, !dbg !31

115:                                              ; preds = %__nv_rsqrtf.exit32
  %116 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %78), !dbg !31
  br label %__nv_rsqrtf.exit35, !dbg !31

117:                                              ; preds = %__nv_rsqrtf.exit32
  %118 = tail call float @llvm.nvvm.rsqrt.approx.f(float %78), !dbg !31
  br label %__nv_rsqrtf.exit35, !dbg !31

__nv_rsqrtf.exit35:                               ; preds = %115, %117
  %.0.i34 = phi float [ %116, %115 ], [ %118, %117 ], !dbg !31
  %119 = extractvalue { i32, i32, i32, i32 } %32, 3, !dbg !22
  %120 = extractvalue { i32, i32, i32, i32 } %42, 3, !dbg !26
  %121 = extractvalue { i32, i32, i32, i32 } %32, 2, !dbg !22
  %122 = extractvalue { i32, i32, i32, i32 } %42, 2, !dbg !26
  %123 = extractvalue { i32, i32, i32, i32 } %32, 1, !dbg !22
  %124 = extractvalue { i32, i32, i32, i32 } %42, 1, !dbg !26
  %125 = extractvalue { i32, i32, i32, i32 } %32, 0, !dbg !22
  %126 = extractvalue { i32, i32, i32, i32 } %42, 0, !dbg !26
  %127 = extractvalue { i32, i32, i32, i32 } %31, 3, !dbg !22
  %128 = extractvalue { i32, i32, i32, i32 } %41, 3, !dbg !26
  %129 = extractvalue { i32, i32, i32, i32 } %31, 2, !dbg !22
  %130 = extractvalue { i32, i32, i32, i32 } %41, 2, !dbg !26
  %131 = extractvalue { i32, i32, i32, i32 } %31, 1, !dbg !22
  %132 = extractvalue { i32, i32, i32, i32 } %41, 1, !dbg !26
  %133 = extractvalue { i32, i32, i32, i32 } %31, 0, !dbg !22
  %134 = extractvalue { i32, i32, i32, i32 } %41, 0, !dbg !26
  %135 = or disjoint i32 %8, %14, !dbg !13
  %.frozen = freeze i32 %135, !dbg !18
  %136 = sdiv i32 %.frozen, 256, !dbg !18
  %137 = mul i32 %136, 256, !dbg !32
  %.decomposed = sub i32 %.frozen, %137, !dbg !32
  %138 = or disjoint i32 %18, %12, !dbg !16
  %139 = icmp slt i32 %138, 64, !dbg !17
  %140 = or disjoint i32 %18, %11, !dbg !16
  %141 = icmp slt i32 %140, 64, !dbg !17
  %142 = insertelement <8 x i32> poison, i32 %119, i64 0, !dbg !22
  %143 = insertelement <8 x i32> %142, i32 %121, i64 1, !dbg !22
  %144 = insertelement <8 x i32> %143, i32 %123, i64 2, !dbg !22
  %145 = insertelement <8 x i32> %144, i32 %125, i64 3, !dbg !22
  %146 = insertelement <8 x i32> %145, i32 %127, i64 4, !dbg !22
  %147 = insertelement <8 x i32> %146, i32 %129, i64 5, !dbg !22
  %148 = insertelement <8 x i32> %147, i32 %131, i64 6, !dbg !22
  %149 = insertelement <8 x i32> %148, i32 %133, i64 7, !dbg !22
  %150 = bitcast <8 x i32> %149 to <8 x float>, !dbg !22
  %151 = insertelement <8 x i32> poison, i32 %120, i64 0, !dbg !26
  %152 = insertelement <8 x i32> %151, i32 %122, i64 1, !dbg !26
  %153 = insertelement <8 x i32> %152, i32 %124, i64 2, !dbg !26
  %154 = insertelement <8 x i32> %153, i32 %126, i64 3, !dbg !26
  %155 = insertelement <8 x i32> %154, i32 %128, i64 4, !dbg !26
  %156 = insertelement <8 x i32> %155, i32 %130, i64 5, !dbg !26
  %157 = insertelement <8 x i32> %156, i32 %132, i64 6, !dbg !26
  %158 = insertelement <8 x i32> %157, i32 %134, i64 7, !dbg !26
  %159 = bitcast <8 x i32> %158 to <8 x float>, !dbg !26
  %160 = fsub <8 x float> %150, %159, !dbg !33
  %161 = insertelement <8 x float> poison, float %.0.i34, i64 0, !dbg !34
  %162 = insertelement <8 x float> %161, float %.0.i31, i64 1, !dbg !34
  %163 = insertelement <8 x float> %162, float %.0.i28, i64 2, !dbg !34
  %164 = insertelement <8 x float> %163, float %.0.i25, i64 3, !dbg !34
  %165 = insertelement <8 x float> %164, float %.0.i22, i64 4, !dbg !34
  %166 = insertelement <8 x float> %165, float %.0.i19, i64 5, !dbg !34
  %167 = insertelement <8 x float> %166, float %.0.i16, i64 6, !dbg !34
  %168 = insertelement <8 x float> %167, float %.0.i, i64 7, !dbg !34
  %169 = fmul <8 x float> %160, %168, !dbg !34
  %170 = fcmp ogt <8 x float> %169, zeroinitializer, !dbg !35
  %171 = extractelement <8 x float> %169, i64 7, !dbg !36
  %172 = fmul float %171, 0x3FB99999A0000000, !dbg !37
  %173 = extractelement <8 x float> %169, i64 6, !dbg !36
  %174 = fmul float %173, 0x3FB99999A0000000, !dbg !37
  %175 = extractelement <8 x float> %169, i64 5, !dbg !36
  %176 = fmul float %175, 0x3FB99999A0000000, !dbg !37
  %177 = extractelement <8 x float> %169, i64 4, !dbg !36
  %178 = fmul float %177, 0x3FB99999A0000000, !dbg !37
  %179 = extractelement <8 x float> %169, i64 3, !dbg !36
  %180 = fmul float %179, 0x3FB99999A0000000, !dbg !37
  %181 = extractelement <8 x float> %169, i64 2, !dbg !36
  %182 = fmul float %181, 0x3FB99999A0000000, !dbg !37
  %183 = extractelement <8 x float> %169, i64 1, !dbg !36
  %184 = fmul float %183, 0x3FB99999A0000000, !dbg !37
  %185 = extractelement <8 x float> %169, i64 0, !dbg !36
  %186 = fmul float %185, 0x3FB99999A0000000, !dbg !37
  %187 = extractelement <8 x i1> %170, i64 7, !dbg !36
  %188 = select i1 %187, float %171, float %172, !dbg !36
  %189 = extractelement <8 x i1> %170, i64 6, !dbg !36
  %190 = select i1 %189, float %173, float %174, !dbg !36
  %191 = extractelement <8 x i1> %170, i64 5, !dbg !36
  %192 = select i1 %191, float %175, float %176, !dbg !36
  %193 = extractelement <8 x i1> %170, i64 4, !dbg !36
  %194 = select i1 %193, float %177, float %178, !dbg !36
  %195 = extractelement <8 x i1> %170, i64 3, !dbg !36
  %196 = select i1 %195, float %179, float %180, !dbg !36
  %197 = extractelement <8 x i1> %170, i64 2, !dbg !36
  %198 = select i1 %197, float %181, float %182, !dbg !36
  %199 = extractelement <8 x i1> %170, i64 1, !dbg !36
  %200 = select i1 %199, float %183, float %184, !dbg !36
  %201 = extractelement <8 x i1> %170, i64 0, !dbg !36
  %202 = select i1 %201, float %185, float %186, !dbg !36
  %203 = shl i32 %140, 8, !dbg !38
  %204 = shl i32 %138, 8, !dbg !38
  %205 = shl i32 %136, 14, !dbg !39
  %206 = add i32 %205, %.decomposed, !dbg !40
  %207 = add i32 %206, %203, !dbg !41
  %208 = add i32 %206, %204, !dbg !41
  %209 = sext i32 %207 to i64, !dbg !42
  %210 = getelementptr float, ptr addrspace(1) %3, i64 %209, !dbg !42
  %211 = sext i32 %208 to i64, !dbg !42
  %212 = getelementptr float, ptr addrspace(1) %3, i64 %211, !dbg !42
  %213 = shl i32 %9, 7, !dbg !43
  %214 = and i32 %213, 896, !dbg !43
  %215 = or disjoint i32 %214, %11, !dbg !43
  %216 = and i32 %13, 508, !dbg !43
  %217 = lshr exact i32 %214, 3, !dbg !43
  %218 = or disjoint i32 %217, %215, !dbg !43
  %219 = zext nneg i32 %218 to i64, !dbg !43
  %220 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %219, !dbg !43
  %221 = bitcast float %188 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %220, <1 x i32> %221, i1 true) #4, !dbg !43
  %222 = or disjoint i32 %215, 32, !dbg !43
  %223 = lshr i32 %222, 3, !dbg !43
  %224 = and i32 %223, 116, !dbg !43
  %225 = add nuw nsw i32 %224, %222, !dbg !43
  %226 = zext nneg i32 %225 to i64, !dbg !43
  %227 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %226, !dbg !43
  %228 = bitcast float %190 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %227, <1 x i32> %228, i1 true) #4, !dbg !43
  %229 = or disjoint i32 %215, 64, !dbg !43
  %230 = lshr i32 %229, 3, !dbg !43
  %231 = and i32 %230, 120, !dbg !43
  %232 = add nuw nsw i32 %231, %229, !dbg !43
  %233 = zext nneg i32 %232 to i64, !dbg !43
  %234 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %233, !dbg !43
  %235 = bitcast float %192 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %234, <1 x i32> %235, i1 true) #4, !dbg !43
  %236 = or disjoint i32 %215, 96, !dbg !43
  %237 = lshr i32 %236, 3, !dbg !43
  %238 = and i32 %237, 124, !dbg !43
  %239 = add nuw nsw i32 %238, %236, !dbg !43
  %240 = zext nneg i32 %239 to i64, !dbg !43
  %241 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %240, !dbg !43
  %242 = bitcast float %194 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %241, <1 x i32> %242, i1 true) #4, !dbg !43
  %243 = or disjoint i32 %215, 16, !dbg !43
  %244 = add nuw nsw i32 %243, %217, !dbg !43
  %245 = zext nneg i32 %244 to i64, !dbg !43
  %246 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %245, !dbg !43
  %247 = bitcast float %196 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %246, <1 x i32> %247, i1 true) #4, !dbg !43
  %248 = or disjoint i32 %215, 48, !dbg !43
  %249 = lshr i32 %248, 3, !dbg !43
  %250 = and i32 %249, 116, !dbg !43
  %251 = add nuw nsw i32 %250, %248, !dbg !43
  %252 = zext nneg i32 %251 to i64, !dbg !43
  %253 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %252, !dbg !43
  %254 = bitcast float %198 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %253, <1 x i32> %254, i1 true) #4, !dbg !43
  %255 = or disjoint i32 %215, 80, !dbg !43
  %256 = lshr i32 %255, 3, !dbg !43
  %257 = and i32 %256, 120, !dbg !43
  %258 = add nuw nsw i32 %257, %255, !dbg !43
  %259 = zext nneg i32 %258 to i64, !dbg !43
  %260 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %259, !dbg !43
  %261 = bitcast float %200 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %260, <1 x i32> %261, i1 true) #4, !dbg !43
  %262 = or disjoint i32 %215, 112, !dbg !43
  %263 = lshr i32 %262, 3, !dbg !43
  %264 = and i32 %263, 124, !dbg !43
  %265 = add nuw nsw i32 %264, %262, !dbg !43
  %266 = zext nneg i32 %265 to i64, !dbg !43
  %267 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %266, !dbg !43
  %268 = bitcast float %202 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %267, <1 x i32> %268, i1 true) #4, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %269 = lshr i32 %13, 3, !dbg !43
  %270 = and i32 %269, 60, !dbg !43
  %271 = add nuw nsw i32 %270, %216, !dbg !43
  %272 = zext nneg i32 %271 to i64, !dbg !43
  %273 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %272, !dbg !43
  %274 = or disjoint i32 %216, 512, !dbg !43
  %275 = lshr i32 %274, 3, !dbg !43
  %276 = and i32 %275, 124, !dbg !43
  %277 = add nuw nsw i32 %276, %274, !dbg !43
  %278 = zext nneg i32 %277 to i64, !dbg !43
  %279 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %278, !dbg !43
  %280 = load <4 x i32>, ptr addrspace(3) %279, align 16, !dbg !43
  %.extract = load i32, ptr addrspace(3) %273, align 16, !dbg !43
  %281 = getelementptr inbounds i8, ptr addrspace(3) %273, i64 4, !dbg !43
  %.extract8 = load i32, ptr addrspace(3) %281, align 4, !dbg !43
  %282 = getelementptr inbounds i8, ptr addrspace(3) %273, i64 8, !dbg !43
  %.extract9 = load i32, ptr addrspace(3) %282, align 8, !dbg !43
  %283 = getelementptr inbounds i8, ptr addrspace(3) %273, i64 12, !dbg !43
  %.extract10 = load i32, ptr addrspace(3) %283, align 4, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %210, i1 %141) #4, !dbg !43
  %.extract11 = extractelement <4 x i32> %280, i64 0, !dbg !43
  %.extract12 = extractelement <4 x i32> %280, i64 1, !dbg !43
  %.extract13 = extractelement <4 x i32> %280, i64 2, !dbg !43
  %.extract14 = extractelement <4 x i32> %280, i64 3, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %212, i1 %139) #4, !dbg !43
  ret void, !dbg !44
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "czgyn7uzcuuf5e2cfubq7xjjgu5vtgvtsb3z53cijxhjt24b4mvi.py", directory: "inductor_cache/zg")
!4 = !{ptr @triton_poi_fused_leaky_relu_13, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_leaky_relu_13, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_leaky_relu_13", linkageName: "triton_poi_fused_leaky_relu_13", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 23, scope: !7)
!17 = !DILocation(line: 27, column: 21, scope: !7)
!18 = !DILocation(line: 30, column: 19, scope: !7)
!19 = !DILocation(line: 32, column: 38, scope: !7)
!20 = !DILocation(line: 32, column: 35, scope: !7)
!21 = !DILocation(line: 32, column: 30, scope: !7)
!22 = !DILocation(line: 32, column: 43, scope: !7)
!23 = !DILocation(line: 33, column: 38, scope: !7)
!24 = !DILocation(line: 33, column: 35, scope: !7)
!25 = !DILocation(line: 33, column: 30, scope: !7)
!26 = !DILocation(line: 33, column: 43, scope: !7)
!27 = !DILocation(line: 34, column: 30, scope: !7)
!28 = !DILocation(line: 34, column: 43, scope: !7)
!29 = !DILocation(line: 37, column: 18, scope: !7)
!30 = !DILocation(line: 39, column: 18, scope: !7)
!31 = !DILocation(line: 40, column: 27, scope: !7)
!32 = !DILocation(line: 31, column: 19, scope: !7)
!33 = !DILocation(line: 35, column: 18, scope: !7)
!34 = !DILocation(line: 41, column: 18, scope: !7)
!35 = !DILocation(line: 43, column: 19, scope: !7)
!36 = !DILocation(line: 46, column: 34, scope: !7)
!37 = !DILocation(line: 45, column: 19, scope: !7)
!38 = !DILocation(line: 47, column: 34, scope: !7)
!39 = !DILocation(line: 47, column: 45, scope: !7)
!40 = !DILocation(line: 47, column: 30, scope: !7)
!41 = !DILocation(line: 47, column: 39, scope: !7)
!42 = !DILocation(line: 47, column: 25, scope: !7)
!43 = !DILocation(line: 47, column: 57, scope: !7)
!44 = !DILocation(line: 47, column: 4, scope: !7)
