; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_max_pool2d_with_indices_23(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %6 = shl i32 %5, 9, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 2, !dbg !12
  %9 = and i32 %8, 508, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = add i32 %10, -1728, !dbg !14
  %12 = sext i32 %11 to i64, !dbg !15
  %13 = getelementptr float, ptr addrspace(1) %0, i64 %12, !dbg !15
  %14 = add i32 %10, -1536, !dbg !16
  %15 = sext i32 %14 to i64, !dbg !17
  %16 = getelementptr float, ptr addrspace(1) %0, i64 %15, !dbg !17
  %17 = add i32 %10, -1344, !dbg !18
  %18 = sext i32 %17 to i64, !dbg !19
  %19 = getelementptr float, ptr addrspace(1) %0, i64 %18, !dbg !19
  %20 = insertelement <2 x i32> poison, i32 %10, i64 0, !dbg !20
  %21 = shufflevector <2 x i32> %20, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !20
  %22 = sdiv <2 x i32> %21, <i32 1536, i32 192>, !dbg !20
  %23 = srem <2 x i32> %22, splat (i32 8), !dbg !21
  %24 = extractelement <2 x i32> %23, i64 0, !dbg !22
  %25 = icmp sgt i32 %24, 0, !dbg !23
  %26 = icmp sgt <2 x i32> %23, <i32 -1, i32 0>, !dbg !24
  %27 = extractelement <2 x i1> %26, i64 1, !dbg !25
  %28 = and i1 %25, %27, !dbg !25
  %29 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %13, i1 %28, i32 -8388608, i1 %28, i32 -8388608, i1 %28, i32 -8388608, i1 %28, i32 -8388608, i1 %28) #1, !dbg !26
  %30 = extractvalue { i32, i32, i32, i32 } %29, 0, !dbg !26
  %31 = extractvalue { i32, i32, i32, i32 } %29, 1, !dbg !26
  %32 = extractvalue { i32, i32, i32, i32 } %29, 2, !dbg !26
  %33 = extractvalue { i32, i32, i32, i32 } %29, 3, !dbg !26
  %34 = extractelement <2 x i32> %23, i64 1, !dbg !27
  %35 = icmp sgt i32 %34, -1, !dbg !28
  %36 = and i1 %25, %35, !dbg !29
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %16, i1 %36, i32 -8388608, i1 %36, i32 -8388608, i1 %36, i32 -8388608, i1 %36, i32 -8388608, i1 %36) #1, !dbg !30
  %38 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !30
  %39 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !30
  %40 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !30
  %41 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !30
  %42 = add nsw i32 %34, 1, !dbg !31
  %43 = icmp ult i32 %42, 8, !dbg !31
  %44 = and i1 %25, %43, !dbg !32
  %45 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %19, i1 %44, i32 -8388608, i1 %44, i32 -8388608, i1 %44, i32 -8388608, i1 %44, i32 -8388608, i1 %44) #1, !dbg !33
  %46 = extractvalue { i32, i32, i32, i32 } %45, 0, !dbg !33
  %47 = extractvalue { i32, i32, i32, i32 } %45, 1, !dbg !33
  %48 = extractvalue { i32, i32, i32, i32 } %45, 2, !dbg !33
  %49 = extractvalue { i32, i32, i32, i32 } %45, 3, !dbg !33
  %50 = extractelement <2 x i1> %26, i64 0, !dbg !34
  %51 = and i1 %50, %27, !dbg !34
  %52 = add i32 %10, -192, !dbg !35
  %53 = sext i32 %52 to i64, !dbg !36
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !36
  %55 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %54, i1 %51, i32 -8388608, i1 %51, i32 -8388608, i1 %51, i32 -8388608, i1 %51, i32 -8388608, i1 %51) #1, !dbg !37
  %56 = extractvalue { i32, i32, i32, i32 } %55, 0, !dbg !37
  %57 = extractvalue { i32, i32, i32, i32 } %55, 1, !dbg !37
  %58 = extractvalue { i32, i32, i32, i32 } %55, 2, !dbg !37
  %59 = extractvalue { i32, i32, i32, i32 } %55, 3, !dbg !37
  %60 = or i32 %24, %34, !dbg !27
  %61 = icmp sgt i32 %60, -1, !dbg !27
  %62 = sext i32 %10 to i64, !dbg !38
  %63 = getelementptr float, ptr addrspace(1) %0, i64 %62, !dbg !38
  %64 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %63, i1 %61, i32 -8388608, i1 %61, i32 -8388608, i1 %61, i32 -8388608, i1 %61, i32 -8388608, i1 %61) #1, !dbg !39
  %65 = extractvalue { i32, i32, i32, i32 } %64, 0, !dbg !39
  %66 = extractvalue { i32, i32, i32, i32 } %64, 1, !dbg !39
  %67 = extractvalue { i32, i32, i32, i32 } %64, 2, !dbg !39
  %68 = extractvalue { i32, i32, i32, i32 } %64, 3, !dbg !39
  %69 = and i1 %50, %43, !dbg !40
  %70 = add i32 %10, 192, !dbg !41
  %71 = sext i32 %70 to i64, !dbg !42
  %72 = getelementptr float, ptr addrspace(1) %0, i64 %71, !dbg !42
  %73 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %72, i1 %69, i32 -8388608, i1 %69, i32 -8388608, i1 %69, i32 -8388608, i1 %69, i32 -8388608, i1 %69) #1, !dbg !43
  %74 = extractvalue { i32, i32, i32, i32 } %73, 0, !dbg !43
  %75 = extractvalue { i32, i32, i32, i32 } %73, 1, !dbg !43
  %76 = extractvalue { i32, i32, i32, i32 } %73, 2, !dbg !43
  %77 = extractvalue { i32, i32, i32, i32 } %73, 3, !dbg !43
  %78 = add nsw i32 %24, 1, !dbg !22
  %79 = icmp ult i32 %78, 8, !dbg !22
  %80 = and i1 %27, %79, !dbg !44
  %81 = add i32 %10, 1344, !dbg !45
  %82 = sext i32 %81 to i64, !dbg !46
  %83 = getelementptr float, ptr addrspace(1) %0, i64 %82, !dbg !46
  %84 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %83, i1 %80, i32 -8388608, i1 %80, i32 -8388608, i1 %80, i32 -8388608, i1 %80, i32 -8388608, i1 %80) #1, !dbg !47
  %85 = extractvalue { i32, i32, i32, i32 } %84, 0, !dbg !47
  %86 = extractvalue { i32, i32, i32, i32 } %84, 1, !dbg !47
  %87 = extractvalue { i32, i32, i32, i32 } %84, 2, !dbg !47
  %88 = extractvalue { i32, i32, i32, i32 } %84, 3, !dbg !47
  %89 = and i1 %35, %79, !dbg !48
  %90 = add i32 %10, 1536, !dbg !49
  %91 = sext i32 %90 to i64, !dbg !50
  %92 = getelementptr float, ptr addrspace(1) %0, i64 %91, !dbg !50
  %93 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %92, i1 %89, i32 -8388608, i1 %89, i32 -8388608, i1 %89, i32 -8388608, i1 %89, i32 -8388608, i1 %89) #1, !dbg !51
  %94 = extractvalue { i32, i32, i32, i32 } %93, 0, !dbg !51
  %95 = extractvalue { i32, i32, i32, i32 } %93, 1, !dbg !51
  %96 = extractvalue { i32, i32, i32, i32 } %93, 2, !dbg !51
  %97 = extractvalue { i32, i32, i32, i32 } %93, 3, !dbg !51
  %98 = or i32 %78, %42, !dbg !52
  %99 = icmp ult i32 %98, 8, !dbg !52
  %100 = add i32 %10, 1728, !dbg !53
  %101 = sext i32 %100 to i64, !dbg !54
  %102 = getelementptr float, ptr addrspace(1) %0, i64 %101, !dbg !54
  %103 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %102, i1 %99, i32 -8388608, i1 %99, i32 -8388608, i1 %99, i32 -8388608, i1 %99, i32 -8388608, i1 %99) #1, !dbg !55
  %104 = extractvalue { i32, i32, i32, i32 } %103, 0, !dbg !55
  %105 = extractvalue { i32, i32, i32, i32 } %103, 1, !dbg !55
  %106 = extractvalue { i32, i32, i32, i32 } %103, 2, !dbg !55
  %107 = extractvalue { i32, i32, i32, i32 } %103, 3, !dbg !55
  %108 = insertelement <4 x i32> poison, i32 %30, i64 0, !dbg !26
  %109 = insertelement <4 x i32> %108, i32 %31, i64 1, !dbg !26
  %110 = insertelement <4 x i32> %109, i32 %32, i64 2, !dbg !26
  %111 = insertelement <4 x i32> %110, i32 %33, i64 3, !dbg !26
  %112 = bitcast <4 x i32> %111 to <4 x float>, !dbg !26
  %113 = insertelement <4 x i32> poison, i32 %38, i64 0, !dbg !30
  %114 = insertelement <4 x i32> %113, i32 %39, i64 1, !dbg !30
  %115 = insertelement <4 x i32> %114, i32 %40, i64 2, !dbg !30
  %116 = insertelement <4 x i32> %115, i32 %41, i64 3, !dbg !30
  %117 = bitcast <4 x i32> %116 to <4 x float>, !dbg !30
  %118 = fcmp ogt <4 x float> %117, %112, !dbg !56
  %119 = fcmp uno <4 x float> %117, zeroinitializer, !dbg !60
  %120 = or <4 x i1> %118, %119, !dbg !61
  %.v = select <4 x i1> %120, <4 x i32> %116, <4 x i32> %111, !dbg !62
  %121 = bitcast <4 x i32> %.v to <4 x float>, !dbg !62
  %122 = insertelement <4 x i32> poison, i32 %46, i64 0, !dbg !33
  %123 = insertelement <4 x i32> %122, i32 %47, i64 1, !dbg !33
  %124 = insertelement <4 x i32> %123, i32 %48, i64 2, !dbg !33
  %125 = insertelement <4 x i32> %124, i32 %49, i64 3, !dbg !33
  %126 = bitcast <4 x i32> %125 to <4 x float>, !dbg !33
  %127 = fcmp olt <4 x float> %121, %126, !dbg !63
  %128 = fcmp uno <4 x float> %126, zeroinitializer, !dbg !65
  %129 = or <4 x i1> %128, %127, !dbg !66
  %.v1 = select <4 x i1> %129, <4 x i32> %125, <4 x i32> %.v, !dbg !67
  %130 = bitcast <4 x i32> %.v1 to <4 x float>, !dbg !67
  %131 = insertelement <4 x i32> poison, i32 %56, i64 0, !dbg !37
  %132 = insertelement <4 x i32> %131, i32 %57, i64 1, !dbg !37
  %133 = insertelement <4 x i32> %132, i32 %58, i64 2, !dbg !37
  %134 = insertelement <4 x i32> %133, i32 %59, i64 3, !dbg !37
  %135 = bitcast <4 x i32> %134 to <4 x float>, !dbg !37
  %136 = fcmp olt <4 x float> %130, %135, !dbg !68
  %137 = fcmp uno <4 x float> %135, zeroinitializer, !dbg !70
  %138 = or <4 x i1> %137, %136, !dbg !71
  %.v2 = select <4 x i1> %138, <4 x i32> %134, <4 x i32> %.v1, !dbg !72
  %139 = bitcast <4 x i32> %.v2 to <4 x float>, !dbg !72
  %140 = insertelement <4 x i32> poison, i32 %65, i64 0, !dbg !39
  %141 = insertelement <4 x i32> %140, i32 %66, i64 1, !dbg !39
  %142 = insertelement <4 x i32> %141, i32 %67, i64 2, !dbg !39
  %143 = insertelement <4 x i32> %142, i32 %68, i64 3, !dbg !39
  %144 = bitcast <4 x i32> %143 to <4 x float>, !dbg !39
  %145 = fcmp olt <4 x float> %139, %144, !dbg !73
  %146 = fcmp uno <4 x float> %144, zeroinitializer, !dbg !75
  %147 = or <4 x i1> %146, %145, !dbg !76
  %.v3 = select <4 x i1> %147, <4 x i32> %143, <4 x i32> %.v2, !dbg !77
  %148 = bitcast <4 x i32> %.v3 to <4 x float>, !dbg !77
  %149 = insertelement <4 x i32> poison, i32 %74, i64 0, !dbg !43
  %150 = insertelement <4 x i32> %149, i32 %75, i64 1, !dbg !43
  %151 = insertelement <4 x i32> %150, i32 %76, i64 2, !dbg !43
  %152 = insertelement <4 x i32> %151, i32 %77, i64 3, !dbg !43
  %153 = bitcast <4 x i32> %152 to <4 x float>, !dbg !43
  %154 = fcmp olt <4 x float> %148, %153, !dbg !78
  %155 = fcmp uno <4 x float> %153, zeroinitializer, !dbg !80
  %156 = or <4 x i1> %155, %154, !dbg !81
  %.v4 = select <4 x i1> %156, <4 x i32> %152, <4 x i32> %.v3, !dbg !82
  %157 = bitcast <4 x i32> %.v4 to <4 x float>, !dbg !82
  %158 = insertelement <4 x i32> poison, i32 %85, i64 0, !dbg !47
  %159 = insertelement <4 x i32> %158, i32 %86, i64 1, !dbg !47
  %160 = insertelement <4 x i32> %159, i32 %87, i64 2, !dbg !47
  %161 = insertelement <4 x i32> %160, i32 %88, i64 3, !dbg !47
  %162 = bitcast <4 x i32> %161 to <4 x float>, !dbg !47
  %163 = fcmp olt <4 x float> %157, %162, !dbg !83
  %164 = fcmp uno <4 x float> %162, zeroinitializer, !dbg !85
  %165 = or <4 x i1> %164, %163, !dbg !86
  %.v5 = select <4 x i1> %165, <4 x i32> %161, <4 x i32> %.v4, !dbg !87
  %166 = bitcast <4 x i32> %.v5 to <4 x float>, !dbg !87
  %167 = insertelement <4 x i32> poison, i32 %94, i64 0, !dbg !51
  %168 = insertelement <4 x i32> %167, i32 %95, i64 1, !dbg !51
  %169 = insertelement <4 x i32> %168, i32 %96, i64 2, !dbg !51
  %170 = insertelement <4 x i32> %169, i32 %97, i64 3, !dbg !51
  %171 = bitcast <4 x i32> %170 to <4 x float>, !dbg !51
  %172 = fcmp olt <4 x float> %166, %171, !dbg !88
  %173 = fcmp uno <4 x float> %171, zeroinitializer, !dbg !90
  %174 = or <4 x i1> %173, %172, !dbg !91
  %.v6 = select <4 x i1> %174, <4 x i32> %170, <4 x i32> %.v5, !dbg !92
  %175 = bitcast <4 x i32> %.v6 to <4 x float>, !dbg !92
  %176 = insertelement <4 x i32> poison, i32 %104, i64 0, !dbg !55
  %177 = insertelement <4 x i32> %176, i32 %105, i64 1, !dbg !55
  %178 = insertelement <4 x i32> %177, i32 %106, i64 2, !dbg !55
  %179 = insertelement <4 x i32> %178, i32 %107, i64 3, !dbg !55
  %180 = bitcast <4 x i32> %179 to <4 x float>, !dbg !55
  %181 = fcmp olt <4 x float> %175, %180, !dbg !93
  %182 = fcmp uno <4 x float> %180, zeroinitializer, !dbg !95
  %183 = or <4 x i1> %182, %181, !dbg !96
  %184 = extractelement <4 x i1> %183, i64 0, !dbg !96
  %185 = or <4 x i1> %182, %181, !dbg !96
  %186 = extractelement <4 x i1> %185, i64 1, !dbg !96
  %187 = or <4 x i1> %182, %181, !dbg !96
  %188 = extractelement <4 x i1> %187, i64 2, !dbg !96
  %189 = or <4 x i1> %182, %181, !dbg !96
  %190 = extractelement <4 x i1> %189, i64 3, !dbg !96
  %191 = zext <4 x i1> %118 to <4 x i8>, !dbg !97
  %192 = select <4 x i1> %127, <4 x i8> splat (i8 2), <4 x i8> %191, !dbg !98
  %193 = select <4 x i1> %136, <4 x i8> splat (i8 3), <4 x i8> %192, !dbg !99
  %194 = select <4 x i1> %145, <4 x i8> splat (i8 4), <4 x i8> %193, !dbg !100
  %195 = select <4 x i1> %154, <4 x i8> splat (i8 5), <4 x i8> %194, !dbg !101
  %196 = select <4 x i1> %163, <4 x i8> splat (i8 6), <4 x i8> %195, !dbg !102
  %197 = select <4 x i1> %172, <4 x i8> splat (i8 7), <4 x i8> %196, !dbg !103
  %198 = select <4 x i1> %181, <4 x i8> splat (i8 8), <4 x i8> %197, !dbg !104
  %199 = getelementptr float, ptr addrspace(1) %1, i64 %62, !dbg !105
  %200 = extractelement <4 x i32> %.v6, i64 0, !dbg !106
  %201 = select i1 %184, i32 %104, i32 %200, !dbg !107
  %202 = extractelement <4 x i32> %.v6, i64 1, !dbg !106
  %203 = select i1 %186, i32 %105, i32 %202, !dbg !107
  %204 = extractelement <4 x i32> %.v6, i64 2, !dbg !106
  %205 = select i1 %188, i32 %106, i32 %204, !dbg !107
  %206 = extractelement <4 x i32> %.v6, i64 3, !dbg !106
  %207 = select i1 %190, i32 %107, i32 %206, !dbg !107
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %201, i32 %203, i32 %205, i32 %207, ptr addrspace(1) %199, i1 true) #1, !dbg !106
  %208 = getelementptr i8, ptr addrspace(1) %2, i64 %62, !dbg !108
  %209 = bitcast <4 x i8> %198 to i32, !dbg !109
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %209, ptr addrspace(1) %208, i1 true) #1, !dbg !109
  ret void, !dbg !110
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c7r3gerx6lcp53566chrzzueitoicxtyypmjcd6c7crvrs5remhy.py", directory: "inductor_cache/7r")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_23, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_23, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_23", linkageName: "triton_poi_fused_max_pool2d_with_indices_23", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 38, column: 41, scope: !7)
!15 = !DILocation(line: 38, column: 31, scope: !7)
!16 = !DILocation(line: 44, column: 41, scope: !7)
!17 = !DILocation(line: 44, column: 31, scope: !7)
!18 = !DILocation(line: 51, column: 41, scope: !7)
!19 = !DILocation(line: 51, column: 31, scope: !7)
!20 = !DILocation(line: 24, column: 21, scope: !7)
!21 = !DILocation(line: 24, column: 29, scope: !7)
!22 = !DILocation(line: 69, column: 20, scope: !7)
!23 = !DILocation(line: 29, column: 19, scope: !7)
!24 = !DILocation(line: 54, column: 21, scope: !7)
!25 = !DILocation(line: 37, column: 19, scope: !7)
!26 = !DILocation(line: 38, column: 46, scope: !7)
!27 = !DILocation(line: 60, column: 20, scope: !7)
!28 = !DILocation(line: 40, column: 21, scope: !7)
!29 = !DILocation(line: 43, column: 19, scope: !7)
!30 = !DILocation(line: 44, column: 46, scope: !7)
!31 = !DILocation(line: 49, column: 20, scope: !7)
!32 = !DILocation(line: 50, column: 19, scope: !7)
!33 = !DILocation(line: 51, column: 46, scope: !7)
!34 = !DILocation(line: 57, column: 20, scope: !7)
!35 = !DILocation(line: 58, column: 40, scope: !7)
!36 = !DILocation(line: 58, column: 31, scope: !7)
!37 = !DILocation(line: 58, column: 45, scope: !7)
!38 = !DILocation(line: 61, column: 31, scope: !7)
!39 = !DILocation(line: 61, column: 36, scope: !7)
!40 = !DILocation(line: 63, column: 20, scope: !7)
!41 = !DILocation(line: 64, column: 37, scope: !7)
!42 = !DILocation(line: 64, column: 31, scope: !7)
!43 = !DILocation(line: 64, column: 42, scope: !7)
!44 = !DILocation(line: 70, column: 20, scope: !7)
!45 = !DILocation(line: 71, column: 38, scope: !7)
!46 = !DILocation(line: 71, column: 31, scope: !7)
!47 = !DILocation(line: 71, column: 43, scope: !7)
!48 = !DILocation(line: 73, column: 20, scope: !7)
!49 = !DILocation(line: 74, column: 38, scope: !7)
!50 = !DILocation(line: 74, column: 31, scope: !7)
!51 = !DILocation(line: 74, column: 43, scope: !7)
!52 = !DILocation(line: 76, column: 20, scope: !7)
!53 = !DILocation(line: 77, column: 38, scope: !7)
!54 = !DILocation(line: 77, column: 31, scope: !7)
!55 = !DILocation(line: 77, column: 43, scope: !7)
!56 = !DILocation(line: 118, column: 15, scope: !57, inlinedAt: !59)
!57 = distinct !DILexicalBlockFile(scope: !7, file: !58, discriminator: 0)
!58 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!59 = !DILocation(line: 45, column: 42, scope: !7)
!60 = !DILocation(line: 120, column: 21, scope: !57, inlinedAt: !59)
!61 = !DILocation(line: 120, column: 16, scope: !57, inlinedAt: !59)
!62 = !DILocation(line: 121, column: 29, scope: !57, inlinedAt: !59)
!63 = !DILocation(line: 118, column: 15, scope: !57, inlinedAt: !64)
!64 = !DILocation(line: 52, column: 42, scope: !7)
!65 = !DILocation(line: 120, column: 21, scope: !57, inlinedAt: !64)
!66 = !DILocation(line: 120, column: 16, scope: !57, inlinedAt: !64)
!67 = !DILocation(line: 121, column: 29, scope: !57, inlinedAt: !64)
!68 = !DILocation(line: 118, column: 15, scope: !57, inlinedAt: !69)
!69 = !DILocation(line: 59, column: 42, scope: !7)
!70 = !DILocation(line: 120, column: 21, scope: !57, inlinedAt: !69)
!71 = !DILocation(line: 120, column: 16, scope: !57, inlinedAt: !69)
!72 = !DILocation(line: 121, column: 29, scope: !57, inlinedAt: !69)
!73 = !DILocation(line: 118, column: 15, scope: !57, inlinedAt: !74)
!74 = !DILocation(line: 62, column: 42, scope: !7)
!75 = !DILocation(line: 120, column: 21, scope: !57, inlinedAt: !74)
!76 = !DILocation(line: 120, column: 16, scope: !57, inlinedAt: !74)
!77 = !DILocation(line: 121, column: 29, scope: !57, inlinedAt: !74)
!78 = !DILocation(line: 118, column: 15, scope: !57, inlinedAt: !79)
!79 = !DILocation(line: 65, column: 42, scope: !7)
!80 = !DILocation(line: 120, column: 21, scope: !57, inlinedAt: !79)
!81 = !DILocation(line: 120, column: 16, scope: !57, inlinedAt: !79)
!82 = !DILocation(line: 121, column: 29, scope: !57, inlinedAt: !79)
!83 = !DILocation(line: 118, column: 15, scope: !57, inlinedAt: !84)
!84 = !DILocation(line: 72, column: 42, scope: !7)
!85 = !DILocation(line: 120, column: 21, scope: !57, inlinedAt: !84)
!86 = !DILocation(line: 120, column: 16, scope: !57, inlinedAt: !84)
!87 = !DILocation(line: 121, column: 29, scope: !57, inlinedAt: !84)
!88 = !DILocation(line: 118, column: 15, scope: !57, inlinedAt: !89)
!89 = !DILocation(line: 75, column: 42, scope: !7)
!90 = !DILocation(line: 120, column: 21, scope: !57, inlinedAt: !89)
!91 = !DILocation(line: 120, column: 16, scope: !57, inlinedAt: !89)
!92 = !DILocation(line: 121, column: 29, scope: !57, inlinedAt: !89)
!93 = !DILocation(line: 118, column: 15, scope: !57, inlinedAt: !94)
!94 = !DILocation(line: 78, column: 42, scope: !7)
!95 = !DILocation(line: 120, column: 21, scope: !57, inlinedAt: !94)
!96 = !DILocation(line: 120, column: 16, scope: !57, inlinedAt: !94)
!97 = !DILocation(line: 82, column: 35, scope: !7)
!98 = !DILocation(line: 85, column: 35, scope: !7)
!99 = !DILocation(line: 88, column: 35, scope: !7)
!100 = !DILocation(line: 91, column: 35, scope: !7)
!101 = !DILocation(line: 94, column: 35, scope: !7)
!102 = !DILocation(line: 97, column: 35, scope: !7)
!103 = !DILocation(line: 100, column: 35, scope: !7)
!104 = !DILocation(line: 103, column: 35, scope: !7)
!105 = !DILocation(line: 104, column: 25, scope: !7)
!106 = !DILocation(line: 104, column: 37, scope: !7)
!107 = !DILocation(line: 121, column: 29, scope: !57, inlinedAt: !94)
!108 = !DILocation(line: 105, column: 25, scope: !7)
!109 = !DILocation(line: 105, column: 37, scope: !7)
!110 = !DILocation(line: 105, column: 4, scope: !7)
