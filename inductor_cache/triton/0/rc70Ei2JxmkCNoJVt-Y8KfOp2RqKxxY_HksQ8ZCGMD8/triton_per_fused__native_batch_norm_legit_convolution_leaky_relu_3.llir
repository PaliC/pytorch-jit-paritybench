; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused__native_batch_norm_legit_convolution_leaky_relu_3(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %9 = shl i32 %8, 5, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = lshr i32 %10, 5, !dbg !12
  %12 = lshr i32 %10, 6, !dbg !12
  %13 = and i32 %12, 3, !dbg !12
  %14 = or disjoint i32 %13, 4, !dbg !12
  %15 = or disjoint i32 %13, 8, !dbg !12
  %16 = or disjoint i32 %13, 12, !dbg !12
  %17 = or disjoint i32 %13, 16, !dbg !12
  %18 = or disjoint i32 %13, 20, !dbg !12
  %19 = or disjoint i32 %13, 24, !dbg !12
  %20 = or disjoint i32 %13, 28, !dbg !12
  %21 = and i32 %10, 31, !dbg !12
  %22 = or disjoint i32 %9, %13, !dbg !13
  %23 = or disjoint i32 %9, %14, !dbg !13
  %24 = or disjoint i32 %9, %15, !dbg !13
  %25 = or disjoint i32 %9, %16, !dbg !13
  %26 = or disjoint i32 %9, %17, !dbg !13
  %27 = or disjoint i32 %9, %18, !dbg !13
  %28 = or disjoint i32 %9, %19, !dbg !13
  %29 = or disjoint i32 %9, %20, !dbg !13
  %30 = icmp slt i32 %22, 2048, !dbg !14
  %31 = icmp slt i32 %23, 2048, !dbg !14
  %32 = icmp slt i32 %24, 2048, !dbg !14
  %33 = icmp slt i32 %25, 2048, !dbg !14
  %34 = icmp slt i32 %26, 2048, !dbg !14
  %35 = icmp slt i32 %27, 2048, !dbg !14
  %36 = icmp slt i32 %28, 2048, !dbg !14
  %37 = icmp slt i32 %29, 2048, !dbg !14
  %38 = and i32 %10, 63, !dbg !15
  %39 = icmp samesign ult i32 %38, 49, !dbg !16
  %40 = srem i32 %22, 512, !dbg !17
  %41 = srem i32 %23, 512, !dbg !17
  %42 = srem i32 %24, 512, !dbg !17
  %43 = srem i32 %25, 512, !dbg !17
  %44 = srem i32 %26, 512, !dbg !17
  %45 = srem i32 %27, 512, !dbg !17
  %46 = srem i32 %28, 512, !dbg !17
  %47 = srem i32 %29, 512, !dbg !17
  %48 = mul i32 %22, 49, !dbg !18
  %49 = mul i32 %23, 49, !dbg !18
  %50 = mul i32 %24, 49, !dbg !18
  %51 = mul i32 %25, 49, !dbg !18
  %52 = mul i32 %26, 49, !dbg !18
  %53 = mul i32 %27, 49, !dbg !18
  %54 = mul i32 %28, 49, !dbg !18
  %55 = mul i32 %29, 49, !dbg !18
  %56 = add i32 %48, %38, !dbg !19
  %57 = add i32 %49, %38, !dbg !19
  %58 = add i32 %50, %38, !dbg !19
  %59 = add i32 %51, %38, !dbg !19
  %60 = add i32 %52, %38, !dbg !19
  %61 = add i32 %53, %38, !dbg !19
  %62 = add i32 %54, %38, !dbg !19
  %63 = add i32 %55, %38, !dbg !19
  %64 = sext i32 %56 to i64, !dbg !20
  %65 = getelementptr float, ptr addrspace(1) %0, i64 %64, !dbg !20
  %66 = sext i32 %57 to i64, !dbg !20
  %67 = getelementptr float, ptr addrspace(1) %0, i64 %66, !dbg !20
  %68 = sext i32 %58 to i64, !dbg !20
  %69 = getelementptr float, ptr addrspace(1) %0, i64 %68, !dbg !20
  %70 = sext i32 %59 to i64, !dbg !20
  %71 = getelementptr float, ptr addrspace(1) %0, i64 %70, !dbg !20
  %72 = sext i32 %60 to i64, !dbg !20
  %73 = getelementptr float, ptr addrspace(1) %0, i64 %72, !dbg !20
  %74 = sext i32 %61 to i64, !dbg !20
  %75 = getelementptr float, ptr addrspace(1) %0, i64 %74, !dbg !20
  %76 = sext i32 %62 to i64, !dbg !20
  %77 = getelementptr float, ptr addrspace(1) %0, i64 %76, !dbg !20
  %78 = sext i32 %63 to i64, !dbg !20
  %79 = getelementptr float, ptr addrspace(1) %0, i64 %78, !dbg !20
  %80 = and i1 %39, %30, !dbg !21
  %81 = and i1 %39, %31, !dbg !21
  %82 = and i1 %39, %32, !dbg !21
  %83 = and i1 %39, %33, !dbg !21
  %84 = and i1 %39, %34, !dbg !21
  %85 = and i1 %39, %35, !dbg !21
  %86 = and i1 %39, %36, !dbg !21
  %87 = and i1 %39, %37, !dbg !21
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %65, i1 %80, i32 0, i1 %80) #5, !dbg !22
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %67, i1 %81, i32 0, i1 %81) #5, !dbg !22
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %69, i1 %82, i32 0, i1 %82) #5, !dbg !22
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %71, i1 %83, i32 0, i1 %83) #5, !dbg !22
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %73, i1 %84, i32 0, i1 %84) #5, !dbg !22
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %75, i1 %85, i32 0, i1 %85) #5, !dbg !22
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %77, i1 %86, i32 0, i1 %86) #5, !dbg !22
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %79, i1 %87, i32 0, i1 %87) #5, !dbg !22
  %96 = sext i32 %40 to i64, !dbg !23
  %97 = getelementptr float, ptr addrspace(1) %1, i64 %96, !dbg !23
  %98 = sext i32 %41 to i64, !dbg !23
  %99 = getelementptr float, ptr addrspace(1) %1, i64 %98, !dbg !23
  %100 = sext i32 %42 to i64, !dbg !23
  %101 = getelementptr float, ptr addrspace(1) %1, i64 %100, !dbg !23
  %102 = sext i32 %43 to i64, !dbg !23
  %103 = getelementptr float, ptr addrspace(1) %1, i64 %102, !dbg !23
  %104 = sext i32 %44 to i64, !dbg !23
  %105 = getelementptr float, ptr addrspace(1) %1, i64 %104, !dbg !23
  %106 = sext i32 %45 to i64, !dbg !23
  %107 = getelementptr float, ptr addrspace(1) %1, i64 %106, !dbg !23
  %108 = sext i32 %46 to i64, !dbg !23
  %109 = getelementptr float, ptr addrspace(1) %1, i64 %108, !dbg !23
  %110 = sext i32 %47 to i64, !dbg !23
  %111 = getelementptr float, ptr addrspace(1) %1, i64 %110, !dbg !23
  %112 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %97, i1 %30) #5, !dbg !24
  %113 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %99, i1 %31) #5, !dbg !24
  %114 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %101, i1 %32) #5, !dbg !24
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %103, i1 %33) #5, !dbg !24
  %116 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %105, i1 %34) #5, !dbg !24
  %117 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %107, i1 %35) #5, !dbg !24
  %118 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %109, i1 %36) #5, !dbg !24
  %119 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %111, i1 %37) #5, !dbg !24
  %120 = icmp eq i32 %21, 0, !dbg !25
  %121 = and i32 %11, 1, !dbg !25
  %122 = shl nuw nsw i32 %13, 1, !dbg !25
  %123 = or disjoint i32 %122, %121, !dbg !25
  %124 = getelementptr float, ptr addrspace(3) @global_smem, i32 %123, !dbg !25
  %125 = shl nuw nsw i32 %14, 1, !dbg !25
  %126 = or disjoint i32 %125, %121, !dbg !25
  %127 = getelementptr float, ptr addrspace(3) @global_smem, i32 %126, !dbg !25
  %128 = shl nuw nsw i32 %15, 1, !dbg !25
  %129 = or disjoint i32 %128, %121, !dbg !25
  %130 = getelementptr float, ptr addrspace(3) @global_smem, i32 %129, !dbg !25
  %131 = shl nuw nsw i32 %16, 1, !dbg !25
  %132 = or disjoint i32 %131, %121, !dbg !25
  %133 = getelementptr float, ptr addrspace(3) @global_smem, i32 %132, !dbg !25
  %134 = shl nuw nsw i32 %17, 1, !dbg !25
  %135 = or disjoint i32 %134, %121, !dbg !25
  %136 = getelementptr float, ptr addrspace(3) @global_smem, i32 %135, !dbg !25
  %137 = shl nuw nsw i32 %18, 1, !dbg !25
  %138 = or disjoint i32 %137, %121, !dbg !25
  %139 = getelementptr float, ptr addrspace(3) @global_smem, i32 %138, !dbg !25
  %140 = shl nuw nsw i32 %19, 1, !dbg !25
  %141 = or disjoint i32 %140, %121, !dbg !25
  %142 = getelementptr float, ptr addrspace(3) @global_smem, i32 %141, !dbg !25
  %143 = shl nuw nsw i32 %20, 1, !dbg !25
  %144 = or disjoint i32 %143, %121, !dbg !25
  %145 = getelementptr float, ptr addrspace(3) @global_smem, i32 %144, !dbg !25
  %146 = icmp slt i32 %10, 64, !dbg !25
  %147 = getelementptr float, ptr addrspace(3) @global_smem, i32 %10, !dbg !25
  %148 = and i32 %10, 1, !dbg !25
  %149 = icmp eq i32 %148, 0, !dbg !25
  %150 = and i1 %146, %149, !dbg !25
  %151 = getelementptr float, ptr addrspace(3) @global_smem, i32 %122, !dbg !25
  %152 = getelementptr float, ptr addrspace(3) @global_smem, i32 %125, !dbg !25
  %153 = getelementptr float, ptr addrspace(3) @global_smem, i32 %128, !dbg !25
  %154 = getelementptr float, ptr addrspace(3) @global_smem, i32 %131, !dbg !25
  %155 = getelementptr float, ptr addrspace(3) @global_smem, i32 %134, !dbg !25
  %156 = getelementptr float, ptr addrspace(3) @global_smem, i32 %137, !dbg !25
  %157 = getelementptr float, ptr addrspace(3) @global_smem, i32 %140, !dbg !25
  %158 = getelementptr float, ptr addrspace(3) @global_smem, i32 %143, !dbg !25
  %159 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !29
  %160 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !29
  %161 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !29
  %162 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %16, !dbg !29
  %163 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %17, !dbg !29
  %164 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %18, !dbg !29
  %165 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %19, !dbg !29
  %166 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %20, !dbg !29
  %167 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %21, !dbg !29
  %168 = insertelement <8 x i32> poison, i32 %95, i64 0, !dbg !22
  %169 = insertelement <8 x i32> %168, i32 %94, i64 1, !dbg !22
  %170 = insertelement <8 x i32> %169, i32 %93, i64 2, !dbg !22
  %171 = insertelement <8 x i32> %170, i32 %92, i64 3, !dbg !22
  %172 = insertelement <8 x i32> %171, i32 %91, i64 4, !dbg !22
  %173 = insertelement <8 x i32> %172, i32 %90, i64 5, !dbg !22
  %174 = insertelement <8 x i32> %173, i32 %89, i64 6, !dbg !22
  %175 = insertelement <8 x i32> %174, i32 %88, i64 7, !dbg !22
  %176 = bitcast <8 x i32> %175 to <8 x float>, !dbg !22
  %177 = insertelement <8 x i32> poison, i32 %119, i64 0, !dbg !24
  %178 = insertelement <8 x i32> %177, i32 %118, i64 1, !dbg !24
  %179 = insertelement <8 x i32> %178, i32 %117, i64 2, !dbg !24
  %180 = insertelement <8 x i32> %179, i32 %116, i64 3, !dbg !24
  %181 = insertelement <8 x i32> %180, i32 %115, i64 4, !dbg !24
  %182 = insertelement <8 x i32> %181, i32 %114, i64 5, !dbg !24
  %183 = insertelement <8 x i32> %182, i32 %113, i64 6, !dbg !24
  %184 = insertelement <8 x i32> %183, i32 %112, i64 7, !dbg !24
  %185 = bitcast <8 x i32> %184 to <8 x float>, !dbg !24
  %186 = fadd <8 x float> %176, %185, !dbg !30
  %187 = extractelement <8 x float> %186, i64 7, !dbg !31
  %188 = select i1 %80, float %187, float 0.000000e+00, !dbg !31
  %189 = extractelement <8 x float> %186, i64 6, !dbg !31
  %190 = select i1 %81, float %189, float 0.000000e+00, !dbg !31
  %191 = extractelement <8 x float> %186, i64 5, !dbg !31
  %192 = select i1 %82, float %191, float 0.000000e+00, !dbg !31
  %193 = extractelement <8 x float> %186, i64 4, !dbg !31
  %194 = select i1 %83, float %193, float 0.000000e+00, !dbg !31
  %195 = extractelement <8 x float> %186, i64 3, !dbg !31
  %196 = select i1 %84, float %195, float 0.000000e+00, !dbg !31
  %197 = extractelement <8 x float> %186, i64 2, !dbg !31
  %198 = select i1 %85, float %197, float 0.000000e+00, !dbg !31
  %199 = extractelement <8 x float> %186, i64 1, !dbg !31
  %200 = select i1 %86, float %199, float 0.000000e+00, !dbg !31
  %201 = extractelement <8 x float> %186, i64 0, !dbg !31
  %202 = select i1 %87, float %201, float 0.000000e+00, !dbg !31
  %203 = bitcast float %188 to i32, !dbg !25
  %204 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %203, i32 16, i32 31), !dbg !25
  %205 = bitcast i32 %204 to float, !dbg !25
  %206 = fadd float %188, %205, !dbg !32
  %207 = bitcast float %206 to i32, !dbg !25
  %208 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %207, i32 8, i32 31), !dbg !25
  %209 = bitcast i32 %208 to float, !dbg !25
  %210 = fadd float %206, %209, !dbg !32
  %211 = bitcast float %210 to i32, !dbg !25
  %212 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %211, i32 4, i32 31), !dbg !25
  %213 = bitcast i32 %212 to float, !dbg !25
  %214 = fadd float %210, %213, !dbg !32
  %215 = bitcast float %214 to i32, !dbg !25
  %216 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %215, i32 2, i32 31), !dbg !25
  %217 = bitcast i32 %216 to float, !dbg !25
  %218 = fadd float %214, %217, !dbg !32
  %219 = bitcast float %218 to i32, !dbg !25
  %220 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %219, i32 1, i32 31), !dbg !25
  %221 = bitcast i32 %220 to float, !dbg !25
  %222 = fadd float %218, %221, !dbg !32
  %223 = bitcast float %190 to i32, !dbg !25
  %224 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %223, i32 16, i32 31), !dbg !25
  %225 = bitcast i32 %224 to float, !dbg !25
  %226 = fadd float %190, %225, !dbg !32
  %227 = bitcast float %226 to i32, !dbg !25
  %228 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %227, i32 8, i32 31), !dbg !25
  %229 = bitcast i32 %228 to float, !dbg !25
  %230 = fadd float %226, %229, !dbg !32
  %231 = bitcast float %230 to i32, !dbg !25
  %232 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %231, i32 4, i32 31), !dbg !25
  %233 = bitcast i32 %232 to float, !dbg !25
  %234 = fadd float %230, %233, !dbg !32
  %235 = bitcast float %234 to i32, !dbg !25
  %236 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %235, i32 2, i32 31), !dbg !25
  %237 = bitcast i32 %236 to float, !dbg !25
  %238 = fadd float %234, %237, !dbg !32
  %239 = bitcast float %238 to i32, !dbg !25
  %240 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %239, i32 1, i32 31), !dbg !25
  %241 = bitcast i32 %240 to float, !dbg !25
  %242 = fadd float %238, %241, !dbg !32
  %243 = bitcast float %192 to i32, !dbg !25
  %244 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %243, i32 16, i32 31), !dbg !25
  %245 = bitcast i32 %244 to float, !dbg !25
  %246 = fadd float %192, %245, !dbg !32
  %247 = bitcast float %246 to i32, !dbg !25
  %248 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %247, i32 8, i32 31), !dbg !25
  %249 = bitcast i32 %248 to float, !dbg !25
  %250 = fadd float %246, %249, !dbg !32
  %251 = bitcast float %250 to i32, !dbg !25
  %252 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %251, i32 4, i32 31), !dbg !25
  %253 = bitcast i32 %252 to float, !dbg !25
  %254 = fadd float %250, %253, !dbg !32
  %255 = bitcast float %254 to i32, !dbg !25
  %256 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %255, i32 2, i32 31), !dbg !25
  %257 = bitcast i32 %256 to float, !dbg !25
  %258 = fadd float %254, %257, !dbg !32
  %259 = bitcast float %258 to i32, !dbg !25
  %260 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %259, i32 1, i32 31), !dbg !25
  %261 = bitcast i32 %260 to float, !dbg !25
  %262 = fadd float %258, %261, !dbg !32
  %263 = bitcast float %194 to i32, !dbg !25
  %264 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %263, i32 16, i32 31), !dbg !25
  %265 = bitcast i32 %264 to float, !dbg !25
  %266 = fadd float %194, %265, !dbg !32
  %267 = bitcast float %266 to i32, !dbg !25
  %268 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %267, i32 8, i32 31), !dbg !25
  %269 = bitcast i32 %268 to float, !dbg !25
  %270 = fadd float %266, %269, !dbg !32
  %271 = bitcast float %270 to i32, !dbg !25
  %272 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %271, i32 4, i32 31), !dbg !25
  %273 = bitcast i32 %272 to float, !dbg !25
  %274 = fadd float %270, %273, !dbg !32
  %275 = bitcast float %274 to i32, !dbg !25
  %276 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %275, i32 2, i32 31), !dbg !25
  %277 = bitcast i32 %276 to float, !dbg !25
  %278 = fadd float %274, %277, !dbg !32
  %279 = bitcast float %278 to i32, !dbg !25
  %280 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %279, i32 1, i32 31), !dbg !25
  %281 = bitcast i32 %280 to float, !dbg !25
  %282 = fadd float %278, %281, !dbg !32
  %283 = bitcast float %196 to i32, !dbg !25
  %284 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %283, i32 16, i32 31), !dbg !25
  %285 = bitcast i32 %284 to float, !dbg !25
  %286 = fadd float %196, %285, !dbg !32
  %287 = bitcast float %286 to i32, !dbg !25
  %288 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %287, i32 8, i32 31), !dbg !25
  %289 = bitcast i32 %288 to float, !dbg !25
  %290 = fadd float %286, %289, !dbg !32
  %291 = bitcast float %290 to i32, !dbg !25
  %292 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %291, i32 4, i32 31), !dbg !25
  %293 = bitcast i32 %292 to float, !dbg !25
  %294 = fadd float %290, %293, !dbg !32
  %295 = bitcast float %294 to i32, !dbg !25
  %296 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %295, i32 2, i32 31), !dbg !25
  %297 = bitcast i32 %296 to float, !dbg !25
  %298 = fadd float %294, %297, !dbg !32
  %299 = bitcast float %298 to i32, !dbg !25
  %300 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %299, i32 1, i32 31), !dbg !25
  %301 = bitcast i32 %300 to float, !dbg !25
  %302 = fadd float %298, %301, !dbg !32
  %303 = bitcast float %198 to i32, !dbg !25
  %304 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %303, i32 16, i32 31), !dbg !25
  %305 = bitcast i32 %304 to float, !dbg !25
  %306 = fadd float %198, %305, !dbg !32
  %307 = bitcast float %306 to i32, !dbg !25
  %308 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %307, i32 8, i32 31), !dbg !25
  %309 = bitcast i32 %308 to float, !dbg !25
  %310 = fadd float %306, %309, !dbg !32
  %311 = bitcast float %310 to i32, !dbg !25
  %312 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %311, i32 4, i32 31), !dbg !25
  %313 = bitcast i32 %312 to float, !dbg !25
  %314 = fadd float %310, %313, !dbg !32
  %315 = bitcast float %314 to i32, !dbg !25
  %316 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %315, i32 2, i32 31), !dbg !25
  %317 = bitcast i32 %316 to float, !dbg !25
  %318 = fadd float %314, %317, !dbg !32
  %319 = bitcast float %318 to i32, !dbg !25
  %320 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %319, i32 1, i32 31), !dbg !25
  %321 = bitcast i32 %320 to float, !dbg !25
  %322 = fadd float %318, %321, !dbg !32
  %323 = bitcast float %200 to i32, !dbg !25
  %324 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %323, i32 16, i32 31), !dbg !25
  %325 = bitcast i32 %324 to float, !dbg !25
  %326 = fadd float %200, %325, !dbg !32
  %327 = bitcast float %326 to i32, !dbg !25
  %328 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %327, i32 8, i32 31), !dbg !25
  %329 = bitcast i32 %328 to float, !dbg !25
  %330 = fadd float %326, %329, !dbg !32
  %331 = bitcast float %330 to i32, !dbg !25
  %332 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %331, i32 4, i32 31), !dbg !25
  %333 = bitcast i32 %332 to float, !dbg !25
  %334 = fadd float %330, %333, !dbg !32
  %335 = bitcast float %334 to i32, !dbg !25
  %336 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %335, i32 2, i32 31), !dbg !25
  %337 = bitcast i32 %336 to float, !dbg !25
  %338 = fadd float %334, %337, !dbg !32
  %339 = bitcast float %338 to i32, !dbg !25
  %340 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %339, i32 1, i32 31), !dbg !25
  %341 = bitcast i32 %340 to float, !dbg !25
  %342 = fadd float %338, %341, !dbg !32
  %343 = bitcast float %202 to i32, !dbg !25
  %344 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %343, i32 16, i32 31), !dbg !25
  %345 = bitcast i32 %344 to float, !dbg !25
  %346 = fadd float %202, %345, !dbg !32
  %347 = bitcast float %346 to i32, !dbg !25
  %348 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %347, i32 8, i32 31), !dbg !25
  %349 = bitcast i32 %348 to float, !dbg !25
  %350 = fadd float %346, %349, !dbg !32
  %351 = bitcast float %350 to i32, !dbg !25
  %352 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %351, i32 4, i32 31), !dbg !25
  %353 = bitcast i32 %352 to float, !dbg !25
  %354 = fadd float %350, %353, !dbg !32
  %355 = bitcast float %354 to i32, !dbg !25
  %356 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %355, i32 2, i32 31), !dbg !25
  %357 = bitcast i32 %356 to float, !dbg !25
  %358 = fadd float %354, %357, !dbg !32
  %359 = bitcast float %358 to i32, !dbg !25
  %360 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %359, i32 1, i32 31), !dbg !25
  %361 = bitcast i32 %360 to float, !dbg !25
  %362 = fadd float %358, %361, !dbg !32
  %363 = bitcast float %222 to <1 x i32>, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %124, <1 x i32> %363, i1 %120) #5, !dbg !25
  %364 = bitcast float %242 to <1 x i32>, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %127, <1 x i32> %364, i1 %120) #5, !dbg !25
  %365 = bitcast float %262 to <1 x i32>, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %130, <1 x i32> %365, i1 %120) #5, !dbg !25
  %366 = bitcast float %282 to <1 x i32>, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %133, <1 x i32> %366, i1 %120) #5, !dbg !25
  %367 = bitcast float %302 to <1 x i32>, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %136, <1 x i32> %367, i1 %120) #5, !dbg !25
  %368 = bitcast float %322 to <1 x i32>, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %139, <1 x i32> %368, i1 %120) #5, !dbg !25
  %369 = bitcast float %342 to <1 x i32>, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %142, <1 x i32> %369, i1 %120) #5, !dbg !25
  %370 = bitcast float %362 to <1 x i32>, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %145, <1 x i32> %370, i1 %120) #5, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %371 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %147, i1 %146) #5, !dbg !25
  %372 = bitcast i32 %371 to float, !dbg !25
  %373 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %371, i32 1, i32 31), !dbg !25
  %374 = bitcast i32 %373 to float, !dbg !25
  %375 = fadd float %372, %374, !dbg !32
  %376 = bitcast float %375 to <1 x i32>, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %147, <1 x i32> %376, i1 %150) #5, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %377 = load float, ptr addrspace(3) %151, align 8, !dbg !25
  %378 = load float, ptr addrspace(3) %152, align 8, !dbg !25
  %379 = load float, ptr addrspace(3) %153, align 8, !dbg !25
  %380 = load float, ptr addrspace(3) %154, align 8, !dbg !25
  %381 = load float, ptr addrspace(3) %155, align 8, !dbg !25
  %382 = load float, ptr addrspace(3) %156, align 8, !dbg !25
  %383 = load float, ptr addrspace(3) %157, align 8, !dbg !25
  %384 = load float, ptr addrspace(3) %158, align 8, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %385 = bitcast float %377 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %159, <1 x i32> %385, i1 true) #5, !dbg !29
  %386 = bitcast float %378 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %160, <1 x i32> %386, i1 true) #5, !dbg !29
  %387 = bitcast float %379 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %161, <1 x i32> %387, i1 true) #5, !dbg !29
  %388 = bitcast float %380 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %162, <1 x i32> %388, i1 true) #5, !dbg !29
  %389 = bitcast float %381 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %163, <1 x i32> %389, i1 true) #5, !dbg !29
  %390 = bitcast float %382 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %164, <1 x i32> %390, i1 true) #5, !dbg !29
  %391 = bitcast float %383 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %165, <1 x i32> %391, i1 true) #5, !dbg !29
  %392 = bitcast float %384 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %166, <1 x i32> %392, i1 true) #5, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %393 = load float, ptr addrspace(3) %167, align 4, !dbg !29
  %394 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %393, float 4.900000e+01) #5, !dbg !29
  %395 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %377, float 4.900000e+01) #5, !dbg !29
  %396 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %378, float 4.900000e+01) #5, !dbg !29
  %397 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %379, float 4.900000e+01) #5, !dbg !29
  %398 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %380, float 4.900000e+01) #5, !dbg !29
  %399 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %381, float 4.900000e+01) #5, !dbg !29
  %400 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %382, float 4.900000e+01) #5, !dbg !29
  %401 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %383, float 4.900000e+01) #5, !dbg !29
  %402 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %384, float 4.900000e+01) #5, !dbg !29
  %403 = insertelement <8 x float> poison, float %402, i64 0, !dbg !34
  %404 = insertelement <8 x float> %403, float %401, i64 1, !dbg !34
  %405 = insertelement <8 x float> %404, float %400, i64 2, !dbg !34
  %406 = insertelement <8 x float> %405, float %399, i64 3, !dbg !34
  %407 = insertelement <8 x float> %406, float %398, i64 4, !dbg !34
  %408 = insertelement <8 x float> %407, float %397, i64 5, !dbg !34
  %409 = insertelement <8 x float> %408, float %396, i64 6, !dbg !34
  %410 = insertelement <8 x float> %409, float %395, i64 7, !dbg !34
  %411 = fsub <8 x float> %186, %410, !dbg !34
  %412 = fmul <8 x float> %411, %411, !dbg !35
  %413 = extractelement <8 x float> %412, i64 7, !dbg !35
  %414 = fmul <8 x float> %411, %411, !dbg !35
  %415 = extractelement <8 x float> %414, i64 6, !dbg !35
  %416 = fmul <8 x float> %411, %411, !dbg !35
  %417 = extractelement <8 x float> %416, i64 5, !dbg !35
  %418 = fmul <8 x float> %411, %411, !dbg !35
  %419 = extractelement <8 x float> %418, i64 4, !dbg !35
  %420 = fmul <8 x float> %411, %411, !dbg !35
  %421 = extractelement <8 x float> %420, i64 3, !dbg !35
  %422 = fmul <8 x float> %411, %411, !dbg !35
  %423 = extractelement <8 x float> %422, i64 2, !dbg !35
  %424 = fmul <8 x float> %411, %411, !dbg !35
  %425 = extractelement <8 x float> %424, i64 1, !dbg !35
  %426 = fmul <8 x float> %411, %411, !dbg !35
  %427 = extractelement <8 x float> %426, i64 0, !dbg !35
  %428 = select i1 %80, float %413, float 0.000000e+00, !dbg !36
  %429 = select i1 %81, float %415, float 0.000000e+00, !dbg !36
  %430 = select i1 %82, float %417, float 0.000000e+00, !dbg !36
  %431 = select i1 %83, float %419, float 0.000000e+00, !dbg !36
  %432 = select i1 %84, float %421, float 0.000000e+00, !dbg !36
  %433 = select i1 %85, float %423, float 0.000000e+00, !dbg !36
  %434 = select i1 %86, float %425, float 0.000000e+00, !dbg !36
  %435 = select i1 %87, float %427, float 0.000000e+00, !dbg !36
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %436 = bitcast float %428 to i32, !dbg !37
  %437 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %436, i32 16, i32 31), !dbg !37
  %438 = bitcast i32 %437 to float, !dbg !37
  %439 = fadd float %428, %438, !dbg !39
  %440 = bitcast float %439 to i32, !dbg !37
  %441 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %440, i32 8, i32 31), !dbg !37
  %442 = bitcast i32 %441 to float, !dbg !37
  %443 = fadd float %439, %442, !dbg !39
  %444 = bitcast float %443 to i32, !dbg !37
  %445 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %444, i32 4, i32 31), !dbg !37
  %446 = bitcast i32 %445 to float, !dbg !37
  %447 = fadd float %443, %446, !dbg !39
  %448 = bitcast float %447 to i32, !dbg !37
  %449 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %448, i32 2, i32 31), !dbg !37
  %450 = bitcast i32 %449 to float, !dbg !37
  %451 = fadd float %447, %450, !dbg !39
  %452 = bitcast float %451 to i32, !dbg !37
  %453 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %452, i32 1, i32 31), !dbg !37
  %454 = bitcast i32 %453 to float, !dbg !37
  %455 = fadd float %451, %454, !dbg !39
  %456 = bitcast float %429 to i32, !dbg !37
  %457 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %456, i32 16, i32 31), !dbg !37
  %458 = bitcast i32 %457 to float, !dbg !37
  %459 = fadd float %429, %458, !dbg !39
  %460 = bitcast float %459 to i32, !dbg !37
  %461 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %460, i32 8, i32 31), !dbg !37
  %462 = bitcast i32 %461 to float, !dbg !37
  %463 = fadd float %459, %462, !dbg !39
  %464 = bitcast float %463 to i32, !dbg !37
  %465 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %464, i32 4, i32 31), !dbg !37
  %466 = bitcast i32 %465 to float, !dbg !37
  %467 = fadd float %463, %466, !dbg !39
  %468 = bitcast float %467 to i32, !dbg !37
  %469 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %468, i32 2, i32 31), !dbg !37
  %470 = bitcast i32 %469 to float, !dbg !37
  %471 = fadd float %467, %470, !dbg !39
  %472 = bitcast float %471 to i32, !dbg !37
  %473 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %472, i32 1, i32 31), !dbg !37
  %474 = bitcast i32 %473 to float, !dbg !37
  %475 = fadd float %471, %474, !dbg !39
  %476 = bitcast float %430 to i32, !dbg !37
  %477 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %476, i32 16, i32 31), !dbg !37
  %478 = bitcast i32 %477 to float, !dbg !37
  %479 = fadd float %430, %478, !dbg !39
  %480 = bitcast float %479 to i32, !dbg !37
  %481 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %480, i32 8, i32 31), !dbg !37
  %482 = bitcast i32 %481 to float, !dbg !37
  %483 = fadd float %479, %482, !dbg !39
  %484 = bitcast float %483 to i32, !dbg !37
  %485 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %484, i32 4, i32 31), !dbg !37
  %486 = bitcast i32 %485 to float, !dbg !37
  %487 = fadd float %483, %486, !dbg !39
  %488 = bitcast float %487 to i32, !dbg !37
  %489 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %488, i32 2, i32 31), !dbg !37
  %490 = bitcast i32 %489 to float, !dbg !37
  %491 = fadd float %487, %490, !dbg !39
  %492 = bitcast float %491 to i32, !dbg !37
  %493 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %492, i32 1, i32 31), !dbg !37
  %494 = bitcast i32 %493 to float, !dbg !37
  %495 = fadd float %491, %494, !dbg !39
  %496 = bitcast float %431 to i32, !dbg !37
  %497 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %496, i32 16, i32 31), !dbg !37
  %498 = bitcast i32 %497 to float, !dbg !37
  %499 = fadd float %431, %498, !dbg !39
  %500 = bitcast float %499 to i32, !dbg !37
  %501 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %500, i32 8, i32 31), !dbg !37
  %502 = bitcast i32 %501 to float, !dbg !37
  %503 = fadd float %499, %502, !dbg !39
  %504 = bitcast float %503 to i32, !dbg !37
  %505 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %504, i32 4, i32 31), !dbg !37
  %506 = bitcast i32 %505 to float, !dbg !37
  %507 = fadd float %503, %506, !dbg !39
  %508 = bitcast float %507 to i32, !dbg !37
  %509 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %508, i32 2, i32 31), !dbg !37
  %510 = bitcast i32 %509 to float, !dbg !37
  %511 = fadd float %507, %510, !dbg !39
  %512 = bitcast float %511 to i32, !dbg !37
  %513 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %512, i32 1, i32 31), !dbg !37
  %514 = bitcast i32 %513 to float, !dbg !37
  %515 = fadd float %511, %514, !dbg !39
  %516 = bitcast float %432 to i32, !dbg !37
  %517 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %516, i32 16, i32 31), !dbg !37
  %518 = bitcast i32 %517 to float, !dbg !37
  %519 = fadd float %432, %518, !dbg !39
  %520 = bitcast float %519 to i32, !dbg !37
  %521 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %520, i32 8, i32 31), !dbg !37
  %522 = bitcast i32 %521 to float, !dbg !37
  %523 = fadd float %519, %522, !dbg !39
  %524 = bitcast float %523 to i32, !dbg !37
  %525 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %524, i32 4, i32 31), !dbg !37
  %526 = bitcast i32 %525 to float, !dbg !37
  %527 = fadd float %523, %526, !dbg !39
  %528 = bitcast float %527 to i32, !dbg !37
  %529 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %528, i32 2, i32 31), !dbg !37
  %530 = bitcast i32 %529 to float, !dbg !37
  %531 = fadd float %527, %530, !dbg !39
  %532 = bitcast float %531 to i32, !dbg !37
  %533 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %532, i32 1, i32 31), !dbg !37
  %534 = bitcast i32 %533 to float, !dbg !37
  %535 = fadd float %531, %534, !dbg !39
  %536 = bitcast float %433 to i32, !dbg !37
  %537 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %536, i32 16, i32 31), !dbg !37
  %538 = bitcast i32 %537 to float, !dbg !37
  %539 = fadd float %433, %538, !dbg !39
  %540 = bitcast float %539 to i32, !dbg !37
  %541 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %540, i32 8, i32 31), !dbg !37
  %542 = bitcast i32 %541 to float, !dbg !37
  %543 = fadd float %539, %542, !dbg !39
  %544 = bitcast float %543 to i32, !dbg !37
  %545 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %544, i32 4, i32 31), !dbg !37
  %546 = bitcast i32 %545 to float, !dbg !37
  %547 = fadd float %543, %546, !dbg !39
  %548 = bitcast float %547 to i32, !dbg !37
  %549 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %548, i32 2, i32 31), !dbg !37
  %550 = bitcast i32 %549 to float, !dbg !37
  %551 = fadd float %547, %550, !dbg !39
  %552 = bitcast float %551 to i32, !dbg !37
  %553 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %552, i32 1, i32 31), !dbg !37
  %554 = bitcast i32 %553 to float, !dbg !37
  %555 = fadd float %551, %554, !dbg !39
  %556 = bitcast float %434 to i32, !dbg !37
  %557 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %556, i32 16, i32 31), !dbg !37
  %558 = bitcast i32 %557 to float, !dbg !37
  %559 = fadd float %434, %558, !dbg !39
  %560 = bitcast float %559 to i32, !dbg !37
  %561 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %560, i32 8, i32 31), !dbg !37
  %562 = bitcast i32 %561 to float, !dbg !37
  %563 = fadd float %559, %562, !dbg !39
  %564 = bitcast float %563 to i32, !dbg !37
  %565 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %564, i32 4, i32 31), !dbg !37
  %566 = bitcast i32 %565 to float, !dbg !37
  %567 = fadd float %563, %566, !dbg !39
  %568 = bitcast float %567 to i32, !dbg !37
  %569 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %568, i32 2, i32 31), !dbg !37
  %570 = bitcast i32 %569 to float, !dbg !37
  %571 = fadd float %567, %570, !dbg !39
  %572 = bitcast float %571 to i32, !dbg !37
  %573 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %572, i32 1, i32 31), !dbg !37
  %574 = bitcast i32 %573 to float, !dbg !37
  %575 = fadd float %571, %574, !dbg !39
  %576 = bitcast float %435 to i32, !dbg !37
  %577 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %576, i32 16, i32 31), !dbg !37
  %578 = bitcast i32 %577 to float, !dbg !37
  %579 = fadd float %435, %578, !dbg !39
  %580 = bitcast float %579 to i32, !dbg !37
  %581 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %580, i32 8, i32 31), !dbg !37
  %582 = bitcast i32 %581 to float, !dbg !37
  %583 = fadd float %579, %582, !dbg !39
  %584 = bitcast float %583 to i32, !dbg !37
  %585 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %584, i32 4, i32 31), !dbg !37
  %586 = bitcast i32 %585 to float, !dbg !37
  %587 = fadd float %583, %586, !dbg !39
  %588 = bitcast float %587 to i32, !dbg !37
  %589 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %588, i32 2, i32 31), !dbg !37
  %590 = bitcast i32 %589 to float, !dbg !37
  %591 = fadd float %587, %590, !dbg !39
  %592 = bitcast float %591 to i32, !dbg !37
  %593 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %592, i32 1, i32 31), !dbg !37
  %594 = bitcast i32 %593 to float, !dbg !37
  %595 = fadd float %591, %594, !dbg !39
  %596 = bitcast float %455 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %124, <1 x i32> %596, i1 %120) #5, !dbg !37
  %597 = bitcast float %475 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %127, <1 x i32> %597, i1 %120) #5, !dbg !37
  %598 = bitcast float %495 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %130, <1 x i32> %598, i1 %120) #5, !dbg !37
  %599 = bitcast float %515 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %133, <1 x i32> %599, i1 %120) #5, !dbg !37
  %600 = bitcast float %535 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %136, <1 x i32> %600, i1 %120) #5, !dbg !37
  %601 = bitcast float %555 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %139, <1 x i32> %601, i1 %120) #5, !dbg !37
  %602 = bitcast float %575 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %142, <1 x i32> %602, i1 %120) #5, !dbg !37
  %603 = bitcast float %595 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %145, <1 x i32> %603, i1 %120) #5, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %604 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %147, i1 %146) #5, !dbg !37
  %605 = bitcast i32 %604 to float, !dbg !37
  %606 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %604, i32 1, i32 31), !dbg !37
  %607 = bitcast i32 %606 to float, !dbg !37
  %608 = fadd float %605, %607, !dbg !39
  %609 = bitcast float %608 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %147, <1 x i32> %609, i1 %150) #5, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %610 = load float, ptr addrspace(3) %151, align 8, !dbg !37
  %611 = load float, ptr addrspace(3) %152, align 8, !dbg !37
  %612 = load float, ptr addrspace(3) %153, align 8, !dbg !37
  %613 = load float, ptr addrspace(3) %154, align 8, !dbg !37
  %614 = load float, ptr addrspace(3) %155, align 8, !dbg !37
  %615 = load float, ptr addrspace(3) %156, align 8, !dbg !37
  %616 = load float, ptr addrspace(3) %157, align 8, !dbg !37
  %617 = load float, ptr addrspace(3) %158, align 8, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %618 = bitcast float %610 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %159, <1 x i32> %618, i1 true) #5, !dbg !40
  %619 = bitcast float %611 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %160, <1 x i32> %619, i1 true) #5, !dbg !40
  %620 = bitcast float %612 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %161, <1 x i32> %620, i1 true) #5, !dbg !40
  %621 = bitcast float %613 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %162, <1 x i32> %621, i1 true) #5, !dbg !40
  %622 = bitcast float %614 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %163, <1 x i32> %622, i1 true) #5, !dbg !40
  %623 = bitcast float %615 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %164, <1 x i32> %623, i1 true) #5, !dbg !40
  %624 = bitcast float %616 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %165, <1 x i32> %624, i1 true) #5, !dbg !40
  %625 = bitcast float %617 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %166, <1 x i32> %625, i1 true) #5, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %626 = load float, ptr addrspace(3) %167, align 4, !dbg !40
  %627 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %626, float 4.900000e+01) #5, !dbg !41
  %628 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %610, float 4.900000e+01) #5, !dbg !41
  %629 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %611, float 4.900000e+01) #5, !dbg !41
  %630 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %612, float 4.900000e+01) #5, !dbg !41
  %631 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %613, float 4.900000e+01) #5, !dbg !41
  %632 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %614, float 4.900000e+01) #5, !dbg !41
  %633 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %615, float 4.900000e+01) #5, !dbg !41
  %634 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %616, float 4.900000e+01) #5, !dbg !41
  %635 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %617, float 4.900000e+01) #5, !dbg !41
  %636 = fadd float %627, 0x3EE4F8B580000000, !dbg !42
  %637 = fadd float %628, 0x3EE4F8B580000000, !dbg !42
  %638 = fadd float %629, 0x3EE4F8B580000000, !dbg !42
  %639 = fadd float %630, 0x3EE4F8B580000000, !dbg !42
  %640 = fadd float %631, 0x3EE4F8B580000000, !dbg !42
  %641 = fadd float %632, 0x3EE4F8B580000000, !dbg !42
  %642 = fadd float %633, 0x3EE4F8B580000000, !dbg !42
  %643 = fadd float %634, 0x3EE4F8B580000000, !dbg !42
  %644 = fadd float %635, 0x3EE4F8B580000000, !dbg !42
  %645 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !40
  %.not.i = icmp eq i32 %645, 0, !dbg !40
  br i1 %.not.i, label %648, label %646, !dbg !40

646:                                              ; preds = %7
  %647 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %636), !dbg !40
  br label %__nv_rsqrtf.exit, !dbg !40

648:                                              ; preds = %7
  %649 = tail call float @llvm.nvvm.rsqrt.approx.f(float %636), !dbg !40
  br label %__nv_rsqrtf.exit, !dbg !40

__nv_rsqrtf.exit:                                 ; preds = %646, %648
  %.0.i = phi float [ %647, %646 ], [ %649, %648 ], !dbg !40
  %650 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !40
  %.not.i1 = icmp eq i32 %650, 0, !dbg !40
  br i1 %.not.i1, label %653, label %651, !dbg !40

651:                                              ; preds = %__nv_rsqrtf.exit
  %652 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %637), !dbg !40
  br label %__nv_rsqrtf.exit3, !dbg !40

653:                                              ; preds = %__nv_rsqrtf.exit
  %654 = tail call float @llvm.nvvm.rsqrt.approx.f(float %637), !dbg !40
  br label %__nv_rsqrtf.exit3, !dbg !40

__nv_rsqrtf.exit3:                                ; preds = %651, %653
  %.0.i2 = phi float [ %652, %651 ], [ %654, %653 ], !dbg !40
  %655 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !40
  %.not.i4 = icmp eq i32 %655, 0, !dbg !40
  br i1 %.not.i4, label %658, label %656, !dbg !40

656:                                              ; preds = %__nv_rsqrtf.exit3
  %657 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %638), !dbg !40
  br label %__nv_rsqrtf.exit6, !dbg !40

658:                                              ; preds = %__nv_rsqrtf.exit3
  %659 = tail call float @llvm.nvvm.rsqrt.approx.f(float %638), !dbg !40
  br label %__nv_rsqrtf.exit6, !dbg !40

__nv_rsqrtf.exit6:                                ; preds = %656, %658
  %.0.i5 = phi float [ %657, %656 ], [ %659, %658 ], !dbg !40
  %660 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !40
  %.not.i7 = icmp eq i32 %660, 0, !dbg !40
  br i1 %.not.i7, label %663, label %661, !dbg !40

661:                                              ; preds = %__nv_rsqrtf.exit6
  %662 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %639), !dbg !40
  br label %__nv_rsqrtf.exit9, !dbg !40

663:                                              ; preds = %__nv_rsqrtf.exit6
  %664 = tail call float @llvm.nvvm.rsqrt.approx.f(float %639), !dbg !40
  br label %__nv_rsqrtf.exit9, !dbg !40

__nv_rsqrtf.exit9:                                ; preds = %661, %663
  %.0.i8 = phi float [ %662, %661 ], [ %664, %663 ], !dbg !40
  %665 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !40
  %.not.i10 = icmp eq i32 %665, 0, !dbg !40
  br i1 %.not.i10, label %668, label %666, !dbg !40

666:                                              ; preds = %__nv_rsqrtf.exit9
  %667 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %640), !dbg !40
  br label %__nv_rsqrtf.exit12, !dbg !40

668:                                              ; preds = %__nv_rsqrtf.exit9
  %669 = tail call float @llvm.nvvm.rsqrt.approx.f(float %640), !dbg !40
  br label %__nv_rsqrtf.exit12, !dbg !40

__nv_rsqrtf.exit12:                               ; preds = %666, %668
  %.0.i11 = phi float [ %667, %666 ], [ %669, %668 ], !dbg !40
  %670 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !40
  %.not.i13 = icmp eq i32 %670, 0, !dbg !40
  br i1 %.not.i13, label %673, label %671, !dbg !40

671:                                              ; preds = %__nv_rsqrtf.exit12
  %672 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %641), !dbg !40
  br label %__nv_rsqrtf.exit15, !dbg !40

673:                                              ; preds = %__nv_rsqrtf.exit12
  %674 = tail call float @llvm.nvvm.rsqrt.approx.f(float %641), !dbg !40
  br label %__nv_rsqrtf.exit15, !dbg !40

__nv_rsqrtf.exit15:                               ; preds = %671, %673
  %.0.i14 = phi float [ %672, %671 ], [ %674, %673 ], !dbg !40
  %675 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !40
  %.not.i16 = icmp eq i32 %675, 0, !dbg !40
  br i1 %.not.i16, label %678, label %676, !dbg !40

676:                                              ; preds = %__nv_rsqrtf.exit15
  %677 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %642), !dbg !40
  br label %__nv_rsqrtf.exit18, !dbg !40

678:                                              ; preds = %__nv_rsqrtf.exit15
  %679 = tail call float @llvm.nvvm.rsqrt.approx.f(float %642), !dbg !40
  br label %__nv_rsqrtf.exit18, !dbg !40

__nv_rsqrtf.exit18:                               ; preds = %676, %678
  %.0.i17 = phi float [ %677, %676 ], [ %679, %678 ], !dbg !40
  %680 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !40
  %.not.i19 = icmp eq i32 %680, 0, !dbg !40
  br i1 %.not.i19, label %683, label %681, !dbg !40

681:                                              ; preds = %__nv_rsqrtf.exit18
  %682 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %643), !dbg !40
  br label %__nv_rsqrtf.exit21, !dbg !40

683:                                              ; preds = %__nv_rsqrtf.exit18
  %684 = tail call float @llvm.nvvm.rsqrt.approx.f(float %643), !dbg !40
  br label %__nv_rsqrtf.exit21, !dbg !40

__nv_rsqrtf.exit21:                               ; preds = %681, %683
  %.0.i20 = phi float [ %682, %681 ], [ %684, %683 ], !dbg !40
  %685 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !40
  %.not.i22 = icmp eq i32 %685, 0, !dbg !40
  br i1 %.not.i22, label %688, label %686, !dbg !40

686:                                              ; preds = %__nv_rsqrtf.exit21
  %687 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %644), !dbg !40
  br label %__nv_rsqrtf.exit24, !dbg !40

688:                                              ; preds = %__nv_rsqrtf.exit21
  %689 = tail call float @llvm.nvvm.rsqrt.approx.f(float %644), !dbg !40
  br label %__nv_rsqrtf.exit24, !dbg !40

__nv_rsqrtf.exit24:                               ; preds = %686, %688
  %.0.i23 = phi float [ %687, %686 ], [ %689, %688 ], !dbg !40
  %690 = or disjoint i32 %9, %21, !dbg !13
  %691 = icmp slt i32 %690, 2048, !dbg !14
  %692 = insertelement <8 x float> poison, float %.0.i23, i64 0, !dbg !43
  %693 = insertelement <8 x float> %692, float %.0.i20, i64 1, !dbg !43
  %694 = insertelement <8 x float> %693, float %.0.i17, i64 2, !dbg !43
  %695 = insertelement <8 x float> %694, float %.0.i14, i64 3, !dbg !43
  %696 = insertelement <8 x float> %695, float %.0.i11, i64 4, !dbg !43
  %697 = insertelement <8 x float> %696, float %.0.i8, i64 5, !dbg !43
  %698 = insertelement <8 x float> %697, float %.0.i5, i64 6, !dbg !43
  %699 = insertelement <8 x float> %698, float %.0.i2, i64 7, !dbg !43
  %700 = fmul <8 x float> %411, %699, !dbg !43
  %701 = fcmp ogt <8 x float> %700, zeroinitializer, !dbg !44
  %702 = extractelement <8 x float> %700, i64 7, !dbg !45
  %703 = fmul float %702, 0x3FC99999A0000000, !dbg !46
  %704 = extractelement <8 x float> %700, i64 6, !dbg !45
  %705 = fmul float %704, 0x3FC99999A0000000, !dbg !46
  %706 = extractelement <8 x float> %700, i64 5, !dbg !45
  %707 = fmul float %706, 0x3FC99999A0000000, !dbg !46
  %708 = extractelement <8 x float> %700, i64 4, !dbg !45
  %709 = fmul float %708, 0x3FC99999A0000000, !dbg !46
  %710 = extractelement <8 x float> %700, i64 3, !dbg !45
  %711 = fmul float %710, 0x3FC99999A0000000, !dbg !46
  %712 = extractelement <8 x float> %700, i64 2, !dbg !45
  %713 = fmul float %712, 0x3FC99999A0000000, !dbg !46
  %714 = extractelement <8 x float> %700, i64 1, !dbg !45
  %715 = fmul float %714, 0x3FC99999A0000000, !dbg !46
  %716 = extractelement <8 x float> %700, i64 0, !dbg !45
  %717 = fmul float %716, 0x3FC99999A0000000, !dbg !46
  %718 = extractelement <8 x i1> %701, i64 7, !dbg !45
  %719 = select i1 %718, float %702, float %703, !dbg !45
  %720 = extractelement <8 x i1> %701, i64 6, !dbg !45
  %721 = select i1 %720, float %704, float %705, !dbg !45
  %722 = extractelement <8 x i1> %701, i64 5, !dbg !45
  %723 = select i1 %722, float %706, float %707, !dbg !45
  %724 = extractelement <8 x i1> %701, i64 4, !dbg !45
  %725 = select i1 %724, float %708, float %709, !dbg !45
  %726 = extractelement <8 x i1> %701, i64 3, !dbg !45
  %727 = select i1 %726, float %710, float %711, !dbg !45
  %728 = extractelement <8 x i1> %701, i64 2, !dbg !45
  %729 = select i1 %728, float %712, float %713, !dbg !45
  %730 = extractelement <8 x i1> %701, i64 1, !dbg !45
  %731 = select i1 %730, float %714, float %715, !dbg !45
  %732 = extractelement <8 x i1> %701, i64 0, !dbg !45
  %733 = select i1 %732, float %716, float %717, !dbg !45
  %734 = bitcast float %187 to i32, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %734, ptr addrspace(1) %65, i1 %80) #5, !dbg !47
  %735 = bitcast float %189 to i32, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %735, ptr addrspace(1) %67, i1 %81) #5, !dbg !47
  %736 = bitcast float %191 to i32, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %736, ptr addrspace(1) %69, i1 %82) #5, !dbg !47
  %737 = bitcast float %193 to i32, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %737, ptr addrspace(1) %71, i1 %83) #5, !dbg !47
  %738 = bitcast float %195 to i32, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %738, ptr addrspace(1) %73, i1 %84) #5, !dbg !47
  %739 = bitcast float %197 to i32, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %739, ptr addrspace(1) %75, i1 %85) #5, !dbg !47
  %740 = bitcast float %199 to i32, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %740, ptr addrspace(1) %77, i1 %86) #5, !dbg !47
  %741 = bitcast float %201 to i32, !dbg !47
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %741, ptr addrspace(1) %79, i1 %87) #5, !dbg !47
  %742 = getelementptr float, ptr addrspace(1) %3, i64 %64, !dbg !48
  %743 = getelementptr float, ptr addrspace(1) %3, i64 %66, !dbg !48
  %744 = getelementptr float, ptr addrspace(1) %3, i64 %68, !dbg !48
  %745 = getelementptr float, ptr addrspace(1) %3, i64 %70, !dbg !48
  %746 = getelementptr float, ptr addrspace(1) %3, i64 %72, !dbg !48
  %747 = getelementptr float, ptr addrspace(1) %3, i64 %74, !dbg !48
  %748 = getelementptr float, ptr addrspace(1) %3, i64 %76, !dbg !48
  %749 = getelementptr float, ptr addrspace(1) %3, i64 %78, !dbg !48
  %750 = bitcast float %719 to i32, !dbg !49
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %750, ptr addrspace(1) %742, i1 %80) #5, !dbg !49
  %751 = bitcast float %721 to i32, !dbg !49
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %751, ptr addrspace(1) %743, i1 %81) #5, !dbg !49
  %752 = bitcast float %723 to i32, !dbg !49
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %752, ptr addrspace(1) %744, i1 %82) #5, !dbg !49
  %753 = bitcast float %725 to i32, !dbg !49
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %753, ptr addrspace(1) %745, i1 %83) #5, !dbg !49
  %754 = bitcast float %727 to i32, !dbg !49
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %754, ptr addrspace(1) %746, i1 %84) #5, !dbg !49
  %755 = bitcast float %729 to i32, !dbg !49
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %755, ptr addrspace(1) %747, i1 %85) #5, !dbg !49
  %756 = bitcast float %731 to i32, !dbg !49
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %756, ptr addrspace(1) %748, i1 %86) #5, !dbg !49
  %757 = bitcast float %733 to i32, !dbg !49
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %757, ptr addrspace(1) %749, i1 %87) #5, !dbg !49
  %758 = sext i32 %690 to i64, !dbg !50
  %759 = getelementptr float, ptr addrspace(1) %4, i64 %758, !dbg !50
  %760 = and i32 %10, 224, !dbg !51
  %761 = icmp eq i32 %760, 0, !dbg !51
  %762 = bitcast float %.0.i to i32, !dbg !51
  %763 = and i1 %761, %691, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %762, ptr addrspace(1) %759, i1 %763) #5, !dbg !51
  %764 = getelementptr float, ptr addrspace(1) %2, i64 %758, !dbg !52
  %765 = bitcast float %394 to i32, !dbg !53
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %765, ptr addrspace(1) %764, i1 %763) #5, !dbg !53
  ret void, !dbg !54
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "con45dogmsquhfirckkmuqjrtqw572npwqpo6mhbon6fvcackmgu.py", directory: "inductor_cache/on")
!4 = !{ptr @triton_per_fused__native_batch_norm_legit_convolution_leaky_relu_3, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__native_batch_norm_legit_convolution_leaky_relu_3, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__native_batch_norm_legit_convolution_leaky_relu_3", linkageName: "triton_per_fused__native_batch_norm_legit_convolution_leaky_relu_3", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 28, column: 21, scope: !7)
!17 = !DILocation(line: 31, column: 19, scope: !7)
!18 = !DILocation(line: 32, column: 42, scope: !7)
!19 = !DILocation(line: 32, column: 39, scope: !7)
!20 = !DILocation(line: 32, column: 34, scope: !7)
!21 = !DILocation(line: 32, column: 55, scope: !7)
!22 = !DILocation(line: 32, column: 47, scope: !7)
!23 = !DILocation(line: 33, column: 30, scope: !7)
!24 = !DILocation(line: 33, column: 35, scope: !7)
!25 = !DILocation(line: 267, column: 36, scope: !26, inlinedAt: !28)
!26 = distinct !DILexicalBlockFile(scope: !7, file: !27, discriminator: 0)
!27 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!28 = !DILocation(line: 39, column: 24, scope: !7)
!29 = !DILocation(line: 42, column: 19, scope: !7)
!30 = !DILocation(line: 34, column: 18, scope: !7)
!31 = !DILocation(line: 38, column: 41, scope: !7)
!32 = !DILocation(line: 256, column: 15, scope: !33, inlinedAt: !28)
!33 = distinct !DILexicalBlockFile(scope: !26, file: !27, discriminator: 0)
!34 = !DILocation(line: 43, column: 19, scope: !7)
!35 = !DILocation(line: 44, column: 20, scope: !7)
!36 = !DILocation(line: 46, column: 43, scope: !7)
!37 = !DILocation(line: 267, column: 36, scope: !26, inlinedAt: !38)
!38 = !DILocation(line: 47, column: 26, scope: !7)
!39 = !DILocation(line: 256, column: 15, scope: !33, inlinedAt: !38)
!40 = !DILocation(line: 53, column: 28, scope: !7)
!41 = !DILocation(line: 50, column: 20, scope: !7)
!42 = !DILocation(line: 52, column: 20, scope: !7)
!43 = !DILocation(line: 54, column: 20, scope: !7)
!44 = !DILocation(line: 56, column: 20, scope: !7)
!45 = !DILocation(line: 59, column: 35, scope: !7)
!46 = !DILocation(line: 58, column: 20, scope: !7)
!47 = !DILocation(line: 60, column: 47, scope: !7)
!48 = !DILocation(line: 61, column: 25, scope: !7)
!49 = !DILocation(line: 61, column: 45, scope: !7)
!50 = !DILocation(line: 62, column: 25, scope: !7)
!51 = !DILocation(line: 62, column: 37, scope: !7)
!52 = !DILocation(line: 63, column: 25, scope: !7)
!53 = !DILocation(line: 63, column: 37, scope: !7)
!54 = !DILocation(line: 63, column: 4, scope: !7)
