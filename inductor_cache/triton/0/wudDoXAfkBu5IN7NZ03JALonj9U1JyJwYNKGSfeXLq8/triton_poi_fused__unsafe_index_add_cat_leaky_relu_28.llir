; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__unsafe_index_add_cat_leaky_relu_28(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %8 = shl i32 %7, 10, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = shl i32 %9, 2, !dbg !12
  %11 = and i32 %10, 508, !dbg !12
  %12 = or disjoint i32 %8, %11, !dbg !13
  %13 = or disjoint i32 %12, 2, !dbg !13
  %14 = or disjoint i32 %12, 512, !dbg !13
  %.frozen = freeze i32 %12, !dbg !14
  %15 = sdiv i32 %.frozen, 32, !dbg !14
  %16 = sdiv i32 %14, 32, !dbg !14
  %17 = srem i32 %15, 32, !dbg !15
  %18 = srem i32 %16, 32, !dbg !15
  %19 = mul i32 %15, 32, !dbg !16
  %.decomposed = sub i32 %.frozen, %19, !dbg !16
  %20 = srem i32 %13, 32, !dbg !16
  %.frozen9 = freeze i32 %12, !dbg !17
  %21 = sdiv i32 %.frozen9, 1024, !dbg !17
  %.frozen11 = freeze i32 %14, !dbg !17
  %22 = sdiv i32 %.frozen11, 1024, !dbg !17
  %23 = srem i32 %21, 64, !dbg !18
  %24 = srem i32 %22, 64, !dbg !18
  %.frozen13 = freeze i32 %12, !dbg !19
  %25 = sdiv i32 %.frozen13, 65536, !dbg !19
  %.frozen14 = freeze i32 %14, !dbg !19
  %26 = sdiv i32 %.frozen14, 65536, !dbg !19
  %27 = mul i32 %21, 1024, !dbg !20
  %.decomposed10 = sub i32 %.frozen9, %27, !dbg !20
  %28 = mul i32 %22, 1024, !dbg !20
  %.decomposed12 = sub i32 %.frozen11, %28, !dbg !20
  %29 = sext i32 %17 to i64, !dbg !21
  %30 = getelementptr i64, ptr addrspace(1) %0, i64 %29, !dbg !21
  %31 = sext i32 %18 to i64, !dbg !21
  %32 = getelementptr i64, ptr addrspace(1) %0, i64 %31, !dbg !21
  %33 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %30, i1 true) #1, !dbg !22
  %34 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %30, i1 true) #1, !dbg !22
  %35 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %30, i1 true) #1, !dbg !22
  %36 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %30, i1 true) #1, !dbg !22
  %37 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %32, i1 true) #1, !dbg !22
  %38 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %32, i1 true) #1, !dbg !22
  %39 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %32, i1 true) #1, !dbg !22
  %40 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %32, i1 true) #1, !dbg !22
  %41 = sext i32 %.decomposed to i64, !dbg !23
  %42 = getelementptr i64, ptr addrspace(1) %0, i64 %41, !dbg !23
  %43 = sext i32 %20 to i64, !dbg !23
  %44 = getelementptr i64, ptr addrspace(1) %0, i64 %43, !dbg !23
  %45 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %42, i1 true) #1, !dbg !24
  %46 = extractvalue { i64, i64 } %45, 0, !dbg !24
  %47 = extractvalue { i64, i64 } %45, 1, !dbg !24
  %48 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %44, i1 true) #1, !dbg !24
  %49 = extractvalue { i64, i64 } %48, 0, !dbg !24
  %50 = extractvalue { i64, i64 } %48, 1, !dbg !24
  %51 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %42, i1 true) #1, !dbg !24
  %52 = extractvalue { i64, i64 } %51, 0, !dbg !24
  %53 = extractvalue { i64, i64 } %51, 1, !dbg !24
  %54 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];", "=l,=l,l,b"(ptr addrspace(1) %44, i1 true) #1, !dbg !24
  %55 = extractvalue { i64, i64 } %54, 0, !dbg !24
  %56 = extractvalue { i64, i64 } %54, 1, !dbg !24
  %57 = lshr i64 %33, 59, !dbg !25
  %58 = and i64 %57, 16, !dbg !25
  %59 = add i64 %58, %33, !dbg !25
  %60 = lshr i64 %37, 59, !dbg !25
  %61 = and i64 %60, 16, !dbg !25
  %62 = add i64 %61, %37, !dbg !25
  %63 = lshr i64 %46, 59, !dbg !26
  %64 = and i64 %63, 16, !dbg !26
  %65 = lshr i64 %47, 59, !dbg !26
  %66 = and i64 %65, 16, !dbg !26
  %67 = lshr i64 %49, 59, !dbg !26
  %68 = and i64 %67, 16, !dbg !26
  %69 = lshr i64 %50, 59, !dbg !26
  %70 = and i64 %69, 16, !dbg !26
  %71 = lshr i64 %52, 59, !dbg !26
  %72 = and i64 %71, 16, !dbg !26
  %73 = lshr i64 %53, 59, !dbg !26
  %74 = and i64 %73, 16, !dbg !26
  %75 = lshr i64 %55, 59, !dbg !26
  %76 = and i64 %75, 16, !dbg !26
  %77 = lshr i64 %56, 59, !dbg !26
  %78 = and i64 %77, 16, !dbg !26
  %79 = shl i64 %59, 4, !dbg !27
  %80 = shl i64 %62, 4, !dbg !27
  %81 = shl nsw i32 %21, 8, !dbg !28
  %82 = shl nsw i32 %22, 8, !dbg !28
  %83 = sext i32 %81 to i64, !dbg !29
  %84 = sext i32 %82 to i64, !dbg !29
  %85 = getelementptr float, ptr addrspace(1) %1, i64 %46, !dbg !30
  %86 = getelementptr float, ptr addrspace(1) %85, i64 %64, !dbg !30
  %87 = getelementptr float, ptr addrspace(1) %86, i64 %79, !dbg !30
  %88 = getelementptr float, ptr addrspace(1) %87, i64 %83, !dbg !30
  %89 = getelementptr float, ptr addrspace(1) %1, i64 %47, !dbg !30
  %90 = getelementptr float, ptr addrspace(1) %89, i64 %66, !dbg !30
  %91 = getelementptr float, ptr addrspace(1) %90, i64 %79, !dbg !30
  %92 = getelementptr float, ptr addrspace(1) %91, i64 %83, !dbg !30
  %93 = getelementptr float, ptr addrspace(1) %1, i64 %49, !dbg !30
  %94 = getelementptr float, ptr addrspace(1) %93, i64 %68, !dbg !30
  %95 = getelementptr float, ptr addrspace(1) %94, i64 %79, !dbg !30
  %96 = getelementptr float, ptr addrspace(1) %95, i64 %83, !dbg !30
  %97 = getelementptr float, ptr addrspace(1) %1, i64 %50, !dbg !30
  %98 = getelementptr float, ptr addrspace(1) %97, i64 %70, !dbg !30
  %99 = getelementptr float, ptr addrspace(1) %98, i64 %79, !dbg !30
  %100 = getelementptr float, ptr addrspace(1) %99, i64 %83, !dbg !30
  %101 = getelementptr float, ptr addrspace(1) %1, i64 %52, !dbg !30
  %102 = getelementptr float, ptr addrspace(1) %101, i64 %72, !dbg !30
  %103 = getelementptr float, ptr addrspace(1) %102, i64 %80, !dbg !30
  %104 = getelementptr float, ptr addrspace(1) %103, i64 %84, !dbg !30
  %105 = getelementptr float, ptr addrspace(1) %1, i64 %53, !dbg !30
  %106 = getelementptr float, ptr addrspace(1) %105, i64 %74, !dbg !30
  %107 = getelementptr float, ptr addrspace(1) %106, i64 %80, !dbg !30
  %108 = getelementptr float, ptr addrspace(1) %107, i64 %84, !dbg !30
  %109 = getelementptr float, ptr addrspace(1) %1, i64 %55, !dbg !30
  %110 = getelementptr float, ptr addrspace(1) %109, i64 %76, !dbg !30
  %111 = getelementptr float, ptr addrspace(1) %110, i64 %80, !dbg !30
  %112 = getelementptr float, ptr addrspace(1) %111, i64 %84, !dbg !30
  %113 = getelementptr float, ptr addrspace(1) %1, i64 %56, !dbg !30
  %114 = getelementptr float, ptr addrspace(1) %113, i64 %78, !dbg !30
  %115 = getelementptr float, ptr addrspace(1) %114, i64 %80, !dbg !30
  %116 = getelementptr float, ptr addrspace(1) %115, i64 %84, !dbg !30
  %117 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %88, i1 true) #1, !dbg !31
  %118 = bitcast i32 %117 to float, !dbg !31
  %119 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 true) #1, !dbg !31
  %120 = bitcast i32 %119 to float, !dbg !31
  %121 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 true) #1, !dbg !31
  %122 = bitcast i32 %121 to float, !dbg !31
  %123 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %100, i1 true) #1, !dbg !31
  %124 = bitcast i32 %123 to float, !dbg !31
  %125 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %104, i1 true) #1, !dbg !31
  %126 = bitcast i32 %125 to float, !dbg !31
  %127 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %108, i1 true) #1, !dbg !31
  %128 = bitcast i32 %127 to float, !dbg !31
  %129 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %112, i1 true) #1, !dbg !31
  %130 = bitcast i32 %129 to float, !dbg !31
  %131 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %116, i1 true) #1, !dbg !31
  %132 = bitcast i32 %131 to float, !dbg !31
  %133 = fcmp ogt float %118, 0.000000e+00, !dbg !32
  %134 = fcmp ogt float %120, 0.000000e+00, !dbg !32
  %135 = fcmp ogt float %122, 0.000000e+00, !dbg !32
  %136 = fcmp ogt float %124, 0.000000e+00, !dbg !32
  %137 = fcmp ogt float %126, 0.000000e+00, !dbg !32
  %138 = fcmp ogt float %128, 0.000000e+00, !dbg !32
  %139 = fcmp ogt float %130, 0.000000e+00, !dbg !32
  %140 = fcmp ogt float %132, 0.000000e+00, !dbg !32
  %141 = fmul float %118, 0x3FC99999A0000000, !dbg !33
  %142 = fmul float %120, 0x3FC99999A0000000, !dbg !33
  %143 = fmul float %122, 0x3FC99999A0000000, !dbg !33
  %144 = fmul float %124, 0x3FC99999A0000000, !dbg !33
  %145 = fmul float %126, 0x3FC99999A0000000, !dbg !33
  %146 = fmul float %128, 0x3FC99999A0000000, !dbg !33
  %147 = fmul float %130, 0x3FC99999A0000000, !dbg !33
  %148 = fmul float %132, 0x3FC99999A0000000, !dbg !33
  %149 = select i1 %133, float %118, float %141, !dbg !34
  %150 = select i1 %134, float %120, float %142, !dbg !34
  %151 = select i1 %135, float %122, float %143, !dbg !34
  %152 = select i1 %136, float %124, float %144, !dbg !34
  %153 = select i1 %137, float %126, float %145, !dbg !34
  %154 = select i1 %138, float %128, float %146, !dbg !34
  %155 = select i1 %139, float %130, float %147, !dbg !34
  %156 = select i1 %140, float %132, float %148, !dbg !34
  %157 = icmp slt i32 %23, 48, !dbg !35
  %158 = icmp slt i32 %24, 48, !dbg !35
  %159 = mul i32 %25, 65536, !dbg !36
  %srem.decomposed = sub i32 %.frozen13, %159, !dbg !36
  %160 = mul i32 %26, 65536, !dbg !36
  %srem1.decomposed = sub i32 %.frozen14, %160, !dbg !36
  %161 = mul nsw i32 %25, 49152, !dbg !37
  %162 = mul nsw i32 %26, 49152, !dbg !37
  %163 = add nsw i32 %161, %srem.decomposed, !dbg !38
  %164 = add nsw i32 %162, %srem1.decomposed, !dbg !38
  %165 = sext i32 %163 to i64, !dbg !39
  %166 = getelementptr float, ptr addrspace(1) %2, i64 %165, !dbg !39
  %167 = sext i32 %164 to i64, !dbg !39
  %168 = getelementptr float, ptr addrspace(1) %2, i64 %167, !dbg !39
  %169 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %166, i1 %157, i32 0, i1 %157, i32 0, i1 %157, i32 0, i1 %157, i32 0, i1 %157) #1, !dbg !40
  %170 = extractvalue { i32, i32, i32, i32 } %169, 0, !dbg !40
  %171 = extractvalue { i32, i32, i32, i32 } %169, 1, !dbg !40
  %172 = extractvalue { i32, i32, i32, i32 } %169, 2, !dbg !40
  %173 = extractvalue { i32, i32, i32, i32 } %169, 3, !dbg !40
  %174 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %168, i1 %158, i32 0, i1 %158, i32 0, i1 %158, i32 0, i1 %158, i32 0, i1 %158) #1, !dbg !40
  %175 = extractvalue { i32, i32, i32, i32 } %174, 0, !dbg !40
  %176 = extractvalue { i32, i32, i32, i32 } %174, 1, !dbg !40
  %177 = extractvalue { i32, i32, i32, i32 } %174, 2, !dbg !40
  %178 = extractvalue { i32, i32, i32, i32 } %174, 3, !dbg !40
  %179 = icmp sgt i32 %23, 47, !dbg !41
  %180 = icmp sgt i32 %24, 47, !dbg !41
  %181 = shl nsw i32 %23, 10, !dbg !42
  %182 = shl nsw i32 %24, 10, !dbg !42
  %183 = shl nsw i32 %25, 14, !dbg !43
  %184 = shl nsw i32 %26, 14, !dbg !43
  %185 = add nsw i32 %.decomposed10, -49152, !dbg !42
  %186 = add nsw i32 %185, %183, !dbg !44
  %187 = add nsw i32 %186, %181, !dbg !45
  %188 = add nsw i32 %.decomposed12, -49152, !dbg !42
  %189 = add nsw i32 %188, %184, !dbg !44
  %190 = add nsw i32 %189, %182, !dbg !45
  %191 = sext i32 %187 to i64, !dbg !46
  %192 = getelementptr float, ptr addrspace(1) %3, i64 %191, !dbg !46
  %193 = sext i32 %190 to i64, !dbg !46
  %194 = getelementptr float, ptr addrspace(1) %3, i64 %193, !dbg !46
  %195 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %192, i1 %179, i32 0, i1 %179, i32 0, i1 %179, i32 0, i1 %179, i32 0, i1 %179) #1, !dbg !47
  %196 = extractvalue { i32, i32, i32, i32 } %195, 0, !dbg !47
  %197 = extractvalue { i32, i32, i32, i32 } %195, 1, !dbg !47
  %198 = extractvalue { i32, i32, i32, i32 } %195, 2, !dbg !47
  %199 = extractvalue { i32, i32, i32, i32 } %195, 3, !dbg !47
  %200 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %194, i1 %180, i32 0, i1 %180, i32 0, i1 %180, i32 0, i1 %180, i32 0, i1 %180) #1, !dbg !47
  %201 = extractvalue { i32, i32, i32, i32 } %200, 0, !dbg !47
  %202 = extractvalue { i32, i32, i32, i32 } %200, 1, !dbg !47
  %203 = extractvalue { i32, i32, i32, i32 } %200, 2, !dbg !47
  %204 = extractvalue { i32, i32, i32, i32 } %200, 3, !dbg !47
  %.v = select i1 %157, i32 %170, i32 %196, !dbg !48
  %205 = bitcast i32 %.v to float, !dbg !48
  %.v2 = select i1 %157, i32 %171, i32 %197, !dbg !48
  %206 = bitcast i32 %.v2 to float, !dbg !48
  %.v3 = select i1 %157, i32 %172, i32 %198, !dbg !48
  %207 = bitcast i32 %.v3 to float, !dbg !48
  %.v4 = select i1 %157, i32 %173, i32 %199, !dbg !48
  %208 = bitcast i32 %.v4 to float, !dbg !48
  %.v5 = select i1 %158, i32 %175, i32 %201, !dbg !48
  %209 = bitcast i32 %.v5 to float, !dbg !48
  %.v6 = select i1 %158, i32 %176, i32 %202, !dbg !48
  %210 = bitcast i32 %.v6 to float, !dbg !48
  %.v7 = select i1 %158, i32 %177, i32 %203, !dbg !48
  %211 = bitcast i32 %.v7 to float, !dbg !48
  %.v8 = select i1 %158, i32 %178, i32 %204, !dbg !48
  %212 = bitcast i32 %.v8 to float, !dbg !48
  %213 = fadd float %149, %205, !dbg !49
  %214 = fadd float %150, %206, !dbg !49
  %215 = fadd float %151, %207, !dbg !49
  %216 = fadd float %152, %208, !dbg !49
  %217 = fadd float %153, %209, !dbg !49
  %218 = fadd float %154, %210, !dbg !49
  %219 = fadd float %155, %211, !dbg !49
  %220 = fadd float %156, %212, !dbg !49
  %221 = sext i32 %12 to i64, !dbg !50
  %222 = getelementptr float, ptr addrspace(1) %4, i64 %221, !dbg !50
  %223 = sext i32 %14 to i64, !dbg !50
  %224 = getelementptr float, ptr addrspace(1) %4, i64 %223, !dbg !50
  %225 = bitcast float %213 to i32, !dbg !51
  %226 = bitcast float %214 to i32, !dbg !51
  %227 = bitcast float %215 to i32, !dbg !51
  %228 = bitcast float %216 to i32, !dbg !51
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %225, i32 %226, i32 %227, i32 %228, ptr addrspace(1) %222, i1 true) #1, !dbg !51
  %229 = bitcast float %217 to i32, !dbg !51
  %230 = bitcast float %218 to i32, !dbg !51
  %231 = bitcast float %219 to i32, !dbg !51
  %232 = bitcast float %220 to i32, !dbg !51
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %229, i32 %230, i32 %231, i32 %232, ptr addrspace(1) %224, i1 true) #1, !dbg !51
  ret void, !dbg !52
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cgsk6swswzs3rixnaowgnd6c6xnvdkkugnznf63dqr2rklrjbup3.py", directory: "inductor_cache/gs")
!4 = !{ptr @triton_poi_fused__unsafe_index_add_cat_leaky_relu_28, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__unsafe_index_add_cat_leaky_relu_28, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__unsafe_index_add_cat_leaky_relu_28", linkageName: "triton_poi_fused__unsafe_index_add_cat_leaky_relu_28", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 27, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 27, column: 29, scope: !7)
!19 = !DILocation(line: 28, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 31, column: 30, scope: !7)
!22 = !DILocation(line: 31, column: 35, scope: !7)
!23 = !DILocation(line: 32, column: 30, scope: !7)
!24 = !DILocation(line: 32, column: 35, scope: !7)
!25 = !DILocation(line: 36, column: 32, scope: !7)
!26 = !DILocation(line: 39, column: 32, scope: !7)
!27 = !DILocation(line: 40, column: 40, scope: !7)
!28 = !DILocation(line: 40, column: 51, scope: !7)
!29 = !DILocation(line: 40, column: 47, scope: !7)
!30 = !DILocation(line: 40, column: 30, scope: !7)
!31 = !DILocation(line: 40, column: 56, scope: !7)
!32 = !DILocation(line: 42, column: 19, scope: !7)
!33 = !DILocation(line: 44, column: 19, scope: !7)
!34 = !DILocation(line: 45, column: 34, scope: !7)
!35 = !DILocation(line: 50, column: 20, scope: !7)
!36 = !DILocation(line: 51, column: 36, scope: !7)
!37 = !DILocation(line: 51, column: 54, scope: !7)
!38 = !DILocation(line: 51, column: 48, scope: !7)
!39 = !DILocation(line: 51, column: 31, scope: !7)
!40 = !DILocation(line: 51, column: 59, scope: !7)
!41 = !DILocation(line: 52, column: 21, scope: !7)
!42 = !DILocation(line: 55, column: 42, scope: !7)
!43 = !DILocation(line: 55, column: 62, scope: !7)
!44 = !DILocation(line: 55, column: 36, scope: !7)
!45 = !DILocation(line: 55, column: 56, scope: !7)
!46 = !DILocation(line: 55, column: 31, scope: !7)
!47 = !DILocation(line: 55, column: 67, scope: !7)
!48 = !DILocation(line: 56, column: 35, scope: !7)
!49 = !DILocation(line: 57, column: 20, scope: !7)
!50 = !DILocation(line: 58, column: 25, scope: !7)
!51 = !DILocation(line: 58, column: 37, scope: !7)
!52 = !DILocation(line: 58, column: 4, scope: !7)
