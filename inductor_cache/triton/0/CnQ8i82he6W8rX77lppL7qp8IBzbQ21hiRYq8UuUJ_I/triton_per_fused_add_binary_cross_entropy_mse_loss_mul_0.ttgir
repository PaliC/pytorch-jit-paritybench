#blocked = #triton_gpu.blocked<{sizePerThread = [4], threadsPerWarp = [32], warpsPerCTA = [2], order = [0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1], threadsPerWarp = [32], warpsPerCTA = [2], order = [0]}>
#loc = loc("inductor_cache/md/cmdrsgcjytwgtdz7atfluzoijiygxl2mstehqid5uyp7dmqq2aij.py":19:0)
#loc1 = loc(unknown)
#loc33 = loc("inductor_cache/md/cmdrsgcjytwgtdz7atfluzoijiygxl2mstehqid5uyp7dmqq2aij.py":51:59)
#loc39 = loc("inductor_cache/md/cmdrsgcjytwgtdz7atfluzoijiygxl2mstehqid5uyp7dmqq2aij.py":55:59)
#loc43 = loc("inductor_cache/md/cmdrsgcjytwgtdz7atfluzoijiygxl2mstehqid5uyp7dmqq2aij.py":59:59)
#loc47 = loc("inductor_cache/md/cmdrsgcjytwgtdz7atfluzoijiygxl2mstehqid5uyp7dmqq2aij.py":63:59)
#loc71 = loc(callsite(#loc1 at #loc33))
#loc75 = loc(callsite(#loc1 at #loc39))
#loc78 = loc(callsite(#loc1 at #loc43))
#loc81 = loc(callsite(#loc1 at #loc47))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 2 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_per_fused_add_binary_cross_entropy_mse_loss_mul_0(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/md/cmdrsgcjytwgtdz7atfluzoijiygxl2mstehqid5uyp7dmqq2aij.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/md/cmdrsgcjytwgtdz7atfluzoijiygxl2mstehqid5uyp7dmqq2aij.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/md/cmdrsgcjytwgtdz7atfluzoijiygxl2mstehqid5uyp7dmqq2aij.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/md/cmdrsgcjytwgtdz7atfluzoijiygxl2mstehqid5uyp7dmqq2aij.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/md/cmdrsgcjytwgtdz7atfluzoijiygxl2mstehqid5uyp7dmqq2aij.py":19:0), %arg5: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/md/cmdrsgcjytwgtdz7atfluzoijiygxl2mstehqid5uyp7dmqq2aij.py":19:0), %arg6: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/md/cmdrsgcjytwgtdz7atfluzoijiygxl2mstehqid5uyp7dmqq2aij.py":19:0), %arg7: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/md/cmdrsgcjytwgtdz7atfluzoijiygxl2mstehqid5uyp7dmqq2aij.py":19:0), %arg8: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/md/cmdrsgcjytwgtdz7atfluzoijiygxl2mstehqid5uyp7dmqq2aij.py":19:0), %arg9: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/md/cmdrsgcjytwgtdz7atfluzoijiygxl2mstehqid5uyp7dmqq2aij.py":19:0)) attributes {noinline = false} {
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst = arith.constant 5.000000e-02 : f32 loc(#loc1)
    %cst_0 = arith.constant 0.949999988 : f32 loc(#loc1)
    %cst_1 = arith.constant 2.560000e+02 : f32 loc(#loc1)
    %cst_2 = arith.constant 0.000000e+00 : f32 loc(#loc1)
    %cst_3 = arith.constant dense<-1.000000e+02> : tensor<256xf32, #blocked> loc(#loc1)
    %cst_4 = arith.constant dense<0.000000e+00> : tensor<256xf32, #blocked> loc(#loc1)
    %cst_5 = arith.constant dense<1.000000e+00> : tensor<256xf32, #blocked> loc(#loc1)
    %0 = tt.make_range {end = 256 : i32, start = 0 : i32} : tensor<256xi32, #blocked> loc(#loc2)
    %1 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc3)
    %2 = tt.addptr %1, %0 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc3)
    %3 = tt.load %2 : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc4)
    %4 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc5)
    %5 = tt.addptr %4, %0 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc5)
    %6 = tt.load %5 : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc6)
    %7 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc7)
    %8 = tt.addptr %7, %0 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc7)
    %9 = tt.load %8 : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc8)
    %10 = tt.splat %arg4 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc9)
    %11 = tt.addptr %10, %0 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc9)
    %12 = tt.load %11 : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc10)
    %13 = tt.splat %arg5 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc11)
    %14 = tt.addptr %13, %0 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc11)
    %15 = tt.load %14 : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc12)
    %16 = tt.splat %arg6 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc13)
    %17 = tt.addptr %16, %0 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc13)
    %18 = tt.load %17 : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc14)
    %19 = tt.splat %arg7 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc15)
    %20 = tt.addptr %19, %0 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc15)
    %21 = tt.load %20 : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc16)
    %22 = tt.splat %arg8 : !tt.ptr<f32> -> tensor<256x!tt.ptr<f32>, #blocked> loc(#loc17)
    %23 = tt.addptr %22, %0 : tensor<256x!tt.ptr<f32>, #blocked>, tensor<256xi32, #blocked> loc(#loc17)
    %24 = tt.load %23 : tensor<256x!tt.ptr<f32>, #blocked> loc(#loc18)
    %25 = arith.subf %3, %cst_5 : tensor<256xf32, #blocked> loc(#loc19)
    %26 = arith.subf %cst_4, %6 : tensor<256xf32, #blocked> loc(#loc20)
    %27 = tt.extern_elementwise %26 {libname = "", libpath = "", pure = true, symbol = "__nv_log1pf"} : (tensor<256xf32, #blocked>) -> tensor<256xf32, #blocked> loc(#loc21)
    %28 = arith.cmpf ogt, %27, %cst_3 : tensor<256xf32, #blocked> loc(#loc62)
    %29 = arith.cmpf une, %27, %27 : tensor<256xf32, #blocked> loc(#loc63)
    %30 = arith.ori %28, %29 : tensor<256xi1, #blocked> loc(#loc64)
    %31 = arith.select %30, %27, %cst_3 : tensor<256xi1, #blocked>, tensor<256xf32, #blocked> loc(#loc65)
    %32 = arith.mulf %25, %31 : tensor<256xf32, #blocked> loc(#loc27)
    %33 = math.log %6 : tensor<256xf32, #blocked> loc(#loc28)
    %34 = arith.cmpf ogt, %33, %cst_3 : tensor<256xf32, #blocked> loc(#loc66)
    %35 = arith.cmpf une, %33, %33 : tensor<256xf32, #blocked> loc(#loc67)
    %36 = arith.ori %34, %35 : tensor<256xi1, #blocked> loc(#loc68)
    %37 = arith.select %36, %33, %cst_3 : tensor<256xi1, #blocked>, tensor<256xf32, #blocked> loc(#loc69)
    %38 = arith.mulf %3, %37 : tensor<256xf32, #blocked> loc(#loc30)
    %39 = arith.subf %32, %38 : tensor<256xf32, #blocked> loc(#loc31)
    %40 = "tt.reduce"(%39) <{axis = 0 : i32}> ({
    ^bb0(%arg10: f32 loc(callsite(#loc1 at #loc33)), %arg11: f32 loc(callsite(#loc1 at #loc33))):
      %66 = arith.addf %arg10, %arg11 : f32 loc(#loc83)
      tt.reduce.return %66 : f32 loc(#loc70)
    }) : (tensor<256xf32, #blocked>) -> f32 loc(#loc70)
    %41 = arith.addf %40, %cst_2 : f32 loc(#loc73)
    %42 = arith.subf %9, %12 : tensor<256xf32, #blocked> loc(#loc37)
    %43 = arith.mulf %42, %42 : tensor<256xf32, #blocked> loc(#loc38)
    %44 = "tt.reduce"(%43) <{axis = 0 : i32}> ({
    ^bb0(%arg10: f32 loc(callsite(#loc1 at #loc39)), %arg11: f32 loc(callsite(#loc1 at #loc39))):
      %66 = arith.addf %arg10, %arg11 : f32 loc(#loc84)
      tt.reduce.return %66 : f32 loc(#loc74)
    }) : (tensor<256xf32, #blocked>) -> f32 loc(#loc74)
    %45 = arith.addf %44, %cst_2 : f32 loc(#loc76)
    %46 = arith.subf %15, %18 : tensor<256xf32, #blocked> loc(#loc41)
    %47 = arith.mulf %46, %46 : tensor<256xf32, #blocked> loc(#loc42)
    %48 = "tt.reduce"(%47) <{axis = 0 : i32}> ({
    ^bb0(%arg10: f32 loc(callsite(#loc1 at #loc43)), %arg11: f32 loc(callsite(#loc1 at #loc43))):
      %66 = arith.addf %arg10, %arg11 : f32 loc(#loc85)
      tt.reduce.return %66 : f32 loc(#loc77)
    }) : (tensor<256xf32, #blocked>) -> f32 loc(#loc77)
    %49 = arith.addf %48, %cst_2 : f32 loc(#loc79)
    %50 = arith.subf %21, %24 : tensor<256xf32, #blocked> loc(#loc45)
    %51 = arith.mulf %50, %50 : tensor<256xf32, #blocked> loc(#loc46)
    %52 = "tt.reduce"(%51) <{axis = 0 : i32}> ({
    ^bb0(%arg10: f32 loc(callsite(#loc1 at #loc47)), %arg11: f32 loc(callsite(#loc1 at #loc47))):
      %66 = arith.addf %arg10, %arg11 : f32 loc(#loc86)
      tt.reduce.return %66 : f32 loc(#loc80)
    }) : (tensor<256xf32, #blocked>) -> f32 loc(#loc80)
    %53 = arith.addf %52, %cst_2 : f32 loc(#loc82)
    %54 = arith.divf %41, %cst_1 : f32 loc(#loc49)
    %55 = arith.mulf %54, %cst_0 : f32 loc(#loc50)
    %56 = arith.divf %45, %cst_1 : f32 loc(#loc51)
    %57 = arith.divf %49, %cst_1 : f32 loc(#loc52)
    %58 = arith.addf %56, %57 : f32 loc(#loc53)
    %59 = arith.divf %53, %cst_1 : f32 loc(#loc54)
    %60 = arith.addf %58, %59 : f32 loc(#loc55)
    %61 = arith.mulf %60, %cst : f32 loc(#loc56)
    %62 = arith.addf %55, %61 : f32 loc(#loc57)
    %63 = tt.splat %62 : f32 -> tensor<1xf32, #blocked1> loc(#loc57)
    gpu.barrier loc(#loc58)
    %64 = tt.addptr %arg0, %c0_i32 : !tt.ptr<f32>, i32 loc(#loc59)
    %65 = tt.splat %64 : !tt.ptr<f32> -> tensor<1x!tt.ptr<f32>, #blocked1> loc(#loc59)
    tt.store %65, %63 : tensor<1x!tt.ptr<f32>, #blocked1> loc(#loc60)
    tt.return loc(#loc61)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/md/cmdrsgcjytwgtdz7atfluzoijiygxl2mstehqid5uyp7dmqq2aij.py":27:26)
#loc3 = loc("inductor_cache/md/cmdrsgcjytwgtdz7atfluzoijiygxl2mstehqid5uyp7dmqq2aij.py":31:30)
#loc4 = loc("inductor_cache/md/cmdrsgcjytwgtdz7atfluzoijiygxl2mstehqid5uyp7dmqq2aij.py":31:35)
#loc5 = loc("inductor_cache/md/cmdrsgcjytwgtdz7atfluzoijiygxl2mstehqid5uyp7dmqq2aij.py":32:30)
#loc6 = loc("inductor_cache/md/cmdrsgcjytwgtdz7atfluzoijiygxl2mstehqid5uyp7dmqq2aij.py":32:35)
#loc7 = loc("inductor_cache/md/cmdrsgcjytwgtdz7atfluzoijiygxl2mstehqid5uyp7dmqq2aij.py":33:31)
#loc8 = loc("inductor_cache/md/cmdrsgcjytwgtdz7atfluzoijiygxl2mstehqid5uyp7dmqq2aij.py":33:36)
#loc9 = loc("inductor_cache/md/cmdrsgcjytwgtdz7atfluzoijiygxl2mstehqid5uyp7dmqq2aij.py":34:31)
#loc10 = loc("inductor_cache/md/cmdrsgcjytwgtdz7atfluzoijiygxl2mstehqid5uyp7dmqq2aij.py":34:36)
#loc11 = loc("inductor_cache/md/cmdrsgcjytwgtdz7atfluzoijiygxl2mstehqid5uyp7dmqq2aij.py":35:31)
#loc12 = loc("inductor_cache/md/cmdrsgcjytwgtdz7atfluzoijiygxl2mstehqid5uyp7dmqq2aij.py":35:36)
#loc13 = loc("inductor_cache/md/cmdrsgcjytwgtdz7atfluzoijiygxl2mstehqid5uyp7dmqq2aij.py":36:31)
#loc14 = loc("inductor_cache/md/cmdrsgcjytwgtdz7atfluzoijiygxl2mstehqid5uyp7dmqq2aij.py":36:36)
#loc15 = loc("inductor_cache/md/cmdrsgcjytwgtdz7atfluzoijiygxl2mstehqid5uyp7dmqq2aij.py":37:31)
#loc16 = loc("inductor_cache/md/cmdrsgcjytwgtdz7atfluzoijiygxl2mstehqid5uyp7dmqq2aij.py":37:36)
#loc17 = loc("inductor_cache/md/cmdrsgcjytwgtdz7atfluzoijiygxl2mstehqid5uyp7dmqq2aij.py":38:31)
#loc18 = loc("inductor_cache/md/cmdrsgcjytwgtdz7atfluzoijiygxl2mstehqid5uyp7dmqq2aij.py":38:36)
#loc19 = loc("inductor_cache/md/cmdrsgcjytwgtdz7atfluzoijiygxl2mstehqid5uyp7dmqq2aij.py":40:18)
#loc20 = loc("inductor_cache/md/cmdrsgcjytwgtdz7atfluzoijiygxl2mstehqid5uyp7dmqq2aij.py":41:12)
#loc21 = loc("inductor_cache/md/cmdrsgcjytwgtdz7atfluzoijiygxl2mstehqid5uyp7dmqq2aij.py":42:27)
#loc22 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":118:15)
#loc23 = loc("inductor_cache/md/cmdrsgcjytwgtdz7atfluzoijiygxl2mstehqid5uyp7dmqq2aij.py":44:40)
#loc24 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":120:21)
#loc25 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":120:16)
#loc26 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":121:29)
#loc27 = loc("inductor_cache/md/cmdrsgcjytwgtdz7atfluzoijiygxl2mstehqid5uyp7dmqq2aij.py":45:18)
#loc28 = loc("inductor_cache/md/cmdrsgcjytwgtdz7atfluzoijiygxl2mstehqid5uyp7dmqq2aij.py":46:23)
#loc29 = loc("inductor_cache/md/cmdrsgcjytwgtdz7atfluzoijiygxl2mstehqid5uyp7dmqq2aij.py":47:41)
#loc30 = loc("inductor_cache/md/cmdrsgcjytwgtdz7atfluzoijiygxl2mstehqid5uyp7dmqq2aij.py":48:19)
#loc31 = loc("inductor_cache/md/cmdrsgcjytwgtdz7atfluzoijiygxl2mstehqid5uyp7dmqq2aij.py":49:19)
#loc32 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc34 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc35 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":73:15)
#loc36 = loc("inductor_cache/md/cmdrsgcjytwgtdz7atfluzoijiygxl2mstehqid5uyp7dmqq2aij.py":51:45)
#loc37 = loc("inductor_cache/md/cmdrsgcjytwgtdz7atfluzoijiygxl2mstehqid5uyp7dmqq2aij.py":52:20)
#loc38 = loc("inductor_cache/md/cmdrsgcjytwgtdz7atfluzoijiygxl2mstehqid5uyp7dmqq2aij.py":53:20)
#loc40 = loc("inductor_cache/md/cmdrsgcjytwgtdz7atfluzoijiygxl2mstehqid5uyp7dmqq2aij.py":55:45)
#loc41 = loc("inductor_cache/md/cmdrsgcjytwgtdz7atfluzoijiygxl2mstehqid5uyp7dmqq2aij.py":56:20)
#loc42 = loc("inductor_cache/md/cmdrsgcjytwgtdz7atfluzoijiygxl2mstehqid5uyp7dmqq2aij.py":57:20)
#loc44 = loc("inductor_cache/md/cmdrsgcjytwgtdz7atfluzoijiygxl2mstehqid5uyp7dmqq2aij.py":59:45)
#loc45 = loc("inductor_cache/md/cmdrsgcjytwgtdz7atfluzoijiygxl2mstehqid5uyp7dmqq2aij.py":60:20)
#loc46 = loc("inductor_cache/md/cmdrsgcjytwgtdz7atfluzoijiygxl2mstehqid5uyp7dmqq2aij.py":61:20)
#loc48 = loc("inductor_cache/md/cmdrsgcjytwgtdz7atfluzoijiygxl2mstehqid5uyp7dmqq2aij.py":63:45)
#loc49 = loc("inductor_cache/md/cmdrsgcjytwgtdz7atfluzoijiygxl2mstehqid5uyp7dmqq2aij.py":65:20)
#loc50 = loc("inductor_cache/md/cmdrsgcjytwgtdz7atfluzoijiygxl2mstehqid5uyp7dmqq2aij.py":67:20)
#loc51 = loc("inductor_cache/md/cmdrsgcjytwgtdz7atfluzoijiygxl2mstehqid5uyp7dmqq2aij.py":68:20)
#loc52 = loc("inductor_cache/md/cmdrsgcjytwgtdz7atfluzoijiygxl2mstehqid5uyp7dmqq2aij.py":69:20)
#loc53 = loc("inductor_cache/md/cmdrsgcjytwgtdz7atfluzoijiygxl2mstehqid5uyp7dmqq2aij.py":70:20)
#loc54 = loc("inductor_cache/md/cmdrsgcjytwgtdz7atfluzoijiygxl2mstehqid5uyp7dmqq2aij.py":71:20)
#loc55 = loc("inductor_cache/md/cmdrsgcjytwgtdz7atfluzoijiygxl2mstehqid5uyp7dmqq2aij.py":72:20)
#loc56 = loc("inductor_cache/md/cmdrsgcjytwgtdz7atfluzoijiygxl2mstehqid5uyp7dmqq2aij.py":74:20)
#loc57 = loc("inductor_cache/md/cmdrsgcjytwgtdz7atfluzoijiygxl2mstehqid5uyp7dmqq2aij.py":75:20)
#loc58 = loc("inductor_cache/md/cmdrsgcjytwgtdz7atfluzoijiygxl2mstehqid5uyp7dmqq2aij.py":76:4)
#loc59 = loc("inductor_cache/md/cmdrsgcjytwgtdz7atfluzoijiygxl2mstehqid5uyp7dmqq2aij.py":77:28)
#loc60 = loc("inductor_cache/md/cmdrsgcjytwgtdz7atfluzoijiygxl2mstehqid5uyp7dmqq2aij.py":77:63)
#loc61 = loc("inductor_cache/md/cmdrsgcjytwgtdz7atfluzoijiygxl2mstehqid5uyp7dmqq2aij.py":77:4)
#loc62 = loc(callsite(#loc22 at #loc23))
#loc63 = loc(callsite(#loc24 at #loc23))
#loc64 = loc(callsite(#loc25 at #loc23))
#loc65 = loc(callsite(#loc26 at #loc23))
#loc66 = loc(callsite(#loc22 at #loc29))
#loc67 = loc(callsite(#loc24 at #loc29))
#loc68 = loc(callsite(#loc25 at #loc29))
#loc69 = loc(callsite(#loc26 at #loc29))
#loc70 = loc(callsite(#loc32 at #loc33))
#loc72 = loc(callsite(#loc34 at #loc32))
#loc73 = loc(callsite(#loc35 at #loc36))
#loc74 = loc(callsite(#loc32 at #loc39))
#loc76 = loc(callsite(#loc35 at #loc40))
#loc77 = loc(callsite(#loc32 at #loc43))
#loc79 = loc(callsite(#loc35 at #loc44))
#loc80 = loc(callsite(#loc32 at #loc47))
#loc82 = loc(callsite(#loc35 at #loc48))
#loc83 = loc(callsite(#loc72 at #loc33))
#loc84 = loc(callsite(#loc72 at #loc39))
#loc85 = loc(callsite(#loc72 at #loc43))
#loc86 = loc(callsite(#loc72 at #loc47))
