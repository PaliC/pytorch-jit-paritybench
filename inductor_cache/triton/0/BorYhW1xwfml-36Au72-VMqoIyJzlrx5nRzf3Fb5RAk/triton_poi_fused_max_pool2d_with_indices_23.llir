; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_max_pool2d_with_indices_23(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 7, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 1, !dbg !12
  %10 = and i32 %9, 127, !dbg !12
  %11 = lshr i32 %8, 5, !dbg !12
  %12 = and i32 %11, 7, !dbg !12
  %13 = or disjoint i32 %7, %10, !dbg !13
  %14 = or disjoint i32 %7, %12, !dbg !13
  %15 = or disjoint i32 %14, 8, !dbg !13
  %16 = or disjoint i32 %14, 16, !dbg !13
  %17 = or disjoint i32 %14, 24, !dbg !13
  %18 = or disjoint i32 %14, 32, !dbg !13
  %19 = or disjoint i32 %14, 40, !dbg !13
  %20 = or disjoint i32 %14, 48, !dbg !13
  %21 = or disjoint i32 %14, 56, !dbg !13
  %22 = or disjoint i32 %14, 64, !dbg !13
  %23 = or disjoint i32 %14, 72, !dbg !13
  %24 = or disjoint i32 %14, 80, !dbg !13
  %25 = or disjoint i32 %14, 88, !dbg !13
  %26 = or disjoint i32 %14, 96, !dbg !13
  %27 = or disjoint i32 %14, 104, !dbg !13
  %28 = or disjoint i32 %14, 112, !dbg !13
  %29 = or disjoint i32 %14, 120, !dbg !13
  %30 = icmp slt i32 %13, 100, !dbg !14
  %31 = icmp slt i32 %14, 100, !dbg !14
  %32 = icmp slt i32 %15, 100, !dbg !14
  %33 = icmp slt i32 %16, 100, !dbg !14
  %34 = icmp slt i32 %17, 100, !dbg !14
  %35 = icmp slt i32 %18, 100, !dbg !14
  %36 = icmp slt i32 %19, 100, !dbg !14
  %37 = icmp slt i32 %20, 100, !dbg !14
  %38 = icmp slt i32 %21, 100, !dbg !14
  %39 = icmp slt i32 %22, 100, !dbg !14
  %40 = icmp slt i32 %23, 100, !dbg !14
  %41 = icmp slt i32 %24, 100, !dbg !14
  %42 = icmp slt i32 %25, 100, !dbg !14
  %43 = icmp slt i32 %26, 100, !dbg !14
  %44 = icmp slt i32 %7, 0, !dbg !14
  %45 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %46 = shl i32 %45, 5, !dbg !16
  %47 = shl i32 %8, 4, !dbg !17
  %48 = and i32 %47, 16, !dbg !17
  %49 = and i32 %8, 31, !dbg !17
  %50 = or disjoint i32 %46, %48, !dbg !18
  %51 = or disjoint i32 %50, 4, !dbg !18
  %52 = or disjoint i32 %50, 8, !dbg !18
  %53 = or disjoint i32 %50, 12, !dbg !18
  %54 = or disjoint i32 %46, %49, !dbg !18
  %55 = icmp slt i32 %50, 1024, !dbg !19
  %56 = icmp slt i32 %54, 1024, !dbg !19
  %57 = sdiv i32 %13, 5, !dbg !20
  %58 = sdiv i32 %13, 25, !dbg !21
  %.frozen = freeze i32 %14, !dbg !21
  %59 = sdiv i32 %.frozen, 25, !dbg !21
  %.frozen31 = freeze i32 %15, !dbg !21
  %60 = sdiv i32 %.frozen31, 25, !dbg !21
  %.frozen33 = freeze i32 %16, !dbg !21
  %61 = sdiv i32 %.frozen33, 25, !dbg !21
  %.frozen35 = freeze i32 %17, !dbg !21
  %62 = sdiv i32 %.frozen35, 25, !dbg !21
  %.frozen37 = freeze i32 %18, !dbg !21
  %63 = sdiv i32 %.frozen37, 25, !dbg !21
  %.frozen39 = freeze i32 %19, !dbg !21
  %64 = sdiv i32 %.frozen39, 25, !dbg !21
  %.frozen41 = freeze i32 %20, !dbg !21
  %65 = sdiv i32 %.frozen41, 25, !dbg !21
  %.frozen43 = freeze i32 %21, !dbg !21
  %66 = sdiv i32 %.frozen43, 25, !dbg !21
  %.frozen45 = freeze i32 %22, !dbg !21
  %67 = sdiv i32 %.frozen45, 25, !dbg !21
  %.frozen47 = freeze i32 %23, !dbg !21
  %68 = sdiv i32 %.frozen47, 25, !dbg !21
  %.frozen49 = freeze i32 %24, !dbg !21
  %69 = sdiv i32 %.frozen49, 25, !dbg !21
  %.frozen51 = freeze i32 %25, !dbg !21
  %70 = sdiv i32 %.frozen51, 25, !dbg !21
  %.frozen53 = freeze i32 %26, !dbg !21
  %71 = sdiv i32 %.frozen53, 25, !dbg !21
  %.frozen55 = freeze i32 %27, !dbg !21
  %72 = sdiv i32 %.frozen55, 25, !dbg !21
  %.frozen57 = freeze i32 %28, !dbg !21
  %73 = sdiv i32 %.frozen57, 25, !dbg !21
  %.frozen59 = freeze i32 %29, !dbg !21
  %74 = sdiv i32 %.frozen59, 25, !dbg !21
  %75 = mul i32 %59, 25, !dbg !22
  %.decomposed = sub i32 %.frozen, %75, !dbg !22
  %76 = mul i32 %60, 25, !dbg !22
  %.decomposed32 = sub i32 %.frozen31, %76, !dbg !22
  %77 = mul i32 %61, 25, !dbg !22
  %.decomposed34 = sub i32 %.frozen33, %77, !dbg !22
  %78 = mul i32 %62, 25, !dbg !22
  %.decomposed36 = sub i32 %.frozen35, %78, !dbg !22
  %79 = mul i32 %63, 25, !dbg !22
  %.decomposed38 = sub i32 %.frozen37, %79, !dbg !22
  %80 = mul i32 %64, 25, !dbg !22
  %.decomposed40 = sub i32 %.frozen39, %80, !dbg !22
  %81 = mul i32 %65, 25, !dbg !22
  %.decomposed42 = sub i32 %.frozen41, %81, !dbg !22
  %82 = mul i32 %66, 25, !dbg !22
  %.decomposed44 = sub i32 %.frozen43, %82, !dbg !22
  %83 = mul i32 %67, 25, !dbg !22
  %.decomposed46 = sub i32 %.frozen45, %83, !dbg !22
  %84 = mul i32 %68, 25, !dbg !22
  %.decomposed48 = sub i32 %.frozen47, %84, !dbg !22
  %85 = mul i32 %69, 25, !dbg !22
  %.decomposed50 = sub i32 %.frozen49, %85, !dbg !22
  %86 = mul i32 %70, 25, !dbg !22
  %.decomposed52 = sub i32 %.frozen51, %86, !dbg !22
  %87 = mul i32 %71, 25, !dbg !22
  %.decomposed54 = sub i32 %.frozen53, %87, !dbg !22
  %88 = mul i32 %72, 25, !dbg !22
  %.decomposed56 = sub i32 %.frozen55, %88, !dbg !22
  %89 = mul i32 %73, 25, !dbg !22
  %.decomposed58 = sub i32 %.frozen57, %89, !dbg !22
  %90 = mul i32 %74, 25, !dbg !22
  %.decomposed60 = sub i32 %.frozen59, %90, !dbg !22
  %91 = mul i32 %58, 82944, !dbg !23
  %92 = insertelement <2 x i32> poison, i32 %13, i64 0, !dbg !24
  %93 = insertelement <2 x i32> %92, i32 %57, i64 1, !dbg !24
  %94 = srem <2 x i32> %93, splat (i32 5), !dbg !24
  %95 = extractelement <2 x i32> %94, i64 1, !dbg !25
  %96 = icmp sgt i32 %95, 0, !dbg !26
  %97 = shl nsw <2 x i32> %94, splat (i32 1), !dbg !27
  %98 = extractelement <2 x i32> %94, i64 0, !dbg !25
  %99 = icmp sgt i32 %98, 0, !dbg !28
  %100 = and i1 %99, %96, !dbg !29
  %101 = shl nsw i32 %98, 11, !dbg !30
  %102 = mul nsw i32 %95, 18432, !dbg !31
  %103 = add i32 %91, %101, !dbg !32
  %104 = add i32 %103, -10240, !dbg !33
  %105 = add i32 %104, %50, !dbg !34
  %106 = add i32 %105, %102, !dbg !35
  %107 = add i32 %104, %51, !dbg !34
  %108 = add i32 %107, %102, !dbg !35
  %109 = add i32 %104, %52, !dbg !34
  %110 = add i32 %109, %102, !dbg !35
  %111 = add i32 %104, %53, !dbg !34
  %112 = add i32 %111, %102, !dbg !35
  %113 = sext i32 %106 to i64, !dbg !36
  %114 = getelementptr float, ptr addrspace(1) %0, i64 %113, !dbg !36
  %115 = sext i32 %108 to i64, !dbg !36
  %116 = getelementptr float, ptr addrspace(1) %0, i64 %115, !dbg !36
  %117 = sext i32 %110 to i64, !dbg !36
  %118 = getelementptr float, ptr addrspace(1) %0, i64 %117, !dbg !36
  %119 = sext i32 %112 to i64, !dbg !36
  %120 = getelementptr float, ptr addrspace(1) %0, i64 %119, !dbg !36
  %121 = and i1 %55, %100, !dbg !37
  %122 = and i1 %30, %121, !dbg !38
  %123 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %114, i1 %122, i32 -8388608, i1 %122, i32 -8388608, i1 %122, i32 -8388608, i1 %122, i32 -8388608, i1 %122) #2, !dbg !39
  %124 = extractvalue { i32, i32, i32, i32 } %123, 0, !dbg !39
  %125 = extractvalue { i32, i32, i32, i32 } %123, 1, !dbg !39
  %126 = extractvalue { i32, i32, i32, i32 } %123, 2, !dbg !39
  %127 = extractvalue { i32, i32, i32, i32 } %123, 3, !dbg !39
  %128 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %116, i1 %122, i32 -8388608, i1 %122, i32 -8388608, i1 %122, i32 -8388608, i1 %122, i32 -8388608, i1 %122) #2, !dbg !39
  %129 = extractvalue { i32, i32, i32, i32 } %128, 0, !dbg !39
  %130 = extractvalue { i32, i32, i32, i32 } %128, 1, !dbg !39
  %131 = extractvalue { i32, i32, i32, i32 } %128, 2, !dbg !39
  %132 = extractvalue { i32, i32, i32, i32 } %128, 3, !dbg !39
  %133 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %118, i1 %122, i32 -8388608, i1 %122, i32 -8388608, i1 %122, i32 -8388608, i1 %122, i32 -8388608, i1 %122) #2, !dbg !39
  %134 = extractvalue { i32, i32, i32, i32 } %133, 0, !dbg !39
  %135 = extractvalue { i32, i32, i32, i32 } %133, 1, !dbg !39
  %136 = extractvalue { i32, i32, i32, i32 } %133, 2, !dbg !39
  %137 = extractvalue { i32, i32, i32, i32 } %133, 3, !dbg !39
  %138 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %120, i1 %122, i32 -8388608, i1 %122, i32 -8388608, i1 %122, i32 -8388608, i1 %122, i32 -8388608, i1 %122) #2, !dbg !39
  %139 = extractvalue { i32, i32, i32, i32 } %138, 0, !dbg !39
  %140 = extractvalue { i32, i32, i32, i32 } %138, 1, !dbg !39
  %141 = extractvalue { i32, i32, i32, i32 } %138, 2, !dbg !39
  %142 = extractvalue { i32, i32, i32, i32 } %138, 3, !dbg !39
  %143 = icmp sgt <2 x i32> %94, splat (i32 -1), !dbg !40
  %144 = extractelement <2 x i1> %143, i64 0, !dbg !41
  %145 = and i1 %144, %96, !dbg !41
  %146 = add i32 %103, -9216, !dbg !42
  %147 = add i32 %146, %50, !dbg !43
  %148 = add i32 %147, %102, !dbg !44
  %149 = add i32 %146, %51, !dbg !43
  %150 = add i32 %149, %102, !dbg !44
  %151 = add i32 %146, %52, !dbg !43
  %152 = add i32 %151, %102, !dbg !44
  %153 = add i32 %146, %53, !dbg !43
  %154 = add i32 %153, %102, !dbg !44
  %155 = sext i32 %148 to i64, !dbg !45
  %156 = getelementptr float, ptr addrspace(1) %0, i64 %155, !dbg !45
  %157 = sext i32 %150 to i64, !dbg !45
  %158 = getelementptr float, ptr addrspace(1) %0, i64 %157, !dbg !45
  %159 = sext i32 %152 to i64, !dbg !45
  %160 = getelementptr float, ptr addrspace(1) %0, i64 %159, !dbg !45
  %161 = sext i32 %154 to i64, !dbg !45
  %162 = getelementptr float, ptr addrspace(1) %0, i64 %161, !dbg !45
  %163 = and i1 %55, %145, !dbg !46
  %164 = and i1 %30, %163, !dbg !47
  %165 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %156, i1 %164, i32 -8388608, i1 %164, i32 -8388608, i1 %164, i32 -8388608, i1 %164, i32 -8388608, i1 %164) #2, !dbg !48
  %166 = extractvalue { i32, i32, i32, i32 } %165, 0, !dbg !48
  %167 = extractvalue { i32, i32, i32, i32 } %165, 1, !dbg !48
  %168 = extractvalue { i32, i32, i32, i32 } %165, 2, !dbg !48
  %169 = extractvalue { i32, i32, i32, i32 } %165, 3, !dbg !48
  %170 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %158, i1 %164, i32 -8388608, i1 %164, i32 -8388608, i1 %164, i32 -8388608, i1 %164, i32 -8388608, i1 %164) #2, !dbg !48
  %171 = extractvalue { i32, i32, i32, i32 } %170, 0, !dbg !48
  %172 = extractvalue { i32, i32, i32, i32 } %170, 1, !dbg !48
  %173 = extractvalue { i32, i32, i32, i32 } %170, 2, !dbg !48
  %174 = extractvalue { i32, i32, i32, i32 } %170, 3, !dbg !48
  %175 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %160, i1 %164, i32 -8388608, i1 %164, i32 -8388608, i1 %164, i32 -8388608, i1 %164, i32 -8388608, i1 %164) #2, !dbg !48
  %176 = extractvalue { i32, i32, i32, i32 } %175, 0, !dbg !48
  %177 = extractvalue { i32, i32, i32, i32 } %175, 1, !dbg !48
  %178 = extractvalue { i32, i32, i32, i32 } %175, 2, !dbg !48
  %179 = extractvalue { i32, i32, i32, i32 } %175, 3, !dbg !48
  %180 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %162, i1 %164, i32 -8388608, i1 %164, i32 -8388608, i1 %164, i32 -8388608, i1 %164, i32 -8388608, i1 %164) #2, !dbg !48
  %181 = extractvalue { i32, i32, i32, i32 } %180, 0, !dbg !48
  %182 = extractvalue { i32, i32, i32, i32 } %180, 1, !dbg !48
  %183 = extractvalue { i32, i32, i32, i32 } %180, 2, !dbg !48
  %184 = extractvalue { i32, i32, i32, i32 } %180, 3, !dbg !48
  %185 = or disjoint <2 x i32> %97, splat (i32 1), !dbg !49
  %186 = icmp slt <2 x i32> %185, splat (i32 9), !dbg !50
  %187 = and <2 x i1> %143, %186, !dbg !51
  %188 = extractelement <2 x i1> %187, i64 0, !dbg !52
  %189 = and i1 %96, %188, !dbg !53
  %190 = add i32 %103, -8192, !dbg !54
  %191 = add i32 %190, %50, !dbg !55
  %192 = add i32 %191, %102, !dbg !56
  %193 = add i32 %190, %51, !dbg !55
  %194 = add i32 %193, %102, !dbg !56
  %195 = add i32 %190, %52, !dbg !55
  %196 = add i32 %195, %102, !dbg !56
  %197 = add i32 %190, %53, !dbg !55
  %198 = add i32 %197, %102, !dbg !56
  %199 = sext i32 %192 to i64, !dbg !57
  %200 = getelementptr float, ptr addrspace(1) %0, i64 %199, !dbg !57
  %201 = sext i32 %194 to i64, !dbg !57
  %202 = getelementptr float, ptr addrspace(1) %0, i64 %201, !dbg !57
  %203 = sext i32 %196 to i64, !dbg !57
  %204 = getelementptr float, ptr addrspace(1) %0, i64 %203, !dbg !57
  %205 = sext i32 %198 to i64, !dbg !57
  %206 = getelementptr float, ptr addrspace(1) %0, i64 %205, !dbg !57
  %207 = and i1 %55, %189, !dbg !58
  %208 = and i1 %30, %207, !dbg !59
  %209 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %200, i1 %208, i32 -8388608, i1 %208, i32 -8388608, i1 %208, i32 -8388608, i1 %208, i32 -8388608, i1 %208) #2, !dbg !60
  %210 = extractvalue { i32, i32, i32, i32 } %209, 0, !dbg !60
  %211 = extractvalue { i32, i32, i32, i32 } %209, 1, !dbg !60
  %212 = extractvalue { i32, i32, i32, i32 } %209, 2, !dbg !60
  %213 = extractvalue { i32, i32, i32, i32 } %209, 3, !dbg !60
  %214 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %202, i1 %208, i32 -8388608, i1 %208, i32 -8388608, i1 %208, i32 -8388608, i1 %208, i32 -8388608, i1 %208) #2, !dbg !60
  %215 = extractvalue { i32, i32, i32, i32 } %214, 0, !dbg !60
  %216 = extractvalue { i32, i32, i32, i32 } %214, 1, !dbg !60
  %217 = extractvalue { i32, i32, i32, i32 } %214, 2, !dbg !60
  %218 = extractvalue { i32, i32, i32, i32 } %214, 3, !dbg !60
  %219 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %204, i1 %208, i32 -8388608, i1 %208, i32 -8388608, i1 %208, i32 -8388608, i1 %208, i32 -8388608, i1 %208) #2, !dbg !60
  %220 = extractvalue { i32, i32, i32, i32 } %219, 0, !dbg !60
  %221 = extractvalue { i32, i32, i32, i32 } %219, 1, !dbg !60
  %222 = extractvalue { i32, i32, i32, i32 } %219, 2, !dbg !60
  %223 = extractvalue { i32, i32, i32, i32 } %219, 3, !dbg !60
  %224 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %206, i1 %208, i32 -8388608, i1 %208, i32 -8388608, i1 %208, i32 -8388608, i1 %208, i32 -8388608, i1 %208) #2, !dbg !60
  %225 = extractvalue { i32, i32, i32, i32 } %224, 0, !dbg !60
  %226 = extractvalue { i32, i32, i32, i32 } %224, 1, !dbg !60
  %227 = extractvalue { i32, i32, i32, i32 } %224, 2, !dbg !60
  %228 = extractvalue { i32, i32, i32, i32 } %224, 3, !dbg !60
  %229 = extractelement <2 x i1> %143, i64 1, !dbg !61
  %230 = and i1 %99, %229, !dbg !61
  %231 = add i32 %103, -1024, !dbg !62
  %232 = add i32 %231, %50, !dbg !63
  %233 = add i32 %232, %102, !dbg !64
  %234 = add i32 %231, %51, !dbg !63
  %235 = add i32 %234, %102, !dbg !64
  %236 = add i32 %231, %52, !dbg !63
  %237 = add i32 %236, %102, !dbg !64
  %238 = add i32 %231, %53, !dbg !63
  %239 = add i32 %238, %102, !dbg !64
  %240 = sext i32 %233 to i64, !dbg !65
  %241 = getelementptr float, ptr addrspace(1) %0, i64 %240, !dbg !65
  %242 = sext i32 %235 to i64, !dbg !65
  %243 = getelementptr float, ptr addrspace(1) %0, i64 %242, !dbg !65
  %244 = sext i32 %237 to i64, !dbg !65
  %245 = getelementptr float, ptr addrspace(1) %0, i64 %244, !dbg !65
  %246 = sext i32 %239 to i64, !dbg !65
  %247 = getelementptr float, ptr addrspace(1) %0, i64 %246, !dbg !65
  %248 = and i1 %55, %230, !dbg !66
  %249 = and i1 %30, %248, !dbg !67
  %250 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %241, i1 %249, i32 -8388608, i1 %249, i32 -8388608, i1 %249, i32 -8388608, i1 %249, i32 -8388608, i1 %249) #2, !dbg !68
  %251 = extractvalue { i32, i32, i32, i32 } %250, 0, !dbg !68
  %252 = extractvalue { i32, i32, i32, i32 } %250, 1, !dbg !68
  %253 = extractvalue { i32, i32, i32, i32 } %250, 2, !dbg !68
  %254 = extractvalue { i32, i32, i32, i32 } %250, 3, !dbg !68
  %255 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %243, i1 %249, i32 -8388608, i1 %249, i32 -8388608, i1 %249, i32 -8388608, i1 %249, i32 -8388608, i1 %249) #2, !dbg !68
  %256 = extractvalue { i32, i32, i32, i32 } %255, 0, !dbg !68
  %257 = extractvalue { i32, i32, i32, i32 } %255, 1, !dbg !68
  %258 = extractvalue { i32, i32, i32, i32 } %255, 2, !dbg !68
  %259 = extractvalue { i32, i32, i32, i32 } %255, 3, !dbg !68
  %260 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %245, i1 %249, i32 -8388608, i1 %249, i32 -8388608, i1 %249, i32 -8388608, i1 %249, i32 -8388608, i1 %249) #2, !dbg !68
  %261 = extractvalue { i32, i32, i32, i32 } %260, 0, !dbg !68
  %262 = extractvalue { i32, i32, i32, i32 } %260, 1, !dbg !68
  %263 = extractvalue { i32, i32, i32, i32 } %260, 2, !dbg !68
  %264 = extractvalue { i32, i32, i32, i32 } %260, 3, !dbg !68
  %265 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %247, i1 %249, i32 -8388608, i1 %249, i32 -8388608, i1 %249, i32 -8388608, i1 %249, i32 -8388608, i1 %249) #2, !dbg !68
  %266 = extractvalue { i32, i32, i32, i32 } %265, 0, !dbg !68
  %267 = extractvalue { i32, i32, i32, i32 } %265, 1, !dbg !68
  %268 = extractvalue { i32, i32, i32, i32 } %265, 2, !dbg !68
  %269 = extractvalue { i32, i32, i32, i32 } %265, 3, !dbg !68
  %270 = or i32 %95, %98, !dbg !25
  %271 = icmp sgt i32 %270, -1, !dbg !25
  %272 = add i32 %103, %50, !dbg !69
  %273 = add i32 %272, %102, !dbg !70
  %274 = add i32 %103, %51, !dbg !69
  %275 = add i32 %274, %102, !dbg !70
  %276 = add i32 %103, %52, !dbg !69
  %277 = add i32 %276, %102, !dbg !70
  %278 = add i32 %103, %53, !dbg !69
  %279 = add i32 %278, %102, !dbg !70
  %280 = sext i32 %273 to i64, !dbg !71
  %281 = getelementptr float, ptr addrspace(1) %0, i64 %280, !dbg !71
  %282 = sext i32 %275 to i64, !dbg !71
  %283 = getelementptr float, ptr addrspace(1) %0, i64 %282, !dbg !71
  %284 = sext i32 %277 to i64, !dbg !71
  %285 = getelementptr float, ptr addrspace(1) %0, i64 %284, !dbg !71
  %286 = sext i32 %279 to i64, !dbg !71
  %287 = getelementptr float, ptr addrspace(1) %0, i64 %286, !dbg !71
  %288 = and i1 %55, %271, !dbg !72
  %289 = and i1 %30, %288, !dbg !73
  %290 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %281, i1 %289, i32 -8388608, i1 %289, i32 -8388608, i1 %289, i32 -8388608, i1 %289, i32 -8388608, i1 %289) #2, !dbg !74
  %291 = extractvalue { i32, i32, i32, i32 } %290, 0, !dbg !74
  %292 = extractvalue { i32, i32, i32, i32 } %290, 1, !dbg !74
  %293 = extractvalue { i32, i32, i32, i32 } %290, 2, !dbg !74
  %294 = extractvalue { i32, i32, i32, i32 } %290, 3, !dbg !74
  %295 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %283, i1 %289, i32 -8388608, i1 %289, i32 -8388608, i1 %289, i32 -8388608, i1 %289, i32 -8388608, i1 %289) #2, !dbg !74
  %296 = extractvalue { i32, i32, i32, i32 } %295, 0, !dbg !74
  %297 = extractvalue { i32, i32, i32, i32 } %295, 1, !dbg !74
  %298 = extractvalue { i32, i32, i32, i32 } %295, 2, !dbg !74
  %299 = extractvalue { i32, i32, i32, i32 } %295, 3, !dbg !74
  %300 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %285, i1 %289, i32 -8388608, i1 %289, i32 -8388608, i1 %289, i32 -8388608, i1 %289, i32 -8388608, i1 %289) #2, !dbg !74
  %301 = extractvalue { i32, i32, i32, i32 } %300, 0, !dbg !74
  %302 = extractvalue { i32, i32, i32, i32 } %300, 1, !dbg !74
  %303 = extractvalue { i32, i32, i32, i32 } %300, 2, !dbg !74
  %304 = extractvalue { i32, i32, i32, i32 } %300, 3, !dbg !74
  %305 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %287, i1 %289, i32 -8388608, i1 %289, i32 -8388608, i1 %289, i32 -8388608, i1 %289, i32 -8388608, i1 %289) #2, !dbg !74
  %306 = extractvalue { i32, i32, i32, i32 } %305, 0, !dbg !74
  %307 = extractvalue { i32, i32, i32, i32 } %305, 1, !dbg !74
  %308 = extractvalue { i32, i32, i32, i32 } %305, 2, !dbg !74
  %309 = extractvalue { i32, i32, i32, i32 } %305, 3, !dbg !74
  %310 = and i1 %229, %188, !dbg !75
  %311 = add i32 %103, 1024, !dbg !76
  %312 = add i32 %311, %50, !dbg !77
  %313 = add i32 %312, %102, !dbg !78
  %314 = add i32 %311, %51, !dbg !77
  %315 = add i32 %314, %102, !dbg !78
  %316 = add i32 %311, %52, !dbg !77
  %317 = add i32 %316, %102, !dbg !78
  %318 = add i32 %311, %53, !dbg !77
  %319 = add i32 %318, %102, !dbg !78
  %320 = sext i32 %313 to i64, !dbg !79
  %321 = getelementptr float, ptr addrspace(1) %0, i64 %320, !dbg !79
  %322 = sext i32 %315 to i64, !dbg !79
  %323 = getelementptr float, ptr addrspace(1) %0, i64 %322, !dbg !79
  %324 = sext i32 %317 to i64, !dbg !79
  %325 = getelementptr float, ptr addrspace(1) %0, i64 %324, !dbg !79
  %326 = sext i32 %319 to i64, !dbg !79
  %327 = getelementptr float, ptr addrspace(1) %0, i64 %326, !dbg !79
  %328 = and i1 %55, %310, !dbg !80
  %329 = and i1 %30, %328, !dbg !81
  %330 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %321, i1 %329, i32 -8388608, i1 %329, i32 -8388608, i1 %329, i32 -8388608, i1 %329, i32 -8388608, i1 %329) #2, !dbg !82
  %331 = extractvalue { i32, i32, i32, i32 } %330, 0, !dbg !82
  %332 = extractvalue { i32, i32, i32, i32 } %330, 1, !dbg !82
  %333 = extractvalue { i32, i32, i32, i32 } %330, 2, !dbg !82
  %334 = extractvalue { i32, i32, i32, i32 } %330, 3, !dbg !82
  %335 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %323, i1 %329, i32 -8388608, i1 %329, i32 -8388608, i1 %329, i32 -8388608, i1 %329, i32 -8388608, i1 %329) #2, !dbg !82
  %336 = extractvalue { i32, i32, i32, i32 } %335, 0, !dbg !82
  %337 = extractvalue { i32, i32, i32, i32 } %335, 1, !dbg !82
  %338 = extractvalue { i32, i32, i32, i32 } %335, 2, !dbg !82
  %339 = extractvalue { i32, i32, i32, i32 } %335, 3, !dbg !82
  %340 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %325, i1 %329, i32 -8388608, i1 %329, i32 -8388608, i1 %329, i32 -8388608, i1 %329, i32 -8388608, i1 %329) #2, !dbg !82
  %341 = extractvalue { i32, i32, i32, i32 } %340, 0, !dbg !82
  %342 = extractvalue { i32, i32, i32, i32 } %340, 1, !dbg !82
  %343 = extractvalue { i32, i32, i32, i32 } %340, 2, !dbg !82
  %344 = extractvalue { i32, i32, i32, i32 } %340, 3, !dbg !82
  %345 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %327, i1 %329, i32 -8388608, i1 %329, i32 -8388608, i1 %329, i32 -8388608, i1 %329, i32 -8388608, i1 %329) #2, !dbg !82
  %346 = extractvalue { i32, i32, i32, i32 } %345, 0, !dbg !82
  %347 = extractvalue { i32, i32, i32, i32 } %345, 1, !dbg !82
  %348 = extractvalue { i32, i32, i32, i32 } %345, 2, !dbg !82
  %349 = extractvalue { i32, i32, i32, i32 } %345, 3, !dbg !82
  %350 = extractelement <2 x i1> %187, i64 1, !dbg !52
  %351 = and i1 %99, %350, !dbg !83
  %352 = add i32 %103, 8192, !dbg !84
  %353 = add i32 %352, %50, !dbg !85
  %354 = add i32 %353, %102, !dbg !86
  %355 = add i32 %352, %51, !dbg !85
  %356 = add i32 %355, %102, !dbg !86
  %357 = add i32 %352, %52, !dbg !85
  %358 = add i32 %357, %102, !dbg !86
  %359 = add i32 %352, %53, !dbg !85
  %360 = add i32 %359, %102, !dbg !86
  %361 = sext i32 %354 to i64, !dbg !87
  %362 = getelementptr float, ptr addrspace(1) %0, i64 %361, !dbg !87
  %363 = sext i32 %356 to i64, !dbg !87
  %364 = getelementptr float, ptr addrspace(1) %0, i64 %363, !dbg !87
  %365 = sext i32 %358 to i64, !dbg !87
  %366 = getelementptr float, ptr addrspace(1) %0, i64 %365, !dbg !87
  %367 = sext i32 %360 to i64, !dbg !87
  %368 = getelementptr float, ptr addrspace(1) %0, i64 %367, !dbg !87
  %369 = and i1 %55, %351, !dbg !88
  %370 = and i1 %30, %369, !dbg !89
  %371 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %362, i1 %370, i32 -8388608, i1 %370, i32 -8388608, i1 %370, i32 -8388608, i1 %370, i32 -8388608, i1 %370) #2, !dbg !90
  %372 = extractvalue { i32, i32, i32, i32 } %371, 0, !dbg !90
  %373 = extractvalue { i32, i32, i32, i32 } %371, 1, !dbg !90
  %374 = extractvalue { i32, i32, i32, i32 } %371, 2, !dbg !90
  %375 = extractvalue { i32, i32, i32, i32 } %371, 3, !dbg !90
  %376 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %364, i1 %370, i32 -8388608, i1 %370, i32 -8388608, i1 %370, i32 -8388608, i1 %370, i32 -8388608, i1 %370) #2, !dbg !90
  %377 = extractvalue { i32, i32, i32, i32 } %376, 0, !dbg !90
  %378 = extractvalue { i32, i32, i32, i32 } %376, 1, !dbg !90
  %379 = extractvalue { i32, i32, i32, i32 } %376, 2, !dbg !90
  %380 = extractvalue { i32, i32, i32, i32 } %376, 3, !dbg !90
  %381 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %366, i1 %370, i32 -8388608, i1 %370, i32 -8388608, i1 %370, i32 -8388608, i1 %370, i32 -8388608, i1 %370) #2, !dbg !90
  %382 = extractvalue { i32, i32, i32, i32 } %381, 0, !dbg !90
  %383 = extractvalue { i32, i32, i32, i32 } %381, 1, !dbg !90
  %384 = extractvalue { i32, i32, i32, i32 } %381, 2, !dbg !90
  %385 = extractvalue { i32, i32, i32, i32 } %381, 3, !dbg !90
  %386 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %368, i1 %370, i32 -8388608, i1 %370, i32 -8388608, i1 %370, i32 -8388608, i1 %370, i32 -8388608, i1 %370) #2, !dbg !90
  %387 = extractvalue { i32, i32, i32, i32 } %386, 0, !dbg !90
  %388 = extractvalue { i32, i32, i32, i32 } %386, 1, !dbg !90
  %389 = extractvalue { i32, i32, i32, i32 } %386, 2, !dbg !90
  %390 = extractvalue { i32, i32, i32, i32 } %386, 3, !dbg !90
  %391 = and i1 %144, %350, !dbg !91
  %392 = add i32 %103, 9216, !dbg !92
  %393 = add i32 %392, %50, !dbg !93
  %394 = add i32 %393, %102, !dbg !94
  %395 = add i32 %392, %51, !dbg !93
  %396 = add i32 %395, %102, !dbg !94
  %397 = add i32 %392, %52, !dbg !93
  %398 = add i32 %397, %102, !dbg !94
  %399 = add i32 %392, %53, !dbg !93
  %400 = add i32 %399, %102, !dbg !94
  %401 = sext i32 %394 to i64, !dbg !95
  %402 = getelementptr float, ptr addrspace(1) %0, i64 %401, !dbg !95
  %403 = sext i32 %396 to i64, !dbg !95
  %404 = getelementptr float, ptr addrspace(1) %0, i64 %403, !dbg !95
  %405 = sext i32 %398 to i64, !dbg !95
  %406 = getelementptr float, ptr addrspace(1) %0, i64 %405, !dbg !95
  %407 = sext i32 %400 to i64, !dbg !95
  %408 = getelementptr float, ptr addrspace(1) %0, i64 %407, !dbg !95
  %409 = and i1 %55, %391, !dbg !96
  %410 = and i1 %30, %409, !dbg !97
  %411 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %402, i1 %410, i32 -8388608, i1 %410, i32 -8388608, i1 %410, i32 -8388608, i1 %410, i32 -8388608, i1 %410) #2, !dbg !98
  %412 = extractvalue { i32, i32, i32, i32 } %411, 0, !dbg !98
  %413 = extractvalue { i32, i32, i32, i32 } %411, 1, !dbg !98
  %414 = extractvalue { i32, i32, i32, i32 } %411, 2, !dbg !98
  %415 = extractvalue { i32, i32, i32, i32 } %411, 3, !dbg !98
  %416 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %404, i1 %410, i32 -8388608, i1 %410, i32 -8388608, i1 %410, i32 -8388608, i1 %410, i32 -8388608, i1 %410) #2, !dbg !98
  %417 = extractvalue { i32, i32, i32, i32 } %416, 0, !dbg !98
  %418 = extractvalue { i32, i32, i32, i32 } %416, 1, !dbg !98
  %419 = extractvalue { i32, i32, i32, i32 } %416, 2, !dbg !98
  %420 = extractvalue { i32, i32, i32, i32 } %416, 3, !dbg !98
  %421 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %406, i1 %410, i32 -8388608, i1 %410, i32 -8388608, i1 %410, i32 -8388608, i1 %410, i32 -8388608, i1 %410) #2, !dbg !98
  %422 = extractvalue { i32, i32, i32, i32 } %421, 0, !dbg !98
  %423 = extractvalue { i32, i32, i32, i32 } %421, 1, !dbg !98
  %424 = extractvalue { i32, i32, i32, i32 } %421, 2, !dbg !98
  %425 = extractvalue { i32, i32, i32, i32 } %421, 3, !dbg !98
  %426 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %408, i1 %410, i32 -8388608, i1 %410, i32 -8388608, i1 %410, i32 -8388608, i1 %410, i32 -8388608, i1 %410) #2, !dbg !98
  %427 = extractvalue { i32, i32, i32, i32 } %426, 0, !dbg !98
  %428 = extractvalue { i32, i32, i32, i32 } %426, 1, !dbg !98
  %429 = extractvalue { i32, i32, i32, i32 } %426, 2, !dbg !98
  %430 = extractvalue { i32, i32, i32, i32 } %426, 3, !dbg !98
  %431 = and i1 %188, %350, !dbg !52
  %432 = add i32 %103, 10240, !dbg !99
  %433 = add i32 %432, %50, !dbg !100
  %434 = add i32 %433, %102, !dbg !101
  %435 = add i32 %432, %51, !dbg !100
  %436 = add i32 %435, %102, !dbg !101
  %437 = add i32 %432, %52, !dbg !100
  %438 = add i32 %437, %102, !dbg !101
  %439 = add i32 %432, %53, !dbg !100
  %440 = add i32 %439, %102, !dbg !101
  %441 = sext i32 %434 to i64, !dbg !102
  %442 = getelementptr float, ptr addrspace(1) %0, i64 %441, !dbg !102
  %443 = sext i32 %436 to i64, !dbg !102
  %444 = getelementptr float, ptr addrspace(1) %0, i64 %443, !dbg !102
  %445 = sext i32 %438 to i64, !dbg !102
  %446 = getelementptr float, ptr addrspace(1) %0, i64 %445, !dbg !102
  %447 = sext i32 %440 to i64, !dbg !102
  %448 = getelementptr float, ptr addrspace(1) %0, i64 %447, !dbg !102
  %449 = and i1 %55, %431, !dbg !103
  %450 = and i1 %30, %449, !dbg !104
  %451 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %442, i1 %450, i32 -8388608, i1 %450, i32 -8388608, i1 %450, i32 -8388608, i1 %450, i32 -8388608, i1 %450) #2, !dbg !105
  %452 = extractvalue { i32, i32, i32, i32 } %451, 0, !dbg !105
  %453 = extractvalue { i32, i32, i32, i32 } %451, 1, !dbg !105
  %454 = extractvalue { i32, i32, i32, i32 } %451, 2, !dbg !105
  %455 = extractvalue { i32, i32, i32, i32 } %451, 3, !dbg !105
  %456 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %444, i1 %450, i32 -8388608, i1 %450, i32 -8388608, i1 %450, i32 -8388608, i1 %450, i32 -8388608, i1 %450) #2, !dbg !105
  %457 = extractvalue { i32, i32, i32, i32 } %456, 0, !dbg !105
  %458 = extractvalue { i32, i32, i32, i32 } %456, 1, !dbg !105
  %459 = extractvalue { i32, i32, i32, i32 } %456, 2, !dbg !105
  %460 = extractvalue { i32, i32, i32, i32 } %456, 3, !dbg !105
  %461 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %446, i1 %450, i32 -8388608, i1 %450, i32 -8388608, i1 %450, i32 -8388608, i1 %450, i32 -8388608, i1 %450) #2, !dbg !105
  %462 = extractvalue { i32, i32, i32, i32 } %461, 0, !dbg !105
  %463 = extractvalue { i32, i32, i32, i32 } %461, 1, !dbg !105
  %464 = extractvalue { i32, i32, i32, i32 } %461, 2, !dbg !105
  %465 = extractvalue { i32, i32, i32, i32 } %461, 3, !dbg !105
  %466 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %448, i1 %450, i32 -8388608, i1 %450, i32 -8388608, i1 %450, i32 -8388608, i1 %450, i32 -8388608, i1 %450) #2, !dbg !105
  %467 = extractvalue { i32, i32, i32, i32 } %466, 0, !dbg !105
  %468 = extractvalue { i32, i32, i32, i32 } %466, 1, !dbg !105
  %469 = extractvalue { i32, i32, i32, i32 } %466, 2, !dbg !105
  %470 = extractvalue { i32, i32, i32, i32 } %466, 3, !dbg !105
  %471 = insertelement <4 x i32> poison, i32 %124, i64 0, !dbg !39
  %472 = insertelement <4 x i32> %471, i32 %125, i64 1, !dbg !39
  %473 = insertelement <4 x i32> %472, i32 %126, i64 2, !dbg !39
  %474 = insertelement <4 x i32> %473, i32 %127, i64 3, !dbg !39
  %475 = bitcast <4 x i32> %474 to <4 x float>, !dbg !39
  %476 = insertelement <4 x i32> poison, i32 %166, i64 0, !dbg !48
  %477 = insertelement <4 x i32> %476, i32 %167, i64 1, !dbg !48
  %478 = insertelement <4 x i32> %477, i32 %168, i64 2, !dbg !48
  %479 = insertelement <4 x i32> %478, i32 %169, i64 3, !dbg !48
  %480 = bitcast <4 x i32> %479 to <4 x float>, !dbg !48
  %481 = fcmp ogt <4 x float> %480, %475, !dbg !106
  %482 = fcmp uno <4 x float> %480, zeroinitializer, !dbg !110
  %483 = or <4 x i1> %481, %482, !dbg !111
  %.v = select <4 x i1> %483, <4 x i32> %479, <4 x i32> %474, !dbg !112
  %484 = bitcast <4 x i32> %.v to <4 x float>, !dbg !112
  %485 = insertelement <4 x i32> poison, i32 %210, i64 0, !dbg !60
  %486 = insertelement <4 x i32> %485, i32 %211, i64 1, !dbg !60
  %487 = insertelement <4 x i32> %486, i32 %212, i64 2, !dbg !60
  %488 = insertelement <4 x i32> %487, i32 %213, i64 3, !dbg !60
  %489 = bitcast <4 x i32> %488 to <4 x float>, !dbg !60
  %490 = fcmp olt <4 x float> %484, %489, !dbg !113
  %491 = fcmp uno <4 x float> %489, zeroinitializer, !dbg !115
  %492 = or <4 x i1> %490, %491, !dbg !116
  %.v4 = select <4 x i1> %492, <4 x i32> %488, <4 x i32> %.v, !dbg !117
  %493 = bitcast <4 x i32> %.v4 to <4 x float>, !dbg !117
  %494 = insertelement <4 x i32> poison, i32 %251, i64 0, !dbg !68
  %495 = insertelement <4 x i32> %494, i32 %252, i64 1, !dbg !68
  %496 = insertelement <4 x i32> %495, i32 %253, i64 2, !dbg !68
  %497 = insertelement <4 x i32> %496, i32 %254, i64 3, !dbg !68
  %498 = bitcast <4 x i32> %497 to <4 x float>, !dbg !68
  %499 = fcmp olt <4 x float> %493, %498, !dbg !118
  %500 = fcmp uno <4 x float> %498, zeroinitializer, !dbg !120
  %501 = or <4 x i1> %499, %500, !dbg !121
  %.v5 = select <4 x i1> %501, <4 x i32> %497, <4 x i32> %.v4, !dbg !122
  %502 = bitcast <4 x i32> %.v5 to <4 x float>, !dbg !122
  %503 = insertelement <4 x i32> poison, i32 %291, i64 0, !dbg !74
  %504 = insertelement <4 x i32> %503, i32 %292, i64 1, !dbg !74
  %505 = insertelement <4 x i32> %504, i32 %293, i64 2, !dbg !74
  %506 = insertelement <4 x i32> %505, i32 %294, i64 3, !dbg !74
  %507 = bitcast <4 x i32> %506 to <4 x float>, !dbg !74
  %508 = fcmp olt <4 x float> %502, %507, !dbg !123
  %509 = fcmp uno <4 x float> %507, zeroinitializer, !dbg !125
  %510 = or <4 x i1> %508, %509, !dbg !126
  %.v6 = select <4 x i1> %510, <4 x i32> %506, <4 x i32> %.v5, !dbg !127
  %511 = bitcast <4 x i32> %.v6 to <4 x float>, !dbg !127
  %512 = insertelement <4 x i32> poison, i32 %331, i64 0, !dbg !82
  %513 = insertelement <4 x i32> %512, i32 %332, i64 1, !dbg !82
  %514 = insertelement <4 x i32> %513, i32 %333, i64 2, !dbg !82
  %515 = insertelement <4 x i32> %514, i32 %334, i64 3, !dbg !82
  %516 = bitcast <4 x i32> %515 to <4 x float>, !dbg !82
  %517 = fcmp olt <4 x float> %511, %516, !dbg !128
  %518 = fcmp uno <4 x float> %516, zeroinitializer, !dbg !130
  %519 = or <4 x i1> %517, %518, !dbg !131
  %.v7 = select <4 x i1> %519, <4 x i32> %515, <4 x i32> %.v6, !dbg !132
  %520 = bitcast <4 x i32> %.v7 to <4 x float>, !dbg !132
  %521 = insertelement <4 x i32> poison, i32 %372, i64 0, !dbg !90
  %522 = insertelement <4 x i32> %521, i32 %373, i64 1, !dbg !90
  %523 = insertelement <4 x i32> %522, i32 %374, i64 2, !dbg !90
  %524 = insertelement <4 x i32> %523, i32 %375, i64 3, !dbg !90
  %525 = bitcast <4 x i32> %524 to <4 x float>, !dbg !90
  %526 = fcmp olt <4 x float> %520, %525, !dbg !133
  %527 = fcmp uno <4 x float> %525, zeroinitializer, !dbg !135
  %528 = or <4 x i1> %526, %527, !dbg !136
  %.v8 = select <4 x i1> %528, <4 x i32> %524, <4 x i32> %.v7, !dbg !137
  %529 = bitcast <4 x i32> %.v8 to <4 x float>, !dbg !137
  %530 = insertelement <4 x i32> poison, i32 %412, i64 0, !dbg !98
  %531 = insertelement <4 x i32> %530, i32 %413, i64 1, !dbg !98
  %532 = insertelement <4 x i32> %531, i32 %414, i64 2, !dbg !98
  %533 = insertelement <4 x i32> %532, i32 %415, i64 3, !dbg !98
  %534 = bitcast <4 x i32> %533 to <4 x float>, !dbg !98
  %535 = fcmp olt <4 x float> %529, %534, !dbg !138
  %536 = fcmp uno <4 x float> %534, zeroinitializer, !dbg !140
  %537 = or <4 x i1> %535, %536, !dbg !141
  %.v9 = select <4 x i1> %537, <4 x i32> %533, <4 x i32> %.v8, !dbg !142
  %538 = bitcast <4 x i32> %.v9 to <4 x float>, !dbg !142
  %539 = insertelement <4 x i32> poison, i32 %452, i64 0, !dbg !105
  %540 = insertelement <4 x i32> %539, i32 %453, i64 1, !dbg !105
  %541 = insertelement <4 x i32> %540, i32 %454, i64 2, !dbg !105
  %542 = insertelement <4 x i32> %541, i32 %455, i64 3, !dbg !105
  %543 = bitcast <4 x i32> %542 to <4 x float>, !dbg !105
  %544 = fcmp olt <4 x float> %538, %543, !dbg !143
  %545 = bitcast i32 %452 to float, !dbg !145
  %546 = fcmp uno float %545, 0.000000e+00, !dbg !145
  %547 = bitcast i32 %453 to float, !dbg !145
  %548 = fcmp uno float %547, 0.000000e+00, !dbg !145
  %549 = bitcast i32 %454 to float, !dbg !145
  %550 = fcmp uno float %549, 0.000000e+00, !dbg !145
  %551 = bitcast i32 %455 to float, !dbg !145
  %552 = fcmp uno float %551, 0.000000e+00, !dbg !145
  %553 = extractelement <4 x i1> %544, i64 0, !dbg !146
  %554 = or i1 %553, %546, !dbg !146
  %555 = extractelement <4 x i1> %544, i64 1, !dbg !146
  %556 = or i1 %555, %548, !dbg !146
  %557 = extractelement <4 x i1> %544, i64 2, !dbg !146
  %558 = or i1 %557, %550, !dbg !146
  %559 = extractelement <4 x i1> %544, i64 3, !dbg !146
  %560 = or i1 %559, %552, !dbg !146
  %561 = zext <4 x i1> %481 to <4 x i8>, !dbg !147
  %562 = select <4 x i1> %490, <4 x i8> splat (i8 2), <4 x i8> %561, !dbg !148
  %563 = select <4 x i1> %499, <4 x i8> splat (i8 3), <4 x i8> %562, !dbg !149
  %564 = select <4 x i1> %508, <4 x i8> splat (i8 4), <4 x i8> %563, !dbg !150
  %565 = select <4 x i1> %517, <4 x i8> splat (i8 5), <4 x i8> %564, !dbg !151
  %566 = select <4 x i1> %526, <4 x i8> splat (i8 6), <4 x i8> %565, !dbg !152
  %567 = select <4 x i1> %535, <4 x i8> splat (i8 7), <4 x i8> %566, !dbg !153
  %568 = select <4 x i1> %544, <4 x i8> splat (i8 8), <4 x i8> %567, !dbg !154
  %569 = insertelement <4 x i32> poison, i32 %129, i64 0, !dbg !39
  %570 = insertelement <4 x i32> %569, i32 %130, i64 1, !dbg !39
  %571 = insertelement <4 x i32> %570, i32 %131, i64 2, !dbg !39
  %572 = insertelement <4 x i32> %571, i32 %132, i64 3, !dbg !39
  %573 = bitcast <4 x i32> %572 to <4 x float>, !dbg !39
  %574 = insertelement <4 x i32> poison, i32 %171, i64 0, !dbg !48
  %575 = insertelement <4 x i32> %574, i32 %172, i64 1, !dbg !48
  %576 = insertelement <4 x i32> %575, i32 %173, i64 2, !dbg !48
  %577 = insertelement <4 x i32> %576, i32 %174, i64 3, !dbg !48
  %578 = bitcast <4 x i32> %577 to <4 x float>, !dbg !48
  %579 = fcmp ogt <4 x float> %578, %573, !dbg !106
  %580 = fcmp uno <4 x float> %578, zeroinitializer, !dbg !110
  %581 = or <4 x i1> %579, %580, !dbg !111
  %.v10 = select <4 x i1> %581, <4 x i32> %577, <4 x i32> %572, !dbg !112
  %582 = bitcast <4 x i32> %.v10 to <4 x float>, !dbg !112
  %583 = insertelement <4 x i32> poison, i32 %215, i64 0, !dbg !60
  %584 = insertelement <4 x i32> %583, i32 %216, i64 1, !dbg !60
  %585 = insertelement <4 x i32> %584, i32 %217, i64 2, !dbg !60
  %586 = insertelement <4 x i32> %585, i32 %218, i64 3, !dbg !60
  %587 = bitcast <4 x i32> %586 to <4 x float>, !dbg !60
  %588 = fcmp olt <4 x float> %582, %587, !dbg !113
  %589 = fcmp uno <4 x float> %587, zeroinitializer, !dbg !115
  %590 = or <4 x i1> %588, %589, !dbg !116
  %.v11 = select <4 x i1> %590, <4 x i32> %586, <4 x i32> %.v10, !dbg !117
  %591 = bitcast <4 x i32> %.v11 to <4 x float>, !dbg !117
  %592 = insertelement <4 x i32> poison, i32 %256, i64 0, !dbg !68
  %593 = insertelement <4 x i32> %592, i32 %257, i64 1, !dbg !68
  %594 = insertelement <4 x i32> %593, i32 %258, i64 2, !dbg !68
  %595 = insertelement <4 x i32> %594, i32 %259, i64 3, !dbg !68
  %596 = bitcast <4 x i32> %595 to <4 x float>, !dbg !68
  %597 = fcmp olt <4 x float> %591, %596, !dbg !118
  %598 = fcmp uno <4 x float> %596, zeroinitializer, !dbg !120
  %599 = or <4 x i1> %597, %598, !dbg !121
  %.v12 = select <4 x i1> %599, <4 x i32> %595, <4 x i32> %.v11, !dbg !122
  %600 = bitcast <4 x i32> %.v12 to <4 x float>, !dbg !122
  %601 = insertelement <4 x i32> poison, i32 %296, i64 0, !dbg !74
  %602 = insertelement <4 x i32> %601, i32 %297, i64 1, !dbg !74
  %603 = insertelement <4 x i32> %602, i32 %298, i64 2, !dbg !74
  %604 = insertelement <4 x i32> %603, i32 %299, i64 3, !dbg !74
  %605 = bitcast <4 x i32> %604 to <4 x float>, !dbg !74
  %606 = fcmp olt <4 x float> %600, %605, !dbg !123
  %607 = fcmp uno <4 x float> %605, zeroinitializer, !dbg !125
  %608 = or <4 x i1> %606, %607, !dbg !126
  %.v13 = select <4 x i1> %608, <4 x i32> %604, <4 x i32> %.v12, !dbg !127
  %609 = bitcast <4 x i32> %.v13 to <4 x float>, !dbg !127
  %610 = insertelement <4 x i32> poison, i32 %336, i64 0, !dbg !82
  %611 = insertelement <4 x i32> %610, i32 %337, i64 1, !dbg !82
  %612 = insertelement <4 x i32> %611, i32 %338, i64 2, !dbg !82
  %613 = insertelement <4 x i32> %612, i32 %339, i64 3, !dbg !82
  %614 = bitcast <4 x i32> %613 to <4 x float>, !dbg !82
  %615 = fcmp olt <4 x float> %609, %614, !dbg !128
  %616 = fcmp uno <4 x float> %614, zeroinitializer, !dbg !130
  %617 = or <4 x i1> %615, %616, !dbg !131
  %.v14 = select <4 x i1> %617, <4 x i32> %613, <4 x i32> %.v13, !dbg !132
  %618 = bitcast <4 x i32> %.v14 to <4 x float>, !dbg !132
  %619 = insertelement <4 x i32> poison, i32 %377, i64 0, !dbg !90
  %620 = insertelement <4 x i32> %619, i32 %378, i64 1, !dbg !90
  %621 = insertelement <4 x i32> %620, i32 %379, i64 2, !dbg !90
  %622 = insertelement <4 x i32> %621, i32 %380, i64 3, !dbg !90
  %623 = bitcast <4 x i32> %622 to <4 x float>, !dbg !90
  %624 = fcmp olt <4 x float> %618, %623, !dbg !133
  %625 = fcmp uno <4 x float> %623, zeroinitializer, !dbg !135
  %626 = or <4 x i1> %624, %625, !dbg !136
  %.v15 = select <4 x i1> %626, <4 x i32> %622, <4 x i32> %.v14, !dbg !137
  %627 = bitcast <4 x i32> %.v15 to <4 x float>, !dbg !137
  %628 = insertelement <4 x i32> poison, i32 %417, i64 0, !dbg !98
  %629 = insertelement <4 x i32> %628, i32 %418, i64 1, !dbg !98
  %630 = insertelement <4 x i32> %629, i32 %419, i64 2, !dbg !98
  %631 = insertelement <4 x i32> %630, i32 %420, i64 3, !dbg !98
  %632 = bitcast <4 x i32> %631 to <4 x float>, !dbg !98
  %633 = fcmp olt <4 x float> %627, %632, !dbg !138
  %634 = fcmp uno <4 x float> %632, zeroinitializer, !dbg !140
  %635 = or <4 x i1> %633, %634, !dbg !141
  %.v16 = select <4 x i1> %635, <4 x i32> %631, <4 x i32> %.v15, !dbg !142
  %636 = bitcast <4 x i32> %.v16 to <4 x float>, !dbg !142
  %637 = insertelement <4 x i32> poison, i32 %457, i64 0, !dbg !105
  %638 = insertelement <4 x i32> %637, i32 %458, i64 1, !dbg !105
  %639 = insertelement <4 x i32> %638, i32 %459, i64 2, !dbg !105
  %640 = insertelement <4 x i32> %639, i32 %460, i64 3, !dbg !105
  %641 = bitcast <4 x i32> %640 to <4 x float>, !dbg !105
  %642 = fcmp olt <4 x float> %636, %641, !dbg !143
  %643 = bitcast i32 %457 to float, !dbg !145
  %644 = fcmp uno float %643, 0.000000e+00, !dbg !145
  %645 = bitcast i32 %458 to float, !dbg !145
  %646 = fcmp uno float %645, 0.000000e+00, !dbg !145
  %647 = bitcast i32 %459 to float, !dbg !145
  %648 = fcmp uno float %647, 0.000000e+00, !dbg !145
  %649 = bitcast i32 %460 to float, !dbg !145
  %650 = fcmp uno float %649, 0.000000e+00, !dbg !145
  %651 = extractelement <4 x i1> %642, i64 0, !dbg !146
  %652 = or i1 %651, %644, !dbg !146
  %653 = extractelement <4 x i1> %642, i64 1, !dbg !146
  %654 = or i1 %653, %646, !dbg !146
  %655 = extractelement <4 x i1> %642, i64 2, !dbg !146
  %656 = or i1 %655, %648, !dbg !146
  %657 = extractelement <4 x i1> %642, i64 3, !dbg !146
  %658 = or i1 %657, %650, !dbg !146
  %659 = zext <4 x i1> %579 to <4 x i8>, !dbg !147
  %660 = select <4 x i1> %588, <4 x i8> splat (i8 2), <4 x i8> %659, !dbg !148
  %661 = select <4 x i1> %597, <4 x i8> splat (i8 3), <4 x i8> %660, !dbg !149
  %662 = select <4 x i1> %606, <4 x i8> splat (i8 4), <4 x i8> %661, !dbg !150
  %663 = select <4 x i1> %615, <4 x i8> splat (i8 5), <4 x i8> %662, !dbg !151
  %664 = select <4 x i1> %624, <4 x i8> splat (i8 6), <4 x i8> %663, !dbg !152
  %665 = select <4 x i1> %633, <4 x i8> splat (i8 7), <4 x i8> %664, !dbg !153
  %666 = select <4 x i1> %642, <4 x i8> splat (i8 8), <4 x i8> %665, !dbg !154
  %667 = insertelement <4 x i32> poison, i32 %134, i64 0, !dbg !39
  %668 = insertelement <4 x i32> %667, i32 %135, i64 1, !dbg !39
  %669 = insertelement <4 x i32> %668, i32 %136, i64 2, !dbg !39
  %670 = insertelement <4 x i32> %669, i32 %137, i64 3, !dbg !39
  %671 = bitcast <4 x i32> %670 to <4 x float>, !dbg !39
  %672 = insertelement <4 x i32> poison, i32 %176, i64 0, !dbg !48
  %673 = insertelement <4 x i32> %672, i32 %177, i64 1, !dbg !48
  %674 = insertelement <4 x i32> %673, i32 %178, i64 2, !dbg !48
  %675 = insertelement <4 x i32> %674, i32 %179, i64 3, !dbg !48
  %676 = bitcast <4 x i32> %675 to <4 x float>, !dbg !48
  %677 = fcmp ogt <4 x float> %676, %671, !dbg !106
  %678 = fcmp uno <4 x float> %676, zeroinitializer, !dbg !110
  %679 = or <4 x i1> %677, %678, !dbg !111
  %.v17 = select <4 x i1> %679, <4 x i32> %675, <4 x i32> %670, !dbg !112
  %680 = bitcast <4 x i32> %.v17 to <4 x float>, !dbg !112
  %681 = insertelement <4 x i32> poison, i32 %220, i64 0, !dbg !60
  %682 = insertelement <4 x i32> %681, i32 %221, i64 1, !dbg !60
  %683 = insertelement <4 x i32> %682, i32 %222, i64 2, !dbg !60
  %684 = insertelement <4 x i32> %683, i32 %223, i64 3, !dbg !60
  %685 = bitcast <4 x i32> %684 to <4 x float>, !dbg !60
  %686 = fcmp olt <4 x float> %680, %685, !dbg !113
  %687 = fcmp uno <4 x float> %685, zeroinitializer, !dbg !115
  %688 = or <4 x i1> %686, %687, !dbg !116
  %.v18 = select <4 x i1> %688, <4 x i32> %684, <4 x i32> %.v17, !dbg !117
  %689 = bitcast <4 x i32> %.v18 to <4 x float>, !dbg !117
  %690 = insertelement <4 x i32> poison, i32 %261, i64 0, !dbg !68
  %691 = insertelement <4 x i32> %690, i32 %262, i64 1, !dbg !68
  %692 = insertelement <4 x i32> %691, i32 %263, i64 2, !dbg !68
  %693 = insertelement <4 x i32> %692, i32 %264, i64 3, !dbg !68
  %694 = bitcast <4 x i32> %693 to <4 x float>, !dbg !68
  %695 = fcmp olt <4 x float> %689, %694, !dbg !118
  %696 = fcmp uno <4 x float> %694, zeroinitializer, !dbg !120
  %697 = or <4 x i1> %695, %696, !dbg !121
  %.v19 = select <4 x i1> %697, <4 x i32> %693, <4 x i32> %.v18, !dbg !122
  %698 = bitcast <4 x i32> %.v19 to <4 x float>, !dbg !122
  %699 = insertelement <4 x i32> poison, i32 %301, i64 0, !dbg !74
  %700 = insertelement <4 x i32> %699, i32 %302, i64 1, !dbg !74
  %701 = insertelement <4 x i32> %700, i32 %303, i64 2, !dbg !74
  %702 = insertelement <4 x i32> %701, i32 %304, i64 3, !dbg !74
  %703 = bitcast <4 x i32> %702 to <4 x float>, !dbg !74
  %704 = fcmp olt <4 x float> %698, %703, !dbg !123
  %705 = fcmp uno <4 x float> %703, zeroinitializer, !dbg !125
  %706 = or <4 x i1> %704, %705, !dbg !126
  %.v20 = select <4 x i1> %706, <4 x i32> %702, <4 x i32> %.v19, !dbg !127
  %707 = bitcast <4 x i32> %.v20 to <4 x float>, !dbg !127
  %708 = insertelement <4 x i32> poison, i32 %341, i64 0, !dbg !82
  %709 = insertelement <4 x i32> %708, i32 %342, i64 1, !dbg !82
  %710 = insertelement <4 x i32> %709, i32 %343, i64 2, !dbg !82
  %711 = insertelement <4 x i32> %710, i32 %344, i64 3, !dbg !82
  %712 = bitcast <4 x i32> %711 to <4 x float>, !dbg !82
  %713 = fcmp olt <4 x float> %707, %712, !dbg !128
  %714 = fcmp uno <4 x float> %712, zeroinitializer, !dbg !130
  %715 = or <4 x i1> %713, %714, !dbg !131
  %.v21 = select <4 x i1> %715, <4 x i32> %711, <4 x i32> %.v20, !dbg !132
  %716 = bitcast <4 x i32> %.v21 to <4 x float>, !dbg !132
  %717 = insertelement <4 x i32> poison, i32 %382, i64 0, !dbg !90
  %718 = insertelement <4 x i32> %717, i32 %383, i64 1, !dbg !90
  %719 = insertelement <4 x i32> %718, i32 %384, i64 2, !dbg !90
  %720 = insertelement <4 x i32> %719, i32 %385, i64 3, !dbg !90
  %721 = bitcast <4 x i32> %720 to <4 x float>, !dbg !90
  %722 = fcmp olt <4 x float> %716, %721, !dbg !133
  %723 = fcmp uno <4 x float> %721, zeroinitializer, !dbg !135
  %724 = or <4 x i1> %722, %723, !dbg !136
  %.v22 = select <4 x i1> %724, <4 x i32> %720, <4 x i32> %.v21, !dbg !137
  %725 = bitcast <4 x i32> %.v22 to <4 x float>, !dbg !137
  %726 = insertelement <4 x i32> poison, i32 %422, i64 0, !dbg !98
  %727 = insertelement <4 x i32> %726, i32 %423, i64 1, !dbg !98
  %728 = insertelement <4 x i32> %727, i32 %424, i64 2, !dbg !98
  %729 = insertelement <4 x i32> %728, i32 %425, i64 3, !dbg !98
  %730 = bitcast <4 x i32> %729 to <4 x float>, !dbg !98
  %731 = fcmp olt <4 x float> %725, %730, !dbg !138
  %732 = fcmp uno <4 x float> %730, zeroinitializer, !dbg !140
  %733 = or <4 x i1> %731, %732, !dbg !141
  %.v23 = select <4 x i1> %733, <4 x i32> %729, <4 x i32> %.v22, !dbg !142
  %734 = bitcast <4 x i32> %.v23 to <4 x float>, !dbg !142
  %735 = insertelement <4 x i32> poison, i32 %462, i64 0, !dbg !105
  %736 = insertelement <4 x i32> %735, i32 %463, i64 1, !dbg !105
  %737 = insertelement <4 x i32> %736, i32 %464, i64 2, !dbg !105
  %738 = insertelement <4 x i32> %737, i32 %465, i64 3, !dbg !105
  %739 = bitcast <4 x i32> %738 to <4 x float>, !dbg !105
  %740 = fcmp olt <4 x float> %734, %739, !dbg !143
  %741 = bitcast i32 %462 to float, !dbg !145
  %742 = fcmp uno float %741, 0.000000e+00, !dbg !145
  %743 = bitcast i32 %463 to float, !dbg !145
  %744 = fcmp uno float %743, 0.000000e+00, !dbg !145
  %745 = bitcast i32 %464 to float, !dbg !145
  %746 = fcmp uno float %745, 0.000000e+00, !dbg !145
  %747 = bitcast i32 %465 to float, !dbg !145
  %748 = fcmp uno float %747, 0.000000e+00, !dbg !145
  %749 = extractelement <4 x i1> %740, i64 0, !dbg !146
  %750 = or i1 %749, %742, !dbg !146
  %751 = extractelement <4 x i1> %740, i64 1, !dbg !146
  %752 = or i1 %751, %744, !dbg !146
  %753 = extractelement <4 x i1> %740, i64 2, !dbg !146
  %754 = or i1 %753, %746, !dbg !146
  %755 = extractelement <4 x i1> %740, i64 3, !dbg !146
  %756 = or i1 %755, %748, !dbg !146
  %757 = zext <4 x i1> %677 to <4 x i8>, !dbg !147
  %758 = select <4 x i1> %686, <4 x i8> splat (i8 2), <4 x i8> %757, !dbg !148
  %759 = select <4 x i1> %695, <4 x i8> splat (i8 3), <4 x i8> %758, !dbg !149
  %760 = select <4 x i1> %704, <4 x i8> splat (i8 4), <4 x i8> %759, !dbg !150
  %761 = select <4 x i1> %713, <4 x i8> splat (i8 5), <4 x i8> %760, !dbg !151
  %762 = select <4 x i1> %722, <4 x i8> splat (i8 6), <4 x i8> %761, !dbg !152
  %763 = select <4 x i1> %731, <4 x i8> splat (i8 7), <4 x i8> %762, !dbg !153
  %764 = select <4 x i1> %740, <4 x i8> splat (i8 8), <4 x i8> %763, !dbg !154
  %765 = insertelement <4 x i32> poison, i32 %139, i64 0, !dbg !39
  %766 = insertelement <4 x i32> %765, i32 %140, i64 1, !dbg !39
  %767 = insertelement <4 x i32> %766, i32 %141, i64 2, !dbg !39
  %768 = insertelement <4 x i32> %767, i32 %142, i64 3, !dbg !39
  %769 = bitcast <4 x i32> %768 to <4 x float>, !dbg !39
  %770 = insertelement <4 x i32> poison, i32 %181, i64 0, !dbg !48
  %771 = insertelement <4 x i32> %770, i32 %182, i64 1, !dbg !48
  %772 = insertelement <4 x i32> %771, i32 %183, i64 2, !dbg !48
  %773 = insertelement <4 x i32> %772, i32 %184, i64 3, !dbg !48
  %774 = bitcast <4 x i32> %773 to <4 x float>, !dbg !48
  %775 = fcmp ogt <4 x float> %774, %769, !dbg !106
  %776 = fcmp uno <4 x float> %774, zeroinitializer, !dbg !110
  %777 = or <4 x i1> %775, %776, !dbg !111
  %.v24 = select <4 x i1> %777, <4 x i32> %773, <4 x i32> %768, !dbg !112
  %778 = bitcast <4 x i32> %.v24 to <4 x float>, !dbg !112
  %779 = insertelement <4 x i32> poison, i32 %225, i64 0, !dbg !60
  %780 = insertelement <4 x i32> %779, i32 %226, i64 1, !dbg !60
  %781 = insertelement <4 x i32> %780, i32 %227, i64 2, !dbg !60
  %782 = insertelement <4 x i32> %781, i32 %228, i64 3, !dbg !60
  %783 = bitcast <4 x i32> %782 to <4 x float>, !dbg !60
  %784 = fcmp olt <4 x float> %778, %783, !dbg !113
  %785 = fcmp uno <4 x float> %783, zeroinitializer, !dbg !115
  %786 = or <4 x i1> %784, %785, !dbg !116
  %.v25 = select <4 x i1> %786, <4 x i32> %782, <4 x i32> %.v24, !dbg !117
  %787 = bitcast <4 x i32> %.v25 to <4 x float>, !dbg !117
  %788 = insertelement <4 x i32> poison, i32 %266, i64 0, !dbg !68
  %789 = insertelement <4 x i32> %788, i32 %267, i64 1, !dbg !68
  %790 = insertelement <4 x i32> %789, i32 %268, i64 2, !dbg !68
  %791 = insertelement <4 x i32> %790, i32 %269, i64 3, !dbg !68
  %792 = bitcast <4 x i32> %791 to <4 x float>, !dbg !68
  %793 = fcmp olt <4 x float> %787, %792, !dbg !118
  %794 = fcmp uno <4 x float> %792, zeroinitializer, !dbg !120
  %795 = or <4 x i1> %793, %794, !dbg !121
  %.v26 = select <4 x i1> %795, <4 x i32> %791, <4 x i32> %.v25, !dbg !122
  %796 = bitcast <4 x i32> %.v26 to <4 x float>, !dbg !122
  %797 = insertelement <4 x i32> poison, i32 %306, i64 0, !dbg !74
  %798 = insertelement <4 x i32> %797, i32 %307, i64 1, !dbg !74
  %799 = insertelement <4 x i32> %798, i32 %308, i64 2, !dbg !74
  %800 = insertelement <4 x i32> %799, i32 %309, i64 3, !dbg !74
  %801 = bitcast <4 x i32> %800 to <4 x float>, !dbg !74
  %802 = fcmp olt <4 x float> %796, %801, !dbg !123
  %803 = fcmp uno <4 x float> %801, zeroinitializer, !dbg !125
  %804 = or <4 x i1> %802, %803, !dbg !126
  %.v27 = select <4 x i1> %804, <4 x i32> %800, <4 x i32> %.v26, !dbg !127
  %805 = bitcast <4 x i32> %.v27 to <4 x float>, !dbg !127
  %806 = insertelement <4 x i32> poison, i32 %346, i64 0, !dbg !82
  %807 = insertelement <4 x i32> %806, i32 %347, i64 1, !dbg !82
  %808 = insertelement <4 x i32> %807, i32 %348, i64 2, !dbg !82
  %809 = insertelement <4 x i32> %808, i32 %349, i64 3, !dbg !82
  %810 = bitcast <4 x i32> %809 to <4 x float>, !dbg !82
  %811 = fcmp olt <4 x float> %805, %810, !dbg !128
  %812 = fcmp uno <4 x float> %810, zeroinitializer, !dbg !130
  %813 = or <4 x i1> %811, %812, !dbg !131
  %.v28 = select <4 x i1> %813, <4 x i32> %809, <4 x i32> %.v27, !dbg !132
  %814 = bitcast <4 x i32> %.v28 to <4 x float>, !dbg !132
  %815 = insertelement <4 x i32> poison, i32 %387, i64 0, !dbg !90
  %816 = insertelement <4 x i32> %815, i32 %388, i64 1, !dbg !90
  %817 = insertelement <4 x i32> %816, i32 %389, i64 2, !dbg !90
  %818 = insertelement <4 x i32> %817, i32 %390, i64 3, !dbg !90
  %819 = bitcast <4 x i32> %818 to <4 x float>, !dbg !90
  %820 = fcmp olt <4 x float> %814, %819, !dbg !133
  %821 = fcmp uno <4 x float> %819, zeroinitializer, !dbg !135
  %822 = or <4 x i1> %820, %821, !dbg !136
  %.v29 = select <4 x i1> %822, <4 x i32> %818, <4 x i32> %.v28, !dbg !137
  %823 = bitcast <4 x i32> %.v29 to <4 x float>, !dbg !137
  %824 = insertelement <4 x i32> poison, i32 %427, i64 0, !dbg !98
  %825 = insertelement <4 x i32> %824, i32 %428, i64 1, !dbg !98
  %826 = insertelement <4 x i32> %825, i32 %429, i64 2, !dbg !98
  %827 = insertelement <4 x i32> %826, i32 %430, i64 3, !dbg !98
  %828 = bitcast <4 x i32> %827 to <4 x float>, !dbg !98
  %829 = fcmp olt <4 x float> %823, %828, !dbg !138
  %830 = fcmp uno <4 x float> %828, zeroinitializer, !dbg !140
  %831 = or <4 x i1> %829, %830, !dbg !141
  %.v30 = select <4 x i1> %831, <4 x i32> %827, <4 x i32> %.v29, !dbg !142
  %832 = bitcast <4 x i32> %.v30 to <4 x float>, !dbg !142
  %833 = insertelement <4 x i32> poison, i32 %467, i64 0, !dbg !105
  %834 = insertelement <4 x i32> %833, i32 %468, i64 1, !dbg !105
  %835 = insertelement <4 x i32> %834, i32 %469, i64 2, !dbg !105
  %836 = insertelement <4 x i32> %835, i32 %470, i64 3, !dbg !105
  %837 = bitcast <4 x i32> %836 to <4 x float>, !dbg !105
  %838 = fcmp olt <4 x float> %832, %837, !dbg !143
  %839 = bitcast i32 %467 to float, !dbg !145
  %840 = fcmp uno float %839, 0.000000e+00, !dbg !145
  %841 = bitcast i32 %468 to float, !dbg !145
  %842 = fcmp uno float %841, 0.000000e+00, !dbg !145
  %843 = bitcast i32 %469 to float, !dbg !145
  %844 = fcmp uno float %843, 0.000000e+00, !dbg !145
  %845 = bitcast i32 %470 to float, !dbg !145
  %846 = fcmp uno float %845, 0.000000e+00, !dbg !145
  %847 = extractelement <4 x i1> %838, i64 0, !dbg !146
  %848 = or i1 %847, %840, !dbg !146
  %849 = extractelement <4 x i1> %838, i64 1, !dbg !146
  %850 = or i1 %849, %842, !dbg !146
  %851 = extractelement <4 x i1> %838, i64 2, !dbg !146
  %852 = or i1 %851, %844, !dbg !146
  %853 = extractelement <4 x i1> %838, i64 3, !dbg !146
  %854 = or i1 %853, %846, !dbg !146
  %855 = zext <4 x i1> %775 to <4 x i8>, !dbg !147
  %856 = select <4 x i1> %784, <4 x i8> splat (i8 2), <4 x i8> %855, !dbg !148
  %857 = select <4 x i1> %793, <4 x i8> splat (i8 3), <4 x i8> %856, !dbg !149
  %858 = select <4 x i1> %802, <4 x i8> splat (i8 4), <4 x i8> %857, !dbg !150
  %859 = select <4 x i1> %811, <4 x i8> splat (i8 5), <4 x i8> %858, !dbg !151
  %860 = select <4 x i1> %820, <4 x i8> splat (i8 6), <4 x i8> %859, !dbg !152
  %861 = select <4 x i1> %829, <4 x i8> splat (i8 7), <4 x i8> %860, !dbg !153
  %862 = select <4 x i1> %838, <4 x i8> splat (i8 8), <4 x i8> %861, !dbg !154
  %863 = mul i32 %54, 25, !dbg !155
  %864 = add i32 %863, %.decomposed, !dbg !156
  %865 = mul i32 %59, 38400, !dbg !157
  %866 = mul i32 %60, 38400, !dbg !157
  %867 = mul i32 %61, 38400, !dbg !157
  %868 = mul i32 %62, 38400, !dbg !157
  %869 = mul i32 %63, 38400, !dbg !157
  %870 = mul i32 %64, 38400, !dbg !157
  %871 = mul i32 %65, 38400, !dbg !157
  %872 = mul i32 %66, 38400, !dbg !157
  %873 = mul i32 %67, 38400, !dbg !157
  %874 = mul i32 %68, 38400, !dbg !157
  %875 = mul i32 %69, 38400, !dbg !157
  %876 = mul i32 %70, 38400, !dbg !157
  %877 = mul i32 %71, 38400, !dbg !157
  %878 = mul i32 %72, 38400, !dbg !157
  %879 = mul i32 %73, 38400, !dbg !157
  %880 = mul i32 %74, 38400, !dbg !157
  %881 = add i32 %864, %865, !dbg !158
  %882 = add i32 %866, %.decomposed32, !dbg !156
  %883 = add i32 %882, %863, !dbg !158
  %884 = add i32 %867, %.decomposed34, !dbg !156
  %885 = add i32 %884, %863, !dbg !158
  %886 = add i32 %868, %.decomposed36, !dbg !156
  %887 = add i32 %886, %863, !dbg !158
  %888 = add i32 %869, %.decomposed38, !dbg !156
  %889 = add i32 %888, %863, !dbg !158
  %890 = add i32 %870, %.decomposed40, !dbg !156
  %891 = add i32 %890, %863, !dbg !158
  %892 = add i32 %871, %.decomposed42, !dbg !156
  %893 = add i32 %892, %863, !dbg !158
  %894 = add i32 %872, %.decomposed44, !dbg !156
  %895 = add i32 %894, %863, !dbg !158
  %896 = add i32 %873, %.decomposed46, !dbg !156
  %897 = add i32 %896, %863, !dbg !158
  %898 = add i32 %874, %.decomposed48, !dbg !156
  %899 = add i32 %898, %863, !dbg !158
  %900 = add i32 %875, %.decomposed50, !dbg !156
  %901 = add i32 %900, %863, !dbg !158
  %902 = add i32 %876, %.decomposed52, !dbg !156
  %903 = add i32 %902, %863, !dbg !158
  %904 = add i32 %877, %.decomposed54, !dbg !156
  %905 = add i32 %904, %863, !dbg !158
  %906 = add i32 %878, %.decomposed56, !dbg !156
  %907 = add i32 %906, %863, !dbg !158
  %908 = add i32 %879, %.decomposed58, !dbg !156
  %909 = add i32 %908, %863, !dbg !158
  %910 = add i32 %880, %.decomposed60, !dbg !156
  %911 = add i32 %910, %863, !dbg !158
  %912 = sext i32 %881 to i64, !dbg !159
  %913 = getelementptr float, ptr addrspace(1) %1, i64 %912, !dbg !159
  %914 = sext i32 %883 to i64, !dbg !159
  %915 = getelementptr float, ptr addrspace(1) %1, i64 %914, !dbg !159
  %916 = sext i32 %885 to i64, !dbg !159
  %917 = getelementptr float, ptr addrspace(1) %1, i64 %916, !dbg !159
  %918 = sext i32 %887 to i64, !dbg !159
  %919 = getelementptr float, ptr addrspace(1) %1, i64 %918, !dbg !159
  %920 = sext i32 %889 to i64, !dbg !159
  %921 = getelementptr float, ptr addrspace(1) %1, i64 %920, !dbg !159
  %922 = sext i32 %891 to i64, !dbg !159
  %923 = getelementptr float, ptr addrspace(1) %1, i64 %922, !dbg !159
  %924 = sext i32 %893 to i64, !dbg !159
  %925 = getelementptr float, ptr addrspace(1) %1, i64 %924, !dbg !159
  %926 = sext i32 %895 to i64, !dbg !159
  %927 = getelementptr float, ptr addrspace(1) %1, i64 %926, !dbg !159
  %928 = sext i32 %897 to i64, !dbg !159
  %929 = getelementptr float, ptr addrspace(1) %1, i64 %928, !dbg !159
  %930 = sext i32 %899 to i64, !dbg !159
  %931 = getelementptr float, ptr addrspace(1) %1, i64 %930, !dbg !159
  %932 = sext i32 %901 to i64, !dbg !159
  %933 = getelementptr float, ptr addrspace(1) %1, i64 %932, !dbg !159
  %934 = sext i32 %903 to i64, !dbg !159
  %935 = getelementptr float, ptr addrspace(1) %1, i64 %934, !dbg !159
  %936 = sext i32 %905 to i64, !dbg !159
  %937 = getelementptr float, ptr addrspace(1) %1, i64 %936, !dbg !159
  %938 = sext i32 %907 to i64, !dbg !159
  %939 = getelementptr float, ptr addrspace(1) %1, i64 %938, !dbg !159
  %940 = sext i32 %909 to i64, !dbg !159
  %941 = getelementptr float, ptr addrspace(1) %1, i64 %940, !dbg !159
  %942 = sext i32 %911 to i64, !dbg !159
  %943 = getelementptr float, ptr addrspace(1) %1, i64 %942, !dbg !159
  %944 = and i1 %31, %56, !dbg !160
  %945 = and i1 %32, %56, !dbg !160
  %946 = and i1 %33, %56, !dbg !160
  %947 = and i1 %34, %56, !dbg !160
  %948 = and i1 %35, %56, !dbg !160
  %949 = and i1 %36, %56, !dbg !160
  %950 = and i1 %37, %56, !dbg !160
  %951 = and i1 %38, %56, !dbg !160
  %952 = and i1 %39, %56, !dbg !160
  %953 = and i1 %40, %56, !dbg !160
  %954 = and i1 %41, %56, !dbg !160
  %955 = and i1 %42, %56, !dbg !160
  %956 = and i1 %43, %56, !dbg !160
  %957 = and i1 %44, %56, !dbg !160
  %958 = and i1 %30, %55, !dbg !160
  %959 = and i32 %47, 4080, !dbg !161
  %960 = and i32 %8, 255, !dbg !161
  %961 = lshr i32 %959, 5, !dbg !161
  %962 = getelementptr float, ptr addrspace(3) @global_smem, i32 %961, !dbg !161
  %963 = getelementptr float, ptr addrspace(3) %962, i32 %959, !dbg !161
  %964 = extractelement <4 x i32> %.v9, i64 0, !dbg !161
  %965 = select i1 %554, i32 %452, i32 %964, !dbg !162
  %966 = insertelement <1 x i32> poison, i32 %965, i64 0, !dbg !161
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %963, <1 x i32> %966, i1 true) #2, !dbg !161
  %967 = or disjoint i32 %959, 1, !dbg !161
  %968 = getelementptr float, ptr addrspace(3) %962, i32 %967, !dbg !161
  %969 = extractelement <4 x i32> %.v9, i64 1, !dbg !161
  %970 = select i1 %556, i32 %453, i32 %969, !dbg !162
  %971 = insertelement <1 x i32> poison, i32 %970, i64 0, !dbg !161
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %968, <1 x i32> %971, i1 true) #2, !dbg !161
  %972 = or disjoint i32 %959, 2, !dbg !161
  %973 = getelementptr float, ptr addrspace(3) %962, i32 %972, !dbg !161
  %974 = extractelement <4 x i32> %.v9, i64 2, !dbg !161
  %975 = select i1 %558, i32 %454, i32 %974, !dbg !162
  %976 = insertelement <1 x i32> poison, i32 %975, i64 0, !dbg !161
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %973, <1 x i32> %976, i1 true) #2, !dbg !161
  %977 = or disjoint i32 %959, 3, !dbg !161
  %978 = getelementptr float, ptr addrspace(3) %962, i32 %977, !dbg !161
  %979 = extractelement <4 x i32> %.v9, i64 3, !dbg !161
  %980 = select i1 %560, i32 %455, i32 %979, !dbg !162
  %981 = insertelement <1 x i32> poison, i32 %980, i64 0, !dbg !161
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %978, <1 x i32> %981, i1 true) #2, !dbg !161
  %982 = or disjoint i32 %959, 4, !dbg !161
  %983 = getelementptr float, ptr addrspace(3) %962, i32 %982, !dbg !161
  %984 = extractelement <4 x i32> %.v16, i64 0, !dbg !161
  %985 = select i1 %652, i32 %457, i32 %984, !dbg !162
  %986 = insertelement <1 x i32> poison, i32 %985, i64 0, !dbg !161
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %983, <1 x i32> %986, i1 true) #2, !dbg !161
  %987 = or disjoint i32 %959, 5, !dbg !161
  %988 = getelementptr float, ptr addrspace(3) %962, i32 %987, !dbg !161
  %989 = extractelement <4 x i32> %.v16, i64 1, !dbg !161
  %990 = select i1 %654, i32 %458, i32 %989, !dbg !162
  %991 = insertelement <1 x i32> poison, i32 %990, i64 0, !dbg !161
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %988, <1 x i32> %991, i1 true) #2, !dbg !161
  %992 = or disjoint i32 %959, 6, !dbg !161
  %993 = getelementptr float, ptr addrspace(3) %962, i32 %992, !dbg !161
  %994 = extractelement <4 x i32> %.v16, i64 2, !dbg !161
  %995 = select i1 %656, i32 %459, i32 %994, !dbg !162
  %996 = insertelement <1 x i32> poison, i32 %995, i64 0, !dbg !161
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %993, <1 x i32> %996, i1 true) #2, !dbg !161
  %997 = or disjoint i32 %959, 7, !dbg !161
  %998 = getelementptr float, ptr addrspace(3) %962, i32 %997, !dbg !161
  %999 = extractelement <4 x i32> %.v16, i64 3, !dbg !161
  %1000 = select i1 %658, i32 %460, i32 %999, !dbg !162
  %1001 = insertelement <1 x i32> poison, i32 %1000, i64 0, !dbg !161
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %998, <1 x i32> %1001, i1 true) #2, !dbg !161
  %1002 = or disjoint i32 %959, 8, !dbg !161
  %1003 = getelementptr float, ptr addrspace(3) %962, i32 %1002, !dbg !161
  %1004 = extractelement <4 x i32> %.v23, i64 0, !dbg !161
  %1005 = select i1 %750, i32 %462, i32 %1004, !dbg !162
  %1006 = insertelement <1 x i32> poison, i32 %1005, i64 0, !dbg !161
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1003, <1 x i32> %1006, i1 true) #2, !dbg !161
  %1007 = or disjoint i32 %959, 9, !dbg !161
  %1008 = getelementptr float, ptr addrspace(3) %962, i32 %1007, !dbg !161
  %1009 = extractelement <4 x i32> %.v23, i64 1, !dbg !161
  %1010 = select i1 %752, i32 %463, i32 %1009, !dbg !162
  %1011 = insertelement <1 x i32> poison, i32 %1010, i64 0, !dbg !161
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1008, <1 x i32> %1011, i1 true) #2, !dbg !161
  %1012 = or disjoint i32 %959, 10, !dbg !161
  %1013 = getelementptr float, ptr addrspace(3) %962, i32 %1012, !dbg !161
  %1014 = extractelement <4 x i32> %.v23, i64 2, !dbg !161
  %1015 = select i1 %754, i32 %464, i32 %1014, !dbg !162
  %1016 = insertelement <1 x i32> poison, i32 %1015, i64 0, !dbg !161
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1013, <1 x i32> %1016, i1 true) #2, !dbg !161
  %1017 = or disjoint i32 %959, 11, !dbg !161
  %1018 = getelementptr float, ptr addrspace(3) %962, i32 %1017, !dbg !161
  %1019 = extractelement <4 x i32> %.v23, i64 3, !dbg !161
  %1020 = select i1 %756, i32 %465, i32 %1019, !dbg !162
  %1021 = insertelement <1 x i32> poison, i32 %1020, i64 0, !dbg !161
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1018, <1 x i32> %1021, i1 true) #2, !dbg !161
  %1022 = or disjoint i32 %959, 12, !dbg !161
  %1023 = getelementptr float, ptr addrspace(3) %962, i32 %1022, !dbg !161
  %1024 = extractelement <4 x i32> %.v30, i64 0, !dbg !161
  %1025 = select i1 %848, i32 %467, i32 %1024, !dbg !162
  %1026 = insertelement <1 x i32> poison, i32 %1025, i64 0, !dbg !161
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1023, <1 x i32> %1026, i1 true) #2, !dbg !161
  %1027 = or disjoint i32 %959, 13, !dbg !161
  %1028 = getelementptr float, ptr addrspace(3) %962, i32 %1027, !dbg !161
  %1029 = extractelement <4 x i32> %.v30, i64 1, !dbg !161
  %1030 = select i1 %850, i32 %468, i32 %1029, !dbg !162
  %1031 = insertelement <1 x i32> poison, i32 %1030, i64 0, !dbg !161
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1028, <1 x i32> %1031, i1 true) #2, !dbg !161
  %1032 = or disjoint i32 %959, 14, !dbg !161
  %1033 = getelementptr float, ptr addrspace(3) %962, i32 %1032, !dbg !161
  %1034 = extractelement <4 x i32> %.v30, i64 2, !dbg !161
  %1035 = select i1 %852, i32 %469, i32 %1034, !dbg !162
  %1036 = insertelement <1 x i32> poison, i32 %1035, i64 0, !dbg !161
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1033, <1 x i32> %1036, i1 true) #2, !dbg !161
  %1037 = or disjoint i32 %959, 15, !dbg !161
  %1038 = getelementptr float, ptr addrspace(3) %962, i32 %1037, !dbg !161
  %1039 = extractelement <4 x i32> %.v30, i64 3, !dbg !161
  %1040 = select i1 %854, i32 %470, i32 %1039, !dbg !162
  %1041 = insertelement <1 x i32> poison, i32 %1040, i64 0, !dbg !161
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1038, <1 x i32> %1041, i1 true) #2, !dbg !161
  tail call void @llvm.nvvm.barrier0(), !dbg !161
  %1042 = lshr i32 %960, 5, !dbg !161
  %1043 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1042, !dbg !161
  %1044 = getelementptr inbounds float, ptr addrspace(3) %1043, i32 %960, !dbg !161
  %1045 = load i32, ptr addrspace(3) %1044, align 4, !dbg !161
  %1046 = or disjoint i32 %960, 256, !dbg !161
  %1047 = lshr i32 %1046, 5, !dbg !161
  %1048 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1047, !dbg !161
  %1049 = getelementptr inbounds float, ptr addrspace(3) %1048, i32 %1046, !dbg !161
  %1050 = load i32, ptr addrspace(3) %1049, align 4, !dbg !161
  %1051 = or disjoint i32 %960, 512, !dbg !161
  %1052 = lshr i32 %1051, 5, !dbg !161
  %1053 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1052, !dbg !161
  %1054 = getelementptr inbounds float, ptr addrspace(3) %1053, i32 %1051, !dbg !161
  %1055 = load i32, ptr addrspace(3) %1054, align 4, !dbg !161
  %1056 = or disjoint i32 %960, 768, !dbg !161
  %1057 = lshr i32 %1056, 5, !dbg !161
  %1058 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1057, !dbg !161
  %1059 = getelementptr inbounds float, ptr addrspace(3) %1058, i32 %1056, !dbg !161
  %1060 = load i32, ptr addrspace(3) %1059, align 4, !dbg !161
  %1061 = or disjoint i32 %960, 1024, !dbg !161
  %1062 = lshr i32 %1061, 5, !dbg !161
  %1063 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1062, !dbg !161
  %1064 = getelementptr inbounds float, ptr addrspace(3) %1063, i32 %1061, !dbg !161
  %1065 = load i32, ptr addrspace(3) %1064, align 4, !dbg !161
  %1066 = or disjoint i32 %960, 1280, !dbg !161
  %1067 = lshr i32 %1066, 5, !dbg !161
  %1068 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1067, !dbg !161
  %1069 = getelementptr inbounds float, ptr addrspace(3) %1068, i32 %1066, !dbg !161
  %1070 = load i32, ptr addrspace(3) %1069, align 4, !dbg !161
  %1071 = or disjoint i32 %960, 1536, !dbg !161
  %1072 = lshr i32 %1071, 5, !dbg !161
  %1073 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1072, !dbg !161
  %1074 = getelementptr inbounds float, ptr addrspace(3) %1073, i32 %1071, !dbg !161
  %1075 = load i32, ptr addrspace(3) %1074, align 4, !dbg !161
  %1076 = or disjoint i32 %960, 1792, !dbg !161
  %1077 = lshr i32 %1076, 5, !dbg !161
  %1078 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1077, !dbg !161
  %1079 = getelementptr inbounds float, ptr addrspace(3) %1078, i32 %1076, !dbg !161
  %1080 = load i32, ptr addrspace(3) %1079, align 4, !dbg !161
  %1081 = or disjoint i32 %960, 2048, !dbg !161
  %1082 = lshr i32 %1081, 5, !dbg !161
  %1083 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1082, !dbg !161
  %1084 = getelementptr inbounds float, ptr addrspace(3) %1083, i32 %1081, !dbg !161
  %1085 = load i32, ptr addrspace(3) %1084, align 4, !dbg !161
  %1086 = or disjoint i32 %960, 2304, !dbg !161
  %1087 = lshr i32 %1086, 5, !dbg !161
  %1088 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1087, !dbg !161
  %1089 = getelementptr inbounds float, ptr addrspace(3) %1088, i32 %1086, !dbg !161
  %1090 = load i32, ptr addrspace(3) %1089, align 4, !dbg !161
  %1091 = or disjoint i32 %960, 2560, !dbg !161
  %1092 = lshr i32 %1091, 5, !dbg !161
  %1093 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1092, !dbg !161
  %1094 = getelementptr inbounds float, ptr addrspace(3) %1093, i32 %1091, !dbg !161
  %1095 = load i32, ptr addrspace(3) %1094, align 4, !dbg !161
  %1096 = or disjoint i32 %960, 2816, !dbg !161
  %1097 = lshr i32 %1096, 5, !dbg !161
  %1098 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1097, !dbg !161
  %1099 = getelementptr inbounds float, ptr addrspace(3) %1098, i32 %1096, !dbg !161
  %1100 = load i32, ptr addrspace(3) %1099, align 4, !dbg !161
  %1101 = or disjoint i32 %960, 3072, !dbg !161
  %1102 = lshr i32 %1101, 5, !dbg !161
  %1103 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1102, !dbg !161
  %1104 = getelementptr inbounds float, ptr addrspace(3) %1103, i32 %1101, !dbg !161
  %1105 = load i32, ptr addrspace(3) %1104, align 4, !dbg !161
  %1106 = or disjoint i32 %960, 3328, !dbg !161
  %1107 = lshr i32 %1106, 5, !dbg !161
  %1108 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1107, !dbg !161
  %1109 = getelementptr inbounds float, ptr addrspace(3) %1108, i32 %1106, !dbg !161
  %1110 = load i32, ptr addrspace(3) %1109, align 4, !dbg !161
  %1111 = or disjoint i32 %960, 3584, !dbg !161
  %1112 = lshr i32 %1111, 5, !dbg !161
  %1113 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1112, !dbg !161
  %1114 = getelementptr inbounds float, ptr addrspace(3) %1113, i32 %1111, !dbg !161
  %1115 = load i32, ptr addrspace(3) %1114, align 4, !dbg !161
  %1116 = or disjoint i32 %960, 3840, !dbg !161
  %1117 = lshr i32 %1116, 5, !dbg !161
  %1118 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1117, !dbg !161
  %1119 = getelementptr inbounds float, ptr addrspace(3) %1118, i32 %1116, !dbg !161
  %1120 = load i32, ptr addrspace(3) %1119, align 4, !dbg !161
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1045, ptr addrspace(1) %913, i1 %944) #2, !dbg !161
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1050, ptr addrspace(1) %915, i1 %945) #2, !dbg !161
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1055, ptr addrspace(1) %917, i1 %946) #2, !dbg !161
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1060, ptr addrspace(1) %919, i1 %947) #2, !dbg !161
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1065, ptr addrspace(1) %921, i1 %948) #2, !dbg !161
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1070, ptr addrspace(1) %923, i1 %949) #2, !dbg !161
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1075, ptr addrspace(1) %925, i1 %950) #2, !dbg !161
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1080, ptr addrspace(1) %927, i1 %951) #2, !dbg !161
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1085, ptr addrspace(1) %929, i1 %952) #2, !dbg !161
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1090, ptr addrspace(1) %931, i1 %953) #2, !dbg !161
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1095, ptr addrspace(1) %933, i1 %954) #2, !dbg !161
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1100, ptr addrspace(1) %935, i1 %955) #2, !dbg !161
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1105, ptr addrspace(1) %937, i1 %956) #2, !dbg !161
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1110, ptr addrspace(1) %939, i1 %957) #2, !dbg !161
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1115, ptr addrspace(1) %941, i1 %957) #2, !dbg !161
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1120, ptr addrspace(1) %943, i1 %957) #2, !dbg !161
  %1121 = shl i32 %13, 10, !dbg !163
  %1122 = add i32 %50, %1121, !dbg !164
  %1123 = sext i32 %1122 to i64, !dbg !165
  %1124 = getelementptr i8, ptr addrspace(1) %2, i64 %1123, !dbg !165
  %1125 = bitcast <4 x i8> %568 to i32, !dbg !166
  %1126 = bitcast <4 x i8> %666 to i32, !dbg !166
  %1127 = bitcast <4 x i8> %764 to i32, !dbg !166
  %1128 = bitcast <4 x i8> %862 to i32, !dbg !166
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1125, i32 %1126, i32 %1127, i32 %1128, ptr addrspace(1) %1124, i1 %958) #2, !dbg !166
  ret void, !dbg !167
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cktktawpzp2exjyp7m5ioszbh7nekfib55m7xbsaaq4lnm3lnoa5.py", directory: "inductor_cache/kt")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_23, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_23, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_23", linkageName: "triton_poi_fused_max_pool2d_with_indices_23", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 28, column: 21, scope: !7)
!21 = !DILocation(line: 31, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 19, scope: !7)
!23 = !DILocation(line: 45, column: 74, scope: !7)
!24 = !DILocation(line: 29, column: 19, scope: !7)
!25 = !DILocation(line: 67, column: 20, scope: !7)
!26 = !DILocation(line: 36, column: 19, scope: !7)
!27 = !DILocation(line: 40, column: 20, scope: !7)
!28 = !DILocation(line: 41, column: 19, scope: !7)
!29 = !DILocation(line: 44, column: 19, scope: !7)
!30 = !DILocation(line: 45, column: 52, scope: !7)
!31 = !DILocation(line: 45, column: 63, scope: !7)
!32 = !DILocation(line: 45, column: 42, scope: !7)
!33 = !DILocation(line: 45, column: 47, scope: !7)
!34 = !DILocation(line: 45, column: 57, scope: !7)
!35 = !DILocation(line: 45, column: 68, scope: !7)
!36 = !DILocation(line: 45, column: 31, scope: !7)
!37 = !DILocation(line: 45, column: 87, scope: !7)
!38 = !DILocation(line: 45, column: 95, scope: !7)
!39 = !DILocation(line: 45, column: 79, scope: !7)
!40 = !DILocation(line: 47, column: 21, scope: !7)
!41 = !DILocation(line: 50, column: 19, scope: !7)
!42 = !DILocation(line: 51, column: 46, scope: !7)
!43 = !DILocation(line: 51, column: 56, scope: !7)
!44 = !DILocation(line: 51, column: 67, scope: !7)
!45 = !DILocation(line: 51, column: 31, scope: !7)
!46 = !DILocation(line: 51, column: 86, scope: !7)
!47 = !DILocation(line: 51, column: 94, scope: !7)
!48 = !DILocation(line: 51, column: 78, scope: !7)
!49 = !DILocation(line: 53, column: 16, scope: !7)
!50 = !DILocation(line: 55, column: 20, scope: !7)
!51 = !DILocation(line: 56, column: 20, scope: !7)
!52 = !DILocation(line: 83, column: 20, scope: !7)
!53 = !DILocation(line: 57, column: 19, scope: !7)
!54 = !DILocation(line: 58, column: 46, scope: !7)
!55 = !DILocation(line: 58, column: 56, scope: !7)
!56 = !DILocation(line: 58, column: 67, scope: !7)
!57 = !DILocation(line: 58, column: 31, scope: !7)
!58 = !DILocation(line: 58, column: 86, scope: !7)
!59 = !DILocation(line: 58, column: 94, scope: !7)
!60 = !DILocation(line: 58, column: 78, scope: !7)
!61 = !DILocation(line: 64, column: 20, scope: !7)
!62 = !DILocation(line: 65, column: 46, scope: !7)
!63 = !DILocation(line: 65, column: 56, scope: !7)
!64 = !DILocation(line: 65, column: 67, scope: !7)
!65 = !DILocation(line: 65, column: 31, scope: !7)
!66 = !DILocation(line: 65, column: 86, scope: !7)
!67 = !DILocation(line: 65, column: 94, scope: !7)
!68 = !DILocation(line: 65, column: 78, scope: !7)
!69 = !DILocation(line: 68, column: 46, scope: !7)
!70 = !DILocation(line: 68, column: 57, scope: !7)
!71 = !DILocation(line: 68, column: 31, scope: !7)
!72 = !DILocation(line: 68, column: 76, scope: !7)
!73 = !DILocation(line: 68, column: 84, scope: !7)
!74 = !DILocation(line: 68, column: 68, scope: !7)
!75 = !DILocation(line: 70, column: 20, scope: !7)
!76 = !DILocation(line: 71, column: 43, scope: !7)
!77 = !DILocation(line: 71, column: 53, scope: !7)
!78 = !DILocation(line: 71, column: 64, scope: !7)
!79 = !DILocation(line: 71, column: 31, scope: !7)
!80 = !DILocation(line: 71, column: 83, scope: !7)
!81 = !DILocation(line: 71, column: 91, scope: !7)
!82 = !DILocation(line: 71, column: 75, scope: !7)
!83 = !DILocation(line: 77, column: 20, scope: !7)
!84 = !DILocation(line: 78, column: 43, scope: !7)
!85 = !DILocation(line: 78, column: 53, scope: !7)
!86 = !DILocation(line: 78, column: 64, scope: !7)
!87 = !DILocation(line: 78, column: 31, scope: !7)
!88 = !DILocation(line: 78, column: 83, scope: !7)
!89 = !DILocation(line: 78, column: 91, scope: !7)
!90 = !DILocation(line: 78, column: 75, scope: !7)
!91 = !DILocation(line: 80, column: 20, scope: !7)
!92 = !DILocation(line: 81, column: 43, scope: !7)
!93 = !DILocation(line: 81, column: 53, scope: !7)
!94 = !DILocation(line: 81, column: 64, scope: !7)
!95 = !DILocation(line: 81, column: 31, scope: !7)
!96 = !DILocation(line: 81, column: 83, scope: !7)
!97 = !DILocation(line: 81, column: 91, scope: !7)
!98 = !DILocation(line: 81, column: 75, scope: !7)
!99 = !DILocation(line: 84, column: 44, scope: !7)
!100 = !DILocation(line: 84, column: 54, scope: !7)
!101 = !DILocation(line: 84, column: 65, scope: !7)
!102 = !DILocation(line: 84, column: 31, scope: !7)
!103 = !DILocation(line: 84, column: 84, scope: !7)
!104 = !DILocation(line: 84, column: 92, scope: !7)
!105 = !DILocation(line: 84, column: 76, scope: !7)
!106 = !DILocation(line: 118, column: 15, scope: !107, inlinedAt: !109)
!107 = distinct !DILexicalBlockFile(scope: !7, file: !108, discriminator: 0)
!108 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!109 = !DILocation(line: 52, column: 42, scope: !7)
!110 = !DILocation(line: 120, column: 21, scope: !107, inlinedAt: !109)
!111 = !DILocation(line: 120, column: 16, scope: !107, inlinedAt: !109)
!112 = !DILocation(line: 121, column: 29, scope: !107, inlinedAt: !109)
!113 = !DILocation(line: 118, column: 15, scope: !107, inlinedAt: !114)
!114 = !DILocation(line: 59, column: 42, scope: !7)
!115 = !DILocation(line: 120, column: 21, scope: !107, inlinedAt: !114)
!116 = !DILocation(line: 120, column: 16, scope: !107, inlinedAt: !114)
!117 = !DILocation(line: 121, column: 29, scope: !107, inlinedAt: !114)
!118 = !DILocation(line: 118, column: 15, scope: !107, inlinedAt: !119)
!119 = !DILocation(line: 66, column: 42, scope: !7)
!120 = !DILocation(line: 120, column: 21, scope: !107, inlinedAt: !119)
!121 = !DILocation(line: 120, column: 16, scope: !107, inlinedAt: !119)
!122 = !DILocation(line: 121, column: 29, scope: !107, inlinedAt: !119)
!123 = !DILocation(line: 118, column: 15, scope: !107, inlinedAt: !124)
!124 = !DILocation(line: 69, column: 42, scope: !7)
!125 = !DILocation(line: 120, column: 21, scope: !107, inlinedAt: !124)
!126 = !DILocation(line: 120, column: 16, scope: !107, inlinedAt: !124)
!127 = !DILocation(line: 121, column: 29, scope: !107, inlinedAt: !124)
!128 = !DILocation(line: 118, column: 15, scope: !107, inlinedAt: !129)
!129 = !DILocation(line: 72, column: 42, scope: !7)
!130 = !DILocation(line: 120, column: 21, scope: !107, inlinedAt: !129)
!131 = !DILocation(line: 120, column: 16, scope: !107, inlinedAt: !129)
!132 = !DILocation(line: 121, column: 29, scope: !107, inlinedAt: !129)
!133 = !DILocation(line: 118, column: 15, scope: !107, inlinedAt: !134)
!134 = !DILocation(line: 79, column: 42, scope: !7)
!135 = !DILocation(line: 120, column: 21, scope: !107, inlinedAt: !134)
!136 = !DILocation(line: 120, column: 16, scope: !107, inlinedAt: !134)
!137 = !DILocation(line: 121, column: 29, scope: !107, inlinedAt: !134)
!138 = !DILocation(line: 118, column: 15, scope: !107, inlinedAt: !139)
!139 = !DILocation(line: 82, column: 42, scope: !7)
!140 = !DILocation(line: 120, column: 21, scope: !107, inlinedAt: !139)
!141 = !DILocation(line: 120, column: 16, scope: !107, inlinedAt: !139)
!142 = !DILocation(line: 121, column: 29, scope: !107, inlinedAt: !139)
!143 = !DILocation(line: 118, column: 15, scope: !107, inlinedAt: !144)
!144 = !DILocation(line: 85, column: 42, scope: !7)
!145 = !DILocation(line: 120, column: 21, scope: !107, inlinedAt: !144)
!146 = !DILocation(line: 120, column: 16, scope: !107, inlinedAt: !144)
!147 = !DILocation(line: 89, column: 35, scope: !7)
!148 = !DILocation(line: 92, column: 35, scope: !7)
!149 = !DILocation(line: 95, column: 35, scope: !7)
!150 = !DILocation(line: 98, column: 35, scope: !7)
!151 = !DILocation(line: 101, column: 35, scope: !7)
!152 = !DILocation(line: 104, column: 35, scope: !7)
!153 = !DILocation(line: 107, column: 35, scope: !7)
!154 = !DILocation(line: 110, column: 35, scope: !7)
!155 = !DILocation(line: 111, column: 33, scope: !7)
!156 = !DILocation(line: 111, column: 30, scope: !7)
!157 = !DILocation(line: 111, column: 44, scope: !7)
!158 = !DILocation(line: 111, column: 38, scope: !7)
!159 = !DILocation(line: 111, column: 25, scope: !7)
!160 = !DILocation(line: 111, column: 64, scope: !7)
!161 = !DILocation(line: 111, column: 56, scope: !7)
!162 = !DILocation(line: 121, column: 29, scope: !107, inlinedAt: !144)
!163 = !DILocation(line: 112, column: 35, scope: !7)
!164 = !DILocation(line: 112, column: 30, scope: !7)
!165 = !DILocation(line: 112, column: 25, scope: !7)
!166 = !DILocation(line: 112, column: 47, scope: !7)
!167 = !DILocation(line: 112, column: 4, scope: !7)
