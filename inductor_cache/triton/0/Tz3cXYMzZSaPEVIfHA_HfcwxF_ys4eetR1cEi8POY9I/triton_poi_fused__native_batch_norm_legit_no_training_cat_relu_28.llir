; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_28(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, i32 %11) local_unnamed_addr !dbg !7 {
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %14 = shl i32 %13, 10, !dbg !11
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %16 = shl i32 %15, 2, !dbg !12
  %17 = and i32 %16, 508, !dbg !12
  %18 = or disjoint i32 %14, %17, !dbg !13
  %19 = or disjoint i32 %18, 512, !dbg !13
  %20 = srem i32 %18, 262144, !dbg !14
  %21 = srem i32 %19, 262144, !dbg !14
  %.frozen = freeze i32 %18, !dbg !15
  %22 = sdiv i32 %.frozen, 12582912, !dbg !15
  %.frozen77 = freeze i32 %19, !dbg !15
  %23 = sdiv i32 %.frozen77, 12582912, !dbg !15
  %24 = mul i32 %22, 12582912, !dbg !16
  %srem.decomposed = sub i32 %.frozen, %24, !dbg !16
  %25 = mul i32 %23, 12582912, !dbg !16
  %srem1.decomposed = sub i32 %.frozen77, %25, !dbg !16
  %26 = shl nsw i32 %22, 20, !dbg !17
  %27 = shl nsw i32 %23, 20, !dbg !17
  %28 = add nsw i32 %26, %srem.decomposed, !dbg !18
  %29 = add nsw i32 %27, %srem1.decomposed, !dbg !18
  %30 = sext i32 %28 to i64, !dbg !19
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !19
  %32 = sext i32 %29 to i64, !dbg !19
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !19
  %34 = insertelement <2 x i32> poison, i32 %19, i64 0, !dbg !20
  %35 = insertelement <2 x i32> %34, i32 %18, i64 1, !dbg !20
  %36 = sdiv <2 x i32> %35, splat (i32 262144), !dbg !20
  %37 = trunc nsw <2 x i32> %36 to <2 x i16>, !dbg !21
  %38 = srem <2 x i16> %37, splat (i16 48), !dbg !21
  %39 = extractelement <2 x i16> %38, i64 1, !dbg !22
  %.sext = sext i16 %39 to i32, !dbg !21
  %40 = extractelement <2 x i16> %38, i64 0, !dbg !22
  %.sext69 = sext i16 %40 to i32, !dbg !21
  %41 = sext i16 %39 to i64, !dbg !23
  %42 = getelementptr float, ptr addrspace(1) %5, i64 %41, !dbg !23
  %43 = sext i16 %40 to i64, !dbg !23
  %44 = getelementptr float, ptr addrspace(1) %5, i64 %43, !dbg !23
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 true) #3, !dbg !24
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 true) #3, !dbg !24
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 true) #3, !dbg !24
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 true) #3, !dbg !24
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 true) #3, !dbg !24
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 true) #3, !dbg !24
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 true) #3, !dbg !24
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 true) #3, !dbg !24
  %53 = getelementptr float, ptr addrspace(1) %6, i64 %41, !dbg !25
  %54 = getelementptr float, ptr addrspace(1) %6, i64 %43, !dbg !25
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 true) #3, !dbg !26
  %56 = bitcast i32 %55 to float, !dbg !26
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 true) #3, !dbg !26
  %58 = bitcast i32 %57 to float, !dbg !26
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 true) #3, !dbg !26
  %60 = bitcast i32 %59 to float, !dbg !26
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 true) #3, !dbg !26
  %62 = bitcast i32 %61 to float, !dbg !26
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 true) #3, !dbg !26
  %64 = bitcast i32 %63 to float, !dbg !26
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 true) #3, !dbg !26
  %66 = bitcast i32 %65 to float, !dbg !26
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 true) #3, !dbg !26
  %68 = bitcast i32 %67 to float, !dbg !26
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 true) #3, !dbg !26
  %70 = bitcast i32 %69 to float, !dbg !26
  %71 = getelementptr float, ptr addrspace(1) %7, i64 %41, !dbg !27
  %72 = getelementptr float, ptr addrspace(1) %7, i64 %43, !dbg !27
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %71, i1 true) #3, !dbg !28
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %71, i1 true) #3, !dbg !28
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %71, i1 true) #3, !dbg !28
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %71, i1 true) #3, !dbg !28
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 true) #3, !dbg !28
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 true) #3, !dbg !28
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 true) #3, !dbg !28
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 true) #3, !dbg !28
  %81 = getelementptr float, ptr addrspace(1) %8, i64 %41, !dbg !29
  %82 = getelementptr float, ptr addrspace(1) %8, i64 %43, !dbg !29
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 true) #3, !dbg !30
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 true) #3, !dbg !30
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 true) #3, !dbg !30
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 true) #3, !dbg !30
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 true) #3, !dbg !30
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 true) #3, !dbg !30
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 true) #3, !dbg !30
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 true) #3, !dbg !30
  %91 = icmp slt <2 x i16> %38, splat (i16 4), !dbg !31
  %92 = extractelement <2 x i1> %91, i64 1, !dbg !32
  %93 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %31, i1 %92, i32 0, i1 %92, i32 0, i1 %92, i32 0, i1 %92, i32 0, i1 %92) #3, !dbg !32
  %94 = extractelement <2 x i1> %91, i64 0, !dbg !32
  %95 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %33, i1 %94, i32 0, i1 %94, i32 0, i1 %94, i32 0, i1 %94, i32 0, i1 %94) #3, !dbg !32
  %96 = and <2 x i16> %38, splat (i16 -4), !dbg !33
  %97 = icmp eq <2 x i16> %96, splat (i16 4), !dbg !33
  %98 = shl nsw i32 %.sext, 18, !dbg !34
  %99 = shl nsw i32 %.sext69, 18, !dbg !34
  %100 = add nsw i32 %98, %20, !dbg !34
  %101 = add nsw i32 %100, -1048576, !dbg !35
  %102 = add nsw i32 %101, %26, !dbg !36
  %103 = add nsw i32 %99, %21, !dbg !34
  %104 = add nsw i32 %103, -1048576, !dbg !35
  %105 = add nsw i32 %104, %27, !dbg !36
  %106 = sext i32 %102 to i64, !dbg !37
  %107 = getelementptr float, ptr addrspace(1) %1, i64 %106, !dbg !37
  %108 = sext i32 %105 to i64, !dbg !37
  %109 = getelementptr float, ptr addrspace(1) %1, i64 %108, !dbg !37
  %110 = extractelement <2 x i1> %97, i64 1, !dbg !38
  %111 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %107, i1 %110, i32 0, i1 %110, i32 0, i1 %110, i32 0, i1 %110, i32 0, i1 %110) #3, !dbg !38
  %112 = extractelement <2 x i1> %97, i64 0, !dbg !38
  %113 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %109, i1 %112, i32 0, i1 %112, i32 0, i1 %112, i32 0, i1 %112, i32 0, i1 %112) #3, !dbg !38
  %114 = icmp eq <2 x i16> %96, splat (i16 8), !dbg !39
  %115 = add nsw i32 %100, -2097152, !dbg !40
  %116 = add nsw i32 %115, %26, !dbg !41
  %117 = add nsw i32 %103, -2097152, !dbg !40
  %118 = add nsw i32 %117, %27, !dbg !41
  %119 = sext i32 %116 to i64, !dbg !42
  %120 = getelementptr float, ptr addrspace(1) %2, i64 %119, !dbg !42
  %121 = sext i32 %118 to i64, !dbg !42
  %122 = getelementptr float, ptr addrspace(1) %2, i64 %121, !dbg !42
  %123 = extractelement <2 x i1> %114, i64 1, !dbg !43
  %124 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %120, i1 %123, i32 0, i1 %123, i32 0, i1 %123, i32 0, i1 %123, i32 0, i1 %123) #3, !dbg !43
  %125 = extractelement <2 x i1> %114, i64 0, !dbg !43
  %126 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %122, i1 %125, i32 0, i1 %125, i32 0, i1 %125, i32 0, i1 %125, i32 0, i1 %125) #3, !dbg !43
  %127 = icmp eq <2 x i16> %96, splat (i16 12), !dbg !44
  %128 = add nsw i32 %100, -3145728, !dbg !45
  %129 = add nsw i32 %128, %26, !dbg !46
  %130 = add nsw i32 %103, -3145728, !dbg !45
  %131 = add nsw i32 %130, %27, !dbg !46
  %132 = sext i32 %129 to i64, !dbg !47
  %133 = getelementptr float, ptr addrspace(1) %3, i64 %132, !dbg !47
  %134 = sext i32 %131 to i64, !dbg !47
  %135 = getelementptr float, ptr addrspace(1) %3, i64 %134, !dbg !47
  %136 = extractelement <2 x i1> %127, i64 1, !dbg !48
  %137 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %133, i1 %136, i32 0, i1 %136, i32 0, i1 %136, i32 0, i1 %136, i32 0, i1 %136) #3, !dbg !48
  %138 = extractelement <2 x i1> %127, i64 0, !dbg !48
  %139 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %135, i1 %138, i32 0, i1 %138, i32 0, i1 %138, i32 0, i1 %138, i32 0, i1 %138) #3, !dbg !48
  %140 = icmp sgt i16 %39, 15, !dbg !22
  %141 = icmp sgt i16 %40, 15, !dbg !22
  %142 = shl nsw i32 %22, 23, !dbg !49
  %143 = shl nsw i32 %23, 23, !dbg !49
  %144 = add nsw i32 %100, -4194304, !dbg !50
  %145 = add nsw i32 %144, %142, !dbg !51
  %146 = add nsw i32 %103, -4194304, !dbg !50
  %147 = add nsw i32 %146, %143, !dbg !51
  %148 = sext i32 %145 to i64, !dbg !52
  %149 = getelementptr float, ptr addrspace(1) %4, i64 %148, !dbg !52
  %150 = sext i32 %147 to i64, !dbg !52
  %151 = getelementptr float, ptr addrspace(1) %4, i64 %150, !dbg !52
  %152 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %149, i1 %140, i32 0, i1 %140, i32 0, i1 %140, i32 0, i1 %140, i32 0, i1 %140) #3, !dbg !53
  %153 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %151, i1 %141, i32 0, i1 %141, i32 0, i1 %141, i32 0, i1 %141, i32 0, i1 %141) #3, !dbg !53
  %154 = fadd float %56, 0x3EE4F8B580000000, !dbg !54
  %155 = fadd float %58, 0x3EE4F8B580000000, !dbg !54
  %156 = fadd float %60, 0x3EE4F8B580000000, !dbg !54
  %157 = fadd float %62, 0x3EE4F8B580000000, !dbg !54
  %158 = fadd float %64, 0x3EE4F8B580000000, !dbg !54
  %159 = fadd float %66, 0x3EE4F8B580000000, !dbg !54
  %160 = fadd float %68, 0x3EE4F8B580000000, !dbg !54
  %161 = fadd float %70, 0x3EE4F8B580000000, !dbg !54
  %162 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !55
  %.not.i = icmp eq i32 %162, 0, !dbg !55
  %163 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !55
  %.not1.i = icmp eq i32 %163, 0, !dbg !55
  br i1 %.not.i, label %169, label %164, !dbg !55

164:                                              ; preds = %12
  br i1 %.not1.i, label %167, label %165, !dbg !55

165:                                              ; preds = %164
  %166 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %154) #3, !dbg !55
  br label %__nv_sqrtf.exit, !dbg !55

167:                                              ; preds = %164
  %168 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %154) #3, !dbg !55
  br label %__nv_sqrtf.exit, !dbg !55

169:                                              ; preds = %12
  br i1 %.not1.i, label %172, label %170, !dbg !55

170:                                              ; preds = %169
  %171 = tail call float @llvm.nvvm.sqrt.rn.f(float %154) #3, !dbg !55
  br label %__nv_sqrtf.exit, !dbg !55

172:                                              ; preds = %169
  %173 = tail call float @llvm.nvvm.sqrt.approx.f(float %154) #3, !dbg !55
  br label %__nv_sqrtf.exit, !dbg !55

__nv_sqrtf.exit:                                  ; preds = %165, %167, %170, %172
  %.0.i = phi float [ %166, %165 ], [ %168, %167 ], [ %171, %170 ], [ %173, %172 ], !dbg !55
  %174 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !55
  %.not.i33 = icmp eq i32 %174, 0, !dbg !55
  %175 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !55
  %.not1.i36 = icmp eq i32 %175, 0, !dbg !55
  br i1 %.not.i33, label %181, label %176, !dbg !55

176:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i36, label %179, label %177, !dbg !55

177:                                              ; preds = %176
  %178 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %155) #3, !dbg !55
  br label %__nv_sqrtf.exit37, !dbg !55

179:                                              ; preds = %176
  %180 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %155) #3, !dbg !55
  br label %__nv_sqrtf.exit37, !dbg !55

181:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i36, label %184, label %182, !dbg !55

182:                                              ; preds = %181
  %183 = tail call float @llvm.nvvm.sqrt.rn.f(float %155) #3, !dbg !55
  br label %__nv_sqrtf.exit37, !dbg !55

184:                                              ; preds = %181
  %185 = tail call float @llvm.nvvm.sqrt.approx.f(float %155) #3, !dbg !55
  br label %__nv_sqrtf.exit37, !dbg !55

__nv_sqrtf.exit37:                                ; preds = %177, %179, %182, %184
  %.0.i35 = phi float [ %178, %177 ], [ %180, %179 ], [ %183, %182 ], [ %185, %184 ], !dbg !55
  %186 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !55
  %.not.i38 = icmp eq i32 %186, 0, !dbg !55
  %187 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !55
  %.not1.i41 = icmp eq i32 %187, 0, !dbg !55
  br i1 %.not.i38, label %193, label %188, !dbg !55

188:                                              ; preds = %__nv_sqrtf.exit37
  br i1 %.not1.i41, label %191, label %189, !dbg !55

189:                                              ; preds = %188
  %190 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %156) #3, !dbg !55
  br label %__nv_sqrtf.exit42, !dbg !55

191:                                              ; preds = %188
  %192 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %156) #3, !dbg !55
  br label %__nv_sqrtf.exit42, !dbg !55

193:                                              ; preds = %__nv_sqrtf.exit37
  br i1 %.not1.i41, label %196, label %194, !dbg !55

194:                                              ; preds = %193
  %195 = tail call float @llvm.nvvm.sqrt.rn.f(float %156) #3, !dbg !55
  br label %__nv_sqrtf.exit42, !dbg !55

196:                                              ; preds = %193
  %197 = tail call float @llvm.nvvm.sqrt.approx.f(float %156) #3, !dbg !55
  br label %__nv_sqrtf.exit42, !dbg !55

__nv_sqrtf.exit42:                                ; preds = %189, %191, %194, %196
  %.0.i40 = phi float [ %190, %189 ], [ %192, %191 ], [ %195, %194 ], [ %197, %196 ], !dbg !55
  %198 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !55
  %.not.i43 = icmp eq i32 %198, 0, !dbg !55
  %199 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !55
  %.not1.i46 = icmp eq i32 %199, 0, !dbg !55
  br i1 %.not.i43, label %205, label %200, !dbg !55

200:                                              ; preds = %__nv_sqrtf.exit42
  br i1 %.not1.i46, label %203, label %201, !dbg !55

201:                                              ; preds = %200
  %202 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %157) #3, !dbg !55
  br label %__nv_sqrtf.exit47, !dbg !55

203:                                              ; preds = %200
  %204 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %157) #3, !dbg !55
  br label %__nv_sqrtf.exit47, !dbg !55

205:                                              ; preds = %__nv_sqrtf.exit42
  br i1 %.not1.i46, label %208, label %206, !dbg !55

206:                                              ; preds = %205
  %207 = tail call float @llvm.nvvm.sqrt.rn.f(float %157) #3, !dbg !55
  br label %__nv_sqrtf.exit47, !dbg !55

208:                                              ; preds = %205
  %209 = tail call float @llvm.nvvm.sqrt.approx.f(float %157) #3, !dbg !55
  br label %__nv_sqrtf.exit47, !dbg !55

__nv_sqrtf.exit47:                                ; preds = %201, %203, %206, %208
  %.0.i45 = phi float [ %202, %201 ], [ %204, %203 ], [ %207, %206 ], [ %209, %208 ], !dbg !55
  %210 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !55
  %.not.i48 = icmp eq i32 %210, 0, !dbg !55
  %211 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !55
  %.not1.i51 = icmp eq i32 %211, 0, !dbg !55
  br i1 %.not.i48, label %217, label %212, !dbg !55

212:                                              ; preds = %__nv_sqrtf.exit47
  br i1 %.not1.i51, label %215, label %213, !dbg !55

213:                                              ; preds = %212
  %214 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %158) #3, !dbg !55
  br label %__nv_sqrtf.exit52, !dbg !55

215:                                              ; preds = %212
  %216 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %158) #3, !dbg !55
  br label %__nv_sqrtf.exit52, !dbg !55

217:                                              ; preds = %__nv_sqrtf.exit47
  br i1 %.not1.i51, label %220, label %218, !dbg !55

218:                                              ; preds = %217
  %219 = tail call float @llvm.nvvm.sqrt.rn.f(float %158) #3, !dbg !55
  br label %__nv_sqrtf.exit52, !dbg !55

220:                                              ; preds = %217
  %221 = tail call float @llvm.nvvm.sqrt.approx.f(float %158) #3, !dbg !55
  br label %__nv_sqrtf.exit52, !dbg !55

__nv_sqrtf.exit52:                                ; preds = %213, %215, %218, %220
  %.0.i50 = phi float [ %214, %213 ], [ %216, %215 ], [ %219, %218 ], [ %221, %220 ], !dbg !55
  %222 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !55
  %.not.i53 = icmp eq i32 %222, 0, !dbg !55
  %223 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !55
  %.not1.i56 = icmp eq i32 %223, 0, !dbg !55
  br i1 %.not.i53, label %229, label %224, !dbg !55

224:                                              ; preds = %__nv_sqrtf.exit52
  br i1 %.not1.i56, label %227, label %225, !dbg !55

225:                                              ; preds = %224
  %226 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %159) #3, !dbg !55
  br label %__nv_sqrtf.exit57, !dbg !55

227:                                              ; preds = %224
  %228 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %159) #3, !dbg !55
  br label %__nv_sqrtf.exit57, !dbg !55

229:                                              ; preds = %__nv_sqrtf.exit52
  br i1 %.not1.i56, label %232, label %230, !dbg !55

230:                                              ; preds = %229
  %231 = tail call float @llvm.nvvm.sqrt.rn.f(float %159) #3, !dbg !55
  br label %__nv_sqrtf.exit57, !dbg !55

232:                                              ; preds = %229
  %233 = tail call float @llvm.nvvm.sqrt.approx.f(float %159) #3, !dbg !55
  br label %__nv_sqrtf.exit57, !dbg !55

__nv_sqrtf.exit57:                                ; preds = %225, %227, %230, %232
  %.0.i55 = phi float [ %226, %225 ], [ %228, %227 ], [ %231, %230 ], [ %233, %232 ], !dbg !55
  %234 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !55
  %.not.i58 = icmp eq i32 %234, 0, !dbg !55
  %235 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !55
  %.not1.i61 = icmp eq i32 %235, 0, !dbg !55
  br i1 %.not.i58, label %241, label %236, !dbg !55

236:                                              ; preds = %__nv_sqrtf.exit57
  br i1 %.not1.i61, label %239, label %237, !dbg !55

237:                                              ; preds = %236
  %238 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %160) #3, !dbg !55
  br label %__nv_sqrtf.exit62, !dbg !55

239:                                              ; preds = %236
  %240 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %160) #3, !dbg !55
  br label %__nv_sqrtf.exit62, !dbg !55

241:                                              ; preds = %__nv_sqrtf.exit57
  br i1 %.not1.i61, label %244, label %242, !dbg !55

242:                                              ; preds = %241
  %243 = tail call float @llvm.nvvm.sqrt.rn.f(float %160) #3, !dbg !55
  br label %__nv_sqrtf.exit62, !dbg !55

244:                                              ; preds = %241
  %245 = tail call float @llvm.nvvm.sqrt.approx.f(float %160) #3, !dbg !55
  br label %__nv_sqrtf.exit62, !dbg !55

__nv_sqrtf.exit62:                                ; preds = %237, %239, %242, %244
  %.0.i60 = phi float [ %238, %237 ], [ %240, %239 ], [ %243, %242 ], [ %245, %244 ], !dbg !55
  %246 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !55
  %.not.i63 = icmp eq i32 %246, 0, !dbg !55
  %247 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !55
  %.not1.i66 = icmp eq i32 %247, 0, !dbg !55
  br i1 %.not.i63, label %253, label %248, !dbg !55

248:                                              ; preds = %__nv_sqrtf.exit62
  br i1 %.not1.i66, label %251, label %249, !dbg !55

249:                                              ; preds = %248
  %250 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %161) #3, !dbg !55
  br label %__nv_sqrtf.exit67, !dbg !55

251:                                              ; preds = %248
  %252 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %161) #3, !dbg !55
  br label %__nv_sqrtf.exit67, !dbg !55

253:                                              ; preds = %__nv_sqrtf.exit62
  br i1 %.not1.i66, label %256, label %254, !dbg !55

254:                                              ; preds = %253
  %255 = tail call float @llvm.nvvm.sqrt.rn.f(float %161) #3, !dbg !55
  br label %__nv_sqrtf.exit67, !dbg !55

256:                                              ; preds = %253
  %257 = tail call float @llvm.nvvm.sqrt.approx.f(float %161) #3, !dbg !55
  br label %__nv_sqrtf.exit67, !dbg !55

__nv_sqrtf.exit67:                                ; preds = %249, %251, %254, %256
  %.0.i65 = phi float [ %250, %249 ], [ %252, %251 ], [ %255, %254 ], [ %257, %256 ], !dbg !55
  %258 = shufflevector <2 x i1> %127, <2 x i1> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !44
  %259 = shufflevector <2 x i1> %114, <2 x i1> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !39
  %260 = shufflevector <2 x i1> %97, <2 x i1> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !33
  %261 = shufflevector <2 x i1> %91, <2 x i1> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !31
  %262 = extractvalue { i32, i32, i32, i32 } %95, 3, !dbg !32
  %263 = extractvalue { i32, i32, i32, i32 } %113, 3, !dbg !38
  %264 = extractvalue { i32, i32, i32, i32 } %126, 3, !dbg !43
  %265 = extractvalue { i32, i32, i32, i32 } %139, 3, !dbg !48
  %266 = extractvalue { i32, i32, i32, i32 } %153, 3, !dbg !53
  %267 = insertelement <8 x i32> poison, i32 %52, i64 0, !dbg !24
  %268 = insertelement <8 x i32> %267, i32 %51, i64 1, !dbg !24
  %269 = insertelement <8 x i32> %268, i32 %50, i64 2, !dbg !24
  %270 = insertelement <8 x i32> %269, i32 %49, i64 3, !dbg !24
  %271 = insertelement <8 x i32> %270, i32 %48, i64 4, !dbg !24
  %272 = insertelement <8 x i32> %271, i32 %47, i64 5, !dbg !24
  %273 = insertelement <8 x i32> %272, i32 %46, i64 6, !dbg !24
  %274 = insertelement <8 x i32> %273, i32 %45, i64 7, !dbg !24
  %275 = bitcast <8 x i32> %274 to <8 x float>, !dbg !24
  %276 = extractvalue { i32, i32, i32, i32 } %95, 2, !dbg !32
  %277 = extractvalue { i32, i32, i32, i32 } %113, 2, !dbg !38
  %278 = extractvalue { i32, i32, i32, i32 } %126, 2, !dbg !43
  %279 = extractvalue { i32, i32, i32, i32 } %139, 2, !dbg !48
  %280 = extractvalue { i32, i32, i32, i32 } %153, 2, !dbg !53
  %281 = extractvalue { i32, i32, i32, i32 } %95, 1, !dbg !32
  %282 = extractvalue { i32, i32, i32, i32 } %113, 1, !dbg !38
  %283 = extractvalue { i32, i32, i32, i32 } %126, 1, !dbg !43
  %284 = extractvalue { i32, i32, i32, i32 } %139, 1, !dbg !48
  %285 = extractvalue { i32, i32, i32, i32 } %153, 1, !dbg !53
  %286 = extractvalue { i32, i32, i32, i32 } %95, 0, !dbg !32
  %287 = extractvalue { i32, i32, i32, i32 } %113, 0, !dbg !38
  %288 = extractvalue { i32, i32, i32, i32 } %126, 0, !dbg !43
  %289 = extractvalue { i32, i32, i32, i32 } %139, 0, !dbg !48
  %290 = extractvalue { i32, i32, i32, i32 } %153, 0, !dbg !53
  %291 = extractvalue { i32, i32, i32, i32 } %93, 3, !dbg !32
  %292 = extractvalue { i32, i32, i32, i32 } %111, 3, !dbg !38
  %293 = extractvalue { i32, i32, i32, i32 } %124, 3, !dbg !43
  %294 = extractvalue { i32, i32, i32, i32 } %137, 3, !dbg !48
  %295 = extractvalue { i32, i32, i32, i32 } %152, 3, !dbg !53
  %296 = extractvalue { i32, i32, i32, i32 } %93, 2, !dbg !32
  %297 = extractvalue { i32, i32, i32, i32 } %111, 2, !dbg !38
  %298 = extractvalue { i32, i32, i32, i32 } %124, 2, !dbg !43
  %299 = extractvalue { i32, i32, i32, i32 } %137, 2, !dbg !48
  %300 = extractvalue { i32, i32, i32, i32 } %152, 2, !dbg !53
  %301 = extractvalue { i32, i32, i32, i32 } %93, 1, !dbg !32
  %302 = extractvalue { i32, i32, i32, i32 } %111, 1, !dbg !38
  %303 = extractvalue { i32, i32, i32, i32 } %124, 1, !dbg !43
  %304 = extractvalue { i32, i32, i32, i32 } %137, 1, !dbg !48
  %305 = extractvalue { i32, i32, i32, i32 } %152, 1, !dbg !53
  %306 = extractvalue { i32, i32, i32, i32 } %93, 0, !dbg !32
  %307 = extractvalue { i32, i32, i32, i32 } %111, 0, !dbg !38
  %308 = extractvalue { i32, i32, i32, i32 } %124, 0, !dbg !43
  %309 = extractvalue { i32, i32, i32, i32 } %137, 0, !dbg !48
  %310 = extractvalue { i32, i32, i32, i32 } %152, 0, !dbg !53
  %311 = insertelement <8 x i32> poison, i32 %90, i64 0, !dbg !30
  %312 = insertelement <8 x i32> %311, i32 %89, i64 1, !dbg !30
  %313 = insertelement <8 x i32> %312, i32 %88, i64 2, !dbg !30
  %314 = insertelement <8 x i32> %313, i32 %87, i64 3, !dbg !30
  %315 = insertelement <8 x i32> %314, i32 %86, i64 4, !dbg !30
  %316 = insertelement <8 x i32> %315, i32 %85, i64 5, !dbg !30
  %317 = insertelement <8 x i32> %316, i32 %84, i64 6, !dbg !30
  %318 = insertelement <8 x i32> %317, i32 %83, i64 7, !dbg !30
  %319 = bitcast <8 x i32> %318 to <8 x float>, !dbg !30
  %320 = insertelement <8 x i32> poison, i32 %80, i64 0, !dbg !28
  %321 = insertelement <8 x i32> %320, i32 %79, i64 1, !dbg !28
  %322 = insertelement <8 x i32> %321, i32 %78, i64 2, !dbg !28
  %323 = insertelement <8 x i32> %322, i32 %77, i64 3, !dbg !28
  %324 = insertelement <8 x i32> %323, i32 %76, i64 4, !dbg !28
  %325 = insertelement <8 x i32> %324, i32 %75, i64 5, !dbg !28
  %326 = insertelement <8 x i32> %325, i32 %74, i64 6, !dbg !28
  %327 = insertelement <8 x i32> %326, i32 %73, i64 7, !dbg !28
  %328 = bitcast <8 x i32> %327 to <8 x float>, !dbg !28
  %329 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !56
  %330 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i35) #3, !dbg !56
  %331 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i40) #3, !dbg !56
  %332 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i45) #3, !dbg !56
  %333 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i50) #3, !dbg !56
  %334 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i55) #3, !dbg !56
  %335 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i60) #3, !dbg !56
  %336 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i65) #3, !dbg !56
  %337 = insertelement <8 x i32> poison, i32 %265, i64 0, !dbg !57
  %338 = insertelement <8 x i32> %337, i32 %279, i64 1, !dbg !57
  %339 = insertelement <8 x i32> %338, i32 %284, i64 2, !dbg !57
  %340 = insertelement <8 x i32> %339, i32 %289, i64 3, !dbg !57
  %341 = insertelement <8 x i32> %340, i32 %294, i64 4, !dbg !57
  %342 = insertelement <8 x i32> %341, i32 %299, i64 5, !dbg !57
  %343 = insertelement <8 x i32> %342, i32 %304, i64 6, !dbg !57
  %344 = insertelement <8 x i32> %343, i32 %309, i64 7, !dbg !57
  %345 = insertelement <8 x i32> poison, i32 %266, i64 0, !dbg !57
  %346 = insertelement <8 x i32> %345, i32 %280, i64 1, !dbg !57
  %347 = insertelement <8 x i32> %346, i32 %285, i64 2, !dbg !57
  %348 = insertelement <8 x i32> %347, i32 %290, i64 3, !dbg !57
  %349 = insertelement <8 x i32> %348, i32 %295, i64 4, !dbg !57
  %350 = insertelement <8 x i32> %349, i32 %300, i64 5, !dbg !57
  %351 = insertelement <8 x i32> %350, i32 %305, i64 6, !dbg !57
  %352 = insertelement <8 x i32> %351, i32 %310, i64 7, !dbg !57
  %353 = select <8 x i1> %258, <8 x i32> %344, <8 x i32> %352, !dbg !57
  %354 = insertelement <8 x i32> poison, i32 %264, i64 0, !dbg !58
  %355 = insertelement <8 x i32> %354, i32 %278, i64 1, !dbg !58
  %356 = insertelement <8 x i32> %355, i32 %283, i64 2, !dbg !58
  %357 = insertelement <8 x i32> %356, i32 %288, i64 3, !dbg !58
  %358 = insertelement <8 x i32> %357, i32 %293, i64 4, !dbg !58
  %359 = insertelement <8 x i32> %358, i32 %298, i64 5, !dbg !58
  %360 = insertelement <8 x i32> %359, i32 %303, i64 6, !dbg !58
  %361 = insertelement <8 x i32> %360, i32 %308, i64 7, !dbg !58
  %362 = select <8 x i1> %259, <8 x i32> %361, <8 x i32> %353, !dbg !58
  %363 = insertelement <8 x i32> poison, i32 %263, i64 0, !dbg !59
  %364 = insertelement <8 x i32> %363, i32 %277, i64 1, !dbg !59
  %365 = insertelement <8 x i32> %364, i32 %282, i64 2, !dbg !59
  %366 = insertelement <8 x i32> %365, i32 %287, i64 3, !dbg !59
  %367 = insertelement <8 x i32> %366, i32 %292, i64 4, !dbg !59
  %368 = insertelement <8 x i32> %367, i32 %297, i64 5, !dbg !59
  %369 = insertelement <8 x i32> %368, i32 %302, i64 6, !dbg !59
  %370 = insertelement <8 x i32> %369, i32 %307, i64 7, !dbg !59
  %371 = select <8 x i1> %260, <8 x i32> %370, <8 x i32> %362, !dbg !59
  %372 = insertelement <8 x i32> poison, i32 %262, i64 0, !dbg !60
  %373 = insertelement <8 x i32> %372, i32 %276, i64 1, !dbg !60
  %374 = insertelement <8 x i32> %373, i32 %281, i64 2, !dbg !60
  %375 = insertelement <8 x i32> %374, i32 %286, i64 3, !dbg !60
  %376 = insertelement <8 x i32> %375, i32 %291, i64 4, !dbg !60
  %377 = insertelement <8 x i32> %376, i32 %296, i64 5, !dbg !60
  %378 = insertelement <8 x i32> %377, i32 %301, i64 6, !dbg !60
  %379 = insertelement <8 x i32> %378, i32 %306, i64 7, !dbg !60
  %380 = select <8 x i1> %261, <8 x i32> %379, <8 x i32> %371, !dbg !60
  %381 = bitcast <8 x i32> %380 to <8 x float>, !dbg !60
  %382 = fsub <8 x float> %381, %275, !dbg !61
  %383 = insertelement <8 x float> poison, float %336, i64 0, !dbg !62
  %384 = insertelement <8 x float> %383, float %335, i64 1, !dbg !62
  %385 = insertelement <8 x float> %384, float %334, i64 2, !dbg !62
  %386 = insertelement <8 x float> %385, float %333, i64 3, !dbg !62
  %387 = insertelement <8 x float> %386, float %332, i64 4, !dbg !62
  %388 = insertelement <8 x float> %387, float %331, i64 5, !dbg !62
  %389 = insertelement <8 x float> %388, float %330, i64 6, !dbg !62
  %390 = insertelement <8 x float> %389, float %329, i64 7, !dbg !62
  %391 = fmul <8 x float> %382, %390, !dbg !62
  %392 = fmul <8 x float> %391, %328, !dbg !63
  %393 = fadd <8 x float> %392, %319, !dbg !64
  %394 = fcmp olt <8 x float> %393, zeroinitializer, !dbg !65
  %395 = extractelement <8 x i1> %394, i64 7, !dbg !69
  %396 = extractelement <8 x i1> %394, i64 6, !dbg !69
  %397 = extractelement <8 x i1> %394, i64 5, !dbg !69
  %398 = extractelement <8 x i1> %394, i64 4, !dbg !69
  %399 = extractelement <8 x i1> %394, i64 3, !dbg !69
  %400 = extractelement <8 x i1> %394, i64 2, !dbg !69
  %401 = extractelement <8 x i1> %394, i64 1, !dbg !69
  %402 = extractelement <8 x i1> %394, i64 0, !dbg !69
  %403 = sext i32 %18 to i64, !dbg !70
  %404 = getelementptr float, ptr addrspace(1) %9, i64 %403, !dbg !70
  %405 = sext i32 %19 to i64, !dbg !70
  %406 = getelementptr float, ptr addrspace(1) %9, i64 %405, !dbg !70
  %407 = extractelement <8 x i32> %380, i64 4, !dbg !71
  %408 = extractelement <8 x i32> %380, i64 5, !dbg !71
  %409 = extractelement <8 x i32> %380, i64 6, !dbg !71
  %410 = extractelement <8 x i32> %380, i64 7, !dbg !71
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %410, i32 %409, i32 %408, i32 %407, ptr addrspace(1) %404, i1 true) #3, !dbg !71
  %411 = extractelement <8 x i32> %380, i64 0, !dbg !71
  %412 = extractelement <8 x i32> %380, i64 1, !dbg !71
  %413 = extractelement <8 x i32> %380, i64 2, !dbg !71
  %414 = extractelement <8 x i32> %380, i64 3, !dbg !71
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %414, i32 %413, i32 %412, i32 %411, ptr addrspace(1) %406, i1 true) #3, !dbg !71
  %415 = getelementptr float, ptr addrspace(1) %10, i64 %403, !dbg !72
  %416 = getelementptr float, ptr addrspace(1) %10, i64 %405, !dbg !72
  %bc = bitcast <8 x float> %393 to <8 x i32>, !dbg !73
  %417 = extractelement <8 x i32> %bc, i64 7, !dbg !73
  %418 = select i1 %395, i32 0, i32 %417, !dbg !69
  %bc70 = bitcast <8 x float> %393 to <8 x i32>, !dbg !73
  %419 = extractelement <8 x i32> %bc70, i64 6, !dbg !73
  %420 = select i1 %396, i32 0, i32 %419, !dbg !69
  %bc71 = bitcast <8 x float> %393 to <8 x i32>, !dbg !73
  %421 = extractelement <8 x i32> %bc71, i64 5, !dbg !73
  %422 = select i1 %397, i32 0, i32 %421, !dbg !69
  %bc72 = bitcast <8 x float> %393 to <8 x i32>, !dbg !73
  %423 = extractelement <8 x i32> %bc72, i64 4, !dbg !73
  %424 = select i1 %398, i32 0, i32 %423, !dbg !69
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %418, i32 %420, i32 %422, i32 %424, ptr addrspace(1) %415, i1 true) #3, !dbg !73
  %bc73 = bitcast <8 x float> %393 to <8 x i32>, !dbg !73
  %425 = extractelement <8 x i32> %bc73, i64 3, !dbg !73
  %426 = select i1 %399, i32 0, i32 %425, !dbg !69
  %bc74 = bitcast <8 x float> %393 to <8 x i32>, !dbg !73
  %427 = extractelement <8 x i32> %bc74, i64 2, !dbg !73
  %428 = select i1 %400, i32 0, i32 %427, !dbg !69
  %bc75 = bitcast <8 x float> %393 to <8 x i32>, !dbg !73
  %429 = extractelement <8 x i32> %bc75, i64 1, !dbg !73
  %430 = select i1 %401, i32 0, i32 %429, !dbg !69
  %bc76 = bitcast <8 x float> %393 to <8 x i32>, !dbg !73
  %431 = extractelement <8 x i32> %bc76, i64 0, !dbg !73
  %432 = select i1 %402, i32 0, i32 %431, !dbg !69
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %426, i32 %428, i32 %430, i32 %432, ptr addrspace(1) %416, i1 true) #3, !dbg !73
  ret void, !dbg !74
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c24i6zbepbwvod62bflt2imimyzetp4e3y2cs7nrk4c5cpbechkk.py", directory: "inductor_cache/24")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_28, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_28, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_28", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_28", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 19, scope: !7)
!16 = !DILocation(line: 37, column: 35, scope: !7)
!17 = !DILocation(line: 37, column: 57, scope: !7)
!18 = !DILocation(line: 37, column: 49, scope: !7)
!19 = !DILocation(line: 37, column: 30, scope: !7)
!20 = !DILocation(line: 24, column: 21, scope: !7)
!21 = !DILocation(line: 24, column: 31, scope: !7)
!22 = !DILocation(line: 53, column: 20, scope: !7)
!23 = !DILocation(line: 28, column: 31, scope: !7)
!24 = !DILocation(line: 28, column: 36, scope: !7)
!25 = !DILocation(line: 29, column: 31, scope: !7)
!26 = !DILocation(line: 29, column: 36, scope: !7)
!27 = !DILocation(line: 30, column: 31, scope: !7)
!28 = !DILocation(line: 30, column: 36, scope: !7)
!29 = !DILocation(line: 31, column: 31, scope: !7)
!30 = !DILocation(line: 31, column: 36, scope: !7)
!31 = !DILocation(line: 36, column: 18, scope: !7)
!32 = !DILocation(line: 37, column: 62, scope: !7)
!33 = !DILocation(line: 41, column: 18, scope: !7)
!34 = !DILocation(line: 42, column: 44, scope: !7)
!35 = !DILocation(line: 42, column: 36, scope: !7)
!36 = !DILocation(line: 42, column: 57, scope: !7)
!37 = !DILocation(line: 42, column: 31, scope: !7)
!38 = !DILocation(line: 42, column: 70, scope: !7)
!39 = !DILocation(line: 46, column: 20, scope: !7)
!40 = !DILocation(line: 47, column: 36, scope: !7)
!41 = !DILocation(line: 47, column: 57, scope: !7)
!42 = !DILocation(line: 47, column: 31, scope: !7)
!43 = !DILocation(line: 47, column: 70, scope: !7)
!44 = !DILocation(line: 51, column: 20, scope: !7)
!45 = !DILocation(line: 52, column: 36, scope: !7)
!46 = !DILocation(line: 52, column: 58, scope: !7)
!47 = !DILocation(line: 52, column: 31, scope: !7)
!48 = !DILocation(line: 52, column: 71, scope: !7)
!49 = !DILocation(line: 56, column: 66, scope: !7)
!50 = !DILocation(line: 56, column: 36, scope: !7)
!51 = !DILocation(line: 56, column: 58, scope: !7)
!52 = !DILocation(line: 56, column: 31, scope: !7)
!53 = !DILocation(line: 56, column: 71, scope: !7)
!54 = !DILocation(line: 63, column: 20, scope: !7)
!55 = !DILocation(line: 64, column: 27, scope: !7)
!56 = !DILocation(line: 66, column: 20, scope: !7)
!57 = !DILocation(line: 57, column: 35, scope: !7)
!58 = !DILocation(line: 58, column: 35, scope: !7)
!59 = !DILocation(line: 59, column: 34, scope: !7)
!60 = !DILocation(line: 60, column: 33, scope: !7)
!61 = !DILocation(line: 61, column: 20, scope: !7)
!62 = !DILocation(line: 69, column: 20, scope: !7)
!63 = !DILocation(line: 70, column: 20, scope: !7)
!64 = !DILocation(line: 71, column: 20, scope: !7)
!65 = !DILocation(line: 118, column: 15, scope: !66, inlinedAt: !68)
!66 = distinct !DILexicalBlockFile(scope: !7, file: !67, discriminator: 0)
!67 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!68 = !DILocation(line: 73, column: 42, scope: !7)
!69 = !DILocation(line: 121, column: 29, scope: !66, inlinedAt: !68)
!70 = !DILocation(line: 74, column: 25, scope: !7)
!71 = !DILocation(line: 74, column: 37, scope: !7)
!72 = !DILocation(line: 75, column: 25, scope: !7)
!73 = !DILocation(line: 75, column: 37, scope: !7)
!74 = !DILocation(line: 75, column: 4, scope: !7)
