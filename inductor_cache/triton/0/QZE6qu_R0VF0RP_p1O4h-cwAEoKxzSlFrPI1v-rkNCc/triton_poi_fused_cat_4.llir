; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_cat_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, i32 %11) local_unnamed_addr !dbg !7 {
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %14 = shl i32 %13, 9, !dbg !11
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %16 = shl i32 %15, 2, !dbg !12
  %17 = and i32 %16, 508, !dbg !12
  %18 = or disjoint i32 %14, %17, !dbg !13
  %19 = or disjoint i32 %18, 1, !dbg !13
  %20 = or disjoint i32 %18, 2, !dbg !13
  %21 = or disjoint i32 %18, 3, !dbg !13
  %.frozen = freeze i32 %18, !dbg !14
  %22 = sdiv i32 %.frozen, 16, !dbg !14
  %23 = srem i32 %22, 768, !dbg !15
  %24 = mul i32 %22, 16, !dbg !16
  %.decomposed = sub i32 %.frozen, %24, !dbg !16
  %25 = srem i32 %19, 16, !dbg !16
  %26 = srem i32 %20, 16, !dbg !16
  %27 = srem i32 %21, 16, !dbg !16
  %.frozen36 = freeze i32 %18, !dbg !17
  %28 = sdiv i32 %.frozen36, 12288, !dbg !17
  %29 = icmp slt i32 %23, 384, !dbg !18
  %30 = mul nsw i32 %.decomposed, 384, !dbg !19
  %31 = mul nsw i32 %25, 384, !dbg !19
  %32 = mul nsw i32 %26, 384, !dbg !19
  %33 = mul nsw i32 %27, 384, !dbg !19
  %34 = mul nsw i32 %28, 6144, !dbg !20
  %35 = add nsw i32 %30, %34, !dbg !21
  %36 = add nsw i32 %34, %31, !dbg !21
  %37 = add nsw i32 %34, %32, !dbg !21
  %38 = add nsw i32 %34, %33, !dbg !21
  %39 = add nsw i32 %35, %23, !dbg !22
  %40 = add nsw i32 %36, %23, !dbg !22
  %41 = add nsw i32 %37, %23, !dbg !22
  %42 = add nsw i32 %38, %23, !dbg !22
  %43 = sext i32 %39 to i64, !dbg !23
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !23
  %45 = sext i32 %40 to i64, !dbg !23
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !23
  %47 = sext i32 %41 to i64, !dbg !23
  %48 = getelementptr float, ptr addrspace(1) %0, i64 %47, !dbg !23
  %49 = sext i32 %42 to i64, !dbg !23
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !23
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %44, i1 %29, i32 0, i1 %29) #3, !dbg !24
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %46, i1 %29, i32 0, i1 %29) #3, !dbg !24
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %48, i1 %29, i32 0, i1 %29) #3, !dbg !24
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %50, i1 %29, i32 0, i1 %29) #3, !dbg !24
  %55 = sext i32 %23 to i64, !dbg !25
  %56 = getelementptr float, ptr addrspace(1) %1, i64 %55, !dbg !25
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %56, i1 %29, i32 0, i1 %29) #3, !dbg !26
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %56, i1 %29, i32 0, i1 %29) #3, !dbg !26
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %56, i1 %29, i32 0, i1 %29) #3, !dbg !26
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %56, i1 %29, i32 0, i1 %29) #3, !dbg !26
  %61 = getelementptr float, ptr addrspace(1) %2, i64 %55, !dbg !27
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %61, i1 %29, i32 0, i1 %29) #3, !dbg !28
  %63 = bitcast i32 %62 to float, !dbg !28
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %61, i1 %29, i32 0, i1 %29) #3, !dbg !28
  %65 = bitcast i32 %64 to float, !dbg !28
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %61, i1 %29, i32 0, i1 %29) #3, !dbg !28
  %67 = bitcast i32 %66 to float, !dbg !28
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %61, i1 %29, i32 0, i1 %29) #3, !dbg !28
  %69 = bitcast i32 %68 to float, !dbg !28
  %70 = fadd float %63, 0x3EE4F8B580000000, !dbg !29
  %71 = fadd float %65, 0x3EE4F8B580000000, !dbg !29
  %72 = fadd float %67, 0x3EE4F8B580000000, !dbg !29
  %73 = fadd float %69, 0x3EE4F8B580000000, !dbg !29
  %74 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i = icmp eq i32 %74, 0, !dbg !30
  %75 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i = icmp eq i32 %75, 0, !dbg !30
  br i1 %.not.i, label %81, label %76, !dbg !30

76:                                               ; preds = %12
  br i1 %.not1.i, label %79, label %77, !dbg !30

77:                                               ; preds = %76
  %78 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %70) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

79:                                               ; preds = %76
  %80 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %70) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

81:                                               ; preds = %12
  br i1 %.not1.i, label %84, label %82, !dbg !30

82:                                               ; preds = %81
  %83 = tail call float @llvm.nvvm.sqrt.rn.f(float %70) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

84:                                               ; preds = %81
  %85 = tail call float @llvm.nvvm.sqrt.approx.f(float %70) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

__nv_sqrtf.exit:                                  ; preds = %77, %79, %82, %84
  %.0.i = phi float [ %78, %77 ], [ %80, %79 ], [ %83, %82 ], [ %85, %84 ], !dbg !30
  %86 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i1 = icmp eq i32 %86, 0, !dbg !30
  %87 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i4 = icmp eq i32 %87, 0, !dbg !30
  br i1 %.not.i1, label %93, label %88, !dbg !30

88:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %91, label %89, !dbg !30

89:                                               ; preds = %88
  %90 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %71) #3, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

91:                                               ; preds = %88
  %92 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %71) #3, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

93:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %96, label %94, !dbg !30

94:                                               ; preds = %93
  %95 = tail call float @llvm.nvvm.sqrt.rn.f(float %71) #3, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

96:                                               ; preds = %93
  %97 = tail call float @llvm.nvvm.sqrt.approx.f(float %71) #3, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

__nv_sqrtf.exit5:                                 ; preds = %89, %91, %94, %96
  %.0.i3 = phi float [ %90, %89 ], [ %92, %91 ], [ %95, %94 ], [ %97, %96 ], !dbg !30
  %98 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i6 = icmp eq i32 %98, 0, !dbg !30
  %99 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i9 = icmp eq i32 %99, 0, !dbg !30
  br i1 %.not.i6, label %105, label %100, !dbg !30

100:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %103, label %101, !dbg !30

101:                                              ; preds = %100
  %102 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %72) #3, !dbg !30
  br label %__nv_sqrtf.exit10, !dbg !30

103:                                              ; preds = %100
  %104 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %72) #3, !dbg !30
  br label %__nv_sqrtf.exit10, !dbg !30

105:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %108, label %106, !dbg !30

106:                                              ; preds = %105
  %107 = tail call float @llvm.nvvm.sqrt.rn.f(float %72) #3, !dbg !30
  br label %__nv_sqrtf.exit10, !dbg !30

108:                                              ; preds = %105
  %109 = tail call float @llvm.nvvm.sqrt.approx.f(float %72) #3, !dbg !30
  br label %__nv_sqrtf.exit10, !dbg !30

__nv_sqrtf.exit10:                                ; preds = %101, %103, %106, %108
  %.0.i8 = phi float [ %102, %101 ], [ %104, %103 ], [ %107, %106 ], [ %109, %108 ], !dbg !30
  %110 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i11 = icmp eq i32 %110, 0, !dbg !30
  %111 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i14 = icmp eq i32 %111, 0, !dbg !30
  br i1 %.not.i11, label %117, label %112, !dbg !30

112:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %115, label %113, !dbg !30

113:                                              ; preds = %112
  %114 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %73) #3, !dbg !30
  br label %__nv_sqrtf.exit15, !dbg !30

115:                                              ; preds = %112
  %116 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %73) #3, !dbg !30
  br label %__nv_sqrtf.exit15, !dbg !30

117:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %120, label %118, !dbg !30

118:                                              ; preds = %117
  %119 = tail call float @llvm.nvvm.sqrt.rn.f(float %73) #3, !dbg !30
  br label %__nv_sqrtf.exit15, !dbg !30

120:                                              ; preds = %117
  %121 = tail call float @llvm.nvvm.sqrt.approx.f(float %73) #3, !dbg !30
  br label %__nv_sqrtf.exit15, !dbg !30

__nv_sqrtf.exit15:                                ; preds = %113, %115, %118, %120
  %.0.i13 = phi float [ %114, %113 ], [ %116, %115 ], [ %119, %118 ], [ %121, %120 ], !dbg !30
  %122 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !31
  %123 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !31
  %124 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !31
  %125 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !31
  %126 = getelementptr float, ptr addrspace(1) %3, i64 %55, !dbg !32
  %127 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %126, i1 %29, i32 0, i1 %29) #3, !dbg !33
  %128 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %126, i1 %29, i32 0, i1 %29) #3, !dbg !33
  %129 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %126, i1 %29, i32 0, i1 %29) #3, !dbg !33
  %130 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %126, i1 %29, i32 0, i1 %29) #3, !dbg !33
  %131 = getelementptr float, ptr addrspace(1) %4, i64 %55, !dbg !34
  %132 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %131, i1 %29, i32 0, i1 %29) #3, !dbg !35
  %133 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %131, i1 %29, i32 0, i1 %29) #3, !dbg !35
  %134 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %131, i1 %29, i32 0, i1 %29) #3, !dbg !35
  %135 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %131, i1 %29, i32 0, i1 %29) #3, !dbg !35
  %136 = icmp sgt i32 %23, 383, !dbg !36
  %137 = add nsw i32 %23, -384, !dbg !37
  %138 = add nsw i32 %35, %137, !dbg !38
  %139 = add nsw i32 %36, %137, !dbg !38
  %140 = add nsw i32 %37, %137, !dbg !38
  %141 = add nsw i32 %38, %137, !dbg !38
  %142 = sext i32 %138 to i64, !dbg !39
  %143 = getelementptr float, ptr addrspace(1) %5, i64 %142, !dbg !39
  %144 = sext i32 %139 to i64, !dbg !39
  %145 = getelementptr float, ptr addrspace(1) %5, i64 %144, !dbg !39
  %146 = sext i32 %140 to i64, !dbg !39
  %147 = getelementptr float, ptr addrspace(1) %5, i64 %146, !dbg !39
  %148 = sext i32 %141 to i64, !dbg !39
  %149 = getelementptr float, ptr addrspace(1) %5, i64 %148, !dbg !39
  %150 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %143, i1 %136, i32 0, i1 %136) #3, !dbg !40
  %151 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %145, i1 %136, i32 0, i1 %136) #3, !dbg !40
  %152 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %147, i1 %136, i32 0, i1 %136) #3, !dbg !40
  %153 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %149, i1 %136, i32 0, i1 %136) #3, !dbg !40
  %154 = sext i32 %137 to i64, !dbg !41
  %155 = getelementptr float, ptr addrspace(1) %6, i64 %154, !dbg !41
  %156 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %155, i1 %136, i32 0, i1 %136) #3, !dbg !42
  %157 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %155, i1 %136, i32 0, i1 %136) #3, !dbg !42
  %158 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %155, i1 %136, i32 0, i1 %136) #3, !dbg !42
  %159 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %155, i1 %136, i32 0, i1 %136) #3, !dbg !42
  %160 = getelementptr float, ptr addrspace(1) %7, i64 %154, !dbg !43
  %161 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %160, i1 %136, i32 0, i1 %136) #3, !dbg !44
  %162 = bitcast i32 %161 to float, !dbg !44
  %163 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %160, i1 %136, i32 0, i1 %136) #3, !dbg !44
  %164 = bitcast i32 %163 to float, !dbg !44
  %165 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %160, i1 %136, i32 0, i1 %136) #3, !dbg !44
  %166 = bitcast i32 %165 to float, !dbg !44
  %167 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %160, i1 %136, i32 0, i1 %136) #3, !dbg !44
  %168 = bitcast i32 %167 to float, !dbg !44
  %169 = fadd float %162, 0x3EE4F8B580000000, !dbg !45
  %170 = fadd float %164, 0x3EE4F8B580000000, !dbg !45
  %171 = fadd float %166, 0x3EE4F8B580000000, !dbg !45
  %172 = fadd float %168, 0x3EE4F8B580000000, !dbg !45
  %173 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !46
  %.not.i16 = icmp eq i32 %173, 0, !dbg !46
  %174 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !46
  %.not1.i19 = icmp eq i32 %174, 0, !dbg !46
  br i1 %.not.i16, label %180, label %175, !dbg !46

175:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %178, label %176, !dbg !46

176:                                              ; preds = %175
  %177 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %169) #3, !dbg !46
  br label %__nv_sqrtf.exit20, !dbg !46

178:                                              ; preds = %175
  %179 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %169) #3, !dbg !46
  br label %__nv_sqrtf.exit20, !dbg !46

180:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %183, label %181, !dbg !46

181:                                              ; preds = %180
  %182 = tail call float @llvm.nvvm.sqrt.rn.f(float %169) #3, !dbg !46
  br label %__nv_sqrtf.exit20, !dbg !46

183:                                              ; preds = %180
  %184 = tail call float @llvm.nvvm.sqrt.approx.f(float %169) #3, !dbg !46
  br label %__nv_sqrtf.exit20, !dbg !46

__nv_sqrtf.exit20:                                ; preds = %176, %178, %181, %183
  %.0.i18 = phi float [ %177, %176 ], [ %179, %178 ], [ %182, %181 ], [ %184, %183 ], !dbg !46
  %185 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !46
  %.not.i21 = icmp eq i32 %185, 0, !dbg !46
  %186 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !46
  %.not1.i24 = icmp eq i32 %186, 0, !dbg !46
  br i1 %.not.i21, label %192, label %187, !dbg !46

187:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %190, label %188, !dbg !46

188:                                              ; preds = %187
  %189 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %170) #3, !dbg !46
  br label %__nv_sqrtf.exit25, !dbg !46

190:                                              ; preds = %187
  %191 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %170) #3, !dbg !46
  br label %__nv_sqrtf.exit25, !dbg !46

192:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %195, label %193, !dbg !46

193:                                              ; preds = %192
  %194 = tail call float @llvm.nvvm.sqrt.rn.f(float %170) #3, !dbg !46
  br label %__nv_sqrtf.exit25, !dbg !46

195:                                              ; preds = %192
  %196 = tail call float @llvm.nvvm.sqrt.approx.f(float %170) #3, !dbg !46
  br label %__nv_sqrtf.exit25, !dbg !46

__nv_sqrtf.exit25:                                ; preds = %188, %190, %193, %195
  %.0.i23 = phi float [ %189, %188 ], [ %191, %190 ], [ %194, %193 ], [ %196, %195 ], !dbg !46
  %197 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !46
  %.not.i26 = icmp eq i32 %197, 0, !dbg !46
  %198 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !46
  %.not1.i29 = icmp eq i32 %198, 0, !dbg !46
  br i1 %.not.i26, label %204, label %199, !dbg !46

199:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %202, label %200, !dbg !46

200:                                              ; preds = %199
  %201 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %171) #3, !dbg !46
  br label %__nv_sqrtf.exit30, !dbg !46

202:                                              ; preds = %199
  %203 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %171) #3, !dbg !46
  br label %__nv_sqrtf.exit30, !dbg !46

204:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %207, label %205, !dbg !46

205:                                              ; preds = %204
  %206 = tail call float @llvm.nvvm.sqrt.rn.f(float %171) #3, !dbg !46
  br label %__nv_sqrtf.exit30, !dbg !46

207:                                              ; preds = %204
  %208 = tail call float @llvm.nvvm.sqrt.approx.f(float %171) #3, !dbg !46
  br label %__nv_sqrtf.exit30, !dbg !46

__nv_sqrtf.exit30:                                ; preds = %200, %202, %205, %207
  %.0.i28 = phi float [ %201, %200 ], [ %203, %202 ], [ %206, %205 ], [ %208, %207 ], !dbg !46
  %209 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !46
  %.not.i31 = icmp eq i32 %209, 0, !dbg !46
  %210 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !46
  %.not1.i34 = icmp eq i32 %210, 0, !dbg !46
  br i1 %.not.i31, label %216, label %211, !dbg !46

211:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %214, label %212, !dbg !46

212:                                              ; preds = %211
  %213 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %172) #3, !dbg !46
  br label %__nv_sqrtf.exit35, !dbg !46

214:                                              ; preds = %211
  %215 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %172) #3, !dbg !46
  br label %__nv_sqrtf.exit35, !dbg !46

216:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %219, label %217, !dbg !46

217:                                              ; preds = %216
  %218 = tail call float @llvm.nvvm.sqrt.rn.f(float %172) #3, !dbg !46
  br label %__nv_sqrtf.exit35, !dbg !46

219:                                              ; preds = %216
  %220 = tail call float @llvm.nvvm.sqrt.approx.f(float %172) #3, !dbg !46
  br label %__nv_sqrtf.exit35, !dbg !46

__nv_sqrtf.exit35:                                ; preds = %212, %214, %217, %219
  %.0.i33 = phi float [ %213, %212 ], [ %215, %214 ], [ %218, %217 ], [ %220, %219 ], !dbg !46
  %221 = insertelement <8 x i32> poison, i32 %153, i64 0, !dbg !40
  %222 = insertelement <8 x i32> %221, i32 %152, i64 1, !dbg !40
  %223 = insertelement <8 x i32> %222, i32 %151, i64 2, !dbg !40
  %224 = insertelement <8 x i32> %223, i32 %150, i64 3, !dbg !40
  %225 = insertelement <8 x i32> %224, i32 %51, i64 4, !dbg !40
  %226 = insertelement <8 x i32> %225, i32 %52, i64 5, !dbg !40
  %227 = insertelement <8 x i32> %226, i32 %53, i64 6, !dbg !40
  %228 = insertelement <8 x i32> %227, i32 %54, i64 7, !dbg !40
  %229 = bitcast <8 x i32> %228 to <8 x float>, !dbg !40
  %230 = insertelement <8 x i32> poison, i32 %159, i64 0, !dbg !42
  %231 = insertelement <8 x i32> %230, i32 %158, i64 1, !dbg !42
  %232 = insertelement <8 x i32> %231, i32 %157, i64 2, !dbg !42
  %233 = insertelement <8 x i32> %232, i32 %156, i64 3, !dbg !42
  %234 = insertelement <8 x i32> %233, i32 %57, i64 4, !dbg !42
  %235 = insertelement <8 x i32> %234, i32 %58, i64 5, !dbg !42
  %236 = insertelement <8 x i32> %235, i32 %59, i64 6, !dbg !42
  %237 = insertelement <8 x i32> %236, i32 %60, i64 7, !dbg !42
  %238 = bitcast <8 x i32> %237 to <8 x float>, !dbg !42
  %239 = mul i32 %28, 12288, !dbg !47
  %.decomposed37 = sub i32 %.frozen36, %239, !dbg !47
  %240 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !48
  %241 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !48
  %242 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !48
  %243 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !48
  %244 = getelementptr float, ptr addrspace(1) %8, i64 %154, !dbg !49
  %245 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %244, i1 %136, i32 0, i1 %136) #3, !dbg !50
  %246 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %244, i1 %136, i32 0, i1 %136) #3, !dbg !50
  %247 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %244, i1 %136, i32 0, i1 %136) #3, !dbg !50
  %248 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %244, i1 %136, i32 0, i1 %136) #3, !dbg !50
  %249 = getelementptr float, ptr addrspace(1) %9, i64 %154, !dbg !51
  %250 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %249, i1 %136, i32 0, i1 %136) #3, !dbg !52
  %251 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %249, i1 %136, i32 0, i1 %136) #3, !dbg !52
  %252 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %249, i1 %136, i32 0, i1 %136) #3, !dbg !52
  %253 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %249, i1 %136, i32 0, i1 %136) #3, !dbg !52
  %254 = fsub <8 x float> %229, %238, !dbg !53
  %255 = insertelement <8 x float> poison, float %243, i64 0, !dbg !54
  %256 = insertelement <8 x float> %255, float %242, i64 1, !dbg !54
  %257 = insertelement <8 x float> %256, float %241, i64 2, !dbg !54
  %258 = insertelement <8 x float> %257, float %240, i64 3, !dbg !54
  %259 = insertelement <8 x float> %258, float %122, i64 4, !dbg !54
  %260 = insertelement <8 x float> %259, float %123, i64 5, !dbg !54
  %261 = insertelement <8 x float> %260, float %124, i64 6, !dbg !54
  %262 = insertelement <8 x float> %261, float %125, i64 7, !dbg !54
  %263 = fmul <8 x float> %254, %262, !dbg !54
  %264 = insertelement <8 x i32> poison, i32 %248, i64 0, !dbg !50
  %265 = insertelement <8 x i32> %264, i32 %247, i64 1, !dbg !50
  %266 = insertelement <8 x i32> %265, i32 %246, i64 2, !dbg !50
  %267 = insertelement <8 x i32> %266, i32 %245, i64 3, !dbg !50
  %268 = insertelement <8 x i32> %267, i32 %127, i64 4, !dbg !50
  %269 = insertelement <8 x i32> %268, i32 %128, i64 5, !dbg !50
  %270 = insertelement <8 x i32> %269, i32 %129, i64 6, !dbg !50
  %271 = insertelement <8 x i32> %270, i32 %130, i64 7, !dbg !50
  %272 = bitcast <8 x i32> %271 to <8 x float>, !dbg !50
  %273 = fmul <8 x float> %263, %272, !dbg !55
  %274 = insertelement <8 x i32> poison, i32 %253, i64 0, !dbg !52
  %275 = insertelement <8 x i32> %274, i32 %252, i64 1, !dbg !52
  %276 = insertelement <8 x i32> %275, i32 %251, i64 2, !dbg !52
  %277 = insertelement <8 x i32> %276, i32 %250, i64 3, !dbg !52
  %278 = insertelement <8 x i32> %277, i32 %132, i64 4, !dbg !52
  %279 = insertelement <8 x i32> %278, i32 %133, i64 5, !dbg !52
  %280 = insertelement <8 x i32> %279, i32 %134, i64 6, !dbg !52
  %281 = insertelement <8 x i32> %280, i32 %135, i64 7, !dbg !52
  %282 = bitcast <8 x i32> %281 to <8 x float>, !dbg !52
  %283 = fadd <8 x float> %273, %282, !dbg !56
  %284 = fcmp olt <8 x float> %283, zeroinitializer, !dbg !57
  %285 = extractelement <8 x i1> %284, i64 7, !dbg !61
  %286 = extractelement <8 x float> %283, i64 7, !dbg !61
  %287 = select i1 %285, float 0.000000e+00, float %286, !dbg !61
  %288 = extractelement <8 x i1> %284, i64 6, !dbg !61
  %289 = extractelement <8 x float> %283, i64 6, !dbg !61
  %290 = select i1 %288, float 0.000000e+00, float %289, !dbg !61
  %291 = extractelement <8 x i1> %284, i64 5, !dbg !61
  %292 = extractelement <8 x float> %283, i64 5, !dbg !61
  %293 = select i1 %291, float 0.000000e+00, float %292, !dbg !61
  %294 = extractelement <8 x i1> %284, i64 4, !dbg !61
  %295 = extractelement <8 x float> %283, i64 4, !dbg !61
  %296 = select i1 %294, float 0.000000e+00, float %295, !dbg !61
  %297 = extractelement <8 x i1> %284, i64 3, !dbg !63
  %298 = extractelement <8 x float> %283, i64 3, !dbg !63
  %299 = select i1 %297, float 0.000000e+00, float %298, !dbg !63
  %300 = extractelement <8 x i1> %284, i64 2, !dbg !63
  %301 = extractelement <8 x float> %283, i64 2, !dbg !63
  %302 = select i1 %300, float 0.000000e+00, float %301, !dbg !63
  %303 = extractelement <8 x i1> %284, i64 1, !dbg !63
  %304 = extractelement <8 x float> %283, i64 1, !dbg !63
  %305 = select i1 %303, float 0.000000e+00, float %304, !dbg !63
  %306 = extractelement <8 x i1> %284, i64 0, !dbg !63
  %307 = extractelement <8 x float> %283, i64 0, !dbg !63
  %308 = select i1 %306, float 0.000000e+00, float %307, !dbg !63
  %309 = select i1 %29, float %296, float %299, !dbg !64
  %310 = select i1 %29, float %293, float %302, !dbg !64
  %311 = select i1 %29, float %290, float %305, !dbg !64
  %312 = select i1 %29, float %287, float %308, !dbg !64
  %313 = shl i32 %28, 15, !dbg !65
  %314 = add i32 %313, %.decomposed37, !dbg !66
  %315 = sext i32 %314 to i64, !dbg !67
  %316 = getelementptr float, ptr addrspace(1) %10, i64 %315, !dbg !67
  %317 = bitcast float %309 to i32, !dbg !68
  %318 = bitcast float %310 to i32, !dbg !68
  %319 = bitcast float %311 to i32, !dbg !68
  %320 = bitcast float %312 to i32, !dbg !68
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %317, i32 %318, i32 %319, i32 %320, ptr addrspace(1) %316, i1 true) #3, !dbg !68
  ret void, !dbg !69
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "chor6stlyp4tlz7j52qsbqbvyp4gfmqw625u5qggfbo3not7gw3v.py", directory: "inductor_cache/ho")
!4 = !{ptr @triton_poi_fused_cat_4, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_4, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_4", linkageName: "triton_poi_fused_cat_4", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 27, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 32, column: 18, scope: !7)
!19 = !DILocation(line: 33, column: 34, scope: !7)
!20 = !DILocation(line: 33, column: 44, scope: !7)
!21 = !DILocation(line: 33, column: 39, scope: !7)
!22 = !DILocation(line: 33, column: 50, scope: !7)
!23 = !DILocation(line: 33, column: 30, scope: !7)
!24 = !DILocation(line: 33, column: 56, scope: !7)
!25 = !DILocation(line: 34, column: 30, scope: !7)
!26 = !DILocation(line: 34, column: 35, scope: !7)
!27 = !DILocation(line: 36, column: 30, scope: !7)
!28 = !DILocation(line: 36, column: 35, scope: !7)
!29 = !DILocation(line: 38, column: 19, scope: !7)
!30 = !DILocation(line: 39, column: 27, scope: !7)
!31 = !DILocation(line: 41, column: 20, scope: !7)
!32 = !DILocation(line: 45, column: 31, scope: !7)
!33 = !DILocation(line: 45, column: 36, scope: !7)
!34 = !DILocation(line: 47, column: 31, scope: !7)
!35 = !DILocation(line: 47, column: 36, scope: !7)
!36 = !DILocation(line: 53, column: 20, scope: !7)
!37 = !DILocation(line: 56, column: 60, scope: !7)
!38 = !DILocation(line: 56, column: 51, scope: !7)
!39 = !DILocation(line: 56, column: 31, scope: !7)
!40 = !DILocation(line: 56, column: 66, scope: !7)
!41 = !DILocation(line: 57, column: 31, scope: !7)
!42 = !DILocation(line: 57, column: 45, scope: !7)
!43 = !DILocation(line: 59, column: 31, scope: !7)
!44 = !DILocation(line: 59, column: 45, scope: !7)
!45 = !DILocation(line: 61, column: 20, scope: !7)
!46 = !DILocation(line: 62, column: 27, scope: !7)
!47 = !DILocation(line: 27, column: 19, scope: !7)
!48 = !DILocation(line: 64, column: 20, scope: !7)
!49 = !DILocation(line: 68, column: 31, scope: !7)
!50 = !DILocation(line: 68, column: 45, scope: !7)
!51 = !DILocation(line: 70, column: 31, scope: !7)
!52 = !DILocation(line: 70, column: 45, scope: !7)
!53 = !DILocation(line: 58, column: 20, scope: !7)
!54 = !DILocation(line: 67, column: 20, scope: !7)
!55 = !DILocation(line: 69, column: 20, scope: !7)
!56 = !DILocation(line: 71, column: 20, scope: !7)
!57 = !DILocation(line: 118, column: 15, scope: !58, inlinedAt: !60)
!58 = distinct !DILexicalBlockFile(scope: !7, file: !59, discriminator: 0)
!59 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!60 = !DILocation(line: 73, column: 42, scope: !7)
!61 = !DILocation(line: 121, column: 29, scope: !58, inlinedAt: !62)
!62 = !DILocation(line: 50, column: 42, scope: !7)
!63 = !DILocation(line: 121, column: 29, scope: !58, inlinedAt: !60)
!64 = !DILocation(line: 0, scope: !7)
!65 = !DILocation(line: 77, column: 36, scope: !7)
!66 = !DILocation(line: 77, column: 30, scope: !7)
!67 = !DILocation(line: 77, column: 25, scope: !7)
!68 = !DILocation(line: 77, column: 48, scope: !7)
!69 = !DILocation(line: 77, column: 4, scope: !7)
