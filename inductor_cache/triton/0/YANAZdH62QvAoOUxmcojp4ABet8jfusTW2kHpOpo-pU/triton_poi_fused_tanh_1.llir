; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_tanh_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %11 = shl i32 %10, 3, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = lshr i32 %12, 2, !dbg !12
  %14 = and i32 %13, 7, !dbg !12
  %15 = and i32 %12, 3, !dbg !12
  %16 = and i32 %12, 7, !dbg !12
  %17 = or disjoint i32 %11, %14, !dbg !13
  %18 = or disjoint i32 %11, %16, !dbg !13
  %19 = icmp slt i32 %17, 16, !dbg !14
  %20 = icmp slt i32 %18, 16, !dbg !14
  %21 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %22 = shl i32 %21, 2, !dbg !16
  %23 = lshr i32 %12, 3, !dbg !17
  %24 = and i32 %23, 3, !dbg !17
  %25 = or disjoint i32 %22, %15, !dbg !18
  %26 = or disjoint i32 %22, %24, !dbg !18
  %27 = icmp slt i32 %25, 4, !dbg !19
  %28 = icmp slt i32 %26, 4, !dbg !19
  %29 = srem i32 %17, 4, !dbg !20
  %.frozen = freeze i32 %18, !dbg !21
  %30 = sdiv i32 %.frozen, 4, !dbg !21
  %31 = mul i32 %30, 4, !dbg !20
  %.decomposed = sub i32 %.frozen, %31, !dbg !20
  %32 = shl i32 %26, 2, !dbg !22
  %33 = add i32 %32, %.decomposed, !dbg !23
  %34 = shl i32 %30, 4, !dbg !24
  %35 = add i32 %33, %34, !dbg !25
  %36 = sext i32 %35 to i64, !dbg !26
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !26
  %38 = and i1 %19, %27, !dbg !27
  %39 = and i1 %20, %28, !dbg !27
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %39) #4, !dbg !28
  %41 = bitcast i32 %40 to float, !dbg !28
  %42 = sext i32 %26 to i64, !dbg !29
  %43 = getelementptr float, ptr addrspace(1) %1, i64 %42, !dbg !29
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 %28) #4, !dbg !30
  %45 = bitcast i32 %44 to float, !dbg !30
  %46 = shl nsw i32 %29, 2, !dbg !31
  %47 = add i32 %46, %25, !dbg !32
  %48 = sext i32 %47 to i64, !dbg !33
  %49 = getelementptr float, ptr addrspace(1) %2, i64 %48, !dbg !33
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 %38) #4, !dbg !34
  %51 = bitcast i32 %50 to float, !dbg !34
  %52 = getelementptr float, ptr addrspace(1) %3, i64 %48, !dbg !35
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 %38) #4, !dbg !36
  %54 = bitcast i32 %53 to float, !dbg !36
  %55 = getelementptr float, ptr addrspace(1) %4, i64 %48, !dbg !37
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 %38) #4, !dbg !38
  %57 = bitcast i32 %56 to float, !dbg !38
  %58 = getelementptr float, ptr addrspace(1) %5, i64 %48, !dbg !39
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %38) #4, !dbg !40
  %60 = bitcast i32 %59 to float, !dbg !40
  %61 = fadd float %41, %45, !dbg !41
  %62 = shl i32 %12, 2, !dbg !41
  %63 = and i32 %62, 28, !dbg !41
  %64 = or disjoint i32 %63, %24, !dbg !41
  %65 = and i32 %12, 31, !dbg !41
  %66 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %63, !dbg !41
  %67 = getelementptr inbounds float, ptr addrspace(3) %66, i32 %64, !dbg !41
  %68 = bitcast float %61 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %67, <1 x i32> %68, i1 true) #4, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %69 = lshr i32 %65, 2, !dbg !41
  %70 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %69, !dbg !41
  %71 = getelementptr inbounds float, ptr addrspace(3) %70, i32 %65, !dbg !41
  %72 = load float, ptr addrspace(3) %71, align 4, !dbg !41
  %73 = fsub float %72, %51, !dbg !42
  %74 = fadd float %54, 0x3EE4F8B580000000, !dbg !43
  %75 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !44
  %.not.i = icmp eq i32 %75, 0, !dbg !44
  %76 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !44
  %.not1.i = icmp eq i32 %76, 0, !dbg !44
  br i1 %.not.i, label %82, label %77, !dbg !44

77:                                               ; preds = %9
  br i1 %.not1.i, label %80, label %78, !dbg !44

78:                                               ; preds = %77
  %79 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %74) #4, !dbg !44
  br label %__nv_sqrtf.exit, !dbg !44

80:                                               ; preds = %77
  %81 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %74) #4, !dbg !44
  br label %__nv_sqrtf.exit, !dbg !44

82:                                               ; preds = %9
  br i1 %.not1.i, label %85, label %83, !dbg !44

83:                                               ; preds = %82
  %84 = tail call float @llvm.nvvm.sqrt.rn.f(float %74) #4, !dbg !44
  br label %__nv_sqrtf.exit, !dbg !44

85:                                               ; preds = %82
  %86 = tail call float @llvm.nvvm.sqrt.approx.f(float %74) #4, !dbg !44
  br label %__nv_sqrtf.exit, !dbg !44

__nv_sqrtf.exit:                                  ; preds = %78, %80, %83, %85
  %.0.i = phi float [ %79, %78 ], [ %81, %80 ], [ %84, %83 ], [ %86, %85 ], !dbg !44
  %87 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !45
  %88 = fmul float %73, %87, !dbg !46
  %89 = fmul float %88, %57, !dbg !47
  %90 = fadd float %89, %60, !dbg !48
  %91 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !49
  %.not.i4 = icmp eq i32 %91, 0, !dbg !49
  %92 = tail call float @llvm.nvvm.fabs.ftz.f(float %90) #4, !dbg !49
  %93 = tail call float @llvm.nvvm.fabs.f(float %90) #4, !dbg !49
  %.01.i = select i1 %.not.i4, float %93, float %92, !dbg !49
  %94 = fcmp ult float %.01.i, 0x3FE3333340000000, !dbg !49
  br i1 %94, label %__internal_fmad.exit3.i, label %__internal_fmad.exit1.i, !dbg !49

__internal_fmad.exit1.i:                          ; preds = %__nv_sqrtf.exit
  %95 = fmul float %.01.i, 0x4007154760000000, !dbg !49
  %96 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %95) #4, !dbg !49
  %97 = fadd float %96, 1.000000e+00, !dbg !49
  %98 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %97) #5, !dbg !49, !srcloc !50
  %99 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !49
  %.not6.i = icmp eq i32 %99, 0, !dbg !49
  %100 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %98, float -2.000000e+00, float 1.000000e+00) #4, !dbg !49
  %101 = tail call float @llvm.nvvm.fma.rn.f(float %98, float -2.000000e+00, float 1.000000e+00) #4, !dbg !49
  %.03.i = select i1 %.not6.i, float %101, float %100, !dbg !49
  %102 = fcmp oge float %.01.i, 0x4022059680000000, !dbg !49
  %s.0.i = select i1 %102, float 1.000000e+00, float %.03.i, !dbg !49
  %103 = bitcast float %s.0.i to i32, !dbg !49
  %104 = bitcast float %90 to i32, !dbg !49
  %105 = and i32 %104, -2147483648, !dbg !49
  %106 = or i32 %105, %103, !dbg !49
  br label %__nv_tanhf.exit, !dbg !49

__internal_fmad.exit3.i:                          ; preds = %__nv_sqrtf.exit
  %107 = fmul float %90, %90, !dbg !49
  %108 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !49
  %.not1.i5 = icmp eq i32 %108, 0, !dbg !49
  %109 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %107, float 0xBFAAC795C0000000) #4, !dbg !49
  %110 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %107, float 0xBFAAC795C0000000) #4, !dbg !49
  %.06.i = select i1 %.not1.i5, float %110, float %109, !dbg !49
  %111 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !49
  %.not2.i6 = icmp eq i32 %111, 0, !dbg !49
  %112 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i, float %107, float 0x3FC10B2820000000) #4, !dbg !49
  %113 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i, float %107, float 0x3FC10B2820000000) #4, !dbg !49
  %.05.i = select i1 %.not2.i6, float %113, float %112, !dbg !49
  %114 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !49
  %.not3.i = icmp eq i32 %114, 0, !dbg !49
  %115 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i, float %107, float 0xBFD5553DA0000000) #4, !dbg !49
  %116 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i, float %107, float 0xBFD5553DA0000000) #4, !dbg !49
  %.0.i7 = select i1 %.not3.i, float %116, float %115, !dbg !49
  %117 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !49
  %.not4.i = icmp eq i32 %117, 0, !dbg !49
  %118 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i7, float %107, float 0.000000e+00) #4, !dbg !49
  %119 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i7, float %107, float 0.000000e+00) #4, !dbg !49
  %.04.i = select i1 %.not4.i, float %119, float %118, !dbg !49
  %120 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !49
  %.not5.i = icmp eq i32 %120, 0, !dbg !49
  %121 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i, float %90, float %90) #4, !dbg !49
  %122 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i, float %90, float %90) #4, !dbg !49
  %.02.i = select i1 %.not5.i, float %122, float %121, !dbg !49
  %123 = bitcast float %.02.i to i32, !dbg !51
  br label %__nv_tanhf.exit, !dbg !49

__nv_tanhf.exit:                                  ; preds = %__internal_fmad.exit1.i, %__internal_fmad.exit3.i
  %s.1.i = phi i32 [ %106, %__internal_fmad.exit1.i ], [ %123, %__internal_fmad.exit3.i ], !dbg !49
  %124 = shl i32 %17, 2, !dbg !52
  %125 = add i32 %25, %124, !dbg !53
  %126 = sext i32 %125 to i64, !dbg !54
  %127 = getelementptr float, ptr addrspace(1) %6, i64 %126, !dbg !54
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %s.1.i, ptr addrspace(1) %127, i1 %38) #4, !dbg !51
  ret void, !dbg !55
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.ftz.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }
attributes #5 = { nounwind memory(none) }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ciox76d3mgnwxxootkieaz244h73s27eiihj76gujcd6263ieuur.py", directory: "inductor_cache/io")
!4 = !{ptr @triton_poi_fused_tanh_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_tanh_1, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_tanh_1", linkageName: "triton_poi_fused_tanh_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 30, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 37, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 45, scope: !7)
!25 = !DILocation(line: 32, column: 42, scope: !7)
!26 = !DILocation(line: 32, column: 30, scope: !7)
!27 = !DILocation(line: 32, column: 58, scope: !7)
!28 = !DILocation(line: 32, column: 50, scope: !7)
!29 = !DILocation(line: 33, column: 30, scope: !7)
!30 = !DILocation(line: 33, column: 35, scope: !7)
!31 = !DILocation(line: 34, column: 37, scope: !7)
!32 = !DILocation(line: 34, column: 35, scope: !7)
!33 = !DILocation(line: 34, column: 30, scope: !7)
!34 = !DILocation(line: 34, column: 42, scope: !7)
!35 = !DILocation(line: 35, column: 30, scope: !7)
!36 = !DILocation(line: 35, column: 42, scope: !7)
!37 = !DILocation(line: 36, column: 31, scope: !7)
!38 = !DILocation(line: 36, column: 43, scope: !7)
!39 = !DILocation(line: 37, column: 31, scope: !7)
!40 = !DILocation(line: 37, column: 43, scope: !7)
!41 = !DILocation(line: 38, column: 18, scope: !7)
!42 = !DILocation(line: 39, column: 18, scope: !7)
!43 = !DILocation(line: 41, column: 18, scope: !7)
!44 = !DILocation(line: 42, column: 26, scope: !7)
!45 = !DILocation(line: 44, column: 19, scope: !7)
!46 = !DILocation(line: 47, column: 19, scope: !7)
!47 = !DILocation(line: 48, column: 20, scope: !7)
!48 = !DILocation(line: 49, column: 20, scope: !7)
!49 = !DILocation(line: 50, column: 27, scope: !7)
!50 = !{i32 21046}
!51 = !DILocation(line: 51, column: 44, scope: !7)
!52 = !DILocation(line: 51, column: 32, scope: !7)
!53 = !DILocation(line: 51, column: 30, scope: !7)
!54 = !DILocation(line: 51, column: 25, scope: !7)
!55 = !DILocation(line: 51, column: 4, scope: !7)
