; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_mean_3(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %7 = shl i32 %6, 7, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 124, !dbg !12
  %11 = lshr i32 %8, 4, !dbg !12
  %12 = and i32 %11, 15, !dbg !12
  %13 = or disjoint i32 %12, 16, !dbg !12
  %14 = or disjoint i32 %12, 32, !dbg !12
  %15 = or disjoint i32 %12, 48, !dbg !12
  %16 = or disjoint i32 %12, 64, !dbg !12
  %17 = or disjoint i32 %12, 80, !dbg !12
  %18 = or disjoint i32 %12, 96, !dbg !12
  %19 = or disjoint i32 %12, 112, !dbg !12
  %20 = and i32 %8, 15, !dbg !12
  %21 = and i32 %8, 127, !dbg !12
  %22 = or disjoint i32 %7, %10, !dbg !13
  %23 = or disjoint i32 %7, %12, !dbg !13
  %24 = or disjoint i32 %7, %13, !dbg !13
  %25 = or disjoint i32 %7, %14, !dbg !13
  %26 = or disjoint i32 %7, %15, !dbg !13
  %27 = or disjoint i32 %7, %16, !dbg !13
  %28 = or disjoint i32 %7, %17, !dbg !13
  %29 = or disjoint i32 %7, %18, !dbg !13
  %30 = or disjoint i32 %7, %19, !dbg !13
  %31 = or disjoint i32 %7, %21, !dbg !13
  %32 = lshr i32 %8, 5, !dbg !14
  %33 = and i32 %32, 7, !dbg !14
  %34 = icmp eq i32 %33, 0, !dbg !15
  %35 = icmp samesign ult i32 %20, 9, !dbg !15
  %.frozen = freeze i32 %22, !dbg !16
  %36 = sdiv i32 %.frozen, 4096, !dbg !16
  %37 = mul i32 %36, 4096, !dbg !17
  %.decomposed = sub i32 %.frozen, %37, !dbg !17
  %38 = sdiv i32 %23, 4096, !dbg !16
  %39 = sdiv i32 %24, 4096, !dbg !16
  %40 = sdiv i32 %25, 4096, !dbg !16
  %41 = sdiv i32 %26, 4096, !dbg !16
  %42 = sdiv i32 %27, 4096, !dbg !16
  %43 = sdiv i32 %28, 4096, !dbg !16
  %44 = sdiv i32 %29, 4096, !dbg !16
  %45 = sdiv i32 %30, 4096, !dbg !16
  %46 = srem i32 %38, 512, !dbg !18
  %47 = srem i32 %39, 512, !dbg !18
  %48 = srem i32 %40, 512, !dbg !18
  %49 = srem i32 %41, 512, !dbg !18
  %50 = srem i32 %42, 512, !dbg !18
  %51 = srem i32 %43, 512, !dbg !18
  %52 = srem i32 %44, 512, !dbg !18
  %53 = srem i32 %45, 512, !dbg !18
  %54 = shl nuw nsw i32 %33, 12, !dbg !19
  %55 = mul i32 %36, 36864, !dbg !20
  %56 = add i32 %55, %.decomposed, !dbg !21
  %57 = add i32 %56, %54, !dbg !22
  %58 = add i32 %56, 32768, !dbg !21
  %59 = add i32 %58, %54, !dbg !22
  %60 = sext i32 %57 to i64, !dbg !23
  %61 = getelementptr float, ptr addrspace(1) %0, i64 %60, !dbg !23
  %62 = sext i32 %59 to i64, !dbg !23
  %63 = getelementptr float, ptr addrspace(1) %0, i64 %62, !dbg !23
  %64 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %61, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !24
  %65 = extractvalue { i32, i32, i32, i32 } %64, 0, !dbg !24
  %66 = extractvalue { i32, i32, i32, i32 } %64, 1, !dbg !24
  %67 = extractvalue { i32, i32, i32, i32 } %64, 2, !dbg !24
  %68 = extractvalue { i32, i32, i32, i32 } %64, 3, !dbg !24
  %69 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %63, i1 %34, i32 0, i1 %34, i32 0, i1 %34, i32 0, i1 %34, i32 0, i1 %34) #3, !dbg !24
  %70 = extractvalue { i32, i32, i32, i32 } %69, 0, !dbg !24
  %71 = extractvalue { i32, i32, i32, i32 } %69, 1, !dbg !24
  %72 = extractvalue { i32, i32, i32, i32 } %69, 2, !dbg !24
  %73 = extractvalue { i32, i32, i32, i32 } %69, 3, !dbg !24
  %74 = shl i32 %8, 6, !dbg !24
  %75 = and i32 %74, 1984, !dbg !24
  %76 = or disjoint i32 %75, %33, !dbg !24
  %77 = and i32 %8, 255, !dbg !24
  %78 = lshr exact i32 %75, 2, !dbg !24
  %79 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %78, !dbg !24
  %80 = getelementptr float, ptr addrspace(3) %79, i32 %76, !dbg !24
  %81 = insertelement <1 x i32> poison, i32 %65, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %80, <1 x i32> %81, i1 true) #3, !dbg !24
  %82 = or disjoint i32 %76, 16, !dbg !24
  %83 = lshr i32 %82, 4, !dbg !24
  %84 = getelementptr float, ptr addrspace(3) @global_smem, i32 %83, !dbg !24
  %85 = getelementptr float, ptr addrspace(3) %84, i32 %82, !dbg !24
  %86 = insertelement <1 x i32> poison, i32 %66, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %85, <1 x i32> %86, i1 true) #3, !dbg !24
  %87 = or disjoint i32 %76, 32, !dbg !24
  %88 = lshr i32 %87, 4, !dbg !24
  %89 = getelementptr float, ptr addrspace(3) @global_smem, i32 %88, !dbg !24
  %90 = getelementptr float, ptr addrspace(3) %89, i32 %87, !dbg !24
  %91 = insertelement <1 x i32> poison, i32 %67, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %90, <1 x i32> %91, i1 true) #3, !dbg !24
  %92 = or disjoint i32 %76, 48, !dbg !24
  %93 = lshr i32 %92, 4, !dbg !24
  %94 = getelementptr float, ptr addrspace(3) @global_smem, i32 %93, !dbg !24
  %95 = getelementptr float, ptr addrspace(3) %94, i32 %92, !dbg !24
  %96 = insertelement <1 x i32> poison, i32 %68, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %95, <1 x i32> %96, i1 true) #3, !dbg !24
  %97 = or disjoint i32 %76, 8, !dbg !24
  %98 = getelementptr float, ptr addrspace(3) %79, i32 %97, !dbg !24
  %99 = insertelement <1 x i32> poison, i32 %70, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %98, <1 x i32> %99, i1 true) #3, !dbg !24
  %100 = or disjoint i32 %76, 24, !dbg !24
  %101 = lshr i32 %100, 4, !dbg !24
  %102 = getelementptr float, ptr addrspace(3) @global_smem, i32 %101, !dbg !24
  %103 = getelementptr float, ptr addrspace(3) %102, i32 %100, !dbg !24
  %104 = insertelement <1 x i32> poison, i32 %71, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %103, <1 x i32> %104, i1 true) #3, !dbg !24
  %105 = or disjoint i32 %76, 40, !dbg !24
  %106 = lshr i32 %105, 4, !dbg !24
  %107 = getelementptr float, ptr addrspace(3) @global_smem, i32 %106, !dbg !24
  %108 = getelementptr float, ptr addrspace(3) %107, i32 %105, !dbg !24
  %109 = insertelement <1 x i32> poison, i32 %72, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %108, <1 x i32> %109, i1 true) #3, !dbg !24
  %110 = or disjoint i32 %76, 56, !dbg !24
  %111 = lshr i32 %110, 4, !dbg !24
  %112 = getelementptr float, ptr addrspace(3) @global_smem, i32 %111, !dbg !24
  %113 = getelementptr float, ptr addrspace(3) %112, i32 %110, !dbg !24
  %114 = insertelement <1 x i32> poison, i32 %73, i64 0, !dbg !24
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %113, <1 x i32> %114, i1 true) #3, !dbg !24
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %115 = lshr i32 %77, 4, !dbg !24
  %116 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %115, !dbg !24
  %117 = getelementptr inbounds float, ptr addrspace(3) %116, i32 %77, !dbg !24
  %118 = load float, ptr addrspace(3) %117, align 4, !dbg !24
  %119 = or disjoint i32 %77, 256, !dbg !24
  %120 = lshr i32 %119, 4, !dbg !24
  %121 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %120, !dbg !24
  %122 = getelementptr inbounds float, ptr addrspace(3) %121, i32 %119, !dbg !24
  %123 = load float, ptr addrspace(3) %122, align 4, !dbg !24
  %124 = or disjoint i32 %77, 512, !dbg !24
  %125 = lshr i32 %124, 4, !dbg !24
  %126 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %125, !dbg !24
  %127 = getelementptr inbounds float, ptr addrspace(3) %126, i32 %124, !dbg !24
  %128 = load float, ptr addrspace(3) %127, align 4, !dbg !24
  %129 = or disjoint i32 %77, 768, !dbg !24
  %130 = lshr i32 %129, 4, !dbg !24
  %131 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %130, !dbg !24
  %132 = getelementptr inbounds float, ptr addrspace(3) %131, i32 %129, !dbg !24
  %133 = load float, ptr addrspace(3) %132, align 4, !dbg !24
  %134 = or disjoint i32 %77, 1024, !dbg !24
  %135 = lshr i32 %134, 4, !dbg !24
  %136 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %135, !dbg !24
  %137 = getelementptr inbounds float, ptr addrspace(3) %136, i32 %134, !dbg !24
  %138 = load float, ptr addrspace(3) %137, align 4, !dbg !24
  %139 = or disjoint i32 %77, 1280, !dbg !24
  %140 = lshr i32 %139, 4, !dbg !24
  %141 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %140, !dbg !24
  %142 = getelementptr inbounds float, ptr addrspace(3) %141, i32 %139, !dbg !24
  %143 = load float, ptr addrspace(3) %142, align 4, !dbg !24
  %144 = or disjoint i32 %77, 1536, !dbg !24
  %145 = lshr i32 %144, 4, !dbg !24
  %146 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %145, !dbg !24
  %147 = getelementptr inbounds float, ptr addrspace(3) %146, i32 %144, !dbg !24
  %148 = load float, ptr addrspace(3) %147, align 4, !dbg !24
  %149 = or disjoint i32 %77, 1792, !dbg !24
  %150 = lshr i32 %149, 4, !dbg !24
  %151 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %150, !dbg !24
  %152 = getelementptr inbounds float, ptr addrspace(3) %151, i32 %149, !dbg !24
  %153 = load float, ptr addrspace(3) %152, align 4, !dbg !24
  %154 = mul nsw i32 %46, 9, !dbg !25
  %155 = mul nsw i32 %47, 9, !dbg !25
  %156 = mul nsw i32 %48, 9, !dbg !25
  %157 = mul nsw i32 %49, 9, !dbg !25
  %158 = mul nsw i32 %50, 9, !dbg !25
  %159 = mul nsw i32 %51, 9, !dbg !25
  %160 = mul nsw i32 %52, 9, !dbg !25
  %161 = mul nsw i32 %53, 9, !dbg !25
  %162 = add nsw i32 %154, %20, !dbg !26
  %163 = add nsw i32 %155, %20, !dbg !26
  %164 = add nsw i32 %156, %20, !dbg !26
  %165 = add nsw i32 %157, %20, !dbg !26
  %166 = add nsw i32 %158, %20, !dbg !26
  %167 = add nsw i32 %159, %20, !dbg !26
  %168 = add nsw i32 %160, %20, !dbg !26
  %169 = add nsw i32 %161, %20, !dbg !26
  %170 = sext i32 %162 to i64, !dbg !27
  %171 = getelementptr float, ptr addrspace(1) %1, i64 %170, !dbg !27
  %172 = sext i32 %163 to i64, !dbg !27
  %173 = getelementptr float, ptr addrspace(1) %1, i64 %172, !dbg !27
  %174 = sext i32 %164 to i64, !dbg !27
  %175 = getelementptr float, ptr addrspace(1) %1, i64 %174, !dbg !27
  %176 = sext i32 %165 to i64, !dbg !27
  %177 = getelementptr float, ptr addrspace(1) %1, i64 %176, !dbg !27
  %178 = sext i32 %166 to i64, !dbg !27
  %179 = getelementptr float, ptr addrspace(1) %1, i64 %178, !dbg !27
  %180 = sext i32 %167 to i64, !dbg !27
  %181 = getelementptr float, ptr addrspace(1) %1, i64 %180, !dbg !27
  %182 = sext i32 %168 to i64, !dbg !27
  %183 = getelementptr float, ptr addrspace(1) %1, i64 %182, !dbg !27
  %184 = sext i32 %169 to i64, !dbg !27
  %185 = getelementptr float, ptr addrspace(1) %1, i64 %184, !dbg !27
  %186 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %171, i1 %35, i32 0, i1 %35) #3, !dbg !28
  %187 = bitcast i32 %186 to float, !dbg !28
  %188 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %173, i1 %35, i32 0, i1 %35) #3, !dbg !28
  %189 = bitcast i32 %188 to float, !dbg !28
  %190 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %175, i1 %35, i32 0, i1 %35) #3, !dbg !28
  %191 = bitcast i32 %190 to float, !dbg !28
  %192 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %177, i1 %35, i32 0, i1 %35) #3, !dbg !28
  %193 = bitcast i32 %192 to float, !dbg !28
  %194 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %179, i1 %35, i32 0, i1 %35) #3, !dbg !28
  %195 = bitcast i32 %194 to float, !dbg !28
  %196 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %181, i1 %35, i32 0, i1 %35) #3, !dbg !28
  %197 = bitcast i32 %196 to float, !dbg !28
  %198 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %183, i1 %35, i32 0, i1 %35) #3, !dbg !28
  %199 = bitcast i32 %198 to float, !dbg !28
  %200 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %185, i1 %35, i32 0, i1 %35) #3, !dbg !28
  %201 = bitcast i32 %200 to float, !dbg !28
  %202 = fadd float %118, %187, !dbg !29
  %203 = fadd float %123, %189, !dbg !29
  %204 = fadd float %128, %191, !dbg !29
  %205 = fadd float %133, %193, !dbg !29
  %206 = fadd float %138, %195, !dbg !29
  %207 = fadd float %143, %197, !dbg !29
  %208 = fadd float %148, %199, !dbg !29
  %209 = fadd float %153, %201, !dbg !29
  %210 = select i1 %35, float %202, float 0.000000e+00, !dbg !30
  %211 = select i1 %35, float %203, float 0.000000e+00, !dbg !30
  %212 = select i1 %35, float %204, float 0.000000e+00, !dbg !30
  %213 = select i1 %35, float %205, float 0.000000e+00, !dbg !30
  %214 = select i1 %35, float %206, float 0.000000e+00, !dbg !30
  %215 = select i1 %35, float %207, float 0.000000e+00, !dbg !30
  %216 = select i1 %35, float %208, float 0.000000e+00, !dbg !30
  %217 = select i1 %35, float %209, float 0.000000e+00, !dbg !30
  %218 = bitcast float %210 to i32, !dbg !31
  %219 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %218, i32 8, i32 31), !dbg !31
  %220 = bitcast i32 %219 to float, !dbg !31
  %221 = fadd float %210, %220, !dbg !35
  %222 = bitcast float %221 to i32, !dbg !31
  %223 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %222, i32 4, i32 31), !dbg !31
  %224 = bitcast i32 %223 to float, !dbg !31
  %225 = fadd float %221, %224, !dbg !35
  %226 = bitcast float %225 to i32, !dbg !31
  %227 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %226, i32 2, i32 31), !dbg !31
  %228 = bitcast i32 %227 to float, !dbg !31
  %229 = fadd float %225, %228, !dbg !35
  %230 = bitcast float %229 to i32, !dbg !31
  %231 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %230, i32 1, i32 31), !dbg !31
  %232 = bitcast i32 %231 to float, !dbg !31
  %233 = fadd float %229, %232, !dbg !35
  %234 = bitcast float %211 to i32, !dbg !31
  %235 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %234, i32 8, i32 31), !dbg !31
  %236 = bitcast i32 %235 to float, !dbg !31
  %237 = fadd float %211, %236, !dbg !35
  %238 = bitcast float %237 to i32, !dbg !31
  %239 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %238, i32 4, i32 31), !dbg !31
  %240 = bitcast i32 %239 to float, !dbg !31
  %241 = fadd float %237, %240, !dbg !35
  %242 = bitcast float %241 to i32, !dbg !31
  %243 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %242, i32 2, i32 31), !dbg !31
  %244 = bitcast i32 %243 to float, !dbg !31
  %245 = fadd float %241, %244, !dbg !35
  %246 = bitcast float %245 to i32, !dbg !31
  %247 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %246, i32 1, i32 31), !dbg !31
  %248 = bitcast i32 %247 to float, !dbg !31
  %249 = fadd float %245, %248, !dbg !35
  %250 = bitcast float %212 to i32, !dbg !31
  %251 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %250, i32 8, i32 31), !dbg !31
  %252 = bitcast i32 %251 to float, !dbg !31
  %253 = fadd float %212, %252, !dbg !35
  %254 = bitcast float %253 to i32, !dbg !31
  %255 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %254, i32 4, i32 31), !dbg !31
  %256 = bitcast i32 %255 to float, !dbg !31
  %257 = fadd float %253, %256, !dbg !35
  %258 = bitcast float %257 to i32, !dbg !31
  %259 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %258, i32 2, i32 31), !dbg !31
  %260 = bitcast i32 %259 to float, !dbg !31
  %261 = fadd float %257, %260, !dbg !35
  %262 = bitcast float %261 to i32, !dbg !31
  %263 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %262, i32 1, i32 31), !dbg !31
  %264 = bitcast i32 %263 to float, !dbg !31
  %265 = fadd float %261, %264, !dbg !35
  %266 = bitcast float %213 to i32, !dbg !31
  %267 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %266, i32 8, i32 31), !dbg !31
  %268 = bitcast i32 %267 to float, !dbg !31
  %269 = fadd float %213, %268, !dbg !35
  %270 = bitcast float %269 to i32, !dbg !31
  %271 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %270, i32 4, i32 31), !dbg !31
  %272 = bitcast i32 %271 to float, !dbg !31
  %273 = fadd float %269, %272, !dbg !35
  %274 = bitcast float %273 to i32, !dbg !31
  %275 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %274, i32 2, i32 31), !dbg !31
  %276 = bitcast i32 %275 to float, !dbg !31
  %277 = fadd float %273, %276, !dbg !35
  %278 = bitcast float %277 to i32, !dbg !31
  %279 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %278, i32 1, i32 31), !dbg !31
  %280 = bitcast i32 %279 to float, !dbg !31
  %281 = fadd float %277, %280, !dbg !35
  %282 = bitcast float %214 to i32, !dbg !31
  %283 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %282, i32 8, i32 31), !dbg !31
  %284 = bitcast i32 %283 to float, !dbg !31
  %285 = fadd float %214, %284, !dbg !35
  %286 = bitcast float %285 to i32, !dbg !31
  %287 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %286, i32 4, i32 31), !dbg !31
  %288 = bitcast i32 %287 to float, !dbg !31
  %289 = fadd float %285, %288, !dbg !35
  %290 = bitcast float %289 to i32, !dbg !31
  %291 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %290, i32 2, i32 31), !dbg !31
  %292 = bitcast i32 %291 to float, !dbg !31
  %293 = fadd float %289, %292, !dbg !35
  %294 = bitcast float %293 to i32, !dbg !31
  %295 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %294, i32 1, i32 31), !dbg !31
  %296 = bitcast i32 %295 to float, !dbg !31
  %297 = fadd float %293, %296, !dbg !35
  %298 = bitcast float %215 to i32, !dbg !31
  %299 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %298, i32 8, i32 31), !dbg !31
  %300 = bitcast i32 %299 to float, !dbg !31
  %301 = fadd float %215, %300, !dbg !35
  %302 = bitcast float %301 to i32, !dbg !31
  %303 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %302, i32 4, i32 31), !dbg !31
  %304 = bitcast i32 %303 to float, !dbg !31
  %305 = fadd float %301, %304, !dbg !35
  %306 = bitcast float %305 to i32, !dbg !31
  %307 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %306, i32 2, i32 31), !dbg !31
  %308 = bitcast i32 %307 to float, !dbg !31
  %309 = fadd float %305, %308, !dbg !35
  %310 = bitcast float %309 to i32, !dbg !31
  %311 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %310, i32 1, i32 31), !dbg !31
  %312 = bitcast i32 %311 to float, !dbg !31
  %313 = fadd float %309, %312, !dbg !35
  %314 = bitcast float %216 to i32, !dbg !31
  %315 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %314, i32 8, i32 31), !dbg !31
  %316 = bitcast i32 %315 to float, !dbg !31
  %317 = fadd float %216, %316, !dbg !35
  %318 = bitcast float %317 to i32, !dbg !31
  %319 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %318, i32 4, i32 31), !dbg !31
  %320 = bitcast i32 %319 to float, !dbg !31
  %321 = fadd float %317, %320, !dbg !35
  %322 = bitcast float %321 to i32, !dbg !31
  %323 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %322, i32 2, i32 31), !dbg !31
  %324 = bitcast i32 %323 to float, !dbg !31
  %325 = fadd float %321, %324, !dbg !35
  %326 = bitcast float %325 to i32, !dbg !31
  %327 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %326, i32 1, i32 31), !dbg !31
  %328 = bitcast i32 %327 to float, !dbg !31
  %329 = fadd float %325, %328, !dbg !35
  %330 = bitcast float %217 to i32, !dbg !31
  %331 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %330, i32 8, i32 31), !dbg !31
  %332 = bitcast i32 %331 to float, !dbg !31
  %333 = fadd float %217, %332, !dbg !35
  %334 = bitcast float %333 to i32, !dbg !31
  %335 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %334, i32 4, i32 31), !dbg !31
  %336 = bitcast i32 %335 to float, !dbg !31
  %337 = fadd float %333, %336, !dbg !35
  %338 = bitcast float %337 to i32, !dbg !31
  %339 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %338, i32 2, i32 31), !dbg !31
  %340 = bitcast i32 %339 to float, !dbg !31
  %341 = fadd float %337, %340, !dbg !35
  %342 = bitcast float %341 to i32, !dbg !31
  %343 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %342, i32 1, i32 31), !dbg !31
  %344 = bitcast i32 %343 to float, !dbg !31
  %345 = fadd float %341, %344, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %346 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !37
  %347 = bitcast float %233 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %346, <1 x i32> %347, i1 true) #3, !dbg !37
  %348 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !37
  %349 = bitcast float %249 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %348, <1 x i32> %349, i1 true) #3, !dbg !37
  %350 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !37
  %351 = bitcast float %265 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %350, <1 x i32> %351, i1 true) #3, !dbg !37
  %352 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !37
  %353 = bitcast float %281 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %352, <1 x i32> %353, i1 true) #3, !dbg !37
  %354 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %16, !dbg !37
  %355 = bitcast float %297 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %354, <1 x i32> %355, i1 true) #3, !dbg !37
  %356 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %17, !dbg !37
  %357 = bitcast float %313 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %356, <1 x i32> %357, i1 true) #3, !dbg !37
  %358 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %18, !dbg !37
  %359 = bitcast float %329 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %358, <1 x i32> %359, i1 true) #3, !dbg !37
  %360 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %19, !dbg !37
  %361 = bitcast float %345 to <1 x i32>, !dbg !37
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %360, <1 x i32> %361, i1 true) #3, !dbg !37
  tail call void @llvm.nvvm.barrier0(), !dbg !37
  %362 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %21, !dbg !37
  %363 = load i32, ptr addrspace(3) %362, align 4, !dbg !37
  %364 = sext i32 %31 to i64, !dbg !38
  %365 = getelementptr float, ptr addrspace(1) %2, i64 %364, !dbg !38
  %366 = and i32 %8, 128, !dbg !39
  %367 = icmp eq i32 %366, 0, !dbg !39
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %363, ptr addrspace(1) %365, i1 %367) #3, !dbg !39
  ret void, !dbg !40
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "chksy5lh7sfmvcvkk523t3gukrncsmpea2ti5lh6g24uaqqfnskk.py", directory: "inductor_cache/hk")
!4 = !{ptr @triton_per_fused_mean_3, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_mean_3, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_mean_3", linkageName: "triton_per_fused_mean_3", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 26, column: 34, scope: !7)
!15 = !DILocation(line: 28, column: 21, scope: !7)
!16 = !DILocation(line: 31, column: 19, scope: !7)
!17 = !DILocation(line: 30, column: 19, scope: !7)
!18 = !DILocation(line: 32, column: 29, scope: !7)
!19 = !DILocation(line: 34, column: 40, scope: !7)
!20 = !DILocation(line: 34, column: 51, scope: !7)
!21 = !DILocation(line: 34, column: 35, scope: !7)
!22 = !DILocation(line: 34, column: 45, scope: !7)
!23 = !DILocation(line: 34, column: 30, scope: !7)
!24 = !DILocation(line: 34, column: 56, scope: !7)
!25 = !DILocation(line: 35, column: 37, scope: !7)
!26 = !DILocation(line: 35, column: 35, scope: !7)
!27 = !DILocation(line: 35, column: 30, scope: !7)
!28 = !DILocation(line: 35, column: 42, scope: !7)
!29 = !DILocation(line: 36, column: 18, scope: !7)
!30 = !DILocation(line: 38, column: 33, scope: !7)
!31 = !DILocation(line: 267, column: 36, scope: !32, inlinedAt: !34)
!32 = distinct !DILexicalBlockFile(scope: !7, file: !33, discriminator: 0)
!33 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!34 = !DILocation(line: 39, column: 24, scope: !7)
!35 = !DILocation(line: 256, column: 15, scope: !36, inlinedAt: !34)
!36 = distinct !DILexicalBlockFile(scope: !32, file: !33, discriminator: 0)
!37 = !DILocation(line: 39, column: 27, scope: !7)
!38 = !DILocation(line: 40, column: 25, scope: !7)
!39 = !DILocation(line: 40, column: 36, scope: !7)
!40 = !DILocation(line: 40, column: 4, scope: !7)
