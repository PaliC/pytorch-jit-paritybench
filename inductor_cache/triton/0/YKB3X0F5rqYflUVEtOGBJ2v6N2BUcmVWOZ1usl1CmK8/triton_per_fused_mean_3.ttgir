#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [2, 16], warpsPerCTA = [8, 1], order = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [4, 1], threadsPerWarp = [32, 1], warpsPerCTA = [1, 8], order = [0, 1]}>
#blocked2 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [32, 1], warpsPerCTA = [4, 2], order = [0, 1]}>
#loc = loc("inductor_cache/hk/chksy5lh7sfmvcvkk523t3gukrncsmpea2ti5lh6g24uaqqfnskk.py":19:0)
#loc1 = loc(unknown)
#loc24 = loc("inductor_cache/hk/chksy5lh7sfmvcvkk523t3gukrncsmpea2ti5lh6g24uaqqfnskk.py":39:24)
#loc31 = loc(callsite(#loc1 at #loc24))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 8 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_per_fused_mean_3(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/hk/chksy5lh7sfmvcvkk523t3gukrncsmpea2ti5lh6g24uaqqfnskk.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/hk/chksy5lh7sfmvcvkk523t3gukrncsmpea2ti5lh6g24uaqqfnskk.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/hk/chksy5lh7sfmvcvkk523t3gukrncsmpea2ti5lh6g24uaqqfnskk.py":19:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/hk/chksy5lh7sfmvcvkk523t3gukrncsmpea2ti5lh6g24uaqqfnskk.py":19:0), %arg4: i32 loc("inductor_cache/hk/chksy5lh7sfmvcvkk523t3gukrncsmpea2ti5lh6g24uaqqfnskk.py":19:0)) attributes {noinline = false} {
    %c128_i32 = arith.constant 128 : i32 loc(#loc1)
    %cst = arith.constant dense<9> : tensor<1x16xi32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<0.000000e+00> : tensor<128x16xf32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<0.000000e+00> : tensor<128x16xf32, #blocked1> loc(#loc1)
    %cst_2 = arith.constant dense<9> : tensor<128x1xi32, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<36864> : tensor<128x1xi32, #blocked1> loc(#loc1)
    %cst_4 = arith.constant dense<4096> : tensor<1x16xi32, #blocked1> loc(#loc1)
    %cst_5 = arith.constant dense<512> : tensor<128x1xi32, #blocked> loc(#loc1)
    %cst_6 = arith.constant dense<4096> : tensor<128x1xi32, #blocked1> loc(#loc1)
    %cst_7 = arith.constant dense<4096> : tensor<128x1xi32, #blocked> loc(#loc1)
    %cst_8 = arith.constant dense<9> : tensor<1x16xi32, #blocked1> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c128_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc4)
    %3 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc4)
    %4 = tt.make_range {end = 128 : i32, start = 0 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked2}>> loc(#loc4)
    %5 = tt.expand_dims %2 {axis = 1 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<128x1xi32, #blocked1> loc(#loc4)
    %6 = tt.expand_dims %3 {axis = 1 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<128x1xi32, #blocked> loc(#loc4)
    %7 = tt.expand_dims %4 {axis = 1 : i32} : tensor<128xi32, #triton_gpu.slice<{dim = 1, parent = #blocked2}>> -> tensor<128x1xi32, #blocked2> loc(#loc4)
    %8 = tt.splat %1 : i32 -> tensor<128x1xi32, #blocked1> loc(#loc5)
    %9 = tt.splat %1 : i32 -> tensor<128x1xi32, #blocked> loc(#loc5)
    %10 = tt.splat %1 : i32 -> tensor<128x1xi32, #blocked2> loc(#loc5)
    %11 = arith.addi %8, %5 : tensor<128x1xi32, #blocked1> loc(#loc5)
    %12 = arith.addi %9, %6 : tensor<128x1xi32, #blocked> loc(#loc5)
    %13 = arith.addi %10, %7 : tensor<128x1xi32, #blocked2> loc(#loc5)
    %14 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc6)
    %15 = tt.make_range {end = 16 : i32, start = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc6)
    %16 = tt.expand_dims %14 {axis = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x16xi32, #blocked1> loc(#loc6)
    %17 = tt.expand_dims %15 {axis = 0 : i32} : tensor<16xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x16xi32, #blocked> loc(#loc6)
    %18 = arith.cmpi slt, %16, %cst_8 : tensor<1x16xi32, #blocked1> loc(#loc7)
    %19 = arith.cmpi slt, %17, %cst : tensor<1x16xi32, #blocked> loc(#loc7)
    %20 = arith.remsi %11, %cst_6 : tensor<128x1xi32, #blocked1> loc(#loc8)
    %21 = arith.divsi %11, %cst_6 : tensor<128x1xi32, #blocked1> loc(#loc9)
    %22 = arith.divsi %12, %cst_7 : tensor<128x1xi32, #blocked> loc(#loc9)
    %23 = arith.remsi %22, %cst_5 : tensor<128x1xi32, #blocked> loc(#loc10)
    %24 = arith.muli %16, %cst_4 : tensor<1x16xi32, #blocked1> loc(#loc11)
    %25 = tt.broadcast %20 : tensor<128x1xi32, #blocked1> -> tensor<128x16xi32, #blocked1> loc(#loc12)
    %26 = tt.broadcast %24 : tensor<1x16xi32, #blocked1> -> tensor<128x16xi32, #blocked1> loc(#loc12)
    %27 = arith.addi %25, %26 : tensor<128x16xi32, #blocked1> loc(#loc12)
    %28 = arith.muli %21, %cst_3 : tensor<128x1xi32, #blocked1> loc(#loc13)
    %29 = tt.broadcast %28 : tensor<128x1xi32, #blocked1> -> tensor<128x16xi32, #blocked1> loc(#loc14)
    %30 = arith.addi %27, %29 : tensor<128x16xi32, #blocked1> loc(#loc14)
    %31 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<128x16x!tt.ptr<f32>, #blocked1> loc(#loc15)
    %32 = tt.addptr %31, %30 : tensor<128x16x!tt.ptr<f32>, #blocked1>, tensor<128x16xi32, #blocked1> loc(#loc15)
    %33 = tt.broadcast %18 : tensor<1x16xi1, #blocked1> -> tensor<128x16xi1, #blocked1> loc(#loc16)
    %34 = tt.broadcast %19 : tensor<1x16xi1, #blocked> -> tensor<128x16xi1, #blocked> loc(#loc16)
    %35 = tt.load %32, %33, %cst_1 : tensor<128x16x!tt.ptr<f32>, #blocked1> loc(#loc16)
    %36 = triton_gpu.convert_layout %35 : tensor<128x16xf32, #blocked1> -> tensor<128x16xf32, #blocked> loc(#loc16)
    %37 = arith.muli %23, %cst_2 : tensor<128x1xi32, #blocked> loc(#loc17)
    %38 = tt.broadcast %17 : tensor<1x16xi32, #blocked> -> tensor<128x16xi32, #blocked> loc(#loc18)
    %39 = tt.broadcast %37 : tensor<128x1xi32, #blocked> -> tensor<128x16xi32, #blocked> loc(#loc18)
    %40 = arith.addi %38, %39 : tensor<128x16xi32, #blocked> loc(#loc18)
    %41 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<128x16x!tt.ptr<f32>, #blocked> loc(#loc19)
    %42 = tt.addptr %41, %40 : tensor<128x16x!tt.ptr<f32>, #blocked>, tensor<128x16xi32, #blocked> loc(#loc19)
    %43 = tt.load %42, %34, %cst_0 evictionPolicy = evict_last : tensor<128x16x!tt.ptr<f32>, #blocked> loc(#loc20)
    %44 = arith.addf %36, %43 : tensor<128x16xf32, #blocked> loc(#loc21)
    %45 = arith.select %34, %44, %cst_0 : tensor<128x16xi1, #blocked>, tensor<128x16xf32, #blocked> loc(#loc22)
    %46 = "tt.reduce"(%45) <{axis = 1 : i32}> ({
    ^bb0(%arg5: f32 loc(callsite(#loc1 at #loc24)), %arg6: f32 loc(callsite(#loc1 at #loc24))):
      %51 = arith.addf %arg5, %arg6 : f32 loc(#loc33)
      tt.reduce.return %51 : f32 loc(#loc30)
    }) : (tensor<128x16xf32, #blocked>) -> tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc30)
    %47 = triton_gpu.convert_layout %46 {axis = 1 : i32} : tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #blocked2}>> loc(#loc26)
    %48 = tt.expand_dims %47 {axis = 1 : i32} : tensor<128xf32, #triton_gpu.slice<{dim = 1, parent = #blocked2}>> -> tensor<128x1xf32, #blocked2> loc(#loc26)
    %49 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<128x1x!tt.ptr<f32>, #blocked2> loc(#loc27)
    %50 = tt.addptr %49, %13 : tensor<128x1x!tt.ptr<f32>, #blocked2>, tensor<128x1xi32, #blocked2> loc(#loc27)
    tt.store %50, %48 : tensor<128x1x!tt.ptr<f32>, #blocked2> loc(#loc28)
    tt.return loc(#loc29)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/hk/chksy5lh7sfmvcvkk523t3gukrncsmpea2ti5lh6g24uaqqfnskk.py":23:28)
#loc3 = loc("inductor_cache/hk/chksy5lh7sfmvcvkk523t3gukrncsmpea2ti5lh6g24uaqqfnskk.py":23:33)
#loc4 = loc("inductor_cache/hk/chksy5lh7sfmvcvkk523t3gukrncsmpea2ti5lh6g24uaqqfnskk.py":24:44)
#loc5 = loc("inductor_cache/hk/chksy5lh7sfmvcvkk523t3gukrncsmpea2ti5lh6g24uaqqfnskk.py":24:23)
#loc6 = loc("inductor_cache/hk/chksy5lh7sfmvcvkk523t3gukrncsmpea2ti5lh6g24uaqqfnskk.py":26:34)
#loc7 = loc("inductor_cache/hk/chksy5lh7sfmvcvkk523t3gukrncsmpea2ti5lh6g24uaqqfnskk.py":28:21)
#loc8 = loc("inductor_cache/hk/chksy5lh7sfmvcvkk523t3gukrncsmpea2ti5lh6g24uaqqfnskk.py":30:19)
#loc9 = loc("inductor_cache/hk/chksy5lh7sfmvcvkk523t3gukrncsmpea2ti5lh6g24uaqqfnskk.py":31:19)
#loc10 = loc("inductor_cache/hk/chksy5lh7sfmvcvkk523t3gukrncsmpea2ti5lh6g24uaqqfnskk.py":32:29)
#loc11 = loc("inductor_cache/hk/chksy5lh7sfmvcvkk523t3gukrncsmpea2ti5lh6g24uaqqfnskk.py":34:40)
#loc12 = loc("inductor_cache/hk/chksy5lh7sfmvcvkk523t3gukrncsmpea2ti5lh6g24uaqqfnskk.py":34:35)
#loc13 = loc("inductor_cache/hk/chksy5lh7sfmvcvkk523t3gukrncsmpea2ti5lh6g24uaqqfnskk.py":34:51)
#loc14 = loc("inductor_cache/hk/chksy5lh7sfmvcvkk523t3gukrncsmpea2ti5lh6g24uaqqfnskk.py":34:45)
#loc15 = loc("inductor_cache/hk/chksy5lh7sfmvcvkk523t3gukrncsmpea2ti5lh6g24uaqqfnskk.py":34:30)
#loc16 = loc("inductor_cache/hk/chksy5lh7sfmvcvkk523t3gukrncsmpea2ti5lh6g24uaqqfnskk.py":34:56)
#loc17 = loc("inductor_cache/hk/chksy5lh7sfmvcvkk523t3gukrncsmpea2ti5lh6g24uaqqfnskk.py":35:37)
#loc18 = loc("inductor_cache/hk/chksy5lh7sfmvcvkk523t3gukrncsmpea2ti5lh6g24uaqqfnskk.py":35:35)
#loc19 = loc("inductor_cache/hk/chksy5lh7sfmvcvkk523t3gukrncsmpea2ti5lh6g24uaqqfnskk.py":35:30)
#loc20 = loc("inductor_cache/hk/chksy5lh7sfmvcvkk523t3gukrncsmpea2ti5lh6g24uaqqfnskk.py":35:42)
#loc21 = loc("inductor_cache/hk/chksy5lh7sfmvcvkk523t3gukrncsmpea2ti5lh6g24uaqqfnskk.py":36:18)
#loc22 = loc("inductor_cache/hk/chksy5lh7sfmvcvkk523t3gukrncsmpea2ti5lh6g24uaqqfnskk.py":38:33)
#loc23 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc25 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc26 = loc("inductor_cache/hk/chksy5lh7sfmvcvkk523t3gukrncsmpea2ti5lh6g24uaqqfnskk.py":39:27)
#loc27 = loc("inductor_cache/hk/chksy5lh7sfmvcvkk523t3gukrncsmpea2ti5lh6g24uaqqfnskk.py":40:25)
#loc28 = loc("inductor_cache/hk/chksy5lh7sfmvcvkk523t3gukrncsmpea2ti5lh6g24uaqqfnskk.py":40:36)
#loc29 = loc("inductor_cache/hk/chksy5lh7sfmvcvkk523t3gukrncsmpea2ti5lh6g24uaqqfnskk.py":40:4)
#loc30 = loc(callsite(#loc23 at #loc24))
#loc32 = loc(callsite(#loc25 at #loc23))
#loc33 = loc(callsite(#loc32 at #loc24))
