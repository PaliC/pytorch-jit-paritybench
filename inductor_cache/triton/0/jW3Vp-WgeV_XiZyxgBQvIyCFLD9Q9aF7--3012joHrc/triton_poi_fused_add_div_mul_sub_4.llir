; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_add_div_mul_sub_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %11 = shl i32 %10, 4, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = lshr i32 %12, 1, !dbg !12
  %14 = and i32 %13, 7, !dbg !12
  %15 = and i32 %12, 16, !dbg !12
  %16 = lshr exact i32 %15, 1, !dbg !12
  %17 = or disjoint i32 %14, %16, !dbg !12
  %18 = and i32 %12, 1, !dbg !12
  %19 = and i32 %12, 15, !dbg !12
  %20 = or disjoint i32 %17, %11, !dbg !13
  %21 = or disjoint i32 %11, %19, !dbg !13
  %22 = icmp slt i32 %20, 16, !dbg !14
  %23 = icmp slt i32 %21, 16, !dbg !14
  %24 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %25 = shl i32 %24, 1, !dbg !16
  %.lobit2 = lshr exact i32 %15, 4, !dbg !17
  %26 = or disjoint i32 %25, %18, !dbg !18
  %27 = or disjoint i32 %25, %.lobit2, !dbg !18
  %28 = icmp slt i32 %26, 4, !dbg !19
  %29 = icmp slt i32 %27, 4, !dbg !19
  %.frozen = freeze i32 %20, !dbg !20
  %30 = sdiv i32 %.frozen, 4, !dbg !20
  %31 = mul i32 %30, 4, !dbg !21
  %.decomposed = sub i32 %.frozen, %31, !dbg !21
  %.frozen4 = freeze i32 %21, !dbg !20
  %32 = sdiv i32 %.frozen4, 4, !dbg !20
  %33 = mul i32 %32, 4, !dbg !21
  %.decomposed5 = sub i32 %.frozen4, %33, !dbg !21
  %34 = shl i32 %20, 2, !dbg !22
  %35 = add i32 %26, %34, !dbg !23
  %36 = sext i32 %35 to i64, !dbg !24
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !24
  %38 = and i1 %22, %28, !dbg !25
  %39 = and i1 %23, %29, !dbg !25
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %38) #4, !dbg !26
  %41 = shl nuw nsw i32 %18, 4, !dbg !26
  %42 = or disjoint i32 %41, %14, !dbg !26
  %43 = or disjoint i32 %42, %16, !dbg !26
  %44 = and i32 %12, 31, !dbg !26
  %45 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %18, !dbg !26
  %46 = getelementptr inbounds float, ptr addrspace(3) %45, i32 %43, !dbg !26
  %47 = insertelement <1 x i32> poison, i32 %40, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %46, <1 x i32> %47, i1 true) #4, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %48 = lshr i32 %44, 4, !dbg !26
  %49 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %48, !dbg !26
  %50 = getelementptr inbounds float, ptr addrspace(3) %49, i32 %44, !dbg !26
  %51 = load float, ptr addrspace(3) %50, align 4, !dbg !26
  %52 = shl i32 %27, 2, !dbg !27
  %53 = add i32 %52, %.decomposed5, !dbg !28
  %54 = shl i32 %32, 4, !dbg !29
  %55 = add i32 %53, %54, !dbg !30
  %56 = sext i32 %55 to i64, !dbg !31
  %57 = getelementptr float, ptr addrspace(1) %1, i64 %56, !dbg !31
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 %39) #4, !dbg !32
  %59 = bitcast i32 %58 to float, !dbg !32
  %60 = shl nsw i32 %30, 2, !dbg !33
  %61 = add i32 %60, %26, !dbg !34
  %62 = sext i32 %61 to i64, !dbg !35
  %63 = getelementptr float, ptr addrspace(1) %2, i64 %62, !dbg !35
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 %38) #4, !dbg !36
  %65 = getelementptr float, ptr addrspace(1) %3, i64 %62, !dbg !37
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 %38) #4, !dbg !38
  %67 = bitcast i32 %66 to float, !dbg !38
  %68 = sext i32 %.decomposed to i64, !dbg !39
  %69 = getelementptr float, ptr addrspace(1) %4, i64 %68, !dbg !39
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 %22) #4, !dbg !40
  %71 = getelementptr float, ptr addrspace(1) %5, i64 %68, !dbg !41
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %71, i1 %22) #4, !dbg !42
  %73 = fadd float %51, %59, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %74 = shl i32 %12, 1, !dbg !43
  %75 = and i32 %74, 30, !dbg !43
  %76 = or disjoint i32 %75, %.lobit2, !dbg !43
  %77 = lshr exact i32 %75, 1, !dbg !43
  %78 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %77, !dbg !43
  %79 = getelementptr inbounds float, ptr addrspace(3) %78, i32 %76, !dbg !43
  %80 = bitcast float %73 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %79, <1 x i32> %80, i1 true) #4, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %81 = lshr i32 %44, 1, !dbg !43
  %82 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %81, !dbg !43
  %83 = getelementptr inbounds float, ptr addrspace(3) %82, i32 %44, !dbg !43
  %84 = load float, ptr addrspace(3) %83, align 4, !dbg !43
  %85 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !44
  %.not.i = icmp eq i32 %85, 0, !dbg !44
  %86 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !44
  %.not1.i = icmp eq i32 %86, 0, !dbg !44
  br i1 %.not.i, label %92, label %87, !dbg !44

87:                                               ; preds = %9
  br i1 %.not1.i, label %90, label %88, !dbg !44

88:                                               ; preds = %87
  %89 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %67) #4, !dbg !44
  br label %__nv_sqrtf.exit, !dbg !44

90:                                               ; preds = %87
  %91 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %67) #4, !dbg !44
  br label %__nv_sqrtf.exit, !dbg !44

92:                                               ; preds = %9
  br i1 %.not1.i, label %95, label %93, !dbg !44

93:                                               ; preds = %92
  %94 = tail call float @llvm.nvvm.sqrt.rn.f(float %67) #4, !dbg !44
  br label %__nv_sqrtf.exit, !dbg !44

95:                                               ; preds = %92
  %96 = tail call float @llvm.nvvm.sqrt.approx.f(float %67) #4, !dbg !44
  br label %__nv_sqrtf.exit, !dbg !44

__nv_sqrtf.exit:                                  ; preds = %88, %90, %93, %95
  %.0.i = phi float [ %89, %88 ], [ %91, %90 ], [ %94, %93 ], [ %96, %95 ], !dbg !44
  %97 = bitcast i32 %64 to float, !dbg !36
  %98 = fsub float %84, %97, !dbg !45
  %99 = bitcast i32 %72 to float, !dbg !42
  %100 = bitcast i32 %70 to float, !dbg !40
  %101 = fadd float %.0.i, 0x3F50624DE0000000, !dbg !46
  %102 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %98, float %101) #4, !dbg !47
  %103 = fmul float %102, %100, !dbg !48
  %104 = fadd float %103, %99, !dbg !49
  %105 = getelementptr float, ptr addrspace(1) %6, i64 %36, !dbg !50
  %106 = bitcast float %104 to i32, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %106, ptr addrspace(1) %105, i1 %38) #4, !dbg !51
  ret void, !dbg !52
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c3kq6gozgmwmypobrfllykaqlixsuqvfkxriogrhe66rtcj6ozyb.py", directory: "inductor_cache/3k")
!4 = !{ptr @triton_poi_fused_add_div_mul_sub_4, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_div_mul_sub_4, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_div_mul_sub_4", linkageName: "triton_poi_fused_add_div_mul_sub_4", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 31, column: 19, scope: !7)
!21 = !DILocation(line: 30, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 37, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 30, scope: !7)
!25 = !DILocation(line: 32, column: 50, scope: !7)
!26 = !DILocation(line: 32, column: 42, scope: !7)
!27 = !DILocation(line: 33, column: 37, scope: !7)
!28 = !DILocation(line: 33, column: 35, scope: !7)
!29 = !DILocation(line: 33, column: 45, scope: !7)
!30 = !DILocation(line: 33, column: 42, scope: !7)
!31 = !DILocation(line: 33, column: 30, scope: !7)
!32 = !DILocation(line: 33, column: 50, scope: !7)
!33 = !DILocation(line: 34, column: 37, scope: !7)
!34 = !DILocation(line: 34, column: 35, scope: !7)
!35 = !DILocation(line: 34, column: 30, scope: !7)
!36 = !DILocation(line: 34, column: 42, scope: !7)
!37 = !DILocation(line: 35, column: 30, scope: !7)
!38 = !DILocation(line: 35, column: 42, scope: !7)
!39 = !DILocation(line: 36, column: 31, scope: !7)
!40 = !DILocation(line: 36, column: 36, scope: !7)
!41 = !DILocation(line: 37, column: 31, scope: !7)
!42 = !DILocation(line: 37, column: 36, scope: !7)
!43 = !DILocation(line: 38, column: 18, scope: !7)
!44 = !DILocation(line: 40, column: 26, scope: !7)
!45 = !DILocation(line: 39, column: 18, scope: !7)
!46 = !DILocation(line: 42, column: 18, scope: !7)
!47 = !DILocation(line: 43, column: 18, scope: !7)
!48 = !DILocation(line: 44, column: 19, scope: !7)
!49 = !DILocation(line: 45, column: 20, scope: !7)
!50 = !DILocation(line: 46, column: 25, scope: !7)
!51 = !DILocation(line: 46, column: 44, scope: !7)
!52 = !DILocation(line: 46, column: 4, scope: !7)
