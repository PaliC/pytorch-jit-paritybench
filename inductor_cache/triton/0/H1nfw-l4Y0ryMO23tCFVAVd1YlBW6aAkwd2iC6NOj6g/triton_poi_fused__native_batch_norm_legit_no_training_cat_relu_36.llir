; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_36(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, i32 %13) local_unnamed_addr !dbg !7 {
  %15 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %16 = shl i32 %15, 10, !dbg !11
  %17 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %18 = shl i32 %17, 2, !dbg !12
  %19 = and i32 %18, 508, !dbg !12
  %20 = or disjoint i32 %16, %19, !dbg !13
  %21 = or disjoint i32 %20, 512, !dbg !13
  %22 = srem i32 %20, 1024, !dbg !14
  %23 = srem i32 %21, 1024, !dbg !14
  %.frozen = freeze i32 %20, !dbg !15
  %24 = sdiv i32 %.frozen, 184320, !dbg !15
  %.frozen91 = freeze i32 %21, !dbg !15
  %25 = sdiv i32 %.frozen91, 184320, !dbg !15
  %26 = mul i32 %24, 184320, !dbg !16
  %srem.decomposed = sub i32 %.frozen, %26, !dbg !16
  %27 = mul i32 %25, 184320, !dbg !16
  %srem1.decomposed = sub i32 %.frozen91, %27, !dbg !16
  %28 = mul nsw i32 %24, 110592, !dbg !17
  %29 = mul nsw i32 %25, 110592, !dbg !17
  %30 = add nsw i32 %28, %srem.decomposed, !dbg !18
  %31 = add nsw i32 %29, %srem1.decomposed, !dbg !18
  %32 = sext i32 %30 to i64, !dbg !19
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !19
  %34 = sext i32 %31 to i64, !dbg !19
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !19
  %36 = mul nsw i32 %24, 12288, !dbg !20
  %37 = mul nsw i32 %25, 12288, !dbg !20
  %38 = add nsw i32 %36, %22, !dbg !21
  %39 = add nsw i32 %38, -110592, !dbg !22
  %40 = add nsw i32 %37, %23, !dbg !21
  %41 = add nsw i32 %40, -110592, !dbg !22
  %42 = add nsw i32 %38, -122880, !dbg !23
  %43 = add nsw i32 %40, -122880, !dbg !23
  %44 = add nsw i32 %38, -135168, !dbg !24
  %45 = add nsw i32 %40, -135168, !dbg !24
  %46 = insertelement <2 x i32> poison, i32 %21, i64 0, !dbg !25
  %47 = insertelement <2 x i32> %46, i32 %20, i64 1, !dbg !25
  %48 = sdiv <2 x i32> %47, splat (i32 1024), !dbg !25
  %49 = srem <2 x i32> %48, splat (i32 180), !dbg !26
  %50 = extractelement <2 x i32> %49, i64 1, !dbg !27
  %51 = sext i32 %50 to i64, !dbg !27
  %52 = getelementptr float, ptr addrspace(1) %7, i64 %51, !dbg !27
  %53 = extractelement <2 x i32> %49, i64 0, !dbg !27
  %54 = sext i32 %53 to i64, !dbg !27
  %55 = getelementptr float, ptr addrspace(1) %7, i64 %54, !dbg !27
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 true) #3, !dbg !28
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 true) #3, !dbg !28
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 true) #3, !dbg !28
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 true) #3, !dbg !28
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 true) #3, !dbg !28
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 true) #3, !dbg !28
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 true) #3, !dbg !28
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 true) #3, !dbg !28
  %64 = getelementptr float, ptr addrspace(1) %8, i64 %51, !dbg !29
  %65 = getelementptr float, ptr addrspace(1) %8, i64 %54, !dbg !29
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 true) #3, !dbg !30
  %67 = bitcast i32 %66 to float, !dbg !30
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 true) #3, !dbg !30
  %69 = bitcast i32 %68 to float, !dbg !30
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 true) #3, !dbg !30
  %71 = bitcast i32 %70 to float, !dbg !30
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 true) #3, !dbg !30
  %73 = bitcast i32 %72 to float, !dbg !30
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 true) #3, !dbg !30
  %75 = bitcast i32 %74 to float, !dbg !30
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 true) #3, !dbg !30
  %77 = bitcast i32 %76 to float, !dbg !30
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 true) #3, !dbg !30
  %79 = bitcast i32 %78 to float, !dbg !30
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 true) #3, !dbg !30
  %81 = bitcast i32 %80 to float, !dbg !30
  %82 = getelementptr float, ptr addrspace(1) %9, i64 %51, !dbg !31
  %83 = getelementptr float, ptr addrspace(1) %9, i64 %54, !dbg !31
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 true) #3, !dbg !32
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 true) #3, !dbg !32
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 true) #3, !dbg !32
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 true) #3, !dbg !32
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %83, i1 true) #3, !dbg !32
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %83, i1 true) #3, !dbg !32
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %83, i1 true) #3, !dbg !32
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %83, i1 true) #3, !dbg !32
  %92 = getelementptr float, ptr addrspace(1) %10, i64 %51, !dbg !33
  %93 = getelementptr float, ptr addrspace(1) %10, i64 %54, !dbg !33
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 true) #3, !dbg !34
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 true) #3, !dbg !34
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 true) #3, !dbg !34
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 true) #3, !dbg !34
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 true) #3, !dbg !34
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 true) #3, !dbg !34
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 true) #3, !dbg !34
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %93, i1 true) #3, !dbg !34
  %102 = icmp slt <2 x i32> %49, splat (i32 108), !dbg !35
  %103 = extractelement <2 x i1> %102, i64 1, !dbg !36
  %104 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %33, i1 %103, i32 0, i1 %103, i32 0, i1 %103, i32 0, i1 %103, i32 0, i1 %103) #3, !dbg !36
  %105 = extractelement <2 x i1> %102, i64 0, !dbg !36
  %106 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %35, i1 %105, i32 0, i1 %105, i32 0, i1 %105, i32 0, i1 %105, i32 0, i1 %105) #3, !dbg !36
  %107 = add nsw <2 x i32> %49, splat (i32 -108), !dbg !37
  %108 = icmp ult <2 x i32> %107, splat (i32 12), !dbg !37
  %109 = shl nsw i32 %50, 10, !dbg !21
  %110 = shl nsw i32 %53, 10, !dbg !21
  %111 = add nsw i32 %39, %109, !dbg !38
  %112 = add nsw i32 %41, %110, !dbg !38
  %113 = sext i32 %111 to i64, !dbg !39
  %114 = getelementptr float, ptr addrspace(1) %1, i64 %113, !dbg !39
  %115 = sext i32 %112 to i64, !dbg !39
  %116 = getelementptr float, ptr addrspace(1) %1, i64 %115, !dbg !39
  %117 = extractelement <2 x i1> %108, i64 1, !dbg !40
  %118 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %114, i1 %117, i32 0, i1 %117, i32 0, i1 %117, i32 0, i1 %117, i32 0, i1 %117) #3, !dbg !40
  %119 = extractelement <2 x i1> %108, i64 0, !dbg !40
  %120 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %116, i1 %119, i32 0, i1 %119, i32 0, i1 %119, i32 0, i1 %119, i32 0, i1 %119) #3, !dbg !40
  %121 = add nsw <2 x i32> %49, splat (i32 -120), !dbg !41
  %122 = icmp ult <2 x i32> %121, splat (i32 12), !dbg !41
  %123 = add nsw i32 %42, %109, !dbg !42
  %124 = add nsw i32 %43, %110, !dbg !42
  %125 = sext i32 %123 to i64, !dbg !43
  %126 = getelementptr float, ptr addrspace(1) %2, i64 %125, !dbg !43
  %127 = sext i32 %124 to i64, !dbg !43
  %128 = getelementptr float, ptr addrspace(1) %2, i64 %127, !dbg !43
  %129 = extractelement <2 x i1> %122, i64 1, !dbg !44
  %130 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %126, i1 %129, i32 0, i1 %129, i32 0, i1 %129, i32 0, i1 %129, i32 0, i1 %129) #3, !dbg !44
  %131 = extractelement <2 x i1> %122, i64 0, !dbg !44
  %132 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %128, i1 %131, i32 0, i1 %131, i32 0, i1 %131, i32 0, i1 %131, i32 0, i1 %131) #3, !dbg !44
  %133 = add nsw <2 x i32> %49, splat (i32 -132), !dbg !45
  %134 = icmp ult <2 x i32> %133, splat (i32 12), !dbg !45
  %135 = add nsw i32 %44, %109, !dbg !46
  %136 = add nsw i32 %45, %110, !dbg !46
  %137 = sext i32 %135 to i64, !dbg !47
  %138 = getelementptr float, ptr addrspace(1) %3, i64 %137, !dbg !47
  %139 = sext i32 %136 to i64, !dbg !47
  %140 = getelementptr float, ptr addrspace(1) %3, i64 %139, !dbg !47
  %141 = extractelement <2 x i1> %134, i64 1, !dbg !48
  %142 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %138, i1 %141, i32 0, i1 %141, i32 0, i1 %141, i32 0, i1 %141, i32 0, i1 %141) #3, !dbg !48
  %143 = extractelement <2 x i1> %134, i64 0, !dbg !48
  %144 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %140, i1 %143, i32 0, i1 %143, i32 0, i1 %143, i32 0, i1 %143, i32 0, i1 %143) #3, !dbg !48
  %145 = add nsw <2 x i32> %49, splat (i32 -144), !dbg !49
  %146 = icmp ult <2 x i32> %145, splat (i32 12), !dbg !49
  %147 = add nsw i32 %38, -147456, !dbg !50
  %148 = add nsw i32 %147, %109, !dbg !51
  %149 = add nsw i32 %40, -147456, !dbg !50
  %150 = add nsw i32 %149, %110, !dbg !51
  %151 = sext i32 %148 to i64, !dbg !52
  %152 = getelementptr float, ptr addrspace(1) %4, i64 %151, !dbg !52
  %153 = sext i32 %150 to i64, !dbg !52
  %154 = getelementptr float, ptr addrspace(1) %4, i64 %153, !dbg !52
  %155 = extractelement <2 x i1> %146, i64 1, !dbg !53
  %156 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %152, i1 %155, i32 0, i1 %155, i32 0, i1 %155, i32 0, i1 %155, i32 0, i1 %155) #3, !dbg !53
  %157 = extractelement <2 x i1> %146, i64 0, !dbg !53
  %158 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %154, i1 %157, i32 0, i1 %157, i32 0, i1 %157, i32 0, i1 %157, i32 0, i1 %157) #3, !dbg !53
  %159 = add nsw i32 %50, -156, !dbg !54
  %160 = icmp ult i32 %159, 12, !dbg !54
  %161 = add nsw i32 %53, -156, !dbg !54
  %162 = icmp ult i32 %161, 12, !dbg !54
  %163 = add nsw i32 %38, -159744, !dbg !55
  %164 = add nsw i32 %163, %109, !dbg !56
  %165 = add nsw i32 %40, -159744, !dbg !55
  %166 = add nsw i32 %165, %110, !dbg !56
  %167 = sext i32 %164 to i64, !dbg !57
  %168 = getelementptr float, ptr addrspace(1) %5, i64 %167, !dbg !57
  %169 = sext i32 %166 to i64, !dbg !57
  %170 = getelementptr float, ptr addrspace(1) %5, i64 %169, !dbg !57
  %171 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %168, i1 %160, i32 0, i1 %160, i32 0, i1 %160, i32 0, i1 %160, i32 0, i1 %160) #3, !dbg !58
  %172 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %170, i1 %162, i32 0, i1 %162, i32 0, i1 %162, i32 0, i1 %162, i32 0, i1 %162) #3, !dbg !58
  %173 = icmp sgt i32 %50, 167, !dbg !59
  %174 = icmp sgt i32 %53, 167, !dbg !59
  %175 = add nsw i32 %38, -172032, !dbg !60
  %176 = add nsw i32 %175, %109, !dbg !61
  %177 = add nsw i32 %40, -172032, !dbg !60
  %178 = add nsw i32 %177, %110, !dbg !61
  %179 = sext i32 %176 to i64, !dbg !62
  %180 = getelementptr float, ptr addrspace(1) %6, i64 %179, !dbg !62
  %181 = sext i32 %178 to i64, !dbg !62
  %182 = getelementptr float, ptr addrspace(1) %6, i64 %181, !dbg !62
  %183 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %180, i1 %173, i32 0, i1 %173, i32 0, i1 %173, i32 0, i1 %173, i32 0, i1 %173) #3, !dbg !63
  %184 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %182, i1 %174, i32 0, i1 %174, i32 0, i1 %174, i32 0, i1 %174, i32 0, i1 %174) #3, !dbg !63
  %185 = fadd float %67, 0x3EE4F8B580000000, !dbg !64
  %186 = fadd float %69, 0x3EE4F8B580000000, !dbg !64
  %187 = fadd float %71, 0x3EE4F8B580000000, !dbg !64
  %188 = fadd float %73, 0x3EE4F8B580000000, !dbg !64
  %189 = fadd float %75, 0x3EE4F8B580000000, !dbg !64
  %190 = fadd float %77, 0x3EE4F8B580000000, !dbg !64
  %191 = fadd float %79, 0x3EE4F8B580000000, !dbg !64
  %192 = fadd float %81, 0x3EE4F8B580000000, !dbg !64
  %193 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !65
  %.not.i = icmp eq i32 %193, 0, !dbg !65
  %194 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !65
  %.not1.i = icmp eq i32 %194, 0, !dbg !65
  br i1 %.not.i, label %200, label %195, !dbg !65

195:                                              ; preds = %14
  br i1 %.not1.i, label %198, label %196, !dbg !65

196:                                              ; preds = %195
  %197 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %185) #3, !dbg !65
  br label %__nv_sqrtf.exit, !dbg !65

198:                                              ; preds = %195
  %199 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %185) #3, !dbg !65
  br label %__nv_sqrtf.exit, !dbg !65

200:                                              ; preds = %14
  br i1 %.not1.i, label %203, label %201, !dbg !65

201:                                              ; preds = %200
  %202 = tail call float @llvm.nvvm.sqrt.rn.f(float %185) #3, !dbg !65
  br label %__nv_sqrtf.exit, !dbg !65

203:                                              ; preds = %200
  %204 = tail call float @llvm.nvvm.sqrt.approx.f(float %185) #3, !dbg !65
  br label %__nv_sqrtf.exit, !dbg !65

__nv_sqrtf.exit:                                  ; preds = %196, %198, %201, %203
  %.0.i = phi float [ %197, %196 ], [ %199, %198 ], [ %202, %201 ], [ %204, %203 ], !dbg !65
  %205 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !65
  %.not.i49 = icmp eq i32 %205, 0, !dbg !65
  %206 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !65
  %.not1.i52 = icmp eq i32 %206, 0, !dbg !65
  br i1 %.not.i49, label %212, label %207, !dbg !65

207:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i52, label %210, label %208, !dbg !65

208:                                              ; preds = %207
  %209 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %186) #3, !dbg !65
  br label %__nv_sqrtf.exit53, !dbg !65

210:                                              ; preds = %207
  %211 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %186) #3, !dbg !65
  br label %__nv_sqrtf.exit53, !dbg !65

212:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i52, label %215, label %213, !dbg !65

213:                                              ; preds = %212
  %214 = tail call float @llvm.nvvm.sqrt.rn.f(float %186) #3, !dbg !65
  br label %__nv_sqrtf.exit53, !dbg !65

215:                                              ; preds = %212
  %216 = tail call float @llvm.nvvm.sqrt.approx.f(float %186) #3, !dbg !65
  br label %__nv_sqrtf.exit53, !dbg !65

__nv_sqrtf.exit53:                                ; preds = %208, %210, %213, %215
  %.0.i51 = phi float [ %209, %208 ], [ %211, %210 ], [ %214, %213 ], [ %216, %215 ], !dbg !65
  %217 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !65
  %.not.i54 = icmp eq i32 %217, 0, !dbg !65
  %218 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !65
  %.not1.i57 = icmp eq i32 %218, 0, !dbg !65
  br i1 %.not.i54, label %224, label %219, !dbg !65

219:                                              ; preds = %__nv_sqrtf.exit53
  br i1 %.not1.i57, label %222, label %220, !dbg !65

220:                                              ; preds = %219
  %221 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %187) #3, !dbg !65
  br label %__nv_sqrtf.exit58, !dbg !65

222:                                              ; preds = %219
  %223 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %187) #3, !dbg !65
  br label %__nv_sqrtf.exit58, !dbg !65

224:                                              ; preds = %__nv_sqrtf.exit53
  br i1 %.not1.i57, label %227, label %225, !dbg !65

225:                                              ; preds = %224
  %226 = tail call float @llvm.nvvm.sqrt.rn.f(float %187) #3, !dbg !65
  br label %__nv_sqrtf.exit58, !dbg !65

227:                                              ; preds = %224
  %228 = tail call float @llvm.nvvm.sqrt.approx.f(float %187) #3, !dbg !65
  br label %__nv_sqrtf.exit58, !dbg !65

__nv_sqrtf.exit58:                                ; preds = %220, %222, %225, %227
  %.0.i56 = phi float [ %221, %220 ], [ %223, %222 ], [ %226, %225 ], [ %228, %227 ], !dbg !65
  %229 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !65
  %.not.i59 = icmp eq i32 %229, 0, !dbg !65
  %230 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !65
  %.not1.i62 = icmp eq i32 %230, 0, !dbg !65
  br i1 %.not.i59, label %236, label %231, !dbg !65

231:                                              ; preds = %__nv_sqrtf.exit58
  br i1 %.not1.i62, label %234, label %232, !dbg !65

232:                                              ; preds = %231
  %233 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %188) #3, !dbg !65
  br label %__nv_sqrtf.exit63, !dbg !65

234:                                              ; preds = %231
  %235 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %188) #3, !dbg !65
  br label %__nv_sqrtf.exit63, !dbg !65

236:                                              ; preds = %__nv_sqrtf.exit58
  br i1 %.not1.i62, label %239, label %237, !dbg !65

237:                                              ; preds = %236
  %238 = tail call float @llvm.nvvm.sqrt.rn.f(float %188) #3, !dbg !65
  br label %__nv_sqrtf.exit63, !dbg !65

239:                                              ; preds = %236
  %240 = tail call float @llvm.nvvm.sqrt.approx.f(float %188) #3, !dbg !65
  br label %__nv_sqrtf.exit63, !dbg !65

__nv_sqrtf.exit63:                                ; preds = %232, %234, %237, %239
  %.0.i61 = phi float [ %233, %232 ], [ %235, %234 ], [ %238, %237 ], [ %240, %239 ], !dbg !65
  %241 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !65
  %.not.i64 = icmp eq i32 %241, 0, !dbg !65
  %242 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !65
  %.not1.i67 = icmp eq i32 %242, 0, !dbg !65
  br i1 %.not.i64, label %248, label %243, !dbg !65

243:                                              ; preds = %__nv_sqrtf.exit63
  br i1 %.not1.i67, label %246, label %244, !dbg !65

244:                                              ; preds = %243
  %245 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %189) #3, !dbg !65
  br label %__nv_sqrtf.exit68, !dbg !65

246:                                              ; preds = %243
  %247 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %189) #3, !dbg !65
  br label %__nv_sqrtf.exit68, !dbg !65

248:                                              ; preds = %__nv_sqrtf.exit63
  br i1 %.not1.i67, label %251, label %249, !dbg !65

249:                                              ; preds = %248
  %250 = tail call float @llvm.nvvm.sqrt.rn.f(float %189) #3, !dbg !65
  br label %__nv_sqrtf.exit68, !dbg !65

251:                                              ; preds = %248
  %252 = tail call float @llvm.nvvm.sqrt.approx.f(float %189) #3, !dbg !65
  br label %__nv_sqrtf.exit68, !dbg !65

__nv_sqrtf.exit68:                                ; preds = %244, %246, %249, %251
  %.0.i66 = phi float [ %245, %244 ], [ %247, %246 ], [ %250, %249 ], [ %252, %251 ], !dbg !65
  %253 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !65
  %.not.i69 = icmp eq i32 %253, 0, !dbg !65
  %254 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !65
  %.not1.i72 = icmp eq i32 %254, 0, !dbg !65
  br i1 %.not.i69, label %260, label %255, !dbg !65

255:                                              ; preds = %__nv_sqrtf.exit68
  br i1 %.not1.i72, label %258, label %256, !dbg !65

256:                                              ; preds = %255
  %257 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %190) #3, !dbg !65
  br label %__nv_sqrtf.exit73, !dbg !65

258:                                              ; preds = %255
  %259 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %190) #3, !dbg !65
  br label %__nv_sqrtf.exit73, !dbg !65

260:                                              ; preds = %__nv_sqrtf.exit68
  br i1 %.not1.i72, label %263, label %261, !dbg !65

261:                                              ; preds = %260
  %262 = tail call float @llvm.nvvm.sqrt.rn.f(float %190) #3, !dbg !65
  br label %__nv_sqrtf.exit73, !dbg !65

263:                                              ; preds = %260
  %264 = tail call float @llvm.nvvm.sqrt.approx.f(float %190) #3, !dbg !65
  br label %__nv_sqrtf.exit73, !dbg !65

__nv_sqrtf.exit73:                                ; preds = %256, %258, %261, %263
  %.0.i71 = phi float [ %257, %256 ], [ %259, %258 ], [ %262, %261 ], [ %264, %263 ], !dbg !65
  %265 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !65
  %.not.i74 = icmp eq i32 %265, 0, !dbg !65
  %266 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !65
  %.not1.i77 = icmp eq i32 %266, 0, !dbg !65
  br i1 %.not.i74, label %272, label %267, !dbg !65

267:                                              ; preds = %__nv_sqrtf.exit73
  br i1 %.not1.i77, label %270, label %268, !dbg !65

268:                                              ; preds = %267
  %269 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %191) #3, !dbg !65
  br label %__nv_sqrtf.exit78, !dbg !65

270:                                              ; preds = %267
  %271 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %191) #3, !dbg !65
  br label %__nv_sqrtf.exit78, !dbg !65

272:                                              ; preds = %__nv_sqrtf.exit73
  br i1 %.not1.i77, label %275, label %273, !dbg !65

273:                                              ; preds = %272
  %274 = tail call float @llvm.nvvm.sqrt.rn.f(float %191) #3, !dbg !65
  br label %__nv_sqrtf.exit78, !dbg !65

275:                                              ; preds = %272
  %276 = tail call float @llvm.nvvm.sqrt.approx.f(float %191) #3, !dbg !65
  br label %__nv_sqrtf.exit78, !dbg !65

__nv_sqrtf.exit78:                                ; preds = %268, %270, %273, %275
  %.0.i76 = phi float [ %269, %268 ], [ %271, %270 ], [ %274, %273 ], [ %276, %275 ], !dbg !65
  %277 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !65
  %.not.i79 = icmp eq i32 %277, 0, !dbg !65
  %278 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !65
  %.not1.i82 = icmp eq i32 %278, 0, !dbg !65
  br i1 %.not.i79, label %284, label %279, !dbg !65

279:                                              ; preds = %__nv_sqrtf.exit78
  br i1 %.not1.i82, label %282, label %280, !dbg !65

280:                                              ; preds = %279
  %281 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %192) #3, !dbg !65
  br label %__nv_sqrtf.exit83, !dbg !65

282:                                              ; preds = %279
  %283 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %192) #3, !dbg !65
  br label %__nv_sqrtf.exit83, !dbg !65

284:                                              ; preds = %__nv_sqrtf.exit78
  br i1 %.not1.i82, label %287, label %285, !dbg !65

285:                                              ; preds = %284
  %286 = tail call float @llvm.nvvm.sqrt.rn.f(float %192) #3, !dbg !65
  br label %__nv_sqrtf.exit83, !dbg !65

287:                                              ; preds = %284
  %288 = tail call float @llvm.nvvm.sqrt.approx.f(float %192) #3, !dbg !65
  br label %__nv_sqrtf.exit83, !dbg !65

__nv_sqrtf.exit83:                                ; preds = %280, %282, %285, %287
  %.0.i81 = phi float [ %281, %280 ], [ %283, %282 ], [ %286, %285 ], [ %288, %287 ], !dbg !65
  %289 = shufflevector <2 x i1> %146, <2 x i1> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !49
  %290 = shufflevector <2 x i1> %134, <2 x i1> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !45
  %291 = shufflevector <2 x i1> %122, <2 x i1> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !41
  %292 = shufflevector <2 x i1> %108, <2 x i1> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !37
  %293 = shufflevector <2 x i1> %102, <2 x i1> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !35
  %294 = extractvalue { i32, i32, i32, i32 } %106, 3, !dbg !36
  %295 = extractvalue { i32, i32, i32, i32 } %120, 3, !dbg !40
  %296 = extractvalue { i32, i32, i32, i32 } %132, 3, !dbg !44
  %297 = extractvalue { i32, i32, i32, i32 } %144, 3, !dbg !48
  %298 = extractvalue { i32, i32, i32, i32 } %158, 3, !dbg !53
  %299 = extractvalue { i32, i32, i32, i32 } %172, 3, !dbg !58
  %300 = extractvalue { i32, i32, i32, i32 } %184, 3, !dbg !63
  %301 = insertelement <8 x i32> poison, i32 %63, i64 0, !dbg !28
  %302 = insertelement <8 x i32> %301, i32 %62, i64 1, !dbg !28
  %303 = insertelement <8 x i32> %302, i32 %61, i64 2, !dbg !28
  %304 = insertelement <8 x i32> %303, i32 %60, i64 3, !dbg !28
  %305 = insertelement <8 x i32> %304, i32 %59, i64 4, !dbg !28
  %306 = insertelement <8 x i32> %305, i32 %58, i64 5, !dbg !28
  %307 = insertelement <8 x i32> %306, i32 %57, i64 6, !dbg !28
  %308 = insertelement <8 x i32> %307, i32 %56, i64 7, !dbg !28
  %309 = bitcast <8 x i32> %308 to <8 x float>, !dbg !28
  %310 = extractvalue { i32, i32, i32, i32 } %106, 2, !dbg !36
  %311 = extractvalue { i32, i32, i32, i32 } %120, 2, !dbg !40
  %312 = extractvalue { i32, i32, i32, i32 } %132, 2, !dbg !44
  %313 = extractvalue { i32, i32, i32, i32 } %144, 2, !dbg !48
  %314 = extractvalue { i32, i32, i32, i32 } %158, 2, !dbg !53
  %315 = extractvalue { i32, i32, i32, i32 } %172, 2, !dbg !58
  %316 = extractvalue { i32, i32, i32, i32 } %184, 2, !dbg !63
  %317 = extractvalue { i32, i32, i32, i32 } %106, 1, !dbg !36
  %318 = extractvalue { i32, i32, i32, i32 } %120, 1, !dbg !40
  %319 = extractvalue { i32, i32, i32, i32 } %132, 1, !dbg !44
  %320 = extractvalue { i32, i32, i32, i32 } %144, 1, !dbg !48
  %321 = extractvalue { i32, i32, i32, i32 } %158, 1, !dbg !53
  %322 = extractvalue { i32, i32, i32, i32 } %172, 1, !dbg !58
  %323 = extractvalue { i32, i32, i32, i32 } %184, 1, !dbg !63
  %324 = extractvalue { i32, i32, i32, i32 } %106, 0, !dbg !36
  %325 = extractvalue { i32, i32, i32, i32 } %120, 0, !dbg !40
  %326 = extractvalue { i32, i32, i32, i32 } %132, 0, !dbg !44
  %327 = extractvalue { i32, i32, i32, i32 } %144, 0, !dbg !48
  %328 = extractvalue { i32, i32, i32, i32 } %158, 0, !dbg !53
  %329 = extractvalue { i32, i32, i32, i32 } %172, 0, !dbg !58
  %330 = extractvalue { i32, i32, i32, i32 } %184, 0, !dbg !63
  %331 = extractvalue { i32, i32, i32, i32 } %104, 3, !dbg !36
  %332 = extractvalue { i32, i32, i32, i32 } %118, 3, !dbg !40
  %333 = extractvalue { i32, i32, i32, i32 } %130, 3, !dbg !44
  %334 = extractvalue { i32, i32, i32, i32 } %142, 3, !dbg !48
  %335 = extractvalue { i32, i32, i32, i32 } %156, 3, !dbg !53
  %336 = extractvalue { i32, i32, i32, i32 } %171, 3, !dbg !58
  %337 = extractvalue { i32, i32, i32, i32 } %183, 3, !dbg !63
  %338 = extractvalue { i32, i32, i32, i32 } %104, 2, !dbg !36
  %339 = extractvalue { i32, i32, i32, i32 } %118, 2, !dbg !40
  %340 = extractvalue { i32, i32, i32, i32 } %130, 2, !dbg !44
  %341 = extractvalue { i32, i32, i32, i32 } %142, 2, !dbg !48
  %342 = extractvalue { i32, i32, i32, i32 } %156, 2, !dbg !53
  %343 = extractvalue { i32, i32, i32, i32 } %171, 2, !dbg !58
  %344 = extractvalue { i32, i32, i32, i32 } %183, 2, !dbg !63
  %345 = extractvalue { i32, i32, i32, i32 } %104, 1, !dbg !36
  %346 = extractvalue { i32, i32, i32, i32 } %118, 1, !dbg !40
  %347 = extractvalue { i32, i32, i32, i32 } %130, 1, !dbg !44
  %348 = extractvalue { i32, i32, i32, i32 } %142, 1, !dbg !48
  %349 = extractvalue { i32, i32, i32, i32 } %156, 1, !dbg !53
  %350 = extractvalue { i32, i32, i32, i32 } %171, 1, !dbg !58
  %351 = extractvalue { i32, i32, i32, i32 } %183, 1, !dbg !63
  %352 = extractvalue { i32, i32, i32, i32 } %104, 0, !dbg !36
  %353 = extractvalue { i32, i32, i32, i32 } %118, 0, !dbg !40
  %354 = extractvalue { i32, i32, i32, i32 } %130, 0, !dbg !44
  %355 = extractvalue { i32, i32, i32, i32 } %142, 0, !dbg !48
  %356 = extractvalue { i32, i32, i32, i32 } %156, 0, !dbg !53
  %357 = extractvalue { i32, i32, i32, i32 } %171, 0, !dbg !58
  %358 = extractvalue { i32, i32, i32, i32 } %183, 0, !dbg !63
  %359 = insertelement <8 x i32> poison, i32 %101, i64 0, !dbg !34
  %360 = insertelement <8 x i32> %359, i32 %100, i64 1, !dbg !34
  %361 = insertelement <8 x i32> %360, i32 %99, i64 2, !dbg !34
  %362 = insertelement <8 x i32> %361, i32 %98, i64 3, !dbg !34
  %363 = insertelement <8 x i32> %362, i32 %97, i64 4, !dbg !34
  %364 = insertelement <8 x i32> %363, i32 %96, i64 5, !dbg !34
  %365 = insertelement <8 x i32> %364, i32 %95, i64 6, !dbg !34
  %366 = insertelement <8 x i32> %365, i32 %94, i64 7, !dbg !34
  %367 = bitcast <8 x i32> %366 to <8 x float>, !dbg !34
  %368 = insertelement <8 x i32> poison, i32 %91, i64 0, !dbg !32
  %369 = insertelement <8 x i32> %368, i32 %90, i64 1, !dbg !32
  %370 = insertelement <8 x i32> %369, i32 %89, i64 2, !dbg !32
  %371 = insertelement <8 x i32> %370, i32 %88, i64 3, !dbg !32
  %372 = insertelement <8 x i32> %371, i32 %87, i64 4, !dbg !32
  %373 = insertelement <8 x i32> %372, i32 %86, i64 5, !dbg !32
  %374 = insertelement <8 x i32> %373, i32 %85, i64 6, !dbg !32
  %375 = insertelement <8 x i32> %374, i32 %84, i64 7, !dbg !32
  %376 = bitcast <8 x i32> %375 to <8 x float>, !dbg !32
  %377 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !66
  %378 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i51) #3, !dbg !66
  %379 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i56) #3, !dbg !66
  %380 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i61) #3, !dbg !66
  %381 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i66) #3, !dbg !66
  %382 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i71) #3, !dbg !66
  %383 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i76) #3, !dbg !66
  %384 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i81) #3, !dbg !66
  %385 = insertelement <8 x i1> poison, i1 %162, i64 0, !dbg !67
  %386 = insertelement <8 x i1> %385, i1 %160, i64 1, !dbg !67
  %387 = shufflevector <8 x i1> %386, <8 x i1> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !67
  %388 = insertelement <8 x i32> poison, i32 %299, i64 0, !dbg !67
  %389 = insertelement <8 x i32> %388, i32 %315, i64 1, !dbg !67
  %390 = insertelement <8 x i32> %389, i32 %322, i64 2, !dbg !67
  %391 = insertelement <8 x i32> %390, i32 %329, i64 3, !dbg !67
  %392 = insertelement <8 x i32> %391, i32 %336, i64 4, !dbg !67
  %393 = insertelement <8 x i32> %392, i32 %343, i64 5, !dbg !67
  %394 = insertelement <8 x i32> %393, i32 %350, i64 6, !dbg !67
  %395 = insertelement <8 x i32> %394, i32 %357, i64 7, !dbg !67
  %396 = insertelement <8 x i32> poison, i32 %300, i64 0, !dbg !67
  %397 = insertelement <8 x i32> %396, i32 %316, i64 1, !dbg !67
  %398 = insertelement <8 x i32> %397, i32 %323, i64 2, !dbg !67
  %399 = insertelement <8 x i32> %398, i32 %330, i64 3, !dbg !67
  %400 = insertelement <8 x i32> %399, i32 %337, i64 4, !dbg !67
  %401 = insertelement <8 x i32> %400, i32 %344, i64 5, !dbg !67
  %402 = insertelement <8 x i32> %401, i32 %351, i64 6, !dbg !67
  %403 = insertelement <8 x i32> %402, i32 %358, i64 7, !dbg !67
  %404 = select <8 x i1> %387, <8 x i32> %395, <8 x i32> %403, !dbg !67
  %405 = insertelement <8 x i32> poison, i32 %298, i64 0, !dbg !68
  %406 = insertelement <8 x i32> %405, i32 %314, i64 1, !dbg !68
  %407 = insertelement <8 x i32> %406, i32 %321, i64 2, !dbg !68
  %408 = insertelement <8 x i32> %407, i32 %328, i64 3, !dbg !68
  %409 = insertelement <8 x i32> %408, i32 %335, i64 4, !dbg !68
  %410 = insertelement <8 x i32> %409, i32 %342, i64 5, !dbg !68
  %411 = insertelement <8 x i32> %410, i32 %349, i64 6, !dbg !68
  %412 = insertelement <8 x i32> %411, i32 %356, i64 7, !dbg !68
  %413 = select <8 x i1> %289, <8 x i32> %412, <8 x i32> %404, !dbg !68
  %414 = insertelement <8 x i32> poison, i32 %297, i64 0, !dbg !69
  %415 = insertelement <8 x i32> %414, i32 %313, i64 1, !dbg !69
  %416 = insertelement <8 x i32> %415, i32 %320, i64 2, !dbg !69
  %417 = insertelement <8 x i32> %416, i32 %327, i64 3, !dbg !69
  %418 = insertelement <8 x i32> %417, i32 %334, i64 4, !dbg !69
  %419 = insertelement <8 x i32> %418, i32 %341, i64 5, !dbg !69
  %420 = insertelement <8 x i32> %419, i32 %348, i64 6, !dbg !69
  %421 = insertelement <8 x i32> %420, i32 %355, i64 7, !dbg !69
  %422 = select <8 x i1> %290, <8 x i32> %421, <8 x i32> %413, !dbg !69
  %423 = insertelement <8 x i32> poison, i32 %296, i64 0, !dbg !70
  %424 = insertelement <8 x i32> %423, i32 %312, i64 1, !dbg !70
  %425 = insertelement <8 x i32> %424, i32 %319, i64 2, !dbg !70
  %426 = insertelement <8 x i32> %425, i32 %326, i64 3, !dbg !70
  %427 = insertelement <8 x i32> %426, i32 %333, i64 4, !dbg !70
  %428 = insertelement <8 x i32> %427, i32 %340, i64 5, !dbg !70
  %429 = insertelement <8 x i32> %428, i32 %347, i64 6, !dbg !70
  %430 = insertelement <8 x i32> %429, i32 %354, i64 7, !dbg !70
  %431 = select <8 x i1> %291, <8 x i32> %430, <8 x i32> %422, !dbg !70
  %432 = insertelement <8 x i32> poison, i32 %295, i64 0, !dbg !71
  %433 = insertelement <8 x i32> %432, i32 %311, i64 1, !dbg !71
  %434 = insertelement <8 x i32> %433, i32 %318, i64 2, !dbg !71
  %435 = insertelement <8 x i32> %434, i32 %325, i64 3, !dbg !71
  %436 = insertelement <8 x i32> %435, i32 %332, i64 4, !dbg !71
  %437 = insertelement <8 x i32> %436, i32 %339, i64 5, !dbg !71
  %438 = insertelement <8 x i32> %437, i32 %346, i64 6, !dbg !71
  %439 = insertelement <8 x i32> %438, i32 %353, i64 7, !dbg !71
  %440 = select <8 x i1> %292, <8 x i32> %439, <8 x i32> %431, !dbg !71
  %441 = insertelement <8 x i32> poison, i32 %294, i64 0, !dbg !72
  %442 = insertelement <8 x i32> %441, i32 %310, i64 1, !dbg !72
  %443 = insertelement <8 x i32> %442, i32 %317, i64 2, !dbg !72
  %444 = insertelement <8 x i32> %443, i32 %324, i64 3, !dbg !72
  %445 = insertelement <8 x i32> %444, i32 %331, i64 4, !dbg !72
  %446 = insertelement <8 x i32> %445, i32 %338, i64 5, !dbg !72
  %447 = insertelement <8 x i32> %446, i32 %345, i64 6, !dbg !72
  %448 = insertelement <8 x i32> %447, i32 %352, i64 7, !dbg !72
  %449 = select <8 x i1> %293, <8 x i32> %448, <8 x i32> %440, !dbg !72
  %450 = bitcast <8 x i32> %449 to <8 x float>, !dbg !72
  %451 = fsub <8 x float> %450, %309, !dbg !73
  %452 = insertelement <8 x float> poison, float %384, i64 0, !dbg !74
  %453 = insertelement <8 x float> %452, float %383, i64 1, !dbg !74
  %454 = insertelement <8 x float> %453, float %382, i64 2, !dbg !74
  %455 = insertelement <8 x float> %454, float %381, i64 3, !dbg !74
  %456 = insertelement <8 x float> %455, float %380, i64 4, !dbg !74
  %457 = insertelement <8 x float> %456, float %379, i64 5, !dbg !74
  %458 = insertelement <8 x float> %457, float %378, i64 6, !dbg !74
  %459 = insertelement <8 x float> %458, float %377, i64 7, !dbg !74
  %460 = fmul <8 x float> %451, %459, !dbg !74
  %461 = fmul <8 x float> %460, %376, !dbg !75
  %462 = fadd <8 x float> %461, %367, !dbg !76
  %463 = fcmp olt <8 x float> %462, zeroinitializer, !dbg !77
  %464 = extractelement <8 x i1> %463, i64 7, !dbg !81
  %465 = extractelement <8 x i1> %463, i64 6, !dbg !81
  %466 = extractelement <8 x i1> %463, i64 5, !dbg !81
  %467 = extractelement <8 x i1> %463, i64 4, !dbg !81
  %468 = extractelement <8 x i1> %463, i64 3, !dbg !81
  %469 = extractelement <8 x i1> %463, i64 2, !dbg !81
  %470 = extractelement <8 x i1> %463, i64 1, !dbg !81
  %471 = extractelement <8 x i1> %463, i64 0, !dbg !81
  %472 = sext i32 %20 to i64, !dbg !82
  %473 = getelementptr float, ptr addrspace(1) %11, i64 %472, !dbg !82
  %474 = sext i32 %21 to i64, !dbg !82
  %475 = getelementptr float, ptr addrspace(1) %11, i64 %474, !dbg !82
  %476 = extractelement <8 x i32> %449, i64 4, !dbg !83
  %477 = extractelement <8 x i32> %449, i64 5, !dbg !83
  %478 = extractelement <8 x i32> %449, i64 6, !dbg !83
  %479 = extractelement <8 x i32> %449, i64 7, !dbg !83
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %479, i32 %478, i32 %477, i32 %476, ptr addrspace(1) %473, i1 true) #3, !dbg !83
  %480 = extractelement <8 x i32> %449, i64 0, !dbg !83
  %481 = extractelement <8 x i32> %449, i64 1, !dbg !83
  %482 = extractelement <8 x i32> %449, i64 2, !dbg !83
  %483 = extractelement <8 x i32> %449, i64 3, !dbg !83
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %483, i32 %482, i32 %481, i32 %480, ptr addrspace(1) %475, i1 true) #3, !dbg !83
  %484 = getelementptr float, ptr addrspace(1) %12, i64 %472, !dbg !84
  %485 = getelementptr float, ptr addrspace(1) %12, i64 %474, !dbg !84
  %bc = bitcast <8 x float> %462 to <8 x i32>, !dbg !85
  %486 = extractelement <8 x i32> %bc, i64 7, !dbg !85
  %487 = select i1 %464, i32 0, i32 %486, !dbg !81
  %bc84 = bitcast <8 x float> %462 to <8 x i32>, !dbg !85
  %488 = extractelement <8 x i32> %bc84, i64 6, !dbg !85
  %489 = select i1 %465, i32 0, i32 %488, !dbg !81
  %bc85 = bitcast <8 x float> %462 to <8 x i32>, !dbg !85
  %490 = extractelement <8 x i32> %bc85, i64 5, !dbg !85
  %491 = select i1 %466, i32 0, i32 %490, !dbg !81
  %bc86 = bitcast <8 x float> %462 to <8 x i32>, !dbg !85
  %492 = extractelement <8 x i32> %bc86, i64 4, !dbg !85
  %493 = select i1 %467, i32 0, i32 %492, !dbg !81
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %487, i32 %489, i32 %491, i32 %493, ptr addrspace(1) %484, i1 true) #3, !dbg !85
  %bc87 = bitcast <8 x float> %462 to <8 x i32>, !dbg !85
  %494 = extractelement <8 x i32> %bc87, i64 3, !dbg !85
  %495 = select i1 %468, i32 0, i32 %494, !dbg !81
  %bc88 = bitcast <8 x float> %462 to <8 x i32>, !dbg !85
  %496 = extractelement <8 x i32> %bc88, i64 2, !dbg !85
  %497 = select i1 %469, i32 0, i32 %496, !dbg !81
  %bc89 = bitcast <8 x float> %462 to <8 x i32>, !dbg !85
  %498 = extractelement <8 x i32> %bc89, i64 1, !dbg !85
  %499 = select i1 %470, i32 0, i32 %498, !dbg !81
  %bc90 = bitcast <8 x float> %462 to <8 x i32>, !dbg !85
  %500 = extractelement <8 x i32> %bc90, i64 0, !dbg !85
  %501 = select i1 %471, i32 0, i32 %500, !dbg !81
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %495, i32 %497, i32 %499, i32 %501, ptr addrspace(1) %485, i1 true) #3, !dbg !85
  ret void, !dbg !86
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c747mtuteayi3wmn2mr25ufwwjrvindfbkhybck3gd5ri3ehii7w.py", directory: "inductor_cache/74")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_36, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_36, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_36", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_36", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 19, scope: !7)
!16 = !DILocation(line: 37, column: 35, scope: !7)
!17 = !DILocation(line: 37, column: 54, scope: !7)
!18 = !DILocation(line: 37, column: 47, scope: !7)
!19 = !DILocation(line: 37, column: 30, scope: !7)
!20 = !DILocation(line: 42, column: 63, scope: !7)
!21 = !DILocation(line: 42, column: 42, scope: !7)
!22 = !DILocation(line: 42, column: 36, scope: !7)
!23 = !DILocation(line: 47, column: 36, scope: !7)
!24 = !DILocation(line: 52, column: 36, scope: !7)
!25 = !DILocation(line: 24, column: 21, scope: !7)
!26 = !DILocation(line: 24, column: 29, scope: !7)
!27 = !DILocation(line: 28, column: 31, scope: !7)
!28 = !DILocation(line: 28, column: 36, scope: !7)
!29 = !DILocation(line: 29, column: 31, scope: !7)
!30 = !DILocation(line: 29, column: 36, scope: !7)
!31 = !DILocation(line: 30, column: 31, scope: !7)
!32 = !DILocation(line: 30, column: 36, scope: !7)
!33 = !DILocation(line: 31, column: 32, scope: !7)
!34 = !DILocation(line: 31, column: 37, scope: !7)
!35 = !DILocation(line: 36, column: 18, scope: !7)
!36 = !DILocation(line: 37, column: 59, scope: !7)
!37 = !DILocation(line: 41, column: 18, scope: !7)
!38 = !DILocation(line: 42, column: 57, scope: !7)
!39 = !DILocation(line: 42, column: 31, scope: !7)
!40 = !DILocation(line: 42, column: 68, scope: !7)
!41 = !DILocation(line: 46, column: 20, scope: !7)
!42 = !DILocation(line: 47, column: 57, scope: !7)
!43 = !DILocation(line: 47, column: 31, scope: !7)
!44 = !DILocation(line: 47, column: 68, scope: !7)
!45 = !DILocation(line: 51, column: 20, scope: !7)
!46 = !DILocation(line: 52, column: 57, scope: !7)
!47 = !DILocation(line: 52, column: 31, scope: !7)
!48 = !DILocation(line: 52, column: 68, scope: !7)
!49 = !DILocation(line: 56, column: 20, scope: !7)
!50 = !DILocation(line: 57, column: 36, scope: !7)
!51 = !DILocation(line: 57, column: 57, scope: !7)
!52 = !DILocation(line: 57, column: 31, scope: !7)
!53 = !DILocation(line: 57, column: 68, scope: !7)
!54 = !DILocation(line: 61, column: 20, scope: !7)
!55 = !DILocation(line: 62, column: 36, scope: !7)
!56 = !DILocation(line: 62, column: 57, scope: !7)
!57 = !DILocation(line: 62, column: 31, scope: !7)
!58 = !DILocation(line: 62, column: 68, scope: !7)
!59 = !DILocation(line: 63, column: 20, scope: !7)
!60 = !DILocation(line: 66, column: 36, scope: !7)
!61 = !DILocation(line: 66, column: 57, scope: !7)
!62 = !DILocation(line: 66, column: 31, scope: !7)
!63 = !DILocation(line: 66, column: 68, scope: !7)
!64 = !DILocation(line: 75, column: 20, scope: !7)
!65 = !DILocation(line: 76, column: 27, scope: !7)
!66 = !DILocation(line: 78, column: 20, scope: !7)
!67 = !DILocation(line: 67, column: 35, scope: !7)
!68 = !DILocation(line: 68, column: 35, scope: !7)
!69 = !DILocation(line: 69, column: 35, scope: !7)
!70 = !DILocation(line: 70, column: 35, scope: !7)
!71 = !DILocation(line: 71, column: 34, scope: !7)
!72 = !DILocation(line: 72, column: 33, scope: !7)
!73 = !DILocation(line: 73, column: 20, scope: !7)
!74 = !DILocation(line: 81, column: 20, scope: !7)
!75 = !DILocation(line: 82, column: 20, scope: !7)
!76 = !DILocation(line: 83, column: 20, scope: !7)
!77 = !DILocation(line: 118, column: 15, scope: !78, inlinedAt: !80)
!78 = distinct !DILexicalBlockFile(scope: !7, file: !79, discriminator: 0)
!79 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!80 = !DILocation(line: 85, column: 42, scope: !7)
!81 = !DILocation(line: 121, column: 29, scope: !78, inlinedAt: !80)
!82 = !DILocation(line: 86, column: 25, scope: !7)
!83 = !DILocation(line: 86, column: 37, scope: !7)
!84 = !DILocation(line: 87, column: 25, scope: !7)
!85 = !DILocation(line: 87, column: 37, scope: !7)
!86 = !DILocation(line: 87, column: 4, scope: !7)
