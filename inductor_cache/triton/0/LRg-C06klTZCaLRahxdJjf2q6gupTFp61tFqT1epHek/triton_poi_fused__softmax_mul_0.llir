; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__softmax_mul_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %7 = shl i32 %6, 6, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 1, !dbg !12
  %10 = and i32 %9, 62, !dbg !12
  %11 = or disjoint i32 %7, %10, !dbg !13
  %12 = icmp slt i32 %11, 64, !dbg !14
  %13 = shl i32 %11, 2, !dbg !15
  %14 = or disjoint i32 %13, 4, !dbg !15
  %15 = sext i32 %13 to i64, !dbg !16
  %16 = getelementptr float, ptr addrspace(1) %0, i64 %15, !dbg !16
  %17 = sext i32 %14 to i64, !dbg !16
  %18 = getelementptr float, ptr addrspace(1) %0, i64 %17, !dbg !16
  %19 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %16, i1 %12) #1, !dbg !17
  %20 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %18, i1 %12) #1, !dbg !17
  %21 = getelementptr float, ptr addrspace(1) %1, i64 %15, !dbg !18
  %22 = getelementptr float, ptr addrspace(1) %1, i64 %17, !dbg !18
  %23 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %21, i1 %12) #1, !dbg !19
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %22, i1 %12) #1, !dbg !19
  %25 = or disjoint i32 %13, 1, !dbg !20
  %26 = or disjoint i32 %13, 5, !dbg !20
  %27 = sext i32 %25 to i64, !dbg !21
  %28 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !21
  %29 = sext i32 %26 to i64, !dbg !21
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !21
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 %12) #1, !dbg !22
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 %12) #1, !dbg !22
  %33 = getelementptr float, ptr addrspace(1) %1, i64 %27, !dbg !23
  %34 = getelementptr float, ptr addrspace(1) %1, i64 %29, !dbg !23
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 %12) #1, !dbg !24
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 %12) #1, !dbg !24
  %37 = or disjoint i32 %13, 2, !dbg !25
  %38 = or disjoint i32 %13, 6, !dbg !25
  %39 = sext i32 %37 to i64, !dbg !26
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !26
  %41 = sext i32 %38 to i64, !dbg !26
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !26
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 %12) #1, !dbg !27
  %44 = bitcast i32 %43 to float, !dbg !27
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 %12) #1, !dbg !27
  %46 = bitcast i32 %45 to float, !dbg !27
  %47 = getelementptr float, ptr addrspace(1) %1, i64 %39, !dbg !28
  %48 = getelementptr float, ptr addrspace(1) %1, i64 %41, !dbg !28
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 %12) #1, !dbg !29
  %50 = bitcast i32 %49 to float, !dbg !29
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 %12) #1, !dbg !29
  %52 = bitcast i32 %51 to float, !dbg !29
  %53 = or disjoint i32 %13, 3, !dbg !30
  %54 = or disjoint i32 %13, 7, !dbg !30
  %55 = sext i32 %53 to i64, !dbg !31
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !31
  %57 = sext i32 %54 to i64, !dbg !31
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !31
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 %12) #1, !dbg !32
  %60 = bitcast i32 %59 to float, !dbg !32
  %61 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %12) #1, !dbg !32
  %62 = bitcast i32 %61 to float, !dbg !32
  %63 = getelementptr float, ptr addrspace(1) %1, i64 %55, !dbg !33
  %64 = getelementptr float, ptr addrspace(1) %1, i64 %57, !dbg !33
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 %12) #1, !dbg !34
  %66 = bitcast i32 %65 to float, !dbg !34
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 %12) #1, !dbg !34
  %68 = bitcast i32 %67 to float, !dbg !34
  %69 = insertelement <2 x i32> poison, i32 %19, i64 0, !dbg !17
  %70 = insertelement <2 x i32> %69, i32 %31, i64 1, !dbg !17
  %71 = bitcast <2 x i32> %70 to <2 x float>, !dbg !17
  %72 = insertelement <2 x i32> poison, i32 %23, i64 0, !dbg !19
  %73 = insertelement <2 x i32> %72, i32 %35, i64 1, !dbg !19
  %74 = bitcast <2 x i32> %73 to <2 x float>, !dbg !19
  %75 = fmul <2 x float> %71, %74, !dbg !35
  %76 = insertelement <2 x i32> poison, i32 %20, i64 0, !dbg !17
  %77 = insertelement <2 x i32> %76, i32 %32, i64 1, !dbg !17
  %78 = bitcast <2 x i32> %77 to <2 x float>, !dbg !17
  %79 = insertelement <2 x i32> poison, i32 %24, i64 0, !dbg !19
  %80 = insertelement <2 x i32> %79, i32 %36, i64 1, !dbg !19
  %81 = bitcast <2 x i32> %80 to <2 x float>, !dbg !19
  %82 = fmul <2 x float> %78, %81, !dbg !35
  %83 = extractelement <2 x float> %75, i64 0, !dbg !36
  %84 = extractelement <2 x float> %75, i64 1, !dbg !37
  %85 = fcmp ogt float %83, %84, !dbg !38
  %86 = extractelement <2 x float> %82, i64 0, !dbg !36
  %87 = extractelement <2 x float> %82, i64 1, !dbg !37
  %88 = fcmp ogt float %86, %87, !dbg !38
  %89 = fcmp uno float %83, 0.000000e+00, !dbg !42
  %90 = fcmp uno float %86, 0.000000e+00, !dbg !42
  %91 = or i1 %89, %85, !dbg !43
  %92 = or i1 %90, %88, !dbg !43
  %93 = select i1 %91, float %83, float %84, !dbg !44
  %94 = select i1 %92, float %86, float %87, !dbg !44
  %95 = fmul float %44, %50, !dbg !45
  %96 = fmul float %46, %52, !dbg !45
  %97 = fcmp ogt float %93, %95, !dbg !46
  %98 = fcmp ogt float %94, %96, !dbg !46
  %99 = fcmp uno float %93, 0.000000e+00, !dbg !48
  %100 = fcmp uno float %94, 0.000000e+00, !dbg !48
  %101 = or i1 %99, %97, !dbg !49
  %102 = or i1 %100, %98, !dbg !49
  %103 = select i1 %101, float %93, float %95, !dbg !50
  %104 = select i1 %102, float %94, float %96, !dbg !50
  %105 = fmul float %60, %66, !dbg !51
  %106 = fmul float %62, %68, !dbg !51
  %107 = fcmp ogt float %103, %105, !dbg !52
  %108 = fcmp ogt float %104, %106, !dbg !52
  %109 = fcmp uno float %103, 0.000000e+00, !dbg !54
  %110 = fcmp uno float %104, 0.000000e+00, !dbg !54
  %111 = or i1 %109, %107, !dbg !55
  %112 = or i1 %110, %108, !dbg !55
  %113 = select i1 %111, float %103, float %105, !dbg !56
  %114 = select i1 %112, float %104, float %106, !dbg !56
  %115 = fsub float %83, %113, !dbg !36
  %116 = fsub float %86, %114, !dbg !36
  %117 = fmul float %115, 0x3FF7154760000000, !dbg !57
  %118 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %117) #1, !dbg !57
  %119 = fmul float %116, 0x3FF7154760000000, !dbg !57
  %120 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %119) #1, !dbg !57
  %121 = fsub float %84, %113, !dbg !37
  %122 = fsub float %87, %114, !dbg !37
  %123 = fmul float %121, 0x3FF7154760000000, !dbg !58
  %124 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %123) #1, !dbg !58
  %125 = fmul float %122, 0x3FF7154760000000, !dbg !58
  %126 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %125) #1, !dbg !58
  %127 = fadd float %118, %124, !dbg !59
  %128 = fadd float %120, %126, !dbg !59
  %129 = fsub float %95, %113, !dbg !60
  %130 = fsub float %96, %114, !dbg !60
  %131 = fmul float %129, 0x3FF7154760000000, !dbg !61
  %132 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %131) #1, !dbg !61
  %133 = fmul float %130, 0x3FF7154760000000, !dbg !61
  %134 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %133) #1, !dbg !61
  %135 = fadd float %127, %132, !dbg !62
  %136 = fadd float %128, %134, !dbg !62
  %137 = fsub float %105, %113, !dbg !63
  %138 = fsub float %106, %114, !dbg !63
  %139 = fmul float %137, 0x3FF7154760000000, !dbg !64
  %140 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %139) #1, !dbg !64
  %141 = fmul float %138, 0x3FF7154760000000, !dbg !64
  %142 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %141) #1, !dbg !64
  %143 = fadd float %135, %140, !dbg !65
  %144 = fadd float %136, %142, !dbg !65
  %145 = sext i32 %11 to i64, !dbg !66
  %146 = getelementptr float, ptr addrspace(1) %2, i64 %145, !dbg !66
  %147 = bitcast float %113 to i32, !dbg !67
  %148 = bitcast float %114 to i32, !dbg !67
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %147, i32 %148, ptr addrspace(1) %146, i1 %12) #1, !dbg !67
  %149 = getelementptr float, ptr addrspace(1) %3, i64 %145, !dbg !68
  %150 = bitcast float %143 to i32, !dbg !69
  %151 = bitcast float %144 to i32, !dbg !69
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %150, i32 %151, ptr addrspace(1) %149, i1 %12) #1, !dbg !69
  ret void, !dbg !70
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ctb32nwvz5x2fn7eq373dmabjtnij2qxcc4kxnirrdaao22w2i3d.py", directory: "inductor_cache/tb")
!4 = !{ptr @triton_poi_fused__softmax_mul_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__softmax_mul_0, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__softmax_mul_0", linkageName: "triton_poi_fused__softmax_mul_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 32, scope: !7)
!16 = !DILocation(line: 25, column: 30, scope: !7)
!17 = !DILocation(line: 25, column: 37, scope: !7)
!18 = !DILocation(line: 26, column: 30, scope: !7)
!19 = !DILocation(line: 26, column: 37, scope: !7)
!20 = !DILocation(line: 27, column: 34, scope: !7)
!21 = !DILocation(line: 27, column: 30, scope: !7)
!22 = !DILocation(line: 27, column: 41, scope: !7)
!23 = !DILocation(line: 28, column: 30, scope: !7)
!24 = !DILocation(line: 28, column: 41, scope: !7)
!25 = !DILocation(line: 29, column: 34, scope: !7)
!26 = !DILocation(line: 29, column: 30, scope: !7)
!27 = !DILocation(line: 29, column: 41, scope: !7)
!28 = !DILocation(line: 30, column: 30, scope: !7)
!29 = !DILocation(line: 30, column: 41, scope: !7)
!30 = !DILocation(line: 31, column: 35, scope: !7)
!31 = !DILocation(line: 31, column: 31, scope: !7)
!32 = !DILocation(line: 31, column: 42, scope: !7)
!33 = !DILocation(line: 32, column: 31, scope: !7)
!34 = !DILocation(line: 32, column: 42, scope: !7)
!35 = !DILocation(line: 33, column: 18, scope: !7)
!36 = !DILocation(line: 40, column: 19, scope: !7)
!37 = !DILocation(line: 42, column: 19, scope: !7)
!38 = !DILocation(line: 118, column: 15, scope: !39, inlinedAt: !41)
!39 = distinct !DILexicalBlockFile(scope: !7, file: !40, discriminator: 0)
!40 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!41 = !DILocation(line: 35, column: 40, scope: !7)
!42 = !DILocation(line: 120, column: 21, scope: !39, inlinedAt: !41)
!43 = !DILocation(line: 120, column: 16, scope: !39, inlinedAt: !41)
!44 = !DILocation(line: 121, column: 29, scope: !39, inlinedAt: !41)
!45 = !DILocation(line: 36, column: 18, scope: !7)
!46 = !DILocation(line: 118, column: 15, scope: !39, inlinedAt: !47)
!47 = !DILocation(line: 37, column: 41, scope: !7)
!48 = !DILocation(line: 120, column: 21, scope: !39, inlinedAt: !47)
!49 = !DILocation(line: 120, column: 16, scope: !39, inlinedAt: !47)
!50 = !DILocation(line: 121, column: 29, scope: !39, inlinedAt: !47)
!51 = !DILocation(line: 38, column: 20, scope: !7)
!52 = !DILocation(line: 118, column: 15, scope: !39, inlinedAt: !53)
!53 = !DILocation(line: 39, column: 42, scope: !7)
!54 = !DILocation(line: 120, column: 21, scope: !39, inlinedAt: !53)
!55 = !DILocation(line: 120, column: 16, scope: !39, inlinedAt: !53)
!56 = !DILocation(line: 121, column: 29, scope: !39, inlinedAt: !53)
!57 = !DILocation(line: 41, column: 24, scope: !7)
!58 = !DILocation(line: 43, column: 24, scope: !7)
!59 = !DILocation(line: 44, column: 20, scope: !7)
!60 = !DILocation(line: 45, column: 19, scope: !7)
!61 = !DILocation(line: 46, column: 24, scope: !7)
!62 = !DILocation(line: 47, column: 20, scope: !7)
!63 = !DILocation(line: 48, column: 20, scope: !7)
!64 = !DILocation(line: 49, column: 24, scope: !7)
!65 = !DILocation(line: 50, column: 20, scope: !7)
!66 = !DILocation(line: 51, column: 25, scope: !7)
!67 = !DILocation(line: 51, column: 37, scope: !7)
!68 = !DILocation(line: 52, column: 25, scope: !7)
!69 = !DILocation(line: 52, column: 37, scope: !7)
!70 = !DILocation(line: 52, column: 4, scope: !7)
