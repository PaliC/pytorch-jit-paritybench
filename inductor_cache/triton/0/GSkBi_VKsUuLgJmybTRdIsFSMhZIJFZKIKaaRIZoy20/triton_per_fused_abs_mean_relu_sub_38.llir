; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_abs_mean_relu_sub_38(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %7 = shl i32 %6, 5, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = and i32 %8, 31, !dbg !12
  %10 = or disjoint i32 %7, %9, !dbg !13
  %11 = icmp slt i32 %10, 256, !dbg !14
  %12 = lshr i32 %8, 5, !dbg !15
  %.frozen = freeze i32 %10, !dbg !16
  %13 = sdiv i32 %.frozen, 64, !dbg !16
  %14 = mul i32 %13, 64, !dbg !17
  %.decomposed = sub i32 %.frozen, %14, !dbg !17
  %15 = shl nsw i32 %.decomposed, 3, !dbg !18
  %16 = shl i32 %12, 9, !dbg !19
  %17 = and i32 %16, 3584, !dbg !19
  %18 = shl i32 %13, 13, !dbg !20
  %19 = add i32 %18, %15, !dbg !21
  %20 = add i32 %19, %17, !dbg !22
  %21 = add i32 %19, 4096, !dbg !21
  %22 = add nuw i32 %21, %17, !dbg !22
  %23 = or disjoint i32 %20, 1, !dbg !23
  %24 = or disjoint i32 %22, 1, !dbg !23
  %25 = or disjoint i32 %20, 2, !dbg !23
  %26 = or disjoint i32 %22, 2, !dbg !23
  %27 = or disjoint i32 %20, 3, !dbg !23
  %28 = or disjoint i32 %22, 3, !dbg !23
  %29 = or disjoint i32 %20, 4, !dbg !23
  %30 = or disjoint i32 %22, 4, !dbg !23
  %31 = or disjoint i32 %20, 5, !dbg !23
  %32 = or disjoint i32 %22, 5, !dbg !23
  %33 = or disjoint i32 %20, 6, !dbg !23
  %34 = or disjoint i32 %22, 6, !dbg !23
  %35 = or disjoint i32 %20, 7, !dbg !23
  %36 = or disjoint i32 %22, 7, !dbg !23
  %37 = sext i32 %20 to i64, !dbg !24
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !24
  %39 = sext i32 %22 to i64, !dbg !24
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !24
  %41 = sext i32 %23 to i64, !dbg !24
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !24
  %43 = sext i32 %24 to i64, !dbg !24
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !24
  %45 = sext i32 %25 to i64, !dbg !24
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !24
  %47 = sext i32 %26 to i64, !dbg !24
  %48 = getelementptr float, ptr addrspace(1) %0, i64 %47, !dbg !24
  %49 = sext i32 %27 to i64, !dbg !24
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !24
  %51 = sext i32 %28 to i64, !dbg !24
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !24
  %53 = sext i32 %29 to i64, !dbg !24
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !24
  %55 = sext i32 %30 to i64, !dbg !24
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !24
  %57 = sext i32 %31 to i64, !dbg !24
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !24
  %59 = sext i32 %32 to i64, !dbg !24
  %60 = getelementptr float, ptr addrspace(1) %0, i64 %59, !dbg !24
  %61 = sext i32 %33 to i64, !dbg !24
  %62 = getelementptr float, ptr addrspace(1) %0, i64 %61, !dbg !24
  %63 = sext i32 %34 to i64, !dbg !24
  %64 = getelementptr float, ptr addrspace(1) %0, i64 %63, !dbg !24
  %65 = sext i32 %35 to i64, !dbg !24
  %66 = getelementptr float, ptr addrspace(1) %0, i64 %65, !dbg !24
  %67 = sext i32 %36 to i64, !dbg !24
  %68 = getelementptr float, ptr addrspace(1) %0, i64 %67, !dbg !24
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %38, i1 %11, i32 0, i1 %11) #3, !dbg !25
  %70 = bitcast i32 %69 to float, !dbg !25
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %40, i1 %11, i32 0, i1 %11) #3, !dbg !25
  %72 = bitcast i32 %71 to float, !dbg !25
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %42, i1 %11, i32 0, i1 %11) #3, !dbg !25
  %74 = bitcast i32 %73 to float, !dbg !25
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %44, i1 %11, i32 0, i1 %11) #3, !dbg !25
  %76 = bitcast i32 %75 to float, !dbg !25
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %46, i1 %11, i32 0, i1 %11) #3, !dbg !25
  %78 = bitcast i32 %77 to float, !dbg !25
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %48, i1 %11, i32 0, i1 %11) #3, !dbg !25
  %80 = bitcast i32 %79 to float, !dbg !25
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %50, i1 %11, i32 0, i1 %11) #3, !dbg !25
  %82 = bitcast i32 %81 to float, !dbg !25
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %52, i1 %11, i32 0, i1 %11) #3, !dbg !25
  %84 = bitcast i32 %83 to float, !dbg !25
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %54, i1 %11, i32 0, i1 %11) #3, !dbg !25
  %86 = bitcast i32 %85 to float, !dbg !25
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %56, i1 %11, i32 0, i1 %11) #3, !dbg !25
  %88 = bitcast i32 %87 to float, !dbg !25
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %58, i1 %11, i32 0, i1 %11) #3, !dbg !25
  %90 = bitcast i32 %89 to float, !dbg !25
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %60, i1 %11, i32 0, i1 %11) #3, !dbg !25
  %92 = bitcast i32 %91 to float, !dbg !25
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %62, i1 %11, i32 0, i1 %11) #3, !dbg !25
  %94 = bitcast i32 %93 to float, !dbg !25
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %64, i1 %11, i32 0, i1 %11) #3, !dbg !25
  %96 = bitcast i32 %95 to float, !dbg !25
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %66, i1 %11, i32 0, i1 %11) #3, !dbg !25
  %98 = bitcast i32 %97 to float, !dbg !25
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %68, i1 %11, i32 0, i1 %11) #3, !dbg !25
  %100 = bitcast i32 %99 to float, !dbg !25
  %101 = getelementptr float, ptr addrspace(1) %1, i64 %37, !dbg !26
  %102 = getelementptr float, ptr addrspace(1) %1, i64 %39, !dbg !26
  %103 = getelementptr float, ptr addrspace(1) %1, i64 %41, !dbg !26
  %104 = getelementptr float, ptr addrspace(1) %1, i64 %43, !dbg !26
  %105 = getelementptr float, ptr addrspace(1) %1, i64 %45, !dbg !26
  %106 = getelementptr float, ptr addrspace(1) %1, i64 %47, !dbg !26
  %107 = getelementptr float, ptr addrspace(1) %1, i64 %49, !dbg !26
  %108 = getelementptr float, ptr addrspace(1) %1, i64 %51, !dbg !26
  %109 = getelementptr float, ptr addrspace(1) %1, i64 %53, !dbg !26
  %110 = getelementptr float, ptr addrspace(1) %1, i64 %55, !dbg !26
  %111 = getelementptr float, ptr addrspace(1) %1, i64 %57, !dbg !26
  %112 = getelementptr float, ptr addrspace(1) %1, i64 %59, !dbg !26
  %113 = getelementptr float, ptr addrspace(1) %1, i64 %61, !dbg !26
  %114 = getelementptr float, ptr addrspace(1) %1, i64 %63, !dbg !26
  %115 = getelementptr float, ptr addrspace(1) %1, i64 %65, !dbg !26
  %116 = getelementptr float, ptr addrspace(1) %1, i64 %67, !dbg !26
  %117 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %101, i1 %11, i32 0, i1 %11) #3, !dbg !27
  %118 = bitcast i32 %117 to float, !dbg !27
  %119 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %102, i1 %11, i32 0, i1 %11) #3, !dbg !27
  %120 = bitcast i32 %119 to float, !dbg !27
  %121 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %103, i1 %11, i32 0, i1 %11) #3, !dbg !27
  %122 = bitcast i32 %121 to float, !dbg !27
  %123 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %104, i1 %11, i32 0, i1 %11) #3, !dbg !27
  %124 = bitcast i32 %123 to float, !dbg !27
  %125 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %105, i1 %11, i32 0, i1 %11) #3, !dbg !27
  %126 = bitcast i32 %125 to float, !dbg !27
  %127 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %106, i1 %11, i32 0, i1 %11) #3, !dbg !27
  %128 = bitcast i32 %127 to float, !dbg !27
  %129 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %107, i1 %11, i32 0, i1 %11) #3, !dbg !27
  %130 = bitcast i32 %129 to float, !dbg !27
  %131 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %108, i1 %11, i32 0, i1 %11) #3, !dbg !27
  %132 = bitcast i32 %131 to float, !dbg !27
  %133 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %109, i1 %11, i32 0, i1 %11) #3, !dbg !27
  %134 = bitcast i32 %133 to float, !dbg !27
  %135 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %110, i1 %11, i32 0, i1 %11) #3, !dbg !27
  %136 = bitcast i32 %135 to float, !dbg !27
  %137 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %111, i1 %11, i32 0, i1 %11) #3, !dbg !27
  %138 = bitcast i32 %137 to float, !dbg !27
  %139 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %112, i1 %11, i32 0, i1 %11) #3, !dbg !27
  %140 = bitcast i32 %139 to float, !dbg !27
  %141 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %113, i1 %11, i32 0, i1 %11) #3, !dbg !27
  %142 = bitcast i32 %141 to float, !dbg !27
  %143 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %114, i1 %11, i32 0, i1 %11) #3, !dbg !27
  %144 = bitcast i32 %143 to float, !dbg !27
  %145 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %115, i1 %11, i32 0, i1 %11) #3, !dbg !27
  %146 = bitcast i32 %145 to float, !dbg !27
  %147 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %116, i1 %11, i32 0, i1 %11) #3, !dbg !27
  %148 = bitcast i32 %147 to float, !dbg !27
  %149 = fcmp olt float %70, 0.000000e+00, !dbg !28
  %150 = fcmp olt float %72, 0.000000e+00, !dbg !28
  %151 = fcmp olt float %74, 0.000000e+00, !dbg !28
  %152 = fcmp olt float %76, 0.000000e+00, !dbg !28
  %153 = fcmp olt float %78, 0.000000e+00, !dbg !28
  %154 = fcmp olt float %80, 0.000000e+00, !dbg !28
  %155 = fcmp olt float %82, 0.000000e+00, !dbg !28
  %156 = fcmp olt float %84, 0.000000e+00, !dbg !28
  %157 = fcmp olt float %86, 0.000000e+00, !dbg !28
  %158 = fcmp olt float %88, 0.000000e+00, !dbg !28
  %159 = fcmp olt float %90, 0.000000e+00, !dbg !28
  %160 = fcmp olt float %92, 0.000000e+00, !dbg !28
  %161 = fcmp olt float %94, 0.000000e+00, !dbg !28
  %162 = fcmp olt float %96, 0.000000e+00, !dbg !28
  %163 = fcmp olt float %98, 0.000000e+00, !dbg !28
  %164 = fcmp olt float %100, 0.000000e+00, !dbg !28
  %165 = select i1 %149, float 0.000000e+00, float %70, !dbg !32
  %166 = select i1 %150, float 0.000000e+00, float %72, !dbg !32
  %167 = select i1 %151, float 0.000000e+00, float %74, !dbg !32
  %168 = select i1 %152, float 0.000000e+00, float %76, !dbg !32
  %169 = select i1 %153, float 0.000000e+00, float %78, !dbg !32
  %170 = select i1 %154, float 0.000000e+00, float %80, !dbg !32
  %171 = select i1 %155, float 0.000000e+00, float %82, !dbg !32
  %172 = select i1 %156, float 0.000000e+00, float %84, !dbg !32
  %173 = select i1 %157, float 0.000000e+00, float %86, !dbg !32
  %174 = select i1 %158, float 0.000000e+00, float %88, !dbg !32
  %175 = select i1 %159, float 0.000000e+00, float %90, !dbg !32
  %176 = select i1 %160, float 0.000000e+00, float %92, !dbg !32
  %177 = select i1 %161, float 0.000000e+00, float %94, !dbg !32
  %178 = select i1 %162, float 0.000000e+00, float %96, !dbg !32
  %179 = select i1 %163, float 0.000000e+00, float %98, !dbg !32
  %180 = select i1 %164, float 0.000000e+00, float %100, !dbg !32
  %181 = fcmp olt float %118, 0.000000e+00, !dbg !33
  %182 = fcmp olt float %120, 0.000000e+00, !dbg !33
  %183 = fcmp olt float %122, 0.000000e+00, !dbg !33
  %184 = fcmp olt float %124, 0.000000e+00, !dbg !33
  %185 = fcmp olt float %126, 0.000000e+00, !dbg !33
  %186 = fcmp olt float %128, 0.000000e+00, !dbg !33
  %187 = fcmp olt float %130, 0.000000e+00, !dbg !33
  %188 = fcmp olt float %132, 0.000000e+00, !dbg !33
  %189 = fcmp olt float %134, 0.000000e+00, !dbg !33
  %190 = fcmp olt float %136, 0.000000e+00, !dbg !33
  %191 = fcmp olt float %138, 0.000000e+00, !dbg !33
  %192 = fcmp olt float %140, 0.000000e+00, !dbg !33
  %193 = fcmp olt float %142, 0.000000e+00, !dbg !33
  %194 = fcmp olt float %144, 0.000000e+00, !dbg !33
  %195 = fcmp olt float %146, 0.000000e+00, !dbg !33
  %196 = fcmp olt float %148, 0.000000e+00, !dbg !33
  %197 = select i1 %181, float 0.000000e+00, float %118, !dbg !35
  %198 = select i1 %182, float 0.000000e+00, float %120, !dbg !35
  %199 = select i1 %183, float 0.000000e+00, float %122, !dbg !35
  %200 = select i1 %184, float 0.000000e+00, float %124, !dbg !35
  %201 = select i1 %185, float 0.000000e+00, float %126, !dbg !35
  %202 = select i1 %186, float 0.000000e+00, float %128, !dbg !35
  %203 = select i1 %187, float 0.000000e+00, float %130, !dbg !35
  %204 = select i1 %188, float 0.000000e+00, float %132, !dbg !35
  %205 = select i1 %189, float 0.000000e+00, float %134, !dbg !35
  %206 = select i1 %190, float 0.000000e+00, float %136, !dbg !35
  %207 = select i1 %191, float 0.000000e+00, float %138, !dbg !35
  %208 = select i1 %192, float 0.000000e+00, float %140, !dbg !35
  %209 = select i1 %193, float 0.000000e+00, float %142, !dbg !35
  %210 = select i1 %194, float 0.000000e+00, float %144, !dbg !35
  %211 = select i1 %195, float 0.000000e+00, float %146, !dbg !35
  %212 = select i1 %196, float 0.000000e+00, float %148, !dbg !35
  %213 = fsub float %165, %197, !dbg !36
  %214 = fsub float %166, %198, !dbg !36
  %215 = fsub float %167, %199, !dbg !36
  %216 = fsub float %168, %200, !dbg !36
  %217 = fsub float %169, %201, !dbg !36
  %218 = fsub float %170, %202, !dbg !36
  %219 = fsub float %171, %203, !dbg !36
  %220 = fsub float %172, %204, !dbg !36
  %221 = fsub float %173, %205, !dbg !36
  %222 = fsub float %174, %206, !dbg !36
  %223 = fsub float %175, %207, !dbg !36
  %224 = fsub float %176, %208, !dbg !36
  %225 = fsub float %177, %209, !dbg !36
  %226 = fsub float %178, %210, !dbg !36
  %227 = fsub float %179, %211, !dbg !36
  %228 = fsub float %180, %212, !dbg !36
  %229 = tail call float @llvm.fabs.f32(float %213), !dbg !37
  %230 = tail call float @llvm.fabs.f32(float %214), !dbg !37
  %231 = tail call float @llvm.fabs.f32(float %215), !dbg !37
  %232 = tail call float @llvm.fabs.f32(float %216), !dbg !37
  %233 = tail call float @llvm.fabs.f32(float %217), !dbg !37
  %234 = tail call float @llvm.fabs.f32(float %218), !dbg !37
  %235 = tail call float @llvm.fabs.f32(float %219), !dbg !37
  %236 = tail call float @llvm.fabs.f32(float %220), !dbg !37
  %237 = tail call float @llvm.fabs.f32(float %221), !dbg !37
  %238 = tail call float @llvm.fabs.f32(float %222), !dbg !37
  %239 = tail call float @llvm.fabs.f32(float %223), !dbg !37
  %240 = tail call float @llvm.fabs.f32(float %224), !dbg !37
  %241 = tail call float @llvm.fabs.f32(float %225), !dbg !37
  %242 = tail call float @llvm.fabs.f32(float %226), !dbg !37
  %243 = tail call float @llvm.fabs.f32(float %227), !dbg !37
  %244 = tail call float @llvm.fabs.f32(float %228), !dbg !37
  %245 = fadd float %229, %230, !dbg !38
  %246 = fadd float %245, %231, !dbg !38
  %247 = fadd float %246, %232, !dbg !38
  %248 = fadd float %247, %233, !dbg !38
  %249 = fadd float %248, %234, !dbg !38
  %250 = fadd float %249, %235, !dbg !38
  %251 = fadd float %250, %236, !dbg !38
  %252 = fadd float %251, %237, !dbg !38
  %253 = fadd float %252, %238, !dbg !38
  %254 = fadd float %253, %239, !dbg !38
  %255 = fadd float %254, %240, !dbg !38
  %256 = fadd float %255, %241, !dbg !38
  %257 = fadd float %256, %242, !dbg !38
  %258 = fadd float %257, %243, !dbg !38
  %259 = fadd float %258, %244, !dbg !38
  %260 = and i32 %12, 7, !dbg !43
  %261 = shl nuw nsw i32 %9, 3, !dbg !43
  %262 = or disjoint i32 %261, %260, !dbg !43
  %263 = getelementptr float, ptr addrspace(3) @global_smem, i32 %262, !dbg !43
  %264 = bitcast float %259 to i32, !dbg !43
  %265 = select i1 %11, i32 %264, i32 0, !dbg !38
  %266 = insertelement <1 x i32> poison, i32 %265, i64 0, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %263, <1 x i32> %266, i1 true) #3, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %267 = icmp slt i32 %8, 256, !dbg !43
  %268 = getelementptr float, ptr addrspace(3) @global_smem, i32 %8, !dbg !43
  %269 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %268, i1 %267) #3, !dbg !43
  %270 = bitcast i32 %269 to float, !dbg !43
  %271 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %269, i32 4, i32 31), !dbg !43
  %272 = bitcast i32 %271 to float, !dbg !43
  %273 = fadd float %270, %272, !dbg !38
  %274 = bitcast float %273 to i32, !dbg !43
  %275 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %274, i32 2, i32 31), !dbg !43
  %276 = bitcast i32 %275 to float, !dbg !43
  %277 = fadd float %273, %276, !dbg !38
  %278 = bitcast float %277 to i32, !dbg !43
  %279 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %278, i32 1, i32 31), !dbg !43
  %280 = bitcast i32 %279 to float, !dbg !43
  %281 = fadd float %277, %280, !dbg !38
  %282 = and i32 %8, 7, !dbg !43
  %283 = icmp eq i32 %282, 0, !dbg !43
  %284 = and i1 %267, %283, !dbg !43
  %285 = bitcast float %281 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %268, <1 x i32> %285, i1 %284) #3, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %286 = getelementptr float, ptr addrspace(3) @global_smem, i32 %261, !dbg !43
  %287 = load i32, ptr addrspace(3) %286, align 16, !dbg !43
  %288 = sext i32 %10 to i64, !dbg !44
  %289 = getelementptr float, ptr addrspace(1) %2, i64 %288, !dbg !44
  %290 = icmp eq i32 %260, 0, !dbg !45
  %291 = and i1 %290, %11, !dbg !45
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %287, ptr addrspace(1) %289, i1 %291) #3, !dbg !45
  ret void, !dbg !46
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.fabs.f32(float) #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c7xpujlycdzvp65rbz364nnthbdsivfwrzey7e5662czey4e47x7.py", directory: "inductor_cache/7x")
!4 = !{ptr @triton_per_fused_abs_mean_relu_sub_38, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_abs_mean_relu_sub_38, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_abs_mean_relu_sub_38", linkageName: "triton_per_fused_abs_mean_relu_sub_38", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 19, scope: !7)
!17 = !DILocation(line: 30, column: 19, scope: !7)
!18 = !DILocation(line: 33, column: 32, scope: !7)
!19 = !DILocation(line: 33, column: 43, scope: !7)
!20 = !DILocation(line: 33, column: 60, scope: !7)
!21 = !DILocation(line: 33, column: 37, scope: !7)
!22 = !DILocation(line: 33, column: 55, scope: !7)
!23 = !DILocation(line: 33, column: 97, scope: !7)
!24 = !DILocation(line: 33, column: 30, scope: !7)
!25 = !DILocation(line: 33, column: 109, scope: !7)
!26 = !DILocation(line: 34, column: 30, scope: !7)
!27 = !DILocation(line: 34, column: 109, scope: !7)
!28 = !DILocation(line: 118, column: 15, scope: !29, inlinedAt: !31)
!29 = distinct !DILexicalBlockFile(scope: !7, file: !30, discriminator: 0)
!30 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!31 = !DILocation(line: 36, column: 40, scope: !7)
!32 = !DILocation(line: 121, column: 29, scope: !29, inlinedAt: !31)
!33 = !DILocation(line: 118, column: 15, scope: !29, inlinedAt: !34)
!34 = !DILocation(line: 37, column: 40, scope: !7)
!35 = !DILocation(line: 121, column: 29, scope: !29, inlinedAt: !34)
!36 = !DILocation(line: 38, column: 18, scope: !7)
!37 = !DILocation(line: 39, column: 23, scope: !7)
!38 = !DILocation(line: 256, column: 15, scope: !39, inlinedAt: !42)
!39 = distinct !DILexicalBlockFile(scope: !41, file: !40, discriminator: 0)
!40 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!41 = distinct !DILexicalBlockFile(scope: !7, file: !40, discriminator: 0)
!42 = !DILocation(line: 42, column: 25, scope: !7)
!43 = !DILocation(line: 267, column: 36, scope: !41, inlinedAt: !42)
!44 = !DILocation(line: 43, column: 25, scope: !7)
!45 = !DILocation(line: 43, column: 37, scope: !7)
!46 = !DILocation(line: 43, column: 4, scope: !7)
