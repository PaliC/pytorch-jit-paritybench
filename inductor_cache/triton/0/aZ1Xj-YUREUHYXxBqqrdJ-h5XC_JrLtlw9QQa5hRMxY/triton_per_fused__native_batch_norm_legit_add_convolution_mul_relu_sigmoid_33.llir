; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused__native_batch_norm_legit_add_convolution_mul_relu_sigmoid_33(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, i32 %10, i32 %11) local_unnamed_addr !dbg !7 {
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %14 = shl i32 %13, 5, !dbg !11
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %16 = lshr i32 %15, 2, !dbg !12
  %17 = and i32 %16, 31, !dbg !12
  %18 = and i32 %15, 31, !dbg !12
  %19 = or disjoint i32 %14, %17, !dbg !13
  %20 = or disjoint i32 %14, %18, !dbg !13
  %21 = shl i32 %15, 2, !dbg !14
  %22 = and i32 %21, 12, !dbg !14
  %23 = srem i32 %19, 1024, !dbg !15
  %24 = srem i32 %20, 1024, !dbg !15
  %25 = sext i32 %19 to i64, !dbg !16
  %26 = getelementptr float, ptr addrspace(1) %0, i64 %25, !dbg !16
  %27 = sext i32 %20 to i64, !dbg !16
  %28 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !16
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 true) #5, !dbg !17
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 true) #5, !dbg !17
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 true) #5, !dbg !17
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 true) #5, !dbg !17
  %33 = bitcast i32 %32 to float, !dbg !17
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 true) #5, !dbg !17
  %35 = sext i32 %23 to i64, !dbg !18
  %36 = getelementptr float, ptr addrspace(1) %2, i64 %35, !dbg !18
  %37 = sext i32 %24 to i64, !dbg !18
  %38 = getelementptr float, ptr addrspace(1) %2, i64 %37, !dbg !18
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #5, !dbg !19
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #5, !dbg !19
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #5, !dbg !19
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #5, !dbg !19
  %43 = bitcast i32 %42 to float, !dbg !19
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 true) #5, !dbg !19
  %45 = shl i32 %19, 4, !dbg !20
  %46 = or disjoint i32 %45, %22, !dbg !21
  %47 = sext i32 %46 to i64, !dbg !22
  %48 = getelementptr float, ptr addrspace(1) %1, i64 %47, !dbg !22
  %49 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %48, i1 true) #5, !dbg !23
  %50 = extractvalue { i32, i32, i32, i32 } %49, 0, !dbg !23
  %51 = extractvalue { i32, i32, i32, i32 } %49, 1, !dbg !23
  %52 = extractvalue { i32, i32, i32, i32 } %49, 2, !dbg !23
  %53 = extractvalue { i32, i32, i32, i32 } %49, 3, !dbg !23
  %54 = getelementptr float, ptr addrspace(1) %3, i64 %35, !dbg !24
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 true) #5, !dbg !25
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 true) #5, !dbg !25
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 true) #5, !dbg !25
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 true) #5, !dbg !25
  %59 = getelementptr float, ptr addrspace(1) %4, i64 %47, !dbg !26
  %60 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %59, i1 true) #5, !dbg !27
  %61 = getelementptr float, ptr addrspace(1) %5, i64 %25, !dbg !28
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 true) #5, !dbg !29
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 true) #5, !dbg !29
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 true) #5, !dbg !29
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 true) #5, !dbg !29
  %66 = getelementptr float, ptr addrspace(1) %6, i64 %25, !dbg !30
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 true) #5, !dbg !31
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 true) #5, !dbg !31
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 true) #5, !dbg !31
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 true) #5, !dbg !31
  %71 = fadd float %33, %43, !dbg !32
  %72 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %17, !dbg !33
  %73 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %18, !dbg !33
  %74 = insertelement <4 x i32> poison, i32 %53, i64 0, !dbg !23
  %75 = insertelement <4 x i32> %74, i32 %52, i64 1, !dbg !23
  %76 = insertelement <4 x i32> %75, i32 %51, i64 2, !dbg !23
  %77 = insertelement <4 x i32> %76, i32 %50, i64 3, !dbg !23
  %78 = bitcast <4 x i32> %77 to <4 x float>, !dbg !23
  %79 = insertelement <4 x i32> poison, i32 %58, i64 0, !dbg !34
  %80 = bitcast <4 x i32> %79 to <4 x float>, !dbg !34
  %81 = shufflevector <4 x float> %80, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !34
  %82 = fadd <4 x float> %81, %78, !dbg !34
  %83 = extractelement <4 x float> %82, i64 2, !dbg !35
  %84 = extractelement <4 x float> %82, i64 3, !dbg !35
  %85 = fadd float %84, %83, !dbg !35
  %86 = extractelement <4 x float> %82, i64 1, !dbg !35
  %87 = fadd float %86, %85, !dbg !35
  %88 = extractelement <4 x float> %82, i64 0, !dbg !35
  %89 = fadd float %88, %87, !dbg !35
  %90 = bitcast float %89 to i32, !dbg !40
  %91 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %90, i32 2, i32 31), !dbg !40
  %92 = bitcast i32 %91 to float, !dbg !40
  %93 = fadd float %89, %92, !dbg !35
  %94 = bitcast float %93 to i32, !dbg !40
  %95 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %94, i32 1, i32 31), !dbg !40
  %96 = bitcast i32 %95 to float, !dbg !40
  %97 = fadd float %93, %96, !dbg !35
  %98 = bitcast float %97 to <1 x i32>, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %72, <1 x i32> %98, i1 true) #5, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %99 = load float, ptr addrspace(3) %73, align 4, !dbg !33
  %100 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %99, float 1.600000e+01) #5, !dbg !33
  %101 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %97, float 1.600000e+01) #5, !dbg !33
  %102 = insertelement <4 x float> poison, float %101, i64 0, !dbg !41
  %103 = shufflevector <4 x float> %102, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !41
  %104 = fsub <4 x float> %82, %103, !dbg !41
  %105 = fmul <4 x float> %104, %104, !dbg !42
  %106 = fmul <4 x float> %104, %104, !dbg !42
  %107 = fmul <4 x float> %104, %104, !dbg !42
  %108 = fmul <4 x float> %104, %104, !dbg !42
  %shift = shufflevector <4 x float> %105, <4 x float> poison, <4 x i32> <i32 poison, i32 poison, i32 3, i32 poison>, !dbg !43
  %109 = fadd <4 x float> %shift, %106, !dbg !43
  %shift15 = shufflevector <4 x float> %109, <4 x float> poison, <4 x i32> <i32 poison, i32 2, i32 poison, i32 poison>, !dbg !43
  %110 = fadd <4 x float> %107, %shift15, !dbg !43
  %shift16 = shufflevector <4 x float> %110, <4 x float> poison, <4 x i32> <i32 1, i32 poison, i32 poison, i32 poison>, !dbg !43
  %111 = fadd <4 x float> %108, %shift16, !dbg !43
  %112 = extractelement <4 x float> %111, i64 0, !dbg !43
  %113 = bitcast float %112 to i32, !dbg !45
  %114 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %113, i32 2, i32 31), !dbg !45
  %115 = bitcast i32 %114 to float, !dbg !45
  %116 = fadd float %112, %115, !dbg !43
  %117 = bitcast float %116 to i32, !dbg !45
  %118 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %117, i32 1, i32 31), !dbg !45
  %119 = bitcast i32 %118 to float, !dbg !45
  %120 = fadd float %116, %119, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %121 = bitcast float %120 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %72, <1 x i32> %121, i1 true) #5, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %122 = load float, ptr addrspace(3) %73, align 4, !dbg !46
  %123 = fsub float 0.000000e+00, %71, !dbg !47
  %124 = fmul float %123, 0x3FF7154760000000, !dbg !49
  %125 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %124) #5, !dbg !49
  %126 = fadd float %125, 1.000000e+00, !dbg !50
  %127 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %126) #5, !dbg !51
  %128 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %122, float 1.600000e+01) #5, !dbg !52
  %129 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %120, float 1.600000e+01) #5, !dbg !52
  %130 = fadd float %128, 0x3EE4F8B580000000, !dbg !53
  %131 = fadd float %129, 0x3EE4F8B580000000, !dbg !53
  %132 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !46
  %.not.i = icmp eq i32 %132, 0, !dbg !46
  br i1 %.not.i, label %135, label %133, !dbg !46

133:                                              ; preds = %12
  %134 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %130), !dbg !46
  br label %__nv_rsqrtf.exit, !dbg !46

135:                                              ; preds = %12
  %136 = tail call float @llvm.nvvm.rsqrt.approx.f(float %130), !dbg !46
  br label %__nv_rsqrtf.exit, !dbg !46

__nv_rsqrtf.exit:                                 ; preds = %133, %135
  %.0.i = phi float [ %134, %133 ], [ %136, %135 ], !dbg !46
  %137 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !46
  %138 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !46
  %139 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !46
  %140 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !46
  %.not.i12 = icmp eq i32 %140, 0, !dbg !46
  br i1 %.not.i12, label %143, label %141, !dbg !46

141:                                              ; preds = %__nv_rsqrtf.exit
  %142 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %131), !dbg !46
  br label %__nv_rsqrtf.exit14, !dbg !46

143:                                              ; preds = %__nv_rsqrtf.exit
  %144 = tail call float @llvm.nvvm.rsqrt.approx.f(float %131), !dbg !46
  br label %__nv_rsqrtf.exit14, !dbg !46

__nv_rsqrtf.exit14:                               ; preds = %141, %143
  %.0.i13 = phi float [ %142, %141 ], [ %144, %143 ], !dbg !46
  %145 = extractvalue { i32, i32, i32, i32 } %60, 3, !dbg !27
  %146 = extractvalue { i32, i32, i32, i32 } %60, 2, !dbg !27
  %147 = extractvalue { i32, i32, i32, i32 } %60, 1, !dbg !27
  %148 = extractvalue { i32, i32, i32, i32 } %60, 0, !dbg !27
  %149 = bitcast i32 %34 to float, !dbg !17
  %150 = bitcast i32 %44 to float, !dbg !19
  %151 = fadd float %149, %150, !dbg !32
  %152 = insertelement <4 x float> poison, float %.0.i13, i64 0, !dbg !54
  %153 = shufflevector <4 x float> %152, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !54
  %154 = fmul <4 x float> %104, %153, !dbg !54
  %155 = insertelement <4 x i32> poison, i32 %145, i64 0, !dbg !27
  %156 = insertelement <4 x i32> %155, i32 %146, i64 1, !dbg !27
  %157 = insertelement <4 x i32> %156, i32 %147, i64 2, !dbg !27
  %158 = insertelement <4 x i32> %157, i32 %148, i64 3, !dbg !27
  %159 = bitcast <4 x i32> %158 to <4 x float>, !dbg !27
  %160 = insertelement <4 x i32> poison, i32 %65, i64 0, !dbg !55
  %161 = bitcast <4 x i32> %160 to <4 x float>, !dbg !55
  %162 = shufflevector <4 x float> %161, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !55
  %163 = fsub <4 x float> %159, %162, !dbg !55
  %164 = insertelement <4 x i32> poison, i32 %70, i64 0, !dbg !56
  %165 = bitcast <4 x i32> %164 to <4 x float>, !dbg !56
  %166 = shufflevector <4 x float> %165, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !56
  %167 = fmul <4 x float> %163, %166, !dbg !56
  %168 = insertelement <4 x float> poison, float %127, i64 0, !dbg !57
  %169 = shufflevector <4 x float> %168, <4 x float> poison, <4 x i32> zeroinitializer, !dbg !57
  %170 = fmul <4 x float> %167, %169, !dbg !57
  %171 = fadd <4 x float> %170, %154, !dbg !58
  %172 = fcmp olt <4 x float> %171, zeroinitializer, !dbg !59
  %173 = extractelement <4 x i1> %172, i64 3, !dbg !63
  %174 = extractelement <4 x i1> %172, i64 2, !dbg !63
  %175 = extractelement <4 x i1> %172, i64 1, !dbg !63
  %176 = extractelement <4 x i1> %172, i64 0, !dbg !63
  tail call void @llvm.nvvm.barrier0(), !dbg !64
  %177 = and i32 %15, 96, !dbg !65
  %178 = icmp eq i32 %177, 0, !dbg !65
  %179 = bitcast float %151 to i32, !dbg !65
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %179, ptr addrspace(1) %28, i1 %178) #5, !dbg !65
  %180 = bitcast float %84 to i32, !dbg !66
  %181 = bitcast float %83 to i32, !dbg !66
  %182 = bitcast float %86 to i32, !dbg !66
  %183 = bitcast float %88 to i32, !dbg !66
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %180, i32 %181, i32 %182, i32 %183, ptr addrspace(1) %48, i1 true) #5, !dbg !66
  %184 = getelementptr float, ptr addrspace(1) %8, i64 %47, !dbg !67
  %bc = bitcast <4 x float> %171 to <4 x i32>, !dbg !68
  %185 = extractelement <4 x i32> %bc, i64 3, !dbg !68
  %186 = select i1 %173, i32 0, i32 %185, !dbg !63
  %bc17 = bitcast <4 x float> %171 to <4 x i32>, !dbg !68
  %187 = extractelement <4 x i32> %bc17, i64 2, !dbg !68
  %188 = select i1 %174, i32 0, i32 %187, !dbg !63
  %bc18 = bitcast <4 x float> %171 to <4 x i32>, !dbg !68
  %189 = extractelement <4 x i32> %bc18, i64 1, !dbg !68
  %190 = select i1 %175, i32 0, i32 %189, !dbg !63
  %bc19 = bitcast <4 x float> %171 to <4 x i32>, !dbg !68
  %191 = extractelement <4 x i32> %bc19, i64 0, !dbg !68
  %192 = select i1 %176, i32 0, i32 %191, !dbg !63
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %186, i32 %188, i32 %190, i32 %192, ptr addrspace(1) %184, i1 true) #5, !dbg !68
  %193 = getelementptr float, ptr addrspace(1) %9, i64 %27, !dbg !69
  %194 = bitcast float %.0.i to i32, !dbg !70
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %194, ptr addrspace(1) %193, i1 %178) #5, !dbg !70
  %195 = getelementptr float, ptr addrspace(1) %7, i64 %27, !dbg !71
  %196 = bitcast float %100 to i32, !dbg !72
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %196, ptr addrspace(1) %195, i1 %178) #5, !dbg !72
  ret void, !dbg !73
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cgwfh23ztlwi7knajfvy2chl4ipe75axop5xaoxnbaxkl7rrvrv5.py", directory: "inductor_cache/gw")
!4 = !{ptr @triton_per_fused__native_batch_norm_legit_add_convolution_mul_relu_sigmoid_33, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__native_batch_norm_legit_add_convolution_mul_relu_sigmoid_33, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__native_batch_norm_legit_add_convolution_mul_relu_sigmoid_33", linkageName: "triton_per_fused__native_batch_norm_legit_add_convolution_mul_relu_sigmoid_33", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 26, column: 34, scope: !7)
!15 = !DILocation(line: 30, column: 19, scope: !7)
!16 = !DILocation(line: 32, column: 34, scope: !7)
!17 = !DILocation(line: 32, column: 39, scope: !7)
!18 = !DILocation(line: 33, column: 30, scope: !7)
!19 = !DILocation(line: 33, column: 35, scope: !7)
!20 = !DILocation(line: 34, column: 42, scope: !7)
!21 = !DILocation(line: 34, column: 39, scope: !7)
!22 = !DILocation(line: 34, column: 34, scope: !7)
!23 = !DILocation(line: 34, column: 47, scope: !7)
!24 = !DILocation(line: 35, column: 30, scope: !7)
!25 = !DILocation(line: 35, column: 35, scope: !7)
!26 = !DILocation(line: 36, column: 31, scope: !7)
!27 = !DILocation(line: 36, column: 44, scope: !7)
!28 = !DILocation(line: 37, column: 31, scope: !7)
!29 = !DILocation(line: 37, column: 36, scope: !7)
!30 = !DILocation(line: 38, column: 31, scope: !7)
!31 = !DILocation(line: 38, column: 36, scope: !7)
!32 = !DILocation(line: 39, column: 18, scope: !7)
!33 = !DILocation(line: 46, column: 20, scope: !7)
!34 = !DILocation(line: 40, column: 18, scope: !7)
!35 = !DILocation(line: 256, column: 15, scope: !36, inlinedAt: !39)
!36 = distinct !DILexicalBlockFile(scope: !38, file: !37, discriminator: 0)
!37 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!38 = distinct !DILexicalBlockFile(scope: !7, file: !37, discriminator: 0)
!39 = !DILocation(line: 43, column: 25, scope: !7)
!40 = !DILocation(line: 267, column: 36, scope: !38, inlinedAt: !39)
!41 = !DILocation(line: 47, column: 19, scope: !7)
!42 = !DILocation(line: 48, column: 20, scope: !7)
!43 = !DILocation(line: 256, column: 15, scope: !36, inlinedAt: !44)
!44 = !DILocation(line: 50, column: 26, scope: !7)
!45 = !DILocation(line: 267, column: 36, scope: !38, inlinedAt: !44)
!46 = !DILocation(line: 60, column: 28, scope: !7)
!47 = !DILocation(line: 47, column: 30, scope: !38, inlinedAt: !48)
!48 = !DILocation(line: 53, column: 23, scope: !7)
!49 = !DILocation(line: 47, column: 29, scope: !38, inlinedAt: !48)
!50 = !DILocation(line: 47, column: 20, scope: !38, inlinedAt: !48)
!51 = !DILocation(line: 47, column: 16, scope: !38, inlinedAt: !48)
!52 = !DILocation(line: 57, column: 20, scope: !7)
!53 = !DILocation(line: 59, column: 20, scope: !7)
!54 = !DILocation(line: 61, column: 20, scope: !7)
!55 = !DILocation(line: 51, column: 20, scope: !7)
!56 = !DILocation(line: 52, column: 20, scope: !7)
!57 = !DILocation(line: 54, column: 20, scope: !7)
!58 = !DILocation(line: 62, column: 20, scope: !7)
!59 = !DILocation(line: 118, column: 15, scope: !60, inlinedAt: !62)
!60 = distinct !DILexicalBlockFile(scope: !7, file: !61, discriminator: 0)
!61 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!62 = !DILocation(line: 64, column: 42, scope: !7)
!63 = !DILocation(line: 121, column: 29, scope: !60, inlinedAt: !62)
!64 = !DILocation(line: 65, column: 4, scope: !7)
!65 = !DILocation(line: 66, column: 39, scope: !7)
!66 = !DILocation(line: 67, column: 47, scope: !7)
!67 = !DILocation(line: 68, column: 25, scope: !7)
!68 = !DILocation(line: 68, column: 45, scope: !7)
!69 = !DILocation(line: 69, column: 25, scope: !7)
!70 = !DILocation(line: 69, column: 37, scope: !7)
!71 = !DILocation(line: 70, column: 25, scope: !7)
!72 = !DILocation(line: 70, column: 37, scope: !7)
!73 = !DILocation(line: 70, column: 4, scope: !7)
