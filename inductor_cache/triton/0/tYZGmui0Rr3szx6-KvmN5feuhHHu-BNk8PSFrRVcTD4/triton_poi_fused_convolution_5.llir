; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_5(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 7, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 3, !dbg !12
  %10 = and i32 %9, 31, !dbg !12
  %11 = shl i32 %8, 2, !dbg !12
  %12 = and i32 %11, 28, !dbg !12
  %13 = and i32 %11, 124, !dbg !12
  %14 = or disjoint i32 %7, %10, !dbg !13
  %15 = or disjoint i32 %14, 32, !dbg !13
  %16 = or disjoint i32 %14, 64, !dbg !13
  %17 = or disjoint i32 %14, 96, !dbg !13
  %18 = or disjoint i32 %7, %13, !dbg !13
  %19 = icmp slt i32 %14, 128, !dbg !14
  %20 = icmp slt i32 %15, 128, !dbg !14
  %21 = icmp slt i32 %16, 128, !dbg !14
  %22 = icmp slt i32 %17, 128, !dbg !14
  %23 = icmp slt i32 %18, 128, !dbg !14
  %24 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %25 = shl i32 %24, 5, !dbg !16
  %26 = lshr i32 %8, 5, !dbg !17
  %27 = and i32 %26, 7, !dbg !17
  %28 = or disjoint i32 %25, %12, !dbg !18
  %29 = or disjoint i32 %25, %27, !dbg !18
  %30 = or disjoint i32 %29, 8, !dbg !18
  %31 = or disjoint i32 %29, 16, !dbg !18
  %32 = or disjoint i32 %29, 24, !dbg !18
  %33 = icmp slt i32 %28, 576, !dbg !19
  %34 = icmp slt i32 %29, 576, !dbg !19
  %35 = icmp slt i32 %30, 576, !dbg !19
  %36 = icmp slt i32 %31, 576, !dbg !19
  %37 = icmp slt i32 %32, 576, !dbg !19
  %38 = srem i32 %14, 32, !dbg !20
  %.frozen = freeze i32 %18, !dbg !21
  %39 = sdiv i32 %.frozen, 32, !dbg !21
  %40 = mul i32 %39, 32, !dbg !20
  %.decomposed = sub i32 %.frozen, %40, !dbg !20
  %41 = mul i32 %14, 576, !dbg !22
  %42 = mul i32 %15, 576, !dbg !22
  %43 = mul i32 %16, 576, !dbg !22
  %44 = mul i32 %17, 576, !dbg !22
  %45 = add i32 %28, %41, !dbg !23
  %46 = add i32 %28, %42, !dbg !23
  %47 = add i32 %28, %43, !dbg !23
  %48 = add i32 %28, %44, !dbg !23
  %49 = sext i32 %45 to i64, !dbg !24
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !24
  %51 = sext i32 %46 to i64, !dbg !24
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !24
  %53 = sext i32 %47 to i64, !dbg !24
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !24
  %55 = sext i32 %48 to i64, !dbg !24
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !24
  %57 = and i1 %19, %33, !dbg !25
  %58 = and i1 %20, %33, !dbg !25
  %59 = and i1 %21, %33, !dbg !25
  %60 = and i1 %22, %33, !dbg !25
  %61 = and i1 %23, %34, !dbg !25
  %62 = and i1 %35, %23, !dbg !25
  %63 = and i1 %36, %23, !dbg !25
  %64 = and i1 %37, %23, !dbg !25
  %65 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %50, i1 %57) #2, !dbg !26
  %66 = extractvalue { i32, i32, i32, i32 } %65, 0, !dbg !26
  %67 = extractvalue { i32, i32, i32, i32 } %65, 1, !dbg !26
  %68 = extractvalue { i32, i32, i32, i32 } %65, 2, !dbg !26
  %69 = extractvalue { i32, i32, i32, i32 } %65, 3, !dbg !26
  %70 = bitcast i32 %66 to float, !dbg !26
  %71 = bitcast i32 %67 to float, !dbg !26
  %72 = bitcast i32 %68 to float, !dbg !26
  %73 = bitcast i32 %69 to float, !dbg !26
  %74 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %52, i1 %58) #2, !dbg !26
  %75 = extractvalue { i32, i32, i32, i32 } %74, 0, !dbg !26
  %76 = extractvalue { i32, i32, i32, i32 } %74, 1, !dbg !26
  %77 = extractvalue { i32, i32, i32, i32 } %74, 2, !dbg !26
  %78 = extractvalue { i32, i32, i32, i32 } %74, 3, !dbg !26
  %79 = bitcast i32 %75 to float, !dbg !26
  %80 = bitcast i32 %76 to float, !dbg !26
  %81 = bitcast i32 %77 to float, !dbg !26
  %82 = bitcast i32 %78 to float, !dbg !26
  %83 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %54, i1 %59) #2, !dbg !26
  %84 = extractvalue { i32, i32, i32, i32 } %83, 0, !dbg !26
  %85 = extractvalue { i32, i32, i32, i32 } %83, 1, !dbg !26
  %86 = extractvalue { i32, i32, i32, i32 } %83, 2, !dbg !26
  %87 = extractvalue { i32, i32, i32, i32 } %83, 3, !dbg !26
  %88 = bitcast i32 %84 to float, !dbg !26
  %89 = bitcast i32 %85 to float, !dbg !26
  %90 = bitcast i32 %86 to float, !dbg !26
  %91 = bitcast i32 %87 to float, !dbg !26
  %92 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %56, i1 %60) #2, !dbg !26
  %93 = extractvalue { i32, i32, i32, i32 } %92, 0, !dbg !26
  %94 = extractvalue { i32, i32, i32, i32 } %92, 1, !dbg !26
  %95 = extractvalue { i32, i32, i32, i32 } %92, 2, !dbg !26
  %96 = extractvalue { i32, i32, i32, i32 } %92, 3, !dbg !26
  %97 = bitcast i32 %93 to float, !dbg !26
  %98 = bitcast i32 %94 to float, !dbg !26
  %99 = bitcast i32 %95 to float, !dbg !26
  %100 = bitcast i32 %96 to float, !dbg !26
  %101 = sext i32 %38 to i64, !dbg !27
  %102 = getelementptr float, ptr addrspace(1) %1, i64 %101, !dbg !27
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %102, i1 %19) #2, !dbg !28
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %102, i1 %19) #2, !dbg !28
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %102, i1 %19) #2, !dbg !28
  %106 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %102, i1 %19) #2, !dbg !28
  %107 = bitcast i32 %106 to float, !dbg !28
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %102, i1 %20) #2, !dbg !28
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %102, i1 %20) #2, !dbg !28
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %102, i1 %20) #2, !dbg !28
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %102, i1 %20) #2, !dbg !28
  %112 = bitcast i32 %111 to float, !dbg !28
  %113 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %102, i1 %21) #2, !dbg !28
  %114 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %102, i1 %21) #2, !dbg !28
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %102, i1 %21) #2, !dbg !28
  %116 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %102, i1 %21) #2, !dbg !28
  %117 = bitcast i32 %116 to float, !dbg !28
  %118 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %102, i1 %22) #2, !dbg !28
  %119 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %102, i1 %22) #2, !dbg !28
  %120 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %102, i1 %22) #2, !dbg !28
  %121 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %102, i1 %22) #2, !dbg !28
  %122 = bitcast i32 %121 to float, !dbg !28
  %123 = fadd float %70, %107, !dbg !29
  %124 = fadd float %71, %107, !dbg !29
  %125 = fadd float %72, %107, !dbg !29
  %126 = fadd float %73, %107, !dbg !29
  %127 = fadd float %79, %112, !dbg !29
  %128 = fadd float %80, %112, !dbg !29
  %129 = fadd float %81, %112, !dbg !29
  %130 = fadd float %82, %112, !dbg !29
  %131 = fadd float %88, %117, !dbg !29
  %132 = fadd float %89, %117, !dbg !29
  %133 = fadd float %90, %117, !dbg !29
  %134 = fadd float %91, %117, !dbg !29
  %135 = fadd float %97, %122, !dbg !29
  %136 = fadd float %98, %122, !dbg !29
  %137 = fadd float %99, %122, !dbg !29
  %138 = fadd float %100, %122, !dbg !29
  %139 = shl i32 %29, 5, !dbg !30
  %140 = shl i32 %30, 5, !dbg !30
  %141 = shl i32 %31, 5, !dbg !30
  %142 = shl i32 %32, 5, !dbg !30
  %143 = mul i32 %39, 18432, !dbg !31
  %144 = add i32 %143, %.decomposed, !dbg !32
  %145 = add i32 %144, %139, !dbg !33
  %146 = add i32 %144, %140, !dbg !33
  %147 = add i32 %144, %141, !dbg !33
  %148 = add i32 %144, %142, !dbg !33
  %149 = sext i32 %145 to i64, !dbg !34
  %150 = getelementptr float, ptr addrspace(1) %2, i64 %149, !dbg !34
  %151 = sext i32 %146 to i64, !dbg !34
  %152 = getelementptr float, ptr addrspace(1) %2, i64 %151, !dbg !34
  %153 = sext i32 %147 to i64, !dbg !34
  %154 = getelementptr float, ptr addrspace(1) %2, i64 %153, !dbg !34
  %155 = sext i32 %148 to i64, !dbg !34
  %156 = getelementptr float, ptr addrspace(1) %2, i64 %155, !dbg !34
  %157 = shl i32 %8, 9, !dbg !35
  %158 = and i32 %157, 3584, !dbg !35
  %159 = or disjoint i32 %158, %10, !dbg !35
  %160 = and i32 %11, 1020, !dbg !35
  %161 = lshr exact i32 %158, 3, !dbg !35
  %162 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %161, !dbg !35
  %163 = getelementptr float, ptr addrspace(3) %162, i32 %159, !dbg !35
  %164 = bitcast float %123 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %163, <1 x i32> %164, i1 true) #2, !dbg !35
  %165 = or disjoint i32 %159, 128, !dbg !35
  %166 = lshr i32 %165, 5, !dbg !35
  %167 = getelementptr float, ptr addrspace(3) @global_smem, i32 %166, !dbg !35
  %168 = getelementptr float, ptr addrspace(3) %167, i32 %165, !dbg !35
  %169 = bitcast float %124 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %168, <1 x i32> %169, i1 true) #2, !dbg !35
  %170 = or disjoint i32 %159, 256, !dbg !35
  %171 = lshr i32 %170, 5, !dbg !35
  %172 = getelementptr float, ptr addrspace(3) @global_smem, i32 %171, !dbg !35
  %173 = getelementptr float, ptr addrspace(3) %172, i32 %170, !dbg !35
  %174 = bitcast float %125 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %173, <1 x i32> %174, i1 true) #2, !dbg !35
  %175 = or disjoint i32 %159, 384, !dbg !35
  %176 = lshr i32 %175, 5, !dbg !35
  %177 = getelementptr float, ptr addrspace(3) @global_smem, i32 %176, !dbg !35
  %178 = getelementptr float, ptr addrspace(3) %177, i32 %175, !dbg !35
  %179 = bitcast float %126 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %178, <1 x i32> %179, i1 true) #2, !dbg !35
  %180 = or disjoint i32 %159, 32, !dbg !35
  %181 = getelementptr float, ptr addrspace(3) %162, i32 %180, !dbg !35
  %182 = bitcast float %127 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %181, <1 x i32> %182, i1 true) #2, !dbg !35
  %183 = or disjoint i32 %159, 160, !dbg !35
  %184 = lshr i32 %183, 5, !dbg !35
  %185 = and i32 %184, 116, !dbg !35
  %186 = getelementptr float, ptr addrspace(3) @global_smem, i32 %185, !dbg !35
  %187 = getelementptr float, ptr addrspace(3) %186, i32 %183, !dbg !35
  %188 = bitcast float %128 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %187, <1 x i32> %188, i1 true) #2, !dbg !35
  %189 = or disjoint i32 %159, 288, !dbg !35
  %190 = lshr i32 %189, 5, !dbg !35
  %191 = and i32 %190, 120, !dbg !35
  %192 = getelementptr float, ptr addrspace(3) @global_smem, i32 %191, !dbg !35
  %193 = getelementptr float, ptr addrspace(3) %192, i32 %189, !dbg !35
  %194 = bitcast float %129 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %193, <1 x i32> %194, i1 true) #2, !dbg !35
  %195 = or disjoint i32 %159, 416, !dbg !35
  %196 = lshr i32 %195, 5, !dbg !35
  %197 = and i32 %196, 124, !dbg !35
  %198 = getelementptr float, ptr addrspace(3) @global_smem, i32 %197, !dbg !35
  %199 = getelementptr float, ptr addrspace(3) %198, i32 %195, !dbg !35
  %200 = bitcast float %130 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %199, <1 x i32> %200, i1 true) #2, !dbg !35
  %201 = or disjoint i32 %159, 64, !dbg !35
  %202 = getelementptr float, ptr addrspace(3) %162, i32 %201, !dbg !35
  %203 = bitcast float %131 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %202, <1 x i32> %203, i1 true) #2, !dbg !35
  %204 = or disjoint i32 %159, 192, !dbg !35
  %205 = lshr i32 %204, 5, !dbg !35
  %206 = and i32 %205, 116, !dbg !35
  %207 = getelementptr float, ptr addrspace(3) @global_smem, i32 %206, !dbg !35
  %208 = getelementptr float, ptr addrspace(3) %207, i32 %204, !dbg !35
  %209 = bitcast float %132 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %208, <1 x i32> %209, i1 true) #2, !dbg !35
  %210 = or disjoint i32 %159, 320, !dbg !35
  %211 = lshr i32 %210, 5, !dbg !35
  %212 = and i32 %211, 120, !dbg !35
  %213 = getelementptr float, ptr addrspace(3) @global_smem, i32 %212, !dbg !35
  %214 = getelementptr float, ptr addrspace(3) %213, i32 %210, !dbg !35
  %215 = bitcast float %133 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %214, <1 x i32> %215, i1 true) #2, !dbg !35
  %216 = or disjoint i32 %159, 448, !dbg !35
  %217 = lshr i32 %216, 5, !dbg !35
  %218 = and i32 %217, 124, !dbg !35
  %219 = getelementptr float, ptr addrspace(3) @global_smem, i32 %218, !dbg !35
  %220 = getelementptr float, ptr addrspace(3) %219, i32 %216, !dbg !35
  %221 = bitcast float %134 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %220, <1 x i32> %221, i1 true) #2, !dbg !35
  %222 = or disjoint i32 %159, 96, !dbg !35
  %223 = getelementptr float, ptr addrspace(3) %162, i32 %222, !dbg !35
  %224 = bitcast float %135 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %223, <1 x i32> %224, i1 true) #2, !dbg !35
  %225 = or disjoint i32 %159, 224, !dbg !35
  %226 = lshr i32 %225, 5, !dbg !35
  %227 = and i32 %226, 116, !dbg !35
  %228 = getelementptr float, ptr addrspace(3) @global_smem, i32 %227, !dbg !35
  %229 = getelementptr float, ptr addrspace(3) %228, i32 %225, !dbg !35
  %230 = bitcast float %136 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %229, <1 x i32> %230, i1 true) #2, !dbg !35
  %231 = or disjoint i32 %159, 352, !dbg !35
  %232 = lshr i32 %231, 5, !dbg !35
  %233 = and i32 %232, 120, !dbg !35
  %234 = getelementptr float, ptr addrspace(3) @global_smem, i32 %233, !dbg !35
  %235 = getelementptr float, ptr addrspace(3) %234, i32 %231, !dbg !35
  %236 = bitcast float %137 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %235, <1 x i32> %236, i1 true) #2, !dbg !35
  %237 = or disjoint i32 %159, 480, !dbg !35
  %238 = lshr i32 %237, 5, !dbg !35
  %239 = and i32 %238, 124, !dbg !35
  %240 = getelementptr float, ptr addrspace(3) @global_smem, i32 %239, !dbg !35
  %241 = getelementptr float, ptr addrspace(3) %240, i32 %237, !dbg !35
  %242 = bitcast float %138 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %241, <1 x i32> %242, i1 true) #2, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %243 = lshr i32 %11, 5, !dbg !35
  %244 = and i32 %243, 28, !dbg !35
  %245 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %244, !dbg !35
  %246 = getelementptr inbounds float, ptr addrspace(3) %245, i32 %160, !dbg !35
  %247 = or disjoint i32 %160, 1024, !dbg !35
  %248 = lshr i32 %247, 5, !dbg !35
  %249 = and i32 %248, 60, !dbg !35
  %250 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %249, !dbg !35
  %251 = getelementptr inbounds float, ptr addrspace(3) %250, i32 %247, !dbg !35
  %252 = load <4 x i32>, ptr addrspace(3) %251, align 16, !dbg !35
  %253 = or disjoint i32 %160, 2048, !dbg !35
  %254 = lshr i32 %253, 5, !dbg !35
  %255 = and i32 %254, 92, !dbg !35
  %256 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %255, !dbg !35
  %257 = getelementptr inbounds float, ptr addrspace(3) %256, i32 %253, !dbg !35
  %258 = load <4 x i32>, ptr addrspace(3) %257, align 16, !dbg !35
  %259 = or disjoint i32 %160, 3072, !dbg !35
  %260 = lshr i32 %259, 5, !dbg !35
  %261 = and i32 %260, 124, !dbg !35
  %262 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %261, !dbg !35
  %263 = getelementptr inbounds float, ptr addrspace(3) %262, i32 %259, !dbg !35
  %264 = load <4 x i32>, ptr addrspace(3) %263, align 16, !dbg !35
  %.extract = load i32, ptr addrspace(3) %246, align 16, !dbg !35
  %265 = getelementptr inbounds i8, ptr addrspace(3) %246, i32 4, !dbg !35
  %.extract18 = load i32, ptr addrspace(3) %265, align 4, !dbg !35
  %266 = getelementptr inbounds i8, ptr addrspace(3) %246, i32 8, !dbg !35
  %.extract19 = load i32, ptr addrspace(3) %266, align 8, !dbg !35
  %267 = getelementptr inbounds i8, ptr addrspace(3) %246, i32 12, !dbg !35
  %.extract20 = load i32, ptr addrspace(3) %267, align 4, !dbg !35
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract18, i32 %.extract19, i32 %.extract20, ptr addrspace(1) %150, i1 %61) #2, !dbg !35
  %.extract21 = extractelement <4 x i32> %252, i64 0, !dbg !35
  %.extract22 = extractelement <4 x i32> %252, i64 1, !dbg !35
  %.extract23 = extractelement <4 x i32> %252, i64 2, !dbg !35
  %.extract24 = extractelement <4 x i32> %252, i64 3, !dbg !35
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract21, i32 %.extract22, i32 %.extract23, i32 %.extract24, ptr addrspace(1) %152, i1 %62) #2, !dbg !35
  %.extract25 = extractelement <4 x i32> %258, i64 0, !dbg !35
  %.extract26 = extractelement <4 x i32> %258, i64 1, !dbg !35
  %.extract27 = extractelement <4 x i32> %258, i64 2, !dbg !35
  %.extract28 = extractelement <4 x i32> %258, i64 3, !dbg !35
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract25, i32 %.extract26, i32 %.extract27, i32 %.extract28, ptr addrspace(1) %154, i1 %63) #2, !dbg !35
  %.extract29 = extractelement <4 x i32> %264, i64 0, !dbg !35
  %.extract30 = extractelement <4 x i32> %264, i64 1, !dbg !35
  %.extract31 = extractelement <4 x i32> %264, i64 2, !dbg !35
  %.extract32 = extractelement <4 x i32> %264, i64 3, !dbg !35
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract29, i32 %.extract30, i32 %.extract31, i32 %.extract32, ptr addrspace(1) %156, i1 %64) #2, !dbg !35
  ret void, !dbg !36
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cpzrn4m5hgkv7qrqfldtmffoiftvvqj6xuuzdaudvdl3yss5n6nu.py", directory: "inductor_cache/pz")
!4 = !{ptr @triton_poi_fused_convolution_5, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_5, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_5", linkageName: "triton_poi_fused_convolution_5", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 31, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 39, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 30, scope: !7)
!25 = !DILocation(line: 32, column: 52, scope: !7)
!26 = !DILocation(line: 32, column: 44, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 33, column: 35, scope: !7)
!29 = !DILocation(line: 34, column: 18, scope: !7)
!30 = !DILocation(line: 35, column: 33, scope: !7)
!31 = !DILocation(line: 35, column: 44, scope: !7)
!32 = !DILocation(line: 35, column: 30, scope: !7)
!33 = !DILocation(line: 35, column: 38, scope: !7)
!34 = !DILocation(line: 35, column: 25, scope: !7)
!35 = !DILocation(line: 35, column: 55, scope: !7)
!36 = !DILocation(line: 35, column: 4, scope: !7)
