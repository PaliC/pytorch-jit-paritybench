; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_mul_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, i32 %12) local_unnamed_addr !dbg !7 {
  %14 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %15 = shl i32 %14, 9, !dbg !11
  %16 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %17 = shl i32 %16, 1, !dbg !12
  %18 = and i32 %17, 510, !dbg !12
  %19 = or disjoint i32 %15, %18, !dbg !13
  %20 = srem i32 %19, 2048, !dbg !14
  %21 = sext i32 %19 to i64, !dbg !15
  %22 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !15
  %23 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %22, i1 true) #3, !dbg !16
  %24 = getelementptr float, ptr addrspace(1) %1, i64 %21, !dbg !17
  %25 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %24, i1 true) #3, !dbg !18
  %26 = sext i32 %20 to i64, !dbg !19
  %27 = getelementptr float, ptr addrspace(1) %2, i64 %26, !dbg !19
  %28 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %27, i1 true) #3, !dbg !20
  %29 = getelementptr float, ptr addrspace(1) %3, i64 %26, !dbg !21
  %30 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %29, i1 true) #3, !dbg !22
  %31 = extractvalue { i32, i32 } %30, 0, !dbg !22
  %32 = extractvalue { i32, i32 } %30, 1, !dbg !22
  %33 = bitcast i32 %31 to float, !dbg !22
  %34 = bitcast i32 %32 to float, !dbg !22
  %35 = getelementptr float, ptr addrspace(1) %4, i64 %26, !dbg !23
  %36 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %35, i1 true) #3, !dbg !24
  %37 = getelementptr float, ptr addrspace(1) %5, i64 %26, !dbg !25
  %38 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %37, i1 true) #3, !dbg !26
  %39 = getelementptr float, ptr addrspace(1) %6, i64 %21, !dbg !27
  %40 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !28
  %41 = getelementptr float, ptr addrspace(1) %7, i64 %26, !dbg !29
  %42 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %41, i1 true) #3, !dbg !30
  %43 = getelementptr float, ptr addrspace(1) %8, i64 %26, !dbg !31
  %44 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %43, i1 true) #3, !dbg !32
  %45 = extractvalue { i32, i32 } %44, 0, !dbg !32
  %46 = extractvalue { i32, i32 } %44, 1, !dbg !32
  %47 = bitcast i32 %45 to float, !dbg !32
  %48 = bitcast i32 %46 to float, !dbg !32
  %49 = getelementptr float, ptr addrspace(1) %9, i64 %26, !dbg !33
  %50 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %49, i1 true) #3, !dbg !34
  %51 = getelementptr float, ptr addrspace(1) %10, i64 %26, !dbg !35
  %52 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %51, i1 true) #3, !dbg !36
  %53 = fadd float %33, 0x3EE4F8B580000000, !dbg !37
  %54 = fadd float %34, 0x3EE4F8B580000000, !dbg !37
  %55 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %.not.i = icmp eq i32 %55, 0, !dbg !38
  %56 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !38
  %.not1.i = icmp eq i32 %56, 0, !dbg !38
  br i1 %.not.i, label %62, label %57, !dbg !38

57:                                               ; preds = %13
  br i1 %.not1.i, label %60, label %58, !dbg !38

58:                                               ; preds = %57
  %59 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %53) #3, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

60:                                               ; preds = %57
  %61 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %53) #3, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

62:                                               ; preds = %13
  br i1 %.not1.i, label %65, label %63, !dbg !38

63:                                               ; preds = %62
  %64 = tail call float @llvm.nvvm.sqrt.rn.f(float %53) #3, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

65:                                               ; preds = %62
  %66 = tail call float @llvm.nvvm.sqrt.approx.f(float %53) #3, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

__nv_sqrtf.exit:                                  ; preds = %58, %60, %63, %65
  %.0.i = phi float [ %59, %58 ], [ %61, %60 ], [ %64, %63 ], [ %66, %65 ], !dbg !38
  %67 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %.not.i1 = icmp eq i32 %67, 0, !dbg !38
  %68 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !38
  %.not1.i4 = icmp eq i32 %68, 0, !dbg !38
  br i1 %.not.i1, label %74, label %69, !dbg !38

69:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %72, label %70, !dbg !38

70:                                               ; preds = %69
  %71 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %54) #3, !dbg !38
  br label %__nv_sqrtf.exit5, !dbg !38

72:                                               ; preds = %69
  %73 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %54) #3, !dbg !38
  br label %__nv_sqrtf.exit5, !dbg !38

74:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %77, label %75, !dbg !38

75:                                               ; preds = %74
  %76 = tail call float @llvm.nvvm.sqrt.rn.f(float %54) #3, !dbg !38
  br label %__nv_sqrtf.exit5, !dbg !38

77:                                               ; preds = %74
  %78 = tail call float @llvm.nvvm.sqrt.approx.f(float %54) #3, !dbg !38
  br label %__nv_sqrtf.exit5, !dbg !38

__nv_sqrtf.exit5:                                 ; preds = %70, %72, %75, %77
  %.0.i3 = phi float [ %71, %70 ], [ %73, %72 ], [ %76, %75 ], [ %78, %77 ], !dbg !38
  %79 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !39
  %80 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !39
  %81 = fadd float %47, 0x3EE4F8B580000000, !dbg !40
  %82 = fadd float %48, 0x3EE4F8B580000000, !dbg !40
  %83 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !41
  %.not.i6 = icmp eq i32 %83, 0, !dbg !41
  %84 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !41
  %.not1.i9 = icmp eq i32 %84, 0, !dbg !41
  br i1 %.not.i6, label %90, label %85, !dbg !41

85:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %88, label %86, !dbg !41

86:                                               ; preds = %85
  %87 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %81) #3, !dbg !41
  br label %__nv_sqrtf.exit10, !dbg !41

88:                                               ; preds = %85
  %89 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %81) #3, !dbg !41
  br label %__nv_sqrtf.exit10, !dbg !41

90:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %93, label %91, !dbg !41

91:                                               ; preds = %90
  %92 = tail call float @llvm.nvvm.sqrt.rn.f(float %81) #3, !dbg !41
  br label %__nv_sqrtf.exit10, !dbg !41

93:                                               ; preds = %90
  %94 = tail call float @llvm.nvvm.sqrt.approx.f(float %81) #3, !dbg !41
  br label %__nv_sqrtf.exit10, !dbg !41

__nv_sqrtf.exit10:                                ; preds = %86, %88, %91, %93
  %.0.i8 = phi float [ %87, %86 ], [ %89, %88 ], [ %92, %91 ], [ %94, %93 ], !dbg !41
  %95 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !41
  %.not.i11 = icmp eq i32 %95, 0, !dbg !41
  %96 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !41
  %.not1.i14 = icmp eq i32 %96, 0, !dbg !41
  br i1 %.not.i11, label %102, label %97, !dbg !41

97:                                               ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %100, label %98, !dbg !41

98:                                               ; preds = %97
  %99 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %82) #3, !dbg !41
  br label %__nv_sqrtf.exit15, !dbg !41

100:                                              ; preds = %97
  %101 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %82) #3, !dbg !41
  br label %__nv_sqrtf.exit15, !dbg !41

102:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %105, label %103, !dbg !41

103:                                              ; preds = %102
  %104 = tail call float @llvm.nvvm.sqrt.rn.f(float %82) #3, !dbg !41
  br label %__nv_sqrtf.exit15, !dbg !41

105:                                              ; preds = %102
  %106 = tail call float @llvm.nvvm.sqrt.approx.f(float %82) #3, !dbg !41
  br label %__nv_sqrtf.exit15, !dbg !41

__nv_sqrtf.exit15:                                ; preds = %98, %100, %103, %105
  %.0.i13 = phi float [ %99, %98 ], [ %101, %100 ], [ %104, %103 ], [ %106, %105 ], !dbg !41
  %107 = extractvalue { i32, i32 } %40, 1, !dbg !28
  %108 = extractvalue { i32, i32 } %42, 1, !dbg !30
  %109 = extractvalue { i32, i32 } %40, 0, !dbg !28
  %110 = extractvalue { i32, i32 } %42, 0, !dbg !30
  %111 = extractvalue { i32, i32 } %25, 1, !dbg !18
  %112 = extractvalue { i32, i32 } %28, 1, !dbg !20
  %113 = extractvalue { i32, i32 } %36, 1, !dbg !24
  %114 = extractvalue { i32, i32 } %38, 1, !dbg !26
  %115 = extractvalue { i32, i32 } %23, 1, !dbg !16
  %116 = bitcast i32 %115 to float, !dbg !16
  %117 = extractvalue { i32, i32 } %25, 0, !dbg !18
  %118 = extractvalue { i32, i32 } %28, 0, !dbg !20
  %119 = extractvalue { i32, i32 } %36, 0, !dbg !24
  %120 = extractvalue { i32, i32 } %38, 0, !dbg !26
  %121 = extractvalue { i32, i32 } %23, 0, !dbg !16
  %122 = bitcast i32 %121 to float, !dbg !16
  %123 = extractvalue { i32, i32 } %52, 1, !dbg !36
  %124 = extractvalue { i32, i32 } %52, 0, !dbg !36
  %125 = extractvalue { i32, i32 } %50, 1, !dbg !34
  %126 = extractvalue { i32, i32 } %50, 0, !dbg !34
  %127 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !42
  %128 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !42
  %129 = insertelement <2 x i32> poison, i32 %117, i64 0, !dbg !18
  %130 = insertelement <2 x i32> %129, i32 %109, i64 1, !dbg !18
  %131 = bitcast <2 x i32> %130 to <2 x float>, !dbg !18
  %132 = insertelement <2 x i32> poison, i32 %118, i64 0, !dbg !20
  %133 = insertelement <2 x i32> %132, i32 %110, i64 1, !dbg !20
  %134 = bitcast <2 x i32> %133 to <2 x float>, !dbg !20
  %135 = fsub <2 x float> %131, %134, !dbg !43
  %136 = insertelement <2 x i32> poison, i32 %120, i64 0, !dbg !26
  %137 = insertelement <2 x i32> %136, i32 %124, i64 1, !dbg !26
  %138 = bitcast <2 x i32> %137 to <2 x float>, !dbg !26
  %139 = insertelement <2 x i32> poison, i32 %119, i64 0, !dbg !24
  %140 = insertelement <2 x i32> %139, i32 %126, i64 1, !dbg !24
  %141 = bitcast <2 x i32> %140 to <2 x float>, !dbg !24
  %142 = insertelement <2 x float> poison, float %79, i64 0, !dbg !44
  %143 = insertelement <2 x float> %142, float %127, i64 1, !dbg !44
  %144 = fmul <2 x float> %135, %143, !dbg !44
  %145 = fmul <2 x float> %144, %141, !dbg !45
  %146 = fadd <2 x float> %145, %138, !dbg !46
  %147 = extractelement <2 x float> %146, i64 0, !dbg !47
  %148 = fadd float %147, %122, !dbg !47
  %149 = insertelement <2 x i32> poison, i32 %111, i64 0, !dbg !18
  %150 = insertelement <2 x i32> %149, i32 %107, i64 1, !dbg !18
  %151 = bitcast <2 x i32> %150 to <2 x float>, !dbg !18
  %152 = insertelement <2 x i32> poison, i32 %112, i64 0, !dbg !20
  %153 = insertelement <2 x i32> %152, i32 %108, i64 1, !dbg !20
  %154 = bitcast <2 x i32> %153 to <2 x float>, !dbg !20
  %155 = fsub <2 x float> %151, %154, !dbg !43
  %156 = insertelement <2 x i32> poison, i32 %114, i64 0, !dbg !26
  %157 = insertelement <2 x i32> %156, i32 %123, i64 1, !dbg !26
  %158 = bitcast <2 x i32> %157 to <2 x float>, !dbg !26
  %159 = insertelement <2 x i32> poison, i32 %113, i64 0, !dbg !24
  %160 = insertelement <2 x i32> %159, i32 %125, i64 1, !dbg !24
  %161 = bitcast <2 x i32> %160 to <2 x float>, !dbg !24
  %162 = insertelement <2 x float> poison, float %80, i64 0, !dbg !44
  %163 = insertelement <2 x float> %162, float %128, i64 1, !dbg !44
  %164 = fmul <2 x float> %155, %163, !dbg !44
  %165 = fmul <2 x float> %164, %161, !dbg !45
  %166 = fadd <2 x float> %165, %158, !dbg !46
  %167 = extractelement <2 x float> %166, i64 0, !dbg !47
  %168 = fadd float %167, %116, !dbg !47
  %169 = extractelement <2 x float> %146, i64 1, !dbg !48
  %170 = fadd float %148, %169, !dbg !48
  %171 = extractelement <2 x float> %166, i64 1, !dbg !48
  %172 = fadd float %168, %171, !dbg !48
  %173 = getelementptr float, ptr addrspace(1) %11, i64 %21, !dbg !49
  %174 = bitcast float %170 to i32, !dbg !50
  %175 = bitcast float %172 to i32, !dbg !50
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %174, i32 %175, ptr addrspace(1) %173, i1 true) #3, !dbg !50
  ret void, !dbg !51
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cak7fmjczfzp77yvifbvxh4e4yvrxwv2peytnzkzdhn2svh2cidt.py", directory: "inductor_cache/ak")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_mul_6, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_mul_6, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_mul_6", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_mul_6", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 30, scope: !7)
!16 = !DILocation(line: 26, column: 35, scope: !7)
!17 = !DILocation(line: 27, column: 30, scope: !7)
!18 = !DILocation(line: 27, column: 35, scope: !7)
!19 = !DILocation(line: 28, column: 30, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 29, column: 30, scope: !7)
!22 = !DILocation(line: 29, column: 35, scope: !7)
!23 = !DILocation(line: 30, column: 31, scope: !7)
!24 = !DILocation(line: 30, column: 36, scope: !7)
!25 = !DILocation(line: 31, column: 31, scope: !7)
!26 = !DILocation(line: 31, column: 36, scope: !7)
!27 = !DILocation(line: 32, column: 31, scope: !7)
!28 = !DILocation(line: 32, column: 36, scope: !7)
!29 = !DILocation(line: 33, column: 31, scope: !7)
!30 = !DILocation(line: 33, column: 36, scope: !7)
!31 = !DILocation(line: 34, column: 31, scope: !7)
!32 = !DILocation(line: 34, column: 36, scope: !7)
!33 = !DILocation(line: 35, column: 31, scope: !7)
!34 = !DILocation(line: 35, column: 36, scope: !7)
!35 = !DILocation(line: 36, column: 32, scope: !7)
!36 = !DILocation(line: 36, column: 37, scope: !7)
!37 = !DILocation(line: 39, column: 18, scope: !7)
!38 = !DILocation(line: 40, column: 26, scope: !7)
!39 = !DILocation(line: 42, column: 18, scope: !7)
!40 = !DILocation(line: 51, column: 20, scope: !7)
!41 = !DILocation(line: 52, column: 27, scope: !7)
!42 = !DILocation(line: 53, column: 19, scope: !7)
!43 = !DILocation(line: 37, column: 18, scope: !7)
!44 = !DILocation(line: 45, column: 19, scope: !7)
!45 = !DILocation(line: 46, column: 20, scope: !7)
!46 = !DILocation(line: 47, column: 20, scope: !7)
!47 = !DILocation(line: 49, column: 19, scope: !7)
!48 = !DILocation(line: 59, column: 20, scope: !7)
!49 = !DILocation(line: 60, column: 25, scope: !7)
!50 = !DILocation(line: 60, column: 37, scope: !7)
!51 = !DILocation(line: 60, column: 4, scope: !7)
