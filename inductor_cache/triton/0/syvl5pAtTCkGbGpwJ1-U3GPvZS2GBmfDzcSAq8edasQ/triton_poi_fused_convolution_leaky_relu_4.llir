; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_leaky_relu_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %8 = shl i32 %7, 5, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = lshr i32 %9, 3, !dbg !12
  %11 = and i32 %10, 15, !dbg !12
  %12 = or disjoint i32 %11, 16, !dbg !12
  %13 = shl i32 %9, 3, !dbg !12
  %14 = and i32 %13, 24, !dbg !12
  %15 = shl i32 %9, 2, !dbg !12
  %16 = and i32 %15, 28, !dbg !12
  %17 = or disjoint i32 %8, %11, !dbg !13
  %18 = or disjoint i32 %8, %12, !dbg !13
  %19 = or disjoint i32 %8, %14, !dbg !13
  %20 = or disjoint i32 %8, %16, !dbg !13
  %21 = icmp slt i32 %17, 256, !dbg !14
  %22 = icmp slt i32 %18, 256, !dbg !14
  %23 = icmp slt i32 %19, 256, !dbg !14
  %24 = icmp slt i32 %20, 256, !dbg !14
  %25 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %26 = shl i32 %25, 5, !dbg !16
  %27 = lshr i32 %9, 2, !dbg !17
  %28 = and i32 %27, 31, !dbg !17
  %29 = or disjoint i32 %26, %16, !dbg !18
  %30 = or disjoint i32 %26, %28, !dbg !18
  %31 = or disjoint i32 %26, %11, !dbg !18
  %32 = or disjoint i32 %26, %12, !dbg !18
  %33 = icmp slt i32 %29, 2116, !dbg !19
  %34 = icmp slt i32 %30, 2116, !dbg !19
  %35 = icmp slt i32 %31, 2116, !dbg !19
  %36 = icmp slt i32 %32, 2116, !dbg !19
  %37 = srem i32 %17, 64, !dbg !20
  %38 = srem i32 %18, 64, !dbg !20
  %.frozen = freeze i32 %19, !dbg !21
  %39 = sdiv i32 %.frozen, 64, !dbg !21
  %40 = mul i32 %39, 64, !dbg !20
  %.decomposed = sub i32 %.frozen, %40, !dbg !20
  %.frozen22 = freeze i32 %20, !dbg !21
  %41 = sdiv i32 %.frozen22, 64, !dbg !21
  %42 = mul i32 %41, 64, !dbg !20
  %.decomposed23 = sub i32 %.frozen22, %42, !dbg !20
  %43 = mul i32 %17, 2116, !dbg !22
  %44 = mul i32 %18, 2116, !dbg !22
  %45 = add i32 %29, %43, !dbg !23
  %46 = add i32 %29, %44, !dbg !23
  %47 = sext i32 %45 to i64, !dbg !24
  %48 = getelementptr float, ptr addrspace(1) %0, i64 %47, !dbg !24
  %49 = sext i32 %46 to i64, !dbg !24
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !24
  %51 = and i1 %21, %33, !dbg !25
  %52 = and i1 %22, %33, !dbg !25
  %53 = and i1 %23, %34, !dbg !25
  %54 = and i1 %24, %35, !dbg !25
  %55 = and i1 %24, %36, !dbg !25
  %56 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %48, i1 %51) #2, !dbg !26
  %57 = extractvalue { i32, i32, i32, i32 } %56, 0, !dbg !26
  %58 = extractvalue { i32, i32, i32, i32 } %56, 1, !dbg !26
  %59 = extractvalue { i32, i32, i32, i32 } %56, 2, !dbg !26
  %60 = extractvalue { i32, i32, i32, i32 } %56, 3, !dbg !26
  %61 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %50, i1 %52) #2, !dbg !26
  %62 = extractvalue { i32, i32, i32, i32 } %61, 0, !dbg !26
  %63 = extractvalue { i32, i32, i32, i32 } %61, 1, !dbg !26
  %64 = extractvalue { i32, i32, i32, i32 } %61, 2, !dbg !26
  %65 = extractvalue { i32, i32, i32, i32 } %61, 3, !dbg !26
  %66 = sext i32 %37 to i64, !dbg !27
  %67 = getelementptr float, ptr addrspace(1) %1, i64 %66, !dbg !27
  %68 = sext i32 %38 to i64, !dbg !27
  %69 = getelementptr float, ptr addrspace(1) %1, i64 %68, !dbg !27
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 %21) #2, !dbg !28
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 %21) #2, !dbg !28
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 %21) #2, !dbg !28
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 %21) #2, !dbg !28
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 %22) #2, !dbg !28
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 %22) #2, !dbg !28
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 %22) #2, !dbg !28
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 %22) #2, !dbg !28
  %78 = insertelement <8 x i32> poison, i32 %65, i64 0, !dbg !26
  %79 = insertelement <8 x i32> %78, i32 %64, i64 1, !dbg !26
  %80 = insertelement <8 x i32> %79, i32 %63, i64 2, !dbg !26
  %81 = insertelement <8 x i32> %80, i32 %62, i64 3, !dbg !26
  %82 = insertelement <8 x i32> %81, i32 %60, i64 4, !dbg !26
  %83 = insertelement <8 x i32> %82, i32 %59, i64 5, !dbg !26
  %84 = insertelement <8 x i32> %83, i32 %58, i64 6, !dbg !26
  %85 = insertelement <8 x i32> %84, i32 %57, i64 7, !dbg !26
  %86 = bitcast <8 x i32> %85 to <8 x float>, !dbg !26
  %87 = insertelement <2 x i32> poison, i32 %77, i64 0, !dbg !28
  %88 = insertelement <2 x i32> %87, i32 %73, i64 1, !dbg !28
  %89 = bitcast <2 x i32> %88 to <2 x float>, !dbg !28
  %90 = shufflevector <2 x float> %89, <2 x float> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !28
  %91 = fadd <8 x float> %90, %86, !dbg !29
  %92 = fcmp ogt <8 x float> %91, zeroinitializer, !dbg !30
  %93 = extractelement <8 x float> %91, i64 7, !dbg !31
  %94 = fmul float %93, 0x3F847AE140000000, !dbg !32
  %95 = extractelement <8 x float> %91, i64 6, !dbg !31
  %96 = fmul float %95, 0x3F847AE140000000, !dbg !32
  %97 = extractelement <8 x float> %91, i64 5, !dbg !31
  %98 = fmul float %97, 0x3F847AE140000000, !dbg !32
  %99 = extractelement <8 x float> %91, i64 4, !dbg !31
  %100 = fmul float %99, 0x3F847AE140000000, !dbg !32
  %101 = extractelement <8 x float> %91, i64 3, !dbg !31
  %102 = fmul float %101, 0x3F847AE140000000, !dbg !32
  %103 = extractelement <8 x float> %91, i64 2, !dbg !31
  %104 = fmul float %103, 0x3F847AE140000000, !dbg !32
  %105 = extractelement <8 x float> %91, i64 1, !dbg !31
  %106 = fmul float %105, 0x3F847AE140000000, !dbg !32
  %107 = extractelement <8 x float> %91, i64 0, !dbg !31
  %108 = fmul float %107, 0x3F847AE140000000, !dbg !32
  %109 = extractelement <8 x i1> %92, i64 7, !dbg !33
  %110 = select i1 %109, float %93, float %94, !dbg !31
  %111 = extractelement <8 x i1> %92, i64 6, !dbg !33
  %112 = select i1 %111, float %95, float %96, !dbg !31
  %113 = extractelement <8 x i1> %92, i64 5, !dbg !33
  %114 = select i1 %113, float %97, float %98, !dbg !31
  %115 = extractelement <8 x i1> %92, i64 4, !dbg !33
  %116 = select i1 %115, float %99, float %100, !dbg !31
  %117 = extractelement <8 x i1> %92, i64 3, !dbg !33
  %118 = select i1 %117, float %101, float %102, !dbg !31
  %119 = extractelement <8 x i1> %92, i64 2, !dbg !33
  %120 = select i1 %119, float %103, float %104, !dbg !31
  %121 = extractelement <8 x i1> %92, i64 1, !dbg !33
  %122 = select i1 %121, float %105, float %106, !dbg !31
  %123 = extractelement <8 x i1> %92, i64 0, !dbg !33
  %124 = select i1 %123, float %107, float %108, !dbg !31
  %125 = shl i32 %30, 6, !dbg !34
  %126 = shl i32 %31, 6, !dbg !34
  %127 = shl i32 %32, 6, !dbg !34
  %128 = add i32 %125, %.decomposed, !dbg !35
  %129 = mul i32 %39, 135424, !dbg !36
  %130 = mul i32 %41, 135424, !dbg !36
  %131 = add i32 %128, %129, !dbg !37
  %132 = add i32 %130, %.decomposed23, !dbg !35
  %133 = add i32 %132, %126, !dbg !37
  %134 = add i32 %132, %127, !dbg !37
  %135 = sext i32 %131 to i64, !dbg !38
  %136 = getelementptr i1, ptr addrspace(1) %2, i64 %135, !dbg !38
  %137 = zext i1 %109 to i8, !dbg !33
  %138 = zext i1 %111 to i8, !dbg !33
  %139 = zext i1 %113 to i8, !dbg !33
  %140 = zext i1 %115 to i8, !dbg !33
  %141 = zext i1 %117 to i8, !dbg !33
  %142 = zext i1 %119 to i8, !dbg !33
  %143 = zext i1 %121 to i8, !dbg !33
  %144 = zext i1 %123 to i8, !dbg !33
  %145 = shl i32 %9, 7, !dbg !33
  %146 = and i32 %145, 896, !dbg !33
  %147 = or disjoint i32 %146, %11, !dbg !33
  %148 = and i32 %13, 1016, !dbg !33
  %149 = lshr exact i32 %146, 3, !dbg !33
  %150 = lshr exact i32 %146, 2, !dbg !33
  %151 = add nuw nsw i32 %150, %147, !dbg !33
  %152 = zext nneg i32 %151 to i64, !dbg !33
  %153 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i64 %152, !dbg !33
  %154 = insertelement <1 x i8> poison, i8 %137, i64 0, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %153, <1 x i8> %154, i1 true) #2, !dbg !33
  %155 = or disjoint i32 %147, 32, !dbg !33
  %156 = lshr i32 %155, 5, !dbg !33
  %157 = shl nuw nsw i32 %156, 3, !dbg !33
  %158 = add nuw nsw i32 %157, %155, !dbg !33
  %159 = zext nneg i32 %158 to i64, !dbg !33
  %160 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i64 %159, !dbg !33
  %161 = insertelement <1 x i8> poison, i8 %138, i64 0, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %160, <1 x i8> %161, i1 true) #2, !dbg !33
  %162 = or disjoint i32 %147, 64, !dbg !33
  %163 = lshr i32 %162, 5, !dbg !33
  %164 = shl nuw nsw i32 %163, 3, !dbg !33
  %165 = add nuw nsw i32 %164, %162, !dbg !33
  %166 = zext nneg i32 %165 to i64, !dbg !33
  %167 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i64 %166, !dbg !33
  %168 = insertelement <1 x i8> poison, i8 %139, i64 0, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %167, <1 x i8> %168, i1 true) #2, !dbg !33
  %169 = or disjoint i32 %147, 96, !dbg !33
  %170 = lshr i32 %169, 5, !dbg !33
  %171 = shl nuw nsw i32 %170, 3, !dbg !33
  %172 = add nuw nsw i32 %171, %169, !dbg !33
  %173 = zext nneg i32 %172 to i64, !dbg !33
  %174 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i64 %173, !dbg !33
  %175 = insertelement <1 x i8> poison, i8 %140, i64 0, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %174, <1 x i8> %175, i1 true) #2, !dbg !33
  %176 = or disjoint i32 %147, 16, !dbg !33
  %177 = add nuw nsw i32 %176, %150, !dbg !33
  %178 = zext nneg i32 %177 to i64, !dbg !33
  %179 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i64 %178, !dbg !33
  %180 = insertelement <1 x i8> poison, i8 %141, i64 0, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %179, <1 x i8> %180, i1 true) #2, !dbg !33
  %181 = or disjoint i32 %147, 48, !dbg !33
  %182 = lshr i32 %181, 5, !dbg !33
  %183 = shl nuw nsw i32 %182, 3, !dbg !33
  %184 = add nuw nsw i32 %183, %181, !dbg !33
  %185 = zext nneg i32 %184 to i64, !dbg !33
  %186 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i64 %185, !dbg !33
  %187 = insertelement <1 x i8> poison, i8 %142, i64 0, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %186, <1 x i8> %187, i1 true) #2, !dbg !33
  %188 = or disjoint i32 %147, 80, !dbg !33
  %189 = lshr i32 %188, 5, !dbg !33
  %190 = shl nuw nsw i32 %189, 3, !dbg !33
  %191 = add nuw nsw i32 %190, %188, !dbg !33
  %192 = zext nneg i32 %191 to i64, !dbg !33
  %193 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i64 %192, !dbg !33
  %194 = insertelement <1 x i8> poison, i8 %143, i64 0, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %193, <1 x i8> %194, i1 true) #2, !dbg !33
  %195 = or disjoint i32 %147, 112, !dbg !33
  %196 = lshr i32 %195, 5, !dbg !33
  %197 = shl nuw nsw i32 %196, 3, !dbg !33
  %198 = add nuw nsw i32 %197, %195, !dbg !33
  %199 = zext nneg i32 %198 to i64, !dbg !33
  %200 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i64 %199, !dbg !33
  %201 = insertelement <1 x i8> poison, i8 %144, i64 0, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %200, <1 x i8> %201, i1 true) #2, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %202 = lshr exact i32 %13, 2, !dbg !33
  %203 = and i32 %202, 248, !dbg !33
  %204 = add nuw nsw i32 %203, %148, !dbg !33
  %205 = zext nneg i32 %204 to i64, !dbg !33
  %206 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i64 %205, !dbg !33
  %207 = load <2 x i32>, ptr addrspace(3) %206, align 8, !dbg !33
  %208 = bitcast <2 x i32> %207 to <64 x i1>, !dbg !33
  %209 = extractelement <64 x i1> %208, i64 24, !dbg !33
  %210 = extractelement <64 x i1> %208, i64 56, !dbg !33
  %211 = bitcast <2 x i32> %207 to <8 x i8>, !dbg !33
  %212 = extractelement <8 x i8> %211, i64 0, !dbg !33
  %213 = and i8 %212, 1, !dbg !33
  %214 = shufflevector <8 x i8> %211, <8 x i8> poison, <2 x i32> <i32 1, i32 2>, !dbg !33
  %215 = and <2 x i8> %214, splat (i8 1), !dbg !33
  %216 = zext i1 %209 to i8, !dbg !33
  %217 = extractelement <8 x i8> %211, i64 4, !dbg !33
  %218 = and i8 %217, 1, !dbg !33
  %219 = shufflevector <8 x i8> %211, <8 x i8> poison, <2 x i32> <i32 5, i32 6>, !dbg !33
  %220 = and <2 x i8> %219, splat (i8 1), !dbg !33
  %221 = zext i1 %210 to i8, !dbg !33
  %222 = insertelement <4 x i8> poison, i8 %213, i64 0, !dbg !33
  %223 = shufflevector <2 x i8> %215, <2 x i8> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !33
  %224 = shufflevector <4 x i8> %222, <4 x i8> %223, <4 x i32> <i32 0, i32 4, i32 5, i32 poison>, !dbg !33
  %225 = insertelement <4 x i8> %224, i8 %216, i64 3, !dbg !33
  %226 = bitcast <4 x i8> %225 to i32, !dbg !33
  %227 = insertelement <4 x i8> poison, i8 %218, i64 0, !dbg !33
  %228 = shufflevector <2 x i8> %220, <2 x i8> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !33
  %229 = shufflevector <4 x i8> %227, <4 x i8> %228, <4 x i32> <i32 0, i32 4, i32 5, i32 poison>, !dbg !33
  %230 = insertelement <4 x i8> %229, i8 %221, i64 3, !dbg !33
  %231 = bitcast <4 x i8> %230 to i32, !dbg !33
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %226, i32 %231, ptr addrspace(1) %136, i1 %53) #2, !dbg !33
  %232 = sext i32 %133 to i64, !dbg !39
  %233 = getelementptr float, ptr addrspace(1) %3, i64 %232, !dbg !39
  %234 = sext i32 %134 to i64, !dbg !39
  %235 = getelementptr float, ptr addrspace(1) %3, i64 %234, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %236 = and i32 %15, 508, !dbg !40
  %237 = or disjoint i32 %149, %147, !dbg !40
  %238 = zext nneg i32 %237 to i64, !dbg !40
  %239 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %238, !dbg !40
  %240 = bitcast float %110 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %239, <1 x i32> %240, i1 true) #2, !dbg !40
  %241 = shl nuw nsw i32 %156, 2, !dbg !40
  %242 = add nuw nsw i32 %241, %155, !dbg !40
  %243 = zext nneg i32 %242 to i64, !dbg !40
  %244 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %243, !dbg !40
  %245 = bitcast float %112 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %244, <1 x i32> %245, i1 true) #2, !dbg !40
  %246 = shl nuw nsw i32 %163, 2, !dbg !40
  %247 = add nuw nsw i32 %246, %162, !dbg !40
  %248 = zext nneg i32 %247 to i64, !dbg !40
  %249 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %248, !dbg !40
  %250 = bitcast float %114 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %249, <1 x i32> %250, i1 true) #2, !dbg !40
  %251 = shl nuw nsw i32 %170, 2, !dbg !40
  %252 = add nuw nsw i32 %251, %169, !dbg !40
  %253 = zext nneg i32 %252 to i64, !dbg !40
  %254 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %253, !dbg !40
  %255 = bitcast float %116 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %254, <1 x i32> %255, i1 true) #2, !dbg !40
  %256 = add nuw nsw i32 %176, %149, !dbg !40
  %257 = zext nneg i32 %256 to i64, !dbg !40
  %258 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %257, !dbg !40
  %259 = bitcast float %118 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %258, <1 x i32> %259, i1 true) #2, !dbg !40
  %260 = shl nuw nsw i32 %182, 2, !dbg !40
  %261 = add nuw nsw i32 %260, %181, !dbg !40
  %262 = zext nneg i32 %261 to i64, !dbg !40
  %263 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %262, !dbg !40
  %264 = bitcast float %120 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %263, <1 x i32> %264, i1 true) #2, !dbg !40
  %265 = shl nuw nsw i32 %189, 2, !dbg !40
  %266 = add nuw nsw i32 %265, %188, !dbg !40
  %267 = zext nneg i32 %266 to i64, !dbg !40
  %268 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %267, !dbg !40
  %269 = bitcast float %122 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %268, <1 x i32> %269, i1 true) #2, !dbg !40
  %270 = shl nuw nsw i32 %196, 2, !dbg !40
  %271 = add nuw nsw i32 %270, %195, !dbg !40
  %272 = zext nneg i32 %271 to i64, !dbg !40
  %273 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %272, !dbg !40
  %274 = bitcast float %124 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %273, <1 x i32> %274, i1 true) #2, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %275 = lshr i32 %15, 3, !dbg !40
  %276 = and i32 %275, 60, !dbg !40
  %277 = add nuw nsw i32 %276, %236, !dbg !40
  %278 = zext nneg i32 %277 to i64, !dbg !40
  %279 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %278, !dbg !40
  %280 = or disjoint i32 %236, 512, !dbg !40
  %281 = lshr i32 %280, 3, !dbg !40
  %282 = and i32 %281, 124, !dbg !40
  %283 = add nuw nsw i32 %282, %280, !dbg !40
  %284 = zext nneg i32 %283 to i64, !dbg !40
  %285 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %284, !dbg !40
  %286 = load <4 x i32>, ptr addrspace(3) %285, align 16, !dbg !40
  %.extract = load i32, ptr addrspace(3) %279, align 16, !dbg !40
  %287 = getelementptr inbounds i8, ptr addrspace(3) %279, i64 4, !dbg !40
  %.extract15 = load i32, ptr addrspace(3) %287, align 4, !dbg !40
  %288 = getelementptr inbounds i8, ptr addrspace(3) %279, i64 8, !dbg !40
  %.extract16 = load i32, ptr addrspace(3) %288, align 8, !dbg !40
  %289 = getelementptr inbounds i8, ptr addrspace(3) %279, i64 12, !dbg !40
  %.extract17 = load i32, ptr addrspace(3) %289, align 4, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract15, i32 %.extract16, i32 %.extract17, ptr addrspace(1) %233, i1 %54) #2, !dbg !40
  %.extract18 = extractelement <4 x i32> %286, i64 0, !dbg !40
  %.extract19 = extractelement <4 x i32> %286, i64 1, !dbg !40
  %.extract20 = extractelement <4 x i32> %286, i64 2, !dbg !40
  %.extract21 = extractelement <4 x i32> %286, i64 3, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract18, i32 %.extract19, i32 %.extract20, i32 %.extract21, ptr addrspace(1) %235, i1 %55) #2, !dbg !40
  ret void, !dbg !41
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cm46eun44r2txrc2b4j3kzsp2qgf22imegf4vmicbfgdsczfx4ns.py", directory: "inductor_cache/m4")
!4 = !{ptr @triton_poi_fused_convolution_leaky_relu_4, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_leaky_relu_4, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_leaky_relu_4", linkageName: "triton_poi_fused_convolution_leaky_relu_4", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 31, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 40, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 30, scope: !7)
!25 = !DILocation(line: 32, column: 53, scope: !7)
!26 = !DILocation(line: 32, column: 45, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 33, column: 35, scope: !7)
!29 = !DILocation(line: 34, column: 18, scope: !7)
!30 = !DILocation(line: 36, column: 18, scope: !7)
!31 = !DILocation(line: 39, column: 32, scope: !7)
!32 = !DILocation(line: 38, column: 18, scope: !7)
!33 = !DILocation(line: 40, column: 56, scope: !7)
!34 = !DILocation(line: 40, column: 33, scope: !7)
!35 = !DILocation(line: 40, column: 30, scope: !7)
!36 = !DILocation(line: 40, column: 45, scope: !7)
!37 = !DILocation(line: 40, column: 38, scope: !7)
!38 = !DILocation(line: 40, column: 25, scope: !7)
!39 = !DILocation(line: 41, column: 25, scope: !7)
!40 = !DILocation(line: 41, column: 56, scope: !7)
!41 = !DILocation(line: 41, column: 4, scope: !7)
