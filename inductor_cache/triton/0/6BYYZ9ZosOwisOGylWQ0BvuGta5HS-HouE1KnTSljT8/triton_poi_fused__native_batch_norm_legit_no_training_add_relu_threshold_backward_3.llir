; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_threshold_backward_3(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %11 = shl i32 %10, 6, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = shl i32 %12, 1, !dbg !12
  %14 = and i32 %13, 62, !dbg !12
  %15 = or disjoint i32 %11, %14, !dbg !13
  %16 = icmp slt i32 %15, 64, !dbg !14
  %17 = sdiv i32 %15, 4, !dbg !15
  %18 = srem i32 %17, 4, !dbg !16
  %19 = sext i32 %17 to i64, !dbg !17
  %20 = getelementptr float, ptr addrspace(1) %0, i64 %19, !dbg !17
  %21 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %20, i1 %16) #3, !dbg !18
  %22 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %20, i1 %16) #3, !dbg !18
  %23 = sext i32 %15 to i64, !dbg !19
  %24 = getelementptr float, ptr addrspace(1) %1, i64 %23, !dbg !19
  %25 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %24, i1 %16) #3, !dbg !20
  %26 = sext i32 %18 to i64, !dbg !21
  %27 = getelementptr float, ptr addrspace(1) %2, i64 %26, !dbg !21
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 %16) #3, !dbg !22
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 %16) #3, !dbg !22
  %30 = getelementptr float, ptr addrspace(1) %3, i64 %26, !dbg !23
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 %16) #3, !dbg !24
  %32 = bitcast i32 %31 to float, !dbg !24
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 %16) #3, !dbg !24
  %34 = bitcast i32 %33 to float, !dbg !24
  %35 = getelementptr float, ptr addrspace(1) %4, i64 %26, !dbg !25
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 %16) #3, !dbg !26
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 %16) #3, !dbg !26
  %38 = getelementptr float, ptr addrspace(1) %5, i64 %26, !dbg !27
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 %16) #3, !dbg !28
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 %16) #3, !dbg !28
  %41 = fadd float %32, 0x3EE4F8B580000000, !dbg !29
  %42 = fadd float %34, 0x3EE4F8B580000000, !dbg !29
  %43 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i = icmp eq i32 %43, 0, !dbg !30
  %44 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i = icmp eq i32 %44, 0, !dbg !30
  br i1 %.not.i, label %50, label %45, !dbg !30

45:                                               ; preds = %9
  br i1 %.not1.i, label %48, label %46, !dbg !30

46:                                               ; preds = %45
  %47 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %41) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

48:                                               ; preds = %45
  %49 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %41) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

50:                                               ; preds = %9
  br i1 %.not1.i, label %53, label %51, !dbg !30

51:                                               ; preds = %50
  %52 = tail call float @llvm.nvvm.sqrt.rn.f(float %41) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

53:                                               ; preds = %50
  %54 = tail call float @llvm.nvvm.sqrt.approx.f(float %41) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

__nv_sqrtf.exit:                                  ; preds = %46, %48, %51, %53
  %.0.i = phi float [ %47, %46 ], [ %49, %48 ], [ %52, %51 ], [ %54, %53 ], !dbg !30
  %55 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i1 = icmp eq i32 %55, 0, !dbg !30
  %56 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i4 = icmp eq i32 %56, 0, !dbg !30
  br i1 %.not.i1, label %62, label %57, !dbg !30

57:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %60, label %58, !dbg !30

58:                                               ; preds = %57
  %59 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %42) #3, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

60:                                               ; preds = %57
  %61 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %42) #3, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

62:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %65, label %63, !dbg !30

63:                                               ; preds = %62
  %64 = tail call float @llvm.nvvm.sqrt.rn.f(float %42) #3, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

65:                                               ; preds = %62
  %66 = tail call float @llvm.nvvm.sqrt.approx.f(float %42) #3, !dbg !30
  br label %__nv_sqrtf.exit5, !dbg !30

__nv_sqrtf.exit5:                                 ; preds = %58, %60, %63, %65
  %.0.i3 = phi float [ %59, %58 ], [ %61, %60 ], [ %64, %63 ], [ %66, %65 ], !dbg !30
  %67 = extractvalue { i32, i32 } %25, 1, !dbg !20
  %68 = insertelement <2 x i32> poison, i32 %28, i64 0, !dbg !22
  %69 = insertelement <2 x i32> %68, i32 %29, i64 1, !dbg !22
  %70 = bitcast <2 x i32> %69 to <2 x float>, !dbg !22
  %71 = extractvalue { i32, i32 } %25, 0, !dbg !20
  %72 = insertelement <2 x i32> poison, i32 %39, i64 0, !dbg !28
  %73 = insertelement <2 x i32> %72, i32 %40, i64 1, !dbg !28
  %74 = bitcast <2 x i32> %73 to <2 x float>, !dbg !28
  %75 = insertelement <2 x i32> poison, i32 %36, i64 0, !dbg !26
  %76 = insertelement <2 x i32> %75, i32 %37, i64 1, !dbg !26
  %77 = bitcast <2 x i32> %76 to <2 x float>, !dbg !26
  %78 = insertelement <2 x i32> poison, i32 %21, i64 0, !dbg !18
  %79 = insertelement <2 x i32> %78, i32 %22, i64 1, !dbg !18
  %80 = bitcast <2 x i32> %79 to <2 x float>, !dbg !18
  %81 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !31
  %82 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !31
  %83 = getelementptr float, ptr addrspace(1) %6, i64 %23, !dbg !32
  %84 = getelementptr i1, ptr addrspace(1) %7, i64 %23, !dbg !33
  %85 = insertelement <2 x i32> poison, i32 %71, i64 0, !dbg !20
  %86 = insertelement <2 x i32> %85, i32 %67, i64 1, !dbg !20
  %87 = bitcast <2 x i32> %86 to <2 x float>, !dbg !20
  %88 = fsub <2 x float> %87, %70, !dbg !34
  %89 = insertelement <2 x float> poison, float %81, i64 0, !dbg !35
  %90 = insertelement <2 x float> %89, float %82, i64 1, !dbg !35
  %91 = fmul <2 x float> %88, %90, !dbg !35
  %92 = fmul <2 x float> %91, %77, !dbg !36
  %93 = fadd <2 x float> %92, %74, !dbg !37
  %94 = fadd <2 x float> %93, %80, !dbg !38
  %95 = fcmp olt <2 x float> %94, zeroinitializer, !dbg !39
  %96 = select <2 x i1> %95, <2 x float> zeroinitializer, <2 x float> %94, !dbg !43
  %97 = fcmp ole <2 x float> %96, zeroinitializer, !dbg !44
  %bc = bitcast <2 x float> %96 to <2 x i32>, !dbg !45
  %98 = extractelement <2 x i32> %bc, i64 0, !dbg !45
  %bc6 = bitcast <2 x float> %96 to <2 x i32>, !dbg !45
  %99 = extractelement <2 x i32> %bc6, i64 1, !dbg !45
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %98, i32 %99, ptr addrspace(1) %83, i1 %16) #3, !dbg !45
  %100 = zext <2 x i1> %97 to <2 x i8>, !dbg !46
  %101 = bitcast <2 x i8> %100 to i16, !dbg !46
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %101, ptr addrspace(1) %84, i1 %16) #3, !dbg !46
  ret void, !dbg !47
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c4sgerxdipsns36h6lx2ieiroljbw3um4lxzdul6odpdoaf4piut.py", directory: "inductor_cache/4s")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_threshold_backward_3, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_threshold_backward_3, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_relu_threshold_backward_3", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_relu_threshold_backward_3", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 26, scope: !7)
!17 = !DILocation(line: 27, column: 30, scope: !7)
!18 = !DILocation(line: 27, column: 35, scope: !7)
!19 = !DILocation(line: 28, column: 30, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 29, column: 30, scope: !7)
!22 = !DILocation(line: 29, column: 35, scope: !7)
!23 = !DILocation(line: 30, column: 30, scope: !7)
!24 = !DILocation(line: 30, column: 35, scope: !7)
!25 = !DILocation(line: 31, column: 31, scope: !7)
!26 = !DILocation(line: 31, column: 36, scope: !7)
!27 = !DILocation(line: 32, column: 31, scope: !7)
!28 = !DILocation(line: 32, column: 36, scope: !7)
!29 = !DILocation(line: 35, column: 18, scope: !7)
!30 = !DILocation(line: 36, column: 26, scope: !7)
!31 = !DILocation(line: 38, column: 18, scope: !7)
!32 = !DILocation(line: 49, column: 25, scope: !7)
!33 = !DILocation(line: 50, column: 25, scope: !7)
!34 = !DILocation(line: 33, column: 18, scope: !7)
!35 = !DILocation(line: 41, column: 19, scope: !7)
!36 = !DILocation(line: 42, column: 20, scope: !7)
!37 = !DILocation(line: 43, column: 20, scope: !7)
!38 = !DILocation(line: 44, column: 19, scope: !7)
!39 = !DILocation(line: 118, column: 15, scope: !40, inlinedAt: !42)
!40 = distinct !DILexicalBlockFile(scope: !7, file: !41, discriminator: 0)
!41 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!42 = !DILocation(line: 46, column: 42, scope: !7)
!43 = !DILocation(line: 121, column: 29, scope: !40, inlinedAt: !42)
!44 = !DILocation(line: 48, column: 21, scope: !7)
!45 = !DILocation(line: 49, column: 37, scope: !7)
!46 = !DILocation(line: 50, column: 37, scope: !7)
!47 = !DILocation(line: 50, column: 4, scope: !7)
