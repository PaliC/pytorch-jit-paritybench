; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_add_cat_clone_relu_threshold_backward_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, i32 %13) local_unnamed_addr !dbg !7 {
  %15 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %16 = shl i32 %15, 7, !dbg !11
  %17 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %18 = and i32 %17, 127, !dbg !12
  %19 = or disjoint i32 %16, %18, !dbg !13
  %20 = icmp slt i32 %19, 256, !dbg !14
  %.frozen = freeze i32 %19, !dbg !15
  %21 = sdiv i32 %.frozen, 16, !dbg !15
  %22 = srem i32 %21, 4, !dbg !16
  %23 = mul i32 %21, 16, !dbg !17
  %.decomposed = sub i32 %.frozen, %23, !dbg !17
  %.frozen6 = freeze i32 %19, !dbg !18
  %24 = sdiv i32 %.frozen6, 64, !dbg !18
  %25 = sext i32 %19 to i64, !dbg !19
  %26 = getelementptr float, ptr addrspace(1) %10, i64 %25, !dbg !19
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 %20) #3, !dbg !20
  %28 = icmp slt i32 %22, 2, !dbg !21
  %29 = mul i32 %24, 64, !dbg !22
  %srem.decomposed = sub i32 %.frozen6, %29, !dbg !22
  %30 = shl nsw i32 %24, 5, !dbg !23
  %31 = add nsw i32 %30, %srem.decomposed, !dbg !24
  %32 = sext i32 %31 to i64, !dbg !25
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !25
  %34 = and i1 %20, %28, !dbg !26
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %33, i1 %34, i32 0, i1 %34) #3, !dbg !27
  %36 = sext i32 %22 to i64, !dbg !28
  %37 = getelementptr float, ptr addrspace(1) %1, i64 %36, !dbg !28
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %37, i1 %34, i32 0, i1 %34) #3, !dbg !29
  %39 = getelementptr float, ptr addrspace(1) %2, i64 %36, !dbg !30
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %39, i1 %34, i32 0, i1 %34) #3, !dbg !31
  %41 = bitcast i32 %40 to float, !dbg !31
  %42 = fadd float %41, 0x3EE4F8B580000000, !dbg !32
  %43 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !33
  %.not.i = icmp eq i32 %43, 0, !dbg !33
  %44 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !33
  %.not1.i = icmp eq i32 %44, 0, !dbg !33
  br i1 %.not.i, label %50, label %45, !dbg !33

45:                                               ; preds = %14
  br i1 %.not1.i, label %48, label %46, !dbg !33

46:                                               ; preds = %45
  %47 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %42) #3, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

48:                                               ; preds = %45
  %49 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %42) #3, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

50:                                               ; preds = %14
  br i1 %.not1.i, label %53, label %51, !dbg !33

51:                                               ; preds = %50
  %52 = tail call float @llvm.nvvm.sqrt.rn.f(float %42) #3, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

53:                                               ; preds = %50
  %54 = tail call float @llvm.nvvm.sqrt.approx.f(float %42) #3, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

__nv_sqrtf.exit:                                  ; preds = %46, %48, %51, %53
  %.0.i = phi float [ %47, %46 ], [ %49, %48 ], [ %52, %51 ], [ %54, %53 ], !dbg !33
  %55 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !34
  %56 = getelementptr float, ptr addrspace(1) %3, i64 %36, !dbg !35
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %56, i1 %34, i32 0, i1 %34) #3, !dbg !36
  %58 = getelementptr float, ptr addrspace(1) %4, i64 %36, !dbg !37
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %58, i1 %34, i32 0, i1 %34) #3, !dbg !38
  %60 = icmp sgt i32 %22, 1, !dbg !39
  %61 = add nsw i32 %22, -2, !dbg !40
  %62 = shl nsw i32 %61, 4, !dbg !41
  %63 = add nsw i32 %30, %.decomposed, !dbg !42
  %64 = add nsw i32 %63, %62, !dbg !43
  %65 = sext i32 %64 to i64, !dbg !44
  %66 = getelementptr float, ptr addrspace(1) %5, i64 %65, !dbg !44
  %67 = and i1 %20, %60, !dbg !45
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %66, i1 %67, i32 0, i1 %67) #3, !dbg !46
  %69 = sext i32 %61 to i64, !dbg !47
  %70 = getelementptr float, ptr addrspace(1) %6, i64 %69, !dbg !47
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %70, i1 %67, i32 0, i1 %67) #3, !dbg !48
  %72 = getelementptr float, ptr addrspace(1) %7, i64 %69, !dbg !49
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %72, i1 %67, i32 0, i1 %67) #3, !dbg !50
  %74 = bitcast i32 %73 to float, !dbg !50
  %75 = fadd float %74, 0x3EE4F8B580000000, !dbg !51
  %76 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !52
  %.not.i1 = icmp eq i32 %76, 0, !dbg !52
  %77 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !52
  %.not1.i4 = icmp eq i32 %77, 0, !dbg !52
  br i1 %.not.i1, label %83, label %78, !dbg !52

78:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %81, label %79, !dbg !52

79:                                               ; preds = %78
  %80 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %75) #3, !dbg !52
  br label %__nv_sqrtf.exit5, !dbg !52

81:                                               ; preds = %78
  %82 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %75) #3, !dbg !52
  br label %__nv_sqrtf.exit5, !dbg !52

83:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %86, label %84, !dbg !52

84:                                               ; preds = %83
  %85 = tail call float @llvm.nvvm.sqrt.rn.f(float %75) #3, !dbg !52
  br label %__nv_sqrtf.exit5, !dbg !52

86:                                               ; preds = %83
  %87 = tail call float @llvm.nvvm.sqrt.approx.f(float %75) #3, !dbg !52
  br label %__nv_sqrtf.exit5, !dbg !52

__nv_sqrtf.exit5:                                 ; preds = %79, %81, %84, %86
  %.0.i3 = phi float [ %80, %79 ], [ %82, %81 ], [ %85, %84 ], [ %87, %86 ], !dbg !52
  %88 = bitcast i32 %68 to float, !dbg !46
  %89 = bitcast i32 %71 to float, !dbg !48
  %90 = fsub float %88, %89, !dbg !53
  %91 = bitcast i32 %35 to float, !dbg !27
  %92 = bitcast i32 %38 to float, !dbg !29
  %93 = fsub float %91, %92, !dbg !54
  %94 = fmul float %93, %55, !dbg !55
  %95 = bitcast i32 %57 to float, !dbg !36
  %96 = fmul float %94, %95, !dbg !56
  %97 = bitcast i32 %59 to float, !dbg !38
  %98 = fadd float %96, %97, !dbg !57
  %99 = fcmp olt float %98, 0.000000e+00, !dbg !58
  %100 = select i1 %99, float 0.000000e+00, float %98, !dbg !62
  %101 = bitcast i32 %27 to float, !dbg !20
  %102 = sdiv i32 %19, 32, !dbg !63
  %103 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !64
  %104 = fmul float %90, %103, !dbg !65
  %105 = getelementptr float, ptr addrspace(1) %8, i64 %69, !dbg !66
  %106 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %105, i1 %67, i32 0, i1 %67) #3, !dbg !67
  %107 = bitcast i32 %106 to float, !dbg !67
  %108 = fmul float %104, %107, !dbg !68
  %109 = getelementptr float, ptr addrspace(1) %9, i64 %69, !dbg !69
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %109, i1 %67, i32 0, i1 %67) #3, !dbg !70
  %111 = bitcast i32 %110 to float, !dbg !70
  %112 = fadd float %108, %111, !dbg !71
  %113 = fcmp olt float %112, 0.000000e+00, !dbg !72
  %114 = select i1 %113, float 0.000000e+00, float %112, !dbg !74
  %115 = select i1 %28, float %100, float %114, !dbg !75
  %116 = fadd float %115, %101, !dbg !76
  %117 = fcmp olt float %116, 0.000000e+00, !dbg !77
  %118 = select i1 %117, float 0.000000e+00, float %116, !dbg !79
  %119 = fcmp ole float %118, 0.000000e+00, !dbg !80
  %120 = insertelement <2 x i32> poison, i32 %102, i64 0, !dbg !81
  %121 = insertelement <2 x i32> %120, i32 %21, i64 1, !dbg !81
  %122 = srem <2 x i32> %121, splat (i32 2), !dbg !81
  %123 = shl nsw <2 x i32> %122, <i32 4, i32 5>, !dbg !82
  %124 = shl nsw i32 %24, 6, !dbg !83
  %125 = add i32 %124, %.decomposed, !dbg !84
  %126 = extractelement <2 x i32> %123, i64 0, !dbg !85
  %127 = add i32 %125, %126, !dbg !85
  %128 = extractelement <2 x i32> %123, i64 1, !dbg !86
  %129 = add i32 %127, %128, !dbg !86
  %130 = sext i32 %129 to i64, !dbg !87
  %131 = getelementptr float, ptr addrspace(1) %11, i64 %130, !dbg !87
  %132 = bitcast float %118 to i32, !dbg !88
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %132, ptr addrspace(1) %131, i1 %20) #3, !dbg !88
  %133 = getelementptr i1, ptr addrspace(1) %12, i64 %25, !dbg !89
  %134 = zext i1 %119 to i8, !dbg !90
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %134, ptr addrspace(1) %133, i1 %20) #3, !dbg !90
  ret void, !dbg !91
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cgeq4jbmgjjrof6pcynx4zm4mraaq4fuqjcxie664k6tv2ff57om.py", directory: "inductor_cache/ge")
!4 = !{ptr @triton_poi_fused_add_cat_clone_relu_threshold_backward_2, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_cat_clone_relu_threshold_backward_2, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_cat_clone_relu_threshold_backward_2", linkageName: "triton_poi_fused_add_cat_clone_relu_threshold_backward_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 27, scope: !7)
!17 = !DILocation(line: 25, column: 19, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 30, column: 32, scope: !7)
!20 = !DILocation(line: 30, column: 37, scope: !7)
!21 = !DILocation(line: 35, column: 18, scope: !7)
!22 = !DILocation(line: 36, column: 35, scope: !7)
!23 = !DILocation(line: 36, column: 48, scope: !7)
!24 = !DILocation(line: 36, column: 45, scope: !7)
!25 = !DILocation(line: 36, column: 30, scope: !7)
!26 = !DILocation(line: 36, column: 60, scope: !7)
!27 = !DILocation(line: 36, column: 53, scope: !7)
!28 = !DILocation(line: 37, column: 30, scope: !7)
!29 = !DILocation(line: 37, column: 35, scope: !7)
!30 = !DILocation(line: 39, column: 30, scope: !7)
!31 = !DILocation(line: 39, column: 35, scope: !7)
!32 = !DILocation(line: 41, column: 19, scope: !7)
!33 = !DILocation(line: 42, column: 27, scope: !7)
!34 = !DILocation(line: 44, column: 20, scope: !7)
!35 = !DILocation(line: 48, column: 31, scope: !7)
!36 = !DILocation(line: 48, column: 36, scope: !7)
!37 = !DILocation(line: 50, column: 31, scope: !7)
!38 = !DILocation(line: 50, column: 36, scope: !7)
!39 = !DILocation(line: 56, column: 20, scope: !7)
!40 = !DILocation(line: 59, column: 47, scope: !7)
!41 = !DILocation(line: 59, column: 40, scope: !7)
!42 = !DILocation(line: 59, column: 36, scope: !7)
!43 = !DILocation(line: 59, column: 53, scope: !7)
!44 = !DILocation(line: 59, column: 31, scope: !7)
!45 = !DILocation(line: 59, column: 69, scope: !7)
!46 = !DILocation(line: 59, column: 61, scope: !7)
!47 = !DILocation(line: 60, column: 31, scope: !7)
!48 = !DILocation(line: 60, column: 43, scope: !7)
!49 = !DILocation(line: 62, column: 31, scope: !7)
!50 = !DILocation(line: 62, column: 43, scope: !7)
!51 = !DILocation(line: 64, column: 20, scope: !7)
!52 = !DILocation(line: 65, column: 27, scope: !7)
!53 = !DILocation(line: 61, column: 20, scope: !7)
!54 = !DILocation(line: 38, column: 18, scope: !7)
!55 = !DILocation(line: 47, column: 19, scope: !7)
!56 = !DILocation(line: 49, column: 20, scope: !7)
!57 = !DILocation(line: 51, column: 20, scope: !7)
!58 = !DILocation(line: 118, column: 15, scope: !59, inlinedAt: !61)
!59 = distinct !DILexicalBlockFile(scope: !7, file: !60, discriminator: 0)
!60 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!61 = !DILocation(line: 53, column: 42, scope: !7)
!62 = !DILocation(line: 121, column: 29, scope: !59, inlinedAt: !61)
!63 = !DILocation(line: 29, column: 21, scope: !7)
!64 = !DILocation(line: 67, column: 20, scope: !7)
!65 = !DILocation(line: 70, column: 20, scope: !7)
!66 = !DILocation(line: 71, column: 31, scope: !7)
!67 = !DILocation(line: 71, column: 43, scope: !7)
!68 = !DILocation(line: 72, column: 20, scope: !7)
!69 = !DILocation(line: 73, column: 31, scope: !7)
!70 = !DILocation(line: 73, column: 43, scope: !7)
!71 = !DILocation(line: 74, column: 20, scope: !7)
!72 = !DILocation(line: 118, column: 15, scope: !59, inlinedAt: !73)
!73 = !DILocation(line: 76, column: 42, scope: !7)
!74 = !DILocation(line: 121, column: 29, scope: !59, inlinedAt: !73)
!75 = !DILocation(line: 0, scope: !7)
!76 = !DILocation(line: 80, column: 20, scope: !7)
!77 = !DILocation(line: 118, column: 15, scope: !59, inlinedAt: !78)
!78 = !DILocation(line: 82, column: 42, scope: !7)
!79 = !DILocation(line: 121, column: 29, scope: !59, inlinedAt: !78)
!80 = !DILocation(line: 84, column: 21, scope: !7)
!81 = !DILocation(line: 29, column: 27, scope: !7)
!82 = !DILocation(line: 85, column: 33, scope: !7)
!83 = !DILocation(line: 85, column: 49, scope: !7)
!84 = !DILocation(line: 85, column: 30, scope: !7)
!85 = !DILocation(line: 85, column: 38, scope: !7)
!86 = !DILocation(line: 85, column: 46, scope: !7)
!87 = !DILocation(line: 85, column: 25, scope: !7)
!88 = !DILocation(line: 85, column: 61, scope: !7)
!89 = !DILocation(line: 86, column: 25, scope: !7)
!90 = !DILocation(line: 86, column: 37, scope: !7)
!91 = !DILocation(line: 86, column: 4, scope: !7)
