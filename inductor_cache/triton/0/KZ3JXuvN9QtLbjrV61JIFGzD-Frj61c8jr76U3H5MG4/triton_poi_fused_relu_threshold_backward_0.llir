; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_relu_threshold_backward_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %12 = shl i32 %11, 6, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = shl i32 %13, 1, !dbg !12
  %15 = and i32 %14, 62, !dbg !12
  %16 = or disjoint i32 %12, %15, !dbg !13
  %17 = icmp slt i32 %16, 64, !dbg !14
  %18 = sdiv i32 %16, 16, !dbg !15
  %19 = sext i32 %16 to i64, !dbg !16
  %20 = getelementptr float, ptr addrspace(1) %0, i64 %19, !dbg !16
  %21 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %20, i1 %17) #1, !dbg !17
  %22 = extractvalue { i32, i32 } %21, 0, !dbg !17
  %23 = extractvalue { i32, i32 } %21, 1, !dbg !17
  %24 = sext i32 %18 to i64, !dbg !18
  %25 = getelementptr float, ptr addrspace(1) %4, i64 %24, !dbg !18
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 %17) #1, !dbg !19
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 %17) #1, !dbg !19
  %28 = getelementptr float, ptr addrspace(1) %1, i64 %19, !dbg !20
  %29 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %28, i1 %17) #1, !dbg !21
  %30 = extractvalue { i32, i32 } %29, 0, !dbg !21
  %31 = extractvalue { i32, i32 } %29, 1, !dbg !21
  %32 = getelementptr float, ptr addrspace(1) %2, i64 %19, !dbg !22
  %33 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %32, i1 %17) #1, !dbg !23
  %34 = extractvalue { i32, i32 } %33, 0, !dbg !23
  %35 = extractvalue { i32, i32 } %33, 1, !dbg !23
  %36 = getelementptr float, ptr addrspace(1) %3, i64 %19, !dbg !24
  %37 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %36, i1 %17) #1, !dbg !25
  %38 = extractvalue { i32, i32 } %37, 0, !dbg !25
  %39 = extractvalue { i32, i32 } %37, 1, !dbg !25
  %40 = getelementptr i1, ptr addrspace(1) %5, i64 %19, !dbg !26
  %41 = insertelement <2 x i32> poison, i32 %22, i64 0, !dbg !17
  %42 = insertelement <2 x i32> %41, i32 %23, i64 1, !dbg !17
  %43 = bitcast <2 x i32> %42 to <2 x float>, !dbg !17
  %44 = insertelement <2 x i32> poison, i32 %26, i64 0, !dbg !19
  %45 = insertelement <2 x i32> %44, i32 %27, i64 1, !dbg !19
  %46 = bitcast <2 x i32> %45 to <2 x float>, !dbg !19
  %47 = fadd <2 x float> %43, %46, !dbg !27
  %48 = fcmp olt <2 x float> %47, zeroinitializer, !dbg !28
  %49 = select <2 x i1> %48, <2 x float> zeroinitializer, <2 x float> %47, !dbg !32
  %50 = fcmp ole <2 x float> %49, zeroinitializer, !dbg !33
  %bc = bitcast <2 x float> %49 to <2 x i32>, !dbg !34
  %51 = extractelement <2 x i32> %bc, i64 0, !dbg !34
  %bc1 = bitcast <2 x float> %49 to <2 x i32>, !dbg !34
  %52 = extractelement <2 x i32> %bc1, i64 1, !dbg !34
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %51, i32 %52, ptr addrspace(1) %20, i1 %17) #1, !dbg !34
  %53 = zext <2 x i1> %50 to <2 x i8>, !dbg !35
  %54 = bitcast <2 x i8> %53 to i16, !dbg !35
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %54, ptr addrspace(1) %40, i1 %17) #1, !dbg !35
  %55 = getelementptr i1, ptr addrspace(1) %6, i64 %19, !dbg !36
  %56 = insertelement <2 x i32> poison, i32 %30, i64 0, !dbg !21
  %57 = insertelement <2 x i32> %56, i32 %31, i64 1, !dbg !21
  %58 = bitcast <2 x i32> %57 to <2 x float>, !dbg !21
  %59 = fadd <2 x float> %46, %58, !dbg !37
  %60 = fcmp olt <2 x float> %59, zeroinitializer, !dbg !38
  %61 = select <2 x i1> %60, <2 x float> zeroinitializer, <2 x float> %59, !dbg !40
  %62 = fcmp ole <2 x float> %61, zeroinitializer, !dbg !41
  %bc2 = bitcast <2 x float> %61 to <2 x i32>, !dbg !42
  %63 = extractelement <2 x i32> %bc2, i64 0, !dbg !42
  %bc3 = bitcast <2 x float> %61 to <2 x i32>, !dbg !42
  %64 = extractelement <2 x i32> %bc3, i64 1, !dbg !42
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %63, i32 %64, ptr addrspace(1) %28, i1 %17) #1, !dbg !42
  %65 = zext <2 x i1> %62 to <2 x i8>, !dbg !43
  %66 = bitcast <2 x i8> %65 to i16, !dbg !43
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %66, ptr addrspace(1) %55, i1 %17) #1, !dbg !43
  %67 = getelementptr i1, ptr addrspace(1) %7, i64 %19, !dbg !44
  %68 = insertelement <2 x i32> poison, i32 %34, i64 0, !dbg !23
  %69 = insertelement <2 x i32> %68, i32 %35, i64 1, !dbg !23
  %70 = bitcast <2 x i32> %69 to <2 x float>, !dbg !23
  %71 = fadd <2 x float> %46, %70, !dbg !45
  %72 = fcmp olt <2 x float> %71, zeroinitializer, !dbg !46
  %73 = select <2 x i1> %72, <2 x float> zeroinitializer, <2 x float> %71, !dbg !48
  %74 = fcmp ole <2 x float> %73, zeroinitializer, !dbg !49
  %bc4 = bitcast <2 x float> %73 to <2 x i32>, !dbg !50
  %75 = extractelement <2 x i32> %bc4, i64 0, !dbg !50
  %bc5 = bitcast <2 x float> %73 to <2 x i32>, !dbg !50
  %76 = extractelement <2 x i32> %bc5, i64 1, !dbg !50
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %75, i32 %76, ptr addrspace(1) %32, i1 %17) #1, !dbg !50
  %77 = zext <2 x i1> %74 to <2 x i8>, !dbg !51
  %78 = bitcast <2 x i8> %77 to i16, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %78, ptr addrspace(1) %67, i1 %17) #1, !dbg !51
  %79 = getelementptr i1, ptr addrspace(1) %8, i64 %19, !dbg !52
  %80 = insertelement <2 x i32> poison, i32 %38, i64 0, !dbg !25
  %81 = insertelement <2 x i32> %80, i32 %39, i64 1, !dbg !25
  %82 = bitcast <2 x i32> %81 to <2 x float>, !dbg !25
  %83 = fadd <2 x float> %46, %82, !dbg !53
  %84 = fcmp olt <2 x float> %83, zeroinitializer, !dbg !54
  %85 = select <2 x i1> %84, <2 x float> zeroinitializer, <2 x float> %83, !dbg !56
  %86 = fcmp ole <2 x float> %85, zeroinitializer, !dbg !57
  %bc6 = bitcast <2 x float> %85 to <2 x i32>, !dbg !58
  %87 = extractelement <2 x i32> %bc6, i64 0, !dbg !58
  %bc7 = bitcast <2 x float> %85 to <2 x i32>, !dbg !58
  %88 = extractelement <2 x i32> %bc7, i64 1, !dbg !58
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %87, i32 %88, ptr addrspace(1) %36, i1 %17) #1, !dbg !58
  %89 = zext <2 x i1> %86 to <2 x i8>, !dbg !59
  %90 = bitcast <2 x i8> %89 to i16, !dbg !59
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %90, ptr addrspace(1) %79, i1 %17) #1, !dbg !59
  ret void, !dbg !60
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "clkcdlsrmrmiajdstjxojv6lddi23wze76hxth5ginls5okzf74f.py", directory: "inductor_cache/lk")
!4 = !{ptr @triton_poi_fused_relu_threshold_backward_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_relu_threshold_backward_0, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_relu_threshold_backward_0", linkageName: "triton_poi_fused_relu_threshold_backward_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 34, scope: !7)
!17 = !DILocation(line: 26, column: 39, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 35, scope: !7)
!20 = !DILocation(line: 28, column: 34, scope: !7)
!21 = !DILocation(line: 28, column: 39, scope: !7)
!22 = !DILocation(line: 29, column: 35, scope: !7)
!23 = !DILocation(line: 29, column: 40, scope: !7)
!24 = !DILocation(line: 30, column: 35, scope: !7)
!25 = !DILocation(line: 30, column: 40, scope: !7)
!26 = !DILocation(line: 46, column: 25, scope: !7)
!27 = !DILocation(line: 31, column: 18, scope: !7)
!28 = !DILocation(line: 118, column: 15, scope: !29, inlinedAt: !31)
!29 = distinct !DILexicalBlockFile(scope: !7, file: !30, discriminator: 0)
!30 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!31 = !DILocation(line: 33, column: 40, scope: !7)
!32 = !DILocation(line: 121, column: 29, scope: !29, inlinedAt: !31)
!33 = !DILocation(line: 35, column: 19, scope: !7)
!34 = !DILocation(line: 45, column: 39, scope: !7)
!35 = !DILocation(line: 46, column: 36, scope: !7)
!36 = !DILocation(line: 48, column: 25, scope: !7)
!37 = !DILocation(line: 36, column: 18, scope: !7)
!38 = !DILocation(line: 118, column: 15, scope: !29, inlinedAt: !39)
!39 = !DILocation(line: 37, column: 40, scope: !7)
!40 = !DILocation(line: 121, column: 29, scope: !29, inlinedAt: !39)
!41 = !DILocation(line: 38, column: 20, scope: !7)
!42 = !DILocation(line: 47, column: 39, scope: !7)
!43 = !DILocation(line: 48, column: 37, scope: !7)
!44 = !DILocation(line: 50, column: 25, scope: !7)
!45 = !DILocation(line: 39, column: 20, scope: !7)
!46 = !DILocation(line: 118, column: 15, scope: !29, inlinedAt: !47)
!47 = !DILocation(line: 40, column: 41, scope: !7)
!48 = !DILocation(line: 121, column: 29, scope: !29, inlinedAt: !47)
!49 = !DILocation(line: 41, column: 21, scope: !7)
!50 = !DILocation(line: 49, column: 40, scope: !7)
!51 = !DILocation(line: 50, column: 37, scope: !7)
!52 = !DILocation(line: 52, column: 25, scope: !7)
!53 = !DILocation(line: 42, column: 20, scope: !7)
!54 = !DILocation(line: 118, column: 15, scope: !29, inlinedAt: !55)
!55 = !DILocation(line: 43, column: 41, scope: !7)
!56 = !DILocation(line: 121, column: 29, scope: !29, inlinedAt: !55)
!57 = !DILocation(line: 44, column: 21, scope: !7)
!58 = !DILocation(line: 51, column: 40, scope: !7)
!59 = !DILocation(line: 52, column: 37, scope: !7)
!60 = !DILocation(line: 52, column: 4, scope: !7)
