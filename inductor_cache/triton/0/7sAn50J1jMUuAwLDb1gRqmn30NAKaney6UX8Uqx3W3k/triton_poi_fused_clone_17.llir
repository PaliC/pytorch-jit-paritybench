; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_clone_17(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %6 = shl i32 %5, 6, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = lshr i32 %7, 2, !dbg !12
  %9 = and i32 %8, 31, !dbg !12
  %10 = and i32 %7, 63, !dbg !12
  %11 = or disjoint i32 %6, %9, !dbg !13
  %12 = or disjoint i32 %11, 32, !dbg !13
  %13 = or disjoint i32 %6, %10, !dbg !13
  %14 = icmp slt i32 %11, 257, !dbg !14
  %15 = icmp slt i32 %12, 257, !dbg !14
  %16 = icmp slt i32 %13, 257, !dbg !14
  %17 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %18 = shl i32 %17, 4, !dbg !16
  %19 = shl i32 %7, 2, !dbg !17
  %20 = and i32 %19, 12, !dbg !17
  %21 = lshr i32 %7, 6, !dbg !17
  %.lobit = and i32 %21, 1, !dbg !17
  %22 = or disjoint i32 %18, %20, !dbg !18
  %23 = or disjoint i32 %18, %.lobit, !dbg !18
  %24 = or disjoint i32 %23, 2, !dbg !18
  %25 = or disjoint i32 %23, 4, !dbg !18
  %26 = or disjoint i32 %23, 6, !dbg !18
  %27 = or disjoint i32 %23, 8, !dbg !18
  %28 = or disjoint i32 %23, 10, !dbg !18
  %29 = or disjoint i32 %23, 12, !dbg !18
  %30 = or disjoint i32 %23, 14, !dbg !18
  %31 = icmp slt i32 %22, 16, !dbg !19
  %32 = icmp slt i32 %23, 16, !dbg !19
  %33 = icmp slt i32 %24, 16, !dbg !19
  %34 = icmp slt i32 %25, 16, !dbg !19
  %35 = icmp slt i32 %26, 16, !dbg !19
  %36 = icmp slt i32 %27, 16, !dbg !19
  %37 = icmp slt i32 %28, 16, !dbg !19
  %38 = icmp slt i32 %29, 16, !dbg !19
  %39 = icmp slt i32 %30, 16, !dbg !19
  %40 = mul i32 %23, 257, !dbg !20
  %41 = mul i32 %24, 257, !dbg !20
  %42 = mul i32 %25, 257, !dbg !20
  %43 = mul i32 %26, 257, !dbg !20
  %44 = mul i32 %27, 257, !dbg !20
  %45 = mul i32 %28, 257, !dbg !20
  %46 = mul i32 %29, 257, !dbg !20
  %47 = mul i32 %30, 257, !dbg !20
  %48 = add i32 %40, %13, !dbg !21
  %49 = add i32 %13, %41, !dbg !21
  %50 = add i32 %13, %42, !dbg !21
  %51 = add i32 %13, %43, !dbg !21
  %52 = add i32 %13, %44, !dbg !21
  %53 = add i32 %13, %45, !dbg !21
  %54 = add i32 %13, %46, !dbg !21
  %55 = add i32 %13, %47, !dbg !21
  %56 = sext i32 %48 to i64, !dbg !22
  %57 = getelementptr float, ptr addrspace(1) %0, i64 %56, !dbg !22
  %58 = sext i32 %49 to i64, !dbg !22
  %59 = getelementptr float, ptr addrspace(1) %0, i64 %58, !dbg !22
  %60 = sext i32 %50 to i64, !dbg !22
  %61 = getelementptr float, ptr addrspace(1) %0, i64 %60, !dbg !22
  %62 = sext i32 %51 to i64, !dbg !22
  %63 = getelementptr float, ptr addrspace(1) %0, i64 %62, !dbg !22
  %64 = sext i32 %52 to i64, !dbg !22
  %65 = getelementptr float, ptr addrspace(1) %0, i64 %64, !dbg !22
  %66 = sext i32 %53 to i64, !dbg !22
  %67 = getelementptr float, ptr addrspace(1) %0, i64 %66, !dbg !22
  %68 = sext i32 %54 to i64, !dbg !22
  %69 = getelementptr float, ptr addrspace(1) %0, i64 %68, !dbg !22
  %70 = sext i32 %55 to i64, !dbg !22
  %71 = getelementptr float, ptr addrspace(1) %0, i64 %70, !dbg !22
  %72 = and i1 %14, %31, !dbg !23
  %73 = and i1 %15, %31, !dbg !23
  %74 = and i1 %16, %32, !dbg !23
  %75 = and i1 %33, %16, !dbg !23
  %76 = and i1 %34, %16, !dbg !23
  %77 = and i1 %35, %16, !dbg !23
  %78 = and i1 %36, %16, !dbg !23
  %79 = and i1 %37, %16, !dbg !23
  %80 = and i1 %38, %16, !dbg !23
  %81 = and i1 %39, %16, !dbg !23
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 %74) #2, !dbg !24
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 %75) #2, !dbg !24
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 %76) #2, !dbg !24
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 %77) #2, !dbg !24
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 %78) #2, !dbg !24
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 %79) #2, !dbg !24
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 %80) #2, !dbg !24
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %71, i1 %81) #2, !dbg !24
  %90 = shl i32 %11, 4, !dbg !25
  %91 = shl i32 %12, 4, !dbg !25
  %92 = add i32 %22, %90, !dbg !26
  %93 = add i32 %22, %91, !dbg !26
  %94 = sext i32 %92 to i64, !dbg !27
  %95 = getelementptr float, ptr addrspace(1) %1, i64 %94, !dbg !27
  %96 = sext i32 %93 to i64, !dbg !27
  %97 = getelementptr float, ptr addrspace(1) %1, i64 %96, !dbg !27
  %98 = shl i32 %7, 4, !dbg !28
  %99 = and i32 %98, 1008, !dbg !28
  %100 = or disjoint i32 %99, %.lobit, !dbg !28
  %101 = and i32 %19, 508, !dbg !28
  %102 = lshr exact i32 %99, 4, !dbg !28
  %103 = add nuw nsw i32 %102, %100, !dbg !28
  %104 = zext nneg i32 %103 to i64, !dbg !28
  %105 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %104, !dbg !28
  %106 = insertelement <1 x i32> poison, i32 %82, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %105, <1 x i32> %106, i1 true) #2, !dbg !28
  %107 = or disjoint i32 %100, 2, !dbg !28
  %108 = add nuw nsw i32 %107, %102, !dbg !28
  %109 = zext nneg i32 %108 to i64, !dbg !28
  %110 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %109, !dbg !28
  %111 = insertelement <1 x i32> poison, i32 %83, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %110, <1 x i32> %111, i1 true) #2, !dbg !28
  %112 = or disjoint i32 %100, 4, !dbg !28
  %113 = add nuw nsw i32 %112, %102, !dbg !28
  %114 = zext nneg i32 %113 to i64, !dbg !28
  %115 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %114, !dbg !28
  %116 = insertelement <1 x i32> poison, i32 %84, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %115, <1 x i32> %116, i1 true) #2, !dbg !28
  %117 = or disjoint i32 %100, 6, !dbg !28
  %118 = add nuw nsw i32 %117, %102, !dbg !28
  %119 = zext nneg i32 %118 to i64, !dbg !28
  %120 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %119, !dbg !28
  %121 = insertelement <1 x i32> poison, i32 %85, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %120, <1 x i32> %121, i1 true) #2, !dbg !28
  %122 = or disjoint i32 %100, 8, !dbg !28
  %123 = add nuw nsw i32 %122, %102, !dbg !28
  %124 = zext nneg i32 %123 to i64, !dbg !28
  %125 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %124, !dbg !28
  %126 = insertelement <1 x i32> poison, i32 %86, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %125, <1 x i32> %126, i1 true) #2, !dbg !28
  %127 = or disjoint i32 %100, 10, !dbg !28
  %128 = add nuw nsw i32 %127, %102, !dbg !28
  %129 = zext nneg i32 %128 to i64, !dbg !28
  %130 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %129, !dbg !28
  %131 = insertelement <1 x i32> poison, i32 %87, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %130, <1 x i32> %131, i1 true) #2, !dbg !28
  %132 = or disjoint i32 %100, 12, !dbg !28
  %133 = add nuw nsw i32 %132, %102, !dbg !28
  %134 = zext nneg i32 %133 to i64, !dbg !28
  %135 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %134, !dbg !28
  %136 = insertelement <1 x i32> poison, i32 %88, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %135, <1 x i32> %136, i1 true) #2, !dbg !28
  %137 = or disjoint i32 %100, 14, !dbg !28
  %138 = add nuw nsw i32 %137, %102, !dbg !28
  %139 = zext nneg i32 %138 to i64, !dbg !28
  %140 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %139, !dbg !28
  %141 = insertelement <1 x i32> poison, i32 %89, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %140, <1 x i32> %141, i1 true) #2, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %142 = lshr i32 %101, 4, !dbg !28
  %143 = add nuw nsw i32 %142, %101, !dbg !28
  %144 = zext nneg i32 %143 to i64, !dbg !28
  %145 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %144, !dbg !28
  %146 = load i32, ptr addrspace(3) %145, align 4, !dbg !28
  %147 = or disjoint i32 %101, 1, !dbg !28
  %148 = add nuw nsw i32 %147, %142, !dbg !28
  %149 = zext nneg i32 %148 to i64, !dbg !28
  %150 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %149, !dbg !28
  %151 = load i32, ptr addrspace(3) %150, align 4, !dbg !28
  %152 = or disjoint i32 %101, 2, !dbg !28
  %153 = add nuw nsw i32 %152, %142, !dbg !28
  %154 = zext nneg i32 %153 to i64, !dbg !28
  %155 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %154, !dbg !28
  %156 = load i32, ptr addrspace(3) %155, align 4, !dbg !28
  %157 = or disjoint i32 %101, 3, !dbg !28
  %158 = add nuw nsw i32 %157, %142, !dbg !28
  %159 = zext nneg i32 %158 to i64, !dbg !28
  %160 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %159, !dbg !28
  %161 = load i32, ptr addrspace(3) %160, align 4, !dbg !28
  %162 = or disjoint i32 %101, 512, !dbg !28
  %163 = lshr i32 %162, 4, !dbg !28
  %164 = add nuw nsw i32 %163, %162, !dbg !28
  %165 = zext nneg i32 %164 to i64, !dbg !28
  %166 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %165, !dbg !28
  %167 = load i32, ptr addrspace(3) %166, align 4, !dbg !28
  %168 = or disjoint i32 %101, 513, !dbg !28
  %169 = lshr i32 %168, 4, !dbg !28
  %170 = add nuw nsw i32 %169, %168, !dbg !28
  %171 = zext nneg i32 %170 to i64, !dbg !28
  %172 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %171, !dbg !28
  %173 = load i32, ptr addrspace(3) %172, align 4, !dbg !28
  %174 = or disjoint i32 %101, 514, !dbg !28
  %175 = lshr i32 %174, 4, !dbg !28
  %176 = add nuw nsw i32 %175, %174, !dbg !28
  %177 = zext nneg i32 %176 to i64, !dbg !28
  %178 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %177, !dbg !28
  %179 = load i32, ptr addrspace(3) %178, align 4, !dbg !28
  %180 = or disjoint i32 %101, 515, !dbg !28
  %181 = lshr i32 %180, 4, !dbg !28
  %182 = add nuw nsw i32 %181, %180, !dbg !28
  %183 = zext nneg i32 %182 to i64, !dbg !28
  %184 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %183, !dbg !28
  %185 = load i32, ptr addrspace(3) %184, align 4, !dbg !28
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %146, i32 %151, i32 %156, i32 %161, ptr addrspace(1) %95, i1 %72) #2, !dbg !28
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %167, i32 %173, i32 %179, i32 %185, ptr addrspace(1) %97, i1 %73) #2, !dbg !28
  ret void, !dbg !29
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "chbmxqnvpupt43innczaqg4uva55mk52biguhlqcjo7vzo7fqmxw.py", directory: "inductor_cache/hb")
!4 = !{ptr @triton_poi_fused_clone_17, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_clone_17, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_clone_17", linkageName: "triton_poi_fused_clone_17", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 39, scope: !7)
!21 = !DILocation(line: 30, column: 35, scope: !7)
!22 = !DILocation(line: 30, column: 30, scope: !7)
!23 = !DILocation(line: 30, column: 52, scope: !7)
!24 = !DILocation(line: 30, column: 44, scope: !7)
!25 = !DILocation(line: 31, column: 33, scope: !7)
!26 = !DILocation(line: 31, column: 30, scope: !7)
!27 = !DILocation(line: 31, column: 25, scope: !7)
!28 = !DILocation(line: 31, column: 44, scope: !7)
!29 = !DILocation(line: 31, column: 4, scope: !7)
