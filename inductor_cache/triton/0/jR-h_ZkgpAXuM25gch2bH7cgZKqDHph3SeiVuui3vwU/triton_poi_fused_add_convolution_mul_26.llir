; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_add_convolution_mul_26(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %10 = shl i32 %9, 9, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = and i32 %11, 127, !dbg !12
  %13 = or disjoint i32 %12, 128, !dbg !12
  %14 = or disjoint i32 %12, 256, !dbg !12
  %15 = or disjoint i32 %12, 384, !dbg !12
  %16 = shl i32 %11, 2, !dbg !12
  %17 = and i32 %16, 508, !dbg !12
  %18 = or disjoint i32 %10, %12, !dbg !13
  %19 = or disjoint i32 %10, %13, !dbg !13
  %20 = or disjoint i32 %10, %14, !dbg !13
  %21 = or disjoint i32 %10, %15, !dbg !13
  %22 = or disjoint i32 %10, %17, !dbg !13
  %23 = icmp slt i32 %18, 512, !dbg !14
  %24 = icmp slt i32 %19, 512, !dbg !14
  %25 = icmp slt i32 %20, 512, !dbg !14
  %26 = icmp slt i32 %21, 512, !dbg !14
  %27 = icmp slt i32 %22, 512, !dbg !14
  %28 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %29 = shl i32 %28, 1, !dbg !16
  %30 = or disjoint i32 %29, 1, !dbg !17
  %31 = icmp slt i32 %29, 256, !dbg !18
  %32 = icmp slt i32 %30, 256, !dbg !18
  %.frozen = freeze i32 %22, !dbg !19
  %33 = sdiv i32 %.frozen, 128, !dbg !19
  %34 = mul i32 %33, 128, !dbg !20
  %.decomposed = sub i32 %.frozen, %34, !dbg !20
  %35 = shl i32 %18, 8, !dbg !21
  %36 = shl i32 %19, 8, !dbg !21
  %37 = shl i32 %20, 8, !dbg !21
  %38 = shl i32 %21, 8, !dbg !21
  %39 = add i32 %35, %29, !dbg !22
  %40 = add i32 %36, %29, !dbg !22
  %41 = add i32 %37, %29, !dbg !22
  %42 = add i32 %38, %29, !dbg !22
  %43 = sext i32 %39 to i64, !dbg !23
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !23
  %45 = sext i32 %40 to i64, !dbg !23
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !23
  %47 = sext i32 %41 to i64, !dbg !23
  %48 = getelementptr float, ptr addrspace(1) %0, i64 %47, !dbg !23
  %49 = sext i32 %42 to i64, !dbg !23
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !23
  %51 = and i1 %31, %23, !dbg !24
  %52 = and i1 %31, %24, !dbg !24
  %53 = and i1 %31, %25, !dbg !24
  %54 = and i1 %31, %26, !dbg !24
  %55 = and i1 %31, %27, !dbg !24
  %56 = and i1 %27, %32, !dbg !24
  %57 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %44, i1 %51) #2, !dbg !25
  %58 = extractvalue { i32, i32 } %57, 0, !dbg !25
  %59 = extractvalue { i32, i32 } %57, 1, !dbg !25
  %60 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %46, i1 %52) #2, !dbg !25
  %61 = extractvalue { i32, i32 } %60, 0, !dbg !25
  %62 = extractvalue { i32, i32 } %60, 1, !dbg !25
  %63 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %48, i1 %53) #2, !dbg !25
  %64 = extractvalue { i32, i32 } %63, 0, !dbg !25
  %65 = extractvalue { i32, i32 } %63, 1, !dbg !25
  %66 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %50, i1 %54) #2, !dbg !25
  %67 = extractvalue { i32, i32 } %66, 0, !dbg !25
  %68 = extractvalue { i32, i32 } %66, 1, !dbg !25
  %69 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !25
  %70 = insertelement <1 x i32> poison, i32 %58, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %69, <1 x i32> %70, i1 true) #2, !dbg !25
  %71 = getelementptr inbounds i8, ptr addrspace(3) %69, i32 2064, !dbg !25
  %72 = insertelement <1 x i32> poison, i32 %59, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %71, <1 x i32> %72, i1 true) #2, !dbg !25
  %73 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !25
  %74 = insertelement <1 x i32> poison, i32 %61, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %73, <1 x i32> %74, i1 true) #2, !dbg !25
  %75 = getelementptr inbounds i8, ptr addrspace(3) %69, i32 2576, !dbg !25
  %76 = insertelement <1 x i32> poison, i32 %62, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %75, <1 x i32> %76, i1 true) #2, !dbg !25
  %77 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !25
  %78 = insertelement <1 x i32> poison, i32 %64, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %77, <1 x i32> %78, i1 true) #2, !dbg !25
  %79 = getelementptr inbounds i8, ptr addrspace(3) %69, i32 3088, !dbg !25
  %80 = insertelement <1 x i32> poison, i32 %65, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %79, <1 x i32> %80, i1 true) #2, !dbg !25
  %81 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !25
  %82 = insertelement <1 x i32> poison, i32 %67, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %81, <1 x i32> %82, i1 true) #2, !dbg !25
  %83 = getelementptr inbounds i8, ptr addrspace(3) %69, i32 3600, !dbg !25
  %84 = insertelement <1 x i32> poison, i32 %68, i64 0, !dbg !25
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %83, <1 x i32> %84, i1 true) #2, !dbg !25
  tail call void @llvm.nvvm.barrier0(), !dbg !25
  %85 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %17, !dbg !25
  %86 = load float, ptr addrspace(3) %85, align 16, !dbg !25
  %87 = getelementptr inbounds i8, ptr addrspace(3) %85, i32 4, !dbg !25
  %88 = load float, ptr addrspace(3) %87, align 4, !dbg !25
  %89 = getelementptr inbounds i8, ptr addrspace(3) %85, i32 8, !dbg !25
  %90 = load float, ptr addrspace(3) %89, align 8, !dbg !25
  %91 = getelementptr inbounds i8, ptr addrspace(3) %85, i32 12, !dbg !25
  %92 = load float, ptr addrspace(3) %91, align 4, !dbg !25
  %93 = getelementptr inbounds i8, ptr addrspace(3) %85, i32 2064, !dbg !25
  %94 = load float, ptr addrspace(3) %93, align 16, !dbg !25
  %95 = getelementptr inbounds i8, ptr addrspace(3) %85, i32 2068, !dbg !25
  %96 = load float, ptr addrspace(3) %95, align 4, !dbg !25
  %97 = getelementptr inbounds i8, ptr addrspace(3) %85, i32 2072, !dbg !25
  %98 = load float, ptr addrspace(3) %97, align 8, !dbg !25
  %99 = getelementptr inbounds i8, ptr addrspace(3) %85, i32 2076, !dbg !25
  %100 = load float, ptr addrspace(3) %99, align 4, !dbg !25
  %101 = sext i32 %.decomposed to i64, !dbg !26
  %102 = getelementptr float, ptr addrspace(1) %1, i64 %101, !dbg !26
  %103 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %102, i1 %27) #2, !dbg !27
  %104 = extractvalue { i32, i32, i32, i32 } %103, 0, !dbg !27
  %105 = extractvalue { i32, i32, i32, i32 } %103, 1, !dbg !27
  %106 = extractvalue { i32, i32, i32, i32 } %103, 2, !dbg !27
  %107 = extractvalue { i32, i32, i32, i32 } %103, 3, !dbg !27
  %108 = bitcast i32 %104 to float, !dbg !27
  %109 = bitcast i32 %105 to float, !dbg !27
  %110 = bitcast i32 %106 to float, !dbg !27
  %111 = bitcast i32 %107 to float, !dbg !27
  %112 = shl i32 %28, 8, !dbg !28
  %113 = shl i32 %30, 7, !dbg !28
  %114 = shl i32 %33, 15, !dbg !29
  %115 = add i32 %114, %.decomposed, !dbg !30
  %116 = add i32 %115, %112, !dbg !31
  %117 = add i32 %115, %113, !dbg !31
  %118 = sext i32 %116 to i64, !dbg !32
  %119 = getelementptr float, ptr addrspace(1) %2, i64 %118, !dbg !32
  %120 = sext i32 %117 to i64, !dbg !32
  %121 = getelementptr float, ptr addrspace(1) %2, i64 %120, !dbg !32
  %122 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %119, i1 %55) #2, !dbg !33
  %123 = extractvalue { i32, i32, i32, i32 } %122, 0, !dbg !33
  %124 = extractvalue { i32, i32, i32, i32 } %122, 1, !dbg !33
  %125 = extractvalue { i32, i32, i32, i32 } %122, 2, !dbg !33
  %126 = extractvalue { i32, i32, i32, i32 } %122, 3, !dbg !33
  %127 = bitcast i32 %123 to float, !dbg !33
  %128 = bitcast i32 %124 to float, !dbg !33
  %129 = bitcast i32 %125 to float, !dbg !33
  %130 = bitcast i32 %126 to float, !dbg !33
  %131 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %121, i1 %56) #2, !dbg !33
  %132 = extractvalue { i32, i32, i32, i32 } %131, 0, !dbg !33
  %133 = extractvalue { i32, i32, i32, i32 } %131, 1, !dbg !33
  %134 = extractvalue { i32, i32, i32, i32 } %131, 2, !dbg !33
  %135 = extractvalue { i32, i32, i32, i32 } %131, 3, !dbg !33
  %136 = bitcast i32 %132 to float, !dbg !33
  %137 = bitcast i32 %133 to float, !dbg !33
  %138 = bitcast i32 %134 to float, !dbg !33
  %139 = bitcast i32 %135 to float, !dbg !33
  %140 = getelementptr float, ptr addrspace(1) %3, i64 %101, !dbg !34
  %141 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %140, i1 %27) #2, !dbg !35
  %142 = extractvalue { i32, i32, i32, i32 } %141, 0, !dbg !35
  %143 = extractvalue { i32, i32, i32, i32 } %141, 1, !dbg !35
  %144 = extractvalue { i32, i32, i32, i32 } %141, 2, !dbg !35
  %145 = extractvalue { i32, i32, i32, i32 } %141, 3, !dbg !35
  %146 = bitcast i32 %142 to float, !dbg !35
  %147 = bitcast i32 %143 to float, !dbg !35
  %148 = bitcast i32 %144 to float, !dbg !35
  %149 = bitcast i32 %145 to float, !dbg !35
  %150 = fmul float %108, %127, !dbg !36
  %151 = fmul float %109, %128, !dbg !36
  %152 = fmul float %110, %129, !dbg !36
  %153 = fmul float %111, %130, !dbg !36
  %154 = fmul float %108, %136, !dbg !36
  %155 = fmul float %109, %137, !dbg !36
  %156 = fmul float %110, %138, !dbg !36
  %157 = fmul float %111, %139, !dbg !36
  %158 = fadd float %150, %146, !dbg !37
  %159 = fadd float %151, %147, !dbg !37
  %160 = fadd float %152, %148, !dbg !37
  %161 = fadd float %153, %149, !dbg !37
  %162 = fadd float %154, %146, !dbg !37
  %163 = fadd float %155, %147, !dbg !37
  %164 = fadd float %156, %148, !dbg !37
  %165 = fadd float %157, %149, !dbg !37
  %166 = fadd float %86, %158, !dbg !38
  %167 = fadd float %88, %159, !dbg !38
  %168 = fadd float %90, %160, !dbg !38
  %169 = fadd float %92, %161, !dbg !38
  %170 = fadd float %94, %162, !dbg !38
  %171 = fadd float %96, %163, !dbg !38
  %172 = fadd float %98, %164, !dbg !38
  %173 = fadd float %100, %165, !dbg !38
  %174 = getelementptr float, ptr addrspace(1) %4, i64 %43, !dbg !39
  %175 = getelementptr float, ptr addrspace(1) %4, i64 %45, !dbg !39
  %176 = getelementptr float, ptr addrspace(1) %4, i64 %47, !dbg !39
  %177 = getelementptr float, ptr addrspace(1) %4, i64 %49, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %178 = shl i32 %11, 3, !dbg !40
  %179 = and i32 %178, 1016, !dbg !40
  %180 = shl i32 %11, 1, !dbg !40
  %181 = and i32 %180, 254, !dbg !40
  %182 = lshr exact i32 %179, 1, !dbg !40
  %183 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %182, !dbg !40
  %184 = getelementptr inbounds float, ptr addrspace(3) %183, i32 %179, !dbg !40
  %185 = bitcast float %166 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %184, <1 x i32> %185, i1 true) #2, !dbg !40
  %186 = or disjoint i32 %179, 2, !dbg !40
  %187 = lshr exact i32 %186, 1, !dbg !40
  %188 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %187, !dbg !40
  %189 = getelementptr inbounds float, ptr addrspace(3) %188, i32 %186, !dbg !40
  %190 = bitcast float %167 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %189, <1 x i32> %190, i1 true) #2, !dbg !40
  %191 = or disjoint i32 %179, 4, !dbg !40
  %192 = lshr exact i32 %191, 1, !dbg !40
  %193 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %192, !dbg !40
  %194 = getelementptr inbounds float, ptr addrspace(3) %193, i32 %191, !dbg !40
  %195 = bitcast float %168 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %194, <1 x i32> %195, i1 true) #2, !dbg !40
  %196 = or disjoint i32 %179, 6, !dbg !40
  %197 = lshr exact i32 %196, 1, !dbg !40
  %198 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %197, !dbg !40
  %199 = getelementptr inbounds float, ptr addrspace(3) %198, i32 %196, !dbg !40
  %200 = bitcast float %169 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %199, <1 x i32> %200, i1 true) #2, !dbg !40
  %201 = or disjoint i32 %179, 1, !dbg !40
  %202 = getelementptr inbounds float, ptr addrspace(3) %183, i32 %201, !dbg !40
  %203 = bitcast float %170 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %202, <1 x i32> %203, i1 true) #2, !dbg !40
  %204 = or disjoint i32 %179, 3, !dbg !40
  %205 = lshr i32 %204, 1, !dbg !40
  %206 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %205, !dbg !40
  %207 = getelementptr inbounds float, ptr addrspace(3) %206, i32 %204, !dbg !40
  %208 = bitcast float %171 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %207, <1 x i32> %208, i1 true) #2, !dbg !40
  %209 = or disjoint i32 %179, 5, !dbg !40
  %210 = lshr i32 %209, 1, !dbg !40
  %211 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %210, !dbg !40
  %212 = getelementptr inbounds float, ptr addrspace(3) %211, i32 %209, !dbg !40
  %213 = bitcast float %172 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %212, <1 x i32> %213, i1 true) #2, !dbg !40
  %214 = or disjoint i32 %179, 7, !dbg !40
  %215 = lshr i32 %214, 1, !dbg !40
  %216 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %215, !dbg !40
  %217 = getelementptr inbounds float, ptr addrspace(3) %216, i32 %214, !dbg !40
  %218 = bitcast float %173 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %217, <1 x i32> %218, i1 true) #2, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %219 = lshr exact i32 %181, 1, !dbg !40
  %220 = getelementptr float, ptr addrspace(3) @global_smem, i32 %219, !dbg !40
  %221 = getelementptr float, ptr addrspace(3) %220, i32 %181, !dbg !40
  %222 = load i32, ptr addrspace(3) %221, align 4, !dbg !40
  %223 = or disjoint i32 %181, 1, !dbg !40
  %224 = getelementptr float, ptr addrspace(3) %220, i32 %223, !dbg !40
  %225 = load i32, ptr addrspace(3) %224, align 4, !dbg !40
  %226 = or disjoint i32 %181, 256, !dbg !40
  %227 = lshr exact i32 %226, 1, !dbg !40
  %228 = getelementptr float, ptr addrspace(3) @global_smem, i32 %227, !dbg !40
  %229 = getelementptr float, ptr addrspace(3) %228, i32 %226, !dbg !40
  %230 = load i32, ptr addrspace(3) %229, align 4, !dbg !40
  %231 = or disjoint i32 %181, 257, !dbg !40
  %232 = lshr i32 %231, 1, !dbg !40
  %233 = getelementptr float, ptr addrspace(3) @global_smem, i32 %232, !dbg !40
  %234 = getelementptr float, ptr addrspace(3) %233, i32 %231, !dbg !40
  %235 = load i32, ptr addrspace(3) %234, align 4, !dbg !40
  %236 = or disjoint i32 %181, 512, !dbg !40
  %237 = lshr exact i32 %236, 1, !dbg !40
  %238 = getelementptr float, ptr addrspace(3) @global_smem, i32 %237, !dbg !40
  %239 = getelementptr float, ptr addrspace(3) %238, i32 %236, !dbg !40
  %240 = load i32, ptr addrspace(3) %239, align 4, !dbg !40
  %241 = or disjoint i32 %181, 513, !dbg !40
  %242 = lshr i32 %241, 1, !dbg !40
  %243 = getelementptr float, ptr addrspace(3) @global_smem, i32 %242, !dbg !40
  %244 = getelementptr float, ptr addrspace(3) %243, i32 %241, !dbg !40
  %245 = load i32, ptr addrspace(3) %244, align 4, !dbg !40
  %246 = or disjoint i32 %181, 768, !dbg !40
  %247 = lshr exact i32 %246, 1, !dbg !40
  %248 = getelementptr float, ptr addrspace(3) @global_smem, i32 %247, !dbg !40
  %249 = getelementptr float, ptr addrspace(3) %248, i32 %246, !dbg !40
  %250 = load i32, ptr addrspace(3) %249, align 4, !dbg !40
  %251 = or disjoint i32 %181, 769, !dbg !40
  %252 = lshr i32 %251, 1, !dbg !40
  %253 = getelementptr float, ptr addrspace(3) @global_smem, i32 %252, !dbg !40
  %254 = getelementptr float, ptr addrspace(3) %253, i32 %251, !dbg !40
  %255 = load i32, ptr addrspace(3) %254, align 4, !dbg !40
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %222, i32 %225, ptr addrspace(1) %174, i1 %51) #2, !dbg !40
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %230, i32 %235, ptr addrspace(1) %175, i1 %52) #2, !dbg !40
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %240, i32 %245, ptr addrspace(1) %176, i1 %53) #2, !dbg !40
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %250, i32 %255, ptr addrspace(1) %177, i1 %54) #2, !dbg !40
  %256 = getelementptr float, ptr addrspace(1) %5, i64 %118, !dbg !41
  %257 = getelementptr float, ptr addrspace(1) %5, i64 %120, !dbg !41
  %258 = bitcast float %166 to i32, !dbg !42
  %259 = bitcast float %167 to i32, !dbg !42
  %260 = bitcast float %168 to i32, !dbg !42
  %261 = bitcast float %169 to i32, !dbg !42
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %258, i32 %259, i32 %260, i32 %261, ptr addrspace(1) %256, i1 %55) #2, !dbg !42
  %262 = bitcast float %170 to i32, !dbg !42
  %263 = bitcast float %171 to i32, !dbg !42
  %264 = bitcast float %172 to i32, !dbg !42
  %265 = bitcast float %173 to i32, !dbg !42
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %262, i32 %263, i32 %264, i32 %265, ptr addrspace(1) %257, i1 %56) #2, !dbg !42
  ret void, !dbg !43
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c6zpebawlxua2ufsormzgbbzvmkihwmfqieo7inr5qepg4wshcni.py", directory: "inductor_cache/6z")
!4 = !{ptr @triton_poi_fused_add_convolution_mul_26, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_convolution_mul_26, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_convolution_mul_26", linkageName: "triton_poi_fused_add_convolution_mul_26", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 31, column: 19, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 39, scope: !7)
!22 = !DILocation(line: 32, column: 35, scope: !7)
!23 = !DILocation(line: 32, column: 30, scope: !7)
!24 = !DILocation(line: 32, column: 52, scope: !7)
!25 = !DILocation(line: 32, column: 44, scope: !7)
!26 = !DILocation(line: 33, column: 30, scope: !7)
!27 = !DILocation(line: 33, column: 35, scope: !7)
!28 = !DILocation(line: 34, column: 39, scope: !7)
!29 = !DILocation(line: 34, column: 50, scope: !7)
!30 = !DILocation(line: 34, column: 35, scope: !7)
!31 = !DILocation(line: 34, column: 44, scope: !7)
!32 = !DILocation(line: 34, column: 30, scope: !7)
!33 = !DILocation(line: 34, column: 55, scope: !7)
!34 = !DILocation(line: 35, column: 30, scope: !7)
!35 = !DILocation(line: 35, column: 35, scope: !7)
!36 = !DILocation(line: 36, column: 18, scope: !7)
!37 = !DILocation(line: 37, column: 18, scope: !7)
!38 = !DILocation(line: 38, column: 18, scope: !7)
!39 = !DILocation(line: 39, column: 25, scope: !7)
!40 = !DILocation(line: 39, column: 45, scope: !7)
!41 = !DILocation(line: 40, column: 25, scope: !7)
!42 = !DILocation(line: 40, column: 56, scope: !7)
!43 = !DILocation(line: 40, column: 4, scope: !7)
