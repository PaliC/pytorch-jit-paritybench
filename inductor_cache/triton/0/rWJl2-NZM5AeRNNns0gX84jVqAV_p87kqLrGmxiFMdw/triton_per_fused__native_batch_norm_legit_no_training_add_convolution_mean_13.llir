; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused__native_batch_norm_legit_no_training_add_convolution_mean_13(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, i32 %10, i32 %11) local_unnamed_addr !dbg !7 {
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %14 = icmp slt i32 %13, 512, !dbg !11
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %16 = and i32 %15, 63, !dbg !12
  %17 = srem i32 %13, 128, !dbg !13
  %18 = shl i32 %13, 6, !dbg !14
  %19 = or disjoint i32 %18, %16, !dbg !15
  %20 = sext i32 %19 to i64, !dbg !16
  %21 = getelementptr float, ptr addrspace(1) %0, i64 %20, !dbg !16
  %22 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %21, i1 %14, i32 0, i1 %14) #5, !dbg !17
  %23 = sext i32 %17 to i64, !dbg !18
  %24 = getelementptr float, ptr addrspace(1) %3, i64 %23, !dbg !18
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 %14) #5, !dbg !19
  %26 = getelementptr float, ptr addrspace(1) %1, i64 %20, !dbg !20
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %26, i1 %14, i32 0, i1 %14) #5, !dbg !21
  %28 = getelementptr float, ptr addrspace(1) %4, i64 %23, !dbg !22
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 %14) #5, !dbg !23
  %30 = getelementptr float, ptr addrspace(1) %5, i64 %23, !dbg !24
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 %14) #5, !dbg !25
  %32 = getelementptr float, ptr addrspace(1) %6, i64 %23, !dbg !26
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 %14) #5, !dbg !27
  %34 = bitcast i32 %33 to float, !dbg !27
  %35 = getelementptr float, ptr addrspace(1) %7, i64 %23, !dbg !28
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 %14) #5, !dbg !29
  %37 = getelementptr float, ptr addrspace(1) %8, i64 %23, !dbg !30
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %14) #5, !dbg !31
  %39 = fadd float %34, 0x3EE4F8B580000000, !dbg !32
  %40 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !33
  %.not.i = icmp eq i32 %40, 0, !dbg !33
  %41 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !33
  %.not1.i = icmp eq i32 %41, 0, !dbg !33
  br i1 %.not.i, label %47, label %42, !dbg !33

42:                                               ; preds = %12
  br i1 %.not1.i, label %45, label %43, !dbg !33

43:                                               ; preds = %42
  %44 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %39) #5, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

45:                                               ; preds = %42
  %46 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %39) #5, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

47:                                               ; preds = %12
  br i1 %.not1.i, label %50, label %48, !dbg !33

48:                                               ; preds = %47
  %49 = tail call float @llvm.nvvm.sqrt.rn.f(float %39) #5, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

50:                                               ; preds = %47
  %51 = tail call float @llvm.nvvm.sqrt.approx.f(float %39) #5, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

__nv_sqrtf.exit:                                  ; preds = %43, %45, %48, %50
  %.0.i = phi float [ %44, %43 ], [ %46, %45 ], [ %49, %48 ], [ %51, %50 ], !dbg !33
  %52 = bitcast i32 %27 to float, !dbg !21
  %53 = bitcast i32 %29 to float, !dbg !23
  %54 = fadd float %52, %53, !dbg !34
  %55 = bitcast i32 %31 to float, !dbg !25
  %56 = fsub float %54, %55, !dbg !35
  %57 = bitcast i32 %22 to float, !dbg !17
  %58 = bitcast i32 %25 to float, !dbg !19
  %59 = fadd float %57, %58, !dbg !36
  %60 = bitcast i32 %38 to float, !dbg !31
  %61 = bitcast i32 %36 to float, !dbg !29
  %62 = lshr i32 %15, 5, !dbg !12
  %63 = and i32 %15, 31, !dbg !12
  %64 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #5, !dbg !37
  %65 = fmul float %56, %64, !dbg !38
  %66 = fmul float %65, %61, !dbg !39
  %67 = fadd float %66, %60, !dbg !40
  %68 = fadd float %59, %67, !dbg !41
  %69 = select i1 %14, float %68, float 0.000000e+00, !dbg !42
  %70 = bitcast float %69 to i32, !dbg !43
  %71 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %70, i32 16, i32 31), !dbg !43
  %72 = bitcast i32 %71 to float, !dbg !43
  %73 = fadd float %69, %72, !dbg !47
  %74 = bitcast float %73 to i32, !dbg !43
  %75 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %74, i32 8, i32 31), !dbg !43
  %76 = bitcast i32 %75 to float, !dbg !43
  %77 = fadd float %73, %76, !dbg !47
  %78 = bitcast float %77 to i32, !dbg !43
  %79 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %78, i32 4, i32 31), !dbg !43
  %80 = bitcast i32 %79 to float, !dbg !43
  %81 = fadd float %77, %80, !dbg !47
  %82 = bitcast float %81 to i32, !dbg !43
  %83 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %82, i32 2, i32 31), !dbg !43
  %84 = bitcast i32 %83 to float, !dbg !43
  %85 = fadd float %81, %84, !dbg !47
  %86 = bitcast float %85 to i32, !dbg !43
  %87 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %86, i32 1, i32 31), !dbg !43
  %88 = bitcast i32 %87 to float, !dbg !43
  %89 = fadd float %85, %88, !dbg !47
  %90 = icmp eq i32 %63, 0, !dbg !43
  %91 = and i32 %62, 1, !dbg !43
  %92 = zext nneg i32 %91 to i64, !dbg !43
  %93 = getelementptr float, ptr addrspace(3) @global_smem, i64 %92, !dbg !43
  %94 = bitcast float %89 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %93, <1 x i32> %94, i1 %90) #5, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %95 = icmp slt i32 %15, 2, !dbg !43
  %96 = sext i32 %15 to i64, !dbg !43
  %97 = getelementptr float, ptr addrspace(3) @global_smem, i64 %96, !dbg !43
  %98 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %97, i1 %95) #5, !dbg !43
  %99 = bitcast i32 %98 to float, !dbg !43
  %100 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %98, i32 1, i32 31), !dbg !43
  %101 = bitcast i32 %100 to float, !dbg !43
  %102 = fadd float %99, %101, !dbg !47
  %103 = and i32 %15, 1, !dbg !43
  %104 = icmp eq i32 %103, 0, !dbg !43
  %105 = and i1 %95, %104, !dbg !43
  %106 = bitcast float %102 to <1 x i32>, !dbg !43
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %97, <1 x i32> %106, i1 %105) #5, !dbg !43
  tail call void @llvm.nvvm.barrier0(), !dbg !43
  %107 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !43
  %108 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %107, float 6.400000e+01) #5, !dbg !49
  %109 = bitcast float %59 to i32, !dbg !50
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %109, ptr addrspace(1) %21, i1 %14) #5, !dbg !50
  %110 = bitcast float %54 to i32, !dbg !51
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %110, ptr addrspace(1) %26, i1 %14) #5, !dbg !51
  %111 = getelementptr float, ptr addrspace(1) %9, i64 %20, !dbg !52
  %112 = bitcast float %68 to i32, !dbg !53
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %112, ptr addrspace(1) %111, i1 %14) #5, !dbg !53
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %113 = sext i32 %13 to i64, !dbg !55
  %114 = getelementptr float, ptr addrspace(1) %2, i64 %113, !dbg !55
  %115 = icmp eq i32 %16, 0, !dbg !56
  %116 = bitcast float %108 to i32, !dbg !56
  %117 = and i1 %115, %14, !dbg !56
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %116, ptr addrspace(1) %114, i1 %117) #5, !dbg !56
  ret void, !dbg !57
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cbpsjynu72otjyzp56x5upb3lz57hhznbaekx6x6idmmbbr3mgcv.py", directory: "inductor_cache/bp")
!4 = !{ptr @triton_per_fused__native_batch_norm_legit_no_training_add_convolution_mean_13, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__native_batch_norm_legit_no_training_add_convolution_mean_13, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__native_batch_norm_legit_no_training_add_convolution_mean_13", linkageName: "triton_per_fused__native_batch_norm_legit_no_training_add_convolution_mean_13", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 21, scope: !7)
!12 = !DILocation(line: 26, column: 34, scope: !7)
!13 = !DILocation(line: 31, column: 19, scope: !7)
!14 = !DILocation(line: 32, column: 42, scope: !7)
!15 = !DILocation(line: 32, column: 39, scope: !7)
!16 = !DILocation(line: 32, column: 34, scope: !7)
!17 = !DILocation(line: 32, column: 47, scope: !7)
!18 = !DILocation(line: 33, column: 30, scope: !7)
!19 = !DILocation(line: 33, column: 35, scope: !7)
!20 = !DILocation(line: 34, column: 34, scope: !7)
!21 = !DILocation(line: 34, column: 47, scope: !7)
!22 = !DILocation(line: 35, column: 30, scope: !7)
!23 = !DILocation(line: 35, column: 35, scope: !7)
!24 = !DILocation(line: 36, column: 30, scope: !7)
!25 = !DILocation(line: 36, column: 35, scope: !7)
!26 = !DILocation(line: 37, column: 30, scope: !7)
!27 = !DILocation(line: 37, column: 35, scope: !7)
!28 = !DILocation(line: 38, column: 31, scope: !7)
!29 = !DILocation(line: 38, column: 36, scope: !7)
!30 = !DILocation(line: 39, column: 31, scope: !7)
!31 = !DILocation(line: 39, column: 36, scope: !7)
!32 = !DILocation(line: 44, column: 19, scope: !7)
!33 = !DILocation(line: 45, column: 27, scope: !7)
!34 = !DILocation(line: 41, column: 18, scope: !7)
!35 = !DILocation(line: 42, column: 18, scope: !7)
!36 = !DILocation(line: 40, column: 18, scope: !7)
!37 = !DILocation(line: 47, column: 20, scope: !7)
!38 = !DILocation(line: 50, column: 19, scope: !7)
!39 = !DILocation(line: 51, column: 20, scope: !7)
!40 = !DILocation(line: 52, column: 20, scope: !7)
!41 = !DILocation(line: 53, column: 19, scope: !7)
!42 = !DILocation(line: 55, column: 35, scope: !7)
!43 = !DILocation(line: 267, column: 36, scope: !44, inlinedAt: !46)
!44 = distinct !DILexicalBlockFile(scope: !7, file: !45, discriminator: 0)
!45 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!46 = !DILocation(line: 56, column: 26, scope: !7)
!47 = !DILocation(line: 256, column: 15, scope: !48, inlinedAt: !46)
!48 = distinct !DILexicalBlockFile(scope: !44, file: !45, discriminator: 0)
!49 = !DILocation(line: 58, column: 20, scope: !7)
!50 = !DILocation(line: 59, column: 47, scope: !7)
!51 = !DILocation(line: 60, column: 47, scope: !7)
!52 = !DILocation(line: 61, column: 25, scope: !7)
!53 = !DILocation(line: 61, column: 45, scope: !7)
!54 = !DILocation(line: 62, column: 4, scope: !7)
!55 = !DILocation(line: 63, column: 28, scope: !7)
!56 = !DILocation(line: 63, column: 40, scope: !7)
!57 = !DILocation(line: 63, column: 4, scope: !7)
