#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 2], order = [1, 0]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 2], order = [0, 1]}>
#loc = loc("inductor_cache/bp/cbpsjynu72otjyzp56x5upb3lz57hhznbaekx6x6idmmbbr3mgcv.py":19:0)
#loc1 = loc(unknown)
#loc36 = loc("inductor_cache/bp/cbpsjynu72otjyzp56x5upb3lz57hhznbaekx6x6idmmbbr3mgcv.py":56:26)
#loc49 = loc(callsite(#loc1 at #loc36))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 2 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_per_fused__native_batch_norm_legit_no_training_add_convolution_mean_13(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/bp/cbpsjynu72otjyzp56x5upb3lz57hhznbaekx6x6idmmbbr3mgcv.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/bp/cbpsjynu72otjyzp56x5upb3lz57hhznbaekx6x6idmmbbr3mgcv.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/bp/cbpsjynu72otjyzp56x5upb3lz57hhznbaekx6x6idmmbbr3mgcv.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/bp/cbpsjynu72otjyzp56x5upb3lz57hhznbaekx6x6idmmbbr3mgcv.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/bp/cbpsjynu72otjyzp56x5upb3lz57hhznbaekx6x6idmmbbr3mgcv.py":19:0), %arg5: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/bp/cbpsjynu72otjyzp56x5upb3lz57hhznbaekx6x6idmmbbr3mgcv.py":19:0), %arg6: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/bp/cbpsjynu72otjyzp56x5upb3lz57hhznbaekx6x6idmmbbr3mgcv.py":19:0), %arg7: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/bp/cbpsjynu72otjyzp56x5upb3lz57hhznbaekx6x6idmmbbr3mgcv.py":19:0), %arg8: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/bp/cbpsjynu72otjyzp56x5upb3lz57hhznbaekx6x6idmmbbr3mgcv.py":19:0), %arg9: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/bp/cbpsjynu72otjyzp56x5upb3lz57hhznbaekx6x6idmmbbr3mgcv.py":19:0), %arg10: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/bp/cbpsjynu72otjyzp56x5upb3lz57hhznbaekx6x6idmmbbr3mgcv.py":19:0), %arg11: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/bp/cbpsjynu72otjyzp56x5upb3lz57hhznbaekx6x6idmmbbr3mgcv.py":19:0)) attributes {noinline = false} {
    %c512_i32 = arith.constant 512 : i32 loc(#loc1)
    %c128_i32 = arith.constant 128 : i32 loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %cst = arith.constant dense<0.000000e+00> : tensor<1x64xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<9.99999974E-6> : tensor<1x1xf32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<1.000000e+00> : tensor<1x1xf32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<6.400000e+01> : tensor<1x1xf32, #blocked1> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.cmpi slt, %0, %c512_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc4)
    %3 = tt.expand_dims %2 {axis = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x64xi32, #blocked> loc(#loc4)
    %4 = arith.remsi %0, %c128_i32 : i32 loc(#loc5)
    %5 = arith.muli %0, %c64_i32 : i32 loc(#loc6)
    %6 = tt.splat %5 : i32 -> tensor<1x64xi32, #blocked> loc(#loc7)
    %7 = arith.addi %3, %6 : tensor<1x64xi32, #blocked> loc(#loc7)
    %8 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc8)
    %9 = tt.addptr %8, %7 : tensor<1x64x!tt.ptr<f32>, #blocked>, tensor<1x64xi32, #blocked> loc(#loc8)
    %10 = tt.splat %1 : i1 -> tensor<1x64xi1, #blocked> loc(#loc9)
    %11 = tt.load %9, %10, %cst : tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc9)
    %12 = tt.addptr %arg3, %4 : !tt.ptr<f32>, i32 loc(#loc10)
    %13 = tt.splat %12 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc11)
    %14 = tt.splat %1 : i1 -> tensor<1x1xi1, #blocked> loc(#loc11)
    %15 = tt.load %13, %14 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc11)
    %16 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc12)
    %17 = tt.addptr %16, %7 : tensor<1x64x!tt.ptr<f32>, #blocked>, tensor<1x64xi32, #blocked> loc(#loc12)
    %18 = tt.load %17, %10, %cst : tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc13)
    %19 = tt.addptr %arg4, %4 : !tt.ptr<f32>, i32 loc(#loc14)
    %20 = tt.splat %19 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc15)
    %21 = tt.load %20, %14 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc15)
    %22 = tt.addptr %arg5, %4 : !tt.ptr<f32>, i32 loc(#loc16)
    %23 = tt.splat %22 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc17)
    %24 = tt.load %23, %14 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc17)
    %25 = tt.addptr %arg6, %4 : !tt.ptr<f32>, i32 loc(#loc18)
    %26 = tt.splat %25 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc19)
    %27 = tt.load %26, %14 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc19)
    %28 = tt.addptr %arg7, %4 : !tt.ptr<f32>, i32 loc(#loc20)
    %29 = tt.splat %28 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc21)
    %30 = tt.load %29, %14 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc21)
    %31 = tt.addptr %arg8, %4 : !tt.ptr<f32>, i32 loc(#loc22)
    %32 = tt.splat %31 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc23)
    %33 = tt.load %32, %14 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc23)
    %34 = tt.broadcast %15 : tensor<1x1xf32, #blocked> -> tensor<1x64xf32, #blocked> loc(#loc24)
    %35 = arith.addf %11, %34 : tensor<1x64xf32, #blocked> loc(#loc24)
    %36 = tt.broadcast %21 : tensor<1x1xf32, #blocked> -> tensor<1x64xf32, #blocked> loc(#loc25)
    %37 = arith.addf %18, %36 : tensor<1x64xf32, #blocked> loc(#loc25)
    %38 = tt.broadcast %24 : tensor<1x1xf32, #blocked> -> tensor<1x64xf32, #blocked> loc(#loc26)
    %39 = arith.subf %37, %38 : tensor<1x64xf32, #blocked> loc(#loc26)
    %40 = arith.addf %27, %cst_0 : tensor<1x1xf32, #blocked> loc(#loc27)
    %41 = tt.extern_elementwise %40 {libname = "", libpath = "", pure = true, symbol = "__nv_sqrtf"} : (tensor<1x1xf32, #blocked>) -> tensor<1x1xf32, #blocked> loc(#loc28)
    %42 = arith.divf %cst_1, %41 : tensor<1x1xf32, #blocked> loc(#loc29)
    %43 = tt.broadcast %42 : tensor<1x1xf32, #blocked> -> tensor<1x64xf32, #blocked> loc(#loc30)
    %44 = arith.mulf %39, %43 : tensor<1x64xf32, #blocked> loc(#loc30)
    %45 = tt.broadcast %30 : tensor<1x1xf32, #blocked> -> tensor<1x64xf32, #blocked> loc(#loc31)
    %46 = arith.mulf %44, %45 : tensor<1x64xf32, #blocked> loc(#loc31)
    %47 = tt.broadcast %33 : tensor<1x1xf32, #blocked> -> tensor<1x64xf32, #blocked> loc(#loc32)
    %48 = arith.addf %46, %47 : tensor<1x64xf32, #blocked> loc(#loc32)
    %49 = arith.addf %35, %48 : tensor<1x64xf32, #blocked> loc(#loc33)
    %50 = arith.select %10, %49, %cst : tensor<1x64xi1, #blocked>, tensor<1x64xf32, #blocked> loc(#loc34)
    %51 = "tt.reduce"(%50) <{axis = 1 : i32}> ({
    ^bb0(%arg12: f32 loc(callsite(#loc1 at #loc36)), %arg13: f32 loc(callsite(#loc1 at #loc36))):
      %60 = arith.addf %arg12, %arg13 : f32 loc(#loc51)
      tt.reduce.return %60 : f32 loc(#loc48)
    }) : (tensor<1x64xf32, #blocked>) -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc48)
    %52 = triton_gpu.convert_layout %51 {fastmath = #arith.fastmath<none>} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc38)
    %53 = tt.expand_dims %52 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<1x1xf32, #blocked1> loc(#loc39)
    %54 = arith.divf %53, %cst_2 : tensor<1x1xf32, #blocked1> loc(#loc38)
    tt.store %9, %35, %10 : tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc40)
    tt.store %17, %37, %10 : tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc41)
    %55 = tt.splat %arg9 : !tt.ptr<f32> -> tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc42)
    %56 = tt.addptr %55, %7 : tensor<1x64x!tt.ptr<f32>, #blocked>, tensor<1x64xi32, #blocked> loc(#loc42)
    tt.store %56, %49, %10 : tensor<1x64x!tt.ptr<f32>, #blocked> loc(#loc43)
    gpu.barrier loc(#loc44)
    %57 = tt.addptr %arg2, %0 : !tt.ptr<f32>, i32 loc(#loc45)
    %58 = tt.splat %57 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc46)
    %59 = tt.splat %1 : i1 -> tensor<1x1xi1, #blocked1> loc(#loc46)
    tt.store %58, %54, %59 : tensor<1x1x!tt.ptr<f32>, #blocked1> loc(#loc46)
    tt.return loc(#loc47)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/bp/cbpsjynu72otjyzp56x5upb3lz57hhznbaekx6x6idmmbbr3mgcv.py":23:28)
#loc3 = loc("inductor_cache/bp/cbpsjynu72otjyzp56x5upb3lz57hhznbaekx6x6idmmbbr3mgcv.py":25:21)
#loc4 = loc("inductor_cache/bp/cbpsjynu72otjyzp56x5upb3lz57hhznbaekx6x6idmmbbr3mgcv.py":26:34)
#loc5 = loc("inductor_cache/bp/cbpsjynu72otjyzp56x5upb3lz57hhznbaekx6x6idmmbbr3mgcv.py":31:19)
#loc6 = loc("inductor_cache/bp/cbpsjynu72otjyzp56x5upb3lz57hhznbaekx6x6idmmbbr3mgcv.py":32:42)
#loc7 = loc("inductor_cache/bp/cbpsjynu72otjyzp56x5upb3lz57hhznbaekx6x6idmmbbr3mgcv.py":32:39)
#loc8 = loc("inductor_cache/bp/cbpsjynu72otjyzp56x5upb3lz57hhznbaekx6x6idmmbbr3mgcv.py":32:34)
#loc9 = loc("inductor_cache/bp/cbpsjynu72otjyzp56x5upb3lz57hhznbaekx6x6idmmbbr3mgcv.py":32:47)
#loc10 = loc("inductor_cache/bp/cbpsjynu72otjyzp56x5upb3lz57hhznbaekx6x6idmmbbr3mgcv.py":33:30)
#loc11 = loc("inductor_cache/bp/cbpsjynu72otjyzp56x5upb3lz57hhznbaekx6x6idmmbbr3mgcv.py":33:35)
#loc12 = loc("inductor_cache/bp/cbpsjynu72otjyzp56x5upb3lz57hhznbaekx6x6idmmbbr3mgcv.py":34:34)
#loc13 = loc("inductor_cache/bp/cbpsjynu72otjyzp56x5upb3lz57hhznbaekx6x6idmmbbr3mgcv.py":34:47)
#loc14 = loc("inductor_cache/bp/cbpsjynu72otjyzp56x5upb3lz57hhznbaekx6x6idmmbbr3mgcv.py":35:30)
#loc15 = loc("inductor_cache/bp/cbpsjynu72otjyzp56x5upb3lz57hhznbaekx6x6idmmbbr3mgcv.py":35:35)
#loc16 = loc("inductor_cache/bp/cbpsjynu72otjyzp56x5upb3lz57hhznbaekx6x6idmmbbr3mgcv.py":36:30)
#loc17 = loc("inductor_cache/bp/cbpsjynu72otjyzp56x5upb3lz57hhznbaekx6x6idmmbbr3mgcv.py":36:35)
#loc18 = loc("inductor_cache/bp/cbpsjynu72otjyzp56x5upb3lz57hhznbaekx6x6idmmbbr3mgcv.py":37:30)
#loc19 = loc("inductor_cache/bp/cbpsjynu72otjyzp56x5upb3lz57hhznbaekx6x6idmmbbr3mgcv.py":37:35)
#loc20 = loc("inductor_cache/bp/cbpsjynu72otjyzp56x5upb3lz57hhznbaekx6x6idmmbbr3mgcv.py":38:31)
#loc21 = loc("inductor_cache/bp/cbpsjynu72otjyzp56x5upb3lz57hhznbaekx6x6idmmbbr3mgcv.py":38:36)
#loc22 = loc("inductor_cache/bp/cbpsjynu72otjyzp56x5upb3lz57hhznbaekx6x6idmmbbr3mgcv.py":39:31)
#loc23 = loc("inductor_cache/bp/cbpsjynu72otjyzp56x5upb3lz57hhznbaekx6x6idmmbbr3mgcv.py":39:36)
#loc24 = loc("inductor_cache/bp/cbpsjynu72otjyzp56x5upb3lz57hhznbaekx6x6idmmbbr3mgcv.py":40:18)
#loc25 = loc("inductor_cache/bp/cbpsjynu72otjyzp56x5upb3lz57hhznbaekx6x6idmmbbr3mgcv.py":41:18)
#loc26 = loc("inductor_cache/bp/cbpsjynu72otjyzp56x5upb3lz57hhznbaekx6x6idmmbbr3mgcv.py":42:18)
#loc27 = loc("inductor_cache/bp/cbpsjynu72otjyzp56x5upb3lz57hhznbaekx6x6idmmbbr3mgcv.py":44:19)
#loc28 = loc("inductor_cache/bp/cbpsjynu72otjyzp56x5upb3lz57hhznbaekx6x6idmmbbr3mgcv.py":45:27)
#loc29 = loc("inductor_cache/bp/cbpsjynu72otjyzp56x5upb3lz57hhznbaekx6x6idmmbbr3mgcv.py":47:20)
#loc30 = loc("inductor_cache/bp/cbpsjynu72otjyzp56x5upb3lz57hhznbaekx6x6idmmbbr3mgcv.py":50:19)
#loc31 = loc("inductor_cache/bp/cbpsjynu72otjyzp56x5upb3lz57hhznbaekx6x6idmmbbr3mgcv.py":51:20)
#loc32 = loc("inductor_cache/bp/cbpsjynu72otjyzp56x5upb3lz57hhznbaekx6x6idmmbbr3mgcv.py":52:20)
#loc33 = loc("inductor_cache/bp/cbpsjynu72otjyzp56x5upb3lz57hhznbaekx6x6idmmbbr3mgcv.py":53:19)
#loc34 = loc("inductor_cache/bp/cbpsjynu72otjyzp56x5upb3lz57hhznbaekx6x6idmmbbr3mgcv.py":55:35)
#loc35 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc37 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc38 = loc("inductor_cache/bp/cbpsjynu72otjyzp56x5upb3lz57hhznbaekx6x6idmmbbr3mgcv.py":58:20)
#loc39 = loc("inductor_cache/bp/cbpsjynu72otjyzp56x5upb3lz57hhznbaekx6x6idmmbbr3mgcv.py":56:29)
#loc40 = loc("inductor_cache/bp/cbpsjynu72otjyzp56x5upb3lz57hhznbaekx6x6idmmbbr3mgcv.py":59:47)
#loc41 = loc("inductor_cache/bp/cbpsjynu72otjyzp56x5upb3lz57hhznbaekx6x6idmmbbr3mgcv.py":60:47)
#loc42 = loc("inductor_cache/bp/cbpsjynu72otjyzp56x5upb3lz57hhznbaekx6x6idmmbbr3mgcv.py":61:25)
#loc43 = loc("inductor_cache/bp/cbpsjynu72otjyzp56x5upb3lz57hhznbaekx6x6idmmbbr3mgcv.py":61:45)
#loc44 = loc("inductor_cache/bp/cbpsjynu72otjyzp56x5upb3lz57hhznbaekx6x6idmmbbr3mgcv.py":62:4)
#loc45 = loc("inductor_cache/bp/cbpsjynu72otjyzp56x5upb3lz57hhznbaekx6x6idmmbbr3mgcv.py":63:28)
#loc46 = loc("inductor_cache/bp/cbpsjynu72otjyzp56x5upb3lz57hhznbaekx6x6idmmbbr3mgcv.py":63:40)
#loc47 = loc("inductor_cache/bp/cbpsjynu72otjyzp56x5upb3lz57hhznbaekx6x6idmmbbr3mgcv.py":63:4)
#loc48 = loc(callsite(#loc35 at #loc36))
#loc50 = loc(callsite(#loc37 at #loc35))
#loc51 = loc(callsite(#loc50 at #loc36))
