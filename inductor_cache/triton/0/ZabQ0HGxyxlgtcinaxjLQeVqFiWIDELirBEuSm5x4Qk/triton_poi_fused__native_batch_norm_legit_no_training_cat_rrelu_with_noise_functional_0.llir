; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_cat_rrelu_with_noise_functional_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %11 = shl i32 %10, 8, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = shl i32 %12, 1, !dbg !12
  %14 = and i32 %13, 254, !dbg !12
  %15 = or disjoint i32 %11, %14, !dbg !13
  %16 = or disjoint i32 %15, 1, !dbg !13
  %17 = sdiv i32 %15, 1024, !dbg !14
  %18 = srem i32 %17, 7, !dbg !15
  %.frozen6 = freeze i32 %15, !dbg !16
  %19 = sdiv i32 %.frozen6, 7168, !dbg !16
  %.frozen = freeze i32 %15, !dbg !17
  %20 = sdiv i32 %.frozen, 32, !dbg !17
  %21 = mul i32 %20, 32, !dbg !18
  %.decomposed = sub i32 %.frozen, %21, !dbg !18
  %22 = srem i32 %16, 32, !dbg !18
  %23 = srem i32 %20, 32, !dbg !19
  %24 = sext i32 %18 to i64, !dbg !20
  %25 = getelementptr float, ptr addrspace(1) %3, i64 %24, !dbg !20
  %26 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 true) #3, !dbg !21
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 true) #3, !dbg !21
  %28 = getelementptr float, ptr addrspace(1) %4, i64 %24, !dbg !22
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 true) #3, !dbg !23
  %30 = bitcast i32 %29 to float, !dbg !23
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %28, i1 true) #3, !dbg !23
  %32 = bitcast i32 %31 to float, !dbg !23
  %33 = getelementptr float, ptr addrspace(1) %5, i64 %24, !dbg !24
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 true) #3, !dbg !25
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 true) #3, !dbg !25
  %36 = getelementptr float, ptr addrspace(1) %6, i64 %24, !dbg !26
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #3, !dbg !27
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #3, !dbg !27
  %39 = icmp slt i32 %18, 4, !dbg !28
  %40 = mul i32 %19, 7168, !dbg !29
  %srem.decomposed = sub i32 %.frozen6, %40, !dbg !29
  %41 = shl nsw i32 %19, 12, !dbg !30
  %42 = add nsw i32 %41, %srem.decomposed, !dbg !31
  %43 = sext i32 %42 to i64, !dbg !32
  %44 = getelementptr float, ptr addrspace(1) %1, i64 %43, !dbg !32
  %45 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %44, i1 %39, i32 0, i1 %39, i32 0, i1 %39) #3, !dbg !33
  %46 = icmp sgt i32 %18, 3, !dbg !34
  %47 = shl nsw i32 %.decomposed, 1, !dbg !35
  %48 = shl nsw i32 %22, 1, !dbg !35
  %49 = shl nsw i32 %23, 7, !dbg !36
  %50 = shl nsw i32 %18, 12, !dbg !37
  %51 = add nsw i32 %50, -16384, !dbg !37
  %52 = mul i32 %19, 12288, !dbg !38
  %53 = add i32 %49, %52, !dbg !39
  %54 = add i32 %53, %47, !dbg !40
  %55 = add i32 %54, %51, !dbg !41
  %56 = add i32 %53, %48, !dbg !40
  %57 = add i32 %56, %51, !dbg !41
  %58 = sext i32 %55 to i64, !dbg !42
  %59 = getelementptr float, ptr addrspace(1) %2, i64 %58, !dbg !42
  %60 = sext i32 %57 to i64, !dbg !42
  %61 = getelementptr float, ptr addrspace(1) %2, i64 %60, !dbg !42
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %59, i1 %46, i32 0, i1 %46) #3, !dbg !43
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %61, i1 %46, i32 0, i1 %46) #3, !dbg !43
  %64 = or disjoint i32 %53, 1, !dbg !44
  %65 = add i32 %64, %47, !dbg !45
  %66 = add i32 %65, %51, !dbg !46
  %67 = add i32 %64, %48, !dbg !45
  %68 = add i32 %67, %51, !dbg !46
  %69 = sext i32 %66 to i64, !dbg !47
  %70 = getelementptr float, ptr addrspace(1) %2, i64 %69, !dbg !47
  %71 = sext i32 %68 to i64, !dbg !47
  %72 = getelementptr float, ptr addrspace(1) %2, i64 %71, !dbg !47
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %70, i1 %46, i32 0, i1 %46) #3, !dbg !48
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %72, i1 %46, i32 0, i1 %46) #3, !dbg !48
  %75 = or disjoint i32 %53, 64, !dbg !49
  %76 = add i32 %75, %47, !dbg !50
  %77 = add i32 %76, %51, !dbg !51
  %78 = add i32 %75, %48, !dbg !50
  %79 = add i32 %78, %51, !dbg !51
  %80 = sext i32 %77 to i64, !dbg !52
  %81 = getelementptr float, ptr addrspace(1) %2, i64 %80, !dbg !52
  %82 = sext i32 %79 to i64, !dbg !52
  %83 = getelementptr float, ptr addrspace(1) %2, i64 %82, !dbg !52
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %81, i1 %46, i32 0, i1 %46) #3, !dbg !53
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %83, i1 %46, i32 0, i1 %46) #3, !dbg !53
  %86 = or disjoint i32 %53, 65, !dbg !54
  %87 = add i32 %86, %47, !dbg !55
  %88 = add i32 %87, %51, !dbg !56
  %89 = add i32 %86, %48, !dbg !55
  %90 = add i32 %89, %51, !dbg !56
  %91 = sext i32 %88 to i64, !dbg !57
  %92 = getelementptr float, ptr addrspace(1) %2, i64 %91, !dbg !57
  %93 = sext i32 %90 to i64, !dbg !57
  %94 = getelementptr float, ptr addrspace(1) %2, i64 %93, !dbg !57
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %92, i1 %46, i32 0, i1 %46) #3, !dbg !58
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %94, i1 %46, i32 0, i1 %46) #3, !dbg !58
  %97 = fadd float %30, 0x3EE4F8B580000000, !dbg !59
  %98 = fadd float %32, 0x3EE4F8B580000000, !dbg !59
  %99 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !60
  %.not.i = icmp eq i32 %99, 0, !dbg !60
  %100 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !60
  %.not1.i = icmp eq i32 %100, 0, !dbg !60
  br i1 %.not.i, label %106, label %101, !dbg !60

101:                                              ; preds = %9
  br i1 %.not1.i, label %104, label %102, !dbg !60

102:                                              ; preds = %101
  %103 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %97) #3, !dbg !60
  br label %__nv_sqrtf.exit, !dbg !60

104:                                              ; preds = %101
  %105 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %97) #3, !dbg !60
  br label %__nv_sqrtf.exit, !dbg !60

106:                                              ; preds = %9
  br i1 %.not1.i, label %109, label %107, !dbg !60

107:                                              ; preds = %106
  %108 = tail call float @llvm.nvvm.sqrt.rn.f(float %97) #3, !dbg !60
  br label %__nv_sqrtf.exit, !dbg !60

109:                                              ; preds = %106
  %110 = tail call float @llvm.nvvm.sqrt.approx.f(float %97) #3, !dbg !60
  br label %__nv_sqrtf.exit, !dbg !60

__nv_sqrtf.exit:                                  ; preds = %102, %104, %107, %109
  %.0.i = phi float [ %103, %102 ], [ %105, %104 ], [ %108, %107 ], [ %110, %109 ], !dbg !60
  %111 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !60
  %.not.i1 = icmp eq i32 %111, 0, !dbg !60
  %112 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !60
  %.not1.i4 = icmp eq i32 %112, 0, !dbg !60
  br i1 %.not.i1, label %118, label %113, !dbg !60

113:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %116, label %114, !dbg !60

114:                                              ; preds = %113
  %115 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %98) #3, !dbg !60
  br label %__nv_sqrtf.exit5, !dbg !60

116:                                              ; preds = %113
  %117 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %98) #3, !dbg !60
  br label %__nv_sqrtf.exit5, !dbg !60

118:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %121, label %119, !dbg !60

119:                                              ; preds = %118
  %120 = tail call float @llvm.nvvm.sqrt.rn.f(float %98) #3, !dbg !60
  br label %__nv_sqrtf.exit5, !dbg !60

121:                                              ; preds = %118
  %122 = tail call float @llvm.nvvm.sqrt.approx.f(float %98) #3, !dbg !60
  br label %__nv_sqrtf.exit5, !dbg !60

__nv_sqrtf.exit5:                                 ; preds = %114, %116, %119, %121
  %.0.i3 = phi float [ %115, %114 ], [ %117, %116 ], [ %120, %119 ], [ %122, %121 ], !dbg !60
  %123 = extractvalue { i32, i32 } %45, 1, !dbg !33
  %124 = bitcast i32 %123 to float, !dbg !33
  %125 = bitcast i32 %74 to float, !dbg !48
  %126 = bitcast i32 %63 to float, !dbg !43
  %127 = fcmp ogt float %125, %126, !dbg !61
  %128 = fcmp uno float %125, 0.000000e+00, !dbg !65
  %129 = or i1 %127, %128, !dbg !66
  %130 = select i1 %129, float %125, float %126, !dbg !67
  %131 = bitcast i32 %85 to float, !dbg !53
  %132 = fcmp olt float %130, %131, !dbg !68
  %133 = fcmp uno float %131, 0.000000e+00, !dbg !70
  %134 = or i1 %133, %132, !dbg !71
  %135 = select i1 %134, float %131, float %130, !dbg !72
  %136 = bitcast i32 %96 to float, !dbg !58
  %137 = fcmp olt float %135, %136, !dbg !73
  %138 = fcmp uno float %136, 0.000000e+00, !dbg !75
  %139 = or i1 %138, %137, !dbg !76
  %140 = select i1 %139, float %136, float %135, !dbg !77
  %141 = select i1 %39, float %124, float %140, !dbg !78
  %142 = bitcast i32 %27 to float, !dbg !21
  %143 = fsub float %141, %142, !dbg !79
  %144 = extractvalue { i32, i32 } %45, 0, !dbg !33
  %145 = bitcast i32 %144 to float, !dbg !33
  %146 = bitcast i32 %73 to float, !dbg !48
  %147 = bitcast i32 %62 to float, !dbg !43
  %148 = fcmp ogt float %146, %147, !dbg !61
  %149 = fcmp uno float %146, 0.000000e+00, !dbg !65
  %150 = or i1 %148, %149, !dbg !66
  %151 = select i1 %150, float %146, float %147, !dbg !67
  %152 = bitcast i32 %84 to float, !dbg !53
  %153 = fcmp olt float %151, %152, !dbg !68
  %154 = fcmp uno float %152, 0.000000e+00, !dbg !70
  %155 = or i1 %154, %153, !dbg !71
  %156 = select i1 %155, float %152, float %151, !dbg !72
  %157 = bitcast i32 %95 to float, !dbg !58
  %158 = fcmp olt float %156, %157, !dbg !73
  %159 = fcmp uno float %157, 0.000000e+00, !dbg !75
  %160 = or i1 %159, %158, !dbg !76
  %161 = select i1 %160, float %157, float %156, !dbg !77
  %162 = select i1 %39, float %145, float %161, !dbg !78
  %163 = bitcast i32 %26 to float, !dbg !21
  %164 = fsub float %162, %163, !dbg !79
  %165 = bitcast i32 %38 to float, !dbg !27
  %166 = bitcast i32 %37 to float, !dbg !27
  %167 = bitcast i32 %35 to float, !dbg !25
  %168 = bitcast i32 %34 to float, !dbg !25
  %169 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !80
  %170 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !80
  %171 = fmul float %164, %169, !dbg !81
  %172 = fmul float %143, %170, !dbg !81
  %173 = fmul float %171, %168, !dbg !82
  %174 = fmul float %172, %167, !dbg !82
  %175 = fadd float %173, %166, !dbg !83
  %176 = fadd float %174, %165, !dbg !83
  %177 = fcmp ogt float %175, 0.000000e+00, !dbg !84
  %178 = fcmp ogt float %176, 0.000000e+00, !dbg !84
  %179 = fmul float %175, 0x3FCD555560000000, !dbg !85
  %180 = fmul float %176, 0x3FCD555560000000, !dbg !85
  %181 = select i1 %177, float %175, float %179, !dbg !86
  %182 = select i1 %178, float %176, float %180, !dbg !86
  %183 = sext i32 %15 to i64, !dbg !87
  %184 = getelementptr float, ptr addrspace(1) %7, i64 %183, !dbg !87
  %185 = bitcast float %162 to i32, !dbg !88
  %186 = bitcast float %141 to i32, !dbg !88
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %185, i32 %186, ptr addrspace(1) %184, i1 true) #3, !dbg !88
  %187 = getelementptr float, ptr addrspace(1) %0, i64 %183, !dbg !89
  %188 = bitcast float %181 to i32, !dbg !90
  %189 = bitcast float %182 to i32, !dbg !90
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %188, i32 %189, ptr addrspace(1) %187, i1 true) #3, !dbg !90
  ret void, !dbg !91
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c4vxo5k4u5veypv7v2nekcgg2j4xtvh4cbgzaeknwiuq64fep6zc.py", directory: "inductor_cache/4v")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_rrelu_with_noise_functional_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_rrelu_with_noise_functional_0, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_cat_rrelu_with_noise_functional_0", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_cat_rrelu_with_noise_functional_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 29, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 28, column: 21, scope: !7)
!18 = !DILocation(line: 27, column: 19, scope: !7)
!19 = !DILocation(line: 28, column: 27, scope: !7)
!20 = !DILocation(line: 30, column: 31, scope: !7)
!21 = !DILocation(line: 30, column: 36, scope: !7)
!22 = !DILocation(line: 31, column: 31, scope: !7)
!23 = !DILocation(line: 31, column: 36, scope: !7)
!24 = !DILocation(line: 32, column: 31, scope: !7)
!25 = !DILocation(line: 32, column: 36, scope: !7)
!26 = !DILocation(line: 33, column: 31, scope: !7)
!27 = !DILocation(line: 33, column: 36, scope: !7)
!28 = !DILocation(line: 38, column: 18, scope: !7)
!29 = !DILocation(line: 39, column: 35, scope: !7)
!30 = !DILocation(line: 39, column: 52, scope: !7)
!31 = !DILocation(line: 39, column: 47, scope: !7)
!32 = !DILocation(line: 39, column: 30, scope: !7)
!33 = !DILocation(line: 39, column: 57, scope: !7)
!34 = !DILocation(line: 40, column: 19, scope: !7)
!35 = !DILocation(line: 43, column: 32, scope: !7)
!36 = !DILocation(line: 43, column: 41, scope: !7)
!37 = !DILocation(line: 43, column: 52, scope: !7)
!38 = !DILocation(line: 43, column: 71, scope: !7)
!39 = !DILocation(line: 43, column: 37, scope: !7)
!40 = !DILocation(line: 43, column: 46, scope: !7)
!41 = !DILocation(line: 43, column: 65, scope: !7)
!42 = !DILocation(line: 43, column: 30, scope: !7)
!43 = !DILocation(line: 43, column: 76, scope: !7)
!44 = !DILocation(line: 44, column: 42, scope: !7)
!45 = !DILocation(line: 44, column: 51, scope: !7)
!46 = !DILocation(line: 44, column: 70, scope: !7)
!47 = !DILocation(line: 44, column: 31, scope: !7)
!48 = !DILocation(line: 44, column: 81, scope: !7)
!49 = !DILocation(line: 46, column: 43, scope: !7)
!50 = !DILocation(line: 46, column: 52, scope: !7)
!51 = !DILocation(line: 46, column: 71, scope: !7)
!52 = !DILocation(line: 46, column: 31, scope: !7)
!53 = !DILocation(line: 46, column: 82, scope: !7)
!54 = !DILocation(line: 48, column: 43, scope: !7)
!55 = !DILocation(line: 48, column: 52, scope: !7)
!56 = !DILocation(line: 48, column: 71, scope: !7)
!57 = !DILocation(line: 48, column: 31, scope: !7)
!58 = !DILocation(line: 48, column: 82, scope: !7)
!59 = !DILocation(line: 55, column: 20, scope: !7)
!60 = !DILocation(line: 56, column: 27, scope: !7)
!61 = !DILocation(line: 118, column: 15, scope: !62, inlinedAt: !64)
!62 = distinct !DILexicalBlockFile(scope: !7, file: !63, discriminator: 0)
!63 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!64 = !DILocation(line: 45, column: 42, scope: !7)
!65 = !DILocation(line: 120, column: 21, scope: !62, inlinedAt: !64)
!66 = !DILocation(line: 120, column: 16, scope: !62, inlinedAt: !64)
!67 = !DILocation(line: 121, column: 29, scope: !62, inlinedAt: !64)
!68 = !DILocation(line: 118, column: 15, scope: !62, inlinedAt: !69)
!69 = !DILocation(line: 47, column: 42, scope: !7)
!70 = !DILocation(line: 120, column: 21, scope: !62, inlinedAt: !69)
!71 = !DILocation(line: 120, column: 16, scope: !62, inlinedAt: !69)
!72 = !DILocation(line: 121, column: 29, scope: !62, inlinedAt: !69)
!73 = !DILocation(line: 118, column: 15, scope: !62, inlinedAt: !74)
!74 = !DILocation(line: 49, column: 42, scope: !7)
!75 = !DILocation(line: 120, column: 21, scope: !62, inlinedAt: !74)
!76 = !DILocation(line: 120, column: 16, scope: !62, inlinedAt: !74)
!77 = !DILocation(line: 121, column: 29, scope: !62, inlinedAt: !74)
!78 = !DILocation(line: 52, column: 33, scope: !7)
!79 = !DILocation(line: 53, column: 20, scope: !7)
!80 = !DILocation(line: 58, column: 20, scope: !7)
!81 = !DILocation(line: 61, column: 20, scope: !7)
!82 = !DILocation(line: 62, column: 20, scope: !7)
!83 = !DILocation(line: 63, column: 20, scope: !7)
!84 = !DILocation(line: 65, column: 20, scope: !7)
!85 = !DILocation(line: 67, column: 20, scope: !7)
!86 = !DILocation(line: 68, column: 35, scope: !7)
!87 = !DILocation(line: 69, column: 25, scope: !7)
!88 = !DILocation(line: 69, column: 37, scope: !7)
!89 = !DILocation(line: 70, column: 28, scope: !7)
!90 = !DILocation(line: 70, column: 40, scope: !7)
!91 = !DILocation(line: 70, column: 4, scope: !7)
