; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_relu_11(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %10 = shl i32 %9, 8, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 252, !dbg !12
  %14 = and i32 %11, 255, !dbg !12
  %15 = or disjoint i32 %10, %13, !dbg !13
  %16 = or disjoint i32 %10, %14, !dbg !13
  %17 = icmp slt i32 %15, 256, !dbg !14
  %18 = icmp slt i32 %16, 256, !dbg !14
  %19 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %20 = shl i32 %19, 4, !dbg !16
  %.lobit4 = lshr i32 %11, 6, !dbg !17
  %21 = and i32 %.lobit4, 3, !dbg !17
  %22 = or disjoint i32 %21, 4, !dbg !17
  %23 = or disjoint i32 %21, 8, !dbg !17
  %24 = or disjoint i32 %21, 12, !dbg !17
  %25 = or disjoint i32 %20, %21, !dbg !18
  %26 = or disjoint i32 %20, %22, !dbg !18
  %27 = or disjoint i32 %20, %23, !dbg !18
  %28 = or disjoint i32 %20, %24, !dbg !18
  %.frozen = freeze i32 %15, !dbg !19
  %29 = sdiv i32 %.frozen, 64, !dbg !19
  %30 = mul i32 %29, 64, !dbg !20
  %.decomposed = sub i32 %.frozen, %30, !dbg !20
  %31 = srem i32 %16, 64, !dbg !20
  %32 = shl i32 %25, 6, !dbg !21
  %33 = shl i32 %26, 6, !dbg !21
  %34 = shl i32 %27, 6, !dbg !21
  %35 = shl i32 %28, 6, !dbg !21
  %36 = shl i32 %29, 18, !dbg !22
  %37 = add i32 %36, %.decomposed, !dbg !23
  %38 = add i32 %37, %32, !dbg !24
  %39 = add i32 %37, %33, !dbg !24
  %40 = add i32 %37, %34, !dbg !24
  %41 = add i32 %37, %35, !dbg !24
  %42 = sext i32 %38 to i64, !dbg !25
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !25
  %44 = sext i32 %39 to i64, !dbg !25
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !25
  %46 = sext i32 %40 to i64, !dbg !25
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !25
  %48 = sext i32 %41 to i64, !dbg !25
  %49 = getelementptr float, ptr addrspace(1) %0, i64 %48, !dbg !25
  %50 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %43, i1 %17) #4, !dbg !26
  %51 = extractvalue { i32, i32, i32, i32 } %50, 0, !dbg !26
  %52 = extractvalue { i32, i32, i32, i32 } %50, 1, !dbg !26
  %53 = extractvalue { i32, i32, i32, i32 } %50, 2, !dbg !26
  %54 = extractvalue { i32, i32, i32, i32 } %50, 3, !dbg !26
  %55 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %45, i1 %17) #4, !dbg !26
  %56 = extractvalue { i32, i32, i32, i32 } %55, 0, !dbg !26
  %57 = extractvalue { i32, i32, i32, i32 } %55, 1, !dbg !26
  %58 = extractvalue { i32, i32, i32, i32 } %55, 2, !dbg !26
  %59 = extractvalue { i32, i32, i32, i32 } %55, 3, !dbg !26
  %60 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %47, i1 %17) #4, !dbg !26
  %61 = extractvalue { i32, i32, i32, i32 } %60, 0, !dbg !26
  %62 = extractvalue { i32, i32, i32, i32 } %60, 1, !dbg !26
  %63 = extractvalue { i32, i32, i32, i32 } %60, 2, !dbg !26
  %64 = extractvalue { i32, i32, i32, i32 } %60, 3, !dbg !26
  %65 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %49, i1 %17) #4, !dbg !26
  %66 = extractvalue { i32, i32, i32, i32 } %65, 0, !dbg !26
  %67 = extractvalue { i32, i32, i32, i32 } %65, 1, !dbg !26
  %68 = extractvalue { i32, i32, i32, i32 } %65, 2, !dbg !26
  %69 = extractvalue { i32, i32, i32, i32 } %65, 3, !dbg !26
  %70 = and i32 %12, 1020, !dbg !26
  %71 = lshr i32 %12, 6, !dbg !26
  %72 = and i32 %71, 12, !dbg !26
  %73 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %72, !dbg !26
  %74 = getelementptr inbounds float, ptr addrspace(3) %73, i32 %70, !dbg !26
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %74, i32 %51, i32 %52, i32 %53, i32 %54, i1 true) #4, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %75 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !26
  %76 = load float, ptr addrspace(3) %75, align 4, !dbg !26
  %77 = getelementptr inbounds i8, ptr addrspace(3) %75, i32 1040, !dbg !26
  %78 = load float, ptr addrspace(3) %77, align 4, !dbg !26
  %79 = getelementptr inbounds i8, ptr addrspace(3) %75, i32 2080, !dbg !26
  %80 = load float, ptr addrspace(3) %79, align 4, !dbg !26
  %81 = getelementptr inbounds i8, ptr addrspace(3) %75, i32 3120, !dbg !26
  %82 = load float, ptr addrspace(3) %81, align 4, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %74, i32 %56, i32 %57, i32 %58, i32 %59, i1 true) #4, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %83 = load float, ptr addrspace(3) %75, align 4, !dbg !26
  %84 = load float, ptr addrspace(3) %77, align 4, !dbg !26
  %85 = load float, ptr addrspace(3) %79, align 4, !dbg !26
  %86 = load float, ptr addrspace(3) %81, align 4, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %74, i32 %61, i32 %62, i32 %63, i32 %64, i1 true) #4, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %87 = load float, ptr addrspace(3) %75, align 4, !dbg !26
  %88 = load float, ptr addrspace(3) %77, align 4, !dbg !26
  %89 = load float, ptr addrspace(3) %79, align 4, !dbg !26
  %90 = load float, ptr addrspace(3) %81, align 4, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %74, i32 %66, i32 %67, i32 %68, i32 %69, i1 true) #4, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %91 = load float, ptr addrspace(3) %75, align 4, !dbg !26
  %92 = load float, ptr addrspace(3) %77, align 4, !dbg !26
  %93 = load float, ptr addrspace(3) %79, align 4, !dbg !26
  %94 = load float, ptr addrspace(3) %81, align 4, !dbg !26
  %95 = sext i32 %31 to i64, !dbg !27
  %96 = getelementptr float, ptr addrspace(1) %1, i64 %95, !dbg !27
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 %18) #4, !dbg !28
  %98 = getelementptr float, ptr addrspace(1) %2, i64 %95, !dbg !29
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %98, i1 %18) #4, !dbg !30
  %100 = bitcast i32 %99 to float, !dbg !30
  %101 = getelementptr float, ptr addrspace(1) %3, i64 %95, !dbg !31
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %101, i1 %18) #4, !dbg !32
  %103 = getelementptr float, ptr addrspace(1) %4, i64 %95, !dbg !33
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %103, i1 %18) #4, !dbg !34
  %105 = fadd float %100, 0x3EE4F8B580000000, !dbg !35
  %106 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i = icmp eq i32 %106, 0, !dbg !36
  %107 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i = icmp eq i32 %107, 0, !dbg !36
  br i1 %.not.i, label %113, label %108, !dbg !36

108:                                              ; preds = %8
  br i1 %.not1.i, label %111, label %109, !dbg !36

109:                                              ; preds = %108
  %110 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %105) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

111:                                              ; preds = %108
  %112 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %105) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

113:                                              ; preds = %8
  br i1 %.not1.i, label %116, label %114, !dbg !36

114:                                              ; preds = %113
  %115 = tail call float @llvm.nvvm.sqrt.rn.f(float %105) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

116:                                              ; preds = %113
  %117 = tail call float @llvm.nvvm.sqrt.approx.f(float %105) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

__nv_sqrtf.exit:                                  ; preds = %109, %111, %114, %116
  %.0.i = phi float [ %110, %109 ], [ %112, %111 ], [ %115, %114 ], [ %117, %116 ], !dbg !36
  %118 = lshr i32 %11, 2, !dbg !12
  %119 = and i32 %118, 63, !dbg !12
  %120 = or disjoint i32 %119, %10, !dbg !13
  %121 = or disjoint i32 %120, 192, !dbg !13
  %122 = sdiv i32 %121, 64, !dbg !19
  %123 = or disjoint i32 %120, 128, !dbg !13
  %124 = sdiv i32 %123, 64, !dbg !19
  %125 = or disjoint i32 %120, 64, !dbg !13
  %126 = sdiv i32 %125, 64, !dbg !19
  %.frozen5 = freeze i32 %120, !dbg !19
  %127 = sdiv i32 %.frozen5, 64, !dbg !19
  %128 = mul i32 %127, 64, !dbg !20
  %.decomposed6 = sub i32 %.frozen5, %128, !dbg !20
  %129 = and i32 %12, 12, !dbg !12
  %130 = or disjoint i32 %20, %129, !dbg !18
  %131 = icmp slt i32 %121, 256, !dbg !14
  %132 = icmp slt i32 %123, 256, !dbg !14
  %133 = icmp slt i32 %125, 256, !dbg !14
  %134 = icmp slt i32 %120, 256, !dbg !14
  %135 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !37
  %136 = insertelement <16 x float> poison, float %94, i64 0, !dbg !38
  %137 = insertelement <16 x float> %136, float %93, i64 1, !dbg !38
  %138 = insertelement <16 x float> %137, float %92, i64 2, !dbg !38
  %139 = insertelement <16 x float> %138, float %91, i64 3, !dbg !38
  %140 = insertelement <16 x float> %139, float %90, i64 4, !dbg !38
  %141 = insertelement <16 x float> %140, float %89, i64 5, !dbg !38
  %142 = insertelement <16 x float> %141, float %88, i64 6, !dbg !38
  %143 = insertelement <16 x float> %142, float %87, i64 7, !dbg !38
  %144 = insertelement <16 x float> %143, float %86, i64 8, !dbg !38
  %145 = insertelement <16 x float> %144, float %85, i64 9, !dbg !38
  %146 = insertelement <16 x float> %145, float %84, i64 10, !dbg !38
  %147 = insertelement <16 x float> %146, float %83, i64 11, !dbg !38
  %148 = insertelement <16 x float> %147, float %82, i64 12, !dbg !38
  %149 = insertelement <16 x float> %148, float %80, i64 13, !dbg !38
  %150 = insertelement <16 x float> %149, float %78, i64 14, !dbg !38
  %151 = insertelement <16 x float> %150, float %76, i64 15, !dbg !38
  %152 = insertelement <16 x i32> poison, i32 %97, i64 0, !dbg !38
  %153 = bitcast <16 x i32> %152 to <16 x float>, !dbg !38
  %154 = shufflevector <16 x float> %153, <16 x float> poison, <16 x i32> zeroinitializer, !dbg !38
  %155 = fsub <16 x float> %151, %154, !dbg !38
  %156 = insertelement <16 x float> poison, float %135, i64 0, !dbg !39
  %157 = shufflevector <16 x float> %156, <16 x float> poison, <16 x i32> zeroinitializer, !dbg !39
  %158 = fmul <16 x float> %155, %157, !dbg !39
  %159 = insertelement <16 x i32> poison, i32 %102, i64 0, !dbg !40
  %160 = bitcast <16 x i32> %159 to <16 x float>, !dbg !40
  %161 = shufflevector <16 x float> %160, <16 x float> poison, <16 x i32> zeroinitializer, !dbg !40
  %162 = fmul <16 x float> %158, %161, !dbg !40
  %163 = insertelement <16 x i32> poison, i32 %104, i64 0, !dbg !41
  %164 = bitcast <16 x i32> %163 to <16 x float>, !dbg !41
  %165 = shufflevector <16 x float> %164, <16 x float> poison, <16 x i32> zeroinitializer, !dbg !41
  %166 = fadd <16 x float> %162, %165, !dbg !41
  %167 = fcmp olt <16 x float> %166, zeroinitializer, !dbg !42
  %168 = extractelement <16 x i1> %167, i64 15, !dbg !46
  %169 = extractelement <16 x float> %166, i64 15, !dbg !46
  %170 = select i1 %168, float 0.000000e+00, float %169, !dbg !46
  %171 = extractelement <16 x i1> %167, i64 14, !dbg !46
  %172 = extractelement <16 x float> %166, i64 14, !dbg !46
  %173 = select i1 %171, float 0.000000e+00, float %172, !dbg !46
  %174 = extractelement <16 x i1> %167, i64 13, !dbg !46
  %175 = extractelement <16 x float> %166, i64 13, !dbg !46
  %176 = select i1 %174, float 0.000000e+00, float %175, !dbg !46
  %177 = extractelement <16 x i1> %167, i64 12, !dbg !46
  %178 = extractelement <16 x float> %166, i64 12, !dbg !46
  %179 = select i1 %177, float 0.000000e+00, float %178, !dbg !46
  %180 = extractelement <16 x i1> %167, i64 11, !dbg !46
  %181 = extractelement <16 x float> %166, i64 11, !dbg !46
  %182 = select i1 %180, float 0.000000e+00, float %181, !dbg !46
  %183 = extractelement <16 x i1> %167, i64 10, !dbg !46
  %184 = extractelement <16 x float> %166, i64 10, !dbg !46
  %185 = select i1 %183, float 0.000000e+00, float %184, !dbg !46
  %186 = extractelement <16 x i1> %167, i64 9, !dbg !46
  %187 = extractelement <16 x float> %166, i64 9, !dbg !46
  %188 = select i1 %186, float 0.000000e+00, float %187, !dbg !46
  %189 = extractelement <16 x i1> %167, i64 8, !dbg !46
  %190 = extractelement <16 x float> %166, i64 8, !dbg !46
  %191 = select i1 %189, float 0.000000e+00, float %190, !dbg !46
  %192 = extractelement <16 x i1> %167, i64 7, !dbg !46
  %193 = extractelement <16 x float> %166, i64 7, !dbg !46
  %194 = select i1 %192, float 0.000000e+00, float %193, !dbg !46
  %195 = extractelement <16 x i1> %167, i64 6, !dbg !46
  %196 = extractelement <16 x float> %166, i64 6, !dbg !46
  %197 = select i1 %195, float 0.000000e+00, float %196, !dbg !46
  %198 = extractelement <16 x i1> %167, i64 5, !dbg !46
  %199 = extractelement <16 x float> %166, i64 5, !dbg !46
  %200 = select i1 %198, float 0.000000e+00, float %199, !dbg !46
  %201 = extractelement <16 x i1> %167, i64 4, !dbg !46
  %202 = extractelement <16 x float> %166, i64 4, !dbg !46
  %203 = select i1 %201, float 0.000000e+00, float %202, !dbg !46
  %204 = extractelement <16 x i1> %167, i64 3, !dbg !46
  %205 = extractelement <16 x float> %166, i64 3, !dbg !46
  %206 = select i1 %204, float 0.000000e+00, float %205, !dbg !46
  %207 = extractelement <16 x i1> %167, i64 2, !dbg !46
  %208 = extractelement <16 x float> %166, i64 2, !dbg !46
  %209 = select i1 %207, float 0.000000e+00, float %208, !dbg !46
  %210 = extractelement <16 x i1> %167, i64 1, !dbg !46
  %211 = extractelement <16 x float> %166, i64 1, !dbg !46
  %212 = select i1 %210, float 0.000000e+00, float %211, !dbg !46
  %213 = extractelement <16 x i1> %167, i64 0, !dbg !46
  %214 = extractelement <16 x float> %166, i64 0, !dbg !46
  %215 = select i1 %213, float 0.000000e+00, float %214, !dbg !46
  %216 = shl nsw i32 %.decomposed6, 12, !dbg !47
  %217 = add i32 %216, %130, !dbg !48
  %218 = shl i32 %127, 20, !dbg !49
  %219 = shl i32 %126, 20, !dbg !49
  %220 = shl i32 %124, 20, !dbg !49
  %221 = shl i32 %122, 20, !dbg !49
  %222 = add i32 %217, %218, !dbg !50
  %223 = add i32 %217, %219, !dbg !50
  %224 = add i32 %217, %220, !dbg !50
  %225 = add i32 %217, %221, !dbg !50
  %226 = sext i32 %222 to i64, !dbg !51
  %227 = getelementptr float, ptr addrspace(1) %5, i64 %226, !dbg !51
  %228 = sext i32 %223 to i64, !dbg !51
  %229 = getelementptr float, ptr addrspace(1) %5, i64 %228, !dbg !51
  %230 = sext i32 %224 to i64, !dbg !51
  %231 = getelementptr float, ptr addrspace(1) %5, i64 %230, !dbg !51
  %232 = sext i32 %225 to i64, !dbg !51
  %233 = getelementptr float, ptr addrspace(1) %5, i64 %232, !dbg !51
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %234 = shl i32 %11, 4, !dbg !52
  %235 = and i32 %234, 4080, !dbg !52
  %236 = lshr exact i32 %235, 2, !dbg !52
  %237 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %236, !dbg !52
  %238 = getelementptr float, ptr addrspace(3) %237, i32 %235, !dbg !52
  %239 = bitcast float %170 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %238, <1 x i32> %239, i1 true) #4, !dbg !52
  %240 = or disjoint i32 %235, 1, !dbg !52
  %241 = getelementptr float, ptr addrspace(3) %237, i32 %240, !dbg !52
  %242 = bitcast float %173 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %241, <1 x i32> %242, i1 true) #4, !dbg !52
  %243 = or disjoint i32 %235, 2, !dbg !52
  %244 = getelementptr float, ptr addrspace(3) %237, i32 %243, !dbg !52
  %245 = bitcast float %176 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %244, <1 x i32> %245, i1 true) #4, !dbg !52
  %246 = or disjoint i32 %235, 3, !dbg !52
  %247 = getelementptr float, ptr addrspace(3) %237, i32 %246, !dbg !52
  %248 = bitcast float %179 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %247, <1 x i32> %248, i1 true) #4, !dbg !52
  %249 = or disjoint i32 %235, 4, !dbg !52
  %250 = getelementptr float, ptr addrspace(3) %237, i32 %249, !dbg !52
  %251 = bitcast float %182 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %250, <1 x i32> %251, i1 true) #4, !dbg !52
  %252 = or disjoint i32 %235, 5, !dbg !52
  %253 = getelementptr float, ptr addrspace(3) %237, i32 %252, !dbg !52
  %254 = bitcast float %185 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %253, <1 x i32> %254, i1 true) #4, !dbg !52
  %255 = or disjoint i32 %235, 6, !dbg !52
  %256 = getelementptr float, ptr addrspace(3) %237, i32 %255, !dbg !52
  %257 = bitcast float %188 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %256, <1 x i32> %257, i1 true) #4, !dbg !52
  %258 = or disjoint i32 %235, 7, !dbg !52
  %259 = getelementptr float, ptr addrspace(3) %237, i32 %258, !dbg !52
  %260 = bitcast float %191 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %259, <1 x i32> %260, i1 true) #4, !dbg !52
  %261 = or disjoint i32 %235, 8, !dbg !52
  %262 = getelementptr float, ptr addrspace(3) %237, i32 %261, !dbg !52
  %263 = bitcast float %194 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %262, <1 x i32> %263, i1 true) #4, !dbg !52
  %264 = or disjoint i32 %235, 9, !dbg !52
  %265 = getelementptr float, ptr addrspace(3) %237, i32 %264, !dbg !52
  %266 = bitcast float %197 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %265, <1 x i32> %266, i1 true) #4, !dbg !52
  %267 = or disjoint i32 %235, 10, !dbg !52
  %268 = getelementptr float, ptr addrspace(3) %237, i32 %267, !dbg !52
  %269 = bitcast float %200 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %268, <1 x i32> %269, i1 true) #4, !dbg !52
  %270 = or disjoint i32 %235, 11, !dbg !52
  %271 = getelementptr float, ptr addrspace(3) %237, i32 %270, !dbg !52
  %272 = bitcast float %203 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %271, <1 x i32> %272, i1 true) #4, !dbg !52
  %273 = or disjoint i32 %235, 12, !dbg !52
  %274 = getelementptr float, ptr addrspace(3) %237, i32 %273, !dbg !52
  %275 = bitcast float %206 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %274, <1 x i32> %275, i1 true) #4, !dbg !52
  %276 = or disjoint i32 %235, 13, !dbg !52
  %277 = getelementptr float, ptr addrspace(3) %237, i32 %276, !dbg !52
  %278 = bitcast float %209 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %277, <1 x i32> %278, i1 true) #4, !dbg !52
  %279 = or disjoint i32 %235, 14, !dbg !52
  %280 = getelementptr float, ptr addrspace(3) %237, i32 %279, !dbg !52
  %281 = bitcast float %212 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %280, <1 x i32> %281, i1 true) #4, !dbg !52
  %282 = or disjoint i32 %235, 15, !dbg !52
  %283 = getelementptr float, ptr addrspace(3) %237, i32 %282, !dbg !52
  %284 = bitcast float %215 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %283, <1 x i32> %284, i1 true) #4, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %285 = lshr i32 %70, 4, !dbg !52
  %286 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %285, !dbg !52
  %287 = getelementptr inbounds float, ptr addrspace(3) %286, i32 %70, !dbg !52
  %288 = load i32, ptr addrspace(3) %287, align 4, !dbg !52
  %289 = or disjoint i32 %70, 1, !dbg !52
  %290 = getelementptr inbounds float, ptr addrspace(3) %286, i32 %289, !dbg !52
  %291 = load i32, ptr addrspace(3) %290, align 4, !dbg !52
  %292 = or disjoint i32 %70, 2, !dbg !52
  %293 = getelementptr inbounds float, ptr addrspace(3) %286, i32 %292, !dbg !52
  %294 = load i32, ptr addrspace(3) %293, align 4, !dbg !52
  %295 = or disjoint i32 %70, 3, !dbg !52
  %296 = getelementptr inbounds float, ptr addrspace(3) %286, i32 %295, !dbg !52
  %297 = load i32, ptr addrspace(3) %296, align 4, !dbg !52
  %298 = or disjoint i32 %70, 1024, !dbg !52
  %299 = lshr i32 %298, 4, !dbg !52
  %300 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %299, !dbg !52
  %301 = getelementptr inbounds float, ptr addrspace(3) %300, i32 %298, !dbg !52
  %302 = load i32, ptr addrspace(3) %301, align 4, !dbg !52
  %303 = or disjoint i32 %70, 1025, !dbg !52
  %304 = lshr i32 %303, 4, !dbg !52
  %305 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %304, !dbg !52
  %306 = getelementptr inbounds float, ptr addrspace(3) %305, i32 %303, !dbg !52
  %307 = load i32, ptr addrspace(3) %306, align 4, !dbg !52
  %308 = or disjoint i32 %70, 1026, !dbg !52
  %309 = lshr i32 %308, 4, !dbg !52
  %310 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %309, !dbg !52
  %311 = getelementptr inbounds float, ptr addrspace(3) %310, i32 %308, !dbg !52
  %312 = load i32, ptr addrspace(3) %311, align 4, !dbg !52
  %313 = or disjoint i32 %70, 1027, !dbg !52
  %314 = lshr i32 %313, 4, !dbg !52
  %315 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %314, !dbg !52
  %316 = getelementptr inbounds float, ptr addrspace(3) %315, i32 %313, !dbg !52
  %317 = load i32, ptr addrspace(3) %316, align 4, !dbg !52
  %318 = or disjoint i32 %70, 2048, !dbg !52
  %319 = lshr i32 %318, 4, !dbg !52
  %320 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %319, !dbg !52
  %321 = getelementptr inbounds float, ptr addrspace(3) %320, i32 %318, !dbg !52
  %322 = load i32, ptr addrspace(3) %321, align 4, !dbg !52
  %323 = or disjoint i32 %70, 2049, !dbg !52
  %324 = lshr i32 %323, 4, !dbg !52
  %325 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %324, !dbg !52
  %326 = getelementptr inbounds float, ptr addrspace(3) %325, i32 %323, !dbg !52
  %327 = load i32, ptr addrspace(3) %326, align 4, !dbg !52
  %328 = or disjoint i32 %70, 2050, !dbg !52
  %329 = lshr i32 %328, 4, !dbg !52
  %330 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %329, !dbg !52
  %331 = getelementptr inbounds float, ptr addrspace(3) %330, i32 %328, !dbg !52
  %332 = load i32, ptr addrspace(3) %331, align 4, !dbg !52
  %333 = or disjoint i32 %70, 2051, !dbg !52
  %334 = lshr i32 %333, 4, !dbg !52
  %335 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %334, !dbg !52
  %336 = getelementptr inbounds float, ptr addrspace(3) %335, i32 %333, !dbg !52
  %337 = load i32, ptr addrspace(3) %336, align 4, !dbg !52
  %338 = or disjoint i32 %70, 3072, !dbg !52
  %339 = lshr i32 %338, 4, !dbg !52
  %340 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %339, !dbg !52
  %341 = getelementptr inbounds float, ptr addrspace(3) %340, i32 %338, !dbg !52
  %342 = load i32, ptr addrspace(3) %341, align 4, !dbg !52
  %343 = or disjoint i32 %70, 3073, !dbg !52
  %344 = lshr i32 %343, 4, !dbg !52
  %345 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %344, !dbg !52
  %346 = getelementptr inbounds float, ptr addrspace(3) %345, i32 %343, !dbg !52
  %347 = load i32, ptr addrspace(3) %346, align 4, !dbg !52
  %348 = or disjoint i32 %70, 3074, !dbg !52
  %349 = lshr i32 %348, 4, !dbg !52
  %350 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %349, !dbg !52
  %351 = getelementptr inbounds float, ptr addrspace(3) %350, i32 %348, !dbg !52
  %352 = load i32, ptr addrspace(3) %351, align 4, !dbg !52
  %353 = or disjoint i32 %70, 3075, !dbg !52
  %354 = lshr i32 %353, 4, !dbg !52
  %355 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %354, !dbg !52
  %356 = getelementptr inbounds float, ptr addrspace(3) %355, i32 %353, !dbg !52
  %357 = load i32, ptr addrspace(3) %356, align 4, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %288, i32 %291, i32 %294, i32 %297, ptr addrspace(1) %227, i1 %134) #4, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %302, i32 %307, i32 %312, i32 %317, ptr addrspace(1) %229, i1 %133) #4, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %322, i32 %327, i32 %332, i32 %337, ptr addrspace(1) %231, i1 %132) #4, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %342, i32 %347, i32 %352, i32 %357, ptr addrspace(1) %233, i1 %131) #4, !dbg !52
  ret void, !dbg !53
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "covb4k6zcoizqcciwkzxzkjf3xzegn5kuprxexhkrc6guejy5iql.py", directory: "inductor_cache/ov")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_11, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_11, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_relu_11", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_relu_11", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 31, column: 38, scope: !7)
!22 = !DILocation(line: 31, column: 50, scope: !7)
!23 = !DILocation(line: 31, column: 35, scope: !7)
!24 = !DILocation(line: 31, column: 43, scope: !7)
!25 = !DILocation(line: 31, column: 30, scope: !7)
!26 = !DILocation(line: 31, column: 55, scope: !7)
!27 = !DILocation(line: 32, column: 30, scope: !7)
!28 = !DILocation(line: 32, column: 35, scope: !7)
!29 = !DILocation(line: 33, column: 30, scope: !7)
!30 = !DILocation(line: 33, column: 35, scope: !7)
!31 = !DILocation(line: 34, column: 31, scope: !7)
!32 = !DILocation(line: 34, column: 36, scope: !7)
!33 = !DILocation(line: 35, column: 31, scope: !7)
!34 = !DILocation(line: 35, column: 36, scope: !7)
!35 = !DILocation(line: 38, column: 18, scope: !7)
!36 = !DILocation(line: 39, column: 26, scope: !7)
!37 = !DILocation(line: 41, column: 18, scope: !7)
!38 = !DILocation(line: 36, column: 18, scope: !7)
!39 = !DILocation(line: 44, column: 19, scope: !7)
!40 = !DILocation(line: 45, column: 20, scope: !7)
!41 = !DILocation(line: 46, column: 20, scope: !7)
!42 = !DILocation(line: 118, column: 15, scope: !43, inlinedAt: !45)
!43 = distinct !DILexicalBlockFile(scope: !7, file: !44, discriminator: 0)
!44 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!45 = !DILocation(line: 48, column: 42, scope: !7)
!46 = !DILocation(line: 121, column: 29, scope: !43, inlinedAt: !45)
!47 = !DILocation(line: 49, column: 35, scope: !7)
!48 = !DILocation(line: 49, column: 30, scope: !7)
!49 = !DILocation(line: 49, column: 48, scope: !7)
!50 = !DILocation(line: 49, column: 40, scope: !7)
!51 = !DILocation(line: 49, column: 25, scope: !7)
!52 = !DILocation(line: 49, column: 60, scope: !7)
!53 = !DILocation(line: 49, column: 4, scope: !7)
