; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_cat_convolution_15(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, i32 %10, i32 %11) local_unnamed_addr !dbg !7 {
  %13 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %14 = shl i32 %13, 6, !dbg !11
  %15 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %16 = shl i32 %15, 1, !dbg !12
  %17 = and i32 %16, 2, !dbg !12
  %18 = and i32 %16, 62, !dbg !12
  %19 = lshr i32 %15, 1, !dbg !12
  %20 = and i32 %19, 63, !dbg !12
  %21 = or disjoint i32 %14, %18, !dbg !13
  %22 = or disjoint i32 %14, %20, !dbg !13
  %23 = icmp slt i32 %21, 512, !dbg !14
  %24 = icmp slt i32 %22, 512, !dbg !14
  %25 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %26 = shl i32 %25, 2, !dbg !16
  %27 = lshr i32 %15, 5, !dbg !17
  %28 = and i32 %27, 3, !dbg !17
  %29 = or disjoint i32 %26, %28, !dbg !18
  %30 = or disjoint i32 %26, %17, !dbg !18
  %31 = icmp slt i32 %29, 4, !dbg !19
  %32 = icmp slt i32 %30, 4, !dbg !19
  %.frozen = freeze i32 %21, !dbg !20
  %33 = sdiv i32 %.frozen, 128, !dbg !20
  %34 = mul i32 %33, 128, !dbg !21
  %.decomposed = sub i32 %.frozen, %34, !dbg !21
  %35 = icmp slt i32 %.decomposed, 32, !dbg !22
  %36 = shl i32 %29, 5, !dbg !23
  %37 = shl nsw i32 %33, 7, !dbg !24
  %38 = add i32 %36, %37, !dbg !25
  %39 = add i32 %38, %.decomposed, !dbg !26
  %40 = sext i32 %39 to i64, !dbg !27
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !27
  %42 = and i1 %35, %31, !dbg !28
  %43 = and i1 %23, %42, !dbg !29
  %44 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %41, i1 %43, i32 0, i1 %43, i32 0, i1 %43) #2, !dbg !30
  %45 = extractvalue { i32, i32 } %44, 0, !dbg !30
  %46 = extractvalue { i32, i32 } %44, 1, !dbg !30
  %47 = bitcast i32 %45 to float, !dbg !30
  %48 = bitcast i32 %46 to float, !dbg !30
  %49 = sext i32 %.decomposed to i64, !dbg !31
  %50 = getelementptr float, ptr addrspace(1) %1, i64 %49, !dbg !31
  %51 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %50, i1 %43, i32 0, i1 %43, i32 0, i1 %43) #2, !dbg !32
  %52 = extractvalue { i32, i32 } %51, 0, !dbg !32
  %53 = extractvalue { i32, i32 } %51, 1, !dbg !32
  %54 = bitcast i32 %52 to float, !dbg !32
  %55 = bitcast i32 %53 to float, !dbg !32
  %56 = fadd float %47, %54, !dbg !33
  %57 = fadd float %48, %55, !dbg !33
  %58 = and i32 %.decomposed, -32, !dbg !34
  %59 = icmp eq i32 %58, 32, !dbg !34
  %60 = add nsw i32 %.decomposed, -32, !dbg !35
  %61 = add i32 %38, %60, !dbg !36
  %62 = sext i32 %61 to i64, !dbg !37
  %63 = getelementptr float, ptr addrspace(1) %2, i64 %62, !dbg !37
  %64 = and i1 %31, %59, !dbg !38
  %65 = and i1 %23, %64, !dbg !39
  %66 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %63, i1 %65, i32 0, i1 %65, i32 0, i1 %65) #2, !dbg !40
  %67 = extractvalue { i32, i32 } %66, 0, !dbg !40
  %68 = extractvalue { i32, i32 } %66, 1, !dbg !40
  %69 = bitcast i32 %67 to float, !dbg !40
  %70 = bitcast i32 %68 to float, !dbg !40
  %71 = sext i32 %60 to i64, !dbg !41
  %72 = getelementptr float, ptr addrspace(1) %3, i64 %71, !dbg !41
  %73 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %72, i1 %65, i32 0, i1 %65, i32 0, i1 %65) #2, !dbg !42
  %74 = extractvalue { i32, i32 } %73, 0, !dbg !42
  %75 = extractvalue { i32, i32 } %73, 1, !dbg !42
  %76 = bitcast i32 %74 to float, !dbg !42
  %77 = bitcast i32 %75 to float, !dbg !42
  %78 = fadd float %69, %76, !dbg !43
  %79 = fadd float %70, %77, !dbg !43
  %80 = icmp eq i32 %58, 64, !dbg !44
  %81 = add nsw i32 %.decomposed, -64, !dbg !45
  %82 = add i32 %38, %81, !dbg !46
  %83 = sext i32 %82 to i64, !dbg !47
  %84 = getelementptr float, ptr addrspace(1) %4, i64 %83, !dbg !47
  %85 = and i1 %31, %80, !dbg !48
  %86 = and i1 %23, %85, !dbg !49
  %87 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %84, i1 %86, i32 0, i1 %86, i32 0, i1 %86) #2, !dbg !50
  %88 = extractvalue { i32, i32 } %87, 0, !dbg !50
  %89 = extractvalue { i32, i32 } %87, 1, !dbg !50
  %90 = bitcast i32 %88 to float, !dbg !50
  %91 = bitcast i32 %89 to float, !dbg !50
  %92 = sext i32 %81 to i64, !dbg !51
  %93 = getelementptr float, ptr addrspace(1) %5, i64 %92, !dbg !51
  %94 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %93, i1 %86, i32 0, i1 %86, i32 0, i1 %86) #2, !dbg !52
  %95 = extractvalue { i32, i32 } %94, 0, !dbg !52
  %96 = extractvalue { i32, i32 } %94, 1, !dbg !52
  %97 = bitcast i32 %95 to float, !dbg !52
  %98 = bitcast i32 %96 to float, !dbg !52
  %99 = fadd float %90, %97, !dbg !53
  %100 = fadd float %91, %98, !dbg !53
  %101 = icmp sgt i32 %.decomposed, 95, !dbg !54
  %102 = add nsw i32 %.decomposed, -96, !dbg !55
  %103 = add i32 %38, %102, !dbg !56
  %104 = sext i32 %103 to i64, !dbg !57
  %105 = getelementptr float, ptr addrspace(1) %6, i64 %104, !dbg !57
  %106 = and i1 %101, %31, !dbg !58
  %107 = and i1 %23, %106, !dbg !59
  %108 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %105, i1 %107, i32 0, i1 %107, i32 0, i1 %107) #2, !dbg !60
  %109 = extractvalue { i32, i32 } %108, 0, !dbg !60
  %110 = extractvalue { i32, i32 } %108, 1, !dbg !60
  %111 = bitcast i32 %109 to float, !dbg !60
  %112 = bitcast i32 %110 to float, !dbg !60
  %113 = sext i32 %102 to i64, !dbg !61
  %114 = getelementptr float, ptr addrspace(1) %7, i64 %113, !dbg !61
  %115 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %114, i1 %107, i32 0, i1 %107, i32 0, i1 %107) #2, !dbg !62
  %116 = extractvalue { i32, i32 } %115, 0, !dbg !62
  %117 = extractvalue { i32, i32 } %115, 1, !dbg !62
  %118 = bitcast i32 %116 to float, !dbg !62
  %119 = bitcast i32 %117 to float, !dbg !62
  %120 = fadd float %111, %118, !dbg !63
  %121 = fadd float %112, %119, !dbg !63
  %122 = select i1 %101, float %120, float 0.000000e+00, !dbg !64
  %123 = select i1 %101, float %121, float 0.000000e+00, !dbg !64
  %124 = select i1 %80, float %99, float %122, !dbg !65
  %125 = select i1 %80, float %100, float %123, !dbg !65
  %126 = select i1 %59, float %78, float %124, !dbg !65
  %127 = select i1 %59, float %79, float %125, !dbg !65
  %128 = select i1 %35, float %56, float %126, !dbg !65
  %129 = select i1 %35, float %57, float %127, !dbg !65
  %130 = shl i32 %22, 2, !dbg !66
  %131 = add i32 %30, %130, !dbg !67
  %132 = sext i32 %131 to i64, !dbg !68
  %133 = getelementptr float, ptr addrspace(1) %8, i64 %132, !dbg !68
  %134 = and i1 %24, %32, !dbg !69
  %135 = and i1 %23, %31, !dbg !69
  %136 = shl i32 %15, 3, !dbg !70
  %137 = and i32 %136, 248, !dbg !70
  %138 = or disjoint i32 %137, %28, !dbg !70
  %139 = and i32 %16, 254, !dbg !70
  %140 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %137, !dbg !70
  %141 = getelementptr inbounds float, ptr addrspace(3) %140, i32 %138, !dbg !70
  %142 = bitcast float %128 to <1 x i32>, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %141, <1 x i32> %142, i1 true) #2, !dbg !70
  %143 = or disjoint i32 %138, 4, !dbg !70
  %144 = lshr i32 %143, 2, !dbg !70
  %145 = getelementptr float, ptr addrspace(3) @global_smem, i32 %144, !dbg !70
  %146 = getelementptr float, ptr addrspace(3) %145, i32 %143, !dbg !70
  %147 = bitcast float %129 to <1 x i32>, !dbg !70
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %146, <1 x i32> %147, i1 true) #2, !dbg !70
  tail call void @llvm.nvvm.barrier0(), !dbg !70
  %148 = lshr i32 %139, 2, !dbg !70
  %149 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %148, !dbg !70
  %150 = getelementptr inbounds float, ptr addrspace(3) %149, i32 %139, !dbg !70
  %151 = load i32, ptr addrspace(3) %150, align 4, !dbg !70
  %152 = or disjoint i32 %139, 1, !dbg !70
  %153 = getelementptr inbounds float, ptr addrspace(3) %149, i32 %152, !dbg !70
  %154 = load i32, ptr addrspace(3) %153, align 4, !dbg !70
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %151, i32 %154, ptr addrspace(1) %133, i1 %134) #2, !dbg !70
  %155 = shl i32 %29, 7, !dbg !71
  %156 = add i32 %155, %.decomposed, !dbg !72
  %157 = shl i32 %33, 9, !dbg !73
  %158 = add i32 %156, %157, !dbg !74
  %159 = sext i32 %158 to i64, !dbg !75
  %160 = getelementptr float, ptr addrspace(1) %9, i64 %159, !dbg !75
  %161 = bitcast float %128 to i32, !dbg !76
  %162 = bitcast float %129 to i32, !dbg !76
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %161, i32 %162, ptr addrspace(1) %160, i1 %135) #2, !dbg !76
  ret void, !dbg !77
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c2spmhq62why5uozcqouvknmv3crkdcob47cscw4sk7kqjeopfcr.py", directory: "inductor_cache/2s")
!4 = !{ptr @triton_poi_fused_cat_convolution_15, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_convolution_15, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_convolution_15", linkageName: "triton_poi_fused_cat_convolution_15", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 28, column: 19, scope: !7)
!22 = !DILocation(line: 36, column: 18, scope: !7)
!23 = !DILocation(line: 37, column: 33, scope: !7)
!24 = !DILocation(line: 37, column: 42, scope: !7)
!25 = !DILocation(line: 37, column: 38, scope: !7)
!26 = !DILocation(line: 37, column: 48, scope: !7)
!27 = !DILocation(line: 37, column: 30, scope: !7)
!28 = !DILocation(line: 37, column: 61, scope: !7)
!29 = !DILocation(line: 37, column: 69, scope: !7)
!30 = !DILocation(line: 37, column: 54, scope: !7)
!31 = !DILocation(line: 38, column: 30, scope: !7)
!32 = !DILocation(line: 38, column: 70, scope: !7)
!33 = !DILocation(line: 39, column: 18, scope: !7)
!34 = !DILocation(line: 45, column: 20, scope: !7)
!35 = !DILocation(line: 46, column: 57, scope: !7)
!36 = !DILocation(line: 46, column: 49, scope: !7)
!37 = !DILocation(line: 46, column: 31, scope: !7)
!38 = !DILocation(line: 46, column: 71, scope: !7)
!39 = !DILocation(line: 46, column: 79, scope: !7)
!40 = !DILocation(line: 46, column: 63, scope: !7)
!41 = !DILocation(line: 47, column: 31, scope: !7)
!42 = !DILocation(line: 47, column: 79, scope: !7)
!43 = !DILocation(line: 48, column: 20, scope: !7)
!44 = !DILocation(line: 54, column: 20, scope: !7)
!45 = !DILocation(line: 55, column: 57, scope: !7)
!46 = !DILocation(line: 55, column: 49, scope: !7)
!47 = !DILocation(line: 55, column: 31, scope: !7)
!48 = !DILocation(line: 55, column: 71, scope: !7)
!49 = !DILocation(line: 55, column: 79, scope: !7)
!50 = !DILocation(line: 55, column: 63, scope: !7)
!51 = !DILocation(line: 56, column: 31, scope: !7)
!52 = !DILocation(line: 56, column: 79, scope: !7)
!53 = !DILocation(line: 57, column: 20, scope: !7)
!54 = !DILocation(line: 60, column: 20, scope: !7)
!55 = !DILocation(line: 63, column: 57, scope: !7)
!56 = !DILocation(line: 63, column: 49, scope: !7)
!57 = !DILocation(line: 63, column: 31, scope: !7)
!58 = !DILocation(line: 63, column: 71, scope: !7)
!59 = !DILocation(line: 63, column: 79, scope: !7)
!60 = !DILocation(line: 63, column: 63, scope: !7)
!61 = !DILocation(line: 64, column: 31, scope: !7)
!62 = !DILocation(line: 64, column: 79, scope: !7)
!63 = !DILocation(line: 65, column: 20, scope: !7)
!64 = !DILocation(line: 67, column: 35, scope: !7)
!65 = !DILocation(line: 0, scope: !7)
!66 = !DILocation(line: 71, column: 32, scope: !7)
!67 = !DILocation(line: 71, column: 30, scope: !7)
!68 = !DILocation(line: 71, column: 25, scope: !7)
!69 = !DILocation(line: 71, column: 52, scope: !7)
!70 = !DILocation(line: 71, column: 44, scope: !7)
!71 = !DILocation(line: 72, column: 34, scope: !7)
!72 = !DILocation(line: 72, column: 30, scope: !7)
!73 = !DILocation(line: 72, column: 43, scope: !7)
!74 = !DILocation(line: 72, column: 39, scope: !7)
!75 = !DILocation(line: 72, column: 25, scope: !7)
!76 = !DILocation(line: 72, column: 55, scope: !7)
!77 = !DILocation(line: 72, column: 4, scope: !7)
