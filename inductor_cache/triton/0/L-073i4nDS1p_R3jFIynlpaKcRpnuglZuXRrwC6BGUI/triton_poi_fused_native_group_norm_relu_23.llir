; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused_native_group_norm_relu_23(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %9 = shl i32 %8, 10, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 2, !dbg !12
  %12 = and i32 %11, 508, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %14 = or disjoint i32 %13, 1, !dbg !13
  %15 = or disjoint i32 %13, 2, !dbg !13
  %16 = or disjoint i32 %13, 3, !dbg !13
  %17 = or disjoint i32 %13, 512, !dbg !13
  %18 = or disjoint i32 %13, 513, !dbg !13
  %19 = or disjoint i32 %13, 514, !dbg !13
  %20 = or disjoint i32 %13, 515, !dbg !13
  %21 = srem i32 %13, 384, !dbg !14
  %22 = srem i32 %14, 384, !dbg !14
  %23 = srem i32 %15, 384, !dbg !14
  %24 = srem i32 %16, 384, !dbg !14
  %25 = srem i32 %17, 384, !dbg !14
  %26 = srem i32 %18, 384, !dbg !14
  %27 = srem i32 %19, 384, !dbg !14
  %28 = srem i32 %20, 384, !dbg !14
  %29 = sdiv i32 %13, 393216, !dbg !15
  %30 = sdiv i32 %17, 393216, !dbg !15
  %31 = sext i32 %13 to i64, !dbg !16
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !16
  %33 = sext i32 %17 to i64, !dbg !16
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !16
  %35 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %32, i1 true) #3, !dbg !17
  %36 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %34, i1 true) #3, !dbg !17
  %37 = mul nsw i32 %29, 12, !dbg !18
  %38 = mul nsw i32 %30, 12, !dbg !18
  %.lhs.trunc = trunc nsw i32 %21 to i16, !dbg !19
  %39 = sdiv i16 %.lhs.trunc, 32, !dbg !19
  %.sext = sext i16 %39 to i32, !dbg !19
  %.lhs.trunc22 = trunc nsw i32 %22 to i16, !dbg !19
  %40 = sdiv i16 %.lhs.trunc22, 32, !dbg !19
  %.sext23 = sext i16 %40 to i32, !dbg !19
  %.lhs.trunc24 = trunc nsw i32 %23 to i16, !dbg !19
  %41 = sdiv i16 %.lhs.trunc24, 32, !dbg !19
  %.sext25 = sext i16 %41 to i32, !dbg !19
  %.lhs.trunc26 = trunc nsw i32 %24 to i16, !dbg !19
  %42 = sdiv i16 %.lhs.trunc26, 32, !dbg !19
  %.sext27 = sext i16 %42 to i32, !dbg !19
  %.lhs.trunc28 = trunc nsw i32 %25 to i16, !dbg !19
  %43 = sdiv i16 %.lhs.trunc28, 32, !dbg !19
  %.sext29 = sext i16 %43 to i32, !dbg !19
  %.lhs.trunc30 = trunc nsw i32 %26 to i16, !dbg !19
  %44 = sdiv i16 %.lhs.trunc30, 32, !dbg !19
  %.sext31 = sext i16 %44 to i32, !dbg !19
  %.lhs.trunc32 = trunc nsw i32 %27 to i16, !dbg !19
  %45 = sdiv i16 %.lhs.trunc32, 32, !dbg !19
  %.sext33 = sext i16 %45 to i32, !dbg !19
  %.lhs.trunc34 = trunc nsw i32 %28 to i16, !dbg !19
  %46 = sdiv i16 %.lhs.trunc34, 32, !dbg !19
  %.sext35 = sext i16 %46 to i32, !dbg !19
  %47 = add nsw i32 %37, %.sext, !dbg !20
  %48 = add nsw i32 %37, %.sext23, !dbg !20
  %49 = add nsw i32 %37, %.sext25, !dbg !20
  %50 = add nsw i32 %37, %.sext27, !dbg !20
  %51 = add nsw i32 %38, %.sext29, !dbg !20
  %52 = add nsw i32 %38, %.sext31, !dbg !20
  %53 = add nsw i32 %38, %.sext33, !dbg !20
  %54 = add nsw i32 %38, %.sext35, !dbg !20
  %55 = sext i32 %47 to i64, !dbg !21
  %56 = getelementptr float, ptr addrspace(1) %1, i64 %55, !dbg !21
  %57 = sext i32 %48 to i64, !dbg !21
  %58 = getelementptr float, ptr addrspace(1) %1, i64 %57, !dbg !21
  %59 = sext i32 %49 to i64, !dbg !21
  %60 = getelementptr float, ptr addrspace(1) %1, i64 %59, !dbg !21
  %61 = sext i32 %50 to i64, !dbg !21
  %62 = getelementptr float, ptr addrspace(1) %1, i64 %61, !dbg !21
  %63 = sext i32 %51 to i64, !dbg !21
  %64 = getelementptr float, ptr addrspace(1) %1, i64 %63, !dbg !21
  %65 = sext i32 %52 to i64, !dbg !21
  %66 = getelementptr float, ptr addrspace(1) %1, i64 %65, !dbg !21
  %67 = sext i32 %53 to i64, !dbg !21
  %68 = getelementptr float, ptr addrspace(1) %1, i64 %67, !dbg !21
  %69 = sext i32 %54 to i64, !dbg !21
  %70 = getelementptr float, ptr addrspace(1) %1, i64 %69, !dbg !21
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 true) #3, !dbg !22
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 true) #3, !dbg !22
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 true) #3, !dbg !22
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 true) #3, !dbg !22
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 true) #3, !dbg !22
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 true) #3, !dbg !22
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 true) #3, !dbg !22
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 true) #3, !dbg !22
  %79 = getelementptr float, ptr addrspace(1) %2, i64 %55, !dbg !23
  %80 = getelementptr float, ptr addrspace(1) %2, i64 %57, !dbg !23
  %81 = getelementptr float, ptr addrspace(1) %2, i64 %59, !dbg !23
  %82 = getelementptr float, ptr addrspace(1) %2, i64 %61, !dbg !23
  %83 = getelementptr float, ptr addrspace(1) %2, i64 %63, !dbg !23
  %84 = getelementptr float, ptr addrspace(1) %2, i64 %65, !dbg !23
  %85 = getelementptr float, ptr addrspace(1) %2, i64 %67, !dbg !23
  %86 = getelementptr float, ptr addrspace(1) %2, i64 %69, !dbg !23
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %79, i1 true) #3, !dbg !24
  %88 = bitcast i32 %87 to float, !dbg !24
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %80, i1 true) #3, !dbg !24
  %90 = bitcast i32 %89 to float, !dbg !24
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 true) #3, !dbg !24
  %92 = bitcast i32 %91 to float, !dbg !24
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 true) #3, !dbg !24
  %94 = bitcast i32 %93 to float, !dbg !24
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %83, i1 true) #3, !dbg !24
  %96 = bitcast i32 %95 to float, !dbg !24
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 true) #3, !dbg !24
  %98 = bitcast i32 %97 to float, !dbg !24
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 true) #3, !dbg !24
  %100 = bitcast i32 %99 to float, !dbg !24
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 true) #3, !dbg !24
  %102 = bitcast i32 %101 to float, !dbg !24
  %103 = sext i32 %21 to i64, !dbg !25
  %104 = getelementptr float, ptr addrspace(1) %3, i64 %103, !dbg !25
  %105 = sext i32 %25 to i64, !dbg !25
  %106 = getelementptr float, ptr addrspace(1) %3, i64 %105, !dbg !25
  %107 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %104, i1 true) #3, !dbg !26
  %108 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %106, i1 true) #3, !dbg !26
  %109 = getelementptr float, ptr addrspace(1) %4, i64 %103, !dbg !27
  %110 = getelementptr float, ptr addrspace(1) %4, i64 %105, !dbg !27
  %111 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %109, i1 true) #3, !dbg !28
  %112 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %110, i1 true) #3, !dbg !28
  %113 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %88, float 3.276800e+04) #3, !dbg !29
  %114 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %90, float 3.276800e+04) #3, !dbg !29
  %115 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %92, float 3.276800e+04) #3, !dbg !29
  %116 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %94, float 3.276800e+04) #3, !dbg !29
  %117 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %96, float 3.276800e+04) #3, !dbg !29
  %118 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %98, float 3.276800e+04) #3, !dbg !29
  %119 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %100, float 3.276800e+04) #3, !dbg !29
  %120 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %102, float 3.276800e+04) #3, !dbg !29
  %121 = fadd float %113, 0x3EE4F8B580000000, !dbg !30
  %122 = fadd float %114, 0x3EE4F8B580000000, !dbg !30
  %123 = fadd float %115, 0x3EE4F8B580000000, !dbg !30
  %124 = fadd float %116, 0x3EE4F8B580000000, !dbg !30
  %125 = fadd float %117, 0x3EE4F8B580000000, !dbg !30
  %126 = fadd float %118, 0x3EE4F8B580000000, !dbg !30
  %127 = fadd float %119, 0x3EE4F8B580000000, !dbg !30
  %128 = fadd float %120, 0x3EE4F8B580000000, !dbg !30
  %129 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %.not.i = icmp eq i32 %129, 0, !dbg !31
  br i1 %.not.i, label %132, label %130, !dbg !31

130:                                              ; preds = %7
  %131 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %121), !dbg !31
  br label %__nv_rsqrtf.exit, !dbg !31

132:                                              ; preds = %7
  %133 = tail call float @llvm.nvvm.rsqrt.approx.f(float %121), !dbg !31
  br label %__nv_rsqrtf.exit, !dbg !31

__nv_rsqrtf.exit:                                 ; preds = %130, %132
  %.0.i = phi float [ %131, %130 ], [ %133, %132 ], !dbg !31
  %134 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %.not.i1 = icmp eq i32 %134, 0, !dbg !31
  br i1 %.not.i1, label %137, label %135, !dbg !31

135:                                              ; preds = %__nv_rsqrtf.exit
  %136 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %122), !dbg !31
  br label %__nv_rsqrtf.exit3, !dbg !31

137:                                              ; preds = %__nv_rsqrtf.exit
  %138 = tail call float @llvm.nvvm.rsqrt.approx.f(float %122), !dbg !31
  br label %__nv_rsqrtf.exit3, !dbg !31

__nv_rsqrtf.exit3:                                ; preds = %135, %137
  %.0.i2 = phi float [ %136, %135 ], [ %138, %137 ], !dbg !31
  %139 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %.not.i4 = icmp eq i32 %139, 0, !dbg !31
  br i1 %.not.i4, label %142, label %140, !dbg !31

140:                                              ; preds = %__nv_rsqrtf.exit3
  %141 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %123), !dbg !31
  br label %__nv_rsqrtf.exit6, !dbg !31

142:                                              ; preds = %__nv_rsqrtf.exit3
  %143 = tail call float @llvm.nvvm.rsqrt.approx.f(float %123), !dbg !31
  br label %__nv_rsqrtf.exit6, !dbg !31

__nv_rsqrtf.exit6:                                ; preds = %140, %142
  %.0.i5 = phi float [ %141, %140 ], [ %143, %142 ], !dbg !31
  %144 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %.not.i7 = icmp eq i32 %144, 0, !dbg !31
  br i1 %.not.i7, label %147, label %145, !dbg !31

145:                                              ; preds = %__nv_rsqrtf.exit6
  %146 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %124), !dbg !31
  br label %__nv_rsqrtf.exit9, !dbg !31

147:                                              ; preds = %__nv_rsqrtf.exit6
  %148 = tail call float @llvm.nvvm.rsqrt.approx.f(float %124), !dbg !31
  br label %__nv_rsqrtf.exit9, !dbg !31

__nv_rsqrtf.exit9:                                ; preds = %145, %147
  %.0.i8 = phi float [ %146, %145 ], [ %148, %147 ], !dbg !31
  %149 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %.not.i10 = icmp eq i32 %149, 0, !dbg !31
  br i1 %.not.i10, label %152, label %150, !dbg !31

150:                                              ; preds = %__nv_rsqrtf.exit9
  %151 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %125), !dbg !31
  br label %__nv_rsqrtf.exit12, !dbg !31

152:                                              ; preds = %__nv_rsqrtf.exit9
  %153 = tail call float @llvm.nvvm.rsqrt.approx.f(float %125), !dbg !31
  br label %__nv_rsqrtf.exit12, !dbg !31

__nv_rsqrtf.exit12:                               ; preds = %150, %152
  %.0.i11 = phi float [ %151, %150 ], [ %153, %152 ], !dbg !31
  %154 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %.not.i13 = icmp eq i32 %154, 0, !dbg !31
  br i1 %.not.i13, label %157, label %155, !dbg !31

155:                                              ; preds = %__nv_rsqrtf.exit12
  %156 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %126), !dbg !31
  br label %__nv_rsqrtf.exit15, !dbg !31

157:                                              ; preds = %__nv_rsqrtf.exit12
  %158 = tail call float @llvm.nvvm.rsqrt.approx.f(float %126), !dbg !31
  br label %__nv_rsqrtf.exit15, !dbg !31

__nv_rsqrtf.exit15:                               ; preds = %155, %157
  %.0.i14 = phi float [ %156, %155 ], [ %158, %157 ], !dbg !31
  %159 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %.not.i16 = icmp eq i32 %159, 0, !dbg !31
  br i1 %.not.i16, label %162, label %160, !dbg !31

160:                                              ; preds = %__nv_rsqrtf.exit15
  %161 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %127), !dbg !31
  br label %__nv_rsqrtf.exit18, !dbg !31

162:                                              ; preds = %__nv_rsqrtf.exit15
  %163 = tail call float @llvm.nvvm.rsqrt.approx.f(float %127), !dbg !31
  br label %__nv_rsqrtf.exit18, !dbg !31

__nv_rsqrtf.exit18:                               ; preds = %160, %162
  %.0.i17 = phi float [ %161, %160 ], [ %163, %162 ], !dbg !31
  %164 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %.not.i19 = icmp eq i32 %164, 0, !dbg !31
  br i1 %.not.i19, label %167, label %165, !dbg !31

165:                                              ; preds = %__nv_rsqrtf.exit18
  %166 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %128), !dbg !31
  br label %__nv_rsqrtf.exit21, !dbg !31

167:                                              ; preds = %__nv_rsqrtf.exit18
  %168 = tail call float @llvm.nvvm.rsqrt.approx.f(float %128), !dbg !31
  br label %__nv_rsqrtf.exit21, !dbg !31

__nv_rsqrtf.exit21:                               ; preds = %165, %167
  %.0.i20 = phi float [ %166, %165 ], [ %168, %167 ], !dbg !31
  %169 = extractvalue { i32, i32, i32, i32 } %36, 3, !dbg !17
  %170 = insertelement <8 x i32> poison, i32 %78, i64 0, !dbg !22
  %171 = insertelement <8 x i32> %170, i32 %77, i64 1, !dbg !22
  %172 = insertelement <8 x i32> %171, i32 %76, i64 2, !dbg !22
  %173 = insertelement <8 x i32> %172, i32 %75, i64 3, !dbg !22
  %174 = insertelement <8 x i32> %173, i32 %74, i64 4, !dbg !22
  %175 = insertelement <8 x i32> %174, i32 %73, i64 5, !dbg !22
  %176 = insertelement <8 x i32> %175, i32 %72, i64 6, !dbg !22
  %177 = insertelement <8 x i32> %176, i32 %71, i64 7, !dbg !22
  %178 = bitcast <8 x i32> %177 to <8 x float>, !dbg !22
  %179 = extractvalue { i32, i32, i32, i32 } %36, 2, !dbg !17
  %180 = extractvalue { i32, i32, i32, i32 } %36, 1, !dbg !17
  %181 = extractvalue { i32, i32, i32, i32 } %36, 0, !dbg !17
  %182 = extractvalue { i32, i32, i32, i32 } %35, 3, !dbg !17
  %183 = extractvalue { i32, i32, i32, i32 } %35, 2, !dbg !17
  %184 = extractvalue { i32, i32, i32, i32 } %35, 1, !dbg !17
  %185 = extractvalue { i32, i32, i32, i32 } %35, 0, !dbg !17
  %186 = extractvalue { i32, i32, i32, i32 } %112, 3, !dbg !28
  %187 = extractvalue { i32, i32, i32, i32 } %112, 2, !dbg !28
  %188 = extractvalue { i32, i32, i32, i32 } %112, 1, !dbg !28
  %189 = extractvalue { i32, i32, i32, i32 } %112, 0, !dbg !28
  %190 = extractvalue { i32, i32, i32, i32 } %111, 3, !dbg !28
  %191 = extractvalue { i32, i32, i32, i32 } %111, 2, !dbg !28
  %192 = extractvalue { i32, i32, i32, i32 } %111, 1, !dbg !28
  %193 = extractvalue { i32, i32, i32, i32 } %111, 0, !dbg !28
  %194 = extractvalue { i32, i32, i32, i32 } %108, 3, !dbg !26
  %195 = extractvalue { i32, i32, i32, i32 } %108, 2, !dbg !26
  %196 = extractvalue { i32, i32, i32, i32 } %108, 1, !dbg !26
  %197 = extractvalue { i32, i32, i32, i32 } %108, 0, !dbg !26
  %198 = extractvalue { i32, i32, i32, i32 } %107, 3, !dbg !26
  %199 = extractvalue { i32, i32, i32, i32 } %107, 2, !dbg !26
  %200 = extractvalue { i32, i32, i32, i32 } %107, 1, !dbg !26
  %201 = extractvalue { i32, i32, i32, i32 } %107, 0, !dbg !26
  %202 = insertelement <8 x i32> poison, i32 %169, i64 0, !dbg !17
  %203 = insertelement <8 x i32> %202, i32 %179, i64 1, !dbg !17
  %204 = insertelement <8 x i32> %203, i32 %180, i64 2, !dbg !17
  %205 = insertelement <8 x i32> %204, i32 %181, i64 3, !dbg !17
  %206 = insertelement <8 x i32> %205, i32 %182, i64 4, !dbg !17
  %207 = insertelement <8 x i32> %206, i32 %183, i64 5, !dbg !17
  %208 = insertelement <8 x i32> %207, i32 %184, i64 6, !dbg !17
  %209 = insertelement <8 x i32> %208, i32 %185, i64 7, !dbg !17
  %210 = bitcast <8 x i32> %209 to <8 x float>, !dbg !17
  %211 = fsub <8 x float> %210, %178, !dbg !32
  %212 = insertelement <8 x i32> poison, i32 %186, i64 0, !dbg !28
  %213 = insertelement <8 x i32> %212, i32 %187, i64 1, !dbg !28
  %214 = insertelement <8 x i32> %213, i32 %188, i64 2, !dbg !28
  %215 = insertelement <8 x i32> %214, i32 %189, i64 3, !dbg !28
  %216 = insertelement <8 x i32> %215, i32 %190, i64 4, !dbg !28
  %217 = insertelement <8 x i32> %216, i32 %191, i64 5, !dbg !28
  %218 = insertelement <8 x i32> %217, i32 %192, i64 6, !dbg !28
  %219 = insertelement <8 x i32> %218, i32 %193, i64 7, !dbg !28
  %220 = bitcast <8 x i32> %219 to <8 x float>, !dbg !28
  %221 = insertelement <8 x i32> poison, i32 %194, i64 0, !dbg !26
  %222 = insertelement <8 x i32> %221, i32 %195, i64 1, !dbg !26
  %223 = insertelement <8 x i32> %222, i32 %196, i64 2, !dbg !26
  %224 = insertelement <8 x i32> %223, i32 %197, i64 3, !dbg !26
  %225 = insertelement <8 x i32> %224, i32 %198, i64 4, !dbg !26
  %226 = insertelement <8 x i32> %225, i32 %199, i64 5, !dbg !26
  %227 = insertelement <8 x i32> %226, i32 %200, i64 6, !dbg !26
  %228 = insertelement <8 x i32> %227, i32 %201, i64 7, !dbg !26
  %229 = bitcast <8 x i32> %228 to <8 x float>, !dbg !26
  %230 = insertelement <8 x float> poison, float %.0.i20, i64 0, !dbg !33
  %231 = insertelement <8 x float> %230, float %.0.i17, i64 1, !dbg !33
  %232 = insertelement <8 x float> %231, float %.0.i14, i64 2, !dbg !33
  %233 = insertelement <8 x float> %232, float %.0.i11, i64 3, !dbg !33
  %234 = insertelement <8 x float> %233, float %.0.i8, i64 4, !dbg !33
  %235 = insertelement <8 x float> %234, float %.0.i5, i64 5, !dbg !33
  %236 = insertelement <8 x float> %235, float %.0.i2, i64 6, !dbg !33
  %237 = insertelement <8 x float> %236, float %.0.i, i64 7, !dbg !33
  %238 = fmul <8 x float> %211, %237, !dbg !33
  %239 = fmul <8 x float> %238, %229, !dbg !34
  %240 = fadd <8 x float> %239, %220, !dbg !35
  %241 = fcmp olt <8 x float> %240, zeroinitializer, !dbg !36
  %242 = extractelement <8 x i1> %241, i64 7, !dbg !40
  %243 = extractelement <8 x i1> %241, i64 6, !dbg !40
  %244 = extractelement <8 x i1> %241, i64 5, !dbg !40
  %245 = extractelement <8 x i1> %241, i64 4, !dbg !40
  %246 = extractelement <8 x i1> %241, i64 3, !dbg !40
  %247 = extractelement <8 x i1> %241, i64 2, !dbg !40
  %248 = extractelement <8 x i1> %241, i64 1, !dbg !40
  %249 = extractelement <8 x i1> %241, i64 0, !dbg !40
  %250 = getelementptr float, ptr addrspace(1) %5, i64 %31, !dbg !41
  %251 = getelementptr float, ptr addrspace(1) %5, i64 %33, !dbg !41
  %bc = bitcast <8 x float> %240 to <8 x i32>, !dbg !42
  %252 = extractelement <8 x i32> %bc, i64 7, !dbg !42
  %253 = select i1 %242, i32 0, i32 %252, !dbg !40
  %bc36 = bitcast <8 x float> %240 to <8 x i32>, !dbg !42
  %254 = extractelement <8 x i32> %bc36, i64 6, !dbg !42
  %255 = select i1 %243, i32 0, i32 %254, !dbg !40
  %bc37 = bitcast <8 x float> %240 to <8 x i32>, !dbg !42
  %256 = extractelement <8 x i32> %bc37, i64 5, !dbg !42
  %257 = select i1 %244, i32 0, i32 %256, !dbg !40
  %bc38 = bitcast <8 x float> %240 to <8 x i32>, !dbg !42
  %258 = extractelement <8 x i32> %bc38, i64 4, !dbg !42
  %259 = select i1 %245, i32 0, i32 %258, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %253, i32 %255, i32 %257, i32 %259, ptr addrspace(1) %250, i1 true) #3, !dbg !42
  %bc39 = bitcast <8 x float> %240 to <8 x i32>, !dbg !42
  %260 = extractelement <8 x i32> %bc39, i64 3, !dbg !42
  %261 = select i1 %246, i32 0, i32 %260, !dbg !40
  %bc40 = bitcast <8 x float> %240 to <8 x i32>, !dbg !42
  %262 = extractelement <8 x i32> %bc40, i64 2, !dbg !42
  %263 = select i1 %247, i32 0, i32 %262, !dbg !40
  %bc41 = bitcast <8 x float> %240 to <8 x i32>, !dbg !42
  %264 = extractelement <8 x i32> %bc41, i64 1, !dbg !42
  %265 = select i1 %248, i32 0, i32 %264, !dbg !40
  %bc42 = bitcast <8 x float> %240 to <8 x i32>, !dbg !42
  %266 = extractelement <8 x i32> %bc42, i64 0, !dbg !42
  %267 = select i1 %249, i32 0, i32 %266, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %261, i32 %263, i32 %265, i32 %267, ptr addrspace(1) %251, i1 true) #3, !dbg !42
  ret void, !dbg !43
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cqbbngpmmu2ktlg47u4fulkai2zr5enjtf2sj7pwlpwjj5wn7ixu.py", directory: "inductor_cache/qb")
!4 = !{ptr @triton_poi_fused_native_group_norm_relu_23, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_native_group_norm_relu_23, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_native_group_norm_relu_23", linkageName: "triton_poi_fused_native_group_norm_relu_23", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 19, scope: !7)
!16 = !DILocation(line: 27, column: 30, scope: !7)
!17 = !DILocation(line: 27, column: 35, scope: !7)
!18 = !DILocation(line: 28, column: 33, scope: !7)
!19 = !DILocation(line: 28, column: 45, scope: !7)
!20 = !DILocation(line: 28, column: 39, scope: !7)
!21 = !DILocation(line: 28, column: 30, scope: !7)
!22 = !DILocation(line: 28, column: 51, scope: !7)
!23 = !DILocation(line: 29, column: 30, scope: !7)
!24 = !DILocation(line: 29, column: 51, scope: !7)
!25 = !DILocation(line: 30, column: 31, scope: !7)
!26 = !DILocation(line: 30, column: 36, scope: !7)
!27 = !DILocation(line: 31, column: 31, scope: !7)
!28 = !DILocation(line: 31, column: 36, scope: !7)
!29 = !DILocation(line: 34, column: 18, scope: !7)
!30 = !DILocation(line: 36, column: 18, scope: !7)
!31 = !DILocation(line: 37, column: 27, scope: !7)
!32 = !DILocation(line: 32, column: 18, scope: !7)
!33 = !DILocation(line: 38, column: 18, scope: !7)
!34 = !DILocation(line: 39, column: 19, scope: !7)
!35 = !DILocation(line: 40, column: 20, scope: !7)
!36 = !DILocation(line: 118, column: 15, scope: !37, inlinedAt: !39)
!37 = distinct !DILexicalBlockFile(scope: !7, file: !38, discriminator: 0)
!38 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!39 = !DILocation(line: 42, column: 42, scope: !7)
!40 = !DILocation(line: 121, column: 29, scope: !37, inlinedAt: !39)
!41 = !DILocation(line: 43, column: 25, scope: !7)
!42 = !DILocation(line: 43, column: 37, scope: !7)
!43 = !DILocation(line: 43, column: 4, scope: !7)
