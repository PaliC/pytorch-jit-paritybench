; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_cat_26(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, i32 %14) local_unnamed_addr !dbg !7 {
  %16 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %17 = shl i32 %16, 7, !dbg !11
  %18 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %19 = and i32 %18, 127, !dbg !12
  %20 = or disjoint i32 %17, %19, !dbg !13
  %21 = icmp slt i32 %20, 2048, !dbg !14
  %.frozen1 = freeze i32 %20, !dbg !15
  %22 = sdiv i32 %.frozen1, 16, !dbg !15
  %23 = srem i32 %22, 32, !dbg !16
  %.frozen = freeze i32 %20, !dbg !17
  %24 = sdiv i32 %.frozen, 512, !dbg !17
  %25 = icmp slt i32 %23, 16, !dbg !18
  %26 = mul i32 %24, 512, !dbg !19
  %srem.decomposed = sub i32 %.frozen, %26, !dbg !19
  %27 = shl nsw i32 %24, 8, !dbg !20
  %28 = add nsw i32 %27, %srem.decomposed, !dbg !21
  %29 = sext i32 %28 to i64, !dbg !22
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !22
  %31 = and i1 %21, %25, !dbg !23
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %30, i1 %31, i32 0, i1 %31) #3, !dbg !24
  %33 = sext i32 %23 to i64, !dbg !25
  %34 = getelementptr float, ptr addrspace(1) %1, i64 %33, !dbg !25
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %34, i1 %31, i32 0, i1 %31) #3, !dbg !26
  %36 = getelementptr float, ptr addrspace(1) %2, i64 %33, !dbg !27
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %36, i1 %31, i32 0, i1 %31) #3, !dbg !28
  %38 = bitcast i32 %37 to float, !dbg !28
  %39 = fadd float %38, 0x3EE4F8B580000000, !dbg !29
  %40 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !30
  %.not.i = icmp eq i32 %40, 0, !dbg !30
  %41 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !30
  %.not1.i = icmp eq i32 %41, 0, !dbg !30
  br i1 %.not.i, label %47, label %42, !dbg !30

42:                                               ; preds = %15
  br i1 %.not1.i, label %45, label %43, !dbg !30

43:                                               ; preds = %42
  %44 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %39) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

45:                                               ; preds = %42
  %46 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %39) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

47:                                               ; preds = %15
  br i1 %.not1.i, label %50, label %48, !dbg !30

48:                                               ; preds = %47
  %49 = tail call float @llvm.nvvm.sqrt.rn.f(float %39) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

50:                                               ; preds = %47
  %51 = tail call float @llvm.nvvm.sqrt.approx.f(float %39) #3, !dbg !30
  br label %__nv_sqrtf.exit, !dbg !30

__nv_sqrtf.exit:                                  ; preds = %43, %45, %48, %50
  %.0.i = phi float [ %44, %43 ], [ %46, %45 ], [ %49, %48 ], [ %51, %50 ], !dbg !30
  %52 = bitcast i32 %32 to float, !dbg !24
  %53 = bitcast i32 %35 to float, !dbg !26
  %54 = fsub float %52, %53, !dbg !31
  %55 = mul i32 %22, 16, !dbg !32
  %.decomposed = sub i32 %.frozen1, %55, !dbg !32
  %56 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !33
  %57 = fmul float %54, %56, !dbg !34
  %58 = getelementptr float, ptr addrspace(1) %3, i64 %33, !dbg !35
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %58, i1 %31, i32 0, i1 %31) #3, !dbg !36
  %60 = bitcast i32 %59 to float, !dbg !36
  %61 = fmul float %57, %60, !dbg !37
  %62 = getelementptr float, ptr addrspace(1) %4, i64 %33, !dbg !38
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %62, i1 %31, i32 0, i1 %31) #3, !dbg !39
  %64 = bitcast i32 %63 to float, !dbg !39
  %65 = fadd float %61, %64, !dbg !40
  %66 = fcmp olt float %65, 0.000000e+00, !dbg !41
  %67 = select i1 %66, float 0.000000e+00, float %65, !dbg !45
  %68 = and i32 %23, -4, !dbg !46
  %69 = icmp eq i32 %68, 16, !dbg !46
  %70 = add nsw i32 %23, -16, !dbg !47
  %71 = shl nsw i32 %70, 4, !dbg !48
  %72 = shl nsw i32 %24, 6, !dbg !49
  %73 = add nsw i32 %72, %.decomposed, !dbg !50
  %74 = add nsw i32 %73, %71, !dbg !51
  %75 = sext i32 %74 to i64, !dbg !52
  %76 = getelementptr float, ptr addrspace(1) %5, i64 %75, !dbg !52
  %77 = and i1 %21, %69, !dbg !53
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %76, i1 %77, i32 0, i1 %77) #3, !dbg !54
  %79 = bitcast i32 %78 to float, !dbg !54
  %80 = sext i32 %70 to i64, !dbg !55
  %81 = getelementptr float, ptr addrspace(1) %6, i64 %80, !dbg !55
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %81, i1 %77, i32 0, i1 %77) #3, !dbg !56
  %83 = bitcast i32 %82 to float, !dbg !56
  %84 = fadd float %79, %83, !dbg !57
  %85 = icmp eq i32 %68, 20, !dbg !58
  %86 = add nsw i32 %23, -20, !dbg !59
  %87 = shl nsw i32 %86, 4, !dbg !60
  %88 = add nsw i32 %73, %87, !dbg !61
  %89 = sext i32 %88 to i64, !dbg !62
  %90 = getelementptr float, ptr addrspace(1) %7, i64 %89, !dbg !62
  %91 = and i1 %21, %85, !dbg !63
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %90, i1 %91, i32 0, i1 %91) #3, !dbg !64
  %93 = bitcast i32 %92 to float, !dbg !64
  %94 = sext i32 %86 to i64, !dbg !65
  %95 = getelementptr float, ptr addrspace(1) %8, i64 %94, !dbg !65
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %95, i1 %91, i32 0, i1 %91) #3, !dbg !66
  %97 = bitcast i32 %96 to float, !dbg !66
  %98 = fadd float %93, %97, !dbg !67
  %99 = icmp eq i32 %68, 24, !dbg !68
  %100 = add nsw i32 %23, -24, !dbg !69
  %101 = shl nsw i32 %100, 4, !dbg !70
  %102 = add nsw i32 %73, %101, !dbg !71
  %103 = sext i32 %102 to i64, !dbg !72
  %104 = getelementptr float, ptr addrspace(1) %9, i64 %103, !dbg !72
  %105 = and i1 %21, %99, !dbg !73
  %106 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %104, i1 %105, i32 0, i1 %105) #3, !dbg !74
  %107 = bitcast i32 %106 to float, !dbg !74
  %108 = sext i32 %100 to i64, !dbg !75
  %109 = getelementptr float, ptr addrspace(1) %10, i64 %108, !dbg !75
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %109, i1 %105, i32 0, i1 %105) #3, !dbg !76
  %111 = bitcast i32 %110 to float, !dbg !76
  %112 = fadd float %107, %111, !dbg !77
  %113 = icmp sgt i32 %23, 27, !dbg !78
  %114 = add nsw i32 %23, -28, !dbg !79
  %115 = shl nsw i32 %114, 4, !dbg !80
  %116 = add nsw i32 %73, %115, !dbg !81
  %117 = sext i32 %116 to i64, !dbg !82
  %118 = getelementptr float, ptr addrspace(1) %11, i64 %117, !dbg !82
  %119 = and i1 %21, %113, !dbg !83
  %120 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %118, i1 %119, i32 0, i1 %119) #3, !dbg !84
  %121 = bitcast i32 %120 to float, !dbg !84
  %122 = sext i32 %114 to i64, !dbg !85
  %123 = getelementptr float, ptr addrspace(1) %12, i64 %122, !dbg !85
  %124 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %123, i1 %119, i32 0, i1 %119) #3, !dbg !86
  %125 = bitcast i32 %124 to float, !dbg !86
  %126 = fadd float %121, %125, !dbg !87
  %127 = select i1 %113, float %126, float 0.000000e+00, !dbg !88
  %128 = select i1 %99, float %112, float %127, !dbg !89
  %129 = select i1 %85, float %98, float %128, !dbg !89
  %130 = select i1 %69, float %84, float %129, !dbg !89
  %131 = select i1 %25, float %67, float %130, !dbg !89
  %132 = sext i32 %20 to i64, !dbg !90
  %133 = getelementptr float, ptr addrspace(1) %13, i64 %132, !dbg !90
  %134 = bitcast float %131 to i32, !dbg !91
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %134, ptr addrspace(1) %133, i1 %21) #3, !dbg !91
  ret void, !dbg !92
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c6bqs7qf2wy2p6fewtbh2arnxbbxkvqzt56d3b5qm6mv3bki2iff.py", directory: "inductor_cache/6b")
!4 = !{ptr @triton_poi_fused_cat_26, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_26, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_26", linkageName: "triton_poi_fused_cat_26", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 27, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 32, column: 18, scope: !7)
!19 = !DILocation(line: 33, column: 35, scope: !7)
!20 = !DILocation(line: 33, column: 49, scope: !7)
!21 = !DILocation(line: 33, column: 45, scope: !7)
!22 = !DILocation(line: 33, column: 30, scope: !7)
!23 = !DILocation(line: 33, column: 61, scope: !7)
!24 = !DILocation(line: 33, column: 54, scope: !7)
!25 = !DILocation(line: 34, column: 30, scope: !7)
!26 = !DILocation(line: 34, column: 35, scope: !7)
!27 = !DILocation(line: 36, column: 30, scope: !7)
!28 = !DILocation(line: 36, column: 35, scope: !7)
!29 = !DILocation(line: 38, column: 19, scope: !7)
!30 = !DILocation(line: 39, column: 27, scope: !7)
!31 = !DILocation(line: 35, column: 18, scope: !7)
!32 = !DILocation(line: 25, column: 19, scope: !7)
!33 = !DILocation(line: 41, column: 20, scope: !7)
!34 = !DILocation(line: 44, column: 19, scope: !7)
!35 = !DILocation(line: 45, column: 31, scope: !7)
!36 = !DILocation(line: 45, column: 36, scope: !7)
!37 = !DILocation(line: 46, column: 20, scope: !7)
!38 = !DILocation(line: 47, column: 31, scope: !7)
!39 = !DILocation(line: 47, column: 36, scope: !7)
!40 = !DILocation(line: 48, column: 20, scope: !7)
!41 = !DILocation(line: 118, column: 15, scope: !42, inlinedAt: !44)
!42 = distinct !DILexicalBlockFile(scope: !7, file: !43, discriminator: 0)
!43 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!44 = !DILocation(line: 50, column: 42, scope: !7)
!45 = !DILocation(line: 121, column: 29, scope: !42, inlinedAt: !44)
!46 = !DILocation(line: 56, column: 20, scope: !7)
!47 = !DILocation(line: 57, column: 48, scope: !7)
!48 = !DILocation(line: 57, column: 40, scope: !7)
!49 = !DILocation(line: 57, column: 57, scope: !7)
!50 = !DILocation(line: 57, column: 36, scope: !7)
!51 = !DILocation(line: 57, column: 54, scope: !7)
!52 = !DILocation(line: 57, column: 31, scope: !7)
!53 = !DILocation(line: 57, column: 70, scope: !7)
!54 = !DILocation(line: 57, column: 62, scope: !7)
!55 = !DILocation(line: 58, column: 31, scope: !7)
!56 = !DILocation(line: 58, column: 44, scope: !7)
!57 = !DILocation(line: 59, column: 20, scope: !7)
!58 = !DILocation(line: 65, column: 20, scope: !7)
!59 = !DILocation(line: 66, column: 48, scope: !7)
!60 = !DILocation(line: 66, column: 40, scope: !7)
!61 = !DILocation(line: 66, column: 54, scope: !7)
!62 = !DILocation(line: 66, column: 31, scope: !7)
!63 = !DILocation(line: 66, column: 70, scope: !7)
!64 = !DILocation(line: 66, column: 62, scope: !7)
!65 = !DILocation(line: 67, column: 31, scope: !7)
!66 = !DILocation(line: 67, column: 44, scope: !7)
!67 = !DILocation(line: 68, column: 20, scope: !7)
!68 = !DILocation(line: 74, column: 20, scope: !7)
!69 = !DILocation(line: 75, column: 48, scope: !7)
!70 = !DILocation(line: 75, column: 40, scope: !7)
!71 = !DILocation(line: 75, column: 54, scope: !7)
!72 = !DILocation(line: 75, column: 31, scope: !7)
!73 = !DILocation(line: 75, column: 70, scope: !7)
!74 = !DILocation(line: 75, column: 62, scope: !7)
!75 = !DILocation(line: 76, column: 32, scope: !7)
!76 = !DILocation(line: 76, column: 45, scope: !7)
!77 = !DILocation(line: 77, column: 20, scope: !7)
!78 = !DILocation(line: 80, column: 20, scope: !7)
!79 = !DILocation(line: 83, column: 49, scope: !7)
!80 = !DILocation(line: 83, column: 41, scope: !7)
!81 = !DILocation(line: 83, column: 55, scope: !7)
!82 = !DILocation(line: 83, column: 32, scope: !7)
!83 = !DILocation(line: 83, column: 71, scope: !7)
!84 = !DILocation(line: 83, column: 63, scope: !7)
!85 = !DILocation(line: 84, column: 32, scope: !7)
!86 = !DILocation(line: 84, column: 45, scope: !7)
!87 = !DILocation(line: 85, column: 20, scope: !7)
!88 = !DILocation(line: 87, column: 35, scope: !7)
!89 = !DILocation(line: 0, scope: !7)
!90 = !DILocation(line: 92, column: 25, scope: !7)
!91 = !DILocation(line: 92, column: 37, scope: !7)
!92 = !DILocation(line: 92, column: 4, scope: !7)
