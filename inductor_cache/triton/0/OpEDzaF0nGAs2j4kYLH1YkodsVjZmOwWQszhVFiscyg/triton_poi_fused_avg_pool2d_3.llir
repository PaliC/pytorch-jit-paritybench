; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_avg_pool2d_3(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 10, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 2, !dbg !12
  %8 = and i32 %7, 508, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = or disjoint i32 %9, 512, !dbg !13
  %11 = add i32 %9, -8320, !dbg !14
  %12 = add i32 %9, -7808, !dbg !14
  %13 = sext i32 %11 to i64, !dbg !15
  %14 = getelementptr float, ptr addrspace(1) %0, i64 %13, !dbg !15
  %15 = sext i32 %12 to i64, !dbg !15
  %16 = getelementptr float, ptr addrspace(1) %0, i64 %15, !dbg !15
  %17 = add i32 %9, -8192, !dbg !16
  %18 = add i32 %9, -7680, !dbg !16
  %19 = sext i32 %17 to i64, !dbg !17
  %20 = getelementptr float, ptr addrspace(1) %0, i64 %19, !dbg !17
  %21 = sext i32 %18 to i64, !dbg !17
  %22 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !17
  %23 = add i32 %9, -8064, !dbg !18
  %24 = add i32 %9, -7552, !dbg !18
  %25 = sext i32 %23 to i64, !dbg !19
  %26 = getelementptr float, ptr addrspace(1) %0, i64 %25, !dbg !19
  %27 = sext i32 %24 to i64, !dbg !19
  %28 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !19
  %29 = add i32 %9, -128, !dbg !20
  %30 = sext i32 %29 to i64, !dbg !21
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !21
  %32 = sext i32 %10 to i64, !dbg !21
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !21
  %34 = getelementptr i8, ptr addrspace(1) %33, i64 -512, !dbg !21
  %35 = sext i32 %9 to i64, !dbg !22
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !22
  %37 = add i32 %9, 640, !dbg !23
  %38 = getelementptr i8, ptr addrspace(1) %36, i64 512, !dbg !24
  %39 = sext i32 %37 to i64, !dbg !24
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !24
  %41 = add i32 %9, 8064, !dbg !25
  %42 = add i32 %9, 8576, !dbg !25
  %43 = sext i32 %41 to i64, !dbg !26
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !26
  %45 = sext i32 %42 to i64, !dbg !26
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !26
  %47 = add i32 %9, 8192, !dbg !27
  %48 = add i32 %9, 8704, !dbg !27
  %49 = sext i32 %47 to i64, !dbg !28
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !28
  %51 = sext i32 %48 to i64, !dbg !28
  %52 = getelementptr float, ptr addrspace(1) %0, i64 %51, !dbg !28
  %53 = add i32 %9, 8320, !dbg !29
  %54 = add i32 %9, 8832, !dbg !29
  %55 = sext i32 %53 to i64, !dbg !30
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !30
  %57 = sext i32 %54 to i64, !dbg !30
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !30
  %59 = insertelement <2 x i32> poison, i32 %9, i64 0, !dbg !31
  %60 = shufflevector <2 x i32> %59, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !31
  %61 = sdiv <2 x i32> %60, <i32 128, i32 8192>, !dbg !31
  %62 = srem <2 x i32> %61, splat (i32 64), !dbg !32
  %63 = extractelement <2 x i32> %62, i64 1, !dbg !33
  %64 = icmp sgt i32 %63, 0, !dbg !34
  %65 = extractelement <2 x i32> %62, i64 0, !dbg !33
  %66 = icmp sgt i32 %65, 0, !dbg !35
  %67 = and i1 %64, %66, !dbg !36
  %68 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %14, i1 %67, i32 0, i1 %67, i32 0, i1 %67, i32 0, i1 %67, i32 0, i1 %67) #1, !dbg !37
  %69 = extractvalue { i32, i32, i32, i32 } %68, 0, !dbg !37
  %70 = extractvalue { i32, i32, i32, i32 } %68, 1, !dbg !37
  %71 = extractvalue { i32, i32, i32, i32 } %68, 2, !dbg !37
  %72 = extractvalue { i32, i32, i32, i32 } %68, 3, !dbg !37
  %73 = bitcast i32 %69 to float, !dbg !37
  %74 = bitcast i32 %70 to float, !dbg !37
  %75 = bitcast i32 %71 to float, !dbg !37
  %76 = bitcast i32 %72 to float, !dbg !37
  %77 = icmp sgt i32 %65, -1, !dbg !38
  %78 = and i1 %64, %77, !dbg !39
  %79 = add nsw i32 %65, 1, !dbg !40
  %80 = icmp ult i32 %79, 64, !dbg !40
  %81 = and i1 %64, %80, !dbg !41
  %82 = icmp sgt i32 %63, -1, !dbg !42
  %83 = and i1 %82, %66, !dbg !43
  %84 = or i32 %63, %65, !dbg !44
  %85 = icmp sgt i32 %84, -1, !dbg !44
  %86 = and i1 %82, %80, !dbg !45
  %87 = add nsw i32 %63, 1, !dbg !46
  %88 = icmp ult i32 %87, 64, !dbg !46
  %89 = and i1 %66, %88, !dbg !47
  %90 = and i1 %77, %88, !dbg !48
  %91 = or i32 %87, %79, !dbg !49
  %92 = icmp ult i32 %91, 64, !dbg !49
  %93 = mul nsw i32 %65, %63, !dbg !50
  %94 = add nsw <2 x i32> %62, splat (i32 2), !dbg !51
  %95 = icmp sgt <2 x i32> %62, splat (i32 62), !dbg !52
  %96 = select <2 x i1> %95, <2 x i32> splat (i32 65), <2 x i32> zeroinitializer, !dbg !53
  %97 = icmp slt <2 x i32> %62, splat (i32 63), !dbg !54
  %98 = select <2 x i1> %97, <2 x i32> %94, <2 x i32> zeroinitializer, !dbg !55
  %99 = add nsw <2 x i32> %96, %98, !dbg !56
  %100 = extractelement <2 x i32> %99, i64 0, !dbg !57
  %101 = extractelement <2 x i32> %99, i64 1, !dbg !58
  %102 = mul nsw i32 %100, %101, !dbg !59
  %103 = shufflevector <2 x i32> %62, <2 x i32> poison, <2 x i32> <i32 1, i32 0>, !dbg !58
  %104 = mul nsw <2 x i32> %99, %103, !dbg !58
  %105 = insertelement <2 x i32> poison, i32 %10, i64 0, !dbg !31
  %106 = shufflevector <2 x i32> %105, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !31
  %107 = sdiv <2 x i32> %106, <i32 128, i32 8192>, !dbg !31
  %108 = srem <2 x i32> %107, splat (i32 64), !dbg !32
  %109 = extractelement <2 x i32> %108, i64 1, !dbg !33
  %110 = icmp sgt i32 %109, 0, !dbg !34
  %111 = extractelement <2 x i32> %108, i64 0, !dbg !33
  %112 = icmp sgt i32 %111, 0, !dbg !35
  %113 = and i1 %110, %112, !dbg !36
  %114 = icmp sgt i32 %111, -1, !dbg !38
  %115 = and i1 %110, %114, !dbg !39
  %116 = add nsw i32 %111, 1, !dbg !40
  %117 = icmp ult i32 %116, 64, !dbg !40
  %118 = and i1 %110, %117, !dbg !41
  %119 = icmp sgt i32 %109, -1, !dbg !42
  %120 = and i1 %119, %112, !dbg !43
  %121 = or i32 %109, %111, !dbg !44
  %122 = icmp sgt i32 %121, -1, !dbg !44
  %123 = and i1 %119, %117, !dbg !45
  %124 = add nsw i32 %109, 1, !dbg !46
  %125 = icmp ult i32 %124, 64, !dbg !46
  %126 = and i1 %112, %125, !dbg !47
  %127 = and i1 %114, %125, !dbg !48
  %128 = or i32 %124, %116, !dbg !49
  %129 = icmp ult i32 %128, 64, !dbg !49
  %130 = mul nsw i32 %111, %109, !dbg !50
  %131 = add nsw <2 x i32> %108, splat (i32 2), !dbg !51
  %132 = icmp sgt <2 x i32> %108, splat (i32 62), !dbg !52
  %133 = select <2 x i1> %132, <2 x i32> splat (i32 65), <2 x i32> zeroinitializer, !dbg !53
  %134 = icmp slt <2 x i32> %108, splat (i32 63), !dbg !54
  %135 = select <2 x i1> %134, <2 x i32> %131, <2 x i32> zeroinitializer, !dbg !55
  %136 = add nsw <2 x i32> %133, %135, !dbg !56
  %137 = extractelement <2 x i32> %136, i64 0, !dbg !57
  %138 = extractelement <2 x i32> %136, i64 1, !dbg !58
  %139 = mul nsw i32 %137, %138, !dbg !59
  %140 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %16, i1 %113, i32 0, i1 %113, i32 0, i1 %113, i32 0, i1 %113, i32 0, i1 %113) #1, !dbg !37
  %141 = extractvalue { i32, i32, i32, i32 } %140, 0, !dbg !37
  %142 = extractvalue { i32, i32, i32, i32 } %140, 1, !dbg !37
  %143 = extractvalue { i32, i32, i32, i32 } %140, 2, !dbg !37
  %144 = extractvalue { i32, i32, i32, i32 } %140, 3, !dbg !37
  %145 = bitcast i32 %141 to float, !dbg !37
  %146 = bitcast i32 %142 to float, !dbg !37
  %147 = bitcast i32 %143 to float, !dbg !37
  %148 = bitcast i32 %144 to float, !dbg !37
  %149 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %20, i1 %78, i32 0, i1 %78, i32 0, i1 %78, i32 0, i1 %78, i32 0, i1 %78) #1, !dbg !60
  %150 = extractvalue { i32, i32, i32, i32 } %149, 0, !dbg !60
  %151 = extractvalue { i32, i32, i32, i32 } %149, 1, !dbg !60
  %152 = extractvalue { i32, i32, i32, i32 } %149, 2, !dbg !60
  %153 = extractvalue { i32, i32, i32, i32 } %149, 3, !dbg !60
  %154 = bitcast i32 %150 to float, !dbg !60
  %155 = bitcast i32 %151 to float, !dbg !60
  %156 = bitcast i32 %152 to float, !dbg !60
  %157 = bitcast i32 %153 to float, !dbg !60
  %158 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %22, i1 %115, i32 0, i1 %115, i32 0, i1 %115, i32 0, i1 %115, i32 0, i1 %115) #1, !dbg !60
  %159 = extractvalue { i32, i32, i32, i32 } %158, 0, !dbg !60
  %160 = extractvalue { i32, i32, i32, i32 } %158, 1, !dbg !60
  %161 = extractvalue { i32, i32, i32, i32 } %158, 2, !dbg !60
  %162 = extractvalue { i32, i32, i32, i32 } %158, 3, !dbg !60
  %163 = bitcast i32 %159 to float, !dbg !60
  %164 = bitcast i32 %160 to float, !dbg !60
  %165 = bitcast i32 %161 to float, !dbg !60
  %166 = bitcast i32 %162 to float, !dbg !60
  %167 = fadd float %73, %154, !dbg !61
  %168 = fadd float %74, %155, !dbg !61
  %169 = fadd float %75, %156, !dbg !61
  %170 = fadd float %76, %157, !dbg !61
  %171 = fadd float %145, %163, !dbg !61
  %172 = fadd float %146, %164, !dbg !61
  %173 = fadd float %147, %165, !dbg !61
  %174 = fadd float %148, %166, !dbg !61
  %175 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %26, i1 %81, i32 0, i1 %81, i32 0, i1 %81, i32 0, i1 %81, i32 0, i1 %81) #1, !dbg !62
  %176 = extractvalue { i32, i32, i32, i32 } %175, 0, !dbg !62
  %177 = extractvalue { i32, i32, i32, i32 } %175, 1, !dbg !62
  %178 = extractvalue { i32, i32, i32, i32 } %175, 2, !dbg !62
  %179 = extractvalue { i32, i32, i32, i32 } %175, 3, !dbg !62
  %180 = bitcast i32 %176 to float, !dbg !62
  %181 = bitcast i32 %177 to float, !dbg !62
  %182 = bitcast i32 %178 to float, !dbg !62
  %183 = bitcast i32 %179 to float, !dbg !62
  %184 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %28, i1 %118, i32 0, i1 %118, i32 0, i1 %118, i32 0, i1 %118, i32 0, i1 %118) #1, !dbg !62
  %185 = extractvalue { i32, i32, i32, i32 } %184, 0, !dbg !62
  %186 = extractvalue { i32, i32, i32, i32 } %184, 1, !dbg !62
  %187 = extractvalue { i32, i32, i32, i32 } %184, 2, !dbg !62
  %188 = extractvalue { i32, i32, i32, i32 } %184, 3, !dbg !62
  %189 = bitcast i32 %185 to float, !dbg !62
  %190 = bitcast i32 %186 to float, !dbg !62
  %191 = bitcast i32 %187 to float, !dbg !62
  %192 = bitcast i32 %188 to float, !dbg !62
  %193 = fadd float %167, %180, !dbg !63
  %194 = fadd float %168, %181, !dbg !63
  %195 = fadd float %169, %182, !dbg !63
  %196 = fadd float %170, %183, !dbg !63
  %197 = fadd float %171, %189, !dbg !63
  %198 = fadd float %172, %190, !dbg !63
  %199 = fadd float %173, %191, !dbg !63
  %200 = fadd float %174, %192, !dbg !63
  %201 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %31, i1 %83, i32 0, i1 %83, i32 0, i1 %83, i32 0, i1 %83, i32 0, i1 %83) #1, !dbg !64
  %202 = extractvalue { i32, i32, i32, i32 } %201, 0, !dbg !64
  %203 = extractvalue { i32, i32, i32, i32 } %201, 1, !dbg !64
  %204 = extractvalue { i32, i32, i32, i32 } %201, 2, !dbg !64
  %205 = extractvalue { i32, i32, i32, i32 } %201, 3, !dbg !64
  %206 = bitcast i32 %202 to float, !dbg !64
  %207 = bitcast i32 %203 to float, !dbg !64
  %208 = bitcast i32 %204 to float, !dbg !64
  %209 = bitcast i32 %205 to float, !dbg !64
  %210 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %34, i1 %120, i32 0, i1 %120, i32 0, i1 %120, i32 0, i1 %120, i32 0, i1 %120) #1, !dbg !64
  %211 = extractvalue { i32, i32, i32, i32 } %210, 0, !dbg !64
  %212 = extractvalue { i32, i32, i32, i32 } %210, 1, !dbg !64
  %213 = extractvalue { i32, i32, i32, i32 } %210, 2, !dbg !64
  %214 = extractvalue { i32, i32, i32, i32 } %210, 3, !dbg !64
  %215 = bitcast i32 %211 to float, !dbg !64
  %216 = bitcast i32 %212 to float, !dbg !64
  %217 = bitcast i32 %213 to float, !dbg !64
  %218 = bitcast i32 %214 to float, !dbg !64
  %219 = fadd float %193, %206, !dbg !65
  %220 = fadd float %194, %207, !dbg !65
  %221 = fadd float %195, %208, !dbg !65
  %222 = fadd float %196, %209, !dbg !65
  %223 = fadd float %197, %215, !dbg !65
  %224 = fadd float %198, %216, !dbg !65
  %225 = fadd float %199, %217, !dbg !65
  %226 = fadd float %200, %218, !dbg !65
  %227 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %36, i1 %85, i32 0, i1 %85, i32 0, i1 %85, i32 0, i1 %85, i32 0, i1 %85) #1, !dbg !66
  %228 = extractvalue { i32, i32, i32, i32 } %227, 0, !dbg !66
  %229 = extractvalue { i32, i32, i32, i32 } %227, 1, !dbg !66
  %230 = extractvalue { i32, i32, i32, i32 } %227, 2, !dbg !66
  %231 = extractvalue { i32, i32, i32, i32 } %227, 3, !dbg !66
  %232 = bitcast i32 %228 to float, !dbg !66
  %233 = bitcast i32 %229 to float, !dbg !66
  %234 = bitcast i32 %230 to float, !dbg !66
  %235 = bitcast i32 %231 to float, !dbg !66
  %236 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %33, i1 %122, i32 0, i1 %122, i32 0, i1 %122, i32 0, i1 %122, i32 0, i1 %122) #1, !dbg !66
  %237 = extractvalue { i32, i32, i32, i32 } %236, 0, !dbg !66
  %238 = extractvalue { i32, i32, i32, i32 } %236, 1, !dbg !66
  %239 = extractvalue { i32, i32, i32, i32 } %236, 2, !dbg !66
  %240 = extractvalue { i32, i32, i32, i32 } %236, 3, !dbg !66
  %241 = bitcast i32 %237 to float, !dbg !66
  %242 = bitcast i32 %238 to float, !dbg !66
  %243 = bitcast i32 %239 to float, !dbg !66
  %244 = bitcast i32 %240 to float, !dbg !66
  %245 = fadd float %219, %232, !dbg !67
  %246 = fadd float %220, %233, !dbg !67
  %247 = fadd float %221, %234, !dbg !67
  %248 = fadd float %222, %235, !dbg !67
  %249 = fadd float %223, %241, !dbg !67
  %250 = fadd float %224, %242, !dbg !67
  %251 = fadd float %225, %243, !dbg !67
  %252 = fadd float %226, %244, !dbg !67
  %253 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %38, i1 %86, i32 0, i1 %86, i32 0, i1 %86, i32 0, i1 %86, i32 0, i1 %86) #1, !dbg !68
  %254 = extractvalue { i32, i32, i32, i32 } %253, 0, !dbg !68
  %255 = extractvalue { i32, i32, i32, i32 } %253, 1, !dbg !68
  %256 = extractvalue { i32, i32, i32, i32 } %253, 2, !dbg !68
  %257 = extractvalue { i32, i32, i32, i32 } %253, 3, !dbg !68
  %258 = bitcast i32 %254 to float, !dbg !68
  %259 = bitcast i32 %255 to float, !dbg !68
  %260 = bitcast i32 %256 to float, !dbg !68
  %261 = bitcast i32 %257 to float, !dbg !68
  %262 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %40, i1 %123, i32 0, i1 %123, i32 0, i1 %123, i32 0, i1 %123, i32 0, i1 %123) #1, !dbg !68
  %263 = extractvalue { i32, i32, i32, i32 } %262, 0, !dbg !68
  %264 = extractvalue { i32, i32, i32, i32 } %262, 1, !dbg !68
  %265 = extractvalue { i32, i32, i32, i32 } %262, 2, !dbg !68
  %266 = extractvalue { i32, i32, i32, i32 } %262, 3, !dbg !68
  %267 = bitcast i32 %263 to float, !dbg !68
  %268 = bitcast i32 %264 to float, !dbg !68
  %269 = bitcast i32 %265 to float, !dbg !68
  %270 = bitcast i32 %266 to float, !dbg !68
  %271 = fadd float %245, %258, !dbg !69
  %272 = fadd float %246, %259, !dbg !69
  %273 = fadd float %247, %260, !dbg !69
  %274 = fadd float %248, %261, !dbg !69
  %275 = fadd float %249, %267, !dbg !69
  %276 = fadd float %250, %268, !dbg !69
  %277 = fadd float %251, %269, !dbg !69
  %278 = fadd float %252, %270, !dbg !69
  %279 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %44, i1 %89, i32 0, i1 %89, i32 0, i1 %89, i32 0, i1 %89, i32 0, i1 %89) #1, !dbg !70
  %280 = extractvalue { i32, i32, i32, i32 } %279, 0, !dbg !70
  %281 = extractvalue { i32, i32, i32, i32 } %279, 1, !dbg !70
  %282 = extractvalue { i32, i32, i32, i32 } %279, 2, !dbg !70
  %283 = extractvalue { i32, i32, i32, i32 } %279, 3, !dbg !70
  %284 = bitcast i32 %280 to float, !dbg !70
  %285 = bitcast i32 %281 to float, !dbg !70
  %286 = bitcast i32 %282 to float, !dbg !70
  %287 = bitcast i32 %283 to float, !dbg !70
  %288 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %46, i1 %126, i32 0, i1 %126, i32 0, i1 %126, i32 0, i1 %126, i32 0, i1 %126) #1, !dbg !70
  %289 = extractvalue { i32, i32, i32, i32 } %288, 0, !dbg !70
  %290 = extractvalue { i32, i32, i32, i32 } %288, 1, !dbg !70
  %291 = extractvalue { i32, i32, i32, i32 } %288, 2, !dbg !70
  %292 = extractvalue { i32, i32, i32, i32 } %288, 3, !dbg !70
  %293 = bitcast i32 %289 to float, !dbg !70
  %294 = bitcast i32 %290 to float, !dbg !70
  %295 = bitcast i32 %291 to float, !dbg !70
  %296 = bitcast i32 %292 to float, !dbg !70
  %297 = fadd float %271, %284, !dbg !71
  %298 = fadd float %272, %285, !dbg !71
  %299 = fadd float %273, %286, !dbg !71
  %300 = fadd float %274, %287, !dbg !71
  %301 = fadd float %275, %293, !dbg !71
  %302 = fadd float %276, %294, !dbg !71
  %303 = fadd float %277, %295, !dbg !71
  %304 = fadd float %278, %296, !dbg !71
  %305 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %50, i1 %90, i32 0, i1 %90, i32 0, i1 %90, i32 0, i1 %90, i32 0, i1 %90) #1, !dbg !72
  %306 = extractvalue { i32, i32, i32, i32 } %305, 0, !dbg !72
  %307 = extractvalue { i32, i32, i32, i32 } %305, 1, !dbg !72
  %308 = extractvalue { i32, i32, i32, i32 } %305, 2, !dbg !72
  %309 = extractvalue { i32, i32, i32, i32 } %305, 3, !dbg !72
  %310 = bitcast i32 %306 to float, !dbg !72
  %311 = bitcast i32 %307 to float, !dbg !72
  %312 = bitcast i32 %308 to float, !dbg !72
  %313 = bitcast i32 %309 to float, !dbg !72
  %314 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %52, i1 %127, i32 0, i1 %127, i32 0, i1 %127, i32 0, i1 %127, i32 0, i1 %127) #1, !dbg !72
  %315 = extractvalue { i32, i32, i32, i32 } %314, 0, !dbg !72
  %316 = extractvalue { i32, i32, i32, i32 } %314, 1, !dbg !72
  %317 = extractvalue { i32, i32, i32, i32 } %314, 2, !dbg !72
  %318 = extractvalue { i32, i32, i32, i32 } %314, 3, !dbg !72
  %319 = bitcast i32 %315 to float, !dbg !72
  %320 = bitcast i32 %316 to float, !dbg !72
  %321 = bitcast i32 %317 to float, !dbg !72
  %322 = bitcast i32 %318 to float, !dbg !72
  %323 = fadd float %297, %310, !dbg !73
  %324 = fadd float %298, %311, !dbg !73
  %325 = fadd float %299, %312, !dbg !73
  %326 = fadd float %300, %313, !dbg !73
  %327 = fadd float %301, %319, !dbg !73
  %328 = fadd float %302, %320, !dbg !73
  %329 = fadd float %303, %321, !dbg !73
  %330 = fadd float %304, %322, !dbg !73
  %331 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %56, i1 %92, i32 0, i1 %92, i32 0, i1 %92, i32 0, i1 %92, i32 0, i1 %92) #1, !dbg !74
  %332 = extractvalue { i32, i32, i32, i32 } %331, 0, !dbg !74
  %333 = extractvalue { i32, i32, i32, i32 } %331, 1, !dbg !74
  %334 = extractvalue { i32, i32, i32, i32 } %331, 2, !dbg !74
  %335 = extractvalue { i32, i32, i32, i32 } %331, 3, !dbg !74
  %336 = bitcast i32 %332 to float, !dbg !74
  %337 = bitcast i32 %333 to float, !dbg !74
  %338 = bitcast i32 %334 to float, !dbg !74
  %339 = bitcast i32 %335 to float, !dbg !74
  %340 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %58, i1 %129, i32 0, i1 %129, i32 0, i1 %129, i32 0, i1 %129, i32 0, i1 %129) #1, !dbg !74
  %341 = extractvalue { i32, i32, i32, i32 } %340, 0, !dbg !74
  %342 = extractvalue { i32, i32, i32, i32 } %340, 1, !dbg !74
  %343 = extractvalue { i32, i32, i32, i32 } %340, 2, !dbg !74
  %344 = extractvalue { i32, i32, i32, i32 } %340, 3, !dbg !74
  %345 = bitcast i32 %341 to float, !dbg !74
  %346 = bitcast i32 %342 to float, !dbg !74
  %347 = bitcast i32 %343 to float, !dbg !74
  %348 = bitcast i32 %344 to float, !dbg !74
  %349 = fadd float %323, %336, !dbg !75
  %350 = fadd float %324, %337, !dbg !75
  %351 = fadd float %325, %338, !dbg !75
  %352 = fadd float %326, %339, !dbg !75
  %353 = fadd float %327, %345, !dbg !75
  %354 = fadd float %328, %346, !dbg !75
  %355 = fadd float %329, %347, !dbg !75
  %356 = fadd float %330, %348, !dbg !75
  %357 = shufflevector <2 x i32> %108, <2 x i32> poison, <2 x i32> <i32 1, i32 0>, !dbg !58
  %358 = mul nsw <2 x i32> %136, %357, !dbg !58
  %shift = shufflevector <2 x i32> %104, <2 x i32> poison, <2 x i32> <i32 1, i32 poison>
  %359 = add nsw <2 x i32> %shift, %104
  %reass.add = extractelement <2 x i32> %359, i64 0
  %360 = add nsw i32 %63, %65, !dbg !33
  %reass.sub15 = sub nsw i32 %93, %360, !dbg !33
  %361 = add nsw i32 %reass.sub15, 1, !dbg !33
  %362 = add nsw i32 %361, %100, !dbg !57
  %363 = add nsw i32 %362, %101, !dbg !58
  %364 = add nsw i32 %363, %102, !dbg !76
  %365 = sub nsw i32 %364, %reass.add, !dbg !77
  %shift16 = shufflevector <2 x i32> %358, <2 x i32> poison, <2 x i32> <i32 1, i32 poison>
  %366 = add nsw <2 x i32> %shift16, %358
  %reass.add13 = extractelement <2 x i32> %366, i64 0
  %367 = add nsw i32 %109, %111, !dbg !33
  %reass.sub = sub nsw i32 %130, %367, !dbg !33
  %368 = add nsw i32 %reass.sub, 1, !dbg !33
  %369 = add nsw i32 %368, %137, !dbg !57
  %370 = add nsw i32 %369, %138, !dbg !58
  %371 = add nsw i32 %370, %139, !dbg !76
  %372 = sub nsw i32 %371, %reass.add13, !dbg !77
  %373 = sitofp i32 %365 to float, !dbg !78
  %374 = sitofp i32 %372 to float, !dbg !78
  %375 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %349, float %373) #1, !dbg !78
  %376 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %350, float %373) #1, !dbg !78
  %377 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %351, float %373) #1, !dbg !78
  %378 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %352, float %373) #1, !dbg !78
  %379 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %353, float %374) #1, !dbg !78
  %380 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %354, float %374) #1, !dbg !78
  %381 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %355, float %374) #1, !dbg !78
  %382 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %356, float %374) #1, !dbg !78
  %383 = getelementptr float, ptr addrspace(1) %1, i64 %35, !dbg !79
  %384 = getelementptr float, ptr addrspace(1) %1, i64 %32, !dbg !79
  %385 = bitcast float %375 to i32, !dbg !80
  %386 = bitcast float %376 to i32, !dbg !80
  %387 = bitcast float %377 to i32, !dbg !80
  %388 = bitcast float %378 to i32, !dbg !80
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %385, i32 %386, i32 %387, i32 %388, ptr addrspace(1) %383, i1 true) #1, !dbg !80
  %389 = bitcast float %379 to i32, !dbg !80
  %390 = bitcast float %380 to i32, !dbg !80
  %391 = bitcast float %381 to i32, !dbg !80
  %392 = bitcast float %382 to i32, !dbg !80
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %389, i32 %390, i32 %391, i32 %392, ptr addrspace(1) %384, i1 true) #1, !dbg !80
  ret void, !dbg !81
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c2xo2y5qyd3pumioutlww66yxssybp4guwwrphibxrkv4vmwprrl.py", directory: "inductor_cache/2x")
!4 = !{ptr @triton_poi_fused_avg_pool2d_3, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_avg_pool2d_3, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_avg_pool2d_3", linkageName: "triton_poi_fused_avg_pool2d_3", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 38, column: 41, scope: !7)
!15 = !DILocation(line: 38, column: 31, scope: !7)
!16 = !DILocation(line: 44, column: 41, scope: !7)
!17 = !DILocation(line: 44, column: 31, scope: !7)
!18 = !DILocation(line: 51, column: 41, scope: !7)
!19 = !DILocation(line: 51, column: 31, scope: !7)
!20 = !DILocation(line: 58, column: 40, scope: !7)
!21 = !DILocation(line: 58, column: 31, scope: !7)
!22 = !DILocation(line: 61, column: 31, scope: !7)
!23 = !DILocation(line: 64, column: 37, scope: !7)
!24 = !DILocation(line: 64, column: 31, scope: !7)
!25 = !DILocation(line: 71, column: 38, scope: !7)
!26 = !DILocation(line: 71, column: 31, scope: !7)
!27 = !DILocation(line: 74, column: 38, scope: !7)
!28 = !DILocation(line: 74, column: 31, scope: !7)
!29 = !DILocation(line: 77, column: 38, scope: !7)
!30 = !DILocation(line: 77, column: 31, scope: !7)
!31 = !DILocation(line: 24, column: 21, scope: !7)
!32 = !DILocation(line: 24, column: 29, scope: !7)
!33 = !DILocation(line: 79, column: 40, scope: !7)
!34 = !DILocation(line: 29, column: 19, scope: !7)
!35 = !DILocation(line: 34, column: 19, scope: !7)
!36 = !DILocation(line: 37, column: 19, scope: !7)
!37 = !DILocation(line: 38, column: 46, scope: !7)
!38 = !DILocation(line: 40, column: 21, scope: !7)
!39 = !DILocation(line: 43, column: 19, scope: !7)
!40 = !DILocation(line: 49, column: 20, scope: !7)
!41 = !DILocation(line: 50, column: 19, scope: !7)
!42 = !DILocation(line: 54, column: 21, scope: !7)
!43 = !DILocation(line: 57, column: 20, scope: !7)
!44 = !DILocation(line: 60, column: 20, scope: !7)
!45 = !DILocation(line: 63, column: 20, scope: !7)
!46 = !DILocation(line: 69, column: 20, scope: !7)
!47 = !DILocation(line: 70, column: 20, scope: !7)
!48 = !DILocation(line: 73, column: 20, scope: !7)
!49 = !DILocation(line: 76, column: 20, scope: !7)
!50 = !DILocation(line: 79, column: 43, scope: !7)
!51 = !DILocation(line: 79, column: 129, scope: !7)
!52 = !DILocation(line: 79, column: 125, scope: !7)
!53 = !DILocation(line: 79, column: 116, scope: !7)
!54 = !DILocation(line: 79, column: 160, scope: !7)
!55 = !DILocation(line: 79, column: 148, scope: !7)
!56 = !DILocation(line: 79, column: 136, scope: !7)
!57 = !DILocation(line: 79, column: 48, scope: !7)
!58 = !DILocation(line: 79, column: 240, scope: !7)
!59 = !DILocation(line: 79, column: 108, scope: !7)
!60 = !DILocation(line: 44, column: 46, scope: !7)
!61 = !DILocation(line: 45, column: 20, scope: !7)
!62 = !DILocation(line: 51, column: 46, scope: !7)
!63 = !DILocation(line: 52, column: 20, scope: !7)
!64 = !DILocation(line: 58, column: 45, scope: !7)
!65 = !DILocation(line: 59, column: 20, scope: !7)
!66 = !DILocation(line: 61, column: 36, scope: !7)
!67 = !DILocation(line: 62, column: 20, scope: !7)
!68 = !DILocation(line: 64, column: 42, scope: !7)
!69 = !DILocation(line: 65, column: 20, scope: !7)
!70 = !DILocation(line: 71, column: 43, scope: !7)
!71 = !DILocation(line: 72, column: 20, scope: !7)
!72 = !DILocation(line: 74, column: 43, scope: !7)
!73 = !DILocation(line: 75, column: 20, scope: !7)
!74 = !DILocation(line: 77, column: 43, scope: !7)
!75 = !DILocation(line: 78, column: 20, scope: !7)
!76 = !DILocation(line: 79, column: 311, scope: !7)
!77 = !DILocation(line: 79, column: 372, scope: !7)
!78 = !DILocation(line: 80, column: 20, scope: !7)
!79 = !DILocation(line: 81, column: 25, scope: !7)
!80 = !DILocation(line: 81, column: 37, scope: !7)
!81 = !DILocation(line: 81, column: 4, scope: !7)
