; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_convolution_sigmoid_11(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #1, !dbg !10
  %7 = shl i32 %6, 4, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 6, !dbg !12
  %10 = and i32 %9, 3, !dbg !12
  %11 = or disjoint i32 %7, %10, !dbg !13
  %12 = or disjoint i32 %11, 4, !dbg !13
  %13 = or disjoint i32 %11, 8, !dbg !13
  %14 = or disjoint i32 %11, 12, !dbg !13
  %15 = icmp slt i32 %11, 12, !dbg !14
  %16 = icmp slt i32 %12, 12, !dbg !14
  %17 = icmp slt i32 %13, 12, !dbg !14
  %18 = icmp slt i32 %7, 0, !dbg !14
  %19 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !15
  %20 = shl i32 %19, 8, !dbg !16
  %21 = shl i32 %8, 2, !dbg !17
  %22 = and i32 %21, 252, !dbg !17
  %23 = or disjoint i32 %20, %22, !dbg !18
  %24 = icmp slt i32 %23, 1936, !dbg !19
  %.frozen = freeze i32 %11, !dbg !20
  %25 = sdiv i32 %.frozen, 3, !dbg !20
  %26 = mul i32 %25, 3, !dbg !21
  %.decomposed = sub i32 %.frozen, %26, !dbg !21
  %.frozen1 = freeze i32 %12, !dbg !20
  %27 = sdiv i32 %.frozen1, 3, !dbg !20
  %28 = mul i32 %27, 3, !dbg !21
  %.decomposed2 = sub i32 %.frozen1, %28, !dbg !21
  %.frozen3 = freeze i32 %13, !dbg !20
  %29 = sdiv i32 %.frozen3, 3, !dbg !20
  %30 = mul i32 %29, 3, !dbg !21
  %.decomposed4 = sub i32 %.frozen3, %30, !dbg !21
  %.frozen5 = freeze i32 %14, !dbg !20
  %31 = sdiv i32 %.frozen5, 3, !dbg !20
  %32 = mul i32 %31, 3, !dbg !21
  %.decomposed6 = sub i32 %.frozen5, %32, !dbg !21
  %33 = mul i32 %23, 3, !dbg !22
  %34 = or disjoint i32 %33, 3, !dbg !22
  %35 = add i32 %33, 6, !dbg !22
  %36 = add i32 %33, 9, !dbg !22
  %37 = mul i32 %25, 5808, !dbg !23
  %38 = mul i32 %27, 5808, !dbg !23
  %39 = mul i32 %29, 5808, !dbg !23
  %40 = mul i32 %31, 5808, !dbg !23
  %41 = add i32 %37, %.decomposed, !dbg !24
  %42 = add i32 %41, %33, !dbg !25
  %43 = add i32 %41, %34, !dbg !25
  %44 = add i32 %41, %35, !dbg !25
  %45 = add i32 %41, %36, !dbg !25
  %46 = add i32 %38, %.decomposed2, !dbg !24
  %47 = add i32 %46, %33, !dbg !25
  %48 = add i32 %46, %34, !dbg !25
  %49 = add i32 %46, %35, !dbg !25
  %50 = add i32 %46, %36, !dbg !25
  %51 = add i32 %39, %.decomposed4, !dbg !24
  %52 = add i32 %51, %33, !dbg !25
  %53 = add i32 %51, %34, !dbg !25
  %54 = add i32 %51, %35, !dbg !25
  %55 = add i32 %51, %36, !dbg !25
  %56 = add i32 %40, %.decomposed6, !dbg !24
  %57 = add i32 %56, %33, !dbg !25
  %58 = add i32 %56, %34, !dbg !25
  %59 = add i32 %56, %35, !dbg !25
  %60 = add i32 %56, %36, !dbg !25
  %61 = sext i32 %42 to i64, !dbg !26
  %62 = getelementptr float, ptr addrspace(1) %0, i64 %61, !dbg !26
  %63 = sext i32 %43 to i64, !dbg !26
  %64 = getelementptr float, ptr addrspace(1) %0, i64 %63, !dbg !26
  %65 = sext i32 %44 to i64, !dbg !26
  %66 = getelementptr float, ptr addrspace(1) %0, i64 %65, !dbg !26
  %67 = sext i32 %45 to i64, !dbg !26
  %68 = getelementptr float, ptr addrspace(1) %0, i64 %67, !dbg !26
  %69 = sext i32 %47 to i64, !dbg !26
  %70 = getelementptr float, ptr addrspace(1) %0, i64 %69, !dbg !26
  %71 = sext i32 %48 to i64, !dbg !26
  %72 = getelementptr float, ptr addrspace(1) %0, i64 %71, !dbg !26
  %73 = sext i32 %49 to i64, !dbg !26
  %74 = getelementptr float, ptr addrspace(1) %0, i64 %73, !dbg !26
  %75 = sext i32 %50 to i64, !dbg !26
  %76 = getelementptr float, ptr addrspace(1) %0, i64 %75, !dbg !26
  %77 = sext i32 %52 to i64, !dbg !26
  %78 = getelementptr float, ptr addrspace(1) %0, i64 %77, !dbg !26
  %79 = sext i32 %53 to i64, !dbg !26
  %80 = getelementptr float, ptr addrspace(1) %0, i64 %79, !dbg !26
  %81 = sext i32 %54 to i64, !dbg !26
  %82 = getelementptr float, ptr addrspace(1) %0, i64 %81, !dbg !26
  %83 = sext i32 %55 to i64, !dbg !26
  %84 = getelementptr float, ptr addrspace(1) %0, i64 %83, !dbg !26
  %85 = sext i32 %57 to i64, !dbg !26
  %86 = getelementptr float, ptr addrspace(1) %0, i64 %85, !dbg !26
  %87 = sext i32 %58 to i64, !dbg !26
  %88 = getelementptr float, ptr addrspace(1) %0, i64 %87, !dbg !26
  %89 = sext i32 %59 to i64, !dbg !26
  %90 = getelementptr float, ptr addrspace(1) %0, i64 %89, !dbg !26
  %91 = sext i32 %60 to i64, !dbg !26
  %92 = getelementptr float, ptr addrspace(1) %0, i64 %91, !dbg !26
  %93 = and i1 %15, %24, !dbg !27
  %94 = and i1 %16, %24, !dbg !27
  %95 = and i1 %17, %24, !dbg !27
  %96 = and i1 %18, %24, !dbg !27
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 %93) #1, !dbg !28
  %98 = bitcast i32 %97 to float, !dbg !28
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 %93) #1, !dbg !28
  %100 = bitcast i32 %99 to float, !dbg !28
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 %93) #1, !dbg !28
  %102 = bitcast i32 %101 to float, !dbg !28
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 %93) #1, !dbg !28
  %104 = bitcast i32 %103 to float, !dbg !28
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 %94) #1, !dbg !28
  %106 = bitcast i32 %105 to float, !dbg !28
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 %94) #1, !dbg !28
  %108 = bitcast i32 %107 to float, !dbg !28
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 %94) #1, !dbg !28
  %110 = bitcast i32 %109 to float, !dbg !28
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 %94) #1, !dbg !28
  %112 = bitcast i32 %111 to float, !dbg !28
  %113 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 %95) #1, !dbg !28
  %114 = bitcast i32 %113 to float, !dbg !28
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %80, i1 %95) #1, !dbg !28
  %116 = bitcast i32 %115 to float, !dbg !28
  %117 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 %95) #1, !dbg !28
  %118 = bitcast i32 %117 to float, !dbg !28
  %119 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 %95) #1, !dbg !28
  %120 = bitcast i32 %119 to float, !dbg !28
  %121 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 %96) #1, !dbg !28
  %122 = bitcast i32 %121 to float, !dbg !28
  %123 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %88, i1 %96) #1, !dbg !28
  %124 = bitcast i32 %123 to float, !dbg !28
  %125 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %90, i1 %96) #1, !dbg !28
  %126 = bitcast i32 %125 to float, !dbg !28
  %127 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 %96) #1, !dbg !28
  %128 = bitcast i32 %127 to float, !dbg !28
  %129 = sext i32 %.decomposed to i64, !dbg !29
  %130 = getelementptr float, ptr addrspace(1) %1, i64 %129, !dbg !29
  %131 = sext i32 %.decomposed2 to i64, !dbg !29
  %132 = getelementptr float, ptr addrspace(1) %1, i64 %131, !dbg !29
  %133 = sext i32 %.decomposed4 to i64, !dbg !29
  %134 = getelementptr float, ptr addrspace(1) %1, i64 %133, !dbg !29
  %135 = sext i32 %.decomposed6 to i64, !dbg !29
  %136 = getelementptr float, ptr addrspace(1) %1, i64 %135, !dbg !29
  %137 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %130, i1 %15) #1, !dbg !30
  %138 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %130, i1 %15) #1, !dbg !30
  %139 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %130, i1 %15) #1, !dbg !30
  %140 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %130, i1 %15) #1, !dbg !30
  %141 = bitcast i32 %140 to float, !dbg !30
  %142 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %132, i1 %16) #1, !dbg !30
  %143 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %132, i1 %16) #1, !dbg !30
  %144 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %132, i1 %16) #1, !dbg !30
  %145 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %132, i1 %16) #1, !dbg !30
  %146 = bitcast i32 %145 to float, !dbg !30
  %147 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %134, i1 %17) #1, !dbg !30
  %148 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %134, i1 %17) #1, !dbg !30
  %149 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %134, i1 %17) #1, !dbg !30
  %150 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %134, i1 %17) #1, !dbg !30
  %151 = bitcast i32 %150 to float, !dbg !30
  %152 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %136, i1 %18) #1, !dbg !30
  %153 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %136, i1 %18) #1, !dbg !30
  %154 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %136, i1 %18) #1, !dbg !30
  %155 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %136, i1 %18) #1, !dbg !30
  %156 = bitcast i32 %155 to float, !dbg !30
  %157 = fadd float %98, %141, !dbg !31
  %158 = fadd float %100, %141, !dbg !31
  %159 = fadd float %102, %141, !dbg !31
  %160 = fadd float %104, %141, !dbg !31
  %161 = fadd float %106, %146, !dbg !31
  %162 = fadd float %108, %146, !dbg !31
  %163 = fadd float %110, %146, !dbg !31
  %164 = fadd float %112, %146, !dbg !31
  %165 = fadd float %114, %151, !dbg !31
  %166 = fadd float %116, %151, !dbg !31
  %167 = fadd float %118, %151, !dbg !31
  %168 = fadd float %120, %151, !dbg !31
  %169 = fadd float %122, %156, !dbg !31
  %170 = fadd float %124, %156, !dbg !31
  %171 = fadd float %126, %156, !dbg !31
  %172 = fadd float %128, %156, !dbg !31
  %173 = fsub float 0.000000e+00, %157, !dbg !32
  %174 = fsub float 0.000000e+00, %158, !dbg !32
  %175 = fsub float 0.000000e+00, %159, !dbg !32
  %176 = fsub float 0.000000e+00, %160, !dbg !32
  %177 = fsub float 0.000000e+00, %161, !dbg !32
  %178 = fsub float 0.000000e+00, %162, !dbg !32
  %179 = fsub float 0.000000e+00, %163, !dbg !32
  %180 = fsub float 0.000000e+00, %164, !dbg !32
  %181 = fsub float 0.000000e+00, %165, !dbg !32
  %182 = fsub float 0.000000e+00, %166, !dbg !32
  %183 = fsub float 0.000000e+00, %167, !dbg !32
  %184 = fsub float 0.000000e+00, %168, !dbg !32
  %185 = fsub float 0.000000e+00, %169, !dbg !32
  %186 = fsub float 0.000000e+00, %170, !dbg !32
  %187 = fsub float 0.000000e+00, %171, !dbg !32
  %188 = fsub float 0.000000e+00, %172, !dbg !32
  %189 = fmul float %173, 0x3FF7154760000000, !dbg !36
  %190 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %189) #1, !dbg !36
  %191 = fmul float %174, 0x3FF7154760000000, !dbg !36
  %192 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %191) #1, !dbg !36
  %193 = fmul float %175, 0x3FF7154760000000, !dbg !36
  %194 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %193) #1, !dbg !36
  %195 = fmul float %176, 0x3FF7154760000000, !dbg !36
  %196 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %195) #1, !dbg !36
  %197 = fmul float %177, 0x3FF7154760000000, !dbg !36
  %198 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %197) #1, !dbg !36
  %199 = fmul float %178, 0x3FF7154760000000, !dbg !36
  %200 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %199) #1, !dbg !36
  %201 = fmul float %179, 0x3FF7154760000000, !dbg !36
  %202 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %201) #1, !dbg !36
  %203 = fmul float %180, 0x3FF7154760000000, !dbg !36
  %204 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %203) #1, !dbg !36
  %205 = fmul float %181, 0x3FF7154760000000, !dbg !36
  %206 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %205) #1, !dbg !36
  %207 = fmul float %182, 0x3FF7154760000000, !dbg !36
  %208 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %207) #1, !dbg !36
  %209 = fmul float %183, 0x3FF7154760000000, !dbg !36
  %210 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %209) #1, !dbg !36
  %211 = fmul float %184, 0x3FF7154760000000, !dbg !36
  %212 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %211) #1, !dbg !36
  %213 = fmul float %185, 0x3FF7154760000000, !dbg !36
  %214 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %213) #1, !dbg !36
  %215 = fmul float %186, 0x3FF7154760000000, !dbg !36
  %216 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %215) #1, !dbg !36
  %217 = fmul float %187, 0x3FF7154760000000, !dbg !36
  %218 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %217) #1, !dbg !36
  %219 = fmul float %188, 0x3FF7154760000000, !dbg !36
  %220 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %219) #1, !dbg !36
  %221 = fadd float %190, 1.000000e+00, !dbg !37
  %222 = fadd float %192, 1.000000e+00, !dbg !37
  %223 = fadd float %194, 1.000000e+00, !dbg !37
  %224 = fadd float %196, 1.000000e+00, !dbg !37
  %225 = fadd float %198, 1.000000e+00, !dbg !37
  %226 = fadd float %200, 1.000000e+00, !dbg !37
  %227 = fadd float %202, 1.000000e+00, !dbg !37
  %228 = fadd float %204, 1.000000e+00, !dbg !37
  %229 = fadd float %206, 1.000000e+00, !dbg !37
  %230 = fadd float %208, 1.000000e+00, !dbg !37
  %231 = fadd float %210, 1.000000e+00, !dbg !37
  %232 = fadd float %212, 1.000000e+00, !dbg !37
  %233 = fadd float %214, 1.000000e+00, !dbg !37
  %234 = fadd float %216, 1.000000e+00, !dbg !37
  %235 = fadd float %218, 1.000000e+00, !dbg !37
  %236 = fadd float %220, 1.000000e+00, !dbg !37
  %237 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %221) #1, !dbg !38
  %238 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %222) #1, !dbg !38
  %239 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %223) #1, !dbg !38
  %240 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %224) #1, !dbg !38
  %241 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %225) #1, !dbg !38
  %242 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %226) #1, !dbg !38
  %243 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %227) #1, !dbg !38
  %244 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %228) #1, !dbg !38
  %245 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %229) #1, !dbg !38
  %246 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %230) #1, !dbg !38
  %247 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %231) #1, !dbg !38
  %248 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %232) #1, !dbg !38
  %249 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %233) #1, !dbg !38
  %250 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %234) #1, !dbg !38
  %251 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %235) #1, !dbg !38
  %252 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %236) #1, !dbg !38
  %253 = mul i32 %11, 1936, !dbg !39
  %254 = mul i32 %12, 1936, !dbg !39
  %255 = mul i32 %13, 1936, !dbg !39
  %256 = mul i32 %14, 1936, !dbg !39
  %257 = add i32 %23, %253, !dbg !40
  %258 = add i32 %23, %254, !dbg !40
  %259 = add i32 %23, %255, !dbg !40
  %260 = add i32 %23, %256, !dbg !40
  %261 = sext i32 %257 to i64, !dbg !41
  %262 = getelementptr float, ptr addrspace(1) %2, i64 %261, !dbg !41
  %263 = sext i32 %258 to i64, !dbg !41
  %264 = getelementptr float, ptr addrspace(1) %2, i64 %263, !dbg !41
  %265 = sext i32 %259 to i64, !dbg !41
  %266 = getelementptr float, ptr addrspace(1) %2, i64 %265, !dbg !41
  %267 = sext i32 %260 to i64, !dbg !41
  %268 = getelementptr float, ptr addrspace(1) %2, i64 %267, !dbg !41
  %269 = bitcast float %237 to i32, !dbg !42
  %270 = bitcast float %238 to i32, !dbg !42
  %271 = bitcast float %239 to i32, !dbg !42
  %272 = bitcast float %240 to i32, !dbg !42
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %269, i32 %270, i32 %271, i32 %272, ptr addrspace(1) %262, i1 %93) #1, !dbg !42
  %273 = bitcast float %241 to i32, !dbg !42
  %274 = bitcast float %242 to i32, !dbg !42
  %275 = bitcast float %243 to i32, !dbg !42
  %276 = bitcast float %244 to i32, !dbg !42
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %273, i32 %274, i32 %275, i32 %276, ptr addrspace(1) %264, i1 %94) #1, !dbg !42
  %277 = bitcast float %245 to i32, !dbg !42
  %278 = bitcast float %246 to i32, !dbg !42
  %279 = bitcast float %247 to i32, !dbg !42
  %280 = bitcast float %248 to i32, !dbg !42
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %277, i32 %278, i32 %279, i32 %280, ptr addrspace(1) %266, i1 %95) #1, !dbg !42
  %281 = bitcast float %249 to i32, !dbg !42
  %282 = bitcast float %250 to i32, !dbg !42
  %283 = bitcast float %251 to i32, !dbg !42
  %284 = bitcast float %252 to i32, !dbg !42
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %281, i32 %282, i32 %283, i32 %284, ptr addrspace(1) %268, i1 %96) #1, !dbg !42
  ret void, !dbg !43
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cqywmhpbsyuedylhl7z3hjwk3endsrijdp4nncechatflocndor6.py", directory: "inductor_cache/qy")
!4 = !{ptr @triton_poi_fused_convolution_sigmoid_11, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_sigmoid_11, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_sigmoid_11", linkageName: "triton_poi_fused_convolution_sigmoid_11", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 37, scope: !7)
!23 = !DILocation(line: 32, column: 47, scope: !7)
!24 = !DILocation(line: 32, column: 35, scope: !7)
!25 = !DILocation(line: 32, column: 42, scope: !7)
!26 = !DILocation(line: 32, column: 30, scope: !7)
!27 = !DILocation(line: 32, column: 60, scope: !7)
!28 = !DILocation(line: 32, column: 52, scope: !7)
!29 = !DILocation(line: 33, column: 30, scope: !7)
!30 = !DILocation(line: 33, column: 35, scope: !7)
!31 = !DILocation(line: 34, column: 18, scope: !7)
!32 = !DILocation(line: 47, column: 30, scope: !33, inlinedAt: !35)
!33 = distinct !DILexicalBlockFile(scope: !7, file: !34, discriminator: 0)
!34 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!35 = !DILocation(line: 35, column: 22, scope: !7)
!36 = !DILocation(line: 47, column: 29, scope: !33, inlinedAt: !35)
!37 = !DILocation(line: 47, column: 20, scope: !33, inlinedAt: !35)
!38 = !DILocation(line: 47, column: 16, scope: !33, inlinedAt: !35)
!39 = !DILocation(line: 36, column: 35, scope: !7)
!40 = !DILocation(line: 36, column: 30, scope: !7)
!41 = !DILocation(line: 36, column: 25, scope: !7)
!42 = !DILocation(line: 36, column: 46, scope: !7)
!43 = !DILocation(line: 36, column: 4, scope: !7)
