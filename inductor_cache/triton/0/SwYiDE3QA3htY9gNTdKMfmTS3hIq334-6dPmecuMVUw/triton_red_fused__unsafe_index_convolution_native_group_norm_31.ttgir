#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 16], order = [0, 1]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 4], threadsPerWarp = [1, 32], warpsPerCTA = [1, 16], order = [1, 0]}>
#loc = loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":19:0)
#loc1 = loc(unknown)
#loc66 = loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":64:44)
#loc99 = loc(callsite(#loc1 at #loc66))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 16 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_red_fused__unsafe_index_convolution_native_group_norm_31(%arg0: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":19:0), %arg5: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":19:0), %arg6: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":19:0), %arg7: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":19:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<1x2048xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<8> : tensor<1x2048xi64, #blocked1> loc(#loc1)
    %cst_1 = arith.constant dense<8> : tensor<1x2048xi64, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<64> : tensor<1x2048xi64, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<0> : tensor<1x2048xi64, #blocked> loc(#loc1)
    %cst_4 = arith.constant dense<0> : tensor<1x2048xi64, #blocked1> loc(#loc1)
    %cst_5 = arith.constant 0.000000e+00 : f32 loc(#loc1)
    %c256_i32 = arith.constant 256 : i32 loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %c2_i32 = arith.constant 2 : i32 loc(#loc1)
    %c1024_i32 = arith.constant 1024 : i32 loc(#loc1)
    %c2048_i32 = arith.constant 2048 : i32 loc(#loc1)
    %c8192_i32 = arith.constant 8192 : i32 loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst_6 = arith.constant dense<8192> : tensor<1x2048xi32, #blocked> loc(#loc1)
    %cst_7 = arith.constant dense<8192> : tensor<1x2048xi32, #blocked1> loc(#loc1)
    %cst_8 = arith.constant dense<256> : tensor<1x2048xi32, #blocked> loc(#loc1)
    %cst_9 = arith.constant dense<16> : tensor<1x2048xi32, #blocked> loc(#loc1)
    %cst_10 = arith.constant dense<16> : tensor<1x2048xi32, #blocked1> loc(#loc1)
    %cst_11 = arith.constant dense<4096> : tensor<1x2048xi32, #blocked> loc(#loc1)
    %cst_12 = arith.constant dense<4096> : tensor<1x2048xi32, #blocked1> loc(#loc1)
    %cst_13 = arith.constant dense<512> : tensor<1x2048xi32, #blocked1> loc(#loc1)
    %cst_14 = arith.constant dense<1.000000e+00> : tensor<1x2048xf32, #blocked> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.cmpi slt, %0, %c256_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 2048 : i32, start = 0 : i32} : tensor<2048xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc4)
    %3 = tt.make_range {end = 2048 : i32, start = 0 : i32} : tensor<2048xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc4)
    %4 = tt.expand_dims %2 {axis = 0 : i32} : tensor<2048xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x2048xi32, #blocked> loc(#loc4)
    %5 = tt.expand_dims %3 {axis = 0 : i32} : tensor<2048xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x2048xi32, #blocked1> loc(#loc4)
    %6 = arith.remsi %0, %c64_i32 : i32 loc(#loc5)
    %7 = tt.splat %arg0 : !tt.ptr<i64> -> tensor<1x2048x!tt.ptr<i64>, #blocked> loc(#loc6)
    %8 = tt.splat %arg0 : !tt.ptr<i64> -> tensor<1x2048x!tt.ptr<i64>, #blocked1> loc(#loc6)
    %9 = arith.muli %6, %c2_i32 : i32 loc(#loc7)
    %10 = tt.splat %9 : i32 -> tensor<1x2048xi32, #blocked> loc(#loc8)
    %11 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<1x2048x!tt.ptr<f32>, #blocked> loc(#loc9)
    %12 = tt.splat %1 : i1 -> tensor<1x2048xi1, #blocked> loc(#loc10)
    %13 = tt.splat %1 : i1 -> tensor<1x2048xi1, #blocked1> loc(#loc10)
    %14 = arith.muli %0, %c1024_i32 : i32 loc(#loc11)
    %15 = arith.extsi %14 : i32 to i64 loc(#loc12)
    %16 = tt.splat %15 : i64 -> tensor<1x2048xi64, #blocked1> loc(#loc12)
    %17 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1x2048x!tt.ptr<f32>, #blocked1> loc(#loc13)
    %18 = arith.muli %0, %c8192_i32 : i32 loc(#loc14)
    %19 = tt.splat %18 : i32 -> tensor<1x2048xi32, #blocked1> loc(#loc15)
    %20 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<1x2048x!tt.ptr<f32>, #blocked1> loc(#loc16)
    %21:3 = scf.for %arg9 = %c0_i32 to %c8192_i32 step %c2048_i32 iter_args(%arg10 = %cst, %arg11 = %cst, %arg12 = %cst) -> (tensor<1x2048xf32, #blocked>, tensor<1x2048xf32, #blocked>, tensor<1x2048xf32, #blocked>)  : i32 {
      %33 = tt.splat %arg9 : i32 -> tensor<1x2048xi32, #blocked> loc(#loc18)
      %34 = tt.splat %arg9 : i32 -> tensor<1x2048xi32, #blocked1> loc(#loc18)
      %35 = arith.addi %33, %4 : tensor<1x2048xi32, #blocked> loc(#loc18)
      %36 = arith.addi %34, %5 : tensor<1x2048xi32, #blocked1> loc(#loc18)
      %37 = arith.cmpi slt, %35, %cst_6 : tensor<1x2048xi32, #blocked> loc(#loc19)
      %38 = arith.cmpi slt, %36, %cst_7 : tensor<1x2048xi32, #blocked1> loc(#loc19)
      %39 = arith.divsi %35, %cst_8 : tensor<1x2048xi32, #blocked> loc(#loc20)
      %40 = arith.remsi %39, %cst_9 : tensor<1x2048xi32, #blocked> loc(#loc21)
      %41 = arith.divsi %35, %cst_9 : tensor<1x2048xi32, #blocked> loc(#loc22)
      %42 = arith.remsi %41, %cst_9 : tensor<1x2048xi32, #blocked> loc(#loc23)
      %43 = arith.remsi %36, %cst_10 : tensor<1x2048xi32, #blocked1> loc(#loc24)
      %44 = arith.divsi %35, %cst_11 : tensor<1x2048xi32, #blocked> loc(#loc25)
      %45 = arith.divsi %36, %cst_12 : tensor<1x2048xi32, #blocked1> loc(#loc25)
      %46 = tt.addptr %7, %40 : tensor<1x2048x!tt.ptr<i64>, #blocked>, tensor<1x2048xi32, #blocked> loc(#loc6)
      %47 = tt.load %46, %37, %cst_3 evictionPolicy = evict_last : tensor<1x2048x!tt.ptr<i64>, #blocked> loc(#loc26)
      %48 = tt.addptr %7, %42 : tensor<1x2048x!tt.ptr<i64>, #blocked>, tensor<1x2048xi32, #blocked> loc(#loc27)
      %49 = tt.load %48, %37, %cst_3 evictionPolicy = evict_last : tensor<1x2048x!tt.ptr<i64>, #blocked> loc(#loc28)
      %50 = tt.addptr %8, %43 : tensor<1x2048x!tt.ptr<i64>, #blocked1>, tensor<1x2048xi32, #blocked1> loc(#loc29)
      %51 = tt.load %50, %38, %cst_4 evictionPolicy = evict_last : tensor<1x2048x!tt.ptr<i64>, #blocked1> loc(#loc30)
      %52 = arith.addi %44, %10 : tensor<1x2048xi32, #blocked> loc(#loc8)
      %53 = tt.addptr %11, %52 : tensor<1x2048x!tt.ptr<f32>, #blocked>, tensor<1x2048xi32, #blocked> loc(#loc9)
      %54 = arith.andi %37, %12 : tensor<1x2048xi1, #blocked> loc(#loc10)
      %55 = arith.andi %38, %13 : tensor<1x2048xi1, #blocked1> loc(#loc10)
      %56 = tt.load %53, %54, %cst evictionPolicy = evict_last : tensor<1x2048x!tt.ptr<f32>, #blocked> loc(#loc31)
      %57 = arith.addi %47, %cst_1 : tensor<1x2048xi64, #blocked> loc(#loc32)
      %58 = arith.cmpi slt, %47, %cst_3 : tensor<1x2048xi64, #blocked> loc(#loc33)
      %59 = arith.select %58, %57, %47 : tensor<1x2048xi1, #blocked>, tensor<1x2048xi64, #blocked> loc(#loc34)
      %60 = arith.addi %49, %cst_1 : tensor<1x2048xi64, #blocked> loc(#loc35)
      %61 = arith.cmpi slt, %49, %cst_3 : tensor<1x2048xi64, #blocked> loc(#loc36)
      %62 = arith.select %61, %60, %49 : tensor<1x2048xi1, #blocked>, tensor<1x2048xi64, #blocked> loc(#loc37)
      %63 = arith.addi %51, %cst_0 : tensor<1x2048xi64, #blocked1> loc(#loc38)
      %64 = arith.cmpi slt, %51, %cst_4 : tensor<1x2048xi64, #blocked1> loc(#loc39)
      %65 = arith.select %64, %63, %51 : tensor<1x2048xi1, #blocked1>, tensor<1x2048xi64, #blocked1> loc(#loc40)
      %66 = arith.muli %62, %cst_1 : tensor<1x2048xi64, #blocked> loc(#loc41)
      %67 = triton_gpu.convert_layout %66 {overflowFlags = #arith.overflow<none>} : tensor<1x2048xi64, #blocked> -> tensor<1x2048xi64, #blocked1> loc(#loc41)
      %68 = arith.addi %65, %67 : tensor<1x2048xi64, #blocked1> loc(#loc42)
      %69 = arith.muli %59, %cst_2 : tensor<1x2048xi64, #blocked> loc(#loc43)
      %70 = triton_gpu.convert_layout %69 {overflowFlags = #arith.overflow<none>} : tensor<1x2048xi64, #blocked> -> tensor<1x2048xi64, #blocked1> loc(#loc43)
      %71 = arith.addi %68, %70 : tensor<1x2048xi64, #blocked1> loc(#loc44)
      %72 = arith.muli %45, %cst_13 : tensor<1x2048xi32, #blocked1> loc(#loc45)
      %73 = arith.extsi %72 : tensor<1x2048xi32, #blocked1> to tensor<1x2048xi64, #blocked1> loc(#loc46)
      %74 = arith.addi %71, %73 : tensor<1x2048xi64, #blocked1> loc(#loc46)
      %75 = arith.addi %74, %16 : tensor<1x2048xi64, #blocked1> loc(#loc12)
      %76 = tt.addptr %17, %75 : tensor<1x2048x!tt.ptr<f32>, #blocked1>, tensor<1x2048xi64, #blocked1> loc(#loc13)
      %77 = triton_gpu.convert_layout %76 : tensor<1x2048x!tt.ptr<f32>, #blocked1> -> tensor<1x2048x!tt.ptr<f32>, #blocked> loc(#loc47)
      %78 = tt.load %77, %54, %cst evictionPolicy = evict_last : tensor<1x2048x!tt.ptr<f32>, #blocked> loc(#loc47)
      %79 = arith.addf %78, %56 : tensor<1x2048xf32, #blocked> loc(#loc48)
      %80 = arith.cmpi eq, %arg9, %c0_i32 : i32 loc(#loc49)
      %81:3 = scf.if %80 -> (tensor<1x2048xf32, #blocked>, tensor<1x2048xf32, #blocked>, tensor<1x2048xf32, #blocked>) {
        scf.yield %cst, %79, %cst_14 : tensor<1x2048xf32, #blocked>, tensor<1x2048xf32, #blocked>, tensor<1x2048xf32, #blocked> loc(#loc90)
      } else {
        %88 = arith.subf %79, %arg10 : tensor<1x2048xf32, #blocked> loc(#loc91)
        %89 = arith.addf %arg12, %cst_14 : tensor<1x2048xf32, #blocked> loc(#loc92)
        %90 = arith.divf %88, %89 : tensor<1x2048xf32, #blocked> loc(#loc93)
        %91 = arith.addf %arg10, %90 : tensor<1x2048xf32, #blocked> loc(#loc94)
        %92 = arith.subf %79, %91 : tensor<1x2048xf32, #blocked> loc(#loc95)
        %93 = arith.mulf %88, %92 : tensor<1x2048xf32, #blocked> loc(#loc96)
        %94 = arith.addf %arg11, %93 : tensor<1x2048xf32, #blocked> loc(#loc97)
        scf.yield %94, %91, %89 : tensor<1x2048xf32, #blocked>, tensor<1x2048xf32, #blocked>, tensor<1x2048xf32, #blocked> loc(#loc97)
      } loc(#loc89)
      %82 = arith.select %54, %81#1, %arg10 : tensor<1x2048xi1, #blocked>, tensor<1x2048xf32, #blocked> loc(#loc60)
      %83 = arith.select %54, %81#0, %arg11 : tensor<1x2048xi1, #blocked>, tensor<1x2048xf32, #blocked> loc(#loc61)
      %84 = arith.select %54, %81#2, %arg12 : tensor<1x2048xi1, #blocked>, tensor<1x2048xf32, #blocked> loc(#loc62)
      %85 = arith.addi %36, %19 : tensor<1x2048xi32, #blocked1> loc(#loc15)
      %86 = tt.addptr %20, %85 : tensor<1x2048x!tt.ptr<f32>, #blocked1>, tensor<1x2048xi32, #blocked1> loc(#loc16)
      %87 = triton_gpu.convert_layout %79 : tensor<1x2048xf32, #blocked> -> tensor<1x2048xf32, #blocked1> loc(#loc63)
      tt.store %86, %87, %55 : tensor<1x2048x!tt.ptr<f32>, #blocked1> loc(#loc63)
      scf.yield %82, %83, %84 : tensor<1x2048xf32, #blocked>, tensor<1x2048xf32, #blocked>, tensor<1x2048xf32, #blocked> loc(#loc64)
    } loc(#loc17)
    %22:3 = "tt.reduce"(%21#0, %21#1, %21#2) <{axis = 1 : i32}> ({
    ^bb0(%arg9: f32 loc(callsite(#loc1 at #loc66)), %arg10: f32 loc(callsite(#loc1 at #loc66)), %arg11: f32 loc(callsite(#loc1 at #loc66)), %arg12: f32 loc(callsite(#loc1 at #loc66)), %arg13: f32 loc(callsite(#loc1 at #loc66)), %arg14: f32 loc(callsite(#loc1 at #loc66))):
      %33 = arith.subf %arg12, %arg9 : f32 loc(#loc112)
      %34 = arith.addf %arg11, %arg14 : f32 loc(#loc113)
      %35 = arith.cmpf oeq, %34, %cst_5 : f32 loc(#loc114)
      %36 = arith.divf %arg14, %34 : f32 loc(#loc115)
      %37 = arith.select %35, %cst_5, %36 : f32 loc(#loc116)
      %38 = arith.mulf %33, %37 : f32 loc(#loc117)
      %39 = arith.addf %arg9, %38 : f32 loc(#loc118)
      %40 = arith.addf %arg10, %arg13 : f32 loc(#loc119)
      %41 = arith.mulf %33, %33 : f32 loc(#loc120)
      %42 = arith.mulf %41, %arg11 : f32 loc(#loc121)
      %43 = arith.mulf %42, %37 : f32 loc(#loc122)
      %44 = arith.addf %40, %43 : f32 loc(#loc123)
      tt.reduce.return %39, %44, %34 : f32, f32, f32 loc(#loc98)
    }) : (tensor<1x2048xf32, #blocked>, tensor<1x2048xf32, #blocked>, tensor<1x2048xf32, #blocked>) -> (tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>, tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>, tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) loc(#loc98)
    %23 = tt.expand_dims %22#0 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1x1xf32, #blocked> loc(#loc79)
    %24 = tt.expand_dims %22#1 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1x1xf32, #blocked> loc(#loc80)
    %25 = tt.expand_dims %22#2 {axis = 1 : i32} : tensor<1xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<1x1xf32, #blocked> loc(#loc81)
    %26 = tt.addptr %arg4, %0 : !tt.ptr<f32>, i32 loc(#loc82)
    %27 = tt.splat %26 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc83)
    %28 = tt.splat %1 : i1 -> tensor<1x1xi1, #blocked> loc(#loc83)
    tt.store %27, %23, %28 : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc83)
    %29 = tt.addptr %arg5, %0 : !tt.ptr<f32>, i32 loc(#loc84)
    %30 = tt.splat %29 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc85)
    tt.store %30, %24, %28 : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc85)
    %31 = tt.addptr %arg6, %0 : !tt.ptr<f32>, i32 loc(#loc86)
    %32 = tt.splat %31 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc87)
    tt.store %32, %25, %28 : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc87)
    tt.return loc(#loc88)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":22:28)
#loc3 = loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":24:21)
#loc4 = loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":25:33)
#loc5 = loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":27:19)
#loc6 = loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":39:34)
#loc7 = loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":42:42)
#loc8 = loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":42:40)
#loc9 = loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":42:35)
#loc10 = loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":42:55)
#loc11 = loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":53:76)
#loc12 = loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":53:71)
#loc13 = loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":53:35)
#loc14 = loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":62:39)
#loc15 = loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":62:34)
#loc16 = loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":62:29)
#loc17 = loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":31:36)
#loc18 = loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":32:27)
#loc19 = loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":33:25)
#loc20 = loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":34:25)
#loc21 = loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":34:32)
#loc22 = loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":35:25)
#loc23 = loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":35:31)
#loc24 = loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":36:23)
#loc25 = loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":37:23)
#loc26 = loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":39:39)
#loc27 = loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":40:34)
#loc28 = loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":40:39)
#loc29 = loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":41:34)
#loc30 = loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":41:39)
#loc31 = loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":42:47)
#loc32 = loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":44:22)
#loc33 = loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":45:22)
#loc34 = loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":46:36)
#loc35 = loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":47:22)
#loc36 = loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":48:22)
#loc37 = loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":49:36)
#loc38 = loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":50:23)
#loc39 = loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":51:23)
#loc40 = loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":52:39)
#loc41 = loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":53:45)
#loc42 = loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":53:43)
#loc43 = loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":53:55)
#loc44 = loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":53:52)
#loc45 = loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":53:66)
#loc46 = loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":53:62)
#loc47 = loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":53:81)
#loc48 = loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":54:24)
#loc49 = loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":57:66)
#loc50 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":178:7)
#loc51 = loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":57:55)
#loc52 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":181:31)
#loc53 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":183:24)
#loc54 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":184:30)
#loc55 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":185:34)
#loc56 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":185:26)
#loc57 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":186:39)
#loc58 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":186:31)
#loc59 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":186:22)
#loc60 = loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":59:62)
#loc61 = loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":60:58)
#loc62 = loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":61:66)
#loc63 = loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":62:51)
#loc64 = loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":62:8)
#loc65 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":204:46)
#loc67 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":192:21)
#loc68 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":193:28)
#loc69 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":194:39)
#loc70 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":194:60)
#loc71 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":194:49)
#loc72 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":196:25)
#loc73 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":196:17)
#loc74 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":197:15)
#loc75 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":197:30)
#loc76 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":197:38)
#loc77 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":197:49)
#loc78 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":197:22)
#loc79 = loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":66:22)
#loc80 = loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":67:22)
#loc81 = loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":68:22)
#loc82 = loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":69:25)
#loc83 = loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":69:37)
#loc84 = loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":70:25)
#loc85 = loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":70:37)
#loc86 = loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":71:25)
#loc87 = loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":71:37)
#loc88 = loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":71:4)
#loc89 = loc(callsite(#loc50 at #loc51))
#loc90 = loc(callsite(#loc52 at #loc51))
#loc91 = loc(callsite(#loc53 at #loc51))
#loc92 = loc(callsite(#loc54 at #loc51))
#loc93 = loc(callsite(#loc55 at #loc51))
#loc94 = loc(callsite(#loc56 at #loc51))
#loc95 = loc(callsite(#loc57 at #loc51))
#loc96 = loc(callsite(#loc58 at #loc51))
#loc97 = loc(callsite(#loc59 at #loc51))
#loc98 = loc(callsite(#loc65 at #loc66))
#loc100 = loc(callsite(#loc67 at #loc65))
#loc101 = loc(callsite(#loc68 at #loc65))
#loc102 = loc(callsite(#loc69 at #loc65))
#loc103 = loc(callsite(#loc70 at #loc65))
#loc104 = loc(callsite(#loc71 at #loc65))
#loc105 = loc(callsite(#loc72 at #loc65))
#loc106 = loc(callsite(#loc73 at #loc65))
#loc107 = loc(callsite(#loc74 at #loc65))
#loc108 = loc(callsite(#loc75 at #loc65))
#loc109 = loc(callsite(#loc76 at #loc65))
#loc110 = loc(callsite(#loc77 at #loc65))
#loc111 = loc(callsite(#loc78 at #loc65))
#loc112 = loc(callsite(#loc100 at #loc66))
#loc113 = loc(callsite(#loc101 at #loc66))
#loc114 = loc(callsite(#loc102 at #loc66))
#loc115 = loc(callsite(#loc103 at #loc66))
#loc116 = loc(callsite(#loc104 at #loc66))
#loc117 = loc(callsite(#loc105 at #loc66))
#loc118 = loc(callsite(#loc106 at #loc66))
#loc119 = loc(callsite(#loc107 at #loc66))
#loc120 = loc(callsite(#loc108 at #loc66))
#loc121 = loc(callsite(#loc109 at #loc66))
#loc122 = loc(callsite(#loc110 at #loc66))
#loc123 = loc(callsite(#loc111 at #loc66))
