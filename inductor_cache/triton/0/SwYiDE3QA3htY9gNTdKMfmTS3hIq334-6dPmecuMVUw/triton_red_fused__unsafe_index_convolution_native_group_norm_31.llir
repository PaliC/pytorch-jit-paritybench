; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_red_fused__unsafe_index_convolution_native_group_norm_31(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %11 = icmp slt i32 %10, 256, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = and i32 %12, 511, !dbg !12
  %14 = or disjoint i32 %13, 512, !dbg !12
  %15 = or disjoint i32 %13, 1024, !dbg !12
  %16 = or disjoint i32 %13, 1536, !dbg !12
  %17 = shl i32 %12, 2, !dbg !12
  %18 = and i32 %17, 2044, !dbg !12
  %19 = or disjoint i32 %18, 2, !dbg !12
  %20 = srem i32 %10, 64, !dbg !13
  %21 = shl nsw i32 %20, 1, !dbg !14
  %22 = shl i32 %10, 10, !dbg !15
  %23 = sext i32 %22 to i64, !dbg !16
  %24 = shl i32 %10, 13, !dbg !17
  %25 = lshr i32 %12, 4
  %26 = and i32 %25, 15
  %27 = and i32 %17, 12
  %28 = and i32 %19, 14
  %29 = zext nneg i32 %26 to i64
  %30 = getelementptr i64, ptr addrspace(1) %0, i64 %29
  %31 = zext nneg i32 %27 to i64
  %32 = getelementptr i64, ptr addrspace(1) %0, i64 %31
  %33 = zext nneg i32 %28 to i64
  %34 = getelementptr i64, ptr addrspace(1) %0, i64 %33
  %35 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %13
  %36 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %14
  %37 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %15
  %38 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %16
  %39 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %18
  %40 = getelementptr inbounds i8, ptr addrspace(3) %39, i32 16
  %.idx = shl nuw nsw i32 %18, 4
  %41 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx
  %42 = shl nuw nsw i32 %18, 1
  %43 = or disjoint i32 %42, 2
  %44 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %43
  %.idx1 = shl nuw nsw i32 %19, 4
  %45 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx1
  %46 = or disjoint i32 %42, 6
  %47 = getelementptr inbounds i64, ptr addrspace(3) @global_smem, i32 %46
  %.idx2 = shl nuw nsw i32 %13, 4
  %48 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx2
  %.idx3 = shl nuw nsw i32 %14, 4
  %49 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx3
  %.idx4 = shl nuw nsw i32 %15, 4
  %50 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx4
  %.idx5 = shl nuw nsw i32 %16, 4
  %51 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx5
  %52 = or disjoint i32 %24, %18
  %53 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13
  %54 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14
  %55 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15
  %56 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %16
  %57 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %18
  %58 = sext i32 %52 to i64, !dbg !18
  %59 = getelementptr inbounds i8, ptr addrspace(3) %39, i32 8
  %60 = getelementptr inbounds i8, ptr addrspace(3) %39, i32 24
  %invariant.gep = getelementptr float, ptr addrspace(1) %3, i64 %58, !dbg !18
  %61 = getelementptr inbounds i8, ptr addrspace(3) %57, i32 4
  %62 = getelementptr inbounds i8, ptr addrspace(3) %57, i32 8
  %63 = getelementptr inbounds i8, ptr addrspace(3) %57, i32 12
  br label %64, !dbg !18

64:                                               ; preds = %9, %._crit_edge
  %indvars.iv = phi i64 [ 0, %9 ], [ %indvars.iv.next, %._crit_edge ]
  %65 = phi float [ 0.000000e+00, %9 ], [ %284, %._crit_edge ]
  %66 = phi float [ 0.000000e+00, %9 ], [ %285, %._crit_edge ]
  %67 = phi float [ 0.000000e+00, %9 ], [ %286, %._crit_edge ]
  %68 = phi float [ 0.000000e+00, %9 ], [ %287, %._crit_edge ]
  %69 = phi float [ 0.000000e+00, %9 ], [ %280, %._crit_edge ]
  %70 = phi float [ 0.000000e+00, %9 ], [ %281, %._crit_edge ]
  %71 = phi float [ 0.000000e+00, %9 ], [ %282, %._crit_edge ]
  %72 = phi float [ 0.000000e+00, %9 ], [ %283, %._crit_edge ]
  %73 = phi float [ 0.000000e+00, %9 ], [ %276, %._crit_edge ]
  %74 = phi float [ 0.000000e+00, %9 ], [ %277, %._crit_edge ]
  %75 = phi float [ 0.000000e+00, %9 ], [ %278, %._crit_edge ]
  %76 = phi float [ 0.000000e+00, %9 ], [ %279, %._crit_edge ]
  %77 = trunc i64 %indvars.iv to i32, !dbg !19
  %78 = or disjoint i32 %13, %77, !dbg !19
  %79 = lshr i32 %78, 8, !dbg !19
  %80 = and i32 %79, 9, !dbg !19
  %81 = trunc i64 %indvars.iv to i32, !dbg !19
  %82 = or disjoint i32 %14, %81, !dbg !19
  %83 = lshr i32 %82, 8, !dbg !19
  %84 = and i32 %83, 11, !dbg !19
  %85 = trunc i64 %indvars.iv to i32, !dbg !19
  %86 = or disjoint i32 %15, %85, !dbg !19
  %87 = lshr i32 %86, 8, !dbg !19
  %88 = and i32 %87, 13, !dbg !19
  %89 = trunc i64 %indvars.iv to i32, !dbg !19
  %90 = or disjoint i32 %16, %89, !dbg !19
  %91 = lshr i32 %90, 8, !dbg !19
  %92 = and i32 %91, 15, !dbg !19
  %93 = trunc nuw nsw i64 %indvars.iv to i32, !dbg !20
  %94 = lshr i32 %93, 12, !dbg !20
  %95 = zext nneg i32 %80 to i64, !dbg !21
  %96 = getelementptr i64, ptr addrspace(1) %0, i64 %95, !dbg !21
  %97 = zext nneg i32 %84 to i64, !dbg !21
  %98 = getelementptr i64, ptr addrspace(1) %0, i64 %97, !dbg !21
  %99 = zext nneg i32 %88 to i64, !dbg !21
  %100 = getelementptr i64, ptr addrspace(1) %0, i64 %99, !dbg !21
  %101 = zext nneg i32 %92 to i64, !dbg !21
  %102 = getelementptr i64, ptr addrspace(1) %0, i64 %101, !dbg !21
  %103 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %96, i1 true, i1 true) #3, !dbg !22
  %104 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %98, i1 true, i1 true) #3, !dbg !22
  %105 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %100, i1 true, i1 true) #3, !dbg !22
  %106 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %102, i1 true, i1 true) #3, !dbg !22
  %107 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %30, i1 true, i1 true) #3, !dbg !23
  %108 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %30, i1 true, i1 true) #3, !dbg !23
  %109 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %30, i1 true, i1 true) #3, !dbg !23
  %110 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %30, i1 true, i1 true) #3, !dbg !23
  %111 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];\0A\09@!$4 mov.u64 $0, 0x0;\0A\09@!$5 mov.u64 $1, 0x0;", "=l,=l,l,b,b,b"(ptr addrspace(1) %32, i1 true, i1 true, i1 true) #3, !dbg !24
  %112 = extractvalue { i64, i64 } %111, 0, !dbg !24
  %113 = extractvalue { i64, i64 } %111, 1, !dbg !24
  %114 = tail call { i64, i64 } asm sideeffect "mov.u64 $0, 0x0;\0A\09mov.u64 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b64 { $0, $1 }, [ $2 + 0 ];\0A\09@!$4 mov.u64 $0, 0x0;\0A\09@!$5 mov.u64 $1, 0x0;", "=l,=l,l,b,b,b"(ptr addrspace(1) %34, i1 true, i1 true, i1 true) #3, !dbg !24
  %115 = extractvalue { i64, i64 } %114, 0, !dbg !24
  %116 = extractvalue { i64, i64 } %114, 1, !dbg !24
  %117 = add nuw nsw i32 %94, %21, !dbg !25
  %118 = sext i32 %117 to i64, !dbg !26
  %119 = getelementptr float, ptr addrspace(1) %2, i64 %118, !dbg !26
  %120 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %119, i1 %11, i32 0, i1 %11) #3, !dbg !27
  %121 = bitcast i32 %120 to float, !dbg !27
  %122 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %119, i1 %11, i32 0, i1 %11) #3, !dbg !27
  %123 = bitcast i32 %122 to float, !dbg !27
  %124 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %119, i1 %11, i32 0, i1 %11) #3, !dbg !27
  %125 = bitcast i32 %124 to float, !dbg !27
  %126 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %119, i1 %11, i32 0, i1 %11) #3, !dbg !27
  %127 = bitcast i32 %126 to float, !dbg !27
  %128 = lshr i64 %103, 60, !dbg !28
  %129 = and i64 %128, 8, !dbg !28
  %130 = add i64 %129, %103, !dbg !28
  %131 = lshr i64 %104, 60, !dbg !28
  %132 = and i64 %131, 8, !dbg !28
  %133 = add i64 %132, %104, !dbg !28
  %134 = lshr i64 %105, 60, !dbg !28
  %135 = and i64 %134, 8, !dbg !28
  %136 = add i64 %135, %105, !dbg !28
  %137 = lshr i64 %106, 60, !dbg !28
  %138 = and i64 %137, 8, !dbg !28
  %139 = add i64 %138, %106, !dbg !28
  %140 = lshr i64 %107, 60, !dbg !29
  %141 = and i64 %140, 8, !dbg !29
  %142 = add i64 %141, %107, !dbg !29
  %143 = lshr i64 %108, 60, !dbg !29
  %144 = and i64 %143, 8, !dbg !29
  %145 = add i64 %144, %108, !dbg !29
  %146 = lshr i64 %109, 60, !dbg !29
  %147 = and i64 %146, 8, !dbg !29
  %148 = add i64 %147, %109, !dbg !29
  %149 = lshr i64 %110, 60, !dbg !29
  %150 = and i64 %149, 8, !dbg !29
  %151 = add i64 %150, %110, !dbg !29
  %152 = lshr i64 %112, 60, !dbg !30
  %153 = and i64 %152, 8, !dbg !30
  %154 = lshr i64 %113, 60, !dbg !30
  %155 = and i64 %154, 8, !dbg !30
  %156 = lshr i64 %115, 60, !dbg !30
  %157 = and i64 %156, 8, !dbg !30
  %158 = lshr i64 %116, 60, !dbg !30
  %159 = and i64 %158, 8, !dbg !30
  %160 = shl i64 %142, 3, !dbg !31
  %161 = shl i64 %145, 3, !dbg !31
  %162 = shl i64 %148, 3, !dbg !31
  %163 = shl i64 %151, 3, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %164 = insertelement <1 x i64> poison, i64 %160, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %35, <1 x i64> %164, i1 true) #3, !dbg !31
  %165 = insertelement <1 x i64> poison, i64 %161, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %36, <1 x i64> %165, i1 true) #3, !dbg !31
  %166 = insertelement <1 x i64> poison, i64 %162, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %37, <1 x i64> %166, i1 true) #3, !dbg !31
  %167 = insertelement <1 x i64> poison, i64 %163, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %38, <1 x i64> %167, i1 true) #3, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %168 = load i64, ptr addrspace(3) %39, align 16, !dbg !31
  %169 = load i64, ptr addrspace(3) %59, align 8, !dbg !31
  %170 = load i64, ptr addrspace(3) %40, align 16, !dbg !31
  %171 = load i64, ptr addrspace(3) %60, align 8, !dbg !31
  %172 = shl i64 %130, 6, !dbg !32
  %173 = shl i64 %133, 6, !dbg !32
  %174 = shl i64 %136, 6, !dbg !32
  %175 = shl i64 %139, 6, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %176 = insertelement <1 x i64> poison, i64 %172, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %35, <1 x i64> %176, i1 true) #3, !dbg !32
  %177 = insertelement <1 x i64> poison, i64 %173, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %36, <1 x i64> %177, i1 true) #3, !dbg !32
  %178 = insertelement <1 x i64> poison, i64 %174, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %37, <1 x i64> %178, i1 true) #3, !dbg !32
  %179 = insertelement <1 x i64> poison, i64 %175, i64 0, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %38, <1 x i64> %179, i1 true) #3, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %180 = load i64, ptr addrspace(3) %39, align 16, !dbg !32
  %181 = load i64, ptr addrspace(3) %59, align 8, !dbg !32
  %182 = load i64, ptr addrspace(3) %40, align 16, !dbg !32
  %183 = load i64, ptr addrspace(3) %60, align 8, !dbg !32
  %184 = lshr exact i64 %indvars.iv, 3, !dbg !33
  %185 = and i64 %184, 512, !dbg !33
  %186 = getelementptr float, ptr addrspace(1) %1, i64 %112, !dbg !34
  %187 = getelementptr float, ptr addrspace(1) %186, i64 %153, !dbg !34
  %188 = getelementptr float, ptr addrspace(1) %187, i64 %168, !dbg !34
  %189 = getelementptr float, ptr addrspace(1) %188, i64 %180, !dbg !34
  %190 = getelementptr float, ptr addrspace(1) %189, i64 %185, !dbg !34
  %191 = getelementptr float, ptr addrspace(1) %190, i64 %23, !dbg !34
  %192 = getelementptr float, ptr addrspace(1) %1, i64 %113, !dbg !34
  %193 = getelementptr float, ptr addrspace(1) %192, i64 %155, !dbg !34
  %194 = getelementptr float, ptr addrspace(1) %193, i64 %169, !dbg !34
  %195 = getelementptr float, ptr addrspace(1) %194, i64 %181, !dbg !34
  %196 = getelementptr float, ptr addrspace(1) %195, i64 %185, !dbg !34
  %197 = getelementptr float, ptr addrspace(1) %196, i64 %23, !dbg !34
  %198 = getelementptr float, ptr addrspace(1) %1, i64 %115, !dbg !34
  %199 = getelementptr float, ptr addrspace(1) %198, i64 %157, !dbg !34
  %200 = getelementptr float, ptr addrspace(1) %199, i64 %170, !dbg !34
  %201 = getelementptr float, ptr addrspace(1) %200, i64 %182, !dbg !34
  %202 = getelementptr float, ptr addrspace(1) %201, i64 %185, !dbg !34
  %203 = getelementptr float, ptr addrspace(1) %202, i64 %23, !dbg !34
  %204 = getelementptr float, ptr addrspace(1) %1, i64 %116, !dbg !34
  %205 = getelementptr float, ptr addrspace(1) %204, i64 %159, !dbg !34
  %206 = getelementptr float, ptr addrspace(1) %205, i64 %171, !dbg !34
  %207 = getelementptr float, ptr addrspace(1) %206, i64 %183, !dbg !34
  %208 = getelementptr float, ptr addrspace(1) %207, i64 %185, !dbg !34
  %209 = getelementptr float, ptr addrspace(1) %208, i64 %23, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %210 = ptrtoint ptr addrspace(1) %191 to i64, !dbg !35
  %211 = ptrtoint ptr addrspace(1) %197 to i64, !dbg !35
  %212 = ptrtoint ptr addrspace(1) %203 to i64, !dbg !35
  %213 = ptrtoint ptr addrspace(1) %209 to i64, !dbg !35
  %214 = insertelement <1 x i64> poison, i64 %210, i64 0, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %41, <1 x i64> %214, i1 true) #3, !dbg !35
  %215 = insertelement <1 x i64> poison, i64 %211, i64 0, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %44, <1 x i64> %215, i1 true) #3, !dbg !35
  %216 = insertelement <1 x i64> poison, i64 %212, i64 0, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %45, <1 x i64> %216, i1 true) #3, !dbg !35
  %217 = insertelement <1 x i64> poison, i64 %213, i64 0, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b64 [ $0 + 0 ], $1;", "r,l,b"(ptr addrspace(3) %47, <1 x i64> %217, i1 true) #3, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %218 = load i64, ptr addrspace(3) %48, align 16, !dbg !35
  %219 = load i64, ptr addrspace(3) %49, align 16, !dbg !35
  %220 = load i64, ptr addrspace(3) %50, align 16, !dbg !35
  %221 = load i64, ptr addrspace(3) %51, align 16, !dbg !35
  %222 = inttoptr i64 %218 to ptr addrspace(1), !dbg !35
  %223 = inttoptr i64 %219 to ptr addrspace(1), !dbg !35
  %224 = inttoptr i64 %220 to ptr addrspace(1), !dbg !35
  %225 = inttoptr i64 %221 to ptr addrspace(1), !dbg !35
  %226 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %222, i1 %11, i32 0, i1 %11) #3, !dbg !35
  %227 = bitcast i32 %226 to float, !dbg !35
  %228 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %223, i1 %11, i32 0, i1 %11) #3, !dbg !35
  %229 = bitcast i32 %228 to float, !dbg !35
  %230 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %224, i1 %11, i32 0, i1 %11) #3, !dbg !35
  %231 = bitcast i32 %230 to float, !dbg !35
  %232 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %225, i1 %11, i32 0, i1 %11) #3, !dbg !35
  %233 = bitcast i32 %232 to float, !dbg !35
  %234 = fadd float %121, %227, !dbg !36
  %235 = fadd float %123, %229, !dbg !36
  %236 = fadd float %125, %231, !dbg !36
  %237 = fadd float %127, %233, !dbg !36
  %238 = icmp eq i64 %indvars.iv, 0, !dbg !37
  br i1 %238, label %._crit_edge, label %239, !dbg !38

239:                                              ; preds = %64
  %240 = fsub float %234, %73, !dbg !42
  %241 = fsub float %235, %74, !dbg !42
  %242 = fsub float %236, %75, !dbg !42
  %243 = fsub float %237, %76, !dbg !42
  %244 = fadd float %65, 1.000000e+00, !dbg !43
  %245 = fadd float %66, 1.000000e+00, !dbg !43
  %246 = fadd float %67, 1.000000e+00, !dbg !43
  %247 = fadd float %68, 1.000000e+00, !dbg !43
  %248 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %240, float %244) #3, !dbg !44
  %249 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %241, float %245) #3, !dbg !44
  %250 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %242, float %246) #3, !dbg !44
  %251 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %243, float %247) #3, !dbg !44
  %252 = fadd float %73, %248, !dbg !45
  %253 = fadd float %74, %249, !dbg !45
  %254 = fadd float %75, %250, !dbg !45
  %255 = fadd float %76, %251, !dbg !45
  %256 = fsub float %234, %252, !dbg !46
  %257 = fsub float %235, %253, !dbg !46
  %258 = fsub float %236, %254, !dbg !46
  %259 = fsub float %237, %255, !dbg !46
  %260 = fmul float %240, %256, !dbg !47
  %261 = fmul float %241, %257, !dbg !47
  %262 = fmul float %242, %258, !dbg !47
  %263 = fmul float %243, %259, !dbg !47
  %264 = fadd float %69, %260, !dbg !48
  %265 = fadd float %70, %261, !dbg !48
  %266 = fadd float %71, %262, !dbg !48
  %267 = fadd float %72, %263, !dbg !48
  br label %._crit_edge, !dbg !38

._crit_edge:                                      ; preds = %64, %239
  %268 = phi float [ %264, %239 ], [ 0.000000e+00, %64 ], !dbg !41
  %269 = phi float [ %265, %239 ], [ 0.000000e+00, %64 ], !dbg !41
  %270 = phi float [ %266, %239 ], [ 0.000000e+00, %64 ], !dbg !41
  %271 = phi float [ %267, %239 ], [ 0.000000e+00, %64 ], !dbg !41
  %.pn12 = phi float [ %252, %239 ], [ %234, %64 ]
  %.pn10 = phi float [ %253, %239 ], [ %235, %64 ]
  %.pn8 = phi float [ %254, %239 ], [ %236, %64 ]
  %.pn6 = phi float [ %255, %239 ], [ %237, %64 ]
  %272 = phi float [ %244, %239 ], [ 1.000000e+00, %64 ], !dbg !41
  %273 = phi float [ %245, %239 ], [ 1.000000e+00, %64 ], !dbg !41
  %274 = phi float [ %246, %239 ], [ 1.000000e+00, %64 ], !dbg !41
  %275 = phi float [ %247, %239 ], [ 1.000000e+00, %64 ], !dbg !41
  %276 = select i1 %11, float %.pn12, float %73, !dbg !49
  %277 = select i1 %11, float %.pn10, float %74, !dbg !49
  %278 = select i1 %11, float %.pn8, float %75, !dbg !49
  %279 = select i1 %11, float %.pn6, float %76, !dbg !49
  %280 = select i1 %11, float %268, float %69, !dbg !50
  %281 = select i1 %11, float %269, float %70, !dbg !50
  %282 = select i1 %11, float %270, float %71, !dbg !50
  %283 = select i1 %11, float %271, float %72, !dbg !50
  %284 = select i1 %11, float %272, float %65, !dbg !51
  %285 = select i1 %11, float %273, float %66, !dbg !51
  %286 = select i1 %11, float %274, float %67, !dbg !51
  %287 = select i1 %11, float %275, float %68, !dbg !51
  %gep = getelementptr float, ptr addrspace(1) %invariant.gep, i64 %indvars.iv, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %288 = bitcast float %234 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %53, <1 x i32> %288, i1 true) #3, !dbg !53
  %289 = bitcast float %235 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %54, <1 x i32> %289, i1 true) #3, !dbg !53
  %290 = bitcast float %236 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %55, <1 x i32> %290, i1 true) #3, !dbg !53
  %291 = bitcast float %237 to <1 x i32>, !dbg !53
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %56, <1 x i32> %291, i1 true) #3, !dbg !53
  tail call void @llvm.nvvm.barrier0(), !dbg !53
  %.extract = load i32, ptr addrspace(3) %57, align 16, !dbg !53
  %.extract16 = load i32, ptr addrspace(3) %61, align 4, !dbg !53
  %.extract17 = load i32, ptr addrspace(3) %62, align 8, !dbg !53
  %.extract18 = load i32, ptr addrspace(3) %63, align 4, !dbg !53
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract16, i32 %.extract17, i32 %.extract18, ptr addrspace(1) %gep, i1 %11) #3, !dbg !53
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 2048, !dbg !18
  %292 = icmp samesign ult i64 %indvars.iv, 6144, !dbg !18
  br i1 %292, label %64, label %293, !dbg !18

293:                                              ; preds = %._crit_edge
  %294 = lshr i32 %12, 5, !dbg !12
  %295 = and i32 %12, 31, !dbg !12
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %296 = fsub float %277, %276, !dbg !56
  %297 = fadd float %284, %285, !dbg !58
  %298 = fcmp oeq float %297, 0.000000e+00, !dbg !59
  %299 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %285, float %297) #3, !dbg !60
  %300 = select i1 %298, float 0.000000e+00, float %299, !dbg !61
  %301 = fmul float %296, %300, !dbg !62
  %302 = fadd float %276, %301, !dbg !63
  %303 = fadd float %280, %281, !dbg !64
  %304 = fmul float %296, %296, !dbg !65
  %305 = fmul float %304, %284, !dbg !66
  %306 = fmul float %305, %300, !dbg !67
  %307 = fadd float %303, %306, !dbg !68
  %308 = fsub float %278, %302, !dbg !56
  %309 = fadd float %286, %297, !dbg !58
  %310 = fcmp oeq float %309, 0.000000e+00, !dbg !59
  %311 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %286, float %309) #3, !dbg !60
  %312 = select i1 %310, float 0.000000e+00, float %311, !dbg !61
  %313 = fmul float %312, %308, !dbg !62
  %314 = fadd float %302, %313, !dbg !63
  %315 = fadd float %282, %307, !dbg !64
  %316 = fmul float %308, %308, !dbg !65
  %317 = fmul float %297, %316, !dbg !66
  %318 = fmul float %312, %317, !dbg !67
  %319 = fadd float %315, %318, !dbg !68
  %320 = fsub float %279, %314, !dbg !56
  %321 = fadd float %287, %309, !dbg !58
  %322 = fcmp oeq float %321, 0.000000e+00, !dbg !59
  %323 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %287, float %321) #3, !dbg !60
  %324 = select i1 %322, float 0.000000e+00, float %323, !dbg !61
  %325 = fmul float %324, %320, !dbg !62
  %326 = fadd float %314, %325, !dbg !63
  %327 = fadd float %283, %319, !dbg !64
  %328 = fmul float %320, %320, !dbg !65
  %329 = fmul float %309, %328, !dbg !66
  %330 = fmul float %324, %329, !dbg !67
  %331 = fadd float %327, %330, !dbg !68
  %332 = bitcast float %326 to i32, !dbg !54
  %333 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %332, i32 16, i32 31), !dbg !54
  %334 = bitcast i32 %333 to float, !dbg !54
  %335 = bitcast float %331 to i32, !dbg !54
  %336 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %335, i32 16, i32 31), !dbg !54
  %337 = bitcast i32 %336 to float, !dbg !54
  %338 = bitcast float %321 to i32, !dbg !54
  %339 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %338, i32 16, i32 31), !dbg !54
  %340 = bitcast i32 %339 to float, !dbg !54
  %341 = fsub float %334, %326, !dbg !56
  %342 = fadd float %321, %340, !dbg !58
  %343 = fcmp oeq float %342, 0.000000e+00, !dbg !59
  %344 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %340, float %342) #3, !dbg !60
  %345 = select i1 %343, float 0.000000e+00, float %344, !dbg !61
  %346 = fmul float %345, %341, !dbg !62
  %347 = fadd float %326, %346, !dbg !63
  %348 = fadd float %331, %337, !dbg !64
  %349 = fmul float %341, %341, !dbg !65
  %350 = fmul float %321, %349, !dbg !66
  %351 = fmul float %345, %350, !dbg !67
  %352 = fadd float %348, %351, !dbg !68
  %353 = bitcast float %347 to i32, !dbg !54
  %354 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %353, i32 8, i32 31), !dbg !54
  %355 = bitcast i32 %354 to float, !dbg !54
  %356 = bitcast float %352 to i32, !dbg !54
  %357 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %356, i32 8, i32 31), !dbg !54
  %358 = bitcast i32 %357 to float, !dbg !54
  %359 = bitcast float %342 to i32, !dbg !54
  %360 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %359, i32 8, i32 31), !dbg !54
  %361 = bitcast i32 %360 to float, !dbg !54
  %362 = fsub float %355, %347, !dbg !56
  %363 = fadd float %342, %361, !dbg !58
  %364 = fcmp oeq float %363, 0.000000e+00, !dbg !59
  %365 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %361, float %363) #3, !dbg !60
  %366 = select i1 %364, float 0.000000e+00, float %365, !dbg !61
  %367 = fmul float %362, %366, !dbg !62
  %368 = fadd float %347, %367, !dbg !63
  %369 = fadd float %352, %358, !dbg !64
  %370 = fmul float %362, %362, !dbg !65
  %371 = fmul float %342, %370, !dbg !66
  %372 = fmul float %366, %371, !dbg !67
  %373 = fadd float %369, %372, !dbg !68
  %374 = bitcast float %368 to i32, !dbg !54
  %375 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %374, i32 4, i32 31), !dbg !54
  %376 = bitcast i32 %375 to float, !dbg !54
  %377 = bitcast float %373 to i32, !dbg !54
  %378 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %377, i32 4, i32 31), !dbg !54
  %379 = bitcast i32 %378 to float, !dbg !54
  %380 = bitcast float %363 to i32, !dbg !54
  %381 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %380, i32 4, i32 31), !dbg !54
  %382 = bitcast i32 %381 to float, !dbg !54
  %383 = fsub float %376, %368, !dbg !56
  %384 = fadd float %363, %382, !dbg !58
  %385 = fcmp oeq float %384, 0.000000e+00, !dbg !59
  %386 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %382, float %384) #3, !dbg !60
  %387 = select i1 %385, float 0.000000e+00, float %386, !dbg !61
  %388 = fmul float %383, %387, !dbg !62
  %389 = fadd float %368, %388, !dbg !63
  %390 = fadd float %373, %379, !dbg !64
  %391 = fmul float %383, %383, !dbg !65
  %392 = fmul float %363, %391, !dbg !66
  %393 = fmul float %387, %392, !dbg !67
  %394 = fadd float %390, %393, !dbg !68
  %395 = bitcast float %389 to i32, !dbg !54
  %396 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %395, i32 2, i32 31), !dbg !54
  %397 = bitcast i32 %396 to float, !dbg !54
  %398 = bitcast float %394 to i32, !dbg !54
  %399 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %398, i32 2, i32 31), !dbg !54
  %400 = bitcast i32 %399 to float, !dbg !54
  %401 = bitcast float %384 to i32, !dbg !54
  %402 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %401, i32 2, i32 31), !dbg !54
  %403 = bitcast i32 %402 to float, !dbg !54
  %404 = fsub float %397, %389, !dbg !56
  %405 = fadd float %384, %403, !dbg !58
  %406 = fcmp oeq float %405, 0.000000e+00, !dbg !59
  %407 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %403, float %405) #3, !dbg !60
  %408 = select i1 %406, float 0.000000e+00, float %407, !dbg !61
  %409 = fmul float %404, %408, !dbg !62
  %410 = fadd float %389, %409, !dbg !63
  %411 = fadd float %394, %400, !dbg !64
  %412 = fmul float %404, %404, !dbg !65
  %413 = fmul float %384, %412, !dbg !66
  %414 = fmul float %408, %413, !dbg !67
  %415 = fadd float %411, %414, !dbg !68
  %416 = bitcast float %410 to i32, !dbg !54
  %417 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %416, i32 1, i32 31), !dbg !54
  %418 = bitcast i32 %417 to float, !dbg !54
  %419 = bitcast float %415 to i32, !dbg !54
  %420 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %419, i32 1, i32 31), !dbg !54
  %421 = bitcast i32 %420 to float, !dbg !54
  %422 = bitcast float %405 to i32, !dbg !54
  %423 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %422, i32 1, i32 31), !dbg !54
  %424 = bitcast i32 %423 to float, !dbg !54
  %425 = fsub float %418, %410, !dbg !56
  %426 = fadd float %405, %424, !dbg !58
  %427 = fcmp oeq float %426, 0.000000e+00, !dbg !59
  %428 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %424, float %426) #3, !dbg !60
  %429 = select i1 %427, float 0.000000e+00, float %428, !dbg !61
  %430 = fmul float %425, %429, !dbg !62
  %431 = fadd float %410, %430, !dbg !63
  %432 = fadd float %415, %421, !dbg !64
  %433 = fmul float %425, %425, !dbg !65
  %434 = fmul float %405, %433, !dbg !66
  %435 = fmul float %429, %434, !dbg !67
  %436 = fadd float %432, %435, !dbg !68
  %437 = icmp eq i32 %295, 0, !dbg !54
  %438 = and i32 %294, 15, !dbg !54
  %439 = getelementptr float, ptr addrspace(3) @global_smem, i32 %438, !dbg !54
  %440 = bitcast float %431 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %439, <1 x i32> %440, i1 %437) #3, !dbg !54
  %441 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %438, !dbg !54
  %442 = bitcast float %436 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %441, <1 x i32> %442, i1 %437) #3, !dbg !54
  %443 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %438, !dbg !54
  %444 = bitcast float %426 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %443, <1 x i32> %444, i1 %437) #3, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %445 = icmp slt i32 %12, 16, !dbg !54
  %446 = getelementptr float, ptr addrspace(3) @global_smem, i32 %12, !dbg !54
  %447 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %446, i1 %445) #3, !dbg !54
  %448 = bitcast i32 %447 to float, !dbg !54
  %449 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), i32 %12, !dbg !54
  %450 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %449, i1 %445) #3, !dbg !54
  %451 = bitcast i32 %450 to float, !dbg !54
  %452 = getelementptr float, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), i32 %12, !dbg !54
  %453 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %452, i1 %445) #3, !dbg !54
  %454 = bitcast i32 %453 to float, !dbg !54
  %455 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %447, i32 8, i32 31), !dbg !54
  %456 = bitcast i32 %455 to float, !dbg !54
  %457 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %450, i32 8, i32 31), !dbg !54
  %458 = bitcast i32 %457 to float, !dbg !54
  %459 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %453, i32 8, i32 31), !dbg !54
  %460 = bitcast i32 %459 to float, !dbg !54
  %461 = fsub float %456, %448, !dbg !56
  %462 = fadd float %454, %460, !dbg !58
  %463 = fcmp oeq float %462, 0.000000e+00, !dbg !59
  %464 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %460, float %462) #3, !dbg !60
  %465 = select i1 %463, float 0.000000e+00, float %464, !dbg !61
  %466 = fmul float %461, %465, !dbg !62
  %467 = fadd float %466, %448, !dbg !63
  %468 = fadd float %451, %458, !dbg !64
  %469 = fmul float %461, %461, !dbg !65
  %470 = fmul float %469, %454, !dbg !66
  %471 = fmul float %470, %465, !dbg !67
  %472 = fadd float %468, %471, !dbg !68
  %473 = bitcast float %467 to i32, !dbg !54
  %474 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %473, i32 4, i32 31), !dbg !54
  %475 = bitcast i32 %474 to float, !dbg !54
  %476 = bitcast float %472 to i32, !dbg !54
  %477 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %476, i32 4, i32 31), !dbg !54
  %478 = bitcast i32 %477 to float, !dbg !54
  %479 = bitcast float %462 to i32, !dbg !54
  %480 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %479, i32 4, i32 31), !dbg !54
  %481 = bitcast i32 %480 to float, !dbg !54
  %482 = fsub float %475, %467, !dbg !56
  %483 = fadd float %462, %481, !dbg !58
  %484 = fcmp oeq float %483, 0.000000e+00, !dbg !59
  %485 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %481, float %483) #3, !dbg !60
  %486 = select i1 %484, float 0.000000e+00, float %485, !dbg !61
  %487 = fmul float %482, %486, !dbg !62
  %488 = fadd float %467, %487, !dbg !63
  %489 = fadd float %472, %478, !dbg !64
  %490 = fmul float %482, %482, !dbg !65
  %491 = fmul float %462, %490, !dbg !66
  %492 = fmul float %486, %491, !dbg !67
  %493 = fadd float %489, %492, !dbg !68
  %494 = bitcast float %488 to i32, !dbg !54
  %495 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %494, i32 2, i32 31), !dbg !54
  %496 = bitcast i32 %495 to float, !dbg !54
  %497 = bitcast float %493 to i32, !dbg !54
  %498 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %497, i32 2, i32 31), !dbg !54
  %499 = bitcast i32 %498 to float, !dbg !54
  %500 = bitcast float %483 to i32, !dbg !54
  %501 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %500, i32 2, i32 31), !dbg !54
  %502 = bitcast i32 %501 to float, !dbg !54
  %503 = fsub float %496, %488, !dbg !56
  %504 = fadd float %483, %502, !dbg !58
  %505 = fcmp oeq float %504, 0.000000e+00, !dbg !59
  %506 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %502, float %504) #3, !dbg !60
  %507 = select i1 %505, float 0.000000e+00, float %506, !dbg !61
  %508 = fmul float %503, %507, !dbg !62
  %509 = fadd float %488, %508, !dbg !63
  %510 = fadd float %493, %499, !dbg !64
  %511 = fmul float %503, %503, !dbg !65
  %512 = fmul float %483, %511, !dbg !66
  %513 = fmul float %507, %512, !dbg !67
  %514 = fadd float %510, %513, !dbg !68
  %515 = bitcast float %509 to i32, !dbg !54
  %516 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %515, i32 1, i32 31), !dbg !54
  %517 = bitcast i32 %516 to float, !dbg !54
  %518 = bitcast float %514 to i32, !dbg !54
  %519 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %518, i32 1, i32 31), !dbg !54
  %520 = bitcast i32 %519 to float, !dbg !54
  %521 = bitcast float %504 to i32, !dbg !54
  %522 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %521, i32 1, i32 31), !dbg !54
  %523 = bitcast i32 %522 to float, !dbg !54
  %524 = fsub float %517, %509, !dbg !56
  %525 = fadd float %504, %523, !dbg !58
  %526 = fcmp oeq float %525, 0.000000e+00, !dbg !59
  %527 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %523, float %525) #3, !dbg !60
  %528 = select i1 %526, float 0.000000e+00, float %527, !dbg !61
  %529 = fmul float %524, %528, !dbg !62
  %530 = fadd float %509, %529, !dbg !63
  %531 = fadd float %514, %520, !dbg !64
  %532 = fmul float %524, %524, !dbg !65
  %533 = fmul float %504, %532, !dbg !66
  %534 = fmul float %528, %533, !dbg !67
  %535 = fadd float %531, %534, !dbg !68
  %536 = and i32 %12, 15, !dbg !54
  %537 = icmp eq i32 %536, 0, !dbg !54
  %538 = and i1 %445, %537, !dbg !54
  %539 = bitcast float %530 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %446, <1 x i32> %539, i1 %538) #3, !dbg !54
  %540 = bitcast float %535 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %449, <1 x i32> %540, i1 %538) #3, !dbg !54
  %541 = bitcast float %525 to <1 x i32>, !dbg !54
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %452, <1 x i32> %541, i1 %538) #3, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !54
  %542 = load i32, ptr addrspace(3) @global_smem, align 16, !dbg !54
  %543 = load i32, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 64), align 16, !dbg !54
  %544 = load i32, ptr addrspace(3) getelementptr (i8, ptr addrspace(3) @global_smem, i32 128), align 16, !dbg !54
  %545 = sext i32 %10 to i64, !dbg !69
  %546 = getelementptr float, ptr addrspace(1) %4, i64 %545, !dbg !69
  %547 = icmp eq i32 %13, 0, !dbg !70
  %548 = and i1 %547, %11, !dbg !70
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %542, ptr addrspace(1) %546, i1 %548) #3, !dbg !70
  %549 = getelementptr float, ptr addrspace(1) %5, i64 %545, !dbg !71
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %543, ptr addrspace(1) %549, i1 %548) #3, !dbg !72
  %550 = getelementptr float, ptr addrspace(1) %6, i64 %545, !dbg !73
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %544, ptr addrspace(1) %550, i1 %548) #3, !dbg !74
  ret void, !dbg !75
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py", directory: "inductor_cache/7s")
!4 = !{ptr @triton_red_fused__unsafe_index_convolution_native_group_norm_31, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused__unsafe_index_convolution_native_group_norm_31, !"reqntidx", i32 512}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused__unsafe_index_convolution_native_group_norm_31", linkageName: "triton_red_fused__unsafe_index_convolution_native_group_norm_31", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 33, scope: !7)
!13 = !DILocation(line: 27, column: 19, scope: !7)
!14 = !DILocation(line: 42, column: 42, scope: !7)
!15 = !DILocation(line: 53, column: 76, scope: !7)
!16 = !DILocation(line: 53, column: 71, scope: !7)
!17 = !DILocation(line: 62, column: 39, scope: !7)
!18 = !DILocation(line: 31, column: 36, scope: !7)
!19 = !DILocation(line: 34, column: 32, scope: !7)
!20 = !DILocation(line: 37, column: 23, scope: !7)
!21 = !DILocation(line: 39, column: 34, scope: !7)
!22 = !DILocation(line: 39, column: 39, scope: !7)
!23 = !DILocation(line: 40, column: 39, scope: !7)
!24 = !DILocation(line: 41, column: 39, scope: !7)
!25 = !DILocation(line: 42, column: 40, scope: !7)
!26 = !DILocation(line: 42, column: 35, scope: !7)
!27 = !DILocation(line: 42, column: 47, scope: !7)
!28 = !DILocation(line: 46, column: 36, scope: !7)
!29 = !DILocation(line: 49, column: 36, scope: !7)
!30 = !DILocation(line: 52, column: 39, scope: !7)
!31 = !DILocation(line: 53, column: 45, scope: !7)
!32 = !DILocation(line: 53, column: 55, scope: !7)
!33 = !DILocation(line: 53, column: 66, scope: !7)
!34 = !DILocation(line: 53, column: 35, scope: !7)
!35 = !DILocation(line: 53, column: 81, scope: !7)
!36 = !DILocation(line: 54, column: 24, scope: !7)
!37 = !DILocation(line: 57, column: 66, scope: !7)
!38 = !DILocation(line: 178, column: 7, scope: !39, inlinedAt: !41)
!39 = distinct !DILexicalBlockFile(scope: !7, file: !40, discriminator: 0)
!40 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!41 = !DILocation(line: 57, column: 55, scope: !7)
!42 = !DILocation(line: 183, column: 24, scope: !39, inlinedAt: !41)
!43 = !DILocation(line: 184, column: 30, scope: !39, inlinedAt: !41)
!44 = !DILocation(line: 185, column: 34, scope: !39, inlinedAt: !41)
!45 = !DILocation(line: 185, column: 26, scope: !39, inlinedAt: !41)
!46 = !DILocation(line: 186, column: 39, scope: !39, inlinedAt: !41)
!47 = !DILocation(line: 186, column: 31, scope: !39, inlinedAt: !41)
!48 = !DILocation(line: 186, column: 22, scope: !39, inlinedAt: !41)
!49 = !DILocation(line: 59, column: 62, scope: !7)
!50 = !DILocation(line: 60, column: 58, scope: !7)
!51 = !DILocation(line: 61, column: 66, scope: !7)
!52 = !DILocation(line: 62, column: 29, scope: !7)
!53 = !DILocation(line: 62, column: 51, scope: !7)
!54 = !DILocation(line: 204, column: 46, scope: !39, inlinedAt: !55)
!55 = !DILocation(line: 64, column: 44, scope: !7)
!56 = !DILocation(line: 192, column: 21, scope: !57, inlinedAt: !55)
!57 = distinct !DILexicalBlockFile(scope: !39, file: !40, discriminator: 0)
!58 = !DILocation(line: 193, column: 28, scope: !57, inlinedAt: !55)
!59 = !DILocation(line: 194, column: 39, scope: !57, inlinedAt: !55)
!60 = !DILocation(line: 194, column: 60, scope: !57, inlinedAt: !55)
!61 = !DILocation(line: 194, column: 49, scope: !57, inlinedAt: !55)
!62 = !DILocation(line: 196, column: 25, scope: !57, inlinedAt: !55)
!63 = !DILocation(line: 196, column: 17, scope: !57, inlinedAt: !55)
!64 = !DILocation(line: 197, column: 15, scope: !57, inlinedAt: !55)
!65 = !DILocation(line: 197, column: 30, scope: !57, inlinedAt: !55)
!66 = !DILocation(line: 197, column: 38, scope: !57, inlinedAt: !55)
!67 = !DILocation(line: 197, column: 49, scope: !57, inlinedAt: !55)
!68 = !DILocation(line: 197, column: 22, scope: !57, inlinedAt: !55)
!69 = !DILocation(line: 69, column: 25, scope: !7)
!70 = !DILocation(line: 69, column: 37, scope: !7)
!71 = !DILocation(line: 70, column: 25, scope: !7)
!72 = !DILocation(line: 70, column: 37, scope: !7)
!73 = !DILocation(line: 71, column: 25, scope: !7)
!74 = !DILocation(line: 71, column: 37, scope: !7)
!75 = !DILocation(line: 71, column: 4, scope: !7)
