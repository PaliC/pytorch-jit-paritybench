; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_48(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 3, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 1, !dbg !12
  %10 = and i32 %9, 6, !dbg !12
  %11 = lshr i32 %8, 4, !dbg !12
  %12 = and i32 %11, 7, !dbg !12
  %13 = or disjoint i32 %7, %10, !dbg !13
  %14 = or disjoint i32 %7, %12, !dbg !13
  %15 = icmp slt i32 %13, 8, !dbg !14
  %16 = icmp slt i32 %14, 8, !dbg !14
  %17 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %18 = shl i32 %17, 5, !dbg !16
  %19 = lshr i32 %8, 2, !dbg !17
  %20 = and i32 %19, 31, !dbg !17
  %21 = and i32 %9, 30, !dbg !17
  %22 = or disjoint i32 %18, %20, !dbg !18
  %23 = or disjoint i32 %18, %21, !dbg !18
  %24 = shl i32 %22, 1, !dbg !19
  %25 = shl i32 %13, 12, !dbg !20
  %26 = add i32 %24, %25, !dbg !21
  %27 = sext i32 %26 to i64, !dbg !22
  %28 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !22
  %29 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %28, i1 %15) #2, !dbg !23
  %30 = extractvalue { i32, i32 } %29, 0, !dbg !23
  %31 = extractvalue { i32, i32 } %29, 1, !dbg !23
  %32 = bitcast i32 %30 to float, !dbg !23
  %33 = bitcast i32 %31 to float, !dbg !23
  %34 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %1, i1 %15) #2, !dbg !24
  %35 = extractvalue { i32, i32 } %34, 0, !dbg !24
  %36 = extractvalue { i32, i32 } %34, 1, !dbg !24
  %37 = bitcast i32 %35 to float, !dbg !24
  %38 = bitcast i32 %36 to float, !dbg !24
  %39 = fadd float %32, %37, !dbg !25
  %40 = fadd float %33, %38, !dbg !25
  %41 = shl i32 %14, 12, !dbg !26
  %42 = add i32 %23, %41, !dbg !27
  %43 = sext i32 %42 to i64, !dbg !28
  %44 = getelementptr float, ptr addrspace(1) %2, i64 %43, !dbg !28
  %45 = shl i32 %8, 6, !dbg !29
  %46 = and i32 %45, 192, !dbg !29
  %47 = or disjoint i32 %46, %20, !dbg !29
  %48 = and i32 %9, 254, !dbg !29
  %49 = lshr exact i32 %46, 3, !dbg !29
  %50 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %49, !dbg !29
  %51 = getelementptr float, ptr addrspace(3) %50, i32 %47, !dbg !29
  %52 = bitcast float %39 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %51, <1 x i32> %52, i1 true) #2, !dbg !29
  %53 = or disjoint i32 %47, 32, !dbg !29
  %54 = lshr i32 %53, 5, !dbg !29
  %55 = getelementptr float, ptr addrspace(3) @global_smem, i32 %54, !dbg !29
  %56 = getelementptr float, ptr addrspace(3) %55, i32 %53, !dbg !29
  %57 = bitcast float %40 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %56, <1 x i32> %57, i1 true) #2, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %58 = lshr i32 %48, 5, !dbg !29
  %59 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %58, !dbg !29
  %60 = getelementptr inbounds float, ptr addrspace(3) %59, i32 %48, !dbg !29
  %61 = load i32, ptr addrspace(3) %60, align 4, !dbg !29
  %62 = or disjoint i32 %48, 1, !dbg !29
  %63 = getelementptr inbounds float, ptr addrspace(3) %59, i32 %62, !dbg !29
  %64 = load i32, ptr addrspace(3) %63, align 4, !dbg !29
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %61, i32 %64, ptr addrspace(1) %44, i1 %16) #2, !dbg !29
  ret void, !dbg !30
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ch3tzwbeqyu6zcmsjml3bh3zqxbcon54l2vrsjrriuxjhihf6dc3.py", directory: "inductor_cache/h3")
!4 = !{ptr @triton_poi_fused_convolution_48, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_48, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_48", linkageName: "triton_poi_fused_convolution_48", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 32, column: 37, scope: !7)
!20 = !DILocation(line: 32, column: 47, scope: !7)
!21 = !DILocation(line: 32, column: 42, scope: !7)
!22 = !DILocation(line: 32, column: 30, scope: !7)
!23 = !DILocation(line: 32, column: 52, scope: !7)
!24 = !DILocation(line: 33, column: 35, scope: !7)
!25 = !DILocation(line: 34, column: 18, scope: !7)
!26 = !DILocation(line: 35, column: 35, scope: !7)
!27 = !DILocation(line: 35, column: 30, scope: !7)
!28 = !DILocation(line: 35, column: 25, scope: !7)
!29 = !DILocation(line: 35, column: 46, scope: !7)
!30 = !DILocation(line: 35, column: 4, scope: !7)
