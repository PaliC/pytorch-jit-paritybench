; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_avg_pool2d_relu_threshold_backward_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %6 = shl i32 %5, 8, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 1, !dbg !12
  %9 = and i32 %8, 254, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = or disjoint i32 %10, 1, !dbg !13
  %12 = sdiv i32 %10, 32, !dbg !14
  %13 = srem i32 %11, 32, !dbg !15
  %14 = sext i32 %10 to i64, !dbg !16
  %15 = getelementptr float, ptr addrspace(1) %0, i64 %14, !dbg !16
  %16 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %15, i1 true) #1, !dbg !17
  %17 = extractvalue { i32, i32 } %16, 0, !dbg !17
  %18 = extractvalue { i32, i32 } %16, 1, !dbg !17
  %19 = add nsw i32 %13, -1, !dbg !18
  %20 = icmp sgt i32 %13, 0, !dbg !19
  %21 = add i32 %10, -33, !dbg !20
  %22 = add i32 %10, -32, !dbg !20
  %23 = sext i32 %21 to i64, !dbg !21
  %24 = getelementptr float, ptr addrspace(1) %0, i64 %23, !dbg !21
  %25 = sext i32 %22 to i64, !dbg !21
  %26 = getelementptr float, ptr addrspace(1) %0, i64 %25, !dbg !21
  %27 = add nsw i32 %13, 1, !dbg !22
  %28 = icmp ult i32 %27, 32, !dbg !22
  %29 = add i32 %10, -31, !dbg !23
  %30 = add i32 %10, -30, !dbg !23
  %31 = sext i32 %29 to i64, !dbg !24
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !24
  %33 = sext i32 %30 to i64, !dbg !24
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !24
  %35 = insertelement <2 x i32> poison, i32 %10, i64 0, !dbg !15
  %36 = insertelement <2 x i32> %35, i32 %12, i64 1, !dbg !15
  %37 = srem <2 x i32> %36, splat (i32 32), !dbg !15
  %38 = extractelement <2 x i32> %37, i64 1, !dbg !25
  %39 = add nsw i32 %38, -1, !dbg !26
  %40 = icmp sgt i32 %38, 0, !dbg !27
  %41 = extractelement <2 x i32> %37, i64 0, !dbg !28
  %42 = add nsw i32 %41, -1, !dbg !18
  %43 = icmp sgt <2 x i32> %37, <i32 0, i32 -1>, !dbg !19
  %44 = extractelement <2 x i1> %43, i64 0, !dbg !29
  %45 = and i1 %44, %40, !dbg !29
  %46 = and i1 %20, %40, !dbg !29
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %24, i1 %45, i32 0, i1 %45) #1, !dbg !30
  %48 = bitcast i32 %47 to float, !dbg !30
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %26, i1 %46, i32 0, i1 %46) #1, !dbg !30
  %50 = bitcast i32 %49 to float, !dbg !30
  %51 = icmp sgt i32 %41, -1, !dbg !31
  %52 = and i1 %51, %40, !dbg !32
  %53 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %26, i1 %52, i32 0, i1 %52, i32 0, i1 %52) #1, !dbg !33
  %54 = extractvalue { i32, i32 } %53, 0, !dbg !33
  %55 = extractvalue { i32, i32 } %53, 1, !dbg !33
  %56 = bitcast i32 %54 to float, !dbg !33
  %57 = bitcast i32 %55 to float, !dbg !33
  %58 = fadd float %48, %56, !dbg !34
  %59 = fadd float %50, %57, !dbg !34
  %60 = icmp ult i32 %41, 32, !dbg !22
  %61 = and i1 %60, %40, !dbg !35
  %62 = and i1 %28, %40, !dbg !35
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %32, i1 %61, i32 0, i1 %61) #1, !dbg !36
  %64 = bitcast i32 %63 to float, !dbg !36
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %34, i1 %62, i32 0, i1 %62) #1, !dbg !36
  %66 = bitcast i32 %65 to float, !dbg !36
  %67 = fadd float %58, %64, !dbg !37
  %68 = fadd float %59, %66, !dbg !37
  %69 = extractelement <2 x i1> %43, i64 1, !dbg !38
  %70 = and i1 %44, %69, !dbg !38
  %71 = and i1 %20, %69, !dbg !38
  %72 = add i32 %10, -1, !dbg !39
  %73 = sext i32 %72 to i64, !dbg !40
  %74 = getelementptr float, ptr addrspace(1) %0, i64 %73, !dbg !40
  %75 = sext i32 %11 to i64, !dbg !40
  %76 = getelementptr float, ptr addrspace(1) %0, i64 %75, !dbg !40
  %77 = getelementptr i8, ptr addrspace(1) %76, i64 -4, !dbg !40
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %74, i1 %70, i32 0, i1 %70) #1, !dbg !41
  %79 = bitcast i32 %78 to float, !dbg !41
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %77, i1 %71, i32 0, i1 %71) #1, !dbg !41
  %81 = bitcast i32 %80 to float, !dbg !41
  %82 = fadd float %67, %79, !dbg !42
  %83 = fadd float %68, %81, !dbg !42
  %84 = or i32 %38, %41, !dbg !43
  %85 = icmp sgt i32 %84, -1, !dbg !43
  %86 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %15, i1 %85, i32 0, i1 %85, i32 0, i1 %85) #1, !dbg !44
  %87 = extractvalue { i32, i32 } %86, 0, !dbg !44
  %88 = extractvalue { i32, i32 } %86, 1, !dbg !44
  %89 = bitcast i32 %87 to float, !dbg !44
  %90 = bitcast i32 %88 to float, !dbg !44
  %91 = fadd float %82, %89, !dbg !45
  %92 = fadd float %83, %90, !dbg !45
  %93 = and i1 %60, %69, !dbg !46
  %94 = and i1 %28, %69, !dbg !46
  %95 = add i32 %10, 2, !dbg !47
  %96 = sext i32 %95 to i64, !dbg !48
  %97 = getelementptr float, ptr addrspace(1) %0, i64 %96, !dbg !48
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %76, i1 %93, i32 0, i1 %93) #1, !dbg !49
  %99 = bitcast i32 %98 to float, !dbg !49
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %97, i1 %94, i32 0, i1 %94) #1, !dbg !49
  %101 = bitcast i32 %100 to float, !dbg !49
  %102 = fadd float %91, %99, !dbg !50
  %103 = fadd float %92, %101, !dbg !50
  %104 = add nsw i32 %38, 1, !dbg !51
  %105 = icmp ult i32 %104, 32, !dbg !51
  %106 = and i1 %44, %105, !dbg !52
  %107 = and i1 %20, %105, !dbg !52
  %108 = add i32 %10, 31, !dbg !53
  %109 = add i32 %10, 32, !dbg !53
  %110 = sext i32 %108 to i64, !dbg !54
  %111 = getelementptr float, ptr addrspace(1) %0, i64 %110, !dbg !54
  %112 = sext i32 %109 to i64, !dbg !54
  %113 = getelementptr float, ptr addrspace(1) %0, i64 %112, !dbg !54
  %114 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %111, i1 %106, i32 0, i1 %106) #1, !dbg !55
  %115 = bitcast i32 %114 to float, !dbg !55
  %116 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %113, i1 %107, i32 0, i1 %107) #1, !dbg !55
  %117 = bitcast i32 %116 to float, !dbg !55
  %118 = fadd float %102, %115, !dbg !56
  %119 = fadd float %103, %117, !dbg !56
  %120 = and i1 %51, %105, !dbg !57
  %121 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %113, i1 %120, i32 0, i1 %120, i32 0, i1 %120) #1, !dbg !58
  %122 = extractvalue { i32, i32 } %121, 0, !dbg !58
  %123 = extractvalue { i32, i32 } %121, 1, !dbg !58
  %124 = bitcast i32 %122 to float, !dbg !58
  %125 = bitcast i32 %123 to float, !dbg !58
  %126 = fadd float %118, %124, !dbg !59
  %127 = fadd float %119, %125, !dbg !59
  %128 = or i32 %104, %41, !dbg !28
  %129 = icmp ult i32 %128, 32, !dbg !28
  %130 = or i32 %104, %27, !dbg !28
  %131 = icmp ult i32 %130, 32, !dbg !28
  %132 = add i32 %10, 33, !dbg !60
  %133 = add i32 %10, 34, !dbg !60
  %134 = sext i32 %132 to i64, !dbg !61
  %135 = getelementptr float, ptr addrspace(1) %0, i64 %134, !dbg !61
  %136 = sext i32 %133 to i64, !dbg !61
  %137 = getelementptr float, ptr addrspace(1) %0, i64 %136, !dbg !61
  %138 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %135, i1 %129, i32 0, i1 %129) #1, !dbg !62
  %139 = bitcast i32 %138 to float, !dbg !62
  %140 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %137, i1 %131, i32 0, i1 %131) #1, !dbg !62
  %141 = bitcast i32 %140 to float, !dbg !62
  %142 = fadd float %126, %139, !dbg !63
  %143 = fadd float %127, %141, !dbg !63
  %144 = icmp sgt i32 %41, 1, !dbg !64
  %145 = icmp sgt i32 %13, 1, !dbg !64
  %146 = select i1 %144, i32 %42, i32 0, !dbg !65
  %147 = select i1 %145, i32 %19, i32 0, !dbg !65
  %148 = icmp sgt i32 %38, 1, !dbg !66
  %149 = select i1 %148, i32 %39, i32 0, !dbg !67
  %150 = add nsw i32 %41, 2, !dbg !68
  %151 = add nsw i32 %13, 2, !dbg !68
  %152 = icmp sgt i32 %41, 29, !dbg !69
  %153 = select i1 %152, i32 32, i32 0, !dbg !70
  %154 = icmp slt i32 %41, 30, !dbg !71
  %155 = select i1 %154, i32 %150, i32 0, !dbg !72
  %156 = select i1 %154, i32 %151, i32 0, !dbg !72
  %157 = add nsw i32 %153, %155, !dbg !73
  %158 = add nsw i32 %153, %156, !dbg !73
  %159 = add nsw i32 %38, 2, !dbg !74
  %160 = icmp sgt i32 %38, 29, !dbg !75
  %161 = select i1 %160, i32 32, i32 0, !dbg !76
  %162 = icmp slt i32 %38, 30, !dbg !25
  %163 = select i1 %162, i32 %159, i32 0, !dbg !77
  %164 = add nsw i32 %161, %163, !dbg !78
  %reass.add = sub nsw i32 %164, %149
  %reass.mul = mul nsw i32 %reass.add, %157
  %reass.add4 = sub nsw i32 %149, %164
  %reass.mul5 = mul nsw i32 %reass.add4, %146
  %165 = add nsw i32 %reass.mul5, %reass.mul, !dbg !79
  %reass.mul3 = mul nsw i32 %reass.add, %158
  %reass.mul7 = mul nsw i32 %reass.add4, %147
  %166 = add nsw i32 %reass.mul7, %reass.mul3, !dbg !79
  %167 = sitofp i32 %165 to float, !dbg !80
  %168 = sitofp i32 %166 to float, !dbg !80
  %169 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %142, float %167) #1, !dbg !80
  %170 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %143, float %168) #1, !dbg !80
  %171 = getelementptr float, ptr addrspace(1) %1, i64 %14, !dbg !81
  %172 = bitcast float %169 to i32, !dbg !82
  %173 = bitcast float %170 to i32, !dbg !82
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %172, i32 %173, ptr addrspace(1) %171, i1 true) #1, !dbg !82
  %174 = getelementptr i1, ptr addrspace(1) %2, i64 %14, !dbg !83
  %175 = insertelement <2 x i32> poison, i32 %17, i64 0, !dbg !17
  %176 = insertelement <2 x i32> %175, i32 %18, i64 1, !dbg !17
  %177 = bitcast <2 x i32> %176 to <2 x float>, !dbg !17
  %178 = fcmp olt <2 x float> %177, zeroinitializer, !dbg !84
  %179 = select <2 x i1> %178, <2 x float> zeroinitializer, <2 x float> %177, !dbg !88
  %180 = fcmp ole <2 x float> %179, zeroinitializer, !dbg !89
  %181 = zext <2 x i1> %180 to <2 x i8>, !dbg !90
  %182 = bitcast <2 x i8> %181 to i16, !dbg !90
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %182, ptr addrspace(1) %174, i1 true) #1, !dbg !90
  ret void, !dbg !91
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cc2b6kvy6kopae76epucsdkpoy43xrbxrggugl6vaonm76hdaa55.py", directory: "inductor_cache/c2")
!4 = !{ptr @triton_poi_fused_avg_pool2d_relu_threshold_backward_12, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_avg_pool2d_relu_threshold_backward_12, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_avg_pool2d_relu_threshold_backward_12", linkageName: "triton_poi_fused_avg_pool2d_relu_threshold_backward_12", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 27, column: 31, scope: !7)
!17 = !DILocation(line: 27, column: 36, scope: !7)
!18 = !DILocation(line: 34, column: 18, scope: !7)
!19 = !DILocation(line: 35, column: 19, scope: !7)
!20 = !DILocation(line: 39, column: 39, scope: !7)
!21 = !DILocation(line: 39, column: 31, scope: !7)
!22 = !DILocation(line: 50, column: 20, scope: !7)
!23 = !DILocation(line: 52, column: 39, scope: !7)
!24 = !DILocation(line: 52, column: 31, scope: !7)
!25 = !DILocation(line: 80, column: 256, scope: !7)
!26 = !DILocation(line: 28, column: 18, scope: !7)
!27 = !DILocation(line: 30, column: 19, scope: !7)
!28 = !DILocation(line: 77, column: 20, scope: !7)
!29 = !DILocation(line: 38, column: 19, scope: !7)
!30 = !DILocation(line: 39, column: 44, scope: !7)
!31 = !DILocation(line: 41, column: 21, scope: !7)
!32 = !DILocation(line: 44, column: 19, scope: !7)
!33 = !DILocation(line: 45, column: 44, scope: !7)
!34 = !DILocation(line: 46, column: 20, scope: !7)
!35 = !DILocation(line: 51, column: 19, scope: !7)
!36 = !DILocation(line: 52, column: 44, scope: !7)
!37 = !DILocation(line: 53, column: 20, scope: !7)
!38 = !DILocation(line: 58, column: 20, scope: !7)
!39 = !DILocation(line: 59, column: 38, scope: !7)
!40 = !DILocation(line: 59, column: 31, scope: !7)
!41 = !DILocation(line: 59, column: 43, scope: !7)
!42 = !DILocation(line: 60, column: 20, scope: !7)
!43 = !DILocation(line: 61, column: 20, scope: !7)
!44 = !DILocation(line: 62, column: 36, scope: !7)
!45 = !DILocation(line: 63, column: 20, scope: !7)
!46 = !DILocation(line: 64, column: 20, scope: !7)
!47 = !DILocation(line: 65, column: 35, scope: !7)
!48 = !DILocation(line: 65, column: 31, scope: !7)
!49 = !DILocation(line: 65, column: 40, scope: !7)
!50 = !DILocation(line: 66, column: 20, scope: !7)
!51 = !DILocation(line: 70, column: 20, scope: !7)
!52 = !DILocation(line: 71, column: 20, scope: !7)
!53 = !DILocation(line: 72, column: 36, scope: !7)
!54 = !DILocation(line: 72, column: 31, scope: !7)
!55 = !DILocation(line: 72, column: 41, scope: !7)
!56 = !DILocation(line: 73, column: 20, scope: !7)
!57 = !DILocation(line: 74, column: 20, scope: !7)
!58 = !DILocation(line: 75, column: 41, scope: !7)
!59 = !DILocation(line: 76, column: 20, scope: !7)
!60 = !DILocation(line: 78, column: 36, scope: !7)
!61 = !DILocation(line: 78, column: 31, scope: !7)
!62 = !DILocation(line: 78, column: 41, scope: !7)
!63 = !DILocation(line: 79, column: 20, scope: !7)
!64 = !DILocation(line: 80, column: 72, scope: !7)
!65 = !DILocation(line: 80, column: 57, scope: !7)
!66 = !DILocation(line: 80, column: 137, scope: !7)
!67 = !DILocation(line: 80, column: 122, scope: !7)
!68 = !DILocation(line: 80, column: 166, scope: !7)
!69 = !DILocation(line: 80, column: 162, scope: !7)
!70 = !DILocation(line: 80, column: 153, scope: !7)
!71 = !DILocation(line: 80, column: 197, scope: !7)
!72 = !DILocation(line: 80, column: 185, scope: !7)
!73 = !DILocation(line: 80, column: 173, scope: !7)
!74 = !DILocation(line: 80, column: 225, scope: !7)
!75 = !DILocation(line: 80, column: 221, scope: !7)
!76 = !DILocation(line: 80, column: 212, scope: !7)
!77 = !DILocation(line: 80, column: 244, scope: !7)
!78 = !DILocation(line: 80, column: 232, scope: !7)
!79 = !DILocation(line: 80, column: 398, scope: !7)
!80 = !DILocation(line: 81, column: 20, scope: !7)
!81 = !DILocation(line: 86, column: 25, scope: !7)
!82 = !DILocation(line: 86, column: 37, scope: !7)
!83 = !DILocation(line: 87, column: 25, scope: !7)
!84 = !DILocation(line: 118, column: 15, scope: !85, inlinedAt: !87)
!85 = distinct !DILexicalBlockFile(scope: !7, file: !86, discriminator: 0)
!86 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!87 = !DILocation(line: 83, column: 42, scope: !7)
!88 = !DILocation(line: 121, column: 29, scope: !85, inlinedAt: !87)
!89 = !DILocation(line: 85, column: 21, scope: !7)
!90 = !DILocation(line: 87, column: 37, scope: !7)
!91 = !DILocation(line: 87, column: 4, scope: !7)
