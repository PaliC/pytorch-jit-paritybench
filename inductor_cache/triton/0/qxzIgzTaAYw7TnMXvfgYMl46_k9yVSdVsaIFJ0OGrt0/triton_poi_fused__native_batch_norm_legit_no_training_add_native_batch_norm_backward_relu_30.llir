; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_native_batch_norm_backward_relu_30(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, i32 %15) local_unnamed_addr !dbg !7 {
  %17 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %18 = shl i32 %17, 10, !dbg !11
  %19 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %20 = shl i32 %19, 2, !dbg !12
  %21 = and i32 %20, 508, !dbg !12
  %22 = or disjoint i32 %18, %21, !dbg !13
  %23 = or disjoint i32 %22, 512, !dbg !13
  %24 = srem i32 %22, 128, !dbg !14
  %25 = sext i32 %22 to i64, !dbg !15
  %26 = getelementptr float, ptr addrspace(1) %0, i64 %25, !dbg !15
  %27 = sext i32 %23 to i64, !dbg !15
  %28 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !15
  %29 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %26, i1 true) #3, !dbg !16
  %30 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %28, i1 true) #3, !dbg !16
  %31 = getelementptr float, ptr addrspace(1) %1, i64 %25, !dbg !17
  %32 = getelementptr float, ptr addrspace(1) %1, i64 %27, !dbg !17
  %33 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %31, i1 true) #3, !dbg !18
  %34 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %32, i1 true) #3, !dbg !18
  %35 = getelementptr float, ptr addrspace(1) %2, i64 %25, !dbg !19
  %36 = getelementptr float, ptr addrspace(1) %2, i64 %27, !dbg !19
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %35, i1 true) #3, !dbg !20
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %36, i1 true) #3, !dbg !20
  %39 = getelementptr float, ptr addrspace(1) %3, i64 %25, !dbg !21
  %40 = getelementptr float, ptr addrspace(1) %3, i64 %27, !dbg !21
  %41 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !22
  %42 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %40, i1 true) #3, !dbg !22
  %43 = getelementptr float, ptr addrspace(1) %4, i64 %25, !dbg !23
  %44 = getelementptr float, ptr addrspace(1) %4, i64 %27, !dbg !23
  %45 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %43, i1 true) #3, !dbg !24
  %46 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %44, i1 true) #3, !dbg !24
  %47 = sext i32 %24 to i64, !dbg !25
  %48 = getelementptr float, ptr addrspace(1) %5, i64 %47, !dbg !25
  %49 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %48, i1 true) #3, !dbg !26
  %50 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %48, i1 true) #3, !dbg !26
  %51 = getelementptr float, ptr addrspace(1) %6, i64 %47, !dbg !27
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %51, i1 true) #3, !dbg !28
  %53 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %51, i1 true) #3, !dbg !28
  %54 = getelementptr float, ptr addrspace(1) %7, i64 %47, !dbg !29
  %55 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %54, i1 true) #3, !dbg !30
  %56 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %54, i1 true) #3, !dbg !30
  %57 = getelementptr float, ptr addrspace(1) %8, i64 %47, !dbg !31
  %58 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %57, i1 true) #3, !dbg !32
  %59 = extractvalue { i32, i32, i32, i32 } %58, 0, !dbg !32
  %60 = extractvalue { i32, i32, i32, i32 } %58, 1, !dbg !32
  %61 = extractvalue { i32, i32, i32, i32 } %58, 2, !dbg !32
  %62 = extractvalue { i32, i32, i32, i32 } %58, 3, !dbg !32
  %63 = bitcast i32 %59 to float, !dbg !32
  %64 = bitcast i32 %60 to float, !dbg !32
  %65 = bitcast i32 %61 to float, !dbg !32
  %66 = bitcast i32 %62 to float, !dbg !32
  %67 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %57, i1 true) #3, !dbg !32
  %68 = extractvalue { i32, i32, i32, i32 } %67, 0, !dbg !32
  %69 = extractvalue { i32, i32, i32, i32 } %67, 1, !dbg !32
  %70 = extractvalue { i32, i32, i32, i32 } %67, 2, !dbg !32
  %71 = extractvalue { i32, i32, i32, i32 } %67, 3, !dbg !32
  %72 = bitcast i32 %68 to float, !dbg !32
  %73 = bitcast i32 %69 to float, !dbg !32
  %74 = bitcast i32 %70 to float, !dbg !32
  %75 = bitcast i32 %71 to float, !dbg !32
  %76 = getelementptr float, ptr addrspace(1) %9, i64 %47, !dbg !33
  %77 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %76, i1 true) #3, !dbg !34
  %78 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %76, i1 true) #3, !dbg !34
  %79 = getelementptr float, ptr addrspace(1) %10, i64 %47, !dbg !35
  %80 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %79, i1 true) #3, !dbg !36
  %81 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %79, i1 true) #3, !dbg !36
  %82 = fadd float %63, 0x3EE4F8B580000000, !dbg !37
  %83 = fadd float %64, 0x3EE4F8B580000000, !dbg !37
  %84 = fadd float %65, 0x3EE4F8B580000000, !dbg !37
  %85 = fadd float %66, 0x3EE4F8B580000000, !dbg !37
  %86 = fadd float %72, 0x3EE4F8B580000000, !dbg !37
  %87 = fadd float %73, 0x3EE4F8B580000000, !dbg !37
  %88 = fadd float %74, 0x3EE4F8B580000000, !dbg !37
  %89 = fadd float %75, 0x3EE4F8B580000000, !dbg !37
  %90 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %.not.i = icmp eq i32 %90, 0, !dbg !38
  %91 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !38
  %.not1.i = icmp eq i32 %91, 0, !dbg !38
  br i1 %.not.i, label %97, label %92, !dbg !38

92:                                               ; preds = %16
  br i1 %.not1.i, label %95, label %93, !dbg !38

93:                                               ; preds = %92
  %94 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %82) #3, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

95:                                               ; preds = %92
  %96 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %82) #3, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

97:                                               ; preds = %16
  br i1 %.not1.i, label %100, label %98, !dbg !38

98:                                               ; preds = %97
  %99 = tail call float @llvm.nvvm.sqrt.rn.f(float %82) #3, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

100:                                              ; preds = %97
  %101 = tail call float @llvm.nvvm.sqrt.approx.f(float %82) #3, !dbg !38
  br label %__nv_sqrtf.exit, !dbg !38

__nv_sqrtf.exit:                                  ; preds = %93, %95, %98, %100
  %.0.i = phi float [ %94, %93 ], [ %96, %95 ], [ %99, %98 ], [ %101, %100 ], !dbg !38
  %102 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %.not.i1 = icmp eq i32 %102, 0, !dbg !38
  %103 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !38
  %.not1.i4 = icmp eq i32 %103, 0, !dbg !38
  br i1 %.not.i1, label %109, label %104, !dbg !38

104:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %107, label %105, !dbg !38

105:                                              ; preds = %104
  %106 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %83) #3, !dbg !38
  br label %__nv_sqrtf.exit5, !dbg !38

107:                                              ; preds = %104
  %108 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %83) #3, !dbg !38
  br label %__nv_sqrtf.exit5, !dbg !38

109:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %112, label %110, !dbg !38

110:                                              ; preds = %109
  %111 = tail call float @llvm.nvvm.sqrt.rn.f(float %83) #3, !dbg !38
  br label %__nv_sqrtf.exit5, !dbg !38

112:                                              ; preds = %109
  %113 = tail call float @llvm.nvvm.sqrt.approx.f(float %83) #3, !dbg !38
  br label %__nv_sqrtf.exit5, !dbg !38

__nv_sqrtf.exit5:                                 ; preds = %105, %107, %110, %112
  %.0.i3 = phi float [ %106, %105 ], [ %108, %107 ], [ %111, %110 ], [ %113, %112 ], !dbg !38
  %114 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %.not.i6 = icmp eq i32 %114, 0, !dbg !38
  %115 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !38
  %.not1.i9 = icmp eq i32 %115, 0, !dbg !38
  br i1 %.not.i6, label %121, label %116, !dbg !38

116:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %119, label %117, !dbg !38

117:                                              ; preds = %116
  %118 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %84) #3, !dbg !38
  br label %__nv_sqrtf.exit10, !dbg !38

119:                                              ; preds = %116
  %120 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %84) #3, !dbg !38
  br label %__nv_sqrtf.exit10, !dbg !38

121:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %124, label %122, !dbg !38

122:                                              ; preds = %121
  %123 = tail call float @llvm.nvvm.sqrt.rn.f(float %84) #3, !dbg !38
  br label %__nv_sqrtf.exit10, !dbg !38

124:                                              ; preds = %121
  %125 = tail call float @llvm.nvvm.sqrt.approx.f(float %84) #3, !dbg !38
  br label %__nv_sqrtf.exit10, !dbg !38

__nv_sqrtf.exit10:                                ; preds = %117, %119, %122, %124
  %.0.i8 = phi float [ %118, %117 ], [ %120, %119 ], [ %123, %122 ], [ %125, %124 ], !dbg !38
  %126 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %.not.i11 = icmp eq i32 %126, 0, !dbg !38
  %127 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !38
  %.not1.i14 = icmp eq i32 %127, 0, !dbg !38
  br i1 %.not.i11, label %133, label %128, !dbg !38

128:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %131, label %129, !dbg !38

129:                                              ; preds = %128
  %130 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %85) #3, !dbg !38
  br label %__nv_sqrtf.exit15, !dbg !38

131:                                              ; preds = %128
  %132 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %85) #3, !dbg !38
  br label %__nv_sqrtf.exit15, !dbg !38

133:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %136, label %134, !dbg !38

134:                                              ; preds = %133
  %135 = tail call float @llvm.nvvm.sqrt.rn.f(float %85) #3, !dbg !38
  br label %__nv_sqrtf.exit15, !dbg !38

136:                                              ; preds = %133
  %137 = tail call float @llvm.nvvm.sqrt.approx.f(float %85) #3, !dbg !38
  br label %__nv_sqrtf.exit15, !dbg !38

__nv_sqrtf.exit15:                                ; preds = %129, %131, %134, %136
  %.0.i13 = phi float [ %130, %129 ], [ %132, %131 ], [ %135, %134 ], [ %137, %136 ], !dbg !38
  %138 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %.not.i16 = icmp eq i32 %138, 0, !dbg !38
  %139 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !38
  %.not1.i19 = icmp eq i32 %139, 0, !dbg !38
  br i1 %.not.i16, label %145, label %140, !dbg !38

140:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %143, label %141, !dbg !38

141:                                              ; preds = %140
  %142 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %86) #3, !dbg !38
  br label %__nv_sqrtf.exit20, !dbg !38

143:                                              ; preds = %140
  %144 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %86) #3, !dbg !38
  br label %__nv_sqrtf.exit20, !dbg !38

145:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %148, label %146, !dbg !38

146:                                              ; preds = %145
  %147 = tail call float @llvm.nvvm.sqrt.rn.f(float %86) #3, !dbg !38
  br label %__nv_sqrtf.exit20, !dbg !38

148:                                              ; preds = %145
  %149 = tail call float @llvm.nvvm.sqrt.approx.f(float %86) #3, !dbg !38
  br label %__nv_sqrtf.exit20, !dbg !38

__nv_sqrtf.exit20:                                ; preds = %141, %143, %146, %148
  %.0.i18 = phi float [ %142, %141 ], [ %144, %143 ], [ %147, %146 ], [ %149, %148 ], !dbg !38
  %150 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %.not.i21 = icmp eq i32 %150, 0, !dbg !38
  %151 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !38
  %.not1.i24 = icmp eq i32 %151, 0, !dbg !38
  br i1 %.not.i21, label %157, label %152, !dbg !38

152:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %155, label %153, !dbg !38

153:                                              ; preds = %152
  %154 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %87) #3, !dbg !38
  br label %__nv_sqrtf.exit25, !dbg !38

155:                                              ; preds = %152
  %156 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %87) #3, !dbg !38
  br label %__nv_sqrtf.exit25, !dbg !38

157:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %160, label %158, !dbg !38

158:                                              ; preds = %157
  %159 = tail call float @llvm.nvvm.sqrt.rn.f(float %87) #3, !dbg !38
  br label %__nv_sqrtf.exit25, !dbg !38

160:                                              ; preds = %157
  %161 = tail call float @llvm.nvvm.sqrt.approx.f(float %87) #3, !dbg !38
  br label %__nv_sqrtf.exit25, !dbg !38

__nv_sqrtf.exit25:                                ; preds = %153, %155, %158, %160
  %.0.i23 = phi float [ %154, %153 ], [ %156, %155 ], [ %159, %158 ], [ %161, %160 ], !dbg !38
  %162 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %.not.i26 = icmp eq i32 %162, 0, !dbg !38
  %163 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !38
  %.not1.i29 = icmp eq i32 %163, 0, !dbg !38
  br i1 %.not.i26, label %169, label %164, !dbg !38

164:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %167, label %165, !dbg !38

165:                                              ; preds = %164
  %166 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %88) #3, !dbg !38
  br label %__nv_sqrtf.exit30, !dbg !38

167:                                              ; preds = %164
  %168 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %88) #3, !dbg !38
  br label %__nv_sqrtf.exit30, !dbg !38

169:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %172, label %170, !dbg !38

170:                                              ; preds = %169
  %171 = tail call float @llvm.nvvm.sqrt.rn.f(float %88) #3, !dbg !38
  br label %__nv_sqrtf.exit30, !dbg !38

172:                                              ; preds = %169
  %173 = tail call float @llvm.nvvm.sqrt.approx.f(float %88) #3, !dbg !38
  br label %__nv_sqrtf.exit30, !dbg !38

__nv_sqrtf.exit30:                                ; preds = %165, %167, %170, %172
  %.0.i28 = phi float [ %166, %165 ], [ %168, %167 ], [ %171, %170 ], [ %173, %172 ], !dbg !38
  %174 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !38
  %.not.i31 = icmp eq i32 %174, 0, !dbg !38
  %175 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !38
  %.not1.i34 = icmp eq i32 %175, 0, !dbg !38
  br i1 %.not.i31, label %181, label %176, !dbg !38

176:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %179, label %177, !dbg !38

177:                                              ; preds = %176
  %178 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %89) #3, !dbg !38
  br label %__nv_sqrtf.exit35, !dbg !38

179:                                              ; preds = %176
  %180 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %89) #3, !dbg !38
  br label %__nv_sqrtf.exit35, !dbg !38

181:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %184, label %182, !dbg !38

182:                                              ; preds = %181
  %183 = tail call float @llvm.nvvm.sqrt.rn.f(float %89) #3, !dbg !38
  br label %__nv_sqrtf.exit35, !dbg !38

184:                                              ; preds = %181
  %185 = tail call float @llvm.nvvm.sqrt.approx.f(float %89) #3, !dbg !38
  br label %__nv_sqrtf.exit35, !dbg !38

__nv_sqrtf.exit35:                                ; preds = %177, %179, %182, %184
  %.0.i33 = phi float [ %178, %177 ], [ %180, %179 ], [ %183, %182 ], [ %185, %184 ], !dbg !38
  %186 = extractvalue { i32, i32, i32, i32 } %42, 3, !dbg !22
  %187 = extractvalue { i32, i32, i32, i32 } %46, 3, !dbg !24
  %188 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !20
  %189 = extractvalue { i32, i32, i32, i32 } %34, 3, !dbg !18
  %190 = extractvalue { i32, i32, i32, i32 } %30, 3, !dbg !16
  %191 = extractvalue { i32, i32, i32, i32 } %56, 3, !dbg !30
  %192 = extractvalue { i32, i32, i32, i32 } %42, 2, !dbg !22
  %193 = extractvalue { i32, i32, i32, i32 } %46, 2, !dbg !24
  %194 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !20
  %195 = extractvalue { i32, i32, i32, i32 } %34, 2, !dbg !18
  %196 = extractvalue { i32, i32, i32, i32 } %30, 2, !dbg !16
  %197 = extractvalue { i32, i32, i32, i32 } %56, 2, !dbg !30
  %198 = extractvalue { i32, i32, i32, i32 } %42, 1, !dbg !22
  %199 = extractvalue { i32, i32, i32, i32 } %46, 1, !dbg !24
  %200 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !20
  %201 = extractvalue { i32, i32, i32, i32 } %34, 1, !dbg !18
  %202 = extractvalue { i32, i32, i32, i32 } %30, 1, !dbg !16
  %203 = extractvalue { i32, i32, i32, i32 } %56, 1, !dbg !30
  %204 = extractvalue { i32, i32, i32, i32 } %42, 0, !dbg !22
  %205 = extractvalue { i32, i32, i32, i32 } %46, 0, !dbg !24
  %206 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !20
  %207 = extractvalue { i32, i32, i32, i32 } %34, 0, !dbg !18
  %208 = extractvalue { i32, i32, i32, i32 } %30, 0, !dbg !16
  %209 = extractvalue { i32, i32, i32, i32 } %56, 0, !dbg !30
  %210 = extractvalue { i32, i32, i32, i32 } %41, 3, !dbg !22
  %211 = extractvalue { i32, i32, i32, i32 } %45, 3, !dbg !24
  %212 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !20
  %213 = extractvalue { i32, i32, i32, i32 } %33, 3, !dbg !18
  %214 = extractvalue { i32, i32, i32, i32 } %29, 3, !dbg !16
  %215 = extractvalue { i32, i32, i32, i32 } %55, 3, !dbg !30
  %216 = extractvalue { i32, i32, i32, i32 } %41, 2, !dbg !22
  %217 = extractvalue { i32, i32, i32, i32 } %45, 2, !dbg !24
  %218 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !20
  %219 = extractvalue { i32, i32, i32, i32 } %33, 2, !dbg !18
  %220 = extractvalue { i32, i32, i32, i32 } %29, 2, !dbg !16
  %221 = extractvalue { i32, i32, i32, i32 } %55, 2, !dbg !30
  %222 = extractvalue { i32, i32, i32, i32 } %41, 1, !dbg !22
  %223 = extractvalue { i32, i32, i32, i32 } %45, 1, !dbg !24
  %224 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !20
  %225 = extractvalue { i32, i32, i32, i32 } %33, 1, !dbg !18
  %226 = extractvalue { i32, i32, i32, i32 } %29, 1, !dbg !16
  %227 = extractvalue { i32, i32, i32, i32 } %55, 1, !dbg !30
  %228 = extractvalue { i32, i32, i32, i32 } %41, 0, !dbg !22
  %229 = extractvalue { i32, i32, i32, i32 } %45, 0, !dbg !24
  %230 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !20
  %231 = extractvalue { i32, i32, i32, i32 } %33, 0, !dbg !18
  %232 = extractvalue { i32, i32, i32, i32 } %29, 0, !dbg !16
  %233 = extractvalue { i32, i32, i32, i32 } %55, 0, !dbg !30
  %234 = extractvalue { i32, i32, i32, i32 } %53, 3, !dbg !28
  %235 = bitcast i32 %234 to float, !dbg !28
  %236 = extractvalue { i32, i32, i32, i32 } %53, 2, !dbg !28
  %237 = bitcast i32 %236 to float, !dbg !28
  %238 = extractvalue { i32, i32, i32, i32 } %53, 1, !dbg !28
  %239 = bitcast i32 %238 to float, !dbg !28
  %240 = extractvalue { i32, i32, i32, i32 } %53, 0, !dbg !28
  %241 = bitcast i32 %240 to float, !dbg !28
  %242 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !28
  %243 = bitcast i32 %242 to float, !dbg !28
  %244 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !28
  %245 = bitcast i32 %244 to float, !dbg !28
  %246 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !28
  %247 = bitcast i32 %246 to float, !dbg !28
  %248 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !28
  %249 = bitcast i32 %248 to float, !dbg !28
  %250 = extractvalue { i32, i32, i32, i32 } %50, 3, !dbg !26
  %251 = bitcast i32 %250 to float, !dbg !26
  %252 = extractvalue { i32, i32, i32, i32 } %50, 2, !dbg !26
  %253 = bitcast i32 %252 to float, !dbg !26
  %254 = extractvalue { i32, i32, i32, i32 } %50, 1, !dbg !26
  %255 = bitcast i32 %254 to float, !dbg !26
  %256 = extractvalue { i32, i32, i32, i32 } %50, 0, !dbg !26
  %257 = bitcast i32 %256 to float, !dbg !26
  %258 = extractvalue { i32, i32, i32, i32 } %49, 3, !dbg !26
  %259 = bitcast i32 %258 to float, !dbg !26
  %260 = extractvalue { i32, i32, i32, i32 } %49, 2, !dbg !26
  %261 = bitcast i32 %260 to float, !dbg !26
  %262 = extractvalue { i32, i32, i32, i32 } %49, 1, !dbg !26
  %263 = bitcast i32 %262 to float, !dbg !26
  %264 = extractvalue { i32, i32, i32, i32 } %49, 0, !dbg !26
  %265 = bitcast i32 %264 to float, !dbg !26
  %266 = extractvalue { i32, i32, i32, i32 } %81, 3, !dbg !36
  %267 = extractvalue { i32, i32, i32, i32 } %81, 2, !dbg !36
  %268 = extractvalue { i32, i32, i32, i32 } %81, 1, !dbg !36
  %269 = extractvalue { i32, i32, i32, i32 } %81, 0, !dbg !36
  %270 = extractvalue { i32, i32, i32, i32 } %80, 3, !dbg !36
  %271 = extractvalue { i32, i32, i32, i32 } %80, 2, !dbg !36
  %272 = extractvalue { i32, i32, i32, i32 } %80, 1, !dbg !36
  %273 = extractvalue { i32, i32, i32, i32 } %80, 0, !dbg !36
  %274 = extractvalue { i32, i32, i32, i32 } %78, 3, !dbg !34
  %275 = extractvalue { i32, i32, i32, i32 } %78, 2, !dbg !34
  %276 = extractvalue { i32, i32, i32, i32 } %78, 1, !dbg !34
  %277 = extractvalue { i32, i32, i32, i32 } %78, 0, !dbg !34
  %278 = extractvalue { i32, i32, i32, i32 } %77, 3, !dbg !34
  %279 = extractvalue { i32, i32, i32, i32 } %77, 2, !dbg !34
  %280 = extractvalue { i32, i32, i32, i32 } %77, 1, !dbg !34
  %281 = extractvalue { i32, i32, i32, i32 } %77, 0, !dbg !34
  %282 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !39
  %283 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !39
  %284 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !39
  %285 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !39
  %286 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !39
  %287 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !39
  %288 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !39
  %289 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !39
  %290 = insertelement <8 x i32> poison, i32 %186, i64 0, !dbg !22
  %291 = insertelement <8 x i32> %290, i32 %192, i64 1, !dbg !22
  %292 = insertelement <8 x i32> %291, i32 %198, i64 2, !dbg !22
  %293 = insertelement <8 x i32> %292, i32 %204, i64 3, !dbg !22
  %294 = insertelement <8 x i32> %293, i32 %210, i64 4, !dbg !22
  %295 = insertelement <8 x i32> %294, i32 %216, i64 5, !dbg !22
  %296 = insertelement <8 x i32> %295, i32 %222, i64 6, !dbg !22
  %297 = insertelement <8 x i32> %296, i32 %228, i64 7, !dbg !22
  %298 = bitcast <8 x i32> %297 to <8 x float>, !dbg !22
  %299 = insertelement <8 x i32> poison, i32 %187, i64 0, !dbg !24
  %300 = insertelement <8 x i32> %299, i32 %193, i64 1, !dbg !24
  %301 = insertelement <8 x i32> %300, i32 %199, i64 2, !dbg !24
  %302 = insertelement <8 x i32> %301, i32 %205, i64 3, !dbg !24
  %303 = insertelement <8 x i32> %302, i32 %211, i64 4, !dbg !24
  %304 = insertelement <8 x i32> %303, i32 %217, i64 5, !dbg !24
  %305 = insertelement <8 x i32> %304, i32 %223, i64 6, !dbg !24
  %306 = insertelement <8 x i32> %305, i32 %229, i64 7, !dbg !24
  %307 = bitcast <8 x i32> %306 to <8 x float>, !dbg !24
  %308 = fadd <8 x float> %298, %307, !dbg !40
  %309 = insertelement <8 x i32> poison, i32 %188, i64 0, !dbg !20
  %310 = insertelement <8 x i32> %309, i32 %194, i64 1, !dbg !20
  %311 = insertelement <8 x i32> %310, i32 %200, i64 2, !dbg !20
  %312 = insertelement <8 x i32> %311, i32 %206, i64 3, !dbg !20
  %313 = insertelement <8 x i32> %312, i32 %212, i64 4, !dbg !20
  %314 = insertelement <8 x i32> %313, i32 %218, i64 5, !dbg !20
  %315 = insertelement <8 x i32> %314, i32 %224, i64 6, !dbg !20
  %316 = insertelement <8 x i32> %315, i32 %230, i64 7, !dbg !20
  %317 = bitcast <8 x i32> %316 to <8 x float>, !dbg !20
  %318 = fadd <8 x float> %308, %317, !dbg !41
  %319 = insertelement <8 x i32> poison, i32 %189, i64 0, !dbg !18
  %320 = insertelement <8 x i32> %319, i32 %195, i64 1, !dbg !18
  %321 = insertelement <8 x i32> %320, i32 %201, i64 2, !dbg !18
  %322 = insertelement <8 x i32> %321, i32 %207, i64 3, !dbg !18
  %323 = insertelement <8 x i32> %322, i32 %213, i64 4, !dbg !18
  %324 = insertelement <8 x i32> %323, i32 %219, i64 5, !dbg !18
  %325 = insertelement <8 x i32> %324, i32 %225, i64 6, !dbg !18
  %326 = insertelement <8 x i32> %325, i32 %231, i64 7, !dbg !18
  %327 = bitcast <8 x i32> %326 to <8 x float>, !dbg !18
  %328 = fadd <8 x float> %318, %327, !dbg !42
  %329 = insertelement <8 x i32> poison, i32 %190, i64 0, !dbg !16
  %330 = insertelement <8 x i32> %329, i32 %196, i64 1, !dbg !16
  %331 = insertelement <8 x i32> %330, i32 %202, i64 2, !dbg !16
  %332 = insertelement <8 x i32> %331, i32 %208, i64 3, !dbg !16
  %333 = insertelement <8 x i32> %332, i32 %214, i64 4, !dbg !16
  %334 = insertelement <8 x i32> %333, i32 %220, i64 5, !dbg !16
  %335 = insertelement <8 x i32> %334, i32 %226, i64 6, !dbg !16
  %336 = insertelement <8 x i32> %335, i32 %232, i64 7, !dbg !16
  %337 = bitcast <8 x i32> %336 to <8 x float>, !dbg !16
  %338 = fadd <8 x float> %328, %337, !dbg !43
  %339 = insertelement <8 x i32> poison, i32 %191, i64 0, !dbg !30
  %340 = insertelement <8 x i32> %339, i32 %197, i64 1, !dbg !30
  %341 = insertelement <8 x i32> %340, i32 %203, i64 2, !dbg !30
  %342 = insertelement <8 x i32> %341, i32 %209, i64 3, !dbg !30
  %343 = insertelement <8 x i32> %342, i32 %215, i64 4, !dbg !30
  %344 = insertelement <8 x i32> %343, i32 %221, i64 5, !dbg !30
  %345 = insertelement <8 x i32> %344, i32 %227, i64 6, !dbg !30
  %346 = insertelement <8 x i32> %345, i32 %233, i64 7, !dbg !30
  %347 = bitcast <8 x i32> %346 to <8 x float>, !dbg !30
  %348 = fsub <8 x float> %338, %347, !dbg !44
  %349 = extractelement <8 x float> %308, i64 0, !dbg !45
  %350 = fsub float %349, %235, !dbg !45
  %351 = extractelement <8 x float> %308, i64 1, !dbg !45
  %352 = fsub float %351, %237, !dbg !45
  %353 = extractelement <8 x float> %308, i64 2, !dbg !45
  %354 = fsub float %353, %239, !dbg !45
  %355 = extractelement <8 x float> %308, i64 3, !dbg !45
  %356 = fsub float %355, %241, !dbg !45
  %357 = extractelement <8 x float> %308, i64 4, !dbg !45
  %358 = fsub float %357, %243, !dbg !45
  %359 = extractelement <8 x float> %308, i64 5, !dbg !45
  %360 = fsub float %359, %245, !dbg !45
  %361 = extractelement <8 x float> %308, i64 6, !dbg !45
  %362 = fsub float %361, %247, !dbg !45
  %363 = extractelement <8 x float> %308, i64 7, !dbg !45
  %364 = fsub float %363, %249, !dbg !45
  %365 = extractelement <8 x float> %318, i64 0, !dbg !46
  %366 = fsub float %365, %251, !dbg !46
  %367 = extractelement <8 x float> %318, i64 1, !dbg !46
  %368 = fsub float %367, %253, !dbg !46
  %369 = extractelement <8 x float> %318, i64 2, !dbg !46
  %370 = fsub float %369, %255, !dbg !46
  %371 = extractelement <8 x float> %318, i64 3, !dbg !46
  %372 = fsub float %371, %257, !dbg !46
  %373 = extractelement <8 x float> %318, i64 4, !dbg !46
  %374 = fsub float %373, %259, !dbg !46
  %375 = extractelement <8 x float> %318, i64 5, !dbg !46
  %376 = fsub float %375, %261, !dbg !46
  %377 = extractelement <8 x float> %318, i64 6, !dbg !46
  %378 = fsub float %377, %263, !dbg !46
  %379 = extractelement <8 x float> %318, i64 7, !dbg !46
  %380 = fsub float %379, %265, !dbg !46
  %381 = insertelement <8 x i32> poison, i32 %266, i64 0, !dbg !36
  %382 = insertelement <8 x i32> %381, i32 %267, i64 1, !dbg !36
  %383 = insertelement <8 x i32> %382, i32 %268, i64 2, !dbg !36
  %384 = insertelement <8 x i32> %383, i32 %269, i64 3, !dbg !36
  %385 = insertelement <8 x i32> %384, i32 %270, i64 4, !dbg !36
  %386 = insertelement <8 x i32> %385, i32 %271, i64 5, !dbg !36
  %387 = insertelement <8 x i32> %386, i32 %272, i64 6, !dbg !36
  %388 = insertelement <8 x i32> %387, i32 %273, i64 7, !dbg !36
  %389 = bitcast <8 x i32> %388 to <8 x float>, !dbg !36
  %390 = insertelement <8 x i32> poison, i32 %274, i64 0, !dbg !34
  %391 = insertelement <8 x i32> %390, i32 %275, i64 1, !dbg !34
  %392 = insertelement <8 x i32> %391, i32 %276, i64 2, !dbg !34
  %393 = insertelement <8 x i32> %392, i32 %277, i64 3, !dbg !34
  %394 = insertelement <8 x i32> %393, i32 %278, i64 4, !dbg !34
  %395 = insertelement <8 x i32> %394, i32 %279, i64 5, !dbg !34
  %396 = insertelement <8 x i32> %395, i32 %280, i64 6, !dbg !34
  %397 = insertelement <8 x i32> %396, i32 %281, i64 7, !dbg !34
  %398 = bitcast <8 x i32> %397 to <8 x float>, !dbg !34
  %399 = insertelement <8 x float> poison, float %289, i64 0, !dbg !47
  %400 = insertelement <8 x float> %399, float %288, i64 1, !dbg !47
  %401 = insertelement <8 x float> %400, float %287, i64 2, !dbg !47
  %402 = insertelement <8 x float> %401, float %286, i64 3, !dbg !47
  %403 = insertelement <8 x float> %402, float %285, i64 4, !dbg !47
  %404 = insertelement <8 x float> %403, float %284, i64 5, !dbg !47
  %405 = insertelement <8 x float> %404, float %283, i64 6, !dbg !47
  %406 = insertelement <8 x float> %405, float %282, i64 7, !dbg !47
  %407 = fmul <8 x float> %348, %406, !dbg !47
  %408 = fmul <8 x float> %407, %398, !dbg !48
  %409 = fadd <8 x float> %408, %389, !dbg !49
  %410 = fcmp olt <8 x float> %409, zeroinitializer, !dbg !50
  %411 = extractelement <8 x i1> %410, i64 7, !dbg !54
  %412 = extractelement <8 x i1> %410, i64 6, !dbg !54
  %413 = extractelement <8 x i1> %410, i64 5, !dbg !54
  %414 = extractelement <8 x i1> %410, i64 4, !dbg !54
  %415 = extractelement <8 x i1> %410, i64 3, !dbg !54
  %416 = extractelement <8 x i1> %410, i64 2, !dbg !54
  %417 = extractelement <8 x i1> %410, i64 1, !dbg !54
  %418 = extractelement <8 x i1> %410, i64 0, !dbg !54
  %bc = bitcast <8 x float> %338 to <8 x i32>, !dbg !55
  %419 = extractelement <8 x i32> %bc, i64 7, !dbg !55
  %bc36 = bitcast <8 x float> %338 to <8 x i32>, !dbg !55
  %420 = extractelement <8 x i32> %bc36, i64 6, !dbg !55
  %bc37 = bitcast <8 x float> %338 to <8 x i32>, !dbg !55
  %421 = extractelement <8 x i32> %bc37, i64 5, !dbg !55
  %bc38 = bitcast <8 x float> %338 to <8 x i32>, !dbg !55
  %422 = extractelement <8 x i32> %bc38, i64 4, !dbg !55
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %419, i32 %420, i32 %421, i32 %422, ptr addrspace(1) %26, i1 true) #3, !dbg !55
  %bc39 = bitcast <8 x float> %338 to <8 x i32>, !dbg !55
  %423 = extractelement <8 x i32> %bc39, i64 3, !dbg !55
  %bc40 = bitcast <8 x float> %338 to <8 x i32>, !dbg !55
  %424 = extractelement <8 x i32> %bc40, i64 2, !dbg !55
  %bc41 = bitcast <8 x float> %338 to <8 x i32>, !dbg !55
  %425 = extractelement <8 x i32> %bc41, i64 1, !dbg !55
  %bc42 = bitcast <8 x float> %338 to <8 x i32>, !dbg !55
  %426 = extractelement <8 x i32> %bc42, i64 0, !dbg !55
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %423, i32 %424, i32 %425, i32 %426, ptr addrspace(1) %28, i1 true) #3, !dbg !55
  %427 = getelementptr float, ptr addrspace(1) %11, i64 %25, !dbg !56
  %428 = getelementptr float, ptr addrspace(1) %11, i64 %27, !dbg !56
  %429 = bitcast float %380 to i32, !dbg !57
  %430 = bitcast float %378 to i32, !dbg !57
  %431 = bitcast float %376 to i32, !dbg !57
  %432 = bitcast float %374 to i32, !dbg !57
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %429, i32 %430, i32 %431, i32 %432, ptr addrspace(1) %427, i1 true) #3, !dbg !57
  %433 = bitcast float %372 to i32, !dbg !57
  %434 = bitcast float %370 to i32, !dbg !57
  %435 = bitcast float %368 to i32, !dbg !57
  %436 = bitcast float %366 to i32, !dbg !57
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %433, i32 %434, i32 %435, i32 %436, ptr addrspace(1) %428, i1 true) #3, !dbg !57
  %437 = getelementptr float, ptr addrspace(1) %12, i64 %25, !dbg !58
  %438 = getelementptr float, ptr addrspace(1) %12, i64 %27, !dbg !58
  %439 = bitcast float %364 to i32, !dbg !59
  %440 = bitcast float %362 to i32, !dbg !59
  %441 = bitcast float %360 to i32, !dbg !59
  %442 = bitcast float %358 to i32, !dbg !59
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %439, i32 %440, i32 %441, i32 %442, ptr addrspace(1) %437, i1 true) #3, !dbg !59
  %443 = bitcast float %356 to i32, !dbg !59
  %444 = bitcast float %354 to i32, !dbg !59
  %445 = bitcast float %352 to i32, !dbg !59
  %446 = bitcast float %350 to i32, !dbg !59
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %443, i32 %444, i32 %445, i32 %446, ptr addrspace(1) %438, i1 true) #3, !dbg !59
  %447 = getelementptr float, ptr addrspace(1) %13, i64 %25, !dbg !60
  %448 = getelementptr float, ptr addrspace(1) %13, i64 %27, !dbg !60
  %bc43 = bitcast <8 x float> %409 to <8 x i32>, !dbg !61
  %449 = extractelement <8 x i32> %bc43, i64 7, !dbg !61
  %450 = select i1 %411, i32 0, i32 %449, !dbg !54
  %bc44 = bitcast <8 x float> %409 to <8 x i32>, !dbg !61
  %451 = extractelement <8 x i32> %bc44, i64 6, !dbg !61
  %452 = select i1 %412, i32 0, i32 %451, !dbg !54
  %bc45 = bitcast <8 x float> %409 to <8 x i32>, !dbg !61
  %453 = extractelement <8 x i32> %bc45, i64 5, !dbg !61
  %454 = select i1 %413, i32 0, i32 %453, !dbg !54
  %bc46 = bitcast <8 x float> %409 to <8 x i32>, !dbg !61
  %455 = extractelement <8 x i32> %bc46, i64 4, !dbg !61
  %456 = select i1 %414, i32 0, i32 %455, !dbg !54
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %450, i32 %452, i32 %454, i32 %456, ptr addrspace(1) %447, i1 true) #3, !dbg !61
  %bc47 = bitcast <8 x float> %409 to <8 x i32>, !dbg !61
  %457 = extractelement <8 x i32> %bc47, i64 3, !dbg !61
  %458 = select i1 %415, i32 0, i32 %457, !dbg !54
  %bc48 = bitcast <8 x float> %409 to <8 x i32>, !dbg !61
  %459 = extractelement <8 x i32> %bc48, i64 2, !dbg !61
  %460 = select i1 %416, i32 0, i32 %459, !dbg !54
  %bc49 = bitcast <8 x float> %409 to <8 x i32>, !dbg !61
  %461 = extractelement <8 x i32> %bc49, i64 1, !dbg !61
  %462 = select i1 %417, i32 0, i32 %461, !dbg !54
  %bc50 = bitcast <8 x float> %409 to <8 x i32>, !dbg !61
  %463 = extractelement <8 x i32> %bc50, i64 0, !dbg !61
  %464 = select i1 %418, i32 0, i32 %463, !dbg !54
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %458, i32 %460, i32 %462, i32 %464, ptr addrspace(1) %448, i1 true) #3, !dbg !61
  %465 = getelementptr float, ptr addrspace(1) %14, i64 %25, !dbg !62
  %466 = getelementptr float, ptr addrspace(1) %14, i64 %27, !dbg !62
  %bc51 = bitcast <8 x float> %348 to <8 x i32>, !dbg !63
  %467 = extractelement <8 x i32> %bc51, i64 7, !dbg !63
  %bc52 = bitcast <8 x float> %348 to <8 x i32>, !dbg !63
  %468 = extractelement <8 x i32> %bc52, i64 6, !dbg !63
  %bc53 = bitcast <8 x float> %348 to <8 x i32>, !dbg !63
  %469 = extractelement <8 x i32> %bc53, i64 5, !dbg !63
  %bc54 = bitcast <8 x float> %348 to <8 x i32>, !dbg !63
  %470 = extractelement <8 x i32> %bc54, i64 4, !dbg !63
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %467, i32 %468, i32 %469, i32 %470, ptr addrspace(1) %465, i1 true) #3, !dbg !63
  %bc55 = bitcast <8 x float> %348 to <8 x i32>, !dbg !63
  %471 = extractelement <8 x i32> %bc55, i64 3, !dbg !63
  %bc56 = bitcast <8 x float> %348 to <8 x i32>, !dbg !63
  %472 = extractelement <8 x i32> %bc56, i64 2, !dbg !63
  %bc57 = bitcast <8 x float> %348 to <8 x i32>, !dbg !63
  %473 = extractelement <8 x i32> %bc57, i64 1, !dbg !63
  %bc58 = bitcast <8 x float> %348 to <8 x i32>, !dbg !63
  %474 = extractelement <8 x i32> %bc58, i64 0, !dbg !63
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %471, i32 %472, i32 %473, i32 %474, ptr addrspace(1) %466, i1 true) #3, !dbg !63
  ret void, !dbg !64
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cy73hw56a7qw47crrentqkw7izjwuvzyy7p6vwgdbcvxqaa6rhrs.py", directory: "inductor_cache/y7")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_native_batch_norm_backward_relu_30, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_native_batch_norm_backward_relu_30, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_native_batch_norm_backward_relu_30", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_native_batch_norm_backward_relu_30", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 26, column: 39, scope: !7)
!17 = !DILocation(line: 27, column: 30, scope: !7)
!18 = !DILocation(line: 27, column: 35, scope: !7)
!19 = !DILocation(line: 28, column: 30, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 29, column: 30, scope: !7)
!22 = !DILocation(line: 29, column: 35, scope: !7)
!23 = !DILocation(line: 30, column: 30, scope: !7)
!24 = !DILocation(line: 30, column: 35, scope: !7)
!25 = !DILocation(line: 31, column: 30, scope: !7)
!26 = !DILocation(line: 31, column: 35, scope: !7)
!27 = !DILocation(line: 32, column: 31, scope: !7)
!28 = !DILocation(line: 32, column: 36, scope: !7)
!29 = !DILocation(line: 33, column: 31, scope: !7)
!30 = !DILocation(line: 33, column: 36, scope: !7)
!31 = !DILocation(line: 34, column: 31, scope: !7)
!32 = !DILocation(line: 34, column: 36, scope: !7)
!33 = !DILocation(line: 35, column: 31, scope: !7)
!34 = !DILocation(line: 35, column: 36, scope: !7)
!35 = !DILocation(line: 36, column: 31, scope: !7)
!36 = !DILocation(line: 36, column: 36, scope: !7)
!37 = !DILocation(line: 45, column: 20, scope: !7)
!38 = !DILocation(line: 46, column: 27, scope: !7)
!39 = !DILocation(line: 48, column: 20, scope: !7)
!40 = !DILocation(line: 37, column: 18, scope: !7)
!41 = !DILocation(line: 38, column: 18, scope: !7)
!42 = !DILocation(line: 39, column: 18, scope: !7)
!43 = !DILocation(line: 40, column: 18, scope: !7)
!44 = !DILocation(line: 43, column: 19, scope: !7)
!45 = !DILocation(line: 42, column: 19, scope: !7)
!46 = !DILocation(line: 41, column: 19, scope: !7)
!47 = !DILocation(line: 51, column: 20, scope: !7)
!48 = !DILocation(line: 52, column: 20, scope: !7)
!49 = !DILocation(line: 53, column: 20, scope: !7)
!50 = !DILocation(line: 118, column: 15, scope: !51, inlinedAt: !53)
!51 = distinct !DILexicalBlockFile(scope: !7, file: !52, discriminator: 0)
!52 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!53 = !DILocation(line: 55, column: 42, scope: !7)
!54 = !DILocation(line: 121, column: 29, scope: !51, inlinedAt: !53)
!55 = !DILocation(line: 56, column: 39, scope: !7)
!56 = !DILocation(line: 57, column: 25, scope: !7)
!57 = !DILocation(line: 57, column: 37, scope: !7)
!58 = !DILocation(line: 58, column: 25, scope: !7)
!59 = !DILocation(line: 58, column: 37, scope: !7)
!60 = !DILocation(line: 59, column: 25, scope: !7)
!61 = !DILocation(line: 59, column: 37, scope: !7)
!62 = !DILocation(line: 60, column: 25, scope: !7)
!63 = !DILocation(line: 60, column: 37, scope: !7)
!64 = !DILocation(line: 60, column: 4, scope: !7)
