; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_convolution_reflection_pad2d_relu_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %6 = shl i32 %5, 10, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 2, !dbg !12
  %9 = and i32 %8, 508, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = or disjoint i32 %10, 1, !dbg !13
  %12 = or disjoint i32 %10, 2, !dbg !13
  %13 = or disjoint i32 %10, 3, !dbg !13
  %14 = or disjoint i32 %10, 512, !dbg !13
  %15 = or disjoint i32 %10, 513, !dbg !13
  %16 = or disjoint i32 %10, 514, !dbg !13
  %17 = or disjoint i32 %10, 515, !dbg !13
  %18 = icmp slt i32 %10, 1115136, !dbg !14
  %19 = icmp slt i32 %14, 1115136, !dbg !14
  %20 = srem i32 %11, 66, !dbg !15
  %21 = srem i32 %13, 66, !dbg !15
  %22 = srem i32 %15, 66, !dbg !15
  %23 = srem i32 %17, 66, !dbg !15
  %24 = sdiv i32 %10, 66, !dbg !16
  %25 = sdiv i32 %12, 66, !dbg !16
  %26 = sdiv i32 %14, 66, !dbg !16
  %27 = sdiv i32 %16, 66, !dbg !16
  %28 = sdiv i32 %10, 4356, !dbg !17
  %29 = sdiv i32 %14, 4356, !dbg !17
  %30 = srem i32 %28, 64, !dbg !18
  %31 = srem i32 %29, 64, !dbg !18
  %32 = add nsw i32 %20, -1, !dbg !19
  %33 = add nsw i32 %21, -1, !dbg !19
  %34 = add nsw i32 %22, -1, !dbg !19
  %35 = add nsw i32 %23, -1, !dbg !19
  %36 = tail call i32 @llvm.abs.i32(i32 %32, i1 true), !dbg !20
  %37 = tail call i32 @llvm.abs.i32(i32 %33, i1 true), !dbg !20
  %38 = tail call i32 @llvm.abs.i32(i32 %34, i1 true), !dbg !20
  %39 = tail call i32 @llvm.abs.i32(i32 %35, i1 true), !dbg !20
  %40 = add nsw i32 %36, -63, !dbg !21
  %41 = add nsw i32 %37, -63, !dbg !21
  %42 = add nsw i32 %38, -63, !dbg !21
  %43 = add nsw i32 %39, -63, !dbg !21
  %44 = tail call i32 @llvm.abs.i32(i32 %40, i1 true), !dbg !22
  %45 = tail call i32 @llvm.abs.i32(i32 %41, i1 true), !dbg !22
  %46 = tail call i32 @llvm.abs.i32(i32 %42, i1 true), !dbg !22
  %47 = tail call i32 @llvm.abs.i32(i32 %43, i1 true), !dbg !22
  %48 = shl nsw i32 %28, 12, !dbg !23
  %49 = shl nsw i32 %29, 12, !dbg !23
  %reass.sub = or disjoint i32 %48, 4095, !dbg !24
  %50 = insertelement <2 x i32> poison, i32 %10, i64 0, !dbg !15
  %51 = insertelement <2 x i32> %50, i32 %24, i64 1, !dbg !15
  %52 = srem <2 x i32> %51, splat (i32 66), !dbg !15
  %53 = add nsw <2 x i32> %52, splat (i32 -1), !dbg !19
  %54 = tail call <2 x i32> @llvm.abs.v2i32(<2 x i32> %53, i1 true), !dbg !20
  %55 = add nsw <2 x i32> %54, splat (i32 -63), !dbg !21
  %56 = tail call <2 x i32> @llvm.abs.v2i32(<2 x i32> %55, i1 true), !dbg !22
  %57 = extractelement <2 x i32> %56, i64 0, !dbg !25
  %58 = sub nuw i32 %reass.sub, %57, !dbg !25
  %59 = extractelement <2 x i32> %56, i64 1, !dbg !25
  %60 = mul nsw i32 %59, -64, !dbg !25
  %61 = add i32 %58, %60, !dbg !25
  %62 = sub nuw i32 %reass.sub, %44, !dbg !24
  %63 = add i32 %62, %60, !dbg !25
  %64 = insertelement <2 x i32> poison, i32 %12, i64 0, !dbg !15
  %65 = insertelement <2 x i32> %64, i32 %25, i64 1, !dbg !15
  %66 = srem <2 x i32> %65, splat (i32 66), !dbg !15
  %67 = add nsw <2 x i32> %66, splat (i32 -1), !dbg !19
  %68 = tail call <2 x i32> @llvm.abs.v2i32(<2 x i32> %67, i1 true), !dbg !20
  %69 = add nsw <2 x i32> %68, splat (i32 -63), !dbg !21
  %70 = tail call <2 x i32> @llvm.abs.v2i32(<2 x i32> %69, i1 true), !dbg !22
  %71 = extractelement <2 x i32> %70, i64 0, !dbg !25
  %72 = sub nuw i32 %reass.sub, %71, !dbg !25
  %73 = extractelement <2 x i32> %70, i64 1, !dbg !25
  %74 = mul nsw i32 %73, -64, !dbg !25
  %75 = add i32 %72, %74, !dbg !25
  %76 = sub nuw i32 %reass.sub, %45, !dbg !24
  %77 = add i32 %76, %74, !dbg !25
  %reass.sub4 = or disjoint i32 %49, 4095, !dbg !24
  %78 = insertelement <2 x i32> poison, i32 %14, i64 0, !dbg !15
  %79 = insertelement <2 x i32> %78, i32 %26, i64 1, !dbg !15
  %80 = srem <2 x i32> %79, splat (i32 66), !dbg !15
  %81 = add nsw <2 x i32> %80, splat (i32 -1), !dbg !19
  %82 = tail call <2 x i32> @llvm.abs.v2i32(<2 x i32> %81, i1 true), !dbg !20
  %83 = add nsw <2 x i32> %82, splat (i32 -63), !dbg !21
  %84 = tail call <2 x i32> @llvm.abs.v2i32(<2 x i32> %83, i1 true), !dbg !22
  %85 = extractelement <2 x i32> %84, i64 0, !dbg !25
  %86 = sub nuw i32 %reass.sub4, %85, !dbg !25
  %87 = extractelement <2 x i32> %84, i64 1, !dbg !25
  %88 = mul nsw i32 %87, -64, !dbg !25
  %89 = add i32 %86, %88, !dbg !25
  %90 = sub nuw i32 %reass.sub4, %46, !dbg !24
  %91 = add i32 %90, %88, !dbg !25
  %92 = insertelement <2 x i32> poison, i32 %16, i64 0, !dbg !15
  %93 = insertelement <2 x i32> %92, i32 %27, i64 1, !dbg !15
  %94 = srem <2 x i32> %93, splat (i32 66), !dbg !15
  %95 = add nsw <2 x i32> %94, splat (i32 -1), !dbg !19
  %96 = tail call <2 x i32> @llvm.abs.v2i32(<2 x i32> %95, i1 true), !dbg !20
  %97 = add nsw <2 x i32> %96, splat (i32 -63), !dbg !21
  %98 = tail call <2 x i32> @llvm.abs.v2i32(<2 x i32> %97, i1 true), !dbg !22
  %99 = extractelement <2 x i32> %98, i64 0, !dbg !25
  %100 = sub nuw i32 %reass.sub4, %99, !dbg !25
  %101 = extractelement <2 x i32> %98, i64 1, !dbg !25
  %102 = mul nsw i32 %101, -64, !dbg !25
  %103 = add i32 %100, %102, !dbg !25
  %104 = sub nuw i32 %reass.sub4, %47, !dbg !24
  %105 = add i32 %104, %102, !dbg !25
  %106 = sext i32 %61 to i64, !dbg !26
  %107 = getelementptr float, ptr addrspace(1) %0, i64 %106, !dbg !26
  %108 = sext i32 %63 to i64, !dbg !26
  %109 = getelementptr float, ptr addrspace(1) %0, i64 %108, !dbg !26
  %110 = sext i32 %75 to i64, !dbg !26
  %111 = getelementptr float, ptr addrspace(1) %0, i64 %110, !dbg !26
  %112 = sext i32 %77 to i64, !dbg !26
  %113 = getelementptr float, ptr addrspace(1) %0, i64 %112, !dbg !26
  %114 = sext i32 %89 to i64, !dbg !26
  %115 = getelementptr float, ptr addrspace(1) %0, i64 %114, !dbg !26
  %116 = sext i32 %91 to i64, !dbg !26
  %117 = getelementptr float, ptr addrspace(1) %0, i64 %116, !dbg !26
  %118 = sext i32 %103 to i64, !dbg !26
  %119 = getelementptr float, ptr addrspace(1) %0, i64 %118, !dbg !26
  %120 = sext i32 %105 to i64, !dbg !26
  %121 = getelementptr float, ptr addrspace(1) %0, i64 %120, !dbg !26
  %122 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %107, i1 %18) #2, !dbg !27
  %123 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %109, i1 %18) #2, !dbg !27
  %124 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %111, i1 %18) #2, !dbg !27
  %125 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %113, i1 %18) #2, !dbg !27
  %126 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %115, i1 %19) #2, !dbg !27
  %127 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %117, i1 %19) #2, !dbg !27
  %128 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %119, i1 %19) #2, !dbg !27
  %129 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %121, i1 %19) #2, !dbg !27
  %130 = sext i32 %30 to i64, !dbg !28
  %131 = getelementptr float, ptr addrspace(1) %1, i64 %130, !dbg !28
  %132 = sext i32 %31 to i64, !dbg !28
  %133 = getelementptr float, ptr addrspace(1) %1, i64 %132, !dbg !28
  %134 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %131, i1 %18) #2, !dbg !29
  %135 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %131, i1 %18) #2, !dbg !29
  %136 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %131, i1 %18) #2, !dbg !29
  %137 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %131, i1 %18) #2, !dbg !29
  %138 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %133, i1 %19) #2, !dbg !29
  %139 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %133, i1 %19) #2, !dbg !29
  %140 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %133, i1 %19) #2, !dbg !29
  %141 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %133, i1 %19) #2, !dbg !29
  %142 = insertelement <8 x i32> poison, i32 %129, i64 0, !dbg !27
  %143 = insertelement <8 x i32> %142, i32 %128, i64 1, !dbg !27
  %144 = insertelement <8 x i32> %143, i32 %127, i64 2, !dbg !27
  %145 = insertelement <8 x i32> %144, i32 %126, i64 3, !dbg !27
  %146 = insertelement <8 x i32> %145, i32 %125, i64 4, !dbg !27
  %147 = insertelement <8 x i32> %146, i32 %124, i64 5, !dbg !27
  %148 = insertelement <8 x i32> %147, i32 %123, i64 6, !dbg !27
  %149 = insertelement <8 x i32> %148, i32 %122, i64 7, !dbg !27
  %150 = bitcast <8 x i32> %149 to <8 x float>, !dbg !27
  %151 = insertelement <8 x i32> poison, i32 %141, i64 0, !dbg !29
  %152 = insertelement <8 x i32> %151, i32 %140, i64 1, !dbg !29
  %153 = insertelement <8 x i32> %152, i32 %139, i64 2, !dbg !29
  %154 = insertelement <8 x i32> %153, i32 %138, i64 3, !dbg !29
  %155 = insertelement <8 x i32> %154, i32 %137, i64 4, !dbg !29
  %156 = insertelement <8 x i32> %155, i32 %136, i64 5, !dbg !29
  %157 = insertelement <8 x i32> %156, i32 %135, i64 6, !dbg !29
  %158 = insertelement <8 x i32> %157, i32 %134, i64 7, !dbg !29
  %159 = bitcast <8 x i32> %158 to <8 x float>, !dbg !29
  %160 = fadd <8 x float> %150, %159, !dbg !30
  %161 = fcmp olt <8 x float> %160, zeroinitializer, !dbg !31
  %162 = extractelement <8 x i1> %161, i64 7, !dbg !35
  %163 = extractelement <8 x i1> %161, i64 6, !dbg !35
  %164 = extractelement <8 x i1> %161, i64 5, !dbg !35
  %165 = extractelement <8 x i1> %161, i64 4, !dbg !35
  %166 = extractelement <8 x i1> %161, i64 3, !dbg !35
  %167 = extractelement <8 x i1> %161, i64 2, !dbg !35
  %168 = extractelement <8 x i1> %161, i64 1, !dbg !35
  %169 = extractelement <8 x i1> %161, i64 0, !dbg !35
  %170 = sext i32 %10 to i64, !dbg !36
  %171 = getelementptr float, ptr addrspace(1) %2, i64 %170, !dbg !36
  %172 = sext i32 %14 to i64, !dbg !36
  %173 = getelementptr float, ptr addrspace(1) %2, i64 %172, !dbg !36
  %bc = bitcast <8 x float> %160 to <8 x i32>, !dbg !37
  %174 = extractelement <8 x i32> %bc, i64 7, !dbg !37
  %175 = select i1 %162, i32 0, i32 %174, !dbg !35
  %bc15 = bitcast <8 x float> %160 to <8 x i32>, !dbg !37
  %176 = extractelement <8 x i32> %bc15, i64 6, !dbg !37
  %177 = select i1 %163, i32 0, i32 %176, !dbg !35
  %bc16 = bitcast <8 x float> %160 to <8 x i32>, !dbg !37
  %178 = extractelement <8 x i32> %bc16, i64 5, !dbg !37
  %179 = select i1 %164, i32 0, i32 %178, !dbg !35
  %bc17 = bitcast <8 x float> %160 to <8 x i32>, !dbg !37
  %180 = extractelement <8 x i32> %bc17, i64 4, !dbg !37
  %181 = select i1 %165, i32 0, i32 %180, !dbg !35
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %175, i32 %177, i32 %179, i32 %181, ptr addrspace(1) %171, i1 %18) #2, !dbg !37
  %bc18 = bitcast <8 x float> %160 to <8 x i32>, !dbg !37
  %182 = extractelement <8 x i32> %bc18, i64 3, !dbg !37
  %183 = select i1 %166, i32 0, i32 %182, !dbg !35
  %bc19 = bitcast <8 x float> %160 to <8 x i32>, !dbg !37
  %184 = extractelement <8 x i32> %bc19, i64 2, !dbg !37
  %185 = select i1 %167, i32 0, i32 %184, !dbg !35
  %bc20 = bitcast <8 x float> %160 to <8 x i32>, !dbg !37
  %186 = extractelement <8 x i32> %bc20, i64 1, !dbg !37
  %187 = select i1 %168, i32 0, i32 %186, !dbg !35
  %bc21 = bitcast <8 x float> %160 to <8 x i32>, !dbg !37
  %188 = extractelement <8 x i32> %bc21, i64 0, !dbg !37
  %189 = select i1 %169, i32 0, i32 %188, !dbg !35
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %183, i32 %185, i32 %187, i32 %189, ptr addrspace(1) %173, i1 %19) #2, !dbg !37
  ret void, !dbg !38
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.abs.i32(i32, i1 immarg) #0

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare <2 x i32> @llvm.abs.v2i32(<2 x i32>, i1 immarg) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c4nsmbgu2g6q5elcrt3s7couvmcf3wumlow7ms4tsyldmql6eiho.py", directory: "inductor_cache/4n")
!4 = !{ptr @triton_poi_fused_convolution_reflection_pad2d_relu_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_reflection_pad2d_relu_1, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_reflection_pad2d_relu_1", linkageName: "triton_poi_fused_convolution_reflection_pad2d_relu_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 25, column: 21, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 27, column: 29, scope: !7)
!19 = !DILocation(line: 29, column: 82, scope: !7)
!20 = !DILocation(line: 29, column: 75, scope: !7)
!21 = !DILocation(line: 29, column: 63, scope: !7)
!22 = !DILocation(line: 29, column: 55, scope: !7)
!23 = !DILocation(line: 29, column: 149, scope: !7)
!24 = !DILocation(line: 29, column: 91, scope: !7)
!25 = !DILocation(line: 29, column: 144, scope: !7)
!26 = !DILocation(line: 29, column: 30, scope: !7)
!27 = !DILocation(line: 29, column: 154, scope: !7)
!28 = !DILocation(line: 30, column: 30, scope: !7)
!29 = !DILocation(line: 30, column: 35, scope: !7)
!30 = !DILocation(line: 31, column: 18, scope: !7)
!31 = !DILocation(line: 118, column: 15, scope: !32, inlinedAt: !34)
!32 = distinct !DILexicalBlockFile(scope: !7, file: !33, discriminator: 0)
!33 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!34 = !DILocation(line: 33, column: 40, scope: !7)
!35 = !DILocation(line: 121, column: 29, scope: !32, inlinedAt: !34)
!36 = !DILocation(line: 34, column: 25, scope: !7)
!37 = !DILocation(line: 34, column: 36, scope: !7)
!38 = !DILocation(line: 34, column: 4, scope: !7)
