; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__unsafe_index_add_mul_sigmoid_sub_17(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %11 = shl i32 %10, 7, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = and i32 %12, 127, !dbg !12
  %14 = or disjoint i32 %11, %13, !dbg !13
  %.frozen = freeze i32 %14, !dbg !14
  %15 = sdiv i32 %.frozen, 64, !dbg !14
  %16 = srem i32 %15, 64, !dbg !15
  %17 = mul i32 %15, 64, !dbg !16
  %.decomposed = sub i32 %.frozen, %17, !dbg !16
  %18 = sdiv i32 %14, 4096, !dbg !17
  %19 = sext i32 %16 to i64, !dbg !18
  %20 = getelementptr i64, ptr addrspace(1) %1, i64 %19, !dbg !18
  %21 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %20, i1 true) #1, !dbg !19
  %22 = sext i32 %.decomposed to i64, !dbg !20
  %23 = getelementptr i64, ptr addrspace(1) %2, i64 %22, !dbg !20
  %24 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %23, i1 true) #1, !dbg !21
  %25 = getelementptr i64, ptr addrspace(1) %4, i64 %22, !dbg !22
  %26 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %25, i1 true) #1, !dbg !23
  %27 = getelementptr float, ptr addrspace(1) %5, i64 %22, !dbg !24
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 true) #1, !dbg !25
  %29 = getelementptr i64, ptr addrspace(1) %6, i64 %19, !dbg !26
  %30 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %29, i1 true) #1, !dbg !27
  %31 = getelementptr float, ptr addrspace(1) %7, i64 %19, !dbg !28
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 true) #1, !dbg !29
  %33 = bitcast i32 %32 to float, !dbg !29
  %34 = lshr i64 %21, 58, !dbg !30
  %35 = and i64 %34, 32, !dbg !30
  %36 = add i64 %35, %21, !dbg !30
  %37 = lshr i64 %24, 58, !dbg !31
  %38 = and i64 %37, 32, !dbg !31
  %39 = shl i64 %36, 5, !dbg !32
  %40 = shl nsw i32 %18, 10, !dbg !33
  %41 = sext i32 %40 to i64, !dbg !34
  %42 = getelementptr float, ptr addrspace(1) %3, i64 %24, !dbg !35
  %43 = getelementptr float, ptr addrspace(1) %42, i64 %38, !dbg !35
  %44 = getelementptr float, ptr addrspace(1) %43, i64 %39, !dbg !35
  %45 = getelementptr float, ptr addrspace(1) %44, i64 %41, !dbg !35
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 true) #1, !dbg !36
  %47 = lshr i64 %26, 58, !dbg !37
  %48 = and i64 %47, 32, !dbg !37
  %49 = getelementptr float, ptr addrspace(1) %3, i64 %26, !dbg !38
  %50 = getelementptr float, ptr addrspace(1) %49, i64 %48, !dbg !38
  %51 = getelementptr float, ptr addrspace(1) %50, i64 %39, !dbg !38
  %52 = getelementptr float, ptr addrspace(1) %51, i64 %41, !dbg !38
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 true) #1, !dbg !39
  %54 = lshr i64 %30, 58, !dbg !40
  %55 = and i64 %54, 32, !dbg !40
  %56 = add i64 %55, %30, !dbg !40
  %57 = shl i64 %56, 5, !dbg !41
  %58 = getelementptr float, ptr addrspace(1) %43, i64 %57, !dbg !42
  %59 = getelementptr float, ptr addrspace(1) %58, i64 %41, !dbg !42
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 true) #1, !dbg !43
  %61 = getelementptr float, ptr addrspace(1) %50, i64 %57, !dbg !44
  %62 = getelementptr float, ptr addrspace(1) %61, i64 %41, !dbg !44
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 true) #1, !dbg !45
  %64 = insertelement <2 x i32> poison, i32 %60, i64 0, !dbg !43
  %65 = insertelement <2 x i32> %64, i32 %46, i64 1, !dbg !43
  %66 = bitcast <2 x i32> %65 to <2 x float>, !dbg !43
  %67 = insertelement <2 x i32> poison, i32 %63, i64 0, !dbg !45
  %68 = insertelement <2 x i32> %67, i32 %53, i64 1, !dbg !45
  %69 = bitcast <2 x i32> %68 to <2 x float>, !dbg !45
  %70 = fsub <2 x float> %69, %66, !dbg !46
  %71 = insertelement <2 x i32> poison, i32 %28, i64 0, !dbg !47
  %72 = bitcast <2 x i32> %71 to <2 x float>, !dbg !47
  %73 = shufflevector <2 x float> %72, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !47
  %74 = fmul <2 x float> %70, %73, !dbg !47
  %75 = fadd <2 x float> %74, %66, !dbg !48
  %76 = extractelement <2 x float> %75, i64 0, !dbg !49
  %77 = extractelement <2 x float> %75, i64 1, !dbg !50
  %78 = fsub float %76, %77, !dbg !49
  %79 = fmul float %78, %33, !dbg !51
  %80 = fadd float %77, %79, !dbg !50
  %81 = fsub float 0.000000e+00, %80, !dbg !52
  %82 = fmul float %81, 0x3FF7154760000000, !dbg !56
  %83 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %82) #1, !dbg !56
  %84 = fadd float %83, 1.000000e+00, !dbg !57
  %85 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %84) #1, !dbg !58
  %86 = sext i32 %14 to i64, !dbg !59
  %87 = getelementptr float, ptr addrspace(1) %0, i64 %86, !dbg !59
  %88 = bitcast float %85 to i32, !dbg !60
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %88, ptr addrspace(1) %87, i1 true) #1, !dbg !60
  ret void, !dbg !61
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c3mdzuwhpr2qb2qnklsxtqsy4r2weinrt4excoyaotel5vmvlb3a.py", directory: "inductor_cache/3m")
!4 = !{ptr @triton_poi_fused__unsafe_index_add_mul_sigmoid_sub_17, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__unsafe_index_add_mul_sigmoid_sub_17, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__unsafe_index_add_mul_sigmoid_sub_17", linkageName: "triton_poi_fused__unsafe_index_add_mul_sigmoid_sub_17", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 27, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 30, scope: !7)
!19 = !DILocation(line: 28, column: 35, scope: !7)
!20 = !DILocation(line: 29, column: 30, scope: !7)
!21 = !DILocation(line: 29, column: 35, scope: !7)
!22 = !DILocation(line: 30, column: 31, scope: !7)
!23 = !DILocation(line: 30, column: 36, scope: !7)
!24 = !DILocation(line: 31, column: 31, scope: !7)
!25 = !DILocation(line: 31, column: 36, scope: !7)
!26 = !DILocation(line: 32, column: 31, scope: !7)
!27 = !DILocation(line: 32, column: 36, scope: !7)
!28 = !DILocation(line: 33, column: 31, scope: !7)
!29 = !DILocation(line: 33, column: 36, scope: !7)
!30 = !DILocation(line: 37, column: 32, scope: !7)
!31 = !DILocation(line: 40, column: 32, scope: !7)
!32 = !DILocation(line: 41, column: 40, scope: !7)
!33 = !DILocation(line: 41, column: 52, scope: !7)
!34 = !DILocation(line: 41, column: 47, scope: !7)
!35 = !DILocation(line: 41, column: 30, scope: !7)
!36 = !DILocation(line: 41, column: 57, scope: !7)
!37 = !DILocation(line: 44, column: 35, scope: !7)
!38 = !DILocation(line: 45, column: 31, scope: !7)
!39 = !DILocation(line: 45, column: 59, scope: !7)
!40 = !DILocation(line: 51, column: 35, scope: !7)
!41 = !DILocation(line: 52, column: 41, scope: !7)
!42 = !DILocation(line: 52, column: 31, scope: !7)
!43 = !DILocation(line: 52, column: 59, scope: !7)
!44 = !DILocation(line: 53, column: 31, scope: !7)
!45 = !DILocation(line: 53, column: 60, scope: !7)
!46 = !DILocation(line: 54, column: 20, scope: !7)
!47 = !DILocation(line: 55, column: 20, scope: !7)
!48 = !DILocation(line: 56, column: 20, scope: !7)
!49 = !DILocation(line: 57, column: 20, scope: !7)
!50 = !DILocation(line: 59, column: 20, scope: !7)
!51 = !DILocation(line: 58, column: 20, scope: !7)
!52 = !DILocation(line: 47, column: 30, scope: !53, inlinedAt: !55)
!53 = distinct !DILexicalBlockFile(scope: !7, file: !54, discriminator: 0)
!54 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!55 = !DILocation(line: 60, column: 23, scope: !7)
!56 = !DILocation(line: 47, column: 29, scope: !53, inlinedAt: !55)
!57 = !DILocation(line: 47, column: 20, scope: !53, inlinedAt: !55)
!58 = !DILocation(line: 47, column: 16, scope: !53, inlinedAt: !55)
!59 = !DILocation(line: 61, column: 28, scope: !7)
!60 = !DILocation(line: 61, column: 40, scope: !7)
!61 = !DILocation(line: 61, column: 4, scope: !7)
