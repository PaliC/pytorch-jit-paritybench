; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_add_cat_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %7 = shl i32 %6, 10, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 508, !dbg !12
  %11 = or disjoint i32 %7, %10, !dbg !13
  %12 = or disjoint i32 %11, 512, !dbg !13
  %.frozen = freeze i32 %11, !dbg !14
  %13 = sdiv i32 %.frozen, 1024, !dbg !14
  %.frozen17 = freeze i32 %12, !dbg !14
  %14 = sdiv i32 %.frozen17, 1024, !dbg !14
  %15 = srem i32 %13, 128, !dbg !15
  %16 = srem i32 %14, 128, !dbg !15
  %17 = mul i32 %13, 1024, !dbg !16
  %.decomposed = sub i32 %.frozen, %17, !dbg !16
  %18 = mul i32 %14, 1024, !dbg !16
  %.decomposed18 = sub i32 %.frozen17, %18, !dbg !16
  %.frozen19 = freeze i32 %11, !dbg !17
  %19 = sdiv i32 %.frozen19, 131072, !dbg !17
  %.frozen20 = freeze i32 %12, !dbg !17
  %20 = sdiv i32 %.frozen20, 131072, !dbg !17
  %21 = sext i32 %11 to i64, !dbg !18
  %22 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !18
  %23 = sext i32 %12 to i64, !dbg !18
  %24 = getelementptr float, ptr addrspace(1) %0, i64 %23, !dbg !18
  %25 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %22, i1 true) #1, !dbg !19
  %26 = extractvalue { i32, i32, i32, i32 } %25, 0, !dbg !19
  %27 = extractvalue { i32, i32, i32, i32 } %25, 1, !dbg !19
  %28 = extractvalue { i32, i32, i32, i32 } %25, 2, !dbg !19
  %29 = extractvalue { i32, i32, i32, i32 } %25, 3, !dbg !19
  %30 = bitcast i32 %26 to float, !dbg !19
  %31 = bitcast i32 %27 to float, !dbg !19
  %32 = bitcast i32 %28 to float, !dbg !19
  %33 = bitcast i32 %29 to float, !dbg !19
  %34 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %24, i1 true) #1, !dbg !19
  %35 = extractvalue { i32, i32, i32, i32 } %34, 0, !dbg !19
  %36 = extractvalue { i32, i32, i32, i32 } %34, 1, !dbg !19
  %37 = extractvalue { i32, i32, i32, i32 } %34, 2, !dbg !19
  %38 = extractvalue { i32, i32, i32, i32 } %34, 3, !dbg !19
  %39 = bitcast i32 %35 to float, !dbg !19
  %40 = bitcast i32 %36 to float, !dbg !19
  %41 = bitcast i32 %37 to float, !dbg !19
  %42 = bitcast i32 %38 to float, !dbg !19
  %43 = icmp slt i32 %15, 64, !dbg !20
  %44 = icmp slt i32 %16, 64, !dbg !20
  %45 = mul i32 %19, 131072, !dbg !21
  %srem.decomposed = sub i32 %.frozen19, %45, !dbg !21
  %46 = mul i32 %20, 131072, !dbg !21
  %srem1.decomposed = sub i32 %.frozen20, %46, !dbg !21
  %47 = shl nsw i32 %19, 16, !dbg !22
  %48 = shl nsw i32 %20, 16, !dbg !22
  %49 = add nsw i32 %47, %srem.decomposed, !dbg !23
  %50 = add nsw i32 %48, %srem1.decomposed, !dbg !23
  %51 = sext i32 %49 to i64, !dbg !24
  %52 = getelementptr float, ptr addrspace(1) %1, i64 %51, !dbg !24
  %53 = sext i32 %50 to i64, !dbg !24
  %54 = getelementptr float, ptr addrspace(1) %1, i64 %53, !dbg !24
  %55 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %52, i1 %43, i32 0, i1 %43, i32 0, i1 %43, i32 0, i1 %43, i32 0, i1 %43) #1, !dbg !25
  %56 = extractvalue { i32, i32, i32, i32 } %55, 0, !dbg !25
  %57 = extractvalue { i32, i32, i32, i32 } %55, 1, !dbg !25
  %58 = extractvalue { i32, i32, i32, i32 } %55, 2, !dbg !25
  %59 = extractvalue { i32, i32, i32, i32 } %55, 3, !dbg !25
  %60 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %54, i1 %44, i32 0, i1 %44, i32 0, i1 %44, i32 0, i1 %44, i32 0, i1 %44) #1, !dbg !25
  %61 = extractvalue { i32, i32, i32, i32 } %60, 0, !dbg !25
  %62 = extractvalue { i32, i32, i32, i32 } %60, 1, !dbg !25
  %63 = extractvalue { i32, i32, i32, i32 } %60, 2, !dbg !25
  %64 = extractvalue { i32, i32, i32, i32 } %60, 3, !dbg !25
  %65 = and i32 %15, -32, !dbg !26
  %66 = icmp eq i32 %65, 64, !dbg !26
  %67 = and i32 %16, -32, !dbg !26
  %68 = icmp eq i32 %67, 64, !dbg !26
  %69 = shl nsw i32 %15, 10, !dbg !27
  %70 = shl nsw i32 %16, 10, !dbg !27
  %71 = shl nsw i32 %19, 15, !dbg !28
  %72 = shl nsw i32 %20, 15, !dbg !28
  %73 = add nsw i32 %71, %.decomposed, !dbg !27
  %74 = add nsw i32 %73, -65536, !dbg !29
  %75 = add nsw i32 %74, %69, !dbg !30
  %76 = add nsw i32 %72, %.decomposed18, !dbg !27
  %77 = add nsw i32 %76, -65536, !dbg !29
  %78 = add nsw i32 %77, %70, !dbg !30
  %79 = sext i32 %75 to i64, !dbg !31
  %80 = getelementptr float, ptr addrspace(1) %2, i64 %79, !dbg !31
  %81 = sext i32 %78 to i64, !dbg !31
  %82 = getelementptr float, ptr addrspace(1) %2, i64 %81, !dbg !31
  %83 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %80, i1 %66, i32 0, i1 %66, i32 0, i1 %66, i32 0, i1 %66, i32 0, i1 %66) #1, !dbg !32
  %84 = extractvalue { i32, i32, i32, i32 } %83, 0, !dbg !32
  %85 = extractvalue { i32, i32, i32, i32 } %83, 1, !dbg !32
  %86 = extractvalue { i32, i32, i32, i32 } %83, 2, !dbg !32
  %87 = extractvalue { i32, i32, i32, i32 } %83, 3, !dbg !32
  %88 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %82, i1 %68, i32 0, i1 %68, i32 0, i1 %68, i32 0, i1 %68, i32 0, i1 %68) #1, !dbg !32
  %89 = extractvalue { i32, i32, i32, i32 } %88, 0, !dbg !32
  %90 = extractvalue { i32, i32, i32, i32 } %88, 1, !dbg !32
  %91 = extractvalue { i32, i32, i32, i32 } %88, 2, !dbg !32
  %92 = extractvalue { i32, i32, i32, i32 } %88, 3, !dbg !32
  %93 = icmp sgt i32 %15, 95, !dbg !33
  %94 = icmp sgt i32 %16, 95, !dbg !33
  %95 = add nsw i32 %73, -98304, !dbg !34
  %96 = add nsw i32 %95, %69, !dbg !35
  %97 = add nsw i32 %76, -98304, !dbg !34
  %98 = add nsw i32 %97, %70, !dbg !35
  %99 = sext i32 %96 to i64, !dbg !36
  %100 = getelementptr float, ptr addrspace(1) %3, i64 %99, !dbg !36
  %101 = sext i32 %98 to i64, !dbg !36
  %102 = getelementptr float, ptr addrspace(1) %3, i64 %101, !dbg !36
  %103 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %100, i1 %93, i32 0, i1 %93, i32 0, i1 %93, i32 0, i1 %93, i32 0, i1 %93) #1, !dbg !37
  %104 = extractvalue { i32, i32, i32, i32 } %103, 0, !dbg !37
  %105 = extractvalue { i32, i32, i32, i32 } %103, 1, !dbg !37
  %106 = extractvalue { i32, i32, i32, i32 } %103, 2, !dbg !37
  %107 = extractvalue { i32, i32, i32, i32 } %103, 3, !dbg !37
  %108 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %102, i1 %94, i32 0, i1 %94, i32 0, i1 %94, i32 0, i1 %94, i32 0, i1 %94) #1, !dbg !37
  %109 = extractvalue { i32, i32, i32, i32 } %108, 0, !dbg !37
  %110 = extractvalue { i32, i32, i32, i32 } %108, 1, !dbg !37
  %111 = extractvalue { i32, i32, i32, i32 } %108, 2, !dbg !37
  %112 = extractvalue { i32, i32, i32, i32 } %108, 3, !dbg !37
  %.v = select i1 %66, i32 %84, i32 %104, !dbg !38
  %.v2 = select i1 %66, i32 %85, i32 %105, !dbg !38
  %.v3 = select i1 %66, i32 %86, i32 %106, !dbg !38
  %.v4 = select i1 %66, i32 %87, i32 %107, !dbg !38
  %.v5 = select i1 %68, i32 %89, i32 %109, !dbg !38
  %.v6 = select i1 %68, i32 %90, i32 %110, !dbg !38
  %.v7 = select i1 %68, i32 %91, i32 %111, !dbg !38
  %.v8 = select i1 %68, i32 %92, i32 %112, !dbg !38
  %.v9 = select i1 %43, i32 %56, i32 %.v, !dbg !39
  %113 = bitcast i32 %.v9 to float, !dbg !39
  %.v10 = select i1 %43, i32 %57, i32 %.v2, !dbg !39
  %114 = bitcast i32 %.v10 to float, !dbg !39
  %.v11 = select i1 %43, i32 %58, i32 %.v3, !dbg !39
  %115 = bitcast i32 %.v11 to float, !dbg !39
  %.v12 = select i1 %43, i32 %59, i32 %.v4, !dbg !39
  %116 = bitcast i32 %.v12 to float, !dbg !39
  %.v13 = select i1 %44, i32 %61, i32 %.v5, !dbg !39
  %117 = bitcast i32 %.v13 to float, !dbg !39
  %.v14 = select i1 %44, i32 %62, i32 %.v6, !dbg !39
  %118 = bitcast i32 %.v14 to float, !dbg !39
  %.v15 = select i1 %44, i32 %63, i32 %.v7, !dbg !39
  %119 = bitcast i32 %.v15 to float, !dbg !39
  %.v16 = select i1 %44, i32 %64, i32 %.v8, !dbg !39
  %120 = bitcast i32 %.v16 to float, !dbg !39
  %121 = fadd float %30, %113, !dbg !40
  %122 = fadd float %31, %114, !dbg !40
  %123 = fadd float %32, %115, !dbg !40
  %124 = fadd float %33, %116, !dbg !40
  %125 = fadd float %39, %117, !dbg !40
  %126 = fadd float %40, %118, !dbg !40
  %127 = fadd float %41, %119, !dbg !40
  %128 = fadd float %42, %120, !dbg !40
  %129 = bitcast float %121 to i32, !dbg !41
  %130 = bitcast float %122 to i32, !dbg !41
  %131 = bitcast float %123 to i32, !dbg !41
  %132 = bitcast float %124 to i32, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %129, i32 %130, i32 %131, i32 %132, ptr addrspace(1) %22, i1 true) #1, !dbg !41
  %133 = bitcast float %125 to i32, !dbg !41
  %134 = bitcast float %126 to i32, !dbg !41
  %135 = bitcast float %127 to i32, !dbg !41
  %136 = bitcast float %128 to i32, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %133, i32 %134, i32 %135, i32 %136, ptr addrspace(1) %24, i1 true) #1, !dbg !41
  ret void, !dbg !42
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c6dkrtzriiiibq2xvrrjsnp35xafoem3lmnaqdasly4jmsjtnpm7.py", directory: "inductor_cache/6d")
!4 = !{ptr @triton_poi_fused_add_cat_6, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_cat_6, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_cat_6", linkageName: "triton_poi_fused_add_cat_6", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 29, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 35, scope: !7)
!19 = !DILocation(line: 28, column: 40, scope: !7)
!20 = !DILocation(line: 33, column: 18, scope: !7)
!21 = !DILocation(line: 34, column: 35, scope: !7)
!22 = !DILocation(line: 34, column: 53, scope: !7)
!23 = !DILocation(line: 34, column: 47, scope: !7)
!24 = !DILocation(line: 34, column: 30, scope: !7)
!25 = !DILocation(line: 34, column: 58, scope: !7)
!26 = !DILocation(line: 38, column: 18, scope: !7)
!27 = !DILocation(line: 39, column: 42, scope: !7)
!28 = !DILocation(line: 39, column: 62, scope: !7)
!29 = !DILocation(line: 39, column: 36, scope: !7)
!30 = !DILocation(line: 39, column: 56, scope: !7)
!31 = !DILocation(line: 39, column: 31, scope: !7)
!32 = !DILocation(line: 39, column: 67, scope: !7)
!33 = !DILocation(line: 40, column: 20, scope: !7)
!34 = !DILocation(line: 43, column: 36, scope: !7)
!35 = !DILocation(line: 43, column: 56, scope: !7)
!36 = !DILocation(line: 43, column: 31, scope: !7)
!37 = !DILocation(line: 43, column: 67, scope: !7)
!38 = !DILocation(line: 44, column: 34, scope: !7)
!39 = !DILocation(line: 45, column: 33, scope: !7)
!40 = !DILocation(line: 46, column: 20, scope: !7)
!41 = !DILocation(line: 47, column: 40, scope: !7)
!42 = !DILocation(line: 47, column: 4, scope: !7)
