; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %12 = shl i32 %11, 9, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = shl i32 %13, 2, !dbg !12
  %15 = and i32 %14, 508, !dbg !12
  %16 = or disjoint i32 %12, %15, !dbg !13
  %17 = or disjoint i32 %16, 1, !dbg !13
  %18 = or disjoint i32 %16, 2, !dbg !13
  %19 = or disjoint i32 %16, 3, !dbg !13
  %.frozen25 = freeze i32 %16, !dbg !14
  %20 = sdiv i32 %.frozen25, 256, !dbg !14
  %21 = srem i32 %20, 60, !dbg !15
  %.frozen = freeze i32 %16, !dbg !16
  %22 = sdiv i32 %.frozen, 16, !dbg !16
  %23 = mul i32 %22, 16, !dbg !17
  %.decomposed = sub i32 %.frozen, %23, !dbg !17
  %24 = srem i32 %17, 16, !dbg !17
  %25 = srem i32 %18, 16, !dbg !17
  %26 = srem i32 %19, 16, !dbg !17
  %27 = srem i32 %22, 16, !dbg !18
  %28 = sdiv i32 %16, 15360, !dbg !19
  %29 = mul i32 %20, 256, !dbg !20
  %.decomposed26 = sub i32 %.frozen25, %29, !dbg !20
  %30 = sext i32 %21 to i64, !dbg !21
  %31 = getelementptr float, ptr addrspace(1) %3, i64 %30, !dbg !21
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 true) #3, !dbg !22
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 true) #3, !dbg !22
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 true) #3, !dbg !22
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 true) #3, !dbg !22
  %36 = getelementptr float, ptr addrspace(1) %4, i64 %30, !dbg !23
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #3, !dbg !24
  %38 = bitcast i32 %37 to float, !dbg !24
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #3, !dbg !24
  %40 = bitcast i32 %39 to float, !dbg !24
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #3, !dbg !24
  %42 = bitcast i32 %41 to float, !dbg !24
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #3, !dbg !24
  %44 = bitcast i32 %43 to float, !dbg !24
  %45 = getelementptr float, ptr addrspace(1) %5, i64 %30, !dbg !25
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 true) #3, !dbg !26
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 true) #3, !dbg !26
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 true) #3, !dbg !26
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 true) #3, !dbg !26
  %50 = getelementptr float, ptr addrspace(1) %6, i64 %30, !dbg !27
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 true) #3, !dbg !28
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 true) #3, !dbg !28
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 true) #3, !dbg !28
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 true) #3, !dbg !28
  %55 = icmp slt i32 %21, 56, !dbg !29
  %56 = shl nsw i32 %.decomposed, 1, !dbg !30
  %57 = shl nsw i32 %24, 1, !dbg !30
  %58 = shl nsw i32 %25, 1, !dbg !30
  %59 = shl nsw i32 %26, 1, !dbg !30
  %60 = shl nsw i32 %27, 6, !dbg !31
  %61 = shl nsw i32 %21, 10, !dbg !32
  %62 = mul i32 %28, 57344, !dbg !33
  %63 = add i32 %60, %62, !dbg !34
  %64 = add i32 %63, %56, !dbg !35
  %65 = add i32 %64, %61, !dbg !36
  %66 = add i32 %63, %57, !dbg !35
  %67 = add i32 %66, %61, !dbg !36
  %68 = add i32 %63, %58, !dbg !35
  %69 = add i32 %68, %61, !dbg !36
  %70 = add i32 %63, %59, !dbg !35
  %71 = add i32 %70, %61, !dbg !36
  %72 = sext i32 %65 to i64, !dbg !37
  %73 = getelementptr float, ptr addrspace(1) %0, i64 %72, !dbg !37
  %74 = sext i32 %67 to i64, !dbg !37
  %75 = getelementptr float, ptr addrspace(1) %0, i64 %74, !dbg !37
  %76 = sext i32 %69 to i64, !dbg !37
  %77 = getelementptr float, ptr addrspace(1) %0, i64 %76, !dbg !37
  %78 = sext i32 %71 to i64, !dbg !37
  %79 = getelementptr float, ptr addrspace(1) %0, i64 %78, !dbg !37
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %73, i1 %55, i32 0, i1 %55) #3, !dbg !38
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %75, i1 %55, i32 0, i1 %55) #3, !dbg !38
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %77, i1 %55, i32 0, i1 %55) #3, !dbg !38
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %79, i1 %55, i32 0, i1 %55) #3, !dbg !38
  %84 = or disjoint i32 %63, 1, !dbg !39
  %85 = add i32 %84, %56, !dbg !40
  %86 = add i32 %85, %61, !dbg !41
  %87 = add i32 %84, %57, !dbg !40
  %88 = add i32 %87, %61, !dbg !41
  %89 = add i32 %84, %58, !dbg !40
  %90 = add i32 %89, %61, !dbg !41
  %91 = add i32 %84, %59, !dbg !40
  %92 = add i32 %91, %61, !dbg !41
  %93 = sext i32 %86 to i64, !dbg !42
  %94 = getelementptr float, ptr addrspace(1) %0, i64 %93, !dbg !42
  %95 = sext i32 %88 to i64, !dbg !42
  %96 = getelementptr float, ptr addrspace(1) %0, i64 %95, !dbg !42
  %97 = sext i32 %90 to i64, !dbg !42
  %98 = getelementptr float, ptr addrspace(1) %0, i64 %97, !dbg !42
  %99 = sext i32 %92 to i64, !dbg !42
  %100 = getelementptr float, ptr addrspace(1) %0, i64 %99, !dbg !42
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %94, i1 %55, i32 0, i1 %55) #3, !dbg !43
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %96, i1 %55, i32 0, i1 %55) #3, !dbg !43
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %98, i1 %55, i32 0, i1 %55) #3, !dbg !43
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %100, i1 %55, i32 0, i1 %55) #3, !dbg !43
  %105 = or disjoint i32 %63, 32, !dbg !44
  %106 = add i32 %105, %56, !dbg !45
  %107 = add i32 %106, %61, !dbg !46
  %108 = add i32 %105, %57, !dbg !45
  %109 = add i32 %108, %61, !dbg !46
  %110 = add i32 %105, %58, !dbg !45
  %111 = add i32 %110, %61, !dbg !46
  %112 = add i32 %105, %59, !dbg !45
  %113 = add i32 %112, %61, !dbg !46
  %114 = sext i32 %107 to i64, !dbg !47
  %115 = getelementptr float, ptr addrspace(1) %0, i64 %114, !dbg !47
  %116 = sext i32 %109 to i64, !dbg !47
  %117 = getelementptr float, ptr addrspace(1) %0, i64 %116, !dbg !47
  %118 = sext i32 %111 to i64, !dbg !47
  %119 = getelementptr float, ptr addrspace(1) %0, i64 %118, !dbg !47
  %120 = sext i32 %113 to i64, !dbg !47
  %121 = getelementptr float, ptr addrspace(1) %0, i64 %120, !dbg !47
  %122 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %115, i1 %55, i32 0, i1 %55) #3, !dbg !48
  %123 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %117, i1 %55, i32 0, i1 %55) #3, !dbg !48
  %124 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %119, i1 %55, i32 0, i1 %55) #3, !dbg !48
  %125 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %121, i1 %55, i32 0, i1 %55) #3, !dbg !48
  %126 = or disjoint i32 %63, 33, !dbg !49
  %127 = add i32 %126, %56, !dbg !50
  %128 = add i32 %127, %61, !dbg !51
  %129 = add i32 %126, %57, !dbg !50
  %130 = add i32 %129, %61, !dbg !51
  %131 = add i32 %126, %58, !dbg !50
  %132 = add i32 %131, %61, !dbg !51
  %133 = add i32 %126, %59, !dbg !50
  %134 = add i32 %133, %61, !dbg !51
  %135 = sext i32 %128 to i64, !dbg !52
  %136 = getelementptr float, ptr addrspace(1) %0, i64 %135, !dbg !52
  %137 = sext i32 %130 to i64, !dbg !52
  %138 = getelementptr float, ptr addrspace(1) %0, i64 %137, !dbg !52
  %139 = sext i32 %132 to i64, !dbg !52
  %140 = getelementptr float, ptr addrspace(1) %0, i64 %139, !dbg !52
  %141 = sext i32 %134 to i64, !dbg !52
  %142 = getelementptr float, ptr addrspace(1) %0, i64 %141, !dbg !52
  %143 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %136, i1 %55, i32 0, i1 %55) #3, !dbg !53
  %144 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %138, i1 %55, i32 0, i1 %55) #3, !dbg !53
  %145 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %140, i1 %55, i32 0, i1 %55) #3, !dbg !53
  %146 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %142, i1 %55, i32 0, i1 %55) #3, !dbg !53
  %147 = icmp sgt i32 %21, 55, !dbg !54
  %148 = add nsw i32 %21, -56, !dbg !55
  %149 = shl nsw i32 %148, 8, !dbg !56
  %150 = shl nsw i32 %28, 10, !dbg !57
  %151 = add nsw i32 %150, %.decomposed26, !dbg !58
  %152 = add nsw i32 %151, %149, !dbg !59
  %153 = sext i32 %152 to i64, !dbg !60
  %154 = getelementptr float, ptr addrspace(1) %1, i64 %153, !dbg !60
  %155 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %154, i1 %147, i32 0, i1 %147, i32 0, i1 %147, i32 0, i1 %147, i32 0, i1 %147) #3, !dbg !61
  %156 = sext i32 %148 to i64, !dbg !62
  %157 = getelementptr float, ptr addrspace(1) %2, i64 %156, !dbg !62
  %158 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %157, i1 %147, i32 0, i1 %147) #3, !dbg !63
  %159 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %157, i1 %147, i32 0, i1 %147) #3, !dbg !63
  %160 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %157, i1 %147, i32 0, i1 %147) #3, !dbg !63
  %161 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %157, i1 %147, i32 0, i1 %147) #3, !dbg !63
  %162 = fadd float %38, 0x3EE4F8B580000000, !dbg !64
  %163 = fadd float %40, 0x3EE4F8B580000000, !dbg !64
  %164 = fadd float %42, 0x3EE4F8B580000000, !dbg !64
  %165 = fadd float %44, 0x3EE4F8B580000000, !dbg !64
  %166 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !65
  %.not.i = icmp eq i32 %166, 0, !dbg !65
  %167 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !65
  %.not1.i = icmp eq i32 %167, 0, !dbg !65
  br i1 %.not.i, label %173, label %168, !dbg !65

168:                                              ; preds = %10
  br i1 %.not1.i, label %171, label %169, !dbg !65

169:                                              ; preds = %168
  %170 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %162) #3, !dbg !65
  br label %__nv_sqrtf.exit, !dbg !65

171:                                              ; preds = %168
  %172 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %162) #3, !dbg !65
  br label %__nv_sqrtf.exit, !dbg !65

173:                                              ; preds = %10
  br i1 %.not1.i, label %176, label %174, !dbg !65

174:                                              ; preds = %173
  %175 = tail call float @llvm.nvvm.sqrt.rn.f(float %162) #3, !dbg !65
  br label %__nv_sqrtf.exit, !dbg !65

176:                                              ; preds = %173
  %177 = tail call float @llvm.nvvm.sqrt.approx.f(float %162) #3, !dbg !65
  br label %__nv_sqrtf.exit, !dbg !65

__nv_sqrtf.exit:                                  ; preds = %169, %171, %174, %176
  %.0.i = phi float [ %170, %169 ], [ %172, %171 ], [ %175, %174 ], [ %177, %176 ], !dbg !65
  %178 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !65
  %.not.i1 = icmp eq i32 %178, 0, !dbg !65
  %179 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !65
  %.not1.i4 = icmp eq i32 %179, 0, !dbg !65
  br i1 %.not.i1, label %185, label %180, !dbg !65

180:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %183, label %181, !dbg !65

181:                                              ; preds = %180
  %182 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %163) #3, !dbg !65
  br label %__nv_sqrtf.exit5, !dbg !65

183:                                              ; preds = %180
  %184 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %163) #3, !dbg !65
  br label %__nv_sqrtf.exit5, !dbg !65

185:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %188, label %186, !dbg !65

186:                                              ; preds = %185
  %187 = tail call float @llvm.nvvm.sqrt.rn.f(float %163) #3, !dbg !65
  br label %__nv_sqrtf.exit5, !dbg !65

188:                                              ; preds = %185
  %189 = tail call float @llvm.nvvm.sqrt.approx.f(float %163) #3, !dbg !65
  br label %__nv_sqrtf.exit5, !dbg !65

__nv_sqrtf.exit5:                                 ; preds = %181, %183, %186, %188
  %.0.i3 = phi float [ %182, %181 ], [ %184, %183 ], [ %187, %186 ], [ %189, %188 ], !dbg !65
  %190 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !65
  %.not.i6 = icmp eq i32 %190, 0, !dbg !65
  %191 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !65
  %.not1.i9 = icmp eq i32 %191, 0, !dbg !65
  br i1 %.not.i6, label %197, label %192, !dbg !65

192:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %195, label %193, !dbg !65

193:                                              ; preds = %192
  %194 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %164) #3, !dbg !65
  br label %__nv_sqrtf.exit10, !dbg !65

195:                                              ; preds = %192
  %196 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %164) #3, !dbg !65
  br label %__nv_sqrtf.exit10, !dbg !65

197:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %200, label %198, !dbg !65

198:                                              ; preds = %197
  %199 = tail call float @llvm.nvvm.sqrt.rn.f(float %164) #3, !dbg !65
  br label %__nv_sqrtf.exit10, !dbg !65

200:                                              ; preds = %197
  %201 = tail call float @llvm.nvvm.sqrt.approx.f(float %164) #3, !dbg !65
  br label %__nv_sqrtf.exit10, !dbg !65

__nv_sqrtf.exit10:                                ; preds = %193, %195, %198, %200
  %.0.i8 = phi float [ %194, %193 ], [ %196, %195 ], [ %199, %198 ], [ %201, %200 ], !dbg !65
  %202 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !65
  %.not.i11 = icmp eq i32 %202, 0, !dbg !65
  %203 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !65
  %.not1.i14 = icmp eq i32 %203, 0, !dbg !65
  br i1 %.not.i11, label %209, label %204, !dbg !65

204:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %207, label %205, !dbg !65

205:                                              ; preds = %204
  %206 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %165) #3, !dbg !65
  br label %__nv_sqrtf.exit15, !dbg !65

207:                                              ; preds = %204
  %208 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %165) #3, !dbg !65
  br label %__nv_sqrtf.exit15, !dbg !65

209:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %212, label %210, !dbg !65

210:                                              ; preds = %209
  %211 = tail call float @llvm.nvvm.sqrt.rn.f(float %165) #3, !dbg !65
  br label %__nv_sqrtf.exit15, !dbg !65

212:                                              ; preds = %209
  %213 = tail call float @llvm.nvvm.sqrt.approx.f(float %165) #3, !dbg !65
  br label %__nv_sqrtf.exit15, !dbg !65

__nv_sqrtf.exit15:                                ; preds = %205, %207, %210, %212
  %.0.i13 = phi float [ %206, %205 ], [ %208, %207 ], [ %211, %210 ], [ %213, %212 ], !dbg !65
  %214 = insertelement <4 x i32> poison, i32 %104, i64 0, !dbg !43
  %215 = insertelement <4 x i32> %214, i32 %103, i64 1, !dbg !43
  %216 = insertelement <4 x i32> %215, i32 %102, i64 2, !dbg !43
  %217 = insertelement <4 x i32> %216, i32 %101, i64 3, !dbg !43
  %218 = bitcast <4 x i32> %217 to <4 x float>, !dbg !43
  %219 = insertelement <4 x i32> poison, i32 %83, i64 0, !dbg !38
  %220 = insertelement <4 x i32> %219, i32 %82, i64 1, !dbg !38
  %221 = insertelement <4 x i32> %220, i32 %81, i64 2, !dbg !38
  %222 = insertelement <4 x i32> %221, i32 %80, i64 3, !dbg !38
  %223 = bitcast <4 x i32> %222 to <4 x float>, !dbg !38
  %224 = insertelement <4 x i32> poison, i32 %125, i64 0, !dbg !48
  %225 = insertelement <4 x i32> %224, i32 %124, i64 1, !dbg !48
  %226 = insertelement <4 x i32> %225, i32 %123, i64 2, !dbg !48
  %227 = insertelement <4 x i32> %226, i32 %122, i64 3, !dbg !48
  %228 = bitcast <4 x i32> %227 to <4 x float>, !dbg !48
  %229 = insertelement <4 x i32> poison, i32 %146, i64 0, !dbg !53
  %230 = insertelement <4 x i32> %229, i32 %145, i64 1, !dbg !53
  %231 = insertelement <4 x i32> %230, i32 %144, i64 2, !dbg !53
  %232 = insertelement <4 x i32> %231, i32 %143, i64 3, !dbg !53
  %233 = bitcast <4 x i32> %232 to <4 x float>, !dbg !53
  %234 = extractvalue { i32, i32, i32, i32 } %155, 3, !dbg !61
  %235 = insertelement <4 x i32> poison, i32 %161, i64 0, !dbg !63
  %236 = insertelement <4 x i32> %235, i32 %160, i64 1, !dbg !63
  %237 = insertelement <4 x i32> %236, i32 %159, i64 2, !dbg !63
  %238 = insertelement <4 x i32> %237, i32 %158, i64 3, !dbg !63
  %239 = bitcast <4 x i32> %238 to <4 x float>, !dbg !63
  %240 = insertelement <4 x i32> poison, i32 %35, i64 0, !dbg !22
  %241 = insertelement <4 x i32> %240, i32 %34, i64 1, !dbg !22
  %242 = insertelement <4 x i32> %241, i32 %33, i64 2, !dbg !22
  %243 = insertelement <4 x i32> %242, i32 %32, i64 3, !dbg !22
  %244 = bitcast <4 x i32> %243 to <4 x float>, !dbg !22
  %245 = extractvalue { i32, i32, i32, i32 } %155, 2, !dbg !61
  %246 = extractvalue { i32, i32, i32, i32 } %155, 1, !dbg !61
  %247 = fcmp ogt <4 x float> %218, %223, !dbg !66
  %248 = fcmp uno <4 x float> %218, zeroinitializer, !dbg !70
  %249 = extractvalue { i32, i32, i32, i32 } %155, 0, !dbg !61
  %250 = insertelement <4 x i32> poison, i32 %54, i64 0, !dbg !28
  %251 = insertelement <4 x i32> %250, i32 %53, i64 1, !dbg !28
  %252 = insertelement <4 x i32> %251, i32 %52, i64 2, !dbg !28
  %253 = insertelement <4 x i32> %252, i32 %51, i64 3, !dbg !28
  %254 = bitcast <4 x i32> %253 to <4 x float>, !dbg !28
  %255 = insertelement <4 x i32> poison, i32 %49, i64 0, !dbg !26
  %256 = insertelement <4 x i32> %255, i32 %48, i64 1, !dbg !26
  %257 = insertelement <4 x i32> %256, i32 %47, i64 2, !dbg !26
  %258 = insertelement <4 x i32> %257, i32 %46, i64 3, !dbg !26
  %259 = bitcast <4 x i32> %258 to <4 x float>, !dbg !26
  %260 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !71
  %261 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !71
  %262 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !71
  %263 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !71
  %264 = or <4 x i1> %247, %248, !dbg !72
  %.v = select <4 x i1> %264, <4 x i32> %217, <4 x i32> %222, !dbg !73
  %265 = bitcast <4 x i32> %.v to <4 x float>, !dbg !73
  %266 = fcmp olt <4 x float> %265, %228, !dbg !74
  %267 = fcmp uno <4 x float> %228, zeroinitializer, !dbg !76
  %268 = or <4 x i1> %266, %267, !dbg !77
  %.v16 = select <4 x i1> %268, <4 x i32> %227, <4 x i32> %.v, !dbg !78
  %269 = bitcast <4 x i32> %.v16 to <4 x float>, !dbg !78
  %270 = fcmp olt <4 x float> %269, %233, !dbg !79
  %271 = fcmp uno <4 x float> %233, zeroinitializer, !dbg !81
  %272 = or <4 x i1> %270, %271, !dbg !82
  %.v17 = select <4 x i1> %272, <4 x i32> %232, <4 x i32> %.v16, !dbg !83
  %273 = bitcast <4 x i32> %.v17 to <4 x float>, !dbg !83
  %274 = insertelement <4 x i32> poison, i32 %234, i64 0, !dbg !61
  %275 = insertelement <4 x i32> %274, i32 %245, i64 1, !dbg !61
  %276 = insertelement <4 x i32> %275, i32 %246, i64 2, !dbg !61
  %277 = insertelement <4 x i32> %276, i32 %249, i64 3, !dbg !61
  %278 = bitcast <4 x i32> %277 to <4 x float>, !dbg !61
  %279 = fadd <4 x float> %278, %239, !dbg !84
  %280 = insertelement <4 x i1> poison, i1 %55, i64 0, !dbg !85
  %281 = shufflevector <4 x i1> %280, <4 x i1> poison, <4 x i32> zeroinitializer, !dbg !85
  %282 = select <4 x i1> %281, <4 x float> %273, <4 x float> %279, !dbg !85
  %283 = fsub <4 x float> %282, %244, !dbg !86
  %284 = insertelement <4 x float> poison, float %263, i64 0, !dbg !87
  %285 = insertelement <4 x float> %284, float %262, i64 1, !dbg !87
  %286 = insertelement <4 x float> %285, float %261, i64 2, !dbg !87
  %287 = insertelement <4 x float> %286, float %260, i64 3, !dbg !87
  %288 = fmul <4 x float> %283, %287, !dbg !87
  %289 = fmul <4 x float> %288, %259, !dbg !88
  %290 = fadd <4 x float> %289, %254, !dbg !89
  %291 = fcmp olt <4 x float> %290, zeroinitializer, !dbg !90
  %292 = extractelement <4 x i1> %291, i64 3, !dbg !92
  %293 = extractelement <4 x i1> %291, i64 2, !dbg !92
  %294 = extractelement <4 x i1> %291, i64 1, !dbg !92
  %295 = extractelement <4 x i1> %291, i64 0, !dbg !92
  %296 = sext i32 %16 to i64, !dbg !93
  %297 = getelementptr float, ptr addrspace(1) %7, i64 %296, !dbg !93
  %bc = bitcast <4 x float> %282 to <4 x i32>, !dbg !94
  %298 = extractelement <4 x i32> %bc, i64 3, !dbg !94
  %bc18 = bitcast <4 x float> %282 to <4 x i32>, !dbg !94
  %299 = extractelement <4 x i32> %bc18, i64 2, !dbg !94
  %bc19 = bitcast <4 x float> %282 to <4 x i32>, !dbg !94
  %300 = extractelement <4 x i32> %bc19, i64 1, !dbg !94
  %bc20 = bitcast <4 x float> %282 to <4 x i32>, !dbg !94
  %301 = extractelement <4 x i32> %bc20, i64 0, !dbg !94
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %298, i32 %299, i32 %300, i32 %301, ptr addrspace(1) %297, i1 true) #3, !dbg !94
  %302 = getelementptr float, ptr addrspace(1) %8, i64 %296, !dbg !95
  %bc21 = bitcast <4 x float> %290 to <4 x i32>, !dbg !96
  %303 = extractelement <4 x i32> %bc21, i64 3, !dbg !96
  %304 = select i1 %292, i32 0, i32 %303, !dbg !92
  %bc22 = bitcast <4 x float> %290 to <4 x i32>, !dbg !96
  %305 = extractelement <4 x i32> %bc22, i64 2, !dbg !96
  %306 = select i1 %293, i32 0, i32 %305, !dbg !92
  %bc23 = bitcast <4 x float> %290 to <4 x i32>, !dbg !96
  %307 = extractelement <4 x i32> %bc23, i64 1, !dbg !96
  %308 = select i1 %294, i32 0, i32 %307, !dbg !92
  %bc24 = bitcast <4 x float> %290 to <4 x i32>, !dbg !96
  %309 = extractelement <4 x i32> %bc24, i64 0, !dbg !96
  %310 = select i1 %295, i32 0, i32 %309, !dbg !92
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %304, i32 %306, i32 %308, i32 %310, ptr addrspace(1) %302, i1 true) #3, !dbg !96
  ret void, !dbg !97
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c42h2jaqqserps26y7tepdeahfrcaxb5elib5asjlsb42tcse2j3.py", directory: "inductor_cache/42")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_7, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_7, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_7", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_7", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 28, scope: !7)
!16 = !DILocation(line: 26, column: 21, scope: !7)
!17 = !DILocation(line: 25, column: 19, scope: !7)
!18 = !DILocation(line: 26, column: 27, scope: !7)
!19 = !DILocation(line: 27, column: 19, scope: !7)
!20 = !DILocation(line: 28, column: 19, scope: !7)
!21 = !DILocation(line: 30, column: 31, scope: !7)
!22 = !DILocation(line: 30, column: 36, scope: !7)
!23 = !DILocation(line: 31, column: 31, scope: !7)
!24 = !DILocation(line: 31, column: 36, scope: !7)
!25 = !DILocation(line: 32, column: 31, scope: !7)
!26 = !DILocation(line: 32, column: 36, scope: !7)
!27 = !DILocation(line: 33, column: 31, scope: !7)
!28 = !DILocation(line: 33, column: 36, scope: !7)
!29 = !DILocation(line: 38, column: 18, scope: !7)
!30 = !DILocation(line: 39, column: 32, scope: !7)
!31 = !DILocation(line: 39, column: 40, scope: !7)
!32 = !DILocation(line: 39, column: 51, scope: !7)
!33 = !DILocation(line: 39, column: 63, scope: !7)
!34 = !DILocation(line: 39, column: 37, scope: !7)
!35 = !DILocation(line: 39, column: 45, scope: !7)
!36 = !DILocation(line: 39, column: 57, scope: !7)
!37 = !DILocation(line: 39, column: 30, scope: !7)
!38 = !DILocation(line: 39, column: 68, scope: !7)
!39 = !DILocation(line: 40, column: 41, scope: !7)
!40 = !DILocation(line: 40, column: 49, scope: !7)
!41 = !DILocation(line: 40, column: 61, scope: !7)
!42 = !DILocation(line: 40, column: 30, scope: !7)
!43 = !DILocation(line: 40, column: 72, scope: !7)
!44 = !DILocation(line: 42, column: 42, scope: !7)
!45 = !DILocation(line: 42, column: 50, scope: !7)
!46 = !DILocation(line: 42, column: 62, scope: !7)
!47 = !DILocation(line: 42, column: 30, scope: !7)
!48 = !DILocation(line: 42, column: 73, scope: !7)
!49 = !DILocation(line: 44, column: 43, scope: !7)
!50 = !DILocation(line: 44, column: 51, scope: !7)
!51 = !DILocation(line: 44, column: 63, scope: !7)
!52 = !DILocation(line: 44, column: 31, scope: !7)
!53 = !DILocation(line: 44, column: 74, scope: !7)
!54 = !DILocation(line: 48, column: 20, scope: !7)
!55 = !DILocation(line: 51, column: 49, scope: !7)
!56 = !DILocation(line: 51, column: 41, scope: !7)
!57 = !DILocation(line: 51, column: 60, scope: !7)
!58 = !DILocation(line: 51, column: 36, scope: !7)
!59 = !DILocation(line: 51, column: 55, scope: !7)
!60 = !DILocation(line: 51, column: 31, scope: !7)
!61 = !DILocation(line: 51, column: 65, scope: !7)
!62 = !DILocation(line: 52, column: 31, scope: !7)
!63 = !DILocation(line: 52, column: 44, scope: !7)
!64 = !DILocation(line: 59, column: 20, scope: !7)
!65 = !DILocation(line: 60, column: 27, scope: !7)
!66 = !DILocation(line: 118, column: 15, scope: !67, inlinedAt: !69)
!67 = distinct !DILexicalBlockFile(scope: !7, file: !68, discriminator: 0)
!68 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!69 = !DILocation(line: 41, column: 40, scope: !7)
!70 = !DILocation(line: 120, column: 21, scope: !67, inlinedAt: !69)
!71 = !DILocation(line: 62, column: 20, scope: !7)
!72 = !DILocation(line: 120, column: 16, scope: !67, inlinedAt: !69)
!73 = !DILocation(line: 121, column: 29, scope: !67, inlinedAt: !69)
!74 = !DILocation(line: 118, column: 15, scope: !67, inlinedAt: !75)
!75 = !DILocation(line: 43, column: 40, scope: !7)
!76 = !DILocation(line: 120, column: 21, scope: !67, inlinedAt: !75)
!77 = !DILocation(line: 120, column: 16, scope: !67, inlinedAt: !75)
!78 = !DILocation(line: 121, column: 29, scope: !67, inlinedAt: !75)
!79 = !DILocation(line: 118, column: 15, scope: !67, inlinedAt: !80)
!80 = !DILocation(line: 45, column: 42, scope: !7)
!81 = !DILocation(line: 120, column: 21, scope: !67, inlinedAt: !80)
!82 = !DILocation(line: 120, column: 16, scope: !67, inlinedAt: !80)
!83 = !DILocation(line: 121, column: 29, scope: !67, inlinedAt: !80)
!84 = !DILocation(line: 53, column: 20, scope: !7)
!85 = !DILocation(line: 0, scope: !7)
!86 = !DILocation(line: 57, column: 20, scope: !7)
!87 = !DILocation(line: 65, column: 20, scope: !7)
!88 = !DILocation(line: 66, column: 20, scope: !7)
!89 = !DILocation(line: 67, column: 20, scope: !7)
!90 = !DILocation(line: 118, column: 15, scope: !67, inlinedAt: !91)
!91 = !DILocation(line: 69, column: 42, scope: !7)
!92 = !DILocation(line: 121, column: 29, scope: !67, inlinedAt: !91)
!93 = !DILocation(line: 70, column: 25, scope: !7)
!94 = !DILocation(line: 70, column: 37, scope: !7)
!95 = !DILocation(line: 71, column: 25, scope: !7)
!96 = !DILocation(line: 71, column: 37, scope: !7)
!97 = !DILocation(line: 71, column: 4, scope: !7)
