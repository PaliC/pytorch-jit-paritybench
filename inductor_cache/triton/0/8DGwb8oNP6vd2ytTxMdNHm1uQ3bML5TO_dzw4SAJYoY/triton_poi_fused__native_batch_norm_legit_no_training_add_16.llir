; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_16(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %11 = shl i32 %10, 6, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = lshr i32 %12, 4, !dbg !12
  %14 = and i32 %13, 15, !dbg !12
  %15 = or disjoint i32 %14, 16, !dbg !12
  %16 = or disjoint i32 %14, 32, !dbg !12
  %17 = or disjoint i32 %14, 48, !dbg !12
  %18 = shl i32 %12, 2, !dbg !12
  %19 = and i32 %18, 60, !dbg !12
  %20 = or disjoint i32 %11, %14, !dbg !13
  %21 = or disjoint i32 %11, %15, !dbg !13
  %22 = or disjoint i32 %11, %16, !dbg !13
  %23 = or disjoint i32 %11, %17, !dbg !13
  %24 = icmp slt i32 %20, 64, !dbg !14
  %25 = icmp slt i32 %21, 64, !dbg !14
  %26 = icmp slt i32 %22, 64, !dbg !14
  %27 = icmp slt i32 %23, 64, !dbg !14
  %28 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %29 = shl i32 %28, 6, !dbg !16
  %30 = or disjoint i32 %29, %19, !dbg !17
  %31 = icmp slt i32 %30, 64, !dbg !18
  %32 = shl i32 %20, 6, !dbg !19
  %33 = shl i32 %21, 6, !dbg !19
  %34 = shl i32 %22, 6, !dbg !19
  %35 = shl i32 %23, 6, !dbg !19
  %36 = add i32 %30, %32, !dbg !20
  %37 = add i32 %30, %33, !dbg !20
  %38 = add i32 %30, %34, !dbg !20
  %39 = add i32 %30, %35, !dbg !20
  %40 = sext i32 %36 to i64, !dbg !21
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !21
  %42 = sext i32 %37 to i64, !dbg !21
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !21
  %44 = sext i32 %38 to i64, !dbg !21
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !21
  %46 = sext i32 %39 to i64, !dbg !21
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !21
  %48 = and i1 %24, %31, !dbg !22
  %49 = and i1 %25, %31, !dbg !22
  %50 = and i1 %26, %31, !dbg !22
  %51 = and i1 %27, %31, !dbg !22
  %52 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %41, i1 %48) #4, !dbg !23
  %53 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %43, i1 %49) #4, !dbg !23
  %54 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %45, i1 %50) #4, !dbg !23
  %55 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %47, i1 %51) #4, !dbg !23
  %56 = getelementptr float, ptr addrspace(1) %1, i64 %40, !dbg !24
  %57 = getelementptr float, ptr addrspace(1) %1, i64 %42, !dbg !24
  %58 = getelementptr float, ptr addrspace(1) %1, i64 %44, !dbg !24
  %59 = getelementptr float, ptr addrspace(1) %1, i64 %46, !dbg !24
  %60 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %56, i1 %48) #4, !dbg !25
  %61 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %57, i1 %49) #4, !dbg !25
  %62 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %58, i1 %50) #4, !dbg !25
  %63 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %59, i1 %51) #4, !dbg !25
  %64 = sext i32 %30 to i64, !dbg !26
  %65 = getelementptr float, ptr addrspace(1) %2, i64 %64, !dbg !26
  %66 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %65, i1 %31) #4, !dbg !27
  %67 = getelementptr float, ptr addrspace(1) %3, i64 %64, !dbg !28
  %68 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %67, i1 %31) #4, !dbg !29
  %69 = extractvalue { i32, i32, i32, i32 } %68, 0, !dbg !29
  %70 = extractvalue { i32, i32, i32, i32 } %68, 1, !dbg !29
  %71 = extractvalue { i32, i32, i32, i32 } %68, 2, !dbg !29
  %72 = extractvalue { i32, i32, i32, i32 } %68, 3, !dbg !29
  %73 = bitcast i32 %69 to float, !dbg !29
  %74 = bitcast i32 %70 to float, !dbg !29
  %75 = bitcast i32 %71 to float, !dbg !29
  %76 = bitcast i32 %72 to float, !dbg !29
  %77 = getelementptr float, ptr addrspace(1) %4, i64 %64, !dbg !30
  %78 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %77, i1 %31) #4, !dbg !31
  %79 = getelementptr float, ptr addrspace(1) %5, i64 %64, !dbg !32
  %80 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %79, i1 %31) #4, !dbg !33
  %81 = fadd float %73, 0x3EE4F8B580000000, !dbg !34
  %82 = fadd float %74, 0x3EE4F8B580000000, !dbg !34
  %83 = fadd float %75, 0x3EE4F8B580000000, !dbg !34
  %84 = fadd float %76, 0x3EE4F8B580000000, !dbg !34
  %85 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i = icmp eq i32 %85, 0, !dbg !35
  %86 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i = icmp eq i32 %86, 0, !dbg !35
  br i1 %.not.i, label %92, label %87, !dbg !35

87:                                               ; preds = %9
  br i1 %.not1.i, label %90, label %88, !dbg !35

88:                                               ; preds = %87
  %89 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %81) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

90:                                               ; preds = %87
  %91 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %81) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

92:                                               ; preds = %9
  br i1 %.not1.i, label %95, label %93, !dbg !35

93:                                               ; preds = %92
  %94 = tail call float @llvm.nvvm.sqrt.rn.f(float %81) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

95:                                               ; preds = %92
  %96 = tail call float @llvm.nvvm.sqrt.approx.f(float %81) #4, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

__nv_sqrtf.exit:                                  ; preds = %88, %90, %93, %95
  %.0.i = phi float [ %89, %88 ], [ %91, %90 ], [ %94, %93 ], [ %96, %95 ], !dbg !35
  %97 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i31 = icmp eq i32 %97, 0, !dbg !35
  %98 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i34 = icmp eq i32 %98, 0, !dbg !35
  br i1 %.not.i31, label %104, label %99, !dbg !35

99:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i34, label %102, label %100, !dbg !35

100:                                              ; preds = %99
  %101 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %82) #4, !dbg !35
  br label %__nv_sqrtf.exit35, !dbg !35

102:                                              ; preds = %99
  %103 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %82) #4, !dbg !35
  br label %__nv_sqrtf.exit35, !dbg !35

104:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i34, label %107, label %105, !dbg !35

105:                                              ; preds = %104
  %106 = tail call float @llvm.nvvm.sqrt.rn.f(float %82) #4, !dbg !35
  br label %__nv_sqrtf.exit35, !dbg !35

107:                                              ; preds = %104
  %108 = tail call float @llvm.nvvm.sqrt.approx.f(float %82) #4, !dbg !35
  br label %__nv_sqrtf.exit35, !dbg !35

__nv_sqrtf.exit35:                                ; preds = %100, %102, %105, %107
  %.0.i33 = phi float [ %101, %100 ], [ %103, %102 ], [ %106, %105 ], [ %108, %107 ], !dbg !35
  %109 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i36 = icmp eq i32 %109, 0, !dbg !35
  %110 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i39 = icmp eq i32 %110, 0, !dbg !35
  br i1 %.not.i36, label %116, label %111, !dbg !35

111:                                              ; preds = %__nv_sqrtf.exit35
  br i1 %.not1.i39, label %114, label %112, !dbg !35

112:                                              ; preds = %111
  %113 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %83) #4, !dbg !35
  br label %__nv_sqrtf.exit40, !dbg !35

114:                                              ; preds = %111
  %115 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %83) #4, !dbg !35
  br label %__nv_sqrtf.exit40, !dbg !35

116:                                              ; preds = %__nv_sqrtf.exit35
  br i1 %.not1.i39, label %119, label %117, !dbg !35

117:                                              ; preds = %116
  %118 = tail call float @llvm.nvvm.sqrt.rn.f(float %83) #4, !dbg !35
  br label %__nv_sqrtf.exit40, !dbg !35

119:                                              ; preds = %116
  %120 = tail call float @llvm.nvvm.sqrt.approx.f(float %83) #4, !dbg !35
  br label %__nv_sqrtf.exit40, !dbg !35

__nv_sqrtf.exit40:                                ; preds = %112, %114, %117, %119
  %.0.i38 = phi float [ %113, %112 ], [ %115, %114 ], [ %118, %117 ], [ %120, %119 ], !dbg !35
  %121 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !35
  %.not.i41 = icmp eq i32 %121, 0, !dbg !35
  %122 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !35
  %.not1.i44 = icmp eq i32 %122, 0, !dbg !35
  br i1 %.not.i41, label %128, label %123, !dbg !35

123:                                              ; preds = %__nv_sqrtf.exit40
  br i1 %.not1.i44, label %126, label %124, !dbg !35

124:                                              ; preds = %123
  %125 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %84) #4, !dbg !35
  br label %__nv_sqrtf.exit45, !dbg !35

126:                                              ; preds = %123
  %127 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %84) #4, !dbg !35
  br label %__nv_sqrtf.exit45, !dbg !35

128:                                              ; preds = %__nv_sqrtf.exit40
  br i1 %.not1.i44, label %131, label %129, !dbg !35

129:                                              ; preds = %128
  %130 = tail call float @llvm.nvvm.sqrt.rn.f(float %84) #4, !dbg !35
  br label %__nv_sqrtf.exit45, !dbg !35

131:                                              ; preds = %128
  %132 = tail call float @llvm.nvvm.sqrt.approx.f(float %84) #4, !dbg !35
  br label %__nv_sqrtf.exit45, !dbg !35

__nv_sqrtf.exit45:                                ; preds = %124, %126, %129, %131
  %.0.i43 = phi float [ %125, %124 ], [ %127, %126 ], [ %130, %129 ], [ %132, %131 ], !dbg !35
  %133 = extractvalue { i32, i32, i32, i32 } %63, 3, !dbg !25
  %134 = bitcast i32 %133 to float, !dbg !25
  %135 = extractvalue { i32, i32, i32, i32 } %66, 3, !dbg !27
  %136 = bitcast i32 %135 to float, !dbg !27
  %137 = fsub float %134, %136, !dbg !36
  %138 = extractvalue { i32, i32, i32, i32 } %63, 2, !dbg !25
  %139 = bitcast i32 %138 to float, !dbg !25
  %140 = extractvalue { i32, i32, i32, i32 } %66, 2, !dbg !27
  %141 = bitcast i32 %140 to float, !dbg !27
  %142 = fsub float %139, %141, !dbg !36
  %143 = extractvalue { i32, i32, i32, i32 } %63, 1, !dbg !25
  %144 = bitcast i32 %143 to float, !dbg !25
  %145 = extractvalue { i32, i32, i32, i32 } %66, 1, !dbg !27
  %146 = bitcast i32 %145 to float, !dbg !27
  %147 = fsub float %144, %146, !dbg !36
  %148 = extractvalue { i32, i32, i32, i32 } %63, 0, !dbg !25
  %149 = bitcast i32 %148 to float, !dbg !25
  %150 = extractvalue { i32, i32, i32, i32 } %66, 0, !dbg !27
  %151 = bitcast i32 %150 to float, !dbg !27
  %152 = fsub float %149, %151, !dbg !36
  %153 = extractvalue { i32, i32, i32, i32 } %62, 3, !dbg !25
  %154 = bitcast i32 %153 to float, !dbg !25
  %155 = fsub float %154, %136, !dbg !36
  %156 = extractvalue { i32, i32, i32, i32 } %62, 2, !dbg !25
  %157 = bitcast i32 %156 to float, !dbg !25
  %158 = fsub float %157, %141, !dbg !36
  %159 = extractvalue { i32, i32, i32, i32 } %62, 1, !dbg !25
  %160 = bitcast i32 %159 to float, !dbg !25
  %161 = fsub float %160, %146, !dbg !36
  %162 = extractvalue { i32, i32, i32, i32 } %62, 0, !dbg !25
  %163 = bitcast i32 %162 to float, !dbg !25
  %164 = fsub float %163, %151, !dbg !36
  %165 = extractvalue { i32, i32, i32, i32 } %61, 3, !dbg !25
  %166 = bitcast i32 %165 to float, !dbg !25
  %167 = fsub float %166, %136, !dbg !36
  %168 = extractvalue { i32, i32, i32, i32 } %61, 2, !dbg !25
  %169 = bitcast i32 %168 to float, !dbg !25
  %170 = fsub float %169, %141, !dbg !36
  %171 = extractvalue { i32, i32, i32, i32 } %61, 1, !dbg !25
  %172 = bitcast i32 %171 to float, !dbg !25
  %173 = fsub float %172, %146, !dbg !36
  %174 = extractvalue { i32, i32, i32, i32 } %61, 0, !dbg !25
  %175 = bitcast i32 %174 to float, !dbg !25
  %176 = fsub float %175, %151, !dbg !36
  %177 = extractvalue { i32, i32, i32, i32 } %60, 3, !dbg !25
  %178 = bitcast i32 %177 to float, !dbg !25
  %179 = fsub float %178, %136, !dbg !36
  %180 = extractvalue { i32, i32, i32, i32 } %60, 2, !dbg !25
  %181 = bitcast i32 %180 to float, !dbg !25
  %182 = fsub float %181, %141, !dbg !36
  %183 = extractvalue { i32, i32, i32, i32 } %60, 1, !dbg !25
  %184 = bitcast i32 %183 to float, !dbg !25
  %185 = fsub float %184, %146, !dbg !36
  %186 = extractvalue { i32, i32, i32, i32 } %60, 0, !dbg !25
  %187 = bitcast i32 %186 to float, !dbg !25
  %188 = fsub float %187, %151, !dbg !36
  %189 = extractvalue { i32, i32, i32, i32 } %80, 3, !dbg !33
  %190 = bitcast i32 %189 to float, !dbg !33
  %191 = extractvalue { i32, i32, i32, i32 } %80, 2, !dbg !33
  %192 = bitcast i32 %191 to float, !dbg !33
  %193 = extractvalue { i32, i32, i32, i32 } %80, 1, !dbg !33
  %194 = bitcast i32 %193 to float, !dbg !33
  %195 = extractvalue { i32, i32, i32, i32 } %80, 0, !dbg !33
  %196 = bitcast i32 %195 to float, !dbg !33
  %197 = extractvalue { i32, i32, i32, i32 } %78, 3, !dbg !31
  %198 = bitcast i32 %197 to float, !dbg !31
  %199 = extractvalue { i32, i32, i32, i32 } %78, 2, !dbg !31
  %200 = bitcast i32 %199 to float, !dbg !31
  %201 = extractvalue { i32, i32, i32, i32 } %78, 1, !dbg !31
  %202 = bitcast i32 %201 to float, !dbg !31
  %203 = extractvalue { i32, i32, i32, i32 } %78, 0, !dbg !31
  %204 = bitcast i32 %203 to float, !dbg !31
  %205 = extractvalue { i32, i32, i32, i32 } %55, 3, !dbg !23
  %206 = bitcast i32 %205 to float, !dbg !23
  %207 = extractvalue { i32, i32, i32, i32 } %55, 2, !dbg !23
  %208 = bitcast i32 %207 to float, !dbg !23
  %209 = extractvalue { i32, i32, i32, i32 } %55, 1, !dbg !23
  %210 = bitcast i32 %209 to float, !dbg !23
  %211 = extractvalue { i32, i32, i32, i32 } %55, 0, !dbg !23
  %212 = bitcast i32 %211 to float, !dbg !23
  %213 = extractvalue { i32, i32, i32, i32 } %54, 3, !dbg !23
  %214 = bitcast i32 %213 to float, !dbg !23
  %215 = extractvalue { i32, i32, i32, i32 } %54, 2, !dbg !23
  %216 = bitcast i32 %215 to float, !dbg !23
  %217 = extractvalue { i32, i32, i32, i32 } %54, 1, !dbg !23
  %218 = bitcast i32 %217 to float, !dbg !23
  %219 = extractvalue { i32, i32, i32, i32 } %54, 0, !dbg !23
  %220 = bitcast i32 %219 to float, !dbg !23
  %221 = extractvalue { i32, i32, i32, i32 } %53, 3, !dbg !23
  %222 = bitcast i32 %221 to float, !dbg !23
  %223 = extractvalue { i32, i32, i32, i32 } %53, 2, !dbg !23
  %224 = bitcast i32 %223 to float, !dbg !23
  %225 = extractvalue { i32, i32, i32, i32 } %53, 1, !dbg !23
  %226 = bitcast i32 %225 to float, !dbg !23
  %227 = extractvalue { i32, i32, i32, i32 } %53, 0, !dbg !23
  %228 = bitcast i32 %227 to float, !dbg !23
  %229 = extractvalue { i32, i32, i32, i32 } %52, 3, !dbg !23
  %230 = bitcast i32 %229 to float, !dbg !23
  %231 = extractvalue { i32, i32, i32, i32 } %52, 2, !dbg !23
  %232 = bitcast i32 %231 to float, !dbg !23
  %233 = extractvalue { i32, i32, i32, i32 } %52, 1, !dbg !23
  %234 = bitcast i32 %233 to float, !dbg !23
  %235 = extractvalue { i32, i32, i32, i32 } %52, 0, !dbg !23
  %236 = bitcast i32 %235 to float, !dbg !23
  %237 = or disjoint i32 %29, %17, !dbg !17
  %238 = icmp slt i32 %237, 64, !dbg !18
  %239 = or disjoint i32 %11, %19, !dbg !13
  %240 = icmp slt i32 %239, 64, !dbg !14
  %241 = and i1 %240, %238, !dbg !22
  %242 = or disjoint i32 %29, %16, !dbg !17
  %243 = icmp slt i32 %242, 64, !dbg !18
  %244 = and i1 %240, %243, !dbg !22
  %245 = or disjoint i32 %29, %15, !dbg !17
  %246 = icmp slt i32 %245, 64, !dbg !18
  %247 = and i1 %240, %246, !dbg !22
  %248 = or disjoint i32 %29, %14, !dbg !17
  %249 = icmp slt i32 %248, 64, !dbg !18
  %250 = and i1 %240, %249, !dbg !22
  %.frozen = freeze i32 %239, !dbg !37
  %251 = sdiv i32 %.frozen, 16, !dbg !37
  %252 = mul i32 %251, 16, !dbg !38
  %.decomposed = sub i32 %.frozen, %252, !dbg !38
  %253 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !39
  %254 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #4, !dbg !39
  %255 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i38) #4, !dbg !39
  %256 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i43) #4, !dbg !39
  %257 = fmul float %188, %253, !dbg !40
  %258 = fmul float %185, %254, !dbg !40
  %259 = fmul float %182, %255, !dbg !40
  %260 = fmul float %179, %256, !dbg !40
  %261 = fmul float %176, %253, !dbg !40
  %262 = fmul float %173, %254, !dbg !40
  %263 = fmul float %170, %255, !dbg !40
  %264 = fmul float %167, %256, !dbg !40
  %265 = fmul float %164, %253, !dbg !40
  %266 = fmul float %161, %254, !dbg !40
  %267 = fmul float %158, %255, !dbg !40
  %268 = fmul float %155, %256, !dbg !40
  %269 = fmul float %152, %253, !dbg !40
  %270 = fmul float %147, %254, !dbg !40
  %271 = fmul float %142, %255, !dbg !40
  %272 = fmul float %137, %256, !dbg !40
  %273 = fmul float %257, %204, !dbg !41
  %274 = fmul float %258, %202, !dbg !41
  %275 = fmul float %259, %200, !dbg !41
  %276 = fmul float %260, %198, !dbg !41
  %277 = fmul float %261, %204, !dbg !41
  %278 = fmul float %262, %202, !dbg !41
  %279 = fmul float %263, %200, !dbg !41
  %280 = fmul float %264, %198, !dbg !41
  %281 = fmul float %265, %204, !dbg !41
  %282 = fmul float %266, %202, !dbg !41
  %283 = fmul float %267, %200, !dbg !41
  %284 = fmul float %268, %198, !dbg !41
  %285 = fmul float %269, %204, !dbg !41
  %286 = fmul float %270, %202, !dbg !41
  %287 = fmul float %271, %200, !dbg !41
  %288 = fmul float %272, %198, !dbg !41
  %289 = fadd float %273, %196, !dbg !42
  %290 = fadd float %274, %194, !dbg !42
  %291 = fadd float %275, %192, !dbg !42
  %292 = fadd float %276, %190, !dbg !42
  %293 = fadd float %277, %196, !dbg !42
  %294 = fadd float %278, %194, !dbg !42
  %295 = fadd float %279, %192, !dbg !42
  %296 = fadd float %280, %190, !dbg !42
  %297 = fadd float %281, %196, !dbg !42
  %298 = fadd float %282, %194, !dbg !42
  %299 = fadd float %283, %192, !dbg !42
  %300 = fadd float %284, %190, !dbg !42
  %301 = fadd float %285, %196, !dbg !42
  %302 = fadd float %286, %194, !dbg !42
  %303 = fadd float %287, %192, !dbg !42
  %304 = fadd float %288, %190, !dbg !42
  %305 = fadd float %289, %236, !dbg !43
  %306 = fadd float %290, %234, !dbg !43
  %307 = fadd float %291, %232, !dbg !43
  %308 = fadd float %292, %230, !dbg !43
  %309 = fadd float %293, %228, !dbg !43
  %310 = fadd float %294, %226, !dbg !43
  %311 = fadd float %295, %224, !dbg !43
  %312 = fadd float %296, %222, !dbg !43
  %313 = fadd float %297, %220, !dbg !43
  %314 = fadd float %298, %218, !dbg !43
  %315 = fadd float %299, %216, !dbg !43
  %316 = fadd float %300, %214, !dbg !43
  %317 = fadd float %301, %212, !dbg !43
  %318 = fadd float %302, %210, !dbg !43
  %319 = fadd float %303, %208, !dbg !43
  %320 = fadd float %304, %206, !dbg !43
  %321 = shl i32 %248, 4, !dbg !44
  %322 = shl i32 %245, 4, !dbg !44
  %323 = shl i32 %242, 4, !dbg !44
  %324 = shl i32 %237, 4, !dbg !44
  %325 = shl i32 %251, 10, !dbg !45
  %326 = add i32 %325, %.decomposed, !dbg !46
  %327 = add i32 %326, %321, !dbg !47
  %328 = add i32 %326, %322, !dbg !47
  %329 = add i32 %326, %323, !dbg !47
  %330 = add i32 %326, %324, !dbg !47
  %331 = sext i32 %327 to i64, !dbg !48
  %332 = getelementptr float, ptr addrspace(1) %6, i64 %331, !dbg !48
  %333 = sext i32 %328 to i64, !dbg !48
  %334 = getelementptr float, ptr addrspace(1) %6, i64 %333, !dbg !48
  %335 = sext i32 %329 to i64, !dbg !48
  %336 = getelementptr float, ptr addrspace(1) %6, i64 %335, !dbg !48
  %337 = sext i32 %330 to i64, !dbg !48
  %338 = getelementptr float, ptr addrspace(1) %6, i64 %337, !dbg !48
  %339 = shl i32 %12, 8, !dbg !49
  %340 = and i32 %339, 3840, !dbg !49
  %341 = or disjoint i32 %340, %14, !dbg !49
  %342 = and i32 %18, 1020, !dbg !49
  %343 = lshr exact i32 %340, 2, !dbg !49
  %344 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %343, !dbg !49
  %345 = getelementptr float, ptr addrspace(3) %344, i32 %341, !dbg !49
  %346 = bitcast float %305 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %345, <1 x i32> %346, i1 true) #4, !dbg !49
  %347 = or disjoint i32 %341, 64, !dbg !49
  %348 = lshr i32 %347, 4, !dbg !49
  %349 = getelementptr float, ptr addrspace(3) @global_smem, i32 %348, !dbg !49
  %350 = getelementptr float, ptr addrspace(3) %349, i32 %347, !dbg !49
  %351 = bitcast float %306 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %350, <1 x i32> %351, i1 true) #4, !dbg !49
  %352 = or disjoint i32 %341, 128, !dbg !49
  %353 = lshr i32 %352, 4, !dbg !49
  %354 = getelementptr float, ptr addrspace(3) @global_smem, i32 %353, !dbg !49
  %355 = getelementptr float, ptr addrspace(3) %354, i32 %352, !dbg !49
  %356 = bitcast float %307 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %355, <1 x i32> %356, i1 true) #4, !dbg !49
  %357 = or disjoint i32 %341, 192, !dbg !49
  %358 = lshr i32 %357, 4, !dbg !49
  %359 = getelementptr float, ptr addrspace(3) @global_smem, i32 %358, !dbg !49
  %360 = getelementptr float, ptr addrspace(3) %359, i32 %357, !dbg !49
  %361 = bitcast float %308 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %360, <1 x i32> %361, i1 true) #4, !dbg !49
  %362 = or disjoint i32 %341, 16, !dbg !49
  %363 = getelementptr float, ptr addrspace(3) %344, i32 %362, !dbg !49
  %364 = bitcast float %309 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %363, <1 x i32> %364, i1 true) #4, !dbg !49
  %365 = or disjoint i32 %341, 80, !dbg !49
  %366 = lshr i32 %365, 4, !dbg !49
  %367 = and i32 %366, 244, !dbg !49
  %368 = getelementptr float, ptr addrspace(3) @global_smem, i32 %367, !dbg !49
  %369 = getelementptr float, ptr addrspace(3) %368, i32 %365, !dbg !49
  %370 = bitcast float %310 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %369, <1 x i32> %370, i1 true) #4, !dbg !49
  %371 = or disjoint i32 %341, 144, !dbg !49
  %372 = lshr i32 %371, 4, !dbg !49
  %373 = and i32 %372, 248, !dbg !49
  %374 = getelementptr float, ptr addrspace(3) @global_smem, i32 %373, !dbg !49
  %375 = getelementptr float, ptr addrspace(3) %374, i32 %371, !dbg !49
  %376 = bitcast float %311 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %375, <1 x i32> %376, i1 true) #4, !dbg !49
  %377 = or disjoint i32 %341, 208, !dbg !49
  %378 = lshr i32 %377, 4, !dbg !49
  %379 = and i32 %378, 252, !dbg !49
  %380 = getelementptr float, ptr addrspace(3) @global_smem, i32 %379, !dbg !49
  %381 = getelementptr float, ptr addrspace(3) %380, i32 %377, !dbg !49
  %382 = bitcast float %312 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %381, <1 x i32> %382, i1 true) #4, !dbg !49
  %383 = or disjoint i32 %341, 32, !dbg !49
  %384 = getelementptr float, ptr addrspace(3) %344, i32 %383, !dbg !49
  %385 = bitcast float %313 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %384, <1 x i32> %385, i1 true) #4, !dbg !49
  %386 = or disjoint i32 %341, 96, !dbg !49
  %387 = lshr i32 %386, 4, !dbg !49
  %388 = and i32 %387, 244, !dbg !49
  %389 = getelementptr float, ptr addrspace(3) @global_smem, i32 %388, !dbg !49
  %390 = getelementptr float, ptr addrspace(3) %389, i32 %386, !dbg !49
  %391 = bitcast float %314 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %390, <1 x i32> %391, i1 true) #4, !dbg !49
  %392 = or disjoint i32 %341, 160, !dbg !49
  %393 = lshr i32 %392, 4, !dbg !49
  %394 = and i32 %393, 248, !dbg !49
  %395 = getelementptr float, ptr addrspace(3) @global_smem, i32 %394, !dbg !49
  %396 = getelementptr float, ptr addrspace(3) %395, i32 %392, !dbg !49
  %397 = bitcast float %315 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %396, <1 x i32> %397, i1 true) #4, !dbg !49
  %398 = or disjoint i32 %341, 224, !dbg !49
  %399 = lshr i32 %398, 4, !dbg !49
  %400 = and i32 %399, 252, !dbg !49
  %401 = getelementptr float, ptr addrspace(3) @global_smem, i32 %400, !dbg !49
  %402 = getelementptr float, ptr addrspace(3) %401, i32 %398, !dbg !49
  %403 = bitcast float %316 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %402, <1 x i32> %403, i1 true) #4, !dbg !49
  %404 = or disjoint i32 %341, 48, !dbg !49
  %405 = getelementptr float, ptr addrspace(3) %344, i32 %404, !dbg !49
  %406 = bitcast float %317 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %405, <1 x i32> %406, i1 true) #4, !dbg !49
  %407 = or disjoint i32 %341, 112, !dbg !49
  %408 = lshr i32 %407, 4, !dbg !49
  %409 = and i32 %408, 244, !dbg !49
  %410 = getelementptr float, ptr addrspace(3) @global_smem, i32 %409, !dbg !49
  %411 = getelementptr float, ptr addrspace(3) %410, i32 %407, !dbg !49
  %412 = bitcast float %318 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %411, <1 x i32> %412, i1 true) #4, !dbg !49
  %413 = or disjoint i32 %341, 176, !dbg !49
  %414 = lshr i32 %413, 4, !dbg !49
  %415 = and i32 %414, 248, !dbg !49
  %416 = getelementptr float, ptr addrspace(3) @global_smem, i32 %415, !dbg !49
  %417 = getelementptr float, ptr addrspace(3) %416, i32 %413, !dbg !49
  %418 = bitcast float %319 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %417, <1 x i32> %418, i1 true) #4, !dbg !49
  %419 = or disjoint i32 %341, 240, !dbg !49
  %420 = lshr i32 %419, 4, !dbg !49
  %421 = and i32 %420, 252, !dbg !49
  %422 = getelementptr float, ptr addrspace(3) @global_smem, i32 %421, !dbg !49
  %423 = getelementptr float, ptr addrspace(3) %422, i32 %419, !dbg !49
  %424 = bitcast float %320 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %423, <1 x i32> %424, i1 true) #4, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %425 = lshr i32 %18, 4, !dbg !49
  %426 = and i32 %425, 60, !dbg !49
  %427 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %426, !dbg !49
  %428 = getelementptr inbounds float, ptr addrspace(3) %427, i32 %342, !dbg !49
  %429 = or disjoint i32 %342, 1024, !dbg !49
  %430 = lshr i32 %429, 4, !dbg !49
  %431 = and i32 %430, 124, !dbg !49
  %432 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %431, !dbg !49
  %433 = getelementptr inbounds float, ptr addrspace(3) %432, i32 %429, !dbg !49
  %434 = load <4 x i32>, ptr addrspace(3) %433, align 16, !dbg !49
  %435 = or disjoint i32 %342, 2048, !dbg !49
  %436 = lshr i32 %435, 4, !dbg !49
  %437 = and i32 %436, 188, !dbg !49
  %438 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %437, !dbg !49
  %439 = getelementptr inbounds float, ptr addrspace(3) %438, i32 %435, !dbg !49
  %440 = load <4 x i32>, ptr addrspace(3) %439, align 16, !dbg !49
  %441 = or disjoint i32 %342, 3072, !dbg !49
  %442 = lshr i32 %441, 4, !dbg !49
  %443 = and i32 %442, 252, !dbg !49
  %444 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %443, !dbg !49
  %445 = getelementptr inbounds float, ptr addrspace(3) %444, i32 %441, !dbg !49
  %446 = load <4 x i32>, ptr addrspace(3) %445, align 16, !dbg !49
  %.extract = load i32, ptr addrspace(3) %428, align 16, !dbg !49
  %447 = getelementptr inbounds i8, ptr addrspace(3) %428, i32 4, !dbg !49
  %.extract16 = load i32, ptr addrspace(3) %447, align 4, !dbg !49
  %448 = getelementptr inbounds i8, ptr addrspace(3) %428, i32 8, !dbg !49
  %.extract17 = load i32, ptr addrspace(3) %448, align 8, !dbg !49
  %449 = getelementptr inbounds i8, ptr addrspace(3) %428, i32 12, !dbg !49
  %.extract18 = load i32, ptr addrspace(3) %449, align 4, !dbg !49
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract16, i32 %.extract17, i32 %.extract18, ptr addrspace(1) %332, i1 %250) #4, !dbg !49
  %.extract19 = extractelement <4 x i32> %434, i64 0, !dbg !49
  %.extract20 = extractelement <4 x i32> %434, i64 1, !dbg !49
  %.extract21 = extractelement <4 x i32> %434, i64 2, !dbg !49
  %.extract22 = extractelement <4 x i32> %434, i64 3, !dbg !49
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract19, i32 %.extract20, i32 %.extract21, i32 %.extract22, ptr addrspace(1) %334, i1 %247) #4, !dbg !49
  %.extract23 = extractelement <4 x i32> %440, i64 0, !dbg !49
  %.extract24 = extractelement <4 x i32> %440, i64 1, !dbg !49
  %.extract25 = extractelement <4 x i32> %440, i64 2, !dbg !49
  %.extract26 = extractelement <4 x i32> %440, i64 3, !dbg !49
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract23, i32 %.extract24, i32 %.extract25, i32 %.extract26, ptr addrspace(1) %336, i1 %244) #4, !dbg !49
  %.extract27 = extractelement <4 x i32> %446, i64 0, !dbg !49
  %.extract28 = extractelement <4 x i32> %446, i64 1, !dbg !49
  %.extract29 = extractelement <4 x i32> %446, i64 2, !dbg !49
  %.extract30 = extractelement <4 x i32> %446, i64 3, !dbg !49
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract27, i32 %.extract28, i32 %.extract29, i32 %.extract30, ptr addrspace(1) %338, i1 %241) #4, !dbg !49
  ret void, !dbg !50
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ctpbnx3myzwtfbnprpdwybq5b4qjkejpeeyuvidvckqneeil56f2.py", directory: "inductor_cache/tp")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_16, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_16, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_16", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_16", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 32, column: 38, scope: !7)
!20 = !DILocation(line: 32, column: 35, scope: !7)
!21 = !DILocation(line: 32, column: 30, scope: !7)
!22 = !DILocation(line: 32, column: 51, scope: !7)
!23 = !DILocation(line: 32, column: 43, scope: !7)
!24 = !DILocation(line: 33, column: 30, scope: !7)
!25 = !DILocation(line: 33, column: 43, scope: !7)
!26 = !DILocation(line: 34, column: 30, scope: !7)
!27 = !DILocation(line: 34, column: 35, scope: !7)
!28 = !DILocation(line: 35, column: 30, scope: !7)
!29 = !DILocation(line: 35, column: 35, scope: !7)
!30 = !DILocation(line: 36, column: 31, scope: !7)
!31 = !DILocation(line: 36, column: 36, scope: !7)
!32 = !DILocation(line: 37, column: 31, scope: !7)
!33 = !DILocation(line: 37, column: 36, scope: !7)
!34 = !DILocation(line: 40, column: 18, scope: !7)
!35 = !DILocation(line: 41, column: 26, scope: !7)
!36 = !DILocation(line: 38, column: 18, scope: !7)
!37 = !DILocation(line: 31, column: 19, scope: !7)
!38 = !DILocation(line: 30, column: 19, scope: !7)
!39 = !DILocation(line: 43, column: 18, scope: !7)
!40 = !DILocation(line: 46, column: 19, scope: !7)
!41 = !DILocation(line: 47, column: 20, scope: !7)
!42 = !DILocation(line: 48, column: 20, scope: !7)
!43 = !DILocation(line: 49, column: 19, scope: !7)
!44 = !DILocation(line: 50, column: 33, scope: !7)
!45 = !DILocation(line: 50, column: 43, scope: !7)
!46 = !DILocation(line: 50, column: 30, scope: !7)
!47 = !DILocation(line: 50, column: 38, scope: !7)
!48 = !DILocation(line: 50, column: 25, scope: !7)
!49 = !DILocation(line: 50, column: 55, scope: !7)
!50 = !DILocation(line: 50, column: 4, scope: !7)
