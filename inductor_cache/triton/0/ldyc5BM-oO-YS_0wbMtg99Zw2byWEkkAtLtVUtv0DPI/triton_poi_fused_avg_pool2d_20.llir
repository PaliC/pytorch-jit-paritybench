; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_avg_pool2d_20(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 7, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = and i32 %6, 127, !dbg !12
  %8 = or disjoint i32 %5, %7, !dbg !13
  %9 = icmp slt i32 %8, 11264, !dbg !14
  %10 = add i32 %8, -396, !dbg !15
  %11 = sext i32 %10 to i64, !dbg !16
  %12 = getelementptr float, ptr addrspace(1) %0, i64 %11, !dbg !16
  %13 = add i32 %8, -352, !dbg !17
  %14 = sext i32 %13 to i64, !dbg !18
  %15 = getelementptr float, ptr addrspace(1) %0, i64 %14, !dbg !18
  %16 = add i32 %8, -308, !dbg !19
  %17 = sext i32 %16 to i64, !dbg !20
  %18 = getelementptr float, ptr addrspace(1) %0, i64 %17, !dbg !20
  %19 = add i32 %8, -44, !dbg !21
  %20 = sext i32 %19 to i64, !dbg !22
  %21 = getelementptr float, ptr addrspace(1) %0, i64 %20, !dbg !22
  %22 = sext i32 %8 to i64, !dbg !23
  %23 = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !23
  %24 = add i32 %8, 44, !dbg !24
  %25 = sext i32 %24 to i64, !dbg !25
  %26 = getelementptr float, ptr addrspace(1) %0, i64 %25, !dbg !25
  %27 = add i32 %8, 308, !dbg !26
  %28 = sext i32 %27 to i64, !dbg !27
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !27
  %30 = add i32 %8, 352, !dbg !28
  %31 = sext i32 %30 to i64, !dbg !29
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !29
  %33 = add i32 %8, 396, !dbg !30
  %34 = sext i32 %33 to i64, !dbg !31
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !31
  %36 = insertelement <2 x i32> poison, i32 %8, i64 0, !dbg !32
  %37 = shufflevector <2 x i32> %36, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !32
  %38 = sdiv <2 x i32> %37, <i32 44, i32 352>, !dbg !32
  %39 = srem <2 x i32> %38, splat (i32 8), !dbg !33
  %40 = extractelement <2 x i32> %39, i64 1, !dbg !34
  %41 = icmp sgt i32 %40, 0, !dbg !35
  %42 = extractelement <2 x i32> %39, i64 0, !dbg !36
  %43 = add nsw i32 %42, -1, !dbg !37
  %44 = icmp sgt i32 %42, 0, !dbg !38
  %45 = and i1 %41, %44, !dbg !39
  %46 = and i1 %9, %45, !dbg !40
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %12, i1 %46, i32 0, i1 %46) #1, !dbg !41
  %48 = bitcast i32 %47 to float, !dbg !41
  %49 = icmp sgt i32 %42, -1, !dbg !42
  %50 = and i1 %41, %49, !dbg !43
  %51 = and i1 %9, %50, !dbg !44
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %15, i1 %51, i32 0, i1 %51) #1, !dbg !45
  %53 = bitcast i32 %52 to float, !dbg !45
  %54 = fadd float %48, %53, !dbg !46
  %55 = add nsw i32 %42, 1, !dbg !47
  %56 = icmp ult i32 %55, 8, !dbg !47
  %57 = and i1 %41, %56, !dbg !48
  %58 = and i1 %9, %57, !dbg !49
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %18, i1 %58, i32 0, i1 %58) #1, !dbg !50
  %60 = bitcast i32 %59 to float, !dbg !50
  %61 = fadd float %54, %60, !dbg !51
  %62 = icmp sgt i32 %40, -1, !dbg !52
  %63 = and i1 %62, %44, !dbg !53
  %64 = and i1 %9, %63, !dbg !54
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %21, i1 %64, i32 0, i1 %64) #1, !dbg !55
  %66 = bitcast i32 %65 to float, !dbg !55
  %67 = fadd float %61, %66, !dbg !56
  %68 = or i32 %40, %42, !dbg !36
  %69 = icmp sgt i32 %68, -1, !dbg !36
  %70 = and i1 %9, %69, !dbg !57
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %23, i1 %70, i32 0, i1 %70) #1, !dbg !58
  %72 = bitcast i32 %71 to float, !dbg !58
  %73 = fadd float %67, %72, !dbg !59
  %74 = and i1 %62, %56, !dbg !60
  %75 = and i1 %9, %74, !dbg !61
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %26, i1 %75, i32 0, i1 %75) #1, !dbg !62
  %77 = bitcast i32 %76 to float, !dbg !62
  %78 = fadd float %73, %77, !dbg !63
  %79 = add nsw i32 %40, 1, !dbg !64
  %80 = icmp ult i32 %79, 8, !dbg !64
  %81 = and i1 %44, %80, !dbg !65
  %82 = and i1 %9, %81, !dbg !66
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %29, i1 %82, i32 0, i1 %82) #1, !dbg !67
  %84 = bitcast i32 %83 to float, !dbg !67
  %85 = fadd float %78, %84, !dbg !68
  %86 = and i1 %49, %80, !dbg !69
  %87 = and i1 %9, %86, !dbg !70
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %32, i1 %87, i32 0, i1 %87) #1, !dbg !71
  %89 = bitcast i32 %88 to float, !dbg !71
  %90 = fadd float %85, %89, !dbg !72
  %91 = or i32 %79, %55, !dbg !73
  %92 = icmp ult i32 %91, 8, !dbg !73
  %93 = and i1 %9, %92, !dbg !74
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %35, i1 %93, i32 0, i1 %93) #1, !dbg !75
  %95 = bitcast i32 %94 to float, !dbg !75
  %96 = fadd float %90, %95, !dbg !76
  %97 = add nsw <2 x i32> %39, <i32 2, i32 -1>, !dbg !77
  %98 = shufflevector <2 x i32> %39, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !78
  %99 = icmp sgt <2 x i32> %98, <i32 5, i32 1>, !dbg !78
  %100 = insertelement <2 x i32> <i32 8, i32 poison>, i32 %43, i64 1, !dbg !79
  %101 = select <2 x i1> %99, <2 x i32> %100, <2 x i32> zeroinitializer, !dbg !79
  %102 = insertelement <2 x i32> %98, i32 1, i64 1, !dbg !80
  %103 = insertelement <2 x i32> %39, i32 6, i64 0, !dbg !80
  %104 = icmp slt <2 x i32> %102, %103, !dbg !80
  %105 = select <2 x i1> %104, <2 x i32> %97, <2 x i32> zeroinitializer, !dbg !81
  %106 = add nsw <2 x i32> %101, %105, !dbg !82
  %107 = mul nsw <2 x i32> %101, %105, !dbg !82
  %108 = add nsw i32 %40, 2, !dbg !83
  %109 = icmp sgt i32 %40, 5, !dbg !84
  %110 = select i1 %109, i32 8, i32 0, !dbg !85
  %111 = icmp slt i32 %40, 6, !dbg !34
  %112 = select i1 %111, i32 %108, i32 0, !dbg !86
  %113 = add nsw i32 %110, %112, !dbg !87
  %114 = extractelement <2 x i32> %106, i64 0, !dbg !88
  %115 = mul nsw i32 %114, %113, !dbg !89
  %116 = extractelement <2 x i32> %101, i64 1, !dbg !88
  %.neg = mul nsw i32 %113, %116, !dbg !88
  %117 = extractelement <2 x i32> %105, i64 1, !dbg !88
  %.neg1 = mul nsw i32 %114, %117, !dbg !88
  %reass.add = add nsw i32 %.neg, %.neg1
  %118 = extractelement <2 x i32> %107, i64 1, !dbg !90
  %119 = add nsw i32 %115, %118, !dbg !90
  %120 = sub nsw i32 %119, %reass.add, !dbg !88
  %121 = sitofp i32 %120 to float, !dbg !91
  %122 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %96, float %121) #1, !dbg !91
  %123 = getelementptr float, ptr addrspace(1) %1, i64 %22, !dbg !92
  %124 = bitcast float %122 to i32, !dbg !93
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %124, ptr addrspace(1) %123, i1 %9) #1, !dbg !93
  ret void, !dbg !94
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "chfypcu6p3zjlidpdmxnugikgmhbzfu55xt2mb4vqnnz63dww63e.py", directory: "inductor_cache/hf")
!4 = !{ptr @triton_poi_fused_avg_pool2d_20, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_avg_pool2d_20, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_avg_pool2d_20", linkageName: "triton_poi_fused_avg_pool2d_20", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 38, column: 40, scope: !7)
!16 = !DILocation(line: 38, column: 31, scope: !7)
!17 = !DILocation(line: 44, column: 40, scope: !7)
!18 = !DILocation(line: 44, column: 31, scope: !7)
!19 = !DILocation(line: 51, column: 40, scope: !7)
!20 = !DILocation(line: 51, column: 31, scope: !7)
!21 = !DILocation(line: 58, column: 39, scope: !7)
!22 = !DILocation(line: 58, column: 31, scope: !7)
!23 = !DILocation(line: 61, column: 31, scope: !7)
!24 = !DILocation(line: 64, column: 36, scope: !7)
!25 = !DILocation(line: 64, column: 31, scope: !7)
!26 = !DILocation(line: 71, column: 37, scope: !7)
!27 = !DILocation(line: 71, column: 31, scope: !7)
!28 = !DILocation(line: 74, column: 37, scope: !7)
!29 = !DILocation(line: 74, column: 31, scope: !7)
!30 = !DILocation(line: 77, column: 37, scope: !7)
!31 = !DILocation(line: 77, column: 31, scope: !7)
!32 = !DILocation(line: 25, column: 21, scope: !7)
!33 = !DILocation(line: 25, column: 27, scope: !7)
!34 = !DILocation(line: 79, column: 251, scope: !7)
!35 = !DILocation(line: 29, column: 19, scope: !7)
!36 = !DILocation(line: 60, column: 20, scope: !7)
!37 = !DILocation(line: 33, column: 18, scope: !7)
!38 = !DILocation(line: 34, column: 19, scope: !7)
!39 = !DILocation(line: 37, column: 19, scope: !7)
!40 = !DILocation(line: 38, column: 53, scope: !7)
!41 = !DILocation(line: 38, column: 45, scope: !7)
!42 = !DILocation(line: 40, column: 21, scope: !7)
!43 = !DILocation(line: 43, column: 19, scope: !7)
!44 = !DILocation(line: 44, column: 53, scope: !7)
!45 = !DILocation(line: 44, column: 45, scope: !7)
!46 = !DILocation(line: 45, column: 20, scope: !7)
!47 = !DILocation(line: 49, column: 20, scope: !7)
!48 = !DILocation(line: 50, column: 19, scope: !7)
!49 = !DILocation(line: 51, column: 53, scope: !7)
!50 = !DILocation(line: 51, column: 45, scope: !7)
!51 = !DILocation(line: 52, column: 20, scope: !7)
!52 = !DILocation(line: 54, column: 21, scope: !7)
!53 = !DILocation(line: 57, column: 20, scope: !7)
!54 = !DILocation(line: 58, column: 52, scope: !7)
!55 = !DILocation(line: 58, column: 44, scope: !7)
!56 = !DILocation(line: 59, column: 20, scope: !7)
!57 = !DILocation(line: 61, column: 44, scope: !7)
!58 = !DILocation(line: 61, column: 36, scope: !7)
!59 = !DILocation(line: 62, column: 20, scope: !7)
!60 = !DILocation(line: 63, column: 20, scope: !7)
!61 = !DILocation(line: 64, column: 49, scope: !7)
!62 = !DILocation(line: 64, column: 41, scope: !7)
!63 = !DILocation(line: 65, column: 20, scope: !7)
!64 = !DILocation(line: 69, column: 20, scope: !7)
!65 = !DILocation(line: 70, column: 20, scope: !7)
!66 = !DILocation(line: 71, column: 50, scope: !7)
!67 = !DILocation(line: 71, column: 42, scope: !7)
!68 = !DILocation(line: 72, column: 20, scope: !7)
!69 = !DILocation(line: 73, column: 20, scope: !7)
!70 = !DILocation(line: 74, column: 50, scope: !7)
!71 = !DILocation(line: 74, column: 42, scope: !7)
!72 = !DILocation(line: 75, column: 20, scope: !7)
!73 = !DILocation(line: 76, column: 20, scope: !7)
!74 = !DILocation(line: 77, column: 50, scope: !7)
!75 = !DILocation(line: 77, column: 42, scope: !7)
!76 = !DILocation(line: 78, column: 20, scope: !7)
!77 = !DILocation(line: 79, column: 164, scope: !7)
!78 = !DILocation(line: 79, column: 160, scope: !7)
!79 = !DILocation(line: 79, column: 152, scope: !7)
!80 = !DILocation(line: 79, column: 195, scope: !7)
!81 = !DILocation(line: 79, column: 183, scope: !7)
!82 = !DILocation(line: 79, column: 171, scope: !7)
!83 = !DILocation(line: 79, column: 220, scope: !7)
!84 = !DILocation(line: 79, column: 216, scope: !7)
!85 = !DILocation(line: 79, column: 208, scope: !7)
!86 = !DILocation(line: 79, column: 239, scope: !7)
!87 = !DILocation(line: 79, column: 227, scope: !7)
!88 = !DILocation(line: 79, column: 389, scope: !7)
!89 = !DILocation(line: 79, column: 201, scope: !7)
!90 = !DILocation(line: 79, column: 144, scope: !7)
!91 = !DILocation(line: 80, column: 20, scope: !7)
!92 = !DILocation(line: 81, column: 25, scope: !7)
!93 = !DILocation(line: 81, column: 37, scope: !7)
!94 = !DILocation(line: 81, column: 4, scope: !7)
