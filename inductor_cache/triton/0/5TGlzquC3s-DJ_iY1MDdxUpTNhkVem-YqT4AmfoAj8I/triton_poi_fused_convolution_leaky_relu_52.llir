; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_convolution_leaky_relu_52(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %6 = shl i32 %5, 9, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 2, !dbg !12
  %9 = and i32 %8, 508, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = or disjoint i32 %10, 1, !dbg !13
  %12 = or disjoint i32 %10, 2, !dbg !13
  %13 = or disjoint i32 %10, 3, !dbg !13
  %14 = icmp slt i32 %10, 47104, !dbg !14
  %15 = sdiv i32 %10, 23, !dbg !15
  %16 = sdiv i32 %11, 23, !dbg !15
  %17 = sdiv i32 %12, 23, !dbg !15
  %18 = sdiv i32 %13, 23, !dbg !15
  %19 = srem i32 %15, 512, !dbg !16
  %20 = srem i32 %16, 512, !dbg !16
  %21 = srem i32 %17, 512, !dbg !16
  %22 = srem i32 %18, 512, !dbg !16
  %23 = sext i32 %10 to i64, !dbg !17
  %24 = getelementptr float, ptr addrspace(1) %0, i64 %23, !dbg !17
  %25 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %24, i1 %14) #1, !dbg !18
  %26 = extractvalue { i32, i32, i32, i32 } %25, 0, !dbg !18
  %27 = extractvalue { i32, i32, i32, i32 } %25, 1, !dbg !18
  %28 = extractvalue { i32, i32, i32, i32 } %25, 2, !dbg !18
  %29 = extractvalue { i32, i32, i32, i32 } %25, 3, !dbg !18
  %30 = sext i32 %19 to i64, !dbg !19
  %31 = getelementptr float, ptr addrspace(1) %2, i64 %30, !dbg !19
  %32 = sext i32 %20 to i64, !dbg !19
  %33 = getelementptr float, ptr addrspace(1) %2, i64 %32, !dbg !19
  %34 = sext i32 %21 to i64, !dbg !19
  %35 = getelementptr float, ptr addrspace(1) %2, i64 %34, !dbg !19
  %36 = sext i32 %22 to i64, !dbg !19
  %37 = getelementptr float, ptr addrspace(1) %2, i64 %36, !dbg !19
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 %14) #1, !dbg !20
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 %14) #1, !dbg !20
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 %14) #1, !dbg !20
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %14) #1, !dbg !20
  %42 = getelementptr float, ptr addrspace(1) %1, i64 %23, !dbg !21
  %43 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %42, i1 %14) #1, !dbg !22
  %44 = extractvalue { i32, i32, i32, i32 } %43, 0, !dbg !22
  %45 = extractvalue { i32, i32, i32, i32 } %43, 1, !dbg !22
  %46 = extractvalue { i32, i32, i32, i32 } %43, 2, !dbg !22
  %47 = extractvalue { i32, i32, i32, i32 } %43, 3, !dbg !22
  %48 = insertelement <4 x i32> poison, i32 %41, i64 0, !dbg !20
  %49 = insertelement <4 x i32> %48, i32 %40, i64 1, !dbg !20
  %50 = insertelement <4 x i32> %49, i32 %39, i64 2, !dbg !20
  %51 = insertelement <4 x i32> %50, i32 %38, i64 3, !dbg !20
  %52 = bitcast <4 x i32> %51 to <4 x float>, !dbg !20
  %53 = shufflevector <4 x float> %52, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !20
  %54 = insertelement <8 x i32> poison, i32 %47, i64 0, !dbg !22
  %55 = insertelement <8 x i32> %54, i32 %46, i64 1, !dbg !22
  %56 = insertelement <8 x i32> %55, i32 %45, i64 2, !dbg !22
  %57 = insertelement <8 x i32> %56, i32 %44, i64 3, !dbg !22
  %58 = insertelement <8 x i32> %57, i32 %29, i64 4, !dbg !22
  %59 = insertelement <8 x i32> %58, i32 %28, i64 5, !dbg !22
  %60 = insertelement <8 x i32> %59, i32 %27, i64 6, !dbg !22
  %61 = insertelement <8 x i32> %60, i32 %26, i64 7, !dbg !22
  %62 = bitcast <8 x i32> %61 to <8 x float>, !dbg !22
  %63 = fadd <8 x float> %53, %62, !dbg !23
  %64 = extractelement <8 x float> %63, i64 7, !dbg !24
  %65 = fmul float %64, 0x3FB99999A0000000, !dbg !25
  %66 = extractelement <8 x float> %63, i64 6, !dbg !24
  %67 = fmul float %66, 0x3FB99999A0000000, !dbg !25
  %68 = extractelement <8 x float> %63, i64 5, !dbg !24
  %69 = fmul float %68, 0x3FB99999A0000000, !dbg !25
  %70 = extractelement <8 x float> %63, i64 4, !dbg !24
  %71 = fmul float %70, 0x3FB99999A0000000, !dbg !25
  %72 = fcmp ogt <8 x float> %63, zeroinitializer, !dbg !26
  %73 = extractelement <8 x i1> %72, i64 7, !dbg !24
  %74 = select i1 %73, float %64, float %65, !dbg !24
  %75 = extractelement <8 x i1> %72, i64 6, !dbg !24
  %76 = select i1 %75, float %66, float %67, !dbg !24
  %77 = extractelement <8 x i1> %72, i64 5, !dbg !24
  %78 = select i1 %77, float %68, float %69, !dbg !24
  %79 = extractelement <8 x i1> %72, i64 4, !dbg !24
  %80 = select i1 %79, float %70, float %71, !dbg !24
  %81 = extractelement <8 x float> %63, i64 3, !dbg !27
  %82 = fmul float %81, 0x3FB99999A0000000, !dbg !28
  %83 = extractelement <8 x float> %63, i64 2, !dbg !27
  %84 = fmul float %83, 0x3FB99999A0000000, !dbg !28
  %85 = extractelement <8 x float> %63, i64 1, !dbg !27
  %86 = fmul float %85, 0x3FB99999A0000000, !dbg !28
  %87 = extractelement <8 x float> %63, i64 0, !dbg !27
  %88 = fmul float %87, 0x3FB99999A0000000, !dbg !28
  %89 = extractelement <8 x i1> %72, i64 3, !dbg !27
  %90 = select i1 %89, float %81, float %82, !dbg !27
  %91 = extractelement <8 x i1> %72, i64 2, !dbg !27
  %92 = select i1 %91, float %83, float %84, !dbg !27
  %93 = extractelement <8 x i1> %72, i64 1, !dbg !27
  %94 = select i1 %93, float %85, float %86, !dbg !27
  %95 = extractelement <8 x i1> %72, i64 0, !dbg !27
  %96 = select i1 %95, float %87, float %88, !dbg !27
  %97 = bitcast float %74 to i32, !dbg !29
  %98 = bitcast float %76 to i32, !dbg !29
  %99 = bitcast float %78 to i32, !dbg !29
  %100 = bitcast float %80 to i32, !dbg !29
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %97, i32 %98, i32 %99, i32 %100, ptr addrspace(1) %24, i1 %14) #1, !dbg !29
  %101 = bitcast float %90 to i32, !dbg !30
  %102 = bitcast float %92 to i32, !dbg !30
  %103 = bitcast float %94 to i32, !dbg !30
  %104 = bitcast float %96 to i32, !dbg !30
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %101, i32 %102, i32 %103, i32 %104, ptr addrspace(1) %42, i1 %14) #1, !dbg !30
  ret void, !dbg !31
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ceyrq7eslzgtk5i673puu4isgsknn7xnwhfmtscxbgx4o7fj5tzc.py", directory: "inductor_cache/ey")
!4 = !{ptr @triton_poi_fused_convolution_leaky_relu_52, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_leaky_relu_52, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_leaky_relu_52", linkageName: "triton_poi_fused_convolution_leaky_relu_52", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 21, scope: !7)
!16 = !DILocation(line: 25, column: 27, scope: !7)
!17 = !DILocation(line: 26, column: 34, scope: !7)
!18 = !DILocation(line: 26, column: 39, scope: !7)
!19 = !DILocation(line: 27, column: 30, scope: !7)
!20 = !DILocation(line: 27, column: 35, scope: !7)
!21 = !DILocation(line: 28, column: 34, scope: !7)
!22 = !DILocation(line: 28, column: 39, scope: !7)
!23 = !DILocation(line: 35, column: 18, scope: !7)
!24 = !DILocation(line: 34, column: 32, scope: !7)
!25 = !DILocation(line: 33, column: 18, scope: !7)
!26 = !DILocation(line: 36, column: 19, scope: !7)
!27 = !DILocation(line: 38, column: 34, scope: !7)
!28 = !DILocation(line: 37, column: 19, scope: !7)
!29 = !DILocation(line: 39, column: 39, scope: !7)
!30 = !DILocation(line: 40, column: 40, scope: !7)
!31 = !DILocation(line: 40, column: 4, scope: !7)
