; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_relu_10(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %9 = shl i32 %8, 9, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 2, !dbg !12
  %12 = and i32 %11, 508, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %14 = or disjoint i32 %13, 1, !dbg !13
  %15 = or disjoint i32 %13, 2, !dbg !13
  %16 = or disjoint i32 %13, 3, !dbg !13
  %17 = icmp slt i32 %13, 64896, !dbg !14
  %18 = sdiv i32 %13, 169, !dbg !15
  %19 = sdiv i32 %14, 169, !dbg !15
  %20 = sdiv i32 %15, 169, !dbg !15
  %21 = sdiv i32 %16, 169, !dbg !15
  %22 = srem i32 %18, 96, !dbg !16
  %23 = srem i32 %19, 96, !dbg !16
  %24 = srem i32 %20, 96, !dbg !16
  %25 = srem i32 %21, 96, !dbg !16
  %26 = sext i32 %13 to i64, !dbg !17
  %27 = getelementptr float, ptr addrspace(1) %0, i64 %26, !dbg !17
  %28 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %27, i1 %17) #3, !dbg !18
  %29 = sext i32 %22 to i64, !dbg !19
  %30 = getelementptr float, ptr addrspace(1) %1, i64 %29, !dbg !19
  %31 = sext i32 %23 to i64, !dbg !19
  %32 = getelementptr float, ptr addrspace(1) %1, i64 %31, !dbg !19
  %33 = sext i32 %24 to i64, !dbg !19
  %34 = getelementptr float, ptr addrspace(1) %1, i64 %33, !dbg !19
  %35 = sext i32 %25 to i64, !dbg !19
  %36 = getelementptr float, ptr addrspace(1) %1, i64 %35, !dbg !19
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 %17) #3, !dbg !20
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 %17) #3, !dbg !20
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 %17) #3, !dbg !20
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 %17) #3, !dbg !20
  %41 = getelementptr float, ptr addrspace(1) %2, i64 %29, !dbg !21
  %42 = getelementptr float, ptr addrspace(1) %2, i64 %31, !dbg !21
  %43 = getelementptr float, ptr addrspace(1) %2, i64 %33, !dbg !21
  %44 = getelementptr float, ptr addrspace(1) %2, i64 %35, !dbg !21
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 %17) #3, !dbg !22
  %46 = bitcast i32 %45 to float, !dbg !22
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 %17) #3, !dbg !22
  %48 = bitcast i32 %47 to float, !dbg !22
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 %17) #3, !dbg !22
  %50 = bitcast i32 %49 to float, !dbg !22
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 %17) #3, !dbg !22
  %52 = bitcast i32 %51 to float, !dbg !22
  %53 = getelementptr float, ptr addrspace(1) %3, i64 %29, !dbg !23
  %54 = getelementptr float, ptr addrspace(1) %3, i64 %31, !dbg !23
  %55 = getelementptr float, ptr addrspace(1) %3, i64 %33, !dbg !23
  %56 = getelementptr float, ptr addrspace(1) %3, i64 %35, !dbg !23
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 %17) #3, !dbg !24
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 %17) #3, !dbg !24
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 %17) #3, !dbg !24
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 %17) #3, !dbg !24
  %61 = getelementptr float, ptr addrspace(1) %4, i64 %29, !dbg !25
  %62 = getelementptr float, ptr addrspace(1) %4, i64 %31, !dbg !25
  %63 = getelementptr float, ptr addrspace(1) %4, i64 %33, !dbg !25
  %64 = getelementptr float, ptr addrspace(1) %4, i64 %35, !dbg !25
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 %17) #3, !dbg !26
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 %17) #3, !dbg !26
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %63, i1 %17) #3, !dbg !26
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 %17) #3, !dbg !26
  %69 = fadd float %46, 0x3EE4F8B580000000, !dbg !27
  %70 = fadd float %48, 0x3EE4F8B580000000, !dbg !27
  %71 = fadd float %50, 0x3EE4F8B580000000, !dbg !27
  %72 = fadd float %52, 0x3EE4F8B580000000, !dbg !27
  %73 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i = icmp eq i32 %73, 0, !dbg !28
  %74 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i = icmp eq i32 %74, 0, !dbg !28
  br i1 %.not.i, label %80, label %75, !dbg !28

75:                                               ; preds = %7
  br i1 %.not1.i, label %78, label %76, !dbg !28

76:                                               ; preds = %75
  %77 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %69) #3, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

78:                                               ; preds = %75
  %79 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %69) #3, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

80:                                               ; preds = %7
  br i1 %.not1.i, label %83, label %81, !dbg !28

81:                                               ; preds = %80
  %82 = tail call float @llvm.nvvm.sqrt.rn.f(float %69) #3, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

83:                                               ; preds = %80
  %84 = tail call float @llvm.nvvm.sqrt.approx.f(float %69) #3, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

__nv_sqrtf.exit:                                  ; preds = %76, %78, %81, %83
  %.0.i = phi float [ %77, %76 ], [ %79, %78 ], [ %82, %81 ], [ %84, %83 ], !dbg !28
  %85 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i1 = icmp eq i32 %85, 0, !dbg !28
  %86 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i4 = icmp eq i32 %86, 0, !dbg !28
  br i1 %.not.i1, label %92, label %87, !dbg !28

87:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %90, label %88, !dbg !28

88:                                               ; preds = %87
  %89 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %70) #3, !dbg !28
  br label %__nv_sqrtf.exit5, !dbg !28

90:                                               ; preds = %87
  %91 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %70) #3, !dbg !28
  br label %__nv_sqrtf.exit5, !dbg !28

92:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %95, label %93, !dbg !28

93:                                               ; preds = %92
  %94 = tail call float @llvm.nvvm.sqrt.rn.f(float %70) #3, !dbg !28
  br label %__nv_sqrtf.exit5, !dbg !28

95:                                               ; preds = %92
  %96 = tail call float @llvm.nvvm.sqrt.approx.f(float %70) #3, !dbg !28
  br label %__nv_sqrtf.exit5, !dbg !28

__nv_sqrtf.exit5:                                 ; preds = %88, %90, %93, %95
  %.0.i3 = phi float [ %89, %88 ], [ %91, %90 ], [ %94, %93 ], [ %96, %95 ], !dbg !28
  %97 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i6 = icmp eq i32 %97, 0, !dbg !28
  %98 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i9 = icmp eq i32 %98, 0, !dbg !28
  br i1 %.not.i6, label %104, label %99, !dbg !28

99:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %102, label %100, !dbg !28

100:                                              ; preds = %99
  %101 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %71) #3, !dbg !28
  br label %__nv_sqrtf.exit10, !dbg !28

102:                                              ; preds = %99
  %103 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %71) #3, !dbg !28
  br label %__nv_sqrtf.exit10, !dbg !28

104:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %107, label %105, !dbg !28

105:                                              ; preds = %104
  %106 = tail call float @llvm.nvvm.sqrt.rn.f(float %71) #3, !dbg !28
  br label %__nv_sqrtf.exit10, !dbg !28

107:                                              ; preds = %104
  %108 = tail call float @llvm.nvvm.sqrt.approx.f(float %71) #3, !dbg !28
  br label %__nv_sqrtf.exit10, !dbg !28

__nv_sqrtf.exit10:                                ; preds = %100, %102, %105, %107
  %.0.i8 = phi float [ %101, %100 ], [ %103, %102 ], [ %106, %105 ], [ %108, %107 ], !dbg !28
  %109 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i11 = icmp eq i32 %109, 0, !dbg !28
  %110 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i14 = icmp eq i32 %110, 0, !dbg !28
  br i1 %.not.i11, label %116, label %111, !dbg !28

111:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %114, label %112, !dbg !28

112:                                              ; preds = %111
  %113 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %72) #3, !dbg !28
  br label %__nv_sqrtf.exit15, !dbg !28

114:                                              ; preds = %111
  %115 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %72) #3, !dbg !28
  br label %__nv_sqrtf.exit15, !dbg !28

116:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %119, label %117, !dbg !28

117:                                              ; preds = %116
  %118 = tail call float @llvm.nvvm.sqrt.rn.f(float %72) #3, !dbg !28
  br label %__nv_sqrtf.exit15, !dbg !28

119:                                              ; preds = %116
  %120 = tail call float @llvm.nvvm.sqrt.approx.f(float %72) #3, !dbg !28
  br label %__nv_sqrtf.exit15, !dbg !28

__nv_sqrtf.exit15:                                ; preds = %112, %114, %117, %119
  %.0.i13 = phi float [ %113, %112 ], [ %115, %114 ], [ %118, %117 ], [ %120, %119 ], !dbg !28
  %121 = extractvalue { i32, i32, i32, i32 } %28, 3, !dbg !18
  %122 = insertelement <4 x i32> poison, i32 %40, i64 0, !dbg !20
  %123 = insertelement <4 x i32> %122, i32 %39, i64 1, !dbg !20
  %124 = insertelement <4 x i32> %123, i32 %38, i64 2, !dbg !20
  %125 = insertelement <4 x i32> %124, i32 %37, i64 3, !dbg !20
  %126 = bitcast <4 x i32> %125 to <4 x float>, !dbg !20
  %127 = extractvalue { i32, i32, i32, i32 } %28, 2, !dbg !18
  %128 = extractvalue { i32, i32, i32, i32 } %28, 1, !dbg !18
  %129 = extractvalue { i32, i32, i32, i32 } %28, 0, !dbg !18
  %130 = insertelement <4 x i32> poison, i32 %68, i64 0, !dbg !26
  %131 = insertelement <4 x i32> %130, i32 %67, i64 1, !dbg !26
  %132 = insertelement <4 x i32> %131, i32 %66, i64 2, !dbg !26
  %133 = insertelement <4 x i32> %132, i32 %65, i64 3, !dbg !26
  %134 = bitcast <4 x i32> %133 to <4 x float>, !dbg !26
  %135 = insertelement <4 x i32> poison, i32 %60, i64 0, !dbg !24
  %136 = insertelement <4 x i32> %135, i32 %59, i64 1, !dbg !24
  %137 = insertelement <4 x i32> %136, i32 %58, i64 2, !dbg !24
  %138 = insertelement <4 x i32> %137, i32 %57, i64 3, !dbg !24
  %139 = bitcast <4 x i32> %138 to <4 x float>, !dbg !24
  %140 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !29
  %141 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !29
  %142 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !29
  %143 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !29
  %144 = insertelement <4 x i32> poison, i32 %121, i64 0, !dbg !18
  %145 = insertelement <4 x i32> %144, i32 %127, i64 1, !dbg !18
  %146 = insertelement <4 x i32> %145, i32 %128, i64 2, !dbg !18
  %147 = insertelement <4 x i32> %146, i32 %129, i64 3, !dbg !18
  %148 = bitcast <4 x i32> %147 to <4 x float>, !dbg !18
  %149 = fsub <4 x float> %148, %126, !dbg !30
  %150 = insertelement <4 x float> poison, float %143, i64 0, !dbg !31
  %151 = insertelement <4 x float> %150, float %142, i64 1, !dbg !31
  %152 = insertelement <4 x float> %151, float %141, i64 2, !dbg !31
  %153 = insertelement <4 x float> %152, float %140, i64 3, !dbg !31
  %154 = fmul <4 x float> %149, %153, !dbg !31
  %155 = fmul <4 x float> %154, %139, !dbg !32
  %156 = fadd <4 x float> %155, %134, !dbg !33
  %157 = fcmp olt <4 x float> %156, zeroinitializer, !dbg !34
  %158 = extractelement <4 x i1> %157, i64 3, !dbg !38
  %159 = extractelement <4 x i1> %157, i64 2, !dbg !38
  %160 = extractelement <4 x i1> %157, i64 1, !dbg !38
  %161 = extractelement <4 x i1> %157, i64 0, !dbg !38
  %162 = getelementptr float, ptr addrspace(1) %5, i64 %26, !dbg !39
  %bc = bitcast <4 x float> %156 to <4 x i32>, !dbg !40
  %163 = extractelement <4 x i32> %bc, i64 3, !dbg !40
  %164 = select i1 %158, i32 0, i32 %163, !dbg !38
  %bc16 = bitcast <4 x float> %156 to <4 x i32>, !dbg !40
  %165 = extractelement <4 x i32> %bc16, i64 2, !dbg !40
  %166 = select i1 %159, i32 0, i32 %165, !dbg !38
  %bc17 = bitcast <4 x float> %156 to <4 x i32>, !dbg !40
  %167 = extractelement <4 x i32> %bc17, i64 1, !dbg !40
  %168 = select i1 %160, i32 0, i32 %167, !dbg !38
  %bc18 = bitcast <4 x float> %156 to <4 x i32>, !dbg !40
  %169 = extractelement <4 x i32> %bc18, i64 0, !dbg !40
  %170 = select i1 %161, i32 0, i32 %169, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %164, i32 %166, i32 %168, i32 %170, ptr addrspace(1) %162, i1 %17) #3, !dbg !40
  ret void, !dbg !41
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cvlcxnnxx376btksz62c6bxcj4ytloa3ba7f3yinvnb7qgrsc5de.py", directory: "inductor_cache/vl")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_10, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_10, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_relu_10", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_relu_10", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 21, scope: !7)
!16 = !DILocation(line: 25, column: 28, scope: !7)
!17 = !DILocation(line: 26, column: 30, scope: !7)
!18 = !DILocation(line: 26, column: 35, scope: !7)
!19 = !DILocation(line: 27, column: 30, scope: !7)
!20 = !DILocation(line: 27, column: 35, scope: !7)
!21 = !DILocation(line: 28, column: 30, scope: !7)
!22 = !DILocation(line: 28, column: 35, scope: !7)
!23 = !DILocation(line: 29, column: 31, scope: !7)
!24 = !DILocation(line: 29, column: 36, scope: !7)
!25 = !DILocation(line: 30, column: 31, scope: !7)
!26 = !DILocation(line: 30, column: 36, scope: !7)
!27 = !DILocation(line: 33, column: 18, scope: !7)
!28 = !DILocation(line: 34, column: 26, scope: !7)
!29 = !DILocation(line: 36, column: 18, scope: !7)
!30 = !DILocation(line: 31, column: 18, scope: !7)
!31 = !DILocation(line: 39, column: 19, scope: !7)
!32 = !DILocation(line: 40, column: 20, scope: !7)
!33 = !DILocation(line: 41, column: 20, scope: !7)
!34 = !DILocation(line: 118, column: 15, scope: !35, inlinedAt: !37)
!35 = distinct !DILexicalBlockFile(scope: !7, file: !36, discriminator: 0)
!36 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!37 = !DILocation(line: 43, column: 42, scope: !7)
!38 = !DILocation(line: 121, column: 29, scope: !35, inlinedAt: !37)
!39 = !DILocation(line: 44, column: 25, scope: !7)
!40 = !DILocation(line: 44, column: 37, scope: !7)
!41 = !DILocation(line: 44, column: 4, scope: !7)
