; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused__native_batch_norm_legit_no_training__prelu_kernel_add_mean_mul_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, i32 %11, i32 %12) local_unnamed_addr !dbg !7 {
  %14 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %15 = icmp slt i32 %14, 16, !dbg !11
  %16 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %17 = and i32 %16, 15, !dbg !12
  %18 = srem i32 %14, 4, !dbg !13
  %19 = shl i32 %14, 4, !dbg !14
  %20 = or disjoint i32 %19, %17, !dbg !15
  %21 = sext i32 %20 to i64, !dbg !16
  %22 = getelementptr float, ptr addrspace(1) %1, i64 %21, !dbg !16
  %23 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %22, i1 %15, i32 0, i1 %15) #5, !dbg !17
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %22, i1 %15, i32 0, i1 %15) #5, !dbg !17
  %25 = sext i32 %18 to i64, !dbg !18
  %26 = getelementptr float, ptr addrspace(1) %2, i64 %25, !dbg !18
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 %15) #5, !dbg !19
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 %15) #5, !dbg !19
  %29 = getelementptr float, ptr addrspace(1) %3, i64 %25, !dbg !20
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 %15) #5, !dbg !21
  %31 = bitcast i32 %30 to float, !dbg !21
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 %15) #5, !dbg !21
  %33 = bitcast i32 %32 to float, !dbg !21
  %34 = getelementptr float, ptr addrspace(1) %4, i64 %25, !dbg !22
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 %15) #5, !dbg !23
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 %15) #5, !dbg !23
  %37 = getelementptr float, ptr addrspace(1) %5, i64 %25, !dbg !24
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %15) #5, !dbg !25
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %15) #5, !dbg !25
  %40 = sext i32 %14 to i64, !dbg !26
  %41 = getelementptr float, ptr addrspace(1) %6, i64 %40, !dbg !26
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 %15) #5, !dbg !27
  %43 = getelementptr float, ptr addrspace(1) %7, i64 %21, !dbg !28
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %43, i1 %15, i32 0, i1 %15) #5, !dbg !29
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %8, i1 true) #5, !dbg !30
  %46 = fadd float %31, 0x3EE4F8B580000000, !dbg !31
  %47 = fadd float %33, 0x3EE4F8B580000000, !dbg !31
  %48 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !32
  %.not.i = icmp eq i32 %48, 0, !dbg !32
  %49 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !32
  %.not1.i = icmp eq i32 %49, 0, !dbg !32
  br i1 %.not.i, label %55, label %50, !dbg !32

50:                                               ; preds = %13
  br i1 %.not1.i, label %53, label %51, !dbg !32

51:                                               ; preds = %50
  %52 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %46) #5, !dbg !32
  br label %__nv_sqrtf.exit, !dbg !32

53:                                               ; preds = %50
  %54 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %46) #5, !dbg !32
  br label %__nv_sqrtf.exit, !dbg !32

55:                                               ; preds = %13
  br i1 %.not1.i, label %58, label %56, !dbg !32

56:                                               ; preds = %55
  %57 = tail call float @llvm.nvvm.sqrt.rn.f(float %46) #5, !dbg !32
  br label %__nv_sqrtf.exit, !dbg !32

58:                                               ; preds = %55
  %59 = tail call float @llvm.nvvm.sqrt.approx.f(float %46) #5, !dbg !32
  br label %__nv_sqrtf.exit, !dbg !32

__nv_sqrtf.exit:                                  ; preds = %51, %53, %56, %58
  %.0.i = phi float [ %52, %51 ], [ %54, %53 ], [ %57, %56 ], [ %59, %58 ], !dbg !32
  %60 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !32
  %.not.i1 = icmp eq i32 %60, 0, !dbg !32
  %61 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !32
  %.not1.i4 = icmp eq i32 %61, 0, !dbg !32
  br i1 %.not.i1, label %67, label %62, !dbg !32

62:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %65, label %63, !dbg !32

63:                                               ; preds = %62
  %64 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %47) #5, !dbg !32
  br label %__nv_sqrtf.exit5, !dbg !32

65:                                               ; preds = %62
  %66 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %47) #5, !dbg !32
  br label %__nv_sqrtf.exit5, !dbg !32

67:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %70, label %68, !dbg !32

68:                                               ; preds = %67
  %69 = tail call float @llvm.nvvm.sqrt.rn.f(float %47) #5, !dbg !32
  br label %__nv_sqrtf.exit5, !dbg !32

70:                                               ; preds = %67
  %71 = tail call float @llvm.nvvm.sqrt.approx.f(float %47) #5, !dbg !32
  br label %__nv_sqrtf.exit5, !dbg !32

__nv_sqrtf.exit5:                                 ; preds = %63, %65, %68, %70
  %.0.i3 = phi float [ %64, %63 ], [ %66, %65 ], [ %69, %68 ], [ %71, %70 ], !dbg !32
  %72 = bitcast i32 %24 to float, !dbg !17
  %73 = bitcast i32 %28 to float, !dbg !19
  %74 = fsub float %72, %73, !dbg !33
  %75 = bitcast i32 %23 to float, !dbg !17
  %76 = bitcast i32 %27 to float, !dbg !19
  %77 = fsub float %75, %76, !dbg !33
  %78 = bitcast i32 %45 to float, !dbg !30
  %79 = bitcast i32 %44 to float, !dbg !29
  %80 = bitcast i32 %42 to float, !dbg !27
  %81 = bitcast i32 %39 to float, !dbg !25
  %82 = bitcast i32 %38 to float, !dbg !25
  %83 = bitcast i32 %36 to float, !dbg !23
  %84 = bitcast i32 %35 to float, !dbg !23
  %85 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #5, !dbg !34
  %86 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #5, !dbg !34
  %87 = fmul float %77, %85, !dbg !35
  %88 = fmul float %74, %86, !dbg !35
  %89 = fmul float %87, %84, !dbg !36
  %90 = fmul float %88, %83, !dbg !36
  %91 = fadd float %89, %82, !dbg !37
  %92 = fadd float %90, %81, !dbg !37
  %93 = fsub float 0.000000e+00, %80, !dbg !38
  %94 = fmul float %93, 0x3FF7154760000000, !dbg !42
  %95 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %94) #5, !dbg !42
  %96 = fadd float %95, 1.000000e+00, !dbg !43
  %97 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %96) #5, !dbg !44
  %98 = fmul float %97, %92, !dbg !45
  %99 = fadd float %98, %79, !dbg !46
  %100 = fcmp ogt float %99, 0.000000e+00, !dbg !47
  %101 = fmul float %99, %78, !dbg !48
  %102 = select i1 %100, float %99, float %101, !dbg !49
  %103 = select i1 %15, float %91, float 0.000000e+00, !dbg !50
  %104 = bitcast float %103 to i32, !dbg !51
  %105 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %104, i32 8, i32 31), !dbg !51
  %106 = bitcast i32 %105 to float, !dbg !51
  %107 = fadd float %103, %106, !dbg !53
  %108 = bitcast float %107 to i32, !dbg !51
  %109 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %108, i32 4, i32 31), !dbg !51
  %110 = bitcast i32 %109 to float, !dbg !51
  %111 = fadd float %107, %110, !dbg !53
  %112 = bitcast float %111 to i32, !dbg !51
  %113 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %112, i32 2, i32 31), !dbg !51
  %114 = bitcast i32 %113 to float, !dbg !51
  %115 = fadd float %111, %114, !dbg !53
  %116 = bitcast float %115 to i32, !dbg !51
  %117 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %116, i32 1, i32 31), !dbg !51
  %118 = bitcast i32 %117 to float, !dbg !51
  %119 = fadd float %115, %118, !dbg !53
  %120 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %119, float 1.600000e+01) #5, !dbg !55
  %121 = getelementptr float, ptr addrspace(1) %9, i64 %21, !dbg !56
  %122 = and i32 %16, 48, !dbg !57
  %123 = icmp eq i32 %122, 0, !dbg !57
  %124 = bitcast float %99 to i32, !dbg !57
  %125 = and i1 %123, %15, !dbg !57
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %124, ptr addrspace(1) %121, i1 %125) #5, !dbg !57
  %126 = getelementptr float, ptr addrspace(1) %10, i64 %21, !dbg !58
  %127 = bitcast float %102 to i32, !dbg !59
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %127, ptr addrspace(1) %126, i1 %125) #5, !dbg !59
  tail call void @llvm.nvvm.barrier0(), !dbg !60
  %128 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !61
  %urem = and i32 %16, 63, !dbg !62
  %129 = icmp eq i32 %urem, 0, !dbg !62
  %130 = bitcast float %120 to i32, !dbg !62
  %131 = and i1 %129, %15, !dbg !62
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %130, ptr addrspace(1) %128, i1 %131) #5, !dbg !62
  ret void, !dbg !63
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ccts5db37metfuqqepils4c4jyg3xbtfo4pdbuis34gzltdj34jt.py", directory: "inductor_cache/ct")
!4 = !{ptr @triton_per_fused__native_batch_norm_legit_no_training__prelu_kernel_add_mean_mul_2, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__native_batch_norm_legit_no_training__prelu_kernel_add_mean_mul_2, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__native_batch_norm_legit_no_training__prelu_kernel_add_mean_mul_2", linkageName: "triton_per_fused__native_batch_norm_legit_no_training__prelu_kernel_add_mean_mul_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 21, scope: !7)
!12 = !DILocation(line: 26, column: 34, scope: !7)
!13 = !DILocation(line: 31, column: 19, scope: !7)
!14 = !DILocation(line: 32, column: 38, scope: !7)
!15 = !DILocation(line: 32, column: 35, scope: !7)
!16 = !DILocation(line: 32, column: 30, scope: !7)
!17 = !DILocation(line: 32, column: 43, scope: !7)
!18 = !DILocation(line: 33, column: 30, scope: !7)
!19 = !DILocation(line: 33, column: 35, scope: !7)
!20 = !DILocation(line: 34, column: 30, scope: !7)
!21 = !DILocation(line: 34, column: 35, scope: !7)
!22 = !DILocation(line: 35, column: 31, scope: !7)
!23 = !DILocation(line: 35, column: 36, scope: !7)
!24 = !DILocation(line: 36, column: 31, scope: !7)
!25 = !DILocation(line: 36, column: 36, scope: !7)
!26 = !DILocation(line: 37, column: 31, scope: !7)
!27 = !DILocation(line: 37, column: 36, scope: !7)
!28 = !DILocation(line: 38, column: 31, scope: !7)
!29 = !DILocation(line: 38, column: 44, scope: !7)
!30 = !DILocation(line: 39, column: 20, scope: !7)
!31 = !DILocation(line: 43, column: 18, scope: !7)
!32 = !DILocation(line: 44, column: 26, scope: !7)
!33 = !DILocation(line: 41, column: 18, scope: !7)
!34 = !DILocation(line: 46, column: 18, scope: !7)
!35 = !DILocation(line: 49, column: 19, scope: !7)
!36 = !DILocation(line: 50, column: 20, scope: !7)
!37 = !DILocation(line: 51, column: 20, scope: !7)
!38 = !DILocation(line: 47, column: 30, scope: !39, inlinedAt: !41)
!39 = distinct !DILexicalBlockFile(scope: !7, file: !40, discriminator: 0)
!40 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!41 = !DILocation(line: 52, column: 23, scope: !7)
!42 = !DILocation(line: 47, column: 29, scope: !39, inlinedAt: !41)
!43 = !DILocation(line: 47, column: 20, scope: !39, inlinedAt: !41)
!44 = !DILocation(line: 47, column: 16, scope: !39, inlinedAt: !41)
!45 = !DILocation(line: 53, column: 20, scope: !7)
!46 = !DILocation(line: 54, column: 20, scope: !7)
!47 = !DILocation(line: 56, column: 20, scope: !7)
!48 = !DILocation(line: 57, column: 20, scope: !7)
!49 = !DILocation(line: 58, column: 35, scope: !7)
!50 = !DILocation(line: 60, column: 35, scope: !7)
!51 = !DILocation(line: 267, column: 36, scope: !39, inlinedAt: !52)
!52 = !DILocation(line: 61, column: 26, scope: !7)
!53 = !DILocation(line: 256, column: 15, scope: !54, inlinedAt: !52)
!54 = distinct !DILexicalBlockFile(scope: !39, file: !40, discriminator: 0)
!55 = !DILocation(line: 63, column: 20, scope: !7)
!56 = !DILocation(line: 64, column: 25, scope: !7)
!57 = !DILocation(line: 64, column: 45, scope: !7)
!58 = !DILocation(line: 65, column: 25, scope: !7)
!59 = !DILocation(line: 65, column: 45, scope: !7)
!60 = !DILocation(line: 66, column: 4, scope: !7)
!61 = !DILocation(line: 67, column: 28, scope: !7)
!62 = !DILocation(line: 67, column: 40, scope: !7)
!63 = !DILocation(line: 67, column: 4, scope: !7)
