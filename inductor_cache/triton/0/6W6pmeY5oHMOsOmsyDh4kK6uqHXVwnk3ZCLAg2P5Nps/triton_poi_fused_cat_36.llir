; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_36(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %6 = shl i32 %5, 8, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 1, !dbg !12
  %9 = and i32 %8, 254, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = or disjoint i32 %10, 1, !dbg !13
  %12 = icmp slt i32 %10, 6144, !dbg !14
  %.frozen = freeze i32 %10, !dbg !15
  %13 = sdiv i32 %.frozen, 384, !dbg !15
  %14 = mul i32 %13, 384, !dbg !16
  %.decomposed = sub i32 %.frozen, %14, !dbg !16
  %15 = srem i32 %11, 384, !dbg !16
  %16 = srem i32 %13, 4, !dbg !17
  %17 = sdiv i32 %10, 1536, !dbg !18
  %18 = icmp slt i32 %.decomposed, 128, !dbg !19
  %19 = shl nsw i32 %.decomposed, 2, !dbg !20
  %20 = shl nsw i32 %15, 2, !dbg !20
  %21 = shl nsw i32 %17, 10, !dbg !21
  %22 = add nsw i32 %21, %16, !dbg !22
  %23 = add nsw i32 %22, %19, !dbg !23
  %24 = add nsw i32 %21, %20, !dbg !22
  %25 = add nsw i32 %24, %16, !dbg !23
  %26 = sext i32 %23 to i64, !dbg !24
  %27 = getelementptr float, ptr addrspace(1) %0, i64 %26, !dbg !24
  %28 = sext i32 %25 to i64, !dbg !24
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !24
  %30 = and i1 %12, %18, !dbg !25
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %27, i1 %30, i32 0, i1 %30) #1, !dbg !26
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %29, i1 %30, i32 0, i1 %30) #1, !dbg !26
  %33 = and i32 %.decomposed, -128, !dbg !27
  %34 = icmp eq i32 %33, 128, !dbg !27
  %35 = add nsw i32 %16, 512, !dbg !28
  %36 = and i1 %12, %34, !dbg !29
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %27, i1 %36, i32 0, i1 %36) #1, !dbg !30
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %29, i1 %36, i32 0, i1 %36) #1, !dbg !30
  %39 = icmp sgt i32 %.decomposed, 255, !dbg !31
  %40 = add nsw i32 %.decomposed, -256, !dbg !32
  %41 = shl nsw i32 %40, 2, !dbg !33
  %42 = add nsw i32 %35, %21, !dbg !34
  %43 = add nsw i32 %42, %41, !dbg !35
  %44 = add nsw i32 %24, -1024, !dbg !34
  %45 = add nsw i32 %44, %35, !dbg !35
  %46 = sext i32 %43 to i64, !dbg !36
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !36
  %48 = sext i32 %45 to i64, !dbg !36
  %49 = getelementptr float, ptr addrspace(1) %0, i64 %48, !dbg !36
  %50 = and i1 %12, %39, !dbg !37
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %47, i1 %50, i32 0, i1 %50) #1, !dbg !38
  %52 = bitcast i32 %51 to float, !dbg !38
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %49, i1 %50, i32 0, i1 %50) #1, !dbg !38
  %54 = bitcast i32 %53 to float, !dbg !38
  %55 = shl nsw i32 %13, 7, !dbg !39
  %56 = add nsw i32 %55, %40, !dbg !40
  %57 = sext i32 %56 to i64, !dbg !41
  %58 = getelementptr float, ptr addrspace(1) %1, i64 %57, !dbg !41
  %59 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %58, i1 %50, i32 0, i1 %50, i32 0, i1 %50) #1, !dbg !42
  %60 = extractvalue { i32, i32 } %59, 0, !dbg !42
  %61 = extractvalue { i32, i32 } %59, 1, !dbg !42
  %62 = bitcast i32 %60 to float, !dbg !42
  %63 = bitcast i32 %61 to float, !dbg !42
  %64 = fsub float 0.000000e+00, %62, !dbg !43
  %65 = fsub float 0.000000e+00, %63, !dbg !43
  %66 = fmul float %64, 0x3FF7154760000000, !dbg !47
  %67 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %66) #1, !dbg !47
  %68 = fmul float %65, 0x3FF7154760000000, !dbg !47
  %69 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %68) #1, !dbg !47
  %70 = fadd float %67, 1.000000e+00, !dbg !48
  %71 = fadd float %69, 1.000000e+00, !dbg !48
  %72 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %70) #1, !dbg !49
  %73 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %71) #1, !dbg !49
  %74 = fmul float %72, %62, !dbg !50
  %75 = fmul float %73, %63, !dbg !50
  %76 = fadd float %74, %52, !dbg !51
  %77 = fadd float %75, %54, !dbg !51
  %78 = sext i32 %10 to i64, !dbg !52
  %79 = getelementptr float, ptr addrspace(1) %2, i64 %78, !dbg !52
  %80 = bitcast float %76 to i32, !dbg !53
  %81 = select i1 %39, i32 %80, i32 0, !dbg !54
  %82 = select i1 %34, i32 %37, i32 %81, !dbg !55
  %83 = select i1 %18, i32 %31, i32 %82, !dbg !56
  %84 = bitcast float %77 to i32, !dbg !53
  %85 = select i1 %39, i32 %84, i32 0, !dbg !54
  %86 = select i1 %34, i32 %38, i32 %85, !dbg !55
  %87 = select i1 %18, i32 %32, i32 %86, !dbg !56
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %83, i32 %87, ptr addrspace(1) %79, i1 %12) #1, !dbg !53
  ret void, !dbg !57
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cy3u4musq6i5523paub7lmbevtdrtbhpui3nbvupowwhuzvjvzhv.py", directory: "inductor_cache/y3")
!4 = !{ptr @triton_poi_fused_cat_36, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_36, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_36", linkageName: "triton_poi_fused_cat_36", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 19, scope: !7)
!17 = !DILocation(line: 25, column: 28, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 33, column: 18, scope: !7)
!20 = !DILocation(line: 34, column: 38, scope: !7)
!21 = !DILocation(line: 34, column: 49, scope: !7)
!22 = !DILocation(line: 34, column: 35, scope: !7)
!23 = !DILocation(line: 34, column: 44, scope: !7)
!24 = !DILocation(line: 34, column: 30, scope: !7)
!25 = !DILocation(line: 34, column: 61, scope: !7)
!26 = !DILocation(line: 34, column: 54, scope: !7)
!27 = !DILocation(line: 38, column: 18, scope: !7)
!28 = !DILocation(line: 39, column: 37, scope: !7)
!29 = !DILocation(line: 39, column: 77, scope: !7)
!30 = !DILocation(line: 39, column: 70, scope: !7)
!31 = !DILocation(line: 40, column: 20, scope: !7)
!32 = !DILocation(line: 43, column: 54, scope: !7)
!33 = !DILocation(line: 43, column: 45, scope: !7)
!34 = !DILocation(line: 43, column: 42, scope: !7)
!35 = !DILocation(line: 43, column: 60, scope: !7)
!36 = !DILocation(line: 43, column: 31, scope: !7)
!37 = !DILocation(line: 43, column: 78, scope: !7)
!38 = !DILocation(line: 43, column: 70, scope: !7)
!39 = !DILocation(line: 44, column: 35, scope: !7)
!40 = !DILocation(line: 44, column: 41, scope: !7)
!41 = !DILocation(line: 44, column: 31, scope: !7)
!42 = !DILocation(line: 44, column: 56, scope: !7)
!43 = !DILocation(line: 47, column: 30, scope: !44, inlinedAt: !46)
!44 = distinct !DILexicalBlockFile(scope: !7, file: !45, discriminator: 0)
!45 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!46 = !DILocation(line: 45, column: 23, scope: !7)
!47 = !DILocation(line: 47, column: 29, scope: !44, inlinedAt: !46)
!48 = !DILocation(line: 47, column: 20, scope: !44, inlinedAt: !46)
!49 = !DILocation(line: 47, column: 16, scope: !44, inlinedAt: !46)
!50 = !DILocation(line: 46, column: 20, scope: !7)
!51 = !DILocation(line: 47, column: 20, scope: !7)
!52 = !DILocation(line: 52, column: 25, scope: !7)
!53 = !DILocation(line: 52, column: 37, scope: !7)
!54 = !DILocation(line: 49, column: 35, scope: !7)
!55 = !DILocation(line: 50, column: 34, scope: !7)
!56 = !DILocation(line: 51, column: 33, scope: !7)
!57 = !DILocation(line: 52, column: 4, scope: !7)
