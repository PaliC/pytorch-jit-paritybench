; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_14(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %12 = shl i32 %11, 10, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = shl i32 %13, 2, !dbg !12
  %15 = and i32 %14, 508, !dbg !12
  %16 = or disjoint i32 %12, %15, !dbg !13
  %17 = or disjoint i32 %16, 512, !dbg !13
  %18 = srem i32 %16, 32, !dbg !14
  %19 = sext i32 %16 to i64, !dbg !15
  %20 = getelementptr float, ptr addrspace(1) %0, i64 %19, !dbg !15
  %21 = sext i32 %17 to i64, !dbg !15
  %22 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !15
  %23 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %20, i1 true) #3, !dbg !16
  %24 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %22, i1 true) #3, !dbg !16
  %25 = getelementptr float, ptr addrspace(1) %1, i64 %19, !dbg !17
  %26 = getelementptr float, ptr addrspace(1) %1, i64 %21, !dbg !17
  %27 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %25, i1 true) #3, !dbg !18
  %28 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %26, i1 true) #3, !dbg !18
  %29 = getelementptr float, ptr addrspace(1) %2, i64 %19, !dbg !19
  %30 = getelementptr float, ptr addrspace(1) %2, i64 %21, !dbg !19
  %31 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %29, i1 true) #3, !dbg !20
  %32 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %30, i1 true) #3, !dbg !20
  %33 = getelementptr float, ptr addrspace(1) %3, i64 %19, !dbg !21
  %34 = getelementptr float, ptr addrspace(1) %3, i64 %21, !dbg !21
  %35 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %33, i1 true) #3, !dbg !22
  %36 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %34, i1 true) #3, !dbg !22
  %37 = sext i32 %18 to i64, !dbg !23
  %38 = getelementptr float, ptr addrspace(1) %4, i64 %37, !dbg !23
  %39 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %38, i1 true) #3, !dbg !24
  %40 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %38, i1 true) #3, !dbg !24
  %41 = getelementptr float, ptr addrspace(1) %5, i64 %37, !dbg !25
  %42 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %41, i1 true) #3, !dbg !26
  %43 = extractvalue { i32, i32, i32, i32 } %42, 0, !dbg !26
  %44 = extractvalue { i32, i32, i32, i32 } %42, 1, !dbg !26
  %45 = extractvalue { i32, i32, i32, i32 } %42, 2, !dbg !26
  %46 = extractvalue { i32, i32, i32, i32 } %42, 3, !dbg !26
  %47 = bitcast i32 %43 to float, !dbg !26
  %48 = bitcast i32 %44 to float, !dbg !26
  %49 = bitcast i32 %45 to float, !dbg !26
  %50 = bitcast i32 %46 to float, !dbg !26
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %41, i1 true) #3, !dbg !26
  %52 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !26
  %53 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !26
  %54 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !26
  %55 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !26
  %56 = bitcast i32 %52 to float, !dbg !26
  %57 = bitcast i32 %53 to float, !dbg !26
  %58 = bitcast i32 %54 to float, !dbg !26
  %59 = bitcast i32 %55 to float, !dbg !26
  %60 = getelementptr float, ptr addrspace(1) %6, i64 %37, !dbg !27
  %61 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %60, i1 true) #3, !dbg !28
  %62 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %60, i1 true) #3, !dbg !28
  %63 = getelementptr float, ptr addrspace(1) %7, i64 %37, !dbg !29
  %64 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %63, i1 true) #3, !dbg !30
  %65 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %63, i1 true) #3, !dbg !30
  %66 = fadd float %47, 0x3EE4F8B580000000, !dbg !31
  %67 = fadd float %48, 0x3EE4F8B580000000, !dbg !31
  %68 = fadd float %49, 0x3EE4F8B580000000, !dbg !31
  %69 = fadd float %50, 0x3EE4F8B580000000, !dbg !31
  %70 = fadd float %56, 0x3EE4F8B580000000, !dbg !31
  %71 = fadd float %57, 0x3EE4F8B580000000, !dbg !31
  %72 = fadd float %58, 0x3EE4F8B580000000, !dbg !31
  %73 = fadd float %59, 0x3EE4F8B580000000, !dbg !31
  %74 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !32
  %.not.i = icmp eq i32 %74, 0, !dbg !32
  %75 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !32
  %.not1.i = icmp eq i32 %75, 0, !dbg !32
  br i1 %.not.i, label %81, label %76, !dbg !32

76:                                               ; preds = %10
  br i1 %.not1.i, label %79, label %77, !dbg !32

77:                                               ; preds = %76
  %78 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %66) #3, !dbg !32
  br label %__nv_sqrtf.exit, !dbg !32

79:                                               ; preds = %76
  %80 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %66) #3, !dbg !32
  br label %__nv_sqrtf.exit, !dbg !32

81:                                               ; preds = %10
  br i1 %.not1.i, label %84, label %82, !dbg !32

82:                                               ; preds = %81
  %83 = tail call float @llvm.nvvm.sqrt.rn.f(float %66) #3, !dbg !32
  br label %__nv_sqrtf.exit, !dbg !32

84:                                               ; preds = %81
  %85 = tail call float @llvm.nvvm.sqrt.approx.f(float %66) #3, !dbg !32
  br label %__nv_sqrtf.exit, !dbg !32

__nv_sqrtf.exit:                                  ; preds = %77, %79, %82, %84
  %.0.i = phi float [ %78, %77 ], [ %80, %79 ], [ %83, %82 ], [ %85, %84 ], !dbg !32
  %86 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !32
  %.not.i1 = icmp eq i32 %86, 0, !dbg !32
  %87 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !32
  %.not1.i4 = icmp eq i32 %87, 0, !dbg !32
  br i1 %.not.i1, label %93, label %88, !dbg !32

88:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %91, label %89, !dbg !32

89:                                               ; preds = %88
  %90 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %67) #3, !dbg !32
  br label %__nv_sqrtf.exit5, !dbg !32

91:                                               ; preds = %88
  %92 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %67) #3, !dbg !32
  br label %__nv_sqrtf.exit5, !dbg !32

93:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %96, label %94, !dbg !32

94:                                               ; preds = %93
  %95 = tail call float @llvm.nvvm.sqrt.rn.f(float %67) #3, !dbg !32
  br label %__nv_sqrtf.exit5, !dbg !32

96:                                               ; preds = %93
  %97 = tail call float @llvm.nvvm.sqrt.approx.f(float %67) #3, !dbg !32
  br label %__nv_sqrtf.exit5, !dbg !32

__nv_sqrtf.exit5:                                 ; preds = %89, %91, %94, %96
  %.0.i3 = phi float [ %90, %89 ], [ %92, %91 ], [ %95, %94 ], [ %97, %96 ], !dbg !32
  %98 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !32
  %.not.i6 = icmp eq i32 %98, 0, !dbg !32
  %99 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !32
  %.not1.i9 = icmp eq i32 %99, 0, !dbg !32
  br i1 %.not.i6, label %105, label %100, !dbg !32

100:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %103, label %101, !dbg !32

101:                                              ; preds = %100
  %102 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %68) #3, !dbg !32
  br label %__nv_sqrtf.exit10, !dbg !32

103:                                              ; preds = %100
  %104 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %68) #3, !dbg !32
  br label %__nv_sqrtf.exit10, !dbg !32

105:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %108, label %106, !dbg !32

106:                                              ; preds = %105
  %107 = tail call float @llvm.nvvm.sqrt.rn.f(float %68) #3, !dbg !32
  br label %__nv_sqrtf.exit10, !dbg !32

108:                                              ; preds = %105
  %109 = tail call float @llvm.nvvm.sqrt.approx.f(float %68) #3, !dbg !32
  br label %__nv_sqrtf.exit10, !dbg !32

__nv_sqrtf.exit10:                                ; preds = %101, %103, %106, %108
  %.0.i8 = phi float [ %102, %101 ], [ %104, %103 ], [ %107, %106 ], [ %109, %108 ], !dbg !32
  %110 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !32
  %.not.i11 = icmp eq i32 %110, 0, !dbg !32
  %111 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !32
  %.not1.i14 = icmp eq i32 %111, 0, !dbg !32
  br i1 %.not.i11, label %117, label %112, !dbg !32

112:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %115, label %113, !dbg !32

113:                                              ; preds = %112
  %114 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %69) #3, !dbg !32
  br label %__nv_sqrtf.exit15, !dbg !32

115:                                              ; preds = %112
  %116 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %69) #3, !dbg !32
  br label %__nv_sqrtf.exit15, !dbg !32

117:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %120, label %118, !dbg !32

118:                                              ; preds = %117
  %119 = tail call float @llvm.nvvm.sqrt.rn.f(float %69) #3, !dbg !32
  br label %__nv_sqrtf.exit15, !dbg !32

120:                                              ; preds = %117
  %121 = tail call float @llvm.nvvm.sqrt.approx.f(float %69) #3, !dbg !32
  br label %__nv_sqrtf.exit15, !dbg !32

__nv_sqrtf.exit15:                                ; preds = %113, %115, %118, %120
  %.0.i13 = phi float [ %114, %113 ], [ %116, %115 ], [ %119, %118 ], [ %121, %120 ], !dbg !32
  %122 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !32
  %.not.i16 = icmp eq i32 %122, 0, !dbg !32
  %123 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !32
  %.not1.i19 = icmp eq i32 %123, 0, !dbg !32
  br i1 %.not.i16, label %129, label %124, !dbg !32

124:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %127, label %125, !dbg !32

125:                                              ; preds = %124
  %126 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %70) #3, !dbg !32
  br label %__nv_sqrtf.exit20, !dbg !32

127:                                              ; preds = %124
  %128 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %70) #3, !dbg !32
  br label %__nv_sqrtf.exit20, !dbg !32

129:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %132, label %130, !dbg !32

130:                                              ; preds = %129
  %131 = tail call float @llvm.nvvm.sqrt.rn.f(float %70) #3, !dbg !32
  br label %__nv_sqrtf.exit20, !dbg !32

132:                                              ; preds = %129
  %133 = tail call float @llvm.nvvm.sqrt.approx.f(float %70) #3, !dbg !32
  br label %__nv_sqrtf.exit20, !dbg !32

__nv_sqrtf.exit20:                                ; preds = %125, %127, %130, %132
  %.0.i18 = phi float [ %126, %125 ], [ %128, %127 ], [ %131, %130 ], [ %133, %132 ], !dbg !32
  %134 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !32
  %.not.i21 = icmp eq i32 %134, 0, !dbg !32
  %135 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !32
  %.not1.i24 = icmp eq i32 %135, 0, !dbg !32
  br i1 %.not.i21, label %141, label %136, !dbg !32

136:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %139, label %137, !dbg !32

137:                                              ; preds = %136
  %138 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %71) #3, !dbg !32
  br label %__nv_sqrtf.exit25, !dbg !32

139:                                              ; preds = %136
  %140 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %71) #3, !dbg !32
  br label %__nv_sqrtf.exit25, !dbg !32

141:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %144, label %142, !dbg !32

142:                                              ; preds = %141
  %143 = tail call float @llvm.nvvm.sqrt.rn.f(float %71) #3, !dbg !32
  br label %__nv_sqrtf.exit25, !dbg !32

144:                                              ; preds = %141
  %145 = tail call float @llvm.nvvm.sqrt.approx.f(float %71) #3, !dbg !32
  br label %__nv_sqrtf.exit25, !dbg !32

__nv_sqrtf.exit25:                                ; preds = %137, %139, %142, %144
  %.0.i23 = phi float [ %138, %137 ], [ %140, %139 ], [ %143, %142 ], [ %145, %144 ], !dbg !32
  %146 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !32
  %.not.i26 = icmp eq i32 %146, 0, !dbg !32
  %147 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !32
  %.not1.i29 = icmp eq i32 %147, 0, !dbg !32
  br i1 %.not.i26, label %153, label %148, !dbg !32

148:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %151, label %149, !dbg !32

149:                                              ; preds = %148
  %150 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %72) #3, !dbg !32
  br label %__nv_sqrtf.exit30, !dbg !32

151:                                              ; preds = %148
  %152 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %72) #3, !dbg !32
  br label %__nv_sqrtf.exit30, !dbg !32

153:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %156, label %154, !dbg !32

154:                                              ; preds = %153
  %155 = tail call float @llvm.nvvm.sqrt.rn.f(float %72) #3, !dbg !32
  br label %__nv_sqrtf.exit30, !dbg !32

156:                                              ; preds = %153
  %157 = tail call float @llvm.nvvm.sqrt.approx.f(float %72) #3, !dbg !32
  br label %__nv_sqrtf.exit30, !dbg !32

__nv_sqrtf.exit30:                                ; preds = %149, %151, %154, %156
  %.0.i28 = phi float [ %150, %149 ], [ %152, %151 ], [ %155, %154 ], [ %157, %156 ], !dbg !32
  %158 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !32
  %.not.i31 = icmp eq i32 %158, 0, !dbg !32
  %159 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !32
  %.not1.i34 = icmp eq i32 %159, 0, !dbg !32
  br i1 %.not.i31, label %165, label %160, !dbg !32

160:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %163, label %161, !dbg !32

161:                                              ; preds = %160
  %162 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %73) #3, !dbg !32
  br label %__nv_sqrtf.exit35, !dbg !32

163:                                              ; preds = %160
  %164 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %73) #3, !dbg !32
  br label %__nv_sqrtf.exit35, !dbg !32

165:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %168, label %166, !dbg !32

166:                                              ; preds = %165
  %167 = tail call float @llvm.nvvm.sqrt.rn.f(float %73) #3, !dbg !32
  br label %__nv_sqrtf.exit35, !dbg !32

168:                                              ; preds = %165
  %169 = tail call float @llvm.nvvm.sqrt.approx.f(float %73) #3, !dbg !32
  br label %__nv_sqrtf.exit35, !dbg !32

__nv_sqrtf.exit35:                                ; preds = %161, %163, %166, %168
  %.0.i33 = phi float [ %162, %161 ], [ %164, %163 ], [ %167, %166 ], [ %169, %168 ], !dbg !32
  %170 = extractvalue { i32, i32, i32, i32 } %32, 3, !dbg !20
  %171 = extractvalue { i32, i32, i32, i32 } %36, 3, !dbg !22
  %172 = extractvalue { i32, i32, i32, i32 } %28, 3, !dbg !18
  %173 = extractvalue { i32, i32, i32, i32 } %24, 3, !dbg !16
  %174 = extractvalue { i32, i32, i32, i32 } %40, 3, !dbg !24
  %175 = extractvalue { i32, i32, i32, i32 } %32, 2, !dbg !20
  %176 = extractvalue { i32, i32, i32, i32 } %36, 2, !dbg !22
  %177 = extractvalue { i32, i32, i32, i32 } %28, 2, !dbg !18
  %178 = extractvalue { i32, i32, i32, i32 } %24, 2, !dbg !16
  %179 = extractvalue { i32, i32, i32, i32 } %40, 2, !dbg !24
  %180 = extractvalue { i32, i32, i32, i32 } %32, 1, !dbg !20
  %181 = extractvalue { i32, i32, i32, i32 } %36, 1, !dbg !22
  %182 = extractvalue { i32, i32, i32, i32 } %28, 1, !dbg !18
  %183 = extractvalue { i32, i32, i32, i32 } %24, 1, !dbg !16
  %184 = extractvalue { i32, i32, i32, i32 } %40, 1, !dbg !24
  %185 = extractvalue { i32, i32, i32, i32 } %32, 0, !dbg !20
  %186 = extractvalue { i32, i32, i32, i32 } %36, 0, !dbg !22
  %187 = extractvalue { i32, i32, i32, i32 } %28, 0, !dbg !18
  %188 = extractvalue { i32, i32, i32, i32 } %24, 0, !dbg !16
  %189 = extractvalue { i32, i32, i32, i32 } %40, 0, !dbg !24
  %190 = extractvalue { i32, i32, i32, i32 } %31, 3, !dbg !20
  %191 = extractvalue { i32, i32, i32, i32 } %35, 3, !dbg !22
  %192 = extractvalue { i32, i32, i32, i32 } %27, 3, !dbg !18
  %193 = extractvalue { i32, i32, i32, i32 } %23, 3, !dbg !16
  %194 = extractvalue { i32, i32, i32, i32 } %39, 3, !dbg !24
  %195 = extractvalue { i32, i32, i32, i32 } %31, 2, !dbg !20
  %196 = extractvalue { i32, i32, i32, i32 } %35, 2, !dbg !22
  %197 = extractvalue { i32, i32, i32, i32 } %27, 2, !dbg !18
  %198 = extractvalue { i32, i32, i32, i32 } %23, 2, !dbg !16
  %199 = extractvalue { i32, i32, i32, i32 } %39, 2, !dbg !24
  %200 = extractvalue { i32, i32, i32, i32 } %31, 1, !dbg !20
  %201 = extractvalue { i32, i32, i32, i32 } %35, 1, !dbg !22
  %202 = extractvalue { i32, i32, i32, i32 } %27, 1, !dbg !18
  %203 = extractvalue { i32, i32, i32, i32 } %23, 1, !dbg !16
  %204 = extractvalue { i32, i32, i32, i32 } %39, 1, !dbg !24
  %205 = extractvalue { i32, i32, i32, i32 } %31, 0, !dbg !20
  %206 = extractvalue { i32, i32, i32, i32 } %35, 0, !dbg !22
  %207 = extractvalue { i32, i32, i32, i32 } %27, 0, !dbg !18
  %208 = extractvalue { i32, i32, i32, i32 } %23, 0, !dbg !16
  %209 = extractvalue { i32, i32, i32, i32 } %39, 0, !dbg !24
  %210 = extractvalue { i32, i32, i32, i32 } %65, 3, !dbg !30
  %211 = extractvalue { i32, i32, i32, i32 } %65, 2, !dbg !30
  %212 = extractvalue { i32, i32, i32, i32 } %65, 1, !dbg !30
  %213 = extractvalue { i32, i32, i32, i32 } %65, 0, !dbg !30
  %214 = extractvalue { i32, i32, i32, i32 } %64, 3, !dbg !30
  %215 = extractvalue { i32, i32, i32, i32 } %64, 2, !dbg !30
  %216 = extractvalue { i32, i32, i32, i32 } %64, 1, !dbg !30
  %217 = extractvalue { i32, i32, i32, i32 } %64, 0, !dbg !30
  %218 = extractvalue { i32, i32, i32, i32 } %62, 3, !dbg !28
  %219 = extractvalue { i32, i32, i32, i32 } %62, 2, !dbg !28
  %220 = extractvalue { i32, i32, i32, i32 } %62, 1, !dbg !28
  %221 = extractvalue { i32, i32, i32, i32 } %62, 0, !dbg !28
  %222 = extractvalue { i32, i32, i32, i32 } %61, 3, !dbg !28
  %223 = extractvalue { i32, i32, i32, i32 } %61, 2, !dbg !28
  %224 = extractvalue { i32, i32, i32, i32 } %61, 1, !dbg !28
  %225 = extractvalue { i32, i32, i32, i32 } %61, 0, !dbg !28
  %226 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !33
  %227 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !33
  %228 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !33
  %229 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !33
  %230 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !33
  %231 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !33
  %232 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !33
  %233 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !33
  %234 = insertelement <8 x i32> poison, i32 %170, i64 0, !dbg !20
  %235 = insertelement <8 x i32> %234, i32 %175, i64 1, !dbg !20
  %236 = insertelement <8 x i32> %235, i32 %180, i64 2, !dbg !20
  %237 = insertelement <8 x i32> %236, i32 %185, i64 3, !dbg !20
  %238 = insertelement <8 x i32> %237, i32 %190, i64 4, !dbg !20
  %239 = insertelement <8 x i32> %238, i32 %195, i64 5, !dbg !20
  %240 = insertelement <8 x i32> %239, i32 %200, i64 6, !dbg !20
  %241 = insertelement <8 x i32> %240, i32 %205, i64 7, !dbg !20
  %242 = bitcast <8 x i32> %241 to <8 x float>, !dbg !20
  %243 = insertelement <8 x i32> poison, i32 %171, i64 0, !dbg !22
  %244 = insertelement <8 x i32> %243, i32 %176, i64 1, !dbg !22
  %245 = insertelement <8 x i32> %244, i32 %181, i64 2, !dbg !22
  %246 = insertelement <8 x i32> %245, i32 %186, i64 3, !dbg !22
  %247 = insertelement <8 x i32> %246, i32 %191, i64 4, !dbg !22
  %248 = insertelement <8 x i32> %247, i32 %196, i64 5, !dbg !22
  %249 = insertelement <8 x i32> %248, i32 %201, i64 6, !dbg !22
  %250 = insertelement <8 x i32> %249, i32 %206, i64 7, !dbg !22
  %251 = bitcast <8 x i32> %250 to <8 x float>, !dbg !22
  %252 = fadd <8 x float> %242, %251, !dbg !34
  %253 = insertelement <8 x i32> poison, i32 %172, i64 0, !dbg !18
  %254 = insertelement <8 x i32> %253, i32 %177, i64 1, !dbg !18
  %255 = insertelement <8 x i32> %254, i32 %182, i64 2, !dbg !18
  %256 = insertelement <8 x i32> %255, i32 %187, i64 3, !dbg !18
  %257 = insertelement <8 x i32> %256, i32 %192, i64 4, !dbg !18
  %258 = insertelement <8 x i32> %257, i32 %197, i64 5, !dbg !18
  %259 = insertelement <8 x i32> %258, i32 %202, i64 6, !dbg !18
  %260 = insertelement <8 x i32> %259, i32 %207, i64 7, !dbg !18
  %261 = bitcast <8 x i32> %260 to <8 x float>, !dbg !18
  %262 = fadd <8 x float> %252, %261, !dbg !35
  %263 = insertelement <8 x i32> poison, i32 %173, i64 0, !dbg !16
  %264 = insertelement <8 x i32> %263, i32 %178, i64 1, !dbg !16
  %265 = insertelement <8 x i32> %264, i32 %183, i64 2, !dbg !16
  %266 = insertelement <8 x i32> %265, i32 %188, i64 3, !dbg !16
  %267 = insertelement <8 x i32> %266, i32 %193, i64 4, !dbg !16
  %268 = insertelement <8 x i32> %267, i32 %198, i64 5, !dbg !16
  %269 = insertelement <8 x i32> %268, i32 %203, i64 6, !dbg !16
  %270 = insertelement <8 x i32> %269, i32 %208, i64 7, !dbg !16
  %271 = bitcast <8 x i32> %270 to <8 x float>, !dbg !16
  %272 = fadd <8 x float> %262, %271, !dbg !36
  %273 = insertelement <8 x i32> poison, i32 %174, i64 0, !dbg !24
  %274 = insertelement <8 x i32> %273, i32 %179, i64 1, !dbg !24
  %275 = insertelement <8 x i32> %274, i32 %184, i64 2, !dbg !24
  %276 = insertelement <8 x i32> %275, i32 %189, i64 3, !dbg !24
  %277 = insertelement <8 x i32> %276, i32 %194, i64 4, !dbg !24
  %278 = insertelement <8 x i32> %277, i32 %199, i64 5, !dbg !24
  %279 = insertelement <8 x i32> %278, i32 %204, i64 6, !dbg !24
  %280 = insertelement <8 x i32> %279, i32 %209, i64 7, !dbg !24
  %281 = bitcast <8 x i32> %280 to <8 x float>, !dbg !24
  %282 = fsub <8 x float> %272, %281, !dbg !37
  %283 = insertelement <8 x i32> poison, i32 %210, i64 0, !dbg !30
  %284 = insertelement <8 x i32> %283, i32 %211, i64 1, !dbg !30
  %285 = insertelement <8 x i32> %284, i32 %212, i64 2, !dbg !30
  %286 = insertelement <8 x i32> %285, i32 %213, i64 3, !dbg !30
  %287 = insertelement <8 x i32> %286, i32 %214, i64 4, !dbg !30
  %288 = insertelement <8 x i32> %287, i32 %215, i64 5, !dbg !30
  %289 = insertelement <8 x i32> %288, i32 %216, i64 6, !dbg !30
  %290 = insertelement <8 x i32> %289, i32 %217, i64 7, !dbg !30
  %291 = bitcast <8 x i32> %290 to <8 x float>, !dbg !30
  %292 = insertelement <8 x i32> poison, i32 %218, i64 0, !dbg !28
  %293 = insertelement <8 x i32> %292, i32 %219, i64 1, !dbg !28
  %294 = insertelement <8 x i32> %293, i32 %220, i64 2, !dbg !28
  %295 = insertelement <8 x i32> %294, i32 %221, i64 3, !dbg !28
  %296 = insertelement <8 x i32> %295, i32 %222, i64 4, !dbg !28
  %297 = insertelement <8 x i32> %296, i32 %223, i64 5, !dbg !28
  %298 = insertelement <8 x i32> %297, i32 %224, i64 6, !dbg !28
  %299 = insertelement <8 x i32> %298, i32 %225, i64 7, !dbg !28
  %300 = bitcast <8 x i32> %299 to <8 x float>, !dbg !28
  %301 = insertelement <8 x float> poison, float %233, i64 0, !dbg !38
  %302 = insertelement <8 x float> %301, float %232, i64 1, !dbg !38
  %303 = insertelement <8 x float> %302, float %231, i64 2, !dbg !38
  %304 = insertelement <8 x float> %303, float %230, i64 3, !dbg !38
  %305 = insertelement <8 x float> %304, float %229, i64 4, !dbg !38
  %306 = insertelement <8 x float> %305, float %228, i64 5, !dbg !38
  %307 = insertelement <8 x float> %306, float %227, i64 6, !dbg !38
  %308 = insertelement <8 x float> %307, float %226, i64 7, !dbg !38
  %309 = fmul <8 x float> %282, %308, !dbg !38
  %310 = fmul <8 x float> %309, %300, !dbg !39
  %311 = fadd <8 x float> %310, %291, !dbg !40
  %312 = fcmp olt <8 x float> %311, zeroinitializer, !dbg !41
  %313 = extractelement <8 x i1> %312, i64 7, !dbg !45
  %314 = extractelement <8 x i1> %312, i64 6, !dbg !45
  %315 = extractelement <8 x i1> %312, i64 5, !dbg !45
  %316 = extractelement <8 x i1> %312, i64 4, !dbg !45
  %317 = extractelement <8 x i1> %312, i64 3, !dbg !45
  %318 = extractelement <8 x i1> %312, i64 2, !dbg !45
  %319 = extractelement <8 x i1> %312, i64 1, !dbg !45
  %320 = extractelement <8 x i1> %312, i64 0, !dbg !45
  %321 = getelementptr float, ptr addrspace(1) %8, i64 %19, !dbg !46
  %322 = getelementptr float, ptr addrspace(1) %8, i64 %21, !dbg !46
  %bc = bitcast <8 x float> %311 to <8 x i32>, !dbg !47
  %323 = extractelement <8 x i32> %bc, i64 7, !dbg !47
  %324 = select i1 %313, i32 0, i32 %323, !dbg !45
  %bc36 = bitcast <8 x float> %311 to <8 x i32>, !dbg !47
  %325 = extractelement <8 x i32> %bc36, i64 6, !dbg !47
  %326 = select i1 %314, i32 0, i32 %325, !dbg !45
  %bc37 = bitcast <8 x float> %311 to <8 x i32>, !dbg !47
  %327 = extractelement <8 x i32> %bc37, i64 5, !dbg !47
  %328 = select i1 %315, i32 0, i32 %327, !dbg !45
  %bc38 = bitcast <8 x float> %311 to <8 x i32>, !dbg !47
  %329 = extractelement <8 x i32> %bc38, i64 4, !dbg !47
  %330 = select i1 %316, i32 0, i32 %329, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %324, i32 %326, i32 %328, i32 %330, ptr addrspace(1) %321, i1 true) #3, !dbg !47
  %bc39 = bitcast <8 x float> %311 to <8 x i32>, !dbg !47
  %331 = extractelement <8 x i32> %bc39, i64 3, !dbg !47
  %332 = select i1 %317, i32 0, i32 %331, !dbg !45
  %bc40 = bitcast <8 x float> %311 to <8 x i32>, !dbg !47
  %333 = extractelement <8 x i32> %bc40, i64 2, !dbg !47
  %334 = select i1 %318, i32 0, i32 %333, !dbg !45
  %bc41 = bitcast <8 x float> %311 to <8 x i32>, !dbg !47
  %335 = extractelement <8 x i32> %bc41, i64 1, !dbg !47
  %336 = select i1 %319, i32 0, i32 %335, !dbg !45
  %bc42 = bitcast <8 x float> %311 to <8 x i32>, !dbg !47
  %337 = extractelement <8 x i32> %bc42, i64 0, !dbg !47
  %338 = select i1 %320, i32 0, i32 %337, !dbg !45
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %332, i32 %334, i32 %336, i32 %338, ptr addrspace(1) %322, i1 true) #3, !dbg !47
  ret void, !dbg !48
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c7zpekozse4xwa2gsl3wvmzoowmpn2almvmwzb5k6pmoiq63p5hb.py", directory: "inductor_cache/7z")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_14, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_14, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_relu_14", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_relu_14", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 30, scope: !7)
!16 = !DILocation(line: 26, column: 35, scope: !7)
!17 = !DILocation(line: 27, column: 30, scope: !7)
!18 = !DILocation(line: 27, column: 35, scope: !7)
!19 = !DILocation(line: 28, column: 30, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 29, column: 30, scope: !7)
!22 = !DILocation(line: 29, column: 35, scope: !7)
!23 = !DILocation(line: 30, column: 30, scope: !7)
!24 = !DILocation(line: 30, column: 35, scope: !7)
!25 = !DILocation(line: 31, column: 30, scope: !7)
!26 = !DILocation(line: 31, column: 35, scope: !7)
!27 = !DILocation(line: 32, column: 31, scope: !7)
!28 = !DILocation(line: 32, column: 36, scope: !7)
!29 = !DILocation(line: 33, column: 31, scope: !7)
!30 = !DILocation(line: 33, column: 36, scope: !7)
!31 = !DILocation(line: 39, column: 19, scope: !7)
!32 = !DILocation(line: 40, column: 27, scope: !7)
!33 = !DILocation(line: 42, column: 20, scope: !7)
!34 = !DILocation(line: 34, column: 18, scope: !7)
!35 = !DILocation(line: 35, column: 18, scope: !7)
!36 = !DILocation(line: 36, column: 18, scope: !7)
!37 = !DILocation(line: 37, column: 18, scope: !7)
!38 = !DILocation(line: 45, column: 19, scope: !7)
!39 = !DILocation(line: 46, column: 20, scope: !7)
!40 = !DILocation(line: 47, column: 20, scope: !7)
!41 = !DILocation(line: 118, column: 15, scope: !42, inlinedAt: !44)
!42 = distinct !DILexicalBlockFile(scope: !7, file: !43, discriminator: 0)
!43 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!44 = !DILocation(line: 49, column: 42, scope: !7)
!45 = !DILocation(line: 121, column: 29, scope: !42, inlinedAt: !44)
!46 = !DILocation(line: 50, column: 25, scope: !7)
!47 = !DILocation(line: 50, column: 37, scope: !7)
!48 = !DILocation(line: 50, column: 4, scope: !7)
