; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_red_fused_convolution_mean_5(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %7 = shl i32 %6, 6, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = shl i32 %8, 2, !dbg !12
  %10 = and i32 %9, 60, !dbg !12
  %11 = or disjoint i32 %7, %10, !dbg !13
  %12 = lshr i32 %8, 4, !dbg !14
  %13 = and i32 %12, 7, !dbg !14
  %.frozen = freeze i32 %11, !dbg !15
  %14 = sdiv i32 %.frozen, 256, !dbg !15
  %15 = mul i32 %14, 256, !dbg !16
  %.decomposed = sub i32 %.frozen, %15, !dbg !16
  %16 = sext i32 %.decomposed to i64, !dbg !17
  %17 = getelementptr float, ptr addrspace(1) %1, i64 %16, !dbg !17
  %18 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %17, i1 true) #3, !dbg !18
  %19 = extractvalue { i32, i32, i32, i32 } %18, 0, !dbg !18
  %20 = extractvalue { i32, i32, i32, i32 } %18, 1, !dbg !18
  %21 = extractvalue { i32, i32, i32, i32 } %18, 2, !dbg !18
  %22 = extractvalue { i32, i32, i32, i32 } %18, 3, !dbg !18
  %23 = insertelement <4 x i32> poison, i32 %19, i64 0, !dbg !18
  %24 = insertelement <4 x i32> %23, i32 %20, i64 1, !dbg !18
  %25 = insertelement <4 x i32> %24, i32 %21, i64 2, !dbg !18
  %26 = insertelement <4 x i32> %25, i32 %22, i64 3, !dbg !18
  %27 = bitcast <4 x i32> %26 to <4 x float>, !dbg !18
  %28 = shl i32 %14, 15, !dbg !19
  %29 = add i32 %28, %.decomposed
  br label %30, !dbg !20

30:                                               ; preds = %5, %30
  %indvars.iv = phi i64 [ 0, %5 ], [ %indvars.iv.next, %30 ]
  %31 = phi <4 x float> [ zeroinitializer, %5 ], [ %48, %30 ]
  %32 = trunc i64 %indvars.iv to i32, !dbg !21
  %.tr = or disjoint i32 %13, %32, !dbg !21
  %33 = shl i32 %.tr, 8, !dbg !21
  %34 = add i32 %29, %33, !dbg !21
  %35 = sext i32 %34 to i64, !dbg !22
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !22
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_first.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %36, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true, i32 0, i1 true) #3, !dbg !23
  %38 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !23
  %39 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !23
  %40 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !23
  %41 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !23
  %42 = insertelement <4 x i32> poison, i32 %38, i64 0, !dbg !23
  %43 = insertelement <4 x i32> %42, i32 %39, i64 1, !dbg !23
  %44 = insertelement <4 x i32> %43, i32 %40, i64 2, !dbg !23
  %45 = insertelement <4 x i32> %44, i32 %41, i64 3, !dbg !23
  %46 = bitcast <4 x i32> %45 to <4 x float>, !dbg !23
  %47 = fadd <4 x float> %27, %46, !dbg !24
  %48 = fadd <4 x float> %31, %47, !dbg !25
  %indvars.iv.next = add nuw nsw i64 %indvars.iv, 8, !dbg !20
  %49 = icmp samesign ult i64 %indvars.iv, 120, !dbg !20
  br i1 %49, label %30, label %50, !dbg !20

50:                                               ; preds = %30
  %51 = lshr i32 %8, 5, !dbg !12
  %52 = and i32 %8, 63, !dbg !12
  %53 = or disjoint i32 %7, %52, !dbg !13
  %54 = and i32 %8, 16, !dbg !12
  %55 = extractelement <4 x float> %48, i64 0, !dbg !26
  %56 = bitcast float %55 to i32, !dbg !26
  %57 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %56, i32 16, i32 31), !dbg !26
  %58 = bitcast i32 %57 to float, !dbg !26
  %59 = fadd float %55, %58, !dbg !30
  %60 = extractelement <4 x float> %48, i64 1, !dbg !26
  %61 = bitcast float %60 to i32, !dbg !26
  %62 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %61, i32 16, i32 31), !dbg !26
  %63 = bitcast i32 %62 to float, !dbg !26
  %64 = fadd float %60, %63, !dbg !30
  %65 = extractelement <4 x float> %48, i64 2, !dbg !26
  %66 = bitcast float %65 to i32, !dbg !26
  %67 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %66, i32 16, i32 31), !dbg !26
  %68 = bitcast i32 %67 to float, !dbg !26
  %69 = fadd float %65, %68, !dbg !30
  %70 = extractelement <4 x float> %48, i64 3, !dbg !26
  %71 = bitcast float %70 to i32, !dbg !26
  %72 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %71, i32 16, i32 31), !dbg !26
  %73 = bitcast i32 %72 to float, !dbg !26
  %74 = fadd float %70, %73, !dbg !30
  %75 = icmp eq i32 %54, 0, !dbg !26
  %76 = and i32 %51, 3, !dbg !26
  %77 = shl nuw nsw i32 %10, 2, !dbg !26
  %78 = or disjoint i32 %77, %76, !dbg !26
  %79 = getelementptr float, ptr addrspace(3) @global_smem, i32 %78, !dbg !26
  %80 = bitcast float %59 to <1 x i32>, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %79, <1 x i32> %80, i1 %75) #3, !dbg !26
  %81 = or disjoint i32 %77, 4, !dbg !26
  %82 = or disjoint i32 %81, %76, !dbg !26
  %83 = getelementptr float, ptr addrspace(3) @global_smem, i32 %82, !dbg !26
  %84 = bitcast float %64 to <1 x i32>, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %83, <1 x i32> %84, i1 %75) #3, !dbg !26
  %85 = or disjoint i32 %77, 8, !dbg !26
  %86 = or disjoint i32 %85, %76, !dbg !26
  %87 = getelementptr float, ptr addrspace(3) @global_smem, i32 %86, !dbg !26
  %88 = bitcast float %69 to <1 x i32>, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %87, <1 x i32> %88, i1 %75) #3, !dbg !26
  %89 = or disjoint i32 %77, 12, !dbg !26
  %90 = or disjoint i32 %89, %76, !dbg !26
  %91 = getelementptr float, ptr addrspace(3) @global_smem, i32 %90, !dbg !26
  %92 = bitcast float %74 to <1 x i32>, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %91, <1 x i32> %92, i1 %75) #3, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %93 = icmp slt i32 %8, 256, !dbg !26
  %94 = getelementptr float, ptr addrspace(3) @global_smem, i32 %8, !dbg !26
  %95 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %94, i1 %93) #3, !dbg !26
  %96 = bitcast i32 %95 to float, !dbg !26
  %97 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %95, i32 2, i32 31), !dbg !26
  %98 = bitcast i32 %97 to float, !dbg !26
  %99 = fadd float %96, %98, !dbg !30
  %100 = bitcast float %99 to i32, !dbg !26
  %101 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %100, i32 1, i32 31), !dbg !26
  %102 = bitcast i32 %101 to float, !dbg !26
  %103 = fadd float %99, %102, !dbg !30
  %104 = and i32 %8, 3, !dbg !26
  %105 = icmp eq i32 %104, 0, !dbg !26
  %106 = and i1 %93, %105, !dbg !26
  %107 = bitcast float %103 to <1 x i32>, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %94, <1 x i32> %107, i1 %106) #3, !dbg !26
  %108 = getelementptr i8, ptr addrspace(3) %94, i32 512, !dbg !26
  %109 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %108, i1 %93) #3, !dbg !26
  %110 = bitcast i32 %109 to float, !dbg !26
  %111 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %109, i32 2, i32 31), !dbg !26
  %112 = bitcast i32 %111 to float, !dbg !26
  %113 = fadd float %110, %112, !dbg !30
  %114 = bitcast float %113 to i32, !dbg !26
  %115 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %114, i32 1, i32 31), !dbg !26
  %116 = bitcast i32 %115 to float, !dbg !26
  %117 = fadd float %113, %116, !dbg !30
  %118 = bitcast float %117 to <1 x i32>, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %108, <1 x i32> %118, i1 %106) #3, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %119 = getelementptr float, ptr addrspace(3) @global_smem, i32 %77, !dbg !26
  %120 = load i32, ptr addrspace(3) %119, align 16, !dbg !26
  %121 = getelementptr float, ptr addrspace(3) @global_smem, i32 %81, !dbg !26
  %122 = load i32, ptr addrspace(3) %121, align 16, !dbg !26
  %123 = getelementptr float, ptr addrspace(3) @global_smem, i32 %85, !dbg !26
  %124 = load i32, ptr addrspace(3) %123, align 16, !dbg !26
  %125 = getelementptr float, ptr addrspace(3) @global_smem, i32 %89, !dbg !26
  %126 = load i32, ptr addrspace(3) %125, align 16, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %127 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %10, !dbg !32
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %127, i32 %120, i32 %122, i32 %124, i32 %126, i1 true) #3, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %128 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %52, !dbg !32
  %129 = load i32, ptr addrspace(3) %128, align 4, !dbg !32
  %130 = sext i32 %53 to i64, !dbg !33
  %131 = getelementptr float, ptr addrspace(1) %2, i64 %130, !dbg !33
  %132 = and i32 %8, 64, !dbg !34
  %133 = icmp eq i32 %132, 0, !dbg !34
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %129, ptr addrspace(1) %131, i1 %133) #3, !dbg !34
  ret void, !dbg !35
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cir4ty3qvu7acqeoldzxaj4nj32ikghxhesletyc3lrkpdogpvlx.py", directory: "inductor_cache/ir")
!4 = !{ptr @triton_red_fused_convolution_mean_5, !"kernel", i32 1}
!5 = !{ptr @triton_red_fused_convolution_mean_5, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_red_fused_convolution_mean_5", linkageName: "triton_red_fused_convolution_mean_5", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 33, scope: !7)
!15 = !DILocation(line: 27, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 28, column: 30, scope: !7)
!18 = !DILocation(line: 28, column: 35, scope: !7)
!19 = !DILocation(line: 35, column: 54, scope: !7)
!20 = !DILocation(line: 31, column: 36, scope: !7)
!21 = !DILocation(line: 35, column: 48, scope: !7)
!22 = !DILocation(line: 35, column: 34, scope: !7)
!23 = !DILocation(line: 35, column: 59, scope: !7)
!24 = !DILocation(line: 36, column: 22, scope: !7)
!25 = !DILocation(line: 38, column: 23, scope: !7)
!26 = !DILocation(line: 267, column: 36, scope: !27, inlinedAt: !29)
!27 = distinct !DILexicalBlockFile(scope: !7, file: !28, discriminator: 0)
!28 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!29 = !DILocation(line: 40, column: 25, scope: !7)
!30 = !DILocation(line: 256, column: 15, scope: !31, inlinedAt: !29)
!31 = distinct !DILexicalBlockFile(scope: !27, file: !28, discriminator: 0)
!32 = !DILocation(line: 40, column: 28, scope: !7)
!33 = !DILocation(line: 41, column: 25, scope: !7)
!34 = !DILocation(line: 41, column: 36, scope: !7)
!35 = !DILocation(line: 41, column: 4, scope: !7)
