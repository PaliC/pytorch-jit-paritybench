#blocked = #triton_gpu.blocked<{sizePerThread = [4, 1], threadsPerWarp = [16, 2], warpsPerCTA = [1, 4], order = [0, 1]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [32, 1], warpsPerCTA = [2, 2], order = [0, 1]}>
#loc = loc("inductor_cache/ir/cir4ty3qvu7acqeoldzxaj4nj32ikghxhesletyc3lrkpdogpvlx.py":19:0)
#loc1 = loc(unknown)
#loc25 = loc("inductor_cache/ir/cir4ty3qvu7acqeoldzxaj4nj32ikghxhesletyc3lrkpdogpvlx.py":40:25)
#loc32 = loc(callsite(#loc1 at #loc25))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_red_fused_convolution_mean_5(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/ir/cir4ty3qvu7acqeoldzxaj4nj32ikghxhesletyc3lrkpdogpvlx.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/ir/cir4ty3qvu7acqeoldzxaj4nj32ikghxhesletyc3lrkpdogpvlx.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/ir/cir4ty3qvu7acqeoldzxaj4nj32ikghxhesletyc3lrkpdogpvlx.py":19:0), %arg3: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/ir/cir4ty3qvu7acqeoldzxaj4nj32ikghxhesletyc3lrkpdogpvlx.py":19:0), %arg4: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/ir/cir4ty3qvu7acqeoldzxaj4nj32ikghxhesletyc3lrkpdogpvlx.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<64x8xf32, #blocked> loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %c128_i32 = arith.constant 128 : i32 loc(#loc1)
    %c8_i32 = arith.constant 8 : i32 loc(#loc1)
    %c64_i32 = arith.constant 64 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<256> : tensor<64x1xi32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<32768> : tensor<64x1xi32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<256> : tensor<1x8xi32, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<128> : tensor<1x8xi32, #blocked> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c64_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc4)
    %3 = tt.make_range {end = 64 : i32, start = 0 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc4)
    %4 = tt.expand_dims %2 {axis = 1 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<64x1xi32, #blocked> loc(#loc4)
    %5 = tt.expand_dims %3 {axis = 1 : i32} : tensor<64xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<64x1xi32, #blocked1> loc(#loc4)
    %6 = tt.splat %1 : i32 -> tensor<64x1xi32, #blocked> loc(#loc5)
    %7 = tt.splat %1 : i32 -> tensor<64x1xi32, #blocked1> loc(#loc5)
    %8 = arith.addi %6, %4 : tensor<64x1xi32, #blocked> loc(#loc5)
    %9 = arith.addi %7, %5 : tensor<64x1xi32, #blocked1> loc(#loc5)
    %10 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc6)
    %11 = tt.expand_dims %10 {axis = 0 : i32} : tensor<8xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x8xi32, #blocked> loc(#loc6)
    %12 = arith.remsi %8, %cst_0 : tensor<64x1xi32, #blocked> loc(#loc7)
    %13 = arith.divsi %8, %cst_0 : tensor<64x1xi32, #blocked> loc(#loc8)
    %14 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<64x1x!tt.ptr<f32>, #blocked> loc(#loc9)
    %15 = tt.addptr %14, %12 : tensor<64x1x!tt.ptr<f32>, #blocked>, tensor<64x1xi32, #blocked> loc(#loc9)
    %16 = tt.load %15 evictionPolicy = evict_last : tensor<64x1x!tt.ptr<f32>, #blocked> loc(#loc10)
    %17 = tt.broadcast %12 : tensor<64x1xi32, #blocked> -> tensor<64x8xi32, #blocked> loc(#loc11)
    %18 = arith.muli %13, %cst_1 : tensor<64x1xi32, #blocked> loc(#loc12)
    %19 = tt.broadcast %18 : tensor<64x1xi32, #blocked> -> tensor<64x8xi32, #blocked> loc(#loc13)
    %20 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<64x8x!tt.ptr<f32>, #blocked> loc(#loc14)
    %21 = tt.broadcast %16 : tensor<64x1xf32, #blocked> -> tensor<64x8xf32, #blocked> loc(#loc15)
    %22 = scf.for %arg5 = %c0_i32 to %c128_i32 step %c8_i32 iter_args(%arg6 = %cst) -> (tensor<64x8xf32, #blocked>)  : i32 {
      %28 = tt.splat %arg5 : i32 -> tensor<1x8xi32, #blocked> loc(#loc17)
      %29 = arith.addi %28, %11 : tensor<1x8xi32, #blocked> loc(#loc17)
      %30 = arith.cmpi slt, %29, %cst_3 : tensor<1x8xi32, #blocked> loc(#loc18)
      %31 = arith.muli %29, %cst_2 : tensor<1x8xi32, #blocked> loc(#loc19)
      %32 = tt.broadcast %31 : tensor<1x8xi32, #blocked> -> tensor<64x8xi32, #blocked> loc(#loc11)
      %33 = arith.addi %17, %32 : tensor<64x8xi32, #blocked> loc(#loc11)
      %34 = arith.addi %33, %19 : tensor<64x8xi32, #blocked> loc(#loc13)
      %35 = tt.addptr %20, %34 : tensor<64x8x!tt.ptr<f32>, #blocked>, tensor<64x8xi32, #blocked> loc(#loc14)
      %36 = tt.broadcast %30 : tensor<1x8xi1, #blocked> -> tensor<64x8xi1, #blocked> loc(#loc20)
      %37 = tt.load %35, %36, %cst evictionPolicy = evict_first : tensor<64x8x!tt.ptr<f32>, #blocked> loc(#loc20)
      %38 = arith.addf %37, %21 : tensor<64x8xf32, #blocked> loc(#loc15)
      %39 = arith.addf %arg6, %38 : tensor<64x8xf32, #blocked> loc(#loc21)
      %40 = arith.select %36, %39, %arg6 : tensor<64x8xi1, #blocked>, tensor<64x8xf32, #blocked> loc(#loc22)
      scf.yield %40 : tensor<64x8xf32, #blocked> loc(#loc23)
    } loc(#loc16)
    %23 = "tt.reduce"(%22) <{axis = 1 : i32}> ({
    ^bb0(%arg5: f32 loc(callsite(#loc1 at #loc25)), %arg6: f32 loc(callsite(#loc1 at #loc25))):
      %28 = arith.addf %arg5, %arg6 : f32 loc(#loc34)
      tt.reduce.return %28 : f32 loc(#loc31)
    }) : (tensor<64x8xf32, #blocked>) -> tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc31)
    %24 = triton_gpu.convert_layout %23 {axis = 1 : i32} : tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc27)
    %25 = tt.expand_dims %24 {axis = 1 : i32} : tensor<64xf32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<64x1xf32, #blocked1> loc(#loc27)
    %26 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<64x1x!tt.ptr<f32>, #blocked1> loc(#loc28)
    %27 = tt.addptr %26, %9 : tensor<64x1x!tt.ptr<f32>, #blocked1>, tensor<64x1xi32, #blocked1> loc(#loc28)
    tt.store %27, %25 : tensor<64x1x!tt.ptr<f32>, #blocked1> loc(#loc29)
    tt.return loc(#loc30)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/ir/cir4ty3qvu7acqeoldzxaj4nj32ikghxhesletyc3lrkpdogpvlx.py":22:28)
#loc3 = loc("inductor_cache/ir/cir4ty3qvu7acqeoldzxaj4nj32ikghxhesletyc3lrkpdogpvlx.py":22:33)
#loc4 = loc("inductor_cache/ir/cir4ty3qvu7acqeoldzxaj4nj32ikghxhesletyc3lrkpdogpvlx.py":23:44)
#loc5 = loc("inductor_cache/ir/cir4ty3qvu7acqeoldzxaj4nj32ikghxhesletyc3lrkpdogpvlx.py":23:23)
#loc6 = loc("inductor_cache/ir/cir4ty3qvu7acqeoldzxaj4nj32ikghxhesletyc3lrkpdogpvlx.py":25:33)
#loc7 = loc("inductor_cache/ir/cir4ty3qvu7acqeoldzxaj4nj32ikghxhesletyc3lrkpdogpvlx.py":26:19)
#loc8 = loc("inductor_cache/ir/cir4ty3qvu7acqeoldzxaj4nj32ikghxhesletyc3lrkpdogpvlx.py":27:19)
#loc9 = loc("inductor_cache/ir/cir4ty3qvu7acqeoldzxaj4nj32ikghxhesletyc3lrkpdogpvlx.py":28:30)
#loc10 = loc("inductor_cache/ir/cir4ty3qvu7acqeoldzxaj4nj32ikghxhesletyc3lrkpdogpvlx.py":28:35)
#loc11 = loc("inductor_cache/ir/cir4ty3qvu7acqeoldzxaj4nj32ikghxhesletyc3lrkpdogpvlx.py":35:39)
#loc12 = loc("inductor_cache/ir/cir4ty3qvu7acqeoldzxaj4nj32ikghxhesletyc3lrkpdogpvlx.py":35:54)
#loc13 = loc("inductor_cache/ir/cir4ty3qvu7acqeoldzxaj4nj32ikghxhesletyc3lrkpdogpvlx.py":35:48)
#loc14 = loc("inductor_cache/ir/cir4ty3qvu7acqeoldzxaj4nj32ikghxhesletyc3lrkpdogpvlx.py":35:34)
#loc15 = loc("inductor_cache/ir/cir4ty3qvu7acqeoldzxaj4nj32ikghxhesletyc3lrkpdogpvlx.py":36:22)
#loc16 = loc("inductor_cache/ir/cir4ty3qvu7acqeoldzxaj4nj32ikghxhesletyc3lrkpdogpvlx.py":31:36)
#loc17 = loc("inductor_cache/ir/cir4ty3qvu7acqeoldzxaj4nj32ikghxhesletyc3lrkpdogpvlx.py":32:27)
#loc18 = loc("inductor_cache/ir/cir4ty3qvu7acqeoldzxaj4nj32ikghxhesletyc3lrkpdogpvlx.py":33:25)
#loc19 = loc("inductor_cache/ir/cir4ty3qvu7acqeoldzxaj4nj32ikghxhesletyc3lrkpdogpvlx.py":35:43)
#loc20 = loc("inductor_cache/ir/cir4ty3qvu7acqeoldzxaj4nj32ikghxhesletyc3lrkpdogpvlx.py":35:59)
#loc21 = loc("inductor_cache/ir/cir4ty3qvu7acqeoldzxaj4nj32ikghxhesletyc3lrkpdogpvlx.py":38:23)
#loc22 = loc("inductor_cache/ir/cir4ty3qvu7acqeoldzxaj4nj32ikghxhesletyc3lrkpdogpvlx.py":39:38)
#loc23 = loc("inductor_cache/ir/cir4ty3qvu7acqeoldzxaj4nj32ikghxhesletyc3lrkpdogpvlx.py":39:8)
#loc24 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc26 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc27 = loc("inductor_cache/ir/cir4ty3qvu7acqeoldzxaj4nj32ikghxhesletyc3lrkpdogpvlx.py":40:28)
#loc28 = loc("inductor_cache/ir/cir4ty3qvu7acqeoldzxaj4nj32ikghxhesletyc3lrkpdogpvlx.py":41:25)
#loc29 = loc("inductor_cache/ir/cir4ty3qvu7acqeoldzxaj4nj32ikghxhesletyc3lrkpdogpvlx.py":41:36)
#loc30 = loc("inductor_cache/ir/cir4ty3qvu7acqeoldzxaj4nj32ikghxhesletyc3lrkpdogpvlx.py":41:4)
#loc31 = loc(callsite(#loc24 at #loc25))
#loc33 = loc(callsite(#loc26 at #loc24))
#loc34 = loc(callsite(#loc33 at #loc25))
