; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_22(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %11 = shl i32 %10, 4, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = or disjoint i32 %11, 4, !dbg !13
  %14 = or disjoint i32 %11, 8, !dbg !13
  %15 = or disjoint i32 %11, 12, !dbg !13
  %16 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %17 = shl i32 %16, 8, !dbg !15
  %18 = and i32 %12, 255, !dbg !16
  %19 = or disjoint i32 %17, %18, !dbg !17
  %20 = icmp slt i32 %19, 256, !dbg !18
  %.frozen = freeze i32 %11, !dbg !19
  %21 = sdiv i32 %.frozen, 512, !dbg !19
  %22 = mul i32 %21, 512, !dbg !20
  %.decomposed = sub i32 %.frozen, %22, !dbg !20
  %23 = srem i32 %13, 512, !dbg !20
  %24 = srem i32 %14, 512, !dbg !20
  %25 = srem i32 %15, 512, !dbg !20
  %26 = shl i32 %19, 9, !dbg !21
  %27 = shl i32 %21, 17, !dbg !22
  %28 = add i32 %26, %27, !dbg !23
  %29 = add i32 %28, %.decomposed, !dbg !24
  %30 = add i32 %28, %23, !dbg !24
  %31 = add i32 %28, %24, !dbg !24
  %32 = add i32 %28, %25, !dbg !24
  %33 = sext i32 %29 to i64, !dbg !25
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !25
  %35 = sext i32 %30 to i64, !dbg !25
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !25
  %37 = sext i32 %31 to i64, !dbg !25
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !25
  %39 = sext i32 %32 to i64, !dbg !25
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !25
  %41 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %34, i1 %20) #4, !dbg !26
  %42 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %36, i1 %20) #4, !dbg !26
  %43 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %38, i1 %20) #4, !dbg !26
  %44 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %40, i1 %20) #4, !dbg !26
  %45 = sext i32 %.decomposed to i64, !dbg !27
  %46 = getelementptr float, ptr addrspace(1) %1, i64 %45, !dbg !27
  %47 = sext i32 %23 to i64, !dbg !27
  %48 = getelementptr float, ptr addrspace(1) %1, i64 %47, !dbg !27
  %49 = sext i32 %24 to i64, !dbg !27
  %50 = getelementptr float, ptr addrspace(1) %1, i64 %49, !dbg !27
  %51 = sext i32 %25 to i64, !dbg !27
  %52 = getelementptr float, ptr addrspace(1) %1, i64 %51, !dbg !27
  %53 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %46, i1 true) #4, !dbg !28
  %54 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %48, i1 true) #4, !dbg !28
  %55 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %50, i1 true) #4, !dbg !28
  %56 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %52, i1 true) #4, !dbg !28
  %57 = getelementptr float, ptr addrspace(1) %2, i64 %45, !dbg !29
  %58 = getelementptr float, ptr addrspace(1) %2, i64 %47, !dbg !29
  %59 = getelementptr float, ptr addrspace(1) %2, i64 %49, !dbg !29
  %60 = getelementptr float, ptr addrspace(1) %2, i64 %51, !dbg !29
  %61 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %57, i1 true) #4, !dbg !30
  %62 = extractvalue { i32, i32, i32, i32 } %61, 0, !dbg !30
  %63 = extractvalue { i32, i32, i32, i32 } %61, 1, !dbg !30
  %64 = extractvalue { i32, i32, i32, i32 } %61, 2, !dbg !30
  %65 = extractvalue { i32, i32, i32, i32 } %61, 3, !dbg !30
  %66 = bitcast i32 %62 to float, !dbg !30
  %67 = bitcast i32 %63 to float, !dbg !30
  %68 = bitcast i32 %64 to float, !dbg !30
  %69 = bitcast i32 %65 to float, !dbg !30
  %70 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %58, i1 true) #4, !dbg !30
  %71 = extractvalue { i32, i32, i32, i32 } %70, 0, !dbg !30
  %72 = extractvalue { i32, i32, i32, i32 } %70, 1, !dbg !30
  %73 = extractvalue { i32, i32, i32, i32 } %70, 2, !dbg !30
  %74 = extractvalue { i32, i32, i32, i32 } %70, 3, !dbg !30
  %75 = bitcast i32 %71 to float, !dbg !30
  %76 = bitcast i32 %72 to float, !dbg !30
  %77 = bitcast i32 %73 to float, !dbg !30
  %78 = bitcast i32 %74 to float, !dbg !30
  %79 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %59, i1 true) #4, !dbg !30
  %80 = extractvalue { i32, i32, i32, i32 } %79, 0, !dbg !30
  %81 = extractvalue { i32, i32, i32, i32 } %79, 1, !dbg !30
  %82 = extractvalue { i32, i32, i32, i32 } %79, 2, !dbg !30
  %83 = extractvalue { i32, i32, i32, i32 } %79, 3, !dbg !30
  %84 = bitcast i32 %80 to float, !dbg !30
  %85 = bitcast i32 %81 to float, !dbg !30
  %86 = bitcast i32 %82 to float, !dbg !30
  %87 = bitcast i32 %83 to float, !dbg !30
  %88 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %60, i1 true) #4, !dbg !30
  %89 = extractvalue { i32, i32, i32, i32 } %88, 0, !dbg !30
  %90 = extractvalue { i32, i32, i32, i32 } %88, 1, !dbg !30
  %91 = extractvalue { i32, i32, i32, i32 } %88, 2, !dbg !30
  %92 = extractvalue { i32, i32, i32, i32 } %88, 3, !dbg !30
  %93 = bitcast i32 %89 to float, !dbg !30
  %94 = bitcast i32 %90 to float, !dbg !30
  %95 = bitcast i32 %91 to float, !dbg !30
  %96 = bitcast i32 %92 to float, !dbg !30
  %97 = getelementptr float, ptr addrspace(1) %3, i64 %45, !dbg !31
  %98 = getelementptr float, ptr addrspace(1) %3, i64 %47, !dbg !31
  %99 = getelementptr float, ptr addrspace(1) %3, i64 %49, !dbg !31
  %100 = getelementptr float, ptr addrspace(1) %3, i64 %51, !dbg !31
  %101 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %97, i1 true) #4, !dbg !32
  %102 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %98, i1 true) #4, !dbg !32
  %103 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %99, i1 true) #4, !dbg !32
  %104 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %100, i1 true) #4, !dbg !32
  %105 = getelementptr float, ptr addrspace(1) %4, i64 %45, !dbg !33
  %106 = getelementptr float, ptr addrspace(1) %4, i64 %47, !dbg !33
  %107 = getelementptr float, ptr addrspace(1) %4, i64 %49, !dbg !33
  %108 = getelementptr float, ptr addrspace(1) %4, i64 %51, !dbg !33
  %109 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %105, i1 true) #4, !dbg !34
  %110 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %106, i1 true) #4, !dbg !34
  %111 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %107, i1 true) #4, !dbg !34
  %112 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %108, i1 true) #4, !dbg !34
  %113 = fadd float %66, 0x3EE4F8B580000000, !dbg !35
  %114 = fadd float %67, 0x3EE4F8B580000000, !dbg !35
  %115 = fadd float %68, 0x3EE4F8B580000000, !dbg !35
  %116 = fadd float %69, 0x3EE4F8B580000000, !dbg !35
  %117 = fadd float %75, 0x3EE4F8B580000000, !dbg !35
  %118 = fadd float %76, 0x3EE4F8B580000000, !dbg !35
  %119 = fadd float %77, 0x3EE4F8B580000000, !dbg !35
  %120 = fadd float %78, 0x3EE4F8B580000000, !dbg !35
  %121 = fadd float %84, 0x3EE4F8B580000000, !dbg !35
  %122 = fadd float %85, 0x3EE4F8B580000000, !dbg !35
  %123 = fadd float %86, 0x3EE4F8B580000000, !dbg !35
  %124 = fadd float %87, 0x3EE4F8B580000000, !dbg !35
  %125 = fadd float %93, 0x3EE4F8B580000000, !dbg !35
  %126 = fadd float %94, 0x3EE4F8B580000000, !dbg !35
  %127 = fadd float %95, 0x3EE4F8B580000000, !dbg !35
  %128 = fadd float %96, 0x3EE4F8B580000000, !dbg !35
  %129 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i = icmp eq i32 %129, 0, !dbg !36
  %130 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i = icmp eq i32 %130, 0, !dbg !36
  br i1 %.not.i, label %136, label %131, !dbg !36

131:                                              ; preds = %9
  br i1 %.not1.i, label %134, label %132, !dbg !36

132:                                              ; preds = %131
  %133 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %113) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

134:                                              ; preds = %131
  %135 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %113) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

136:                                              ; preds = %9
  br i1 %.not1.i, label %139, label %137, !dbg !36

137:                                              ; preds = %136
  %138 = tail call float @llvm.nvvm.sqrt.rn.f(float %113) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

139:                                              ; preds = %136
  %140 = tail call float @llvm.nvvm.sqrt.approx.f(float %113) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

__nv_sqrtf.exit:                                  ; preds = %132, %134, %137, %139
  %.0.i = phi float [ %133, %132 ], [ %135, %134 ], [ %138, %137 ], [ %140, %139 ], !dbg !36
  %141 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i3 = icmp eq i32 %141, 0, !dbg !36
  %142 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i6 = icmp eq i32 %142, 0, !dbg !36
  br i1 %.not.i3, label %148, label %143, !dbg !36

143:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i6, label %146, label %144, !dbg !36

144:                                              ; preds = %143
  %145 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %114) #4, !dbg !36
  br label %__nv_sqrtf.exit7, !dbg !36

146:                                              ; preds = %143
  %147 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %114) #4, !dbg !36
  br label %__nv_sqrtf.exit7, !dbg !36

148:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i6, label %151, label %149, !dbg !36

149:                                              ; preds = %148
  %150 = tail call float @llvm.nvvm.sqrt.rn.f(float %114) #4, !dbg !36
  br label %__nv_sqrtf.exit7, !dbg !36

151:                                              ; preds = %148
  %152 = tail call float @llvm.nvvm.sqrt.approx.f(float %114) #4, !dbg !36
  br label %__nv_sqrtf.exit7, !dbg !36

__nv_sqrtf.exit7:                                 ; preds = %144, %146, %149, %151
  %.0.i5 = phi float [ %145, %144 ], [ %147, %146 ], [ %150, %149 ], [ %152, %151 ], !dbg !36
  %153 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i8 = icmp eq i32 %153, 0, !dbg !36
  %154 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i11 = icmp eq i32 %154, 0, !dbg !36
  br i1 %.not.i8, label %160, label %155, !dbg !36

155:                                              ; preds = %__nv_sqrtf.exit7
  br i1 %.not1.i11, label %158, label %156, !dbg !36

156:                                              ; preds = %155
  %157 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %115) #4, !dbg !36
  br label %__nv_sqrtf.exit12, !dbg !36

158:                                              ; preds = %155
  %159 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %115) #4, !dbg !36
  br label %__nv_sqrtf.exit12, !dbg !36

160:                                              ; preds = %__nv_sqrtf.exit7
  br i1 %.not1.i11, label %163, label %161, !dbg !36

161:                                              ; preds = %160
  %162 = tail call float @llvm.nvvm.sqrt.rn.f(float %115) #4, !dbg !36
  br label %__nv_sqrtf.exit12, !dbg !36

163:                                              ; preds = %160
  %164 = tail call float @llvm.nvvm.sqrt.approx.f(float %115) #4, !dbg !36
  br label %__nv_sqrtf.exit12, !dbg !36

__nv_sqrtf.exit12:                                ; preds = %156, %158, %161, %163
  %.0.i10 = phi float [ %157, %156 ], [ %159, %158 ], [ %162, %161 ], [ %164, %163 ], !dbg !36
  %165 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i13 = icmp eq i32 %165, 0, !dbg !36
  %166 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i16 = icmp eq i32 %166, 0, !dbg !36
  br i1 %.not.i13, label %172, label %167, !dbg !36

167:                                              ; preds = %__nv_sqrtf.exit12
  br i1 %.not1.i16, label %170, label %168, !dbg !36

168:                                              ; preds = %167
  %169 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %116) #4, !dbg !36
  br label %__nv_sqrtf.exit17, !dbg !36

170:                                              ; preds = %167
  %171 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %116) #4, !dbg !36
  br label %__nv_sqrtf.exit17, !dbg !36

172:                                              ; preds = %__nv_sqrtf.exit12
  br i1 %.not1.i16, label %175, label %173, !dbg !36

173:                                              ; preds = %172
  %174 = tail call float @llvm.nvvm.sqrt.rn.f(float %116) #4, !dbg !36
  br label %__nv_sqrtf.exit17, !dbg !36

175:                                              ; preds = %172
  %176 = tail call float @llvm.nvvm.sqrt.approx.f(float %116) #4, !dbg !36
  br label %__nv_sqrtf.exit17, !dbg !36

__nv_sqrtf.exit17:                                ; preds = %168, %170, %173, %175
  %.0.i15 = phi float [ %169, %168 ], [ %171, %170 ], [ %174, %173 ], [ %176, %175 ], !dbg !36
  %177 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i18 = icmp eq i32 %177, 0, !dbg !36
  %178 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i21 = icmp eq i32 %178, 0, !dbg !36
  br i1 %.not.i18, label %184, label %179, !dbg !36

179:                                              ; preds = %__nv_sqrtf.exit17
  br i1 %.not1.i21, label %182, label %180, !dbg !36

180:                                              ; preds = %179
  %181 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %117) #4, !dbg !36
  br label %__nv_sqrtf.exit22, !dbg !36

182:                                              ; preds = %179
  %183 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %117) #4, !dbg !36
  br label %__nv_sqrtf.exit22, !dbg !36

184:                                              ; preds = %__nv_sqrtf.exit17
  br i1 %.not1.i21, label %187, label %185, !dbg !36

185:                                              ; preds = %184
  %186 = tail call float @llvm.nvvm.sqrt.rn.f(float %117) #4, !dbg !36
  br label %__nv_sqrtf.exit22, !dbg !36

187:                                              ; preds = %184
  %188 = tail call float @llvm.nvvm.sqrt.approx.f(float %117) #4, !dbg !36
  br label %__nv_sqrtf.exit22, !dbg !36

__nv_sqrtf.exit22:                                ; preds = %180, %182, %185, %187
  %.0.i20 = phi float [ %181, %180 ], [ %183, %182 ], [ %186, %185 ], [ %188, %187 ], !dbg !36
  %189 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i23 = icmp eq i32 %189, 0, !dbg !36
  %190 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i26 = icmp eq i32 %190, 0, !dbg !36
  br i1 %.not.i23, label %196, label %191, !dbg !36

191:                                              ; preds = %__nv_sqrtf.exit22
  br i1 %.not1.i26, label %194, label %192, !dbg !36

192:                                              ; preds = %191
  %193 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %118) #4, !dbg !36
  br label %__nv_sqrtf.exit27, !dbg !36

194:                                              ; preds = %191
  %195 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %118) #4, !dbg !36
  br label %__nv_sqrtf.exit27, !dbg !36

196:                                              ; preds = %__nv_sqrtf.exit22
  br i1 %.not1.i26, label %199, label %197, !dbg !36

197:                                              ; preds = %196
  %198 = tail call float @llvm.nvvm.sqrt.rn.f(float %118) #4, !dbg !36
  br label %__nv_sqrtf.exit27, !dbg !36

199:                                              ; preds = %196
  %200 = tail call float @llvm.nvvm.sqrt.approx.f(float %118) #4, !dbg !36
  br label %__nv_sqrtf.exit27, !dbg !36

__nv_sqrtf.exit27:                                ; preds = %192, %194, %197, %199
  %.0.i25 = phi float [ %193, %192 ], [ %195, %194 ], [ %198, %197 ], [ %200, %199 ], !dbg !36
  %201 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i28 = icmp eq i32 %201, 0, !dbg !36
  %202 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i31 = icmp eq i32 %202, 0, !dbg !36
  br i1 %.not.i28, label %208, label %203, !dbg !36

203:                                              ; preds = %__nv_sqrtf.exit27
  br i1 %.not1.i31, label %206, label %204, !dbg !36

204:                                              ; preds = %203
  %205 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %119) #4, !dbg !36
  br label %__nv_sqrtf.exit32, !dbg !36

206:                                              ; preds = %203
  %207 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %119) #4, !dbg !36
  br label %__nv_sqrtf.exit32, !dbg !36

208:                                              ; preds = %__nv_sqrtf.exit27
  br i1 %.not1.i31, label %211, label %209, !dbg !36

209:                                              ; preds = %208
  %210 = tail call float @llvm.nvvm.sqrt.rn.f(float %119) #4, !dbg !36
  br label %__nv_sqrtf.exit32, !dbg !36

211:                                              ; preds = %208
  %212 = tail call float @llvm.nvvm.sqrt.approx.f(float %119) #4, !dbg !36
  br label %__nv_sqrtf.exit32, !dbg !36

__nv_sqrtf.exit32:                                ; preds = %204, %206, %209, %211
  %.0.i30 = phi float [ %205, %204 ], [ %207, %206 ], [ %210, %209 ], [ %212, %211 ], !dbg !36
  %213 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i33 = icmp eq i32 %213, 0, !dbg !36
  %214 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i36 = icmp eq i32 %214, 0, !dbg !36
  br i1 %.not.i33, label %220, label %215, !dbg !36

215:                                              ; preds = %__nv_sqrtf.exit32
  br i1 %.not1.i36, label %218, label %216, !dbg !36

216:                                              ; preds = %215
  %217 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %120) #4, !dbg !36
  br label %__nv_sqrtf.exit37, !dbg !36

218:                                              ; preds = %215
  %219 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %120) #4, !dbg !36
  br label %__nv_sqrtf.exit37, !dbg !36

220:                                              ; preds = %__nv_sqrtf.exit32
  br i1 %.not1.i36, label %223, label %221, !dbg !36

221:                                              ; preds = %220
  %222 = tail call float @llvm.nvvm.sqrt.rn.f(float %120) #4, !dbg !36
  br label %__nv_sqrtf.exit37, !dbg !36

223:                                              ; preds = %220
  %224 = tail call float @llvm.nvvm.sqrt.approx.f(float %120) #4, !dbg !36
  br label %__nv_sqrtf.exit37, !dbg !36

__nv_sqrtf.exit37:                                ; preds = %216, %218, %221, %223
  %.0.i35 = phi float [ %217, %216 ], [ %219, %218 ], [ %222, %221 ], [ %224, %223 ], !dbg !36
  %225 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i38 = icmp eq i32 %225, 0, !dbg !36
  %226 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i41 = icmp eq i32 %226, 0, !dbg !36
  br i1 %.not.i38, label %232, label %227, !dbg !36

227:                                              ; preds = %__nv_sqrtf.exit37
  br i1 %.not1.i41, label %230, label %228, !dbg !36

228:                                              ; preds = %227
  %229 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %121) #4, !dbg !36
  br label %__nv_sqrtf.exit42, !dbg !36

230:                                              ; preds = %227
  %231 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %121) #4, !dbg !36
  br label %__nv_sqrtf.exit42, !dbg !36

232:                                              ; preds = %__nv_sqrtf.exit37
  br i1 %.not1.i41, label %235, label %233, !dbg !36

233:                                              ; preds = %232
  %234 = tail call float @llvm.nvvm.sqrt.rn.f(float %121) #4, !dbg !36
  br label %__nv_sqrtf.exit42, !dbg !36

235:                                              ; preds = %232
  %236 = tail call float @llvm.nvvm.sqrt.approx.f(float %121) #4, !dbg !36
  br label %__nv_sqrtf.exit42, !dbg !36

__nv_sqrtf.exit42:                                ; preds = %228, %230, %233, %235
  %.0.i40 = phi float [ %229, %228 ], [ %231, %230 ], [ %234, %233 ], [ %236, %235 ], !dbg !36
  %237 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i43 = icmp eq i32 %237, 0, !dbg !36
  %238 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i46 = icmp eq i32 %238, 0, !dbg !36
  br i1 %.not.i43, label %244, label %239, !dbg !36

239:                                              ; preds = %__nv_sqrtf.exit42
  br i1 %.not1.i46, label %242, label %240, !dbg !36

240:                                              ; preds = %239
  %241 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %122) #4, !dbg !36
  br label %__nv_sqrtf.exit47, !dbg !36

242:                                              ; preds = %239
  %243 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %122) #4, !dbg !36
  br label %__nv_sqrtf.exit47, !dbg !36

244:                                              ; preds = %__nv_sqrtf.exit42
  br i1 %.not1.i46, label %247, label %245, !dbg !36

245:                                              ; preds = %244
  %246 = tail call float @llvm.nvvm.sqrt.rn.f(float %122) #4, !dbg !36
  br label %__nv_sqrtf.exit47, !dbg !36

247:                                              ; preds = %244
  %248 = tail call float @llvm.nvvm.sqrt.approx.f(float %122) #4, !dbg !36
  br label %__nv_sqrtf.exit47, !dbg !36

__nv_sqrtf.exit47:                                ; preds = %240, %242, %245, %247
  %.0.i45 = phi float [ %241, %240 ], [ %243, %242 ], [ %246, %245 ], [ %248, %247 ], !dbg !36
  %249 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i48 = icmp eq i32 %249, 0, !dbg !36
  %250 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i51 = icmp eq i32 %250, 0, !dbg !36
  br i1 %.not.i48, label %256, label %251, !dbg !36

251:                                              ; preds = %__nv_sqrtf.exit47
  br i1 %.not1.i51, label %254, label %252, !dbg !36

252:                                              ; preds = %251
  %253 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %123) #4, !dbg !36
  br label %__nv_sqrtf.exit52, !dbg !36

254:                                              ; preds = %251
  %255 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %123) #4, !dbg !36
  br label %__nv_sqrtf.exit52, !dbg !36

256:                                              ; preds = %__nv_sqrtf.exit47
  br i1 %.not1.i51, label %259, label %257, !dbg !36

257:                                              ; preds = %256
  %258 = tail call float @llvm.nvvm.sqrt.rn.f(float %123) #4, !dbg !36
  br label %__nv_sqrtf.exit52, !dbg !36

259:                                              ; preds = %256
  %260 = tail call float @llvm.nvvm.sqrt.approx.f(float %123) #4, !dbg !36
  br label %__nv_sqrtf.exit52, !dbg !36

__nv_sqrtf.exit52:                                ; preds = %252, %254, %257, %259
  %.0.i50 = phi float [ %253, %252 ], [ %255, %254 ], [ %258, %257 ], [ %260, %259 ], !dbg !36
  %261 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i53 = icmp eq i32 %261, 0, !dbg !36
  %262 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i56 = icmp eq i32 %262, 0, !dbg !36
  br i1 %.not.i53, label %268, label %263, !dbg !36

263:                                              ; preds = %__nv_sqrtf.exit52
  br i1 %.not1.i56, label %266, label %264, !dbg !36

264:                                              ; preds = %263
  %265 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %124) #4, !dbg !36
  br label %__nv_sqrtf.exit57, !dbg !36

266:                                              ; preds = %263
  %267 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %124) #4, !dbg !36
  br label %__nv_sqrtf.exit57, !dbg !36

268:                                              ; preds = %__nv_sqrtf.exit52
  br i1 %.not1.i56, label %271, label %269, !dbg !36

269:                                              ; preds = %268
  %270 = tail call float @llvm.nvvm.sqrt.rn.f(float %124) #4, !dbg !36
  br label %__nv_sqrtf.exit57, !dbg !36

271:                                              ; preds = %268
  %272 = tail call float @llvm.nvvm.sqrt.approx.f(float %124) #4, !dbg !36
  br label %__nv_sqrtf.exit57, !dbg !36

__nv_sqrtf.exit57:                                ; preds = %264, %266, %269, %271
  %.0.i55 = phi float [ %265, %264 ], [ %267, %266 ], [ %270, %269 ], [ %272, %271 ], !dbg !36
  %273 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i58 = icmp eq i32 %273, 0, !dbg !36
  %274 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i61 = icmp eq i32 %274, 0, !dbg !36
  br i1 %.not.i58, label %280, label %275, !dbg !36

275:                                              ; preds = %__nv_sqrtf.exit57
  br i1 %.not1.i61, label %278, label %276, !dbg !36

276:                                              ; preds = %275
  %277 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %125) #4, !dbg !36
  br label %__nv_sqrtf.exit62, !dbg !36

278:                                              ; preds = %275
  %279 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %125) #4, !dbg !36
  br label %__nv_sqrtf.exit62, !dbg !36

280:                                              ; preds = %__nv_sqrtf.exit57
  br i1 %.not1.i61, label %283, label %281, !dbg !36

281:                                              ; preds = %280
  %282 = tail call float @llvm.nvvm.sqrt.rn.f(float %125) #4, !dbg !36
  br label %__nv_sqrtf.exit62, !dbg !36

283:                                              ; preds = %280
  %284 = tail call float @llvm.nvvm.sqrt.approx.f(float %125) #4, !dbg !36
  br label %__nv_sqrtf.exit62, !dbg !36

__nv_sqrtf.exit62:                                ; preds = %276, %278, %281, %283
  %.0.i60 = phi float [ %277, %276 ], [ %279, %278 ], [ %282, %281 ], [ %284, %283 ], !dbg !36
  %285 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i63 = icmp eq i32 %285, 0, !dbg !36
  %286 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i66 = icmp eq i32 %286, 0, !dbg !36
  br i1 %.not.i63, label %292, label %287, !dbg !36

287:                                              ; preds = %__nv_sqrtf.exit62
  br i1 %.not1.i66, label %290, label %288, !dbg !36

288:                                              ; preds = %287
  %289 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %126) #4, !dbg !36
  br label %__nv_sqrtf.exit67, !dbg !36

290:                                              ; preds = %287
  %291 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %126) #4, !dbg !36
  br label %__nv_sqrtf.exit67, !dbg !36

292:                                              ; preds = %__nv_sqrtf.exit62
  br i1 %.not1.i66, label %295, label %293, !dbg !36

293:                                              ; preds = %292
  %294 = tail call float @llvm.nvvm.sqrt.rn.f(float %126) #4, !dbg !36
  br label %__nv_sqrtf.exit67, !dbg !36

295:                                              ; preds = %292
  %296 = tail call float @llvm.nvvm.sqrt.approx.f(float %126) #4, !dbg !36
  br label %__nv_sqrtf.exit67, !dbg !36

__nv_sqrtf.exit67:                                ; preds = %288, %290, %293, %295
  %.0.i65 = phi float [ %289, %288 ], [ %291, %290 ], [ %294, %293 ], [ %296, %295 ], !dbg !36
  %297 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i68 = icmp eq i32 %297, 0, !dbg !36
  %298 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i71 = icmp eq i32 %298, 0, !dbg !36
  br i1 %.not.i68, label %304, label %299, !dbg !36

299:                                              ; preds = %__nv_sqrtf.exit67
  br i1 %.not1.i71, label %302, label %300, !dbg !36

300:                                              ; preds = %299
  %301 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %127) #4, !dbg !36
  br label %__nv_sqrtf.exit72, !dbg !36

302:                                              ; preds = %299
  %303 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %127) #4, !dbg !36
  br label %__nv_sqrtf.exit72, !dbg !36

304:                                              ; preds = %__nv_sqrtf.exit67
  br i1 %.not1.i71, label %307, label %305, !dbg !36

305:                                              ; preds = %304
  %306 = tail call float @llvm.nvvm.sqrt.rn.f(float %127) #4, !dbg !36
  br label %__nv_sqrtf.exit72, !dbg !36

307:                                              ; preds = %304
  %308 = tail call float @llvm.nvvm.sqrt.approx.f(float %127) #4, !dbg !36
  br label %__nv_sqrtf.exit72, !dbg !36

__nv_sqrtf.exit72:                                ; preds = %300, %302, %305, %307
  %.0.i70 = phi float [ %301, %300 ], [ %303, %302 ], [ %306, %305 ], [ %308, %307 ], !dbg !36
  %309 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i73 = icmp eq i32 %309, 0, !dbg !36
  %310 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i76 = icmp eq i32 %310, 0, !dbg !36
  br i1 %.not.i73, label %316, label %311, !dbg !36

311:                                              ; preds = %__nv_sqrtf.exit72
  br i1 %.not1.i76, label %314, label %312, !dbg !36

312:                                              ; preds = %311
  %313 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %128) #4, !dbg !36
  br label %__nv_sqrtf.exit77, !dbg !36

314:                                              ; preds = %311
  %315 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %128) #4, !dbg !36
  br label %__nv_sqrtf.exit77, !dbg !36

316:                                              ; preds = %__nv_sqrtf.exit72
  br i1 %.not1.i76, label %319, label %317, !dbg !36

317:                                              ; preds = %316
  %318 = tail call float @llvm.nvvm.sqrt.rn.f(float %128) #4, !dbg !36
  br label %__nv_sqrtf.exit77, !dbg !36

319:                                              ; preds = %316
  %320 = tail call float @llvm.nvvm.sqrt.approx.f(float %128) #4, !dbg !36
  br label %__nv_sqrtf.exit77, !dbg !36

__nv_sqrtf.exit77:                                ; preds = %312, %314, %317, %319
  %.0.i75 = phi float [ %313, %312 ], [ %315, %314 ], [ %318, %317 ], [ %320, %319 ], !dbg !36
  %321 = extractvalue { i32, i32, i32, i32 } %44, 3, !dbg !26
  %322 = extractvalue { i32, i32, i32, i32 } %56, 3, !dbg !28
  %323 = extractvalue { i32, i32, i32, i32 } %44, 2, !dbg !26
  %324 = extractvalue { i32, i32, i32, i32 } %56, 2, !dbg !28
  %325 = extractvalue { i32, i32, i32, i32 } %44, 1, !dbg !26
  %326 = extractvalue { i32, i32, i32, i32 } %56, 1, !dbg !28
  %327 = extractvalue { i32, i32, i32, i32 } %44, 0, !dbg !26
  %328 = extractvalue { i32, i32, i32, i32 } %56, 0, !dbg !28
  %329 = extractvalue { i32, i32, i32, i32 } %43, 3, !dbg !26
  %330 = extractvalue { i32, i32, i32, i32 } %55, 3, !dbg !28
  %331 = extractvalue { i32, i32, i32, i32 } %43, 2, !dbg !26
  %332 = extractvalue { i32, i32, i32, i32 } %55, 2, !dbg !28
  %333 = extractvalue { i32, i32, i32, i32 } %43, 1, !dbg !26
  %334 = extractvalue { i32, i32, i32, i32 } %55, 1, !dbg !28
  %335 = extractvalue { i32, i32, i32, i32 } %43, 0, !dbg !26
  %336 = extractvalue { i32, i32, i32, i32 } %55, 0, !dbg !28
  %337 = extractvalue { i32, i32, i32, i32 } %42, 3, !dbg !26
  %338 = extractvalue { i32, i32, i32, i32 } %54, 3, !dbg !28
  %339 = extractvalue { i32, i32, i32, i32 } %42, 2, !dbg !26
  %340 = extractvalue { i32, i32, i32, i32 } %54, 2, !dbg !28
  %341 = extractvalue { i32, i32, i32, i32 } %42, 1, !dbg !26
  %342 = extractvalue { i32, i32, i32, i32 } %54, 1, !dbg !28
  %343 = extractvalue { i32, i32, i32, i32 } %42, 0, !dbg !26
  %344 = extractvalue { i32, i32, i32, i32 } %54, 0, !dbg !28
  %345 = extractvalue { i32, i32, i32, i32 } %41, 3, !dbg !26
  %346 = extractvalue { i32, i32, i32, i32 } %53, 3, !dbg !28
  %347 = extractvalue { i32, i32, i32, i32 } %41, 2, !dbg !26
  %348 = extractvalue { i32, i32, i32, i32 } %53, 2, !dbg !28
  %349 = extractvalue { i32, i32, i32, i32 } %41, 1, !dbg !26
  %350 = extractvalue { i32, i32, i32, i32 } %53, 1, !dbg !28
  %351 = extractvalue { i32, i32, i32, i32 } %41, 0, !dbg !26
  %352 = extractvalue { i32, i32, i32, i32 } %53, 0, !dbg !28
  %353 = extractvalue { i32, i32, i32, i32 } %112, 3, !dbg !34
  %354 = extractvalue { i32, i32, i32, i32 } %112, 2, !dbg !34
  %355 = extractvalue { i32, i32, i32, i32 } %112, 1, !dbg !34
  %356 = extractvalue { i32, i32, i32, i32 } %112, 0, !dbg !34
  %357 = extractvalue { i32, i32, i32, i32 } %111, 3, !dbg !34
  %358 = extractvalue { i32, i32, i32, i32 } %111, 2, !dbg !34
  %359 = extractvalue { i32, i32, i32, i32 } %111, 1, !dbg !34
  %360 = extractvalue { i32, i32, i32, i32 } %111, 0, !dbg !34
  %361 = extractvalue { i32, i32, i32, i32 } %110, 3, !dbg !34
  %362 = extractvalue { i32, i32, i32, i32 } %110, 2, !dbg !34
  %363 = extractvalue { i32, i32, i32, i32 } %110, 1, !dbg !34
  %364 = extractvalue { i32, i32, i32, i32 } %110, 0, !dbg !34
  %365 = extractvalue { i32, i32, i32, i32 } %109, 3, !dbg !34
  %366 = extractvalue { i32, i32, i32, i32 } %109, 2, !dbg !34
  %367 = extractvalue { i32, i32, i32, i32 } %109, 1, !dbg !34
  %368 = extractvalue { i32, i32, i32, i32 } %109, 0, !dbg !34
  %369 = extractvalue { i32, i32, i32, i32 } %104, 3, !dbg !32
  %370 = extractvalue { i32, i32, i32, i32 } %104, 2, !dbg !32
  %371 = extractvalue { i32, i32, i32, i32 } %104, 1, !dbg !32
  %372 = extractvalue { i32, i32, i32, i32 } %104, 0, !dbg !32
  %373 = extractvalue { i32, i32, i32, i32 } %103, 3, !dbg !32
  %374 = extractvalue { i32, i32, i32, i32 } %103, 2, !dbg !32
  %375 = extractvalue { i32, i32, i32, i32 } %103, 1, !dbg !32
  %376 = extractvalue { i32, i32, i32, i32 } %103, 0, !dbg !32
  %377 = extractvalue { i32, i32, i32, i32 } %102, 3, !dbg !32
  %378 = extractvalue { i32, i32, i32, i32 } %102, 2, !dbg !32
  %379 = extractvalue { i32, i32, i32, i32 } %102, 1, !dbg !32
  %380 = extractvalue { i32, i32, i32, i32 } %102, 0, !dbg !32
  %381 = extractvalue { i32, i32, i32, i32 } %101, 3, !dbg !32
  %382 = extractvalue { i32, i32, i32, i32 } %101, 2, !dbg !32
  %383 = extractvalue { i32, i32, i32, i32 } %101, 1, !dbg !32
  %384 = extractvalue { i32, i32, i32, i32 } %101, 0, !dbg !32
  %385 = shl i32 %12, 2, !dbg !16
  %386 = and i32 %385, 252, !dbg !16
  %387 = or disjoint i32 %17, %386, !dbg !17
  %388 = icmp slt i32 %387, 256, !dbg !18
  %.lobit1 = lshr i32 %12, 6, !dbg !12
  %389 = and i32 %.lobit1, 3, !dbg !12
  %390 = or disjoint i32 %389, 12, !dbg !12
  %391 = or disjoint i32 %11, %390, !dbg !13
  %392 = or disjoint i32 %389, 8, !dbg !12
  %393 = or disjoint i32 %11, %392, !dbg !13
  %394 = or disjoint i32 %389, 4, !dbg !12
  %395 = or disjoint i32 %11, %394, !dbg !13
  %396 = or disjoint i32 %11, %389, !dbg !13
  %397 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !37
  %398 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i5) #4, !dbg !37
  %399 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i10) #4, !dbg !37
  %400 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i15) #4, !dbg !37
  %401 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i20) #4, !dbg !37
  %402 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i25) #4, !dbg !37
  %403 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i30) #4, !dbg !37
  %404 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i35) #4, !dbg !37
  %405 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i40) #4, !dbg !37
  %406 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i45) #4, !dbg !37
  %407 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i50) #4, !dbg !37
  %408 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i55) #4, !dbg !37
  %409 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i60) #4, !dbg !37
  %410 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i65) #4, !dbg !37
  %411 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i70) #4, !dbg !37
  %412 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i75) #4, !dbg !37
  %413 = shl i32 %396, 8, !dbg !38
  %414 = shl i32 %395, 8, !dbg !38
  %415 = shl i32 %393, 8, !dbg !38
  %416 = shl i32 %391, 8, !dbg !38
  %417 = add i32 %387, %413, !dbg !39
  %418 = add i32 %387, %414, !dbg !39
  %419 = add i32 %387, %415, !dbg !39
  %420 = add i32 %387, %416, !dbg !39
  %421 = sext i32 %417 to i64, !dbg !40
  %422 = getelementptr float, ptr addrspace(1) %5, i64 %421, !dbg !40
  %423 = sext i32 %418 to i64, !dbg !40
  %424 = getelementptr float, ptr addrspace(1) %5, i64 %423, !dbg !40
  %425 = sext i32 %419 to i64, !dbg !40
  %426 = getelementptr float, ptr addrspace(1) %5, i64 %425, !dbg !40
  %427 = sext i32 %420 to i64, !dbg !40
  %428 = getelementptr float, ptr addrspace(1) %5, i64 %427, !dbg !40
  %429 = and i32 %385, 1020, !dbg !41
  %430 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %18, !dbg !41
  %431 = getelementptr inbounds i8, ptr addrspace(3) %430, i32 1028, !dbg !41
  %432 = getelementptr inbounds i8, ptr addrspace(3) %430, i32 2056, !dbg !41
  %433 = getelementptr inbounds i8, ptr addrspace(3) %430, i32 3084, !dbg !41
  %434 = getelementptr inbounds i8, ptr addrspace(3) %430, i32 4112, !dbg !41
  %435 = getelementptr inbounds i8, ptr addrspace(3) %430, i32 5140, !dbg !41
  %436 = getelementptr inbounds i8, ptr addrspace(3) %430, i32 6168, !dbg !41
  %437 = getelementptr inbounds i8, ptr addrspace(3) %430, i32 7196, !dbg !41
  %438 = getelementptr inbounds i8, ptr addrspace(3) %430, i32 8224, !dbg !41
  %439 = getelementptr inbounds i8, ptr addrspace(3) %430, i32 9252, !dbg !41
  %440 = getelementptr inbounds i8, ptr addrspace(3) %430, i32 10280, !dbg !41
  %441 = getelementptr inbounds i8, ptr addrspace(3) %430, i32 11308, !dbg !41
  %442 = getelementptr inbounds i8, ptr addrspace(3) %430, i32 12336, !dbg !41
  %443 = getelementptr inbounds i8, ptr addrspace(3) %430, i32 13364, !dbg !41
  %444 = getelementptr inbounds i8, ptr addrspace(3) %430, i32 14392, !dbg !41
  %445 = getelementptr inbounds i8, ptr addrspace(3) %430, i32 15420, !dbg !41
  %446 = lshr i32 %429, 8, !dbg !41
  %447 = getelementptr float, ptr addrspace(3) @global_smem, i32 %446, !dbg !41
  %448 = getelementptr float, ptr addrspace(3) %447, i32 %429, !dbg !41
  %449 = or disjoint i32 %429, 1, !dbg !41
  %450 = getelementptr float, ptr addrspace(3) %447, i32 %449, !dbg !41
  %451 = or disjoint i32 %429, 2, !dbg !41
  %452 = getelementptr float, ptr addrspace(3) %447, i32 %451, !dbg !41
  %453 = or disjoint i32 %429, 3, !dbg !41
  %454 = getelementptr float, ptr addrspace(3) %447, i32 %453, !dbg !41
  %455 = or disjoint i32 %429, 1024, !dbg !41
  %456 = lshr i32 %455, 8, !dbg !41
  %457 = getelementptr float, ptr addrspace(3) @global_smem, i32 %456, !dbg !41
  %458 = getelementptr float, ptr addrspace(3) %457, i32 %455, !dbg !41
  %459 = or disjoint i32 %429, 1025, !dbg !41
  %460 = lshr i32 %459, 8, !dbg !41
  %461 = getelementptr float, ptr addrspace(3) @global_smem, i32 %460, !dbg !41
  %462 = getelementptr float, ptr addrspace(3) %461, i32 %459, !dbg !41
  %463 = or disjoint i32 %429, 1026, !dbg !41
  %464 = lshr i32 %463, 8, !dbg !41
  %465 = getelementptr float, ptr addrspace(3) @global_smem, i32 %464, !dbg !41
  %466 = getelementptr float, ptr addrspace(3) %465, i32 %463, !dbg !41
  %467 = or disjoint i32 %429, 1027, !dbg !41
  %468 = lshr i32 %467, 8, !dbg !41
  %469 = getelementptr float, ptr addrspace(3) @global_smem, i32 %468, !dbg !41
  %470 = getelementptr float, ptr addrspace(3) %469, i32 %467, !dbg !41
  %471 = or disjoint i32 %429, 2048, !dbg !41
  %472 = lshr i32 %471, 8, !dbg !41
  %473 = getelementptr float, ptr addrspace(3) @global_smem, i32 %472, !dbg !41
  %474 = getelementptr float, ptr addrspace(3) %473, i32 %471, !dbg !41
  %475 = or disjoint i32 %429, 2049, !dbg !41
  %476 = lshr i32 %475, 8, !dbg !41
  %477 = getelementptr float, ptr addrspace(3) @global_smem, i32 %476, !dbg !41
  %478 = getelementptr float, ptr addrspace(3) %477, i32 %475, !dbg !41
  %479 = or disjoint i32 %429, 2050, !dbg !41
  %480 = lshr i32 %479, 8, !dbg !41
  %481 = getelementptr float, ptr addrspace(3) @global_smem, i32 %480, !dbg !41
  %482 = getelementptr float, ptr addrspace(3) %481, i32 %479, !dbg !41
  %483 = or disjoint i32 %429, 2051, !dbg !41
  %484 = lshr i32 %483, 8, !dbg !41
  %485 = getelementptr float, ptr addrspace(3) @global_smem, i32 %484, !dbg !41
  %486 = getelementptr float, ptr addrspace(3) %485, i32 %483, !dbg !41
  %487 = or disjoint i32 %429, 3072, !dbg !41
  %488 = lshr i32 %487, 8, !dbg !41
  %489 = getelementptr float, ptr addrspace(3) @global_smem, i32 %488, !dbg !41
  %490 = getelementptr float, ptr addrspace(3) %489, i32 %487, !dbg !41
  %491 = or disjoint i32 %429, 3073, !dbg !41
  %492 = lshr i32 %491, 8, !dbg !41
  %493 = getelementptr float, ptr addrspace(3) @global_smem, i32 %492, !dbg !41
  %494 = getelementptr float, ptr addrspace(3) %493, i32 %491, !dbg !41
  %495 = or disjoint i32 %429, 3074, !dbg !41
  %496 = lshr i32 %495, 8, !dbg !41
  %497 = getelementptr float, ptr addrspace(3) @global_smem, i32 %496, !dbg !41
  %498 = getelementptr float, ptr addrspace(3) %497, i32 %495, !dbg !41
  %499 = or disjoint i32 %429, 3075, !dbg !41
  %500 = lshr i32 %499, 8, !dbg !41
  %501 = getelementptr float, ptr addrspace(3) @global_smem, i32 %500, !dbg !41
  %502 = getelementptr float, ptr addrspace(3) %501, i32 %499, !dbg !41
  %503 = getelementptr i1, ptr addrspace(1) %6, i64 %33, !dbg !42
  %504 = insertelement <4 x i32> poison, i32 %351, i64 0, !dbg !26
  %505 = insertelement <4 x i32> %504, i32 %349, i64 1, !dbg !26
  %506 = insertelement <4 x i32> %505, i32 %347, i64 2, !dbg !26
  %507 = insertelement <4 x i32> %506, i32 %345, i64 3, !dbg !26
  %508 = bitcast <4 x i32> %507 to <4 x float>, !dbg !26
  %509 = insertelement <4 x i32> poison, i32 %352, i64 0, !dbg !28
  %510 = insertelement <4 x i32> %509, i32 %350, i64 1, !dbg !28
  %511 = insertelement <4 x i32> %510, i32 %348, i64 2, !dbg !28
  %512 = insertelement <4 x i32> %511, i32 %346, i64 3, !dbg !28
  %513 = bitcast <4 x i32> %512 to <4 x float>, !dbg !28
  %514 = fsub <4 x float> %508, %513, !dbg !43
  %515 = insertelement <4 x i32> poison, i32 %368, i64 0, !dbg !34
  %516 = insertelement <4 x i32> %515, i32 %367, i64 1, !dbg !34
  %517 = insertelement <4 x i32> %516, i32 %366, i64 2, !dbg !34
  %518 = insertelement <4 x i32> %517, i32 %365, i64 3, !dbg !34
  %519 = bitcast <4 x i32> %518 to <4 x float>, !dbg !34
  %520 = insertelement <4 x i32> poison, i32 %384, i64 0, !dbg !32
  %521 = insertelement <4 x i32> %520, i32 %383, i64 1, !dbg !32
  %522 = insertelement <4 x i32> %521, i32 %382, i64 2, !dbg !32
  %523 = insertelement <4 x i32> %522, i32 %381, i64 3, !dbg !32
  %524 = bitcast <4 x i32> %523 to <4 x float>, !dbg !32
  %525 = insertelement <4 x float> poison, float %397, i64 0, !dbg !44
  %526 = insertelement <4 x float> %525, float %398, i64 1, !dbg !44
  %527 = insertelement <4 x float> %526, float %399, i64 2, !dbg !44
  %528 = insertelement <4 x float> %527, float %400, i64 3, !dbg !44
  %529 = fmul <4 x float> %514, %528, !dbg !44
  %530 = fmul <4 x float> %529, %524, !dbg !45
  %531 = fadd <4 x float> %530, %519, !dbg !46
  %532 = fcmp olt <4 x float> %531, zeroinitializer, !dbg !47
  %533 = select <4 x i1> %532, <4 x float> zeroinitializer, <4 x float> %531, !dbg !51
  %534 = fcmp ole <4 x float> %533, zeroinitializer, !dbg !52
  %535 = extractelement <4 x float> %533, i64 0, !dbg !41
  %536 = bitcast float %535 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %430, <1 x i32> %536, i1 true) #4, !dbg !41
  %537 = extractelement <4 x float> %533, i64 1, !dbg !41
  %538 = bitcast float %537 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %431, <1 x i32> %538, i1 true) #4, !dbg !41
  %539 = extractelement <4 x float> %533, i64 2, !dbg !41
  %540 = bitcast float %539 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %432, <1 x i32> %540, i1 true) #4, !dbg !41
  %541 = extractelement <4 x float> %533, i64 3, !dbg !41
  %542 = bitcast float %541 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %433, <1 x i32> %542, i1 true) #4, !dbg !41
  %543 = insertelement <4 x i32> poison, i32 %343, i64 0, !dbg !26
  %544 = insertelement <4 x i32> %543, i32 %341, i64 1, !dbg !26
  %545 = insertelement <4 x i32> %544, i32 %339, i64 2, !dbg !26
  %546 = insertelement <4 x i32> %545, i32 %337, i64 3, !dbg !26
  %547 = bitcast <4 x i32> %546 to <4 x float>, !dbg !26
  %548 = insertelement <4 x i32> poison, i32 %344, i64 0, !dbg !28
  %549 = insertelement <4 x i32> %548, i32 %342, i64 1, !dbg !28
  %550 = insertelement <4 x i32> %549, i32 %340, i64 2, !dbg !28
  %551 = insertelement <4 x i32> %550, i32 %338, i64 3, !dbg !28
  %552 = bitcast <4 x i32> %551 to <4 x float>, !dbg !28
  %553 = fsub <4 x float> %547, %552, !dbg !43
  %554 = insertelement <4 x i32> poison, i32 %364, i64 0, !dbg !34
  %555 = insertelement <4 x i32> %554, i32 %363, i64 1, !dbg !34
  %556 = insertelement <4 x i32> %555, i32 %362, i64 2, !dbg !34
  %557 = insertelement <4 x i32> %556, i32 %361, i64 3, !dbg !34
  %558 = bitcast <4 x i32> %557 to <4 x float>, !dbg !34
  %559 = insertelement <4 x i32> poison, i32 %380, i64 0, !dbg !32
  %560 = insertelement <4 x i32> %559, i32 %379, i64 1, !dbg !32
  %561 = insertelement <4 x i32> %560, i32 %378, i64 2, !dbg !32
  %562 = insertelement <4 x i32> %561, i32 %377, i64 3, !dbg !32
  %563 = bitcast <4 x i32> %562 to <4 x float>, !dbg !32
  %564 = insertelement <4 x float> poison, float %401, i64 0, !dbg !44
  %565 = insertelement <4 x float> %564, float %402, i64 1, !dbg !44
  %566 = insertelement <4 x float> %565, float %403, i64 2, !dbg !44
  %567 = insertelement <4 x float> %566, float %404, i64 3, !dbg !44
  %568 = fmul <4 x float> %553, %567, !dbg !44
  %569 = fmul <4 x float> %568, %563, !dbg !45
  %570 = fadd <4 x float> %569, %558, !dbg !46
  %571 = fcmp olt <4 x float> %570, zeroinitializer, !dbg !47
  %572 = select <4 x i1> %571, <4 x float> zeroinitializer, <4 x float> %570, !dbg !51
  %573 = fcmp ole <4 x float> %572, zeroinitializer, !dbg !52
  %574 = extractelement <4 x float> %572, i64 0, !dbg !41
  %575 = bitcast float %574 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %434, <1 x i32> %575, i1 true) #4, !dbg !41
  %576 = extractelement <4 x float> %572, i64 1, !dbg !41
  %577 = bitcast float %576 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %435, <1 x i32> %577, i1 true) #4, !dbg !41
  %578 = extractelement <4 x float> %572, i64 2, !dbg !41
  %579 = bitcast float %578 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %436, <1 x i32> %579, i1 true) #4, !dbg !41
  %580 = extractelement <4 x float> %572, i64 3, !dbg !41
  %581 = bitcast float %580 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %437, <1 x i32> %581, i1 true) #4, !dbg !41
  %582 = insertelement <4 x i32> poison, i32 %335, i64 0, !dbg !26
  %583 = insertelement <4 x i32> %582, i32 %333, i64 1, !dbg !26
  %584 = insertelement <4 x i32> %583, i32 %331, i64 2, !dbg !26
  %585 = insertelement <4 x i32> %584, i32 %329, i64 3, !dbg !26
  %586 = bitcast <4 x i32> %585 to <4 x float>, !dbg !26
  %587 = insertelement <4 x i32> poison, i32 %336, i64 0, !dbg !28
  %588 = insertelement <4 x i32> %587, i32 %334, i64 1, !dbg !28
  %589 = insertelement <4 x i32> %588, i32 %332, i64 2, !dbg !28
  %590 = insertelement <4 x i32> %589, i32 %330, i64 3, !dbg !28
  %591 = bitcast <4 x i32> %590 to <4 x float>, !dbg !28
  %592 = fsub <4 x float> %586, %591, !dbg !43
  %593 = insertelement <4 x i32> poison, i32 %360, i64 0, !dbg !34
  %594 = insertelement <4 x i32> %593, i32 %359, i64 1, !dbg !34
  %595 = insertelement <4 x i32> %594, i32 %358, i64 2, !dbg !34
  %596 = insertelement <4 x i32> %595, i32 %357, i64 3, !dbg !34
  %597 = bitcast <4 x i32> %596 to <4 x float>, !dbg !34
  %598 = insertelement <4 x i32> poison, i32 %376, i64 0, !dbg !32
  %599 = insertelement <4 x i32> %598, i32 %375, i64 1, !dbg !32
  %600 = insertelement <4 x i32> %599, i32 %374, i64 2, !dbg !32
  %601 = insertelement <4 x i32> %600, i32 %373, i64 3, !dbg !32
  %602 = bitcast <4 x i32> %601 to <4 x float>, !dbg !32
  %603 = insertelement <4 x float> poison, float %405, i64 0, !dbg !44
  %604 = insertelement <4 x float> %603, float %406, i64 1, !dbg !44
  %605 = insertelement <4 x float> %604, float %407, i64 2, !dbg !44
  %606 = insertelement <4 x float> %605, float %408, i64 3, !dbg !44
  %607 = fmul <4 x float> %592, %606, !dbg !44
  %608 = fmul <4 x float> %607, %602, !dbg !45
  %609 = fadd <4 x float> %608, %597, !dbg !46
  %610 = fcmp olt <4 x float> %609, zeroinitializer, !dbg !47
  %611 = select <4 x i1> %610, <4 x float> zeroinitializer, <4 x float> %609, !dbg !51
  %612 = fcmp ole <4 x float> %611, zeroinitializer, !dbg !52
  %613 = extractelement <4 x float> %611, i64 0, !dbg !41
  %614 = bitcast float %613 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %438, <1 x i32> %614, i1 true) #4, !dbg !41
  %615 = extractelement <4 x float> %611, i64 1, !dbg !41
  %616 = bitcast float %615 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %439, <1 x i32> %616, i1 true) #4, !dbg !41
  %617 = extractelement <4 x float> %611, i64 2, !dbg !41
  %618 = bitcast float %617 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %440, <1 x i32> %618, i1 true) #4, !dbg !41
  %619 = extractelement <4 x float> %611, i64 3, !dbg !41
  %620 = bitcast float %619 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %441, <1 x i32> %620, i1 true) #4, !dbg !41
  %621 = insertelement <4 x i32> poison, i32 %327, i64 0, !dbg !26
  %622 = insertelement <4 x i32> %621, i32 %325, i64 1, !dbg !26
  %623 = insertelement <4 x i32> %622, i32 %323, i64 2, !dbg !26
  %624 = insertelement <4 x i32> %623, i32 %321, i64 3, !dbg !26
  %625 = bitcast <4 x i32> %624 to <4 x float>, !dbg !26
  %626 = insertelement <4 x i32> poison, i32 %328, i64 0, !dbg !28
  %627 = insertelement <4 x i32> %626, i32 %326, i64 1, !dbg !28
  %628 = insertelement <4 x i32> %627, i32 %324, i64 2, !dbg !28
  %629 = insertelement <4 x i32> %628, i32 %322, i64 3, !dbg !28
  %630 = bitcast <4 x i32> %629 to <4 x float>, !dbg !28
  %631 = fsub <4 x float> %625, %630, !dbg !43
  %632 = insertelement <4 x i32> poison, i32 %356, i64 0, !dbg !34
  %633 = insertelement <4 x i32> %632, i32 %355, i64 1, !dbg !34
  %634 = insertelement <4 x i32> %633, i32 %354, i64 2, !dbg !34
  %635 = insertelement <4 x i32> %634, i32 %353, i64 3, !dbg !34
  %636 = bitcast <4 x i32> %635 to <4 x float>, !dbg !34
  %637 = insertelement <4 x i32> poison, i32 %372, i64 0, !dbg !32
  %638 = insertelement <4 x i32> %637, i32 %371, i64 1, !dbg !32
  %639 = insertelement <4 x i32> %638, i32 %370, i64 2, !dbg !32
  %640 = insertelement <4 x i32> %639, i32 %369, i64 3, !dbg !32
  %641 = bitcast <4 x i32> %640 to <4 x float>, !dbg !32
  %642 = insertelement <4 x float> poison, float %409, i64 0, !dbg !44
  %643 = insertelement <4 x float> %642, float %410, i64 1, !dbg !44
  %644 = insertelement <4 x float> %643, float %411, i64 2, !dbg !44
  %645 = insertelement <4 x float> %644, float %412, i64 3, !dbg !44
  %646 = fmul <4 x float> %631, %645, !dbg !44
  %647 = fmul <4 x float> %646, %641, !dbg !45
  %648 = fadd <4 x float> %647, %636, !dbg !46
  %649 = fcmp olt <4 x float> %648, zeroinitializer, !dbg !47
  %650 = select <4 x i1> %649, <4 x float> zeroinitializer, <4 x float> %648, !dbg !51
  %651 = fcmp ole <4 x float> %650, zeroinitializer, !dbg !52
  %652 = extractelement <4 x float> %650, i64 0, !dbg !41
  %653 = bitcast float %652 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %442, <1 x i32> %653, i1 true) #4, !dbg !41
  %654 = extractelement <4 x float> %650, i64 1, !dbg !41
  %655 = bitcast float %654 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %443, <1 x i32> %655, i1 true) #4, !dbg !41
  %656 = extractelement <4 x float> %650, i64 2, !dbg !41
  %657 = bitcast float %656 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %444, <1 x i32> %657, i1 true) #4, !dbg !41
  %658 = extractelement <4 x float> %650, i64 3, !dbg !41
  %659 = bitcast float %658 to <1 x i32>, !dbg !41
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %445, <1 x i32> %659, i1 true) #4, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !41
  %660 = load i32, ptr addrspace(3) %448, align 4, !dbg !41
  %661 = load i32, ptr addrspace(3) %450, align 4, !dbg !41
  %662 = load i32, ptr addrspace(3) %452, align 4, !dbg !41
  %663 = load i32, ptr addrspace(3) %454, align 4, !dbg !41
  %664 = load i32, ptr addrspace(3) %458, align 4, !dbg !41
  %665 = load i32, ptr addrspace(3) %462, align 4, !dbg !41
  %666 = load i32, ptr addrspace(3) %466, align 4, !dbg !41
  %667 = load i32, ptr addrspace(3) %470, align 4, !dbg !41
  %668 = load i32, ptr addrspace(3) %474, align 4, !dbg !41
  %669 = load i32, ptr addrspace(3) %478, align 4, !dbg !41
  %670 = load i32, ptr addrspace(3) %482, align 4, !dbg !41
  %671 = load i32, ptr addrspace(3) %486, align 4, !dbg !41
  %672 = load i32, ptr addrspace(3) %490, align 4, !dbg !41
  %673 = load i32, ptr addrspace(3) %494, align 4, !dbg !41
  %674 = load i32, ptr addrspace(3) %498, align 4, !dbg !41
  %675 = load i32, ptr addrspace(3) %502, align 4, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %660, i32 %661, i32 %662, i32 %663, ptr addrspace(1) %422, i1 %388) #4, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %664, i32 %665, i32 %666, i32 %667, ptr addrspace(1) %424, i1 %388) #4, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %668, i32 %669, i32 %670, i32 %671, ptr addrspace(1) %426, i1 %388) #4, !dbg !41
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %672, i32 %673, i32 %674, i32 %675, ptr addrspace(1) %428, i1 %388) #4, !dbg !41
  %676 = zext <4 x i1> %534 to <4 x i8>, !dbg !53
  %677 = bitcast <4 x i8> %676 to i32, !dbg !53
  %678 = zext <4 x i1> %573 to <4 x i8>, !dbg !53
  %679 = bitcast <4 x i8> %678 to i32, !dbg !53
  %680 = zext <4 x i1> %612 to <4 x i8>, !dbg !53
  %681 = bitcast <4 x i8> %680 to i32, !dbg !53
  %682 = zext <4 x i1> %651 to <4 x i8>, !dbg !53
  %683 = bitcast <4 x i8> %682 to i32, !dbg !53
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %677, i32 %679, i32 %681, i32 %683, ptr addrspace(1) %503, i1 %20) #4, !dbg !53
  ret void, !dbg !54
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cpwqwtng6etnobseqrwks4p2ky3ztlmn2j2a2iyoa2gnx7ouqmfk.py", directory: "inductor_cache/pw")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_22, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_22, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_22", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_relu_threshold_backward_22", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 39, scope: !7)
!22 = !DILocation(line: 32, column: 51, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 44, scope: !7)
!25 = !DILocation(line: 32, column: 30, scope: !7)
!26 = !DILocation(line: 32, column: 56, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 33, column: 35, scope: !7)
!29 = !DILocation(line: 34, column: 30, scope: !7)
!30 = !DILocation(line: 34, column: 35, scope: !7)
!31 = !DILocation(line: 35, column: 31, scope: !7)
!32 = !DILocation(line: 35, column: 36, scope: !7)
!33 = !DILocation(line: 36, column: 31, scope: !7)
!34 = !DILocation(line: 36, column: 36, scope: !7)
!35 = !DILocation(line: 39, column: 18, scope: !7)
!36 = !DILocation(line: 40, column: 26, scope: !7)
!37 = !DILocation(line: 42, column: 18, scope: !7)
!38 = !DILocation(line: 52, column: 34, scope: !7)
!39 = !DILocation(line: 52, column: 30, scope: !7)
!40 = !DILocation(line: 52, column: 25, scope: !7)
!41 = !DILocation(line: 52, column: 46, scope: !7)
!42 = !DILocation(line: 53, column: 25, scope: !7)
!43 = !DILocation(line: 37, column: 18, scope: !7)
!44 = !DILocation(line: 45, column: 19, scope: !7)
!45 = !DILocation(line: 46, column: 20, scope: !7)
!46 = !DILocation(line: 47, column: 20, scope: !7)
!47 = !DILocation(line: 118, column: 15, scope: !48, inlinedAt: !50)
!48 = distinct !DILexicalBlockFile(scope: !7, file: !49, discriminator: 0)
!49 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!50 = !DILocation(line: 49, column: 42, scope: !7)
!51 = !DILocation(line: 121, column: 29, scope: !48, inlinedAt: !50)
!52 = !DILocation(line: 51, column: 21, scope: !7)
!53 = !DILocation(line: 53, column: 58, scope: !7)
!54 = !DILocation(line: 53, column: 4, scope: !7)
