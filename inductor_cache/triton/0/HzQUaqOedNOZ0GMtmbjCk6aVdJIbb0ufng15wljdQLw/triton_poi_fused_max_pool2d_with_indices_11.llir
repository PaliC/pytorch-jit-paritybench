; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_max_pool2d_with_indices_11(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 4, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 4, !dbg !12
  %10 = and i32 %9, 15, !dbg !12
  %11 = or disjoint i32 %7, %10, !dbg !13
  %12 = or disjoint i32 %7, 1, !dbg !13
  %13 = or disjoint i32 %7, 2, !dbg !13
  %14 = or disjoint i32 %7, 3, !dbg !13
  %15 = or disjoint i32 %7, 4, !dbg !13
  %16 = or disjoint i32 %7, 5, !dbg !13
  %17 = or disjoint i32 %7, 6, !dbg !13
  %18 = or disjoint i32 %7, 7, !dbg !13
  %19 = or disjoint i32 %7, 8, !dbg !13
  %20 = or disjoint i32 %7, 9, !dbg !13
  %21 = or disjoint i32 %7, 10, !dbg !13
  %22 = or disjoint i32 %7, 11, !dbg !13
  %23 = or disjoint i32 %7, 12, !dbg !13
  %24 = or disjoint i32 %7, 13, !dbg !13
  %25 = or disjoint i32 %7, 14, !dbg !13
  %26 = or disjoint i32 %7, 15, !dbg !13
  %27 = icmp slt i32 %11, 1156, !dbg !14
  %28 = icmp slt i32 %7, 1156, !dbg !14
  %29 = icmp slt i32 %12, 1156, !dbg !14
  %30 = icmp slt i32 %13, 1156, !dbg !14
  %31 = icmp slt i32 %14, 1156, !dbg !14
  %32 = icmp slt i32 %15, 1156, !dbg !14
  %33 = icmp slt i32 %16, 1156, !dbg !14
  %34 = icmp slt i32 %17, 1156, !dbg !14
  %35 = icmp slt i32 %18, 1156, !dbg !14
  %36 = icmp slt i32 %19, 1156, !dbg !14
  %37 = icmp slt i32 %20, 1156, !dbg !14
  %38 = icmp slt i32 %21, 1156, !dbg !14
  %39 = icmp slt i32 %22, 1156, !dbg !14
  %40 = icmp slt i32 %23, 1156, !dbg !14
  %41 = icmp slt i32 %24, 1156, !dbg !14
  %42 = icmp slt i32 %25, 1156, !dbg !14
  %43 = icmp slt i32 %26, 1156, !dbg !14
  %44 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %45 = shl i32 %44, 8, !dbg !16
  %46 = shl i32 %8, 4, !dbg !17
  %47 = and i32 %46, 240, !dbg !17
  %48 = and i32 %8, 255, !dbg !17
  %49 = or disjoint i32 %45, %47, !dbg !18
  %50 = or disjoint i32 %49, 4, !dbg !18
  %51 = or disjoint i32 %49, 8, !dbg !18
  %52 = or disjoint i32 %49, 12, !dbg !18
  %53 = or disjoint i32 %45, %48, !dbg !18
  %54 = icmp slt i32 %49, 256, !dbg !19
  %55 = icmp slt i32 %53, 256, !dbg !19
  %56 = sdiv i32 %11, 17, !dbg !20
  %57 = sdiv i32 %11, 289, !dbg !21
  %.frozen = freeze i32 %7, !dbg !21
  %58 = sdiv i32 %.frozen, 289, !dbg !21
  %.frozen29 = freeze i32 %12, !dbg !21
  %59 = sdiv i32 %.frozen29, 289, !dbg !21
  %.frozen31 = freeze i32 %13, !dbg !21
  %60 = sdiv i32 %.frozen31, 289, !dbg !21
  %.frozen33 = freeze i32 %14, !dbg !21
  %61 = sdiv i32 %.frozen33, 289, !dbg !21
  %.frozen35 = freeze i32 %15, !dbg !21
  %62 = sdiv i32 %.frozen35, 289, !dbg !21
  %.frozen37 = freeze i32 %16, !dbg !21
  %63 = sdiv i32 %.frozen37, 289, !dbg !21
  %.frozen39 = freeze i32 %17, !dbg !21
  %64 = sdiv i32 %.frozen39, 289, !dbg !21
  %.frozen41 = freeze i32 %18, !dbg !21
  %65 = sdiv i32 %.frozen41, 289, !dbg !21
  %.frozen43 = freeze i32 %19, !dbg !21
  %66 = sdiv i32 %.frozen43, 289, !dbg !21
  %.frozen45 = freeze i32 %20, !dbg !21
  %67 = sdiv i32 %.frozen45, 289, !dbg !21
  %.frozen47 = freeze i32 %21, !dbg !21
  %68 = sdiv i32 %.frozen47, 289, !dbg !21
  %.frozen49 = freeze i32 %22, !dbg !21
  %69 = sdiv i32 %.frozen49, 289, !dbg !21
  %.frozen51 = freeze i32 %23, !dbg !21
  %70 = sdiv i32 %.frozen51, 289, !dbg !21
  %.frozen53 = freeze i32 %24, !dbg !21
  %71 = sdiv i32 %.frozen53, 289, !dbg !21
  %.frozen55 = freeze i32 %25, !dbg !21
  %72 = sdiv i32 %.frozen55, 289, !dbg !21
  %.frozen57 = freeze i32 %26, !dbg !21
  %73 = sdiv i32 %.frozen57, 289, !dbg !21
  %74 = mul i32 %58, 289, !dbg !22
  %.decomposed = sub i32 %.frozen, %74, !dbg !22
  %75 = mul i32 %59, 289, !dbg !22
  %.decomposed30 = sub i32 %.frozen29, %75, !dbg !22
  %76 = mul i32 %60, 289, !dbg !22
  %.decomposed32 = sub i32 %.frozen31, %76, !dbg !22
  %77 = mul i32 %61, 289, !dbg !22
  %.decomposed34 = sub i32 %.frozen33, %77, !dbg !22
  %78 = mul i32 %62, 289, !dbg !22
  %.decomposed36 = sub i32 %.frozen35, %78, !dbg !22
  %79 = mul i32 %63, 289, !dbg !22
  %.decomposed38 = sub i32 %.frozen37, %79, !dbg !22
  %80 = mul i32 %64, 289, !dbg !22
  %.decomposed40 = sub i32 %.frozen39, %80, !dbg !22
  %81 = mul i32 %65, 289, !dbg !22
  %.decomposed42 = sub i32 %.frozen41, %81, !dbg !22
  %82 = mul i32 %66, 289, !dbg !22
  %.decomposed44 = sub i32 %.frozen43, %82, !dbg !22
  %83 = mul i32 %67, 289, !dbg !22
  %.decomposed46 = sub i32 %.frozen45, %83, !dbg !22
  %84 = mul i32 %68, 289, !dbg !22
  %.decomposed48 = sub i32 %.frozen47, %84, !dbg !22
  %85 = mul i32 %69, 289, !dbg !22
  %.decomposed50 = sub i32 %.frozen49, %85, !dbg !22
  %86 = mul i32 %70, 289, !dbg !22
  %.decomposed52 = sub i32 %.frozen51, %86, !dbg !22
  %87 = mul i32 %71, 289, !dbg !22
  %.decomposed54 = sub i32 %.frozen53, %87, !dbg !22
  %88 = mul i32 %72, 289, !dbg !22
  %.decomposed56 = sub i32 %.frozen55, %88, !dbg !22
  %89 = mul i32 %73, 289, !dbg !22
  %.decomposed58 = sub i32 %.frozen57, %89, !dbg !22
  %90 = mul i32 %57, 278784, !dbg !23
  %91 = insertelement <2 x i32> poison, i32 %11, i64 0, !dbg !24
  %92 = insertelement <2 x i32> %91, i32 %56, i64 1, !dbg !24
  %93 = srem <2 x i32> %92, splat (i32 17), !dbg !24
  %94 = extractelement <2 x i32> %93, i64 1, !dbg !25
  %95 = icmp sgt i32 %94, 0, !dbg !26
  %96 = shl nsw <2 x i32> %93, splat (i32 1), !dbg !27
  %97 = extractelement <2 x i32> %93, i64 0, !dbg !25
  %98 = icmp sgt i32 %97, 0, !dbg !28
  %99 = and i1 %98, %95, !dbg !29
  %100 = shl nsw i32 %97, 9, !dbg !30
  %101 = mul nsw i32 %94, 16896, !dbg !31
  %102 = add i32 %90, %100, !dbg !32
  %103 = add i32 %102, -8704, !dbg !33
  %104 = add i32 %103, %49, !dbg !34
  %105 = add i32 %104, %101, !dbg !35
  %106 = add i32 %103, %50, !dbg !34
  %107 = add i32 %106, %101, !dbg !35
  %108 = add i32 %103, %51, !dbg !34
  %109 = add i32 %108, %101, !dbg !35
  %110 = add i32 %103, %52, !dbg !34
  %111 = add i32 %110, %101, !dbg !35
  %112 = sext i32 %105 to i64, !dbg !36
  %113 = getelementptr float, ptr addrspace(1) %0, i64 %112, !dbg !36
  %114 = sext i32 %107 to i64, !dbg !36
  %115 = getelementptr float, ptr addrspace(1) %0, i64 %114, !dbg !36
  %116 = sext i32 %109 to i64, !dbg !36
  %117 = getelementptr float, ptr addrspace(1) %0, i64 %116, !dbg !36
  %118 = sext i32 %111 to i64, !dbg !36
  %119 = getelementptr float, ptr addrspace(1) %0, i64 %118, !dbg !36
  %120 = and i1 %54, %99, !dbg !37
  %121 = and i1 %27, %120, !dbg !38
  %122 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %113, i1 %121, i32 -8388608, i1 %121, i32 -8388608, i1 %121, i32 -8388608, i1 %121, i32 -8388608, i1 %121) #2, !dbg !39
  %123 = extractvalue { i32, i32, i32, i32 } %122, 0, !dbg !39
  %124 = extractvalue { i32, i32, i32, i32 } %122, 1, !dbg !39
  %125 = extractvalue { i32, i32, i32, i32 } %122, 2, !dbg !39
  %126 = extractvalue { i32, i32, i32, i32 } %122, 3, !dbg !39
  %127 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %115, i1 %121, i32 -8388608, i1 %121, i32 -8388608, i1 %121, i32 -8388608, i1 %121, i32 -8388608, i1 %121) #2, !dbg !39
  %128 = extractvalue { i32, i32, i32, i32 } %127, 0, !dbg !39
  %129 = extractvalue { i32, i32, i32, i32 } %127, 1, !dbg !39
  %130 = extractvalue { i32, i32, i32, i32 } %127, 2, !dbg !39
  %131 = extractvalue { i32, i32, i32, i32 } %127, 3, !dbg !39
  %132 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %117, i1 %121, i32 -8388608, i1 %121, i32 -8388608, i1 %121, i32 -8388608, i1 %121, i32 -8388608, i1 %121) #2, !dbg !39
  %133 = extractvalue { i32, i32, i32, i32 } %132, 0, !dbg !39
  %134 = extractvalue { i32, i32, i32, i32 } %132, 1, !dbg !39
  %135 = extractvalue { i32, i32, i32, i32 } %132, 2, !dbg !39
  %136 = extractvalue { i32, i32, i32, i32 } %132, 3, !dbg !39
  %137 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %119, i1 %121, i32 -8388608, i1 %121, i32 -8388608, i1 %121, i32 -8388608, i1 %121, i32 -8388608, i1 %121) #2, !dbg !39
  %138 = extractvalue { i32, i32, i32, i32 } %137, 0, !dbg !39
  %139 = extractvalue { i32, i32, i32, i32 } %137, 1, !dbg !39
  %140 = extractvalue { i32, i32, i32, i32 } %137, 2, !dbg !39
  %141 = extractvalue { i32, i32, i32, i32 } %137, 3, !dbg !39
  %142 = icmp sgt <2 x i32> %93, splat (i32 -1), !dbg !40
  %143 = extractelement <2 x i1> %142, i64 0, !dbg !41
  %144 = and i1 %143, %95, !dbg !41
  %145 = add i32 %102, -8448, !dbg !42
  %146 = add i32 %145, %49, !dbg !43
  %147 = add i32 %146, %101, !dbg !44
  %148 = add i32 %145, %50, !dbg !43
  %149 = add i32 %148, %101, !dbg !44
  %150 = add i32 %145, %51, !dbg !43
  %151 = add i32 %150, %101, !dbg !44
  %152 = add i32 %145, %52, !dbg !43
  %153 = add i32 %152, %101, !dbg !44
  %154 = sext i32 %147 to i64, !dbg !45
  %155 = getelementptr float, ptr addrspace(1) %0, i64 %154, !dbg !45
  %156 = sext i32 %149 to i64, !dbg !45
  %157 = getelementptr float, ptr addrspace(1) %0, i64 %156, !dbg !45
  %158 = sext i32 %151 to i64, !dbg !45
  %159 = getelementptr float, ptr addrspace(1) %0, i64 %158, !dbg !45
  %160 = sext i32 %153 to i64, !dbg !45
  %161 = getelementptr float, ptr addrspace(1) %0, i64 %160, !dbg !45
  %162 = and i1 %54, %144, !dbg !46
  %163 = and i1 %27, %162, !dbg !47
  %164 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %155, i1 %163, i32 -8388608, i1 %163, i32 -8388608, i1 %163, i32 -8388608, i1 %163, i32 -8388608, i1 %163) #2, !dbg !48
  %165 = extractvalue { i32, i32, i32, i32 } %164, 0, !dbg !48
  %166 = extractvalue { i32, i32, i32, i32 } %164, 1, !dbg !48
  %167 = extractvalue { i32, i32, i32, i32 } %164, 2, !dbg !48
  %168 = extractvalue { i32, i32, i32, i32 } %164, 3, !dbg !48
  %169 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %157, i1 %163, i32 -8388608, i1 %163, i32 -8388608, i1 %163, i32 -8388608, i1 %163, i32 -8388608, i1 %163) #2, !dbg !48
  %170 = extractvalue { i32, i32, i32, i32 } %169, 0, !dbg !48
  %171 = extractvalue { i32, i32, i32, i32 } %169, 1, !dbg !48
  %172 = extractvalue { i32, i32, i32, i32 } %169, 2, !dbg !48
  %173 = extractvalue { i32, i32, i32, i32 } %169, 3, !dbg !48
  %174 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %159, i1 %163, i32 -8388608, i1 %163, i32 -8388608, i1 %163, i32 -8388608, i1 %163, i32 -8388608, i1 %163) #2, !dbg !48
  %175 = extractvalue { i32, i32, i32, i32 } %174, 0, !dbg !48
  %176 = extractvalue { i32, i32, i32, i32 } %174, 1, !dbg !48
  %177 = extractvalue { i32, i32, i32, i32 } %174, 2, !dbg !48
  %178 = extractvalue { i32, i32, i32, i32 } %174, 3, !dbg !48
  %179 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %161, i1 %163, i32 -8388608, i1 %163, i32 -8388608, i1 %163, i32 -8388608, i1 %163, i32 -8388608, i1 %163) #2, !dbg !48
  %180 = extractvalue { i32, i32, i32, i32 } %179, 0, !dbg !48
  %181 = extractvalue { i32, i32, i32, i32 } %179, 1, !dbg !48
  %182 = extractvalue { i32, i32, i32, i32 } %179, 2, !dbg !48
  %183 = extractvalue { i32, i32, i32, i32 } %179, 3, !dbg !48
  %184 = or disjoint <2 x i32> %96, splat (i32 1), !dbg !49
  %185 = icmp slt <2 x i32> %184, splat (i32 33), !dbg !50
  %186 = and <2 x i1> %142, %185, !dbg !51
  %187 = extractelement <2 x i1> %186, i64 0, !dbg !52
  %188 = and i1 %95, %187, !dbg !53
  %189 = add i32 %102, -8192, !dbg !54
  %190 = add i32 %189, %49, !dbg !55
  %191 = add i32 %190, %101, !dbg !56
  %192 = add i32 %189, %50, !dbg !55
  %193 = add i32 %192, %101, !dbg !56
  %194 = add i32 %189, %51, !dbg !55
  %195 = add i32 %194, %101, !dbg !56
  %196 = add i32 %189, %52, !dbg !55
  %197 = add i32 %196, %101, !dbg !56
  %198 = sext i32 %191 to i64, !dbg !57
  %199 = getelementptr float, ptr addrspace(1) %0, i64 %198, !dbg !57
  %200 = sext i32 %193 to i64, !dbg !57
  %201 = getelementptr float, ptr addrspace(1) %0, i64 %200, !dbg !57
  %202 = sext i32 %195 to i64, !dbg !57
  %203 = getelementptr float, ptr addrspace(1) %0, i64 %202, !dbg !57
  %204 = sext i32 %197 to i64, !dbg !57
  %205 = getelementptr float, ptr addrspace(1) %0, i64 %204, !dbg !57
  %206 = and i1 %54, %188, !dbg !58
  %207 = and i1 %27, %206, !dbg !59
  %208 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %199, i1 %207, i32 -8388608, i1 %207, i32 -8388608, i1 %207, i32 -8388608, i1 %207, i32 -8388608, i1 %207) #2, !dbg !60
  %209 = extractvalue { i32, i32, i32, i32 } %208, 0, !dbg !60
  %210 = extractvalue { i32, i32, i32, i32 } %208, 1, !dbg !60
  %211 = extractvalue { i32, i32, i32, i32 } %208, 2, !dbg !60
  %212 = extractvalue { i32, i32, i32, i32 } %208, 3, !dbg !60
  %213 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %201, i1 %207, i32 -8388608, i1 %207, i32 -8388608, i1 %207, i32 -8388608, i1 %207, i32 -8388608, i1 %207) #2, !dbg !60
  %214 = extractvalue { i32, i32, i32, i32 } %213, 0, !dbg !60
  %215 = extractvalue { i32, i32, i32, i32 } %213, 1, !dbg !60
  %216 = extractvalue { i32, i32, i32, i32 } %213, 2, !dbg !60
  %217 = extractvalue { i32, i32, i32, i32 } %213, 3, !dbg !60
  %218 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %203, i1 %207, i32 -8388608, i1 %207, i32 -8388608, i1 %207, i32 -8388608, i1 %207, i32 -8388608, i1 %207) #2, !dbg !60
  %219 = extractvalue { i32, i32, i32, i32 } %218, 0, !dbg !60
  %220 = extractvalue { i32, i32, i32, i32 } %218, 1, !dbg !60
  %221 = extractvalue { i32, i32, i32, i32 } %218, 2, !dbg !60
  %222 = extractvalue { i32, i32, i32, i32 } %218, 3, !dbg !60
  %223 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %205, i1 %207, i32 -8388608, i1 %207, i32 -8388608, i1 %207, i32 -8388608, i1 %207, i32 -8388608, i1 %207) #2, !dbg !60
  %224 = extractvalue { i32, i32, i32, i32 } %223, 0, !dbg !60
  %225 = extractvalue { i32, i32, i32, i32 } %223, 1, !dbg !60
  %226 = extractvalue { i32, i32, i32, i32 } %223, 2, !dbg !60
  %227 = extractvalue { i32, i32, i32, i32 } %223, 3, !dbg !60
  %228 = extractelement <2 x i1> %142, i64 1, !dbg !61
  %229 = and i1 %98, %228, !dbg !61
  %230 = add i32 %102, -256, !dbg !62
  %231 = add i32 %230, %49, !dbg !63
  %232 = add i32 %231, %101, !dbg !64
  %233 = add i32 %230, %50, !dbg !63
  %234 = add i32 %233, %101, !dbg !64
  %235 = add i32 %230, %51, !dbg !63
  %236 = add i32 %235, %101, !dbg !64
  %237 = add i32 %230, %52, !dbg !63
  %238 = add i32 %237, %101, !dbg !64
  %239 = sext i32 %232 to i64, !dbg !65
  %240 = getelementptr float, ptr addrspace(1) %0, i64 %239, !dbg !65
  %241 = sext i32 %234 to i64, !dbg !65
  %242 = getelementptr float, ptr addrspace(1) %0, i64 %241, !dbg !65
  %243 = sext i32 %236 to i64, !dbg !65
  %244 = getelementptr float, ptr addrspace(1) %0, i64 %243, !dbg !65
  %245 = sext i32 %238 to i64, !dbg !65
  %246 = getelementptr float, ptr addrspace(1) %0, i64 %245, !dbg !65
  %247 = and i1 %54, %229, !dbg !66
  %248 = and i1 %27, %247, !dbg !67
  %249 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %240, i1 %248, i32 -8388608, i1 %248, i32 -8388608, i1 %248, i32 -8388608, i1 %248, i32 -8388608, i1 %248) #2, !dbg !68
  %250 = extractvalue { i32, i32, i32, i32 } %249, 0, !dbg !68
  %251 = extractvalue { i32, i32, i32, i32 } %249, 1, !dbg !68
  %252 = extractvalue { i32, i32, i32, i32 } %249, 2, !dbg !68
  %253 = extractvalue { i32, i32, i32, i32 } %249, 3, !dbg !68
  %254 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %242, i1 %248, i32 -8388608, i1 %248, i32 -8388608, i1 %248, i32 -8388608, i1 %248, i32 -8388608, i1 %248) #2, !dbg !68
  %255 = extractvalue { i32, i32, i32, i32 } %254, 0, !dbg !68
  %256 = extractvalue { i32, i32, i32, i32 } %254, 1, !dbg !68
  %257 = extractvalue { i32, i32, i32, i32 } %254, 2, !dbg !68
  %258 = extractvalue { i32, i32, i32, i32 } %254, 3, !dbg !68
  %259 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %244, i1 %248, i32 -8388608, i1 %248, i32 -8388608, i1 %248, i32 -8388608, i1 %248, i32 -8388608, i1 %248) #2, !dbg !68
  %260 = extractvalue { i32, i32, i32, i32 } %259, 0, !dbg !68
  %261 = extractvalue { i32, i32, i32, i32 } %259, 1, !dbg !68
  %262 = extractvalue { i32, i32, i32, i32 } %259, 2, !dbg !68
  %263 = extractvalue { i32, i32, i32, i32 } %259, 3, !dbg !68
  %264 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %246, i1 %248, i32 -8388608, i1 %248, i32 -8388608, i1 %248, i32 -8388608, i1 %248, i32 -8388608, i1 %248) #2, !dbg !68
  %265 = extractvalue { i32, i32, i32, i32 } %264, 0, !dbg !68
  %266 = extractvalue { i32, i32, i32, i32 } %264, 1, !dbg !68
  %267 = extractvalue { i32, i32, i32, i32 } %264, 2, !dbg !68
  %268 = extractvalue { i32, i32, i32, i32 } %264, 3, !dbg !68
  %269 = or i32 %94, %97, !dbg !25
  %270 = icmp sgt i32 %269, -1, !dbg !25
  %271 = add i32 %102, %49, !dbg !69
  %272 = add i32 %271, %101, !dbg !70
  %273 = add i32 %102, %50, !dbg !69
  %274 = add i32 %273, %101, !dbg !70
  %275 = add i32 %102, %51, !dbg !69
  %276 = add i32 %275, %101, !dbg !70
  %277 = add i32 %102, %52, !dbg !69
  %278 = add i32 %277, %101, !dbg !70
  %279 = sext i32 %272 to i64, !dbg !71
  %280 = getelementptr float, ptr addrspace(1) %0, i64 %279, !dbg !71
  %281 = sext i32 %274 to i64, !dbg !71
  %282 = getelementptr float, ptr addrspace(1) %0, i64 %281, !dbg !71
  %283 = sext i32 %276 to i64, !dbg !71
  %284 = getelementptr float, ptr addrspace(1) %0, i64 %283, !dbg !71
  %285 = sext i32 %278 to i64, !dbg !71
  %286 = getelementptr float, ptr addrspace(1) %0, i64 %285, !dbg !71
  %287 = and i1 %54, %270, !dbg !72
  %288 = and i1 %27, %287, !dbg !73
  %289 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %280, i1 %288, i32 -8388608, i1 %288, i32 -8388608, i1 %288, i32 -8388608, i1 %288, i32 -8388608, i1 %288) #2, !dbg !74
  %290 = extractvalue { i32, i32, i32, i32 } %289, 0, !dbg !74
  %291 = extractvalue { i32, i32, i32, i32 } %289, 1, !dbg !74
  %292 = extractvalue { i32, i32, i32, i32 } %289, 2, !dbg !74
  %293 = extractvalue { i32, i32, i32, i32 } %289, 3, !dbg !74
  %294 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %282, i1 %288, i32 -8388608, i1 %288, i32 -8388608, i1 %288, i32 -8388608, i1 %288, i32 -8388608, i1 %288) #2, !dbg !74
  %295 = extractvalue { i32, i32, i32, i32 } %294, 0, !dbg !74
  %296 = extractvalue { i32, i32, i32, i32 } %294, 1, !dbg !74
  %297 = extractvalue { i32, i32, i32, i32 } %294, 2, !dbg !74
  %298 = extractvalue { i32, i32, i32, i32 } %294, 3, !dbg !74
  %299 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %284, i1 %288, i32 -8388608, i1 %288, i32 -8388608, i1 %288, i32 -8388608, i1 %288, i32 -8388608, i1 %288) #2, !dbg !74
  %300 = extractvalue { i32, i32, i32, i32 } %299, 0, !dbg !74
  %301 = extractvalue { i32, i32, i32, i32 } %299, 1, !dbg !74
  %302 = extractvalue { i32, i32, i32, i32 } %299, 2, !dbg !74
  %303 = extractvalue { i32, i32, i32, i32 } %299, 3, !dbg !74
  %304 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %286, i1 %288, i32 -8388608, i1 %288, i32 -8388608, i1 %288, i32 -8388608, i1 %288, i32 -8388608, i1 %288) #2, !dbg !74
  %305 = extractvalue { i32, i32, i32, i32 } %304, 0, !dbg !74
  %306 = extractvalue { i32, i32, i32, i32 } %304, 1, !dbg !74
  %307 = extractvalue { i32, i32, i32, i32 } %304, 2, !dbg !74
  %308 = extractvalue { i32, i32, i32, i32 } %304, 3, !dbg !74
  %309 = and i1 %228, %187, !dbg !75
  %310 = add i32 %102, 256, !dbg !76
  %311 = add i32 %310, %49, !dbg !77
  %312 = add i32 %311, %101, !dbg !78
  %313 = add i32 %310, %50, !dbg !77
  %314 = add i32 %313, %101, !dbg !78
  %315 = add i32 %310, %51, !dbg !77
  %316 = add i32 %315, %101, !dbg !78
  %317 = add i32 %310, %52, !dbg !77
  %318 = add i32 %317, %101, !dbg !78
  %319 = sext i32 %312 to i64, !dbg !79
  %320 = getelementptr float, ptr addrspace(1) %0, i64 %319, !dbg !79
  %321 = sext i32 %314 to i64, !dbg !79
  %322 = getelementptr float, ptr addrspace(1) %0, i64 %321, !dbg !79
  %323 = sext i32 %316 to i64, !dbg !79
  %324 = getelementptr float, ptr addrspace(1) %0, i64 %323, !dbg !79
  %325 = sext i32 %318 to i64, !dbg !79
  %326 = getelementptr float, ptr addrspace(1) %0, i64 %325, !dbg !79
  %327 = and i1 %54, %309, !dbg !80
  %328 = and i1 %27, %327, !dbg !81
  %329 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %320, i1 %328, i32 -8388608, i1 %328, i32 -8388608, i1 %328, i32 -8388608, i1 %328, i32 -8388608, i1 %328) #2, !dbg !82
  %330 = extractvalue { i32, i32, i32, i32 } %329, 0, !dbg !82
  %331 = extractvalue { i32, i32, i32, i32 } %329, 1, !dbg !82
  %332 = extractvalue { i32, i32, i32, i32 } %329, 2, !dbg !82
  %333 = extractvalue { i32, i32, i32, i32 } %329, 3, !dbg !82
  %334 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %322, i1 %328, i32 -8388608, i1 %328, i32 -8388608, i1 %328, i32 -8388608, i1 %328, i32 -8388608, i1 %328) #2, !dbg !82
  %335 = extractvalue { i32, i32, i32, i32 } %334, 0, !dbg !82
  %336 = extractvalue { i32, i32, i32, i32 } %334, 1, !dbg !82
  %337 = extractvalue { i32, i32, i32, i32 } %334, 2, !dbg !82
  %338 = extractvalue { i32, i32, i32, i32 } %334, 3, !dbg !82
  %339 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %324, i1 %328, i32 -8388608, i1 %328, i32 -8388608, i1 %328, i32 -8388608, i1 %328, i32 -8388608, i1 %328) #2, !dbg !82
  %340 = extractvalue { i32, i32, i32, i32 } %339, 0, !dbg !82
  %341 = extractvalue { i32, i32, i32, i32 } %339, 1, !dbg !82
  %342 = extractvalue { i32, i32, i32, i32 } %339, 2, !dbg !82
  %343 = extractvalue { i32, i32, i32, i32 } %339, 3, !dbg !82
  %344 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %326, i1 %328, i32 -8388608, i1 %328, i32 -8388608, i1 %328, i32 -8388608, i1 %328, i32 -8388608, i1 %328) #2, !dbg !82
  %345 = extractvalue { i32, i32, i32, i32 } %344, 0, !dbg !82
  %346 = extractvalue { i32, i32, i32, i32 } %344, 1, !dbg !82
  %347 = extractvalue { i32, i32, i32, i32 } %344, 2, !dbg !82
  %348 = extractvalue { i32, i32, i32, i32 } %344, 3, !dbg !82
  %349 = extractelement <2 x i1> %186, i64 1, !dbg !52
  %350 = and i1 %98, %349, !dbg !83
  %351 = add i32 %102, 8192, !dbg !84
  %352 = add i32 %351, %49, !dbg !85
  %353 = add i32 %352, %101, !dbg !86
  %354 = add i32 %351, %50, !dbg !85
  %355 = add i32 %354, %101, !dbg !86
  %356 = add i32 %351, %51, !dbg !85
  %357 = add i32 %356, %101, !dbg !86
  %358 = add i32 %351, %52, !dbg !85
  %359 = add i32 %358, %101, !dbg !86
  %360 = sext i32 %353 to i64, !dbg !87
  %361 = getelementptr float, ptr addrspace(1) %0, i64 %360, !dbg !87
  %362 = sext i32 %355 to i64, !dbg !87
  %363 = getelementptr float, ptr addrspace(1) %0, i64 %362, !dbg !87
  %364 = sext i32 %357 to i64, !dbg !87
  %365 = getelementptr float, ptr addrspace(1) %0, i64 %364, !dbg !87
  %366 = sext i32 %359 to i64, !dbg !87
  %367 = getelementptr float, ptr addrspace(1) %0, i64 %366, !dbg !87
  %368 = and i1 %54, %350, !dbg !88
  %369 = and i1 %27, %368, !dbg !89
  %370 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %361, i1 %369, i32 -8388608, i1 %369, i32 -8388608, i1 %369, i32 -8388608, i1 %369, i32 -8388608, i1 %369) #2, !dbg !90
  %371 = extractvalue { i32, i32, i32, i32 } %370, 0, !dbg !90
  %372 = extractvalue { i32, i32, i32, i32 } %370, 1, !dbg !90
  %373 = extractvalue { i32, i32, i32, i32 } %370, 2, !dbg !90
  %374 = extractvalue { i32, i32, i32, i32 } %370, 3, !dbg !90
  %375 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %363, i1 %369, i32 -8388608, i1 %369, i32 -8388608, i1 %369, i32 -8388608, i1 %369, i32 -8388608, i1 %369) #2, !dbg !90
  %376 = extractvalue { i32, i32, i32, i32 } %375, 0, !dbg !90
  %377 = extractvalue { i32, i32, i32, i32 } %375, 1, !dbg !90
  %378 = extractvalue { i32, i32, i32, i32 } %375, 2, !dbg !90
  %379 = extractvalue { i32, i32, i32, i32 } %375, 3, !dbg !90
  %380 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %365, i1 %369, i32 -8388608, i1 %369, i32 -8388608, i1 %369, i32 -8388608, i1 %369, i32 -8388608, i1 %369) #2, !dbg !90
  %381 = extractvalue { i32, i32, i32, i32 } %380, 0, !dbg !90
  %382 = extractvalue { i32, i32, i32, i32 } %380, 1, !dbg !90
  %383 = extractvalue { i32, i32, i32, i32 } %380, 2, !dbg !90
  %384 = extractvalue { i32, i32, i32, i32 } %380, 3, !dbg !90
  %385 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %367, i1 %369, i32 -8388608, i1 %369, i32 -8388608, i1 %369, i32 -8388608, i1 %369, i32 -8388608, i1 %369) #2, !dbg !90
  %386 = extractvalue { i32, i32, i32, i32 } %385, 0, !dbg !90
  %387 = extractvalue { i32, i32, i32, i32 } %385, 1, !dbg !90
  %388 = extractvalue { i32, i32, i32, i32 } %385, 2, !dbg !90
  %389 = extractvalue { i32, i32, i32, i32 } %385, 3, !dbg !90
  %390 = and i1 %143, %349, !dbg !91
  %391 = add i32 %102, 8448, !dbg !92
  %392 = add i32 %391, %49, !dbg !93
  %393 = add i32 %392, %101, !dbg !94
  %394 = add i32 %391, %50, !dbg !93
  %395 = add i32 %394, %101, !dbg !94
  %396 = add i32 %391, %51, !dbg !93
  %397 = add i32 %396, %101, !dbg !94
  %398 = add i32 %391, %52, !dbg !93
  %399 = add i32 %398, %101, !dbg !94
  %400 = sext i32 %393 to i64, !dbg !95
  %401 = getelementptr float, ptr addrspace(1) %0, i64 %400, !dbg !95
  %402 = sext i32 %395 to i64, !dbg !95
  %403 = getelementptr float, ptr addrspace(1) %0, i64 %402, !dbg !95
  %404 = sext i32 %397 to i64, !dbg !95
  %405 = getelementptr float, ptr addrspace(1) %0, i64 %404, !dbg !95
  %406 = sext i32 %399 to i64, !dbg !95
  %407 = getelementptr float, ptr addrspace(1) %0, i64 %406, !dbg !95
  %408 = and i1 %54, %390, !dbg !96
  %409 = and i1 %27, %408, !dbg !97
  %410 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %401, i1 %409, i32 -8388608, i1 %409, i32 -8388608, i1 %409, i32 -8388608, i1 %409, i32 -8388608, i1 %409) #2, !dbg !98
  %411 = extractvalue { i32, i32, i32, i32 } %410, 0, !dbg !98
  %412 = extractvalue { i32, i32, i32, i32 } %410, 1, !dbg !98
  %413 = extractvalue { i32, i32, i32, i32 } %410, 2, !dbg !98
  %414 = extractvalue { i32, i32, i32, i32 } %410, 3, !dbg !98
  %415 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %403, i1 %409, i32 -8388608, i1 %409, i32 -8388608, i1 %409, i32 -8388608, i1 %409, i32 -8388608, i1 %409) #2, !dbg !98
  %416 = extractvalue { i32, i32, i32, i32 } %415, 0, !dbg !98
  %417 = extractvalue { i32, i32, i32, i32 } %415, 1, !dbg !98
  %418 = extractvalue { i32, i32, i32, i32 } %415, 2, !dbg !98
  %419 = extractvalue { i32, i32, i32, i32 } %415, 3, !dbg !98
  %420 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %405, i1 %409, i32 -8388608, i1 %409, i32 -8388608, i1 %409, i32 -8388608, i1 %409, i32 -8388608, i1 %409) #2, !dbg !98
  %421 = extractvalue { i32, i32, i32, i32 } %420, 0, !dbg !98
  %422 = extractvalue { i32, i32, i32, i32 } %420, 1, !dbg !98
  %423 = extractvalue { i32, i32, i32, i32 } %420, 2, !dbg !98
  %424 = extractvalue { i32, i32, i32, i32 } %420, 3, !dbg !98
  %425 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %407, i1 %409, i32 -8388608, i1 %409, i32 -8388608, i1 %409, i32 -8388608, i1 %409, i32 -8388608, i1 %409) #2, !dbg !98
  %426 = extractvalue { i32, i32, i32, i32 } %425, 0, !dbg !98
  %427 = extractvalue { i32, i32, i32, i32 } %425, 1, !dbg !98
  %428 = extractvalue { i32, i32, i32, i32 } %425, 2, !dbg !98
  %429 = extractvalue { i32, i32, i32, i32 } %425, 3, !dbg !98
  %430 = and i1 %187, %349, !dbg !52
  %431 = add i32 %102, 8704, !dbg !99
  %432 = add i32 %431, %49, !dbg !100
  %433 = add i32 %432, %101, !dbg !101
  %434 = add i32 %431, %50, !dbg !100
  %435 = add i32 %434, %101, !dbg !101
  %436 = add i32 %431, %51, !dbg !100
  %437 = add i32 %436, %101, !dbg !101
  %438 = add i32 %431, %52, !dbg !100
  %439 = add i32 %438, %101, !dbg !101
  %440 = sext i32 %433 to i64, !dbg !102
  %441 = getelementptr float, ptr addrspace(1) %0, i64 %440, !dbg !102
  %442 = sext i32 %435 to i64, !dbg !102
  %443 = getelementptr float, ptr addrspace(1) %0, i64 %442, !dbg !102
  %444 = sext i32 %437 to i64, !dbg !102
  %445 = getelementptr float, ptr addrspace(1) %0, i64 %444, !dbg !102
  %446 = sext i32 %439 to i64, !dbg !102
  %447 = getelementptr float, ptr addrspace(1) %0, i64 %446, !dbg !102
  %448 = and i1 %54, %430, !dbg !103
  %449 = and i1 %27, %448, !dbg !104
  %450 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %441, i1 %449, i32 -8388608, i1 %449, i32 -8388608, i1 %449, i32 -8388608, i1 %449, i32 -8388608, i1 %449) #2, !dbg !105
  %451 = extractvalue { i32, i32, i32, i32 } %450, 0, !dbg !105
  %452 = extractvalue { i32, i32, i32, i32 } %450, 1, !dbg !105
  %453 = extractvalue { i32, i32, i32, i32 } %450, 2, !dbg !105
  %454 = extractvalue { i32, i32, i32, i32 } %450, 3, !dbg !105
  %455 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %443, i1 %449, i32 -8388608, i1 %449, i32 -8388608, i1 %449, i32 -8388608, i1 %449, i32 -8388608, i1 %449) #2, !dbg !105
  %456 = extractvalue { i32, i32, i32, i32 } %455, 0, !dbg !105
  %457 = extractvalue { i32, i32, i32, i32 } %455, 1, !dbg !105
  %458 = extractvalue { i32, i32, i32, i32 } %455, 2, !dbg !105
  %459 = extractvalue { i32, i32, i32, i32 } %455, 3, !dbg !105
  %460 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %445, i1 %449, i32 -8388608, i1 %449, i32 -8388608, i1 %449, i32 -8388608, i1 %449, i32 -8388608, i1 %449) #2, !dbg !105
  %461 = extractvalue { i32, i32, i32, i32 } %460, 0, !dbg !105
  %462 = extractvalue { i32, i32, i32, i32 } %460, 1, !dbg !105
  %463 = extractvalue { i32, i32, i32, i32 } %460, 2, !dbg !105
  %464 = extractvalue { i32, i32, i32, i32 } %460, 3, !dbg !105
  %465 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %447, i1 %449, i32 -8388608, i1 %449, i32 -8388608, i1 %449, i32 -8388608, i1 %449, i32 -8388608, i1 %449) #2, !dbg !105
  %466 = extractvalue { i32, i32, i32, i32 } %465, 0, !dbg !105
  %467 = extractvalue { i32, i32, i32, i32 } %465, 1, !dbg !105
  %468 = extractvalue { i32, i32, i32, i32 } %465, 2, !dbg !105
  %469 = extractvalue { i32, i32, i32, i32 } %465, 3, !dbg !105
  %470 = insertelement <4 x i32> poison, i32 %123, i64 0, !dbg !39
  %471 = insertelement <4 x i32> %470, i32 %124, i64 1, !dbg !39
  %472 = insertelement <4 x i32> %471, i32 %125, i64 2, !dbg !39
  %473 = insertelement <4 x i32> %472, i32 %126, i64 3, !dbg !39
  %474 = bitcast <4 x i32> %473 to <4 x float>, !dbg !39
  %475 = insertelement <4 x i32> poison, i32 %165, i64 0, !dbg !48
  %476 = insertelement <4 x i32> %475, i32 %166, i64 1, !dbg !48
  %477 = insertelement <4 x i32> %476, i32 %167, i64 2, !dbg !48
  %478 = insertelement <4 x i32> %477, i32 %168, i64 3, !dbg !48
  %479 = bitcast <4 x i32> %478 to <4 x float>, !dbg !48
  %480 = fcmp ogt <4 x float> %479, %474, !dbg !106
  %481 = fcmp uno <4 x float> %479, zeroinitializer, !dbg !110
  %482 = or <4 x i1> %480, %481, !dbg !111
  %.v = select <4 x i1> %482, <4 x i32> %478, <4 x i32> %473, !dbg !112
  %483 = bitcast <4 x i32> %.v to <4 x float>, !dbg !112
  %484 = insertelement <4 x i32> poison, i32 %209, i64 0, !dbg !60
  %485 = insertelement <4 x i32> %484, i32 %210, i64 1, !dbg !60
  %486 = insertelement <4 x i32> %485, i32 %211, i64 2, !dbg !60
  %487 = insertelement <4 x i32> %486, i32 %212, i64 3, !dbg !60
  %488 = bitcast <4 x i32> %487 to <4 x float>, !dbg !60
  %489 = fcmp olt <4 x float> %483, %488, !dbg !113
  %490 = fcmp uno <4 x float> %488, zeroinitializer, !dbg !115
  %491 = or <4 x i1> %489, %490, !dbg !116
  %.v2 = select <4 x i1> %491, <4 x i32> %487, <4 x i32> %.v, !dbg !117
  %492 = bitcast <4 x i32> %.v2 to <4 x float>, !dbg !117
  %493 = insertelement <4 x i32> poison, i32 %250, i64 0, !dbg !68
  %494 = insertelement <4 x i32> %493, i32 %251, i64 1, !dbg !68
  %495 = insertelement <4 x i32> %494, i32 %252, i64 2, !dbg !68
  %496 = insertelement <4 x i32> %495, i32 %253, i64 3, !dbg !68
  %497 = bitcast <4 x i32> %496 to <4 x float>, !dbg !68
  %498 = fcmp olt <4 x float> %492, %497, !dbg !118
  %499 = fcmp uno <4 x float> %497, zeroinitializer, !dbg !120
  %500 = or <4 x i1> %498, %499, !dbg !121
  %.v3 = select <4 x i1> %500, <4 x i32> %496, <4 x i32> %.v2, !dbg !122
  %501 = bitcast <4 x i32> %.v3 to <4 x float>, !dbg !122
  %502 = insertelement <4 x i32> poison, i32 %290, i64 0, !dbg !74
  %503 = insertelement <4 x i32> %502, i32 %291, i64 1, !dbg !74
  %504 = insertelement <4 x i32> %503, i32 %292, i64 2, !dbg !74
  %505 = insertelement <4 x i32> %504, i32 %293, i64 3, !dbg !74
  %506 = bitcast <4 x i32> %505 to <4 x float>, !dbg !74
  %507 = fcmp olt <4 x float> %501, %506, !dbg !123
  %508 = fcmp uno <4 x float> %506, zeroinitializer, !dbg !125
  %509 = or <4 x i1> %507, %508, !dbg !126
  %.v4 = select <4 x i1> %509, <4 x i32> %505, <4 x i32> %.v3, !dbg !127
  %510 = bitcast <4 x i32> %.v4 to <4 x float>, !dbg !127
  %511 = insertelement <4 x i32> poison, i32 %330, i64 0, !dbg !82
  %512 = insertelement <4 x i32> %511, i32 %331, i64 1, !dbg !82
  %513 = insertelement <4 x i32> %512, i32 %332, i64 2, !dbg !82
  %514 = insertelement <4 x i32> %513, i32 %333, i64 3, !dbg !82
  %515 = bitcast <4 x i32> %514 to <4 x float>, !dbg !82
  %516 = fcmp olt <4 x float> %510, %515, !dbg !128
  %517 = fcmp uno <4 x float> %515, zeroinitializer, !dbg !130
  %518 = or <4 x i1> %516, %517, !dbg !131
  %.v5 = select <4 x i1> %518, <4 x i32> %514, <4 x i32> %.v4, !dbg !132
  %519 = bitcast <4 x i32> %.v5 to <4 x float>, !dbg !132
  %520 = insertelement <4 x i32> poison, i32 %371, i64 0, !dbg !90
  %521 = insertelement <4 x i32> %520, i32 %372, i64 1, !dbg !90
  %522 = insertelement <4 x i32> %521, i32 %373, i64 2, !dbg !90
  %523 = insertelement <4 x i32> %522, i32 %374, i64 3, !dbg !90
  %524 = bitcast <4 x i32> %523 to <4 x float>, !dbg !90
  %525 = fcmp olt <4 x float> %519, %524, !dbg !133
  %526 = fcmp uno <4 x float> %524, zeroinitializer, !dbg !135
  %527 = or <4 x i1> %525, %526, !dbg !136
  %.v6 = select <4 x i1> %527, <4 x i32> %523, <4 x i32> %.v5, !dbg !137
  %528 = bitcast <4 x i32> %.v6 to <4 x float>, !dbg !137
  %529 = insertelement <4 x i32> poison, i32 %411, i64 0, !dbg !98
  %530 = insertelement <4 x i32> %529, i32 %412, i64 1, !dbg !98
  %531 = insertelement <4 x i32> %530, i32 %413, i64 2, !dbg !98
  %532 = insertelement <4 x i32> %531, i32 %414, i64 3, !dbg !98
  %533 = bitcast <4 x i32> %532 to <4 x float>, !dbg !98
  %534 = fcmp olt <4 x float> %528, %533, !dbg !138
  %535 = fcmp uno <4 x float> %533, zeroinitializer, !dbg !140
  %536 = or <4 x i1> %534, %535, !dbg !141
  %.v7 = select <4 x i1> %536, <4 x i32> %532, <4 x i32> %.v6, !dbg !142
  %537 = bitcast <4 x i32> %.v7 to <4 x float>, !dbg !142
  %538 = insertelement <4 x i32> poison, i32 %451, i64 0, !dbg !105
  %539 = insertelement <4 x i32> %538, i32 %452, i64 1, !dbg !105
  %540 = insertelement <4 x i32> %539, i32 %453, i64 2, !dbg !105
  %541 = insertelement <4 x i32> %540, i32 %454, i64 3, !dbg !105
  %542 = bitcast <4 x i32> %541 to <4 x float>, !dbg !105
  %543 = fcmp olt <4 x float> %537, %542, !dbg !143
  %544 = bitcast i32 %451 to float, !dbg !145
  %545 = fcmp uno float %544, 0.000000e+00, !dbg !145
  %546 = bitcast i32 %452 to float, !dbg !145
  %547 = fcmp uno float %546, 0.000000e+00, !dbg !145
  %548 = bitcast i32 %453 to float, !dbg !145
  %549 = fcmp uno float %548, 0.000000e+00, !dbg !145
  %550 = bitcast i32 %454 to float, !dbg !145
  %551 = fcmp uno float %550, 0.000000e+00, !dbg !145
  %552 = extractelement <4 x i1> %543, i64 0, !dbg !146
  %553 = or i1 %552, %545, !dbg !146
  %554 = extractelement <4 x i1> %543, i64 1, !dbg !146
  %555 = or i1 %554, %547, !dbg !146
  %556 = extractelement <4 x i1> %543, i64 2, !dbg !146
  %557 = or i1 %556, %549, !dbg !146
  %558 = extractelement <4 x i1> %543, i64 3, !dbg !146
  %559 = or i1 %558, %551, !dbg !146
  %560 = zext <4 x i1> %480 to <4 x i8>, !dbg !147
  %561 = select <4 x i1> %489, <4 x i8> splat (i8 2), <4 x i8> %560, !dbg !148
  %562 = select <4 x i1> %498, <4 x i8> splat (i8 3), <4 x i8> %561, !dbg !149
  %563 = select <4 x i1> %507, <4 x i8> splat (i8 4), <4 x i8> %562, !dbg !150
  %564 = select <4 x i1> %516, <4 x i8> splat (i8 5), <4 x i8> %563, !dbg !151
  %565 = select <4 x i1> %525, <4 x i8> splat (i8 6), <4 x i8> %564, !dbg !152
  %566 = select <4 x i1> %534, <4 x i8> splat (i8 7), <4 x i8> %565, !dbg !153
  %567 = select <4 x i1> %543, <4 x i8> splat (i8 8), <4 x i8> %566, !dbg !154
  %568 = insertelement <4 x i32> poison, i32 %128, i64 0, !dbg !39
  %569 = insertelement <4 x i32> %568, i32 %129, i64 1, !dbg !39
  %570 = insertelement <4 x i32> %569, i32 %130, i64 2, !dbg !39
  %571 = insertelement <4 x i32> %570, i32 %131, i64 3, !dbg !39
  %572 = bitcast <4 x i32> %571 to <4 x float>, !dbg !39
  %573 = insertelement <4 x i32> poison, i32 %170, i64 0, !dbg !48
  %574 = insertelement <4 x i32> %573, i32 %171, i64 1, !dbg !48
  %575 = insertelement <4 x i32> %574, i32 %172, i64 2, !dbg !48
  %576 = insertelement <4 x i32> %575, i32 %173, i64 3, !dbg !48
  %577 = bitcast <4 x i32> %576 to <4 x float>, !dbg !48
  %578 = fcmp ogt <4 x float> %577, %572, !dbg !106
  %579 = fcmp uno <4 x float> %577, zeroinitializer, !dbg !110
  %580 = or <4 x i1> %578, %579, !dbg !111
  %.v8 = select <4 x i1> %580, <4 x i32> %576, <4 x i32> %571, !dbg !112
  %581 = bitcast <4 x i32> %.v8 to <4 x float>, !dbg !112
  %582 = insertelement <4 x i32> poison, i32 %214, i64 0, !dbg !60
  %583 = insertelement <4 x i32> %582, i32 %215, i64 1, !dbg !60
  %584 = insertelement <4 x i32> %583, i32 %216, i64 2, !dbg !60
  %585 = insertelement <4 x i32> %584, i32 %217, i64 3, !dbg !60
  %586 = bitcast <4 x i32> %585 to <4 x float>, !dbg !60
  %587 = fcmp olt <4 x float> %581, %586, !dbg !113
  %588 = fcmp uno <4 x float> %586, zeroinitializer, !dbg !115
  %589 = or <4 x i1> %587, %588, !dbg !116
  %.v9 = select <4 x i1> %589, <4 x i32> %585, <4 x i32> %.v8, !dbg !117
  %590 = bitcast <4 x i32> %.v9 to <4 x float>, !dbg !117
  %591 = insertelement <4 x i32> poison, i32 %255, i64 0, !dbg !68
  %592 = insertelement <4 x i32> %591, i32 %256, i64 1, !dbg !68
  %593 = insertelement <4 x i32> %592, i32 %257, i64 2, !dbg !68
  %594 = insertelement <4 x i32> %593, i32 %258, i64 3, !dbg !68
  %595 = bitcast <4 x i32> %594 to <4 x float>, !dbg !68
  %596 = fcmp olt <4 x float> %590, %595, !dbg !118
  %597 = fcmp uno <4 x float> %595, zeroinitializer, !dbg !120
  %598 = or <4 x i1> %596, %597, !dbg !121
  %.v10 = select <4 x i1> %598, <4 x i32> %594, <4 x i32> %.v9, !dbg !122
  %599 = bitcast <4 x i32> %.v10 to <4 x float>, !dbg !122
  %600 = insertelement <4 x i32> poison, i32 %295, i64 0, !dbg !74
  %601 = insertelement <4 x i32> %600, i32 %296, i64 1, !dbg !74
  %602 = insertelement <4 x i32> %601, i32 %297, i64 2, !dbg !74
  %603 = insertelement <4 x i32> %602, i32 %298, i64 3, !dbg !74
  %604 = bitcast <4 x i32> %603 to <4 x float>, !dbg !74
  %605 = fcmp olt <4 x float> %599, %604, !dbg !123
  %606 = fcmp uno <4 x float> %604, zeroinitializer, !dbg !125
  %607 = or <4 x i1> %605, %606, !dbg !126
  %.v11 = select <4 x i1> %607, <4 x i32> %603, <4 x i32> %.v10, !dbg !127
  %608 = bitcast <4 x i32> %.v11 to <4 x float>, !dbg !127
  %609 = insertelement <4 x i32> poison, i32 %335, i64 0, !dbg !82
  %610 = insertelement <4 x i32> %609, i32 %336, i64 1, !dbg !82
  %611 = insertelement <4 x i32> %610, i32 %337, i64 2, !dbg !82
  %612 = insertelement <4 x i32> %611, i32 %338, i64 3, !dbg !82
  %613 = bitcast <4 x i32> %612 to <4 x float>, !dbg !82
  %614 = fcmp olt <4 x float> %608, %613, !dbg !128
  %615 = fcmp uno <4 x float> %613, zeroinitializer, !dbg !130
  %616 = or <4 x i1> %614, %615, !dbg !131
  %.v12 = select <4 x i1> %616, <4 x i32> %612, <4 x i32> %.v11, !dbg !132
  %617 = bitcast <4 x i32> %.v12 to <4 x float>, !dbg !132
  %618 = insertelement <4 x i32> poison, i32 %376, i64 0, !dbg !90
  %619 = insertelement <4 x i32> %618, i32 %377, i64 1, !dbg !90
  %620 = insertelement <4 x i32> %619, i32 %378, i64 2, !dbg !90
  %621 = insertelement <4 x i32> %620, i32 %379, i64 3, !dbg !90
  %622 = bitcast <4 x i32> %621 to <4 x float>, !dbg !90
  %623 = fcmp olt <4 x float> %617, %622, !dbg !133
  %624 = fcmp uno <4 x float> %622, zeroinitializer, !dbg !135
  %625 = or <4 x i1> %623, %624, !dbg !136
  %.v13 = select <4 x i1> %625, <4 x i32> %621, <4 x i32> %.v12, !dbg !137
  %626 = bitcast <4 x i32> %.v13 to <4 x float>, !dbg !137
  %627 = insertelement <4 x i32> poison, i32 %416, i64 0, !dbg !98
  %628 = insertelement <4 x i32> %627, i32 %417, i64 1, !dbg !98
  %629 = insertelement <4 x i32> %628, i32 %418, i64 2, !dbg !98
  %630 = insertelement <4 x i32> %629, i32 %419, i64 3, !dbg !98
  %631 = bitcast <4 x i32> %630 to <4 x float>, !dbg !98
  %632 = fcmp olt <4 x float> %626, %631, !dbg !138
  %633 = fcmp uno <4 x float> %631, zeroinitializer, !dbg !140
  %634 = or <4 x i1> %632, %633, !dbg !141
  %.v14 = select <4 x i1> %634, <4 x i32> %630, <4 x i32> %.v13, !dbg !142
  %635 = bitcast <4 x i32> %.v14 to <4 x float>, !dbg !142
  %636 = insertelement <4 x i32> poison, i32 %456, i64 0, !dbg !105
  %637 = insertelement <4 x i32> %636, i32 %457, i64 1, !dbg !105
  %638 = insertelement <4 x i32> %637, i32 %458, i64 2, !dbg !105
  %639 = insertelement <4 x i32> %638, i32 %459, i64 3, !dbg !105
  %640 = bitcast <4 x i32> %639 to <4 x float>, !dbg !105
  %641 = fcmp olt <4 x float> %635, %640, !dbg !143
  %642 = bitcast i32 %456 to float, !dbg !145
  %643 = fcmp uno float %642, 0.000000e+00, !dbg !145
  %644 = bitcast i32 %457 to float, !dbg !145
  %645 = fcmp uno float %644, 0.000000e+00, !dbg !145
  %646 = bitcast i32 %458 to float, !dbg !145
  %647 = fcmp uno float %646, 0.000000e+00, !dbg !145
  %648 = bitcast i32 %459 to float, !dbg !145
  %649 = fcmp uno float %648, 0.000000e+00, !dbg !145
  %650 = extractelement <4 x i1> %641, i64 0, !dbg !146
  %651 = or i1 %650, %643, !dbg !146
  %652 = extractelement <4 x i1> %641, i64 1, !dbg !146
  %653 = or i1 %652, %645, !dbg !146
  %654 = extractelement <4 x i1> %641, i64 2, !dbg !146
  %655 = or i1 %654, %647, !dbg !146
  %656 = extractelement <4 x i1> %641, i64 3, !dbg !146
  %657 = or i1 %656, %649, !dbg !146
  %658 = zext <4 x i1> %578 to <4 x i8>, !dbg !147
  %659 = select <4 x i1> %587, <4 x i8> splat (i8 2), <4 x i8> %658, !dbg !148
  %660 = select <4 x i1> %596, <4 x i8> splat (i8 3), <4 x i8> %659, !dbg !149
  %661 = select <4 x i1> %605, <4 x i8> splat (i8 4), <4 x i8> %660, !dbg !150
  %662 = select <4 x i1> %614, <4 x i8> splat (i8 5), <4 x i8> %661, !dbg !151
  %663 = select <4 x i1> %623, <4 x i8> splat (i8 6), <4 x i8> %662, !dbg !152
  %664 = select <4 x i1> %632, <4 x i8> splat (i8 7), <4 x i8> %663, !dbg !153
  %665 = select <4 x i1> %641, <4 x i8> splat (i8 8), <4 x i8> %664, !dbg !154
  %666 = insertelement <4 x i32> poison, i32 %133, i64 0, !dbg !39
  %667 = insertelement <4 x i32> %666, i32 %134, i64 1, !dbg !39
  %668 = insertelement <4 x i32> %667, i32 %135, i64 2, !dbg !39
  %669 = insertelement <4 x i32> %668, i32 %136, i64 3, !dbg !39
  %670 = bitcast <4 x i32> %669 to <4 x float>, !dbg !39
  %671 = insertelement <4 x i32> poison, i32 %175, i64 0, !dbg !48
  %672 = insertelement <4 x i32> %671, i32 %176, i64 1, !dbg !48
  %673 = insertelement <4 x i32> %672, i32 %177, i64 2, !dbg !48
  %674 = insertelement <4 x i32> %673, i32 %178, i64 3, !dbg !48
  %675 = bitcast <4 x i32> %674 to <4 x float>, !dbg !48
  %676 = fcmp ogt <4 x float> %675, %670, !dbg !106
  %677 = fcmp uno <4 x float> %675, zeroinitializer, !dbg !110
  %678 = or <4 x i1> %676, %677, !dbg !111
  %.v15 = select <4 x i1> %678, <4 x i32> %674, <4 x i32> %669, !dbg !112
  %679 = bitcast <4 x i32> %.v15 to <4 x float>, !dbg !112
  %680 = insertelement <4 x i32> poison, i32 %219, i64 0, !dbg !60
  %681 = insertelement <4 x i32> %680, i32 %220, i64 1, !dbg !60
  %682 = insertelement <4 x i32> %681, i32 %221, i64 2, !dbg !60
  %683 = insertelement <4 x i32> %682, i32 %222, i64 3, !dbg !60
  %684 = bitcast <4 x i32> %683 to <4 x float>, !dbg !60
  %685 = fcmp olt <4 x float> %679, %684, !dbg !113
  %686 = fcmp uno <4 x float> %684, zeroinitializer, !dbg !115
  %687 = or <4 x i1> %685, %686, !dbg !116
  %.v16 = select <4 x i1> %687, <4 x i32> %683, <4 x i32> %.v15, !dbg !117
  %688 = bitcast <4 x i32> %.v16 to <4 x float>, !dbg !117
  %689 = insertelement <4 x i32> poison, i32 %260, i64 0, !dbg !68
  %690 = insertelement <4 x i32> %689, i32 %261, i64 1, !dbg !68
  %691 = insertelement <4 x i32> %690, i32 %262, i64 2, !dbg !68
  %692 = insertelement <4 x i32> %691, i32 %263, i64 3, !dbg !68
  %693 = bitcast <4 x i32> %692 to <4 x float>, !dbg !68
  %694 = fcmp olt <4 x float> %688, %693, !dbg !118
  %695 = fcmp uno <4 x float> %693, zeroinitializer, !dbg !120
  %696 = or <4 x i1> %694, %695, !dbg !121
  %.v17 = select <4 x i1> %696, <4 x i32> %692, <4 x i32> %.v16, !dbg !122
  %697 = bitcast <4 x i32> %.v17 to <4 x float>, !dbg !122
  %698 = insertelement <4 x i32> poison, i32 %300, i64 0, !dbg !74
  %699 = insertelement <4 x i32> %698, i32 %301, i64 1, !dbg !74
  %700 = insertelement <4 x i32> %699, i32 %302, i64 2, !dbg !74
  %701 = insertelement <4 x i32> %700, i32 %303, i64 3, !dbg !74
  %702 = bitcast <4 x i32> %701 to <4 x float>, !dbg !74
  %703 = fcmp olt <4 x float> %697, %702, !dbg !123
  %704 = fcmp uno <4 x float> %702, zeroinitializer, !dbg !125
  %705 = or <4 x i1> %703, %704, !dbg !126
  %.v18 = select <4 x i1> %705, <4 x i32> %701, <4 x i32> %.v17, !dbg !127
  %706 = bitcast <4 x i32> %.v18 to <4 x float>, !dbg !127
  %707 = insertelement <4 x i32> poison, i32 %340, i64 0, !dbg !82
  %708 = insertelement <4 x i32> %707, i32 %341, i64 1, !dbg !82
  %709 = insertelement <4 x i32> %708, i32 %342, i64 2, !dbg !82
  %710 = insertelement <4 x i32> %709, i32 %343, i64 3, !dbg !82
  %711 = bitcast <4 x i32> %710 to <4 x float>, !dbg !82
  %712 = fcmp olt <4 x float> %706, %711, !dbg !128
  %713 = fcmp uno <4 x float> %711, zeroinitializer, !dbg !130
  %714 = or <4 x i1> %712, %713, !dbg !131
  %.v19 = select <4 x i1> %714, <4 x i32> %710, <4 x i32> %.v18, !dbg !132
  %715 = bitcast <4 x i32> %.v19 to <4 x float>, !dbg !132
  %716 = insertelement <4 x i32> poison, i32 %381, i64 0, !dbg !90
  %717 = insertelement <4 x i32> %716, i32 %382, i64 1, !dbg !90
  %718 = insertelement <4 x i32> %717, i32 %383, i64 2, !dbg !90
  %719 = insertelement <4 x i32> %718, i32 %384, i64 3, !dbg !90
  %720 = bitcast <4 x i32> %719 to <4 x float>, !dbg !90
  %721 = fcmp olt <4 x float> %715, %720, !dbg !133
  %722 = fcmp uno <4 x float> %720, zeroinitializer, !dbg !135
  %723 = or <4 x i1> %721, %722, !dbg !136
  %.v20 = select <4 x i1> %723, <4 x i32> %719, <4 x i32> %.v19, !dbg !137
  %724 = bitcast <4 x i32> %.v20 to <4 x float>, !dbg !137
  %725 = insertelement <4 x i32> poison, i32 %421, i64 0, !dbg !98
  %726 = insertelement <4 x i32> %725, i32 %422, i64 1, !dbg !98
  %727 = insertelement <4 x i32> %726, i32 %423, i64 2, !dbg !98
  %728 = insertelement <4 x i32> %727, i32 %424, i64 3, !dbg !98
  %729 = bitcast <4 x i32> %728 to <4 x float>, !dbg !98
  %730 = fcmp olt <4 x float> %724, %729, !dbg !138
  %731 = fcmp uno <4 x float> %729, zeroinitializer, !dbg !140
  %732 = or <4 x i1> %730, %731, !dbg !141
  %.v21 = select <4 x i1> %732, <4 x i32> %728, <4 x i32> %.v20, !dbg !142
  %733 = bitcast <4 x i32> %.v21 to <4 x float>, !dbg !142
  %734 = insertelement <4 x i32> poison, i32 %461, i64 0, !dbg !105
  %735 = insertelement <4 x i32> %734, i32 %462, i64 1, !dbg !105
  %736 = insertelement <4 x i32> %735, i32 %463, i64 2, !dbg !105
  %737 = insertelement <4 x i32> %736, i32 %464, i64 3, !dbg !105
  %738 = bitcast <4 x i32> %737 to <4 x float>, !dbg !105
  %739 = fcmp olt <4 x float> %733, %738, !dbg !143
  %740 = bitcast i32 %461 to float, !dbg !145
  %741 = fcmp uno float %740, 0.000000e+00, !dbg !145
  %742 = bitcast i32 %462 to float, !dbg !145
  %743 = fcmp uno float %742, 0.000000e+00, !dbg !145
  %744 = bitcast i32 %463 to float, !dbg !145
  %745 = fcmp uno float %744, 0.000000e+00, !dbg !145
  %746 = bitcast i32 %464 to float, !dbg !145
  %747 = fcmp uno float %746, 0.000000e+00, !dbg !145
  %748 = extractelement <4 x i1> %739, i64 0, !dbg !146
  %749 = or i1 %748, %741, !dbg !146
  %750 = extractelement <4 x i1> %739, i64 1, !dbg !146
  %751 = or i1 %750, %743, !dbg !146
  %752 = extractelement <4 x i1> %739, i64 2, !dbg !146
  %753 = or i1 %752, %745, !dbg !146
  %754 = extractelement <4 x i1> %739, i64 3, !dbg !146
  %755 = or i1 %754, %747, !dbg !146
  %756 = zext <4 x i1> %676 to <4 x i8>, !dbg !147
  %757 = select <4 x i1> %685, <4 x i8> splat (i8 2), <4 x i8> %756, !dbg !148
  %758 = select <4 x i1> %694, <4 x i8> splat (i8 3), <4 x i8> %757, !dbg !149
  %759 = select <4 x i1> %703, <4 x i8> splat (i8 4), <4 x i8> %758, !dbg !150
  %760 = select <4 x i1> %712, <4 x i8> splat (i8 5), <4 x i8> %759, !dbg !151
  %761 = select <4 x i1> %721, <4 x i8> splat (i8 6), <4 x i8> %760, !dbg !152
  %762 = select <4 x i1> %730, <4 x i8> splat (i8 7), <4 x i8> %761, !dbg !153
  %763 = select <4 x i1> %739, <4 x i8> splat (i8 8), <4 x i8> %762, !dbg !154
  %764 = insertelement <4 x i32> poison, i32 %138, i64 0, !dbg !39
  %765 = insertelement <4 x i32> %764, i32 %139, i64 1, !dbg !39
  %766 = insertelement <4 x i32> %765, i32 %140, i64 2, !dbg !39
  %767 = insertelement <4 x i32> %766, i32 %141, i64 3, !dbg !39
  %768 = bitcast <4 x i32> %767 to <4 x float>, !dbg !39
  %769 = insertelement <4 x i32> poison, i32 %180, i64 0, !dbg !48
  %770 = insertelement <4 x i32> %769, i32 %181, i64 1, !dbg !48
  %771 = insertelement <4 x i32> %770, i32 %182, i64 2, !dbg !48
  %772 = insertelement <4 x i32> %771, i32 %183, i64 3, !dbg !48
  %773 = bitcast <4 x i32> %772 to <4 x float>, !dbg !48
  %774 = fcmp ogt <4 x float> %773, %768, !dbg !106
  %775 = fcmp uno <4 x float> %773, zeroinitializer, !dbg !110
  %776 = or <4 x i1> %774, %775, !dbg !111
  %.v22 = select <4 x i1> %776, <4 x i32> %772, <4 x i32> %767, !dbg !112
  %777 = bitcast <4 x i32> %.v22 to <4 x float>, !dbg !112
  %778 = insertelement <4 x i32> poison, i32 %224, i64 0, !dbg !60
  %779 = insertelement <4 x i32> %778, i32 %225, i64 1, !dbg !60
  %780 = insertelement <4 x i32> %779, i32 %226, i64 2, !dbg !60
  %781 = insertelement <4 x i32> %780, i32 %227, i64 3, !dbg !60
  %782 = bitcast <4 x i32> %781 to <4 x float>, !dbg !60
  %783 = fcmp olt <4 x float> %777, %782, !dbg !113
  %784 = fcmp uno <4 x float> %782, zeroinitializer, !dbg !115
  %785 = or <4 x i1> %783, %784, !dbg !116
  %.v23 = select <4 x i1> %785, <4 x i32> %781, <4 x i32> %.v22, !dbg !117
  %786 = bitcast <4 x i32> %.v23 to <4 x float>, !dbg !117
  %787 = insertelement <4 x i32> poison, i32 %265, i64 0, !dbg !68
  %788 = insertelement <4 x i32> %787, i32 %266, i64 1, !dbg !68
  %789 = insertelement <4 x i32> %788, i32 %267, i64 2, !dbg !68
  %790 = insertelement <4 x i32> %789, i32 %268, i64 3, !dbg !68
  %791 = bitcast <4 x i32> %790 to <4 x float>, !dbg !68
  %792 = fcmp olt <4 x float> %786, %791, !dbg !118
  %793 = fcmp uno <4 x float> %791, zeroinitializer, !dbg !120
  %794 = or <4 x i1> %792, %793, !dbg !121
  %.v24 = select <4 x i1> %794, <4 x i32> %790, <4 x i32> %.v23, !dbg !122
  %795 = bitcast <4 x i32> %.v24 to <4 x float>, !dbg !122
  %796 = insertelement <4 x i32> poison, i32 %305, i64 0, !dbg !74
  %797 = insertelement <4 x i32> %796, i32 %306, i64 1, !dbg !74
  %798 = insertelement <4 x i32> %797, i32 %307, i64 2, !dbg !74
  %799 = insertelement <4 x i32> %798, i32 %308, i64 3, !dbg !74
  %800 = bitcast <4 x i32> %799 to <4 x float>, !dbg !74
  %801 = fcmp olt <4 x float> %795, %800, !dbg !123
  %802 = fcmp uno <4 x float> %800, zeroinitializer, !dbg !125
  %803 = or <4 x i1> %801, %802, !dbg !126
  %.v25 = select <4 x i1> %803, <4 x i32> %799, <4 x i32> %.v24, !dbg !127
  %804 = bitcast <4 x i32> %.v25 to <4 x float>, !dbg !127
  %805 = insertelement <4 x i32> poison, i32 %345, i64 0, !dbg !82
  %806 = insertelement <4 x i32> %805, i32 %346, i64 1, !dbg !82
  %807 = insertelement <4 x i32> %806, i32 %347, i64 2, !dbg !82
  %808 = insertelement <4 x i32> %807, i32 %348, i64 3, !dbg !82
  %809 = bitcast <4 x i32> %808 to <4 x float>, !dbg !82
  %810 = fcmp olt <4 x float> %804, %809, !dbg !128
  %811 = fcmp uno <4 x float> %809, zeroinitializer, !dbg !130
  %812 = or <4 x i1> %810, %811, !dbg !131
  %.v26 = select <4 x i1> %812, <4 x i32> %808, <4 x i32> %.v25, !dbg !132
  %813 = bitcast <4 x i32> %.v26 to <4 x float>, !dbg !132
  %814 = insertelement <4 x i32> poison, i32 %386, i64 0, !dbg !90
  %815 = insertelement <4 x i32> %814, i32 %387, i64 1, !dbg !90
  %816 = insertelement <4 x i32> %815, i32 %388, i64 2, !dbg !90
  %817 = insertelement <4 x i32> %816, i32 %389, i64 3, !dbg !90
  %818 = bitcast <4 x i32> %817 to <4 x float>, !dbg !90
  %819 = fcmp olt <4 x float> %813, %818, !dbg !133
  %820 = fcmp uno <4 x float> %818, zeroinitializer, !dbg !135
  %821 = or <4 x i1> %819, %820, !dbg !136
  %.v27 = select <4 x i1> %821, <4 x i32> %817, <4 x i32> %.v26, !dbg !137
  %822 = bitcast <4 x i32> %.v27 to <4 x float>, !dbg !137
  %823 = insertelement <4 x i32> poison, i32 %426, i64 0, !dbg !98
  %824 = insertelement <4 x i32> %823, i32 %427, i64 1, !dbg !98
  %825 = insertelement <4 x i32> %824, i32 %428, i64 2, !dbg !98
  %826 = insertelement <4 x i32> %825, i32 %429, i64 3, !dbg !98
  %827 = bitcast <4 x i32> %826 to <4 x float>, !dbg !98
  %828 = fcmp olt <4 x float> %822, %827, !dbg !138
  %829 = fcmp uno <4 x float> %827, zeroinitializer, !dbg !140
  %830 = or <4 x i1> %828, %829, !dbg !141
  %.v28 = select <4 x i1> %830, <4 x i32> %826, <4 x i32> %.v27, !dbg !142
  %831 = bitcast <4 x i32> %.v28 to <4 x float>, !dbg !142
  %832 = insertelement <4 x i32> poison, i32 %466, i64 0, !dbg !105
  %833 = insertelement <4 x i32> %832, i32 %467, i64 1, !dbg !105
  %834 = insertelement <4 x i32> %833, i32 %468, i64 2, !dbg !105
  %835 = insertelement <4 x i32> %834, i32 %469, i64 3, !dbg !105
  %836 = bitcast <4 x i32> %835 to <4 x float>, !dbg !105
  %837 = fcmp olt <4 x float> %831, %836, !dbg !143
  %838 = bitcast i32 %466 to float, !dbg !145
  %839 = fcmp uno float %838, 0.000000e+00, !dbg !145
  %840 = bitcast i32 %467 to float, !dbg !145
  %841 = fcmp uno float %840, 0.000000e+00, !dbg !145
  %842 = bitcast i32 %468 to float, !dbg !145
  %843 = fcmp uno float %842, 0.000000e+00, !dbg !145
  %844 = bitcast i32 %469 to float, !dbg !145
  %845 = fcmp uno float %844, 0.000000e+00, !dbg !145
  %846 = extractelement <4 x i1> %837, i64 0, !dbg !146
  %847 = or i1 %846, %839, !dbg !146
  %848 = extractelement <4 x i1> %837, i64 1, !dbg !146
  %849 = or i1 %848, %841, !dbg !146
  %850 = extractelement <4 x i1> %837, i64 2, !dbg !146
  %851 = or i1 %850, %843, !dbg !146
  %852 = extractelement <4 x i1> %837, i64 3, !dbg !146
  %853 = or i1 %852, %845, !dbg !146
  %854 = zext <4 x i1> %774 to <4 x i8>, !dbg !147
  %855 = select <4 x i1> %783, <4 x i8> splat (i8 2), <4 x i8> %854, !dbg !148
  %856 = select <4 x i1> %792, <4 x i8> splat (i8 3), <4 x i8> %855, !dbg !149
  %857 = select <4 x i1> %801, <4 x i8> splat (i8 4), <4 x i8> %856, !dbg !150
  %858 = select <4 x i1> %810, <4 x i8> splat (i8 5), <4 x i8> %857, !dbg !151
  %859 = select <4 x i1> %819, <4 x i8> splat (i8 6), <4 x i8> %858, !dbg !152
  %860 = select <4 x i1> %828, <4 x i8> splat (i8 7), <4 x i8> %859, !dbg !153
  %861 = select <4 x i1> %837, <4 x i8> splat (i8 8), <4 x i8> %860, !dbg !154
  %862 = mul i32 %53, 289, !dbg !155
  %863 = add i32 %862, %.decomposed30, !dbg !156
  %864 = add i32 %862, %.decomposed32, !dbg !156
  %865 = add i32 %862, %.decomposed34, !dbg !156
  %866 = add i32 %862, %.decomposed36, !dbg !156
  %867 = add i32 %862, %.decomposed38, !dbg !156
  %868 = add i32 %862, %.decomposed40, !dbg !156
  %869 = add i32 %862, %.decomposed42, !dbg !156
  %870 = add i32 %862, %.decomposed44, !dbg !156
  %871 = add i32 %862, %.decomposed46, !dbg !156
  %872 = add i32 %862, %.decomposed48, !dbg !156
  %873 = add i32 %862, %.decomposed50, !dbg !156
  %874 = add i32 %862, %.decomposed52, !dbg !156
  %875 = add i32 %862, %.decomposed54, !dbg !156
  %876 = add i32 %862, %.decomposed56, !dbg !156
  %877 = add i32 %862, %.decomposed58, !dbg !156
  %878 = mul i32 %58, 110976, !dbg !157
  %879 = mul i32 %59, 110976, !dbg !157
  %880 = mul i32 %60, 110976, !dbg !157
  %881 = mul i32 %61, 110976, !dbg !157
  %882 = mul i32 %62, 110976, !dbg !157
  %883 = mul i32 %63, 110976, !dbg !157
  %884 = mul i32 %64, 110976, !dbg !157
  %885 = mul i32 %65, 110976, !dbg !157
  %886 = mul i32 %66, 110976, !dbg !157
  %887 = mul i32 %67, 110976, !dbg !157
  %888 = mul i32 %68, 110976, !dbg !157
  %889 = mul i32 %69, 110976, !dbg !157
  %890 = mul i32 %70, 110976, !dbg !157
  %891 = mul i32 %71, 110976, !dbg !157
  %892 = mul i32 %72, 110976, !dbg !157
  %893 = mul i32 %73, 110976, !dbg !157
  %894 = add i32 %878, %.decomposed, !dbg !156
  %895 = add i32 %894, %862, !dbg !158
  %896 = add i32 %863, %879, !dbg !158
  %897 = add i32 %864, %880, !dbg !158
  %898 = add i32 %865, %881, !dbg !158
  %899 = add i32 %866, %882, !dbg !158
  %900 = add i32 %867, %883, !dbg !158
  %901 = add i32 %868, %884, !dbg !158
  %902 = add i32 %869, %885, !dbg !158
  %903 = add i32 %870, %886, !dbg !158
  %904 = add i32 %871, %887, !dbg !158
  %905 = add i32 %872, %888, !dbg !158
  %906 = add i32 %873, %889, !dbg !158
  %907 = add i32 %874, %890, !dbg !158
  %908 = add i32 %875, %891, !dbg !158
  %909 = add i32 %876, %892, !dbg !158
  %910 = add i32 %877, %893, !dbg !158
  %911 = sext i32 %895 to i64, !dbg !159
  %912 = getelementptr float, ptr addrspace(1) %1, i64 %911, !dbg !159
  %913 = sext i32 %896 to i64, !dbg !159
  %914 = getelementptr float, ptr addrspace(1) %1, i64 %913, !dbg !159
  %915 = sext i32 %897 to i64, !dbg !159
  %916 = getelementptr float, ptr addrspace(1) %1, i64 %915, !dbg !159
  %917 = sext i32 %898 to i64, !dbg !159
  %918 = getelementptr float, ptr addrspace(1) %1, i64 %917, !dbg !159
  %919 = sext i32 %899 to i64, !dbg !159
  %920 = getelementptr float, ptr addrspace(1) %1, i64 %919, !dbg !159
  %921 = sext i32 %900 to i64, !dbg !159
  %922 = getelementptr float, ptr addrspace(1) %1, i64 %921, !dbg !159
  %923 = sext i32 %901 to i64, !dbg !159
  %924 = getelementptr float, ptr addrspace(1) %1, i64 %923, !dbg !159
  %925 = sext i32 %902 to i64, !dbg !159
  %926 = getelementptr float, ptr addrspace(1) %1, i64 %925, !dbg !159
  %927 = sext i32 %903 to i64, !dbg !159
  %928 = getelementptr float, ptr addrspace(1) %1, i64 %927, !dbg !159
  %929 = sext i32 %904 to i64, !dbg !159
  %930 = getelementptr float, ptr addrspace(1) %1, i64 %929, !dbg !159
  %931 = sext i32 %905 to i64, !dbg !159
  %932 = getelementptr float, ptr addrspace(1) %1, i64 %931, !dbg !159
  %933 = sext i32 %906 to i64, !dbg !159
  %934 = getelementptr float, ptr addrspace(1) %1, i64 %933, !dbg !159
  %935 = sext i32 %907 to i64, !dbg !159
  %936 = getelementptr float, ptr addrspace(1) %1, i64 %935, !dbg !159
  %937 = sext i32 %908 to i64, !dbg !159
  %938 = getelementptr float, ptr addrspace(1) %1, i64 %937, !dbg !159
  %939 = sext i32 %909 to i64, !dbg !159
  %940 = getelementptr float, ptr addrspace(1) %1, i64 %939, !dbg !159
  %941 = sext i32 %910 to i64, !dbg !159
  %942 = getelementptr float, ptr addrspace(1) %1, i64 %941, !dbg !159
  %943 = and i1 %28, %55, !dbg !160
  %944 = and i1 %29, %55, !dbg !160
  %945 = and i1 %30, %55, !dbg !160
  %946 = and i1 %31, %55, !dbg !160
  %947 = and i1 %32, %55, !dbg !160
  %948 = and i1 %33, %55, !dbg !160
  %949 = and i1 %34, %55, !dbg !160
  %950 = and i1 %35, %55, !dbg !160
  %951 = and i1 %36, %55, !dbg !160
  %952 = and i1 %37, %55, !dbg !160
  %953 = and i1 %38, %55, !dbg !160
  %954 = and i1 %39, %55, !dbg !160
  %955 = and i1 %40, %55, !dbg !160
  %956 = and i1 %41, %55, !dbg !160
  %957 = and i1 %42, %55, !dbg !160
  %958 = and i1 %43, %55, !dbg !160
  %959 = and i1 %27, %54, !dbg !160
  %960 = and i32 %46, 3840, !dbg !161
  %961 = and i32 %46, 4080, !dbg !161
  %962 = lshr exact i32 %960, 8, !dbg !161
  %963 = or disjoint i32 %962, %961, !dbg !161
  %964 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %963, !dbg !161
  %965 = extractelement <4 x i32> %.v7, i64 0, !dbg !161
  %966 = select i1 %553, i32 %451, i32 %965, !dbg !162
  %967 = insertelement <1 x i32> poison, i32 %966, i64 0, !dbg !161
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %964, <1 x i32> %967, i1 true) #2, !dbg !161
  %968 = or disjoint i32 %961, 1, !dbg !161
  %969 = lshr exact i32 %960, 6, !dbg !161
  %970 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %969, !dbg !161
  %971 = getelementptr inbounds float, ptr addrspace(3) %970, i32 %968, !dbg !161
  %972 = extractelement <4 x i32> %.v7, i64 1, !dbg !161
  %973 = select i1 %555, i32 %452, i32 %972, !dbg !162
  %974 = insertelement <1 x i32> poison, i32 %973, i64 0, !dbg !161
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %971, <1 x i32> %974, i1 true) #2, !dbg !161
  %975 = or disjoint i32 %961, 2, !dbg !161
  %976 = getelementptr inbounds float, ptr addrspace(3) %970, i32 %975, !dbg !161
  %977 = extractelement <4 x i32> %.v7, i64 2, !dbg !161
  %978 = select i1 %557, i32 %453, i32 %977, !dbg !162
  %979 = insertelement <1 x i32> poison, i32 %978, i64 0, !dbg !161
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %976, <1 x i32> %979, i1 true) #2, !dbg !161
  %980 = or disjoint i32 %961, 3, !dbg !161
  %981 = getelementptr inbounds float, ptr addrspace(3) %970, i32 %980, !dbg !161
  %982 = extractelement <4 x i32> %.v7, i64 3, !dbg !161
  %983 = select i1 %559, i32 %454, i32 %982, !dbg !162
  %984 = insertelement <1 x i32> poison, i32 %983, i64 0, !dbg !161
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %981, <1 x i32> %984, i1 true) #2, !dbg !161
  %985 = or disjoint i32 %961, 4, !dbg !161
  %986 = getelementptr inbounds float, ptr addrspace(3) %970, i32 %985, !dbg !161
  %987 = extractelement <4 x i32> %.v14, i64 0, !dbg !161
  %988 = select i1 %651, i32 %456, i32 %987, !dbg !162
  %989 = insertelement <1 x i32> poison, i32 %988, i64 0, !dbg !161
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %986, <1 x i32> %989, i1 true) #2, !dbg !161
  %990 = or disjoint i32 %961, 5, !dbg !161
  %991 = getelementptr inbounds float, ptr addrspace(3) %970, i32 %990, !dbg !161
  %992 = extractelement <4 x i32> %.v14, i64 1, !dbg !161
  %993 = select i1 %653, i32 %457, i32 %992, !dbg !162
  %994 = insertelement <1 x i32> poison, i32 %993, i64 0, !dbg !161
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %991, <1 x i32> %994, i1 true) #2, !dbg !161
  %995 = or disjoint i32 %961, 6, !dbg !161
  %996 = getelementptr inbounds float, ptr addrspace(3) %970, i32 %995, !dbg !161
  %997 = extractelement <4 x i32> %.v14, i64 2, !dbg !161
  %998 = select i1 %655, i32 %458, i32 %997, !dbg !162
  %999 = insertelement <1 x i32> poison, i32 %998, i64 0, !dbg !161
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %996, <1 x i32> %999, i1 true) #2, !dbg !161
  %1000 = or disjoint i32 %961, 7, !dbg !161
  %1001 = getelementptr inbounds float, ptr addrspace(3) %970, i32 %1000, !dbg !161
  %1002 = extractelement <4 x i32> %.v14, i64 3, !dbg !161
  %1003 = select i1 %657, i32 %459, i32 %1002, !dbg !162
  %1004 = insertelement <1 x i32> poison, i32 %1003, i64 0, !dbg !161
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1001, <1 x i32> %1004, i1 true) #2, !dbg !161
  %1005 = or disjoint i32 %961, 8, !dbg !161
  %1006 = getelementptr inbounds float, ptr addrspace(3) %970, i32 %1005, !dbg !161
  %1007 = extractelement <4 x i32> %.v21, i64 0, !dbg !161
  %1008 = select i1 %749, i32 %461, i32 %1007, !dbg !162
  %1009 = insertelement <1 x i32> poison, i32 %1008, i64 0, !dbg !161
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1006, <1 x i32> %1009, i1 true) #2, !dbg !161
  %1010 = or disjoint i32 %961, 9, !dbg !161
  %1011 = getelementptr inbounds float, ptr addrspace(3) %970, i32 %1010, !dbg !161
  %1012 = extractelement <4 x i32> %.v21, i64 1, !dbg !161
  %1013 = select i1 %751, i32 %462, i32 %1012, !dbg !162
  %1014 = insertelement <1 x i32> poison, i32 %1013, i64 0, !dbg !161
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1011, <1 x i32> %1014, i1 true) #2, !dbg !161
  %1015 = or disjoint i32 %961, 10, !dbg !161
  %1016 = getelementptr inbounds float, ptr addrspace(3) %970, i32 %1015, !dbg !161
  %1017 = extractelement <4 x i32> %.v21, i64 2, !dbg !161
  %1018 = select i1 %753, i32 %463, i32 %1017, !dbg !162
  %1019 = insertelement <1 x i32> poison, i32 %1018, i64 0, !dbg !161
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1016, <1 x i32> %1019, i1 true) #2, !dbg !161
  %1020 = or disjoint i32 %961, 11, !dbg !161
  %1021 = getelementptr inbounds float, ptr addrspace(3) %970, i32 %1020, !dbg !161
  %1022 = extractelement <4 x i32> %.v21, i64 3, !dbg !161
  %1023 = select i1 %755, i32 %464, i32 %1022, !dbg !162
  %1024 = insertelement <1 x i32> poison, i32 %1023, i64 0, !dbg !161
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1021, <1 x i32> %1024, i1 true) #2, !dbg !161
  %1025 = or disjoint i32 %961, 12, !dbg !161
  %1026 = getelementptr inbounds float, ptr addrspace(3) %970, i32 %1025, !dbg !161
  %1027 = extractelement <4 x i32> %.v28, i64 0, !dbg !161
  %1028 = select i1 %847, i32 %466, i32 %1027, !dbg !162
  %1029 = insertelement <1 x i32> poison, i32 %1028, i64 0, !dbg !161
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1026, <1 x i32> %1029, i1 true) #2, !dbg !161
  %1030 = or disjoint i32 %961, 13, !dbg !161
  %1031 = getelementptr inbounds float, ptr addrspace(3) %970, i32 %1030, !dbg !161
  %1032 = extractelement <4 x i32> %.v28, i64 1, !dbg !161
  %1033 = select i1 %849, i32 %467, i32 %1032, !dbg !162
  %1034 = insertelement <1 x i32> poison, i32 %1033, i64 0, !dbg !161
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1031, <1 x i32> %1034, i1 true) #2, !dbg !161
  %1035 = or disjoint i32 %961, 14, !dbg !161
  %1036 = getelementptr inbounds float, ptr addrspace(3) %970, i32 %1035, !dbg !161
  %1037 = extractelement <4 x i32> %.v28, i64 2, !dbg !161
  %1038 = select i1 %851, i32 %468, i32 %1037, !dbg !162
  %1039 = insertelement <1 x i32> poison, i32 %1038, i64 0, !dbg !161
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1036, <1 x i32> %1039, i1 true) #2, !dbg !161
  %1040 = or disjoint i32 %961, 15, !dbg !161
  %1041 = getelementptr inbounds float, ptr addrspace(3) %970, i32 %1040, !dbg !161
  %1042 = extractelement <4 x i32> %.v28, i64 3, !dbg !161
  %1043 = select i1 %853, i32 %469, i32 %1042, !dbg !162
  %1044 = insertelement <1 x i32> poison, i32 %1043, i64 0, !dbg !161
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %1041, <1 x i32> %1044, i1 true) #2, !dbg !161
  tail call void @llvm.nvvm.barrier0(), !dbg !161
  %1045 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %48, !dbg !161
  %1046 = load i32, ptr addrspace(3) %1045, align 4, !dbg !161
  %1047 = getelementptr inbounds i8, ptr addrspace(3) %1045, i32 1028, !dbg !161
  %1048 = load i32, ptr addrspace(3) %1047, align 4, !dbg !161
  %1049 = getelementptr inbounds i8, ptr addrspace(3) %1045, i32 2056, !dbg !161
  %1050 = load i32, ptr addrspace(3) %1049, align 4, !dbg !161
  %1051 = getelementptr inbounds i8, ptr addrspace(3) %1045, i32 3084, !dbg !161
  %1052 = load i32, ptr addrspace(3) %1051, align 4, !dbg !161
  %1053 = getelementptr inbounds i8, ptr addrspace(3) %1045, i32 4112, !dbg !161
  %1054 = load i32, ptr addrspace(3) %1053, align 4, !dbg !161
  %1055 = getelementptr inbounds i8, ptr addrspace(3) %1045, i32 5140, !dbg !161
  %1056 = load i32, ptr addrspace(3) %1055, align 4, !dbg !161
  %1057 = getelementptr inbounds i8, ptr addrspace(3) %1045, i32 6168, !dbg !161
  %1058 = load i32, ptr addrspace(3) %1057, align 4, !dbg !161
  %1059 = getelementptr inbounds i8, ptr addrspace(3) %1045, i32 7196, !dbg !161
  %1060 = load i32, ptr addrspace(3) %1059, align 4, !dbg !161
  %1061 = getelementptr inbounds i8, ptr addrspace(3) %1045, i32 8224, !dbg !161
  %1062 = load i32, ptr addrspace(3) %1061, align 4, !dbg !161
  %1063 = getelementptr inbounds i8, ptr addrspace(3) %1045, i32 9252, !dbg !161
  %1064 = load i32, ptr addrspace(3) %1063, align 4, !dbg !161
  %1065 = getelementptr inbounds i8, ptr addrspace(3) %1045, i32 10280, !dbg !161
  %1066 = load i32, ptr addrspace(3) %1065, align 4, !dbg !161
  %1067 = getelementptr inbounds i8, ptr addrspace(3) %1045, i32 11308, !dbg !161
  %1068 = load i32, ptr addrspace(3) %1067, align 4, !dbg !161
  %1069 = getelementptr inbounds i8, ptr addrspace(3) %1045, i32 12336, !dbg !161
  %1070 = load i32, ptr addrspace(3) %1069, align 4, !dbg !161
  %1071 = getelementptr inbounds i8, ptr addrspace(3) %1045, i32 13364, !dbg !161
  %1072 = load i32, ptr addrspace(3) %1071, align 4, !dbg !161
  %1073 = getelementptr inbounds i8, ptr addrspace(3) %1045, i32 14392, !dbg !161
  %1074 = load i32, ptr addrspace(3) %1073, align 4, !dbg !161
  %1075 = getelementptr inbounds i8, ptr addrspace(3) %1045, i32 15420, !dbg !161
  %1076 = load i32, ptr addrspace(3) %1075, align 4, !dbg !161
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1046, ptr addrspace(1) %912, i1 %943) #2, !dbg !161
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1048, ptr addrspace(1) %914, i1 %944) #2, !dbg !161
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1050, ptr addrspace(1) %916, i1 %945) #2, !dbg !161
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1052, ptr addrspace(1) %918, i1 %946) #2, !dbg !161
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1054, ptr addrspace(1) %920, i1 %947) #2, !dbg !161
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1056, ptr addrspace(1) %922, i1 %948) #2, !dbg !161
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1058, ptr addrspace(1) %924, i1 %949) #2, !dbg !161
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1060, ptr addrspace(1) %926, i1 %950) #2, !dbg !161
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1062, ptr addrspace(1) %928, i1 %951) #2, !dbg !161
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1064, ptr addrspace(1) %930, i1 %952) #2, !dbg !161
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1066, ptr addrspace(1) %932, i1 %953) #2, !dbg !161
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1068, ptr addrspace(1) %934, i1 %954) #2, !dbg !161
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1070, ptr addrspace(1) %936, i1 %955) #2, !dbg !161
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1072, ptr addrspace(1) %938, i1 %956) #2, !dbg !161
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1074, ptr addrspace(1) %940, i1 %957) #2, !dbg !161
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1076, ptr addrspace(1) %942, i1 %958) #2, !dbg !161
  %1077 = shl i32 %11, 8, !dbg !163
  %1078 = add i32 %49, %1077, !dbg !164
  %1079 = sext i32 %1078 to i64, !dbg !165
  %1080 = getelementptr i8, ptr addrspace(1) %2, i64 %1079, !dbg !165
  %1081 = bitcast <4 x i8> %567 to i32, !dbg !166
  %1082 = bitcast <4 x i8> %665 to i32, !dbg !166
  %1083 = bitcast <4 x i8> %763 to i32, !dbg !166
  %1084 = bitcast <4 x i8> %861 to i32, !dbg !166
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1081, i32 %1082, i32 %1083, i32 %1084, ptr addrspace(1) %1080, i1 %959) #2, !dbg !166
  ret void, !dbg !167
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "chvcla2zmede5mb4omznrcq5e6yiy7c2kjevpimbpf2dhhpgvtyc.py", directory: "inductor_cache/hv")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_11, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_11, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_11", linkageName: "triton_poi_fused_max_pool2d_with_indices_11", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 28, column: 21, scope: !7)
!21 = !DILocation(line: 31, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 19, scope: !7)
!23 = !DILocation(line: 45, column: 73, scope: !7)
!24 = !DILocation(line: 29, column: 19, scope: !7)
!25 = !DILocation(line: 67, column: 20, scope: !7)
!26 = !DILocation(line: 36, column: 19, scope: !7)
!27 = !DILocation(line: 40, column: 20, scope: !7)
!28 = !DILocation(line: 41, column: 19, scope: !7)
!29 = !DILocation(line: 44, column: 19, scope: !7)
!30 = !DILocation(line: 45, column: 50, scope: !7)
!31 = !DILocation(line: 45, column: 61, scope: !7)
!32 = !DILocation(line: 45, column: 41, scope: !7)
!33 = !DILocation(line: 45, column: 46, scope: !7)
!34 = !DILocation(line: 45, column: 55, scope: !7)
!35 = !DILocation(line: 45, column: 66, scope: !7)
!36 = !DILocation(line: 45, column: 31, scope: !7)
!37 = !DILocation(line: 45, column: 86, scope: !7)
!38 = !DILocation(line: 45, column: 94, scope: !7)
!39 = !DILocation(line: 45, column: 78, scope: !7)
!40 = !DILocation(line: 47, column: 21, scope: !7)
!41 = !DILocation(line: 50, column: 19, scope: !7)
!42 = !DILocation(line: 51, column: 46, scope: !7)
!43 = !DILocation(line: 51, column: 55, scope: !7)
!44 = !DILocation(line: 51, column: 66, scope: !7)
!45 = !DILocation(line: 51, column: 31, scope: !7)
!46 = !DILocation(line: 51, column: 86, scope: !7)
!47 = !DILocation(line: 51, column: 94, scope: !7)
!48 = !DILocation(line: 51, column: 78, scope: !7)
!49 = !DILocation(line: 53, column: 16, scope: !7)
!50 = !DILocation(line: 55, column: 20, scope: !7)
!51 = !DILocation(line: 56, column: 20, scope: !7)
!52 = !DILocation(line: 83, column: 20, scope: !7)
!53 = !DILocation(line: 57, column: 19, scope: !7)
!54 = !DILocation(line: 58, column: 46, scope: !7)
!55 = !DILocation(line: 58, column: 55, scope: !7)
!56 = !DILocation(line: 58, column: 66, scope: !7)
!57 = !DILocation(line: 58, column: 31, scope: !7)
!58 = !DILocation(line: 58, column: 86, scope: !7)
!59 = !DILocation(line: 58, column: 94, scope: !7)
!60 = !DILocation(line: 58, column: 78, scope: !7)
!61 = !DILocation(line: 64, column: 20, scope: !7)
!62 = !DILocation(line: 65, column: 45, scope: !7)
!63 = !DILocation(line: 65, column: 54, scope: !7)
!64 = !DILocation(line: 65, column: 65, scope: !7)
!65 = !DILocation(line: 65, column: 31, scope: !7)
!66 = !DILocation(line: 65, column: 85, scope: !7)
!67 = !DILocation(line: 65, column: 93, scope: !7)
!68 = !DILocation(line: 65, column: 77, scope: !7)
!69 = !DILocation(line: 68, column: 45, scope: !7)
!70 = !DILocation(line: 68, column: 56, scope: !7)
!71 = !DILocation(line: 68, column: 31, scope: !7)
!72 = !DILocation(line: 68, column: 76, scope: !7)
!73 = !DILocation(line: 68, column: 84, scope: !7)
!74 = !DILocation(line: 68, column: 68, scope: !7)
!75 = !DILocation(line: 70, column: 20, scope: !7)
!76 = !DILocation(line: 71, column: 42, scope: !7)
!77 = !DILocation(line: 71, column: 51, scope: !7)
!78 = !DILocation(line: 71, column: 62, scope: !7)
!79 = !DILocation(line: 71, column: 31, scope: !7)
!80 = !DILocation(line: 71, column: 82, scope: !7)
!81 = !DILocation(line: 71, column: 90, scope: !7)
!82 = !DILocation(line: 71, column: 74, scope: !7)
!83 = !DILocation(line: 77, column: 20, scope: !7)
!84 = !DILocation(line: 78, column: 43, scope: !7)
!85 = !DILocation(line: 78, column: 52, scope: !7)
!86 = !DILocation(line: 78, column: 63, scope: !7)
!87 = !DILocation(line: 78, column: 31, scope: !7)
!88 = !DILocation(line: 78, column: 83, scope: !7)
!89 = !DILocation(line: 78, column: 91, scope: !7)
!90 = !DILocation(line: 78, column: 75, scope: !7)
!91 = !DILocation(line: 80, column: 20, scope: !7)
!92 = !DILocation(line: 81, column: 43, scope: !7)
!93 = !DILocation(line: 81, column: 52, scope: !7)
!94 = !DILocation(line: 81, column: 63, scope: !7)
!95 = !DILocation(line: 81, column: 31, scope: !7)
!96 = !DILocation(line: 81, column: 83, scope: !7)
!97 = !DILocation(line: 81, column: 91, scope: !7)
!98 = !DILocation(line: 81, column: 75, scope: !7)
!99 = !DILocation(line: 84, column: 43, scope: !7)
!100 = !DILocation(line: 84, column: 52, scope: !7)
!101 = !DILocation(line: 84, column: 63, scope: !7)
!102 = !DILocation(line: 84, column: 31, scope: !7)
!103 = !DILocation(line: 84, column: 83, scope: !7)
!104 = !DILocation(line: 84, column: 91, scope: !7)
!105 = !DILocation(line: 84, column: 75, scope: !7)
!106 = !DILocation(line: 118, column: 15, scope: !107, inlinedAt: !109)
!107 = distinct !DILexicalBlockFile(scope: !7, file: !108, discriminator: 0)
!108 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!109 = !DILocation(line: 52, column: 42, scope: !7)
!110 = !DILocation(line: 120, column: 21, scope: !107, inlinedAt: !109)
!111 = !DILocation(line: 120, column: 16, scope: !107, inlinedAt: !109)
!112 = !DILocation(line: 121, column: 29, scope: !107, inlinedAt: !109)
!113 = !DILocation(line: 118, column: 15, scope: !107, inlinedAt: !114)
!114 = !DILocation(line: 59, column: 42, scope: !7)
!115 = !DILocation(line: 120, column: 21, scope: !107, inlinedAt: !114)
!116 = !DILocation(line: 120, column: 16, scope: !107, inlinedAt: !114)
!117 = !DILocation(line: 121, column: 29, scope: !107, inlinedAt: !114)
!118 = !DILocation(line: 118, column: 15, scope: !107, inlinedAt: !119)
!119 = !DILocation(line: 66, column: 42, scope: !7)
!120 = !DILocation(line: 120, column: 21, scope: !107, inlinedAt: !119)
!121 = !DILocation(line: 120, column: 16, scope: !107, inlinedAt: !119)
!122 = !DILocation(line: 121, column: 29, scope: !107, inlinedAt: !119)
!123 = !DILocation(line: 118, column: 15, scope: !107, inlinedAt: !124)
!124 = !DILocation(line: 69, column: 42, scope: !7)
!125 = !DILocation(line: 120, column: 21, scope: !107, inlinedAt: !124)
!126 = !DILocation(line: 120, column: 16, scope: !107, inlinedAt: !124)
!127 = !DILocation(line: 121, column: 29, scope: !107, inlinedAt: !124)
!128 = !DILocation(line: 118, column: 15, scope: !107, inlinedAt: !129)
!129 = !DILocation(line: 72, column: 42, scope: !7)
!130 = !DILocation(line: 120, column: 21, scope: !107, inlinedAt: !129)
!131 = !DILocation(line: 120, column: 16, scope: !107, inlinedAt: !129)
!132 = !DILocation(line: 121, column: 29, scope: !107, inlinedAt: !129)
!133 = !DILocation(line: 118, column: 15, scope: !107, inlinedAt: !134)
!134 = !DILocation(line: 79, column: 42, scope: !7)
!135 = !DILocation(line: 120, column: 21, scope: !107, inlinedAt: !134)
!136 = !DILocation(line: 120, column: 16, scope: !107, inlinedAt: !134)
!137 = !DILocation(line: 121, column: 29, scope: !107, inlinedAt: !134)
!138 = !DILocation(line: 118, column: 15, scope: !107, inlinedAt: !139)
!139 = !DILocation(line: 82, column: 42, scope: !7)
!140 = !DILocation(line: 120, column: 21, scope: !107, inlinedAt: !139)
!141 = !DILocation(line: 120, column: 16, scope: !107, inlinedAt: !139)
!142 = !DILocation(line: 121, column: 29, scope: !107, inlinedAt: !139)
!143 = !DILocation(line: 118, column: 15, scope: !107, inlinedAt: !144)
!144 = !DILocation(line: 85, column: 42, scope: !7)
!145 = !DILocation(line: 120, column: 21, scope: !107, inlinedAt: !144)
!146 = !DILocation(line: 120, column: 16, scope: !107, inlinedAt: !144)
!147 = !DILocation(line: 89, column: 35, scope: !7)
!148 = !DILocation(line: 92, column: 35, scope: !7)
!149 = !DILocation(line: 95, column: 35, scope: !7)
!150 = !DILocation(line: 98, column: 35, scope: !7)
!151 = !DILocation(line: 101, column: 35, scope: !7)
!152 = !DILocation(line: 104, column: 35, scope: !7)
!153 = !DILocation(line: 107, column: 35, scope: !7)
!154 = !DILocation(line: 110, column: 35, scope: !7)
!155 = !DILocation(line: 111, column: 34, scope: !7)
!156 = !DILocation(line: 111, column: 30, scope: !7)
!157 = !DILocation(line: 111, column: 46, scope: !7)
!158 = !DILocation(line: 111, column: 39, scope: !7)
!159 = !DILocation(line: 111, column: 25, scope: !7)
!160 = !DILocation(line: 111, column: 66, scope: !7)
!161 = !DILocation(line: 111, column: 58, scope: !7)
!162 = !DILocation(line: 121, column: 29, scope: !107, inlinedAt: !144)
!163 = !DILocation(line: 112, column: 34, scope: !7)
!164 = !DILocation(line: 112, column: 30, scope: !7)
!165 = !DILocation(line: 112, column: 25, scope: !7)
!166 = !DILocation(line: 112, column: 46, scope: !7)
!167 = !DILocation(line: 112, column: 4, scope: !7)
