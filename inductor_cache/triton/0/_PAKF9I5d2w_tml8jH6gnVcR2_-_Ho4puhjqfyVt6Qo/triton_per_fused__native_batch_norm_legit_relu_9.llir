; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused__native_batch_norm_legit_relu_9(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !10
  %8 = icmp slt i32 %7, 768, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = and i32 %9, 15, !dbg !12
  %11 = shl i32 %7, 4, !dbg !13
  %12 = or disjoint i32 %11, %10, !dbg !14
  %13 = sext i32 %12 to i64, !dbg !15
  %14 = getelementptr float, ptr addrspace(1) %0, i64 %13, !dbg !15
  %15 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %14, i1 %8, i32 0, i1 %8) #4, !dbg !16
  %16 = bitcast i32 %15 to float, !dbg !16
  %17 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %14, i1 %8, i32 0, i1 %8) #4, !dbg !16
  %18 = bitcast i32 %17 to float, !dbg !16
  %19 = select i1 %8, float %16, float 0.000000e+00, !dbg !17
  %20 = select i1 %8, float %18, float 0.000000e+00, !dbg !17
  %21 = bitcast float %19 to i32, !dbg !18
  %22 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %21, i32 8, i32 31), !dbg !18
  %23 = bitcast i32 %22 to float, !dbg !18
  %24 = fadd float %19, %23, !dbg !22
  %25 = bitcast float %24 to i32, !dbg !18
  %26 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %25, i32 4, i32 31), !dbg !18
  %27 = bitcast i32 %26 to float, !dbg !18
  %28 = fadd float %24, %27, !dbg !22
  %29 = bitcast float %28 to i32, !dbg !18
  %30 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %29, i32 2, i32 31), !dbg !18
  %31 = bitcast i32 %30 to float, !dbg !18
  %32 = fadd float %28, %31, !dbg !22
  %33 = bitcast float %32 to i32, !dbg !18
  %34 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %33, i32 1, i32 31), !dbg !18
  %35 = bitcast i32 %34 to float, !dbg !18
  %36 = fadd float %32, %35, !dbg !22
  %37 = bitcast float %20 to i32, !dbg !18
  %38 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %37, i32 8, i32 31), !dbg !18
  %39 = bitcast i32 %38 to float, !dbg !18
  %40 = fadd float %20, %39, !dbg !22
  %41 = bitcast float %40 to i32, !dbg !18
  %42 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %41, i32 4, i32 31), !dbg !18
  %43 = bitcast i32 %42 to float, !dbg !18
  %44 = fadd float %40, %43, !dbg !22
  %45 = bitcast float %44 to i32, !dbg !18
  %46 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %45, i32 2, i32 31), !dbg !18
  %47 = bitcast i32 %46 to float, !dbg !18
  %48 = fadd float %44, %47, !dbg !22
  %49 = bitcast float %48 to i32, !dbg !18
  %50 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %49, i32 1, i32 31), !dbg !18
  %51 = bitcast i32 %50 to float, !dbg !18
  %52 = fadd float %48, %51, !dbg !22
  %53 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %36, float 1.600000e+01) #4, !dbg !24
  %54 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %52, float 1.600000e+01) #4, !dbg !24
  %55 = fsub float %16, %53, !dbg !25
  %56 = fsub float %18, %54, !dbg !25
  %57 = fmul float %55, %55, !dbg !26
  %58 = fmul float %56, %56, !dbg !26
  %59 = select i1 %8, float %57, float 0.000000e+00, !dbg !27
  %60 = select i1 %8, float %58, float 0.000000e+00, !dbg !27
  %61 = bitcast float %59 to i32, !dbg !28
  %62 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %61, i32 8, i32 31), !dbg !28
  %63 = bitcast i32 %62 to float, !dbg !28
  %64 = fadd float %59, %63, !dbg !30
  %65 = bitcast float %64 to i32, !dbg !28
  %66 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %65, i32 4, i32 31), !dbg !28
  %67 = bitcast i32 %66 to float, !dbg !28
  %68 = fadd float %64, %67, !dbg !30
  %69 = bitcast float %68 to i32, !dbg !28
  %70 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %69, i32 2, i32 31), !dbg !28
  %71 = bitcast i32 %70 to float, !dbg !28
  %72 = fadd float %68, %71, !dbg !30
  %73 = bitcast float %72 to i32, !dbg !28
  %74 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %73, i32 1, i32 31), !dbg !28
  %75 = bitcast i32 %74 to float, !dbg !28
  %76 = fadd float %72, %75, !dbg !30
  %77 = bitcast float %60 to i32, !dbg !28
  %78 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %77, i32 8, i32 31), !dbg !28
  %79 = bitcast i32 %78 to float, !dbg !28
  %80 = fadd float %60, %79, !dbg !30
  %81 = bitcast float %80 to i32, !dbg !28
  %82 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %81, i32 4, i32 31), !dbg !28
  %83 = bitcast i32 %82 to float, !dbg !28
  %84 = fadd float %80, %83, !dbg !30
  %85 = bitcast float %84 to i32, !dbg !28
  %86 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %85, i32 2, i32 31), !dbg !28
  %87 = bitcast i32 %86 to float, !dbg !28
  %88 = fadd float %84, %87, !dbg !30
  %89 = bitcast float %88 to i32, !dbg !28
  %90 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %89, i32 1, i32 31), !dbg !28
  %91 = bitcast i32 %90 to float, !dbg !28
  %92 = fadd float %88, %91, !dbg !30
  %93 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %76, float 1.600000e+01) #4, !dbg !31
  %94 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %92, float 1.600000e+01) #4, !dbg !31
  %95 = fadd float %93, 0x3EE4F8B580000000, !dbg !32
  %96 = fadd float %94, 0x3EE4F8B580000000, !dbg !32
  %97 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i = icmp eq i32 %97, 0, !dbg !33
  br i1 %.not.i, label %100, label %98, !dbg !33

98:                                               ; preds = %6
  %99 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %95), !dbg !33
  br label %__nv_rsqrtf.exit, !dbg !33

100:                                              ; preds = %6
  %101 = tail call float @llvm.nvvm.rsqrt.approx.f(float %95), !dbg !33
  br label %__nv_rsqrtf.exit, !dbg !33

__nv_rsqrtf.exit:                                 ; preds = %98, %100
  %.0.i = phi float [ %99, %98 ], [ %101, %100 ], !dbg !33
  %102 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i1 = icmp eq i32 %102, 0, !dbg !33
  br i1 %.not.i1, label %105, label %103, !dbg !33

103:                                              ; preds = %__nv_rsqrtf.exit
  %104 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %96), !dbg !33
  br label %__nv_rsqrtf.exit3, !dbg !33

105:                                              ; preds = %__nv_rsqrtf.exit
  %106 = tail call float @llvm.nvvm.rsqrt.approx.f(float %96), !dbg !33
  br label %__nv_rsqrtf.exit3, !dbg !33

__nv_rsqrtf.exit3:                                ; preds = %103, %105
  %.0.i2 = phi float [ %104, %103 ], [ %106, %105 ], !dbg !33
  %107 = fmul float %55, %.0.i, !dbg !34
  %108 = fcmp olt float %107, 0.000000e+00, !dbg !35
  %109 = select i1 %108, float 0.000000e+00, float %107, !dbg !39
  %110 = getelementptr float, ptr addrspace(1) %2, i64 %13, !dbg !40
  %111 = and i32 %9, 48, !dbg !41
  %112 = icmp eq i32 %111, 0, !dbg !41
  %113 = bitcast float %109 to i32, !dbg !41
  %114 = and i1 %112, %8, !dbg !41
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %113, ptr addrspace(1) %110, i1 %114) #4, !dbg !41
  %115 = sext i32 %7 to i64, !dbg !42
  %116 = getelementptr float, ptr addrspace(1) %3, i64 %115, !dbg !42
  %urem = and i32 %9, 63, !dbg !43
  %117 = icmp eq i32 %urem, 0, !dbg !43
  %118 = bitcast float %.0.i2 to i32, !dbg !43
  %119 = and i1 %117, %8, !dbg !43
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %118, ptr addrspace(1) %116, i1 %119) #4, !dbg !43
  %120 = getelementptr float, ptr addrspace(1) %1, i64 %115, !dbg !44
  %121 = bitcast float %54 to i32, !dbg !45
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %121, ptr addrspace(1) %120, i1 %119) #4, !dbg !45
  ret void, !dbg !46
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cib5adng2lxrmmpdgfybbqxphk7eqdj34vydjzkzsgau6thast4o.py", directory: "inductor_cache/ib")
!4 = !{ptr @triton_per_fused__native_batch_norm_legit_relu_9, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__native_batch_norm_legit_relu_9, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__native_batch_norm_legit_relu_9", linkageName: "triton_per_fused__native_batch_norm_legit_relu_9", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 21, scope: !7)
!12 = !DILocation(line: 26, column: 34, scope: !7)
!13 = !DILocation(line: 31, column: 38, scope: !7)
!14 = !DILocation(line: 31, column: 35, scope: !7)
!15 = !DILocation(line: 31, column: 30, scope: !7)
!16 = !DILocation(line: 31, column: 43, scope: !7)
!17 = !DILocation(line: 35, column: 33, scope: !7)
!18 = !DILocation(line: 267, column: 36, scope: !19, inlinedAt: !21)
!19 = distinct !DILexicalBlockFile(scope: !7, file: !20, discriminator: 0)
!20 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!21 = !DILocation(line: 36, column: 24, scope: !7)
!22 = !DILocation(line: 256, column: 15, scope: !23, inlinedAt: !21)
!23 = distinct !DILexicalBlockFile(scope: !19, file: !20, discriminator: 0)
!24 = !DILocation(line: 39, column: 19, scope: !7)
!25 = !DILocation(line: 40, column: 19, scope: !7)
!26 = !DILocation(line: 41, column: 20, scope: !7)
!27 = !DILocation(line: 43, column: 35, scope: !7)
!28 = !DILocation(line: 267, column: 36, scope: !19, inlinedAt: !29)
!29 = !DILocation(line: 44, column: 26, scope: !7)
!30 = !DILocation(line: 256, column: 15, scope: !23, inlinedAt: !29)
!31 = !DILocation(line: 47, column: 20, scope: !7)
!32 = !DILocation(line: 49, column: 20, scope: !7)
!33 = !DILocation(line: 50, column: 28, scope: !7)
!34 = !DILocation(line: 51, column: 20, scope: !7)
!35 = !DILocation(line: 118, column: 15, scope: !36, inlinedAt: !38)
!36 = distinct !DILexicalBlockFile(scope: !7, file: !37, discriminator: 0)
!37 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!38 = !DILocation(line: 53, column: 42, scope: !7)
!39 = !DILocation(line: 121, column: 29, scope: !36, inlinedAt: !38)
!40 = !DILocation(line: 54, column: 25, scope: !7)
!41 = !DILocation(line: 54, column: 45, scope: !7)
!42 = !DILocation(line: 55, column: 25, scope: !7)
!43 = !DILocation(line: 55, column: 37, scope: !7)
!44 = !DILocation(line: 56, column: 25, scope: !7)
!45 = !DILocation(line: 56, column: 37, scope: !7)
!46 = !DILocation(line: 56, column: 4, scope: !7)
