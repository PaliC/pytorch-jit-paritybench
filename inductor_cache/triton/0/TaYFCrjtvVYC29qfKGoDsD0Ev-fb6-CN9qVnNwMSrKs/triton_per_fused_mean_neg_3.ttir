#loc = loc("inductor_cache/pj/cpjgaxahbiikzsqrypgig3ukj4bpa5w4tovn5so7jkie3jatrult.py":19:0)
#loc1 = loc(unknown)
#loc9 = loc("inductor_cache/pj/cpjgaxahbiikzsqrypgig3ukj4bpa5w4tovn5so7jkie3jatrult.py":33:24)
#loc19 = loc(callsite(#loc1 at #loc9))
module {
  tt.func public @triton_per_fused_mean_neg_3(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/pj/cpjgaxahbiikzsqrypgig3ukj4bpa5w4tovn5so7jkie3jatrult.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/pj/cpjgaxahbiikzsqrypgig3ukj4bpa5w4tovn5so7jkie3jatrult.py":19:0), %arg2: i32 loc("inductor_cache/pj/cpjgaxahbiikzsqrypgig3ukj4bpa5w4tovn5so7jkie3jatrult.py":19:0)) attributes {noinline = false} {
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %cst = arith.constant dense<0.000000e+00> : tensor<1x1xf32> loc(#loc1)
    %cst_0 = arith.constant dense<5.382400e+04> : tensor<1x1xf32> loc(#loc1)
    %cst_1 = arith.constant dense<0.000000e+00> : tensor<1x8xf32> loc(#loc1)
    %cst_2 = arith.constant dense<7> : tensor<1x8xi32> loc(#loc1)
    %0 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32> loc(#loc2)
    %1 = tt.expand_dims %0 {axis = 0 : i32} : tensor<8xi32> -> tensor<1x8xi32> loc(#loc3)
    %2 = arith.cmpi slt, %1, %cst_2 : tensor<1x8xi32> loc(#loc4)
    %3 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<1x8x!tt.ptr<f32>> loc(#loc5)
    %4 = tt.addptr %3, %1 : tensor<1x8x!tt.ptr<f32>>, tensor<1x8xi32> loc(#loc5)
    %5 = tt.load %4, %2, %cst_1 : tensor<1x8x!tt.ptr<f32>> loc(#loc6)
    %6 = arith.select %2, %5, %cst_1 : tensor<1x8xi1>, tensor<1x8xf32> loc(#loc7)
    %7 = "tt.reduce"(%6) <{axis = 1 : i32}> ({
    ^bb0(%arg3: f32 loc(callsite(#loc1 at #loc9)), %arg4: f32 loc(callsite(#loc1 at #loc9))):
      %13 = arith.addf %arg3, %arg4 : f32 loc(#loc21)
      tt.reduce.return %13 : f32 loc(#loc18)
    }) : (tensor<1x8xf32>) -> tensor<1xf32> loc(#loc18)
    %8 = tt.expand_dims %7 {axis = 1 : i32} : tensor<1xf32> -> tensor<1x1xf32> loc(#loc11)
    %9 = arith.divf %8, %cst_0 : tensor<1x1xf32> loc(#loc12)
    %10 = arith.subf %cst, %9 : tensor<1x1xf32> loc(#loc13)
    gpu.barrier loc(#loc14)
    %11 = tt.addptr %arg0, %c0_i32 : !tt.ptr<f32>, i32 loc(#loc15)
    %12 = tt.splat %11 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>> loc(#loc15)
    tt.store %12, %10 : tensor<1x1x!tt.ptr<f32>> loc(#loc16)
    tt.return loc(#loc17)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/pj/cpjgaxahbiikzsqrypgig3ukj4bpa5w4tovn5so7jkie3jatrult.py":26:26)
#loc3 = loc("inductor_cache/pj/cpjgaxahbiikzsqrypgig3ukj4bpa5w4tovn5so7jkie3jatrult.py":26:34)
#loc4 = loc("inductor_cache/pj/cpjgaxahbiikzsqrypgig3ukj4bpa5w4tovn5so7jkie3jatrult.py":28:21)
#loc5 = loc("inductor_cache/pj/cpjgaxahbiikzsqrypgig3ukj4bpa5w4tovn5so7jkie3jatrult.py":30:30)
#loc6 = loc("inductor_cache/pj/cpjgaxahbiikzsqrypgig3ukj4bpa5w4tovn5so7jkie3jatrult.py":30:35)
#loc7 = loc("inductor_cache/pj/cpjgaxahbiikzsqrypgig3ukj4bpa5w4tovn5so7jkie3jatrult.py":32:33)
#loc8 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":267:36)
#loc10 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language/standard.py":256:15)
#loc11 = loc("inductor_cache/pj/cpjgaxahbiikzsqrypgig3ukj4bpa5w4tovn5so7jkie3jatrult.py":33:27)
#loc12 = loc("inductor_cache/pj/cpjgaxahbiikzsqrypgig3ukj4bpa5w4tovn5so7jkie3jatrult.py":35:18)
#loc13 = loc("inductor_cache/pj/cpjgaxahbiikzsqrypgig3ukj4bpa5w4tovn5so7jkie3jatrult.py":36:12)
#loc14 = loc("inductor_cache/pj/cpjgaxahbiikzsqrypgig3ukj4bpa5w4tovn5so7jkie3jatrult.py":37:4)
#loc15 = loc("inductor_cache/pj/cpjgaxahbiikzsqrypgig3ukj4bpa5w4tovn5so7jkie3jatrult.py":38:28)
#loc16 = loc("inductor_cache/pj/cpjgaxahbiikzsqrypgig3ukj4bpa5w4tovn5so7jkie3jatrult.py":38:70)
#loc17 = loc("inductor_cache/pj/cpjgaxahbiikzsqrypgig3ukj4bpa5w4tovn5so7jkie3jatrult.py":38:4)
#loc18 = loc(callsite(#loc8 at #loc9))
#loc20 = loc(callsite(#loc10 at #loc8))
#loc21 = loc(callsite(#loc20 at #loc9))
