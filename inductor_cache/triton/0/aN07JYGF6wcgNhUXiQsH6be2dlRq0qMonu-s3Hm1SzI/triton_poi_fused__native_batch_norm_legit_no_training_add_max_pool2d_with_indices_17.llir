; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_max_pool2d_with_indices_17(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %11 = shl i32 %10, 7, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = and i32 %12, 127, !dbg !12
  %14 = or disjoint i32 %11, %13, !dbg !13
  %15 = insertelement <2 x i32> poison, i32 %14, i64 0, !dbg !14
  %16 = shufflevector <2 x i32> %15, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !14
  %17 = sdiv <2 x i32> %16, <i32 2048, i32 1024>, !dbg !14
  %18 = srem <2 x i32> %17, splat (i32 2), !dbg !15
  %19 = srem i32 %14, 1024, !dbg !16
  %20 = sext i32 %14 to i64, !dbg !17
  %21 = getelementptr float, ptr addrspace(1) %2, i64 %20, !dbg !17
  %22 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %21, i1 true) #3, !dbg !18
  %23 = sext i32 %19 to i64, !dbg !19
  %24 = getelementptr float, ptr addrspace(1) %3, i64 %23, !dbg !19
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 true) #3, !dbg !20
  %26 = getelementptr float, ptr addrspace(1) %4, i64 %23, !dbg !21
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 true) #3, !dbg !22
  %28 = bitcast i32 %27 to float, !dbg !22
  %29 = getelementptr float, ptr addrspace(1) %5, i64 %23, !dbg !23
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 true) #3, !dbg !24
  %31 = getelementptr float, ptr addrspace(1) %6, i64 %23, !dbg !25
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 true) #3, !dbg !26
  %33 = extractelement <2 x i32> %18, i64 0, !dbg !27
  %34 = icmp sgt i32 %33, 0, !dbg !28
  %35 = extractelement <2 x i32> %18, i64 1, !dbg !27
  %36 = icmp sgt i32 %35, 0, !dbg !29
  %37 = and i1 %34, %36, !dbg !30
  %38 = shl nsw i32 %35, 11, !dbg !31
  %39 = extractelement <2 x i32> %17, i64 0, !dbg !32
  %40 = shl i32 %39, 13, !dbg !32
  %41 = add i32 %40, %19, !dbg !33
  %42 = add i32 %41, -5120, !dbg !34
  %43 = add i32 %42, %38, !dbg !35
  %44 = sext i32 %43 to i64, !dbg !36
  %45 = getelementptr float, ptr addrspace(1) %1, i64 %44, !dbg !36
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %45, i1 %37, i32 -8388608, i1 %37) #3, !dbg !37
  %47 = icmp sgt i32 %35, -1, !dbg !38
  %48 = and i1 %34, %47, !dbg !39
  %49 = add i32 %41, -4096, !dbg !40
  %50 = add i32 %49, %38, !dbg !41
  %51 = sext i32 %50 to i64, !dbg !42
  %52 = getelementptr float, ptr addrspace(1) %1, i64 %51, !dbg !42
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %52, i1 %48, i32 -8388608, i1 %48) #3, !dbg !43
  %54 = add i32 %41, -3072, !dbg !44
  %55 = add i32 %54, %38, !dbg !45
  %56 = sext i32 %55 to i64, !dbg !46
  %57 = getelementptr float, ptr addrspace(1) %1, i64 %56, !dbg !46
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %57, i1 %48, i32 -8388608, i1 %48) #3, !dbg !47
  %59 = icmp sgt i32 %33, -1, !dbg !48
  %60 = and i1 %59, %36, !dbg !49
  %61 = add i32 %41, -1024, !dbg !50
  %62 = add i32 %61, %38, !dbg !51
  %63 = sext i32 %62 to i64, !dbg !52
  %64 = getelementptr float, ptr addrspace(1) %1, i64 %63, !dbg !52
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %64, i1 %60, i32 -8388608, i1 %60) #3, !dbg !53
  %66 = or i32 %33, %35, !dbg !27
  %67 = icmp sgt i32 %66, -1, !dbg !27
  %68 = add i32 %41, %38, !dbg !54
  %69 = sext i32 %68 to i64, !dbg !55
  %70 = getelementptr float, ptr addrspace(1) %1, i64 %69, !dbg !55
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %70, i1 %67, i32 -8388608, i1 %67) #3, !dbg !56
  %72 = add i32 %41, 1024, !dbg !57
  %73 = add i32 %72, %38, !dbg !58
  %74 = sext i32 %73 to i64, !dbg !59
  %75 = getelementptr float, ptr addrspace(1) %1, i64 %74, !dbg !59
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %75, i1 %67, i32 -8388608, i1 %67) #3, !dbg !60
  %77 = add i32 %41, 3072, !dbg !61
  %78 = add i32 %77, %38, !dbg !62
  %79 = sext i32 %78 to i64, !dbg !63
  %80 = getelementptr float, ptr addrspace(1) %1, i64 %79, !dbg !63
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %80, i1 %60, i32 -8388608, i1 %60) #3, !dbg !64
  %82 = add i32 %41, 4096, !dbg !65
  %83 = add i32 %82, %38, !dbg !66
  %84 = sext i32 %83 to i64, !dbg !67
  %85 = getelementptr float, ptr addrspace(1) %1, i64 %84, !dbg !67
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %85, i1 %67, i32 -8388608, i1 %67) #3, !dbg !68
  %87 = add i32 %41, 5120, !dbg !69
  %88 = add i32 %87, %38, !dbg !70
  %89 = sext i32 %88 to i64, !dbg !71
  %90 = getelementptr float, ptr addrspace(1) %1, i64 %89, !dbg !71
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %90, i1 %67, i32 -8388608, i1 %67) #3, !dbg !72
  %92 = fadd float %28, 0x3EE4F8B580000000, !dbg !73
  %93 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !74
  %.not.i = icmp eq i32 %93, 0, !dbg !74
  %94 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !74
  %.not1.i = icmp eq i32 %94, 0, !dbg !74
  br i1 %.not.i, label %100, label %95, !dbg !74

95:                                               ; preds = %9
  br i1 %.not1.i, label %98, label %96, !dbg !74

96:                                               ; preds = %95
  %97 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %92) #3, !dbg !74
  br label %__nv_sqrtf.exit, !dbg !74

98:                                               ; preds = %95
  %99 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %92) #3, !dbg !74
  br label %__nv_sqrtf.exit, !dbg !74

100:                                              ; preds = %9
  br i1 %.not1.i, label %103, label %101, !dbg !74

101:                                              ; preds = %100
  %102 = tail call float @llvm.nvvm.sqrt.rn.f(float %92) #3, !dbg !74
  br label %__nv_sqrtf.exit, !dbg !74

103:                                              ; preds = %100
  %104 = tail call float @llvm.nvvm.sqrt.approx.f(float %92) #3, !dbg !74
  br label %__nv_sqrtf.exit, !dbg !74

__nv_sqrtf.exit:                                  ; preds = %96, %98, %101, %103
  %.0.i = phi float [ %97, %96 ], [ %99, %98 ], [ %102, %101 ], [ %104, %103 ], !dbg !74
  %105 = bitcast i32 %22 to float, !dbg !18
  %106 = bitcast i32 %25 to float, !dbg !20
  %107 = fsub float %105, %106, !dbg !75
  %108 = bitcast i32 %53 to float, !dbg !43
  %109 = bitcast i32 %46 to float, !dbg !37
  %110 = fcmp ogt float %108, %109, !dbg !76
  %111 = fcmp uno float %108, 0.000000e+00, !dbg !80
  %112 = or i1 %110, %111, !dbg !81
  %113 = select i1 %112, float %108, float %109, !dbg !82
  %114 = bitcast i32 %58 to float, !dbg !47
  %115 = fcmp olt float %113, %114, !dbg !83
  %116 = fcmp uno float %114, 0.000000e+00, !dbg !85
  %117 = or i1 %116, %115, !dbg !86
  %118 = select i1 %117, float %114, float %113, !dbg !87
  %119 = bitcast i32 %65 to float, !dbg !53
  %120 = fcmp olt float %118, %119, !dbg !88
  %121 = fcmp uno float %119, 0.000000e+00, !dbg !90
  %122 = or i1 %121, %120, !dbg !91
  %123 = select i1 %122, float %119, float %118, !dbg !92
  %124 = bitcast i32 %71 to float, !dbg !56
  %125 = fcmp olt float %123, %124, !dbg !93
  %126 = fcmp uno float %124, 0.000000e+00, !dbg !95
  %127 = or i1 %126, %125, !dbg !96
  %128 = select i1 %127, float %124, float %123, !dbg !97
  %129 = bitcast i32 %76 to float, !dbg !60
  %130 = fcmp olt float %128, %129, !dbg !98
  %131 = fcmp uno float %129, 0.000000e+00, !dbg !100
  %132 = or i1 %131, %130, !dbg !101
  %133 = select i1 %132, float %129, float %128, !dbg !102
  %134 = bitcast i32 %81 to float, !dbg !64
  %135 = fcmp olt float %133, %134, !dbg !103
  %136 = fcmp uno float %134, 0.000000e+00, !dbg !105
  %137 = or i1 %136, %135, !dbg !106
  %138 = select i1 %137, float %134, float %133, !dbg !107
  %139 = bitcast i32 %86 to float, !dbg !68
  %140 = fcmp olt float %138, %139, !dbg !108
  %141 = fcmp uno float %139, 0.000000e+00, !dbg !110
  %142 = or i1 %141, %140, !dbg !111
  %143 = select i1 %142, float %139, float %138, !dbg !112
  %144 = bitcast i32 %91 to float, !dbg !72
  %145 = fcmp olt float %143, %144, !dbg !113
  %146 = zext i1 %110 to i8, !dbg !115
  %147 = select i1 %115, i8 2, i8 %146, !dbg !116
  %148 = select i1 %120, i8 3, i8 %147, !dbg !117
  %149 = select i1 %125, i8 4, i8 %148, !dbg !118
  %150 = select i1 %130, i8 5, i8 %149, !dbg !119
  %151 = select i1 %135, i8 6, i8 %150, !dbg !120
  %152 = select i1 %140, i8 7, i8 %151, !dbg !121
  %153 = select i1 %145, i8 8, i8 %152, !dbg !122
  %154 = fcmp uno float %144, 0.000000e+00, !dbg !123
  %155 = or i1 %154, %145, !dbg !124
  %156 = select i1 %155, float %144, float %143, !dbg !125
  %157 = bitcast i32 %32 to float, !dbg !26
  %158 = bitcast i32 %30 to float, !dbg !24
  %159 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !126
  %160 = fmul float %107, %159, !dbg !127
  %161 = fmul float %160, %158, !dbg !128
  %162 = fadd float %161, %157, !dbg !129
  %163 = fadd float %156, %162, !dbg !130
  %164 = getelementptr i8, ptr addrspace(1) %7, i64 %20, !dbg !131
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %153, ptr addrspace(1) %164, i1 true) #3, !dbg !132
  %165 = getelementptr float, ptr addrspace(1) %0, i64 %20, !dbg !133
  %166 = bitcast float %163 to i32, !dbg !134
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %166, ptr addrspace(1) %165, i1 true) #3, !dbg !134
  ret void, !dbg !135
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ct5qsixtfv4v4gtfjjrndi7cbksqkzddpjv4wcikmeqatioapysn.py", directory: "inductor_cache/t5")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_max_pool2d_with_indices_17, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_max_pool2d_with_indices_17, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_max_pool2d_with_indices_17", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_max_pool2d_with_indices_17", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 29, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 29, column: 31, scope: !7)
!18 = !DILocation(line: 29, column: 36, scope: !7)
!19 = !DILocation(line: 30, column: 31, scope: !7)
!20 = !DILocation(line: 30, column: 36, scope: !7)
!21 = !DILocation(line: 31, column: 31, scope: !7)
!22 = !DILocation(line: 31, column: 36, scope: !7)
!23 = !DILocation(line: 32, column: 31, scope: !7)
!24 = !DILocation(line: 32, column: 36, scope: !7)
!25 = !DILocation(line: 33, column: 31, scope: !7)
!26 = !DILocation(line: 33, column: 36, scope: !7)
!27 = !DILocation(line: 67, column: 20, scope: !7)
!28 = !DILocation(line: 36, column: 19, scope: !7)
!29 = !DILocation(line: 41, column: 19, scope: !7)
!30 = !DILocation(line: 44, column: 19, scope: !7)
!31 = !DILocation(line: 45, column: 51, scope: !7)
!32 = !DILocation(line: 45, column: 61, scope: !7)
!33 = !DILocation(line: 45, column: 41, scope: !7)
!34 = !DILocation(line: 45, column: 46, scope: !7)
!35 = !DILocation(line: 45, column: 56, scope: !7)
!36 = !DILocation(line: 45, column: 31, scope: !7)
!37 = !DILocation(line: 45, column: 66, scope: !7)
!38 = !DILocation(line: 47, column: 21, scope: !7)
!39 = !DILocation(line: 50, column: 19, scope: !7)
!40 = !DILocation(line: 51, column: 46, scope: !7)
!41 = !DILocation(line: 51, column: 56, scope: !7)
!42 = !DILocation(line: 51, column: 31, scope: !7)
!43 = !DILocation(line: 51, column: 66, scope: !7)
!44 = !DILocation(line: 58, column: 46, scope: !7)
!45 = !DILocation(line: 58, column: 56, scope: !7)
!46 = !DILocation(line: 58, column: 31, scope: !7)
!47 = !DILocation(line: 58, column: 66, scope: !7)
!48 = !DILocation(line: 61, column: 21, scope: !7)
!49 = !DILocation(line: 64, column: 20, scope: !7)
!50 = !DILocation(line: 65, column: 46, scope: !7)
!51 = !DILocation(line: 65, column: 56, scope: !7)
!52 = !DILocation(line: 65, column: 31, scope: !7)
!53 = !DILocation(line: 65, column: 66, scope: !7)
!54 = !DILocation(line: 68, column: 46, scope: !7)
!55 = !DILocation(line: 68, column: 31, scope: !7)
!56 = !DILocation(line: 68, column: 56, scope: !7)
!57 = !DILocation(line: 71, column: 43, scope: !7)
!58 = !DILocation(line: 71, column: 53, scope: !7)
!59 = !DILocation(line: 71, column: 31, scope: !7)
!60 = !DILocation(line: 71, column: 63, scope: !7)
!61 = !DILocation(line: 78, column: 43, scope: !7)
!62 = !DILocation(line: 78, column: 53, scope: !7)
!63 = !DILocation(line: 78, column: 31, scope: !7)
!64 = !DILocation(line: 78, column: 63, scope: !7)
!65 = !DILocation(line: 81, column: 43, scope: !7)
!66 = !DILocation(line: 81, column: 53, scope: !7)
!67 = !DILocation(line: 81, column: 31, scope: !7)
!68 = !DILocation(line: 81, column: 63, scope: !7)
!69 = !DILocation(line: 84, column: 43, scope: !7)
!70 = !DILocation(line: 84, column: 53, scope: !7)
!71 = !DILocation(line: 84, column: 31, scope: !7)
!72 = !DILocation(line: 84, column: 63, scope: !7)
!73 = !DILocation(line: 113, column: 20, scope: !7)
!74 = !DILocation(line: 114, column: 27, scope: !7)
!75 = !DILocation(line: 111, column: 20, scope: !7)
!76 = !DILocation(line: 118, column: 15, scope: !77, inlinedAt: !79)
!77 = distinct !DILexicalBlockFile(scope: !7, file: !78, discriminator: 0)
!78 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!79 = !DILocation(line: 52, column: 42, scope: !7)
!80 = !DILocation(line: 120, column: 21, scope: !77, inlinedAt: !79)
!81 = !DILocation(line: 120, column: 16, scope: !77, inlinedAt: !79)
!82 = !DILocation(line: 121, column: 29, scope: !77, inlinedAt: !79)
!83 = !DILocation(line: 118, column: 15, scope: !77, inlinedAt: !84)
!84 = !DILocation(line: 59, column: 42, scope: !7)
!85 = !DILocation(line: 120, column: 21, scope: !77, inlinedAt: !84)
!86 = !DILocation(line: 120, column: 16, scope: !77, inlinedAt: !84)
!87 = !DILocation(line: 121, column: 29, scope: !77, inlinedAt: !84)
!88 = !DILocation(line: 118, column: 15, scope: !77, inlinedAt: !89)
!89 = !DILocation(line: 66, column: 42, scope: !7)
!90 = !DILocation(line: 120, column: 21, scope: !77, inlinedAt: !89)
!91 = !DILocation(line: 120, column: 16, scope: !77, inlinedAt: !89)
!92 = !DILocation(line: 121, column: 29, scope: !77, inlinedAt: !89)
!93 = !DILocation(line: 118, column: 15, scope: !77, inlinedAt: !94)
!94 = !DILocation(line: 69, column: 42, scope: !7)
!95 = !DILocation(line: 120, column: 21, scope: !77, inlinedAt: !94)
!96 = !DILocation(line: 120, column: 16, scope: !77, inlinedAt: !94)
!97 = !DILocation(line: 121, column: 29, scope: !77, inlinedAt: !94)
!98 = !DILocation(line: 118, column: 15, scope: !77, inlinedAt: !99)
!99 = !DILocation(line: 72, column: 42, scope: !7)
!100 = !DILocation(line: 120, column: 21, scope: !77, inlinedAt: !99)
!101 = !DILocation(line: 120, column: 16, scope: !77, inlinedAt: !99)
!102 = !DILocation(line: 121, column: 29, scope: !77, inlinedAt: !99)
!103 = !DILocation(line: 118, column: 15, scope: !77, inlinedAt: !104)
!104 = !DILocation(line: 79, column: 42, scope: !7)
!105 = !DILocation(line: 120, column: 21, scope: !77, inlinedAt: !104)
!106 = !DILocation(line: 120, column: 16, scope: !77, inlinedAt: !104)
!107 = !DILocation(line: 121, column: 29, scope: !77, inlinedAt: !104)
!108 = !DILocation(line: 118, column: 15, scope: !77, inlinedAt: !109)
!109 = !DILocation(line: 82, column: 42, scope: !7)
!110 = !DILocation(line: 120, column: 21, scope: !77, inlinedAt: !109)
!111 = !DILocation(line: 120, column: 16, scope: !77, inlinedAt: !109)
!112 = !DILocation(line: 121, column: 29, scope: !77, inlinedAt: !109)
!113 = !DILocation(line: 118, column: 15, scope: !77, inlinedAt: !114)
!114 = !DILocation(line: 85, column: 42, scope: !7)
!115 = !DILocation(line: 89, column: 35, scope: !7)
!116 = !DILocation(line: 92, column: 35, scope: !7)
!117 = !DILocation(line: 95, column: 35, scope: !7)
!118 = !DILocation(line: 98, column: 35, scope: !7)
!119 = !DILocation(line: 101, column: 35, scope: !7)
!120 = !DILocation(line: 104, column: 35, scope: !7)
!121 = !DILocation(line: 107, column: 35, scope: !7)
!122 = !DILocation(line: 110, column: 35, scope: !7)
!123 = !DILocation(line: 120, column: 21, scope: !77, inlinedAt: !114)
!124 = !DILocation(line: 120, column: 16, scope: !77, inlinedAt: !114)
!125 = !DILocation(line: 121, column: 29, scope: !77, inlinedAt: !114)
!126 = !DILocation(line: 116, column: 20, scope: !7)
!127 = !DILocation(line: 119, column: 20, scope: !7)
!128 = !DILocation(line: 120, column: 20, scope: !7)
!129 = !DILocation(line: 121, column: 20, scope: !7)
!130 = !DILocation(line: 122, column: 20, scope: !7)
!131 = !DILocation(line: 123, column: 25, scope: !7)
!132 = !DILocation(line: 123, column: 37, scope: !7)
!133 = !DILocation(line: 124, column: 28, scope: !7)
!134 = !DILocation(line: 124, column: 40, scope: !7)
!135 = !DILocation(line: 124, column: 4, scope: !7)
