; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_leaky_relu_27(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %8 = shl i32 %7, 8, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = and i32 %9, 127, !dbg !12
  %11 = or disjoint i32 %10, 128, !dbg !12
  %12 = shl i32 %9, 2, !dbg !12
  %13 = and i32 %12, 252, !dbg !12
  %14 = or disjoint i32 %8, %10, !dbg !13
  %15 = or disjoint i32 %8, %11, !dbg !13
  %16 = or disjoint i32 %8, %13, !dbg !13
  %17 = icmp slt i32 %14, 256, !dbg !14
  %18 = icmp slt i32 %15, 256, !dbg !14
  %19 = icmp slt i32 %16, 256, !dbg !14
  %20 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %21 = shl i32 %20, 2, !dbg !16
  %22 = lshr i32 %9, 6, !dbg !17
  %.lobit = and i32 %22, 1, !dbg !17
  %23 = or disjoint i32 %21, %.lobit, !dbg !18
  %24 = or disjoint i32 %23, 2, !dbg !18
  %25 = icmp slt i32 %21, 512, !dbg !19
  %26 = icmp slt i32 %23, 512, !dbg !19
  %27 = icmp slt i32 %24, 512, !dbg !19
  %.frozen = freeze i32 %16, !dbg !20
  %28 = sdiv i32 %.frozen, 64, !dbg !20
  %29 = mul i32 %28, 64, !dbg !21
  %.decomposed = sub i32 %.frozen, %29, !dbg !21
  %30 = shl i32 %14, 9, !dbg !22
  %31 = shl i32 %15, 9, !dbg !22
  %32 = add i32 %30, %21, !dbg !23
  %33 = add i32 %31, %21, !dbg !23
  %34 = sext i32 %32 to i64, !dbg !24
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !24
  %36 = sext i32 %33 to i64, !dbg !24
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !24
  %38 = and i1 %25, %17, !dbg !25
  %39 = and i1 %25, %18, !dbg !25
  %40 = and i1 %19, %26, !dbg !25
  %41 = and i1 %27, %19, !dbg !25
  %42 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %35, i1 %38) #2, !dbg !26
  %43 = extractvalue { i32, i32, i32, i32 } %42, 0, !dbg !26
  %44 = extractvalue { i32, i32, i32, i32 } %42, 1, !dbg !26
  %45 = extractvalue { i32, i32, i32, i32 } %42, 2, !dbg !26
  %46 = extractvalue { i32, i32, i32, i32 } %42, 3, !dbg !26
  %47 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %37, i1 %39) #2, !dbg !26
  %48 = extractvalue { i32, i32, i32, i32 } %47, 0, !dbg !26
  %49 = extractvalue { i32, i32, i32, i32 } %47, 1, !dbg !26
  %50 = extractvalue { i32, i32, i32, i32 } %47, 2, !dbg !26
  %51 = extractvalue { i32, i32, i32, i32 } %47, 3, !dbg !26
  %52 = sext i32 %21 to i64, !dbg !27
  %53 = getelementptr float, ptr addrspace(1) %1, i64 %52, !dbg !27
  %54 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %53, i1 %25) #2, !dbg !28
  %55 = extractvalue { i32, i32, i32, i32 } %54, 0, !dbg !28
  %56 = extractvalue { i32, i32, i32, i32 } %54, 1, !dbg !28
  %57 = extractvalue { i32, i32, i32, i32 } %54, 2, !dbg !28
  %58 = extractvalue { i32, i32, i32, i32 } %54, 3, !dbg !28
  %59 = getelementptr i1, ptr addrspace(1) %2, i64 %34, !dbg !29
  %60 = getelementptr i1, ptr addrspace(1) %2, i64 %36, !dbg !29
  %61 = insertelement <4 x i32> poison, i32 %43, i64 0, !dbg !26
  %62 = insertelement <4 x i32> %61, i32 %44, i64 1, !dbg !26
  %63 = insertelement <4 x i32> %62, i32 %45, i64 2, !dbg !26
  %64 = insertelement <4 x i32> %63, i32 %46, i64 3, !dbg !26
  %65 = bitcast <4 x i32> %64 to <4 x float>, !dbg !26
  %66 = insertelement <4 x i32> poison, i32 %55, i64 0, !dbg !28
  %67 = insertelement <4 x i32> %66, i32 %56, i64 1, !dbg !28
  %68 = insertelement <4 x i32> %67, i32 %57, i64 2, !dbg !28
  %69 = insertelement <4 x i32> %68, i32 %58, i64 3, !dbg !28
  %70 = bitcast <4 x i32> %69 to <4 x float>, !dbg !28
  %71 = fadd <4 x float> %65, %70, !dbg !30
  %72 = fcmp ogt <4 x float> %71, zeroinitializer, !dbg !31
  %73 = extractelement <4 x float> %71, i64 0, !dbg !32
  %74 = fmul float %73, 0x3FC99999A0000000, !dbg !33
  %75 = extractelement <4 x float> %71, i64 1, !dbg !32
  %76 = fmul float %75, 0x3FC99999A0000000, !dbg !33
  %77 = extractelement <4 x float> %71, i64 2, !dbg !32
  %78 = fmul float %77, 0x3FC99999A0000000, !dbg !33
  %79 = extractelement <4 x float> %71, i64 3, !dbg !32
  %80 = fmul float %79, 0x3FC99999A0000000, !dbg !33
  %81 = extractelement <4 x i1> %72, i64 0, !dbg !32
  %82 = select i1 %81, float %73, float %74, !dbg !32
  %83 = extractelement <4 x i1> %72, i64 1, !dbg !32
  %84 = select i1 %83, float %75, float %76, !dbg !32
  %85 = extractelement <4 x i1> %72, i64 2, !dbg !32
  %86 = select i1 %85, float %77, float %78, !dbg !32
  %87 = extractelement <4 x i1> %72, i64 3, !dbg !32
  %88 = select i1 %87, float %79, float %80, !dbg !32
  %89 = insertelement <4 x i32> poison, i32 %48, i64 0, !dbg !26
  %90 = insertelement <4 x i32> %89, i32 %49, i64 1, !dbg !26
  %91 = insertelement <4 x i32> %90, i32 %50, i64 2, !dbg !26
  %92 = insertelement <4 x i32> %91, i32 %51, i64 3, !dbg !26
  %93 = bitcast <4 x i32> %92 to <4 x float>, !dbg !26
  %94 = fadd <4 x float> %93, %70, !dbg !30
  %95 = fcmp ogt <4 x float> %94, zeroinitializer, !dbg !31
  %96 = extractelement <4 x float> %94, i64 0, !dbg !32
  %97 = fmul float %96, 0x3FC99999A0000000, !dbg !33
  %98 = extractelement <4 x float> %94, i64 1, !dbg !32
  %99 = fmul float %98, 0x3FC99999A0000000, !dbg !33
  %100 = extractelement <4 x float> %94, i64 2, !dbg !32
  %101 = fmul float %100, 0x3FC99999A0000000, !dbg !33
  %102 = extractelement <4 x float> %94, i64 3, !dbg !32
  %103 = fmul float %102, 0x3FC99999A0000000, !dbg !33
  %104 = extractelement <4 x i1> %95, i64 0, !dbg !32
  %105 = select i1 %104, float %96, float %97, !dbg !32
  %106 = extractelement <4 x i1> %95, i64 1, !dbg !32
  %107 = select i1 %106, float %98, float %99, !dbg !32
  %108 = extractelement <4 x i1> %95, i64 2, !dbg !32
  %109 = select i1 %108, float %100, float %101, !dbg !32
  %110 = extractelement <4 x i1> %95, i64 3, !dbg !32
  %111 = select i1 %110, float %102, float %103, !dbg !32
  %112 = zext <4 x i1> %72 to <4 x i8>, !dbg !34
  %113 = bitcast <4 x i8> %112 to i32, !dbg !34
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %113, ptr addrspace(1) %59, i1 %38) #2, !dbg !34
  %114 = zext <4 x i1> %95 to <4 x i8>, !dbg !34
  %115 = bitcast <4 x i8> %114 to i32, !dbg !34
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %115, ptr addrspace(1) %60, i1 %39) #2, !dbg !34
  %116 = shl i32 %23, 6, !dbg !35
  %117 = shl i32 %24, 6, !dbg !35
  %118 = shl i32 %28, 15, !dbg !36
  %119 = add i32 %118, %.decomposed, !dbg !37
  %120 = add i32 %119, %116, !dbg !38
  %121 = add i32 %119, %117, !dbg !38
  %122 = sext i32 %120 to i64, !dbg !39
  %123 = getelementptr float, ptr addrspace(1) %3, i64 %122, !dbg !39
  %124 = sext i32 %121 to i64, !dbg !39
  %125 = getelementptr float, ptr addrspace(1) %3, i64 %124, !dbg !39
  %126 = and i32 %12, 508, !dbg !40
  %127 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %10, !dbg !40
  %128 = bitcast float %82 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %127, <1 x i32> %128, i1 true) #2, !dbg !40
  %129 = getelementptr inbounds i8, ptr addrspace(3) %127, i32 1040, !dbg !40
  %130 = bitcast float %84 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %129, <1 x i32> %130, i1 true) #2, !dbg !40
  %131 = getelementptr inbounds i8, ptr addrspace(3) %127, i32 2080, !dbg !40
  %132 = bitcast float %86 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %131, <1 x i32> %132, i1 true) #2, !dbg !40
  %133 = getelementptr inbounds i8, ptr addrspace(3) %127, i32 3120, !dbg !40
  %134 = bitcast float %88 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %133, <1 x i32> %134, i1 true) #2, !dbg !40
  %135 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !40
  %136 = bitcast float %105 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %135, <1 x i32> %136, i1 true) #2, !dbg !40
  %137 = getelementptr inbounds i8, ptr addrspace(3) %127, i32 1552, !dbg !40
  %138 = bitcast float %107 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %137, <1 x i32> %138, i1 true) #2, !dbg !40
  %139 = getelementptr inbounds i8, ptr addrspace(3) %127, i32 2592, !dbg !40
  %140 = bitcast float %109 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %139, <1 x i32> %140, i1 true) #2, !dbg !40
  %141 = getelementptr inbounds i8, ptr addrspace(3) %127, i32 3632, !dbg !40
  %142 = bitcast float %111 to <1 x i32>, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %141, <1 x i32> %142, i1 true) #2, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %143 = lshr i32 %12, 6, !dbg !40
  %144 = and i32 %143, 4, !dbg !40
  %145 = getelementptr float, ptr addrspace(3) @global_smem, i32 %144, !dbg !40
  %146 = getelementptr float, ptr addrspace(3) %145, i32 %126, !dbg !40
  %147 = or disjoint i32 %126, 512, !dbg !40
  %148 = lshr i32 %147, 6, !dbg !40
  %149 = and i32 %148, 12, !dbg !40
  %150 = getelementptr float, ptr addrspace(3) @global_smem, i32 %149, !dbg !40
  %151 = getelementptr float, ptr addrspace(3) %150, i32 %147, !dbg !40
  %152 = load <4 x i32>, ptr addrspace(3) %151, align 16, !dbg !40
  %.extract = load i32, ptr addrspace(3) %146, align 16, !dbg !40
  %153 = getelementptr inbounds i8, ptr addrspace(3) %146, i32 4, !dbg !40
  %.extract8 = load i32, ptr addrspace(3) %153, align 4, !dbg !40
  %154 = getelementptr inbounds i8, ptr addrspace(3) %146, i32 8, !dbg !40
  %.extract9 = load i32, ptr addrspace(3) %154, align 8, !dbg !40
  %155 = getelementptr inbounds i8, ptr addrspace(3) %146, i32 12, !dbg !40
  %.extract10 = load i32, ptr addrspace(3) %155, align 4, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %123, i1 %40) #2, !dbg !40
  %.extract11 = extractelement <4 x i32> %152, i64 0, !dbg !40
  %.extract12 = extractelement <4 x i32> %152, i64 1, !dbg !40
  %.extract13 = extractelement <4 x i32> %152, i64 2, !dbg !40
  %.extract14 = extractelement <4 x i32> %152, i64 3, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %125, i1 %41) #2, !dbg !40
  ret void, !dbg !41
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "csnv7xak3ajfacpz54ybn5r32qvqs6r5t2oxgx6z5nmxl4luk2i7.py", directory: "inductor_cache/sn")
!4 = !{ptr @triton_poi_fused_convolution_leaky_relu_27, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_leaky_relu_27, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_leaky_relu_27", linkageName: "triton_poi_fused_convolution_leaky_relu_27", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 31, column: 19, scope: !7)
!21 = !DILocation(line: 30, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 39, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 30, scope: !7)
!25 = !DILocation(line: 32, column: 52, scope: !7)
!26 = !DILocation(line: 32, column: 44, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 33, column: 35, scope: !7)
!29 = !DILocation(line: 40, column: 25, scope: !7)
!30 = !DILocation(line: 34, column: 18, scope: !7)
!31 = !DILocation(line: 36, column: 18, scope: !7)
!32 = !DILocation(line: 39, column: 32, scope: !7)
!33 = !DILocation(line: 38, column: 18, scope: !7)
!34 = !DILocation(line: 40, column: 45, scope: !7)
!35 = !DILocation(line: 41, column: 33, scope: !7)
!36 = !DILocation(line: 41, column: 44, scope: !7)
!37 = !DILocation(line: 41, column: 30, scope: !7)
!38 = !DILocation(line: 41, column: 38, scope: !7)
!39 = !DILocation(line: 41, column: 25, scope: !7)
!40 = !DILocation(line: 41, column: 55, scope: !7)
!41 = !DILocation(line: 41, column: 4, scope: !7)
