; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__softmax_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %6 = shl i32 %5, 6, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 1, !dbg !12
  %9 = and i32 %8, 62, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = icmp slt i32 %10, 64, !dbg !14
  %12 = mul i32 %10, 7, !dbg !15
  %13 = add i32 %12, 7, !dbg !15
  %14 = sext i32 %12 to i64, !dbg !16
  %15 = getelementptr float, ptr addrspace(1) %0, i64 %14, !dbg !16
  %16 = sext i32 %13 to i64, !dbg !16
  %17 = getelementptr float, ptr addrspace(1) %0, i64 %16, !dbg !16
  %18 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %15, i1 %11) #1, !dbg !17
  %19 = bitcast i32 %18 to float, !dbg !17
  %20 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %17, i1 %11) #1, !dbg !17
  %21 = bitcast i32 %20 to float, !dbg !17
  %22 = or disjoint i32 %12, 1, !dbg !18
  %23 = add i32 %12, 8, !dbg !18
  %24 = sext i32 %22 to i64, !dbg !19
  %25 = getelementptr float, ptr addrspace(1) %0, i64 %24, !dbg !19
  %26 = sext i32 %23 to i64, !dbg !19
  %27 = getelementptr float, ptr addrspace(1) %0, i64 %26, !dbg !19
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %25, i1 %11) #1, !dbg !20
  %29 = bitcast i32 %28 to float, !dbg !20
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 %11) #1, !dbg !20
  %31 = bitcast i32 %30 to float, !dbg !20
  %32 = add i32 %12, 2, !dbg !21
  %33 = add i32 %12, 9, !dbg !21
  %34 = sext i32 %32 to i64, !dbg !22
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !22
  %36 = sext i32 %33 to i64, !dbg !22
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !22
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 %11) #1, !dbg !23
  %39 = bitcast i32 %38 to float, !dbg !23
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %11) #1, !dbg !23
  %41 = bitcast i32 %40 to float, !dbg !23
  %42 = add i32 %12, 3, !dbg !24
  %43 = add i32 %12, 10, !dbg !24
  %44 = sext i32 %42 to i64, !dbg !25
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !25
  %46 = sext i32 %43 to i64, !dbg !25
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !25
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 %11) #1, !dbg !26
  %49 = bitcast i32 %48 to float, !dbg !26
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 %11) #1, !dbg !26
  %51 = bitcast i32 %50 to float, !dbg !26
  %52 = add i32 %12, 4, !dbg !27
  %53 = add i32 %12, 11, !dbg !27
  %54 = sext i32 %52 to i64, !dbg !28
  %55 = getelementptr float, ptr addrspace(1) %0, i64 %54, !dbg !28
  %56 = sext i32 %53 to i64, !dbg !28
  %57 = getelementptr float, ptr addrspace(1) %0, i64 %56, !dbg !28
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 %11) #1, !dbg !29
  %59 = bitcast i32 %58 to float, !dbg !29
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 %11) #1, !dbg !29
  %61 = bitcast i32 %60 to float, !dbg !29
  %62 = add i32 %12, 5, !dbg !30
  %63 = add i32 %12, 12, !dbg !30
  %64 = sext i32 %62 to i64, !dbg !31
  %65 = getelementptr float, ptr addrspace(1) %0, i64 %64, !dbg !31
  %66 = sext i32 %63 to i64, !dbg !31
  %67 = getelementptr float, ptr addrspace(1) %0, i64 %66, !dbg !31
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %65, i1 %11) #1, !dbg !32
  %69 = bitcast i32 %68 to float, !dbg !32
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 %11) #1, !dbg !32
  %71 = bitcast i32 %70 to float, !dbg !32
  %72 = add i32 %12, 6, !dbg !33
  %73 = add i32 %12, 13, !dbg !33
  %74 = sext i32 %72 to i64, !dbg !34
  %75 = getelementptr float, ptr addrspace(1) %0, i64 %74, !dbg !34
  %76 = sext i32 %73 to i64, !dbg !34
  %77 = getelementptr float, ptr addrspace(1) %0, i64 %76, !dbg !34
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 %11) #1, !dbg !35
  %79 = bitcast i32 %78 to float, !dbg !35
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 %11) #1, !dbg !35
  %81 = bitcast i32 %80 to float, !dbg !35
  %82 = fcmp ogt float %19, %29, !dbg !36
  %83 = fcmp ogt float %21, %31, !dbg !36
  %84 = fcmp uno float %19, 0.000000e+00, !dbg !40
  %85 = fcmp uno float %21, 0.000000e+00, !dbg !40
  %86 = or i1 %84, %82, !dbg !41
  %87 = or i1 %85, %83, !dbg !41
  %88 = select i1 %86, float %19, float %29, !dbg !42
  %89 = select i1 %87, float %21, float %31, !dbg !42
  %90 = fcmp ogt float %88, %39, !dbg !43
  %91 = fcmp ogt float %89, %41, !dbg !43
  %92 = fcmp uno float %88, 0.000000e+00, !dbg !45
  %93 = fcmp uno float %89, 0.000000e+00, !dbg !45
  %94 = or i1 %90, %92, !dbg !46
  %95 = or i1 %91, %93, !dbg !46
  %96 = select i1 %94, float %88, float %39, !dbg !47
  %97 = select i1 %95, float %89, float %41, !dbg !47
  %98 = fcmp ogt float %96, %49, !dbg !48
  %99 = fcmp ogt float %97, %51, !dbg !48
  %100 = fcmp uno float %96, 0.000000e+00, !dbg !50
  %101 = fcmp uno float %97, 0.000000e+00, !dbg !50
  %102 = or i1 %98, %100, !dbg !51
  %103 = or i1 %99, %101, !dbg !51
  %104 = select i1 %102, float %96, float %49, !dbg !52
  %105 = select i1 %103, float %97, float %51, !dbg !52
  %106 = fcmp ogt float %104, %59, !dbg !53
  %107 = fcmp ogt float %105, %61, !dbg !53
  %108 = fcmp uno float %104, 0.000000e+00, !dbg !55
  %109 = fcmp uno float %105, 0.000000e+00, !dbg !55
  %110 = or i1 %106, %108, !dbg !56
  %111 = or i1 %107, %109, !dbg !56
  %112 = select i1 %110, float %104, float %59, !dbg !57
  %113 = select i1 %111, float %105, float %61, !dbg !57
  %114 = fcmp ogt float %112, %69, !dbg !58
  %115 = fcmp ogt float %113, %71, !dbg !58
  %116 = fcmp uno float %112, 0.000000e+00, !dbg !60
  %117 = fcmp uno float %113, 0.000000e+00, !dbg !60
  %118 = or i1 %114, %116, !dbg !61
  %119 = or i1 %115, %117, !dbg !61
  %120 = select i1 %118, float %112, float %69, !dbg !62
  %121 = select i1 %119, float %113, float %71, !dbg !62
  %122 = fcmp ogt float %120, %79, !dbg !63
  %123 = fcmp ogt float %121, %81, !dbg !63
  %124 = fcmp uno float %120, 0.000000e+00, !dbg !65
  %125 = fcmp uno float %121, 0.000000e+00, !dbg !65
  %126 = or i1 %122, %124, !dbg !66
  %127 = or i1 %123, %125, !dbg !66
  %128 = select i1 %126, float %120, float %79, !dbg !67
  %129 = select i1 %127, float %121, float %81, !dbg !67
  %130 = fsub float %19, %128, !dbg !68
  %131 = fsub float %21, %129, !dbg !68
  %132 = fmul float %130, 0x3FF7154760000000, !dbg !69
  %133 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %132) #1, !dbg !69
  %134 = fmul float %131, 0x3FF7154760000000, !dbg !69
  %135 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %134) #1, !dbg !69
  %136 = fsub float %29, %128, !dbg !70
  %137 = fsub float %31, %129, !dbg !70
  %138 = fmul float %136, 0x3FF7154760000000, !dbg !71
  %139 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %138) #1, !dbg !71
  %140 = fmul float %137, 0x3FF7154760000000, !dbg !71
  %141 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %140) #1, !dbg !71
  %142 = fadd float %133, %139, !dbg !72
  %143 = fadd float %135, %141, !dbg !72
  %144 = fsub float %39, %128, !dbg !73
  %145 = fsub float %41, %129, !dbg !73
  %146 = fmul float %144, 0x3FF7154760000000, !dbg !74
  %147 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %146) #1, !dbg !74
  %148 = fmul float %145, 0x3FF7154760000000, !dbg !74
  %149 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %148) #1, !dbg !74
  %150 = fadd float %142, %147, !dbg !75
  %151 = fadd float %143, %149, !dbg !75
  %152 = fsub float %49, %128, !dbg !76
  %153 = fsub float %51, %129, !dbg !76
  %154 = fmul float %152, 0x3FF7154760000000, !dbg !77
  %155 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %154) #1, !dbg !77
  %156 = fmul float %153, 0x3FF7154760000000, !dbg !77
  %157 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %156) #1, !dbg !77
  %158 = fadd float %150, %155, !dbg !78
  %159 = fadd float %151, %157, !dbg !78
  %160 = fsub float %59, %128, !dbg !79
  %161 = fsub float %61, %129, !dbg !79
  %162 = fmul float %160, 0x3FF7154760000000, !dbg !80
  %163 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %162) #1, !dbg !80
  %164 = fmul float %161, 0x3FF7154760000000, !dbg !80
  %165 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %164) #1, !dbg !80
  %166 = fadd float %158, %163, !dbg !81
  %167 = fadd float %159, %165, !dbg !81
  %168 = fsub float %69, %128, !dbg !82
  %169 = fsub float %71, %129, !dbg !82
  %170 = fmul float %168, 0x3FF7154760000000, !dbg !83
  %171 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %170) #1, !dbg !83
  %172 = fmul float %169, 0x3FF7154760000000, !dbg !83
  %173 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %172) #1, !dbg !83
  %174 = fadd float %166, %171, !dbg !84
  %175 = fadd float %167, %173, !dbg !84
  %176 = fsub float %79, %128, !dbg !85
  %177 = fsub float %81, %129, !dbg !85
  %178 = fmul float %176, 0x3FF7154760000000, !dbg !86
  %179 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %178) #1, !dbg !86
  %180 = fmul float %177, 0x3FF7154760000000, !dbg !86
  %181 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %180) #1, !dbg !86
  %182 = fadd float %174, %179, !dbg !87
  %183 = fadd float %175, %181, !dbg !87
  %184 = sext i32 %10 to i64, !dbg !88
  %185 = getelementptr float, ptr addrspace(1) %1, i64 %184, !dbg !88
  %186 = bitcast float %128 to i32, !dbg !89
  %187 = bitcast float %129 to i32, !dbg !89
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %186, i32 %187, ptr addrspace(1) %185, i1 %11) #1, !dbg !89
  %188 = getelementptr float, ptr addrspace(1) %2, i64 %184, !dbg !90
  %189 = bitcast float %182 to i32, !dbg !91
  %190 = bitcast float %183 to i32, !dbg !91
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %189, i32 %190, ptr addrspace(1) %188, i1 %11) #1, !dbg !91
  ret void, !dbg !92
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cpz5zgdbnnofn5zhuxsszh5f3igzgdltmfndngve47mqxpud543y.py", directory: "inductor_cache/pz")
!4 = !{ptr @triton_poi_fused__softmax_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__softmax_1, !"reqntidx", i32 32}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__softmax_1", linkageName: "triton_poi_fused__softmax_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 32, scope: !7)
!16 = !DILocation(line: 25, column: 30, scope: !7)
!17 = !DILocation(line: 25, column: 37, scope: !7)
!18 = !DILocation(line: 26, column: 34, scope: !7)
!19 = !DILocation(line: 26, column: 30, scope: !7)
!20 = !DILocation(line: 26, column: 41, scope: !7)
!21 = !DILocation(line: 27, column: 34, scope: !7)
!22 = !DILocation(line: 27, column: 30, scope: !7)
!23 = !DILocation(line: 27, column: 41, scope: !7)
!24 = !DILocation(line: 28, column: 34, scope: !7)
!25 = !DILocation(line: 28, column: 30, scope: !7)
!26 = !DILocation(line: 28, column: 41, scope: !7)
!27 = !DILocation(line: 29, column: 34, scope: !7)
!28 = !DILocation(line: 29, column: 30, scope: !7)
!29 = !DILocation(line: 29, column: 41, scope: !7)
!30 = !DILocation(line: 30, column: 34, scope: !7)
!31 = !DILocation(line: 30, column: 30, scope: !7)
!32 = !DILocation(line: 30, column: 41, scope: !7)
!33 = !DILocation(line: 31, column: 35, scope: !7)
!34 = !DILocation(line: 31, column: 31, scope: !7)
!35 = !DILocation(line: 31, column: 42, scope: !7)
!36 = !DILocation(line: 118, column: 15, scope: !37, inlinedAt: !39)
!37 = distinct !DILexicalBlockFile(scope: !7, file: !38, discriminator: 0)
!38 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!39 = !DILocation(line: 32, column: 40, scope: !7)
!40 = !DILocation(line: 120, column: 21, scope: !37, inlinedAt: !39)
!41 = !DILocation(line: 120, column: 16, scope: !37, inlinedAt: !39)
!42 = !DILocation(line: 121, column: 29, scope: !37, inlinedAt: !39)
!43 = !DILocation(line: 118, column: 15, scope: !37, inlinedAt: !44)
!44 = !DILocation(line: 33, column: 40, scope: !7)
!45 = !DILocation(line: 120, column: 21, scope: !37, inlinedAt: !44)
!46 = !DILocation(line: 120, column: 16, scope: !37, inlinedAt: !44)
!47 = !DILocation(line: 121, column: 29, scope: !37, inlinedAt: !44)
!48 = !DILocation(line: 118, column: 15, scope: !37, inlinedAt: !49)
!49 = !DILocation(line: 34, column: 40, scope: !7)
!50 = !DILocation(line: 120, column: 21, scope: !37, inlinedAt: !49)
!51 = !DILocation(line: 120, column: 16, scope: !37, inlinedAt: !49)
!52 = !DILocation(line: 121, column: 29, scope: !37, inlinedAt: !49)
!53 = !DILocation(line: 118, column: 15, scope: !37, inlinedAt: !54)
!54 = !DILocation(line: 35, column: 40, scope: !7)
!55 = !DILocation(line: 120, column: 21, scope: !37, inlinedAt: !54)
!56 = !DILocation(line: 120, column: 16, scope: !37, inlinedAt: !54)
!57 = !DILocation(line: 121, column: 29, scope: !37, inlinedAt: !54)
!58 = !DILocation(line: 118, column: 15, scope: !37, inlinedAt: !59)
!59 = !DILocation(line: 36, column: 41, scope: !7)
!60 = !DILocation(line: 120, column: 21, scope: !37, inlinedAt: !59)
!61 = !DILocation(line: 120, column: 16, scope: !37, inlinedAt: !59)
!62 = !DILocation(line: 121, column: 29, scope: !37, inlinedAt: !59)
!63 = !DILocation(line: 118, column: 15, scope: !37, inlinedAt: !64)
!64 = !DILocation(line: 37, column: 42, scope: !7)
!65 = !DILocation(line: 120, column: 21, scope: !37, inlinedAt: !64)
!66 = !DILocation(line: 120, column: 16, scope: !37, inlinedAt: !64)
!67 = !DILocation(line: 121, column: 29, scope: !37, inlinedAt: !64)
!68 = !DILocation(line: 38, column: 19, scope: !7)
!69 = !DILocation(line: 39, column: 24, scope: !7)
!70 = !DILocation(line: 40, column: 19, scope: !7)
!71 = !DILocation(line: 41, column: 24, scope: !7)
!72 = !DILocation(line: 42, column: 20, scope: !7)
!73 = !DILocation(line: 43, column: 19, scope: !7)
!74 = !DILocation(line: 44, column: 24, scope: !7)
!75 = !DILocation(line: 45, column: 20, scope: !7)
!76 = !DILocation(line: 46, column: 19, scope: !7)
!77 = !DILocation(line: 47, column: 24, scope: !7)
!78 = !DILocation(line: 48, column: 20, scope: !7)
!79 = !DILocation(line: 49, column: 19, scope: !7)
!80 = !DILocation(line: 50, column: 24, scope: !7)
!81 = !DILocation(line: 51, column: 20, scope: !7)
!82 = !DILocation(line: 52, column: 19, scope: !7)
!83 = !DILocation(line: 53, column: 24, scope: !7)
!84 = !DILocation(line: 54, column: 20, scope: !7)
!85 = !DILocation(line: 55, column: 20, scope: !7)
!86 = !DILocation(line: 56, column: 24, scope: !7)
!87 = !DILocation(line: 57, column: 20, scope: !7)
!88 = !DILocation(line: 58, column: 25, scope: !7)
!89 = !DILocation(line: 58, column: 37, scope: !7)
!90 = !DILocation(line: 59, column: 25, scope: !7)
!91 = !DILocation(line: 59, column: 37, scope: !7)
!92 = !DILocation(line: 59, column: 4, scope: !7)
