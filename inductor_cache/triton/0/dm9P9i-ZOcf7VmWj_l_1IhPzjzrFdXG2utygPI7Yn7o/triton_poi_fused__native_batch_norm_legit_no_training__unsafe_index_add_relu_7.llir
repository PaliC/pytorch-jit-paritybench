; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_relu_7(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9, i32 %10) local_unnamed_addr !dbg !7 {
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %13 = shl i32 %12, 4, !dbg !11
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %15 = lshr i32 %14, 3, !dbg !12
  %16 = and i32 %15, 15, !dbg !12
  %17 = shl i32 %14, 1, !dbg !12
  %18 = and i32 %17, 14, !dbg !12
  %19 = or disjoint i32 %13, %16, !dbg !13
  %20 = or disjoint i32 %13, %18, !dbg !13
  %21 = icmp slt i32 %19, 512, !dbg !14
  %22 = icmp slt i32 %20, 512, !dbg !14
  %23 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %24 = shl i32 %23, 4, !dbg !16
  %25 = or disjoint i32 %24, %16, !dbg !17
  %26 = or disjoint i32 %24, %18, !dbg !17
  %27 = icmp slt i32 %25, 16, !dbg !18
  %28 = icmp slt i32 %26, 16, !dbg !18
  %.frozen = freeze i32 %25, !dbg !19
  %29 = sdiv i32 %.frozen, 4, !dbg !19
  %30 = mul i32 %29, 4, !dbg !20
  %.decomposed = sub i32 %.frozen, %30, !dbg !20
  %.frozen10 = freeze i32 %20, !dbg !21
  %31 = sdiv i32 %.frozen10, 128, !dbg !21
  %32 = mul i32 %31, 128, !dbg !22
  %.decomposed11 = sub i32 %.frozen10, %32, !dbg !22
  %33 = sext i32 %29 to i64, !dbg !23
  %34 = getelementptr i64, ptr addrspace(1) %0, i64 %33, !dbg !23
  %35 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %34, i1 %27) #4, !dbg !24
  %36 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %34, i1 %27) #4, !dbg !24
  %37 = sext i32 %.decomposed to i64, !dbg !25
  %38 = getelementptr i64, ptr addrspace(1) %0, i64 %37, !dbg !25
  %39 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %38, i1 %27) #4, !dbg !26
  %40 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %38, i1 %27) #4, !dbg !26
  %41 = sext i32 %.decomposed11 to i64, !dbg !27
  %42 = getelementptr float, ptr addrspace(1) %2, i64 %41, !dbg !27
  %43 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %42, i1 %22) #4, !dbg !28
  %44 = getelementptr float, ptr addrspace(1) %3, i64 %41, !dbg !29
  %45 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %44, i1 %22) #4, !dbg !30
  %46 = extractvalue { i32, i32 } %45, 0, !dbg !30
  %47 = extractvalue { i32, i32 } %45, 1, !dbg !30
  %48 = bitcast i32 %46 to float, !dbg !30
  %49 = bitcast i32 %47 to float, !dbg !30
  %50 = getelementptr float, ptr addrspace(1) %4, i64 %41, !dbg !31
  %51 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %50, i1 %22) #4, !dbg !32
  %52 = getelementptr float, ptr addrspace(1) %5, i64 %41, !dbg !33
  %53 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %52, i1 %22) #4, !dbg !34
  %54 = shl i32 %19, 4, !dbg !35
  %55 = add i32 %26, %54, !dbg !36
  %56 = sext i32 %55 to i64, !dbg !37
  %57 = getelementptr float, ptr addrspace(1) %6, i64 %56, !dbg !37
  %58 = and i1 %21, %28, !dbg !38
  %59 = and i1 %22, %27, !dbg !38
  %60 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %57, i1 %58) #4, !dbg !39
  %61 = extractvalue { i32, i32 } %60, 0, !dbg !39
  %62 = extractvalue { i32, i32 } %60, 1, !dbg !39
  %63 = shl i32 %14, 5, !dbg !39
  %64 = and i32 %63, 224, !dbg !39
  %65 = or disjoint i32 %64, %16, !dbg !39
  %66 = and i32 %17, 254, !dbg !39
  %67 = lshr exact i32 %64, 1, !dbg !39
  %68 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %67, !dbg !39
  %69 = getelementptr float, ptr addrspace(3) %68, i32 %65, !dbg !39
  %70 = insertelement <1 x i32> poison, i32 %61, i64 0, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %69, <1 x i32> %70, i1 true) #4, !dbg !39
  %71 = or disjoint i32 %65, 16, !dbg !39
  %72 = lshr i32 %71, 4, !dbg !39
  %.idx = shl nuw nsw i32 %72, 3, !dbg !39
  %73 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !39
  %74 = getelementptr float, ptr addrspace(3) %73, i32 %71, !dbg !39
  %75 = insertelement <1 x i32> poison, i32 %62, i64 0, !dbg !39
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %74, <1 x i32> %75, i1 true) #4, !dbg !39
  tail call void @llvm.nvvm.barrier0(), !dbg !39
  %76 = lshr i32 %66, 4, !dbg !39
  %77 = and i32 %14, 127, !dbg !39
  %78 = add nuw nsw i32 %76, %77, !dbg !39
  %.idx1 = shl nuw nsw i32 %78, 3, !dbg !39
  %79 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx1, !dbg !39
  %80 = load <2 x float>, ptr addrspace(3) %79, align 8, !dbg !39
  %81 = lshr i64 %36, 61, !dbg !40
  %82 = and i64 %81, 4, !dbg !40
  %83 = add i64 %82, %36, !dbg !40
  %84 = lshr i64 %40, 61, !dbg !41
  %85 = and i64 %84, 4, !dbg !41
  %86 = add i64 %85, %40, !dbg !41
  %87 = shl i32 %31, 11, !dbg !42
  %88 = sext i32 %87 to i64, !dbg !43
  %.idx3 = shl i64 %86, 9, !dbg !44
  %89 = getelementptr i8, ptr addrspace(1) %1, i64 %.idx3, !dbg !44
  %90 = getelementptr float, ptr addrspace(1) %89, i64 %41, !dbg !44
  %.idx4 = shl i64 %83, 11, !dbg !44
  %91 = getelementptr i8, ptr addrspace(1) %90, i64 %.idx4, !dbg !44
  %92 = getelementptr float, ptr addrspace(1) %91, i64 %88, !dbg !44
  %93 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %92, i1 %59) #4, !dbg !45
  %94 = fadd float %48, 0x3EE4F8B580000000, !dbg !46
  %95 = fadd float %49, 0x3EE4F8B580000000, !dbg !46
  %96 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !47
  %.not.i = icmp eq i32 %96, 0, !dbg !47
  %97 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !47
  %.not1.i = icmp eq i32 %97, 0, !dbg !47
  br i1 %.not.i, label %103, label %98, !dbg !47

98:                                               ; preds = %11
  br i1 %.not1.i, label %101, label %99, !dbg !47

99:                                               ; preds = %98
  %100 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %94) #4, !dbg !47
  br label %__nv_sqrtf.exit, !dbg !47

101:                                              ; preds = %98
  %102 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %94) #4, !dbg !47
  br label %__nv_sqrtf.exit, !dbg !47

103:                                              ; preds = %11
  br i1 %.not1.i, label %106, label %104, !dbg !47

104:                                              ; preds = %103
  %105 = tail call float @llvm.nvvm.sqrt.rn.f(float %94) #4, !dbg !47
  br label %__nv_sqrtf.exit, !dbg !47

106:                                              ; preds = %103
  %107 = tail call float @llvm.nvvm.sqrt.approx.f(float %94) #4, !dbg !47
  br label %__nv_sqrtf.exit, !dbg !47

__nv_sqrtf.exit:                                  ; preds = %99, %101, %104, %106
  %.0.i = phi float [ %100, %99 ], [ %102, %101 ], [ %105, %104 ], [ %107, %106 ], !dbg !47
  %108 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !47
  %.not.i5 = icmp eq i32 %108, 0, !dbg !47
  %109 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !47
  %.not1.i8 = icmp eq i32 %109, 0, !dbg !47
  br i1 %.not.i5, label %115, label %110, !dbg !47

110:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i8, label %113, label %111, !dbg !47

111:                                              ; preds = %110
  %112 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %95) #4, !dbg !47
  br label %__nv_sqrtf.exit9, !dbg !47

113:                                              ; preds = %110
  %114 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %95) #4, !dbg !47
  br label %__nv_sqrtf.exit9, !dbg !47

115:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i8, label %118, label %116, !dbg !47

116:                                              ; preds = %115
  %117 = tail call float @llvm.nvvm.sqrt.rn.f(float %95) #4, !dbg !47
  br label %__nv_sqrtf.exit9, !dbg !47

118:                                              ; preds = %115
  %119 = tail call float @llvm.nvvm.sqrt.approx.f(float %95) #4, !dbg !47
  br label %__nv_sqrtf.exit9, !dbg !47

__nv_sqrtf.exit9:                                 ; preds = %111, %113, %116, %118
  %.0.i7 = phi float [ %112, %111 ], [ %114, %113 ], [ %117, %116 ], [ %119, %118 ], !dbg !47
  %120 = extractvalue { i32, i32 } %93, 1, !dbg !45
  %121 = bitcast i32 %120 to float, !dbg !45
  %122 = extractvalue { i32, i32 } %43, 1, !dbg !28
  %123 = bitcast i32 %122 to float, !dbg !28
  %124 = fsub float %121, %123, !dbg !48
  %125 = extractvalue { i32, i32 } %93, 0, !dbg !45
  %126 = bitcast i32 %125 to float, !dbg !45
  %127 = extractvalue { i32, i32 } %43, 0, !dbg !28
  %128 = bitcast i32 %127 to float, !dbg !28
  %129 = fsub float %126, %128, !dbg !48
  %130 = extractelement <2 x float> %80, i64 1, !dbg !39
  %131 = extractelement <2 x float> %80, i64 0, !dbg !39
  %132 = extractvalue { i32, i32 } %53, 1, !dbg !34
  %133 = bitcast i32 %132 to float, !dbg !34
  %134 = extractvalue { i32, i32 } %53, 0, !dbg !34
  %135 = bitcast i32 %134 to float, !dbg !34
  %136 = extractvalue { i32, i32 } %51, 1, !dbg !32
  %137 = bitcast i32 %136 to float, !dbg !32
  %138 = extractvalue { i32, i32 } %51, 0, !dbg !32
  %139 = bitcast i32 %138 to float, !dbg !32
  %140 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !49
  %141 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i7) #4, !dbg !49
  %142 = fmul float %129, %140, !dbg !50
  %143 = fmul float %124, %141, !dbg !50
  %144 = fmul float %142, %139, !dbg !51
  %145 = fmul float %143, %137, !dbg !51
  %146 = fadd float %144, %135, !dbg !52
  %147 = fadd float %145, %133, !dbg !52
  %148 = fcmp olt float %146, 0.000000e+00, !dbg !53
  %149 = fcmp olt float %147, 0.000000e+00, !dbg !53
  %150 = select i1 %148, float 0.000000e+00, float %146, !dbg !57
  %151 = select i1 %149, float 0.000000e+00, float %147, !dbg !57
  %152 = fadd float %131, %150, !dbg !58
  %153 = fadd float %130, %151, !dbg !58
  %154 = getelementptr float, ptr addrspace(1) %7, i64 %56, !dbg !59
  tail call void @llvm.nvvm.barrier0(), !dbg !60
  %155 = lshr exact i32 %64, 2, !dbg !60
  %156 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %155, !dbg !60
  %157 = getelementptr float, ptr addrspace(3) %156, i32 %65, !dbg !60
  %158 = bitcast float %150 to <1 x i32>, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %157, <1 x i32> %158, i1 true) #4, !dbg !60
  %159 = getelementptr float, ptr addrspace(3) @global_smem, i32 %72, !dbg !60
  %160 = getelementptr float, ptr addrspace(3) %159, i32 %71, !dbg !60
  %161 = bitcast float %151 to <1 x i32>, !dbg !60
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %160, <1 x i32> %161, i1 true) #4, !dbg !60
  tail call void @llvm.nvvm.barrier0(), !dbg !60
  %162 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %76, !dbg !60
  %163 = getelementptr inbounds float, ptr addrspace(3) %162, i32 %66, !dbg !60
  %164 = load i32, ptr addrspace(3) %163, align 4, !dbg !60
  %165 = or disjoint i32 %66, 1, !dbg !60
  %166 = getelementptr inbounds float, ptr addrspace(3) %162, i32 %165, !dbg !60
  %167 = load i32, ptr addrspace(3) %166, align 4, !dbg !60
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %164, i32 %167, ptr addrspace(1) %154, i1 %58) #4, !dbg !60
  %168 = shl i32 %25, 7, !dbg !61
  %169 = add i32 %168, %.decomposed11, !dbg !62
  %170 = add i32 %169, %87, !dbg !63
  %171 = sext i32 %170 to i64, !dbg !64
  %172 = getelementptr float, ptr addrspace(1) %8, i64 %171, !dbg !64
  %173 = bitcast float %152 to i32, !dbg !65
  %174 = bitcast float %153 to i32, !dbg !65
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %173, i32 %174, ptr addrspace(1) %172, i1 %59) #4, !dbg !65
  ret void, !dbg !66
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cbm65p4dyc2lwasdlfcily27avpivtj5opnjqhnspf5a2ppsdkpn.py", directory: "inductor_cache/bm")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_relu_7, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_relu_7, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_relu_7", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_relu_7", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 28, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 31, column: 19, scope: !7)
!22 = !DILocation(line: 30, column: 19, scope: !7)
!23 = !DILocation(line: 34, column: 30, scope: !7)
!24 = !DILocation(line: 34, column: 35, scope: !7)
!25 = !DILocation(line: 35, column: 30, scope: !7)
!26 = !DILocation(line: 35, column: 35, scope: !7)
!27 = !DILocation(line: 36, column: 31, scope: !7)
!28 = !DILocation(line: 36, column: 36, scope: !7)
!29 = !DILocation(line: 37, column: 31, scope: !7)
!30 = !DILocation(line: 37, column: 36, scope: !7)
!31 = !DILocation(line: 38, column: 31, scope: !7)
!32 = !DILocation(line: 38, column: 36, scope: !7)
!33 = !DILocation(line: 39, column: 31, scope: !7)
!34 = !DILocation(line: 39, column: 36, scope: !7)
!35 = !DILocation(line: 40, column: 39, scope: !7)
!36 = !DILocation(line: 40, column: 36, scope: !7)
!37 = !DILocation(line: 40, column: 31, scope: !7)
!38 = !DILocation(line: 40, column: 52, scope: !7)
!39 = !DILocation(line: 40, column: 44, scope: !7)
!40 = !DILocation(line: 44, column: 32, scope: !7)
!41 = !DILocation(line: 47, column: 32, scope: !7)
!42 = !DILocation(line: 48, column: 62, scope: !7)
!43 = !DILocation(line: 48, column: 57, scope: !7)
!44 = !DILocation(line: 48, column: 30, scope: !7)
!45 = !DILocation(line: 48, column: 67, scope: !7)
!46 = !DILocation(line: 51, column: 20, scope: !7)
!47 = !DILocation(line: 52, column: 27, scope: !7)
!48 = !DILocation(line: 49, column: 19, scope: !7)
!49 = !DILocation(line: 54, column: 20, scope: !7)
!50 = !DILocation(line: 57, column: 20, scope: !7)
!51 = !DILocation(line: 58, column: 20, scope: !7)
!52 = !DILocation(line: 59, column: 20, scope: !7)
!53 = !DILocation(line: 118, column: 15, scope: !54, inlinedAt: !56)
!54 = distinct !DILexicalBlockFile(scope: !7, file: !55, discriminator: 0)
!55 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!56 = !DILocation(line: 61, column: 42, scope: !7)
!57 = !DILocation(line: 121, column: 29, scope: !54, inlinedAt: !56)
!58 = !DILocation(line: 62, column: 20, scope: !7)
!59 = !DILocation(line: 63, column: 25, scope: !7)
!60 = !DILocation(line: 63, column: 45, scope: !7)
!61 = !DILocation(line: 64, column: 34, scope: !7)
!62 = !DILocation(line: 64, column: 30, scope: !7)
!63 = !DILocation(line: 64, column: 39, scope: !7)
!64 = !DILocation(line: 64, column: 25, scope: !7)
!65 = !DILocation(line: 64, column: 56, scope: !7)
!66 = !DILocation(line: 64, column: 4, scope: !7)
