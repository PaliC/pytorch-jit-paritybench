; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_mean_34(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %6 = shl i32 %5, 7, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 2, !dbg !12
  %9 = and i32 %8, 124, !dbg !12
  %10 = lshr i32 %7, 5, !dbg !12
  %11 = and i32 %7, 127, !dbg !12
  %12 = or disjoint i32 %6, %9, !dbg !13
  %13 = or disjoint i32 %6, %11, !dbg !13
  %14 = icmp slt i32 %12, 576, !dbg !14
  %15 = icmp slt i32 %13, 576, !dbg !14
  %16 = and i32 %10, 7, !dbg !15
  %.frozen = freeze i32 %12, !dbg !16
  %17 = sdiv i32 %.frozen, 144, !dbg !16
  %18 = mul i32 %17, 144, !dbg !17
  %.decomposed = sub i32 %.frozen, %18, !dbg !17
  %19 = mul nuw nsw i32 %16, 144, !dbg !18
  %20 = add nsw i32 %.decomposed, %19, !dbg !19
  %21 = mul i32 %17, 2304, !dbg !20
  %22 = add i32 %20, %21, !dbg !21
  %23 = add nsw i32 %20, 1152, !dbg !19
  %24 = add i32 %23, %21, !dbg !21
  %25 = sext i32 %22 to i64, !dbg !22
  %26 = getelementptr float, ptr addrspace(1) %1, i64 %25, !dbg !22
  %27 = sext i32 %24 to i64, !dbg !22
  %28 = getelementptr float, ptr addrspace(1) %1, i64 %27, !dbg !22
  %29 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %26, i1 %14, i32 0, i1 %14, i32 0, i1 %14, i32 0, i1 %14, i32 0, i1 %14) #3, !dbg !23
  %30 = extractvalue { i32, i32, i32, i32 } %29, 0, !dbg !23
  %31 = extractvalue { i32, i32, i32, i32 } %29, 1, !dbg !23
  %32 = extractvalue { i32, i32, i32, i32 } %29, 2, !dbg !23
  %33 = extractvalue { i32, i32, i32, i32 } %29, 3, !dbg !23
  %34 = bitcast i32 %30 to float, !dbg !23
  %35 = bitcast i32 %31 to float, !dbg !23
  %36 = bitcast i32 %32 to float, !dbg !23
  %37 = bitcast i32 %33 to float, !dbg !23
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %28, i1 %14, i32 0, i1 %14, i32 0, i1 %14, i32 0, i1 %14, i32 0, i1 %14) #3, !dbg !23
  %39 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !23
  %40 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !23
  %41 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !23
  %42 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !23
  %43 = bitcast i32 %39 to float, !dbg !23
  %44 = bitcast i32 %40 to float, !dbg !23
  %45 = bitcast i32 %41 to float, !dbg !23
  %46 = bitcast i32 %42 to float, !dbg !23
  %47 = fadd float %34, %43, !dbg !24
  %48 = fadd float %35, %44, !dbg !24
  %49 = fadd float %36, %45, !dbg !24
  %50 = fadd float %37, %46, !dbg !24
  %51 = shl nuw nsw i32 %9, 3, !dbg !29
  %52 = or disjoint i32 %51, %16, !dbg !29
  %53 = getelementptr float, ptr addrspace(3) @global_smem, i32 %52, !dbg !29
  %54 = bitcast float %47 to i32, !dbg !29
  %55 = select i1 %14, i32 %54, i32 0, !dbg !24
  %56 = insertelement <1 x i32> poison, i32 %55, i64 0, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %53, <1 x i32> %56, i1 true) #3, !dbg !29
  %57 = or disjoint i32 %51, 8, !dbg !29
  %58 = or disjoint i32 %57, %16, !dbg !29
  %59 = getelementptr float, ptr addrspace(3) @global_smem, i32 %58, !dbg !29
  %60 = bitcast float %48 to i32, !dbg !29
  %61 = select i1 %14, i32 %60, i32 0, !dbg !24
  %62 = insertelement <1 x i32> poison, i32 %61, i64 0, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %59, <1 x i32> %62, i1 true) #3, !dbg !29
  %63 = or disjoint i32 %51, 16, !dbg !29
  %64 = or disjoint i32 %63, %16, !dbg !29
  %65 = getelementptr float, ptr addrspace(3) @global_smem, i32 %64, !dbg !29
  %66 = bitcast float %49 to i32, !dbg !29
  %67 = select i1 %14, i32 %66, i32 0, !dbg !24
  %68 = insertelement <1 x i32> poison, i32 %67, i64 0, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %65, <1 x i32> %68, i1 true) #3, !dbg !29
  %69 = or disjoint i32 %51, 24, !dbg !29
  %70 = or disjoint i32 %69, %16, !dbg !29
  %71 = getelementptr float, ptr addrspace(3) @global_smem, i32 %70, !dbg !29
  %72 = bitcast float %50 to i32, !dbg !29
  %73 = select i1 %14, i32 %72, i32 0, !dbg !24
  %74 = insertelement <1 x i32> poison, i32 %73, i64 0, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %71, <1 x i32> %74, i1 true) #3, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %75 = icmp slt i32 %7, 1024, !dbg !29
  %76 = getelementptr float, ptr addrspace(3) @global_smem, i32 %7, !dbg !29
  %77 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %76, i1 %75) #3, !dbg !29
  %78 = bitcast i32 %77 to float, !dbg !29
  %79 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %77, i32 4, i32 31), !dbg !29
  %80 = bitcast i32 %79 to float, !dbg !29
  %81 = fadd float %78, %80, !dbg !24
  %82 = bitcast float %81 to i32, !dbg !29
  %83 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %82, i32 2, i32 31), !dbg !29
  %84 = bitcast i32 %83 to float, !dbg !29
  %85 = fadd float %81, %84, !dbg !24
  %86 = bitcast float %85 to i32, !dbg !29
  %87 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %86, i32 1, i32 31), !dbg !29
  %88 = bitcast i32 %87 to float, !dbg !29
  %89 = fadd float %85, %88, !dbg !24
  %90 = and i32 %7, 7, !dbg !29
  %91 = icmp eq i32 %90, 0, !dbg !29
  %92 = and i1 %75, %91, !dbg !29
  %93 = bitcast float %89 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %76, <1 x i32> %93, i1 %92) #3, !dbg !29
  %94 = getelementptr i8, ptr addrspace(3) %76, i32 1024, !dbg !29
  %95 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %94, i1 %75) #3, !dbg !29
  %96 = bitcast i32 %95 to float, !dbg !29
  %97 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %95, i32 4, i32 31), !dbg !29
  %98 = bitcast i32 %97 to float, !dbg !29
  %99 = fadd float %96, %98, !dbg !24
  %100 = bitcast float %99 to i32, !dbg !29
  %101 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %100, i32 2, i32 31), !dbg !29
  %102 = bitcast i32 %101 to float, !dbg !29
  %103 = fadd float %99, %102, !dbg !24
  %104 = bitcast float %103 to i32, !dbg !29
  %105 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %104, i32 1, i32 31), !dbg !29
  %106 = bitcast i32 %105 to float, !dbg !29
  %107 = fadd float %103, %106, !dbg !24
  %108 = bitcast float %107 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %94, <1 x i32> %108, i1 %92) #3, !dbg !29
  %109 = getelementptr i8, ptr addrspace(3) %76, i32 2048, !dbg !29
  %110 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %109, i1 %75) #3, !dbg !29
  %111 = bitcast i32 %110 to float, !dbg !29
  %112 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %110, i32 4, i32 31), !dbg !29
  %113 = bitcast i32 %112 to float, !dbg !29
  %114 = fadd float %111, %113, !dbg !24
  %115 = bitcast float %114 to i32, !dbg !29
  %116 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %115, i32 2, i32 31), !dbg !29
  %117 = bitcast i32 %116 to float, !dbg !29
  %118 = fadd float %114, %117, !dbg !24
  %119 = bitcast float %118 to i32, !dbg !29
  %120 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %119, i32 1, i32 31), !dbg !29
  %121 = bitcast i32 %120 to float, !dbg !29
  %122 = fadd float %118, %121, !dbg !24
  %123 = bitcast float %122 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %109, <1 x i32> %123, i1 %92) #3, !dbg !29
  %124 = getelementptr i8, ptr addrspace(3) %76, i32 3072, !dbg !29
  %125 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %124, i1 %75) #3, !dbg !29
  %126 = bitcast i32 %125 to float, !dbg !29
  %127 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %125, i32 4, i32 31), !dbg !29
  %128 = bitcast i32 %127 to float, !dbg !29
  %129 = fadd float %126, %128, !dbg !24
  %130 = bitcast float %129 to i32, !dbg !29
  %131 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %130, i32 2, i32 31), !dbg !29
  %132 = bitcast i32 %131 to float, !dbg !29
  %133 = fadd float %129, %132, !dbg !24
  %134 = bitcast float %133 to i32, !dbg !29
  %135 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %134, i32 1, i32 31), !dbg !29
  %136 = bitcast i32 %135 to float, !dbg !29
  %137 = fadd float %133, %136, !dbg !24
  %138 = bitcast float %137 to <1 x i32>, !dbg !29
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %124, <1 x i32> %138, i1 %92) #3, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !29
  %139 = getelementptr float, ptr addrspace(3) @global_smem, i32 %51, !dbg !29
  %140 = load i32, ptr addrspace(3) %139, align 16, !dbg !29
  %141 = getelementptr float, ptr addrspace(3) @global_smem, i32 %57, !dbg !29
  %142 = load i32, ptr addrspace(3) %141, align 16, !dbg !29
  %143 = getelementptr float, ptr addrspace(3) @global_smem, i32 %63, !dbg !29
  %144 = load i32, ptr addrspace(3) %143, align 16, !dbg !29
  %145 = getelementptr float, ptr addrspace(3) @global_smem, i32 %69, !dbg !29
  %146 = load i32, ptr addrspace(3) %145, align 16, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %147 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %9, !dbg !30
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %147, i32 %140, i32 %142, i32 %144, i32 %146, i1 true) #3, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !30
  %148 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !30
  %149 = load float, ptr addrspace(3) %148, align 4, !dbg !30
  %150 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %149, float 1.600000e+01) #3, !dbg !30
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %151 = sext i32 %13 to i64, !dbg !32
  %152 = getelementptr float, ptr addrspace(1) %0, i64 %151, !dbg !32
  %153 = and i32 %7, 128, !dbg !33
  %154 = icmp eq i32 %153, 0, !dbg !33
  %155 = bitcast float %150 to i32, !dbg !33
  %156 = and i1 %154, %15, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %155, ptr addrspace(1) %152, i1 %156) #3, !dbg !33
  ret void, !dbg !34
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cmed6i5ey22yg7dcrtqlguuwgml2fesqjzu3z6tfi3gwnsaq3fkx.py", directory: "inductor_cache/me")
!4 = !{ptr @triton_per_fused_mean_34, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_mean_34, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_mean_34", linkageName: "triton_per_fused_mean_34", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 19, scope: !7)
!17 = !DILocation(line: 30, column: 19, scope: !7)
!18 = !DILocation(line: 33, column: 39, scope: !7)
!19 = !DILocation(line: 33, column: 35, scope: !7)
!20 = !DILocation(line: 33, column: 49, scope: !7)
!21 = !DILocation(line: 33, column: 44, scope: !7)
!22 = !DILocation(line: 33, column: 30, scope: !7)
!23 = !DILocation(line: 33, column: 54, scope: !7)
!24 = !DILocation(line: 256, column: 15, scope: !25, inlinedAt: !28)
!25 = distinct !DILexicalBlockFile(scope: !27, file: !26, discriminator: 0)
!26 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!27 = distinct !DILexicalBlockFile(scope: !7, file: !26, discriminator: 0)
!28 = !DILocation(line: 36, column: 24, scope: !7)
!29 = !DILocation(line: 267, column: 36, scope: !27, inlinedAt: !28)
!30 = !DILocation(line: 38, column: 18, scope: !7)
!31 = !DILocation(line: 39, column: 4, scope: !7)
!32 = !DILocation(line: 40, column: 28, scope: !7)
!33 = !DILocation(line: 40, column: 39, scope: !7)
!34 = !DILocation(line: 40, column: 4, scope: !7)
