; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_avg_pool2d_9(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 9, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 1, !dbg !12
  %8 = and i32 %7, 510, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = add i32 %9, -12480, !dbg !14
  %11 = sext i32 %10 to i64, !dbg !15
  %12 = getelementptr float, ptr addrspace(1) %0, i64 %11, !dbg !15
  %13 = add i32 %9, -12288, !dbg !16
  %14 = sext i32 %13 to i64, !dbg !17
  %15 = getelementptr float, ptr addrspace(1) %0, i64 %14, !dbg !17
  %16 = add i32 %9, -12096, !dbg !18
  %17 = sext i32 %16 to i64, !dbg !19
  %18 = getelementptr float, ptr addrspace(1) %0, i64 %17, !dbg !19
  %19 = add i32 %9, -192, !dbg !20
  %20 = sext i32 %19 to i64, !dbg !21
  %21 = getelementptr float, ptr addrspace(1) %0, i64 %20, !dbg !21
  %22 = sext i32 %9 to i64, !dbg !22
  %23 = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !22
  %24 = add i32 %9, 192, !dbg !23
  %25 = sext i32 %24 to i64, !dbg !24
  %26 = getelementptr float, ptr addrspace(1) %0, i64 %25, !dbg !24
  %27 = add i32 %9, 12096, !dbg !25
  %28 = sext i32 %27 to i64, !dbg !26
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !26
  %30 = add i32 %9, 12288, !dbg !27
  %31 = sext i32 %30 to i64, !dbg !28
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !28
  %33 = add i32 %9, 12480, !dbg !29
  %34 = sext i32 %33 to i64, !dbg !30
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !30
  %36 = insertelement <2 x i32> poison, i32 %9, i64 0, !dbg !31
  %37 = shufflevector <2 x i32> %36, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !31
  %38 = sdiv <2 x i32> %37, <i32 192, i32 12288>, !dbg !31
  %39 = srem <2 x i32> %38, splat (i32 64), !dbg !32
  %40 = extractelement <2 x i32> %39, i64 1, !dbg !33
  %41 = icmp sgt i32 %40, 0, !dbg !34
  %42 = extractelement <2 x i32> %39, i64 0, !dbg !35
  %43 = add nsw i32 %42, -1, !dbg !36
  %44 = icmp sgt i32 %42, 0, !dbg !37
  %45 = and i1 %41, %44, !dbg !38
  %46 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %12, i1 %45, i32 0, i1 %45, i32 0, i1 %45) #1, !dbg !39
  %47 = extractvalue { i32, i32 } %46, 0, !dbg !39
  %48 = extractvalue { i32, i32 } %46, 1, !dbg !39
  %49 = bitcast i32 %47 to float, !dbg !39
  %50 = bitcast i32 %48 to float, !dbg !39
  %51 = icmp sgt i32 %42, -1, !dbg !40
  %52 = and i1 %41, %51, !dbg !41
  %53 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %15, i1 %52, i32 0, i1 %52, i32 0, i1 %52) #1, !dbg !42
  %54 = extractvalue { i32, i32 } %53, 0, !dbg !42
  %55 = extractvalue { i32, i32 } %53, 1, !dbg !42
  %56 = bitcast i32 %54 to float, !dbg !42
  %57 = bitcast i32 %55 to float, !dbg !42
  %58 = fadd float %49, %56, !dbg !43
  %59 = fadd float %50, %57, !dbg !43
  %60 = add nsw i32 %42, 1, !dbg !44
  %61 = icmp ult i32 %60, 64, !dbg !44
  %62 = and i1 %41, %61, !dbg !45
  %63 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %18, i1 %62, i32 0, i1 %62, i32 0, i1 %62) #1, !dbg !46
  %64 = extractvalue { i32, i32 } %63, 0, !dbg !46
  %65 = extractvalue { i32, i32 } %63, 1, !dbg !46
  %66 = bitcast i32 %64 to float, !dbg !46
  %67 = bitcast i32 %65 to float, !dbg !46
  %68 = fadd float %58, %66, !dbg !47
  %69 = fadd float %59, %67, !dbg !47
  %70 = icmp sgt i32 %40, -1, !dbg !48
  %71 = and i1 %70, %44, !dbg !49
  %72 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %21, i1 %71, i32 0, i1 %71, i32 0, i1 %71) #1, !dbg !50
  %73 = extractvalue { i32, i32 } %72, 0, !dbg !50
  %74 = extractvalue { i32, i32 } %72, 1, !dbg !50
  %75 = bitcast i32 %73 to float, !dbg !50
  %76 = bitcast i32 %74 to float, !dbg !50
  %77 = fadd float %68, %75, !dbg !51
  %78 = fadd float %69, %76, !dbg !51
  %79 = or i32 %40, %42, !dbg !35
  %80 = icmp sgt i32 %79, -1, !dbg !35
  %81 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %23, i1 %80, i32 0, i1 %80, i32 0, i1 %80) #1, !dbg !52
  %82 = extractvalue { i32, i32 } %81, 0, !dbg !52
  %83 = extractvalue { i32, i32 } %81, 1, !dbg !52
  %84 = bitcast i32 %82 to float, !dbg !52
  %85 = bitcast i32 %83 to float, !dbg !52
  %86 = fadd float %77, %84, !dbg !53
  %87 = fadd float %78, %85, !dbg !53
  %88 = and i1 %70, %61, !dbg !54
  %89 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %26, i1 %88, i32 0, i1 %88, i32 0, i1 %88) #1, !dbg !55
  %90 = extractvalue { i32, i32 } %89, 0, !dbg !55
  %91 = extractvalue { i32, i32 } %89, 1, !dbg !55
  %92 = bitcast i32 %90 to float, !dbg !55
  %93 = bitcast i32 %91 to float, !dbg !55
  %94 = fadd float %86, %92, !dbg !56
  %95 = fadd float %87, %93, !dbg !56
  %96 = add nsw i32 %40, 1, !dbg !57
  %97 = icmp ult i32 %96, 64, !dbg !57
  %98 = and i1 %44, %97, !dbg !58
  %99 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %29, i1 %98, i32 0, i1 %98, i32 0, i1 %98) #1, !dbg !59
  %100 = extractvalue { i32, i32 } %99, 0, !dbg !59
  %101 = extractvalue { i32, i32 } %99, 1, !dbg !59
  %102 = bitcast i32 %100 to float, !dbg !59
  %103 = bitcast i32 %101 to float, !dbg !59
  %104 = fadd float %94, %102, !dbg !60
  %105 = fadd float %95, %103, !dbg !60
  %106 = and i1 %51, %97, !dbg !61
  %107 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %32, i1 %106, i32 0, i1 %106, i32 0, i1 %106) #1, !dbg !62
  %108 = extractvalue { i32, i32 } %107, 0, !dbg !62
  %109 = extractvalue { i32, i32 } %107, 1, !dbg !62
  %110 = bitcast i32 %108 to float, !dbg !62
  %111 = bitcast i32 %109 to float, !dbg !62
  %112 = fadd float %104, %110, !dbg !63
  %113 = fadd float %105, %111, !dbg !63
  %114 = or i32 %96, %60, !dbg !64
  %115 = icmp ult i32 %114, 64, !dbg !64
  %116 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %35, i1 %115, i32 0, i1 %115, i32 0, i1 %115) #1, !dbg !65
  %117 = extractvalue { i32, i32 } %116, 0, !dbg !65
  %118 = extractvalue { i32, i32 } %116, 1, !dbg !65
  %119 = bitcast i32 %117 to float, !dbg !65
  %120 = bitcast i32 %118 to float, !dbg !65
  %121 = fadd float %112, %119, !dbg !66
  %122 = fadd float %113, %120, !dbg !66
  %123 = add nsw <2 x i32> %39, <i32 2, i32 -1>, !dbg !67
  %124 = shufflevector <2 x i32> %39, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !68
  %125 = icmp sgt <2 x i32> %124, <i32 61, i32 1>, !dbg !68
  %126 = insertelement <2 x i32> <i32 64, i32 poison>, i32 %43, i64 1, !dbg !69
  %127 = select <2 x i1> %125, <2 x i32> %126, <2 x i32> zeroinitializer, !dbg !69
  %128 = insertelement <2 x i32> %124, i32 1, i64 1, !dbg !70
  %129 = insertelement <2 x i32> %39, i32 62, i64 0, !dbg !70
  %130 = icmp slt <2 x i32> %128, %129, !dbg !70
  %131 = select <2 x i1> %130, <2 x i32> %123, <2 x i32> zeroinitializer, !dbg !71
  %132 = add nsw <2 x i32> %127, %131, !dbg !72
  %133 = mul nsw <2 x i32> %127, %131, !dbg !72
  %134 = add nsw i32 %40, 2, !dbg !73
  %135 = icmp sgt i32 %40, 61, !dbg !74
  %136 = select i1 %135, i32 64, i32 0, !dbg !75
  %137 = icmp slt i32 %40, 62, !dbg !33
  %138 = select i1 %137, i32 %134, i32 0, !dbg !76
  %139 = add nsw i32 %136, %138, !dbg !77
  %140 = extractelement <2 x i32> %132, i64 0, !dbg !78
  %141 = mul nsw i32 %140, %139, !dbg !79
  %142 = extractelement <2 x i32> %127, i64 1, !dbg !78
  %.neg = mul nsw i32 %139, %142, !dbg !78
  %143 = extractelement <2 x i32> %131, i64 1, !dbg !78
  %.neg1 = mul nsw i32 %140, %143, !dbg !78
  %reass.add = add nsw i32 %.neg, %.neg1
  %144 = extractelement <2 x i32> %133, i64 1, !dbg !80
  %145 = add nsw i32 %141, %144, !dbg !80
  %146 = sub nsw i32 %145, %reass.add, !dbg !78
  %147 = sitofp i32 %146 to float, !dbg !81
  %148 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %121, float %147) #1, !dbg !81
  %149 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %122, float %147) #1, !dbg !81
  %150 = getelementptr float, ptr addrspace(1) %1, i64 %22, !dbg !82
  %151 = bitcast float %148 to i32, !dbg !83
  %152 = bitcast float %149 to i32, !dbg !83
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %151, i32 %152, ptr addrspace(1) %150, i1 true) #1, !dbg !83
  ret void, !dbg !84
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cizdhiepetuu4f575xeq7wwssffjfont6mwa74zxyamofr7p7jzu.py", directory: "inductor_cache/iz")
!4 = !{ptr @triton_poi_fused_avg_pool2d_9, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_avg_pool2d_9, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_avg_pool2d_9", linkageName: "triton_poi_fused_avg_pool2d_9", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 38, column: 42, scope: !7)
!15 = !DILocation(line: 38, column: 31, scope: !7)
!16 = !DILocation(line: 44, column: 42, scope: !7)
!17 = !DILocation(line: 44, column: 31, scope: !7)
!18 = !DILocation(line: 51, column: 42, scope: !7)
!19 = !DILocation(line: 51, column: 31, scope: !7)
!20 = !DILocation(line: 58, column: 40, scope: !7)
!21 = !DILocation(line: 58, column: 31, scope: !7)
!22 = !DILocation(line: 61, column: 31, scope: !7)
!23 = !DILocation(line: 64, column: 37, scope: !7)
!24 = !DILocation(line: 64, column: 31, scope: !7)
!25 = !DILocation(line: 71, column: 39, scope: !7)
!26 = !DILocation(line: 71, column: 31, scope: !7)
!27 = !DILocation(line: 74, column: 39, scope: !7)
!28 = !DILocation(line: 74, column: 31, scope: !7)
!29 = !DILocation(line: 77, column: 39, scope: !7)
!30 = !DILocation(line: 77, column: 31, scope: !7)
!31 = !DILocation(line: 25, column: 21, scope: !7)
!32 = !DILocation(line: 25, column: 28, scope: !7)
!33 = !DILocation(line: 79, column: 256, scope: !7)
!34 = !DILocation(line: 29, column: 19, scope: !7)
!35 = !DILocation(line: 60, column: 20, scope: !7)
!36 = !DILocation(line: 33, column: 18, scope: !7)
!37 = !DILocation(line: 34, column: 19, scope: !7)
!38 = !DILocation(line: 37, column: 19, scope: !7)
!39 = !DILocation(line: 38, column: 47, scope: !7)
!40 = !DILocation(line: 40, column: 21, scope: !7)
!41 = !DILocation(line: 43, column: 19, scope: !7)
!42 = !DILocation(line: 44, column: 47, scope: !7)
!43 = !DILocation(line: 45, column: 20, scope: !7)
!44 = !DILocation(line: 49, column: 20, scope: !7)
!45 = !DILocation(line: 50, column: 19, scope: !7)
!46 = !DILocation(line: 51, column: 47, scope: !7)
!47 = !DILocation(line: 52, column: 20, scope: !7)
!48 = !DILocation(line: 54, column: 21, scope: !7)
!49 = !DILocation(line: 57, column: 20, scope: !7)
!50 = !DILocation(line: 58, column: 45, scope: !7)
!51 = !DILocation(line: 59, column: 20, scope: !7)
!52 = !DILocation(line: 61, column: 36, scope: !7)
!53 = !DILocation(line: 62, column: 20, scope: !7)
!54 = !DILocation(line: 63, column: 20, scope: !7)
!55 = !DILocation(line: 64, column: 42, scope: !7)
!56 = !DILocation(line: 65, column: 20, scope: !7)
!57 = !DILocation(line: 69, column: 20, scope: !7)
!58 = !DILocation(line: 70, column: 20, scope: !7)
!59 = !DILocation(line: 71, column: 44, scope: !7)
!60 = !DILocation(line: 72, column: 20, scope: !7)
!61 = !DILocation(line: 73, column: 20, scope: !7)
!62 = !DILocation(line: 74, column: 44, scope: !7)
!63 = !DILocation(line: 75, column: 20, scope: !7)
!64 = !DILocation(line: 76, column: 20, scope: !7)
!65 = !DILocation(line: 77, column: 44, scope: !7)
!66 = !DILocation(line: 78, column: 20, scope: !7)
!67 = !DILocation(line: 79, column: 166, scope: !7)
!68 = !DILocation(line: 79, column: 162, scope: !7)
!69 = !DILocation(line: 79, column: 153, scope: !7)
!70 = !DILocation(line: 79, column: 197, scope: !7)
!71 = !DILocation(line: 79, column: 185, scope: !7)
!72 = !DILocation(line: 79, column: 173, scope: !7)
!73 = !DILocation(line: 79, column: 225, scope: !7)
!74 = !DILocation(line: 79, column: 221, scope: !7)
!75 = !DILocation(line: 79, column: 212, scope: !7)
!76 = !DILocation(line: 79, column: 244, scope: !7)
!77 = !DILocation(line: 79, column: 232, scope: !7)
!78 = !DILocation(line: 79, column: 398, scope: !7)
!79 = !DILocation(line: 79, column: 204, scope: !7)
!80 = !DILocation(line: 79, column: 144, scope: !7)
!81 = !DILocation(line: 80, column: 20, scope: !7)
!82 = !DILocation(line: 81, column: 25, scope: !7)
!83 = !DILocation(line: 81, column: 37, scope: !7)
!84 = !DILocation(line: 81, column: 4, scope: !7)
