; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_reflection_pad2d_relu_18(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %9 = shl i32 %8, 9, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 1, !dbg !12
  %12 = and i32 %11, 510, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %14 = or disjoint i32 %13, 1, !dbg !13
  %.frozen = freeze i32 %13, !dbg !14
  %15 = sdiv i32 %.frozen, 10, !dbg !14
  %16 = mul i32 %15, 10, !dbg !15
  %.decomposed = sub i32 %.frozen, %16, !dbg !15
  %17 = srem i32 %14, 10, !dbg !15
  %18 = srem i32 %15, 10, !dbg !16
  %19 = sdiv i32 %13, 100, !dbg !17
  %20 = srem i32 %19, 256, !dbg !18
  %21 = add nsw i32 %.decomposed, -1, !dbg !19
  %22 = add nsw i32 %17, -1, !dbg !19
  %23 = tail call i32 @llvm.abs.i32(i32 %21, i1 true), !dbg !20
  %24 = tail call i32 @llvm.abs.i32(i32 %22, i1 true), !dbg !20
  %25 = add nsw i32 %23, -7, !dbg !21
  %26 = add nsw i32 %24, -7, !dbg !21
  %27 = tail call i32 @llvm.abs.i32(i32 %25, i1 true), !dbg !22
  %28 = tail call i32 @llvm.abs.i32(i32 %26, i1 true), !dbg !22
  %29 = add nsw i32 %18, -1, !dbg !23
  %30 = tail call i32 @llvm.abs.i32(i32 %29, i1 true), !dbg !24
  %31 = add nsw i32 %30, -7, !dbg !25
  %32 = tail call i32 @llvm.abs.i32(i32 %31, i1 true), !dbg !26
  %33 = mul nsw i32 %32, -8, !dbg !27
  %34 = shl nsw i32 %19, 6, !dbg !28
  %reass.sub = or disjoint i32 %34, 63, !dbg !29
  %35 = sub nuw i32 %reass.sub, %27, !dbg !29
  %36 = add i32 %35, %33, !dbg !30
  %37 = sub nuw i32 %reass.sub, %28, !dbg !29
  %38 = add i32 %37, %33, !dbg !30
  %39 = sext i32 %36 to i64, !dbg !31
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !31
  %41 = sext i32 %38 to i64, !dbg !31
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !31
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 true) #3, !dbg !32
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 true) #3, !dbg !32
  %45 = sext i32 %20 to i64, !dbg !33
  %46 = getelementptr float, ptr addrspace(1) %1, i64 %45, !dbg !33
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 true) #3, !dbg !34
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 true) #3, !dbg !34
  %49 = getelementptr float, ptr addrspace(1) %2, i64 %45, !dbg !35
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 true) #3, !dbg !36
  %51 = bitcast i32 %50 to float, !dbg !36
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 true) #3, !dbg !36
  %53 = bitcast i32 %52 to float, !dbg !36
  %54 = getelementptr float, ptr addrspace(1) %3, i64 %45, !dbg !37
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 true) #3, !dbg !38
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 true) #3, !dbg !38
  %57 = getelementptr float, ptr addrspace(1) %4, i64 %45, !dbg !39
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 true) #3, !dbg !40
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 true) #3, !dbg !40
  %60 = fadd float %51, 0x3EE4F8B580000000, !dbg !41
  %61 = fadd float %53, 0x3EE4F8B580000000, !dbg !41
  %62 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !42
  %.not.i = icmp eq i32 %62, 0, !dbg !42
  %63 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !42
  %.not1.i = icmp eq i32 %63, 0, !dbg !42
  br i1 %.not.i, label %69, label %64, !dbg !42

64:                                               ; preds = %7
  br i1 %.not1.i, label %67, label %65, !dbg !42

65:                                               ; preds = %64
  %66 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %60) #3, !dbg !42
  br label %__nv_sqrtf.exit, !dbg !42

67:                                               ; preds = %64
  %68 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %60) #3, !dbg !42
  br label %__nv_sqrtf.exit, !dbg !42

69:                                               ; preds = %7
  br i1 %.not1.i, label %72, label %70, !dbg !42

70:                                               ; preds = %69
  %71 = tail call float @llvm.nvvm.sqrt.rn.f(float %60) #3, !dbg !42
  br label %__nv_sqrtf.exit, !dbg !42

72:                                               ; preds = %69
  %73 = tail call float @llvm.nvvm.sqrt.approx.f(float %60) #3, !dbg !42
  br label %__nv_sqrtf.exit, !dbg !42

__nv_sqrtf.exit:                                  ; preds = %65, %67, %70, %72
  %.0.i = phi float [ %66, %65 ], [ %68, %67 ], [ %71, %70 ], [ %73, %72 ], !dbg !42
  %74 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !42
  %.not.i2 = icmp eq i32 %74, 0, !dbg !42
  %75 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !42
  %.not1.i5 = icmp eq i32 %75, 0, !dbg !42
  br i1 %.not.i2, label %81, label %76, !dbg !42

76:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i5, label %79, label %77, !dbg !42

77:                                               ; preds = %76
  %78 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %61) #3, !dbg !42
  br label %__nv_sqrtf.exit6, !dbg !42

79:                                               ; preds = %76
  %80 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %61) #3, !dbg !42
  br label %__nv_sqrtf.exit6, !dbg !42

81:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i5, label %84, label %82, !dbg !42

82:                                               ; preds = %81
  %83 = tail call float @llvm.nvvm.sqrt.rn.f(float %61) #3, !dbg !42
  br label %__nv_sqrtf.exit6, !dbg !42

84:                                               ; preds = %81
  %85 = tail call float @llvm.nvvm.sqrt.approx.f(float %61) #3, !dbg !42
  br label %__nv_sqrtf.exit6, !dbg !42

__nv_sqrtf.exit6:                                 ; preds = %77, %79, %82, %84
  %.0.i4 = phi float [ %78, %77 ], [ %80, %79 ], [ %83, %82 ], [ %85, %84 ], !dbg !42
  %86 = bitcast i32 %44 to float, !dbg !32
  %87 = bitcast i32 %48 to float, !dbg !34
  %88 = fsub float %86, %87, !dbg !43
  %89 = bitcast i32 %43 to float, !dbg !32
  %90 = bitcast i32 %47 to float, !dbg !34
  %91 = fsub float %89, %90, !dbg !43
  %92 = bitcast i32 %59 to float, !dbg !40
  %93 = bitcast i32 %58 to float, !dbg !40
  %94 = bitcast i32 %56 to float, !dbg !38
  %95 = bitcast i32 %55 to float, !dbg !38
  %96 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !44
  %97 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i4) #3, !dbg !44
  %98 = fmul float %91, %96, !dbg !45
  %99 = fmul float %88, %97, !dbg !45
  %100 = fmul float %98, %95, !dbg !46
  %101 = fmul float %99, %94, !dbg !46
  %102 = fadd float %100, %93, !dbg !47
  %103 = fadd float %101, %92, !dbg !47
  %104 = fcmp olt float %102, 0.000000e+00, !dbg !48
  %105 = fcmp olt float %103, 0.000000e+00, !dbg !48
  %106 = select i1 %104, float 0.000000e+00, float %102, !dbg !52
  %107 = select i1 %105, float 0.000000e+00, float %103, !dbg !52
  %108 = sext i32 %13 to i64, !dbg !53
  %109 = getelementptr float, ptr addrspace(1) %5, i64 %108, !dbg !53
  %110 = bitcast float %106 to i32, !dbg !54
  %111 = bitcast float %107 to i32, !dbg !54
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %110, i32 %111, ptr addrspace(1) %109, i1 true) #3, !dbg !54
  ret void, !dbg !55
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.abs.i32(i32, i1 immarg) #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "czxmcmabgkhd3bxovo5dfwh23eizlkqatczmsiqpzltry5vywcuz.py", directory: "inductor_cache/zx")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_reflection_pad2d_relu_18, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_reflection_pad2d_relu_18, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_reflection_pad2d_relu_18", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_reflection_pad2d_relu_18", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 25, column: 27, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 27, column: 28, scope: !7)
!19 = !DILocation(line: 29, column: 79, scope: !7)
!20 = !DILocation(line: 29, column: 72, scope: !7)
!21 = !DILocation(line: 29, column: 60, scope: !7)
!22 = !DILocation(line: 29, column: 53, scope: !7)
!23 = !DILocation(line: 29, column: 131, scope: !7)
!24 = !DILocation(line: 29, column: 124, scope: !7)
!25 = !DILocation(line: 29, column: 112, scope: !7)
!26 = !DILocation(line: 29, column: 105, scope: !7)
!27 = !DILocation(line: 29, column: 93, scope: !7)
!28 = !DILocation(line: 29, column: 142, scope: !7)
!29 = !DILocation(line: 29, column: 88, scope: !7)
!30 = !DILocation(line: 29, column: 139, scope: !7)
!31 = !DILocation(line: 29, column: 30, scope: !7)
!32 = !DILocation(line: 29, column: 147, scope: !7)
!33 = !DILocation(line: 30, column: 30, scope: !7)
!34 = !DILocation(line: 30, column: 35, scope: !7)
!35 = !DILocation(line: 31, column: 30, scope: !7)
!36 = !DILocation(line: 31, column: 35, scope: !7)
!37 = !DILocation(line: 32, column: 31, scope: !7)
!38 = !DILocation(line: 32, column: 36, scope: !7)
!39 = !DILocation(line: 33, column: 31, scope: !7)
!40 = !DILocation(line: 33, column: 36, scope: !7)
!41 = !DILocation(line: 36, column: 18, scope: !7)
!42 = !DILocation(line: 37, column: 26, scope: !7)
!43 = !DILocation(line: 34, column: 18, scope: !7)
!44 = !DILocation(line: 39, column: 18, scope: !7)
!45 = !DILocation(line: 42, column: 19, scope: !7)
!46 = !DILocation(line: 43, column: 20, scope: !7)
!47 = !DILocation(line: 44, column: 20, scope: !7)
!48 = !DILocation(line: 118, column: 15, scope: !49, inlinedAt: !51)
!49 = distinct !DILexicalBlockFile(scope: !7, file: !50, discriminator: 0)
!50 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!51 = !DILocation(line: 46, column: 42, scope: !7)
!52 = !DILocation(line: 121, column: 29, scope: !49, inlinedAt: !51)
!53 = !DILocation(line: 47, column: 25, scope: !7)
!54 = !DILocation(line: 47, column: 37, scope: !7)
!55 = !DILocation(line: 47, column: 4, scope: !7)
