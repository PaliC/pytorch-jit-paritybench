; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_leaky_relu_mean_relu_13(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 8, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 1, !dbg !12
  %8 = and i32 %7, 254, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %.frozen = freeze i32 %9, !dbg !14
  %10 = sdiv i32 %.frozen, 1024, !dbg !14
  %11 = mul i32 %10, 1024, !dbg !15
  %.decomposed = sub i32 %.frozen, %11, !dbg !15
  %12 = shl i32 %10, 12, !dbg !16
  %13 = add i32 %12, %.decomposed, !dbg !17
  %14 = sext i32 %13 to i64, !dbg !18
  %15 = getelementptr float, ptr addrspace(1) %0, i64 %14, !dbg !18
  %16 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %15, i1 true) #1, !dbg !19
  %17 = extractvalue { i32, i32 } %16, 0, !dbg !19
  %18 = extractvalue { i32, i32 } %16, 1, !dbg !19
  %19 = add i32 %13, 1024, !dbg !20
  %20 = sext i32 %19 to i64, !dbg !21
  %21 = getelementptr float, ptr addrspace(1) %0, i64 %20, !dbg !21
  %22 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %21, i1 true) #1, !dbg !22
  %23 = extractvalue { i32, i32 } %22, 0, !dbg !22
  %24 = extractvalue { i32, i32 } %22, 1, !dbg !22
  %25 = add i32 %13, 2048, !dbg !23
  %26 = sext i32 %25 to i64, !dbg !24
  %27 = getelementptr float, ptr addrspace(1) %0, i64 %26, !dbg !24
  %28 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %27, i1 true) #1, !dbg !25
  %29 = extractvalue { i32, i32 } %28, 0, !dbg !25
  %30 = extractvalue { i32, i32 } %28, 1, !dbg !25
  %31 = add i32 %13, 3072, !dbg !26
  %32 = sext i32 %31 to i64, !dbg !27
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !27
  %34 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %33, i1 true) #1, !dbg !28
  %35 = extractvalue { i32, i32 } %34, 0, !dbg !28
  %36 = extractvalue { i32, i32 } %34, 1, !dbg !28
  %37 = insertelement <2 x i32> poison, i32 %17, i64 0, !dbg !19
  %38 = insertelement <2 x i32> %37, i32 %23, i64 1, !dbg !19
  %39 = bitcast <2 x i32> %38 to <2 x float>, !dbg !19
  %40 = fcmp ogt <2 x float> %39, zeroinitializer, !dbg !29
  %41 = fmul <2 x float> %39, splat (float 0x3F847AE140000000), !dbg !30
  %42 = select <2 x i1> %40, <2 x float> %39, <2 x float> %41, !dbg !31
  %43 = fcmp olt <2 x float> %42, zeroinitializer, !dbg !32
  %44 = select <2 x i1> %43, <2 x float> zeroinitializer, <2 x float> %42, !dbg !36
  %45 = insertelement <2 x i32> poison, i32 %18, i64 0, !dbg !19
  %46 = insertelement <2 x i32> %45, i32 %24, i64 1, !dbg !19
  %47 = bitcast <2 x i32> %46 to <2 x float>, !dbg !19
  %48 = fcmp ogt <2 x float> %47, zeroinitializer, !dbg !29
  %49 = fmul <2 x float> %47, splat (float 0x3F847AE140000000), !dbg !30
  %50 = select <2 x i1> %48, <2 x float> %47, <2 x float> %49, !dbg !31
  %51 = fcmp olt <2 x float> %50, zeroinitializer, !dbg !32
  %52 = select <2 x i1> %51, <2 x float> zeroinitializer, <2 x float> %50, !dbg !36
  %shift = shufflevector <2 x float> %44, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !37
  %53 = fadd <2 x float> %44, %shift, !dbg !37
  %54 = extractelement <2 x float> %53, i64 0, !dbg !37
  %shift1 = shufflevector <2 x float> %52, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !37
  %55 = fadd <2 x float> %52, %shift1, !dbg !37
  %56 = extractelement <2 x float> %55, i64 0, !dbg !37
  %57 = insertelement <4 x i32> poison, i32 %36, i64 0, !dbg !28
  %58 = insertelement <4 x i32> %57, i32 %35, i64 1, !dbg !28
  %59 = insertelement <4 x i32> %58, i32 %30, i64 2, !dbg !28
  %60 = insertelement <4 x i32> %59, i32 %29, i64 3, !dbg !28
  %61 = bitcast <4 x i32> %60 to <4 x float>, !dbg !28
  %62 = fcmp ogt <4 x float> %61, zeroinitializer, !dbg !38
  %63 = fmul <4 x float> %61, splat (float 0x3F847AE140000000), !dbg !39
  %64 = select <4 x i1> %62, <4 x float> %61, <4 x float> %63, !dbg !40
  %65 = fcmp olt <4 x float> %64, zeroinitializer, !dbg !41
  %66 = extractelement <4 x i1> %65, i64 3, !dbg !43
  %67 = extractelement <4 x float> %64, i64 3, !dbg !43
  %68 = select i1 %66, float 0.000000e+00, float %67, !dbg !43
  %69 = extractelement <4 x i1> %65, i64 2, !dbg !43
  %70 = extractelement <4 x float> %64, i64 2, !dbg !43
  %71 = select i1 %69, float 0.000000e+00, float %70, !dbg !43
  %72 = fadd float %54, %68, !dbg !45
  %73 = fadd float %56, %71, !dbg !45
  %74 = extractelement <4 x i1> %65, i64 1, !dbg !46
  %75 = extractelement <4 x float> %64, i64 1, !dbg !46
  %76 = select i1 %74, float 0.000000e+00, float %75, !dbg !46
  %77 = extractelement <4 x i1> %65, i64 0, !dbg !46
  %78 = extractelement <4 x float> %64, i64 0, !dbg !46
  %79 = select i1 %77, float 0.000000e+00, float %78, !dbg !46
  %80 = fadd float %72, %76, !dbg !47
  %81 = fadd float %73, %79, !dbg !47
  %82 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %80, float 4.000000e+00) #1, !dbg !48
  %83 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %81, float 4.000000e+00) #1, !dbg !48
  %84 = sext i32 %9 to i64, !dbg !49
  %85 = getelementptr float, ptr addrspace(1) %1, i64 %84, !dbg !49
  %86 = bitcast float %82 to i32, !dbg !50
  %87 = bitcast float %83 to i32, !dbg !50
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %86, i32 %87, ptr addrspace(1) %85, i1 true) #1, !dbg !50
  ret void, !dbg !51
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cdorzmcnyoypctbdj2qyzqc55cwnum64ltsignsly6llsyqqymie.py", directory: "inductor_cache/do")
!4 = !{ptr @triton_poi_fused_leaky_relu_mean_relu_13, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_leaky_relu_mean_relu_13, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_leaky_relu_mean_relu_13", linkageName: "triton_poi_fused_leaky_relu_mean_relu_13", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 27, column: 40, scope: !7)
!17 = !DILocation(line: 27, column: 35, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 45, scope: !7)
!20 = !DILocation(line: 28, column: 43, scope: !7)
!21 = !DILocation(line: 28, column: 31, scope: !7)
!22 = !DILocation(line: 28, column: 53, scope: !7)
!23 = !DILocation(line: 29, column: 43, scope: !7)
!24 = !DILocation(line: 29, column: 31, scope: !7)
!25 = !DILocation(line: 29, column: 53, scope: !7)
!26 = !DILocation(line: 30, column: 43, scope: !7)
!27 = !DILocation(line: 30, column: 31, scope: !7)
!28 = !DILocation(line: 30, column: 53, scope: !7)
!29 = !DILocation(line: 32, column: 18, scope: !7)
!30 = !DILocation(line: 34, column: 18, scope: !7)
!31 = !DILocation(line: 35, column: 32, scope: !7)
!32 = !DILocation(line: 118, column: 15, scope: !33, inlinedAt: !35)
!33 = distinct !DILexicalBlockFile(scope: !7, file: !34, discriminator: 0)
!34 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!35 = !DILocation(line: 37, column: 40, scope: !7)
!36 = !DILocation(line: 121, column: 29, scope: !33, inlinedAt: !35)
!37 = !DILocation(line: 48, column: 20, scope: !7)
!38 = !DILocation(line: 57, column: 20, scope: !7)
!39 = !DILocation(line: 58, column: 20, scope: !7)
!40 = !DILocation(line: 59, column: 35, scope: !7)
!41 = !DILocation(line: 118, column: 15, scope: !33, inlinedAt: !42)
!42 = !DILocation(line: 60, column: 41, scope: !7)
!43 = !DILocation(line: 121, column: 29, scope: !33, inlinedAt: !44)
!44 = !DILocation(line: 52, column: 41, scope: !7)
!45 = !DILocation(line: 56, column: 20, scope: !7)
!46 = !DILocation(line: 121, column: 29, scope: !33, inlinedAt: !42)
!47 = !DILocation(line: 64, column: 20, scope: !7)
!48 = !DILocation(line: 66, column: 20, scope: !7)
!49 = !DILocation(line: 67, column: 25, scope: !7)
!50 = !DILocation(line: 67, column: 37, scope: !7)
!51 = !DILocation(line: 67, column: 4, scope: !7)
