; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_cat_convolution_relu_1(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %12 = shl i32 %11, 10, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = shl i32 %13, 2, !dbg !12
  %15 = and i32 %14, 508, !dbg !12
  %16 = or disjoint i32 %12, %15, !dbg !13
  %17 = or disjoint i32 %16, 512, !dbg !13
  %18 = sdiv i32 %16, 4096, !dbg !14
  %19 = sdiv i32 %17, 4096, !dbg !14
  %20 = srem i32 %18, 32, !dbg !15
  %21 = srem i32 %19, 32, !dbg !15
  %22 = sext i32 %16 to i64, !dbg !16
  %23 = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !16
  %24 = sext i32 %17 to i64, !dbg !16
  %25 = getelementptr float, ptr addrspace(1) %0, i64 %24, !dbg !16
  %26 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %23, i1 true) #3, !dbg !17
  %27 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %25, i1 true) #3, !dbg !17
  %28 = sext i32 %20 to i64, !dbg !18
  %29 = getelementptr float, ptr addrspace(1) %1, i64 %28, !dbg !18
  %30 = sext i32 %21 to i64, !dbg !18
  %31 = getelementptr float, ptr addrspace(1) %1, i64 %30, !dbg !18
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 true) #3, !dbg !19
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 true) #3, !dbg !19
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 true) #3, !dbg !19
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 true) #3, !dbg !19
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 true) #3, !dbg !19
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 true) #3, !dbg !19
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 true) #3, !dbg !19
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 true) #3, !dbg !19
  %40 = getelementptr float, ptr addrspace(1) %2, i64 %28, !dbg !20
  %41 = getelementptr float, ptr addrspace(1) %2, i64 %30, !dbg !20
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 true) #3, !dbg !21
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 true) #3, !dbg !21
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 true) #3, !dbg !21
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 true) #3, !dbg !21
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 true) #3, !dbg !21
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 true) #3, !dbg !21
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 true) #3, !dbg !21
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 true) #3, !dbg !21
  %50 = getelementptr float, ptr addrspace(1) %3, i64 %28, !dbg !22
  %51 = getelementptr float, ptr addrspace(1) %3, i64 %30, !dbg !22
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 true) #3, !dbg !23
  %53 = bitcast i32 %52 to float, !dbg !23
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 true) #3, !dbg !23
  %55 = bitcast i32 %54 to float, !dbg !23
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 true) #3, !dbg !23
  %57 = bitcast i32 %56 to float, !dbg !23
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 true) #3, !dbg !23
  %59 = bitcast i32 %58 to float, !dbg !23
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 true) #3, !dbg !23
  %61 = bitcast i32 %60 to float, !dbg !23
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 true) #3, !dbg !23
  %63 = bitcast i32 %62 to float, !dbg !23
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 true) #3, !dbg !23
  %65 = bitcast i32 %64 to float, !dbg !23
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 true) #3, !dbg !23
  %67 = bitcast i32 %66 to float, !dbg !23
  %68 = getelementptr float, ptr addrspace(1) %4, i64 %28, !dbg !24
  %69 = getelementptr float, ptr addrspace(1) %4, i64 %30, !dbg !24
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 true) #3, !dbg !25
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 true) #3, !dbg !25
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 true) #3, !dbg !25
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 true) #3, !dbg !25
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 true) #3, !dbg !25
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 true) #3, !dbg !25
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 true) #3, !dbg !25
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 true) #3, !dbg !25
  %78 = getelementptr float, ptr addrspace(1) %5, i64 %28, !dbg !26
  %79 = getelementptr float, ptr addrspace(1) %5, i64 %30, !dbg !26
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 true) #3, !dbg !27
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 true) #3, !dbg !27
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 true) #3, !dbg !27
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 true) #3, !dbg !27
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %79, i1 true) #3, !dbg !27
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %79, i1 true) #3, !dbg !27
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %79, i1 true) #3, !dbg !27
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %79, i1 true) #3, !dbg !27
  %88 = fadd float %53, 0x3EE4F8B580000000, !dbg !28
  %89 = fadd float %55, 0x3EE4F8B580000000, !dbg !28
  %90 = fadd float %57, 0x3EE4F8B580000000, !dbg !28
  %91 = fadd float %59, 0x3EE4F8B580000000, !dbg !28
  %92 = fadd float %61, 0x3EE4F8B580000000, !dbg !28
  %93 = fadd float %63, 0x3EE4F8B580000000, !dbg !28
  %94 = fadd float %65, 0x3EE4F8B580000000, !dbg !28
  %95 = fadd float %67, 0x3EE4F8B580000000, !dbg !28
  %96 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i = icmp eq i32 %96, 0, !dbg !29
  %97 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i = icmp eq i32 %97, 0, !dbg !29
  br i1 %.not.i, label %103, label %98, !dbg !29

98:                                               ; preds = %10
  br i1 %.not1.i, label %101, label %99, !dbg !29

99:                                               ; preds = %98
  %100 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %88) #3, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

101:                                              ; preds = %98
  %102 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %88) #3, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

103:                                              ; preds = %10
  br i1 %.not1.i, label %106, label %104, !dbg !29

104:                                              ; preds = %103
  %105 = tail call float @llvm.nvvm.sqrt.rn.f(float %88) #3, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

106:                                              ; preds = %103
  %107 = tail call float @llvm.nvvm.sqrt.approx.f(float %88) #3, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

__nv_sqrtf.exit:                                  ; preds = %99, %101, %104, %106
  %.0.i = phi float [ %100, %99 ], [ %102, %101 ], [ %105, %104 ], [ %107, %106 ], !dbg !29
  %108 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i1 = icmp eq i32 %108, 0, !dbg !29
  %109 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i4 = icmp eq i32 %109, 0, !dbg !29
  br i1 %.not.i1, label %115, label %110, !dbg !29

110:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %113, label %111, !dbg !29

111:                                              ; preds = %110
  %112 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %89) #3, !dbg !29
  br label %__nv_sqrtf.exit5, !dbg !29

113:                                              ; preds = %110
  %114 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %89) #3, !dbg !29
  br label %__nv_sqrtf.exit5, !dbg !29

115:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %118, label %116, !dbg !29

116:                                              ; preds = %115
  %117 = tail call float @llvm.nvvm.sqrt.rn.f(float %89) #3, !dbg !29
  br label %__nv_sqrtf.exit5, !dbg !29

118:                                              ; preds = %115
  %119 = tail call float @llvm.nvvm.sqrt.approx.f(float %89) #3, !dbg !29
  br label %__nv_sqrtf.exit5, !dbg !29

__nv_sqrtf.exit5:                                 ; preds = %111, %113, %116, %118
  %.0.i3 = phi float [ %112, %111 ], [ %114, %113 ], [ %117, %116 ], [ %119, %118 ], !dbg !29
  %120 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i6 = icmp eq i32 %120, 0, !dbg !29
  %121 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i9 = icmp eq i32 %121, 0, !dbg !29
  br i1 %.not.i6, label %127, label %122, !dbg !29

122:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %125, label %123, !dbg !29

123:                                              ; preds = %122
  %124 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %90) #3, !dbg !29
  br label %__nv_sqrtf.exit10, !dbg !29

125:                                              ; preds = %122
  %126 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %90) #3, !dbg !29
  br label %__nv_sqrtf.exit10, !dbg !29

127:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %130, label %128, !dbg !29

128:                                              ; preds = %127
  %129 = tail call float @llvm.nvvm.sqrt.rn.f(float %90) #3, !dbg !29
  br label %__nv_sqrtf.exit10, !dbg !29

130:                                              ; preds = %127
  %131 = tail call float @llvm.nvvm.sqrt.approx.f(float %90) #3, !dbg !29
  br label %__nv_sqrtf.exit10, !dbg !29

__nv_sqrtf.exit10:                                ; preds = %123, %125, %128, %130
  %.0.i8 = phi float [ %124, %123 ], [ %126, %125 ], [ %129, %128 ], [ %131, %130 ], !dbg !29
  %132 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i11 = icmp eq i32 %132, 0, !dbg !29
  %133 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i14 = icmp eq i32 %133, 0, !dbg !29
  br i1 %.not.i11, label %139, label %134, !dbg !29

134:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %137, label %135, !dbg !29

135:                                              ; preds = %134
  %136 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %91) #3, !dbg !29
  br label %__nv_sqrtf.exit15, !dbg !29

137:                                              ; preds = %134
  %138 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %91) #3, !dbg !29
  br label %__nv_sqrtf.exit15, !dbg !29

139:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %142, label %140, !dbg !29

140:                                              ; preds = %139
  %141 = tail call float @llvm.nvvm.sqrt.rn.f(float %91) #3, !dbg !29
  br label %__nv_sqrtf.exit15, !dbg !29

142:                                              ; preds = %139
  %143 = tail call float @llvm.nvvm.sqrt.approx.f(float %91) #3, !dbg !29
  br label %__nv_sqrtf.exit15, !dbg !29

__nv_sqrtf.exit15:                                ; preds = %135, %137, %140, %142
  %.0.i13 = phi float [ %136, %135 ], [ %138, %137 ], [ %141, %140 ], [ %143, %142 ], !dbg !29
  %144 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i16 = icmp eq i32 %144, 0, !dbg !29
  %145 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i19 = icmp eq i32 %145, 0, !dbg !29
  br i1 %.not.i16, label %151, label %146, !dbg !29

146:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %149, label %147, !dbg !29

147:                                              ; preds = %146
  %148 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %92) #3, !dbg !29
  br label %__nv_sqrtf.exit20, !dbg !29

149:                                              ; preds = %146
  %150 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %92) #3, !dbg !29
  br label %__nv_sqrtf.exit20, !dbg !29

151:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %154, label %152, !dbg !29

152:                                              ; preds = %151
  %153 = tail call float @llvm.nvvm.sqrt.rn.f(float %92) #3, !dbg !29
  br label %__nv_sqrtf.exit20, !dbg !29

154:                                              ; preds = %151
  %155 = tail call float @llvm.nvvm.sqrt.approx.f(float %92) #3, !dbg !29
  br label %__nv_sqrtf.exit20, !dbg !29

__nv_sqrtf.exit20:                                ; preds = %147, %149, %152, %154
  %.0.i18 = phi float [ %148, %147 ], [ %150, %149 ], [ %153, %152 ], [ %155, %154 ], !dbg !29
  %156 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i21 = icmp eq i32 %156, 0, !dbg !29
  %157 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i24 = icmp eq i32 %157, 0, !dbg !29
  br i1 %.not.i21, label %163, label %158, !dbg !29

158:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %161, label %159, !dbg !29

159:                                              ; preds = %158
  %160 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %93) #3, !dbg !29
  br label %__nv_sqrtf.exit25, !dbg !29

161:                                              ; preds = %158
  %162 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %93) #3, !dbg !29
  br label %__nv_sqrtf.exit25, !dbg !29

163:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %166, label %164, !dbg !29

164:                                              ; preds = %163
  %165 = tail call float @llvm.nvvm.sqrt.rn.f(float %93) #3, !dbg !29
  br label %__nv_sqrtf.exit25, !dbg !29

166:                                              ; preds = %163
  %167 = tail call float @llvm.nvvm.sqrt.approx.f(float %93) #3, !dbg !29
  br label %__nv_sqrtf.exit25, !dbg !29

__nv_sqrtf.exit25:                                ; preds = %159, %161, %164, %166
  %.0.i23 = phi float [ %160, %159 ], [ %162, %161 ], [ %165, %164 ], [ %167, %166 ], !dbg !29
  %168 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i26 = icmp eq i32 %168, 0, !dbg !29
  %169 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i29 = icmp eq i32 %169, 0, !dbg !29
  br i1 %.not.i26, label %175, label %170, !dbg !29

170:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %173, label %171, !dbg !29

171:                                              ; preds = %170
  %172 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %94) #3, !dbg !29
  br label %__nv_sqrtf.exit30, !dbg !29

173:                                              ; preds = %170
  %174 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %94) #3, !dbg !29
  br label %__nv_sqrtf.exit30, !dbg !29

175:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %178, label %176, !dbg !29

176:                                              ; preds = %175
  %177 = tail call float @llvm.nvvm.sqrt.rn.f(float %94) #3, !dbg !29
  br label %__nv_sqrtf.exit30, !dbg !29

178:                                              ; preds = %175
  %179 = tail call float @llvm.nvvm.sqrt.approx.f(float %94) #3, !dbg !29
  br label %__nv_sqrtf.exit30, !dbg !29

__nv_sqrtf.exit30:                                ; preds = %171, %173, %176, %178
  %.0.i28 = phi float [ %172, %171 ], [ %174, %173 ], [ %177, %176 ], [ %179, %178 ], !dbg !29
  %180 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i31 = icmp eq i32 %180, 0, !dbg !29
  %181 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i34 = icmp eq i32 %181, 0, !dbg !29
  br i1 %.not.i31, label %187, label %182, !dbg !29

182:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %185, label %183, !dbg !29

183:                                              ; preds = %182
  %184 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %95) #3, !dbg !29
  br label %__nv_sqrtf.exit35, !dbg !29

185:                                              ; preds = %182
  %186 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %95) #3, !dbg !29
  br label %__nv_sqrtf.exit35, !dbg !29

187:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %190, label %188, !dbg !29

188:                                              ; preds = %187
  %189 = tail call float @llvm.nvvm.sqrt.rn.f(float %95) #3, !dbg !29
  br label %__nv_sqrtf.exit35, !dbg !29

190:                                              ; preds = %187
  %191 = tail call float @llvm.nvvm.sqrt.approx.f(float %95) #3, !dbg !29
  br label %__nv_sqrtf.exit35, !dbg !29

__nv_sqrtf.exit35:                                ; preds = %183, %185, %188, %190
  %.0.i33 = phi float [ %184, %183 ], [ %186, %185 ], [ %189, %188 ], [ %191, %190 ], !dbg !29
  %192 = extractvalue { i32, i32, i32, i32 } %27, 3, !dbg !17
  %193 = insertelement <8 x i32> poison, i32 %39, i64 0, !dbg !19
  %194 = insertelement <8 x i32> %193, i32 %38, i64 1, !dbg !19
  %195 = insertelement <8 x i32> %194, i32 %37, i64 2, !dbg !19
  %196 = insertelement <8 x i32> %195, i32 %36, i64 3, !dbg !19
  %197 = insertelement <8 x i32> %196, i32 %35, i64 4, !dbg !19
  %198 = insertelement <8 x i32> %197, i32 %34, i64 5, !dbg !19
  %199 = insertelement <8 x i32> %198, i32 %33, i64 6, !dbg !19
  %200 = insertelement <8 x i32> %199, i32 %32, i64 7, !dbg !19
  %201 = bitcast <8 x i32> %200 to <8 x float>, !dbg !19
  %202 = insertelement <8 x i32> poison, i32 %49, i64 0, !dbg !21
  %203 = insertelement <8 x i32> %202, i32 %48, i64 1, !dbg !21
  %204 = insertelement <8 x i32> %203, i32 %47, i64 2, !dbg !21
  %205 = insertelement <8 x i32> %204, i32 %46, i64 3, !dbg !21
  %206 = insertelement <8 x i32> %205, i32 %45, i64 4, !dbg !21
  %207 = insertelement <8 x i32> %206, i32 %44, i64 5, !dbg !21
  %208 = insertelement <8 x i32> %207, i32 %43, i64 6, !dbg !21
  %209 = insertelement <8 x i32> %208, i32 %42, i64 7, !dbg !21
  %210 = bitcast <8 x i32> %209 to <8 x float>, !dbg !21
  %211 = extractvalue { i32, i32, i32, i32 } %27, 2, !dbg !17
  %212 = extractvalue { i32, i32, i32, i32 } %27, 1, !dbg !17
  %213 = extractvalue { i32, i32, i32, i32 } %27, 0, !dbg !17
  %214 = extractvalue { i32, i32, i32, i32 } %26, 3, !dbg !17
  %215 = extractvalue { i32, i32, i32, i32 } %26, 2, !dbg !17
  %216 = extractvalue { i32, i32, i32, i32 } %26, 1, !dbg !17
  %217 = extractvalue { i32, i32, i32, i32 } %26, 0, !dbg !17
  %218 = insertelement <8 x i32> poison, i32 %87, i64 0, !dbg !27
  %219 = insertelement <8 x i32> %218, i32 %86, i64 1, !dbg !27
  %220 = insertelement <8 x i32> %219, i32 %85, i64 2, !dbg !27
  %221 = insertelement <8 x i32> %220, i32 %84, i64 3, !dbg !27
  %222 = insertelement <8 x i32> %221, i32 %83, i64 4, !dbg !27
  %223 = insertelement <8 x i32> %222, i32 %82, i64 5, !dbg !27
  %224 = insertelement <8 x i32> %223, i32 %81, i64 6, !dbg !27
  %225 = insertelement <8 x i32> %224, i32 %80, i64 7, !dbg !27
  %226 = bitcast <8 x i32> %225 to <8 x float>, !dbg !27
  %227 = insertelement <8 x i32> poison, i32 %77, i64 0, !dbg !25
  %228 = insertelement <8 x i32> %227, i32 %76, i64 1, !dbg !25
  %229 = insertelement <8 x i32> %228, i32 %75, i64 2, !dbg !25
  %230 = insertelement <8 x i32> %229, i32 %74, i64 3, !dbg !25
  %231 = insertelement <8 x i32> %230, i32 %73, i64 4, !dbg !25
  %232 = insertelement <8 x i32> %231, i32 %72, i64 5, !dbg !25
  %233 = insertelement <8 x i32> %232, i32 %71, i64 6, !dbg !25
  %234 = insertelement <8 x i32> %233, i32 %70, i64 7, !dbg !25
  %235 = bitcast <8 x i32> %234 to <8 x float>, !dbg !25
  %.frozen = freeze i32 %17, !dbg !30
  %236 = sdiv i32 %.frozen, 131072, !dbg !30
  %237 = mul i32 %236, 131072, !dbg !31
  %.decomposed = sub i32 %.frozen, %237, !dbg !31
  %.frozen51 = freeze i32 %16, !dbg !30
  %238 = sdiv i32 %.frozen51, 131072, !dbg !30
  %239 = mul i32 %238, 131072, !dbg !31
  %.decomposed52 = sub i32 %.frozen51, %239, !dbg !31
  %240 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !32
  %241 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !32
  %242 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !32
  %243 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !32
  %244 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !32
  %245 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !32
  %246 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !32
  %247 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !32
  %248 = insertelement <8 x i32> poison, i32 %192, i64 0, !dbg !17
  %249 = insertelement <8 x i32> %248, i32 %211, i64 1, !dbg !17
  %250 = insertelement <8 x i32> %249, i32 %212, i64 2, !dbg !17
  %251 = insertelement <8 x i32> %250, i32 %213, i64 3, !dbg !17
  %252 = insertelement <8 x i32> %251, i32 %214, i64 4, !dbg !17
  %253 = insertelement <8 x i32> %252, i32 %215, i64 5, !dbg !17
  %254 = insertelement <8 x i32> %253, i32 %216, i64 6, !dbg !17
  %255 = insertelement <8 x i32> %254, i32 %217, i64 7, !dbg !17
  %256 = bitcast <8 x i32> %255 to <8 x float>, !dbg !17
  %257 = fadd <8 x float> %256, %201, !dbg !33
  %258 = fsub <8 x float> %257, %210, !dbg !34
  %259 = insertelement <8 x float> poison, float %247, i64 0, !dbg !35
  %260 = insertelement <8 x float> %259, float %246, i64 1, !dbg !35
  %261 = insertelement <8 x float> %260, float %245, i64 2, !dbg !35
  %262 = insertelement <8 x float> %261, float %244, i64 3, !dbg !35
  %263 = insertelement <8 x float> %262, float %243, i64 4, !dbg !35
  %264 = insertelement <8 x float> %263, float %242, i64 5, !dbg !35
  %265 = insertelement <8 x float> %264, float %241, i64 6, !dbg !35
  %266 = insertelement <8 x float> %265, float %240, i64 7, !dbg !35
  %267 = fmul <8 x float> %258, %266, !dbg !35
  %268 = fmul <8 x float> %267, %235, !dbg !36
  %269 = fadd <8 x float> %268, %226, !dbg !37
  %270 = fcmp olt <8 x float> %269, zeroinitializer, !dbg !38
  %271 = extractelement <8 x i1> %270, i64 7, !dbg !42
  %272 = extractelement <8 x i1> %270, i64 6, !dbg !42
  %273 = extractelement <8 x i1> %270, i64 5, !dbg !42
  %274 = extractelement <8 x i1> %270, i64 4, !dbg !42
  %275 = extractelement <8 x i1> %270, i64 3, !dbg !42
  %276 = extractelement <8 x i1> %270, i64 2, !dbg !42
  %277 = extractelement <8 x i1> %270, i64 1, !dbg !42
  %278 = extractelement <8 x i1> %270, i64 0, !dbg !42
  %bc = bitcast <8 x float> %257 to <8 x i32>, !dbg !43
  %279 = extractelement <8 x i32> %bc, i64 7, !dbg !43
  %bc36 = bitcast <8 x float> %257 to <8 x i32>, !dbg !43
  %280 = extractelement <8 x i32> %bc36, i64 6, !dbg !43
  %bc37 = bitcast <8 x float> %257 to <8 x i32>, !dbg !43
  %281 = extractelement <8 x i32> %bc37, i64 5, !dbg !43
  %bc38 = bitcast <8 x float> %257 to <8 x i32>, !dbg !43
  %282 = extractelement <8 x i32> %bc38, i64 4, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %279, i32 %280, i32 %281, i32 %282, ptr addrspace(1) %23, i1 true) #3, !dbg !43
  %bc39 = bitcast <8 x float> %257 to <8 x i32>, !dbg !43
  %283 = extractelement <8 x i32> %bc39, i64 3, !dbg !43
  %bc40 = bitcast <8 x float> %257 to <8 x i32>, !dbg !43
  %284 = extractelement <8 x i32> %bc40, i64 2, !dbg !43
  %bc41 = bitcast <8 x float> %257 to <8 x i32>, !dbg !43
  %285 = extractelement <8 x i32> %bc41, i64 1, !dbg !43
  %bc42 = bitcast <8 x float> %257 to <8 x i32>, !dbg !43
  %286 = extractelement <8 x i32> %bc42, i64 0, !dbg !43
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %283, i32 %284, i32 %285, i32 %286, ptr addrspace(1) %25, i1 true) #3, !dbg !43
  %287 = getelementptr float, ptr addrspace(1) %6, i64 %22, !dbg !44
  %288 = getelementptr float, ptr addrspace(1) %6, i64 %24, !dbg !44
  %bc43 = bitcast <8 x float> %269 to <8 x i32>, !dbg !45
  %289 = extractelement <8 x i32> %bc43, i64 7, !dbg !45
  %290 = select i1 %271, i32 0, i32 %289, !dbg !42
  %bc44 = bitcast <8 x float> %269 to <8 x i32>, !dbg !45
  %291 = extractelement <8 x i32> %bc44, i64 6, !dbg !45
  %292 = select i1 %272, i32 0, i32 %291, !dbg !42
  %bc45 = bitcast <8 x float> %269 to <8 x i32>, !dbg !45
  %293 = extractelement <8 x i32> %bc45, i64 5, !dbg !45
  %294 = select i1 %273, i32 0, i32 %293, !dbg !42
  %bc46 = bitcast <8 x float> %269 to <8 x i32>, !dbg !45
  %295 = extractelement <8 x i32> %bc46, i64 4, !dbg !45
  %296 = select i1 %274, i32 0, i32 %295, !dbg !42
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %290, i32 %292, i32 %294, i32 %296, ptr addrspace(1) %287, i1 true) #3, !dbg !45
  %bc47 = bitcast <8 x float> %269 to <8 x i32>, !dbg !45
  %297 = extractelement <8 x i32> %bc47, i64 3, !dbg !45
  %298 = select i1 %275, i32 0, i32 %297, !dbg !42
  %bc48 = bitcast <8 x float> %269 to <8 x i32>, !dbg !45
  %299 = extractelement <8 x i32> %bc48, i64 2, !dbg !45
  %300 = select i1 %276, i32 0, i32 %299, !dbg !42
  %bc49 = bitcast <8 x float> %269 to <8 x i32>, !dbg !45
  %301 = extractelement <8 x i32> %bc49, i64 1, !dbg !45
  %302 = select i1 %277, i32 0, i32 %301, !dbg !42
  %bc50 = bitcast <8 x float> %269 to <8 x i32>, !dbg !45
  %303 = extractelement <8 x i32> %bc50, i64 0, !dbg !45
  %304 = select i1 %278, i32 0, i32 %303, !dbg !42
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %298, i32 %300, i32 %302, i32 %304, ptr addrspace(1) %288, i1 true) #3, !dbg !45
  %305 = shl i32 %238, 19, !dbg !46
  %306 = shl i32 %236, 19, !dbg !46
  %307 = add i32 %305, %.decomposed52, !dbg !47
  %308 = add i32 %306, %.decomposed, !dbg !47
  %309 = sext i32 %307 to i64, !dbg !48
  %310 = getelementptr float, ptr addrspace(1) %7, i64 %309, !dbg !48
  %311 = sext i32 %308 to i64, !dbg !48
  %312 = getelementptr float, ptr addrspace(1) %7, i64 %311, !dbg !48
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %290, i32 %292, i32 %294, i32 %296, ptr addrspace(1) %310, i1 true) #3, !dbg !49
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %298, i32 %300, i32 %302, i32 %304, ptr addrspace(1) %312, i1 true) #3, !dbg !49
  %313 = mul i32 %238, 655360, !dbg !50
  %314 = mul i32 %236, 655360, !dbg !50
  %315 = add i32 %313, %.decomposed52, !dbg !51
  %316 = add i32 %314, %.decomposed, !dbg !51
  %317 = sext i32 %315 to i64, !dbg !52
  %318 = getelementptr float, ptr addrspace(1) %8, i64 %317, !dbg !52
  %319 = sext i32 %316 to i64, !dbg !52
  %320 = getelementptr float, ptr addrspace(1) %8, i64 %319, !dbg !52
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %290, i32 %292, i32 %294, i32 %296, ptr addrspace(1) %318, i1 true) #3, !dbg !53
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %298, i32 %300, i32 %302, i32 %304, ptr addrspace(1) %320, i1 true) #3, !dbg !53
  ret void, !dbg !54
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c4cgesf7tmv2y4su2hsgh6xwe6ay6khhikcwec3f6zy3ykjcev7f.py", directory: "inductor_cache/4c")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_convolution_relu_1, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_convolution_relu_1, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_cat_convolution_relu_1", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_cat_convolution_relu_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 29, scope: !7)
!16 = !DILocation(line: 28, column: 34, scope: !7)
!17 = !DILocation(line: 28, column: 39, scope: !7)
!18 = !DILocation(line: 29, column: 30, scope: !7)
!19 = !DILocation(line: 29, column: 35, scope: !7)
!20 = !DILocation(line: 30, column: 30, scope: !7)
!21 = !DILocation(line: 30, column: 35, scope: !7)
!22 = !DILocation(line: 31, column: 30, scope: !7)
!23 = !DILocation(line: 31, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 31, scope: !7)
!25 = !DILocation(line: 32, column: 36, scope: !7)
!26 = !DILocation(line: 33, column: 31, scope: !7)
!27 = !DILocation(line: 33, column: 36, scope: !7)
!28 = !DILocation(line: 37, column: 18, scope: !7)
!29 = !DILocation(line: 38, column: 26, scope: !7)
!30 = !DILocation(line: 26, column: 19, scope: !7)
!31 = !DILocation(line: 27, column: 19, scope: !7)
!32 = !DILocation(line: 40, column: 19, scope: !7)
!33 = !DILocation(line: 34, column: 18, scope: !7)
!34 = !DILocation(line: 35, column: 18, scope: !7)
!35 = !DILocation(line: 43, column: 19, scope: !7)
!36 = !DILocation(line: 44, column: 20, scope: !7)
!37 = !DILocation(line: 45, column: 20, scope: !7)
!38 = !DILocation(line: 118, column: 15, scope: !39, inlinedAt: !41)
!39 = distinct !DILexicalBlockFile(scope: !7, file: !40, discriminator: 0)
!40 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!41 = !DILocation(line: 47, column: 42, scope: !7)
!42 = !DILocation(line: 121, column: 29, scope: !39, inlinedAt: !41)
!43 = !DILocation(line: 48, column: 39, scope: !7)
!44 = !DILocation(line: 49, column: 25, scope: !7)
!45 = !DILocation(line: 49, column: 37, scope: !7)
!46 = !DILocation(line: 50, column: 37, scope: !7)
!47 = !DILocation(line: 50, column: 30, scope: !7)
!48 = !DILocation(line: 50, column: 25, scope: !7)
!49 = !DILocation(line: 50, column: 49, scope: !7)
!50 = !DILocation(line: 51, column: 37, scope: !7)
!51 = !DILocation(line: 51, column: 30, scope: !7)
!52 = !DILocation(line: 51, column: 25, scope: !7)
!53 = !DILocation(line: 51, column: 49, scope: !7)
!54 = !DILocation(line: 51, column: 4, scope: !7)
