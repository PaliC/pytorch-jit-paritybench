; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused__weight_norm_interface_convolution_15(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %9 = shl i32 %8, 10, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 2, !dbg !12
  %12 = and i32 %11, 508, !dbg !12
  %13 = and i32 %10, 127, !dbg !12
  %14 = or disjoint i32 %13, 128, !dbg !12
  %15 = or disjoint i32 %13, 256, !dbg !12
  %16 = or disjoint i32 %13, 384, !dbg !12
  %17 = or disjoint i32 %9, %12, !dbg !13
  %18 = or disjoint i32 %17, 512, !dbg !13
  %19 = or disjoint i32 %9, %13, !dbg !13
  %20 = or disjoint i32 %9, %14, !dbg !13
  %21 = or disjoint i32 %9, %15, !dbg !13
  %22 = or disjoint i32 %9, %16, !dbg !13
  %23 = or disjoint i32 %19, 512, !dbg !13
  %24 = or disjoint i32 %19, 640, !dbg !13
  %25 = or disjoint i32 %19, 768, !dbg !13
  %26 = or disjoint i32 %19, 896, !dbg !13
  %27 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %28 = icmp slt i32 %27, 25, !dbg !15
  %.frozen = freeze i32 %17, !dbg !16
  %29 = sdiv i32 %.frozen, 64, !dbg !16
  %30 = mul i32 %29, 64, !dbg !17
  %.decomposed = sub i32 %.frozen, %30, !dbg !17
  %31 = sdiv i32 %18, 64, !dbg !16
  %32 = sdiv i32 %19, 64, !dbg !16
  %33 = sdiv i32 %20, 64, !dbg !16
  %34 = sdiv i32 %21, 64, !dbg !16
  %35 = sdiv i32 %22, 64, !dbg !16
  %36 = sdiv i32 %23, 64, !dbg !16
  %37 = sdiv i32 %24, 64, !dbg !16
  %38 = sdiv i32 %25, 64, !dbg !16
  %39 = sdiv i32 %26, 64, !dbg !16
  %40 = shl i32 %27, 6, !dbg !18
  %41 = add i32 %.decomposed, %40, !dbg !19
  %42 = mul i32 %29, 1600, !dbg !20
  %43 = mul i32 %31, 1600, !dbg !20
  %44 = add i32 %41, %42, !dbg !21
  %45 = add i32 %43, %.decomposed, !dbg !19
  %46 = add i32 %45, %40, !dbg !21
  %47 = sext i32 %44 to i64, !dbg !22
  %48 = getelementptr float, ptr addrspace(1) %0, i64 %47, !dbg !22
  %49 = sext i32 %46 to i64, !dbg !22
  %50 = getelementptr float, ptr addrspace(1) %0, i64 %49, !dbg !22
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %48, i1 %28) #2, !dbg !23
  %52 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !23
  %53 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !23
  %54 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !23
  %55 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !23
  %56 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %50, i1 %28) #2, !dbg !23
  %57 = extractvalue { i32, i32, i32, i32 } %56, 0, !dbg !23
  %58 = extractvalue { i32, i32, i32, i32 } %56, 1, !dbg !23
  %59 = extractvalue { i32, i32, i32, i32 } %56, 2, !dbg !23
  %60 = extractvalue { i32, i32, i32, i32 } %56, 3, !dbg !23
  %.idx = shl nuw nsw i32 %12, 3, !dbg !23
  %61 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !23
  %62 = insertelement <1 x i32> poison, i32 %52, i64 0, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %61, <1 x i32> %62, i1 true) #2, !dbg !23
  %63 = shl nuw nsw i32 %12, 1, !dbg !23
  %64 = or disjoint i32 %63, 2, !dbg !23
  %65 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %64, !dbg !23
  %66 = insertelement <1 x i32> poison, i32 %53, i64 0, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %65, <1 x i32> %66, i1 true) #2, !dbg !23
  %67 = or disjoint i32 %63, 4, !dbg !23
  %68 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %67, !dbg !23
  %69 = insertelement <1 x i32> poison, i32 %54, i64 0, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %68, <1 x i32> %69, i1 true) #2, !dbg !23
  %70 = or disjoint i32 %63, 6, !dbg !23
  %71 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %70, !dbg !23
  %72 = insertelement <1 x i32> poison, i32 %55, i64 0, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %71, <1 x i32> %72, i1 true) #2, !dbg !23
  tail call void @llvm.nvvm.barrier0(), !dbg !23
  %.idx1 = shl nuw nsw i32 %13, 3, !dbg !23
  %73 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx1, !dbg !23
  %74 = load float, ptr addrspace(3) %73, align 8, !dbg !23
  %.idx2 = shl nuw nsw i32 %14, 3, !dbg !23
  %75 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx2, !dbg !23
  %76 = load float, ptr addrspace(3) %75, align 8, !dbg !23
  %.idx3 = shl nuw nsw i32 %15, 3, !dbg !23
  %77 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx3, !dbg !23
  %78 = load float, ptr addrspace(3) %77, align 8, !dbg !23
  %.idx4 = shl nuw nsw i32 %16, 3, !dbg !23
  %79 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx4, !dbg !23
  %80 = load float, ptr addrspace(3) %79, align 8, !dbg !23
  tail call void @llvm.nvvm.barrier0(), !dbg !23
  %81 = insertelement <1 x i32> poison, i32 %57, i64 0, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %61, <1 x i32> %81, i1 true) #2, !dbg !23
  %82 = insertelement <1 x i32> poison, i32 %58, i64 0, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %65, <1 x i32> %82, i1 true) #2, !dbg !23
  %83 = insertelement <1 x i32> poison, i32 %59, i64 0, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %68, <1 x i32> %83, i1 true) #2, !dbg !23
  %84 = insertelement <1 x i32> poison, i32 %60, i64 0, !dbg !23
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %71, <1 x i32> %84, i1 true) #2, !dbg !23
  tail call void @llvm.nvvm.barrier0(), !dbg !23
  %85 = load float, ptr addrspace(3) %73, align 8, !dbg !23
  %86 = load float, ptr addrspace(3) %75, align 8, !dbg !23
  %87 = load float, ptr addrspace(3) %77, align 8, !dbg !23
  %88 = load float, ptr addrspace(3) %79, align 8, !dbg !23
  %89 = sext i32 %32 to i64, !dbg !24
  %90 = getelementptr float, ptr addrspace(1) %1, i64 %89, !dbg !24
  %91 = sext i32 %33 to i64, !dbg !24
  %92 = getelementptr float, ptr addrspace(1) %1, i64 %91, !dbg !24
  %93 = sext i32 %34 to i64, !dbg !24
  %94 = getelementptr float, ptr addrspace(1) %1, i64 %93, !dbg !24
  %95 = sext i32 %35 to i64, !dbg !24
  %96 = getelementptr float, ptr addrspace(1) %1, i64 %95, !dbg !24
  %97 = sext i32 %36 to i64, !dbg !24
  %98 = getelementptr float, ptr addrspace(1) %1, i64 %97, !dbg !24
  %99 = sext i32 %37 to i64, !dbg !24
  %100 = getelementptr float, ptr addrspace(1) %1, i64 %99, !dbg !24
  %101 = sext i32 %38 to i64, !dbg !24
  %102 = getelementptr float, ptr addrspace(1) %1, i64 %101, !dbg !24
  %103 = sext i32 %39 to i64, !dbg !24
  %104 = getelementptr float, ptr addrspace(1) %1, i64 %103, !dbg !24
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %90, i1 true) #2, !dbg !25
  %106 = bitcast i32 %105 to float, !dbg !25
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %92, i1 true) #2, !dbg !25
  %108 = bitcast i32 %107 to float, !dbg !25
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %94, i1 true) #2, !dbg !25
  %110 = bitcast i32 %109 to float, !dbg !25
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 true) #2, !dbg !25
  %112 = bitcast i32 %111 to float, !dbg !25
  %113 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %98, i1 true) #2, !dbg !25
  %114 = bitcast i32 %113 to float, !dbg !25
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %100, i1 true) #2, !dbg !25
  %116 = bitcast i32 %115 to float, !dbg !25
  %117 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %102, i1 true) #2, !dbg !25
  %118 = bitcast i32 %117 to float, !dbg !25
  %119 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %104, i1 true) #2, !dbg !25
  %120 = bitcast i32 %119 to float, !dbg !25
  %121 = getelementptr float, ptr addrspace(1) %2, i64 %89, !dbg !26
  %122 = getelementptr float, ptr addrspace(1) %2, i64 %91, !dbg !26
  %123 = getelementptr float, ptr addrspace(1) %2, i64 %93, !dbg !26
  %124 = getelementptr float, ptr addrspace(1) %2, i64 %95, !dbg !26
  %125 = getelementptr float, ptr addrspace(1) %2, i64 %97, !dbg !26
  %126 = getelementptr float, ptr addrspace(1) %2, i64 %99, !dbg !26
  %127 = getelementptr float, ptr addrspace(1) %2, i64 %101, !dbg !26
  %128 = getelementptr float, ptr addrspace(1) %2, i64 %103, !dbg !26
  %129 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %121, i1 true) #2, !dbg !27
  %130 = bitcast i32 %129 to float, !dbg !27
  %131 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %122, i1 true) #2, !dbg !27
  %132 = bitcast i32 %131 to float, !dbg !27
  %133 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %123, i1 true) #2, !dbg !27
  %134 = bitcast i32 %133 to float, !dbg !27
  %135 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %124, i1 true) #2, !dbg !27
  %136 = bitcast i32 %135 to float, !dbg !27
  %137 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %125, i1 true) #2, !dbg !27
  %138 = bitcast i32 %137 to float, !dbg !27
  %139 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %126, i1 true) #2, !dbg !27
  %140 = bitcast i32 %139 to float, !dbg !27
  %141 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %127, i1 true) #2, !dbg !27
  %142 = bitcast i32 %141 to float, !dbg !27
  %143 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %128, i1 true) #2, !dbg !27
  %144 = bitcast i32 %143 to float, !dbg !27
  %145 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %106, float %130) #2, !dbg !28
  %146 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %108, float %132) #2, !dbg !28
  %147 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %110, float %134) #2, !dbg !28
  %148 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %112, float %136) #2, !dbg !28
  %149 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %114, float %138) #2, !dbg !28
  %150 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %116, float %140) #2, !dbg !28
  %151 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %118, float %142) #2, !dbg !28
  %152 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %120, float %144) #2, !dbg !28
  %153 = fmul float %74, %145, !dbg !29
  %154 = fmul float %76, %146, !dbg !29
  %155 = fmul float %78, %147, !dbg !29
  %156 = fmul float %80, %148, !dbg !29
  %157 = fmul float %85, %149, !dbg !29
  %158 = fmul float %86, %150, !dbg !29
  %159 = fmul float %87, %151, !dbg !29
  %160 = fmul float %88, %152, !dbg !29
  %161 = mul i32 %19, 25, !dbg !30
  %162 = mul i32 %20, 25, !dbg !30
  %163 = mul i32 %21, 25, !dbg !30
  %164 = mul i32 %22, 25, !dbg !30
  %165 = mul i32 %23, 25, !dbg !30
  %166 = mul i32 %24, 25, !dbg !30
  %167 = mul i32 %25, 25, !dbg !30
  %168 = mul i32 %26, 25, !dbg !30
  %169 = add i32 %161, %27, !dbg !31
  %170 = add i32 %162, %27, !dbg !31
  %171 = add i32 %163, %27, !dbg !31
  %172 = add i32 %164, %27, !dbg !31
  %173 = add i32 %27, %165, !dbg !31
  %174 = add i32 %27, %166, !dbg !31
  %175 = add i32 %27, %167, !dbg !31
  %176 = add i32 %27, %168, !dbg !31
  %177 = sext i32 %169 to i64, !dbg !32
  %178 = getelementptr float, ptr addrspace(1) %3, i64 %177, !dbg !32
  %179 = sext i32 %170 to i64, !dbg !32
  %180 = getelementptr float, ptr addrspace(1) %3, i64 %179, !dbg !32
  %181 = sext i32 %171 to i64, !dbg !32
  %182 = getelementptr float, ptr addrspace(1) %3, i64 %181, !dbg !32
  %183 = sext i32 %172 to i64, !dbg !32
  %184 = getelementptr float, ptr addrspace(1) %3, i64 %183, !dbg !32
  %185 = sext i32 %173 to i64, !dbg !32
  %186 = getelementptr float, ptr addrspace(1) %3, i64 %185, !dbg !32
  %187 = sext i32 %174 to i64, !dbg !32
  %188 = getelementptr float, ptr addrspace(1) %3, i64 %187, !dbg !32
  %189 = sext i32 %175 to i64, !dbg !32
  %190 = getelementptr float, ptr addrspace(1) %3, i64 %189, !dbg !32
  %191 = sext i32 %176 to i64, !dbg !32
  %192 = getelementptr float, ptr addrspace(1) %3, i64 %191, !dbg !32
  %193 = bitcast float %153 to i32, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %193, ptr addrspace(1) %178, i1 %28) #2, !dbg !33
  %194 = bitcast float %154 to i32, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %194, ptr addrspace(1) %180, i1 %28) #2, !dbg !33
  %195 = bitcast float %155 to i32, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %195, ptr addrspace(1) %182, i1 %28) #2, !dbg !33
  %196 = bitcast float %156 to i32, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %196, ptr addrspace(1) %184, i1 %28) #2, !dbg !33
  %197 = bitcast float %157 to i32, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %197, ptr addrspace(1) %186, i1 %28) #2, !dbg !33
  %198 = bitcast float %158 to i32, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %198, ptr addrspace(1) %188, i1 %28) #2, !dbg !33
  %199 = bitcast float %159 to i32, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %199, ptr addrspace(1) %190, i1 %28) #2, !dbg !33
  %200 = bitcast float %160 to i32, !dbg !33
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %200, ptr addrspace(1) %192, i1 %28) #2, !dbg !33
  %201 = getelementptr float, ptr addrspace(1) %4, i64 %47, !dbg !34
  %202 = getelementptr float, ptr addrspace(1) %4, i64 %49, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %203 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %13, !dbg !35
  %204 = bitcast float %153 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %203, <1 x i32> %204, i1 true) #2, !dbg !35
  %205 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !35
  %206 = bitcast float %154 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %205, <1 x i32> %206, i1 true) #2, !dbg !35
  %207 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !35
  %208 = bitcast float %155 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %207, <1 x i32> %208, i1 true) #2, !dbg !35
  %209 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %16, !dbg !35
  %210 = bitcast float %156 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %209, <1 x i32> %210, i1 true) #2, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %211 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !35
  %212 = load <4 x i32>, ptr addrspace(3) %211, align 16, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %213 = bitcast float %157 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %203, <1 x i32> %213, i1 true) #2, !dbg !35
  %214 = bitcast float %158 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %205, <1 x i32> %214, i1 true) #2, !dbg !35
  %215 = bitcast float %159 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %207, <1 x i32> %215, i1 true) #2, !dbg !35
  %216 = bitcast float %160 to <1 x i32>, !dbg !35
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %209, <1 x i32> %216, i1 true) #2, !dbg !35
  tail call void @llvm.nvvm.barrier0(), !dbg !35
  %217 = load <4 x i32>, ptr addrspace(3) %211, align 16, !dbg !35
  %.extract = extractelement <4 x i32> %212, i64 0, !dbg !35
  %.extract12 = extractelement <4 x i32> %212, i64 1, !dbg !35
  %.extract13 = extractelement <4 x i32> %212, i64 2, !dbg !35
  %.extract14 = extractelement <4 x i32> %212, i64 3, !dbg !35
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %201, i1 %28) #2, !dbg !35
  %.extract15 = extractelement <4 x i32> %217, i64 0, !dbg !35
  %.extract16 = extractelement <4 x i32> %217, i64 1, !dbg !35
  %.extract17 = extractelement <4 x i32> %217, i64 2, !dbg !35
  %.extract18 = extractelement <4 x i32> %217, i64 3, !dbg !35
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract15, i32 %.extract16, i32 %.extract17, i32 %.extract18, ptr addrspace(1) %202, i1 %28) #2, !dbg !35
  ret void, !dbg !36
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c3ivnzkovmrtd3e4cjttwafp4yp67ob32gbtck3yirimlfjdns4n.py", directory: "inductor_cache/3i")
!4 = !{ptr @triton_poi_fused__weight_norm_interface_convolution_15, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__weight_norm_interface_convolution_15, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__weight_norm_interface_convolution_15", linkageName: "triton_poi_fused__weight_norm_interface_convolution_15", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 27, column: 21, scope: !7)
!16 = !DILocation(line: 30, column: 19, scope: !7)
!17 = !DILocation(line: 29, column: 19, scope: !7)
!18 = !DILocation(line: 32, column: 38, scope: !7)
!19 = !DILocation(line: 32, column: 35, scope: !7)
!20 = !DILocation(line: 32, column: 48, scope: !7)
!21 = !DILocation(line: 32, column: 43, scope: !7)
!22 = !DILocation(line: 32, column: 30, scope: !7)
!23 = !DILocation(line: 32, column: 53, scope: !7)
!24 = !DILocation(line: 33, column: 30, scope: !7)
!25 = !DILocation(line: 33, column: 35, scope: !7)
!26 = !DILocation(line: 34, column: 30, scope: !7)
!27 = !DILocation(line: 34, column: 35, scope: !7)
!28 = !DILocation(line: 35, column: 18, scope: !7)
!29 = !DILocation(line: 36, column: 18, scope: !7)
!30 = !DILocation(line: 37, column: 33, scope: !7)
!31 = !DILocation(line: 37, column: 30, scope: !7)
!32 = !DILocation(line: 37, column: 25, scope: !7)
!33 = !DILocation(line: 37, column: 44, scope: !7)
!34 = !DILocation(line: 38, column: 25, scope: !7)
!35 = !DILocation(line: 38, column: 54, scope: !7)
!36 = !DILocation(line: 38, column: 4, scope: !7)
