; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_per_fused__to_copy__unsafe_index_abs_add_arange_clamp_exp_mul_pow_sub_sum_3(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %8 = icmp slt i32 %7, 256, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = and i32 %9, 15, !dbg !12
  %.frozen = freeze i32 %7, !dbg !13
  %11 = sdiv i32 %.frozen, 4, !dbg !13
  %12 = srem i32 %11, 4, !dbg !14
  %13 = mul i32 %11, 4, !dbg !15
  %.decomposed = sub i32 %.frozen, %13, !dbg !15
  %.frozen1 = freeze i32 %7, !dbg !16
  %14 = sdiv i32 %.frozen1, 16, !dbg !16
  %15 = mul i32 %14, 16, !dbg !17
  %.decomposed2 = sub i32 %.frozen1, %15, !dbg !17
  %16 = sdiv i32 %7, 64, !dbg !18
  %17 = shl nsw i32 %.decomposed2, 4, !dbg !19
  %18 = or disjoint i32 %17, %10, !dbg !20
  %19 = shl i32 %16, 8, !dbg !21
  %20 = add i32 %18, %19, !dbg !22
  %21 = sext i32 %20 to i64, !dbg !23
  %22 = getelementptr float, ptr addrspace(1) %3, i64 %21, !dbg !23
  %23 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %22, i1 %8, i32 0, i1 %8) #5, !dbg !24
  %24 = bitcast i32 %23 to float, !dbg !24
  %25 = tail call i32 @llvm.smax.i32(i32 %12, i32 0), !dbg !25
  %26 = uitofp nneg i32 %25 to float, !dbg !25
  %27 = fptosi float %26 to i32, !dbg !29
  %28 = tail call i32 @llvm.smin.i32(i32 %27, i32 2), !dbg !30
  %narrow = add nsw i32 %28, 1, !dbg !30
  %29 = sext i32 %narrow to i64, !dbg !30
  %30 = tail call i32 @llvm.smax.i32(i32 %.decomposed, i32 0), !dbg !32
  %31 = uitofp nneg i32 %30 to float, !dbg !32
  %32 = fptosi float %31 to i32, !dbg !34
  %33 = shl nsw i64 %29, 2, !dbg !35
  %34 = sext i32 %32 to i64, !dbg !36
  %35 = shl nsw i32 %14, 4, !dbg !37
  %36 = sext i32 %35 to i64, !dbg !38
  %37 = getelementptr float, ptr addrspace(1) %2, i64 %33, !dbg !39
  %38 = getelementptr float, ptr addrspace(1) %37, i64 %34, !dbg !39
  %39 = getelementptr float, ptr addrspace(1) %38, i64 %36, !dbg !39
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 %8) #5, !dbg !40
  %41 = tail call i64 @llvm.smin.i64(i64 %34, i64 2), !dbg !41
  %42 = getelementptr float, ptr addrspace(1) %2, i64 %41, !dbg !43
  %43 = getelementptr i8, ptr addrspace(1) %42, i64 4, !dbg !43
  %44 = getelementptr float, ptr addrspace(1) %43, i64 %33, !dbg !43
  %45 = getelementptr float, ptr addrspace(1) %44, i64 %36, !dbg !43
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 %8) #5, !dbg !44
  %47 = shl i32 %27, 2, !dbg !45
  %48 = add i32 %35, %32, !dbg !46
  %49 = add i32 %48, %47, !dbg !47
  %50 = sext i32 %49 to i64, !dbg !48
  %51 = getelementptr float, ptr addrspace(1) %2, i64 %50, !dbg !48
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 %8) #5, !dbg !49
  %53 = sext i32 %47 to i64, !dbg !50
  %54 = getelementptr float, ptr addrspace(1) %43, i64 %53, !dbg !51
  %55 = getelementptr float, ptr addrspace(1) %54, i64 %36, !dbg !51
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 %8) #5, !dbg !52
  %57 = fmul float %24, 0x3FF7154760000000, !dbg !53
  %58 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %57) #5, !dbg !53
  %59 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !54
  %.not.i = icmp eq i32 %59, 0, !dbg !54
  %60 = tail call float @llvm.nvvm.add.rz.ftz.f(float %58, float 1.000000e+00) #5, !dbg !54
  %61 = tail call float @llvm.nvvm.add.rz.f(float %58, float 1.000000e+00) #5, !dbg !54
  %.01.i = select i1 %.not.i, float %61, float %60, !dbg !54
  %62 = bitcast float %.01.i to i32, !dbg !54
  %63 = add i32 %62, -1061158912, !dbg !54
  %64 = and i32 %63, -8388608, !dbg !54
  %65 = bitcast float %58 to i32, !dbg !54
  %66 = sub i32 %65, %64, !dbg !54
  %67 = bitcast i32 %66 to float, !dbg !54
  %68 = sub i32 1082130432, %64, !dbg !54
  %69 = bitcast i32 %68 to float, !dbg !54
  %70 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !54
  %.not14.i = icmp eq i32 %70, 0, !dbg !54
  %71 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 2.500000e-01, float %69, float -1.000000e+00) #5, !dbg !54
  %72 = tail call float @llvm.nvvm.fma.rn.f(float 2.500000e-01, float %69, float -1.000000e+00) #5, !dbg !54
  %.09.i = select i1 %.not14.i, float %72, float %71, !dbg !54
  %73 = fadd float %.09.i, %67, !dbg !54
  %74 = sitofp i32 %64 to float, !dbg !54
  %75 = fmul float %74, 0x3E80000000000000, !dbg !54
  %76 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !54
  %.not15.i = icmp eq i32 %76, 0, !dbg !54
  %77 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0xBFA737EF00000000, float %73, float 0x3FBB000240000000) #5, !dbg !54
  %78 = tail call float @llvm.nvvm.fma.rn.f(float 0xBFA737EF00000000, float %73, float 0x3FBB000240000000) #5, !dbg !54
  %.012.i = select i1 %.not15.i, float %78, float %77, !dbg !54
  %79 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !54
  %.not16.i = icmp eq i32 %79, 0, !dbg !54
  %80 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.012.i, float %73, float 0xBFC0EF1C00000000) #5, !dbg !54
  %81 = tail call float @llvm.nvvm.fma.rn.f(float %.012.i, float %73, float 0xBFC0EF1C00000000) #5, !dbg !54
  %.010.i = select i1 %.not16.i, float %81, float %80, !dbg !54
  %82 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !54
  %.not17.i = icmp eq i32 %82, 0, !dbg !54
  %83 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.010.i, float %73, float 0x3FC28C8EA0000000) #5, !dbg !54
  %84 = tail call float @llvm.nvvm.fma.rn.f(float %.010.i, float %73, float 0x3FC28C8EA0000000) #5, !dbg !54
  %.06.i = select i1 %.not17.i, float %84, float %83, !dbg !54
  %85 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !54
  %.not18.i = icmp eq i32 %85, 0, !dbg !54
  %86 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i, float %73, float 0xBFC54D1BA0000000) #5, !dbg !54
  %87 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i, float %73, float 0xBFC54D1BA0000000) #5, !dbg !54
  %.02.i = select i1 %.not18.i, float %87, float %86, !dbg !54
  %88 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !54
  %.not19.i = icmp eq i32 %88, 0, !dbg !54
  %89 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i, float %73, float 0x3FC995F3C0000000) #5, !dbg !54
  %90 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i, float %73, float 0x3FC995F3C0000000) #5, !dbg !54
  %.0.i = select i1 %.not19.i, float %90, float %89, !dbg !54
  %91 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !54
  %.not20.i = icmp eq i32 %91, 0, !dbg !54
  %92 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i, float %73, float 0xBFD0000840000000) #5, !dbg !54
  %93 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i, float %73, float 0xBFD0000840000000) #5, !dbg !54
  %.011.i = select i1 %.not20.i, float %93, float %92, !dbg !54
  %94 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !54
  %.not21.i = icmp eq i32 %94, 0, !dbg !54
  %95 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.011.i, float %73, float 0x3FD5555CC0000000) #5, !dbg !54
  %96 = tail call float @llvm.nvvm.fma.rn.f(float %.011.i, float %73, float 0x3FD5555CC0000000) #5, !dbg !54
  %.08.i = select i1 %.not21.i, float %96, float %95, !dbg !54
  %97 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !54
  %.not22.i = icmp eq i32 %97, 0, !dbg !54
  %98 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.08.i, float %73, float -5.000000e-01) #5, !dbg !54
  %99 = tail call float @llvm.nvvm.fma.rn.f(float %.08.i, float %73, float -5.000000e-01) #5, !dbg !54
  %.07.i = select i1 %.not22.i, float %99, float %98, !dbg !54
  %100 = fmul float %73, %.07.i, !dbg !54
  %101 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !54
  %.not23.i = icmp eq i32 %101, 0, !dbg !54
  %102 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %100, float %73, float %73) #5, !dbg !54
  %103 = tail call float @llvm.nvvm.fma.rn.f(float %100, float %73, float %73) #5, !dbg !54
  %.05.i = select i1 %.not23.i, float %103, float %102, !dbg !54
  %104 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !54
  %.not24.i = icmp eq i32 %104, 0, !dbg !54
  %105 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %75, float 0x3FE62E4300000000, float %.05.i) #5, !dbg !54
  %106 = tail call float @llvm.nvvm.fma.rn.f(float %75, float 0x3FE62E4300000000, float %.05.i) #5, !dbg !54
  %.04.i = select i1 %.not24.i, float %106, float %105, !dbg !54
  %107 = icmp ugt i32 %65, 2139095039, !dbg !54
  br i1 %107, label %108, label %__nv_log1pf.exit, !dbg !54

108:                                              ; preds = %6
  %109 = icmp sgt i32 %65, -1082130432, !dbg !54
  br i1 %109, label %__nv_fmaf_rn.exit.i, label %113, !dbg !54

__nv_fmaf_rn.exit.i:                              ; preds = %108
  %110 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !54
  %.not25.i = icmp eq i32 %110, 0, !dbg !54
  %111 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %58, float 0x7FF0000000000000, float 0x7FF0000000000000) #5, !dbg !54
  %112 = tail call float @llvm.nvvm.fma.rn.f(float %58, float 0x7FF0000000000000, float 0x7FF0000000000000) #5, !dbg !54
  %.03.i = select i1 %.not25.i, float %112, float %111, !dbg !54
  br label %113, !dbg !54

113:                                              ; preds = %__nv_fmaf_rn.exit.i, %108
  %r.0.i = phi float [ %.03.i, %__nv_fmaf_rn.exit.i ], [ %.04.i, %108 ], !dbg !54
  %114 = fcmp oeq float %58, 0.000000e+00, !dbg !54
  %r.1.i = select i1 %114, float -0.000000e+00, float %r.0.i, !dbg !54
  br label %__nv_log1pf.exit, !dbg !54

__nv_log1pf.exit:                                 ; preds = %6, %113
  %r.2.i = phi float [ %r.1.i, %113 ], [ %.04.i, %6 ], !dbg !54
  %115 = fcmp ogt float %24, 2.000000e+01, !dbg !55
  %116 = insertelement <2 x i32> poison, i32 %46, i64 0, !dbg !44
  %117 = insertelement <2 x i32> %116, i32 %56, i64 1, !dbg !44
  %118 = bitcast <2 x i32> %117 to <2 x float>, !dbg !44
  %119 = insertelement <2 x i32> poison, i32 %40, i64 0, !dbg !40
  %120 = insertelement <2 x i32> %119, i32 %52, i64 1, !dbg !40
  %121 = bitcast <2 x i32> %120 to <2 x float>, !dbg !40
  %122 = sitofp i32 %32 to float, !dbg !56
  %123 = fsub float %31, %122, !dbg !57
  %124 = fcmp ogt float %123, 0.000000e+00, !dbg !58
  %125 = select i1 %124, float %123, float 0.000000e+00, !dbg !60
  %126 = fcmp olt float %125, 1.000000e+00, !dbg !61
  %127 = select i1 %126, float %125, float 1.000000e+00, !dbg !63
  %128 = fsub <2 x float> %118, %121, !dbg !64
  %129 = insertelement <2 x float> poison, float %127, i64 0, !dbg !65
  %130 = shufflevector <2 x float> %129, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !65
  %131 = fmul <2 x float> %128, %130, !dbg !65
  %132 = fadd <2 x float> %131, %121, !dbg !66
  %133 = extractelement <2 x float> %132, i64 0, !dbg !67
  %134 = extractelement <2 x float> %132, i64 1, !dbg !68
  %135 = fsub float %133, %134, !dbg !67
  %136 = sitofp i32 %27 to float, !dbg !69
  %137 = fsub float %26, %136, !dbg !70
  %138 = fcmp ogt float %137, 0.000000e+00, !dbg !71
  %139 = select i1 %138, float %137, float 0.000000e+00, !dbg !73
  %140 = fcmp olt float %139, 1.000000e+00, !dbg !74
  %141 = select i1 %140, float %139, float 1.000000e+00, !dbg !76
  %142 = fmul float %141, %135, !dbg !77
  %143 = fadd float %134, %142, !dbg !68
  %144 = select i1 %115, float %24, float %r.2.i, !dbg !78
  %145 = fsub float %144, %143, !dbg !79
  %146 = fmul float %145, %145, !dbg !80
  %147 = fmul float %146, -3.000000e+02, !dbg !81
  %148 = fmul float %147, 0x3FF7154760000000, !dbg !82
  %149 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %148) #5, !dbg !82
  %150 = fmul float %149, %145, !dbg !83
  %151 = select i1 %8, float %150, float 0.000000e+00, !dbg !84
  %152 = bitcast float %151 to i32, !dbg !85
  %153 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %152, i32 8, i32 31), !dbg !85
  %154 = bitcast i32 %153 to float, !dbg !85
  %155 = fadd float %151, %154, !dbg !89
  %156 = bitcast float %155 to i32, !dbg !85
  %157 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %156, i32 4, i32 31), !dbg !85
  %158 = bitcast i32 %157 to float, !dbg !85
  %159 = fadd float %155, %158, !dbg !89
  %160 = bitcast float %159 to i32, !dbg !85
  %161 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %160, i32 2, i32 31), !dbg !85
  %162 = bitcast i32 %161 to float, !dbg !85
  %163 = fadd float %159, %162, !dbg !89
  %164 = bitcast float %163 to i32, !dbg !85
  %165 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %164, i32 1, i32 31), !dbg !85
  %166 = bitcast i32 %165 to float, !dbg !85
  %167 = fadd float %163, %166, !dbg !89
  %168 = fadd float %143, %167, !dbg !91
  tail call void @llvm.nvvm.barrier0(), !dbg !92
  %169 = sext i32 %7 to i64, !dbg !93
  %170 = getelementptr float, ptr addrspace(1) %0, i64 %169, !dbg !93
  %171 = and i32 %9, 63, !dbg !94
  %172 = icmp eq i32 %171, 0, !dbg !94
  %173 = bitcast float %143 to i32, !dbg !94
  %174 = and i1 %172, %8, !dbg !94
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %173, ptr addrspace(1) %170, i1 %174) #5, !dbg !94
  tail call void @llvm.nvvm.barrier0(), !dbg !95
  %175 = getelementptr float, ptr addrspace(1) %1, i64 %169, !dbg !96
  %176 = bitcast float %168 to i32, !dbg !97
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %176, ptr addrspace(1) %175, i1 %174) #5, !dbg !97
  ret void, !dbg !98
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.add.rz.ftz.f(float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.add.rz.f(float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #0

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smax.i32(i32, i32) #4

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.smin.i64(i64, i64) #4

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cmv6kd6j655hmzzrxm6mpooa2c2uuoanqdzqf5pfcl3sneiu4omr.py", directory: "inductor_cache/mv")
!4 = !{ptr @triton_per_fused__to_copy__unsafe_index_abs_add_arange_clamp_exp_mul_pow_sub_sum_3, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__to_copy__unsafe_index_abs_add_arange_clamp_exp_mul_pow_sub_sum_3, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__to_copy__unsafe_index_abs_add_arange_clamp_exp_mul_pow_sub_sum_3", linkageName: "triton_per_fused__to_copy__unsafe_index_abs_add_arange_clamp_exp_mul_pow_sub_sum_3", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 25, column: 21, scope: !7)
!12 = !DILocation(line: 26, column: 34, scope: !7)
!13 = !DILocation(line: 29, column: 21, scope: !7)
!14 = !DILocation(line: 29, column: 26, scope: !7)
!15 = !DILocation(line: 30, column: 19, scope: !7)
!16 = !DILocation(line: 31, column: 19, scope: !7)
!17 = !DILocation(line: 34, column: 19, scope: !7)
!18 = !DILocation(line: 35, column: 19, scope: !7)
!19 = !DILocation(line: 36, column: 39, scope: !7)
!20 = !DILocation(line: 36, column: 36, scope: !7)
!21 = !DILocation(line: 36, column: 48, scope: !7)
!22 = !DILocation(line: 36, column: 44, scope: !7)
!23 = !DILocation(line: 36, column: 31, scope: !7)
!24 = !DILocation(line: 36, column: 53, scope: !7)
!25 = !DILocation(line: 121, column: 29, scope: !26, inlinedAt: !28)
!26 = distinct !DILexicalBlockFile(scope: !7, file: !27, discriminator: 0)
!27 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!28 = !DILocation(line: 42, column: 40, scope: !7)
!29 = !DILocation(line: 43, column: 19, scope: !7)
!30 = !DILocation(line: 113, column: 29, scope: !26, inlinedAt: !31)
!31 = !DILocation(line: 47, column: 41, scope: !7)
!32 = !DILocation(line: 121, column: 29, scope: !26, inlinedAt: !33)
!33 = !DILocation(line: 51, column: 42, scope: !7)
!34 = !DILocation(line: 52, column: 21, scope: !7)
!35 = !DILocation(line: 53, column: 41, scope: !7)
!36 = !DILocation(line: 53, column: 39, scope: !7)
!37 = !DILocation(line: 53, column: 52, scope: !7)
!38 = !DILocation(line: 53, column: 49, scope: !7)
!39 = !DILocation(line: 53, column: 31, scope: !7)
!40 = !DILocation(line: 53, column: 57, scope: !7)
!41 = !DILocation(line: 113, column: 29, scope: !26, inlinedAt: !42)
!42 = !DILocation(line: 55, column: 42, scope: !7)
!43 = !DILocation(line: 56, column: 31, scope: !7)
!44 = !DILocation(line: 56, column: 57, scope: !7)
!45 = !DILocation(line: 64, column: 41, scope: !7)
!46 = !DILocation(line: 64, column: 39, scope: !7)
!47 = !DILocation(line: 64, column: 48, scope: !7)
!48 = !DILocation(line: 64, column: 31, scope: !7)
!49 = !DILocation(line: 64, column: 56, scope: !7)
!50 = !DILocation(line: 65, column: 39, scope: !7)
!51 = !DILocation(line: 65, column: 31, scope: !7)
!52 = !DILocation(line: 65, column: 56, scope: !7)
!53 = !DILocation(line: 79, column: 24, scope: !7)
!54 = !DILocation(line: 80, column: 28, scope: !7)
!55 = !DILocation(line: 78, column: 20, scope: !7)
!56 = !DILocation(line: 58, column: 21, scope: !7)
!57 = !DILocation(line: 59, column: 20, scope: !7)
!58 = !DILocation(line: 118, column: 15, scope: !26, inlinedAt: !59)
!59 = !DILocation(line: 60, column: 42, scope: !7)
!60 = !DILocation(line: 121, column: 29, scope: !26, inlinedAt: !59)
!61 = !DILocation(line: 110, column: 15, scope: !26, inlinedAt: !62)
!62 = !DILocation(line: 61, column: 42, scope: !7)
!63 = !DILocation(line: 113, column: 29, scope: !26, inlinedAt: !62)
!64 = !DILocation(line: 57, column: 20, scope: !7)
!65 = !DILocation(line: 62, column: 20, scope: !7)
!66 = !DILocation(line: 63, column: 20, scope: !7)
!67 = !DILocation(line: 69, column: 20, scope: !7)
!68 = !DILocation(line: 75, column: 20, scope: !7)
!69 = !DILocation(line: 70, column: 20, scope: !7)
!70 = !DILocation(line: 71, column: 19, scope: !7)
!71 = !DILocation(line: 118, column: 15, scope: !26, inlinedAt: !72)
!72 = !DILocation(line: 72, column: 42, scope: !7)
!73 = !DILocation(line: 121, column: 29, scope: !26, inlinedAt: !72)
!74 = !DILocation(line: 110, column: 15, scope: !26, inlinedAt: !75)
!75 = !DILocation(line: 73, column: 42, scope: !7)
!76 = !DILocation(line: 113, column: 29, scope: !26, inlinedAt: !75)
!77 = !DILocation(line: 74, column: 20, scope: !7)
!78 = !DILocation(line: 82, column: 35, scope: !7)
!79 = !DILocation(line: 83, column: 20, scope: !7)
!80 = !DILocation(line: 85, column: 20, scope: !7)
!81 = !DILocation(line: 87, column: 20, scope: !7)
!82 = !DILocation(line: 88, column: 24, scope: !7)
!83 = !DILocation(line: 89, column: 20, scope: !7)
!84 = !DILocation(line: 91, column: 35, scope: !7)
!85 = !DILocation(line: 267, column: 36, scope: !86, inlinedAt: !88)
!86 = distinct !DILexicalBlockFile(scope: !7, file: !87, discriminator: 0)
!87 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!88 = !DILocation(line: 92, column: 26, scope: !7)
!89 = !DILocation(line: 256, column: 15, scope: !90, inlinedAt: !88)
!90 = distinct !DILexicalBlockFile(scope: !86, file: !87, discriminator: 0)
!91 = !DILocation(line: 93, column: 20, scope: !7)
!92 = !DILocation(line: 94, column: 4, scope: !7)
!93 = !DILocation(line: 95, column: 28, scope: !7)
!94 = !DILocation(line: 95, column: 40, scope: !7)
!95 = !DILocation(line: 96, column: 4, scope: !7)
!96 = !DILocation(line: 97, column: 28, scope: !7)
!97 = !DILocation(line: 97, column: 40, scope: !7)
!98 = !DILocation(line: 97, column: 4, scope: !7)
