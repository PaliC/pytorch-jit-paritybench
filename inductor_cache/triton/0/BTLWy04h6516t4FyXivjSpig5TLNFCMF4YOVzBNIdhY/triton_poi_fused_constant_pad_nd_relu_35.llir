; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_constant_pad_nd_relu_35(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 10, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 2, !dbg !12
  %8 = and i32 %7, 508, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = or disjoint i32 %9, 1, !dbg !13
  %11 = or disjoint i32 %9, 2, !dbg !13
  %12 = or disjoint i32 %9, 3, !dbg !13
  %13 = or disjoint i32 %9, 512, !dbg !13
  %14 = or disjoint i32 %9, 513, !dbg !13
  %15 = or disjoint i32 %9, 514, !dbg !13
  %16 = or disjoint i32 %9, 515, !dbg !13
  %17 = icmp slt i32 %9, 82944, !dbg !14
  %18 = icmp slt i32 %13, 82944, !dbg !14
  %19 = sdiv i32 %9, 9, !dbg !15
  %20 = sdiv i32 %10, 9, !dbg !15
  %21 = sdiv i32 %11, 9, !dbg !15
  %22 = sdiv i32 %12, 9, !dbg !15
  %23 = sdiv i32 %13, 9, !dbg !15
  %24 = sdiv i32 %14, 9, !dbg !15
  %25 = sdiv i32 %15, 9, !dbg !15
  %26 = sdiv i32 %16, 9, !dbg !15
  %27 = sdiv i32 %9, 81, !dbg !16
  %28 = sdiv i32 %10, 81, !dbg !16
  %29 = sdiv i32 %11, 81, !dbg !16
  %30 = sdiv i32 %12, 81, !dbg !16
  %31 = sdiv i32 %13, 81, !dbg !16
  %32 = sdiv i32 %14, 81, !dbg !16
  %33 = sdiv i32 %15, 81, !dbg !16
  %34 = sdiv i32 %16, 81, !dbg !16
  %35 = insertelement <2 x i32> poison, i32 %9, i64 0, !dbg !17
  %36 = insertelement <2 x i32> %35, i32 %19, i64 1, !dbg !17
  %37 = srem <2 x i32> %36, splat (i32 9), !dbg !17
  %38 = icmp sgt <2 x i32> %37, zeroinitializer, !dbg !18
  %39 = insertelement <2 x i32> poison, i32 %10, i64 0, !dbg !17
  %40 = insertelement <2 x i32> %39, i32 %20, i64 1, !dbg !17
  %41 = srem <2 x i32> %40, splat (i32 9), !dbg !17
  %42 = icmp sgt <2 x i32> %41, zeroinitializer, !dbg !18
  %43 = insertelement <2 x i32> poison, i32 %11, i64 0, !dbg !17
  %44 = insertelement <2 x i32> %43, i32 %21, i64 1, !dbg !17
  %45 = srem <2 x i32> %44, splat (i32 9), !dbg !17
  %46 = icmp sgt <2 x i32> %45, zeroinitializer, !dbg !18
  %47 = insertelement <2 x i32> poison, i32 %12, i64 0, !dbg !17
  %48 = insertelement <2 x i32> %47, i32 %22, i64 1, !dbg !17
  %49 = srem <2 x i32> %48, splat (i32 9), !dbg !17
  %50 = icmp sgt <2 x i32> %49, zeroinitializer, !dbg !18
  %51 = insertelement <2 x i32> poison, i32 %13, i64 0, !dbg !17
  %52 = insertelement <2 x i32> %51, i32 %23, i64 1, !dbg !17
  %53 = srem <2 x i32> %52, splat (i32 9), !dbg !17
  %54 = icmp sgt <2 x i32> %53, zeroinitializer, !dbg !18
  %55 = insertelement <2 x i32> poison, i32 %14, i64 0, !dbg !17
  %56 = insertelement <2 x i32> %55, i32 %24, i64 1, !dbg !17
  %57 = srem <2 x i32> %56, splat (i32 9), !dbg !17
  %58 = icmp sgt <2 x i32> %57, zeroinitializer, !dbg !18
  %59 = insertelement <2 x i32> poison, i32 %15, i64 0, !dbg !17
  %60 = insertelement <2 x i32> %59, i32 %25, i64 1, !dbg !17
  %61 = srem <2 x i32> %60, splat (i32 9), !dbg !17
  %62 = icmp sgt <2 x i32> %61, zeroinitializer, !dbg !18
  %63 = insertelement <2 x i32> poison, i32 %16, i64 0, !dbg !17
  %64 = insertelement <2 x i32> %63, i32 %26, i64 1, !dbg !17
  %65 = srem <2 x i32> %64, splat (i32 9), !dbg !17
  %66 = icmp sgt <2 x i32> %65, zeroinitializer, !dbg !18
  %shift = shufflevector <2 x i1> %38, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !19
  %67 = and <2 x i1> %38, %shift, !dbg !19
  %68 = extractelement <2 x i1> %67, i64 0, !dbg !19
  %shift1 = shufflevector <2 x i1> %42, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !19
  %69 = and <2 x i1> %42, %shift1, !dbg !19
  %70 = extractelement <2 x i1> %69, i64 0, !dbg !19
  %shift2 = shufflevector <2 x i1> %46, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !19
  %71 = and <2 x i1> %46, %shift2, !dbg !19
  %72 = extractelement <2 x i1> %71, i64 0, !dbg !19
  %shift3 = shufflevector <2 x i1> %50, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !19
  %73 = and <2 x i1> %50, %shift3, !dbg !19
  %74 = extractelement <2 x i1> %73, i64 0, !dbg !19
  %shift4 = shufflevector <2 x i1> %54, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !19
  %75 = and <2 x i1> %54, %shift4, !dbg !19
  %76 = extractelement <2 x i1> %75, i64 0, !dbg !19
  %shift5 = shufflevector <2 x i1> %58, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !19
  %77 = and <2 x i1> %58, %shift5, !dbg !19
  %78 = extractelement <2 x i1> %77, i64 0, !dbg !19
  %shift6 = shufflevector <2 x i1> %62, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !19
  %79 = and <2 x i1> %62, %shift6, !dbg !19
  %80 = extractelement <2 x i1> %79, i64 0, !dbg !19
  %shift7 = shufflevector <2 x i1> %66, <2 x i1> poison, <2 x i32> <i32 1, i32 poison>, !dbg !19
  %81 = and <2 x i1> %66, %shift7, !dbg !19
  %82 = extractelement <2 x i1> %81, i64 0, !dbg !19
  %83 = extractelement <2 x i32> %37, i64 0, !dbg !20
  %84 = add nsw i32 %83, -9, !dbg !20
  %85 = extractelement <2 x i32> %41, i64 0, !dbg !20
  %86 = add nsw i32 %85, -9, !dbg !20
  %87 = extractelement <2 x i32> %45, i64 0, !dbg !20
  %88 = add nsw i32 %87, -9, !dbg !20
  %89 = extractelement <2 x i32> %49, i64 0, !dbg !20
  %90 = add nsw i32 %89, -9, !dbg !20
  %91 = extractelement <2 x i32> %53, i64 0, !dbg !20
  %92 = add nsw i32 %91, -9, !dbg !20
  %93 = extractelement <2 x i32> %57, i64 0, !dbg !20
  %94 = add nsw i32 %93, -9, !dbg !20
  %95 = extractelement <2 x i32> %61, i64 0, !dbg !20
  %96 = add nsw i32 %95, -9, !dbg !20
  %97 = extractelement <2 x i32> %65, i64 0, !dbg !20
  %98 = add nsw i32 %97, -9, !dbg !20
  %99 = extractelement <2 x i32> %37, i64 1, !dbg !21
  %100 = shl nsw i32 %99, 3, !dbg !21
  %101 = extractelement <2 x i32> %41, i64 1, !dbg !21
  %102 = shl nsw i32 %101, 3, !dbg !21
  %103 = extractelement <2 x i32> %45, i64 1, !dbg !21
  %104 = shl nsw i32 %103, 3, !dbg !21
  %105 = extractelement <2 x i32> %49, i64 1, !dbg !21
  %106 = shl nsw i32 %105, 3, !dbg !21
  %107 = extractelement <2 x i32> %53, i64 1, !dbg !21
  %108 = shl nsw i32 %107, 3, !dbg !21
  %109 = extractelement <2 x i32> %57, i64 1, !dbg !21
  %110 = shl nsw i32 %109, 3, !dbg !21
  %111 = extractelement <2 x i32> %61, i64 1, !dbg !21
  %112 = shl nsw i32 %111, 3, !dbg !21
  %113 = extractelement <2 x i32> %65, i64 1, !dbg !21
  %114 = shl nsw i32 %113, 3, !dbg !21
  %115 = shl nsw i32 %27, 6, !dbg !22
  %116 = shl nsw i32 %28, 6, !dbg !22
  %117 = shl nsw i32 %29, 6, !dbg !22
  %118 = shl nsw i32 %30, 6, !dbg !22
  %119 = shl nsw i32 %31, 6, !dbg !22
  %120 = shl nsw i32 %32, 6, !dbg !22
  %121 = shl nsw i32 %33, 6, !dbg !22
  %122 = shl nsw i32 %34, 6, !dbg !22
  %123 = add nsw i32 %84, %115, !dbg !23
  %124 = add nsw i32 %123, %100, !dbg !24
  %125 = add nsw i32 %86, %116, !dbg !23
  %126 = add nsw i32 %125, %102, !dbg !24
  %127 = add nsw i32 %88, %117, !dbg !23
  %128 = add nsw i32 %127, %104, !dbg !24
  %129 = add nsw i32 %90, %118, !dbg !23
  %130 = add nsw i32 %129, %106, !dbg !24
  %131 = add nsw i32 %92, %119, !dbg !23
  %132 = add nsw i32 %131, %108, !dbg !24
  %133 = add nsw i32 %94, %120, !dbg !23
  %134 = add nsw i32 %133, %110, !dbg !24
  %135 = add nsw i32 %96, %121, !dbg !23
  %136 = add nsw i32 %135, %112, !dbg !24
  %137 = add nsw i32 %98, %122, !dbg !23
  %138 = add nsw i32 %137, %114, !dbg !24
  %139 = sext i32 %124 to i64, !dbg !25
  %140 = getelementptr float, ptr addrspace(1) %0, i64 %139, !dbg !25
  %141 = sext i32 %126 to i64, !dbg !25
  %142 = getelementptr float, ptr addrspace(1) %0, i64 %141, !dbg !25
  %143 = sext i32 %128 to i64, !dbg !25
  %144 = getelementptr float, ptr addrspace(1) %0, i64 %143, !dbg !25
  %145 = sext i32 %130 to i64, !dbg !25
  %146 = getelementptr float, ptr addrspace(1) %0, i64 %145, !dbg !25
  %147 = sext i32 %132 to i64, !dbg !25
  %148 = getelementptr float, ptr addrspace(1) %0, i64 %147, !dbg !25
  %149 = sext i32 %134 to i64, !dbg !25
  %150 = getelementptr float, ptr addrspace(1) %0, i64 %149, !dbg !25
  %151 = sext i32 %136 to i64, !dbg !25
  %152 = getelementptr float, ptr addrspace(1) %0, i64 %151, !dbg !25
  %153 = sext i32 %138 to i64, !dbg !25
  %154 = getelementptr float, ptr addrspace(1) %0, i64 %153, !dbg !25
  %155 = and i1 %17, %68, !dbg !26
  %156 = and i1 %70, %17, !dbg !26
  %157 = and i1 %72, %17, !dbg !26
  %158 = and i1 %74, %17, !dbg !26
  %159 = and i1 %18, %76, !dbg !26
  %160 = and i1 %18, %78, !dbg !26
  %161 = and i1 %18, %80, !dbg !26
  %162 = and i1 %18, %82, !dbg !26
  %163 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %140, i1 %155, i32 0, i1 %155) #1, !dbg !27
  %164 = bitcast i32 %163 to float, !dbg !27
  %165 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %142, i1 %156, i32 0, i1 %156) #1, !dbg !27
  %166 = bitcast i32 %165 to float, !dbg !27
  %167 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %144, i1 %157, i32 0, i1 %157) #1, !dbg !27
  %168 = bitcast i32 %167 to float, !dbg !27
  %169 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %146, i1 %158, i32 0, i1 %158) #1, !dbg !27
  %170 = bitcast i32 %169 to float, !dbg !27
  %171 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %148, i1 %159, i32 0, i1 %159) #1, !dbg !27
  %172 = bitcast i32 %171 to float, !dbg !27
  %173 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %150, i1 %160, i32 0, i1 %160) #1, !dbg !27
  %174 = bitcast i32 %173 to float, !dbg !27
  %175 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %152, i1 %161, i32 0, i1 %161) #1, !dbg !27
  %176 = bitcast i32 %175 to float, !dbg !27
  %177 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %154, i1 %162, i32 0, i1 %162) #1, !dbg !27
  %178 = bitcast i32 %177 to float, !dbg !27
  %179 = fcmp olt float %164, 0.000000e+00, !dbg !28
  %180 = fcmp olt float %166, 0.000000e+00, !dbg !28
  %181 = fcmp olt float %168, 0.000000e+00, !dbg !28
  %182 = fcmp olt float %170, 0.000000e+00, !dbg !28
  %183 = fcmp olt float %172, 0.000000e+00, !dbg !28
  %184 = fcmp olt float %174, 0.000000e+00, !dbg !28
  %185 = fcmp olt float %176, 0.000000e+00, !dbg !28
  %186 = fcmp olt float %178, 0.000000e+00, !dbg !28
  %187 = select i1 %179, float 0.000000e+00, float %164, !dbg !32
  %188 = select i1 %180, float 0.000000e+00, float %166, !dbg !32
  %189 = select i1 %181, float 0.000000e+00, float %168, !dbg !32
  %190 = select i1 %182, float 0.000000e+00, float %170, !dbg !32
  %191 = select i1 %183, float 0.000000e+00, float %172, !dbg !32
  %192 = select i1 %184, float 0.000000e+00, float %174, !dbg !32
  %193 = select i1 %185, float 0.000000e+00, float %176, !dbg !32
  %194 = select i1 %186, float 0.000000e+00, float %178, !dbg !32
  %195 = sext i32 %9 to i64, !dbg !33
  %196 = getelementptr float, ptr addrspace(1) %1, i64 %195, !dbg !33
  %197 = sext i32 %13 to i64, !dbg !33
  %198 = getelementptr float, ptr addrspace(1) %1, i64 %197, !dbg !33
  %199 = bitcast float %187 to i32, !dbg !34
  %200 = select i1 %68, i32 %199, i32 0, !dbg !35
  %201 = bitcast float %188 to i32, !dbg !34
  %202 = select i1 %70, i32 %201, i32 0, !dbg !35
  %203 = bitcast float %189 to i32, !dbg !34
  %204 = select i1 %72, i32 %203, i32 0, !dbg !35
  %205 = bitcast float %190 to i32, !dbg !34
  %206 = select i1 %74, i32 %205, i32 0, !dbg !35
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %200, i32 %202, i32 %204, i32 %206, ptr addrspace(1) %196, i1 %17) #1, !dbg !34
  %207 = bitcast float %191 to i32, !dbg !34
  %208 = select i1 %76, i32 %207, i32 0, !dbg !35
  %209 = bitcast float %192 to i32, !dbg !34
  %210 = select i1 %78, i32 %209, i32 0, !dbg !35
  %211 = bitcast float %193 to i32, !dbg !34
  %212 = select i1 %80, i32 %211, i32 0, !dbg !35
  %213 = bitcast float %194 to i32, !dbg !34
  %214 = select i1 %82, i32 %213, i32 0, !dbg !35
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %208, i32 %210, i32 %212, i32 %214, ptr addrspace(1) %198, i1 %18) #1, !dbg !34
  ret void, !dbg !36
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cyfeyqjv6q6shw3kaldjaitrdlmy6tiigwaigap3mqqtjpyg5eai.py", directory: "inductor_cache/yf")
!4 = !{ptr @triton_poi_fused_constant_pad_nd_relu_35, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_constant_pad_nd_relu_35, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_constant_pad_nd_relu_35", linkageName: "triton_poi_fused_constant_pad_nd_relu_35", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 25, column: 19, scope: !7)
!18 = !DILocation(line: 32, column: 19, scope: !7)
!19 = !DILocation(line: 33, column: 18, scope: !7)
!20 = !DILocation(line: 34, column: 37, scope: !7)
!21 = !DILocation(line: 34, column: 44, scope: !7)
!22 = !DILocation(line: 34, column: 52, scope: !7)
!23 = !DILocation(line: 34, column: 42, scope: !7)
!24 = !DILocation(line: 34, column: 49, scope: !7)
!25 = !DILocation(line: 34, column: 30, scope: !7)
!26 = !DILocation(line: 34, column: 64, scope: !7)
!27 = !DILocation(line: 34, column: 57, scope: !7)
!28 = !DILocation(line: 118, column: 15, scope: !29, inlinedAt: !31)
!29 = distinct !DILexicalBlockFile(scope: !7, file: !30, discriminator: 0)
!30 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!31 = !DILocation(line: 36, column: 40, scope: !7)
!32 = !DILocation(line: 121, column: 29, scope: !29, inlinedAt: !31)
!33 = !DILocation(line: 39, column: 25, scope: !7)
!34 = !DILocation(line: 39, column: 37, scope: !7)
!35 = !DILocation(line: 38, column: 33, scope: !7)
!36 = !DILocation(line: 39, column: 4, scope: !7)
