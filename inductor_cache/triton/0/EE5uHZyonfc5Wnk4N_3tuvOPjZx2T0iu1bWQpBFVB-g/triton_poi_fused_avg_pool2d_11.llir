; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_avg_pool2d_11(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 9, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 1, !dbg !12
  %8 = and i32 %7, 510, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = or disjoint i32 %9, 1, !dbg !13
  %11 = icmp slt i32 %9, 5715456, !dbg !14
  %12 = sdiv i32 %9, 61, !dbg !15
  %13 = sdiv i32 %10, 61, !dbg !15
  %14 = add i32 %9, -62, !dbg !16
  %15 = add i32 %9, -61, !dbg !16
  %16 = sext i32 %14 to i64, !dbg !17
  %17 = getelementptr float, ptr addrspace(1) %0, i64 %16, !dbg !17
  %18 = sext i32 %15 to i64, !dbg !17
  %19 = getelementptr float, ptr addrspace(1) %0, i64 %18, !dbg !17
  %20 = add i32 %9, -60, !dbg !18
  %21 = sext i32 %20 to i64, !dbg !19
  %22 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !19
  %23 = add i32 %9, -59, !dbg !20
  %24 = sext i32 %23 to i64, !dbg !21
  %25 = getelementptr float, ptr addrspace(1) %0, i64 %24, !dbg !21
  %26 = add i32 %9, -1, !dbg !22
  %27 = sext i32 %26 to i64, !dbg !23
  %28 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !23
  %29 = sext i32 %10 to i64, !dbg !23
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !23
  %31 = getelementptr i8, ptr addrspace(1) %30, i64 -4, !dbg !23
  %32 = sext i32 %9 to i64, !dbg !24
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !24
  %34 = add i32 %9, 2, !dbg !25
  %35 = sext i32 %34 to i64, !dbg !26
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !26
  %37 = add i32 %9, 60, !dbg !27
  %38 = add i32 %9, 61, !dbg !27
  %39 = sext i32 %37 to i64, !dbg !28
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !28
  %41 = sext i32 %38 to i64, !dbg !28
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !28
  %43 = add i32 %9, 62, !dbg !29
  %44 = sext i32 %43 to i64, !dbg !30
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !30
  %46 = add i32 %9, 63, !dbg !31
  %47 = sext i32 %46 to i64, !dbg !32
  %48 = getelementptr float, ptr addrspace(1) %0, i64 %47, !dbg !32
  %49 = insertelement <2 x i32> poison, i32 %9, i64 0, !dbg !33
  %50 = insertelement <2 x i32> %49, i32 %12, i64 1, !dbg !33
  %51 = srem <2 x i32> %50, splat (i32 61), !dbg !33
  %52 = extractelement <2 x i32> %51, i64 1, !dbg !34
  %53 = add nsw i32 %52, -1, !dbg !35
  %54 = icmp sgt i32 %52, 0, !dbg !36
  %55 = extractelement <2 x i32> %51, i64 0, !dbg !37
  %56 = add nsw i32 %55, -1, !dbg !38
  %57 = icmp sgt i32 %55, 0, !dbg !39
  %58 = and i1 %57, %54, !dbg !40
  %59 = and i1 %11, %58, !dbg !41
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %17, i1 %59, i32 0, i1 %59) #1, !dbg !42
  %61 = bitcast i32 %60 to float, !dbg !42
  %62 = icmp sgt i32 %55, -1, !dbg !43
  %63 = and i1 %62, %54, !dbg !44
  %64 = and i1 %11, %63, !dbg !45
  %65 = icmp sgt i32 %52, -1, !dbg !46
  %66 = and i1 %57, %65, !dbg !47
  %67 = and i1 %11, %66, !dbg !48
  %68 = or i32 %52, %55, !dbg !49
  %69 = icmp sgt i32 %68, -1, !dbg !49
  %70 = and i1 %11, %69, !dbg !50
  %71 = icmp sgt i32 %52, 1, !dbg !51
  %72 = select i1 %71, i32 %53, i32 0, !dbg !52
  %73 = add nsw i32 %55, 2, !dbg !53
  %74 = icmp sgt i32 %55, 58, !dbg !54
  %75 = select i1 %74, i32 61, i32 0, !dbg !55
  %76 = icmp slt i32 %55, 59, !dbg !37
  %77 = select i1 %76, i32 %73, i32 0, !dbg !56
  %78 = add nsw i32 %75, %77, !dbg !57
  %79 = add nsw i32 %52, 2, !dbg !58
  %80 = icmp sgt <2 x i32> %51, <i32 1, i32 58>, !dbg !59
  %81 = insertelement <2 x i32> <i32 poison, i32 61>, i32 %56, i64 0, !dbg !60
  %82 = select <2 x i1> %80, <2 x i32> %81, <2 x i32> zeroinitializer, !dbg !60
  %83 = icmp slt i32 %52, 59, !dbg !34
  %84 = select i1 %83, i32 %79, i32 0, !dbg !61
  %85 = extractelement <2 x i32> %82, i64 0
  %reass.add = sub nsw i32 %78, %85
  %86 = insertelement <2 x i32> poison, i32 %78, i64 0
  %87 = insertelement <2 x i32> %86, i32 %84, i64 1
  %88 = sub nsw <2 x i32> %82, %87
  %89 = add nsw <2 x i32> %82, %87
  %90 = shufflevector <2 x i32> %88, <2 x i32> %89, <2 x i32> <i32 0, i32 3>
  %91 = insertelement <2 x i32> poison, i32 %72, i64 0
  %92 = insertelement <2 x i32> %91, i32 %reass.add, i64 1
  %93 = mul nsw <2 x i32> %90, %92
  %shift = shufflevector <2 x i32> %93, <2 x i32> poison, <2 x i32> <i32 1, i32 poison>, !dbg !62
  %94 = add nsw <2 x i32> %93, %shift, !dbg !62
  %95 = extractelement <2 x i32> %94, i64 0, !dbg !62
  %96 = insertelement <2 x i32> poison, i32 %10, i64 0, !dbg !33
  %97 = insertelement <2 x i32> %96, i32 %13, i64 1, !dbg !33
  %98 = srem <2 x i32> %97, splat (i32 61), !dbg !33
  %99 = extractelement <2 x i32> %98, i64 1, !dbg !34
  %100 = add nsw i32 %99, -1, !dbg !35
  %101 = icmp sgt i32 %99, 0, !dbg !36
  %102 = extractelement <2 x i32> %98, i64 0, !dbg !37
  %103 = add nsw i32 %102, -1, !dbg !38
  %104 = icmp sgt i32 %102, 0, !dbg !39
  %105 = and i1 %104, %101, !dbg !40
  %106 = and i1 %105, %11, !dbg !41
  %107 = icmp sgt i32 %102, -1, !dbg !43
  %108 = and i1 %107, %101, !dbg !44
  %109 = and i1 %108, %11, !dbg !45
  %110 = icmp sgt i32 %99, -1, !dbg !46
  %111 = and i1 %104, %110, !dbg !47
  %112 = and i1 %111, %11, !dbg !48
  %113 = or i32 %99, %102, !dbg !49
  %114 = icmp sgt i32 %113, -1, !dbg !49
  %115 = and i1 %114, %11, !dbg !50
  %116 = shufflevector <2 x i32> %98, <2 x i32> %51, <4 x i32> <i32 1, i32 3, i32 0, i32 2>, !dbg !63
  %117 = add nsw <4 x i32> %116, splat (i32 1), !dbg !63
  %118 = icmp ult <4 x i32> %117, splat (i32 61), !dbg !63
  %119 = extractelement <4 x i1> %118, i64 3, !dbg !64
  %120 = and i1 %54, %119, !dbg !64
  %121 = and i1 %11, %120, !dbg !65
  %122 = and i1 %65, %119, !dbg !66
  %123 = and i1 %11, %122, !dbg !67
  %124 = extractelement <4 x i1> %118, i64 1, !dbg !68
  %125 = and i1 %57, %124, !dbg !68
  %126 = and i1 %11, %125, !dbg !69
  %127 = and i1 %62, %124, !dbg !70
  %128 = and i1 %11, %127, !dbg !71
  %129 = and i1 %119, %124, !dbg !72
  %130 = and i1 %11, %129, !dbg !73
  %131 = extractelement <4 x i1> %118, i64 2, !dbg !64
  %132 = and i1 %101, %131, !dbg !64
  %133 = and i1 %132, %11, !dbg !65
  %134 = and i1 %110, %131, !dbg !66
  %135 = and i1 %134, %11, !dbg !67
  %136 = extractelement <4 x i1> %118, i64 0, !dbg !68
  %137 = and i1 %104, %136, !dbg !68
  %138 = and i1 %137, %11, !dbg !69
  %139 = and i1 %107, %136, !dbg !70
  %140 = and i1 %139, %11, !dbg !71
  %141 = and i1 %131, %136, !dbg !72
  %142 = and i1 %141, %11, !dbg !73
  %143 = icmp sgt i32 %99, 1, !dbg !51
  %144 = select i1 %143, i32 %100, i32 0, !dbg !52
  %145 = add nsw i32 %102, 2, !dbg !53
  %146 = icmp sgt i32 %102, 58, !dbg !54
  %147 = select i1 %146, i32 61, i32 0, !dbg !55
  %148 = icmp slt i32 %102, 59, !dbg !37
  %149 = select i1 %148, i32 %145, i32 0, !dbg !56
  %150 = add nsw i32 %147, %149, !dbg !57
  %151 = add nsw i32 %99, 2, !dbg !58
  %152 = icmp sgt <2 x i32> %98, <i32 1, i32 58>, !dbg !59
  %153 = insertelement <2 x i32> <i32 poison, i32 61>, i32 %103, i64 0, !dbg !60
  %154 = select <2 x i1> %152, <2 x i32> %153, <2 x i32> zeroinitializer, !dbg !60
  %155 = icmp slt i32 %99, 59, !dbg !34
  %156 = select i1 %155, i32 %151, i32 0, !dbg !61
  %157 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %19, i1 %106, i32 0, i1 %106) #1, !dbg !42
  %158 = bitcast i32 %157 to float, !dbg !42
  %159 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %19, i1 %64, i32 0, i1 %64) #1, !dbg !74
  %160 = bitcast i32 %159 to float, !dbg !74
  %161 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %22, i1 %109, i32 0, i1 %109) #1, !dbg !74
  %162 = bitcast i32 %161 to float, !dbg !74
  %163 = fadd float %61, %160, !dbg !75
  %164 = fadd float %158, %162, !dbg !75
  %165 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %22, i1 %121, i32 0, i1 %121) #1, !dbg !76
  %166 = bitcast i32 %165 to float, !dbg !76
  %167 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %25, i1 %133, i32 0, i1 %133) #1, !dbg !76
  %168 = bitcast i32 %167 to float, !dbg !76
  %169 = fadd float %163, %166, !dbg !77
  %170 = fadd float %164, %168, !dbg !77
  %171 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %28, i1 %67, i32 0, i1 %67) #1, !dbg !78
  %172 = bitcast i32 %171 to float, !dbg !78
  %173 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %31, i1 %112, i32 0, i1 %112) #1, !dbg !78
  %174 = bitcast i32 %173 to float, !dbg !78
  %175 = fadd float %169, %172, !dbg !79
  %176 = fadd float %170, %174, !dbg !79
  %177 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %33, i1 %70, i32 0, i1 %70) #1, !dbg !80
  %178 = bitcast i32 %177 to float, !dbg !80
  %179 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %30, i1 %115, i32 0, i1 %115) #1, !dbg !80
  %180 = bitcast i32 %179 to float, !dbg !80
  %181 = fadd float %175, %178, !dbg !81
  %182 = fadd float %176, %180, !dbg !81
  %183 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %30, i1 %123, i32 0, i1 %123) #1, !dbg !82
  %184 = bitcast i32 %183 to float, !dbg !82
  %185 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %36, i1 %135, i32 0, i1 %135) #1, !dbg !82
  %186 = bitcast i32 %185 to float, !dbg !82
  %187 = fadd float %181, %184, !dbg !83
  %188 = fadd float %182, %186, !dbg !83
  %189 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %40, i1 %126, i32 0, i1 %126) #1, !dbg !84
  %190 = bitcast i32 %189 to float, !dbg !84
  %191 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %42, i1 %138, i32 0, i1 %138) #1, !dbg !84
  %192 = bitcast i32 %191 to float, !dbg !84
  %193 = fadd float %187, %190, !dbg !85
  %194 = fadd float %188, %192, !dbg !85
  %195 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %42, i1 %128, i32 0, i1 %128) #1, !dbg !86
  %196 = bitcast i32 %195 to float, !dbg !86
  %197 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %45, i1 %140, i32 0, i1 %140) #1, !dbg !86
  %198 = bitcast i32 %197 to float, !dbg !86
  %199 = fadd float %193, %196, !dbg !87
  %200 = fadd float %194, %198, !dbg !87
  %201 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %45, i1 %130, i32 0, i1 %130) #1, !dbg !88
  %202 = bitcast i32 %201 to float, !dbg !88
  %203 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %48, i1 %142, i32 0, i1 %142) #1, !dbg !88
  %204 = bitcast i32 %203 to float, !dbg !88
  %205 = fadd float %199, %202, !dbg !89
  %206 = fadd float %200, %204, !dbg !89
  %207 = extractelement <2 x i32> %154, i64 0
  %reass.add8 = sub nsw i32 %150, %207
  %208 = insertelement <2 x i32> poison, i32 %150, i64 0
  %209 = insertelement <2 x i32> %208, i32 %156, i64 1
  %210 = sub nsw <2 x i32> %154, %209
  %211 = add nsw <2 x i32> %154, %209
  %212 = shufflevector <2 x i32> %210, <2 x i32> %211, <2 x i32> <i32 0, i32 3>
  %213 = insertelement <2 x i32> poison, i32 %144, i64 0
  %214 = insertelement <2 x i32> %213, i32 %reass.add8, i64 1
  %215 = mul nsw <2 x i32> %212, %214
  %shift12 = shufflevector <2 x i32> %215, <2 x i32> poison, <2 x i32> <i32 1, i32 poison>, !dbg !62
  %216 = add nsw <2 x i32> %215, %shift12, !dbg !62
  %217 = extractelement <2 x i32> %216, i64 0, !dbg !62
  %218 = sitofp i32 %95 to float, !dbg !90
  %219 = sitofp i32 %217 to float, !dbg !90
  %220 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %205, float %218) #1, !dbg !90
  %221 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %206, float %219) #1, !dbg !90
  %222 = getelementptr float, ptr addrspace(1) %1, i64 %32, !dbg !91
  %223 = bitcast float %220 to i32, !dbg !92
  %224 = bitcast float %221 to i32, !dbg !92
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %223, i32 %224, ptr addrspace(1) %222, i1 %11) #1, !dbg !92
  ret void, !dbg !93
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cd2oeip3sxeu3fhbnd62qxfr3vvvxwfmdoe7kznlsovbhpxlgumw.py", directory: "inductor_cache/d2")
!4 = !{ptr @triton_poi_fused_avg_pool2d_11, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_avg_pool2d_11, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_avg_pool2d_11", linkageName: "triton_poi_fused_avg_pool2d_11", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 38, column: 39, scope: !7)
!17 = !DILocation(line: 38, column: 31, scope: !7)
!18 = !DILocation(line: 44, column: 39, scope: !7)
!19 = !DILocation(line: 44, column: 31, scope: !7)
!20 = !DILocation(line: 51, column: 39, scope: !7)
!21 = !DILocation(line: 51, column: 31, scope: !7)
!22 = !DILocation(line: 58, column: 38, scope: !7)
!23 = !DILocation(line: 58, column: 31, scope: !7)
!24 = !DILocation(line: 61, column: 31, scope: !7)
!25 = !DILocation(line: 64, column: 35, scope: !7)
!26 = !DILocation(line: 64, column: 31, scope: !7)
!27 = !DILocation(line: 71, column: 36, scope: !7)
!28 = !DILocation(line: 71, column: 31, scope: !7)
!29 = !DILocation(line: 74, column: 36, scope: !7)
!30 = !DILocation(line: 74, column: 31, scope: !7)
!31 = !DILocation(line: 77, column: 36, scope: !7)
!32 = !DILocation(line: 77, column: 31, scope: !7)
!33 = !DILocation(line: 25, column: 19, scope: !7)
!34 = !DILocation(line: 79, column: 256, scope: !7)
!35 = !DILocation(line: 27, column: 18, scope: !7)
!36 = !DILocation(line: 29, column: 19, scope: !7)
!37 = !DILocation(line: 79, column: 197, scope: !7)
!38 = !DILocation(line: 33, column: 18, scope: !7)
!39 = !DILocation(line: 34, column: 19, scope: !7)
!40 = !DILocation(line: 37, column: 19, scope: !7)
!41 = !DILocation(line: 38, column: 52, scope: !7)
!42 = !DILocation(line: 38, column: 44, scope: !7)
!43 = !DILocation(line: 40, column: 21, scope: !7)
!44 = !DILocation(line: 43, column: 19, scope: !7)
!45 = !DILocation(line: 44, column: 52, scope: !7)
!46 = !DILocation(line: 54, column: 21, scope: !7)
!47 = !DILocation(line: 57, column: 20, scope: !7)
!48 = !DILocation(line: 58, column: 51, scope: !7)
!49 = !DILocation(line: 60, column: 20, scope: !7)
!50 = !DILocation(line: 61, column: 44, scope: !7)
!51 = !DILocation(line: 79, column: 137, scope: !7)
!52 = !DILocation(line: 79, column: 122, scope: !7)
!53 = !DILocation(line: 79, column: 166, scope: !7)
!54 = !DILocation(line: 79, column: 162, scope: !7)
!55 = !DILocation(line: 79, column: 153, scope: !7)
!56 = !DILocation(line: 79, column: 185, scope: !7)
!57 = !DILocation(line: 79, column: 173, scope: !7)
!58 = !DILocation(line: 79, column: 225, scope: !7)
!59 = !DILocation(line: 79, column: 72, scope: !7)
!60 = !DILocation(line: 79, column: 57, scope: !7)
!61 = !DILocation(line: 79, column: 244, scope: !7)
!62 = !DILocation(line: 79, column: 398, scope: !7)
!63 = !DILocation(line: 69, column: 20, scope: !7)
!64 = !DILocation(line: 50, column: 19, scope: !7)
!65 = !DILocation(line: 51, column: 52, scope: !7)
!66 = !DILocation(line: 63, column: 20, scope: !7)
!67 = !DILocation(line: 64, column: 48, scope: !7)
!68 = !DILocation(line: 70, column: 20, scope: !7)
!69 = !DILocation(line: 71, column: 49, scope: !7)
!70 = !DILocation(line: 73, column: 20, scope: !7)
!71 = !DILocation(line: 74, column: 49, scope: !7)
!72 = !DILocation(line: 76, column: 20, scope: !7)
!73 = !DILocation(line: 77, column: 49, scope: !7)
!74 = !DILocation(line: 44, column: 44, scope: !7)
!75 = !DILocation(line: 45, column: 20, scope: !7)
!76 = !DILocation(line: 51, column: 44, scope: !7)
!77 = !DILocation(line: 52, column: 20, scope: !7)
!78 = !DILocation(line: 58, column: 43, scope: !7)
!79 = !DILocation(line: 59, column: 20, scope: !7)
!80 = !DILocation(line: 61, column: 36, scope: !7)
!81 = !DILocation(line: 62, column: 20, scope: !7)
!82 = !DILocation(line: 64, column: 40, scope: !7)
!83 = !DILocation(line: 65, column: 20, scope: !7)
!84 = !DILocation(line: 71, column: 41, scope: !7)
!85 = !DILocation(line: 72, column: 20, scope: !7)
!86 = !DILocation(line: 74, column: 41, scope: !7)
!87 = !DILocation(line: 75, column: 20, scope: !7)
!88 = !DILocation(line: 77, column: 41, scope: !7)
!89 = !DILocation(line: 78, column: 20, scope: !7)
!90 = !DILocation(line: 80, column: 20, scope: !7)
!91 = !DILocation(line: 81, column: 25, scope: !7)
!92 = !DILocation(line: 81, column: 37, scope: !7)
!93 = !DILocation(line: 81, column: 4, scope: !7)
