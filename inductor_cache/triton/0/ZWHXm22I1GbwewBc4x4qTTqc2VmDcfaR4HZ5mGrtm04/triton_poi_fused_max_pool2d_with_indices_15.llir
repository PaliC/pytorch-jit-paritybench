; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_max_pool2d_with_indices_15(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 7, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 1, !dbg !12
  %10 = and i32 %9, 127, !dbg !12
  %11 = lshr i32 %8, 5, !dbg !12
  %12 = and i32 %11, 7, !dbg !12
  %13 = or disjoint i32 %7, %10, !dbg !13
  %14 = or disjoint i32 %7, %12, !dbg !13
  %15 = or disjoint i32 %14, 8, !dbg !13
  %16 = or disjoint i32 %14, 16, !dbg !13
  %17 = or disjoint i32 %14, 24, !dbg !13
  %18 = or disjoint i32 %14, 32, !dbg !13
  %19 = or disjoint i32 %14, 40, !dbg !13
  %20 = or disjoint i32 %14, 48, !dbg !13
  %21 = or disjoint i32 %14, 56, !dbg !13
  %22 = or disjoint i32 %14, 64, !dbg !13
  %23 = or disjoint i32 %14, 72, !dbg !13
  %24 = or disjoint i32 %14, 80, !dbg !13
  %25 = or disjoint i32 %14, 88, !dbg !13
  %26 = or disjoint i32 %14, 96, !dbg !13
  %27 = or disjoint i32 %14, 104, !dbg !13
  %28 = or disjoint i32 %14, 112, !dbg !13
  %29 = or disjoint i32 %14, 120, !dbg !13
  %30 = icmp slt i32 %13, 100, !dbg !14
  %31 = icmp slt i32 %14, 100, !dbg !14
  %32 = icmp slt i32 %15, 100, !dbg !14
  %33 = icmp slt i32 %16, 100, !dbg !14
  %34 = icmp slt i32 %17, 100, !dbg !14
  %35 = icmp slt i32 %18, 100, !dbg !14
  %36 = icmp slt i32 %19, 100, !dbg !14
  %37 = icmp slt i32 %20, 100, !dbg !14
  %38 = icmp slt i32 %21, 100, !dbg !14
  %39 = icmp slt i32 %22, 100, !dbg !14
  %40 = icmp slt i32 %23, 100, !dbg !14
  %41 = icmp slt i32 %24, 100, !dbg !14
  %42 = icmp slt i32 %25, 100, !dbg !14
  %43 = icmp slt i32 %26, 100, !dbg !14
  %44 = icmp slt i32 %7, 0, !dbg !14
  %45 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %46 = shl i32 %45, 5, !dbg !16
  %47 = shl i32 %8, 4, !dbg !17
  %48 = and i32 %47, 16, !dbg !17
  %49 = and i32 %8, 31, !dbg !17
  %50 = or disjoint i32 %46, %48, !dbg !18
  %51 = or disjoint i32 %50, 4, !dbg !18
  %52 = or disjoint i32 %50, 8, !dbg !18
  %53 = or disjoint i32 %50, 12, !dbg !18
  %54 = or disjoint i32 %46, %49, !dbg !18
  %55 = icmp slt i32 %50, 192, !dbg !19
  %56 = icmp slt i32 %54, 192, !dbg !19
  %.frozen = freeze i32 %13, !dbg !20
  %57 = sdiv i32 %.frozen, 5, !dbg !20
  %58 = mul i32 %57, 5, !dbg !21
  %.decomposed = sub i32 %.frozen, %58, !dbg !21
  %59 = srem i32 %57, 5, !dbg !22
  %60 = sdiv i32 %13, 25, !dbg !23
  %.frozen31 = freeze i32 %14, !dbg !23
  %61 = sdiv i32 %.frozen31, 25, !dbg !23
  %.frozen33 = freeze i32 %15, !dbg !23
  %62 = sdiv i32 %.frozen33, 25, !dbg !23
  %.frozen35 = freeze i32 %16, !dbg !23
  %63 = sdiv i32 %.frozen35, 25, !dbg !23
  %.frozen37 = freeze i32 %17, !dbg !23
  %64 = sdiv i32 %.frozen37, 25, !dbg !23
  %.frozen39 = freeze i32 %18, !dbg !23
  %65 = sdiv i32 %.frozen39, 25, !dbg !23
  %.frozen41 = freeze i32 %19, !dbg !23
  %66 = sdiv i32 %.frozen41, 25, !dbg !23
  %.frozen43 = freeze i32 %20, !dbg !23
  %67 = sdiv i32 %.frozen43, 25, !dbg !23
  %.frozen45 = freeze i32 %21, !dbg !23
  %68 = sdiv i32 %.frozen45, 25, !dbg !23
  %.frozen47 = freeze i32 %22, !dbg !23
  %69 = sdiv i32 %.frozen47, 25, !dbg !23
  %.frozen49 = freeze i32 %23, !dbg !23
  %70 = sdiv i32 %.frozen49, 25, !dbg !23
  %.frozen51 = freeze i32 %24, !dbg !23
  %71 = sdiv i32 %.frozen51, 25, !dbg !23
  %.frozen53 = freeze i32 %25, !dbg !23
  %72 = sdiv i32 %.frozen53, 25, !dbg !23
  %.frozen55 = freeze i32 %26, !dbg !23
  %73 = sdiv i32 %.frozen55, 25, !dbg !23
  %.frozen57 = freeze i32 %27, !dbg !23
  %74 = sdiv i32 %.frozen57, 25, !dbg !23
  %.frozen59 = freeze i32 %28, !dbg !23
  %75 = sdiv i32 %.frozen59, 25, !dbg !23
  %.frozen61 = freeze i32 %29, !dbg !23
  %76 = sdiv i32 %.frozen61, 25, !dbg !23
  %77 = mul i32 %61, 25, !dbg !24
  %.decomposed32 = sub i32 %.frozen31, %77, !dbg !24
  %78 = mul i32 %62, 25, !dbg !24
  %.decomposed34 = sub i32 %.frozen33, %78, !dbg !24
  %79 = mul i32 %63, 25, !dbg !24
  %.decomposed36 = sub i32 %.frozen35, %79, !dbg !24
  %80 = mul i32 %64, 25, !dbg !24
  %.decomposed38 = sub i32 %.frozen37, %80, !dbg !24
  %81 = mul i32 %65, 25, !dbg !24
  %.decomposed40 = sub i32 %.frozen39, %81, !dbg !24
  %82 = mul i32 %66, 25, !dbg !24
  %.decomposed42 = sub i32 %.frozen41, %82, !dbg !24
  %83 = mul i32 %67, 25, !dbg !24
  %.decomposed44 = sub i32 %.frozen43, %83, !dbg !24
  %84 = mul i32 %68, 25, !dbg !24
  %.decomposed46 = sub i32 %.frozen45, %84, !dbg !24
  %85 = mul i32 %69, 25, !dbg !24
  %.decomposed48 = sub i32 %.frozen47, %85, !dbg !24
  %86 = mul i32 %70, 25, !dbg !24
  %.decomposed50 = sub i32 %.frozen49, %86, !dbg !24
  %87 = mul i32 %71, 25, !dbg !24
  %.decomposed52 = sub i32 %.frozen51, %87, !dbg !24
  %88 = mul i32 %72, 25, !dbg !24
  %.decomposed54 = sub i32 %.frozen53, %88, !dbg !24
  %89 = mul i32 %73, 25, !dbg !24
  %.decomposed56 = sub i32 %.frozen55, %89, !dbg !24
  %90 = mul i32 %74, 25, !dbg !24
  %.decomposed58 = sub i32 %.frozen57, %90, !dbg !24
  %91 = mul i32 %75, 25, !dbg !24
  %.decomposed60 = sub i32 %.frozen59, %91, !dbg !24
  %92 = mul i32 %76, 25, !dbg !24
  %.decomposed62 = sub i32 %.frozen61, %92, !dbg !24
  %93 = mul nsw i32 %.decomposed, 384, !dbg !25
  %94 = mul nsw i32 %59, 4608, !dbg !26
  %95 = mul i32 %60, 27648, !dbg !27
  %96 = add i32 %95, %93, !dbg !28
  %97 = add i32 %96, %50, !dbg !29
  %98 = add i32 %97, %94, !dbg !30
  %99 = add i32 %96, %51, !dbg !29
  %100 = add i32 %99, %94, !dbg !30
  %101 = add i32 %96, %52, !dbg !29
  %102 = add i32 %101, %94, !dbg !30
  %103 = add i32 %96, %53, !dbg !29
  %104 = add i32 %103, %94, !dbg !30
  %105 = sext i32 %98 to i64, !dbg !31
  %106 = getelementptr float, ptr addrspace(1) %0, i64 %105, !dbg !31
  %107 = sext i32 %100 to i64, !dbg !31
  %108 = getelementptr float, ptr addrspace(1) %0, i64 %107, !dbg !31
  %109 = sext i32 %102 to i64, !dbg !31
  %110 = getelementptr float, ptr addrspace(1) %0, i64 %109, !dbg !31
  %111 = sext i32 %104 to i64, !dbg !31
  %112 = getelementptr float, ptr addrspace(1) %0, i64 %111, !dbg !31
  %113 = and i1 %30, %55, !dbg !32
  %114 = and i1 %31, %56, !dbg !32
  %115 = and i1 %32, %56, !dbg !32
  %116 = and i1 %33, %56, !dbg !32
  %117 = and i1 %34, %56, !dbg !32
  %118 = and i1 %35, %56, !dbg !32
  %119 = and i1 %36, %56, !dbg !32
  %120 = and i1 %37, %56, !dbg !32
  %121 = and i1 %38, %56, !dbg !32
  %122 = and i1 %39, %56, !dbg !32
  %123 = and i1 %40, %56, !dbg !32
  %124 = and i1 %41, %56, !dbg !32
  %125 = and i1 %42, %56, !dbg !32
  %126 = and i1 %43, %56, !dbg !32
  %127 = and i1 %44, %56, !dbg !32
  %128 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %106, i1 %113) #2, !dbg !33
  %129 = extractvalue { i32, i32, i32, i32 } %128, 0, !dbg !33
  %130 = extractvalue { i32, i32, i32, i32 } %128, 1, !dbg !33
  %131 = extractvalue { i32, i32, i32, i32 } %128, 2, !dbg !33
  %132 = extractvalue { i32, i32, i32, i32 } %128, 3, !dbg !33
  %133 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %108, i1 %113) #2, !dbg !33
  %134 = extractvalue { i32, i32, i32, i32 } %133, 0, !dbg !33
  %135 = extractvalue { i32, i32, i32, i32 } %133, 1, !dbg !33
  %136 = extractvalue { i32, i32, i32, i32 } %133, 2, !dbg !33
  %137 = extractvalue { i32, i32, i32, i32 } %133, 3, !dbg !33
  %138 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %110, i1 %113) #2, !dbg !33
  %139 = extractvalue { i32, i32, i32, i32 } %138, 0, !dbg !33
  %140 = extractvalue { i32, i32, i32, i32 } %138, 1, !dbg !33
  %141 = extractvalue { i32, i32, i32, i32 } %138, 2, !dbg !33
  %142 = extractvalue { i32, i32, i32, i32 } %138, 3, !dbg !33
  %143 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %112, i1 %113) #2, !dbg !33
  %144 = extractvalue { i32, i32, i32, i32 } %143, 0, !dbg !33
  %145 = extractvalue { i32, i32, i32, i32 } %143, 1, !dbg !33
  %146 = extractvalue { i32, i32, i32, i32 } %143, 2, !dbg !33
  %147 = extractvalue { i32, i32, i32, i32 } %143, 3, !dbg !33
  %148 = add i32 %96, 192, !dbg !34
  %149 = add i32 %148, %50, !dbg !35
  %150 = add i32 %149, %94, !dbg !36
  %151 = add i32 %148, %51, !dbg !35
  %152 = add i32 %151, %94, !dbg !36
  %153 = add i32 %148, %52, !dbg !35
  %154 = add i32 %153, %94, !dbg !36
  %155 = add i32 %148, %53, !dbg !35
  %156 = add i32 %155, %94, !dbg !36
  %157 = sext i32 %150 to i64, !dbg !37
  %158 = getelementptr float, ptr addrspace(1) %0, i64 %157, !dbg !37
  %159 = sext i32 %152 to i64, !dbg !37
  %160 = getelementptr float, ptr addrspace(1) %0, i64 %159, !dbg !37
  %161 = sext i32 %154 to i64, !dbg !37
  %162 = getelementptr float, ptr addrspace(1) %0, i64 %161, !dbg !37
  %163 = sext i32 %156 to i64, !dbg !37
  %164 = getelementptr float, ptr addrspace(1) %0, i64 %163, !dbg !37
  %165 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %158, i1 %113) #2, !dbg !38
  %166 = extractvalue { i32, i32, i32, i32 } %165, 0, !dbg !38
  %167 = extractvalue { i32, i32, i32, i32 } %165, 1, !dbg !38
  %168 = extractvalue { i32, i32, i32, i32 } %165, 2, !dbg !38
  %169 = extractvalue { i32, i32, i32, i32 } %165, 3, !dbg !38
  %170 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %160, i1 %113) #2, !dbg !38
  %171 = extractvalue { i32, i32, i32, i32 } %170, 0, !dbg !38
  %172 = extractvalue { i32, i32, i32, i32 } %170, 1, !dbg !38
  %173 = extractvalue { i32, i32, i32, i32 } %170, 2, !dbg !38
  %174 = extractvalue { i32, i32, i32, i32 } %170, 3, !dbg !38
  %175 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %162, i1 %113) #2, !dbg !38
  %176 = extractvalue { i32, i32, i32, i32 } %175, 0, !dbg !38
  %177 = extractvalue { i32, i32, i32, i32 } %175, 1, !dbg !38
  %178 = extractvalue { i32, i32, i32, i32 } %175, 2, !dbg !38
  %179 = extractvalue { i32, i32, i32, i32 } %175, 3, !dbg !38
  %180 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %164, i1 %113) #2, !dbg !38
  %181 = extractvalue { i32, i32, i32, i32 } %180, 0, !dbg !38
  %182 = extractvalue { i32, i32, i32, i32 } %180, 1, !dbg !38
  %183 = extractvalue { i32, i32, i32, i32 } %180, 2, !dbg !38
  %184 = extractvalue { i32, i32, i32, i32 } %180, 3, !dbg !38
  %185 = add i32 %96, 384, !dbg !39
  %186 = add i32 %185, %50, !dbg !40
  %187 = add i32 %186, %94, !dbg !41
  %188 = add i32 %185, %51, !dbg !40
  %189 = add i32 %188, %94, !dbg !41
  %190 = add i32 %185, %52, !dbg !40
  %191 = add i32 %190, %94, !dbg !41
  %192 = add i32 %185, %53, !dbg !40
  %193 = add i32 %192, %94, !dbg !41
  %194 = sext i32 %187 to i64, !dbg !42
  %195 = getelementptr float, ptr addrspace(1) %0, i64 %194, !dbg !42
  %196 = sext i32 %189 to i64, !dbg !42
  %197 = getelementptr float, ptr addrspace(1) %0, i64 %196, !dbg !42
  %198 = sext i32 %191 to i64, !dbg !42
  %199 = getelementptr float, ptr addrspace(1) %0, i64 %198, !dbg !42
  %200 = sext i32 %193 to i64, !dbg !42
  %201 = getelementptr float, ptr addrspace(1) %0, i64 %200, !dbg !42
  %202 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %195, i1 %113) #2, !dbg !43
  %203 = extractvalue { i32, i32, i32, i32 } %202, 0, !dbg !43
  %204 = extractvalue { i32, i32, i32, i32 } %202, 1, !dbg !43
  %205 = extractvalue { i32, i32, i32, i32 } %202, 2, !dbg !43
  %206 = extractvalue { i32, i32, i32, i32 } %202, 3, !dbg !43
  %207 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %197, i1 %113) #2, !dbg !43
  %208 = extractvalue { i32, i32, i32, i32 } %207, 0, !dbg !43
  %209 = extractvalue { i32, i32, i32, i32 } %207, 1, !dbg !43
  %210 = extractvalue { i32, i32, i32, i32 } %207, 2, !dbg !43
  %211 = extractvalue { i32, i32, i32, i32 } %207, 3, !dbg !43
  %212 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %199, i1 %113) #2, !dbg !43
  %213 = extractvalue { i32, i32, i32, i32 } %212, 0, !dbg !43
  %214 = extractvalue { i32, i32, i32, i32 } %212, 1, !dbg !43
  %215 = extractvalue { i32, i32, i32, i32 } %212, 2, !dbg !43
  %216 = extractvalue { i32, i32, i32, i32 } %212, 3, !dbg !43
  %217 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %201, i1 %113) #2, !dbg !43
  %218 = extractvalue { i32, i32, i32, i32 } %217, 0, !dbg !43
  %219 = extractvalue { i32, i32, i32, i32 } %217, 1, !dbg !43
  %220 = extractvalue { i32, i32, i32, i32 } %217, 2, !dbg !43
  %221 = extractvalue { i32, i32, i32, i32 } %217, 3, !dbg !43
  %222 = add i32 %96, 2304, !dbg !44
  %223 = add i32 %222, %50, !dbg !45
  %224 = add i32 %223, %94, !dbg !46
  %225 = add i32 %222, %51, !dbg !45
  %226 = add i32 %225, %94, !dbg !46
  %227 = add i32 %222, %52, !dbg !45
  %228 = add i32 %227, %94, !dbg !46
  %229 = add i32 %222, %53, !dbg !45
  %230 = add i32 %229, %94, !dbg !46
  %231 = sext i32 %224 to i64, !dbg !47
  %232 = getelementptr float, ptr addrspace(1) %0, i64 %231, !dbg !47
  %233 = sext i32 %226 to i64, !dbg !47
  %234 = getelementptr float, ptr addrspace(1) %0, i64 %233, !dbg !47
  %235 = sext i32 %228 to i64, !dbg !47
  %236 = getelementptr float, ptr addrspace(1) %0, i64 %235, !dbg !47
  %237 = sext i32 %230 to i64, !dbg !47
  %238 = getelementptr float, ptr addrspace(1) %0, i64 %237, !dbg !47
  %239 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %232, i1 %113) #2, !dbg !48
  %240 = extractvalue { i32, i32, i32, i32 } %239, 0, !dbg !48
  %241 = extractvalue { i32, i32, i32, i32 } %239, 1, !dbg !48
  %242 = extractvalue { i32, i32, i32, i32 } %239, 2, !dbg !48
  %243 = extractvalue { i32, i32, i32, i32 } %239, 3, !dbg !48
  %244 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %234, i1 %113) #2, !dbg !48
  %245 = extractvalue { i32, i32, i32, i32 } %244, 0, !dbg !48
  %246 = extractvalue { i32, i32, i32, i32 } %244, 1, !dbg !48
  %247 = extractvalue { i32, i32, i32, i32 } %244, 2, !dbg !48
  %248 = extractvalue { i32, i32, i32, i32 } %244, 3, !dbg !48
  %249 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %236, i1 %113) #2, !dbg !48
  %250 = extractvalue { i32, i32, i32, i32 } %249, 0, !dbg !48
  %251 = extractvalue { i32, i32, i32, i32 } %249, 1, !dbg !48
  %252 = extractvalue { i32, i32, i32, i32 } %249, 2, !dbg !48
  %253 = extractvalue { i32, i32, i32, i32 } %249, 3, !dbg !48
  %254 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %238, i1 %113) #2, !dbg !48
  %255 = extractvalue { i32, i32, i32, i32 } %254, 0, !dbg !48
  %256 = extractvalue { i32, i32, i32, i32 } %254, 1, !dbg !48
  %257 = extractvalue { i32, i32, i32, i32 } %254, 2, !dbg !48
  %258 = extractvalue { i32, i32, i32, i32 } %254, 3, !dbg !48
  %259 = add i32 %96, 2496, !dbg !49
  %260 = add i32 %259, %50, !dbg !50
  %261 = add i32 %260, %94, !dbg !51
  %262 = add i32 %259, %51, !dbg !50
  %263 = add i32 %262, %94, !dbg !51
  %264 = add i32 %259, %52, !dbg !50
  %265 = add i32 %264, %94, !dbg !51
  %266 = add i32 %259, %53, !dbg !50
  %267 = add i32 %266, %94, !dbg !51
  %268 = sext i32 %261 to i64, !dbg !52
  %269 = getelementptr float, ptr addrspace(1) %0, i64 %268, !dbg !52
  %270 = sext i32 %263 to i64, !dbg !52
  %271 = getelementptr float, ptr addrspace(1) %0, i64 %270, !dbg !52
  %272 = sext i32 %265 to i64, !dbg !52
  %273 = getelementptr float, ptr addrspace(1) %0, i64 %272, !dbg !52
  %274 = sext i32 %267 to i64, !dbg !52
  %275 = getelementptr float, ptr addrspace(1) %0, i64 %274, !dbg !52
  %276 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %269, i1 %113) #2, !dbg !53
  %277 = extractvalue { i32, i32, i32, i32 } %276, 0, !dbg !53
  %278 = extractvalue { i32, i32, i32, i32 } %276, 1, !dbg !53
  %279 = extractvalue { i32, i32, i32, i32 } %276, 2, !dbg !53
  %280 = extractvalue { i32, i32, i32, i32 } %276, 3, !dbg !53
  %281 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %271, i1 %113) #2, !dbg !53
  %282 = extractvalue { i32, i32, i32, i32 } %281, 0, !dbg !53
  %283 = extractvalue { i32, i32, i32, i32 } %281, 1, !dbg !53
  %284 = extractvalue { i32, i32, i32, i32 } %281, 2, !dbg !53
  %285 = extractvalue { i32, i32, i32, i32 } %281, 3, !dbg !53
  %286 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %273, i1 %113) #2, !dbg !53
  %287 = extractvalue { i32, i32, i32, i32 } %286, 0, !dbg !53
  %288 = extractvalue { i32, i32, i32, i32 } %286, 1, !dbg !53
  %289 = extractvalue { i32, i32, i32, i32 } %286, 2, !dbg !53
  %290 = extractvalue { i32, i32, i32, i32 } %286, 3, !dbg !53
  %291 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %275, i1 %113) #2, !dbg !53
  %292 = extractvalue { i32, i32, i32, i32 } %291, 0, !dbg !53
  %293 = extractvalue { i32, i32, i32, i32 } %291, 1, !dbg !53
  %294 = extractvalue { i32, i32, i32, i32 } %291, 2, !dbg !53
  %295 = extractvalue { i32, i32, i32, i32 } %291, 3, !dbg !53
  %296 = add i32 %96, 2688, !dbg !54
  %297 = add i32 %296, %50, !dbg !55
  %298 = add i32 %297, %94, !dbg !56
  %299 = add i32 %296, %51, !dbg !55
  %300 = add i32 %299, %94, !dbg !56
  %301 = add i32 %296, %52, !dbg !55
  %302 = add i32 %301, %94, !dbg !56
  %303 = add i32 %296, %53, !dbg !55
  %304 = add i32 %303, %94, !dbg !56
  %305 = sext i32 %298 to i64, !dbg !57
  %306 = getelementptr float, ptr addrspace(1) %0, i64 %305, !dbg !57
  %307 = sext i32 %300 to i64, !dbg !57
  %308 = getelementptr float, ptr addrspace(1) %0, i64 %307, !dbg !57
  %309 = sext i32 %302 to i64, !dbg !57
  %310 = getelementptr float, ptr addrspace(1) %0, i64 %309, !dbg !57
  %311 = sext i32 %304 to i64, !dbg !57
  %312 = getelementptr float, ptr addrspace(1) %0, i64 %311, !dbg !57
  %313 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %306, i1 %113) #2, !dbg !58
  %314 = extractvalue { i32, i32, i32, i32 } %313, 0, !dbg !58
  %315 = extractvalue { i32, i32, i32, i32 } %313, 1, !dbg !58
  %316 = extractvalue { i32, i32, i32, i32 } %313, 2, !dbg !58
  %317 = extractvalue { i32, i32, i32, i32 } %313, 3, !dbg !58
  %318 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %308, i1 %113) #2, !dbg !58
  %319 = extractvalue { i32, i32, i32, i32 } %318, 0, !dbg !58
  %320 = extractvalue { i32, i32, i32, i32 } %318, 1, !dbg !58
  %321 = extractvalue { i32, i32, i32, i32 } %318, 2, !dbg !58
  %322 = extractvalue { i32, i32, i32, i32 } %318, 3, !dbg !58
  %323 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %310, i1 %113) #2, !dbg !58
  %324 = extractvalue { i32, i32, i32, i32 } %323, 0, !dbg !58
  %325 = extractvalue { i32, i32, i32, i32 } %323, 1, !dbg !58
  %326 = extractvalue { i32, i32, i32, i32 } %323, 2, !dbg !58
  %327 = extractvalue { i32, i32, i32, i32 } %323, 3, !dbg !58
  %328 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %312, i1 %113) #2, !dbg !58
  %329 = extractvalue { i32, i32, i32, i32 } %328, 0, !dbg !58
  %330 = extractvalue { i32, i32, i32, i32 } %328, 1, !dbg !58
  %331 = extractvalue { i32, i32, i32, i32 } %328, 2, !dbg !58
  %332 = extractvalue { i32, i32, i32, i32 } %328, 3, !dbg !58
  %333 = add i32 %96, 4608, !dbg !59
  %334 = add i32 %333, %50, !dbg !60
  %335 = add i32 %334, %94, !dbg !61
  %336 = add i32 %333, %51, !dbg !60
  %337 = add i32 %336, %94, !dbg !61
  %338 = add i32 %333, %52, !dbg !60
  %339 = add i32 %338, %94, !dbg !61
  %340 = add i32 %333, %53, !dbg !60
  %341 = add i32 %340, %94, !dbg !61
  %342 = sext i32 %335 to i64, !dbg !62
  %343 = getelementptr float, ptr addrspace(1) %0, i64 %342, !dbg !62
  %344 = sext i32 %337 to i64, !dbg !62
  %345 = getelementptr float, ptr addrspace(1) %0, i64 %344, !dbg !62
  %346 = sext i32 %339 to i64, !dbg !62
  %347 = getelementptr float, ptr addrspace(1) %0, i64 %346, !dbg !62
  %348 = sext i32 %341 to i64, !dbg !62
  %349 = getelementptr float, ptr addrspace(1) %0, i64 %348, !dbg !62
  %350 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %343, i1 %113) #2, !dbg !63
  %351 = extractvalue { i32, i32, i32, i32 } %350, 0, !dbg !63
  %352 = extractvalue { i32, i32, i32, i32 } %350, 1, !dbg !63
  %353 = extractvalue { i32, i32, i32, i32 } %350, 2, !dbg !63
  %354 = extractvalue { i32, i32, i32, i32 } %350, 3, !dbg !63
  %355 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %345, i1 %113) #2, !dbg !63
  %356 = extractvalue { i32, i32, i32, i32 } %355, 0, !dbg !63
  %357 = extractvalue { i32, i32, i32, i32 } %355, 1, !dbg !63
  %358 = extractvalue { i32, i32, i32, i32 } %355, 2, !dbg !63
  %359 = extractvalue { i32, i32, i32, i32 } %355, 3, !dbg !63
  %360 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %347, i1 %113) #2, !dbg !63
  %361 = extractvalue { i32, i32, i32, i32 } %360, 0, !dbg !63
  %362 = extractvalue { i32, i32, i32, i32 } %360, 1, !dbg !63
  %363 = extractvalue { i32, i32, i32, i32 } %360, 2, !dbg !63
  %364 = extractvalue { i32, i32, i32, i32 } %360, 3, !dbg !63
  %365 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %349, i1 %113) #2, !dbg !63
  %366 = extractvalue { i32, i32, i32, i32 } %365, 0, !dbg !63
  %367 = extractvalue { i32, i32, i32, i32 } %365, 1, !dbg !63
  %368 = extractvalue { i32, i32, i32, i32 } %365, 2, !dbg !63
  %369 = extractvalue { i32, i32, i32, i32 } %365, 3, !dbg !63
  %370 = add i32 %96, 4800, !dbg !64
  %371 = add i32 %370, %50, !dbg !65
  %372 = add i32 %371, %94, !dbg !66
  %373 = add i32 %370, %51, !dbg !65
  %374 = add i32 %373, %94, !dbg !66
  %375 = add i32 %370, %52, !dbg !65
  %376 = add i32 %375, %94, !dbg !66
  %377 = add i32 %370, %53, !dbg !65
  %378 = add i32 %377, %94, !dbg !66
  %379 = sext i32 %372 to i64, !dbg !67
  %380 = getelementptr float, ptr addrspace(1) %0, i64 %379, !dbg !67
  %381 = sext i32 %374 to i64, !dbg !67
  %382 = getelementptr float, ptr addrspace(1) %0, i64 %381, !dbg !67
  %383 = sext i32 %376 to i64, !dbg !67
  %384 = getelementptr float, ptr addrspace(1) %0, i64 %383, !dbg !67
  %385 = sext i32 %378 to i64, !dbg !67
  %386 = getelementptr float, ptr addrspace(1) %0, i64 %385, !dbg !67
  %387 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %380, i1 %113) #2, !dbg !68
  %388 = extractvalue { i32, i32, i32, i32 } %387, 0, !dbg !68
  %389 = extractvalue { i32, i32, i32, i32 } %387, 1, !dbg !68
  %390 = extractvalue { i32, i32, i32, i32 } %387, 2, !dbg !68
  %391 = extractvalue { i32, i32, i32, i32 } %387, 3, !dbg !68
  %392 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %382, i1 %113) #2, !dbg !68
  %393 = extractvalue { i32, i32, i32, i32 } %392, 0, !dbg !68
  %394 = extractvalue { i32, i32, i32, i32 } %392, 1, !dbg !68
  %395 = extractvalue { i32, i32, i32, i32 } %392, 2, !dbg !68
  %396 = extractvalue { i32, i32, i32, i32 } %392, 3, !dbg !68
  %397 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %384, i1 %113) #2, !dbg !68
  %398 = extractvalue { i32, i32, i32, i32 } %397, 0, !dbg !68
  %399 = extractvalue { i32, i32, i32, i32 } %397, 1, !dbg !68
  %400 = extractvalue { i32, i32, i32, i32 } %397, 2, !dbg !68
  %401 = extractvalue { i32, i32, i32, i32 } %397, 3, !dbg !68
  %402 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %386, i1 %113) #2, !dbg !68
  %403 = extractvalue { i32, i32, i32, i32 } %402, 0, !dbg !68
  %404 = extractvalue { i32, i32, i32, i32 } %402, 1, !dbg !68
  %405 = extractvalue { i32, i32, i32, i32 } %402, 2, !dbg !68
  %406 = extractvalue { i32, i32, i32, i32 } %402, 3, !dbg !68
  %407 = add i32 %96, 4992, !dbg !69
  %408 = add i32 %407, %50, !dbg !70
  %409 = add i32 %408, %94, !dbg !71
  %410 = add i32 %407, %51, !dbg !70
  %411 = add i32 %410, %94, !dbg !71
  %412 = add i32 %407, %52, !dbg !70
  %413 = add i32 %412, %94, !dbg !71
  %414 = add i32 %407, %53, !dbg !70
  %415 = add i32 %414, %94, !dbg !71
  %416 = sext i32 %409 to i64, !dbg !72
  %417 = getelementptr float, ptr addrspace(1) %0, i64 %416, !dbg !72
  %418 = sext i32 %411 to i64, !dbg !72
  %419 = getelementptr float, ptr addrspace(1) %0, i64 %418, !dbg !72
  %420 = sext i32 %413 to i64, !dbg !72
  %421 = getelementptr float, ptr addrspace(1) %0, i64 %420, !dbg !72
  %422 = sext i32 %415 to i64, !dbg !72
  %423 = getelementptr float, ptr addrspace(1) %0, i64 %422, !dbg !72
  %424 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %417, i1 %113) #2, !dbg !73
  %425 = extractvalue { i32, i32, i32, i32 } %424, 0, !dbg !73
  %426 = extractvalue { i32, i32, i32, i32 } %424, 1, !dbg !73
  %427 = extractvalue { i32, i32, i32, i32 } %424, 2, !dbg !73
  %428 = extractvalue { i32, i32, i32, i32 } %424, 3, !dbg !73
  %429 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %419, i1 %113) #2, !dbg !73
  %430 = extractvalue { i32, i32, i32, i32 } %429, 0, !dbg !73
  %431 = extractvalue { i32, i32, i32, i32 } %429, 1, !dbg !73
  %432 = extractvalue { i32, i32, i32, i32 } %429, 2, !dbg !73
  %433 = extractvalue { i32, i32, i32, i32 } %429, 3, !dbg !73
  %434 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %421, i1 %113) #2, !dbg !73
  %435 = extractvalue { i32, i32, i32, i32 } %434, 0, !dbg !73
  %436 = extractvalue { i32, i32, i32, i32 } %434, 1, !dbg !73
  %437 = extractvalue { i32, i32, i32, i32 } %434, 2, !dbg !73
  %438 = extractvalue { i32, i32, i32, i32 } %434, 3, !dbg !73
  %439 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %423, i1 %113) #2, !dbg !73
  %440 = extractvalue { i32, i32, i32, i32 } %439, 0, !dbg !73
  %441 = extractvalue { i32, i32, i32, i32 } %439, 1, !dbg !73
  %442 = extractvalue { i32, i32, i32, i32 } %439, 2, !dbg !73
  %443 = extractvalue { i32, i32, i32, i32 } %439, 3, !dbg !73
  %444 = insertelement <4 x i32> poison, i32 %129, i64 0, !dbg !33
  %445 = insertelement <4 x i32> %444, i32 %130, i64 1, !dbg !33
  %446 = insertelement <4 x i32> %445, i32 %131, i64 2, !dbg !33
  %447 = insertelement <4 x i32> %446, i32 %132, i64 3, !dbg !33
  %448 = bitcast <4 x i32> %447 to <4 x float>, !dbg !33
  %449 = insertelement <4 x i32> poison, i32 %166, i64 0, !dbg !38
  %450 = insertelement <4 x i32> %449, i32 %167, i64 1, !dbg !38
  %451 = insertelement <4 x i32> %450, i32 %168, i64 2, !dbg !38
  %452 = insertelement <4 x i32> %451, i32 %169, i64 3, !dbg !38
  %453 = bitcast <4 x i32> %452 to <4 x float>, !dbg !38
  %454 = insertelement <4 x i32> poison, i32 %203, i64 0, !dbg !43
  %455 = insertelement <4 x i32> %454, i32 %204, i64 1, !dbg !43
  %456 = insertelement <4 x i32> %455, i32 %205, i64 2, !dbg !43
  %457 = insertelement <4 x i32> %456, i32 %206, i64 3, !dbg !43
  %458 = bitcast <4 x i32> %457 to <4 x float>, !dbg !43
  %459 = insertelement <4 x i32> poison, i32 %240, i64 0, !dbg !48
  %460 = insertelement <4 x i32> %459, i32 %241, i64 1, !dbg !48
  %461 = insertelement <4 x i32> %460, i32 %242, i64 2, !dbg !48
  %462 = insertelement <4 x i32> %461, i32 %243, i64 3, !dbg !48
  %463 = bitcast <4 x i32> %462 to <4 x float>, !dbg !48
  %464 = insertelement <4 x i32> poison, i32 %277, i64 0, !dbg !53
  %465 = insertelement <4 x i32> %464, i32 %278, i64 1, !dbg !53
  %466 = insertelement <4 x i32> %465, i32 %279, i64 2, !dbg !53
  %467 = insertelement <4 x i32> %466, i32 %280, i64 3, !dbg !53
  %468 = bitcast <4 x i32> %467 to <4 x float>, !dbg !53
  %469 = insertelement <4 x i32> poison, i32 %314, i64 0, !dbg !58
  %470 = insertelement <4 x i32> %469, i32 %315, i64 1, !dbg !58
  %471 = insertelement <4 x i32> %470, i32 %316, i64 2, !dbg !58
  %472 = insertelement <4 x i32> %471, i32 %317, i64 3, !dbg !58
  %473 = bitcast <4 x i32> %472 to <4 x float>, !dbg !58
  %474 = insertelement <4 x i32> poison, i32 %351, i64 0, !dbg !63
  %475 = insertelement <4 x i32> %474, i32 %352, i64 1, !dbg !63
  %476 = insertelement <4 x i32> %475, i32 %353, i64 2, !dbg !63
  %477 = insertelement <4 x i32> %476, i32 %354, i64 3, !dbg !63
  %478 = bitcast <4 x i32> %477 to <4 x float>, !dbg !63
  %479 = insertelement <4 x i32> poison, i32 %388, i64 0, !dbg !68
  %480 = insertelement <4 x i32> %479, i32 %389, i64 1, !dbg !68
  %481 = insertelement <4 x i32> %480, i32 %390, i64 2, !dbg !68
  %482 = insertelement <4 x i32> %481, i32 %391, i64 3, !dbg !68
  %483 = bitcast <4 x i32> %482 to <4 x float>, !dbg !68
  %484 = insertelement <4 x i32> poison, i32 %425, i64 0, !dbg !73
  %485 = insertelement <4 x i32> %484, i32 %426, i64 1, !dbg !73
  %486 = insertelement <4 x i32> %485, i32 %427, i64 2, !dbg !73
  %487 = insertelement <4 x i32> %486, i32 %428, i64 3, !dbg !73
  %488 = bitcast <4 x i32> %487 to <4 x float>, !dbg !73
  %489 = fcmp ogt <4 x float> %453, %448, !dbg !74
  %490 = fcmp uno <4 x float> %453, zeroinitializer, !dbg !78
  %491 = or <4 x i1> %489, %490, !dbg !79
  %.v = select <4 x i1> %491, <4 x i32> %452, <4 x i32> %447, !dbg !80
  %492 = bitcast <4 x i32> %.v to <4 x float>, !dbg !80
  %493 = fcmp olt <4 x float> %492, %458, !dbg !81
  %494 = fcmp uno <4 x float> %458, zeroinitializer, !dbg !83
  %495 = or <4 x i1> %493, %494, !dbg !84
  %.v4 = select <4 x i1> %495, <4 x i32> %457, <4 x i32> %.v, !dbg !85
  %496 = bitcast <4 x i32> %.v4 to <4 x float>, !dbg !85
  %497 = fcmp olt <4 x float> %496, %463, !dbg !86
  %498 = fcmp uno <4 x float> %463, zeroinitializer, !dbg !88
  %499 = or <4 x i1> %497, %498, !dbg !89
  %.v5 = select <4 x i1> %499, <4 x i32> %462, <4 x i32> %.v4, !dbg !90
  %500 = bitcast <4 x i32> %.v5 to <4 x float>, !dbg !90
  %501 = fcmp olt <4 x float> %500, %468, !dbg !91
  %502 = fcmp uno <4 x float> %468, zeroinitializer, !dbg !93
  %503 = or <4 x i1> %501, %502, !dbg !94
  %.v6 = select <4 x i1> %503, <4 x i32> %467, <4 x i32> %.v5, !dbg !95
  %504 = bitcast <4 x i32> %.v6 to <4 x float>, !dbg !95
  %505 = fcmp olt <4 x float> %504, %473, !dbg !96
  %506 = fcmp uno <4 x float> %473, zeroinitializer, !dbg !98
  %507 = or <4 x i1> %505, %506, !dbg !99
  %.v7 = select <4 x i1> %507, <4 x i32> %472, <4 x i32> %.v6, !dbg !100
  %508 = bitcast <4 x i32> %.v7 to <4 x float>, !dbg !100
  %509 = fcmp olt <4 x float> %508, %478, !dbg !101
  %510 = fcmp uno <4 x float> %478, zeroinitializer, !dbg !103
  %511 = or <4 x i1> %509, %510, !dbg !104
  %.v8 = select <4 x i1> %511, <4 x i32> %477, <4 x i32> %.v7, !dbg !105
  %512 = bitcast <4 x i32> %.v8 to <4 x float>, !dbg !105
  %513 = fcmp olt <4 x float> %512, %483, !dbg !106
  %514 = fcmp uno <4 x float> %483, zeroinitializer, !dbg !108
  %515 = or <4 x i1> %513, %514, !dbg !109
  %.v9 = select <4 x i1> %515, <4 x i32> %482, <4 x i32> %.v8, !dbg !110
  %516 = bitcast <4 x i32> %.v9 to <4 x float>, !dbg !110
  %517 = fcmp olt <4 x float> %516, %488, !dbg !111
  %518 = bitcast i32 %425 to float, !dbg !113
  %519 = fcmp uno float %518, 0.000000e+00, !dbg !113
  %520 = bitcast i32 %426 to float, !dbg !113
  %521 = fcmp uno float %520, 0.000000e+00, !dbg !113
  %522 = bitcast i32 %427 to float, !dbg !113
  %523 = fcmp uno float %522, 0.000000e+00, !dbg !113
  %524 = bitcast i32 %428 to float, !dbg !113
  %525 = fcmp uno float %524, 0.000000e+00, !dbg !113
  %526 = extractelement <4 x i1> %517, i64 0, !dbg !114
  %527 = or i1 %526, %519, !dbg !114
  %528 = extractelement <4 x i1> %517, i64 1, !dbg !114
  %529 = or i1 %528, %521, !dbg !114
  %530 = extractelement <4 x i1> %517, i64 2, !dbg !114
  %531 = or i1 %530, %523, !dbg !114
  %532 = extractelement <4 x i1> %517, i64 3, !dbg !114
  %533 = or i1 %532, %525, !dbg !114
  %534 = zext <4 x i1> %489 to <4 x i8>, !dbg !115
  %535 = select <4 x i1> %493, <4 x i8> splat (i8 2), <4 x i8> %534, !dbg !116
  %536 = select <4 x i1> %497, <4 x i8> splat (i8 3), <4 x i8> %535, !dbg !117
  %537 = select <4 x i1> %501, <4 x i8> splat (i8 4), <4 x i8> %536, !dbg !118
  %538 = select <4 x i1> %505, <4 x i8> splat (i8 5), <4 x i8> %537, !dbg !119
  %539 = select <4 x i1> %509, <4 x i8> splat (i8 6), <4 x i8> %538, !dbg !120
  %540 = select <4 x i1> %513, <4 x i8> splat (i8 7), <4 x i8> %539, !dbg !121
  %541 = select <4 x i1> %517, <4 x i8> splat (i8 8), <4 x i8> %540, !dbg !122
  %542 = insertelement <4 x i32> poison, i32 %134, i64 0, !dbg !33
  %543 = insertelement <4 x i32> %542, i32 %135, i64 1, !dbg !33
  %544 = insertelement <4 x i32> %543, i32 %136, i64 2, !dbg !33
  %545 = insertelement <4 x i32> %544, i32 %137, i64 3, !dbg !33
  %546 = bitcast <4 x i32> %545 to <4 x float>, !dbg !33
  %547 = insertelement <4 x i32> poison, i32 %171, i64 0, !dbg !38
  %548 = insertelement <4 x i32> %547, i32 %172, i64 1, !dbg !38
  %549 = insertelement <4 x i32> %548, i32 %173, i64 2, !dbg !38
  %550 = insertelement <4 x i32> %549, i32 %174, i64 3, !dbg !38
  %551 = bitcast <4 x i32> %550 to <4 x float>, !dbg !38
  %552 = insertelement <4 x i32> poison, i32 %208, i64 0, !dbg !43
  %553 = insertelement <4 x i32> %552, i32 %209, i64 1, !dbg !43
  %554 = insertelement <4 x i32> %553, i32 %210, i64 2, !dbg !43
  %555 = insertelement <4 x i32> %554, i32 %211, i64 3, !dbg !43
  %556 = bitcast <4 x i32> %555 to <4 x float>, !dbg !43
  %557 = insertelement <4 x i32> poison, i32 %245, i64 0, !dbg !48
  %558 = insertelement <4 x i32> %557, i32 %246, i64 1, !dbg !48
  %559 = insertelement <4 x i32> %558, i32 %247, i64 2, !dbg !48
  %560 = insertelement <4 x i32> %559, i32 %248, i64 3, !dbg !48
  %561 = bitcast <4 x i32> %560 to <4 x float>, !dbg !48
  %562 = insertelement <4 x i32> poison, i32 %282, i64 0, !dbg !53
  %563 = insertelement <4 x i32> %562, i32 %283, i64 1, !dbg !53
  %564 = insertelement <4 x i32> %563, i32 %284, i64 2, !dbg !53
  %565 = insertelement <4 x i32> %564, i32 %285, i64 3, !dbg !53
  %566 = bitcast <4 x i32> %565 to <4 x float>, !dbg !53
  %567 = insertelement <4 x i32> poison, i32 %319, i64 0, !dbg !58
  %568 = insertelement <4 x i32> %567, i32 %320, i64 1, !dbg !58
  %569 = insertelement <4 x i32> %568, i32 %321, i64 2, !dbg !58
  %570 = insertelement <4 x i32> %569, i32 %322, i64 3, !dbg !58
  %571 = bitcast <4 x i32> %570 to <4 x float>, !dbg !58
  %572 = insertelement <4 x i32> poison, i32 %356, i64 0, !dbg !63
  %573 = insertelement <4 x i32> %572, i32 %357, i64 1, !dbg !63
  %574 = insertelement <4 x i32> %573, i32 %358, i64 2, !dbg !63
  %575 = insertelement <4 x i32> %574, i32 %359, i64 3, !dbg !63
  %576 = bitcast <4 x i32> %575 to <4 x float>, !dbg !63
  %577 = insertelement <4 x i32> poison, i32 %393, i64 0, !dbg !68
  %578 = insertelement <4 x i32> %577, i32 %394, i64 1, !dbg !68
  %579 = insertelement <4 x i32> %578, i32 %395, i64 2, !dbg !68
  %580 = insertelement <4 x i32> %579, i32 %396, i64 3, !dbg !68
  %581 = bitcast <4 x i32> %580 to <4 x float>, !dbg !68
  %582 = insertelement <4 x i32> poison, i32 %430, i64 0, !dbg !73
  %583 = insertelement <4 x i32> %582, i32 %431, i64 1, !dbg !73
  %584 = insertelement <4 x i32> %583, i32 %432, i64 2, !dbg !73
  %585 = insertelement <4 x i32> %584, i32 %433, i64 3, !dbg !73
  %586 = bitcast <4 x i32> %585 to <4 x float>, !dbg !73
  %587 = fcmp ogt <4 x float> %551, %546, !dbg !74
  %588 = fcmp uno <4 x float> %551, zeroinitializer, !dbg !78
  %589 = or <4 x i1> %587, %588, !dbg !79
  %.v10 = select <4 x i1> %589, <4 x i32> %550, <4 x i32> %545, !dbg !80
  %590 = bitcast <4 x i32> %.v10 to <4 x float>, !dbg !80
  %591 = fcmp olt <4 x float> %590, %556, !dbg !81
  %592 = fcmp uno <4 x float> %556, zeroinitializer, !dbg !83
  %593 = or <4 x i1> %591, %592, !dbg !84
  %.v11 = select <4 x i1> %593, <4 x i32> %555, <4 x i32> %.v10, !dbg !85
  %594 = bitcast <4 x i32> %.v11 to <4 x float>, !dbg !85
  %595 = fcmp olt <4 x float> %594, %561, !dbg !86
  %596 = fcmp uno <4 x float> %561, zeroinitializer, !dbg !88
  %597 = or <4 x i1> %595, %596, !dbg !89
  %.v12 = select <4 x i1> %597, <4 x i32> %560, <4 x i32> %.v11, !dbg !90
  %598 = bitcast <4 x i32> %.v12 to <4 x float>, !dbg !90
  %599 = fcmp olt <4 x float> %598, %566, !dbg !91
  %600 = fcmp uno <4 x float> %566, zeroinitializer, !dbg !93
  %601 = or <4 x i1> %599, %600, !dbg !94
  %.v13 = select <4 x i1> %601, <4 x i32> %565, <4 x i32> %.v12, !dbg !95
  %602 = bitcast <4 x i32> %.v13 to <4 x float>, !dbg !95
  %603 = fcmp olt <4 x float> %602, %571, !dbg !96
  %604 = fcmp uno <4 x float> %571, zeroinitializer, !dbg !98
  %605 = or <4 x i1> %603, %604, !dbg !99
  %.v14 = select <4 x i1> %605, <4 x i32> %570, <4 x i32> %.v13, !dbg !100
  %606 = bitcast <4 x i32> %.v14 to <4 x float>, !dbg !100
  %607 = fcmp olt <4 x float> %606, %576, !dbg !101
  %608 = fcmp uno <4 x float> %576, zeroinitializer, !dbg !103
  %609 = or <4 x i1> %607, %608, !dbg !104
  %.v15 = select <4 x i1> %609, <4 x i32> %575, <4 x i32> %.v14, !dbg !105
  %610 = bitcast <4 x i32> %.v15 to <4 x float>, !dbg !105
  %611 = fcmp olt <4 x float> %610, %581, !dbg !106
  %612 = fcmp uno <4 x float> %581, zeroinitializer, !dbg !108
  %613 = or <4 x i1> %611, %612, !dbg !109
  %.v16 = select <4 x i1> %613, <4 x i32> %580, <4 x i32> %.v15, !dbg !110
  %614 = bitcast <4 x i32> %.v16 to <4 x float>, !dbg !110
  %615 = fcmp olt <4 x float> %614, %586, !dbg !111
  %616 = bitcast i32 %430 to float, !dbg !113
  %617 = fcmp uno float %616, 0.000000e+00, !dbg !113
  %618 = bitcast i32 %431 to float, !dbg !113
  %619 = fcmp uno float %618, 0.000000e+00, !dbg !113
  %620 = bitcast i32 %432 to float, !dbg !113
  %621 = fcmp uno float %620, 0.000000e+00, !dbg !113
  %622 = bitcast i32 %433 to float, !dbg !113
  %623 = fcmp uno float %622, 0.000000e+00, !dbg !113
  %624 = extractelement <4 x i1> %615, i64 0, !dbg !114
  %625 = or i1 %624, %617, !dbg !114
  %626 = extractelement <4 x i1> %615, i64 1, !dbg !114
  %627 = or i1 %626, %619, !dbg !114
  %628 = extractelement <4 x i1> %615, i64 2, !dbg !114
  %629 = or i1 %628, %621, !dbg !114
  %630 = extractelement <4 x i1> %615, i64 3, !dbg !114
  %631 = or i1 %630, %623, !dbg !114
  %632 = zext <4 x i1> %587 to <4 x i8>, !dbg !115
  %633 = select <4 x i1> %591, <4 x i8> splat (i8 2), <4 x i8> %632, !dbg !116
  %634 = select <4 x i1> %595, <4 x i8> splat (i8 3), <4 x i8> %633, !dbg !117
  %635 = select <4 x i1> %599, <4 x i8> splat (i8 4), <4 x i8> %634, !dbg !118
  %636 = select <4 x i1> %603, <4 x i8> splat (i8 5), <4 x i8> %635, !dbg !119
  %637 = select <4 x i1> %607, <4 x i8> splat (i8 6), <4 x i8> %636, !dbg !120
  %638 = select <4 x i1> %611, <4 x i8> splat (i8 7), <4 x i8> %637, !dbg !121
  %639 = select <4 x i1> %615, <4 x i8> splat (i8 8), <4 x i8> %638, !dbg !122
  %640 = insertelement <4 x i32> poison, i32 %139, i64 0, !dbg !33
  %641 = insertelement <4 x i32> %640, i32 %140, i64 1, !dbg !33
  %642 = insertelement <4 x i32> %641, i32 %141, i64 2, !dbg !33
  %643 = insertelement <4 x i32> %642, i32 %142, i64 3, !dbg !33
  %644 = bitcast <4 x i32> %643 to <4 x float>, !dbg !33
  %645 = insertelement <4 x i32> poison, i32 %176, i64 0, !dbg !38
  %646 = insertelement <4 x i32> %645, i32 %177, i64 1, !dbg !38
  %647 = insertelement <4 x i32> %646, i32 %178, i64 2, !dbg !38
  %648 = insertelement <4 x i32> %647, i32 %179, i64 3, !dbg !38
  %649 = bitcast <4 x i32> %648 to <4 x float>, !dbg !38
  %650 = insertelement <4 x i32> poison, i32 %213, i64 0, !dbg !43
  %651 = insertelement <4 x i32> %650, i32 %214, i64 1, !dbg !43
  %652 = insertelement <4 x i32> %651, i32 %215, i64 2, !dbg !43
  %653 = insertelement <4 x i32> %652, i32 %216, i64 3, !dbg !43
  %654 = bitcast <4 x i32> %653 to <4 x float>, !dbg !43
  %655 = insertelement <4 x i32> poison, i32 %250, i64 0, !dbg !48
  %656 = insertelement <4 x i32> %655, i32 %251, i64 1, !dbg !48
  %657 = insertelement <4 x i32> %656, i32 %252, i64 2, !dbg !48
  %658 = insertelement <4 x i32> %657, i32 %253, i64 3, !dbg !48
  %659 = bitcast <4 x i32> %658 to <4 x float>, !dbg !48
  %660 = insertelement <4 x i32> poison, i32 %287, i64 0, !dbg !53
  %661 = insertelement <4 x i32> %660, i32 %288, i64 1, !dbg !53
  %662 = insertelement <4 x i32> %661, i32 %289, i64 2, !dbg !53
  %663 = insertelement <4 x i32> %662, i32 %290, i64 3, !dbg !53
  %664 = bitcast <4 x i32> %663 to <4 x float>, !dbg !53
  %665 = insertelement <4 x i32> poison, i32 %324, i64 0, !dbg !58
  %666 = insertelement <4 x i32> %665, i32 %325, i64 1, !dbg !58
  %667 = insertelement <4 x i32> %666, i32 %326, i64 2, !dbg !58
  %668 = insertelement <4 x i32> %667, i32 %327, i64 3, !dbg !58
  %669 = bitcast <4 x i32> %668 to <4 x float>, !dbg !58
  %670 = insertelement <4 x i32> poison, i32 %361, i64 0, !dbg !63
  %671 = insertelement <4 x i32> %670, i32 %362, i64 1, !dbg !63
  %672 = insertelement <4 x i32> %671, i32 %363, i64 2, !dbg !63
  %673 = insertelement <4 x i32> %672, i32 %364, i64 3, !dbg !63
  %674 = bitcast <4 x i32> %673 to <4 x float>, !dbg !63
  %675 = insertelement <4 x i32> poison, i32 %398, i64 0, !dbg !68
  %676 = insertelement <4 x i32> %675, i32 %399, i64 1, !dbg !68
  %677 = insertelement <4 x i32> %676, i32 %400, i64 2, !dbg !68
  %678 = insertelement <4 x i32> %677, i32 %401, i64 3, !dbg !68
  %679 = bitcast <4 x i32> %678 to <4 x float>, !dbg !68
  %680 = insertelement <4 x i32> poison, i32 %435, i64 0, !dbg !73
  %681 = insertelement <4 x i32> %680, i32 %436, i64 1, !dbg !73
  %682 = insertelement <4 x i32> %681, i32 %437, i64 2, !dbg !73
  %683 = insertelement <4 x i32> %682, i32 %438, i64 3, !dbg !73
  %684 = bitcast <4 x i32> %683 to <4 x float>, !dbg !73
  %685 = fcmp ogt <4 x float> %649, %644, !dbg !74
  %686 = fcmp uno <4 x float> %649, zeroinitializer, !dbg !78
  %687 = or <4 x i1> %685, %686, !dbg !79
  %.v17 = select <4 x i1> %687, <4 x i32> %648, <4 x i32> %643, !dbg !80
  %688 = bitcast <4 x i32> %.v17 to <4 x float>, !dbg !80
  %689 = fcmp olt <4 x float> %688, %654, !dbg !81
  %690 = fcmp uno <4 x float> %654, zeroinitializer, !dbg !83
  %691 = or <4 x i1> %689, %690, !dbg !84
  %.v18 = select <4 x i1> %691, <4 x i32> %653, <4 x i32> %.v17, !dbg !85
  %692 = bitcast <4 x i32> %.v18 to <4 x float>, !dbg !85
  %693 = fcmp olt <4 x float> %692, %659, !dbg !86
  %694 = fcmp uno <4 x float> %659, zeroinitializer, !dbg !88
  %695 = or <4 x i1> %693, %694, !dbg !89
  %.v19 = select <4 x i1> %695, <4 x i32> %658, <4 x i32> %.v18, !dbg !90
  %696 = bitcast <4 x i32> %.v19 to <4 x float>, !dbg !90
  %697 = fcmp olt <4 x float> %696, %664, !dbg !91
  %698 = fcmp uno <4 x float> %664, zeroinitializer, !dbg !93
  %699 = or <4 x i1> %697, %698, !dbg !94
  %.v20 = select <4 x i1> %699, <4 x i32> %663, <4 x i32> %.v19, !dbg !95
  %700 = bitcast <4 x i32> %.v20 to <4 x float>, !dbg !95
  %701 = fcmp olt <4 x float> %700, %669, !dbg !96
  %702 = fcmp uno <4 x float> %669, zeroinitializer, !dbg !98
  %703 = or <4 x i1> %701, %702, !dbg !99
  %.v21 = select <4 x i1> %703, <4 x i32> %668, <4 x i32> %.v20, !dbg !100
  %704 = bitcast <4 x i32> %.v21 to <4 x float>, !dbg !100
  %705 = fcmp olt <4 x float> %704, %674, !dbg !101
  %706 = fcmp uno <4 x float> %674, zeroinitializer, !dbg !103
  %707 = or <4 x i1> %705, %706, !dbg !104
  %.v22 = select <4 x i1> %707, <4 x i32> %673, <4 x i32> %.v21, !dbg !105
  %708 = bitcast <4 x i32> %.v22 to <4 x float>, !dbg !105
  %709 = fcmp olt <4 x float> %708, %679, !dbg !106
  %710 = fcmp uno <4 x float> %679, zeroinitializer, !dbg !108
  %711 = or <4 x i1> %709, %710, !dbg !109
  %.v23 = select <4 x i1> %711, <4 x i32> %678, <4 x i32> %.v22, !dbg !110
  %712 = bitcast <4 x i32> %.v23 to <4 x float>, !dbg !110
  %713 = fcmp olt <4 x float> %712, %684, !dbg !111
  %714 = bitcast i32 %435 to float, !dbg !113
  %715 = fcmp uno float %714, 0.000000e+00, !dbg !113
  %716 = bitcast i32 %436 to float, !dbg !113
  %717 = fcmp uno float %716, 0.000000e+00, !dbg !113
  %718 = bitcast i32 %437 to float, !dbg !113
  %719 = fcmp uno float %718, 0.000000e+00, !dbg !113
  %720 = bitcast i32 %438 to float, !dbg !113
  %721 = fcmp uno float %720, 0.000000e+00, !dbg !113
  %722 = extractelement <4 x i1> %713, i64 0, !dbg !114
  %723 = or i1 %722, %715, !dbg !114
  %724 = extractelement <4 x i1> %713, i64 1, !dbg !114
  %725 = or i1 %724, %717, !dbg !114
  %726 = extractelement <4 x i1> %713, i64 2, !dbg !114
  %727 = or i1 %726, %719, !dbg !114
  %728 = extractelement <4 x i1> %713, i64 3, !dbg !114
  %729 = or i1 %728, %721, !dbg !114
  %730 = zext <4 x i1> %685 to <4 x i8>, !dbg !115
  %731 = select <4 x i1> %689, <4 x i8> splat (i8 2), <4 x i8> %730, !dbg !116
  %732 = select <4 x i1> %693, <4 x i8> splat (i8 3), <4 x i8> %731, !dbg !117
  %733 = select <4 x i1> %697, <4 x i8> splat (i8 4), <4 x i8> %732, !dbg !118
  %734 = select <4 x i1> %701, <4 x i8> splat (i8 5), <4 x i8> %733, !dbg !119
  %735 = select <4 x i1> %705, <4 x i8> splat (i8 6), <4 x i8> %734, !dbg !120
  %736 = select <4 x i1> %709, <4 x i8> splat (i8 7), <4 x i8> %735, !dbg !121
  %737 = select <4 x i1> %713, <4 x i8> splat (i8 8), <4 x i8> %736, !dbg !122
  %738 = insertelement <4 x i32> poison, i32 %144, i64 0, !dbg !33
  %739 = insertelement <4 x i32> %738, i32 %145, i64 1, !dbg !33
  %740 = insertelement <4 x i32> %739, i32 %146, i64 2, !dbg !33
  %741 = insertelement <4 x i32> %740, i32 %147, i64 3, !dbg !33
  %742 = bitcast <4 x i32> %741 to <4 x float>, !dbg !33
  %743 = insertelement <4 x i32> poison, i32 %181, i64 0, !dbg !38
  %744 = insertelement <4 x i32> %743, i32 %182, i64 1, !dbg !38
  %745 = insertelement <4 x i32> %744, i32 %183, i64 2, !dbg !38
  %746 = insertelement <4 x i32> %745, i32 %184, i64 3, !dbg !38
  %747 = bitcast <4 x i32> %746 to <4 x float>, !dbg !38
  %748 = insertelement <4 x i32> poison, i32 %218, i64 0, !dbg !43
  %749 = insertelement <4 x i32> %748, i32 %219, i64 1, !dbg !43
  %750 = insertelement <4 x i32> %749, i32 %220, i64 2, !dbg !43
  %751 = insertelement <4 x i32> %750, i32 %221, i64 3, !dbg !43
  %752 = bitcast <4 x i32> %751 to <4 x float>, !dbg !43
  %753 = insertelement <4 x i32> poison, i32 %255, i64 0, !dbg !48
  %754 = insertelement <4 x i32> %753, i32 %256, i64 1, !dbg !48
  %755 = insertelement <4 x i32> %754, i32 %257, i64 2, !dbg !48
  %756 = insertelement <4 x i32> %755, i32 %258, i64 3, !dbg !48
  %757 = bitcast <4 x i32> %756 to <4 x float>, !dbg !48
  %758 = insertelement <4 x i32> poison, i32 %292, i64 0, !dbg !53
  %759 = insertelement <4 x i32> %758, i32 %293, i64 1, !dbg !53
  %760 = insertelement <4 x i32> %759, i32 %294, i64 2, !dbg !53
  %761 = insertelement <4 x i32> %760, i32 %295, i64 3, !dbg !53
  %762 = bitcast <4 x i32> %761 to <4 x float>, !dbg !53
  %763 = insertelement <4 x i32> poison, i32 %329, i64 0, !dbg !58
  %764 = insertelement <4 x i32> %763, i32 %330, i64 1, !dbg !58
  %765 = insertelement <4 x i32> %764, i32 %331, i64 2, !dbg !58
  %766 = insertelement <4 x i32> %765, i32 %332, i64 3, !dbg !58
  %767 = bitcast <4 x i32> %766 to <4 x float>, !dbg !58
  %768 = insertelement <4 x i32> poison, i32 %366, i64 0, !dbg !63
  %769 = insertelement <4 x i32> %768, i32 %367, i64 1, !dbg !63
  %770 = insertelement <4 x i32> %769, i32 %368, i64 2, !dbg !63
  %771 = insertelement <4 x i32> %770, i32 %369, i64 3, !dbg !63
  %772 = bitcast <4 x i32> %771 to <4 x float>, !dbg !63
  %773 = insertelement <4 x i32> poison, i32 %403, i64 0, !dbg !68
  %774 = insertelement <4 x i32> %773, i32 %404, i64 1, !dbg !68
  %775 = insertelement <4 x i32> %774, i32 %405, i64 2, !dbg !68
  %776 = insertelement <4 x i32> %775, i32 %406, i64 3, !dbg !68
  %777 = bitcast <4 x i32> %776 to <4 x float>, !dbg !68
  %778 = insertelement <4 x i32> poison, i32 %440, i64 0, !dbg !73
  %779 = insertelement <4 x i32> %778, i32 %441, i64 1, !dbg !73
  %780 = insertelement <4 x i32> %779, i32 %442, i64 2, !dbg !73
  %781 = insertelement <4 x i32> %780, i32 %443, i64 3, !dbg !73
  %782 = bitcast <4 x i32> %781 to <4 x float>, !dbg !73
  %783 = fcmp ogt <4 x float> %747, %742, !dbg !74
  %784 = fcmp uno <4 x float> %747, zeroinitializer, !dbg !78
  %785 = or <4 x i1> %783, %784, !dbg !79
  %.v24 = select <4 x i1> %785, <4 x i32> %746, <4 x i32> %741, !dbg !80
  %786 = bitcast <4 x i32> %.v24 to <4 x float>, !dbg !80
  %787 = fcmp olt <4 x float> %786, %752, !dbg !81
  %788 = fcmp uno <4 x float> %752, zeroinitializer, !dbg !83
  %789 = or <4 x i1> %787, %788, !dbg !84
  %.v25 = select <4 x i1> %789, <4 x i32> %751, <4 x i32> %.v24, !dbg !85
  %790 = bitcast <4 x i32> %.v25 to <4 x float>, !dbg !85
  %791 = fcmp olt <4 x float> %790, %757, !dbg !86
  %792 = fcmp uno <4 x float> %757, zeroinitializer, !dbg !88
  %793 = or <4 x i1> %791, %792, !dbg !89
  %.v26 = select <4 x i1> %793, <4 x i32> %756, <4 x i32> %.v25, !dbg !90
  %794 = bitcast <4 x i32> %.v26 to <4 x float>, !dbg !90
  %795 = fcmp olt <4 x float> %794, %762, !dbg !91
  %796 = fcmp uno <4 x float> %762, zeroinitializer, !dbg !93
  %797 = or <4 x i1> %795, %796, !dbg !94
  %.v27 = select <4 x i1> %797, <4 x i32> %761, <4 x i32> %.v26, !dbg !95
  %798 = bitcast <4 x i32> %.v27 to <4 x float>, !dbg !95
  %799 = fcmp olt <4 x float> %798, %767, !dbg !96
  %800 = fcmp uno <4 x float> %767, zeroinitializer, !dbg !98
  %801 = or <4 x i1> %799, %800, !dbg !99
  %.v28 = select <4 x i1> %801, <4 x i32> %766, <4 x i32> %.v27, !dbg !100
  %802 = bitcast <4 x i32> %.v28 to <4 x float>, !dbg !100
  %803 = fcmp olt <4 x float> %802, %772, !dbg !101
  %804 = fcmp uno <4 x float> %772, zeroinitializer, !dbg !103
  %805 = or <4 x i1> %803, %804, !dbg !104
  %.v29 = select <4 x i1> %805, <4 x i32> %771, <4 x i32> %.v28, !dbg !105
  %806 = bitcast <4 x i32> %.v29 to <4 x float>, !dbg !105
  %807 = fcmp olt <4 x float> %806, %777, !dbg !106
  %808 = fcmp uno <4 x float> %777, zeroinitializer, !dbg !108
  %809 = or <4 x i1> %807, %808, !dbg !109
  %.v30 = select <4 x i1> %809, <4 x i32> %776, <4 x i32> %.v29, !dbg !110
  %810 = bitcast <4 x i32> %.v30 to <4 x float>, !dbg !110
  %811 = fcmp olt <4 x float> %810, %782, !dbg !111
  %812 = bitcast i32 %440 to float, !dbg !113
  %813 = fcmp uno float %812, 0.000000e+00, !dbg !113
  %814 = bitcast i32 %441 to float, !dbg !113
  %815 = fcmp uno float %814, 0.000000e+00, !dbg !113
  %816 = bitcast i32 %442 to float, !dbg !113
  %817 = fcmp uno float %816, 0.000000e+00, !dbg !113
  %818 = bitcast i32 %443 to float, !dbg !113
  %819 = fcmp uno float %818, 0.000000e+00, !dbg !113
  %820 = extractelement <4 x i1> %811, i64 0, !dbg !114
  %821 = or i1 %820, %813, !dbg !114
  %822 = extractelement <4 x i1> %811, i64 1, !dbg !114
  %823 = or i1 %822, %815, !dbg !114
  %824 = extractelement <4 x i1> %811, i64 2, !dbg !114
  %825 = or i1 %824, %817, !dbg !114
  %826 = extractelement <4 x i1> %811, i64 3, !dbg !114
  %827 = or i1 %826, %819, !dbg !114
  %828 = zext <4 x i1> %783 to <4 x i8>, !dbg !115
  %829 = select <4 x i1> %787, <4 x i8> splat (i8 2), <4 x i8> %828, !dbg !116
  %830 = select <4 x i1> %791, <4 x i8> splat (i8 3), <4 x i8> %829, !dbg !117
  %831 = select <4 x i1> %795, <4 x i8> splat (i8 4), <4 x i8> %830, !dbg !118
  %832 = select <4 x i1> %799, <4 x i8> splat (i8 5), <4 x i8> %831, !dbg !119
  %833 = select <4 x i1> %803, <4 x i8> splat (i8 6), <4 x i8> %832, !dbg !120
  %834 = select <4 x i1> %807, <4 x i8> splat (i8 7), <4 x i8> %833, !dbg !121
  %835 = select <4 x i1> %811, <4 x i8> splat (i8 8), <4 x i8> %834, !dbg !122
  %836 = mul i32 %54, 25, !dbg !123
  %837 = add i32 %836, %.decomposed32, !dbg !124
  %838 = mul i32 %61, 9600, !dbg !125
  %839 = mul i32 %62, 9600, !dbg !125
  %840 = mul i32 %63, 9600, !dbg !125
  %841 = mul i32 %64, 9600, !dbg !125
  %842 = mul i32 %65, 9600, !dbg !125
  %843 = mul i32 %66, 9600, !dbg !125
  %844 = mul i32 %67, 9600, !dbg !125
  %845 = mul i32 %68, 9600, !dbg !125
  %846 = mul i32 %69, 9600, !dbg !125
  %847 = mul i32 %70, 9600, !dbg !125
  %848 = mul i32 %71, 9600, !dbg !125
  %849 = mul i32 %72, 9600, !dbg !125
  %850 = mul i32 %73, 9600, !dbg !125
  %851 = mul i32 %74, 9600, !dbg !125
  %852 = mul i32 %75, 9600, !dbg !125
  %853 = mul i32 %76, 9600, !dbg !125
  %854 = add i32 %837, %838, !dbg !126
  %855 = add i32 %839, %.decomposed34, !dbg !124
  %856 = add i32 %855, %836, !dbg !126
  %857 = add i32 %840, %.decomposed36, !dbg !124
  %858 = add i32 %857, %836, !dbg !126
  %859 = add i32 %841, %.decomposed38, !dbg !124
  %860 = add i32 %859, %836, !dbg !126
  %861 = add i32 %842, %.decomposed40, !dbg !124
  %862 = add i32 %861, %836, !dbg !126
  %863 = add i32 %843, %.decomposed42, !dbg !124
  %864 = add i32 %863, %836, !dbg !126
  %865 = add i32 %844, %.decomposed44, !dbg !124
  %866 = add i32 %865, %836, !dbg !126
  %867 = add i32 %845, %.decomposed46, !dbg !124
  %868 = add i32 %867, %836, !dbg !126
  %869 = add i32 %846, %.decomposed48, !dbg !124
  %870 = add i32 %869, %836, !dbg !126
  %871 = add i32 %847, %.decomposed50, !dbg !124
  %872 = add i32 %871, %836, !dbg !126
  %873 = add i32 %848, %.decomposed52, !dbg !124
  %874 = add i32 %873, %836, !dbg !126
  %875 = add i32 %849, %.decomposed54, !dbg !124
  %876 = add i32 %875, %836, !dbg !126
  %877 = add i32 %850, %.decomposed56, !dbg !124
  %878 = add i32 %877, %836, !dbg !126
  %879 = add i32 %851, %.decomposed58, !dbg !124
  %880 = add i32 %879, %836, !dbg !126
  %881 = add i32 %852, %.decomposed60, !dbg !124
  %882 = add i32 %881, %836, !dbg !126
  %883 = add i32 %853, %.decomposed62, !dbg !124
  %884 = add i32 %883, %836, !dbg !126
  %885 = sext i32 %854 to i64, !dbg !127
  %886 = getelementptr float, ptr addrspace(1) %1, i64 %885, !dbg !127
  %887 = sext i32 %856 to i64, !dbg !127
  %888 = getelementptr float, ptr addrspace(1) %1, i64 %887, !dbg !127
  %889 = sext i32 %858 to i64, !dbg !127
  %890 = getelementptr float, ptr addrspace(1) %1, i64 %889, !dbg !127
  %891 = sext i32 %860 to i64, !dbg !127
  %892 = getelementptr float, ptr addrspace(1) %1, i64 %891, !dbg !127
  %893 = sext i32 %862 to i64, !dbg !127
  %894 = getelementptr float, ptr addrspace(1) %1, i64 %893, !dbg !127
  %895 = sext i32 %864 to i64, !dbg !127
  %896 = getelementptr float, ptr addrspace(1) %1, i64 %895, !dbg !127
  %897 = sext i32 %866 to i64, !dbg !127
  %898 = getelementptr float, ptr addrspace(1) %1, i64 %897, !dbg !127
  %899 = sext i32 %868 to i64, !dbg !127
  %900 = getelementptr float, ptr addrspace(1) %1, i64 %899, !dbg !127
  %901 = sext i32 %870 to i64, !dbg !127
  %902 = getelementptr float, ptr addrspace(1) %1, i64 %901, !dbg !127
  %903 = sext i32 %872 to i64, !dbg !127
  %904 = getelementptr float, ptr addrspace(1) %1, i64 %903, !dbg !127
  %905 = sext i32 %874 to i64, !dbg !127
  %906 = getelementptr float, ptr addrspace(1) %1, i64 %905, !dbg !127
  %907 = sext i32 %876 to i64, !dbg !127
  %908 = getelementptr float, ptr addrspace(1) %1, i64 %907, !dbg !127
  %909 = sext i32 %878 to i64, !dbg !127
  %910 = getelementptr float, ptr addrspace(1) %1, i64 %909, !dbg !127
  %911 = sext i32 %880 to i64, !dbg !127
  %912 = getelementptr float, ptr addrspace(1) %1, i64 %911, !dbg !127
  %913 = sext i32 %882 to i64, !dbg !127
  %914 = getelementptr float, ptr addrspace(1) %1, i64 %913, !dbg !127
  %915 = sext i32 %884 to i64, !dbg !127
  %916 = getelementptr float, ptr addrspace(1) %1, i64 %915, !dbg !127
  %917 = and i32 %47, 4080, !dbg !128
  %918 = and i32 %8, 255, !dbg !128
  %919 = lshr i32 %917, 5, !dbg !128
  %920 = getelementptr float, ptr addrspace(3) @global_smem, i32 %919, !dbg !128
  %921 = getelementptr float, ptr addrspace(3) %920, i32 %917, !dbg !128
  %922 = extractelement <4 x i32> %.v9, i64 0, !dbg !128
  %923 = select i1 %527, i32 %425, i32 %922, !dbg !129
  %924 = insertelement <1 x i32> poison, i32 %923, i64 0, !dbg !128
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %921, <1 x i32> %924, i1 true) #2, !dbg !128
  %925 = or disjoint i32 %917, 1, !dbg !128
  %926 = getelementptr float, ptr addrspace(3) %920, i32 %925, !dbg !128
  %927 = extractelement <4 x i32> %.v9, i64 1, !dbg !128
  %928 = select i1 %529, i32 %426, i32 %927, !dbg !129
  %929 = insertelement <1 x i32> poison, i32 %928, i64 0, !dbg !128
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %926, <1 x i32> %929, i1 true) #2, !dbg !128
  %930 = or disjoint i32 %917, 2, !dbg !128
  %931 = getelementptr float, ptr addrspace(3) %920, i32 %930, !dbg !128
  %932 = extractelement <4 x i32> %.v9, i64 2, !dbg !128
  %933 = select i1 %531, i32 %427, i32 %932, !dbg !129
  %934 = insertelement <1 x i32> poison, i32 %933, i64 0, !dbg !128
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %931, <1 x i32> %934, i1 true) #2, !dbg !128
  %935 = or disjoint i32 %917, 3, !dbg !128
  %936 = getelementptr float, ptr addrspace(3) %920, i32 %935, !dbg !128
  %937 = extractelement <4 x i32> %.v9, i64 3, !dbg !128
  %938 = select i1 %533, i32 %428, i32 %937, !dbg !129
  %939 = insertelement <1 x i32> poison, i32 %938, i64 0, !dbg !128
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %936, <1 x i32> %939, i1 true) #2, !dbg !128
  %940 = or disjoint i32 %917, 4, !dbg !128
  %941 = getelementptr float, ptr addrspace(3) %920, i32 %940, !dbg !128
  %942 = extractelement <4 x i32> %.v16, i64 0, !dbg !128
  %943 = select i1 %625, i32 %430, i32 %942, !dbg !129
  %944 = insertelement <1 x i32> poison, i32 %943, i64 0, !dbg !128
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %941, <1 x i32> %944, i1 true) #2, !dbg !128
  %945 = or disjoint i32 %917, 5, !dbg !128
  %946 = getelementptr float, ptr addrspace(3) %920, i32 %945, !dbg !128
  %947 = extractelement <4 x i32> %.v16, i64 1, !dbg !128
  %948 = select i1 %627, i32 %431, i32 %947, !dbg !129
  %949 = insertelement <1 x i32> poison, i32 %948, i64 0, !dbg !128
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %946, <1 x i32> %949, i1 true) #2, !dbg !128
  %950 = or disjoint i32 %917, 6, !dbg !128
  %951 = getelementptr float, ptr addrspace(3) %920, i32 %950, !dbg !128
  %952 = extractelement <4 x i32> %.v16, i64 2, !dbg !128
  %953 = select i1 %629, i32 %432, i32 %952, !dbg !129
  %954 = insertelement <1 x i32> poison, i32 %953, i64 0, !dbg !128
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %951, <1 x i32> %954, i1 true) #2, !dbg !128
  %955 = or disjoint i32 %917, 7, !dbg !128
  %956 = getelementptr float, ptr addrspace(3) %920, i32 %955, !dbg !128
  %957 = extractelement <4 x i32> %.v16, i64 3, !dbg !128
  %958 = select i1 %631, i32 %433, i32 %957, !dbg !129
  %959 = insertelement <1 x i32> poison, i32 %958, i64 0, !dbg !128
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %956, <1 x i32> %959, i1 true) #2, !dbg !128
  %960 = or disjoint i32 %917, 8, !dbg !128
  %961 = getelementptr float, ptr addrspace(3) %920, i32 %960, !dbg !128
  %962 = extractelement <4 x i32> %.v23, i64 0, !dbg !128
  %963 = select i1 %723, i32 %435, i32 %962, !dbg !129
  %964 = insertelement <1 x i32> poison, i32 %963, i64 0, !dbg !128
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %961, <1 x i32> %964, i1 true) #2, !dbg !128
  %965 = or disjoint i32 %917, 9, !dbg !128
  %966 = getelementptr float, ptr addrspace(3) %920, i32 %965, !dbg !128
  %967 = extractelement <4 x i32> %.v23, i64 1, !dbg !128
  %968 = select i1 %725, i32 %436, i32 %967, !dbg !129
  %969 = insertelement <1 x i32> poison, i32 %968, i64 0, !dbg !128
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %966, <1 x i32> %969, i1 true) #2, !dbg !128
  %970 = or disjoint i32 %917, 10, !dbg !128
  %971 = getelementptr float, ptr addrspace(3) %920, i32 %970, !dbg !128
  %972 = extractelement <4 x i32> %.v23, i64 2, !dbg !128
  %973 = select i1 %727, i32 %437, i32 %972, !dbg !129
  %974 = insertelement <1 x i32> poison, i32 %973, i64 0, !dbg !128
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %971, <1 x i32> %974, i1 true) #2, !dbg !128
  %975 = or disjoint i32 %917, 11, !dbg !128
  %976 = getelementptr float, ptr addrspace(3) %920, i32 %975, !dbg !128
  %977 = extractelement <4 x i32> %.v23, i64 3, !dbg !128
  %978 = select i1 %729, i32 %438, i32 %977, !dbg !129
  %979 = insertelement <1 x i32> poison, i32 %978, i64 0, !dbg !128
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %976, <1 x i32> %979, i1 true) #2, !dbg !128
  %980 = or disjoint i32 %917, 12, !dbg !128
  %981 = getelementptr float, ptr addrspace(3) %920, i32 %980, !dbg !128
  %982 = extractelement <4 x i32> %.v30, i64 0, !dbg !128
  %983 = select i1 %821, i32 %440, i32 %982, !dbg !129
  %984 = insertelement <1 x i32> poison, i32 %983, i64 0, !dbg !128
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %981, <1 x i32> %984, i1 true) #2, !dbg !128
  %985 = or disjoint i32 %917, 13, !dbg !128
  %986 = getelementptr float, ptr addrspace(3) %920, i32 %985, !dbg !128
  %987 = extractelement <4 x i32> %.v30, i64 1, !dbg !128
  %988 = select i1 %823, i32 %441, i32 %987, !dbg !129
  %989 = insertelement <1 x i32> poison, i32 %988, i64 0, !dbg !128
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %986, <1 x i32> %989, i1 true) #2, !dbg !128
  %990 = or disjoint i32 %917, 14, !dbg !128
  %991 = getelementptr float, ptr addrspace(3) %920, i32 %990, !dbg !128
  %992 = extractelement <4 x i32> %.v30, i64 2, !dbg !128
  %993 = select i1 %825, i32 %442, i32 %992, !dbg !129
  %994 = insertelement <1 x i32> poison, i32 %993, i64 0, !dbg !128
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %991, <1 x i32> %994, i1 true) #2, !dbg !128
  %995 = or disjoint i32 %917, 15, !dbg !128
  %996 = getelementptr float, ptr addrspace(3) %920, i32 %995, !dbg !128
  %997 = extractelement <4 x i32> %.v30, i64 3, !dbg !128
  %998 = select i1 %827, i32 %443, i32 %997, !dbg !129
  %999 = insertelement <1 x i32> poison, i32 %998, i64 0, !dbg !128
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %996, <1 x i32> %999, i1 true) #2, !dbg !128
  tail call void @llvm.nvvm.barrier0(), !dbg !128
  %1000 = lshr i32 %918, 5, !dbg !128
  %1001 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1000, !dbg !128
  %1002 = getelementptr inbounds float, ptr addrspace(3) %1001, i32 %918, !dbg !128
  %1003 = load i32, ptr addrspace(3) %1002, align 4, !dbg !128
  %1004 = or disjoint i32 %918, 256, !dbg !128
  %1005 = lshr i32 %1004, 5, !dbg !128
  %1006 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1005, !dbg !128
  %1007 = getelementptr inbounds float, ptr addrspace(3) %1006, i32 %1004, !dbg !128
  %1008 = load i32, ptr addrspace(3) %1007, align 4, !dbg !128
  %1009 = or disjoint i32 %918, 512, !dbg !128
  %1010 = lshr i32 %1009, 5, !dbg !128
  %1011 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1010, !dbg !128
  %1012 = getelementptr inbounds float, ptr addrspace(3) %1011, i32 %1009, !dbg !128
  %1013 = load i32, ptr addrspace(3) %1012, align 4, !dbg !128
  %1014 = or disjoint i32 %918, 768, !dbg !128
  %1015 = lshr i32 %1014, 5, !dbg !128
  %1016 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1015, !dbg !128
  %1017 = getelementptr inbounds float, ptr addrspace(3) %1016, i32 %1014, !dbg !128
  %1018 = load i32, ptr addrspace(3) %1017, align 4, !dbg !128
  %1019 = or disjoint i32 %918, 1024, !dbg !128
  %1020 = lshr i32 %1019, 5, !dbg !128
  %1021 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1020, !dbg !128
  %1022 = getelementptr inbounds float, ptr addrspace(3) %1021, i32 %1019, !dbg !128
  %1023 = load i32, ptr addrspace(3) %1022, align 4, !dbg !128
  %1024 = or disjoint i32 %918, 1280, !dbg !128
  %1025 = lshr i32 %1024, 5, !dbg !128
  %1026 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1025, !dbg !128
  %1027 = getelementptr inbounds float, ptr addrspace(3) %1026, i32 %1024, !dbg !128
  %1028 = load i32, ptr addrspace(3) %1027, align 4, !dbg !128
  %1029 = or disjoint i32 %918, 1536, !dbg !128
  %1030 = lshr i32 %1029, 5, !dbg !128
  %1031 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1030, !dbg !128
  %1032 = getelementptr inbounds float, ptr addrspace(3) %1031, i32 %1029, !dbg !128
  %1033 = load i32, ptr addrspace(3) %1032, align 4, !dbg !128
  %1034 = or disjoint i32 %918, 1792, !dbg !128
  %1035 = lshr i32 %1034, 5, !dbg !128
  %1036 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1035, !dbg !128
  %1037 = getelementptr inbounds float, ptr addrspace(3) %1036, i32 %1034, !dbg !128
  %1038 = load i32, ptr addrspace(3) %1037, align 4, !dbg !128
  %1039 = or disjoint i32 %918, 2048, !dbg !128
  %1040 = lshr i32 %1039, 5, !dbg !128
  %1041 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1040, !dbg !128
  %1042 = getelementptr inbounds float, ptr addrspace(3) %1041, i32 %1039, !dbg !128
  %1043 = load i32, ptr addrspace(3) %1042, align 4, !dbg !128
  %1044 = or disjoint i32 %918, 2304, !dbg !128
  %1045 = lshr i32 %1044, 5, !dbg !128
  %1046 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1045, !dbg !128
  %1047 = getelementptr inbounds float, ptr addrspace(3) %1046, i32 %1044, !dbg !128
  %1048 = load i32, ptr addrspace(3) %1047, align 4, !dbg !128
  %1049 = or disjoint i32 %918, 2560, !dbg !128
  %1050 = lshr i32 %1049, 5, !dbg !128
  %1051 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1050, !dbg !128
  %1052 = getelementptr inbounds float, ptr addrspace(3) %1051, i32 %1049, !dbg !128
  %1053 = load i32, ptr addrspace(3) %1052, align 4, !dbg !128
  %1054 = or disjoint i32 %918, 2816, !dbg !128
  %1055 = lshr i32 %1054, 5, !dbg !128
  %1056 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1055, !dbg !128
  %1057 = getelementptr inbounds float, ptr addrspace(3) %1056, i32 %1054, !dbg !128
  %1058 = load i32, ptr addrspace(3) %1057, align 4, !dbg !128
  %1059 = or disjoint i32 %918, 3072, !dbg !128
  %1060 = lshr i32 %1059, 5, !dbg !128
  %1061 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1060, !dbg !128
  %1062 = getelementptr inbounds float, ptr addrspace(3) %1061, i32 %1059, !dbg !128
  %1063 = load i32, ptr addrspace(3) %1062, align 4, !dbg !128
  %1064 = or disjoint i32 %918, 3328, !dbg !128
  %1065 = lshr i32 %1064, 5, !dbg !128
  %1066 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1065, !dbg !128
  %1067 = getelementptr inbounds float, ptr addrspace(3) %1066, i32 %1064, !dbg !128
  %1068 = load i32, ptr addrspace(3) %1067, align 4, !dbg !128
  %1069 = or disjoint i32 %918, 3584, !dbg !128
  %1070 = lshr i32 %1069, 5, !dbg !128
  %1071 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1070, !dbg !128
  %1072 = getelementptr inbounds float, ptr addrspace(3) %1071, i32 %1069, !dbg !128
  %1073 = load i32, ptr addrspace(3) %1072, align 4, !dbg !128
  %1074 = or disjoint i32 %918, 3840, !dbg !128
  %1075 = lshr i32 %1074, 5, !dbg !128
  %1076 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %1075, !dbg !128
  %1077 = getelementptr inbounds float, ptr addrspace(3) %1076, i32 %1074, !dbg !128
  %1078 = load i32, ptr addrspace(3) %1077, align 4, !dbg !128
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1003, ptr addrspace(1) %886, i1 %114) #2, !dbg !128
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1008, ptr addrspace(1) %888, i1 %115) #2, !dbg !128
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1013, ptr addrspace(1) %890, i1 %116) #2, !dbg !128
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1018, ptr addrspace(1) %892, i1 %117) #2, !dbg !128
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1023, ptr addrspace(1) %894, i1 %118) #2, !dbg !128
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1028, ptr addrspace(1) %896, i1 %119) #2, !dbg !128
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1033, ptr addrspace(1) %898, i1 %120) #2, !dbg !128
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1038, ptr addrspace(1) %900, i1 %121) #2, !dbg !128
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1043, ptr addrspace(1) %902, i1 %122) #2, !dbg !128
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1048, ptr addrspace(1) %904, i1 %123) #2, !dbg !128
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1053, ptr addrspace(1) %906, i1 %124) #2, !dbg !128
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1058, ptr addrspace(1) %908, i1 %125) #2, !dbg !128
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1063, ptr addrspace(1) %910, i1 %126) #2, !dbg !128
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1068, ptr addrspace(1) %912, i1 %127) #2, !dbg !128
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1073, ptr addrspace(1) %914, i1 %127) #2, !dbg !128
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %1078, ptr addrspace(1) %916, i1 %127) #2, !dbg !128
  %1079 = mul i32 %13, 192, !dbg !130
  %1080 = add i32 %50, %1079, !dbg !131
  %1081 = sext i32 %1080 to i64, !dbg !132
  %1082 = getelementptr i8, ptr addrspace(1) %2, i64 %1081, !dbg !132
  %1083 = bitcast <4 x i8> %541 to i32, !dbg !133
  %1084 = bitcast <4 x i8> %639 to i32, !dbg !133
  %1085 = bitcast <4 x i8> %737 to i32, !dbg !133
  %1086 = bitcast <4 x i8> %835 to i32, !dbg !133
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %1083, i32 %1084, i32 %1085, i32 %1086, ptr addrspace(1) %1082, i1 %113) #2, !dbg !133
  ret void, !dbg !134
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "csk4patw64wyyauubq2apj5exudhvnrbe3hjord7juata62i3f4p.py", directory: "inductor_cache/sk")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_15, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_15, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_15", linkageName: "triton_poi_fused_max_pool2d_with_indices_15", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 21, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 30, column: 26, scope: !7)
!23 = !DILocation(line: 31, column: 19, scope: !7)
!24 = !DILocation(line: 32, column: 19, scope: !7)
!25 = !DILocation(line: 34, column: 39, scope: !7)
!26 = !DILocation(line: 34, column: 49, scope: !7)
!27 = !DILocation(line: 34, column: 60, scope: !7)
!28 = !DILocation(line: 34, column: 35, scope: !7)
!29 = !DILocation(line: 34, column: 44, scope: !7)
!30 = !DILocation(line: 34, column: 54, scope: !7)
!31 = !DILocation(line: 34, column: 30, scope: !7)
!32 = !DILocation(line: 34, column: 73, scope: !7)
!33 = !DILocation(line: 34, column: 65, scope: !7)
!34 = !DILocation(line: 35, column: 41, scope: !7)
!35 = !DILocation(line: 35, column: 50, scope: !7)
!36 = !DILocation(line: 35, column: 60, scope: !7)
!37 = !DILocation(line: 35, column: 30, scope: !7)
!38 = !DILocation(line: 35, column: 71, scope: !7)
!39 = !DILocation(line: 36, column: 41, scope: !7)
!40 = !DILocation(line: 36, column: 50, scope: !7)
!41 = !DILocation(line: 36, column: 60, scope: !7)
!42 = !DILocation(line: 36, column: 30, scope: !7)
!43 = !DILocation(line: 36, column: 71, scope: !7)
!44 = !DILocation(line: 37, column: 42, scope: !7)
!45 = !DILocation(line: 37, column: 51, scope: !7)
!46 = !DILocation(line: 37, column: 61, scope: !7)
!47 = !DILocation(line: 37, column: 30, scope: !7)
!48 = !DILocation(line: 37, column: 72, scope: !7)
!49 = !DILocation(line: 38, column: 42, scope: !7)
!50 = !DILocation(line: 38, column: 51, scope: !7)
!51 = !DILocation(line: 38, column: 61, scope: !7)
!52 = !DILocation(line: 38, column: 30, scope: !7)
!53 = !DILocation(line: 38, column: 72, scope: !7)
!54 = !DILocation(line: 39, column: 42, scope: !7)
!55 = !DILocation(line: 39, column: 51, scope: !7)
!56 = !DILocation(line: 39, column: 61, scope: !7)
!57 = !DILocation(line: 39, column: 30, scope: !7)
!58 = !DILocation(line: 39, column: 72, scope: !7)
!59 = !DILocation(line: 40, column: 43, scope: !7)
!60 = !DILocation(line: 40, column: 52, scope: !7)
!61 = !DILocation(line: 40, column: 62, scope: !7)
!62 = !DILocation(line: 40, column: 31, scope: !7)
!63 = !DILocation(line: 40, column: 73, scope: !7)
!64 = !DILocation(line: 41, column: 43, scope: !7)
!65 = !DILocation(line: 41, column: 52, scope: !7)
!66 = !DILocation(line: 41, column: 62, scope: !7)
!67 = !DILocation(line: 41, column: 31, scope: !7)
!68 = !DILocation(line: 41, column: 73, scope: !7)
!69 = !DILocation(line: 42, column: 43, scope: !7)
!70 = !DILocation(line: 42, column: 52, scope: !7)
!71 = !DILocation(line: 42, column: 62, scope: !7)
!72 = !DILocation(line: 42, column: 31, scope: !7)
!73 = !DILocation(line: 42, column: 73, scope: !7)
!74 = !DILocation(line: 118, column: 15, scope: !75, inlinedAt: !77)
!75 = distinct !DILexicalBlockFile(scope: !7, file: !76, discriminator: 0)
!76 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!77 = !DILocation(line: 43, column: 40, scope: !7)
!78 = !DILocation(line: 120, column: 21, scope: !75, inlinedAt: !77)
!79 = !DILocation(line: 120, column: 16, scope: !75, inlinedAt: !77)
!80 = !DILocation(line: 121, column: 29, scope: !75, inlinedAt: !77)
!81 = !DILocation(line: 118, column: 15, scope: !75, inlinedAt: !82)
!82 = !DILocation(line: 44, column: 40, scope: !7)
!83 = !DILocation(line: 120, column: 21, scope: !75, inlinedAt: !82)
!84 = !DILocation(line: 120, column: 16, scope: !75, inlinedAt: !82)
!85 = !DILocation(line: 121, column: 29, scope: !75, inlinedAt: !82)
!86 = !DILocation(line: 118, column: 15, scope: !75, inlinedAt: !87)
!87 = !DILocation(line: 45, column: 40, scope: !7)
!88 = !DILocation(line: 120, column: 21, scope: !75, inlinedAt: !87)
!89 = !DILocation(line: 120, column: 16, scope: !75, inlinedAt: !87)
!90 = !DILocation(line: 121, column: 29, scope: !75, inlinedAt: !87)
!91 = !DILocation(line: 118, column: 15, scope: !75, inlinedAt: !92)
!92 = !DILocation(line: 46, column: 40, scope: !7)
!93 = !DILocation(line: 120, column: 21, scope: !75, inlinedAt: !92)
!94 = !DILocation(line: 120, column: 16, scope: !75, inlinedAt: !92)
!95 = !DILocation(line: 121, column: 29, scope: !75, inlinedAt: !92)
!96 = !DILocation(line: 118, column: 15, scope: !75, inlinedAt: !97)
!97 = !DILocation(line: 47, column: 41, scope: !7)
!98 = !DILocation(line: 120, column: 21, scope: !75, inlinedAt: !97)
!99 = !DILocation(line: 120, column: 16, scope: !75, inlinedAt: !97)
!100 = !DILocation(line: 121, column: 29, scope: !75, inlinedAt: !97)
!101 = !DILocation(line: 118, column: 15, scope: !75, inlinedAt: !102)
!102 = !DILocation(line: 48, column: 42, scope: !7)
!103 = !DILocation(line: 120, column: 21, scope: !75, inlinedAt: !102)
!104 = !DILocation(line: 120, column: 16, scope: !75, inlinedAt: !102)
!105 = !DILocation(line: 121, column: 29, scope: !75, inlinedAt: !102)
!106 = !DILocation(line: 118, column: 15, scope: !75, inlinedAt: !107)
!107 = !DILocation(line: 49, column: 42, scope: !7)
!108 = !DILocation(line: 120, column: 21, scope: !75, inlinedAt: !107)
!109 = !DILocation(line: 120, column: 16, scope: !75, inlinedAt: !107)
!110 = !DILocation(line: 121, column: 29, scope: !75, inlinedAt: !107)
!111 = !DILocation(line: 118, column: 15, scope: !75, inlinedAt: !112)
!112 = !DILocation(line: 50, column: 42, scope: !7)
!113 = !DILocation(line: 120, column: 21, scope: !75, inlinedAt: !112)
!114 = !DILocation(line: 120, column: 16, scope: !75, inlinedAt: !112)
!115 = !DILocation(line: 54, column: 35, scope: !7)
!116 = !DILocation(line: 57, column: 35, scope: !7)
!117 = !DILocation(line: 60, column: 35, scope: !7)
!118 = !DILocation(line: 63, column: 35, scope: !7)
!119 = !DILocation(line: 66, column: 35, scope: !7)
!120 = !DILocation(line: 69, column: 35, scope: !7)
!121 = !DILocation(line: 72, column: 35, scope: !7)
!122 = !DILocation(line: 75, column: 35, scope: !7)
!123 = !DILocation(line: 76, column: 33, scope: !7)
!124 = !DILocation(line: 76, column: 30, scope: !7)
!125 = !DILocation(line: 76, column: 43, scope: !7)
!126 = !DILocation(line: 76, column: 38, scope: !7)
!127 = !DILocation(line: 76, column: 25, scope: !7)
!128 = !DILocation(line: 76, column: 55, scope: !7)
!129 = !DILocation(line: 121, column: 29, scope: !75, inlinedAt: !112)
!130 = !DILocation(line: 77, column: 34, scope: !7)
!131 = !DILocation(line: 77, column: 30, scope: !7)
!132 = !DILocation(line: 77, column: 25, scope: !7)
!133 = !DILocation(line: 77, column: 46, scope: !7)
!134 = !DILocation(line: 77, column: 4, scope: !7)
