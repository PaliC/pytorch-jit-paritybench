; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_leaky_relu_mean_24(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %6 = shl i32 %5, 8, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 1, !dbg !12
  %9 = and i32 %8, 254, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %.frozen = freeze i32 %10, !dbg !14
  %11 = sdiv i32 %.frozen, 1024, !dbg !14
  %12 = mul i32 %11, 1024, !dbg !15
  %.decomposed = sub i32 %.frozen, %12, !dbg !15
  %13 = shl i32 %11, 12, !dbg !16
  %14 = add i32 %13, %.decomposed, !dbg !17
  %15 = sext i32 %14 to i64, !dbg !18
  %16 = getelementptr i1, ptr addrspace(1) %0, i64 %15, !dbg !18
  %17 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %16, i1 true) #1, !dbg !19
  %18 = bitcast i16 %17 to <2 x i8>, !dbg !19
  %19 = getelementptr float, ptr addrspace(1) %1, i64 %15, !dbg !20
  %20 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %19, i1 true) #1, !dbg !21
  %21 = extractvalue { i32, i32 } %20, 0, !dbg !21
  %22 = extractvalue { i32, i32 } %20, 1, !dbg !21
  %23 = add i32 %14, 1024, !dbg !22
  %24 = sext i32 %23 to i64, !dbg !23
  %25 = getelementptr i1, ptr addrspace(1) %0, i64 %24, !dbg !23
  %26 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %25, i1 true) #1, !dbg !24
  %27 = bitcast i16 %26 to <2 x i8>, !dbg !24
  %28 = getelementptr float, ptr addrspace(1) %1, i64 %24, !dbg !25
  %29 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %28, i1 true) #1, !dbg !26
  %30 = extractvalue { i32, i32 } %29, 0, !dbg !26
  %31 = extractvalue { i32, i32 } %29, 1, !dbg !26
  %32 = add i32 %14, 2048, !dbg !27
  %33 = sext i32 %32 to i64, !dbg !28
  %34 = getelementptr i1, ptr addrspace(1) %0, i64 %33, !dbg !28
  %35 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %34, i1 true) #1, !dbg !29
  %36 = bitcast i16 %35 to <2 x i8>, !dbg !29
  %37 = extractelement <2 x i8> %36, i64 0, !dbg !29
  %38 = extractelement <2 x i8> %36, i64 1, !dbg !29
  %.not4 = icmp eq i8 %37, 0, !dbg !29
  %.not5 = icmp eq i8 %38, 0, !dbg !29
  %39 = getelementptr float, ptr addrspace(1) %1, i64 %33, !dbg !30
  %40 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %39, i1 true) #1, !dbg !31
  %41 = extractvalue { i32, i32 } %40, 0, !dbg !31
  %42 = extractvalue { i32, i32 } %40, 1, !dbg !31
  %43 = bitcast i32 %41 to float, !dbg !31
  %44 = bitcast i32 %42 to float, !dbg !31
  %45 = add i32 %14, 3072, !dbg !32
  %46 = sext i32 %45 to i64, !dbg !33
  %47 = getelementptr i1, ptr addrspace(1) %0, i64 %46, !dbg !33
  %48 = tail call i16 asm sideeffect "mov.u16 $0, 0x0;\0A\09@$2 ld.global.b16 { $0 }, [ $1 + 0 ];", "=c,l,b"(ptr addrspace(1) %47, i1 true) #1, !dbg !34
  %49 = bitcast i16 %48 to <2 x i8>, !dbg !34
  %50 = extractelement <2 x i8> %49, i64 0, !dbg !34
  %51 = extractelement <2 x i8> %49, i64 1, !dbg !34
  %.not6 = icmp eq i8 %50, 0, !dbg !34
  %.not7 = icmp eq i8 %51, 0, !dbg !34
  %52 = getelementptr float, ptr addrspace(1) %1, i64 %46, !dbg !35
  %53 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %52, i1 true) #1, !dbg !36
  %54 = extractvalue { i32, i32 } %53, 0, !dbg !36
  %55 = extractvalue { i32, i32 } %53, 1, !dbg !36
  %56 = bitcast i32 %54 to float, !dbg !36
  %57 = bitcast i32 %55 to float, !dbg !36
  %58 = shufflevector <2 x i8> %18, <2 x i8> %27, <2 x i32> <i32 0, i32 2>, !dbg !19
  %59 = icmp eq <2 x i8> %58, zeroinitializer, !dbg !19
  %60 = insertelement <2 x i32> poison, i32 %21, i64 0, !dbg !21
  %61 = insertelement <2 x i32> %60, i32 %30, i64 1, !dbg !21
  %62 = bitcast <2 x i32> %61 to <2 x float>, !dbg !21
  %63 = fmul <2 x float> %62, splat (float 0x3F847AE140000000), !dbg !37
  %64 = select <2 x i1> %59, <2 x float> %63, <2 x float> %62, !dbg !38
  %65 = shufflevector <2 x i8> %18, <2 x i8> %27, <2 x i32> <i32 1, i32 3>, !dbg !19
  %66 = icmp eq <2 x i8> %65, zeroinitializer, !dbg !19
  %67 = insertelement <2 x i32> poison, i32 %22, i64 0, !dbg !21
  %68 = insertelement <2 x i32> %67, i32 %31, i64 1, !dbg !21
  %69 = bitcast <2 x i32> %68 to <2 x float>, !dbg !21
  %70 = fmul <2 x float> %69, splat (float 0x3F847AE140000000), !dbg !37
  %71 = select <2 x i1> %66, <2 x float> %70, <2 x float> %69, !dbg !38
  %shift = shufflevector <2 x float> %64, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !39
  %72 = fadd <2 x float> %64, %shift, !dbg !39
  %73 = extractelement <2 x float> %72, i64 0, !dbg !39
  %shift8 = shufflevector <2 x float> %71, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !39
  %74 = fadd <2 x float> %71, %shift8, !dbg !39
  %75 = extractelement <2 x float> %74, i64 0, !dbg !39
  %76 = fmul float %43, 0x3F847AE140000000, !dbg !40
  %77 = fmul float %44, 0x3F847AE140000000, !dbg !40
  %78 = select i1 %.not4, float %76, float %43, !dbg !41
  %79 = select i1 %.not5, float %77, float %44, !dbg !41
  %80 = fadd float %73, %78, !dbg !42
  %81 = fadd float %75, %79, !dbg !42
  %82 = fmul float %56, 0x3F847AE140000000, !dbg !43
  %83 = fmul float %57, 0x3F847AE140000000, !dbg !43
  %84 = select i1 %.not6, float %82, float %56, !dbg !44
  %85 = select i1 %.not7, float %83, float %57, !dbg !44
  %86 = fadd float %80, %84, !dbg !45
  %87 = fadd float %81, %85, !dbg !45
  %88 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %86, float 4.000000e+00) #1, !dbg !46
  %89 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %87, float 4.000000e+00) #1, !dbg !46
  %90 = sext i32 %10 to i64, !dbg !47
  %91 = getelementptr float, ptr addrspace(1) %2, i64 %90, !dbg !47
  %92 = bitcast float %88 to i32, !dbg !48
  %93 = bitcast float %89 to i32, !dbg !48
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %92, i32 %93, ptr addrspace(1) %91, i1 true) #1, !dbg !48
  ret void, !dbg !49
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cs5grofoze75ivtb5llbbcrq6fnhhw37qybqhvq5o4k26lytvenm.py", directory: "inductor_cache/s5")
!4 = !{ptr @triton_poi_fused_leaky_relu_mean_24, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_leaky_relu_mean_24, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_leaky_relu_mean_24", linkageName: "triton_poi_fused_leaky_relu_mean_24", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 27, column: 40, scope: !7)
!17 = !DILocation(line: 27, column: 35, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 45, scope: !7)
!20 = !DILocation(line: 28, column: 30, scope: !7)
!21 = !DILocation(line: 28, column: 45, scope: !7)
!22 = !DILocation(line: 29, column: 42, scope: !7)
!23 = !DILocation(line: 29, column: 30, scope: !7)
!24 = !DILocation(line: 29, column: 52, scope: !7)
!25 = !DILocation(line: 30, column: 30, scope: !7)
!26 = !DILocation(line: 30, column: 52, scope: !7)
!27 = !DILocation(line: 31, column: 43, scope: !7)
!28 = !DILocation(line: 31, column: 31, scope: !7)
!29 = !DILocation(line: 31, column: 53, scope: !7)
!30 = !DILocation(line: 32, column: 31, scope: !7)
!31 = !DILocation(line: 32, column: 53, scope: !7)
!32 = !DILocation(line: 33, column: 43, scope: !7)
!33 = !DILocation(line: 33, column: 31, scope: !7)
!34 = !DILocation(line: 33, column: 53, scope: !7)
!35 = !DILocation(line: 34, column: 31, scope: !7)
!36 = !DILocation(line: 34, column: 53, scope: !7)
!37 = !DILocation(line: 36, column: 18, scope: !7)
!38 = !DILocation(line: 37, column: 32, scope: !7)
!39 = !DILocation(line: 40, column: 18, scope: !7)
!40 = !DILocation(line: 41, column: 20, scope: !7)
!41 = !DILocation(line: 42, column: 35, scope: !7)
!42 = !DILocation(line: 43, column: 19, scope: !7)
!43 = !DILocation(line: 44, column: 20, scope: !7)
!44 = !DILocation(line: 45, column: 35, scope: !7)
!45 = !DILocation(line: 46, column: 20, scope: !7)
!46 = !DILocation(line: 48, column: 20, scope: !7)
!47 = !DILocation(line: 49, column: 25, scope: !7)
!48 = !DILocation(line: 49, column: 37, scope: !7)
!49 = !DILocation(line: 49, column: 4, scope: !7)
