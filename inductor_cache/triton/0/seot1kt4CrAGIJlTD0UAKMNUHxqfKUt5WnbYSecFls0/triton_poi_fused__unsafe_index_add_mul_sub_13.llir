; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__unsafe_index_add_mul_sub_13(ptr addrspace(1) nocapture readnone %0, ptr addrspace(1) nocapture readnone %1, ptr addrspace(1) %2, ptr addrspace(1) nocapture readnone %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %9 = shl i32 %8, 10, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 2, !dbg !12
  %12 = and i32 %11, 508, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %14 = or disjoint i32 %13, 2, !dbg !13
  %15 = or disjoint i32 %13, 512, !dbg !13
  %16 = or disjoint i32 %13, 514, !dbg !13
  %17 = srem i32 %13, 30, !dbg !14
  %18 = srem i32 %14, 30, !dbg !14
  %19 = srem i32 %15, 30, !dbg !14
  %20 = srem i32 %16, 30, !dbg !14
  %21 = sdiv i32 %13, 900, !dbg !15
  %22 = sdiv i32 %15, 900, !dbg !15
  %23 = sext i32 %21 to i64, !dbg !16
  %24 = getelementptr float, ptr addrspace(1) %2, i64 %23, !dbg !16
  %25 = sext i32 %22 to i64, !dbg !16
  %26 = getelementptr float, ptr addrspace(1) %2, i64 %25, !dbg !16
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 true) #1, !dbg !17
  %28 = bitcast i32 %27 to float, !dbg !17
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 true) #1, !dbg !17
  %30 = bitcast i32 %29 to float, !dbg !17
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 true) #1, !dbg !17
  %32 = bitcast i32 %31 to float, !dbg !17
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 true) #1, !dbg !17
  %34 = bitcast i32 %33 to float, !dbg !17
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 true) #1, !dbg !17
  %36 = bitcast i32 %35 to float, !dbg !17
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 true) #1, !dbg !17
  %38 = bitcast i32 %37 to float, !dbg !17
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 true) #1, !dbg !17
  %40 = bitcast i32 %39 to float, !dbg !17
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %26, i1 true) #1, !dbg !17
  %42 = bitcast i32 %41 to float, !dbg !17
  %43 = sext i32 %17 to i64, !dbg !18
  %44 = getelementptr float, ptr addrspace(1) %4, i64 %43, !dbg !18
  %45 = sext i32 %18 to i64, !dbg !18
  %46 = getelementptr float, ptr addrspace(1) %4, i64 %45, !dbg !18
  %47 = sext i32 %19 to i64, !dbg !18
  %48 = getelementptr float, ptr addrspace(1) %4, i64 %47, !dbg !18
  %49 = sext i32 %20 to i64, !dbg !18
  %50 = getelementptr float, ptr addrspace(1) %4, i64 %49, !dbg !18
  %51 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %44, i1 true) #1, !dbg !19
  %52 = extractvalue { i32, i32 } %51, 0, !dbg !19
  %53 = extractvalue { i32, i32 } %51, 1, !dbg !19
  %54 = bitcast i32 %52 to float, !dbg !19
  %55 = bitcast i32 %53 to float, !dbg !19
  %56 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %46, i1 true) #1, !dbg !19
  %57 = extractvalue { i32, i32 } %56, 0, !dbg !19
  %58 = extractvalue { i32, i32 } %56, 1, !dbg !19
  %59 = bitcast i32 %57 to float, !dbg !19
  %60 = bitcast i32 %58 to float, !dbg !19
  %61 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %48, i1 true) #1, !dbg !19
  %62 = extractvalue { i32, i32 } %61, 0, !dbg !19
  %63 = extractvalue { i32, i32 } %61, 1, !dbg !19
  %64 = bitcast i32 %62 to float, !dbg !19
  %65 = bitcast i32 %63 to float, !dbg !19
  %66 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %50, i1 true) #1, !dbg !19
  %67 = extractvalue { i32, i32 } %66, 0, !dbg !19
  %68 = extractvalue { i32, i32 } %66, 1, !dbg !19
  %69 = bitcast i32 %67 to float, !dbg !19
  %70 = bitcast i32 %68 to float, !dbg !19
  %71 = fsub float %28, %28, !dbg !20
  %72 = fsub float %30, %30, !dbg !20
  %73 = fsub float %32, %32, !dbg !20
  %74 = fsub float %34, %34, !dbg !20
  %75 = fsub float %36, %36, !dbg !20
  %76 = fsub float %38, %38, !dbg !20
  %77 = fsub float %40, %40, !dbg !20
  %78 = fsub float %42, %42, !dbg !20
  %79 = fmul float %71, %54, !dbg !21
  %80 = fmul float %72, %55, !dbg !21
  %81 = fmul float %73, %59, !dbg !21
  %82 = fmul float %74, %60, !dbg !21
  %83 = fmul float %75, %64, !dbg !21
  %84 = fmul float %76, %65, !dbg !21
  %85 = fmul float %77, %69, !dbg !21
  %86 = fmul float %78, %70, !dbg !21
  %87 = fadd float %79, %28, !dbg !22
  %88 = fadd float %80, %30, !dbg !22
  %89 = fadd float %81, %32, !dbg !22
  %90 = fadd float %82, %34, !dbg !22
  %91 = fadd float %83, %36, !dbg !22
  %92 = fadd float %84, %38, !dbg !22
  %93 = fadd float %85, %40, !dbg !22
  %94 = fadd float %86, %42, !dbg !22
  %95 = sext i32 %13 to i64, !dbg !23
  %96 = getelementptr float, ptr addrspace(1) %5, i64 %95, !dbg !23
  %97 = sext i32 %15 to i64, !dbg !23
  %98 = getelementptr float, ptr addrspace(1) %5, i64 %97, !dbg !23
  %99 = bitcast float %87 to i32, !dbg !24
  %100 = bitcast float %88 to i32, !dbg !24
  %101 = bitcast float %89 to i32, !dbg !24
  %102 = bitcast float %90 to i32, !dbg !24
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %99, i32 %100, i32 %101, i32 %102, ptr addrspace(1) %96, i1 true) #1, !dbg !24
  %103 = bitcast float %91 to i32, !dbg !24
  %104 = bitcast float %92 to i32, !dbg !24
  %105 = bitcast float %93 to i32, !dbg !24
  %106 = bitcast float %94 to i32, !dbg !24
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %103, i32 %104, i32 %105, i32 %106, ptr addrspace(1) %98, i1 true) #1, !dbg !24
  ret void, !dbg !25
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c3a44vsez6ib3db63xkfabjpu72g3mhrszpgbavv6nbprnsdrznd.py", directory: "inductor_cache/3a")
!4 = !{ptr @triton_poi_fused__unsafe_index_add_mul_sub_13, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__unsafe_index_add_mul_sub_13, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__unsafe_index_add_mul_sub_13", linkageName: "triton_poi_fused__unsafe_index_add_mul_sub_13", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 19, scope: !7)
!16 = !DILocation(line: 30, column: 30, scope: !7)
!17 = !DILocation(line: 30, column: 35, scope: !7)
!18 = !DILocation(line: 32, column: 31, scope: !7)
!19 = !DILocation(line: 32, column: 36, scope: !7)
!20 = !DILocation(line: 43, column: 19, scope: !7)
!21 = !DILocation(line: 44, column: 20, scope: !7)
!22 = !DILocation(line: 45, column: 19, scope: !7)
!23 = !DILocation(line: 46, column: 25, scope: !7)
!24 = !DILocation(line: 46, column: 37, scope: !7)
!25 = !DILocation(line: 46, column: 4, scope: !7)
