; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_max_pool2d_with_indices_13(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %6 = shl i32 %5, 10, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 3, !dbg !12
  %9 = and i32 %8, 1016, !dbg !12
  %10 = shl i32 %7, 2, !dbg !12
  %11 = and i32 %10, 508, !dbg !12
  %12 = or disjoint i32 %11, 512, !dbg !12
  %13 = or disjoint i32 %6, %9, !dbg !13
  %14 = or disjoint i32 %13, 4, !dbg !13
  %15 = or disjoint i32 %6, %11, !dbg !13
  %16 = or disjoint i32 %6, %12, !dbg !13
  %17 = icmp slt i32 %13, 2230272, !dbg !14
  %18 = icmp slt i32 %15, 2230272, !dbg !14
  %19 = icmp slt i32 %16, 2230272, !dbg !14
  %20 = srem i32 %13, 128, !dbg !15
  %21 = srem i32 %14, 128, !dbg !15
  %22 = sdiv i32 %13, 557568, !dbg !16
  %23 = mul i32 %22, 2196608, !dbg !17
  %24 = insertelement <2 x i32> poison, i32 %13, i64 0, !dbg !18
  %25 = shufflevector <2 x i32> %24, <2 x i32> poison, <2 x i32> zeroinitializer, !dbg !18
  %26 = sdiv <2 x i32> %25, <i32 8448, i32 128>, !dbg !18
  %27 = srem <2 x i32> %26, splat (i32 66), !dbg !19
  %28 = shl nsw <2 x i32> %27, splat (i32 1), !dbg !20
  %29 = icmp sgt <2 x i32> %27, splat (i32 -1), !dbg !21
  %30 = extractelement <2 x i32> %27, i64 0, !dbg !22
  %31 = extractelement <2 x i32> %27, i64 1, !dbg !23
  %32 = or i32 %30, %31, !dbg !22
  %33 = icmp sgt i32 %32, -1, !dbg !22
  %34 = shl nsw i32 %31, 8, !dbg !23
  %35 = mul nsw i32 %30, 33536, !dbg !24
  %36 = add i32 %34, %23, !dbg !25
  %37 = add i32 %36, %20, !dbg !26
  %38 = add i32 %37, %35, !dbg !27
  %39 = add i32 %36, %21, !dbg !26
  %40 = add i32 %39, %35, !dbg !27
  %41 = sext i32 %38 to i64, !dbg !28
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !28
  %43 = sext i32 %40 to i64, !dbg !28
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !28
  %45 = and i1 %17, %33, !dbg !29
  %46 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %42, i1 %45, i32 -8388608, i1 %45, i32 -8388608, i1 %45, i32 -8388608, i1 %45, i32 -8388608, i1 %45) #2, !dbg !30
  %47 = extractvalue { i32, i32, i32, i32 } %46, 0, !dbg !30
  %48 = extractvalue { i32, i32, i32, i32 } %46, 1, !dbg !30
  %49 = extractvalue { i32, i32, i32, i32 } %46, 2, !dbg !30
  %50 = extractvalue { i32, i32, i32, i32 } %46, 3, !dbg !30
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %44, i1 %45, i32 -8388608, i1 %45, i32 -8388608, i1 %45, i32 -8388608, i1 %45, i32 -8388608, i1 %45) #2, !dbg !30
  %52 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !30
  %53 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !30
  %54 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !30
  %55 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !30
  %56 = or disjoint <2 x i32> %28, splat (i32 1), !dbg !31
  %57 = icmp slt <2 x i32> %56, splat (i32 131), !dbg !32
  %58 = and <2 x i1> %29, %57, !dbg !33
  %59 = extractelement <2 x i1> %58, i64 1, !dbg !34
  %60 = extractelement <2 x i1> %29, i64 0, !dbg !35
  %61 = and i1 %60, %59, !dbg !35
  %62 = add i32 %36, 128, !dbg !36
  %63 = add i32 %62, %20, !dbg !37
  %64 = add i32 %63, %35, !dbg !38
  %65 = add i32 %62, %21, !dbg !37
  %66 = add i32 %65, %35, !dbg !38
  %67 = sext i32 %64 to i64, !dbg !39
  %68 = getelementptr float, ptr addrspace(1) %0, i64 %67, !dbg !39
  %69 = sext i32 %66 to i64, !dbg !39
  %70 = getelementptr float, ptr addrspace(1) %0, i64 %69, !dbg !39
  %71 = and i1 %17, %61, !dbg !40
  %72 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %68, i1 %71, i32 -8388608, i1 %71, i32 -8388608, i1 %71, i32 -8388608, i1 %71, i32 -8388608, i1 %71) #2, !dbg !41
  %73 = extractvalue { i32, i32, i32, i32 } %72, 0, !dbg !41
  %74 = extractvalue { i32, i32, i32, i32 } %72, 1, !dbg !41
  %75 = extractvalue { i32, i32, i32, i32 } %72, 2, !dbg !41
  %76 = extractvalue { i32, i32, i32, i32 } %72, 3, !dbg !41
  %77 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %70, i1 %71, i32 -8388608, i1 %71, i32 -8388608, i1 %71, i32 -8388608, i1 %71, i32 -8388608, i1 %71) #2, !dbg !41
  %78 = extractvalue { i32, i32, i32, i32 } %77, 0, !dbg !41
  %79 = extractvalue { i32, i32, i32, i32 } %77, 1, !dbg !41
  %80 = extractvalue { i32, i32, i32, i32 } %77, 2, !dbg !41
  %81 = extractvalue { i32, i32, i32, i32 } %77, 3, !dbg !41
  %82 = extractelement <2 x i1> %58, i64 0, !dbg !34
  %83 = extractelement <2 x i1> %29, i64 1, !dbg !42
  %84 = and i1 %83, %82, !dbg !42
  %85 = add i32 %36, 16768, !dbg !43
  %86 = add i32 %85, %20, !dbg !44
  %87 = add i32 %86, %35, !dbg !45
  %88 = add i32 %85, %21, !dbg !44
  %89 = add i32 %88, %35, !dbg !45
  %90 = sext i32 %87 to i64, !dbg !46
  %91 = getelementptr float, ptr addrspace(1) %0, i64 %90, !dbg !46
  %92 = sext i32 %89 to i64, !dbg !46
  %93 = getelementptr float, ptr addrspace(1) %0, i64 %92, !dbg !46
  %94 = and i1 %17, %84, !dbg !47
  %95 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %91, i1 %94, i32 -8388608, i1 %94, i32 -8388608, i1 %94, i32 -8388608, i1 %94, i32 -8388608, i1 %94) #2, !dbg !48
  %96 = extractvalue { i32, i32, i32, i32 } %95, 0, !dbg !48
  %97 = extractvalue { i32, i32, i32, i32 } %95, 1, !dbg !48
  %98 = extractvalue { i32, i32, i32, i32 } %95, 2, !dbg !48
  %99 = extractvalue { i32, i32, i32, i32 } %95, 3, !dbg !48
  %100 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %93, i1 %94, i32 -8388608, i1 %94, i32 -8388608, i1 %94, i32 -8388608, i1 %94, i32 -8388608, i1 %94) #2, !dbg !48
  %101 = extractvalue { i32, i32, i32, i32 } %100, 0, !dbg !48
  %102 = extractvalue { i32, i32, i32, i32 } %100, 1, !dbg !48
  %103 = extractvalue { i32, i32, i32, i32 } %100, 2, !dbg !48
  %104 = extractvalue { i32, i32, i32, i32 } %100, 3, !dbg !48
  %105 = and i1 %82, %59, !dbg !34
  %106 = add i32 %36, 16896, !dbg !49
  %107 = add i32 %106, %20, !dbg !50
  %108 = add i32 %107, %35, !dbg !51
  %109 = add i32 %106, %21, !dbg !50
  %110 = add i32 %109, %35, !dbg !51
  %111 = sext i32 %108 to i64, !dbg !52
  %112 = getelementptr float, ptr addrspace(1) %0, i64 %111, !dbg !52
  %113 = sext i32 %110 to i64, !dbg !52
  %114 = getelementptr float, ptr addrspace(1) %0, i64 %113, !dbg !52
  %115 = and i1 %17, %105, !dbg !53
  %116 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %112, i1 %115, i32 -8388608, i1 %115, i32 -8388608, i1 %115, i32 -8388608, i1 %115, i32 -8388608, i1 %115) #2, !dbg !54
  %117 = extractvalue { i32, i32, i32, i32 } %116, 0, !dbg !54
  %118 = extractvalue { i32, i32, i32, i32 } %116, 1, !dbg !54
  %119 = extractvalue { i32, i32, i32, i32 } %116, 2, !dbg !54
  %120 = extractvalue { i32, i32, i32, i32 } %116, 3, !dbg !54
  %121 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %114, i1 %115, i32 -8388608, i1 %115, i32 -8388608, i1 %115, i32 -8388608, i1 %115, i32 -8388608, i1 %115) #2, !dbg !54
  %122 = extractvalue { i32, i32, i32, i32 } %121, 0, !dbg !54
  %123 = extractvalue { i32, i32, i32, i32 } %121, 1, !dbg !54
  %124 = extractvalue { i32, i32, i32, i32 } %121, 2, !dbg !54
  %125 = extractvalue { i32, i32, i32, i32 } %121, 3, !dbg !54
  %126 = insertelement <4 x i32> poison, i32 %47, i64 0, !dbg !30
  %127 = insertelement <4 x i32> %126, i32 %48, i64 1, !dbg !30
  %128 = insertelement <4 x i32> %127, i32 %49, i64 2, !dbg !30
  %129 = insertelement <4 x i32> %128, i32 %50, i64 3, !dbg !30
  %130 = bitcast <4 x i32> %129 to <4 x float>, !dbg !30
  %131 = insertelement <4 x i32> poison, i32 %73, i64 0, !dbg !41
  %132 = insertelement <4 x i32> %131, i32 %74, i64 1, !dbg !41
  %133 = insertelement <4 x i32> %132, i32 %75, i64 2, !dbg !41
  %134 = insertelement <4 x i32> %133, i32 %76, i64 3, !dbg !41
  %135 = bitcast <4 x i32> %134 to <4 x float>, !dbg !41
  %136 = fcmp ogt <4 x float> %135, %130, !dbg !55
  %137 = fcmp uno <4 x float> %135, zeroinitializer, !dbg !59
  %138 = or <4 x i1> %136, %137, !dbg !60
  %.v = select <4 x i1> %138, <4 x i32> %134, <4 x i32> %129, !dbg !61
  %139 = bitcast <4 x i32> %.v to <4 x float>, !dbg !61
  %140 = insertelement <4 x i32> poison, i32 %96, i64 0, !dbg !48
  %141 = insertelement <4 x i32> %140, i32 %97, i64 1, !dbg !48
  %142 = insertelement <4 x i32> %141, i32 %98, i64 2, !dbg !48
  %143 = insertelement <4 x i32> %142, i32 %99, i64 3, !dbg !48
  %144 = bitcast <4 x i32> %143 to <4 x float>, !dbg !48
  %145 = fcmp olt <4 x float> %139, %144, !dbg !62
  %146 = fcmp uno <4 x float> %144, zeroinitializer, !dbg !64
  %147 = or <4 x i1> %146, %145, !dbg !65
  %.v15 = select <4 x i1> %147, <4 x i32> %143, <4 x i32> %.v, !dbg !66
  %148 = bitcast <4 x i32> %.v15 to <4 x float>, !dbg !66
  %149 = insertelement <4 x i32> poison, i32 %117, i64 0, !dbg !54
  %150 = insertelement <4 x i32> %149, i32 %118, i64 1, !dbg !54
  %151 = insertelement <4 x i32> %150, i32 %119, i64 2, !dbg !54
  %152 = insertelement <4 x i32> %151, i32 %120, i64 3, !dbg !54
  %153 = bitcast <4 x i32> %152 to <4 x float>, !dbg !54
  %154 = fcmp olt <4 x float> %148, %153, !dbg !67
  %155 = extractelement <4 x i1> %154, i64 0, !dbg !69
  %156 = extractelement <4 x i1> %154, i64 1, !dbg !69
  %157 = extractelement <4 x i1> %154, i64 2, !dbg !69
  %158 = extractelement <4 x i1> %154, i64 3, !dbg !69
  %159 = zext <4 x i1> %136 to <4 x i8>, !dbg !70
  %160 = select <4 x i1> %145, <4 x i8> splat (i8 2), <4 x i8> %159, !dbg !71
  %161 = select <4 x i1> %154, <4 x i8> splat (i8 3), <4 x i8> %160, !dbg !72
  %162 = insertelement <4 x i32> poison, i32 %52, i64 0, !dbg !30
  %163 = insertelement <4 x i32> %162, i32 %53, i64 1, !dbg !30
  %164 = insertelement <4 x i32> %163, i32 %54, i64 2, !dbg !30
  %165 = insertelement <4 x i32> %164, i32 %55, i64 3, !dbg !30
  %166 = bitcast <4 x i32> %165 to <4 x float>, !dbg !30
  %167 = insertelement <4 x i32> poison, i32 %78, i64 0, !dbg !41
  %168 = insertelement <4 x i32> %167, i32 %79, i64 1, !dbg !41
  %169 = insertelement <4 x i32> %168, i32 %80, i64 2, !dbg !41
  %170 = insertelement <4 x i32> %169, i32 %81, i64 3, !dbg !41
  %171 = bitcast <4 x i32> %170 to <4 x float>, !dbg !41
  %172 = fcmp ogt <4 x float> %171, %166, !dbg !55
  %173 = fcmp uno <4 x float> %171, zeroinitializer, !dbg !59
  %174 = or <4 x i1> %172, %173, !dbg !60
  %.v16 = select <4 x i1> %174, <4 x i32> %170, <4 x i32> %165, !dbg !61
  %175 = bitcast <4 x i32> %.v16 to <4 x float>, !dbg !61
  %176 = insertelement <4 x i32> poison, i32 %101, i64 0, !dbg !48
  %177 = insertelement <4 x i32> %176, i32 %102, i64 1, !dbg !48
  %178 = insertelement <4 x i32> %177, i32 %103, i64 2, !dbg !48
  %179 = insertelement <4 x i32> %178, i32 %104, i64 3, !dbg !48
  %180 = bitcast <4 x i32> %179 to <4 x float>, !dbg !48
  %181 = fcmp olt <4 x float> %175, %180, !dbg !62
  %182 = fcmp uno <4 x float> %180, zeroinitializer, !dbg !64
  %183 = or <4 x i1> %182, %181, !dbg !65
  %.v17 = select <4 x i1> %183, <4 x i32> %179, <4 x i32> %.v16, !dbg !66
  %184 = bitcast <4 x i32> %.v17 to <4 x float>, !dbg !66
  %185 = insertelement <4 x i32> poison, i32 %122, i64 0, !dbg !54
  %186 = insertelement <4 x i32> %185, i32 %123, i64 1, !dbg !54
  %187 = insertelement <4 x i32> %186, i32 %124, i64 2, !dbg !54
  %188 = insertelement <4 x i32> %187, i32 %125, i64 3, !dbg !54
  %189 = bitcast <4 x i32> %188 to <4 x float>, !dbg !54
  %190 = fcmp olt <4 x float> %184, %189, !dbg !67
  %191 = shufflevector <4 x float> %189, <4 x float> %153, <8 x i32> <i32 3, i32 2, i32 1, i32 0, i32 7, i32 6, i32 5, i32 4>, !dbg !73
  %192 = fcmp uno <8 x float> %191, zeroinitializer, !dbg !73
  %193 = extractelement <8 x i1> %192, i64 7, !dbg !69
  %194 = or i1 %193, %155, !dbg !69
  %195 = extractelement <8 x i1> %192, i64 6, !dbg !69
  %196 = or i1 %195, %156, !dbg !69
  %197 = extractelement <8 x i1> %192, i64 5, !dbg !69
  %198 = or i1 %197, %157, !dbg !69
  %199 = extractelement <8 x i1> %192, i64 4, !dbg !69
  %200 = or i1 %199, %158, !dbg !69
  %201 = extractelement <4 x i1> %190, i64 0, !dbg !69
  %202 = extractelement <8 x i1> %192, i64 3, !dbg !69
  %203 = or i1 %202, %201, !dbg !69
  %204 = extractelement <4 x i1> %190, i64 1, !dbg !69
  %205 = extractelement <8 x i1> %192, i64 2, !dbg !69
  %206 = or i1 %205, %204, !dbg !69
  %207 = extractelement <4 x i1> %190, i64 2, !dbg !69
  %208 = extractelement <8 x i1> %192, i64 1, !dbg !69
  %209 = or i1 %208, %207, !dbg !69
  %210 = extractelement <4 x i1> %190, i64 3, !dbg !69
  %211 = extractelement <8 x i1> %192, i64 0, !dbg !69
  %212 = or i1 %211, %210, !dbg !69
  %213 = zext <4 x i1> %172 to <4 x i8>, !dbg !70
  %214 = select <4 x i1> %181, <4 x i8> splat (i8 2), <4 x i8> %213, !dbg !71
  %215 = select <4 x i1> %190, <4 x i8> splat (i8 3), <4 x i8> %214, !dbg !72
  %216 = sext i32 %15 to i64, !dbg !74
  %217 = getelementptr float, ptr addrspace(1) %1, i64 %216, !dbg !74
  %218 = sext i32 %16 to i64, !dbg !74
  %219 = getelementptr float, ptr addrspace(1) %1, i64 %218, !dbg !74
  %220 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %9, !dbg !75
  %221 = extractelement <4 x i32> %.v15, i64 0, !dbg !75
  %222 = select i1 %194, i32 %117, i32 %221, !dbg !76
  %223 = extractelement <4 x i32> %.v15, i64 1, !dbg !75
  %224 = select i1 %196, i32 %118, i32 %223, !dbg !76
  %225 = extractelement <4 x i32> %.v15, i64 2, !dbg !75
  %226 = select i1 %198, i32 %119, i32 %225, !dbg !76
  %227 = extractelement <4 x i32> %.v15, i64 3, !dbg !75
  %228 = select i1 %200, i32 %120, i32 %227, !dbg !76
  %229 = extractelement <4 x i32> %.v17, i64 0, !dbg !75
  %230 = select i1 %203, i32 %122, i32 %229, !dbg !76
  %231 = extractelement <4 x i32> %.v17, i64 1, !dbg !75
  %232 = select i1 %206, i32 %123, i32 %231, !dbg !76
  %233 = extractelement <4 x i32> %.v17, i64 2, !dbg !75
  %234 = select i1 %209, i32 %124, i32 %233, !dbg !76
  %235 = extractelement <4 x i32> %.v17, i64 3, !dbg !75
  %236 = select i1 %212, i32 %125, i32 %235, !dbg !76
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %220, i32 %222, i32 %224, i32 %226, i32 %228, i1 true) #2, !dbg !75
  %237 = getelementptr inbounds i8, ptr addrspace(3) %220, i32 16, !dbg !75
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %237, i32 %230, i32 %232, i32 %234, i32 %236, i1 true) #2, !dbg !75
  tail call void @llvm.nvvm.barrier0(), !dbg !75
  %238 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %11, !dbg !75
  %239 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !75
  %240 = load <4 x i32>, ptr addrspace(3) %239, align 16, !dbg !75
  %.extract = load i32, ptr addrspace(3) %238, align 16, !dbg !75
  %241 = getelementptr inbounds i8, ptr addrspace(3) %238, i32 4, !dbg !75
  %.extract8 = load i32, ptr addrspace(3) %241, align 4, !dbg !75
  %242 = getelementptr inbounds i8, ptr addrspace(3) %238, i32 8, !dbg !75
  %.extract9 = load i32, ptr addrspace(3) %242, align 8, !dbg !75
  %243 = getelementptr inbounds i8, ptr addrspace(3) %238, i32 12, !dbg !75
  %.extract10 = load i32, ptr addrspace(3) %243, align 4, !dbg !75
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %217, i1 %18) #2, !dbg !75
  %.extract11 = extractelement <4 x i32> %240, i64 0, !dbg !75
  %.extract12 = extractelement <4 x i32> %240, i64 1, !dbg !75
  %.extract13 = extractelement <4 x i32> %240, i64 2, !dbg !75
  %.extract14 = extractelement <4 x i32> %240, i64 3, !dbg !75
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %219, i1 %19) #2, !dbg !75
  %244 = sext i32 %13 to i64, !dbg !77
  %245 = getelementptr i8, ptr addrspace(1) %2, i64 %244, !dbg !77
  %246 = bitcast <4 x i8> %161 to i32, !dbg !78
  %247 = bitcast <4 x i8> %215 to i32, !dbg !78
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %246, i32 %247, ptr addrspace(1) %245, i1 %17) #2, !dbg !78
  ret void, !dbg !79
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "crezbifnl3rqj5xvp5rvfqjfbcxnwop3ezaqmvttzjzkukrm3bwj.py", directory: "inductor_cache/re")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_13, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_13, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_13", linkageName: "triton_poi_fused_max_pool2d_with_indices_13", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 19, scope: !7)
!16 = !DILocation(line: 27, column: 19, scope: !7)
!17 = !DILocation(line: 40, column: 64, scope: !7)
!18 = !DILocation(line: 24, column: 21, scope: !7)
!19 = !DILocation(line: 24, column: 29, scope: !7)
!20 = !DILocation(line: 29, column: 13, scope: !7)
!21 = !DILocation(line: 31, column: 19, scope: !7)
!22 = !DILocation(line: 39, column: 19, scope: !7)
!23 = !DILocation(line: 40, column: 40, scope: !7)
!24 = !DILocation(line: 40, column: 51, scope: !7)
!25 = !DILocation(line: 40, column: 36, scope: !7)
!26 = !DILocation(line: 40, column: 45, scope: !7)
!27 = !DILocation(line: 40, column: 56, scope: !7)
!28 = !DILocation(line: 40, column: 31, scope: !7)
!29 = !DILocation(line: 40, column: 77, scope: !7)
!30 = !DILocation(line: 40, column: 69, scope: !7)
!31 = !DILocation(line: 48, column: 16, scope: !7)
!32 = !DILocation(line: 50, column: 20, scope: !7)
!33 = !DILocation(line: 51, column: 20, scope: !7)
!34 = !DILocation(line: 55, column: 20, scope: !7)
!35 = !DILocation(line: 45, column: 19, scope: !7)
!36 = !DILocation(line: 46, column: 42, scope: !7)
!37 = !DILocation(line: 46, column: 51, scope: !7)
!38 = !DILocation(line: 46, column: 62, scope: !7)
!39 = !DILocation(line: 46, column: 31, scope: !7)
!40 = !DILocation(line: 46, column: 83, scope: !7)
!41 = !DILocation(line: 46, column: 75, scope: !7)
!42 = !DILocation(line: 52, column: 20, scope: !7)
!43 = !DILocation(line: 53, column: 44, scope: !7)
!44 = !DILocation(line: 53, column: 53, scope: !7)
!45 = !DILocation(line: 53, column: 64, scope: !7)
!46 = !DILocation(line: 53, column: 31, scope: !7)
!47 = !DILocation(line: 53, column: 85, scope: !7)
!48 = !DILocation(line: 53, column: 77, scope: !7)
!49 = !DILocation(line: 56, column: 44, scope: !7)
!50 = !DILocation(line: 56, column: 53, scope: !7)
!51 = !DILocation(line: 56, column: 64, scope: !7)
!52 = !DILocation(line: 56, column: 31, scope: !7)
!53 = !DILocation(line: 56, column: 85, scope: !7)
!54 = !DILocation(line: 56, column: 77, scope: !7)
!55 = !DILocation(line: 118, column: 15, scope: !56, inlinedAt: !58)
!56 = distinct !DILexicalBlockFile(scope: !7, file: !57, discriminator: 0)
!57 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!58 = !DILocation(line: 47, column: 42, scope: !7)
!59 = !DILocation(line: 120, column: 21, scope: !56, inlinedAt: !58)
!60 = !DILocation(line: 120, column: 16, scope: !56, inlinedAt: !58)
!61 = !DILocation(line: 121, column: 29, scope: !56, inlinedAt: !58)
!62 = !DILocation(line: 118, column: 15, scope: !56, inlinedAt: !63)
!63 = !DILocation(line: 54, column: 42, scope: !7)
!64 = !DILocation(line: 120, column: 21, scope: !56, inlinedAt: !63)
!65 = !DILocation(line: 120, column: 16, scope: !56, inlinedAt: !63)
!66 = !DILocation(line: 121, column: 29, scope: !56, inlinedAt: !63)
!67 = !DILocation(line: 118, column: 15, scope: !56, inlinedAt: !68)
!68 = !DILocation(line: 57, column: 42, scope: !7)
!69 = !DILocation(line: 120, column: 16, scope: !56, inlinedAt: !68)
!70 = !DILocation(line: 61, column: 35, scope: !7)
!71 = !DILocation(line: 64, column: 35, scope: !7)
!72 = !DILocation(line: 67, column: 35, scope: !7)
!73 = !DILocation(line: 120, column: 21, scope: !56, inlinedAt: !68)
!74 = !DILocation(line: 68, column: 25, scope: !7)
!75 = !DILocation(line: 68, column: 37, scope: !7)
!76 = !DILocation(line: 121, column: 29, scope: !56, inlinedAt: !68)
!77 = !DILocation(line: 69, column: 25, scope: !7)
!78 = !DILocation(line: 69, column: 37, scope: !7)
!79 = !DILocation(line: 69, column: 4, scope: !7)
