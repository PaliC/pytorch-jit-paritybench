; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused__native_batch_norm_legit_no_training_add_convolution_mean_relu_13(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, i32 %12, i32 %13) local_unnamed_addr !dbg !7 {
__nv_sqrtf.exit:
  %14 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %15 = shl i32 %14, 7, !dbg !11
  %16 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %17 = lshr i32 %16, 2, !dbg !12
  %18 = and i32 %17, 63, !dbg !12
  %19 = or disjoint i32 %18, 64, !dbg !12
  %20 = or disjoint i32 %15, %18, !dbg !13
  %21 = or disjoint i32 %15, %19, !dbg !13
  %22 = icmp slt i32 %20, 256, !dbg !14
  %23 = icmp slt i32 %21, 256, !dbg !14
  %24 = shl i32 %16, 2, !dbg !15
  %25 = and i32 %24, 12, !dbg !15
  %26 = srem i32 %20, 64, !dbg !16
  %27 = srem i32 %21, 64, !dbg !16
  %28 = shl i32 %20, 4, !dbg !17
  %29 = shl i32 %21, 4, !dbg !17
  %30 = or disjoint i32 %28, %25, !dbg !18
  %31 = or disjoint i32 %29, %25, !dbg !18
  %32 = sext i32 %30 to i64, !dbg !19
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !19
  %34 = sext i32 %31 to i64, !dbg !19
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !19
  %36 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %33, i1 %22, i32 0, i1 %22, i32 0, i1 %22, i32 0, i1 %22, i32 0, i1 %22) #5, !dbg !20
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %35, i1 %23, i32 0, i1 %23, i32 0, i1 %23, i32 0, i1 %23, i32 0, i1 %23) #5, !dbg !20
  %38 = sext i32 %26 to i64, !dbg !21
  %39 = getelementptr float, ptr addrspace(1) %2, i64 %38, !dbg !21
  %40 = sext i32 %27 to i64, !dbg !21
  %41 = getelementptr float, ptr addrspace(1) %2, i64 %40, !dbg !21
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 %22) #5, !dbg !22
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 %22) #5, !dbg !22
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 %22) #5, !dbg !22
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 %22) #5, !dbg !22
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 %23) #5, !dbg !22
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 %23) #5, !dbg !22
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 %23) #5, !dbg !22
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 %23) #5, !dbg !22
  %50 = getelementptr float, ptr addrspace(1) %3, i64 %38, !dbg !23
  %51 = getelementptr float, ptr addrspace(1) %3, i64 %40, !dbg !23
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 %22) #5, !dbg !24
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 %22) #5, !dbg !24
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 %22) #5, !dbg !24
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 %22) #5, !dbg !24
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 %23) #5, !dbg !24
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 %23) #5, !dbg !24
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 %23) #5, !dbg !24
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 %23) #5, !dbg !24
  %60 = getelementptr float, ptr addrspace(1) %4, i64 %38, !dbg !25
  %61 = getelementptr float, ptr addrspace(1) %4, i64 %40, !dbg !25
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 %22) #5, !dbg !26
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 %22) #5, !dbg !26
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 %22) #5, !dbg !26
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 %22) #5, !dbg !26
  %66 = bitcast i32 %65 to float, !dbg !26
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 %23) #5, !dbg !26
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 %23) #5, !dbg !26
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 %23) #5, !dbg !26
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 %23) #5, !dbg !26
  %71 = bitcast i32 %70 to float, !dbg !26
  %72 = getelementptr float, ptr addrspace(1) %5, i64 %38, !dbg !27
  %73 = getelementptr float, ptr addrspace(1) %5, i64 %40, !dbg !27
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 %22) #5, !dbg !28
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 %22) #5, !dbg !28
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 %22) #5, !dbg !28
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 %22) #5, !dbg !28
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 %23) #5, !dbg !28
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 %23) #5, !dbg !28
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 %23) #5, !dbg !28
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %73, i1 %23) #5, !dbg !28
  %82 = getelementptr float, ptr addrspace(1) %6, i64 %38, !dbg !29
  %83 = getelementptr float, ptr addrspace(1) %6, i64 %40, !dbg !29
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 %22) #5, !dbg !30
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 %22) #5, !dbg !30
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 %22) #5, !dbg !30
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 %22) #5, !dbg !30
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %83, i1 %23) #5, !dbg !30
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %83, i1 %23) #5, !dbg !30
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %83, i1 %23) #5, !dbg !30
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %83, i1 %23) #5, !dbg !30
  %92 = getelementptr float, ptr addrspace(1) %7, i64 %32, !dbg !31
  %93 = getelementptr float, ptr addrspace(1) %7, i64 %34, !dbg !31
  %94 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %92, i1 %22, i32 0, i1 %22, i32 0, i1 %22, i32 0, i1 %22, i32 0, i1 %22) #5, !dbg !32
  %95 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %93, i1 %23, i32 0, i1 %23, i32 0, i1 %23, i32 0, i1 %23, i32 0, i1 %23) #5, !dbg !32
  %96 = getelementptr float, ptr addrspace(1) %8, i64 %38, !dbg !33
  %97 = getelementptr float, ptr addrspace(1) %8, i64 %40, !dbg !33
  %98 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 %22) #5, !dbg !34
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 %22) #5, !dbg !34
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 %22) #5, !dbg !34
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 %22) #5, !dbg !34
  %102 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %97, i1 %23) #5, !dbg !34
  %103 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %97, i1 %23) #5, !dbg !34
  %104 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %97, i1 %23) #5, !dbg !34
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %97, i1 %23) #5, !dbg !34
  %106 = getelementptr float, ptr addrspace(1) %9, i64 %38, !dbg !35
  %107 = getelementptr float, ptr addrspace(1) %9, i64 %40, !dbg !35
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %106, i1 %22) #5, !dbg !36
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %106, i1 %22) #5, !dbg !36
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %106, i1 %22) #5, !dbg !36
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %106, i1 %22) #5, !dbg !36
  %112 = bitcast i32 %111 to float, !dbg !36
  %113 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %107, i1 %23) #5, !dbg !36
  %114 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %107, i1 %23) #5, !dbg !36
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %107, i1 %23) #5, !dbg !36
  %116 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %107, i1 %23) #5, !dbg !36
  %117 = bitcast i32 %116 to float, !dbg !36
  %118 = getelementptr float, ptr addrspace(1) %10, i64 %38, !dbg !37
  %119 = getelementptr float, ptr addrspace(1) %10, i64 %40, !dbg !37
  %120 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %118, i1 %22) #5, !dbg !38
  %121 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %118, i1 %22) #5, !dbg !38
  %122 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %118, i1 %22) #5, !dbg !38
  %123 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %118, i1 %22) #5, !dbg !38
  %124 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %119, i1 %23) #5, !dbg !38
  %125 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %119, i1 %23) #5, !dbg !38
  %126 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %119, i1 %23) #5, !dbg !38
  %127 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %119, i1 %23) #5, !dbg !38
  %128 = getelementptr float, ptr addrspace(1) %11, i64 %38, !dbg !39
  %129 = getelementptr float, ptr addrspace(1) %11, i64 %40, !dbg !39
  %130 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %128, i1 %22) #5, !dbg !40
  %131 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %128, i1 %22) #5, !dbg !40
  %132 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %128, i1 %22) #5, !dbg !40
  %133 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %128, i1 %22) #5, !dbg !40
  %134 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %129, i1 %23) #5, !dbg !40
  %135 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %129, i1 %23) #5, !dbg !40
  %136 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %129, i1 %23) #5, !dbg !40
  %137 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %129, i1 %23) #5, !dbg !40
  %138 = fadd float %66, 0x3EE4F8B580000000, !dbg !41
  %139 = fadd float %71, 0x3EE4F8B580000000, !dbg !41
  %140 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !42
  %141 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !42
  %142 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !42
  %143 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !42
  %144 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !42
  %145 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !42
  %146 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !42
  %.not.i13 = icmp eq i32 %146, 0, !dbg !42
  %147 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !42
  %.not1.i16 = icmp eq i32 %147, 0, !dbg !42
  br i1 %.not.i13, label %153, label %148, !dbg !42

148:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i16, label %151, label %149, !dbg !42

149:                                              ; preds = %148
  %150 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %138) #5, !dbg !42
  br label %__nv_sqrtf.exit17, !dbg !42

151:                                              ; preds = %148
  %152 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %138) #5, !dbg !42
  br label %__nv_sqrtf.exit17, !dbg !42

153:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i16, label %156, label %154, !dbg !42

154:                                              ; preds = %153
  %155 = tail call float @llvm.nvvm.sqrt.rn.f(float %138) #5, !dbg !42
  br label %__nv_sqrtf.exit17, !dbg !42

156:                                              ; preds = %153
  %157 = tail call float @llvm.nvvm.sqrt.approx.f(float %138) #5, !dbg !42
  br label %__nv_sqrtf.exit17, !dbg !42

__nv_sqrtf.exit17:                                ; preds = %149, %151, %154, %156
  %.0.i15 = phi float [ %150, %149 ], [ %152, %151 ], [ %155, %154 ], [ %157, %156 ], !dbg !42
  %158 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !42
  %159 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !42
  %160 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !42
  %161 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !42
  %162 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !42
  %163 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !42
  %164 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !42
  %.not.i33 = icmp eq i32 %164, 0, !dbg !42
  %165 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !42
  %.not1.i36 = icmp eq i32 %165, 0, !dbg !42
  br i1 %.not.i33, label %171, label %166, !dbg !42

166:                                              ; preds = %__nv_sqrtf.exit17
  br i1 %.not1.i36, label %169, label %167, !dbg !42

167:                                              ; preds = %166
  %168 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %139) #5, !dbg !42
  br label %__nv_sqrtf.exit37, !dbg !42

169:                                              ; preds = %166
  %170 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %139) #5, !dbg !42
  br label %__nv_sqrtf.exit37, !dbg !42

171:                                              ; preds = %__nv_sqrtf.exit17
  br i1 %.not1.i36, label %174, label %172, !dbg !42

172:                                              ; preds = %171
  %173 = tail call float @llvm.nvvm.sqrt.rn.f(float %139) #5, !dbg !42
  br label %__nv_sqrtf.exit37, !dbg !42

174:                                              ; preds = %171
  %175 = tail call float @llvm.nvvm.sqrt.approx.f(float %139) #5, !dbg !42
  br label %__nv_sqrtf.exit37, !dbg !42

__nv_sqrtf.exit37:                                ; preds = %167, %169, %172, %174
  %.0.i35 = phi float [ %168, %167 ], [ %170, %169 ], [ %173, %172 ], [ %175, %174 ], !dbg !42
  %176 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i15) #5, !dbg !43
  %177 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i35) #5, !dbg !43
  %178 = fadd float %112, 0x3EE4F8B580000000, !dbg !44
  %179 = fadd float %117, 0x3EE4F8B580000000, !dbg !44
  %180 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !45
  %181 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !45
  %182 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !45
  %183 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !45
  %184 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !45
  %185 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !45
  %186 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !45
  %.not.i53 = icmp eq i32 %186, 0, !dbg !45
  %187 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !45
  %.not1.i56 = icmp eq i32 %187, 0, !dbg !45
  br i1 %.not.i53, label %193, label %188, !dbg !45

188:                                              ; preds = %__nv_sqrtf.exit37
  br i1 %.not1.i56, label %191, label %189, !dbg !45

189:                                              ; preds = %188
  %190 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %178) #5, !dbg !45
  br label %__nv_sqrtf.exit57, !dbg !45

191:                                              ; preds = %188
  %192 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %178) #5, !dbg !45
  br label %__nv_sqrtf.exit57, !dbg !45

193:                                              ; preds = %__nv_sqrtf.exit37
  br i1 %.not1.i56, label %196, label %194, !dbg !45

194:                                              ; preds = %193
  %195 = tail call float @llvm.nvvm.sqrt.rn.f(float %178) #5, !dbg !45
  br label %__nv_sqrtf.exit57, !dbg !45

196:                                              ; preds = %193
  %197 = tail call float @llvm.nvvm.sqrt.approx.f(float %178) #5, !dbg !45
  br label %__nv_sqrtf.exit57, !dbg !45

__nv_sqrtf.exit57:                                ; preds = %189, %191, %194, %196
  %.0.i55 = phi float [ %190, %189 ], [ %192, %191 ], [ %195, %194 ], [ %197, %196 ], !dbg !45
  %198 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !45
  %199 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !45
  %200 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !45
  %201 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !45
  %202 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !45
  %203 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !45
  %204 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !45
  %.not.i73 = icmp eq i32 %204, 0, !dbg !45
  %205 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !45
  %.not1.i76 = icmp eq i32 %205, 0, !dbg !45
  br i1 %.not.i73, label %211, label %206, !dbg !45

206:                                              ; preds = %__nv_sqrtf.exit57
  br i1 %.not1.i76, label %209, label %207, !dbg !45

207:                                              ; preds = %206
  %208 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %179) #5, !dbg !45
  br label %__nv_sqrtf.exit77, !dbg !45

209:                                              ; preds = %206
  %210 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %179) #5, !dbg !45
  br label %__nv_sqrtf.exit77, !dbg !45

211:                                              ; preds = %__nv_sqrtf.exit57
  br i1 %.not1.i76, label %214, label %212, !dbg !45

212:                                              ; preds = %211
  %213 = tail call float @llvm.nvvm.sqrt.rn.f(float %179) #5, !dbg !45
  br label %__nv_sqrtf.exit77, !dbg !45

214:                                              ; preds = %211
  %215 = tail call float @llvm.nvvm.sqrt.approx.f(float %179) #5, !dbg !45
  br label %__nv_sqrtf.exit77, !dbg !45

__nv_sqrtf.exit77:                                ; preds = %207, %209, %212, %214
  %.0.i75 = phi float [ %208, %207 ], [ %210, %209 ], [ %213, %212 ], [ %215, %214 ], !dbg !45
  %216 = extractvalue { i32, i32, i32, i32 } %95, 3, !dbg !32
  %217 = bitcast i32 %216 to float, !dbg !32
  %218 = insertelement <2 x i32> poison, i32 %59, i64 0, !dbg !34
  %219 = insertelement <2 x i32> %218, i32 %105, i64 1, !dbg !34
  %220 = bitcast <2 x i32> %219 to <2 x float>, !dbg !34
  %221 = extractvalue { i32, i32, i32, i32 } %95, 2, !dbg !32
  %222 = bitcast i32 %221 to float, !dbg !32
  %223 = extractvalue { i32, i32, i32, i32 } %95, 1, !dbg !32
  %224 = bitcast i32 %223 to float, !dbg !32
  %225 = extractvalue { i32, i32, i32, i32 } %95, 0, !dbg !32
  %226 = bitcast i32 %225 to float, !dbg !32
  %227 = extractvalue { i32, i32, i32, i32 } %94, 3, !dbg !32
  %228 = bitcast i32 %227 to float, !dbg !32
  %229 = insertelement <2 x i32> poison, i32 %55, i64 0, !dbg !34
  %230 = insertelement <2 x i32> %229, i32 %101, i64 1, !dbg !34
  %231 = bitcast <2 x i32> %230 to <2 x float>, !dbg !34
  %232 = extractvalue { i32, i32, i32, i32 } %94, 2, !dbg !32
  %233 = bitcast i32 %232 to float, !dbg !32
  %234 = extractvalue { i32, i32, i32, i32 } %94, 1, !dbg !32
  %235 = bitcast i32 %234 to float, !dbg !32
  %236 = extractvalue { i32, i32, i32, i32 } %94, 0, !dbg !32
  %237 = bitcast i32 %236 to float, !dbg !32
  %238 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !20
  %239 = bitcast i32 %238 to float, !dbg !20
  %240 = bitcast i32 %49 to float, !dbg !22
  %241 = fadd float %239, %240, !dbg !46
  %242 = insertelement <2 x i32> poison, i32 %81, i64 0, !dbg !38
  %243 = insertelement <2 x i32> %242, i32 %127, i64 1, !dbg !38
  %244 = bitcast <2 x i32> %243 to <2 x float>, !dbg !38
  %245 = insertelement <2 x i32> poison, i32 %91, i64 0, !dbg !40
  %246 = insertelement <2 x i32> %245, i32 %137, i64 1, !dbg !40
  %247 = bitcast <2 x i32> %246 to <2 x float>, !dbg !40
  %248 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !20
  %249 = bitcast i32 %248 to float, !dbg !20
  %250 = fadd float %249, %240, !dbg !46
  %251 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !20
  %252 = bitcast i32 %251 to float, !dbg !20
  %253 = fadd float %252, %240, !dbg !46
  %254 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !20
  %255 = bitcast i32 %254 to float, !dbg !20
  %256 = fadd float %255, %240, !dbg !46
  %257 = extractvalue { i32, i32, i32, i32 } %36, 3, !dbg !20
  %258 = bitcast i32 %257 to float, !dbg !20
  %259 = bitcast i32 %45 to float, !dbg !22
  %260 = fadd float %258, %259, !dbg !46
  %261 = insertelement <2 x i32> poison, i32 %77, i64 0, !dbg !38
  %262 = insertelement <2 x i32> %261, i32 %123, i64 1, !dbg !38
  %263 = bitcast <2 x i32> %262 to <2 x float>, !dbg !38
  %264 = insertelement <2 x i32> poison, i32 %87, i64 0, !dbg !40
  %265 = insertelement <2 x i32> %264, i32 %133, i64 1, !dbg !40
  %266 = bitcast <2 x i32> %265 to <2 x float>, !dbg !40
  %267 = extractvalue { i32, i32, i32, i32 } %36, 2, !dbg !20
  %268 = bitcast i32 %267 to float, !dbg !20
  %269 = fadd float %268, %259, !dbg !46
  %270 = extractvalue { i32, i32, i32, i32 } %36, 1, !dbg !20
  %271 = bitcast i32 %270 to float, !dbg !20
  %272 = fadd float %271, %259, !dbg !46
  %273 = extractvalue { i32, i32, i32, i32 } %36, 0, !dbg !20
  %274 = bitcast i32 %273 to float, !dbg !20
  %275 = fadd float %274, %259, !dbg !46
  %276 = and i32 %16, 127, !dbg !12
  %277 = or disjoint i32 %15, %276, !dbg !13
  %278 = icmp slt i32 %277, 256, !dbg !14
  %279 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i55) #5, !dbg !47
  %280 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i75) #5, !dbg !47
  %281 = insertelement <2 x float> poison, float %269, i64 0, !dbg !48
  %282 = insertelement <2 x float> %281, float %233, i64 1, !dbg !48
  %283 = fsub <2 x float> %282, %231, !dbg !48
  %284 = insertelement <2 x float> poison, float %176, i64 0, !dbg !49
  %285 = insertelement <2 x float> %284, float %279, i64 1, !dbg !49
  %286 = fmul <2 x float> %283, %285, !dbg !49
  %287 = fmul <2 x float> %286, %263, !dbg !50
  %288 = fadd <2 x float> %287, %266, !dbg !51
  %289 = insertelement <2 x float> poison, float %260, i64 0, !dbg !48
  %290 = insertelement <2 x float> %289, float %228, i64 1, !dbg !48
  %291 = fsub <2 x float> %290, %231, !dbg !48
  %292 = fmul <2 x float> %291, %285, !dbg !49
  %293 = fmul <2 x float> %292, %263, !dbg !50
  %294 = fadd <2 x float> %293, %266, !dbg !51
  %295 = insertelement <2 x float> poison, float %250, i64 0, !dbg !48
  %296 = insertelement <2 x float> %295, float %222, i64 1, !dbg !48
  %297 = fsub <2 x float> %296, %220, !dbg !48
  %298 = insertelement <2 x float> poison, float %177, i64 0, !dbg !49
  %299 = insertelement <2 x float> %298, float %280, i64 1, !dbg !49
  %300 = fmul <2 x float> %297, %299, !dbg !49
  %301 = fmul <2 x float> %300, %244, !dbg !50
  %302 = fadd <2 x float> %301, %247, !dbg !51
  %303 = insertelement <2 x float> poison, float %241, i64 0, !dbg !48
  %304 = insertelement <2 x float> %303, float %217, i64 1, !dbg !48
  %305 = fsub <2 x float> %304, %220, !dbg !48
  %306 = fmul <2 x float> %305, %299, !dbg !49
  %307 = fmul <2 x float> %306, %244, !dbg !50
  %308 = fadd <2 x float> %307, %247, !dbg !51
  %shift = shufflevector <2 x float> %288, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !52
  %309 = fadd <2 x float> %288, %shift, !dbg !52
  %310 = extractelement <2 x float> %309, i64 0, !dbg !52
  %shift78 = shufflevector <2 x float> %294, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !52
  %311 = fadd <2 x float> %294, %shift78, !dbg !52
  %312 = extractelement <2 x float> %311, i64 0, !dbg !52
  %shift79 = shufflevector <2 x float> %302, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !52
  %313 = fadd <2 x float> %302, %shift79, !dbg !52
  %314 = extractelement <2 x float> %313, i64 0, !dbg !52
  %shift80 = shufflevector <2 x float> %308, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !52
  %315 = fadd <2 x float> %308, %shift80, !dbg !52
  %316 = extractelement <2 x float> %315, i64 0, !dbg !52
  %317 = fcmp olt float %310, 0.000000e+00, !dbg !53
  %318 = fcmp olt float %312, 0.000000e+00, !dbg !53
  %319 = fcmp olt float %314, 0.000000e+00, !dbg !53
  %320 = fcmp olt float %316, 0.000000e+00, !dbg !53
  %321 = insertelement <2 x float> poison, float %272, i64 0, !dbg !57
  %322 = insertelement <2 x float> %321, float %237, i64 1, !dbg !57
  %323 = fsub <2 x float> %322, %231, !dbg !57
  %324 = insertelement <2 x float> poison, float %275, i64 0, !dbg !48
  %325 = insertelement <2 x float> %324, float %235, i64 1, !dbg !48
  %326 = fsub <2 x float> %325, %231, !dbg !48
  %327 = fmul <2 x float> %323, %285, !dbg !58
  %328 = fmul <2 x float> %326, %285, !dbg !49
  %329 = fmul <2 x float> %327, %263, !dbg !59
  %330 = fmul <2 x float> %328, %263, !dbg !50
  %331 = fadd <2 x float> %329, %266, !dbg !60
  %332 = fadd <2 x float> %330, %266, !dbg !51
  %333 = shufflevector <2 x float> %332, <2 x float> poison, <2 x i32> <i32 1, i32 0>, !dbg !51
  %334 = fadd <2 x float> %331, %333, !dbg !52
  %335 = fcmp olt <2 x float> %334, zeroinitializer, !dbg !53
  %336 = select <2 x i1> %335, <2 x float> zeroinitializer, <2 x float> %334, !dbg !61
  %337 = select i1 %317, float 0.000000e+00, float %310, !dbg !61
  %338 = select i1 %318, float 0.000000e+00, float %312, !dbg !61
  %339 = insertelement <2 x float> poison, float %253, i64 0, !dbg !57
  %340 = insertelement <2 x float> %339, float %226, i64 1, !dbg !57
  %341 = fsub <2 x float> %340, %220, !dbg !57
  %342 = insertelement <2 x float> poison, float %256, i64 0, !dbg !48
  %343 = insertelement <2 x float> %342, float %224, i64 1, !dbg !48
  %344 = fsub <2 x float> %343, %220, !dbg !48
  %345 = fmul <2 x float> %341, %299, !dbg !58
  %346 = fmul <2 x float> %344, %299, !dbg !49
  %347 = fmul <2 x float> %345, %244, !dbg !59
  %348 = fmul <2 x float> %346, %244, !dbg !50
  %349 = fadd <2 x float> %347, %247, !dbg !60
  %350 = fadd <2 x float> %348, %247, !dbg !51
  %351 = shufflevector <2 x float> %350, <2 x float> poison, <2 x i32> <i32 1, i32 0>, !dbg !51
  %352 = fadd <2 x float> %349, %351, !dbg !52
  %353 = fcmp olt <2 x float> %352, zeroinitializer, !dbg !53
  %354 = select <2 x i1> %353, <2 x float> zeroinitializer, <2 x float> %352, !dbg !61
  %355 = select i1 %319, float 0.000000e+00, float %314, !dbg !61
  %356 = select i1 %320, float 0.000000e+00, float %316, !dbg !61
  %shift81 = shufflevector <2 x float> %336, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !62
  %357 = fadd <2 x float> %shift81, %336, !dbg !62
  %358 = extractelement <2 x float> %357, i64 0, !dbg !62
  %359 = fadd float %337, %358, !dbg !62
  %360 = fadd float %338, %359, !dbg !62
  %361 = select i1 %22, float %360, float 0.000000e+00, !dbg !62
  %shift82 = shufflevector <2 x float> %354, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !62
  %362 = fadd <2 x float> %shift82, %354, !dbg !62
  %363 = extractelement <2 x float> %362, i64 0, !dbg !62
  %364 = fadd float %355, %363, !dbg !62
  %365 = fadd float %356, %364, !dbg !62
  %366 = select i1 %23, float %365, float 0.000000e+00, !dbg !62
  %367 = bitcast float %361 to i32, !dbg !67
  %368 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %367, i32 2, i32 31), !dbg !67
  %369 = bitcast i32 %368 to float, !dbg !67
  %370 = fadd float %361, %369, !dbg !62
  %371 = bitcast float %370 to i32, !dbg !67
  %372 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %371, i32 1, i32 31), !dbg !67
  %373 = bitcast i32 %372 to float, !dbg !67
  %374 = fadd float %370, %373, !dbg !62
  %375 = bitcast float %366 to i32, !dbg !67
  %376 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %375, i32 2, i32 31), !dbg !67
  %377 = bitcast i32 %376 to float, !dbg !67
  %378 = fadd float %366, %377, !dbg !62
  %379 = bitcast float %378 to i32, !dbg !67
  %380 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %379, i32 1, i32 31), !dbg !67
  %381 = bitcast i32 %380 to float, !dbg !67
  %382 = fadd float %378, %381, !dbg !62
  %383 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %18, !dbg !68
  %384 = bitcast float %374 to <1 x i32>, !dbg !68
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %383, <1 x i32> %384, i1 true) #5, !dbg !68
  %385 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %19, !dbg !68
  %386 = bitcast float %382 to <1 x i32>, !dbg !68
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %385, <1 x i32> %386, i1 true) #5, !dbg !68
  tail call void @llvm.nvvm.barrier0(), !dbg !68
  %387 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %276, !dbg !68
  %388 = load float, ptr addrspace(3) %387, align 4, !dbg !68
  %389 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %388, float 1.600000e+01) #5, !dbg !68
  %390 = bitcast float %275 to i32, !dbg !69
  %391 = bitcast float %272 to i32, !dbg !69
  %392 = bitcast float %269 to i32, !dbg !69
  %393 = bitcast float %260 to i32, !dbg !69
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %390, i32 %391, i32 %392, i32 %393, ptr addrspace(1) %33, i1 %22) #5, !dbg !69
  %394 = bitcast float %256 to i32, !dbg !69
  %395 = bitcast float %253 to i32, !dbg !69
  %396 = bitcast float %250 to i32, !dbg !69
  %397 = bitcast float %241 to i32, !dbg !69
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %394, i32 %395, i32 %396, i32 %397, ptr addrspace(1) %35, i1 %23) #5, !dbg !69
  tail call void @llvm.nvvm.barrier0(), !dbg !70
  %398 = sext i32 %277 to i64, !dbg !71
  %399 = getelementptr float, ptr addrspace(1) %1, i64 %398, !dbg !71
  %400 = and i32 %16, 128, !dbg !72
  %401 = icmp eq i32 %400, 0, !dbg !72
  %402 = bitcast float %389 to i32, !dbg !72
  %403 = and i1 %401, %278, !dbg !72
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %402, ptr addrspace(1) %399, i1 %403) #5, !dbg !72
  ret void, !dbg !73
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cqysvunu2gkgb2k5yox4knuxxjuqrovcgn4f5tfldn5sajg5cked.py", directory: "inductor_cache/qy")
!4 = !{ptr @triton_per_fused__native_batch_norm_legit_no_training_add_convolution_mean_relu_13, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__native_batch_norm_legit_no_training_add_convolution_mean_relu_13, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__native_batch_norm_legit_no_training_add_convolution_mean_relu_13", linkageName: "triton_per_fused__native_batch_norm_legit_no_training_add_convolution_mean_relu_13", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 19, scope: !7)
!17 = !DILocation(line: 32, column: 42, scope: !7)
!18 = !DILocation(line: 32, column: 39, scope: !7)
!19 = !DILocation(line: 32, column: 34, scope: !7)
!20 = !DILocation(line: 32, column: 47, scope: !7)
!21 = !DILocation(line: 33, column: 30, scope: !7)
!22 = !DILocation(line: 33, column: 35, scope: !7)
!23 = !DILocation(line: 34, column: 30, scope: !7)
!24 = !DILocation(line: 34, column: 35, scope: !7)
!25 = !DILocation(line: 35, column: 30, scope: !7)
!26 = !DILocation(line: 35, column: 35, scope: !7)
!27 = !DILocation(line: 36, column: 31, scope: !7)
!28 = !DILocation(line: 36, column: 36, scope: !7)
!29 = !DILocation(line: 37, column: 31, scope: !7)
!30 = !DILocation(line: 37, column: 36, scope: !7)
!31 = !DILocation(line: 38, column: 31, scope: !7)
!32 = !DILocation(line: 38, column: 44, scope: !7)
!33 = !DILocation(line: 39, column: 31, scope: !7)
!34 = !DILocation(line: 39, column: 36, scope: !7)
!35 = !DILocation(line: 40, column: 31, scope: !7)
!36 = !DILocation(line: 40, column: 36, scope: !7)
!37 = !DILocation(line: 41, column: 31, scope: !7)
!38 = !DILocation(line: 41, column: 36, scope: !7)
!39 = !DILocation(line: 42, column: 31, scope: !7)
!40 = !DILocation(line: 42, column: 36, scope: !7)
!41 = !DILocation(line: 46, column: 18, scope: !7)
!42 = !DILocation(line: 47, column: 26, scope: !7)
!43 = !DILocation(line: 49, column: 19, scope: !7)
!44 = !DILocation(line: 56, column: 20, scope: !7)
!45 = !DILocation(line: 57, column: 27, scope: !7)
!46 = !DILocation(line: 43, column: 18, scope: !7)
!47 = !DILocation(line: 58, column: 19, scope: !7)
!48 = !DILocation(line: 44, column: 18, scope: !7)
!49 = !DILocation(line: 52, column: 19, scope: !7)
!50 = !DILocation(line: 53, column: 20, scope: !7)
!51 = !DILocation(line: 54, column: 20, scope: !7)
!52 = !DILocation(line: 63, column: 20, scope: !7)
!53 = !DILocation(line: 118, column: 15, scope: !54, inlinedAt: !56)
!54 = distinct !DILexicalBlockFile(scope: !7, file: !55, discriminator: 0)
!55 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!56 = !DILocation(line: 65, column: 42, scope: !7)
!57 = !DILocation(line: 55, column: 20, scope: !7)
!58 = !DILocation(line: 60, column: 20, scope: !7)
!59 = !DILocation(line: 61, column: 20, scope: !7)
!60 = !DILocation(line: 62, column: 20, scope: !7)
!61 = !DILocation(line: 121, column: 29, scope: !54, inlinedAt: !56)
!62 = !DILocation(line: 256, column: 15, scope: !63, inlinedAt: !66)
!63 = distinct !DILexicalBlockFile(scope: !65, file: !64, discriminator: 0)
!64 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!65 = distinct !DILexicalBlockFile(scope: !7, file: !64, discriminator: 0)
!66 = !DILocation(line: 68, column: 26, scope: !7)
!67 = !DILocation(line: 267, column: 36, scope: !65, inlinedAt: !66)
!68 = !DILocation(line: 70, column: 20, scope: !7)
!69 = !DILocation(line: 71, column: 47, scope: !7)
!70 = !DILocation(line: 72, column: 4, scope: !7)
!71 = !DILocation(line: 73, column: 28, scope: !7)
!72 = !DILocation(line: 73, column: 40, scope: !7)
!73 = !DILocation(line: 73, column: 4, scope: !7)
