; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_max_pool2d_with_indices_20(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 6, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 1, !dbg !12
  %10 = and i32 %9, 63, !dbg !12
  %11 = and i32 %8, 1, !dbg !12
  %12 = shl nuw nsw i32 %11, 1, !dbg !12
  %13 = shl i32 %8, 1, !dbg !12
  %14 = and i32 %13, 62, !dbg !12
  %15 = or disjoint i32 %7, %10, !dbg !13
  %16 = or disjoint i32 %7, %14, !dbg !13
  %17 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %18 = shl i32 %17, 2, !dbg !15
  %.lobit12 = lshr i32 %8, 5, !dbg !16
  %19 = and i32 %.lobit12, 3, !dbg !16
  %20 = or disjoint i32 %18, %12, !dbg !17
  %21 = or disjoint i32 %18, 1, !dbg !17
  %22 = or disjoint i32 %18, %19, !dbg !17
  %23 = icmp slt i32 %20, 4, !dbg !18
  %24 = icmp slt i32 %22, 4, !dbg !18
  %25 = srem i32 %21, 2, !dbg !19
  %.frozen = freeze i32 %16, !dbg !20
  %26 = sdiv i32 %.frozen, 512, !dbg !20
  %27 = mul i32 %26, 512, !dbg !21
  %.decomposed = sub i32 %.frozen, %27, !dbg !21
  %28 = shl nsw i32 %25, 1, !dbg !22
  %29 = shl i32 %20, 2, !dbg !23
  %30 = shl i32 %15, 4, !dbg !24
  %31 = add i32 %29, %30, !dbg !25
  %32 = add i32 %31, %28, !dbg !25
  %33 = sext i32 %31 to i64, !dbg !26
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !26
  %35 = sext i32 %32 to i64, !dbg !26
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !26
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 %23) #2, !dbg !27
  %38 = bitcast i32 %37 to float, !dbg !27
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 %23) #2, !dbg !27
  %40 = bitcast i32 %39 to float, !dbg !27
  %41 = or disjoint i32 %31, 1, !dbg !28
  %42 = add i32 %41, %28, !dbg !28
  %43 = sext i32 %41 to i64, !dbg !29
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !29
  %45 = sext i32 %42 to i64, !dbg !29
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !29
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 %23) #2, !dbg !30
  %48 = bitcast i32 %47 to float, !dbg !30
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 %23) #2, !dbg !30
  %50 = bitcast i32 %49 to float, !dbg !30
  %51 = or disjoint i32 %31, 4, !dbg !31
  %52 = add i32 %51, %28, !dbg !31
  %53 = sext i32 %51 to i64, !dbg !32
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !32
  %55 = sext i32 %52 to i64, !dbg !32
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !32
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 %23) #2, !dbg !33
  %58 = bitcast i32 %57 to float, !dbg !33
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 %23) #2, !dbg !33
  %60 = bitcast i32 %59 to float, !dbg !33
  %61 = or disjoint i32 %31, 5, !dbg !34
  %62 = add i32 %61, %28, !dbg !34
  %63 = sext i32 %61 to i64, !dbg !35
  %64 = getelementptr float, ptr addrspace(1) %0, i64 %63, !dbg !35
  %65 = sext i32 %62 to i64, !dbg !35
  %66 = getelementptr float, ptr addrspace(1) %0, i64 %65, !dbg !35
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 %23) #2, !dbg !36
  %68 = bitcast i32 %67 to float, !dbg !36
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 %23) #2, !dbg !36
  %70 = bitcast i32 %69 to float, !dbg !36
  %71 = fcmp ogt float %48, %38, !dbg !37
  %72 = fcmp ogt float %50, %40, !dbg !37
  %73 = fcmp uno float %48, 0.000000e+00, !dbg !41
  %74 = fcmp uno float %50, 0.000000e+00, !dbg !41
  %75 = or i1 %71, %73, !dbg !42
  %76 = or i1 %72, %74, !dbg !42
  %77 = select i1 %75, float %48, float %38, !dbg !43
  %78 = select i1 %76, float %50, float %40, !dbg !43
  %79 = fcmp olt float %77, %58, !dbg !44
  %80 = fcmp olt float %78, %60, !dbg !44
  %81 = fcmp uno float %58, 0.000000e+00, !dbg !46
  %82 = fcmp uno float %60, 0.000000e+00, !dbg !46
  %83 = or i1 %81, %79, !dbg !47
  %84 = or i1 %82, %80, !dbg !47
  %85 = select i1 %83, float %58, float %77, !dbg !48
  %86 = select i1 %84, float %60, float %78, !dbg !48
  %87 = fcmp olt float %85, %68, !dbg !49
  %88 = fcmp olt float %86, %70, !dbg !49
  %89 = fcmp uno float %68, 0.000000e+00, !dbg !51
  %90 = fcmp uno float %70, 0.000000e+00, !dbg !51
  %91 = or i1 %89, %87, !dbg !52
  %92 = or i1 %90, %88, !dbg !52
  %93 = zext i1 %71 to i8, !dbg !53
  %94 = zext i1 %72 to i8, !dbg !53
  %95 = select i1 %79, i8 2, i8 %93, !dbg !54
  %96 = select i1 %80, i8 2, i8 %94, !dbg !54
  %97 = select i1 %87, i8 3, i8 %95, !dbg !55
  %98 = select i1 %88, i8 3, i8 %96, !dbg !55
  %99 = shl i32 %15, 2, !dbg !56
  %100 = add i32 %20, %99, !dbg !57
  %101 = sext i32 %100 to i64, !dbg !58
  %102 = getelementptr float, ptr addrspace(1) %1, i64 %101, !dbg !58
  %103 = bitcast float %85 to i32, !dbg !59
  %104 = select i1 %91, i32 %67, i32 %103, !dbg !60
  %105 = bitcast float %86 to i32, !dbg !59
  %106 = select i1 %92, i32 %69, i32 %105, !dbg !60
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %104, i32 %106, ptr addrspace(1) %102, i1 %23) #2, !dbg !59
  %107 = shl i32 %22, 9, !dbg !61
  %108 = add i32 %107, %.decomposed, !dbg !62
  %109 = shl i32 %26, 11, !dbg !63
  %110 = add i32 %108, %109, !dbg !64
  %111 = sext i32 %110 to i64, !dbg !65
  %112 = getelementptr i8, ptr addrspace(1) %2, i64 %111, !dbg !65
  %113 = shl nuw nsw i32 %11, 7, !dbg !66
  %114 = or disjoint i32 %113, %10, !dbg !66
  %115 = and i32 %13, 254, !dbg !66
  %116 = shl nuw nsw i32 %11, 2, !dbg !66
  %117 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %116, !dbg !66
  %118 = getelementptr i8, ptr addrspace(3) %117, i32 %114, !dbg !66
  %119 = insertelement <1 x i8> poison, i8 %97, i64 0, !dbg !66
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %118, <1 x i8> %119, i1 true) #2, !dbg !66
  %120 = or disjoint i32 %114, 64, !dbg !66
  %121 = lshr i32 %120, 5, !dbg !66
  %122 = and i32 %121, 6, !dbg !66
  %123 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %122, !dbg !66
  %124 = getelementptr i8, ptr addrspace(3) %123, i32 %120, !dbg !66
  %125 = insertelement <1 x i8> poison, i8 %98, i64 0, !dbg !66
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %124, <1 x i8> %125, i1 true) #2, !dbg !66
  tail call void @llvm.nvvm.barrier0(), !dbg !66
  %126 = lshr i32 %13, 5, !dbg !66
  %127 = and i32 %126, 6, !dbg !66
  %128 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %127, !dbg !66
  %129 = getelementptr inbounds i8, ptr addrspace(3) %128, i32 %115, !dbg !66
  %130 = load i16, ptr addrspace(3) %129, align 2, !dbg !66
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %130, ptr addrspace(1) %112, i1 %24) #2, !dbg !66
  ret void, !dbg !67
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c4rjn3i6dmommkba43uuwnv2uqpgcbl776txxe3w3vsoo6nytkax.py", directory: "inductor_cache/4r")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_20, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_20, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_20", linkageName: "triton_poi_fused_max_pool2d_with_indices_20", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 28, column: 19, scope: !7)
!20 = !DILocation(line: 33, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 19, scope: !7)
!22 = !DILocation(line: 34, column: 32, scope: !7)
!23 = !DILocation(line: 34, column: 39, scope: !7)
!24 = !DILocation(line: 34, column: 47, scope: !7)
!25 = !DILocation(line: 34, column: 44, scope: !7)
!26 = !DILocation(line: 34, column: 30, scope: !7)
!27 = !DILocation(line: 34, column: 52, scope: !7)
!28 = !DILocation(line: 35, column: 48, scope: !7)
!29 = !DILocation(line: 35, column: 30, scope: !7)
!30 = !DILocation(line: 35, column: 56, scope: !7)
!31 = !DILocation(line: 36, column: 48, scope: !7)
!32 = !DILocation(line: 36, column: 30, scope: !7)
!33 = !DILocation(line: 36, column: 56, scope: !7)
!34 = !DILocation(line: 37, column: 48, scope: !7)
!35 = !DILocation(line: 37, column: 30, scope: !7)
!36 = !DILocation(line: 37, column: 56, scope: !7)
!37 = !DILocation(line: 118, column: 15, scope: !38, inlinedAt: !40)
!38 = distinct !DILexicalBlockFile(scope: !7, file: !39, discriminator: 0)
!39 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!40 = !DILocation(line: 38, column: 40, scope: !7)
!41 = !DILocation(line: 120, column: 21, scope: !38, inlinedAt: !40)
!42 = !DILocation(line: 120, column: 16, scope: !38, inlinedAt: !40)
!43 = !DILocation(line: 121, column: 29, scope: !38, inlinedAt: !40)
!44 = !DILocation(line: 118, column: 15, scope: !38, inlinedAt: !45)
!45 = !DILocation(line: 39, column: 40, scope: !7)
!46 = !DILocation(line: 120, column: 21, scope: !38, inlinedAt: !45)
!47 = !DILocation(line: 120, column: 16, scope: !38, inlinedAt: !45)
!48 = !DILocation(line: 121, column: 29, scope: !38, inlinedAt: !45)
!49 = !DILocation(line: 118, column: 15, scope: !38, inlinedAt: !50)
!50 = !DILocation(line: 40, column: 40, scope: !7)
!51 = !DILocation(line: 120, column: 21, scope: !38, inlinedAt: !50)
!52 = !DILocation(line: 120, column: 16, scope: !38, inlinedAt: !50)
!53 = !DILocation(line: 44, column: 33, scope: !7)
!54 = !DILocation(line: 47, column: 35, scope: !7)
!55 = !DILocation(line: 50, column: 35, scope: !7)
!56 = !DILocation(line: 51, column: 32, scope: !7)
!57 = !DILocation(line: 51, column: 30, scope: !7)
!58 = !DILocation(line: 51, column: 25, scope: !7)
!59 = !DILocation(line: 51, column: 43, scope: !7)
!60 = !DILocation(line: 121, column: 29, scope: !38, inlinedAt: !50)
!61 = !DILocation(line: 52, column: 34, scope: !7)
!62 = !DILocation(line: 52, column: 30, scope: !7)
!63 = !DILocation(line: 52, column: 44, scope: !7)
!64 = !DILocation(line: 52, column: 39, scope: !7)
!65 = !DILocation(line: 52, column: 25, scope: !7)
!66 = !DILocation(line: 52, column: 56, scope: !7)
!67 = !DILocation(line: 52, column: 4, scope: !7)
