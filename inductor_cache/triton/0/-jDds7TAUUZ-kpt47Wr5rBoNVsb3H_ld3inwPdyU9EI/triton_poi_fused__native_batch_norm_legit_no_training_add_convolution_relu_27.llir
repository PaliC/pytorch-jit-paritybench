; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_27(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, i32 %10) local_unnamed_addr !dbg !7 {
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %13 = shl i32 %12, 8, !dbg !11
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %15 = shl i32 %14, 1, !dbg !12
  %16 = and i32 %15, 254, !dbg !12
  %17 = or disjoint i32 %13, %16, !dbg !13
  %18 = icmp slt i32 %17, 256, !dbg !14
  %19 = srem i32 %17, 4, !dbg !15
  %20 = sext i32 %17 to i64, !dbg !16
  %21 = getelementptr float, ptr addrspace(1) %0, i64 %20, !dbg !16
  %22 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %21, i1 %18) #3, !dbg !17
  %23 = sext i32 %19 to i64, !dbg !18
  %24 = getelementptr float, ptr addrspace(1) %1, i64 %23, !dbg !18
  %25 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %24, i1 %18) #3, !dbg !19
  %26 = getelementptr float, ptr addrspace(1) %2, i64 %20, !dbg !20
  %27 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %26, i1 %18) #3, !dbg !21
  %28 = getelementptr float, ptr addrspace(1) %3, i64 %23, !dbg !22
  %29 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %28, i1 %18) #3, !dbg !23
  %30 = getelementptr float, ptr addrspace(1) %4, i64 %20, !dbg !24
  %31 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %30, i1 %18) #3, !dbg !25
  %32 = getelementptr float, ptr addrspace(1) %5, i64 %23, !dbg !26
  %33 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %32, i1 %18) #3, !dbg !27
  %34 = getelementptr float, ptr addrspace(1) %6, i64 %23, !dbg !28
  %35 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %34, i1 %18) #3, !dbg !29
  %36 = extractvalue { i32, i32 } %35, 0, !dbg !29
  %37 = extractvalue { i32, i32 } %35, 1, !dbg !29
  %38 = bitcast i32 %36 to float, !dbg !29
  %39 = bitcast i32 %37 to float, !dbg !29
  %40 = getelementptr float, ptr addrspace(1) %7, i64 %23, !dbg !30
  %41 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %40, i1 %18) #3, !dbg !31
  %42 = getelementptr float, ptr addrspace(1) %8, i64 %23, !dbg !32
  %43 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %42, i1 %18) #3, !dbg !33
  %44 = fadd float %38, 0x3EE4F8B580000000, !dbg !34
  %45 = fadd float %39, 0x3EE4F8B580000000, !dbg !34
  %46 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !35
  %.not.i = icmp eq i32 %46, 0, !dbg !35
  %47 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !35
  %.not1.i = icmp eq i32 %47, 0, !dbg !35
  br i1 %.not.i, label %53, label %48, !dbg !35

48:                                               ; preds = %11
  br i1 %.not1.i, label %51, label %49, !dbg !35

49:                                               ; preds = %48
  %50 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %44) #3, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

51:                                               ; preds = %48
  %52 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %44) #3, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

53:                                               ; preds = %11
  br i1 %.not1.i, label %56, label %54, !dbg !35

54:                                               ; preds = %53
  %55 = tail call float @llvm.nvvm.sqrt.rn.f(float %44) #3, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

56:                                               ; preds = %53
  %57 = tail call float @llvm.nvvm.sqrt.approx.f(float %44) #3, !dbg !35
  br label %__nv_sqrtf.exit, !dbg !35

__nv_sqrtf.exit:                                  ; preds = %49, %51, %54, %56
  %.0.i = phi float [ %50, %49 ], [ %52, %51 ], [ %55, %54 ], [ %57, %56 ], !dbg !35
  %58 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !35
  %.not.i1 = icmp eq i32 %58, 0, !dbg !35
  %59 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !35
  %.not1.i4 = icmp eq i32 %59, 0, !dbg !35
  br i1 %.not.i1, label %65, label %60, !dbg !35

60:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %63, label %61, !dbg !35

61:                                               ; preds = %60
  %62 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %45) #3, !dbg !35
  br label %__nv_sqrtf.exit5, !dbg !35

63:                                               ; preds = %60
  %64 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %45) #3, !dbg !35
  br label %__nv_sqrtf.exit5, !dbg !35

65:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %68, label %66, !dbg !35

66:                                               ; preds = %65
  %67 = tail call float @llvm.nvvm.sqrt.rn.f(float %45) #3, !dbg !35
  br label %__nv_sqrtf.exit5, !dbg !35

68:                                               ; preds = %65
  %69 = tail call float @llvm.nvvm.sqrt.approx.f(float %45) #3, !dbg !35
  br label %__nv_sqrtf.exit5, !dbg !35

__nv_sqrtf.exit5:                                 ; preds = %61, %63, %66, %68
  %.0.i3 = phi float [ %62, %61 ], [ %64, %63 ], [ %67, %66 ], [ %69, %68 ], !dbg !35
  %70 = extractvalue { i32, i32 } %22, 1, !dbg !17
  %71 = extractvalue { i32, i32 } %25, 1, !dbg !19
  %72 = extractvalue { i32, i32 } %27, 1, !dbg !21
  %73 = extractvalue { i32, i32 } %29, 1, !dbg !23
  %74 = insertelement <2 x i32> poison, i32 %70, i64 0, !dbg !17
  %75 = insertelement <2 x i32> %74, i32 %72, i64 1, !dbg !17
  %76 = bitcast <2 x i32> %75 to <2 x float>, !dbg !17
  %77 = insertelement <2 x i32> poison, i32 %71, i64 0, !dbg !19
  %78 = insertelement <2 x i32> %77, i32 %73, i64 1, !dbg !19
  %79 = bitcast <2 x i32> %78 to <2 x float>, !dbg !19
  %80 = fadd <2 x float> %76, %79, !dbg !36
  %81 = extractvalue { i32, i32 } %31, 1, !dbg !25
  %82 = bitcast i32 %81 to float, !dbg !25
  %83 = extractelement <2 x float> %80, i64 1, !dbg !37
  %84 = fadd float %83, %82, !dbg !37
  %85 = extractelement <2 x float> %80, i64 0, !dbg !38
  %86 = fadd float %85, %84, !dbg !38
  %87 = extractvalue { i32, i32 } %33, 1, !dbg !27
  %88 = bitcast i32 %87 to float, !dbg !27
  %89 = fsub float %86, %88, !dbg !39
  %90 = extractvalue { i32, i32 } %22, 0, !dbg !17
  %91 = extractvalue { i32, i32 } %25, 0, !dbg !19
  %92 = extractvalue { i32, i32 } %27, 0, !dbg !21
  %93 = extractvalue { i32, i32 } %29, 0, !dbg !23
  %94 = insertelement <2 x i32> poison, i32 %90, i64 0, !dbg !17
  %95 = insertelement <2 x i32> %94, i32 %92, i64 1, !dbg !17
  %96 = bitcast <2 x i32> %95 to <2 x float>, !dbg !17
  %97 = insertelement <2 x i32> poison, i32 %91, i64 0, !dbg !19
  %98 = insertelement <2 x i32> %97, i32 %93, i64 1, !dbg !19
  %99 = bitcast <2 x i32> %98 to <2 x float>, !dbg !19
  %100 = fadd <2 x float> %96, %99, !dbg !36
  %101 = extractvalue { i32, i32 } %31, 0, !dbg !25
  %102 = bitcast i32 %101 to float, !dbg !25
  %103 = extractelement <2 x float> %100, i64 1, !dbg !37
  %104 = fadd float %103, %102, !dbg !37
  %105 = extractelement <2 x float> %100, i64 0, !dbg !38
  %106 = fadd float %105, %104, !dbg !38
  %107 = extractvalue { i32, i32 } %33, 0, !dbg !27
  %108 = bitcast i32 %107 to float, !dbg !27
  %109 = fsub float %106, %108, !dbg !39
  %110 = extractvalue { i32, i32 } %43, 1, !dbg !33
  %111 = bitcast i32 %110 to float, !dbg !33
  %112 = extractvalue { i32, i32 } %43, 0, !dbg !33
  %113 = bitcast i32 %112 to float, !dbg !33
  %114 = extractvalue { i32, i32 } %41, 1, !dbg !31
  %115 = bitcast i32 %114 to float, !dbg !31
  %116 = extractvalue { i32, i32 } %41, 0, !dbg !31
  %117 = bitcast i32 %116 to float, !dbg !31
  %118 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !40
  %119 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !40
  %120 = fmul float %109, %118, !dbg !41
  %121 = fmul float %89, %119, !dbg !41
  %122 = fmul float %120, %117, !dbg !42
  %123 = fmul float %121, %115, !dbg !42
  %124 = fadd float %122, %113, !dbg !43
  %125 = fadd float %123, %111, !dbg !43
  %126 = fcmp olt float %124, 0.000000e+00, !dbg !44
  %127 = fcmp olt float %125, 0.000000e+00, !dbg !44
  %128 = select i1 %126, float 0.000000e+00, float %124, !dbg !48
  %129 = select i1 %127, float 0.000000e+00, float %125, !dbg !48
  %130 = bitcast float %106 to i32, !dbg !49
  %131 = bitcast float %86 to i32, !dbg !49
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %130, i32 %131, ptr addrspace(1) %21, i1 %18) #3, !dbg !49
  %132 = getelementptr float, ptr addrspace(1) %9, i64 %20, !dbg !50
  %133 = bitcast float %128 to i32, !dbg !51
  %134 = bitcast float %129 to i32, !dbg !51
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %133, i32 %134, ptr addrspace(1) %132, i1 %18) #3, !dbg !51
  ret void, !dbg !52
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cy6nn2c6pzlbszj5nyb2nr6rxzvlb3qephuhsviedq2uhqwopga7.py", directory: "inductor_cache/y6")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_27, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_27, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_27", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_27", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 34, scope: !7)
!17 = !DILocation(line: 26, column: 39, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 35, scope: !7)
!20 = !DILocation(line: 28, column: 30, scope: !7)
!21 = !DILocation(line: 28, column: 35, scope: !7)
!22 = !DILocation(line: 29, column: 30, scope: !7)
!23 = !DILocation(line: 29, column: 35, scope: !7)
!24 = !DILocation(line: 30, column: 30, scope: !7)
!25 = !DILocation(line: 30, column: 35, scope: !7)
!26 = !DILocation(line: 31, column: 30, scope: !7)
!27 = !DILocation(line: 31, column: 35, scope: !7)
!28 = !DILocation(line: 32, column: 31, scope: !7)
!29 = !DILocation(line: 32, column: 36, scope: !7)
!30 = !DILocation(line: 33, column: 31, scope: !7)
!31 = !DILocation(line: 33, column: 36, scope: !7)
!32 = !DILocation(line: 34, column: 31, scope: !7)
!33 = !DILocation(line: 34, column: 36, scope: !7)
!34 = !DILocation(line: 41, column: 20, scope: !7)
!35 = !DILocation(line: 42, column: 27, scope: !7)
!36 = !DILocation(line: 35, column: 18, scope: !7)
!37 = !DILocation(line: 37, column: 18, scope: !7)
!38 = !DILocation(line: 38, column: 18, scope: !7)
!39 = !DILocation(line: 39, column: 19, scope: !7)
!40 = !DILocation(line: 44, column: 20, scope: !7)
!41 = !DILocation(line: 47, column: 20, scope: !7)
!42 = !DILocation(line: 48, column: 20, scope: !7)
!43 = !DILocation(line: 49, column: 20, scope: !7)
!44 = !DILocation(line: 118, column: 15, scope: !45, inlinedAt: !47)
!45 = distinct !DILexicalBlockFile(scope: !7, file: !46, discriminator: 0)
!46 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!47 = !DILocation(line: 51, column: 42, scope: !7)
!48 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !47)
!49 = !DILocation(line: 52, column: 39, scope: !7)
!50 = !DILocation(line: 53, column: 25, scope: !7)
!51 = !DILocation(line: 53, column: 37, scope: !7)
!52 = !DILocation(line: 53, column: 4, scope: !7)
