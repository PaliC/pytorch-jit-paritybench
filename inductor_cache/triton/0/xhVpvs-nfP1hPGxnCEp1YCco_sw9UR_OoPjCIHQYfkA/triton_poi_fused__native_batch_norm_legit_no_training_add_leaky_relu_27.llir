; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_leaky_relu_27(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %11 = shl i32 %10, 4, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = lshr i32 %12, 4, !dbg !12
  %14 = and i32 %13, 7, !dbg !12
  %15 = shl i32 %12, 2, !dbg !12
  %16 = or disjoint i32 %11, %14, !dbg !13
  %17 = or disjoint i32 %16, 8, !dbg !13
  %18 = icmp slt i32 %16, 16, !dbg !14
  %19 = icmp slt i32 %17, 16, !dbg !14
  %20 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %21 = shl i32 %20, 6, !dbg !16
  %22 = and i32 %15, 60, !dbg !17
  %23 = or disjoint i32 %21, %22, !dbg !18
  %24 = icmp slt i32 %23, 1024, !dbg !19
  %25 = shl i32 %16, 10, !dbg !20
  %26 = shl i32 %17, 10, !dbg !20
  %27 = add i32 %23, %25, !dbg !21
  %28 = add i32 %23, %26, !dbg !21
  %29 = sext i32 %27 to i64, !dbg !22
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !22
  %31 = sext i32 %28 to i64, !dbg !22
  %32 = getelementptr float, ptr addrspace(1) %0, i64 %31, !dbg !22
  %33 = and i1 %18, %24, !dbg !23
  %34 = and i1 %19, %24, !dbg !23
  %35 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %30, i1 %33) #4, !dbg !24
  %36 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %32, i1 %34) #4, !dbg !24
  %37 = sext i32 %23 to i64, !dbg !25
  %38 = getelementptr float, ptr addrspace(1) %1, i64 %37, !dbg !25
  %39 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %38, i1 %24) #4, !dbg !26
  %40 = getelementptr float, ptr addrspace(1) %2, i64 %37, !dbg !27
  %41 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %40, i1 %24) #4, !dbg !28
  %42 = extractvalue { i32, i32, i32, i32 } %41, 0, !dbg !28
  %43 = extractvalue { i32, i32, i32, i32 } %41, 1, !dbg !28
  %44 = extractvalue { i32, i32, i32, i32 } %41, 2, !dbg !28
  %45 = extractvalue { i32, i32, i32, i32 } %41, 3, !dbg !28
  %46 = bitcast i32 %42 to float, !dbg !28
  %47 = bitcast i32 %43 to float, !dbg !28
  %48 = bitcast i32 %44 to float, !dbg !28
  %49 = bitcast i32 %45 to float, !dbg !28
  %50 = getelementptr float, ptr addrspace(1) %3, i64 %37, !dbg !29
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %50, i1 %24) #4, !dbg !30
  %52 = getelementptr float, ptr addrspace(1) %4, i64 %37, !dbg !31
  %53 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %52, i1 %24) #4, !dbg !32
  %54 = getelementptr float, ptr addrspace(1) %5, i64 %29, !dbg !33
  %55 = getelementptr float, ptr addrspace(1) %5, i64 %31, !dbg !33
  %56 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %54, i1 %33) #4, !dbg !34
  %57 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %55, i1 %34) #4, !dbg !34
  %58 = fadd float %46, 0x3EE4F8B580000000, !dbg !35
  %59 = fadd float %47, 0x3EE4F8B580000000, !dbg !35
  %60 = fadd float %48, 0x3EE4F8B580000000, !dbg !35
  %61 = fadd float %49, 0x3EE4F8B580000000, !dbg !35
  %62 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i = icmp eq i32 %62, 0, !dbg !36
  %63 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i = icmp eq i32 %63, 0, !dbg !36
  br i1 %.not.i, label %69, label %64, !dbg !36

64:                                               ; preds = %9
  br i1 %.not1.i, label %67, label %65, !dbg !36

65:                                               ; preds = %64
  %66 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %58) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

67:                                               ; preds = %64
  %68 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %58) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

69:                                               ; preds = %9
  br i1 %.not1.i, label %72, label %70, !dbg !36

70:                                               ; preds = %69
  %71 = tail call float @llvm.nvvm.sqrt.rn.f(float %58) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

72:                                               ; preds = %69
  %73 = tail call float @llvm.nvvm.sqrt.approx.f(float %58) #4, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

__nv_sqrtf.exit:                                  ; preds = %65, %67, %70, %72
  %.0.i = phi float [ %66, %65 ], [ %68, %67 ], [ %71, %70 ], [ %73, %72 ], !dbg !36
  %74 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i18 = icmp eq i32 %74, 0, !dbg !36
  %75 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i21 = icmp eq i32 %75, 0, !dbg !36
  br i1 %.not.i18, label %81, label %76, !dbg !36

76:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i21, label %79, label %77, !dbg !36

77:                                               ; preds = %76
  %78 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %59) #4, !dbg !36
  br label %__nv_sqrtf.exit22, !dbg !36

79:                                               ; preds = %76
  %80 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %59) #4, !dbg !36
  br label %__nv_sqrtf.exit22, !dbg !36

81:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i21, label %84, label %82, !dbg !36

82:                                               ; preds = %81
  %83 = tail call float @llvm.nvvm.sqrt.rn.f(float %59) #4, !dbg !36
  br label %__nv_sqrtf.exit22, !dbg !36

84:                                               ; preds = %81
  %85 = tail call float @llvm.nvvm.sqrt.approx.f(float %59) #4, !dbg !36
  br label %__nv_sqrtf.exit22, !dbg !36

__nv_sqrtf.exit22:                                ; preds = %77, %79, %82, %84
  %.0.i20 = phi float [ %78, %77 ], [ %80, %79 ], [ %83, %82 ], [ %85, %84 ], !dbg !36
  %86 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i23 = icmp eq i32 %86, 0, !dbg !36
  %87 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i26 = icmp eq i32 %87, 0, !dbg !36
  br i1 %.not.i23, label %93, label %88, !dbg !36

88:                                               ; preds = %__nv_sqrtf.exit22
  br i1 %.not1.i26, label %91, label %89, !dbg !36

89:                                               ; preds = %88
  %90 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %60) #4, !dbg !36
  br label %__nv_sqrtf.exit27, !dbg !36

91:                                               ; preds = %88
  %92 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %60) #4, !dbg !36
  br label %__nv_sqrtf.exit27, !dbg !36

93:                                               ; preds = %__nv_sqrtf.exit22
  br i1 %.not1.i26, label %96, label %94, !dbg !36

94:                                               ; preds = %93
  %95 = tail call float @llvm.nvvm.sqrt.rn.f(float %60) #4, !dbg !36
  br label %__nv_sqrtf.exit27, !dbg !36

96:                                               ; preds = %93
  %97 = tail call float @llvm.nvvm.sqrt.approx.f(float %60) #4, !dbg !36
  br label %__nv_sqrtf.exit27, !dbg !36

__nv_sqrtf.exit27:                                ; preds = %89, %91, %94, %96
  %.0.i25 = phi float [ %90, %89 ], [ %92, %91 ], [ %95, %94 ], [ %97, %96 ], !dbg !36
  %98 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !36
  %.not.i28 = icmp eq i32 %98, 0, !dbg !36
  %99 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !36
  %.not1.i31 = icmp eq i32 %99, 0, !dbg !36
  br i1 %.not.i28, label %105, label %100, !dbg !36

100:                                              ; preds = %__nv_sqrtf.exit27
  br i1 %.not1.i31, label %103, label %101, !dbg !36

101:                                              ; preds = %100
  %102 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %61) #4, !dbg !36
  br label %__nv_sqrtf.exit32, !dbg !36

103:                                              ; preds = %100
  %104 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %61) #4, !dbg !36
  br label %__nv_sqrtf.exit32, !dbg !36

105:                                              ; preds = %__nv_sqrtf.exit27
  br i1 %.not1.i31, label %108, label %106, !dbg !36

106:                                              ; preds = %105
  %107 = tail call float @llvm.nvvm.sqrt.rn.f(float %61) #4, !dbg !36
  br label %__nv_sqrtf.exit32, !dbg !36

108:                                              ; preds = %105
  %109 = tail call float @llvm.nvvm.sqrt.approx.f(float %61) #4, !dbg !36
  br label %__nv_sqrtf.exit32, !dbg !36

__nv_sqrtf.exit32:                                ; preds = %101, %103, %106, %108
  %.0.i30 = phi float [ %102, %101 ], [ %104, %103 ], [ %107, %106 ], [ %109, %108 ], !dbg !36
  %110 = extractvalue { i32, i32, i32, i32 } %36, 3, !dbg !24
  %111 = extractvalue { i32, i32, i32, i32 } %39, 3, !dbg !26
  %112 = extractvalue { i32, i32, i32, i32 } %36, 2, !dbg !24
  %113 = extractvalue { i32, i32, i32, i32 } %39, 2, !dbg !26
  %114 = extractvalue { i32, i32, i32, i32 } %36, 1, !dbg !24
  %115 = extractvalue { i32, i32, i32, i32 } %39, 1, !dbg !26
  %116 = extractvalue { i32, i32, i32, i32 } %36, 0, !dbg !24
  %117 = extractvalue { i32, i32, i32, i32 } %39, 0, !dbg !26
  %118 = extractvalue { i32, i32, i32, i32 } %35, 3, !dbg !24
  %119 = extractvalue { i32, i32, i32, i32 } %35, 2, !dbg !24
  %120 = extractvalue { i32, i32, i32, i32 } %35, 1, !dbg !24
  %121 = extractvalue { i32, i32, i32, i32 } %35, 0, !dbg !24
  %122 = extractvalue { i32, i32, i32, i32 } %57, 3, !dbg !34
  %123 = bitcast i32 %122 to float, !dbg !34
  %124 = extractvalue { i32, i32, i32, i32 } %57, 2, !dbg !34
  %125 = bitcast i32 %124 to float, !dbg !34
  %126 = extractvalue { i32, i32, i32, i32 } %57, 1, !dbg !34
  %127 = bitcast i32 %126 to float, !dbg !34
  %128 = extractvalue { i32, i32, i32, i32 } %57, 0, !dbg !34
  %129 = bitcast i32 %128 to float, !dbg !34
  %130 = extractvalue { i32, i32, i32, i32 } %56, 3, !dbg !34
  %131 = bitcast i32 %130 to float, !dbg !34
  %132 = extractvalue { i32, i32, i32, i32 } %56, 2, !dbg !34
  %133 = bitcast i32 %132 to float, !dbg !34
  %134 = extractvalue { i32, i32, i32, i32 } %56, 1, !dbg !34
  %135 = bitcast i32 %134 to float, !dbg !34
  %136 = extractvalue { i32, i32, i32, i32 } %56, 0, !dbg !34
  %137 = bitcast i32 %136 to float, !dbg !34
  %138 = extractvalue { i32, i32, i32, i32 } %53, 3, !dbg !32
  %139 = extractvalue { i32, i32, i32, i32 } %53, 2, !dbg !32
  %140 = extractvalue { i32, i32, i32, i32 } %53, 1, !dbg !32
  %141 = extractvalue { i32, i32, i32, i32 } %53, 0, !dbg !32
  %142 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !30
  %143 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !30
  %144 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !30
  %145 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !30
  %146 = lshr i32 %12, 2, !dbg !17
  %147 = and i32 %146, 31, !dbg !17
  %148 = or disjoint i32 %147, %21, !dbg !18
  %149 = or disjoint i32 %148, 32, !dbg !18
  %150 = icmp slt i32 %149, 1024, !dbg !19
  %151 = and i32 %15, 12, !dbg !12
  %152 = or disjoint i32 %11, %151, !dbg !13
  %153 = icmp slt i32 %152, 16, !dbg !14
  %154 = and i1 %153, %150, !dbg !23
  %155 = icmp slt i32 %148, 1024, !dbg !19
  %156 = and i1 %153, %155, !dbg !23
  %157 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !37
  %158 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i20) #4, !dbg !37
  %159 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i25) #4, !dbg !37
  %160 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i30) #4, !dbg !37
  %161 = insertelement <4 x i32> poison, i32 %111, i64 0, !dbg !26
  %162 = insertelement <4 x i32> %161, i32 %113, i64 1, !dbg !26
  %163 = insertelement <4 x i32> %162, i32 %115, i64 2, !dbg !26
  %164 = insertelement <4 x i32> %163, i32 %117, i64 3, !dbg !26
  %165 = bitcast <4 x i32> %164 to <4 x float>, !dbg !26
  %166 = shufflevector <4 x float> %165, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !26
  %167 = insertelement <8 x i32> poison, i32 %110, i64 0, !dbg !24
  %168 = insertelement <8 x i32> %167, i32 %112, i64 1, !dbg !24
  %169 = insertelement <8 x i32> %168, i32 %114, i64 2, !dbg !24
  %170 = insertelement <8 x i32> %169, i32 %116, i64 3, !dbg !24
  %171 = insertelement <8 x i32> %170, i32 %118, i64 4, !dbg !24
  %172 = insertelement <8 x i32> %171, i32 %119, i64 5, !dbg !24
  %173 = insertelement <8 x i32> %172, i32 %120, i64 6, !dbg !24
  %174 = insertelement <8 x i32> %173, i32 %121, i64 7, !dbg !24
  %175 = bitcast <8 x i32> %174 to <8 x float>, !dbg !24
  %176 = fsub <8 x float> %175, %166, !dbg !38
  %177 = insertelement <4 x i32> poison, i32 %138, i64 0, !dbg !32
  %178 = insertelement <4 x i32> %177, i32 %139, i64 1, !dbg !32
  %179 = insertelement <4 x i32> %178, i32 %140, i64 2, !dbg !32
  %180 = insertelement <4 x i32> %179, i32 %141, i64 3, !dbg !32
  %181 = bitcast <4 x i32> %180 to <4 x float>, !dbg !32
  %182 = shufflevector <4 x float> %181, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !32
  %183 = insertelement <4 x i32> poison, i32 %142, i64 0, !dbg !30
  %184 = insertelement <4 x i32> %183, i32 %143, i64 1, !dbg !30
  %185 = insertelement <4 x i32> %184, i32 %144, i64 2, !dbg !30
  %186 = insertelement <4 x i32> %185, i32 %145, i64 3, !dbg !30
  %187 = bitcast <4 x i32> %186 to <4 x float>, !dbg !30
  %188 = shufflevector <4 x float> %187, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !30
  %189 = insertelement <8 x float> poison, float %160, i64 0, !dbg !39
  %190 = insertelement <8 x float> %189, float %159, i64 1, !dbg !39
  %191 = insertelement <8 x float> %190, float %158, i64 2, !dbg !39
  %192 = insertelement <8 x float> %191, float %157, i64 3, !dbg !39
  %193 = shufflevector <8 x float> %192, <8 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !39
  %194 = fmul <8 x float> %176, %193, !dbg !39
  %195 = fmul <8 x float> %194, %188, !dbg !40
  %196 = fadd <8 x float> %195, %182, !dbg !41
  %197 = fcmp ogt <8 x float> %196, zeroinitializer, !dbg !42
  %198 = extractelement <8 x float> %196, i64 7, !dbg !43
  %199 = fmul float %198, 0x3FB99999A0000000, !dbg !44
  %200 = extractelement <8 x float> %196, i64 6, !dbg !43
  %201 = fmul float %200, 0x3FB99999A0000000, !dbg !44
  %202 = extractelement <8 x float> %196, i64 5, !dbg !43
  %203 = fmul float %202, 0x3FB99999A0000000, !dbg !44
  %204 = extractelement <8 x float> %196, i64 4, !dbg !43
  %205 = fmul float %204, 0x3FB99999A0000000, !dbg !44
  %206 = extractelement <8 x float> %196, i64 3, !dbg !43
  %207 = fmul float %206, 0x3FB99999A0000000, !dbg !44
  %208 = extractelement <8 x float> %196, i64 2, !dbg !43
  %209 = fmul float %208, 0x3FB99999A0000000, !dbg !44
  %210 = extractelement <8 x float> %196, i64 1, !dbg !43
  %211 = fmul float %210, 0x3FB99999A0000000, !dbg !44
  %212 = extractelement <8 x float> %196, i64 0, !dbg !43
  %213 = fmul float %212, 0x3FB99999A0000000, !dbg !44
  %214 = extractelement <8 x i1> %197, i64 7, !dbg !43
  %215 = select i1 %214, float %198, float %199, !dbg !43
  %216 = extractelement <8 x i1> %197, i64 6, !dbg !43
  %217 = select i1 %216, float %200, float %201, !dbg !43
  %218 = extractelement <8 x i1> %197, i64 5, !dbg !43
  %219 = select i1 %218, float %202, float %203, !dbg !43
  %220 = extractelement <8 x i1> %197, i64 4, !dbg !43
  %221 = select i1 %220, float %204, float %205, !dbg !43
  %222 = extractelement <8 x i1> %197, i64 3, !dbg !43
  %223 = select i1 %222, float %206, float %207, !dbg !43
  %224 = extractelement <8 x i1> %197, i64 2, !dbg !43
  %225 = select i1 %224, float %208, float %209, !dbg !43
  %226 = extractelement <8 x i1> %197, i64 1, !dbg !43
  %227 = select i1 %226, float %210, float %211, !dbg !43
  %228 = extractelement <8 x i1> %197, i64 0, !dbg !43
  %229 = select i1 %228, float %212, float %213, !dbg !43
  %230 = fadd float %215, %137, !dbg !45
  %231 = fadd float %217, %135, !dbg !45
  %232 = fadd float %219, %133, !dbg !45
  %233 = fadd float %221, %131, !dbg !45
  %234 = fadd float %223, %129, !dbg !45
  %235 = fadd float %225, %127, !dbg !45
  %236 = fadd float %227, %125, !dbg !45
  %237 = fadd float %229, %123, !dbg !45
  %238 = shl i32 %148, 2, !dbg !46
  %239 = shl i32 %149, 2, !dbg !46
  %240 = shl i32 %152, 10, !dbg !47
  %241 = add i32 %238, %240, !dbg !48
  %242 = add i32 %239, %240, !dbg !48
  %243 = sext i32 %241 to i64, !dbg !49
  %244 = getelementptr float, ptr addrspace(1) %6, i64 %243, !dbg !49
  %245 = sext i32 %242 to i64, !dbg !49
  %246 = getelementptr float, ptr addrspace(1) %6, i64 %245, !dbg !49
  %247 = shl i32 %12, 6, !dbg !50
  %248 = and i32 %247, 960, !dbg !50
  %249 = or disjoint i32 %248, %14, !dbg !50
  %250 = and i32 %15, 508, !dbg !50
  %251 = lshr exact i32 %248, 2, !dbg !50
  %252 = add nuw nsw i32 %251, %249, !dbg !50
  %253 = zext nneg i32 %252 to i64, !dbg !50
  %254 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %253, !dbg !50
  %255 = bitcast float %230 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %254, <1 x i32> %255, i1 true) #4, !dbg !50
  %256 = or disjoint i32 %249, 16, !dbg !50
  %257 = lshr i32 %256, 2, !dbg !50
  %258 = and i32 %257, 244, !dbg !50
  %259 = add nuw nsw i32 %258, %256, !dbg !50
  %260 = zext nneg i32 %259 to i64, !dbg !50
  %261 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %260, !dbg !50
  %262 = bitcast float %231 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %261, <1 x i32> %262, i1 true) #4, !dbg !50
  %263 = or disjoint i32 %249, 32, !dbg !50
  %264 = lshr i32 %263, 2, !dbg !50
  %265 = and i32 %264, 248, !dbg !50
  %266 = add nuw nsw i32 %265, %263, !dbg !50
  %267 = zext nneg i32 %266 to i64, !dbg !50
  %268 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %267, !dbg !50
  %269 = bitcast float %232 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %268, <1 x i32> %269, i1 true) #4, !dbg !50
  %270 = or disjoint i32 %249, 48, !dbg !50
  %271 = lshr i32 %270, 2, !dbg !50
  %272 = and i32 %271, 252, !dbg !50
  %273 = add nuw nsw i32 %272, %270, !dbg !50
  %274 = zext nneg i32 %273 to i64, !dbg !50
  %275 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %274, !dbg !50
  %276 = bitcast float %233 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %275, <1 x i32> %276, i1 true) #4, !dbg !50
  %277 = or disjoint i32 %249, 8, !dbg !50
  %278 = add nuw nsw i32 %277, %251, !dbg !50
  %279 = zext nneg i32 %278 to i64, !dbg !50
  %280 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %279, !dbg !50
  %281 = bitcast float %234 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %280, <1 x i32> %281, i1 true) #4, !dbg !50
  %282 = or disjoint i32 %249, 24, !dbg !50
  %283 = lshr i32 %282, 2, !dbg !50
  %284 = and i32 %283, 244, !dbg !50
  %285 = add nuw nsw i32 %284, %282, !dbg !50
  %286 = zext nneg i32 %285 to i64, !dbg !50
  %287 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %286, !dbg !50
  %288 = bitcast float %235 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %287, <1 x i32> %288, i1 true) #4, !dbg !50
  %289 = or disjoint i32 %249, 40, !dbg !50
  %290 = lshr i32 %289, 2, !dbg !50
  %291 = and i32 %290, 248, !dbg !50
  %292 = add nuw nsw i32 %291, %289, !dbg !50
  %293 = zext nneg i32 %292 to i64, !dbg !50
  %294 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %293, !dbg !50
  %295 = bitcast float %236 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %294, <1 x i32> %295, i1 true) #4, !dbg !50
  %296 = or disjoint i32 %249, 56, !dbg !50
  %297 = lshr i32 %296, 2, !dbg !50
  %298 = and i32 %297, 252, !dbg !50
  %299 = add nuw nsw i32 %298, %296, !dbg !50
  %300 = zext nneg i32 %299 to i64, !dbg !50
  %301 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %300, !dbg !50
  %302 = bitcast float %237 to <1 x i32>, !dbg !50
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %301, <1 x i32> %302, i1 true) #4, !dbg !50
  tail call void @llvm.nvvm.barrier0(), !dbg !50
  %303 = and i32 %12, 124, !dbg !50
  %304 = add nuw nsw i32 %250, %303, !dbg !50
  %305 = zext nneg i32 %304 to i64, !dbg !50
  %306 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %305, !dbg !50
  %307 = or disjoint i32 %250, 512, !dbg !50
  %308 = lshr exact i32 %307, 2, !dbg !50
  %309 = and i32 %308, 252, !dbg !50
  %310 = add nuw nsw i32 %309, %307, !dbg !50
  %311 = zext nneg i32 %310 to i64, !dbg !50
  %312 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %311, !dbg !50
  %313 = load <4 x i32>, ptr addrspace(3) %312, align 16, !dbg !50
  %.extract = load i32, ptr addrspace(3) %306, align 16, !dbg !50
  %314 = getelementptr inbounds i8, ptr addrspace(3) %306, i64 4, !dbg !50
  %.extract11 = load i32, ptr addrspace(3) %314, align 4, !dbg !50
  %315 = getelementptr inbounds i8, ptr addrspace(3) %306, i64 8, !dbg !50
  %.extract12 = load i32, ptr addrspace(3) %315, align 8, !dbg !50
  %316 = getelementptr inbounds i8, ptr addrspace(3) %306, i64 12, !dbg !50
  %.extract13 = load i32, ptr addrspace(3) %316, align 4, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract11, i32 %.extract12, i32 %.extract13, ptr addrspace(1) %244, i1 %156) #4, !dbg !50
  %.extract14 = extractelement <4 x i32> %313, i64 0, !dbg !50
  %.extract15 = extractelement <4 x i32> %313, i64 1, !dbg !50
  %.extract16 = extractelement <4 x i32> %313, i64 2, !dbg !50
  %.extract17 = extractelement <4 x i32> %313, i64 3, !dbg !50
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract14, i32 %.extract15, i32 %.extract16, i32 %.extract17, ptr addrspace(1) %246, i1 %154) #4, !dbg !50
  ret void, !dbg !51
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "clyezt7qdu3fw3idluutk7mijmhjcgm546wqdsgkpc23cbm3t5sq.py", directory: "inductor_cache/ly")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_leaky_relu_27, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_leaky_relu_27, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_leaky_relu_27", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_leaky_relu_27", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 32, column: 40, scope: !7)
!21 = !DILocation(line: 32, column: 35, scope: !7)
!22 = !DILocation(line: 32, column: 30, scope: !7)
!23 = !DILocation(line: 32, column: 53, scope: !7)
!24 = !DILocation(line: 32, column: 45, scope: !7)
!25 = !DILocation(line: 33, column: 30, scope: !7)
!26 = !DILocation(line: 33, column: 35, scope: !7)
!27 = !DILocation(line: 34, column: 30, scope: !7)
!28 = !DILocation(line: 34, column: 35, scope: !7)
!29 = !DILocation(line: 35, column: 31, scope: !7)
!30 = !DILocation(line: 35, column: 36, scope: !7)
!31 = !DILocation(line: 36, column: 31, scope: !7)
!32 = !DILocation(line: 36, column: 36, scope: !7)
!33 = !DILocation(line: 37, column: 31, scope: !7)
!34 = !DILocation(line: 37, column: 46, scope: !7)
!35 = !DILocation(line: 40, column: 18, scope: !7)
!36 = !DILocation(line: 41, column: 26, scope: !7)
!37 = !DILocation(line: 43, column: 18, scope: !7)
!38 = !DILocation(line: 38, column: 18, scope: !7)
!39 = !DILocation(line: 46, column: 19, scope: !7)
!40 = !DILocation(line: 47, column: 20, scope: !7)
!41 = !DILocation(line: 48, column: 20, scope: !7)
!42 = !DILocation(line: 50, column: 20, scope: !7)
!43 = !DILocation(line: 53, column: 35, scope: !7)
!44 = !DILocation(line: 52, column: 20, scope: !7)
!45 = !DILocation(line: 54, column: 20, scope: !7)
!46 = !DILocation(line: 55, column: 32, scope: !7)
!47 = !DILocation(line: 55, column: 42, scope: !7)
!48 = !DILocation(line: 55, column: 37, scope: !7)
!49 = !DILocation(line: 55, column: 25, scope: !7)
!50 = !DILocation(line: 55, column: 54, scope: !7)
!51 = !DILocation(line: 55, column: 4, scope: !7)
