; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_74(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %12 = shl i32 %11, 7, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = and i32 %13, 127, !dbg !12
  %15 = or disjoint i32 %12, %14, !dbg !13
  %16 = icmp slt i32 %15, 27520, !dbg !14
  %17 = sdiv i32 %15, 430, !dbg !15
  %18 = sdiv i32 %15, 6880, !dbg !16
  %19 = sdiv i32 %15, 1720, !dbg !17
  %20 = srem i32 %19, 4, !dbg !18
  %21 = srem i32 %17, 4, !dbg !19
  %22 = mul nsw i32 %17, 325, !dbg !20
  %23 = mul nsw i32 %18, 1696, !dbg !21
  %24 = insertelement <2 x i32> poison, i32 %17, i64 0, !dbg !22
  %25 = insertelement <2 x i32> %24, i32 %15, i64 1, !dbg !22
  %26 = srem <2 x i32> %25, <i32 16, i32 430>, !dbg !22
  %27 = extractelement <2 x i32> %26, i64 1, !dbg !23
  %28 = icmp slt i32 %27, 325, !dbg !24
  %29 = add nsw i32 %22, %27, !dbg !25
  %30 = sext i32 %29 to i64, !dbg !26
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !26
  %32 = and i1 %16, %28, !dbg !27
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %31, i1 %32, i32 0, i1 %32) #1, !dbg !28
  %34 = icmp sgt i32 %27, 324, !dbg !23
  %35 = insertelement <2 x i32> <i32 poison, i32 -325>, i32 %23, i64 0, !dbg !29
  %36 = add nsw <2 x i32> %35, %26, !dbg !29
  %37 = extractelement <2 x i32> %36, i64 1, !dbg !30
  %38 = shl nsw i32 %37, 4, !dbg !30
  %39 = extractelement <2 x i32> %36, i64 0, !dbg !31
  %40 = add nsw i32 %39, %38, !dbg !31
  %41 = sext i32 %40 to i64, !dbg !32
  %42 = getelementptr float, ptr addrspace(1) %1, i64 %41, !dbg !32
  %43 = and i1 %16, %34, !dbg !33
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %42, i1 %43, i32 0, i1 %43) #1, !dbg !34
  %45 = bitcast i32 %44 to float, !dbg !34
  %46 = sext i32 %20 to i64, !dbg !35
  %47 = getelementptr i64, ptr addrspace(1) %2, i64 %46, !dbg !35
  %48 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %47, i1 %43, i1 %43) #1, !dbg !36
  %49 = lshr i64 %48, 62, !dbg !37
  %50 = and i64 %49, 2, !dbg !37
  %51 = add i64 %50, %48, !dbg !37
  %52 = sext i32 %21 to i64, !dbg !38
  %53 = getelementptr i64, ptr addrspace(1) %3, i64 %52, !dbg !38
  %54 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %53, i1 %43, i1 %43) #1, !dbg !39
  %55 = lshr i64 %54, 62, !dbg !40
  %56 = and i64 %55, 2, !dbg !40
  %57 = add i64 %56, %54, !dbg !40
  %58 = mul i64 %51, 210, !dbg !41
  %59 = mul nsw i32 %18, 420, !dbg !42
  %60 = sext i32 %59 to i64, !dbg !43
  %61 = sext i32 %37 to i64, !dbg !44
  %.idx = mul i64 %57, 420, !dbg !45
  %62 = getelementptr i8, ptr addrspace(1) %4, i64 %.idx, !dbg !45
  %63 = getelementptr float, ptr addrspace(1) %62, i64 %58, !dbg !45
  %64 = getelementptr float, ptr addrspace(1) %63, i64 %60, !dbg !45
  %65 = getelementptr float, ptr addrspace(1) %64, i64 %61, !dbg !45
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %65, i1 %43, i32 0, i1 %43) #1, !dbg !46
  %67 = bitcast i32 %66 to float, !dbg !46
  %68 = getelementptr i64, ptr addrspace(1) %5, i64 %52, !dbg !47
  %69 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %68, i1 %43, i1 %43) #1, !dbg !48
  %70 = lshr i64 %69, 62, !dbg !49
  %71 = and i64 %70, 2, !dbg !49
  %72 = add i64 %71, %69, !dbg !49
  %.idx1 = mul i64 %72, 420, !dbg !50
  %73 = getelementptr i8, ptr addrspace(1) %4, i64 %.idx1, !dbg !50
  %74 = getelementptr float, ptr addrspace(1) %73, i64 %58, !dbg !50
  %75 = getelementptr float, ptr addrspace(1) %74, i64 %60, !dbg !50
  %76 = getelementptr float, ptr addrspace(1) %75, i64 %61, !dbg !50
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %76, i1 %43, i32 0, i1 %43) #1, !dbg !51
  %78 = bitcast i32 %77 to float, !dbg !51
  %79 = fsub float %78, %67, !dbg !52
  %80 = getelementptr float, ptr addrspace(1) %6, i64 %52, !dbg !53
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %80, i1 %43, i32 0, i1 %43) #1, !dbg !54
  %82 = bitcast i32 %81 to float, !dbg !54
  %83 = fmul float %79, %82, !dbg !55
  %84 = fadd float %83, %67, !dbg !56
  %85 = fsub float %84, %45, !dbg !57
  %86 = getelementptr float, ptr addrspace(1) %7, i64 %46, !dbg !58
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %86, i1 %43, i32 0, i1 %43) #1, !dbg !59
  %88 = bitcast i32 %87 to float, !dbg !59
  %89 = fmul float %85, %88, !dbg !60
  %90 = fadd float %89, %45, !dbg !61
  %91 = sext i32 %15 to i64, !dbg !62
  %92 = getelementptr float, ptr addrspace(1) %8, i64 %91, !dbg !62
  %93 = bitcast float %90 to i32, !dbg !63
  %94 = select i1 %28, i32 %33, i32 %93, !dbg !64
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %94, ptr addrspace(1) %92, i1 %16) #1, !dbg !63
  ret void, !dbg !65
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ciiwtxkk6zfqxy2stwf47fdadkcbxcv5nmkragonmzlrghmgpqde.py", directory: "inductor_cache/ii")
!4 = !{ptr @triton_poi_fused_cat_74, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_74, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_74", linkageName: "triton_poi_fused_cat_74", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 28, column: 21, scope: !7)
!18 = !DILocation(line: 28, column: 29, scope: !7)
!19 = !DILocation(line: 29, column: 28, scope: !7)
!20 = !DILocation(line: 36, column: 34, scope: !7)
!21 = !DILocation(line: 40, column: 59, scope: !7)
!22 = !DILocation(line: 27, column: 28, scope: !7)
!23 = !DILocation(line: 37, column: 19, scope: !7)
!24 = !DILocation(line: 35, column: 18, scope: !7)
!25 = !DILocation(line: 36, column: 40, scope: !7)
!26 = !DILocation(line: 36, column: 30, scope: !7)
!27 = !DILocation(line: 36, column: 53, scope: !7)
!28 = !DILocation(line: 36, column: 46, scope: !7)
!29 = !DILocation(line: 40, column: 35, scope: !7)
!30 = !DILocation(line: 40, column: 39, scope: !7)
!31 = !DILocation(line: 40, column: 54, scope: !7)
!32 = !DILocation(line: 40, column: 30, scope: !7)
!33 = !DILocation(line: 40, column: 71, scope: !7)
!34 = !DILocation(line: 40, column: 64, scope: !7)
!35 = !DILocation(line: 41, column: 31, scope: !7)
!36 = !DILocation(line: 41, column: 36, scope: !7)
!37 = !DILocation(line: 45, column: 35, scope: !7)
!38 = !DILocation(line: 46, column: 31, scope: !7)
!39 = !DILocation(line: 46, column: 36, scope: !7)
!40 = !DILocation(line: 49, column: 35, scope: !7)
!41 = !DILocation(line: 50, column: 47, scope: !7)
!42 = !DILocation(line: 50, column: 59, scope: !7)
!43 = !DILocation(line: 50, column: 55, scope: !7)
!44 = !DILocation(line: 50, column: 65, scope: !7)
!45 = !DILocation(line: 50, column: 31, scope: !7)
!46 = !DILocation(line: 50, column: 80, scope: !7)
!47 = !DILocation(line: 51, column: 31, scope: !7)
!48 = !DILocation(line: 51, column: 36, scope: !7)
!49 = !DILocation(line: 54, column: 35, scope: !7)
!50 = !DILocation(line: 55, column: 31, scope: !7)
!51 = !DILocation(line: 55, column: 80, scope: !7)
!52 = !DILocation(line: 56, column: 20, scope: !7)
!53 = !DILocation(line: 57, column: 31, scope: !7)
!54 = !DILocation(line: 57, column: 36, scope: !7)
!55 = !DILocation(line: 58, column: 20, scope: !7)
!56 = !DILocation(line: 59, column: 20, scope: !7)
!57 = !DILocation(line: 60, column: 20, scope: !7)
!58 = !DILocation(line: 61, column: 31, scope: !7)
!59 = !DILocation(line: 61, column: 36, scope: !7)
!60 = !DILocation(line: 62, column: 20, scope: !7)
!61 = !DILocation(line: 63, column: 19, scope: !7)
!62 = !DILocation(line: 67, column: 25, scope: !7)
!63 = !DILocation(line: 67, column: 37, scope: !7)
!64 = !DILocation(line: 66, column: 33, scope: !7)
!65 = !DILocation(line: 67, column: 4, scope: !7)
