; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused__native_batch_norm_legit_no_training_add_mean_relu_23(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9) local_unnamed_addr !dbg !7 {
__nv_sqrtf.exit:
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #5, !dbg !10
  %11 = shl i32 %10, 7, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = lshr i32 %12, 2, !dbg !12
  %14 = and i32 %13, 63, !dbg !12
  %15 = or disjoint i32 %14, 64, !dbg !12
  %16 = or disjoint i32 %11, %14, !dbg !13
  %17 = or disjoint i32 %11, %15, !dbg !13
  %18 = shl i32 %12, 2, !dbg !14
  %19 = and i32 %18, 12, !dbg !14
  %20 = srem i32 %16, 1024, !dbg !15
  %21 = srem i32 %17, 1024, !dbg !15
  %22 = shl i32 %16, 4, !dbg !16
  %23 = shl i32 %17, 4, !dbg !16
  %24 = or disjoint i32 %22, %19, !dbg !17
  %25 = or disjoint i32 %23, %19, !dbg !17
  %26 = sext i32 %24 to i64, !dbg !18
  %27 = getelementptr float, ptr addrspace(1) %1, i64 %26, !dbg !18
  %28 = sext i32 %25 to i64, !dbg !18
  %29 = getelementptr float, ptr addrspace(1) %1, i64 %28, !dbg !18
  %30 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %27, i1 true) #5, !dbg !19
  %31 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %29, i1 true) #5, !dbg !19
  %32 = getelementptr float, ptr addrspace(1) %2, i64 %26, !dbg !20
  %33 = getelementptr float, ptr addrspace(1) %2, i64 %28, !dbg !20
  %34 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %32, i1 true) #5, !dbg !21
  %35 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %33, i1 true) #5, !dbg !21
  %36 = sext i32 %20 to i64, !dbg !22
  %37 = getelementptr float, ptr addrspace(1) %3, i64 %36, !dbg !22
  %38 = sext i32 %21 to i64, !dbg !22
  %39 = getelementptr float, ptr addrspace(1) %3, i64 %38, !dbg !22
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 true) #5, !dbg !23
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 true) #5, !dbg !23
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 true) #5, !dbg !23
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 true) #5, !dbg !23
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #5, !dbg !23
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #5, !dbg !23
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #5, !dbg !23
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #5, !dbg !23
  %48 = getelementptr float, ptr addrspace(1) %4, i64 %36, !dbg !24
  %49 = getelementptr float, ptr addrspace(1) %4, i64 %38, !dbg !24
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #5, !dbg !25
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #5, !dbg !25
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #5, !dbg !25
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #5, !dbg !25
  %54 = bitcast i32 %53 to float, !dbg !25
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 true) #5, !dbg !25
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 true) #5, !dbg !25
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 true) #5, !dbg !25
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 true) #5, !dbg !25
  %59 = bitcast i32 %58 to float, !dbg !25
  %60 = getelementptr float, ptr addrspace(1) %5, i64 %36, !dbg !26
  %61 = getelementptr float, ptr addrspace(1) %5, i64 %38, !dbg !26
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 true) #5, !dbg !27
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 true) #5, !dbg !27
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 true) #5, !dbg !27
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 true) #5, !dbg !27
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 true) #5, !dbg !27
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 true) #5, !dbg !27
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 true) #5, !dbg !27
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 true) #5, !dbg !27
  %70 = getelementptr float, ptr addrspace(1) %6, i64 %36, !dbg !28
  %71 = getelementptr float, ptr addrspace(1) %6, i64 %38, !dbg !28
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 true) #5, !dbg !29
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 true) #5, !dbg !29
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 true) #5, !dbg !29
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 true) #5, !dbg !29
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %71, i1 true) #5, !dbg !29
  %77 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %71, i1 true) #5, !dbg !29
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %71, i1 true) #5, !dbg !29
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %71, i1 true) #5, !dbg !29
  %80 = fadd float %54, 0x3EE4F8B580000000, !dbg !30
  %81 = fadd float %59, 0x3EE4F8B580000000, !dbg !30
  %82 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !31
  %83 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !31
  %84 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !31
  %85 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !31
  %86 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !31
  %87 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !31
  %88 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !31
  %.not.i13 = icmp eq i32 %88, 0, !dbg !31
  %89 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !31
  %.not1.i16 = icmp eq i32 %89, 0, !dbg !31
  br i1 %.not.i13, label %95, label %90, !dbg !31

90:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i16, label %93, label %91, !dbg !31

91:                                               ; preds = %90
  %92 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %80) #5, !dbg !31
  br label %__nv_sqrtf.exit17, !dbg !31

93:                                               ; preds = %90
  %94 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %80) #5, !dbg !31
  br label %__nv_sqrtf.exit17, !dbg !31

95:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i16, label %98, label %96, !dbg !31

96:                                               ; preds = %95
  %97 = tail call float @llvm.nvvm.sqrt.rn.f(float %80) #5, !dbg !31
  br label %__nv_sqrtf.exit17, !dbg !31

98:                                               ; preds = %95
  %99 = tail call float @llvm.nvvm.sqrt.approx.f(float %80) #5, !dbg !31
  br label %__nv_sqrtf.exit17, !dbg !31

__nv_sqrtf.exit17:                                ; preds = %91, %93, %96, %98
  %.0.i15 = phi float [ %92, %91 ], [ %94, %93 ], [ %97, %96 ], [ %99, %98 ], !dbg !31
  %100 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !31
  %101 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !31
  %102 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !31
  %103 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !31
  %104 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !31
  %105 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !31
  %106 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !31
  %.not.i33 = icmp eq i32 %106, 0, !dbg !31
  %107 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !31
  %.not1.i36 = icmp eq i32 %107, 0, !dbg !31
  br i1 %.not.i33, label %113, label %108, !dbg !31

108:                                              ; preds = %__nv_sqrtf.exit17
  br i1 %.not1.i36, label %111, label %109, !dbg !31

109:                                              ; preds = %108
  %110 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %81) #5, !dbg !31
  br label %__nv_sqrtf.exit37, !dbg !31

111:                                              ; preds = %108
  %112 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %81) #5, !dbg !31
  br label %__nv_sqrtf.exit37, !dbg !31

113:                                              ; preds = %__nv_sqrtf.exit17
  br i1 %.not1.i36, label %116, label %114, !dbg !31

114:                                              ; preds = %113
  %115 = tail call float @llvm.nvvm.sqrt.rn.f(float %81) #5, !dbg !31
  br label %__nv_sqrtf.exit37, !dbg !31

116:                                              ; preds = %113
  %117 = tail call float @llvm.nvvm.sqrt.approx.f(float %81) #5, !dbg !31
  br label %__nv_sqrtf.exit37, !dbg !31

__nv_sqrtf.exit37:                                ; preds = %109, %111, %114, %116
  %.0.i35 = phi float [ %110, %109 ], [ %112, %111 ], [ %115, %114 ], [ %117, %116 ], !dbg !31
  %118 = extractvalue { i32, i32, i32, i32 } %35, 3, !dbg !21
  %119 = bitcast i32 %118 to float, !dbg !21
  %120 = bitcast i32 %47 to float, !dbg !23
  %121 = fsub float %119, %120, !dbg !32
  %122 = extractvalue { i32, i32, i32, i32 } %35, 2, !dbg !21
  %123 = bitcast i32 %122 to float, !dbg !21
  %124 = fsub float %123, %120, !dbg !32
  %125 = extractvalue { i32, i32, i32, i32 } %35, 1, !dbg !21
  %126 = bitcast i32 %125 to float, !dbg !21
  %127 = fsub float %126, %120, !dbg !32
  %128 = extractvalue { i32, i32, i32, i32 } %35, 0, !dbg !21
  %129 = bitcast i32 %128 to float, !dbg !21
  %130 = fsub float %129, %120, !dbg !32
  %131 = extractvalue { i32, i32, i32, i32 } %34, 3, !dbg !21
  %132 = bitcast i32 %131 to float, !dbg !21
  %133 = bitcast i32 %43 to float, !dbg !23
  %134 = fsub float %132, %133, !dbg !32
  %135 = extractvalue { i32, i32, i32, i32 } %34, 2, !dbg !21
  %136 = bitcast i32 %135 to float, !dbg !21
  %137 = fsub float %136, %133, !dbg !32
  %138 = extractvalue { i32, i32, i32, i32 } %34, 1, !dbg !21
  %139 = bitcast i32 %138 to float, !dbg !21
  %140 = fsub float %139, %133, !dbg !32
  %141 = extractvalue { i32, i32, i32, i32 } %34, 0, !dbg !21
  %142 = bitcast i32 %141 to float, !dbg !21
  %143 = fsub float %142, %133, !dbg !32
  %144 = bitcast i32 %79 to float, !dbg !29
  %145 = bitcast i32 %75 to float, !dbg !29
  %146 = bitcast i32 %69 to float, !dbg !27
  %147 = bitcast i32 %65 to float, !dbg !27
  %148 = extractvalue { i32, i32, i32, i32 } %31, 3, !dbg !19
  %149 = bitcast i32 %148 to float, !dbg !19
  %150 = extractvalue { i32, i32, i32, i32 } %31, 2, !dbg !19
  %151 = bitcast i32 %150 to float, !dbg !19
  %152 = extractvalue { i32, i32, i32, i32 } %31, 1, !dbg !19
  %153 = bitcast i32 %152 to float, !dbg !19
  %154 = extractvalue { i32, i32, i32, i32 } %31, 0, !dbg !19
  %155 = bitcast i32 %154 to float, !dbg !19
  %156 = extractvalue { i32, i32, i32, i32 } %30, 3, !dbg !19
  %157 = bitcast i32 %156 to float, !dbg !19
  %158 = extractvalue { i32, i32, i32, i32 } %30, 2, !dbg !19
  %159 = bitcast i32 %158 to float, !dbg !19
  %160 = extractvalue { i32, i32, i32, i32 } %30, 1, !dbg !19
  %161 = bitcast i32 %160 to float, !dbg !19
  %162 = extractvalue { i32, i32, i32, i32 } %30, 0, !dbg !19
  %163 = bitcast i32 %162 to float, !dbg !19
  %164 = and i32 %12, 127, !dbg !12
  %165 = or disjoint i32 %11, %164, !dbg !13
  %166 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i15) #5, !dbg !33
  %167 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i35) #5, !dbg !33
  %168 = fmul float %143, %166, !dbg !34
  %169 = fmul float %140, %166, !dbg !34
  %170 = fmul float %137, %166, !dbg !34
  %171 = fmul float %134, %166, !dbg !34
  %172 = fmul float %130, %167, !dbg !34
  %173 = fmul float %127, %167, !dbg !34
  %174 = fmul float %124, %167, !dbg !34
  %175 = fmul float %121, %167, !dbg !34
  %176 = fmul float %168, %147, !dbg !35
  %177 = fmul float %169, %147, !dbg !35
  %178 = fmul float %170, %147, !dbg !35
  %179 = fmul float %171, %147, !dbg !35
  %180 = fmul float %172, %146, !dbg !35
  %181 = fmul float %173, %146, !dbg !35
  %182 = fmul float %174, %146, !dbg !35
  %183 = fmul float %175, %146, !dbg !35
  %184 = fadd float %176, %145, !dbg !36
  %185 = fadd float %177, %145, !dbg !36
  %186 = fadd float %178, %145, !dbg !36
  %187 = fadd float %179, %145, !dbg !36
  %188 = fadd float %180, %144, !dbg !36
  %189 = fadd float %181, %144, !dbg !36
  %190 = fadd float %182, %144, !dbg !36
  %191 = fadd float %183, %144, !dbg !36
  %192 = fcmp olt float %184, 0.000000e+00, !dbg !37
  %193 = fcmp olt float %185, 0.000000e+00, !dbg !37
  %194 = fcmp olt float %186, 0.000000e+00, !dbg !37
  %195 = fcmp olt float %187, 0.000000e+00, !dbg !37
  %196 = fcmp olt float %188, 0.000000e+00, !dbg !37
  %197 = fcmp olt float %189, 0.000000e+00, !dbg !37
  %198 = fcmp olt float %190, 0.000000e+00, !dbg !37
  %199 = fcmp olt float %191, 0.000000e+00, !dbg !37
  %200 = select i1 %192, float 0.000000e+00, float %184, !dbg !41
  %201 = select i1 %193, float 0.000000e+00, float %185, !dbg !41
  %202 = select i1 %194, float 0.000000e+00, float %186, !dbg !41
  %203 = select i1 %195, float 0.000000e+00, float %187, !dbg !41
  %204 = select i1 %196, float 0.000000e+00, float %188, !dbg !41
  %205 = select i1 %197, float 0.000000e+00, float %189, !dbg !41
  %206 = select i1 %198, float 0.000000e+00, float %190, !dbg !41
  %207 = select i1 %199, float 0.000000e+00, float %191, !dbg !41
  %208 = fadd float %200, %163, !dbg !42
  %209 = fadd float %201, %161, !dbg !42
  %210 = fadd float %202, %159, !dbg !42
  %211 = fadd float %203, %157, !dbg !42
  %212 = fadd float %204, %155, !dbg !42
  %213 = fadd float %205, %153, !dbg !42
  %214 = fadd float %206, %151, !dbg !42
  %215 = fadd float %207, %149, !dbg !42
  %216 = fcmp olt float %208, 0.000000e+00, !dbg !43
  %217 = fcmp olt float %209, 0.000000e+00, !dbg !43
  %218 = fcmp olt float %210, 0.000000e+00, !dbg !43
  %219 = fcmp olt float %211, 0.000000e+00, !dbg !43
  %220 = fcmp olt float %212, 0.000000e+00, !dbg !43
  %221 = fcmp olt float %213, 0.000000e+00, !dbg !43
  %222 = fcmp olt float %214, 0.000000e+00, !dbg !43
  %223 = fcmp olt float %215, 0.000000e+00, !dbg !43
  %224 = select i1 %216, float 0.000000e+00, float %208, !dbg !45
  %225 = select i1 %217, float 0.000000e+00, float %209, !dbg !45
  %226 = select i1 %218, float 0.000000e+00, float %210, !dbg !45
  %227 = select i1 %219, float 0.000000e+00, float %211, !dbg !45
  %228 = select i1 %220, float 0.000000e+00, float %212, !dbg !45
  %229 = select i1 %221, float 0.000000e+00, float %213, !dbg !45
  %230 = select i1 %222, float 0.000000e+00, float %214, !dbg !45
  %231 = select i1 %223, float 0.000000e+00, float %215, !dbg !45
  %232 = fadd float %224, %225, !dbg !46
  %233 = fadd float %226, %232, !dbg !46
  %234 = fadd float %227, %233, !dbg !46
  %235 = fadd float %228, %229, !dbg !46
  %236 = fadd float %230, %235, !dbg !46
  %237 = fadd float %231, %236, !dbg !46
  %238 = bitcast float %234 to i32, !dbg !51
  %239 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %238, i32 2, i32 31), !dbg !51
  %240 = bitcast i32 %239 to float, !dbg !51
  %241 = fadd float %234, %240, !dbg !46
  %242 = bitcast float %241 to i32, !dbg !51
  %243 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %242, i32 1, i32 31), !dbg !51
  %244 = bitcast i32 %243 to float, !dbg !51
  %245 = fadd float %241, %244, !dbg !46
  %246 = bitcast float %237 to i32, !dbg !51
  %247 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %246, i32 2, i32 31), !dbg !51
  %248 = bitcast i32 %247 to float, !dbg !51
  %249 = fadd float %237, %248, !dbg !46
  %250 = bitcast float %249 to i32, !dbg !51
  %251 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %250, i32 1, i32 31), !dbg !51
  %252 = bitcast i32 %251 to float, !dbg !51
  %253 = fadd float %249, %252, !dbg !46
  %254 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !52
  %255 = bitcast float %245 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %254, <1 x i32> %255, i1 true) #5, !dbg !52
  %256 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !52
  %257 = bitcast float %253 to <1 x i32>, !dbg !52
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %256, <1 x i32> %257, i1 true) #5, !dbg !52
  tail call void @llvm.nvvm.barrier0(), !dbg !52
  %258 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %164, !dbg !52
  %259 = load float, ptr addrspace(3) %258, align 4, !dbg !52
  %260 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %259, float 1.600000e+01) #5, !dbg !52
  %261 = getelementptr float, ptr addrspace(1) %7, i64 %26, !dbg !53
  %262 = getelementptr float, ptr addrspace(1) %7, i64 %28, !dbg !53
  %263 = bitcast float %224 to i32, !dbg !54
  %264 = bitcast float %225 to i32, !dbg !54
  %265 = bitcast float %226 to i32, !dbg !54
  %266 = bitcast float %227 to i32, !dbg !54
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %263, i32 %264, i32 %265, i32 %266, ptr addrspace(1) %261, i1 true) #5, !dbg !54
  %267 = bitcast float %228 to i32, !dbg !54
  %268 = bitcast float %229 to i32, !dbg !54
  %269 = bitcast float %230 to i32, !dbg !54
  %270 = bitcast float %231 to i32, !dbg !54
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %267, i32 %268, i32 %269, i32 %270, ptr addrspace(1) %262, i1 true) #5, !dbg !54
  tail call void @llvm.nvvm.barrier0(), !dbg !55
  %271 = sext i32 %165 to i64, !dbg !56
  %272 = getelementptr float, ptr addrspace(1) %0, i64 %271, !dbg !56
  %273 = and i32 %12, 128, !dbg !57
  %274 = icmp eq i32 %273, 0, !dbg !57
  %275 = bitcast float %260 to i32, !dbg !57
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %275, ptr addrspace(1) %272, i1 %274) #5, !dbg !57
  ret void, !dbg !58
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c4dkxty2uvmx5ehyf2w4lepd7hytdjrzcf3ztzktvwnmkzzoulhf.py", directory: "inductor_cache/4d")
!4 = !{ptr @triton_per_fused__native_batch_norm_legit_no_training_add_mean_relu_23, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__native_batch_norm_legit_no_training_add_mean_relu_23, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__native_batch_norm_legit_no_training_add_mean_relu_23", linkageName: "triton_per_fused__native_batch_norm_legit_no_training_add_mean_relu_23", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 26, column: 34, scope: !7)
!15 = !DILocation(line: 31, column: 19, scope: !7)
!16 = !DILocation(line: 32, column: 38, scope: !7)
!17 = !DILocation(line: 32, column: 35, scope: !7)
!18 = !DILocation(line: 32, column: 30, scope: !7)
!19 = !DILocation(line: 32, column: 43, scope: !7)
!20 = !DILocation(line: 33, column: 30, scope: !7)
!21 = !DILocation(line: 33, column: 43, scope: !7)
!22 = !DILocation(line: 34, column: 30, scope: !7)
!23 = !DILocation(line: 34, column: 35, scope: !7)
!24 = !DILocation(line: 35, column: 30, scope: !7)
!25 = !DILocation(line: 35, column: 35, scope: !7)
!26 = !DILocation(line: 36, column: 31, scope: !7)
!27 = !DILocation(line: 36, column: 36, scope: !7)
!28 = !DILocation(line: 37, column: 31, scope: !7)
!29 = !DILocation(line: 37, column: 36, scope: !7)
!30 = !DILocation(line: 40, column: 18, scope: !7)
!31 = !DILocation(line: 41, column: 26, scope: !7)
!32 = !DILocation(line: 38, column: 18, scope: !7)
!33 = !DILocation(line: 43, column: 18, scope: !7)
!34 = !DILocation(line: 46, column: 19, scope: !7)
!35 = !DILocation(line: 47, column: 20, scope: !7)
!36 = !DILocation(line: 48, column: 20, scope: !7)
!37 = !DILocation(line: 118, column: 15, scope: !38, inlinedAt: !40)
!38 = distinct !DILexicalBlockFile(scope: !7, file: !39, discriminator: 0)
!39 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!40 = !DILocation(line: 50, column: 42, scope: !7)
!41 = !DILocation(line: 121, column: 29, scope: !38, inlinedAt: !40)
!42 = !DILocation(line: 51, column: 19, scope: !7)
!43 = !DILocation(line: 118, column: 15, scope: !38, inlinedAt: !44)
!44 = !DILocation(line: 52, column: 42, scope: !7)
!45 = !DILocation(line: 121, column: 29, scope: !38, inlinedAt: !44)
!46 = !DILocation(line: 256, column: 15, scope: !47, inlinedAt: !50)
!47 = distinct !DILexicalBlockFile(scope: !49, file: !48, discriminator: 0)
!48 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!49 = distinct !DILexicalBlockFile(scope: !7, file: !48, discriminator: 0)
!50 = !DILocation(line: 54, column: 26, scope: !7)
!51 = !DILocation(line: 267, column: 36, scope: !49, inlinedAt: !50)
!52 = !DILocation(line: 56, column: 20, scope: !7)
!53 = !DILocation(line: 57, column: 25, scope: !7)
!54 = !DILocation(line: 57, column: 45, scope: !7)
!55 = !DILocation(line: 58, column: 4, scope: !7)
!56 = !DILocation(line: 59, column: 28, scope: !7)
!57 = !DILocation(line: 59, column: 40, scope: !7)
!58 = !DILocation(line: 59, column: 4, scope: !7)
