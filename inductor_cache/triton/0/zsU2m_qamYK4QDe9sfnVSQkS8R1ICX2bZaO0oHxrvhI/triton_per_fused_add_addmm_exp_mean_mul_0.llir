; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_per_fused_add_addmm_exp_mean_mul_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %9 = and i32 %8, 15, !dbg !10
  %10 = and i32 %8, 12, !dbg !11
  %11 = zext nneg i32 %10 to i64, !dbg !12
  %12 = getelementptr float, ptr addrspace(1) %1, i64 %11, !dbg !12
  %13 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %12, i1 true) #2, !dbg !13
  %14 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %12, i1 true) #2, !dbg !13
  %15 = or disjoint i32 %10, 1, !dbg !14
  %16 = zext nneg i32 %15 to i64, !dbg !15
  %17 = getelementptr float, ptr addrspace(1) %1, i64 %16, !dbg !15
  %18 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %17, i1 true) #2, !dbg !16
  %19 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %17, i1 true) #2, !dbg !16
  %20 = or disjoint i32 %10, 2, !dbg !17
  %21 = zext nneg i32 %20 to i64, !dbg !18
  %22 = getelementptr float, ptr addrspace(1) %1, i64 %21, !dbg !18
  %23 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %22, i1 true) #2, !dbg !19
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %22, i1 true) #2, !dbg !19
  %25 = or disjoint i32 %10, 3, !dbg !20
  %26 = zext nneg i32 %25 to i64, !dbg !21
  %27 = getelementptr float, ptr addrspace(1) %1, i64 %26, !dbg !21
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 true) #2, !dbg !22
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 true) #2, !dbg !22
  %30 = shl i32 %8, 2, !dbg !23
  %31 = and i32 %30, 12, !dbg !23
  %32 = zext nneg i32 %31 to i64, !dbg !24
  %33 = getelementptr float, ptr addrspace(1) %1, i64 %32, !dbg !24
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 true) #2, !dbg !25
  %35 = or disjoint i32 %31, 1, !dbg !26
  %36 = zext nneg i32 %35 to i64, !dbg !27
  %37 = getelementptr float, ptr addrspace(1) %1, i64 %36, !dbg !27
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 true) #2, !dbg !28
  %39 = or disjoint i32 %31, 2, !dbg !29
  %40 = zext nneg i32 %39 to i64, !dbg !30
  %41 = getelementptr float, ptr addrspace(1) %1, i64 %40, !dbg !30
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 true) #2, !dbg !31
  %43 = or disjoint i32 %31, 3, !dbg !32
  %44 = zext nneg i32 %43 to i64, !dbg !33
  %45 = getelementptr float, ptr addrspace(1) %1, i64 %44, !dbg !33
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 true) #2, !dbg !34
  %47 = getelementptr float, ptr addrspace(1) %2, i64 %11, !dbg !35
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 true) #2, !dbg !36
  %49 = getelementptr float, ptr addrspace(1) %2, i64 %16, !dbg !37
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 true) #2, !dbg !38
  %51 = getelementptr float, ptr addrspace(1) %2, i64 %21, !dbg !39
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 true) #2, !dbg !40
  %53 = getelementptr float, ptr addrspace(1) %2, i64 %26, !dbg !41
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 true) #2, !dbg !42
  %55 = getelementptr float, ptr addrspace(1) %2, i64 %32, !dbg !43
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 true) #2, !dbg !44
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 true) #2, !dbg !44
  %58 = getelementptr float, ptr addrspace(1) %2, i64 %36, !dbg !45
  %59 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 true) #2, !dbg !46
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 true) #2, !dbg !46
  %61 = getelementptr float, ptr addrspace(1) %2, i64 %40, !dbg !47
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 true) #2, !dbg !48
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %61, i1 true) #2, !dbg !48
  %64 = getelementptr float, ptr addrspace(1) %2, i64 %44, !dbg !49
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 true) #2, !dbg !50
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 true) #2, !dbg !50
  %67 = zext nneg i32 %9 to i64, !dbg !51
  %68 = getelementptr float, ptr addrspace(1) %0, i64 %67, !dbg !51
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 true) #2, !dbg !52
  %70 = bitcast i32 %69 to float, !dbg !52
  %71 = insertelement <2 x i32> poison, i32 %14, i64 0, !dbg !13
  %72 = insertelement <2 x i32> %71, i32 %34, i64 1, !dbg !13
  %73 = bitcast <2 x i32> %72 to <2 x float>, !dbg !13
  %74 = insertelement <2 x i32> poison, i32 %19, i64 0, !dbg !16
  %75 = insertelement <2 x i32> %74, i32 %38, i64 1, !dbg !16
  %76 = bitcast <2 x i32> %75 to <2 x float>, !dbg !16
  %77 = insertelement <2 x i32> poison, i32 %24, i64 0, !dbg !19
  %78 = insertelement <2 x i32> %77, i32 %42, i64 1, !dbg !19
  %79 = bitcast <2 x i32> %78 to <2 x float>, !dbg !19
  %80 = insertelement <2 x i32> poison, i32 %29, i64 0, !dbg !22
  %81 = insertelement <2 x i32> %80, i32 %46, i64 1, !dbg !22
  %82 = bitcast <2 x i32> %81 to <2 x float>, !dbg !22
  %83 = fmul <2 x float> %73, %73, !dbg !53
  %84 = fmul <2 x float> %76, %76, !dbg !54
  %85 = fadd <2 x float> %83, %84, !dbg !55
  %86 = fmul <2 x float> %79, %79, !dbg !56
  %87 = fadd <2 x float> %85, %86, !dbg !57
  %88 = fmul <2 x float> %82, %82, !dbg !58
  %89 = fadd <2 x float> %87, %88, !dbg !59
  %shift = shufflevector <2 x float> %89, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !60
  %90 = fadd <2 x float> %89, %shift, !dbg !60
  %91 = insertelement <2 x i32> poison, i32 %13, i64 0, !dbg !13
  %92 = insertelement <2 x i32> %91, i32 %56, i64 1, !dbg !13
  %93 = bitcast <2 x i32> %92 to <2 x float>, !dbg !13
  %94 = insertelement <2 x i32> poison, i32 %18, i64 0, !dbg !16
  %95 = insertelement <2 x i32> %94, i32 %59, i64 1, !dbg !16
  %96 = bitcast <2 x i32> %95 to <2 x float>, !dbg !16
  %97 = insertelement <2 x i32> poison, i32 %23, i64 0, !dbg !19
  %98 = insertelement <2 x i32> %97, i32 %62, i64 1, !dbg !19
  %99 = bitcast <2 x i32> %98 to <2 x float>, !dbg !19
  %100 = insertelement <2 x i32> poison, i32 %28, i64 0, !dbg !22
  %101 = insertelement <2 x i32> %100, i32 %65, i64 1, !dbg !22
  %102 = bitcast <2 x i32> %101 to <2 x float>, !dbg !22
  %103 = fmul <2 x float> %93, %93, !dbg !53
  %104 = fmul <2 x float> %96, %96, !dbg !54
  %105 = fadd <2 x float> %103, %104, !dbg !55
  %106 = fmul <2 x float> %99, %99, !dbg !56
  %107 = fadd <2 x float> %105, %106, !dbg !57
  %108 = fmul <2 x float> %102, %102, !dbg !58
  %109 = fadd <2 x float> %107, %108, !dbg !59
  %110 = insertelement <2 x i32> poison, i32 %48, i64 0, !dbg !36
  %111 = insertelement <2 x i32> %110, i32 %57, i64 1, !dbg !36
  %112 = bitcast <2 x i32> %111 to <2 x float>, !dbg !36
  %113 = insertelement <2 x i32> poison, i32 %50, i64 0, !dbg !38
  %114 = insertelement <2 x i32> %113, i32 %60, i64 1, !dbg !38
  %115 = bitcast <2 x i32> %114 to <2 x float>, !dbg !38
  %116 = insertelement <2 x i32> poison, i32 %52, i64 0, !dbg !40
  %117 = insertelement <2 x i32> %116, i32 %63, i64 1, !dbg !40
  %118 = bitcast <2 x i32> %117 to <2 x float>, !dbg !40
  %119 = insertelement <2 x i32> poison, i32 %54, i64 0, !dbg !42
  %120 = insertelement <2 x i32> %119, i32 %66, i64 1, !dbg !42
  %121 = bitcast <2 x i32> %120 to <2 x float>, !dbg !42
  %122 = fmul <2 x float> %112, %112, !dbg !61
  %123 = fmul <2 x float> %115, %115, !dbg !62
  %124 = fadd <2 x float> %122, %123, !dbg !63
  %125 = fmul <2 x float> %118, %118, !dbg !64
  %126 = fadd <2 x float> %124, %125, !dbg !65
  %127 = fmul <2 x float> %121, %121, !dbg !66
  %128 = fadd <2 x float> %126, %127, !dbg !67
  %shift1 = shufflevector <2 x float> %128, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !68
  %129 = fadd <2 x float> %128, %shift1, !dbg !68
  %shift2 = shufflevector <2 x float> %109, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !69
  %130 = fadd <2 x float> %109, %shift2, !dbg !69
  %131 = extractelement <2 x float> %130, i64 0, !dbg !69
  %132 = fadd float %131, %70, !dbg !70
  %133 = fmul float %132, -5.000000e-01, !dbg !71
  %134 = fmul float %133, 0x3FF7154760000000, !dbg !72
  %135 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %134) #2, !dbg !72
  %136 = fadd float %135, 0.000000e+00, !dbg !73
  %137 = fmul float %132, 0xBF947AE140000000, !dbg !74
  %138 = fmul float %137, 0x3FF7154760000000, !dbg !75
  %139 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %138) #2, !dbg !75
  %140 = fadd float %136, %139, !dbg !76
  %141 = fmul float %132, 0xBF747AE140000000, !dbg !77
  %142 = fmul float %141, 0x3FF7154760000000, !dbg !78
  %143 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %142) #2, !dbg !78
  %144 = fadd float %140, %143, !dbg !79
  %145 = bitcast float %144 to i32, !dbg !80
  %146 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %145, i32 8, i32 31), !dbg !80
  %147 = bitcast i32 %146 to float, !dbg !80
  %148 = fadd float %144, %147, !dbg !84
  %149 = bitcast float %148 to i32, !dbg !80
  %150 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %149, i32 4, i32 31), !dbg !80
  %151 = bitcast i32 %150 to float, !dbg !80
  %152 = fadd float %148, %151, !dbg !84
  %153 = bitcast float %152 to i32, !dbg !80
  %154 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %153, i32 2, i32 31), !dbg !80
  %155 = bitcast i32 %154 to float, !dbg !80
  %156 = fadd float %152, %155, !dbg !84
  %157 = bitcast float %156 to i32, !dbg !80
  %158 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %157, i32 1, i32 31), !dbg !80
  %159 = bitcast i32 %158 to float, !dbg !80
  %160 = fadd float %156, %159, !dbg !84
  %161 = getelementptr float, ptr addrspace(1) %3, i64 %67, !dbg !86
  %162 = and i32 %8, 48, !dbg !87
  %163 = icmp eq i32 %162, 0, !dbg !87
  %bc = bitcast <2 x float> %90 to <2 x i32>, !dbg !87
  %164 = extractelement <2 x i32> %bc, i64 0, !dbg !87
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %164, ptr addrspace(1) %161, i1 %163) #2, !dbg !87
  %165 = getelementptr float, ptr addrspace(1) %4, i64 %67, !dbg !88
  %bc3 = bitcast <2 x float> %129 to <2 x i32>, !dbg !89
  %166 = extractelement <2 x i32> %bc3, i64 0, !dbg !89
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %166, ptr addrspace(1) %165, i1 %163) #2, !dbg !89
  %urem = and i32 %8, 63, !dbg !90
  %167 = icmp eq i32 %urem, 0, !dbg !90
  %168 = bitcast float %160 to i32, !dbg !90
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %168, ptr addrspace(1) %5, i1 %167) #2, !dbg !90
  ret void, !dbg !91
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cosi24s25vgkvo4jrnfnny3pyowv7fciqidrjxuvkiohxzyn6hml.py", directory: "inductor_cache/os")
!4 = !{ptr @triton_per_fused_add_addmm_exp_mean_mul_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_add_addmm_exp_mean_mul_0, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_add_addmm_exp_mean_mul_0", linkageName: "triton_per_fused_add_addmm_exp_mean_mul_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 26, column: 34, scope: !7)
!11 = !DILocation(line: 32, column: 32, scope: !7)
!12 = !DILocation(line: 32, column: 30, scope: !7)
!13 = !DILocation(line: 32, column: 37, scope: !7)
!14 = !DILocation(line: 33, column: 34, scope: !7)
!15 = !DILocation(line: 33, column: 30, scope: !7)
!16 = !DILocation(line: 33, column: 41, scope: !7)
!17 = !DILocation(line: 34, column: 34, scope: !7)
!18 = !DILocation(line: 34, column: 30, scope: !7)
!19 = !DILocation(line: 34, column: 41, scope: !7)
!20 = !DILocation(line: 35, column: 34, scope: !7)
!21 = !DILocation(line: 35, column: 30, scope: !7)
!22 = !DILocation(line: 35, column: 41, scope: !7)
!23 = !DILocation(line: 36, column: 33, scope: !7)
!24 = !DILocation(line: 36, column: 31, scope: !7)
!25 = !DILocation(line: 36, column: 38, scope: !7)
!26 = !DILocation(line: 37, column: 35, scope: !7)
!27 = !DILocation(line: 37, column: 31, scope: !7)
!28 = !DILocation(line: 37, column: 42, scope: !7)
!29 = !DILocation(line: 38, column: 35, scope: !7)
!30 = !DILocation(line: 38, column: 31, scope: !7)
!31 = !DILocation(line: 38, column: 42, scope: !7)
!32 = !DILocation(line: 39, column: 35, scope: !7)
!33 = !DILocation(line: 39, column: 31, scope: !7)
!34 = !DILocation(line: 39, column: 42, scope: !7)
!35 = !DILocation(line: 40, column: 31, scope: !7)
!36 = !DILocation(line: 40, column: 38, scope: !7)
!37 = !DILocation(line: 41, column: 31, scope: !7)
!38 = !DILocation(line: 41, column: 42, scope: !7)
!39 = !DILocation(line: 42, column: 31, scope: !7)
!40 = !DILocation(line: 42, column: 42, scope: !7)
!41 = !DILocation(line: 43, column: 31, scope: !7)
!42 = !DILocation(line: 43, column: 42, scope: !7)
!43 = !DILocation(line: 44, column: 31, scope: !7)
!44 = !DILocation(line: 44, column: 38, scope: !7)
!45 = !DILocation(line: 45, column: 31, scope: !7)
!46 = !DILocation(line: 45, column: 42, scope: !7)
!47 = !DILocation(line: 46, column: 31, scope: !7)
!48 = !DILocation(line: 46, column: 42, scope: !7)
!49 = !DILocation(line: 47, column: 31, scope: !7)
!50 = !DILocation(line: 47, column: 42, scope: !7)
!51 = !DILocation(line: 48, column: 35, scope: !7)
!52 = !DILocation(line: 48, column: 40, scope: !7)
!53 = !DILocation(line: 49, column: 18, scope: !7)
!54 = !DILocation(line: 50, column: 18, scope: !7)
!55 = !DILocation(line: 51, column: 18, scope: !7)
!56 = !DILocation(line: 52, column: 18, scope: !7)
!57 = !DILocation(line: 53, column: 18, scope: !7)
!58 = !DILocation(line: 54, column: 18, scope: !7)
!59 = !DILocation(line: 55, column: 19, scope: !7)
!60 = !DILocation(line: 63, column: 20, scope: !7)
!61 = !DILocation(line: 64, column: 20, scope: !7)
!62 = !DILocation(line: 65, column: 20, scope: !7)
!63 = !DILocation(line: 66, column: 20, scope: !7)
!64 = !DILocation(line: 67, column: 20, scope: !7)
!65 = !DILocation(line: 68, column: 20, scope: !7)
!66 = !DILocation(line: 69, column: 20, scope: !7)
!67 = !DILocation(line: 70, column: 20, scope: !7)
!68 = !DILocation(line: 78, column: 20, scope: !7)
!69 = !DILocation(line: 79, column: 20, scope: !7)
!70 = !DILocation(line: 80, column: 20, scope: !7)
!71 = !DILocation(line: 82, column: 20, scope: !7)
!72 = !DILocation(line: 83, column: 24, scope: !7)
!73 = !DILocation(line: 85, column: 20, scope: !7)
!74 = !DILocation(line: 87, column: 20, scope: !7)
!75 = !DILocation(line: 88, column: 24, scope: !7)
!76 = !DILocation(line: 89, column: 20, scope: !7)
!77 = !DILocation(line: 91, column: 20, scope: !7)
!78 = !DILocation(line: 92, column: 24, scope: !7)
!79 = !DILocation(line: 93, column: 20, scope: !7)
!80 = !DILocation(line: 267, column: 36, scope: !81, inlinedAt: !83)
!81 = distinct !DILexicalBlockFile(scope: !7, file: !82, discriminator: 0)
!82 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!83 = !DILocation(line: 95, column: 26, scope: !7)
!84 = !DILocation(line: 256, column: 15, scope: !85, inlinedAt: !83)
!85 = distinct !DILexicalBlockFile(scope: !81, file: !82, discriminator: 0)
!86 = !DILocation(line: 96, column: 25, scope: !7)
!87 = !DILocation(line: 96, column: 72, scope: !7)
!88 = !DILocation(line: 97, column: 25, scope: !7)
!89 = !DILocation(line: 97, column: 72, scope: !7)
!90 = !DILocation(line: 98, column: 68, scope: !7)
!91 = !DILocation(line: 98, column: 4, scope: !7)
