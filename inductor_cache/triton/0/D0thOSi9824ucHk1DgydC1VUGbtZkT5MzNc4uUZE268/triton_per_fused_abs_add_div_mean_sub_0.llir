; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_per_fused_abs_add_div_mean_sub_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %6 = and i32 %5, 15, !dbg !10
  %7 = zext nneg i32 %6 to i64, !dbg !11
  %8 = getelementptr float, ptr addrspace(1) %1, i64 %7, !dbg !11
  %9 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %8, i1 true) #3, !dbg !12
  %10 = bitcast i32 %9 to float, !dbg !12
  %11 = getelementptr float, ptr addrspace(1) %2, i64 %7, !dbg !13
  %12 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %11, i1 true) #3, !dbg !14
  %13 = bitcast i32 %12 to float, !dbg !14
  %14 = or disjoint i32 %6, 16, !dbg !15
  %15 = zext nneg i32 %14 to i64, !dbg !16
  %16 = getelementptr float, ptr addrspace(1) %1, i64 %15, !dbg !16
  %17 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %16, i1 true) #3, !dbg !17
  %18 = bitcast i32 %17 to float, !dbg !17
  %19 = getelementptr float, ptr addrspace(1) %2, i64 %15, !dbg !18
  %20 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %19, i1 true) #3, !dbg !19
  %21 = bitcast i32 %20 to float, !dbg !19
  %22 = or disjoint i32 %6, 32, !dbg !20
  %23 = zext nneg i32 %22 to i64, !dbg !21
  %24 = getelementptr float, ptr addrspace(1) %1, i64 %23, !dbg !21
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 true) #3, !dbg !22
  %26 = bitcast i32 %25 to float, !dbg !22
  %27 = getelementptr float, ptr addrspace(1) %2, i64 %23, !dbg !23
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 true) #3, !dbg !24
  %29 = bitcast i32 %28 to float, !dbg !24
  %30 = or disjoint i32 %6, 64, !dbg !25
  %31 = zext nneg i32 %30 to i64, !dbg !26
  %32 = getelementptr float, ptr addrspace(1) %1, i64 %31, !dbg !26
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 true) #3, !dbg !27
  %34 = bitcast i32 %33 to float, !dbg !27
  %35 = getelementptr float, ptr addrspace(1) %2, i64 %31, !dbg !28
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 true) #3, !dbg !29
  %37 = bitcast i32 %36 to float, !dbg !29
  %38 = or disjoint i32 %6, 80, !dbg !30
  %39 = zext nneg i32 %38 to i64, !dbg !31
  %40 = getelementptr float, ptr addrspace(1) %1, i64 %39, !dbg !31
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %40, i1 true) #3, !dbg !32
  %42 = bitcast i32 %41 to float, !dbg !32
  %43 = getelementptr float, ptr addrspace(1) %2, i64 %39, !dbg !33
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 true) #3, !dbg !34
  %45 = bitcast i32 %44 to float, !dbg !34
  %46 = or disjoint i32 %6, 96, !dbg !35
  %47 = zext nneg i32 %46 to i64, !dbg !36
  %48 = getelementptr float, ptr addrspace(1) %1, i64 %47, !dbg !36
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 true) #3, !dbg !37
  %50 = bitcast i32 %49 to float, !dbg !37
  %51 = getelementptr float, ptr addrspace(1) %2, i64 %47, !dbg !38
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 true) #3, !dbg !39
  %53 = bitcast i32 %52 to float, !dbg !39
  %54 = or disjoint i32 %6, 128, !dbg !40
  %55 = zext nneg i32 %54 to i64, !dbg !41
  %56 = getelementptr float, ptr addrspace(1) %1, i64 %55, !dbg !41
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 true) #3, !dbg !42
  %58 = bitcast i32 %57 to float, !dbg !42
  %59 = getelementptr float, ptr addrspace(1) %2, i64 %55, !dbg !43
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 true) #3, !dbg !44
  %61 = bitcast i32 %60 to float, !dbg !44
  %62 = or disjoint i32 %6, 144, !dbg !45
  %63 = zext nneg i32 %62 to i64, !dbg !46
  %64 = getelementptr float, ptr addrspace(1) %1, i64 %63, !dbg !46
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 true) #3, !dbg !47
  %66 = bitcast i32 %65 to float, !dbg !47
  %67 = getelementptr float, ptr addrspace(1) %2, i64 %63, !dbg !48
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 true) #3, !dbg !49
  %69 = bitcast i32 %68 to float, !dbg !49
  %70 = or disjoint i32 %6, 160, !dbg !50
  %71 = zext nneg i32 %70 to i64, !dbg !51
  %72 = getelementptr float, ptr addrspace(1) %1, i64 %71, !dbg !51
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 true) #3, !dbg !52
  %74 = bitcast i32 %73 to float, !dbg !52
  %75 = getelementptr float, ptr addrspace(1) %2, i64 %71, !dbg !53
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %75, i1 true) #3, !dbg !54
  %77 = bitcast i32 %76 to float, !dbg !54
  %78 = or disjoint i32 %6, 192, !dbg !55
  %79 = zext nneg i32 %78 to i64, !dbg !56
  %80 = getelementptr float, ptr addrspace(1) %1, i64 %79, !dbg !56
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %80, i1 true) #3, !dbg !57
  %82 = bitcast i32 %81 to float, !dbg !57
  %83 = getelementptr float, ptr addrspace(1) %2, i64 %79, !dbg !58
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %83, i1 true) #3, !dbg !59
  %85 = bitcast i32 %84 to float, !dbg !59
  %86 = or disjoint i32 %6, 208, !dbg !60
  %87 = zext nneg i32 %86 to i64, !dbg !61
  %88 = getelementptr float, ptr addrspace(1) %1, i64 %87, !dbg !61
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %88, i1 true) #3, !dbg !62
  %90 = bitcast i32 %89 to float, !dbg !62
  %91 = getelementptr float, ptr addrspace(1) %2, i64 %87, !dbg !63
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %91, i1 true) #3, !dbg !64
  %93 = bitcast i32 %92 to float, !dbg !64
  %94 = or disjoint i32 %6, 224, !dbg !65
  %95 = zext nneg i32 %94 to i64, !dbg !66
  %96 = getelementptr float, ptr addrspace(1) %1, i64 %95, !dbg !66
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 true) #3, !dbg !67
  %98 = bitcast i32 %97 to float, !dbg !67
  %99 = getelementptr float, ptr addrspace(1) %2, i64 %95, !dbg !68
  %100 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %99, i1 true) #3, !dbg !69
  %101 = bitcast i32 %100 to float, !dbg !69
  %102 = fsub float %10, %13, !dbg !70
  %103 = tail call float @llvm.fabs.f32(float %102), !dbg !71
  %104 = bitcast float %103 to i32, !dbg !72
  %105 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %104, i32 8, i32 31), !dbg !72
  %106 = bitcast i32 %105 to float, !dbg !72
  %107 = fadd float %103, %106, !dbg !76
  %108 = bitcast float %107 to i32, !dbg !72
  %109 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %108, i32 4, i32 31), !dbg !72
  %110 = bitcast i32 %109 to float, !dbg !72
  %111 = fadd float %107, %110, !dbg !76
  %112 = bitcast float %111 to i32, !dbg !72
  %113 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %112, i32 2, i32 31), !dbg !72
  %114 = bitcast i32 %113 to float, !dbg !72
  %115 = fadd float %111, %114, !dbg !76
  %116 = bitcast float %115 to i32, !dbg !72
  %117 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %116, i32 1, i32 31), !dbg !72
  %118 = bitcast i32 %117 to float, !dbg !72
  %119 = fadd float %115, %118, !dbg !76
  %120 = fsub float %18, %21, !dbg !78
  %121 = tail call float @llvm.fabs.f32(float %120), !dbg !79
  %122 = bitcast float %121 to i32, !dbg !80
  %123 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %122, i32 8, i32 31), !dbg !80
  %124 = bitcast i32 %123 to float, !dbg !80
  %125 = fadd float %121, %124, !dbg !82
  %126 = bitcast float %125 to i32, !dbg !80
  %127 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %126, i32 4, i32 31), !dbg !80
  %128 = bitcast i32 %127 to float, !dbg !80
  %129 = fadd float %125, %128, !dbg !82
  %130 = bitcast float %129 to i32, !dbg !80
  %131 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %130, i32 2, i32 31), !dbg !80
  %132 = bitcast i32 %131 to float, !dbg !80
  %133 = fadd float %129, %132, !dbg !82
  %134 = bitcast float %133 to i32, !dbg !80
  %135 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %134, i32 1, i32 31), !dbg !80
  %136 = bitcast i32 %135 to float, !dbg !80
  %137 = fadd float %133, %136, !dbg !82
  %138 = fsub float %26, %29, !dbg !83
  %139 = tail call float @llvm.fabs.f32(float %138), !dbg !84
  %140 = bitcast float %139 to i32, !dbg !85
  %141 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %140, i32 8, i32 31), !dbg !85
  %142 = bitcast i32 %141 to float, !dbg !85
  %143 = fadd float %139, %142, !dbg !87
  %144 = bitcast float %143 to i32, !dbg !85
  %145 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %144, i32 4, i32 31), !dbg !85
  %146 = bitcast i32 %145 to float, !dbg !85
  %147 = fadd float %143, %146, !dbg !87
  %148 = bitcast float %147 to i32, !dbg !85
  %149 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %148, i32 2, i32 31), !dbg !85
  %150 = bitcast i32 %149 to float, !dbg !85
  %151 = fadd float %147, %150, !dbg !87
  %152 = bitcast float %151 to i32, !dbg !85
  %153 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %152, i32 1, i32 31), !dbg !85
  %154 = bitcast i32 %153 to float, !dbg !85
  %155 = fadd float %151, %154, !dbg !87
  %156 = fsub float %34, %37, !dbg !88
  %157 = tail call float @llvm.fabs.f32(float %156), !dbg !89
  %158 = bitcast float %157 to i32, !dbg !90
  %159 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %158, i32 8, i32 31), !dbg !90
  %160 = bitcast i32 %159 to float, !dbg !90
  %161 = fadd float %157, %160, !dbg !92
  %162 = bitcast float %161 to i32, !dbg !90
  %163 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %162, i32 4, i32 31), !dbg !90
  %164 = bitcast i32 %163 to float, !dbg !90
  %165 = fadd float %161, %164, !dbg !92
  %166 = bitcast float %165 to i32, !dbg !90
  %167 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %166, i32 2, i32 31), !dbg !90
  %168 = bitcast i32 %167 to float, !dbg !90
  %169 = fadd float %165, %168, !dbg !92
  %170 = bitcast float %169 to i32, !dbg !90
  %171 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %170, i32 1, i32 31), !dbg !90
  %172 = bitcast i32 %171 to float, !dbg !90
  %173 = fadd float %169, %172, !dbg !92
  %174 = fsub float %42, %45, !dbg !93
  %175 = tail call float @llvm.fabs.f32(float %174), !dbg !94
  %176 = bitcast float %175 to i32, !dbg !95
  %177 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %176, i32 8, i32 31), !dbg !95
  %178 = bitcast i32 %177 to float, !dbg !95
  %179 = fadd float %175, %178, !dbg !97
  %180 = bitcast float %179 to i32, !dbg !95
  %181 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %180, i32 4, i32 31), !dbg !95
  %182 = bitcast i32 %181 to float, !dbg !95
  %183 = fadd float %179, %182, !dbg !97
  %184 = bitcast float %183 to i32, !dbg !95
  %185 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %184, i32 2, i32 31), !dbg !95
  %186 = bitcast i32 %185 to float, !dbg !95
  %187 = fadd float %183, %186, !dbg !97
  %188 = bitcast float %187 to i32, !dbg !95
  %189 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %188, i32 1, i32 31), !dbg !95
  %190 = bitcast i32 %189 to float, !dbg !95
  %191 = fadd float %187, %190, !dbg !97
  %192 = fsub float %50, %53, !dbg !98
  %193 = tail call float @llvm.fabs.f32(float %192), !dbg !99
  %194 = bitcast float %193 to i32, !dbg !100
  %195 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %194, i32 8, i32 31), !dbg !100
  %196 = bitcast i32 %195 to float, !dbg !100
  %197 = fadd float %193, %196, !dbg !102
  %198 = bitcast float %197 to i32, !dbg !100
  %199 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %198, i32 4, i32 31), !dbg !100
  %200 = bitcast i32 %199 to float, !dbg !100
  %201 = fadd float %197, %200, !dbg !102
  %202 = bitcast float %201 to i32, !dbg !100
  %203 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %202, i32 2, i32 31), !dbg !100
  %204 = bitcast i32 %203 to float, !dbg !100
  %205 = fadd float %201, %204, !dbg !102
  %206 = bitcast float %205 to i32, !dbg !100
  %207 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %206, i32 1, i32 31), !dbg !100
  %208 = bitcast i32 %207 to float, !dbg !100
  %209 = fadd float %205, %208, !dbg !102
  %210 = fsub float %58, %61, !dbg !103
  %211 = tail call float @llvm.fabs.f32(float %210), !dbg !104
  %212 = bitcast float %211 to i32, !dbg !105
  %213 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %212, i32 8, i32 31), !dbg !105
  %214 = bitcast i32 %213 to float, !dbg !105
  %215 = fadd float %211, %214, !dbg !107
  %216 = bitcast float %215 to i32, !dbg !105
  %217 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %216, i32 4, i32 31), !dbg !105
  %218 = bitcast i32 %217 to float, !dbg !105
  %219 = fadd float %215, %218, !dbg !107
  %220 = bitcast float %219 to i32, !dbg !105
  %221 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %220, i32 2, i32 31), !dbg !105
  %222 = bitcast i32 %221 to float, !dbg !105
  %223 = fadd float %219, %222, !dbg !107
  %224 = bitcast float %223 to i32, !dbg !105
  %225 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %224, i32 1, i32 31), !dbg !105
  %226 = bitcast i32 %225 to float, !dbg !105
  %227 = fadd float %223, %226, !dbg !107
  %228 = fsub float %66, %69, !dbg !108
  %229 = tail call float @llvm.fabs.f32(float %228), !dbg !109
  %230 = bitcast float %229 to i32, !dbg !110
  %231 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %230, i32 8, i32 31), !dbg !110
  %232 = bitcast i32 %231 to float, !dbg !110
  %233 = fadd float %229, %232, !dbg !112
  %234 = bitcast float %233 to i32, !dbg !110
  %235 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %234, i32 4, i32 31), !dbg !110
  %236 = bitcast i32 %235 to float, !dbg !110
  %237 = fadd float %233, %236, !dbg !112
  %238 = bitcast float %237 to i32, !dbg !110
  %239 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %238, i32 2, i32 31), !dbg !110
  %240 = bitcast i32 %239 to float, !dbg !110
  %241 = fadd float %237, %240, !dbg !112
  %242 = bitcast float %241 to i32, !dbg !110
  %243 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %242, i32 1, i32 31), !dbg !110
  %244 = bitcast i32 %243 to float, !dbg !110
  %245 = fadd float %241, %244, !dbg !112
  %246 = fsub float %74, %77, !dbg !113
  %247 = tail call float @llvm.fabs.f32(float %246), !dbg !114
  %248 = bitcast float %247 to i32, !dbg !115
  %249 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %248, i32 8, i32 31), !dbg !115
  %250 = bitcast i32 %249 to float, !dbg !115
  %251 = fadd float %247, %250, !dbg !117
  %252 = bitcast float %251 to i32, !dbg !115
  %253 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %252, i32 4, i32 31), !dbg !115
  %254 = bitcast i32 %253 to float, !dbg !115
  %255 = fadd float %251, %254, !dbg !117
  %256 = bitcast float %255 to i32, !dbg !115
  %257 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %256, i32 2, i32 31), !dbg !115
  %258 = bitcast i32 %257 to float, !dbg !115
  %259 = fadd float %255, %258, !dbg !117
  %260 = bitcast float %259 to i32, !dbg !115
  %261 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %260, i32 1, i32 31), !dbg !115
  %262 = bitcast i32 %261 to float, !dbg !115
  %263 = fadd float %259, %262, !dbg !117
  %264 = fsub float %82, %85, !dbg !118
  %265 = tail call float @llvm.fabs.f32(float %264), !dbg !119
  %266 = bitcast float %265 to i32, !dbg !120
  %267 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %266, i32 8, i32 31), !dbg !120
  %268 = bitcast i32 %267 to float, !dbg !120
  %269 = fadd float %265, %268, !dbg !122
  %270 = bitcast float %269 to i32, !dbg !120
  %271 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %270, i32 4, i32 31), !dbg !120
  %272 = bitcast i32 %271 to float, !dbg !120
  %273 = fadd float %269, %272, !dbg !122
  %274 = bitcast float %273 to i32, !dbg !120
  %275 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %274, i32 2, i32 31), !dbg !120
  %276 = bitcast i32 %275 to float, !dbg !120
  %277 = fadd float %273, %276, !dbg !122
  %278 = bitcast float %277 to i32, !dbg !120
  %279 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %278, i32 1, i32 31), !dbg !120
  %280 = bitcast i32 %279 to float, !dbg !120
  %281 = fadd float %277, %280, !dbg !122
  %282 = fsub float %90, %93, !dbg !123
  %283 = tail call float @llvm.fabs.f32(float %282), !dbg !124
  %284 = bitcast float %283 to i32, !dbg !125
  %285 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %284, i32 8, i32 31), !dbg !125
  %286 = bitcast i32 %285 to float, !dbg !125
  %287 = fadd float %283, %286, !dbg !127
  %288 = bitcast float %287 to i32, !dbg !125
  %289 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %288, i32 4, i32 31), !dbg !125
  %290 = bitcast i32 %289 to float, !dbg !125
  %291 = fadd float %287, %290, !dbg !127
  %292 = bitcast float %291 to i32, !dbg !125
  %293 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %292, i32 2, i32 31), !dbg !125
  %294 = bitcast i32 %293 to float, !dbg !125
  %295 = fadd float %291, %294, !dbg !127
  %296 = bitcast float %295 to i32, !dbg !125
  %297 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %296, i32 1, i32 31), !dbg !125
  %298 = bitcast i32 %297 to float, !dbg !125
  %299 = fadd float %295, %298, !dbg !127
  %300 = fsub float %98, %101, !dbg !128
  %301 = tail call float @llvm.fabs.f32(float %300), !dbg !129
  %302 = bitcast float %301 to i32, !dbg !130
  %303 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %302, i32 8, i32 31), !dbg !130
  %304 = bitcast i32 %303 to float, !dbg !130
  %305 = fadd float %301, %304, !dbg !132
  %306 = bitcast float %305 to i32, !dbg !130
  %307 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %306, i32 4, i32 31), !dbg !130
  %308 = bitcast i32 %307 to float, !dbg !130
  %309 = fadd float %305, %308, !dbg !132
  %310 = bitcast float %309 to i32, !dbg !130
  %311 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %310, i32 2, i32 31), !dbg !130
  %312 = bitcast i32 %311 to float, !dbg !130
  %313 = fadd float %309, %312, !dbg !132
  %314 = bitcast float %313 to i32, !dbg !130
  %315 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %314, i32 1, i32 31), !dbg !130
  %316 = bitcast i32 %315 to float, !dbg !130
  %317 = fadd float %313, %316, !dbg !132
  %318 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %119, float 1.600000e+01) #3, !dbg !133
  %319 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %137, float 1.600000e+01) #3, !dbg !134
  %320 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %155, float 1.600000e+01) #3, !dbg !135
  %321 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %173, float 1.600000e+01) #3, !dbg !136
  %322 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %191, float 1.600000e+01) #3, !dbg !137
  %323 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %209, float 1.600000e+01) #3, !dbg !138
  %324 = insertelement <2 x float> poison, float %318, i64 0, !dbg !139
  %325 = insertelement <2 x float> %324, float %321, i64 1, !dbg !139
  %326 = fadd <2 x float> %325, zeroinitializer, !dbg !139
  %327 = insertelement <2 x float> poison, float %319, i64 0, !dbg !140
  %328 = insertelement <2 x float> %327, float %322, i64 1, !dbg !140
  %329 = fadd <2 x float> %326, %328, !dbg !140
  %330 = insertelement <2 x float> poison, float %320, i64 0, !dbg !141
  %331 = insertelement <2 x float> %330, float %323, i64 1, !dbg !141
  %332 = fadd <2 x float> %329, %331, !dbg !141
  %333 = fmul <2 x float> %332, splat (float 0x3FD5555560000000), !dbg !142
  %334 = extractelement <2 x float> %333, i64 0, !dbg !143
  %335 = fadd float %334, 0.000000e+00, !dbg !143
  %336 = extractelement <2 x float> %333, i64 1, !dbg !144
  %337 = fadd float %335, %336, !dbg !144
  %338 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %227, float 1.600000e+01) #3, !dbg !145
  %339 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %245, float 1.600000e+01) #3, !dbg !146
  %340 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %263, float 1.600000e+01) #3, !dbg !147
  %341 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %281, float 1.600000e+01) #3, !dbg !148
  %342 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %299, float 1.600000e+01) #3, !dbg !149
  %343 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %317, float 1.600000e+01) #3, !dbg !150
  %344 = insertelement <2 x float> poison, float %338, i64 0, !dbg !151
  %345 = insertelement <2 x float> %344, float %341, i64 1, !dbg !151
  %346 = fadd <2 x float> %345, zeroinitializer, !dbg !151
  %347 = insertelement <2 x float> poison, float %339, i64 0, !dbg !152
  %348 = insertelement <2 x float> %347, float %342, i64 1, !dbg !152
  %349 = fadd <2 x float> %346, %348, !dbg !152
  %350 = insertelement <2 x float> poison, float %340, i64 0, !dbg !153
  %351 = insertelement <2 x float> %350, float %343, i64 1, !dbg !153
  %352 = fadd <2 x float> %349, %351, !dbg !153
  %353 = fmul <2 x float> %352, splat (float 0x3FD5555560000000), !dbg !154
  %354 = extractelement <2 x float> %353, i64 0, !dbg !155
  %355 = fadd float %337, %354, !dbg !155
  %356 = extractelement <2 x float> %353, i64 1, !dbg !156
  %357 = fadd float %355, %356, !dbg !156
  tail call void @llvm.nvvm.barrier0(), !dbg !157
  %358 = and i32 %5, 63, !dbg !158
  %359 = icmp eq i32 %358, 0, !dbg !158
  %360 = bitcast float %357 to i32, !dbg !158
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %360, ptr addrspace(1) %0, i1 %359) #3, !dbg !158
  ret void, !dbg !159
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.fabs.f32(float) #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cgvnxskau3hbok6slxxjnfqw4bmyhtdnftk565jgan74bryq3xfz.py", directory: "inductor_cache/gv")
!4 = !{ptr @triton_per_fused_abs_add_div_mean_sub_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_abs_add_div_mean_sub_0, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_abs_add_div_mean_sub_0", linkageName: "triton_per_fused_abs_add_div_mean_sub_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 26, column: 34, scope: !7)
!11 = !DILocation(line: 30, column: 30, scope: !7)
!12 = !DILocation(line: 30, column: 35, scope: !7)
!13 = !DILocation(line: 31, column: 30, scope: !7)
!14 = !DILocation(line: 31, column: 35, scope: !7)
!15 = !DILocation(line: 32, column: 35, scope: !7)
!16 = !DILocation(line: 32, column: 30, scope: !7)
!17 = !DILocation(line: 32, column: 40, scope: !7)
!18 = !DILocation(line: 33, column: 30, scope: !7)
!19 = !DILocation(line: 33, column: 40, scope: !7)
!20 = !DILocation(line: 34, column: 36, scope: !7)
!21 = !DILocation(line: 34, column: 31, scope: !7)
!22 = !DILocation(line: 34, column: 41, scope: !7)
!23 = !DILocation(line: 35, column: 31, scope: !7)
!24 = !DILocation(line: 35, column: 41, scope: !7)
!25 = !DILocation(line: 36, column: 36, scope: !7)
!26 = !DILocation(line: 36, column: 31, scope: !7)
!27 = !DILocation(line: 36, column: 41, scope: !7)
!28 = !DILocation(line: 37, column: 31, scope: !7)
!29 = !DILocation(line: 37, column: 41, scope: !7)
!30 = !DILocation(line: 38, column: 36, scope: !7)
!31 = !DILocation(line: 38, column: 31, scope: !7)
!32 = !DILocation(line: 38, column: 41, scope: !7)
!33 = !DILocation(line: 39, column: 31, scope: !7)
!34 = !DILocation(line: 39, column: 41, scope: !7)
!35 = !DILocation(line: 40, column: 36, scope: !7)
!36 = !DILocation(line: 40, column: 31, scope: !7)
!37 = !DILocation(line: 40, column: 41, scope: !7)
!38 = !DILocation(line: 41, column: 31, scope: !7)
!39 = !DILocation(line: 41, column: 41, scope: !7)
!40 = !DILocation(line: 42, column: 37, scope: !7)
!41 = !DILocation(line: 42, column: 31, scope: !7)
!42 = !DILocation(line: 42, column: 42, scope: !7)
!43 = !DILocation(line: 43, column: 31, scope: !7)
!44 = !DILocation(line: 43, column: 42, scope: !7)
!45 = !DILocation(line: 44, column: 37, scope: !7)
!46 = !DILocation(line: 44, column: 31, scope: !7)
!47 = !DILocation(line: 44, column: 42, scope: !7)
!48 = !DILocation(line: 45, column: 31, scope: !7)
!49 = !DILocation(line: 45, column: 42, scope: !7)
!50 = !DILocation(line: 46, column: 37, scope: !7)
!51 = !DILocation(line: 46, column: 31, scope: !7)
!52 = !DILocation(line: 46, column: 42, scope: !7)
!53 = !DILocation(line: 47, column: 31, scope: !7)
!54 = !DILocation(line: 47, column: 42, scope: !7)
!55 = !DILocation(line: 48, column: 37, scope: !7)
!56 = !DILocation(line: 48, column: 31, scope: !7)
!57 = !DILocation(line: 48, column: 42, scope: !7)
!58 = !DILocation(line: 49, column: 31, scope: !7)
!59 = !DILocation(line: 49, column: 42, scope: !7)
!60 = !DILocation(line: 50, column: 37, scope: !7)
!61 = !DILocation(line: 50, column: 31, scope: !7)
!62 = !DILocation(line: 50, column: 42, scope: !7)
!63 = !DILocation(line: 51, column: 31, scope: !7)
!64 = !DILocation(line: 51, column: 42, scope: !7)
!65 = !DILocation(line: 52, column: 37, scope: !7)
!66 = !DILocation(line: 52, column: 31, scope: !7)
!67 = !DILocation(line: 52, column: 42, scope: !7)
!68 = !DILocation(line: 53, column: 31, scope: !7)
!69 = !DILocation(line: 53, column: 42, scope: !7)
!70 = !DILocation(line: 54, column: 18, scope: !7)
!71 = !DILocation(line: 55, column: 23, scope: !7)
!72 = !DILocation(line: 267, column: 36, scope: !73, inlinedAt: !75)
!73 = distinct !DILexicalBlockFile(scope: !7, file: !74, discriminator: 0)
!74 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!75 = !DILocation(line: 57, column: 24, scope: !7)
!76 = !DILocation(line: 256, column: 15, scope: !77, inlinedAt: !75)
!77 = distinct !DILexicalBlockFile(scope: !73, file: !74, discriminator: 0)
!78 = !DILocation(line: 58, column: 18, scope: !7)
!79 = !DILocation(line: 59, column: 24, scope: !7)
!80 = !DILocation(line: 267, column: 36, scope: !73, inlinedAt: !81)
!81 = !DILocation(line: 61, column: 26, scope: !7)
!82 = !DILocation(line: 256, column: 15, scope: !77, inlinedAt: !81)
!83 = !DILocation(line: 62, column: 20, scope: !7)
!84 = !DILocation(line: 63, column: 24, scope: !7)
!85 = !DILocation(line: 267, column: 36, scope: !73, inlinedAt: !86)
!86 = !DILocation(line: 65, column: 26, scope: !7)
!87 = !DILocation(line: 256, column: 15, scope: !77, inlinedAt: !86)
!88 = !DILocation(line: 66, column: 20, scope: !7)
!89 = !DILocation(line: 67, column: 24, scope: !7)
!90 = !DILocation(line: 267, column: 36, scope: !73, inlinedAt: !91)
!91 = !DILocation(line: 69, column: 26, scope: !7)
!92 = !DILocation(line: 256, column: 15, scope: !77, inlinedAt: !91)
!93 = !DILocation(line: 70, column: 20, scope: !7)
!94 = !DILocation(line: 71, column: 24, scope: !7)
!95 = !DILocation(line: 267, column: 36, scope: !73, inlinedAt: !96)
!96 = !DILocation(line: 73, column: 26, scope: !7)
!97 = !DILocation(line: 256, column: 15, scope: !77, inlinedAt: !96)
!98 = !DILocation(line: 74, column: 20, scope: !7)
!99 = !DILocation(line: 75, column: 24, scope: !7)
!100 = !DILocation(line: 267, column: 36, scope: !73, inlinedAt: !101)
!101 = !DILocation(line: 77, column: 26, scope: !7)
!102 = !DILocation(line: 256, column: 15, scope: !77, inlinedAt: !101)
!103 = !DILocation(line: 78, column: 20, scope: !7)
!104 = !DILocation(line: 79, column: 24, scope: !7)
!105 = !DILocation(line: 267, column: 36, scope: !73, inlinedAt: !106)
!106 = !DILocation(line: 81, column: 26, scope: !7)
!107 = !DILocation(line: 256, column: 15, scope: !77, inlinedAt: !106)
!108 = !DILocation(line: 82, column: 20, scope: !7)
!109 = !DILocation(line: 83, column: 24, scope: !7)
!110 = !DILocation(line: 267, column: 36, scope: !73, inlinedAt: !111)
!111 = !DILocation(line: 85, column: 26, scope: !7)
!112 = !DILocation(line: 256, column: 15, scope: !77, inlinedAt: !111)
!113 = !DILocation(line: 86, column: 20, scope: !7)
!114 = !DILocation(line: 87, column: 24, scope: !7)
!115 = !DILocation(line: 267, column: 36, scope: !73, inlinedAt: !116)
!116 = !DILocation(line: 89, column: 26, scope: !7)
!117 = !DILocation(line: 256, column: 15, scope: !77, inlinedAt: !116)
!118 = !DILocation(line: 90, column: 20, scope: !7)
!119 = !DILocation(line: 91, column: 24, scope: !7)
!120 = !DILocation(line: 267, column: 36, scope: !73, inlinedAt: !121)
!121 = !DILocation(line: 93, column: 26, scope: !7)
!122 = !DILocation(line: 256, column: 15, scope: !77, inlinedAt: !121)
!123 = !DILocation(line: 94, column: 20, scope: !7)
!124 = !DILocation(line: 95, column: 24, scope: !7)
!125 = !DILocation(line: 267, column: 36, scope: !73, inlinedAt: !126)
!126 = !DILocation(line: 97, column: 26, scope: !7)
!127 = !DILocation(line: 256, column: 15, scope: !77, inlinedAt: !126)
!128 = !DILocation(line: 98, column: 20, scope: !7)
!129 = !DILocation(line: 99, column: 24, scope: !7)
!130 = !DILocation(line: 267, column: 36, scope: !73, inlinedAt: !131)
!131 = !DILocation(line: 101, column: 26, scope: !7)
!132 = !DILocation(line: 256, column: 15, scope: !77, inlinedAt: !131)
!133 = !DILocation(line: 103, column: 19, scope: !7)
!134 = !DILocation(line: 106, column: 20, scope: !7)
!135 = !DILocation(line: 108, column: 20, scope: !7)
!136 = !DILocation(line: 113, column: 20, scope: !7)
!137 = !DILocation(line: 115, column: 20, scope: !7)
!138 = !DILocation(line: 117, column: 20, scope: !7)
!139 = !DILocation(line: 105, column: 20, scope: !7)
!140 = !DILocation(line: 107, column: 20, scope: !7)
!141 = !DILocation(line: 109, column: 20, scope: !7)
!142 = !DILocation(line: 111, column: 20, scope: !7)
!143 = !DILocation(line: 112, column: 20, scope: !7)
!144 = !DILocation(line: 120, column: 21, scope: !7)
!145 = !DILocation(line: 121, column: 21, scope: !7)
!146 = !DILocation(line: 123, column: 21, scope: !7)
!147 = !DILocation(line: 125, column: 21, scope: !7)
!148 = !DILocation(line: 129, column: 21, scope: !7)
!149 = !DILocation(line: 131, column: 21, scope: !7)
!150 = !DILocation(line: 133, column: 21, scope: !7)
!151 = !DILocation(line: 122, column: 22, scope: !7)
!152 = !DILocation(line: 124, column: 22, scope: !7)
!153 = !DILocation(line: 126, column: 22, scope: !7)
!154 = !DILocation(line: 127, column: 22, scope: !7)
!155 = !DILocation(line: 128, column: 22, scope: !7)
!156 = !DILocation(line: 136, column: 22, scope: !7)
!157 = !DILocation(line: 137, column: 4, scope: !7)
!158 = !DILocation(line: 138, column: 72, scope: !7)
!159 = !DILocation(line: 138, column: 4, scope: !7)
