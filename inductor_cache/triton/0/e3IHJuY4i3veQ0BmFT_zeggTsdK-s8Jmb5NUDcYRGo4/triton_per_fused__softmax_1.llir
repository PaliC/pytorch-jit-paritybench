; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_per_fused__softmax_1(ptr addrspace(1) %0, i32 %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %5 = shl i32 %4, 3, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = lshr i32 %6, 3, !dbg !12
  %8 = and i32 %7, 7, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = icmp slt i32 %9, 64, !dbg !14
  %11 = shl i32 %6, 1, !dbg !15
  %12 = and i32 %11, 14, !dbg !15
  %13 = shl i32 %9, 4, !dbg !16
  %14 = or disjoint i32 %13, %12, !dbg !17
  %15 = sext i32 %14 to i64, !dbg !18
  %16 = getelementptr float, ptr addrspace(1) %0, i64 %15, !dbg !18
  %17 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %16, i1 %10, i32 0, i1 %10, i32 0, i1 %10) #2, !dbg !19
  %18 = extractvalue { i32, i32 } %17, 0, !dbg !19
  %19 = extractvalue { i32, i32 } %17, 1, !dbg !19
  %20 = bitcast i32 %18 to float, !dbg !19
  %21 = bitcast i32 %19 to float, !dbg !19
  %22 = select i1 %10, float %20, float 0xFFF0000000000000, !dbg !20
  %23 = select i1 %10, float %21, float 0xFFF0000000000000, !dbg !20
  %24 = fcmp ogt float %22, %23, !dbg !21
  %25 = fcmp uno float %22, 0.000000e+00, !dbg !26
  %26 = or i1 %24, %25, !dbg !27
  %27 = select i1 %26, float %22, float %23, !dbg !28
  %28 = bitcast float %27 to i32, !dbg !29
  %29 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %28, i32 4, i32 31), !dbg !29
  %30 = bitcast i32 %29 to float, !dbg !29
  %31 = fcmp ogt float %27, %30, !dbg !21
  %32 = fcmp uno float %27, 0.000000e+00, !dbg !26
  %33 = or i1 %31, %32, !dbg !27
  %34 = select i1 %33, float %27, float %30, !dbg !28
  %35 = bitcast float %34 to i32, !dbg !29
  %36 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %35, i32 2, i32 31), !dbg !29
  %37 = bitcast i32 %36 to float, !dbg !29
  %38 = fcmp ogt float %34, %37, !dbg !21
  %39 = fcmp uno float %34, 0.000000e+00, !dbg !26
  %40 = or i1 %38, %39, !dbg !27
  %41 = select i1 %40, float %34, float %37, !dbg !28
  %42 = bitcast float %41 to i32, !dbg !29
  %43 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %42, i32 1, i32 31), !dbg !29
  %44 = bitcast i32 %43 to float, !dbg !29
  %45 = fcmp ogt float %41, %44, !dbg !21
  %46 = fcmp uno float %41, 0.000000e+00, !dbg !26
  %47 = or i1 %45, %46, !dbg !27
  %48 = select i1 %47, float %41, float %44, !dbg !28
  %49 = fsub float %20, %48, !dbg !30
  %50 = fsub float %21, %48, !dbg !30
  %51 = fmul float %49, 0x3FE6A09E60000000, !dbg !31
  %52 = fmul float %50, 0x3FE6A09E60000000, !dbg !31
  %53 = fmul float %51, 0x3FF7154760000000, !dbg !32
  %54 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %53) #2, !dbg !32
  %55 = fmul float %52, 0x3FF7154760000000, !dbg !32
  %56 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %55) #2, !dbg !32
  %57 = fadd float %54, %56, !dbg !33
  %58 = select i1 %10, float %57, float 0.000000e+00, !dbg !33
  %59 = bitcast float %58 to i32, !dbg !38
  %60 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %59, i32 4, i32 31), !dbg !38
  %61 = bitcast i32 %60 to float, !dbg !38
  %62 = fadd float %58, %61, !dbg !33
  %63 = bitcast float %62 to i32, !dbg !38
  %64 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %63, i32 2, i32 31), !dbg !38
  %65 = bitcast i32 %64 to float, !dbg !38
  %66 = fadd float %62, %65, !dbg !33
  %67 = bitcast float %66 to i32, !dbg !38
  %68 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %67, i32 1, i32 31), !dbg !38
  %69 = bitcast i32 %68 to float, !dbg !38
  %70 = fadd float %66, %69, !dbg !33
  %71 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %54, float %70) #2, !dbg !39
  %72 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %56, float %70) #2, !dbg !39
  %73 = bitcast float %71 to i32, !dbg !40
  %74 = bitcast float %72 to i32, !dbg !40
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %73, i32 %74, ptr addrspace(1) %16, i1 %10) #2, !dbg !40
  ret void, !dbg !41
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cujd54464orfiqj52ga3wwbv7lxm5of4imwkyjdrzwcjosgmotdy.py", directory: "inductor_cache/uj")
!4 = !{ptr @triton_per_fused__softmax_1, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__softmax_1, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__softmax_1", linkageName: "triton_per_fused__softmax_1", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 31, column: 42, scope: !7)
!17 = !DILocation(line: 31, column: 39, scope: !7)
!18 = !DILocation(line: 31, column: 34, scope: !7)
!19 = !DILocation(line: 31, column: 47, scope: !7)
!20 = !DILocation(line: 35, column: 33, scope: !7)
!21 = !DILocation(line: 118, column: 15, scope: !22, inlinedAt: !25)
!22 = distinct !DILexicalBlockFile(scope: !24, file: !23, discriminator: 0)
!23 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!24 = distinct !DILexicalBlockFile(scope: !7, file: !23, discriminator: 0)
!25 = !DILocation(line: 36, column: 37, scope: !7)
!26 = !DILocation(line: 120, column: 21, scope: !22, inlinedAt: !25)
!27 = !DILocation(line: 120, column: 16, scope: !22, inlinedAt: !25)
!28 = !DILocation(line: 121, column: 29, scope: !22, inlinedAt: !25)
!29 = !DILocation(line: 131, column: 29, scope: !24, inlinedAt: !25)
!30 = !DILocation(line: 37, column: 18, scope: !7)
!31 = !DILocation(line: 39, column: 18, scope: !7)
!32 = !DILocation(line: 40, column: 24, scope: !7)
!33 = !DILocation(line: 256, column: 15, scope: !34, inlinedAt: !37)
!34 = distinct !DILexicalBlockFile(scope: !36, file: !35, discriminator: 0)
!35 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!36 = distinct !DILexicalBlockFile(scope: !7, file: !35, discriminator: 0)
!37 = !DILocation(line: 43, column: 26, scope: !7)
!38 = !DILocation(line: 267, column: 36, scope: !36, inlinedAt: !37)
!39 = !DILocation(line: 44, column: 20, scope: !7)
!40 = !DILocation(line: 45, column: 48, scope: !7)
!41 = !DILocation(line: 45, column: 4, scope: !7)
