; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_per_fused__weight_norm_interface_17(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %7 = and i32 %6, 31, !dbg !10
  %8 = lshr i32 %6, 5, !dbg !10
  %9 = shl i32 %6, 1, !dbg !10
  %10 = and i32 %9, 126, !dbg !10
  %11 = zext nneg i32 %10 to i64, !dbg !11
  %12 = getelementptr float, ptr addrspace(1) %1, i64 %11, !dbg !11
  %13 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %12, i1 true) #5, !dbg !12
  %14 = extractvalue { i32, i32 } %13, 0, !dbg !12
  %15 = extractvalue { i32, i32 } %13, 1, !dbg !12
  %16 = bitcast i32 %14 to float, !dbg !12
  %17 = bitcast i32 %15 to float, !dbg !12
  %18 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %2, i1 true) #5, !dbg !13
  %19 = fmul float %16, %16, !dbg !14
  %20 = fmul float %17, %17, !dbg !14
  %21 = fadd float %19, %20, !dbg !15
  %22 = bitcast float %21 to i32, !dbg !20
  %23 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %22, i32 16, i32 31), !dbg !20
  %24 = bitcast i32 %23 to float, !dbg !20
  %25 = fadd float %21, %24, !dbg !15
  %26 = bitcast float %25 to i32, !dbg !20
  %27 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %26, i32 8, i32 31), !dbg !20
  %28 = bitcast i32 %27 to float, !dbg !20
  %29 = fadd float %25, %28, !dbg !15
  %30 = bitcast float %29 to i32, !dbg !20
  %31 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %30, i32 4, i32 31), !dbg !20
  %32 = bitcast i32 %31 to float, !dbg !20
  %33 = fadd float %29, %32, !dbg !15
  %34 = bitcast float %33 to i32, !dbg !20
  %35 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %34, i32 2, i32 31), !dbg !20
  %36 = bitcast i32 %35 to float, !dbg !20
  %37 = fadd float %33, %36, !dbg !15
  %38 = bitcast float %37 to i32, !dbg !20
  %39 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %38, i32 1, i32 31), !dbg !20
  %40 = bitcast i32 %39 to float, !dbg !20
  %41 = fadd float %37, %40, !dbg !15
  %42 = icmp eq i32 %7, 0, !dbg !20
  %43 = and i32 %8, 1, !dbg !20
  %44 = zext nneg i32 %43 to i64, !dbg !20
  %45 = getelementptr float, ptr addrspace(3) @global_smem, i64 %44, !dbg !20
  %46 = bitcast float %41 to <1 x i32>, !dbg !20
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %45, <1 x i32> %46, i1 %42) #5, !dbg !20
  tail call void @llvm.nvvm.barrier0(), !dbg !20
  %47 = icmp slt i32 %6, 2, !dbg !20
  %48 = sext i32 %6 to i64, !dbg !20
  %49 = getelementptr float, ptr addrspace(3) @global_smem, i64 %48, !dbg !20
  %50 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %49, i1 %47) #5, !dbg !20
  %51 = bitcast i32 %50 to float, !dbg !20
  %52 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %50, i32 1, i32 31), !dbg !20
  %53 = bitcast i32 %52 to float, !dbg !20
  %54 = fadd float %51, %53, !dbg !15
  %55 = and i32 %6, 1, !dbg !20
  %56 = icmp eq i32 %55, 0, !dbg !20
  %57 = and i1 %47, %56, !dbg !20
  %58 = bitcast float %54 to <1 x i32>, !dbg !20
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %49, <1 x i32> %58, i1 %57) #5, !dbg !20
  tail call void @llvm.nvvm.barrier0(), !dbg !20
  %59 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !20
  %60 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !21
  %.not.i = icmp eq i32 %60, 0, !dbg !21
  %61 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !21
  %.not1.i = icmp eq i32 %61, 0, !dbg !21
  br i1 %.not.i, label %67, label %62, !dbg !21

62:                                               ; preds = %5
  br i1 %.not1.i, label %65, label %63, !dbg !21

63:                                               ; preds = %62
  %64 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %59) #5, !dbg !21
  br label %__nv_sqrtf.exit, !dbg !21

65:                                               ; preds = %62
  %66 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %59) #5, !dbg !21
  br label %__nv_sqrtf.exit, !dbg !21

67:                                               ; preds = %5
  br i1 %.not1.i, label %70, label %68, !dbg !21

68:                                               ; preds = %67
  %69 = tail call float @llvm.nvvm.sqrt.rn.f(float %59) #5, !dbg !21
  br label %__nv_sqrtf.exit, !dbg !21

70:                                               ; preds = %67
  %71 = tail call float @llvm.nvvm.sqrt.approx.f(float %59) #5, !dbg !21
  br label %__nv_sqrtf.exit, !dbg !21

__nv_sqrtf.exit:                                  ; preds = %63, %65, %68, %70
  %.0.i = phi float [ %64, %63 ], [ %66, %65 ], [ %69, %68 ], [ %71, %70 ], !dbg !21
  %72 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !21
  %73 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !21
  %74 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #5, !dbg !21
  %.not.i6 = icmp eq i32 %74, 0, !dbg !21
  %75 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #5, !dbg !21
  %.not1.i9 = icmp eq i32 %75, 0, !dbg !21
  br i1 %.not.i6, label %81, label %76, !dbg !21

76:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i9, label %79, label %77, !dbg !21

77:                                               ; preds = %76
  %78 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %59) #5, !dbg !21
  br label %__nv_sqrtf.exit10, !dbg !21

79:                                               ; preds = %76
  %80 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %59) #5, !dbg !21
  br label %__nv_sqrtf.exit10, !dbg !21

81:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i9, label %84, label %82, !dbg !21

82:                                               ; preds = %81
  %83 = tail call float @llvm.nvvm.sqrt.rn.f(float %59) #5, !dbg !21
  br label %__nv_sqrtf.exit10, !dbg !21

84:                                               ; preds = %81
  %85 = tail call float @llvm.nvvm.sqrt.approx.f(float %59) #5, !dbg !21
  br label %__nv_sqrtf.exit10, !dbg !21

__nv_sqrtf.exit10:                                ; preds = %77, %79, %82, %84
  %.0.i8 = phi float [ %78, %77 ], [ %80, %79 ], [ %83, %82 ], [ %85, %84 ], !dbg !21
  %86 = bitcast i32 %18 to float, !dbg !13
  %87 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %86, float %.0.i8) #5, !dbg !22
  %88 = fmul float %87, %16, !dbg !23
  %89 = fmul float %87, %17, !dbg !23
  tail call void @llvm.nvvm.barrier0(), !dbg !24
  %urem = and i32 %6, 63, !dbg !25
  %90 = icmp eq i32 %urem, 0, !dbg !25
  %91 = bitcast float %.0.i to i32, !dbg !25
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %91, ptr addrspace(1) %0, i1 %90) #5, !dbg !25
  %92 = getelementptr float, ptr addrspace(1) %3, i64 %11, !dbg !26
  %93 = bitcast float %88 to i32, !dbg !27
  %94 = bitcast float %89 to i32, !dbg !27
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %93, i32 %94, ptr addrspace(1) %92, i1 true) #5, !dbg !27
  ret void, !dbg !28
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #4

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #4

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #5 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c5bpuw5k2iv6xaylcnbp6b473ij5gcqz2fp2wca2g2hasrbwwx6n.py", directory: "inductor_cache/5b")
!4 = !{ptr @triton_per_fused__weight_norm_interface_17, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused__weight_norm_interface_17, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused__weight_norm_interface_17", linkageName: "triton_per_fused__weight_norm_interface_17", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 26, column: 34, scope: !7)
!11 = !DILocation(line: 30, column: 30, scope: !7)
!12 = !DILocation(line: 30, column: 35, scope: !7)
!13 = !DILocation(line: 31, column: 19, scope: !7)
!14 = !DILocation(line: 33, column: 18, scope: !7)
!15 = !DILocation(line: 256, column: 15, scope: !16, inlinedAt: !19)
!16 = distinct !DILexicalBlockFile(scope: !18, file: !17, discriminator: 0)
!17 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!18 = distinct !DILexicalBlockFile(scope: !7, file: !17, discriminator: 0)
!19 = !DILocation(line: 35, column: 24, scope: !7)
!20 = !DILocation(line: 267, column: 36, scope: !18, inlinedAt: !19)
!21 = !DILocation(line: 36, column: 26, scope: !7)
!22 = !DILocation(line: 37, column: 18, scope: !7)
!23 = !DILocation(line: 38, column: 18, scope: !7)
!24 = !DILocation(line: 39, column: 4, scope: !7)
!25 = !DILocation(line: 40, column: 70, scope: !7)
!26 = !DILocation(line: 41, column: 25, scope: !7)
!27 = !DILocation(line: 41, column: 71, scope: !7)
!28 = !DILocation(line: 41, column: 4, scope: !7)
