; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_60(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, i32 %10) local_unnamed_addr !dbg !7 {
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %13 = shl i32 %12, 10, !dbg !11
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %15 = shl i32 %14, 2, !dbg !12
  %16 = and i32 %15, 508, !dbg !12
  %17 = or disjoint i32 %13, %16, !dbg !13
  %18 = or disjoint i32 %17, 512, !dbg !13
  %19 = icmp slt i32 %17, 190464, !dbg !14
  %20 = icmp slt i32 %18, 190464, !dbg !14
  %21 = srem i32 %17, 256, !dbg !15
  %.frozen = freeze i32 %17, !dbg !16
  %22 = sdiv i32 %.frozen, 47616, !dbg !16
  %.frozen67 = freeze i32 %18, !dbg !16
  %23 = sdiv i32 %.frozen67, 47616, !dbg !16
  %24 = mul i32 %22, 47616, !dbg !17
  %srem.decomposed = sub i32 %.frozen, %24, !dbg !17
  %25 = mul i32 %23, 47616, !dbg !17
  %srem1.decomposed = sub i32 %.frozen67, %25, !dbg !17
  %26 = mul nsw i32 %22, 38400, !dbg !18
  %27 = mul nsw i32 %23, 38400, !dbg !18
  %28 = add nsw i32 %26, %srem.decomposed, !dbg !19
  %29 = add nsw i32 %27, %srem1.decomposed, !dbg !19
  %30 = sext i32 %28 to i64, !dbg !20
  %31 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !20
  %32 = sext i32 %29 to i64, !dbg !20
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !20
  %34 = mul nsw i32 %22, 3072, !dbg !21
  %35 = mul nsw i32 %23, 3072, !dbg !21
  %36 = add nsw i32 %34, %21, !dbg !22
  %37 = add nsw i32 %36, -38400, !dbg !23
  %38 = add nsw i32 %35, %21, !dbg !22
  %39 = add nsw i32 %38, -38400, !dbg !23
  %40 = insertelement <2 x i32> poison, i32 %18, i64 0, !dbg !24
  %41 = insertelement <2 x i32> %40, i32 %17, i64 1, !dbg !24
  %42 = sdiv <2 x i32> %41, splat (i32 256), !dbg !24
  %43 = srem <2 x i32> %42, splat (i32 186), !dbg !25
  %44 = extractelement <2 x i32> %43, i64 1, !dbg !26
  %45 = sext i32 %44 to i64, !dbg !27
  %46 = getelementptr float, ptr addrspace(1) %4, i64 %45, !dbg !27
  %47 = extractelement <2 x i32> %43, i64 0, !dbg !26
  %48 = sext i32 %47 to i64, !dbg !27
  %49 = getelementptr float, ptr addrspace(1) %4, i64 %48, !dbg !27
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 %19) #3, !dbg !28
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 %19) #3, !dbg !28
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 %19) #3, !dbg !28
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %46, i1 %19) #3, !dbg !28
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 %20) #3, !dbg !28
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 %20) #3, !dbg !28
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 %20) #3, !dbg !28
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 %20) #3, !dbg !28
  %58 = getelementptr float, ptr addrspace(1) %5, i64 %45, !dbg !29
  %59 = getelementptr float, ptr addrspace(1) %5, i64 %48, !dbg !29
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %19) #3, !dbg !30
  %61 = bitcast i32 %60 to float, !dbg !30
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %19) #3, !dbg !30
  %63 = bitcast i32 %62 to float, !dbg !30
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %19) #3, !dbg !30
  %65 = bitcast i32 %64 to float, !dbg !30
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %19) #3, !dbg !30
  %67 = bitcast i32 %66 to float, !dbg !30
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 %20) #3, !dbg !30
  %69 = bitcast i32 %68 to float, !dbg !30
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 %20) #3, !dbg !30
  %71 = bitcast i32 %70 to float, !dbg !30
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 %20) #3, !dbg !30
  %73 = bitcast i32 %72 to float, !dbg !30
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 %20) #3, !dbg !30
  %75 = bitcast i32 %74 to float, !dbg !30
  %76 = getelementptr float, ptr addrspace(1) %6, i64 %45, !dbg !31
  %77 = getelementptr float, ptr addrspace(1) %6, i64 %48, !dbg !31
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 %19) #3, !dbg !32
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 %19) #3, !dbg !32
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 %19) #3, !dbg !32
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 %19) #3, !dbg !32
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 %20) #3, !dbg !32
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 %20) #3, !dbg !32
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 %20) #3, !dbg !32
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 %20) #3, !dbg !32
  %86 = getelementptr float, ptr addrspace(1) %7, i64 %45, !dbg !33
  %87 = getelementptr float, ptr addrspace(1) %7, i64 %48, !dbg !33
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 %19) #3, !dbg !34
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 %19) #3, !dbg !34
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 %19) #3, !dbg !34
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %86, i1 %19) #3, !dbg !34
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %87, i1 %20) #3, !dbg !34
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %87, i1 %20) #3, !dbg !34
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %87, i1 %20) #3, !dbg !34
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %87, i1 %20) #3, !dbg !34
  %96 = icmp slt <2 x i32> %43, splat (i32 150), !dbg !35
  %97 = extractelement <2 x i1> %96, i64 1, !dbg !36
  %98 = and i1 %19, %97, !dbg !36
  %99 = extractelement <2 x i1> %96, i64 0, !dbg !36
  %100 = and i1 %20, %99, !dbg !36
  %101 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %31, i1 %98, i32 0, i1 %98, i32 0, i1 %98, i32 0, i1 %98, i32 0, i1 %98) #3, !dbg !37
  %102 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %33, i1 %100, i32 0, i1 %100, i32 0, i1 %100, i32 0, i1 %100, i32 0, i1 %100) #3, !dbg !37
  %103 = add nsw <2 x i32> %43, splat (i32 -150), !dbg !38
  %104 = icmp ult <2 x i32> %103, splat (i32 12), !dbg !38
  %105 = shl nsw i32 %44, 8, !dbg !22
  %106 = shl nsw i32 %47, 8, !dbg !22
  %107 = add nsw i32 %37, %105, !dbg !39
  %108 = add nsw i32 %39, %106, !dbg !39
  %109 = sext i32 %107 to i64, !dbg !40
  %110 = getelementptr float, ptr addrspace(1) %1, i64 %109, !dbg !40
  %111 = sext i32 %108 to i64, !dbg !40
  %112 = getelementptr float, ptr addrspace(1) %1, i64 %111, !dbg !40
  %113 = extractelement <2 x i1> %104, i64 1, !dbg !41
  %114 = and i1 %19, %113, !dbg !41
  %115 = extractelement <2 x i1> %104, i64 0, !dbg !41
  %116 = and i1 %20, %115, !dbg !41
  %117 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %110, i1 %114, i32 0, i1 %114, i32 0, i1 %114, i32 0, i1 %114, i32 0, i1 %114) #3, !dbg !42
  %118 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %112, i1 %116, i32 0, i1 %116, i32 0, i1 %116, i32 0, i1 %116, i32 0, i1 %116) #3, !dbg !42
  %119 = add nsw <2 x i32> %43, splat (i32 -162), !dbg !43
  %120 = icmp ult <2 x i32> %119, splat (i32 12), !dbg !43
  %121 = add nsw i32 %36, -41472, !dbg !44
  %122 = add nsw i32 %121, %105, !dbg !45
  %123 = add nsw i32 %38, -41472, !dbg !44
  %124 = add nsw i32 %123, %106, !dbg !45
  %125 = sext i32 %122 to i64, !dbg !46
  %126 = getelementptr float, ptr addrspace(1) %2, i64 %125, !dbg !46
  %127 = sext i32 %124 to i64, !dbg !46
  %128 = getelementptr float, ptr addrspace(1) %2, i64 %127, !dbg !46
  %129 = extractelement <2 x i1> %120, i64 1, !dbg !47
  %130 = and i1 %19, %129, !dbg !47
  %131 = extractelement <2 x i1> %120, i64 0, !dbg !47
  %132 = and i1 %20, %131, !dbg !47
  %133 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %126, i1 %130, i32 0, i1 %130, i32 0, i1 %130, i32 0, i1 %130, i32 0, i1 %130) #3, !dbg !48
  %134 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %128, i1 %132, i32 0, i1 %132, i32 0, i1 %132, i32 0, i1 %132, i32 0, i1 %132) #3, !dbg !48
  %135 = icmp sgt i32 %44, 173, !dbg !26
  %136 = icmp sgt i32 %47, 173, !dbg !26
  %137 = add nsw i32 %36, -44544, !dbg !49
  %138 = add nsw i32 %137, %105, !dbg !50
  %139 = add nsw i32 %38, -44544, !dbg !49
  %140 = add nsw i32 %139, %106, !dbg !50
  %141 = sext i32 %138 to i64, !dbg !51
  %142 = getelementptr float, ptr addrspace(1) %3, i64 %141, !dbg !51
  %143 = sext i32 %140 to i64, !dbg !51
  %144 = getelementptr float, ptr addrspace(1) %3, i64 %143, !dbg !51
  %145 = and i1 %19, %135, !dbg !52
  %146 = and i1 %20, %136, !dbg !52
  %147 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %142, i1 %145, i32 0, i1 %145, i32 0, i1 %145, i32 0, i1 %145, i32 0, i1 %145) #3, !dbg !53
  %148 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %144, i1 %146, i32 0, i1 %146, i32 0, i1 %146, i32 0, i1 %146, i32 0, i1 %146) #3, !dbg !53
  %149 = fadd float %61, 0x3EE4F8B580000000, !dbg !54
  %150 = fadd float %63, 0x3EE4F8B580000000, !dbg !54
  %151 = fadd float %65, 0x3EE4F8B580000000, !dbg !54
  %152 = fadd float %67, 0x3EE4F8B580000000, !dbg !54
  %153 = fadd float %69, 0x3EE4F8B580000000, !dbg !54
  %154 = fadd float %71, 0x3EE4F8B580000000, !dbg !54
  %155 = fadd float %73, 0x3EE4F8B580000000, !dbg !54
  %156 = fadd float %75, 0x3EE4F8B580000000, !dbg !54
  %157 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !55
  %.not.i = icmp eq i32 %157, 0, !dbg !55
  %158 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !55
  %.not1.i = icmp eq i32 %158, 0, !dbg !55
  br i1 %.not.i, label %164, label %159, !dbg !55

159:                                              ; preds = %11
  br i1 %.not1.i, label %162, label %160, !dbg !55

160:                                              ; preds = %159
  %161 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %149) #3, !dbg !55
  br label %__nv_sqrtf.exit, !dbg !55

162:                                              ; preds = %159
  %163 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %149) #3, !dbg !55
  br label %__nv_sqrtf.exit, !dbg !55

164:                                              ; preds = %11
  br i1 %.not1.i, label %167, label %165, !dbg !55

165:                                              ; preds = %164
  %166 = tail call float @llvm.nvvm.sqrt.rn.f(float %149) #3, !dbg !55
  br label %__nv_sqrtf.exit, !dbg !55

167:                                              ; preds = %164
  %168 = tail call float @llvm.nvvm.sqrt.approx.f(float %149) #3, !dbg !55
  br label %__nv_sqrtf.exit, !dbg !55

__nv_sqrtf.exit:                                  ; preds = %160, %162, %165, %167
  %.0.i = phi float [ %161, %160 ], [ %163, %162 ], [ %166, %165 ], [ %168, %167 ], !dbg !55
  %169 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !55
  %.not.i25 = icmp eq i32 %169, 0, !dbg !55
  %170 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !55
  %.not1.i28 = icmp eq i32 %170, 0, !dbg !55
  br i1 %.not.i25, label %176, label %171, !dbg !55

171:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i28, label %174, label %172, !dbg !55

172:                                              ; preds = %171
  %173 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %150) #3, !dbg !55
  br label %__nv_sqrtf.exit29, !dbg !55

174:                                              ; preds = %171
  %175 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %150) #3, !dbg !55
  br label %__nv_sqrtf.exit29, !dbg !55

176:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i28, label %179, label %177, !dbg !55

177:                                              ; preds = %176
  %178 = tail call float @llvm.nvvm.sqrt.rn.f(float %150) #3, !dbg !55
  br label %__nv_sqrtf.exit29, !dbg !55

179:                                              ; preds = %176
  %180 = tail call float @llvm.nvvm.sqrt.approx.f(float %150) #3, !dbg !55
  br label %__nv_sqrtf.exit29, !dbg !55

__nv_sqrtf.exit29:                                ; preds = %172, %174, %177, %179
  %.0.i27 = phi float [ %173, %172 ], [ %175, %174 ], [ %178, %177 ], [ %180, %179 ], !dbg !55
  %181 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !55
  %.not.i30 = icmp eq i32 %181, 0, !dbg !55
  %182 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !55
  %.not1.i33 = icmp eq i32 %182, 0, !dbg !55
  br i1 %.not.i30, label %188, label %183, !dbg !55

183:                                              ; preds = %__nv_sqrtf.exit29
  br i1 %.not1.i33, label %186, label %184, !dbg !55

184:                                              ; preds = %183
  %185 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %151) #3, !dbg !55
  br label %__nv_sqrtf.exit34, !dbg !55

186:                                              ; preds = %183
  %187 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %151) #3, !dbg !55
  br label %__nv_sqrtf.exit34, !dbg !55

188:                                              ; preds = %__nv_sqrtf.exit29
  br i1 %.not1.i33, label %191, label %189, !dbg !55

189:                                              ; preds = %188
  %190 = tail call float @llvm.nvvm.sqrt.rn.f(float %151) #3, !dbg !55
  br label %__nv_sqrtf.exit34, !dbg !55

191:                                              ; preds = %188
  %192 = tail call float @llvm.nvvm.sqrt.approx.f(float %151) #3, !dbg !55
  br label %__nv_sqrtf.exit34, !dbg !55

__nv_sqrtf.exit34:                                ; preds = %184, %186, %189, %191
  %.0.i32 = phi float [ %185, %184 ], [ %187, %186 ], [ %190, %189 ], [ %192, %191 ], !dbg !55
  %193 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !55
  %.not.i35 = icmp eq i32 %193, 0, !dbg !55
  %194 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !55
  %.not1.i38 = icmp eq i32 %194, 0, !dbg !55
  br i1 %.not.i35, label %200, label %195, !dbg !55

195:                                              ; preds = %__nv_sqrtf.exit34
  br i1 %.not1.i38, label %198, label %196, !dbg !55

196:                                              ; preds = %195
  %197 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %152) #3, !dbg !55
  br label %__nv_sqrtf.exit39, !dbg !55

198:                                              ; preds = %195
  %199 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %152) #3, !dbg !55
  br label %__nv_sqrtf.exit39, !dbg !55

200:                                              ; preds = %__nv_sqrtf.exit34
  br i1 %.not1.i38, label %203, label %201, !dbg !55

201:                                              ; preds = %200
  %202 = tail call float @llvm.nvvm.sqrt.rn.f(float %152) #3, !dbg !55
  br label %__nv_sqrtf.exit39, !dbg !55

203:                                              ; preds = %200
  %204 = tail call float @llvm.nvvm.sqrt.approx.f(float %152) #3, !dbg !55
  br label %__nv_sqrtf.exit39, !dbg !55

__nv_sqrtf.exit39:                                ; preds = %196, %198, %201, %203
  %.0.i37 = phi float [ %197, %196 ], [ %199, %198 ], [ %202, %201 ], [ %204, %203 ], !dbg !55
  %205 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !55
  %.not.i40 = icmp eq i32 %205, 0, !dbg !55
  %206 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !55
  %.not1.i43 = icmp eq i32 %206, 0, !dbg !55
  br i1 %.not.i40, label %212, label %207, !dbg !55

207:                                              ; preds = %__nv_sqrtf.exit39
  br i1 %.not1.i43, label %210, label %208, !dbg !55

208:                                              ; preds = %207
  %209 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %153) #3, !dbg !55
  br label %__nv_sqrtf.exit44, !dbg !55

210:                                              ; preds = %207
  %211 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %153) #3, !dbg !55
  br label %__nv_sqrtf.exit44, !dbg !55

212:                                              ; preds = %__nv_sqrtf.exit39
  br i1 %.not1.i43, label %215, label %213, !dbg !55

213:                                              ; preds = %212
  %214 = tail call float @llvm.nvvm.sqrt.rn.f(float %153) #3, !dbg !55
  br label %__nv_sqrtf.exit44, !dbg !55

215:                                              ; preds = %212
  %216 = tail call float @llvm.nvvm.sqrt.approx.f(float %153) #3, !dbg !55
  br label %__nv_sqrtf.exit44, !dbg !55

__nv_sqrtf.exit44:                                ; preds = %208, %210, %213, %215
  %.0.i42 = phi float [ %209, %208 ], [ %211, %210 ], [ %214, %213 ], [ %216, %215 ], !dbg !55
  %217 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !55
  %.not.i45 = icmp eq i32 %217, 0, !dbg !55
  %218 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !55
  %.not1.i48 = icmp eq i32 %218, 0, !dbg !55
  br i1 %.not.i45, label %224, label %219, !dbg !55

219:                                              ; preds = %__nv_sqrtf.exit44
  br i1 %.not1.i48, label %222, label %220, !dbg !55

220:                                              ; preds = %219
  %221 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %154) #3, !dbg !55
  br label %__nv_sqrtf.exit49, !dbg !55

222:                                              ; preds = %219
  %223 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %154) #3, !dbg !55
  br label %__nv_sqrtf.exit49, !dbg !55

224:                                              ; preds = %__nv_sqrtf.exit44
  br i1 %.not1.i48, label %227, label %225, !dbg !55

225:                                              ; preds = %224
  %226 = tail call float @llvm.nvvm.sqrt.rn.f(float %154) #3, !dbg !55
  br label %__nv_sqrtf.exit49, !dbg !55

227:                                              ; preds = %224
  %228 = tail call float @llvm.nvvm.sqrt.approx.f(float %154) #3, !dbg !55
  br label %__nv_sqrtf.exit49, !dbg !55

__nv_sqrtf.exit49:                                ; preds = %220, %222, %225, %227
  %.0.i47 = phi float [ %221, %220 ], [ %223, %222 ], [ %226, %225 ], [ %228, %227 ], !dbg !55
  %229 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !55
  %.not.i50 = icmp eq i32 %229, 0, !dbg !55
  %230 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !55
  %.not1.i53 = icmp eq i32 %230, 0, !dbg !55
  br i1 %.not.i50, label %236, label %231, !dbg !55

231:                                              ; preds = %__nv_sqrtf.exit49
  br i1 %.not1.i53, label %234, label %232, !dbg !55

232:                                              ; preds = %231
  %233 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %155) #3, !dbg !55
  br label %__nv_sqrtf.exit54, !dbg !55

234:                                              ; preds = %231
  %235 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %155) #3, !dbg !55
  br label %__nv_sqrtf.exit54, !dbg !55

236:                                              ; preds = %__nv_sqrtf.exit49
  br i1 %.not1.i53, label %239, label %237, !dbg !55

237:                                              ; preds = %236
  %238 = tail call float @llvm.nvvm.sqrt.rn.f(float %155) #3, !dbg !55
  br label %__nv_sqrtf.exit54, !dbg !55

239:                                              ; preds = %236
  %240 = tail call float @llvm.nvvm.sqrt.approx.f(float %155) #3, !dbg !55
  br label %__nv_sqrtf.exit54, !dbg !55

__nv_sqrtf.exit54:                                ; preds = %232, %234, %237, %239
  %.0.i52 = phi float [ %233, %232 ], [ %235, %234 ], [ %238, %237 ], [ %240, %239 ], !dbg !55
  %241 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !55
  %.not.i55 = icmp eq i32 %241, 0, !dbg !55
  %242 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !55
  %.not1.i58 = icmp eq i32 %242, 0, !dbg !55
  br i1 %.not.i55, label %248, label %243, !dbg !55

243:                                              ; preds = %__nv_sqrtf.exit54
  br i1 %.not1.i58, label %246, label %244, !dbg !55

244:                                              ; preds = %243
  %245 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %156) #3, !dbg !55
  br label %__nv_sqrtf.exit59, !dbg !55

246:                                              ; preds = %243
  %247 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %156) #3, !dbg !55
  br label %__nv_sqrtf.exit59, !dbg !55

248:                                              ; preds = %__nv_sqrtf.exit54
  br i1 %.not1.i58, label %251, label %249, !dbg !55

249:                                              ; preds = %248
  %250 = tail call float @llvm.nvvm.sqrt.rn.f(float %156) #3, !dbg !55
  br label %__nv_sqrtf.exit59, !dbg !55

251:                                              ; preds = %248
  %252 = tail call float @llvm.nvvm.sqrt.approx.f(float %156) #3, !dbg !55
  br label %__nv_sqrtf.exit59, !dbg !55

__nv_sqrtf.exit59:                                ; preds = %244, %246, %249, %251
  %.0.i57 = phi float [ %245, %244 ], [ %247, %246 ], [ %250, %249 ], [ %252, %251 ], !dbg !55
  %253 = shufflevector <2 x i1> %120, <2 x i1> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !43
  %254 = shufflevector <2 x i1> %104, <2 x i1> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !38
  %255 = shufflevector <2 x i1> %96, <2 x i1> poison, <8 x i32> <i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1>, !dbg !35
  %256 = extractvalue { i32, i32, i32, i32 } %102, 3, !dbg !37
  %257 = extractvalue { i32, i32, i32, i32 } %118, 3, !dbg !42
  %258 = extractvalue { i32, i32, i32, i32 } %134, 3, !dbg !48
  %259 = extractvalue { i32, i32, i32, i32 } %148, 3, !dbg !53
  %260 = insertelement <8 x i32> poison, i32 %57, i64 0, !dbg !28
  %261 = insertelement <8 x i32> %260, i32 %56, i64 1, !dbg !28
  %262 = insertelement <8 x i32> %261, i32 %55, i64 2, !dbg !28
  %263 = insertelement <8 x i32> %262, i32 %54, i64 3, !dbg !28
  %264 = insertelement <8 x i32> %263, i32 %53, i64 4, !dbg !28
  %265 = insertelement <8 x i32> %264, i32 %52, i64 5, !dbg !28
  %266 = insertelement <8 x i32> %265, i32 %51, i64 6, !dbg !28
  %267 = insertelement <8 x i32> %266, i32 %50, i64 7, !dbg !28
  %268 = bitcast <8 x i32> %267 to <8 x float>, !dbg !28
  %269 = extractvalue { i32, i32, i32, i32 } %102, 2, !dbg !37
  %270 = extractvalue { i32, i32, i32, i32 } %118, 2, !dbg !42
  %271 = extractvalue { i32, i32, i32, i32 } %134, 2, !dbg !48
  %272 = extractvalue { i32, i32, i32, i32 } %148, 2, !dbg !53
  %273 = extractvalue { i32, i32, i32, i32 } %102, 1, !dbg !37
  %274 = extractvalue { i32, i32, i32, i32 } %118, 1, !dbg !42
  %275 = extractvalue { i32, i32, i32, i32 } %134, 1, !dbg !48
  %276 = extractvalue { i32, i32, i32, i32 } %148, 1, !dbg !53
  %277 = extractvalue { i32, i32, i32, i32 } %102, 0, !dbg !37
  %278 = extractvalue { i32, i32, i32, i32 } %118, 0, !dbg !42
  %279 = extractvalue { i32, i32, i32, i32 } %134, 0, !dbg !48
  %280 = extractvalue { i32, i32, i32, i32 } %148, 0, !dbg !53
  %281 = extractvalue { i32, i32, i32, i32 } %101, 3, !dbg !37
  %282 = extractvalue { i32, i32, i32, i32 } %117, 3, !dbg !42
  %283 = extractvalue { i32, i32, i32, i32 } %133, 3, !dbg !48
  %284 = extractvalue { i32, i32, i32, i32 } %147, 3, !dbg !53
  %285 = extractvalue { i32, i32, i32, i32 } %101, 2, !dbg !37
  %286 = extractvalue { i32, i32, i32, i32 } %117, 2, !dbg !42
  %287 = extractvalue { i32, i32, i32, i32 } %133, 2, !dbg !48
  %288 = extractvalue { i32, i32, i32, i32 } %147, 2, !dbg !53
  %289 = extractvalue { i32, i32, i32, i32 } %101, 1, !dbg !37
  %290 = extractvalue { i32, i32, i32, i32 } %117, 1, !dbg !42
  %291 = extractvalue { i32, i32, i32, i32 } %133, 1, !dbg !48
  %292 = extractvalue { i32, i32, i32, i32 } %147, 1, !dbg !53
  %293 = extractvalue { i32, i32, i32, i32 } %101, 0, !dbg !37
  %294 = extractvalue { i32, i32, i32, i32 } %117, 0, !dbg !42
  %295 = extractvalue { i32, i32, i32, i32 } %133, 0, !dbg !48
  %296 = extractvalue { i32, i32, i32, i32 } %147, 0, !dbg !53
  %297 = insertelement <8 x i32> poison, i32 %95, i64 0, !dbg !34
  %298 = insertelement <8 x i32> %297, i32 %94, i64 1, !dbg !34
  %299 = insertelement <8 x i32> %298, i32 %93, i64 2, !dbg !34
  %300 = insertelement <8 x i32> %299, i32 %92, i64 3, !dbg !34
  %301 = insertelement <8 x i32> %300, i32 %91, i64 4, !dbg !34
  %302 = insertelement <8 x i32> %301, i32 %90, i64 5, !dbg !34
  %303 = insertelement <8 x i32> %302, i32 %89, i64 6, !dbg !34
  %304 = insertelement <8 x i32> %303, i32 %88, i64 7, !dbg !34
  %305 = bitcast <8 x i32> %304 to <8 x float>, !dbg !34
  %306 = insertelement <8 x i32> poison, i32 %85, i64 0, !dbg !32
  %307 = insertelement <8 x i32> %306, i32 %84, i64 1, !dbg !32
  %308 = insertelement <8 x i32> %307, i32 %83, i64 2, !dbg !32
  %309 = insertelement <8 x i32> %308, i32 %82, i64 3, !dbg !32
  %310 = insertelement <8 x i32> %309, i32 %81, i64 4, !dbg !32
  %311 = insertelement <8 x i32> %310, i32 %80, i64 5, !dbg !32
  %312 = insertelement <8 x i32> %311, i32 %79, i64 6, !dbg !32
  %313 = insertelement <8 x i32> %312, i32 %78, i64 7, !dbg !32
  %314 = bitcast <8 x i32> %313 to <8 x float>, !dbg !32
  %315 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !56
  %316 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i27) #3, !dbg !56
  %317 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i32) #3, !dbg !56
  %318 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i37) #3, !dbg !56
  %319 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i42) #3, !dbg !56
  %320 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i47) #3, !dbg !56
  %321 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i52) #3, !dbg !56
  %322 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i57) #3, !dbg !56
  %323 = insertelement <8 x i32> poison, i32 %258, i64 0, !dbg !57
  %324 = insertelement <8 x i32> %323, i32 %271, i64 1, !dbg !57
  %325 = insertelement <8 x i32> %324, i32 %275, i64 2, !dbg !57
  %326 = insertelement <8 x i32> %325, i32 %279, i64 3, !dbg !57
  %327 = insertelement <8 x i32> %326, i32 %283, i64 4, !dbg !57
  %328 = insertelement <8 x i32> %327, i32 %287, i64 5, !dbg !57
  %329 = insertelement <8 x i32> %328, i32 %291, i64 6, !dbg !57
  %330 = insertelement <8 x i32> %329, i32 %295, i64 7, !dbg !57
  %331 = insertelement <8 x i32> poison, i32 %259, i64 0, !dbg !57
  %332 = insertelement <8 x i32> %331, i32 %272, i64 1, !dbg !57
  %333 = insertelement <8 x i32> %332, i32 %276, i64 2, !dbg !57
  %334 = insertelement <8 x i32> %333, i32 %280, i64 3, !dbg !57
  %335 = insertelement <8 x i32> %334, i32 %284, i64 4, !dbg !57
  %336 = insertelement <8 x i32> %335, i32 %288, i64 5, !dbg !57
  %337 = insertelement <8 x i32> %336, i32 %292, i64 6, !dbg !57
  %338 = insertelement <8 x i32> %337, i32 %296, i64 7, !dbg !57
  %339 = select <8 x i1> %253, <8 x i32> %330, <8 x i32> %338, !dbg !57
  %340 = insertelement <8 x i32> poison, i32 %257, i64 0, !dbg !58
  %341 = insertelement <8 x i32> %340, i32 %270, i64 1, !dbg !58
  %342 = insertelement <8 x i32> %341, i32 %274, i64 2, !dbg !58
  %343 = insertelement <8 x i32> %342, i32 %278, i64 3, !dbg !58
  %344 = insertelement <8 x i32> %343, i32 %282, i64 4, !dbg !58
  %345 = insertelement <8 x i32> %344, i32 %286, i64 5, !dbg !58
  %346 = insertelement <8 x i32> %345, i32 %290, i64 6, !dbg !58
  %347 = insertelement <8 x i32> %346, i32 %294, i64 7, !dbg !58
  %348 = select <8 x i1> %254, <8 x i32> %347, <8 x i32> %339, !dbg !58
  %349 = insertelement <8 x i32> poison, i32 %256, i64 0, !dbg !59
  %350 = insertelement <8 x i32> %349, i32 %269, i64 1, !dbg !59
  %351 = insertelement <8 x i32> %350, i32 %273, i64 2, !dbg !59
  %352 = insertelement <8 x i32> %351, i32 %277, i64 3, !dbg !59
  %353 = insertelement <8 x i32> %352, i32 %281, i64 4, !dbg !59
  %354 = insertelement <8 x i32> %353, i32 %285, i64 5, !dbg !59
  %355 = insertelement <8 x i32> %354, i32 %289, i64 6, !dbg !59
  %356 = insertelement <8 x i32> %355, i32 %293, i64 7, !dbg !59
  %357 = select <8 x i1> %255, <8 x i32> %356, <8 x i32> %348, !dbg !59
  %358 = bitcast <8 x i32> %357 to <8 x float>, !dbg !59
  %359 = fsub <8 x float> %358, %268, !dbg !60
  %360 = insertelement <8 x float> poison, float %322, i64 0, !dbg !61
  %361 = insertelement <8 x float> %360, float %321, i64 1, !dbg !61
  %362 = insertelement <8 x float> %361, float %320, i64 2, !dbg !61
  %363 = insertelement <8 x float> %362, float %319, i64 3, !dbg !61
  %364 = insertelement <8 x float> %363, float %318, i64 4, !dbg !61
  %365 = insertelement <8 x float> %364, float %317, i64 5, !dbg !61
  %366 = insertelement <8 x float> %365, float %316, i64 6, !dbg !61
  %367 = insertelement <8 x float> %366, float %315, i64 7, !dbg !61
  %368 = fmul <8 x float> %359, %367, !dbg !61
  %369 = fmul <8 x float> %368, %314, !dbg !62
  %370 = fadd <8 x float> %369, %305, !dbg !63
  %371 = fcmp olt <8 x float> %370, zeroinitializer, !dbg !64
  %372 = extractelement <8 x i1> %371, i64 7, !dbg !68
  %373 = extractelement <8 x i1> %371, i64 6, !dbg !68
  %374 = extractelement <8 x i1> %371, i64 5, !dbg !68
  %375 = extractelement <8 x i1> %371, i64 4, !dbg !68
  %376 = extractelement <8 x i1> %371, i64 3, !dbg !68
  %377 = extractelement <8 x i1> %371, i64 2, !dbg !68
  %378 = extractelement <8 x i1> %371, i64 1, !dbg !68
  %379 = extractelement <8 x i1> %371, i64 0, !dbg !68
  %380 = sext i32 %17 to i64, !dbg !69
  %381 = getelementptr float, ptr addrspace(1) %8, i64 %380, !dbg !69
  %382 = sext i32 %18 to i64, !dbg !69
  %383 = getelementptr float, ptr addrspace(1) %8, i64 %382, !dbg !69
  %384 = extractelement <8 x i32> %357, i64 4, !dbg !70
  %385 = extractelement <8 x i32> %357, i64 5, !dbg !70
  %386 = extractelement <8 x i32> %357, i64 6, !dbg !70
  %387 = extractelement <8 x i32> %357, i64 7, !dbg !70
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %387, i32 %386, i32 %385, i32 %384, ptr addrspace(1) %381, i1 %19) #3, !dbg !70
  %388 = extractelement <8 x i32> %357, i64 0, !dbg !70
  %389 = extractelement <8 x i32> %357, i64 1, !dbg !70
  %390 = extractelement <8 x i32> %357, i64 2, !dbg !70
  %391 = extractelement <8 x i32> %357, i64 3, !dbg !70
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %391, i32 %390, i32 %389, i32 %388, ptr addrspace(1) %383, i1 %20) #3, !dbg !70
  %392 = getelementptr float, ptr addrspace(1) %9, i64 %380, !dbg !71
  %393 = getelementptr float, ptr addrspace(1) %9, i64 %382, !dbg !71
  %bc = bitcast <8 x float> %370 to <8 x i32>, !dbg !72
  %394 = extractelement <8 x i32> %bc, i64 7, !dbg !72
  %395 = select i1 %372, i32 0, i32 %394, !dbg !68
  %bc60 = bitcast <8 x float> %370 to <8 x i32>, !dbg !72
  %396 = extractelement <8 x i32> %bc60, i64 6, !dbg !72
  %397 = select i1 %373, i32 0, i32 %396, !dbg !68
  %bc61 = bitcast <8 x float> %370 to <8 x i32>, !dbg !72
  %398 = extractelement <8 x i32> %bc61, i64 5, !dbg !72
  %399 = select i1 %374, i32 0, i32 %398, !dbg !68
  %bc62 = bitcast <8 x float> %370 to <8 x i32>, !dbg !72
  %400 = extractelement <8 x i32> %bc62, i64 4, !dbg !72
  %401 = select i1 %375, i32 0, i32 %400, !dbg !68
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %395, i32 %397, i32 %399, i32 %401, ptr addrspace(1) %392, i1 %19) #3, !dbg !72
  %bc63 = bitcast <8 x float> %370 to <8 x i32>, !dbg !72
  %402 = extractelement <8 x i32> %bc63, i64 3, !dbg !72
  %403 = select i1 %376, i32 0, i32 %402, !dbg !68
  %bc64 = bitcast <8 x float> %370 to <8 x i32>, !dbg !72
  %404 = extractelement <8 x i32> %bc64, i64 2, !dbg !72
  %405 = select i1 %377, i32 0, i32 %404, !dbg !68
  %bc65 = bitcast <8 x float> %370 to <8 x i32>, !dbg !72
  %406 = extractelement <8 x i32> %bc65, i64 1, !dbg !72
  %407 = select i1 %378, i32 0, i32 %406, !dbg !68
  %bc66 = bitcast <8 x float> %370 to <8 x i32>, !dbg !72
  %408 = extractelement <8 x i32> %bc66, i64 0, !dbg !72
  %409 = select i1 %379, i32 0, i32 %408, !dbg !68
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %403, i32 %405, i32 %407, i32 %409, ptr addrspace(1) %393, i1 %20) #3, !dbg !72
  ret void, !dbg !73
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "czbetnc36ha3btudjhilvuwb2dycb6t75qymsmay7466xuth72je.py", directory: "inductor_cache/zb")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_60, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_60, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_60", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_60", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 37, column: 35, scope: !7)
!18 = !DILocation(line: 37, column: 52, scope: !7)
!19 = !DILocation(line: 37, column: 46, scope: !7)
!20 = !DILocation(line: 37, column: 30, scope: !7)
!21 = !DILocation(line: 42, column: 61, scope: !7)
!22 = !DILocation(line: 42, column: 41, scope: !7)
!23 = !DILocation(line: 42, column: 36, scope: !7)
!24 = !DILocation(line: 24, column: 21, scope: !7)
!25 = !DILocation(line: 24, column: 28, scope: !7)
!26 = !DILocation(line: 48, column: 20, scope: !7)
!27 = !DILocation(line: 28, column: 31, scope: !7)
!28 = !DILocation(line: 28, column: 36, scope: !7)
!29 = !DILocation(line: 29, column: 31, scope: !7)
!30 = !DILocation(line: 29, column: 36, scope: !7)
!31 = !DILocation(line: 30, column: 31, scope: !7)
!32 = !DILocation(line: 30, column: 36, scope: !7)
!33 = !DILocation(line: 31, column: 31, scope: !7)
!34 = !DILocation(line: 31, column: 36, scope: !7)
!35 = !DILocation(line: 36, column: 18, scope: !7)
!36 = !DILocation(line: 37, column: 64, scope: !7)
!37 = !DILocation(line: 37, column: 57, scope: !7)
!38 = !DILocation(line: 41, column: 18, scope: !7)
!39 = !DILocation(line: 42, column: 56, scope: !7)
!40 = !DILocation(line: 42, column: 31, scope: !7)
!41 = !DILocation(line: 42, column: 73, scope: !7)
!42 = !DILocation(line: 42, column: 66, scope: !7)
!43 = !DILocation(line: 46, column: 20, scope: !7)
!44 = !DILocation(line: 47, column: 36, scope: !7)
!45 = !DILocation(line: 47, column: 56, scope: !7)
!46 = !DILocation(line: 47, column: 31, scope: !7)
!47 = !DILocation(line: 47, column: 74, scope: !7)
!48 = !DILocation(line: 47, column: 66, scope: !7)
!49 = !DILocation(line: 51, column: 36, scope: !7)
!50 = !DILocation(line: 51, column: 56, scope: !7)
!51 = !DILocation(line: 51, column: 31, scope: !7)
!52 = !DILocation(line: 51, column: 74, scope: !7)
!53 = !DILocation(line: 51, column: 66, scope: !7)
!54 = !DILocation(line: 57, column: 20, scope: !7)
!55 = !DILocation(line: 58, column: 27, scope: !7)
!56 = !DILocation(line: 60, column: 20, scope: !7)
!57 = !DILocation(line: 52, column: 35, scope: !7)
!58 = !DILocation(line: 53, column: 34, scope: !7)
!59 = !DILocation(line: 54, column: 33, scope: !7)
!60 = !DILocation(line: 55, column: 20, scope: !7)
!61 = !DILocation(line: 63, column: 20, scope: !7)
!62 = !DILocation(line: 64, column: 20, scope: !7)
!63 = !DILocation(line: 65, column: 20, scope: !7)
!64 = !DILocation(line: 118, column: 15, scope: !65, inlinedAt: !67)
!65 = distinct !DILexicalBlockFile(scope: !7, file: !66, discriminator: 0)
!66 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!67 = !DILocation(line: 67, column: 42, scope: !7)
!68 = !DILocation(line: 121, column: 29, scope: !65, inlinedAt: !67)
!69 = !DILocation(line: 68, column: 25, scope: !7)
!70 = !DILocation(line: 68, column: 37, scope: !7)
!71 = !DILocation(line: 69, column: 25, scope: !7)
!72 = !DILocation(line: 69, column: 37, scope: !7)
!73 = !DILocation(line: 69, column: 4, scope: !7)
