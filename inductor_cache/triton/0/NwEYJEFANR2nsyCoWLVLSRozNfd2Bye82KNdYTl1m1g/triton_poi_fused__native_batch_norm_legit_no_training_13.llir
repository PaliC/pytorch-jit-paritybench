; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_13(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %10 = shl i32 %9, 9, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = shl i32 %11, 2, !dbg !12
  %13 = and i32 %12, 508, !dbg !12
  %14 = or disjoint i32 %10, %13, !dbg !13
  %15 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %16 = icmp slt i32 %15, 36, !dbg !15
  %.frozen = freeze i32 %14, !dbg !16
  %17 = sdiv i32 %.frozen, 256, !dbg !16
  %18 = mul i32 %17, 256, !dbg !17
  %.decomposed = sub i32 %.frozen, %18, !dbg !17
  %19 = shl i32 %15, 8, !dbg !18
  %20 = add i32 %.decomposed, %19, !dbg !19
  %21 = mul i32 %17, 9216, !dbg !20
  %22 = add i32 %20, %21, !dbg !21
  %23 = sext i32 %22 to i64, !dbg !22
  %24 = getelementptr float, ptr addrspace(1) %0, i64 %23, !dbg !22
  %25 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %24, i1 %16) #4, !dbg !23
  %26 = sext i32 %.decomposed to i64, !dbg !24
  %27 = getelementptr float, ptr addrspace(1) %1, i64 %26, !dbg !24
  %28 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %27, i1 true) #4, !dbg !25
  %29 = getelementptr float, ptr addrspace(1) %2, i64 %26, !dbg !26
  %30 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %29, i1 true) #4, !dbg !27
  %31 = extractvalue { i32, i32, i32, i32 } %30, 0, !dbg !27
  %32 = extractvalue { i32, i32, i32, i32 } %30, 1, !dbg !27
  %33 = extractvalue { i32, i32, i32, i32 } %30, 2, !dbg !27
  %34 = extractvalue { i32, i32, i32, i32 } %30, 3, !dbg !27
  %35 = bitcast i32 %31 to float, !dbg !27
  %36 = bitcast i32 %32 to float, !dbg !27
  %37 = bitcast i32 %33 to float, !dbg !27
  %38 = bitcast i32 %34 to float, !dbg !27
  %39 = getelementptr float, ptr addrspace(1) %3, i64 %26, !dbg !28
  %40 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %39, i1 true) #4, !dbg !29
  %41 = getelementptr float, ptr addrspace(1) %4, i64 %26, !dbg !30
  %42 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %41, i1 true) #4, !dbg !31
  %43 = fadd float %35, 0x3EE4F8B580000000, !dbg !32
  %44 = fadd float %36, 0x3EE4F8B580000000, !dbg !32
  %45 = fadd float %37, 0x3EE4F8B580000000, !dbg !32
  %46 = fadd float %38, 0x3EE4F8B580000000, !dbg !32
  %47 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i = icmp eq i32 %47, 0, !dbg !33
  %48 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i = icmp eq i32 %48, 0, !dbg !33
  br i1 %.not.i, label %54, label %49, !dbg !33

49:                                               ; preds = %8
  br i1 %.not1.i, label %52, label %50, !dbg !33

50:                                               ; preds = %49
  %51 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %43) #4, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

52:                                               ; preds = %49
  %53 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %43) #4, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

54:                                               ; preds = %8
  br i1 %.not1.i, label %57, label %55, !dbg !33

55:                                               ; preds = %54
  %56 = tail call float @llvm.nvvm.sqrt.rn.f(float %43) #4, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

57:                                               ; preds = %54
  %58 = tail call float @llvm.nvvm.sqrt.approx.f(float %43) #4, !dbg !33
  br label %__nv_sqrtf.exit, !dbg !33

__nv_sqrtf.exit:                                  ; preds = %50, %52, %55, %57
  %.0.i = phi float [ %51, %50 ], [ %53, %52 ], [ %56, %55 ], [ %58, %57 ], !dbg !33
  %59 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i5 = icmp eq i32 %59, 0, !dbg !33
  %60 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i8 = icmp eq i32 %60, 0, !dbg !33
  br i1 %.not.i5, label %66, label %61, !dbg !33

61:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i8, label %64, label %62, !dbg !33

62:                                               ; preds = %61
  %63 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %44) #4, !dbg !33
  br label %__nv_sqrtf.exit9, !dbg !33

64:                                               ; preds = %61
  %65 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %44) #4, !dbg !33
  br label %__nv_sqrtf.exit9, !dbg !33

66:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i8, label %69, label %67, !dbg !33

67:                                               ; preds = %66
  %68 = tail call float @llvm.nvvm.sqrt.rn.f(float %44) #4, !dbg !33
  br label %__nv_sqrtf.exit9, !dbg !33

69:                                               ; preds = %66
  %70 = tail call float @llvm.nvvm.sqrt.approx.f(float %44) #4, !dbg !33
  br label %__nv_sqrtf.exit9, !dbg !33

__nv_sqrtf.exit9:                                 ; preds = %62, %64, %67, %69
  %.0.i7 = phi float [ %63, %62 ], [ %65, %64 ], [ %68, %67 ], [ %70, %69 ], !dbg !33
  %71 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i10 = icmp eq i32 %71, 0, !dbg !33
  %72 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i13 = icmp eq i32 %72, 0, !dbg !33
  br i1 %.not.i10, label %78, label %73, !dbg !33

73:                                               ; preds = %__nv_sqrtf.exit9
  br i1 %.not1.i13, label %76, label %74, !dbg !33

74:                                               ; preds = %73
  %75 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %45) #4, !dbg !33
  br label %__nv_sqrtf.exit14, !dbg !33

76:                                               ; preds = %73
  %77 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %45) #4, !dbg !33
  br label %__nv_sqrtf.exit14, !dbg !33

78:                                               ; preds = %__nv_sqrtf.exit9
  br i1 %.not1.i13, label %81, label %79, !dbg !33

79:                                               ; preds = %78
  %80 = tail call float @llvm.nvvm.sqrt.rn.f(float %45) #4, !dbg !33
  br label %__nv_sqrtf.exit14, !dbg !33

81:                                               ; preds = %78
  %82 = tail call float @llvm.nvvm.sqrt.approx.f(float %45) #4, !dbg !33
  br label %__nv_sqrtf.exit14, !dbg !33

__nv_sqrtf.exit14:                                ; preds = %74, %76, %79, %81
  %.0.i12 = phi float [ %75, %74 ], [ %77, %76 ], [ %80, %79 ], [ %82, %81 ], !dbg !33
  %83 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !33
  %.not.i15 = icmp eq i32 %83, 0, !dbg !33
  %84 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !33
  %.not1.i18 = icmp eq i32 %84, 0, !dbg !33
  br i1 %.not.i15, label %90, label %85, !dbg !33

85:                                               ; preds = %__nv_sqrtf.exit14
  br i1 %.not1.i18, label %88, label %86, !dbg !33

86:                                               ; preds = %85
  %87 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %46) #4, !dbg !33
  br label %__nv_sqrtf.exit19, !dbg !33

88:                                               ; preds = %85
  %89 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %46) #4, !dbg !33
  br label %__nv_sqrtf.exit19, !dbg !33

90:                                               ; preds = %__nv_sqrtf.exit14
  br i1 %.not1.i18, label %93, label %91, !dbg !33

91:                                               ; preds = %90
  %92 = tail call float @llvm.nvvm.sqrt.rn.f(float %46) #4, !dbg !33
  br label %__nv_sqrtf.exit19, !dbg !33

93:                                               ; preds = %90
  %94 = tail call float @llvm.nvvm.sqrt.approx.f(float %46) #4, !dbg !33
  br label %__nv_sqrtf.exit19, !dbg !33

__nv_sqrtf.exit19:                                ; preds = %86, %88, %91, %93
  %.0.i17 = phi float [ %87, %86 ], [ %89, %88 ], [ %92, %91 ], [ %94, %93 ], !dbg !33
  %95 = extractvalue { i32, i32, i32, i32 } %25, 3, !dbg !23
  %96 = bitcast i32 %95 to float, !dbg !23
  %97 = extractvalue { i32, i32, i32, i32 } %28, 3, !dbg !25
  %98 = bitcast i32 %97 to float, !dbg !25
  %99 = fsub float %96, %98, !dbg !34
  %100 = extractvalue { i32, i32, i32, i32 } %25, 2, !dbg !23
  %101 = bitcast i32 %100 to float, !dbg !23
  %102 = extractvalue { i32, i32, i32, i32 } %28, 2, !dbg !25
  %103 = bitcast i32 %102 to float, !dbg !25
  %104 = fsub float %101, %103, !dbg !34
  %105 = extractvalue { i32, i32, i32, i32 } %25, 1, !dbg !23
  %106 = bitcast i32 %105 to float, !dbg !23
  %107 = extractvalue { i32, i32, i32, i32 } %28, 1, !dbg !25
  %108 = bitcast i32 %107 to float, !dbg !25
  %109 = fsub float %106, %108, !dbg !34
  %110 = extractvalue { i32, i32, i32, i32 } %25, 0, !dbg !23
  %111 = bitcast i32 %110 to float, !dbg !23
  %112 = extractvalue { i32, i32, i32, i32 } %28, 0, !dbg !25
  %113 = bitcast i32 %112 to float, !dbg !25
  %114 = fsub float %111, %113, !dbg !34
  %115 = extractvalue { i32, i32, i32, i32 } %42, 3, !dbg !31
  %116 = bitcast i32 %115 to float, !dbg !31
  %117 = extractvalue { i32, i32, i32, i32 } %42, 2, !dbg !31
  %118 = bitcast i32 %117 to float, !dbg !31
  %119 = extractvalue { i32, i32, i32, i32 } %42, 1, !dbg !31
  %120 = bitcast i32 %119 to float, !dbg !31
  %121 = extractvalue { i32, i32, i32, i32 } %42, 0, !dbg !31
  %122 = bitcast i32 %121 to float, !dbg !31
  %123 = extractvalue { i32, i32, i32, i32 } %40, 3, !dbg !29
  %124 = bitcast i32 %123 to float, !dbg !29
  %125 = extractvalue { i32, i32, i32, i32 } %40, 2, !dbg !29
  %126 = bitcast i32 %125 to float, !dbg !29
  %127 = extractvalue { i32, i32, i32, i32 } %40, 1, !dbg !29
  %128 = bitcast i32 %127 to float, !dbg !29
  %129 = extractvalue { i32, i32, i32, i32 } %40, 0, !dbg !29
  %130 = bitcast i32 %129 to float, !dbg !29
  %131 = and i32 %11, 127, !dbg !12
  %132 = or disjoint i32 %131, 384, !dbg !12
  %133 = or disjoint i32 %10, %132, !dbg !13
  %134 = or disjoint i32 %131, 256, !dbg !12
  %135 = or disjoint i32 %10, %134, !dbg !13
  %136 = or disjoint i32 %131, 128, !dbg !12
  %137 = or disjoint i32 %10, %136, !dbg !13
  %138 = or disjoint i32 %10, %131, !dbg !13
  %139 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !35
  %140 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i7) #4, !dbg !35
  %141 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i12) #4, !dbg !35
  %142 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i17) #4, !dbg !35
  %143 = fmul float %114, %139, !dbg !36
  %144 = fmul float %109, %140, !dbg !36
  %145 = fmul float %104, %141, !dbg !36
  %146 = fmul float %99, %142, !dbg !36
  %147 = fmul float %143, %130, !dbg !37
  %148 = fmul float %144, %128, !dbg !37
  %149 = fmul float %145, %126, !dbg !37
  %150 = fmul float %146, %124, !dbg !37
  %151 = fadd float %147, %122, !dbg !38
  %152 = fadd float %148, %120, !dbg !38
  %153 = fadd float %149, %118, !dbg !38
  %154 = fadd float %150, %116, !dbg !38
  %155 = mul i32 %138, 36, !dbg !39
  %156 = mul i32 %137, 36, !dbg !39
  %157 = mul i32 %135, 36, !dbg !39
  %158 = mul i32 %133, 36, !dbg !39
  %159 = add i32 %155, %15, !dbg !40
  %160 = add i32 %156, %15, !dbg !40
  %161 = add i32 %157, %15, !dbg !40
  %162 = add i32 %158, %15, !dbg !40
  %163 = sext i32 %159 to i64, !dbg !41
  %164 = getelementptr float, ptr addrspace(1) %5, i64 %163, !dbg !41
  %165 = sext i32 %160 to i64, !dbg !41
  %166 = getelementptr float, ptr addrspace(1) %5, i64 %165, !dbg !41
  %167 = sext i32 %161 to i64, !dbg !41
  %168 = getelementptr float, ptr addrspace(1) %5, i64 %167, !dbg !41
  %169 = sext i32 %162 to i64, !dbg !41
  %170 = getelementptr float, ptr addrspace(1) %5, i64 %169, !dbg !41
  %.idx = shl nuw nsw i32 %13, 3, !dbg !42
  %171 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !42
  %172 = bitcast float %151 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %171, <1 x i32> %172, i1 true) #4, !dbg !42
  %173 = shl nuw nsw i32 %13, 1, !dbg !42
  %174 = or disjoint i32 %173, 2, !dbg !42
  %175 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %174, !dbg !42
  %176 = bitcast float %152 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %175, <1 x i32> %176, i1 true) #4, !dbg !42
  %177 = or disjoint i32 %173, 4, !dbg !42
  %178 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %177, !dbg !42
  %179 = bitcast float %153 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %178, <1 x i32> %179, i1 true) #4, !dbg !42
  %180 = or disjoint i32 %173, 6, !dbg !42
  %181 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %180, !dbg !42
  %182 = bitcast float %154 to <1 x i32>, !dbg !42
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %181, <1 x i32> %182, i1 true) #4, !dbg !42
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %.idx1 = shl nuw nsw i32 %131, 3, !dbg !42
  %183 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx1, !dbg !42
  %184 = load i32, ptr addrspace(3) %183, align 8, !dbg !42
  %.idx2 = shl nuw nsw i32 %136, 3, !dbg !42
  %185 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx2, !dbg !42
  %186 = load i32, ptr addrspace(3) %185, align 8, !dbg !42
  %.idx3 = shl nuw nsw i32 %134, 3, !dbg !42
  %187 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx3, !dbg !42
  %188 = load i32, ptr addrspace(3) %187, align 8, !dbg !42
  %.idx4 = shl nuw nsw i32 %132, 3, !dbg !42
  %189 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx4, !dbg !42
  %190 = load i32, ptr addrspace(3) %189, align 8, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %184, ptr addrspace(1) %164, i1 %16) #4, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %186, ptr addrspace(1) %166, i1 %16) #4, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %188, ptr addrspace(1) %168, i1 %16) #4, !dbg !42
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %190, ptr addrspace(1) %170, i1 %16) #4, !dbg !42
  ret void, !dbg !43
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cudctemwvjjsxdcrryzsv6lpashxebnoeh6swwegpy6nwluainlp.py", directory: "inductor_cache/ud")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_13, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_13, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_13", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_13", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 27, column: 21, scope: !7)
!16 = !DILocation(line: 30, column: 19, scope: !7)
!17 = !DILocation(line: 29, column: 19, scope: !7)
!18 = !DILocation(line: 32, column: 39, scope: !7)
!19 = !DILocation(line: 32, column: 35, scope: !7)
!20 = !DILocation(line: 32, column: 49, scope: !7)
!21 = !DILocation(line: 32, column: 44, scope: !7)
!22 = !DILocation(line: 32, column: 30, scope: !7)
!23 = !DILocation(line: 32, column: 54, scope: !7)
!24 = !DILocation(line: 33, column: 30, scope: !7)
!25 = !DILocation(line: 33, column: 35, scope: !7)
!26 = !DILocation(line: 34, column: 30, scope: !7)
!27 = !DILocation(line: 34, column: 35, scope: !7)
!28 = !DILocation(line: 35, column: 31, scope: !7)
!29 = !DILocation(line: 35, column: 36, scope: !7)
!30 = !DILocation(line: 36, column: 31, scope: !7)
!31 = !DILocation(line: 36, column: 36, scope: !7)
!32 = !DILocation(line: 39, column: 18, scope: !7)
!33 = !DILocation(line: 40, column: 26, scope: !7)
!34 = !DILocation(line: 37, column: 18, scope: !7)
!35 = !DILocation(line: 42, column: 18, scope: !7)
!36 = !DILocation(line: 45, column: 19, scope: !7)
!37 = !DILocation(line: 46, column: 20, scope: !7)
!38 = !DILocation(line: 47, column: 20, scope: !7)
!39 = !DILocation(line: 48, column: 33, scope: !7)
!40 = !DILocation(line: 48, column: 30, scope: !7)
!41 = !DILocation(line: 48, column: 25, scope: !7)
!42 = !DILocation(line: 48, column: 45, scope: !7)
!43 = !DILocation(line: 48, column: 4, scope: !7)
