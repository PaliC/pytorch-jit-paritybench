; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_avg_pool2d_31(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 10, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 2, !dbg !12
  %8 = and i32 %7, 508, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = or disjoint i32 %9, 2, !dbg !13
  %11 = or disjoint i32 %9, 512, !dbg !13
  %12 = or disjoint i32 %9, 514, !dbg !13
  %13 = sdiv i32 %9, 14, !dbg !14
  %14 = sdiv i32 %10, 14, !dbg !14
  %15 = sdiv i32 %11, 14, !dbg !14
  %16 = sdiv i32 %12, 14, !dbg !14
  %17 = add i32 %9, -15, !dbg !15
  %18 = add i32 %9, -14, !dbg !15
  %19 = add i32 %9, -13, !dbg !15
  %20 = add i32 %9, -12, !dbg !15
  %21 = sext i32 %17 to i64, !dbg !16
  %22 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !16
  %23 = sext i32 %18 to i64, !dbg !16
  %24 = getelementptr float, ptr addrspace(1) %0, i64 %23, !dbg !16
  %25 = sext i32 %19 to i64, !dbg !16
  %26 = getelementptr float, ptr addrspace(1) %0, i64 %25, !dbg !16
  %27 = sext i32 %20 to i64, !dbg !16
  %28 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !16
  %29 = sext i32 %11 to i64, !dbg !16
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !16
  %31 = getelementptr i8, ptr addrspace(1) %30, i64 -60, !dbg !16
  %32 = sext i32 %12 to i64, !dbg !16
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !16
  %34 = getelementptr i8, ptr addrspace(1) %33, i64 -60, !dbg !16
  %35 = getelementptr i8, ptr addrspace(1) %30, i64 -56, !dbg !17
  %36 = getelementptr i8, ptr addrspace(1) %33, i64 -56, !dbg !17
  %37 = add i32 %9, -11, !dbg !18
  %38 = add i32 %9, -10, !dbg !18
  %39 = sext i32 %37 to i64, !dbg !19
  %40 = getelementptr float, ptr addrspace(1) %0, i64 %39, !dbg !19
  %41 = sext i32 %38 to i64, !dbg !19
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !19
  %43 = getelementptr i8, ptr addrspace(1) %30, i64 -52, !dbg !19
  %44 = getelementptr i8, ptr addrspace(1) %33, i64 -52, !dbg !19
  %45 = insertelement <2 x i32> poison, i32 %9, i64 0, !dbg !20
  %46 = insertelement <2 x i32> %45, i32 %13, i64 1, !dbg !20
  %47 = srem <2 x i32> %46, splat (i32 14), !dbg !20
  %48 = shufflevector <2 x i32> %47, <2 x i32> poison, <4 x i32> <i32 poison, i32 1, i32 poison, i32 poison>
  %49 = extractelement <2 x i32> %47, i64 1, !dbg !21
  %50 = add nsw i32 %49, -1, !dbg !22
  %51 = icmp sgt i32 %49, 0, !dbg !23
  %52 = extractelement <2 x i32> %47, i64 0, !dbg !24
  %53 = add nsw i32 %52, -1, !dbg !25
  %54 = icmp sgt <2 x i32> %47, <i32 0, i32 -1>, !dbg !26
  %55 = extractelement <2 x i1> %54, i64 0, !dbg !27
  %56 = and i1 %55, %51, !dbg !27
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %22, i1 %56, i32 0, i1 %56) #1, !dbg !28
  %58 = bitcast i32 %57 to float, !dbg !28
  %59 = icmp sgt i32 %52, -1, !dbg !29
  %60 = and i1 %59, %51, !dbg !30
  %61 = icmp ult i32 %52, 14, !dbg !24
  %62 = and i1 %61, %51, !dbg !31
  %63 = insertelement <2 x i32> poison, i32 %10, i64 0, !dbg !20
  %64 = insertelement <2 x i32> %63, i32 %14, i64 1, !dbg !20
  %65 = srem <2 x i32> %64, splat (i32 14), !dbg !20
  %66 = shufflevector <2 x i32> %65, <2 x i32> poison, <4 x i32> <i32 poison, i32 1, i32 poison, i32 poison>
  %67 = extractelement <2 x i32> %65, i64 1, !dbg !21
  %68 = add nsw i32 %67, -1, !dbg !22
  %69 = icmp sgt i32 %67, 0, !dbg !23
  %70 = extractelement <2 x i32> %65, i64 0, !dbg !24
  %71 = add nsw i32 %70, -1, !dbg !25
  %72 = icmp sgt <2 x i32> %65, <i32 0, i32 -1>, !dbg !26
  %73 = extractelement <2 x i1> %72, i64 0, !dbg !27
  %74 = and i1 %73, %69, !dbg !27
  %75 = icmp sgt i32 %70, -1, !dbg !29
  %76 = and i1 %75, %69, !dbg !30
  %77 = icmp ult i32 %70, 14, !dbg !24
  %78 = and i1 %77, %69, !dbg !31
  %79 = insertelement <2 x i32> poison, i32 %11, i64 0, !dbg !20
  %80 = insertelement <2 x i32> %79, i32 %15, i64 1, !dbg !20
  %81 = srem <2 x i32> %80, splat (i32 14), !dbg !20
  %82 = extractelement <2 x i32> %81, i64 1, !dbg !21
  %83 = add nsw i32 %82, -1, !dbg !22
  %84 = icmp sgt i32 %82, 0, !dbg !23
  %85 = extractelement <2 x i32> %81, i64 0, !dbg !24
  %86 = add nsw i32 %85, -1, !dbg !25
  %87 = icmp sgt <2 x i32> %81, <i32 0, i32 -1>, !dbg !26
  %88 = extractelement <2 x i1> %87, i64 0, !dbg !27
  %89 = and i1 %88, %84, !dbg !27
  %90 = icmp sgt i32 %85, -1, !dbg !29
  %91 = and i1 %90, %84, !dbg !30
  %92 = icmp ult i32 %85, 14, !dbg !24
  %93 = and i1 %92, %84, !dbg !31
  %94 = insertelement <2 x i32> poison, i32 %12, i64 0, !dbg !20
  %95 = insertelement <2 x i32> %94, i32 %16, i64 1, !dbg !20
  %96 = srem <2 x i32> %95, splat (i32 14), !dbg !20
  %97 = extractelement <2 x i32> %96, i64 1, !dbg !21
  %98 = add nsw i32 %97, -1, !dbg !22
  %99 = icmp sgt i32 %97, 0, !dbg !23
  %100 = extractelement <2 x i32> %96, i64 0, !dbg !24
  %101 = add nsw i32 %100, -1, !dbg !25
  %102 = icmp sgt <2 x i32> %96, <i32 0, i32 -1>, !dbg !26
  %103 = extractelement <2 x i1> %102, i64 0, !dbg !27
  %104 = and i1 %103, %99, !dbg !27
  %105 = icmp sgt i32 %100, -1, !dbg !29
  %106 = and i1 %105, %99, !dbg !30
  %107 = icmp ult i32 %100, 14, !dbg !24
  %108 = and i1 %107, %99, !dbg !31
  %109 = extractelement <2 x i1> %54, i64 1, !dbg !32
  %110 = and i1 %55, %109, !dbg !32
  %111 = extractelement <2 x i1> %72, i64 1, !dbg !32
  %112 = and i1 %73, %111, !dbg !32
  %113 = extractelement <2 x i1> %87, i64 1, !dbg !32
  %114 = and i1 %88, %113, !dbg !32
  %115 = extractelement <2 x i1> %102, i64 1, !dbg !32
  %116 = and i1 %103, %115, !dbg !32
  %117 = add i32 %9, -1, !dbg !33
  %118 = sext i32 %117 to i64, !dbg !34
  %119 = getelementptr float, ptr addrspace(1) %0, i64 %118, !dbg !34
  %120 = sext i32 %10 to i64, !dbg !34
  %121 = getelementptr float, ptr addrspace(1) %0, i64 %120, !dbg !34
  %122 = getelementptr i8, ptr addrspace(1) %121, i64 -4, !dbg !34
  %123 = getelementptr i8, ptr addrspace(1) %30, i64 -4, !dbg !34
  %124 = getelementptr i8, ptr addrspace(1) %33, i64 -4, !dbg !34
  %125 = or i32 %49, %52, !dbg !35
  %126 = icmp sgt i32 %125, -1, !dbg !35
  %127 = or i32 %67, %70, !dbg !35
  %128 = icmp sgt i32 %127, -1, !dbg !35
  %129 = or i32 %82, %85, !dbg !35
  %130 = icmp sgt i32 %129, -1, !dbg !35
  %131 = or i32 %97, %100, !dbg !35
  %132 = icmp sgt i32 %131, -1, !dbg !35
  %133 = sext i32 %9 to i64, !dbg !36
  %134 = getelementptr float, ptr addrspace(1) %0, i64 %133, !dbg !36
  %135 = and i1 %61, %109, !dbg !37
  %136 = and i1 %77, %111, !dbg !37
  %137 = and i1 %92, %113, !dbg !37
  %138 = and i1 %107, %115, !dbg !37
  %139 = add i32 %9, 516, !dbg !38
  %140 = sext i32 %139 to i64, !dbg !39
  %141 = getelementptr float, ptr addrspace(1) %0, i64 %140, !dbg !39
  %142 = insertelement <4 x i32> poison, i32 %9, i64 0, !dbg !13
  %143 = shufflevector <4 x i32> %142, <4 x i32> poison, <4 x i32> zeroinitializer, !dbg !13
  %144 = or disjoint <4 x i32> %143, <i32 515, i32 513, i32 3, i32 1>, !dbg !13
  %145 = srem <4 x i32> %144, splat (i32 14), !dbg !20
  %146 = extractelement <4 x i32> %145, i64 3, !dbg !40
  %147 = add nsw i32 %146, -1, !dbg !25
  %148 = extractelement <4 x i32> %145, i64 2, !dbg !40
  %149 = add nsw i32 %148, -1, !dbg !25
  %150 = extractelement <4 x i32> %145, i64 1, !dbg !40
  %151 = add nsw i32 %150, -1, !dbg !25
  %152 = extractelement <4 x i32> %145, i64 0, !dbg !40
  %153 = add nsw i32 %152, -1, !dbg !25
  %154 = icmp sgt i32 %146, 0, !dbg !26
  %155 = icmp sgt i32 %148, 0, !dbg !26
  %156 = icmp sgt i32 %150, 0, !dbg !26
  %157 = icmp sgt i32 %152, 0, !dbg !26
  %158 = extractelement <4 x i32> %144, i64 1, !dbg !16
  %159 = sext i32 %158 to i64, !dbg !16
  %160 = getelementptr float, ptr addrspace(1) %0, i64 %159, !dbg !16
  %161 = getelementptr i8, ptr addrspace(1) %160, i64 -60, !dbg !16
  %162 = extractelement <4 x i32> %144, i64 0, !dbg !16
  %163 = sext i32 %162 to i64, !dbg !16
  %164 = getelementptr float, ptr addrspace(1) %0, i64 %163, !dbg !16
  %165 = getelementptr i8, ptr addrspace(1) %164, i64 -60, !dbg !16
  %166 = getelementptr i8, ptr addrspace(1) %160, i64 -52, !dbg !19
  %167 = getelementptr i8, ptr addrspace(1) %164, i64 -52, !dbg !19
  %168 = and i1 %154, %51, !dbg !27
  %169 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %24, i1 %168, i32 0, i1 %168) #1, !dbg !28
  %170 = bitcast i32 %169 to float, !dbg !28
  %171 = shufflevector <2 x i32> %96, <2 x i32> %81, <4 x i32> <i32 1, i32 3, i32 poison, i32 poison>, !dbg !41
  %172 = shufflevector <4 x i32> %171, <4 x i32> %66, <4 x i32> <i32 0, i32 1, i32 5, i32 poison>, !dbg !41
  %173 = shufflevector <4 x i32> %172, <4 x i32> %48, <4 x i32> <i32 0, i32 1, i32 2, i32 5>, !dbg !41
  %174 = shufflevector <4 x i32> %173, <4 x i32> %145, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7>, !dbg !41
  %175 = add nsw <8 x i32> %174, splat (i32 1), !dbg !41
  %176 = icmp ult <8 x i32> %175, splat (i32 14), !dbg !41
  %177 = extractelement <8 x i1> %176, i64 7, !dbg !31
  %178 = and i1 %177, %51, !dbg !31
  %179 = and i1 %155, %69, !dbg !27
  %180 = extractelement <8 x i1> %176, i64 6, !dbg !31
  %181 = and i1 %69, %180, !dbg !31
  %182 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %26, i1 %74, i32 0, i1 %74) #1, !dbg !28
  %183 = bitcast i32 %182 to float, !dbg !28
  %184 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %28, i1 %179, i32 0, i1 %179) #1, !dbg !28
  %185 = bitcast i32 %184 to float, !dbg !28
  %186 = and i1 %156, %84, !dbg !27
  %187 = extractelement <8 x i1> %176, i64 5, !dbg !31
  %188 = and i1 %84, %187, !dbg !31
  %189 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %31, i1 %89, i32 0, i1 %89) #1, !dbg !28
  %190 = bitcast i32 %189 to float, !dbg !28
  %191 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %161, i1 %186, i32 0, i1 %186) #1, !dbg !28
  %192 = bitcast i32 %191 to float, !dbg !28
  %193 = and i1 %157, %99, !dbg !27
  %194 = extractelement <8 x i1> %176, i64 4, !dbg !31
  %195 = and i1 %99, %194, !dbg !31
  %196 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %34, i1 %104, i32 0, i1 %104) #1, !dbg !28
  %197 = bitcast i32 %196 to float, !dbg !28
  %198 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %165, i1 %193, i32 0, i1 %193) #1, !dbg !28
  %199 = bitcast i32 %198 to float, !dbg !28
  %200 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %24, i1 %60, i32 0, i1 %60, i32 0, i1 %60) #1, !dbg !42
  %201 = extractvalue { i32, i32 } %200, 0, !dbg !42
  %202 = extractvalue { i32, i32 } %200, 1, !dbg !42
  %203 = bitcast i32 %201 to float, !dbg !42
  %204 = bitcast i32 %202 to float, !dbg !42
  %205 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %28, i1 %76, i32 0, i1 %76, i32 0, i1 %76) #1, !dbg !42
  %206 = extractvalue { i32, i32 } %205, 0, !dbg !42
  %207 = extractvalue { i32, i32 } %205, 1, !dbg !42
  %208 = bitcast i32 %206 to float, !dbg !42
  %209 = bitcast i32 %207 to float, !dbg !42
  %210 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %35, i1 %91, i32 0, i1 %91, i32 0, i1 %91) #1, !dbg !42
  %211 = extractvalue { i32, i32 } %210, 0, !dbg !42
  %212 = extractvalue { i32, i32 } %210, 1, !dbg !42
  %213 = bitcast i32 %211 to float, !dbg !42
  %214 = bitcast i32 %212 to float, !dbg !42
  %215 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %36, i1 %106, i32 0, i1 %106, i32 0, i1 %106) #1, !dbg !42
  %216 = extractvalue { i32, i32 } %215, 0, !dbg !42
  %217 = extractvalue { i32, i32 } %215, 1, !dbg !42
  %218 = bitcast i32 %216 to float, !dbg !42
  %219 = bitcast i32 %217 to float, !dbg !42
  %220 = fadd float %58, %203, !dbg !43
  %221 = fadd float %170, %204, !dbg !43
  %222 = fadd float %183, %208, !dbg !43
  %223 = fadd float %185, %209, !dbg !43
  %224 = fadd float %190, %213, !dbg !43
  %225 = fadd float %192, %214, !dbg !43
  %226 = fadd float %197, %218, !dbg !43
  %227 = fadd float %199, %219, !dbg !43
  %228 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %26, i1 %62, i32 0, i1 %62) #1, !dbg !44
  %229 = bitcast i32 %228 to float, !dbg !44
  %230 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %28, i1 %178, i32 0, i1 %178) #1, !dbg !44
  %231 = bitcast i32 %230 to float, !dbg !44
  %232 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %40, i1 %78, i32 0, i1 %78) #1, !dbg !44
  %233 = bitcast i32 %232 to float, !dbg !44
  %234 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %42, i1 %181, i32 0, i1 %181) #1, !dbg !44
  %235 = bitcast i32 %234 to float, !dbg !44
  %236 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %43, i1 %93, i32 0, i1 %93) #1, !dbg !44
  %237 = bitcast i32 %236 to float, !dbg !44
  %238 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %166, i1 %188, i32 0, i1 %188) #1, !dbg !44
  %239 = bitcast i32 %238 to float, !dbg !44
  %240 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %44, i1 %108, i32 0, i1 %108) #1, !dbg !44
  %241 = bitcast i32 %240 to float, !dbg !44
  %242 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %167, i1 %195, i32 0, i1 %195) #1, !dbg !44
  %243 = bitcast i32 %242 to float, !dbg !44
  %244 = fadd float %220, %229, !dbg !45
  %245 = fadd float %221, %231, !dbg !45
  %246 = fadd float %222, %233, !dbg !45
  %247 = fadd float %223, %235, !dbg !45
  %248 = fadd float %224, %237, !dbg !45
  %249 = fadd float %225, %239, !dbg !45
  %250 = fadd float %226, %241, !dbg !45
  %251 = fadd float %227, %243, !dbg !45
  %252 = and i1 %154, %109, !dbg !32
  %253 = and i1 %155, %111, !dbg !32
  %254 = and i1 %156, %113, !dbg !32
  %255 = and i1 %157, %115, !dbg !32
  %256 = extractelement <4 x i32> %144, i64 3, !dbg !34
  %257 = sext i32 %256 to i64, !dbg !34
  %258 = getelementptr float, ptr addrspace(1) %0, i64 %257, !dbg !34
  %259 = getelementptr i8, ptr addrspace(1) %258, i64 -4, !dbg !34
  %260 = extractelement <4 x i32> %144, i64 2, !dbg !34
  %261 = sext i32 %260 to i64, !dbg !34
  %262 = getelementptr float, ptr addrspace(1) %0, i64 %261, !dbg !34
  %263 = getelementptr i8, ptr addrspace(1) %262, i64 -4, !dbg !34
  %264 = getelementptr i8, ptr addrspace(1) %160, i64 -4, !dbg !34
  %265 = getelementptr i8, ptr addrspace(1) %164, i64 -4, !dbg !34
  %266 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %119, i1 %110, i32 0, i1 %110) #1, !dbg !46
  %267 = bitcast i32 %266 to float, !dbg !46
  %268 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %259, i1 %252, i32 0, i1 %252) #1, !dbg !46
  %269 = bitcast i32 %268 to float, !dbg !46
  %270 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %122, i1 %112, i32 0, i1 %112) #1, !dbg !46
  %271 = bitcast i32 %270 to float, !dbg !46
  %272 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %263, i1 %253, i32 0, i1 %253) #1, !dbg !46
  %273 = bitcast i32 %272 to float, !dbg !46
  %274 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %123, i1 %114, i32 0, i1 %114) #1, !dbg !46
  %275 = bitcast i32 %274 to float, !dbg !46
  %276 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %264, i1 %254, i32 0, i1 %254) #1, !dbg !46
  %277 = bitcast i32 %276 to float, !dbg !46
  %278 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %124, i1 %116, i32 0, i1 %116) #1, !dbg !46
  %279 = bitcast i32 %278 to float, !dbg !46
  %280 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %265, i1 %255, i32 0, i1 %255) #1, !dbg !46
  %281 = bitcast i32 %280 to float, !dbg !46
  %282 = fadd float %244, %267, !dbg !47
  %283 = fadd float %245, %269, !dbg !47
  %284 = fadd float %246, %271, !dbg !47
  %285 = fadd float %247, %273, !dbg !47
  %286 = fadd float %248, %275, !dbg !47
  %287 = fadd float %249, %277, !dbg !47
  %288 = fadd float %250, %279, !dbg !47
  %289 = fadd float %251, %281, !dbg !47
  %290 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %134, i1 %126, i32 0, i1 %126, i32 0, i1 %126) #1, !dbg !48
  %291 = extractvalue { i32, i32 } %290, 0, !dbg !48
  %292 = extractvalue { i32, i32 } %290, 1, !dbg !48
  %293 = bitcast i32 %291 to float, !dbg !48
  %294 = bitcast i32 %292 to float, !dbg !48
  %295 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %121, i1 %128, i32 0, i1 %128, i32 0, i1 %128) #1, !dbg !48
  %296 = extractvalue { i32, i32 } %295, 0, !dbg !48
  %297 = extractvalue { i32, i32 } %295, 1, !dbg !48
  %298 = bitcast i32 %296 to float, !dbg !48
  %299 = bitcast i32 %297 to float, !dbg !48
  %300 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %30, i1 %130, i32 0, i1 %130, i32 0, i1 %130) #1, !dbg !48
  %301 = extractvalue { i32, i32 } %300, 0, !dbg !48
  %302 = extractvalue { i32, i32 } %300, 1, !dbg !48
  %303 = bitcast i32 %301 to float, !dbg !48
  %304 = bitcast i32 %302 to float, !dbg !48
  %305 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %33, i1 %132, i32 0, i1 %132, i32 0, i1 %132) #1, !dbg !48
  %306 = extractvalue { i32, i32 } %305, 0, !dbg !48
  %307 = extractvalue { i32, i32 } %305, 1, !dbg !48
  %308 = bitcast i32 %306 to float, !dbg !48
  %309 = bitcast i32 %307 to float, !dbg !48
  %310 = fadd float %282, %293, !dbg !49
  %311 = fadd float %283, %294, !dbg !49
  %312 = fadd float %284, %298, !dbg !49
  %313 = fadd float %285, %299, !dbg !49
  %314 = fadd float %286, %303, !dbg !49
  %315 = fadd float %287, %304, !dbg !49
  %316 = fadd float %288, %308, !dbg !49
  %317 = fadd float %289, %309, !dbg !49
  %318 = and i1 %177, %109, !dbg !37
  %319 = and i1 %111, %180, !dbg !37
  %320 = and i1 %113, %187, !dbg !37
  %321 = and i1 %115, %194, !dbg !37
  %322 = getelementptr i8, ptr addrspace(1) %258, i64 4, !dbg !39
  %323 = getelementptr i8, ptr addrspace(1) %262, i64 4, !dbg !39
  %324 = getelementptr i8, ptr addrspace(1) %160, i64 4, !dbg !39
  %325 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %258, i1 %135, i32 0, i1 %135) #1, !dbg !50
  %326 = bitcast i32 %325 to float, !dbg !50
  %327 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %322, i1 %318, i32 0, i1 %318) #1, !dbg !50
  %328 = bitcast i32 %327 to float, !dbg !50
  %329 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %262, i1 %136, i32 0, i1 %136) #1, !dbg !50
  %330 = bitcast i32 %329 to float, !dbg !50
  %331 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %323, i1 %319, i32 0, i1 %319) #1, !dbg !50
  %332 = bitcast i32 %331 to float, !dbg !50
  %333 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %160, i1 %137, i32 0, i1 %137) #1, !dbg !50
  %334 = bitcast i32 %333 to float, !dbg !50
  %335 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %324, i1 %320, i32 0, i1 %320) #1, !dbg !50
  %336 = bitcast i32 %335 to float, !dbg !50
  %337 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %164, i1 %138, i32 0, i1 %138) #1, !dbg !50
  %338 = bitcast i32 %337 to float, !dbg !50
  %339 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %141, i1 %321, i32 0, i1 %321) #1, !dbg !50
  %340 = bitcast i32 %339 to float, !dbg !50
  %341 = fadd float %310, %326, !dbg !51
  %342 = fadd float %311, %328, !dbg !51
  %343 = fadd float %312, %330, !dbg !51
  %344 = fadd float %313, %332, !dbg !51
  %345 = fadd float %314, %334, !dbg !51
  %346 = fadd float %315, %336, !dbg !51
  %347 = fadd float %316, %338, !dbg !51
  %348 = fadd float %317, %340, !dbg !51
  %349 = extractelement <8 x i1> %176, i64 3, !dbg !52
  %350 = and i1 %55, %349, !dbg !52
  %351 = and i1 %154, %349, !dbg !52
  %352 = extractelement <8 x i1> %176, i64 2, !dbg !52
  %353 = and i1 %73, %352, !dbg !52
  %354 = and i1 %155, %352, !dbg !52
  %355 = extractelement <8 x i1> %176, i64 1, !dbg !52
  %356 = and i1 %88, %355, !dbg !52
  %357 = and i1 %156, %355, !dbg !52
  %358 = extractelement <8 x i1> %176, i64 0, !dbg !52
  %359 = and i1 %103, %358, !dbg !52
  %360 = and i1 %157, %358, !dbg !52
  %361 = add i32 %9, 525, !dbg !53
  %362 = add i32 %9, 526, !dbg !53
  %363 = add i32 %9, 527, !dbg !53
  %364 = add i32 %9, 528, !dbg !53
  %365 = getelementptr i8, ptr addrspace(1) %134, i64 52, !dbg !54
  %366 = getelementptr i8, ptr addrspace(1) %258, i64 52, !dbg !54
  %367 = getelementptr i8, ptr addrspace(1) %121, i64 52, !dbg !54
  %368 = getelementptr i8, ptr addrspace(1) %262, i64 52, !dbg !54
  %369 = sext i32 %361 to i64, !dbg !54
  %370 = getelementptr float, ptr addrspace(1) %0, i64 %369, !dbg !54
  %371 = sext i32 %362 to i64, !dbg !54
  %372 = getelementptr float, ptr addrspace(1) %0, i64 %371, !dbg !54
  %373 = sext i32 %363 to i64, !dbg !54
  %374 = getelementptr float, ptr addrspace(1) %0, i64 %373, !dbg !54
  %375 = sext i32 %364 to i64, !dbg !54
  %376 = getelementptr float, ptr addrspace(1) %0, i64 %375, !dbg !54
  %377 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %365, i1 %350, i32 0, i1 %350) #1, !dbg !55
  %378 = bitcast i32 %377 to float, !dbg !55
  %379 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %366, i1 %351, i32 0, i1 %351) #1, !dbg !55
  %380 = bitcast i32 %379 to float, !dbg !55
  %381 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %367, i1 %353, i32 0, i1 %353) #1, !dbg !55
  %382 = bitcast i32 %381 to float, !dbg !55
  %383 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %368, i1 %354, i32 0, i1 %354) #1, !dbg !55
  %384 = bitcast i32 %383 to float, !dbg !55
  %385 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %370, i1 %356, i32 0, i1 %356) #1, !dbg !55
  %386 = bitcast i32 %385 to float, !dbg !55
  %387 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %372, i1 %357, i32 0, i1 %357) #1, !dbg !55
  %388 = bitcast i32 %387 to float, !dbg !55
  %389 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %374, i1 %359, i32 0, i1 %359) #1, !dbg !55
  %390 = bitcast i32 %389 to float, !dbg !55
  %391 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %376, i1 %360, i32 0, i1 %360) #1, !dbg !55
  %392 = bitcast i32 %391 to float, !dbg !55
  %393 = fadd float %341, %378, !dbg !56
  %394 = fadd float %342, %380, !dbg !56
  %395 = fadd float %343, %382, !dbg !56
  %396 = fadd float %344, %384, !dbg !56
  %397 = fadd float %345, %386, !dbg !56
  %398 = fadd float %346, %388, !dbg !56
  %399 = fadd float %347, %390, !dbg !56
  %400 = fadd float %348, %392, !dbg !56
  %401 = and i1 %59, %349, !dbg !57
  %402 = and i1 %75, %352, !dbg !57
  %403 = and i1 %90, %355, !dbg !57
  %404 = and i1 %105, %358, !dbg !57
  %405 = getelementptr i8, ptr addrspace(1) %134, i64 56, !dbg !58
  %406 = getelementptr i8, ptr addrspace(1) %121, i64 56, !dbg !58
  %407 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %405, i1 %401, i32 0, i1 %401, i32 0, i1 %401) #1, !dbg !59
  %408 = extractvalue { i32, i32 } %407, 0, !dbg !59
  %409 = extractvalue { i32, i32 } %407, 1, !dbg !59
  %410 = bitcast i32 %408 to float, !dbg !59
  %411 = bitcast i32 %409 to float, !dbg !59
  %412 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %406, i1 %402, i32 0, i1 %402, i32 0, i1 %402) #1, !dbg !59
  %413 = extractvalue { i32, i32 } %412, 0, !dbg !59
  %414 = extractvalue { i32, i32 } %412, 1, !dbg !59
  %415 = bitcast i32 %413 to float, !dbg !59
  %416 = bitcast i32 %414 to float, !dbg !59
  %417 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %372, i1 %403, i32 0, i1 %403, i32 0, i1 %403) #1, !dbg !59
  %418 = extractvalue { i32, i32 } %417, 0, !dbg !59
  %419 = extractvalue { i32, i32 } %417, 1, !dbg !59
  %420 = bitcast i32 %418 to float, !dbg !59
  %421 = bitcast i32 %419 to float, !dbg !59
  %422 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %376, i1 %404, i32 0, i1 %404, i32 0, i1 %404) #1, !dbg !59
  %423 = extractvalue { i32, i32 } %422, 0, !dbg !59
  %424 = extractvalue { i32, i32 } %422, 1, !dbg !59
  %425 = bitcast i32 %423 to float, !dbg !59
  %426 = bitcast i32 %424 to float, !dbg !59
  %427 = fadd float %393, %410, !dbg !60
  %428 = fadd float %394, %411, !dbg !60
  %429 = fadd float %395, %415, !dbg !60
  %430 = fadd float %396, %416, !dbg !60
  %431 = fadd float %397, %420, !dbg !60
  %432 = fadd float %398, %421, !dbg !60
  %433 = fadd float %399, %425, !dbg !60
  %434 = fadd float %400, %426, !dbg !60
  %435 = and i1 %61, %349, !dbg !61
  %436 = and i1 %177, %349, !dbg !61
  %437 = and i1 %77, %352, !dbg !61
  %438 = and i1 %180, %352, !dbg !61
  %439 = and i1 %92, %355, !dbg !61
  %440 = and i1 %187, %355, !dbg !61
  %441 = and i1 %107, %358, !dbg !61
  %442 = and i1 %194, %358, !dbg !61
  %443 = add i32 %9, 529, !dbg !62
  %444 = add i32 %9, 530, !dbg !62
  %445 = getelementptr i8, ptr addrspace(1) %134, i64 60, !dbg !63
  %446 = getelementptr i8, ptr addrspace(1) %258, i64 60, !dbg !63
  %447 = getelementptr i8, ptr addrspace(1) %121, i64 60, !dbg !63
  %448 = getelementptr i8, ptr addrspace(1) %262, i64 60, !dbg !63
  %449 = sext i32 %443 to i64, !dbg !63
  %450 = getelementptr float, ptr addrspace(1) %0, i64 %449, !dbg !63
  %451 = sext i32 %444 to i64, !dbg !63
  %452 = getelementptr float, ptr addrspace(1) %0, i64 %451, !dbg !63
  %453 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %445, i1 %435, i32 0, i1 %435) #1, !dbg !64
  %454 = bitcast i32 %453 to float, !dbg !64
  %455 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %446, i1 %436, i32 0, i1 %436) #1, !dbg !64
  %456 = bitcast i32 %455 to float, !dbg !64
  %457 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %447, i1 %437, i32 0, i1 %437) #1, !dbg !64
  %458 = bitcast i32 %457 to float, !dbg !64
  %459 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %448, i1 %438, i32 0, i1 %438) #1, !dbg !64
  %460 = bitcast i32 %459 to float, !dbg !64
  %461 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %374, i1 %439, i32 0, i1 %439) #1, !dbg !64
  %462 = bitcast i32 %461 to float, !dbg !64
  %463 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %376, i1 %440, i32 0, i1 %440) #1, !dbg !64
  %464 = bitcast i32 %463 to float, !dbg !64
  %465 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %450, i1 %441, i32 0, i1 %441) #1, !dbg !64
  %466 = bitcast i32 %465 to float, !dbg !64
  %467 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %452, i1 %442, i32 0, i1 %442) #1, !dbg !64
  %468 = bitcast i32 %467 to float, !dbg !64
  %469 = fadd float %427, %454, !dbg !65
  %470 = fadd float %428, %456, !dbg !65
  %471 = fadd float %429, %458, !dbg !65
  %472 = fadd float %430, %460, !dbg !65
  %473 = fadd float %431, %462, !dbg !65
  %474 = fadd float %432, %464, !dbg !65
  %475 = fadd float %433, %466, !dbg !65
  %476 = fadd float %434, %468, !dbg !65
  %477 = icmp sgt i32 %52, 1, !dbg !40
  %478 = icmp sgt i32 %146, 1, !dbg !40
  %479 = icmp sgt i32 %70, 1, !dbg !40
  %480 = icmp sgt i32 %148, 1, !dbg !40
  %481 = icmp sgt i32 %85, 1, !dbg !40
  %482 = icmp sgt i32 %150, 1, !dbg !40
  %483 = icmp sgt i32 %100, 1, !dbg !40
  %484 = icmp sgt i32 %152, 1, !dbg !40
  %485 = select i1 %477, i32 %53, i32 0, !dbg !66
  %486 = select i1 %478, i32 %147, i32 0, !dbg !66
  %487 = select i1 %479, i32 %71, i32 0, !dbg !66
  %488 = select i1 %480, i32 %149, i32 0, !dbg !66
  %489 = select i1 %481, i32 %86, i32 0, !dbg !66
  %490 = select i1 %482, i32 %151, i32 0, !dbg !66
  %491 = select i1 %483, i32 %101, i32 0, !dbg !66
  %492 = select i1 %484, i32 %153, i32 0, !dbg !66
  %493 = icmp sgt i32 %49, 1, !dbg !67
  %494 = icmp sgt i32 %67, 1, !dbg !67
  %495 = icmp sgt i32 %82, 1, !dbg !67
  %496 = icmp sgt i32 %97, 1, !dbg !67
  %497 = select i1 %493, i32 %50, i32 0, !dbg !68
  %498 = select i1 %494, i32 %68, i32 0, !dbg !68
  %499 = select i1 %495, i32 %83, i32 0, !dbg !68
  %500 = select i1 %496, i32 %98, i32 0, !dbg !68
  %501 = add nsw i32 %52, 2, !dbg !69
  %502 = add nsw i32 %146, 2, !dbg !69
  %503 = add nsw i32 %70, 2, !dbg !69
  %504 = add nsw i32 %148, 2, !dbg !69
  %505 = add nsw i32 %85, 2, !dbg !69
  %506 = add nsw i32 %150, 2, !dbg !69
  %507 = add nsw i32 %100, 2, !dbg !69
  %508 = add nsw i32 %152, 2, !dbg !69
  %509 = icmp sgt i32 %52, 11, !dbg !70
  %510 = icmp sgt i32 %70, 11, !dbg !70
  %511 = icmp sgt i32 %85, 11, !dbg !70
  %512 = icmp sgt i32 %100, 11, !dbg !70
  %513 = select i1 %509, i32 14, i32 0, !dbg !71
  %514 = select i1 %510, i32 14, i32 0, !dbg !71
  %515 = select i1 %511, i32 14, i32 0, !dbg !71
  %516 = select i1 %512, i32 14, i32 0, !dbg !71
  %517 = icmp slt i32 %52, 12, !dbg !72
  %518 = icmp slt i32 %70, 12, !dbg !72
  %519 = icmp slt i32 %85, 12, !dbg !72
  %520 = icmp slt i32 %100, 12, !dbg !72
  %521 = select i1 %517, i32 %501, i32 0, !dbg !73
  %522 = select i1 %517, i32 %502, i32 0, !dbg !73
  %523 = select i1 %518, i32 %503, i32 0, !dbg !73
  %524 = select i1 %518, i32 %504, i32 0, !dbg !73
  %525 = select i1 %519, i32 %505, i32 0, !dbg !73
  %526 = select i1 %519, i32 %506, i32 0, !dbg !73
  %527 = select i1 %520, i32 %507, i32 0, !dbg !73
  %528 = select i1 %520, i32 %508, i32 0, !dbg !73
  %529 = add nsw i32 %513, %521, !dbg !74
  %530 = add nsw i32 %513, %522, !dbg !74
  %531 = add nsw i32 %514, %523, !dbg !74
  %532 = add nsw i32 %514, %524, !dbg !74
  %533 = add nsw i32 %515, %525, !dbg !74
  %534 = add nsw i32 %515, %526, !dbg !74
  %535 = add nsw i32 %516, %527, !dbg !74
  %536 = add nsw i32 %516, %528, !dbg !74
  %537 = add nsw i32 %49, 2, !dbg !75
  %538 = add nsw i32 %67, 2, !dbg !75
  %539 = add nsw i32 %82, 2, !dbg !75
  %540 = add nsw i32 %97, 2, !dbg !75
  %541 = icmp sgt i32 %49, 11, !dbg !76
  %542 = icmp sgt i32 %67, 11, !dbg !76
  %543 = icmp sgt i32 %82, 11, !dbg !76
  %544 = icmp sgt i32 %97, 11, !dbg !76
  %545 = select i1 %541, i32 14, i32 0, !dbg !77
  %546 = select i1 %542, i32 14, i32 0, !dbg !77
  %547 = select i1 %543, i32 14, i32 0, !dbg !77
  %548 = select i1 %544, i32 14, i32 0, !dbg !77
  %549 = icmp slt i32 %49, 12, !dbg !21
  %550 = icmp slt i32 %67, 12, !dbg !21
  %551 = icmp slt i32 %82, 12, !dbg !21
  %552 = icmp slt i32 %97, 12, !dbg !21
  %553 = select i1 %549, i32 %537, i32 0, !dbg !78
  %554 = select i1 %550, i32 %538, i32 0, !dbg !78
  %555 = select i1 %551, i32 %539, i32 0, !dbg !78
  %556 = select i1 %552, i32 %540, i32 0, !dbg !78
  %557 = add nsw i32 %545, %553, !dbg !79
  %558 = add nsw i32 %546, %554, !dbg !79
  %559 = add nsw i32 %547, %555, !dbg !79
  %560 = add nsw i32 %548, %556, !dbg !79
  %reass.add = sub nsw i32 %557, %497
  %reass.mul = mul nsw i32 %reass.add, %529
  %reass.add22 = sub nsw i32 %497, %557
  %reass.mul23 = mul nsw i32 %reass.add22, %485
  %561 = add nsw i32 %reass.mul23, %reass.mul, !dbg !80
  %reass.mul9 = mul nsw i32 %reass.add, %530
  %reass.mul25 = mul nsw i32 %reass.add22, %486
  %562 = add nsw i32 %reass.mul25, %reass.mul9, !dbg !80
  %reass.add10 = sub nsw i32 %558, %498
  %reass.mul11 = mul nsw i32 %reass.add10, %531
  %reass.add26 = sub nsw i32 %498, %558
  %reass.mul27 = mul nsw i32 %reass.add26, %487
  %563 = add nsw i32 %reass.mul27, %reass.mul11, !dbg !80
  %reass.mul13 = mul nsw i32 %reass.add10, %532
  %reass.mul29 = mul nsw i32 %reass.add26, %488
  %564 = add nsw i32 %reass.mul29, %reass.mul13, !dbg !80
  %reass.add14 = sub nsw i32 %559, %499
  %reass.mul15 = mul nsw i32 %reass.add14, %533
  %reass.add30 = sub nsw i32 %499, %559
  %reass.mul31 = mul nsw i32 %reass.add30, %489
  %565 = add nsw i32 %reass.mul31, %reass.mul15, !dbg !80
  %reass.mul17 = mul nsw i32 %reass.add14, %534
  %reass.mul33 = mul nsw i32 %reass.add30, %490
  %566 = add nsw i32 %reass.mul33, %reass.mul17, !dbg !80
  %reass.add18 = sub nsw i32 %560, %500
  %reass.mul19 = mul nsw i32 %reass.add18, %535
  %reass.add34 = sub nsw i32 %500, %560
  %reass.mul35 = mul nsw i32 %reass.add34, %491
  %567 = add nsw i32 %reass.mul35, %reass.mul19, !dbg !80
  %reass.mul21 = mul nsw i32 %reass.add18, %536
  %reass.mul37 = mul nsw i32 %reass.add34, %492
  %568 = add nsw i32 %reass.mul37, %reass.mul21, !dbg !80
  %569 = sitofp i32 %561 to float, !dbg !81
  %570 = sitofp i32 %562 to float, !dbg !81
  %571 = sitofp i32 %563 to float, !dbg !81
  %572 = sitofp i32 %564 to float, !dbg !81
  %573 = sitofp i32 %565 to float, !dbg !81
  %574 = sitofp i32 %566 to float, !dbg !81
  %575 = sitofp i32 %567 to float, !dbg !81
  %576 = sitofp i32 %568 to float, !dbg !81
  %577 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %469, float %569) #1, !dbg !81
  %578 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %470, float %570) #1, !dbg !81
  %579 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %471, float %571) #1, !dbg !81
  %580 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %472, float %572) #1, !dbg !81
  %581 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %473, float %573) #1, !dbg !81
  %582 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %474, float %574) #1, !dbg !81
  %583 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %475, float %575) #1, !dbg !81
  %584 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %476, float %576) #1, !dbg !81
  %585 = getelementptr float, ptr addrspace(1) %1, i64 %133, !dbg !82
  %586 = getelementptr float, ptr addrspace(1) %1, i64 %29, !dbg !82
  %587 = bitcast float %577 to i32, !dbg !83
  %588 = bitcast float %578 to i32, !dbg !83
  %589 = bitcast float %579 to i32, !dbg !83
  %590 = bitcast float %580 to i32, !dbg !83
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %587, i32 %588, i32 %589, i32 %590, ptr addrspace(1) %585, i1 true) #1, !dbg !83
  %591 = bitcast float %581 to i32, !dbg !83
  %592 = bitcast float %582 to i32, !dbg !83
  %593 = bitcast float %583 to i32, !dbg !83
  %594 = bitcast float %584 to i32, !dbg !83
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %591, i32 %592, i32 %593, i32 %594, ptr addrspace(1) %586, i1 true) #1, !dbg !83
  ret void, !dbg !84
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cw2syaztvj43ltyhgsqs3e5qjjkbwyqbmvttyg6ofzn4edslz4vh.py", directory: "inductor_cache/w2")
!4 = !{ptr @triton_poi_fused_avg_pool2d_31, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_avg_pool2d_31, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_avg_pool2d_31", linkageName: "triton_poi_fused_avg_pool2d_31", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 38, column: 39, scope: !7)
!16 = !DILocation(line: 38, column: 31, scope: !7)
!17 = !DILocation(line: 44, column: 31, scope: !7)
!18 = !DILocation(line: 51, column: 39, scope: !7)
!19 = !DILocation(line: 51, column: 31, scope: !7)
!20 = !DILocation(line: 25, column: 19, scope: !7)
!21 = !DILocation(line: 79, column: 256, scope: !7)
!22 = !DILocation(line: 27, column: 18, scope: !7)
!23 = !DILocation(line: 29, column: 19, scope: !7)
!24 = !DILocation(line: 49, column: 20, scope: !7)
!25 = !DILocation(line: 33, column: 18, scope: !7)
!26 = !DILocation(line: 34, column: 19, scope: !7)
!27 = !DILocation(line: 37, column: 19, scope: !7)
!28 = !DILocation(line: 38, column: 44, scope: !7)
!29 = !DILocation(line: 40, column: 21, scope: !7)
!30 = !DILocation(line: 43, column: 19, scope: !7)
!31 = !DILocation(line: 50, column: 19, scope: !7)
!32 = !DILocation(line: 57, column: 20, scope: !7)
!33 = !DILocation(line: 58, column: 38, scope: !7)
!34 = !DILocation(line: 58, column: 31, scope: !7)
!35 = !DILocation(line: 60, column: 20, scope: !7)
!36 = !DILocation(line: 61, column: 31, scope: !7)
!37 = !DILocation(line: 63, column: 20, scope: !7)
!38 = !DILocation(line: 64, column: 35, scope: !7)
!39 = !DILocation(line: 64, column: 31, scope: !7)
!40 = !DILocation(line: 79, column: 72, scope: !7)
!41 = !DILocation(line: 69, column: 20, scope: !7)
!42 = !DILocation(line: 44, column: 44, scope: !7)
!43 = !DILocation(line: 45, column: 20, scope: !7)
!44 = !DILocation(line: 51, column: 44, scope: !7)
!45 = !DILocation(line: 52, column: 20, scope: !7)
!46 = !DILocation(line: 58, column: 43, scope: !7)
!47 = !DILocation(line: 59, column: 20, scope: !7)
!48 = !DILocation(line: 61, column: 36, scope: !7)
!49 = !DILocation(line: 62, column: 20, scope: !7)
!50 = !DILocation(line: 64, column: 40, scope: !7)
!51 = !DILocation(line: 65, column: 20, scope: !7)
!52 = !DILocation(line: 70, column: 20, scope: !7)
!53 = !DILocation(line: 71, column: 36, scope: !7)
!54 = !DILocation(line: 71, column: 31, scope: !7)
!55 = !DILocation(line: 71, column: 41, scope: !7)
!56 = !DILocation(line: 72, column: 20, scope: !7)
!57 = !DILocation(line: 73, column: 20, scope: !7)
!58 = !DILocation(line: 74, column: 31, scope: !7)
!59 = !DILocation(line: 74, column: 41, scope: !7)
!60 = !DILocation(line: 75, column: 20, scope: !7)
!61 = !DILocation(line: 76, column: 20, scope: !7)
!62 = !DILocation(line: 77, column: 36, scope: !7)
!63 = !DILocation(line: 77, column: 31, scope: !7)
!64 = !DILocation(line: 77, column: 41, scope: !7)
!65 = !DILocation(line: 78, column: 20, scope: !7)
!66 = !DILocation(line: 79, column: 57, scope: !7)
!67 = !DILocation(line: 79, column: 137, scope: !7)
!68 = !DILocation(line: 79, column: 122, scope: !7)
!69 = !DILocation(line: 79, column: 166, scope: !7)
!70 = !DILocation(line: 79, column: 162, scope: !7)
!71 = !DILocation(line: 79, column: 153, scope: !7)
!72 = !DILocation(line: 79, column: 197, scope: !7)
!73 = !DILocation(line: 79, column: 185, scope: !7)
!74 = !DILocation(line: 79, column: 173, scope: !7)
!75 = !DILocation(line: 79, column: 225, scope: !7)
!76 = !DILocation(line: 79, column: 221, scope: !7)
!77 = !DILocation(line: 79, column: 212, scope: !7)
!78 = !DILocation(line: 79, column: 244, scope: !7)
!79 = !DILocation(line: 79, column: 232, scope: !7)
!80 = !DILocation(line: 79, column: 398, scope: !7)
!81 = !DILocation(line: 80, column: 20, scope: !7)
!82 = !DILocation(line: 81, column: 25, scope: !7)
!83 = !DILocation(line: 81, column: 37, scope: !7)
!84 = !DILocation(line: 81, column: 4, scope: !7)
