; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_10(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, i32 %13) local_unnamed_addr !dbg !7 {
  %15 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %16 = shl i32 %15, 9, !dbg !11
  %17 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %18 = shl i32 %17, 2, !dbg !12
  %19 = and i32 %18, 508, !dbg !12
  %20 = or disjoint i32 %16, %19, !dbg !13
  %21 = srem i32 %20, 64, !dbg !14
  %22 = sext i32 %20 to i64, !dbg !15
  %23 = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !15
  %24 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %23, i1 true) #3, !dbg !16
  %25 = sext i32 %21 to i64, !dbg !17
  %26 = getelementptr float, ptr addrspace(1) %3, i64 %25, !dbg !17
  %27 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %26, i1 true) #3, !dbg !18
  %28 = getelementptr float, ptr addrspace(1) %1, i64 %22, !dbg !19
  %29 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %28, i1 true) #3, !dbg !20
  %30 = getelementptr float, ptr addrspace(1) %4, i64 %25, !dbg !21
  %31 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %30, i1 true) #3, !dbg !22
  %32 = getelementptr float, ptr addrspace(1) %5, i64 %25, !dbg !23
  %33 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %32, i1 true) #3, !dbg !24
  %34 = getelementptr float, ptr addrspace(1) %6, i64 %25, !dbg !25
  %35 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %34, i1 true) #3, !dbg !26
  %36 = extractvalue { i32, i32, i32, i32 } %35, 0, !dbg !26
  %37 = extractvalue { i32, i32, i32, i32 } %35, 1, !dbg !26
  %38 = extractvalue { i32, i32, i32, i32 } %35, 2, !dbg !26
  %39 = extractvalue { i32, i32, i32, i32 } %35, 3, !dbg !26
  %40 = bitcast i32 %36 to float, !dbg !26
  %41 = bitcast i32 %37 to float, !dbg !26
  %42 = bitcast i32 %38 to float, !dbg !26
  %43 = bitcast i32 %39 to float, !dbg !26
  %44 = getelementptr float, ptr addrspace(1) %7, i64 %25, !dbg !27
  %45 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %44, i1 true) #3, !dbg !28
  %46 = getelementptr float, ptr addrspace(1) %8, i64 %25, !dbg !29
  %47 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %46, i1 true) #3, !dbg !30
  %48 = getelementptr float, ptr addrspace(1) %9, i64 %25, !dbg !31
  %49 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %48, i1 true) #3, !dbg !32
  %50 = getelementptr float, ptr addrspace(1) %10, i64 %25, !dbg !33
  %51 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %50, i1 true) #3, !dbg !34
  %52 = extractvalue { i32, i32, i32, i32 } %51, 0, !dbg !34
  %53 = extractvalue { i32, i32, i32, i32 } %51, 1, !dbg !34
  %54 = extractvalue { i32, i32, i32, i32 } %51, 2, !dbg !34
  %55 = extractvalue { i32, i32, i32, i32 } %51, 3, !dbg !34
  %56 = bitcast i32 %52 to float, !dbg !34
  %57 = bitcast i32 %53 to float, !dbg !34
  %58 = bitcast i32 %54 to float, !dbg !34
  %59 = bitcast i32 %55 to float, !dbg !34
  %60 = getelementptr float, ptr addrspace(1) %11, i64 %25, !dbg !35
  %61 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %60, i1 true) #3, !dbg !36
  %62 = getelementptr float, ptr addrspace(1) %12, i64 %25, !dbg !37
  %63 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %62, i1 true) #3, !dbg !38
  %64 = fadd float %40, 0x3EE4F8B580000000, !dbg !39
  %65 = fadd float %41, 0x3EE4F8B580000000, !dbg !39
  %66 = fadd float %42, 0x3EE4F8B580000000, !dbg !39
  %67 = fadd float %43, 0x3EE4F8B580000000, !dbg !39
  %68 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not.i = icmp eq i32 %68, 0, !dbg !40
  %69 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !40
  %.not1.i = icmp eq i32 %69, 0, !dbg !40
  br i1 %.not.i, label %75, label %70, !dbg !40

70:                                               ; preds = %14
  br i1 %.not1.i, label %73, label %71, !dbg !40

71:                                               ; preds = %70
  %72 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %64) #3, !dbg !40
  br label %__nv_sqrtf.exit, !dbg !40

73:                                               ; preds = %70
  %74 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %64) #3, !dbg !40
  br label %__nv_sqrtf.exit, !dbg !40

75:                                               ; preds = %14
  br i1 %.not1.i, label %78, label %76, !dbg !40

76:                                               ; preds = %75
  %77 = tail call float @llvm.nvvm.sqrt.rn.f(float %64) #3, !dbg !40
  br label %__nv_sqrtf.exit, !dbg !40

78:                                               ; preds = %75
  %79 = tail call float @llvm.nvvm.sqrt.approx.f(float %64) #3, !dbg !40
  br label %__nv_sqrtf.exit, !dbg !40

__nv_sqrtf.exit:                                  ; preds = %71, %73, %76, %78
  %.0.i = phi float [ %72, %71 ], [ %74, %73 ], [ %77, %76 ], [ %79, %78 ], !dbg !40
  %80 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not.i1 = icmp eq i32 %80, 0, !dbg !40
  %81 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !40
  %.not1.i4 = icmp eq i32 %81, 0, !dbg !40
  br i1 %.not.i1, label %87, label %82, !dbg !40

82:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %85, label %83, !dbg !40

83:                                               ; preds = %82
  %84 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %65) #3, !dbg !40
  br label %__nv_sqrtf.exit5, !dbg !40

85:                                               ; preds = %82
  %86 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %65) #3, !dbg !40
  br label %__nv_sqrtf.exit5, !dbg !40

87:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %90, label %88, !dbg !40

88:                                               ; preds = %87
  %89 = tail call float @llvm.nvvm.sqrt.rn.f(float %65) #3, !dbg !40
  br label %__nv_sqrtf.exit5, !dbg !40

90:                                               ; preds = %87
  %91 = tail call float @llvm.nvvm.sqrt.approx.f(float %65) #3, !dbg !40
  br label %__nv_sqrtf.exit5, !dbg !40

__nv_sqrtf.exit5:                                 ; preds = %83, %85, %88, %90
  %.0.i3 = phi float [ %84, %83 ], [ %86, %85 ], [ %89, %88 ], [ %91, %90 ], !dbg !40
  %92 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not.i6 = icmp eq i32 %92, 0, !dbg !40
  %93 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !40
  %.not1.i9 = icmp eq i32 %93, 0, !dbg !40
  br i1 %.not.i6, label %99, label %94, !dbg !40

94:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %97, label %95, !dbg !40

95:                                               ; preds = %94
  %96 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %66) #3, !dbg !40
  br label %__nv_sqrtf.exit10, !dbg !40

97:                                               ; preds = %94
  %98 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %66) #3, !dbg !40
  br label %__nv_sqrtf.exit10, !dbg !40

99:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %102, label %100, !dbg !40

100:                                              ; preds = %99
  %101 = tail call float @llvm.nvvm.sqrt.rn.f(float %66) #3, !dbg !40
  br label %__nv_sqrtf.exit10, !dbg !40

102:                                              ; preds = %99
  %103 = tail call float @llvm.nvvm.sqrt.approx.f(float %66) #3, !dbg !40
  br label %__nv_sqrtf.exit10, !dbg !40

__nv_sqrtf.exit10:                                ; preds = %95, %97, %100, %102
  %.0.i8 = phi float [ %96, %95 ], [ %98, %97 ], [ %101, %100 ], [ %103, %102 ], !dbg !40
  %104 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !40
  %.not.i11 = icmp eq i32 %104, 0, !dbg !40
  %105 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !40
  %.not1.i14 = icmp eq i32 %105, 0, !dbg !40
  br i1 %.not.i11, label %111, label %106, !dbg !40

106:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %109, label %107, !dbg !40

107:                                              ; preds = %106
  %108 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %67) #3, !dbg !40
  br label %__nv_sqrtf.exit15, !dbg !40

109:                                              ; preds = %106
  %110 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %67) #3, !dbg !40
  br label %__nv_sqrtf.exit15, !dbg !40

111:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %114, label %112, !dbg !40

112:                                              ; preds = %111
  %113 = tail call float @llvm.nvvm.sqrt.rn.f(float %67) #3, !dbg !40
  br label %__nv_sqrtf.exit15, !dbg !40

114:                                              ; preds = %111
  %115 = tail call float @llvm.nvvm.sqrt.approx.f(float %67) #3, !dbg !40
  br label %__nv_sqrtf.exit15, !dbg !40

__nv_sqrtf.exit15:                                ; preds = %107, %109, %112, %114
  %.0.i13 = phi float [ %108, %107 ], [ %110, %109 ], [ %113, %112 ], [ %115, %114 ], !dbg !40
  %116 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !41
  %117 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !41
  %118 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !41
  %119 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !41
  %120 = fadd float %56, 0x3EE4F8B580000000, !dbg !42
  %121 = fadd float %57, 0x3EE4F8B580000000, !dbg !42
  %122 = fadd float %58, 0x3EE4F8B580000000, !dbg !42
  %123 = fadd float %59, 0x3EE4F8B580000000, !dbg !42
  %124 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !43
  %.not.i16 = icmp eq i32 %124, 0, !dbg !43
  %125 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !43
  %.not1.i19 = icmp eq i32 %125, 0, !dbg !43
  br i1 %.not.i16, label %131, label %126, !dbg !43

126:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %129, label %127, !dbg !43

127:                                              ; preds = %126
  %128 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %120) #3, !dbg !43
  br label %__nv_sqrtf.exit20, !dbg !43

129:                                              ; preds = %126
  %130 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %120) #3, !dbg !43
  br label %__nv_sqrtf.exit20, !dbg !43

131:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %134, label %132, !dbg !43

132:                                              ; preds = %131
  %133 = tail call float @llvm.nvvm.sqrt.rn.f(float %120) #3, !dbg !43
  br label %__nv_sqrtf.exit20, !dbg !43

134:                                              ; preds = %131
  %135 = tail call float @llvm.nvvm.sqrt.approx.f(float %120) #3, !dbg !43
  br label %__nv_sqrtf.exit20, !dbg !43

__nv_sqrtf.exit20:                                ; preds = %127, %129, %132, %134
  %.0.i18 = phi float [ %128, %127 ], [ %130, %129 ], [ %133, %132 ], [ %135, %134 ], !dbg !43
  %136 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !43
  %.not.i21 = icmp eq i32 %136, 0, !dbg !43
  %137 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !43
  %.not1.i24 = icmp eq i32 %137, 0, !dbg !43
  br i1 %.not.i21, label %143, label %138, !dbg !43

138:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %141, label %139, !dbg !43

139:                                              ; preds = %138
  %140 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %121) #3, !dbg !43
  br label %__nv_sqrtf.exit25, !dbg !43

141:                                              ; preds = %138
  %142 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %121) #3, !dbg !43
  br label %__nv_sqrtf.exit25, !dbg !43

143:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %146, label %144, !dbg !43

144:                                              ; preds = %143
  %145 = tail call float @llvm.nvvm.sqrt.rn.f(float %121) #3, !dbg !43
  br label %__nv_sqrtf.exit25, !dbg !43

146:                                              ; preds = %143
  %147 = tail call float @llvm.nvvm.sqrt.approx.f(float %121) #3, !dbg !43
  br label %__nv_sqrtf.exit25, !dbg !43

__nv_sqrtf.exit25:                                ; preds = %139, %141, %144, %146
  %.0.i23 = phi float [ %140, %139 ], [ %142, %141 ], [ %145, %144 ], [ %147, %146 ], !dbg !43
  %148 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !43
  %.not.i26 = icmp eq i32 %148, 0, !dbg !43
  %149 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !43
  %.not1.i29 = icmp eq i32 %149, 0, !dbg !43
  br i1 %.not.i26, label %155, label %150, !dbg !43

150:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %153, label %151, !dbg !43

151:                                              ; preds = %150
  %152 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %122) #3, !dbg !43
  br label %__nv_sqrtf.exit30, !dbg !43

153:                                              ; preds = %150
  %154 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %122) #3, !dbg !43
  br label %__nv_sqrtf.exit30, !dbg !43

155:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %158, label %156, !dbg !43

156:                                              ; preds = %155
  %157 = tail call float @llvm.nvvm.sqrt.rn.f(float %122) #3, !dbg !43
  br label %__nv_sqrtf.exit30, !dbg !43

158:                                              ; preds = %155
  %159 = tail call float @llvm.nvvm.sqrt.approx.f(float %122) #3, !dbg !43
  br label %__nv_sqrtf.exit30, !dbg !43

__nv_sqrtf.exit30:                                ; preds = %151, %153, %156, %158
  %.0.i28 = phi float [ %152, %151 ], [ %154, %153 ], [ %157, %156 ], [ %159, %158 ], !dbg !43
  %160 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !43
  %.not.i31 = icmp eq i32 %160, 0, !dbg !43
  %161 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !43
  %.not1.i34 = icmp eq i32 %161, 0, !dbg !43
  br i1 %.not.i31, label %167, label %162, !dbg !43

162:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %165, label %163, !dbg !43

163:                                              ; preds = %162
  %164 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %123) #3, !dbg !43
  br label %__nv_sqrtf.exit35, !dbg !43

165:                                              ; preds = %162
  %166 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %123) #3, !dbg !43
  br label %__nv_sqrtf.exit35, !dbg !43

167:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %170, label %168, !dbg !43

168:                                              ; preds = %167
  %169 = tail call float @llvm.nvvm.sqrt.rn.f(float %123) #3, !dbg !43
  br label %__nv_sqrtf.exit35, !dbg !43

170:                                              ; preds = %167
  %171 = tail call float @llvm.nvvm.sqrt.approx.f(float %123) #3, !dbg !43
  br label %__nv_sqrtf.exit35, !dbg !43

__nv_sqrtf.exit35:                                ; preds = %163, %165, %168, %170
  %.0.i33 = phi float [ %164, %163 ], [ %166, %165 ], [ %169, %168 ], [ %171, %170 ], !dbg !43
  %172 = extractvalue { i32, i32, i32, i32 } %24, 3, !dbg !16
  %173 = bitcast i32 %172 to float, !dbg !16
  %174 = extractvalue { i32, i32, i32, i32 } %27, 3, !dbg !18
  %175 = bitcast i32 %174 to float, !dbg !18
  %176 = fadd float %173, %175, !dbg !44
  %177 = extractvalue { i32, i32, i32, i32 } %49, 3, !dbg !32
  %178 = bitcast i32 %177 to float, !dbg !32
  %179 = fsub float %176, %178, !dbg !45
  %180 = extractvalue { i32, i32, i32, i32 } %24, 2, !dbg !16
  %181 = bitcast i32 %180 to float, !dbg !16
  %182 = extractvalue { i32, i32, i32, i32 } %27, 2, !dbg !18
  %183 = bitcast i32 %182 to float, !dbg !18
  %184 = fadd float %181, %183, !dbg !44
  %185 = extractvalue { i32, i32, i32, i32 } %49, 2, !dbg !32
  %186 = bitcast i32 %185 to float, !dbg !32
  %187 = fsub float %184, %186, !dbg !45
  %188 = extractvalue { i32, i32, i32, i32 } %24, 1, !dbg !16
  %189 = bitcast i32 %188 to float, !dbg !16
  %190 = extractvalue { i32, i32, i32, i32 } %27, 1, !dbg !18
  %191 = bitcast i32 %190 to float, !dbg !18
  %192 = fadd float %189, %191, !dbg !44
  %193 = extractvalue { i32, i32, i32, i32 } %49, 1, !dbg !32
  %194 = bitcast i32 %193 to float, !dbg !32
  %195 = fsub float %192, %194, !dbg !45
  %196 = extractvalue { i32, i32, i32, i32 } %24, 0, !dbg !16
  %197 = bitcast i32 %196 to float, !dbg !16
  %198 = extractvalue { i32, i32, i32, i32 } %27, 0, !dbg !18
  %199 = bitcast i32 %198 to float, !dbg !18
  %200 = fadd float %197, %199, !dbg !44
  %201 = extractvalue { i32, i32, i32, i32 } %49, 0, !dbg !32
  %202 = bitcast i32 %201 to float, !dbg !32
  %203 = fsub float %200, %202, !dbg !45
  %204 = extractvalue { i32, i32, i32, i32 } %29, 3, !dbg !20
  %205 = bitcast i32 %204 to float, !dbg !20
  %206 = extractvalue { i32, i32, i32, i32 } %31, 3, !dbg !22
  %207 = bitcast i32 %206 to float, !dbg !22
  %208 = fadd float %205, %207, !dbg !46
  %209 = extractvalue { i32, i32, i32, i32 } %33, 3, !dbg !24
  %210 = bitcast i32 %209 to float, !dbg !24
  %211 = fsub float %208, %210, !dbg !47
  %212 = fmul float %211, %119, !dbg !48
  %213 = extractvalue { i32, i32, i32, i32 } %45, 3, !dbg !28
  %214 = bitcast i32 %213 to float, !dbg !28
  %215 = fmul float %212, %214, !dbg !49
  %216 = extractvalue { i32, i32, i32, i32 } %47, 3, !dbg !30
  %217 = bitcast i32 %216 to float, !dbg !30
  %218 = fadd float %215, %217, !dbg !50
  %219 = extractvalue { i32, i32, i32, i32 } %29, 2, !dbg !20
  %220 = bitcast i32 %219 to float, !dbg !20
  %221 = extractvalue { i32, i32, i32, i32 } %31, 2, !dbg !22
  %222 = bitcast i32 %221 to float, !dbg !22
  %223 = fadd float %220, %222, !dbg !46
  %224 = extractvalue { i32, i32, i32, i32 } %33, 2, !dbg !24
  %225 = bitcast i32 %224 to float, !dbg !24
  %226 = fsub float %223, %225, !dbg !47
  %227 = fmul float %226, %118, !dbg !48
  %228 = extractvalue { i32, i32, i32, i32 } %45, 2, !dbg !28
  %229 = bitcast i32 %228 to float, !dbg !28
  %230 = fmul float %227, %229, !dbg !49
  %231 = extractvalue { i32, i32, i32, i32 } %47, 2, !dbg !30
  %232 = bitcast i32 %231 to float, !dbg !30
  %233 = fadd float %230, %232, !dbg !50
  %234 = extractvalue { i32, i32, i32, i32 } %29, 1, !dbg !20
  %235 = bitcast i32 %234 to float, !dbg !20
  %236 = extractvalue { i32, i32, i32, i32 } %31, 1, !dbg !22
  %237 = bitcast i32 %236 to float, !dbg !22
  %238 = fadd float %235, %237, !dbg !46
  %239 = extractvalue { i32, i32, i32, i32 } %33, 1, !dbg !24
  %240 = bitcast i32 %239 to float, !dbg !24
  %241 = fsub float %238, %240, !dbg !47
  %242 = fmul float %241, %117, !dbg !48
  %243 = extractvalue { i32, i32, i32, i32 } %45, 1, !dbg !28
  %244 = bitcast i32 %243 to float, !dbg !28
  %245 = fmul float %242, %244, !dbg !49
  %246 = extractvalue { i32, i32, i32, i32 } %47, 1, !dbg !30
  %247 = bitcast i32 %246 to float, !dbg !30
  %248 = fadd float %245, %247, !dbg !50
  %249 = extractvalue { i32, i32, i32, i32 } %29, 0, !dbg !20
  %250 = bitcast i32 %249 to float, !dbg !20
  %251 = extractvalue { i32, i32, i32, i32 } %31, 0, !dbg !22
  %252 = bitcast i32 %251 to float, !dbg !22
  %253 = fadd float %250, %252, !dbg !46
  %254 = extractvalue { i32, i32, i32, i32 } %33, 0, !dbg !24
  %255 = bitcast i32 %254 to float, !dbg !24
  %256 = fsub float %253, %255, !dbg !47
  %257 = fmul float %256, %116, !dbg !48
  %258 = extractvalue { i32, i32, i32, i32 } %45, 0, !dbg !28
  %259 = bitcast i32 %258 to float, !dbg !28
  %260 = fmul float %257, %259, !dbg !49
  %261 = extractvalue { i32, i32, i32, i32 } %47, 0, !dbg !30
  %262 = bitcast i32 %261 to float, !dbg !30
  %263 = fadd float %260, %262, !dbg !50
  %264 = extractvalue { i32, i32, i32, i32 } %63, 3, !dbg !38
  %265 = bitcast i32 %264 to float, !dbg !38
  %266 = extractvalue { i32, i32, i32, i32 } %63, 2, !dbg !38
  %267 = bitcast i32 %266 to float, !dbg !38
  %268 = extractvalue { i32, i32, i32, i32 } %63, 1, !dbg !38
  %269 = bitcast i32 %268 to float, !dbg !38
  %270 = extractvalue { i32, i32, i32, i32 } %63, 0, !dbg !38
  %271 = bitcast i32 %270 to float, !dbg !38
  %272 = extractvalue { i32, i32, i32, i32 } %61, 3, !dbg !36
  %273 = bitcast i32 %272 to float, !dbg !36
  %274 = extractvalue { i32, i32, i32, i32 } %61, 2, !dbg !36
  %275 = bitcast i32 %274 to float, !dbg !36
  %276 = extractvalue { i32, i32, i32, i32 } %61, 1, !dbg !36
  %277 = bitcast i32 %276 to float, !dbg !36
  %278 = extractvalue { i32, i32, i32, i32 } %61, 0, !dbg !36
  %279 = bitcast i32 %278 to float, !dbg !36
  %280 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !51
  %281 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !51
  %282 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !51
  %283 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !51
  %284 = fmul float %203, %280, !dbg !52
  %285 = fmul float %195, %281, !dbg !52
  %286 = fmul float %187, %282, !dbg !52
  %287 = fmul float %179, %283, !dbg !52
  %288 = fmul float %284, %279, !dbg !53
  %289 = fmul float %285, %277, !dbg !53
  %290 = fmul float %286, %275, !dbg !53
  %291 = fmul float %287, %273, !dbg !53
  %292 = fadd float %288, %271, !dbg !54
  %293 = fadd float %289, %269, !dbg !54
  %294 = fadd float %290, %267, !dbg !54
  %295 = fadd float %291, %265, !dbg !54
  %296 = fcmp olt float %292, 0.000000e+00, !dbg !55
  %297 = fcmp olt float %293, 0.000000e+00, !dbg !55
  %298 = fcmp olt float %294, 0.000000e+00, !dbg !55
  %299 = fcmp olt float %295, 0.000000e+00, !dbg !55
  %300 = select i1 %296, float 0.000000e+00, float %292, !dbg !59
  %301 = select i1 %297, float 0.000000e+00, float %293, !dbg !59
  %302 = select i1 %298, float 0.000000e+00, float %294, !dbg !59
  %303 = select i1 %299, float 0.000000e+00, float %295, !dbg !59
  %304 = fadd float %263, %300, !dbg !60
  %305 = fadd float %248, %301, !dbg !60
  %306 = fadd float %233, %302, !dbg !60
  %307 = fadd float %218, %303, !dbg !60
  %308 = fcmp olt float %304, 0.000000e+00, !dbg !61
  %309 = fcmp olt float %305, 0.000000e+00, !dbg !61
  %310 = fcmp olt float %306, 0.000000e+00, !dbg !61
  %311 = fcmp olt float %307, 0.000000e+00, !dbg !61
  %312 = select i1 %308, float 0.000000e+00, float %304, !dbg !63
  %313 = select i1 %309, float 0.000000e+00, float %305, !dbg !63
  %314 = select i1 %310, float 0.000000e+00, float %306, !dbg !63
  %315 = select i1 %311, float 0.000000e+00, float %307, !dbg !63
  %316 = bitcast float %200 to i32, !dbg !64
  %317 = bitcast float %192 to i32, !dbg !64
  %318 = bitcast float %184 to i32, !dbg !64
  %319 = bitcast float %176 to i32, !dbg !64
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %316, i32 %317, i32 %318, i32 %319, ptr addrspace(1) %23, i1 true) #3, !dbg !64
  %320 = bitcast float %253 to i32, !dbg !65
  %321 = bitcast float %238 to i32, !dbg !65
  %322 = bitcast float %223 to i32, !dbg !65
  %323 = bitcast float %208 to i32, !dbg !65
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %320, i32 %321, i32 %322, i32 %323, ptr addrspace(1) %28, i1 true) #3, !dbg !65
  %324 = getelementptr float, ptr addrspace(1) %2, i64 %22, !dbg !66
  %325 = bitcast float %312 to i32, !dbg !67
  %326 = bitcast float %313 to i32, !dbg !67
  %327 = bitcast float %314 to i32, !dbg !67
  %328 = bitcast float %315 to i32, !dbg !67
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %325, i32 %326, i32 %327, i32 %328, ptr addrspace(1) %324, i1 true) #3, !dbg !67
  ret void, !dbg !68
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cffllbc5gadyk5cxhbdgmyo3dat3xas35kbtdeudvpj3kcxc74vu.py", directory: "inductor_cache/ff")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_10, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_10, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_10", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_relu_10", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 26, column: 39, scope: !7)
!17 = !DILocation(line: 27, column: 30, scope: !7)
!18 = !DILocation(line: 27, column: 35, scope: !7)
!19 = !DILocation(line: 28, column: 34, scope: !7)
!20 = !DILocation(line: 28, column: 39, scope: !7)
!21 = !DILocation(line: 29, column: 30, scope: !7)
!22 = !DILocation(line: 29, column: 35, scope: !7)
!23 = !DILocation(line: 30, column: 30, scope: !7)
!24 = !DILocation(line: 30, column: 35, scope: !7)
!25 = !DILocation(line: 31, column: 30, scope: !7)
!26 = !DILocation(line: 31, column: 35, scope: !7)
!27 = !DILocation(line: 32, column: 31, scope: !7)
!28 = !DILocation(line: 32, column: 36, scope: !7)
!29 = !DILocation(line: 33, column: 31, scope: !7)
!30 = !DILocation(line: 33, column: 36, scope: !7)
!31 = !DILocation(line: 34, column: 31, scope: !7)
!32 = !DILocation(line: 34, column: 36, scope: !7)
!33 = !DILocation(line: 35, column: 31, scope: !7)
!34 = !DILocation(line: 35, column: 36, scope: !7)
!35 = !DILocation(line: 36, column: 31, scope: !7)
!36 = !DILocation(line: 36, column: 36, scope: !7)
!37 = !DILocation(line: 37, column: 31, scope: !7)
!38 = !DILocation(line: 37, column: 36, scope: !7)
!39 = !DILocation(line: 42, column: 19, scope: !7)
!40 = !DILocation(line: 43, column: 27, scope: !7)
!41 = !DILocation(line: 45, column: 20, scope: !7)
!42 = !DILocation(line: 52, column: 20, scope: !7)
!43 = !DILocation(line: 53, column: 27, scope: !7)
!44 = !DILocation(line: 38, column: 18, scope: !7)
!45 = !DILocation(line: 51, column: 19, scope: !7)
!46 = !DILocation(line: 39, column: 18, scope: !7)
!47 = !DILocation(line: 40, column: 18, scope: !7)
!48 = !DILocation(line: 48, column: 19, scope: !7)
!49 = !DILocation(line: 49, column: 20, scope: !7)
!50 = !DILocation(line: 50, column: 20, scope: !7)
!51 = !DILocation(line: 54, column: 20, scope: !7)
!52 = !DILocation(line: 56, column: 20, scope: !7)
!53 = !DILocation(line: 57, column: 20, scope: !7)
!54 = !DILocation(line: 58, column: 20, scope: !7)
!55 = !DILocation(line: 118, column: 15, scope: !56, inlinedAt: !58)
!56 = distinct !DILexicalBlockFile(scope: !7, file: !57, discriminator: 0)
!57 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!58 = !DILocation(line: 60, column: 42, scope: !7)
!59 = !DILocation(line: 121, column: 29, scope: !56, inlinedAt: !58)
!60 = !DILocation(line: 61, column: 20, scope: !7)
!61 = !DILocation(line: 118, column: 15, scope: !56, inlinedAt: !62)
!62 = !DILocation(line: 62, column: 42, scope: !7)
!63 = !DILocation(line: 121, column: 29, scope: !56, inlinedAt: !62)
!64 = !DILocation(line: 63, column: 39, scope: !7)
!65 = !DILocation(line: 64, column: 39, scope: !7)
!66 = !DILocation(line: 65, column: 28, scope: !7)
!67 = !DILocation(line: 65, column: 40, scope: !7)
!68 = !DILocation(line: 65, column: 4, scope: !7)
