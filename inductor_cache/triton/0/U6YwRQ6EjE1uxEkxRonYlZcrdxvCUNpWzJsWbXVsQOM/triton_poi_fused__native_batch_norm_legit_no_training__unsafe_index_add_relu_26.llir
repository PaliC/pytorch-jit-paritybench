; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_relu_26(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, ptr addrspace(1) %16, ptr addrspace(1) %17, i32 %18) local_unnamed_addr !dbg !7 {
  %20 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %21 = shl i32 %20, 7, !dbg !11
  %22 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %23 = and i32 %22, 127, !dbg !12
  %24 = or disjoint i32 %21, %23, !dbg !13
  %25 = sdiv i32 %24, 16, !dbg !14
  %26 = srem i32 %25, 128, !dbg !15
  %.frozen = freeze i32 %24, !dbg !16
  %27 = sdiv i32 %.frozen, 4, !dbg !16
  %28 = srem i32 %27, 4, !dbg !17
  %29 = mul i32 %27, 4, !dbg !18
  %.decomposed = sub i32 %.frozen, %29, !dbg !18
  %30 = sext i32 %24 to i64, !dbg !19
  %31 = getelementptr float, ptr addrspace(1) %1, i64 %30, !dbg !19
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %31, i1 true) #3, !dbg !20
  %33 = sext i32 %26 to i64, !dbg !21
  %34 = getelementptr float, ptr addrspace(1) %2, i64 %33, !dbg !21
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 true) #3, !dbg !22
  %36 = getelementptr float, ptr addrspace(1) %3, i64 %33, !dbg !23
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %36, i1 true) #3, !dbg !24
  %38 = bitcast i32 %37 to float, !dbg !24
  %39 = getelementptr float, ptr addrspace(1) %4, i64 %33, !dbg !25
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #3, !dbg !26
  %41 = getelementptr float, ptr addrspace(1) %5, i64 %33, !dbg !27
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 true) #3, !dbg !28
  %43 = getelementptr float, ptr addrspace(1) %6, i64 %30, !dbg !29
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 true) #3, !dbg !30
  %45 = getelementptr float, ptr addrspace(1) %7, i64 %33, !dbg !31
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %45, i1 true) #3, !dbg !32
  %47 = getelementptr float, ptr addrspace(1) %8, i64 %33, !dbg !33
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 true) #3, !dbg !34
  %49 = bitcast i32 %48 to float, !dbg !34
  %50 = getelementptr float, ptr addrspace(1) %9, i64 %33, !dbg !35
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 true) #3, !dbg !36
  %52 = getelementptr float, ptr addrspace(1) %10, i64 %33, !dbg !37
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 true) #3, !dbg !38
  %54 = getelementptr float, ptr addrspace(1) %11, i64 %30, !dbg !39
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 true) #3, !dbg !40
  %56 = sext i32 %28 to i64, !dbg !41
  %57 = getelementptr i64, ptr addrspace(1) %12, i64 %56, !dbg !41
  %58 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %57, i1 true) #3, !dbg !42
  %59 = sext i32 %.decomposed to i64, !dbg !43
  %60 = getelementptr i64, ptr addrspace(1) %12, i64 %59, !dbg !43
  %61 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %60, i1 true) #3, !dbg !44
  %62 = getelementptr float, ptr addrspace(1) %14, i64 %33, !dbg !45
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 true) #3, !dbg !46
  %64 = getelementptr float, ptr addrspace(1) %15, i64 %33, !dbg !47
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 true) #3, !dbg !48
  %66 = bitcast i32 %65 to float, !dbg !48
  %67 = getelementptr float, ptr addrspace(1) %16, i64 %33, !dbg !49
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 true) #3, !dbg !50
  %69 = getelementptr float, ptr addrspace(1) %17, i64 %33, !dbg !51
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %69, i1 true) #3, !dbg !52
  %71 = fadd float %38, 0x3EE4F8B580000000, !dbg !53
  %72 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !54
  %.not.i = icmp eq i32 %72, 0, !dbg !54
  %73 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !54
  %.not1.i = icmp eq i32 %73, 0, !dbg !54
  br i1 %.not.i, label %79, label %74, !dbg !54

74:                                               ; preds = %19
  br i1 %.not1.i, label %77, label %75, !dbg !54

75:                                               ; preds = %74
  %76 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %71) #3, !dbg !54
  br label %__nv_sqrtf.exit, !dbg !54

77:                                               ; preds = %74
  %78 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %71) #3, !dbg !54
  br label %__nv_sqrtf.exit, !dbg !54

79:                                               ; preds = %19
  br i1 %.not1.i, label %82, label %80, !dbg !54

80:                                               ; preds = %79
  %81 = tail call float @llvm.nvvm.sqrt.rn.f(float %71) #3, !dbg !54
  br label %__nv_sqrtf.exit, !dbg !54

82:                                               ; preds = %79
  %83 = tail call float @llvm.nvvm.sqrt.approx.f(float %71) #3, !dbg !54
  br label %__nv_sqrtf.exit, !dbg !54

__nv_sqrtf.exit:                                  ; preds = %75, %77, %80, %82
  %.0.i = phi float [ %76, %75 ], [ %78, %77 ], [ %81, %80 ], [ %83, %82 ], !dbg !54
  %84 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !55
  %85 = fadd float %49, 0x3EE4F8B580000000, !dbg !56
  %86 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !57
  %.not.i1 = icmp eq i32 %86, 0, !dbg !57
  %87 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !57
  %.not1.i4 = icmp eq i32 %87, 0, !dbg !57
  br i1 %.not.i1, label %93, label %88, !dbg !57

88:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %91, label %89, !dbg !57

89:                                               ; preds = %88
  %90 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %85) #3, !dbg !57
  br label %__nv_sqrtf.exit5, !dbg !57

91:                                               ; preds = %88
  %92 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %85) #3, !dbg !57
  br label %__nv_sqrtf.exit5, !dbg !57

93:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %96, label %94, !dbg !57

94:                                               ; preds = %93
  %95 = tail call float @llvm.nvvm.sqrt.rn.f(float %85) #3, !dbg !57
  br label %__nv_sqrtf.exit5, !dbg !57

96:                                               ; preds = %93
  %97 = tail call float @llvm.nvvm.sqrt.approx.f(float %85) #3, !dbg !57
  br label %__nv_sqrtf.exit5, !dbg !57

__nv_sqrtf.exit5:                                 ; preds = %89, %91, %94, %96
  %.0.i3 = phi float [ %90, %89 ], [ %92, %91 ], [ %95, %94 ], [ %97, %96 ], !dbg !57
  %98 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !58
  %99 = lshr i64 %58, 62, !dbg !59
  %100 = and i64 %99, 2, !dbg !59
  %101 = add i64 %100, %58, !dbg !59
  %102 = lshr i64 %61, 62, !dbg !60
  %103 = and i64 %102, 2, !dbg !60
  %104 = shl nsw i32 %25, 2, !dbg !61
  %105 = sext i32 %104 to i64, !dbg !62
  %106 = getelementptr float, ptr addrspace(1) %13, i64 %61, !dbg !63
  %107 = getelementptr float, ptr addrspace(1) %106, i64 %103, !dbg !63
  %.idx = shl i64 %101, 3, !dbg !63
  %108 = getelementptr i8, ptr addrspace(1) %107, i64 %.idx, !dbg !63
  %109 = getelementptr float, ptr addrspace(1) %108, i64 %105, !dbg !63
  %110 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %109, i1 true) #3, !dbg !64
  %111 = fadd float %66, 0x3EE4F8B580000000, !dbg !65
  %112 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !66
  %.not.i6 = icmp eq i32 %112, 0, !dbg !66
  %113 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !66
  %.not1.i9 = icmp eq i32 %113, 0, !dbg !66
  br i1 %.not.i6, label %119, label %114, !dbg !66

114:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %117, label %115, !dbg !66

115:                                              ; preds = %114
  %116 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %111) #3, !dbg !66
  br label %__nv_sqrtf.exit10, !dbg !66

117:                                              ; preds = %114
  %118 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %111) #3, !dbg !66
  br label %__nv_sqrtf.exit10, !dbg !66

119:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %122, label %120, !dbg !66

120:                                              ; preds = %119
  %121 = tail call float @llvm.nvvm.sqrt.rn.f(float %111) #3, !dbg !66
  br label %__nv_sqrtf.exit10, !dbg !66

122:                                              ; preds = %119
  %123 = tail call float @llvm.nvvm.sqrt.approx.f(float %111) #3, !dbg !66
  br label %__nv_sqrtf.exit10, !dbg !66

__nv_sqrtf.exit10:                                ; preds = %115, %117, %120, %122
  %.0.i8 = phi float [ %116, %115 ], [ %118, %117 ], [ %121, %120 ], [ %123, %122 ], !dbg !66
  %124 = bitcast i32 %110 to float, !dbg !64
  %125 = bitcast i32 %63 to float, !dbg !46
  %126 = fsub float %124, %125, !dbg !67
  %127 = insertelement <2 x i32> poison, i32 %32, i64 0, !dbg !20
  %128 = insertelement <2 x i32> %127, i32 %44, i64 1, !dbg !20
  %129 = bitcast <2 x i32> %128 to <2 x float>, !dbg !20
  %130 = insertelement <2 x i32> poison, i32 %35, i64 0, !dbg !22
  %131 = insertelement <2 x i32> %130, i32 %46, i64 1, !dbg !22
  %132 = bitcast <2 x i32> %131 to <2 x float>, !dbg !22
  %133 = insertelement <2 x i32> poison, i32 %40, i64 0, !dbg !26
  %134 = insertelement <2 x i32> %133, i32 %51, i64 1, !dbg !26
  %135 = bitcast <2 x i32> %134 to <2 x float>, !dbg !26
  %136 = insertelement <2 x i32> poison, i32 %42, i64 0, !dbg !28
  %137 = insertelement <2 x i32> %136, i32 %53, i64 1, !dbg !28
  %138 = bitcast <2 x i32> %137 to <2 x float>, !dbg !28
  %139 = fsub <2 x float> %129, %132, !dbg !68
  %140 = insertelement <2 x float> poison, float %84, i64 0, !dbg !69
  %141 = insertelement <2 x float> %140, float %98, i64 1, !dbg !69
  %142 = fmul <2 x float> %139, %141, !dbg !69
  %143 = fmul <2 x float> %142, %135, !dbg !70
  %144 = fadd <2 x float> %143, %138, !dbg !71
  %145 = extractelement <2 x float> %144, i64 0, !dbg !72
  %146 = fadd float %145, 0.000000e+00, !dbg !72
  %147 = extractelement <2 x float> %144, i64 1, !dbg !73
  %148 = fadd float %146, %147, !dbg !73
  %149 = bitcast i32 %55 to float, !dbg !40
  %150 = fadd float %148, %149, !dbg !74
  %151 = bitcast i32 %70 to float, !dbg !52
  %152 = bitcast i32 %68 to float, !dbg !50
  %153 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !75
  %154 = fmul float %126, %153, !dbg !76
  %155 = fmul float %154, %152, !dbg !77
  %156 = fadd float %155, %151, !dbg !78
  %157 = fadd float %150, %156, !dbg !79
  %158 = fcmp olt float %157, 0.000000e+00, !dbg !80
  %159 = select i1 %158, float 0.000000e+00, float %157, !dbg !84
  %160 = getelementptr float, ptr addrspace(1) %0, i64 %30, !dbg !85
  %161 = bitcast float %159 to i32, !dbg !86
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %161, ptr addrspace(1) %160, i1 true) #3, !dbg !86
  ret void, !dbg !87
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cujfgqxydiffjxesrqnot74gebql4xx5uf7v3zpn75gcevwu443p.py", directory: "inductor_cache/uj")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_relu_26, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_relu_26, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_relu_26", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training__unsafe_index_add_relu_26", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 27, scope: !7)
!16 = !DILocation(line: 26, column: 21, scope: !7)
!17 = !DILocation(line: 26, column: 26, scope: !7)
!18 = !DILocation(line: 27, column: 19, scope: !7)
!19 = !DILocation(line: 29, column: 30, scope: !7)
!20 = !DILocation(line: 29, column: 35, scope: !7)
!21 = !DILocation(line: 30, column: 30, scope: !7)
!22 = !DILocation(line: 30, column: 35, scope: !7)
!23 = !DILocation(line: 31, column: 30, scope: !7)
!24 = !DILocation(line: 31, column: 35, scope: !7)
!25 = !DILocation(line: 32, column: 31, scope: !7)
!26 = !DILocation(line: 32, column: 36, scope: !7)
!27 = !DILocation(line: 33, column: 31, scope: !7)
!28 = !DILocation(line: 33, column: 36, scope: !7)
!29 = !DILocation(line: 34, column: 31, scope: !7)
!30 = !DILocation(line: 34, column: 36, scope: !7)
!31 = !DILocation(line: 35, column: 31, scope: !7)
!32 = !DILocation(line: 35, column: 36, scope: !7)
!33 = !DILocation(line: 36, column: 31, scope: !7)
!34 = !DILocation(line: 36, column: 36, scope: !7)
!35 = !DILocation(line: 37, column: 31, scope: !7)
!36 = !DILocation(line: 37, column: 36, scope: !7)
!37 = !DILocation(line: 38, column: 31, scope: !7)
!38 = !DILocation(line: 38, column: 36, scope: !7)
!39 = !DILocation(line: 39, column: 32, scope: !7)
!40 = !DILocation(line: 39, column: 37, scope: !7)
!41 = !DILocation(line: 40, column: 32, scope: !7)
!42 = !DILocation(line: 40, column: 37, scope: !7)
!43 = !DILocation(line: 41, column: 32, scope: !7)
!44 = !DILocation(line: 41, column: 37, scope: !7)
!45 = !DILocation(line: 42, column: 32, scope: !7)
!46 = !DILocation(line: 42, column: 37, scope: !7)
!47 = !DILocation(line: 43, column: 32, scope: !7)
!48 = !DILocation(line: 43, column: 37, scope: !7)
!49 = !DILocation(line: 44, column: 32, scope: !7)
!50 = !DILocation(line: 44, column: 37, scope: !7)
!51 = !DILocation(line: 45, column: 32, scope: !7)
!52 = !DILocation(line: 45, column: 37, scope: !7)
!53 = !DILocation(line: 48, column: 18, scope: !7)
!54 = !DILocation(line: 49, column: 26, scope: !7)
!55 = !DILocation(line: 51, column: 18, scope: !7)
!56 = !DILocation(line: 60, column: 20, scope: !7)
!57 = !DILocation(line: 61, column: 27, scope: !7)
!58 = !DILocation(line: 62, column: 19, scope: !7)
!59 = !DILocation(line: 72, column: 35, scope: !7)
!60 = !DILocation(line: 75, column: 35, scope: !7)
!61 = !DILocation(line: 76, column: 52, scope: !7)
!62 = !DILocation(line: 76, column: 50, scope: !7)
!63 = !DILocation(line: 76, column: 32, scope: !7)
!64 = !DILocation(line: 76, column: 57, scope: !7)
!65 = !DILocation(line: 78, column: 20, scope: !7)
!66 = !DILocation(line: 79, column: 27, scope: !7)
!67 = !DILocation(line: 77, column: 20, scope: !7)
!68 = !DILocation(line: 46, column: 18, scope: !7)
!69 = !DILocation(line: 54, column: 19, scope: !7)
!70 = !DILocation(line: 55, column: 20, scope: !7)
!71 = !DILocation(line: 56, column: 20, scope: !7)
!72 = !DILocation(line: 58, column: 20, scope: !7)
!73 = !DILocation(line: 67, column: 20, scope: !7)
!74 = !DILocation(line: 68, column: 20, scope: !7)
!75 = !DILocation(line: 80, column: 19, scope: !7)
!76 = !DILocation(line: 82, column: 20, scope: !7)
!77 = !DILocation(line: 83, column: 20, scope: !7)
!78 = !DILocation(line: 84, column: 20, scope: !7)
!79 = !DILocation(line: 85, column: 20, scope: !7)
!80 = !DILocation(line: 118, column: 15, scope: !81, inlinedAt: !83)
!81 = distinct !DILexicalBlockFile(scope: !7, file: !82, discriminator: 0)
!82 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!83 = !DILocation(line: 87, column: 42, scope: !7)
!84 = !DILocation(line: 121, column: 29, scope: !81, inlinedAt: !83)
!85 = !DILocation(line: 88, column: 28, scope: !7)
!86 = !DILocation(line: 88, column: 40, scope: !7)
!87 = !DILocation(line: 88, column: 4, scope: !7)
