; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_avg_pool2d_6(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 8, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 1, !dbg !12
  %8 = and i32 %7, 254, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = or disjoint i32 %9, 1, !dbg !13
  %11 = icmp slt i32 %9, 2048, !dbg !14
  %12 = ashr exact i32 %9, 1, !dbg !15
  %13 = srem i32 %12, 2, !dbg !16
  %14 = srem i32 %10, 2, !dbg !17
  %15 = icmp sgt i32 %13, 0, !dbg !18
  %16 = icmp sgt i32 %14, 0, !dbg !19
  %17 = and i1 %16, %15, !dbg !20
  %18 = add i32 %9, -3, !dbg !21
  %19 = add i32 %9, -2, !dbg !21
  %20 = sext i32 %18 to i64, !dbg !22
  %21 = getelementptr float, ptr addrspace(1) %0, i64 %20, !dbg !22
  %22 = sext i32 %19 to i64, !dbg !22
  %23 = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !22
  %24 = and i1 %11, %17, !dbg !23
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %21, i1 false, i32 0, i1 false) #1, !dbg !24
  %26 = bitcast i32 %25 to float, !dbg !24
  %27 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %23, i1 %24, i32 0, i1 %24) #1, !dbg !24
  %28 = bitcast i32 %27 to float, !dbg !24
  %29 = and i1 %11, %15, !dbg !25
  %30 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %23, i1 %29, i32 0, i1 %29, i32 0, i1 %29) #1, !dbg !26
  %31 = extractvalue { i32, i32 } %30, 0, !dbg !26
  %32 = extractvalue { i32, i32 } %30, 1, !dbg !26
  %33 = bitcast i32 %31 to float, !dbg !26
  %34 = bitcast i32 %32 to float, !dbg !26
  %35 = fadd float %26, %33, !dbg !27
  %36 = fadd float %28, %34, !dbg !27
  %37 = icmp slt i32 %14, 1, !dbg !28
  %38 = and i1 %37, %15, !dbg !29
  %39 = add i32 %9, -1, !dbg !30
  %40 = sext i32 %39 to i64, !dbg !31
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !31
  %42 = sext i32 %10 to i64, !dbg !31
  %43 = getelementptr float, ptr addrspace(1) %0, i64 %42, !dbg !31
  %44 = getelementptr i8, ptr addrspace(1) %43, i64 -4, !dbg !31
  %45 = and i1 %11, %38, !dbg !32
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %41, i1 %29, i32 0, i1 %29) #1, !dbg !33
  %47 = bitcast i32 %46 to float, !dbg !33
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %44, i1 %45, i32 0, i1 %45) #1, !dbg !33
  %49 = bitcast i32 %48 to float, !dbg !33
  %50 = fadd float %35, %47, !dbg !34
  %51 = fadd float %36, %49, !dbg !34
  %52 = icmp sgt i32 %13, -1, !dbg !35
  %53 = and i1 %16, %52, !dbg !36
  %54 = and i1 %11, %53, !dbg !37
  %55 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %41, i1 false, i32 0, i1 false) #1, !dbg !38
  %56 = bitcast i32 %55 to float, !dbg !38
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %44, i1 %54, i32 0, i1 %54) #1, !dbg !38
  %58 = bitcast i32 %57 to float, !dbg !38
  %59 = fadd float %50, %56, !dbg !39
  %60 = fadd float %51, %58, !dbg !39
  %61 = sext i32 %9 to i64, !dbg !40
  %62 = getelementptr float, ptr addrspace(1) %0, i64 %61, !dbg !40
  %63 = and i1 %11, %52, !dbg !41
  %64 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %62, i1 %63, i32 0, i1 %63, i32 0, i1 %63) #1, !dbg !42
  %65 = extractvalue { i32, i32 } %64, 0, !dbg !42
  %66 = extractvalue { i32, i32 } %64, 1, !dbg !42
  %67 = bitcast i32 %65 to float, !dbg !42
  %68 = bitcast i32 %66 to float, !dbg !42
  %69 = fadd float %59, %67, !dbg !43
  %70 = fadd float %60, %68, !dbg !43
  %71 = and i1 %37, %52, !dbg !44
  %72 = add i32 %9, 2, !dbg !45
  %73 = sext i32 %72 to i64, !dbg !46
  %74 = getelementptr float, ptr addrspace(1) %0, i64 %73, !dbg !46
  %75 = and i1 %11, %71, !dbg !47
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %43, i1 %63, i32 0, i1 %63) #1, !dbg !48
  %77 = bitcast i32 %76 to float, !dbg !48
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %74, i1 %75, i32 0, i1 %75) #1, !dbg !48
  %79 = bitcast i32 %78 to float, !dbg !48
  %80 = fadd float %69, %77, !dbg !49
  %81 = fadd float %70, %79, !dbg !49
  %82 = icmp slt i32 %13, 1, !dbg !50
  %83 = and i1 %16, %82, !dbg !51
  %84 = and i1 %11, %83, !dbg !52
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %43, i1 false, i32 0, i1 false) #1, !dbg !53
  %86 = bitcast i32 %85 to float, !dbg !53
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %74, i1 %84, i32 0, i1 %84) #1, !dbg !53
  %88 = bitcast i32 %87 to float, !dbg !53
  %89 = fadd float %80, %86, !dbg !54
  %90 = fadd float %81, %88, !dbg !54
  %91 = and i1 %11, %82, !dbg !55
  %92 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %74, i1 %91, i32 0, i1 %91, i32 0, i1 %91) #1, !dbg !56
  %93 = extractvalue { i32, i32 } %92, 0, !dbg !56
  %94 = extractvalue { i32, i32 } %92, 1, !dbg !56
  %95 = bitcast i32 %93 to float, !dbg !56
  %96 = bitcast i32 %94 to float, !dbg !56
  %97 = fadd float %89, %95, !dbg !57
  %98 = fadd float %90, %96, !dbg !57
  %99 = and i1 %37, %82, !dbg !58
  %100 = add i32 %9, 3, !dbg !59
  %101 = add i32 %9, 4, !dbg !59
  %102 = sext i32 %100 to i64, !dbg !60
  %103 = getelementptr float, ptr addrspace(1) %0, i64 %102, !dbg !60
  %104 = sext i32 %101 to i64, !dbg !60
  %105 = getelementptr float, ptr addrspace(1) %0, i64 %104, !dbg !60
  %106 = and i1 %11, %99, !dbg !61
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %103, i1 %91, i32 0, i1 %91) #1, !dbg !62
  %108 = bitcast i32 %107 to float, !dbg !62
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %105, i1 %106, i32 0, i1 %106) #1, !dbg !62
  %110 = bitcast i32 %109 to float, !dbg !62
  %111 = fadd float %97, %108, !dbg !63
  %112 = fadd float %98, %110, !dbg !63
  %113 = add nsw i32 %14, 2, !dbg !64
  %114 = select i1 %16, i32 3, i32 %113, !dbg !65
  %115 = add nsw i32 %13, 2, !dbg !66
  %116 = select i1 %15, i32 3, i32 %115, !dbg !67
  %117 = shl nuw nsw i32 %116, 1, !dbg !68
  %reass.sub = mul nsw i32 %13, -3, !dbg !69
  %118 = add nsw i32 %reass.sub, 3, !dbg !69
  %119 = add nuw nsw i32 %118, %116, !dbg !70
  %120 = add nuw nsw i32 %119, %117, !dbg !71
  %reass.add = sub nsw i32 %116, %13
  %reass.mul = mul nuw nsw i32 %reass.add, %114
  %reass.add6 = sub nsw i32 %13, %116
  %reass.mul7 = mul nsw i32 %reass.add6, %14
  %reass.sub8 = sub nsw i32 %114, %14, !dbg !72
  %121 = or disjoint i32 %reass.sub8, 1, !dbg !72
  %122 = sub nsw i32 %121, %13, !dbg !73
  %123 = add nuw nsw i32 %122, %116, !dbg !69
  %124 = add nuw nsw i32 %123, %reass.mul, !dbg !70
  %125 = add nsw i32 %124, %reass.mul7, !dbg !71
  %126 = uitofp nneg i32 %120 to float, !dbg !74
  %127 = sitofp i32 %125 to float, !dbg !74
  %128 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %111, float %126) #1, !dbg !74
  %129 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %112, float %127) #1, !dbg !74
  %130 = getelementptr float, ptr addrspace(1) %1, i64 %61, !dbg !75
  %131 = bitcast float %128 to i32, !dbg !76
  %132 = bitcast float %129 to i32, !dbg !76
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %131, i32 %132, ptr addrspace(1) %130, i1 %11) #1, !dbg !76
  ret void, !dbg !77
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ceaes2g7igamfnjsh5krjyjjid6sic6ogctm6dre6vfvfavqwoiq.py", directory: "inductor_cache/ea")
!4 = !{ptr @triton_poi_fused_avg_pool2d_6, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_avg_pool2d_6, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_avg_pool2d_6", linkageName: "triton_poi_fused_avg_pool2d_6", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 26, scope: !7)
!17 = !DILocation(line: 25, column: 19, scope: !7)
!18 = !DILocation(line: 29, column: 19, scope: !7)
!19 = !DILocation(line: 34, column: 19, scope: !7)
!20 = !DILocation(line: 37, column: 19, scope: !7)
!21 = !DILocation(line: 38, column: 38, scope: !7)
!22 = !DILocation(line: 38, column: 31, scope: !7)
!23 = !DILocation(line: 38, column: 51, scope: !7)
!24 = !DILocation(line: 38, column: 43, scope: !7)
!25 = !DILocation(line: 44, column: 51, scope: !7)
!26 = !DILocation(line: 44, column: 43, scope: !7)
!27 = !DILocation(line: 45, column: 20, scope: !7)
!28 = !DILocation(line: 48, column: 20, scope: !7)
!29 = !DILocation(line: 50, column: 19, scope: !7)
!30 = !DILocation(line: 51, column: 38, scope: !7)
!31 = !DILocation(line: 51, column: 31, scope: !7)
!32 = !DILocation(line: 51, column: 51, scope: !7)
!33 = !DILocation(line: 51, column: 43, scope: !7)
!34 = !DILocation(line: 52, column: 20, scope: !7)
!35 = !DILocation(line: 54, column: 21, scope: !7)
!36 = !DILocation(line: 57, column: 20, scope: !7)
!37 = !DILocation(line: 58, column: 51, scope: !7)
!38 = !DILocation(line: 58, column: 43, scope: !7)
!39 = !DILocation(line: 59, column: 20, scope: !7)
!40 = !DILocation(line: 61, column: 31, scope: !7)
!41 = !DILocation(line: 61, column: 44, scope: !7)
!42 = !DILocation(line: 61, column: 36, scope: !7)
!43 = !DILocation(line: 62, column: 20, scope: !7)
!44 = !DILocation(line: 63, column: 20, scope: !7)
!45 = !DILocation(line: 64, column: 35, scope: !7)
!46 = !DILocation(line: 64, column: 31, scope: !7)
!47 = !DILocation(line: 64, column: 48, scope: !7)
!48 = !DILocation(line: 64, column: 40, scope: !7)
!49 = !DILocation(line: 65, column: 20, scope: !7)
!50 = !DILocation(line: 68, column: 20, scope: !7)
!51 = !DILocation(line: 70, column: 20, scope: !7)
!52 = !DILocation(line: 71, column: 48, scope: !7)
!53 = !DILocation(line: 71, column: 40, scope: !7)
!54 = !DILocation(line: 72, column: 20, scope: !7)
!55 = !DILocation(line: 74, column: 48, scope: !7)
!56 = !DILocation(line: 74, column: 40, scope: !7)
!57 = !DILocation(line: 75, column: 20, scope: !7)
!58 = !DILocation(line: 76, column: 20, scope: !7)
!59 = !DILocation(line: 77, column: 35, scope: !7)
!60 = !DILocation(line: 77, column: 31, scope: !7)
!61 = !DILocation(line: 77, column: 48, scope: !7)
!62 = !DILocation(line: 77, column: 40, scope: !7)
!63 = !DILocation(line: 78, column: 20, scope: !7)
!64 = !DILocation(line: 79, column: 68, scope: !7)
!65 = !DILocation(line: 79, column: 75, scope: !7)
!66 = !DILocation(line: 79, column: 124, scope: !7)
!67 = !DILocation(line: 79, column: 131, scope: !7)
!68 = !DILocation(line: 79, column: 105, scope: !7)
!69 = !DILocation(line: 79, column: 231, scope: !7)
!70 = !DILocation(line: 79, column: 299, scope: !7)
!71 = !DILocation(line: 79, column: 357, scope: !7)
!72 = !DILocation(line: 79, column: 48, scope: !7)
!73 = !DILocation(line: 79, column: 163, scope: !7)
!74 = !DILocation(line: 80, column: 20, scope: !7)
!75 = !DILocation(line: 81, column: 25, scope: !7)
!76 = !DILocation(line: 81, column: 37, scope: !7)
!77 = !DILocation(line: 81, column: 4, scope: !7)
