; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_cat_24(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %11 = shl i32 %10, 10, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = shl i32 %12, 2, !dbg !12
  %14 = and i32 %13, 508, !dbg !12
  %15 = or disjoint i32 %11, %14, !dbg !13
  %16 = or disjoint i32 %15, 512, !dbg !13
  %.frozen = freeze i32 %15, !dbg !14
  %17 = sdiv i32 %.frozen, 256, !dbg !14
  %18 = mul i32 %17, 256, !dbg !15
  %.decomposed = sub i32 %.frozen, %18, !dbg !15
  %19 = sdiv i32 %16, 256, !dbg !14
  %20 = sdiv i32 %15, 8192, !dbg !16
  %21 = sdiv i32 %16, 8192, !dbg !16
  %22 = srem i32 %20, 32, !dbg !17
  %23 = srem i32 %21, 32, !dbg !17
  %24 = srem i32 %17, 32, !dbg !18
  %25 = srem i32 %19, 32, !dbg !18
  %26 = sdiv i32 %15, 262144, !dbg !19
  %27 = sdiv i32 %16, 262144, !dbg !19
  %28 = icmp slt i32 %.decomposed, 128, !dbg !20
  %29 = shl nsw i32 %17, 7, !dbg !21
  %30 = shl nsw i32 %19, 7, !dbg !21
  %31 = add nsw i32 %29, %.decomposed, !dbg !22
  %32 = add nsw i32 %30, %.decomposed, !dbg !22
  %33 = sext i32 %31 to i64, !dbg !23
  %34 = getelementptr float, ptr addrspace(1) %0, i64 %33, !dbg !23
  %35 = sext i32 %32 to i64, !dbg !23
  %36 = getelementptr float, ptr addrspace(1) %0, i64 %35, !dbg !23
  %37 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %34, i1 %28, i32 0, i1 %28, i32 0, i1 %28, i32 0, i1 %28, i32 0, i1 %28) #3, !dbg !24
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %36, i1 %28, i32 0, i1 %28, i32 0, i1 %28, i32 0, i1 %28, i32 0, i1 %28) #3, !dbg !24
  %39 = icmp sgt i32 %.decomposed, 127, !dbg !25
  %40 = sext i32 %22 to i64, !dbg !26
  %41 = getelementptr i64, ptr addrspace(1) %1, i64 %40, !dbg !26
  %42 = sext i32 %23 to i64, !dbg !26
  %43 = getelementptr i64, ptr addrspace(1) %1, i64 %42, !dbg !26
  %44 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %41, i1 %39, i1 %39) #3, !dbg !27
  %45 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %41, i1 %39, i1 %39) #3, !dbg !27
  %46 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %41, i1 %39, i1 %39) #3, !dbg !27
  %47 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %41, i1 %39, i1 %39) #3, !dbg !27
  %48 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %43, i1 %39, i1 %39) #3, !dbg !27
  %49 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %43, i1 %39, i1 %39) #3, !dbg !27
  %50 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %43, i1 %39, i1 %39) #3, !dbg !27
  %51 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %43, i1 %39, i1 %39) #3, !dbg !27
  %52 = lshr i64 %44, 59, !dbg !28
  %53 = and i64 %52, 16, !dbg !28
  %54 = add i64 %53, %44, !dbg !28
  %55 = lshr i64 %48, 59, !dbg !28
  %56 = and i64 %55, 16, !dbg !28
  %57 = add i64 %56, %48, !dbg !28
  %58 = sext i32 %24 to i64, !dbg !29
  %59 = getelementptr i64, ptr addrspace(1) %1, i64 %58, !dbg !29
  %60 = sext i32 %25 to i64, !dbg !29
  %61 = getelementptr i64, ptr addrspace(1) %1, i64 %60, !dbg !29
  %62 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %59, i1 %39, i1 %39) #3, !dbg !30
  %63 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %59, i1 %39, i1 %39) #3, !dbg !30
  %64 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %59, i1 %39, i1 %39) #3, !dbg !30
  %65 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %59, i1 %39, i1 %39) #3, !dbg !30
  %66 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %61, i1 %39, i1 %39) #3, !dbg !30
  %67 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %61, i1 %39, i1 %39) #3, !dbg !30
  %68 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %61, i1 %39, i1 %39) #3, !dbg !30
  %69 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];\0A\09@!$3 mov.u64 $0, 0x0;", "=l,l,b,b"(ptr addrspace(1) %61, i1 %39, i1 %39) #3, !dbg !30
  %70 = lshr i64 %62, 59, !dbg !31
  %71 = and i64 %70, 16, !dbg !31
  %72 = add i64 %71, %62, !dbg !31
  %73 = lshr i64 %66, 59, !dbg !31
  %74 = and i64 %73, 16, !dbg !31
  %75 = add i64 %74, %66, !dbg !31
  %76 = shl nsw i32 %26, 15, !dbg !32
  %77 = shl nsw i32 %27, 15, !dbg !32
  %78 = sext i32 %76 to i64, !dbg !33
  %79 = sext i32 %77 to i64, !dbg !33
  %80 = add nsw i32 %.decomposed, -128, !dbg !34
  %81 = sext i32 %80 to i64, !dbg !35
  %.idx = shl i64 %72, 9, !dbg !36
  %82 = getelementptr i8, ptr addrspace(1) %2, i64 %.idx, !dbg !36
  %.idx1 = shl i64 %54, 13, !dbg !36
  %83 = getelementptr i8, ptr addrspace(1) %82, i64 %.idx1, !dbg !36
  %84 = getelementptr float, ptr addrspace(1) %83, i64 %78, !dbg !36
  %85 = getelementptr float, ptr addrspace(1) %84, i64 %81, !dbg !36
  %.idx2 = shl i64 %75, 9, !dbg !36
  %86 = getelementptr i8, ptr addrspace(1) %2, i64 %.idx2, !dbg !36
  %.idx3 = shl i64 %57, 13, !dbg !36
  %87 = getelementptr i8, ptr addrspace(1) %86, i64 %.idx3, !dbg !36
  %88 = getelementptr float, ptr addrspace(1) %87, i64 %79, !dbg !36
  %89 = getelementptr float, ptr addrspace(1) %88, i64 %81, !dbg !36
  %90 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %85, i1 %39, i32 0, i1 %39, i32 0, i1 %39, i32 0, i1 %39, i32 0, i1 %39) #3, !dbg !37
  %91 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %89, i1 %39, i32 0, i1 %39, i32 0, i1 %39, i32 0, i1 %39, i32 0, i1 %39) #3, !dbg !37
  %92 = getelementptr float, ptr addrspace(1) %3, i64 %81, !dbg !38
  %93 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %92, i1 %39, i32 0, i1 %39, i32 0, i1 %39, i32 0, i1 %39, i32 0, i1 %39) #3, !dbg !39
  %94 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %92, i1 %39, i32 0, i1 %39, i32 0, i1 %39, i32 0, i1 %39, i32 0, i1 %39) #3, !dbg !39
  %95 = getelementptr float, ptr addrspace(1) %4, i64 %81, !dbg !40
  %96 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %95, i1 %39, i32 0, i1 %39, i32 0, i1 %39, i32 0, i1 %39, i32 0, i1 %39) #3, !dbg !41
  %97 = extractvalue { i32, i32, i32, i32 } %96, 0, !dbg !41
  %98 = extractvalue { i32, i32, i32, i32 } %96, 1, !dbg !41
  %99 = extractvalue { i32, i32, i32, i32 } %96, 2, !dbg !41
  %100 = extractvalue { i32, i32, i32, i32 } %96, 3, !dbg !41
  %101 = bitcast i32 %97 to float, !dbg !41
  %102 = bitcast i32 %98 to float, !dbg !41
  %103 = bitcast i32 %99 to float, !dbg !41
  %104 = bitcast i32 %100 to float, !dbg !41
  %105 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %95, i1 %39, i32 0, i1 %39, i32 0, i1 %39, i32 0, i1 %39, i32 0, i1 %39) #3, !dbg !41
  %106 = extractvalue { i32, i32, i32, i32 } %105, 0, !dbg !41
  %107 = extractvalue { i32, i32, i32, i32 } %105, 1, !dbg !41
  %108 = extractvalue { i32, i32, i32, i32 } %105, 2, !dbg !41
  %109 = extractvalue { i32, i32, i32, i32 } %105, 3, !dbg !41
  %110 = bitcast i32 %106 to float, !dbg !41
  %111 = bitcast i32 %107 to float, !dbg !41
  %112 = bitcast i32 %108 to float, !dbg !41
  %113 = bitcast i32 %109 to float, !dbg !41
  %114 = fadd float %101, 0x3EE4F8B580000000, !dbg !42
  %115 = fadd float %102, 0x3EE4F8B580000000, !dbg !42
  %116 = fadd float %103, 0x3EE4F8B580000000, !dbg !42
  %117 = fadd float %104, 0x3EE4F8B580000000, !dbg !42
  %118 = fadd float %110, 0x3EE4F8B580000000, !dbg !42
  %119 = fadd float %111, 0x3EE4F8B580000000, !dbg !42
  %120 = fadd float %112, 0x3EE4F8B580000000, !dbg !42
  %121 = fadd float %113, 0x3EE4F8B580000000, !dbg !42
  %122 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !43
  %.not.i = icmp eq i32 %122, 0, !dbg !43
  %123 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !43
  %.not1.i = icmp eq i32 %123, 0, !dbg !43
  br i1 %.not.i, label %129, label %124, !dbg !43

124:                                              ; preds = %9
  br i1 %.not1.i, label %127, label %125, !dbg !43

125:                                              ; preds = %124
  %126 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %114) #3, !dbg !43
  br label %__nv_sqrtf.exit, !dbg !43

127:                                              ; preds = %124
  %128 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %114) #3, !dbg !43
  br label %__nv_sqrtf.exit, !dbg !43

129:                                              ; preds = %9
  br i1 %.not1.i, label %132, label %130, !dbg !43

130:                                              ; preds = %129
  %131 = tail call float @llvm.nvvm.sqrt.rn.f(float %114) #3, !dbg !43
  br label %__nv_sqrtf.exit, !dbg !43

132:                                              ; preds = %129
  %133 = tail call float @llvm.nvvm.sqrt.approx.f(float %114) #3, !dbg !43
  br label %__nv_sqrtf.exit, !dbg !43

__nv_sqrtf.exit:                                  ; preds = %125, %127, %130, %132
  %.0.i = phi float [ %126, %125 ], [ %128, %127 ], [ %131, %130 ], [ %133, %132 ], !dbg !43
  %134 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !43
  %.not.i4 = icmp eq i32 %134, 0, !dbg !43
  %135 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !43
  %.not1.i7 = icmp eq i32 %135, 0, !dbg !43
  br i1 %.not.i4, label %141, label %136, !dbg !43

136:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i7, label %139, label %137, !dbg !43

137:                                              ; preds = %136
  %138 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %115) #3, !dbg !43
  br label %__nv_sqrtf.exit8, !dbg !43

139:                                              ; preds = %136
  %140 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %115) #3, !dbg !43
  br label %__nv_sqrtf.exit8, !dbg !43

141:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i7, label %144, label %142, !dbg !43

142:                                              ; preds = %141
  %143 = tail call float @llvm.nvvm.sqrt.rn.f(float %115) #3, !dbg !43
  br label %__nv_sqrtf.exit8, !dbg !43

144:                                              ; preds = %141
  %145 = tail call float @llvm.nvvm.sqrt.approx.f(float %115) #3, !dbg !43
  br label %__nv_sqrtf.exit8, !dbg !43

__nv_sqrtf.exit8:                                 ; preds = %137, %139, %142, %144
  %.0.i6 = phi float [ %138, %137 ], [ %140, %139 ], [ %143, %142 ], [ %145, %144 ], !dbg !43
  %146 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !43
  %.not.i9 = icmp eq i32 %146, 0, !dbg !43
  %147 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !43
  %.not1.i12 = icmp eq i32 %147, 0, !dbg !43
  br i1 %.not.i9, label %153, label %148, !dbg !43

148:                                              ; preds = %__nv_sqrtf.exit8
  br i1 %.not1.i12, label %151, label %149, !dbg !43

149:                                              ; preds = %148
  %150 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %116) #3, !dbg !43
  br label %__nv_sqrtf.exit13, !dbg !43

151:                                              ; preds = %148
  %152 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %116) #3, !dbg !43
  br label %__nv_sqrtf.exit13, !dbg !43

153:                                              ; preds = %__nv_sqrtf.exit8
  br i1 %.not1.i12, label %156, label %154, !dbg !43

154:                                              ; preds = %153
  %155 = tail call float @llvm.nvvm.sqrt.rn.f(float %116) #3, !dbg !43
  br label %__nv_sqrtf.exit13, !dbg !43

156:                                              ; preds = %153
  %157 = tail call float @llvm.nvvm.sqrt.approx.f(float %116) #3, !dbg !43
  br label %__nv_sqrtf.exit13, !dbg !43

__nv_sqrtf.exit13:                                ; preds = %149, %151, %154, %156
  %.0.i11 = phi float [ %150, %149 ], [ %152, %151 ], [ %155, %154 ], [ %157, %156 ], !dbg !43
  %158 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !43
  %.not.i14 = icmp eq i32 %158, 0, !dbg !43
  %159 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !43
  %.not1.i17 = icmp eq i32 %159, 0, !dbg !43
  br i1 %.not.i14, label %165, label %160, !dbg !43

160:                                              ; preds = %__nv_sqrtf.exit13
  br i1 %.not1.i17, label %163, label %161, !dbg !43

161:                                              ; preds = %160
  %162 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %117) #3, !dbg !43
  br label %__nv_sqrtf.exit18, !dbg !43

163:                                              ; preds = %160
  %164 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %117) #3, !dbg !43
  br label %__nv_sqrtf.exit18, !dbg !43

165:                                              ; preds = %__nv_sqrtf.exit13
  br i1 %.not1.i17, label %168, label %166, !dbg !43

166:                                              ; preds = %165
  %167 = tail call float @llvm.nvvm.sqrt.rn.f(float %117) #3, !dbg !43
  br label %__nv_sqrtf.exit18, !dbg !43

168:                                              ; preds = %165
  %169 = tail call float @llvm.nvvm.sqrt.approx.f(float %117) #3, !dbg !43
  br label %__nv_sqrtf.exit18, !dbg !43

__nv_sqrtf.exit18:                                ; preds = %161, %163, %166, %168
  %.0.i16 = phi float [ %162, %161 ], [ %164, %163 ], [ %167, %166 ], [ %169, %168 ], !dbg !43
  %170 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !43
  %.not.i19 = icmp eq i32 %170, 0, !dbg !43
  %171 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !43
  %.not1.i22 = icmp eq i32 %171, 0, !dbg !43
  br i1 %.not.i19, label %177, label %172, !dbg !43

172:                                              ; preds = %__nv_sqrtf.exit18
  br i1 %.not1.i22, label %175, label %173, !dbg !43

173:                                              ; preds = %172
  %174 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %118) #3, !dbg !43
  br label %__nv_sqrtf.exit23, !dbg !43

175:                                              ; preds = %172
  %176 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %118) #3, !dbg !43
  br label %__nv_sqrtf.exit23, !dbg !43

177:                                              ; preds = %__nv_sqrtf.exit18
  br i1 %.not1.i22, label %180, label %178, !dbg !43

178:                                              ; preds = %177
  %179 = tail call float @llvm.nvvm.sqrt.rn.f(float %118) #3, !dbg !43
  br label %__nv_sqrtf.exit23, !dbg !43

180:                                              ; preds = %177
  %181 = tail call float @llvm.nvvm.sqrt.approx.f(float %118) #3, !dbg !43
  br label %__nv_sqrtf.exit23, !dbg !43

__nv_sqrtf.exit23:                                ; preds = %173, %175, %178, %180
  %.0.i21 = phi float [ %174, %173 ], [ %176, %175 ], [ %179, %178 ], [ %181, %180 ], !dbg !43
  %182 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !43
  %.not.i24 = icmp eq i32 %182, 0, !dbg !43
  %183 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !43
  %.not1.i27 = icmp eq i32 %183, 0, !dbg !43
  br i1 %.not.i24, label %189, label %184, !dbg !43

184:                                              ; preds = %__nv_sqrtf.exit23
  br i1 %.not1.i27, label %187, label %185, !dbg !43

185:                                              ; preds = %184
  %186 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %119) #3, !dbg !43
  br label %__nv_sqrtf.exit28, !dbg !43

187:                                              ; preds = %184
  %188 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %119) #3, !dbg !43
  br label %__nv_sqrtf.exit28, !dbg !43

189:                                              ; preds = %__nv_sqrtf.exit23
  br i1 %.not1.i27, label %192, label %190, !dbg !43

190:                                              ; preds = %189
  %191 = tail call float @llvm.nvvm.sqrt.rn.f(float %119) #3, !dbg !43
  br label %__nv_sqrtf.exit28, !dbg !43

192:                                              ; preds = %189
  %193 = tail call float @llvm.nvvm.sqrt.approx.f(float %119) #3, !dbg !43
  br label %__nv_sqrtf.exit28, !dbg !43

__nv_sqrtf.exit28:                                ; preds = %185, %187, %190, %192
  %.0.i26 = phi float [ %186, %185 ], [ %188, %187 ], [ %191, %190 ], [ %193, %192 ], !dbg !43
  %194 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !43
  %.not.i29 = icmp eq i32 %194, 0, !dbg !43
  %195 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !43
  %.not1.i32 = icmp eq i32 %195, 0, !dbg !43
  br i1 %.not.i29, label %201, label %196, !dbg !43

196:                                              ; preds = %__nv_sqrtf.exit28
  br i1 %.not1.i32, label %199, label %197, !dbg !43

197:                                              ; preds = %196
  %198 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %120) #3, !dbg !43
  br label %__nv_sqrtf.exit33, !dbg !43

199:                                              ; preds = %196
  %200 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %120) #3, !dbg !43
  br label %__nv_sqrtf.exit33, !dbg !43

201:                                              ; preds = %__nv_sqrtf.exit28
  br i1 %.not1.i32, label %204, label %202, !dbg !43

202:                                              ; preds = %201
  %203 = tail call float @llvm.nvvm.sqrt.rn.f(float %120) #3, !dbg !43
  br label %__nv_sqrtf.exit33, !dbg !43

204:                                              ; preds = %201
  %205 = tail call float @llvm.nvvm.sqrt.approx.f(float %120) #3, !dbg !43
  br label %__nv_sqrtf.exit33, !dbg !43

__nv_sqrtf.exit33:                                ; preds = %197, %199, %202, %204
  %.0.i31 = phi float [ %198, %197 ], [ %200, %199 ], [ %203, %202 ], [ %205, %204 ], !dbg !43
  %206 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !43
  %.not.i34 = icmp eq i32 %206, 0, !dbg !43
  %207 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !43
  %.not1.i37 = icmp eq i32 %207, 0, !dbg !43
  br i1 %.not.i34, label %213, label %208, !dbg !43

208:                                              ; preds = %__nv_sqrtf.exit33
  br i1 %.not1.i37, label %211, label %209, !dbg !43

209:                                              ; preds = %208
  %210 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %121) #3, !dbg !43
  br label %__nv_sqrtf.exit38, !dbg !43

211:                                              ; preds = %208
  %212 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %121) #3, !dbg !43
  br label %__nv_sqrtf.exit38, !dbg !43

213:                                              ; preds = %__nv_sqrtf.exit33
  br i1 %.not1.i37, label %216, label %214, !dbg !43

214:                                              ; preds = %213
  %215 = tail call float @llvm.nvvm.sqrt.rn.f(float %121) #3, !dbg !43
  br label %__nv_sqrtf.exit38, !dbg !43

216:                                              ; preds = %213
  %217 = tail call float @llvm.nvvm.sqrt.approx.f(float %121) #3, !dbg !43
  br label %__nv_sqrtf.exit38, !dbg !43

__nv_sqrtf.exit38:                                ; preds = %209, %211, %214, %216
  %.0.i36 = phi float [ %210, %209 ], [ %212, %211 ], [ %215, %214 ], [ %217, %216 ], !dbg !43
  %218 = extractvalue { i32, i32, i32, i32 } %91, 3, !dbg !37
  %219 = extractvalue { i32, i32, i32, i32 } %94, 3, !dbg !39
  %220 = extractvalue { i32, i32, i32, i32 } %91, 2, !dbg !37
  %221 = extractvalue { i32, i32, i32, i32 } %94, 2, !dbg !39
  %222 = extractvalue { i32, i32, i32, i32 } %91, 1, !dbg !37
  %223 = extractvalue { i32, i32, i32, i32 } %94, 1, !dbg !39
  %224 = extractvalue { i32, i32, i32, i32 } %91, 0, !dbg !37
  %225 = extractvalue { i32, i32, i32, i32 } %94, 0, !dbg !39
  %226 = extractvalue { i32, i32, i32, i32 } %90, 3, !dbg !37
  %227 = extractvalue { i32, i32, i32, i32 } %93, 3, !dbg !39
  %228 = extractvalue { i32, i32, i32, i32 } %90, 2, !dbg !37
  %229 = extractvalue { i32, i32, i32, i32 } %93, 2, !dbg !39
  %230 = extractvalue { i32, i32, i32, i32 } %90, 1, !dbg !37
  %231 = extractvalue { i32, i32, i32, i32 } %93, 1, !dbg !39
  %232 = extractvalue { i32, i32, i32, i32 } %90, 0, !dbg !37
  %233 = extractvalue { i32, i32, i32, i32 } %93, 0, !dbg !39
  %234 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !24
  %235 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !24
  %236 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !24
  %237 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !24
  %238 = extractvalue { i32, i32, i32, i32 } %37, 3, !dbg !24
  %239 = extractvalue { i32, i32, i32, i32 } %37, 2, !dbg !24
  %240 = extractvalue { i32, i32, i32, i32 } %37, 1, !dbg !24
  %241 = extractvalue { i32, i32, i32, i32 } %37, 0, !dbg !24
  %242 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !44
  %243 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i6) #3, !dbg !44
  %244 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i11) #3, !dbg !44
  %245 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i16) #3, !dbg !44
  %246 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i21) #3, !dbg !44
  %247 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i26) #3, !dbg !44
  %248 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i31) #3, !dbg !44
  %249 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i36) #3, !dbg !44
  %250 = getelementptr float, ptr addrspace(1) %5, i64 %81, !dbg !45
  %251 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %250, i1 %39, i32 0, i1 %39, i32 0, i1 %39, i32 0, i1 %39, i32 0, i1 %39) #3, !dbg !46
  %252 = extractvalue { i32, i32, i32, i32 } %251, 0, !dbg !46
  %253 = extractvalue { i32, i32, i32, i32 } %251, 1, !dbg !46
  %254 = extractvalue { i32, i32, i32, i32 } %251, 2, !dbg !46
  %255 = extractvalue { i32, i32, i32, i32 } %251, 3, !dbg !46
  %256 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %250, i1 %39, i32 0, i1 %39, i32 0, i1 %39, i32 0, i1 %39, i32 0, i1 %39) #3, !dbg !46
  %257 = extractvalue { i32, i32, i32, i32 } %256, 0, !dbg !46
  %258 = extractvalue { i32, i32, i32, i32 } %256, 1, !dbg !46
  %259 = extractvalue { i32, i32, i32, i32 } %256, 2, !dbg !46
  %260 = extractvalue { i32, i32, i32, i32 } %256, 3, !dbg !46
  %261 = getelementptr float, ptr addrspace(1) %6, i64 %81, !dbg !47
  %262 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %261, i1 %39, i32 0, i1 %39, i32 0, i1 %39, i32 0, i1 %39, i32 0, i1 %39) #3, !dbg !48
  %263 = extractvalue { i32, i32, i32, i32 } %262, 0, !dbg !48
  %264 = extractvalue { i32, i32, i32, i32 } %262, 1, !dbg !48
  %265 = extractvalue { i32, i32, i32, i32 } %262, 2, !dbg !48
  %266 = extractvalue { i32, i32, i32, i32 } %262, 3, !dbg !48
  %267 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %261, i1 %39, i32 0, i1 %39, i32 0, i1 %39, i32 0, i1 %39, i32 0, i1 %39) #3, !dbg !48
  %268 = extractvalue { i32, i32, i32, i32 } %267, 0, !dbg !48
  %269 = extractvalue { i32, i32, i32, i32 } %267, 1, !dbg !48
  %270 = extractvalue { i32, i32, i32, i32 } %267, 2, !dbg !48
  %271 = extractvalue { i32, i32, i32, i32 } %267, 3, !dbg !48
  %272 = insertelement <8 x i32> poison, i32 %218, i64 0, !dbg !37
  %273 = insertelement <8 x i32> %272, i32 %220, i64 1, !dbg !37
  %274 = insertelement <8 x i32> %273, i32 %222, i64 2, !dbg !37
  %275 = insertelement <8 x i32> %274, i32 %224, i64 3, !dbg !37
  %276 = insertelement <8 x i32> %275, i32 %226, i64 4, !dbg !37
  %277 = insertelement <8 x i32> %276, i32 %228, i64 5, !dbg !37
  %278 = insertelement <8 x i32> %277, i32 %230, i64 6, !dbg !37
  %279 = insertelement <8 x i32> %278, i32 %232, i64 7, !dbg !37
  %280 = bitcast <8 x i32> %279 to <8 x float>, !dbg !37
  %281 = insertelement <8 x i32> poison, i32 %219, i64 0, !dbg !39
  %282 = insertelement <8 x i32> %281, i32 %221, i64 1, !dbg !39
  %283 = insertelement <8 x i32> %282, i32 %223, i64 2, !dbg !39
  %284 = insertelement <8 x i32> %283, i32 %225, i64 3, !dbg !39
  %285 = insertelement <8 x i32> %284, i32 %227, i64 4, !dbg !39
  %286 = insertelement <8 x i32> %285, i32 %229, i64 5, !dbg !39
  %287 = insertelement <8 x i32> %286, i32 %231, i64 6, !dbg !39
  %288 = insertelement <8 x i32> %287, i32 %233, i64 7, !dbg !39
  %289 = bitcast <8 x i32> %288 to <8 x float>, !dbg !39
  %290 = fsub <8 x float> %280, %289, !dbg !49
  %291 = insertelement <8 x float> poison, float %249, i64 0, !dbg !50
  %292 = insertelement <8 x float> %291, float %248, i64 1, !dbg !50
  %293 = insertelement <8 x float> %292, float %247, i64 2, !dbg !50
  %294 = insertelement <8 x float> %293, float %246, i64 3, !dbg !50
  %295 = insertelement <8 x float> %294, float %245, i64 4, !dbg !50
  %296 = insertelement <8 x float> %295, float %244, i64 5, !dbg !50
  %297 = insertelement <8 x float> %296, float %243, i64 6, !dbg !50
  %298 = insertelement <8 x float> %297, float %242, i64 7, !dbg !50
  %299 = fmul <8 x float> %290, %298, !dbg !50
  %300 = insertelement <8 x i32> poison, i32 %260, i64 0, !dbg !46
  %301 = insertelement <8 x i32> %300, i32 %259, i64 1, !dbg !46
  %302 = insertelement <8 x i32> %301, i32 %258, i64 2, !dbg !46
  %303 = insertelement <8 x i32> %302, i32 %257, i64 3, !dbg !46
  %304 = insertelement <8 x i32> %303, i32 %255, i64 4, !dbg !46
  %305 = insertelement <8 x i32> %304, i32 %254, i64 5, !dbg !46
  %306 = insertelement <8 x i32> %305, i32 %253, i64 6, !dbg !46
  %307 = insertelement <8 x i32> %306, i32 %252, i64 7, !dbg !46
  %308 = bitcast <8 x i32> %307 to <8 x float>, !dbg !46
  %309 = fmul <8 x float> %299, %308, !dbg !51
  %310 = insertelement <8 x i32> poison, i32 %271, i64 0, !dbg !48
  %311 = insertelement <8 x i32> %310, i32 %270, i64 1, !dbg !48
  %312 = insertelement <8 x i32> %311, i32 %269, i64 2, !dbg !48
  %313 = insertelement <8 x i32> %312, i32 %268, i64 3, !dbg !48
  %314 = insertelement <8 x i32> %313, i32 %266, i64 4, !dbg !48
  %315 = insertelement <8 x i32> %314, i32 %265, i64 5, !dbg !48
  %316 = insertelement <8 x i32> %315, i32 %264, i64 6, !dbg !48
  %317 = insertelement <8 x i32> %316, i32 %263, i64 7, !dbg !48
  %318 = bitcast <8 x i32> %317 to <8 x float>, !dbg !48
  %319 = fadd <8 x float> %309, %318, !dbg !52
  %320 = fcmp olt <8 x float> %319, zeroinitializer, !dbg !53
  %321 = extractelement <8 x i1> %320, i64 7, !dbg !57
  %322 = extractelement <8 x i1> %320, i64 6, !dbg !57
  %323 = extractelement <8 x i1> %320, i64 5, !dbg !57
  %324 = extractelement <8 x i1> %320, i64 4, !dbg !57
  %325 = extractelement <8 x i1> %320, i64 3, !dbg !57
  %326 = extractelement <8 x i1> %320, i64 2, !dbg !57
  %327 = extractelement <8 x i1> %320, i64 1, !dbg !57
  %328 = extractelement <8 x i1> %320, i64 0, !dbg !57
  %329 = sext i32 %15 to i64, !dbg !58
  %330 = getelementptr float, ptr addrspace(1) %7, i64 %329, !dbg !58
  %331 = sext i32 %16 to i64, !dbg !58
  %332 = getelementptr float, ptr addrspace(1) %7, i64 %331, !dbg !58
  %bc = bitcast <8 x float> %319 to <8 x i32>, !dbg !59
  %333 = extractelement <8 x i32> %bc, i64 7, !dbg !59
  %334 = select i1 %321, i32 0, i32 %333, !dbg !57
  %335 = select i1 %28, i32 %241, i32 %334, !dbg !60
  %bc39 = bitcast <8 x float> %319 to <8 x i32>, !dbg !59
  %336 = extractelement <8 x i32> %bc39, i64 6, !dbg !59
  %337 = select i1 %322, i32 0, i32 %336, !dbg !57
  %338 = select i1 %28, i32 %240, i32 %337, !dbg !60
  %bc40 = bitcast <8 x float> %319 to <8 x i32>, !dbg !59
  %339 = extractelement <8 x i32> %bc40, i64 5, !dbg !59
  %340 = select i1 %323, i32 0, i32 %339, !dbg !57
  %341 = select i1 %28, i32 %239, i32 %340, !dbg !60
  %bc41 = bitcast <8 x float> %319 to <8 x i32>, !dbg !59
  %342 = extractelement <8 x i32> %bc41, i64 4, !dbg !59
  %343 = select i1 %324, i32 0, i32 %342, !dbg !57
  %344 = select i1 %28, i32 %238, i32 %343, !dbg !60
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %335, i32 %338, i32 %341, i32 %344, ptr addrspace(1) %330, i1 true) #3, !dbg !59
  %bc42 = bitcast <8 x float> %319 to <8 x i32>, !dbg !59
  %345 = extractelement <8 x i32> %bc42, i64 3, !dbg !59
  %346 = select i1 %325, i32 0, i32 %345, !dbg !57
  %347 = select i1 %28, i32 %237, i32 %346, !dbg !60
  %bc43 = bitcast <8 x float> %319 to <8 x i32>, !dbg !59
  %348 = extractelement <8 x i32> %bc43, i64 2, !dbg !59
  %349 = select i1 %326, i32 0, i32 %348, !dbg !57
  %350 = select i1 %28, i32 %236, i32 %349, !dbg !60
  %bc44 = bitcast <8 x float> %319 to <8 x i32>, !dbg !59
  %351 = extractelement <8 x i32> %bc44, i64 1, !dbg !59
  %352 = select i1 %327, i32 0, i32 %351, !dbg !57
  %353 = select i1 %28, i32 %235, i32 %352, !dbg !60
  %bc45 = bitcast <8 x float> %319 to <8 x i32>, !dbg !59
  %354 = extractelement <8 x i32> %bc45, i64 0, !dbg !59
  %355 = select i1 %328, i32 0, i32 %354, !dbg !57
  %356 = select i1 %28, i32 %234, i32 %355, !dbg !60
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %347, i32 %350, i32 %353, i32 %356, ptr addrspace(1) %332, i1 true) #3, !dbg !59
  ret void, !dbg !61
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "csabg5mgpxyjrqodozfjbyrpxe4cy3z5q6uqmjmpjjcyl6j3qh2p.py", directory: "inductor_cache/sa")
!4 = !{ptr @triton_poi_fused_cat_24, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_24, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_24", linkageName: "triton_poi_fused_cat_24", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 21, scope: !7)
!17 = !DILocation(line: 26, column: 29, scope: !7)
!18 = !DILocation(line: 27, column: 28, scope: !7)
!19 = !DILocation(line: 28, column: 19, scope: !7)
!20 = !DILocation(line: 34, column: 18, scope: !7)
!21 = !DILocation(line: 35, column: 34, scope: !7)
!22 = !DILocation(line: 35, column: 40, scope: !7)
!23 = !DILocation(line: 35, column: 30, scope: !7)
!24 = !DILocation(line: 35, column: 46, scope: !7)
!25 = !DILocation(line: 36, column: 19, scope: !7)
!26 = !DILocation(line: 39, column: 30, scope: !7)
!27 = !DILocation(line: 39, column: 35, scope: !7)
!28 = !DILocation(line: 43, column: 35, scope: !7)
!29 = !DILocation(line: 44, column: 31, scope: !7)
!30 = !DILocation(line: 44, column: 36, scope: !7)
!31 = !DILocation(line: 47, column: 35, scope: !7)
!32 = !DILocation(line: 48, column: 62, scope: !7)
!33 = !DILocation(line: 48, column: 56, scope: !7)
!34 = !DILocation(line: 48, column: 77, scope: !7)
!35 = !DILocation(line: 48, column: 68, scope: !7)
!36 = !DILocation(line: 48, column: 31, scope: !7)
!37 = !DILocation(line: 48, column: 83, scope: !7)
!38 = !DILocation(line: 49, column: 31, scope: !7)
!39 = !DILocation(line: 49, column: 45, scope: !7)
!40 = !DILocation(line: 51, column: 31, scope: !7)
!41 = !DILocation(line: 51, column: 45, scope: !7)
!42 = !DILocation(line: 53, column: 20, scope: !7)
!43 = !DILocation(line: 54, column: 27, scope: !7)
!44 = !DILocation(line: 56, column: 20, scope: !7)
!45 = !DILocation(line: 60, column: 31, scope: !7)
!46 = !DILocation(line: 60, column: 45, scope: !7)
!47 = !DILocation(line: 62, column: 31, scope: !7)
!48 = !DILocation(line: 62, column: 45, scope: !7)
!49 = !DILocation(line: 50, column: 20, scope: !7)
!50 = !DILocation(line: 59, column: 20, scope: !7)
!51 = !DILocation(line: 61, column: 20, scope: !7)
!52 = !DILocation(line: 63, column: 20, scope: !7)
!53 = !DILocation(line: 118, column: 15, scope: !54, inlinedAt: !56)
!54 = distinct !DILexicalBlockFile(scope: !7, file: !55, discriminator: 0)
!55 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!56 = !DILocation(line: 65, column: 42, scope: !7)
!57 = !DILocation(line: 121, column: 29, scope: !54, inlinedAt: !56)
!58 = !DILocation(line: 69, column: 25, scope: !7)
!59 = !DILocation(line: 69, column: 37, scope: !7)
!60 = !DILocation(line: 68, column: 33, scope: !7)
!61 = !DILocation(line: 69, column: 4, scope: !7)
