; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused_clone_41(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7, i32 %8) local_unnamed_addr !dbg !7 {
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %11 = shl i32 %10, 6, !dbg !11
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %13 = lshr i32 %12, 4, !dbg !12
  %14 = and i32 %13, 7, !dbg !12
  %15 = or disjoint i32 %14, 8, !dbg !12
  %16 = or disjoint i32 %11, %14, !dbg !13
  %17 = or disjoint i32 %11, %15, !dbg !13
  %18 = or disjoint i32 %16, 16, !dbg !13
  %19 = or disjoint i32 %16, 24, !dbg !13
  %20 = or disjoint i32 %16, 32, !dbg !13
  %21 = or disjoint i32 %16, 40, !dbg !13
  %22 = or disjoint i32 %16, 48, !dbg !13
  %23 = or disjoint i32 %16, 56, !dbg !13
  %24 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !14
  %25 = shl i32 %24, 4, !dbg !15
  %26 = and i32 %12, 15, !dbg !16
  %27 = or disjoint i32 %25, %26, !dbg !17
  %28 = icmp slt i32 %27, 16, !dbg !18
  %29 = srem i32 %16, 512, !dbg !19
  %30 = srem i32 %17, 512, !dbg !19
  %31 = srem i32 %18, 512, !dbg !19
  %32 = srem i32 %19, 512, !dbg !19
  %33 = srem i32 %20, 512, !dbg !19
  %34 = srem i32 %21, 512, !dbg !19
  %35 = srem i32 %22, 512, !dbg !19
  %36 = srem i32 %23, 512, !dbg !19
  %37 = shl i32 %16, 4, !dbg !20
  %38 = shl i32 %17, 4, !dbg !20
  %39 = shl i32 %18, 4, !dbg !20
  %40 = shl i32 %19, 4, !dbg !20
  %41 = shl i32 %20, 4, !dbg !20
  %42 = shl i32 %21, 4, !dbg !20
  %43 = shl i32 %22, 4, !dbg !20
  %44 = shl i32 %23, 4, !dbg !20
  %45 = add i32 %27, %37, !dbg !21
  %46 = add i32 %27, %38, !dbg !21
  %47 = add i32 %27, %39, !dbg !21
  %48 = add i32 %27, %40, !dbg !21
  %49 = add i32 %27, %41, !dbg !21
  %50 = add i32 %27, %42, !dbg !21
  %51 = add i32 %27, %43, !dbg !21
  %52 = add i32 %27, %44, !dbg !21
  %53 = sext i32 %45 to i64, !dbg !22
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !22
  %55 = sext i32 %46 to i64, !dbg !22
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !22
  %57 = sext i32 %47 to i64, !dbg !22
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !22
  %59 = sext i32 %48 to i64, !dbg !22
  %60 = getelementptr float, ptr addrspace(1) %0, i64 %59, !dbg !22
  %61 = sext i32 %49 to i64, !dbg !22
  %62 = getelementptr float, ptr addrspace(1) %0, i64 %61, !dbg !22
  %63 = sext i32 %50 to i64, !dbg !22
  %64 = getelementptr float, ptr addrspace(1) %0, i64 %63, !dbg !22
  %65 = sext i32 %51 to i64, !dbg !22
  %66 = getelementptr float, ptr addrspace(1) %0, i64 %65, !dbg !22
  %67 = sext i32 %52 to i64, !dbg !22
  %68 = getelementptr float, ptr addrspace(1) %0, i64 %67, !dbg !22
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 %28) #4, !dbg !23
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 %28) #4, !dbg !23
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %58, i1 %28) #4, !dbg !23
  %72 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %60, i1 %28) #4, !dbg !23
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 %28) #4, !dbg !23
  %74 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %64, i1 %28) #4, !dbg !23
  %75 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 %28) #4, !dbg !23
  %76 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 %28) #4, !dbg !23
  %77 = getelementptr float, ptr addrspace(1) %1, i64 %53, !dbg !24
  %78 = getelementptr float, ptr addrspace(1) %1, i64 %55, !dbg !24
  %79 = getelementptr float, ptr addrspace(1) %1, i64 %57, !dbg !24
  %80 = getelementptr float, ptr addrspace(1) %1, i64 %59, !dbg !24
  %81 = getelementptr float, ptr addrspace(1) %1, i64 %61, !dbg !24
  %82 = getelementptr float, ptr addrspace(1) %1, i64 %63, !dbg !24
  %83 = getelementptr float, ptr addrspace(1) %1, i64 %65, !dbg !24
  %84 = getelementptr float, ptr addrspace(1) %1, i64 %67, !dbg !24
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %77, i1 %28) #4, !dbg !25
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 %28) #4, !dbg !25
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %79, i1 %28) #4, !dbg !25
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %80, i1 %28) #4, !dbg !25
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %81, i1 %28) #4, !dbg !25
  %90 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %82, i1 %28) #4, !dbg !25
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %83, i1 %28) #4, !dbg !25
  %92 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %84, i1 %28) #4, !dbg !25
  %93 = sdiv i32 %16, 16, !dbg !26
  %94 = sdiv i32 %17, 16, !dbg !26
  %95 = sdiv i32 %18, 16, !dbg !26
  %96 = sdiv i32 %19, 16, !dbg !26
  %97 = sdiv i32 %20, 16, !dbg !26
  %98 = sdiv i32 %21, 16, !dbg !26
  %99 = sdiv i32 %22, 16, !dbg !26
  %100 = sdiv i32 %23, 16, !dbg !26
  %101 = sext i32 %93 to i64, !dbg !27
  %102 = getelementptr float, ptr addrspace(1) %2, i64 %101, !dbg !27
  %103 = sext i32 %94 to i64, !dbg !27
  %104 = getelementptr float, ptr addrspace(1) %2, i64 %103, !dbg !27
  %105 = sext i32 %95 to i64, !dbg !27
  %106 = getelementptr float, ptr addrspace(1) %2, i64 %105, !dbg !27
  %107 = sext i32 %96 to i64, !dbg !27
  %108 = getelementptr float, ptr addrspace(1) %2, i64 %107, !dbg !27
  %109 = sext i32 %97 to i64, !dbg !27
  %110 = getelementptr float, ptr addrspace(1) %2, i64 %109, !dbg !27
  %111 = sext i32 %98 to i64, !dbg !27
  %112 = getelementptr float, ptr addrspace(1) %2, i64 %111, !dbg !27
  %113 = sext i32 %99 to i64, !dbg !27
  %114 = getelementptr float, ptr addrspace(1) %2, i64 %113, !dbg !27
  %115 = sext i32 %100 to i64, !dbg !27
  %116 = getelementptr float, ptr addrspace(1) %2, i64 %115, !dbg !27
  %117 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %102, i1 true) #4, !dbg !28
  %118 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %104, i1 true) #4, !dbg !28
  %119 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %106, i1 true) #4, !dbg !28
  %120 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %108, i1 true) #4, !dbg !28
  %121 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %110, i1 true) #4, !dbg !28
  %122 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %112, i1 true) #4, !dbg !28
  %123 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %114, i1 true) #4, !dbg !28
  %124 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %116, i1 true) #4, !dbg !28
  %125 = getelementptr float, ptr addrspace(1) %3, i64 %101, !dbg !29
  %126 = getelementptr float, ptr addrspace(1) %3, i64 %103, !dbg !29
  %127 = getelementptr float, ptr addrspace(1) %3, i64 %105, !dbg !29
  %128 = getelementptr float, ptr addrspace(1) %3, i64 %107, !dbg !29
  %129 = getelementptr float, ptr addrspace(1) %3, i64 %109, !dbg !29
  %130 = getelementptr float, ptr addrspace(1) %3, i64 %111, !dbg !29
  %131 = getelementptr float, ptr addrspace(1) %3, i64 %113, !dbg !29
  %132 = getelementptr float, ptr addrspace(1) %3, i64 %115, !dbg !29
  %133 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %125, i1 true) #4, !dbg !30
  %134 = bitcast i32 %133 to float, !dbg !30
  %135 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %126, i1 true) #4, !dbg !30
  %136 = bitcast i32 %135 to float, !dbg !30
  %137 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %127, i1 true) #4, !dbg !30
  %138 = bitcast i32 %137 to float, !dbg !30
  %139 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %128, i1 true) #4, !dbg !30
  %140 = bitcast i32 %139 to float, !dbg !30
  %141 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %129, i1 true) #4, !dbg !30
  %142 = bitcast i32 %141 to float, !dbg !30
  %143 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %130, i1 true) #4, !dbg !30
  %144 = bitcast i32 %143 to float, !dbg !30
  %145 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %131, i1 true) #4, !dbg !30
  %146 = bitcast i32 %145 to float, !dbg !30
  %147 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %132, i1 true) #4, !dbg !30
  %148 = bitcast i32 %147 to float, !dbg !30
  %149 = sext i32 %29 to i64, !dbg !31
  %150 = getelementptr float, ptr addrspace(1) %4, i64 %149, !dbg !31
  %151 = sext i32 %30 to i64, !dbg !31
  %152 = getelementptr float, ptr addrspace(1) %4, i64 %151, !dbg !31
  %153 = sext i32 %31 to i64, !dbg !31
  %154 = getelementptr float, ptr addrspace(1) %4, i64 %153, !dbg !31
  %155 = sext i32 %32 to i64, !dbg !31
  %156 = getelementptr float, ptr addrspace(1) %4, i64 %155, !dbg !31
  %157 = sext i32 %33 to i64, !dbg !31
  %158 = getelementptr float, ptr addrspace(1) %4, i64 %157, !dbg !31
  %159 = sext i32 %34 to i64, !dbg !31
  %160 = getelementptr float, ptr addrspace(1) %4, i64 %159, !dbg !31
  %161 = sext i32 %35 to i64, !dbg !31
  %162 = getelementptr float, ptr addrspace(1) %4, i64 %161, !dbg !31
  %163 = sext i32 %36 to i64, !dbg !31
  %164 = getelementptr float, ptr addrspace(1) %4, i64 %163, !dbg !31
  %165 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %150, i1 true) #4, !dbg !32
  %166 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %152, i1 true) #4, !dbg !32
  %167 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %154, i1 true) #4, !dbg !32
  %168 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %156, i1 true) #4, !dbg !32
  %169 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %158, i1 true) #4, !dbg !32
  %170 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %160, i1 true) #4, !dbg !32
  %171 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %162, i1 true) #4, !dbg !32
  %172 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %164, i1 true) #4, !dbg !32
  %173 = getelementptr float, ptr addrspace(1) %5, i64 %149, !dbg !33
  %174 = getelementptr float, ptr addrspace(1) %5, i64 %151, !dbg !33
  %175 = getelementptr float, ptr addrspace(1) %5, i64 %153, !dbg !33
  %176 = getelementptr float, ptr addrspace(1) %5, i64 %155, !dbg !33
  %177 = getelementptr float, ptr addrspace(1) %5, i64 %157, !dbg !33
  %178 = getelementptr float, ptr addrspace(1) %5, i64 %159, !dbg !33
  %179 = getelementptr float, ptr addrspace(1) %5, i64 %161, !dbg !33
  %180 = getelementptr float, ptr addrspace(1) %5, i64 %163, !dbg !33
  %181 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %173, i1 true) #4, !dbg !34
  %182 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %174, i1 true) #4, !dbg !34
  %183 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %175, i1 true) #4, !dbg !34
  %184 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %176, i1 true) #4, !dbg !34
  %185 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %177, i1 true) #4, !dbg !34
  %186 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %178, i1 true) #4, !dbg !34
  %187 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %179, i1 true) #4, !dbg !34
  %188 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %180, i1 true) #4, !dbg !34
  %189 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %134, float 2.560000e+02) #4, !dbg !35
  %190 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %136, float 2.560000e+02) #4, !dbg !35
  %191 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %138, float 2.560000e+02) #4, !dbg !35
  %192 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %140, float 2.560000e+02) #4, !dbg !35
  %193 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %142, float 2.560000e+02) #4, !dbg !35
  %194 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %144, float 2.560000e+02) #4, !dbg !35
  %195 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %146, float 2.560000e+02) #4, !dbg !35
  %196 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %148, float 2.560000e+02) #4, !dbg !35
  %197 = fadd float %189, 0x3EE4F8B580000000, !dbg !36
  %198 = fadd float %190, 0x3EE4F8B580000000, !dbg !36
  %199 = fadd float %191, 0x3EE4F8B580000000, !dbg !36
  %200 = fadd float %192, 0x3EE4F8B580000000, !dbg !36
  %201 = fadd float %193, 0x3EE4F8B580000000, !dbg !36
  %202 = fadd float %194, 0x3EE4F8B580000000, !dbg !36
  %203 = fadd float %195, 0x3EE4F8B580000000, !dbg !36
  %204 = fadd float %196, 0x3EE4F8B580000000, !dbg !36
  %205 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !37
  %.not.i = icmp eq i32 %205, 0, !dbg !37
  br i1 %.not.i, label %208, label %206, !dbg !37

206:                                              ; preds = %9
  %207 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %197), !dbg !37
  br label %__nv_rsqrtf.exit, !dbg !37

208:                                              ; preds = %9
  %209 = tail call float @llvm.nvvm.rsqrt.approx.f(float %197), !dbg !37
  br label %__nv_rsqrtf.exit, !dbg !37

__nv_rsqrtf.exit:                                 ; preds = %206, %208
  %.0.i = phi float [ %207, %206 ], [ %209, %208 ], !dbg !37
  %210 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !37
  %.not.i16 = icmp eq i32 %210, 0, !dbg !37
  br i1 %.not.i16, label %213, label %211, !dbg !37

211:                                              ; preds = %__nv_rsqrtf.exit
  %212 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %198), !dbg !37
  br label %__nv_rsqrtf.exit18, !dbg !37

213:                                              ; preds = %__nv_rsqrtf.exit
  %214 = tail call float @llvm.nvvm.rsqrt.approx.f(float %198), !dbg !37
  br label %__nv_rsqrtf.exit18, !dbg !37

__nv_rsqrtf.exit18:                               ; preds = %211, %213
  %.0.i17 = phi float [ %212, %211 ], [ %214, %213 ], !dbg !37
  %215 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !37
  %.not.i19 = icmp eq i32 %215, 0, !dbg !37
  br i1 %.not.i19, label %218, label %216, !dbg !37

216:                                              ; preds = %__nv_rsqrtf.exit18
  %217 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %199), !dbg !37
  br label %__nv_rsqrtf.exit21, !dbg !37

218:                                              ; preds = %__nv_rsqrtf.exit18
  %219 = tail call float @llvm.nvvm.rsqrt.approx.f(float %199), !dbg !37
  br label %__nv_rsqrtf.exit21, !dbg !37

__nv_rsqrtf.exit21:                               ; preds = %216, %218
  %.0.i20 = phi float [ %217, %216 ], [ %219, %218 ], !dbg !37
  %220 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !37
  %.not.i22 = icmp eq i32 %220, 0, !dbg !37
  br i1 %.not.i22, label %223, label %221, !dbg !37

221:                                              ; preds = %__nv_rsqrtf.exit21
  %222 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %200), !dbg !37
  br label %__nv_rsqrtf.exit24, !dbg !37

223:                                              ; preds = %__nv_rsqrtf.exit21
  %224 = tail call float @llvm.nvvm.rsqrt.approx.f(float %200), !dbg !37
  br label %__nv_rsqrtf.exit24, !dbg !37

__nv_rsqrtf.exit24:                               ; preds = %221, %223
  %.0.i23 = phi float [ %222, %221 ], [ %224, %223 ], !dbg !37
  %225 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !37
  %.not.i25 = icmp eq i32 %225, 0, !dbg !37
  br i1 %.not.i25, label %228, label %226, !dbg !37

226:                                              ; preds = %__nv_rsqrtf.exit24
  %227 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %201), !dbg !37
  br label %__nv_rsqrtf.exit27, !dbg !37

228:                                              ; preds = %__nv_rsqrtf.exit24
  %229 = tail call float @llvm.nvvm.rsqrt.approx.f(float %201), !dbg !37
  br label %__nv_rsqrtf.exit27, !dbg !37

__nv_rsqrtf.exit27:                               ; preds = %226, %228
  %.0.i26 = phi float [ %227, %226 ], [ %229, %228 ], !dbg !37
  %230 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !37
  %.not.i28 = icmp eq i32 %230, 0, !dbg !37
  br i1 %.not.i28, label %233, label %231, !dbg !37

231:                                              ; preds = %__nv_rsqrtf.exit27
  %232 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %202), !dbg !37
  br label %__nv_rsqrtf.exit30, !dbg !37

233:                                              ; preds = %__nv_rsqrtf.exit27
  %234 = tail call float @llvm.nvvm.rsqrt.approx.f(float %202), !dbg !37
  br label %__nv_rsqrtf.exit30, !dbg !37

__nv_rsqrtf.exit30:                               ; preds = %231, %233
  %.0.i29 = phi float [ %232, %231 ], [ %234, %233 ], !dbg !37
  %235 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !37
  %.not.i31 = icmp eq i32 %235, 0, !dbg !37
  br i1 %.not.i31, label %238, label %236, !dbg !37

236:                                              ; preds = %__nv_rsqrtf.exit30
  %237 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %203), !dbg !37
  br label %__nv_rsqrtf.exit33, !dbg !37

238:                                              ; preds = %__nv_rsqrtf.exit30
  %239 = tail call float @llvm.nvvm.rsqrt.approx.f(float %203), !dbg !37
  br label %__nv_rsqrtf.exit33, !dbg !37

__nv_rsqrtf.exit33:                               ; preds = %236, %238
  %.0.i32 = phi float [ %237, %236 ], [ %239, %238 ], !dbg !37
  %240 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !37
  %.not.i34 = icmp eq i32 %240, 0, !dbg !37
  br i1 %.not.i34, label %243, label %241, !dbg !37

241:                                              ; preds = %__nv_rsqrtf.exit33
  %242 = tail call float @llvm.nvvm.rsqrt.approx.ftz.f(float %204), !dbg !37
  br label %__nv_rsqrtf.exit36, !dbg !37

243:                                              ; preds = %__nv_rsqrtf.exit33
  %244 = tail call float @llvm.nvvm.rsqrt.approx.f(float %204), !dbg !37
  br label %__nv_rsqrtf.exit36, !dbg !37

__nv_rsqrtf.exit36:                               ; preds = %241, %243
  %.0.i35 = phi float [ %242, %241 ], [ %244, %243 ], !dbg !37
  %245 = bitcast i32 %76 to float, !dbg !23
  %246 = bitcast i32 %92 to float, !dbg !25
  %247 = fadd float %245, %246, !dbg !38
  %248 = bitcast i32 %124 to float, !dbg !28
  %249 = fsub float %247, %248, !dbg !39
  %250 = bitcast i32 %75 to float, !dbg !23
  %251 = bitcast i32 %91 to float, !dbg !25
  %252 = fadd float %250, %251, !dbg !38
  %253 = bitcast i32 %123 to float, !dbg !28
  %254 = fsub float %252, %253, !dbg !39
  %255 = bitcast i32 %74 to float, !dbg !23
  %256 = bitcast i32 %90 to float, !dbg !25
  %257 = fadd float %255, %256, !dbg !38
  %258 = bitcast i32 %122 to float, !dbg !28
  %259 = fsub float %257, %258, !dbg !39
  %260 = bitcast i32 %73 to float, !dbg !23
  %261 = bitcast i32 %89 to float, !dbg !25
  %262 = fadd float %260, %261, !dbg !38
  %263 = bitcast i32 %121 to float, !dbg !28
  %264 = fsub float %262, %263, !dbg !39
  %265 = bitcast i32 %72 to float, !dbg !23
  %266 = bitcast i32 %88 to float, !dbg !25
  %267 = fadd float %265, %266, !dbg !38
  %268 = bitcast i32 %120 to float, !dbg !28
  %269 = fsub float %267, %268, !dbg !39
  %270 = bitcast i32 %71 to float, !dbg !23
  %271 = bitcast i32 %87 to float, !dbg !25
  %272 = fadd float %270, %271, !dbg !38
  %273 = bitcast i32 %119 to float, !dbg !28
  %274 = fsub float %272, %273, !dbg !39
  %275 = bitcast i32 %70 to float, !dbg !23
  %276 = bitcast i32 %86 to float, !dbg !25
  %277 = fadd float %275, %276, !dbg !38
  %278 = bitcast i32 %118 to float, !dbg !28
  %279 = fsub float %277, %278, !dbg !39
  %280 = bitcast i32 %69 to float, !dbg !23
  %281 = bitcast i32 %85 to float, !dbg !25
  %282 = fadd float %280, %281, !dbg !38
  %283 = bitcast i32 %117 to float, !dbg !28
  %284 = fsub float %282, %283, !dbg !39
  %285 = bitcast i32 %188 to float, !dbg !34
  %286 = bitcast i32 %187 to float, !dbg !34
  %287 = bitcast i32 %186 to float, !dbg !34
  %288 = bitcast i32 %185 to float, !dbg !34
  %289 = bitcast i32 %184 to float, !dbg !34
  %290 = bitcast i32 %183 to float, !dbg !34
  %291 = bitcast i32 %182 to float, !dbg !34
  %292 = bitcast i32 %181 to float, !dbg !34
  %293 = bitcast i32 %172 to float, !dbg !32
  %294 = bitcast i32 %171 to float, !dbg !32
  %295 = bitcast i32 %170 to float, !dbg !32
  %296 = bitcast i32 %169 to float, !dbg !32
  %297 = bitcast i32 %168 to float, !dbg !32
  %298 = bitcast i32 %167 to float, !dbg !32
  %299 = bitcast i32 %166 to float, !dbg !32
  %300 = bitcast i32 %165 to float, !dbg !32
  %301 = or disjoint i32 %25, %15, !dbg !17
  %302 = icmp slt i32 %301, 16, !dbg !18
  %303 = or disjoint i32 %25, %14, !dbg !17
  %304 = icmp slt i32 %303, 16, !dbg !18
  %305 = shl i32 %12, 2, !dbg !12
  %306 = and i32 %305, 60, !dbg !12
  %307 = or disjoint i32 %11, %306, !dbg !13
  %308 = fmul float %284, %.0.i, !dbg !40
  %309 = fmul float %279, %.0.i17, !dbg !40
  %310 = fmul float %274, %.0.i20, !dbg !40
  %311 = fmul float %269, %.0.i23, !dbg !40
  %312 = fmul float %264, %.0.i26, !dbg !40
  %313 = fmul float %259, %.0.i29, !dbg !40
  %314 = fmul float %254, %.0.i32, !dbg !40
  %315 = fmul float %249, %.0.i35, !dbg !40
  %316 = fmul float %308, %300, !dbg !41
  %317 = fmul float %309, %299, !dbg !41
  %318 = fmul float %310, %298, !dbg !41
  %319 = fmul float %311, %297, !dbg !41
  %320 = fmul float %312, %296, !dbg !41
  %321 = fmul float %313, %295, !dbg !41
  %322 = fmul float %314, %294, !dbg !41
  %323 = fmul float %315, %293, !dbg !41
  %324 = fadd float %316, %292, !dbg !42
  %325 = fadd float %317, %291, !dbg !42
  %326 = fadd float %318, %290, !dbg !42
  %327 = fadd float %319, %289, !dbg !42
  %328 = fadd float %320, %288, !dbg !42
  %329 = fadd float %321, %287, !dbg !42
  %330 = fadd float %322, %286, !dbg !42
  %331 = fadd float %323, %285, !dbg !42
  %332 = shl i32 %303, 11, !dbg !43
  %333 = shl i32 %301, 11, !dbg !43
  %334 = add i32 %332, %307, !dbg !44
  %335 = add i32 %333, %307, !dbg !44
  %336 = sext i32 %334 to i64, !dbg !45
  %337 = getelementptr float, ptr addrspace(1) %6, i64 %336, !dbg !45
  %338 = sext i32 %335 to i64, !dbg !45
  %339 = getelementptr float, ptr addrspace(1) %6, i64 %338, !dbg !45
  %340 = shl i32 %12, 6, !dbg !46
  %341 = and i32 %340, 960, !dbg !46
  %342 = or disjoint i32 %341, %14, !dbg !46
  %343 = and i32 %305, 508, !dbg !46
  %344 = lshr exact i32 %341, 2, !dbg !46
  %345 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %344, !dbg !46
  %346 = getelementptr float, ptr addrspace(3) %345, i32 %342, !dbg !46
  %347 = bitcast float %324 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %346, <1 x i32> %347, i1 true) #4, !dbg !46
  %348 = or disjoint i32 %342, 8, !dbg !46
  %349 = getelementptr float, ptr addrspace(3) %345, i32 %348, !dbg !46
  %350 = bitcast float %325 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %349, <1 x i32> %350, i1 true) #4, !dbg !46
  %351 = or disjoint i32 %342, 16, !dbg !46
  %352 = getelementptr float, ptr addrspace(3) %345, i32 %351, !dbg !46
  %353 = bitcast float %326 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %352, <1 x i32> %353, i1 true) #4, !dbg !46
  %354 = or disjoint i32 %342, 24, !dbg !46
  %355 = getelementptr float, ptr addrspace(3) %345, i32 %354, !dbg !46
  %356 = bitcast float %327 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %355, <1 x i32> %356, i1 true) #4, !dbg !46
  %357 = or disjoint i32 %342, 32, !dbg !46
  %358 = getelementptr float, ptr addrspace(3) %345, i32 %357, !dbg !46
  %359 = bitcast float %328 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %358, <1 x i32> %359, i1 true) #4, !dbg !46
  %360 = or disjoint i32 %342, 40, !dbg !46
  %361 = getelementptr float, ptr addrspace(3) %345, i32 %360, !dbg !46
  %362 = bitcast float %329 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %361, <1 x i32> %362, i1 true) #4, !dbg !46
  %363 = or disjoint i32 %342, 48, !dbg !46
  %364 = getelementptr float, ptr addrspace(3) %345, i32 %363, !dbg !46
  %365 = bitcast float %330 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %364, <1 x i32> %365, i1 true) #4, !dbg !46
  %366 = or disjoint i32 %342, 56, !dbg !46
  %367 = getelementptr float, ptr addrspace(3) %345, i32 %366, !dbg !46
  %368 = bitcast float %331 to <1 x i32>, !dbg !46
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %367, <1 x i32> %368, i1 true) #4, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %369 = lshr i32 %305, 4, !dbg !46
  %370 = and i32 %369, 28, !dbg !46
  %371 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %370, !dbg !46
  %372 = getelementptr inbounds float, ptr addrspace(3) %371, i32 %343, !dbg !46
  %373 = or disjoint i32 %343, 512, !dbg !46
  %374 = lshr i32 %373, 4, !dbg !46
  %375 = and i32 %374, 60, !dbg !46
  %376 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %375, !dbg !46
  %377 = getelementptr inbounds float, ptr addrspace(3) %376, i32 %373, !dbg !46
  %378 = load <4 x i32>, ptr addrspace(3) %377, align 16, !dbg !46
  %.extract = load i32, ptr addrspace(3) %372, align 16, !dbg !46
  %379 = getelementptr inbounds i8, ptr addrspace(3) %372, i32 4, !dbg !46
  %.extract9 = load i32, ptr addrspace(3) %379, align 4, !dbg !46
  %380 = getelementptr inbounds i8, ptr addrspace(3) %372, i32 8, !dbg !46
  %.extract10 = load i32, ptr addrspace(3) %380, align 8, !dbg !46
  %381 = getelementptr inbounds i8, ptr addrspace(3) %372, i32 12, !dbg !46
  %.extract11 = load i32, ptr addrspace(3) %381, align 4, !dbg !46
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract9, i32 %.extract10, i32 %.extract11, ptr addrspace(1) %337, i1 %304) #4, !dbg !46
  %.extract12 = extractelement <4 x i32> %378, i64 0, !dbg !46
  %.extract13 = extractelement <4 x i32> %378, i64 1, !dbg !46
  %.extract14 = extractelement <4 x i32> %378, i64 2, !dbg !46
  %.extract15 = extractelement <4 x i32> %378, i64 3, !dbg !46
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract12, i32 %.extract13, i32 %.extract14, i32 %.extract15, ptr addrspace(1) %339, i1 %302) #4, !dbg !46
  ret void, !dbg !47
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.rsqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cmdkxa557rreg7js7t62j4e622sxzgh6exkvh7az5glbbx3sgxa7.py", directory: "inductor_cache/md")
!4 = !{ptr @triton_poi_fused_clone_41, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_clone_41, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_clone_41", linkageName: "triton_poi_fused_clone_41", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 31, column: 60, scope: !7)
!21 = !DILocation(line: 31, column: 57, scope: !7)
!22 = !DILocation(line: 31, column: 30, scope: !7)
!23 = !DILocation(line: 31, column: 65, scope: !7)
!24 = !DILocation(line: 32, column: 30, scope: !7)
!25 = !DILocation(line: 32, column: 65, scope: !7)
!26 = !DILocation(line: 33, column: 36, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 33, column: 41, scope: !7)
!29 = !DILocation(line: 34, column: 30, scope: !7)
!30 = !DILocation(line: 34, column: 41, scope: !7)
!31 = !DILocation(line: 35, column: 31, scope: !7)
!32 = !DILocation(line: 35, column: 36, scope: !7)
!33 = !DILocation(line: 36, column: 31, scope: !7)
!34 = !DILocation(line: 36, column: 36, scope: !7)
!35 = !DILocation(line: 40, column: 18, scope: !7)
!36 = !DILocation(line: 42, column: 18, scope: !7)
!37 = !DILocation(line: 43, column: 28, scope: !7)
!38 = !DILocation(line: 37, column: 18, scope: !7)
!39 = !DILocation(line: 38, column: 18, scope: !7)
!40 = !DILocation(line: 44, column: 19, scope: !7)
!41 = !DILocation(line: 45, column: 20, scope: !7)
!42 = !DILocation(line: 46, column: 20, scope: !7)
!43 = !DILocation(line: 47, column: 35, scope: !7)
!44 = !DILocation(line: 47, column: 30, scope: !7)
!45 = !DILocation(line: 47, column: 25, scope: !7)
!46 = !DILocation(line: 47, column: 47, scope: !7)
!47 = !DILocation(line: 47, column: 4, scope: !7)
