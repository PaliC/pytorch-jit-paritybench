; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__unsafe_index_add_leaky_relu_mul_sigmoid_sub_8(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, i32 %10) local_unnamed_addr !dbg !7 {
  %12 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %13 = shl i32 %12, 7, !dbg !11
  %14 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %15 = and i32 %14, 127, !dbg !12
  %16 = or disjoint i32 %13, %15, !dbg !13
  %17 = icmp slt i32 %16, 1024, !dbg !14
  %.frozen = freeze i32 %16, !dbg !15
  %18 = sdiv i32 %.frozen, 8, !dbg !15
  %19 = srem i32 %18, 8, !dbg !16
  %20 = mul i32 %18, 8, !dbg !17
  %.decomposed = sub i32 %.frozen, %20, !dbg !17
  %21 = sdiv i32 %16, 64, !dbg !18
  %22 = sext i32 %19 to i64, !dbg !19
  %23 = getelementptr i64, ptr addrspace(1) %1, i64 %22, !dbg !19
  %24 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %23, i1 %17) #1, !dbg !20
  %25 = sext i32 %.decomposed to i64, !dbg !21
  %26 = getelementptr i64, ptr addrspace(1) %2, i64 %25, !dbg !21
  %27 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %26, i1 %17) #1, !dbg !22
  %28 = getelementptr i64, ptr addrspace(1) %6, i64 %22, !dbg !23
  %29 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %28, i1 %17) #1, !dbg !24
  %30 = getelementptr i64, ptr addrspace(1) %7, i64 %25, !dbg !25
  %31 = tail call i64 asm sideeffect "mov.u64 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b64 { $0 }, [ $1 + 0 ];", "=l,l,b"(ptr addrspace(1) %30, i1 %17) #1, !dbg !26
  %32 = getelementptr float, ptr addrspace(1) %8, i64 %25, !dbg !27
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %32, i1 %17) #1, !dbg !28
  %34 = getelementptr float, ptr addrspace(1) %9, i64 %22, !dbg !29
  %35 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %34, i1 %17) #1, !dbg !30
  %36 = bitcast i32 %35 to float, !dbg !30
  %37 = lshr i64 %24, 61, !dbg !31
  %38 = and i64 %37, 4, !dbg !31
  %39 = add i64 %38, %24, !dbg !31
  %40 = lshr i64 %27, 61, !dbg !32
  %41 = and i64 %40, 4, !dbg !32
  %42 = add i64 %41, %27, !dbg !32
  %43 = shl i64 %39, 2, !dbg !33
  %44 = shl nsw i32 %21, 4, !dbg !34
  %45 = sext i32 %44 to i64, !dbg !35
  %46 = add i64 %43, %45, !dbg !36
  %47 = add i64 %46, %42, !dbg !35
  %48 = getelementptr float, ptr addrspace(1) %3, i64 %47, !dbg !37
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 %17) #1, !dbg !38
  %50 = getelementptr float, ptr addrspace(1) %4, i64 %47, !dbg !39
  %51 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 %17) #1, !dbg !40
  %52 = getelementptr float, ptr addrspace(1) %5, i64 %47, !dbg !41
  %53 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %52, i1 %17) #1, !dbg !42
  %54 = bitcast i32 %53 to float, !dbg !42
  %55 = fsub float 0.000000e+00, %54, !dbg !43
  %56 = fmul float %55, 0x3FF7154760000000, !dbg !47
  %57 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %56) #1, !dbg !47
  %58 = fadd float %57, 1.000000e+00, !dbg !48
  %59 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %58) #1, !dbg !49
  %60 = lshr i64 %29, 61, !dbg !50
  %61 = and i64 %60, 4, !dbg !50
  %62 = add i64 %61, %29, !dbg !50
  %63 = shl i64 %62, 2, !dbg !51
  %64 = add i64 %42, %45, !dbg !52
  %65 = add i64 %64, %63, !dbg !53
  %66 = getelementptr float, ptr addrspace(1) %3, i64 %65, !dbg !54
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 %17) #1, !dbg !55
  %68 = getelementptr float, ptr addrspace(1) %4, i64 %65, !dbg !56
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 %17) #1, !dbg !57
  %70 = getelementptr float, ptr addrspace(1) %5, i64 %65, !dbg !58
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 %17) #1, !dbg !59
  %72 = bitcast i32 %71 to float, !dbg !59
  %73 = fsub float 0.000000e+00, %72, !dbg !60
  %74 = fmul float %73, 0x3FF7154760000000, !dbg !62
  %75 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %74) #1, !dbg !62
  %76 = fadd float %75, 1.000000e+00, !dbg !63
  %77 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %76) #1, !dbg !64
  %78 = lshr i64 %31, 61, !dbg !65
  %79 = and i64 %78, 4, !dbg !65
  %80 = add i64 %79, %31, !dbg !65
  %81 = add i64 %63, %45, !dbg !66
  %82 = add i64 %81, %80, !dbg !67
  %83 = getelementptr float, ptr addrspace(1) %3, i64 %82, !dbg !68
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %83, i1 %17) #1, !dbg !69
  %85 = getelementptr float, ptr addrspace(1) %4, i64 %82, !dbg !70
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %85, i1 %17) #1, !dbg !71
  %87 = getelementptr float, ptr addrspace(1) %5, i64 %82, !dbg !72
  %88 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %87, i1 %17) #1, !dbg !73
  %89 = bitcast i32 %88 to float, !dbg !73
  %90 = fsub float 0.000000e+00, %89, !dbg !74
  %91 = fmul float %90, 0x3FF7154760000000, !dbg !76
  %92 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %91) #1, !dbg !76
  %93 = fadd float %92, 1.000000e+00, !dbg !77
  %94 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %93) #1, !dbg !78
  %95 = add i64 %46, %80, !dbg !79
  %96 = getelementptr float, ptr addrspace(1) %3, i64 %95, !dbg !80
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %96, i1 %17) #1, !dbg !81
  %98 = getelementptr float, ptr addrspace(1) %4, i64 %95, !dbg !82
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %98, i1 %17) #1, !dbg !83
  %100 = getelementptr float, ptr addrspace(1) %5, i64 %95, !dbg !84
  %101 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %100, i1 %17) #1, !dbg !85
  %102 = bitcast i32 %101 to float, !dbg !85
  %103 = fsub float 0.000000e+00, %102, !dbg !86
  %104 = fmul float %103, 0x3FF7154760000000, !dbg !88
  %105 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %104) #1, !dbg !88
  %106 = fadd float %105, 1.000000e+00, !dbg !89
  %107 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %106) #1, !dbg !90
  %108 = insertelement <2 x i32> poison, i32 %49, i64 0, !dbg !38
  %109 = insertelement <2 x i32> %108, i32 %67, i64 1, !dbg !38
  %110 = bitcast <2 x i32> %109 to <2 x float>, !dbg !38
  %111 = fcmp ogt <2 x float> %110, zeroinitializer, !dbg !91
  %112 = fmul <2 x float> %110, splat (float 0x3FA47AE140000000), !dbg !92
  %113 = select <2 x i1> %111, <2 x float> %110, <2 x float> %112, !dbg !93
  %114 = insertelement <2 x i32> poison, i32 %51, i64 0, !dbg !40
  %115 = insertelement <2 x i32> %114, i32 %69, i64 1, !dbg !40
  %116 = bitcast <2 x i32> %115 to <2 x float>, !dbg !40
  %117 = fmul <2 x float> %113, %116, !dbg !94
  %118 = insertelement <2 x float> poison, float %59, i64 0, !dbg !95
  %119 = insertelement <2 x float> %118, float %77, i64 1, !dbg !95
  %120 = fadd <2 x float> %117, %119, !dbg !95
  %121 = insertelement <2 x i32> poison, i32 %97, i64 0, !dbg !81
  %122 = insertelement <2 x i32> %121, i32 %84, i64 1, !dbg !81
  %123 = bitcast <2 x i32> %122 to <2 x float>, !dbg !81
  %124 = fcmp ogt <2 x float> %123, zeroinitializer, !dbg !96
  %125 = fmul <2 x float> %123, splat (float 0x3FA47AE140000000), !dbg !97
  %126 = select <2 x i1> %124, <2 x float> %123, <2 x float> %125, !dbg !98
  %127 = insertelement <2 x i32> poison, i32 %99, i64 0, !dbg !83
  %128 = insertelement <2 x i32> %127, i32 %86, i64 1, !dbg !83
  %129 = bitcast <2 x i32> %128 to <2 x float>, !dbg !83
  %130 = fmul <2 x float> %126, %129, !dbg !99
  %131 = insertelement <2 x float> poison, float %107, i64 0, !dbg !100
  %132 = insertelement <2 x float> %131, float %94, i64 1, !dbg !100
  %133 = fadd <2 x float> %130, %132, !dbg !100
  %134 = fsub <2 x float> %133, %120, !dbg !101
  %135 = insertelement <2 x i32> poison, i32 %33, i64 0, !dbg !102
  %136 = bitcast <2 x i32> %135 to <2 x float>, !dbg !102
  %137 = shufflevector <2 x float> %136, <2 x float> poison, <2 x i32> zeroinitializer, !dbg !102
  %138 = fmul <2 x float> %134, %137, !dbg !102
  %139 = fadd <2 x float> %120, %138, !dbg !103
  %140 = extractelement <2 x float> %139, i64 0, !dbg !104
  %141 = extractelement <2 x float> %139, i64 1, !dbg !105
  %142 = fsub float %140, %141, !dbg !104
  %143 = fmul float %142, %36, !dbg !106
  %144 = fadd float %141, %143, !dbg !105
  %145 = sext i32 %16 to i64, !dbg !107
  %146 = getelementptr float, ptr addrspace(1) %0, i64 %145, !dbg !107
  %147 = bitcast float %144 to i32, !dbg !108
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %147, ptr addrspace(1) %146, i1 %17) #1, !dbg !108
  ret void, !dbg !109
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cpgmghyp3pelara5zqnvpmoa3pz4xrbdbkwfwcemb3wj4je3dylj.py", directory: "inductor_cache/pg")
!4 = !{ptr @triton_poi_fused__unsafe_index_add_leaky_relu_mul_sigmoid_sub_8, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__unsafe_index_add_leaky_relu_mul_sigmoid_sub_8, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__unsafe_index_add_leaky_relu_mul_sigmoid_sub_8", linkageName: "triton_poi_fused__unsafe_index_add_leaky_relu_mul_sigmoid_sub_8", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 26, scope: !7)
!17 = !DILocation(line: 25, column: 19, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 28, column: 30, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 29, column: 30, scope: !7)
!22 = !DILocation(line: 29, column: 35, scope: !7)
!23 = !DILocation(line: 30, column: 31, scope: !7)
!24 = !DILocation(line: 30, column: 36, scope: !7)
!25 = !DILocation(line: 31, column: 31, scope: !7)
!26 = !DILocation(line: 31, column: 36, scope: !7)
!27 = !DILocation(line: 32, column: 31, scope: !7)
!28 = !DILocation(line: 32, column: 36, scope: !7)
!29 = !DILocation(line: 33, column: 31, scope: !7)
!30 = !DILocation(line: 33, column: 36, scope: !7)
!31 = !DILocation(line: 37, column: 32, scope: !7)
!32 = !DILocation(line: 40, column: 32, scope: !7)
!33 = !DILocation(line: 41, column: 39, scope: !7)
!34 = !DILocation(line: 41, column: 49, scope: !7)
!35 = !DILocation(line: 41, column: 46, scope: !7)
!36 = !DILocation(line: 41, column: 37, scope: !7)
!37 = !DILocation(line: 41, column: 30, scope: !7)
!38 = !DILocation(line: 41, column: 54, scope: !7)
!39 = !DILocation(line: 47, column: 31, scope: !7)
!40 = !DILocation(line: 47, column: 55, scope: !7)
!41 = !DILocation(line: 49, column: 31, scope: !7)
!42 = !DILocation(line: 49, column: 55, scope: !7)
!43 = !DILocation(line: 47, column: 30, scope: !44, inlinedAt: !46)
!44 = distinct !DILexicalBlockFile(scope: !7, file: !45, discriminator: 0)
!45 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!46 = !DILocation(line: 50, column: 23, scope: !7)
!47 = !DILocation(line: 47, column: 29, scope: !44, inlinedAt: !46)
!48 = !DILocation(line: 47, column: 20, scope: !44, inlinedAt: !46)
!49 = !DILocation(line: 47, column: 16, scope: !44, inlinedAt: !46)
!50 = !DILocation(line: 54, column: 35, scope: !7)
!51 = !DILocation(line: 55, column: 40, scope: !7)
!52 = !DILocation(line: 55, column: 38, scope: !7)
!53 = !DILocation(line: 55, column: 48, scope: !7)
!54 = !DILocation(line: 55, column: 31, scope: !7)
!55 = !DILocation(line: 55, column: 56, scope: !7)
!56 = !DILocation(line: 59, column: 31, scope: !7)
!57 = !DILocation(line: 59, column: 56, scope: !7)
!58 = !DILocation(line: 61, column: 31, scope: !7)
!59 = !DILocation(line: 61, column: 56, scope: !7)
!60 = !DILocation(line: 47, column: 30, scope: !44, inlinedAt: !61)
!61 = !DILocation(line: 62, column: 23, scope: !7)
!62 = !DILocation(line: 47, column: 29, scope: !44, inlinedAt: !61)
!63 = !DILocation(line: 47, column: 20, scope: !44, inlinedAt: !61)
!64 = !DILocation(line: 47, column: 16, scope: !44, inlinedAt: !61)
!65 = !DILocation(line: 66, column: 35, scope: !7)
!66 = !DILocation(line: 67, column: 39, scope: !7)
!67 = !DILocation(line: 67, column: 49, scope: !7)
!68 = !DILocation(line: 67, column: 31, scope: !7)
!69 = !DILocation(line: 67, column: 57, scope: !7)
!70 = !DILocation(line: 71, column: 31, scope: !7)
!71 = !DILocation(line: 71, column: 57, scope: !7)
!72 = !DILocation(line: 73, column: 31, scope: !7)
!73 = !DILocation(line: 73, column: 57, scope: !7)
!74 = !DILocation(line: 47, column: 30, scope: !44, inlinedAt: !75)
!75 = !DILocation(line: 74, column: 23, scope: !7)
!76 = !DILocation(line: 47, column: 29, scope: !44, inlinedAt: !75)
!77 = !DILocation(line: 47, column: 20, scope: !44, inlinedAt: !75)
!78 = !DILocation(line: 47, column: 16, scope: !44, inlinedAt: !75)
!79 = !DILocation(line: 79, column: 48, scope: !7)
!80 = !DILocation(line: 79, column: 31, scope: !7)
!81 = !DILocation(line: 79, column: 56, scope: !7)
!82 = !DILocation(line: 83, column: 31, scope: !7)
!83 = !DILocation(line: 83, column: 56, scope: !7)
!84 = !DILocation(line: 85, column: 31, scope: !7)
!85 = !DILocation(line: 85, column: 56, scope: !7)
!86 = !DILocation(line: 47, column: 30, scope: !44, inlinedAt: !87)
!87 = !DILocation(line: 86, column: 23, scope: !7)
!88 = !DILocation(line: 47, column: 29, scope: !44, inlinedAt: !87)
!89 = !DILocation(line: 47, column: 20, scope: !44, inlinedAt: !87)
!90 = !DILocation(line: 47, column: 16, scope: !44, inlinedAt: !87)
!91 = !DILocation(line: 43, column: 19, scope: !7)
!92 = !DILocation(line: 45, column: 19, scope: !7)
!93 = !DILocation(line: 46, column: 34, scope: !7)
!94 = !DILocation(line: 48, column: 20, scope: !7)
!95 = !DILocation(line: 51, column: 20, scope: !7)
!96 = !DILocation(line: 80, column: 20, scope: !7)
!97 = !DILocation(line: 81, column: 20, scope: !7)
!98 = !DILocation(line: 82, column: 35, scope: !7)
!99 = !DILocation(line: 84, column: 20, scope: !7)
!100 = !DILocation(line: 87, column: 20, scope: !7)
!101 = !DILocation(line: 88, column: 20, scope: !7)
!102 = !DILocation(line: 89, column: 20, scope: !7)
!103 = !DILocation(line: 90, column: 20, scope: !7)
!104 = !DILocation(line: 91, column: 20, scope: !7)
!105 = !DILocation(line: 93, column: 20, scope: !7)
!106 = !DILocation(line: 92, column: 20, scope: !7)
!107 = !DILocation(line: 94, column: 28, scope: !7)
!108 = !DILocation(line: 94, column: 40, scope: !7)
!109 = !DILocation(line: 94, column: 4, scope: !7)
