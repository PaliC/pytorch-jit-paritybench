; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_constant_pad_nd_hardtanh_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %9 = shl i32 %8, 9, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 1, !dbg !12
  %12 = and i32 %11, 510, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %14 = icmp slt i32 %13, 139392, !dbg !14
  %.frozen = freeze i32 %13, !dbg !15
  %15 = sdiv i32 %.frozen, 1056, !dbg !15
  %16 = srem i32 %15, 33, !dbg !16
  %.frozen7 = freeze i32 %13, !dbg !17
  %17 = sdiv i32 %.frozen7, 32, !dbg !17
  %18 = srem i32 %17, 33, !dbg !18
  %19 = sdiv i32 %13, 34848, !dbg !19
  %20 = mul i32 %15, 1056, !dbg !20
  %.decomposed = sub i32 %.frozen, %20, !dbg !20
  %21 = mul i32 %17, 32, !dbg !21
  %.decomposed8 = sub i32 %.frozen7, %21, !dbg !21
  %22 = add nsw i32 %16, -1, !dbg !22
  %23 = icmp ult i32 %22, 31, !dbg !22
  %24 = add nsw i32 %18, -1, !dbg !23
  %25 = icmp ult i32 %24, 31, !dbg !23
  %26 = and i1 %23, %25, !dbg !23
  %27 = add nsw i32 %.decomposed, -1024, !dbg !24
  %28 = mul nsw i32 %16, 992, !dbg !25
  %29 = mul nsw i32 %19, 30752, !dbg !26
  %30 = add nsw i32 %27, %29, !dbg !27
  %31 = add nsw i32 %30, %28, !dbg !28
  %32 = sext i32 %31 to i64, !dbg !29
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !29
  %34 = and i1 %14, %26, !dbg !30
  %35 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %33, i1 %34, i32 0, i1 %34, i32 0, i1 %34) #3, !dbg !31
  %36 = sext i32 %.decomposed8 to i64, !dbg !32
  %37 = getelementptr float, ptr addrspace(1) %1, i64 %36, !dbg !32
  %38 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %37, i1 %34, i32 0, i1 %34, i32 0, i1 %34) #3, !dbg !33
  %39 = getelementptr float, ptr addrspace(1) %2, i64 %36, !dbg !34
  %40 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %39, i1 %34, i32 0, i1 %34, i32 0, i1 %34) #3, !dbg !35
  %41 = extractvalue { i32, i32 } %40, 0, !dbg !35
  %42 = extractvalue { i32, i32 } %40, 1, !dbg !35
  %43 = bitcast i32 %41 to float, !dbg !35
  %44 = bitcast i32 %42 to float, !dbg !35
  %45 = fadd float %43, 0x3EE4F8B580000000, !dbg !36
  %46 = fadd float %44, 0x3EE4F8B580000000, !dbg !36
  %47 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !37
  %.not.i = icmp eq i32 %47, 0, !dbg !37
  %48 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !37
  %.not1.i = icmp eq i32 %48, 0, !dbg !37
  br i1 %.not.i, label %54, label %49, !dbg !37

49:                                               ; preds = %7
  br i1 %.not1.i, label %52, label %50, !dbg !37

50:                                               ; preds = %49
  %51 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %45) #3, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

52:                                               ; preds = %49
  %53 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %45) #3, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

54:                                               ; preds = %7
  br i1 %.not1.i, label %57, label %55, !dbg !37

55:                                               ; preds = %54
  %56 = tail call float @llvm.nvvm.sqrt.rn.f(float %45) #3, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

57:                                               ; preds = %54
  %58 = tail call float @llvm.nvvm.sqrt.approx.f(float %45) #3, !dbg !37
  br label %__nv_sqrtf.exit, !dbg !37

__nv_sqrtf.exit:                                  ; preds = %50, %52, %55, %57
  %.0.i = phi float [ %51, %50 ], [ %53, %52 ], [ %56, %55 ], [ %58, %57 ], !dbg !37
  %59 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !37
  %.not.i2 = icmp eq i32 %59, 0, !dbg !37
  %60 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !37
  %.not1.i5 = icmp eq i32 %60, 0, !dbg !37
  br i1 %.not.i2, label %66, label %61, !dbg !37

61:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i5, label %64, label %62, !dbg !37

62:                                               ; preds = %61
  %63 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %46) #3, !dbg !37
  br label %__nv_sqrtf.exit6, !dbg !37

64:                                               ; preds = %61
  %65 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %46) #3, !dbg !37
  br label %__nv_sqrtf.exit6, !dbg !37

66:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i5, label %69, label %67, !dbg !37

67:                                               ; preds = %66
  %68 = tail call float @llvm.nvvm.sqrt.rn.f(float %46) #3, !dbg !37
  br label %__nv_sqrtf.exit6, !dbg !37

69:                                               ; preds = %66
  %70 = tail call float @llvm.nvvm.sqrt.approx.f(float %46) #3, !dbg !37
  br label %__nv_sqrtf.exit6, !dbg !37

__nv_sqrtf.exit6:                                 ; preds = %62, %64, %67, %69
  %.0.i4 = phi float [ %63, %62 ], [ %65, %64 ], [ %68, %67 ], [ %70, %69 ], !dbg !37
  %71 = extractvalue { i32, i32 } %35, 1, !dbg !31
  %72 = bitcast i32 %71 to float, !dbg !31
  %73 = extractvalue { i32, i32 } %38, 1, !dbg !33
  %74 = bitcast i32 %73 to float, !dbg !33
  %75 = fsub float %72, %74, !dbg !38
  %76 = extractvalue { i32, i32 } %35, 0, !dbg !31
  %77 = bitcast i32 %76 to float, !dbg !31
  %78 = extractvalue { i32, i32 } %38, 0, !dbg !33
  %79 = bitcast i32 %78 to float, !dbg !33
  %80 = fsub float %77, %79, !dbg !38
  %81 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !39
  %82 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i4) #3, !dbg !39
  %83 = fmul float %80, %81, !dbg !40
  %84 = fmul float %75, %82, !dbg !40
  %85 = getelementptr float, ptr addrspace(1) %3, i64 %36, !dbg !41
  %86 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %85, i1 %34, i32 0, i1 %34, i32 0, i1 %34) #3, !dbg !42
  %87 = extractvalue { i32, i32 } %86, 0, !dbg !42
  %88 = extractvalue { i32, i32 } %86, 1, !dbg !42
  %89 = bitcast i32 %87 to float, !dbg !42
  %90 = bitcast i32 %88 to float, !dbg !42
  %91 = fmul float %83, %89, !dbg !43
  %92 = fmul float %84, %90, !dbg !43
  %93 = getelementptr float, ptr addrspace(1) %4, i64 %36, !dbg !44
  %94 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %93, i1 %34, i32 0, i1 %34, i32 0, i1 %34) #3, !dbg !45
  %95 = extractvalue { i32, i32 } %94, 0, !dbg !45
  %96 = extractvalue { i32, i32 } %94, 1, !dbg !45
  %97 = bitcast i32 %95 to float, !dbg !45
  %98 = bitcast i32 %96 to float, !dbg !45
  %99 = fadd float %91, %97, !dbg !46
  %100 = fadd float %92, %98, !dbg !46
  %.inv = fcmp ole float %99, 0.000000e+00, !dbg !47
  %101 = select i1 %.inv, float 0.000000e+00, float %99, !dbg !47
  %.inv1 = fcmp ole float %100, 0.000000e+00, !dbg !47
  %102 = select i1 %.inv1, float 0.000000e+00, float %100, !dbg !47
  %103 = fcmp olt float %101, 6.000000e+00, !dbg !51
  %104 = fcmp olt float %102, 6.000000e+00, !dbg !51
  %105 = fcmp uno float %101, 0.000000e+00, !dbg !53
  %106 = fcmp uno float %102, 0.000000e+00, !dbg !53
  %107 = or i1 %103, %105, !dbg !54
  %108 = or i1 %104, %106, !dbg !54
  %109 = sext i32 %13 to i64, !dbg !55
  %110 = getelementptr float, ptr addrspace(1) %5, i64 %109, !dbg !55
  %111 = bitcast float %101 to i32, !dbg !56
  %112 = select i1 %107, i32 %111, i32 1086324736, !dbg !57
  %113 = select i1 %26, i32 %112, i32 0, !dbg !58
  %114 = bitcast float %102 to i32, !dbg !56
  %115 = select i1 %108, i32 %114, i32 1086324736, !dbg !57
  %116 = select i1 %26, i32 %115, i32 0, !dbg !58
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %113, i32 %116, ptr addrspace(1) %110, i1 %14) #3, !dbg !56
  ret void, !dbg !59
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ck7x4qsvhtr35t2tmlqh5ibtsedyestsjev53yxkuw5okiexyt3f.py", directory: "inductor_cache/k7")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_constant_pad_nd_hardtanh_2, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_constant_pad_nd_hardtanh_2, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_constant_pad_nd_hardtanh_2", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_constant_pad_nd_hardtanh_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 29, scope: !7)
!17 = !DILocation(line: 25, column: 21, scope: !7)
!18 = !DILocation(line: 25, column: 27, scope: !7)
!19 = !DILocation(line: 26, column: 19, scope: !7)
!20 = !DILocation(line: 27, column: 19, scope: !7)
!21 = !DILocation(line: 28, column: 19, scope: !7)
!22 = !DILocation(line: 38, column: 18, scope: !7)
!23 = !DILocation(line: 40, column: 19, scope: !7)
!24 = !DILocation(line: 41, column: 41, scope: !7)
!25 = !DILocation(line: 41, column: 50, scope: !7)
!26 = !DILocation(line: 41, column: 61, scope: !7)
!27 = !DILocation(line: 41, column: 46, scope: !7)
!28 = !DILocation(line: 41, column: 55, scope: !7)
!29 = !DILocation(line: 41, column: 31, scope: !7)
!30 = !DILocation(line: 41, column: 74, scope: !7)
!31 = !DILocation(line: 41, column: 66, scope: !7)
!32 = !DILocation(line: 42, column: 31, scope: !7)
!33 = !DILocation(line: 42, column: 36, scope: !7)
!34 = !DILocation(line: 44, column: 31, scope: !7)
!35 = !DILocation(line: 44, column: 36, scope: !7)
!36 = !DILocation(line: 46, column: 20, scope: !7)
!37 = !DILocation(line: 47, column: 27, scope: !7)
!38 = !DILocation(line: 43, column: 20, scope: !7)
!39 = !DILocation(line: 49, column: 20, scope: !7)
!40 = !DILocation(line: 52, column: 20, scope: !7)
!41 = !DILocation(line: 53, column: 31, scope: !7)
!42 = !DILocation(line: 53, column: 36, scope: !7)
!43 = !DILocation(line: 54, column: 20, scope: !7)
!44 = !DILocation(line: 55, column: 31, scope: !7)
!45 = !DILocation(line: 55, column: 36, scope: !7)
!46 = !DILocation(line: 56, column: 20, scope: !7)
!47 = !DILocation(line: 121, column: 29, scope: !48, inlinedAt: !50)
!48 = distinct !DILexicalBlockFile(scope: !7, file: !49, discriminator: 0)
!49 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!50 = !DILocation(line: 58, column: 42, scope: !7)
!51 = !DILocation(line: 110, column: 15, scope: !48, inlinedAt: !52)
!52 = !DILocation(line: 60, column: 42, scope: !7)
!53 = !DILocation(line: 112, column: 21, scope: !48, inlinedAt: !52)
!54 = !DILocation(line: 112, column: 16, scope: !48, inlinedAt: !52)
!55 = !DILocation(line: 63, column: 25, scope: !7)
!56 = !DILocation(line: 63, column: 37, scope: !7)
!57 = !DILocation(line: 113, column: 29, scope: !48, inlinedAt: !52)
!58 = !DILocation(line: 62, column: 35, scope: !7)
!59 = !DILocation(line: 63, column: 4, scope: !7)
