; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_gt_sum_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !10
  %6 = and i32 %5, 31, !dbg !10
  %7 = lshr i32 %5, 5, !dbg !10
  %8 = shl i32 %5, 2, !dbg !10
  %9 = and i32 %8, 252, !dbg !10
  %10 = zext nneg i32 %9 to i64, !dbg !11
  %11 = getelementptr float, ptr addrspace(1) %0, i64 %10, !dbg !11
  %12 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %11, i1 true) #3, !dbg !12
  %13 = extractvalue { i32, i32, i32, i32 } %12, 0, !dbg !12
  %14 = extractvalue { i32, i32, i32, i32 } %12, 1, !dbg !12
  %15 = extractvalue { i32, i32, i32, i32 } %12, 2, !dbg !12
  %16 = extractvalue { i32, i32, i32, i32 } %12, 3, !dbg !12
  %17 = icmp eq i32 %6, 0, !dbg !13
  %18 = and i32 %7, 1, !dbg !13
  %19 = zext nneg i32 %18 to i64, !dbg !13
  %20 = getelementptr float, ptr addrspace(3) @global_smem, i64 %19, !dbg !13
  %21 = icmp slt i32 %5, 2, !dbg !13
  %22 = sext i32 %5 to i64, !dbg !13
  %23 = getelementptr float, ptr addrspace(3) @global_smem, i64 %22, !dbg !13
  %24 = and i32 %5, 1, !dbg !13
  %25 = icmp eq i32 %24, 0, !dbg !13
  %26 = and i1 %21, %25, !dbg !13
  %27 = getelementptr i1, ptr addrspace(1) %2, i64 %10, !dbg !17
  %28 = insertelement <4 x i32> poison, i32 %13, i64 0, !dbg !12
  %29 = insertelement <4 x i32> %28, i32 %14, i64 1, !dbg !12
  %30 = insertelement <4 x i32> %29, i32 %15, i64 2, !dbg !12
  %31 = insertelement <4 x i32> %30, i32 %16, i64 3, !dbg !12
  %32 = bitcast <4 x i32> %31 to <4 x float>, !dbg !12
  %shift = shufflevector <4 x float> %32, <4 x float> poison, <4 x i32> <i32 1, i32 poison, i32 poison, i32 poison>, !dbg !18
  %33 = fadd <4 x float> %shift, %32, !dbg !18
  %shift1 = shufflevector <4 x float> %32, <4 x float> poison, <4 x i32> <i32 2, i32 poison, i32 poison, i32 poison>, !dbg !18
  %34 = fadd <4 x float> %33, %shift1, !dbg !18
  %shift2 = shufflevector <4 x float> %32, <4 x float> poison, <4 x i32> <i32 3, i32 poison, i32 poison, i32 poison>, !dbg !18
  %35 = fadd <4 x float> %34, %shift2, !dbg !18
  %36 = extractelement <4 x float> %35, i64 0, !dbg !18
  %37 = bitcast float %36 to i32, !dbg !13
  %38 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %37, i32 16, i32 31), !dbg !13
  %39 = bitcast i32 %38 to float, !dbg !13
  %40 = fadd float %36, %39, !dbg !18
  %41 = bitcast float %40 to i32, !dbg !13
  %42 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %41, i32 8, i32 31), !dbg !13
  %43 = bitcast i32 %42 to float, !dbg !13
  %44 = fadd float %40, %43, !dbg !18
  %45 = bitcast float %44 to i32, !dbg !13
  %46 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %45, i32 4, i32 31), !dbg !13
  %47 = bitcast i32 %46 to float, !dbg !13
  %48 = fadd float %44, %47, !dbg !18
  %49 = bitcast float %48 to i32, !dbg !13
  %50 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %49, i32 2, i32 31), !dbg !13
  %51 = bitcast i32 %50 to float, !dbg !13
  %52 = fadd float %48, %51, !dbg !18
  %53 = bitcast float %52 to i32, !dbg !13
  %54 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %53, i32 1, i32 31), !dbg !13
  %55 = bitcast i32 %54 to float, !dbg !13
  %56 = fadd float %52, %55, !dbg !18
  %57 = bitcast float %56 to <1 x i32>, !dbg !13
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %20, <1 x i32> %57, i1 %17) #3, !dbg !13
  tail call void @llvm.nvvm.barrier0(), !dbg !13
  %58 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %23, i1 %21) #3, !dbg !13
  %59 = bitcast i32 %58 to float, !dbg !13
  %60 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %58, i32 1, i32 31), !dbg !13
  %61 = bitcast i32 %60 to float, !dbg !13
  %62 = fadd float %59, %61, !dbg !18
  %63 = bitcast float %62 to <1 x i32>, !dbg !13
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %23, <1 x i32> %63, i1 %26) #3, !dbg !13
  tail call void @llvm.nvvm.barrier0(), !dbg !13
  %64 = load float, ptr addrspace(3) @global_smem, align 16, !dbg !13
  %65 = fadd float %64, 0.000000e+00, !dbg !20
  %66 = fcmp ogt <4 x float> %32, zeroinitializer, !dbg !24
  %67 = zext <4 x i1> %66 to <4 x i8>, !dbg !25
  %68 = bitcast <4 x i8> %67 to i32, !dbg !25
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %68, ptr addrspace(1) %27, i1 true) #3, !dbg !25
  %urem = and i32 %5, 63, !dbg !26
  %69 = icmp eq i32 %urem, 0, !dbg !26
  %70 = bitcast float %65 to i32, !dbg !26
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %70, ptr addrspace(1) %1, i1 %69) #3, !dbg !26
  ret void, !dbg !27
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cmm6ytuckc5wwfeglgxgt4huz7xuixbepxdhmop3zdsmdklmex6n.py", directory: "inductor_cache/mm")
!4 = !{ptr @triton_per_fused_gt_sum_0, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_gt_sum_0, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_gt_sum_0", linkageName: "triton_per_fused_gt_sum_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 27, column: 26, scope: !7)
!11 = !DILocation(line: 31, column: 30, scope: !7)
!12 = !DILocation(line: 31, column: 35, scope: !7)
!13 = !DILocation(line: 267, column: 36, scope: !14, inlinedAt: !16)
!14 = distinct !DILexicalBlockFile(scope: !7, file: !15, discriminator: 0)
!15 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!16 = !DILocation(line: 33, column: 57, scope: !7)
!17 = !DILocation(line: 36, column: 25, scope: !7)
!18 = !DILocation(line: 256, column: 15, scope: !19, inlinedAt: !16)
!19 = distinct !DILexicalBlockFile(scope: !14, file: !15, discriminator: 0)
!20 = !DILocation(line: 73, column: 15, scope: !21, inlinedAt: !23)
!21 = distinct !DILexicalBlockFile(scope: !7, file: !22, discriminator: 0)
!22 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!23 = !DILocation(line: 33, column: 44, scope: !7)
!24 = !DILocation(line: 35, column: 18, scope: !7)
!25 = !DILocation(line: 36, column: 63, scope: !7)
!26 = !DILocation(line: 37, column: 59, scope: !7)
!27 = !DILocation(line: 37, column: 4, scope: !7)
