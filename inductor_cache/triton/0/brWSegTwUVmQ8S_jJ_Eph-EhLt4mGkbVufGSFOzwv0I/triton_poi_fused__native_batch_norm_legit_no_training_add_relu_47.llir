; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16
@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_47(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #4, !dbg !10
  %12 = shl i32 %11, 6, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = shl i32 %13, 2, !dbg !12
  %15 = and i32 %14, 12, !dbg !12
  %16 = and i32 %14, 60, !dbg !12
  %17 = lshr i32 %13, 2, !dbg !12
  %18 = and i32 %17, 3, !dbg !12
  %19 = and i32 %13, 16, !dbg !12
  %20 = lshr exact i32 %19, 2, !dbg !12
  %21 = and i32 %13, 32, !dbg !12
  %22 = lshr exact i32 %21, 2, !dbg !12
  %23 = and i32 %13, 64, !dbg !12
  %24 = lshr exact i32 %23, 2, !dbg !12
  %25 = or disjoint i32 %20, %18, !dbg !12
  %26 = or disjoint i32 %25, %22, !dbg !12
  %27 = or disjoint i32 %26, %24, !dbg !12
  %28 = or disjoint i32 %12, %16, !dbg !13
  %29 = or disjoint i32 %12, %27, !dbg !13
  %30 = or i32 %29, 32, !dbg !13
  %31 = icmp slt i32 %28, 416, !dbg !14
  %32 = icmp slt i32 %29, 416, !dbg !14
  %33 = icmp slt i32 %30, 416, !dbg !14
  %34 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #4, !dbg !15
  %35 = shl i32 %34, 4, !dbg !16
  %.lobit1 = lshr exact i32 %19, 4, !dbg !17
  %36 = lshr exact i32 %21, 4, !dbg !17
  %37 = or disjoint i32 %.lobit1, %36, !dbg !17
  %38 = lshr exact i32 %23, 4, !dbg !17
  %39 = or disjoint i32 %37, %38, !dbg !17
  %40 = or disjoint i32 %35, %39, !dbg !18
  %41 = or disjoint i32 %40, 8, !dbg !18
  %42 = or disjoint i32 %35, %15, !dbg !18
  %43 = icmp slt i32 %40, 16, !dbg !19
  %44 = icmp slt i32 %41, 16, !dbg !19
  %45 = icmp slt i32 %42, 16, !dbg !19
  %.frozen = freeze i32 %28, !dbg !20
  %46 = sdiv i32 %.frozen, 104, !dbg !20
  %47 = mul i32 %46, 104, !dbg !21
  %.decomposed = sub i32 %.frozen, %47, !dbg !21
  %.frozen32 = freeze i32 %29, !dbg !20
  %48 = sdiv i32 %.frozen32, 104, !dbg !20
  %49 = mul i32 %48, 104, !dbg !21
  %.decomposed33 = sub i32 %.frozen32, %49, !dbg !21
  %.frozen34 = freeze i32 %30, !dbg !20
  %50 = sdiv i32 %.frozen34, 104, !dbg !20
  %51 = mul i32 %50, 104, !dbg !21
  %.decomposed35 = sub i32 %.frozen34, %51, !dbg !21
  %52 = mul i32 %40, 104, !dbg !22
  %53 = mul i32 %41, 104, !dbg !22
  %54 = mul i32 %46, 1664, !dbg !23
  %55 = add i32 %54, %.decomposed, !dbg !24
  %56 = add i32 %55, %52, !dbg !25
  %57 = add i32 %55, %53, !dbg !25
  %58 = sext i32 %56 to i64, !dbg !26
  %59 = getelementptr float, ptr addrspace(1) %0, i64 %58, !dbg !26
  %60 = sext i32 %57 to i64, !dbg !26
  %61 = getelementptr float, ptr addrspace(1) %0, i64 %60, !dbg !26
  %62 = and i1 %31, %43, !dbg !27
  %63 = and i1 %44, %31, !dbg !27
  %64 = and i1 %32, %45, !dbg !27
  %65 = and i1 %33, %45, !dbg !27
  %66 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %59, i1 %62) #4, !dbg !28
  %67 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %61, i1 %63) #4, !dbg !28
  %68 = sext i32 %.decomposed to i64, !dbg !29
  %69 = getelementptr float, ptr addrspace(1) %1, i64 %68, !dbg !29
  %70 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %69, i1 %31) #4, !dbg !30
  %71 = getelementptr float, ptr addrspace(1) %2, i64 %68, !dbg !31
  %72 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %71, i1 %31) #4, !dbg !32
  %73 = extractvalue { i32, i32, i32, i32 } %72, 0, !dbg !32
  %74 = extractvalue { i32, i32, i32, i32 } %72, 1, !dbg !32
  %75 = extractvalue { i32, i32, i32, i32 } %72, 2, !dbg !32
  %76 = extractvalue { i32, i32, i32, i32 } %72, 3, !dbg !32
  %77 = bitcast i32 %73 to float, !dbg !32
  %78 = bitcast i32 %74 to float, !dbg !32
  %79 = bitcast i32 %75 to float, !dbg !32
  %80 = bitcast i32 %76 to float, !dbg !32
  %81 = getelementptr float, ptr addrspace(1) %3, i64 %68, !dbg !33
  %82 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %81, i1 %31) #4, !dbg !34
  %83 = getelementptr float, ptr addrspace(1) %4, i64 %68, !dbg !35
  %84 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %83, i1 %31) #4, !dbg !36
  %85 = add i32 %42, 1664, !dbg !37
  %86 = shl nsw i32 %.decomposed33, 4, !dbg !38
  %87 = shl nsw i32 %.decomposed35, 4, !dbg !38
  %88 = add i32 %85, %86, !dbg !39
  %89 = mul i32 %48, 6656, !dbg !40
  %90 = mul i32 %50, 6656, !dbg !40
  %91 = add i32 %88, %89, !dbg !41
  %92 = add i32 %90, %87, !dbg !39
  %93 = add i32 %92, %85, !dbg !41
  %94 = sext i32 %91 to i64, !dbg !42
  %95 = getelementptr float, ptr addrspace(1) %5, i64 %94, !dbg !42
  %96 = sext i32 %93 to i64, !dbg !42
  %97 = getelementptr float, ptr addrspace(1) %5, i64 %96, !dbg !42
  %98 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %95, i1 %64) #4, !dbg !43
  %99 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %97, i1 %65) #4, !dbg !43
  %100 = fadd float %77, 0x3EE4F8B580000000, !dbg !44
  %101 = fadd float %78, 0x3EE4F8B580000000, !dbg !44
  %102 = fadd float %79, 0x3EE4F8B580000000, !dbg !44
  %103 = fadd float %80, 0x3EE4F8B580000000, !dbg !44
  %104 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not.i = icmp eq i32 %104, 0, !dbg !45
  %105 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !45
  %.not1.i = icmp eq i32 %105, 0, !dbg !45
  br i1 %.not.i, label %111, label %106, !dbg !45

106:                                              ; preds = %10
  br i1 %.not1.i, label %109, label %107, !dbg !45

107:                                              ; preds = %106
  %108 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %100) #4, !dbg !45
  br label %__nv_sqrtf.exit, !dbg !45

109:                                              ; preds = %106
  %110 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %100) #4, !dbg !45
  br label %__nv_sqrtf.exit, !dbg !45

111:                                              ; preds = %10
  br i1 %.not1.i, label %114, label %112, !dbg !45

112:                                              ; preds = %111
  %113 = tail call float @llvm.nvvm.sqrt.rn.f(float %100) #4, !dbg !45
  br label %__nv_sqrtf.exit, !dbg !45

114:                                              ; preds = %111
  %115 = tail call float @llvm.nvvm.sqrt.approx.f(float %100) #4, !dbg !45
  br label %__nv_sqrtf.exit, !dbg !45

__nv_sqrtf.exit:                                  ; preds = %107, %109, %112, %114
  %.0.i = phi float [ %108, %107 ], [ %110, %109 ], [ %113, %112 ], [ %115, %114 ], !dbg !45
  %116 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not.i17 = icmp eq i32 %116, 0, !dbg !45
  %117 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !45
  %.not1.i20 = icmp eq i32 %117, 0, !dbg !45
  br i1 %.not.i17, label %123, label %118, !dbg !45

118:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i20, label %121, label %119, !dbg !45

119:                                              ; preds = %118
  %120 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %101) #4, !dbg !45
  br label %__nv_sqrtf.exit21, !dbg !45

121:                                              ; preds = %118
  %122 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %101) #4, !dbg !45
  br label %__nv_sqrtf.exit21, !dbg !45

123:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i20, label %126, label %124, !dbg !45

124:                                              ; preds = %123
  %125 = tail call float @llvm.nvvm.sqrt.rn.f(float %101) #4, !dbg !45
  br label %__nv_sqrtf.exit21, !dbg !45

126:                                              ; preds = %123
  %127 = tail call float @llvm.nvvm.sqrt.approx.f(float %101) #4, !dbg !45
  br label %__nv_sqrtf.exit21, !dbg !45

__nv_sqrtf.exit21:                                ; preds = %119, %121, %124, %126
  %.0.i19 = phi float [ %120, %119 ], [ %122, %121 ], [ %125, %124 ], [ %127, %126 ], !dbg !45
  %128 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not.i22 = icmp eq i32 %128, 0, !dbg !45
  %129 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !45
  %.not1.i25 = icmp eq i32 %129, 0, !dbg !45
  br i1 %.not.i22, label %135, label %130, !dbg !45

130:                                              ; preds = %__nv_sqrtf.exit21
  br i1 %.not1.i25, label %133, label %131, !dbg !45

131:                                              ; preds = %130
  %132 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %102) #4, !dbg !45
  br label %__nv_sqrtf.exit26, !dbg !45

133:                                              ; preds = %130
  %134 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %102) #4, !dbg !45
  br label %__nv_sqrtf.exit26, !dbg !45

135:                                              ; preds = %__nv_sqrtf.exit21
  br i1 %.not1.i25, label %138, label %136, !dbg !45

136:                                              ; preds = %135
  %137 = tail call float @llvm.nvvm.sqrt.rn.f(float %102) #4, !dbg !45
  br label %__nv_sqrtf.exit26, !dbg !45

138:                                              ; preds = %135
  %139 = tail call float @llvm.nvvm.sqrt.approx.f(float %102) #4, !dbg !45
  br label %__nv_sqrtf.exit26, !dbg !45

__nv_sqrtf.exit26:                                ; preds = %131, %133, %136, %138
  %.0.i24 = phi float [ %132, %131 ], [ %134, %133 ], [ %137, %136 ], [ %139, %138 ], !dbg !45
  %140 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #4, !dbg !45
  %.not.i27 = icmp eq i32 %140, 0, !dbg !45
  %141 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #4, !dbg !45
  %.not1.i30 = icmp eq i32 %141, 0, !dbg !45
  br i1 %.not.i27, label %147, label %142, !dbg !45

142:                                              ; preds = %__nv_sqrtf.exit26
  br i1 %.not1.i30, label %145, label %143, !dbg !45

143:                                              ; preds = %142
  %144 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %103) #4, !dbg !45
  br label %__nv_sqrtf.exit31, !dbg !45

145:                                              ; preds = %142
  %146 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %103) #4, !dbg !45
  br label %__nv_sqrtf.exit31, !dbg !45

147:                                              ; preds = %__nv_sqrtf.exit26
  br i1 %.not1.i30, label %150, label %148, !dbg !45

148:                                              ; preds = %147
  %149 = tail call float @llvm.nvvm.sqrt.rn.f(float %103) #4, !dbg !45
  br label %__nv_sqrtf.exit31, !dbg !45

150:                                              ; preds = %147
  %151 = tail call float @llvm.nvvm.sqrt.approx.f(float %103) #4, !dbg !45
  br label %__nv_sqrtf.exit31, !dbg !45

__nv_sqrtf.exit31:                                ; preds = %143, %145, %148, %150
  %.0.i29 = phi float [ %144, %143 ], [ %146, %145 ], [ %149, %148 ], [ %151, %150 ], !dbg !45
  %152 = extractvalue { i32, i32, i32, i32 } %67, 3, !dbg !28
  %153 = extractvalue { i32, i32, i32, i32 } %70, 3, !dbg !30
  %154 = extractvalue { i32, i32, i32, i32 } %67, 2, !dbg !28
  %155 = extractvalue { i32, i32, i32, i32 } %70, 2, !dbg !30
  %156 = extractvalue { i32, i32, i32, i32 } %67, 1, !dbg !28
  %157 = extractvalue { i32, i32, i32, i32 } %70, 1, !dbg !30
  %158 = extractvalue { i32, i32, i32, i32 } %67, 0, !dbg !28
  %159 = extractvalue { i32, i32, i32, i32 } %70, 0, !dbg !30
  %160 = extractvalue { i32, i32, i32, i32 } %66, 3, !dbg !28
  %161 = extractvalue { i32, i32, i32, i32 } %66, 2, !dbg !28
  %162 = extractvalue { i32, i32, i32, i32 } %66, 1, !dbg !28
  %163 = extractvalue { i32, i32, i32, i32 } %66, 0, !dbg !28
  %164 = extractvalue { i32, i32, i32, i32 } %99, 3, !dbg !43
  %165 = bitcast i32 %164 to float, !dbg !43
  %166 = extractvalue { i32, i32, i32, i32 } %99, 2, !dbg !43
  %167 = bitcast i32 %166 to float, !dbg !43
  %168 = extractvalue { i32, i32, i32, i32 } %99, 1, !dbg !43
  %169 = bitcast i32 %168 to float, !dbg !43
  %170 = extractvalue { i32, i32, i32, i32 } %99, 0, !dbg !43
  %171 = bitcast i32 %170 to float, !dbg !43
  %172 = extractvalue { i32, i32, i32, i32 } %98, 3, !dbg !43
  %173 = bitcast i32 %172 to float, !dbg !43
  %174 = extractvalue { i32, i32, i32, i32 } %98, 2, !dbg !43
  %175 = bitcast i32 %174 to float, !dbg !43
  %176 = extractvalue { i32, i32, i32, i32 } %98, 1, !dbg !43
  %177 = bitcast i32 %176 to float, !dbg !43
  %178 = extractvalue { i32, i32, i32, i32 } %98, 0, !dbg !43
  %179 = bitcast i32 %178 to float, !dbg !43
  %180 = extractvalue { i32, i32, i32, i32 } %84, 3, !dbg !36
  %181 = extractvalue { i32, i32, i32, i32 } %84, 2, !dbg !36
  %182 = extractvalue { i32, i32, i32, i32 } %84, 1, !dbg !36
  %183 = extractvalue { i32, i32, i32, i32 } %84, 0, !dbg !36
  %184 = extractvalue { i32, i32, i32, i32 } %82, 3, !dbg !34
  %185 = extractvalue { i32, i32, i32, i32 } %82, 2, !dbg !34
  %186 = extractvalue { i32, i32, i32, i32 } %82, 1, !dbg !34
  %187 = extractvalue { i32, i32, i32, i32 } %82, 0, !dbg !34
  %188 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #4, !dbg !46
  %189 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i19) #4, !dbg !46
  %190 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i24) #4, !dbg !46
  %191 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i29) #4, !dbg !46
  %192 = insertelement <4 x i32> poison, i32 %153, i64 0, !dbg !30
  %193 = insertelement <4 x i32> %192, i32 %155, i64 1, !dbg !30
  %194 = insertelement <4 x i32> %193, i32 %157, i64 2, !dbg !30
  %195 = insertelement <4 x i32> %194, i32 %159, i64 3, !dbg !30
  %196 = bitcast <4 x i32> %195 to <4 x float>, !dbg !30
  %197 = shufflevector <4 x float> %196, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !30
  %198 = insertelement <8 x i32> poison, i32 %152, i64 0, !dbg !28
  %199 = insertelement <8 x i32> %198, i32 %154, i64 1, !dbg !28
  %200 = insertelement <8 x i32> %199, i32 %156, i64 2, !dbg !28
  %201 = insertelement <8 x i32> %200, i32 %158, i64 3, !dbg !28
  %202 = insertelement <8 x i32> %201, i32 %160, i64 4, !dbg !28
  %203 = insertelement <8 x i32> %202, i32 %161, i64 5, !dbg !28
  %204 = insertelement <8 x i32> %203, i32 %162, i64 6, !dbg !28
  %205 = insertelement <8 x i32> %204, i32 %163, i64 7, !dbg !28
  %206 = bitcast <8 x i32> %205 to <8 x float>, !dbg !28
  %207 = fsub <8 x float> %206, %197, !dbg !47
  %208 = insertelement <4 x i32> poison, i32 %180, i64 0, !dbg !36
  %209 = insertelement <4 x i32> %208, i32 %181, i64 1, !dbg !36
  %210 = insertelement <4 x i32> %209, i32 %182, i64 2, !dbg !36
  %211 = insertelement <4 x i32> %210, i32 %183, i64 3, !dbg !36
  %212 = bitcast <4 x i32> %211 to <4 x float>, !dbg !36
  %213 = shufflevector <4 x float> %212, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !36
  %214 = insertelement <4 x i32> poison, i32 %184, i64 0, !dbg !34
  %215 = insertelement <4 x i32> %214, i32 %185, i64 1, !dbg !34
  %216 = insertelement <4 x i32> %215, i32 %186, i64 2, !dbg !34
  %217 = insertelement <4 x i32> %216, i32 %187, i64 3, !dbg !34
  %218 = bitcast <4 x i32> %217 to <4 x float>, !dbg !34
  %219 = shufflevector <4 x float> %218, <4 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !34
  %220 = insertelement <8 x float> poison, float %191, i64 0, !dbg !48
  %221 = insertelement <8 x float> %220, float %190, i64 1, !dbg !48
  %222 = insertelement <8 x float> %221, float %189, i64 2, !dbg !48
  %223 = insertelement <8 x float> %222, float %188, i64 3, !dbg !48
  %224 = shufflevector <8 x float> %223, <8 x float> poison, <8 x i32> <i32 0, i32 1, i32 2, i32 3, i32 0, i32 1, i32 2, i32 3>, !dbg !48
  %225 = fmul <8 x float> %207, %224, !dbg !48
  %226 = fmul <8 x float> %225, %219, !dbg !49
  %227 = fadd <8 x float> %226, %213, !dbg !50
  %228 = fcmp olt <8 x float> %227, zeroinitializer, !dbg !51
  %229 = extractelement <8 x i1> %228, i64 7, !dbg !55
  %230 = extractelement <8 x float> %227, i64 7, !dbg !55
  %231 = select i1 %229, float 0.000000e+00, float %230, !dbg !55
  %232 = extractelement <8 x i1> %228, i64 6, !dbg !55
  %233 = extractelement <8 x float> %227, i64 6, !dbg !55
  %234 = select i1 %232, float 0.000000e+00, float %233, !dbg !55
  %235 = extractelement <8 x i1> %228, i64 5, !dbg !55
  %236 = extractelement <8 x float> %227, i64 5, !dbg !55
  %237 = select i1 %235, float 0.000000e+00, float %236, !dbg !55
  %238 = extractelement <8 x i1> %228, i64 4, !dbg !55
  %239 = extractelement <8 x float> %227, i64 4, !dbg !55
  %240 = select i1 %238, float 0.000000e+00, float %239, !dbg !55
  %241 = extractelement <8 x i1> %228, i64 3, !dbg !55
  %242 = extractelement <8 x float> %227, i64 3, !dbg !55
  %243 = select i1 %241, float 0.000000e+00, float %242, !dbg !55
  %244 = extractelement <8 x i1> %228, i64 2, !dbg !55
  %245 = extractelement <8 x float> %227, i64 2, !dbg !55
  %246 = select i1 %244, float 0.000000e+00, float %245, !dbg !55
  %247 = extractelement <8 x i1> %228, i64 1, !dbg !55
  %248 = extractelement <8 x float> %227, i64 1, !dbg !55
  %249 = select i1 %247, float 0.000000e+00, float %248, !dbg !55
  %250 = extractelement <8 x i1> %228, i64 0, !dbg !55
  %251 = extractelement <8 x float> %227, i64 0, !dbg !55
  %252 = select i1 %250, float 0.000000e+00, float %251, !dbg !55
  %253 = shl i32 %13, 6, !dbg !55
  %254 = and i32 %253, 960, !dbg !55
  %255 = or disjoint i32 %254, %.lobit1, !dbg !55
  %256 = or disjoint i32 %255, %36, !dbg !55
  %257 = or disjoint i32 %256, %38, !dbg !55
  %258 = and i32 %14, 508, !dbg !55
  %259 = lshr exact i32 %254, 2, !dbg !55
  %260 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %259, !dbg !55
  %261 = getelementptr inbounds float, ptr addrspace(3) %260, i32 %257, !dbg !55
  %262 = bitcast float %231 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %261, <1 x i32> %262, i1 true) #4, !dbg !55
  %263 = or disjoint i32 %257, 16, !dbg !55
  %264 = lshr i32 %263, 4, !dbg !55
  %265 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %264, !dbg !55
  %266 = getelementptr inbounds float, ptr addrspace(3) %265, i32 %263, !dbg !55
  %267 = bitcast float %234 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %266, <1 x i32> %267, i1 true) #4, !dbg !55
  %268 = or disjoint i32 %257, 32, !dbg !55
  %269 = lshr i32 %268, 4, !dbg !55
  %270 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %269, !dbg !55
  %271 = getelementptr inbounds float, ptr addrspace(3) %270, i32 %268, !dbg !55
  %272 = bitcast float %237 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %271, <1 x i32> %272, i1 true) #4, !dbg !55
  %273 = or disjoint i32 %257, 48, !dbg !55
  %274 = lshr i32 %273, 4, !dbg !55
  %275 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %274, !dbg !55
  %276 = getelementptr inbounds float, ptr addrspace(3) %275, i32 %273, !dbg !55
  %277 = bitcast float %240 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %276, <1 x i32> %277, i1 true) #4, !dbg !55
  %278 = or disjoint i32 %257, 8, !dbg !55
  %279 = getelementptr inbounds float, ptr addrspace(3) %260, i32 %278, !dbg !55
  %280 = bitcast float %243 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %279, <1 x i32> %280, i1 true) #4, !dbg !55
  %281 = or disjoint i32 %257, 24, !dbg !55
  %282 = lshr i32 %281, 4, !dbg !55
  %283 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %282, !dbg !55
  %284 = getelementptr inbounds float, ptr addrspace(3) %283, i32 %281, !dbg !55
  %285 = bitcast float %246 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %284, <1 x i32> %285, i1 true) #4, !dbg !55
  %286 = or disjoint i32 %257, 40, !dbg !55
  %287 = lshr i32 %286, 4, !dbg !55
  %288 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %287, !dbg !55
  %289 = getelementptr inbounds float, ptr addrspace(3) %288, i32 %286, !dbg !55
  %290 = bitcast float %249 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %289, <1 x i32> %290, i1 true) #4, !dbg !55
  %291 = or disjoint i32 %257, 56, !dbg !55
  %292 = lshr i32 %291, 4, !dbg !55
  %293 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %292, !dbg !55
  %294 = getelementptr inbounds float, ptr addrspace(3) %293, i32 %291, !dbg !55
  %295 = bitcast float %252 to <1 x i32>, !dbg !55
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %294, <1 x i32> %295, i1 true) #4, !dbg !55
  tail call void @llvm.nvvm.barrier0(), !dbg !55
  %296 = lshr i32 %258, 4, !dbg !55
  %297 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %296, !dbg !55
  %298 = getelementptr inbounds float, ptr addrspace(3) %297, i32 %258, !dbg !55
  %299 = load float, ptr addrspace(3) %298, align 4, !dbg !55
  %300 = or disjoint i32 %258, 1, !dbg !55
  %301 = getelementptr inbounds float, ptr addrspace(3) %297, i32 %300, !dbg !55
  %302 = load float, ptr addrspace(3) %301, align 4, !dbg !55
  %303 = or disjoint i32 %258, 2, !dbg !55
  %304 = getelementptr inbounds float, ptr addrspace(3) %297, i32 %303, !dbg !55
  %305 = load float, ptr addrspace(3) %304, align 4, !dbg !55
  %306 = or disjoint i32 %258, 3, !dbg !55
  %307 = getelementptr inbounds float, ptr addrspace(3) %297, i32 %306, !dbg !55
  %308 = load float, ptr addrspace(3) %307, align 4, !dbg !55
  %309 = or disjoint i32 %258, 512, !dbg !55
  %310 = lshr i32 %309, 4, !dbg !55
  %311 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %310, !dbg !55
  %312 = getelementptr inbounds float, ptr addrspace(3) %311, i32 %309, !dbg !55
  %313 = load float, ptr addrspace(3) %312, align 4, !dbg !55
  %314 = or disjoint i32 %258, 513, !dbg !55
  %315 = lshr i32 %314, 4, !dbg !55
  %316 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %315, !dbg !55
  %317 = getelementptr inbounds float, ptr addrspace(3) %316, i32 %314, !dbg !55
  %318 = load float, ptr addrspace(3) %317, align 4, !dbg !55
  %319 = or disjoint i32 %258, 514, !dbg !55
  %320 = lshr i32 %319, 4, !dbg !55
  %321 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %320, !dbg !55
  %322 = getelementptr inbounds float, ptr addrspace(3) %321, i32 %319, !dbg !55
  %323 = load float, ptr addrspace(3) %322, align 4, !dbg !55
  %324 = or disjoint i32 %258, 515, !dbg !55
  %325 = lshr i32 %324, 4, !dbg !55
  %326 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %325, !dbg !55
  %327 = getelementptr inbounds float, ptr addrspace(3) %326, i32 %324, !dbg !55
  %328 = load float, ptr addrspace(3) %327, align 4, !dbg !55
  %329 = fadd float %299, %179, !dbg !56
  %330 = fadd float %302, %177, !dbg !56
  %331 = fadd float %305, %175, !dbg !56
  %332 = fadd float %308, %173, !dbg !56
  %333 = fadd float %313, %171, !dbg !56
  %334 = fadd float %318, %169, !dbg !56
  %335 = fadd float %323, %167, !dbg !56
  %336 = fadd float %328, %165, !dbg !56
  %337 = add i32 %86, %42, !dbg !57
  %338 = mul i32 %48, 3328, !dbg !58
  %339 = mul i32 %50, 3328, !dbg !58
  %340 = add i32 %337, %338, !dbg !59
  %341 = add i32 %339, %87, !dbg !57
  %342 = add i32 %341, %42, !dbg !59
  %343 = sext i32 %340 to i64, !dbg !60
  %344 = getelementptr float, ptr addrspace(1) %6, i64 %343, !dbg !60
  %345 = sext i32 %342 to i64, !dbg !60
  %346 = getelementptr float, ptr addrspace(1) %6, i64 %345, !dbg !60
  %347 = bitcast float %299 to i32, !dbg !61
  %348 = bitcast float %302 to i32, !dbg !61
  %349 = bitcast float %305 to i32, !dbg !61
  %350 = bitcast float %308 to i32, !dbg !61
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %347, i32 %348, i32 %349, i32 %350, ptr addrspace(1) %344, i1 %64) #4, !dbg !61
  %351 = bitcast float %313 to i32, !dbg !61
  %352 = bitcast float %318 to i32, !dbg !61
  %353 = bitcast float %323 to i32, !dbg !61
  %354 = bitcast float %328 to i32, !dbg !61
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %351, i32 %352, i32 %353, i32 %354, ptr addrspace(1) %346, i1 %65) #4, !dbg !61
  %355 = getelementptr float, ptr addrspace(1) %7, i64 %58, !dbg !62
  %356 = getelementptr float, ptr addrspace(1) %7, i64 %60, !dbg !62
  tail call void @llvm.nvvm.barrier0(), !dbg !63
  %357 = shl i32 %13, 8, !dbg !63
  %358 = and i32 %357, 768, !dbg !63
  %359 = or disjoint i32 %358, %18, !dbg !63
  %360 = or disjoint i32 %359, %20, !dbg !63
  %361 = or disjoint i32 %360, %22, !dbg !63
  %362 = or disjoint i32 %361, %24, !dbg !63
  %363 = lshr exact i32 %358, 2, !dbg !63
  %364 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %363, !dbg !63
  %365 = getelementptr float, ptr addrspace(3) %364, i32 %362, !dbg !63
  %366 = bitcast float %329 to <1 x i32>, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %365, <1 x i32> %366, i1 true) #4, !dbg !63
  %367 = or disjoint i32 %362, 64, !dbg !63
  %368 = lshr i32 %367, 4, !dbg !63
  %369 = and i32 %368, 268435452, !dbg !63
  %370 = getelementptr float, ptr addrspace(3) @global_smem, i32 %369, !dbg !63
  %371 = getelementptr float, ptr addrspace(3) %370, i32 %367, !dbg !63
  %372 = bitcast float %330 to <1 x i32>, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %371, <1 x i32> %372, i1 true) #4, !dbg !63
  %373 = or disjoint i32 %362, 128, !dbg !63
  %374 = lshr i32 %373, 4, !dbg !63
  %375 = and i32 %374, 268435452, !dbg !63
  %376 = getelementptr float, ptr addrspace(3) @global_smem, i32 %375, !dbg !63
  %377 = getelementptr float, ptr addrspace(3) %376, i32 %373, !dbg !63
  %378 = bitcast float %331 to <1 x i32>, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %377, <1 x i32> %378, i1 true) #4, !dbg !63
  %379 = or disjoint i32 %362, 192, !dbg !63
  %380 = lshr i32 %379, 4, !dbg !63
  %381 = and i32 %380, 268435452, !dbg !63
  %382 = getelementptr float, ptr addrspace(3) @global_smem, i32 %381, !dbg !63
  %383 = getelementptr float, ptr addrspace(3) %382, i32 %379, !dbg !63
  %384 = bitcast float %332 to <1 x i32>, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %383, <1 x i32> %384, i1 true) #4, !dbg !63
  %385 = or disjoint i32 %362, 32, !dbg !63
  %386 = getelementptr float, ptr addrspace(3) %364, i32 %385, !dbg !63
  %387 = bitcast float %333 to <1 x i32>, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %386, <1 x i32> %387, i1 true) #4, !dbg !63
  %388 = or disjoint i32 %362, 96, !dbg !63
  %389 = lshr i32 %388, 4, !dbg !63
  %390 = and i32 %389, 268435452, !dbg !63
  %391 = getelementptr float, ptr addrspace(3) @global_smem, i32 %390, !dbg !63
  %392 = getelementptr float, ptr addrspace(3) %391, i32 %388, !dbg !63
  %393 = bitcast float %334 to <1 x i32>, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %392, <1 x i32> %393, i1 true) #4, !dbg !63
  %394 = or disjoint i32 %362, 160, !dbg !63
  %395 = lshr i32 %394, 4, !dbg !63
  %396 = and i32 %395, 268435452, !dbg !63
  %397 = getelementptr float, ptr addrspace(3) @global_smem, i32 %396, !dbg !63
  %398 = getelementptr float, ptr addrspace(3) %397, i32 %394, !dbg !63
  %399 = bitcast float %335 to <1 x i32>, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %398, <1 x i32> %399, i1 true) #4, !dbg !63
  %400 = or disjoint i32 %362, 224, !dbg !63
  %401 = lshr i32 %400, 4, !dbg !63
  %402 = and i32 %401, 268435452, !dbg !63
  %403 = getelementptr float, ptr addrspace(3) @global_smem, i32 %402, !dbg !63
  %404 = getelementptr float, ptr addrspace(3) %403, i32 %400, !dbg !63
  %405 = bitcast float %336 to <1 x i32>, !dbg !63
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %404, <1 x i32> %405, i1 true) #4, !dbg !63
  tail call void @llvm.nvvm.barrier0(), !dbg !63
  %406 = lshr i32 %14, 4, !dbg !63
  %407 = and i32 %406, 28, !dbg !63
  %408 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %407, !dbg !63
  %409 = getelementptr inbounds float, ptr addrspace(3) %408, i32 %258, !dbg !63
  %410 = and i32 %310, 60, !dbg !63
  %411 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %410, !dbg !63
  %412 = getelementptr inbounds float, ptr addrspace(3) %411, i32 %309, !dbg !63
  %413 = load <4 x i32>, ptr addrspace(3) %412, align 16, !dbg !63
  %.extract = load i32, ptr addrspace(3) %409, align 16, !dbg !63
  %414 = getelementptr inbounds i8, ptr addrspace(3) %409, i32 4, !dbg !63
  %.extract10 = load i32, ptr addrspace(3) %414, align 4, !dbg !63
  %415 = getelementptr inbounds i8, ptr addrspace(3) %409, i32 8, !dbg !63
  %.extract11 = load i32, ptr addrspace(3) %415, align 8, !dbg !63
  %416 = getelementptr inbounds i8, ptr addrspace(3) %409, i32 12, !dbg !63
  %.extract12 = load i32, ptr addrspace(3) %416, align 4, !dbg !63
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract10, i32 %.extract11, i32 %.extract12, ptr addrspace(1) %355, i1 %62) #4, !dbg !63
  %.extract13 = extractelement <4 x i32> %413, i64 0, !dbg !63
  %.extract14 = extractelement <4 x i32> %413, i64 1, !dbg !63
  %.extract15 = extractelement <4 x i32> %413, i64 2, !dbg !63
  %.extract16 = extractelement <4 x i32> %413, i64 3, !dbg !63
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract13, i32 %.extract14, i32 %.extract15, i32 %.extract16, ptr addrspace(1) %356, i1 %63) #4, !dbg !63
  ret void, !dbg !64
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #3

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #3

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #3 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #4 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cmlde5fd56kzv5lpikl64u5l7qm7np7bivvpcr6v32hr4pqje7s2.py", directory: "inductor_cache/ml")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_47, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_relu_47, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_relu_47", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_relu_47", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 31, column: 39, scope: !7)
!23 = !DILocation(line: 31, column: 49, scope: !7)
!24 = !DILocation(line: 31, column: 35, scope: !7)
!25 = !DILocation(line: 31, column: 44, scope: !7)
!26 = !DILocation(line: 31, column: 30, scope: !7)
!27 = !DILocation(line: 31, column: 62, scope: !7)
!28 = !DILocation(line: 31, column: 54, scope: !7)
!29 = !DILocation(line: 32, column: 30, scope: !7)
!30 = !DILocation(line: 32, column: 35, scope: !7)
!31 = !DILocation(line: 33, column: 30, scope: !7)
!32 = !DILocation(line: 33, column: 35, scope: !7)
!33 = !DILocation(line: 34, column: 31, scope: !7)
!34 = !DILocation(line: 34, column: 36, scope: !7)
!35 = !DILocation(line: 35, column: 31, scope: !7)
!36 = !DILocation(line: 35, column: 36, scope: !7)
!37 = !DILocation(line: 36, column: 38, scope: !7)
!38 = !DILocation(line: 36, column: 46, scope: !7)
!39 = !DILocation(line: 36, column: 43, scope: !7)
!40 = !DILocation(line: 36, column: 56, scope: !7)
!41 = !DILocation(line: 36, column: 51, scope: !7)
!42 = !DILocation(line: 36, column: 31, scope: !7)
!43 = !DILocation(line: 36, column: 61, scope: !7)
!44 = !DILocation(line: 39, column: 18, scope: !7)
!45 = !DILocation(line: 40, column: 26, scope: !7)
!46 = !DILocation(line: 42, column: 18, scope: !7)
!47 = !DILocation(line: 37, column: 18, scope: !7)
!48 = !DILocation(line: 45, column: 19, scope: !7)
!49 = !DILocation(line: 46, column: 20, scope: !7)
!50 = !DILocation(line: 47, column: 20, scope: !7)
!51 = !DILocation(line: 118, column: 15, scope: !52, inlinedAt: !54)
!52 = distinct !DILexicalBlockFile(scope: !7, file: !53, discriminator: 0)
!53 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!54 = !DILocation(line: 49, column: 42, scope: !7)
!55 = !DILocation(line: 121, column: 29, scope: !52, inlinedAt: !54)
!56 = !DILocation(line: 50, column: 20, scope: !7)
!57 = !DILocation(line: 51, column: 30, scope: !7)
!58 = !DILocation(line: 51, column: 43, scope: !7)
!59 = !DILocation(line: 51, column: 38, scope: !7)
!60 = !DILocation(line: 51, column: 25, scope: !7)
!61 = !DILocation(line: 51, column: 55, scope: !7)
!62 = !DILocation(line: 52, column: 25, scope: !7)
!63 = !DILocation(line: 52, column: 56, scope: !7)
!64 = !DILocation(line: 52, column: 4, scope: !7)
