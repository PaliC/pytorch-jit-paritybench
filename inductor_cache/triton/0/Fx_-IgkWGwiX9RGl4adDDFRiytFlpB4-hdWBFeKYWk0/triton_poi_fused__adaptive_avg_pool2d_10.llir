; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused__adaptive_avg_pool2d_10(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %6 = shl i32 %5, 4, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = lshr i32 %7, 4, !dbg !12
  %9 = and i32 %8, 7, !dbg !12
  %10 = shl i32 %7, 1, !dbg !12
  %11 = and i32 %10, 14, !dbg !12
  %12 = or disjoint i32 %6, %9, !dbg !13
  %13 = or disjoint i32 %12, 8, !dbg !13
  %14 = or disjoint i32 %6, %11, !dbg !13
  %15 = icmp slt i32 %12, 16, !dbg !14
  %16 = icmp slt i32 %13, 16, !dbg !14
  %17 = icmp slt i32 %14, 16, !dbg !14
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %19 = shl i32 %18, 4, !dbg !16
  %20 = and i32 %7, 15, !dbg !17
  %21 = lshr i32 %7, 3, !dbg !17
  %22 = and i32 %21, 15, !dbg !17
  %23 = or disjoint i32 %19, %20, !dbg !18
  %24 = or disjoint i32 %19, %22, !dbg !18
  %25 = icmp slt i32 %23, 9, !dbg !19
  %26 = icmp slt i32 %24, 9, !dbg !19
  %.frozen = freeze i32 %23, !dbg !20
  %27 = sdiv i32 %.frozen, 3, !dbg !20
  %28 = mul i32 %27, 3, !dbg !21
  %.decomposed = sub i32 %.frozen, %28, !dbg !21
  %.frozen7 = freeze i32 %14, !dbg !22
  %29 = sdiv i32 %.frozen7, 4, !dbg !22
  %30 = mul i32 %29, 4, !dbg !23
  %.decomposed8 = sub i32 %.frozen7, %30, !dbg !23
  %31 = shl i32 %27, 2, !dbg !24
  %32 = sdiv i32 %31, 3, !dbg !25
  %.tr = trunc nsw i32 %.decomposed to i8, !dbg !26
  %.lhs.trunc = shl nsw i8 %.tr, 2, !dbg !26
  %33 = sdiv i8 %.lhs.trunc, 3, !dbg !26
  %.sext = sext i8 %33 to i32, !dbg !26
  %34 = shl i32 %32, 2, !dbg !27
  %35 = shl i32 %12, 4, !dbg !28
  %36 = shl i32 %13, 4, !dbg !28
  %37 = add i32 %35, %.sext, !dbg !29
  %38 = add i32 %37, %34, !dbg !30
  %39 = add i32 %36, %.sext, !dbg !29
  %40 = add i32 %39, %34, !dbg !30
  %41 = sext i32 %38 to i64, !dbg !31
  %42 = getelementptr float, ptr addrspace(1) %0, i64 %41, !dbg !31
  %43 = sext i32 %40 to i64, !dbg !31
  %44 = getelementptr float, ptr addrspace(1) %0, i64 %43, !dbg !31
  %45 = and i1 %15, %25, !dbg !32
  %46 = and i1 %16, %25, !dbg !32
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %42, i1 %45, i32 0, i1 %45) #2, !dbg !33
  %48 = bitcast i32 %47 to float, !dbg !33
  %49 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %44, i1 %46, i32 0, i1 %46) #2, !dbg !33
  %50 = bitcast i32 %49 to float, !dbg !33
  %51 = or disjoint i32 %34, 1, !dbg !34
  %52 = add i32 %37, %51, !dbg !35
  %53 = add i32 %39, %51, !dbg !35
  %54 = sext i32 %52 to i64, !dbg !36
  %55 = getelementptr float, ptr addrspace(1) %0, i64 %54, !dbg !36
  %56 = sext i32 %53 to i64, !dbg !36
  %57 = getelementptr float, ptr addrspace(1) %0, i64 %56, !dbg !36
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %55, i1 %45, i32 0, i1 %45) #2, !dbg !37
  %59 = bitcast i32 %58 to float, !dbg !37
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %57, i1 %46, i32 0, i1 %46) #2, !dbg !37
  %61 = bitcast i32 %60 to float, !dbg !37
  %62 = fadd float %48, %59, !dbg !38
  %63 = fadd float %50, %61, !dbg !38
  %64 = add i32 %34, 4, !dbg !39
  %65 = add i32 %37, %64, !dbg !40
  %66 = add i32 %39, %64, !dbg !40
  %67 = sext i32 %65 to i64, !dbg !41
  %68 = getelementptr float, ptr addrspace(1) %0, i64 %67, !dbg !41
  %69 = sext i32 %66 to i64, !dbg !41
  %70 = getelementptr float, ptr addrspace(1) %0, i64 %69, !dbg !41
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %68, i1 %45, i32 0, i1 %45) #2, !dbg !42
  %72 = bitcast i32 %71 to float, !dbg !42
  %73 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %70, i1 %46, i32 0, i1 %46) #2, !dbg !42
  %74 = bitcast i32 %73 to float, !dbg !42
  %75 = fadd float %62, %72, !dbg !43
  %76 = fadd float %63, %74, !dbg !43
  %77 = add i32 %34, 5, !dbg !44
  %78 = add i32 %37, %77, !dbg !45
  %79 = add i32 %39, %77, !dbg !45
  %80 = sext i32 %78 to i64, !dbg !46
  %81 = getelementptr float, ptr addrspace(1) %0, i64 %80, !dbg !46
  %82 = sext i32 %79 to i64, !dbg !46
  %83 = getelementptr float, ptr addrspace(1) %0, i64 %82, !dbg !46
  %84 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %81, i1 %45, i32 0, i1 %45) #2, !dbg !47
  %85 = bitcast i32 %84 to float, !dbg !47
  %86 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %83, i1 %46, i32 0, i1 %46) #2, !dbg !47
  %87 = bitcast i32 %86 to float, !dbg !47
  %88 = fadd float %75, %85, !dbg !48
  %89 = fadd float %76, %87, !dbg !48
  %90 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %88, float 4.000000e+00) #2, !dbg !49
  %91 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %89, float 4.000000e+00) #2, !dbg !49
  %92 = shl i32 %24, 2, !dbg !50
  %93 = add i32 %92, %.decomposed8, !dbg !51
  %94 = mul i32 %29, 36, !dbg !52
  %95 = add i32 %93, %94, !dbg !53
  %96 = sext i32 %95 to i64, !dbg !54
  %97 = getelementptr float, ptr addrspace(1) %1, i64 %96, !dbg !54
  %98 = and i1 %17, %26, !dbg !55
  %99 = shl i32 %7, 4, !dbg !56
  %100 = and i32 %99, 240, !dbg !56
  %101 = or disjoint i32 %100, %9, !dbg !56
  %102 = and i32 %10, 254, !dbg !56
  %103 = lshr exact i32 %100, 1, !dbg !56
  %104 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %103, !dbg !56
  %105 = getelementptr float, ptr addrspace(3) %104, i32 %101, !dbg !56
  %106 = bitcast float %90 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %105, <1 x i32> %106, i1 true) #2, !dbg !56
  %107 = or disjoint i32 %101, 8, !dbg !56
  %108 = getelementptr float, ptr addrspace(3) %104, i32 %107, !dbg !56
  %109 = bitcast float %91 to <1 x i32>, !dbg !56
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %108, <1 x i32> %109, i1 true) #2, !dbg !56
  tail call void @llvm.nvvm.barrier0(), !dbg !56
  %110 = lshr i32 %10, 3, !dbg !56
  %111 = and i32 %110, 30, !dbg !56
  %112 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %111, !dbg !56
  %113 = getelementptr inbounds float, ptr addrspace(3) %112, i32 %102, !dbg !56
  %.extract = load i32, ptr addrspace(3) %113, align 8, !dbg !56
  %114 = getelementptr inbounds i8, ptr addrspace(3) %113, i32 4, !dbg !56
  %.extract6 = load i32, ptr addrspace(3) %114, align 4, !dbg !56
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract, i32 %.extract6, ptr addrspace(1) %97, i1 %98) #2, !dbg !56
  ret void, !dbg !57
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cuy6skd2tumhedeforulxdm6jogbgxbgjakxqvtdijtslz2bsanf.py", directory: "inductor_cache/uy")
!4 = !{ptr @triton_poi_fused__adaptive_avg_pool2d_10, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__adaptive_avg_pool2d_10, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__adaptive_avg_pool2d_10", linkageName: "triton_poi_fused__adaptive_avg_pool2d_10", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 28, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 33, column: 19, scope: !7)
!23 = !DILocation(line: 32, column: 19, scope: !7)
!24 = !DILocation(line: 34, column: 14, scope: !7)
!25 = !DILocation(line: 34, column: 21, scope: !7)
!26 = !DILocation(line: 37, column: 21, scope: !7)
!27 = !DILocation(line: 41, column: 33, scope: !7)
!28 = !DILocation(line: 41, column: 51, scope: !7)
!29 = !DILocation(line: 41, column: 48, scope: !7)
!30 = !DILocation(line: 41, column: 57, scope: !7)
!31 = !DILocation(line: 41, column: 30, scope: !7)
!32 = !DILocation(line: 41, column: 87, scope: !7)
!33 = !DILocation(line: 41, column: 72, scope: !7)
!34 = !DILocation(line: 45, column: 35, scope: !7)
!35 = !DILocation(line: 45, column: 62, scope: !7)
!36 = !DILocation(line: 45, column: 31, scope: !7)
!37 = !DILocation(line: 45, column: 77, scope: !7)
!38 = !DILocation(line: 46, column: 20, scope: !7)
!39 = !DILocation(line: 50, column: 35, scope: !7)
!40 = !DILocation(line: 50, column: 62, scope: !7)
!41 = !DILocation(line: 50, column: 31, scope: !7)
!42 = !DILocation(line: 50, column: 77, scope: !7)
!43 = !DILocation(line: 51, column: 20, scope: !7)
!44 = !DILocation(line: 53, column: 35, scope: !7)
!45 = !DILocation(line: 53, column: 62, scope: !7)
!46 = !DILocation(line: 53, column: 31, scope: !7)
!47 = !DILocation(line: 53, column: 77, scope: !7)
!48 = !DILocation(line: 54, column: 20, scope: !7)
!49 = !DILocation(line: 70, column: 20, scope: !7)
!50 = !DILocation(line: 71, column: 32, scope: !7)
!51 = !DILocation(line: 71, column: 30, scope: !7)
!52 = !DILocation(line: 71, column: 40, scope: !7)
!53 = !DILocation(line: 71, column: 37, scope: !7)
!54 = !DILocation(line: 71, column: 25, scope: !7)
!55 = !DILocation(line: 71, column: 60, scope: !7)
!56 = !DILocation(line: 71, column: 52, scope: !7)
!57 = !DILocation(line: 71, column: 4, scope: !7)
