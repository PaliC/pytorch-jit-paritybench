; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_convolution_gelu_3(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %10 = shl i32 %9, 7, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = and i32 %11, 127, !dbg !12
  %13 = or disjoint i32 %10, %12, !dbg !13
  %14 = icmp slt i32 %13, 3072, !dbg !14
  %15 = srem i32 %13, 48, !dbg !15
  %16 = sext i32 %13 to i64, !dbg !16
  %17 = getelementptr float, ptr addrspace(1) %0, i64 %16, !dbg !16
  %18 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %17, i1 %14) #3, !dbg !17
  %19 = bitcast i32 %18 to float, !dbg !17
  %20 = sext i32 %15 to i64, !dbg !18
  %21 = getelementptr float, ptr addrspace(1) %2, i64 %20, !dbg !18
  %22 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %21, i1 %14) #3, !dbg !19
  %23 = bitcast i32 %22 to float, !dbg !19
  %24 = getelementptr float, ptr addrspace(1) %3, i64 %20, !dbg !20
  %25 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %24, i1 %14) #3, !dbg !21
  %26 = bitcast i32 %25 to float, !dbg !21
  %27 = getelementptr float, ptr addrspace(1) %4, i64 %20, !dbg !22
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 %14) #3, !dbg !23
  %29 = bitcast i32 %28 to float, !dbg !23
  %30 = getelementptr float, ptr addrspace(1) %5, i64 %20, !dbg !24
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 %14) #3, !dbg !25
  %32 = bitcast i32 %31 to float, !dbg !25
  %33 = getelementptr float, ptr addrspace(1) %6, i64 %20, !dbg !26
  %34 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 %14) #3, !dbg !27
  %35 = bitcast i32 %34 to float, !dbg !27
  %36 = fadd float %19, %23, !dbg !28
  %37 = fsub float %36, %26, !dbg !29
  %38 = fadd float %29, 0x3EE4F8B580000000, !dbg !30
  %39 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !31
  %.not.i = icmp eq i32 %39, 0, !dbg !31
  %40 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !31
  %.not1.i = icmp eq i32 %40, 0, !dbg !31
  br i1 %.not.i, label %46, label %41, !dbg !31

41:                                               ; preds = %8
  br i1 %.not1.i, label %44, label %42, !dbg !31

42:                                               ; preds = %41
  %43 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %38) #3, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

44:                                               ; preds = %41
  %45 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %38) #3, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

46:                                               ; preds = %8
  br i1 %.not1.i, label %49, label %47, !dbg !31

47:                                               ; preds = %46
  %48 = tail call float @llvm.nvvm.sqrt.rn.f(float %38) #3, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

49:                                               ; preds = %46
  %50 = tail call float @llvm.nvvm.sqrt.approx.f(float %38) #3, !dbg !31
  br label %__nv_sqrtf.exit, !dbg !31

__nv_sqrtf.exit:                                  ; preds = %42, %44, %47, %49
  %.0.i = phi float [ %43, %42 ], [ %45, %44 ], [ %48, %47 ], [ %50, %49 ], !dbg !31
  %51 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !32
  %52 = fmul float %37, %51, !dbg !33
  %53 = fmul float %52, %32, !dbg !34
  %54 = fadd float %53, %35, !dbg !35
  %55 = fmul float %54, 0x3FE6A09E60000000, !dbg !36
  %56 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !37
  %.not.i1 = icmp eq i32 %56, 0, !dbg !37
  %57 = tail call float @llvm.nvvm.fabs.ftz.f(float %55) #3, !dbg !37
  %58 = tail call float @llvm.nvvm.fabs.f(float %55) #3, !dbg !37
  %.0.i2 = select i1 %.not.i1, float %58, float %57, !dbg !37
  %59 = fcmp oge float %.0.i2, 0x3FF00C1FC0000000, !dbg !37
  br i1 %59, label %__nv_fabsf.exit1.i, label %61, !dbg !37

__nv_fabsf.exit1.i:                               ; preds = %__nv_sqrtf.exit
  %60 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !37
  %.not1.i4 = icmp eq i32 %60, 0, !dbg !37
  %.01.i = select i1 %.not1.i4, float %58, float %57, !dbg !37
  br label %__internal_fmad.exit.i, !dbg !37

61:                                               ; preds = %__nv_sqrtf.exit
  %62 = fmul float %55, %55, !dbg !37
  br label %__internal_fmad.exit.i, !dbg !37

__internal_fmad.exit.i:                           ; preds = %61, %__nv_fabsf.exit1.i
  %63 = phi float [ 0x3FE41B0840000000, %__nv_fabsf.exit1.i ], [ 0x3FC06EBA60000000, %61 ], !dbg !37
  %64 = phi float [ 0x3FED526FC0000000, %__nv_fabsf.exit1.i ], [ 0xBFD8127580000000, %61 ], !dbg !37
  %65 = phi float [ 0x3FC39F20C0000000, %__nv_fabsf.exit1.i ], [ 0x3FBCE315E0000000, %61 ], !dbg !37
  %66 = phi float [ 0xBFA1902C40000000, %__nv_fabsf.exit1.i ], [ 0xBF9B837CE0000000, %61 ], !dbg !37
  %67 = phi float [ 0x3F75908160000000, %__nv_fabsf.exit1.i ], [ 0x3F755ABD40000000, %61 ], !dbg !37
  %68 = phi float [ 0xBF3EAC1720000000, %__nv_fabsf.exit1.i ], [ 0xBF4AE9A400000000, %61 ], !dbg !37
  %69 = phi float [ 0x3EF1394780000000, %__nv_fabsf.exit1.i ], [ 0x3F163D2D40000000, %61 ], !dbg !37
  %70 = phi float [ %.01.i, %__nv_fabsf.exit1.i ], [ %62, %61 ], !dbg !37
  %71 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !37
  %.not2.i3 = icmp eq i32 %71, 0, !dbg !37
  %72 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %69, float %70, float %68) #3, !dbg !37
  %73 = tail call float @llvm.nvvm.fma.rn.f(float %69, float %70, float %68) #3, !dbg !37
  %.02.i = select i1 %.not2.i3, float %73, float %72, !dbg !37
  %74 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !37
  %.not3.i = icmp eq i32 %74, 0, !dbg !37
  %75 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.02.i, float %70, float %67) #3, !dbg !37
  %76 = tail call float @llvm.nvvm.fma.rn.f(float %.02.i, float %70, float %67) #3, !dbg !37
  %.03.i = select i1 %.not3.i, float %76, float %75, !dbg !37
  %77 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !37
  %.not4.i = icmp eq i32 %77, 0, !dbg !37
  %78 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.03.i, float %70, float %66) #3, !dbg !37
  %79 = tail call float @llvm.nvvm.fma.rn.f(float %.03.i, float %70, float %66) #3, !dbg !37
  %.04.i = select i1 %.not4.i, float %79, float %78, !dbg !37
  %80 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !37
  %.not5.i = icmp eq i32 %80, 0, !dbg !37
  %81 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i, float %70, float %65) #3, !dbg !37
  %82 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i, float %70, float %65) #3, !dbg !37
  %.05.i = select i1 %.not5.i, float %82, float %81, !dbg !37
  %83 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !37
  %.not6.i = icmp eq i32 %83, 0, !dbg !37
  %84 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i, float %70, float %64) #3, !dbg !37
  %85 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i, float %70, float %64) #3, !dbg !37
  %.06.i = select i1 %.not6.i, float %85, float %84, !dbg !37
  %86 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !37
  %.not7.i = icmp eq i32 %86, 0, !dbg !37
  %87 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i, float %70, float %63) #3, !dbg !37
  %88 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i, float %70, float %63) #3, !dbg !37
  %.07.i = select i1 %.not7.i, float %88, float %87, !dbg !37
  %89 = fneg float %70, !dbg !37
  %90 = select i1 %59, float %89, float %55, !dbg !37
  %91 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !37
  %.not8.i = icmp eq i32 %91, 0, !dbg !37
  %92 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.07.i, float %90, float %90) #3, !dbg !37
  %93 = tail call float @llvm.nvvm.fma.rn.f(float %.07.i, float %90, float %90) #3, !dbg !37
  %.08.i = select i1 %.not8.i, float %93, float %92, !dbg !37
  br i1 %59, label %94, label %__nv_erff.exit, !dbg !37

94:                                               ; preds = %__internal_fmad.exit.i
  %95 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %.08.i) #3, !dbg !37
  %96 = fsub float 1.000000e+00, %95, !dbg !37
  %97 = bitcast float %96 to i32, !dbg !37
  %98 = bitcast float %55 to i32, !dbg !37
  %99 = and i32 %98, -2147483648, !dbg !37
  %100 = or i32 %99, %97, !dbg !37
  %101 = bitcast i32 %100 to float, !dbg !37
  br label %__nv_erff.exit, !dbg !37

__nv_erff.exit:                                   ; preds = %__internal_fmad.exit.i, %94
  %r.0.i = phi float [ %101, %94 ], [ %.08.i, %__internal_fmad.exit.i ], !dbg !37
  %102 = fmul float %54, 5.000000e-01, !dbg !38
  %103 = fadd float %r.0.i, 1.000000e+00, !dbg !39
  %104 = fmul float %102, %103, !dbg !40
  %105 = bitcast float %36 to i32, !dbg !41
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %105, ptr addrspace(1) %17, i1 %14) #3, !dbg !41
  %106 = getelementptr float, ptr addrspace(1) %1, i64 %16, !dbg !42
  %107 = bitcast float %104 to i32, !dbg !43
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %107, ptr addrspace(1) %106, i1 %14) #3, !dbg !43
  ret void, !dbg !44
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.ftz.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.ftz.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ch2tiqui3r2imwfbgxgnqthqjd4biwkwhdq2mrc64eiqepqq6g6q.py", directory: "inductor_cache/h2")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_convolution_gelu_3, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_convolution_gelu_3, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_convolution_gelu_3", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_convolution_gelu_3", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 34, scope: !7)
!17 = !DILocation(line: 26, column: 39, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 35, scope: !7)
!20 = !DILocation(line: 28, column: 30, scope: !7)
!21 = !DILocation(line: 28, column: 35, scope: !7)
!22 = !DILocation(line: 29, column: 30, scope: !7)
!23 = !DILocation(line: 29, column: 35, scope: !7)
!24 = !DILocation(line: 30, column: 31, scope: !7)
!25 = !DILocation(line: 30, column: 36, scope: !7)
!26 = !DILocation(line: 31, column: 31, scope: !7)
!27 = !DILocation(line: 31, column: 36, scope: !7)
!28 = !DILocation(line: 32, column: 18, scope: !7)
!29 = !DILocation(line: 33, column: 18, scope: !7)
!30 = !DILocation(line: 35, column: 18, scope: !7)
!31 = !DILocation(line: 36, column: 26, scope: !7)
!32 = !DILocation(line: 38, column: 19, scope: !7)
!33 = !DILocation(line: 41, column: 19, scope: !7)
!34 = !DILocation(line: 42, column: 20, scope: !7)
!35 = !DILocation(line: 43, column: 20, scope: !7)
!36 = !DILocation(line: 47, column: 20, scope: !7)
!37 = !DILocation(line: 48, column: 26, scope: !7)
!38 = !DILocation(line: 45, column: 20, scope: !7)
!39 = !DILocation(line: 49, column: 20, scope: !7)
!40 = !DILocation(line: 50, column: 20, scope: !7)
!41 = !DILocation(line: 51, column: 39, scope: !7)
!42 = !DILocation(line: 52, column: 28, scope: !7)
!43 = !DILocation(line: 52, column: 40, scope: !7)
!44 = !DILocation(line: 52, column: 4, scope: !7)
