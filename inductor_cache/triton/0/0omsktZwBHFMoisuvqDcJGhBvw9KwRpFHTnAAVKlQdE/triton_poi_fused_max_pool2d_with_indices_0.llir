; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_max_pool2d_with_indices_0(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 8, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 1, !dbg !12
  %8 = and i32 %7, 254, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = or disjoint i32 %9, 1, !dbg !13
  %11 = icmp slt i32 %9, 256, !dbg !14
  %12 = sdiv i32 %9, 4, !dbg !15
  %13 = srem i32 %10, 4, !dbg !16
  %14 = icmp sgt i32 %13, 0, !dbg !17
  %15 = add i32 %9, -5, !dbg !18
  %16 = add i32 %9, -4, !dbg !18
  %17 = sext i32 %15 to i64, !dbg !19
  %18 = getelementptr float, ptr addrspace(1) %0, i64 %17, !dbg !19
  %19 = sext i32 %16 to i64, !dbg !19
  %20 = getelementptr float, ptr addrspace(1) %0, i64 %19, !dbg !19
  %21 = add nsw i32 %13, 1, !dbg !20
  %22 = icmp ult i32 %21, 4, !dbg !20
  %23 = add i32 %9, -3, !dbg !21
  %24 = add i32 %9, -2, !dbg !21
  %25 = sext i32 %23 to i64, !dbg !22
  %26 = getelementptr float, ptr addrspace(1) %0, i64 %25, !dbg !22
  %27 = sext i32 %24 to i64, !dbg !22
  %28 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !22
  %29 = insertelement <2 x i32> poison, i32 %9, i64 0, !dbg !16
  %30 = insertelement <2 x i32> %29, i32 %12, i64 1, !dbg !16
  %31 = srem <2 x i32> %30, splat (i32 4), !dbg !16
  %32 = extractelement <2 x i32> %31, i64 1, !dbg !23
  %33 = icmp sgt i32 %32, 0, !dbg !24
  %34 = icmp sgt <2 x i32> %31, <i32 0, i32 -1>, !dbg !17
  %35 = extractelement <2 x i1> %34, i64 0, !dbg !25
  %36 = and i1 %35, %33, !dbg !25
  %37 = and i1 %14, %33, !dbg !25
  %38 = and i1 %11, %36, !dbg !26
  %39 = and i1 %11, %37, !dbg !26
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %18, i1 %38, i32 -8388608, i1 %38) #1, !dbg !27
  %41 = bitcast i32 %40 to float, !dbg !27
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %20, i1 %39, i32 -8388608, i1 %39) #1, !dbg !27
  %43 = bitcast i32 %42 to float, !dbg !27
  %44 = extractelement <2 x i32> %31, i64 0, !dbg !28
  %45 = icmp sgt i32 %44, -1, !dbg !29
  %46 = and i1 %45, %33, !dbg !30
  %47 = and i1 %11, %46, !dbg !31
  %48 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %20, i1 %47, i32 -8388608, i1 %47, i32 -8388608, i1 %47) #1, !dbg !32
  %49 = extractvalue { i32, i32 } %48, 0, !dbg !32
  %50 = extractvalue { i32, i32 } %48, 1, !dbg !32
  %51 = bitcast i32 %49 to float, !dbg !32
  %52 = bitcast i32 %50 to float, !dbg !32
  %53 = fcmp ogt float %51, %41, !dbg !33
  %54 = fcmp ogt float %52, %43, !dbg !33
  %55 = fcmp uno float %51, 0.000000e+00, !dbg !37
  %56 = fcmp uno float %52, 0.000000e+00, !dbg !37
  %57 = or i1 %53, %55, !dbg !38
  %58 = or i1 %54, %56, !dbg !38
  %59 = select i1 %57, float %51, float %41, !dbg !39
  %60 = select i1 %58, float %52, float %43, !dbg !39
  %61 = icmp ult i32 %44, 4, !dbg !20
  %62 = and i1 %61, %33, !dbg !40
  %63 = and i1 %22, %33, !dbg !40
  %64 = and i1 %11, %62, !dbg !41
  %65 = and i1 %11, %63, !dbg !41
  %66 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %26, i1 %64, i32 -8388608, i1 %64) #1, !dbg !42
  %67 = bitcast i32 %66 to float, !dbg !42
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %28, i1 %65, i32 -8388608, i1 %65) #1, !dbg !42
  %69 = bitcast i32 %68 to float, !dbg !42
  %70 = fcmp olt float %59, %67, !dbg !43
  %71 = fcmp olt float %60, %69, !dbg !43
  %72 = fcmp uno float %67, 0.000000e+00, !dbg !45
  %73 = fcmp uno float %69, 0.000000e+00, !dbg !45
  %74 = or i1 %72, %70, !dbg !46
  %75 = or i1 %73, %71, !dbg !46
  %76 = select i1 %74, float %67, float %59, !dbg !47
  %77 = select i1 %75, float %69, float %60, !dbg !47
  %78 = extractelement <2 x i1> %34, i64 1, !dbg !48
  %79 = and i1 %35, %78, !dbg !48
  %80 = and i1 %14, %78, !dbg !48
  %81 = add i32 %9, -1, !dbg !49
  %82 = sext i32 %81 to i64, !dbg !50
  %83 = getelementptr float, ptr addrspace(1) %0, i64 %82, !dbg !50
  %84 = sext i32 %10 to i64, !dbg !50
  %85 = getelementptr float, ptr addrspace(1) %0, i64 %84, !dbg !50
  %86 = getelementptr i8, ptr addrspace(1) %85, i64 -4, !dbg !50
  %87 = and i1 %11, %79, !dbg !51
  %88 = and i1 %11, %80, !dbg !51
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %83, i1 %87, i32 -8388608, i1 %87) #1, !dbg !52
  %90 = bitcast i32 %89 to float, !dbg !52
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %86, i1 %88, i32 -8388608, i1 %88) #1, !dbg !52
  %92 = bitcast i32 %91 to float, !dbg !52
  %93 = fcmp olt float %76, %90, !dbg !53
  %94 = fcmp olt float %77, %92, !dbg !53
  %95 = fcmp uno float %90, 0.000000e+00, !dbg !55
  %96 = fcmp uno float %92, 0.000000e+00, !dbg !55
  %97 = or i1 %95, %93, !dbg !56
  %98 = or i1 %96, %94, !dbg !56
  %99 = select i1 %97, float %90, float %76, !dbg !57
  %100 = select i1 %98, float %92, float %77, !dbg !57
  %101 = or i32 %32, %44, !dbg !58
  %102 = icmp sgt i32 %101, -1, !dbg !58
  %103 = sext i32 %9 to i64, !dbg !59
  %104 = getelementptr float, ptr addrspace(1) %0, i64 %103, !dbg !59
  %105 = and i1 %11, %102, !dbg !60
  %106 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %104, i1 %105, i32 -8388608, i1 %105, i32 -8388608, i1 %105) #1, !dbg !61
  %107 = extractvalue { i32, i32 } %106, 0, !dbg !61
  %108 = extractvalue { i32, i32 } %106, 1, !dbg !61
  %109 = bitcast i32 %107 to float, !dbg !61
  %110 = bitcast i32 %108 to float, !dbg !61
  %111 = fcmp olt float %99, %109, !dbg !62
  %112 = fcmp olt float %100, %110, !dbg !62
  %113 = fcmp uno float %109, 0.000000e+00, !dbg !64
  %114 = fcmp uno float %110, 0.000000e+00, !dbg !64
  %115 = or i1 %113, %111, !dbg !65
  %116 = or i1 %114, %112, !dbg !65
  %117 = select i1 %115, float %109, float %99, !dbg !66
  %118 = select i1 %116, float %110, float %100, !dbg !66
  %119 = and i1 %61, %78, !dbg !67
  %120 = and i1 %22, %78, !dbg !67
  %121 = add i32 %9, 2, !dbg !68
  %122 = sext i32 %121 to i64, !dbg !69
  %123 = getelementptr float, ptr addrspace(1) %0, i64 %122, !dbg !69
  %124 = and i1 %11, %119, !dbg !70
  %125 = and i1 %11, %120, !dbg !70
  %126 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %85, i1 %124, i32 -8388608, i1 %124) #1, !dbg !71
  %127 = bitcast i32 %126 to float, !dbg !71
  %128 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %123, i1 %125, i32 -8388608, i1 %125) #1, !dbg !71
  %129 = bitcast i32 %128 to float, !dbg !71
  %130 = fcmp olt float %117, %127, !dbg !72
  %131 = fcmp olt float %118, %129, !dbg !72
  %132 = fcmp uno float %127, 0.000000e+00, !dbg !74
  %133 = fcmp uno float %129, 0.000000e+00, !dbg !74
  %134 = or i1 %132, %130, !dbg !75
  %135 = or i1 %133, %131, !dbg !75
  %136 = select i1 %134, float %127, float %117, !dbg !76
  %137 = select i1 %135, float %129, float %118, !dbg !76
  %138 = add nsw i32 %32, 1, !dbg !23
  %139 = icmp ult i32 %138, 4, !dbg !23
  %140 = and i1 %35, %139, !dbg !77
  %141 = and i1 %14, %139, !dbg !77
  %142 = add i32 %9, 3, !dbg !78
  %143 = add i32 %9, 4, !dbg !78
  %144 = sext i32 %142 to i64, !dbg !79
  %145 = getelementptr float, ptr addrspace(1) %0, i64 %144, !dbg !79
  %146 = sext i32 %143 to i64, !dbg !79
  %147 = getelementptr float, ptr addrspace(1) %0, i64 %146, !dbg !79
  %148 = and i1 %11, %140, !dbg !80
  %149 = and i1 %11, %141, !dbg !80
  %150 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %145, i1 %148, i32 -8388608, i1 %148) #1, !dbg !81
  %151 = bitcast i32 %150 to float, !dbg !81
  %152 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %147, i1 %149, i32 -8388608, i1 %149) #1, !dbg !81
  %153 = bitcast i32 %152 to float, !dbg !81
  %154 = fcmp olt float %136, %151, !dbg !82
  %155 = fcmp olt float %137, %153, !dbg !82
  %156 = fcmp uno float %151, 0.000000e+00, !dbg !84
  %157 = fcmp uno float %153, 0.000000e+00, !dbg !84
  %158 = or i1 %156, %154, !dbg !85
  %159 = or i1 %157, %155, !dbg !85
  %160 = select i1 %158, float %151, float %136, !dbg !86
  %161 = select i1 %159, float %153, float %137, !dbg !86
  %162 = and i1 %45, %139, !dbg !87
  %163 = and i1 %11, %162, !dbg !88
  %164 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %147, i1 %163, i32 -8388608, i1 %163, i32 -8388608, i1 %163) #1, !dbg !89
  %165 = extractvalue { i32, i32 } %164, 0, !dbg !89
  %166 = extractvalue { i32, i32 } %164, 1, !dbg !89
  %167 = bitcast i32 %165 to float, !dbg !89
  %168 = bitcast i32 %166 to float, !dbg !89
  %169 = fcmp olt float %160, %167, !dbg !90
  %170 = fcmp olt float %161, %168, !dbg !90
  %171 = fcmp uno float %167, 0.000000e+00, !dbg !92
  %172 = fcmp uno float %168, 0.000000e+00, !dbg !92
  %173 = or i1 %171, %169, !dbg !93
  %174 = or i1 %172, %170, !dbg !93
  %175 = select i1 %173, float %167, float %160, !dbg !94
  %176 = select i1 %174, float %168, float %161, !dbg !94
  %177 = or i32 %138, %44, !dbg !28
  %178 = icmp ult i32 %177, 4, !dbg !28
  %179 = or i32 %138, %21, !dbg !28
  %180 = icmp ult i32 %179, 4, !dbg !28
  %181 = add i32 %9, 5, !dbg !95
  %182 = add i32 %9, 6, !dbg !95
  %183 = sext i32 %181 to i64, !dbg !96
  %184 = getelementptr float, ptr addrspace(1) %0, i64 %183, !dbg !96
  %185 = sext i32 %182 to i64, !dbg !96
  %186 = getelementptr float, ptr addrspace(1) %0, i64 %185, !dbg !96
  %187 = and i1 %11, %178, !dbg !97
  %188 = and i1 %11, %180, !dbg !97
  %189 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %184, i1 %187, i32 -8388608, i1 %187) #1, !dbg !98
  %190 = bitcast i32 %189 to float, !dbg !98
  %191 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %186, i1 %188, i32 -8388608, i1 %188) #1, !dbg !98
  %192 = bitcast i32 %191 to float, !dbg !98
  %193 = fcmp olt float %175, %190, !dbg !99
  %194 = fcmp olt float %176, %192, !dbg !99
  %195 = fcmp uno float %190, 0.000000e+00, !dbg !101
  %196 = fcmp uno float %192, 0.000000e+00, !dbg !101
  %197 = or i1 %195, %193, !dbg !102
  %198 = or i1 %196, %194, !dbg !102
  %199 = getelementptr float, ptr addrspace(1) %1, i64 %103, !dbg !103
  %200 = bitcast float %175 to i32, !dbg !104
  %201 = select i1 %197, i32 %189, i32 %200, !dbg !105
  %202 = bitcast float %176 to i32, !dbg !104
  %203 = select i1 %198, i32 %191, i32 %202, !dbg !105
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %201, i32 %203, ptr addrspace(1) %199, i1 %11) #1, !dbg !104
  ret void, !dbg !106
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ct2xvxxm2jlqpb34t6xxkd64zgsnv7c5fuzgw4upqfgimhx2pjyw.py", directory: "inductor_cache/t2")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_0, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_0", linkageName: "triton_poi_fused_max_pool2d_with_indices_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 34, column: 19, scope: !7)
!18 = !DILocation(line: 38, column: 38, scope: !7)
!19 = !DILocation(line: 38, column: 31, scope: !7)
!20 = !DILocation(line: 49, column: 20, scope: !7)
!21 = !DILocation(line: 51, column: 38, scope: !7)
!22 = !DILocation(line: 51, column: 31, scope: !7)
!23 = !DILocation(line: 69, column: 20, scope: !7)
!24 = !DILocation(line: 29, column: 19, scope: !7)
!25 = !DILocation(line: 37, column: 19, scope: !7)
!26 = !DILocation(line: 38, column: 51, scope: !7)
!27 = !DILocation(line: 38, column: 43, scope: !7)
!28 = !DILocation(line: 76, column: 20, scope: !7)
!29 = !DILocation(line: 40, column: 21, scope: !7)
!30 = !DILocation(line: 43, column: 19, scope: !7)
!31 = !DILocation(line: 44, column: 51, scope: !7)
!32 = !DILocation(line: 44, column: 43, scope: !7)
!33 = !DILocation(line: 118, column: 15, scope: !34, inlinedAt: !36)
!34 = distinct !DILexicalBlockFile(scope: !7, file: !35, discriminator: 0)
!35 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!36 = !DILocation(line: 45, column: 42, scope: !7)
!37 = !DILocation(line: 120, column: 21, scope: !34, inlinedAt: !36)
!38 = !DILocation(line: 120, column: 16, scope: !34, inlinedAt: !36)
!39 = !DILocation(line: 121, column: 29, scope: !34, inlinedAt: !36)
!40 = !DILocation(line: 50, column: 19, scope: !7)
!41 = !DILocation(line: 51, column: 51, scope: !7)
!42 = !DILocation(line: 51, column: 43, scope: !7)
!43 = !DILocation(line: 118, column: 15, scope: !34, inlinedAt: !44)
!44 = !DILocation(line: 52, column: 42, scope: !7)
!45 = !DILocation(line: 120, column: 21, scope: !34, inlinedAt: !44)
!46 = !DILocation(line: 120, column: 16, scope: !34, inlinedAt: !44)
!47 = !DILocation(line: 121, column: 29, scope: !34, inlinedAt: !44)
!48 = !DILocation(line: 57, column: 20, scope: !7)
!49 = !DILocation(line: 58, column: 38, scope: !7)
!50 = !DILocation(line: 58, column: 31, scope: !7)
!51 = !DILocation(line: 58, column: 51, scope: !7)
!52 = !DILocation(line: 58, column: 43, scope: !7)
!53 = !DILocation(line: 118, column: 15, scope: !34, inlinedAt: !54)
!54 = !DILocation(line: 59, column: 42, scope: !7)
!55 = !DILocation(line: 120, column: 21, scope: !34, inlinedAt: !54)
!56 = !DILocation(line: 120, column: 16, scope: !34, inlinedAt: !54)
!57 = !DILocation(line: 121, column: 29, scope: !34, inlinedAt: !54)
!58 = !DILocation(line: 60, column: 20, scope: !7)
!59 = !DILocation(line: 61, column: 31, scope: !7)
!60 = !DILocation(line: 61, column: 44, scope: !7)
!61 = !DILocation(line: 61, column: 36, scope: !7)
!62 = !DILocation(line: 118, column: 15, scope: !34, inlinedAt: !63)
!63 = !DILocation(line: 62, column: 42, scope: !7)
!64 = !DILocation(line: 120, column: 21, scope: !34, inlinedAt: !63)
!65 = !DILocation(line: 120, column: 16, scope: !34, inlinedAt: !63)
!66 = !DILocation(line: 121, column: 29, scope: !34, inlinedAt: !63)
!67 = !DILocation(line: 63, column: 20, scope: !7)
!68 = !DILocation(line: 64, column: 35, scope: !7)
!69 = !DILocation(line: 64, column: 31, scope: !7)
!70 = !DILocation(line: 64, column: 48, scope: !7)
!71 = !DILocation(line: 64, column: 40, scope: !7)
!72 = !DILocation(line: 118, column: 15, scope: !34, inlinedAt: !73)
!73 = !DILocation(line: 65, column: 42, scope: !7)
!74 = !DILocation(line: 120, column: 21, scope: !34, inlinedAt: !73)
!75 = !DILocation(line: 120, column: 16, scope: !34, inlinedAt: !73)
!76 = !DILocation(line: 121, column: 29, scope: !34, inlinedAt: !73)
!77 = !DILocation(line: 70, column: 20, scope: !7)
!78 = !DILocation(line: 71, column: 35, scope: !7)
!79 = !DILocation(line: 71, column: 31, scope: !7)
!80 = !DILocation(line: 71, column: 48, scope: !7)
!81 = !DILocation(line: 71, column: 40, scope: !7)
!82 = !DILocation(line: 118, column: 15, scope: !34, inlinedAt: !83)
!83 = !DILocation(line: 72, column: 42, scope: !7)
!84 = !DILocation(line: 120, column: 21, scope: !34, inlinedAt: !83)
!85 = !DILocation(line: 120, column: 16, scope: !34, inlinedAt: !83)
!86 = !DILocation(line: 121, column: 29, scope: !34, inlinedAt: !83)
!87 = !DILocation(line: 73, column: 20, scope: !7)
!88 = !DILocation(line: 74, column: 48, scope: !7)
!89 = !DILocation(line: 74, column: 40, scope: !7)
!90 = !DILocation(line: 118, column: 15, scope: !34, inlinedAt: !91)
!91 = !DILocation(line: 75, column: 42, scope: !7)
!92 = !DILocation(line: 120, column: 21, scope: !34, inlinedAt: !91)
!93 = !DILocation(line: 120, column: 16, scope: !34, inlinedAt: !91)
!94 = !DILocation(line: 121, column: 29, scope: !34, inlinedAt: !91)
!95 = !DILocation(line: 77, column: 35, scope: !7)
!96 = !DILocation(line: 77, column: 31, scope: !7)
!97 = !DILocation(line: 77, column: 48, scope: !7)
!98 = !DILocation(line: 77, column: 40, scope: !7)
!99 = !DILocation(line: 118, column: 15, scope: !34, inlinedAt: !100)
!100 = !DILocation(line: 78, column: 42, scope: !7)
!101 = !DILocation(line: 120, column: 21, scope: !34, inlinedAt: !100)
!102 = !DILocation(line: 120, column: 16, scope: !34, inlinedAt: !100)
!103 = !DILocation(line: 79, column: 25, scope: !7)
!104 = !DILocation(line: 79, column: 37, scope: !7)
!105 = !DILocation(line: 121, column: 29, scope: !34, inlinedAt: !100)
!106 = !DILocation(line: 79, column: 4, scope: !7)
