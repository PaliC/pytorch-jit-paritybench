; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused_cat_39(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, ptr addrspace(1) %13, ptr addrspace(1) %14, ptr addrspace(1) %15, ptr addrspace(1) %16, ptr addrspace(1) %17, ptr addrspace(1) %18, ptr addrspace(1) %19, ptr addrspace(1) %20, i32 %21) local_unnamed_addr !dbg !7 {
  %23 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %24 = shl i32 %23, 9, !dbg !11
  %25 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %26 = shl i32 %25, 1, !dbg !12
  %27 = and i32 %26, 510, !dbg !12
  %28 = or disjoint i32 %24, %27, !dbg !13
  %.frozen = freeze i32 %28, !dbg !14
  %29 = sdiv i32 %.frozen, 4352, !dbg !14
  %30 = srem i32 %29, 832, !dbg !15
  %31 = mul i32 %29, 4352, !dbg !16
  %.decomposed = sub i32 %.frozen, %31, !dbg !16
  %.frozen36 = freeze i32 %28, !dbg !17
  %32 = sdiv i32 %.frozen36, 3620864, !dbg !17
  %33 = icmp slt i32 %30, 256, !dbg !18
  %34 = mul i32 %32, 3620864, !dbg !19
  %srem.decomposed = sub i32 %.frozen36, %34, !dbg !19
  %35 = mul nsw i32 %32, 1114112, !dbg !20
  %36 = add nsw i32 %35, %srem.decomposed, !dbg !21
  %37 = sext i32 %36 to i64, !dbg !22
  %38 = getelementptr float, ptr addrspace(1) %0, i64 %37, !dbg !22
  %39 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %38, i1 %33, i32 0, i1 %33, i32 0, i1 %33) #3, !dbg !23
  %40 = sext i32 %30 to i64, !dbg !24
  %41 = getelementptr float, ptr addrspace(1) %1, i64 %40, !dbg !24
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %41, i1 %33, i32 0, i1 %33) #3, !dbg !25
  %43 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %41, i1 %33, i32 0, i1 %33) #3, !dbg !25
  %44 = getelementptr float, ptr addrspace(1) %2, i64 %40, !dbg !26
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %44, i1 %33, i32 0, i1 %33) #3, !dbg !27
  %46 = bitcast i32 %45 to float, !dbg !27
  %47 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %44, i1 %33, i32 0, i1 %33) #3, !dbg !27
  %48 = bitcast i32 %47 to float, !dbg !27
  %49 = fadd float %46, 0x3EE4F8B580000000, !dbg !28
  %50 = fadd float %48, 0x3EE4F8B580000000, !dbg !28
  %51 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i = icmp eq i32 %51, 0, !dbg !29
  %52 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i = icmp eq i32 %52, 0, !dbg !29
  br i1 %.not.i, label %58, label %53, !dbg !29

53:                                               ; preds = %22
  br i1 %.not1.i, label %56, label %54, !dbg !29

54:                                               ; preds = %53
  %55 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %49) #3, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

56:                                               ; preds = %53
  %57 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %49) #3, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

58:                                               ; preds = %22
  br i1 %.not1.i, label %61, label %59, !dbg !29

59:                                               ; preds = %58
  %60 = tail call float @llvm.nvvm.sqrt.rn.f(float %49) #3, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

61:                                               ; preds = %58
  %62 = tail call float @llvm.nvvm.sqrt.approx.f(float %49) #3, !dbg !29
  br label %__nv_sqrtf.exit, !dbg !29

__nv_sqrtf.exit:                                  ; preds = %54, %56, %59, %61
  %.0.i = phi float [ %55, %54 ], [ %57, %56 ], [ %60, %59 ], [ %62, %61 ], !dbg !29
  %63 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !29
  %.not.i1 = icmp eq i32 %63, 0, !dbg !29
  %64 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !29
  %.not1.i4 = icmp eq i32 %64, 0, !dbg !29
  br i1 %.not.i1, label %70, label %65, !dbg !29

65:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %68, label %66, !dbg !29

66:                                               ; preds = %65
  %67 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %50) #3, !dbg !29
  br label %__nv_sqrtf.exit5, !dbg !29

68:                                               ; preds = %65
  %69 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %50) #3, !dbg !29
  br label %__nv_sqrtf.exit5, !dbg !29

70:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %73, label %71, !dbg !29

71:                                               ; preds = %70
  %72 = tail call float @llvm.nvvm.sqrt.rn.f(float %50) #3, !dbg !29
  br label %__nv_sqrtf.exit5, !dbg !29

73:                                               ; preds = %70
  %74 = tail call float @llvm.nvvm.sqrt.approx.f(float %50) #3, !dbg !29
  br label %__nv_sqrtf.exit5, !dbg !29

__nv_sqrtf.exit5:                                 ; preds = %66, %68, %71, %73
  %.0.i3 = phi float [ %67, %66 ], [ %69, %68 ], [ %72, %71 ], [ %74, %73 ], !dbg !29
  %75 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !30
  %76 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !30
  %77 = getelementptr float, ptr addrspace(1) %3, i64 %40, !dbg !31
  %78 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %77, i1 %33, i32 0, i1 %33) #3, !dbg !32
  %79 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %77, i1 %33, i32 0, i1 %33) #3, !dbg !32
  %80 = getelementptr float, ptr addrspace(1) %4, i64 %40, !dbg !33
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %80, i1 %33, i32 0, i1 %33) #3, !dbg !34
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %80, i1 %33, i32 0, i1 %33) #3, !dbg !34
  %83 = add nsw i32 %30, -256, !dbg !35
  %84 = icmp ult i32 %83, 320, !dbg !35
  %85 = mul nsw i32 %83, 4352, !dbg !36
  %86 = mul nsw i32 %32, 1392640, !dbg !37
  %87 = add nsw i32 %86, %.decomposed, !dbg !38
  %88 = add nsw i32 %87, %85, !dbg !39
  %89 = sext i32 %88 to i64, !dbg !40
  %90 = getelementptr float, ptr addrspace(1) %5, i64 %89, !dbg !40
  %91 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %90, i1 %84, i32 0, i1 %84, i32 0, i1 %84) #3, !dbg !41
  %92 = sext i32 %83 to i64, !dbg !42
  %93 = getelementptr float, ptr addrspace(1) %6, i64 %92, !dbg !42
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %93, i1 %84, i32 0, i1 %84) #3, !dbg !43
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %93, i1 %84, i32 0, i1 %84) #3, !dbg !43
  %96 = getelementptr float, ptr addrspace(1) %7, i64 %92, !dbg !44
  %97 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %96, i1 %84, i32 0, i1 %84) #3, !dbg !45
  %98 = bitcast i32 %97 to float, !dbg !45
  %99 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %96, i1 %84, i32 0, i1 %84) #3, !dbg !45
  %100 = bitcast i32 %99 to float, !dbg !45
  %101 = fadd float %98, 0x3EE4F8B580000000, !dbg !46
  %102 = fadd float %100, 0x3EE4F8B580000000, !dbg !46
  %103 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !47
  %.not.i6 = icmp eq i32 %103, 0, !dbg !47
  %104 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !47
  %.not1.i9 = icmp eq i32 %104, 0, !dbg !47
  br i1 %.not.i6, label %110, label %105, !dbg !47

105:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %108, label %106, !dbg !47

106:                                              ; preds = %105
  %107 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %101) #3, !dbg !47
  br label %__nv_sqrtf.exit10, !dbg !47

108:                                              ; preds = %105
  %109 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %101) #3, !dbg !47
  br label %__nv_sqrtf.exit10, !dbg !47

110:                                              ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %113, label %111, !dbg !47

111:                                              ; preds = %110
  %112 = tail call float @llvm.nvvm.sqrt.rn.f(float %101) #3, !dbg !47
  br label %__nv_sqrtf.exit10, !dbg !47

113:                                              ; preds = %110
  %114 = tail call float @llvm.nvvm.sqrt.approx.f(float %101) #3, !dbg !47
  br label %__nv_sqrtf.exit10, !dbg !47

__nv_sqrtf.exit10:                                ; preds = %106, %108, %111, %113
  %.0.i8 = phi float [ %107, %106 ], [ %109, %108 ], [ %112, %111 ], [ %114, %113 ], !dbg !47
  %115 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !47
  %.not.i11 = icmp eq i32 %115, 0, !dbg !47
  %116 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !47
  %.not1.i14 = icmp eq i32 %116, 0, !dbg !47
  br i1 %.not.i11, label %122, label %117, !dbg !47

117:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %120, label %118, !dbg !47

118:                                              ; preds = %117
  %119 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %102) #3, !dbg !47
  br label %__nv_sqrtf.exit15, !dbg !47

120:                                              ; preds = %117
  %121 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %102) #3, !dbg !47
  br label %__nv_sqrtf.exit15, !dbg !47

122:                                              ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %125, label %123, !dbg !47

123:                                              ; preds = %122
  %124 = tail call float @llvm.nvvm.sqrt.rn.f(float %102) #3, !dbg !47
  br label %__nv_sqrtf.exit15, !dbg !47

125:                                              ; preds = %122
  %126 = tail call float @llvm.nvvm.sqrt.approx.f(float %102) #3, !dbg !47
  br label %__nv_sqrtf.exit15, !dbg !47

__nv_sqrtf.exit15:                                ; preds = %118, %120, %123, %125
  %.0.i13 = phi float [ %119, %118 ], [ %121, %120 ], [ %124, %123 ], [ %126, %125 ], !dbg !47
  %127 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !48
  %128 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !48
  %129 = getelementptr float, ptr addrspace(1) %8, i64 %92, !dbg !49
  %130 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %129, i1 %84, i32 0, i1 %84) #3, !dbg !50
  %131 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %129, i1 %84, i32 0, i1 %84) #3, !dbg !50
  %132 = getelementptr float, ptr addrspace(1) %9, i64 %92, !dbg !51
  %133 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %132, i1 %84, i32 0, i1 %84) #3, !dbg !52
  %134 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %132, i1 %84, i32 0, i1 %84) #3, !dbg !52
  %135 = add nsw i32 %30, -576, !dbg !53
  %136 = icmp ult i32 %135, 128, !dbg !53
  %137 = mul nsw i32 %135, 4352, !dbg !54
  %138 = mul nsw i32 %32, 557056, !dbg !55
  %139 = add nsw i32 %138, %.decomposed, !dbg !56
  %140 = add nsw i32 %139, %137, !dbg !57
  %141 = sext i32 %140 to i64, !dbg !58
  %142 = getelementptr float, ptr addrspace(1) %10, i64 %141, !dbg !58
  %143 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %142, i1 %136, i32 0, i1 %136, i32 0, i1 %136) #3, !dbg !59
  %144 = sext i32 %135 to i64, !dbg !60
  %145 = getelementptr float, ptr addrspace(1) %11, i64 %144, !dbg !60
  %146 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %145, i1 %136, i32 0, i1 %136) #3, !dbg !61
  %147 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %145, i1 %136, i32 0, i1 %136) #3, !dbg !61
  %148 = getelementptr float, ptr addrspace(1) %12, i64 %144, !dbg !62
  %149 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %148, i1 %136, i32 0, i1 %136) #3, !dbg !63
  %150 = bitcast i32 %149 to float, !dbg !63
  %151 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %148, i1 %136, i32 0, i1 %136) #3, !dbg !63
  %152 = bitcast i32 %151 to float, !dbg !63
  %153 = fadd float %150, 0x3EE4F8B580000000, !dbg !64
  %154 = fadd float %152, 0x3EE4F8B580000000, !dbg !64
  %155 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !65
  %.not.i16 = icmp eq i32 %155, 0, !dbg !65
  %156 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !65
  %.not1.i19 = icmp eq i32 %156, 0, !dbg !65
  br i1 %.not.i16, label %162, label %157, !dbg !65

157:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %160, label %158, !dbg !65

158:                                              ; preds = %157
  %159 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %153) #3, !dbg !65
  br label %__nv_sqrtf.exit20, !dbg !65

160:                                              ; preds = %157
  %161 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %153) #3, !dbg !65
  br label %__nv_sqrtf.exit20, !dbg !65

162:                                              ; preds = %__nv_sqrtf.exit15
  br i1 %.not1.i19, label %165, label %163, !dbg !65

163:                                              ; preds = %162
  %164 = tail call float @llvm.nvvm.sqrt.rn.f(float %153) #3, !dbg !65
  br label %__nv_sqrtf.exit20, !dbg !65

165:                                              ; preds = %162
  %166 = tail call float @llvm.nvvm.sqrt.approx.f(float %153) #3, !dbg !65
  br label %__nv_sqrtf.exit20, !dbg !65

__nv_sqrtf.exit20:                                ; preds = %158, %160, %163, %165
  %.0.i18 = phi float [ %159, %158 ], [ %161, %160 ], [ %164, %163 ], [ %166, %165 ], !dbg !65
  %167 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !65
  %.not.i21 = icmp eq i32 %167, 0, !dbg !65
  %168 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !65
  %.not1.i24 = icmp eq i32 %168, 0, !dbg !65
  br i1 %.not.i21, label %174, label %169, !dbg !65

169:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %172, label %170, !dbg !65

170:                                              ; preds = %169
  %171 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %154) #3, !dbg !65
  br label %__nv_sqrtf.exit25, !dbg !65

172:                                              ; preds = %169
  %173 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %154) #3, !dbg !65
  br label %__nv_sqrtf.exit25, !dbg !65

174:                                              ; preds = %__nv_sqrtf.exit20
  br i1 %.not1.i24, label %177, label %175, !dbg !65

175:                                              ; preds = %174
  %176 = tail call float @llvm.nvvm.sqrt.rn.f(float %154) #3, !dbg !65
  br label %__nv_sqrtf.exit25, !dbg !65

177:                                              ; preds = %174
  %178 = tail call float @llvm.nvvm.sqrt.approx.f(float %154) #3, !dbg !65
  br label %__nv_sqrtf.exit25, !dbg !65

__nv_sqrtf.exit25:                                ; preds = %170, %172, %175, %177
  %.0.i23 = phi float [ %171, %170 ], [ %173, %172 ], [ %176, %175 ], [ %178, %177 ], !dbg !65
  %179 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i18) #3, !dbg !66
  %180 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i23) #3, !dbg !66
  %181 = getelementptr float, ptr addrspace(1) %13, i64 %144, !dbg !67
  %182 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %181, i1 %136, i32 0, i1 %136) #3, !dbg !68
  %183 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %181, i1 %136, i32 0, i1 %136) #3, !dbg !68
  %184 = getelementptr float, ptr addrspace(1) %14, i64 %144, !dbg !69
  %185 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %184, i1 %136, i32 0, i1 %136) #3, !dbg !70
  %186 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %184, i1 %136, i32 0, i1 %136) #3, !dbg !70
  %187 = icmp sgt i32 %30, 703, !dbg !71
  %188 = add nsw i32 %30, -704, !dbg !72
  %189 = mul nsw i32 %188, 4352, !dbg !73
  %190 = add nsw i32 %139, %189, !dbg !74
  %191 = sext i32 %190 to i64, !dbg !75
  %192 = getelementptr float, ptr addrspace(1) %15, i64 %191, !dbg !75
  %193 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %192, i1 %187, i32 0, i1 %187, i32 0, i1 %187) #3, !dbg !76
  %194 = sext i32 %188 to i64, !dbg !77
  %195 = getelementptr float, ptr addrspace(1) %16, i64 %194, !dbg !77
  %196 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %195, i1 %187, i32 0, i1 %187) #3, !dbg !78
  %197 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %195, i1 %187, i32 0, i1 %187) #3, !dbg !78
  %198 = getelementptr float, ptr addrspace(1) %17, i64 %194, !dbg !79
  %199 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %198, i1 %187, i32 0, i1 %187) #3, !dbg !80
  %200 = bitcast i32 %199 to float, !dbg !80
  %201 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %198, i1 %187, i32 0, i1 %187) #3, !dbg !80
  %202 = bitcast i32 %201 to float, !dbg !80
  %203 = fadd float %200, 0x3EE4F8B580000000, !dbg !81
  %204 = fadd float %202, 0x3EE4F8B580000000, !dbg !81
  %205 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !82
  %.not.i26 = icmp eq i32 %205, 0, !dbg !82
  %206 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !82
  %.not1.i29 = icmp eq i32 %206, 0, !dbg !82
  br i1 %.not.i26, label %212, label %207, !dbg !82

207:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %210, label %208, !dbg !82

208:                                              ; preds = %207
  %209 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %203) #3, !dbg !82
  br label %__nv_sqrtf.exit30, !dbg !82

210:                                              ; preds = %207
  %211 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %203) #3, !dbg !82
  br label %__nv_sqrtf.exit30, !dbg !82

212:                                              ; preds = %__nv_sqrtf.exit25
  br i1 %.not1.i29, label %215, label %213, !dbg !82

213:                                              ; preds = %212
  %214 = tail call float @llvm.nvvm.sqrt.rn.f(float %203) #3, !dbg !82
  br label %__nv_sqrtf.exit30, !dbg !82

215:                                              ; preds = %212
  %216 = tail call float @llvm.nvvm.sqrt.approx.f(float %203) #3, !dbg !82
  br label %__nv_sqrtf.exit30, !dbg !82

__nv_sqrtf.exit30:                                ; preds = %208, %210, %213, %215
  %.0.i28 = phi float [ %209, %208 ], [ %211, %210 ], [ %214, %213 ], [ %216, %215 ], !dbg !82
  %217 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !82
  %.not.i31 = icmp eq i32 %217, 0, !dbg !82
  %218 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !82
  %.not1.i34 = icmp eq i32 %218, 0, !dbg !82
  br i1 %.not.i31, label %224, label %219, !dbg !82

219:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %222, label %220, !dbg !82

220:                                              ; preds = %219
  %221 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %204) #3, !dbg !82
  br label %__nv_sqrtf.exit35, !dbg !82

222:                                              ; preds = %219
  %223 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %204) #3, !dbg !82
  br label %__nv_sqrtf.exit35, !dbg !82

224:                                              ; preds = %__nv_sqrtf.exit30
  br i1 %.not1.i34, label %227, label %225, !dbg !82

225:                                              ; preds = %224
  %226 = tail call float @llvm.nvvm.sqrt.rn.f(float %204) #3, !dbg !82
  br label %__nv_sqrtf.exit35, !dbg !82

227:                                              ; preds = %224
  %228 = tail call float @llvm.nvvm.sqrt.approx.f(float %204) #3, !dbg !82
  br label %__nv_sqrtf.exit35, !dbg !82

__nv_sqrtf.exit35:                                ; preds = %220, %222, %225, %227
  %.0.i33 = phi float [ %221, %220 ], [ %223, %222 ], [ %226, %225 ], [ %228, %227 ], !dbg !82
  %229 = extractvalue { i32, i32 } %193, 1, !dbg !76
  %230 = insertelement <8 x i32> poison, i32 %197, i64 0, !dbg !78
  %231 = insertelement <8 x i32> %230, i32 %196, i64 1, !dbg !78
  %232 = insertelement <8 x i32> %231, i32 %42, i64 2, !dbg !78
  %233 = insertelement <8 x i32> %232, i32 %43, i64 3, !dbg !78
  %234 = insertelement <8 x i32> %233, i32 %94, i64 4, !dbg !78
  %235 = insertelement <8 x i32> %234, i32 %95, i64 5, !dbg !78
  %236 = insertelement <8 x i32> %235, i32 %146, i64 6, !dbg !78
  %237 = insertelement <8 x i32> %236, i32 %147, i64 7, !dbg !78
  %238 = bitcast <8 x i32> %237 to <8 x float>, !dbg !78
  %239 = extractvalue { i32, i32 } %193, 0, !dbg !76
  %240 = extractvalue { i32, i32 } %143, 1, !dbg !59
  %241 = extractvalue { i32, i32 } %143, 0, !dbg !59
  %242 = extractvalue { i32, i32 } %91, 1, !dbg !41
  %243 = extractvalue { i32, i32 } %91, 0, !dbg !41
  %244 = extractvalue { i32, i32 } %39, 1, !dbg !23
  %245 = extractvalue { i32, i32 } %39, 0, !dbg !23
  %246 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i28) #3, !dbg !83
  %247 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i33) #3, !dbg !83
  %248 = getelementptr float, ptr addrspace(1) %18, i64 %194, !dbg !84
  %249 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %248, i1 %187, i32 0, i1 %187) #3, !dbg !85
  %250 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %248, i1 %187, i32 0, i1 %187) #3, !dbg !85
  %251 = getelementptr float, ptr addrspace(1) %19, i64 %194, !dbg !86
  %252 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %251, i1 %187, i32 0, i1 %187) #3, !dbg !87
  %253 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %251, i1 %187, i32 0, i1 %187) #3, !dbg !87
  %254 = insertelement <8 x i32> poison, i32 %229, i64 0, !dbg !76
  %255 = insertelement <8 x i32> %254, i32 %239, i64 1, !dbg !76
  %256 = insertelement <8 x i32> %255, i32 %245, i64 2, !dbg !76
  %257 = insertelement <8 x i32> %256, i32 %244, i64 3, !dbg !76
  %258 = insertelement <8 x i32> %257, i32 %243, i64 4, !dbg !76
  %259 = insertelement <8 x i32> %258, i32 %242, i64 5, !dbg !76
  %260 = insertelement <8 x i32> %259, i32 %241, i64 6, !dbg !76
  %261 = insertelement <8 x i32> %260, i32 %240, i64 7, !dbg !76
  %262 = bitcast <8 x i32> %261 to <8 x float>, !dbg !76
  %263 = fsub <8 x float> %262, %238, !dbg !88
  %264 = insertelement <8 x float> poison, float %247, i64 0, !dbg !89
  %265 = insertelement <8 x float> %264, float %246, i64 1, !dbg !89
  %266 = insertelement <8 x float> %265, float %75, i64 2, !dbg !89
  %267 = insertelement <8 x float> %266, float %76, i64 3, !dbg !89
  %268 = insertelement <8 x float> %267, float %127, i64 4, !dbg !89
  %269 = insertelement <8 x float> %268, float %128, i64 5, !dbg !89
  %270 = insertelement <8 x float> %269, float %179, i64 6, !dbg !89
  %271 = insertelement <8 x float> %270, float %180, i64 7, !dbg !89
  %272 = fmul <8 x float> %263, %271, !dbg !89
  %273 = insertelement <8 x i32> poison, i32 %250, i64 0, !dbg !85
  %274 = insertelement <8 x i32> %273, i32 %249, i64 1, !dbg !85
  %275 = insertelement <8 x i32> %274, i32 %78, i64 2, !dbg !85
  %276 = insertelement <8 x i32> %275, i32 %79, i64 3, !dbg !85
  %277 = insertelement <8 x i32> %276, i32 %130, i64 4, !dbg !85
  %278 = insertelement <8 x i32> %277, i32 %131, i64 5, !dbg !85
  %279 = insertelement <8 x i32> %278, i32 %182, i64 6, !dbg !85
  %280 = insertelement <8 x i32> %279, i32 %183, i64 7, !dbg !85
  %281 = bitcast <8 x i32> %280 to <8 x float>, !dbg !85
  %282 = fmul <8 x float> %272, %281, !dbg !90
  %283 = insertelement <8 x i32> poison, i32 %253, i64 0, !dbg !87
  %284 = insertelement <8 x i32> %283, i32 %252, i64 1, !dbg !87
  %285 = insertelement <8 x i32> %284, i32 %81, i64 2, !dbg !87
  %286 = insertelement <8 x i32> %285, i32 %82, i64 3, !dbg !87
  %287 = insertelement <8 x i32> %286, i32 %133, i64 4, !dbg !87
  %288 = insertelement <8 x i32> %287, i32 %134, i64 5, !dbg !87
  %289 = insertelement <8 x i32> %288, i32 %185, i64 6, !dbg !87
  %290 = insertelement <8 x i32> %289, i32 %186, i64 7, !dbg !87
  %291 = bitcast <8 x i32> %290 to <8 x float>, !dbg !87
  %292 = fadd <8 x float> %282, %291, !dbg !91
  %293 = fcmp olt <8 x float> %292, zeroinitializer, !dbg !92
  %294 = extractelement <8 x i1> %293, i64 7, !dbg !96
  %295 = extractelement <8 x float> %292, i64 7, !dbg !96
  %296 = select i1 %294, float 0.000000e+00, float %295, !dbg !96
  %297 = extractelement <8 x i1> %293, i64 6, !dbg !96
  %298 = extractelement <8 x float> %292, i64 6, !dbg !96
  %299 = select i1 %297, float 0.000000e+00, float %298, !dbg !96
  %300 = extractelement <8 x i1> %293, i64 5, !dbg !98
  %301 = extractelement <8 x float> %292, i64 5, !dbg !98
  %302 = select i1 %300, float 0.000000e+00, float %301, !dbg !98
  %303 = extractelement <8 x i1> %293, i64 4, !dbg !98
  %304 = extractelement <8 x float> %292, i64 4, !dbg !98
  %305 = select i1 %303, float 0.000000e+00, float %304, !dbg !98
  %306 = extractelement <8 x i1> %293, i64 3, !dbg !100
  %307 = extractelement <8 x float> %292, i64 3, !dbg !100
  %308 = select i1 %306, float 0.000000e+00, float %307, !dbg !100
  %309 = extractelement <8 x i1> %293, i64 2, !dbg !100
  %310 = extractelement <8 x float> %292, i64 2, !dbg !100
  %311 = select i1 %309, float 0.000000e+00, float %310, !dbg !100
  %312 = extractelement <8 x i1> %293, i64 1, !dbg !102
  %313 = extractelement <8 x float> %292, i64 1, !dbg !102
  %314 = select i1 %312, float 0.000000e+00, float %313, !dbg !102
  %315 = extractelement <8 x i1> %293, i64 0, !dbg !102
  %316 = extractelement <8 x float> %292, i64 0, !dbg !102
  %317 = select i1 %315, float 0.000000e+00, float %316, !dbg !102
  %318 = select i1 %187, float %314, float 0.000000e+00, !dbg !103
  %319 = select i1 %187, float %317, float 0.000000e+00, !dbg !103
  %320 = select i1 %136, float %299, float %318, !dbg !104
  %321 = select i1 %136, float %296, float %319, !dbg !104
  %322 = select i1 %84, float %305, float %320, !dbg !104
  %323 = select i1 %84, float %302, float %321, !dbg !104
  %324 = select i1 %33, float %311, float %322, !dbg !104
  %325 = select i1 %33, float %308, float %323, !dbg !104
  %326 = sext i32 %28 to i64, !dbg !105
  %327 = getelementptr float, ptr addrspace(1) %20, i64 %326, !dbg !105
  %328 = bitcast float %324 to i32, !dbg !106
  %329 = bitcast float %325 to i32, !dbg !106
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %328, i32 %329, ptr addrspace(1) %327, i1 true) #3, !dbg !106
  ret void, !dbg !107
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cii4d4gki7ck3mfqscxsdswwntoxpd75ynesexll735iagk5hlyh.py", directory: "inductor_cache/ii")
!4 = !{ptr @triton_poi_fused_cat_39, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_39, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_39", linkageName: "triton_poi_fused_cat_39", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 29, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 32, column: 18, scope: !7)
!19 = !DILocation(line: 33, column: 35, scope: !7)
!20 = !DILocation(line: 33, column: 55, scope: !7)
!21 = !DILocation(line: 33, column: 47, scope: !7)
!22 = !DILocation(line: 33, column: 30, scope: !7)
!23 = !DILocation(line: 33, column: 60, scope: !7)
!24 = !DILocation(line: 34, column: 30, scope: !7)
!25 = !DILocation(line: 34, column: 35, scope: !7)
!26 = !DILocation(line: 36, column: 30, scope: !7)
!27 = !DILocation(line: 36, column: 35, scope: !7)
!28 = !DILocation(line: 38, column: 19, scope: !7)
!29 = !DILocation(line: 39, column: 27, scope: !7)
!30 = !DILocation(line: 41, column: 20, scope: !7)
!31 = !DILocation(line: 45, column: 31, scope: !7)
!32 = !DILocation(line: 45, column: 36, scope: !7)
!33 = !DILocation(line: 47, column: 31, scope: !7)
!34 = !DILocation(line: 47, column: 36, scope: !7)
!35 = !DILocation(line: 56, column: 20, scope: !7)
!36 = !DILocation(line: 57, column: 42, scope: !7)
!37 = !DILocation(line: 57, column: 65, scope: !7)
!38 = !DILocation(line: 57, column: 36, scope: !7)
!39 = !DILocation(line: 57, column: 57, scope: !7)
!40 = !DILocation(line: 57, column: 31, scope: !7)
!41 = !DILocation(line: 57, column: 70, scope: !7)
!42 = !DILocation(line: 58, column: 31, scope: !7)
!43 = !DILocation(line: 58, column: 45, scope: !7)
!44 = !DILocation(line: 60, column: 31, scope: !7)
!45 = !DILocation(line: 60, column: 45, scope: !7)
!46 = !DILocation(line: 62, column: 20, scope: !7)
!47 = !DILocation(line: 63, column: 27, scope: !7)
!48 = !DILocation(line: 65, column: 20, scope: !7)
!49 = !DILocation(line: 69, column: 31, scope: !7)
!50 = !DILocation(line: 69, column: 45, scope: !7)
!51 = !DILocation(line: 71, column: 31, scope: !7)
!52 = !DILocation(line: 71, column: 45, scope: !7)
!53 = !DILocation(line: 80, column: 20, scope: !7)
!54 = !DILocation(line: 81, column: 43, scope: !7)
!55 = !DILocation(line: 81, column: 65, scope: !7)
!56 = !DILocation(line: 81, column: 37, scope: !7)
!57 = !DILocation(line: 81, column: 58, scope: !7)
!58 = !DILocation(line: 81, column: 32, scope: !7)
!59 = !DILocation(line: 81, column: 70, scope: !7)
!60 = !DILocation(line: 82, column: 32, scope: !7)
!61 = !DILocation(line: 82, column: 46, scope: !7)
!62 = !DILocation(line: 84, column: 32, scope: !7)
!63 = !DILocation(line: 84, column: 46, scope: !7)
!64 = !DILocation(line: 86, column: 20, scope: !7)
!65 = !DILocation(line: 87, column: 27, scope: !7)
!66 = !DILocation(line: 89, column: 20, scope: !7)
!67 = !DILocation(line: 93, column: 32, scope: !7)
!68 = !DILocation(line: 93, column: 46, scope: !7)
!69 = !DILocation(line: 95, column: 32, scope: !7)
!70 = !DILocation(line: 95, column: 46, scope: !7)
!71 = !DILocation(line: 101, column: 20, scope: !7)
!72 = !DILocation(line: 104, column: 52, scope: !7)
!73 = !DILocation(line: 104, column: 43, scope: !7)
!74 = !DILocation(line: 104, column: 58, scope: !7)
!75 = !DILocation(line: 104, column: 32, scope: !7)
!76 = !DILocation(line: 104, column: 70, scope: !7)
!77 = !DILocation(line: 105, column: 32, scope: !7)
!78 = !DILocation(line: 105, column: 46, scope: !7)
!79 = !DILocation(line: 107, column: 32, scope: !7)
!80 = !DILocation(line: 107, column: 46, scope: !7)
!81 = !DILocation(line: 109, column: 20, scope: !7)
!82 = !DILocation(line: 110, column: 27, scope: !7)
!83 = !DILocation(line: 112, column: 20, scope: !7)
!84 = !DILocation(line: 116, column: 32, scope: !7)
!85 = !DILocation(line: 116, column: 46, scope: !7)
!86 = !DILocation(line: 118, column: 32, scope: !7)
!87 = !DILocation(line: 118, column: 46, scope: !7)
!88 = !DILocation(line: 106, column: 20, scope: !7)
!89 = !DILocation(line: 115, column: 20, scope: !7)
!90 = !DILocation(line: 117, column: 20, scope: !7)
!91 = !DILocation(line: 119, column: 20, scope: !7)
!92 = !DILocation(line: 118, column: 15, scope: !93, inlinedAt: !95)
!93 = distinct !DILexicalBlockFile(scope: !7, file: !94, discriminator: 0)
!94 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!95 = !DILocation(line: 121, column: 42, scope: !7)
!96 = !DILocation(line: 121, column: 29, scope: !93, inlinedAt: !97)
!97 = !DILocation(line: 98, column: 42, scope: !7)
!98 = !DILocation(line: 121, column: 29, scope: !93, inlinedAt: !99)
!99 = !DILocation(line: 74, column: 42, scope: !7)
!100 = !DILocation(line: 121, column: 29, scope: !93, inlinedAt: !101)
!101 = !DILocation(line: 50, column: 42, scope: !7)
!102 = !DILocation(line: 121, column: 29, scope: !93, inlinedAt: !95)
!103 = !DILocation(line: 123, column: 35, scope: !7)
!104 = !DILocation(line: 0, scope: !7)
!105 = !DILocation(line: 127, column: 25, scope: !7)
!106 = !DILocation(line: 127, column: 37, scope: !7)
!107 = !DILocation(line: 127, column: 4, scope: !7)
