; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %9 = shl i32 %8, 10, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 2, !dbg !12
  %12 = and i32 %11, 508, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %14 = or disjoint i32 %13, 512, !dbg !13
  %.frozen = freeze i32 %13, !dbg !14
  %15 = sdiv i32 %.frozen, 16, !dbg !14
  %16 = sdiv i32 %14, 16, !dbg !14
  %17 = srem i32 %15, 1536, !dbg !15
  %18 = srem i32 %16, 1536, !dbg !15
  %19 = mul i32 %15, 16, !dbg !16
  %.decomposed = sub i32 %.frozen, %19, !dbg !16
  %.frozen2 = freeze i32 %13, !dbg !17
  %20 = sdiv i32 %.frozen2, 24576, !dbg !17
  %.frozen3 = freeze i32 %14, !dbg !17
  %21 = sdiv i32 %.frozen3, 24576, !dbg !17
  %22 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %1, i1 true) #1, !dbg !18
  %23 = bitcast i32 %22 to float, !dbg !18
  %24 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %3, i1 true) #1, !dbg !19
  %25 = bitcast i32 %24 to float, !dbg !19
  %26 = icmp slt i32 %17, 512, !dbg !20
  %27 = icmp slt i32 %18, 512, !dbg !20
  %28 = mul i32 %20, 24576, !dbg !21
  %srem.decomposed = sub i32 %.frozen2, %28, !dbg !21
  %29 = mul i32 %21, 24576, !dbg !21
  %srem1.decomposed = sub i32 %.frozen3, %29, !dbg !21
  %30 = shl nsw i32 %20, 13, !dbg !22
  %31 = shl nsw i32 %21, 13, !dbg !22
  %32 = add nsw i32 %30, %srem.decomposed, !dbg !23
  %33 = add nsw i32 %31, %srem1.decomposed, !dbg !23
  %34 = sext i32 %32 to i64, !dbg !24
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !24
  %36 = sext i32 %33 to i64, !dbg !24
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !24
  %38 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %35, i1 %26, i32 0, i1 %26, i32 0, i1 %26, i32 0, i1 %26, i32 0, i1 %26) #1, !dbg !25
  %39 = extractvalue { i32, i32, i32, i32 } %38, 0, !dbg !25
  %40 = extractvalue { i32, i32, i32, i32 } %38, 1, !dbg !25
  %41 = extractvalue { i32, i32, i32, i32 } %38, 2, !dbg !25
  %42 = extractvalue { i32, i32, i32, i32 } %38, 3, !dbg !25
  %43 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %37, i1 %27, i32 0, i1 %27, i32 0, i1 %27, i32 0, i1 %27, i32 0, i1 %27) #1, !dbg !25
  %44 = extractvalue { i32, i32, i32, i32 } %43, 0, !dbg !25
  %45 = extractvalue { i32, i32, i32, i32 } %43, 1, !dbg !25
  %46 = extractvalue { i32, i32, i32, i32 } %43, 2, !dbg !25
  %47 = extractvalue { i32, i32, i32, i32 } %43, 3, !dbg !25
  %48 = and i32 %17, -512, !dbg !26
  %49 = icmp eq i32 %48, 512, !dbg !26
  %50 = and i32 %18, -512, !dbg !26
  %51 = icmp eq i32 %50, 512, !dbg !26
  %52 = shl nsw i32 %17, 4, !dbg !27
  %53 = shl nsw i32 %18, 4, !dbg !27
  %54 = add nsw i32 %30, %.decomposed, !dbg !27
  %55 = add nsw i32 %54, -8192, !dbg !28
  %56 = add nsw i32 %55, %52, !dbg !29
  %57 = add nsw i32 %31, %.decomposed, !dbg !27
  %58 = add nsw i32 %57, -8192, !dbg !28
  %59 = add nsw i32 %58, %53, !dbg !29
  %60 = sext i32 %56 to i64, !dbg !30
  %61 = getelementptr float, ptr addrspace(1) %0, i64 %60, !dbg !30
  %62 = sext i32 %59 to i64, !dbg !30
  %63 = getelementptr float, ptr addrspace(1) %0, i64 %62, !dbg !30
  %64 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %61, i1 %49, i32 0, i1 %49, i32 0, i1 %49, i32 0, i1 %49, i32 0, i1 %49) #1, !dbg !31
  %65 = extractvalue { i32, i32, i32, i32 } %64, 0, !dbg !31
  %66 = extractvalue { i32, i32, i32, i32 } %64, 1, !dbg !31
  %67 = extractvalue { i32, i32, i32, i32 } %64, 2, !dbg !31
  %68 = extractvalue { i32, i32, i32, i32 } %64, 3, !dbg !31
  %69 = bitcast i32 %65 to float, !dbg !31
  %70 = bitcast i32 %66 to float, !dbg !31
  %71 = bitcast i32 %67 to float, !dbg !31
  %72 = bitcast i32 %68 to float, !dbg !31
  %73 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %63, i1 %51, i32 0, i1 %51, i32 0, i1 %51, i32 0, i1 %51, i32 0, i1 %51) #1, !dbg !31
  %74 = extractvalue { i32, i32, i32, i32 } %73, 0, !dbg !31
  %75 = extractvalue { i32, i32, i32, i32 } %73, 1, !dbg !31
  %76 = extractvalue { i32, i32, i32, i32 } %73, 2, !dbg !31
  %77 = extractvalue { i32, i32, i32, i32 } %73, 3, !dbg !31
  %78 = bitcast i32 %74 to float, !dbg !31
  %79 = bitcast i32 %75 to float, !dbg !31
  %80 = bitcast i32 %76 to float, !dbg !31
  %81 = bitcast i32 %77 to float, !dbg !31
  %82 = getelementptr float, ptr addrspace(1) %2, i64 %60, !dbg !32
  %83 = getelementptr float, ptr addrspace(1) %2, i64 %62, !dbg !32
  %84 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %82, i1 %49, i32 0, i1 %49, i32 0, i1 %49, i32 0, i1 %49, i32 0, i1 %49) #1, !dbg !33
  %85 = extractvalue { i32, i32, i32, i32 } %84, 0, !dbg !33
  %86 = extractvalue { i32, i32, i32, i32 } %84, 1, !dbg !33
  %87 = extractvalue { i32, i32, i32, i32 } %84, 2, !dbg !33
  %88 = extractvalue { i32, i32, i32, i32 } %84, 3, !dbg !33
  %89 = bitcast i32 %85 to float, !dbg !33
  %90 = bitcast i32 %86 to float, !dbg !33
  %91 = bitcast i32 %87 to float, !dbg !33
  %92 = bitcast i32 %88 to float, !dbg !33
  %93 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %83, i1 %51, i32 0, i1 %51, i32 0, i1 %51, i32 0, i1 %51, i32 0, i1 %51) #1, !dbg !33
  %94 = extractvalue { i32, i32, i32, i32 } %93, 0, !dbg !33
  %95 = extractvalue { i32, i32, i32, i32 } %93, 1, !dbg !33
  %96 = extractvalue { i32, i32, i32, i32 } %93, 2, !dbg !33
  %97 = extractvalue { i32, i32, i32, i32 } %93, 3, !dbg !33
  %98 = bitcast i32 %94 to float, !dbg !33
  %99 = bitcast i32 %95 to float, !dbg !33
  %100 = bitcast i32 %96 to float, !dbg !33
  %101 = bitcast i32 %97 to float, !dbg !33
  %102 = fmul float %23, %89, !dbg !34
  %103 = fmul float %23, %90, !dbg !34
  %104 = fmul float %23, %91, !dbg !34
  %105 = fmul float %23, %92, !dbg !34
  %106 = fmul float %23, %98, !dbg !34
  %107 = fmul float %23, %99, !dbg !34
  %108 = fmul float %23, %100, !dbg !34
  %109 = fmul float %23, %101, !dbg !34
  %110 = getelementptr float, ptr addrspace(1) %4, i64 %60, !dbg !35
  %111 = getelementptr float, ptr addrspace(1) %4, i64 %62, !dbg !35
  %112 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %110, i1 %49, i32 0, i1 %49, i32 0, i1 %49, i32 0, i1 %49, i32 0, i1 %49) #1, !dbg !36
  %113 = extractvalue { i32, i32, i32, i32 } %112, 0, !dbg !36
  %114 = extractvalue { i32, i32, i32, i32 } %112, 1, !dbg !36
  %115 = extractvalue { i32, i32, i32, i32 } %112, 2, !dbg !36
  %116 = extractvalue { i32, i32, i32, i32 } %112, 3, !dbg !36
  %117 = bitcast i32 %113 to float, !dbg !36
  %118 = bitcast i32 %114 to float, !dbg !36
  %119 = bitcast i32 %115 to float, !dbg !36
  %120 = bitcast i32 %116 to float, !dbg !36
  %121 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %111, i1 %51, i32 0, i1 %51, i32 0, i1 %51, i32 0, i1 %51, i32 0, i1 %51) #1, !dbg !36
  %122 = extractvalue { i32, i32, i32, i32 } %121, 0, !dbg !36
  %123 = extractvalue { i32, i32, i32, i32 } %121, 1, !dbg !36
  %124 = extractvalue { i32, i32, i32, i32 } %121, 2, !dbg !36
  %125 = extractvalue { i32, i32, i32, i32 } %121, 3, !dbg !36
  %126 = bitcast i32 %122 to float, !dbg !36
  %127 = bitcast i32 %123 to float, !dbg !36
  %128 = bitcast i32 %124 to float, !dbg !36
  %129 = bitcast i32 %125 to float, !dbg !36
  %130 = fmul float %25, %117, !dbg !37
  %131 = fmul float %25, %118, !dbg !37
  %132 = fmul float %25, %119, !dbg !37
  %133 = fmul float %25, %120, !dbg !37
  %134 = fmul float %25, %126, !dbg !37
  %135 = fmul float %25, %127, !dbg !37
  %136 = fmul float %25, %128, !dbg !37
  %137 = fmul float %25, %129, !dbg !37
  %138 = fadd float %102, %130, !dbg !38
  %139 = fadd float %103, %131, !dbg !38
  %140 = fadd float %104, %132, !dbg !38
  %141 = fadd float %105, %133, !dbg !38
  %142 = fadd float %106, %134, !dbg !38
  %143 = fadd float %107, %135, !dbg !38
  %144 = fadd float %108, %136, !dbg !38
  %145 = fadd float %109, %137, !dbg !38
  %146 = fmul float %138, %69, !dbg !39
  %147 = fmul float %139, %70, !dbg !39
  %148 = fmul float %140, %71, !dbg !39
  %149 = fmul float %141, %72, !dbg !39
  %150 = fmul float %142, %78, !dbg !39
  %151 = fmul float %143, %79, !dbg !39
  %152 = fmul float %144, %80, !dbg !39
  %153 = fmul float %145, %81, !dbg !39
  %154 = icmp sgt i32 %17, 1023, !dbg !40
  %155 = icmp sgt i32 %18, 1023, !dbg !40
  %156 = add nsw i32 %54, -16384, !dbg !41
  %157 = add nsw i32 %156, %52, !dbg !42
  %158 = add nsw i32 %57, -16384, !dbg !41
  %159 = add nsw i32 %158, %53, !dbg !42
  %160 = sext i32 %157 to i64, !dbg !43
  %161 = getelementptr float, ptr addrspace(1) %2, i64 %160, !dbg !43
  %162 = sext i32 %159 to i64, !dbg !43
  %163 = getelementptr float, ptr addrspace(1) %2, i64 %162, !dbg !43
  %164 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %161, i1 %154, i32 0, i1 %154, i32 0, i1 %154, i32 0, i1 %154, i32 0, i1 %154) #1, !dbg !44
  %165 = extractvalue { i32, i32, i32, i32 } %164, 0, !dbg !44
  %166 = extractvalue { i32, i32, i32, i32 } %164, 1, !dbg !44
  %167 = extractvalue { i32, i32, i32, i32 } %164, 2, !dbg !44
  %168 = extractvalue { i32, i32, i32, i32 } %164, 3, !dbg !44
  %169 = bitcast i32 %165 to float, !dbg !44
  %170 = bitcast i32 %166 to float, !dbg !44
  %171 = bitcast i32 %167 to float, !dbg !44
  %172 = bitcast i32 %168 to float, !dbg !44
  %173 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %163, i1 %155, i32 0, i1 %155, i32 0, i1 %155, i32 0, i1 %155, i32 0, i1 %155) #1, !dbg !44
  %174 = extractvalue { i32, i32, i32, i32 } %173, 0, !dbg !44
  %175 = extractvalue { i32, i32, i32, i32 } %173, 1, !dbg !44
  %176 = extractvalue { i32, i32, i32, i32 } %173, 2, !dbg !44
  %177 = extractvalue { i32, i32, i32, i32 } %173, 3, !dbg !44
  %178 = bitcast i32 %174 to float, !dbg !44
  %179 = bitcast i32 %175 to float, !dbg !44
  %180 = bitcast i32 %176 to float, !dbg !44
  %181 = bitcast i32 %177 to float, !dbg !44
  %182 = fmul float %23, %169, !dbg !45
  %183 = fmul float %23, %170, !dbg !45
  %184 = fmul float %23, %171, !dbg !45
  %185 = fmul float %23, %172, !dbg !45
  %186 = fmul float %23, %178, !dbg !45
  %187 = fmul float %23, %179, !dbg !45
  %188 = fmul float %23, %180, !dbg !45
  %189 = fmul float %23, %181, !dbg !45
  %190 = getelementptr float, ptr addrspace(1) %4, i64 %160, !dbg !46
  %191 = getelementptr float, ptr addrspace(1) %4, i64 %162, !dbg !46
  %192 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %190, i1 %154, i32 0, i1 %154, i32 0, i1 %154, i32 0, i1 %154, i32 0, i1 %154) #1, !dbg !47
  %193 = extractvalue { i32, i32, i32, i32 } %192, 0, !dbg !47
  %194 = extractvalue { i32, i32, i32, i32 } %192, 1, !dbg !47
  %195 = extractvalue { i32, i32, i32, i32 } %192, 2, !dbg !47
  %196 = extractvalue { i32, i32, i32, i32 } %192, 3, !dbg !47
  %197 = bitcast i32 %193 to float, !dbg !47
  %198 = bitcast i32 %194 to float, !dbg !47
  %199 = bitcast i32 %195 to float, !dbg !47
  %200 = bitcast i32 %196 to float, !dbg !47
  %201 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %191, i1 %155, i32 0, i1 %155, i32 0, i1 %155, i32 0, i1 %155, i32 0, i1 %155) #1, !dbg !47
  %202 = extractvalue { i32, i32, i32, i32 } %201, 0, !dbg !47
  %203 = extractvalue { i32, i32, i32, i32 } %201, 1, !dbg !47
  %204 = extractvalue { i32, i32, i32, i32 } %201, 2, !dbg !47
  %205 = extractvalue { i32, i32, i32, i32 } %201, 3, !dbg !47
  %206 = bitcast i32 %202 to float, !dbg !47
  %207 = bitcast i32 %203 to float, !dbg !47
  %208 = bitcast i32 %204 to float, !dbg !47
  %209 = bitcast i32 %205 to float, !dbg !47
  %210 = fmul float %25, %197, !dbg !48
  %211 = fmul float %25, %198, !dbg !48
  %212 = fmul float %25, %199, !dbg !48
  %213 = fmul float %25, %200, !dbg !48
  %214 = fmul float %25, %206, !dbg !48
  %215 = fmul float %25, %207, !dbg !48
  %216 = fmul float %25, %208, !dbg !48
  %217 = fmul float %25, %209, !dbg !48
  %218 = fadd float %182, %210, !dbg !49
  %219 = fadd float %183, %211, !dbg !49
  %220 = fadd float %184, %212, !dbg !49
  %221 = fadd float %185, %213, !dbg !49
  %222 = fadd float %186, %214, !dbg !49
  %223 = fadd float %187, %215, !dbg !49
  %224 = fadd float %188, %216, !dbg !49
  %225 = fadd float %189, %217, !dbg !49
  %226 = select i1 %154, float %218, float 0.000000e+00, !dbg !50
  %227 = select i1 %154, float %219, float 0.000000e+00, !dbg !50
  %228 = select i1 %154, float %220, float 0.000000e+00, !dbg !50
  %229 = select i1 %154, float %221, float 0.000000e+00, !dbg !50
  %230 = select i1 %155, float %222, float 0.000000e+00, !dbg !50
  %231 = select i1 %155, float %223, float 0.000000e+00, !dbg !50
  %232 = select i1 %155, float %224, float 0.000000e+00, !dbg !50
  %233 = select i1 %155, float %225, float 0.000000e+00, !dbg !50
  %234 = select i1 %49, float %146, float %226, !dbg !51
  %235 = select i1 %49, float %147, float %227, !dbg !51
  %236 = select i1 %49, float %148, float %228, !dbg !51
  %237 = select i1 %49, float %149, float %229, !dbg !51
  %238 = select i1 %51, float %150, float %230, !dbg !51
  %239 = select i1 %51, float %151, float %231, !dbg !51
  %240 = select i1 %51, float %152, float %232, !dbg !51
  %241 = select i1 %51, float %153, float %233, !dbg !51
  %242 = sext i32 %13 to i64, !dbg !52
  %243 = getelementptr float, ptr addrspace(1) %5, i64 %242, !dbg !52
  %244 = sext i32 %14 to i64, !dbg !52
  %245 = getelementptr float, ptr addrspace(1) %5, i64 %244, !dbg !52
  %246 = bitcast float %234 to i32, !dbg !53
  %247 = select i1 %26, i32 %39, i32 %246, !dbg !54
  %248 = bitcast float %235 to i32, !dbg !53
  %249 = select i1 %26, i32 %40, i32 %248, !dbg !54
  %250 = bitcast float %236 to i32, !dbg !53
  %251 = select i1 %26, i32 %41, i32 %250, !dbg !54
  %252 = bitcast float %237 to i32, !dbg !53
  %253 = select i1 %26, i32 %42, i32 %252, !dbg !54
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %247, i32 %249, i32 %251, i32 %253, ptr addrspace(1) %243, i1 true) #1, !dbg !53
  %254 = bitcast float %238 to i32, !dbg !53
  %255 = select i1 %27, i32 %44, i32 %254, !dbg !54
  %256 = bitcast float %239 to i32, !dbg !53
  %257 = select i1 %27, i32 %45, i32 %256, !dbg !54
  %258 = bitcast float %240 to i32, !dbg !53
  %259 = select i1 %27, i32 %46, i32 %258, !dbg !54
  %260 = bitcast float %241 to i32, !dbg !53
  %261 = select i1 %27, i32 %47, i32 %260, !dbg !54
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %255, i32 %257, i32 %259, i32 %261, ptr addrspace(1) %245, i1 true) #1, !dbg !53
  ret void, !dbg !55
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c5eko4gy2xzjknw3snhjp5vyexe2eebjgpcarz5mlus7jf4njllu.py", directory: "inductor_cache/5e")
!4 = !{ptr @triton_poi_fused_cat_12, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_12, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_12", linkageName: "triton_poi_fused_cat_12", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 27, scope: !7)
!16 = !DILocation(line: 25, column: 19, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 20, scope: !7)
!19 = !DILocation(line: 30, column: 20, scope: !7)
!20 = !DILocation(line: 40, column: 18, scope: !7)
!21 = !DILocation(line: 41, column: 35, scope: !7)
!22 = !DILocation(line: 41, column: 50, scope: !7)
!23 = !DILocation(line: 41, column: 45, scope: !7)
!24 = !DILocation(line: 41, column: 30, scope: !7)
!25 = !DILocation(line: 41, column: 55, scope: !7)
!26 = !DILocation(line: 45, column: 18, scope: !7)
!27 = !DILocation(line: 46, column: 40, scope: !7)
!28 = !DILocation(line: 46, column: 36, scope: !7)
!29 = !DILocation(line: 46, column: 55, scope: !7)
!30 = !DILocation(line: 46, column: 31, scope: !7)
!31 = !DILocation(line: 46, column: 65, scope: !7)
!32 = !DILocation(line: 47, column: 31, scope: !7)
!33 = !DILocation(line: 47, column: 65, scope: !7)
!34 = !DILocation(line: 48, column: 20, scope: !7)
!35 = !DILocation(line: 49, column: 31, scope: !7)
!36 = !DILocation(line: 49, column: 65, scope: !7)
!37 = !DILocation(line: 50, column: 20, scope: !7)
!38 = !DILocation(line: 51, column: 20, scope: !7)
!39 = !DILocation(line: 52, column: 20, scope: !7)
!40 = !DILocation(line: 55, column: 20, scope: !7)
!41 = !DILocation(line: 58, column: 36, scope: !7)
!42 = !DILocation(line: 58, column: 56, scope: !7)
!43 = !DILocation(line: 58, column: 31, scope: !7)
!44 = !DILocation(line: 58, column: 66, scope: !7)
!45 = !DILocation(line: 59, column: 20, scope: !7)
!46 = !DILocation(line: 60, column: 31, scope: !7)
!47 = !DILocation(line: 60, column: 66, scope: !7)
!48 = !DILocation(line: 61, column: 20, scope: !7)
!49 = !DILocation(line: 62, column: 20, scope: !7)
!50 = !DILocation(line: 64, column: 35, scope: !7)
!51 = !DILocation(line: 0, scope: !7)
!52 = !DILocation(line: 67, column: 25, scope: !7)
!53 = !DILocation(line: 67, column: 37, scope: !7)
!54 = !DILocation(line: 66, column: 33, scope: !7)
!55 = !DILocation(line: 67, column: 4, scope: !7)
