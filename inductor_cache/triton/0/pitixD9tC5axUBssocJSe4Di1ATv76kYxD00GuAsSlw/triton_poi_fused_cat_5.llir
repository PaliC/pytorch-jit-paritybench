; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_cat_5(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %6 = shl i32 %5, 10, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 2, !dbg !12
  %9 = and i32 %8, 508, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = or disjoint i32 %10, 512, !dbg !13
  %.frozen = freeze i32 %10, !dbg !14
  %12 = sdiv i32 %.frozen, 128, !dbg !14
  %13 = mul i32 %12, 128, !dbg !15
  %.decomposed = sub i32 %.frozen, %13, !dbg !15
  %14 = sdiv i32 %11, 128, !dbg !14
  %15 = icmp slt i32 %.decomposed, 64, !dbg !16
  %16 = shl nsw i32 %12, 6, !dbg !17
  %17 = shl nsw i32 %14, 6, !dbg !17
  %18 = add nsw i32 %16, %.decomposed, !dbg !18
  %19 = add nsw i32 %17, %.decomposed, !dbg !18
  %20 = sext i32 %18 to i64, !dbg !19
  %21 = getelementptr float, ptr addrspace(1) %0, i64 %20, !dbg !19
  %22 = sext i32 %19 to i64, !dbg !19
  %23 = getelementptr float, ptr addrspace(1) %0, i64 %22, !dbg !19
  %24 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %21, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15) #1, !dbg !20
  %25 = extractvalue { i32, i32, i32, i32 } %24, 0, !dbg !20
  %26 = extractvalue { i32, i32, i32, i32 } %24, 1, !dbg !20
  %27 = extractvalue { i32, i32, i32, i32 } %24, 2, !dbg !20
  %28 = extractvalue { i32, i32, i32, i32 } %24, 3, !dbg !20
  %29 = bitcast i32 %25 to float, !dbg !20
  %30 = bitcast i32 %26 to float, !dbg !20
  %31 = bitcast i32 %27 to float, !dbg !20
  %32 = bitcast i32 %28 to float, !dbg !20
  %33 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %23, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15, i32 0, i1 %15) #1, !dbg !20
  %34 = extractvalue { i32, i32, i32, i32 } %33, 0, !dbg !20
  %35 = extractvalue { i32, i32, i32, i32 } %33, 1, !dbg !20
  %36 = extractvalue { i32, i32, i32, i32 } %33, 2, !dbg !20
  %37 = extractvalue { i32, i32, i32, i32 } %33, 3, !dbg !20
  %38 = bitcast i32 %34 to float, !dbg !20
  %39 = bitcast i32 %35 to float, !dbg !20
  %40 = bitcast i32 %36 to float, !dbg !20
  %41 = bitcast i32 %37 to float, !dbg !20
  %42 = fsub float 0.000000e+00, %29, !dbg !21
  %43 = fsub float 0.000000e+00, %30, !dbg !21
  %44 = fsub float 0.000000e+00, %31, !dbg !21
  %45 = fsub float 0.000000e+00, %32, !dbg !21
  %46 = fsub float 0.000000e+00, %38, !dbg !21
  %47 = fsub float 0.000000e+00, %39, !dbg !21
  %48 = fsub float 0.000000e+00, %40, !dbg !21
  %49 = fsub float 0.000000e+00, %41, !dbg !21
  %50 = fmul float %42, 0x3FF7154760000000, !dbg !25
  %51 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %50) #1, !dbg !25
  %52 = fmul float %43, 0x3FF7154760000000, !dbg !25
  %53 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %52) #1, !dbg !25
  %54 = fmul float %44, 0x3FF7154760000000, !dbg !25
  %55 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %54) #1, !dbg !25
  %56 = fmul float %45, 0x3FF7154760000000, !dbg !25
  %57 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %56) #1, !dbg !25
  %58 = fmul float %46, 0x3FF7154760000000, !dbg !25
  %59 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %58) #1, !dbg !25
  %60 = fmul float %47, 0x3FF7154760000000, !dbg !25
  %61 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %60) #1, !dbg !25
  %62 = fmul float %48, 0x3FF7154760000000, !dbg !25
  %63 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %62) #1, !dbg !25
  %64 = fmul float %49, 0x3FF7154760000000, !dbg !25
  %65 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %64) #1, !dbg !25
  %66 = fadd float %51, 1.000000e+00, !dbg !26
  %67 = fadd float %53, 1.000000e+00, !dbg !26
  %68 = fadd float %55, 1.000000e+00, !dbg !26
  %69 = fadd float %57, 1.000000e+00, !dbg !26
  %70 = fadd float %59, 1.000000e+00, !dbg !26
  %71 = fadd float %61, 1.000000e+00, !dbg !26
  %72 = fadd float %63, 1.000000e+00, !dbg !26
  %73 = fadd float %65, 1.000000e+00, !dbg !26
  %74 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %66) #1, !dbg !27
  %75 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %67) #1, !dbg !27
  %76 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %68) #1, !dbg !27
  %77 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %69) #1, !dbg !27
  %78 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %70) #1, !dbg !27
  %79 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %71) #1, !dbg !27
  %80 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %72) #1, !dbg !27
  %81 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %73) #1, !dbg !27
  %82 = fmul float %74, %29, !dbg !28
  %83 = fmul float %75, %30, !dbg !28
  %84 = fmul float %76, %31, !dbg !28
  %85 = fmul float %77, %32, !dbg !28
  %86 = fmul float %78, %38, !dbg !28
  %87 = fmul float %79, %39, !dbg !28
  %88 = fmul float %80, %40, !dbg !28
  %89 = fmul float %81, %41, !dbg !28
  %90 = icmp sgt i32 %.decomposed, 63, !dbg !29
  %91 = sext i32 %18 to i64, !dbg !30
  %92 = getelementptr float, ptr addrspace(1) %1, i64 %91, !dbg !30
  %93 = getelementptr i8, ptr addrspace(1) %92, i64 -256, !dbg !30
  %94 = sext i32 %19 to i64, !dbg !30
  %95 = getelementptr float, ptr addrspace(1) %1, i64 %94, !dbg !30
  %96 = getelementptr i8, ptr addrspace(1) %95, i64 -256, !dbg !30
  %97 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %93, i1 %90, i32 0, i1 %90, i32 0, i1 %90, i32 0, i1 %90, i32 0, i1 %90) #1, !dbg !31
  %98 = extractvalue { i32, i32, i32, i32 } %97, 0, !dbg !31
  %99 = extractvalue { i32, i32, i32, i32 } %97, 1, !dbg !31
  %100 = extractvalue { i32, i32, i32, i32 } %97, 2, !dbg !31
  %101 = extractvalue { i32, i32, i32, i32 } %97, 3, !dbg !31
  %102 = bitcast i32 %98 to float, !dbg !31
  %103 = bitcast i32 %99 to float, !dbg !31
  %104 = bitcast i32 %100 to float, !dbg !31
  %105 = bitcast i32 %101 to float, !dbg !31
  %106 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %96, i1 %90, i32 0, i1 %90, i32 0, i1 %90, i32 0, i1 %90, i32 0, i1 %90) #1, !dbg !31
  %107 = extractvalue { i32, i32, i32, i32 } %106, 0, !dbg !31
  %108 = extractvalue { i32, i32, i32, i32 } %106, 1, !dbg !31
  %109 = extractvalue { i32, i32, i32, i32 } %106, 2, !dbg !31
  %110 = extractvalue { i32, i32, i32, i32 } %106, 3, !dbg !31
  %111 = bitcast i32 %107 to float, !dbg !31
  %112 = bitcast i32 %108 to float, !dbg !31
  %113 = bitcast i32 %109 to float, !dbg !31
  %114 = bitcast i32 %110 to float, !dbg !31
  %115 = fsub float 0.000000e+00, %102, !dbg !32
  %116 = fsub float 0.000000e+00, %103, !dbg !32
  %117 = fsub float 0.000000e+00, %104, !dbg !32
  %118 = fsub float 0.000000e+00, %105, !dbg !32
  %119 = fsub float 0.000000e+00, %111, !dbg !32
  %120 = fsub float 0.000000e+00, %112, !dbg !32
  %121 = fsub float 0.000000e+00, %113, !dbg !32
  %122 = fsub float 0.000000e+00, %114, !dbg !32
  %123 = fmul float %115, 0x3FF7154760000000, !dbg !34
  %124 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %123) #1, !dbg !34
  %125 = fmul float %116, 0x3FF7154760000000, !dbg !34
  %126 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %125) #1, !dbg !34
  %127 = fmul float %117, 0x3FF7154760000000, !dbg !34
  %128 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %127) #1, !dbg !34
  %129 = fmul float %118, 0x3FF7154760000000, !dbg !34
  %130 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %129) #1, !dbg !34
  %131 = fmul float %119, 0x3FF7154760000000, !dbg !34
  %132 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %131) #1, !dbg !34
  %133 = fmul float %120, 0x3FF7154760000000, !dbg !34
  %134 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %133) #1, !dbg !34
  %135 = fmul float %121, 0x3FF7154760000000, !dbg !34
  %136 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %135) #1, !dbg !34
  %137 = fmul float %122, 0x3FF7154760000000, !dbg !34
  %138 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %137) #1, !dbg !34
  %139 = fadd float %124, 1.000000e+00, !dbg !35
  %140 = fadd float %126, 1.000000e+00, !dbg !35
  %141 = fadd float %128, 1.000000e+00, !dbg !35
  %142 = fadd float %130, 1.000000e+00, !dbg !35
  %143 = fadd float %132, 1.000000e+00, !dbg !35
  %144 = fadd float %134, 1.000000e+00, !dbg !35
  %145 = fadd float %136, 1.000000e+00, !dbg !35
  %146 = fadd float %138, 1.000000e+00, !dbg !35
  %147 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %139) #1, !dbg !36
  %148 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %140) #1, !dbg !36
  %149 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %141) #1, !dbg !36
  %150 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %142) #1, !dbg !36
  %151 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %143) #1, !dbg !36
  %152 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %144) #1, !dbg !36
  %153 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %145) #1, !dbg !36
  %154 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %146) #1, !dbg !36
  %155 = fmul float %147, %102, !dbg !37
  %156 = fmul float %148, %103, !dbg !37
  %157 = fmul float %149, %104, !dbg !37
  %158 = fmul float %150, %105, !dbg !37
  %159 = fmul float %151, %111, !dbg !37
  %160 = fmul float %152, %112, !dbg !37
  %161 = fmul float %153, %113, !dbg !37
  %162 = fmul float %154, %114, !dbg !37
  %163 = select i1 %15, float %82, float %155, !dbg !38
  %164 = select i1 %15, float %83, float %156, !dbg !38
  %165 = select i1 %15, float %84, float %157, !dbg !38
  %166 = select i1 %15, float %85, float %158, !dbg !38
  %167 = select i1 %15, float %86, float %159, !dbg !38
  %168 = select i1 %15, float %87, float %160, !dbg !38
  %169 = select i1 %15, float %88, float %161, !dbg !38
  %170 = select i1 %15, float %89, float %162, !dbg !38
  %171 = sext i32 %10 to i64, !dbg !39
  %172 = getelementptr float, ptr addrspace(1) %2, i64 %171, !dbg !39
  %173 = sext i32 %11 to i64, !dbg !39
  %174 = getelementptr float, ptr addrspace(1) %2, i64 %173, !dbg !39
  %175 = bitcast float %163 to i32, !dbg !40
  %176 = bitcast float %164 to i32, !dbg !40
  %177 = bitcast float %165 to i32, !dbg !40
  %178 = bitcast float %166 to i32, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %175, i32 %176, i32 %177, i32 %178, ptr addrspace(1) %172, i1 true) #1, !dbg !40
  %179 = bitcast float %167 to i32, !dbg !40
  %180 = bitcast float %168 to i32, !dbg !40
  %181 = bitcast float %169 to i32, !dbg !40
  %182 = bitcast float %170 to i32, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %179, i32 %180, i32 %181, i32 %182, ptr addrspace(1) %174, i1 true) #1, !dbg !40
  ret void, !dbg !41
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ccblpak4ieiqykkzfcfjucmsjbmq2ghop6nechnhuljyum662cdu.py", directory: "inductor_cache/cb")
!4 = !{ptr @triton_poi_fused_cat_5, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_cat_5, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_cat_5", linkageName: "triton_poi_fused_cat_5", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 31, column: 18, scope: !7)
!17 = !DILocation(line: 32, column: 33, scope: !7)
!18 = !DILocation(line: 32, column: 39, scope: !7)
!19 = !DILocation(line: 32, column: 30, scope: !7)
!20 = !DILocation(line: 32, column: 45, scope: !7)
!21 = !DILocation(line: 47, column: 30, scope: !22, inlinedAt: !24)
!22 = distinct !DILexicalBlockFile(scope: !7, file: !23, discriminator: 0)
!23 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!24 = !DILocation(line: 33, column: 22, scope: !7)
!25 = !DILocation(line: 47, column: 29, scope: !22, inlinedAt: !24)
!26 = !DILocation(line: 47, column: 20, scope: !22, inlinedAt: !24)
!27 = !DILocation(line: 47, column: 16, scope: !22, inlinedAt: !24)
!28 = !DILocation(line: 34, column: 18, scope: !7)
!29 = !DILocation(line: 37, column: 20, scope: !7)
!30 = !DILocation(line: 40, column: 31, scope: !7)
!31 = !DILocation(line: 40, column: 54, scope: !7)
!32 = !DILocation(line: 47, column: 30, scope: !22, inlinedAt: !33)
!33 = !DILocation(line: 41, column: 23, scope: !7)
!34 = !DILocation(line: 47, column: 29, scope: !22, inlinedAt: !33)
!35 = !DILocation(line: 47, column: 20, scope: !22, inlinedAt: !33)
!36 = !DILocation(line: 47, column: 16, scope: !22, inlinedAt: !33)
!37 = !DILocation(line: 42, column: 20, scope: !7)
!38 = !DILocation(line: 0, scope: !7)
!39 = !DILocation(line: 46, column: 25, scope: !7)
!40 = !DILocation(line: 46, column: 37, scope: !7)
!41 = !DILocation(line: 46, column: 4, scope: !7)
