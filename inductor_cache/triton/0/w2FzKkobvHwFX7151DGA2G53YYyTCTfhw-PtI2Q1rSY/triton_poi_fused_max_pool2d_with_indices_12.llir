; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_max_pool2d_with_indices_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3, i32 %4) local_unnamed_addr !dbg !7 {
  %6 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %7 = shl i32 %6, 6, !dbg !11
  %8 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %9 = lshr i32 %8, 2, !dbg !12
  %10 = and i32 %9, 63, !dbg !12
  %.lobit3 = lshr i32 %8, 6, !dbg !12
  %11 = and i32 %.lobit3, 3, !dbg !12
  %12 = or disjoint i32 %7, %10, !dbg !13
  %13 = or disjoint i32 %7, %11, !dbg !13
  %14 = or disjoint i32 %13, 4, !dbg !13
  %15 = or disjoint i32 %13, 8, !dbg !13
  %16 = or disjoint i32 %13, 12, !dbg !13
  %17 = or disjoint i32 %13, 16, !dbg !13
  %18 = or disjoint i32 %13, 20, !dbg !13
  %19 = or disjoint i32 %13, 24, !dbg !13
  %20 = or disjoint i32 %13, 28, !dbg !13
  %21 = or disjoint i32 %13, 32, !dbg !13
  %22 = or disjoint i32 %13, 36, !dbg !13
  %23 = or disjoint i32 %13, 40, !dbg !13
  %24 = or disjoint i32 %13, 44, !dbg !13
  %25 = or disjoint i32 %13, 48, !dbg !13
  %26 = or disjoint i32 %13, 52, !dbg !13
  %27 = or disjoint i32 %13, 56, !dbg !13
  %28 = or disjoint i32 %13, 60, !dbg !13
  %29 = icmp slt i32 %12, 36, !dbg !14
  %30 = icmp slt i32 %13, 36, !dbg !14
  %31 = icmp slt i32 %14, 36, !dbg !14
  %32 = icmp slt i32 %15, 36, !dbg !14
  %33 = icmp slt i32 %16, 36, !dbg !14
  %34 = icmp slt i32 %17, 36, !dbg !14
  %35 = icmp slt i32 %18, 36, !dbg !14
  %36 = icmp slt i32 %19, 36, !dbg !14
  %37 = icmp slt i32 %20, 36, !dbg !14
  %38 = icmp slt i32 %21, 36, !dbg !14
  %39 = icmp slt i32 %7, 0, !dbg !14
  %40 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %41 = shl i32 %40, 6, !dbg !16
  %42 = shl i32 %8, 4, !dbg !17
  %43 = and i32 %42, 48, !dbg !17
  %44 = and i32 %8, 63, !dbg !17
  %45 = or disjoint i32 %41, %43, !dbg !18
  %46 = or disjoint i32 %45, 4, !dbg !18
  %47 = or disjoint i32 %45, 8, !dbg !18
  %48 = or disjoint i32 %45, 12, !dbg !18
  %49 = or disjoint i32 %41, %44, !dbg !18
  %50 = icmp slt i32 %45, 128, !dbg !19
  %51 = icmp slt i32 %49, 128, !dbg !19
  %.frozen = freeze i32 %12, !dbg !20
  %52 = sdiv i32 %.frozen, 3, !dbg !20
  %53 = mul i32 %52, 3, !dbg !21
  %.decomposed = sub i32 %.frozen, %53, !dbg !21
  %.frozen11 = freeze i32 %13, !dbg !22
  %54 = sdiv i32 %.frozen11, 9, !dbg !22
  %.frozen13 = freeze i32 %14, !dbg !22
  %55 = sdiv i32 %.frozen13, 9, !dbg !22
  %.frozen15 = freeze i32 %15, !dbg !22
  %56 = sdiv i32 %.frozen15, 9, !dbg !22
  %.frozen17 = freeze i32 %16, !dbg !22
  %57 = sdiv i32 %.frozen17, 9, !dbg !22
  %.frozen19 = freeze i32 %17, !dbg !22
  %58 = sdiv i32 %.frozen19, 9, !dbg !22
  %.frozen21 = freeze i32 %18, !dbg !22
  %59 = sdiv i32 %.frozen21, 9, !dbg !22
  %.frozen23 = freeze i32 %19, !dbg !22
  %60 = sdiv i32 %.frozen23, 9, !dbg !22
  %.frozen25 = freeze i32 %20, !dbg !22
  %61 = sdiv i32 %.frozen25, 9, !dbg !22
  %.frozen27 = freeze i32 %21, !dbg !22
  %62 = sdiv i32 %.frozen27, 9, !dbg !22
  %.frozen29 = freeze i32 %22, !dbg !22
  %63 = sdiv i32 %.frozen29, 9, !dbg !22
  %.frozen31 = freeze i32 %23, !dbg !22
  %64 = sdiv i32 %.frozen31, 9, !dbg !22
  %.frozen33 = freeze i32 %24, !dbg !22
  %65 = sdiv i32 %.frozen33, 9, !dbg !22
  %.frozen35 = freeze i32 %25, !dbg !22
  %66 = sdiv i32 %.frozen35, 9, !dbg !22
  %.frozen37 = freeze i32 %26, !dbg !22
  %67 = sdiv i32 %.frozen37, 9, !dbg !22
  %.frozen39 = freeze i32 %27, !dbg !22
  %68 = sdiv i32 %.frozen39, 9, !dbg !22
  %.frozen41 = freeze i32 %28, !dbg !22
  %69 = sdiv i32 %.frozen41, 9, !dbg !22
  %70 = mul i32 %54, 9, !dbg !23
  %.decomposed12 = sub i32 %.frozen11, %70, !dbg !23
  %71 = mul i32 %55, 9, !dbg !23
  %.decomposed14 = sub i32 %.frozen13, %71, !dbg !23
  %72 = mul i32 %56, 9, !dbg !23
  %.decomposed16 = sub i32 %.frozen15, %72, !dbg !23
  %73 = mul i32 %57, 9, !dbg !23
  %.decomposed18 = sub i32 %.frozen17, %73, !dbg !23
  %74 = mul i32 %58, 9, !dbg !23
  %.decomposed20 = sub i32 %.frozen19, %74, !dbg !23
  %75 = mul i32 %59, 9, !dbg !23
  %.decomposed22 = sub i32 %.frozen21, %75, !dbg !23
  %76 = mul i32 %60, 9, !dbg !23
  %.decomposed24 = sub i32 %.frozen23, %76, !dbg !23
  %77 = mul i32 %61, 9, !dbg !23
  %.decomposed26 = sub i32 %.frozen25, %77, !dbg !23
  %78 = mul i32 %62, 9, !dbg !23
  %.decomposed28 = sub i32 %.frozen27, %78, !dbg !23
  %79 = mul i32 %63, 9, !dbg !23
  %.decomposed30 = sub i32 %.frozen29, %79, !dbg !23
  %80 = mul i32 %64, 9, !dbg !23
  %.decomposed32 = sub i32 %.frozen31, %80, !dbg !23
  %81 = mul i32 %65, 9, !dbg !23
  %.decomposed34 = sub i32 %.frozen33, %81, !dbg !23
  %82 = mul i32 %66, 9, !dbg !23
  %.decomposed36 = sub i32 %.frozen35, %82, !dbg !23
  %83 = mul i32 %67, 9, !dbg !23
  %.decomposed38 = sub i32 %.frozen37, %83, !dbg !23
  %84 = mul i32 %68, 9, !dbg !23
  %.decomposed40 = sub i32 %.frozen39, %84, !dbg !23
  %85 = mul i32 %69, 9, !dbg !23
  %.decomposed42 = sub i32 %.frozen41, %85, !dbg !23
  %86 = shl nsw i32 %.decomposed, 8, !dbg !24
  %87 = mul i32 %52, 1536, !dbg !25
  %88 = add i32 %87, %86, !dbg !26
  %89 = add i32 %88, %45, !dbg !27
  %90 = add i32 %88, %46, !dbg !27
  %91 = add i32 %88, %47, !dbg !27
  %92 = add i32 %88, %48, !dbg !27
  %93 = sext i32 %89 to i64, !dbg !28
  %94 = getelementptr float, ptr addrspace(1) %0, i64 %93, !dbg !28
  %95 = sext i32 %90 to i64, !dbg !28
  %96 = getelementptr float, ptr addrspace(1) %0, i64 %95, !dbg !28
  %97 = sext i32 %91 to i64, !dbg !28
  %98 = getelementptr float, ptr addrspace(1) %0, i64 %97, !dbg !28
  %99 = sext i32 %92 to i64, !dbg !28
  %100 = getelementptr float, ptr addrspace(1) %0, i64 %99, !dbg !28
  %101 = and i1 %29, %50, !dbg !29
  %102 = and i1 %30, %51, !dbg !29
  %103 = and i1 %31, %51, !dbg !29
  %104 = and i1 %32, %51, !dbg !29
  %105 = and i1 %33, %51, !dbg !29
  %106 = and i1 %34, %51, !dbg !29
  %107 = and i1 %35, %51, !dbg !29
  %108 = and i1 %36, %51, !dbg !29
  %109 = and i1 %37, %51, !dbg !29
  %110 = and i1 %38, %51, !dbg !29
  %111 = and i1 %39, %51, !dbg !29
  %112 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %94, i1 %101) #2, !dbg !30
  %113 = extractvalue { i32, i32, i32, i32 } %112, 0, !dbg !30
  %114 = extractvalue { i32, i32, i32, i32 } %112, 1, !dbg !30
  %115 = extractvalue { i32, i32, i32, i32 } %112, 2, !dbg !30
  %116 = extractvalue { i32, i32, i32, i32 } %112, 3, !dbg !30
  %117 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %96, i1 %101) #2, !dbg !30
  %118 = extractvalue { i32, i32, i32, i32 } %117, 0, !dbg !30
  %119 = extractvalue { i32, i32, i32, i32 } %117, 1, !dbg !30
  %120 = extractvalue { i32, i32, i32, i32 } %117, 2, !dbg !30
  %121 = extractvalue { i32, i32, i32, i32 } %117, 3, !dbg !30
  %122 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %98, i1 %101) #2, !dbg !30
  %123 = extractvalue { i32, i32, i32, i32 } %122, 0, !dbg !30
  %124 = extractvalue { i32, i32, i32, i32 } %122, 1, !dbg !30
  %125 = extractvalue { i32, i32, i32, i32 } %122, 2, !dbg !30
  %126 = extractvalue { i32, i32, i32, i32 } %122, 3, !dbg !30
  %127 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %100, i1 %101) #2, !dbg !30
  %128 = extractvalue { i32, i32, i32, i32 } %127, 0, !dbg !30
  %129 = extractvalue { i32, i32, i32, i32 } %127, 1, !dbg !30
  %130 = extractvalue { i32, i32, i32, i32 } %127, 2, !dbg !30
  %131 = extractvalue { i32, i32, i32, i32 } %127, 3, !dbg !30
  %132 = or disjoint i32 %88, 128, !dbg !31
  %133 = add i32 %132, %45, !dbg !32
  %134 = add i32 %132, %46, !dbg !32
  %135 = add i32 %132, %47, !dbg !32
  %136 = add i32 %132, %48, !dbg !32
  %137 = sext i32 %133 to i64, !dbg !33
  %138 = getelementptr float, ptr addrspace(1) %0, i64 %137, !dbg !33
  %139 = sext i32 %134 to i64, !dbg !33
  %140 = getelementptr float, ptr addrspace(1) %0, i64 %139, !dbg !33
  %141 = sext i32 %135 to i64, !dbg !33
  %142 = getelementptr float, ptr addrspace(1) %0, i64 %141, !dbg !33
  %143 = sext i32 %136 to i64, !dbg !33
  %144 = getelementptr float, ptr addrspace(1) %0, i64 %143, !dbg !33
  %145 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %138, i1 %101) #2, !dbg !34
  %146 = extractvalue { i32, i32, i32, i32 } %145, 0, !dbg !34
  %147 = extractvalue { i32, i32, i32, i32 } %145, 1, !dbg !34
  %148 = extractvalue { i32, i32, i32, i32 } %145, 2, !dbg !34
  %149 = extractvalue { i32, i32, i32, i32 } %145, 3, !dbg !34
  %150 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %140, i1 %101) #2, !dbg !34
  %151 = extractvalue { i32, i32, i32, i32 } %150, 0, !dbg !34
  %152 = extractvalue { i32, i32, i32, i32 } %150, 1, !dbg !34
  %153 = extractvalue { i32, i32, i32, i32 } %150, 2, !dbg !34
  %154 = extractvalue { i32, i32, i32, i32 } %150, 3, !dbg !34
  %155 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %142, i1 %101) #2, !dbg !34
  %156 = extractvalue { i32, i32, i32, i32 } %155, 0, !dbg !34
  %157 = extractvalue { i32, i32, i32, i32 } %155, 1, !dbg !34
  %158 = extractvalue { i32, i32, i32, i32 } %155, 2, !dbg !34
  %159 = extractvalue { i32, i32, i32, i32 } %155, 3, !dbg !34
  %160 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %144, i1 %101) #2, !dbg !34
  %161 = extractvalue { i32, i32, i32, i32 } %160, 0, !dbg !34
  %162 = extractvalue { i32, i32, i32, i32 } %160, 1, !dbg !34
  %163 = extractvalue { i32, i32, i32, i32 } %160, 2, !dbg !34
  %164 = extractvalue { i32, i32, i32, i32 } %160, 3, !dbg !34
  %165 = add i32 %88, 768, !dbg !35
  %166 = add i32 %165, %45, !dbg !36
  %167 = add i32 %165, %46, !dbg !36
  %168 = add i32 %165, %47, !dbg !36
  %169 = add i32 %165, %48, !dbg !36
  %170 = sext i32 %166 to i64, !dbg !37
  %171 = getelementptr float, ptr addrspace(1) %0, i64 %170, !dbg !37
  %172 = sext i32 %167 to i64, !dbg !37
  %173 = getelementptr float, ptr addrspace(1) %0, i64 %172, !dbg !37
  %174 = sext i32 %168 to i64, !dbg !37
  %175 = getelementptr float, ptr addrspace(1) %0, i64 %174, !dbg !37
  %176 = sext i32 %169 to i64, !dbg !37
  %177 = getelementptr float, ptr addrspace(1) %0, i64 %176, !dbg !37
  %178 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %171, i1 %101) #2, !dbg !38
  %179 = extractvalue { i32, i32, i32, i32 } %178, 0, !dbg !38
  %180 = extractvalue { i32, i32, i32, i32 } %178, 1, !dbg !38
  %181 = extractvalue { i32, i32, i32, i32 } %178, 2, !dbg !38
  %182 = extractvalue { i32, i32, i32, i32 } %178, 3, !dbg !38
  %183 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %173, i1 %101) #2, !dbg !38
  %184 = extractvalue { i32, i32, i32, i32 } %183, 0, !dbg !38
  %185 = extractvalue { i32, i32, i32, i32 } %183, 1, !dbg !38
  %186 = extractvalue { i32, i32, i32, i32 } %183, 2, !dbg !38
  %187 = extractvalue { i32, i32, i32, i32 } %183, 3, !dbg !38
  %188 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %175, i1 %101) #2, !dbg !38
  %189 = extractvalue { i32, i32, i32, i32 } %188, 0, !dbg !38
  %190 = extractvalue { i32, i32, i32, i32 } %188, 1, !dbg !38
  %191 = extractvalue { i32, i32, i32, i32 } %188, 2, !dbg !38
  %192 = extractvalue { i32, i32, i32, i32 } %188, 3, !dbg !38
  %193 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %177, i1 %101) #2, !dbg !38
  %194 = extractvalue { i32, i32, i32, i32 } %193, 0, !dbg !38
  %195 = extractvalue { i32, i32, i32, i32 } %193, 1, !dbg !38
  %196 = extractvalue { i32, i32, i32, i32 } %193, 2, !dbg !38
  %197 = extractvalue { i32, i32, i32, i32 } %193, 3, !dbg !38
  %198 = add i32 %88, 896, !dbg !39
  %199 = add i32 %198, %45, !dbg !40
  %200 = add i32 %198, %46, !dbg !40
  %201 = add i32 %198, %47, !dbg !40
  %202 = add i32 %198, %48, !dbg !40
  %203 = sext i32 %199 to i64, !dbg !41
  %204 = getelementptr float, ptr addrspace(1) %0, i64 %203, !dbg !41
  %205 = sext i32 %200 to i64, !dbg !41
  %206 = getelementptr float, ptr addrspace(1) %0, i64 %205, !dbg !41
  %207 = sext i32 %201 to i64, !dbg !41
  %208 = getelementptr float, ptr addrspace(1) %0, i64 %207, !dbg !41
  %209 = sext i32 %202 to i64, !dbg !41
  %210 = getelementptr float, ptr addrspace(1) %0, i64 %209, !dbg !41
  %211 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %204, i1 %101) #2, !dbg !42
  %212 = extractvalue { i32, i32, i32, i32 } %211, 0, !dbg !42
  %213 = extractvalue { i32, i32, i32, i32 } %211, 1, !dbg !42
  %214 = extractvalue { i32, i32, i32, i32 } %211, 2, !dbg !42
  %215 = extractvalue { i32, i32, i32, i32 } %211, 3, !dbg !42
  %216 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %206, i1 %101) #2, !dbg !42
  %217 = extractvalue { i32, i32, i32, i32 } %216, 0, !dbg !42
  %218 = extractvalue { i32, i32, i32, i32 } %216, 1, !dbg !42
  %219 = extractvalue { i32, i32, i32, i32 } %216, 2, !dbg !42
  %220 = extractvalue { i32, i32, i32, i32 } %216, 3, !dbg !42
  %221 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %208, i1 %101) #2, !dbg !42
  %222 = extractvalue { i32, i32, i32, i32 } %221, 0, !dbg !42
  %223 = extractvalue { i32, i32, i32, i32 } %221, 1, !dbg !42
  %224 = extractvalue { i32, i32, i32, i32 } %221, 2, !dbg !42
  %225 = extractvalue { i32, i32, i32, i32 } %221, 3, !dbg !42
  %226 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %210, i1 %101) #2, !dbg !42
  %227 = extractvalue { i32, i32, i32, i32 } %226, 0, !dbg !42
  %228 = extractvalue { i32, i32, i32, i32 } %226, 1, !dbg !42
  %229 = extractvalue { i32, i32, i32, i32 } %226, 2, !dbg !42
  %230 = extractvalue { i32, i32, i32, i32 } %226, 3, !dbg !42
  %231 = insertelement <4 x i32> poison, i32 %113, i64 0, !dbg !30
  %232 = insertelement <4 x i32> %231, i32 %114, i64 1, !dbg !30
  %233 = insertelement <4 x i32> %232, i32 %115, i64 2, !dbg !30
  %234 = insertelement <4 x i32> %233, i32 %116, i64 3, !dbg !30
  %235 = bitcast <4 x i32> %234 to <4 x float>, !dbg !30
  %236 = insertelement <4 x i32> poison, i32 %146, i64 0, !dbg !34
  %237 = insertelement <4 x i32> %236, i32 %147, i64 1, !dbg !34
  %238 = insertelement <4 x i32> %237, i32 %148, i64 2, !dbg !34
  %239 = insertelement <4 x i32> %238, i32 %149, i64 3, !dbg !34
  %240 = bitcast <4 x i32> %239 to <4 x float>, !dbg !34
  %241 = insertelement <4 x i32> poison, i32 %179, i64 0, !dbg !38
  %242 = insertelement <4 x i32> %241, i32 %180, i64 1, !dbg !38
  %243 = insertelement <4 x i32> %242, i32 %181, i64 2, !dbg !38
  %244 = insertelement <4 x i32> %243, i32 %182, i64 3, !dbg !38
  %245 = bitcast <4 x i32> %244 to <4 x float>, !dbg !38
  %246 = insertelement <4 x i32> poison, i32 %212, i64 0, !dbg !42
  %247 = insertelement <4 x i32> %246, i32 %213, i64 1, !dbg !42
  %248 = insertelement <4 x i32> %247, i32 %214, i64 2, !dbg !42
  %249 = insertelement <4 x i32> %248, i32 %215, i64 3, !dbg !42
  %250 = bitcast <4 x i32> %249 to <4 x float>, !dbg !42
  %251 = fcmp ogt <4 x float> %240, %235, !dbg !43
  %252 = zext <4 x i1> %251 to <4 x i8>, !dbg !44
  %253 = fcmp uno <4 x float> %240, zeroinitializer, !dbg !45
  %254 = or <4 x i1> %251, %253, !dbg !49
  %.v = select <4 x i1> %254, <4 x i32> %239, <4 x i32> %234, !dbg !50
  %255 = bitcast <4 x i32> %.v to <4 x float>, !dbg !50
  %256 = fcmp olt <4 x float> %255, %245, !dbg !51
  %257 = select <4 x i1> %256, <4 x i8> splat (i8 2), <4 x i8> %252, !dbg !52
  %258 = fcmp uno <4 x float> %245, zeroinitializer, !dbg !53
  %259 = or <4 x i1> %256, %258, !dbg !55
  %.v4 = select <4 x i1> %259, <4 x i32> %244, <4 x i32> %.v, !dbg !56
  %260 = bitcast <4 x i32> %.v4 to <4 x float>, !dbg !56
  %261 = fcmp olt <4 x float> %260, %250, !dbg !57
  %262 = select <4 x i1> %261, <4 x i8> splat (i8 3), <4 x i8> %257, !dbg !58
  %263 = insertelement <4 x i32> poison, i32 %118, i64 0, !dbg !30
  %264 = insertelement <4 x i32> %263, i32 %119, i64 1, !dbg !30
  %265 = insertelement <4 x i32> %264, i32 %120, i64 2, !dbg !30
  %266 = insertelement <4 x i32> %265, i32 %121, i64 3, !dbg !30
  %267 = bitcast <4 x i32> %266 to <4 x float>, !dbg !30
  %268 = insertelement <4 x i32> poison, i32 %151, i64 0, !dbg !34
  %269 = insertelement <4 x i32> %268, i32 %152, i64 1, !dbg !34
  %270 = insertelement <4 x i32> %269, i32 %153, i64 2, !dbg !34
  %271 = insertelement <4 x i32> %270, i32 %154, i64 3, !dbg !34
  %272 = bitcast <4 x i32> %271 to <4 x float>, !dbg !34
  %273 = insertelement <4 x i32> poison, i32 %184, i64 0, !dbg !38
  %274 = insertelement <4 x i32> %273, i32 %185, i64 1, !dbg !38
  %275 = insertelement <4 x i32> %274, i32 %186, i64 2, !dbg !38
  %276 = insertelement <4 x i32> %275, i32 %187, i64 3, !dbg !38
  %277 = bitcast <4 x i32> %276 to <4 x float>, !dbg !38
  %278 = insertelement <4 x i32> poison, i32 %217, i64 0, !dbg !42
  %279 = insertelement <4 x i32> %278, i32 %218, i64 1, !dbg !42
  %280 = insertelement <4 x i32> %279, i32 %219, i64 2, !dbg !42
  %281 = insertelement <4 x i32> %280, i32 %220, i64 3, !dbg !42
  %282 = bitcast <4 x i32> %281 to <4 x float>, !dbg !42
  %283 = fcmp ogt <4 x float> %272, %267, !dbg !43
  %284 = zext <4 x i1> %283 to <4 x i8>, !dbg !44
  %285 = fcmp uno <4 x float> %272, zeroinitializer, !dbg !45
  %286 = or <4 x i1> %283, %285, !dbg !49
  %.v5 = select <4 x i1> %286, <4 x i32> %271, <4 x i32> %266, !dbg !50
  %287 = bitcast <4 x i32> %.v5 to <4 x float>, !dbg !50
  %288 = fcmp olt <4 x float> %287, %277, !dbg !51
  %289 = select <4 x i1> %288, <4 x i8> splat (i8 2), <4 x i8> %284, !dbg !52
  %290 = fcmp uno <4 x float> %277, zeroinitializer, !dbg !53
  %291 = or <4 x i1> %288, %290, !dbg !55
  %.v6 = select <4 x i1> %291, <4 x i32> %276, <4 x i32> %.v5, !dbg !56
  %292 = bitcast <4 x i32> %.v6 to <4 x float>, !dbg !56
  %293 = fcmp olt <4 x float> %292, %282, !dbg !57
  %294 = select <4 x i1> %293, <4 x i8> splat (i8 3), <4 x i8> %289, !dbg !58
  %295 = insertelement <4 x i32> poison, i32 %123, i64 0, !dbg !30
  %296 = insertelement <4 x i32> %295, i32 %124, i64 1, !dbg !30
  %297 = insertelement <4 x i32> %296, i32 %125, i64 2, !dbg !30
  %298 = insertelement <4 x i32> %297, i32 %126, i64 3, !dbg !30
  %299 = bitcast <4 x i32> %298 to <4 x float>, !dbg !30
  %300 = insertelement <4 x i32> poison, i32 %156, i64 0, !dbg !34
  %301 = insertelement <4 x i32> %300, i32 %157, i64 1, !dbg !34
  %302 = insertelement <4 x i32> %301, i32 %158, i64 2, !dbg !34
  %303 = insertelement <4 x i32> %302, i32 %159, i64 3, !dbg !34
  %304 = bitcast <4 x i32> %303 to <4 x float>, !dbg !34
  %305 = insertelement <4 x i32> poison, i32 %189, i64 0, !dbg !38
  %306 = insertelement <4 x i32> %305, i32 %190, i64 1, !dbg !38
  %307 = insertelement <4 x i32> %306, i32 %191, i64 2, !dbg !38
  %308 = insertelement <4 x i32> %307, i32 %192, i64 3, !dbg !38
  %309 = bitcast <4 x i32> %308 to <4 x float>, !dbg !38
  %310 = insertelement <4 x i32> poison, i32 %222, i64 0, !dbg !42
  %311 = insertelement <4 x i32> %310, i32 %223, i64 1, !dbg !42
  %312 = insertelement <4 x i32> %311, i32 %224, i64 2, !dbg !42
  %313 = insertelement <4 x i32> %312, i32 %225, i64 3, !dbg !42
  %314 = bitcast <4 x i32> %313 to <4 x float>, !dbg !42
  %315 = fcmp ogt <4 x float> %304, %299, !dbg !43
  %316 = zext <4 x i1> %315 to <4 x i8>, !dbg !44
  %317 = fcmp uno <4 x float> %304, zeroinitializer, !dbg !45
  %318 = or <4 x i1> %315, %317, !dbg !49
  %.v7 = select <4 x i1> %318, <4 x i32> %303, <4 x i32> %298, !dbg !50
  %319 = bitcast <4 x i32> %.v7 to <4 x float>, !dbg !50
  %320 = fcmp olt <4 x float> %319, %309, !dbg !51
  %321 = select <4 x i1> %320, <4 x i8> splat (i8 2), <4 x i8> %316, !dbg !52
  %322 = fcmp uno <4 x float> %309, zeroinitializer, !dbg !53
  %323 = or <4 x i1> %320, %322, !dbg !55
  %.v8 = select <4 x i1> %323, <4 x i32> %308, <4 x i32> %.v7, !dbg !56
  %324 = bitcast <4 x i32> %.v8 to <4 x float>, !dbg !56
  %325 = fcmp olt <4 x float> %324, %314, !dbg !57
  %326 = select <4 x i1> %325, <4 x i8> splat (i8 3), <4 x i8> %321, !dbg !58
  %327 = insertelement <4 x i32> poison, i32 %128, i64 0, !dbg !30
  %328 = insertelement <4 x i32> %327, i32 %129, i64 1, !dbg !30
  %329 = insertelement <4 x i32> %328, i32 %130, i64 2, !dbg !30
  %330 = insertelement <4 x i32> %329, i32 %131, i64 3, !dbg !30
  %331 = bitcast <4 x i32> %330 to <4 x float>, !dbg !30
  %332 = insertelement <4 x i32> poison, i32 %161, i64 0, !dbg !34
  %333 = insertelement <4 x i32> %332, i32 %162, i64 1, !dbg !34
  %334 = insertelement <4 x i32> %333, i32 %163, i64 2, !dbg !34
  %335 = insertelement <4 x i32> %334, i32 %164, i64 3, !dbg !34
  %336 = bitcast <4 x i32> %335 to <4 x float>, !dbg !34
  %337 = insertelement <4 x i32> poison, i32 %194, i64 0, !dbg !38
  %338 = insertelement <4 x i32> %337, i32 %195, i64 1, !dbg !38
  %339 = insertelement <4 x i32> %338, i32 %196, i64 2, !dbg !38
  %340 = insertelement <4 x i32> %339, i32 %197, i64 3, !dbg !38
  %341 = bitcast <4 x i32> %340 to <4 x float>, !dbg !38
  %342 = insertelement <4 x i32> poison, i32 %227, i64 0, !dbg !42
  %343 = insertelement <4 x i32> %342, i32 %228, i64 1, !dbg !42
  %344 = insertelement <4 x i32> %343, i32 %229, i64 2, !dbg !42
  %345 = insertelement <4 x i32> %344, i32 %230, i64 3, !dbg !42
  %346 = bitcast <4 x i32> %345 to <4 x float>, !dbg !42
  %347 = fcmp ogt <4 x float> %336, %331, !dbg !43
  %348 = zext <4 x i1> %347 to <4 x i8>, !dbg !44
  %349 = fcmp uno <4 x float> %336, zeroinitializer, !dbg !45
  %350 = or <4 x i1> %347, %349, !dbg !49
  %.v9 = select <4 x i1> %350, <4 x i32> %335, <4 x i32> %330, !dbg !50
  %351 = bitcast <4 x i32> %.v9 to <4 x float>, !dbg !50
  %352 = fcmp olt <4 x float> %351, %341, !dbg !51
  %353 = select <4 x i1> %352, <4 x i8> splat (i8 2), <4 x i8> %348, !dbg !52
  %354 = fcmp uno <4 x float> %341, zeroinitializer, !dbg !53
  %355 = or <4 x i1> %352, %354, !dbg !55
  %.v10 = select <4 x i1> %355, <4 x i32> %340, <4 x i32> %.v9, !dbg !56
  %356 = bitcast <4 x i32> %.v10 to <4 x float>, !dbg !56
  %357 = fcmp olt <4 x float> %356, %346, !dbg !57
  %358 = select <4 x i1> %357, <4 x i8> splat (i8 3), <4 x i8> %353, !dbg !58
  %359 = bitcast i32 %212 to float, !dbg !59
  %360 = fcmp uno float %359, 0.000000e+00, !dbg !59
  %361 = bitcast i32 %213 to float, !dbg !59
  %362 = fcmp uno float %361, 0.000000e+00, !dbg !59
  %363 = bitcast i32 %214 to float, !dbg !59
  %364 = fcmp uno float %363, 0.000000e+00, !dbg !59
  %365 = bitcast i32 %215 to float, !dbg !59
  %366 = fcmp uno float %365, 0.000000e+00, !dbg !59
  %367 = bitcast i32 %217 to float, !dbg !59
  %368 = fcmp uno float %367, 0.000000e+00, !dbg !59
  %369 = bitcast i32 %218 to float, !dbg !59
  %370 = fcmp uno float %369, 0.000000e+00, !dbg !59
  %371 = bitcast i32 %219 to float, !dbg !59
  %372 = fcmp uno float %371, 0.000000e+00, !dbg !59
  %373 = bitcast i32 %220 to float, !dbg !59
  %374 = fcmp uno float %373, 0.000000e+00, !dbg !59
  %375 = bitcast i32 %222 to float, !dbg !59
  %376 = fcmp uno float %375, 0.000000e+00, !dbg !59
  %377 = bitcast i32 %223 to float, !dbg !59
  %378 = fcmp uno float %377, 0.000000e+00, !dbg !59
  %379 = bitcast i32 %224 to float, !dbg !59
  %380 = fcmp uno float %379, 0.000000e+00, !dbg !59
  %381 = bitcast i32 %225 to float, !dbg !59
  %382 = fcmp uno float %381, 0.000000e+00, !dbg !59
  %383 = bitcast i32 %227 to float, !dbg !59
  %384 = fcmp uno float %383, 0.000000e+00, !dbg !59
  %385 = bitcast i32 %228 to float, !dbg !59
  %386 = fcmp uno float %385, 0.000000e+00, !dbg !59
  %387 = bitcast i32 %229 to float, !dbg !59
  %388 = fcmp uno float %387, 0.000000e+00, !dbg !59
  %389 = bitcast i32 %230 to float, !dbg !59
  %390 = fcmp uno float %389, 0.000000e+00, !dbg !59
  %391 = extractelement <4 x i1> %261, i64 0, !dbg !61
  %392 = or i1 %391, %360, !dbg !61
  %393 = extractelement <4 x i1> %261, i64 1, !dbg !61
  %394 = or i1 %393, %362, !dbg !61
  %395 = extractelement <4 x i1> %261, i64 2, !dbg !61
  %396 = or i1 %395, %364, !dbg !61
  %397 = extractelement <4 x i1> %261, i64 3, !dbg !61
  %398 = or i1 %397, %366, !dbg !61
  %399 = extractelement <4 x i1> %293, i64 0, !dbg !61
  %400 = or i1 %399, %368, !dbg !61
  %401 = extractelement <4 x i1> %293, i64 1, !dbg !61
  %402 = or i1 %401, %370, !dbg !61
  %403 = extractelement <4 x i1> %293, i64 2, !dbg !61
  %404 = or i1 %403, %372, !dbg !61
  %405 = extractelement <4 x i1> %293, i64 3, !dbg !61
  %406 = or i1 %405, %374, !dbg !61
  %407 = extractelement <4 x i1> %325, i64 0, !dbg !61
  %408 = or i1 %407, %376, !dbg !61
  %409 = extractelement <4 x i1> %325, i64 1, !dbg !61
  %410 = or i1 %409, %378, !dbg !61
  %411 = extractelement <4 x i1> %325, i64 2, !dbg !61
  %412 = or i1 %411, %380, !dbg !61
  %413 = extractelement <4 x i1> %325, i64 3, !dbg !61
  %414 = or i1 %413, %382, !dbg !61
  %415 = extractelement <4 x i1> %357, i64 0, !dbg !61
  %416 = or i1 %415, %384, !dbg !61
  %417 = extractelement <4 x i1> %357, i64 1, !dbg !61
  %418 = or i1 %417, %386, !dbg !61
  %419 = extractelement <4 x i1> %357, i64 2, !dbg !61
  %420 = or i1 %419, %388, !dbg !61
  %421 = extractelement <4 x i1> %357, i64 3, !dbg !61
  %422 = or i1 %421, %390, !dbg !61
  %423 = shl i32 %12, 7, !dbg !62
  %424 = add i32 %45, %423, !dbg !63
  %425 = sext i32 %424 to i64, !dbg !64
  %426 = getelementptr i8, ptr addrspace(1) %1, i64 %425, !dbg !64
  %427 = bitcast <4 x i8> %262 to i32, !dbg !65
  %428 = bitcast <4 x i8> %294 to i32, !dbg !65
  %429 = bitcast <4 x i8> %326 to i32, !dbg !65
  %430 = bitcast <4 x i8> %358 to i32, !dbg !65
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %427, i32 %428, i32 %429, i32 %430, ptr addrspace(1) %426, i1 %101) #2, !dbg !65
  %431 = mul i32 %49, 9, !dbg !66
  %432 = add i32 %431, %.decomposed12, !dbg !67
  %433 = mul i32 %54, 1152, !dbg !68
  %434 = mul i32 %55, 1152, !dbg !68
  %435 = mul i32 %56, 1152, !dbg !68
  %436 = mul i32 %57, 1152, !dbg !68
  %437 = mul i32 %58, 1152, !dbg !68
  %438 = mul i32 %59, 1152, !dbg !68
  %439 = mul i32 %60, 1152, !dbg !68
  %440 = mul i32 %61, 1152, !dbg !68
  %441 = mul i32 %62, 1152, !dbg !68
  %442 = mul i32 %63, 1152, !dbg !68
  %443 = mul i32 %64, 1152, !dbg !68
  %444 = mul i32 %65, 1152, !dbg !68
  %445 = mul i32 %66, 1152, !dbg !68
  %446 = mul i32 %67, 1152, !dbg !68
  %447 = mul i32 %68, 1152, !dbg !68
  %448 = mul i32 %69, 1152, !dbg !68
  %449 = add i32 %432, %433, !dbg !69
  %450 = add i32 %434, %.decomposed14, !dbg !67
  %451 = add i32 %450, %431, !dbg !69
  %452 = add i32 %435, %.decomposed16, !dbg !67
  %453 = add i32 %452, %431, !dbg !69
  %454 = add i32 %436, %.decomposed18, !dbg !67
  %455 = add i32 %454, %431, !dbg !69
  %456 = add i32 %437, %.decomposed20, !dbg !67
  %457 = add i32 %456, %431, !dbg !69
  %458 = add i32 %438, %.decomposed22, !dbg !67
  %459 = add i32 %458, %431, !dbg !69
  %460 = add i32 %439, %.decomposed24, !dbg !67
  %461 = add i32 %460, %431, !dbg !69
  %462 = add i32 %440, %.decomposed26, !dbg !67
  %463 = add i32 %462, %431, !dbg !69
  %464 = add i32 %441, %.decomposed28, !dbg !67
  %465 = add i32 %464, %431, !dbg !69
  %466 = add i32 %442, %.decomposed30, !dbg !67
  %467 = add i32 %466, %431, !dbg !69
  %468 = add i32 %443, %.decomposed32, !dbg !67
  %469 = add i32 %468, %431, !dbg !69
  %470 = add i32 %444, %.decomposed34, !dbg !67
  %471 = add i32 %470, %431, !dbg !69
  %472 = add i32 %445, %.decomposed36, !dbg !67
  %473 = add i32 %472, %431, !dbg !69
  %474 = add i32 %446, %.decomposed38, !dbg !67
  %475 = add i32 %474, %431, !dbg !69
  %476 = add i32 %447, %.decomposed40, !dbg !67
  %477 = add i32 %476, %431, !dbg !69
  %478 = add i32 %448, %.decomposed42, !dbg !67
  %479 = add i32 %478, %431, !dbg !69
  %480 = sext i32 %449 to i64, !dbg !70
  %481 = getelementptr float, ptr addrspace(1) %2, i64 %480, !dbg !70
  %482 = sext i32 %451 to i64, !dbg !70
  %483 = getelementptr float, ptr addrspace(1) %2, i64 %482, !dbg !70
  %484 = sext i32 %453 to i64, !dbg !70
  %485 = getelementptr float, ptr addrspace(1) %2, i64 %484, !dbg !70
  %486 = sext i32 %455 to i64, !dbg !70
  %487 = getelementptr float, ptr addrspace(1) %2, i64 %486, !dbg !70
  %488 = sext i32 %457 to i64, !dbg !70
  %489 = getelementptr float, ptr addrspace(1) %2, i64 %488, !dbg !70
  %490 = sext i32 %459 to i64, !dbg !70
  %491 = getelementptr float, ptr addrspace(1) %2, i64 %490, !dbg !70
  %492 = sext i32 %461 to i64, !dbg !70
  %493 = getelementptr float, ptr addrspace(1) %2, i64 %492, !dbg !70
  %494 = sext i32 %463 to i64, !dbg !70
  %495 = getelementptr float, ptr addrspace(1) %2, i64 %494, !dbg !70
  %496 = sext i32 %465 to i64, !dbg !70
  %497 = getelementptr float, ptr addrspace(1) %2, i64 %496, !dbg !70
  %498 = sext i32 %467 to i64, !dbg !70
  %499 = getelementptr float, ptr addrspace(1) %2, i64 %498, !dbg !70
  %500 = sext i32 %469 to i64, !dbg !70
  %501 = getelementptr float, ptr addrspace(1) %2, i64 %500, !dbg !70
  %502 = sext i32 %471 to i64, !dbg !70
  %503 = getelementptr float, ptr addrspace(1) %2, i64 %502, !dbg !70
  %504 = sext i32 %473 to i64, !dbg !70
  %505 = getelementptr float, ptr addrspace(1) %2, i64 %504, !dbg !70
  %506 = sext i32 %475 to i64, !dbg !70
  %507 = getelementptr float, ptr addrspace(1) %2, i64 %506, !dbg !70
  %508 = sext i32 %477 to i64, !dbg !70
  %509 = getelementptr float, ptr addrspace(1) %2, i64 %508, !dbg !70
  %510 = sext i32 %479 to i64, !dbg !70
  %511 = getelementptr float, ptr addrspace(1) %2, i64 %510, !dbg !70
  %512 = and i32 %42, 4080, !dbg !71
  %513 = and i32 %8, 255, !dbg !71
  %514 = lshr i32 %512, 6, !dbg !71
  %515 = getelementptr float, ptr addrspace(3) @global_smem, i32 %514, !dbg !71
  %516 = getelementptr float, ptr addrspace(3) %515, i32 %512, !dbg !71
  %517 = extractelement <4 x i32> %.v4, i64 0, !dbg !71
  %518 = select i1 %392, i32 %212, i32 %517, !dbg !72
  %519 = insertelement <1 x i32> poison, i32 %518, i64 0, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %516, <1 x i32> %519, i1 true) #2, !dbg !71
  %520 = or disjoint i32 %512, 1, !dbg !71
  %521 = getelementptr float, ptr addrspace(3) %515, i32 %520, !dbg !71
  %522 = extractelement <4 x i32> %.v4, i64 1, !dbg !71
  %523 = select i1 %394, i32 %213, i32 %522, !dbg !72
  %524 = insertelement <1 x i32> poison, i32 %523, i64 0, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %521, <1 x i32> %524, i1 true) #2, !dbg !71
  %525 = or disjoint i32 %512, 2, !dbg !71
  %526 = getelementptr float, ptr addrspace(3) %515, i32 %525, !dbg !71
  %527 = extractelement <4 x i32> %.v4, i64 2, !dbg !71
  %528 = select i1 %396, i32 %214, i32 %527, !dbg !72
  %529 = insertelement <1 x i32> poison, i32 %528, i64 0, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %526, <1 x i32> %529, i1 true) #2, !dbg !71
  %530 = or disjoint i32 %512, 3, !dbg !71
  %531 = getelementptr float, ptr addrspace(3) %515, i32 %530, !dbg !71
  %532 = extractelement <4 x i32> %.v4, i64 3, !dbg !71
  %533 = select i1 %398, i32 %215, i32 %532, !dbg !72
  %534 = insertelement <1 x i32> poison, i32 %533, i64 0, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %531, <1 x i32> %534, i1 true) #2, !dbg !71
  %535 = or disjoint i32 %512, 4, !dbg !71
  %536 = getelementptr float, ptr addrspace(3) %515, i32 %535, !dbg !71
  %537 = extractelement <4 x i32> %.v6, i64 0, !dbg !71
  %538 = select i1 %400, i32 %217, i32 %537, !dbg !72
  %539 = insertelement <1 x i32> poison, i32 %538, i64 0, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %536, <1 x i32> %539, i1 true) #2, !dbg !71
  %540 = or disjoint i32 %512, 5, !dbg !71
  %541 = getelementptr float, ptr addrspace(3) %515, i32 %540, !dbg !71
  %542 = extractelement <4 x i32> %.v6, i64 1, !dbg !71
  %543 = select i1 %402, i32 %218, i32 %542, !dbg !72
  %544 = insertelement <1 x i32> poison, i32 %543, i64 0, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %541, <1 x i32> %544, i1 true) #2, !dbg !71
  %545 = or disjoint i32 %512, 6, !dbg !71
  %546 = getelementptr float, ptr addrspace(3) %515, i32 %545, !dbg !71
  %547 = extractelement <4 x i32> %.v6, i64 2, !dbg !71
  %548 = select i1 %404, i32 %219, i32 %547, !dbg !72
  %549 = insertelement <1 x i32> poison, i32 %548, i64 0, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %546, <1 x i32> %549, i1 true) #2, !dbg !71
  %550 = or disjoint i32 %512, 7, !dbg !71
  %551 = getelementptr float, ptr addrspace(3) %515, i32 %550, !dbg !71
  %552 = extractelement <4 x i32> %.v6, i64 3, !dbg !71
  %553 = select i1 %406, i32 %220, i32 %552, !dbg !72
  %554 = insertelement <1 x i32> poison, i32 %553, i64 0, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %551, <1 x i32> %554, i1 true) #2, !dbg !71
  %555 = or disjoint i32 %512, 8, !dbg !71
  %556 = getelementptr float, ptr addrspace(3) %515, i32 %555, !dbg !71
  %557 = extractelement <4 x i32> %.v8, i64 0, !dbg !71
  %558 = select i1 %408, i32 %222, i32 %557, !dbg !72
  %559 = insertelement <1 x i32> poison, i32 %558, i64 0, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %556, <1 x i32> %559, i1 true) #2, !dbg !71
  %560 = or disjoint i32 %512, 9, !dbg !71
  %561 = getelementptr float, ptr addrspace(3) %515, i32 %560, !dbg !71
  %562 = extractelement <4 x i32> %.v8, i64 1, !dbg !71
  %563 = select i1 %410, i32 %223, i32 %562, !dbg !72
  %564 = insertelement <1 x i32> poison, i32 %563, i64 0, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %561, <1 x i32> %564, i1 true) #2, !dbg !71
  %565 = or disjoint i32 %512, 10, !dbg !71
  %566 = getelementptr float, ptr addrspace(3) %515, i32 %565, !dbg !71
  %567 = extractelement <4 x i32> %.v8, i64 2, !dbg !71
  %568 = select i1 %412, i32 %224, i32 %567, !dbg !72
  %569 = insertelement <1 x i32> poison, i32 %568, i64 0, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %566, <1 x i32> %569, i1 true) #2, !dbg !71
  %570 = or disjoint i32 %512, 11, !dbg !71
  %571 = getelementptr float, ptr addrspace(3) %515, i32 %570, !dbg !71
  %572 = extractelement <4 x i32> %.v8, i64 3, !dbg !71
  %573 = select i1 %414, i32 %225, i32 %572, !dbg !72
  %574 = insertelement <1 x i32> poison, i32 %573, i64 0, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %571, <1 x i32> %574, i1 true) #2, !dbg !71
  %575 = or disjoint i32 %512, 12, !dbg !71
  %576 = getelementptr float, ptr addrspace(3) %515, i32 %575, !dbg !71
  %577 = extractelement <4 x i32> %.v10, i64 0, !dbg !71
  %578 = select i1 %416, i32 %227, i32 %577, !dbg !72
  %579 = insertelement <1 x i32> poison, i32 %578, i64 0, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %576, <1 x i32> %579, i1 true) #2, !dbg !71
  %580 = or disjoint i32 %512, 13, !dbg !71
  %581 = getelementptr float, ptr addrspace(3) %515, i32 %580, !dbg !71
  %582 = extractelement <4 x i32> %.v10, i64 1, !dbg !71
  %583 = select i1 %418, i32 %228, i32 %582, !dbg !72
  %584 = insertelement <1 x i32> poison, i32 %583, i64 0, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %581, <1 x i32> %584, i1 true) #2, !dbg !71
  %585 = or disjoint i32 %512, 14, !dbg !71
  %586 = getelementptr float, ptr addrspace(3) %515, i32 %585, !dbg !71
  %587 = extractelement <4 x i32> %.v10, i64 2, !dbg !71
  %588 = select i1 %420, i32 %229, i32 %587, !dbg !72
  %589 = insertelement <1 x i32> poison, i32 %588, i64 0, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %586, <1 x i32> %589, i1 true) #2, !dbg !71
  %590 = or disjoint i32 %512, 15, !dbg !71
  %591 = getelementptr float, ptr addrspace(3) %515, i32 %590, !dbg !71
  %592 = extractelement <4 x i32> %.v10, i64 3, !dbg !71
  %593 = select i1 %422, i32 %230, i32 %592, !dbg !72
  %594 = insertelement <1 x i32> poison, i32 %593, i64 0, !dbg !71
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %591, <1 x i32> %594, i1 true) #2, !dbg !71
  tail call void @llvm.nvvm.barrier0(), !dbg !71
  %595 = lshr i32 %513, 6, !dbg !71
  %596 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %595, !dbg !71
  %597 = getelementptr inbounds float, ptr addrspace(3) %596, i32 %513, !dbg !71
  %598 = load i32, ptr addrspace(3) %597, align 4, !dbg !71
  %599 = or disjoint i32 %513, 256, !dbg !71
  %600 = lshr i32 %599, 6, !dbg !71
  %601 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %600, !dbg !71
  %602 = getelementptr inbounds float, ptr addrspace(3) %601, i32 %599, !dbg !71
  %603 = load i32, ptr addrspace(3) %602, align 4, !dbg !71
  %604 = or disjoint i32 %513, 512, !dbg !71
  %605 = lshr i32 %604, 6, !dbg !71
  %606 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %605, !dbg !71
  %607 = getelementptr inbounds float, ptr addrspace(3) %606, i32 %604, !dbg !71
  %608 = load i32, ptr addrspace(3) %607, align 4, !dbg !71
  %609 = or disjoint i32 %513, 768, !dbg !71
  %610 = lshr i32 %609, 6, !dbg !71
  %611 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %610, !dbg !71
  %612 = getelementptr inbounds float, ptr addrspace(3) %611, i32 %609, !dbg !71
  %613 = load i32, ptr addrspace(3) %612, align 4, !dbg !71
  %614 = or disjoint i32 %513, 1024, !dbg !71
  %615 = lshr i32 %614, 6, !dbg !71
  %616 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %615, !dbg !71
  %617 = getelementptr inbounds float, ptr addrspace(3) %616, i32 %614, !dbg !71
  %618 = load i32, ptr addrspace(3) %617, align 4, !dbg !71
  %619 = or disjoint i32 %513, 1280, !dbg !71
  %620 = lshr i32 %619, 6, !dbg !71
  %621 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %620, !dbg !71
  %622 = getelementptr inbounds float, ptr addrspace(3) %621, i32 %619, !dbg !71
  %623 = load i32, ptr addrspace(3) %622, align 4, !dbg !71
  %624 = or disjoint i32 %513, 1536, !dbg !71
  %625 = lshr i32 %624, 6, !dbg !71
  %626 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %625, !dbg !71
  %627 = getelementptr inbounds float, ptr addrspace(3) %626, i32 %624, !dbg !71
  %628 = load i32, ptr addrspace(3) %627, align 4, !dbg !71
  %629 = or disjoint i32 %513, 1792, !dbg !71
  %630 = lshr i32 %629, 6, !dbg !71
  %631 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %630, !dbg !71
  %632 = getelementptr inbounds float, ptr addrspace(3) %631, i32 %629, !dbg !71
  %633 = load i32, ptr addrspace(3) %632, align 4, !dbg !71
  %634 = or disjoint i32 %513, 2048, !dbg !71
  %635 = lshr i32 %634, 6, !dbg !71
  %636 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %635, !dbg !71
  %637 = getelementptr inbounds float, ptr addrspace(3) %636, i32 %634, !dbg !71
  %638 = load i32, ptr addrspace(3) %637, align 4, !dbg !71
  %639 = or disjoint i32 %513, 2304, !dbg !71
  %640 = lshr i32 %639, 6, !dbg !71
  %641 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %640, !dbg !71
  %642 = getelementptr inbounds float, ptr addrspace(3) %641, i32 %639, !dbg !71
  %643 = load i32, ptr addrspace(3) %642, align 4, !dbg !71
  %644 = or disjoint i32 %513, 2560, !dbg !71
  %645 = lshr i32 %644, 6, !dbg !71
  %646 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %645, !dbg !71
  %647 = getelementptr inbounds float, ptr addrspace(3) %646, i32 %644, !dbg !71
  %648 = load i32, ptr addrspace(3) %647, align 4, !dbg !71
  %649 = or disjoint i32 %513, 2816, !dbg !71
  %650 = lshr i32 %649, 6, !dbg !71
  %651 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %650, !dbg !71
  %652 = getelementptr inbounds float, ptr addrspace(3) %651, i32 %649, !dbg !71
  %653 = load i32, ptr addrspace(3) %652, align 4, !dbg !71
  %654 = or disjoint i32 %513, 3072, !dbg !71
  %655 = lshr i32 %654, 6, !dbg !71
  %656 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %655, !dbg !71
  %657 = getelementptr inbounds float, ptr addrspace(3) %656, i32 %654, !dbg !71
  %658 = load i32, ptr addrspace(3) %657, align 4, !dbg !71
  %659 = or disjoint i32 %513, 3328, !dbg !71
  %660 = lshr i32 %659, 6, !dbg !71
  %661 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %660, !dbg !71
  %662 = getelementptr inbounds float, ptr addrspace(3) %661, i32 %659, !dbg !71
  %663 = load i32, ptr addrspace(3) %662, align 4, !dbg !71
  %664 = or disjoint i32 %513, 3584, !dbg !71
  %665 = lshr i32 %664, 6, !dbg !71
  %666 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %665, !dbg !71
  %667 = getelementptr inbounds float, ptr addrspace(3) %666, i32 %664, !dbg !71
  %668 = load i32, ptr addrspace(3) %667, align 4, !dbg !71
  %669 = or disjoint i32 %513, 3840, !dbg !71
  %670 = lshr i32 %669, 6, !dbg !71
  %671 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %670, !dbg !71
  %672 = getelementptr inbounds float, ptr addrspace(3) %671, i32 %669, !dbg !71
  %673 = load i32, ptr addrspace(3) %672, align 4, !dbg !71
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %598, ptr addrspace(1) %481, i1 %102) #2, !dbg !71
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %603, ptr addrspace(1) %483, i1 %103) #2, !dbg !71
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %608, ptr addrspace(1) %485, i1 %104) #2, !dbg !71
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %613, ptr addrspace(1) %487, i1 %105) #2, !dbg !71
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %618, ptr addrspace(1) %489, i1 %106) #2, !dbg !71
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %623, ptr addrspace(1) %491, i1 %107) #2, !dbg !71
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %628, ptr addrspace(1) %493, i1 %108) #2, !dbg !71
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %633, ptr addrspace(1) %495, i1 %109) #2, !dbg !71
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %638, ptr addrspace(1) %497, i1 %110) #2, !dbg !71
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %643, ptr addrspace(1) %499, i1 %111) #2, !dbg !71
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %648, ptr addrspace(1) %501, i1 %111) #2, !dbg !71
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %653, ptr addrspace(1) %503, i1 %111) #2, !dbg !71
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %658, ptr addrspace(1) %505, i1 %111) #2, !dbg !71
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %663, ptr addrspace(1) %507, i1 %111) #2, !dbg !71
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %668, ptr addrspace(1) %509, i1 %111) #2, !dbg !71
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %673, ptr addrspace(1) %511, i1 %111) #2, !dbg !71
  ret void, !dbg !73
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cftthd4rqqr7v6ca72235iex7rj2otvgg3uag4y4rpfyrh3g33m6.py", directory: "inductor_cache/ft")
!4 = !{ptr @triton_poi_fused_max_pool2d_with_indices_12, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_max_pool2d_with_indices_12, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_max_pool2d_with_indices_12", linkageName: "triton_poi_fused_max_pool2d_with_indices_12", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 30, column: 19, scope: !7)
!21 = !DILocation(line: 29, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 19, scope: !7)
!23 = !DILocation(line: 33, column: 19, scope: !7)
!24 = !DILocation(line: 34, column: 39, scope: !7)
!25 = !DILocation(line: 34, column: 49, scope: !7)
!26 = !DILocation(line: 34, column: 35, scope: !7)
!27 = !DILocation(line: 34, column: 44, scope: !7)
!28 = !DILocation(line: 34, column: 30, scope: !7)
!29 = !DILocation(line: 34, column: 62, scope: !7)
!30 = !DILocation(line: 34, column: 54, scope: !7)
!31 = !DILocation(line: 35, column: 41, scope: !7)
!32 = !DILocation(line: 35, column: 50, scope: !7)
!33 = !DILocation(line: 35, column: 30, scope: !7)
!34 = !DILocation(line: 35, column: 60, scope: !7)
!35 = !DILocation(line: 36, column: 41, scope: !7)
!36 = !DILocation(line: 36, column: 50, scope: !7)
!37 = !DILocation(line: 36, column: 30, scope: !7)
!38 = !DILocation(line: 36, column: 60, scope: !7)
!39 = !DILocation(line: 37, column: 42, scope: !7)
!40 = !DILocation(line: 37, column: 51, scope: !7)
!41 = !DILocation(line: 37, column: 31, scope: !7)
!42 = !DILocation(line: 37, column: 61, scope: !7)
!43 = !DILocation(line: 38, column: 18, scope: !7)
!44 = !DILocation(line: 41, column: 32, scope: !7)
!45 = !DILocation(line: 120, column: 21, scope: !46, inlinedAt: !48)
!46 = distinct !DILexicalBlockFile(scope: !7, file: !47, discriminator: 0)
!47 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!48 = !DILocation(line: 42, column: 40, scope: !7)
!49 = !DILocation(line: 120, column: 16, scope: !46, inlinedAt: !48)
!50 = !DILocation(line: 121, column: 29, scope: !46, inlinedAt: !48)
!51 = !DILocation(line: 43, column: 18, scope: !7)
!52 = !DILocation(line: 45, column: 33, scope: !7)
!53 = !DILocation(line: 120, column: 21, scope: !46, inlinedAt: !54)
!54 = !DILocation(line: 46, column: 41, scope: !7)
!55 = !DILocation(line: 120, column: 16, scope: !46, inlinedAt: !54)
!56 = !DILocation(line: 121, column: 29, scope: !46, inlinedAt: !54)
!57 = !DILocation(line: 47, column: 20, scope: !7)
!58 = !DILocation(line: 49, column: 35, scope: !7)
!59 = !DILocation(line: 120, column: 21, scope: !46, inlinedAt: !60)
!60 = !DILocation(line: 50, column: 42, scope: !7)
!61 = !DILocation(line: 120, column: 16, scope: !46, inlinedAt: !60)
!62 = !DILocation(line: 51, column: 34, scope: !7)
!63 = !DILocation(line: 51, column: 30, scope: !7)
!64 = !DILocation(line: 51, column: 25, scope: !7)
!65 = !DILocation(line: 51, column: 46, scope: !7)
!66 = !DILocation(line: 52, column: 32, scope: !7)
!67 = !DILocation(line: 52, column: 30, scope: !7)
!68 = !DILocation(line: 52, column: 42, scope: !7)
!69 = !DILocation(line: 52, column: 37, scope: !7)
!70 = !DILocation(line: 52, column: 25, scope: !7)
!71 = !DILocation(line: 52, column: 54, scope: !7)
!72 = !DILocation(line: 121, column: 29, scope: !46, inlinedAt: !60)
!73 = !DILocation(line: 52, column: 4, scope: !7)
