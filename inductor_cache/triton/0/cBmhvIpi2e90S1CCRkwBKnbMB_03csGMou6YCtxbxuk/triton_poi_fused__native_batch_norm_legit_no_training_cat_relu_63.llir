; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_63(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, ptr addrspace(1) %9, ptr addrspace(1) %10, ptr addrspace(1) %11, ptr addrspace(1) %12, i32 %13) local_unnamed_addr !dbg !7 {
  %15 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %16 = shl i32 %15, 9, !dbg !11
  %17 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %18 = shl i32 %17, 1, !dbg !12
  %19 = and i32 %18, 510, !dbg !12
  %20 = or disjoint i32 %16, %19, !dbg !13
  %21 = icmp slt i32 %20, 227328, !dbg !14
  %.frozen = freeze i32 %20, !dbg !15
  %22 = sdiv i32 %.frozen, 256, !dbg !15
  %23 = srem i32 %22, 222, !dbg !16
  %24 = mul i32 %22, 256, !dbg !17
  %.decomposed = sub i32 %.frozen, %24, !dbg !17
  %.frozen17 = freeze i32 %20, !dbg !18
  %25 = sdiv i32 %.frozen17, 56832, !dbg !18
  %26 = sext i32 %23 to i64, !dbg !19
  %27 = getelementptr float, ptr addrspace(1) %7, i64 %26, !dbg !19
  %28 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 %21) #3, !dbg !20
  %29 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 %21) #3, !dbg !20
  %30 = getelementptr float, ptr addrspace(1) %8, i64 %26, !dbg !21
  %31 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 %21) #3, !dbg !22
  %32 = bitcast i32 %31 to float, !dbg !22
  %33 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %30, i1 %21) #3, !dbg !22
  %34 = bitcast i32 %33 to float, !dbg !22
  %35 = getelementptr float, ptr addrspace(1) %9, i64 %26, !dbg !23
  %36 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 %21) #3, !dbg !24
  %37 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 %21) #3, !dbg !24
  %38 = getelementptr float, ptr addrspace(1) %10, i64 %26, !dbg !25
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 %21) #3, !dbg !26
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %38, i1 %21) #3, !dbg !26
  %41 = icmp slt i32 %23, 150, !dbg !27
  %42 = mul i32 %25, 56832, !dbg !28
  %srem.decomposed = sub i32 %.frozen17, %42, !dbg !28
  %43 = mul nsw i32 %25, 38400, !dbg !29
  %44 = add nsw i32 %43, %srem.decomposed, !dbg !30
  %45 = sext i32 %44 to i64, !dbg !31
  %46 = getelementptr float, ptr addrspace(1) %0, i64 %45, !dbg !31
  %47 = and i1 %21, %41, !dbg !32
  %48 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %46, i1 %47, i32 0, i1 %47, i32 0, i1 %47) #3, !dbg !33
  %49 = add nsw i32 %23, -150, !dbg !34
  %50 = icmp ult i32 %49, 12, !dbg !34
  %51 = shl nsw i32 %23, 8, !dbg !35
  %52 = mul nsw i32 %25, 3072, !dbg !36
  %53 = add nsw i32 %52, %.decomposed, !dbg !35
  %54 = add nsw i32 %53, -38400, !dbg !37
  %55 = add nsw i32 %54, %51, !dbg !38
  %56 = sext i32 %55 to i64, !dbg !39
  %57 = getelementptr float, ptr addrspace(1) %1, i64 %56, !dbg !39
  %58 = and i1 %21, %50, !dbg !40
  %59 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %57, i1 %58, i32 0, i1 %58, i32 0, i1 %58) #3, !dbg !41
  %60 = add nsw i32 %23, -162, !dbg !42
  %61 = icmp ult i32 %60, 12, !dbg !42
  %62 = add nsw i32 %53, -41472, !dbg !43
  %63 = add nsw i32 %62, %51, !dbg !44
  %64 = sext i32 %63 to i64, !dbg !45
  %65 = getelementptr float, ptr addrspace(1) %2, i64 %64, !dbg !45
  %66 = and i1 %21, %61, !dbg !46
  %67 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %65, i1 %66, i32 0, i1 %66, i32 0, i1 %66) #3, !dbg !47
  %68 = add nsw i32 %23, -174, !dbg !48
  %69 = icmp ult i32 %68, 12, !dbg !48
  %70 = add nsw i32 %53, -44544, !dbg !49
  %71 = add nsw i32 %70, %51, !dbg !50
  %72 = sext i32 %71 to i64, !dbg !51
  %73 = getelementptr float, ptr addrspace(1) %3, i64 %72, !dbg !51
  %74 = and i1 %21, %69, !dbg !52
  %75 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %73, i1 %74, i32 0, i1 %74, i32 0, i1 %74) #3, !dbg !53
  %76 = add nsw i32 %23, -186, !dbg !54
  %77 = icmp ult i32 %76, 12, !dbg !54
  %78 = add nsw i32 %53, -47616, !dbg !55
  %79 = add nsw i32 %78, %51, !dbg !56
  %80 = sext i32 %79 to i64, !dbg !57
  %81 = getelementptr float, ptr addrspace(1) %4, i64 %80, !dbg !57
  %82 = and i1 %21, %77, !dbg !58
  %83 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %81, i1 %82, i32 0, i1 %82, i32 0, i1 %82) #3, !dbg !59
  %84 = add nsw i32 %23, -198, !dbg !60
  %85 = icmp ult i32 %84, 12, !dbg !60
  %86 = add nsw i32 %53, -50688, !dbg !61
  %87 = add nsw i32 %86, %51, !dbg !62
  %88 = sext i32 %87 to i64, !dbg !63
  %89 = getelementptr float, ptr addrspace(1) %5, i64 %88, !dbg !63
  %90 = and i1 %21, %85, !dbg !64
  %91 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %89, i1 %90, i32 0, i1 %90, i32 0, i1 %90) #3, !dbg !65
  %92 = icmp sgt i32 %23, 209, !dbg !66
  %93 = add nsw i32 %53, -53760, !dbg !67
  %94 = add nsw i32 %93, %51, !dbg !68
  %95 = sext i32 %94 to i64, !dbg !69
  %96 = getelementptr float, ptr addrspace(1) %6, i64 %95, !dbg !69
  %97 = and i1 %21, %92, !dbg !70
  %98 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];\0A\09@!$5 mov.u32 $0, $4;\0A\09@!$7 mov.u32 $1, $6;", "=r,=r,l,b,r,b,r,b"(ptr addrspace(1) %96, i1 %97, i32 0, i1 %97, i32 0, i1 %97) #3, !dbg !71
  %99 = fadd float %32, 0x3EE4F8B580000000, !dbg !72
  %100 = fadd float %34, 0x3EE4F8B580000000, !dbg !72
  %101 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !73
  %.not.i = icmp eq i32 %101, 0, !dbg !73
  %102 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !73
  %.not1.i = icmp eq i32 %102, 0, !dbg !73
  br i1 %.not.i, label %108, label %103, !dbg !73

103:                                              ; preds = %14
  br i1 %.not1.i, label %106, label %104, !dbg !73

104:                                              ; preds = %103
  %105 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %99) #3, !dbg !73
  br label %__nv_sqrtf.exit, !dbg !73

106:                                              ; preds = %103
  %107 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %99) #3, !dbg !73
  br label %__nv_sqrtf.exit, !dbg !73

108:                                              ; preds = %14
  br i1 %.not1.i, label %111, label %109, !dbg !73

109:                                              ; preds = %108
  %110 = tail call float @llvm.nvvm.sqrt.rn.f(float %99) #3, !dbg !73
  br label %__nv_sqrtf.exit, !dbg !73

111:                                              ; preds = %108
  %112 = tail call float @llvm.nvvm.sqrt.approx.f(float %99) #3, !dbg !73
  br label %__nv_sqrtf.exit, !dbg !73

__nv_sqrtf.exit:                                  ; preds = %104, %106, %109, %111
  %.0.i = phi float [ %105, %104 ], [ %107, %106 ], [ %110, %109 ], [ %112, %111 ], !dbg !73
  %113 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !73
  %.not.i12 = icmp eq i32 %113, 0, !dbg !73
  %114 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !73
  %.not1.i15 = icmp eq i32 %114, 0, !dbg !73
  br i1 %.not.i12, label %120, label %115, !dbg !73

115:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i15, label %118, label %116, !dbg !73

116:                                              ; preds = %115
  %117 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %100) #3, !dbg !73
  br label %__nv_sqrtf.exit16, !dbg !73

118:                                              ; preds = %115
  %119 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %100) #3, !dbg !73
  br label %__nv_sqrtf.exit16, !dbg !73

120:                                              ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i15, label %123, label %121, !dbg !73

121:                                              ; preds = %120
  %122 = tail call float @llvm.nvvm.sqrt.rn.f(float %100) #3, !dbg !73
  br label %__nv_sqrtf.exit16, !dbg !73

123:                                              ; preds = %120
  %124 = tail call float @llvm.nvvm.sqrt.approx.f(float %100) #3, !dbg !73
  br label %__nv_sqrtf.exit16, !dbg !73

__nv_sqrtf.exit16:                                ; preds = %116, %118, %121, %123
  %.0.i14 = phi float [ %117, %116 ], [ %119, %118 ], [ %122, %121 ], [ %124, %123 ], !dbg !73
  %125 = extractvalue { i32, i32 } %48, 1, !dbg !33
  %126 = extractvalue { i32, i32 } %59, 1, !dbg !41
  %127 = extractvalue { i32, i32 } %67, 1, !dbg !47
  %128 = extractvalue { i32, i32 } %75, 1, !dbg !53
  %129 = extractvalue { i32, i32 } %83, 1, !dbg !59
  %130 = extractvalue { i32, i32 } %91, 1, !dbg !65
  %131 = extractvalue { i32, i32 } %98, 1, !dbg !71
  %.v1 = select i1 %85, i32 %130, i32 %131, !dbg !74
  %.v3 = select i1 %77, i32 %129, i32 %.v1, !dbg !75
  %.v5 = select i1 %69, i32 %128, i32 %.v3, !dbg !76
  %.v7 = select i1 %61, i32 %127, i32 %.v5, !dbg !77
  %.v9 = select i1 %50, i32 %126, i32 %.v7, !dbg !78
  %.v11 = select i1 %41, i32 %125, i32 %.v9, !dbg !79
  %132 = bitcast i32 %.v11 to float, !dbg !79
  %133 = bitcast i32 %29 to float, !dbg !20
  %134 = fsub float %132, %133, !dbg !80
  %135 = extractvalue { i32, i32 } %48, 0, !dbg !33
  %136 = extractvalue { i32, i32 } %59, 0, !dbg !41
  %137 = extractvalue { i32, i32 } %67, 0, !dbg !47
  %138 = extractvalue { i32, i32 } %75, 0, !dbg !53
  %139 = extractvalue { i32, i32 } %83, 0, !dbg !59
  %140 = extractvalue { i32, i32 } %91, 0, !dbg !65
  %141 = extractvalue { i32, i32 } %98, 0, !dbg !71
  %.v = select i1 %85, i32 %140, i32 %141, !dbg !74
  %.v2 = select i1 %77, i32 %139, i32 %.v, !dbg !75
  %.v4 = select i1 %69, i32 %138, i32 %.v2, !dbg !76
  %.v6 = select i1 %61, i32 %137, i32 %.v4, !dbg !77
  %.v8 = select i1 %50, i32 %136, i32 %.v6, !dbg !78
  %.v10 = select i1 %41, i32 %135, i32 %.v8, !dbg !79
  %142 = bitcast i32 %.v10 to float, !dbg !79
  %143 = bitcast i32 %28 to float, !dbg !20
  %144 = fsub float %142, %143, !dbg !80
  %145 = bitcast i32 %40 to float, !dbg !26
  %146 = bitcast i32 %39 to float, !dbg !26
  %147 = bitcast i32 %37 to float, !dbg !24
  %148 = bitcast i32 %36 to float, !dbg !24
  %149 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !81
  %150 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i14) #3, !dbg !81
  %151 = fmul float %144, %149, !dbg !82
  %152 = fmul float %134, %150, !dbg !82
  %153 = fmul float %151, %148, !dbg !83
  %154 = fmul float %152, %147, !dbg !83
  %155 = fadd float %153, %146, !dbg !84
  %156 = fadd float %154, %145, !dbg !84
  %157 = fcmp olt float %155, 0.000000e+00, !dbg !85
  %158 = fcmp olt float %156, 0.000000e+00, !dbg !85
  %159 = select i1 %157, float 0.000000e+00, float %155, !dbg !89
  %160 = select i1 %158, float 0.000000e+00, float %156, !dbg !89
  %161 = sext i32 %20 to i64, !dbg !90
  %162 = getelementptr float, ptr addrspace(1) %11, i64 %161, !dbg !90
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.v10, i32 %.v11, ptr addrspace(1) %162, i1 %21) #3, !dbg !91
  %163 = getelementptr float, ptr addrspace(1) %12, i64 %161, !dbg !92
  %164 = bitcast float %159 to i32, !dbg !93
  %165 = bitcast float %160 to i32, !dbg !93
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %164, i32 %165, ptr addrspace(1) %163, i1 %21) #3, !dbg !93
  ret void, !dbg !94
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "celpptthg6ez27wc3oycnreqokr5h7eoknnr2k6bh6odpromn3nq.py", directory: "inductor_cache/el")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_63, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_63, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_63", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_63", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 21, scope: !7)
!16 = !DILocation(line: 24, column: 28, scope: !7)
!17 = !DILocation(line: 25, column: 19, scope: !7)
!18 = !DILocation(line: 26, column: 19, scope: !7)
!19 = !DILocation(line: 28, column: 31, scope: !7)
!20 = !DILocation(line: 28, column: 36, scope: !7)
!21 = !DILocation(line: 29, column: 31, scope: !7)
!22 = !DILocation(line: 29, column: 36, scope: !7)
!23 = !DILocation(line: 30, column: 31, scope: !7)
!24 = !DILocation(line: 30, column: 36, scope: !7)
!25 = !DILocation(line: 31, column: 32, scope: !7)
!26 = !DILocation(line: 31, column: 37, scope: !7)
!27 = !DILocation(line: 36, column: 18, scope: !7)
!28 = !DILocation(line: 37, column: 35, scope: !7)
!29 = !DILocation(line: 37, column: 52, scope: !7)
!30 = !DILocation(line: 37, column: 46, scope: !7)
!31 = !DILocation(line: 37, column: 30, scope: !7)
!32 = !DILocation(line: 37, column: 64, scope: !7)
!33 = !DILocation(line: 37, column: 57, scope: !7)
!34 = !DILocation(line: 41, column: 18, scope: !7)
!35 = !DILocation(line: 42, column: 41, scope: !7)
!36 = !DILocation(line: 42, column: 61, scope: !7)
!37 = !DILocation(line: 42, column: 36, scope: !7)
!38 = !DILocation(line: 42, column: 56, scope: !7)
!39 = !DILocation(line: 42, column: 31, scope: !7)
!40 = !DILocation(line: 42, column: 73, scope: !7)
!41 = !DILocation(line: 42, column: 66, scope: !7)
!42 = !DILocation(line: 46, column: 20, scope: !7)
!43 = !DILocation(line: 47, column: 36, scope: !7)
!44 = !DILocation(line: 47, column: 56, scope: !7)
!45 = !DILocation(line: 47, column: 31, scope: !7)
!46 = !DILocation(line: 47, column: 74, scope: !7)
!47 = !DILocation(line: 47, column: 66, scope: !7)
!48 = !DILocation(line: 51, column: 20, scope: !7)
!49 = !DILocation(line: 52, column: 36, scope: !7)
!50 = !DILocation(line: 52, column: 56, scope: !7)
!51 = !DILocation(line: 52, column: 31, scope: !7)
!52 = !DILocation(line: 52, column: 74, scope: !7)
!53 = !DILocation(line: 52, column: 66, scope: !7)
!54 = !DILocation(line: 56, column: 20, scope: !7)
!55 = !DILocation(line: 57, column: 36, scope: !7)
!56 = !DILocation(line: 57, column: 56, scope: !7)
!57 = !DILocation(line: 57, column: 31, scope: !7)
!58 = !DILocation(line: 57, column: 74, scope: !7)
!59 = !DILocation(line: 57, column: 66, scope: !7)
!60 = !DILocation(line: 61, column: 20, scope: !7)
!61 = !DILocation(line: 62, column: 36, scope: !7)
!62 = !DILocation(line: 62, column: 56, scope: !7)
!63 = !DILocation(line: 62, column: 31, scope: !7)
!64 = !DILocation(line: 62, column: 74, scope: !7)
!65 = !DILocation(line: 62, column: 66, scope: !7)
!66 = !DILocation(line: 63, column: 20, scope: !7)
!67 = !DILocation(line: 66, column: 36, scope: !7)
!68 = !DILocation(line: 66, column: 56, scope: !7)
!69 = !DILocation(line: 66, column: 31, scope: !7)
!70 = !DILocation(line: 66, column: 74, scope: !7)
!71 = !DILocation(line: 66, column: 66, scope: !7)
!72 = !DILocation(line: 75, column: 20, scope: !7)
!73 = !DILocation(line: 76, column: 27, scope: !7)
!74 = !DILocation(line: 67, column: 35, scope: !7)
!75 = !DILocation(line: 68, column: 35, scope: !7)
!76 = !DILocation(line: 69, column: 35, scope: !7)
!77 = !DILocation(line: 70, column: 35, scope: !7)
!78 = !DILocation(line: 71, column: 34, scope: !7)
!79 = !DILocation(line: 72, column: 33, scope: !7)
!80 = !DILocation(line: 73, column: 20, scope: !7)
!81 = !DILocation(line: 78, column: 20, scope: !7)
!82 = !DILocation(line: 81, column: 20, scope: !7)
!83 = !DILocation(line: 82, column: 20, scope: !7)
!84 = !DILocation(line: 83, column: 20, scope: !7)
!85 = !DILocation(line: 118, column: 15, scope: !86, inlinedAt: !88)
!86 = distinct !DILexicalBlockFile(scope: !7, file: !87, discriminator: 0)
!87 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!88 = !DILocation(line: 85, column: 42, scope: !7)
!89 = !DILocation(line: 121, column: 29, scope: !86, inlinedAt: !88)
!90 = !DILocation(line: 86, column: 25, scope: !7)
!91 = !DILocation(line: 86, column: 37, scope: !7)
!92 = !DILocation(line: 87, column: 25, scope: !7)
!93 = !DILocation(line: 87, column: 37, scope: !7)
!94 = !DILocation(line: 87, column: 4, scope: !7)
