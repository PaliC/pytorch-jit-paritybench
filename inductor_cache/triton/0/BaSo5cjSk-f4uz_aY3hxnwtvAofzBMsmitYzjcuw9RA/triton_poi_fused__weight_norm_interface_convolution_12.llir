; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused__weight_norm_interface_convolution_12(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %9 = shl i32 %8, 8, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 2, !dbg !12
  %12 = and i32 %11, 252, !dbg !12
  %13 = and i32 %10, 15, !dbg !12
  %14 = and i32 %10, 255, !dbg !12
  %15 = lshr i32 %10, 4, !dbg !12
  %16 = and i32 %15, 15, !dbg !12
  %17 = or disjoint i32 %16, 16, !dbg !12
  %18 = or disjoint i32 %16, 32, !dbg !12
  %19 = or disjoint i32 %16, 48, !dbg !12
  %20 = or disjoint i32 %16, 64, !dbg !12
  %21 = or disjoint i32 %16, 80, !dbg !12
  %22 = or disjoint i32 %16, 96, !dbg !12
  %23 = or disjoint i32 %16, 112, !dbg !12
  %24 = or disjoint i32 %16, 128, !dbg !12
  %25 = or disjoint i32 %16, 144, !dbg !12
  %26 = or disjoint i32 %16, 160, !dbg !12
  %27 = or disjoint i32 %16, 176, !dbg !12
  %28 = or disjoint i32 %16, 192, !dbg !12
  %29 = or disjoint i32 %16, 208, !dbg !12
  %30 = or disjoint i32 %16, 224, !dbg !12
  %31 = or disjoint i32 %16, 240, !dbg !12
  %32 = or disjoint i32 %9, %12, !dbg !13
  %33 = or disjoint i32 %9, %14, !dbg !13
  %34 = or disjoint i32 %9, %16, !dbg !13
  %35 = or disjoint i32 %9, %17, !dbg !13
  %36 = or disjoint i32 %9, %18, !dbg !13
  %37 = or disjoint i32 %9, %19, !dbg !13
  %38 = or disjoint i32 %9, %20, !dbg !13
  %39 = or disjoint i32 %9, %21, !dbg !13
  %40 = or disjoint i32 %9, %22, !dbg !13
  %41 = or disjoint i32 %9, %23, !dbg !13
  %42 = or disjoint i32 %9, %24, !dbg !13
  %43 = or disjoint i32 %9, %25, !dbg !13
  %44 = or disjoint i32 %9, %26, !dbg !13
  %45 = or disjoint i32 %9, %27, !dbg !13
  %46 = or disjoint i32 %9, %28, !dbg !13
  %47 = or disjoint i32 %9, %29, !dbg !13
  %48 = or disjoint i32 %9, %30, !dbg !13
  %49 = or disjoint i32 %9, %31, !dbg !13
  %50 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %51 = shl i32 %50, 4, !dbg !15
  %52 = lshr i32 %10, 6, !dbg !16
  %53 = and i32 %52, 3, !dbg !16
  %54 = or disjoint i32 %51, %53, !dbg !17
  %55 = or disjoint i32 %54, 4, !dbg !17
  %56 = or disjoint i32 %54, 8, !dbg !17
  %57 = or disjoint i32 %54, 12, !dbg !17
  %58 = or disjoint i32 %51, %13, !dbg !17
  %59 = icmp slt i32 %54, 25, !dbg !18
  %60 = icmp slt i32 %55, 25, !dbg !18
  %61 = icmp slt i32 %56, 25, !dbg !18
  %62 = icmp slt i32 %57, 25, !dbg !18
  %63 = icmp slt i32 %58, 25, !dbg !18
  %.frozen = freeze i32 %32, !dbg !19
  %64 = sdiv i32 %.frozen, 32, !dbg !19
  %65 = mul i32 %64, 32, !dbg !20
  %.decomposed = sub i32 %.frozen, %65, !dbg !20
  %66 = sdiv i32 %33, 32, !dbg !19
  %67 = shl i32 %54, 5, !dbg !21
  %68 = shl i32 %55, 5, !dbg !21
  %69 = shl i32 %56, 5, !dbg !21
  %70 = shl i32 %57, 5, !dbg !21
  %71 = mul i32 %64, 800, !dbg !22
  %72 = add i32 %71, %.decomposed, !dbg !23
  %73 = add i32 %72, %67, !dbg !24
  %74 = add i32 %72, %68, !dbg !24
  %75 = add i32 %72, %69, !dbg !24
  %76 = add i32 %72, %70, !dbg !24
  %77 = sext i32 %73 to i64, !dbg !25
  %78 = getelementptr float, ptr addrspace(1) %0, i64 %77, !dbg !25
  %79 = sext i32 %74 to i64, !dbg !25
  %80 = getelementptr float, ptr addrspace(1) %0, i64 %79, !dbg !25
  %81 = sext i32 %75 to i64, !dbg !25
  %82 = getelementptr float, ptr addrspace(1) %0, i64 %81, !dbg !25
  %83 = sext i32 %76 to i64, !dbg !25
  %84 = getelementptr float, ptr addrspace(1) %0, i64 %83, !dbg !25
  %85 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %78, i1 %59) #2, !dbg !26
  %86 = extractvalue { i32, i32, i32, i32 } %85, 0, !dbg !26
  %87 = extractvalue { i32, i32, i32, i32 } %85, 1, !dbg !26
  %88 = extractvalue { i32, i32, i32, i32 } %85, 2, !dbg !26
  %89 = extractvalue { i32, i32, i32, i32 } %85, 3, !dbg !26
  %90 = bitcast i32 %86 to float, !dbg !26
  %91 = bitcast i32 %87 to float, !dbg !26
  %92 = bitcast i32 %88 to float, !dbg !26
  %93 = bitcast i32 %89 to float, !dbg !26
  %94 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %80, i1 %60) #2, !dbg !26
  %95 = extractvalue { i32, i32, i32, i32 } %94, 0, !dbg !26
  %96 = extractvalue { i32, i32, i32, i32 } %94, 1, !dbg !26
  %97 = extractvalue { i32, i32, i32, i32 } %94, 2, !dbg !26
  %98 = extractvalue { i32, i32, i32, i32 } %94, 3, !dbg !26
  %99 = bitcast i32 %95 to float, !dbg !26
  %100 = bitcast i32 %96 to float, !dbg !26
  %101 = bitcast i32 %97 to float, !dbg !26
  %102 = bitcast i32 %98 to float, !dbg !26
  %103 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %82, i1 %61) #2, !dbg !26
  %104 = extractvalue { i32, i32, i32, i32 } %103, 0, !dbg !26
  %105 = extractvalue { i32, i32, i32, i32 } %103, 1, !dbg !26
  %106 = extractvalue { i32, i32, i32, i32 } %103, 2, !dbg !26
  %107 = extractvalue { i32, i32, i32, i32 } %103, 3, !dbg !26
  %108 = bitcast i32 %104 to float, !dbg !26
  %109 = bitcast i32 %105 to float, !dbg !26
  %110 = bitcast i32 %106 to float, !dbg !26
  %111 = bitcast i32 %107 to float, !dbg !26
  %112 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %84, i1 %62) #2, !dbg !26
  %113 = extractvalue { i32, i32, i32, i32 } %112, 0, !dbg !26
  %114 = extractvalue { i32, i32, i32, i32 } %112, 1, !dbg !26
  %115 = extractvalue { i32, i32, i32, i32 } %112, 2, !dbg !26
  %116 = extractvalue { i32, i32, i32, i32 } %112, 3, !dbg !26
  %117 = bitcast i32 %113 to float, !dbg !26
  %118 = bitcast i32 %114 to float, !dbg !26
  %119 = bitcast i32 %115 to float, !dbg !26
  %120 = bitcast i32 %116 to float, !dbg !26
  %121 = shl i32 %10, 6, !dbg !26
  %122 = and i32 %121, 4032, !dbg !26
  %123 = or disjoint i32 %122, %53, !dbg !26
  %124 = lshr exact i32 %122, 2, !dbg !26
  %125 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %124, !dbg !26
  %126 = getelementptr float, ptr addrspace(3) %125, i32 %123, !dbg !26
  %127 = insertelement <1 x i32> poison, i32 %86, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %126, <1 x i32> %127, i1 true) #2, !dbg !26
  %128 = or disjoint i32 %123, 16, !dbg !26
  %129 = lshr i32 %128, 4, !dbg !26
  %130 = getelementptr float, ptr addrspace(3) @global_smem, i32 %129, !dbg !26
  %131 = getelementptr float, ptr addrspace(3) %130, i32 %128, !dbg !26
  %132 = insertelement <1 x i32> poison, i32 %87, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %131, <1 x i32> %132, i1 true) #2, !dbg !26
  %133 = or disjoint i32 %123, 32, !dbg !26
  %134 = lshr i32 %133, 4, !dbg !26
  %135 = getelementptr float, ptr addrspace(3) @global_smem, i32 %134, !dbg !26
  %136 = getelementptr float, ptr addrspace(3) %135, i32 %133, !dbg !26
  %137 = insertelement <1 x i32> poison, i32 %88, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %136, <1 x i32> %137, i1 true) #2, !dbg !26
  %138 = or disjoint i32 %123, 48, !dbg !26
  %139 = lshr i32 %138, 4, !dbg !26
  %140 = getelementptr float, ptr addrspace(3) @global_smem, i32 %139, !dbg !26
  %141 = getelementptr float, ptr addrspace(3) %140, i32 %138, !dbg !26
  %142 = insertelement <1 x i32> poison, i32 %89, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %141, <1 x i32> %142, i1 true) #2, !dbg !26
  %143 = or disjoint i32 %123, 4, !dbg !26
  %144 = getelementptr float, ptr addrspace(3) %125, i32 %143, !dbg !26
  %145 = insertelement <1 x i32> poison, i32 %95, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %144, <1 x i32> %145, i1 true) #2, !dbg !26
  %146 = or disjoint i32 %123, 20, !dbg !26
  %147 = lshr i32 %146, 4, !dbg !26
  %148 = getelementptr float, ptr addrspace(3) @global_smem, i32 %147, !dbg !26
  %149 = getelementptr float, ptr addrspace(3) %148, i32 %146, !dbg !26
  %150 = insertelement <1 x i32> poison, i32 %96, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %149, <1 x i32> %150, i1 true) #2, !dbg !26
  %151 = or disjoint i32 %123, 36, !dbg !26
  %152 = lshr i32 %151, 4, !dbg !26
  %153 = getelementptr float, ptr addrspace(3) @global_smem, i32 %152, !dbg !26
  %154 = getelementptr float, ptr addrspace(3) %153, i32 %151, !dbg !26
  %155 = insertelement <1 x i32> poison, i32 %97, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %154, <1 x i32> %155, i1 true) #2, !dbg !26
  %156 = or disjoint i32 %123, 52, !dbg !26
  %157 = lshr i32 %156, 4, !dbg !26
  %158 = getelementptr float, ptr addrspace(3) @global_smem, i32 %157, !dbg !26
  %159 = getelementptr float, ptr addrspace(3) %158, i32 %156, !dbg !26
  %160 = insertelement <1 x i32> poison, i32 %98, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %159, <1 x i32> %160, i1 true) #2, !dbg !26
  %161 = or disjoint i32 %123, 8, !dbg !26
  %162 = getelementptr float, ptr addrspace(3) %125, i32 %161, !dbg !26
  %163 = insertelement <1 x i32> poison, i32 %104, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %162, <1 x i32> %163, i1 true) #2, !dbg !26
  %164 = or disjoint i32 %123, 24, !dbg !26
  %165 = lshr i32 %164, 4, !dbg !26
  %166 = getelementptr float, ptr addrspace(3) @global_smem, i32 %165, !dbg !26
  %167 = getelementptr float, ptr addrspace(3) %166, i32 %164, !dbg !26
  %168 = insertelement <1 x i32> poison, i32 %105, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %167, <1 x i32> %168, i1 true) #2, !dbg !26
  %169 = or disjoint i32 %123, 40, !dbg !26
  %170 = lshr i32 %169, 4, !dbg !26
  %171 = getelementptr float, ptr addrspace(3) @global_smem, i32 %170, !dbg !26
  %172 = getelementptr float, ptr addrspace(3) %171, i32 %169, !dbg !26
  %173 = insertelement <1 x i32> poison, i32 %106, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %172, <1 x i32> %173, i1 true) #2, !dbg !26
  %174 = or disjoint i32 %123, 56, !dbg !26
  %175 = lshr i32 %174, 4, !dbg !26
  %176 = getelementptr float, ptr addrspace(3) @global_smem, i32 %175, !dbg !26
  %177 = getelementptr float, ptr addrspace(3) %176, i32 %174, !dbg !26
  %178 = insertelement <1 x i32> poison, i32 %107, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %177, <1 x i32> %178, i1 true) #2, !dbg !26
  %179 = or disjoint i32 %123, 12, !dbg !26
  %180 = getelementptr float, ptr addrspace(3) %125, i32 %179, !dbg !26
  %181 = insertelement <1 x i32> poison, i32 %113, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %180, <1 x i32> %181, i1 true) #2, !dbg !26
  %182 = or disjoint i32 %123, 28, !dbg !26
  %183 = lshr i32 %182, 4, !dbg !26
  %184 = getelementptr float, ptr addrspace(3) @global_smem, i32 %183, !dbg !26
  %185 = getelementptr float, ptr addrspace(3) %184, i32 %182, !dbg !26
  %186 = insertelement <1 x i32> poison, i32 %114, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %185, <1 x i32> %186, i1 true) #2, !dbg !26
  %187 = or disjoint i32 %123, 44, !dbg !26
  %188 = lshr i32 %187, 4, !dbg !26
  %189 = getelementptr float, ptr addrspace(3) @global_smem, i32 %188, !dbg !26
  %190 = getelementptr float, ptr addrspace(3) %189, i32 %187, !dbg !26
  %191 = insertelement <1 x i32> poison, i32 %115, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %190, <1 x i32> %191, i1 true) #2, !dbg !26
  %192 = or disjoint i32 %123, 60, !dbg !26
  %193 = lshr i32 %192, 4, !dbg !26
  %194 = getelementptr float, ptr addrspace(3) @global_smem, i32 %193, !dbg !26
  %195 = getelementptr float, ptr addrspace(3) %194, i32 %192, !dbg !26
  %196 = insertelement <1 x i32> poison, i32 %116, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %195, <1 x i32> %196, i1 true) #2, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %197 = lshr i32 %14, 4, !dbg !26
  %198 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %197, !dbg !26
  %199 = getelementptr inbounds float, ptr addrspace(3) %198, i32 %14, !dbg !26
  %200 = load float, ptr addrspace(3) %199, align 4, !dbg !26
  %201 = or disjoint i32 %14, 256, !dbg !26
  %202 = lshr i32 %201, 4, !dbg !26
  %203 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %202, !dbg !26
  %204 = getelementptr inbounds float, ptr addrspace(3) %203, i32 %201, !dbg !26
  %205 = load float, ptr addrspace(3) %204, align 4, !dbg !26
  %206 = or disjoint i32 %14, 512, !dbg !26
  %207 = lshr i32 %206, 4, !dbg !26
  %208 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %207, !dbg !26
  %209 = getelementptr inbounds float, ptr addrspace(3) %208, i32 %206, !dbg !26
  %210 = load float, ptr addrspace(3) %209, align 4, !dbg !26
  %211 = or disjoint i32 %14, 768, !dbg !26
  %212 = lshr i32 %211, 4, !dbg !26
  %213 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %212, !dbg !26
  %214 = getelementptr inbounds float, ptr addrspace(3) %213, i32 %211, !dbg !26
  %215 = load float, ptr addrspace(3) %214, align 4, !dbg !26
  %216 = or disjoint i32 %14, 1024, !dbg !26
  %217 = lshr i32 %216, 4, !dbg !26
  %218 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %217, !dbg !26
  %219 = getelementptr inbounds float, ptr addrspace(3) %218, i32 %216, !dbg !26
  %220 = load float, ptr addrspace(3) %219, align 4, !dbg !26
  %221 = or disjoint i32 %14, 1280, !dbg !26
  %222 = lshr i32 %221, 4, !dbg !26
  %223 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %222, !dbg !26
  %224 = getelementptr inbounds float, ptr addrspace(3) %223, i32 %221, !dbg !26
  %225 = load float, ptr addrspace(3) %224, align 4, !dbg !26
  %226 = or disjoint i32 %14, 1536, !dbg !26
  %227 = lshr i32 %226, 4, !dbg !26
  %228 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %227, !dbg !26
  %229 = getelementptr inbounds float, ptr addrspace(3) %228, i32 %226, !dbg !26
  %230 = load float, ptr addrspace(3) %229, align 4, !dbg !26
  %231 = or disjoint i32 %14, 1792, !dbg !26
  %232 = lshr i32 %231, 4, !dbg !26
  %233 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %232, !dbg !26
  %234 = getelementptr inbounds float, ptr addrspace(3) %233, i32 %231, !dbg !26
  %235 = load float, ptr addrspace(3) %234, align 4, !dbg !26
  %236 = or disjoint i32 %14, 2048, !dbg !26
  %237 = lshr i32 %236, 4, !dbg !26
  %238 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %237, !dbg !26
  %239 = getelementptr inbounds float, ptr addrspace(3) %238, i32 %236, !dbg !26
  %240 = load float, ptr addrspace(3) %239, align 4, !dbg !26
  %241 = or disjoint i32 %14, 2304, !dbg !26
  %242 = lshr i32 %241, 4, !dbg !26
  %243 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %242, !dbg !26
  %244 = getelementptr inbounds float, ptr addrspace(3) %243, i32 %241, !dbg !26
  %245 = load float, ptr addrspace(3) %244, align 4, !dbg !26
  %246 = or disjoint i32 %14, 2560, !dbg !26
  %247 = lshr i32 %246, 4, !dbg !26
  %248 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %247, !dbg !26
  %249 = getelementptr inbounds float, ptr addrspace(3) %248, i32 %246, !dbg !26
  %250 = load float, ptr addrspace(3) %249, align 4, !dbg !26
  %251 = or disjoint i32 %14, 2816, !dbg !26
  %252 = lshr i32 %251, 4, !dbg !26
  %253 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %252, !dbg !26
  %254 = getelementptr inbounds float, ptr addrspace(3) %253, i32 %251, !dbg !26
  %255 = load float, ptr addrspace(3) %254, align 4, !dbg !26
  %256 = or disjoint i32 %14, 3072, !dbg !26
  %257 = lshr i32 %256, 4, !dbg !26
  %258 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %257, !dbg !26
  %259 = getelementptr inbounds float, ptr addrspace(3) %258, i32 %256, !dbg !26
  %260 = load float, ptr addrspace(3) %259, align 4, !dbg !26
  %261 = or disjoint i32 %14, 3328, !dbg !26
  %262 = lshr i32 %261, 4, !dbg !26
  %263 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %262, !dbg !26
  %264 = getelementptr inbounds float, ptr addrspace(3) %263, i32 %261, !dbg !26
  %265 = load float, ptr addrspace(3) %264, align 4, !dbg !26
  %266 = or disjoint i32 %14, 3584, !dbg !26
  %267 = lshr i32 %266, 4, !dbg !26
  %268 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %267, !dbg !26
  %269 = getelementptr inbounds float, ptr addrspace(3) %268, i32 %266, !dbg !26
  %270 = load float, ptr addrspace(3) %269, align 4, !dbg !26
  %271 = or disjoint i32 %14, 3840, !dbg !26
  %272 = lshr i32 %271, 4, !dbg !26
  %273 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %272, !dbg !26
  %274 = getelementptr inbounds float, ptr addrspace(3) %273, i32 %271, !dbg !26
  %275 = load float, ptr addrspace(3) %274, align 4, !dbg !26
  %276 = sext i32 %66 to i64, !dbg !27
  %277 = getelementptr float, ptr addrspace(1) %1, i64 %276, !dbg !27
  %278 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %277, i1 true) #2, !dbg !28
  %279 = bitcast i32 %278 to float, !dbg !28
  %280 = getelementptr float, ptr addrspace(1) %2, i64 %276, !dbg !29
  %281 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %280, i1 true) #2, !dbg !30
  %282 = bitcast i32 %281 to float, !dbg !30
  %283 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %279, float %282) #2, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %.idx = shl nuw nsw i32 %14, 3, !dbg !32
  %284 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !32
  %285 = bitcast float %283 to <1 x i32>, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %284, <1 x i32> %285, i1 true) #2, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %.idx3 = shl nuw nsw i32 %16, 3, !dbg !32
  %286 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx3, !dbg !32
  %287 = load float, ptr addrspace(3) %286, align 8, !dbg !32
  %.idx4 = shl nuw nsw i32 %17, 3, !dbg !32
  %288 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx4, !dbg !32
  %289 = load float, ptr addrspace(3) %288, align 8, !dbg !32
  %.idx5 = shl nuw nsw i32 %18, 3, !dbg !32
  %290 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx5, !dbg !32
  %291 = load float, ptr addrspace(3) %290, align 8, !dbg !32
  %.idx6 = shl nuw nsw i32 %19, 3, !dbg !32
  %292 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx6, !dbg !32
  %293 = load float, ptr addrspace(3) %292, align 8, !dbg !32
  %.idx7 = shl nuw nsw i32 %20, 3, !dbg !32
  %294 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx7, !dbg !32
  %295 = load float, ptr addrspace(3) %294, align 8, !dbg !32
  %.idx8 = shl nuw nsw i32 %21, 3, !dbg !32
  %296 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx8, !dbg !32
  %297 = load float, ptr addrspace(3) %296, align 8, !dbg !32
  %.idx9 = shl nuw nsw i32 %22, 3, !dbg !32
  %298 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx9, !dbg !32
  %299 = load float, ptr addrspace(3) %298, align 8, !dbg !32
  %.idx10 = shl nuw nsw i32 %23, 3, !dbg !32
  %300 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx10, !dbg !32
  %301 = load float, ptr addrspace(3) %300, align 8, !dbg !32
  %.idx11 = shl nuw nsw i32 %24, 3, !dbg !32
  %302 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx11, !dbg !32
  %303 = load float, ptr addrspace(3) %302, align 8, !dbg !32
  %.idx12 = shl nuw nsw i32 %25, 3, !dbg !32
  %304 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx12, !dbg !32
  %305 = load float, ptr addrspace(3) %304, align 8, !dbg !32
  %.idx13 = shl nuw nsw i32 %26, 3, !dbg !32
  %306 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx13, !dbg !32
  %307 = load float, ptr addrspace(3) %306, align 8, !dbg !32
  %.idx14 = shl nuw nsw i32 %27, 3, !dbg !32
  %308 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx14, !dbg !32
  %309 = load float, ptr addrspace(3) %308, align 8, !dbg !32
  %.idx15 = shl nuw nsw i32 %28, 3, !dbg !32
  %310 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx15, !dbg !32
  %311 = load float, ptr addrspace(3) %310, align 8, !dbg !32
  %.idx16 = shl nuw nsw i32 %29, 3, !dbg !32
  %312 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx16, !dbg !32
  %313 = load float, ptr addrspace(3) %312, align 8, !dbg !32
  %.idx17 = shl nuw nsw i32 %30, 3, !dbg !32
  %314 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx17, !dbg !32
  %315 = load float, ptr addrspace(3) %314, align 8, !dbg !32
  %.idx18 = shl nuw nsw i32 %31, 3, !dbg !32
  %316 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx18, !dbg !32
  %317 = load float, ptr addrspace(3) %316, align 8, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %318 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !32
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %318, <1 x i32> %285, i1 true) #2, !dbg !32
  tail call void @llvm.nvvm.barrier0(), !dbg !32
  %319 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !32
  %320 = load float, ptr addrspace(3) %319, align 16, !dbg !32
  %321 = getelementptr inbounds i8, ptr addrspace(3) %319, i32 4, !dbg !32
  %322 = load float, ptr addrspace(3) %321, align 4, !dbg !32
  %323 = getelementptr inbounds i8, ptr addrspace(3) %319, i32 8, !dbg !32
  %324 = load float, ptr addrspace(3) %323, align 8, !dbg !32
  %325 = getelementptr inbounds i8, ptr addrspace(3) %319, i32 12, !dbg !32
  %326 = load float, ptr addrspace(3) %325, align 4, !dbg !32
  %327 = fmul float %200, %287, !dbg !32
  %328 = fmul float %205, %289, !dbg !32
  %329 = fmul float %210, %291, !dbg !32
  %330 = fmul float %215, %293, !dbg !32
  %331 = fmul float %220, %295, !dbg !32
  %332 = fmul float %225, %297, !dbg !32
  %333 = fmul float %230, %299, !dbg !32
  %334 = fmul float %235, %301, !dbg !32
  %335 = fmul float %240, %303, !dbg !32
  %336 = fmul float %245, %305, !dbg !32
  %337 = fmul float %250, %307, !dbg !32
  %338 = fmul float %255, %309, !dbg !32
  %339 = fmul float %260, %311, !dbg !32
  %340 = fmul float %265, %313, !dbg !32
  %341 = fmul float %270, %315, !dbg !32
  %342 = fmul float %275, %317, !dbg !32
  %343 = fmul float %320, %90, !dbg !32
  %344 = fmul float %322, %91, !dbg !32
  %345 = fmul float %324, %92, !dbg !32
  %346 = fmul float %326, %93, !dbg !32
  %347 = fmul float %320, %99, !dbg !32
  %348 = fmul float %322, %100, !dbg !32
  %349 = fmul float %324, %101, !dbg !32
  %350 = fmul float %326, %102, !dbg !32
  %351 = fmul float %320, %108, !dbg !32
  %352 = fmul float %322, %109, !dbg !32
  %353 = fmul float %324, %110, !dbg !32
  %354 = fmul float %326, %111, !dbg !32
  %355 = fmul float %320, %117, !dbg !32
  %356 = fmul float %322, %118, !dbg !32
  %357 = fmul float %324, %119, !dbg !32
  %358 = fmul float %326, %120, !dbg !32
  %359 = mul i32 %34, 25, !dbg !33
  %360 = mul i32 %35, 25, !dbg !33
  %361 = mul i32 %36, 25, !dbg !33
  %362 = mul i32 %37, 25, !dbg !33
  %363 = mul i32 %38, 25, !dbg !33
  %364 = mul i32 %39, 25, !dbg !33
  %365 = mul i32 %40, 25, !dbg !33
  %366 = mul i32 %41, 25, !dbg !33
  %367 = mul i32 %42, 25, !dbg !33
  %368 = mul i32 %43, 25, !dbg !33
  %369 = mul i32 %44, 25, !dbg !33
  %370 = mul i32 %45, 25, !dbg !33
  %371 = mul i32 %46, 25, !dbg !33
  %372 = mul i32 %47, 25, !dbg !33
  %373 = mul i32 %48, 25, !dbg !33
  %374 = mul i32 %49, 25, !dbg !33
  %375 = add i32 %58, %359, !dbg !34
  %376 = add i32 %58, %360, !dbg !34
  %377 = add i32 %58, %361, !dbg !34
  %378 = add i32 %58, %362, !dbg !34
  %379 = add i32 %58, %363, !dbg !34
  %380 = add i32 %58, %364, !dbg !34
  %381 = add i32 %58, %365, !dbg !34
  %382 = add i32 %58, %366, !dbg !34
  %383 = add i32 %58, %367, !dbg !34
  %384 = add i32 %58, %368, !dbg !34
  %385 = add i32 %58, %369, !dbg !34
  %386 = add i32 %58, %370, !dbg !34
  %387 = add i32 %58, %371, !dbg !34
  %388 = add i32 %58, %372, !dbg !34
  %389 = add i32 %58, %373, !dbg !34
  %390 = add i32 %58, %374, !dbg !34
  %391 = sext i32 %375 to i64, !dbg !35
  %392 = getelementptr float, ptr addrspace(1) %3, i64 %391, !dbg !35
  %393 = sext i32 %376 to i64, !dbg !35
  %394 = getelementptr float, ptr addrspace(1) %3, i64 %393, !dbg !35
  %395 = sext i32 %377 to i64, !dbg !35
  %396 = getelementptr float, ptr addrspace(1) %3, i64 %395, !dbg !35
  %397 = sext i32 %378 to i64, !dbg !35
  %398 = getelementptr float, ptr addrspace(1) %3, i64 %397, !dbg !35
  %399 = sext i32 %379 to i64, !dbg !35
  %400 = getelementptr float, ptr addrspace(1) %3, i64 %399, !dbg !35
  %401 = sext i32 %380 to i64, !dbg !35
  %402 = getelementptr float, ptr addrspace(1) %3, i64 %401, !dbg !35
  %403 = sext i32 %381 to i64, !dbg !35
  %404 = getelementptr float, ptr addrspace(1) %3, i64 %403, !dbg !35
  %405 = sext i32 %382 to i64, !dbg !35
  %406 = getelementptr float, ptr addrspace(1) %3, i64 %405, !dbg !35
  %407 = sext i32 %383 to i64, !dbg !35
  %408 = getelementptr float, ptr addrspace(1) %3, i64 %407, !dbg !35
  %409 = sext i32 %384 to i64, !dbg !35
  %410 = getelementptr float, ptr addrspace(1) %3, i64 %409, !dbg !35
  %411 = sext i32 %385 to i64, !dbg !35
  %412 = getelementptr float, ptr addrspace(1) %3, i64 %411, !dbg !35
  %413 = sext i32 %386 to i64, !dbg !35
  %414 = getelementptr float, ptr addrspace(1) %3, i64 %413, !dbg !35
  %415 = sext i32 %387 to i64, !dbg !35
  %416 = getelementptr float, ptr addrspace(1) %3, i64 %415, !dbg !35
  %417 = sext i32 %388 to i64, !dbg !35
  %418 = getelementptr float, ptr addrspace(1) %3, i64 %417, !dbg !35
  %419 = sext i32 %389 to i64, !dbg !35
  %420 = getelementptr float, ptr addrspace(1) %3, i64 %419, !dbg !35
  %421 = sext i32 %390 to i64, !dbg !35
  %422 = getelementptr float, ptr addrspace(1) %3, i64 %421, !dbg !35
  %423 = bitcast float %327 to i32, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %423, ptr addrspace(1) %392, i1 %63) #2, !dbg !36
  %424 = bitcast float %328 to i32, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %424, ptr addrspace(1) %394, i1 %63) #2, !dbg !36
  %425 = bitcast float %329 to i32, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %425, ptr addrspace(1) %396, i1 %63) #2, !dbg !36
  %426 = bitcast float %330 to i32, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %426, ptr addrspace(1) %398, i1 %63) #2, !dbg !36
  %427 = bitcast float %331 to i32, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %427, ptr addrspace(1) %400, i1 %63) #2, !dbg !36
  %428 = bitcast float %332 to i32, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %428, ptr addrspace(1) %402, i1 %63) #2, !dbg !36
  %429 = bitcast float %333 to i32, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %429, ptr addrspace(1) %404, i1 %63) #2, !dbg !36
  %430 = bitcast float %334 to i32, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %430, ptr addrspace(1) %406, i1 %63) #2, !dbg !36
  %431 = bitcast float %335 to i32, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %431, ptr addrspace(1) %408, i1 %63) #2, !dbg !36
  %432 = bitcast float %336 to i32, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %432, ptr addrspace(1) %410, i1 %63) #2, !dbg !36
  %433 = bitcast float %337 to i32, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %433, ptr addrspace(1) %412, i1 %63) #2, !dbg !36
  %434 = bitcast float %338 to i32, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %434, ptr addrspace(1) %414, i1 %63) #2, !dbg !36
  %435 = bitcast float %339 to i32, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %435, ptr addrspace(1) %416, i1 %63) #2, !dbg !36
  %436 = bitcast float %340 to i32, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %436, ptr addrspace(1) %418, i1 %63) #2, !dbg !36
  %437 = bitcast float %341 to i32, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %437, ptr addrspace(1) %420, i1 %63) #2, !dbg !36
  %438 = bitcast float %342 to i32, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %438, ptr addrspace(1) %422, i1 %63) #2, !dbg !36
  %439 = getelementptr float, ptr addrspace(1) %4, i64 %77, !dbg !37
  %440 = getelementptr float, ptr addrspace(1) %4, i64 %79, !dbg !37
  %441 = getelementptr float, ptr addrspace(1) %4, i64 %81, !dbg !37
  %442 = getelementptr float, ptr addrspace(1) %4, i64 %83, !dbg !37
  %443 = bitcast float %343 to i32, !dbg !38
  %444 = bitcast float %344 to i32, !dbg !38
  %445 = bitcast float %345 to i32, !dbg !38
  %446 = bitcast float %346 to i32, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %443, i32 %444, i32 %445, i32 %446, ptr addrspace(1) %439, i1 %59) #2, !dbg !38
  %447 = bitcast float %347 to i32, !dbg !38
  %448 = bitcast float %348 to i32, !dbg !38
  %449 = bitcast float %349 to i32, !dbg !38
  %450 = bitcast float %350 to i32, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %447, i32 %448, i32 %449, i32 %450, ptr addrspace(1) %440, i1 %60) #2, !dbg !38
  %451 = bitcast float %351 to i32, !dbg !38
  %452 = bitcast float %352 to i32, !dbg !38
  %453 = bitcast float %353 to i32, !dbg !38
  %454 = bitcast float %354 to i32, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %451, i32 %452, i32 %453, i32 %454, ptr addrspace(1) %441, i1 %61) #2, !dbg !38
  %455 = bitcast float %355 to i32, !dbg !38
  %456 = bitcast float %356 to i32, !dbg !38
  %457 = bitcast float %357 to i32, !dbg !38
  %458 = bitcast float %358 to i32, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %455, i32 %456, i32 %457, i32 %458, ptr addrspace(1) %442, i1 %62) #2, !dbg !38
  ret void, !dbg !39
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cvabjcmx2fnyssnrkwoxdno5qyrldudxdrc2j65lfoqt7yxr6vyy.py", directory: "inductor_cache/va")
!4 = !{ptr @triton_poi_fused__weight_norm_interface_convolution_12, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__weight_norm_interface_convolution_12, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__weight_norm_interface_convolution_12", linkageName: "triton_poi_fused__weight_norm_interface_convolution_12", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 44, scope: !7)
!17 = !DILocation(line: 26, column: 23, scope: !7)
!18 = !DILocation(line: 27, column: 21, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 29, column: 19, scope: !7)
!21 = !DILocation(line: 32, column: 38, scope: !7)
!22 = !DILocation(line: 32, column: 47, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 43, scope: !7)
!25 = !DILocation(line: 32, column: 30, scope: !7)
!26 = !DILocation(line: 32, column: 52, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 33, column: 35, scope: !7)
!29 = !DILocation(line: 34, column: 30, scope: !7)
!30 = !DILocation(line: 34, column: 35, scope: !7)
!31 = !DILocation(line: 35, column: 18, scope: !7)
!32 = !DILocation(line: 36, column: 18, scope: !7)
!33 = !DILocation(line: 37, column: 33, scope: !7)
!34 = !DILocation(line: 37, column: 30, scope: !7)
!35 = !DILocation(line: 37, column: 25, scope: !7)
!36 = !DILocation(line: 37, column: 44, scope: !7)
!37 = !DILocation(line: 38, column: 25, scope: !7)
!38 = !DILocation(line: 38, column: 53, scope: !7)
!39 = !DILocation(line: 38, column: 4, scope: !7)
