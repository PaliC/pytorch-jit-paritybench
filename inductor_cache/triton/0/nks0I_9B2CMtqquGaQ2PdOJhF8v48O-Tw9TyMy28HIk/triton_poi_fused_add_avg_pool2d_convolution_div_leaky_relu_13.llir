; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_add_avg_pool2d_convolution_div_leaky_relu_13(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %8 = shl i32 %7, 9, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = shl i32 %9, 1, !dbg !12
  %11 = and i32 %10, 510, !dbg !12
  %12 = or disjoint i32 %8, %11, !dbg !13
  %.frozen = freeze i32 %12, !dbg !14
  %13 = sdiv i32 %.frozen, 128, !dbg !14
  %14 = mul i32 %13, 128, !dbg !15
  %.decomposed = sub i32 %.frozen, %14, !dbg !15
  %15 = srem i32 %13, 128, !dbg !16
  %16 = sdiv i32 %12, 16384, !dbg !17
  %17 = shl nsw i32 %15, 8, !dbg !18
  %18 = shl i32 %16, 16, !dbg !19
  %19 = add i32 %18, %.decomposed, !dbg !20
  %20 = add i32 %19, %17, !dbg !21
  %21 = sext i32 %20 to i64, !dbg !22
  %22 = getelementptr float, ptr addrspace(1) %1, i64 %21, !dbg !22
  %23 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %22, i1 true) #1, !dbg !23
  %24 = extractvalue { i32, i32 } %23, 0, !dbg !23
  %25 = extractvalue { i32, i32 } %23, 1, !dbg !23
  %26 = add i32 %19, 128, !dbg !24
  %27 = add i32 %26, %17, !dbg !25
  %28 = sext i32 %27 to i64, !dbg !26
  %29 = getelementptr float, ptr addrspace(1) %1, i64 %28, !dbg !26
  %30 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %29, i1 true) #1, !dbg !27
  %31 = extractvalue { i32, i32 } %30, 0, !dbg !27
  %32 = extractvalue { i32, i32 } %30, 1, !dbg !27
  %33 = add i32 %19, 32768, !dbg !28
  %34 = add i32 %33, %17, !dbg !29
  %35 = sext i32 %34 to i64, !dbg !30
  %36 = getelementptr float, ptr addrspace(1) %1, i64 %35, !dbg !30
  %37 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %36, i1 true) #1, !dbg !31
  %38 = extractvalue { i32, i32 } %37, 0, !dbg !31
  %39 = extractvalue { i32, i32 } %37, 1, !dbg !31
  %40 = add i32 %19, 32896, !dbg !32
  %41 = add i32 %40, %17, !dbg !33
  %42 = sext i32 %41 to i64, !dbg !34
  %43 = getelementptr float, ptr addrspace(1) %1, i64 %42, !dbg !34
  %44 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %43, i1 true) #1, !dbg !35
  %45 = extractvalue { i32, i32 } %44, 0, !dbg !35
  %46 = extractvalue { i32, i32 } %44, 1, !dbg !35
  %47 = sext i32 %12 to i64, !dbg !36
  %48 = getelementptr float, ptr addrspace(1) %0, i64 %47, !dbg !36
  %49 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %48, i1 true) #1, !dbg !37
  %50 = extractvalue { i32, i32 } %49, 0, !dbg !37
  %51 = extractvalue { i32, i32 } %49, 1, !dbg !37
  %52 = sext i32 %.decomposed to i64, !dbg !38
  %53 = getelementptr float, ptr addrspace(1) %2, i64 %52, !dbg !38
  %54 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %53, i1 true) #1, !dbg !39
  %55 = extractvalue { i32, i32 } %54, 0, !dbg !39
  %56 = extractvalue { i32, i32 } %54, 1, !dbg !39
  %57 = getelementptr i1, ptr addrspace(1) %3, i64 %47, !dbg !40
  %58 = insertelement <2 x i32> poison, i32 %24, i64 0, !dbg !23
  %59 = insertelement <2 x i32> %58, i32 %25, i64 1, !dbg !23
  %60 = bitcast <2 x i32> %59 to <2 x float>, !dbg !23
  %61 = insertelement <2 x i32> poison, i32 %31, i64 0, !dbg !27
  %62 = insertelement <2 x i32> %61, i32 %32, i64 1, !dbg !27
  %63 = bitcast <2 x i32> %62 to <2 x float>, !dbg !27
  %64 = insertelement <2 x i32> poison, i32 %38, i64 0, !dbg !31
  %65 = insertelement <2 x i32> %64, i32 %39, i64 1, !dbg !31
  %66 = bitcast <2 x i32> %65 to <2 x float>, !dbg !31
  %67 = insertelement <2 x i32> poison, i32 %45, i64 0, !dbg !35
  %68 = insertelement <2 x i32> %67, i32 %46, i64 1, !dbg !35
  %69 = bitcast <2 x i32> %68 to <2 x float>, !dbg !35
  %70 = insertelement <2 x i32> poison, i32 %50, i64 0, !dbg !37
  %71 = insertelement <2 x i32> %70, i32 %51, i64 1, !dbg !37
  %72 = bitcast <2 x i32> %71 to <2 x float>, !dbg !37
  %73 = insertelement <2 x i32> poison, i32 %55, i64 0, !dbg !39
  %74 = insertelement <2 x i32> %73, i32 %56, i64 1, !dbg !39
  %75 = bitcast <2 x i32> %74 to <2 x float>, !dbg !39
  %76 = fadd <2 x float> %60, %63, !dbg !41
  %77 = fadd <2 x float> %76, %66, !dbg !42
  %78 = fadd <2 x float> %77, %69, !dbg !43
  %79 = fmul <2 x float> %78, splat (float 2.500000e-01), !dbg !44
  %80 = fadd <2 x float> %72, %75, !dbg !45
  %81 = fadd <2 x float> %79, %80, !dbg !46
  %82 = fmul <2 x float> %81, splat (float 0x3FE6A09E60000000), !dbg !47
  %83 = fcmp ogt <2 x float> %82, zeroinitializer, !dbg !48
  %84 = extractelement <2 x float> %82, i64 0, !dbg !49
  %85 = fmul float %84, 0x3FC99999A0000000, !dbg !50
  %86 = extractelement <2 x float> %82, i64 1, !dbg !49
  %87 = fmul float %86, 0x3FC99999A0000000, !dbg !50
  %88 = extractelement <2 x i1> %83, i64 0, !dbg !51
  %89 = select i1 %88, float %84, float %85, !dbg !51
  %90 = extractelement <2 x i1> %83, i64 1, !dbg !51
  %91 = select i1 %90, float %86, float %87, !dbg !51
  %92 = bitcast float %84 to i32, !dbg !49
  %93 = bitcast float %86 to i32, !dbg !49
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %92, i32 %93, ptr addrspace(1) %48, i1 true) #1, !dbg !49
  %94 = zext <2 x i1> %83 to <2 x i8>, !dbg !52
  %95 = bitcast <2 x i8> %94 to i16, !dbg !52
  tail call void asm sideeffect "@$2 st.global.b16 [ $1 + 0 ], { $0 };", "c,l,b"(i16 %95, ptr addrspace(1) %57, i1 true) #1, !dbg !52
  %96 = getelementptr float, ptr addrspace(1) %4, i64 %47, !dbg !53
  %97 = bitcast float %89 to i32, !dbg !54
  %98 = bitcast float %91 to i32, !dbg !54
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %97, i32 %98, ptr addrspace(1) %96, i1 true) #1, !dbg !54
  ret void, !dbg !55
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ch6hlhswdu7yrhjedhkub2ly6hscxtohcnrwb57ebl4vmyuyxpxr.py", directory: "inductor_cache/h6")
!4 = !{ptr @triton_poi_fused_add_avg_pool2d_convolution_div_leaky_relu_13, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_avg_pool2d_convolution_div_leaky_relu_13, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_avg_pool2d_convolution_div_leaky_relu_13", linkageName: "triton_poi_fused_add_avg_pool2d_convolution_div_leaky_relu_13", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 25, column: 28, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 39, scope: !7)
!19 = !DILocation(line: 28, column: 50, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 28, column: 44, scope: !7)
!22 = !DILocation(line: 28, column: 30, scope: !7)
!23 = !DILocation(line: 28, column: 55, scope: !7)
!24 = !DILocation(line: 29, column: 41, scope: !7)
!25 = !DILocation(line: 29, column: 50, scope: !7)
!26 = !DILocation(line: 29, column: 30, scope: !7)
!27 = !DILocation(line: 29, column: 61, scope: !7)
!28 = !DILocation(line: 30, column: 43, scope: !7)
!29 = !DILocation(line: 30, column: 52, scope: !7)
!30 = !DILocation(line: 30, column: 30, scope: !7)
!31 = !DILocation(line: 30, column: 63, scope: !7)
!32 = !DILocation(line: 31, column: 43, scope: !7)
!33 = !DILocation(line: 31, column: 52, scope: !7)
!34 = !DILocation(line: 31, column: 30, scope: !7)
!35 = !DILocation(line: 31, column: 63, scope: !7)
!36 = !DILocation(line: 32, column: 34, scope: !7)
!37 = !DILocation(line: 32, column: 39, scope: !7)
!38 = !DILocation(line: 33, column: 31, scope: !7)
!39 = !DILocation(line: 33, column: 36, scope: !7)
!40 = !DILocation(line: 49, column: 25, scope: !7)
!41 = !DILocation(line: 34, column: 18, scope: !7)
!42 = !DILocation(line: 35, column: 18, scope: !7)
!43 = !DILocation(line: 36, column: 18, scope: !7)
!44 = !DILocation(line: 38, column: 18, scope: !7)
!45 = !DILocation(line: 39, column: 19, scope: !7)
!46 = !DILocation(line: 40, column: 19, scope: !7)
!47 = !DILocation(line: 42, column: 20, scope: !7)
!48 = !DILocation(line: 44, column: 20, scope: !7)
!49 = !DILocation(line: 48, column: 40, scope: !7)
!50 = !DILocation(line: 46, column: 20, scope: !7)
!51 = !DILocation(line: 47, column: 35, scope: !7)
!52 = !DILocation(line: 49, column: 37, scope: !7)
!53 = !DILocation(line: 50, column: 25, scope: !7)
!54 = !DILocation(line: 50, column: 37, scope: !7)
!55 = !DILocation(line: 50, column: 4, scope: !7)
