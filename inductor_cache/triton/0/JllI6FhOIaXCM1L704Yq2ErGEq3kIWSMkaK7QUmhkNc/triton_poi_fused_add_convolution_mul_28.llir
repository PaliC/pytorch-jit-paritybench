; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_add_convolution_mul_28(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, i32 %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %12 = shl i32 %11, 8, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = and i32 %13, 127, !dbg !12
  %15 = or disjoint i32 %14, 128, !dbg !12
  %16 = shl i32 %13, 1, !dbg !12
  %17 = and i32 %16, 254, !dbg !12
  %18 = or disjoint i32 %12, %14, !dbg !13
  %19 = or disjoint i32 %12, %15, !dbg !13
  %20 = or disjoint i32 %12, %17, !dbg !13
  %21 = icmp slt i32 %18, 256, !dbg !14
  %22 = icmp slt i32 %19, 256, !dbg !14
  %23 = icmp slt i32 %20, 256, !dbg !14
  %24 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %25 = icmp slt i32 %24, 128, !dbg !16
  %.frozen = freeze i32 %20, !dbg !17
  %26 = sdiv i32 %.frozen, 64, !dbg !17
  %27 = mul i32 %26, 64, !dbg !18
  %.decomposed = sub i32 %.frozen, %27, !dbg !18
  %28 = shl i32 %18, 7, !dbg !19
  %29 = shl i32 %19, 7, !dbg !19
  %30 = add i32 %28, %24, !dbg !20
  %31 = add i32 %29, %24, !dbg !20
  %32 = sext i32 %30 to i64, !dbg !21
  %33 = getelementptr float, ptr addrspace(1) %0, i64 %32, !dbg !21
  %34 = sext i32 %31 to i64, !dbg !21
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !21
  %36 = and i1 %25, %21, !dbg !22
  %37 = and i1 %25, %22, !dbg !22
  %38 = and i1 %25, %23, !dbg !22
  %39 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %33, i1 %36) #2, !dbg !23
  %40 = bitcast i32 %39 to float, !dbg !23
  %41 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 %37) #2, !dbg !23
  %42 = bitcast i32 %41 to float, !dbg !23
  %43 = sext i32 %24 to i64, !dbg !24
  %44 = getelementptr float, ptr addrspace(1) %1, i64 %43, !dbg !24
  %45 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %44, i1 %25) #2, !dbg !25
  %46 = bitcast i32 %45 to float, !dbg !25
  %47 = getelementptr float, ptr addrspace(1) %2, i64 %43, !dbg !26
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %47, i1 %25) #2, !dbg !27
  %49 = bitcast i32 %48 to float, !dbg !27
  %50 = getelementptr float, ptr addrspace(1) %3, i64 %32, !dbg !28
  %51 = getelementptr float, ptr addrspace(1) %3, i64 %34, !dbg !28
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %50, i1 %36) #2, !dbg !29
  %53 = bitcast i32 %52 to float, !dbg !29
  %54 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 %37) #2, !dbg !29
  %55 = bitcast i32 %54 to float, !dbg !29
  %56 = getelementptr float, ptr addrspace(1) %4, i64 %43, !dbg !30
  %57 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %56, i1 %25) #2, !dbg !31
  %58 = bitcast i32 %57 to float, !dbg !31
  %59 = getelementptr float, ptr addrspace(1) %5, i64 %43, !dbg !32
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %59, i1 %25) #2, !dbg !33
  %61 = bitcast i32 %60 to float, !dbg !33
  %62 = getelementptr float, ptr addrspace(1) %6, i64 %43, !dbg !34
  %63 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %62, i1 %25) #2, !dbg !35
  %64 = bitcast i32 %63 to float, !dbg !35
  %65 = fadd float %40, %46, !dbg !36
  %66 = fadd float %42, %46, !dbg !36
  %67 = fmul float %49, %53, !dbg !37
  %68 = fmul float %49, %55, !dbg !37
  %69 = fadd float %67, %58, !dbg !38
  %70 = fadd float %68, %58, !dbg !38
  %71 = fmul float %65, %61, !dbg !39
  %72 = fmul float %66, %61, !dbg !39
  %73 = fadd float %71, %64, !dbg !40
  %74 = fadd float %72, %64, !dbg !40
  %75 = fadd float %69, %73, !dbg !41
  %76 = fadd float %70, %74, !dbg !41
  tail call void @llvm.nvvm.barrier0(), !dbg !42
  %77 = bitcast float %65 to i32, !dbg !43
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %77, ptr addrspace(1) %33, i1 %36) #2, !dbg !43
  %78 = bitcast float %66 to i32, !dbg !43
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %78, ptr addrspace(1) %35, i1 %37) #2, !dbg !43
  %79 = shl i32 %24, 6, !dbg !44
  %80 = add i32 %.decomposed, %79, !dbg !45
  %81 = shl i32 %26, 13, !dbg !46
  %82 = add i32 %80, %81, !dbg !47
  %83 = sext i32 %82 to i64, !dbg !48
  %84 = getelementptr float, ptr addrspace(1) %7, i64 %83, !dbg !48
  %85 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %14, !dbg !49
  %86 = bitcast float %75 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %85, <1 x i32> %86, i1 true) #2, !dbg !49
  %87 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %15, !dbg !49
  %88 = bitcast float %76 to <1 x i32>, !dbg !49
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %87, <1 x i32> %88, i1 true) #2, !dbg !49
  tail call void @llvm.nvvm.barrier0(), !dbg !49
  %89 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %17, !dbg !49
  %.extract = load i32, ptr addrspace(3) %89, align 8, !dbg !49
  %90 = getelementptr inbounds i8, ptr addrspace(3) %89, i32 4, !dbg !49
  %.extract2 = load i32, ptr addrspace(3) %90, align 4, !dbg !49
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %.extract, i32 %.extract2, ptr addrspace(1) %84, i1 %38) #2, !dbg !49
  ret void, !dbg !50
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cs36y472frnonxyw4lrbkwgfgldej4xipv4regdyjhur36y6u55z.py", directory: "inductor_cache/s3")
!4 = !{ptr @triton_poi_fused_add_convolution_mul_28, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_convolution_mul_28, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_convolution_mul_28", linkageName: "triton_poi_fused_add_convolution_mul_28", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 27, column: 21, scope: !7)
!17 = !DILocation(line: 31, column: 19, scope: !7)
!18 = !DILocation(line: 30, column: 19, scope: !7)
!19 = !DILocation(line: 32, column: 43, scope: !7)
!20 = !DILocation(line: 32, column: 39, scope: !7)
!21 = !DILocation(line: 32, column: 34, scope: !7)
!22 = !DILocation(line: 32, column: 56, scope: !7)
!23 = !DILocation(line: 32, column: 48, scope: !7)
!24 = !DILocation(line: 33, column: 30, scope: !7)
!25 = !DILocation(line: 33, column: 35, scope: !7)
!26 = !DILocation(line: 34, column: 30, scope: !7)
!27 = !DILocation(line: 34, column: 35, scope: !7)
!28 = !DILocation(line: 35, column: 30, scope: !7)
!29 = !DILocation(line: 35, column: 44, scope: !7)
!30 = !DILocation(line: 36, column: 30, scope: !7)
!31 = !DILocation(line: 36, column: 35, scope: !7)
!32 = !DILocation(line: 37, column: 30, scope: !7)
!33 = !DILocation(line: 37, column: 35, scope: !7)
!34 = !DILocation(line: 38, column: 31, scope: !7)
!35 = !DILocation(line: 38, column: 36, scope: !7)
!36 = !DILocation(line: 39, column: 18, scope: !7)
!37 = !DILocation(line: 40, column: 18, scope: !7)
!38 = !DILocation(line: 41, column: 18, scope: !7)
!39 = !DILocation(line: 42, column: 18, scope: !7)
!40 = !DILocation(line: 43, column: 19, scope: !7)
!41 = !DILocation(line: 44, column: 19, scope: !7)
!42 = !DILocation(line: 45, column: 4, scope: !7)
!43 = !DILocation(line: 46, column: 48, scope: !7)
!44 = !DILocation(line: 47, column: 33, scope: !7)
!45 = !DILocation(line: 47, column: 30, scope: !7)
!46 = !DILocation(line: 47, column: 43, scope: !7)
!47 = !DILocation(line: 47, column: 38, scope: !7)
!48 = !DILocation(line: 47, column: 25, scope: !7)
!49 = !DILocation(line: 47, column: 55, scope: !7)
!50 = !DILocation(line: 47, column: 4, scope: !7)
