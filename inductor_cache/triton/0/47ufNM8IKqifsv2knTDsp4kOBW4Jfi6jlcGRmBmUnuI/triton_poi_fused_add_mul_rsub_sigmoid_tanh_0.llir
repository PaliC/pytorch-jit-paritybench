; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1

define void @triton_poi_fused_add_mul_rsub_sigmoid_tanh_0(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %12 = shl i32 %11, 8, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = shl i32 %13, 1, !dbg !12
  %15 = and i32 %14, 254, !dbg !12
  %16 = or disjoint i32 %12, %15, !dbg !13
  %17 = icmp slt i32 %16, 256, !dbg !14
  %18 = srem i32 %16, 4, !dbg !15
  %19 = srem i32 %16, 16, !dbg !16
  %20 = sdiv i32 %16, 64, !dbg !17
  %21 = sext i32 %16 to i64, !dbg !18
  %22 = getelementptr float, ptr addrspace(1) %0, i64 %21, !dbg !18
  %23 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %22, i1 %17) #3, !dbg !19
  %24 = extractvalue { i32, i32 } %23, 0, !dbg !19
  %25 = extractvalue { i32, i32 } %23, 1, !dbg !19
  %26 = bitcast i32 %25 to float, !dbg !19
  %27 = sext i32 %18 to i64, !dbg !20
  %28 = getelementptr float, ptr addrspace(1) %1, i64 %27, !dbg !20
  %29 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %28, i1 %17) #3, !dbg !21
  %30 = extractvalue { i32, i32 } %29, 0, !dbg !21
  %31 = extractvalue { i32, i32 } %29, 1, !dbg !21
  %32 = bitcast i32 %31 to float, !dbg !21
  %33 = getelementptr float, ptr addrspace(1) %2, i64 %21, !dbg !22
  %34 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %33, i1 %17) #3, !dbg !23
  %35 = extractvalue { i32, i32 } %34, 0, !dbg !23
  %36 = extractvalue { i32, i32 } %34, 1, !dbg !23
  %37 = bitcast i32 %36 to float, !dbg !23
  %38 = getelementptr float, ptr addrspace(1) %3, i64 %27, !dbg !24
  %39 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %38, i1 %17) #3, !dbg !25
  %40 = extractvalue { i32, i32 } %39, 0, !dbg !25
  %41 = extractvalue { i32, i32 } %39, 1, !dbg !25
  %42 = bitcast i32 %41 to float, !dbg !25
  %43 = shl nsw i32 %20, 4, !dbg !26
  %44 = add nsw i32 %43, %19, !dbg !27
  %45 = sext i32 %44 to i64, !dbg !28
  %46 = getelementptr float, ptr addrspace(1) %4, i64 %45, !dbg !28
  %47 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %46, i1 %17) #3, !dbg !29
  %48 = getelementptr float, ptr addrspace(1) %5, i64 %21, !dbg !30
  %49 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %48, i1 %17) #3, !dbg !31
  %50 = extractvalue { i32, i32 } %49, 0, !dbg !31
  %51 = extractvalue { i32, i32 } %49, 1, !dbg !31
  %52 = bitcast i32 %50 to float, !dbg !31
  %53 = bitcast i32 %51 to float, !dbg !31
  %54 = getelementptr float, ptr addrspace(1) %6, i64 %21, !dbg !32
  %55 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %54, i1 %17) #3, !dbg !33
  %56 = extractvalue { i32, i32 } %55, 0, !dbg !33
  %57 = extractvalue { i32, i32 } %55, 1, !dbg !33
  %58 = bitcast i32 %56 to float, !dbg !33
  %59 = bitcast i32 %57 to float, !dbg !33
  %60 = getelementptr float, ptr addrspace(1) %7, i64 %21, !dbg !34
  %61 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %60, i1 %17) #3, !dbg !35
  %62 = fadd float %26, %32, !dbg !36
  %63 = insertelement <2 x i32> poison, i32 %24, i64 0, !dbg !19
  %64 = insertelement <2 x i32> %63, i32 %35, i64 1, !dbg !19
  %65 = bitcast <2 x i32> %64 to <2 x float>, !dbg !19
  %66 = insertelement <2 x i32> poison, i32 %30, i64 0, !dbg !21
  %67 = insertelement <2 x i32> %66, i32 %40, i64 1, !dbg !21
  %68 = bitcast <2 x i32> %67 to <2 x float>, !dbg !21
  %69 = fadd <2 x float> %65, %68, !dbg !36
  %70 = fadd float %37, %42, !dbg !37
  %shift = shufflevector <2 x float> %69, <2 x float> poison, <2 x i32> <i32 1, i32 poison>, !dbg !38
  %71 = fadd <2 x float> %69, %shift, !dbg !38
  %72 = extractelement <2 x float> %71, i64 0, !dbg !38
  %73 = fadd float %62, %70, !dbg !38
  %74 = fsub float 0.000000e+00, %72, !dbg !39
  %75 = fsub float 0.000000e+00, %73, !dbg !39
  %76 = fmul float %74, 0x3FF7154760000000, !dbg !43
  %77 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %76) #3, !dbg !43
  %78 = fmul float %75, 0x3FF7154760000000, !dbg !43
  %79 = tail call float asm "ex2.approx.f32 $0, $1;", "=f,f"(float %78) #3, !dbg !43
  %80 = fadd float %77, 1.000000e+00, !dbg !44
  %81 = fadd float %79, 1.000000e+00, !dbg !44
  %82 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %80) #3, !dbg !45
  %83 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %81) #3, !dbg !45
  %84 = fmul float %82, %58, !dbg !46
  %85 = fmul float %83, %59, !dbg !46
  %86 = fadd float %84, %52, !dbg !47
  %87 = fadd float %85, %53, !dbg !47
  %88 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !48
  %.not.i = icmp eq i32 %88, 0, !dbg !48
  %89 = tail call float @llvm.nvvm.fabs.ftz.f(float %86) #3, !dbg !48
  %90 = tail call float @llvm.nvvm.fabs.f(float %86) #3, !dbg !48
  %.01.i = select i1 %.not.i, float %90, float %89, !dbg !48
  %91 = fcmp ult float %.01.i, 0x3FE3333340000000, !dbg !48
  br i1 %91, label %__internal_fmad.exit3.i, label %__internal_fmad.exit1.i, !dbg !48

__internal_fmad.exit1.i:                          ; preds = %10
  %92 = fmul float %.01.i, 0x4007154760000000, !dbg !48
  %93 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %92) #3, !dbg !48
  %94 = fadd float %93, 1.000000e+00, !dbg !48
  %95 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %94) #4, !dbg !48, !srcloc !49
  %96 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !48
  %.not6.i = icmp eq i32 %96, 0, !dbg !48
  %97 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %95, float -2.000000e+00, float 1.000000e+00) #3, !dbg !48
  %98 = tail call float @llvm.nvvm.fma.rn.f(float %95, float -2.000000e+00, float 1.000000e+00) #3, !dbg !48
  %.03.i = select i1 %.not6.i, float %98, float %97, !dbg !48
  %99 = fcmp oge float %.01.i, 0x4022059680000000, !dbg !48
  %s.0.i = select i1 %99, float 1.000000e+00, float %.03.i, !dbg !48
  %100 = bitcast float %s.0.i to i32, !dbg !48
  %101 = bitcast float %86 to i32, !dbg !48
  %102 = and i32 %101, -2147483648, !dbg !48
  %103 = or i32 %102, %100, !dbg !48
  %104 = bitcast i32 %103 to float, !dbg !48
  br label %__nv_tanhf.exit, !dbg !48

__internal_fmad.exit3.i:                          ; preds = %10
  %105 = fmul float %86, %86, !dbg !48
  %106 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !48
  %.not1.i = icmp eq i32 %106, 0, !dbg !48
  %107 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %105, float 0xBFAAC795C0000000) #3, !dbg !48
  %108 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %105, float 0xBFAAC795C0000000) #3, !dbg !48
  %.06.i = select i1 %.not1.i, float %108, float %107, !dbg !48
  %109 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !48
  %.not2.i = icmp eq i32 %109, 0, !dbg !48
  %110 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i, float %105, float 0x3FC10B2820000000) #3, !dbg !48
  %111 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i, float %105, float 0x3FC10B2820000000) #3, !dbg !48
  %.05.i = select i1 %.not2.i, float %111, float %110, !dbg !48
  %112 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !48
  %.not3.i = icmp eq i32 %112, 0, !dbg !48
  %113 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i, float %105, float 0xBFD5553DA0000000) #3, !dbg !48
  %114 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i, float %105, float 0xBFD5553DA0000000) #3, !dbg !48
  %.0.i = select i1 %.not3.i, float %114, float %113, !dbg !48
  %115 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !48
  %.not4.i = icmp eq i32 %115, 0, !dbg !48
  %116 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i, float %105, float 0.000000e+00) #3, !dbg !48
  %117 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i, float %105, float 0.000000e+00) #3, !dbg !48
  %.04.i = select i1 %.not4.i, float %117, float %116, !dbg !48
  %118 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !48
  %.not5.i = icmp eq i32 %118, 0, !dbg !48
  %119 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i, float %86, float %86) #3, !dbg !48
  %120 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i, float %86, float %86) #3, !dbg !48
  %.02.i = select i1 %.not5.i, float %120, float %119, !dbg !48
  br label %__nv_tanhf.exit, !dbg !48

__nv_tanhf.exit:                                  ; preds = %__internal_fmad.exit1.i, %__internal_fmad.exit3.i
  %s.1.i = phi float [ %104, %__internal_fmad.exit1.i ], [ %.02.i, %__internal_fmad.exit3.i ], !dbg !48
  %121 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !48
  %.not.i1 = icmp eq i32 %121, 0, !dbg !48
  %122 = tail call float @llvm.nvvm.fabs.ftz.f(float %87) #3, !dbg !48
  %123 = tail call float @llvm.nvvm.fabs.f(float %87) #3, !dbg !48
  %.01.i2 = select i1 %.not.i1, float %123, float %122, !dbg !48
  %124 = fcmp ult float %.01.i2, 0x3FE3333340000000, !dbg !48
  br i1 %124, label %__internal_fmad.exit3.i8, label %__internal_fmad.exit1.i3, !dbg !48

__internal_fmad.exit1.i3:                         ; preds = %__nv_tanhf.exit
  %125 = fmul float %.01.i2, 0x4007154760000000, !dbg !48
  %126 = tail call float @llvm.nvvm.ex2.approx.ftz.f(float %125) #3, !dbg !48
  %127 = fadd float %126, 1.000000e+00, !dbg !48
  %128 = tail call float asm "rcp.approx.ftz.f32 $0,$1;", "=f,f"(float %127) #4, !dbg !48, !srcloc !49
  %129 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !48
  %.not6.i4 = icmp eq i32 %129, 0, !dbg !48
  %130 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %128, float -2.000000e+00, float 1.000000e+00) #3, !dbg !48
  %131 = tail call float @llvm.nvvm.fma.rn.f(float %128, float -2.000000e+00, float 1.000000e+00) #3, !dbg !48
  %.03.i5 = select i1 %.not6.i4, float %131, float %130, !dbg !48
  %132 = fcmp oge float %.01.i2, 0x4022059680000000, !dbg !48
  %s.0.i6 = select i1 %132, float 1.000000e+00, float %.03.i5, !dbg !48
  %133 = bitcast float %s.0.i6 to i32, !dbg !48
  %134 = bitcast float %87 to i32, !dbg !48
  %135 = and i32 %134, -2147483648, !dbg !48
  %136 = or i32 %135, %133, !dbg !48
  %137 = bitcast i32 %136 to float, !dbg !48
  br label %__nv_tanhf.exit19, !dbg !48

__internal_fmad.exit3.i8:                         ; preds = %__nv_tanhf.exit
  %138 = fmul float %87, %87, !dbg !48
  %139 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !48
  %.not1.i9 = icmp eq i32 %139, 0, !dbg !48
  %140 = tail call float @llvm.nvvm.fma.rn.ftz.f(float 0x3F901E1040000000, float %138, float 0xBFAAC795C0000000) #3, !dbg !48
  %141 = tail call float @llvm.nvvm.fma.rn.f(float 0x3F901E1040000000, float %138, float 0xBFAAC795C0000000) #3, !dbg !48
  %.06.i10 = select i1 %.not1.i9, float %141, float %140, !dbg !48
  %142 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !48
  %.not2.i11 = icmp eq i32 %142, 0, !dbg !48
  %143 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.06.i10, float %138, float 0x3FC10B2820000000) #3, !dbg !48
  %144 = tail call float @llvm.nvvm.fma.rn.f(float %.06.i10, float %138, float 0x3FC10B2820000000) #3, !dbg !48
  %.05.i12 = select i1 %.not2.i11, float %144, float %143, !dbg !48
  %145 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !48
  %.not3.i13 = icmp eq i32 %145, 0, !dbg !48
  %146 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.05.i12, float %138, float 0xBFD5553DA0000000) #3, !dbg !48
  %147 = tail call float @llvm.nvvm.fma.rn.f(float %.05.i12, float %138, float 0xBFD5553DA0000000) #3, !dbg !48
  %.0.i14 = select i1 %.not3.i13, float %147, float %146, !dbg !48
  %148 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !48
  %.not4.i15 = icmp eq i32 %148, 0, !dbg !48
  %149 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.0.i14, float %138, float 0.000000e+00) #3, !dbg !48
  %150 = tail call float @llvm.nvvm.fma.rn.f(float %.0.i14, float %138, float 0.000000e+00) #3, !dbg !48
  %.04.i16 = select i1 %.not4.i15, float %150, float %149, !dbg !48
  %151 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !48
  %.not5.i17 = icmp eq i32 %151, 0, !dbg !48
  %152 = tail call float @llvm.nvvm.fma.rn.ftz.f(float %.04.i16, float %87, float %87) #3, !dbg !48
  %153 = tail call float @llvm.nvvm.fma.rn.f(float %.04.i16, float %87, float %87) #3, !dbg !48
  %.02.i18 = select i1 %.not5.i17, float %153, float %152, !dbg !48
  br label %__nv_tanhf.exit19, !dbg !48

__nv_tanhf.exit19:                                ; preds = %__internal_fmad.exit1.i3, %__internal_fmad.exit3.i8
  %s.1.i7 = phi float [ %137, %__internal_fmad.exit1.i3 ], [ %.02.i18, %__internal_fmad.exit3.i8 ], !dbg !48
  %154 = extractvalue { i32, i32 } %61, 1, !dbg !35
  %155 = bitcast i32 %154 to float, !dbg !35
  %156 = extractvalue { i32, i32 } %61, 0, !dbg !35
  %157 = bitcast i32 %156 to float, !dbg !35
  %158 = extractvalue { i32, i32 } %47, 1, !dbg !29
  %159 = bitcast i32 %158 to float, !dbg !29
  %160 = extractvalue { i32, i32 } %47, 0, !dbg !29
  %161 = bitcast i32 %160 to float, !dbg !29
  %162 = fmul float %s.1.i, %161, !dbg !50
  %163 = fmul float %s.1.i7, %159, !dbg !50
  %164 = fsub float 1.000000e+00, %161, !dbg !51
  %165 = fsub float 1.000000e+00, %159, !dbg !51
  %166 = fmul float %164, %157, !dbg !52
  %167 = fmul float %165, %155, !dbg !52
  %168 = fadd float %166, %162, !dbg !53
  %169 = fadd float %167, %163, !dbg !53
  %170 = bitcast float %82 to i32, !dbg !54
  %171 = bitcast float %83 to i32, !dbg !54
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %170, i32 %171, ptr addrspace(1) %22, i1 %17) #3, !dbg !54
  %172 = getelementptr float, ptr addrspace(1) %8, i64 %21, !dbg !55
  %173 = bitcast float %168 to i32, !dbg !56
  %174 = bitcast float %169 to i32, !dbg !56
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %173, i32 %174, ptr addrspace(1) %172, i1 %17) #3, !dbg !56
  ret void, !dbg !57
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.ftz.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fabs.f(float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.ex2.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.ftz.f(float, float, float) #0

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare float @llvm.nvvm.fma.rn.f(float, float, float) #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }
attributes #4 = { nounwind memory(none) }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ce3rtwswxo7om7n57b3iqtamqlbvnmdeimwd532mpfixork5f4g2.py", directory: "inductor_cache/e3")
!4 = !{ptr @triton_poi_fused_add_mul_rsub_sigmoid_tanh_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_mul_rsub_sigmoid_tanh_0, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_mul_rsub_sigmoid_tanh_0", linkageName: "triton_poi_fused_add_mul_rsub_sigmoid_tanh_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 27, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 34, scope: !7)
!19 = !DILocation(line: 28, column: 39, scope: !7)
!20 = !DILocation(line: 29, column: 30, scope: !7)
!21 = !DILocation(line: 29, column: 35, scope: !7)
!22 = !DILocation(line: 30, column: 30, scope: !7)
!23 = !DILocation(line: 30, column: 35, scope: !7)
!24 = !DILocation(line: 31, column: 30, scope: !7)
!25 = !DILocation(line: 31, column: 35, scope: !7)
!26 = !DILocation(line: 32, column: 38, scope: !7)
!27 = !DILocation(line: 32, column: 35, scope: !7)
!28 = !DILocation(line: 32, column: 30, scope: !7)
!29 = !DILocation(line: 32, column: 43, scope: !7)
!30 = !DILocation(line: 33, column: 30, scope: !7)
!31 = !DILocation(line: 33, column: 35, scope: !7)
!32 = !DILocation(line: 34, column: 31, scope: !7)
!33 = !DILocation(line: 34, column: 36, scope: !7)
!34 = !DILocation(line: 35, column: 31, scope: !7)
!35 = !DILocation(line: 35, column: 36, scope: !7)
!36 = !DILocation(line: 36, column: 18, scope: !7)
!37 = !DILocation(line: 37, column: 18, scope: !7)
!38 = !DILocation(line: 38, column: 18, scope: !7)
!39 = !DILocation(line: 47, column: 30, scope: !40, inlinedAt: !42)
!40 = distinct !DILexicalBlockFile(scope: !7, file: !41, discriminator: 0)
!41 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!42 = !DILocation(line: 39, column: 22, scope: !7)
!43 = !DILocation(line: 47, column: 29, scope: !40, inlinedAt: !42)
!44 = !DILocation(line: 47, column: 20, scope: !40, inlinedAt: !42)
!45 = !DILocation(line: 47, column: 16, scope: !40, inlinedAt: !42)
!46 = !DILocation(line: 40, column: 19, scope: !7)
!47 = !DILocation(line: 41, column: 19, scope: !7)
!48 = !DILocation(line: 42, column: 27, scope: !7)
!49 = !{i32 21046}
!50 = !DILocation(line: 43, column: 19, scope: !7)
!51 = !DILocation(line: 45, column: 20, scope: !7)
!52 = !DILocation(line: 46, column: 20, scope: !7)
!53 = !DILocation(line: 47, column: 20, scope: !7)
!54 = !DILocation(line: 48, column: 39, scope: !7)
!55 = !DILocation(line: 49, column: 25, scope: !7)
!56 = !DILocation(line: 49, column: 37, scope: !7)
!57 = !DILocation(line: 49, column: 4, scope: !7)
