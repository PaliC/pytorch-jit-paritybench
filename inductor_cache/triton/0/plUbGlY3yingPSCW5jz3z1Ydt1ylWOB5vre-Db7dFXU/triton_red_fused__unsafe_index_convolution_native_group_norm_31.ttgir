#blocked = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [8, 4], warpsPerCTA = [1, 16], order = [0, 1]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 4], threadsPerWarp = [1, 32], warpsPerCTA = [4, 4], order = [1, 0]}>
#blocked2 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 16], order = [0, 1]}>
#blocked3 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [1, 32], warpsPerCTA = [1, 16], order = [1, 0]}>
#loc = loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":19:0)
#loc1 = loc(unknown)
#loc69 = loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":64:44)
#loc102 = loc(callsite(#loc1 at #loc69))
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 16 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_red_fused__unsafe_index_convolution_native_group_norm_31(%arg0: !tt.ptr<i64> {tt.divisibility = 16 : i32} loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":19:0), %arg5: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":19:0), %arg6: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":19:0), %arg7: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":19:0), %arg8: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<1.000000e+00> : tensor<8x512xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<8192> : tensor<8x1xi32, #blocked1> loc(#loc1)
    %cst_1 = arith.constant dense<0.000000e+00> : tensor<8x512xf32, #blocked> loc(#loc1)
    %cst_2 = arith.constant dense<0> : tensor<1x512xi64, #blocked2> loc(#loc1)
    %cst_3 = arith.constant dense<8> : tensor<1x512xi64, #blocked2> loc(#loc1)
    %cst_4 = arith.constant dense<64> : tensor<1x512xi64, #blocked2> loc(#loc1)
    %cst_5 = arith.constant dense<8> : tensor<1x512xi64, #blocked3> loc(#loc1)
    %cst_6 = arith.constant 0.000000e+00 : f32 loc(#loc1)
    %cst_7 = arith.constant dense<0> : tensor<1x512xi64, #blocked3> loc(#loc1)
    %c512_i32 = arith.constant 512 : i32 loc(#loc1)
    %c8192_i32 = arith.constant 8192 : i32 loc(#loc1)
    %cst_8 = arith.constant dense<512> : tensor<1x512xi32, #blocked3> loc(#loc1)
    %cst_9 = arith.constant dense<4096> : tensor<1x512xi32, #blocked3> loc(#loc1)
    %cst_10 = arith.constant dense<16> : tensor<1x512xi32, #blocked3> loc(#loc1)
    %cst_11 = arith.constant dense<8192> : tensor<1x512xi32, #blocked3> loc(#loc1)
    %c0_i32 = arith.constant 0 : i32 loc(#loc1)
    %c8_i32 = arith.constant 8 : i32 loc(#loc1)
    %cst_12 = arith.constant dense<256> : tensor<8x1xi32, #blocked> loc(#loc1)
    %cst_13 = arith.constant dense<256> : tensor<8x1xi32, #blocked1> loc(#loc1)
    %cst_14 = arith.constant dense<64> : tensor<8x1xi32, #blocked> loc(#loc1)
    %cst_15 = arith.constant dense<8192> : tensor<1x512xi32, #blocked2> loc(#loc1)
    %cst_16 = arith.constant dense<8192> : tensor<1x512xi32, #blocked> loc(#loc1)
    %cst_17 = arith.constant dense<8192> : tensor<1x512xi32, #blocked1> loc(#loc1)
    %cst_18 = arith.constant dense<256> : tensor<1x512xi32, #blocked2> loc(#loc1)
    %cst_19 = arith.constant dense<16> : tensor<1x512xi32, #blocked2> loc(#loc1)
    %cst_20 = arith.constant dense<4096> : tensor<1x512xi32, #blocked> loc(#loc1)
    %cst_21 = arith.constant dense<2> : tensor<8x1xi32, #blocked> loc(#loc1)
    %cst_22 = arith.constant dense<1024> : tensor<8x1xi32, #blocked> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c8_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc4)
    %3 = tt.make_range {end = 8 : i32, start = 0 : i32} : tensor<8xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc4)
    %4 = tt.expand_dims %2 {axis = 1 : i32} : tensor<8xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<8x1xi32, #blocked> loc(#loc4)
    %5 = tt.expand_dims %3 {axis = 1 : i32} : tensor<8xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<8x1xi32, #blocked1> loc(#loc4)
    %6 = tt.splat %1 : i32 -> tensor<8x1xi32, #blocked> loc(#loc5)
    %7 = tt.splat %1 : i32 -> tensor<8x1xi32, #blocked1> loc(#loc5)
    %8 = arith.addi %6, %4 : tensor<8x1xi32, #blocked> loc(#loc5)
    %9 = arith.addi %7, %5 : tensor<8x1xi32, #blocked1> loc(#loc5)
    %10 = arith.cmpi slt, %8, %cst_12 : tensor<8x1xi32, #blocked> loc(#loc6)
    %11 = arith.cmpi slt, %9, %cst_13 : tensor<8x1xi32, #blocked1> loc(#loc6)
    %12 = tt.make_range {end = 512 : i32, start = 0 : i32} : tensor<512xi32, #triton_gpu.slice<{dim = 0, parent = #blocked2}>> loc(#loc7)
    %13 = tt.make_range {end = 512 : i32, start = 0 : i32} : tensor<512xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> loc(#loc7)
    %14 = tt.make_range {end = 512 : i32, start = 0 : i32} : tensor<512xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> loc(#loc7)
    %15 = tt.make_range {end = 512 : i32, start = 0 : i32} : tensor<512xi32, #triton_gpu.slice<{dim = 0, parent = #blocked3}>> loc(#loc7)
    %16 = tt.expand_dims %12 {axis = 0 : i32} : tensor<512xi32, #triton_gpu.slice<{dim = 0, parent = #blocked2}>> -> tensor<1x512xi32, #blocked2> loc(#loc7)
    %17 = tt.expand_dims %13 {axis = 0 : i32} : tensor<512xi32, #triton_gpu.slice<{dim = 0, parent = #blocked}>> -> tensor<1x512xi32, #blocked> loc(#loc7)
    %18 = tt.expand_dims %14 {axis = 0 : i32} : tensor<512xi32, #triton_gpu.slice<{dim = 0, parent = #blocked1}>> -> tensor<1x512xi32, #blocked1> loc(#loc7)
    %19 = tt.expand_dims %15 {axis = 0 : i32} : tensor<512xi32, #triton_gpu.slice<{dim = 0, parent = #blocked3}>> -> tensor<1x512xi32, #blocked3> loc(#loc7)
    %20 = arith.remsi %8, %cst_14 : tensor<8x1xi32, #blocked> loc(#loc8)
    %21 = tt.splat %arg0 : !tt.ptr<i64> -> tensor<1x512x!tt.ptr<i64>, #blocked2> loc(#loc9)
    %22 = tt.splat %arg0 : !tt.ptr<i64> -> tensor<1x512x!tt.ptr<i64>, #blocked3> loc(#loc9)
    %23 = arith.muli %20, %cst_21 : tensor<8x1xi32, #blocked> loc(#loc10)
    %24 = tt.broadcast %23 : tensor<8x1xi32, #blocked> -> tensor<8x512xi32, #blocked> loc(#loc11)
    %25 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<8x512x!tt.ptr<f32>, #blocked> loc(#loc12)
    %26 = tt.broadcast %10 : tensor<8x1xi1, #blocked> -> tensor<8x512xi1, #blocked> loc(#loc13)
    %27 = tt.broadcast %11 : tensor<8x1xi1, #blocked1> -> tensor<8x512xi1, #blocked1> loc(#loc13)
    %28 = arith.muli %8, %cst_22 : tensor<8x1xi32, #blocked> loc(#loc14)
    %29 = arith.extsi %28 : tensor<8x1xi32, #blocked> to tensor<8x1xi64, #blocked> loc(#loc15)
    %30 = tt.broadcast %29 : tensor<8x1xi64, #blocked> -> tensor<8x512xi64, #blocked> loc(#loc15)
    %31 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<8x512x!tt.ptr<f32>, #blocked> loc(#loc16)
    %32 = arith.muli %9, %cst_0 : tensor<8x1xi32, #blocked1> loc(#loc17)
    %33 = tt.broadcast %32 : tensor<8x1xi32, #blocked1> -> tensor<8x512xi32, #blocked1> loc(#loc18)
    %34 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<8x512x!tt.ptr<f32>, #blocked1> loc(#loc19)
    %35:3 = scf.for %arg9 = %c0_i32 to %c8192_i32 step %c512_i32 iter_args(%arg10 = %cst_1, %arg11 = %cst_1, %arg12 = %cst_1) -> (tensor<8x512xf32, #blocked>, tensor<8x512xf32, #blocked>, tensor<8x512xf32, #blocked>)  : i32 {
      %46 = tt.splat %arg9 : i32 -> tensor<1x512xi32, #blocked2> loc(#loc21)
      %47 = tt.splat %arg9 : i32 -> tensor<1x512xi32, #blocked> loc(#loc21)
      %48 = tt.splat %arg9 : i32 -> tensor<1x512xi32, #blocked1> loc(#loc21)
      %49 = tt.splat %arg9 : i32 -> tensor<1x512xi32, #blocked3> loc(#loc21)
      %50 = arith.addi %46, %16 : tensor<1x512xi32, #blocked2> loc(#loc21)
      %51 = arith.addi %47, %17 : tensor<1x512xi32, #blocked> loc(#loc21)
      %52 = arith.addi %48, %18 : tensor<1x512xi32, #blocked1> loc(#loc21)
      %53 = arith.addi %49, %19 : tensor<1x512xi32, #blocked3> loc(#loc21)
      %54 = arith.cmpi slt, %50, %cst_15 : tensor<1x512xi32, #blocked2> loc(#loc22)
      %55 = arith.cmpi slt, %51, %cst_16 : tensor<1x512xi32, #blocked> loc(#loc22)
      %56 = arith.cmpi slt, %52, %cst_17 : tensor<1x512xi32, #blocked1> loc(#loc22)
      %57 = arith.cmpi slt, %53, %cst_11 : tensor<1x512xi32, #blocked3> loc(#loc22)
      %58 = arith.divsi %50, %cst_18 : tensor<1x512xi32, #blocked2> loc(#loc23)
      %59 = arith.remsi %58, %cst_19 : tensor<1x512xi32, #blocked2> loc(#loc24)
      %60 = arith.divsi %50, %cst_19 : tensor<1x512xi32, #blocked2> loc(#loc25)
      %61 = arith.remsi %60, %cst_19 : tensor<1x512xi32, #blocked2> loc(#loc26)
      %62 = arith.remsi %53, %cst_10 : tensor<1x512xi32, #blocked3> loc(#loc27)
      %63 = arith.divsi %51, %cst_20 : tensor<1x512xi32, #blocked> loc(#loc28)
      %64 = arith.divsi %53, %cst_9 : tensor<1x512xi32, #blocked3> loc(#loc28)
      %65 = tt.addptr %21, %59 : tensor<1x512x!tt.ptr<i64>, #blocked2>, tensor<1x512xi32, #blocked2> loc(#loc9)
      %66 = tt.load %65, %54, %cst_2 evictionPolicy = evict_last : tensor<1x512x!tt.ptr<i64>, #blocked2> loc(#loc29)
      %67 = tt.addptr %21, %61 : tensor<1x512x!tt.ptr<i64>, #blocked2>, tensor<1x512xi32, #blocked2> loc(#loc30)
      %68 = tt.load %67, %54, %cst_2 evictionPolicy = evict_last : tensor<1x512x!tt.ptr<i64>, #blocked2> loc(#loc31)
      %69 = tt.addptr %22, %62 : tensor<1x512x!tt.ptr<i64>, #blocked3>, tensor<1x512xi32, #blocked3> loc(#loc32)
      %70 = tt.load %69, %57, %cst_7 evictionPolicy = evict_last : tensor<1x512x!tt.ptr<i64>, #blocked3> loc(#loc33)
      %71 = tt.broadcast %63 : tensor<1x512xi32, #blocked> -> tensor<8x512xi32, #blocked> loc(#loc11)
      %72 = arith.addi %71, %24 : tensor<8x512xi32, #blocked> loc(#loc11)
      %73 = tt.addptr %25, %72 : tensor<8x512x!tt.ptr<f32>, #blocked>, tensor<8x512xi32, #blocked> loc(#loc12)
      %74 = tt.broadcast %55 : tensor<1x512xi1, #blocked> -> tensor<8x512xi1, #blocked> loc(#loc13)
      %75 = tt.broadcast %56 : tensor<1x512xi1, #blocked1> -> tensor<8x512xi1, #blocked1> loc(#loc13)
      %76 = arith.andi %74, %26 : tensor<8x512xi1, #blocked> loc(#loc13)
      %77 = arith.andi %75, %27 : tensor<8x512xi1, #blocked1> loc(#loc13)
      %78 = tt.load %73, %76, %cst_1 evictionPolicy = evict_last : tensor<8x512x!tt.ptr<f32>, #blocked> loc(#loc34)
      %79 = arith.addi %66, %cst_3 : tensor<1x512xi64, #blocked2> loc(#loc35)
      %80 = arith.cmpi slt, %66, %cst_2 : tensor<1x512xi64, #blocked2> loc(#loc36)
      %81 = arith.select %80, %79, %66 : tensor<1x512xi1, #blocked2>, tensor<1x512xi64, #blocked2> loc(#loc37)
      %82 = arith.addi %68, %cst_3 : tensor<1x512xi64, #blocked2> loc(#loc38)
      %83 = arith.cmpi slt, %68, %cst_2 : tensor<1x512xi64, #blocked2> loc(#loc39)
      %84 = arith.select %83, %82, %68 : tensor<1x512xi1, #blocked2>, tensor<1x512xi64, #blocked2> loc(#loc40)
      %85 = arith.addi %70, %cst_5 : tensor<1x512xi64, #blocked3> loc(#loc41)
      %86 = arith.cmpi slt, %70, %cst_7 : tensor<1x512xi64, #blocked3> loc(#loc42)
      %87 = arith.select %86, %85, %70 : tensor<1x512xi1, #blocked3>, tensor<1x512xi64, #blocked3> loc(#loc43)
      %88 = arith.muli %84, %cst_3 : tensor<1x512xi64, #blocked2> loc(#loc44)
      %89 = triton_gpu.convert_layout %88 {overflowFlags = #arith.overflow<none>} : tensor<1x512xi64, #blocked2> -> tensor<1x512xi64, #blocked3> loc(#loc44)
      %90 = arith.addi %87, %89 : tensor<1x512xi64, #blocked3> loc(#loc45)
      %91 = arith.muli %81, %cst_4 : tensor<1x512xi64, #blocked2> loc(#loc46)
      %92 = triton_gpu.convert_layout %91 {overflowFlags = #arith.overflow<none>} : tensor<1x512xi64, #blocked2> -> tensor<1x512xi64, #blocked3> loc(#loc46)
      %93 = arith.addi %90, %92 : tensor<1x512xi64, #blocked3> loc(#loc47)
      %94 = arith.muli %64, %cst_8 : tensor<1x512xi32, #blocked3> loc(#loc48)
      %95 = arith.extsi %94 : tensor<1x512xi32, #blocked3> to tensor<1x512xi64, #blocked3> loc(#loc49)
      %96 = arith.addi %93, %95 : tensor<1x512xi64, #blocked3> loc(#loc49)
      %97 = triton_gpu.convert_layout %96 : tensor<1x512xi64, #blocked3> -> tensor<1x512xi64, #blocked> loc(#loc16)
      %98 = tt.broadcast %97 : tensor<1x512xi64, #blocked> -> tensor<8x512xi64, #blocked> loc(#loc49)
      %99 = arith.addi %98, %30 : tensor<8x512xi64, #blocked> loc(#loc15)
      %100 = tt.addptr %31, %99 : tensor<8x512x!tt.ptr<f32>, #blocked>, tensor<8x512xi64, #blocked> loc(#loc16)
      %101 = tt.load %100, %76, %cst_1 evictionPolicy = evict_last : tensor<8x512x!tt.ptr<f32>, #blocked> loc(#loc50)
      %102 = arith.addf %101, %78 : tensor<8x512xf32, #blocked> loc(#loc51)
      %103 = arith.cmpi eq, %arg9, %c0_i32 : i32 loc(#loc52)
      %104:3 = scf.if %103 -> (tensor<8x512xf32, #blocked>, tensor<8x512xf32, #blocked>, tensor<8x512xf32, #blocked>) {
        scf.yield %cst_1, %102, %cst : tensor<8x512xf32, #blocked>, tensor<8x512xf32, #blocked>, tensor<8x512xf32, #blocked> loc(#loc93)
      } else {
        %112 = arith.subf %102, %arg10 : tensor<8x512xf32, #blocked> loc(#loc94)
        %113 = arith.addf %arg12, %cst : tensor<8x512xf32, #blocked> loc(#loc95)
        %114 = arith.divf %112, %113 : tensor<8x512xf32, #blocked> loc(#loc96)
        %115 = arith.addf %arg10, %114 : tensor<8x512xf32, #blocked> loc(#loc97)
        %116 = arith.subf %102, %115 : tensor<8x512xf32, #blocked> loc(#loc98)
        %117 = arith.mulf %112, %116 : tensor<8x512xf32, #blocked> loc(#loc99)
        %118 = arith.addf %arg11, %117 : tensor<8x512xf32, #blocked> loc(#loc100)
        scf.yield %118, %115, %113 : tensor<8x512xf32, #blocked>, tensor<8x512xf32, #blocked>, tensor<8x512xf32, #blocked> loc(#loc100)
      } loc(#loc92)
      %105 = arith.select %76, %104#1, %arg10 : tensor<8x512xi1, #blocked>, tensor<8x512xf32, #blocked> loc(#loc63)
      %106 = arith.select %76, %104#0, %arg11 : tensor<8x512xi1, #blocked>, tensor<8x512xf32, #blocked> loc(#loc64)
      %107 = arith.select %76, %104#2, %arg12 : tensor<8x512xi1, #blocked>, tensor<8x512xf32, #blocked> loc(#loc65)
      %108 = tt.broadcast %52 : tensor<1x512xi32, #blocked1> -> tensor<8x512xi32, #blocked1> loc(#loc18)
      %109 = arith.addi %108, %33 : tensor<8x512xi32, #blocked1> loc(#loc18)
      %110 = tt.addptr %34, %109 : tensor<8x512x!tt.ptr<f32>, #blocked1>, tensor<8x512xi32, #blocked1> loc(#loc19)
      %111 = triton_gpu.convert_layout %102 : tensor<8x512xf32, #blocked> -> tensor<8x512xf32, #blocked1> loc(#loc66)
      tt.store %110, %111, %77 : tensor<8x512x!tt.ptr<f32>, #blocked1> loc(#loc66)
      scf.yield %105, %106, %107 : tensor<8x512xf32, #blocked>, tensor<8x512xf32, #blocked>, tensor<8x512xf32, #blocked> loc(#loc67)
    } loc(#loc20)
    %36:3 = "tt.reduce"(%35#0, %35#1, %35#2) <{axis = 1 : i32}> ({
    ^bb0(%arg9: f32 loc(callsite(#loc1 at #loc69)), %arg10: f32 loc(callsite(#loc1 at #loc69)), %arg11: f32 loc(callsite(#loc1 at #loc69)), %arg12: f32 loc(callsite(#loc1 at #loc69)), %arg13: f32 loc(callsite(#loc1 at #loc69)), %arg14: f32 loc(callsite(#loc1 at #loc69))):
      %46 = arith.subf %arg12, %arg9 : f32 loc(#loc115)
      %47 = arith.addf %arg11, %arg14 : f32 loc(#loc116)
      %48 = arith.cmpf oeq, %47, %cst_6 : f32 loc(#loc117)
      %49 = arith.divf %arg14, %47 : f32 loc(#loc118)
      %50 = arith.select %48, %cst_6, %49 : f32 loc(#loc119)
      %51 = arith.mulf %46, %50 : f32 loc(#loc120)
      %52 = arith.addf %arg9, %51 : f32 loc(#loc121)
      %53 = arith.addf %arg10, %arg13 : f32 loc(#loc122)
      %54 = arith.mulf %46, %46 : f32 loc(#loc123)
      %55 = arith.mulf %54, %arg11 : f32 loc(#loc124)
      %56 = arith.mulf %55, %50 : f32 loc(#loc125)
      %57 = arith.addf %53, %56 : f32 loc(#loc126)
      tt.reduce.return %52, %57, %47 : f32, f32, f32 loc(#loc101)
    }) : (tensor<8x512xf32, #blocked>, tensor<8x512xf32, #blocked>, tensor<8x512xf32, #blocked>) -> (tensor<8xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>, tensor<8xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>, tensor<8xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>>) loc(#loc101)
    %37 = tt.expand_dims %36#0 {axis = 1 : i32} : tensor<8xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<8x1xf32, #blocked> loc(#loc82)
    %38 = tt.expand_dims %36#1 {axis = 1 : i32} : tensor<8xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<8x1xf32, #blocked> loc(#loc83)
    %39 = tt.expand_dims %36#2 {axis = 1 : i32} : tensor<8xf32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<8x1xf32, #blocked> loc(#loc84)
    %40 = tt.splat %arg4 : !tt.ptr<f32> -> tensor<8x1x!tt.ptr<f32>, #blocked> loc(#loc85)
    %41 = tt.addptr %40, %8 : tensor<8x1x!tt.ptr<f32>, #blocked>, tensor<8x1xi32, #blocked> loc(#loc85)
    tt.store %41, %37, %10 : tensor<8x1x!tt.ptr<f32>, #blocked> loc(#loc86)
    %42 = tt.splat %arg5 : !tt.ptr<f32> -> tensor<8x1x!tt.ptr<f32>, #blocked> loc(#loc87)
    %43 = tt.addptr %42, %8 : tensor<8x1x!tt.ptr<f32>, #blocked>, tensor<8x1xi32, #blocked> loc(#loc87)
    tt.store %43, %38, %10 : tensor<8x1x!tt.ptr<f32>, #blocked> loc(#loc88)
    %44 = tt.splat %arg6 : !tt.ptr<f32> -> tensor<8x1x!tt.ptr<f32>, #blocked> loc(#loc89)
    %45 = tt.addptr %44, %8 : tensor<8x1x!tt.ptr<f32>, #blocked>, tensor<8x1xi32, #blocked> loc(#loc89)
    tt.store %45, %39, %10 : tensor<8x1x!tt.ptr<f32>, #blocked> loc(#loc90)
    tt.return loc(#loc91)
  } loc(#loc)
} loc(#loc)
#loc2 = loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":22:28)
#loc3 = loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":22:33)
#loc4 = loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":23:44)
#loc5 = loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":23:23)
#loc6 = loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":24:21)
#loc7 = loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":25:33)
#loc8 = loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":27:19)
#loc9 = loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":39:34)
#loc10 = loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":42:42)
#loc11 = loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":42:40)
#loc12 = loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":42:35)
#loc13 = loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":42:55)
#loc14 = loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":53:76)
#loc15 = loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":53:71)
#loc16 = loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":53:35)
#loc17 = loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":62:39)
#loc18 = loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":62:34)
#loc19 = loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":62:29)
#loc20 = loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":31:36)
#loc21 = loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":32:27)
#loc22 = loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":33:25)
#loc23 = loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":34:25)
#loc24 = loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":34:32)
#loc25 = loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":35:25)
#loc26 = loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":35:31)
#loc27 = loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":36:23)
#loc28 = loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":37:23)
#loc29 = loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":39:39)
#loc30 = loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":40:34)
#loc31 = loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":40:39)
#loc32 = loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":41:34)
#loc33 = loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":41:39)
#loc34 = loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":42:47)
#loc35 = loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":44:22)
#loc36 = loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":45:22)
#loc37 = loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":46:36)
#loc38 = loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":47:22)
#loc39 = loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":48:22)
#loc40 = loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":49:36)
#loc41 = loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":50:23)
#loc42 = loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":51:23)
#loc43 = loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":52:39)
#loc44 = loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":53:45)
#loc45 = loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":53:43)
#loc46 = loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":53:55)
#loc47 = loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":53:52)
#loc48 = loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":53:66)
#loc49 = loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":53:62)
#loc50 = loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":53:81)
#loc51 = loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":54:24)
#loc52 = loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":57:66)
#loc53 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":178:7)
#loc54 = loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":57:55)
#loc55 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":181:31)
#loc56 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":183:24)
#loc57 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":184:30)
#loc58 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":185:34)
#loc59 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":185:26)
#loc60 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":186:39)
#loc61 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":186:31)
#loc62 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":186:22)
#loc63 = loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":59:62)
#loc64 = loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":60:58)
#loc65 = loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":61:66)
#loc66 = loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":62:51)
#loc67 = loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":62:8)
#loc68 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":204:46)
#loc70 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":192:21)
#loc71 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":193:28)
#loc72 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":194:39)
#loc73 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":194:60)
#loc74 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":194:49)
#loc75 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":196:25)
#loc76 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":196:17)
#loc77 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":197:15)
#loc78 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":197:30)
#loc79 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":197:38)
#loc80 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":197:49)
#loc81 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":197:22)
#loc82 = loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":66:22)
#loc83 = loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":67:22)
#loc84 = loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":68:22)
#loc85 = loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":69:25)
#loc86 = loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":69:37)
#loc87 = loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":70:25)
#loc88 = loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":70:37)
#loc89 = loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":71:25)
#loc90 = loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":71:37)
#loc91 = loc("inductor_cache/7s/c7s45lcof43l7rbbulwegbqpn3eleshfszmtr63cujzw7jwk3sha.py":71:4)
#loc92 = loc(callsite(#loc53 at #loc54))
#loc93 = loc(callsite(#loc55 at #loc54))
#loc94 = loc(callsite(#loc56 at #loc54))
#loc95 = loc(callsite(#loc57 at #loc54))
#loc96 = loc(callsite(#loc58 at #loc54))
#loc97 = loc(callsite(#loc59 at #loc54))
#loc98 = loc(callsite(#loc60 at #loc54))
#loc99 = loc(callsite(#loc61 at #loc54))
#loc100 = loc(callsite(#loc62 at #loc54))
#loc101 = loc(callsite(#loc68 at #loc69))
#loc103 = loc(callsite(#loc70 at #loc68))
#loc104 = loc(callsite(#loc71 at #loc68))
#loc105 = loc(callsite(#loc72 at #loc68))
#loc106 = loc(callsite(#loc73 at #loc68))
#loc107 = loc(callsite(#loc74 at #loc68))
#loc108 = loc(callsite(#loc75 at #loc68))
#loc109 = loc(callsite(#loc76 at #loc68))
#loc110 = loc(callsite(#loc77 at #loc68))
#loc111 = loc(callsite(#loc78 at #loc68))
#loc112 = loc(callsite(#loc79 at #loc68))
#loc113 = loc(callsite(#loc80 at #loc68))
#loc114 = loc(callsite(#loc81 at #loc68))
#loc115 = loc(callsite(#loc103 at #loc69))
#loc116 = loc(callsite(#loc104 at #loc69))
#loc117 = loc(callsite(#loc105 at #loc69))
#loc118 = loc(callsite(#loc106 at #loc69))
#loc119 = loc(callsite(#loc107 at #loc69))
#loc120 = loc(callsite(#loc108 at #loc69))
#loc121 = loc(callsite(#loc109 at #loc69))
#loc122 = loc(callsite(#loc110 at #loc69))
#loc123 = loc(callsite(#loc111 at #loc69))
#loc124 = loc(callsite(#loc112 at #loc69))
#loc125 = loc(callsite(#loc113 at #loc69))
#loc126 = loc(callsite(#loc114 at #loc69))
