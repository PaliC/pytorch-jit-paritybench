; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_per_fused_mean_27(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %6 = shl i32 %5, 6, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = and i32 %7, 16, !dbg !12
  %9 = shl i32 %7, 2, !dbg !12
  %10 = and i32 %9, 60, !dbg !12
  %11 = lshr i32 %7, 5, !dbg !12
  %12 = and i32 %7, 63, !dbg !12
  %13 = or disjoint i32 %6, %10, !dbg !13
  %14 = or disjoint i32 %6, %12, !dbg !13
  %15 = icmp slt i32 %13, 64, !dbg !14
  %16 = icmp slt i32 %14, 64, !dbg !14
  %17 = lshr i32 %7, 4, !dbg !15
  %18 = and i32 %17, 3, !dbg !15
  %19 = icmp ne i32 %18, 3, !dbg !16
  %.frozen = freeze i32 %13, !dbg !17
  %20 = sdiv i32 %.frozen, 16, !dbg !17
  %21 = mul i32 %20, 16, !dbg !18
  %.decomposed = sub i32 %.frozen, %21, !dbg !18
  %22 = shl nuw nsw i32 %18, 4, !dbg !19
  %23 = add nsw i32 %.decomposed, %22, !dbg !20
  %24 = mul i32 %20, 48, !dbg !21
  %25 = add i32 %23, %24, !dbg !22
  %26 = sext i32 %25 to i64, !dbg !23
  %27 = getelementptr float, ptr addrspace(1) %1, i64 %26, !dbg !23
  %28 = and i1 %19, %15, !dbg !24
  %29 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %27, i1 %28, i32 0, i1 %28, i32 0, i1 %28, i32 0, i1 %28, i32 0, i1 %28) #3, !dbg !25
  %30 = extractvalue { i32, i32, i32, i32 } %29, 0, !dbg !25
  %31 = extractvalue { i32, i32, i32, i32 } %29, 1, !dbg !25
  %32 = extractvalue { i32, i32, i32, i32 } %29, 2, !dbg !25
  %33 = extractvalue { i32, i32, i32, i32 } %29, 3, !dbg !25
  %34 = bitcast i32 %30 to float, !dbg !25
  %35 = bitcast i32 %31 to float, !dbg !25
  %36 = bitcast i32 %32 to float, !dbg !25
  %37 = bitcast i32 %33 to float, !dbg !25
  %38 = select i1 %28, float %34, float 0.000000e+00, !dbg !26
  %39 = select i1 %28, float %35, float 0.000000e+00, !dbg !26
  %40 = select i1 %28, float %36, float 0.000000e+00, !dbg !26
  %41 = select i1 %28, float %37, float 0.000000e+00, !dbg !26
  %42 = bitcast float %38 to i32, !dbg !27
  %43 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %42, i32 16, i32 31), !dbg !27
  %44 = bitcast i32 %43 to float, !dbg !27
  %45 = fadd float %38, %44, !dbg !31
  %46 = bitcast float %39 to i32, !dbg !27
  %47 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %46, i32 16, i32 31), !dbg !27
  %48 = bitcast i32 %47 to float, !dbg !27
  %49 = fadd float %39, %48, !dbg !31
  %50 = bitcast float %40 to i32, !dbg !27
  %51 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %50, i32 16, i32 31), !dbg !27
  %52 = bitcast i32 %51 to float, !dbg !27
  %53 = fadd float %40, %52, !dbg !31
  %54 = bitcast float %41 to i32, !dbg !27
  %55 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %54, i32 16, i32 31), !dbg !27
  %56 = bitcast i32 %55 to float, !dbg !27
  %57 = fadd float %41, %56, !dbg !31
  %58 = icmp eq i32 %8, 0, !dbg !27
  %59 = and i32 %11, 1, !dbg !27
  %60 = shl nuw nsw i32 %10, 1, !dbg !27
  %61 = or disjoint i32 %60, %59, !dbg !27
  %62 = getelementptr float, ptr addrspace(3) @global_smem, i32 %61, !dbg !27
  %63 = bitcast float %45 to <1 x i32>, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %62, <1 x i32> %63, i1 %58) #3, !dbg !27
  %64 = or disjoint i32 %60, 2, !dbg !27
  %65 = or disjoint i32 %64, %59, !dbg !27
  %66 = getelementptr float, ptr addrspace(3) @global_smem, i32 %65, !dbg !27
  %67 = bitcast float %49 to <1 x i32>, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %66, <1 x i32> %67, i1 %58) #3, !dbg !27
  %68 = or disjoint i32 %60, 4, !dbg !27
  %69 = or disjoint i32 %68, %59, !dbg !27
  %70 = getelementptr float, ptr addrspace(3) @global_smem, i32 %69, !dbg !27
  %71 = bitcast float %53 to <1 x i32>, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %70, <1 x i32> %71, i1 %58) #3, !dbg !27
  %72 = or disjoint i32 %60, 6, !dbg !27
  %73 = or disjoint i32 %72, %59, !dbg !27
  %74 = getelementptr float, ptr addrspace(3) @global_smem, i32 %73, !dbg !27
  %75 = bitcast float %57 to <1 x i32>, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %74, <1 x i32> %75, i1 %58) #3, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %76 = icmp slt i32 %7, 128, !dbg !27
  %77 = getelementptr float, ptr addrspace(3) @global_smem, i32 %7, !dbg !27
  %78 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %77, i1 %76) #3, !dbg !27
  %79 = bitcast i32 %78 to float, !dbg !27
  %80 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %78, i32 1, i32 31), !dbg !27
  %81 = bitcast i32 %80 to float, !dbg !27
  %82 = fadd float %79, %81, !dbg !31
  %83 = and i32 %7, 1, !dbg !27
  %84 = icmp eq i32 %83, 0, !dbg !27
  %85 = and i1 %76, %84, !dbg !27
  %86 = bitcast float %82 to <1 x i32>, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %77, <1 x i32> %86, i1 %85) #3, !dbg !27
  %87 = getelementptr i8, ptr addrspace(3) %77, i32 256, !dbg !27
  %88 = tail call i32 asm sideeffect "@$2 ld.shared.b32 $0, [ $1 + 0 ];", "=r,r,b"(ptr addrspace(3) %87, i1 %76) #3, !dbg !27
  %89 = bitcast i32 %88 to float, !dbg !27
  %90 = tail call i32 @llvm.nvvm.shfl.sync.bfly.i32(i32 -1, i32 %88, i32 1, i32 31), !dbg !27
  %91 = bitcast i32 %90 to float, !dbg !27
  %92 = fadd float %89, %91, !dbg !31
  %93 = bitcast float %92 to <1 x i32>, !dbg !27
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %87, <1 x i32> %93, i1 %85) #3, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !27
  %94 = getelementptr float, ptr addrspace(3) @global_smem, i32 %60, !dbg !27
  %95 = load i32, ptr addrspace(3) %94, align 16, !dbg !27
  %96 = getelementptr float, ptr addrspace(3) @global_smem, i32 %64, !dbg !27
  %97 = load i32, ptr addrspace(3) %96, align 8, !dbg !27
  %98 = getelementptr float, ptr addrspace(3) @global_smem, i32 %68, !dbg !27
  %99 = load i32, ptr addrspace(3) %98, align 16, !dbg !27
  %100 = getelementptr float, ptr addrspace(3) @global_smem, i32 %72, !dbg !27
  %101 = load i32, ptr addrspace(3) %100, align 8, !dbg !27
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %102 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %10, !dbg !33
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %102, i32 %95, i32 %97, i32 %99, i32 %101, i1 true) #3, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %103 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %12, !dbg !33
  %104 = load float, ptr addrspace(3) %103, align 4, !dbg !33
  %105 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %104, float 3.840000e+02) #3, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %106 = sext i32 %14 to i64, !dbg !35
  %107 = getelementptr float, ptr addrspace(1) %0, i64 %106, !dbg !35
  %108 = bitcast float %105 to i32, !dbg !36
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %108, ptr addrspace(1) %107, i1 %16) #3, !dbg !36
  ret void, !dbg !37
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind memory(inaccessiblemem: readwrite)
declare i32 @llvm.nvvm.shfl.sync.bfly.i32(i32, i32, i32, i32) #1

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind memory(inaccessiblemem: readwrite) }
attributes #2 = { convergent nocallback nounwind }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "catsebq74z7iqi3qj3e2agrnjrvtwv6yunmw4l5pa5h7wfszkeoc.py", directory: "inductor_cache/at")
!4 = !{ptr @triton_per_fused_mean_27, !"kernel", i32 1}
!5 = !{ptr @triton_per_fused_mean_27, !"reqntidx", i32 64}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_per_fused_mean_27", linkageName: "triton_per_fused_mean_27", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 23, column: 28, scope: !7)
!11 = !DILocation(line: 23, column: 33, scope: !7)
!12 = !DILocation(line: 24, column: 44, scope: !7)
!13 = !DILocation(line: 24, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 28, column: 21, scope: !7)
!17 = !DILocation(line: 31, column: 19, scope: !7)
!18 = !DILocation(line: 30, column: 19, scope: !7)
!19 = !DILocation(line: 33, column: 38, scope: !7)
!20 = !DILocation(line: 33, column: 35, scope: !7)
!21 = !DILocation(line: 33, column: 46, scope: !7)
!22 = !DILocation(line: 33, column: 43, scope: !7)
!23 = !DILocation(line: 33, column: 30, scope: !7)
!24 = !DILocation(line: 33, column: 59, scope: !7)
!25 = !DILocation(line: 33, column: 51, scope: !7)
!26 = !DILocation(line: 35, column: 41, scope: !7)
!27 = !DILocation(line: 267, column: 36, scope: !28, inlinedAt: !30)
!28 = distinct !DILexicalBlockFile(scope: !7, file: !29, discriminator: 0)
!29 = !DIFile(filename: "standard.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/triton/language")
!30 = !DILocation(line: 36, column: 24, scope: !7)
!31 = !DILocation(line: 256, column: 15, scope: !32, inlinedAt: !30)
!32 = distinct !DILexicalBlockFile(scope: !28, file: !29, discriminator: 0)
!33 = !DILocation(line: 38, column: 18, scope: !7)
!34 = !DILocation(line: 39, column: 4, scope: !7)
!35 = !DILocation(line: 40, column: 28, scope: !7)
!36 = !DILocation(line: 40, column: 39, scope: !7)
!37 = !DILocation(line: 40, column: 4, scope: !7)
