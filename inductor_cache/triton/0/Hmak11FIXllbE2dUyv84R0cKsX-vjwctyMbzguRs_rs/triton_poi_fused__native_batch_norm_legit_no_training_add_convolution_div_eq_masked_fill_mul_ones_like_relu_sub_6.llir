; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_div_eq_masked_fill_mul_ones_like_relu_sub_6(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, ptr addrspace(1) %6, ptr addrspace(1) %7, ptr addrspace(1) %8, i32 %9) local_unnamed_addr !dbg !7 {
  %11 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %12 = shl i32 %11, 8, !dbg !11
  %13 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %14 = shl i32 %13, 1, !dbg !12
  %15 = and i32 %14, 254, !dbg !12
  %16 = or disjoint i32 %12, %15, !dbg !13
  %17 = icmp slt i32 %16, 2048, !dbg !14
  %18 = srem i32 %16, 32, !dbg !15
  %19 = sext i32 %16 to i64, !dbg !16
  %20 = getelementptr float, ptr addrspace(1) %0, i64 %19, !dbg !16
  %21 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %20, i1 %17) #3, !dbg !17
  %22 = extractvalue { i32, i32 } %21, 0, !dbg !17
  %23 = extractvalue { i32, i32 } %21, 1, !dbg !17
  %24 = bitcast i32 %22 to float, !dbg !17
  %25 = bitcast i32 %23 to float, !dbg !17
  %26 = sext i32 %18 to i64, !dbg !18
  %27 = getelementptr float, ptr addrspace(1) %1, i64 %26, !dbg !18
  %28 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %27, i1 %17) #3, !dbg !19
  %29 = extractvalue { i32, i32 } %28, 0, !dbg !19
  %30 = extractvalue { i32, i32 } %28, 1, !dbg !19
  %31 = bitcast i32 %29 to float, !dbg !19
  %32 = bitcast i32 %30 to float, !dbg !19
  %33 = getelementptr float, ptr addrspace(1) %2, i64 %19, !dbg !20
  %34 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %33, i1 %17) #3, !dbg !21
  %35 = extractvalue { i32, i32 } %34, 0, !dbg !21
  %36 = extractvalue { i32, i32 } %34, 1, !dbg !21
  %37 = bitcast i32 %35 to float, !dbg !21
  %38 = bitcast i32 %36 to float, !dbg !21
  %39 = getelementptr float, ptr addrspace(1) %3, i64 %26, !dbg !22
  %40 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %39, i1 %17) #3, !dbg !23
  %41 = getelementptr float, ptr addrspace(1) %4, i64 %26, !dbg !24
  %42 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %41, i1 %17) #3, !dbg !25
  %43 = extractvalue { i32, i32 } %42, 0, !dbg !25
  %44 = extractvalue { i32, i32 } %42, 1, !dbg !25
  %45 = bitcast i32 %43 to float, !dbg !25
  %46 = bitcast i32 %44 to float, !dbg !25
  %47 = getelementptr float, ptr addrspace(1) %5, i64 %26, !dbg !26
  %48 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %47, i1 %17) #3, !dbg !27
  %49 = getelementptr float, ptr addrspace(1) %6, i64 %26, !dbg !28
  %50 = tail call { i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09@$3 ld.global.L1::evict_last.v2.b32 { $0, $1 }, [ $2 + 0 ];", "=r,=r,l,b"(ptr addrspace(1) %49, i1 %17) #3, !dbg !29
  %51 = fadd float %24, %31, !dbg !30
  %52 = fadd float %25, %32, !dbg !30
  %53 = fcmp oeq float %37, 0.000000e+00, !dbg !31
  %54 = fcmp oeq float %38, 0.000000e+00, !dbg !31
  %55 = fsub float %51, %31, !dbg !32
  %56 = fsub float %52, %32, !dbg !32
  %57 = select i1 %53, float 1.000000e+00, float %37, !dbg !33
  %58 = select i1 %54, float 1.000000e+00, float %38, !dbg !33
  %59 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %55, float %57) #3, !dbg !34
  %60 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %56, float %58) #3, !dbg !34
  %61 = fadd float %45, 0x3EE4F8B580000000, !dbg !35
  %62 = fadd float %46, 0x3EE4F8B580000000, !dbg !35
  %63 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !36
  %.not.i = icmp eq i32 %63, 0, !dbg !36
  %64 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !36
  %.not1.i = icmp eq i32 %64, 0, !dbg !36
  br i1 %.not.i, label %70, label %65, !dbg !36

65:                                               ; preds = %10
  br i1 %.not1.i, label %68, label %66, !dbg !36

66:                                               ; preds = %65
  %67 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %61) #3, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

68:                                               ; preds = %65
  %69 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %61) #3, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

70:                                               ; preds = %10
  br i1 %.not1.i, label %73, label %71, !dbg !36

71:                                               ; preds = %70
  %72 = tail call float @llvm.nvvm.sqrt.rn.f(float %61) #3, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

73:                                               ; preds = %70
  %74 = tail call float @llvm.nvvm.sqrt.approx.f(float %61) #3, !dbg !36
  br label %__nv_sqrtf.exit, !dbg !36

__nv_sqrtf.exit:                                  ; preds = %66, %68, %71, %73
  %.0.i = phi float [ %67, %66 ], [ %69, %68 ], [ %72, %71 ], [ %74, %73 ], !dbg !36
  %75 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !36
  %.not.i1 = icmp eq i32 %75, 0, !dbg !36
  %76 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !36
  %.not1.i4 = icmp eq i32 %76, 0, !dbg !36
  br i1 %.not.i1, label %82, label %77, !dbg !36

77:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %80, label %78, !dbg !36

78:                                               ; preds = %77
  %79 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %62) #3, !dbg !36
  br label %__nv_sqrtf.exit5, !dbg !36

80:                                               ; preds = %77
  %81 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %62) #3, !dbg !36
  br label %__nv_sqrtf.exit5, !dbg !36

82:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %85, label %83, !dbg !36

83:                                               ; preds = %82
  %84 = tail call float @llvm.nvvm.sqrt.rn.f(float %62) #3, !dbg !36
  br label %__nv_sqrtf.exit5, !dbg !36

85:                                               ; preds = %82
  %86 = tail call float @llvm.nvvm.sqrt.approx.f(float %62) #3, !dbg !36
  br label %__nv_sqrtf.exit5, !dbg !36

__nv_sqrtf.exit5:                                 ; preds = %78, %80, %83, %85
  %.0.i3 = phi float [ %79, %78 ], [ %81, %80 ], [ %84, %83 ], [ %86, %85 ], !dbg !36
  %87 = fadd float %60, %32, !dbg !37
  %88 = select i1 %54, float 0.000000e+00, float %87, !dbg !38
  %89 = extractvalue { i32, i32 } %40, 1, !dbg !23
  %90 = bitcast i32 %89 to float, !dbg !23
  %91 = fsub float %88, %90, !dbg !39
  %92 = fadd float %59, %31, !dbg !37
  %93 = select i1 %53, float 0.000000e+00, float %92, !dbg !38
  %94 = extractvalue { i32, i32 } %40, 0, !dbg !23
  %95 = bitcast i32 %94 to float, !dbg !23
  %96 = fsub float %93, %95, !dbg !39
  %97 = extractvalue { i32, i32 } %50, 1, !dbg !29
  %98 = bitcast i32 %97 to float, !dbg !29
  %99 = extractvalue { i32, i32 } %50, 0, !dbg !29
  %100 = bitcast i32 %99 to float, !dbg !29
  %101 = extractvalue { i32, i32 } %48, 1, !dbg !27
  %102 = bitcast i32 %101 to float, !dbg !27
  %103 = extractvalue { i32, i32 } %48, 0, !dbg !27
  %104 = bitcast i32 %103 to float, !dbg !27
  %105 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !40
  %106 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !40
  %107 = fmul float %96, %105, !dbg !41
  %108 = fmul float %91, %106, !dbg !41
  %109 = fmul float %107, %104, !dbg !42
  %110 = fmul float %108, %102, !dbg !42
  %111 = fadd float %109, %100, !dbg !43
  %112 = fadd float %110, %98, !dbg !43
  %113 = fcmp olt float %111, 0.000000e+00, !dbg !44
  %114 = fcmp olt float %112, 0.000000e+00, !dbg !44
  %115 = select i1 %113, float 0.000000e+00, float %111, !dbg !48
  %116 = select i1 %114, float 0.000000e+00, float %112, !dbg !48
  %117 = select i1 %53, float 0.000000e+00, float 1.000000e+00, !dbg !49
  %118 = select i1 %54, float 0.000000e+00, float 1.000000e+00, !dbg !49
  %119 = fmul float %117, %115, !dbg !50
  %120 = fmul float %118, %116, !dbg !50
  %121 = bitcast float %51 to i32, !dbg !51
  %122 = bitcast float %52 to i32, !dbg !51
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %121, i32 %122, ptr addrspace(1) %20, i1 %17) #3, !dbg !51
  %123 = getelementptr float, ptr addrspace(1) %7, i64 %19, !dbg !52
  %124 = bitcast float %119 to i32, !dbg !53
  %125 = bitcast float %120 to i32, !dbg !53
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %124, i32 %125, ptr addrspace(1) %123, i1 %17) #3, !dbg !53
  %126 = getelementptr float, ptr addrspace(1) %8, i64 %19, !dbg !54
  %127 = bitcast float %117 to i32, !dbg !55
  %128 = bitcast float %118 to i32, !dbg !55
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %127, i32 %128, ptr addrspace(1) %126, i1 %17) #3, !dbg !55
  ret void, !dbg !56
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cy7eh47jh723mutrb6adu7umsubkrc4t4ic2isrpbq6oko2p3l6k.py", directory: "inductor_cache/y7")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_div_eq_masked_fill_mul_ones_like_relu_sub_6, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_div_eq_masked_fill_mul_ones_like_relu_sub_6, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_div_eq_masked_fill_mul_ones_like_relu_sub_6", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_convolution_div_eq_masked_fill_mul_ones_like_relu_sub_6", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 34, scope: !7)
!17 = !DILocation(line: 26, column: 39, scope: !7)
!18 = !DILocation(line: 27, column: 30, scope: !7)
!19 = !DILocation(line: 27, column: 35, scope: !7)
!20 = !DILocation(line: 28, column: 30, scope: !7)
!21 = !DILocation(line: 28, column: 35, scope: !7)
!22 = !DILocation(line: 29, column: 31, scope: !7)
!23 = !DILocation(line: 29, column: 36, scope: !7)
!24 = !DILocation(line: 30, column: 31, scope: !7)
!25 = !DILocation(line: 30, column: 36, scope: !7)
!26 = !DILocation(line: 31, column: 31, scope: !7)
!27 = !DILocation(line: 31, column: 36, scope: !7)
!28 = !DILocation(line: 32, column: 31, scope: !7)
!29 = !DILocation(line: 32, column: 36, scope: !7)
!30 = !DILocation(line: 33, column: 18, scope: !7)
!31 = !DILocation(line: 35, column: 19, scope: !7)
!32 = !DILocation(line: 36, column: 18, scope: !7)
!33 = !DILocation(line: 38, column: 32, scope: !7)
!34 = !DILocation(line: 39, column: 18, scope: !7)
!35 = !DILocation(line: 44, column: 20, scope: !7)
!36 = !DILocation(line: 45, column: 27, scope: !7)
!37 = !DILocation(line: 40, column: 19, scope: !7)
!38 = !DILocation(line: 41, column: 33, scope: !7)
!39 = !DILocation(line: 42, column: 20, scope: !7)
!40 = !DILocation(line: 47, column: 20, scope: !7)
!41 = !DILocation(line: 49, column: 20, scope: !7)
!42 = !DILocation(line: 50, column: 20, scope: !7)
!43 = !DILocation(line: 51, column: 20, scope: !7)
!44 = !DILocation(line: 118, column: 15, scope: !45, inlinedAt: !47)
!45 = distinct !DILexicalBlockFile(scope: !7, file: !46, discriminator: 0)
!46 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!47 = !DILocation(line: 53, column: 42, scope: !7)
!48 = !DILocation(line: 121, column: 29, scope: !45, inlinedAt: !47)
!49 = !DILocation(line: 54, column: 33, scope: !7)
!50 = !DILocation(line: 55, column: 20, scope: !7)
!51 = !DILocation(line: 56, column: 39, scope: !7)
!52 = !DILocation(line: 57, column: 25, scope: !7)
!53 = !DILocation(line: 57, column: 37, scope: !7)
!54 = !DILocation(line: 58, column: 25, scope: !7)
!55 = !DILocation(line: 58, column: 37, scope: !7)
!56 = !DILocation(line: 58, column: 4, scope: !7)
