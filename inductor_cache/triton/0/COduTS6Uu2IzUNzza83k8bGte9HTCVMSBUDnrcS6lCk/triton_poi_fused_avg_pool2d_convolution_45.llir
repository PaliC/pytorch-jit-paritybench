; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_avg_pool2d_convolution_45(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #3, !dbg !10
  %9 = shl i32 %8, 6, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = lshr i32 %10, 4, !dbg !12
  %12 = and i32 %11, 15, !dbg !12
  %13 = or disjoint i32 %12, 16, !dbg !12
  %14 = or disjoint i32 %12, 32, !dbg !12
  %15 = or disjoint i32 %12, 48, !dbg !12
  %16 = shl i32 %10, 2, !dbg !12
  %17 = and i32 %16, 60, !dbg !12
  %18 = or disjoint i32 %9, %12, !dbg !13
  %19 = or disjoint i32 %9, %13, !dbg !13
  %20 = or disjoint i32 %9, %14, !dbg !13
  %21 = or disjoint i32 %9, %15, !dbg !13
  %22 = or disjoint i32 %9, %17, !dbg !13
  %23 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !14
  %24 = shl i32 %23, 6, !dbg !15
  %25 = or disjoint i32 %24, %12, !dbg !16
  %26 = or disjoint i32 %24, %13, !dbg !16
  %27 = or disjoint i32 %24, %14, !dbg !16
  %28 = or disjoint i32 %24, %15, !dbg !16
  %29 = icmp slt i32 %25, 64, !dbg !17
  %30 = icmp slt i32 %26, 64, !dbg !17
  %31 = icmp slt i32 %27, 64, !dbg !17
  %32 = icmp slt i32 %28, 64, !dbg !17
  %.frozen = freeze i32 %22, !dbg !18
  %33 = sdiv i32 %.frozen, 1280, !dbg !18
  %34 = mul i32 %33, 1280, !dbg !19
  %.decomposed = sub i32 %.frozen, %34, !dbg !19
  %35 = shl i32 %18, 6, !dbg !20
  %36 = shl i32 %19, 6, !dbg !20
  %37 = shl i32 %20, 6, !dbg !20
  %38 = shl i32 %21, 6, !dbg !20
  %39 = or disjoint i32 %24, %17, !dbg !16
  %40 = or disjoint i32 %39, 1, !dbg !16
  %41 = or disjoint i32 %39, 2, !dbg !16
  %42 = or disjoint i32 %39, 3, !dbg !16
  %43 = icmp slt i32 %39, 64, !dbg !17
  %44 = sdiv i32 %39, 8, !dbg !21
  %45 = insertelement <4 x i32> poison, i32 %42, i64 0, !dbg !22
  %46 = insertelement <4 x i32> %45, i32 %41, i64 1, !dbg !22
  %47 = insertelement <4 x i32> %46, i32 %39, i64 2, !dbg !22
  %48 = insertelement <4 x i32> %47, i32 %40, i64 3, !dbg !22
  %49 = srem <4 x i32> %48, splat (i32 8), !dbg !22
  %50 = shufflevector <4 x i32> %49, <4 x i32> poison, <8 x i32> <i32 0, i32 1, i32 1, i32 2, i32 0, i32 1, i32 3, i32 2>, !dbg !22
  %51 = add i32 %39, %35, !dbg !23
  %52 = add i32 %39, %36, !dbg !23
  %53 = add i32 %39, %37, !dbg !23
  %54 = add i32 %39, %38, !dbg !23
  %55 = sext i32 %51 to i64, !dbg !24
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !24
  %57 = sext i32 %52 to i64, !dbg !24
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !24
  %59 = sext i32 %53 to i64, !dbg !24
  %60 = getelementptr float, ptr addrspace(1) %0, i64 %59, !dbg !24
  %61 = sext i32 %54 to i64, !dbg !24
  %62 = getelementptr float, ptr addrspace(1) %0, i64 %61, !dbg !24
  %63 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %56, i1 %43) #3, !dbg !25
  %64 = extractvalue { i32, i32, i32, i32 } %63, 0, !dbg !25
  %65 = extractvalue { i32, i32, i32, i32 } %63, 1, !dbg !25
  %66 = extractvalue { i32, i32, i32, i32 } %63, 2, !dbg !25
  %67 = extractvalue { i32, i32, i32, i32 } %63, 3, !dbg !25
  %68 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %58, i1 %43) #3, !dbg !25
  %69 = extractvalue { i32, i32, i32, i32 } %68, 0, !dbg !25
  %70 = extractvalue { i32, i32, i32, i32 } %68, 1, !dbg !25
  %71 = extractvalue { i32, i32, i32, i32 } %68, 2, !dbg !25
  %72 = extractvalue { i32, i32, i32, i32 } %68, 3, !dbg !25
  %73 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %60, i1 %43) #3, !dbg !25
  %74 = extractvalue { i32, i32, i32, i32 } %73, 0, !dbg !25
  %75 = extractvalue { i32, i32, i32, i32 } %73, 1, !dbg !25
  %76 = extractvalue { i32, i32, i32, i32 } %73, 2, !dbg !25
  %77 = extractvalue { i32, i32, i32, i32 } %73, 3, !dbg !25
  %78 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %62, i1 %43) #3, !dbg !25
  %79 = extractvalue { i32, i32, i32, i32 } %78, 0, !dbg !25
  %80 = extractvalue { i32, i32, i32, i32 } %78, 1, !dbg !25
  %81 = extractvalue { i32, i32, i32, i32 } %78, 2, !dbg !25
  %82 = extractvalue { i32, i32, i32, i32 } %78, 3, !dbg !25
  %83 = add i32 %39, -9, !dbg !26
  %84 = add i32 %39, -8, !dbg !26
  %85 = add i32 %39, -7, !dbg !26
  %86 = add i32 %39, -6, !dbg !26
  %87 = add i32 %83, %35, !dbg !27
  %88 = add i32 %35, %84, !dbg !27
  %89 = add i32 %35, %85, !dbg !27
  %90 = add i32 %35, %86, !dbg !27
  %91 = add i32 %83, %36, !dbg !27
  %92 = add i32 %36, %84, !dbg !27
  %93 = add i32 %36, %85, !dbg !27
  %94 = add i32 %36, %86, !dbg !27
  %95 = add i32 %83, %37, !dbg !27
  %96 = add i32 %37, %84, !dbg !27
  %97 = add i32 %37, %85, !dbg !27
  %98 = add i32 %37, %86, !dbg !27
  %99 = add i32 %83, %38, !dbg !27
  %100 = add i32 %38, %84, !dbg !27
  %101 = add i32 %38, %85, !dbg !27
  %102 = add i32 %38, %86, !dbg !27
  %103 = sext i32 %87 to i64, !dbg !28
  %104 = getelementptr float, ptr addrspace(1) %0, i64 %103, !dbg !28
  %105 = sext i32 %88 to i64, !dbg !28
  %106 = getelementptr float, ptr addrspace(1) %0, i64 %105, !dbg !28
  %107 = sext i32 %89 to i64, !dbg !28
  %108 = getelementptr float, ptr addrspace(1) %0, i64 %107, !dbg !28
  %109 = sext i32 %90 to i64, !dbg !28
  %110 = getelementptr float, ptr addrspace(1) %0, i64 %109, !dbg !28
  %111 = sext i32 %91 to i64, !dbg !28
  %112 = getelementptr float, ptr addrspace(1) %0, i64 %111, !dbg !28
  %113 = sext i32 %92 to i64, !dbg !28
  %114 = getelementptr float, ptr addrspace(1) %0, i64 %113, !dbg !28
  %115 = sext i32 %93 to i64, !dbg !28
  %116 = getelementptr float, ptr addrspace(1) %0, i64 %115, !dbg !28
  %117 = sext i32 %94 to i64, !dbg !28
  %118 = getelementptr float, ptr addrspace(1) %0, i64 %117, !dbg !28
  %119 = sext i32 %95 to i64, !dbg !28
  %120 = getelementptr float, ptr addrspace(1) %0, i64 %119, !dbg !28
  %121 = sext i32 %96 to i64, !dbg !28
  %122 = getelementptr float, ptr addrspace(1) %0, i64 %121, !dbg !28
  %123 = sext i32 %97 to i64, !dbg !28
  %124 = getelementptr float, ptr addrspace(1) %0, i64 %123, !dbg !28
  %125 = sext i32 %98 to i64, !dbg !28
  %126 = getelementptr float, ptr addrspace(1) %0, i64 %125, !dbg !28
  %127 = sext i32 %99 to i64, !dbg !28
  %128 = getelementptr float, ptr addrspace(1) %0, i64 %127, !dbg !28
  %129 = sext i32 %100 to i64, !dbg !28
  %130 = getelementptr float, ptr addrspace(1) %0, i64 %129, !dbg !28
  %131 = sext i32 %101 to i64, !dbg !28
  %132 = getelementptr float, ptr addrspace(1) %0, i64 %131, !dbg !28
  %133 = sext i32 %102 to i64, !dbg !28
  %134 = getelementptr float, ptr addrspace(1) %0, i64 %133, !dbg !28
  %135 = icmp ult i32 %84, 56, !dbg !29
  %136 = icmp sgt <8 x i32> %50, <i32 6, i32 6, i32 -1, i32 -1, i32 0, i32 0, i32 0, i32 0>, !dbg !30
  %137 = extractelement <8 x i1> %136, i64 7, !dbg !31
  %138 = and i1 %135, %137, !dbg !29
  %139 = extractelement <8 x i1> %136, i64 6, !dbg !31
  %140 = and i1 %139, %135, !dbg !29
  %141 = extractelement <8 x i1> %136, i64 5, !dbg !31
  %142 = and i1 %141, %135, !dbg !29
  %143 = extractelement <8 x i1> %136, i64 4, !dbg !31
  %144 = and i1 %143, %135, !dbg !29
  %145 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %104, i1 %138, i32 0, i1 %138) #3, !dbg !32
  %146 = bitcast i32 %145 to float, !dbg !32
  %147 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %106, i1 %140, i32 0, i1 %140) #3, !dbg !32
  %148 = bitcast i32 %147 to float, !dbg !32
  %149 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %108, i1 %142, i32 0, i1 %142) #3, !dbg !32
  %150 = bitcast i32 %149 to float, !dbg !32
  %151 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %110, i1 %144, i32 0, i1 %144) #3, !dbg !32
  %152 = bitcast i32 %151 to float, !dbg !32
  %153 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %112, i1 %138, i32 0, i1 %138) #3, !dbg !32
  %154 = bitcast i32 %153 to float, !dbg !32
  %155 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %114, i1 %140, i32 0, i1 %140) #3, !dbg !32
  %156 = bitcast i32 %155 to float, !dbg !32
  %157 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %116, i1 %142, i32 0, i1 %142) #3, !dbg !32
  %158 = bitcast i32 %157 to float, !dbg !32
  %159 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %118, i1 %144, i32 0, i1 %144) #3, !dbg !32
  %160 = bitcast i32 %159 to float, !dbg !32
  %161 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %120, i1 %138, i32 0, i1 %138) #3, !dbg !32
  %162 = bitcast i32 %161 to float, !dbg !32
  %163 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %122, i1 %140, i32 0, i1 %140) #3, !dbg !32
  %164 = bitcast i32 %163 to float, !dbg !32
  %165 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %124, i1 %142, i32 0, i1 %142) #3, !dbg !32
  %166 = bitcast i32 %165 to float, !dbg !32
  %167 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %126, i1 %144, i32 0, i1 %144) #3, !dbg !32
  %168 = bitcast i32 %167 to float, !dbg !32
  %169 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %128, i1 %138, i32 0, i1 %138) #3, !dbg !32
  %170 = bitcast i32 %169 to float, !dbg !32
  %171 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %130, i1 %140, i32 0, i1 %140) #3, !dbg !32
  %172 = bitcast i32 %171 to float, !dbg !32
  %173 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %132, i1 %142, i32 0, i1 %142) #3, !dbg !32
  %174 = bitcast i32 %173 to float, !dbg !32
  %175 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %134, i1 %144, i32 0, i1 %144) #3, !dbg !32
  %176 = bitcast i32 %175 to float, !dbg !32
  %177 = extractelement <8 x i1> %136, i64 3, !dbg !33
  %178 = and i1 %135, %177, !dbg !34
  %179 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %106, i1 %178, i32 0, i1 %178, i32 0, i1 %178, i32 0, i1 %178, i32 0, i1 %178) #3, !dbg !35
  %180 = extractvalue { i32, i32, i32, i32 } %179, 0, !dbg !35
  %181 = extractvalue { i32, i32, i32, i32 } %179, 1, !dbg !35
  %182 = extractvalue { i32, i32, i32, i32 } %179, 2, !dbg !35
  %183 = extractvalue { i32, i32, i32, i32 } %179, 3, !dbg !35
  %184 = bitcast i32 %180 to float, !dbg !35
  %185 = bitcast i32 %181 to float, !dbg !35
  %186 = bitcast i32 %182 to float, !dbg !35
  %187 = bitcast i32 %183 to float, !dbg !35
  %188 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %114, i1 %178, i32 0, i1 %178, i32 0, i1 %178, i32 0, i1 %178, i32 0, i1 %178) #3, !dbg !35
  %189 = extractvalue { i32, i32, i32, i32 } %188, 0, !dbg !35
  %190 = extractvalue { i32, i32, i32, i32 } %188, 1, !dbg !35
  %191 = extractvalue { i32, i32, i32, i32 } %188, 2, !dbg !35
  %192 = extractvalue { i32, i32, i32, i32 } %188, 3, !dbg !35
  %193 = bitcast i32 %189 to float, !dbg !35
  %194 = bitcast i32 %190 to float, !dbg !35
  %195 = bitcast i32 %191 to float, !dbg !35
  %196 = bitcast i32 %192 to float, !dbg !35
  %197 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %122, i1 %178, i32 0, i1 %178, i32 0, i1 %178, i32 0, i1 %178, i32 0, i1 %178) #3, !dbg !35
  %198 = extractvalue { i32, i32, i32, i32 } %197, 0, !dbg !35
  %199 = extractvalue { i32, i32, i32, i32 } %197, 1, !dbg !35
  %200 = extractvalue { i32, i32, i32, i32 } %197, 2, !dbg !35
  %201 = extractvalue { i32, i32, i32, i32 } %197, 3, !dbg !35
  %202 = bitcast i32 %198 to float, !dbg !35
  %203 = bitcast i32 %199 to float, !dbg !35
  %204 = bitcast i32 %200 to float, !dbg !35
  %205 = bitcast i32 %201 to float, !dbg !35
  %206 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %130, i1 %178, i32 0, i1 %178, i32 0, i1 %178, i32 0, i1 %178, i32 0, i1 %178) #3, !dbg !35
  %207 = extractvalue { i32, i32, i32, i32 } %206, 0, !dbg !35
  %208 = extractvalue { i32, i32, i32, i32 } %206, 1, !dbg !35
  %209 = extractvalue { i32, i32, i32, i32 } %206, 2, !dbg !35
  %210 = extractvalue { i32, i32, i32, i32 } %206, 3, !dbg !35
  %211 = bitcast i32 %207 to float, !dbg !35
  %212 = bitcast i32 %208 to float, !dbg !35
  %213 = bitcast i32 %209 to float, !dbg !35
  %214 = bitcast i32 %210 to float, !dbg !35
  %215 = fadd float %146, %184, !dbg !36
  %216 = fadd float %148, %185, !dbg !36
  %217 = fadd float %150, %186, !dbg !36
  %218 = fadd float %152, %187, !dbg !36
  %219 = fadd float %154, %193, !dbg !36
  %220 = fadd float %156, %194, !dbg !36
  %221 = fadd float %158, %195, !dbg !36
  %222 = fadd float %160, %196, !dbg !36
  %223 = fadd float %162, %202, !dbg !36
  %224 = fadd float %164, %203, !dbg !36
  %225 = fadd float %166, %204, !dbg !36
  %226 = fadd float %168, %205, !dbg !36
  %227 = fadd float %170, %211, !dbg !36
  %228 = fadd float %172, %212, !dbg !36
  %229 = fadd float %174, %213, !dbg !36
  %230 = fadd float %176, %214, !dbg !36
  %231 = extractelement <4 x i32> %49, i64 2, !dbg !37
  %232 = or disjoint i32 %231, 1, !dbg !38
  %233 = extractelement <4 x i32> %49, i64 1, !dbg !39
  %234 = or disjoint i32 %233, 1, !dbg !38
  %235 = icmp slt i32 %232, 8, !dbg !40
  %236 = icmp slt i32 %234, 8, !dbg !40
  %237 = and i1 %177, %235, !dbg !33
  %238 = extractelement <4 x i32> %49, i64 3, !dbg !37
  %239 = icmp ult i32 %238, 7, !dbg !33
  %240 = extractelement <8 x i1> %136, i64 2, !dbg !33
  %241 = and i1 %240, %236, !dbg !33
  %242 = extractelement <4 x i32> %49, i64 0, !dbg !39
  %243 = add nsw i32 %242, 1, !dbg !33
  %244 = icmp ult i32 %243, 8, !dbg !33
  %245 = add i32 %39, -5, !dbg !41
  %246 = add i32 %39, -4, !dbg !41
  %247 = add i32 %35, %245, !dbg !42
  %248 = add i32 %35, %246, !dbg !42
  %249 = add i32 %36, %245, !dbg !42
  %250 = add i32 %36, %246, !dbg !42
  %251 = add i32 %37, %245, !dbg !42
  %252 = add i32 %37, %246, !dbg !42
  %253 = add i32 %38, %245, !dbg !42
  %254 = add i32 %38, %246, !dbg !42
  %255 = sext i32 %247 to i64, !dbg !43
  %256 = getelementptr float, ptr addrspace(1) %0, i64 %255, !dbg !43
  %257 = sext i32 %248 to i64, !dbg !43
  %258 = getelementptr float, ptr addrspace(1) %0, i64 %257, !dbg !43
  %259 = sext i32 %249 to i64, !dbg !43
  %260 = getelementptr float, ptr addrspace(1) %0, i64 %259, !dbg !43
  %261 = sext i32 %250 to i64, !dbg !43
  %262 = getelementptr float, ptr addrspace(1) %0, i64 %261, !dbg !43
  %263 = sext i32 %251 to i64, !dbg !43
  %264 = getelementptr float, ptr addrspace(1) %0, i64 %263, !dbg !43
  %265 = sext i32 %252 to i64, !dbg !43
  %266 = getelementptr float, ptr addrspace(1) %0, i64 %265, !dbg !43
  %267 = sext i32 %253 to i64, !dbg !43
  %268 = getelementptr float, ptr addrspace(1) %0, i64 %267, !dbg !43
  %269 = sext i32 %254 to i64, !dbg !43
  %270 = getelementptr float, ptr addrspace(1) %0, i64 %269, !dbg !43
  %271 = and i1 %135, %237, !dbg !44
  %272 = and i1 %239, %135, !dbg !44
  %273 = and i1 %241, %135, !dbg !44
  %274 = and i1 %244, %135, !dbg !44
  %275 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %108, i1 %271, i32 0, i1 %271) #3, !dbg !45
  %276 = bitcast i32 %275 to float, !dbg !45
  %277 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %110, i1 %272, i32 0, i1 %272) #3, !dbg !45
  %278 = bitcast i32 %277 to float, !dbg !45
  %279 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %256, i1 %273, i32 0, i1 %273) #3, !dbg !45
  %280 = bitcast i32 %279 to float, !dbg !45
  %281 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %258, i1 %274, i32 0, i1 %274) #3, !dbg !45
  %282 = bitcast i32 %281 to float, !dbg !45
  %283 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %116, i1 %271, i32 0, i1 %271) #3, !dbg !45
  %284 = bitcast i32 %283 to float, !dbg !45
  %285 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %118, i1 %272, i32 0, i1 %272) #3, !dbg !45
  %286 = bitcast i32 %285 to float, !dbg !45
  %287 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %260, i1 %273, i32 0, i1 %273) #3, !dbg !45
  %288 = bitcast i32 %287 to float, !dbg !45
  %289 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %262, i1 %274, i32 0, i1 %274) #3, !dbg !45
  %290 = bitcast i32 %289 to float, !dbg !45
  %291 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %124, i1 %271, i32 0, i1 %271) #3, !dbg !45
  %292 = bitcast i32 %291 to float, !dbg !45
  %293 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %126, i1 %272, i32 0, i1 %272) #3, !dbg !45
  %294 = bitcast i32 %293 to float, !dbg !45
  %295 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %264, i1 %273, i32 0, i1 %273) #3, !dbg !45
  %296 = bitcast i32 %295 to float, !dbg !45
  %297 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %266, i1 %274, i32 0, i1 %274) #3, !dbg !45
  %298 = bitcast i32 %297 to float, !dbg !45
  %299 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %132, i1 %271, i32 0, i1 %271) #3, !dbg !45
  %300 = bitcast i32 %299 to float, !dbg !45
  %301 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %134, i1 %272, i32 0, i1 %272) #3, !dbg !45
  %302 = bitcast i32 %301 to float, !dbg !45
  %303 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %268, i1 %273, i32 0, i1 %273) #3, !dbg !45
  %304 = bitcast i32 %303 to float, !dbg !45
  %305 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %270, i1 %274, i32 0, i1 %274) #3, !dbg !45
  %306 = bitcast i32 %305 to float, !dbg !45
  %307 = fadd float %215, %276, !dbg !46
  %308 = fadd float %216, %278, !dbg !46
  %309 = fadd float %217, %280, !dbg !46
  %310 = fadd float %218, %282, !dbg !46
  %311 = fadd float %219, %284, !dbg !46
  %312 = fadd float %220, %286, !dbg !46
  %313 = fadd float %221, %288, !dbg !46
  %314 = fadd float %222, %290, !dbg !46
  %315 = fadd float %223, %292, !dbg !46
  %316 = fadd float %224, %294, !dbg !46
  %317 = fadd float %225, %296, !dbg !46
  %318 = fadd float %226, %298, !dbg !46
  %319 = fadd float %227, %300, !dbg !46
  %320 = fadd float %228, %302, !dbg !46
  %321 = fadd float %229, %304, !dbg !46
  %322 = fadd float %230, %306, !dbg !46
  %323 = add i32 %39, -1, !dbg !47
  %324 = add i32 %323, %35, !dbg !48
  %325 = add i32 %35, %40, !dbg !48
  %326 = add i32 %35, %41, !dbg !48
  %327 = add i32 %323, %36, !dbg !48
  %328 = add i32 %36, %40, !dbg !48
  %329 = add i32 %36, %41, !dbg !48
  %330 = add i32 %323, %37, !dbg !48
  %331 = add i32 %37, %40, !dbg !48
  %332 = add i32 %37, %41, !dbg !48
  %333 = add i32 %323, %38, !dbg !48
  %334 = add i32 %38, %40, !dbg !48
  %335 = add i32 %38, %41, !dbg !48
  %336 = sext i32 %324 to i64, !dbg !49
  %337 = getelementptr float, ptr addrspace(1) %0, i64 %336, !dbg !49
  %338 = sext i32 %325 to i64, !dbg !49
  %339 = getelementptr float, ptr addrspace(1) %0, i64 %338, !dbg !49
  %340 = sext i32 %326 to i64, !dbg !49
  %341 = getelementptr float, ptr addrspace(1) %0, i64 %340, !dbg !49
  %342 = sext i32 %327 to i64, !dbg !49
  %343 = getelementptr float, ptr addrspace(1) %0, i64 %342, !dbg !49
  %344 = sext i32 %328 to i64, !dbg !49
  %345 = getelementptr float, ptr addrspace(1) %0, i64 %344, !dbg !49
  %346 = sext i32 %329 to i64, !dbg !49
  %347 = getelementptr float, ptr addrspace(1) %0, i64 %346, !dbg !49
  %348 = sext i32 %330 to i64, !dbg !49
  %349 = getelementptr float, ptr addrspace(1) %0, i64 %348, !dbg !49
  %350 = sext i32 %331 to i64, !dbg !49
  %351 = getelementptr float, ptr addrspace(1) %0, i64 %350, !dbg !49
  %352 = sext i32 %332 to i64, !dbg !49
  %353 = getelementptr float, ptr addrspace(1) %0, i64 %352, !dbg !49
  %354 = sext i32 %333 to i64, !dbg !49
  %355 = getelementptr float, ptr addrspace(1) %0, i64 %354, !dbg !49
  %356 = sext i32 %334 to i64, !dbg !49
  %357 = getelementptr float, ptr addrspace(1) %0, i64 %356, !dbg !49
  %358 = sext i32 %335 to i64, !dbg !49
  %359 = getelementptr float, ptr addrspace(1) %0, i64 %358, !dbg !49
  %360 = add i32 %39, 7, !dbg !50
  %361 = icmp ult i32 %360, 71, !dbg !50
  %362 = and i1 %361, %137, !dbg !50
  %363 = and i1 %139, %361, !dbg !50
  %364 = and i1 %141, %361, !dbg !50
  %365 = and i1 %143, %361, !dbg !50
  %366 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %337, i1 %362, i32 0, i1 %362) #3, !dbg !51
  %367 = bitcast i32 %366 to float, !dbg !51
  %368 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %56, i1 %363, i32 0, i1 %363) #3, !dbg !51
  %369 = bitcast i32 %368 to float, !dbg !51
  %370 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %339, i1 %364, i32 0, i1 %364) #3, !dbg !51
  %371 = bitcast i32 %370 to float, !dbg !51
  %372 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %341, i1 %365, i32 0, i1 %365) #3, !dbg !51
  %373 = bitcast i32 %372 to float, !dbg !51
  %374 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %343, i1 %362, i32 0, i1 %362) #3, !dbg !51
  %375 = bitcast i32 %374 to float, !dbg !51
  %376 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %58, i1 %363, i32 0, i1 %363) #3, !dbg !51
  %377 = bitcast i32 %376 to float, !dbg !51
  %378 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %345, i1 %364, i32 0, i1 %364) #3, !dbg !51
  %379 = bitcast i32 %378 to float, !dbg !51
  %380 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %347, i1 %365, i32 0, i1 %365) #3, !dbg !51
  %381 = bitcast i32 %380 to float, !dbg !51
  %382 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %349, i1 %362, i32 0, i1 %362) #3, !dbg !51
  %383 = bitcast i32 %382 to float, !dbg !51
  %384 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %60, i1 %363, i32 0, i1 %363) #3, !dbg !51
  %385 = bitcast i32 %384 to float, !dbg !51
  %386 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %351, i1 %364, i32 0, i1 %364) #3, !dbg !51
  %387 = bitcast i32 %386 to float, !dbg !51
  %388 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %353, i1 %365, i32 0, i1 %365) #3, !dbg !51
  %389 = bitcast i32 %388 to float, !dbg !51
  %390 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %355, i1 %362, i32 0, i1 %362) #3, !dbg !51
  %391 = bitcast i32 %390 to float, !dbg !51
  %392 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %62, i1 %363, i32 0, i1 %363) #3, !dbg !51
  %393 = bitcast i32 %392 to float, !dbg !51
  %394 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %357, i1 %364, i32 0, i1 %364) #3, !dbg !51
  %395 = bitcast i32 %394 to float, !dbg !51
  %396 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %359, i1 %365, i32 0, i1 %365) #3, !dbg !51
  %397 = bitcast i32 %396 to float, !dbg !51
  %398 = fadd float %307, %367, !dbg !52
  %399 = fadd float %308, %369, !dbg !52
  %400 = fadd float %309, %371, !dbg !52
  %401 = fadd float %310, %373, !dbg !52
  %402 = fadd float %311, %375, !dbg !52
  %403 = fadd float %312, %377, !dbg !52
  %404 = fadd float %313, %379, !dbg !52
  %405 = fadd float %314, %381, !dbg !52
  %406 = fadd float %315, %383, !dbg !52
  %407 = fadd float %316, %385, !dbg !52
  %408 = fadd float %317, %387, !dbg !52
  %409 = fadd float %318, %389, !dbg !52
  %410 = fadd float %319, %391, !dbg !52
  %411 = fadd float %320, %393, !dbg !52
  %412 = fadd float %321, %395, !dbg !52
  %413 = fadd float %322, %397, !dbg !52
  %414 = and i1 %361, %177, !dbg !53
  %415 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %56, i1 %414, i32 0, i1 %414, i32 0, i1 %414, i32 0, i1 %414, i32 0, i1 %414) #3, !dbg !54
  %416 = extractvalue { i32, i32, i32, i32 } %415, 0, !dbg !54
  %417 = extractvalue { i32, i32, i32, i32 } %415, 1, !dbg !54
  %418 = extractvalue { i32, i32, i32, i32 } %415, 2, !dbg !54
  %419 = extractvalue { i32, i32, i32, i32 } %415, 3, !dbg !54
  %420 = bitcast i32 %416 to float, !dbg !54
  %421 = bitcast i32 %417 to float, !dbg !54
  %422 = bitcast i32 %418 to float, !dbg !54
  %423 = bitcast i32 %419 to float, !dbg !54
  %424 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %58, i1 %414, i32 0, i1 %414, i32 0, i1 %414, i32 0, i1 %414, i32 0, i1 %414) #3, !dbg !54
  %425 = extractvalue { i32, i32, i32, i32 } %424, 0, !dbg !54
  %426 = extractvalue { i32, i32, i32, i32 } %424, 1, !dbg !54
  %427 = extractvalue { i32, i32, i32, i32 } %424, 2, !dbg !54
  %428 = extractvalue { i32, i32, i32, i32 } %424, 3, !dbg !54
  %429 = bitcast i32 %425 to float, !dbg !54
  %430 = bitcast i32 %426 to float, !dbg !54
  %431 = bitcast i32 %427 to float, !dbg !54
  %432 = bitcast i32 %428 to float, !dbg !54
  %433 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %60, i1 %414, i32 0, i1 %414, i32 0, i1 %414, i32 0, i1 %414, i32 0, i1 %414) #3, !dbg !54
  %434 = extractvalue { i32, i32, i32, i32 } %433, 0, !dbg !54
  %435 = extractvalue { i32, i32, i32, i32 } %433, 1, !dbg !54
  %436 = extractvalue { i32, i32, i32, i32 } %433, 2, !dbg !54
  %437 = extractvalue { i32, i32, i32, i32 } %433, 3, !dbg !54
  %438 = bitcast i32 %434 to float, !dbg !54
  %439 = bitcast i32 %435 to float, !dbg !54
  %440 = bitcast i32 %436 to float, !dbg !54
  %441 = bitcast i32 %437 to float, !dbg !54
  %442 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %62, i1 %414, i32 0, i1 %414, i32 0, i1 %414, i32 0, i1 %414, i32 0, i1 %414) #3, !dbg !54
  %443 = extractvalue { i32, i32, i32, i32 } %442, 0, !dbg !54
  %444 = extractvalue { i32, i32, i32, i32 } %442, 1, !dbg !54
  %445 = extractvalue { i32, i32, i32, i32 } %442, 2, !dbg !54
  %446 = extractvalue { i32, i32, i32, i32 } %442, 3, !dbg !54
  %447 = bitcast i32 %443 to float, !dbg !54
  %448 = bitcast i32 %444 to float, !dbg !54
  %449 = bitcast i32 %445 to float, !dbg !54
  %450 = bitcast i32 %446 to float, !dbg !54
  %451 = fadd float %398, %420, !dbg !55
  %452 = fadd float %399, %421, !dbg !55
  %453 = fadd float %400, %422, !dbg !55
  %454 = fadd float %401, %423, !dbg !55
  %455 = fadd float %402, %429, !dbg !55
  %456 = fadd float %403, %430, !dbg !55
  %457 = fadd float %404, %431, !dbg !55
  %458 = fadd float %405, %432, !dbg !55
  %459 = fadd float %406, %438, !dbg !55
  %460 = fadd float %407, %439, !dbg !55
  %461 = fadd float %408, %440, !dbg !55
  %462 = fadd float %409, %441, !dbg !55
  %463 = fadd float %410, %447, !dbg !55
  %464 = fadd float %411, %448, !dbg !55
  %465 = fadd float %412, %449, !dbg !55
  %466 = fadd float %413, %450, !dbg !55
  %467 = add i32 %39, 4, !dbg !56
  %468 = add i32 %35, %42, !dbg !57
  %469 = add i32 %35, %467, !dbg !57
  %470 = add i32 %36, %42, !dbg !57
  %471 = add i32 %36, %467, !dbg !57
  %472 = add i32 %37, %42, !dbg !57
  %473 = add i32 %37, %467, !dbg !57
  %474 = add i32 %38, %42, !dbg !57
  %475 = add i32 %38, %467, !dbg !57
  %476 = sext i32 %468 to i64, !dbg !58
  %477 = getelementptr float, ptr addrspace(1) %0, i64 %476, !dbg !58
  %478 = sext i32 %469 to i64, !dbg !58
  %479 = getelementptr float, ptr addrspace(1) %0, i64 %478, !dbg !58
  %480 = sext i32 %470 to i64, !dbg !58
  %481 = getelementptr float, ptr addrspace(1) %0, i64 %480, !dbg !58
  %482 = sext i32 %471 to i64, !dbg !58
  %483 = getelementptr float, ptr addrspace(1) %0, i64 %482, !dbg !58
  %484 = sext i32 %472 to i64, !dbg !58
  %485 = getelementptr float, ptr addrspace(1) %0, i64 %484, !dbg !58
  %486 = sext i32 %473 to i64, !dbg !58
  %487 = getelementptr float, ptr addrspace(1) %0, i64 %486, !dbg !58
  %488 = sext i32 %474 to i64, !dbg !58
  %489 = getelementptr float, ptr addrspace(1) %0, i64 %488, !dbg !58
  %490 = sext i32 %475 to i64, !dbg !58
  %491 = getelementptr float, ptr addrspace(1) %0, i64 %490, !dbg !58
  %492 = and i1 %361, %237, !dbg !59
  %493 = and i1 %239, %361, !dbg !59
  %494 = and i1 %241, %361, !dbg !59
  %495 = and i1 %244, %361, !dbg !59
  %496 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %339, i1 %492, i32 0, i1 %492) #3, !dbg !60
  %497 = bitcast i32 %496 to float, !dbg !60
  %498 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %341, i1 %493, i32 0, i1 %493) #3, !dbg !60
  %499 = bitcast i32 %498 to float, !dbg !60
  %500 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %477, i1 %494, i32 0, i1 %494) #3, !dbg !60
  %501 = bitcast i32 %500 to float, !dbg !60
  %502 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %479, i1 %495, i32 0, i1 %495) #3, !dbg !60
  %503 = bitcast i32 %502 to float, !dbg !60
  %504 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %345, i1 %492, i32 0, i1 %492) #3, !dbg !60
  %505 = bitcast i32 %504 to float, !dbg !60
  %506 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %347, i1 %493, i32 0, i1 %493) #3, !dbg !60
  %507 = bitcast i32 %506 to float, !dbg !60
  %508 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %481, i1 %494, i32 0, i1 %494) #3, !dbg !60
  %509 = bitcast i32 %508 to float, !dbg !60
  %510 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %483, i1 %495, i32 0, i1 %495) #3, !dbg !60
  %511 = bitcast i32 %510 to float, !dbg !60
  %512 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %351, i1 %492, i32 0, i1 %492) #3, !dbg !60
  %513 = bitcast i32 %512 to float, !dbg !60
  %514 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %353, i1 %493, i32 0, i1 %493) #3, !dbg !60
  %515 = bitcast i32 %514 to float, !dbg !60
  %516 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %485, i1 %494, i32 0, i1 %494) #3, !dbg !60
  %517 = bitcast i32 %516 to float, !dbg !60
  %518 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %487, i1 %495, i32 0, i1 %495) #3, !dbg !60
  %519 = bitcast i32 %518 to float, !dbg !60
  %520 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %357, i1 %492, i32 0, i1 %492) #3, !dbg !60
  %521 = bitcast i32 %520 to float, !dbg !60
  %522 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %359, i1 %493, i32 0, i1 %493) #3, !dbg !60
  %523 = bitcast i32 %522 to float, !dbg !60
  %524 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %489, i1 %494, i32 0, i1 %494) #3, !dbg !60
  %525 = bitcast i32 %524 to float, !dbg !60
  %526 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %491, i1 %495, i32 0, i1 %495) #3, !dbg !60
  %527 = bitcast i32 %526 to float, !dbg !60
  %528 = fadd float %451, %497, !dbg !61
  %529 = fadd float %452, %499, !dbg !61
  %530 = fadd float %453, %501, !dbg !61
  %531 = fadd float %454, %503, !dbg !61
  %532 = fadd float %455, %505, !dbg !61
  %533 = fadd float %456, %507, !dbg !61
  %534 = fadd float %457, %509, !dbg !61
  %535 = fadd float %458, %511, !dbg !61
  %536 = fadd float %459, %513, !dbg !61
  %537 = fadd float %460, %515, !dbg !61
  %538 = fadd float %461, %517, !dbg !61
  %539 = fadd float %462, %519, !dbg !61
  %540 = fadd float %463, %521, !dbg !61
  %541 = fadd float %464, %523, !dbg !61
  %542 = fadd float %465, %525, !dbg !61
  %543 = fadd float %466, %527, !dbg !61
  %544 = add i32 %39, 8, !dbg !62
  %545 = add i32 %39, 9, !dbg !62
  %546 = add i32 %39, 10, !dbg !62
  %547 = add i32 %360, %35, !dbg !63
  %548 = add i32 %35, %544, !dbg !63
  %549 = add i32 %35, %545, !dbg !63
  %550 = add i32 %35, %546, !dbg !63
  %551 = add i32 %360, %36, !dbg !63
  %552 = add i32 %36, %544, !dbg !63
  %553 = add i32 %36, %545, !dbg !63
  %554 = add i32 %36, %546, !dbg !63
  %555 = add i32 %360, %37, !dbg !63
  %556 = add i32 %37, %544, !dbg !63
  %557 = add i32 %37, %545, !dbg !63
  %558 = add i32 %37, %546, !dbg !63
  %559 = add i32 %360, %38, !dbg !63
  %560 = add i32 %38, %544, !dbg !63
  %561 = add i32 %38, %545, !dbg !63
  %562 = add i32 %38, %546, !dbg !63
  %563 = sext i32 %547 to i64, !dbg !64
  %564 = getelementptr float, ptr addrspace(1) %0, i64 %563, !dbg !64
  %565 = sext i32 %548 to i64, !dbg !64
  %566 = getelementptr float, ptr addrspace(1) %0, i64 %565, !dbg !64
  %567 = sext i32 %549 to i64, !dbg !64
  %568 = getelementptr float, ptr addrspace(1) %0, i64 %567, !dbg !64
  %569 = sext i32 %550 to i64, !dbg !64
  %570 = getelementptr float, ptr addrspace(1) %0, i64 %569, !dbg !64
  %571 = sext i32 %551 to i64, !dbg !64
  %572 = getelementptr float, ptr addrspace(1) %0, i64 %571, !dbg !64
  %573 = sext i32 %552 to i64, !dbg !64
  %574 = getelementptr float, ptr addrspace(1) %0, i64 %573, !dbg !64
  %575 = sext i32 %553 to i64, !dbg !64
  %576 = getelementptr float, ptr addrspace(1) %0, i64 %575, !dbg !64
  %577 = sext i32 %554 to i64, !dbg !64
  %578 = getelementptr float, ptr addrspace(1) %0, i64 %577, !dbg !64
  %579 = sext i32 %555 to i64, !dbg !64
  %580 = getelementptr float, ptr addrspace(1) %0, i64 %579, !dbg !64
  %581 = sext i32 %556 to i64, !dbg !64
  %582 = getelementptr float, ptr addrspace(1) %0, i64 %581, !dbg !64
  %583 = sext i32 %557 to i64, !dbg !64
  %584 = getelementptr float, ptr addrspace(1) %0, i64 %583, !dbg !64
  %585 = sext i32 %558 to i64, !dbg !64
  %586 = getelementptr float, ptr addrspace(1) %0, i64 %585, !dbg !64
  %587 = sext i32 %559 to i64, !dbg !64
  %588 = getelementptr float, ptr addrspace(1) %0, i64 %587, !dbg !64
  %589 = sext i32 %560 to i64, !dbg !64
  %590 = getelementptr float, ptr addrspace(1) %0, i64 %589, !dbg !64
  %591 = sext i32 %561 to i64, !dbg !64
  %592 = getelementptr float, ptr addrspace(1) %0, i64 %591, !dbg !64
  %593 = sext i32 %562 to i64, !dbg !64
  %594 = getelementptr float, ptr addrspace(1) %0, i64 %593, !dbg !64
  %595 = add i32 %39, 15, !dbg !31
  %596 = icmp ult i32 %595, 71, !dbg !31
  %597 = and i1 %596, %137, !dbg !31
  %598 = and i1 %139, %596, !dbg !31
  %599 = and i1 %141, %596, !dbg !31
  %600 = and i1 %143, %596, !dbg !31
  %601 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %564, i1 %597, i32 0, i1 %597) #3, !dbg !65
  %602 = bitcast i32 %601 to float, !dbg !65
  %603 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %566, i1 %598, i32 0, i1 %598) #3, !dbg !65
  %604 = bitcast i32 %603 to float, !dbg !65
  %605 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %568, i1 %599, i32 0, i1 %599) #3, !dbg !65
  %606 = bitcast i32 %605 to float, !dbg !65
  %607 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %570, i1 %600, i32 0, i1 %600) #3, !dbg !65
  %608 = bitcast i32 %607 to float, !dbg !65
  %609 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %572, i1 %597, i32 0, i1 %597) #3, !dbg !65
  %610 = bitcast i32 %609 to float, !dbg !65
  %611 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %574, i1 %598, i32 0, i1 %598) #3, !dbg !65
  %612 = bitcast i32 %611 to float, !dbg !65
  %613 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %576, i1 %599, i32 0, i1 %599) #3, !dbg !65
  %614 = bitcast i32 %613 to float, !dbg !65
  %615 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %578, i1 %600, i32 0, i1 %600) #3, !dbg !65
  %616 = bitcast i32 %615 to float, !dbg !65
  %617 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %580, i1 %597, i32 0, i1 %597) #3, !dbg !65
  %618 = bitcast i32 %617 to float, !dbg !65
  %619 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %582, i1 %598, i32 0, i1 %598) #3, !dbg !65
  %620 = bitcast i32 %619 to float, !dbg !65
  %621 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %584, i1 %599, i32 0, i1 %599) #3, !dbg !65
  %622 = bitcast i32 %621 to float, !dbg !65
  %623 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %586, i1 %600, i32 0, i1 %600) #3, !dbg !65
  %624 = bitcast i32 %623 to float, !dbg !65
  %625 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %588, i1 %597, i32 0, i1 %597) #3, !dbg !65
  %626 = bitcast i32 %625 to float, !dbg !65
  %627 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %590, i1 %598, i32 0, i1 %598) #3, !dbg !65
  %628 = bitcast i32 %627 to float, !dbg !65
  %629 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %592, i1 %599, i32 0, i1 %599) #3, !dbg !65
  %630 = bitcast i32 %629 to float, !dbg !65
  %631 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %594, i1 %600, i32 0, i1 %600) #3, !dbg !65
  %632 = bitcast i32 %631 to float, !dbg !65
  %633 = fadd float %528, %602, !dbg !66
  %634 = fadd float %529, %604, !dbg !66
  %635 = fadd float %530, %606, !dbg !66
  %636 = fadd float %531, %608, !dbg !66
  %637 = fadd float %532, %610, !dbg !66
  %638 = fadd float %533, %612, !dbg !66
  %639 = fadd float %534, %614, !dbg !66
  %640 = fadd float %535, %616, !dbg !66
  %641 = fadd float %536, %618, !dbg !66
  %642 = fadd float %537, %620, !dbg !66
  %643 = fadd float %538, %622, !dbg !66
  %644 = fadd float %539, %624, !dbg !66
  %645 = fadd float %540, %626, !dbg !66
  %646 = fadd float %541, %628, !dbg !66
  %647 = fadd float %542, %630, !dbg !66
  %648 = fadd float %543, %632, !dbg !66
  %649 = and i1 %596, %177, !dbg !67
  %650 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %566, i1 %649, i32 0, i1 %649, i32 0, i1 %649, i32 0, i1 %649, i32 0, i1 %649) #3, !dbg !68
  %651 = extractvalue { i32, i32, i32, i32 } %650, 0, !dbg !68
  %652 = extractvalue { i32, i32, i32, i32 } %650, 1, !dbg !68
  %653 = extractvalue { i32, i32, i32, i32 } %650, 2, !dbg !68
  %654 = extractvalue { i32, i32, i32, i32 } %650, 3, !dbg !68
  %655 = bitcast i32 %651 to float, !dbg !68
  %656 = bitcast i32 %652 to float, !dbg !68
  %657 = bitcast i32 %653 to float, !dbg !68
  %658 = bitcast i32 %654 to float, !dbg !68
  %659 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %574, i1 %649, i32 0, i1 %649, i32 0, i1 %649, i32 0, i1 %649, i32 0, i1 %649) #3, !dbg !68
  %660 = extractvalue { i32, i32, i32, i32 } %659, 0, !dbg !68
  %661 = extractvalue { i32, i32, i32, i32 } %659, 1, !dbg !68
  %662 = extractvalue { i32, i32, i32, i32 } %659, 2, !dbg !68
  %663 = extractvalue { i32, i32, i32, i32 } %659, 3, !dbg !68
  %664 = bitcast i32 %660 to float, !dbg !68
  %665 = bitcast i32 %661 to float, !dbg !68
  %666 = bitcast i32 %662 to float, !dbg !68
  %667 = bitcast i32 %663 to float, !dbg !68
  %668 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %582, i1 %649, i32 0, i1 %649, i32 0, i1 %649, i32 0, i1 %649, i32 0, i1 %649) #3, !dbg !68
  %669 = extractvalue { i32, i32, i32, i32 } %668, 0, !dbg !68
  %670 = extractvalue { i32, i32, i32, i32 } %668, 1, !dbg !68
  %671 = extractvalue { i32, i32, i32, i32 } %668, 2, !dbg !68
  %672 = extractvalue { i32, i32, i32, i32 } %668, 3, !dbg !68
  %673 = bitcast i32 %669 to float, !dbg !68
  %674 = bitcast i32 %670 to float, !dbg !68
  %675 = bitcast i32 %671 to float, !dbg !68
  %676 = bitcast i32 %672 to float, !dbg !68
  %677 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];\0A\09@!$7 mov.u32 $0, $6;\0A\09@!$9 mov.u32 $1, $8;\0A\09@!$11 mov.u32 $2, $10;\0A\09@!$13 mov.u32 $3, $12;", "=r,=r,=r,=r,l,b,r,b,r,b,r,b,r,b"(ptr addrspace(1) %590, i1 %649, i32 0, i1 %649, i32 0, i1 %649, i32 0, i1 %649, i32 0, i1 %649) #3, !dbg !68
  %678 = extractvalue { i32, i32, i32, i32 } %677, 0, !dbg !68
  %679 = extractvalue { i32, i32, i32, i32 } %677, 1, !dbg !68
  %680 = extractvalue { i32, i32, i32, i32 } %677, 2, !dbg !68
  %681 = extractvalue { i32, i32, i32, i32 } %677, 3, !dbg !68
  %682 = bitcast i32 %678 to float, !dbg !68
  %683 = bitcast i32 %679 to float, !dbg !68
  %684 = bitcast i32 %680 to float, !dbg !68
  %685 = bitcast i32 %681 to float, !dbg !68
  %686 = fadd float %633, %655, !dbg !69
  %687 = fadd float %634, %656, !dbg !69
  %688 = fadd float %635, %657, !dbg !69
  %689 = fadd float %636, %658, !dbg !69
  %690 = fadd float %637, %664, !dbg !69
  %691 = fadd float %638, %665, !dbg !69
  %692 = fadd float %639, %666, !dbg !69
  %693 = fadd float %640, %667, !dbg !69
  %694 = fadd float %641, %673, !dbg !69
  %695 = fadd float %642, %674, !dbg !69
  %696 = fadd float %643, %675, !dbg !69
  %697 = fadd float %644, %676, !dbg !69
  %698 = fadd float %645, %682, !dbg !69
  %699 = fadd float %646, %683, !dbg !69
  %700 = fadd float %647, %684, !dbg !69
  %701 = fadd float %648, %685, !dbg !69
  %702 = add i32 %39, 11, !dbg !70
  %703 = add i32 %39, 12, !dbg !70
  %704 = add i32 %35, %702, !dbg !71
  %705 = add i32 %35, %703, !dbg !71
  %706 = add i32 %36, %702, !dbg !71
  %707 = add i32 %36, %703, !dbg !71
  %708 = add i32 %37, %702, !dbg !71
  %709 = add i32 %37, %703, !dbg !71
  %710 = add i32 %38, %702, !dbg !71
  %711 = add i32 %38, %703, !dbg !71
  %712 = sext i32 %704 to i64, !dbg !72
  %713 = getelementptr float, ptr addrspace(1) %0, i64 %712, !dbg !72
  %714 = sext i32 %705 to i64, !dbg !72
  %715 = getelementptr float, ptr addrspace(1) %0, i64 %714, !dbg !72
  %716 = sext i32 %706 to i64, !dbg !72
  %717 = getelementptr float, ptr addrspace(1) %0, i64 %716, !dbg !72
  %718 = sext i32 %707 to i64, !dbg !72
  %719 = getelementptr float, ptr addrspace(1) %0, i64 %718, !dbg !72
  %720 = sext i32 %708 to i64, !dbg !72
  %721 = getelementptr float, ptr addrspace(1) %0, i64 %720, !dbg !72
  %722 = sext i32 %709 to i64, !dbg !72
  %723 = getelementptr float, ptr addrspace(1) %0, i64 %722, !dbg !72
  %724 = sext i32 %710 to i64, !dbg !72
  %725 = getelementptr float, ptr addrspace(1) %0, i64 %724, !dbg !72
  %726 = sext i32 %711 to i64, !dbg !72
  %727 = getelementptr float, ptr addrspace(1) %0, i64 %726, !dbg !72
  %728 = and i1 %596, %237, !dbg !73
  %729 = and i1 %239, %596, !dbg !73
  %730 = and i1 %241, %596, !dbg !73
  %731 = and i1 %244, %596, !dbg !73
  %732 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %568, i1 %728, i32 0, i1 %728) #3, !dbg !74
  %733 = bitcast i32 %732 to float, !dbg !74
  %734 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %570, i1 %729, i32 0, i1 %729) #3, !dbg !74
  %735 = bitcast i32 %734 to float, !dbg !74
  %736 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %713, i1 %730, i32 0, i1 %730) #3, !dbg !74
  %737 = bitcast i32 %736 to float, !dbg !74
  %738 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %715, i1 %731, i32 0, i1 %731) #3, !dbg !74
  %739 = bitcast i32 %738 to float, !dbg !74
  %740 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %576, i1 %728, i32 0, i1 %728) #3, !dbg !74
  %741 = bitcast i32 %740 to float, !dbg !74
  %742 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %578, i1 %729, i32 0, i1 %729) #3, !dbg !74
  %743 = bitcast i32 %742 to float, !dbg !74
  %744 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %717, i1 %730, i32 0, i1 %730) #3, !dbg !74
  %745 = bitcast i32 %744 to float, !dbg !74
  %746 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %719, i1 %731, i32 0, i1 %731) #3, !dbg !74
  %747 = bitcast i32 %746 to float, !dbg !74
  %748 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %584, i1 %728, i32 0, i1 %728) #3, !dbg !74
  %749 = bitcast i32 %748 to float, !dbg !74
  %750 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %586, i1 %729, i32 0, i1 %729) #3, !dbg !74
  %751 = bitcast i32 %750 to float, !dbg !74
  %752 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %721, i1 %730, i32 0, i1 %730) #3, !dbg !74
  %753 = bitcast i32 %752 to float, !dbg !74
  %754 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %723, i1 %731, i32 0, i1 %731) #3, !dbg !74
  %755 = bitcast i32 %754 to float, !dbg !74
  %756 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %592, i1 %728, i32 0, i1 %728) #3, !dbg !74
  %757 = bitcast i32 %756 to float, !dbg !74
  %758 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %594, i1 %729, i32 0, i1 %729) #3, !dbg !74
  %759 = bitcast i32 %758 to float, !dbg !74
  %760 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %725, i1 %730, i32 0, i1 %730) #3, !dbg !74
  %761 = bitcast i32 %760 to float, !dbg !74
  %762 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %727, i1 %731, i32 0, i1 %731) #3, !dbg !74
  %763 = bitcast i32 %762 to float, !dbg !74
  %764 = fadd float %686, %733, !dbg !75
  %765 = fadd float %687, %735, !dbg !75
  %766 = fadd float %688, %737, !dbg !75
  %767 = fadd float %689, %739, !dbg !75
  %768 = fadd float %690, %741, !dbg !75
  %769 = fadd float %691, %743, !dbg !75
  %770 = fadd float %692, %745, !dbg !75
  %771 = fadd float %693, %747, !dbg !75
  %772 = fadd float %694, %749, !dbg !75
  %773 = fadd float %695, %751, !dbg !75
  %774 = fadd float %696, %753, !dbg !75
  %775 = fadd float %697, %755, !dbg !75
  %776 = fadd float %698, %757, !dbg !75
  %777 = fadd float %699, %759, !dbg !75
  %778 = fadd float %700, %761, !dbg !75
  %779 = fadd float %701, %763, !dbg !75
  %780 = or disjoint i32 %231, 2, !dbg !76
  %781 = or disjoint i32 %238, 2, !dbg !76
  %782 = add nsw i32 %233, 2, !dbg !76
  %783 = add nsw i32 %242, 2, !dbg !76
  %784 = extractelement <8 x i1> %136, i64 1, !dbg !77
  %785 = select i1 %784, i32 9, i32 0, !dbg !77
  %786 = extractelement <8 x i1> %136, i64 0, !dbg !77
  %787 = select i1 %786, i32 9, i32 0, !dbg !77
  %788 = icmp slt i32 %233, 7, !dbg !78
  %789 = icmp slt i32 %242, 7, !dbg !78
  %790 = select i1 %788, i32 %782, i32 0, !dbg !79
  %791 = select i1 %789, i32 %783, i32 0, !dbg !79
  %792 = tail call i32 @llvm.smin.i32(i32 %780, i32 9), !dbg !80
  %793 = tail call i32 @llvm.smin.i32(i32 %781, i32 9), !dbg !80
  %794 = add nsw i32 %785, %790, !dbg !80
  %795 = add nsw i32 %787, %791, !dbg !80
  %796 = add nsw i32 %44, 2, !dbg !81
  %797 = icmp sgt i32 %39, 55, !dbg !82
  %798 = select i1 %797, i32 9, i32 0, !dbg !83
  %799 = icmp slt i32 %39, 56, !dbg !84
  %800 = select i1 %799, i32 %796, i32 0, !dbg !85
  %801 = add nsw i32 %800, %798, !dbg !86
  %reass.add = sub nsw i32 %801, %44
  %reass.mul = mul i32 %reass.add, %792
  %reass.add83 = sub nsw i32 %44, %801
  %reass.mul84 = mul i32 %reass.add83, %231
  %802 = add nsw i32 %44, %231, !dbg !37
  %reass.sub = sub i32 %792, %802, !dbg !39
  %803 = add i32 %reass.sub, 1, !dbg !39
  %804 = add i32 %803, %801, !dbg !87
  %805 = add i32 %804, %reass.mul, !dbg !88
  %806 = add i32 %805, %reass.mul84, !dbg !89
  %reass.mul78 = mul i32 %reass.add, %793
  %reass.mul86 = mul i32 %reass.add83, %238
  %reass.sub91 = sub i32 %793, %238, !dbg !37
  %807 = or disjoint i32 %reass.sub91, 1, !dbg !37
  %808 = sub i32 %807, %44, !dbg !39
  %809 = add i32 %808, %801, !dbg !87
  %810 = add i32 %809, %reass.mul78, !dbg !88
  %811 = add i32 %810, %reass.mul86, !dbg !89
  %reass.mul80 = mul i32 %reass.add, %794
  %reass.mul88 = mul i32 %reass.add83, %233
  %812 = add nsw i32 %794, 1, !dbg !39
  %813 = add nsw i32 %233, %44, !dbg !39
  %814 = sub nsw i32 %812, %813, !dbg !39
  %815 = add nsw i32 %814, %801, !dbg !87
  %816 = add i32 %815, %reass.mul80, !dbg !88
  %817 = add i32 %816, %reass.mul88, !dbg !89
  %reass.mul82 = mul i32 %reass.add, %795
  %reass.mul90 = mul i32 %reass.add83, %242
  %818 = add nsw i32 %795, 1, !dbg !39
  %819 = add nsw i32 %242, %44, !dbg !39
  %820 = sub nsw i32 %818, %819, !dbg !39
  %821 = add nsw i32 %820, %801, !dbg !87
  %822 = add i32 %821, %reass.mul82, !dbg !88
  %823 = add i32 %822, %reass.mul90, !dbg !89
  %824 = sitofp i32 %806 to float, !dbg !90
  %825 = sitofp i32 %811 to float, !dbg !90
  %826 = sitofp i32 %817 to float, !dbg !90
  %827 = sitofp i32 %823 to float, !dbg !90
  %828 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %764, float %824) #3, !dbg !90
  %829 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %765, float %825) #3, !dbg !90
  %830 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %766, float %826) #3, !dbg !90
  %831 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %767, float %827) #3, !dbg !90
  %832 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %768, float %824) #3, !dbg !90
  %833 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %769, float %825) #3, !dbg !90
  %834 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %770, float %826) #3, !dbg !90
  %835 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %771, float %827) #3, !dbg !90
  %836 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %772, float %824) #3, !dbg !90
  %837 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %773, float %825) #3, !dbg !90
  %838 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %774, float %826) #3, !dbg !90
  %839 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %775, float %827) #3, !dbg !90
  %840 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %776, float %824) #3, !dbg !90
  %841 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %777, float %825) #3, !dbg !90
  %842 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %778, float %826) #3, !dbg !90
  %843 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %779, float %827) #3, !dbg !90
  %844 = mul i32 %25, 1280, !dbg !91
  %845 = mul i32 %26, 1280, !dbg !91
  %846 = mul i32 %27, 1280, !dbg !91
  %847 = mul i32 %28, 1280, !dbg !91
  %848 = mul i32 %33, 81920, !dbg !92
  %849 = add i32 %848, %.decomposed, !dbg !93
  %850 = add i32 %849, %844, !dbg !94
  %851 = add i32 %849, %845, !dbg !94
  %852 = add i32 %849, %846, !dbg !94
  %853 = add i32 %849, %847, !dbg !94
  %854 = sext i32 %850 to i64, !dbg !95
  %855 = getelementptr float, ptr addrspace(1) %1, i64 %854, !dbg !95
  %856 = sext i32 %851 to i64, !dbg !95
  %857 = getelementptr float, ptr addrspace(1) %1, i64 %856, !dbg !95
  %858 = sext i32 %852 to i64, !dbg !95
  %859 = getelementptr float, ptr addrspace(1) %1, i64 %858, !dbg !95
  %860 = sext i32 %853 to i64, !dbg !95
  %861 = getelementptr float, ptr addrspace(1) %1, i64 %860, !dbg !95
  %862 = shl i32 %10, 8, !dbg !96
  %863 = and i32 %862, 3840, !dbg !96
  %864 = or disjoint i32 %863, %12, !dbg !96
  %865 = and i32 %16, 1020, !dbg !96
  %866 = lshr exact i32 %863, 2, !dbg !96
  %867 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %866, !dbg !96
  %868 = getelementptr float, ptr addrspace(3) %867, i32 %864, !dbg !96
  %869 = insertelement <1 x i32> poison, i32 %64, i64 0, !dbg !96
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %868, <1 x i32> %869, i1 true) #3, !dbg !96
  %870 = or disjoint i32 %864, 64, !dbg !96
  %871 = lshr i32 %870, 4, !dbg !96
  %872 = getelementptr float, ptr addrspace(3) @global_smem, i32 %871, !dbg !96
  %873 = getelementptr float, ptr addrspace(3) %872, i32 %870, !dbg !96
  %874 = insertelement <1 x i32> poison, i32 %65, i64 0, !dbg !96
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %873, <1 x i32> %874, i1 true) #3, !dbg !96
  %875 = or disjoint i32 %864, 128, !dbg !96
  %876 = lshr i32 %875, 4, !dbg !96
  %877 = getelementptr float, ptr addrspace(3) @global_smem, i32 %876, !dbg !96
  %878 = getelementptr float, ptr addrspace(3) %877, i32 %875, !dbg !96
  %879 = insertelement <1 x i32> poison, i32 %66, i64 0, !dbg !96
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %878, <1 x i32> %879, i1 true) #3, !dbg !96
  %880 = or disjoint i32 %864, 192, !dbg !96
  %881 = lshr i32 %880, 4, !dbg !96
  %882 = getelementptr float, ptr addrspace(3) @global_smem, i32 %881, !dbg !96
  %883 = getelementptr float, ptr addrspace(3) %882, i32 %880, !dbg !96
  %884 = insertelement <1 x i32> poison, i32 %67, i64 0, !dbg !96
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %883, <1 x i32> %884, i1 true) #3, !dbg !96
  %885 = or disjoint i32 %864, 16, !dbg !96
  %886 = getelementptr float, ptr addrspace(3) %867, i32 %885, !dbg !96
  %887 = insertelement <1 x i32> poison, i32 %69, i64 0, !dbg !96
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %886, <1 x i32> %887, i1 true) #3, !dbg !96
  %888 = or disjoint i32 %864, 80, !dbg !96
  %889 = lshr i32 %888, 4, !dbg !96
  %890 = and i32 %889, 244, !dbg !96
  %891 = getelementptr float, ptr addrspace(3) @global_smem, i32 %890, !dbg !96
  %892 = getelementptr float, ptr addrspace(3) %891, i32 %888, !dbg !96
  %893 = insertelement <1 x i32> poison, i32 %70, i64 0, !dbg !96
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %892, <1 x i32> %893, i1 true) #3, !dbg !96
  %894 = or disjoint i32 %864, 144, !dbg !96
  %895 = lshr i32 %894, 4, !dbg !96
  %896 = and i32 %895, 248, !dbg !96
  %897 = getelementptr float, ptr addrspace(3) @global_smem, i32 %896, !dbg !96
  %898 = getelementptr float, ptr addrspace(3) %897, i32 %894, !dbg !96
  %899 = insertelement <1 x i32> poison, i32 %71, i64 0, !dbg !96
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %898, <1 x i32> %899, i1 true) #3, !dbg !96
  %900 = or disjoint i32 %864, 208, !dbg !96
  %901 = lshr i32 %900, 4, !dbg !96
  %902 = and i32 %901, 252, !dbg !96
  %903 = getelementptr float, ptr addrspace(3) @global_smem, i32 %902, !dbg !96
  %904 = getelementptr float, ptr addrspace(3) %903, i32 %900, !dbg !96
  %905 = insertelement <1 x i32> poison, i32 %72, i64 0, !dbg !96
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %904, <1 x i32> %905, i1 true) #3, !dbg !96
  %906 = or disjoint i32 %864, 32, !dbg !96
  %907 = getelementptr float, ptr addrspace(3) %867, i32 %906, !dbg !96
  %908 = insertelement <1 x i32> poison, i32 %74, i64 0, !dbg !96
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %907, <1 x i32> %908, i1 true) #3, !dbg !96
  %909 = or disjoint i32 %864, 96, !dbg !96
  %910 = lshr i32 %909, 4, !dbg !96
  %911 = and i32 %910, 244, !dbg !96
  %912 = getelementptr float, ptr addrspace(3) @global_smem, i32 %911, !dbg !96
  %913 = getelementptr float, ptr addrspace(3) %912, i32 %909, !dbg !96
  %914 = insertelement <1 x i32> poison, i32 %75, i64 0, !dbg !96
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %913, <1 x i32> %914, i1 true) #3, !dbg !96
  %915 = or disjoint i32 %864, 160, !dbg !96
  %916 = lshr i32 %915, 4, !dbg !96
  %917 = and i32 %916, 248, !dbg !96
  %918 = getelementptr float, ptr addrspace(3) @global_smem, i32 %917, !dbg !96
  %919 = getelementptr float, ptr addrspace(3) %918, i32 %915, !dbg !96
  %920 = insertelement <1 x i32> poison, i32 %76, i64 0, !dbg !96
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %919, <1 x i32> %920, i1 true) #3, !dbg !96
  %921 = or disjoint i32 %864, 224, !dbg !96
  %922 = lshr i32 %921, 4, !dbg !96
  %923 = and i32 %922, 252, !dbg !96
  %924 = getelementptr float, ptr addrspace(3) @global_smem, i32 %923, !dbg !96
  %925 = getelementptr float, ptr addrspace(3) %924, i32 %921, !dbg !96
  %926 = insertelement <1 x i32> poison, i32 %77, i64 0, !dbg !96
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %925, <1 x i32> %926, i1 true) #3, !dbg !96
  %927 = or disjoint i32 %864, 48, !dbg !96
  %928 = getelementptr float, ptr addrspace(3) %867, i32 %927, !dbg !96
  %929 = insertelement <1 x i32> poison, i32 %79, i64 0, !dbg !96
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %928, <1 x i32> %929, i1 true) #3, !dbg !96
  %930 = or disjoint i32 %864, 112, !dbg !96
  %931 = lshr i32 %930, 4, !dbg !96
  %932 = and i32 %931, 244, !dbg !96
  %933 = getelementptr float, ptr addrspace(3) @global_smem, i32 %932, !dbg !96
  %934 = getelementptr float, ptr addrspace(3) %933, i32 %930, !dbg !96
  %935 = insertelement <1 x i32> poison, i32 %80, i64 0, !dbg !96
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %934, <1 x i32> %935, i1 true) #3, !dbg !96
  %936 = or disjoint i32 %864, 176, !dbg !96
  %937 = lshr i32 %936, 4, !dbg !96
  %938 = and i32 %937, 248, !dbg !96
  %939 = getelementptr float, ptr addrspace(3) @global_smem, i32 %938, !dbg !96
  %940 = getelementptr float, ptr addrspace(3) %939, i32 %936, !dbg !96
  %941 = insertelement <1 x i32> poison, i32 %81, i64 0, !dbg !96
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %940, <1 x i32> %941, i1 true) #3, !dbg !96
  %942 = or disjoint i32 %864, 240, !dbg !96
  %943 = lshr i32 %942, 4, !dbg !96
  %944 = and i32 %943, 252, !dbg !96
  %945 = getelementptr float, ptr addrspace(3) @global_smem, i32 %944, !dbg !96
  %946 = getelementptr float, ptr addrspace(3) %945, i32 %942, !dbg !96
  %947 = insertelement <1 x i32> poison, i32 %82, i64 0, !dbg !96
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %946, <1 x i32> %947, i1 true) #3, !dbg !96
  tail call void @llvm.nvvm.barrier0(), !dbg !96
  %948 = lshr i32 %16, 4, !dbg !96
  %949 = and i32 %948, 60, !dbg !96
  %950 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %949, !dbg !96
  %951 = getelementptr inbounds float, ptr addrspace(3) %950, i32 %865, !dbg !96
  %952 = or disjoint i32 %865, 1024, !dbg !96
  %953 = lshr i32 %952, 4, !dbg !96
  %954 = and i32 %953, 124, !dbg !96
  %955 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %954, !dbg !96
  %956 = getelementptr inbounds float, ptr addrspace(3) %955, i32 %952, !dbg !96
  %957 = load <4 x i32>, ptr addrspace(3) %956, align 16, !dbg !96
  %958 = or disjoint i32 %865, 2048, !dbg !96
  %959 = lshr i32 %958, 4, !dbg !96
  %960 = and i32 %959, 188, !dbg !96
  %961 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %960, !dbg !96
  %962 = getelementptr inbounds float, ptr addrspace(3) %961, i32 %958, !dbg !96
  %963 = load <4 x i32>, ptr addrspace(3) %962, align 16, !dbg !96
  %964 = or disjoint i32 %865, 3072, !dbg !96
  %965 = lshr i32 %964, 4, !dbg !96
  %966 = and i32 %965, 252, !dbg !96
  %967 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %966, !dbg !96
  %968 = getelementptr inbounds float, ptr addrspace(3) %967, i32 %964, !dbg !96
  %969 = load <4 x i32>, ptr addrspace(3) %968, align 16, !dbg !96
  %.extract = load i32, ptr addrspace(3) %951, align 16, !dbg !96
  %970 = getelementptr inbounds i8, ptr addrspace(3) %951, i32 4, !dbg !96
  %.extract20 = load i32, ptr addrspace(3) %970, align 4, !dbg !96
  %971 = getelementptr inbounds i8, ptr addrspace(3) %951, i32 8, !dbg !96
  %.extract21 = load i32, ptr addrspace(3) %971, align 8, !dbg !96
  %972 = getelementptr inbounds i8, ptr addrspace(3) %951, i32 12, !dbg !96
  %.extract22 = load i32, ptr addrspace(3) %972, align 4, !dbg !96
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract20, i32 %.extract21, i32 %.extract22, ptr addrspace(1) %855, i1 %29) #3, !dbg !96
  %.extract23 = extractelement <4 x i32> %957, i64 0, !dbg !96
  %.extract24 = extractelement <4 x i32> %957, i64 1, !dbg !96
  %.extract25 = extractelement <4 x i32> %957, i64 2, !dbg !96
  %.extract26 = extractelement <4 x i32> %957, i64 3, !dbg !96
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract23, i32 %.extract24, i32 %.extract25, i32 %.extract26, ptr addrspace(1) %857, i1 %30) #3, !dbg !96
  %.extract27 = extractelement <4 x i32> %963, i64 0, !dbg !96
  %.extract28 = extractelement <4 x i32> %963, i64 1, !dbg !96
  %.extract29 = extractelement <4 x i32> %963, i64 2, !dbg !96
  %.extract30 = extractelement <4 x i32> %963, i64 3, !dbg !96
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract27, i32 %.extract28, i32 %.extract29, i32 %.extract30, ptr addrspace(1) %859, i1 %31) #3, !dbg !96
  %.extract31 = extractelement <4 x i32> %969, i64 0, !dbg !96
  %.extract32 = extractelement <4 x i32> %969, i64 1, !dbg !96
  %.extract33 = extractelement <4 x i32> %969, i64 2, !dbg !96
  %.extract34 = extractelement <4 x i32> %969, i64 3, !dbg !96
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract31, i32 %.extract32, i32 %.extract33, i32 %.extract34, ptr addrspace(1) %861, i1 %32) #3, !dbg !96
  %973 = getelementptr float, ptr addrspace(1) %2, i64 %854, !dbg !97
  %974 = getelementptr float, ptr addrspace(1) %2, i64 %856, !dbg !97
  %975 = getelementptr float, ptr addrspace(1) %2, i64 %858, !dbg !97
  %976 = getelementptr float, ptr addrspace(1) %2, i64 %860, !dbg !97
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract20, i32 %.extract21, i32 %.extract22, ptr addrspace(1) %973, i1 %29) #3, !dbg !98
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract23, i32 %.extract24, i32 %.extract25, i32 %.extract26, ptr addrspace(1) %974, i1 %30) #3, !dbg !98
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract27, i32 %.extract28, i32 %.extract29, i32 %.extract30, ptr addrspace(1) %975, i1 %31) #3, !dbg !98
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract31, i32 %.extract32, i32 %.extract33, i32 %.extract34, ptr addrspace(1) %976, i1 %32) #3, !dbg !98
  %977 = getelementptr float, ptr addrspace(1) %3, i64 %854, !dbg !99
  %978 = getelementptr float, ptr addrspace(1) %3, i64 %856, !dbg !99
  %979 = getelementptr float, ptr addrspace(1) %3, i64 %858, !dbg !99
  %980 = getelementptr float, ptr addrspace(1) %3, i64 %860, !dbg !99
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract20, i32 %.extract21, i32 %.extract22, ptr addrspace(1) %977, i1 %29) #3, !dbg !100
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract23, i32 %.extract24, i32 %.extract25, i32 %.extract26, ptr addrspace(1) %978, i1 %30) #3, !dbg !100
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract27, i32 %.extract28, i32 %.extract29, i32 %.extract30, ptr addrspace(1) %979, i1 %31) #3, !dbg !100
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract31, i32 %.extract32, i32 %.extract33, i32 %.extract34, ptr addrspace(1) %980, i1 %32) #3, !dbg !100
  %981 = getelementptr float, ptr addrspace(1) %4, i64 %854, !dbg !101
  %982 = getelementptr float, ptr addrspace(1) %4, i64 %856, !dbg !101
  %983 = getelementptr float, ptr addrspace(1) %4, i64 %858, !dbg !101
  %984 = getelementptr float, ptr addrspace(1) %4, i64 %860, !dbg !101
  tail call void @llvm.nvvm.barrier0(), !dbg !102
  %985 = bitcast float %828 to <1 x i32>, !dbg !102
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %868, <1 x i32> %985, i1 true) #3, !dbg !102
  %986 = bitcast float %829 to <1 x i32>, !dbg !102
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %873, <1 x i32> %986, i1 true) #3, !dbg !102
  %987 = bitcast float %830 to <1 x i32>, !dbg !102
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %878, <1 x i32> %987, i1 true) #3, !dbg !102
  %988 = bitcast float %831 to <1 x i32>, !dbg !102
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %883, <1 x i32> %988, i1 true) #3, !dbg !102
  %989 = bitcast float %832 to <1 x i32>, !dbg !102
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %886, <1 x i32> %989, i1 true) #3, !dbg !102
  %990 = bitcast float %833 to <1 x i32>, !dbg !102
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %892, <1 x i32> %990, i1 true) #3, !dbg !102
  %991 = bitcast float %834 to <1 x i32>, !dbg !102
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %898, <1 x i32> %991, i1 true) #3, !dbg !102
  %992 = bitcast float %835 to <1 x i32>, !dbg !102
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %904, <1 x i32> %992, i1 true) #3, !dbg !102
  %993 = bitcast float %836 to <1 x i32>, !dbg !102
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %907, <1 x i32> %993, i1 true) #3, !dbg !102
  %994 = bitcast float %837 to <1 x i32>, !dbg !102
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %913, <1 x i32> %994, i1 true) #3, !dbg !102
  %995 = bitcast float %838 to <1 x i32>, !dbg !102
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %919, <1 x i32> %995, i1 true) #3, !dbg !102
  %996 = bitcast float %839 to <1 x i32>, !dbg !102
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %925, <1 x i32> %996, i1 true) #3, !dbg !102
  %997 = bitcast float %840 to <1 x i32>, !dbg !102
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %928, <1 x i32> %997, i1 true) #3, !dbg !102
  %998 = bitcast float %841 to <1 x i32>, !dbg !102
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %934, <1 x i32> %998, i1 true) #3, !dbg !102
  %999 = bitcast float %842 to <1 x i32>, !dbg !102
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %940, <1 x i32> %999, i1 true) #3, !dbg !102
  %1000 = bitcast float %843 to <1 x i32>, !dbg !102
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %946, <1 x i32> %1000, i1 true) #3, !dbg !102
  tail call void @llvm.nvvm.barrier0(), !dbg !102
  %1001 = load <4 x i32>, ptr addrspace(3) %956, align 16, !dbg !102
  %1002 = load <4 x i32>, ptr addrspace(3) %962, align 16, !dbg !102
  %1003 = load <4 x i32>, ptr addrspace(3) %968, align 16, !dbg !102
  %.extract50 = load i32, ptr addrspace(3) %951, align 16, !dbg !102
  %.extract51 = load i32, ptr addrspace(3) %970, align 4, !dbg !102
  %.extract52 = load i32, ptr addrspace(3) %971, align 8, !dbg !102
  %.extract53 = load i32, ptr addrspace(3) %972, align 4, !dbg !102
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract50, i32 %.extract51, i32 %.extract52, i32 %.extract53, ptr addrspace(1) %981, i1 %29) #3, !dbg !102
  %.extract54 = extractelement <4 x i32> %1001, i64 0, !dbg !102
  %.extract55 = extractelement <4 x i32> %1001, i64 1, !dbg !102
  %.extract56 = extractelement <4 x i32> %1001, i64 2, !dbg !102
  %.extract57 = extractelement <4 x i32> %1001, i64 3, !dbg !102
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract54, i32 %.extract55, i32 %.extract56, i32 %.extract57, ptr addrspace(1) %982, i1 %30) #3, !dbg !102
  %.extract58 = extractelement <4 x i32> %1002, i64 0, !dbg !102
  %.extract59 = extractelement <4 x i32> %1002, i64 1, !dbg !102
  %.extract60 = extractelement <4 x i32> %1002, i64 2, !dbg !102
  %.extract61 = extractelement <4 x i32> %1002, i64 3, !dbg !102
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract58, i32 %.extract59, i32 %.extract60, i32 %.extract61, ptr addrspace(1) %983, i1 %31) #3, !dbg !102
  %.extract62 = extractelement <4 x i32> %1003, i64 0, !dbg !102
  %.extract63 = extractelement <4 x i32> %1003, i64 1, !dbg !102
  %.extract64 = extractelement <4 x i32> %1003, i64 2, !dbg !102
  %.extract65 = extractelement <4 x i32> %1003, i64 3, !dbg !102
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract62, i32 %.extract63, i32 %.extract64, i32 %.extract65, ptr addrspace(1) %984, i1 %32) #3, !dbg !102
  ret void, !dbg !103
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.smin.i32(i32, i32) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "czw7iv4ljdeqkuku7cl245up7khedmuivcfbr3khfdnyh6czkequ.py", directory: "inductor_cache/zw")
!4 = !{ptr @triton_poi_fused_avg_pool2d_convolution_45, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_avg_pool2d_convolution_45, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_avg_pool2d_convolution_45", linkageName: "triton_poi_fused_avg_pool2d_convolution_45", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 25, column: 33, scope: !7)
!16 = !DILocation(line: 26, column: 23, scope: !7)
!17 = !DILocation(line: 27, column: 21, scope: !7)
!18 = !DILocation(line: 31, column: 19, scope: !7)
!19 = !DILocation(line: 30, column: 19, scope: !7)
!20 = !DILocation(line: 34, column: 38, scope: !7)
!21 = !DILocation(line: 32, column: 19, scope: !7)
!22 = !DILocation(line: 33, column: 19, scope: !7)
!23 = !DILocation(line: 34, column: 35, scope: !7)
!24 = !DILocation(line: 34, column: 30, scope: !7)
!25 = !DILocation(line: 34, column: 43, scope: !7)
!26 = !DILocation(line: 46, column: 38, scope: !7)
!27 = !DILocation(line: 46, column: 43, scope: !7)
!28 = !DILocation(line: 46, column: 31, scope: !7)
!29 = !DILocation(line: 46, column: 59, scope: !7)
!30 = !DILocation(line: 87, column: 64, scope: !7)
!31 = !DILocation(line: 79, column: 56, scope: !7)
!32 = !DILocation(line: 46, column: 51, scope: !7)
!33 = !DILocation(line: 57, column: 20, scope: !7)
!34 = !DILocation(line: 52, column: 59, scope: !7)
!35 = !DILocation(line: 52, column: 51, scope: !7)
!36 = !DILocation(line: 53, column: 20, scope: !7)
!37 = !DILocation(line: 87, column: 48, scope: !7)
!38 = !DILocation(line: 54, column: 16, scope: !7)
!39 = !DILocation(line: 87, column: 163, scope: !7)
!40 = !DILocation(line: 56, column: 20, scope: !7)
!41 = !DILocation(line: 59, column: 38, scope: !7)
!42 = !DILocation(line: 59, column: 43, scope: !7)
!43 = !DILocation(line: 59, column: 31, scope: !7)
!44 = !DILocation(line: 59, column: 59, scope: !7)
!45 = !DILocation(line: 59, column: 51, scope: !7)
!46 = !DILocation(line: 60, column: 20, scope: !7)
!47 = !DILocation(line: 66, column: 38, scope: !7)
!48 = !DILocation(line: 66, column: 43, scope: !7)
!49 = !DILocation(line: 66, column: 31, scope: !7)
!50 = !DILocation(line: 66, column: 59, scope: !7)
!51 = !DILocation(line: 66, column: 51, scope: !7)
!52 = !DILocation(line: 67, column: 20, scope: !7)
!53 = !DILocation(line: 69, column: 52, scope: !7)
!54 = !DILocation(line: 69, column: 44, scope: !7)
!55 = !DILocation(line: 70, column: 20, scope: !7)
!56 = !DILocation(line: 72, column: 35, scope: !7)
!57 = !DILocation(line: 72, column: 40, scope: !7)
!58 = !DILocation(line: 72, column: 31, scope: !7)
!59 = !DILocation(line: 72, column: 56, scope: !7)
!60 = !DILocation(line: 72, column: 48, scope: !7)
!61 = !DILocation(line: 73, column: 20, scope: !7)
!62 = !DILocation(line: 79, column: 35, scope: !7)
!63 = !DILocation(line: 79, column: 40, scope: !7)
!64 = !DILocation(line: 79, column: 31, scope: !7)
!65 = !DILocation(line: 79, column: 48, scope: !7)
!66 = !DILocation(line: 80, column: 20, scope: !7)
!67 = !DILocation(line: 82, column: 56, scope: !7)
!68 = !DILocation(line: 82, column: 48, scope: !7)
!69 = !DILocation(line: 83, column: 20, scope: !7)
!70 = !DILocation(line: 85, column: 35, scope: !7)
!71 = !DILocation(line: 85, column: 40, scope: !7)
!72 = !DILocation(line: 85, column: 31, scope: !7)
!73 = !DILocation(line: 85, column: 56, scope: !7)
!74 = !DILocation(line: 85, column: 48, scope: !7)
!75 = !DILocation(line: 86, column: 20, scope: !7)
!76 = !DILocation(line: 87, column: 68, scope: !7)
!77 = !DILocation(line: 87, column: 56, scope: !7)
!78 = !DILocation(line: 87, column: 99, scope: !7)
!79 = !DILocation(line: 87, column: 87, scope: !7)
!80 = !DILocation(line: 87, column: 75, scope: !7)
!81 = !DILocation(line: 87, column: 124, scope: !7)
!82 = !DILocation(line: 87, column: 120, scope: !7)
!83 = !DILocation(line: 87, column: 112, scope: !7)
!84 = !DILocation(line: 87, column: 155, scope: !7)
!85 = !DILocation(line: 87, column: 143, scope: !7)
!86 = !DILocation(line: 87, column: 131, scope: !7)
!87 = !DILocation(line: 87, column: 231, scope: !7)
!88 = !DILocation(line: 87, column: 299, scope: !7)
!89 = !DILocation(line: 87, column: 357, scope: !7)
!90 = !DILocation(line: 88, column: 20, scope: !7)
!91 = !DILocation(line: 89, column: 35, scope: !7)
!92 = !DILocation(line: 89, column: 46, scope: !7)
!93 = !DILocation(line: 89, column: 30, scope: !7)
!94 = !DILocation(line: 89, column: 40, scope: !7)
!95 = !DILocation(line: 89, column: 25, scope: !7)
!96 = !DILocation(line: 89, column: 57, scope: !7)
!97 = !DILocation(line: 90, column: 25, scope: !7)
!98 = !DILocation(line: 90, column: 57, scope: !7)
!99 = !DILocation(line: 91, column: 25, scope: !7)
!100 = !DILocation(line: 91, column: 57, scope: !7)
!101 = !DILocation(line: 92, column: 25, scope: !7)
!102 = !DILocation(line: 92, column: 58, scope: !7)
!103 = !DILocation(line: 92, column: 4, scope: !7)
