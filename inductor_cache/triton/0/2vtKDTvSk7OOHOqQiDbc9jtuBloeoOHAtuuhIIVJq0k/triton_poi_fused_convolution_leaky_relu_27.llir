; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_leaky_relu_27(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, i32 %4, i32 %5) local_unnamed_addr !dbg !7 {
  %7 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %8 = shl i32 %7, 4, !dbg !11
  %9 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %10 = lshr i32 %9, 4, !dbg !12
  %11 = and i32 %10, 15, !dbg !12
  %12 = shl i32 %9, 2, !dbg !12
  %13 = and i32 %12, 12, !dbg !12
  %14 = or disjoint i32 %8, %11, !dbg !13
  %15 = or disjoint i32 %8, %13, !dbg !13
  %16 = icmp slt i32 %14, 256, !dbg !14
  %17 = icmp slt i32 %15, 256, !dbg !14
  %18 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !15
  %19 = shl i32 %18, 8, !dbg !16
  %20 = shl i32 %9, 4, !dbg !17
  %21 = and i32 %20, 240, !dbg !17
  %22 = or disjoint i32 %21, 4, !dbg !17
  %23 = or disjoint i32 %21, 8, !dbg !17
  %24 = or disjoint i32 %21, 12, !dbg !17
  %25 = lshr i32 %9, 2, !dbg !17
  %26 = and i32 %25, 63, !dbg !17
  %27 = or disjoint i32 %26, 64, !dbg !17
  %28 = or disjoint i32 %26, 128, !dbg !17
  %29 = or disjoint i32 %26, 192, !dbg !17
  %30 = and i32 %9, 255, !dbg !17
  %31 = or disjoint i32 %19, %21, !dbg !18
  %32 = or disjoint i32 %19, %22, !dbg !18
  %33 = or disjoint i32 %19, %23, !dbg !18
  %34 = or disjoint i32 %19, %24, !dbg !18
  %35 = or disjoint i32 %19, %26, !dbg !18
  %36 = or disjoint i32 %19, %27, !dbg !18
  %37 = or disjoint i32 %19, %28, !dbg !18
  %38 = or disjoint i32 %19, %29, !dbg !18
  %39 = or disjoint i32 %19, %30, !dbg !18
  %40 = icmp slt i32 %31, 512, !dbg !19
  %41 = icmp slt i32 %35, 512, !dbg !19
  %42 = icmp slt i32 %36, 512, !dbg !19
  %43 = icmp slt i32 %37, 512, !dbg !19
  %44 = icmp slt i32 %38, 512, !dbg !19
  %45 = icmp slt i32 %39, 512, !dbg !19
  %.frozen = freeze i32 %15, !dbg !20
  %46 = sdiv i32 %.frozen, 64, !dbg !20
  %47 = mul i32 %46, 64, !dbg !21
  %.decomposed = sub i32 %.frozen, %47, !dbg !21
  %48 = shl i32 %14, 9, !dbg !22
  %49 = add i32 %31, %48, !dbg !23
  %50 = add i32 %32, %48, !dbg !23
  %51 = add i32 %33, %48, !dbg !23
  %52 = add i32 %34, %48, !dbg !23
  %53 = sext i32 %49 to i64, !dbg !24
  %54 = getelementptr float, ptr addrspace(1) %0, i64 %53, !dbg !24
  %55 = sext i32 %50 to i64, !dbg !24
  %56 = getelementptr float, ptr addrspace(1) %0, i64 %55, !dbg !24
  %57 = sext i32 %51 to i64, !dbg !24
  %58 = getelementptr float, ptr addrspace(1) %0, i64 %57, !dbg !24
  %59 = sext i32 %52 to i64, !dbg !24
  %60 = getelementptr float, ptr addrspace(1) %0, i64 %59, !dbg !24
  %61 = and i1 %16, %40, !dbg !25
  %62 = and i1 %17, %41, !dbg !25
  %63 = and i1 %17, %42, !dbg !25
  %64 = and i1 %17, %43, !dbg !25
  %65 = and i1 %17, %44, !dbg !25
  %66 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %54, i1 %61) #2, !dbg !26
  %67 = extractvalue { i32, i32, i32, i32 } %66, 0, !dbg !26
  %68 = extractvalue { i32, i32, i32, i32 } %66, 1, !dbg !26
  %69 = extractvalue { i32, i32, i32, i32 } %66, 2, !dbg !26
  %70 = extractvalue { i32, i32, i32, i32 } %66, 3, !dbg !26
  %71 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %56, i1 %61) #2, !dbg !26
  %72 = extractvalue { i32, i32, i32, i32 } %71, 0, !dbg !26
  %73 = extractvalue { i32, i32, i32, i32 } %71, 1, !dbg !26
  %74 = extractvalue { i32, i32, i32, i32 } %71, 2, !dbg !26
  %75 = extractvalue { i32, i32, i32, i32 } %71, 3, !dbg !26
  %76 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %58, i1 %61) #2, !dbg !26
  %77 = extractvalue { i32, i32, i32, i32 } %76, 0, !dbg !26
  %78 = extractvalue { i32, i32, i32, i32 } %76, 1, !dbg !26
  %79 = extractvalue { i32, i32, i32, i32 } %76, 2, !dbg !26
  %80 = extractvalue { i32, i32, i32, i32 } %76, 3, !dbg !26
  %81 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %60, i1 %61) #2, !dbg !26
  %82 = extractvalue { i32, i32, i32, i32 } %81, 0, !dbg !26
  %83 = extractvalue { i32, i32, i32, i32 } %81, 1, !dbg !26
  %84 = extractvalue { i32, i32, i32, i32 } %81, 2, !dbg !26
  %85 = extractvalue { i32, i32, i32, i32 } %81, 3, !dbg !26
  %86 = shl i32 %9, 8, !dbg !26
  %87 = and i32 %86, 3840, !dbg !26
  %88 = or disjoint i32 %87, %11, !dbg !26
  %89 = and i32 %12, 1020, !dbg !26
  %90 = getelementptr i8, ptr addrspace(3) @global_smem, i32 %87, !dbg !26
  %91 = getelementptr float, ptr addrspace(3) %90, i32 %88, !dbg !26
  %92 = insertelement <1 x i32> poison, i32 %67, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %91, <1 x i32> %92, i1 true) #2, !dbg !26
  %93 = or disjoint i32 %88, 16, !dbg !26
  %94 = lshr i32 %93, 2, !dbg !26
  %95 = and i32 %94, 964, !dbg !26
  %96 = getelementptr float, ptr addrspace(3) @global_smem, i32 %95, !dbg !26
  %97 = getelementptr float, ptr addrspace(3) %96, i32 %93, !dbg !26
  %98 = insertelement <1 x i32> poison, i32 %68, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %97, <1 x i32> %98, i1 true) #2, !dbg !26
  %99 = or disjoint i32 %88, 32, !dbg !26
  %100 = lshr i32 %99, 2, !dbg !26
  %101 = and i32 %100, 968, !dbg !26
  %102 = getelementptr float, ptr addrspace(3) @global_smem, i32 %101, !dbg !26
  %103 = getelementptr float, ptr addrspace(3) %102, i32 %99, !dbg !26
  %104 = insertelement <1 x i32> poison, i32 %69, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %103, <1 x i32> %104, i1 true) #2, !dbg !26
  %105 = or disjoint i32 %88, 48, !dbg !26
  %106 = lshr i32 %105, 2, !dbg !26
  %107 = and i32 %106, 972, !dbg !26
  %108 = getelementptr float, ptr addrspace(3) @global_smem, i32 %107, !dbg !26
  %109 = getelementptr float, ptr addrspace(3) %108, i32 %105, !dbg !26
  %110 = insertelement <1 x i32> poison, i32 %70, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %109, <1 x i32> %110, i1 true) #2, !dbg !26
  %111 = or disjoint i32 %88, 64, !dbg !26
  %112 = lshr i32 %111, 2, !dbg !26
  %113 = and i32 %112, 976, !dbg !26
  %114 = getelementptr float, ptr addrspace(3) @global_smem, i32 %113, !dbg !26
  %115 = getelementptr float, ptr addrspace(3) %114, i32 %111, !dbg !26
  %116 = insertelement <1 x i32> poison, i32 %72, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %115, <1 x i32> %116, i1 true) #2, !dbg !26
  %117 = or disjoint i32 %88, 80, !dbg !26
  %118 = lshr i32 %117, 2, !dbg !26
  %119 = and i32 %118, 980, !dbg !26
  %120 = getelementptr float, ptr addrspace(3) @global_smem, i32 %119, !dbg !26
  %121 = getelementptr float, ptr addrspace(3) %120, i32 %117, !dbg !26
  %122 = insertelement <1 x i32> poison, i32 %73, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %121, <1 x i32> %122, i1 true) #2, !dbg !26
  %123 = or disjoint i32 %88, 96, !dbg !26
  %124 = lshr i32 %123, 2, !dbg !26
  %125 = and i32 %124, 984, !dbg !26
  %126 = getelementptr float, ptr addrspace(3) @global_smem, i32 %125, !dbg !26
  %127 = getelementptr float, ptr addrspace(3) %126, i32 %123, !dbg !26
  %128 = insertelement <1 x i32> poison, i32 %74, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %127, <1 x i32> %128, i1 true) #2, !dbg !26
  %129 = or disjoint i32 %88, 112, !dbg !26
  %130 = lshr i32 %129, 2, !dbg !26
  %131 = and i32 %130, 988, !dbg !26
  %132 = getelementptr float, ptr addrspace(3) @global_smem, i32 %131, !dbg !26
  %133 = getelementptr float, ptr addrspace(3) %132, i32 %129, !dbg !26
  %134 = insertelement <1 x i32> poison, i32 %75, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %133, <1 x i32> %134, i1 true) #2, !dbg !26
  %135 = or disjoint i32 %88, 128, !dbg !26
  %136 = lshr i32 %135, 2, !dbg !26
  %137 = and i32 %136, 992, !dbg !26
  %138 = getelementptr float, ptr addrspace(3) @global_smem, i32 %137, !dbg !26
  %139 = getelementptr float, ptr addrspace(3) %138, i32 %135, !dbg !26
  %140 = insertelement <1 x i32> poison, i32 %77, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %139, <1 x i32> %140, i1 true) #2, !dbg !26
  %141 = or disjoint i32 %88, 144, !dbg !26
  %142 = lshr i32 %141, 2, !dbg !26
  %143 = and i32 %142, 996, !dbg !26
  %144 = getelementptr float, ptr addrspace(3) @global_smem, i32 %143, !dbg !26
  %145 = getelementptr float, ptr addrspace(3) %144, i32 %141, !dbg !26
  %146 = insertelement <1 x i32> poison, i32 %78, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %145, <1 x i32> %146, i1 true) #2, !dbg !26
  %147 = or disjoint i32 %88, 160, !dbg !26
  %148 = lshr i32 %147, 2, !dbg !26
  %149 = and i32 %148, 1000, !dbg !26
  %150 = getelementptr float, ptr addrspace(3) @global_smem, i32 %149, !dbg !26
  %151 = getelementptr float, ptr addrspace(3) %150, i32 %147, !dbg !26
  %152 = insertelement <1 x i32> poison, i32 %79, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %151, <1 x i32> %152, i1 true) #2, !dbg !26
  %153 = or disjoint i32 %88, 176, !dbg !26
  %154 = lshr i32 %153, 2, !dbg !26
  %155 = and i32 %154, 1004, !dbg !26
  %156 = getelementptr float, ptr addrspace(3) @global_smem, i32 %155, !dbg !26
  %157 = getelementptr float, ptr addrspace(3) %156, i32 %153, !dbg !26
  %158 = insertelement <1 x i32> poison, i32 %80, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %157, <1 x i32> %158, i1 true) #2, !dbg !26
  %159 = or disjoint i32 %88, 192, !dbg !26
  %160 = lshr i32 %159, 2, !dbg !26
  %161 = and i32 %160, 1008, !dbg !26
  %162 = getelementptr float, ptr addrspace(3) @global_smem, i32 %161, !dbg !26
  %163 = getelementptr float, ptr addrspace(3) %162, i32 %159, !dbg !26
  %164 = insertelement <1 x i32> poison, i32 %82, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %163, <1 x i32> %164, i1 true) #2, !dbg !26
  %165 = or disjoint i32 %88, 208, !dbg !26
  %166 = lshr i32 %165, 2, !dbg !26
  %167 = and i32 %166, 1012, !dbg !26
  %168 = getelementptr float, ptr addrspace(3) @global_smem, i32 %167, !dbg !26
  %169 = getelementptr float, ptr addrspace(3) %168, i32 %165, !dbg !26
  %170 = insertelement <1 x i32> poison, i32 %83, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %169, <1 x i32> %170, i1 true) #2, !dbg !26
  %171 = or disjoint i32 %88, 224, !dbg !26
  %172 = lshr i32 %171, 2, !dbg !26
  %173 = and i32 %172, 1016, !dbg !26
  %174 = getelementptr float, ptr addrspace(3) @global_smem, i32 %173, !dbg !26
  %175 = getelementptr float, ptr addrspace(3) %174, i32 %171, !dbg !26
  %176 = insertelement <1 x i32> poison, i32 %84, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %175, <1 x i32> %176, i1 true) #2, !dbg !26
  %177 = or disjoint i32 %88, 240, !dbg !26
  %178 = lshr i32 %177, 2, !dbg !26
  %179 = and i32 %178, 1020, !dbg !26
  %180 = getelementptr float, ptr addrspace(3) @global_smem, i32 %179, !dbg !26
  %181 = getelementptr float, ptr addrspace(3) %180, i32 %177, !dbg !26
  %182 = insertelement <1 x i32> poison, i32 %85, i64 0, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %181, <1 x i32> %182, i1 true) #2, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %183 = and i32 %9, 252, !dbg !26
  %184 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %183, !dbg !26
  %185 = getelementptr inbounds float, ptr addrspace(3) %184, i32 %89, !dbg !26
  %186 = or disjoint i32 %89, 1024, !dbg !26
  %187 = lshr exact i32 %186, 2, !dbg !26
  %188 = and i32 %187, 508, !dbg !26
  %189 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %188, !dbg !26
  %190 = getelementptr inbounds float, ptr addrspace(3) %189, i32 %186, !dbg !26
  %191 = or disjoint i32 %89, 2048, !dbg !26
  %192 = lshr exact i32 %191, 2, !dbg !26
  %193 = and i32 %192, 764, !dbg !26
  %194 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %193, !dbg !26
  %195 = getelementptr inbounds float, ptr addrspace(3) %194, i32 %191, !dbg !26
  %196 = or disjoint i32 %89, 3072, !dbg !26
  %197 = lshr exact i32 %196, 2, !dbg !26
  %198 = and i32 %197, 1020, !dbg !26
  %199 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %198, !dbg !26
  %200 = getelementptr inbounds float, ptr addrspace(3) %199, i32 %196, !dbg !26
  %201 = and i32 %20, 4080, !dbg !26
  %202 = lshr i32 %201, 8, !dbg !26
  %203 = or disjoint i32 %202, %201, !dbg !26
  %204 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %203, !dbg !26
  %205 = or disjoint i32 %201, 1, !dbg !26
  %206 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %202, !dbg !26
  %207 = getelementptr inbounds float, ptr addrspace(3) %206, i32 %205, !dbg !26
  %208 = or disjoint i32 %201, 2, !dbg !26
  %209 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %202, !dbg !26
  %210 = getelementptr inbounds float, ptr addrspace(3) %209, i32 %208, !dbg !26
  %211 = or disjoint i32 %201, 3, !dbg !26
  %212 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %202, !dbg !26
  %213 = getelementptr inbounds float, ptr addrspace(3) %212, i32 %211, !dbg !26
  %214 = or disjoint i32 %201, 4, !dbg !26
  %215 = add nuw nsw i32 %202, %214, !dbg !26
  %216 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %215, !dbg !26
  %217 = or disjoint i32 %201, 5, !dbg !26
  %218 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %202, !dbg !26
  %219 = getelementptr inbounds float, ptr addrspace(3) %218, i32 %217, !dbg !26
  %220 = or disjoint i32 %201, 6, !dbg !26
  %221 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %202, !dbg !26
  %222 = getelementptr inbounds float, ptr addrspace(3) %221, i32 %220, !dbg !26
  %223 = or disjoint i32 %201, 7, !dbg !26
  %224 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %202, !dbg !26
  %225 = getelementptr inbounds float, ptr addrspace(3) %224, i32 %223, !dbg !26
  %226 = or disjoint i32 %201, 8, !dbg !26
  %227 = add nuw nsw i32 %202, %226, !dbg !26
  %228 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %227, !dbg !26
  %229 = or disjoint i32 %201, 9, !dbg !26
  %230 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %202, !dbg !26
  %231 = getelementptr inbounds float, ptr addrspace(3) %230, i32 %229, !dbg !26
  %232 = or disjoint i32 %201, 10, !dbg !26
  %233 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %202, !dbg !26
  %234 = getelementptr inbounds float, ptr addrspace(3) %233, i32 %232, !dbg !26
  %235 = or disjoint i32 %201, 11, !dbg !26
  %236 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %202, !dbg !26
  %237 = getelementptr inbounds float, ptr addrspace(3) %236, i32 %235, !dbg !26
  %238 = or disjoint i32 %201, 12, !dbg !26
  %239 = add nuw nsw i32 %202, %238, !dbg !26
  %240 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %239, !dbg !26
  %241 = or disjoint i32 %201, 13, !dbg !26
  %242 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %202, !dbg !26
  %243 = getelementptr inbounds float, ptr addrspace(3) %242, i32 %241, !dbg !26
  %244 = or disjoint i32 %201, 14, !dbg !26
  %245 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %202, !dbg !26
  %246 = getelementptr inbounds float, ptr addrspace(3) %245, i32 %244, !dbg !26
  %247 = or disjoint i32 %201, 15, !dbg !26
  %248 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %202, !dbg !26
  %249 = getelementptr inbounds float, ptr addrspace(3) %248, i32 %247, !dbg !26
  %250 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %30, !dbg !26
  %251 = add nuw nsw i32 %30, 257, !dbg !26
  %252 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %251, !dbg !26
  %253 = add nuw nsw i32 %30, 514, !dbg !26
  %254 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %253, !dbg !26
  %255 = add nuw nsw i32 %30, 771, !dbg !26
  %256 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %255, !dbg !26
  %257 = add nuw nsw i32 %30, 1028, !dbg !26
  %258 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %257, !dbg !26
  %259 = add nuw nsw i32 %30, 1285, !dbg !26
  %260 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %259, !dbg !26
  %261 = add nuw nsw i32 %30, 1542, !dbg !26
  %262 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %261, !dbg !26
  %263 = add nuw nsw i32 %30, 1799, !dbg !26
  %264 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %263, !dbg !26
  %265 = add nuw nsw i32 %30, 2056, !dbg !26
  %266 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %265, !dbg !26
  %267 = add nuw nsw i32 %30, 2313, !dbg !26
  %268 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %267, !dbg !26
  %269 = add nuw nsw i32 %30, 2570, !dbg !26
  %270 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %269, !dbg !26
  %271 = add nuw nsw i32 %30, 2827, !dbg !26
  %272 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %271, !dbg !26
  %273 = add nuw nsw i32 %30, 3084, !dbg !26
  %274 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %273, !dbg !26
  %275 = add nuw nsw i32 %30, 3341, !dbg !26
  %276 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %275, !dbg !26
  %277 = add nuw nsw i32 %30, 3598, !dbg !26
  %278 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %277, !dbg !26
  %279 = add nuw nsw i32 %30, 3855, !dbg !26
  %280 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %279, !dbg !26
  %281 = sext i32 %39 to i64, !dbg !27
  %282 = getelementptr float, ptr addrspace(1) %1, i64 %281, !dbg !27
  %.idx = shl nuw nsw i32 %30, 3, !dbg !28
  %283 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !28
  %.idx20 = shl nuw nsw i32 %26, 3, !dbg !28
  %284 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx20, !dbg !28
  %.idx21 = shl nuw nsw i32 %27, 3, !dbg !28
  %285 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx21, !dbg !28
  %.idx22 = shl nuw nsw i32 %28, 3, !dbg !28
  %286 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx22, !dbg !28
  %.idx23 = shl nuw nsw i32 %29, 3, !dbg !28
  %287 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx23, !dbg !28
  %288 = load <4 x float>, ptr addrspace(3) %185, align 16, !dbg !26
  %289 = shufflevector <4 x float> %288, <4 x float> poison, <4 x i32> <i32 3, i32 2, i32 1, i32 0>, !dbg !26
  %290 = load <4 x float>, ptr addrspace(3) %190, align 16, !dbg !26
  %291 = shufflevector <4 x float> %290, <4 x float> poison, <4 x i32> <i32 3, i32 2, i32 1, i32 0>, !dbg !26
  %292 = load <4 x float>, ptr addrspace(3) %195, align 16, !dbg !26
  %293 = shufflevector <4 x float> %292, <4 x float> poison, <4 x i32> <i32 3, i32 2, i32 1, i32 0>, !dbg !26
  %294 = load <4 x float>, ptr addrspace(3) %200, align 16, !dbg !26
  %295 = shufflevector <4 x float> %294, <4 x float> poison, <4 x i32> <i32 3, i32 2, i32 1, i32 0>, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %204, <1 x i32> %92, i1 true) #2, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %207, <1 x i32> %98, i1 true) #2, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %210, <1 x i32> %104, i1 true) #2, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %213, <1 x i32> %110, i1 true) #2, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %216, <1 x i32> %116, i1 true) #2, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %219, <1 x i32> %122, i1 true) #2, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %222, <1 x i32> %128, i1 true) #2, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %225, <1 x i32> %134, i1 true) #2, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %228, <1 x i32> %140, i1 true) #2, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %231, <1 x i32> %146, i1 true) #2, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %234, <1 x i32> %152, i1 true) #2, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %237, <1 x i32> %158, i1 true) #2, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %240, <1 x i32> %164, i1 true) #2, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %243, <1 x i32> %170, i1 true) #2, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %246, <1 x i32> %176, i1 true) #2, !dbg !26
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %249, <1 x i32> %182, i1 true) #2, !dbg !26
  tail call void @llvm.nvvm.barrier0(), !dbg !26
  %296 = load float, ptr addrspace(3) %250, align 4, !dbg !26
  %297 = load float, ptr addrspace(3) %252, align 4, !dbg !26
  %298 = load float, ptr addrspace(3) %254, align 4, !dbg !26
  %299 = load float, ptr addrspace(3) %256, align 4, !dbg !26
  %300 = load float, ptr addrspace(3) %258, align 4, !dbg !26
  %301 = load float, ptr addrspace(3) %260, align 4, !dbg !26
  %302 = load float, ptr addrspace(3) %262, align 4, !dbg !26
  %303 = load float, ptr addrspace(3) %264, align 4, !dbg !26
  %304 = load float, ptr addrspace(3) %266, align 4, !dbg !26
  %305 = load float, ptr addrspace(3) %268, align 4, !dbg !26
  %306 = load float, ptr addrspace(3) %270, align 4, !dbg !26
  %307 = load float, ptr addrspace(3) %272, align 4, !dbg !26
  %308 = load float, ptr addrspace(3) %274, align 4, !dbg !26
  %309 = load float, ptr addrspace(3) %276, align 4, !dbg !26
  %310 = load float, ptr addrspace(3) %278, align 4, !dbg !26
  %311 = load float, ptr addrspace(3) %280, align 4, !dbg !26
  %312 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %282, i1 %45) #2, !dbg !29
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %313 = insertelement <1 x i32> poison, i32 %312, i64 0, !dbg !28
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %283, <1 x i32> %313, i1 true) #2, !dbg !28
  tail call void @llvm.nvvm.barrier0(), !dbg !28
  %314 = load float, ptr addrspace(3) %284, align 8, !dbg !28
  %315 = load float, ptr addrspace(3) %285, align 8, !dbg !28
  %316 = load float, ptr addrspace(3) %286, align 8, !dbg !28
  %317 = load float, ptr addrspace(3) %287, align 8, !dbg !28
  %318 = insertelement <32 x float> poison, float %311, i64 0, !dbg !30
  %319 = insertelement <32 x float> %318, float %310, i64 1, !dbg !30
  %320 = insertelement <32 x float> %319, float %309, i64 2, !dbg !30
  %321 = insertelement <32 x float> %320, float %308, i64 3, !dbg !30
  %322 = insertelement <32 x float> %321, float %307, i64 4, !dbg !30
  %323 = insertelement <32 x float> %322, float %306, i64 5, !dbg !30
  %324 = insertelement <32 x float> %323, float %305, i64 6, !dbg !30
  %325 = insertelement <32 x float> %324, float %304, i64 7, !dbg !30
  %326 = insertelement <32 x float> %325, float %303, i64 8, !dbg !30
  %327 = insertelement <32 x float> %326, float %302, i64 9, !dbg !30
  %328 = insertelement <32 x float> %327, float %301, i64 10, !dbg !30
  %329 = insertelement <32 x float> %328, float %300, i64 11, !dbg !30
  %330 = insertelement <32 x float> %329, float %299, i64 12, !dbg !30
  %331 = insertelement <32 x float> %330, float %298, i64 13, !dbg !30
  %332 = insertelement <32 x float> %331, float %297, i64 14, !dbg !30
  %333 = insertelement <32 x float> %332, float %296, i64 15, !dbg !30
  %334 = shufflevector <4 x float> %295, <4 x float> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !30
  %335 = shufflevector <32 x float> %333, <32 x float> %334, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 32, i32 33, i32 34, i32 35, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !30
  %336 = shufflevector <4 x float> %293, <4 x float> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !30
  %337 = shufflevector <32 x float> %335, <32 x float> %336, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 32, i32 33, i32 34, i32 35, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !30
  %338 = shufflevector <4 x float> %291, <4 x float> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !30
  %339 = shufflevector <32 x float> %337, <32 x float> %338, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 32, i32 33, i32 34, i32 35, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !30
  %340 = shufflevector <4 x float> %289, <4 x float> poison, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison, i32 poison>, !dbg !30
  %341 = shufflevector <32 x float> %339, <32 x float> %340, <32 x i32> <i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 9, i32 10, i32 11, i32 12, i32 13, i32 14, i32 15, i32 16, i32 17, i32 18, i32 19, i32 20, i32 21, i32 22, i32 23, i32 24, i32 25, i32 26, i32 27, i32 32, i32 33, i32 34, i32 35>, !dbg !30
  %342 = insertelement <32 x i32> poison, i32 %312, i64 0, !dbg !30
  %343 = bitcast <32 x i32> %342 to <32 x float>, !dbg !30
  %344 = insertelement <32 x float> %343, float %317, i64 16, !dbg !30
  %345 = insertelement <32 x float> %344, float %316, i64 20, !dbg !30
  %346 = insertelement <32 x float> %345, float %315, i64 24, !dbg !30
  %347 = insertelement <32 x float> %346, float %314, i64 28, !dbg !30
  %348 = shufflevector <32 x float> %347, <32 x float> poison, <32 x i32> <i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 16, i32 16, i32 16, i32 16, i32 20, i32 20, i32 20, i32 20, i32 24, i32 24, i32 24, i32 24, i32 28, i32 28, i32 28, i32 28>, !dbg !30
  %349 = fadd <32 x float> %341, %348, !dbg !30
  %350 = fcmp ogt <32 x float> %349, zeroinitializer, !dbg !31
  %351 = extractelement <32 x float> %349, i64 31, !dbg !28
  %352 = fmul float %351, 0x3FC99999A0000000, !dbg !32
  %353 = extractelement <32 x float> %349, i64 30, !dbg !28
  %354 = fmul float %353, 0x3FC99999A0000000, !dbg !32
  %355 = extractelement <32 x float> %349, i64 29, !dbg !28
  %356 = fmul float %355, 0x3FC99999A0000000, !dbg !32
  %357 = extractelement <32 x float> %349, i64 28, !dbg !28
  %358 = fmul float %357, 0x3FC99999A0000000, !dbg !32
  %359 = extractelement <32 x float> %349, i64 27, !dbg !28
  %360 = fmul float %359, 0x3FC99999A0000000, !dbg !32
  %361 = extractelement <32 x float> %349, i64 26, !dbg !28
  %362 = fmul float %361, 0x3FC99999A0000000, !dbg !32
  %363 = extractelement <32 x float> %349, i64 25, !dbg !28
  %364 = fmul float %363, 0x3FC99999A0000000, !dbg !32
  %365 = extractelement <32 x float> %349, i64 24, !dbg !28
  %366 = fmul float %365, 0x3FC99999A0000000, !dbg !32
  %367 = extractelement <32 x float> %349, i64 23, !dbg !28
  %368 = fmul float %367, 0x3FC99999A0000000, !dbg !32
  %369 = extractelement <32 x float> %349, i64 22, !dbg !28
  %370 = fmul float %369, 0x3FC99999A0000000, !dbg !32
  %371 = extractelement <32 x float> %349, i64 21, !dbg !28
  %372 = fmul float %371, 0x3FC99999A0000000, !dbg !32
  %373 = extractelement <32 x float> %349, i64 20, !dbg !28
  %374 = fmul float %373, 0x3FC99999A0000000, !dbg !32
  %375 = extractelement <32 x float> %349, i64 19, !dbg !28
  %376 = fmul float %375, 0x3FC99999A0000000, !dbg !32
  %377 = extractelement <32 x float> %349, i64 18, !dbg !28
  %378 = fmul float %377, 0x3FC99999A0000000, !dbg !32
  %379 = extractelement <32 x float> %349, i64 17, !dbg !28
  %380 = fmul float %379, 0x3FC99999A0000000, !dbg !32
  %381 = extractelement <32 x float> %349, i64 16, !dbg !28
  %382 = fmul float %381, 0x3FC99999A0000000, !dbg !32
  %383 = extractelement <32 x i1> %350, i64 31, !dbg !28
  %384 = select i1 %383, float %351, float %352, !dbg !28
  %385 = extractelement <32 x i1> %350, i64 30, !dbg !28
  %386 = select i1 %385, float %353, float %354, !dbg !28
  %387 = extractelement <32 x i1> %350, i64 29, !dbg !28
  %388 = select i1 %387, float %355, float %356, !dbg !28
  %389 = extractelement <32 x i1> %350, i64 28, !dbg !28
  %390 = select i1 %389, float %357, float %358, !dbg !28
  %391 = extractelement <32 x i1> %350, i64 27, !dbg !28
  %392 = select i1 %391, float %359, float %360, !dbg !28
  %393 = extractelement <32 x i1> %350, i64 26, !dbg !28
  %394 = select i1 %393, float %361, float %362, !dbg !28
  %395 = extractelement <32 x i1> %350, i64 25, !dbg !28
  %396 = select i1 %395, float %363, float %364, !dbg !28
  %397 = extractelement <32 x i1> %350, i64 24, !dbg !28
  %398 = select i1 %397, float %365, float %366, !dbg !28
  %399 = extractelement <32 x i1> %350, i64 23, !dbg !28
  %400 = select i1 %399, float %367, float %368, !dbg !28
  %401 = extractelement <32 x i1> %350, i64 22, !dbg !28
  %402 = select i1 %401, float %369, float %370, !dbg !28
  %403 = extractelement <32 x i1> %350, i64 21, !dbg !28
  %404 = select i1 %403, float %371, float %372, !dbg !28
  %405 = extractelement <32 x i1> %350, i64 20, !dbg !28
  %406 = select i1 %405, float %373, float %374, !dbg !28
  %407 = extractelement <32 x i1> %350, i64 19, !dbg !28
  %408 = select i1 %407, float %375, float %376, !dbg !28
  %409 = extractelement <32 x i1> %350, i64 18, !dbg !28
  %410 = select i1 %409, float %377, float %378, !dbg !28
  %411 = extractelement <32 x i1> %350, i64 17, !dbg !28
  %412 = select i1 %411, float %379, float %380, !dbg !28
  %413 = extractelement <32 x i1> %350, i64 16, !dbg !28
  %414 = select i1 %413, float %381, float %382, !dbg !28
  %415 = getelementptr i1, ptr addrspace(1) %2, i64 %53, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %416 = extractelement <32 x i1> %350, i64 15, !dbg !34
  %417 = zext i1 %416 to i8, !dbg !34
  %418 = extractelement <32 x i1> %350, i64 14, !dbg !34
  %419 = zext i1 %418 to i8, !dbg !34
  %420 = extractelement <32 x i1> %350, i64 13, !dbg !34
  %421 = zext i1 %420 to i8, !dbg !34
  %422 = extractelement <32 x i1> %350, i64 12, !dbg !34
  %423 = zext i1 %422 to i8, !dbg !34
  %424 = extractelement <32 x i1> %350, i64 11, !dbg !34
  %425 = zext i1 %424 to i8, !dbg !34
  %426 = extractelement <32 x i1> %350, i64 10, !dbg !34
  %427 = zext i1 %426 to i8, !dbg !34
  %428 = extractelement <32 x i1> %350, i64 9, !dbg !34
  %429 = zext i1 %428 to i8, !dbg !34
  %430 = extractelement <32 x i1> %350, i64 8, !dbg !34
  %431 = zext i1 %430 to i8, !dbg !34
  %432 = extractelement <32 x i1> %350, i64 7, !dbg !34
  %433 = zext i1 %432 to i8, !dbg !34
  %434 = extractelement <32 x i1> %350, i64 6, !dbg !34
  %435 = zext i1 %434 to i8, !dbg !34
  %436 = extractelement <32 x i1> %350, i64 5, !dbg !34
  %437 = zext i1 %436 to i8, !dbg !34
  %438 = extractelement <32 x i1> %350, i64 4, !dbg !34
  %439 = zext i1 %438 to i8, !dbg !34
  %440 = extractelement <32 x i1> %350, i64 3, !dbg !34
  %441 = zext i1 %440 to i8, !dbg !34
  %442 = extractelement <32 x i1> %350, i64 2, !dbg !34
  %443 = zext i1 %442 to i8, !dbg !34
  %444 = extractelement <32 x i1> %350, i64 1, !dbg !34
  %445 = zext i1 %444 to i8, !dbg !34
  %446 = extractelement <32 x i1> %350, i64 0, !dbg !34
  %447 = zext i1 %446 to i8, !dbg !34
  %448 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %30, !dbg !34
  %449 = insertelement <1 x i8> poison, i8 %417, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %448, <1 x i8> %449, i1 true) #2, !dbg !34
  %450 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %251, !dbg !34
  %451 = insertelement <1 x i8> poison, i8 %419, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %450, <1 x i8> %451, i1 true) #2, !dbg !34
  %452 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %253, !dbg !34
  %453 = insertelement <1 x i8> poison, i8 %421, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %452, <1 x i8> %453, i1 true) #2, !dbg !34
  %454 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %255, !dbg !34
  %455 = insertelement <1 x i8> poison, i8 %423, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %454, <1 x i8> %455, i1 true) #2, !dbg !34
  %456 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %257, !dbg !34
  %457 = insertelement <1 x i8> poison, i8 %425, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %456, <1 x i8> %457, i1 true) #2, !dbg !34
  %458 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %259, !dbg !34
  %459 = insertelement <1 x i8> poison, i8 %427, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %458, <1 x i8> %459, i1 true) #2, !dbg !34
  %460 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %261, !dbg !34
  %461 = insertelement <1 x i8> poison, i8 %429, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %460, <1 x i8> %461, i1 true) #2, !dbg !34
  %462 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %263, !dbg !34
  %463 = insertelement <1 x i8> poison, i8 %431, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %462, <1 x i8> %463, i1 true) #2, !dbg !34
  %464 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %265, !dbg !34
  %465 = insertelement <1 x i8> poison, i8 %433, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %464, <1 x i8> %465, i1 true) #2, !dbg !34
  %466 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %267, !dbg !34
  %467 = insertelement <1 x i8> poison, i8 %435, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %466, <1 x i8> %467, i1 true) #2, !dbg !34
  %468 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %269, !dbg !34
  %469 = insertelement <1 x i8> poison, i8 %437, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %468, <1 x i8> %469, i1 true) #2, !dbg !34
  %470 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %271, !dbg !34
  %471 = insertelement <1 x i8> poison, i8 %439, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %470, <1 x i8> %471, i1 true) #2, !dbg !34
  %472 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %273, !dbg !34
  %473 = insertelement <1 x i8> poison, i8 %441, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %472, <1 x i8> %473, i1 true) #2, !dbg !34
  %474 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %275, !dbg !34
  %475 = insertelement <1 x i8> poison, i8 %443, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %474, <1 x i8> %475, i1 true) #2, !dbg !34
  %476 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %277, !dbg !34
  %477 = insertelement <1 x i8> poison, i8 %445, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %476, <1 x i8> %477, i1 true) #2, !dbg !34
  %478 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %279, !dbg !34
  %479 = insertelement <1 x i8> poison, i8 %447, i64 0, !dbg !34
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %478, <1 x i8> %479, i1 true) #2, !dbg !34
  tail call void @llvm.nvvm.barrier0(), !dbg !34
  %480 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %203, !dbg !34
  %481 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %215, !dbg !34
  %482 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %227, !dbg !34
  %483 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %239, !dbg !34
  %484 = load <4 x i8>, ptr addrspace(3) %480, align 1, !dbg !34
  %485 = and <4 x i8> %484, splat (i8 1), !dbg !34
  %486 = load <4 x i8>, ptr addrspace(3) %481, align 1, !dbg !34
  %487 = and <4 x i8> %486, splat (i8 1), !dbg !34
  %488 = load <4 x i8>, ptr addrspace(3) %482, align 1, !dbg !34
  %489 = and <4 x i8> %488, splat (i8 1), !dbg !34
  %490 = load <4 x i8>, ptr addrspace(3) %483, align 1, !dbg !34
  %491 = and <4 x i8> %490, splat (i8 1), !dbg !34
  %492 = bitcast <4 x i8> %485 to i32, !dbg !34
  %493 = bitcast <4 x i8> %487 to i32, !dbg !34
  %494 = bitcast <4 x i8> %489 to i32, !dbg !34
  %495 = bitcast <4 x i8> %491 to i32, !dbg !34
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %492, i32 %493, i32 %494, i32 %495, ptr addrspace(1) %415, i1 %61) #2, !dbg !34
  %496 = shl i32 %35, 6, !dbg !35
  %497 = shl i32 %36, 6, !dbg !35
  %498 = shl i32 %37, 6, !dbg !35
  %499 = shl i32 %38, 6, !dbg !35
  %500 = shl i32 %46, 15, !dbg !36
  %501 = add i32 %500, %.decomposed, !dbg !37
  %502 = add i32 %501, %496, !dbg !38
  %503 = add i32 %501, %497, !dbg !38
  %504 = add i32 %501, %498, !dbg !38
  %505 = add i32 %501, %499, !dbg !38
  %506 = sext i32 %502 to i64, !dbg !39
  %507 = getelementptr float, ptr addrspace(1) %3, i64 %506, !dbg !39
  %508 = sext i32 %503 to i64, !dbg !39
  %509 = getelementptr float, ptr addrspace(1) %3, i64 %508, !dbg !39
  %510 = sext i32 %504 to i64, !dbg !39
  %511 = getelementptr float, ptr addrspace(1) %3, i64 %510, !dbg !39
  %512 = sext i32 %505 to i64, !dbg !39
  %513 = getelementptr float, ptr addrspace(1) %3, i64 %512, !dbg !39
  %514 = bitcast float %384 to i32, !dbg !40
  %515 = bitcast float %386 to i32, !dbg !40
  %516 = bitcast float %388 to i32, !dbg !40
  %517 = bitcast float %390 to i32, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %514, i32 %515, i32 %516, i32 %517, ptr addrspace(1) %507, i1 %62) #2, !dbg !40
  %518 = bitcast float %392 to i32, !dbg !40
  %519 = bitcast float %394 to i32, !dbg !40
  %520 = bitcast float %396 to i32, !dbg !40
  %521 = bitcast float %398 to i32, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %518, i32 %519, i32 %520, i32 %521, ptr addrspace(1) %509, i1 %63) #2, !dbg !40
  %522 = bitcast float %400 to i32, !dbg !40
  %523 = bitcast float %402 to i32, !dbg !40
  %524 = bitcast float %404 to i32, !dbg !40
  %525 = bitcast float %406 to i32, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %522, i32 %523, i32 %524, i32 %525, ptr addrspace(1) %511, i1 %64) #2, !dbg !40
  %526 = bitcast float %408 to i32, !dbg !40
  %527 = bitcast float %410 to i32, !dbg !40
  %528 = bitcast float %412 to i32, !dbg !40
  %529 = bitcast float %414 to i32, !dbg !40
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %526, i32 %527, i32 %528, i32 %529, ptr addrspace(1) %513, i1 %65) #2, !dbg !40
  ret void, !dbg !41
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "csnv7xak3ajfacpz54ybn5r32qvqs6r5t2oxgx6z5nmxl4luk2i7.py", directory: "inductor_cache/sn")
!4 = !{ptr @triton_poi_fused_convolution_leaky_relu_27, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_leaky_relu_27, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_leaky_relu_27", linkageName: "triton_poi_fused_convolution_leaky_relu_27", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 28, scope: !7)
!16 = !DILocation(line: 25, column: 33, scope: !7)
!17 = !DILocation(line: 26, column: 44, scope: !7)
!18 = !DILocation(line: 26, column: 23, scope: !7)
!19 = !DILocation(line: 27, column: 21, scope: !7)
!20 = !DILocation(line: 31, column: 19, scope: !7)
!21 = !DILocation(line: 30, column: 19, scope: !7)
!22 = !DILocation(line: 32, column: 39, scope: !7)
!23 = !DILocation(line: 32, column: 35, scope: !7)
!24 = !DILocation(line: 32, column: 30, scope: !7)
!25 = !DILocation(line: 32, column: 52, scope: !7)
!26 = !DILocation(line: 32, column: 44, scope: !7)
!27 = !DILocation(line: 33, column: 30, scope: !7)
!28 = !DILocation(line: 39, column: 32, scope: !7)
!29 = !DILocation(line: 33, column: 35, scope: !7)
!30 = !DILocation(line: 34, column: 18, scope: !7)
!31 = !DILocation(line: 36, column: 18, scope: !7)
!32 = !DILocation(line: 38, column: 18, scope: !7)
!33 = !DILocation(line: 40, column: 25, scope: !7)
!34 = !DILocation(line: 40, column: 45, scope: !7)
!35 = !DILocation(line: 41, column: 33, scope: !7)
!36 = !DILocation(line: 41, column: 44, scope: !7)
!37 = !DILocation(line: 41, column: 30, scope: !7)
!38 = !DILocation(line: 41, column: 38, scope: !7)
!39 = !DILocation(line: 41, column: 25, scope: !7)
!40 = !DILocation(line: 41, column: 55, scope: !7)
!41 = !DILocation(line: 41, column: 4, scope: !7)
