; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@.str = private unnamed_addr constant [11 x i8] c"__CUDA_FTZ\00", align 1
@.str.2 = private unnamed_addr constant [17 x i8] c"__CUDA_PREC_SQRT\00", align 1

define void @triton_poi_fused__native_batch_norm_legit_no_training_add_35(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #3, !dbg !10
  %9 = shl i32 %8, 9, !dbg !11
  %10 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %11 = shl i32 %10, 2, !dbg !12
  %12 = and i32 %11, 508, !dbg !12
  %13 = or disjoint i32 %9, %12, !dbg !13
  %14 = srem i32 %13, 160, !dbg !14
  %15 = sext i32 %13 to i64, !dbg !15
  %16 = getelementptr float, ptr addrspace(1) %0, i64 %15, !dbg !15
  %17 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %16, i1 true) #3, !dbg !16
  %18 = getelementptr float, ptr addrspace(1) %1, i64 %15, !dbg !17
  %19 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %18, i1 true) #3, !dbg !18
  %20 = sext i32 %14 to i64, !dbg !19
  %21 = getelementptr float, ptr addrspace(1) %2, i64 %20, !dbg !19
  %22 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %21, i1 true) #3, !dbg !20
  %23 = getelementptr float, ptr addrspace(1) %3, i64 %20, !dbg !21
  %24 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %23, i1 true) #3, !dbg !22
  %25 = extractvalue { i32, i32, i32, i32 } %24, 0, !dbg !22
  %26 = extractvalue { i32, i32, i32, i32 } %24, 1, !dbg !22
  %27 = extractvalue { i32, i32, i32, i32 } %24, 2, !dbg !22
  %28 = extractvalue { i32, i32, i32, i32 } %24, 3, !dbg !22
  %29 = bitcast i32 %25 to float, !dbg !22
  %30 = bitcast i32 %26 to float, !dbg !22
  %31 = bitcast i32 %27 to float, !dbg !22
  %32 = bitcast i32 %28 to float, !dbg !22
  %33 = getelementptr float, ptr addrspace(1) %4, i64 %20, !dbg !23
  %34 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %33, i1 true) #3, !dbg !24
  %35 = getelementptr float, ptr addrspace(1) %5, i64 %20, !dbg !25
  %36 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %35, i1 true) #3, !dbg !26
  %37 = fadd float %29, 0x3EE4F8B580000000, !dbg !27
  %38 = fadd float %30, 0x3EE4F8B580000000, !dbg !27
  %39 = fadd float %31, 0x3EE4F8B580000000, !dbg !27
  %40 = fadd float %32, 0x3EE4F8B580000000, !dbg !27
  %41 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i = icmp eq i32 %41, 0, !dbg !28
  %42 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i = icmp eq i32 %42, 0, !dbg !28
  br i1 %.not.i, label %48, label %43, !dbg !28

43:                                               ; preds = %7
  br i1 %.not1.i, label %46, label %44, !dbg !28

44:                                               ; preds = %43
  %45 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %37) #3, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

46:                                               ; preds = %43
  %47 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %37) #3, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

48:                                               ; preds = %7
  br i1 %.not1.i, label %51, label %49, !dbg !28

49:                                               ; preds = %48
  %50 = tail call float @llvm.nvvm.sqrt.rn.f(float %37) #3, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

51:                                               ; preds = %48
  %52 = tail call float @llvm.nvvm.sqrt.approx.f(float %37) #3, !dbg !28
  br label %__nv_sqrtf.exit, !dbg !28

__nv_sqrtf.exit:                                  ; preds = %44, %46, %49, %51
  %.0.i = phi float [ %45, %44 ], [ %47, %46 ], [ %50, %49 ], [ %52, %51 ], !dbg !28
  %53 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i1 = icmp eq i32 %53, 0, !dbg !28
  %54 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i4 = icmp eq i32 %54, 0, !dbg !28
  br i1 %.not.i1, label %60, label %55, !dbg !28

55:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %58, label %56, !dbg !28

56:                                               ; preds = %55
  %57 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %38) #3, !dbg !28
  br label %__nv_sqrtf.exit5, !dbg !28

58:                                               ; preds = %55
  %59 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %38) #3, !dbg !28
  br label %__nv_sqrtf.exit5, !dbg !28

60:                                               ; preds = %__nv_sqrtf.exit
  br i1 %.not1.i4, label %63, label %61, !dbg !28

61:                                               ; preds = %60
  %62 = tail call float @llvm.nvvm.sqrt.rn.f(float %38) #3, !dbg !28
  br label %__nv_sqrtf.exit5, !dbg !28

63:                                               ; preds = %60
  %64 = tail call float @llvm.nvvm.sqrt.approx.f(float %38) #3, !dbg !28
  br label %__nv_sqrtf.exit5, !dbg !28

__nv_sqrtf.exit5:                                 ; preds = %56, %58, %61, %63
  %.0.i3 = phi float [ %57, %56 ], [ %59, %58 ], [ %62, %61 ], [ %64, %63 ], !dbg !28
  %65 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i6 = icmp eq i32 %65, 0, !dbg !28
  %66 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i9 = icmp eq i32 %66, 0, !dbg !28
  br i1 %.not.i6, label %72, label %67, !dbg !28

67:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %70, label %68, !dbg !28

68:                                               ; preds = %67
  %69 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %39) #3, !dbg !28
  br label %__nv_sqrtf.exit10, !dbg !28

70:                                               ; preds = %67
  %71 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %39) #3, !dbg !28
  br label %__nv_sqrtf.exit10, !dbg !28

72:                                               ; preds = %__nv_sqrtf.exit5
  br i1 %.not1.i9, label %75, label %73, !dbg !28

73:                                               ; preds = %72
  %74 = tail call float @llvm.nvvm.sqrt.rn.f(float %39) #3, !dbg !28
  br label %__nv_sqrtf.exit10, !dbg !28

75:                                               ; preds = %72
  %76 = tail call float @llvm.nvvm.sqrt.approx.f(float %39) #3, !dbg !28
  br label %__nv_sqrtf.exit10, !dbg !28

__nv_sqrtf.exit10:                                ; preds = %68, %70, %73, %75
  %.0.i8 = phi float [ %69, %68 ], [ %71, %70 ], [ %74, %73 ], [ %76, %75 ], !dbg !28
  %77 = tail call i32 @__nvvm_reflect(ptr nonnull @.str) #3, !dbg !28
  %.not.i11 = icmp eq i32 %77, 0, !dbg !28
  %78 = tail call i32 @__nvvm_reflect(ptr nonnull @.str.2) #3, !dbg !28
  %.not1.i14 = icmp eq i32 %78, 0, !dbg !28
  br i1 %.not.i11, label %84, label %79, !dbg !28

79:                                               ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %82, label %80, !dbg !28

80:                                               ; preds = %79
  %81 = tail call float @llvm.nvvm.sqrt.rn.ftz.f(float %40) #3, !dbg !28
  br label %__nv_sqrtf.exit15, !dbg !28

82:                                               ; preds = %79
  %83 = tail call float @llvm.nvvm.sqrt.approx.ftz.f(float %40) #3, !dbg !28
  br label %__nv_sqrtf.exit15, !dbg !28

84:                                               ; preds = %__nv_sqrtf.exit10
  br i1 %.not1.i14, label %87, label %85, !dbg !28

85:                                               ; preds = %84
  %86 = tail call float @llvm.nvvm.sqrt.rn.f(float %40) #3, !dbg !28
  br label %__nv_sqrtf.exit15, !dbg !28

87:                                               ; preds = %84
  %88 = tail call float @llvm.nvvm.sqrt.approx.f(float %40) #3, !dbg !28
  br label %__nv_sqrtf.exit15, !dbg !28

__nv_sqrtf.exit15:                                ; preds = %80, %82, %85, %87
  %.0.i13 = phi float [ %81, %80 ], [ %83, %82 ], [ %86, %85 ], [ %88, %87 ], !dbg !28
  %89 = extractvalue { i32, i32, i32, i32 } %19, 3, !dbg !18
  %90 = bitcast i32 %89 to float, !dbg !18
  %91 = extractvalue { i32, i32, i32, i32 } %22, 3, !dbg !20
  %92 = bitcast i32 %91 to float, !dbg !20
  %93 = fsub float %90, %92, !dbg !29
  %94 = extractvalue { i32, i32, i32, i32 } %19, 2, !dbg !18
  %95 = bitcast i32 %94 to float, !dbg !18
  %96 = extractvalue { i32, i32, i32, i32 } %22, 2, !dbg !20
  %97 = bitcast i32 %96 to float, !dbg !20
  %98 = fsub float %95, %97, !dbg !29
  %99 = extractvalue { i32, i32, i32, i32 } %19, 1, !dbg !18
  %100 = bitcast i32 %99 to float, !dbg !18
  %101 = extractvalue { i32, i32, i32, i32 } %22, 1, !dbg !20
  %102 = bitcast i32 %101 to float, !dbg !20
  %103 = fsub float %100, %102, !dbg !29
  %104 = extractvalue { i32, i32, i32, i32 } %19, 0, !dbg !18
  %105 = bitcast i32 %104 to float, !dbg !18
  %106 = extractvalue { i32, i32, i32, i32 } %22, 0, !dbg !20
  %107 = bitcast i32 %106 to float, !dbg !20
  %108 = fsub float %105, %107, !dbg !29
  %109 = extractvalue { i32, i32, i32, i32 } %36, 3, !dbg !26
  %110 = bitcast i32 %109 to float, !dbg !26
  %111 = extractvalue { i32, i32, i32, i32 } %36, 2, !dbg !26
  %112 = bitcast i32 %111 to float, !dbg !26
  %113 = extractvalue { i32, i32, i32, i32 } %36, 1, !dbg !26
  %114 = bitcast i32 %113 to float, !dbg !26
  %115 = extractvalue { i32, i32, i32, i32 } %36, 0, !dbg !26
  %116 = bitcast i32 %115 to float, !dbg !26
  %117 = extractvalue { i32, i32, i32, i32 } %34, 3, !dbg !24
  %118 = bitcast i32 %117 to float, !dbg !24
  %119 = extractvalue { i32, i32, i32, i32 } %34, 2, !dbg !24
  %120 = bitcast i32 %119 to float, !dbg !24
  %121 = extractvalue { i32, i32, i32, i32 } %34, 1, !dbg !24
  %122 = bitcast i32 %121 to float, !dbg !24
  %123 = extractvalue { i32, i32, i32, i32 } %34, 0, !dbg !24
  %124 = bitcast i32 %123 to float, !dbg !24
  %125 = extractvalue { i32, i32, i32, i32 } %17, 3, !dbg !16
  %126 = bitcast i32 %125 to float, !dbg !16
  %127 = extractvalue { i32, i32, i32, i32 } %17, 2, !dbg !16
  %128 = bitcast i32 %127 to float, !dbg !16
  %129 = extractvalue { i32, i32, i32, i32 } %17, 1, !dbg !16
  %130 = bitcast i32 %129 to float, !dbg !16
  %131 = extractvalue { i32, i32, i32, i32 } %17, 0, !dbg !16
  %132 = bitcast i32 %131 to float, !dbg !16
  %133 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i) #3, !dbg !30
  %134 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i3) #3, !dbg !30
  %135 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i8) #3, !dbg !30
  %136 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float 1.000000e+00, float %.0.i13) #3, !dbg !30
  %137 = fmul float %108, %133, !dbg !31
  %138 = fmul float %103, %134, !dbg !31
  %139 = fmul float %98, %135, !dbg !31
  %140 = fmul float %93, %136, !dbg !31
  %141 = fmul float %137, %124, !dbg !32
  %142 = fmul float %138, %122, !dbg !32
  %143 = fmul float %139, %120, !dbg !32
  %144 = fmul float %140, %118, !dbg !32
  %145 = fadd float %141, %116, !dbg !33
  %146 = fadd float %142, %114, !dbg !33
  %147 = fadd float %143, %112, !dbg !33
  %148 = fadd float %144, %110, !dbg !33
  %149 = fadd float %145, %132, !dbg !34
  %150 = fadd float %146, %130, !dbg !34
  %151 = fadd float %147, %128, !dbg !34
  %152 = fadd float %148, %126, !dbg !34
  %153 = bitcast float %149 to i32, !dbg !35
  %154 = bitcast float %150 to i32, !dbg !35
  %155 = bitcast float %151 to i32, !dbg !35
  %156 = bitcast float %152 to i32, !dbg !35
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %153, i32 %154, i32 %155, i32 %156, ptr addrspace(1) %16, i1 true) #3, !dbg !35
  ret void, !dbg !36
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

declare i32 @__nvvm_reflect(ptr) local_unnamed_addr #1

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.ftz.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.rn.f(float) #2

; Function Attrs: mustprogress nocallback nofree nosync nounwind willreturn memory(none)
declare float @llvm.nvvm.sqrt.approx.f(float) #2

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "stack-protector-buffer-size"="8" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { mustprogress nocallback nofree nosync nounwind willreturn memory(none) }
attributes #3 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "c7r4hcp5vgmlvtiymvjes6ipxnpbmtqnagtmajvwdce23yjggye2.py", directory: "inductor_cache/7r")
!4 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_35, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__native_batch_norm_legit_no_training_add_35, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__native_batch_norm_legit_no_training_add_35", linkageName: "triton_poi_fused__native_batch_norm_legit_no_training_add_35", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 19, scope: !7)
!15 = !DILocation(line: 26, column: 34, scope: !7)
!16 = !DILocation(line: 26, column: 39, scope: !7)
!17 = !DILocation(line: 27, column: 30, scope: !7)
!18 = !DILocation(line: 27, column: 35, scope: !7)
!19 = !DILocation(line: 28, column: 30, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 29, column: 30, scope: !7)
!22 = !DILocation(line: 29, column: 35, scope: !7)
!23 = !DILocation(line: 30, column: 31, scope: !7)
!24 = !DILocation(line: 30, column: 36, scope: !7)
!25 = !DILocation(line: 31, column: 31, scope: !7)
!26 = !DILocation(line: 31, column: 36, scope: !7)
!27 = !DILocation(line: 34, column: 18, scope: !7)
!28 = !DILocation(line: 35, column: 26, scope: !7)
!29 = !DILocation(line: 32, column: 18, scope: !7)
!30 = !DILocation(line: 37, column: 18, scope: !7)
!31 = !DILocation(line: 40, column: 19, scope: !7)
!32 = !DILocation(line: 41, column: 20, scope: !7)
!33 = !DILocation(line: 42, column: 20, scope: !7)
!34 = !DILocation(line: 43, column: 19, scope: !7)
!35 = !DILocation(line: 44, column: 40, scope: !7)
!36 = !DILocation(line: 44, column: 4, scope: !7)
