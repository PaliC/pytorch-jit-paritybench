#blocked = #triton_gpu.blocked<{sizePerThread = [4, 1], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [0, 1]}>
#blocked1 = #triton_gpu.blocked<{sizePerThread = [1, 1], threadsPerWarp = [32, 1], warpsPerCTA = [4, 1], order = [0, 1]}>
#loc = loc("inductor_cache/mi/cmisjn32ltq3tmnwk6ubqrx2iazsjdwpgji6tk4bf3zbngim6mgq.py":19:0)
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 4 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_poi_fused_convolution_relu_threshold_backward_2(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/mi/cmisjn32ltq3tmnwk6ubqrx2iazsjdwpgji6tk4bf3zbngim6mgq.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/mi/cmisjn32ltq3tmnwk6ubqrx2iazsjdwpgji6tk4bf3zbngim6mgq.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/mi/cmisjn32ltq3tmnwk6ubqrx2iazsjdwpgji6tk4bf3zbngim6mgq.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/mi/cmisjn32ltq3tmnwk6ubqrx2iazsjdwpgji6tk4bf3zbngim6mgq.py":19:0), %arg4: !tt.ptr<i1> {tt.divisibility = 16 : i32} loc("inductor_cache/mi/cmisjn32ltq3tmnwk6ubqrx2iazsjdwpgji6tk4bf3zbngim6mgq.py":19:0), %arg5: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/mi/cmisjn32ltq3tmnwk6ubqrx2iazsjdwpgji6tk4bf3zbngim6mgq.py":19:0), %arg6: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/mi/cmisjn32ltq3tmnwk6ubqrx2iazsjdwpgji6tk4bf3zbngim6mgq.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<512x1xf32, #blocked> loc(#loc1)
    %c16_i32 = arith.constant 16 : i32 loc(#loc1)
    %c4_i32 = arith.constant 4 : i32 loc(#loc1)
    %c16384_i32 = arith.constant 16384 : i32 loc(#loc1)
    %c4096_i32 = arith.constant 4096 : i32 loc(#loc1)
    %c512_i32 = arith.constant 512 : i32 loc(#loc1)
    %cst_0 = arith.constant dense<4> : tensor<512x1xi32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<4> : tensor<512x1xi32, #blocked1> loc(#loc1)
    %0 = tt.get_program_id y : i32 loc(#loc2)
    %1 = arith.cmpi slt, %0, %c16_i32 : i32 loc(#loc3)
    %2 = tt.get_program_id x : i32 loc(#loc4)
    %3 = arith.muli %2, %c512_i32 : i32 loc(#loc5)
    %4 = tt.make_range {end = 512 : i32, start = 0 : i32} : tensor<512xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> loc(#loc6)
    %5 = tt.make_range {end = 512 : i32, start = 0 : i32} : tensor<512xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> loc(#loc6)
    %6 = tt.expand_dims %4 {axis = 1 : i32} : tensor<512xi32, #triton_gpu.slice<{dim = 1, parent = #blocked}>> -> tensor<512x1xi32, #blocked> loc(#loc6)
    %7 = tt.expand_dims %5 {axis = 1 : i32} : tensor<512xi32, #triton_gpu.slice<{dim = 1, parent = #blocked1}>> -> tensor<512x1xi32, #blocked1> loc(#loc6)
    %8 = tt.splat %3 : i32 -> tensor<512x1xi32, #blocked> loc(#loc7)
    %9 = tt.splat %3 : i32 -> tensor<512x1xi32, #blocked1> loc(#loc7)
    %10 = arith.addi %8, %6 : tensor<512x1xi32, #blocked> loc(#loc7)
    %11 = arith.addi %9, %7 : tensor<512x1xi32, #blocked1> loc(#loc7)
    %12 = arith.remsi %0, %c4_i32 : i32 loc(#loc8)
    %13 = arith.divsi %0, %c4_i32 : i32 loc(#loc9)
    %14 = arith.muli %10, %cst_0 : tensor<512x1xi32, #blocked> loc(#loc10)
    %15 = arith.muli %11, %cst_1 : tensor<512x1xi32, #blocked1> loc(#loc10)
    %16 = tt.splat %12 : i32 -> tensor<512x1xi32, #blocked> loc(#loc11)
    %17 = tt.splat %12 : i32 -> tensor<512x1xi32, #blocked1> loc(#loc11)
    %18 = arith.addi %16, %14 : tensor<512x1xi32, #blocked> loc(#loc11)
    %19 = arith.addi %17, %15 : tensor<512x1xi32, #blocked1> loc(#loc11)
    %20 = arith.muli %13, %c16384_i32 : i32 loc(#loc12)
    %21 = tt.splat %20 : i32 -> tensor<512x1xi32, #blocked> loc(#loc13)
    %22 = tt.splat %20 : i32 -> tensor<512x1xi32, #blocked1> loc(#loc13)
    %23 = arith.addi %18, %21 : tensor<512x1xi32, #blocked> loc(#loc13)
    %24 = arith.addi %19, %22 : tensor<512x1xi32, #blocked1> loc(#loc13)
    %25 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<512x1x!tt.ptr<f32>, #blocked> loc(#loc14)
    %26 = tt.addptr %25, %23 : tensor<512x1x!tt.ptr<f32>, #blocked>, tensor<512x1xi32, #blocked> loc(#loc14)
    %27 = tt.splat %1 : i1 -> tensor<512x1xi1, #blocked> loc(#loc15)
    %28 = tt.load %26, %27 evictionPolicy = evict_last : tensor<512x1x!tt.ptr<f32>, #blocked> loc(#loc15)
    %29 = tt.addptr %arg1, %12 : !tt.ptr<f32>, i32 loc(#loc16)
    %30 = tt.splat %29 : !tt.ptr<f32> -> tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc17)
    %31 = tt.splat %1 : i1 -> tensor<1x1xi1, #blocked> loc(#loc17)
    %32 = tt.load %30, %31 evictionPolicy = evict_last : tensor<1x1x!tt.ptr<f32>, #blocked> loc(#loc17)
    %33 = tt.broadcast %32 : tensor<1x1xf32, #blocked> -> tensor<512x1xf32, #blocked> loc(#loc18)
    %34 = arith.addf %28, %33 : tensor<512x1xf32, #blocked> loc(#loc18)
    %35 = arith.cmpf ogt, %cst, %34 : tensor<512x1xf32, #blocked> loc(#loc32)
    %36 = arith.select %35, %cst, %34 : tensor<512x1xi1, #blocked>, tensor<512x1xf32, #blocked> loc(#loc33)
    %37 = arith.cmpf ole, %36, %cst : tensor<512x1xf32, #blocked> loc(#loc22)
    %38 = arith.muli %0, %c4096_i32 : i32 loc(#loc23)
    %39 = tt.splat %38 : i32 -> tensor<512x1xi32, #blocked> loc(#loc24)
    %40 = arith.addi %10, %39 : tensor<512x1xi32, #blocked> loc(#loc24)
    %41 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<512x1x!tt.ptr<f32>, #blocked> loc(#loc25)
    %42 = tt.addptr %41, %40 : tensor<512x1x!tt.ptr<f32>, #blocked>, tensor<512x1xi32, #blocked> loc(#loc25)
    tt.store %42, %34, %27 : tensor<512x1x!tt.ptr<f32>, #blocked> loc(#loc26)
    %43 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<512x1x!tt.ptr<f32>, #blocked> loc(#loc27)
    %44 = tt.addptr %43, %40 : tensor<512x1x!tt.ptr<f32>, #blocked>, tensor<512x1xi32, #blocked> loc(#loc27)
    tt.store %44, %36, %27 : tensor<512x1x!tt.ptr<f32>, #blocked> loc(#loc28)
    %45 = tt.splat %arg4 : !tt.ptr<i1> -> tensor<512x1x!tt.ptr<i1>, #blocked1> loc(#loc29)
    %46 = tt.addptr %45, %24 : tensor<512x1x!tt.ptr<i1>, #blocked1>, tensor<512x1xi32, #blocked1> loc(#loc29)
    %47 = tt.bitcast %46 : tensor<512x1x!tt.ptr<i1>, #blocked1> -> tensor<512x1x!tt.ptr<i8>, #blocked1> loc(#loc30)
    %48 = triton_gpu.convert_layout %37 : tensor<512x1xi1, #blocked> -> tensor<512x1xi1, #blocked1> loc(#loc30)
    %49 = arith.extui %48 : tensor<512x1xi1, #blocked1> to tensor<512x1xi8, #blocked1> loc(#loc30)
    %50 = tt.splat %1 : i1 -> tensor<512x1xi1, #blocked1> loc(#loc30)
    tt.store %47, %49, %50 : tensor<512x1x!tt.ptr<i8>, #blocked1> loc(#loc30)
    tt.return loc(#loc31)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("inductor_cache/mi/cmisjn32ltq3tmnwk6ubqrx2iazsjdwpgji6tk4bf3zbngim6mgq.py":22:28)
#loc3 = loc("inductor_cache/mi/cmisjn32ltq3tmnwk6ubqrx2iazsjdwpgji6tk4bf3zbngim6mgq.py":24:21)
#loc4 = loc("inductor_cache/mi/cmisjn32ltq3tmnwk6ubqrx2iazsjdwpgji6tk4bf3zbngim6mgq.py":25:28)
#loc5 = loc("inductor_cache/mi/cmisjn32ltq3tmnwk6ubqrx2iazsjdwpgji6tk4bf3zbngim6mgq.py":25:33)
#loc6 = loc("inductor_cache/mi/cmisjn32ltq3tmnwk6ubqrx2iazsjdwpgji6tk4bf3zbngim6mgq.py":26:44)
#loc7 = loc("inductor_cache/mi/cmisjn32ltq3tmnwk6ubqrx2iazsjdwpgji6tk4bf3zbngim6mgq.py":26:23)
#loc8 = loc("inductor_cache/mi/cmisjn32ltq3tmnwk6ubqrx2iazsjdwpgji6tk4bf3zbngim6mgq.py":29:19)
#loc9 = loc("inductor_cache/mi/cmisjn32ltq3tmnwk6ubqrx2iazsjdwpgji6tk4bf3zbngim6mgq.py":30:19)
#loc10 = loc("inductor_cache/mi/cmisjn32ltq3tmnwk6ubqrx2iazsjdwpgji6tk4bf3zbngim6mgq.py":32:37)
#loc11 = loc("inductor_cache/mi/cmisjn32ltq3tmnwk6ubqrx2iazsjdwpgji6tk4bf3zbngim6mgq.py":32:35)
#loc12 = loc("inductor_cache/mi/cmisjn32ltq3tmnwk6ubqrx2iazsjdwpgji6tk4bf3zbngim6mgq.py":32:48)
#loc13 = loc("inductor_cache/mi/cmisjn32ltq3tmnwk6ubqrx2iazsjdwpgji6tk4bf3zbngim6mgq.py":32:42)
#loc14 = loc("inductor_cache/mi/cmisjn32ltq3tmnwk6ubqrx2iazsjdwpgji6tk4bf3zbngim6mgq.py":32:30)
#loc15 = loc("inductor_cache/mi/cmisjn32ltq3tmnwk6ubqrx2iazsjdwpgji6tk4bf3zbngim6mgq.py":32:53)
#loc16 = loc("inductor_cache/mi/cmisjn32ltq3tmnwk6ubqrx2iazsjdwpgji6tk4bf3zbngim6mgq.py":33:30)
#loc17 = loc("inductor_cache/mi/cmisjn32ltq3tmnwk6ubqrx2iazsjdwpgji6tk4bf3zbngim6mgq.py":33:35)
#loc18 = loc("inductor_cache/mi/cmisjn32ltq3tmnwk6ubqrx2iazsjdwpgji6tk4bf3zbngim6mgq.py":34:18)
#loc19 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":118:15)
#loc20 = loc("inductor_cache/mi/cmisjn32ltq3tmnwk6ubqrx2iazsjdwpgji6tk4bf3zbngim6mgq.py":36:40)
#loc21 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":121:29)
#loc22 = loc("inductor_cache/mi/cmisjn32ltq3tmnwk6ubqrx2iazsjdwpgji6tk4bf3zbngim6mgq.py":38:19)
#loc23 = loc("inductor_cache/mi/cmisjn32ltq3tmnwk6ubqrx2iazsjdwpgji6tk4bf3zbngim6mgq.py":39:35)
#loc24 = loc("inductor_cache/mi/cmisjn32ltq3tmnwk6ubqrx2iazsjdwpgji6tk4bf3zbngim6mgq.py":39:30)
#loc25 = loc("inductor_cache/mi/cmisjn32ltq3tmnwk6ubqrx2iazsjdwpgji6tk4bf3zbngim6mgq.py":39:25)
#loc26 = loc("inductor_cache/mi/cmisjn32ltq3tmnwk6ubqrx2iazsjdwpgji6tk4bf3zbngim6mgq.py":39:46)
#loc27 = loc("inductor_cache/mi/cmisjn32ltq3tmnwk6ubqrx2iazsjdwpgji6tk4bf3zbngim6mgq.py":40:25)
#loc28 = loc("inductor_cache/mi/cmisjn32ltq3tmnwk6ubqrx2iazsjdwpgji6tk4bf3zbngim6mgq.py":40:46)
#loc29 = loc("inductor_cache/mi/cmisjn32ltq3tmnwk6ubqrx2iazsjdwpgji6tk4bf3zbngim6mgq.py":41:25)
#loc30 = loc("inductor_cache/mi/cmisjn32ltq3tmnwk6ubqrx2iazsjdwpgji6tk4bf3zbngim6mgq.py":41:54)
#loc31 = loc("inductor_cache/mi/cmisjn32ltq3tmnwk6ubqrx2iazsjdwpgji6tk4bf3zbngim6mgq.py":41:4)
#loc32 = loc(callsite(#loc19 at #loc20))
#loc33 = loc(callsite(#loc21 at #loc20))
