; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_convolution_relu_threshold_backward_2(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, i32 %5, i32 %6) local_unnamed_addr !dbg !7 {
  %8 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %9 = icmp slt i32 %8, 16, !dbg !11
  %10 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !12
  %11 = shl i32 %10, 9, !dbg !13
  %12 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !14
  %13 = shl i32 %12, 2, !dbg !14
  %14 = and i32 %13, 508, !dbg !14
  %15 = or disjoint i32 %14, 1, !dbg !14
  %16 = or disjoint i32 %14, 2, !dbg !14
  %17 = or disjoint i32 %14, 3, !dbg !14
  %18 = and i32 %12, 127, !dbg !14
  %19 = or disjoint i32 %18, 128, !dbg !14
  %20 = or disjoint i32 %18, 256, !dbg !14
  %21 = or disjoint i32 %18, 384, !dbg !14
  %22 = or disjoint i32 %11, %14, !dbg !15
  %23 = or disjoint i32 %11, %15, !dbg !15
  %24 = or disjoint i32 %11, %16, !dbg !15
  %25 = or disjoint i32 %11, %17, !dbg !15
  %26 = or disjoint i32 %11, %18, !dbg !15
  %27 = or disjoint i32 %11, %19, !dbg !15
  %28 = or disjoint i32 %11, %20, !dbg !15
  %29 = or disjoint i32 %11, %21, !dbg !15
  %.frozen = freeze i32 %8, !dbg !16
  %30 = sdiv i32 %.frozen, 4, !dbg !16
  %31 = mul i32 %30, 4, !dbg !17
  %.decomposed = sub i32 %.frozen, %31, !dbg !17
  %32 = shl i32 %22, 2, !dbg !18
  %33 = shl i32 %23, 2, !dbg !18
  %34 = shl i32 %24, 2, !dbg !18
  %35 = shl i32 %25, 2, !dbg !18
  %36 = shl i32 %26, 2, !dbg !18
  %37 = shl i32 %27, 2, !dbg !18
  %38 = shl i32 %28, 2, !dbg !18
  %39 = shl i32 %29, 2, !dbg !18
  %40 = shl i32 %30, 14, !dbg !19
  %41 = add i32 %40, %.decomposed, !dbg !20
  %42 = add i32 %41, %32, !dbg !21
  %43 = add i32 %41, %33, !dbg !21
  %44 = add i32 %41, %34, !dbg !21
  %45 = add i32 %41, %35, !dbg !21
  %46 = add i32 %41, %36, !dbg !21
  %47 = add i32 %41, %37, !dbg !21
  %48 = add i32 %41, %38, !dbg !21
  %49 = add i32 %41, %39, !dbg !21
  %50 = sext i32 %42 to i64, !dbg !22
  %51 = getelementptr float, ptr addrspace(1) %0, i64 %50, !dbg !22
  %52 = sext i32 %43 to i64, !dbg !22
  %53 = getelementptr float, ptr addrspace(1) %0, i64 %52, !dbg !22
  %54 = sext i32 %44 to i64, !dbg !22
  %55 = getelementptr float, ptr addrspace(1) %0, i64 %54, !dbg !22
  %56 = sext i32 %45 to i64, !dbg !22
  %57 = getelementptr float, ptr addrspace(1) %0, i64 %56, !dbg !22
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %51, i1 %9) #2, !dbg !23
  %59 = bitcast i32 %58 to float, !dbg !23
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %53, i1 %9) #2, !dbg !23
  %61 = bitcast i32 %60 to float, !dbg !23
  %62 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 %9) #2, !dbg !23
  %63 = bitcast i32 %62 to float, !dbg !23
  %64 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 %9) #2, !dbg !23
  %65 = bitcast i32 %64 to float, !dbg !23
  %66 = sext i32 %.decomposed to i64, !dbg !24
  %67 = getelementptr float, ptr addrspace(1) %1, i64 %66, !dbg !24
  %68 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 %9) #2, !dbg !25
  %69 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 %9) #2, !dbg !25
  %70 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 %9) #2, !dbg !25
  %71 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %67, i1 %9) #2, !dbg !25
  %72 = bitcast i32 %71 to float, !dbg !25
  %73 = fadd float %59, %72, !dbg !26
  %74 = fadd float %61, %72, !dbg !26
  %75 = fadd float %63, %72, !dbg !26
  %76 = fadd float %65, %72, !dbg !26
  %77 = fcmp olt float %73, 0.000000e+00, !dbg !27
  %78 = fcmp olt float %74, 0.000000e+00, !dbg !27
  %79 = fcmp olt float %75, 0.000000e+00, !dbg !27
  %80 = fcmp olt float %76, 0.000000e+00, !dbg !27
  %81 = select i1 %77, float 0.000000e+00, float %73, !dbg !31
  %82 = select i1 %78, float 0.000000e+00, float %74, !dbg !31
  %83 = select i1 %79, float 0.000000e+00, float %75, !dbg !31
  %84 = select i1 %80, float 0.000000e+00, float %76, !dbg !31
  %85 = fcmp ole float %81, 0.000000e+00, !dbg !32
  %86 = fcmp ole float %82, 0.000000e+00, !dbg !32
  %87 = fcmp ole float %83, 0.000000e+00, !dbg !32
  %88 = fcmp ole float %84, 0.000000e+00, !dbg !32
  %89 = shl i32 %8, 12, !dbg !33
  %90 = add i32 %22, %89, !dbg !34
  %91 = sext i32 %90 to i64, !dbg !35
  %92 = getelementptr float, ptr addrspace(1) %2, i64 %91, !dbg !35
  %93 = bitcast float %73 to i32, !dbg !36
  %94 = bitcast float %74 to i32, !dbg !36
  %95 = bitcast float %75 to i32, !dbg !36
  %96 = bitcast float %76 to i32, !dbg !36
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %93, i32 %94, i32 %95, i32 %96, ptr addrspace(1) %92, i1 %9) #2, !dbg !36
  %97 = getelementptr float, ptr addrspace(1) %3, i64 %91, !dbg !37
  %98 = bitcast float %81 to i32, !dbg !38
  %99 = bitcast float %82 to i32, !dbg !38
  %100 = bitcast float %83 to i32, !dbg !38
  %101 = bitcast float %84 to i32, !dbg !38
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %98, i32 %99, i32 %100, i32 %101, ptr addrspace(1) %97, i1 %9) #2, !dbg !38
  %102 = sext i32 %46 to i64, !dbg !39
  %103 = getelementptr i1, ptr addrspace(1) %4, i64 %102, !dbg !39
  %104 = sext i32 %47 to i64, !dbg !39
  %105 = getelementptr i1, ptr addrspace(1) %4, i64 %104, !dbg !39
  %106 = sext i32 %48 to i64, !dbg !39
  %107 = getelementptr i1, ptr addrspace(1) %4, i64 %106, !dbg !39
  %108 = sext i32 %49 to i64, !dbg !39
  %109 = getelementptr i1, ptr addrspace(1) %4, i64 %108, !dbg !39
  %110 = zext i1 %85 to i8, !dbg !40
  %111 = zext i1 %86 to i8, !dbg !40
  %112 = zext i1 %87 to i8, !dbg !40
  %113 = zext i1 %88 to i8, !dbg !40
  %114 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %14, !dbg !40
  %115 = insertelement <1 x i8> poison, i8 %110, i64 0, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %114, <1 x i8> %115, i1 true) #2, !dbg !40
  %116 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %15, !dbg !40
  %117 = insertelement <1 x i8> poison, i8 %111, i64 0, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %116, <1 x i8> %117, i1 true) #2, !dbg !40
  %118 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %16, !dbg !40
  %119 = insertelement <1 x i8> poison, i8 %112, i64 0, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %118, <1 x i8> %119, i1 true) #2, !dbg !40
  %120 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %17, !dbg !40
  %121 = insertelement <1 x i8> poison, i8 %113, i64 0, !dbg !40
  tail call void asm sideeffect "@$2 st.shared.b8 [ $0 + 0 ], $1;", "r,h,b"(ptr addrspace(3) %120, <1 x i8> %121, i1 true) #2, !dbg !40
  tail call void @llvm.nvvm.barrier0(), !dbg !40
  %122 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %18, !dbg !40
  %123 = load i8, ptr addrspace(3) %122, align 1, !dbg !40
  %124 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %19, !dbg !40
  %125 = load i8, ptr addrspace(3) %124, align 1, !dbg !40
  %126 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %20, !dbg !40
  %127 = load i8, ptr addrspace(3) %126, align 1, !dbg !40
  %128 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %21, !dbg !40
  %129 = load i8, ptr addrspace(3) %128, align 1, !dbg !40
  %130 = and i8 %123, 1, !dbg !40
  %131 = and i8 %125, 1, !dbg !40
  %132 = and i8 %127, 1, !dbg !40
  %133 = and i8 %129, 1, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %130, ptr addrspace(1) %103, i1 %9) #2, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %131, ptr addrspace(1) %105, i1 %9) #2, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %132, ptr addrspace(1) %107, i1 %9) #2, !dbg !40
  tail call void asm sideeffect "@$2 st.global.b8 [ $1 + 0 ], { $0 };", "c,l,b"(i8 %133, ptr addrspace(1) %109, i1 %9) #2, !dbg !40
  ret void, !dbg !41
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cmisjn32ltq3tmnwk6ubqrx2iazsjdwpgji6tk4bf3zbngim6mgq.py", directory: "inductor_cache/mi")
!4 = !{ptr @triton_poi_fused_convolution_relu_threshold_backward_2, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_convolution_relu_threshold_backward_2, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_convolution_relu_threshold_backward_2", linkageName: "triton_poi_fused_convolution_relu_threshold_backward_2", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 24, column: 21, scope: !7)
!12 = !DILocation(line: 25, column: 28, scope: !7)
!13 = !DILocation(line: 25, column: 33, scope: !7)
!14 = !DILocation(line: 26, column: 44, scope: !7)
!15 = !DILocation(line: 26, column: 23, scope: !7)
!16 = !DILocation(line: 30, column: 19, scope: !7)
!17 = !DILocation(line: 29, column: 19, scope: !7)
!18 = !DILocation(line: 32, column: 37, scope: !7)
!19 = !DILocation(line: 32, column: 48, scope: !7)
!20 = !DILocation(line: 32, column: 35, scope: !7)
!21 = !DILocation(line: 32, column: 42, scope: !7)
!22 = !DILocation(line: 32, column: 30, scope: !7)
!23 = !DILocation(line: 32, column: 53, scope: !7)
!24 = !DILocation(line: 33, column: 30, scope: !7)
!25 = !DILocation(line: 33, column: 35, scope: !7)
!26 = !DILocation(line: 34, column: 18, scope: !7)
!27 = !DILocation(line: 118, column: 15, scope: !28, inlinedAt: !30)
!28 = distinct !DILexicalBlockFile(scope: !7, file: !29, discriminator: 0)
!29 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!30 = !DILocation(line: 36, column: 40, scope: !7)
!31 = !DILocation(line: 121, column: 29, scope: !28, inlinedAt: !30)
!32 = !DILocation(line: 38, column: 19, scope: !7)
!33 = !DILocation(line: 39, column: 35, scope: !7)
!34 = !DILocation(line: 39, column: 30, scope: !7)
!35 = !DILocation(line: 39, column: 25, scope: !7)
!36 = !DILocation(line: 39, column: 46, scope: !7)
!37 = !DILocation(line: 40, column: 25, scope: !7)
!38 = !DILocation(line: 40, column: 46, scope: !7)
!39 = !DILocation(line: 41, column: 25, scope: !7)
!40 = !DILocation(line: 41, column: 54, scope: !7)
!41 = !DILocation(line: 41, column: 4, scope: !7)
