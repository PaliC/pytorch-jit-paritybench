#blocked = #triton_gpu.blocked<{sizePerThread = [2], threadsPerWarp = [32], warpsPerCTA = [8], order = [0]}>
#loc = loc("inductor_cache/5r/c5r7mqeyob2fbmcbqtytch6ogyzc2o2d6kq4qgpz5ydmi5l26xzf.py":19:0)
module attributes {"triton_gpu.num-ctas" = 1 : i32, "triton_gpu.num-warps" = 8 : i32, triton_gpu.target = "cuda:90", "triton_gpu.threads-per-warp" = 32 : i32} {
  tt.func public @triton_poi_fused__native_batch_norm_legit_no_training_cat_relu_61(%arg0: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/5r/c5r7mqeyob2fbmcbqtytch6ogyzc2o2d6kq4qgpz5ydmi5l26xzf.py":19:0), %arg1: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/5r/c5r7mqeyob2fbmcbqtytch6ogyzc2o2d6kq4qgpz5ydmi5l26xzf.py":19:0), %arg2: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/5r/c5r7mqeyob2fbmcbqtytch6ogyzc2o2d6kq4qgpz5ydmi5l26xzf.py":19:0), %arg3: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/5r/c5r7mqeyob2fbmcbqtytch6ogyzc2o2d6kq4qgpz5ydmi5l26xzf.py":19:0), %arg4: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/5r/c5r7mqeyob2fbmcbqtytch6ogyzc2o2d6kq4qgpz5ydmi5l26xzf.py":19:0), %arg5: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/5r/c5r7mqeyob2fbmcbqtytch6ogyzc2o2d6kq4qgpz5ydmi5l26xzf.py":19:0), %arg6: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/5r/c5r7mqeyob2fbmcbqtytch6ogyzc2o2d6kq4qgpz5ydmi5l26xzf.py":19:0), %arg7: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/5r/c5r7mqeyob2fbmcbqtytch6ogyzc2o2d6kq4qgpz5ydmi5l26xzf.py":19:0), %arg8: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/5r/c5r7mqeyob2fbmcbqtytch6ogyzc2o2d6kq4qgpz5ydmi5l26xzf.py":19:0), %arg9: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/5r/c5r7mqeyob2fbmcbqtytch6ogyzc2o2d6kq4qgpz5ydmi5l26xzf.py":19:0), %arg10: !tt.ptr<f32> {tt.divisibility = 16 : i32} loc("inductor_cache/5r/c5r7mqeyob2fbmcbqtytch6ogyzc2o2d6kq4qgpz5ydmi5l26xzf.py":19:0), %arg11: i32 {tt.divisibility = 16 : i32} loc("inductor_cache/5r/c5r7mqeyob2fbmcbqtytch6ogyzc2o2d6kq4qgpz5ydmi5l26xzf.py":19:0)) attributes {noinline = false} {
    %cst = arith.constant dense<0.000000e+00> : tensor<512xf32, #blocked> loc(#loc1)
    %cst_0 = arith.constant dense<9.99999974E-6> : tensor<512xf32, #blocked> loc(#loc1)
    %cst_1 = arith.constant dense<1.000000e+00> : tensor<512xf32, #blocked> loc(#loc1)
    %c512_i32 = arith.constant 512 : i32 loc(#loc1)
    %cst_2 = arith.constant dense<202752> : tensor<512xi32, #blocked> loc(#loc1)
    %cst_3 = arith.constant dense<256> : tensor<512xi32, #blocked> loc(#loc1)
    %cst_4 = arith.constant dense<198> : tensor<512xi32, #blocked> loc(#loc1)
    %cst_5 = arith.constant dense<50688> : tensor<512xi32, #blocked> loc(#loc1)
    %cst_6 = arith.constant dense<150> : tensor<512xi64, #blocked> loc(#loc1)
    %cst_7 = arith.constant dense<38400> : tensor<512xi32, #blocked> loc(#loc1)
    %cst_8 = arith.constant dense<162> : tensor<512xi64, #blocked> loc(#loc1)
    %cst_9 = arith.constant dense<-150> : tensor<512xi32, #blocked> loc(#loc1)
    %cst_10 = arith.constant dense<3072> : tensor<512xi32, #blocked> loc(#loc1)
    %cst_11 = arith.constant dense<174> : tensor<512xi64, #blocked> loc(#loc1)
    %cst_12 = arith.constant dense<-162> : tensor<512xi32, #blocked> loc(#loc1)
    %cst_13 = arith.constant dense<186> : tensor<512xi64, #blocked> loc(#loc1)
    %cst_14 = arith.constant dense<-174> : tensor<512xi32, #blocked> loc(#loc1)
    %cst_15 = arith.constant dense<-186> : tensor<512xi32, #blocked> loc(#loc1)
    %0 = tt.get_program_id x : i32 loc(#loc2)
    %1 = arith.muli %0, %c512_i32 : i32 loc(#loc3)
    %2 = tt.make_range {end = 512 : i32, start = 0 : i32} : tensor<512xi32, #blocked> loc(#loc4)
    %3 = tt.splat %1 : i32 -> tensor<512xi32, #blocked> loc(#loc5)
    %4 = arith.addi %3, %2 : tensor<512xi32, #blocked> loc(#loc5)
    %5 = arith.cmpi slt, %4, %cst_2 : tensor<512xi32, #blocked> loc(#loc6)
    %6 = arith.divsi %4, %cst_3 : tensor<512xi32, #blocked> loc(#loc7)
    %7 = arith.remsi %6, %cst_4 : tensor<512xi32, #blocked> loc(#loc8)
    %8 = arith.remsi %4, %cst_3 : tensor<512xi32, #blocked> loc(#loc9)
    %9 = arith.divsi %4, %cst_5 : tensor<512xi32, #blocked> loc(#loc10)
    %10 = tt.splat %arg5 : !tt.ptr<f32> -> tensor<512x!tt.ptr<f32>, #blocked> loc(#loc11)
    %11 = tt.addptr %10, %7 : tensor<512x!tt.ptr<f32>, #blocked>, tensor<512xi32, #blocked> loc(#loc11)
    %12 = tt.load %11, %5 evictionPolicy = evict_last : tensor<512x!tt.ptr<f32>, #blocked> loc(#loc12)
    %13 = tt.splat %arg6 : !tt.ptr<f32> -> tensor<512x!tt.ptr<f32>, #blocked> loc(#loc13)
    %14 = tt.addptr %13, %7 : tensor<512x!tt.ptr<f32>, #blocked>, tensor<512xi32, #blocked> loc(#loc13)
    %15 = tt.load %14, %5 evictionPolicy = evict_last : tensor<512x!tt.ptr<f32>, #blocked> loc(#loc14)
    %16 = tt.splat %arg7 : !tt.ptr<f32> -> tensor<512x!tt.ptr<f32>, #blocked> loc(#loc15)
    %17 = tt.addptr %16, %7 : tensor<512x!tt.ptr<f32>, #blocked>, tensor<512xi32, #blocked> loc(#loc15)
    %18 = tt.load %17, %5 evictionPolicy = evict_last : tensor<512x!tt.ptr<f32>, #blocked> loc(#loc16)
    %19 = tt.splat %arg8 : !tt.ptr<f32> -> tensor<512x!tt.ptr<f32>, #blocked> loc(#loc17)
    %20 = tt.addptr %19, %7 : tensor<512x!tt.ptr<f32>, #blocked>, tensor<512xi32, #blocked> loc(#loc17)
    %21 = tt.load %20, %5 evictionPolicy = evict_last : tensor<512x!tt.ptr<f32>, #blocked> loc(#loc18)
    %22 = arith.extsi %7 : tensor<512xi32, #blocked> to tensor<512xi64, #blocked> loc(#loc19)
    %23 = arith.cmpi slt, %22, %cst_6 : tensor<512xi64, #blocked> loc(#loc19)
    %24 = arith.muli %7, %cst_3 : tensor<512xi32, #blocked> loc(#loc20)
    %25 = arith.addi %8, %24 : tensor<512xi32, #blocked> loc(#loc21)
    %26 = arith.muli %9, %cst_7 : tensor<512xi32, #blocked> loc(#loc22)
    %27 = arith.addi %25, %26 : tensor<512xi32, #blocked> loc(#loc23)
    %28 = tt.splat %arg0 : !tt.ptr<f32> -> tensor<512x!tt.ptr<f32>, #blocked> loc(#loc24)
    %29 = tt.addptr %28, %27 : tensor<512x!tt.ptr<f32>, #blocked>, tensor<512xi32, #blocked> loc(#loc24)
    %30 = arith.andi %23, %5 : tensor<512xi1, #blocked> loc(#loc25)
    %31 = tt.load %29, %30, %cst : tensor<512x!tt.ptr<f32>, #blocked> loc(#loc26)
    %32 = arith.cmpi sge, %22, %cst_6 : tensor<512xi64, #blocked> loc(#loc27)
    %33 = arith.cmpi slt, %22, %cst_8 : tensor<512xi64, #blocked> loc(#loc28)
    %34 = arith.andi %32, %33 : tensor<512xi1, #blocked> loc(#loc29)
    %35 = arith.addi %7, %cst_9 : tensor<512xi32, #blocked> loc(#loc30)
    %36 = arith.muli %35, %cst_3 : tensor<512xi32, #blocked> loc(#loc31)
    %37 = arith.addi %8, %36 : tensor<512xi32, #blocked> loc(#loc32)
    %38 = arith.muli %9, %cst_10 : tensor<512xi32, #blocked> loc(#loc33)
    %39 = arith.addi %37, %38 : tensor<512xi32, #blocked> loc(#loc34)
    %40 = tt.splat %arg1 : !tt.ptr<f32> -> tensor<512x!tt.ptr<f32>, #blocked> loc(#loc35)
    %41 = tt.addptr %40, %39 : tensor<512x!tt.ptr<f32>, #blocked>, tensor<512xi32, #blocked> loc(#loc35)
    %42 = arith.andi %34, %5 : tensor<512xi1, #blocked> loc(#loc36)
    %43 = tt.load %41, %42, %cst : tensor<512x!tt.ptr<f32>, #blocked> loc(#loc37)
    %44 = arith.cmpi sge, %22, %cst_8 : tensor<512xi64, #blocked> loc(#loc38)
    %45 = arith.cmpi slt, %22, %cst_11 : tensor<512xi64, #blocked> loc(#loc39)
    %46 = arith.andi %44, %45 : tensor<512xi1, #blocked> loc(#loc40)
    %47 = arith.addi %7, %cst_12 : tensor<512xi32, #blocked> loc(#loc41)
    %48 = arith.muli %47, %cst_3 : tensor<512xi32, #blocked> loc(#loc42)
    %49 = arith.addi %8, %48 : tensor<512xi32, #blocked> loc(#loc43)
    %50 = arith.addi %49, %38 : tensor<512xi32, #blocked> loc(#loc44)
    %51 = tt.splat %arg2 : !tt.ptr<f32> -> tensor<512x!tt.ptr<f32>, #blocked> loc(#loc45)
    %52 = tt.addptr %51, %50 : tensor<512x!tt.ptr<f32>, #blocked>, tensor<512xi32, #blocked> loc(#loc45)
    %53 = arith.andi %46, %5 : tensor<512xi1, #blocked> loc(#loc46)
    %54 = tt.load %52, %53, %cst : tensor<512x!tt.ptr<f32>, #blocked> loc(#loc47)
    %55 = arith.cmpi sge, %22, %cst_11 : tensor<512xi64, #blocked> loc(#loc48)
    %56 = arith.cmpi slt, %22, %cst_13 : tensor<512xi64, #blocked> loc(#loc49)
    %57 = arith.andi %55, %56 : tensor<512xi1, #blocked> loc(#loc50)
    %58 = arith.addi %7, %cst_14 : tensor<512xi32, #blocked> loc(#loc51)
    %59 = arith.muli %58, %cst_3 : tensor<512xi32, #blocked> loc(#loc52)
    %60 = arith.addi %8, %59 : tensor<512xi32, #blocked> loc(#loc53)
    %61 = arith.addi %60, %38 : tensor<512xi32, #blocked> loc(#loc54)
    %62 = tt.splat %arg3 : !tt.ptr<f32> -> tensor<512x!tt.ptr<f32>, #blocked> loc(#loc55)
    %63 = tt.addptr %62, %61 : tensor<512x!tt.ptr<f32>, #blocked>, tensor<512xi32, #blocked> loc(#loc55)
    %64 = arith.andi %57, %5 : tensor<512xi1, #blocked> loc(#loc56)
    %65 = tt.load %63, %64, %cst : tensor<512x!tt.ptr<f32>, #blocked> loc(#loc57)
    %66 = arith.cmpi sge, %22, %cst_13 : tensor<512xi64, #blocked> loc(#loc58)
    %67 = arith.addi %7, %cst_15 : tensor<512xi32, #blocked> loc(#loc59)
    %68 = arith.muli %67, %cst_3 : tensor<512xi32, #blocked> loc(#loc60)
    %69 = arith.addi %8, %68 : tensor<512xi32, #blocked> loc(#loc61)
    %70 = arith.addi %69, %38 : tensor<512xi32, #blocked> loc(#loc62)
    %71 = tt.splat %arg4 : !tt.ptr<f32> -> tensor<512x!tt.ptr<f32>, #blocked> loc(#loc63)
    %72 = tt.addptr %71, %70 : tensor<512x!tt.ptr<f32>, #blocked>, tensor<512xi32, #blocked> loc(#loc63)
    %73 = arith.andi %66, %5 : tensor<512xi1, #blocked> loc(#loc64)
    %74 = tt.load %72, %73, %cst : tensor<512x!tt.ptr<f32>, #blocked> loc(#loc65)
    %75 = arith.select %57, %65, %74 : tensor<512xi1, #blocked>, tensor<512xf32, #blocked> loc(#loc66)
    %76 = arith.select %46, %54, %75 : tensor<512xi1, #blocked>, tensor<512xf32, #blocked> loc(#loc67)
    %77 = arith.select %34, %43, %76 : tensor<512xi1, #blocked>, tensor<512xf32, #blocked> loc(#loc68)
    %78 = arith.select %23, %31, %77 : tensor<512xi1, #blocked>, tensor<512xf32, #blocked> loc(#loc69)
    %79 = arith.subf %78, %12 : tensor<512xf32, #blocked> loc(#loc70)
    %80 = arith.addf %15, %cst_0 : tensor<512xf32, #blocked> loc(#loc71)
    %81 = tt.extern_elementwise %80 {libname = "", libpath = "", pure = true, symbol = "__nv_sqrtf"} : (tensor<512xf32, #blocked>) -> tensor<512xf32, #blocked> loc(#loc72)
    %82 = arith.divf %cst_1, %81 : tensor<512xf32, #blocked> loc(#loc73)
    %83 = arith.mulf %79, %82 : tensor<512xf32, #blocked> loc(#loc74)
    %84 = arith.mulf %83, %18 : tensor<512xf32, #blocked> loc(#loc75)
    %85 = arith.addf %84, %21 : tensor<512xf32, #blocked> loc(#loc76)
    %86 = arith.cmpf ogt, %cst, %85 : tensor<512xf32, #blocked> loc(#loc85)
    %87 = arith.select %86, %cst, %85 : tensor<512xi1, #blocked>, tensor<512xf32, #blocked> loc(#loc86)
    %88 = tt.splat %arg9 : !tt.ptr<f32> -> tensor<512x!tt.ptr<f32>, #blocked> loc(#loc80)
    %89 = tt.addptr %88, %4 : tensor<512x!tt.ptr<f32>, #blocked>, tensor<512xi32, #blocked> loc(#loc80)
    tt.store %89, %78, %5 : tensor<512x!tt.ptr<f32>, #blocked> loc(#loc81)
    %90 = tt.splat %arg10 : !tt.ptr<f32> -> tensor<512x!tt.ptr<f32>, #blocked> loc(#loc82)
    %91 = tt.addptr %90, %4 : tensor<512x!tt.ptr<f32>, #blocked>, tensor<512xi32, #blocked> loc(#loc82)
    tt.store %91, %87, %5 : tensor<512x!tt.ptr<f32>, #blocked> loc(#loc83)
    tt.return loc(#loc84)
  } loc(#loc)
} loc(#loc)
#loc1 = loc(unknown)
#loc2 = loc("inductor_cache/5r/c5r7mqeyob2fbmcbqtytch6ogyzc2o2d6kq4qgpz5ydmi5l26xzf.py":21:28)
#loc3 = loc("inductor_cache/5r/c5r7mqeyob2fbmcbqtytch6ogyzc2o2d6kq4qgpz5ydmi5l26xzf.py":21:33)
#loc4 = loc("inductor_cache/5r/c5r7mqeyob2fbmcbqtytch6ogyzc2o2d6kq4qgpz5ydmi5l26xzf.py":22:36)
#loc5 = loc("inductor_cache/5r/c5r7mqeyob2fbmcbqtytch6ogyzc2o2d6kq4qgpz5ydmi5l26xzf.py":22:23)
#loc6 = loc("inductor_cache/5r/c5r7mqeyob2fbmcbqtytch6ogyzc2o2d6kq4qgpz5ydmi5l26xzf.py":23:21)
#loc7 = loc("inductor_cache/5r/c5r7mqeyob2fbmcbqtytch6ogyzc2o2d6kq4qgpz5ydmi5l26xzf.py":24:21)
#loc8 = loc("inductor_cache/5r/c5r7mqeyob2fbmcbqtytch6ogyzc2o2d6kq4qgpz5ydmi5l26xzf.py":24:28)
#loc9 = loc("inductor_cache/5r/c5r7mqeyob2fbmcbqtytch6ogyzc2o2d6kq4qgpz5ydmi5l26xzf.py":25:19)
#loc10 = loc("inductor_cache/5r/c5r7mqeyob2fbmcbqtytch6ogyzc2o2d6kq4qgpz5ydmi5l26xzf.py":26:19)
#loc11 = loc("inductor_cache/5r/c5r7mqeyob2fbmcbqtytch6ogyzc2o2d6kq4qgpz5ydmi5l26xzf.py":28:31)
#loc12 = loc("inductor_cache/5r/c5r7mqeyob2fbmcbqtytch6ogyzc2o2d6kq4qgpz5ydmi5l26xzf.py":28:36)
#loc13 = loc("inductor_cache/5r/c5r7mqeyob2fbmcbqtytch6ogyzc2o2d6kq4qgpz5ydmi5l26xzf.py":29:31)
#loc14 = loc("inductor_cache/5r/c5r7mqeyob2fbmcbqtytch6ogyzc2o2d6kq4qgpz5ydmi5l26xzf.py":29:36)
#loc15 = loc("inductor_cache/5r/c5r7mqeyob2fbmcbqtytch6ogyzc2o2d6kq4qgpz5ydmi5l26xzf.py":30:31)
#loc16 = loc("inductor_cache/5r/c5r7mqeyob2fbmcbqtytch6ogyzc2o2d6kq4qgpz5ydmi5l26xzf.py":30:36)
#loc17 = loc("inductor_cache/5r/c5r7mqeyob2fbmcbqtytch6ogyzc2o2d6kq4qgpz5ydmi5l26xzf.py":31:31)
#loc18 = loc("inductor_cache/5r/c5r7mqeyob2fbmcbqtytch6ogyzc2o2d6kq4qgpz5ydmi5l26xzf.py":31:36)
#loc19 = loc("inductor_cache/5r/c5r7mqeyob2fbmcbqtytch6ogyzc2o2d6kq4qgpz5ydmi5l26xzf.py":36:18)
#loc20 = loc("inductor_cache/5r/c5r7mqeyob2fbmcbqtytch6ogyzc2o2d6kq4qgpz5ydmi5l26xzf.py":37:40)
#loc21 = loc("inductor_cache/5r/c5r7mqeyob2fbmcbqtytch6ogyzc2o2d6kq4qgpz5ydmi5l26xzf.py":37:35)
#loc22 = loc("inductor_cache/5r/c5r7mqeyob2fbmcbqtytch6ogyzc2o2d6kq4qgpz5ydmi5l26xzf.py":37:52)
#loc23 = loc("inductor_cache/5r/c5r7mqeyob2fbmcbqtytch6ogyzc2o2d6kq4qgpz5ydmi5l26xzf.py":37:46)
#loc24 = loc("inductor_cache/5r/c5r7mqeyob2fbmcbqtytch6ogyzc2o2d6kq4qgpz5ydmi5l26xzf.py":37:30)
#loc25 = loc("inductor_cache/5r/c5r7mqeyob2fbmcbqtytch6ogyzc2o2d6kq4qgpz5ydmi5l26xzf.py":37:64)
#loc26 = loc("inductor_cache/5r/c5r7mqeyob2fbmcbqtytch6ogyzc2o2d6kq4qgpz5ydmi5l26xzf.py":37:57)
#loc27 = loc("inductor_cache/5r/c5r7mqeyob2fbmcbqtytch6ogyzc2o2d6kq4qgpz5ydmi5l26xzf.py":38:19)
#loc28 = loc("inductor_cache/5r/c5r7mqeyob2fbmcbqtytch6ogyzc2o2d6kq4qgpz5ydmi5l26xzf.py":40:18)
#loc29 = loc("inductor_cache/5r/c5r7mqeyob2fbmcbqtytch6ogyzc2o2d6kq4qgpz5ydmi5l26xzf.py":41:18)
#loc30 = loc("inductor_cache/5r/c5r7mqeyob2fbmcbqtytch6ogyzc2o2d6kq4qgpz5ydmi5l26xzf.py":42:50)
#loc31 = loc("inductor_cache/5r/c5r7mqeyob2fbmcbqtytch6ogyzc2o2d6kq4qgpz5ydmi5l26xzf.py":42:41)
#loc32 = loc("inductor_cache/5r/c5r7mqeyob2fbmcbqtytch6ogyzc2o2d6kq4qgpz5ydmi5l26xzf.py":42:36)
#loc33 = loc("inductor_cache/5r/c5r7mqeyob2fbmcbqtytch6ogyzc2o2d6kq4qgpz5ydmi5l26xzf.py":42:61)
#loc34 = loc("inductor_cache/5r/c5r7mqeyob2fbmcbqtytch6ogyzc2o2d6kq4qgpz5ydmi5l26xzf.py":42:56)
#loc35 = loc("inductor_cache/5r/c5r7mqeyob2fbmcbqtytch6ogyzc2o2d6kq4qgpz5ydmi5l26xzf.py":42:31)
#loc36 = loc("inductor_cache/5r/c5r7mqeyob2fbmcbqtytch6ogyzc2o2d6kq4qgpz5ydmi5l26xzf.py":42:73)
#loc37 = loc("inductor_cache/5r/c5r7mqeyob2fbmcbqtytch6ogyzc2o2d6kq4qgpz5ydmi5l26xzf.py":42:66)
#loc38 = loc("inductor_cache/5r/c5r7mqeyob2fbmcbqtytch6ogyzc2o2d6kq4qgpz5ydmi5l26xzf.py":43:20)
#loc39 = loc("inductor_cache/5r/c5r7mqeyob2fbmcbqtytch6ogyzc2o2d6kq4qgpz5ydmi5l26xzf.py":45:19)
#loc40 = loc("inductor_cache/5r/c5r7mqeyob2fbmcbqtytch6ogyzc2o2d6kq4qgpz5ydmi5l26xzf.py":46:20)
#loc41 = loc("inductor_cache/5r/c5r7mqeyob2fbmcbqtytch6ogyzc2o2d6kq4qgpz5ydmi5l26xzf.py":47:50)
#loc42 = loc("inductor_cache/5r/c5r7mqeyob2fbmcbqtytch6ogyzc2o2d6kq4qgpz5ydmi5l26xzf.py":47:41)
#loc43 = loc("inductor_cache/5r/c5r7mqeyob2fbmcbqtytch6ogyzc2o2d6kq4qgpz5ydmi5l26xzf.py":47:36)
#loc44 = loc("inductor_cache/5r/c5r7mqeyob2fbmcbqtytch6ogyzc2o2d6kq4qgpz5ydmi5l26xzf.py":47:56)
#loc45 = loc("inductor_cache/5r/c5r7mqeyob2fbmcbqtytch6ogyzc2o2d6kq4qgpz5ydmi5l26xzf.py":47:31)
#loc46 = loc("inductor_cache/5r/c5r7mqeyob2fbmcbqtytch6ogyzc2o2d6kq4qgpz5ydmi5l26xzf.py":47:74)
#loc47 = loc("inductor_cache/5r/c5r7mqeyob2fbmcbqtytch6ogyzc2o2d6kq4qgpz5ydmi5l26xzf.py":47:66)
#loc48 = loc("inductor_cache/5r/c5r7mqeyob2fbmcbqtytch6ogyzc2o2d6kq4qgpz5ydmi5l26xzf.py":48:20)
#loc49 = loc("inductor_cache/5r/c5r7mqeyob2fbmcbqtytch6ogyzc2o2d6kq4qgpz5ydmi5l26xzf.py":50:19)
#loc50 = loc("inductor_cache/5r/c5r7mqeyob2fbmcbqtytch6ogyzc2o2d6kq4qgpz5ydmi5l26xzf.py":51:20)
#loc51 = loc("inductor_cache/5r/c5r7mqeyob2fbmcbqtytch6ogyzc2o2d6kq4qgpz5ydmi5l26xzf.py":52:50)
#loc52 = loc("inductor_cache/5r/c5r7mqeyob2fbmcbqtytch6ogyzc2o2d6kq4qgpz5ydmi5l26xzf.py":52:41)
#loc53 = loc("inductor_cache/5r/c5r7mqeyob2fbmcbqtytch6ogyzc2o2d6kq4qgpz5ydmi5l26xzf.py":52:36)
#loc54 = loc("inductor_cache/5r/c5r7mqeyob2fbmcbqtytch6ogyzc2o2d6kq4qgpz5ydmi5l26xzf.py":52:56)
#loc55 = loc("inductor_cache/5r/c5r7mqeyob2fbmcbqtytch6ogyzc2o2d6kq4qgpz5ydmi5l26xzf.py":52:31)
#loc56 = loc("inductor_cache/5r/c5r7mqeyob2fbmcbqtytch6ogyzc2o2d6kq4qgpz5ydmi5l26xzf.py":52:74)
#loc57 = loc("inductor_cache/5r/c5r7mqeyob2fbmcbqtytch6ogyzc2o2d6kq4qgpz5ydmi5l26xzf.py":52:66)
#loc58 = loc("inductor_cache/5r/c5r7mqeyob2fbmcbqtytch6ogyzc2o2d6kq4qgpz5ydmi5l26xzf.py":53:20)
#loc59 = loc("inductor_cache/5r/c5r7mqeyob2fbmcbqtytch6ogyzc2o2d6kq4qgpz5ydmi5l26xzf.py":56:50)
#loc60 = loc("inductor_cache/5r/c5r7mqeyob2fbmcbqtytch6ogyzc2o2d6kq4qgpz5ydmi5l26xzf.py":56:41)
#loc61 = loc("inductor_cache/5r/c5r7mqeyob2fbmcbqtytch6ogyzc2o2d6kq4qgpz5ydmi5l26xzf.py":56:36)
#loc62 = loc("inductor_cache/5r/c5r7mqeyob2fbmcbqtytch6ogyzc2o2d6kq4qgpz5ydmi5l26xzf.py":56:56)
#loc63 = loc("inductor_cache/5r/c5r7mqeyob2fbmcbqtytch6ogyzc2o2d6kq4qgpz5ydmi5l26xzf.py":56:31)
#loc64 = loc("inductor_cache/5r/c5r7mqeyob2fbmcbqtytch6ogyzc2o2d6kq4qgpz5ydmi5l26xzf.py":56:74)
#loc65 = loc("inductor_cache/5r/c5r7mqeyob2fbmcbqtytch6ogyzc2o2d6kq4qgpz5ydmi5l26xzf.py":56:66)
#loc66 = loc("inductor_cache/5r/c5r7mqeyob2fbmcbqtytch6ogyzc2o2d6kq4qgpz5ydmi5l26xzf.py":57:35)
#loc67 = loc("inductor_cache/5r/c5r7mqeyob2fbmcbqtytch6ogyzc2o2d6kq4qgpz5ydmi5l26xzf.py":58:35)
#loc68 = loc("inductor_cache/5r/c5r7mqeyob2fbmcbqtytch6ogyzc2o2d6kq4qgpz5ydmi5l26xzf.py":59:34)
#loc69 = loc("inductor_cache/5r/c5r7mqeyob2fbmcbqtytch6ogyzc2o2d6kq4qgpz5ydmi5l26xzf.py":60:33)
#loc70 = loc("inductor_cache/5r/c5r7mqeyob2fbmcbqtytch6ogyzc2o2d6kq4qgpz5ydmi5l26xzf.py":61:20)
#loc71 = loc("inductor_cache/5r/c5r7mqeyob2fbmcbqtytch6ogyzc2o2d6kq4qgpz5ydmi5l26xzf.py":63:20)
#loc72 = loc("inductor_cache/5r/c5r7mqeyob2fbmcbqtytch6ogyzc2o2d6kq4qgpz5ydmi5l26xzf.py":64:27)
#loc73 = loc("inductor_cache/5r/c5r7mqeyob2fbmcbqtytch6ogyzc2o2d6kq4qgpz5ydmi5l26xzf.py":66:20)
#loc74 = loc("inductor_cache/5r/c5r7mqeyob2fbmcbqtytch6ogyzc2o2d6kq4qgpz5ydmi5l26xzf.py":69:20)
#loc75 = loc("inductor_cache/5r/c5r7mqeyob2fbmcbqtytch6ogyzc2o2d6kq4qgpz5ydmi5l26xzf.py":70:20)
#loc76 = loc("inductor_cache/5r/c5r7mqeyob2fbmcbqtytch6ogyzc2o2d6kq4qgpz5ydmi5l26xzf.py":71:20)
#loc77 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":118:15)
#loc78 = loc("inductor_cache/5r/c5r7mqeyob2fbmcbqtytch6ogyzc2o2d6kq4qgpz5ydmi5l26xzf.py":73:42)
#loc79 = loc("/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime/triton_helpers.py":121:29)
#loc80 = loc("inductor_cache/5r/c5r7mqeyob2fbmcbqtytch6ogyzc2o2d6kq4qgpz5ydmi5l26xzf.py":74:25)
#loc81 = loc("inductor_cache/5r/c5r7mqeyob2fbmcbqtytch6ogyzc2o2d6kq4qgpz5ydmi5l26xzf.py":74:37)
#loc82 = loc("inductor_cache/5r/c5r7mqeyob2fbmcbqtytch6ogyzc2o2d6kq4qgpz5ydmi5l26xzf.py":75:25)
#loc83 = loc("inductor_cache/5r/c5r7mqeyob2fbmcbqtytch6ogyzc2o2d6kq4qgpz5ydmi5l26xzf.py":75:37)
#loc84 = loc("inductor_cache/5r/c5r7mqeyob2fbmcbqtytch6ogyzc2o2d6kq4qgpz5ydmi5l26xzf.py":75:4)
#loc85 = loc(callsite(#loc77 at #loc78))
#loc86 = loc(callsite(#loc79 at #loc78))
