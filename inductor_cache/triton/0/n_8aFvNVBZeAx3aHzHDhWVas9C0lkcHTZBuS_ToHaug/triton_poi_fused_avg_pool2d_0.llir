; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_avg_pool2d_0(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 8, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 1, !dbg !12
  %8 = and i32 %7, 254, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = or disjoint i32 %9, 1, !dbg !13
  %11 = sdiv i32 %9, 32, !dbg !14
  %12 = srem i32 %10, 32, !dbg !15
  %13 = shl nsw i32 %12, 1, !dbg !16
  %14 = add nsw i32 %13, -1, !dbg !17
  %15 = icmp sgt i32 %12, 0, !dbg !18
  %16 = shl i32 %11, 7, !dbg !19
  %17 = add i32 %16, %13, !dbg !20
  %18 = add i32 %17, -65, !dbg !21
  %19 = sext i32 %18 to i64, !dbg !22
  %20 = getelementptr float, ptr addrspace(1) %0, i64 %19, !dbg !22
  %21 = icmp sgt i32 %12, -1, !dbg !23
  %22 = add i32 %17, -64, !dbg !24
  %23 = sext i32 %22 to i64, !dbg !25
  %24 = getelementptr float, ptr addrspace(1) %0, i64 %23, !dbg !25
  %25 = add i32 %17, -63, !dbg !26
  %26 = sext i32 %25 to i64, !dbg !27
  %27 = getelementptr float, ptr addrspace(1) %0, i64 %26, !dbg !27
  %28 = insertelement <2 x i32> poison, i32 %9, i64 0, !dbg !15
  %29 = insertelement <2 x i32> %28, i32 %11, i64 1, !dbg !15
  %30 = srem <2 x i32> %29, splat (i32 32), !dbg !15
  %31 = extractelement <2 x i32> %30, i64 1, !dbg !28
  %32 = shl nsw i32 %31, 1, !dbg !29
  %33 = add nsw i32 %32, -1, !dbg !30
  %34 = icmp sgt i32 %31, 0, !dbg !31
  %35 = extractelement <2 x i32> %30, i64 0, !dbg !32
  %36 = shl nsw i32 %35, 1, !dbg !16
  %37 = add nsw i32 %36, -1, !dbg !17
  %38 = icmp sgt <2 x i32> %30, <i32 0, i32 -1>, !dbg !18
  %39 = extractelement <2 x i1> %38, i64 0, !dbg !33
  %40 = and i1 %39, %34, !dbg !34
  %41 = and i1 %15, %34, !dbg !34
  %42 = add i32 %16, %36, !dbg !20
  %43 = add i32 %42, -65, !dbg !21
  %44 = sext i32 %43 to i64, !dbg !22
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !22
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %45, i1 %40, i32 0, i1 %40) #1, !dbg !35
  %47 = bitcast i32 %46 to float, !dbg !35
  %48 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %20, i1 %41, i32 0, i1 %41) #1, !dbg !35
  %49 = bitcast i32 %48 to float, !dbg !35
  %50 = icmp sgt i32 %35, -1, !dbg !23
  %51 = and i1 %50, %34, !dbg !36
  %52 = and i1 %21, %34, !dbg !36
  %53 = add i32 %42, -64, !dbg !24
  %54 = sext i32 %53 to i64, !dbg !25
  %55 = getelementptr float, ptr addrspace(1) %0, i64 %54, !dbg !25
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %55, i1 %51, i32 0, i1 %51) #1, !dbg !37
  %57 = bitcast i32 %56 to float, !dbg !37
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %24, i1 %52, i32 0, i1 %52) #1, !dbg !37
  %59 = bitcast i32 %58 to float, !dbg !37
  %60 = fadd float %47, %57, !dbg !38
  %61 = fadd float %49, %59, !dbg !38
  %62 = add i32 %42, -63, !dbg !26
  %63 = sext i32 %62 to i64, !dbg !27
  %64 = getelementptr float, ptr addrspace(1) %0, i64 %63, !dbg !27
  %65 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %64, i1 %51, i32 0, i1 %51) #1, !dbg !39
  %66 = bitcast i32 %65 to float, !dbg !39
  %67 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %27, i1 %52, i32 0, i1 %52) #1, !dbg !39
  %68 = bitcast i32 %67 to float, !dbg !39
  %69 = fadd float %60, %66, !dbg !40
  %70 = fadd float %61, %68, !dbg !40
  %71 = extractelement <2 x i1> %38, i64 1, !dbg !41
  %72 = and i1 %39, %71, !dbg !41
  %73 = and i1 %15, %71, !dbg !41
  %74 = add i32 %37, %16, !dbg !42
  %75 = add i32 %16, %14, !dbg !42
  %76 = sext i32 %74 to i64, !dbg !43
  %77 = getelementptr float, ptr addrspace(1) %0, i64 %76, !dbg !43
  %78 = sext i32 %75 to i64, !dbg !43
  %79 = getelementptr float, ptr addrspace(1) %0, i64 %78, !dbg !43
  %80 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %77, i1 %72, i32 0, i1 %72) #1, !dbg !44
  %81 = bitcast i32 %80 to float, !dbg !44
  %82 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %79, i1 %73, i32 0, i1 %73) #1, !dbg !44
  %83 = bitcast i32 %82 to float, !dbg !44
  %84 = fadd float %69, %81, !dbg !45
  %85 = fadd float %70, %83, !dbg !45
  %86 = or i32 %31, %35, !dbg !46
  %87 = icmp sgt i32 %86, -1, !dbg !46
  %88 = or i32 %31, %12, !dbg !46
  %89 = icmp sgt i32 %88, -1, !dbg !46
  %90 = sext i32 %42 to i64, !dbg !47
  %91 = getelementptr float, ptr addrspace(1) %0, i64 %90, !dbg !47
  %92 = sext i32 %17 to i64, !dbg !47
  %93 = getelementptr float, ptr addrspace(1) %0, i64 %92, !dbg !47
  %94 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %91, i1 %87, i32 0, i1 %87) #1, !dbg !48
  %95 = bitcast i32 %94 to float, !dbg !48
  %96 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %93, i1 %89, i32 0, i1 %89) #1, !dbg !48
  %97 = bitcast i32 %96 to float, !dbg !48
  %98 = fadd float %84, %95, !dbg !49
  %99 = fadd float %85, %97, !dbg !49
  %100 = or disjoint i32 %42, 1, !dbg !50
  %101 = or disjoint i32 %17, 1, !dbg !50
  %102 = sext i32 %100 to i64, !dbg !51
  %103 = getelementptr float, ptr addrspace(1) %0, i64 %102, !dbg !51
  %104 = sext i32 %101 to i64, !dbg !51
  %105 = getelementptr float, ptr addrspace(1) %0, i64 %104, !dbg !51
  %106 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %103, i1 %87, i32 0, i1 %87) #1, !dbg !52
  %107 = bitcast i32 %106 to float, !dbg !52
  %108 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %105, i1 %89, i32 0, i1 %89) #1, !dbg !52
  %109 = bitcast i32 %108 to float, !dbg !52
  %110 = fadd float %98, %107, !dbg !53
  %111 = fadd float %99, %109, !dbg !53
  %112 = add i32 %42, 63, !dbg !54
  %113 = add i32 %17, 63, !dbg !54
  %114 = sext i32 %112 to i64, !dbg !55
  %115 = getelementptr float, ptr addrspace(1) %0, i64 %114, !dbg !55
  %116 = sext i32 %113 to i64, !dbg !55
  %117 = getelementptr float, ptr addrspace(1) %0, i64 %116, !dbg !55
  %118 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %115, i1 %72, i32 0, i1 %72) #1, !dbg !56
  %119 = bitcast i32 %118 to float, !dbg !56
  %120 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %117, i1 %73, i32 0, i1 %73) #1, !dbg !56
  %121 = bitcast i32 %120 to float, !dbg !56
  %122 = fadd float %110, %119, !dbg !57
  %123 = fadd float %111, %121, !dbg !57
  %124 = add i32 %42, 64, !dbg !58
  %125 = add i32 %17, 64, !dbg !58
  %126 = sext i32 %124 to i64, !dbg !59
  %127 = getelementptr float, ptr addrspace(1) %0, i64 %126, !dbg !59
  %128 = sext i32 %125 to i64, !dbg !59
  %129 = getelementptr float, ptr addrspace(1) %0, i64 %128, !dbg !59
  %130 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %127, i1 %87, i32 0, i1 %87) #1, !dbg !60
  %131 = bitcast i32 %130 to float, !dbg !60
  %132 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %129, i1 %89, i32 0, i1 %89) #1, !dbg !60
  %133 = bitcast i32 %132 to float, !dbg !60
  %134 = fadd float %122, %131, !dbg !61
  %135 = fadd float %123, %133, !dbg !61
  %136 = add i32 %42, 65, !dbg !62
  %137 = add i32 %17, 65, !dbg !62
  %138 = sext i32 %136 to i64, !dbg !63
  %139 = getelementptr float, ptr addrspace(1) %0, i64 %138, !dbg !63
  %140 = sext i32 %137 to i64, !dbg !63
  %141 = getelementptr float, ptr addrspace(1) %0, i64 %140, !dbg !63
  %142 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %139, i1 %87, i32 0, i1 %87) #1, !dbg !64
  %143 = bitcast i32 %142 to float, !dbg !64
  %144 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];\0A\09@!$4 mov.u32 $0, $3;", "=r,l,b,r,b"(ptr addrspace(1) %141, i1 %89, i32 0, i1 %89) #1, !dbg !64
  %145 = bitcast i32 %144 to float, !dbg !64
  %146 = fadd float %134, %143, !dbg !65
  %147 = fadd float %135, %145, !dbg !65
  %148 = select i1 %39, i32 %37, i32 0, !dbg !33
  %149 = select i1 %15, i32 %14, i32 0, !dbg !33
  %150 = select i1 %34, i32 %33, i32 0, !dbg !66
  %151 = or disjoint i32 %36, 2, !dbg !67
  %152 = add nsw i32 %13, 2, !dbg !67
  %153 = icmp sgt i32 %35, 30, !dbg !68
  %154 = icmp sgt i32 %12, 30, !dbg !68
  %155 = select i1 %153, i32 64, i32 0, !dbg !69
  %156 = select i1 %154, i32 64, i32 0, !dbg !69
  %157 = icmp slt i32 %35, 31, !dbg !32
  %158 = icmp slt i32 %12, 31, !dbg !32
  %159 = select i1 %157, i32 %151, i32 0, !dbg !70
  %160 = select i1 %158, i32 %152, i32 0, !dbg !70
  %161 = add nsw i32 %159, %155, !dbg !71
  %162 = add nsw i32 %160, %156, !dbg !71
  %163 = add nsw i32 %32, 2, !dbg !72
  %164 = icmp sgt i32 %31, 30, !dbg !73
  %165 = select i1 %164, i32 64, i32 0, !dbg !74
  %166 = icmp slt i32 %31, 31, !dbg !28
  %167 = select i1 %166, i32 %163, i32 0, !dbg !75
  %168 = add nsw i32 %167, %165, !dbg !76
  %reass.add = sub nsw i32 %168, %150
  %reass.mul = mul nsw i32 %reass.add, %161
  %reass.add4 = sub nsw i32 %150, %168
  %reass.mul5 = mul nsw i32 %reass.add4, %148
  %169 = add i32 %reass.mul5, %reass.mul, !dbg !77
  %reass.mul3 = mul nsw i32 %reass.add, %162
  %reass.mul7 = mul nsw i32 %reass.add4, %149
  %170 = add nsw i32 %reass.mul7, %reass.mul3, !dbg !77
  %171 = sitofp i32 %169 to float, !dbg !78
  %172 = sitofp i32 %170 to float, !dbg !78
  %173 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %146, float %171) #1, !dbg !78
  %174 = tail call float asm "div.full.f32 $0, $1, $2;", "=r,r,r"(float %147, float %172) #1, !dbg !78
  %175 = sext i32 %9 to i64, !dbg !79
  %176 = getelementptr float, ptr addrspace(1) %1, i64 %175, !dbg !79
  %177 = bitcast float %173 to i32, !dbg !80
  %178 = bitcast float %174 to i32, !dbg !80
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %177, i32 %178, ptr addrspace(1) %176, i1 true) #1, !dbg !80
  ret void, !dbg !81
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "clxw7xqxjewigmfk53gx3k7vvtkpjmkqkssswxbxfdhqrhuls52u.py", directory: "inductor_cache/lx")
!4 = !{ptr @triton_poi_fused_avg_pool2d_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_avg_pool2d_0, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_avg_pool2d_0", linkageName: "triton_poi_fused_avg_pool2d_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 24, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 34, column: 20, scope: !7)
!17 = !DILocation(line: 34, column: 18, scope: !7)
!18 = !DILocation(line: 35, column: 19, scope: !7)
!19 = !DILocation(line: 39, column: 50, scope: !7)
!20 = !DILocation(line: 39, column: 39, scope: !7)
!21 = !DILocation(line: 39, column: 46, scope: !7)
!22 = !DILocation(line: 39, column: 31, scope: !7)
!23 = !DILocation(line: 41, column: 21, scope: !7)
!24 = !DILocation(line: 45, column: 46, scope: !7)
!25 = !DILocation(line: 45, column: 31, scope: !7)
!26 = !DILocation(line: 52, column: 46, scope: !7)
!27 = !DILocation(line: 52, column: 31, scope: !7)
!28 = !DILocation(line: 80, column: 280, scope: !7)
!29 = !DILocation(line: 28, column: 20, scope: !7)
!30 = !DILocation(line: 28, column: 18, scope: !7)
!31 = !DILocation(line: 30, column: 19, scope: !7)
!32 = !DILocation(line: 80, column: 215, scope: !7)
!33 = !DILocation(line: 80, column: 61, scope: !7)
!34 = !DILocation(line: 38, column: 19, scope: !7)
!35 = !DILocation(line: 39, column: 55, scope: !7)
!36 = !DILocation(line: 44, column: 19, scope: !7)
!37 = !DILocation(line: 45, column: 55, scope: !7)
!38 = !DILocation(line: 46, column: 20, scope: !7)
!39 = !DILocation(line: 52, column: 55, scope: !7)
!40 = !DILocation(line: 53, column: 20, scope: !7)
!41 = !DILocation(line: 58, column: 20, scope: !7)
!42 = !DILocation(line: 59, column: 45, scope: !7)
!43 = !DILocation(line: 59, column: 31, scope: !7)
!44 = !DILocation(line: 59, column: 54, scope: !7)
!45 = !DILocation(line: 60, column: 20, scope: !7)
!46 = !DILocation(line: 61, column: 20, scope: !7)
!47 = !DILocation(line: 62, column: 31, scope: !7)
!48 = !DILocation(line: 62, column: 47, scope: !7)
!49 = !DILocation(line: 63, column: 20, scope: !7)
!50 = !DILocation(line: 65, column: 42, scope: !7)
!51 = !DILocation(line: 65, column: 31, scope: !7)
!52 = !DILocation(line: 65, column: 51, scope: !7)
!53 = !DILocation(line: 66, column: 20, scope: !7)
!54 = !DILocation(line: 72, column: 43, scope: !7)
!55 = !DILocation(line: 72, column: 31, scope: !7)
!56 = !DILocation(line: 72, column: 52, scope: !7)
!57 = !DILocation(line: 73, column: 20, scope: !7)
!58 = !DILocation(line: 75, column: 43, scope: !7)
!59 = !DILocation(line: 75, column: 31, scope: !7)
!60 = !DILocation(line: 75, column: 52, scope: !7)
!61 = !DILocation(line: 76, column: 20, scope: !7)
!62 = !DILocation(line: 78, column: 43, scope: !7)
!63 = !DILocation(line: 78, column: 31, scope: !7)
!64 = !DILocation(line: 78, column: 52, scope: !7)
!65 = !DILocation(line: 79, column: 20, scope: !7)
!66 = !DILocation(line: 80, column: 132, scope: !7)
!67 = !DILocation(line: 80, column: 178, scope: !7)
!68 = !DILocation(line: 80, column: 174, scope: !7)
!69 = !DILocation(line: 80, column: 165, scope: !7)
!70 = !DILocation(line: 80, column: 201, scope: !7)
!71 = !DILocation(line: 80, column: 187, scope: !7)
!72 = !DILocation(line: 80, column: 243, scope: !7)
!73 = !DILocation(line: 80, column: 239, scope: !7)
!74 = !DILocation(line: 80, column: 230, scope: !7)
!75 = !DILocation(line: 80, column: 266, scope: !7)
!76 = !DILocation(line: 80, column: 252, scope: !7)
!77 = !DILocation(line: 80, column: 434, scope: !7)
!78 = !DILocation(line: 81, column: 20, scope: !7)
!79 = !DILocation(line: 82, column: 25, scope: !7)
!80 = !DILocation(line: 82, column: 37, scope: !7)
!81 = !DILocation(line: 82, column: 4, scope: !7)
