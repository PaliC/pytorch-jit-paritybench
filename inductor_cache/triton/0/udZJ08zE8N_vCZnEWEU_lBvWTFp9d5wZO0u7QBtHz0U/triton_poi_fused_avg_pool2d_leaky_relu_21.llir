; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_avg_pool2d_leaky_relu_21(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %6 = shl i32 %5, 10, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 3, !dbg !12
  %9 = and i32 %8, 1016, !dbg !12
  %10 = shl i32 %7, 2, !dbg !12
  %11 = and i32 %10, 508, !dbg !12
  %12 = or disjoint i32 %11, 512, !dbg !12
  %13 = or disjoint i32 %6, %9, !dbg !13
  %14 = or disjoint i32 %13, 4, !dbg !13
  %15 = or disjoint i32 %6, %11, !dbg !13
  %16 = or disjoint i32 %6, %12, !dbg !13
  %.frozen = freeze i32 %13, !dbg !14
  %17 = sdiv i32 %.frozen, 512, !dbg !14
  %18 = mul i32 %17, 512, !dbg !15
  %.decomposed = sub i32 %.frozen, %18, !dbg !15
  %19 = srem i32 %14, 512, !dbg !15
  %20 = srem i32 %17, 16, !dbg !16
  %21 = sdiv i32 %13, 8192, !dbg !17
  %22 = shl nsw i32 %20, 10, !dbg !18
  %23 = shl i32 %21, 15, !dbg !19
  %24 = add i32 %22, %23, !dbg !20
  %25 = add i32 %24, %.decomposed, !dbg !21
  %26 = add i32 %24, %19, !dbg !21
  %27 = sext i32 %25 to i64, !dbg !22
  %28 = getelementptr float, ptr addrspace(1) %0, i64 %27, !dbg !22
  %29 = sext i32 %26 to i64, !dbg !22
  %30 = getelementptr float, ptr addrspace(1) %0, i64 %29, !dbg !22
  %31 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %28, i1 true) #2, !dbg !23
  %32 = extractvalue { i32, i32, i32, i32 } %31, 0, !dbg !23
  %33 = extractvalue { i32, i32, i32, i32 } %31, 1, !dbg !23
  %34 = extractvalue { i32, i32, i32, i32 } %31, 2, !dbg !23
  %35 = extractvalue { i32, i32, i32, i32 } %31, 3, !dbg !23
  %36 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %30, i1 true) #2, !dbg !23
  %37 = extractvalue { i32, i32, i32, i32 } %36, 0, !dbg !23
  %38 = extractvalue { i32, i32, i32, i32 } %36, 1, !dbg !23
  %39 = extractvalue { i32, i32, i32, i32 } %36, 2, !dbg !23
  %40 = extractvalue { i32, i32, i32, i32 } %36, 3, !dbg !23
  %41 = or disjoint i32 %24, 512, !dbg !24
  %42 = add nsw i32 %41, %.decomposed, !dbg !25
  %43 = add nsw i32 %41, %19, !dbg !25
  %44 = sext i32 %42 to i64, !dbg !26
  %45 = getelementptr float, ptr addrspace(1) %0, i64 %44, !dbg !26
  %46 = sext i32 %43 to i64, !dbg !26
  %47 = getelementptr float, ptr addrspace(1) %0, i64 %46, !dbg !26
  %48 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %45, i1 true) #2, !dbg !27
  %49 = extractvalue { i32, i32, i32, i32 } %48, 0, !dbg !27
  %50 = extractvalue { i32, i32, i32, i32 } %48, 1, !dbg !27
  %51 = extractvalue { i32, i32, i32, i32 } %48, 2, !dbg !27
  %52 = extractvalue { i32, i32, i32, i32 } %48, 3, !dbg !27
  %53 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %47, i1 true) #2, !dbg !27
  %54 = extractvalue { i32, i32, i32, i32 } %53, 0, !dbg !27
  %55 = extractvalue { i32, i32, i32, i32 } %53, 1, !dbg !27
  %56 = extractvalue { i32, i32, i32, i32 } %53, 2, !dbg !27
  %57 = extractvalue { i32, i32, i32, i32 } %53, 3, !dbg !27
  %58 = add i32 %24, 16384, !dbg !28
  %59 = add i32 %58, %.decomposed, !dbg !29
  %60 = add i32 %58, %19, !dbg !29
  %61 = sext i32 %59 to i64, !dbg !30
  %62 = getelementptr float, ptr addrspace(1) %0, i64 %61, !dbg !30
  %63 = sext i32 %60 to i64, !dbg !30
  %64 = getelementptr float, ptr addrspace(1) %0, i64 %63, !dbg !30
  %65 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %62, i1 true) #2, !dbg !31
  %66 = extractvalue { i32, i32, i32, i32 } %65, 0, !dbg !31
  %67 = extractvalue { i32, i32, i32, i32 } %65, 1, !dbg !31
  %68 = extractvalue { i32, i32, i32, i32 } %65, 2, !dbg !31
  %69 = extractvalue { i32, i32, i32, i32 } %65, 3, !dbg !31
  %70 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %64, i1 true) #2, !dbg !31
  %71 = extractvalue { i32, i32, i32, i32 } %70, 0, !dbg !31
  %72 = extractvalue { i32, i32, i32, i32 } %70, 1, !dbg !31
  %73 = extractvalue { i32, i32, i32, i32 } %70, 2, !dbg !31
  %74 = extractvalue { i32, i32, i32, i32 } %70, 3, !dbg !31
  %75 = add i32 %24, 16896, !dbg !32
  %76 = add nsw i32 %75, %.decomposed, !dbg !33
  %77 = add nsw i32 %75, %19, !dbg !33
  %78 = sext i32 %76 to i64, !dbg !34
  %79 = getelementptr float, ptr addrspace(1) %0, i64 %78, !dbg !34
  %80 = sext i32 %77 to i64, !dbg !34
  %81 = getelementptr float, ptr addrspace(1) %0, i64 %80, !dbg !34
  %82 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %79, i1 true) #2, !dbg !35
  %83 = extractvalue { i32, i32, i32, i32 } %82, 0, !dbg !35
  %84 = extractvalue { i32, i32, i32, i32 } %82, 1, !dbg !35
  %85 = extractvalue { i32, i32, i32, i32 } %82, 2, !dbg !35
  %86 = extractvalue { i32, i32, i32, i32 } %82, 3, !dbg !35
  %87 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %81, i1 true) #2, !dbg !35
  %88 = extractvalue { i32, i32, i32, i32 } %87, 0, !dbg !35
  %89 = extractvalue { i32, i32, i32, i32 } %87, 1, !dbg !35
  %90 = extractvalue { i32, i32, i32, i32 } %87, 2, !dbg !35
  %91 = extractvalue { i32, i32, i32, i32 } %87, 3, !dbg !35
  %92 = sext i32 %13 to i64, !dbg !36
  %93 = getelementptr i1, ptr addrspace(1) %1, i64 %92, !dbg !36
  %94 = insertelement <4 x i32> poison, i32 %32, i64 0, !dbg !23
  %95 = insertelement <4 x i32> %94, i32 %33, i64 1, !dbg !23
  %96 = insertelement <4 x i32> %95, i32 %34, i64 2, !dbg !23
  %97 = insertelement <4 x i32> %96, i32 %35, i64 3, !dbg !23
  %98 = bitcast <4 x i32> %97 to <4 x float>, !dbg !23
  %99 = insertelement <4 x i32> poison, i32 %49, i64 0, !dbg !27
  %100 = insertelement <4 x i32> %99, i32 %50, i64 1, !dbg !27
  %101 = insertelement <4 x i32> %100, i32 %51, i64 2, !dbg !27
  %102 = insertelement <4 x i32> %101, i32 %52, i64 3, !dbg !27
  %103 = bitcast <4 x i32> %102 to <4 x float>, !dbg !27
  %104 = insertelement <4 x i32> poison, i32 %66, i64 0, !dbg !31
  %105 = insertelement <4 x i32> %104, i32 %67, i64 1, !dbg !31
  %106 = insertelement <4 x i32> %105, i32 %68, i64 2, !dbg !31
  %107 = insertelement <4 x i32> %106, i32 %69, i64 3, !dbg !31
  %108 = bitcast <4 x i32> %107 to <4 x float>, !dbg !31
  %109 = insertelement <4 x i32> poison, i32 %83, i64 0, !dbg !35
  %110 = insertelement <4 x i32> %109, i32 %84, i64 1, !dbg !35
  %111 = insertelement <4 x i32> %110, i32 %85, i64 2, !dbg !35
  %112 = insertelement <4 x i32> %111, i32 %86, i64 3, !dbg !35
  %113 = bitcast <4 x i32> %112 to <4 x float>, !dbg !35
  %114 = fadd <4 x float> %98, %103, !dbg !37
  %115 = fadd <4 x float> %114, %108, !dbg !38
  %116 = fadd <4 x float> %115, %113, !dbg !39
  %117 = fmul <4 x float> %116, splat (float 2.500000e-01), !dbg !40
  %118 = fcmp ogt <4 x float> %117, zeroinitializer, !dbg !41
  %119 = extractelement <4 x float> %117, i64 0, !dbg !42
  %120 = fmul float %119, 0x3FC99999A0000000, !dbg !43
  %121 = extractelement <4 x float> %117, i64 1, !dbg !42
  %122 = fmul float %121, 0x3FC99999A0000000, !dbg !43
  %123 = extractelement <4 x float> %117, i64 2, !dbg !42
  %124 = fmul float %123, 0x3FC99999A0000000, !dbg !43
  %125 = extractelement <4 x float> %117, i64 3, !dbg !42
  %126 = fmul float %125, 0x3FC99999A0000000, !dbg !43
  %127 = extractelement <4 x i1> %118, i64 0, !dbg !42
  %128 = select i1 %127, float %119, float %120, !dbg !42
  %129 = extractelement <4 x i1> %118, i64 1, !dbg !42
  %130 = select i1 %129, float %121, float %122, !dbg !42
  %131 = extractelement <4 x i1> %118, i64 2, !dbg !42
  %132 = select i1 %131, float %123, float %124, !dbg !42
  %133 = extractelement <4 x i1> %118, i64 3, !dbg !42
  %134 = select i1 %133, float %125, float %126, !dbg !42
  %135 = insertelement <4 x i32> poison, i32 %37, i64 0, !dbg !23
  %136 = insertelement <4 x i32> %135, i32 %38, i64 1, !dbg !23
  %137 = insertelement <4 x i32> %136, i32 %39, i64 2, !dbg !23
  %138 = insertelement <4 x i32> %137, i32 %40, i64 3, !dbg !23
  %139 = bitcast <4 x i32> %138 to <4 x float>, !dbg !23
  %140 = insertelement <4 x i32> poison, i32 %54, i64 0, !dbg !27
  %141 = insertelement <4 x i32> %140, i32 %55, i64 1, !dbg !27
  %142 = insertelement <4 x i32> %141, i32 %56, i64 2, !dbg !27
  %143 = insertelement <4 x i32> %142, i32 %57, i64 3, !dbg !27
  %144 = bitcast <4 x i32> %143 to <4 x float>, !dbg !27
  %145 = insertelement <4 x i32> poison, i32 %71, i64 0, !dbg !31
  %146 = insertelement <4 x i32> %145, i32 %72, i64 1, !dbg !31
  %147 = insertelement <4 x i32> %146, i32 %73, i64 2, !dbg !31
  %148 = insertelement <4 x i32> %147, i32 %74, i64 3, !dbg !31
  %149 = bitcast <4 x i32> %148 to <4 x float>, !dbg !31
  %150 = insertelement <4 x i32> poison, i32 %88, i64 0, !dbg !35
  %151 = insertelement <4 x i32> %150, i32 %89, i64 1, !dbg !35
  %152 = insertelement <4 x i32> %151, i32 %90, i64 2, !dbg !35
  %153 = insertelement <4 x i32> %152, i32 %91, i64 3, !dbg !35
  %154 = bitcast <4 x i32> %153 to <4 x float>, !dbg !35
  %155 = fadd <4 x float> %139, %144, !dbg !37
  %156 = fadd <4 x float> %155, %149, !dbg !38
  %157 = fadd <4 x float> %156, %154, !dbg !39
  %158 = fmul <4 x float> %157, splat (float 2.500000e-01), !dbg !40
  %159 = fcmp ogt <4 x float> %158, zeroinitializer, !dbg !41
  %160 = extractelement <4 x float> %158, i64 0, !dbg !42
  %161 = fmul float %160, 0x3FC99999A0000000, !dbg !43
  %162 = extractelement <4 x float> %158, i64 1, !dbg !42
  %163 = fmul float %162, 0x3FC99999A0000000, !dbg !43
  %164 = extractelement <4 x float> %158, i64 2, !dbg !42
  %165 = fmul float %164, 0x3FC99999A0000000, !dbg !43
  %166 = extractelement <4 x float> %158, i64 3, !dbg !42
  %167 = fmul float %166, 0x3FC99999A0000000, !dbg !43
  %168 = extractelement <4 x i1> %159, i64 0, !dbg !42
  %169 = select i1 %168, float %160, float %161, !dbg !42
  %170 = extractelement <4 x i1> %159, i64 1, !dbg !42
  %171 = select i1 %170, float %162, float %163, !dbg !42
  %172 = extractelement <4 x i1> %159, i64 2, !dbg !42
  %173 = select i1 %172, float %164, float %165, !dbg !42
  %174 = extractelement <4 x i1> %159, i64 3, !dbg !42
  %175 = select i1 %174, float %166, float %167, !dbg !42
  %176 = zext <4 x i1> %118 to <4 x i8>, !dbg !44
  %177 = bitcast <4 x i8> %176 to i32, !dbg !44
  %178 = zext <4 x i1> %159 to <4 x i8>, !dbg !44
  %179 = bitcast <4 x i8> %178 to i32, !dbg !44
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %177, i32 %179, ptr addrspace(1) %93, i1 true) #2, !dbg !44
  %180 = sext i32 %15 to i64, !dbg !45
  %181 = getelementptr float, ptr addrspace(1) %2, i64 %180, !dbg !45
  %182 = sext i32 %16 to i64, !dbg !45
  %183 = getelementptr float, ptr addrspace(1) %2, i64 %182, !dbg !45
  %184 = zext nneg i32 %9 to i64, !dbg !46
  %185 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %184, !dbg !46
  %186 = bitcast float %128 to i32, !dbg !46
  %187 = bitcast float %130 to i32, !dbg !46
  %188 = bitcast float %132 to i32, !dbg !46
  %189 = bitcast float %134 to i32, !dbg !46
  %190 = bitcast float %169 to i32, !dbg !46
  %191 = bitcast float %171 to i32, !dbg !46
  %192 = bitcast float %173 to i32, !dbg !46
  %193 = bitcast float %175 to i32, !dbg !46
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %185, i32 %186, i32 %187, i32 %188, i32 %189, i1 true) #2, !dbg !46
  %194 = getelementptr inbounds i8, ptr addrspace(3) %185, i64 16, !dbg !46
  tail call void asm sideeffect "@$5 st.shared.v4.b32 [ $0 + 0 ], { $1, $2, $3, $4 };", "r,r,r,r,r,b"(ptr addrspace(3) %194, i32 %190, i32 %191, i32 %192, i32 %193, i1 true) #2, !dbg !46
  tail call void @llvm.nvvm.barrier0(), !dbg !46
  %195 = zext nneg i32 %11 to i64, !dbg !46
  %196 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %195, !dbg !46
  %197 = zext nneg i32 %12 to i64, !dbg !46
  %198 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i64 %197, !dbg !46
  %199 = load <4 x i32>, ptr addrspace(3) %198, align 16, !dbg !46
  %.extract = load i32, ptr addrspace(3) %196, align 16, !dbg !46
  %200 = getelementptr inbounds i8, ptr addrspace(3) %196, i64 4, !dbg !46
  %.extract8 = load i32, ptr addrspace(3) %200, align 4, !dbg !46
  %201 = getelementptr inbounds i8, ptr addrspace(3) %196, i64 8, !dbg !46
  %.extract9 = load i32, ptr addrspace(3) %201, align 8, !dbg !46
  %202 = getelementptr inbounds i8, ptr addrspace(3) %196, i64 12, !dbg !46
  %.extract10 = load i32, ptr addrspace(3) %202, align 4, !dbg !46
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract, i32 %.extract8, i32 %.extract9, i32 %.extract10, ptr addrspace(1) %181, i1 true) #2, !dbg !46
  %.extract11 = extractelement <4 x i32> %199, i64 0, !dbg !46
  %.extract12 = extractelement <4 x i32> %199, i64 1, !dbg !46
  %.extract13 = extractelement <4 x i32> %199, i64 2, !dbg !46
  %.extract14 = extractelement <4 x i32> %199, i64 3, !dbg !46
  tail call void asm sideeffect "@$5 st.global.v4.b32 [ $4 + 0 ], { $0, $1, $2, $3 };", "r,r,r,r,l,b"(i32 %.extract11, i32 %.extract12, i32 %.extract13, i32 %.extract14, ptr addrspace(1) %183, i1 true) #2, !dbg !46
  ret void, !dbg !47
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cl6rmebpgl4jsrhlopkrx6zrynpfqfqwoyvuw3j5qnnrh2gsae5y.py", directory: "inductor_cache/l6")
!4 = !{ptr @triton_poi_fused_avg_pool2d_leaky_relu_21, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_avg_pool2d_leaky_relu_21, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_avg_pool2d_leaky_relu_21", linkageName: "triton_poi_fused_avg_pool2d_leaky_relu_21", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 25, column: 28, scope: !7)
!17 = !DILocation(line: 26, column: 19, scope: !7)
!18 = !DILocation(line: 28, column: 40, scope: !7)
!19 = !DILocation(line: 28, column: 51, scope: !7)
!20 = !DILocation(line: 28, column: 35, scope: !7)
!21 = !DILocation(line: 28, column: 45, scope: !7)
!22 = !DILocation(line: 28, column: 30, scope: !7)
!23 = !DILocation(line: 28, column: 56, scope: !7)
!24 = !DILocation(line: 29, column: 41, scope: !7)
!25 = !DILocation(line: 29, column: 51, scope: !7)
!26 = !DILocation(line: 29, column: 30, scope: !7)
!27 = !DILocation(line: 29, column: 62, scope: !7)
!28 = !DILocation(line: 30, column: 43, scope: !7)
!29 = !DILocation(line: 30, column: 53, scope: !7)
!30 = !DILocation(line: 30, column: 30, scope: !7)
!31 = !DILocation(line: 30, column: 64, scope: !7)
!32 = !DILocation(line: 31, column: 43, scope: !7)
!33 = !DILocation(line: 31, column: 53, scope: !7)
!34 = !DILocation(line: 31, column: 30, scope: !7)
!35 = !DILocation(line: 31, column: 64, scope: !7)
!36 = !DILocation(line: 42, column: 25, scope: !7)
!37 = !DILocation(line: 32, column: 18, scope: !7)
!38 = !DILocation(line: 33, column: 18, scope: !7)
!39 = !DILocation(line: 34, column: 18, scope: !7)
!40 = !DILocation(line: 36, column: 18, scope: !7)
!41 = !DILocation(line: 38, column: 19, scope: !7)
!42 = !DILocation(line: 41, column: 34, scope: !7)
!43 = !DILocation(line: 40, column: 19, scope: !7)
!44 = !DILocation(line: 42, column: 37, scope: !7)
!45 = !DILocation(line: 43, column: 25, scope: !7)
!46 = !DILocation(line: 43, column: 37, scope: !7)
!47 = !DILocation(line: 43, column: 4, scope: !7)
