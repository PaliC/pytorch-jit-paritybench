; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused__log_softmax_0(ptr addrspace(1) %0, ptr addrspace(1) %1, i32 %2) local_unnamed_addr !dbg !7 {
  %4 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #1, !dbg !10
  %5 = shl i32 %4, 8, !dbg !11
  %6 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %7 = shl i32 %6, 1, !dbg !12
  %8 = and i32 %7, 254, !dbg !12
  %9 = or disjoint i32 %5, %8, !dbg !13
  %10 = or disjoint i32 %9, 1, !dbg !13
  %11 = icmp slt i32 %9, 256, !dbg !14
  %.frozen = freeze i32 %9, !dbg !15
  %12 = sdiv i32 %.frozen, 64, !dbg !15
  %13 = mul i32 %12, 64, !dbg !16
  %.decomposed = sub i32 %.frozen, %13, !dbg !16
  %14 = srem i32 %10, 64, !dbg !16
  %15 = shl nsw i32 %12, 4, !dbg !17
  %.lhs.trunc = trunc nsw i32 %.decomposed to i8, !dbg !18
  %16 = sdiv i8 %.lhs.trunc, 16, !dbg !18
  %.sext = sext i8 %16 to i32, !dbg !18
  %.lhs.trunc1 = trunc nsw i32 %14 to i8, !dbg !18
  %.lhs.trunc1.frozen = freeze i8 %.lhs.trunc1, !dbg !18
  %17 = sdiv i8 %.lhs.trunc1.frozen, 16, !dbg !18
  %.sext2 = sext i8 %17 to i32, !dbg !18
  %18 = shl nsw i32 %.sext, 6, !dbg !19
  %19 = shl nsw i32 %.sext2, 6, !dbg !19
  %20 = mul i8 %16, 16, !dbg !20
  %.decomposed7 = sub i8 %.lhs.trunc, %20, !dbg !20
  %.sext4 = sext i8 %.decomposed7 to i32, !dbg !20
  %21 = mul i8 %17, 16, !dbg !20
  %.decomposed8 = sub i8 %.lhs.trunc1.frozen, %21, !dbg !20
  %.sext6 = sext i8 %.decomposed8 to i32, !dbg !20
  %22 = add nsw i32 %18, %.sext4, !dbg !21
  %23 = add nsw i32 %22, %15, !dbg !22
  %24 = add nsw i32 %19, %.sext6, !dbg !21
  %25 = add nsw i32 %24, %15, !dbg !22
  %26 = sext i32 %23 to i64, !dbg !23
  %27 = getelementptr float, ptr addrspace(1) %0, i64 %26, !dbg !23
  %28 = sext i32 %25 to i64, !dbg !23
  %29 = getelementptr float, ptr addrspace(1) %0, i64 %28, !dbg !23
  %30 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %27, i1 %11) #1, !dbg !24
  %31 = bitcast i32 %30 to float, !dbg !24
  %32 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %29, i1 %11) #1, !dbg !24
  %33 = bitcast i32 %32 to float, !dbg !24
  %34 = sext i32 %22 to i64, !dbg !25
  %35 = getelementptr float, ptr addrspace(1) %0, i64 %34, !dbg !25
  %36 = sext i32 %24 to i64, !dbg !25
  %37 = getelementptr float, ptr addrspace(1) %0, i64 %36, !dbg !25
  %38 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %35, i1 %11) #1, !dbg !26
  %39 = bitcast i32 %38 to float, !dbg !26
  %40 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %37, i1 %11) #1, !dbg !26
  %41 = bitcast i32 %40 to float, !dbg !26
  %42 = getelementptr i8, ptr addrspace(1) %35, i64 64, !dbg !27
  %43 = getelementptr i8, ptr addrspace(1) %37, i64 64, !dbg !27
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %42, i1 %11) #1, !dbg !28
  %45 = bitcast i32 %44 to float, !dbg !28
  %46 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %43, i1 %11) #1, !dbg !28
  %47 = bitcast i32 %46 to float, !dbg !28
  %48 = getelementptr i8, ptr addrspace(1) %35, i64 128, !dbg !29
  %49 = getelementptr i8, ptr addrspace(1) %37, i64 128, !dbg !29
  %50 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %48, i1 %11) #1, !dbg !30
  %51 = bitcast i32 %50 to float, !dbg !30
  %52 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %49, i1 %11) #1, !dbg !30
  %53 = bitcast i32 %52 to float, !dbg !30
  %54 = getelementptr i8, ptr addrspace(1) %35, i64 192, !dbg !31
  %55 = getelementptr i8, ptr addrspace(1) %37, i64 192, !dbg !31
  %56 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %54, i1 %11) #1, !dbg !32
  %57 = bitcast i32 %56 to float, !dbg !32
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 %11) #1, !dbg !32
  %59 = bitcast i32 %58 to float, !dbg !32
  %60 = fcmp ogt float %39, %45, !dbg !33
  %61 = fcmp ogt float %41, %47, !dbg !33
  %62 = fcmp uno float %39, 0.000000e+00, !dbg !37
  %63 = fcmp uno float %41, 0.000000e+00, !dbg !37
  %64 = or i1 %62, %60, !dbg !38
  %65 = or i1 %63, %61, !dbg !38
  %66 = select i1 %64, float %39, float %45, !dbg !39
  %67 = select i1 %65, float %41, float %47, !dbg !39
  %68 = fcmp ogt float %66, %51, !dbg !40
  %69 = fcmp ogt float %67, %53, !dbg !40
  %70 = fcmp uno float %66, 0.000000e+00, !dbg !42
  %71 = fcmp uno float %67, 0.000000e+00, !dbg !42
  %72 = or i1 %68, %70, !dbg !43
  %73 = or i1 %69, %71, !dbg !43
  %74 = select i1 %72, float %66, float %51, !dbg !44
  %75 = select i1 %73, float %67, float %53, !dbg !44
  %76 = fcmp ogt float %74, %57, !dbg !45
  %77 = fcmp ogt float %75, %59, !dbg !45
  %78 = fcmp uno float %74, 0.000000e+00, !dbg !47
  %79 = fcmp uno float %75, 0.000000e+00, !dbg !47
  %80 = or i1 %76, %78, !dbg !48
  %81 = or i1 %77, %79, !dbg !48
  %82 = select i1 %80, float %74, float %57, !dbg !49
  %83 = select i1 %81, float %75, float %59, !dbg !49
  %84 = fsub float %31, %82, !dbg !50
  %85 = fsub float %33, %83, !dbg !50
  %86 = sext i32 %9 to i64, !dbg !51
  %87 = getelementptr float, ptr addrspace(1) %1, i64 %86, !dbg !51
  %88 = bitcast float %84 to i32, !dbg !52
  %89 = bitcast float %85 to i32, !dbg !52
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %88, i32 %89, ptr addrspace(1) %87, i1 %11) #1, !dbg !52
  ret void, !dbg !53
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "ch4d3trbnxjltxk5a7elnbhqljdh5cfya5ypql4klfz6kk3a3x3i.py", directory: "inductor_cache/h4")
!4 = !{ptr @triton_poi_fused__log_softmax_0, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused__log_softmax_0, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused__log_softmax_0", linkageName: "triton_poi_fused__log_softmax_0", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 23, column: 21, scope: !7)
!15 = !DILocation(line: 25, column: 19, scope: !7)
!16 = !DILocation(line: 24, column: 19, scope: !7)
!17 = !DILocation(line: 27, column: 33, scope: !7)
!18 = !DILocation(line: 27, column: 48, scope: !7)
!19 = !DILocation(line: 27, column: 42, scope: !7)
!20 = !DILocation(line: 27, column: 61, scope: !7)
!21 = !DILocation(line: 27, column: 38, scope: !7)
!22 = !DILocation(line: 27, column: 56, scope: !7)
!23 = !DILocation(line: 27, column: 30, scope: !7)
!24 = !DILocation(line: 27, column: 68, scope: !7)
!25 = !DILocation(line: 28, column: 30, scope: !7)
!26 = !DILocation(line: 28, column: 60, scope: !7)
!27 = !DILocation(line: 29, column: 30, scope: !7)
!28 = !DILocation(line: 29, column: 65, scope: !7)
!29 = !DILocation(line: 30, column: 30, scope: !7)
!30 = !DILocation(line: 30, column: 65, scope: !7)
!31 = !DILocation(line: 31, column: 30, scope: !7)
!32 = !DILocation(line: 31, column: 65, scope: !7)
!33 = !DILocation(line: 118, column: 15, scope: !34, inlinedAt: !36)
!34 = distinct !DILexicalBlockFile(scope: !7, file: !35, discriminator: 0)
!35 = !DIFile(filename: "triton_helpers.py", directory: "/home/sahanp/.conda/envs/parity-bench/lib/python3.12/site-packages/torch/_inductor/runtime")
!36 = !DILocation(line: 32, column: 40, scope: !7)
!37 = !DILocation(line: 120, column: 21, scope: !34, inlinedAt: !36)
!38 = !DILocation(line: 120, column: 16, scope: !34, inlinedAt: !36)
!39 = !DILocation(line: 121, column: 29, scope: !34, inlinedAt: !36)
!40 = !DILocation(line: 118, column: 15, scope: !34, inlinedAt: !41)
!41 = !DILocation(line: 33, column: 40, scope: !7)
!42 = !DILocation(line: 120, column: 21, scope: !34, inlinedAt: !41)
!43 = !DILocation(line: 120, column: 16, scope: !34, inlinedAt: !41)
!44 = !DILocation(line: 121, column: 29, scope: !34, inlinedAt: !41)
!45 = !DILocation(line: 118, column: 15, scope: !34, inlinedAt: !46)
!46 = !DILocation(line: 34, column: 40, scope: !7)
!47 = !DILocation(line: 120, column: 21, scope: !34, inlinedAt: !46)
!48 = !DILocation(line: 120, column: 16, scope: !34, inlinedAt: !46)
!49 = !DILocation(line: 121, column: 29, scope: !34, inlinedAt: !46)
!50 = !DILocation(line: 35, column: 18, scope: !7)
!51 = !DILocation(line: 36, column: 25, scope: !7)
!52 = !DILocation(line: 36, column: 36, scope: !7)
!53 = !DILocation(line: 36, column: 4, scope: !7)
