; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

define void @triton_poi_fused_leaky_relu_4(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, i32 %3) local_unnamed_addr !dbg !7 {
  %5 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !10
  %6 = shl i32 %5, 9, !dbg !11
  %7 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %8 = shl i32 %7, 1, !dbg !12
  %9 = and i32 %8, 510, !dbg !12
  %10 = or disjoint i32 %6, %9, !dbg !13
  %11 = or disjoint i32 %10, 1, !dbg !13
  %.frozen = freeze i32 %10, !dbg !14
  %12 = sdiv i32 %.frozen, 128, !dbg !14
  %13 = mul i32 %12, 128, !dbg !15
  %.decomposed = sub i32 %.frozen, %13, !dbg !15
  %14 = sdiv i32 %10, 16384, !dbg !16
  %15 = srem i32 %14, 64, !dbg !17
  %16 = insertelement <2 x i32> poison, i32 %11, i64 0, !dbg !15
  %17 = insertelement <2 x i32> %16, i32 %12, i64 1, !dbg !15
  %18 = srem <2 x i32> %17, splat (i32 128), !dbg !15
  %19 = trunc nsw <2 x i32> %18 to <2 x i8>, !dbg !18
  %20 = extractelement <2 x i8> %19, i64 1, !dbg !19
  %21 = sdiv i8 %20, 2, !dbg !19
  %.sext = sext i8 %21 to i32, !dbg !19
  %22 = srem <2 x i8> %19, splat (i8 2), !dbg !18
  %23 = insertelement <4 x i32> poison, i32 %.sext, i64 0, !dbg !20
  %24 = insertelement <4 x i32> %23, i32 %14, i64 1, !dbg !20
  %25 = sext <2 x i8> %22 to <2 x i32>, !dbg !20
  %26 = shufflevector <2 x i32> %25, <2 x i32> poison, <4 x i32> <i32 0, i32 1, i32 poison, i32 poison>, !dbg !20
  %27 = shufflevector <4 x i32> %24, <4 x i32> %26, <4 x i32> <i32 0, i32 1, i32 4, i32 5>, !dbg !20
  %28 = shl nsw <4 x i32> %27, <i32 6, i32 14, i32 12, i32 13>, !dbg !20
  %.lhs.trunc7 = trunc nsw i32 %.decomposed to i8, !dbg !21
  %29 = ashr exact i8 %.lhs.trunc7, 1, !dbg !21
  %.sext8 = sext i8 %29 to i32, !dbg !21
  %30 = extractelement <2 x i8> %19, i64 0, !dbg !21
  %31 = sdiv i8 %30, 2, !dbg !21
  %.sext10 = sext i8 %31 to i32, !dbg !21
  %shift = shufflevector <4 x i32> %28, <4 x i32> poison, <4 x i32> <i32 poison, i32 3, i32 poison, i32 poison>, !dbg !22
  %32 = add <4 x i32> %shift, %28, !dbg !22
  %33 = extractelement <4 x i32> %32, i64 1, !dbg !22
  %34 = add i32 %33, %.sext8, !dbg !23
  %35 = extractelement <4 x i32> %28, i64 0, !dbg !24
  %36 = add i32 %34, %35, !dbg !24
  %37 = tail call i32 @llvm.vector.reduce.add.v4i32(<4 x i32> %28), !dbg !24
  %op.rdx = add i32 %37, %.sext10, !dbg !22
  %38 = sext i32 %36 to i64, !dbg !25
  %39 = getelementptr float, ptr addrspace(1) %0, i64 %38, !dbg !25
  %40 = sext i32 %op.rdx to i64, !dbg !25
  %41 = getelementptr float, ptr addrspace(1) %0, i64 %40, !dbg !25
  %42 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %39, i1 true) #2, !dbg !26
  %43 = bitcast i32 %42 to float, !dbg !26
  %44 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %41, i1 true) #2, !dbg !26
  %45 = bitcast i32 %44 to float, !dbg !26
  %46 = extractelement <2 x i8> %22, i64 1, !dbg !27
  %47 = sext i8 %46 to i32, !dbg !27
  %48 = shl nsw i32 %47, 1, !dbg !27
  %49 = shl nsw i32 %15, 2, !dbg !28
  %50 = add nsw i32 %48, %49, !dbg !29
  %51 = extractelement <2 x i8> %22, i64 0, !dbg !30
  %52 = sext i8 %51 to i32, !dbg !30
  %53 = add nsw i32 %50, %52, !dbg !30
  %54 = sext i32 %50 to i64, !dbg !31
  %55 = getelementptr float, ptr addrspace(1) %1, i64 %54, !dbg !31
  %56 = sext i32 %53 to i64, !dbg !31
  %57 = getelementptr float, ptr addrspace(1) %1, i64 %56, !dbg !31
  %58 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %55, i1 true) #2, !dbg !32
  %59 = bitcast i32 %58 to float, !dbg !32
  %60 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %57, i1 true) #2, !dbg !32
  %61 = bitcast i32 %60 to float, !dbg !32
  %62 = fadd float %43, %59, !dbg !33
  %63 = fadd float %45, %61, !dbg !33
  %64 = fcmp ogt float %62, 0.000000e+00, !dbg !34
  %65 = fcmp ogt float %63, 0.000000e+00, !dbg !34
  %66 = fmul float %62, 0x3FB99999A0000000, !dbg !35
  %67 = fmul float %63, 0x3FB99999A0000000, !dbg !35
  %68 = select i1 %64, float %62, float %66, !dbg !36
  %69 = select i1 %65, float %63, float %67, !dbg !36
  %70 = sext i32 %10 to i64, !dbg !37
  %71 = getelementptr float, ptr addrspace(1) %2, i64 %70, !dbg !37
  %72 = bitcast float %68 to i32, !dbg !38
  %73 = bitcast float %69 to i32, !dbg !38
  tail call void asm sideeffect "@$3 st.global.v2.b32 [ $2 + 0 ], { $0, $1 };", "r,r,l,b"(i32 %72, i32 %73, ptr addrspace(1) %71, i1 true) #2, !dbg !38
  ret void, !dbg !39
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i32 @llvm.vector.reduce.add.v4i32(<4 x i32>) #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cb7ptzhceml3dwdekuya3qwencewdv3lkro3ska54rmqapu4adtc.py", directory: "inductor_cache/b7")
!4 = !{ptr @triton_poi_fused_leaky_relu_4, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_leaky_relu_4, !"reqntidx", i32 256}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_leaky_relu_4", linkageName: "triton_poi_fused_leaky_relu_4", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 21, column: 28, scope: !7)
!11 = !DILocation(line: 21, column: 33, scope: !7)
!12 = !DILocation(line: 22, column: 36, scope: !7)
!13 = !DILocation(line: 22, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 21, scope: !7)
!15 = !DILocation(line: 24, column: 19, scope: !7)
!16 = !DILocation(line: 26, column: 19, scope: !7)
!17 = !DILocation(line: 27, column: 30, scope: !7)
!18 = !DILocation(line: 29, column: 57, scope: !7)
!19 = !DILocation(line: 29, column: 40, scope: !7)
!20 = !DILocation(line: 29, column: 34, scope: !7)
!21 = !DILocation(line: 29, column: 99, scope: !7)
!22 = !DILocation(line: 29, column: 63, scope: !7)
!23 = !DILocation(line: 29, column: 81, scope: !7)
!24 = !DILocation(line: 29, column: 93, scope: !7)
!25 = !DILocation(line: 29, column: 30, scope: !7)
!26 = !DILocation(line: 29, column: 104, scope: !7)
!27 = !DILocation(line: 30, column: 34, scope: !7)
!28 = !DILocation(line: 30, column: 47, scope: !7)
!29 = !DILocation(line: 30, column: 45, scope: !7)
!30 = !DILocation(line: 30, column: 54, scope: !7)
!31 = !DILocation(line: 30, column: 30, scope: !7)
!32 = !DILocation(line: 30, column: 65, scope: !7)
!33 = !DILocation(line: 31, column: 18, scope: !7)
!34 = !DILocation(line: 33, column: 18, scope: !7)
!35 = !DILocation(line: 35, column: 18, scope: !7)
!36 = !DILocation(line: 36, column: 32, scope: !7)
!37 = !DILocation(line: 37, column: 25, scope: !7)
!38 = !DILocation(line: 37, column: 36, scope: !7)
!39 = !DILocation(line: 37, column: 4, scope: !7)
