; ModuleID = 'LLVMDialectModule'
source_filename = "LLVMDialectModule"
target datalayout = "e-p3:32:32-p4:32:32-p5:32:32-i64:64-i128:128-v16:16-v32:32-n16:32:64"

@global_smem = external addrspace(3) global [0 x i8], align 16

define void @triton_poi_fused_add_mul_11(ptr addrspace(1) %0, ptr addrspace(1) %1, ptr addrspace(1) %2, ptr addrspace(1) %3, ptr addrspace(1) %4, ptr addrspace(1) %5, i32 %6, i32 %7) local_unnamed_addr !dbg !7 {
  %9 = tail call i32 asm "mov.u32 $0, %ctaid.y;", "=r"() #2, !dbg !10
  %10 = shl i32 %9, 10, !dbg !11
  %11 = tail call i32 @llvm.nvvm.read.ptx.sreg.tid.x(), !dbg !12
  %12 = and i32 %11, 127, !dbg !12
  %13 = or disjoint i32 %12, 128, !dbg !12
  %14 = or disjoint i32 %12, 256, !dbg !12
  %15 = or disjoint i32 %12, 384, !dbg !12
  %16 = shl i32 %11, 2, !dbg !12
  %17 = and i32 %16, 508, !dbg !12
  %18 = or disjoint i32 %10, %12, !dbg !13
  %19 = or disjoint i32 %10, %13, !dbg !13
  %20 = or disjoint i32 %10, %14, !dbg !13
  %21 = or disjoint i32 %10, %15, !dbg !13
  %22 = or disjoint i32 %18, 512, !dbg !13
  %23 = or disjoint i32 %18, 640, !dbg !13
  %24 = or disjoint i32 %18, 768, !dbg !13
  %25 = or disjoint i32 %18, 896, !dbg !13
  %26 = or disjoint i32 %10, %17, !dbg !13
  %27 = or disjoint i32 %26, 512, !dbg !13
  %28 = tail call i32 asm "mov.u32 $0, %ctaid.x;", "=r"() #2, !dbg !14
  %29 = icmp slt i32 %28, 128, !dbg !15
  %.frozen = freeze i32 %26, !dbg !16
  %30 = sdiv i32 %.frozen, 256, !dbg !16
  %31 = sdiv i32 %27, 256, !dbg !16
  %32 = mul i32 %30, 256, !dbg !17
  %.decomposed = sub i32 %.frozen, %32, !dbg !17
  %33 = sdiv i32 %18, 16, !dbg !18
  %34 = sdiv i32 %19, 16, !dbg !18
  %35 = sdiv i32 %20, 16, !dbg !18
  %36 = sdiv i32 %21, 16, !dbg !18
  %37 = sdiv i32 %22, 16, !dbg !18
  %38 = sdiv i32 %23, 16, !dbg !18
  %39 = sdiv i32 %24, 16, !dbg !18
  %40 = sdiv i32 %25, 16, !dbg !18
  %41 = srem i32 %33, 16, !dbg !19
  %42 = srem i32 %34, 16, !dbg !19
  %43 = srem i32 %35, 16, !dbg !19
  %44 = srem i32 %36, 16, !dbg !19
  %45 = srem i32 %37, 16, !dbg !19
  %46 = srem i32 %38, 16, !dbg !19
  %47 = srem i32 %39, 16, !dbg !19
  %48 = srem i32 %40, 16, !dbg !19
  %49 = shl i32 %18, 7, !dbg !20
  %50 = shl i32 %19, 7, !dbg !20
  %51 = shl i32 %20, 7, !dbg !20
  %52 = shl i32 %21, 7, !dbg !20
  %53 = shl i32 %22, 7, !dbg !20
  %54 = shl i32 %23, 7, !dbg !20
  %55 = shl i32 %24, 7, !dbg !20
  %56 = shl i32 %25, 7, !dbg !20
  %57 = add i32 %49, %28, !dbg !21
  %58 = add i32 %50, %28, !dbg !21
  %59 = add i32 %51, %28, !dbg !21
  %60 = add i32 %52, %28, !dbg !21
  %61 = add i32 %28, %53, !dbg !21
  %62 = add i32 %28, %54, !dbg !21
  %63 = add i32 %28, %55, !dbg !21
  %64 = add i32 %28, %56, !dbg !21
  %65 = sext i32 %57 to i64, !dbg !22
  %66 = getelementptr float, ptr addrspace(1) %0, i64 %65, !dbg !22
  %67 = sext i32 %58 to i64, !dbg !22
  %68 = getelementptr float, ptr addrspace(1) %0, i64 %67, !dbg !22
  %69 = sext i32 %59 to i64, !dbg !22
  %70 = getelementptr float, ptr addrspace(1) %0, i64 %69, !dbg !22
  %71 = sext i32 %60 to i64, !dbg !22
  %72 = getelementptr float, ptr addrspace(1) %0, i64 %71, !dbg !22
  %73 = sext i32 %61 to i64, !dbg !22
  %74 = getelementptr float, ptr addrspace(1) %0, i64 %73, !dbg !22
  %75 = sext i32 %62 to i64, !dbg !22
  %76 = getelementptr float, ptr addrspace(1) %0, i64 %75, !dbg !22
  %77 = sext i32 %63 to i64, !dbg !22
  %78 = getelementptr float, ptr addrspace(1) %0, i64 %77, !dbg !22
  %79 = sext i32 %64 to i64, !dbg !22
  %80 = getelementptr float, ptr addrspace(1) %0, i64 %79, !dbg !22
  %81 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %66, i1 %29) #2, !dbg !23
  %82 = bitcast i32 %81 to float, !dbg !23
  %83 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %68, i1 %29) #2, !dbg !23
  %84 = bitcast i32 %83 to float, !dbg !23
  %85 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %70, i1 %29) #2, !dbg !23
  %86 = bitcast i32 %85 to float, !dbg !23
  %87 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %72, i1 %29) #2, !dbg !23
  %88 = bitcast i32 %87 to float, !dbg !23
  %89 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %74, i1 %29) #2, !dbg !23
  %90 = bitcast i32 %89 to float, !dbg !23
  %91 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %76, i1 %29) #2, !dbg !23
  %92 = bitcast i32 %91 to float, !dbg !23
  %93 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %78, i1 %29) #2, !dbg !23
  %94 = bitcast i32 %93 to float, !dbg !23
  %95 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %80, i1 %29) #2, !dbg !23
  %96 = bitcast i32 %95 to float, !dbg !23
  %97 = getelementptr float, ptr addrspace(1) %1, i64 %65, !dbg !24
  %98 = getelementptr float, ptr addrspace(1) %1, i64 %67, !dbg !24
  %99 = getelementptr float, ptr addrspace(1) %1, i64 %69, !dbg !24
  %100 = getelementptr float, ptr addrspace(1) %1, i64 %71, !dbg !24
  %101 = getelementptr float, ptr addrspace(1) %1, i64 %73, !dbg !24
  %102 = getelementptr float, ptr addrspace(1) %1, i64 %75, !dbg !24
  %103 = getelementptr float, ptr addrspace(1) %1, i64 %77, !dbg !24
  %104 = getelementptr float, ptr addrspace(1) %1, i64 %79, !dbg !24
  %105 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %97, i1 %29) #2, !dbg !25
  %106 = bitcast i32 %105 to float, !dbg !25
  %107 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %98, i1 %29) #2, !dbg !25
  %108 = bitcast i32 %107 to float, !dbg !25
  %109 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %99, i1 %29) #2, !dbg !25
  %110 = bitcast i32 %109 to float, !dbg !25
  %111 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %100, i1 %29) #2, !dbg !25
  %112 = bitcast i32 %111 to float, !dbg !25
  %113 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %101, i1 %29) #2, !dbg !25
  %114 = bitcast i32 %113 to float, !dbg !25
  %115 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %102, i1 %29) #2, !dbg !25
  %116 = bitcast i32 %115 to float, !dbg !25
  %117 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %103, i1 %29) #2, !dbg !25
  %118 = bitcast i32 %117 to float, !dbg !25
  %119 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %104, i1 %29) #2, !dbg !25
  %120 = bitcast i32 %119 to float, !dbg !25
  %121 = shl i32 %28, 8, !dbg !26
  %122 = add i32 %.decomposed, %121, !dbg !27
  %123 = shl i32 %30, 15, !dbg !28
  %124 = shl i32 %31, 15, !dbg !28
  %125 = add i32 %122, %123, !dbg !29
  %126 = add i32 %124, %.decomposed, !dbg !27
  %127 = add i32 %126, %121, !dbg !29
  %128 = sext i32 %125 to i64, !dbg !30
  %129 = getelementptr float, ptr addrspace(1) %2, i64 %128, !dbg !30
  %130 = sext i32 %127 to i64, !dbg !30
  %131 = getelementptr float, ptr addrspace(1) %2, i64 %130, !dbg !30
  %132 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %129, i1 %29) #2, !dbg !31
  %133 = extractvalue { i32, i32, i32, i32 } %132, 0, !dbg !31
  %134 = extractvalue { i32, i32, i32, i32 } %132, 1, !dbg !31
  %135 = extractvalue { i32, i32, i32, i32 } %132, 2, !dbg !31
  %136 = extractvalue { i32, i32, i32, i32 } %132, 3, !dbg !31
  %137 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %131, i1 %29) #2, !dbg !31
  %138 = extractvalue { i32, i32, i32, i32 } %137, 0, !dbg !31
  %139 = extractvalue { i32, i32, i32, i32 } %137, 1, !dbg !31
  %140 = extractvalue { i32, i32, i32, i32 } %137, 2, !dbg !31
  %141 = extractvalue { i32, i32, i32, i32 } %137, 3, !dbg !31
  %.idx = shl nuw nsw i32 %17, 3, !dbg !31
  %142 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx, !dbg !31
  %143 = insertelement <1 x i32> poison, i32 %133, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %142, <1 x i32> %143, i1 true) #2, !dbg !31
  %144 = shl nuw nsw i32 %17, 1, !dbg !31
  %145 = or disjoint i32 %144, 2, !dbg !31
  %146 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %145, !dbg !31
  %147 = insertelement <1 x i32> poison, i32 %134, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %146, <1 x i32> %147, i1 true) #2, !dbg !31
  %148 = or disjoint i32 %144, 4, !dbg !31
  %149 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %148, !dbg !31
  %150 = insertelement <1 x i32> poison, i32 %135, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %149, <1 x i32> %150, i1 true) #2, !dbg !31
  %151 = or disjoint i32 %144, 6, !dbg !31
  %152 = getelementptr inbounds float, ptr addrspace(3) @global_smem, i32 %151, !dbg !31
  %153 = insertelement <1 x i32> poison, i32 %136, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %152, <1 x i32> %153, i1 true) #2, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %.idx1 = shl nuw nsw i32 %12, 3, !dbg !31
  %154 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx1, !dbg !31
  %155 = load float, ptr addrspace(3) %154, align 8, !dbg !31
  %.idx2 = shl nuw nsw i32 %13, 3, !dbg !31
  %156 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx2, !dbg !31
  %157 = load float, ptr addrspace(3) %156, align 8, !dbg !31
  %.idx3 = shl nuw nsw i32 %14, 3, !dbg !31
  %158 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx3, !dbg !31
  %159 = load float, ptr addrspace(3) %158, align 8, !dbg !31
  %.idx4 = shl nuw nsw i32 %15, 3, !dbg !31
  %160 = getelementptr inbounds i8, ptr addrspace(3) @global_smem, i32 %.idx4, !dbg !31
  %161 = load float, ptr addrspace(3) %160, align 8, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %162 = insertelement <1 x i32> poison, i32 %138, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %142, <1 x i32> %162, i1 true) #2, !dbg !31
  %163 = insertelement <1 x i32> poison, i32 %139, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %146, <1 x i32> %163, i1 true) #2, !dbg !31
  %164 = insertelement <1 x i32> poison, i32 %140, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %149, <1 x i32> %164, i1 true) #2, !dbg !31
  %165 = insertelement <1 x i32> poison, i32 %141, i64 0, !dbg !31
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %152, <1 x i32> %165, i1 true) #2, !dbg !31
  tail call void @llvm.nvvm.barrier0(), !dbg !31
  %166 = load float, ptr addrspace(3) %154, align 8, !dbg !31
  %167 = load float, ptr addrspace(3) %156, align 8, !dbg !31
  %168 = load float, ptr addrspace(3) %158, align 8, !dbg !31
  %169 = load float, ptr addrspace(3) %160, align 8, !dbg !31
  %170 = getelementptr float, ptr addrspace(1) %3, i64 %128, !dbg !32
  %171 = getelementptr float, ptr addrspace(1) %3, i64 %130, !dbg !32
  %172 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %170, i1 %29) #2, !dbg !33
  %173 = extractvalue { i32, i32, i32, i32 } %172, 0, !dbg !33
  %174 = extractvalue { i32, i32, i32, i32 } %172, 1, !dbg !33
  %175 = extractvalue { i32, i32, i32, i32 } %172, 2, !dbg !33
  %176 = extractvalue { i32, i32, i32, i32 } %172, 3, !dbg !33
  %177 = tail call { i32, i32, i32, i32 } asm sideeffect "mov.u32 $0, 0x0;\0A\09mov.u32 $1, 0x0;\0A\09mov.u32 $2, 0x0;\0A\09mov.u32 $3, 0x0;\0A\09@$5 ld.global.L1::evict_last.v4.b32 { $0, $1, $2, $3 }, [ $4 + 0 ];", "=r,=r,=r,=r,l,b"(ptr addrspace(1) %171, i1 %29) #2, !dbg !33
  %178 = extractvalue { i32, i32, i32, i32 } %177, 0, !dbg !33
  %179 = extractvalue { i32, i32, i32, i32 } %177, 1, !dbg !33
  %180 = extractvalue { i32, i32, i32, i32 } %177, 2, !dbg !33
  %181 = extractvalue { i32, i32, i32, i32 } %177, 3, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %182 = insertelement <1 x i32> poison, i32 %173, i64 0, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %142, <1 x i32> %182, i1 true) #2, !dbg !33
  %183 = insertelement <1 x i32> poison, i32 %174, i64 0, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %146, <1 x i32> %183, i1 true) #2, !dbg !33
  %184 = insertelement <1 x i32> poison, i32 %175, i64 0, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %149, <1 x i32> %184, i1 true) #2, !dbg !33
  %185 = insertelement <1 x i32> poison, i32 %176, i64 0, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %152, <1 x i32> %185, i1 true) #2, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %186 = load float, ptr addrspace(3) %154, align 8, !dbg !33
  %187 = load float, ptr addrspace(3) %156, align 8, !dbg !33
  %188 = load float, ptr addrspace(3) %158, align 8, !dbg !33
  %189 = load float, ptr addrspace(3) %160, align 8, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %190 = insertelement <1 x i32> poison, i32 %178, i64 0, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %142, <1 x i32> %190, i1 true) #2, !dbg !33
  %191 = insertelement <1 x i32> poison, i32 %179, i64 0, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %146, <1 x i32> %191, i1 true) #2, !dbg !33
  %192 = insertelement <1 x i32> poison, i32 %180, i64 0, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %149, <1 x i32> %192, i1 true) #2, !dbg !33
  %193 = insertelement <1 x i32> poison, i32 %181, i64 0, !dbg !33
  tail call void asm sideeffect "@$2 st.shared.b32 [ $0 + 0 ], $1;", "r,r,b"(ptr addrspace(3) %152, <1 x i32> %193, i1 true) #2, !dbg !33
  tail call void @llvm.nvvm.barrier0(), !dbg !33
  %194 = load float, ptr addrspace(3) %154, align 8, !dbg !33
  %195 = load float, ptr addrspace(3) %156, align 8, !dbg !33
  %196 = load float, ptr addrspace(3) %158, align 8, !dbg !33
  %197 = load float, ptr addrspace(3) %160, align 8, !dbg !33
  %198 = sext i32 %41 to i64, !dbg !34
  %199 = getelementptr float, ptr addrspace(1) %4, i64 %198, !dbg !34
  %200 = sext i32 %42 to i64, !dbg !34
  %201 = getelementptr float, ptr addrspace(1) %4, i64 %200, !dbg !34
  %202 = sext i32 %43 to i64, !dbg !34
  %203 = getelementptr float, ptr addrspace(1) %4, i64 %202, !dbg !34
  %204 = sext i32 %44 to i64, !dbg !34
  %205 = getelementptr float, ptr addrspace(1) %4, i64 %204, !dbg !34
  %206 = sext i32 %45 to i64, !dbg !34
  %207 = getelementptr float, ptr addrspace(1) %4, i64 %206, !dbg !34
  %208 = sext i32 %46 to i64, !dbg !34
  %209 = getelementptr float, ptr addrspace(1) %4, i64 %208, !dbg !34
  %210 = sext i32 %47 to i64, !dbg !34
  %211 = getelementptr float, ptr addrspace(1) %4, i64 %210, !dbg !34
  %212 = sext i32 %48 to i64, !dbg !34
  %213 = getelementptr float, ptr addrspace(1) %4, i64 %212, !dbg !34
  %214 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %199, i1 true) #2, !dbg !35
  %215 = bitcast i32 %214 to float, !dbg !35
  %216 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %201, i1 true) #2, !dbg !35
  %217 = bitcast i32 %216 to float, !dbg !35
  %218 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %203, i1 true) #2, !dbg !35
  %219 = bitcast i32 %218 to float, !dbg !35
  %220 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %205, i1 true) #2, !dbg !35
  %221 = bitcast i32 %220 to float, !dbg !35
  %222 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %207, i1 true) #2, !dbg !35
  %223 = bitcast i32 %222 to float, !dbg !35
  %224 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %209, i1 true) #2, !dbg !35
  %225 = bitcast i32 %224 to float, !dbg !35
  %226 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %211, i1 true) #2, !dbg !35
  %227 = bitcast i32 %226 to float, !dbg !35
  %228 = tail call i32 asm sideeffect "mov.u32 $0, 0x0;\0A\09@$2 ld.global.L1::evict_last.b32 { $0 }, [ $1 + 0 ];", "=r,l,b"(ptr addrspace(1) %213, i1 true) #2, !dbg !35
  %229 = bitcast i32 %228 to float, !dbg !35
  %230 = fmul float %82, %106, !dbg !36
  %231 = fmul float %84, %108, !dbg !36
  %232 = fmul float %86, %110, !dbg !36
  %233 = fmul float %88, %112, !dbg !36
  %234 = fmul float %90, %114, !dbg !36
  %235 = fmul float %92, %116, !dbg !36
  %236 = fmul float %94, %118, !dbg !36
  %237 = fmul float %96, %120, !dbg !36
  %238 = fmul float %186, %215, !dbg !37
  %239 = fmul float %187, %217, !dbg !37
  %240 = fmul float %188, %219, !dbg !37
  %241 = fmul float %189, %221, !dbg !37
  %242 = fmul float %194, %223, !dbg !37
  %243 = fmul float %195, %225, !dbg !37
  %244 = fmul float %196, %227, !dbg !37
  %245 = fmul float %197, %229, !dbg !37
  %246 = fadd float %155, %238, !dbg !38
  %247 = fadd float %157, %239, !dbg !38
  %248 = fadd float %159, %240, !dbg !38
  %249 = fadd float %161, %241, !dbg !38
  %250 = fadd float %166, %242, !dbg !38
  %251 = fadd float %167, %243, !dbg !38
  %252 = fadd float %168, %244, !dbg !38
  %253 = fadd float %169, %245, !dbg !38
  %254 = fadd float %230, %246, !dbg !39
  %255 = fadd float %231, %247, !dbg !39
  %256 = fadd float %232, %248, !dbg !39
  %257 = fadd float %233, %249, !dbg !39
  %258 = fadd float %234, %250, !dbg !39
  %259 = fadd float %235, %251, !dbg !39
  %260 = fadd float %236, %252, !dbg !39
  %261 = fadd float %237, %253, !dbg !39
  %262 = getelementptr float, ptr addrspace(1) %5, i64 %65, !dbg !40
  %263 = getelementptr float, ptr addrspace(1) %5, i64 %67, !dbg !40
  %264 = getelementptr float, ptr addrspace(1) %5, i64 %69, !dbg !40
  %265 = getelementptr float, ptr addrspace(1) %5, i64 %71, !dbg !40
  %266 = getelementptr float, ptr addrspace(1) %5, i64 %73, !dbg !40
  %267 = getelementptr float, ptr addrspace(1) %5, i64 %75, !dbg !40
  %268 = getelementptr float, ptr addrspace(1) %5, i64 %77, !dbg !40
  %269 = getelementptr float, ptr addrspace(1) %5, i64 %79, !dbg !40
  %270 = bitcast float %254 to i32, !dbg !41
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %270, ptr addrspace(1) %262, i1 %29) #2, !dbg !41
  %271 = bitcast float %255 to i32, !dbg !41
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %271, ptr addrspace(1) %263, i1 %29) #2, !dbg !41
  %272 = bitcast float %256 to i32, !dbg !41
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %272, ptr addrspace(1) %264, i1 %29) #2, !dbg !41
  %273 = bitcast float %257 to i32, !dbg !41
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %273, ptr addrspace(1) %265, i1 %29) #2, !dbg !41
  %274 = bitcast float %258 to i32, !dbg !41
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %274, ptr addrspace(1) %266, i1 %29) #2, !dbg !41
  %275 = bitcast float %259 to i32, !dbg !41
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %275, ptr addrspace(1) %267, i1 %29) #2, !dbg !41
  %276 = bitcast float %260 to i32, !dbg !41
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %276, ptr addrspace(1) %268, i1 %29) #2, !dbg !41
  %277 = bitcast float %261 to i32, !dbg !41
  tail call void asm sideeffect "@$2 st.global.b32 [ $1 + 0 ], { $0 };", "r,l,b"(i32 %277, ptr addrspace(1) %269, i1 %29) #2, !dbg !41
  ret void, !dbg !42
}

; Function Attrs: mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare noundef i32 @llvm.nvvm.read.ptx.sreg.tid.x() #0

; Function Attrs: convergent nocallback nounwind
declare void @llvm.nvvm.barrier0() #1

attributes #0 = { mustprogress nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #1 = { convergent nocallback nounwind }
attributes #2 = { nounwind }

!llvm.module.flags = !{!0, !1}
!llvm.dbg.cu = !{!2}
!nvvm.annotations = !{!4, !5}
!llvm.ident = !{!6}

!0 = !{i32 2, !"Debug Info Version", i32 3}
!1 = !{i32 4, !"nvvm-reflect-ftz", i32 1}
!2 = distinct !DICompileUnit(language: DW_LANG_C, file: !3, producer: "triton", isOptimized: true, runtimeVersion: 0, emissionKind: LineTablesOnly)
!3 = !DIFile(filename: "cjp3nejrw3berdc4jtalvvuvyiounrucgcf5gdphvissk4u26rjo.py", directory: "inductor_cache/jp")
!4 = !{ptr @triton_poi_fused_add_mul_11, !"kernel", i32 1}
!5 = !{ptr @triton_poi_fused_add_mul_11, !"reqntidx", i32 128}
!6 = !{!"clang version 3.8.0 (tags/RELEASE_380/final)"}
!7 = distinct !DISubprogram(name: "triton_poi_fused_add_mul_11", linkageName: "triton_poi_fused_add_mul_11", scope: !3, file: !3, line: 19, type: !8, scopeLine: 19, spFlags: DISPFlagDefinition | DISPFlagOptimized, unit: !2)
!8 = !DISubroutineType(cc: DW_CC_normal, types: !9)
!9 = !{}
!10 = !DILocation(line: 22, column: 28, scope: !7)
!11 = !DILocation(line: 22, column: 33, scope: !7)
!12 = !DILocation(line: 23, column: 44, scope: !7)
!13 = !DILocation(line: 23, column: 23, scope: !7)
!14 = !DILocation(line: 25, column: 28, scope: !7)
!15 = !DILocation(line: 27, column: 21, scope: !7)
!16 = !DILocation(line: 30, column: 19, scope: !7)
!17 = !DILocation(line: 31, column: 19, scope: !7)
!18 = !DILocation(line: 32, column: 21, scope: !7)
!19 = !DILocation(line: 32, column: 27, scope: !7)
!20 = !DILocation(line: 33, column: 39, scope: !7)
!21 = !DILocation(line: 33, column: 35, scope: !7)
!22 = !DILocation(line: 33, column: 30, scope: !7)
!23 = !DILocation(line: 33, column: 44, scope: !7)
!24 = !DILocation(line: 34, column: 30, scope: !7)
!25 = !DILocation(line: 34, column: 44, scope: !7)
!26 = !DILocation(line: 35, column: 39, scope: !7)
!27 = !DILocation(line: 35, column: 35, scope: !7)
!28 = !DILocation(line: 35, column: 50, scope: !7)
!29 = !DILocation(line: 35, column: 44, scope: !7)
!30 = !DILocation(line: 35, column: 30, scope: !7)
!31 = !DILocation(line: 35, column: 55, scope: !7)
!32 = !DILocation(line: 36, column: 30, scope: !7)
!33 = !DILocation(line: 36, column: 55, scope: !7)
!34 = !DILocation(line: 37, column: 30, scope: !7)
!35 = !DILocation(line: 37, column: 35, scope: !7)
!36 = !DILocation(line: 38, column: 18, scope: !7)
!37 = !DILocation(line: 39, column: 18, scope: !7)
!38 = !DILocation(line: 40, column: 18, scope: !7)
!39 = !DILocation(line: 41, column: 18, scope: !7)
!40 = !DILocation(line: 42, column: 25, scope: !7)
!41 = !DILocation(line: 42, column: 45, scope: !7)
!42 = !DILocation(line: 42, column: 4, scope: !7)
